id ___createITSListForFTSQuery_block_invoke_2()
{
  CFStringTokenizerRef v0;
  void *v1;
  void *v3;
  void *v4;
  CFRange v5;

  v5.location = 0;
  v5.length = 0;
  v0 = CFStringTokenizerCreate(0, 0, v5, 0x810000uLL, 0);
  if (!v0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "ITSTokenListRef _createITSListForFTSQuery(NSString *__strong)_block_invoke_2");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("SGTokenizer.m"), 111, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("tokenizer"));

  }
  v1 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D815F0]), "initWithGuardedData:", v0);

  return v1;
}

uint64_t SGRecordMeasurementState(_QWORD *a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  NSObject *v5;
  double v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  __int16 v11;
  double v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  result = a1[2];
  if (!result)
  {
    v3 = mach_absolute_time() - a1[1];
    if (SGMachTimeToNanoseconds_onceToken != -1)
      dispatch_once(&SGMachTimeToNanoseconds_onceToken, &__block_literal_global_13797);
    v4 = v3 * SGMachTimeToNanoseconds_machTimebaseInfo / *(unsigned int *)algn_1ED52979C;
    sgLogHandle();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      v8 = (void *)*a1;
      v6 = (double)v4;
      v9 = 138412546;
      v10 = v8;
      v11 = 2048;
      v12 = (double)v4 * 0.000000001;
      _os_log_debug_impl(&dword_1C3607000, v5, OS_LOG_TYPE_DEBUG, "SGScales: %@ took %f seconds", (uint8_t *)&v9, 0x16u);
    }
    else
    {
      v6 = (double)v4;
    }

    v7 = (void *)*a1;
    +[SGAggregateLogging pushValue:toDistKeyWithDomain:suffix:](SGAggregateLogging, "pushValue:toDistKeyWithDomain:suffix:", CFSTR("timing"), *a1, v6 / 1000000.0);

    *a1 = 0;
    if (v4 <= 1)
      result = 1;
    else
      result = v4;
    a1[2] = result;
  }
  return result;
}

void ___registerEnableDisablePreferenceChangeListener_block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;

  objc_msgSend(MEMORY[0x1E0CB35B0], "defaultCenter");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "postNotificationName:object:userInfo:deliverImmediately:", *MEMORY[0x1E0D19DA8], 0, 0, 1);

  if (*(_BYTE *)(a1 + 32))
  {
    v3 = *MEMORY[0x1E0D19A08];
    v4 = (void *)CFPreferencesCopyAppValue(CFSTR("AppCanShowSiriSuggestionsBlacklist"), CFSTR("com.apple.suggestions"));
    LOBYTE(v3) = objc_msgSend(v4, "containsObject:", v3);

    objc_msgSend(MEMORY[0x1E0CAA078], "sg_newStore");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v5;
    if ((v3 & 1) != 0)
      objc_msgSend(v5, "removeSuggestedEventCalendar");
    else
      objc_msgSend(v5, "insertSuggestedEventCalendar");

  }
}

void sub_1C360BAA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id *location, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,id a48)
{
  id *v48;
  id *v49;
  id *v50;

  objc_destroyWeak(v50);
  objc_destroyWeak(v49);
  objc_destroyWeak(v48);
  objc_destroyWeak(location);
  objc_destroyWeak(&a48);
  _Unwind_Resume(a1);
}

id aggdKeyForComponents(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  char *v15;
  _OWORD v16[16];
  _QWORD v17[2];

  v17[1] = *MEMORY[0x1E0C80C00];
  memset(v16, 0, sizeof(v16));
  v15 = (char *)v16;
  v9 = a5;
  v10 = a4;
  v11 = a3;
  v12 = a2;
  v13 = a1;
  appendStringToBuf(&v15, (unint64_t)v17, CFSTR("com.apple.suggestions"), 0);
  appendStringToBuf(&v15, (unint64_t)v17, v13, 1);

  appendStringToBuf(&v15, (unint64_t)v17, v9, 1);
  appendStringToBuf(&v15, (unint64_t)v17, v12, 1);

  appendStringToBuf(&v15, (unint64_t)v17, v11, 1);
  appendStringToBuf(&v15, (unint64_t)v17, v10, 1);

  return (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithUTF8String:", v16);
}

void appendStringToBuf(char **a1, unint64_t a2, void *a3, int a4)
{
  id v7;
  char *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;

  v7 = a3;
  v8 = *a1;
  v13 = v7;
  if (v7 && (unint64_t)v8 < a2)
  {
    if (a4)
    {
      *v8 = 46;
      v8 = *a1 + 1;
      *a1 = v8;
      if ((unint64_t)v8 >= a2)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void appendStringToBuf(char **, const char *, NSString *__strong, BOOL)");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "handleFailureInFunction:file:lineNumber:description:", v12, CFSTR("SGAggregateLogging+PET.m"), 26, CFSTR("Logging string too long"));

        v7 = v13;
        v8 = *a1;
      }
    }
    v8 = &(*a1)[strlcpy(v8, (const char *)objc_msgSend(objc_retainAutorelease(v7), "UTF8String"), a2 - (_QWORD)*a1)];
    *a1 = v8;
  }
  if ((unint64_t)v8 >= a2)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void appendStringToBuf(char **, const char *, NSString *__strong, BOOL)");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "handleFailureInFunction:file:lineNumber:description:", v10, CFSTR("SGAggregateLogging+PET.m"), 30, CFSTR("Logging string too long"));

  }
}

void sub_1C360CDA0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void ___createITSListForFTSQuery_block_invoke_3(uint64_t a1, void *a2)
{
  const __CFString *v3;
  __CFStringTokenizer *tokenizer;
  CFRange v5;
  CFRange v6;

  tokenizer = a2;
  v3 = *(const __CFString **)(a1 + 40);
  v5.length = objc_msgSend(*(id *)(a1 + 32), "length");
  v5.location = 0;
  CFStringTokenizerSetString(tokenizer, v3, v5);
  ITSTokenListPopulateFromString();
  v6.location = 0;
  v6.length = 1;
  CFStringTokenizerSetString(tokenizer, CFSTR("âŒ˜"), v6);
  CFRelease(tokenizer);

}

id SGDataDetectorsScanForPhoneLessCarefully(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  __CFString *v5;
  __CFString *v6;
  void *v7;
  CFIndex Length;
  const UniChar *CharactersPtr;
  const char *CStringPtr;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  CFIndex v16;
  UniChar v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  CFIndex v22;
  uint64_t v23;
  void *v25;
  _OWORD v27[8];
  CFStringRef theString;
  const UniChar *v29;
  const char *v30;
  uint64_t v31;
  CFIndex v32;
  uint64_t v33;
  uint64_t v34;
  CFRange v35;

  v1 = a1;
  v2 = (void *)MEMORY[0x1C3BD4F6C]();
  objc_msgSend(MEMORY[0x1E0CB3500], "whitespaceCharacterSet");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "stringByTrimmingCharactersInSet:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  objc_autoreleasePoolPop(v2);
  if ((unint64_t)objc_msgSend(v4, "length") < 5 || (unint64_t)objc_msgSend(v4, "length") >= 0x15)
  {
    SGDataDetectorsScanForPhone(v4);
    v5 = (__CFString *)objc_claimAutoreleasedReturnValue();
LABEL_34:
    v25 = v5;
    goto LABEL_35;
  }
  v6 = v4;
  objc_opt_self();
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v7)
    goto LABEL_33;
  memset(v27, 0, sizeof(v27));
  Length = CFStringGetLength(v6);
  theString = v6;
  v31 = 0;
  v32 = Length;
  CharactersPtr = CFStringGetCharactersPtr(v6);
  CStringPtr = 0;
  v29 = CharactersPtr;
  if (!CharactersPtr)
    CStringPtr = CFStringGetCStringPtr(v6, 0x600u);
  v33 = 0;
  v34 = 0;
  v30 = CStringPtr;
  if (Length < 1)
  {
LABEL_33:

    v5 = v6;
    goto LABEL_34;
  }
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 64;
  while (1)
  {
    v15 = (unint64_t)v13 >= 4 ? 4 : v13;
    v16 = v32;
    if (v32 <= v13)
      break;
    if (v29)
    {
      v17 = v29[v13 + v31];
    }
    else if (v30)
    {
      v17 = v30[v31 + v13];
    }
    else
    {
      v18 = v34 > v13 && v12 <= v13;
      if (!v18)
      {
        v19 = v15 + v11;
        v20 = v14 - v15;
        v21 = v13 - v15;
        v22 = v21 + 64;
        if (v21 + 64 >= v32)
          v22 = v32;
        v33 = v21;
        v34 = v22;
        if (v32 >= v20)
          v16 = v20;
        v35.length = v16 + v19;
        v35.location = v21 + v31;
        CFStringGetCharacters(theString, v35, (UniChar *)v27);
        v12 = v33;
      }
      v17 = *((_WORD *)v27 + v13 - v12);
    }
    if (v17 - 48 >= 0xA)
    {
      v18 = v17 > 0x2Du;
      v23 = (1 << v17) & 0x2B0100000000;
      if (v18 || v23 == 0)
        break;
    }
    ++v13;
    --v11;
    ++v14;
    if (Length == v13)
      goto LABEL_33;
  }
  SGDataDetectorsScanForPhone(v6);
  v25 = (void *)objc_claimAutoreleasedReturnValue();

LABEL_35:
  return v25;
}

id SGNormalizeCNAddress(void *a1)
{
  objc_class *v1;
  id v2;
  uint64_t v3;
  void *v4;
  const __CFString *v5;
  uint64_t v6;
  void *v7;
  const __CFString *v8;
  uint64_t v9;
  void *v10;
  const __CFString *v11;
  uint64_t v12;
  void *v13;
  const __CFString *v14;
  uint64_t v15;
  void *v16;
  const __CFString *v17;
  __CFString *v18;
  const __CFString *v19;
  void *v20;
  void *v21;
  const __CFString *v23;
  const __CFString *v24;
  const __CFString *v25;
  id v26;

  v1 = (objc_class *)MEMORY[0x1E0CB3940];
  v2 = a1;
  v26 = [v1 alloc];
  objc_msgSend(v2, "street");
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = (void *)v3;
  if (v3)
    v5 = (const __CFString *)v3;
  else
    v5 = &stru_1E7DB83A8;
  v25 = v5;
  objc_msgSend(v2, "city");
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)v6;
  if (v6)
    v8 = (const __CFString *)v6;
  else
    v8 = &stru_1E7DB83A8;
  v24 = v8;
  objc_msgSend(v2, "state");
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = (void *)v9;
  if (v9)
    v11 = (const __CFString *)v9;
  else
    v11 = &stru_1E7DB83A8;
  v23 = v11;
  objc_msgSend(v2, "postalCode");
  v12 = objc_claimAutoreleasedReturnValue();
  v13 = (void *)v12;
  if (v12)
    v14 = (const __CFString *)v12;
  else
    v14 = &stru_1E7DB83A8;
  objc_msgSend(v2, "country");
  v15 = objc_claimAutoreleasedReturnValue();
  v16 = (void *)v15;
  if (v15)
    v17 = (const __CFString *)v15;
  else
    v17 = &stru_1E7DB83A8;
  objc_msgSend(v2, "ISOCountryCode");
  v18 = (__CFString *)objc_claimAutoreleasedReturnValue();

  if (v18)
    v19 = v18;
  else
    v19 = &stru_1E7DB83A8;
  v20 = (void *)objc_msgSend(v26, "initWithFormat:", CFSTR("%@ %@ %@ %@ %@ %@"), v25, v24, v23, v14, v17, v19);
  SGNormalizeAddress(v20);
  v21 = (void *)objc_claimAutoreleasedReturnValue();

  return v21;
}

id SGNormalizeAddress(void *a1)
{
  void *v1;
  void *v2;
  void *v3;

  preprocess(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  CFCharacterSetGetPredefined(kCFCharacterSetPunctuation);
  _PASRemoveCharacterSet();
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  _PASCollapseWhitespaceAndStrip();
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

__CFString *preprocess(void *a1)
{
  __CFString *v1;
  __CFString *MutableCopy;
  __CFString *v3;

  v1 = a1;
  if (-[__CFString length](v1, "length"))
  {
    MutableCopy = CFStringCreateMutableCopy(0, 0, v1);
    v3 = MutableCopy;
    if (MutableCopy)
    {
      CFStringNormalize(MutableCopy, kCFStringNormalizationFormKC);
      CFStringLowercase(v3, 0);
    }
  }
  else
  {
    v3 = &stru_1E7DB83A8;
  }

  return v3;
}

uint64_t _createITSListForFTSQuery(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  void *v5;
  _QWORD v7[4];
  id v8;
  id v9;
  uint64_t v10;

  v1 = a1;
  v2 = ITSTokenListCreate();
  v3 = v2;
  if (v1 && v2)
  {
    if (_createITSListForFTSQuery__pasOnceToken3 != -1)
      dispatch_once(&_createITSListForFTSQuery__pasOnceToken3, &__block_literal_global_20373);
    v4 = (id)_createITSListForFTSQuery__pasExprOnceResult;
    objc_msgSend(v4, "result");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = ___createITSListForFTSQuery_block_invoke_3;
    v7[3] = &unk_1E7DAF728;
    v9 = v1;
    v8 = v1;
    v10 = v3;
    objc_msgSend(v5, "runWithLockAcquired:", v7);

  }
  return v3;
}

void sub_1C360EB90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  uint64_t v16;
  va_list va;

  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v16 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_1C360F714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t isLowercaseAscii(void *a1)
{
  __CFString *v1;
  void *v2;
  CFIndex Length;
  const UniChar *CharactersPtr;
  const char *CStringPtr;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  CFIndex v11;
  UniChar v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  CFIndex v17;
  uint64_t v18;
  _OWORD v20[8];
  CFStringRef theString;
  const UniChar *v22;
  const char *v23;
  uint64_t v24;
  CFIndex v25;
  uint64_t v26;
  uint64_t v27;
  CFRange v28;

  v1 = a1;
  objc_opt_self();
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v2)
    goto LABEL_29;
  memset(v20, 0, sizeof(v20));
  Length = CFStringGetLength(v1);
  theString = v1;
  v24 = 0;
  v25 = Length;
  CharactersPtr = CFStringGetCharactersPtr(v1);
  CStringPtr = 0;
  v22 = CharactersPtr;
  if (!CharactersPtr)
    CStringPtr = CFStringGetCStringPtr(v1, 0x600u);
  v26 = 0;
  v27 = 0;
  v23 = CStringPtr;
  if (Length >= 1)
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 64;
    while (1)
    {
      v10 = (unint64_t)v8 >= 4 ? 4 : v8;
      v11 = v25;
      if (v25 <= v8)
      {
        v12 = 0;
      }
      else if (v22)
      {
        v12 = v22[v8 + v24];
      }
      else if (v23)
      {
        v12 = v23[v24 + v8];
      }
      else
      {
        if (v27 <= v8 || v7 > v8)
        {
          v14 = v10 + v6;
          v15 = v9 - v10;
          v16 = v8 - v10;
          v17 = v16 + 64;
          if (v16 + 64 >= v25)
            v17 = v25;
          v26 = v16;
          v27 = v17;
          if (v25 >= v15)
            v11 = v15;
          v28.length = v11 + v14;
          v28.location = v16 + v24;
          CFStringGetCharacters(theString, v28, (UniChar *)v20);
          v7 = v26;
        }
        v12 = *((_WORD *)v20 + v8 - v7);
      }
      if (v12 > 0x7Fu || (unsigned __int16)(v12 - 65) <= 0x19u)
        break;
      ++v8;
      --v6;
      ++v9;
      if (Length == v8)
        goto LABEL_29;
    }
    v18 = 0;
  }
  else
  {
LABEL_29:
    v18 = 1;
  }

  return v18;
}

void sub_1C36105E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C3610D64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t getScannerRefAndAcquire()
{
  uint64_t v0;
  char v1;
  char v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;

  if (getScannerRefAndAcquire_sharedScannerSemaphoreOnce != -1)
    dispatch_once(&getScannerRefAndAcquire_sharedScannerSemaphoreOnce, &__block_literal_global_214_7787);
  dispatch_semaphore_wait((dispatch_semaphore_t)sharedScannerSemaphore, 0xFFFFFFFFFFFFFFFFLL);
  pthread_mutex_lock(&scannerPoolLock);
  v0 = 0;
  v1 = 1;
  while (1)
  {
    v2 = v1;
    if (!scannerInUse[v0])
      break;
    v1 = 0;
    v0 = 1u;
    if ((v2 & 1) == 0)
      goto LABEL_6;
  }
  scannerInUse[v0] = 1;
  v6 = (void *)sharedScanners[v0];
  if (!v6)
  {
    v7 = objc_msgSend(objc_alloc(MEMORY[0x1E0D815E0]), "initWithBlock:idleTimeout:", &__block_literal_global_217, 1.0);
    v8 = (void *)sharedScanners[v0];
    sharedScanners[v0] = v7;

    v6 = (void *)sharedScanners[v0];
  }
  objc_msgSend(v6, "result");
  v5 = objc_claimAutoreleasedReturnValue();
  if (!v5)
  {
LABEL_6:
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "DDScannerRef getScannerRefAndAcquire(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("SGDataDetectorMatch.m"), 311, CFSTR("Could not get data detector from pool"));

    v5 = 0;
  }
  pthread_mutex_unlock(&scannerPoolLock);
  return v5;
}

id __getScannerRefAndAcquire_block_invoke_2()
{
  return (id)SGDataDetectorsCreateScannerOrFail();
}

uint64_t SGDataDetectorsCreateScannerOrFail()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  v0 = DDScannerCreate();
  if (v0)
    DDScannerEnableOptionalSource();
  return v0;
}

void sub_1C3611EA8(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

uint64_t SGM2SelfIdModelScoreReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  void *v18;
  uint64_t result;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t v37;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v17;

          continue;
        case 2u:
          v20 = 0;
          v21 = 0;
          v22 = 0;
          *(_BYTE *)(a1 + 28) |= 1u;
          while (2)
          {
            v23 = *v3;
            v24 = *(_QWORD *)(a2 + v23);
            if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
              *(_QWORD *)(a2 + v23) = v24 + 1;
              v22 |= (unint64_t)(v25 & 0x7F) << v20;
              if (v25 < 0)
              {
                v20 += 7;
                v14 = v21++ >= 9;
                if (v14)
                {
                  LODWORD(v22) = 0;
                  goto LABEL_46;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v22) = 0;
LABEL_46:
          v37 = 16;
          goto LABEL_55;
        case 3u:
          v26 = 0;
          v27 = 0;
          v28 = 0;
          *(_BYTE *)(a1 + 28) |= 4u;
          while (2)
          {
            v29 = *v3;
            v30 = *(_QWORD *)(a2 + v29);
            if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
              *(_QWORD *)(a2 + v29) = v30 + 1;
              v28 |= (unint64_t)(v31 & 0x7F) << v26;
              if (v31 < 0)
              {
                v26 += 7;
                v14 = v27++ >= 9;
                if (v14)
                {
                  v28 = 0;
                  goto LABEL_50;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v28 = 0;
LABEL_50:
          *(_BYTE *)(a1 + 24) = v28 != 0;
          continue;
        case 4u:
          v32 = 0;
          v33 = 0;
          v22 = 0;
          *(_BYTE *)(a1 + 28) |= 2u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v34 = *v3;
        v35 = *(_QWORD *)(a2 + v34);
        if (v35 == -1 || v35 >= *(_QWORD *)(a2 + *v4))
          break;
        v36 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v35);
        *(_QWORD *)(a2 + v34) = v35 + 1;
        v22 |= (unint64_t)(v36 & 0x7F) << v32;
        if ((v36 & 0x80) == 0)
          goto LABEL_52;
        v32 += 7;
        v14 = v33++ >= 9;
        if (v14)
        {
          LODWORD(v22) = 0;
          goto LABEL_54;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_52:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v22) = 0;
LABEL_54:
      v37 = 20;
LABEL_55:
      *(_DWORD *)(a1 + v37) = v22;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t SGM2SuggestdExitReasonReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  void *v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v19 = 0;
        v20 = 0;
        v21 = 0;
        *(_BYTE *)(a1 + 24) |= 1u;
        while (1)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
            break;
          v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
          *(_QWORD *)(a2 + v22) = v23 + 1;
          v21 |= (unint64_t)(v24 & 0x7F) << v19;
          if ((v24 & 0x80) == 0)
            goto LABEL_31;
          v19 += 7;
          v14 = v20++ >= 9;
          if (v14)
          {
            LODWORD(v21) = 0;
            goto LABEL_33;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_31:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v21) = 0;
LABEL_33:
        *(_DWORD *)(a1 + 8) = v21;
      }
      else if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v17;

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t SGM2AutocompleteUserSelectedContactReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  void *v18;
  uint64_t result;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  BOOL v38;
  uint64_t v39;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = *(void **)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v17;

          continue;
        case 2u:
          v20 = 0;
          v21 = 0;
          v22 = 0;
          *(_BYTE *)(a1 + 28) |= 4u;
          while (2)
          {
            v23 = *v3;
            v24 = *(_QWORD *)(a2 + v23);
            if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
              *(_QWORD *)(a2 + v23) = v24 + 1;
              v22 |= (unint64_t)(v25 & 0x7F) << v20;
              if (v25 < 0)
              {
                v20 += 7;
                v14 = v21++ >= 9;
                if (v14)
                {
                  v22 = 0;
                  goto LABEL_46;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v22 = 0;
LABEL_46:
          v38 = v22 != 0;
          v39 = 25;
          goto LABEL_51;
        case 3u:
          v26 = 0;
          v27 = 0;
          v28 = 0;
          *(_BYTE *)(a1 + 28) |= 2u;
          while (2)
          {
            v29 = *v3;
            v30 = *(_QWORD *)(a2 + v29);
            if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
              *(_QWORD *)(a2 + v29) = v30 + 1;
              v28 |= (unint64_t)(v31 & 0x7F) << v26;
              if (v31 < 0)
              {
                v26 += 7;
                v14 = v27++ >= 9;
                if (v14)
                {
                  v28 = 0;
                  goto LABEL_50;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v28 = 0;
LABEL_50:
          v38 = v28 != 0;
          v39 = 24;
LABEL_51:
          *(_BYTE *)(a1 + v39) = v38;
          continue;
        case 4u:
          v32 = 0;
          v33 = 0;
          v34 = 0;
          *(_BYTE *)(a1 + 28) |= 1u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v35 = *v3;
        v36 = *(_QWORD *)(a2 + v35);
        if (v36 == -1 || v36 >= *(_QWORD *)(a2 + *v4))
          break;
        v37 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v36);
        *(_QWORD *)(a2 + v35) = v36 + 1;
        v34 |= (unint64_t)(v37 & 0x7F) << v32;
        if ((v37 & 0x80) == 0)
          goto LABEL_53;
        v32 += 7;
        v14 = v33++ >= 9;
        if (v14)
        {
          LODWORD(v34) = 0;
          goto LABEL_55;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_53:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v34) = 0;
LABEL_55:
      *(_DWORD *)(a1 + 8) = v34;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL SGM2BundleIdsTrackedAsOtherReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  uint64_t v18;
  void *v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 16;
LABEL_22:
        v19 = *(void **)(a1 + v18);
        *(_QWORD *)(a1 + v18) = v17;

        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_24:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadString();
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = 8;
    goto LABEL_22;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t heuristicIdentifyHandle(void *a1)
{
  __CFString *v1;
  uint64_t v2;
  CFIndex Length;
  const UniChar *CharactersPtr;
  const char *CStringPtr;
  uint64_t v6;
  int64_t v7;
  unsigned int v8;
  int v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  CFIndex v13;
  UniChar v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  CFIndex v22;
  _OWORD v24[8];
  CFStringRef theString;
  const UniChar *v26;
  const char *v27;
  uint64_t v28;
  CFIndex v29;
  int64_t v30;
  int64_t v31;
  CFRange v32;

  v1 = a1;
  objc_opt_self();
  v2 = objc_claimAutoreleasedReturnValue();

  if (v2)
  {
    memset(v24, 0, sizeof(v24));
    Length = CFStringGetLength(v1);
    theString = v1;
    v28 = 0;
    v29 = Length;
    CharactersPtr = CFStringGetCharactersPtr(v1);
    CStringPtr = 0;
    v26 = CharactersPtr;
    if (!CharactersPtr)
      CStringPtr = CFStringGetCStringPtr(v1, 0x600u);
    v30 = 0;
    v31 = 0;
    v27 = CStringPtr;
    if (Length < 1)
    {
      v2 = 0;
    }
    else
    {
      v6 = 0;
      v7 = 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      v11 = 64;
      do
      {
        if ((unint64_t)v10 >= 4)
          v12 = 4;
        else
          v12 = v10;
        v13 = v29;
        if (v29 <= v10)
        {
          v14 = 0;
        }
        else if (v26)
        {
          v14 = v26[v10 + v28];
        }
        else if (v27)
        {
          v14 = v27[v28 + v10];
        }
        else
        {
          if (v31 <= v10 || v7 > v10)
          {
            v19 = v12 + v6;
            v20 = v11 - v12;
            v21 = v10 - v12;
            v22 = v21 + 64;
            if (v21 + 64 >= v29)
              v22 = v29;
            v30 = v21;
            v31 = v22;
            if (v29 >= v20)
              v13 = v20;
            v32.length = v13 + v19;
            v32.location = v21 + v28;
            CFStringGetCharacters(theString, v32, (UniChar *)v24);
            v7 = v30;
          }
          v14 = *((_WORD *)v24 + v10 - v7);
        }
        v15 = (unsigned __int16)(v14 - 48);
        if (v14 == 64)
          ++v9;
        v16 = (unsigned __int16)(v14 + 240);
        if (v15 < 0xA || v16 < 0xA)
          ++v8;
        ++v10;
        --v6;
        ++v11;
      }
      while (Length != v10);
      if (v9 == 1)
        v2 = 1;
      else
        v2 = 2 * (v8 > 4);
    }
  }

  return v2;
}

uint64_t SGM2ContactCreatedReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v20 = 0;
        v21 = 0;
        v22 = 0;
        *(_BYTE *)(a1 + 28) |= 1u;
        while (1)
        {
          v23 = *v3;
          v24 = *(_QWORD *)(a2 + v23);
          if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v4))
            break;
          v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
          *(_QWORD *)(a2 + v23) = v24 + 1;
          v22 |= (unint64_t)(v25 & 0x7F) << v20;
          if ((v25 & 0x80) == 0)
            goto LABEL_39;
          v20 += 7;
          v14 = v21++ >= 9;
          if (v14)
          {
            LODWORD(v22) = 0;
            goto LABEL_41;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_39:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v22) = 0;
LABEL_41:
        *(_DWORD *)(a1 + 8) = v22;
      }
      else if ((_DWORD)v17 == 2)
      {
        v26 = 0;
        v27 = 0;
        v28 = 0;
        *(_BYTE *)(a1 + 28) |= 2u;
        while (1)
        {
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
            break;
          v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
          *(_QWORD *)(a2 + v29) = v30 + 1;
          v28 |= (unint64_t)(v31 & 0x7F) << v26;
          if ((v31 & 0x80) == 0)
            goto LABEL_43;
          v26 += 7;
          v14 = v27++ >= 9;
          if (v14)
          {
            v28 = 0;
            goto LABEL_45;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_43:
        if (*(_BYTE *)(a2 + *v5))
          v28 = 0;
LABEL_45:
        *(_BYTE *)(a1 + 24) = v28 != 0;
      }
      else if ((_DWORD)v17 == 1)
      {
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v18;

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1C3619D4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1C3619E28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C361A150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1C361A318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1C361A460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1C361B6C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{

}

uint64_t SGM2ContactDetailExtractionReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  void *v18;
  uint64_t result;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  char v42;
  unsigned int v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  char v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  char v58;
  unsigned int v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = *(void **)(a1 + 24);
          *(_QWORD *)(a1 + 24) = v17;

          continue;
        case 2u:
          v20 = 0;
          v21 = 0;
          v22 = 0;
          *(_BYTE *)(a1 + 44) |= 0x20u;
          while (2)
          {
            v23 = *v3;
            v24 = *(_QWORD *)(a2 + v23);
            if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
              *(_QWORD *)(a2 + v23) = v24 + 1;
              v22 |= (unint64_t)(v25 & 0x7F) << v20;
              if (v25 < 0)
              {
                v20 += 7;
                v14 = v21++ >= 9;
                if (v14)
                {
                  LODWORD(v22) = 0;
                  goto LABEL_81;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v22) = 0;
LABEL_81:
          v63 = 36;
          goto LABEL_111;
        case 3u:
          v26 = 0;
          v27 = 0;
          v28 = 0;
          *(_BYTE *)(a1 + 44) |= 0x80u;
          while (2)
          {
            v29 = *v3;
            v30 = *(_QWORD *)(a2 + v29);
            if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
              *(_QWORD *)(a2 + v29) = v30 + 1;
              v28 |= (unint64_t)(v31 & 0x7F) << v26;
              if (v31 < 0)
              {
                v26 += 7;
                v14 = v27++ >= 9;
                if (v14)
                {
                  v28 = 0;
                  goto LABEL_85;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v28 = 0;
LABEL_85:
          v64 = v28 != 0;
          v65 = 41;
          goto LABEL_106;
        case 4u:
          v32 = 0;
          v33 = 0;
          v22 = 0;
          *(_BYTE *)(a1 + 44) |= 1u;
          while (2)
          {
            v34 = *v3;
            v35 = *(_QWORD *)(a2 + v34);
            if (v35 == -1 || v35 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v36 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v35);
              *(_QWORD *)(a2 + v34) = v35 + 1;
              v22 |= (unint64_t)(v36 & 0x7F) << v32;
              if (v36 < 0)
              {
                v32 += 7;
                v14 = v33++ >= 9;
                if (v14)
                {
                  LODWORD(v22) = 0;
                  goto LABEL_89;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v22) = 0;
LABEL_89:
          v63 = 8;
          goto LABEL_111;
        case 5u:
          v37 = 0;
          v38 = 0;
          v22 = 0;
          *(_BYTE *)(a1 + 44) |= 0x10u;
          while (2)
          {
            v39 = *v3;
            v40 = *(_QWORD *)(a2 + v39);
            if (v40 == -1 || v40 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v41 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v40);
              *(_QWORD *)(a2 + v39) = v40 + 1;
              v22 |= (unint64_t)(v41 & 0x7F) << v37;
              if (v41 < 0)
              {
                v37 += 7;
                v14 = v38++ >= 9;
                if (v14)
                {
                  LODWORD(v22) = 0;
                  goto LABEL_93;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v22) = 0;
LABEL_93:
          v63 = 32;
          goto LABEL_111;
        case 6u:
          v42 = 0;
          v43 = 0;
          v22 = 0;
          *(_BYTE *)(a1 + 44) |= 8u;
          while (2)
          {
            v44 = *v3;
            v45 = *(_QWORD *)(a2 + v44);
            if (v45 == -1 || v45 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v46 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v45);
              *(_QWORD *)(a2 + v44) = v45 + 1;
              v22 |= (unint64_t)(v46 & 0x7F) << v42;
              if (v46 < 0)
              {
                v42 += 7;
                v14 = v43++ >= 9;
                if (v14)
                {
                  LODWORD(v22) = 0;
                  goto LABEL_97;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v22) = 0;
LABEL_97:
          v63 = 20;
          goto LABEL_111;
        case 7u:
          v47 = 0;
          v48 = 0;
          v22 = 0;
          *(_BYTE *)(a1 + 44) |= 2u;
          while (2)
          {
            v49 = *v3;
            v50 = *(_QWORD *)(a2 + v49);
            if (v50 == -1 || v50 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v51 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v50);
              *(_QWORD *)(a2 + v49) = v50 + 1;
              v22 |= (unint64_t)(v51 & 0x7F) << v47;
              if (v51 < 0)
              {
                v47 += 7;
                v14 = v48++ >= 9;
                if (v14)
                {
                  LODWORD(v22) = 0;
                  goto LABEL_101;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v22) = 0;
LABEL_101:
          v63 = 12;
          goto LABEL_111;
        case 8u:
          v52 = 0;
          v53 = 0;
          v54 = 0;
          *(_BYTE *)(a1 + 44) |= 0x40u;
          while (2)
          {
            v55 = *v3;
            v56 = *(_QWORD *)(a2 + v55);
            if (v56 == -1 || v56 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v57 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v56);
              *(_QWORD *)(a2 + v55) = v56 + 1;
              v54 |= (unint64_t)(v57 & 0x7F) << v52;
              if (v57 < 0)
              {
                v52 += 7;
                v14 = v53++ >= 9;
                if (v14)
                {
                  v54 = 0;
                  goto LABEL_105;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v54 = 0;
LABEL_105:
          v64 = v54 != 0;
          v65 = 40;
LABEL_106:
          *(_BYTE *)(a1 + v65) = v64;
          continue;
        case 9u:
          v58 = 0;
          v59 = 0;
          v22 = 0;
          *(_BYTE *)(a1 + 44) |= 4u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v60 = *v3;
        v61 = *(_QWORD *)(a2 + v60);
        if (v61 == -1 || v61 >= *(_QWORD *)(a2 + *v4))
          break;
        v62 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v61);
        *(_QWORD *)(a2 + v60) = v61 + 1;
        v22 |= (unint64_t)(v62 & 0x7F) << v58;
        if ((v62 & 0x80) == 0)
          goto LABEL_108;
        v58 += 7;
        v14 = v59++ >= 9;
        if (v14)
        {
          LODWORD(v22) = 0;
          goto LABEL_110;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_108:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v22) = 0;
LABEL_110:
      v63 = 16;
LABEL_111:
      *(_DWORD *)(a1 + v63) = v22;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t SGM2ContactDetailSentReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  void *v18;
  uint64_t result;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  char v42;
  unsigned int v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  uint64_t v47;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = *(void **)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v17;

          continue;
        case 2u:
          v20 = 0;
          v21 = 0;
          v22 = 0;
          *(_BYTE *)(a1 + 36) |= 4u;
          while (2)
          {
            v23 = *v3;
            v24 = *(_QWORD *)(a2 + v23);
            if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
              *(_QWORD *)(a2 + v23) = v24 + 1;
              v22 |= (unint64_t)(v25 & 0x7F) << v20;
              if (v25 < 0)
              {
                v20 += 7;
                v14 = v21++ >= 9;
                if (v14)
                {
                  LODWORD(v22) = 0;
                  goto LABEL_60;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v22) = 0;
LABEL_60:
          v47 = 24;
          goto LABEL_77;
        case 3u:
          v26 = 0;
          v27 = 0;
          v22 = 0;
          *(_BYTE *)(a1 + 36) |= 1u;
          while (2)
          {
            v28 = *v3;
            v29 = *(_QWORD *)(a2 + v28);
            if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
              *(_QWORD *)(a2 + v28) = v29 + 1;
              v22 |= (unint64_t)(v30 & 0x7F) << v26;
              if (v30 < 0)
              {
                v26 += 7;
                v14 = v27++ >= 9;
                if (v14)
                {
                  LODWORD(v22) = 0;
                  goto LABEL_64;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v22) = 0;
LABEL_64:
          v47 = 8;
          goto LABEL_77;
        case 4u:
          v31 = 0;
          v32 = 0;
          v22 = 0;
          *(_BYTE *)(a1 + 36) |= 2u;
          while (2)
          {
            v33 = *v3;
            v34 = *(_QWORD *)(a2 + v33);
            if (v34 == -1 || v34 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v35 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v34);
              *(_QWORD *)(a2 + v33) = v34 + 1;
              v22 |= (unint64_t)(v35 & 0x7F) << v31;
              if (v35 < 0)
              {
                v31 += 7;
                v14 = v32++ >= 9;
                if (v14)
                {
                  LODWORD(v22) = 0;
                  goto LABEL_68;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v22) = 0;
LABEL_68:
          v47 = 12;
          goto LABEL_77;
        case 5u:
          v36 = 0;
          v37 = 0;
          v38 = 0;
          *(_BYTE *)(a1 + 36) |= 0x10u;
          while (2)
          {
            v39 = *v3;
            v40 = *(_QWORD *)(a2 + v39);
            if (v40 == -1 || v40 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v41 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v40);
              *(_QWORD *)(a2 + v39) = v40 + 1;
              v38 |= (unint64_t)(v41 & 0x7F) << v36;
              if (v41 < 0)
              {
                v36 += 7;
                v14 = v37++ >= 9;
                if (v14)
                {
                  v38 = 0;
                  goto LABEL_72;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v38 = 0;
LABEL_72:
          *(_BYTE *)(a1 + 32) = v38 != 0;
          continue;
        case 6u:
          v42 = 0;
          v43 = 0;
          v22 = 0;
          *(_BYTE *)(a1 + 36) |= 8u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v44 = *v3;
        v45 = *(_QWORD *)(a2 + v44);
        if (v45 == -1 || v45 >= *(_QWORD *)(a2 + *v4))
          break;
        v46 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v45);
        *(_QWORD *)(a2 + v44) = v45 + 1;
        v22 |= (unint64_t)(v46 & 0x7F) << v42;
        if ((v46 & 0x80) == 0)
          goto LABEL_74;
        v42 += 7;
        v14 = v43++ >= 9;
        if (v14)
        {
          LODWORD(v22) = 0;
          goto LABEL_76;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_74:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v22) = 0;
LABEL_76:
      v47 = 28;
LABEL_77:
      *(_DWORD *)(a1 + v47) = v22;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t SGM2ContactsInterfaceCacheCountReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  void *v18;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v17;

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1C361FD90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C361FF30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C3620058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C362018C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C36202B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C3620448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1C3620568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C3620650(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__1010(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__1011(uint64_t a1)
{

}

uint64_t SGM2ContactsInterfaceCacheHitReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  void *v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v19 = 0;
        v20 = 0;
        v21 = 0;
        *(_BYTE *)(a1 + 20) |= 1u;
        while (1)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
            break;
          v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
          *(_QWORD *)(a2 + v22) = v23 + 1;
          v21 |= (unint64_t)(v24 & 0x7F) << v19;
          if ((v24 & 0x80) == 0)
            goto LABEL_31;
          v19 += 7;
          v14 = v20++ >= 9;
          if (v14)
          {
            v21 = 0;
            goto LABEL_33;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_31:
        if (*(_BYTE *)(a2 + *v5))
          v21 = 0;
LABEL_33:
        *(_BYTE *)(a1 + 16) = v21 != 0;
      }
      else if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v17;

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t SGM2FoundInMailModelScoreReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  void *v18;
  uint64_t result;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  char v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = *(void **)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v17;

          continue;
        case 2u:
          v20 = 0;
          v21 = 0;
          v22 = 0;
          *(_BYTE *)(a1 + 40) |= 4u;
          while (2)
          {
            v23 = *v3;
            v24 = *(_QWORD *)(a2 + v23);
            if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
              *(_QWORD *)(a2 + v23) = v24 + 1;
              v22 |= (unint64_t)(v25 & 0x7F) << v20;
              if (v25 < 0)
              {
                v20 += 7;
                v14 = v21++ >= 9;
                if (v14)
                {
                  LODWORD(v22) = 0;
                  goto LABEL_67;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v22) = 0;
LABEL_67:
          v53 = 28;
          goto LABEL_89;
        case 3u:
          v26 = 0;
          v27 = 0;
          v22 = 0;
          *(_BYTE *)(a1 + 40) |= 1u;
          while (2)
          {
            v28 = *v3;
            v29 = *(_QWORD *)(a2 + v28);
            if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
              *(_QWORD *)(a2 + v28) = v29 + 1;
              v22 |= (unint64_t)(v30 & 0x7F) << v26;
              if (v30 < 0)
              {
                v26 += 7;
                v14 = v27++ >= 9;
                if (v14)
                {
                  LODWORD(v22) = 0;
                  goto LABEL_71;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v22) = 0;
LABEL_71:
          v53 = 8;
          goto LABEL_89;
        case 4u:
          v31 = 0;
          v32 = 0;
          v33 = 0;
          *(_BYTE *)(a1 + 40) |= 0x20u;
          while (2)
          {
            v34 = *v3;
            v35 = *(_QWORD *)(a2 + v34);
            if (v35 == -1 || v35 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v36 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v35);
              *(_QWORD *)(a2 + v34) = v35 + 1;
              v33 |= (unint64_t)(v36 & 0x7F) << v31;
              if (v36 < 0)
              {
                v31 += 7;
                v14 = v32++ >= 9;
                if (v14)
                {
                  v33 = 0;
                  goto LABEL_75;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v33 = 0;
LABEL_75:
          v54 = v33 != 0;
          v55 = 37;
          goto LABEL_80;
        case 5u:
          v37 = 0;
          v38 = 0;
          v39 = 0;
          *(_BYTE *)(a1 + 40) |= 0x10u;
          while (2)
          {
            v40 = *v3;
            v41 = *(_QWORD *)(a2 + v40);
            if (v41 == -1 || v41 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v42 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v41);
              *(_QWORD *)(a2 + v40) = v41 + 1;
              v39 |= (unint64_t)(v42 & 0x7F) << v37;
              if (v42 < 0)
              {
                v37 += 7;
                v14 = v38++ >= 9;
                if (v14)
                {
                  v39 = 0;
                  goto LABEL_79;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v39 = 0;
LABEL_79:
          v54 = v39 != 0;
          v55 = 36;
LABEL_80:
          *(_BYTE *)(a1 + v55) = v54;
          continue;
        case 6u:
          v43 = 0;
          v44 = 0;
          v22 = 0;
          *(_BYTE *)(a1 + 40) |= 2u;
          while (2)
          {
            v45 = *v3;
            v46 = *(_QWORD *)(a2 + v45);
            if (v46 == -1 || v46 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v47 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v46);
              *(_QWORD *)(a2 + v45) = v46 + 1;
              v22 |= (unint64_t)(v47 & 0x7F) << v43;
              if (v47 < 0)
              {
                v43 += 7;
                v14 = v44++ >= 9;
                if (v14)
                {
                  LODWORD(v22) = 0;
                  goto LABEL_84;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v22) = 0;
LABEL_84:
          v53 = 24;
          goto LABEL_89;
        case 7u:
          v48 = 0;
          v49 = 0;
          v22 = 0;
          *(_BYTE *)(a1 + 40) |= 8u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v50 = *v3;
        v51 = *(_QWORD *)(a2 + v50);
        if (v51 == -1 || v51 >= *(_QWORD *)(a2 + *v4))
          break;
        v52 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v51);
        *(_QWORD *)(a2 + v50) = v51 + 1;
        v22 |= (unint64_t)(v52 & 0x7F) << v48;
        if ((v52 & 0x80) == 0)
          goto LABEL_86;
        v48 += 7;
        v14 = v49++ >= 9;
        if (v14)
        {
          LODWORD(v22) = 0;
          goto LABEL_88;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_86:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v22) = 0;
LABEL_88:
      v53 = 32;
LABEL_89:
      *(_DWORD *)(a1 + v53) = v22;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1C3623288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__1268(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__1269(uint64_t a1)
{

}

void sub_1C36241CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_1C36243C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__1287(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__1288(uint64_t a1)
{

}

uint64_t SGMIMetricsUpdateProcessInformationReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int *v4;
  int *v5;
  int *v6;
  unint64_t v8;
  int *v9;
  unint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  BOOL v17;
  int v18;
  int v19;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  SGMIMetricsTrialMetadata *v25;
  uint64_t v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  char v54;
  unsigned int v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  uint64_t result;
  char v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  char v66;
  unsigned int v67;
  uint64_t v68;
  unint64_t v69;
  char v70;
  char v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  char v77;
  unsigned int v78;
  uint64_t v79;
  unint64_t v80;
  char v81;
  char v82;
  unsigned int v83;
  uint64_t v84;
  unint64_t v85;
  char v86;
  char v87;
  unsigned int v88;
  uint64_t v89;
  unint64_t v90;
  char v91;
  char v92;
  unsigned int v93;
  uint64_t v94;
  unint64_t v95;
  char v96;
  char v97;
  unsigned int v98;
  uint64_t v99;
  unint64_t v100;
  char v101;
  char v102;
  unsigned int v103;
  uint64_t v104;
  unint64_t v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  char v114;

  v4 = (int *)MEMORY[0x1E0D82BF0];
  v5 = (int *)MEMORY[0x1E0D82BD8];
  v6 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v6) == 0;
  v8 = 0x1EF8DC000uLL;
  v9 = (int *)MEMORY[0x1E0D82BB8];
  v10 = 0x1EF8DC000uLL;
  while (1)
  {
    if (*(_BYTE *)(a2 + *v6))
      return *(_BYTE *)(a2 + *v6) == 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    while (1)
    {
      v14 = *v4;
      v15 = *(_QWORD *)(a2 + v14);
      if (v15 == -1 || v15 >= *(_QWORD *)(a2 + *v5))
        break;
      v16 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v15);
      *(_QWORD *)(a2 + v14) = v15 + 1;
      v13 |= (unint64_t)(v16 & 0x7F) << v11;
      if ((v16 & 0x80) == 0)
        goto LABEL_12;
      v11 += 7;
      v17 = v12++ >= 9;
      if (v17)
      {
        v13 = 0;
        v18 = *(unsigned __int8 *)(a2 + *v6);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v6) = 1;
LABEL_12:
    v18 = *(unsigned __int8 *)(a2 + *v6);
    if (*(_BYTE *)(a2 + *v6))
      v13 = 0;
LABEL_14:
    v19 = v13 & 7;
    if (v18 || v19 == 4)
      return *(_BYTE *)(a2 + *v6) == 0;
    v21 = v13 >> 3;
    if ((int)(v13 >> 3) <= 39)
    {
      switch((int)v21)
      {
        case 1:
          v22 = v8;
          v23 = v2;
          v24 = v10;
          v25 = objc_alloc_init(SGMIMetricsTrialMetadata);
          v26 = 120;
          goto LABEL_69;
        case 2:
          v22 = v8;
          v23 = v2;
          v24 = v10;
          v25 = objc_alloc_init(SGMIMetricsTrialMetadata);
          v26 = 64;
LABEL_69:
          objc_storeStrong((id *)(a1 + v26), v25);
          if (PBReaderPlaceMark() && (SGMIMetricsTrialMetadataReadFrom((uint64_t)v25, a2) & 1) != 0)
            goto LABEL_71;
          goto LABEL_220;
        case 3:
          v54 = 0;
          v55 = 0;
          v29 = 0;
          *(_WORD *)(a1 + *(int *)(v8 + 2288)) |= 0x200u;
          while (2)
          {
            v56 = *v4;
            v57 = *(_QWORD *)(a2 + v56);
            if (v57 == -1 || v57 >= *(_QWORD *)(a2 + *v5))
            {
              *(_BYTE *)(a2 + *v6) = 1;
            }
            else
            {
              v58 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v57);
              *(_QWORD *)(a2 + v56) = v57 + 1;
              v29 |= (unint64_t)(v58 & 0x7F) << v54;
              if (v58 < 0)
              {
                v54 += 7;
                v17 = v55++ >= 9;
                if (v17)
                {
                  LODWORD(v29) = 0;
                  goto LABEL_167;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v6))
            LODWORD(v29) = 0;
LABEL_167:
          v107 = 92;
          goto LABEL_213;
        case 4:
          if (v19 == 2)
          {
            result = PBReaderPlaceMark();
            if (!(_DWORD)result)
              return result;
            while (*(_QWORD *)(a2 + *v4) < *(_QWORD *)(a2 + *v5) && !*(_BYTE *)(a2 + *v6))
            {
              v60 = 0;
              v61 = 0;
              v62 = 0;
              while (1)
              {
                v63 = *v4;
                v64 = *(_QWORD *)(a2 + v63);
                if (v64 == -1 || v64 >= *(_QWORD *)(a2 + *v5))
                  break;
                v65 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v64);
                *(_QWORD *)(a2 + v63) = v64 + 1;
                v62 |= (unint64_t)(v65 & 0x7F) << v60;
                if (v65 < 0)
                {
                  v60 += 7;
                  v17 = v61++ >= 9;
                  if (!v17)
                    continue;
                }
                goto LABEL_91;
              }
              *(_BYTE *)(a2 + *v6) = 1;
LABEL_91:
              PBRepeatedInt32Add();
            }
            PBReaderRecallMark();
          }
          else
          {
            v109 = 0;
            v110 = 0;
            v111 = 0;
            while (1)
            {
              v112 = *v4;
              v113 = *(_QWORD *)(a2 + v112);
              if (v113 == -1 || v113 >= *(_QWORD *)(a2 + *v5))
                break;
              v114 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v113);
              *(_QWORD *)(a2 + v112) = v113 + 1;
              v111 |= (unint64_t)(v114 & 0x7F) << v109;
              if (v114 < 0)
              {
                v109 += 7;
                v17 = v110++ >= 9;
                if (!v17)
                  continue;
              }
              goto LABEL_217;
            }
            *(_BYTE *)(a2 + *v6) = 1;
LABEL_217:
            PBRepeatedInt32Add();
          }
          break;
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 12:
        case 13:
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
          goto LABEL_66;
        case 10:
          v66 = 0;
          v67 = 0;
          v29 = 0;
          *(_WORD *)(a1 + *(int *)(v8 + 2288)) |= 0x100u;
          while (2)
          {
            v68 = *v4;
            v69 = *(_QWORD *)(a2 + v68);
            if (v69 == -1 || v69 >= *(_QWORD *)(a2 + *v5))
            {
              *(_BYTE *)(a2 + *v6) = 1;
            }
            else
            {
              v70 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v69);
              *(_QWORD *)(a2 + v68) = v69 + 1;
              v29 |= (unint64_t)(v70 & 0x7F) << v66;
              if (v70 < 0)
              {
                v66 += 7;
                v17 = v67++ >= 9;
                if (v17)
                {
                  LODWORD(v29) = 0;
                  goto LABEL_171;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v6))
            LODWORD(v29) = 0;
LABEL_171:
          v107 = 88;
          goto LABEL_213;
        case 11:
          v71 = 0;
          v72 = 0;
          v73 = 0;
          *(_WORD *)(a1 + *(int *)(v8 + 2288)) |= 0x2000u;
          while (2)
          {
            v74 = *v4;
            v75 = *(_QWORD *)(a2 + v74);
            if (v75 == -1 || v75 >= *(_QWORD *)(a2 + *v5))
            {
              *(_BYTE *)(a2 + *v6) = 1;
            }
            else
            {
              v76 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v75);
              *(_QWORD *)(a2 + v74) = v75 + 1;
              v73 |= (unint64_t)(v76 & 0x7F) << v71;
              if (v76 < 0)
              {
                v71 += 7;
                v17 = v72++ >= 9;
                if (v17)
                {
                  v73 = 0;
                  goto LABEL_175;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v6))
            v73 = 0;
LABEL_175:
          *(_BYTE *)(a1 + 128) = v73 != 0;
          goto LABEL_214;
        case 20:
          v77 = 0;
          v78 = 0;
          v29 = 0;
          *(_WORD *)(a1 + *(int *)(v8 + 2288)) |= 0x10u;
          while (2)
          {
            v79 = *v4;
            v80 = *(_QWORD *)(a2 + v79);
            if (v80 == -1 || v80 >= *(_QWORD *)(a2 + *v5))
            {
              *(_BYTE *)(a2 + *v6) = 1;
            }
            else
            {
              v81 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v80);
              *(_QWORD *)(a2 + v79) = v80 + 1;
              v29 |= (unint64_t)(v81 & 0x7F) << v77;
              if (v81 < 0)
              {
                v77 += 7;
                v17 = v78++ >= 9;
                if (v17)
                {
                  LODWORD(v29) = 0;
                  goto LABEL_179;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v6))
            LODWORD(v29) = 0;
LABEL_179:
          v107 = 72;
          goto LABEL_213;
        case 21:
          v82 = 0;
          v83 = 0;
          v29 = 0;
          *(_WORD *)(a1 + *(int *)(v8 + 2288)) |= 0x20u;
          while (2)
          {
            v84 = *v4;
            v85 = *(_QWORD *)(a2 + v84);
            if (v85 == -1 || v85 >= *(_QWORD *)(a2 + *v5))
            {
              *(_BYTE *)(a2 + *v6) = 1;
            }
            else
            {
              v86 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v85);
              *(_QWORD *)(a2 + v84) = v85 + 1;
              v29 |= (unint64_t)(v86 & 0x7F) << v82;
              if (v86 < 0)
              {
                v82 += 7;
                v17 = v83++ >= 9;
                if (v17)
                {
                  LODWORD(v29) = 0;
                  goto LABEL_183;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v6))
            LODWORD(v29) = 0;
LABEL_183:
          v107 = 76;
          goto LABEL_213;
        case 22:
          v87 = 0;
          v88 = 0;
          v29 = 0;
          *(_WORD *)(a1 + *(int *)(v8 + 2288)) |= 0x400u;
          while (2)
          {
            v89 = *v4;
            v90 = *(_QWORD *)(a2 + v89);
            if (v90 == -1 || v90 >= *(_QWORD *)(a2 + *v5))
            {
              *(_BYTE *)(a2 + *v6) = 1;
            }
            else
            {
              v91 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v90);
              *(_QWORD *)(a2 + v89) = v90 + 1;
              v29 |= (unint64_t)(v91 & 0x7F) << v87;
              if (v91 < 0)
              {
                v87 += 7;
                v17 = v88++ >= 9;
                if (v17)
                {
                  LODWORD(v29) = 0;
                  goto LABEL_187;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v6))
            LODWORD(v29) = 0;
LABEL_187:
          v107 = 96;
          goto LABEL_213;
        default:
          if ((_DWORD)v21 != 30)
            goto LABEL_66;
          v49 = 0;
          v50 = 0;
          v29 = 0;
          *(_WORD *)(a1 + *(int *)(v8 + 2288)) |= 0x80u;
          while (2)
          {
            v51 = *v4;
            v52 = *(_QWORD *)(a2 + v51);
            if (v52 == -1 || v52 >= *(_QWORD *)(a2 + *v5))
            {
              *(_BYTE *)(a2 + *v6) = 1;
            }
            else
            {
              v53 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v52);
              *(_QWORD *)(a2 + v51) = v52 + 1;
              v29 |= (unint64_t)(v53 & 0x7F) << v49;
              if (v53 < 0)
              {
                v49 += 7;
                v17 = v50++ >= 9;
                if (v17)
                {
                  LODWORD(v29) = 0;
                  goto LABEL_212;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v6))
            LODWORD(v29) = 0;
LABEL_212:
          v107 = 84;
          goto LABEL_213;
      }
      goto LABEL_214;
    }
    if ((int)v21 > 49)
      break;
    switch((_DWORD)v21)
    {
      case '(':
        v39 = 0;
        v40 = 0;
        v29 = 0;
        *(_WORD *)(a1 + *(int *)(v8 + 2288)) |= 0x40u;
        while (1)
        {
          v41 = *v4;
          v42 = *(_QWORD *)(a2 + v41);
          if (v42 == -1 || v42 >= *(_QWORD *)(a2 + *v5))
            break;
          v43 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v42);
          *(_QWORD *)(a2 + v41) = v42 + 1;
          v29 |= (unint64_t)(v43 & 0x7F) << v39;
          if ((v43 & 0x80) == 0)
            goto LABEL_153;
          v39 += 7;
          v17 = v40++ >= 9;
          if (v17)
          {
            LODWORD(v29) = 0;
            goto LABEL_155;
          }
        }
        *(_BYTE *)(a2 + *v6) = 1;
LABEL_153:
        if (*(_BYTE *)(a2 + *v6))
          LODWORD(v29) = 0;
LABEL_155:
        v107 = 80;
        break;
      case ')':
        v44 = 0;
        v45 = 0;
        v29 = 0;
        *(_WORD *)(a1 + *(int *)(v8 + 2288)) |= 0x1000u;
        while (1)
        {
          v46 = *v4;
          v47 = *(_QWORD *)(a2 + v46);
          if (v47 == -1 || v47 >= *(_QWORD *)(a2 + *v5))
            break;
          v48 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v47);
          *(_QWORD *)(a2 + v46) = v47 + 1;
          v29 |= (unint64_t)(v48 & 0x7F) << v44;
          if ((v48 & 0x80) == 0)
            goto LABEL_157;
          v44 += 7;
          v17 = v45++ >= 9;
          if (v17)
          {
            LODWORD(v29) = 0;
            goto LABEL_159;
          }
        }
        *(_BYTE *)(a2 + *v6) = 1;
LABEL_157:
        if (*(_BYTE *)(a2 + *v6))
          LODWORD(v29) = 0;
LABEL_159:
        v107 = 104;
        break;
      case '*':
        v27 = 0;
        v28 = 0;
        v29 = 0;
        *(_WORD *)(a1 + *(int *)(v8 + 2288)) |= 0x800u;
        while (1)
        {
          v30 = *v4;
          v31 = *(_QWORD *)(a2 + v30);
          if (v31 == -1 || v31 >= *(_QWORD *)(a2 + *v5))
            break;
          v32 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v31);
          *(_QWORD *)(a2 + v30) = v31 + 1;
          v29 |= (unint64_t)(v32 & 0x7F) << v27;
          if ((v32 & 0x80) == 0)
            goto LABEL_149;
          v27 += 7;
          v17 = v28++ >= 9;
          if (v17)
          {
            LODWORD(v29) = 0;
            goto LABEL_151;
          }
        }
        *(_BYTE *)(a2 + *v6) = 1;
LABEL_149:
        if (*(_BYTE *)(a2 + *v6))
          LODWORD(v29) = 0;
LABEL_151:
        v107 = 100;
        break;
      default:
LABEL_66:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_214;
    }
LABEL_213:
    *(_DWORD *)(a1 + v107) = v29;
LABEL_214:
    if (*(_QWORD *)(a2 + *v4) >= *(_QWORD *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v6) == 0;
  }
  switch((int)v21)
  {
    case '<':
      v33 = 0;
      v34 = 0;
      v35 = 0;
      *(_WORD *)(a1 + *(int *)(v8 + 2288)) |= 1u;
      while (2)
      {
        v36 = *v4;
        v37 = *(_QWORD *)(a2 + v36);
        if (v37 == -1 || v37 >= *(_QWORD *)(a2 + *v5))
        {
          *(_BYTE *)(a2 + *v6) = 1;
        }
        else
        {
          v38 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v37);
          *(_QWORD *)(a2 + v36) = v37 + 1;
          v35 |= (unint64_t)(v38 & 0x7F) << v33;
          if (v38 < 0)
          {
            v33 += 7;
            v17 = v34++ >= 9;
            if (v17)
            {
              v35 = 0;
              goto LABEL_163;
            }
            continue;
          }
        }
        break;
      }
      if (*(_BYTE *)(a2 + *v6))
        v35 = 0;
LABEL_163:
      v108 = 32;
      goto LABEL_200;
    case '=':
      v92 = 0;
      v93 = 0;
      v35 = 0;
      *(_WORD *)(a1 + *(int *)(v8 + 2288)) |= 8u;
      while (2)
      {
        v94 = *v4;
        v95 = *(_QWORD *)(a2 + v94);
        if (v95 == -1 || v95 >= *(_QWORD *)(a2 + *v5))
        {
          *(_BYTE *)(a2 + *v6) = 1;
        }
        else
        {
          v96 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v95);
          *(_QWORD *)(a2 + v94) = v95 + 1;
          v35 |= (unint64_t)(v96 & 0x7F) << v92;
          if (v96 < 0)
          {
            v92 += 7;
            v17 = v93++ >= 9;
            if (v17)
            {
              v35 = 0;
              goto LABEL_191;
            }
            continue;
          }
        }
        break;
      }
      if (*(_BYTE *)(a2 + *v6))
        v35 = 0;
LABEL_191:
      v108 = 56;
      goto LABEL_200;
    case '>':
      v97 = 0;
      v98 = 0;
      v35 = 0;
      *(_WORD *)(a1 + *(int *)(v8 + 2288)) |= 4u;
      while (2)
      {
        v99 = *v4;
        v100 = *(_QWORD *)(a2 + v99);
        if (v100 == -1 || v100 >= *(_QWORD *)(a2 + *v5))
        {
          *(_BYTE *)(a2 + *v6) = 1;
        }
        else
        {
          v101 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v100);
          *(_QWORD *)(a2 + v99) = v100 + 1;
          v35 |= (unint64_t)(v101 & 0x7F) << v97;
          if (v101 < 0)
          {
            v97 += 7;
            v17 = v98++ >= 9;
            if (v17)
            {
              v35 = 0;
              goto LABEL_195;
            }
            continue;
          }
        }
        break;
      }
      if (*(_BYTE *)(a2 + *v6))
        v35 = 0;
LABEL_195:
      v108 = 48;
      goto LABEL_200;
    case '?':
      v102 = 0;
      v103 = 0;
      v35 = 0;
      *(_WORD *)(a1 + *(int *)(v8 + 2288)) |= 2u;
      while (2)
      {
        v104 = *v4;
        v105 = *(_QWORD *)(a2 + v104);
        if (v105 == -1 || v105 >= *(_QWORD *)(a2 + *v5))
        {
          *(_BYTE *)(a2 + *v6) = 1;
        }
        else
        {
          v106 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v105);
          *(_QWORD *)(a2 + v104) = v105 + 1;
          v35 |= (unint64_t)(v106 & 0x7F) << v102;
          if (v106 < 0)
          {
            v102 += 7;
            v17 = v103++ >= 9;
            if (v17)
            {
              v35 = 0;
              goto LABEL_199;
            }
            continue;
          }
        }
        break;
      }
      if (*(_BYTE *)(a2 + *v6))
        v35 = 0;
LABEL_199:
      v108 = 40;
LABEL_200:
      *(_QWORD *)(a1 + v108) = v35;
      goto LABEL_214;
    default:
      if ((_DWORD)v21 != 50)
        goto LABEL_66;
      v22 = v8;
      v23 = v2;
      v24 = v10;
      v25 = objc_alloc_init(SGMIMetricsSubmodelsStats);
      objc_storeStrong((id *)(a1 + 112), v25);
      if (PBReaderPlaceMark() && SGMIMetricsSubmodelsStatsReadFrom((uint64_t)v25, a2))
      {
LABEL_71:
        PBReaderRecallMark();

        v10 = v24;
        v2 = v23;
        v8 = v22;
        goto LABEL_214;
      }
LABEL_220:

      return 0;
  }
}

void sub_1C3629E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C362A3B8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C362A630(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C362A894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C362AA4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C362BDDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  uint64_t v38;

  _Block_object_dispose((const void *)(v38 - 176), 8);
  SGRecordMeasurementState(&a38);
  _Block_object_dispose((const void *)(v38 - 240), 8);
  _Unwind_Resume(a1);
}

void sub_1C362CD78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C362DB10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__1593(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__1594(uint64_t a1)
{

}

Class __getRTRoutineManagerClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!CoreRoutineLibraryCore_frameworkLibrary)
    CoreRoutineLibraryCore_frameworkLibrary = _sl_dlopen();
  if (!CoreRoutineLibraryCore_frameworkLibrary)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *CoreRoutineLibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("SGReminderDissector.m"), 62, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("RTRoutineManager");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getRTRoutineManagerClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("SGReminderDissector.m"), 63, CFSTR("Unable to find class %s"), "RTRoutineManager");

LABEL_8:
    __break(1u);
  }
  getRTRoutineManagerClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t SGM2SearchResultsIncludedPureSuggestionReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  void *v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v19 = 0;
        v20 = 0;
        v21 = 0;
        *(_BYTE *)(a1 + 24) |= 1u;
        while (1)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
            break;
          v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
          *(_QWORD *)(a2 + v22) = v23 + 1;
          v21 |= (unint64_t)(v24 & 0x7F) << v19;
          if ((v24 & 0x80) == 0)
            goto LABEL_31;
          v19 += 7;
          v14 = v20++ >= 9;
          if (v14)
          {
            LODWORD(v21) = 0;
            goto LABEL_33;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_31:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v21) = 0;
LABEL_33:
        *(_DWORD *)(a1 + 8) = v21;
      }
      else if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v17;

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1C362FEA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C3630168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C36303CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C3630524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C363067C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C36307D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__1814(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__1815(uint64_t a1)
{

}

uint64_t SGM2SearchResultsUserSelectedContactReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  void *v18;
  uint64_t result;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  BOOL v38;
  uint64_t v39;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = *(void **)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v17;

          continue;
        case 2u:
          v20 = 0;
          v21 = 0;
          v22 = 0;
          *(_BYTE *)(a1 + 28) |= 4u;
          while (2)
          {
            v23 = *v3;
            v24 = *(_QWORD *)(a2 + v23);
            if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
              *(_QWORD *)(a2 + v23) = v24 + 1;
              v22 |= (unint64_t)(v25 & 0x7F) << v20;
              if (v25 < 0)
              {
                v20 += 7;
                v14 = v21++ >= 9;
                if (v14)
                {
                  v22 = 0;
                  goto LABEL_46;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v22 = 0;
LABEL_46:
          v38 = v22 != 0;
          v39 = 25;
          goto LABEL_51;
        case 3u:
          v26 = 0;
          v27 = 0;
          v28 = 0;
          *(_BYTE *)(a1 + 28) |= 2u;
          while (2)
          {
            v29 = *v3;
            v30 = *(_QWORD *)(a2 + v29);
            if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
              *(_QWORD *)(a2 + v29) = v30 + 1;
              v28 |= (unint64_t)(v31 & 0x7F) << v26;
              if (v31 < 0)
              {
                v26 += 7;
                v14 = v27++ >= 9;
                if (v14)
                {
                  v28 = 0;
                  goto LABEL_50;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v28 = 0;
LABEL_50:
          v38 = v28 != 0;
          v39 = 24;
LABEL_51:
          *(_BYTE *)(a1 + v39) = v38;
          continue;
        case 4u:
          v32 = 0;
          v33 = 0;
          v34 = 0;
          *(_BYTE *)(a1 + 28) |= 1u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v35 = *v3;
        v36 = *(_QWORD *)(a2 + v35);
        if (v36 == -1 || v36 >= *(_QWORD *)(a2 + *v4))
          break;
        v37 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v36);
        *(_QWORD *)(a2 + v35) = v36 + 1;
        v34 |= (unint64_t)(v37 & 0x7F) << v32;
        if ((v37 & 0x80) == 0)
          goto LABEL_53;
        v32 += 7;
        v14 = v33++ >= 9;
        if (v14)
        {
          LODWORD(v34) = 0;
          goto LABEL_55;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_53:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v34) = 0;
LABEL_55:
      *(_DWORD *)(a1 + 8) = v34;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t SGM2SerializedContactsCacheHitReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  void *v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v19 = 0;
        v20 = 0;
        v21 = 0;
        *(_BYTE *)(a1 + 20) |= 1u;
        while (1)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
            break;
          v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
          *(_QWORD *)(a2 + v22) = v23 + 1;
          v21 |= (unint64_t)(v24 & 0x7F) << v19;
          if ((v24 & 0x80) == 0)
            goto LABEL_31;
          v19 += 7;
          v14 = v20++ >= 9;
          if (v14)
          {
            v21 = 0;
            goto LABEL_33;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_31:
        if (*(_BYTE *)(a2 + *v5))
          v21 = 0;
LABEL_33:
        *(_BYTE *)(a1 + 16) = v21 != 0;
      }
      else if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v17;

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t SGM2SqliteErrorsReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  void *v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v19 = 0;
        v20 = 0;
        v21 = 0;
        *(_BYTE *)(a1 + 24) |= 1u;
        while (1)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
            break;
          v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
          *(_QWORD *)(a2 + v22) = v23 + 1;
          v21 |= (unint64_t)(v24 & 0x7F) << v19;
          if ((v24 & 0x80) == 0)
            goto LABEL_31;
          v19 += 7;
          v14 = v20++ >= 9;
          if (v14)
          {
            LODWORD(v21) = 0;
            goto LABEL_33;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_31:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v21) = 0;
LABEL_33:
        *(_DWORD *)(a1 + 8) = v21;
      }
      else if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v17;

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1C3633FD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C3634500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C3634688(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1C3634844(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1C3634954(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1C3634D14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__2256(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__2257(uint64_t a1)
{

}

uint64_t SGM2SuggestedContactDetailShownReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  void *v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v19 = 0;
        v20 = 0;
        v21 = 0;
        *(_BYTE *)(a1 + 24) |= 1u;
        while (1)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
            break;
          v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
          *(_QWORD *)(a2 + v22) = v23 + 1;
          v21 |= (unint64_t)(v24 & 0x7F) << v19;
          if ((v24 & 0x80) == 0)
            goto LABEL_31;
          v19 += 7;
          v14 = v20++ >= 9;
          if (v14)
          {
            LODWORD(v21) = 0;
            goto LABEL_33;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_31:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v21) = 0;
LABEL_33:
        *(_DWORD *)(a1 + 8) = v21;
      }
      else if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v17;

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t SGMIMetricsAggregatedAccuracyLogsReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  SGMIMetricsTrialMetadata *v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t result;
  uint64_t v26;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 0xBu:
        v17 = objc_alloc_init(SGMIMetricsTrialMetadata);
        v18 = 24;
        goto LABEL_33;
      case 0xCu:
        v17 = objc_alloc_init(SGMIMetricsAggregatedAccuracyLog);
        v26 = 8;
        goto LABEL_38;
      case 0xDu:
        v17 = objc_alloc_init(SGMIMetricsAggregatedAccuracyLog);
        v26 = 16;
        goto LABEL_38;
      case 0xEu:
      case 0xFu:
      case 0x10u:
      case 0x11u:
      case 0x12u:
      case 0x13u:
      case 0x14u:
        goto LABEL_28;
      case 0x15u:
        v17 = objc_alloc_init(SGMIMetricsTrialMetadata);
        v18 = 48;
LABEL_33:
        objc_storeStrong((id *)(a1 + v18), v17);
        if (!PBReaderPlaceMark() || (SGMIMetricsTrialMetadataReadFrom((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_48;
        goto LABEL_40;
      case 0x16u:
        v17 = objc_alloc_init(SGMIMetricsAggregatedAccuracyLog);
        v26 = 32;
        goto LABEL_38;
      case 0x17u:
        v17 = objc_alloc_init(SGMIMetricsAggregatedAccuracyLog);
        v26 = 40;
LABEL_38:
        objc_storeStrong((id *)(a1 + v26), v17);
        if (PBReaderPlaceMark() && SGMIMetricsAggregatedAccuracyLogReadFrom((uint64_t)v17, a2))
        {
LABEL_40:
          PBReaderRecallMark();

LABEL_41:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_48:

        return 0;
      default:
        if ((v10 >> 3) == 1)
        {
          v19 = 0;
          v20 = 0;
          v21 = 0;
          *(_BYTE *)(a1 + 60) |= 1u;
          while (1)
          {
            v22 = *v3;
            v23 = *(_QWORD *)(a2 + v22);
            if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
              break;
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if ((v24 & 0x80) == 0)
              goto LABEL_44;
            v19 += 7;
            v14 = v20++ >= 9;
            if (v14)
            {
              LODWORD(v21) = 0;
              goto LABEL_46;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_44:
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v21) = 0;
LABEL_46:
          *(_DWORD *)(a1 + 56) = v21;
        }
        else
        {
LABEL_28:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
        }
        goto LABEL_41;
    }
  }
}

uint64_t SGM2SuggestedContactDetailUsedReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  void *v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v19 = 0;
        v20 = 0;
        v21 = 0;
        *(_BYTE *)(a1 + 24) |= 1u;
        while (1)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
            break;
          v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
          *(_QWORD *)(a2 + v22) = v23 + 1;
          v21 |= (unint64_t)(v24 & 0x7F) << v19;
          if ((v24 & 0x80) == 0)
            goto LABEL_31;
          v19 += 7;
          v14 = v20++ >= 9;
          if (v14)
          {
            LODWORD(v21) = 0;
            goto LABEL_33;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_31:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v21) = 0;
LABEL_33:
        *(_DWORD *)(a1 + 8) = v21;
      }
      else if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v17;

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t SGM2UnknownContactInformationShownReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  void *v18;
  uint64_t result;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  BOOL v38;
  uint64_t v39;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = *(void **)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v17;

          continue;
        case 2u:
          v20 = 0;
          v21 = 0;
          v22 = 0;
          *(_BYTE *)(a1 + 28) |= 1u;
          while (2)
          {
            v23 = *v3;
            v24 = *(_QWORD *)(a2 + v23);
            if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
              *(_QWORD *)(a2 + v23) = v24 + 1;
              v22 |= (unint64_t)(v25 & 0x7F) << v20;
              if (v25 < 0)
              {
                v20 += 7;
                v14 = v21++ >= 9;
                if (v14)
                {
                  LODWORD(v22) = 0;
                  goto LABEL_46;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v22) = 0;
LABEL_46:
          *(_DWORD *)(a1 + 8) = v22;
          continue;
        case 3u:
          v26 = 0;
          v27 = 0;
          v28 = 0;
          *(_BYTE *)(a1 + 28) |= 2u;
          while (2)
          {
            v29 = *v3;
            v30 = *(_QWORD *)(a2 + v29);
            if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
              *(_QWORD *)(a2 + v29) = v30 + 1;
              v28 |= (unint64_t)(v31 & 0x7F) << v26;
              if (v31 < 0)
              {
                v26 += 7;
                v14 = v27++ >= 9;
                if (v14)
                {
                  v28 = 0;
                  goto LABEL_50;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v28 = 0;
LABEL_50:
          v38 = v28 != 0;
          v39 = 24;
          goto LABEL_55;
        case 4u:
          v32 = 0;
          v33 = 0;
          v34 = 0;
          *(_BYTE *)(a1 + 28) |= 4u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v35 = *v3;
        v36 = *(_QWORD *)(a2 + v35);
        if (v36 == -1 || v36 >= *(_QWORD *)(a2 + *v4))
          break;
        v37 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v36);
        *(_QWORD *)(a2 + v35) = v36 + 1;
        v34 |= (unint64_t)(v37 & 0x7F) << v32;
        if ((v37 & 0x80) == 0)
          goto LABEL_52;
        v32 += 7;
        v14 = v33++ >= 9;
        if (v14)
        {
          v34 = 0;
          goto LABEL_54;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_52:
      if (*(_BYTE *)(a2 + *v5))
        v34 = 0;
LABEL_54:
      v38 = v34 != 0;
      v39 = 25;
LABEL_55:
      *(_BYTE *)(a1 + v39) = v38;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t SGM2PerfXPCLatencyReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  void *v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v19 = 0;
        v20 = 0;
        v21 = 0;
        *(_BYTE *)(a1 + 20) |= 1u;
        while (1)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
            break;
          v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
          *(_QWORD *)(a2 + v22) = v23 + 1;
          v21 |= (unint64_t)(v24 & 0x7F) << v19;
          if ((v24 & 0x80) == 0)
            goto LABEL_31;
          v19 += 7;
          v14 = v20++ >= 9;
          if (v14)
          {
            LODWORD(v21) = 0;
            goto LABEL_33;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_31:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v21) = 0;
LABEL_33:
        *(_DWORD *)(a1 + 16) = v21;
      }
      else if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v17;

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t SGM2CustomResponsesHarvestReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 12) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_31;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_31:
        *(_DWORD *)(a1 + 8) = v19;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1C3639E0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__2894(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__2895(uint64_t a1)
{

}

uint64_t processTree(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int v4;
  char *Content;
  char *v6;
  const xmlChar *v7;
  const xmlChar *v8;
  int v9;
  BOOL v10;
  int v11;
  int v12;
  int v13;
  int v14;
  char *v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  uint64_t i;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  const xmlChar *v27;
  int v28;
  int v29;
  const xmlChar *v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  xmlChar *Prop;
  char *v37;
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  xmlChar *v43;
  int v44;
  uint64_t v45;
  int v46;
  char *v47;
  int v48;
  int v49;
  const char *v50;
  char *v51;
  int v52;
  int v53;
  BOOL v54;
  int v55;
  int v56;
  int v57;
  int v58;
  char __s[16];
  __int128 v60;
  uint64_t v61;

  v3 = result;
  v61 = *MEMORY[0x1E0C80C00];
  v4 = *(_DWORD *)(a2 + 8);
  if (v4 == 1)
  {
    v7 = *(const xmlChar **)(a2 + 16);
    if (v7)
    {
      result = xmlStrEqual(*(const xmlChar **)(a2 + 16), (const xmlChar *)"head");
      if ((_DWORD)result)
        return result;
      result = xmlStrEqual(v7, (const xmlChar *)"script");
      if ((_DWORD)result)
        return result;
      result = xmlStrEqual(v7, (const xmlChar *)"style");
      if ((_DWORD)result)
        return result;
      v8 = *(const xmlChar **)(a2 + 16);
      if (v8)
      {
        if (xmlStrEqual(*(const xmlChar **)(a2 + 16), (const xmlChar *)"p") || xmlStrEqual(v8, (const xmlChar *)"div"))
        {
LABEL_12:
          if (*(_DWORD *)(v3 + 16) != 2)
          {
            bufAddChar(v3, 10);
            v9 = *(_DWORD *)(v3 + 16);
            v10 = v9 == 1;
            v11 = v9 == 1 ? 2 : 1;
            *(_DWORD *)(v3 + 16) = v11;
            if (!v10)
            {
              bufAddChar(v3, 10);
              if (*(_DWORD *)(v3 + 16) == 1)
                v12 = 2;
              else
                v12 = 1;
              *(_DWORD *)(v3 + 16) = v12;
            }
          }
          if (*(int *)(v3 + 32) < 1)
          {
            v14 = 1;
          }
          else
          {
            v13 = 0;
            v14 = 1;
            do
            {
              toBuf(v3, "> ");
              ++v13;
            }
            while (v13 < *(_DWORD *)(v3 + 32));
          }
LABEL_40:
          if (xmlStrEqual(*(const xmlChar **)(a2 + 16), (const xmlChar *)"b")
            || xmlStrEqual(*(const xmlChar **)(a2 + 16), (const xmlChar *)"strong"))
          {
            v19 = *(_DWORD *)(v3 + 20);
            if (!v19)
              *(_DWORD *)(v3 + 44) = *(_DWORD *)(v3 + 8);
            *(_DWORD *)(v3 + 20) = v19 + 1;
            goto LABEL_45;
          }
          if (xmlStrEqual(*(const xmlChar **)(a2 + 16), (const xmlChar *)"i")
            || xmlStrEqual(*(const xmlChar **)(a2 + 16), (const xmlChar *)"em"))
          {
            v23 = *(_DWORD *)(v3 + 24);
            if (!v23)
              *(_DWORD *)(v3 + 48) = *(_DWORD *)(v3 + 8);
            *(_DWORD *)(v3 + 24) = v23 + 1;
            goto LABEL_45;
          }
          v26 = xmlStrlen(*(const xmlChar **)(a2 + 16));
          v27 = *(const xmlChar **)(a2 + 16);
          if (v26 == 2 && *v27 == 104)
          {
            v28 = *(_DWORD *)(v3 + 36);
            if (!v28)
              *(_DWORD *)(v3 + 60) = *(_DWORD *)(v3 + 8);
            *(_DWORD *)(v3 + 36) = v28 + 1;
            goto LABEL_45;
          }
          if (xmlStrEqual(v27, (const xmlChar *)"tt")
            || xmlStrEqual(*(const xmlChar **)(a2 + 16), (const xmlChar *)"pre"))
          {
            v33 = *(_DWORD *)(v3 + 28);
            if (!v33)
              *(_DWORD *)(v3 + 52) = *(_DWORD *)(v3 + 8);
            *(_DWORD *)(v3 + 28) = v33 + 1;
            goto LABEL_45;
          }
          if (xmlStrEqual(*(const xmlChar **)(a2 + 16), (const xmlChar *)"ol"))
          {
            *(_DWORD *)(v3 + 68) = 1;
          }
          else if (xmlStrEqual(*(const xmlChar **)(a2 + 16), (const xmlChar *)"li"))
          {
            li(v3);
          }
          else
          {
            if (xmlStrEqual(*(const xmlChar **)(a2 + 16), (const xmlChar *)"a"))
            {
              v38 = *(_DWORD *)(v3 + 40);
              if (!v38)
                *(_DWORD *)(v3 + 64) = *(_DWORD *)(v3 + 8);
              *(_DWORD *)(v3 + 40) = v38 + 1;
              goto LABEL_45;
            }
            if (xmlStrEqual(*(const xmlChar **)(a2 + 16), (const xmlChar *)"br"))
            {
              if (*(_DWORD *)(v3 + 16) != 2)
              {
                bufAddChar(v3, 10);
                if (*(_DWORD *)(v3 + 16) == 1)
                  v48 = 2;
                else
                  v48 = 1;
                *(_DWORD *)(v3 + 16) = v48;
              }
              if (*(int *)(v3 + 32) >= 1)
              {
                v49 = 0;
                do
                {
                  toBuf(v3, "> ");
                  ++v49;
                }
                while (v49 < *(_DWORD *)(v3 + 32));
              }
              goto LABEL_45;
            }
            if (*(_BYTE *)(v3 + 88)
              && (xmlStrEqual(*(const xmlChar **)(a2 + 16), (const xmlChar *)"table")
               || xmlStrEqual(*(const xmlChar **)(a2 + 16), (const xmlChar *)"tr")
               || xmlStrEqual(*(const xmlChar **)(a2 + 16), (const xmlChar *)"td")
               || xmlStrEqual(*(const xmlChar **)(a2 + 16), (const xmlChar *)"th")))
            {
              if (xmlStrEqual(*(const xmlChar **)(a2 + 16), (const xmlChar *)"table"))
                ++*(_DWORD *)(v3 + 84);
              toBuf(v3, "[");
              toBuf(v3, *(char **)(a2 + 16));
              toBufInt(v3, *(_DWORD *)(v3 + 84));
              v51 = "] ";
            }
            else
            {
              if (!xmlStrEqual(*(const xmlChar **)(a2 + 16), (const xmlChar *)"sup")
                && !xmlStrEqual(*(const xmlChar **)(a2 + 16), (const xmlChar *)"sub"))
              {
                goto LABEL_45;
              }
              if ((*(_DWORD *)(v3 + 16) - 1) >= 3)
              {
                bufAddChar(v3, 32);
                *(_DWORD *)(v3 + 16) = 3;
              }
              v51 = "(";
            }
            toBuf(v3, v51);
          }
LABEL_45:
          for (i = *(_QWORD *)(a2 + 24); i; i = *(_QWORD *)(i + 48))
            processTree(v3, i);
          if (xmlStrEqual(*(const xmlChar **)(a2 + 16), (const xmlChar *)"b")
            || xmlStrEqual(*(const xmlChar **)(a2 + 16), (const xmlChar *)"strong"))
          {
            v21 = *(_DWORD *)(v3 + 20);
            if (v21 <= 1)
              v21 = 1;
            v22 = v21 - 1;
            *(_DWORD *)(v3 + 20) = v22;
            if (!v22 && (*(_DWORD *)(v3 + 44) & 0x80000000) == 0)
              *(_DWORD *)(v3 + 44) = -1;
          }
          else if (xmlStrEqual(*(const xmlChar **)(a2 + 16), (const xmlChar *)"i")
                 || xmlStrEqual(*(const xmlChar **)(a2 + 16), (const xmlChar *)"em"))
          {
            v24 = *(_DWORD *)(v3 + 24);
            if (v24 <= 1)
              v24 = 1;
            v25 = v24 - 1;
            *(_DWORD *)(v3 + 24) = v25;
            if (!v25 && (*(_DWORD *)(v3 + 48) & 0x80000000) == 0)
              *(_DWORD *)(v3 + 48) = -1;
          }
          else
          {
            v29 = xmlStrlen(*(const xmlChar **)(a2 + 16));
            v30 = *(const xmlChar **)(a2 + 16);
            if (v29 == 2 && *v30 == 104)
            {
              v31 = *(_DWORD *)(v3 + 36);
              if (v31 <= 1)
                v31 = 1;
              v32 = v31 - 1;
              *(_DWORD *)(v3 + 36) = v32;
              if (!v32 && (*(_DWORD *)(v3 + 60) & 0x80000000) == 0)
                *(_DWORD *)(v3 + 60) = -1;
            }
            else if (xmlStrEqual(v30, (const xmlChar *)"tt")
                   || xmlStrEqual(*(const xmlChar **)(a2 + 16), (const xmlChar *)"pre"))
            {
              v34 = *(_DWORD *)(v3 + 28);
              if (v34 <= 1)
                v34 = 1;
              v35 = v34 - 1;
              *(_DWORD *)(v3 + 28) = v35;
              if (!v35 && (*(_DWORD *)(v3 + 52) & 0x80000000) == 0)
                *(_DWORD *)(v3 + 52) = -1;
            }
            else if (xmlStrEqual(*(const xmlChar **)(a2 + 16), (const xmlChar *)"ol"))
            {
              *(_DWORD *)(v3 + 68) = 0;
            }
            else if (xmlStrEqual(*(const xmlChar **)(a2 + 16), (const xmlChar *)"a"))
            {
              v58 = v14;
              Prop = xmlGetProp((const xmlNode *)a2, (const xmlChar *)"href");
              free(*(void **)(v3 + 72));
              if (Prop)
                v37 = strdup((const char *)Prop);
              else
                v37 = 0;
              *(_QWORD *)(v3 + 72) = v37;
              v39 = *(_DWORD *)(v3 + 40);
              if (v39 <= 1)
                v39 = 1;
              v40 = v39 - 1;
              *(_DWORD *)(v3 + 40) = v40;
              if (!v40 && (*(_DWORD *)(v3 + 64) & 0x80000000) == 0)
                *(_DWORD *)(v3 + 64) = -1;
              if (Prop && *Prop)
              {
                v41 = strlen((const char *)Prop);
                if (v41 < 7 || (v42 = 7, strncmp((const char *)Prop, "mailto:", 7uLL)))
                  v42 = 0;
                v43 = &Prop[v42];
                v44 = strlen((const char *)v43);
                v45 = *(_QWORD *)v3;
                v46 = *(_DWORD *)(v3 + 8);
                if (!bufEndswith(*(_QWORD *)v3, v46, (char *)v43, v44)
                  && (v41 < 7
                   || strncmp((const char *)Prop, "http://", 7uLL)
                   || !bufEndswith(v45, v46, (char *)v43 + 7, v44 - 7)))
                {
                  if ((*(_DWORD *)(v3 + 16) - 1) >= 3)
                  {
                    bufAddChar(v3, 32);
                    *(_DWORD *)(v3 + 16) = 3;
                  }
                  toBuf(v3, "<");
                  if (*(_BYTE *)(v3 + 89))
                    v47 = "_link_";
                  else
                    v47 = (char *)Prop;
                  toBuf(v3, v47);
                  toBuf(v3, ">");
                  if ((*(_DWORD *)(v3 + 16) - 1) >= 3)
                  {
                    bufAddChar(v3, 32);
                    *(_DWORD *)(v3 + 16) = 3;
                  }
                }
              }
              ((void (*)(xmlChar *))*MEMORY[0x1E0DE8D30])(Prop);
              v14 = v58;
            }
          }
          if (xmlStrEqual(*(const xmlChar **)(a2 + 16), (const xmlChar *)"table")
            || xmlStrEqual(*(const xmlChar **)(a2 + 16), (const xmlChar *)"tr")
            || xmlStrEqual(*(const xmlChar **)(a2 + 16), (const xmlChar *)"td")
            || xmlStrEqual(*(const xmlChar **)(a2 + 16), (const xmlChar *)"th"))
          {
            if (*(_BYTE *)(v3 + 88))
            {
              toBuf(v3, " [/");
              toBuf(v3, *(char **)(a2 + 16));
              v52 = *(_DWORD *)(v3 + 84);
              *(_OWORD *)__s = 0u;
              v60 = 0u;
              __sprintf_chk(__s, 0, 0x20uLL, "%i", v52);
              toBuf(v3, __s);
              toBuf(v3, "]");
            }
            else if ((*(_DWORD *)(v3 + 16) - 1) >= 3)
            {
              bufAddChar(v3, 32);
              *(_DWORD *)(v3 + 16) = 3;
            }
            result = xmlStrEqual(*(const xmlChar **)(a2 + 16), (const xmlChar *)"table");
            if ((_DWORD)result)
              --*(_DWORD *)(v3 + 84);
          }
          else if (xmlStrEqual(*(const xmlChar **)(a2 + 16), (const xmlChar *)"sup")
                 || (result = xmlStrEqual(*(const xmlChar **)(a2 + 16), (const xmlChar *)"sub"), (_DWORD)result))
          {
            result = toBuf(v3, ")");
          }
          if (v14)
          {
            if (*(_DWORD *)(v3 + 16) != 2)
            {
              result = (uint64_t)bufAddChar(v3, 10);
              v53 = *(_DWORD *)(v3 + 16);
              v54 = v53 == 1;
              v55 = v53 == 1 ? 2 : 1;
              *(_DWORD *)(v3 + 16) = v55;
              if (!v54)
              {
                result = (uint64_t)bufAddChar(v3, 10);
                if (*(_DWORD *)(v3 + 16) == 1)
                  v56 = 2;
                else
                  v56 = 1;
                *(_DWORD *)(v3 + 16) = v56;
              }
            }
            if (*(int *)(v3 + 32) >= 1)
            {
              v57 = 0;
              do
              {
                result = toBuf(v3, "> ");
                ++v57;
              }
              while (v57 < *(_DWORD *)(v3 + 32));
            }
          }
          return result;
        }
        if (!xmlStrEqual(v8, (const xmlChar *)"b")
          && !xmlStrEqual(v8, (const xmlChar *)"i")
          && !xmlStrEqual(v8, (const xmlChar *)"br")
          && !xmlStrEqual(v8, (const xmlChar *)"a")
          && !xmlStrEqual(v8, (const xmlChar *)"span"))
        {
          if (xmlStrEqual(v8, (const xmlChar *)"blockquote"))
            goto LABEL_12;
          if (*v8 == 104)
          {
            if (xmlStrEqual(v8, (const xmlChar *)"h1")
              || xmlStrEqual(v8, (const xmlChar *)"h2")
              || xmlStrEqual(v8, (const xmlChar *)"h3")
              || xmlStrEqual(v8, (const xmlChar *)"h4")
              || xmlStrEqual(v8, (const xmlChar *)"h5")
              || xmlStrEqual(v8, (const xmlChar *)"h6")
              || xmlStrEqual(v8, (const xmlChar *)"hr")
              || xmlStrEqual(v8, (const xmlChar *)"header"))
            {
              goto LABEL_12;
            }
            v50 = "hgroup";
          }
          else
          {
            if (xmlStrEqual(v8, (const xmlChar *)"li")
              || xmlStrEqual(v8, (const xmlChar *)"ol")
              || xmlStrEqual(v8, (const xmlChar *)"ul")
              || xmlStrEqual(v8, (const xmlChar *)"table")
              || xmlStrEqual(v8, (const xmlChar *)"address")
              || xmlStrEqual(v8, (const xmlChar *)"article")
              || xmlStrEqual(v8, (const xmlChar *)"details")
              || xmlStrEqual(v8, (const xmlChar *)"dl")
              || xmlStrEqual(v8, (const xmlChar *)"dt")
              || xmlStrEqual(v8, (const xmlChar *)"fieldset")
              || xmlStrEqual(v8, (const xmlChar *)"figcaption")
              || xmlStrEqual(v8, (const xmlChar *)"footer")
              || xmlStrEqual(v8, (const xmlChar *)"form")
              || xmlStrEqual(v8, (const xmlChar *)"nav")
              || xmlStrEqual(v8, (const xmlChar *)"noscript")
              || xmlStrEqual(v8, (const xmlChar *)"pre")
              || xmlStrEqual(v8, (const xmlChar *)"section"))
            {
              goto LABEL_12;
            }
            v50 = "summary";
          }
          if (xmlStrEqual(v8, (const xmlChar *)v50))
            goto LABEL_12;
        }
      }
    }
    v14 = 0;
    goto LABEL_40;
  }
  if (v4 != 3)
    return result;
  Content = (char *)xmlNodeGetContent((const xmlNode *)a2);
  v6 = Content;
  if (*(int *)(v3 + 28) <= 0)
  {
    v15 = Content;
    while (1)
    {
      while (1)
      {
        v16 = 0;
        v18 = *v15++;
        v17 = v18;
        if (v18 > 0x20)
          goto LABEL_30;
        if (((1 << v17) & 0x100002600) != 0)
          break;
        if (!v17)
          return ((uint64_t (*)(char *))*MEMORY[0x1E0DE8D30])(v6);
LABEL_30:
        bufAddChar(v3, v17);
        *(_DWORD *)(v3 + 16) = v16;
      }
      if ((*(_DWORD *)(v3 + 16) - 1) >= 3)
      {
        v16 = 3;
        LOBYTE(v17) = 32;
        goto LABEL_30;
      }
    }
  }
  toBuf(v3, Content);
  return ((uint64_t (*)(char *))*MEMORY[0x1E0DE8D30])(v6);
}

uint64_t toBuf(uint64_t result, char *__s)
{
  uint64_t v3;
  int v4;
  char v5;
  char *v6;
  int v7;
  int v8;
  int v9;

  if (__s)
  {
    v3 = result;
    result = strlen(__s);
    v4 = result;
    if ((_DWORD)result)
    {
      v5 = *__s;
      if (*__s)
      {
        v6 = __s + 1;
        do
        {
          result = (uint64_t)bufAddChar(v3, v5);
          v7 = *v6++;
          v5 = v7;
        }
        while (v7);
      }
      v8 = __s[v4 - 1];
      if (v8 != 32)
      {
        if (v8 == 10)
        {
          if (v4 >= 2 && __s[v4 - 2] == 10 || *(_DWORD *)(v3 + 16) == 1)
            v9 = 2;
          else
            v9 = 1;
          goto LABEL_16;
        }
        if (v8 != 9)
        {
          *(_DWORD *)(v3 + 16) = 0;
          return result;
        }
      }
      v9 = 3;
LABEL_16:
      *(_DWORD *)(v3 + 16) = v9;
    }
  }
  return result;
}

void *bufAddChar(uint64_t a1, char a2)
{
  int v4;
  int v5;
  void *result;
  int v7;
  id v8;

  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_DWORD *)(a1 + 12);
  result = *(void **)a1;
  if (v4 >= v5)
  {
    v7 = (v5 & 1) + v5 + (v5 >> 1);
    *(_DWORD *)(a1 + 12) = v7;
    result = reallocf(result, v7);
    if (!result)
    {
      objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99850], CFSTR("malloc failed"), 0);
      v8 = (id)objc_claimAutoreleasedReturnValue();
      objc_exception_throw(v8);
    }
    *(_QWORD *)a1 = result;
    v4 = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(a1 + 8) = v4 + 1;
  *((_BYTE *)result + v4) = a2;
  return result;
}

void li(uint64_t a1)
{
  id v2;
  uint64_t v3;
  id v4;

  if (*(int *)(a1 + 68) < 1)
  {
    toBuf(a1, "* ");
  }
  else
  {
    v2 = objc_alloc(MEMORY[0x1E0CB3940]);
    v3 = *(unsigned int *)(a1 + 68);
    *(_DWORD *)(a1 + 68) = v3 + 1;
    v4 = objc_retainAutorelease((id)objc_msgSend(v2, "initWithFormat:", CFSTR("%i. "), v3));
    toBuf(a1, (char *)objc_msgSend(v4, "UTF8String"));

  }
}

uint64_t toBufInt(uint64_t a1, int a2)
{
  char __s[16];
  __int128 v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__s = 0u;
  v5 = 0u;
  __sprintf_chk(__s, 0, 0x20uLL, "%i", a2);
  return toBuf(a1, __s);
}

BOOL bufEndswith(uint64_t a1, int a2, char *__s2, int a4)
{
  _BOOL8 result;

  result = 0;
  if (__s2 && a1 && a2 >= a4)
    return strncmp((const char *)(a1 + a2 - a4), __s2, a4) == 0;
  return result;
}

uint64_t _sgmDocumentTypeOfMessage(void *a1)
{
  id v1;
  char isKindOfClass;
  uint64_t v3;

  v1 = a1;
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();

  v3 = MEMORY[0x1E0D19C18];
  if ((isKindOfClass & 1) == 0)
    v3 = MEMORY[0x1E0D19C10];
  return *(_QWORD *)v3;
}

void SGPETAddValueForScalarKey(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  const __CFString *v10;
  _QWORD v11[2];

  v11[1] = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = (void *)objc_opt_new();
  objc_msgSend(v4, "setKey:", v3);
  objc_msgSend(MEMORY[0x1E0D80F28], "sharedInstance");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "trackScalarForMessage:count:", v4, a2);

  v6 = objc_alloc(MEMORY[0x1E0CB3940]);
  v7 = (void *)objc_msgSend(v6, "initWithFormat:", CFSTR("%@.%@"), *MEMORY[0x1E0D19D98], v3);

  v10 = CFSTR("count");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a2);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v11[0] = v8;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v11, &v10, 1);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  AnalyticsSendEvent();
}

void logIngestEvent(int a1, uint64_t a2)
{
  NSObject *v4;
  _BOOL4 v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint8_t buf[4];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  sgLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = os_log_type_enabled(v4, OS_LOG_TYPE_INFO);
  if (a1)
  {
    if (v5)
    {
      *(_DWORD *)buf = 134217984;
      v11 = a2;
      _os_log_impl(&dword_1C3607000, v4, OS_LOG_TYPE_INFO, "Starting ingest of %lu messages", buf, 0xCu);
    }
  }
  else if (v5)
  {
    *(_DWORD *)buf = 134217984;
    v11 = a2;
    _os_log_impl(&dword_1C3607000, v4, OS_LOG_TYPE_INFO, "Ending ingest of %lu messages", buf, 0xCu);
  }

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a2, CFSTR("count"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = v6;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v9, &v8, 1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  PLLogRegisteredEvent();
}

void logDissectionEvent(int a1, void *a2, unint64_t a3)
{
  id v5;
  NSObject *v6;
  _BOOL4 v7;
  void *v8;
  __CFString *v9;
  void *v10;
  void *v11;
  void *v12;
  _QWORD v13[2];
  _QWORD v14[2];
  uint8_t buf[4];
  uint64_t v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  sgLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = os_log_type_enabled(v6, OS_LOG_TYPE_INFO);
  if (a1)
  {
    if (v7)
    {
      *(_DWORD *)buf = 134218240;
      v16 = objc_msgSend(v5, "contentLength");
      v17 = 1024;
      v18 = a3;
      _os_log_impl(&dword_1C3607000, v6, OS_LOG_TYPE_INFO, "Starting dissection, len=%tu, ctx=%i", buf, 0x12u);
    }
  }
  else if (v7)
  {
    *(_DWORD *)buf = 134218240;
    v16 = objc_msgSend(v5, "contentLength");
    v17 = 1024;
    v18 = a3;
    _os_log_impl(&dword_1C3607000, v6, OS_LOG_TYPE_INFO, "Ending dissection, len=%tu, ctx=%i", buf, 0x12u);
  }

  v13[0] = CFSTR("bodySize");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", objc_msgSend(v5, "contentLength"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v13[1] = CFSTR("context");
  v14[0] = v8;
  if (a3 >= 4)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *dissectionContextName(SGDPowerLogDissectionContext)");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", v11, CFSTR("SGDPowerLog.m"), 49, CFSTR("Invalid dissection context: %lu"), a3);

    v9 = 0;
  }
  else
  {
    v9 = off_1E7DA8768[a3];
  }
  v14[1] = v9;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v14, v13, 2);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  PLLogRegisteredEvent();
}

void sub_1C3640A78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  SGRecordMeasurementState(va);
  _Unwind_Resume(a1);
}

void sub_1C3642C18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C36431BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_1C36436D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C364500C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_1C3647334(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_1C364B134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C364D690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C364E800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C364F6A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C36501E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__3446(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__3447(uint64_t a1)
{

}

void sub_1C36526B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___serialQueueForTitleGeneration_block_invoke()
{
  void *v0;
  uint64_t v1;
  void *v2;

  v0 = (void *)MEMORY[0x1C3BD4F6C]();
  objc_msgSend(MEMORY[0x1E0D81598], "autoreleasingSerialQueueWithLabel:", *MEMORY[0x1E0D19DC0]);
  v1 = objc_claimAutoreleasedReturnValue();
  v2 = (void *)_serialQueueForTitleGeneration__pasExprOnceResult;
  _serialQueueForTitleGeneration__pasExprOnceResult = v1;

  objc_autoreleasePoolPop(v0);
}

id _PASValidatedFormat(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  objc_class *v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  uint64_t v14;
  void *v15;
  void *v16;
  id v18[2];
  uint64_t v19;
  _QWORD v20[2];

  v20[1] = *MEMORY[0x1E0C80C00];
  v18[1] = &a9;
  v9 = (objc_class *)MEMORY[0x1E0CB3940];
  v10 = a1;
  v18[0] = 0;
  v11 = (void *)objc_msgSend([v9 alloc], "initWithValidatedFormat:validFormatSpecifiers:locale:arguments:error:", v10, CFSTR("%@"), 0, &a9, v18);

  v12 = v18[0];
  if (!v11)
  {
    v13 = objc_alloc(MEMORY[0x1E0C99DA0]);
    v14 = *MEMORY[0x1E0C99778];
    v19 = *MEMORY[0x1E0CB3388];
    v20[0] = v12;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v20, &v19, 1);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = (void *)objc_msgSend(v13, "initWithName:reason:userInfo:", v14, CFSTR("An error occurred while formatting the string."), v15);

    objc_msgSend(v16, "raise");
  }

  return v11;
}

void sub_1C3659158(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void __getEntityMappingDispatchQueue_block_invoke()
{
  void *v0;
  NSObject *v1;
  NSObject *v2;
  dispatch_queue_t v3;
  void *v4;

  v0 = (void *)MEMORY[0x1C3BD4F6C]();
  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v1 = objc_claimAutoreleasedReturnValue();
  dispatch_queue_attr_make_with_qos_class(v1, QOS_CLASS_BACKGROUND, 0);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = dispatch_queue_create("com.apple.suggestions.ml.datadetector", v2);
  v4 = (void *)getEntityMappingDispatchQueue__pasExprOnceResult;
  getEntityMappingDispatchQueue__pasExprOnceResult = (uint64_t)v3;

  objc_autoreleasePoolPop(v0);
}

BOOL SGMIMetricsAggregatedAccuracyLogReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  unint64_t v7;
  int *v8;
  int *v9;
  int *v10;
  int *v11;
  char v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  int v19;
  unint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  int v28;
  int *v29;
  BOOL v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  char v56;
  unsigned int v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  char v61;
  unsigned int v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  char v66;
  unsigned int v67;
  uint64_t v68;
  unint64_t v69;
  char v70;
  int *v71;
  int *v72;
  unint64_t v73;
  int *v74;
  uint64_t v75;
  char v76;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = 0x1EF8DC000uLL;
    v8 = &OBJC_IVAR___SGMIMetricsAggregatedAccuracyLog__salientPredictedAsSalient;
    v9 = (int *)MEMORY[0x1E0D82BB8];
    v10 = &OBJC_IVAR___SGMIMetricsAggregatedAccuracyLog__salientPredictedAsNeutral;
    v11 = &OBJC_IVAR___SGMIMetricsAggregatedAccuracyLog__salientPredictedAsIgnorable;
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      while (1)
      {
        v15 = *v3;
        v16 = *(_QWORD *)(a2 + v15);
        if (v16 == -1 || v16 >= *(_QWORD *)(a2 + *v4))
          break;
        v17 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v16);
        *(_QWORD *)(a2 + v15) = v16 + 1;
        v14 |= (unint64_t)(v17 & 0x7F) << v12;
        if ((v17 & 0x80) == 0)
          goto LABEL_12;
        v12 += 7;
        if (v13++ >= 9)
        {
          v14 = 0;
          v19 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v19 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v14 = 0;
LABEL_14:
      if (v19 || (v14 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v21 = v14 >> 3;
      if ((int)(v14 >> 3) <= 30)
      {
        switch((int)v21)
        {
          case 11:
            v22 = 0;
            v23 = 0;
            v24 = 0;
            *(_WORD *)(a1 + *(int *)(v7 + 2728)) |= 0x100u;
            while (2)
            {
              v25 = *v3;
              v26 = *(_QWORD *)(a2 + v25);
              if (v26 == -1 || v26 >= *(_QWORD *)(a2 + *v4))
              {
                v29 = v8;
                goto LABEL_97;
              }
              v27 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v26);
              *(_QWORD *)(a2 + v25) = v26 + 1;
              v24 |= (unint64_t)(v27 & 0x7F) << v22;
              if (v27 < 0)
              {
                v28 = 0;
                v22 += 7;
                v29 = v8;
                v30 = v23++ > 8;
                if (v30)
                  goto LABEL_101;
                continue;
              }
              break;
            }
            v29 = v8;
            goto LABEL_98;
          case 12:
            v36 = 0;
            v37 = 0;
            v24 = 0;
            *(_WORD *)(a1 + *(int *)(v7 + 2728)) |= 0x80u;
            while (2)
            {
              v38 = *v3;
              v39 = *(_QWORD *)(a2 + v38);
              if (v39 == -1 || v39 >= *(_QWORD *)(a2 + *v4))
              {
                v29 = v10;
                goto LABEL_97;
              }
              v40 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v39);
              *(_QWORD *)(a2 + v38) = v39 + 1;
              v24 |= (unint64_t)(v40 & 0x7F) << v36;
              if (v40 < 0)
              {
                v28 = 0;
                v36 += 7;
                v29 = v10;
                v30 = v37++ > 8;
                if (v30)
                  goto LABEL_101;
                continue;
              }
              break;
            }
            v29 = v10;
            goto LABEL_98;
          case 13:
            v41 = 0;
            v42 = 0;
            v24 = 0;
            *(_WORD *)(a1 + *(int *)(v7 + 2728)) |= 0x40u;
            while (2)
            {
              v43 = *v3;
              v44 = *(_QWORD *)(a2 + v43);
              if (v44 == -1 || v44 >= *(_QWORD *)(a2 + *v4))
              {
                v29 = v11;
                goto LABEL_97;
              }
              v45 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v44);
              *(_QWORD *)(a2 + v43) = v44 + 1;
              v24 |= (unint64_t)(v45 & 0x7F) << v41;
              if (v45 < 0)
              {
                v28 = 0;
                v41 += 7;
                v29 = v11;
                v30 = v42++ > 8;
                if (v30)
                  goto LABEL_101;
                continue;
              }
              break;
            }
            v29 = v11;
            goto LABEL_98;
          case 21:
            v46 = 0;
            v47 = 0;
            v24 = 0;
            *(_WORD *)(a1 + *(int *)(v7 + 2728)) |= 0x20u;
            while (2)
            {
              v48 = *v3;
              v49 = *(_QWORD *)(a2 + v48);
              if (v49 == -1 || v49 >= *(_QWORD *)(a2 + *v4))
              {
                v29 = &OBJC_IVAR___SGMIMetricsAggregatedAccuracyLog__neutralPredictedAsSalient;
                goto LABEL_97;
              }
              v50 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v49);
              *(_QWORD *)(a2 + v48) = v49 + 1;
              v24 |= (unint64_t)(v50 & 0x7F) << v46;
              if (v50 < 0)
              {
                v28 = 0;
                v46 += 7;
                v29 = &OBJC_IVAR___SGMIMetricsAggregatedAccuracyLog__neutralPredictedAsSalient;
                v30 = v47++ > 8;
                if (v30)
                  goto LABEL_101;
                continue;
              }
              break;
            }
            v29 = &OBJC_IVAR___SGMIMetricsAggregatedAccuracyLog__neutralPredictedAsSalient;
            goto LABEL_98;
          case 22:
            v51 = 0;
            v52 = 0;
            v24 = 0;
            *(_WORD *)(a1 + *(int *)(v7 + 2728)) |= 0x10u;
            while (2)
            {
              v53 = *v3;
              v54 = *(_QWORD *)(a2 + v53);
              if (v54 == -1 || v54 >= *(_QWORD *)(a2 + *v4))
              {
                v29 = &OBJC_IVAR___SGMIMetricsAggregatedAccuracyLog__neutralPredictedAsNeutral;
                goto LABEL_97;
              }
              v55 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v54);
              *(_QWORD *)(a2 + v53) = v54 + 1;
              v24 |= (unint64_t)(v55 & 0x7F) << v51;
              if (v55 < 0)
              {
                v28 = 0;
                v51 += 7;
                v29 = &OBJC_IVAR___SGMIMetricsAggregatedAccuracyLog__neutralPredictedAsNeutral;
                v30 = v52++ > 8;
                if (v30)
                  goto LABEL_101;
                continue;
              }
              break;
            }
            v29 = &OBJC_IVAR___SGMIMetricsAggregatedAccuracyLog__neutralPredictedAsNeutral;
            goto LABEL_98;
          case 23:
            v56 = 0;
            v57 = 0;
            v24 = 0;
            *(_WORD *)(a1 + *(int *)(v7 + 2728)) |= 8u;
            break;
          default:
            goto LABEL_86;
        }
        while (1)
        {
          v58 = *v3;
          v59 = *(_QWORD *)(a2 + v58);
          if (v59 == -1 || v59 >= *(_QWORD *)(a2 + *v4))
          {
            v29 = &OBJC_IVAR___SGMIMetricsAggregatedAccuracyLog__neutralPredictedAsIgnorable;
            goto LABEL_97;
          }
          v60 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v59);
          *(_QWORD *)(a2 + v58) = v59 + 1;
          v24 |= (unint64_t)(v60 & 0x7F) << v56;
          if ((v60 & 0x80) == 0)
            break;
          v28 = 0;
          v56 += 7;
          v29 = &OBJC_IVAR___SGMIMetricsAggregatedAccuracyLog__neutralPredictedAsIgnorable;
          v30 = v57++ > 8;
          if (v30)
            goto LABEL_101;
        }
        v29 = &OBJC_IVAR___SGMIMetricsAggregatedAccuracyLog__neutralPredictedAsIgnorable;
        goto LABEL_98;
      }
      if ((_DWORD)v21 == 31)
      {
        v61 = 0;
        v62 = 0;
        v24 = 0;
        *(_WORD *)(a1 + *(int *)(v7 + 2728)) |= 4u;
        while (1)
        {
          v63 = *v3;
          v64 = *(_QWORD *)(a2 + v63);
          if (v64 == -1 || v64 >= *(_QWORD *)(a2 + *v4))
            break;
          v65 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v64);
          *(_QWORD *)(a2 + v63) = v64 + 1;
          v24 |= (unint64_t)(v65 & 0x7F) << v61;
          if ((v65 & 0x80) == 0)
          {
            v29 = &OBJC_IVAR___SGMIMetricsAggregatedAccuracyLog__ignorablePredictedAsSalient;
            goto LABEL_98;
          }
          v28 = 0;
          v61 += 7;
          v29 = &OBJC_IVAR___SGMIMetricsAggregatedAccuracyLog__ignorablePredictedAsSalient;
          v30 = v62++ > 8;
          if (v30)
            goto LABEL_101;
        }
        v29 = &OBJC_IVAR___SGMIMetricsAggregatedAccuracyLog__ignorablePredictedAsSalient;
LABEL_97:
        *(_BYTE *)(a2 + *v5) = 1;
        goto LABEL_98;
      }
      if ((_DWORD)v21 == 32)
        break;
      if ((_DWORD)v21 == 33)
      {
        v31 = 0;
        v32 = 0;
        v24 = 0;
        *(_WORD *)(a1 + *(int *)(v7 + 2728)) |= 1u;
        while (1)
        {
          v33 = *v3;
          v34 = *(_QWORD *)(a2 + v33);
          if (v34 == -1 || v34 >= *(_QWORD *)(a2 + *v4))
          {
            v29 = &OBJC_IVAR___SGMIMetricsAggregatedAccuracyLog__ignorablePredictedAsIgnorable;
            goto LABEL_97;
          }
          v35 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v34);
          *(_QWORD *)(a2 + v33) = v34 + 1;
          v24 |= (unint64_t)(v35 & 0x7F) << v31;
          if ((v35 & 0x80) == 0)
            break;
          v28 = 0;
          v31 += 7;
          v29 = &OBJC_IVAR___SGMIMetricsAggregatedAccuracyLog__ignorablePredictedAsIgnorable;
          v30 = v32++ > 8;
          if (v30)
            goto LABEL_101;
        }
        v29 = &OBJC_IVAR___SGMIMetricsAggregatedAccuracyLog__ignorablePredictedAsIgnorable;
        goto LABEL_98;
      }
LABEL_86:
      v71 = v8;
      v72 = v10;
      v73 = v7;
      v74 = v11;
      v75 = a1;
      v76 = PBReaderSkipValueWithTag();
      a1 = v75;
      v5 = (int *)MEMORY[0x1E0D82BC8];
      v11 = v74;
      v7 = v73;
      v10 = v72;
      v8 = v71;
      if ((v76 & 1) == 0)
        return 0;
LABEL_102:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v66 = 0;
    v67 = 0;
    v24 = 0;
    *(_WORD *)(a1 + *(int *)(v7 + 2728)) |= 2u;
    while (1)
    {
      v68 = *v3;
      v69 = *(_QWORD *)(a2 + v68);
      if (v69 == -1 || v69 >= *(_QWORD *)(a2 + *v4))
      {
        v29 = &OBJC_IVAR___SGMIMetricsAggregatedAccuracyLog__ignorablePredictedAsNeutral;
        goto LABEL_97;
      }
      v70 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v69);
      *(_QWORD *)(a2 + v68) = v69 + 1;
      v24 |= (unint64_t)(v70 & 0x7F) << v66;
      if ((v70 & 0x80) == 0)
        break;
      v28 = 0;
      v66 += 7;
      v29 = &OBJC_IVAR___SGMIMetricsAggregatedAccuracyLog__ignorablePredictedAsNeutral;
      v30 = v67++ > 8;
      if (v30)
        goto LABEL_101;
    }
    v29 = &OBJC_IVAR___SGMIMetricsAggregatedAccuracyLog__ignorablePredictedAsNeutral;
LABEL_98:
    if (*(_BYTE *)(a2 + *v5))
      v28 = 0;
    else
      v28 = v24;
LABEL_101:
    *(_DWORD *)(a1 + *v29) = v28;
    goto LABEL_102;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1C365CB80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  SGRecordMeasurementState((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t SGM2HarvestCostReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  char v42;
  unsigned int v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 20) |= 1u;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_57;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              LODWORD(v19) = 0;
              goto LABEL_59;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_57:
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v19) = 0;
LABEL_59:
          v47 = 8;
          goto LABEL_77;
        case 2u:
          v24 = 0;
          v25 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 20) |= 8u;
          while (2)
          {
            v27 = *v3;
            v28 = *(_QWORD *)(a2 + v27);
            if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
              *(_QWORD *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                v14 = v25++ >= 9;
                if (v14)
                {
                  v26 = 0;
                  goto LABEL_63;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v26 = 0;
LABEL_63:
          v48 = v26 != 0;
          v49 = 17;
          goto LABEL_72;
        case 3u:
          v30 = 0;
          v31 = 0;
          v32 = 0;
          *(_BYTE *)(a1 + 20) |= 0x10u;
          while (2)
          {
            v33 = *v3;
            v34 = *(_QWORD *)(a2 + v33);
            if (v34 == -1 || v34 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v35 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v34);
              *(_QWORD *)(a2 + v33) = v34 + 1;
              v32 |= (unint64_t)(v35 & 0x7F) << v30;
              if (v35 < 0)
              {
                v30 += 7;
                v14 = v31++ >= 9;
                if (v14)
                {
                  v32 = 0;
                  goto LABEL_67;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v32 = 0;
LABEL_67:
          v48 = v32 != 0;
          v49 = 18;
          goto LABEL_72;
        case 4u:
          v36 = 0;
          v37 = 0;
          v38 = 0;
          *(_BYTE *)(a1 + 20) |= 4u;
          while (2)
          {
            v39 = *v3;
            v40 = *(_QWORD *)(a2 + v39);
            if (v40 == -1 || v40 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v41 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v40);
              *(_QWORD *)(a2 + v39) = v40 + 1;
              v38 |= (unint64_t)(v41 & 0x7F) << v36;
              if (v41 < 0)
              {
                v36 += 7;
                v14 = v37++ >= 9;
                if (v14)
                {
                  v38 = 0;
                  goto LABEL_71;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v38 = 0;
LABEL_71:
          v48 = v38 != 0;
          v49 = 16;
LABEL_72:
          *(_BYTE *)(a1 + v49) = v48;
          continue;
        case 5u:
          v42 = 0;
          v43 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 20) |= 2u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v44 = *v3;
        v45 = *(_QWORD *)(a2 + v44);
        if (v45 == -1 || v45 >= *(_QWORD *)(a2 + *v4))
          break;
        v46 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v45);
        *(_QWORD *)(a2 + v44) = v45 + 1;
        v19 |= (unint64_t)(v46 & 0x7F) << v42;
        if ((v46 & 0x80) == 0)
          goto LABEL_74;
        v42 += 7;
        v14 = v43++ >= 9;
        if (v14)
        {
          LODWORD(v19) = 0;
          goto LABEL_76;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_74:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v19) = 0;
LABEL_76:
      v47 = 12;
LABEL_77:
      *(_DWORD *)(a1 + v47) = v19;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void SGNotUserInitiated(void *a1, int a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  qos_class_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  NSObject *v18;
  _QWORD v19[4];
  id v20;
  id v21;
  id v22;
  _QWORD v23[4];
  id v24;
  id v25;
  id from;
  id location;

  v5 = a1;
  v6 = a3;
  v7 = (void *)MEMORY[0x1C3BD4F6C]();
  if (SGNotUserInitiated__pasOnceToken3 != -1)
    dispatch_once(&SGNotUserInitiated__pasOnceToken3, &__block_literal_global_4201);
  v8 = (id)SGNotUserInitiated__pasExprOnceResult;
  if (SGNotUserInitiated__pasOnceToken4 != -1)
    dispatch_once(&SGNotUserInitiated__pasOnceToken4, &__block_literal_global_2);
  v9 = (id)SGNotUserInitiated__pasExprOnceResult_1;
  v10 = qos_class_self();
  if (v10 >= QOS_CLASS_UTILITY)
    v11 = 17;
  else
    v11 = v10;
  pthread_mutex_lock(&SGNotUserInitiated_queueCacheLock);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "objectForKeyedSubscript:", v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v13)
  {
    v13 = (void *)objc_opt_new();
    objc_msgSend(v13, "setQualityOfService:", v11);
    objc_msgSend(v13, "setMaxConcurrentOperationCount:", 2);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v11);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setObject:forKeyedSubscript:", v13, v14);

  }
  objc_msgSend(MEMORY[0x1E0CB34C8], "blockOperationWithBlock:", v6);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "setName:", v5);
  if (a2 == 2)
  {
    objc_msgSend(v9, "objectForKeyedSubscript:", v5);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = MEMORY[0x1E0C809B0];
    if (v16)
    {
      objc_msgSend(v15, "addDependency:", v16);
      location = 0;
      objc_initWeak(&location, v15);
      from = 0;
      objc_initWeak(&from, v16);
      v23[0] = v17;
      v23[1] = 3221225472;
      v23[2] = __SGNotUserInitiated_block_invoke_3;
      v23[3] = &unk_1E7DA9558;
      objc_copyWeak(&v24, &location);
      objc_copyWeak(&v25, &from);
      objc_msgSend(v16, "setCompletionBlock:", v23);
      objc_destroyWeak(&v25);
      objc_destroyWeak(&v24);
      objc_destroyWeak(&from);
      objc_destroyWeak(&location);
      v17 = MEMORY[0x1E0C809B0];
    }
    objc_msgSend(v9, "setObject:forKeyedSubscript:", v15, v5);

    location = 0;
    objc_initWeak(&location, v15);
    v19[0] = v17;
    v19[1] = 3221225472;
    v19[2] = __SGNotUserInitiated_block_invoke_4;
    v19[3] = &unk_1E7DA9580;
    v20 = v9;
    v21 = v5;
    objc_copyWeak(&v22, &location);
    objc_msgSend(v15, "setCompletionBlock:", v19);
    objc_destroyWeak(&v22);

    objc_destroyWeak(&location);
  }
  else
  {
    objc_msgSend(v15, "setCompletionBlock:", &__block_literal_global_6);
  }
  pthread_mutex_unlock(&SGNotUserInitiated_queueCacheLock);
  waitGroup();
  v18 = objc_claimAutoreleasedReturnValue();
  dispatch_group_enter(v18);

  objc_msgSend(v13, "addOperation:", v15);
  objc_autoreleasePoolPop(v7);

}

void sub_1C365F1D4(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 96));
  objc_destroyWeak((id *)(v3 - 88));
  _Unwind_Resume(a1);
}

id waitGroup()
{
  if (waitGroup__pasOnceToken2 != -1)
    dispatch_once(&waitGroup__pasOnceToken2, &__block_literal_global_7);
  return (id)waitGroup__pasExprOnceResult;
}

void __waitGroup_block_invoke()
{
  void *v0;
  dispatch_group_t v1;
  void *v2;

  v0 = (void *)MEMORY[0x1C3BD4F6C]();
  v1 = dispatch_group_create();
  v2 = (void *)waitGroup__pasExprOnceResult;
  waitGroup__pasExprOnceResult = (uint64_t)v1;

  objc_autoreleasePoolPop(v0);
}

void SGNotUserInitiatedWaitUntilAllOperationsAreFinished()
{
  NSObject *v0;

  waitGroup();
  v0 = objc_claimAutoreleasedReturnValue();
  dispatch_group_wait(v0, 0xFFFFFFFFFFFFFFFFLL);

}

void sub_1C366042C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1C3660668(_Unwind_Exception *a1)
{
  uint64_t v1;

  SGRecordMeasurementState((_QWORD *)(v1 - 104));
  _Unwind_Resume(a1);
}

void sub_1C366077C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1C3660958(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1C3660E14(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1C3660EE8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1C3660FCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  SGRecordMeasurementState(&a9);
  _Unwind_Resume(a1);
}

void sub_1C36610C0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1C3661158(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  SGRecordMeasurementState((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1C366124C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1C3661394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  SGRecordMeasurementState((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1C366148C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1C3661574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C3661668(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1C3661948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  SGRecordMeasurementState((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1C3661A5C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1C36621E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  SGRecordMeasurementState(&a58);
  _Unwind_Resume(a1);
}

void sub_1C366234C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1C3662604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1C3662710(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1C36627E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C36628D8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1C36640E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
  _Block_object_dispose(&a43, 8);
  _Block_object_dispose(&a50, 8);
  _Unwind_Resume(a1);
}

Class __getPSUSummarizationAnalyticsClass_block_invoke(uint64_t a1)
{
  Class result;

  if (!ProactiveSummarizationLibraryCore_frameworkLibrary)
    ProactiveSummarizationLibraryCore_frameworkLibrary = _sl_dlopen();
  result = objc_getClass("PSUSummarizationAnalytics");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  getPSUSummarizationAnalyticsClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1C3664F00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  SGRecordMeasurementState((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1C3665A9C(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_1C3665AB4(uint64_t a1, int a2)
{
  if (a2)
    objc_terminate();
  JUMPOUT(0x1C3665AC0);
}

void sub_1C3667DE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

id getMailAccountClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getMailAccountClass_softClass;
  v7 = getMailAccountClass_softClass;
  if (!getMailAccountClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getMailAccountClass_block_invoke;
    v3[3] = &unk_1E7DB7220;
    v3[4] = &v4;
    __getMailAccountClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1C366856C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getMailAccountClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!MessageLibraryCore_frameworkLibrary)
    MessageLibraryCore_frameworkLibrary = _sl_dlopen();
  if (!MessageLibraryCore_frameworkLibrary)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *MessageLibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("SGCalendarAttachmentDissector.m"), 47, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("MailAccount");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getMailAccountClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("SGCalendarAttachmentDissector.m"), 48, CFSTR("Unable to find class %s"), "MailAccount");

LABEL_8:
    __break(1u);
  }
  getMailAccountClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1C3668984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 192), 8);
  _Block_object_dispose((const void *)(v29 - 160), 8);
  _Block_object_dispose((const void *)(v29 - 128), 8);
  _Block_object_dispose((const void *)(v29 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1C3668B24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __removeAttachments_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const char *v6;
  uint64_t result;
  int v8;
  void *v9;

  v6 = (const char *)(objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 32)), "bytes") + a2);
  if (a2 + a3 >= (unint64_t)objc_msgSend(*(id *)(a1 + 32), "length")
    || (result = 0, v8 = v6[a3], v8 != 9) && v8 != 32)
  {
    if ((int)a3 >= 6 && !strncmp(v6, "ATTACH", 6uLL))
    {
      objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithRange:", a2, a3);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 40), "addObject:", v9);

    }
    return 1;
  }
  return result;
}

uint64_t __Block_byref_object_copy__4569(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__4570(uint64_t a1)
{

}

id convertDateComponentsToLocalTimeZone(void *a1)
{
  objc_class *v1;
  id v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v1 = (objc_class *)MEMORY[0x1E0C99D48];
  v2 = a1;
  v3 = [v1 alloc];
  v4 = (void *)objc_msgSend(v3, "initWithCalendarIdentifier:", *MEMORY[0x1E0C996C8]);
  objc_msgSend(v4, "dateFromComponents:", v2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
  {
    objc_msgSend(MEMORY[0x1E0C99E80], "localTimeZone");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "componentsInTimeZone:fromDate:", v6, v5);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

void sub_1C366CD34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id normalizeName(void *a1)
{
  id v1;
  id v2;
  void *v3;

  v1 = a1;
  if (objc_msgSend(v1, "canBeConvertedToEncoding:", 1))
  {
    v2 = v1;
  }
  else
  {
    objc_msgSend(v1, "precomposedStringWithCanonicalMapping");
    v2 = (id)objc_claimAutoreleasedReturnValue();
  }
  v3 = v2;

  return v3;
}

uint64_t re2::Prog::SearchOnePass(uint64_t a1, unsigned __int8 **a2, __int128 *a3, int a4, int a5, uint64_t a6, int a7)
{
  int v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::ios_base *v16;
  int v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  int v22;
  uint64_t v23;
  int *v24;
  int v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t i;
  uint64_t j;
  unsigned int v32;
  uint64_t k;
  uint64_t v35;
  _DWORD *v36;
  _DWORD *v37;
  uint64_t v38;
  int v39;
  uint64_t __n;
  uint64_t v41;
  char v42;
  uint64_t v43;
  unsigned __int8 *v44;
  int v45;
  int v46;
  __int128 v47;
  unsigned __int8 *v48;
  _OWORD v49[4];
  uint64_t v50;
  unsigned __int8 *v51;
  _OWORD v52[4];
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  int v56;
  uint64_t v57;
  uint64_t v58;

  v9 = a5;
  v58 = *MEMORY[0x1E0C80C00];
  if (a4 != 1 && a5 != 2)
  {
    LOBYTE(v51) = 0;
    v13 = MEMORY[0x1E0DE4FE0];
    v14 = MEMORY[0x1E0DE4FE0] + 64;
    v57 = MEMORY[0x1E0DE4FE0] + 64;
    v15 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    *(_QWORD *)&v52[0] = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    *(_QWORD *)((char *)v52 + *(_QWORD *)(*(_QWORD *)&v52[0] - 24)) = v15;
    v16 = (std::ios_base *)((char *)v52 + *(_QWORD *)(*(_QWORD *)&v52[0] - 24));
    std::ios_base::init(v16, (char *)v52 + 8);
    v16[1].__vftable = 0;
    v16[1].__fmtflags_ = -1;
    *(_QWORD *)&v52[0] = v13 + 24;
    v57 = v14;
    std::streambuf::basic_streambuf();
    *((_QWORD *)&v52[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
    v54 = 0u;
    v55 = 0u;
    v56 = 16;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"Cannot use SearchOnePass for unanchored matches.", 48);
    LogMessage::~LogMessage((void **)&v51);
    return 0;
  }
  v17 = 2 * a7;
  v53 = 0;
  v52[3] = 0u;
  if (2 * a7 <= 2)
    v18 = 2;
  else
    v18 = v17;
  memset(v52, 0, 48);
  bzero(&v51, 8 * v18);
  v50 = 0;
  memset(v49, 0, sizeof(v49));
  bzero(&v48, 8 * v18);
  v47 = *a3;
  v19 = (unsigned __int8 *)v47;
  if (!(_QWORD)v47)
  {
    v19 = *a2;
    *(_QWORD *)&v47 = *a2;
    DWORD2(v47) = *((_DWORD *)a2 + 2);
  }
  v20 = *a2;
  if (*(_BYTE *)a1 && v19 != v20)
    return 0;
  if (*(_BYTE *)(a1 + 1))
  {
    v21 = &v19[SDWORD2(v47)];
    v22 = *((_DWORD *)a2 + 2);
    v23 = v22;
    if (v21 != &v20[v22])
      return 0;
    v45 = a7;
    v9 = 2;
  }
  else
  {
    v45 = a7;
    v22 = *((_DWORD *)a2 + 2);
    v23 = v22;
  }
  v41 = a6;
  v24 = *(int **)(a1 + 576);
  v43 = *(_QWORD *)(a1 + 568);
  v46 = *(_DWORD *)(a1 + 28);
  v48 = *a2;
  v51 = v20;
  v25 = *v24;
  if (v22 >= 1)
  {
    v42 = 0;
    v26 = a1 + 304;
    v44 = &v20[v23];
    if (v17 <= 3)
      v27 = 3;
    else
      v27 = v17;
    __n = 8 * (v27 - 2);
    while (1)
    {
      v28 = v25;
      v29 = v24[*(unsigned __int8 *)(v26 + *v20) + 1];
      if ((v29 & 0x3F) != 0 && (v29 & 0x3F & ~re2::Prog::EmptyFlags((uint64_t)&v47, v20)) != 0)
      {
        v24 = 0;
        v25 = 48;
        if (v9 != 2)
          goto LABEL_26;
      }
      else
      {
        v24 = (int *)(v43 + v46 * (uint64_t)HIWORD(v29));
        v25 = *v24;
        if (v9 != 2)
        {
LABEL_26:
          if (v28 != 48
            && v29 & 0x40 | v25 & 0x3F
            && ((v28 & 0x3F) == 0 || (v28 & 0x3F & ~re2::Prog::EmptyFlags((uint64_t)&v47, v20)) == 0))
          {
            if (v45 >= 2)
            {
              memcpy((char *)v49 + 8, (char *)v52 + 8, __n);
              if (v18 >= 3 && (v28 & 0x7F80) != 0)
              {
                for (i = 2; i != v18; ++i)
                {
                  if (((v28 >> i) & 0x20) != 0)
                    (&v48)[i] = v20;
                }
              }
            }
            *(_QWORD *)&v49[0] = v20;
            v42 = 1;
            if (!v9 && (v29 & 0x40) != 0)
              goto LABEL_63;
          }
        }
      }
      if (!v24)
        goto LABEL_51;
      if (v18 >= 3 && v45 >= 2 && (v29 & 0x7F80) != 0)
      {
        for (j = 2; j != v18; ++j)
        {
          if (((v29 >> j) & 0x20) != 0)
            (&v51)[j] = v20;
        }
      }
      if (++v20 >= v44)
        goto LABEL_48;
    }
  }
  v42 = 0;
LABEL_48:
  v32 = *v24;
  if (*v24 == 48 || (v32 & 0x3F) != 0 && (v32 & 0x3F & ~re2::Prog::EmptyFlags((uint64_t)&v47, v20)) != 0)
  {
LABEL_51:
    if ((v42 & 1) == 0)
      return 0;
  }
  else
  {
    if (v18 >= 3 && v45 >= 2 && (v32 & 0x7F80) != 0)
    {
      for (k = 2; k != v18; ++k)
      {
        if (((v32 >> k) & 0x20) != 0)
          (&v51)[k] = v20;
      }
    }
    if (v18 >= 3)
      memcpy((char *)v49 + 8, (char *)v52 + 8, 8 * (v18 - 4) + 16);
    *(_QWORD *)&v49[0] = v20;
  }
LABEL_63:
  if (v45 >= 1)
  {
    v35 = v45;
    v36 = (_DWORD *)(v41 + 8);
    v37 = v49;
    do
    {
      v38 = *((_QWORD *)v37 - 1);
      v39 = *v37;
      v37 += 4;
      *((_QWORD *)v36 - 1) = v38;
      *v36 = v39 - v38;
      v36 += 4;
      --v35;
    }
    while (v35);
  }
  return 1;
}

void sub_1C366D650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30)
{
  LogMessage::~LogMessage(&a30);
  _Unwind_Resume(a1);
}

void sub_1C366D664(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1C3BD4828](v1 + 120);
  _Unwind_Resume(a1);
}

_QWORD *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  size_t v16;
  std::locale::__imp *p_b;
  uint64_t v18;
  uint64_t v19;
  void *locale;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[2];
  std::locale __b;
  size_t v26;
  int64_t v27;

  v24[0] = 0;
  v24[1] = 0;
  MEMORY[0x1C3BD4780](v24, a1);
  if (LOBYTE(v24[0]))
  {
    v6 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *((_QWORD *)v6 + 5);
    v8 = *((_DWORD *)v6 + 2);
    v9 = *((_DWORD *)v6 + 36);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&__b, MEMORY[0x1E0DE4A90]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&__b);
      *((_DWORD *)v6 + 36) = v9;
    }
    v11 = a2 + a3;
    if ((v8 & 0xB0) == 0x20)
      v12 = a2 + a3;
    else
      v12 = a2;
    if (!v7)
      goto LABEL_30;
    v13 = *((_QWORD *)v6 + 3);
    v14 = v13 <= a3;
    v15 = v13 - a3;
    v16 = v14 ? 0 : v15;
    if (v12 - a2 >= 1
      && (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 96))(v7, a2, v12 - a2) != v12 - a2)
    {
      goto LABEL_30;
    }
    if ((uint64_t)v16 >= 1)
    {
      __b.__locale_ = 0;
      v26 = 0;
      v27 = 0;
      if (v16 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      if (v16 >= 0x17)
      {
        v18 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v16 | 7) != 0x17)
          v18 = v16 | 7;
        v19 = v18 + 1;
        p_b = (std::locale::__imp *)operator new(v18 + 1);
        v26 = v16;
        v27 = v19 | 0x8000000000000000;
        __b.__locale_ = p_b;
      }
      else
      {
        HIBYTE(v27) = v16;
        p_b = (std::locale::__imp *)&__b;
      }
      memset(p_b, v9, v16);
      *((_BYTE *)p_b + v16) = 0;
      if (v27 >= 0)
        locale = &__b;
      else
        locale = __b.__locale_;
      v21 = (*(uint64_t (**)(uint64_t, void *, size_t))(*(_QWORD *)v7 + 96))(v7, locale, v16);
      v22 = v21;
      if (SHIBYTE(v27) < 0)
      {
        operator delete(__b.__locale_);
        if (v22 != v16)
        {
LABEL_30:
          std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
          goto LABEL_31;
        }
      }
      else if (v21 != v16)
      {
        goto LABEL_30;
      }
    }
    if (v11 - v12 >= 1
      && (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 96))(v7, v12, v11 - v12) != v11 - v12)
    {
      goto LABEL_30;
    }
    *((_QWORD *)v6 + 3) = 0;
  }
LABEL_31:
  MEMORY[0x1C3BD478C](v24);
  return a1;
}

void sub_1C366D8C4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  _QWORD *v17;

  if (a17 < 0)
    operator delete(__p);
  MEMORY[0x1C3BD478C](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v17 + *(_QWORD *)(*v17 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x1C366D898);
}

void sub_1C366D924(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void LogMessage::~LogMessage(void **this)
{
  uint64_t v2;
  uint64_t v3;

  if (!*(_BYTE *)this)
    LogMessage::Flush((LogMessage *)this);
  v2 = MEMORY[0x1E0DE4F60];
  v3 = *MEMORY[0x1E0DE4F60];
  this[1] = (void *)*MEMORY[0x1E0DE4F60];
  *(void **)((char *)this + *(_QWORD *)(v3 - 24) + 8) = *(void **)(v2 + 24);
  this[2] = (void *)(MEMORY[0x1E0DE4FB8] + 16);
  if (*((char *)this + 103) < 0)
    operator delete(this[10]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1C3BD4828](this + 15);
}

void LogMessage::Flush(LogMessage *this)
{
  void *__p[2];
  uint64_t v3;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)this + 1, (uint64_t)"\n", 1);
  __p[0] = 0;
  __p[1] = 0;
  v3 = 0;
  std::stringbuf::str();
  write(2, __p, 0);
  *(_BYTE *)this = 1;
  if (SHIBYTE(v3) < 0)
    operator delete(__p[0]);
}

void sub_1C366DA68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E7DA6D30, MEMORY[0x1E0DE42D0]);
}

void sub_1C366DAE4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5020] + 16);
  return result;
}

BOOL re2::Prog::IsOnePass(re2::Prog *this)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v7;
  _DWORD *v8;
  char *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  signed int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  char v26;
  int *v27;
  int v28;
  _DWORD *v29;
  unsigned int v30;
  int v31;
  int *v32;
  uint64_t v33;
  unsigned int *v34;
  unint64_t v35;
  int v36;
  int *v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  signed int v42;
  signed int *v43;
  signed int v44;
  BOOL v45;
  uint64_t v46;
  unsigned int *v47;
  int v48;
  int v49;
  int v50;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned __int8 *v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  int *v68;
  int *v69;
  int v70;
  int v71;
  signed int v72;
  unsigned int v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  signed int v77;
  int *v78;
  int v79;
  int *v80;
  int v81;
  size_t v82;
  char *v83;
  size_t v84;
  int v85;
  int *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _DWORD *v91;
  char *__src;
  int v93;

  if (*((_BYTE *)this + 3))
    return *((_QWORD *)this + 72) != 0;
  *((_BYTE *)this + 3) = 1;
  if (!*((_DWORD *)this + 1))
    return 0;
  v3 = *((int *)this + 4);
  if ((int)v3 > 64997)
    return 0;
  v4 = v3 + 2;
  v5 = 4 * *((_DWORD *)this + 5) + 4;
  if (*((_QWORD *)this + 32) / 4 / v5 < v3 + 2)
    return 0;
  v7 = *((int *)this + 3);
  v8 = (_DWORD *)operator new[]();
  v9 = (char *)operator new[]();
  memset(v9, 255, 4 * v7);
  __src = (char *)operator new[]();
  v10 = operator new[]();
  v11 = (_DWORD *)operator new[]();
  v12 = operator new[]();
  v13 = operator new[]();
  v14 = v13;
  v15 = *((_DWORD *)this + 1);
  v91 = v11;
  if (!v15 || v7 <= v15)
  {
    *(_DWORD *)&v9[4 * v15] = 0;
    v93 = 1;
    goto LABEL_87;
  }
  v16 = 4 * v15;
  *(_DWORD *)(v10 + v16) = 0;
  *v11 = v15;
  v17 = 1;
  *(_DWORD *)&v9[v16] = 0;
  v85 = v4;
  v18 = *((unsigned int *)this + 5);
  v84 = 4 * v18;
  v19 = *((_QWORD *)this + 4);
  v20 = v11;
  v93 = 1;
  v89 = v13;
  v90 = v12;
  v87 = v9;
  v88 = v10;
  while (2)
  {
    v86 = v20;
    v21 = *v20;
    v22 = *(_DWORD *)&v9[4 * v21];
    if ((int)v18 >= 1)
    {
      v23 = v17;
      v24 = v18;
      memset_pattern16(&__src[v22 * (uint64_t)v5 + 4], &unk_1C385A5C0, v84);
      v18 = v24;
      v17 = v23;
    }
    v25 = 0;
    v26 = 0;
    v27 = (int *)&__src[v22 * (uint64_t)v5];
    *v27 = 48;
    *v8 = v21;
    v8[1] = 0;
    v28 = 1;
    v9 = v87;
    v10 = v88;
    v12 = v90;
    v29 = v91;
    v14 = v89;
LABEL_17:
    v31 = v28 - 1;
    v32 = &v8[2 * (v28 - 1)];
    v33 = *v32;
    v34 = (unsigned int *)(v19 + 8 * v33);
    v35 = *v34;
    v37 = v32 + 1;
    v36 = v32[1];
    switch(v35 & 7)
    {
      case 0uLL:
      case 1uLL:
        v38 = v35 >> 3;
        v39 = v35 >= 8 && v7 > v38;
        if (!v39)
          goto LABEL_26;
        v40 = *(int *)(v90 + 4 * v38);
        if (v40 < v25 && *(_DWORD *)(v89 + 4 * v40) == (_DWORD)v38)
          goto LABEL_88;
        *(_DWORD *)(v90 + 4 * v38) = v25;
        *(_DWORD *)(v89 + 4 * (int)v25++) = v38;
LABEL_26:
        v41 = v19 + 8 * v33;
        v44 = *(_DWORD *)(v41 + 4);
        v43 = (signed int *)(v41 + 4);
        v42 = v44;
        if (v44)
          v45 = v7 > v42;
        else
          v45 = 0;
        if (!v45)
          goto LABEL_34;
        v46 = *(int *)(v90 + 4 * v42);
        if (v46 >= v25 || *(_DWORD *)(v89 + 4 * v46) != v42)
        {
          *(_DWORD *)(v90 + 4 * v42) = v25;
          *(_DWORD *)(v89 + 4 * (int)v25++) = v42;
          v42 = *v43;
LABEL_34:
          *v32 = v42;
          *v37 = v36;
          v47 = &v8[2 * v28++];
          *v47 = *v34 >> 3;
          v47[1] = v36;
          goto LABEL_16;
        }
        goto LABEL_88;
      case 2uLL:
        if (*(_DWORD *)&v87[4 * (v35 >> 3)] != -1)
        {
          v48 = v93;
          v93 = *(_DWORD *)&v87[4 * (v35 >> 3)];
LABEL_60:
          if ((v26 & 1) != 0)
            v36 |= 0x40u;
          v57 = v19 + 8 * v33;
          v60 = *(unsigned __int8 *)(v57 + 4);
          v59 = (unsigned __int8 *)(v57 + 4);
          v58 = v60;
          v61 = *((unsigned __int8 *)v34 + 5);
          if (v60 <= v61)
          {
            v64 = *((_QWORD *)this + 70);
            v65 = v36 | (v93 << 16);
            do
            {
              v66 = *((unsigned __int8 *)this + v58 + 304);
              v67 = *(unsigned __int8 *)(v64 + v66);
              v68 = &v27[v66];
              v71 = v68[1];
              v69 = v68 + 1;
              v70 = v71;
              if ((~v71 & 0x30) != 0)
              {
                if (v70 != v65)
                  goto LABEL_88;
              }
              else
              {
                *v69 = v65;
                LOBYTE(v61) = *((_BYTE *)v34 + 5);
              }
              v58 = v67 + 1;
            }
            while (v67 < v61);
          }
          if (*((_BYTE *)v34 + 6))
          {
            if (*v59 <= 0x61u)
              v62 = 97;
            else
              v62 = *v59;
            v63 = v61;
            if (v61 >= 0x7Au)
              v63 = 122;
            if (v62 <= v63)
            {
              v72 = v63 - 32;
              v73 = v62 - 32;
              v74 = *((_QWORD *)this + 70);
              v75 = v36 | (v93 << 16);
              do
              {
                v76 = *((unsigned __int8 *)this + v73 + 304);
                v77 = *(unsigned __int8 *)(v74 + v76);
                v78 = &v27[v76];
                v81 = v78[1];
                v80 = v78 + 1;
                v79 = v81;
                if ((~v81 & 0x30) != 0)
                {
                  if (v79 != v75)
                    goto LABEL_88;
                }
                else
                {
                  *v80 = v75;
                }
                v73 = v77 + 1;
              }
              while (v72 > v77);
            }
          }
          v93 = v48;
LABEL_71:
          v28 = v31;
LABEL_16:
          if (v28 <= 0)
          {
            v20 = v86 + 1;
            if (v86 + 1 == &v91[(int)v17])
            {
LABEL_87:
              v82 = v93 * v5;
              v83 = (char *)operator new[]();
              memcpy(v83, __src, v82);
              MEMORY[0x1C3BD4840](__src, 0x1000C8077774924);
              *((_QWORD *)this + 72) = &v83[*(int *)&v9[4 * *((int *)this + 1)] * (uint64_t)v5];
              *((_QWORD *)this + 71) = v83;
              *((_DWORD *)this + 7) = v5;
              *((_QWORD *)this + 32) -= v82;
              MEMORY[0x1C3BD4840](v8, 0x1000C8000313F17);
              MEMORY[0x1C3BD4840](v9, 0x1000C8052888210);
              v2 = 1;
              v29 = v91;
              goto LABEL_89;
            }
            continue;
          }
          goto LABEL_17;
        }
        if (v93 < v85)
        {
          *(_DWORD *)&v87[4 * (v35 >> 3)] = v93;
          v48 = v93 + 1;
          v53 = *v34;
          v54 = v53 >> 3;
          if (v53 >= 8 && v7 > v54)
          {
            v56 = *(int *)(v88 + 4 * v54);
            if (v56 >= v17 || v91[v56] != (_DWORD)v54)
            {
              *(_DWORD *)(v88 + 4 * v54) = v17;
              v91[(int)v17] = v54;
              v17 = (v17 + 1);
            }
          }
          goto LABEL_60;
        }
LABEL_88:
        MEMORY[0x1C3BD4840](v8, 0x1000C8000313F17);
        MEMORY[0x1C3BD4840](v87, 0x1000C8052888210);
        MEMORY[0x1C3BD4840](__src, 0x1000C8077774924);
        v2 = 0;
LABEL_89:
        MEMORY[0x1C3BD4840](v12, 0x1000C8052888210);
        MEMORY[0x1C3BD4840](v14, 0x1000C8052888210);
        MEMORY[0x1C3BD4840](v10, 0x1000C8052888210);
        MEMORY[0x1C3BD4840](v29, 0x1000C8052888210);
        return v2;
      case 3uLL:
        v49 = *(_DWORD *)(v19 + 8 * v33 + 4);
        v39 = v49 <= 9;
        v50 = (32 << v49) | v36;
        if (v39)
          v36 = v50;
        goto LABEL_41;
      case 4uLL:
        v36 |= *(_DWORD *)(v19 + 8 * v33 + 4);
        goto LABEL_41;
      case 5uLL:
        if ((v26 & 1) != 0)
          goto LABEL_88;
        *v27 = v36;
        v26 = 1;
        goto LABEL_71;
      case 6uLL:
LABEL_41:
        v30 = v35 >> 3;
        if (v35 < 8 || v7 <= v30)
          goto LABEL_15;
        v52 = *(int *)(v90 + 4 * v30);
        if (v52 < v25 && *(_DWORD *)(v89 + 4 * v52) == v30)
          goto LABEL_88;
        *(_DWORD *)(v90 + 4 * v30) = v25;
        *(_DWORD *)(v89 + 4 * (int)v25++) = v30;
        v30 = *v34 >> 3;
LABEL_15:
        *v32 = v30;
        *v37 = v36;
        goto LABEL_16;
      default:
        goto LABEL_71;
    }
  }
}

void sub_1C366E24C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a12);
  va_start(va, a12);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  re2::SparseSet::~SparseSet((re2::SparseSet *)va);
  re2::SparseSet::~SparseSet((re2::SparseSet *)va1);
  _Unwind_Resume(a1);
}

void re2::SparseSet::~SparseSet(re2::SparseSet *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 1);
  if (v2)
    MEMORY[0x1C3BD4840](v2, 0x1000C8052888210);
  v3 = *((_QWORD *)this + 2);
  if (v3)
    MEMORY[0x1C3BD4840](v3, 0x1000C8052888210);
}

void finishSuggestionsSetup(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  _QWORD block[4];
  id v12;
  id v13;

  v3 = a1;
  v4 = a2;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __finishSuggestionsSetup_block_invoke;
  block[3] = &unk_1E7DB6A30;
  v12 = v3;
  v13 = v4;
  v5 = finishSuggestionsSetup_onceFlag;
  v6 = v4;
  v7 = v3;
  v10 = v7;
  if (v5 == -1)
  {
    v8 = v7;
    v9 = v6;
  }
  else
  {
    dispatch_once(&finishSuggestionsSetup_onceFlag, block);
    v8 = v12;
    v9 = v13;
  }

}

void retrySuggestionsInitializationWhenUnlocked()
{
  uint64_t v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0D81590], "registerForLockStateChangeNotifications:", &__block_literal_global_43);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)retrySuggestionsInitializationWhenUnlocked_lockStateToken;
  retrySuggestionsInitializationWhenUnlocked_lockStateToken = v0;

}

void __retrySuggestionsInitializationWhenUnlocked_block_invoke(uint64_t a1, int a2)
{
  void *v2;
  BOOL v3;
  id v4;

  if (!a2)
  {
    +[SGSqlEntityStore defaultHarvestStore](SGSqlEntityStore, "defaultHarvestStore");
    v4 = (id)objc_claimAutoreleasedReturnValue();
    +[SGSqlEntityStore defaultStore](SGSqlEntityStore, "defaultStore");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    if (v4)
      v3 = v2 == 0;
    else
      v3 = 1;
    if (!v3)
    {
      objc_msgSend(MEMORY[0x1E0D81590], "unregisterForLockStateChangeNotifications:", retrySuggestionsInitializationWhenUnlocked_lockStateToken);
      finishSuggestionsSetup(v4, v2);
    }

  }
}

void __finishSuggestionsSetup_block_invoke(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  SGDSuggestManager *v6;
  SGDSuggestManager *v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  SGDSpotlightReceiver *v13;
  void *v14;
  void *v15;
  void *v16;
  _QWORD v17[4];
  id v18;
  uint8_t buf[4];
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  sgLogHandle();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)buf = 138412546;
    v20 = v3;
    v21 = 2112;
    v22 = v4;
    _os_log_impl(&dword_1C3607000, v2, OS_LOG_TYPE_DEFAULT, "Running finishSuggestionsSetup (harvestStore=%@, defaultStore=%@)", buf, 0x16u);
  }

  +[SGDManagerForCTS sharedSingletonInstance](SGDManagerForCTS, "sharedSingletonInstance");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = -[SGDSuggestManager initWithStore:]([SGDSuggestManager alloc], "initWithStore:", *(_QWORD *)(a1 + 32));
  -[SGDSuggestManager registerForCoreSpotlightIndexing](v6, "registerForCoreSpotlightIndexing");
  v7 = -[SGDSuggestManager initWithStore:]([SGDSuggestManager alloc], "initWithStore:", *(_QWORD *)(a1 + 40));
  objc_msgSend(MEMORY[0x1E0D19970], "setInProcessSuggestManager:", v7);
  objc_msgSend(MEMORY[0x1E0D80F80], "addContentAdmissionObserver:", v7);
  -[SGDSuggestManager registerForProactiveHarvesting](v6, "registerForProactiveHarvesting");
  v8 = +[SGDocumentUnderstandingConsumer sharedInstance](SGDocumentUnderstandingConsumer, "sharedInstance");
  v9 = +[SGAutonamingConsumer sharedInstance](SGAutonamingConsumer, "sharedInstance");
  objc_msgSend(*(id *)(a1 + 32), "registerCachePrecomputationWithCTS");
  v10 = (void *)MEMORY[0x1E0D81598];
  dispatch_get_global_queue(-32768, 0);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v17[0] = MEMORY[0x1E0C809B0];
  v17[1] = 3221225472;
  v17[2] = __finishSuggestionsSetup_block_invoke_28;
  v17[3] = &unk_1E7DB56F0;
  v18 = v5;
  v12 = v5;
  objc_msgSend(v10, "runAsyncOnQueue:afterDelaySeconds:block:", v11, v17, 5.0);

  v13 = -[SGDSpotlightReceiver initWithManager:]([SGDSpotlightReceiver alloc], "initWithManager:", v6);
  SpotlightReceiverRegister();

  HVBatteryMonitoringStart();
  +[SGDCloudKitSync sharedInstance](SGDCloudKitSync, "sharedInstance");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "setReadyForNewEntities:", 1);

  v15 = (void *)MEMORY[0x1E0D81598];
  dispatch_get_global_queue(5, 0);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "runAsyncOnQueue:afterDelaySeconds:block:", v16, &__block_literal_global_33, 6.0);

}

uint64_t __finishSuggestionsSetup_block_invoke_28()
{
  _QWORD v1[4];
  char v2;

  v1[0] = MEMORY[0x1E0C809B0];
  v1[1] = 3221225472;
  v1[2] = ___registerEnableDisablePreferenceChangeListener_block_invoke;
  v1[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 1;
  return objc_msgSend(MEMORY[0x1E0D198F0], "registerBlockOnSuggestionsSettingsChange:", v1);
}

id __finishSuggestionsSetup_block_invoke_2()
{
  return +[SGDSpotlightCommander sharedInstance](SGDSpotlightCommander, "sharedInstance");
}

void sub_1C36707E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C36708C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__5510(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__5511(uint64_t a1)
{

}

void SGDExit(uint64_t a1)
{
  unsigned __int8 v1;
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;

  do
    v1 = __ldaxr(SGDExit_exitFlag);
  while (__stlxr(1u, SGDExit_exitFlag));
  if ((v1 & 1) != 0)
  {
    while (1)
      pause();
  }
  v3 = (void *)objc_opt_new();
  objc_msgSend(v3, "setExitCode:", a1);
  objc_msgSend(MEMORY[0x1E0D80F28], "sharedInstance");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "trackScalarForMessage:", v3);

  v5 = objc_alloc(MEMORY[0x1E0CB3940]);
  v6 = *MEMORY[0x1E0D19D98];
  objc_msgSend(v3, "key");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "initWithFormat:", CFSTR("%@.%@"), v6, v7);

  objc_msgSend(v3, "dictionaryRepresentation");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  AnalyticsSendEvent();

  usleep(0x7A120u);
  _exit(a1);
}

void re2::Compiler::~Compiler(re2::Compiler *this)
{
  re2::Compiler::~Compiler(this);
  JUMPOUT(0x1C3BD4858);
}

{
  re2::Prog *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E7DA9DE8;
  v2 = (re2::Prog *)*((_QWORD *)this + 3);
  if (v2)
  {
    re2::Prog::~Prog(v2);
    MEMORY[0x1C3BD4858]();
  }
  v3 = *((_QWORD *)this + 6);
  if (v3)
    MEMORY[0x1C3BD4840](v3, 0x1000C8000313F17);
  std::__tree<std::__value_type<unsigned long long,int>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,int>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,int>>>::destroy(*((_QWORD **)this + 10));
  *(_QWORD *)this = off_1E7DA9E50;
  re2::Regexp::Walker<re2::Frag>::Reset((uint64_t)this);
  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    v5 = std::deque<re2::WalkState<re2::Frag>>::~deque[abi:ne180100](v4);
    MEMORY[0x1C3BD4858](v5, 0x1080C40BE8D5F09);
  }
}

uint64_t re2::Compiler::PreVisit(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  if (*(_BYTE *)(a1 + 32))
    *a4 = 1;
  return 0;
}

unint64_t re2::Compiler::PostVisit(re2::Compiler *this, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, int a6)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  int v22;
  _QWORD *v23;
  int v24;
  BOOL v25;
  int v26;
  int v27;
  unsigned __int8 *v28;
  int v29;
  _BOOL4 v30;
  _QWORD *v31;
  int *v32;
  int v33;
  int v34;
  unsigned int v35;
  unsigned __int8 v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  void *v42;
  _QWORD v43[33];

  if (!*((_BYTE *)this + 32))
  {
    LODWORD(v6) = 0;
    LODWORD(v7) = 0;
    switch(*(_BYTE *)a2)
    {
      case 1:
        return v7 | ((unint64_t)v6 << 32);
      case 2:
        goto LABEL_11;
      case 3:
        v10 = re2::Compiler::Literal(this, *(_DWORD *)(a2 + 24), *(_WORD *)(a2 + 2) & 1);
        goto LABEL_50;
      case 4:
        v11 = *(_DWORD *)(a2 + 24);
        if (!v11)
        {
LABEL_11:
          v10 = re2::Compiler::Nop(this);
          goto LABEL_50;
        }
        if (v11 < 1)
          goto LABEL_2;
        v12 = re2::Compiler::Literal(this, **(_DWORD **)(a2 + 32), *(_WORD *)(a2 + 2) & 1);
        LODWORD(v7) = v12;
        v6 = HIDWORD(v12);
        if (*(int *)(a2 + 24) >= 2)
        {
          v13 = 1;
          do
          {
            v14 = re2::Compiler::Literal(this, *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4 * v13), *(_WORD *)(a2 + 2) & 1);
            v15 = re2::Compiler::Cat((uint64_t)this, v7 | ((unint64_t)v6 << 32), v14);
            LODWORD(v7) = v15;
            v6 = HIDWORD(v15);
            ++v13;
          }
          while (v13 < *(int *)(a2 + 24));
        }
        return v7 | ((unint64_t)v6 << 32);
      case 5:
        if (!a5)
        {
          LogMessage::LogMessage((LogMessage *)&v42);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"kRegexpConcat: child_frags is NULL", 34);
          goto LABEL_82;
        }
        v7 = *a5;
        if (a6 >= 2)
        {
          v16 = a6 - 1;
          v17 = a5 + 1;
          do
          {
            v18 = *v17++;
            v7 = re2::Compiler::Cat((uint64_t)this, v7, v18);
            --v16;
          }
          while (v16);
        }
        goto LABEL_32;
      case 6:
        if (!a5)
        {
          LogMessage::LogMessage((LogMessage *)&v42);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"kRegexpAlternate child_frags is NULL", 36);
          goto LABEL_82;
        }
        v7 = *a5;
        if (a6 >= 2)
        {
          v19 = a6 - 1;
          v20 = a5 + 1;
          do
          {
            v21 = *v20++;
            v7 = re2::Compiler::Alt((uint64_t)this, v7, v21);
            --v19;
          }
          while (v19);
        }
        goto LABEL_32;
      case 7:
        if (a5)
        {
          v10 = re2::Compiler::Star((uint64_t)this, *a5, (*(unsigned __int16 *)(a2 + 2) >> 6) & 1);
          goto LABEL_50;
        }
        LogMessage::LogMessage((LogMessage *)&v42);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"kRegexpStar child_frags is NULL", 31);
        goto LABEL_82;
      case 8:
        if (a5)
        {
          v7 = *a5;
          v6 = re2::Compiler::Star((uint64_t)this, *a5, (*(unsigned __int16 *)(a2 + 2) >> 6) & 1) >> 32;
          return v7 | ((unint64_t)v6 << 32);
        }
        LogMessage::LogMessage((LogMessage *)&v42);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"kRegexpPlus child_frags is NULL", 31);
        goto LABEL_82;
      case 9:
        if (a5)
        {
          v10 = re2::Compiler::Quest(this, *a5, (*(_WORD *)(a2 + 2) & 0x40) != 0);
          goto LABEL_50;
        }
        LogMessage::LogMessage((LogMessage *)&v42);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"kRegexpQuest child_frags is NULL", 32);
        goto LABEL_82;
      case 0xB:
        if (a5)
        {
          v22 = *(_DWORD *)(a2 + 24);
          v7 = *a5;
          if ((v22 & 0x80000000) == 0)
          {
            v10 = re2::Compiler::Capture((uint64_t)this, *a5, v22);
            goto LABEL_50;
          }
LABEL_32:
          v6 = HIDWORD(v7);
        }
        else
        {
          LogMessage::LogMessage((LogMessage *)&v42);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"kRegexpCapture child_frags is NULL", 34);
LABEL_82:
          LogMessage::~LogMessage(&v42);
          LODWORD(v6) = 0;
          LODWORD(v7) = 0;
          *((_BYTE *)this + 32) = 1;
        }
        return v7 | ((unint64_t)v6 << 32);
      case 0xC:
        v23 = (_QWORD *)((char *)this + 80);
        std::__tree<std::__value_type<unsigned long long,int>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,int>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,int>>>::destroy(*((_QWORD **)this + 10));
        *((_QWORD *)this + 9) = v23;
        *((_QWORD *)this + 11) = 0;
        *((_QWORD *)this + 12) = 0;
        *v23 = 0;
        re2::Compiler::AddRuneRange(this, 0, 1114111, 0);
        goto LABEL_34;
      case 0xD:
        v10 = re2::Compiler::ByteRange(this, 0, 255, 0);
        goto LABEL_50;
      case 0xE:
        if (*((_BYTE *)this + 40))
          v24 = 2;
        else
          v24 = 1;
        goto LABEL_49;
      case 0xF:
        if (*((_BYTE *)this + 40))
          v24 = 1;
        else
          v24 = 2;
        goto LABEL_49;
      case 0x10:
        v24 = 16;
        goto LABEL_49;
      case 0x11:
        v24 = 32;
        goto LABEL_49;
      case 0x12:
        v25 = *((_BYTE *)this + 40) == 0;
        v26 = 8;
        v27 = 4;
        goto LABEL_46;
      case 0x13:
        v25 = *((_BYTE *)this + 40) == 0;
        v26 = 4;
        v27 = 8;
LABEL_46:
        if (v25)
          v24 = v27;
        else
          v24 = v26;
LABEL_49:
        v10 = re2::Compiler::EmptyWidth((uint64_t)this, v24);
        goto LABEL_50;
      case 0x14:
        v28 = *(unsigned __int8 **)(a2 + 24);
        if (!*((_DWORD *)v28 + 1))
        {
          LogMessage::LogMessage((LogMessage *)&v42);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"No ranges in char class", 23);
          LogMessage::~LogMessage(&v42);
          LODWORD(v7) = 0;
          *((_BYTE *)this + 32) = 1;
          LODWORD(v6) = 0;
          return v7 | ((unint64_t)v6 << 32);
        }
        v29 = *v28;
        v30 = *v28 != 0;
        v31 = (_QWORD *)((char *)this + 80);
        std::__tree<std::__value_type<unsigned long long,int>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,int>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,int>>>::destroy(*((_QWORD **)this + 10));
        *((_QWORD *)this + 9) = (char *)this + 80;
        *v31 = 0;
        *((_QWORD *)this + 11) = 0;
        *((_QWORD *)this + 12) = 0;
        if (!*((_DWORD *)v28 + 4))
        {
          LODWORD(v7) = 0;
          LODWORD(v6) = 0;
          return v7 | ((unint64_t)v6 << 32);
        }
        v32 = (int *)*((_QWORD *)v28 + 1);
        break;
      case 0x15:
        v7 = re2::Compiler::Match(this, *(_DWORD *)(a2 + 24));
        if (*((_DWORD *)this + 26) == 2)
        {
          LODWORD(v6) = 0;
        }
        else
        {
          v38 = re2::Compiler::DotStar(this);
          v39 = re2::Compiler::EmptyWidth((uint64_t)this, 8);
          v40 = re2::Compiler::Cat((uint64_t)this, v39, v7);
          v10 = re2::Compiler::Cat((uint64_t)this, v38, v40);
LABEL_50:
          LODWORD(v7) = v10;
          v6 = HIDWORD(v10);
        }
        return v7 | ((unint64_t)v6 << 32);
      default:
        LogMessage::LogMessage((LogMessage *)&v42);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"Missing case in Compiler: ", 26);
        std::ostream::operator<<();
        goto LABEL_82;
    }
    while (1)
    {
      v33 = *v32;
      if (!v29)
        break;
      if (v33 < 65)
        goto LABEL_60;
      if (v32[1] >= 91)
        break;
LABEL_55:
      v32 += 2;
      if (v32 == (int *)(*((_QWORD *)v28 + 1) + 8 * *((int *)v28 + 4)))
      {
LABEL_34:
        v7 = *((_QWORD *)this + 12);
        v6 = HIDWORD(v7);
        return v7 | ((unint64_t)v6 << 32);
      }
    }
    if (v33 >= 66)
    {
      v34 = v32[1];
      if (v33 <= 122)
        goto LABEL_63;
    }
    else
    {
LABEL_60:
      v34 = v32[1];
      if (v34 <= 121)
      {
LABEL_63:
        v35 = v30;
        if (v34 > 64)
          goto LABEL_65;
      }
    }
    v35 = 0;
LABEL_65:
    if (*((_DWORD *)this + 9) == 2)
    {
      if (v33 <= 255 && v33 <= v34)
      {
        if (v34 >= 255)
          v36 = -1;
        else
          v36 = v34;
        v37 = re2::Compiler::RuneByteSuffix(this, *v32, v36, v35, 0);
        re2::Compiler::AddSuffix(this, v37);
      }
    }
    else
    {
      re2::Compiler::AddRuneRangeUTF8(this, v33, v34, v35);
    }
    goto LABEL_55;
  }
LABEL_2:
  LODWORD(v6) = 0;
  LODWORD(v7) = 0;
  return v7 | ((unint64_t)v6 << 32);
}

void sub_1C36713C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  LogMessage::~LogMessage(&a9);
  _Unwind_Resume(a1);
}

uint64_t re2::Compiler::Copy(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;
  void *v8;
  uint64_t v9;
  uint64_t v10[8];
  __int128 v11;
  __int128 v12;
  int v13;
  uint64_t v14;

  LOBYTE(v8) = 0;
  v2 = MEMORY[0x1E0DE4FE0];
  v3 = MEMORY[0x1E0DE4FE0] + 64;
  v4 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v14 = MEMORY[0x1E0DE4FE0] + 64;
  v9 = v4;
  *(uint64_t *)((char *)&v10[-1] + *(_QWORD *)(v4 - 24)) = v5;
  v6 = (std::ios_base *)((char *)&v10[-1] + *(_QWORD *)(v9 - 24));
  std::ios_base::init(v6, v10);
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  v9 = v2 + 24;
  v14 = v3;
  std::streambuf::basic_streambuf();
  v10[0] = MEMORY[0x1E0DE4FB8] + 16;
  v11 = 0u;
  v12 = 0u;
  v13 = 16;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)"Compiler::Copy called!", 22);
  LogMessage::~LogMessage(&v8);
  *(_BYTE *)(a1 + 32) = 1;
  return 0;
}

void sub_1C36714F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  LogMessage::~LogMessage(&a9);
  _Unwind_Resume(a1);
}

void sub_1C3671508(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1C3BD4828](v1 + 120);
  _Unwind_Resume(a1);
}

uint64_t re2::Compiler::ShortVisit(uint64_t a1)
{
  *(_BYTE *)(a1 + 32) = 1;
  return 0;
}

uint64_t re2::Compiler::Nop(re2::Compiler *this)
{
  uint64_t v2;
  int v3;
  char *v4;
  char *v5;
  const void *v6;
  uint64_t v7;

  if (*((_BYTE *)this + 32) || (v2 = *((unsigned int *)this + 14), (int)v2 >= *((_DWORD *)this + 11)))
  {
    v7 = 0;
    LODWORD(v2) = 0;
    *((_BYTE *)this + 32) = 1;
  }
  else
  {
    v3 = *((_DWORD *)this + 15);
    if ((int)v2 >= v3)
    {
      if (!v3)
      {
        v3 = 8;
        *((_DWORD *)this + 15) = 8;
      }
      if ((int)v2 >= v3)
      {
        do
          v3 *= 2;
        while ((int)v2 >= v3);
        *((_DWORD *)this + 15) = v3;
      }
      v4 = (char *)operator new[]();
      v5 = v4;
      if (v3)
        bzero(v4, 8 * v3);
      v6 = (const void *)*((_QWORD *)this + 6);
      v2 = *((int *)this + 14);
      memmove(v5, v6, 8 * v2);
      bzero(&v5[8 * v2], 8 * (*((_DWORD *)this + 15) - (int)v2));
      if (v6)
      {
        MEMORY[0x1C3BD4840](v6, 0x1000C8000313F17);
        v2 = *((unsigned int *)this + 14);
      }
      *((_QWORD *)this + 6) = v5;
    }
    *((_DWORD *)this + 14) = v2 + 1;
    if ((v2 & 0x80000000) != 0)
    {
      v7 = 0;
      LODWORD(v2) = 0;
    }
    else
    {
      *(_DWORD *)(*((_QWORD *)this + 6) + 8 * v2) = *(_DWORD *)(*((_QWORD *)this + 6)
                                                                              + 8 * v2) & 0xFFFFFFF8 | 6;
      v7 = v2 << 33;
    }
  }
  return v7 | v2;
}

uint64_t re2::Compiler::Match(re2::Compiler *this, unsigned int a2)
{
  uint64_t v3;
  int v5;
  char *v6;
  char *v7;
  const void *v8;
  unsigned int *v9;

  if (*((_BYTE *)this + 32) || (LODWORD(v3) = *((_DWORD *)this + 14), (int)v3 >= *((_DWORD *)this + 11)))
  {
    LODWORD(v3) = 0;
    *((_BYTE *)this + 32) = 1;
  }
  else
  {
    v5 = *((_DWORD *)this + 15);
    if ((int)v3 >= v5)
    {
      if (!v5)
      {
        v5 = 8;
        *((_DWORD *)this + 15) = 8;
      }
      if ((int)v3 >= v5)
      {
        do
          v5 *= 2;
        while ((int)v3 >= v5);
        *((_DWORD *)this + 15) = v5;
      }
      v6 = (char *)operator new[]();
      v7 = v6;
      if (v5)
        bzero(v6, 8 * v5);
      v8 = (const void *)*((_QWORD *)this + 6);
      v3 = *((int *)this + 14);
      memmove(v7, v8, 8 * v3);
      bzero(&v7[8 * v3], 8 * (*((_DWORD *)this + 15) - (int)v3));
      if (v8)
      {
        MEMORY[0x1C3BD4840](v8, 0x1000C8000313F17);
        LODWORD(v3) = *((_DWORD *)this + 14);
      }
      *((_QWORD *)this + 6) = v7;
    }
    *((_DWORD *)this + 14) = v3 + 1;
    if ((v3 & 0x80000000) != 0)
    {
      LODWORD(v3) = 0;
    }
    else
    {
      v9 = (unsigned int *)(*((_QWORD *)this + 6) + 8 * v3);
      *v9 = *v9 & 0xFFFFFFF8 | 5;
      v9[1] = a2;
    }
  }
  return v3;
}

unint64_t re2::Compiler::DotStar(re2::Compiler *this)
{
  unint64_t v2;

  v2 = re2::Compiler::ByteRange(this, 0, 255, 0);
  return re2::Compiler::Star((uint64_t)this, v2, 1);
}

uint64_t re2::Compiler::EmptyWidth(uint64_t a1, int a2)
{
  uint64_t v3;
  int v5;
  char *v6;
  char *v7;
  const void *v8;
  uint64_t v9;
  _DWORD *v10;
  int v11;
  int v12;
  int v15;
  unsigned int v16;
  int v17;
  int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v25;

  if (*(_BYTE *)(a1 + 32) || (v3 = *(unsigned int *)(a1 + 56), (int)v3 >= *(_DWORD *)(a1 + 44)))
  {
    v23 = 0;
    LODWORD(v3) = 0;
    *(_BYTE *)(a1 + 32) = 1;
  }
  else
  {
    v5 = *(_DWORD *)(a1 + 60);
    if ((int)v3 >= v5)
    {
      if (!v5)
      {
        v5 = 8;
        *(_DWORD *)(a1 + 60) = 8;
      }
      if ((int)v3 >= v5)
      {
        do
          v5 *= 2;
        while ((int)v3 >= v5);
        *(_DWORD *)(a1 + 60) = v5;
      }
      v6 = (char *)operator new[]();
      v7 = v6;
      if (v5)
        bzero(v6, 8 * v5);
      v8 = *(const void **)(a1 + 48);
      v9 = *(int *)(a1 + 56);
      memmove(v7, v8, 8 * v9);
      bzero(&v7[8 * v9], 8 * (*(_DWORD *)(a1 + 60) - (int)v9));
      if (v8)
      {
        MEMORY[0x1C3BD4840](v8, 0x1000C8000313F17);
        v9 = *(unsigned int *)(a1 + 56);
      }
      *(_QWORD *)(a1 + 48) = v7;
      v3 = v9;
    }
    *(_DWORD *)(a1 + 56) = v3 + 1;
    if ((v3 & 0x80000000) == 0)
    {
      v10 = (_DWORD *)(*(_QWORD *)(a1 + 48) + 8 * v3);
      *v10 = 4;
      v10[1] = a2;
      if ((a2 & 3) != 0)
        *(_DWORD *)(*(_QWORD *)(a1 + 24) + 272) |= 0x600u;
      if ((a2 & 0x30) == 0)
      {
LABEL_56:
        v23 = v3 << 33;
        return v23 | v3;
      }
      v11 = 0;
      while (2)
      {
        while (2)
        {
          v12 = v11;
          v15 = v11 - 48 < 0xA || (v11 & 0xDFu) - 65 < 0x1A || v11 == 95;
          if (v11 <= 255)
            v16 = 255;
          else
            v16 = v11;
          do
          {
            if (v16 == v11)
            {
              v25 = *(_QWORD *)(a1 + 24);
              if ((v12 - 1) <= 0xFE)
                *(_DWORD *)(v25 + 4 * ((v12 - 1) >> 5) + 272) |= 1 << (v12 - 1);
              if (v16 <= 0xFF)
                *(_DWORD *)(v25 + 4 * (v16 >> 5) + 272) |= 1 << v16;
              goto LABEL_56;
            }
            v17 = v11++;
            v20 = v11 - 48 < 0xA
               || (v11 & 0xDFu) - 65 < 0x1A
               || v11 == 95;
          }
          while (v15 == v20);
          v21 = *(_QWORD *)(a1 + 24);
          v22 = v12 - 1;
          if (v22 <= 0xFE)
          {
            *(_DWORD *)(v21 + 4 * (v22 >> 5) + 272) |= 1 << v22;
            if (v17 > 0xFF)
            {
LABEL_44:
              if (v17 < 255)
                continue;
              goto LABEL_56;
            }
          }
          else if (v17 > 0xFF)
          {
            goto LABEL_44;
          }
          break;
        }
        *(_DWORD *)(v21 + 4 * (v17 >> 5) + 272) |= 1 << v17;
        if (v17 < 255)
          continue;
        goto LABEL_56;
      }
    }
    v23 = 0;
    LODWORD(v3) = 0;
  }
  return v23 | v3;
}

unint64_t re2::Compiler::Cat(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  LODWORD(v3) = 0;
  v4 = 0;
  if ((_DWORD)a2 && (_DWORD)a3)
  {
    v3 = HIDWORD(a2);
    v5 = HIDWORD(a3);
    v6 = *(_QWORD *)(a1 + 48);
    if (HIDWORD(a2) == 2 * (_DWORD)a2 && *(_DWORD *)(v6 + 8 * a2) == 6)
    {
      if (HIDWORD(a2))
      {
        do
        {
          while (1)
          {
            v8 = v3 >> 1;
            if ((v3 & 1) == 0)
              break;
            v7 = v6 + 8 * v8;
            LODWORD(v3) = *(_DWORD *)(v7 + 4);
            *(_DWORD *)(v7 + 4) = a3;
            if (!(_DWORD)v3)
              goto LABEL_10;
          }
          v9 = 8 * v8;
          LODWORD(v3) = *(_DWORD *)(v6 + v9) >> 3;
          *(_DWORD *)(v6 + v9) = *(_DWORD *)(v6 + v9) & 7 | (8 * a3);
        }
        while ((_DWORD)v3);
      }
LABEL_10:
      v3 = HIDWORD(a3);
LABEL_11:
      v4 = a3;
      return v4 | ((unint64_t)v3 << 32);
    }
    if (*(_BYTE *)(a1 + 40))
    {
      if (HIDWORD(a3))
      {
        do
        {
          while (1)
          {
            v12 = v5 >> 1;
            if ((v5 & 1) == 0)
              break;
            v11 = v6 + 8 * v12;
            LODWORD(v5) = *(_DWORD *)(v11 + 4);
            *(_DWORD *)(v11 + 4) = a2;
            if (!(_DWORD)v5)
              goto LABEL_11;
          }
          v13 = 8 * v12;
          LODWORD(v5) = *(_DWORD *)(v6 + v13) >> 3;
          *(_DWORD *)(v6 + v13) = *(_DWORD *)(v6 + v13) & 7 | (8 * a2);
        }
        while ((_DWORD)v5);
      }
      goto LABEL_11;
    }
    if (HIDWORD(a2))
    {
      do
      {
        while (1)
        {
          v15 = v3 >> 1;
          if ((v3 & 1) == 0)
            break;
          v14 = v6 + 8 * v15;
          LODWORD(v3) = *(_DWORD *)(v14 + 4);
          *(_DWORD *)(v14 + 4) = a3;
          if (!(_DWORD)v3)
            goto LABEL_25;
        }
        v16 = 8 * v15;
        LODWORD(v3) = *(_DWORD *)(v6 + v16) >> 3;
        *(_DWORD *)(v6 + v16) = *(_DWORD *)(v6 + v16) & 7 | (8 * a3);
      }
      while ((_DWORD)v3);
    }
LABEL_25:
    v3 = HIDWORD(a3);
    v4 = a2;
  }
  return v4 | ((unint64_t)v3 << 32);
}

void LogMessage::LogMessage(LogMessage *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  std::ios_base *v8;

  *(_BYTE *)this = 0;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  *((_QWORD *)this + 1) = v2;
  v4 = (_QWORD *)((char *)this + 8);
  v5 = MEMORY[0x1E0DE4FE0];
  v6 = MEMORY[0x1E0DE4FE0] + 64;
  *((_QWORD *)this + 15) = MEMORY[0x1E0DE4FE0] + 64;
  v7 = (uint64_t *)((char *)this + 120);
  *(_QWORD *)((char *)this + *(_QWORD *)(v2 - 24) + 8) = v3;
  v8 = (std::ios_base *)((char *)this + *(_QWORD *)(*((_QWORD *)this + 1) - 24) + 8);
  std::ios_base::init(v8, (char *)this + 16);
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  *v4 = v5 + 24;
  *v7 = v6;
  std::streambuf::basic_streambuf();
  *((_QWORD *)this + 2) = MEMORY[0x1E0DE4FB8] + 16;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_DWORD *)this + 28) = 16;
}

void sub_1C3671C94(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1C3BD4828](v1);
  _Unwind_Resume(a1);
}

unint64_t re2::Compiler::Alt(uint64_t a1, unint64_t a2, unint64_t a3)
{
  int v3;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  int v9;
  char *v10;
  char *v11;
  const void *v12;
  _DWORD *v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  unint64_t v17;

  v3 = a3;
  v5 = HIDWORD(a3);
  if ((_DWORD)a2)
  {
    v6 = HIDWORD(a2);
    if ((_DWORD)a3)
    {
      if (*(_BYTE *)(a1 + 32) || (LODWORD(v8) = *(_DWORD *)(a1 + 56), (int)v8 >= *(_DWORD *)(a1 + 44)))
      {
        v6 = 0;
        LODWORD(v8) = 0;
        *(_BYTE *)(a1 + 32) = 1;
      }
      else
      {
        v9 = *(_DWORD *)(a1 + 60);
        if ((int)v8 >= v9)
        {
          if (!v9)
          {
            v9 = 8;
            *(_DWORD *)(a1 + 60) = 8;
          }
          if ((int)v8 >= v9)
          {
            do
              v9 *= 2;
            while ((int)v8 >= v9);
            *(_DWORD *)(a1 + 60) = v9;
          }
          v10 = (char *)operator new[]();
          v11 = v10;
          if (v9)
            bzero(v10, 8 * v9);
          v12 = *(const void **)(a1 + 48);
          v8 = *(int *)(a1 + 56);
          memmove(v11, v12, 8 * v8);
          bzero(&v11[8 * v8], 8 * (*(_DWORD *)(a1 + 60) - (int)v8));
          if (v12)
          {
            MEMORY[0x1C3BD4840](v12, 0x1000C8000313F17);
            LODWORD(v8) = *(_DWORD *)(a1 + 56);
          }
          *(_QWORD *)(a1 + 48) = v11;
        }
        *(_DWORD *)(a1 + 56) = v8 + 1;
        if ((v8 & 0x80000000) != 0)
        {
          v6 = 0;
          LODWORD(v8) = 0;
        }
        else
        {
          v13 = (_DWORD *)(*(_QWORD *)(a1 + 48) + 8 * v8);
          *v13 = 8 * a2;
          v13[1] = v3;
          if (v6)
          {
            if ((_DWORD)v5)
            {
              v14 = *(_QWORD *)(a1 + 48);
              v15 = HIDWORD(a2);
              do
              {
                while (1)
                {
                  v16 = v15;
                  v17 = v15 >> 1;
                  if ((v15 & 1) != 0)
                    break;
                  v15 = (unint64_t)*(unsigned int *)(v14 + 8 * v17) >> 3;
                  if (!v15)
                    goto LABEL_25;
                }
                v15 = *(unsigned int *)(v14 + 8 * v17 + 4);
              }
              while (*(_DWORD *)(v14 + 8 * v17 + 4));
LABEL_25:
              if ((v16 & 1) != 0)
                *(_DWORD *)(v14 + 8 * v17 + 4) = v5;
              else
                *(_DWORD *)(v14 + 8 * v17) = *(_DWORD *)(v14 + 8 * v17) & 7 | (8 * v5);
            }
          }
          else
          {
            v6 = v5;
          }
        }
      }
    }
    else
    {
      LODWORD(v8) = a2;
    }
  }
  else
  {
    v6 = HIDWORD(a3);
    LODWORD(v8) = a3;
  }
  return v8 | (v6 << 32);
}

unint64_t re2::Compiler::Star(uint64_t a1, unint64_t a2, int a3)
{
  uint64_t v4;
  int v7;
  char *v8;
  char *v9;
  const void *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (*(_BYTE *)(a1 + 32) || (LODWORD(v4) = *(_DWORD *)(a1 + 56), (int)v4 >= *(_DWORD *)(a1 + 44)))
  {
    v16 = 0;
    LODWORD(v4) = 0;
    *(_BYTE *)(a1 + 32) = 1;
  }
  else
  {
    v7 = *(_DWORD *)(a1 + 60);
    if ((int)v4 >= v7)
    {
      if (!v7)
      {
        v7 = 8;
        *(_DWORD *)(a1 + 60) = 8;
      }
      if ((int)v4 >= v7)
      {
        do
          v7 *= 2;
        while ((int)v4 >= v7);
        *(_DWORD *)(a1 + 60) = v7;
      }
      v8 = (char *)operator new[]();
      v9 = v8;
      if (v7)
        bzero(v8, 8 * v7);
      v10 = *(const void **)(a1 + 48);
      v4 = *(int *)(a1 + 56);
      memmove(v9, v10, 8 * v4);
      bzero(&v9[8 * v4], 8 * (*(_DWORD *)(a1 + 60) - (int)v4));
      if (v10)
      {
        MEMORY[0x1C3BD4840](v10, 0x1000C8000313F17);
        LODWORD(v4) = *(_DWORD *)(a1 + 56);
      }
      *(_QWORD *)(a1 + 48) = v9;
    }
    *(_DWORD *)(a1 + 56) = v4 + 1;
    if ((v4 & 0x80000000) != 0)
    {
      v16 = 0;
      LODWORD(v4) = 0;
    }
    else
    {
      v11 = HIDWORD(a2);
      *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v4) = 0;
      v12 = *(_QWORD *)(a1 + 48);
      if (HIDWORD(a2))
      {
        do
        {
          while (1)
          {
            v14 = v11 >> 1;
            if ((v11 & 1) != 0)
              break;
            v13 = 8 * v14;
            LODWORD(v11) = *(_DWORD *)(v12 + v13) >> 3;
            *(_DWORD *)(v12 + v13) = *(_DWORD *)(v12 + v13) & 7 | (8 * v4);
            if (!(_DWORD)v11)
              goto LABEL_20;
          }
          v15 = v12 + 8 * v14;
          LODWORD(v11) = *(_DWORD *)(v15 + 4);
          *(_DWORD *)(v15 + 4) = v4;
        }
        while ((_DWORD)v11);
LABEL_20:
        v12 = *(_QWORD *)(a1 + 48);
      }
      if (a3)
      {
        *(_DWORD *)(v12 + 8 * v4 + 4) = a2;
        v16 = (2 * v4);
      }
      else
      {
        *(_DWORD *)(v12 + 8 * v4) = *(_DWORD *)(v12 + 8 * v4) & 7 | (8 * a2);
        v16 = (2 * (_DWORD)v4) | 1u;
      }
    }
  }
  return v4 | (unint64_t)(v16 << 32);
}

unint64_t re2::Compiler::Quest(re2::Compiler *this, unint64_t a2, char a3)
{
  uint64_t v5;
  int v7;
  char *v8;
  char *v9;
  const void *v10;
  uint64_t v11;
  _DWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  unint64_t v20;
  uint64_t v21;

  if (!(_DWORD)a2)
  {
    v14 = re2::Compiler::Nop(this);
    v13 = HIDWORD(v14);
    LODWORD(v5) = v14;
    return v5 | (v13 << 32);
  }
  if (*((_BYTE *)this + 32) || (LODWORD(v5) = *((_DWORD *)this + 14), (int)v5 >= *((_DWORD *)this + 11)))
  {
    v13 = 0;
    LODWORD(v5) = 0;
    *((_BYTE *)this + 32) = 1;
    return v5 | (v13 << 32);
  }
  v7 = *((_DWORD *)this + 15);
  if ((int)v5 >= v7)
  {
    if (!v7)
    {
      v7 = 8;
      *((_DWORD *)this + 15) = 8;
    }
    if ((int)v5 >= v7)
    {
      do
        v7 *= 2;
      while ((int)v5 >= v7);
      *((_DWORD *)this + 15) = v7;
    }
    v8 = (char *)operator new[]();
    v9 = v8;
    if (v7)
      bzero(v8, 8 * v7);
    v10 = (const void *)*((_QWORD *)this + 6);
    v5 = *((int *)this + 14);
    memmove(v9, v10, 8 * v5);
    bzero(&v9[8 * v5], 8 * (*((_DWORD *)this + 15) - (int)v5));
    if (v10)
    {
      MEMORY[0x1C3BD4840](v10, 0x1000C8000313F17);
      LODWORD(v5) = *((_DWORD *)this + 14);
    }
    *((_QWORD *)this + 6) = v9;
  }
  *((_DWORD *)this + 14) = v5 + 1;
  if ((v5 & 0x80000000) != 0)
  {
    v13 = 0;
    LODWORD(v5) = 0;
    return v5 | (v13 << 32);
  }
  v11 = *((_QWORD *)this + 6);
  v12 = (_DWORD *)(v11 + 8 * v5);
  if ((a3 & 1) != 0)
  {
    *v12 = 0;
    *(_DWORD *)(v11 + 8 * v5 + 4) = a2;
    v13 = HIDWORD(a2);
    if (!(_DWORD)v5)
      return v5 | (v13 << 32);
    v13 = (2 * v5);
  }
  else
  {
    *v12 = 8 * a2;
    *(_DWORD *)(v11 + 8 * v5 + 4) = 0;
    v13 = (2 * (_DWORD)v5) | 1u;
  }
  if (HIDWORD(a2))
  {
    v16 = *((_QWORD *)this + 6);
    v17 = v13;
    do
    {
      while (1)
      {
        v18 = v17;
        v19 = v17;
        v20 = (unint64_t)v17 >> 1;
        if ((v19 & 1) != 0)
          break;
        v17 = *(_DWORD *)(v16 + 8 * v20) >> 3;
        if (!v17)
          goto LABEL_29;
      }
      v17 = *(_DWORD *)(v16 + 8 * v20 + 4);
    }
    while (v17);
LABEL_29:
    v21 = v18 >> 1;
    if ((v18 & 1) != 0)
      *(_DWORD *)(v16 + 8 * v21 + 4) = HIDWORD(a2);
    else
      *(_DWORD *)(v16 + 8 * v21) = *(_DWORD *)(v16 + 8 * v21) & 7 | (8 * HIDWORD(a2));
  }
  return v5 | (v13 << 32);
}

unint64_t re2::Compiler::Literal(re2::Compiler *this, unsigned int a2, int a3)
{
  int v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  BOOL v11;
  int v12;
  char v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;

  v5 = *((_DWORD *)this + 9);
  if (v5 != 1)
  {
    if (v5 != 2)
    {
      v6 = 0;
      LODWORD(v7) = 0;
      return v7 | v6;
    }
LABEL_5:
    v8 = re2::Compiler::ByteRange(this, a2, a2, a3);
    LODWORD(v7) = v8;
    v6 = v8 & 0xFFFFFFFF00000000;
    return v7 | v6;
  }
  if ((int)a2 <= 127)
    goto LABEL_5;
  if (a2 > 0x7FF)
  {
    if (HIWORD(a2) <= 0x10u)
      v14 = a2;
    else
      v14 = 65533;
    v15 = HIWORD(v14);
    v16 = (v14 >> 18) | 0xF0;
    v17 = v14 >> 12;
    v18 = (v14 >> 6) & 0x3F | 0x80;
    v19 = v14 & 0x3F | 0x80;
    v20 = (v14 >> 12) | 0xE0;
    v21 = v14 >> 6;
    if (v15)
      v9 = v19;
    else
      v9 = 0;
    if (v15)
      v10 = v18;
    else
      v10 = v19;
    if (v15)
      v13 = v17;
    else
      v13 = v21;
    if (v15)
      LOBYTE(v12) = v16;
    else
      LOBYTE(v12) = v20;
    v11 = v15 == 0;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = (a2 >> 6) | 0xC0;
    v13 = a2;
  }
  v22 = re2::Compiler::ByteRange(this, v12, v12, 0);
  v23 = re2::Compiler::ByteRange(this, v13 & 0x3F | 0x80u, v13 & 0x3F | 0x80u, 0);
  v7 = re2::Compiler::Cat((uint64_t)this, v22, v23);
  if (a2 > 0x7FF)
  {
    v24 = re2::Compiler::ByteRange(this, v10, v10, 0);
    v7 = re2::Compiler::Cat((uint64_t)this, v7, v24);
    if (!v11)
    {
      v25 = re2::Compiler::ByteRange(this, v9, v9, 0);
      v7 = re2::Compiler::Cat((uint64_t)this, v7, v25);
    }
  }
  v6 = v7 & 0xFFFFFFFF00000000;
  return v7 | v6;
}

void std::__tree<std::__value_type<unsigned long long,int>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,int>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,int>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned long long,int>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,int>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,int>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned long long,int>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,int>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,int>>>::destroy(a1[1]);
    operator delete(a1);
  }
}

void re2::Compiler::AddRuneRange(re2::Compiler *this, int a2, int a3, unsigned int a4)
{
  unsigned __int8 v5;
  int v6;

  if (*((_DWORD *)this + 9) == 2)
  {
    if (a2 <= 255 && a2 <= a3)
    {
      if (a3 >= 255)
        v5 = -1;
      else
        v5 = a3;
      v6 = re2::Compiler::RuneByteSuffix(this, a2, v5, a4, 0);
      re2::Compiler::AddSuffix(this, v6);
    }
  }
  else
  {
    re2::Compiler::AddRuneRangeUTF8(this, a2, a3, a4);
  }
}

uint64_t re2::Compiler::ByteRange(re2::Compiler *this, int a2, int a3, int a4)
{
  uint64_t v5;
  int v9;
  char *v10;
  char *v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;

  if (*((_BYTE *)this + 32) || (v5 = *((unsigned int *)this + 14), (int)v5 >= *((_DWORD *)this + 11)))
  {
    v16 = 0;
    LODWORD(v5) = 0;
    *((_BYTE *)this + 32) = 1;
  }
  else
  {
    v9 = *((_DWORD *)this + 15);
    if ((int)v5 >= v9)
    {
      if (!v9)
      {
        v9 = 8;
        *((_DWORD *)this + 15) = 8;
      }
      if ((int)v5 >= v9)
      {
        do
          v9 *= 2;
        while ((int)v5 >= v9);
        *((_DWORD *)this + 15) = v9;
      }
      v10 = (char *)operator new[]();
      v11 = v10;
      if (v9)
        bzero(v10, 8 * v9);
      v12 = (const void *)*((_QWORD *)this + 6);
      v13 = *((int *)this + 14);
      memmove(v11, v12, 8 * v13);
      bzero(&v11[8 * v13], 8 * (*((_DWORD *)this + 15) - (int)v13));
      if (v12)
      {
        MEMORY[0x1C3BD4840](v12, 0x1000C8000313F17);
        v13 = *((unsigned int *)this + 14);
      }
      *((_QWORD *)this + 6) = v11;
      v5 = v13;
    }
    *((_DWORD *)this + 14) = v5 + 1;
    if ((v5 & 0x80000000) == 0)
    {
      v14 = *((_QWORD *)this + 6) + 8 * v5;
      *(_DWORD *)v14 = 2;
      *(_BYTE *)(v14 + 4) = a2;
      *(_BYTE *)(v14 + 5) = a3;
      *(_BYTE *)(v14 + 6) = a4;
      v15 = *((_QWORD *)this + 3);
      ++*(_DWORD *)(v15 + 16);
      if ((a2 - 1) <= 0xFE)
      {
        *(_DWORD *)(v15 + 4 * ((a2 - 1) >> 5) + 272) |= 1 << (a2 - 1);
        if (a3 > 0xFF)
        {
LABEL_17:
          if (a2 > 122)
            goto LABEL_34;
          goto LABEL_24;
        }
      }
      else if (a3 > 0xFF)
      {
        goto LABEL_17;
      }
      *(_DWORD *)(v15 + 4 * (a3 >> 5) + 272) |= 1 << a3;
      if (a2 > 122)
      {
LABEL_34:
        v16 = v5 << 33;
        return v16 | v5;
      }
LABEL_24:
      if (a3 >= 97 && a4)
      {
        if (a2 <= 97)
          v18 = 97;
        else
          v18 = a2;
        if (a3 >= 122)
          v19 = 122;
        else
          v19 = a3;
        if (v18 <= v19)
        {
          v20 = v15 + 272;
          *(_DWORD *)(v20 + 4 * ((v18 - 33) >> 5)) |= 1 << (v18 - 33);
          *(_DWORD *)(v20 + 4 * ((v19 - 32) >> 5)) |= 1 << v19;
        }
      }
      goto LABEL_34;
    }
    v16 = 0;
    LODWORD(v5) = 0;
  }
  return v16 | v5;
}

void re2::Compiler::AddRuneRangeUTF8(re2::Compiler *this, int a2, int a3, unsigned int a4)
{
  int v6;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  char v21;
  char v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  unsigned __int8 v30[4];
  unsigned __int8 v31[16];
  __int128 v32;
  __int128 v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (a2 > a3)
    return;
  v6 = a2;
  v8 = a3 & 0xFFFFFFC0;
  v9 = a3 & 0x3F;
  v10 = a3 & 0xFFFFF000;
  v11 = a3 & 0xFFFC0000;
  v28 = a3 & 0xFFF;
  v29 = a3 & 0x3FFFF;
  while (v6 != 128 || a3 != 1114111)
  {
    if (v6 <= 127 && a3 > 127)
    {
      v12 = 127;
      goto LABEL_28;
    }
LABEL_11:
    if (v6 > 2047 || a3 <= 2047)
    {
      if (v6 >= 0x10000 || a3 < 0x10000)
      {
        if (a3 < 128)
        {
          v20 = re2::Compiler::RuneByteSuffix(this, v6, a3, a4, 0);
          re2::Compiler::AddSuffix(this, v20);
          return;
        }
        if ((v6 & 0xFFFFFFC0) == v8)
          goto LABEL_19;
        if ((v6 & 0x3F) != 0)
        {
          v13 = 63;
LABEL_27:
          v12 = v6 | v13;
          goto LABEL_28;
        }
        v14 = v8;
        if (v9 != 63)
          goto LABEL_36;
LABEL_19:
        if ((v6 & 0xFFFFF000) != v10)
        {
          if ((v6 & 0xFFF) != 0)
          {
            v13 = 4095;
            goto LABEL_27;
          }
          v14 = v10;
          if (v28 != 4095)
            goto LABEL_36;
        }
        if ((v6 & 0xFFFC0000) == v11)
          goto LABEL_44;
        if ((v6 & 0x3FFFF) == 0)
        {
          v14 = v11;
          if (v29 == 0x3FFFF)
          {
LABEL_44:
            *(_DWORD *)v30 = 0;
            *(_DWORD *)v31 = 0;
            if (v6 <= 0x7F)
            {
              v22 = 0;
              v21 = 0;
              v31[0] = v6;
              v23 = 1;
            }
            else if (v6 > 0x7FF)
            {
              if (v6 <= 0x10FFFF)
                v25 = v6;
              else
                v25 = 65533;
              v22 = 0;
              if (HIWORD(v25))
              {
                v21 = 0;
                v31[0] = (v25 >> 18) | 0xF0;
                v31[1] = (v25 >> 12) & 0x3F | 0x80;
                v31[2] = (v25 >> 6) & 0x3F | 0x80;
                v31[3] = v25 & 0x3F | 0x80;
                v23 = 4;
              }
              else
              {
                v31[0] = (v25 >> 12) | 0xE0;
                v31[1] = (v25 >> 6) & 0x3F | 0x80;
                v31[2] = v25 & 0x3F | 0x80;
                v21 = 1;
                v23 = 3;
              }
            }
            else
            {
              v21 = 0;
              v31[0] = (v6 >> 6) | 0xC0;
              v31[1] = v6 & 0x3F | 0x80;
              v22 = 1;
              v23 = 2;
            }
            if (a3 > 0x7FF)
            {
              if (a3 <= 0x10FFFF)
                v24 = a3;
              else
                v24 = 65533;
              if (HIWORD(v24))
              {
                v30[0] = (v24 >> 18) | 0xF0;
                v30[1] = (v24 >> 12) & 0x3F | 0x80;
                v30[2] = (v24 >> 6) & 0x3F | 0x80;
                v30[3] = v24 & 0x3F | 0x80;
              }
              else
              {
                v30[0] = (v24 >> 12) | 0xE0;
                v30[1] = (v24 >> 6) & 0x3F | 0x80;
                v30[2] = v24 & 0x3F | 0x80;
              }
            }
            else
            {
              v30[0] = (a3 >> 6) | 0xC0;
              v30[1] = a3 & 0x3F | 0x80;
            }
            if (*((_BYTE *)this + 40))
            {
              v26 = re2::Compiler::RuneByteSuffix(this, v31[0], v30[0], 0, 0);
              if (v6 >= 0x80)
              {
                v26 = re2::Compiler::RuneByteSuffix(this, v31[1], v30[1], 0, v26);
                if ((v22 & 1) == 0)
                {
                  v26 = re2::Compiler::RuneByteSuffix(this, v31[2], v30[2], 0, v26);
                  if ((v21 & 1) == 0)
                  {
                    v27 = 3;
                    goto LABEL_70;
                  }
                }
              }
            }
            else
            {
              v26 = re2::Compiler::RuneByteSuffix(this, v31[(v23 - 1)], v30[(v23 - 1)], 0, 0);
              if (v6 >= 0x80)
              {
                v26 = re2::Compiler::RuneByteSuffix(this, v31[(v23 - 2)], v30[(v23 - 2)], 0, v26);
                if ((unint64_t)(v23 - 1) >= 2)
                {
                  v26 = re2::Compiler::RuneByteSuffix(this, v31[(v23 - 3)], v30[(v23 - 3)], 0, v26);
                  if ((unint64_t)(v23 - 2) >= 2)
                  {
                    v27 = (v23 - 4);
LABEL_70:
                    v26 = re2::Compiler::RuneByteSuffix(this, v31[v27], v30[v27], 0, v26);
                  }
                }
              }
            }
            re2::Compiler::AddSuffix(this, v26);
            return;
          }
LABEL_36:
          re2::Compiler::AddRuneRangeUTF8(this, v6, v14 - 1, a4);
          v6 = v14;
          goto LABEL_29;
        }
        v13 = 0x3FFFF;
        goto LABEL_27;
      }
      v12 = 0xFFFF;
    }
    else
    {
      v12 = 2047;
    }
LABEL_28:
    re2::Compiler::AddRuneRangeUTF8(this, v6, v12, a4);
    v6 = v12 + 1;
LABEL_29:
    if (v6 > a3)
      return;
  }
  if (*((_BYTE *)this + 40))
    goto LABEL_11;
  v15 = 0;
  v32 = 0u;
  v33 = 0u;
  *(_OWORD *)v31 = 0u;
  v16 = &byte_1C3853584;
  do
  {
    v17 = *((unsigned int *)v16 - 2);
    if ((v17 & 0x80000000) != 0)
      v18 = 0;
    else
      v18 = *(_DWORD *)&v31[4 * v17];
    v19 = re2::Compiler::UncachedRuneByteSuffix(this, *(v16 - 4), *v16, 0, v18);
    *(_DWORD *)&v31[4 * v15] = v19;
    if (((0x555uLL >> v15) & 1) == 0)
      re2::Compiler::AddSuffix(this, v19);
    ++v15;
    v16 += 12;
  }
  while (v15 != 12);
}

unint64_t re2::Compiler::RuneByteSuffix(re2::Compiler *this, unsigned int a2, unsigned int a3, unsigned int a4, int a5)
{
  int v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t **v9;
  uint64_t **v10;
  unint64_t v11;
  BOOL v12;
  _QWORD *v13;
  unint64_t v14;
  char *v15;
  uint64_t **v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;

  v6 = *((_DWORD *)this + 9);
  if (v6 == 2 || v6 == 1 && !*((_BYTE *)this + 40) && ((a2 & 0x80) == 0 || a3 >= 0xC0))
    return re2::Compiler::UncachedRuneByteSuffix(this, a2, a3, a4, a5);
  v7 = ((unint64_t)a2 << 9) | ((uint64_t)a5 << 17) | (2 * a3) | a4;
  v9 = (uint64_t **)((char *)this + 80);
  v8 = (_QWORD *)*((_QWORD *)this + 10);
  if (!v8)
    goto LABEL_17;
  v10 = (uint64_t **)((char *)this + 80);
  do
  {
    v11 = v8[4];
    v12 = v11 >= v7;
    if (v11 >= v7)
      v13 = v8;
    else
      v13 = v8 + 1;
    if (v12)
      v10 = (uint64_t **)v8;
    v8 = (_QWORD *)*v13;
  }
  while (*v13);
  if (v10 != v9 && v7 >= (unint64_t)v10[4])
    return *((unsigned int *)v10 + 10);
LABEL_17:
  v14 = re2::Compiler::UncachedRuneByteSuffix(this, a2, a3, a4, a5);
  v15 = (char *)*((_QWORD *)this + 10);
  v16 = (uint64_t **)((char *)this + 80);
  if (v15)
  {
    while (1)
    {
      while (1)
      {
        v16 = (uint64_t **)v15;
        v17 = *((_QWORD *)v15 + 4);
        if (v7 >= v17)
          break;
        v15 = (char *)*v16;
        v9 = v16;
        if (!*v16)
          goto LABEL_24;
      }
      if (v17 >= v7)
        break;
      v15 = (char *)v16[1];
      if (!v15)
      {
        v9 = v16 + 1;
        goto LABEL_24;
      }
    }
  }
  else
  {
LABEL_24:
    v18 = (char *)v16;
    v16 = (uint64_t **)operator new(0x30uLL);
    v16[4] = (uint64_t *)v7;
    *((_DWORD *)v16 + 10) = 0;
    *v16 = 0;
    v16[1] = 0;
    v16[2] = (uint64_t *)v18;
    *v9 = (uint64_t *)v16;
    v19 = **((_QWORD **)this + 9);
    v20 = (uint64_t *)v16;
    if (v19)
    {
      *((_QWORD *)this + 9) = v19;
      v20 = *v9;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 10), v20);
    ++*((_QWORD *)this + 11);
  }
  *((_DWORD *)v16 + 10) = v14;
  return v14;
}

void re2::Compiler::AddSuffix(re2::Compiler *this, int a2)
{
  uint64_t v4;
  int v5;
  char *v6;
  char *v7;
  const void *v8;
  _DWORD *v9;

  if (*((_DWORD *)this + 24))
  {
    if (*((_BYTE *)this + 32) || (LODWORD(v4) = *((_DWORD *)this + 14), (int)v4 >= *((_DWORD *)this + 11)))
    {
      LODWORD(v4) = 0;
      *((_BYTE *)this + 32) = 1;
    }
    else
    {
      v5 = *((_DWORD *)this + 15);
      if ((int)v4 >= v5)
      {
        if (!v5)
        {
          v5 = 8;
          *((_DWORD *)this + 15) = 8;
        }
        if ((int)v4 >= v5)
        {
          do
            v5 *= 2;
          while ((int)v4 >= v5);
          *((_DWORD *)this + 15) = v5;
        }
        v6 = (char *)operator new[]();
        v7 = v6;
        if (v5)
          bzero(v6, 8 * v5);
        v8 = (const void *)*((_QWORD *)this + 6);
        v4 = *((int *)this + 14);
        memmove(v7, v8, 8 * v4);
        bzero(&v7[8 * v4], 8 * (*((_DWORD *)this + 15) - (int)v4));
        if (v8)
        {
          MEMORY[0x1C3BD4840](v8, 0x1000C8000313F17);
          LODWORD(v4) = *((_DWORD *)this + 14);
        }
        *((_QWORD *)this + 6) = v7;
      }
      *((_DWORD *)this + 14) = v4 + 1;
      if ((v4 & 0x80000000) != 0)
      {
        LODWORD(v4) = 0;
      }
      else
      {
        v9 = (_DWORD *)(*((_QWORD *)this + 6) + 8 * v4);
        *v9 = 8 * *((_DWORD *)this + 24);
        v9[1] = a2;
      }
    }
  }
  else
  {
    LODWORD(v4) = a2;
  }
  *((_DWORD *)this + 24) = v4;
}

uint64_t re2::Compiler::Capture(uint64_t a1, unint64_t a2, int a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v9;
  char *v10;
  char *v11;
  const void *v12;
  unint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (!(_DWORD)a2)
    goto LABEL_23;
  if (*(_BYTE *)(a1 + 32) || (LODWORD(v5) = *(_DWORD *)(a1 + 56), v6 = v5 + 2, (int)v5 + 2 > *(_DWORD *)(a1 + 44)))
  {
    v7 = 0;
    LODWORD(v5) = 0;
    *(_BYTE *)(a1 + 32) = 1;
    return v7 | v5;
  }
  v9 = *(_DWORD *)(a1 + 60);
  if (v6 > v9)
  {
    if (!v9)
    {
      v9 = 8;
      *(_DWORD *)(a1 + 60) = 8;
    }
    if (v6 > v9)
    {
      do
        v9 *= 2;
      while (v6 > v9);
      *(_DWORD *)(a1 + 60) = v9;
    }
    v10 = (char *)operator new[]();
    v11 = v10;
    if (v9)
      bzero(v10, 8 * v9);
    v12 = *(const void **)(a1 + 48);
    v5 = *(int *)(a1 + 56);
    memmove(v11, v12, 8 * v5);
    bzero(&v11[8 * v5], 8 * (*(_DWORD *)(a1 + 60) - (int)v5));
    if (v12)
    {
      MEMORY[0x1C3BD4840](v12, 0x1000C8000313F17);
      LODWORD(v5) = *(_DWORD *)(a1 + 56);
    }
    *(_QWORD *)(a1 + 48) = v11;
    v6 = v5 + 2;
  }
  *(_DWORD *)(a1 + 56) = v6;
  if ((v5 & 0x80000000) != 0)
  {
LABEL_23:
    v7 = 0;
    LODWORD(v5) = 0;
    return v7 | v5;
  }
  v13 = HIDWORD(a2);
  v14 = (_DWORD *)(*(_QWORD *)(a1 + 48) + 8 * v5);
  *v14 = (8 * a2) | 3;
  v14[1] = 2 * a3;
  v15 = (v5 + 1);
  v16 = (_DWORD *)(*(_QWORD *)(a1 + 48) + 8 * v15);
  *v16 = 3;
  v16[1] = (2 * a3) | 1;
  if (HIDWORD(a2))
  {
    v17 = *(_QWORD *)(a1 + 48);
    do
    {
      while (1)
      {
        v19 = v13 >> 1;
        if ((v13 & 1) != 0)
          break;
        v18 = 8 * v19;
        LODWORD(v13) = *(_DWORD *)(v17 + v18) >> 3;
        *(_DWORD *)(v17 + v18) = *(_DWORD *)(v17 + v18) & 7 | (8 * v15);
        if (!(_DWORD)v13)
          goto LABEL_22;
      }
      v20 = v17 + 8 * v19;
      LODWORD(v13) = *(_DWORD *)(v20 + 4);
      *(_DWORD *)(v20 + 4) = v15;
    }
    while ((_DWORD)v13);
  }
LABEL_22:
  v7 = v15 << 33;
  return v7 | v5;
}

unint64_t re2::Compiler::UncachedRuneByteSuffix(re2::Compiler *this, int a2, int a3, int a4, int a5)
{
  unint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  char v16;
  unint64_t v17;
  uint64_t v18;

  result = re2::Compiler::ByteRange(this, a2, a3, a4);
  v8 = *((_QWORD *)this + 6);
  v9 = HIDWORD(result);
  if (a5)
  {
    if (HIDWORD(result))
    {
      do
      {
        while (1)
        {
          v11 = v9 >> 1;
          if ((v9 & 1) == 0)
            break;
          v10 = v8 + 8 * v11;
          LODWORD(v9) = *(_DWORD *)(v10 + 4);
          *(_DWORD *)(v10 + 4) = a5;
          if (!(_DWORD)v9)
            return result;
        }
        v12 = 8 * v11;
        LODWORD(v9) = *(_DWORD *)(v8 + v12) >> 3;
        *(_DWORD *)(v8 + v12) = *(_DWORD *)(v8 + v12) & 7 | (8 * a5);
      }
      while ((_DWORD)v9);
    }
  }
  else
  {
    LODWORD(v13) = *((_DWORD *)this + 25);
    if ((_DWORD)v13)
    {
      if (HIDWORD(result))
      {
        v14 = *((_DWORD *)this + 25);
        do
        {
          while (1)
          {
            v15 = v14;
            v16 = v14;
            v17 = (unint64_t)v14 >> 1;
            if ((v16 & 1) != 0)
              break;
            v14 = *(_DWORD *)(v8 + 8 * v17) >> 3;
            if (!v14)
              goto LABEL_14;
          }
          v14 = *(_DWORD *)(v8 + 8 * v17 + 4);
        }
        while (v14);
LABEL_14:
        v18 = v15 >> 1;
        if ((v15 & 1) != 0)
          *(_DWORD *)(v8 + 8 * v18 + 4) = HIDWORD(result);
        else
          *(_DWORD *)(v8 + 8 * v18) = *(_DWORD *)(v8 + 8 * v18) & 7 | (8 * HIDWORD(result));
      }
    }
    else
    {
      v13 = HIDWORD(result);
    }
    *((_DWORD *)this + 25) = v13;
  }
  return result;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = a2[2];
      if (*(_BYTE *)(v2 + 24))
        break;
      v3 = *(uint64_t **)(v2 + 16);
      v4 = *v3;
      if (*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if (*(uint64_t **)v2 == a2)
          {
            v9 = (uint64_t *)a2[2];
          }
          else
          {
            v9 = *(uint64_t **)(v2 + 8);
            v10 = *v9;
            *(_QWORD *)(v2 + 8) = *v9;
            if (v10)
            {
              *(_QWORD *)(v10 + 16) = v2;
              v3 = *(uint64_t **)(v2 + 16);
            }
            v9[2] = (uint64_t)v3;
            *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * (**(_QWORD **)(v2 + 16) != v2)) = v9;
            *v9 = v2;
            *(_QWORD *)(v2 + 16) = v9;
            v3 = (uint64_t *)v9[2];
            v2 = *v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v14 = *(_QWORD *)(v2 + 8);
          *v3 = v14;
          if (v14)
            *(_QWORD *)(v14 + 16) = v3;
          *(_QWORD *)(v2 + 16) = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          *(_QWORD *)(v2 + 8) = v3;
          v3[2] = v2;
          return result;
        }
      }
      else if (!v4 || (v6 = *(unsigned __int8 *)(v4 + 24), v5 = (_BYTE *)(v4 + 24), v6))
      {
        if (*(uint64_t **)v2 == a2)
        {
          v11 = a2[1];
          *(_QWORD *)v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = *(uint64_t **)(v2 + 16);
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * (**(_QWORD **)(v2 + 16) != v2)) = a2;
          a2[1] = v2;
          *(_QWORD *)(v2 + 16) = a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v12 = (uint64_t *)v3[1];
        v13 = *v12;
        v3[1] = *v12;
        if (v13)
          *(_QWORD *)(v13 + 16) = v3;
        v12[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v12;
        *v12 = (uint64_t)v3;
        v3[2] = (uint64_t)v12;
        return result;
      }
      *(_BYTE *)(v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void re2::Regexp::Walker<re2::Frag>::Reset(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22[8];
  __int128 v23;
  __int128 v24;
  int v25;
  uint64_t v26;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(v1 + 40))
    {
      LOBYTE(v20) = 0;
      v3 = MEMORY[0x1E0DE4FE0];
      v4 = MEMORY[0x1E0DE4FE0] + 64;
      v5 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
      v6 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
      v26 = MEMORY[0x1E0DE4FE0] + 64;
      v21 = v5;
      *(uint64_t *)((char *)&v22[-1] + *(_QWORD *)(v5 - 24)) = v6;
      v7 = (std::ios_base *)((char *)&v22[-1] + *(_QWORD *)(v21 - 24));
      std::ios_base::init(v7, v22);
      v7[1].__vftable = 0;
      v7[1].__fmtflags_ = -1;
      v21 = v3 + 24;
      v26 = v4;
      std::streambuf::basic_streambuf();
      v22[0] = MEMORY[0x1E0DE4FB8] + 16;
      v23 = 0u;
      v24 = 0u;
      v25 = 16;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Stack not empty.", 16);
      LogMessage::~LogMessage(&v20);
      v8 = *(_QWORD **)(a1 + 8);
      v9 = v8[5];
      while (v9)
      {
        v10 = v8[4];
        v11 = v9 + v10 - 1;
        v12 = v8[1];
        v13 = *(_QWORD *)(*(_QWORD *)(v12 + 8 * (v11 / 0x55)) + 48 * (v11 % 0x55) + 40);
        if (v13)
        {
          MEMORY[0x1C3BD4858](v13, 0x1000C4000313F17);
          v8 = *(_QWORD **)(a1 + 8);
          v10 = v8[4];
          v12 = v8[1];
        }
        v14 = v8[2];
        v16 = v14 - v12;
        v15 = v16 == 0;
        v17 = 85 * (v16 >> 3) - 1;
        v18 = v8[5];
        if (v15)
          v19 = 0;
        else
          v19 = v17;
        v9 = v18 - 1;
        v8[5] = v18 - 1;
        if ((unint64_t)(v19 - (v18 + v10) + 1) >= 0xAA)
        {
          operator delete(*(void **)(v14 - 8));
          v8[2] -= 8;
          v8 = *(_QWORD **)(a1 + 8);
          v9 = v8[5];
        }
      }
    }
  }
}

void sub_1C36735BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  LogMessage::~LogMessage(&a9);
  _Unwind_Resume(a1);
}

void sub_1C36735D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1C3BD4828](v1 + 120);
  _Unwind_Resume(a1);
}

uint64_t std::deque<re2::WalkState<re2::Frag>>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 42;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 85;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t re2::Regexp::Walker<re2::Frag>::PreVisit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t re2::Regexp::Walker<re2::Frag>::PostVisit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a4;
}

uint64_t re2::Regexp::Walker<re2::Frag>::Copy(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t re2::PatchList::Deref(uint64_t a1, unsigned int a2)
{
  uint64_t v2;

  v2 = a2 >> 1;
  if ((a2 & 1) != 0)
    return *(unsigned int *)(a1 + 8 * v2 + 4);
  else
    return *(_DWORD *)(a1 + 8 * v2) >> 3;
}

uint64_t re2::PatchList::Patch(uint64_t result, unsigned int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  for (; a2; *(_DWORD *)(v5 + 4) = a3)
  {
    while (1)
    {
      v4 = a2 >> 1;
      if ((a2 & 1) != 0)
        break;
      v3 = 8 * v4;
      a2 = *(_DWORD *)(result + v3) >> 3;
      *(_DWORD *)(result + v3) = *(_DWORD *)(result + v3) & 7 | (8 * a3);
      if (!a2)
        return result;
    }
    v5 = result + 8 * v4;
    a2 = *(_DWORD *)(v5 + 4);
  }
  return result;
}

uint64_t re2::PatchList::Append(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v4;
  char v5;
  unint64_t v6;
  uint64_t v7;

  if (!(_DWORD)a2)
    return a3;
  if (!(_DWORD)a3)
    return a2;
  v3 = a2;
  do
  {
    while (1)
    {
      v4 = v3;
      v5 = v3;
      v6 = (unint64_t)v3 >> 1;
      if ((v5 & 1) != 0)
        break;
      v3 = *(_DWORD *)(a1 + 8 * v6) >> 3;
      if (!v3)
        goto LABEL_7;
    }
    v3 = *(_DWORD *)(a1 + 8 * v6 + 4);
  }
  while (v3);
LABEL_7:
  v7 = v4 >> 1;
  if ((v4 & 1) != 0)
    *(_DWORD *)(a1 + 8 * v7 + 4) = a3;
  else
    *(_DWORD *)(a1 + 8 * v7) = *(_DWORD *)(a1 + 8 * v7) & 7 | (8 * a3);
  return a2;
}

re2::Compiler *re2::Compiler::Compiler(re2::Compiler *this)
{
  _OWORD *v2;
  uint64_t v3;
  _OWORD *v4;
  const void *v5;
  int v6;
  uint64_t v7;
  int v8;

  *(_QWORD *)this = off_1E7DA9E50;
  v2 = (_OWORD *)operator new();
  *v2 = 0u;
  v2[1] = 0u;
  v2[2] = 0u;
  *((_BYTE *)this + 16) = 0;
  *(_QWORD *)this = &off_1E7DA9DE8;
  *((_QWORD *)this + 1) = v2;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 9) = (char *)this + 80;
  v3 = operator new();
  *(_OWORD *)(v3 + 208) = 0u;
  *(_OWORD *)(v3 + 224) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_OWORD *)(v3 + 192) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)v3 = 0u;
  if (pthread_rwlock_init((pthread_rwlock_t *)(v3 + 40), 0))
    abort();
  *(_QWORD *)(v3 + 240) = 0;
  *(_QWORD *)(v3 + 248) = 0;
  *(_OWORD *)(v3 + 256) = 0u;
  *(_OWORD *)(v3 + 272) = 0u;
  *(_OWORD *)(v3 + 288) = 0u;
  *(_QWORD *)(v3 + 560) = 0;
  *(_QWORD *)(v3 + 576) = 0;
  *(_QWORD *)(v3 + 568) = 0;
  *((_QWORD *)this + 3) = v3;
  *((_BYTE *)this + 32) = 0;
  *((_DWORD *)this + 9) = 1;
  *((_BYTE *)this + 40) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_DWORD *)this + 11) = 1;
  *((_DWORD *)this + 15) = 8;
  v4 = (_OWORD *)operator new[]();
  v4[2] = 0u;
  v4[3] = 0u;
  *v4 = 0u;
  v4[1] = 0u;
  v5 = (const void *)*((_QWORD *)this + 6);
  v6 = *((_DWORD *)this + 14);
  memmove(v4, v5, 8 * v6);
  bzero((char *)v4 + 8 * v6, 8 * (*((_DWORD *)this + 15) - v6));
  if (v5)
  {
    MEMORY[0x1C3BD4840](v5, 0x1000C8000313F17);
    v6 = *((_DWORD *)this + 14);
  }
  *((_QWORD *)this + 6) = v4;
  v7 = 8 * v6;
  v8 = *(_DWORD *)((char *)v4 + v7);
  *((_DWORD *)this + 14) = v6 + 1;
  *(_DWORD *)((char *)v4 + v7) = v8 | 7;
  *((_DWORD *)this + 11) = 0;
  return this;
}

void sub_1C3673980(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<unsigned long long,int>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,int>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,int>>>::destroy(*(_QWORD **)(v1 + 80));
  re2::Regexp::Walker<re2::Frag>::~Walker((_QWORD *)v1);
  _Unwind_Resume(a1);
}

_QWORD *re2::Regexp::Walker<re2::Frag>::~Walker(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = off_1E7DA9E50;
  re2::Regexp::Walker<re2::Frag>::Reset((uint64_t)a1);
  v2 = a1[1];
  if (v2)
  {
    v3 = std::deque<re2::WalkState<re2::Frag>>::~deque[abi:ne180100](v2);
    MEMORY[0x1C3BD4858](v3, 0x1080C40BE8D5F09);
  }
  return a1;
}

uint64_t re2::Compiler::AllocInst(re2::Compiler *this, int a2)
{
  uint64_t v4;
  int v5;
  int v7;
  char *v8;
  char *v9;
  const void *v10;

  if (*((_BYTE *)this + 32) || (v4 = *((unsigned int *)this + 14), v5 = v4 + a2, (int)v4 + a2 > *((_DWORD *)this + 11)))
  {
    *((_BYTE *)this + 32) = 1;
    return 0xFFFFFFFFLL;
  }
  else
  {
    v7 = *((_DWORD *)this + 15);
    if (v5 > v7)
    {
      if (!v7)
      {
        v7 = 8;
        *((_DWORD *)this + 15) = 8;
      }
      if (v5 > v7)
      {
        do
          v7 *= 2;
        while (v5 > v7);
        *((_DWORD *)this + 15) = v7;
      }
      v8 = (char *)operator new[]();
      v9 = v8;
      if (v7)
        bzero(v8, 8 * v7);
      v10 = (const void *)*((_QWORD *)this + 6);
      v4 = *((int *)this + 14);
      memmove(v9, v10, 8 * v4);
      bzero(&v9[8 * v4], 8 * (*((_DWORD *)this + 15) - (int)v4));
      if (v10)
      {
        MEMORY[0x1C3BD4840](v10, 0x1000C8000313F17);
        v4 = *((unsigned int *)this + 14);
      }
      *((_QWORD *)this + 6) = v9;
      v5 = v4 + a2;
    }
    *((_DWORD *)this + 14) = v5;
  }
  return v4;
}

int *re2::Compiler::Trim(int *this)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  const void *v5;
  uint64_t v6;

  v1 = this[14];
  if ((int)v1 < this[15])
  {
    v2 = (uint64_t)this;
    v3 = (void *)operator new[]();
    v4 = v3;
    if ((_DWORD)v1)
      bzero(v3, 8 * v1);
    v5 = *(const void **)(v2 + 48);
    v6 = *(int *)(v2 + 56);
    this = (int *)memmove(v4, v5, 8 * v6);
    if (v5)
    {
      this = (int *)MEMORY[0x1C3BD4840](v5, 0x1000C8000313F17);
      LODWORD(v6) = *(_DWORD *)(v2 + 56);
    }
    *(_QWORD *)(v2 + 48) = v4;
    *(_DWORD *)(v2 + 60) = v6;
  }
  return this;
}

uint64_t re2::Compiler::NoMatch(re2::Compiler *this)
{
  return 0;
}

unint64_t re2::Compiler::Plus(uint64_t a1, unint64_t a2, int a3)
{
  return re2::Compiler::Star(a1, a2, a3) & 0xFFFFFFFF00000000 | a2;
}

void re2::Compiler::BeginRange(re2::Compiler *this)
{
  _QWORD *v1;

  v1 = (_QWORD *)((char *)this + 80);
  std::__tree<std::__value_type<unsigned long long,int>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,int>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,int>>>::destroy(*((_QWORD **)this + 10));
  *(v1 - 1) = v1;
  *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
}

uint64_t re2::Compiler::EndRange(re2::Compiler *this)
{
  return *((_QWORD *)this + 12);
}

void re2::Compiler::AddRuneRangeLatin1(re2::Compiler *this, int a2, int a3, unsigned int a4)
{
  unsigned __int8 v5;
  int v6;

  if (a2 <= 255 && a2 <= a3)
  {
    if (a3 >= 255)
      v5 = -1;
    else
      v5 = a3;
    v6 = re2::Compiler::RuneByteSuffix(this, a2, v5, a4, 0);
    re2::Compiler::AddSuffix(this, v6);
  }
}

void re2::Compiler::Add_80_10ffff(re2::Compiler *this)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  int v5;
  int v6;
  _OWORD v7[3];
  uint64_t v8;

  v2 = 0;
  v8 = *MEMORY[0x1E0C80C00];
  memset(v7, 0, sizeof(v7));
  v3 = &byte_1C3853584;
  do
  {
    v4 = *((unsigned int *)v3 - 2);
    if ((v4 & 0x80000000) != 0)
      v5 = 0;
    else
      v5 = *((_DWORD *)v7 + v4);
    v6 = re2::Compiler::UncachedRuneByteSuffix(this, *(v3 - 4), *v3, 0, v5);
    *((_DWORD *)v7 + v2) = v6;
    if (((0x555uLL >> v2) & 1) == 0)
      re2::Compiler::AddSuffix(this, v6);
    ++v2;
    v3 += 12;
  }
  while (v2 != 12);
}

uint64_t re2::Compiler::Setup(uint64_t result, int a2, uint64_t a3, int a4)
{
  int v4;
  int v5;

  *(_DWORD *)(*(_QWORD *)(result + 24) + 24) = a2;
  if ((a2 & 0x20) != 0)
    *(_DWORD *)(result + 36) = 2;
  *(_QWORD *)(result + 64) = a3;
  if ((unint64_t)(a3 - 584) >> 27)
    v4 = 0x1000000;
  else
    v4 = (unint64_t)(a3 - 584) >> 3;
  if ((unint64_t)a3 < 0x249)
    v4 = 0;
  if (a3 >= 1)
    v5 = v4;
  else
    v5 = 100000;
  *(_DWORD *)(result + 44) = v5;
  *(_DWORD *)(result + 104) = a4;
  return result;
}

uint64_t re2::Compiler::Compile(re2::Compiler *this, re2::Regexp *a2, uint64_t a3)
{
  char v4;
  int v6;
  int v7;
  int v8;
  char IsAnchorStart;
  int IsAnchorEnd;
  re2::Regexp *v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  char *v16;
  char *v17;
  void *v18;
  size_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  re2::Regexp *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  void *__src[2];
  __int128 v33;
  __int128 v34;
  __int128 v35;

  v4 = (char)a2;
  v34 = 0u;
  v35 = 0u;
  *(_OWORD *)__src = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v29 = 0u;
  re2::Compiler::Compiler((re2::Compiler *)&v29);
  v6 = *((unsigned __int16 *)this + 1);
  *(_DWORD *)(*((_QWORD *)&v30 + 1) + 24) = v6;
  if ((v6 & 0x20) != 0)
    DWORD1(v31) = 2;
  *(_QWORD *)&v33 = a3;
  if ((unint64_t)(a3 - 584) >> 27)
    v7 = 0x1000000;
  else
    v7 = (unint64_t)(a3 - 584) >> 3;
  if ((unint64_t)a3 < 0x249)
    v7 = 0;
  if (a3 >= 1)
    v8 = v7;
  else
    v8 = 100000;
  HIDWORD(v31) = v8;
  DWORD2(v35) = 2;
  BYTE8(v31) = v4;
  v28 = re2::Regexp::Simplify(this);
  if (v28)
  {
    IsAnchorStart = re2::IsAnchorStart((unsigned __int8 **)&v28, 0);
    IsAnchorEnd = re2::IsAnchorEnd((unsigned __int8 **)&v28, 0);
    v11 = v28;
    DWORD1(v30) = 2 * HIDWORD(v31);
    v12 = re2::Regexp::Walker<re2::Frag>::WalkInternal((uint64_t *)&v29, (uint64_t)v28);
    re2::Regexp::Decref(v11);
    if (!(_BYTE)v31)
    {
      BYTE8(v31) = 0;
      v14 = __src[1];
      if (SLODWORD(__src[1]) >= SHIDWORD(v31))
      {
        v14 = 0;
        LOBYTE(v31) = 1;
      }
      else
      {
        v15 = HIDWORD(__src[1]);
        if (SLODWORD(__src[1]) >= SHIDWORD(__src[1]))
        {
          if (!HIDWORD(__src[1]))
          {
            v15 = 8;
            HIDWORD(__src[1]) = 8;
          }
          if (SLODWORD(__src[1]) >= v15)
          {
            do
              v15 *= 2;
            while (SLODWORD(__src[1]) >= v15);
            HIDWORD(__src[1]) = v15;
          }
          v16 = (char *)operator new[]();
          v17 = v16;
          if (v15)
            bzero(v16, 8 * v15);
          v18 = __src[0];
          v14 = __src[1];
          v19 = 8 * SLODWORD(__src[1]);
          memmove(v17, __src[0], v19);
          bzero(&v17[v19], 8 * (int)(HIDWORD(__src[1]) - v14));
          if (v18)
          {
            MEMORY[0x1C3BD4840](v18, 0x1000C8000313F17);
            v14 = __src[1];
          }
          __src[0] = v17;
        }
        LODWORD(__src[1]) = v14 + 1;
        if ((v14 & 0x80000000) != 0)
          v14 = 0;
        else
          *((_QWORD *)__src[0] + v14) = *((_DWORD *)__src[0] + 2 * v14) & 0xFFFFFFF8 | 5;
      }
      v20 = re2::Compiler::Cat((uint64_t)&v29, v12, v14);
      v21 = v20;
      v22 = *((_QWORD *)&v30 + 1);
      *(_DWORD *)(*((_QWORD *)&v30 + 1) + 4) = v20;
      if ((v4 & 1) != 0)
      {
        *(_BYTE *)v22 = IsAnchorEnd;
        *(_BYTE *)(v22 + 1) = IsAnchorStart;
        if (!IsAnchorEnd)
        {
LABEL_32:
          v23 = re2::Compiler::ByteRange((re2::Compiler *)&v29, 0, 255, 0);
          v24 = re2::Compiler::Star((uint64_t)&v29, v23, 1);
          v25 = re2::Compiler::Cat((uint64_t)&v29, v24, v21);
          v26 = *((_QWORD *)&v30 + 1);
          *(_DWORD *)(*((_QWORD *)&v30 + 1) + 8) = v25;
LABEL_35:
          *(_BYTE *)(v26 + 2) = v4;
          v13 = re2::Compiler::Finish((re2::Compiler *)&v29);
          goto LABEL_36;
        }
      }
      else
      {
        *(_BYTE *)v22 = IsAnchorStart;
        *(_BYTE *)(v22 + 1) = IsAnchorEnd;
        if ((IsAnchorStart & 1) == 0)
          goto LABEL_32;
      }
      *(_DWORD *)(v22 + 8) = v20;
      v26 = *((_QWORD *)&v30 + 1);
      goto LABEL_35;
    }
  }
  v13 = 0;
LABEL_36:
  re2::Compiler::~Compiler((re2::Compiler *)&v29);
  return v13;
}

void sub_1C3674088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  re2::Compiler::~Compiler((re2::Compiler *)va);
  _Unwind_Resume(a1);
}

uint64_t re2::IsAnchorStart(unsigned __int8 **this, re2::Regexp **a2)
{
  uint64_t v2;
  unsigned __int8 *v4;
  int v5;
  int v6;
  re2::Regexp ***v7;
  re2::Regexp **v8;
  int v9;
  void **v10;
  unint64_t v11;
  unint64_t i;
  re2::Regexp **v13;
  __int16 v14;
  char *v15;
  re2::Regexp **v16;
  int v17;
  int IsAnchorStart;
  re2::Regexp *v19;
  __int16 v20;
  int v21;
  _WORD *v22;
  re2::Regexp *v23;
  re2::Regexp *v25;

  v2 = 0;
  if ((int)a2 <= 3)
  {
    v4 = *this;
    if (*this)
    {
      v5 = *v4;
      if (v5 == 18)
      {
        v14 = *((_WORD *)v4 + 1);
        v15 = (char *)mallocRegexp();
        *(_WORD *)v15 = 2;
        *((_WORD *)v15 + 1) = v14;
        v2 = 1;
        *((_WORD *)v15 + 2) = 1;
        *(_OWORD *)(v15 + 6) = 0u;
        *(_OWORD *)(v15 + 22) = 0u;
        *((_WORD *)v15 + 19) = 0;
        *this = (unsigned __int8 *)v15;
        re2::Regexp::Decref((re2::Regexp *)v4);
      }
      else
      {
        v6 = (int)a2;
        if (v5 == 11)
        {
          v16 = (re2::Regexp **)(v4 + 8);
          if (*((unsigned __int16 *)v4 + 3) >= 2u)
            v16 = (re2::Regexp **)*v16;
          v25 = re2::Regexp::Incref(*v16);
          IsAnchorStart = re2::IsAnchorStart((re2 *)&v25, (re2::Regexp **)(v6 + 1), v17);
          v19 = v25;
          if (IsAnchorStart)
          {
            v20 = *((_WORD *)v4 + 1);
            v21 = *((_DWORD *)v4 + 6);
            v22 = mallocRegexp();
            *v22 = 11;
            v22[1] = v20;
            *((_DWORD *)v22 + 1) = 65537;
            *((_QWORD *)v22 + 3) = 0;
            *((_QWORD *)v22 + 4) = 0;
            *((_QWORD *)v22 + 1) = v19;
            *((_QWORD *)v22 + 2) = 0;
            *((_DWORD *)v22 + 6) = v21;
            *this = (unsigned __int8 *)v22;
LABEL_25:
            re2::Regexp::Decref((re2::Regexp *)v4);
            return 1;
          }
          v23 = v25;
          goto LABEL_23;
        }
        if (v5 == 5 && *((_WORD *)v4 + 3))
        {
          v7 = (re2::Regexp ***)(v4 + 8);
          v8 = (re2::Regexp **)(v4 + 8);
          if (*((_WORD *)v4 + 3) != 1)
            v8 = *v7;
          v25 = re2::Regexp::Incref(*v8);
          if (re2::IsAnchorStart((re2 *)&v25, (re2::Regexp **)(v6 + 1), v9))
          {
            v10 = (void **)operator new[]();
            *v10 = v25;
            v11 = *((unsigned __int16 *)v4 + 3);
            if (v11 >= 2)
            {
              for (i = 1; i < v11; ++i)
              {
                v13 = (re2::Regexp **)(v4 + 8);
                if (v11 >= 2)
                  v13 = *v7;
                v10[i] = re2::Regexp::Incref(v13[i]);
                v11 = *((unsigned __int16 *)v4 + 3);
              }
            }
            *this = (unsigned __int8 *)re2::Regexp::ConcatOrAlternate(5, v10, v11, *((unsigned __int16 *)v4 + 1), 0);
            MEMORY[0x1C3BD4840](v10, 0x20C8093837F09);
            goto LABEL_25;
          }
          v23 = v25;
LABEL_23:
          re2::Regexp::Decref(v23);
          return 0;
        }
        return 0;
      }
    }
  }
  return v2;
}

uint64_t re2::IsAnchorEnd(unsigned __int8 **this, re2::Regexp **a2)
{
  uint64_t v2;
  unsigned __int8 *v4;
  int v5;
  int v6;
  int v7;
  unsigned __int8 **v8;
  unsigned __int8 *v9;
  int v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  __int16 v15;
  char *v16;
  re2::Regexp **v17;
  int v18;
  int IsAnchorEnd;
  re2::Regexp *v20;
  __int16 v21;
  int v22;
  _WORD *v23;
  re2::Regexp *v24;
  re2::Regexp *v26;

  v2 = 0;
  if ((int)a2 <= 3)
  {
    v4 = *this;
    if (*this)
    {
      v5 = *v4;
      if (v5 == 19)
      {
        v15 = *((_WORD *)v4 + 1);
        v16 = (char *)mallocRegexp();
        *(_WORD *)v16 = 2;
        *((_WORD *)v16 + 1) = v15;
        v2 = 1;
        *((_WORD *)v16 + 2) = 1;
        *(_OWORD *)(v16 + 6) = 0u;
        *(_OWORD *)(v16 + 22) = 0u;
        *((_WORD *)v16 + 19) = 0;
        *this = (unsigned __int8 *)v16;
        re2::Regexp::Decref((re2::Regexp *)v4);
      }
      else
      {
        v6 = (int)a2;
        if (v5 == 11)
        {
          v17 = (re2::Regexp **)(v4 + 8);
          if (*((unsigned __int16 *)v4 + 3) >= 2u)
            v17 = (re2::Regexp **)*v17;
          v26 = re2::Regexp::Incref(*v17);
          IsAnchorEnd = re2::IsAnchorEnd((re2 *)&v26, (re2::Regexp **)(v6 + 1), v18);
          v20 = v26;
          if (IsAnchorEnd)
          {
            v21 = *((_WORD *)v4 + 1);
            v22 = *((_DWORD *)v4 + 6);
            v23 = mallocRegexp();
            *v23 = 11;
            v23[1] = v21;
            *((_DWORD *)v23 + 1) = 65537;
            *((_QWORD *)v23 + 3) = 0;
            *((_QWORD *)v23 + 4) = 0;
            *((_QWORD *)v23 + 1) = v20;
            *((_QWORD *)v23 + 2) = 0;
            *((_DWORD *)v23 + 6) = v22;
            *this = (unsigned __int8 *)v23;
LABEL_25:
            re2::Regexp::Decref((re2::Regexp *)v4);
            return 1;
          }
          v24 = v26;
          goto LABEL_23;
        }
        if (v5 == 5)
        {
          v7 = *((unsigned __int16 *)v4 + 3);
          if (*((_WORD *)v4 + 3))
          {
            v8 = (unsigned __int8 **)(v4 + 8);
            v9 = v4 + 8;
            if (v7 != 1)
              v9 = *v8;
            v26 = re2::Regexp::Incref(*(re2::Regexp **)&v9[8 * (v7 - 1)]);
            if (re2::IsAnchorEnd((re2 *)&v26, (re2::Regexp **)(v6 + 1), v10))
            {
              v11 = (void **)operator new[]();
              v12 = *((unsigned __int16 *)v4 + 3);
              v11[v12 - 1] = v26;
              if (v12 >= 2)
              {
                v13 = 0;
                do
                {
                  v14 = v4 + 8;
                  if (v12 >= 2)
                    v14 = *v8;
                  v11[v13] = re2::Regexp::Incref(*(re2::Regexp **)&v14[8 * v13]);
                  ++v13;
                  v12 = *((unsigned __int16 *)v4 + 3);
                }
                while (v13 < v12 - 1);
              }
              *this = (unsigned __int8 *)re2::Regexp::ConcatOrAlternate(5, v11, v12, *((unsigned __int16 *)v4 + 1), 0);
              MEMORY[0x1C3BD4840](v11, 0x20C8093837F09);
              goto LABEL_25;
            }
            v24 = v26;
LABEL_23:
            re2::Regexp::Decref(v24);
            return 0;
          }
        }
        return 0;
      }
    }
  }
  return v2;
}

uint64_t re2::Regexp::Walker<re2::Frag>::WalkInternal(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  _DWORD *v19;
  int v20;
  int v21;
  _QWORD *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  std::ios_base *v55;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60[8];
  __int128 v61;
  __int128 v62;
  int v63;
  uint64_t v64;

  re2::Regexp::Walker<re2::Frag>::Reset((uint64_t)a1);
  if (a2)
  {
    v4 = (_QWORD *)a1[1];
    v5 = v4[2];
    v6 = v4[1];
    v7 = -1;
    v8 = 85 * ((v5 - v6) >> 3) - 1;
    if (v5 == v6)
      v8 = 0;
    v9 = v4[5] + v4[4];
    if (v8 == v9)
    {
      std::deque<re2::WalkState<re2::Frag>>::__add_back_capacity(a1[1]);
      v6 = v4[1];
      v9 = v4[5] + v4[4];
    }
    v10 = *(_QWORD *)(v6 + 8 * (v9 / 0x55)) + 48 * (v9 % 0x55);
    *(_QWORD *)v10 = a2;
    *(_DWORD *)(v10 + 8) = -1;
    *(_QWORD *)(v10 + 40) = 0;
    *(_QWORD *)(v10 + 12) = 0;
    *(_QWORD *)(v10 + 28) = 0;
    *(_QWORD *)(v10 + 20) = 0;
LABEL_8:
    ++v4[5];
    while (1)
    {
      v13 = (_QWORD *)a1[1];
      v14 = v13[5] + v13[4] - 1;
      v15 = *(_QWORD *)(v13[1] + 8 * (v14 / 0x55));
      v16 = v14 % 0x55;
      v17 = (uint64_t *)(v15 + 48 * (v14 % 0x55));
      v18 = *v17;
      v20 = *((_DWORD *)v17 + 2);
      v19 = v17 + 1;
      if (v20 == -1)
      {
        v24 = *((_DWORD *)a1 + 5);
        *((_DWORD *)a1 + 5) = v24 - 1;
        if (v24 <= 0)
        {
          *((_BYTE *)a1 + 16) = 1;
          v28 = (*(uint64_t (**)(uint64_t *, uint64_t, _QWORD))(*a1 + 40))(a1, v18, *(_QWORD *)(v15 + 48 * v16 + 12));
          goto LABEL_31;
        }
        v25 = v7;
        LOBYTE(v58) = 0;
        v26 = v15 + 48 * v16;
        v27 = (*(uint64_t (**)(uint64_t *, uint64_t, _QWORD, void **))(*a1 + 16))(a1, v18, *(_QWORD *)(v26 + 12), &v58);
        *(_QWORD *)(v26 + 20) = v27;
        if ((_BYTE)v58)
        {
          v28 = v27;
          v7 = v25;
          goto LABEL_31;
        }
        *v19 = 0;
        v29 = v15 + 48 * v16;
        *(_QWORD *)(v29 + 40) = 0;
        v30 = (_QWORD *)(v29 + 40);
        v31 = *(unsigned __int16 *)(v18 + 6);
        if (*(_WORD *)(v18 + 6))
        {
          if ((_DWORD)v31 == 1)
          {
            v32 = (void *)(v15 + 48 * v16 + 28);
          }
          else
          {
            v57 = 8 * v31;
            v32 = (void *)operator new[]();
            bzero(v32, v57);
          }
          *v30 = v32;
        }
        v7 = v25;
        v21 = *(unsigned __int16 *)(v18 + 6);
        if (*(_WORD *)(v18 + 6))
        {
LABEL_13:
          v22 = (_QWORD *)(v18 + 8);
          if (v21 != 1)
            v22 = (_QWORD *)*v22;
          v23 = *v19;
          if ((int)v23 < v21)
          {
            v4 = (_QWORD *)a1[1];
            v46 = v4[1];
            v47 = v22[(int)v23];
            v48 = *(_QWORD *)(v15 + 48 * v16 + 20);
            if (v4[2] == v46)
              v49 = 0;
            else
              v49 = v7 + 85 * ((v4[2] - v46) >> 3);
            v50 = v4[5] + v4[4];
            if (v49 == v50)
            {
              std::deque<re2::WalkState<re2::Frag>>::__add_back_capacity(a1[1]);
              v46 = v4[1];
              v50 = v4[5] + v4[4];
            }
            v11 = *(_QWORD *)(v46 + 8 * (v50 / 0x55)) + 48 * (v50 % 0x55);
            *(_QWORD *)v11 = v47;
            *(_DWORD *)(v11 + 8) = -1;
            *(_QWORD *)(v11 + 12) = v48;
            *(_QWORD *)(v11 + 28) = 0;
            *(_QWORD *)(v11 + 20) = 0;
            *(_QWORD *)(v11 + 40) = 0;
            goto LABEL_8;
          }
          goto LABEL_28;
        }
      }
      else
      {
        v21 = *(unsigned __int16 *)(v18 + 6);
        if (*(_WORD *)(v18 + 6))
          goto LABEL_13;
      }
      v23 = *v19;
LABEL_28:
      v33 = v15 + 48 * v16;
      v35 = *(_QWORD *)(v33 + 40);
      v34 = (_QWORD *)(v33 + 40);
      v28 = (*(uint64_t (**)(uint64_t *, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))(*a1 + 24))(a1, v18, *(_QWORD *)((char *)v34 - 28), *(_QWORD *)((char *)v34 - 20), v35, v23);
      if (*(unsigned __int16 *)(v18 + 6) >= 2u && *v34)
        MEMORY[0x1C3BD4840](*v34, 0x1000C8000313F17);
LABEL_31:
      v36 = (_QWORD *)a1[1];
      v37 = v36[2];
      v39 = v36[4];
      v38 = v36[5];
      if (v37 == v36[1])
        v40 = 0;
      else
        v40 = v7 + 85 * ((v37 - v36[1]) >> 3);
      v41 = v38 - 1;
      v36[5] = v38 - 1;
      if ((unint64_t)(v40 - (v38 + v39) + 1) >= 0xAA)
      {
        operator delete(*(void **)(v37 - 8));
        v36[2] -= 8;
        v36 = (_QWORD *)a1[1];
        v41 = v36[5];
      }
      if (!v41)
        return v28;
      v42 = v41 + v36[4] - 1;
      v43 = *(_QWORD *)(v36[1] + 8 * (v42 / 0x55));
      v44 = v42 % 0x55;
      v45 = *(_QWORD *)(v43 + 48 * v44 + 40);
      if (v45)
        v12 = (uint64_t *)(v45 + 8 * *(int *)(v43 + 48 * v44 + 8));
      else
        v12 = (uint64_t *)(v43 + 48 * v44 + 28);
      *v12 = v28;
      ++*(_DWORD *)(v43 + 48 * v44 + 8);
    }
  }
  LOBYTE(v58) = 0;
  v51 = MEMORY[0x1E0DE4FE0];
  v52 = MEMORY[0x1E0DE4FE0] + 64;
  v53 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v54 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v64 = MEMORY[0x1E0DE4FE0] + 64;
  v59 = v53;
  *(uint64_t *)((char *)&v60[-1] + *(_QWORD *)(v53 - 24)) = v54;
  v55 = (std::ios_base *)((char *)&v60[-1] + *(_QWORD *)(v59 - 24));
  std::ios_base::init(v55, v60);
  v55[1].__vftable = 0;
  v55[1].__fmtflags_ = -1;
  v59 = v51 + 24;
  v64 = v52;
  std::streambuf::basic_streambuf();
  v60[0] = MEMORY[0x1E0DE4FB8] + 16;
  v61 = 0u;
  v62 = 0u;
  v63 = 16;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v59, (uint64_t)"Walk NULL", 9);
  LogMessage::~LogMessage(&v58);
  return 0;
}

void sub_1C3674978(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_1C367498C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1C3BD4828](v1 + 120);
  _Unwind_Resume(a1);
}

uint64_t re2::Compiler::Finish(re2::Compiler *this)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  const void *v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  if (!*((_BYTE *)this + 32))
  {
    v3 = *((_QWORD *)this + 3);
    if (!*(_QWORD *)(v3 + 4))
      *((_DWORD *)this + 14) = 1;
    LODWORD(v4) = *((_DWORD *)this + 14);
    if ((int)v4 >= *((_DWORD *)this + 15))
    {
      v6 = (void *)*((_QWORD *)this + 6);
    }
    else
    {
      v5 = (void *)operator new[]();
      v6 = v5;
      if ((_DWORD)v4)
        bzero(v5, 8 * (int)v4);
      v7 = (const void *)*((_QWORD *)this + 6);
      v4 = *((int *)this + 14);
      memmove(v6, v7, 8 * v4);
      if (v7)
      {
        MEMORY[0x1C3BD4840](v7, 0x1000C8000313F17);
        LODWORD(v4) = *((_DWORD *)this + 14);
      }
      *((_DWORD *)this + 15) = v4;
      v3 = *((_QWORD *)this + 3);
    }
    v8 = 0;
    v9 = 0;
    v10 = 0;
    *(_QWORD *)(v3 + 32) = v6;
    *(_DWORD *)(v3 + 12) = v4;
    *((_QWORD *)this + 6) = 0;
    while (1)
    {
      if ((v8 & 0x1F) == 0)
        v9 = *(_DWORD *)(v3 + 272 + 4 * (v8 >> 5));
      *(_BYTE *)(v3 + 304 + v8) = v10;
      v10 += v9 & 1;
      v9 >>= 1;
      if (++v8 == 256)
      {
        *(_DWORD *)(v3 + 20) = *(unsigned __int8 *)(v3 + 559) + 1;
        v11 = operator new[]();
        v12 = 0;
        *(_QWORD *)(v3 + 560) = v11;
        do
        {
          *(_BYTE *)(*(_QWORD *)(v3 + 560) + *(unsigned __int8 *)(v3 + 304 + v12)) = v12;
          ++v12;
        }
        while (v12 != 256);
        re2::Prog::Optimize(*((re2::Prog **)this + 3));
      }
    }
  }
  return 0;
}

void std::deque<re2::WalkState<re2::Frag>>::__add_back_capacity(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  void *v29;
  char *v30;
  char *v31;
  void *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  BOOL v40;
  int64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  unint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _OWORD *v52;
  unint64_t v53;
  char *v54;
  char *v55;
  unint64_t v56;
  int64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 *v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  unint64_t v78;
  uint64_t v79;
  __int128 *v80;
  _OWORD *v81;
  uint64_t v82;
  __int128 v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  __int128 *v87;
  _OWORD *v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  int64_t v96;
  unint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  __int128 *v102;
  _OWORD *v103;
  uint64_t v104;
  __int128 v105;
  uint64_t v106;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x55;
  v4 = v2 - 85;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_86:
      *(_QWORD *)v5 = v8;
      goto LABEL_87;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v34 = (v5 - v9) >> 2;
      if (v5 == v9)
        v34 = 1;
      if (!(v34 >> 61))
      {
        v35 = v34 >> 2;
        v36 = 8 * v34;
        v37 = (char *)operator new(8 * v34);
        v38 = &v37[8 * v35];
        v39 = &v37[v36];
        v41 = v5 - v7;
        v40 = v5 == v7;
        v5 = v38;
        if (!v40)
        {
          v5 = &v38[v41 & 0xFFFFFFFFFFFFFFF8];
          v42 = v41 - 8;
          if ((unint64_t)(v41 - 8) >= 0x38)
          {
            v84 = &v37[8 * v35];
            v43 = v84;
            if ((unint64_t)(v84 - v7) >= 0x20)
            {
              v85 = (v42 >> 3) + 1;
              v86 = 8 * (v85 & 0x3FFFFFFFFFFFFFFCLL);
              v43 = &v38[v86];
              v87 = (__int128 *)(v6 + 3);
              v88 = v84 + 16;
              v89 = v85 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v90 = *v87;
                *(v88 - 1) = *(v87 - 1);
                *v88 = v90;
                v87 += 2;
                v88 += 2;
                v89 -= 4;
              }
              while (v89);
              if (v85 == (v85 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_79;
              v7 += v86;
            }
          }
          else
          {
            v43 = &v37[8 * v35];
          }
          do
          {
            v91 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v43 = v91;
            v43 += 8;
          }
          while (v43 != v5);
        }
        goto LABEL_79;
      }
LABEL_104:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_86;
  }
  v18 = *(char **)(a1 + 16);
  v17 = *(char **)(a1 + 24);
  v20 = *(char **)a1;
  v19 = *(char **)(a1 + 8);
  v21 = v18 - v19;
  v22 = (v18 - v19) >> 3;
  v23 = (uint64_t)&v17[-*(_QWORD *)a1];
  if (v22 < (unint64_t)(v23 >> 3))
  {
    v24 = operator new(0xFF0uLL);
    v25 = v24;
    if (v17 != v18)
    {
      *(_QWORD *)v18 = v24;
LABEL_87:
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    if (v19 != v20)
    {
      v44 = v19;
      goto LABEL_85;
    }
    v69 = (v17 - v19) >> 2;
    if (v18 == v19)
      v69 = 1;
    if (v69 >> 61)
      goto LABEL_104;
    v70 = (v69 + 3) >> 2;
    v71 = 8 * v69;
    v72 = (char *)operator new(8 * v69);
    v44 = &v72[8 * v70];
    v73 = &v72[v71];
    v74 = v44;
    if (v18 != v19)
    {
      v74 = &v44[8 * v22];
      v75 = &v72[8 * v70];
      v76 = v19;
      if ((unint64_t)(v21 - 8) > 0x37)
      {
        v77 = &v72[8 * v70];
        v75 = v77;
        v76 = v19;
        if ((unint64_t)(v77 - v19) >= 0x20)
        {
          v78 = ((unint64_t)(v21 - 8) >> 3) + 1;
          v79 = 8 * (v78 & 0x3FFFFFFFFFFFFFFCLL);
          v75 = &v44[v79];
          v80 = (__int128 *)(v19 + 16);
          v81 = v77 + 16;
          v82 = v78 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v83 = *v80;
            *(v81 - 1) = *(v80 - 1);
            *v81 = v83;
            v80 += 2;
            v81 += 2;
            v82 -= 4;
          }
          while (v82);
          if (v78 == (v78 & 0x3FFFFFFFFFFFFFFCLL))
          {
            *(_QWORD *)a1 = v72;
            *(_QWORD *)(a1 + 8) = v44;
            *(_QWORD *)(a1 + 16) = v74;
            *(_QWORD *)(a1 + 24) = v73;
LABEL_84:
            operator delete(v19);
            v44 = *(char **)(a1 + 8);
LABEL_85:
            *((_QWORD *)v44 - 1) = v25;
            v7 = *(char **)(a1 + 8);
            v5 = *(char **)(a1 + 16);
            *(_QWORD *)(a1 + 8) = v7 - 8;
            v8 = *((_QWORD *)v7 - 1);
            *(_QWORD *)(a1 + 8) = v7;
            if (v5 != *(char **)(a1 + 24))
              goto LABEL_86;
            v9 = *(char **)a1;
            v10 = (uint64_t)&v7[-*(_QWORD *)a1];
            if ((unint64_t)v7 <= *(_QWORD *)a1)
            {
              v93 = (v5 - v9) >> 2;
              if (v5 == v9)
                v93 = 1;
              if (!(v93 >> 61))
              {
                v94 = v93 >> 2;
                v95 = 8 * v93;
                v37 = (char *)operator new(8 * v93);
                v38 = &v37[8 * v94];
                v39 = &v37[v95];
                v96 = v5 - v7;
                v40 = v5 == v7;
                v5 = v38;
                if (!v40)
                {
                  v5 = &v38[v96 & 0xFFFFFFFFFFFFFFF8];
                  v97 = v96 - 8;
                  if ((unint64_t)(v96 - 8) >= 0x38)
                  {
                    v99 = &v37[8 * v94];
                    v98 = v99;
                    if ((unint64_t)(v99 - v7) >= 0x20)
                    {
                      v100 = (v97 >> 3) + 1;
                      v101 = 8 * (v100 & 0x3FFFFFFFFFFFFFFCLL);
                      v98 = &v38[v101];
                      v102 = (__int128 *)(v7 + 16);
                      v103 = v99 + 16;
                      v104 = v100 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        v105 = *v102;
                        *(v103 - 1) = *(v102 - 1);
                        *v103 = v105;
                        v102 += 2;
                        v103 += 2;
                        v104 -= 4;
                      }
                      while (v104);
                      if (v100 == (v100 & 0x3FFFFFFFFFFFFFFCLL))
                        goto LABEL_79;
                      v7 += v101;
                    }
                  }
                  else
                  {
                    v98 = &v37[8 * v94];
                  }
                  do
                  {
                    v106 = *(_QWORD *)v7;
                    v7 += 8;
                    *(_QWORD *)v98 = v106;
                    v98 += 8;
                  }
                  while (v98 != v5);
                }
LABEL_79:
                *(_QWORD *)a1 = v37;
                *(_QWORD *)(a1 + 8) = v38;
                *(_QWORD *)(a1 + 16) = v5;
                *(_QWORD *)(a1 + 24) = v39;
                if (v9)
                {
                  operator delete(v9);
                  v5 = *(char **)(a1 + 16);
                }
                goto LABEL_86;
              }
              goto LABEL_104;
            }
            goto LABEL_5;
          }
          v76 = &v19[v79];
        }
      }
      do
      {
        v92 = *(_QWORD *)v76;
        v76 += 8;
        *(_QWORD *)v75 = v92;
        v75 += 8;
      }
      while (v75 != v74);
    }
    *(_QWORD *)a1 = v72;
    *(_QWORD *)(a1 + 8) = v44;
    *(_QWORD *)(a1 + 16) = v74;
    *(_QWORD *)(a1 + 24) = v73;
    if (!v19)
      goto LABEL_85;
    goto LABEL_84;
  }
  v26 = v23 >> 2;
  if (v17 == v20)
    v27 = 1;
  else
    v27 = v26;
  if (v27 >> 61)
    goto LABEL_104;
  v28 = (char *)operator new(8 * v27);
  v29 = operator new(0xFF0uLL);
  v30 = &v28[8 * v22];
  v31 = &v28[8 * v27];
  if (v22 == v27)
  {
    v32 = v29;
    if (v21 < 1)
    {
      if (v18 == v19)
        v45 = 1;
      else
        v45 = v21 >> 2;
      if (v45 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v30 = (char *)operator new(8 * v45);
      v31 = &v30[8 * v45];
      operator delete(v28);
      v19 = *(char **)(a1 + 8);
      v18 = *(char **)(a1 + 16);
      v28 = v30;
    }
    else
    {
      v33 = v22 + 2;
      if (v22 >= -1)
        v33 = v22 + 1;
      v30 -= 8 * (v33 >> 1);
    }
    v29 = v32;
  }
  *(_QWORD *)v30 = v29;
  v46 = v30 + 8;
  if (v18 != v19)
  {
    do
    {
      if (v30 != v28)
        goto LABEL_41;
      if (v46 < v31)
      {
        v49 = (v31 - v46) >> 3;
        if (v49 >= -1)
          v50 = v49 + 1;
        else
          v50 = v49 + 2;
        v51 = v50 >> 1;
        v30 = &v28[8 * (v50 >> 1)];
        v52 = v28;
        if (v46 != v28)
        {
          memmove(v30, v28, v46 - v28);
          v52 = v46;
        }
        v46 = (char *)v52 + 8 * v51;
        goto LABEL_41;
      }
      if (v31 == v28)
        v53 = 1;
      else
        v53 = (v31 - v28) >> 2;
      if (v53 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v54 = (char *)operator new(8 * v53);
      v55 = v54;
      v56 = (v53 + 3) >> 2;
      v30 = &v54[8 * v56];
      v57 = v46 - v28;
      v40 = v46 == v28;
      v46 = v30;
      if (!v40)
      {
        v46 = &v30[v57 & 0xFFFFFFFFFFFFFFF8];
        v58 = v57 - 8;
        v59 = &v54[8 * v56];
        v60 = v28;
        if (v58 >= 0x38)
        {
          v61 = 8 * v56;
          v59 = &v54[8 * v56];
          v60 = v28;
          if ((unint64_t)(v59 - v28) >= 0x20)
          {
            v62 = (v58 >> 3) + 1;
            v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
            v59 = &v30[v63];
            v64 = (__int128 *)(v28 + 16);
            v65 = &v54[v61 + 16];
            v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v67 = *v64;
              *((_OWORD *)v65 - 1) = *(v64 - 1);
              *(_OWORD *)v65 = v67;
              v64 += 2;
              v65 += 32;
              v66 -= 4;
            }
            while (v66);
            if (v62 == (v62 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_40;
            v60 = &v28[v63];
          }
        }
        do
        {
          v68 = *(_QWORD *)v60;
          v60 += 8;
          *(_QWORD *)v59 = v68;
          v59 += 8;
        }
        while (v59 != v46);
      }
LABEL_40:
      v31 = &v54[8 * v53];
      operator delete(v28);
      v28 = v55;
LABEL_41:
      v48 = *((_QWORD *)v18 - 1);
      v18 -= 8;
      *((_QWORD *)v30 - 1) = v48;
      v30 -= 8;
    }
    while (v18 != *(char **)(a1 + 8));
  }
  v47 = *(char **)a1;
  *(_QWORD *)a1 = v28;
  *(_QWORD *)(a1 + 8) = v30;
  *(_QWORD *)(a1 + 16) = v46;
  *(_QWORD *)(a1 + 24) = v31;
  if (v47)
    operator delete(v47);
}

void sub_1C3675164(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E0DE4E98], MEMORY[0x1E0DE4390]);
}

uint64_t re2::Regexp::CompileToProg(re2::Regexp *this, uint64_t a2)
{
  return re2::Compiler::Compile(this, 0, a2);
}

uint64_t re2::Regexp::CompileToReverseProg(re2::Regexp *this, uint64_t a2)
{
  return re2::Compiler::Compile(this, (re2::Regexp *)1, a2);
}

re2::Prog *re2::Compiler::CompileSet(re2::RE2::Options *a1, int a2, re2::Regexp *a3)
{
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  unint64_t v10;
  re2::Prog *v11;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17[2];
  char v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;

  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v19 = 0u;
  re2::Compiler::Compiler((re2::Compiler *)&v19);
  v6 = re2::RE2::Options::ParseFlags(a1);
  v7 = *((_QWORD *)a1 + 1);
  *(_DWORD *)(*((_QWORD *)&v20 + 1) + 24) = v6;
  if ((v6 & 0x20) != 0)
    DWORD1(v21) = 2;
  *(_QWORD *)&v23 = v7;
  if ((unint64_t)(v7 - 584) >> 27)
    v8 = 0x1000000;
  else
    v8 = (unint64_t)(v7 - 584) >> 3;
  if ((unint64_t)v7 < 0x249)
    v8 = 0;
  if (v7 >= 1)
    v9 = v8;
  else
    v9 = 100000;
  DWORD2(v25) = a2;
  HIDWORD(v21) = v9;
  DWORD1(v20) = 2 * v9;
  v10 = re2::Regexp::Walker<re2::Frag>::WalkInternal((uint64_t *)&v19, (uint64_t)a3);
  re2::Regexp::Decref(a3);
  if ((_BYTE)v21)
    goto LABEL_12;
  if (!a2)
  {
    v13 = re2::Compiler::ByteRange((re2::Compiler *)&v19, 0, 255, 0);
    v14 = re2::Compiler::Star((uint64_t)&v19, v13, 1);
    LODWORD(v10) = re2::Compiler::Cat((uint64_t)&v19, v14, v10);
  }
  v15 = *((_QWORD *)&v20 + 1);
  *(_DWORD *)(*((_QWORD *)&v20 + 1) + 4) = v10;
  *(_DWORD *)(v15 + 8) = v10;
  *(_WORD *)v15 = 257;
  v16 = (unsigned __int8 *)re2::Compiler::Finish((re2::Compiler *)&v19);
  v11 = (re2::Prog *)v16;
  if (v16)
  {
    v18 = 0;
    v17[0] = (uint64_t)"hello, world";
    v17[1] = 12;
    re2::Prog::SearchDFA(v16, v17, v17, 1, 3, 0, &v18);
    if (v18)
    {
      re2::Prog::~Prog(v11);
      MEMORY[0x1C3BD4858]();
LABEL_12:
      v11 = 0;
    }
  }
  re2::Compiler::~Compiler((re2::Compiler *)&v19);
  return v11;
}

void sub_1C3675374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  re2::Compiler::~Compiler((re2::Compiler *)va);
  _Unwind_Resume(a1);
}

re2::FilteredRE2 *re2::FilteredRE2::FilteredRE2(re2::FilteredRE2 *this)
{
  uint64_t v2;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_BYTE *)this + 24) = 0;
  *((_QWORD *)this + 2) = 0;
  v2 = operator new();
  *(_QWORD *)v2 = 0;
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = v2 + 32;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 105) = 0u;
  *((_QWORD *)this + 4) = v2;
  return this;
}

{
  uint64_t v2;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_BYTE *)this + 24) = 0;
  *((_QWORD *)this + 2) = 0;
  v2 = operator new();
  *(_QWORD *)v2 = 0;
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = v2 + 32;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 105) = 0u;
  *((_QWORD *)this + 4) = v2;
  return this;
}

void sub_1C3675408(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C3675490(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void re2::FilteredRE2::~FilteredRE2(re2::FilteredRE2 *this)
{
  re2::RE2 **v2;
  re2::RE2 **v3;
  unint64_t v5;

  v2 = *(re2::RE2 ***)this;
  v3 = (re2::RE2 **)*((_QWORD *)this + 1);
  if (v3 == v2)
  {
    v2 = v3;
  }
  else
  {
    v5 = 0;
    do
    {
      if (v2[v5])
      {
        re2::RE2::~RE2(v2[v5]);
        MEMORY[0x1C3BD4858]();
        v2 = *(re2::RE2 ***)this;
        v3 = (re2::RE2 **)*((_QWORD *)this + 1);
      }
      ++v5;
    }
    while (v5 < v3 - v2);
  }
  if (*((_QWORD *)this + 4))
  {
    re2::PrefilterTree::~PrefilterTree(*((re2::PrefilterTree **)this + 4));
    MEMORY[0x1C3BD4858]();
    v2 = *(re2::RE2 ***)this;
  }
  if (v2)
  {
    *((_QWORD *)this + 1) = v2;
    operator delete(v2);
  }
}

uint64_t re2::FilteredRE2::Add(re2::FilteredRE2 *this, const re2::StringPiece *a2, const re2::RE2::Options *a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::ios_base *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _BYTE *v31;
  uint64_t *v32;
  char *v33;
  unint64_t v34;
  uint64_t v35;
  _OWORD *v36;
  uint64_t *v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  void *v42;
  uint64_t v43;
  uint64_t v44[8];
  __int128 v45;
  __int128 v46;
  int v47;
  uint64_t v48;

  v8 = operator new();
  *(_QWORD *)(v8 + 8) = 0;
  *(_DWORD *)(v8 + 16) = 0;
  *(_DWORD *)(v8 + 24) = 1;
  *(_WORD *)(v8 + 28) = 0;
  *(_BYTE *)(v8 + 30) = 1;
  *(_QWORD *)(v8 + 32) = 0x800000;
  *(_DWORD *)(v8 + 40) = 0;
  *(_BYTE *)(v8 + 44) = 1;
  *(_QWORD *)(v8 + 136) = 0;
  *(_QWORD *)(v8 + 144) = 0;
  *(_QWORD *)(v8 + 152) = 0;
  *(_QWORD *)(v8 + 45) = 0;
  *(_QWORD *)(v8 + 61) = 0;
  *(_QWORD *)(v8 + 53) = 0;
  *(_DWORD *)(v8 + 68) = 0;
  re2::RE2::Init((re2::RE2 *)v8, a2, a3);
  v9 = *(unsigned int *)(v8 + 128);
  if ((_DWORD)v9)
  {
    if (*((_BYTE *)a3 + 6))
    {
      LOBYTE(v42) = 0;
      v10 = MEMORY[0x1E0DE4FE0];
      v11 = MEMORY[0x1E0DE4FE0] + 64;
      v12 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
      v13 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
      v48 = MEMORY[0x1E0DE4FE0] + 64;
      v43 = v12;
      *(uint64_t *)((char *)&v44[-1] + *(_QWORD *)(v12 - 24)) = v13;
      v14 = (std::ios_base *)((char *)&v44[-1] + *(_QWORD *)(v43 - 24));
      std::ios_base::init(v14, v44);
      v14[1].__vftable = 0;
      v14[1].__fmtflags_ = -1;
      v43 = v10 + 24;
      v48 = v11;
      std::streambuf::basic_streambuf();
      v44[0] = MEMORY[0x1E0DE4FB8] + 16;
      v45 = 0u;
      v46 = 0u;
      v47 = 16;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v43, (uint64_t)"Couldn't compile regular expression, skipping: ", 47);
      v15 = (_QWORD *)std::ostream::operator<<();
      v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" due to error ", 14);
      v17 = *(_QWORD *)(v8 + 120);
      v18 = *(char *)(v17 + 23);
      if (v18 >= 0)
        v19 = *(_QWORD *)(v8 + 120);
      else
        v19 = *(_QWORD *)v17;
      if (v18 >= 0)
        v20 = *(unsigned __int8 *)(v17 + 23);
      else
        v20 = *(_QWORD *)(v17 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v19, v20);
      LogMessage::~LogMessage(&v42);
    }
    re2::RE2::~RE2((re2::RE2 *)v8);
    MEMORY[0x1C3BD4858](v21);
  }
  else
  {
    v22 = *(uint64_t **)this;
    v23 = (uint64_t *)*((_QWORD *)this + 1);
    v24 = (uint64_t)v23 - *(_QWORD *)this;
    v25 = v24 >> 3;
    *a4 = v24 >> 3;
    v26 = *((_QWORD *)this + 2);
    if ((unint64_t)v23 >= v26)
    {
      v28 = v25 + 1;
      if ((unint64_t)(v25 + 1) >> 61)
        std::vector<re2::RE2 *>::__throw_length_error[abi:ne180100]();
      v29 = v26 - (_QWORD)v22;
      if (v29 >> 2 > v28)
        v28 = v29 >> 2;
      if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
        v30 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v30 = v28;
      if (v30)
      {
        if (v30 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v31 = operator new(8 * v30);
      }
      else
      {
        v31 = 0;
      }
      v32 = (uint64_t *)&v31[8 * v25];
      v33 = &v31[8 * v30];
      *v32 = v8;
      v27 = v32 + 1;
      if (v23 == v22)
      {
        v22 = v23;
      }
      else
      {
        v34 = (char *)v23 - (char *)v22 - 8;
        if (v34 < 0x58)
          goto LABEL_40;
        if ((char *)v23 - v31 - (v24 & 0xFFFFFFFFFFFFFFF8) < 0x20)
          goto LABEL_40;
        v35 = (v34 >> 3) + 1;
        v36 = &v31[8 * v25 - 16];
        v37 = v23 - 2;
        v38 = v35 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v39 = *(_OWORD *)v37;
          *(v36 - 1) = *((_OWORD *)v37 - 1);
          *v36 = v39;
          v36 -= 2;
          v37 -= 4;
          v38 -= 4;
        }
        while (v38);
        v32 -= v35 & 0x3FFFFFFFFFFFFFFCLL;
        v23 -= v35 & 0x3FFFFFFFFFFFFFFCLL;
        if (v35 != (v35 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            v40 = *--v23;
            *--v32 = v40;
          }
          while (v23 != v22);
          v22 = *(uint64_t **)this;
        }
      }
      *(_QWORD *)this = v32;
      *((_QWORD *)this + 1) = v27;
      *((_QWORD *)this + 2) = v33;
      if (v22)
        operator delete(v22);
    }
    else
    {
      *v23 = v8;
      v27 = v23 + 1;
    }
    *((_QWORD *)this + 1) = v27;
  }
  return v9;
}

void sub_1C367586C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1C3BD4828](v1 + 120);
  _Unwind_Resume(a1);
}

void sub_1C3675894(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 159) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 71) < 0)
    operator delete(*(void **)(v1 + 48));
  MEMORY[0x1C3BD4858](v1, 0x1072C4099187B91);
  _Unwind_Resume(a1);
}

void sub_1C36758D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  LogMessage::~LogMessage(&a9);
  _Unwind_Resume(a1);
}

void std::vector<re2::RE2 *>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

unint64_t re2::FilteredRE2::SlowFirstMatch(re2::FilteredRE2 *this, const re2::StringPiece *a2)
{
  uint64_t v2;
  unint64_t v5;

  v2 = *(_QWORD *)this;
  if (*((_QWORD *)this + 1) == *(_QWORD *)this)
    return 0xFFFFFFFFLL;
  v5 = 0;
  while ((re2::RE2::DoMatch(*(_QWORD *)(v2 + 8 * v5), (uint64_t)a2, 0, 0, 0, 0) & 1) == 0)
  {
    ++v5;
    v2 = *(_QWORD *)this;
    if (v5 >= (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3)
      return 0xFFFFFFFFLL;
  }
  return v5;
}

void re2::FilteredRE2::PrintPrefilter(re2::PrefilterTree **this, int a2)
{
  re2::PrefilterTree::PrintPrefilter(this[4], a2);
}

void sub_1C3675BD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C3675CF0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C3675D9C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C3676758(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C3677598(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C3677A88(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C3678DDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t SGMIMetricsMailIntelligenceForMessageReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t result;
  uint64_t v35;
  unint64_t v36;
  int v37;
  SGMIMetricsMailAttachmentHistogram *v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      v13 = v12 + 1;
      if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
        break;
      v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v15 = v9++ >= 9;
      if (v15)
      {
        v10 = 0;
        v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v16 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v18 = 0;
        v19 = 0;
        v20 = 0;
        *(_BYTE *)(a1 + 80) |= 1u;
        while (1)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          v23 = v22 + 1;
          if (v22 == -1 || v23 > *(_QWORD *)(a2 + *v4))
            break;
          v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v23;
          v20 |= (unint64_t)(v24 & 0x7F) << v18;
          if ((v24 & 0x80) == 0)
            goto LABEL_78;
          v18 += 7;
          v15 = v19++ >= 9;
          if (v15)
          {
            LODWORD(v20) = 0;
            goto LABEL_80;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_78:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v20) = 0;
LABEL_80:
        v64 = 24;
        goto LABEL_101;
      case 2u:
        PBReaderReadString();
        v25 = objc_claimAutoreleasedReturnValue();
        v26 = 40;
        goto LABEL_28;
      case 3u:
        PBReaderReadString();
        v25 = objc_claimAutoreleasedReturnValue();
        v26 = 32;
LABEL_28:
        v27 = *(void **)(a1 + v26);
        *(_QWORD *)(a1 + v26) = v25;

        goto LABEL_102;
      case 4u:
        v28 = 0;
        v29 = 0;
        v20 = 0;
        *(_BYTE *)(a1 + 80) |= 0x40u;
        while (2)
        {
          v30 = *v3;
          v31 = *(_QWORD *)(a2 + v30);
          v32 = v31 + 1;
          if (v31 == -1 || v32 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v33 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v31);
            *(_QWORD *)(a2 + v30) = v32;
            v20 |= (unint64_t)(v33 & 0x7F) << v28;
            if (v33 < 0)
            {
              v28 += 7;
              v15 = v29++ >= 9;
              if (v15)
              {
                LODWORD(v20) = 0;
                goto LABEL_84;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v20) = 0;
LABEL_84:
        v64 = 76;
        goto LABEL_101;
      case 0xAu:
        *(_BYTE *)(a1 + 80) |= 0x20u;
        v35 = *v3;
        v36 = *(_QWORD *)(a2 + v35);
        if (v36 <= 0xFFFFFFFFFFFFFFFBLL && v36 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v37 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v36);
          *(_QWORD *)(a2 + v35) = v36 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v37 = 0;
        }
        *(_DWORD *)(a1 + 72) = v37;
        goto LABEL_102;
      case 0xBu:
        v38 = objc_alloc_init(SGMIMetricsMailAttachmentHistogram);
        objc_msgSend((id)a1, "addMailAttachmentHistogram:", v38);
        if (!PBReaderPlaceMark() || !SGMIMetricsMailAttachmentHistogramReadFrom((uint64_t)v38, a2))
          goto LABEL_107;
        goto LABEL_76;
      case 0xCu:
        v39 = 0;
        v40 = 0;
        v20 = 0;
        *(_BYTE *)(a1 + 80) |= 2u;
        while (2)
        {
          v41 = *v3;
          v42 = *(_QWORD *)(a2 + v41);
          v43 = v42 + 1;
          if (v42 == -1 || v43 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v42);
            *(_QWORD *)(a2 + v41) = v43;
            v20 |= (unint64_t)(v44 & 0x7F) << v39;
            if (v44 < 0)
            {
              v39 += 7;
              v15 = v40++ >= 9;
              if (v15)
              {
                LODWORD(v20) = 0;
                goto LABEL_88;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v20) = 0;
LABEL_88:
        v64 = 56;
        goto LABEL_101;
      case 0xDu:
        v45 = 0;
        v46 = 0;
        v20 = 0;
        *(_BYTE *)(a1 + 80) |= 4u;
        while (2)
        {
          v47 = *v3;
          v48 = *(_QWORD *)(a2 + v47);
          v49 = v48 + 1;
          if (v48 == -1 || v49 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v50 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v48);
            *(_QWORD *)(a2 + v47) = v49;
            v20 |= (unint64_t)(v50 & 0x7F) << v45;
            if (v50 < 0)
            {
              v45 += 7;
              v15 = v46++ >= 9;
              if (v15)
              {
                LODWORD(v20) = 0;
                goto LABEL_92;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v20) = 0;
LABEL_92:
        v64 = 60;
        goto LABEL_101;
      case 0xEu:
        v51 = 0;
        v52 = 0;
        v20 = 0;
        *(_BYTE *)(a1 + 80) |= 0x10u;
        while (2)
        {
          v53 = *v3;
          v54 = *(_QWORD *)(a2 + v53);
          v55 = v54 + 1;
          if (v54 == -1 || v55 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v56 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v54);
            *(_QWORD *)(a2 + v53) = v55;
            v20 |= (unint64_t)(v56 & 0x7F) << v51;
            if (v56 < 0)
            {
              v51 += 7;
              v15 = v52++ >= 9;
              if (v15)
              {
                LODWORD(v20) = 0;
                goto LABEL_96;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v20) = 0;
LABEL_96:
        v64 = 68;
        goto LABEL_101;
      case 0xFu:
        v57 = 0;
        v58 = 0;
        v20 = 0;
        *(_BYTE *)(a1 + 80) |= 8u;
        while (2)
        {
          v59 = *v3;
          v60 = *(_QWORD *)(a2 + v59);
          v61 = v60 + 1;
          if (v60 == -1 || v61 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v62 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v60);
            *(_QWORD *)(a2 + v59) = v61;
            v20 |= (unint64_t)(v62 & 0x7F) << v57;
            if (v62 < 0)
            {
              v57 += 7;
              v15 = v58++ >= 9;
              if (v15)
              {
                LODWORD(v20) = 0;
                goto LABEL_100;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v20) = 0;
LABEL_100:
        v64 = 64;
LABEL_101:
        *(_DWORD *)(a1 + v64) = v20;
        goto LABEL_102;
      case 0x14u:
        v38 = objc_alloc_init(SGMIMetricsInferenceAndGroundTruth);
        v63 = 8;
        goto LABEL_74;
      case 0x15u:
        v38 = objc_alloc_init(SGMIMetricsInferenceAndGroundTruth);
        v63 = 16;
LABEL_74:
        objc_storeStrong((id *)(a1 + v63), v38);
        if (PBReaderPlaceMark()
          && (SGMIMetricsInferenceAndGroundTruthReadFrom((uint64_t)v38, a2) & 1) != 0)
        {
LABEL_76:
          PBReaderRecallMark();

LABEL_102:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_107:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_102;
    }
  }
}

id appendFeatureSuffix(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  void *v6;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v4, "length"))
    v5 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("%@__%@"), v3, v4);
  else
    v5 = v3;
  v6 = v5;

  return v6;
}

void __lastnames_block_invoke()
{
  void *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  objc_msgSend(MEMORY[0x1E0CB34D0], "bundleForClass:", objc_opt_class());
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "pathForResource:ofType:inDirectory:", CFSTR("lastnames"), CFSTR("trie"), CFSTR("/"));
  v7 = (id)objc_claimAutoreleasedReturnValue();

  if (!v7)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_PASCFBurstTrie *lastnames(void)_block_invoke");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("SGNameMappingTransformer.m"), 53, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("path"));

  }
  v1 = objc_msgSend(objc_alloc(MEMORY[0x1E0D81548]), "initWithPath:", v7);
  v2 = (void *)lastnames_trie;
  lastnames_trie = v1;

  if (!lastnames_trie)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_PASCFBurstTrie *lastnames(void)_block_invoke");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, CFSTR("SGNameMappingTransformer.m"), 55, CFSTR("Could not load lastnames trie: %@"), v7);

  }
}

void __firstnames_block_invoke()
{
  void *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  objc_msgSend(MEMORY[0x1E0CB34D0], "bundleForClass:", objc_opt_class());
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "pathForResource:ofType:inDirectory:", CFSTR("firstnames"), CFSTR("trie"), CFSTR("/"));
  v7 = (id)objc_claimAutoreleasedReturnValue();

  if (!v7)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_PASCFBurstTrie *firstnames(void)_block_invoke");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("SGNameMappingTransformer.m"), 41, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("path"));

  }
  v1 = objc_msgSend(objc_alloc(MEMORY[0x1E0D81548]), "initWithPath:", v7);
  v2 = (void *)firstnames_trie;
  firstnames_trie = v1;

  if (!firstnames_trie)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_PASCFBurstTrie *firstnames(void)_block_invoke");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, CFSTR("SGNameMappingTransformer.m"), 43, CFSTR("Could not load firstnames trie: %@"), v7);

  }
}

double re2::RE2::Set::Set(uint64_t a1, uint64_t a2, int a3)
{
  double result;

  *(_DWORD *)a1 = 1;
  *(_WORD *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 6) = 1;
  *(_QWORD *)(a1 + 8) = 0x800000;
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 20) = 1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_WORD *)(a1 + 5) = *(_WORD *)(a2 + 5);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  *(_DWORD *)(a1 + 24) = a3;
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  return result;
}

{
  double result;

  *(_DWORD *)a1 = 1;
  *(_WORD *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 6) = 1;
  *(_QWORD *)(a1 + 8) = 0x800000;
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 20) = 1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_WORD *)(a1 + 5) = *(_WORD *)(a2 + 5);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  *(_DWORD *)(a1 + 24) = a3;
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  return result;
}

void re2::RE2::Set::~Set(re2::RE2::Set *this)
{
  re2::Regexp **v2;
  unint64_t v3;

  v2 = (re2::Regexp **)*((_QWORD *)this + 5);
  if (v2 != *((re2::Regexp ***)this + 4))
  {
    v3 = 0;
    v2 = (re2::Regexp **)*((_QWORD *)this + 4);
    do
    {
      re2::Regexp::Decref(v2[v3++]);
      v2 = (re2::Regexp **)*((_QWORD *)this + 4);
    }
    while (v3 < (uint64_t)(*((_QWORD *)this + 5) - (_QWORD)v2) >> 3);
  }
  if (*((_QWORD *)this + 7))
  {
    re2::Prog::~Prog(*((re2::Prog **)this + 7));
    MEMORY[0x1C3BD4858]();
    v2 = (re2::Regexp **)*((_QWORD *)this + 4);
  }
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
}

{
  re2::Regexp **v2;
  unint64_t v3;

  v2 = (re2::Regexp **)*((_QWORD *)this + 5);
  if (v2 != *((re2::Regexp ***)this + 4))
  {
    v3 = 0;
    v2 = (re2::Regexp **)*((_QWORD *)this + 4);
    do
    {
      re2::Regexp::Decref(v2[v3++]);
      v2 = (re2::Regexp **)*((_QWORD *)this + 4);
    }
    while (v3 < (uint64_t)(*((_QWORD *)this + 5) - (_QWORD)v2) >> 3);
  }
  if (*((_QWORD *)this + 7))
  {
    re2::Prog::~Prog(*((re2::Prog **)this + 7));
    MEMORY[0x1C3BD4858]();
    v2 = (re2::Regexp **)*((_QWORD *)this + 4);
  }
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
}

void re2::RegexpStatus::~RegexpStatus(re2::RegexpStatus *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 3);
  if (v1)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    MEMORY[0x1C3BD4858](v1, 0x1012C40EC159624);
  }
}

BOOL re2::RE2::Set::Compile(re2::RE2::Set *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::ios_base *v5;
  unint64_t v8;
  char *v9;
  re2::Regexp *v10;
  re2::Prog *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::ios_base *v16;
  void *v17;
  uint64_t v18;
  _QWORD v19[8];
  __int128 v20;
  __int128 v21;
  int v22;
  uint64_t v23;

  if (*((_BYTE *)this + 64))
  {
    LOBYTE(v17) = 0;
    v1 = MEMORY[0x1E0DE4FE0];
    v2 = MEMORY[0x1E0DE4FE0] + 64;
    v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v4 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v23 = MEMORY[0x1E0DE4FE0] + 64;
    v18 = v3;
    *(_QWORD *)((char *)&v19[-1] + *(_QWORD *)(v3 - 24)) = v4;
    v5 = (std::ios_base *)((char *)&v19[-1] + *(_QWORD *)(v18 - 24));
    std::ios_base::init(v5, v19);
    v5[1].__vftable = 0;
    v5[1].__fmtflags_ = -1;
    v18 = v1 + 24;
    v23 = v2;
    std::streambuf::basic_streambuf();
    v19[0] = MEMORY[0x1E0DE4FB8] + 16;
    v20 = 0u;
    v21 = 0u;
    v22 = 16;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)"RE2::Set::Compile multiple times", 32);
LABEL_3:
    LogMessage::~LogMessage(&v17);
    return 0;
  }
  *((_BYTE *)this + 64) = 1;
  v8 = re2::RE2::Options::ParseFlags(this);
  v9 = re2::Regexp::ConcatOrAlternate(6, *((void ***)this + 4), (*((_QWORD *)this + 5) - *((_QWORD *)this + 4)) >> 3, v8, 1);
  *((_QWORD *)this + 5) = *((_QWORD *)this + 4);
  v10 = re2::Regexp::Simplify((re2::Regexp *)v9);
  re2::Regexp::Decref((re2::Regexp *)v9);
  if (v10)
  {
    v11 = re2::Compiler::CompileSet(this, *((_DWORD *)this + 6), v10);
    *((_QWORD *)this + 7) = v11;
    return v11 != 0;
  }
  else
  {
    if (*((_BYTE *)this + 6))
    {
      LOBYTE(v17) = 0;
      v12 = MEMORY[0x1E0DE4FE0];
      v13 = MEMORY[0x1E0DE4FE0] + 64;
      v14 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
      v15 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
      v23 = MEMORY[0x1E0DE4FE0] + 64;
      v18 = v14;
      *(_QWORD *)((char *)&v19[-1] + *(_QWORD *)(v14 - 24)) = v15;
      v16 = (std::ios_base *)((char *)&v19[-1] + *(_QWORD *)(v18 - 24));
      std::ios_base::init(v16, v19);
      v16[1].__vftable = 0;
      v16[1].__fmtflags_ = -1;
      v18 = v12 + 24;
      v23 = v13;
      std::streambuf::basic_streambuf();
      v19[0] = MEMORY[0x1E0DE4FB8] + 16;
      v20 = 0u;
      v21 = 0u;
      v22 = 16;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)"Error simplifying during Compile.", 33);
      goto LABEL_3;
    }
    return 0;
  }
}

void sub_1C367D0B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  LogMessage::~LogMessage(&a9);
  _Unwind_Resume(a1);
}

_DWORD *re2::Prog::Inst::InitAlt(_DWORD *this, int a2, int a3)
{
  *this = 8 * a2;
  this[1] = a3;
  return this;
}

uint64_t re2::Prog::Inst::InitByteRange(uint64_t this, char a2, char a3, char a4, int a5)
{
  *(_DWORD *)this = (8 * a5) | 2;
  *(_BYTE *)(this + 4) = a2;
  *(_BYTE *)(this + 5) = a3;
  *(_BYTE *)(this + 6) = a4;
  return this;
}

int *re2::Prog::Inst::InitCapture(int *this, int a2, int a3)
{
  *this = (8 * a3) | 3;
  this[1] = a2;
  return this;
}

int *re2::Prog::Inst::InitEmptyWidth(int *result, int a2, int a3)
{
  *result = (8 * a3) | 4;
  result[1] = a2;
  return result;
}

unsigned int *re2::Prog::Inst::InitMatch(unsigned int *this, unsigned int a2)
{
  *this = *this & 0xFFFFFFF8 | 5;
  this[1] = a2;
  return this;
}

unsigned int *re2::Prog::Inst::InitNop(unsigned int *this)
{
  *this = *this & 0xFFFFFFF8 | 6;
  return this;
}

_DWORD *re2::Prog::Inst::InitFail(_DWORD *this)
{
  *this |= 7u;
  return this;
}

void re2::Prog::Inst::Dump(re2::Prog::Inst *this)
{
  __asm { BR              X12 }
}

std::string *sub_1C367D1AC@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  unsigned int v2;

  return re2::StringPrintf((re2 *)"alt -> %d | %d", a2, v2 >> 3, *(unsigned int *)(a1 + 4));
}

std::string *sub_1C367D27C@<X0>(std::string *a1@<X8>)
{
  return re2::StringPrintf((re2 *)"fail", a1);
}

re2::Prog *re2::Prog::Prog(re2::Prog *this)
{
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  if (pthread_rwlock_init((pthread_rwlock_t *)((char *)this + 40), 0))
    abort();
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 31) = 0;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_QWORD *)this + 70) = 0;
  *((_QWORD *)this + 72) = 0;
  *((_QWORD *)this + 71) = 0;
  return this;
}

{
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  if (pthread_rwlock_init((pthread_rwlock_t *)((char *)this + 40), 0))
    abort();
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 31) = 0;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_QWORD *)this + 70) = 0;
  *((_QWORD *)this + 72) = 0;
  *((_QWORD *)this + 71) = 0;
  return this;
}

void re2::Prog::~Prog(re2::Prog *this)
{
  void (*v2)(_QWORD);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (void (*)(_QWORD))*((_QWORD *)this + 33);
  if (v2)
  {
    if (*((_QWORD *)this + 30))
      v2(*((_QWORD *)this + 30));
    if (*((_QWORD *)this + 31))
      (*((void (**)(_QWORD))this + 33))(*((_QWORD *)this + 31));
  }
  v3 = *((_QWORD *)this + 71);
  if (v3)
    MEMORY[0x1C3BD4840](v3, 0x1000C8077774924);
  v4 = *((_QWORD *)this + 4);
  if (v4)
    MEMORY[0x1C3BD4840](v4, 0x1000C8000313F17);
  v5 = *((_QWORD *)this + 70);
  if (v5)
    MEMORY[0x1C3BD4840](v5, 0x1000C8077774924);
  if (pthread_rwlock_destroy((pthread_rwlock_t *)((char *)this + 40)))
    abort();
}

void re2::Prog::Dump(re2::Prog *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  _DWORD *v5;
  unsigned int v6;
  std::string *v7;
  std::string __p;
  int v9;
  unsigned int v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  std::string::value_type __s[8];
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)__s = 0;
  v15 = 0;
  v16 = 0;
  v10 = *((_DWORD *)this + 3);
  v4 = operator new[]();
  v11 = v4;
  v5 = (_DWORD *)operator new[]();
  v12 = v5;
  v9 = 0;
  v6 = *((_DWORD *)this + 1);
  if (v6 && v10 > v6)
  {
    *(_DWORD *)(v4 + 4 * (int)v6) = 0;
    *v5 = v6;
    v9 = 1;
  }
  v13 = 0;
  re2::ProgToString(&__p, this, (re2::SparseSet *)&v9);
  v7 = std::string::insert(&__p, 0, __s, 0);
  *a2 = *v7;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v11)
    MEMORY[0x1C3BD4840](v11, 0x1000C8052888210);
  if (v12)
    MEMORY[0x1C3BD4840](v12, 0x1000C8052888210);
  if (SHIBYTE(v16) < 0)
    operator delete(*(void **)__s);
}

void sub_1C367D590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a14 < 0)
    operator delete(__p);
  re2::SparseSet::~SparseSet((re2::SparseSet *)&a15);
  if (a24 < 0)
    operator delete(a19);
  _Unwind_Resume(a1);
}

void re2::ProgToString(std::string *this, re2::Prog *a2, re2::SparseSet *a3)
{
  int *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  re2::Prog::Inst *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *__p;
  char v26;

  this->__r_.__value_.__r.__words[0] = 0;
  this->__r_.__value_.__l.__size_ = 0;
  this->__r_.__value_.__r.__words[2] = 0;
  if (*(_DWORD *)a3)
  {
    v6 = (int *)*((_QWORD *)a3 + 2);
    do
    {
      v8 = *v6;
      v9 = *((_QWORD *)a2 + 4);
      v10 = (re2::Prog::Inst *)(v9 + 8 * v8);
      re2::Prog::Inst::Dump(v10);
      re2::StringAppendF(this, "%d. %s\n", v11, v12, v13, v14, v15, v16, v8);
      if (v26 < 0)
        operator delete(__p);
      v7 = *(unsigned int *)v10;
      if (v7 >= 8)
      {
        v17 = v7 >> 3;
        if (*((_DWORD *)a3 + 1) > *(_DWORD *)v10 >> 3)
        {
          v18 = *((_QWORD *)a3 + 1);
          v19 = *((_QWORD *)a3 + 2);
          v20 = *(int *)(v18 + 4 * v17);
          if (v20 >= *(_DWORD *)a3 || *(_DWORD *)(v19 + 4 * v20) != (_DWORD)v17)
          {
            *(_DWORD *)(v18 + 4 * v17) = *(_DWORD *)a3;
            *(_DWORD *)(v19 + 4 * (int)(*(_DWORD *)a3)++) = v17;
            LODWORD(v7) = *(_DWORD *)v10;
          }
        }
      }
      if ((v7 & 6) == 0)
      {
        v21 = *(_DWORD *)(v9 + 8 * v8 + 4);
        if (v21)
        {
          if (*((_DWORD *)a3 + 1) > v21)
          {
            v22 = *((_QWORD *)a3 + 1);
            v23 = *((_QWORD *)a3 + 2);
            v24 = *(int *)(v22 + 4 * (int)v21);
            if (v24 >= *(_DWORD *)a3 || *(_DWORD *)(v23 + 4 * v24) != v21)
            {
              *(_DWORD *)(v22 + 4 * (int)v21) = *(_DWORD *)a3;
              *(_DWORD *)(v23 + 4 * (int)(*(_DWORD *)a3)++) = v21;
            }
          }
        }
      }
      ++v6;
    }
    while (v6 != (int *)(*((_QWORD *)a3 + 2) + 4 * *(int *)a3));
  }
}

void sub_1C367D758(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (a17 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v17 + 23) & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v17 + 23) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)v17);
  _Unwind_Resume(exception_object);
}

uint64_t re2::Prog::DumpUnanchored@<X0>(re2::Prog *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  _DWORD *v5;
  unsigned int v6;
  BOOL v7;
  uint64_t result;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v10 = *((_DWORD *)this + 3);
  v4 = operator new[]();
  v11 = v4;
  v5 = (_DWORD *)operator new[]();
  v12 = (uint64_t)v5;
  v9 = 0;
  v6 = *((_DWORD *)this + 2);
  if (v6)
    v7 = v10 > v6;
  else
    v7 = 0;
  if (v7)
  {
    *(_DWORD *)(v4 + 4 * (int)v6) = 0;
    *v5 = v6;
    v9 = 1;
  }
  v13 = 0;
  re2::ProgToString(a2, this, (re2::SparseSet *)&v9);
  if (v11)
    MEMORY[0x1C3BD4840](v11, 0x1000C8052888210);
  result = v12;
  if (v12)
    JUMPOUT(0x1C3BD4840);
  return result;
}

void sub_1C367D8B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  re2::SparseSet::~SparseSet((re2::SparseSet *)&a9);
  _Unwind_Resume(a1);
}

void re2::Prog::Optimize(re2::Prog *this)
{
  unsigned int v2;
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;
  unsigned int v6;
  BOOL v7;
  signed int v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  signed int v19;
  signed int *v20;
  signed int v21;
  unsigned int v22;
  uint64_t v23;
  BOOL v24;
  signed int v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  _DWORD *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v33;
  signed int v34;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  int *i;
  int v44;
  int v45;
  int v46;
  BOOL v47;

  v2 = *((_DWORD *)this + 3);
  v3 = operator new[]();
  v4 = (_DWORD *)operator new[]();
  v5 = v4;
  v6 = *((_DWORD *)this + 1);
  if (v6)
    v7 = v2 > v6;
  else
    v7 = 0;
  if (v7)
  {
    *(_DWORD *)(v3 + 4 * (int)v6) = 0;
    *v4 = v6;
    v8 = 1;
    v9 = v4;
    do
    {
      v10 = *v9;
      v11 = *((_QWORD *)this + 4);
      v12 = (unsigned int *)(v11 + 8 * v10);
      v13 = *v12;
      do
      {
        if (v13 <= 7)
        {
          LOBYTE(v16) = *v12 & 7;
          *v12 &= 7u;
          goto LABEL_18;
        }
        v14 = v13;
        v15 = v13 >> 3;
        v13 = *(_DWORD *)(v11 + 8 * v15);
      }
      while ((v13 & 7) == 6);
      v16 = v14 & 0xFFFFFFF8 | *v12 & 7;
      *v12 = v16;
      if (v16 >= 8 && v2 > v15)
      {
        v17 = *(int *)(v3 + 4 * v15);
        if (v17 >= v8 || v4[v17] != (_DWORD)v15)
        {
          *(_DWORD *)(v3 + 4 * v15) = v8;
          v4[v8++] = v15;
          v16 = *v12;
        }
      }
LABEL_18:
      if ((v16 & 7) == 0)
      {
        v18 = v11 + 8 * v10;
        v21 = *(_DWORD *)(v18 + 4);
        v20 = (signed int *)(v18 + 4);
        v19 = v21;
        if (v21)
        {
          while (1)
          {
            v22 = *(_DWORD *)(v11 + 8 * v19);
            if ((v22 & 7) != 6)
              break;
            v19 = v22 >> 3;
            if (v22 <= 7)
              goto LABEL_7;
          }
          *v20 = v19;
          if (v2 > v19)
          {
            v23 = *(int *)(v3 + 4 * v19);
            if (v23 >= v8 || v4[v23] != v19)
            {
              *(_DWORD *)(v3 + 4 * v19) = v8;
              v4[v8++] = v19;
            }
          }
        }
        else
        {
LABEL_7:
          *v20 = v19;
        }
      }
      ++v9;
    }
    while (v9 != &v4[v8]);
    v6 = *((_DWORD *)this + 1);
  }
  if (v6)
    v24 = v2 > v6;
  else
    v24 = 0;
  if (v24)
  {
    *(_DWORD *)(v3 + 4 * (int)v6) = 0;
    *v4 = v6;
    v25 = 1;
    v26 = *((_QWORD *)this + 4);
    v27 = v4;
    do
    {
      v28 = *v27;
      v29 = (_DWORD *)(v26 + 8 * v28);
      v30 = *v29;
      v31 = v30 >> 3;
      if (v30 >= 8 && v2 > v31)
      {
        v33 = *(int *)(v3 + 4 * v31);
        if (v33 >= v25 || v5[v33] != (_DWORD)v31)
        {
          *(_DWORD *)(v3 + 4 * v31) = v25;
          v5[v25++] = v31;
          LODWORD(v30) = *v29;
        }
      }
      if ((v30 & 7) == 0)
      {
        v34 = *(_DWORD *)(v26 + 8 * v28 + 4);
        if (v34 && v2 > v34)
        {
          v36 = *(int *)(v3 + 4 * v34);
          if (v36 >= v25 || v5[v36] != v34)
          {
            *(_DWORD *)(v3 + 4 * v34) = v25;
            v5[v25++] = v34;
            LODWORD(v30) = *v29;
          }
        }
      }
      if ((v30 & 7) == 0)
      {
        v37 = v30 >> 3;
        v38 = (int *)(v26 + 8 * v37);
        v39 = *(int *)(v26 + 8 * v28 + 4);
        v40 = v26 + 8 * v39;
        v41 = *v38;
        if ((*v38 & 7) == 2
          && *v38 >> 3 == (_DWORD)v28
          && !*(_BYTE *)(v26 + 8 * v37 + 4)
          && *((unsigned __int8 *)v38 + 5) == 255)
        {
          for (i = (int *)(v26 + 8 * v39); ; i = (int *)(v26 + (v44 & 0xFFFFFFF8)))
          {
            v44 = *i;
            v45 = 1 << (v44 & 7);
            if ((v45 & 0x48) == 0)
              break;
          }
          if ((v45 & 0x97) == 0)
            goto LABEL_34;
        }
        while (1)
        {
          v46 = 1 << (v41 & 7);
          if ((v46 & 0x48) == 0)
            break;
          v41 = *(_DWORD *)(v26 + (v41 & 0xFFFFFFF8));
        }
        if ((v46 & 0x97) == 0)
        {
          v47 = (*(_DWORD *)v40 & 7) == 2 && *(_DWORD *)v40 >> 3 == (_DWORD)v28;
          if (v47 && !*(_BYTE *)(v26 + 8 * v39 + 4) && *(unsigned __int8 *)(v40 + 5) == 255)
LABEL_34:
            *v29 = v30 & 0xFFFFFFF8 | 1;
        }
      }
      ++v27;
    }
    while (v27 != &v5[v25]);
  }
  MEMORY[0x1C3BD4840](v3, 0x1000C8052888210);
  JUMPOUT(0x1C3BD4840);
}

uint64_t re2::Prog::EmptyFlags(uint64_t a1, _BYTE *a2)
{
  _BYTE *v2;
  int v3;
  int v4;
  _BYTE *v5;
  int v8;
  uint64_t v9;
  int v10;
  int v13;
  int v14;
  int v17;
  int v18;

  v2 = *(_BYTE **)a1;
  if (*(_BYTE **)a1 == a2)
  {
    v9 = *(int *)(a1 + 8);
    if (!(_DWORD)v9)
    {
      v4 = 15;
      return ~(2 * v4) & 0x20 | v4;
    }
    v5 = &a2[v9];
    v4 = 5;
  }
  else
  {
    v3 = *(a2 - 1);
    v4 = v3 == 10;
    v5 = &v2[*(int *)(a1 + 8)];
    if (v5 == a2)
    {
      if ((v3 & 0xFFFFFFDF) - 65 < 0x1A || (v3 - 48) < 0xA || v3 == 95)
        v8 = 26;
      else
        v8 = 10;
      v4 |= v8;
      return ~(2 * v4) & 0x20 | v4;
    }
  }
  if (v5 > a2 && *a2 == 10)
    v4 |= 2u;
  if (v2 == a2)
  {
    v18 = *a2;
    if ((v18 & 0xFFFFFFDF) - 65 < 0x1A || (v18 - 48) < 0xA || v18 == 95)
      v4 |= 0x10u;
  }
  else
  {
    v10 = *(a2 - 1);
    v13 = (v10 - 48) < 0xA || (v10 & 0xFFFFFFDF) - 65 < 0x1A || v10 == 95;
    v14 = *a2;
    v17 = (v14 - 48) < 0xA || (v14 & 0xFFFFFFDF) - 65 < 0x1A || v14 == 95;
    if (v13 != v17)
      v4 |= 0x10u;
  }
  return ~(2 * v4) & 0x20 | v4;
}

uint64_t re2::Prog::MarkByteRange(uint64_t this, int a2, unsigned int a3)
{
  if ((a2 - 1) > 0xFE)
  {
    if (a3 > 0xFF)
      return this;
LABEL_5:
    *(_DWORD *)(this + 4 * (a3 >> 5) + 272) |= 1 << a3;
    return this;
  }
  *(_DWORD *)(this + 4 * ((a2 - 1) >> 5) + 272) |= 1 << (a2 - 1);
  if (a3 <= 0xFF)
    goto LABEL_5;
  return this;
}

uint64_t re2::Prog::ComputeByteMap(re2::Prog *this)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  uint64_t result;
  uint64_t v6;

  v2 = 0;
  v3 = 0;
  v4 = 0;
  do
  {
    if ((v2 & 0x1F) == 0)
      v3 = *((_DWORD *)this + (v2 >> 5) + 68);
    *((_BYTE *)this + v2 + 304) = v4;
    v4 += v3 & 1;
    v3 >>= 1;
    ++v2;
  }
  while (v2 != 256);
  *((_DWORD *)this + 5) = *((unsigned __int8 *)this + 559) + 1;
  result = operator new[]();
  v6 = 0;
  *((_QWORD *)this + 70) = result;
  do
  {
    *(_BYTE *)(*((_QWORD *)this + 70) + *((unsigned __int8 *)this + v6 + 304)) = v6;
    ++v6;
  }
  while (v6 != 256);
  return result;
}

void sub_1C367E430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__6328(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__6329(uint64_t a1)
{

}

void sub_1C367EB5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  uint64_t v38;

  _Block_object_dispose(&a22, 8);
  _Block_object_dispose(&a26, 8);
  _Block_object_dispose(&a30, 8);
  _Block_object_dispose(&a34, 8);
  _Block_object_dispose(&a38, 8);
  _Block_object_dispose((const void *)(v38 - 232), 8);
  _Unwind_Resume(a1);
}

uint64_t __enumerateMyNameInstances_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  uint64_t v6;
  char v7;
  _QWORD *v8;
  const char *v9;
  char *v11;
  void *v13;
  uint64_t v14;
  void *v15;
  char v16;

  v5 = a3;
  v6 = 0;
  v7 = 0;
  while (1)
  {
    v8 = (_QWORD *)(a2 + v6);
    v9 = *(const char **)(a2 + v6 + 16);
    if (!v9)
      goto LABEL_9;
    if (*v8 == 0x7FFFFFFFFFFFFFFFLL || v8[1] == 0)
      goto LABEL_9;
    if (!strcmp(*(const char **)(a2 + v6 + 16), "name"))
      break;
    v7 |= strcmp(v9, "strong_phrase") == 0;
LABEL_9:
    v6 += 24;
    if (v6 == 120)
      goto LABEL_10;
  }
  v16 = 0;
  v13 = (void *)MEMORY[0x1C3BD4F6C]();
  v14 = *(_QWORD *)(a1 + 40);
  objc_msgSend(*(id *)(a1 + 32), "substringWithRange:", *v8, v8[1]);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, void *, _QWORD, _QWORD, id, _QWORD, char *))(v14 + 16))(v14, v15, *v8, v8[1], v5, v7 & 1, &v16);

  objc_autoreleasePoolPop(v13);
  if (!v16)
  {
LABEL_10:
    v11 = &SGRe2KeepGoing;
    goto LABEL_11;
  }
  v11 = &SGRe2Stop;
LABEL_11:

  return *v11;
}

uint64_t __enumerateNameComponents_block_invoke(uint64_t a1)
{
  ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

double re2::Regexp::Regexp(uint64_t a1, char a2, __int16 a3)
{
  double result;

  *(_BYTE *)a1 = a2;
  *(_BYTE *)(a1 + 1) = 0;
  *(_WORD *)(a1 + 2) = a3;
  *(_WORD *)(a1 + 4) = 1;
  result = 0.0;
  *(_OWORD *)(a1 + 6) = 0u;
  *(_OWORD *)(a1 + 22) = 0u;
  *(_WORD *)(a1 + 38) = 0;
  return result;
}

{
  double result;

  *(_BYTE *)a1 = a2;
  *(_BYTE *)(a1 + 1) = 0;
  *(_WORD *)(a1 + 2) = a3;
  *(_WORD *)(a1 + 4) = 1;
  result = 0.0;
  *(_OWORD *)(a1 + 6) = 0u;
  *(_OWORD *)(a1 + 22) = 0u;
  *(_WORD *)(a1 + 38) = 0;
  return result;
}

void re2::Regexp::~Regexp(re2::Regexp *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16[8];
  __int128 v17;
  __int128 v18;
  int v19;
  uint64_t v20;

  if (*((_WORD *)this + 3))
  {
    LOBYTE(v14) = 0;
    v2 = MEMORY[0x1E0DE4FE0];
    v3 = MEMORY[0x1E0DE4FE0] + 64;
    v4 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v5 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v20 = MEMORY[0x1E0DE4FE0] + 64;
    v15 = v4;
    *(uint64_t *)((char *)&v16[-1] + *(_QWORD *)(v4 - 24)) = v5;
    v6 = (std::ios_base *)((char *)&v16[-1] + *(_QWORD *)(v15 - 24));
    std::ios_base::init(v6, v16);
    v6[1].__vftable = 0;
    v6[1].__fmtflags_ = -1;
    v15 = v2 + 24;
    v20 = v3;
    std::streambuf::basic_streambuf();
    v16[0] = MEMORY[0x1E0DE4FB8] + 16;
    v17 = 0u;
    v18 = 0u;
    v19 = 16;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v15, (uint64_t)"Regexp not destroyed.", 21);
    LogMessage::~LogMessage(&v14);
  }
  v7 = *(unsigned __int8 *)this;
  switch(v7)
  {
    case 4:
      v11 = *((_QWORD *)this + 4);
      if (v11)
        MEMORY[0x1C3BD4840](v11, 0x1000C8052888210);
      break;
    case 20:
      v12 = *((_QWORD *)this + 3);
      if (v12)
        MEMORY[0x1C3BD4840](v12, 0x1000C8077774924);
      v13 = *((_QWORD *)this + 4);
      if (v13)
      {
        std::__tree<std::__value_type<unsigned long long,int>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,int>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,int>>>::destroy(*(_QWORD **)(v13 + 24));
        v9 = v13;
        v10 = 0x1020C4098A2B122;
LABEL_16:
        MEMORY[0x1C3BD4858](v9, v10);
      }
      break;
    case 11:
      v8 = *((_QWORD *)this + 4);
      if (v8)
      {
        if (*(char *)(v8 + 23) < 0)
          operator delete(*(void **)v8);
        v9 = v8;
        v10 = 0x1012C40EC159624;
        goto LABEL_16;
      }
      break;
  }
}

void sub_1C368281C(void *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1C3BD4828](v1 + 120);
  __clang_call_terminate(a1);
}

uint64_t re2::CharClass::Delete(uint64_t this)
{
  if (this)
    JUMPOUT(0x1C3BD4840);
  return this;
}

void re2::Regexp::operator delete(void *a1)
{
  freeRegexp(a1);
}

BOOL re2::Regexp::QuickDestroy(re2::Regexp *this)
{
  int v1;
  void *v2;

  v1 = *((unsigned __int16 *)this + 3);
  if (this && !*((_WORD *)this + 3))
  {
    re2::Regexp::~Regexp(this);
    freeRegexp(v2);
  }
  return v1 == 0;
}

uint64_t re2::Regexp::Ref(re2::Regexp *this)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t *v4;
  uint64_t **v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;

  v1 = *((unsigned __int16 *)this + 2);
  if ((_DWORD)v1 == 0xFFFF)
  {
    pthread_mutex_lock(&re2::ref_mutex);
    v3 = re2::ref_map;
    if (re2::ref_map)
    {
      v5 = (uint64_t **)(re2::ref_map + 8);
      v4 = *(unint64_t **)(re2::ref_map + 8);
      if (v4)
      {
        while (1)
        {
          while (1)
          {
            v6 = v4;
            v7 = v4[4];
            if (v7 <= (unint64_t)this)
              break;
            v4 = (unint64_t *)*v6;
            v5 = (uint64_t **)v6;
            if (!*v6)
              goto LABEL_10;
          }
          if (v7 >= (unint64_t)this)
            break;
          v4 = (unint64_t *)v6[1];
          if (!v4)
          {
            v5 = (uint64_t **)(v6 + 1);
            goto LABEL_10;
          }
        }
      }
      else
      {
        v6 = (_QWORD *)(re2::ref_map + 8);
LABEL_10:
        v8 = v6;
        v6 = operator new(0x30uLL);
        v6[4] = this;
        *((_DWORD *)v6 + 10) = 0;
        *v6 = 0;
        v6[1] = 0;
        v6[2] = v8;
        *v5 = v6;
        v9 = **(_QWORD **)v3;
        v10 = v6;
        if (v9)
        {
          *(_QWORD *)v3 = v9;
          v10 = *v5;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v3 + 8), v10);
        ++*(_QWORD *)(v3 + 16);
      }
      v1 = *((unsigned int *)v6 + 10);
    }
    else
    {
      v1 = 0;
    }
    pthread_mutex_unlock(&re2::ref_mutex);
  }
  return v1;
}

re2::Regexp *re2::Regexp::Incref(re2::Regexp *this)
{
  unsigned int v2;
  _QWORD **v3;
  unint64_t *v4;
  uint64_t **v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t *v14;

  v2 = *((unsigned __int16 *)this + 2);
  if (v2 < 0xFFFE)
  {
    *((_WORD *)this + 2) = v2 + 1;
  }
  else
  {
    pthread_mutex_lock(&re2::ref_mutex);
    v3 = (_QWORD **)re2::ref_map;
    if (re2::ref_map)
    {
      v4 = *(unint64_t **)(re2::ref_map + 8);
    }
    else
    {
      v3 = (_QWORD **)operator new();
      v4 = 0;
      v3[2] = 0;
      v3[1] = 0;
      *v3 = v3 + 1;
      re2::ref_map = (uint64_t)v3;
    }
    v5 = v3 + 1;
    v6 = v3 + 1;
    if (*((__int16 *)this + 2) == -1)
    {
      if (v4)
      {
        while (1)
        {
          while (1)
          {
            v6 = v4;
            v11 = v4[4];
            if (v11 <= (unint64_t)this)
              break;
            v4 = (unint64_t *)*v6;
            v5 = (uint64_t **)v6;
            if (!*v6)
              goto LABEL_25;
          }
          if (v11 >= (unint64_t)this)
            break;
          v4 = (unint64_t *)v6[1];
          if (!v4)
          {
            v5 = (uint64_t **)(v6 + 1);
            goto LABEL_25;
          }
        }
      }
      else
      {
LABEL_25:
        v12 = v6;
        v6 = operator new(0x30uLL);
        v6[4] = this;
        *((_DWORD *)v6 + 10) = 0;
        *v6 = 0;
        v6[1] = 0;
        v6[2] = v12;
        *v5 = v6;
        v13 = (_QWORD *)**v3;
        v14 = v6;
        if (v13)
        {
          *v3 = v13;
          v14 = *v5;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v3[1], v14);
        v3[2] = (_QWORD *)((char *)v3[2] + 1);
      }
      ++*((_DWORD *)v6 + 10);
    }
    else
    {
      if (v4)
      {
        while (1)
        {
          while (1)
          {
            v6 = v4;
            v7 = v4[4];
            if (v7 <= (unint64_t)this)
              break;
            v4 = (unint64_t *)*v6;
            v5 = (uint64_t **)v6;
            if (!*v6)
              goto LABEL_14;
          }
          if (v7 >= (unint64_t)this)
            break;
          v4 = (unint64_t *)v6[1];
          if (!v4)
          {
            v5 = (uint64_t **)(v6 + 1);
            goto LABEL_14;
          }
        }
      }
      else
      {
LABEL_14:
        v8 = v6;
        v6 = operator new(0x30uLL);
        v6[4] = this;
        *((_DWORD *)v6 + 10) = 0;
        *v6 = 0;
        v6[1] = 0;
        v6[2] = v8;
        *v5 = v6;
        v9 = (_QWORD *)**v3;
        v10 = v6;
        if (v9)
        {
          *v3 = v9;
          v10 = *v5;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v3[1], v10);
        v3[2] = (_QWORD *)((char *)v3[2] + 1);
      }
      *((_DWORD *)v6 + 10) = 0xFFFF;
      *((_WORD *)this + 2) = -1;
    }
    pthread_mutex_unlock(&re2::ref_mutex);
  }
  return this;
}

void re2::Regexp::Decref(re2::Regexp *this)
{
  int v2;
  __int16 v3;
  uint64_t v4;
  unint64_t *v5;
  uint64_t **v6;
  char *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t *v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  _QWORD *v17;
  unint64_t v18;
  BOOL v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t *v24;
  uint64_t **v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  BOOL v32;

  v2 = *((unsigned __int16 *)this + 2);
  if (v2 == 0xFFFF)
  {
    pthread_mutex_lock(&re2::ref_mutex);
    v4 = re2::ref_map;
    v6 = (uint64_t **)(re2::ref_map + 8);
    v5 = *(unint64_t **)(re2::ref_map + 8);
    if (v5)
    {
      while (1)
      {
        while (1)
        {
          v7 = (char *)v5;
          v8 = v5[4];
          if (v8 <= (unint64_t)this)
            break;
          v5 = *(unint64_t **)v7;
          v6 = (uint64_t **)v7;
          if (!*(_QWORD *)v7)
            goto LABEL_11;
        }
        if (v8 >= (unint64_t)this)
          break;
        v5 = (unint64_t *)*((_QWORD *)v7 + 1);
        if (!v5)
        {
          v6 = (uint64_t **)(v7 + 8);
          goto LABEL_11;
        }
      }
    }
    else
    {
      v7 = (char *)(re2::ref_map + 8);
LABEL_11:
      v9 = v7;
      v7 = (char *)operator new(0x30uLL);
      *((_QWORD *)v7 + 4) = this;
      *((_DWORD *)v7 + 10) = 0;
      *(_QWORD *)v7 = 0;
      *((_QWORD *)v7 + 1) = 0;
      *((_QWORD *)v7 + 2) = v9;
      *v6 = (uint64_t *)v7;
      v10 = **(_QWORD **)v4;
      v11 = (uint64_t *)v7;
      if (v10)
      {
        *(_QWORD *)v4 = v10;
        v11 = *v6;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v4 + 8), v11);
      ++*(_QWORD *)(v4 + 16);
    }
    v12 = *((_DWORD *)v7 + 10);
    v13 = v12 - 1;
    if (v12 >= 0x10000)
    {
      v23 = re2::ref_map;
      v25 = (uint64_t **)(re2::ref_map + 8);
      v24 = *(unint64_t **)(re2::ref_map + 8);
      if (v24)
      {
        while (1)
        {
          while (1)
          {
            v26 = v24;
            v27 = v24[4];
            if (v27 <= (unint64_t)this)
              break;
            v24 = (unint64_t *)*v26;
            v25 = (uint64_t **)v26;
            if (!*v26)
              goto LABEL_37;
          }
          if (v27 >= (unint64_t)this)
            break;
          v24 = (unint64_t *)v26[1];
          if (!v24)
          {
            v25 = (uint64_t **)(v26 + 1);
            goto LABEL_37;
          }
        }
      }
      else
      {
        v26 = (_QWORD *)(re2::ref_map + 8);
LABEL_37:
        v28 = v26;
        v26 = operator new(0x30uLL);
        v26[4] = this;
        *((_DWORD *)v26 + 10) = 0;
        *v26 = 0;
        v26[1] = 0;
        v26[2] = v28;
        *v25 = v26;
        v29 = **(_QWORD **)v23;
        v30 = v26;
        if (v29)
        {
          *(_QWORD *)v23 = v29;
          v30 = *v25;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v23 + 8), v30);
        ++*(_QWORD *)(v23 + 16);
      }
      *((_DWORD *)v26 + 10) = v13;
    }
    else
    {
      *((_WORD *)this + 2) = v13;
      v14 = re2::ref_map;
      v15 = *(uint64_t **)(re2::ref_map + 8);
      if (v15)
      {
        v16 = (uint64_t *)(re2::ref_map + 8);
        v17 = *(_QWORD **)(re2::ref_map + 8);
        do
        {
          v18 = v17[4];
          v19 = v18 >= (unint64_t)this;
          if (v18 >= (unint64_t)this)
            v20 = v17;
          else
            v20 = v17 + 1;
          if (v19)
            v16 = v17;
          v17 = (_QWORD *)*v20;
        }
        while (*v20);
        if (v16 != (uint64_t *)(re2::ref_map + 8) && v16[4] <= (unint64_t)this)
        {
          v21 = (uint64_t *)v16[1];
          if (v21)
          {
            do
            {
              v22 = v21;
              v21 = (uint64_t *)*v21;
            }
            while (v21);
          }
          else
          {
            v31 = v16;
            do
            {
              v22 = (uint64_t *)v31[2];
              v32 = *v22 == (_QWORD)v31;
              v31 = v22;
            }
            while (!v32);
          }
          if (*(uint64_t **)re2::ref_map == v16)
            *(_QWORD *)re2::ref_map = v22;
          --*(_QWORD *)(v14 + 16);
          std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v15, v16);
          operator delete(v16);
        }
      }
    }
    pthread_mutex_unlock(&re2::ref_mutex);
  }
  else
  {
    v3 = v2 - 1;
    *((_WORD *)this + 2) = v3;
    if (!v3)
      re2::Regexp::Destroy(this);
  }
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  BOOL v13;
  uint64_t **v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_7;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (v2)
  {
LABEL_7:
    v5 = 0;
    *(_QWORD *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  v5 = 1;
LABEL_8:
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 == v3)
  {
    *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      v7 = 0;
      result = (uint64_t *)v2;
    }
    else
    {
      v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
  }
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v14 = (uint64_t **)v7[2];
    if (*v14 != v7)
      break;
    if (*((_BYTE *)v7 + 24))
    {
      v16 = (_QWORD *)*v7;
      if (*v7)
        goto LABEL_50;
    }
    else
    {
      *((_BYTE *)v7 + 24) = 1;
      *((_BYTE *)v14 + 24) = 0;
      v20 = (uint64_t *)v7[1];
      *v14 = v20;
      if (v20)
        v20[2] = (uint64_t)v14;
      v7[2] = (uint64_t)v14[2];
      v14[2][*v14[2] != (_QWORD)v14] = (uint64_t)v7;
      v7[1] = (uint64_t)v14;
      v14[2] = v7;
      if (result == (uint64_t *)v14)
        result = v7;
      v7 = *v14;
      v16 = (_QWORD *)**v14;
      if (v16)
      {
LABEL_50:
        if (!*((_BYTE *)v16 + 24))
          goto LABEL_71;
      }
    }
    v21 = (uint64_t *)v7[1];
    if (v21 && !*((_BYTE *)v21 + 24))
    {
      if (v16 && !*((_BYTE *)v16 + 24))
      {
LABEL_71:
        v21 = v7;
      }
      else
      {
        *((_BYTE *)v21 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v22 = *v21;
        v7[1] = *v21;
        if (v22)
          *(_QWORD *)(v22 + 16) = v7;
        v21[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v21;
        *v21 = (uint64_t)v7;
        v7[2] = (uint64_t)v21;
        v16 = v7;
      }
      v27 = (uint64_t *)v21[2];
      *((_BYTE *)v21 + 24) = *((_BYTE *)v27 + 24);
      *((_BYTE *)v27 + 24) = 1;
      *((_BYTE *)v16 + 24) = 1;
      v28 = *v27;
      v29 = *(_QWORD *)(*v27 + 8);
      *v27 = v29;
      if (v29)
        *(_QWORD *)(v29 + 16) = v27;
      *(_QWORD *)(v28 + 16) = v27[2];
      *(_QWORD *)(v27[2] + 8 * (*(_QWORD *)v27[2] != (_QWORD)v27)) = v28;
      *(_QWORD *)(v28 + 8) = v27;
      v27[2] = v28;
      return result;
    }
    *((_BYTE *)v7 + 24) = 0;
    v12 = (uint64_t *)v7[2];
    if (*((_BYTE *)v12 + 24))
      v13 = v12 == result;
    else
      v13 = 1;
    if (v13)
      goto LABEL_61;
LABEL_26:
    v7 = *(uint64_t **)(v12[2] + 8 * (*(_QWORD *)v12[2] == (_QWORD)v12));
  }
  if (*((_BYTE *)v7 + 24))
  {
    v15 = (_QWORD *)*v7;
    if (!*v7)
    {
LABEL_40:
      v19 = (uint64_t *)v7[1];
      if (v19 && !*((_BYTE *)v19 + 24))
        goto LABEL_67;
      *((_BYTE *)v7 + 24) = 0;
      v12 = (uint64_t *)v7[2];
      if (v12 == result)
      {
        v12 = result;
LABEL_61:
        *((_BYTE *)v12 + 24) = 1;
        return result;
      }
      if (!*((_BYTE *)v12 + 24))
        goto LABEL_61;
      goto LABEL_26;
    }
  }
  else
  {
    *((_BYTE *)v7 + 24) = 1;
    *((_BYTE *)v14 + 24) = 0;
    v17 = v14[1];
    v18 = (uint64_t *)*v17;
    v14[1] = (uint64_t *)*v17;
    if (v18)
      v18[2] = (uint64_t)v14;
    v17[2] = (uint64_t)v14[2];
    v14[2][*v14[2] != (_QWORD)v14] = (uint64_t)v17;
    *v17 = (uint64_t)v14;
    v14[2] = v17;
    if (result == (uint64_t *)*v7)
      result = v7;
    v7 = *(uint64_t **)(*v7 + 8);
    v15 = (_QWORD *)*v7;
    if (!*v7)
      goto LABEL_40;
  }
  if (*((_BYTE *)v15 + 24))
    goto LABEL_40;
  v19 = (uint64_t *)v7[1];
  if (v19 && !*((_BYTE *)v19 + 24))
  {
LABEL_67:
    v15 = v7;
  }
  else
  {
    *((_BYTE *)v15 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v23 = v15[1];
    *v7 = v23;
    if (v23)
      *(_QWORD *)(v23 + 16) = v7;
    v15[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
    v15[1] = v7;
    v7[2] = (uint64_t)v15;
    v19 = v7;
  }
  v24 = v15[2];
  *((_BYTE *)v15 + 24) = *(_BYTE *)(v24 + 24);
  *(_BYTE *)(v24 + 24) = 1;
  *((_BYTE *)v19 + 24) = 1;
  v25 = *(uint64_t **)(v24 + 8);
  v26 = *v25;
  *(_QWORD *)(v24 + 8) = *v25;
  if (v26)
    *(_QWORD *)(v26 + 16) = v24;
  v25[2] = *(_QWORD *)(v24 + 16);
  *(_QWORD *)(*(_QWORD *)(v24 + 16) + 8 * (**(_QWORD **)(v24 + 16) != v24)) = v25;
  *v25 = v24;
  *(_QWORD *)(v24 + 16) = v25;
  return result;
}

void re2::Regexp::Destroy(re2::Regexp *this)
{
  re2::Regexp *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  re2::Regexp *v5;
  std::ios_base *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  __int16 v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19[8];
  __int128 v20;
  __int128 v21;
  int v22;
  uint64_t v23;

  v1 = this;
  if (this && !*((_WORD *)this + 3))
  {
    re2::Regexp::~Regexp(this);
    freeRegexp(v2);
    return;
  }
  if (*((_WORD *)this + 3))
  {
    *((_QWORD *)this + 2) = 0;
    v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v16 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v15 = MEMORY[0x1E0DE4FE0] + 64;
    v14 = MEMORY[0x1E0DE4FB8] + 16;
    while (1)
    {
      if (!v1)
        return;
      v5 = (re2::Regexp *)*((_QWORD *)v1 + 2);
      if (*((_WORD *)v1 + 2))
      {
        LOBYTE(v17) = 0;
        v23 = v15;
        v18 = v3;
        *(uint64_t *)((char *)&v19[-1] + *(_QWORD *)(v3 - 24)) = v16;
        v6 = (std::ios_base *)((char *)&v19[-1] + *(_QWORD *)(v18 - 24));
        std::ios_base::init(v6, v19);
        v6[1].__vftable = 0;
        v6[1].__fmtflags_ = -1;
        v18 = MEMORY[0x1E0DE4FE0] + 24;
        v23 = MEMORY[0x1E0DE4FE0] + 64;
        std::streambuf::basic_streambuf();
        v19[0] = v14;
        v20 = 0u;
        v21 = 0u;
        v22 = 16;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)"Bad reference count ", 20);
        std::ostream::operator<<();
        LogMessage::~LogMessage(&v17);
      }
      if (*((_WORD *)v1 + 3))
        break;
LABEL_7:
      re2::Regexp::~Regexp(v1);
      freeRegexp(v4);
      v1 = v5;
    }
    v7 = (_QWORD *)((char *)v1 + 8);
    if (*((_WORD *)v1 + 3) != 1)
      v7 = (_QWORD *)*v7;
    v8 = 0;
    while (1)
    {
      v10 = v7[v8];
      if (v10)
      {
        v11 = *(unsigned __int16 *)(v10 + 4);
        if (v11 == 0xFFFF)
        {
          re2::Regexp::Decref((re2::Regexp *)v7[v8]);
          if (!*(_WORD *)(v10 + 4))
          {
LABEL_22:
            if (*(_WORD *)(v10 + 6))
            {
              *(_QWORD *)(v10 + 16) = v5;
              v5 = (re2::Regexp *)v10;
            }
            else
            {
              re2::Regexp::~Regexp((re2::Regexp *)v10);
              freeRegexp(v13);
            }
          }
        }
        else
        {
          v12 = v11 - 1;
          *(_WORD *)(v10 + 4) = v12;
          if (!v12)
            goto LABEL_22;
        }
      }
      ++v8;
      v9 = *((unsigned __int16 *)v1 + 3);
      if (v8 >= v9)
      {
        if (v9 >= 2)
          MEMORY[0x1C3BD4840](v7, 0x20C8093837F09);
        *((_WORD *)v1 + 3) = 0;
        goto LABEL_7;
      }
    }
  }
}

void sub_1C36833E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::ostream::~ostream();
  MEMORY[0x1C3BD4828](a10);
  _Unwind_Resume(a1);
}

void sub_1C3683414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t re2::Regexp::AddRuneToString(uint64_t this, int a2)
{
  uint64_t v3;
  int8x8_t v4;
  uint8x8_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = this;
  v4 = (int8x8_t)*(unsigned int *)(this + 24);
  if (v4.i32[0])
  {
    v5 = (uint8x8_t)vcnt_s8(v4);
    v5.i16[0] = vaddlv_u8(v5);
    if (v4.i32[0] >= 8 && v5.i32[0] <= 1u)
    {
      v7 = *(_QWORD *)(this + 32);
      this = operator new[]();
      *(_QWORD *)(v3 + 32) = this;
      if (*(int *)(v3 + 24) >= 1)
      {
        v8 = 0;
        do
        {
          *(_DWORD *)(*(_QWORD *)(v3 + 32) + 4 * v8) = *(_DWORD *)(v7 + 4 * v8);
          ++v8;
        }
        while (v8 < *(int *)(v3 + 24));
        goto LABEL_12;
      }
      if (v7)
LABEL_12:
        this = MEMORY[0x1C3BD4840](v7, 0x1000C8052888210);
    }
  }
  else
  {
    this = operator new[]();
    *(_QWORD *)(v3 + 32) = this;
  }
  v9 = *(_QWORD *)(v3 + 32);
  v10 = *(int *)(v3 + 24);
  *(_DWORD *)(v3 + 24) = v10 + 1;
  *(_DWORD *)(v9 + 4 * v10) = a2;
  return this;
}

double re2::Regexp::HaveMatch(int a1, __int16 a2)
{
  char *v4;
  double result;

  v4 = (char *)mallocRegexp();
  *(_WORD *)v4 = 21;
  *((_WORD *)v4 + 1) = a2;
  *((_WORD *)v4 + 2) = 1;
  result = 0.0;
  *(_OWORD *)(v4 + 22) = 0u;
  *(_OWORD *)(v4 + 6) = 0u;
  *((_WORD *)v4 + 19) = 0;
  *((_DWORD *)v4 + 6) = a1;
  return result;
}

_WORD *re2::Regexp::Plus(_WORD *a1, int a2)
{
  __int16 v2;
  _WORD *v3;
  _WORD *v4;

  v2 = a2;
  v3 = a1;
  if (*(_BYTE *)a1 != 8 || (unsigned __int16)a1[1] != a2)
  {
    v4 = mallocRegexp();
    *v4 = 8;
    v4[1] = v2;
    *((_DWORD *)v4 + 1) = 65537;
    *((_QWORD *)v4 + 1) = v3;
    *((_QWORD *)v4 + 2) = 0;
    v3 = v4;
    *((_QWORD *)v4 + 3) = 0;
    *((_QWORD *)v4 + 4) = 0;
  }
  return v3;
}

_WORD *re2::Regexp::Star(_WORD *a1, int a2)
{
  __int16 v2;
  _WORD *v3;
  _WORD *v4;

  v2 = a2;
  v3 = a1;
  if (*(_BYTE *)a1 != 7 || (unsigned __int16)a1[1] != a2)
  {
    v4 = mallocRegexp();
    *v4 = 7;
    v4[1] = v2;
    *((_DWORD *)v4 + 1) = 65537;
    *((_QWORD *)v4 + 1) = v3;
    *((_QWORD *)v4 + 2) = 0;
    v3 = v4;
    *((_QWORD *)v4 + 3) = 0;
    *((_QWORD *)v4 + 4) = 0;
  }
  return v3;
}

_WORD *re2::Regexp::Quest(_WORD *a1, int a2)
{
  __int16 v2;
  _WORD *v3;
  _WORD *v4;

  v2 = a2;
  v3 = a1;
  if (*(_BYTE *)a1 != 9 || (unsigned __int16)a1[1] != a2)
  {
    v4 = mallocRegexp();
    *v4 = 9;
    v4[1] = v2;
    *((_DWORD *)v4 + 1) = 65537;
    *((_QWORD *)v4 + 1) = v3;
    *((_QWORD *)v4 + 2) = 0;
    v3 = v4;
    *((_QWORD *)v4 + 3) = 0;
    *((_QWORD *)v4 + 4) = 0;
  }
  return v3;
}

char *re2::Regexp::ConcatOrAlternate(uint64_t a1, void **a2, uint64_t a3, unint64_t a4, int a5)
{
  void **v5;
  char *v6;
  uint64_t v8;
  void **v10;
  int v11;
  _QWORD *v12;
  void **v13;
  uint64_t v14;
  char *v15;
  void *v16;
  _QWORD *v17;
  uint64_t v18;
  _OWORD *v19;
  __int128 *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  void **v26;
  uint64_t v27;
  _QWORD *v29;
  void **v30;

  v5 = a2;
  if ((_DWORD)a3 == 1)
    return (char *)*a2;
  v8 = a3;
  v10 = 0;
  if ((_DWORD)a1 == 6 && a5)
  {
    v10 = (void **)operator new[]();
    memcpy(v10, v5, 8 * (int)v8);
    v11 = re2::Regexp::FactorAlternationRecursive((uint64_t)v10, v8, a4, 8);
    if (v11 == 1)
    {
      v6 = (char *)*v10;
LABEL_26:
      MEMORY[0x1C3BD4840]();
      return v6;
    }
    LODWORD(v8) = v11;
    v5 = v10;
  }
  if ((int)v8 < 0x10000)
  {
    v6 = (char *)mallocRegexp();
    *v6 = a1;
    v6[1] = 0;
    *((_WORD *)v6 + 1) = a4;
    *((_WORD *)v6 + 2) = 1;
    *(_OWORD *)(v6 + 6) = 0u;
    *(_OWORD *)(v6 + 22) = 0u;
    *((_WORD *)v6 + 19) = 0;
    re2::Regexp::AllocSub((uint64_t)v6, v8);
    v17 = v6 + 8;
    if (*((unsigned __int16 *)v6 + 3) >= 2u)
      v17 = (_QWORD *)*v17;
    if ((int)v8 >= 1)
    {
      v18 = 0;
      if (v8 < 4)
        goto LABEL_23;
      if ((unint64_t)((char *)v17 - (char *)v5) <= 0x1F)
        goto LABEL_23;
      v18 = v8 & 0xFFFFFFFC;
      v19 = v17 + 2;
      v20 = (__int128 *)(v5 + 2);
      v21 = v18;
      do
      {
        v22 = *v20;
        *(v19 - 1) = *(v20 - 1);
        *v19 = v22;
        v19 += 2;
        v20 += 2;
        v21 -= 4;
      }
      while (v21);
      if (v18 != v8)
      {
LABEL_23:
        v23 = v8 - v18;
        v24 = v18;
        v25 = &v17[v24];
        v26 = &v5[v24];
        do
        {
          v27 = (uint64_t)*v26++;
          *v25++ = v27;
          --v23;
        }
        while (v23);
      }
    }
    if (v10)
      goto LABEL_26;
  }
  else
  {
    v6 = (char *)mallocRegexp();
    *v6 = a1;
    v6[1] = 0;
    *((_WORD *)v6 + 1) = a4;
    *((_WORD *)v6 + 2) = 1;
    *(_OWORD *)(v6 + 6) = 0u;
    *(_OWORD *)(v6 + 22) = 0u;
    *((_WORD *)v6 + 19) = 0;
    re2::Regexp::AllocSub((uint64_t)v6, ((int)v8 + 65534) / 0xFFFFu);
    v12 = v6 + 8;
    if (*((unsigned __int16 *)v6 + 3) >= 2u)
      v12 = (_QWORD *)*v12;
    v30 = v5;
    v13 = v5;
    v29 = v12;
    v14 = ((int)v8 + 65534) / 0xFFFFu - 1;
    do
    {
      v15 = (char *)mallocRegexp();
      *v15 = a1;
      v15[1] = 0;
      *((_WORD *)v15 + 1) = a4;
      *((_WORD *)v15 + 2) = 1;
      *(_OWORD *)(v15 + 6) = 0u;
      *(_OWORD *)(v15 + 22) = 0u;
      *((_WORD *)v15 + 19) = 0;
      v16 = (void *)operator new[]();
      *((_QWORD *)v15 + 1) = v16;
      *((_WORD *)v15 + 3) = -1;
      memcpy(v16, v13, 0x7FFF8uLL);
      *v12++ = v15;
      v13 += 0xFFFF;
      --v14;
    }
    while (v14);
    v29[((int)v8 + 65534) / 0xFFFFu - 1] = re2::Regexp::ConcatOrAlternate(a1, &v30[0xFFFF * (((int)v8 + 65534) / 0xFFFFu) - 0xFFFF], v8 - 0xFFFF * (((int)v8 + 65534) / 0xFFFFu - 1), a4, 0);
    if (v10)
      goto LABEL_26;
  }
  return v6;
}

uint64_t re2::Regexp::AllocSub(uint64_t this, unsigned int a2)
{
  __int16 v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[33];

  v2 = a2;
  if (a2 >= 0x10000)
  {
    LogMessage::LogMessage((LogMessage *)&v4, "/Library/Caches/com.apple.xbs/Sources/Suggestions/re2/re2/re2_regexp.h");
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Cannot AllocSub ", 16);
    std::ostream::operator<<();
    LogMessage::Flush((LogMessage *)&v4);
    abort();
  }
  v3 = this;
  if (a2 >= 2)
  {
    this = operator new[]();
    *(_QWORD *)(v3 + 8) = this;
  }
  *(_WORD *)(v3 + 6) = v2;
  return this;
}

void sub_1C3683A08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  LogMessageFatal::~LogMessageFatal((LogMessageFatal *)&a9);
}

void LogMessage::LogMessage(LogMessage *this, const char *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  std::ios_base *v10;
  size_t v11;
  _QWORD *v12;

  *(_BYTE *)this = 0;
  v4 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  *((_QWORD *)this + 1) = v4;
  v6 = (_QWORD *)((char *)this + 8);
  v7 = MEMORY[0x1E0DE4FE0];
  v8 = MEMORY[0x1E0DE4FE0] + 64;
  *((_QWORD *)this + 15) = MEMORY[0x1E0DE4FE0] + 64;
  v9 = (uint64_t *)((char *)this + 120);
  *(_QWORD *)((char *)this + *(_QWORD *)(v4 - 24) + 8) = v5;
  v10 = (std::ios_base *)((char *)this + *(_QWORD *)(*((_QWORD *)this + 1) - 24) + 8);
  std::ios_base::init(v10, (char *)this + 16);
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  *v6 = v7 + 24;
  *v9 = v8;
  std::streambuf::basic_streambuf();
  *((_QWORD *)this + 2) = MEMORY[0x1E0DE4FB8] + 16;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_DWORD *)this + 28) = 16;
  v11 = strlen(a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)a2, v11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v12 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
}

void sub_1C3683B30(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1C3BD4828](v1);
  _Unwind_Resume(a1);
}

void sub_1C3683B58(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostringstream::~ostringstream(v1);
  _Unwind_Resume(a1);
}

void LogMessageFatal::~LogMessageFatal(LogMessageFatal *this)
{
  LogMessage::Flush(this);
  abort();
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F60];
  v3 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4FB8] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1C3BD4828](a1 + 112);
  return a1;
}

char *re2::Regexp::Concat(void **a1, uint64_t a2, unint64_t a3)
{
  return re2::Regexp::ConcatOrAlternate(5, a1, a2, a3, 0);
}

char *re2::Regexp::Alternate(void **a1, uint64_t a2, unint64_t a3)
{
  return re2::Regexp::ConcatOrAlternate(6, a1, a2, a3, 1);
}

char *re2::Regexp::AlternateNoFactor(void **a1, uint64_t a2, unint64_t a3)
{
  return re2::Regexp::ConcatOrAlternate(6, a1, a2, a3, 0);
}

_WORD *re2::Regexp::Capture(uint64_t a1, __int16 a2, int a3)
{
  _WORD *result;

  result = mallocRegexp();
  *result = 11;
  result[1] = a2;
  *((_DWORD *)result + 1) = 65537;
  *((_QWORD *)result + 3) = 0;
  *((_QWORD *)result + 4) = 0;
  *((_QWORD *)result + 1) = a1;
  *((_QWORD *)result + 2) = 0;
  *((_DWORD *)result + 6) = a3;
  return result;
}

_WORD *re2::Regexp::Repeat(uint64_t a1, __int16 a2, int a3, int a4)
{
  _WORD *result;

  result = mallocRegexp();
  *result = 10;
  result[1] = a2;
  *((_DWORD *)result + 1) = 65537;
  *((_QWORD *)result + 3) = 0;
  *((_QWORD *)result + 4) = 0;
  *((_QWORD *)result + 1) = a1;
  *((_QWORD *)result + 2) = 0;
  *((_DWORD *)result + 6) = a4;
  *((_DWORD *)result + 7) = a3;
  return result;
}

double re2::Regexp::NewLiteral(int a1, __int16 a2)
{
  char *v4;
  double result;

  v4 = (char *)mallocRegexp();
  *(_WORD *)v4 = 3;
  *((_WORD *)v4 + 1) = a2;
  *((_WORD *)v4 + 2) = 1;
  result = 0.0;
  *(_OWORD *)(v4 + 22) = 0u;
  *(_OWORD *)(v4 + 6) = 0u;
  *((_WORD *)v4 + 19) = 0;
  *((_DWORD *)v4 + 6) = a1;
  return result;
}

char *re2::Regexp::LiteralString(int *a1, int a2, __int16 a3)
{
  int v6;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int8x8_t v13;
  uint8x8_t v14;
  uint64_t v16;
  uint64_t v17;

  if (a2 <= 0)
  {
    v7 = (char *)mallocRegexp();
    *(_WORD *)v7 = 2;
    *((_WORD *)v7 + 1) = a3;
    *((_WORD *)v7 + 2) = 1;
    *(_OWORD *)(v7 + 6) = 0u;
    *(_OWORD *)(v7 + 22) = 0u;
    *((_WORD *)v7 + 19) = 0;
    return v7;
  }
  if (a2 != 1)
  {
    v7 = (char *)mallocRegexp();
    v9 = 0;
    *(_WORD *)v7 = 4;
    *((_WORD *)v7 + 1) = a3;
    *((_WORD *)v7 + 2) = 1;
    *(_OWORD *)(v7 + 6) = 0u;
    *(_OWORD *)(v7 + 22) = 0u;
    *((_WORD *)v7 + 19) = 0;
    while (1)
    {
      v12 = a1[v9];
      v13 = (int8x8_t)*((unsigned int *)v7 + 6);
      if (v13.i32[0])
      {
        v14 = (uint8x8_t)vcnt_s8(v13);
        v14.i16[0] = vaddlv_u8(v14);
        v10 = *((_QWORD *)v7 + 4);
        if (v13.i32[0] < 8 || v14.i32[0] > 1u)
          goto LABEL_8;
        v16 = operator new[]();
        *((_QWORD *)v7 + 4) = v16;
        if (*((int *)v7 + 6) < 1)
        {
          if (!v10)
          {
            v10 = v16;
            goto LABEL_8;
          }
        }
        else
        {
          v17 = 0;
          do
          {
            *(_DWORD *)(*((_QWORD *)v7 + 4) + 4 * v17) = *(_DWORD *)(v10 + 4 * v17);
            ++v17;
          }
          while (v17 < *((int *)v7 + 6));
        }
        MEMORY[0x1C3BD4840](v10, 0x1000C8052888210);
        v10 = *((_QWORD *)v7 + 4);
      }
      else
      {
        v10 = operator new[]();
        *((_QWORD *)v7 + 4) = v10;
      }
LABEL_8:
      v11 = *((int *)v7 + 6);
      *((_DWORD *)v7 + 6) = v11 + 1;
      *(_DWORD *)(v10 + 4 * v11) = v12;
      if (++v9 == a2)
        return v7;
    }
  }
  v6 = *a1;
  v7 = (char *)mallocRegexp();
  *(_WORD *)v7 = 3;
  *((_WORD *)v7 + 1) = a3;
  *((_WORD *)v7 + 2) = 1;
  *(_OWORD *)(v7 + 22) = 0u;
  *(_OWORD *)(v7 + 6) = 0u;
  *((_WORD *)v7 + 19) = 0;
  *((_DWORD *)v7 + 6) = v6;
  return v7;
}

double re2::Regexp::NewCharClass(uint64_t a1, __int16 a2)
{
  char *v4;
  double result;

  v4 = (char *)mallocRegexp();
  *(_WORD *)v4 = 20;
  *((_WORD *)v4 + 1) = a2;
  *((_WORD *)v4 + 2) = 1;
  result = 0.0;
  *(_OWORD *)(v4 + 22) = 0u;
  *(_OWORD *)(v4 + 6) = 0u;
  *((_WORD *)v4 + 19) = 0;
  *((_QWORD *)v4 + 3) = a1;
  return result;
}

__n128 re2::Regexp::Swap(re2::Regexp *this, re2::Regexp *a2)
{
  __n128 result;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  result = *(__n128 *)this;
  v3 = *((_OWORD *)this + 1);
  v4 = *((_QWORD *)this + 4);
  v5 = *((_QWORD *)a2 + 4);
  v6 = *((_OWORD *)a2 + 1);
  *(_OWORD *)this = *(_OWORD *)a2;
  *((_OWORD *)this + 1) = v6;
  *((_QWORD *)this + 4) = v5;
  *((_QWORD *)a2 + 4) = v4;
  *(__n128 *)a2 = result;
  *((_OWORD *)a2 + 1) = v3;
  return result;
}

BOOL re2::Regexp::Equal(re2::Regexp *this, re2::Regexp *a2, re2::Regexp *a3)
{
  re2::Regexp *v3;
  re2::Regexp *v4;
  re2::Regexp *v5;
  int v6;
  re2 **v7;
  re2 **v8;
  unint64_t v9;
  uint64_t v10;
  re2 **v11;
  re2 **v12;
  re2::Regexp **v13;
  unint64_t v14;
  re2::Regexp *v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  re2 *v19;
  re2::Regexp *v20;
  re2::Regexp **v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _BYTE *v25;
  re2 **v26;
  unint64_t v27;
  re2 **v28;
  uint64_t v29;
  _OWORD *v30;
  re2 **v31;
  uint64_t v32;
  __int128 v33;
  re2 *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _BYTE *v38;
  re2::Regexp **v39;
  unint64_t v40;
  re2::Regexp **v41;
  re2::Regexp *v42;
  uint64_t v43;
  _OWORD *v44;
  re2::Regexp **v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  size_t v56;
  char *v57;
  unint64_t v58;
  re2 **v59;
  uint64_t v60;
  char *v61;
  re2 **v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  re2::Regexp *v67;
  re2::Regexp *v68;
  re2::Regexp *v69;
  re2::Regexp *v70;
  _QWORD *v71;
  _QWORD *v72;

  v3 = a2;
  v4 = this;
  if (!this || !a2)
    return this == a2;
  if (!re2::TopEqual(this, a2, a3))
    return 0;
  v6 = *(unsigned __int8 *)v4;
  if ((v6 - 5) > 6)
    return 1;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  while (v6 - 7 < 5)
  {
    v12 = (re2 **)((char *)v4 + 8);
    if (*((unsigned __int16 *)v4 + 3) >= 2u)
      v12 = (re2 **)*v12;
    v13 = (re2::Regexp **)((char *)v3 + 8);
    if (*((unsigned __int16 *)v3 + 3) >= 2u)
      v13 = (re2::Regexp **)*v13;
    v4 = *v12;
    v3 = *v13;
    if (!re2::TopEqual(*v12, *v13, v5))
    {
LABEL_103:
      v10 = 0;
      if (v7)
        goto LABEL_104;
      return v10;
    }
    v11 = v8;
LABEL_11:
    LOBYTE(v6) = *(_BYTE *)v4;
    v8 = v11;
  }
  if (v6 - 5 < 2)
  {
    LODWORD(v14) = *((unsigned __int16 *)v4 + 3);
    if (*((_WORD *)v4 + 3))
    {
      v15 = v4;
      v16 = 0;
      v67 = v15;
      v69 = v3;
      v71 = (_QWORD *)((char *)v3 + 8);
      v72 = (_QWORD *)((char *)v15 + 8);
      do
      {
        v17 = v72;
        if (v14 >= 2)
          v17 = (_QWORD *)*v72;
        v18 = v71;
        if (*((unsigned __int16 *)v3 + 3) >= 2u)
          v18 = (_QWORD *)*v71;
        v19 = (re2 *)v17[v16];
        v20 = (re2::Regexp *)v18[v16];
        if (!re2::TopEqual(v19, v20, v5))
          goto LABEL_103;
        if ((unint64_t)v8 < v9)
        {
          *v8 = v19;
          v21 = v8 + 1;
          if ((unint64_t)(v8 + 1) >= v9)
            goto LABEL_54;
          goto LABEL_22;
        }
        v22 = v8 - v7;
        v23 = v22 + 1;
        if ((unint64_t)(v22 + 1) >> 61)
          goto LABEL_108;
        if ((uint64_t)(v9 - (_QWORD)v7) >> 2 > v23)
          v23 = (uint64_t)(v9 - (_QWORD)v7) >> 2;
        if (v9 - (unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
          v24 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v24 = v23;
        if (v24)
        {
          if (v24 >> 61)
            goto LABEL_109;
          v25 = operator new(8 * v24);
        }
        else
        {
          v25 = 0;
        }
        v26 = (re2 **)&v25[8 * v22];
        *v26 = v19;
        v21 = v26 + 1;
        if (v8 != v7)
        {
          v27 = (char *)(v8 - 1) - (char *)v7;
          if (v27 < 0x58)
          {
            v28 = v8;
            goto LABEL_50;
          }
          if ((unint64_t)((char *)v7 - v25) < 0x20)
          {
            v28 = v8;
            do
            {
LABEL_50:
              v34 = *--v28;
              *--v26 = v34;
            }
            while (v28 != v7);
            goto LABEL_51;
          }
          v29 = (v27 >> 3) + 1;
          v28 = &v8[-(v29 & 0x3FFFFFFFFFFFFFFCLL)];
          v30 = &v25[8 * v22 - 16];
          v31 = v8 - 2;
          v32 = v29 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v33 = *(_OWORD *)v31;
            *(v30 - 1) = *((_OWORD *)v31 - 1);
            *v30 = v33;
            v30 -= 2;
            v31 -= 4;
            v32 -= 4;
          }
          while (v32);
          v26 -= v29 & 0x3FFFFFFFFFFFFFFCLL;
          if (v29 != (v29 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_50;
        }
LABEL_51:
        v9 = (unint64_t)&v25[8 * v24];
        if (v7)
          operator delete(v7);
        v7 = v26;
        if ((unint64_t)v21 >= v9)
        {
LABEL_54:
          v35 = v21 - v7;
          v36 = v35 + 1;
          if ((unint64_t)(v35 + 1) >> 61)
LABEL_108:
            std::vector<re2::RE2 *>::__throw_length_error[abi:ne180100]();
          if ((uint64_t)(v9 - (_QWORD)v7) >> 2 > v36)
            v36 = (uint64_t)(v9 - (_QWORD)v7) >> 2;
          if (v9 - (unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
            v37 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v37 = v36;
          if (v37)
          {
            if (v37 >> 61)
LABEL_109:
              std::__throw_bad_array_new_length[abi:ne180100]();
            v38 = operator new(8 * v37);
          }
          else
          {
            v38 = 0;
          }
          v39 = (re2::Regexp **)&v38[8 * v35];
          v9 = (unint64_t)&v38[8 * v37];
          *v39 = v20;
          v8 = v39 + 1;
          if (v21 == v7)
          {
            v3 = v69;
          }
          else
          {
            v40 = (char *)(v21 - 1) - (char *)v7;
            if (v40 < 0x58 || (unint64_t)((char *)v7 - v38) < 0x20)
            {
              v41 = v21;
              v3 = v69;
              goto LABEL_68;
            }
            v43 = (v40 >> 3) + 1;
            v41 = &v21[-(v43 & 0x3FFFFFFFFFFFFFFCLL)];
            v44 = &v38[8 * v35 - 16];
            v45 = v21 - 2;
            v46 = v43 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v47 = *(_OWORD *)v45;
              *(v44 - 1) = *((_OWORD *)v45 - 1);
              *v44 = v47;
              v44 -= 2;
              v45 -= 4;
              v46 -= 4;
            }
            while (v46);
            v39 -= v43 & 0x3FFFFFFFFFFFFFFCLL;
            v3 = v69;
            if (v43 != (v43 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_68:
                v42 = *--v41;
                *--v39 = v42;
              }
              while (v41 != v7);
            }
            if (!v7)
            {
LABEL_73:
              v7 = v39;
              goto LABEL_23;
            }
          }
          operator delete(v7);
          goto LABEL_73;
        }
LABEL_22:
        *v21 = v20;
        v8 = v21 + 1;
        v3 = v69;
LABEL_23:
        ++v16;
        v14 = *((unsigned __int16 *)v67 + 3);
      }
      while (v16 < v14);
    }
  }
  v48 = (char *)v8 - (char *)v7;
  if ((((char *)v8 - (char *)v7) & 0x7FFFFFFF8) != 0)
  {
    v49 = v48 >> 3;
    v50 = (v48 << 29) - 0x200000000;
    v51 = v50 >> 32;
    v4 = *(re2 **)((char *)v7 + (v50 >> 29));
    v3 = *(re2 **)((char *)v7 + (((v48 << 29) - 0x100000000) >> 29));
    v52 = (v50 >> 32) - (v48 >> 3);
    if (v50 >> 32 <= (unint64_t)(v48 >> 3))
    {
      if (v50 >> 32 >= (unint64_t)(v48 >> 3))
        v11 = v8;
      else
        v11 = (re2 **)((char *)v7 + (v50 >> 29));
      goto LABEL_11;
    }
    if (v52 <= (uint64_t)(v9 - (_QWORD)v8) >> 3)
    {
      bzero(v8, 8 * v52);
      v11 = &v8[v52];
      goto LABEL_11;
    }
    if (v50 < 0)
      std::vector<re2::RE2 *>::__throw_length_error[abi:ne180100]();
    if ((uint64_t)(v9 - (_QWORD)v7) >> 2 > v51)
      v51 = (uint64_t)(v9 - (_QWORD)v7) >> 2;
    if (v9 - (unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
      v53 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v53 = v51;
    if (v53 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v68 = *(re2 **)((char *)v7 + (v50 >> 29));
    v70 = *(re2 **)((char *)v7 + (((v48 << 29) - 0x100000000) >> 29));
    v54 = (char *)operator new(8 * v53);
    v55 = &v54[8 * v49];
    v56 = 8 * v52;
    v57 = v54;
    v9 = (unint64_t)&v54[8 * v53];
    bzero(v55, v56);
    v11 = (re2 **)&v55[v56];
    if (v8 == v7)
    {
      v4 = v68;
      goto LABEL_100;
    }
    v58 = (char *)v8 - (char *)v7 - 8;
    v4 = v68;
    if (v58 >= 0x58)
    {
      if ((unint64_t)((char *)v7 - v57) >= 0x20)
      {
        v60 = (v58 >> 3) + 1;
        v59 = &v8[-(v60 & 0x3FFFFFFFFFFFFFFCLL)];
        v61 = &v57[8 * v49 - 16];
        v62 = v8 - 2;
        v63 = v60 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v64 = *(_OWORD *)v62;
          *((_OWORD *)v61 - 1) = *((_OWORD *)v62 - 1);
          *(_OWORD *)v61 = v64;
          v61 -= 32;
          v62 -= 4;
          v63 -= 4;
        }
        while (v63);
        v55 -= 8 * (v60 & 0x3FFFFFFFFFFFFFFCLL);
        if (v60 == (v60 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_99:
          if (!v7)
          {
LABEL_101:
            v7 = (re2 **)v55;
            v3 = v70;
            goto LABEL_11;
          }
LABEL_100:
          operator delete(v7);
          goto LABEL_101;
        }
      }
      else
      {
        v59 = v8;
      }
    }
    else
    {
      v59 = v8;
    }
    do
    {
      v65 = (uint64_t)*--v59;
      *((_QWORD *)v55 - 1) = v65;
      v55 -= 8;
    }
    while (v59 != v7);
    goto LABEL_99;
  }
  v10 = 1;
  if (v7)
LABEL_104:
    operator delete(v7);
  return v10;
}

void sub_1C3684544(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL re2::TopEqual(re2 *this, re2::Regexp *a2, re2::Regexp *a3)
{
  int v3;
  _BOOL8 result;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::ios_base *v12;
  uint64_t v13;
  const void *v14;
  const void *v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21[8];
  __int128 v22;
  __int128 v23;
  int v24;
  uint64_t v25;

  v3 = *(unsigned __int8 *)this;
  if (v3 != *(unsigned __int8 *)a2)
    return 0;
  result = 1;
  switch(v3)
  {
    case 1:
    case 2:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      return result;
    case 3:
      if (*((_DWORD *)this + 6) != *((_DWORD *)a2 + 6))
        return 0;
      return ((*((unsigned __int16 *)a2 + 1) ^ *((unsigned __int16 *)this + 1)) & 1) == 0;
    case 4:
      v13 = *((int *)this + 6);
      if ((_DWORD)v13 != *((_DWORD *)a2 + 6)
        || ((*((unsigned __int16 *)a2 + 1) ^ *((unsigned __int16 *)this + 1)) & 1) != 0)
      {
        return 0;
      }
      v14 = (const void *)*((_QWORD *)this + 4);
      v15 = (const void *)*((_QWORD *)a2 + 4);
      v16 = 4 * v13;
      goto LABEL_18;
    case 5:
    case 6:
      v6 = *((unsigned __int16 *)this + 3);
      v7 = *((unsigned __int16 *)a2 + 3);
      goto LABEL_14;
    case 7:
    case 8:
    case 9:
      return ((*((unsigned __int16 *)a2 + 1) ^ *((unsigned __int16 *)this + 1)) & 0x40) == 0;
    case 10:
      if (((*((unsigned __int16 *)a2 + 1) ^ *((unsigned __int16 *)this + 1)) & 0x40) != 0
        || *((_DWORD *)this + 7) != *((_DWORD *)a2 + 7))
      {
        return 0;
      }
      goto LABEL_13;
    case 11:
      if (*((_DWORD *)this + 6) != *((_DWORD *)a2 + 6))
        return 0;
      return *((_QWORD *)this + 4) == *((_QWORD *)a2 + 4);
    case 19:
      return ((*((_WORD *)a2 + 1) ^ *((_WORD *)this + 1)) & 0x8000u) == 0;
    case 20:
      v17 = *((_QWORD *)this + 3);
      v18 = *((_QWORD *)a2 + 3);
      if (*(_DWORD *)(v17 + 4) != *(_DWORD *)(v18 + 4))
        return 0;
      v16 = 8 * *(int *)(v17 + 16);
      if (v16 != 8 * *(int *)(v18 + 16))
        return 0;
      v15 = *(const void **)(v18 + 8);
      v14 = *(const void **)(v17 + 8);
LABEL_18:
      result = memcmp(v14, v15, v16) == 0;
      break;
    case 21:
LABEL_13:
      v6 = *((_DWORD *)this + 6);
      v7 = *((_DWORD *)a2 + 6);
LABEL_14:
      result = v6 == v7;
      break;
    default:
      LOBYTE(v19) = 0;
      v8 = MEMORY[0x1E0DE4FE0];
      v9 = MEMORY[0x1E0DE4FE0] + 64;
      v10 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
      v11 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
      v25 = MEMORY[0x1E0DE4FE0] + 64;
      v20 = v10;
      *(uint64_t *)((char *)&v21[-1] + *(_QWORD *)(v10 - 24)) = v11;
      v12 = (std::ios_base *)((char *)&v21[-1] + *(_QWORD *)(v20 - 24));
      std::ios_base::init(v12, v21);
      v12[1].__vftable = 0;
      v12[1].__fmtflags_ = -1;
      v20 = v8 + 24;
      v25 = v9;
      std::streambuf::basic_streambuf();
      v21[0] = MEMORY[0x1E0DE4FB8] + 16;
      v22 = 0u;
      v23 = 0u;
      v24 = 16;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)"Unexpected op in Regexp::Equal: ", 32);
      std::ostream::operator<<();
      LogMessage::~LogMessage(&v19);
      return 0;
  }
  return result;
}

void sub_1C36847E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1C3BD4828](v1 + 120);
  _Unwind_Resume(a1);
}

void sub_1C368480C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  LogMessage::~LogMessage(&a9);
  _Unwind_Resume(a1);
}

size_t re2::RegexpStatus::CodeText@<X0>(unsigned int a1@<W0>, _QWORD *a2@<X8>)
{
  int v3;
  const char *v4;
  size_t result;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  if (a1 > 0xD)
    v3 = 1;
  else
    v3 = a1;
  v4 = re2::kErrorStrings[v3];
  result = strlen(v4);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = result;
  if (result >= 0x17)
  {
    v7 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v7 = result | 7;
    v8 = v7 + 1;
    v9 = operator new(v7 + 1);
    a2[1] = v6;
    a2[2] = v8 | 0x8000000000000000;
    *a2 = v9;
    a2 = v9;
  }
  else
  {
    *((_BYTE *)a2 + 23) = result;
    if (!result)
      goto LABEL_12;
  }
  result = (size_t)memmove(a2, v4, v6);
LABEL_12:
  *((_BYTE *)a2 + v6) = 0;
  return result;
}

unint64_t re2::RegexpStatus::Text@<X0>(re2::RegexpStatus *this@<X0>, std::string *a2@<X8>)
{
  std::string *v3;
  int v4;
  const char *v5;
  size_t v6;
  size_t v7;
  void **p_dst;
  int v9;
  const char *v10;
  unint64_t result;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  uint64_t v17;
  uint64_t v18;
  std::string *v19;
  void **__dst;
  size_t v21;
  int64_t v22;

  v3 = a2;
  if (!*((_DWORD *)this + 4))
  {
    v9 = *(_DWORD *)this;
    if (*(_DWORD *)this > 0xDu)
      v9 = 1;
    v10 = re2::kErrorStrings[v9];
    result = strlen(v10);
    if (result > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v12 = result;
    if (result >= 0x17)
    {
      v17 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((result | 7) != 0x17)
        v17 = result | 7;
      v18 = v17 + 1;
      v19 = (std::string *)operator new(v17 + 1);
      v3->__r_.__value_.__l.__size_ = v12;
      v3->__r_.__value_.__r.__words[2] = v18 | 0x8000000000000000;
      v3->__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
      v3 = v19;
    }
    else
    {
      *((_BYTE *)&v3->__r_.__value_.__s + 23) = result;
      if (!result)
        goto LABEL_31;
    }
    result = (unint64_t)memmove(v3, v10, v12);
LABEL_31:
    v3->__r_.__value_.__s.__data_[v12] = 0;
    return result;
  }
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v4 = *(_DWORD *)this;
  if (*(_DWORD *)this > 0xDu)
    v4 = 1;
  v5 = re2::kErrorStrings[v4];
  v6 = strlen(v5);
  if (v6 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v13 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v13 = v6 | 7;
    v14 = v13 + 1;
    p_dst = (void **)operator new(v13 + 1);
    v21 = v7;
    v22 = v14 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v22) = v6;
    p_dst = (void **)&__dst;
    if (!v6)
      goto LABEL_18;
  }
  memmove(p_dst, v5, v7);
LABEL_18:
  *((_BYTE *)p_dst + v7) = 0;
  if (v22 >= 0)
    v15 = (const std::string::value_type *)&__dst;
  else
    v15 = (const std::string::value_type *)__dst;
  if (v22 >= 0)
    v16 = HIBYTE(v22);
  else
    v16 = v21;
  std::string::append(v3, v15, v16);
  if (SHIBYTE(v22) < 0)
    operator delete(__dst);
  std::string::append(v3, ": ");
  return (unint64_t)std::string::append(v3, *((const std::string::value_type **)this + 1), *((int *)this + 4));
}

void sub_1C3684A94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v15 + 23) & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v15 + 23) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

uint64_t re2::RegexpStatus::Copy(uint64_t this, const re2::RegexpStatus *a2)
{
  uint64_t v2;

  *(_DWORD *)this = *(_DWORD *)a2;
  v2 = *((_QWORD *)a2 + 1);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *(_QWORD *)(this + 8) = v2;
  return this;
}

uint64_t re2::Regexp::NumCaptures(re2::Regexp *this)
{
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void (**v6)();
  _OWORD *v7;
  int v8;
  uint64_t v9;
  int v10;

  v8 = 0;
  v10 = 0;
  v2 = (_OWORD *)operator new();
  *v2 = 0u;
  v2[1] = 0u;
  v2[2] = 0u;
  LOBYTE(v8) = 0;
  v6 = (void (**)())&off_1E7DAA1A0;
  v7 = v2;
  v9 = 1000000;
  re2::Regexp::Walker<int>::WalkInternal((uint64_t *)&v6, (uint64_t)this, 0, 1);
  v3 = HIDWORD(v9);
  v6 = off_1E7DAE000;
  re2::Regexp::Walker<int>::Reset((uint64_t)&v6);
  if (v7)
  {
    v4 = std::deque<re2::WalkState<int>>::~deque[abi:ne180100]((uint64_t)v7);
    MEMORY[0x1C3BD4858](v4, 0x1080C40BE8D5F09);
  }
  return v3;
}

void sub_1C3684BBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  re2::NumCapturesWalker::~NumCapturesWalker((re2::NumCapturesWalker *)&a9);
  _Unwind_Resume(a1);
}

void re2::Regexp::Walker<int>::WalkInternal(uint64_t *a1, uint64_t a2, int a3, int a4)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  _DWORD *v22;
  int v23;
  int v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  int v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  std::ios_base *v63;
  void *v64;
  uint64_t v65;
  uint64_t v66[8];
  __int128 v67;
  __int128 v68;
  int v69;
  uint64_t v70;

  re2::Regexp::Walker<int>::Reset((uint64_t)a1);
  if (a2)
  {
    v8 = (_QWORD *)a1[1];
    v9 = v8[2];
    v10 = v8[1];
    if (v9 == v10)
      v11 = 0;
    else
      v11 = 16 * (v9 - v10) - 1;
    v12 = v8[5];
    v13 = v12 + v8[4];
    if (v11 == v13)
    {
      std::deque<re2::WalkState<int>>::__add_back_capacity(a1[1]);
      v10 = v8[1];
      v12 = v8[5];
      v13 = v12 + v8[4];
    }
    v14 = *(_QWORD *)(v10 + ((v13 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v13 & 0x7F);
    *(_QWORD *)v14 = a2;
    *(_DWORD *)(v14 + 8) = -1;
    *(_DWORD *)(v14 + 12) = a3;
    *(_QWORD *)(v14 + 24) = 0;
    v8[5] = v12 + 1;
    while (1)
    {
      while (1)
      {
        v16 = (_QWORD *)a1[1];
        v17 = v16[5] + v16[4] - 1;
        v18 = *(_QWORD *)(v16[1] + ((v17 >> 4) & 0xFFFFFFFFFFFFFF8));
        v19 = v17 & 0x7F;
        v20 = (uint64_t *)(v18 + 32 * v19);
        v21 = *v20;
        v23 = *((_DWORD *)v20 + 2);
        v22 = v20 + 1;
        if (v23 == -1)
        {
          v38 = *((_DWORD *)a1 + 5);
          *((_DWORD *)a1 + 5) = v38 - 1;
          if (v38 <= 0)
          {
            *((_BYTE *)a1 + 16) = 1;
            v40 = (*(uint64_t (**)(uint64_t *, uint64_t, _QWORD))(*a1 + 40))(a1, v21, *(unsigned int *)(v18 + 32 * v19 + 12));
LABEL_36:
            v46 = v40;
            goto LABEL_37;
          }
          LOBYTE(v64) = 0;
          v39 = v18 + 32 * v19;
          v40 = (*(uint64_t (**)(uint64_t *, uint64_t, _QWORD, void **))(*a1 + 16))(a1, v21, *(unsigned int *)(v39 + 12), &v64);
          *(_DWORD *)(v39 + 16) = v40;
          if ((_BYTE)v64)
            goto LABEL_36;
          *v22 = 0;
          *(_QWORD *)(v39 + 24) = 0;
          v41 = (uint64_t *)(v39 + 24);
          if (*(_WORD *)(v21 + 6))
          {
            if (*(_WORD *)(v21 + 6) == 1)
              v42 = v18 + 32 * v19 + 20;
            else
              v42 = operator new[]();
            *v41 = v42;
          }
        }
        v24 = *(unsigned __int16 *)(v21 + 6);
        if (*(_WORD *)(v21 + 6))
          break;
        v26 = *v22;
LABEL_32:
        v43 = v18 + 32 * v19;
        v45 = *(_QWORD *)(v43 + 24);
        v44 = (_QWORD *)(v43 + 24);
        v46 = (*(uint64_t (**)(uint64_t *, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))(*a1 + 24))(a1, v21, *((unsigned int *)v44 - 3), *((unsigned int *)v44 - 2), v45, v26);
        if (*(unsigned __int16 *)(v21 + 6) >= 2u && *v44)
          MEMORY[0x1C3BD4840](*v44, 0x1000C8052888210);
LABEL_37:
        v47 = (_QWORD *)a1[1];
        v48 = v47[1];
        v49 = v47[2];
        v50 = 16 * (v49 - v48) - 1;
        v52 = v47[4];
        v51 = v47[5];
        if (v49 == v48)
          v50 = 0;
        v53 = v51 - 1;
        v47[5] = v51 - 1;
        if ((unint64_t)(v50 - (v51 + v52) + 1) >= 0x100)
        {
          operator delete(*(void **)(v49 - 8));
          v47[2] -= 8;
          v47 = (_QWORD *)a1[1];
          v53 = v47[5];
        }
        if (!v53)
          return;
        v54 = v53 + v47[4] - 1;
        v55 = *(_QWORD *)(v47[1] + ((v54 >> 4) & 0xFFFFFFFFFFFFFF8));
        v56 = v54 & 0x7F;
        v57 = v55 + 32 * v56;
        v58 = *(_QWORD *)(v57 + 24);
        if (v58)
          v15 = (_DWORD *)(v58 + 4 * *(int *)(v57 + 8));
        else
          v15 = (_DWORD *)(v57 + 20);
        *v15 = v46;
        ++*(_DWORD *)(v55 + 32 * v56 + 8);
      }
      v25 = (_QWORD *)(v21 + 8);
      if (v24 != 1)
        v25 = (_QWORD *)*v25;
      v26 = *v22;
      if ((int)v26 >= v24)
        goto LABEL_32;
      v27 = (v26 - 1);
      v28 = (int)v26 < 1 || a4 == 0;
      if (!v28 && v25[v27] == v25[v26])
      {
        *(_DWORD *)(*(_QWORD *)(v18 + 32 * v19 + 24) + 4 * (int)(*v22)++) = (*(uint64_t (**)(uint64_t *, _QWORD))(*a1 + 32))(a1, *(unsigned int *)(*(_QWORD *)(v18 + 32 * v19 + 24)+ 4 * v27));
      }
      else
      {
        v29 = (_QWORD *)a1[1];
        v30 = v29[2];
        v31 = v29[1];
        v32 = v25[(int)v26];
        v33 = *(_DWORD *)(v18 + 32 * v19 + 16);
        if (v30 == v31)
          v34 = 0;
        else
          v34 = 16 * (v30 - v31) - 1;
        v35 = v29[5];
        v36 = v35 + v29[4];
        if (v34 == v36)
        {
          std::deque<re2::WalkState<int>>::__add_back_capacity(a1[1]);
          v31 = v29[1];
          v35 = v29[5];
          v36 = v35 + v29[4];
        }
        v37 = *(_QWORD *)(v31 + ((v36 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v36 & 0x7F);
        *(_QWORD *)v37 = v32;
        *(_DWORD *)(v37 + 8) = -1;
        *(_DWORD *)(v37 + 12) = v33;
        *(_QWORD *)(v37 + 24) = 0;
        v29[5] = v35 + 1;
      }
    }
  }
  LOBYTE(v64) = 0;
  v59 = MEMORY[0x1E0DE4FE0];
  v60 = MEMORY[0x1E0DE4FE0] + 64;
  v61 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v62 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v70 = MEMORY[0x1E0DE4FE0] + 64;
  v65 = v61;
  *(uint64_t *)((char *)&v66[-1] + *(_QWORD *)(v61 - 24)) = v62;
  v63 = (std::ios_base *)((char *)&v66[-1] + *(_QWORD *)(v65 - 24));
  std::ios_base::init(v63, v66);
  v63[1].__vftable = 0;
  v63[1].__fmtflags_ = -1;
  v65 = v59 + 24;
  v70 = v60;
  std::streambuf::basic_streambuf();
  v66[0] = MEMORY[0x1E0DE4FB8] + 16;
  v67 = 0u;
  v68 = 0u;
  v69 = 16;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v65, (uint64_t)"Walk NULL", 9);
  LogMessage::~LogMessage(&v64);
}

void sub_1C3685038(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_1C368504C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1C3BD4828](v1 + 120);
  _Unwind_Resume(a1);
}

void re2::Regexp::Walker<int>::Reset(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19[8];
  __int128 v20;
  __int128 v21;
  int v22;
  uint64_t v23;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(v1 + 40))
    {
      LOBYTE(v17) = 0;
      v3 = MEMORY[0x1E0DE4FE0];
      v4 = MEMORY[0x1E0DE4FE0] + 64;
      v5 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
      v6 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
      v23 = MEMORY[0x1E0DE4FE0] + 64;
      v18 = v5;
      *(uint64_t *)((char *)&v19[-1] + *(_QWORD *)(v5 - 24)) = v6;
      v7 = (std::ios_base *)((char *)&v19[-1] + *(_QWORD *)(v18 - 24));
      std::ios_base::init(v7, v19);
      v7[1].__vftable = 0;
      v7[1].__fmtflags_ = -1;
      v18 = v3 + 24;
      v23 = v4;
      std::streambuf::basic_streambuf();
      v19[0] = MEMORY[0x1E0DE4FB8] + 16;
      v20 = 0u;
      v21 = 0u;
      v22 = 16;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)"Stack not empty.", 16);
      LogMessage::~LogMessage(&v17);
      v8 = *(_QWORD **)(a1 + 8);
      v9 = v8[5];
      while (v9)
      {
        v10 = v8[4];
        v11 = v9 + v10 - 1;
        v12 = v8[1];
        v13 = *(_QWORD *)(*(_QWORD *)(v12 + ((v11 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v11 & 0x7F) + 24);
        if (v13)
        {
          MEMORY[0x1C3BD4858](v13, 0x1000C4052888210);
          v8 = *(_QWORD **)(a1 + 8);
          v10 = v8[4];
          v12 = v8[1];
        }
        v14 = v8[2];
        v15 = 16 * (v14 - v12) - 1;
        v16 = v8[5];
        if (v14 == v12)
          v15 = 0;
        v9 = v16 - 1;
        v8[5] = v16 - 1;
        if ((unint64_t)(v15 - (v16 + v10) + 1) >= 0x100)
        {
          operator delete(*(void **)(v14 - 8));
          v8[2] -= 8;
          v8 = *(_QWORD **)(a1 + 8);
          v9 = v8[5];
        }
      }
    }
  }
}

void sub_1C3685228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  LogMessage::~LogMessage(&a9);
  _Unwind_Resume(a1);
}

void sub_1C368523C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1C3BD4828](v1 + 120);
  _Unwind_Resume(a1);
}

uint64_t std::deque<re2::WalkState<int>>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 64;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 128;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void re2::NumCapturesWalker::~NumCapturesWalker(re2::NumCapturesWalker *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_1E7DAE000;
  re2::Regexp::Walker<int>::Reset((uint64_t)this);
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    v3 = std::deque<re2::WalkState<int>>::~deque[abi:ne180100](v2);
    MEMORY[0x1C3BD4858](v3, 0x1080C40BE8D5F09);
  }
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_1E7DAE000;
  re2::Regexp::Walker<int>::Reset((uint64_t)this);
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    v3 = std::deque<re2::WalkState<int>>::~deque[abi:ne180100](v2);
    MEMORY[0x1C3BD4858](v3, 0x1080C40BE8D5F09);
  }
  JUMPOUT(0x1C3BD4858);
}

uint64_t re2::Regexp::Walker<int>::PreVisit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t re2::Regexp::Walker<int>::PostVisit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a4;
}

uint64_t re2::Regexp::Walker<int>::Copy(uint64_t a1, uint64_t a2)
{
  return a2;
}

void std::deque<re2::WalkState<int>>::__add_back_capacity(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  void *v29;
  char *v30;
  char *v31;
  void *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  BOOL v40;
  int64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  unint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _OWORD *v52;
  unint64_t v53;
  char *v54;
  char *v55;
  unint64_t v56;
  int64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 *v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  unint64_t v78;
  uint64_t v79;
  __int128 *v80;
  _OWORD *v81;
  uint64_t v82;
  __int128 v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  __int128 *v87;
  _OWORD *v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  int64_t v96;
  unint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  __int128 *v102;
  _OWORD *v103;
  uint64_t v104;
  __int128 v105;
  uint64_t v106;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x80;
  v4 = v2 - 128;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_86:
      *(_QWORD *)v5 = v8;
      goto LABEL_87;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v34 = (v5 - v9) >> 2;
      if (v5 == v9)
        v34 = 1;
      if (!(v34 >> 61))
      {
        v35 = v34 >> 2;
        v36 = 8 * v34;
        v37 = (char *)operator new(8 * v34);
        v38 = &v37[8 * v35];
        v39 = &v37[v36];
        v41 = v5 - v7;
        v40 = v5 == v7;
        v5 = v38;
        if (!v40)
        {
          v5 = &v38[v41 & 0xFFFFFFFFFFFFFFF8];
          v42 = v41 - 8;
          if ((unint64_t)(v41 - 8) >= 0x38)
          {
            v84 = &v37[8 * v35];
            v43 = v84;
            if ((unint64_t)(v84 - v7) >= 0x20)
            {
              v85 = (v42 >> 3) + 1;
              v86 = 8 * (v85 & 0x3FFFFFFFFFFFFFFCLL);
              v43 = &v38[v86];
              v87 = (__int128 *)(v6 + 3);
              v88 = v84 + 16;
              v89 = v85 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v90 = *v87;
                *(v88 - 1) = *(v87 - 1);
                *v88 = v90;
                v87 += 2;
                v88 += 2;
                v89 -= 4;
              }
              while (v89);
              if (v85 == (v85 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_79;
              v7 += v86;
            }
          }
          else
          {
            v43 = &v37[8 * v35];
          }
          do
          {
            v91 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v43 = v91;
            v43 += 8;
          }
          while (v43 != v5);
        }
        goto LABEL_79;
      }
LABEL_104:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_86;
  }
  v18 = *(char **)(a1 + 16);
  v17 = *(char **)(a1 + 24);
  v20 = *(char **)a1;
  v19 = *(char **)(a1 + 8);
  v21 = v18 - v19;
  v22 = (v18 - v19) >> 3;
  v23 = (uint64_t)&v17[-*(_QWORD *)a1];
  if (v22 < (unint64_t)(v23 >> 3))
  {
    v24 = operator new(0x1000uLL);
    v25 = v24;
    if (v17 != v18)
    {
      *(_QWORD *)v18 = v24;
LABEL_87:
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    if (v19 != v20)
    {
      v44 = v19;
      goto LABEL_85;
    }
    v69 = (v17 - v19) >> 2;
    if (v18 == v19)
      v69 = 1;
    if (v69 >> 61)
      goto LABEL_104;
    v70 = (v69 + 3) >> 2;
    v71 = 8 * v69;
    v72 = (char *)operator new(8 * v69);
    v44 = &v72[8 * v70];
    v73 = &v72[v71];
    v74 = v44;
    if (v18 != v19)
    {
      v74 = &v44[8 * v22];
      v75 = &v72[8 * v70];
      v76 = v19;
      if ((unint64_t)(v21 - 8) > 0x37)
      {
        v77 = &v72[8 * v70];
        v75 = v77;
        v76 = v19;
        if ((unint64_t)(v77 - v19) >= 0x20)
        {
          v78 = ((unint64_t)(v21 - 8) >> 3) + 1;
          v79 = 8 * (v78 & 0x3FFFFFFFFFFFFFFCLL);
          v75 = &v44[v79];
          v80 = (__int128 *)(v19 + 16);
          v81 = v77 + 16;
          v82 = v78 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v83 = *v80;
            *(v81 - 1) = *(v80 - 1);
            *v81 = v83;
            v80 += 2;
            v81 += 2;
            v82 -= 4;
          }
          while (v82);
          if (v78 == (v78 & 0x3FFFFFFFFFFFFFFCLL))
          {
            *(_QWORD *)a1 = v72;
            *(_QWORD *)(a1 + 8) = v44;
            *(_QWORD *)(a1 + 16) = v74;
            *(_QWORD *)(a1 + 24) = v73;
LABEL_84:
            operator delete(v19);
            v44 = *(char **)(a1 + 8);
LABEL_85:
            *((_QWORD *)v44 - 1) = v25;
            v7 = *(char **)(a1 + 8);
            v5 = *(char **)(a1 + 16);
            *(_QWORD *)(a1 + 8) = v7 - 8;
            v8 = *((_QWORD *)v7 - 1);
            *(_QWORD *)(a1 + 8) = v7;
            if (v5 != *(char **)(a1 + 24))
              goto LABEL_86;
            v9 = *(char **)a1;
            v10 = (uint64_t)&v7[-*(_QWORD *)a1];
            if ((unint64_t)v7 <= *(_QWORD *)a1)
            {
              v93 = (v5 - v9) >> 2;
              if (v5 == v9)
                v93 = 1;
              if (!(v93 >> 61))
              {
                v94 = v93 >> 2;
                v95 = 8 * v93;
                v37 = (char *)operator new(8 * v93);
                v38 = &v37[8 * v94];
                v39 = &v37[v95];
                v96 = v5 - v7;
                v40 = v5 == v7;
                v5 = v38;
                if (!v40)
                {
                  v5 = &v38[v96 & 0xFFFFFFFFFFFFFFF8];
                  v97 = v96 - 8;
                  if ((unint64_t)(v96 - 8) >= 0x38)
                  {
                    v99 = &v37[8 * v94];
                    v98 = v99;
                    if ((unint64_t)(v99 - v7) >= 0x20)
                    {
                      v100 = (v97 >> 3) + 1;
                      v101 = 8 * (v100 & 0x3FFFFFFFFFFFFFFCLL);
                      v98 = &v38[v101];
                      v102 = (__int128 *)(v7 + 16);
                      v103 = v99 + 16;
                      v104 = v100 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        v105 = *v102;
                        *(v103 - 1) = *(v102 - 1);
                        *v103 = v105;
                        v102 += 2;
                        v103 += 2;
                        v104 -= 4;
                      }
                      while (v104);
                      if (v100 == (v100 & 0x3FFFFFFFFFFFFFFCLL))
                        goto LABEL_79;
                      v7 += v101;
                    }
                  }
                  else
                  {
                    v98 = &v37[8 * v94];
                  }
                  do
                  {
                    v106 = *(_QWORD *)v7;
                    v7 += 8;
                    *(_QWORD *)v98 = v106;
                    v98 += 8;
                  }
                  while (v98 != v5);
                }
LABEL_79:
                *(_QWORD *)a1 = v37;
                *(_QWORD *)(a1 + 8) = v38;
                *(_QWORD *)(a1 + 16) = v5;
                *(_QWORD *)(a1 + 24) = v39;
                if (v9)
                {
                  operator delete(v9);
                  v5 = *(char **)(a1 + 16);
                }
                goto LABEL_86;
              }
              goto LABEL_104;
            }
            goto LABEL_5;
          }
          v76 = &v19[v79];
        }
      }
      do
      {
        v92 = *(_QWORD *)v76;
        v76 += 8;
        *(_QWORD *)v75 = v92;
        v75 += 8;
      }
      while (v75 != v74);
    }
    *(_QWORD *)a1 = v72;
    *(_QWORD *)(a1 + 8) = v44;
    *(_QWORD *)(a1 + 16) = v74;
    *(_QWORD *)(a1 + 24) = v73;
    if (!v19)
      goto LABEL_85;
    goto LABEL_84;
  }
  v26 = v23 >> 2;
  if (v17 == v20)
    v27 = 1;
  else
    v27 = v26;
  if (v27 >> 61)
    goto LABEL_104;
  v28 = (char *)operator new(8 * v27);
  v29 = operator new(0x1000uLL);
  v30 = &v28[8 * v22];
  v31 = &v28[8 * v27];
  if (v22 == v27)
  {
    v32 = v29;
    if (v21 < 1)
    {
      if (v18 == v19)
        v45 = 1;
      else
        v45 = v21 >> 2;
      if (v45 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v30 = (char *)operator new(8 * v45);
      v31 = &v30[8 * v45];
      operator delete(v28);
      v19 = *(char **)(a1 + 8);
      v18 = *(char **)(a1 + 16);
      v28 = v30;
    }
    else
    {
      v33 = v22 + 2;
      if (v22 >= -1)
        v33 = v22 + 1;
      v30 -= 8 * (v33 >> 1);
    }
    v29 = v32;
  }
  *(_QWORD *)v30 = v29;
  v46 = v30 + 8;
  if (v18 != v19)
  {
    do
    {
      if (v30 != v28)
        goto LABEL_41;
      if (v46 < v31)
      {
        v49 = (v31 - v46) >> 3;
        if (v49 >= -1)
          v50 = v49 + 1;
        else
          v50 = v49 + 2;
        v51 = v50 >> 1;
        v30 = &v28[8 * (v50 >> 1)];
        v52 = v28;
        if (v46 != v28)
        {
          memmove(v30, v28, v46 - v28);
          v52 = v46;
        }
        v46 = (char *)v52 + 8 * v51;
        goto LABEL_41;
      }
      if (v31 == v28)
        v53 = 1;
      else
        v53 = (v31 - v28) >> 2;
      if (v53 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v54 = (char *)operator new(8 * v53);
      v55 = v54;
      v56 = (v53 + 3) >> 2;
      v30 = &v54[8 * v56];
      v57 = v46 - v28;
      v40 = v46 == v28;
      v46 = v30;
      if (!v40)
      {
        v46 = &v30[v57 & 0xFFFFFFFFFFFFFFF8];
        v58 = v57 - 8;
        v59 = &v54[8 * v56];
        v60 = v28;
        if (v58 >= 0x38)
        {
          v61 = 8 * v56;
          v59 = &v54[8 * v56];
          v60 = v28;
          if ((unint64_t)(v59 - v28) >= 0x20)
          {
            v62 = (v58 >> 3) + 1;
            v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
            v59 = &v30[v63];
            v64 = (__int128 *)(v28 + 16);
            v65 = &v54[v61 + 16];
            v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v67 = *v64;
              *((_OWORD *)v65 - 1) = *(v64 - 1);
              *(_OWORD *)v65 = v67;
              v64 += 2;
              v65 += 32;
              v66 -= 4;
            }
            while (v66);
            if (v62 == (v62 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_40;
            v60 = &v28[v63];
          }
        }
        do
        {
          v68 = *(_QWORD *)v60;
          v60 += 8;
          *(_QWORD *)v59 = v68;
          v59 += 8;
        }
        while (v59 != v46);
      }
LABEL_40:
      v31 = &v54[8 * v53];
      operator delete(v28);
      v28 = v55;
LABEL_41:
      v48 = *((_QWORD *)v18 - 1);
      v18 -= 8;
      *((_QWORD *)v30 - 1) = v48;
      v30 -= 8;
    }
    while (v18 != *(char **)(a1 + 8));
  }
  v47 = *(char **)a1;
  *(_QWORD *)a1 = v28;
  *(_QWORD *)(a1 + 8) = v30;
  *(_QWORD *)(a1 + 16) = v46;
  *(_QWORD *)(a1 + 24) = v31;
  if (v47)
    operator delete(v47);
}

void sub_1C368599C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t re2::NumCapturesWalker::PreVisit(re2::NumCapturesWalker *this, re2::Regexp *a2, uint64_t a3, BOOL *a4)
{
  if (*(_BYTE *)a2 == 11)
    ++*((_DWORD *)this + 6);
  return a3;
}

uint64_t re2::NumCapturesWalker::ShortVisit(re2::NumCapturesWalker *this, re2::Regexp *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  void *v10;
  uint64_t v11;
  uint64_t v12[8];
  __int128 v13;
  __int128 v14;
  int v15;
  uint64_t v16;

  LOBYTE(v10) = 0;
  v4 = MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v16 = MEMORY[0x1E0DE4FE0] + 64;
  v11 = v6;
  *(uint64_t *)((char *)&v12[-1] + *(_QWORD *)(v6 - 24)) = v7;
  v8 = (std::ios_base *)((char *)&v12[-1] + *(_QWORD *)(v11 - 24));
  std::ios_base::init(v8, v12);
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v11 = v4 + 24;
  v16 = v5;
  std::streambuf::basic_streambuf();
  v12[0] = MEMORY[0x1E0DE4FB8] + 16;
  v13 = 0u;
  v14 = 0u;
  v15 = 16;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v11, (uint64_t)"NumCapturesWalker::ShortVisit called", 36);
  LogMessage::~LogMessage(&v10);
  return a3;
}

void sub_1C3685B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  LogMessage::~LogMessage(&a9);
  _Unwind_Resume(a1);
}

void sub_1C3685B5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1C3BD4828](v1 + 120);
  _Unwind_Resume(a1);
}

uint64_t re2::Regexp::NamedCaptures(re2::Regexp *this)
{
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void (**v6)();
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v8 = 0xF424000000000;
  v2 = (_OWORD *)operator new();
  *v2 = 0u;
  v2[1] = 0u;
  v2[2] = 0u;
  v6 = (void (**)())&off_1E7DAA1F8;
  v7 = v2;
  v9 = 0;
  re2::Regexp::Walker<int>::WalkInternal((uint64_t *)&v6, (uint64_t)this, 0, 1);
  v3 = v9;
  v9 = 0;
  v6 = off_1E7DAE000;
  re2::Regexp::Walker<int>::Reset((uint64_t)&v6);
  if (v7)
  {
    v4 = std::deque<re2::WalkState<int>>::~deque[abi:ne180100]((uint64_t)v7);
    MEMORY[0x1C3BD4858](v4, 0x1080C40BE8D5F09);
  }
  return v3;
}

void sub_1C3685C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  re2::NamedCapturesWalker::~NamedCapturesWalker((re2::NamedCapturesWalker *)&a9);
  _Unwind_Resume(a1);
}

void re2::NamedCapturesWalker::~NamedCapturesWalker(re2::NamedCapturesWalker *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E7DAA1F8;
  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(*(char **)(v2 + 8));
    MEMORY[0x1C3BD4858](v2, 0x1020C4062D53EE8);
  }
  *(_QWORD *)this = off_1E7DAE000;
  re2::Regexp::Walker<int>::Reset((uint64_t)this);
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    v4 = std::deque<re2::WalkState<int>>::~deque[abi:ne180100](v3);
    MEMORY[0x1C3BD4858](v4, 0x1080C40BE8D5F09);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E7DAA1F8;
  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(*(char **)(v2 + 8));
    MEMORY[0x1C3BD4858](v2, 0x1020C4062D53EE8);
  }
  *(_QWORD *)this = off_1E7DAE000;
  re2::Regexp::Walker<int>::Reset((uint64_t)this);
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    v4 = std::deque<re2::WalkState<int>>::~deque[abi:ne180100](v3);
    MEMORY[0x1C3BD4858](v4, 0x1080C40BE8D5F09);
  }
  JUMPOUT(0x1C3BD4858);
}

void std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(*((_QWORD *)a1 + 1));
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

uint64_t re2::NamedCapturesWalker::PreVisit(re2::NamedCapturesWalker *this, re2::Regexp *a2, uint64_t a3, BOOL *a4)
{
  uint64_t v4;
  __int128 *v6;
  uint64_t v8;
  uint64_t *v9;
  char v10;
  size_t v11;
  const std::string::value_type *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  size_t v16;
  const void *v17;
  size_t v18;
  int v19;
  _BOOL4 v20;
  BOOL v21;
  uint64_t *v22;
  const void *v23;
  uint64_t v24;
  const void *v25;
  int v26;
  size_t v27;
  const void *v28;
  size_t v29;
  int v30;
  BOOL v31;
  int v32;
  uint64_t **v33;
  int v34;
  size_t v35;
  const std::string::value_type *v36;
  uint64_t **v37;
  int v38;
  size_t v39;
  const void *v40;
  size_t v41;
  int v42;
  _BOOL4 v43;
  int v44;
  _BOOL4 v45;
  uint64_t **v46;
  char *v47;
  std::string *v48;
  __int128 v49;
  uint64_t v50;
  uint64_t *v51;
  unsigned int v53;

  v4 = a3;
  if (*(_BYTE *)a2 != 11)
    return v4;
  v6 = (__int128 *)*((_QWORD *)a2 + 4);
  if (!v6)
    return v4;
  v8 = *((_QWORD *)this + 3);
  if (!v8)
  {
    v8 = operator new();
    *(_QWORD *)(v8 + 16) = 0;
    *(_QWORD *)(v8 + 8) = 0;
    *(_QWORD *)v8 = v8 + 8;
    *((_QWORD *)this + 3) = v8;
    v6 = (__int128 *)*((_QWORD *)a2 + 4);
    goto LABEL_68;
  }
  v9 = *(uint64_t **)(v8 + 8);
  if (!v9)
  {
LABEL_68:
    v32 = *((_DWORD *)a2 + 6);
    v33 = (uint64_t **)(v8 + 8);
    v46 = (uint64_t **)(v8 + 8);
    v37 = (uint64_t **)(v8 + 8);
LABEL_69:
    v47 = (char *)operator new(0x40uLL);
    v48 = (std::string *)(v47 + 32);
    if (*((char *)v6 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v48, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
    }
    else
    {
      v49 = *v6;
      *((_QWORD *)v47 + 6) = *((_QWORD *)v6 + 2);
      *(_OWORD *)&v48->__r_.__value_.__l.__data_ = v49;
    }
    *((_DWORD *)v47 + 14) = 0;
    *(_QWORD *)v47 = 0;
    *((_QWORD *)v47 + 1) = 0;
    *((_QWORD *)v47 + 2) = v37;
    *v46 = (uint64_t *)v47;
    v50 = **(_QWORD **)v8;
    v51 = (uint64_t *)v47;
    if (v50)
    {
      *(_QWORD *)v8 = v50;
      v51 = *v46;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*v33, v51);
    ++*(_QWORD *)(v8 + 16);
LABEL_75:
    *((_DWORD *)v47 + 14) = v32;
    return v4;
  }
  v53 = a3;
  v10 = *((_BYTE *)v6 + 23);
  if (v10 >= 0)
    v11 = *((unsigned __int8 *)v6 + 23);
  else
    v11 = *((_QWORD *)v6 + 1);
  if (v10 >= 0)
    v12 = (const std::string::value_type *)*((_QWORD *)a2 + 4);
  else
    v12 = *(const std::string::value_type **)v6;
  v13 = v8 + 8;
  v14 = *(_QWORD *)(v8 + 8);
  do
  {
    v15 = *(char *)(v14 + 55);
    if (v15 >= 0)
      v16 = *(unsigned __int8 *)(v14 + 55);
    else
      v16 = *(_QWORD *)(v14 + 40);
    if (v15 >= 0)
      v17 = (const void *)(v14 + 32);
    else
      v17 = *(const void **)(v14 + 32);
    if (v11 >= v16)
      v18 = v16;
    else
      v18 = v11;
    v19 = memcmp(v17, v12, v18);
    v20 = v16 < v11;
    if (v19)
      v20 = v19 < 0;
    v21 = !v20;
    if (v20)
      v22 = (uint64_t *)(v14 + 8);
    else
      v22 = (uint64_t *)v14;
    if (v21)
      v13 = v14;
    v14 = *v22;
  }
  while (*v22);
  v4 = v53;
  if (v13 == v8 + 8)
    goto LABEL_43;
  v25 = *(const void **)(v13 + 32);
  v24 = v13 + 32;
  v23 = v25;
  v26 = *(char *)(v24 + 23);
  if (v26 >= 0)
    v27 = *(unsigned __int8 *)(v24 + 23);
  else
    v27 = *(_QWORD *)(v24 + 8);
  if (v26 >= 0)
    v28 = (const void *)v24;
  else
    v28 = v23;
  if (v27 >= v11)
    v29 = v11;
  else
    v29 = v27;
  v30 = memcmp(v12, v28, v29);
  v31 = v11 < v27;
  if (v30)
    v31 = v30 < 0;
  if (v31)
  {
LABEL_43:
    v32 = *((_DWORD *)a2 + 6);
    v33 = (uint64_t **)(v8 + 8);
    v34 = *((char *)v6 + 23);
    if (v34 >= 0)
      v35 = *((unsigned __int8 *)v6 + 23);
    else
      v35 = *((_QWORD *)v6 + 1);
    if (v34 >= 0)
      v36 = (const std::string::value_type *)v6;
    else
      v36 = *(const std::string::value_type **)v6;
    while (1)
    {
      while (1)
      {
        v37 = (uint64_t **)v9;
        v38 = *((char *)v9 + 55);
        if (v38 >= 0)
          v39 = *((unsigned __int8 *)v9 + 55);
        else
          v39 = v9[5];
        if (v38 >= 0)
          v40 = v9 + 4;
        else
          v40 = (const void *)v9[4];
        if (v39 >= v35)
          v41 = v35;
        else
          v41 = v39;
        v42 = memcmp(v36, v40, v41);
        v43 = v35 < v39;
        if (v42)
          v43 = v42 < 0;
        if (v43)
          break;
        v44 = memcmp(v40, v36, v41);
        v45 = v39 < v35;
        if (v44)
          v45 = v44 < 0;
        if (!v45)
        {
          v47 = (char *)v37;
          v4 = v53;
          goto LABEL_75;
        }
        v9 = v37[1];
        if (!v9)
        {
          v46 = v37 + 1;
LABEL_78:
          v4 = v53;
          goto LABEL_69;
        }
      }
      v9 = *v37;
      if (!*v37)
      {
        v46 = v37;
        goto LABEL_78;
      }
    }
  }
  return v4;
}

void sub_1C36860A0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t re2::NamedCapturesWalker::ShortVisit(re2::NamedCapturesWalker *this, re2::Regexp *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  void *v10;
  uint64_t v11;
  uint64_t v12[8];
  __int128 v13;
  __int128 v14;
  int v15;
  uint64_t v16;

  LOBYTE(v10) = 0;
  v4 = MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v16 = MEMORY[0x1E0DE4FE0] + 64;
  v11 = v6;
  *(uint64_t *)((char *)&v12[-1] + *(_QWORD *)(v6 - 24)) = v7;
  v8 = (std::ios_base *)((char *)&v12[-1] + *(_QWORD *)(v11 - 24));
  std::ios_base::init(v8, v12);
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v11 = v4 + 24;
  v16 = v5;
  std::streambuf::basic_streambuf();
  v12[0] = MEMORY[0x1E0DE4FB8] + 16;
  v13 = 0u;
  v14 = 0u;
  v15 = 16;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v11, (uint64_t)"NamedCapturesWalker::ShortVisit called", 38);
  LogMessage::~LogMessage(&v10);
  return a3;
}

void sub_1C36861A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  LogMessage::~LogMessage(&a9);
  _Unwind_Resume(a1);
}

void sub_1C36861BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1C3BD4828](v1 + 120);
  _Unwind_Resume(a1);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

uint64_t re2::Regexp::CaptureNames(re2::Regexp *this)
{
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void (**v6)();
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v8 = 0xF424000000000;
  v2 = (_OWORD *)operator new();
  *v2 = 0u;
  v2[1] = 0u;
  v2[2] = 0u;
  v6 = (void (**)())&off_1E7DAA250;
  v7 = v2;
  v9 = 0;
  re2::Regexp::Walker<int>::WalkInternal((uint64_t *)&v6, (uint64_t)this, 0, 1);
  v3 = v9;
  v9 = 0;
  v6 = off_1E7DAE000;
  re2::Regexp::Walker<int>::Reset((uint64_t)&v6);
  if (v7)
  {
    v4 = std::deque<re2::WalkState<int>>::~deque[abi:ne180100]((uint64_t)v7);
    MEMORY[0x1C3BD4858](v4, 0x1080C40BE8D5F09);
  }
  return v3;
}

void sub_1C3686328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  re2::CaptureNamesWalker::~CaptureNamesWalker((re2::CaptureNamesWalker *)&a9);
  _Unwind_Resume(a1);
}

void re2::CaptureNamesWalker::~CaptureNamesWalker(re2::CaptureNamesWalker *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E7DAA250;
  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy(*(char **)(v2 + 8));
    MEMORY[0x1C3BD4858](v2, 0x1020C4062D53EE8);
  }
  *(_QWORD *)this = off_1E7DAE000;
  re2::Regexp::Walker<int>::Reset((uint64_t)this);
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    v4 = std::deque<re2::WalkState<int>>::~deque[abi:ne180100](v3);
    MEMORY[0x1C3BD4858](v4, 0x1080C40BE8D5F09);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E7DAA250;
  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy(*(char **)(v2 + 8));
    MEMORY[0x1C3BD4858](v2, 0x1020C4062D53EE8);
  }
  *(_QWORD *)this = off_1E7DAE000;
  re2::Regexp::Walker<int>::Reset((uint64_t)this);
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    v4 = std::deque<re2::WalkState<int>>::~deque[abi:ne180100](v3);
    MEMORY[0x1C3BD4858](v4, 0x1080C40BE8D5F09);
  }
  JUMPOUT(0x1C3BD4858);
}

void std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy(*((_QWORD *)a1 + 1));
    if (a1[63] < 0)
      operator delete(*((void **)a1 + 5));
    operator delete(a1);
  }
}

uint64_t re2::CaptureNamesWalker::PreVisit(re2::CaptureNamesWalker *this, re2::Regexp *a2, uint64_t a3, BOOL *a4)
{
  const std::string *v6;
  uint64_t v8;
  char *v9;
  uint64_t **v10;
  int v11;
  char *v12;
  int v13;
  uint64_t **v14;
  char *v15;
  uint64_t v16;
  uint64_t *v17;

  if (*(_BYTE *)a2 != 11)
    return a3;
  v6 = (const std::string *)*((_QWORD *)a2 + 4);
  if (!v6)
    return a3;
  v8 = *((_QWORD *)this + 3);
  if (v8)
  {
    v10 = (uint64_t **)(v8 + 8);
    v9 = *(char **)(v8 + 8);
    v11 = *((_DWORD *)a2 + 6);
    if (v9)
    {
      do
      {
        while (1)
        {
          v12 = v9;
          v13 = *((_DWORD *)v9 + 8);
          if (v11 < v13)
            break;
          if (v13 >= v11)
            goto LABEL_16;
          v9 = (char *)*((_QWORD *)v12 + 1);
          if (!v9)
          {
            v14 = (uint64_t **)(v12 + 8);
            goto LABEL_13;
          }
        }
        v9 = *(char **)v12;
      }
      while (*(_QWORD *)v12);
      v14 = (uint64_t **)v12;
      goto LABEL_13;
    }
  }
  else
  {
    v8 = operator new();
    *(_QWORD *)(v8 + 8) = 0;
    v10 = (uint64_t **)(v8 + 8);
    *(_QWORD *)(v8 + 16) = 0;
    *(_QWORD *)v8 = v8 + 8;
    *((_QWORD *)this + 3) = v8;
    v6 = (const std::string *)*((_QWORD *)a2 + 4);
    v11 = *((_DWORD *)a2 + 6);
  }
  v14 = v10;
  v12 = (char *)v10;
LABEL_13:
  v15 = v12;
  v12 = (char *)operator new(0x40uLL);
  *((_DWORD *)v12 + 8) = v11;
  *((_QWORD *)v12 + 6) = 0;
  *((_QWORD *)v12 + 7) = 0;
  *((_QWORD *)v12 + 5) = 0;
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = 0;
  *((_QWORD *)v12 + 2) = v15;
  *v14 = (uint64_t *)v12;
  v16 = **(_QWORD **)v8;
  v17 = (uint64_t *)v12;
  if (v16)
  {
    *(_QWORD *)v8 = v16;
    v17 = *v14;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*v10, v17);
  ++*(_QWORD *)(v8 + 16);
LABEL_16:
  std::string::operator=((std::string *)(v12 + 40), v6);
  return a3;
}

uint64_t re2::CaptureNamesWalker::ShortVisit(re2::CaptureNamesWalker *this, re2::Regexp *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  void *v10;
  uint64_t v11;
  uint64_t v12[8];
  __int128 v13;
  __int128 v14;
  int v15;
  uint64_t v16;

  LOBYTE(v10) = 0;
  v4 = MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v16 = MEMORY[0x1E0DE4FE0] + 64;
  v11 = v6;
  *(uint64_t *)((char *)&v12[-1] + *(_QWORD *)(v6 - 24)) = v7;
  v8 = (std::ios_base *)((char *)&v12[-1] + *(_QWORD *)(v11 - 24));
  std::ios_base::init(v8, v12);
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v11 = v4 + 24;
  v16 = v5;
  std::streambuf::basic_streambuf();
  v12[0] = MEMORY[0x1E0DE4FB8] + 16;
  v13 = 0u;
  v14 = 0u;
  v15 = 16;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v11, (uint64_t)"CaptureNamesWalker::ShortVisit called", 37);
  LogMessage::~LogMessage(&v10);
  return a3;
}

void sub_1C36866E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  LogMessage::~LogMessage(&a9);
  _Unwind_Resume(a1);
}

void sub_1C36866FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1C3BD4828](v1 + 120);
  _Unwind_Resume(a1);
}

uint64_t re2::CharClassBuilder::CharClassBuilder(uint64_t this)
{
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 16) = this + 24;
  *(_DWORD *)(this + 8) = 0;
  *(_QWORD *)this = 0;
  return this;
}

{
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 16) = this + 24;
  *(_DWORD *)(this + 8) = 0;
  *(_QWORD *)this = 0;
  return this;
}

uint64_t re2::CharClassBuilder::AddRange(re2::CharClassBuilder *this, int a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  char v10;
  unsigned int v11;
  unsigned int v12;
  char v13;
  uint64_t *v14;
  uint64_t **v15;
  uint64_t **v16;
  char *v17;
  int v18;
  BOOL v19;
  char **v20;
  int v21;
  uint64_t **v22;
  char *v23;
  int v24;
  BOOL v25;
  char **v26;
  int v27;
  int v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t **v31;
  BOOL v32;
  uint64_t **v33;
  uint64_t *v34;
  int v35;
  BOOL v36;
  uint64_t **v37;
  int v38;
  uint64_t *v39;
  uint64_t *v40;
  _DWORD *v41;
  _QWORD *v42;
  uint64_t **v43;
  uint64_t **v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t **v49;
  uint64_t *v50;
  int v51;
  BOOL v52;
  uint64_t **v53;
  int v54;
  uint64_t *v55;
  uint64_t **v56;
  uint64_t *v57;

  if ((int)a3 < a2)
    return 0;
  v4 = a3;
  v5 = a2;
  if (a2 <= 122 && (int)a3 >= 65)
  {
    if (a2 <= 65)
      v7 = 65;
    else
      v7 = a2;
    if (a3 >= 0x5A)
      v8 = 90;
    else
      v8 = a3;
    v9 = v8 >= v7;
    v10 = v8 - v7;
    if (v9)
      *(_DWORD *)this |= ~(-1 << (v10 + 1)) << (v7 - 65);
    if (a2 <= 97)
      v11 = 97;
    else
      v11 = a2;
    if (a3 >= 0x7A)
      v12 = 122;
    else
      v12 = a3;
    v9 = v12 >= v11;
    v13 = v12 - v11;
    if (v9)
      *((_DWORD *)this + 1) |= ~(-1 << (v13 + 1)) << (v11 - 97);
  }
  v15 = (uint64_t **)((char *)this + 24);
  v14 = (uint64_t *)*((_QWORD *)this + 3);
  if (!v14)
    goto LABEL_72;
  v16 = (uint64_t **)((char *)this + 24);
  v17 = (char *)*((_QWORD *)this + 3);
  do
  {
    v18 = *((_DWORD *)v17 + 8);
    v19 = v18 < a2;
    if (v18 >= a2)
      v20 = (char **)v17;
    else
      v20 = (char **)(v17 + 8);
    if (!v19)
      v16 = (uint64_t **)v17;
    v17 = *v20;
  }
  while (*v20);
  if (v16 != v15 && *((_DWORD *)v16 + 7) <= a2 && *((_DWORD *)v16 + 8) >= (int)a3)
    return 0;
  v21 = a2 - 1;
  if (a2 >= 1)
  {
    v22 = (uint64_t **)((char *)this + 24);
    v23 = (char *)*((_QWORD *)this + 3);
    do
    {
      v24 = *((_DWORD *)v23 + 8);
      v25 = v24 < v21;
      if (v24 >= v21)
        v26 = (char **)v23;
      else
        v26 = (char **)(v23 + 8);
      if (!v25)
        v22 = (uint64_t **)v23;
      v23 = *v26;
    }
    while (*v26);
    if (v22 != v15)
    {
      v27 = *((_DWORD *)v22 + 7);
      if (v27 < a2)
      {
        v28 = *((_DWORD *)v22 + 8);
        if (v28 <= (int)a3)
          v4 = a3;
        else
          v4 = v28;
        *((_DWORD *)this + 2) += v27 + ~v28;
        v29 = v22[1];
        if (v29)
        {
          do
          {
            v30 = v29;
            v29 = (uint64_t *)*v29;
          }
          while (v29);
        }
        else
        {
          v31 = v22;
          do
          {
            v30 = v31[2];
            v32 = *v30 == (_QWORD)v31;
            v31 = (uint64_t **)v30;
          }
          while (!v32);
        }
        if (*((uint64_t ***)this + 2) == v22)
          *((_QWORD *)this + 2) = v30;
        --*((_QWORD *)this + 4);
        std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v14, (uint64_t *)v22);
        operator delete(v22);
        v14 = (uint64_t *)*((_QWORD *)this + 3);
        v5 = v27;
      }
    }
  }
  if ((int)v4 < 1114111)
  {
    if (v14)
    {
      v33 = (uint64_t **)((char *)this + 24);
      v34 = v14;
      do
      {
        v35 = *((_DWORD *)v34 + 8);
        v36 = v35 <= (int)v4;
        if (v35 <= (int)v4)
          v37 = (uint64_t **)(v34 + 1);
        else
          v37 = (uint64_t **)v34;
        if (!v36)
          v33 = (uint64_t **)v34;
        v34 = *v37;
      }
      while (*v37);
      if (v33 != v15)
      {
        v38 = *((_DWORD *)v33 + 7);
        if ((int)v4 + 1 >= v38)
        {
          v4 = *((unsigned int *)v33 + 8);
          *((_DWORD *)this + 2) += v38 + ~(_DWORD)v4;
          v39 = v33[1];
          if (v39)
          {
            do
            {
              v40 = v39;
              v39 = (uint64_t *)*v39;
            }
            while (v39);
          }
          else
          {
            v43 = v33;
            do
            {
              v40 = v43[2];
              v32 = *v40 == (_QWORD)v43;
              v43 = (uint64_t **)v40;
            }
            while (!v32);
          }
          if (*((uint64_t ***)this + 2) == v33)
            *((_QWORD *)this + 2) = v40;
          --*((_QWORD *)this + 4);
          std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v14, (uint64_t *)v33);
          operator delete(v33);
          v14 = (uint64_t *)*((_QWORD *)this + 3);
        }
      }
      goto LABEL_79;
    }
LABEL_72:
    v41 = (_DWORD *)((char *)this + 8);
    v42 = (_QWORD *)((char *)this + 32);
    goto LABEL_80;
  }
LABEL_79:
  v41 = (_DWORD *)((char *)this + 8);
  v42 = (_QWORD *)((char *)this + 32);
  if (v14)
  {
    while (1)
    {
      v49 = (uint64_t **)((char *)this + 24);
      v50 = v14;
      do
      {
        v51 = *((_DWORD *)v50 + 8);
        v52 = v51 < v5;
        if (v51 >= v5)
          v53 = (uint64_t **)v50;
        else
          v53 = (uint64_t **)(v50 + 1);
        if (!v52)
          v49 = (uint64_t **)v50;
        v50 = *v53;
      }
      while (*v53);
      if (v49 == v15)
        break;
      v54 = *((_DWORD *)v49 + 7);
      if ((int)v4 < v54)
        break;
      *v41 += v54 + ~*((_DWORD *)v49 + 8);
      v55 = v49[1];
      v56 = v49;
      if (v55)
      {
        do
        {
          v57 = v55;
          v55 = (uint64_t *)*v55;
        }
        while (v55);
      }
      else
      {
        do
        {
          v57 = v56[2];
          v32 = *v57 == (_QWORD)v56;
          v56 = (uint64_t **)v57;
        }
        while (!v32);
      }
      if (*((uint64_t ***)this + 2) == v49)
        *((_QWORD *)this + 2) = v57;
      --*v42;
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v14, (uint64_t *)v49);
      operator delete(v49);
      v14 = *v15;
      if (!*v15)
        goto LABEL_80;
    }
    *v41 += v4 - v5 + 1;
    do
    {
      while (1)
      {
        v45 = v14;
        if ((int)v4 < *((_DWORD *)v14 + 7))
          break;
        if (*((_DWORD *)v14 + 8) >= v5)
          return 1;
        v14 = (uint64_t *)v14[1];
        if (!v14)
        {
          v44 = (uint64_t **)(v45 + 1);
          goto LABEL_81;
        }
      }
      v14 = (uint64_t *)*v14;
    }
    while (*v45);
    v44 = (uint64_t **)v45;
    goto LABEL_81;
  }
LABEL_80:
  *v41 += v4 - v5 + 1;
  v44 = (uint64_t **)((char *)this + 24);
  v45 = (uint64_t *)((char *)this + 24);
LABEL_81:
  v46 = (uint64_t *)operator new(0x28uLL);
  *(uint64_t *)((char *)v46 + 28) = v5 | (unint64_t)(v4 << 32);
  *v46 = 0;
  v46[1] = 0;
  v46[2] = (uint64_t)v45;
  *v44 = v46;
  v47 = **((_QWORD **)this + 2);
  if (v47)
  {
    *((_QWORD *)this + 2) = v47;
    v48 = *v44;
  }
  else
  {
    v48 = v46;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*v15, v48);
  ++*v42;
  return 1;
}

re2::CharClassBuilder *re2::CharClassBuilder::AddCharClass(re2::CharClassBuilder *this, re2::CharClassBuilder *a2)
{
  char *v2;
  char *v3;
  re2::CharClassBuilder *v4;
  char *v5;
  char *v6;
  BOOL v7;

  v2 = (char *)*((_QWORD *)a2 + 2);
  v3 = (char *)a2 + 24;
  if (v2 != (char *)a2 + 24)
  {
    v4 = this;
    do
    {
      this = (re2::CharClassBuilder *)re2::CharClassBuilder::AddRange(v4, *((_DWORD *)v2 + 7), *((unsigned int *)v2 + 8));
      v5 = (char *)*((_QWORD *)v2 + 1);
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = *(char **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (char *)*((_QWORD *)v2 + 2);
          v7 = *(_QWORD *)v6 == (_QWORD)v2;
          v2 = v6;
        }
        while (!v7);
      }
      v2 = v6;
    }
    while (v6 != v3);
  }
  return this;
}

BOOL re2::CharClassBuilder::Contains(re2::CharClassBuilder *this, int a2)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  int v6;
  BOOL v7;
  char **v8;

  v4 = (char *)*((_QWORD *)this + 3);
  v2 = (char *)this + 24;
  v3 = v4;
  if (!v4)
    goto LABEL_11;
  v5 = v2;
  do
  {
    v6 = *((_DWORD *)v3 + 8);
    v7 = v6 < a2;
    if (v6 >= a2)
      v8 = (char **)v3;
    else
      v8 = (char **)(v3 + 8);
    if (!v7)
      v5 = v3;
    v3 = *v8;
  }
  while (*v8);
  if (v5 == v2 || *((_DWORD *)v5 + 7) > a2)
LABEL_11:
    v5 = v2;
  return v5 != v2;
}

BOOL re2::CharClassBuilder::FoldsASCII(re2::CharClassBuilder *this)
{
  return ((*((_DWORD *)this + 1) ^ *(_DWORD *)this) & 0x3FFFFFF) == 0;
}

uint64_t re2::CharClassBuilder::Copy(re2::CharClassBuilder *this)
{
  uint64_t v2;
  uint64_t ***v3;
  re2::CharClassBuilder *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t **v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  re2::CharClassBuilder *v14;
  re2::CharClassBuilder *v15;
  BOOL v16;

  v2 = operator new();
  *(_QWORD *)(v2 + 24) = 0;
  v3 = (uint64_t ***)(v2 + 24);
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 16) = v2 + 24;
  *(_DWORD *)(v2 + 8) = 0;
  *(_QWORD *)v2 = 0;
  v4 = (re2::CharClassBuilder *)*((_QWORD *)this + 2);
  if (v4 != (re2::CharClassBuilder *)((char *)this + 24))
  {
    do
    {
      v6 = *((unsigned int *)v4 + 7);
      v7 = *((unsigned int *)v4 + 8);
      v8 = (uint64_t **)(v2 + 24);
      v9 = (uint64_t **)(v2 + 24);
      v10 = *v3;
      if (*v3)
      {
        while (1)
        {
          while (1)
          {
            v9 = v10;
            if ((int)v7 >= *((_DWORD *)v10 + 7))
              break;
            v10 = (uint64_t **)*v10;
            v8 = v9;
            if (!*v9)
              goto LABEL_11;
          }
          if (*((_DWORD *)v10 + 8) >= (int)v6)
            break;
          v10 = (uint64_t **)v10[1];
          if (!v10)
          {
            v8 = v9 + 1;
            goto LABEL_11;
          }
        }
      }
      else
      {
LABEL_11:
        v11 = (uint64_t *)operator new(0x28uLL);
        *(uint64_t *)((char *)v11 + 28) = v6 | (v7 << 32);
        *v11 = 0;
        v11[1] = 0;
        v11[2] = (uint64_t)v9;
        *v8 = v11;
        v12 = **(_QWORD **)(v2 + 16);
        if (v12)
        {
          *(_QWORD *)(v2 + 16) = v12;
          v13 = *v8;
        }
        else
        {
          v13 = v11;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 24), v13);
        ++*(_QWORD *)(v2 + 32);
      }
      v14 = (re2::CharClassBuilder *)*((_QWORD *)v4 + 1);
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = *(re2::CharClassBuilder **)v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (re2::CharClassBuilder *)*((_QWORD *)v4 + 2);
          v16 = *(_QWORD *)v15 == (_QWORD)v4;
          v4 = v15;
        }
        while (!v16);
      }
      v4 = v15;
    }
    while (v15 != (re2::CharClassBuilder *)((char *)this + 24));
  }
  *(_QWORD *)v2 = *(_QWORD *)this;
  *(_DWORD *)(v2 + 8) = *((_DWORD *)this + 2);
  return v2;
}

uint64_t re2::CharClassBuilder::RemoveAbove(uint64_t this, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  uint64_t v19;
  uint64_t **v20;
  uint64_t **v21;
  uint64_t **v22;

  if ((int)a2 <= 1114110)
  {
    v3 = this;
    if ((int)a2 <= 121)
    {
      if ((int)a2 >= 97)
      {
        *(_DWORD *)(this + 4) &= 0x3FFFFFFu >> (122 - a2);
      }
      else
      {
        *(_DWORD *)(this + 4) = 0;
        if ((int)a2 <= 89)
        {
          if ((int)a2 > 64)
            *(_DWORD *)this &= 0x3FFFFFFu >> (90 - a2);
          else
            *(_DWORD *)this = 0;
        }
      }
    }
    v4 = this + 24;
    this = *(_QWORD *)(this + 24);
    if (this)
    {
      v5 = a2 + 1;
      do
      {
        v10 = v3 + 24;
        v11 = this;
        do
        {
          v12 = *(_DWORD *)(v11 + 32);
          v13 = v12 <= (int)a2;
          if (v12 <= (int)a2)
            v14 = (uint64_t *)(v11 + 8);
          else
            v14 = (uint64_t *)v11;
          if (!v13)
            v10 = v11;
          v11 = *v14;
        }
        while (*v14);
        if (v10 == v4 || *(int *)(v10 + 28) > 1114111)
          break;
        v15 = *(_QWORD **)(v10 + 8);
        v16 = (_QWORD *)v10;
        if (v15)
        {
          do
          {
            v17 = v15;
            v15 = (_QWORD *)*v15;
          }
          while (v15);
        }
        else
        {
          do
          {
            v17 = (_QWORD *)v16[2];
            v18 = *v17 == (_QWORD)v16;
            v16 = v17;
          }
          while (!v18);
        }
        v19 = *(_QWORD *)(v10 + 28);
        if (*(_QWORD *)(v3 + 16) == v10)
          *(_QWORD *)(v3 + 16) = v17;
        --*(_QWORD *)(v3 + 32);
        std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)this, (uint64_t *)v10);
        operator delete((void *)v10);
        v9 = ~HIDWORD(v19) + v19 + *(_DWORD *)(v3 + 8);
        *(_DWORD *)(v3 + 8) = v9;
        this = *(_QWORD *)(v3 + 24);
        if ((int)v19 <= (int)a2)
        {
          v20 = (uint64_t **)(v3 + 24);
          v21 = (uint64_t **)(v3 + 24);
          if (this)
          {
            v22 = *(uint64_t ***)(v3 + 24);
            while (1)
            {
              while (1)
              {
                v21 = v22;
                if (*((_DWORD *)v22 + 7) <= (int)a2)
                  break;
                v22 = (uint64_t **)*v22;
                v20 = v21;
                if (!*v21)
                  goto LABEL_11;
              }
              if (*((_DWORD *)v22 + 8) >= (int)v19)
                break;
              v22 = (uint64_t **)v22[1];
              if (!v22)
              {
                v20 = v21 + 1;
                goto LABEL_11;
              }
            }
          }
          else
          {
LABEL_11:
            v6 = (uint64_t *)operator new(0x28uLL);
            *(uint64_t *)((char *)v6 + 28) = v19 | (unint64_t)(a2 << 32);
            *v6 = 0;
            v6[1] = 0;
            v6[2] = (uint64_t)v21;
            *v20 = v6;
            v7 = **(_QWORD **)(v3 + 16);
            if (v7)
            {
              *(_QWORD *)(v3 + 16) = v7;
              v8 = *v20;
            }
            else
            {
              v8 = v6;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v3 + 24), v8);
            this = *(_QWORD *)(v3 + 24);
            ++*(_QWORD *)(v3 + 32);
            v9 = *(_DWORD *)(v3 + 8);
          }
          *(_DWORD *)(v3 + 8) = v5 - v19 + v9;
        }
      }
      while (this);
    }
  }
  return this;
}

void re2::CharClassBuilder::Negate(int8x8_t *this)
{
  int8x8_t *v1;
  int8x8_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  uint64_t *v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int v26;
  uint64_t *v27;
  uint64_t **v28;
  BOOL v29;
  uint64_t v30;
  _OWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  unint64_t v36;
  _BYTE *v37;
  uint64_t *v38;
  unint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  _OWORD *v42;
  uint64_t *v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t **v50;
  uint64_t **v51;
  uint64_t *v52;
  int8x8_t v53;
  int8x8_t *v54;

  v1 = this;
  v2 = this[4];
  v3 = __CFADD__(*(_QWORD *)&v2, 1);
  v4 = *(_QWORD *)&v2 + 1;
  if (v3)
  {
    v5 = (uint64_t **)this[2];
    v6 = (uint64_t **)&this[3];
    if (v5 != (uint64_t **)&this[3])
    {
      v7 = 0;
      v8 = 0;
      goto LABEL_8;
    }
    v7 = (uint64_t *)operator new(8uLL);
LABEL_57:
    *v7 = 0x10FFFF00000000;
    v15 = v7 + 1;
    goto LABEL_80;
  }
  if (v4 >> 61)
    std::vector<re2::RE2 *>::__throw_length_error[abi:ne180100]();
  v9 = v4;
  v10 = (uint64_t *)operator new(8 * v4);
  v7 = v10;
  v5 = (uint64_t **)v1[2];
  v6 = (uint64_t **)&v1[3];
  if (v5 == (uint64_t **)&v1[3])
  {
    v6 = (uint64_t **)v1[2];
    goto LABEL_57;
  }
  v8 = &v10[v9];
LABEL_8:
  v54 = v1;
  if (*((_DWORD *)v5 + 7))
  {
    v11 = 0;
  }
  else
  {
    v11 = *((_DWORD *)v5 + 8) + 1;
    v12 = v5[1];
    if (v12)
    {
      do
      {
        v5 = (uint64_t **)v12;
        v12 = (uint64_t *)*v12;
      }
      while (v12);
    }
    else
    {
      do
      {
        v13 = (uint64_t *)v5;
        v5 = (uint64_t **)v5[2];
      }
      while (*v5 != v13);
    }
  }
  v14 = v7;
  if (v5 != v6)
  {
    while (1)
    {
      v16 = (*((_DWORD *)v5 + 7) - 1);
      if (v14 >= v8)
        break;
      *v14++ = v11 | (unint64_t)(v16 << 32);
LABEL_39:
      v26 = *((_DWORD *)v5 + 8);
      v27 = v5[1];
      if (v27)
      {
        do
        {
          v28 = (uint64_t **)v27;
          v27 = (uint64_t *)*v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          v28 = (uint64_t **)v5[2];
          v29 = *v28 == (uint64_t *)v5;
          v5 = v28;
        }
        while (!v29);
      }
      v11 = v26 + 1;
      v5 = v28;
      if (v28 == v6)
        goto LABEL_15;
    }
    v17 = v14 - v7;
    v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 61)
      std::vector<re2::RE2 *>::__throw_length_error[abi:ne180100]();
    if (((char *)v8 - (char *)v7) >> 2 > v18)
      v18 = ((char *)v8 - (char *)v7) >> 2;
    if ((unint64_t)((char *)v8 - (char *)v7) >= 0x7FFFFFFFFFFFFFF8)
      v19 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v19 = v18;
    if (v19)
    {
      if (v19 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v20 = operator new(8 * v19);
    }
    else
    {
      v20 = 0;
    }
    v21 = (uint64_t *)&v20[8 * v17];
    *v21 = v11 | (unint64_t)(v16 << 32);
    v22 = v21 + 1;
    if (v14 != v7)
    {
      v23 = (char *)(v14 - 1) - (char *)v7;
      if (v23 >= 0x168)
      {
        if (&v20[(char *)v14 - (char *)v7 - 8 - (v23 & 0xFFFFFFFFFFFFFFF8)] > &v20[(char *)v14 - (char *)v7 - 8])
        {
          v24 = v14;
        }
        else if ((uint64_t *)((char *)v14 - (v23 & 0xFFFFFFFFFFFFFFF8) - 8) > v14 - 1)
        {
          v24 = v14;
        }
        else if ((unint64_t)((char *)v7 - v20) >= 0x20)
        {
          v30 = (v23 >> 3) + 1;
          v24 = &v14[-(v30 & 0x3FFFFFFFFFFFFFFCLL)];
          v31 = &v20[8 * v17 - 16];
          v32 = v14 - 2;
          v33 = v30 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v34 = *(_OWORD *)v32;
            *(v31 - 1) = *((_OWORD *)v32 - 1);
            *v31 = v34;
            v31 -= 2;
            v32 -= 4;
            v33 -= 4;
          }
          while (v33);
          v21 -= v30 & 0x3FFFFFFFFFFFFFFCLL;
          if (v30 == (v30 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_36;
        }
        else
        {
          v24 = v14;
        }
      }
      else
      {
        v24 = v14;
      }
      do
      {
        v25 = *--v24;
        *--v21 = v25;
      }
      while (v24 != v7);
    }
LABEL_36:
    v8 = (uint64_t *)&v20[8 * v19];
    if (v7)
      operator delete(v7);
    v7 = v21;
    v14 = v22;
    goto LABEL_39;
  }
LABEL_15:
  if ((int)v11 >= 1114112)
  {
LABEL_18:
    v15 = v14;
    v1 = v54;
    goto LABEL_80;
  }
  if (v14 < v8)
  {
    *v14++ = v11 | 0x10FFFF00000000;
    goto LABEL_18;
  }
  v35 = v14 - v7;
  v36 = v35 + 1;
  if ((unint64_t)(v35 + 1) >> 61)
    std::vector<re2::RE2 *>::__throw_length_error[abi:ne180100]();
  if (((char *)v8 - (char *)v7) >> 2 > v36)
    v36 = ((char *)v8 - (char *)v7) >> 2;
  if ((unint64_t)((char *)v8 - (char *)v7) >= 0x7FFFFFFFFFFFFFF8)
    v36 = 0x1FFFFFFFFFFFFFFFLL;
  if (v36)
  {
    if (v36 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v37 = operator new(8 * v36);
  }
  else
  {
    v37 = 0;
  }
  v38 = (uint64_t *)&v37[8 * v35];
  *v38 = v11 | 0x10FFFF00000000;
  v15 = v38 + 1;
  if (v14 == v7)
  {
    v1 = v54;
  }
  else
  {
    v39 = (char *)v14 - (char *)v7 - 8;
    v1 = v54;
    if (v39 >= 0x58)
    {
      if ((unint64_t)((char *)v7 - v37) >= 0x20)
      {
        v41 = (v39 >> 3) + 1;
        v40 = &v14[-(v41 & 0x3FFFFFFFFFFFFFFCLL)];
        v42 = &v37[8 * v35 - 16];
        v43 = v14 - 2;
        v44 = v41 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v45 = *(_OWORD *)v43;
          *(v42 - 1) = *((_OWORD *)v43 - 1);
          *v42 = v45;
          v42 -= 2;
          v43 -= 4;
          v44 -= 4;
        }
        while (v44);
        v38 -= v41 & 0x3FFFFFFFFFFFFFFCLL;
        if (v41 == (v41 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_77;
      }
      else
      {
        v40 = v14;
      }
    }
    else
    {
      v40 = v14;
    }
    do
    {
      v46 = *--v40;
      *--v38 = v46;
    }
    while (v40 != v7);
  }
LABEL_77:
  if (v7)
    operator delete(v7);
  v7 = v38;
LABEL_80:
  std::__tree<std::__value_type<unsigned long long,int>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,int>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,int>>>::destroy(*v6);
  v1[4] = 0;
  v1[2] = (int8x8_t)v6;
  *v6 = 0;
  if (v15 != v7)
  {
    v47 = 0;
    v48 = 0;
    while (1)
    {
      v49 = &v7[v48];
      v50 = v6;
      v51 = v6;
      if (v47)
      {
        while (1)
        {
          while (1)
          {
            v51 = (uint64_t **)v47;
            if (*((_DWORD *)v49 + 1) >= *((_DWORD *)v47 + 7))
              break;
            v47 = (uint64_t *)*v47;
            v50 = v51;
            if (!*v51)
              goto LABEL_89;
          }
          if (*((_DWORD *)v47 + 8) >= *(_DWORD *)v49)
            break;
          v47 = (uint64_t *)v47[1];
          if (!v47)
          {
            v50 = v51 + 1;
            goto LABEL_89;
          }
        }
      }
      else
      {
LABEL_89:
        v52 = (uint64_t *)operator new(0x28uLL);
        *(uint64_t *)((char *)v52 + 28) = *v49;
        *v52 = 0;
        v52[1] = 0;
        v52[2] = (uint64_t)v51;
        *v50 = v52;
        v53 = **(int8x8_t **)&v1[2];
        if (v53)
        {
          v1[2] = v53;
          v52 = *v50;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*v6, v52);
        ++*(_QWORD *)&v1[4];
      }
      if (++v48 >= (unint64_t)(v15 - v7))
        break;
      v47 = *v6;
    }
  }
  *v1 = (int8x8_t)(*(_QWORD *)&vmvn_s8(*v1) & 0x3FFFFFF03FFFFFFLL);
  v1[1].i32[0] = 1114112 - v1[1].i32[0];
  if (v7)
    operator delete(v7);
}

void sub_1C368758C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t re2::CharClass::New(re2::CharClass *this)
{
  uint64_t result;

  result = operator new[]();
  *(_QWORD *)(result + 8) = result + 24;
  *(_DWORD *)(result + 16) = 0;
  *(_BYTE *)result = 0;
  *(_DWORD *)(result + 4) = 0;
  return result;
}

uint64_t re2::CharClass::Negate(re2::CharClass *this)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  _DWORD *v8;
  _DWORD *v9;
  int v10;

  v2 = 0x10FFFF00000000;
  result = operator new[]();
  v4 = result + 24;
  *(_QWORD *)(result + 8) = result + 24;
  *(_BYTE *)result = *(_BYTE *)this;
  *(_DWORD *)(result + 4) = 1114112 - *((_DWORD *)this + 1);
  v5 = *((_DWORD *)this + 4);
  if (!v5)
  {
    v7 = 0;
    goto LABEL_9;
  }
  LODWORD(v6) = 0;
  v7 = 0;
  v8 = (_DWORD *)*((_QWORD *)this + 1);
  v9 = v8;
  do
  {
    if (*v9 != (_DWORD)v6)
    {
      *(_QWORD *)(*(_QWORD *)(result + 8) + 8 * v7++) = v6 | ((unint64_t)(*v9 - 1) << 32);
      v8 = (_DWORD *)*((_QWORD *)this + 1);
      v5 = *((_DWORD *)this + 4);
    }
    v10 = v9[1];
    v6 = (v10 + 1);
    v9 += 2;
  }
  while (v9 != &v8[2 * v5]);
  if (v10 <= 1114110)
  {
    v4 = *(_QWORD *)(result + 8);
    v2 = v6 | 0x10FFFF00000000;
LABEL_9:
    *(_QWORD *)(v4 + 8 * v7++) = v2;
  }
  *(_DWORD *)(result + 16) = v7;
  return result;
}

uint64_t re2::CharClass::Contains(re2::CharClass *this, int a2)
{
  int v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;

  v2 = *((_DWORD *)this + 4);
  if (v2 >= 1)
  {
    v3 = *((_QWORD *)this + 1);
    do
    {
      v5 = v2 >> 1;
      if (*(_DWORD *)(v3 + 8 * v5 + 4) < a2)
      {
        v4 = v5 + 1;
        v3 += 8 * v4;
        v2 -= v4;
      }
      else
      {
        v2 = v2 >> 1;
        if (*(_DWORD *)(v3 + 8 * v5) <= a2)
          return 1;
      }
    }
    while (v2 > 0);
  }
  return 0;
}

uint64_t re2::CharClassBuilder::GetCharClass(re2::CharClassBuilder *this)
{
  uint64_t result;
  re2::CharClassBuilder *v3;
  uint64_t v4;
  re2::CharClassBuilder *v5;
  re2::CharClassBuilder *v6;
  BOOL v7;
  int v8;

  result = operator new[]();
  *(_QWORD *)(result + 8) = result + 24;
  *(_DWORD *)(result + 16) = 0;
  *(_BYTE *)result = 0;
  *(_DWORD *)(result + 4) = 0;
  v3 = (re2::CharClassBuilder *)*((_QWORD *)this + 2);
  if (v3 == (re2::CharClassBuilder *)((char *)this + 24))
  {
    LODWORD(v4) = 0;
  }
  else
  {
    v4 = 0;
    do
    {
      *(_QWORD *)(*(_QWORD *)(result + 8) + 8 * v4) = *(_QWORD *)((char *)v3 + 28);
      v5 = (re2::CharClassBuilder *)*((_QWORD *)v3 + 1);
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = *(re2::CharClassBuilder **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (re2::CharClassBuilder *)*((_QWORD *)v3 + 2);
          v7 = *(_QWORD *)v6 == (_QWORD)v3;
          v3 = v6;
        }
        while (!v7);
      }
      ++v4;
      v3 = v6;
    }
    while (v6 != (re2::CharClassBuilder *)((char *)this + 24));
  }
  *(_DWORD *)(result + 16) = v4;
  v8 = *((_DWORD *)this + 1);
  *(_DWORD *)(result + 4) = *((_DWORD *)this + 2);
  *(_BYTE *)result = ((v8 ^ *(_DWORD *)this) & 0x3FFFFFF) == 0;
  return result;
}

uint64_t re2::RE2::FullMatchN(re2::RE2 *this, const re2::StringPiece *a2, const re2::RE2 *a3, const re2::RE2::Arg *const *a4)
{
  return re2::RE2::DoMatch((uint64_t)a2, (uint64_t)this, 2, 0, (_QWORD **)a3, (int)a4);
}

uint64_t re2::RE2::DoMatch(uint64_t a1, uint64_t a2, int a3, _DWORD *a4, _QWORD **a5, int a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::ios_base *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v21;
  int v22;
  re2::StringPiece *v23;
  re2::StringPiece *v24;
  re2::StringPiece *v25;
  re2::StringPiece *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unsigned int *v33;
  char v34;
  __int128 v36;
  _OWORD v37[4];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 128))
  {
    if (*(_BYTE *)(a1 + 30))
    {
      LOBYTE(v36) = 0;
      v7 = MEMORY[0x1E0DE4FE0];
      v8 = MEMORY[0x1E0DE4FE0] + 64;
      v9 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
      v10 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
      *((_QWORD *)&v40 + 1) = MEMORY[0x1E0DE4FE0] + 64;
      *((_QWORD *)&v36 + 1) = v9;
      *(_QWORD *)((char *)&v36 + *(_QWORD *)(v9 - 24) + 8) = v10;
      v11 = (std::ios_base *)((char *)&v36 + *(_QWORD *)(*((_QWORD *)&v36 + 1) - 24) + 8);
      std::ios_base::init(v11, v37);
      v11[1].__vftable = 0;
      v11[1].__fmtflags_ = -1;
      *((_QWORD *)&v36 + 1) = v7 + 24;
      *((_QWORD *)&v40 + 1) = v8;
      std::streambuf::basic_streambuf();
      *(_QWORD *)&v37[0] = MEMORY[0x1E0DE4FB8] + 16;
      v38 = 0u;
      v39 = 0u;
      LODWORD(v40) = 16;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v36 + 1, (uint64_t)"Invalid RE2: ", 13);
      v12 = *(_QWORD *)(a1 + 120);
      v13 = *(char *)(v12 + 23);
      if (v13 >= 0)
        v14 = *(_QWORD *)(a1 + 120);
      else
        v14 = *(_QWORD *)v12;
      if (v13 >= 0)
        v15 = *(unsigned __int8 *)(v12 + 23);
      else
        v15 = *(_QWORD *)(v12 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v36 + 1, v14, v15);
      LogMessage::~LogMessage((void **)&v36);
    }
    return 0;
  }
  v48 = 0u;
  v49 = 0u;
  if (a6)
    v21 = 0;
  else
    v21 = a4 == 0;
  if (v21)
    v22 = 0;
  else
    v22 = a6 + 1;
  v46 = 0uLL;
  v47 = 0uLL;
  v44 = 0uLL;
  v45 = 0uLL;
  v42 = 0uLL;
  v43 = 0uLL;
  v40 = 0uLL;
  v41 = 0uLL;
  v38 = 0uLL;
  v39 = 0uLL;
  memset(v37, 0, sizeof(v37));
  v36 = 0uLL;
  if (v22 >= 0x12)
  {
    v25 = (re2::StringPiece *)operator new[]();
    v23 = v25;
    v26 = v25;
    v27 = (v22 - 1) & 0xFFFFFFFFFFFFFFFLL;
    if (v27)
    {
      v28 = (v27 + 1) & 0x1FFFFFFFFFFFFFFELL;
      v29 = (char *)v25 + 16;
      v30 = v28;
      do
      {
        *((_QWORD *)v29 - 2) = 0;
        *(_QWORD *)v29 = 0;
        *((_DWORD *)v29 - 2) = 0;
        *((_DWORD *)v29 + 2) = 0;
        v29 += 32;
        v30 -= 2;
      }
      while (v30);
      if (v27 + 1 == v28)
      {
LABEL_26:
        if ((re2::RE2::Match(a1, (__int128 *)a2, 0, *(_DWORD *)(a2 + 8), a3, v25, v22) & 1) == 0)
        {
LABEL_41:
          MEMORY[0x1C3BD4840](v23, 0x1050C80DB1D6C16);
          return 0;
        }
        v24 = v23;
        if (!a4)
          goto LABEL_29;
LABEL_28:
        *a4 = *(_DWORD *)v24 + *((_DWORD *)v24 + 2) - *(_DWORD *)a2;
        goto LABEL_29;
      }
      v26 = (re2::StringPiece *)((char *)v25 + 16 * v28);
    }
    do
    {
      *(_QWORD *)v26 = 0;
      *((_DWORD *)v26 + 2) = 0;
      v26 = (re2::StringPiece *)((char *)v26 + 16);
    }
    while (v26 != (re2::StringPiece *)((char *)v25 + 16 * v22));
    goto LABEL_26;
  }
  if ((re2::RE2::Match(a1, (__int128 *)a2, 0, *(_DWORD *)(a2 + 8), a3, (re2::StringPiece *)&v36, v22) & 1) == 0)
    return 0;
  v23 = 0;
  v24 = (re2::StringPiece *)&v36;
  if (a4)
    goto LABEL_28;
LABEL_29:
  if (a5 && a6)
  {
    if (*(_QWORD *)(a1 + 88))
    {
      v31 = *(_DWORD *)(a1 + 160);
      if (v31 == -1)
      {
        v31 = re2::Regexp::NumCaptures(*(re2::Regexp **)(a1 + 88));
        *(_DWORD *)(a1 + 160) = v31;
      }
      if (v31 < a6)
      {
LABEL_40:
        if (v23)
          goto LABEL_41;
        return 0;
      }
    }
    else if (a6 > -1)
    {
      goto LABEL_40;
    }
    v32 = a6 & ~(a6 >> 31);
    v33 = (unsigned int *)((char *)v24 + 24);
    while (v32)
    {
      v34 = ((uint64_t (*)(_QWORD, _QWORD, _QWORD))(*a5)[1])(*((_QWORD *)v33 - 1), *v33, **a5);
      v33 += 4;
      ++a5;
      --v32;
      if ((v34 & 1) == 0)
        goto LABEL_40;
    }
  }
  if (v23)
    MEMORY[0x1C3BD4840](v23, 0x1050C80DB1D6C16);
  return 1;
}

void sub_1C3689090(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1C3BD4828](v1 + 120);
  _Unwind_Resume(a1);
}

void sub_1C36890B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  LogMessage::~LogMessage(&a9);
  _Unwind_Resume(a1);
}

uint64_t re2::RE2::Match(uint64_t a1, __int128 *a2, unsigned int a3, int a4, int a5, re2::StringPiece *a6, int a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::ios_base *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  re2::Regexp *v18;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  std::ios_base *v26;
  unsigned __int8 *v30;
  int v31;
  uint64_t *v32;
  int v33;
  int v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  BOOL v40;
  int v41;
  int v42;
  _BOOL4 v43;
  int v44;
  int v45;
  int v46;
  void *v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  BOOL v55;
  int v56;
  unsigned __int8 *v57;
  unsigned __int8 *v58;
  unsigned __int8 *v59;
  int v60;
  int v61;
  void *v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v71;
  char v72;
  uint64_t *v73;
  void *v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  int v78;
  void *v79;
  uint64_t v80;
  void *p_p;
  uint64_t v82;
  BOOL v83;
  int v84;
  void *v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  int v95;
  void *v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  int v102;
  int v103;
  void *v104;
  uint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  void *v110;
  uint64_t v111;
  void *v112;
  uint64_t v113;
  re2::Prog *v114;
  int v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  _DWORD *v122;
  void *v123;
  uint64_t v124;
  void *v125;
  uint64_t v126;
  void *v127;
  uint64_t v128;
  void *v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  BOOL v133;
  int v134;
  unsigned __int8 *v135;
  uint64_t v136;
  void *__p;
  uint64_t v138;
  unsigned __int8 v139;
  void *v140;
  uint64_t v141;
  unsigned __int8 v142;
  char v143;
  uint64_t v144;
  uint64_t v145;
  __int128 v146;
  void *v147;
  uint64_t v148;
  _QWORD v149[8];
  __int128 v150;
  __int128 v151;
  int v152;
  uint64_t v153;

  if (*(_DWORD *)(a1 + 128) || (v18 = *(re2::Regexp **)(a1 + 88)) == 0)
  {
    if (!*(_BYTE *)(a1 + 30))
      return 0;
    LOBYTE(v147) = 0;
    v8 = MEMORY[0x1E0DE4FE0];
    v9 = MEMORY[0x1E0DE4FE0] + 64;
    v10 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v11 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v153 = MEMORY[0x1E0DE4FE0] + 64;
    v148 = v10;
    *(_QWORD *)((char *)&v149[-1] + *(_QWORD *)(v10 - 24)) = v11;
    v12 = (std::ios_base *)((char *)&v149[-1] + *(_QWORD *)(v148 - 24));
    std::ios_base::init(v12, v149);
    v12[1].__vftable = 0;
    v12[1].__fmtflags_ = -1;
    v148 = v8 + 24;
    v153 = v9;
    std::streambuf::basic_streambuf();
    v149[0] = MEMORY[0x1E0DE4FB8] + 16;
    v150 = 0u;
    v151 = 0u;
    v152 = 16;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v148, (uint64_t)"Invalid RE2: ", 13);
    v13 = *(_QWORD *)(a1 + 120);
    v14 = *(char *)(v13 + 23);
    if (v14 >= 0)
      v15 = *(_QWORD *)(a1 + 120);
    else
      v15 = *(_QWORD *)v13;
    if (v14 >= 0)
      v16 = *(unsigned __int8 *)(v13 + 23);
    else
      v16 = *(_QWORD *)(v13 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v148, v15, v16);
    goto LABEL_10;
  }
  if ((a3 & 0x80000000) != 0 || (int)a3 > a4 || (v21 = *((_DWORD *)a2 + 2), v21 < a4))
  {
    if (!*(_BYTE *)(a1 + 30))
      return 0;
    LOBYTE(v147) = 0;
    v22 = MEMORY[0x1E0DE4FE0];
    v23 = MEMORY[0x1E0DE4FE0] + 64;
    v24 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v25 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v153 = MEMORY[0x1E0DE4FE0] + 64;
    v148 = v24;
    *(_QWORD *)((char *)&v149[-1] + *(_QWORD *)(v24 - 24)) = v25;
    v26 = (std::ios_base *)((char *)&v149[-1] + *(_QWORD *)(v148 - 24));
    std::ios_base::init(v26, v149);
    v26[1].__vftable = 0;
    v26[1].__fmtflags_ = -1;
    v148 = v22 + 24;
    v153 = v23;
    std::streambuf::basic_streambuf();
    v149[0] = MEMORY[0x1E0DE4FB8] + 16;
    v150 = 0u;
    v151 = 0u;
    v152 = 16;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v148, (uint64_t)"RE2: invalid startpos, endpos pair.", 35);
    goto LABEL_10;
  }
  v146 = *a2;
  v30 = (unsigned __int8 *)(v146 + a3);
  v145 = 0;
  *(_QWORD *)&v146 = v30;
  v31 = a4 - a3 - v21 + DWORD2(v146);
  DWORD2(v146) = v31;
  if (a7)
    v32 = &v144;
  else
    v32 = 0;
  v144 = 0;
  v33 = *(_DWORD *)(a1 + 160);
  if (v33 == -1)
  {
    v33 = re2::Regexp::NumCaptures(v18);
    *(_DWORD *)(a1 + 160) = v33;
  }
  if (v33 < a7)
    v34 = v33 + 1;
  else
    v34 = a7;
  v35 = *(_QWORD *)(a1 + 96);
  if (a3 && *(_BYTE *)v35)
    return 0;
  if (*(_BYTE *)v35 && *(_BYTE *)(v35 + 1))
  {
    a5 = 2;
  }
  else
  {
    if (*(_BYTE *)v35)
      v36 = a5 == 2;
    else
      v36 = 1;
    if (!v36)
      a5 = 1;
  }
  if (*(char *)(a1 + 71) < 0)
    v37 = *(_QWORD *)(a1 + 56);
  else
    v37 = *(unsigned __int8 *)(a1 + 71);
  if (v37)
  {
    if (a3)
      return 0;
    if ((*(_BYTE *)(a1 + 71) & 0x80) != 0)
      v38 = *(_QWORD *)(a1 + 56);
    else
      LODWORD(v38) = *(unsigned __int8 *)(a1 + 71);
    v55 = __OFSUB__(v31, (_DWORD)v38);
    v56 = v31 - v38;
    if (v56 < 0 != v55)
      return 0;
    v57 = (unsigned __int8 *)(a1 + 48);
    if (*(_BYTE *)(a1 + 72))
    {
      if ((*(_BYTE *)(a1 + 71) & 0x80) != 0)
        v57 = *(unsigned __int8 **)v57;
      if ((int)v38 >= 1)
      {
        v58 = &v57[(int)v38];
        v59 = v30;
        do
        {
          v60 = *v59;
          if ((v60 - 65) < 0x1A)
            LOBYTE(v60) = v60 + 32;
          if (*v57 != v60)
            return 0;
          ++v57;
          ++v59;
        }
        while (v57 < v58);
      }
    }
    else
    {
      v131 = v34;
      if ((*(_BYTE *)(a1 + 71) & 0x80) != 0)
        v57 = *(unsigned __int8 **)v57;
      if (memcmp(v57, v30, (int)v38))
        return 0;
      v34 = v131;
    }
    *(_QWORD *)&v146 = &v30[(int)v38];
    DWORD2(v146) = v56;
    v132 = a1 + 24;
    if (a5 == 2)
    {
      v45 = 0;
      v67 = *(unsigned __int8 *)(a1 + 112);
      v68 = *(_DWORD *)(v35 + 12);
      v43 = v68 < 501;
      v143 = 0;
      v39 = 2;
    }
    else
    {
      v45 = 0;
      v39 = *(unsigned __int8 *)(a1 + 29);
      v67 = *(unsigned __int8 *)(a1 + 112);
      v68 = *(_DWORD *)(v35 + 12);
      v43 = v68 < 501;
      v143 = 0;
    }
    v134 = 0x40000 / v68;
    if (!v67)
    {
      v44 = v38;
      if (v43)
      {
LABEL_144:
        if (*((_DWORD *)a2 + 2) <= v134 && v34 >= 2)
        {
          if (re2::FLAGS_trace_re2)
          {
            LODWORD(v38) = v44;
            v78 = v34;
            LogMessage::LogMessage((LogMessage *)&v147);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v148, (uint64_t)"Match ", 6);
            re2::trunc((re2 *)&v140, *(const re2::StringPiece **)(a1 + 8), *(_DWORD *)(a1 + 16));
            if ((v142 & 0x80u) == 0)
              v79 = &v140;
            else
              v79 = v140;
            if ((v142 & 0x80u) == 0)
              v80 = v142;
            else
              v80 = v141;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v148, (uint64_t)v79, v80);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v148, (uint64_t)" [", 2);
            re2::CEscape((re2 **)&v146, &__p);
            if ((v139 & 0x80u) == 0)
              p_p = &__p;
            else
              p_p = __p;
            if ((v139 & 0x80u) == 0)
              v82 = v139;
            else
              v82 = v138;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v148, (uint64_t)p_p, v82);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v148, (uint64_t)"]", 1);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v148, (uint64_t)" skipping DFA for BitState.", 27);
            if ((char)v139 < 0)
              operator delete(__p);
            if ((char)v142 < 0)
              operator delete(v140);
            LogMessage::~LogMessage(&v147);
            LOBYTE(v43) = 1;
            v41 = v45;
            v66 = 1;
            v34 = v78;
            goto LABEL_246;
          }
          LOBYTE(v43) = 1;
          v41 = v45;
          LODWORD(v38) = v44;
          goto LABEL_245;
        }
      }
LABEL_149:
      LODWORD(v38) = v44;
      v133 = v43;
      v71 = v34;
      if (re2::Prog::SearchDFA((unsigned __int8 *)v35, (uint64_t *)&v146, (uint64_t *)a2, 1, v39, (uint64_t)&v144, &v143))
      {
        v41 = v45;
        v34 = v71;
LABEL_151:
        LOBYTE(v43) = v133;
        if (v34 <= 1)
        {
          if (v34 == 1)
          {
            *(_QWORD *)a6 = v144;
            *((_DWORD *)a6 + 2) = v145;
          }
LABEL_316:
          if (a7 >= 1 && (int)v38 >= 1)
          {
            v115 = *((_DWORD *)a6 + 2) + v38;
            *(_QWORD *)a6 -= v38;
            *((_DWORD *)a6 + 2) = v115;
          }
          if (v34 >= a7)
            return 1;
          v116 = v34;
          v117 = a7 - (uint64_t)v34;
          if (v117 >= 2)
          {
            v118 = v117 & 0xFFFFFFFFFFFFFFFELL;
            v119 = (uint64_t)a6 + 16 * v34 + 16;
            v120 = v117 & 0xFFFFFFFFFFFFFFFELL;
            do
            {
              *(_QWORD *)(v119 - 16) = 0;
              *(_QWORD *)v119 = 0;
              *(_DWORD *)(v119 - 8) = 0;
              *(_DWORD *)(v119 + 8) = 0;
              v119 += 32;
              v120 -= 2;
            }
            while (v120);
            if (v117 == v118)
              return 1;
            v116 = v118 + v34;
          }
          v121 = a7 - v116;
          v122 = (_DWORD *)((char *)a6 + 16 * v116 + 8);
          do
          {
            *((_QWORD *)v122 - 1) = 0;
            *v122 = 0;
            v122 += 4;
            --v121;
          }
          while (v121);
          return 1;
        }
        v72 = 0;
        HIDWORD(v136) = 0;
        v39 = 2;
        v66 = 1;
        v73 = &v144;
        goto LABEL_247;
      }
      if (v143)
      {
        if (re2::FLAGS_trace_re2)
        {
          LogMessage::LogMessage((LogMessage *)&v147);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v148, (uint64_t)"Match ", 6);
          re2::trunc((re2 *)&v140, *(const re2::StringPiece **)(a1 + 8), *(_DWORD *)(a1 + 16));
          if ((v142 & 0x80u) == 0)
            v74 = &v140;
          else
            v74 = v140;
          if ((v142 & 0x80u) == 0)
            v75 = v142;
          else
            v75 = v141;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v148, (uint64_t)v74, v75);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v148, (uint64_t)" [", 2);
          re2::CEscape((re2 **)&v146, &__p);
          if ((v139 & 0x80u) == 0)
            v76 = &__p;
          else
            v76 = __p;
          if ((v139 & 0x80u) == 0)
            v77 = v139;
          else
            v77 = v138;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v148, (uint64_t)v76, v77);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v148, (uint64_t)"]", 1);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v148, (uint64_t)" DFA failed.", 12);
          if ((char)v139 < 0)
            operator delete(__p);
          if ((char)v142 < 0)
            operator delete(v140);
          LogMessage::~LogMessage(&v147);
        }
        v66 = 1;
        v41 = v45;
        v34 = v71;
        LOBYTE(v43) = v133;
        goto LABEL_246;
      }
      if (!re2::FLAGS_trace_re2)
        return 0;
      LogMessage::LogMessage((LogMessage *)&v147);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v148, (uint64_t)"Match ", 6);
      re2::trunc((re2 *)&v140, *(const re2::StringPiece **)(a1 + 8), *(_DWORD *)(a1 + 16));
      if ((v142 & 0x80u) == 0)
        v89 = &v140;
      else
        v89 = v140;
      if ((v142 & 0x80u) == 0)
        v90 = v142;
      else
        v90 = v141;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v148, (uint64_t)v89, v90);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v148, (uint64_t)" [", 2);
      re2::CEscape((re2 **)&v146, &__p);
      if ((v139 & 0x80u) == 0)
        v91 = &__p;
      else
        v91 = __p;
      if ((v139 & 0x80u) == 0)
        v92 = v139;
      else
        v92 = v138;
LABEL_238:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v148, (uint64_t)v91, v92);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v148, (uint64_t)"]", 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v148, (uint64_t)" used DFA - no match.", 21);
      if ((char)v139 < 0)
        operator delete(__p);
      if ((char)v142 < 0)
        operator delete(v140);
      goto LABEL_10;
    }
    v44 = v38;
    if (v34 >= 6)
    {
LABEL_143:
      if (v43)
        goto LABEL_144;
      goto LABEL_149;
    }
LABEL_139:
    v69 = *((_DWORD *)a2 + 2);
    if (v69 <= 4096 && (v34 > 1 || v69 <= 8))
    {
      if (re2::FLAGS_trace_re2)
      {
        v83 = v43;
        v84 = v34;
        LogMessage::LogMessage((LogMessage *)&v147);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v148, (uint64_t)"Match ", 6);
        re2::trunc((re2 *)&v140, *(const re2::StringPiece **)(a1 + 8), *(_DWORD *)(a1 + 16));
        if ((v142 & 0x80u) == 0)
          v85 = &v140;
        else
          v85 = v140;
        if ((v142 & 0x80u) == 0)
          v86 = v142;
        else
          v86 = v141;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v148, (uint64_t)v85, v86);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v148, (uint64_t)" [", 2);
        re2::CEscape((re2 **)&v146, &__p);
        if ((v139 & 0x80u) == 0)
          v87 = &__p;
        else
          v87 = __p;
        if ((v139 & 0x80u) == 0)
          v88 = v139;
        else
          v88 = v138;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v148, (uint64_t)v87, v88);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v148, (uint64_t)"]", 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v148, (uint64_t)" skipping DFA for OnePass.", 26);
        if ((char)v139 < 0)
          operator delete(__p);
        if ((char)v142 < 0)
          operator delete(v140);
        LogMessage::~LogMessage(&v147);
        v41 = 1;
        v66 = 1;
        v34 = v84;
        LOBYTE(v43) = v83;
        goto LABEL_246;
      }
      v41 = 1;
LABEL_245:
      v66 = 1;
      goto LABEL_246;
    }
    v45 = 1;
    v44 = v38;
    goto LABEL_143;
  }
  v132 = a1 + 24;
  v39 = *(unsigned __int8 *)(a1 + 29);
  if (*(_BYTE *)(a1 + 112))
    v40 = v34 < 6;
  else
    v40 = 0;
  v41 = v40;
  v42 = *(_DWORD *)(v35 + 12);
  v43 = v42 < 501;
  v143 = 0;
  v134 = 0x40000 / v42;
  if (a5 == 1)
  {
    LODWORD(v38) = 0;
    v44 = 0;
    v45 = 0;
    if (!v41)
      goto LABEL_143;
    goto LABEL_139;
  }
  if (a5 == 2)
  {
    LODWORD(v38) = 0;
    v44 = 0;
    v45 = 0;
    v39 = 2;
    if ((v41 & 1) == 0)
      goto LABEL_143;
    goto LABEL_139;
  }
  v133 = v42 < 501;
  v46 = v34;
  if (!re2::Prog::SearchDFA((unsigned __int8 *)v35, (uint64_t *)&v146, (uint64_t *)a2, 0, v39, (uint64_t)v32, &v143))
  {
    if (!v143)
    {
      if (!re2::FLAGS_trace_re2)
        return 0;
      LogMessage::LogMessage((LogMessage *)&v147);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v148, (uint64_t)"Match ", 6);
      re2::trunc((re2 *)&v140, *(const re2::StringPiece **)(a1 + 8), *(_DWORD *)(a1 + 16));
      if ((v142 & 0x80u) == 0)
        v93 = &v140;
      else
        v93 = v140;
      if ((v142 & 0x80u) == 0)
        v94 = v142;
      else
        v94 = v141;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v148, (uint64_t)v93, v94);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v148, (uint64_t)" [", 2);
      re2::CEscape((re2 **)&v146, &__p);
      if ((v139 & 0x80u) == 0)
        v91 = &__p;
      else
        v91 = __p;
      if ((v139 & 0x80u) == 0)
        v92 = v139;
      else
        v92 = v138;
      goto LABEL_238;
    }
    if (re2::FLAGS_trace_re2)
    {
      v61 = v39;
      LogMessage::LogMessage((LogMessage *)&v147);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v148, (uint64_t)"Match ", 6);
      re2::trunc((re2 *)&v140, *(const re2::StringPiece **)(a1 + 8), *(_DWORD *)(a1 + 16));
      if ((v142 & 0x80u) == 0)
        v62 = &v140;
      else
        v62 = v140;
      if ((v142 & 0x80u) == 0)
        v63 = v142;
      else
        v63 = v141;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v148, (uint64_t)v62, v63);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v148, (uint64_t)" [", 2);
      re2::CEscape((re2 **)&v146, &__p);
      if ((v139 & 0x80u) == 0)
        v64 = &__p;
      else
        v64 = __p;
      if ((v139 & 0x80u) == 0)
        v65 = v139;
      else
        v65 = v138;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v148, (uint64_t)v64, v65);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v148, (uint64_t)"]", 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v148, (uint64_t)" DFA failed.", 12);
      goto LABEL_124;
    }
LABEL_129:
    LODWORD(v38) = 0;
    v66 = 0;
    v34 = v46;
    LOBYTE(v43) = v133;
LABEL_246:
    v136 = 0;
    v72 = 1;
    v73 = (uint64_t *)&v146;
LABEL_247:
    v135 = (unsigned __int8 *)*v73;
    LODWORD(v136) = *((_DWORD *)v73 + 2);
    if (v41 && v66)
    {
      if (re2::FLAGS_trace_re2)
      {
        v95 = v34;
        LogMessage::LogMessage((LogMessage *)&v147);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v148, (uint64_t)"Match ", 6);
        re2::trunc((re2 *)&v140, *(const re2::StringPiece **)(a1 + 8), *(_DWORD *)(a1 + 16));
        if ((v142 & 0x80u) == 0)
          v96 = &v140;
        else
          v96 = v140;
        if ((v142 & 0x80u) == 0)
          v97 = v142;
        else
          v97 = v141;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v148, (uint64_t)v96, v97);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v148, (uint64_t)" [", 2);
        re2::CEscape((re2 **)&v146, &__p);
        if ((v139 & 0x80u) == 0)
          v98 = &__p;
        else
          v98 = __p;
        if ((v139 & 0x80u) == 0)
          v99 = v139;
        else
          v99 = v138;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v148, (uint64_t)v98, v99);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v148, (uint64_t)"]", 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v148, (uint64_t)" using OnePass.", 15);
        if ((char)v139 < 0)
          operator delete(__p);
        if ((char)v142 < 0)
          operator delete(v140);
        LogMessage::~LogMessage(&v147);
        v34 = v95;
      }
      v100 = *(_QWORD *)(a1 + 96);
      v101 = v34;
      if ((re2::Prog::SearchOnePass(v100, &v135, a2, 1, v39, (uint64_t)a6, v34) & 1) == 0)
      {
        if ((v72 & 1) != 0 || !*(_BYTE *)(v132 + 6))
          return 0;
        LogMessage::LogMessage((LogMessage *)&v147);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v148, (uint64_t)"SearchOnePass inconsistency", 27);
        goto LABEL_10;
      }
      goto LABEL_315;
    }
    if (v43)
    {
      v102 = re2::FLAGS_trace_re2;
      if ((int)v136 <= v134)
      {
        if (re2::FLAGS_trace_re2)
        {
          v103 = v34;
          LogMessage::LogMessage((LogMessage *)&v147);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v148, (uint64_t)"Match ", 6);
          re2::trunc((re2 *)&v140, *(const re2::StringPiece **)(a1 + 8), *(_DWORD *)(a1 + 16));
          if ((v142 & 0x80u) == 0)
            v104 = &v140;
          else
            v104 = v140;
          if ((v142 & 0x80u) == 0)
            v105 = v142;
          else
            v105 = v141;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v148, (uint64_t)v104, v105);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v148, (uint64_t)" [", 2);
          re2::CEscape((re2 **)&v146, &__p);
          if ((v139 & 0x80u) == 0)
            v106 = &__p;
          else
            v106 = __p;
          if ((v139 & 0x80u) == 0)
            v107 = v139;
          else
            v107 = v138;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v148, (uint64_t)v106, v107);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v148, (uint64_t)"]", 1);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v148, (uint64_t)" using BitState.", 16);
          if ((char)v139 < 0)
            operator delete(__p);
          if ((char)v142 < 0)
            operator delete(v140);
          LogMessage::~LogMessage(&v147);
          v34 = v103;
        }
        v108 = *(_QWORD *)(a1 + 96);
        v101 = v34;
        if ((re2::Prog::SearchBitState(v108, (int *)&v135, (const re2::StringPiece *)a2, v66, v39, a6, v34) & 1) == 0)
        {
          if ((v72 & 1) != 0 || !*(_BYTE *)(v132 + 6))
            return 0;
          LogMessage::LogMessage((LogMessage *)&v147);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v148, (uint64_t)"SearchBitState inconsistency", 28);
          goto LABEL_10;
        }
LABEL_315:
        v34 = v101;
        goto LABEL_316;
      }
    }
    else
    {
      v102 = re2::FLAGS_trace_re2;
    }
    if (v102)
    {
      v109 = v34;
      LogMessage::LogMessage((LogMessage *)&v147);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v148, (uint64_t)"Match ", 6);
      re2::trunc((re2 *)&v140, *(const re2::StringPiece **)(a1 + 8), *(_DWORD *)(a1 + 16));
      if ((v142 & 0x80u) == 0)
        v110 = &v140;
      else
        v110 = v140;
      if ((v142 & 0x80u) == 0)
        v111 = v142;
      else
        v111 = v141;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v148, (uint64_t)v110, v111);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v148, (uint64_t)" [", 2);
      re2::CEscape((re2 **)&v146, &__p);
      if ((v139 & 0x80u) == 0)
        v112 = &__p;
      else
        v112 = __p;
      if ((v139 & 0x80u) == 0)
        v113 = v139;
      else
        v113 = v138;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v148, (uint64_t)v112, v113);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v148, (uint64_t)"]", 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v148, (uint64_t)" using NFA.", 11);
      if ((char)v139 < 0)
        operator delete(__p);
      if ((char)v142 < 0)
        operator delete(v140);
      LogMessage::~LogMessage(&v147);
      v34 = v109;
    }
    v114 = *(re2::Prog **)(a1 + 96);
    v101 = v34;
    if ((re2::Prog::SearchNFA(v114, (int *)&v135, (const re2::StringPiece *)a2, v66, v39, a6, v34) & 1) != 0)
      goto LABEL_315;
    if ((v72 & 1) != 0 || !*(_BYTE *)(v132 + 6))
      return 0;
    LogMessage::LogMessage((LogMessage *)&v147);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v148, (uint64_t)"SearchNFA inconsistency", 23);
LABEL_10:
    LogMessage::~LogMessage(&v147);
    return 0;
  }
  if (re2::FLAGS_trace_re2)
  {
    LogMessage::LogMessage((LogMessage *)&v147);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v148, (uint64_t)"Match ", 6);
    re2::trunc((re2 *)&v140, *(const re2::StringPiece **)(a1 + 8), *(_DWORD *)(a1 + 16));
    if ((v142 & 0x80u) == 0)
      v47 = &v140;
    else
      v47 = v140;
    if ((v142 & 0x80u) == 0)
      v48 = v142;
    else
      v48 = v141;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v148, (uint64_t)v47, v48);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v148, (uint64_t)" [", 2);
    re2::CEscape((re2 **)&v146, &__p);
    if ((v139 & 0x80u) == 0)
      v49 = &__p;
    else
      v49 = __p;
    if ((v139 & 0x80u) == 0)
      v50 = v139;
    else
      v50 = v138;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v148, (uint64_t)v49, v50);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v148, (uint64_t)"]", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v148, (uint64_t)" used DFA - match", 17);
    if ((char)v139 < 0)
      operator delete(__p);
    if ((char)v142 < 0)
      operator delete(v140);
    LogMessage::~LogMessage(&v147);
  }
  if (!a7)
    return 1;
  result = re2::RE2::ReverseProg((re2::RE2 *)a1);
  if (result)
  {
    if (re2::Prog::SearchDFA((unsigned __int8 *)result, &v144, (uint64_t *)a2, 1, 1, (uint64_t)&v144, &v143))
    {
      if (re2::FLAGS_trace_re2)
      {
        LogMessage::LogMessage((LogMessage *)&v147);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v148, (uint64_t)"Match ", 6);
        re2::trunc((re2 *)&v140, *(const re2::StringPiece **)(a1 + 8), *(_DWORD *)(a1 + 16));
        if ((v142 & 0x80u) == 0)
          v51 = &v140;
        else
          v51 = v140;
        if ((v142 & 0x80u) == 0)
          v52 = v142;
        else
          v52 = v141;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v148, (uint64_t)v51, v52);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v148, (uint64_t)" [", 2);
        re2::CEscape((re2 **)&v146, &__p);
        if ((v139 & 0x80u) == 0)
          v53 = &__p;
        else
          v53 = __p;
        if ((v139 & 0x80u) == 0)
          v54 = v139;
        else
          v54 = v138;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v148, (uint64_t)v53, v54);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v148, (uint64_t)"]", 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v148, (uint64_t)" used reverse DFA.", 18);
        if ((char)v139 < 0)
          operator delete(__p);
        if ((char)v142 < 0)
          operator delete(v140);
        LogMessage::~LogMessage(&v147);
      }
      LODWORD(v38) = 0;
      v34 = v46;
      goto LABEL_151;
    }
    if (!v143)
    {
      if (re2::FLAGS_trace_re2)
      {
        LogMessage::LogMessage((LogMessage *)&v147);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v148, (uint64_t)"Match ", 6);
        re2::trunc((re2 *)&v140, *(const re2::StringPiece **)(a1 + 8), *(_DWORD *)(a1 + 16));
        if ((v142 & 0x80u) == 0)
          v127 = &v140;
        else
          v127 = v140;
        if ((v142 & 0x80u) == 0)
          v128 = v142;
        else
          v128 = v141;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v148, (uint64_t)v127, v128);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v148, (uint64_t)" [", 2);
        re2::CEscape((re2 **)&v146, &__p);
        if ((v139 & 0x80u) == 0)
          v129 = &__p;
        else
          v129 = __p;
        if ((v139 & 0x80u) == 0)
          v130 = v139;
        else
          v130 = v138;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v148, (uint64_t)v129, v130);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v148, (uint64_t)"]", 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v148, (uint64_t)" DFA inconsistency.", 19);
        if ((char)v139 < 0)
          operator delete(__p);
        if ((char)v142 < 0)
          operator delete(v140);
        LogMessage::~LogMessage(&v147);
      }
      if (!*(_BYTE *)(a1 + 30))
        return 0;
      LogMessage::LogMessage((LogMessage *)&v147);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v148, (uint64_t)"DFA inconsistency", 17);
      goto LABEL_10;
    }
    if (re2::FLAGS_trace_re2)
    {
      v61 = v39;
      LogMessage::LogMessage((LogMessage *)&v147);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v148, (uint64_t)"Match ", 6);
      re2::trunc((re2 *)&v140, *(const re2::StringPiece **)(a1 + 8), *(_DWORD *)(a1 + 16));
      if ((v142 & 0x80u) == 0)
        v123 = &v140;
      else
        v123 = v140;
      if ((v142 & 0x80u) == 0)
        v124 = v142;
      else
        v124 = v141;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v148, (uint64_t)v123, v124);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v148, (uint64_t)" [", 2);
      re2::CEscape((re2 **)&v146, &__p);
      if ((v139 & 0x80u) == 0)
        v125 = &__p;
      else
        v125 = __p;
      if ((v139 & 0x80u) == 0)
        v126 = v139;
      else
        v126 = v138;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v148, (uint64_t)v125, v126);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v148, (uint64_t)"]", 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v148, (uint64_t)" reverse DFA failed.", 20);
LABEL_124:
      v39 = v61;
      if ((char)v139 < 0)
        operator delete(__p);
      if ((char)v142 < 0)
        operator delete(v140);
      LogMessage::~LogMessage(&v147);
      goto LABEL_129;
    }
    goto LABEL_129;
  }
  return result;
}

void sub_1C368A564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31)
{
  LogMessage::~LogMessage(&a31);
  _Unwind_Resume(a1);
}

void re2::trunc(re2 *this, const re2::StringPiece *__src, int a3)
{
  re2 *v4;
  size_t v5;
  std::string *v6;
  uint64_t v7;
  uint64_t v8;
  re2 *v9;
  std::string v10;

  v4 = this;
  if (a3 <= 99)
  {
    if (a3 < 0)
      std::string::__throw_length_error[abi:ne180100]();
    v5 = a3;
    if (a3 >= 0x17)
    {
      v7 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a3 | 7) != 0x17)
        v7 = a3 | 7;
      v8 = v7 + 1;
      v9 = (re2 *)operator new(v7 + 1);
      *((_QWORD *)v4 + 1) = v5;
      *((_QWORD *)v4 + 2) = v8 | 0x8000000000000000;
      *(_QWORD *)v4 = v9;
      v4 = v9;
    }
    else
    {
      *((_BYTE *)this + 23) = a3;
      if (!a3)
        goto LABEL_12;
    }
    memcpy(v4, __src, v5);
LABEL_12:
    *((_BYTE *)v4 + v5) = 0;
    return;
  }
  v10.__r_.__value_.__l.__size_ = 100;
  v10.__r_.__value_.__r.__words[2] = 0x8000000000000068;
  v10.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x68uLL);
  memcpy(v10.__r_.__value_.__l.__data_, __src, 0x64uLL);
  *(_BYTE *)(v10.__r_.__value_.__r.__words[0] + 100) = 0;
  v6 = std::string::append(&v10, "...");
  *(std::string *)v4 = *v6;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
}

void sub_1C368A890(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t re2::RE2::ReverseProg(re2::RE2 *this)
{
  pthread_rwlock_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *__p[2];
  unsigned __int8 v15;
  void *v16;
  uint64_t v17;
  uint64_t v18[8];
  __int128 v19;
  __int128 v20;
  int v21;
  uint64_t v22;
  pthread_rwlock_t *v23;

  v23 = *(pthread_rwlock_t **)this;
  v2 = v23;
  if (pthread_rwlock_wrlock(v23))
    abort();
  v3 = *((_QWORD *)this + 13);
  if (!v3)
  {
    if (*((_QWORD *)this + 15) == re2::empty_string)
    {
      v3 = re2::Compiler::Compile(*((re2::Compiler **)this + 11), (re2::Regexp *)1, *((_QWORD *)this + 4) / 3);
      *((_QWORD *)this + 13) = v3;
      if (!v3)
      {
        if (*((_BYTE *)this + 30))
        {
          LOBYTE(v16) = 0;
          v4 = MEMORY[0x1E0DE4FE0];
          v5 = MEMORY[0x1E0DE4FE0] + 64;
          v6 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
          v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
          v22 = MEMORY[0x1E0DE4FE0] + 64;
          v17 = v6;
          *(uint64_t *)((char *)&v18[-1] + *(_QWORD *)(v6 - 24)) = v7;
          v8 = (std::ios_base *)((char *)&v18[-1] + *(_QWORD *)(v17 - 24));
          std::ios_base::init(v8, v18);
          v8[1].__vftable = 0;
          v8[1].__fmtflags_ = -1;
          v17 = v4 + 24;
          v22 = v5;
          std::streambuf::basic_streambuf();
          v18[0] = MEMORY[0x1E0DE4FB8] + 16;
          v19 = 0u;
          v20 = 0u;
          v21 = 16;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)"Error reverse compiling '", 25);
          re2::trunc((re2 *)__p, *((const re2::StringPiece **)this + 1), *((_DWORD *)this + 4));
          if ((v15 & 0x80u) == 0)
            v9 = __p;
          else
            v9 = (void **)__p[0];
          if ((v15 & 0x80u) == 0)
            v10 = v15;
          else
            v10 = (uint64_t)__p[1];
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)v9, v10);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)"'", 1);
          if ((char)v15 < 0)
            operator delete(__p[0]);
          LogMessage::~LogMessage(&v16);
        }
        v11 = operator new();
        v12 = (char *)operator new(0x30uLL);
        v3 = 0;
        *(_OWORD *)(v11 + 8) = xmmword_1C385A580;
        strcpy(v12, "pattern too large - reverse compile failed");
        *(_QWORD *)v11 = v12;
        *((_QWORD *)this + 15) = v11;
        *((_DWORD *)this + 32) = 14;
      }
    }
    else
    {
      v3 = 0;
    }
  }
  if (pthread_rwlock_unlock(v2))
    abort();
  return v3;
}

void sub_1C368AAE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  LogMessage::~LogMessage(&a15);
  re2::MutexLock::~MutexLock((pthread_rwlock_t **)(v15 - 88));
  _Unwind_Resume(a1);
}

void re2::MutexLock::~MutexLock(pthread_rwlock_t **this)
{
  if (pthread_rwlock_unlock(*this))
    abort();
}

uint64_t re2::RE2::PartialMatchN(re2::RE2 *this, const re2::StringPiece *a2, const re2::RE2 *a3, const re2::RE2::Arg *const *a4)
{
  return re2::RE2::DoMatch((uint64_t)a2, (uint64_t)this, 0, 0, (_QWORD **)a3, (int)a4);
}

uint64_t re2::RE2::ConsumeN(re2::RE2 *this, re2::StringPiece *a2, const re2::RE2 *a3, const re2::RE2::Arg *const *a4)
{
  uint64_t result;
  int v6;
  int v7;

  v7 = 0;
  result = re2::RE2::DoMatch((uint64_t)a2, (uint64_t)this, 1, &v7, (_QWORD **)a3, (int)a4);
  if ((_DWORD)result)
  {
    v6 = v7;
    *(_QWORD *)this += v7;
    *((_DWORD *)this + 2) -= v6;
  }
  return result;
}

uint64_t re2::RE2::FindAndConsumeN(re2::RE2 *this, re2::StringPiece *a2, const re2::RE2 *a3, const re2::RE2::Arg *const *a4)
{
  uint64_t result;
  int v6;
  int v7;

  v7 = 0;
  result = re2::RE2::DoMatch((uint64_t)a2, (uint64_t)this, 0, &v7, (_QWORD **)a3, (int)a4);
  if ((_DWORD)result)
  {
    v6 = v7;
    *(_QWORD *)this += v7;
    *((_DWORD *)this + 2) -= v6;
  }
  return result;
}

double re2::RE2::Options::Options(uint64_t a1, int a2)
{
  int v2;
  double result;

  if (a2 == 1)
    v2 = 2;
  else
    v2 = 1;
  *(_DWORD *)a1 = v2;
  *(_BYTE *)(a1 + 4) = a2 == 2;
  *(_BYTE *)(a1 + 5) = a2 == 2;
  *(_BYTE *)(a1 + 6) = a2 != 3;
  *(_QWORD *)(a1 + 8) = 0x800000;
  *(_DWORD *)(a1 + 16) = 0;
  *(_QWORD *)&result = 0x100000001;
  *(_DWORD *)(a1 + 20) = 1;
  return result;
}

{
  int v2;
  double result;

  if (a2 == 1)
    v2 = 2;
  else
    v2 = 1;
  *(_DWORD *)a1 = v2;
  *(_BYTE *)(a1 + 4) = a2 == 2;
  *(_BYTE *)(a1 + 5) = a2 == 2;
  *(_BYTE *)(a1 + 6) = a2 != 3;
  *(_QWORD *)(a1 + 8) = 0x800000;
  *(_DWORD *)(a1 + 16) = 0;
  *(_QWORD *)&result = 0x100000001;
  *(_DWORD *)(a1 + 20) = 1;
  return result;
}

re2::RE2 *re2::RE2::RE2(re2::RE2 *this, const char *__s)
{
  int v3;
  int v5;
  __int16 v6;
  char v7;
  uint64_t v8;
  int v9;
  int v10;
  const char *v11;
  int v12;

  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  *((_DWORD *)this + 6) = 1;
  *((_WORD *)this + 14) = 0;
  *((_BYTE *)this + 30) = 1;
  *((_QWORD *)this + 4) = 0x800000;
  *((_DWORD *)this + 10) = 0;
  *((_BYTE *)this + 44) = 1;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  *(_QWORD *)((char *)this + 45) = 0;
  *(_QWORD *)((char *)this + 61) = 0;
  *(_QWORD *)((char *)this + 53) = 0;
  *((_DWORD *)this + 17) = 0;
  v11 = __s;
  if (__s)
    v3 = strlen(__s);
  else
    v3 = 0;
  v12 = v3;
  v5 = 1;
  v6 = 0;
  v7 = 1;
  v8 = 0x800000;
  v9 = 0;
  v10 = 1;
  re2::RE2::Init(this, (const re2::StringPiece *)&v11, (const re2::RE2::Options *)&v5);
  return this;
}

void sub_1C368ADD4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 159) < 0)
  {
    operator delete(*v2);
    if ((*(char *)(v1 + 71) & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v1 + 71) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v1 + 48));
  _Unwind_Resume(exception_object);
}

void re2::RE2::Init(re2::RE2 *this, const re2::StringPiece *a2, const re2::RE2::Options *a3)
{
  uint64_t v6;
  int v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned int v12;
  re2::Regexp *v13;
  _BYTE *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  char **v18;
  unint64_t v19;
  std::string *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::ios_base *v25;
  void *p_p;
  uint64_t v27;
  std::string *v28;
  std::string::size_type size;
  size_t v30;
  const void *v31;
  __int128 *p_dst;
  uint64_t v33;
  uint64_t v34;
  void **v35;
  int v36;
  unsigned __int8 *v37;
  int v38;
  std::string::size_type v39;
  int v40;
  char *v41;
  uint64_t v42;
  char *v43;
  re2::Prog *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  std::ios_base *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  std::string::size_type v59;
  uint64_t v60;
  char *v61;
  char *v62;
  unint64_t v63;
  __int16 v64;
  std::string v65;
  void *__p;
  uint64_t v67;
  unsigned __int8 v68;
  __int128 __dst;
  _QWORD v70[8];
  __int128 v71;
  __int128 v72;
  int v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;

  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 128) = 0u;
  *(_OWORD *)(v6 + 144) = 0u;
  *(_OWORD *)(v6 + 160) = 0u;
  *(_OWORD *)(v6 + 176) = 0u;
  *(_QWORD *)(v6 + 192) = 0;
  if (pthread_rwlock_init((pthread_rwlock_t *)v6, 0))
    abort();
  *(_QWORD *)this = v6;
  v7 = *((_DWORD *)a2 + 2);
  *((_QWORD *)this + 1) = *(_QWORD *)a2;
  *((_DWORD *)this + 4) = v7;
  *((_DWORD *)this + 6) = *(_DWORD *)a3;
  *((_BYTE *)this + 28) = *((_BYTE *)a3 + 4);
  *(_WORD *)((char *)this + 29) = *(_WORD *)((char *)a3 + 5);
  *((_QWORD *)this + 4) = *((_QWORD *)a3 + 1);
  *((_QWORD *)this + 5) = *((_QWORD *)a3 + 2);
  pthread_mutex_lock(&re2::empty_mutex);
  if (!re2::empty_string)
  {
    v8 = (_QWORD *)operator new();
    v8[1] = 0;
    v8[2] = 0;
    *v8 = 0;
    re2::empty_string = (uint64_t)v8;
    v9 = (_QWORD *)operator new();
    v9[2] = 0;
    v9[1] = 0;
    *v9 = v9 + 1;
    re2::empty_named_groups = (uint64_t)v9;
    v10 = (_QWORD *)operator new();
    v10[2] = 0;
    v10[1] = 0;
    *v10 = v10 + 1;
    re2::empty_group_names = (uint64_t)v10;
  }
  pthread_mutex_unlock(&re2::empty_mutex);
  v11 = re2::empty_string;
  *((_OWORD *)this + 5) = 0u;
  *((_QWORD *)this + 15) = v11;
  *((_DWORD *)this + 32) = 0;
  *((_OWORD *)this + 6) = 0u;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_DWORD *)this + 40) = -1;
  v75 = 0u;
  v76 = 0u;
  v12 = re2::RE2::Options::ParseFlags((re2::RE2 *)((char *)this + 24));
  v13 = re2::Regexp::Parse((__int128 *)((char *)this + 8), v12, (int *)&v75);
  *((_QWORD *)this + 10) = v13;
  if (!v13)
  {
    if (*((_QWORD *)this + 15) == re2::empty_string)
    {
      v20 = (std::string *)operator new();
      re2::RegexpStatus::Text((re2::RegexpStatus *)&v75, v20);
      *((_QWORD *)this + 15) = v20;
      if (!*((_BYTE *)this + 30))
        goto LABEL_37;
    }
    else if (!*((_BYTE *)this + 30))
    {
LABEL_37:
      v30 = (int)v76;
      if ((v76 & 0x80000000) != 0)
        std::string::__throw_length_error[abi:ne180100]();
      v31 = (const void *)*((_QWORD *)&v75 + 1);
      if (v76 >= 0x17)
      {
        v33 = ((int)v76 & 0xFFFFFFFFFFFFFFF8) + 8;
        if (((int)v76 | 7) != 0x17)
          v33 = (int)v76 | 7;
        v34 = v33 + 1;
        p_dst = (__int128 *)operator new(v33 + 1);
        *((_QWORD *)&__dst + 1) = v30;
        v70[0] = v34 | 0x8000000000000000;
        *(_QWORD *)&__dst = p_dst;
      }
      else
      {
        HIBYTE(v70[0]) = v76;
        p_dst = &__dst;
        if (!(_DWORD)v76)
          goto LABEL_45;
      }
      memmove(p_dst, v31, v30);
LABEL_45:
      *((_BYTE *)p_dst + v30) = 0;
      v35 = (void **)((char *)this + 136);
      if (*((char *)this + 159) < 0)
        operator delete(*v35);
      *(_OWORD *)v35 = __dst;
      *((_QWORD *)this + 19) = v70[0];
      v36 = v75;
      if (v75 >= 0xE)
        v36 = 1;
LABEL_72:
      *((_DWORD *)this + 32) = v36;
      v45 = *((_QWORD *)&v76 + 1);
      if (!*((_QWORD *)&v76 + 1))
        return;
      goto LABEL_73;
    }
    LOBYTE(__dst) = 0;
    v21 = MEMORY[0x1E0DE4FE0];
    v22 = MEMORY[0x1E0DE4FE0] + 64;
    v23 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v24 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v74 = MEMORY[0x1E0DE4FE0] + 64;
    *((_QWORD *)&__dst + 1) = v23;
    *(_QWORD *)((char *)&v70[-1] + *(_QWORD *)(v23 - 24)) = v24;
    v25 = (std::ios_base *)((char *)&v70[-1] + *(_QWORD *)(*((_QWORD *)&__dst + 1) - 24));
    std::ios_base::init(v25, v70);
    v25[1].__vftable = 0;
    v25[1].__fmtflags_ = -1;
    *((_QWORD *)&__dst + 1) = v21 + 24;
    v74 = v22;
    std::streambuf::basic_streambuf();
    v70[0] = MEMORY[0x1E0DE4FB8] + 16;
    v71 = 0u;
    v72 = 0u;
    v73 = 16;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&__dst + 1, (uint64_t)"Error parsing '", 15);
    re2::trunc((re2 *)&__p, *((const re2::StringPiece **)this + 1), *((_DWORD *)this + 4));
    if ((v68 & 0x80u) == 0)
      p_p = &__p;
    else
      p_p = __p;
    if ((v68 & 0x80u) == 0)
      v27 = v68;
    else
      v27 = v67;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&__dst + 1, (uint64_t)p_p, v27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&__dst + 1, (uint64_t)"': ", 3);
    re2::RegexpStatus::Text((re2::RegexpStatus *)&v75, &v65);
    if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v28 = &v65;
    else
      v28 = (std::string *)v65.__r_.__value_.__r.__words[0];
    if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v65.__r_.__value_.__r.__words[2]);
    else
      size = v65.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&__dst + 1, (uint64_t)v28, size);
    if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v65.__r_.__value_.__l.__data_);
      if (((char)v68 & 0x80000000) == 0)
        goto LABEL_36;
    }
    else if (((char)v68 & 0x80000000) == 0)
    {
LABEL_36:
      LogMessage::~LogMessage((void **)&__dst);
      goto LABEL_37;
    }
    operator delete(__p);
    goto LABEL_36;
  }
  if (*((char *)this + 71) < 0)
  {
    **((_BYTE **)this + 6) = 0;
    *((_BYTE *)this + 72) = 0;
    v14 = (char *)this + 72;
    *((_QWORD *)this + 7) = 0;
    v13 = (re2::Regexp *)*((_QWORD *)this + 10);
    if (*((char *)this + 71) < 0)
    {
      **((_BYTE **)this + 6) = 0;
      *((_QWORD *)this + 7) = 0;
      goto LABEL_12;
    }
  }
  else
  {
    *((_BYTE *)this + 48) = 0;
    *(_WORD *)((char *)this + 71) = 0;
    v14 = (char *)this + 72;
  }
  *((_BYTE *)this + 48) = 0;
  *((_BYTE *)this + 71) = 0;
LABEL_12:
  *v14 = 0;
  if (*(_BYTE *)v13 != 5)
    goto LABEL_57;
  v15 = *((unsigned __int16 *)v13 + 3);
  v16 = (_QWORD *)((char *)v13 + 8);
  if (v15 >= 2)
  {
    v16 = (_QWORD *)*v16;
  }
  else if (!*((_WORD *)v13 + 3))
  {
    goto LABEL_57;
  }
  v17 = 0;
  v18 = (char **)((char *)this + 48);
  while (1)
  {
    v19 = v17 + 1;
    if (*(_BYTE *)v16[v17] != 18)
      break;
    ++v17;
    if (v15 == v19)
      goto LABEL_57;
  }
  if (!(_DWORD)v17)
    goto LABEL_57;
  v37 = (unsigned __int8 *)v16[v17];
  v38 = *v37;
  if (v38 == 3)
  {
    v58 = *((_DWORD *)v37 + 6);
    if ((*((_WORD *)v37 + 1) & 0x20) != 0 || (int)v58 <= 127)
    {
      std::string::append((std::string *)this + 2, 1uLL, v58);
    }
    else
    {
      LODWORD(__dst) = 0;
      if (v58 > 0x7FF)
      {
        if (HIWORD(v58) > 0x10u)
          v58 = 65533;
        if (HIWORD(v58))
        {
          LOBYTE(__dst) = (v58 >> 18) | 0xF0;
          BYTE1(__dst) = (v58 >> 12) & 0x3F | 0x80;
          BYTE2(__dst) = (v58 >> 6) & 0x3F | 0x80;
          BYTE3(__dst) = v58 & 0x3F | 0x80;
          v59 = 4;
        }
        else
        {
          LOBYTE(__dst) = (v58 >> 12) | 0xE0;
          BYTE1(__dst) = (v58 >> 6) & 0x3F | 0x80;
          BYTE2(__dst) = v58 & 0x3F | 0x80;
          v59 = 3;
        }
      }
      else
      {
        LOBYTE(__dst) = (v58 >> 6) | 0xC0;
        BYTE1(__dst) = v58 & 0x3F | 0x80;
        v59 = 2;
      }
      std::string::append((std::string *)this + 2, (const std::string::value_type *)&__dst, v59);
    }
    goto LABEL_111;
  }
  if (v38 != 4)
  {
LABEL_57:
    v43 = (char *)re2::Regexp::Incref(*((re2::Regexp **)this + 10));
    goto LABEL_58;
  }
  v39 = *((int *)v37 + 6);
  if ((*((_WORD *)v37 + 1) & 0x20) != 0)
  {
    std::string::resize((std::string *)this + 2, v39, 0);
    if (*((int *)v37 + 6) >= 1)
    {
      v60 = 0;
      do
      {
        v61 = (char *)this + 48;
        if (*((char *)this + 71) < 0)
          v61 = *v18;
        v61[v60] = *(_DWORD *)(*((_QWORD *)v37 + 4) + 4 * v60);
        ++v60;
      }
      while (v60 < *((int *)v37 + 6));
    }
  }
  else
  {
    std::string::resize((std::string *)this + 2, 4 * (int)v39, 0);
    v40 = *((char *)this + 71);
    v41 = (char *)this + 48;
    if (v40 < 0)
      v41 = *v18;
    if (*((int *)v37 + 6) >= 1)
    {
      v42 = 0;
      do
      {
        v55 = *(_DWORD *)(*((_QWORD *)v37 + 4) + 4 * v42);
        if ((int)v55 <= 127)
        {
          *v41++ = v55;
        }
        else
        {
          if (v55 > 0x7FF)
          {
            if (v55 > 0x10FFFF)
              v55 = 65533;
            if (HIWORD(v55))
            {
              *v41 = (v55 >> 18) | 0xF0;
              v41[1] = (v55 >> 12) & 0x3F | 0x80;
              v41[2] = (v55 >> 6) & 0x3F | 0x80;
              v56 = 3;
              v57 = 4;
            }
            else
            {
              *v41 = (v55 >> 12) | 0xE0;
              v41[1] = (v55 >> 6) & 0x3F | 0x80;
              v56 = 2;
              v57 = 3;
            }
          }
          else
          {
            *v41 = (v55 >> 6) | 0xC0;
            v56 = 1;
            v57 = 2;
          }
          v41[v56] = v55 & 0x3F | 0x80;
          v41 += v57;
        }
        ++v42;
      }
      while (v42 < *((int *)v37 + 6));
      LOBYTE(v40) = *((_BYTE *)this + 71);
    }
    v62 = (char *)this + 48;
    if ((v40 & 0x80) != 0)
      v62 = *v18;
    std::string::resize((std::string *)this + 2, v41 - v62, 0);
  }
LABEL_111:
  *v14 = *(_BYTE *)(v16[v17] + 2) & 1;
  if ((int)v17 + 1 >= *((unsigned __int16 *)v13 + 3))
  {
    v43 = (char *)mallocRegexp();
    v64 = *((_WORD *)v13 + 1);
    *(_WORD *)v43 = 2;
    *((_WORD *)v43 + 1) = v64;
    *((_WORD *)v43 + 2) = 1;
    *(_OWORD *)(v43 + 6) = 0u;
    *(_OWORD *)(v43 + 22) = 0u;
    *((_WORD *)v43 + 19) = 0;
  }
  else
  {
    do
    {
      re2::Regexp::Incref((re2::Regexp *)v16[v19++]);
      v63 = *((unsigned __int16 *)v13 + 3);
    }
    while (v19 < v63);
    v43 = re2::Regexp::ConcatOrAlternate(5, (void **)&v16[(v17 + 1)], (v63 - (v17 + 1)), *((unsigned __int16 *)v13 + 1), 0);
  }
LABEL_58:
  *((_QWORD *)this + 11) = v43;
  v44 = (re2::Prog *)re2::Compiler::Compile((re2::Compiler *)v43, 0, 2 * *((_QWORD *)this + 4) / 3);
  *((_QWORD *)this + 12) = v44;
  if (!v44)
  {
    if (*((_BYTE *)this + 30))
    {
      LOBYTE(__dst) = 0;
      v46 = MEMORY[0x1E0DE4FE0];
      v47 = MEMORY[0x1E0DE4FE0] + 64;
      v48 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
      v49 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
      v74 = MEMORY[0x1E0DE4FE0] + 64;
      *((_QWORD *)&__dst + 1) = v48;
      *(_QWORD *)((char *)&v70[-1] + *(_QWORD *)(v48 - 24)) = v49;
      v50 = (std::ios_base *)((char *)&v70[-1] + *(_QWORD *)(*((_QWORD *)&__dst + 1) - 24));
      std::ios_base::init(v50, v70);
      v50[1].__vftable = 0;
      v50[1].__fmtflags_ = -1;
      *((_QWORD *)&__dst + 1) = v46 + 24;
      v74 = v47;
      std::streambuf::basic_streambuf();
      v70[0] = MEMORY[0x1E0DE4FB8] + 16;
      v71 = 0u;
      v72 = 0u;
      v73 = 16;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&__dst + 1, (uint64_t)"Error compiling '", 17);
      re2::trunc((re2 *)&__p, *((const re2::StringPiece **)this + 1), *((_DWORD *)this + 4));
      if ((v68 & 0x80u) == 0)
        v51 = &__p;
      else
        v51 = __p;
      if ((v68 & 0x80u) == 0)
        v52 = v68;
      else
        v52 = v67;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&__dst + 1, (uint64_t)v51, v52);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&__dst + 1, (uint64_t)"'", 1);
      if ((char)v68 < 0)
        operator delete(__p);
      LogMessage::~LogMessage((void **)&__dst);
    }
    v53 = operator new();
    v54 = (char *)operator new(0x28uLL);
    *(_QWORD *)v53 = v54;
    *(_OWORD *)(v53 + 8) = xmmword_1C385A590;
    strcpy(v54, "pattern too large - compile failed");
    *((_QWORD *)this + 15) = v53;
    v36 = 14;
    goto LABEL_72;
  }
  *((_BYTE *)this + 112) = re2::Prog::IsOnePass(v44);
  v45 = *((_QWORD *)&v76 + 1);
  if (!*((_QWORD *)&v76 + 1))
    return;
LABEL_73:
  if (*(char *)(v45 + 23) < 0)
    operator delete(*(void **)v45);
  MEMORY[0x1C3BD4858](v45, 0x1012C40EC159624);
}

void sub_1C368B7A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  uint64_t v21;
  uint64_t v22;

  MEMORY[0x1C3BD4858](v21, 0x1012C40EC159624);
  re2::RegexpStatus::~RegexpStatus((re2::RegexpStatus *)(v22 - 112));
  _Unwind_Resume(a1);
}

uint64_t re2::RE2::Options::ParseFlags(re2::RE2::Options *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;
  unsigned int v8;
  void *v10;
  uint64_t v11;
  uint64_t v12[8];
  __int128 v13;
  __int128 v14;
  int v15;
  uint64_t v16;

  if (*(_DWORD *)this != 1)
  {
    if (*(_DWORD *)this == 2)
    {
      v2 = 36;
      goto LABEL_7;
    }
    if (*((_BYTE *)this + 6))
    {
      LOBYTE(v10) = 0;
      v3 = MEMORY[0x1E0DE4FE0];
      v4 = MEMORY[0x1E0DE4FE0] + 64;
      v5 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
      v6 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
      v16 = MEMORY[0x1E0DE4FE0] + 64;
      v11 = v5;
      *(uint64_t *)((char *)&v12[-1] + *(_QWORD *)(v5 - 24)) = v6;
      v7 = (std::ios_base *)((char *)&v12[-1] + *(_QWORD *)(v11 - 24));
      std::ios_base::init(v7, v12);
      v7[1].__vftable = 0;
      v7[1].__fmtflags_ = -1;
      v11 = v3 + 24;
      v16 = v4;
      std::streambuf::basic_streambuf();
      v12[0] = MEMORY[0x1E0DE4FB8] + 16;
      v13 = 0u;
      v14 = 0u;
      v15 = 16;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v11, (uint64_t)"Unknown encoding ", 17);
      std::ostream::operator<<();
      LogMessage::~LogMessage(&v10);
    }
  }
  v2 = 4;
LABEL_7:
  if (!*((_BYTE *)this + 4))
    v2 |= 0x794u;
  if (*((_BYTE *)this + 16))
    v2 |= 2u;
  if (*((_BYTE *)this + 17))
    v2 |= 0x800u;
  if (*((_BYTE *)this + 18))
    v2 |= 8u;
  if (*((_BYTE *)this + 19))
    v2 |= 0x1000u;
  v8 = v2 | (*((_BYTE *)this + 20) == 0);
  if (*((_BYTE *)this + 21))
    v8 |= 0x80u;
  if (*((_BYTE *)this + 22))
    v8 |= 0x100u;
  if (*((_BYTE *)this + 23))
    return v8 | 0x10;
  else
    return v8;
}

void sub_1C368BA54(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1C3BD4828](v1 + 120);
  _Unwind_Resume(a1);
}

void sub_1C368BA7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  LogMessage::~LogMessage(&a9);
  _Unwind_Resume(a1);
}

re2::RE2 *re2::RE2::RE2(re2::RE2 *this, const re2::StringPiece *a2)
{
  int v4;
  __int16 v5;
  char v6;
  uint64_t v7;
  int v8;
  int v9;

  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  *((_DWORD *)this + 6) = 1;
  *((_WORD *)this + 14) = 0;
  *((_BYTE *)this + 30) = 1;
  *((_QWORD *)this + 4) = 0x800000;
  *((_DWORD *)this + 10) = 0;
  *((_BYTE *)this + 44) = 1;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  *(_QWORD *)((char *)this + 45) = 0;
  *(_QWORD *)((char *)this + 61) = 0;
  *(_QWORD *)((char *)this + 53) = 0;
  *((_DWORD *)this + 17) = 0;
  v4 = 1;
  v5 = 0;
  v6 = 1;
  v7 = 0x800000;
  v8 = 0;
  v9 = 1;
  re2::RE2::Init(this, a2, (const re2::RE2::Options *)&v4);
  return this;
}

{
  int v4;
  __int16 v5;
  char v6;
  uint64_t v7;
  int v8;
  int v9;

  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  *((_DWORD *)this + 6) = 1;
  *((_WORD *)this + 14) = 0;
  *((_BYTE *)this + 30) = 1;
  *((_QWORD *)this + 4) = 0x800000;
  *((_DWORD *)this + 10) = 0;
  *((_BYTE *)this + 44) = 1;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  *(_QWORD *)((char *)this + 45) = 0;
  *(_QWORD *)((char *)this + 61) = 0;
  *(_QWORD *)((char *)this + 53) = 0;
  *((_DWORD *)this + 17) = 0;
  v4 = 1;
  v5 = 0;
  v6 = 1;
  v7 = 0x800000;
  v8 = 0;
  v9 = 1;
  re2::RE2::Init(this, a2, (const re2::RE2::Options *)&v4);
  return this;
}

void sub_1C368BB2C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 159) < 0)
  {
    operator delete(*v2);
    if ((*(char *)(v1 + 71) & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v1 + 71) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v1 + 48));
  _Unwind_Resume(exception_object);
}

void sub_1C368BC00(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 159) < 0)
  {
    operator delete(*v2);
    if ((*(char *)(v1 + 71) & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v1 + 71) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v1 + 48));
  _Unwind_Resume(exception_object);
}

re2::RE2 *re2::RE2::RE2(re2::RE2 *this, const re2::StringPiece *a2, const re2::RE2::Options *a3)
{
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  *((_DWORD *)this + 6) = 1;
  *((_WORD *)this + 14) = 0;
  *((_BYTE *)this + 30) = 1;
  *((_QWORD *)this + 4) = 0x800000;
  *((_DWORD *)this + 10) = 0;
  *((_BYTE *)this + 44) = 1;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  *(_QWORD *)((char *)this + 45) = 0;
  *(_QWORD *)((char *)this + 61) = 0;
  *(_QWORD *)((char *)this + 53) = 0;
  *((_DWORD *)this + 17) = 0;
  re2::RE2::Init(this, a2, a3);
  return this;
}

{
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  *((_DWORD *)this + 6) = 1;
  *((_WORD *)this + 14) = 0;
  *((_BYTE *)this + 30) = 1;
  *((_QWORD *)this + 4) = 0x800000;
  *((_DWORD *)this + 10) = 0;
  *((_BYTE *)this + 44) = 1;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  *(_QWORD *)((char *)this + 45) = 0;
  *(_QWORD *)((char *)this + 61) = 0;
  *(_QWORD *)((char *)this + 53) = 0;
  *((_DWORD *)this + 17) = 0;
  re2::RE2::Init(this, a2, a3);
  return this;
}

void sub_1C368BCAC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 159) < 0)
  {
    operator delete(*v2);
    if ((*(char *)(v1 + 71) & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v1 + 71) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v1 + 48));
  _Unwind_Resume(exception_object);
}

void sub_1C368BD58(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 159) < 0)
  {
    operator delete(*v2);
    if ((*(char *)(v1 + 71) & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v1 + 71) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v1 + 48));
  _Unwind_Resume(exception_object);
}

void re2::RE2::~RE2(re2::RE2 *this)
{
  re2::Regexp *v2;
  re2::Regexp *v3;
  uint64_t v4;
  re2::Prog *v5;
  re2::Prog *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = (re2::Regexp *)*((_QWORD *)this + 11);
  if (v2)
    re2::Regexp::Decref(v2);
  v3 = (re2::Regexp *)*((_QWORD *)this + 10);
  if (v3)
    re2::Regexp::Decref(v3);
  v4 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    if (pthread_rwlock_destroy(*(pthread_rwlock_t **)this))
      abort();
    MEMORY[0x1C3BD4858](v4, 0x1000C40BEF03554);
  }
  v5 = (re2::Prog *)*((_QWORD *)this + 12);
  if (v5)
  {
    re2::Prog::~Prog(v5);
    MEMORY[0x1C3BD4858]();
  }
  v6 = (re2::Prog *)*((_QWORD *)this + 13);
  if (v6)
  {
    re2::Prog::~Prog(v6);
    MEMORY[0x1C3BD4858]();
  }
  v7 = *((_QWORD *)this + 15);
  if (v7 && v7 != re2::empty_string)
  {
    if (*(char *)(v7 + 23) < 0)
      operator delete(*(void **)v7);
    MEMORY[0x1C3BD4858](v7, 0x1012C40EC159624);
  }
  v8 = *((_QWORD *)this + 21);
  if (v8 && v8 != re2::empty_named_groups)
  {
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(*(char **)(v8 + 8));
    MEMORY[0x1C3BD4858](v8, 0x1020C4062D53EE8);
  }
  v9 = *((_QWORD *)this + 22);
  if (v9)
  {
    if (v9 != re2::empty_group_names)
    {
      std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy(*(char **)(v9 + 8));
      MEMORY[0x1C3BD4858](v9, 0x1020C4062D53EE8);
    }
  }
  if ((*((char *)this + 159) & 0x80000000) == 0)
  {
    if ((*((char *)this + 71) & 0x80000000) == 0)
      return;
LABEL_27:
    operator delete(*((void **)this + 6));
    return;
  }
  operator delete(*((void **)this + 17));
  if (*((char *)this + 71) < 0)
    goto LABEL_27;
}

uint64_t re2::RE2::ProgramSize(re2::RE2 *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 12);
  if (v1)
    return *(unsigned int *)(v1 + 12);
  else
    return 0xFFFFFFFFLL;
}

uint64_t re2::RE2::NamedCapturingGroups(re2::RE2 *this)
{
  pthread_rwlock_t *v2;
  uint64_t v3;

  v2 = *(pthread_rwlock_t **)this;
  if (pthread_rwlock_wrlock(*(pthread_rwlock_t **)this))
    abort();
  if (*((_DWORD *)this + 32))
  {
    v3 = re2::empty_named_groups;
  }
  else
  {
    v3 = *((_QWORD *)this + 21);
    if (!v3)
    {
      v3 = re2::Regexp::NamedCaptures(*((re2::Regexp **)this + 11));
      *((_QWORD *)this + 21) = v3;
      if (!v3)
      {
        v3 = re2::empty_named_groups;
        *((_QWORD *)this + 21) = re2::empty_named_groups;
      }
    }
  }
  if (pthread_rwlock_unlock(v2))
    abort();
  return v3;
}

void sub_1C368BFD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  re2::MutexLock::~MutexLock((pthread_rwlock_t **)va);
  _Unwind_Resume(a1);
}

uint64_t re2::RE2::CapturingGroupNames(re2::RE2 *this)
{
  pthread_rwlock_t *v2;
  uint64_t v3;

  v2 = *(pthread_rwlock_t **)this;
  if (pthread_rwlock_wrlock(*(pthread_rwlock_t **)this))
    abort();
  if (*((_DWORD *)this + 32))
  {
    v3 = re2::empty_group_names;
  }
  else
  {
    v3 = *((_QWORD *)this + 22);
    if (!v3)
    {
      v3 = re2::Regexp::CaptureNames(*((re2::Regexp **)this + 11));
      *((_QWORD *)this + 22) = v3;
      if (!v3)
      {
        v3 = re2::empty_group_names;
        *((_QWORD *)this + 22) = re2::empty_group_names;
      }
    }
  }
  if (pthread_rwlock_unlock(v2))
    abort();
  return v3;
}

void sub_1C368C088(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  re2::MutexLock::~MutexLock((pthread_rwlock_t **)va);
  _Unwind_Resume(a1);
}

uint64_t re2::RE2::MaxSubmatch(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  _BYTE *v4;
  _BYTE *v5;
  uint64_t v6;

  v1 = *(int *)(a1 + 8);
  if ((int)v1 < 1)
    return 0;
  result = 0;
  v4 = *(_BYTE **)a1;
  v5 = &v4[v1];
  do
  {
    if (*v4 == 92 && ++v4 < v5 && ((char)*v4 & 0x80000000) == 0)
    {
      LODWORD(v6) = *v4 - 48;
      if ((int)v6 <= (int)result)
        v6 = result;
      else
        v6 = v6;
      if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * *v4 + 60) & 0x400) != 0)
        result = v6;
    }
    ++v4;
  }
  while (v4 < v5);
  return result;
}

void re2::RE2::QuoteMeta(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  int v5;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::string::reserve(a2, 2 * *(_DWORD *)(a1 + 8));
  if (*(int *)(a1 + 8) >= 1)
  {
    v4 = 0;
    while (1)
    {
      v5 = *(char *)(*(_QWORD *)a1 + v4);
      if (v5 >= 97)
      {
        if (v5 > 0x7A)
          goto LABEL_15;
        goto LABEL_16;
      }
      if (v5 >= 65)
        break;
      if (v5 >= 48)
      {
        if (v5 > 0x39)
          goto LABEL_15;
        goto LABEL_16;
      }
      if (v5 < 0)
        goto LABEL_16;
      if (*(_BYTE *)(*(_QWORD *)a1 + v4))
        goto LABEL_15;
      std::string::append(a2, "\\x00");
LABEL_17:
      if (++v4 >= *(int *)(a1 + 8))
        return;
    }
    if (v5 >= 0x5B && v5 != 95)
    {
LABEL_15:
      std::string::push_back(a2, 92);
      LOBYTE(v5) = *(_BYTE *)(*(_QWORD *)a1 + v4);
    }
LABEL_16:
    std::string::push_back(a2, v5);
    goto LABEL_17;
  }
}

void sub_1C368C20C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t re2::RE2::NumberOfCapturingGroups(re2::RE2 *this)
{
  re2::Regexp *v1;
  uint64_t result;

  v1 = (re2::Regexp *)*((_QWORD *)this + 11);
  if (!v1)
    return 0xFFFFFFFFLL;
  result = *((unsigned int *)this + 40);
  if ((_DWORD)result == -1)
  {
    result = re2::Regexp::NumCaptures(v1);
    *((_DWORD *)this + 40) = result;
  }
  return result;
}

BOOL re2::RE2::Arg::parse_null(re2::RE2::Arg *this, const char *a2, uint64_t a3, void *a4)
{
  return a3 == 0;
}

uint64_t re2::RE2::Arg::parse_string(re2::RE2::Arg *this, const char *a2, uint64_t a3, void *a4)
{
  if (a3)
    MEMORY[0x1C3BD4738](a3, this, (int)a2, a4);
  return 1;
}

uint64_t re2::RE2::Arg::parse_stringpiece(re2::RE2::Arg *this, const char *a2, uint64_t a3, void *a4)
{
  if (a3)
  {
    *(_QWORD *)a3 = this;
    *(_DWORD *)(a3 + 8) = (_DWORD)a2;
  }
  return 1;
}

BOOL re2::RE2::Arg::parse_char(re2::RE2::Arg *this, const char *a2, _BYTE *a3, void *a4)
{
  if ((_DWORD)a2 == 1 && a3)
    *a3 = *(_BYTE *)this;
  return (_DWORD)a2 == 1;
}

BOOL re2::RE2::Arg::parse_uchar(re2::RE2::Arg *this, const char *a2, _BYTE *a3, void *a4)
{
  if ((_DWORD)a2 == 1 && a3)
    *a3 = *(_BYTE *)this;
  return (_DWORD)a2 == 1;
}

uint64_t re2::RE2::Arg::parse_long_radix(re2::RE2::Arg *this, const char *a2, uint64_t *a3, void *a4)
{
  int v4;
  int v6;
  unsigned int v8;
  re2::RE2::Arg *v9;
  int v10;
  unsigned int v11;
  size_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t result;
  char *__endptr;
  _OWORD __dst[2];
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (!(_DWORD)a2)
    return 0;
  v4 = (int)a4;
  v6 = (int)a2;
  v19 = 0;
  memset(__dst, 0, sizeof(__dst));
  if ((int)a2 < 1)
    goto LABEL_20;
  v8 = *(char *)this;
  if ((v8 & 0x80000000) != 0)
  {
    if (!__maskrune(v8, 0x4000uLL))
      goto LABEL_7;
LABEL_20:
    v14 = "";
    LODWORD(v13) = v6;
    goto LABEL_21;
  }
  if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v8 + 60) & 0x4000) != 0)
    goto LABEL_20;
LABEL_7:
  v9 = (re2::RE2::Arg *)((char *)this + 1);
  v10 = *(unsigned __int8 *)this;
  if (v10 != 45)
    v9 = this;
  v11 = v6 - (v10 == 45);
  if (v11 >= 3 && *(_BYTE *)v9 == 48 && *((_BYTE *)v9 + 1) == 48)
  {
    while (*((_BYTE *)v9 + 2) == 48)
    {
      v9 = (re2::RE2::Arg *)((char *)v9 + 1);
      if ((int)v11-- <= 3)
      {
        v11 = 2;
        break;
      }
    }
  }
  if (v10 == 45)
    v13 = v11 + 1;
  else
    v13 = v11;
  if (v13 > 0x20)
    goto LABEL_20;
  v14 = (const char *)__dst;
  memmove(__dst, (char *)v9 - (v10 == 45), v13);
  if (v10 == 45)
    LOBYTE(__dst[0]) = 45;
  *((_BYTE *)__dst + v13) = 0;
LABEL_21:
  __endptr = 0;
  *__error() = 0;
  v15 = strtol(v14, &__endptr, v4);
  result = 0;
  if (__endptr != &v14[(int)v13])
    return result;
  if (*__error())
    return 0;
  if (a3)
    *a3 = v15;
  return 1;
}

uint64_t re2::RE2::Arg::parse_ulong_radix(re2::RE2::Arg *this, const char *a2, unint64_t *a3, void *a4)
{
  int v4;
  int v6;
  unsigned int v8;
  re2::RE2::Arg *v9;
  int v10;
  unsigned int v11;
  size_t v13;
  const char *v14;
  uint64_t result;
  unint64_t v16;
  char *__endptr;
  _OWORD __dst[2];
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (!(_DWORD)a2)
    return 0;
  v4 = (int)a4;
  v6 = (int)a2;
  v19 = 0;
  memset(__dst, 0, sizeof(__dst));
  if ((int)a2 < 1)
    goto LABEL_20;
  v8 = *(char *)this;
  if ((v8 & 0x80000000) != 0)
  {
    if (!__maskrune(v8, 0x4000uLL))
      goto LABEL_7;
LABEL_20:
    v14 = "";
    LODWORD(v13) = v6;
    goto LABEL_21;
  }
  if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v8 + 60) & 0x4000) != 0)
    goto LABEL_20;
LABEL_7:
  v9 = (re2::RE2::Arg *)((char *)this + 1);
  v10 = *(unsigned __int8 *)this;
  if (v10 != 45)
    v9 = this;
  v11 = v6 - (v10 == 45);
  if (v11 >= 3 && *(_BYTE *)v9 == 48 && *((_BYTE *)v9 + 1) == 48)
  {
    while (*((_BYTE *)v9 + 2) == 48)
    {
      v9 = (re2::RE2::Arg *)((char *)v9 + 1);
      if ((int)v11-- <= 3)
      {
        v11 = 2;
        break;
      }
    }
  }
  if (v10 == 45)
    v13 = v11 + 1;
  else
    v13 = v11;
  if (v13 > 0x20)
    goto LABEL_20;
  v14 = (const char *)__dst;
  memmove(__dst, (char *)v9 - (v10 == 45), v13);
  if (v10 == 45)
    LOBYTE(__dst[0]) = 45;
  *((_BYTE *)__dst + v13) = 0;
LABEL_21:
  if (*v14 == 45)
    return 0;
  __endptr = 0;
  *__error() = 0;
  v16 = strtoul(v14, &__endptr, v4);
  result = 0;
  if (__endptr == &v14[(int)v13])
  {
    if (*__error())
      return 0;
    if (a3)
      *a3 = v16;
    return 1;
  }
  return result;
}

uint64_t re2::RE2::Arg::parse_short_radix(re2::RE2::Arg *this, const char *a2, _WORD *a3, void *a4)
{
  uint64_t result;
  uint64_t v6;

  v6 = 0;
  result = re2::RE2::Arg::parse_long_radix(this, a2, &v6, a4);
  if ((_DWORD)result)
  {
    if (v6 == (__int16)v6)
    {
      if (a3)
        *a3 = v6;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t re2::RE2::Arg::parse_ushort_radix(re2::RE2::Arg *this, const char *a2, _WORD *a3, void *a4)
{
  uint64_t result;
  unint64_t v6;

  v6 = 0;
  result = re2::RE2::Arg::parse_ulong_radix(this, a2, &v6, a4);
  if ((_DWORD)result)
  {
    if (v6 >> 16)
    {
      return 0;
    }
    else
    {
      if (a3)
        *a3 = v6;
      return 1;
    }
  }
  return result;
}

uint64_t re2::RE2::Arg::parse_int_radix(re2::RE2::Arg *this, const char *a2, _DWORD *a3, void *a4)
{
  uint64_t result;
  uint64_t v6;

  v6 = 0;
  result = re2::RE2::Arg::parse_long_radix(this, a2, &v6, a4);
  if ((_DWORD)result)
  {
    if (v6 == (int)v6)
    {
      if (a3)
        *a3 = v6;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t re2::RE2::Arg::parse_uint_radix(re2::RE2::Arg *this, const char *a2, _DWORD *a3, void *a4)
{
  uint64_t result;
  unint64_t v6;

  v6 = 0;
  result = re2::RE2::Arg::parse_ulong_radix(this, a2, &v6, a4);
  if ((_DWORD)result)
  {
    if (HIDWORD(v6))
    {
      return 0;
    }
    else
    {
      if (a3)
        *a3 = v6;
      return 1;
    }
  }
  return result;
}

uint64_t re2::RE2::Arg::parse_longlong_radix(re2::RE2::Arg *this, const char *a2, uint64_t *a3, void *a4)
{
  int v4;
  int v6;
  unsigned int v8;
  re2::RE2::Arg *v9;
  int v10;
  unsigned int v11;
  size_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t result;
  char *__endptr;
  _OWORD __dst[2];
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (!(_DWORD)a2)
    return 0;
  v4 = (int)a4;
  v6 = (int)a2;
  v19 = 0;
  memset(__dst, 0, sizeof(__dst));
  if ((int)a2 < 1)
    goto LABEL_20;
  v8 = *(char *)this;
  if ((v8 & 0x80000000) != 0)
  {
    if (!__maskrune(v8, 0x4000uLL))
      goto LABEL_7;
LABEL_20:
    v14 = "";
    LODWORD(v13) = v6;
    goto LABEL_21;
  }
  if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v8 + 60) & 0x4000) != 0)
    goto LABEL_20;
LABEL_7:
  v9 = (re2::RE2::Arg *)((char *)this + 1);
  v10 = *(unsigned __int8 *)this;
  if (v10 != 45)
    v9 = this;
  v11 = v6 - (v10 == 45);
  if (v11 >= 3 && *(_BYTE *)v9 == 48 && *((_BYTE *)v9 + 1) == 48)
  {
    while (*((_BYTE *)v9 + 2) == 48)
    {
      v9 = (re2::RE2::Arg *)((char *)v9 + 1);
      if ((int)v11-- <= 3)
      {
        v11 = 2;
        break;
      }
    }
  }
  if (v10 == 45)
    v13 = v11 + 1;
  else
    v13 = v11;
  if (v13 > 0x20)
    goto LABEL_20;
  v14 = (const char *)__dst;
  memmove(__dst, (char *)v9 - (v10 == 45), v13);
  if (v10 == 45)
    LOBYTE(__dst[0]) = 45;
  *((_BYTE *)__dst + v13) = 0;
LABEL_21:
  __endptr = 0;
  *__error() = 0;
  v15 = strtoll(v14, &__endptr, v4);
  result = 0;
  if (__endptr != &v14[(int)v13])
    return result;
  if (*__error())
    return 0;
  if (a3)
    *a3 = v15;
  return 1;
}

uint64_t re2::RE2::Arg::parse_ulonglong_radix(re2::RE2::Arg *this, const char *a2, unint64_t *a3, void *a4)
{
  int v4;
  int v6;
  unsigned int v8;
  re2::RE2::Arg *v9;
  int v10;
  unsigned int v11;
  size_t v13;
  const char *v14;
  uint64_t result;
  unint64_t v16;
  char *__endptr;
  _OWORD __dst[2];
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (!(_DWORD)a2)
    return 0;
  v4 = (int)a4;
  v6 = (int)a2;
  v19 = 0;
  memset(__dst, 0, sizeof(__dst));
  if ((int)a2 < 1)
    goto LABEL_20;
  v8 = *(char *)this;
  if ((v8 & 0x80000000) != 0)
  {
    if (!__maskrune(v8, 0x4000uLL))
      goto LABEL_7;
LABEL_20:
    v14 = "";
    LODWORD(v13) = v6;
    goto LABEL_21;
  }
  if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v8 + 60) & 0x4000) != 0)
    goto LABEL_20;
LABEL_7:
  v9 = (re2::RE2::Arg *)((char *)this + 1);
  v10 = *(unsigned __int8 *)this;
  if (v10 != 45)
    v9 = this;
  v11 = v6 - (v10 == 45);
  if (v11 >= 3 && *(_BYTE *)v9 == 48 && *((_BYTE *)v9 + 1) == 48)
  {
    while (*((_BYTE *)v9 + 2) == 48)
    {
      v9 = (re2::RE2::Arg *)((char *)v9 + 1);
      if ((int)v11-- <= 3)
      {
        v11 = 2;
        break;
      }
    }
  }
  if (v10 == 45)
    v13 = v11 + 1;
  else
    v13 = v11;
  if (v13 > 0x20)
    goto LABEL_20;
  v14 = (const char *)__dst;
  memmove(__dst, (char *)v9 - (v10 == 45), v13);
  if (v10 == 45)
    LOBYTE(__dst[0]) = 45;
  *((_BYTE *)__dst + v13) = 0;
LABEL_21:
  if (*v14 == 45)
    return 0;
  __endptr = 0;
  *__error() = 0;
  v16 = strtoull(v14, &__endptr, v4);
  result = 0;
  if (__endptr == &v14[(int)v13])
  {
    if (*__error())
      return 0;
    if (a3)
      *a3 = v16;
    return 1;
  }
  return result;
}

uint64_t re2::RE2::Arg::parse_double(re2::RE2::Arg *this, const char *a2, double *a3, void *a4)
{
  uint64_t result;
  uint64_t v6;
  char *v7;
  double v8;
  double v9;
  char *v10;
  _OWORD __dst[12];
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (!(_DWORD)a2)
    return 0;
  v12 = 0;
  memset(__dst, 0, sizeof(__dst));
  if ((int)a2 > 199)
    return 0;
  v6 = (int)a2;
  memcpy(__dst, this, (int)a2);
  v7 = (char *)__dst + v6;
  *v7 = 0;
  *__error() = 0;
  v10 = 0;
  v8 = strtod((const char *)__dst, &v10);
  result = 0;
  if (v10 == v7)
  {
    v9 = v8;
    if (*__error())
      return 0;
    if (a3)
      *a3 = v9;
    return 1;
  }
  return result;
}

uint64_t re2::RE2::Arg::parse_float(re2::RE2::Arg *this, const char *a2, float *a3, void *a4)
{
  uint64_t result;
  uint64_t v6;
  char *v7;
  float v8;
  float v9;
  char *v10;
  _OWORD __dst[12];
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (!(_DWORD)a2)
    return 0;
  v12 = 0;
  memset(__dst, 0, sizeof(__dst));
  if ((int)a2 > 199)
    return 0;
  v6 = (int)a2;
  memcpy(__dst, this, (int)a2);
  v7 = (char *)__dst + v6;
  *v7 = 0;
  *__error() = 0;
  v10 = 0;
  v8 = strtof((const char *)__dst, &v10);
  result = 0;
  if (v10 == v7)
  {
    v9 = v8;
    if (*__error())
      return 0;
    if (a3)
      *a3 = v9;
    return 1;
  }
  return result;
}

uint64_t re2::RE2::Arg::parse_short(re2::RE2::Arg *this, const char *a2, _WORD *a3, void *a4)
{
  uint64_t result;
  uint64_t v6;

  v6 = 0;
  result = re2::RE2::Arg::parse_long_radix(this, a2, &v6, (void *)0xA);
  if ((_DWORD)result)
  {
    if (v6 == (__int16)v6)
    {
      if (a3)
        *a3 = v6;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t re2::RE2::Arg::parse_short_hex(re2::RE2::Arg *this, const char *a2, _WORD *a3, void *a4)
{
  uint64_t result;
  uint64_t v6;

  v6 = 0;
  result = re2::RE2::Arg::parse_long_radix(this, a2, &v6, (void *)0x10);
  if ((_DWORD)result)
  {
    if (v6 == (__int16)v6)
    {
      if (a3)
        *a3 = v6;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t re2::RE2::Arg::parse_short_octal(re2::RE2::Arg *this, const char *a2, _WORD *a3, void *a4)
{
  uint64_t result;
  uint64_t v6;

  v6 = 0;
  result = re2::RE2::Arg::parse_long_radix(this, a2, &v6, (void *)8);
  if ((_DWORD)result)
  {
    if (v6 == (__int16)v6)
    {
      if (a3)
        *a3 = v6;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t re2::RE2::Arg::parse_short_cradix(re2::RE2::Arg *this, const char *a2, _WORD *a3, void *a4)
{
  int v5;
  uint64_t result;
  uint64_t v7;

  v7 = 0;
  v5 = re2::RE2::Arg::parse_long_radix(this, a2, &v7, 0);
  result = 0;
  if (v5)
  {
    if (v7 == (__int16)v7)
    {
      if (a3)
        *a3 = v7;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t re2::RE2::Arg::parse_ushort(re2::RE2::Arg *this, const char *a2, _WORD *a3, void *a4)
{
  uint64_t result;
  unint64_t v6;

  v6 = 0;
  result = re2::RE2::Arg::parse_ulong_radix(this, a2, &v6, (void *)0xA);
  if ((_DWORD)result)
  {
    if (v6 >> 16)
    {
      return 0;
    }
    else
    {
      if (a3)
        *a3 = v6;
      return 1;
    }
  }
  return result;
}

uint64_t re2::RE2::Arg::parse_ushort_hex(re2::RE2::Arg *this, const char *a2, _WORD *a3, void *a4)
{
  uint64_t result;
  unint64_t v6;

  v6 = 0;
  result = re2::RE2::Arg::parse_ulong_radix(this, a2, &v6, (void *)0x10);
  if ((_DWORD)result)
  {
    if (v6 >> 16)
    {
      return 0;
    }
    else
    {
      if (a3)
        *a3 = v6;
      return 1;
    }
  }
  return result;
}

uint64_t re2::RE2::Arg::parse_ushort_octal(re2::RE2::Arg *this, const char *a2, _WORD *a3, void *a4)
{
  uint64_t result;
  unint64_t v6;

  v6 = 0;
  result = re2::RE2::Arg::parse_ulong_radix(this, a2, &v6, (void *)8);
  if ((_DWORD)result)
  {
    if (v6 >> 16)
    {
      return 0;
    }
    else
    {
      if (a3)
        *a3 = v6;
      return 1;
    }
  }
  return result;
}

uint64_t re2::RE2::Arg::parse_ushort_cradix(re2::RE2::Arg *this, const char *a2, _WORD *a3, void *a4)
{
  int v5;
  uint64_t result;
  unint64_t v7;

  v7 = 0;
  v5 = re2::RE2::Arg::parse_ulong_radix(this, a2, &v7, 0);
  result = 0;
  if (v5)
  {
    if (v7 >> 16)
    {
      return 0;
    }
    else
    {
      if (a3)
        *a3 = v7;
      return 1;
    }
  }
  return result;
}

uint64_t re2::RE2::Arg::parse_int(re2::RE2::Arg *this, const char *a2, _DWORD *a3, void *a4)
{
  uint64_t result;
  uint64_t v6;

  v6 = 0;
  result = re2::RE2::Arg::parse_long_radix(this, a2, &v6, (void *)0xA);
  if ((_DWORD)result)
  {
    if (v6 == (int)v6)
    {
      if (a3)
        *a3 = v6;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t re2::RE2::Arg::parse_int_hex(re2::RE2::Arg *this, const char *a2, _DWORD *a3, void *a4)
{
  uint64_t result;
  uint64_t v6;

  v6 = 0;
  result = re2::RE2::Arg::parse_long_radix(this, a2, &v6, (void *)0x10);
  if ((_DWORD)result)
  {
    if (v6 == (int)v6)
    {
      if (a3)
        *a3 = v6;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t re2::RE2::Arg::parse_int_octal(re2::RE2::Arg *this, const char *a2, _DWORD *a3, void *a4)
{
  uint64_t result;
  uint64_t v6;

  v6 = 0;
  result = re2::RE2::Arg::parse_long_radix(this, a2, &v6, (void *)8);
  if ((_DWORD)result)
  {
    if (v6 == (int)v6)
    {
      if (a3)
        *a3 = v6;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t re2::RE2::Arg::parse_int_cradix(re2::RE2::Arg *this, const char *a2, _DWORD *a3, void *a4)
{
  int v5;
  uint64_t result;
  uint64_t v7;

  v7 = 0;
  v5 = re2::RE2::Arg::parse_long_radix(this, a2, &v7, 0);
  result = 0;
  if (v5)
  {
    if (v7 == (int)v7)
    {
      if (a3)
        *a3 = v7;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t re2::RE2::Arg::parse_uint(re2::RE2::Arg *this, const char *a2, _DWORD *a3, void *a4)
{
  uint64_t result;
  unint64_t v6;

  v6 = 0;
  result = re2::RE2::Arg::parse_ulong_radix(this, a2, &v6, (void *)0xA);
  if ((_DWORD)result)
  {
    if (HIDWORD(v6))
    {
      return 0;
    }
    else
    {
      if (a3)
        *a3 = v6;
      return 1;
    }
  }
  return result;
}

uint64_t re2::RE2::Arg::parse_uint_hex(re2::RE2::Arg *this, const char *a2, _DWORD *a3, void *a4)
{
  uint64_t result;
  unint64_t v6;

  v6 = 0;
  result = re2::RE2::Arg::parse_ulong_radix(this, a2, &v6, (void *)0x10);
  if ((_DWORD)result)
  {
    if (HIDWORD(v6))
    {
      return 0;
    }
    else
    {
      if (a3)
        *a3 = v6;
      return 1;
    }
  }
  return result;
}

uint64_t re2::RE2::Arg::parse_uint_octal(re2::RE2::Arg *this, const char *a2, _DWORD *a3, void *a4)
{
  uint64_t result;
  unint64_t v6;

  v6 = 0;
  result = re2::RE2::Arg::parse_ulong_radix(this, a2, &v6, (void *)8);
  if ((_DWORD)result)
  {
    if (HIDWORD(v6))
    {
      return 0;
    }
    else
    {
      if (a3)
        *a3 = v6;
      return 1;
    }
  }
  return result;
}

uint64_t re2::RE2::Arg::parse_uint_cradix(re2::RE2::Arg *this, const char *a2, _DWORD *a3, void *a4)
{
  int v5;
  uint64_t result;
  unint64_t v7;

  v7 = 0;
  v5 = re2::RE2::Arg::parse_ulong_radix(this, a2, &v7, 0);
  result = 0;
  if (v5)
  {
    if (HIDWORD(v7))
    {
      return 0;
    }
    else
    {
      if (a3)
        *a3 = v7;
      return 1;
    }
  }
  return result;
}

uint64_t re2::RE2::Arg::parse_long(re2::RE2::Arg *this, const char *a2, uint64_t *a3, void *a4)
{
  return re2::RE2::Arg::parse_long_radix(this, a2, a3, (void *)0xA);
}

uint64_t re2::RE2::Arg::parse_long_hex(re2::RE2::Arg *this, const char *a2, uint64_t *a3, void *a4)
{
  return re2::RE2::Arg::parse_long_radix(this, a2, a3, (void *)0x10);
}

uint64_t re2::RE2::Arg::parse_long_octal(re2::RE2::Arg *this, const char *a2, uint64_t *a3, void *a4)
{
  return re2::RE2::Arg::parse_long_radix(this, a2, a3, (void *)8);
}

uint64_t re2::RE2::Arg::parse_long_cradix(re2::RE2::Arg *this, const char *a2, uint64_t *a3, void *a4)
{
  return re2::RE2::Arg::parse_long_radix(this, a2, a3, 0);
}

uint64_t re2::RE2::Arg::parse_ulong(re2::RE2::Arg *this, const char *a2, unint64_t *a3, void *a4)
{
  return re2::RE2::Arg::parse_ulong_radix(this, a2, a3, (void *)0xA);
}

uint64_t re2::RE2::Arg::parse_ulong_hex(re2::RE2::Arg *this, const char *a2, unint64_t *a3, void *a4)
{
  return re2::RE2::Arg::parse_ulong_radix(this, a2, a3, (void *)0x10);
}

uint64_t re2::RE2::Arg::parse_ulong_octal(re2::RE2::Arg *this, const char *a2, unint64_t *a3, void *a4)
{
  return re2::RE2::Arg::parse_ulong_radix(this, a2, a3, (void *)8);
}

uint64_t re2::RE2::Arg::parse_ulong_cradix(re2::RE2::Arg *this, const char *a2, unint64_t *a3, void *a4)
{
  return re2::RE2::Arg::parse_ulong_radix(this, a2, a3, 0);
}

uint64_t re2::RE2::Arg::parse_longlong(re2::RE2::Arg *this, const char *a2, uint64_t *a3, void *a4)
{
  return re2::RE2::Arg::parse_longlong_radix(this, a2, a3, (void *)0xA);
}

uint64_t re2::RE2::Arg::parse_longlong_hex(re2::RE2::Arg *this, const char *a2, uint64_t *a3, void *a4)
{
  return re2::RE2::Arg::parse_longlong_radix(this, a2, a3, (void *)0x10);
}

uint64_t re2::RE2::Arg::parse_longlong_octal(re2::RE2::Arg *this, const char *a2, uint64_t *a3, void *a4)
{
  return re2::RE2::Arg::parse_longlong_radix(this, a2, a3, (void *)8);
}

uint64_t re2::RE2::Arg::parse_longlong_cradix(re2::RE2::Arg *this, const char *a2, uint64_t *a3, void *a4)
{
  return re2::RE2::Arg::parse_longlong_radix(this, a2, a3, 0);
}

uint64_t re2::RE2::Arg::parse_ulonglong(re2::RE2::Arg *this, const char *a2, unint64_t *a3, void *a4)
{
  return re2::RE2::Arg::parse_ulonglong_radix(this, a2, a3, (void *)0xA);
}

uint64_t re2::RE2::Arg::parse_ulonglong_hex(re2::RE2::Arg *this, const char *a2, unint64_t *a3, void *a4)
{
  return re2::RE2::Arg::parse_ulonglong_radix(this, a2, a3, (void *)0x10);
}

uint64_t re2::RE2::Arg::parse_ulonglong_octal(re2::RE2::Arg *this, const char *a2, unint64_t *a3, void *a4)
{
  return re2::RE2::Arg::parse_ulonglong_radix(this, a2, a3, (void *)8);
}

uint64_t re2::RE2::Arg::parse_ulonglong_cradix(re2::RE2::Arg *this, const char *a2, unint64_t *a3, void *a4)
{
  return re2::RE2::Arg::parse_ulonglong_radix(this, a2, a3, 0);
}

void sub_1C368D8E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C368E18C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  uint64_t v43;

  _Block_object_dispose(&a43, 8);
  _Block_object_dispose((const void *)(v43 - 256), 8);
  _Unwind_Resume(a1);
}

void sub_1C368E5C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C368E694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C368E9B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C36913F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;
  char a71;

  _Block_object_dispose(&a53, 8);
  _Block_object_dispose(&a59, 8);
  _Block_object_dispose(&a65, 8);
  _Block_object_dispose(&a71, 8);
  _Block_object_dispose(&STACK[0x220], 8);
  _Block_object_dispose(&STACK[0x250], 8);
  _Unwind_Resume(a1);
}

void sub_1C36925E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C36927E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C3692A14(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1C3692AE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1C3692BAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1C3692C78(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1C3692D44(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1C3692E10(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1C3692EDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1C3692FA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1C3693170(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1C369323C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1C3693308(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1C3693884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1C3693A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C3693BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C3693D08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C36942A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__7053(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__7054(uint64_t a1)
{

}

void sub_1C3696F90(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

uint64_t canTurnIntoAscii(void *a1)
{
  __CFString *v1;
  void *v2;
  CFIndex Length;
  const UniChar *CharactersPtr;
  const char *CStringPtr;
  uint64_t v6;
  int64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  CFIndex v11;
  UniChar v12;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  CFIndex v17;
  int v19;
  uint64_t v20;
  _OWORD v22[8];
  CFStringRef theString;
  const UniChar *v24;
  const char *v25;
  uint64_t v26;
  CFIndex v27;
  int64_t v28;
  int64_t v29;
  CFRange v30;

  v1 = a1;
  objc_opt_self();
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v2)
    goto LABEL_53;
  memset(v22, 0, sizeof(v22));
  Length = CFStringGetLength(v1);
  theString = v1;
  v26 = 0;
  v27 = Length;
  CharactersPtr = CFStringGetCharactersPtr(v1);
  CStringPtr = 0;
  v24 = CharactersPtr;
  if (!CharactersPtr)
    CStringPtr = CFStringGetCStringPtr(v1, 0x600u);
  v28 = 0;
  v29 = 0;
  v25 = CStringPtr;
  if (Length < 1)
  {
LABEL_53:
    v20 = 1;
    goto LABEL_54;
  }
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 64;
  while (1)
  {
    if ((unint64_t)v8 >= 4)
      v10 = 4;
    else
      v10 = v8;
    v11 = v27;
    if (v27 <= v8)
      goto LABEL_37;
    if (v24)
    {
      v12 = v24[v8 + v26];
    }
    else if (v25)
    {
      v12 = v25[v26 + v8];
    }
    else
    {
      if (v29 <= v8 || v7 > v8)
      {
        v14 = v10 + v6;
        v15 = v9 - v10;
        v16 = v8 - v10;
        v17 = v16 + 64;
        if (v16 + 64 >= v27)
          v17 = v27;
        v28 = v16;
        v29 = v17;
        if (v27 >= v15)
          v11 = v15;
        v30.length = v11 + v14;
        v30.location = v16 + v26;
        CFStringGetCharacters(theString, v30, (UniChar *)v22);
        v7 = v28;
      }
      v12 = *((_WORD *)v22 + v8 - v7);
    }
    if (v12 <= 0x214Fu)
    {
      if (v12 - 7552 < 0x80 || v12 - 8304 < 0x30 || v12 - 8400 < 0x30)
        goto LABEL_37;
    }
    else if (v12 > 0xAB2Fu)
    {
      if (v12 - 43824 < 0x40 || v12 - 65056 < 0x10)
        goto LABEL_37;
    }
    else if (v12 - 8528 < 0x40 || v12 - 11360 < 0x20)
    {
      goto LABEL_37;
    }
    if (v12 >= 0x80u)
    {
      v19 = v12 & 0xFF80;
      if (v19 != 128
        && v19 != 256
        && v12 - 384 >= 0xD0
        && v12 - 592 >= 0xB0
        && v12 - 768 >= 0x70
        && v12 - 6832 >= 0x50
        && v19 != 7424
        && (v12 & 0xFF00) != 0x1E00
        && v12 - 8448 >= 0x50
        && v12 - 42784 >= 0xE0
        && v12 - 64256 >= 0x50
        && v12 - 65280 > 0xEF)
      {
        break;
      }
    }
LABEL_37:
    ++v8;
    --v6;
    ++v9;
    if (Length == v8)
      goto LABEL_53;
  }
  v20 = 0;
LABEL_54:

  return v20;
}

id fastPathLatinToAsciiTransformation(void *a1)
{
  id v1;
  __CFString *v2;
  void *v3;
  CFIndex Length;
  const UniChar *CharactersPtr;
  const char *CStringPtr;
  uint64_t v7;
  int64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  CFIndex v12;
  UniChar v13;
  int64_t v14;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  CFIndex v19;
  char v20;
  void *v21;
  _OWORD v23[8];
  CFStringRef theString;
  const UniChar *v25;
  const char *v26;
  uint64_t v27;
  CFIndex v28;
  int64_t v29;
  int64_t v30;
  _OWORD v31[16];
  uint64_t v32;
  CFRange v33;

  v32 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if ((unint64_t)objc_msgSend(v1, "length") > 0x80)
  {
LABEL_45:
    v21 = 0;
  }
  else
  {
    memset(v31, 0, sizeof(v31));
    v2 = (__CFString *)v1;
    objc_opt_self();
    v3 = (void *)objc_claimAutoreleasedReturnValue();

    if (v3)
    {
      memset(v23, 0, sizeof(v23));
      Length = CFStringGetLength(v2);
      theString = v2;
      v27 = 0;
      v28 = Length;
      CharactersPtr = CFStringGetCharactersPtr(v2);
      CStringPtr = 0;
      v25 = CharactersPtr;
      if (!CharactersPtr)
        CStringPtr = CFStringGetCStringPtr(v2, 0x600u);
      v29 = 0;
      v30 = 0;
      v26 = CStringPtr;
      if (Length >= 1)
      {
        v7 = 0;
        v8 = 0;
        v9 = (char *)v31;
        v10 = 64;
        while (1)
        {
          if ((unint64_t)v8 >= 4)
            v11 = 4;
          else
            v11 = v8;
          v12 = v28;
          if (v28 <= v8)
          {
            LOBYTE(v13) = 0;
          }
          else
          {
            if (v25)
            {
              v13 = v25[v8 + v27];
            }
            else if (v26)
            {
              v13 = v26[v27 + v8];
            }
            else
            {
              v14 = v29;
              if (v30 <= v8 || v29 > v8)
              {
                v16 = v11 + v7;
                v17 = v10 - v11;
                v18 = v8 - v11;
                v19 = v18 + 64;
                if (v18 + 64 >= v28)
                  v19 = v28;
                v29 = v18;
                v30 = v19;
                if (v28 >= v17)
                  v12 = v17;
                v33.length = v12 + v16;
                v33.location = v18 + v27;
                CFStringGetCharacters(theString, v33, (UniChar *)v23);
                v14 = v29;
              }
              v13 = *((_WORD *)v23 + v8 - v14);
            }
            if (v13 > 0x7Fu)
            {
              if ((isCombiningMark(v13) & 1) == 0)
              {
                v20 = 97;
                switch(v13)
                {
                  case 0xBBu:
                    v20 = 32;
                    break;
                  case 0xDFu:
                    v20 = 115;
                    *v9++ = 115;
                    break;
                  case 0xE0u:
                  case 0xE1u:
                  case 0xE2u:
                  case 0xE3u:
                  case 0xE4u:
                  case 0xE5u:
                    break;
                  case 0xE7u:
                    v20 = 99;
                    break;
                  case 0xE8u:
                  case 0xE9u:
                  case 0xEAu:
                  case 0xEBu:
                    v20 = 101;
                    break;
                  case 0xECu:
                  case 0xEDu:
                  case 0xEEu:
                  case 0xEFu:
                    v20 = 105;
                    break;
                  case 0xF1u:
                    v20 = 110;
                    break;
                  case 0xF2u:
                  case 0xF3u:
                  case 0xF4u:
                  case 0xF5u:
                  case 0xF6u:
                  case 0xF8u:
                    v20 = 111;
                    break;
                  case 0xF9u:
                  case 0xFAu:
                  case 0xFBu:
                  case 0xFCu:
                    v20 = 117;
                    break;
                  default:

                    goto LABEL_45;
                }
                *v9++ = v20;
              }
              goto LABEL_28;
            }
          }
          *v9++ = v13;
LABEL_28:
          ++v8;
          --v7;
          ++v10;
          if (Length == v8)
            goto LABEL_42;
        }
      }
    }
    v9 = (char *)v31;
LABEL_42:

    v21 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithBytes:length:encoding:", v31, v9 - (char *)v31, 1);
  }

  return v21;
}

uint64_t isCombiningMark(int a1)
{
  _BOOL4 v2;
  int v3;
  unsigned int v4;

  v2 = (a1 - 768) < 0x70 || (a1 - 6832) < 0x50;
  v3 = (a1 - 65056) < 0x10 || v2;
  if ((a1 - 8400) >= 0x30)
    v4 = v3;
  else
    v4 = 1;
  if ((a1 - 7616) >= 0x40)
    return v4;
  else
    return 1;
}

uint64_t re2::CEscapeString(re2 *this, const char *a2, uint64_t a3, char *a4)
{
  int v4;
  unsigned __int8 *v6;
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;

  v4 = (int)a4;
  if ((int)a2 >= 1)
  {
    v6 = (unsigned __int8 *)this;
    LODWORD(v7) = 0;
    v8 = (unsigned __int8 *)this + (int)a2;
    while (v4 - (int)v7 >= 2)
    {
      v9 = *v6;
      switch(*v6)
      {
        case 9u:
          *(_WORD *)(a3 + (int)v7) = 29788;
          goto LABEL_4;
        case 0xAu:
          *(_WORD *)(a3 + (int)v7) = 28252;
          goto LABEL_4;
        case 0xBu:
        case 0xCu:
        case 0xEu:
        case 0xFu:
        case 0x10u:
        case 0x11u:
        case 0x12u:
        case 0x13u:
        case 0x14u:
        case 0x15u:
        case 0x16u:
        case 0x17u:
        case 0x18u:
        case 0x19u:
        case 0x1Au:
        case 0x1Bu:
        case 0x1Cu:
        case 0x1Du:
        case 0x1Eu:
        case 0x1Fu:
        case 0x20u:
        case 0x21u:
        case 0x23u:
        case 0x24u:
        case 0x25u:
        case 0x26u:
          goto LABEL_11;
        case 0xDu:
          *(_WORD *)(a3 + (int)v7) = 29276;
          goto LABEL_4;
        case 0x22u:
          *(_WORD *)(a3 + (int)v7) = 8796;
          goto LABEL_4;
        case 0x27u:
          *(_WORD *)(a3 + (int)v7) = 10076;
          goto LABEL_4;
        default:
          if (v9 == 92)
          {
            *(_WORD *)(a3 + (int)v7) = 23644;
LABEL_4:
            v7 = (v7 + 2);
          }
          else
          {
LABEL_11:
            if ((v9 - 127) > 0xFFFFFFA0)
            {
              *(_BYTE *)(a3 + (int)v7) = v9;
              v7 = (v7 + 1);
            }
            else
            {
              if ((v4 - v7) < 4)
                return 0xFFFFFFFFLL;
              sprintf((char *)(a3 + (int)v7), "\\%03o", *v6);
              v7 = (v7 + 4);
            }
          }
          if (++v6 >= v8)
            goto LABEL_19;
          break;
      }
    }
    return 0xFFFFFFFFLL;
  }
  v7 = 0;
LABEL_19:
  if ((int)v7 >= v4)
    return 0xFFFFFFFFLL;
  *(_BYTE *)(a3 + (int)v7) = 0;
  return v7;
}

void re2::CEscape(re2 **this@<X0>, _QWORD *a2@<X8>)
{
  char *v5;
  const void *v6;
  signed int v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v5 = (char *)((4 * *((int *)this + 2)) | 1);
  v6 = (const void *)operator new[]();
  v7 = re2::CEscapeString(*this, (const char *)*((unsigned int *)this + 2), (uint64_t)v6, v5);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  if (v7 < 0)
    std::string::__throw_length_error[abi:ne180100]();
  v8 = v7;
  if (v7 >= 0x17)
  {
    v9 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v9 = v7 | 7;
    v10 = v9 + 1;
    v11 = operator new(v9 + 1);
    a2[1] = v8;
    a2[2] = v10 | 0x8000000000000000;
    *a2 = v11;
    a2 = v11;
  }
  else
  {
    *((_BYTE *)a2 + 23) = v7;
    if (!v7)
      goto LABEL_9;
  }
  memcpy(a2, v6, v8);
LABEL_9:
  *((_BYTE *)a2 + v8) = 0;
  JUMPOUT(0x1C3BD4840);
}

double re2::PrefixSuccessor@<D0>(const void **this@<X0>, std::string *a2@<X8>)
{
  std::string::size_type v3;
  const void *v5;
  std::string *p_dst;
  uint64_t v7;
  uint64_t v8;
  double result;
  char v10;
  std::string::size_type v11;
  std::string *v12;
  int v13;
  std::string __dst;

  v3 = *((int *)this + 2);
  if ((v3 & 0x80000000) != 0)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = *this;
  memset(&__dst, 0, sizeof(__dst));
  if (v3 >= 0x17)
  {
    v7 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v7 = v3 | 7;
    v8 = v7 + 1;
    p_dst = (std::string *)operator new(v7 + 1);
    __dst.__r_.__value_.__l.__size_ = v3;
    __dst.__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v3;
  p_dst = &__dst;
  if ((_DWORD)v3)
LABEL_8:
    memmove(p_dst, v5, v3);
  p_dst->__r_.__value_.__s.__data_[v3] = 0;
  v10 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    LODWORD(v11) = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    LODWORD(v11) = __dst.__r_.__value_.__r.__words[1];
  if ((int)v11 - 1 < 0)
  {
LABEL_19:
    *((_BYTE *)&a2->__r_.__value_.__s + 23) = 0;
    a2->__r_.__value_.__s.__data_[0] = 0;
    if (v10 < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
  }
  else
  {
    while (1)
    {
      v11 = (v11 - 1);
      v12 = (__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__dst
          : (std::string *)__dst.__r_.__value_.__r.__words[0];
      v13 = v12->__r_.__value_.__s.__data_[v11];
      if (v13 != 255)
        break;
      std::string::erase(&__dst, v11, 0xFFFFFFFFFFFFFFFFLL);
      if ((int)v11 <= 0)
      {
        v10 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
        goto LABEL_19;
      }
    }
    v12->__r_.__value_.__s.__data_[v11] = v13 + 1;
    result = *(double *)&__dst.__r_.__value_.__l.__data_;
    *a2 = __dst;
  }
  return result;
}

void sub_1C3698D8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1C369A0C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C369A64C(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x1C369A544);
  }
  _Unwind_Resume(exc_buf);
}

void sub_1C369A8D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C369AA04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1C369AD40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C369B9CC(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_1C369E894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  objc_end_catch();
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C369E8C0(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x1C369E840);
}

intptr_t releaseScannerRef(const void *a1)
{
  uint64_t v2;
  char v3;
  char v4;
  void *v5;
  void *v6;
  void *v7;

  pthread_mutex_lock(&scannerPoolLock);
  v2 = 0;
  v3 = 1;
  while (1)
  {
    v4 = v3;
    objc_msgSend((id)sharedScanners[v2], "resultIfAvailable");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    if (v5 == a1)
      break;
    v3 = 0;
    v2 = 1u;
    if ((v4 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void releaseScannerRef(DDScannerRef)");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v7, CFSTR("SGDataDetectorMatch.m"), 325, CFSTR("Could not return scanner %@ to pool"), a1);

      goto LABEL_6;
    }
  }
  scannerInUse[v2] = 0;
  CFRelease(a1);
LABEL_6:
  pthread_mutex_unlock(&scannerPoolLock);
  return dispatch_semaphore_signal((dispatch_semaphore_t)sharedScannerSemaphore);
}

void __getScannerRefAndAcquire_block_invoke()
{
  dispatch_semaphore_t v0;
  void *v1;

  v0 = dispatch_semaphore_create(1);
  v1 = (void *)sharedScannerSemaphore;
  sharedScannerSemaphore = (uint64_t)v0;

}

uint64_t SGRangeFromCFRange(uint64_t result, uint64_t a2)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  _QWORD v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  if (result < 0 || a2 < 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("CFRange \"%ld:%ld\" cannot be converted to NSRange."), result, a2);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = (void *)MEMORY[0x1E0CB35C8];
    v6 = *MEMORY[0x1E0CB2D68];
    v7[0] = v2;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v7, &v6, 1);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "errorWithDomain:code:userInfo:", CFSTR("_PASUtilityMacros"), 0, v4);
    v5 = (id)objc_claimAutoreleasedReturnValue();

    return 0;
  }
  return result;
}

id matchFromSimpleDDResult(uint64_t a1, void *a2)
{
  uint64_t Range;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t RangeForURLification;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  CFTimeZoneRef v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t *v22;
  id v23;
  uint64_t v24;
  void *v25;
  CFTimeZoneRef v26;
  CFLocaleRef System;
  id v28;
  id v29;
  id v30;
  uint64_t v31;
  CFTimeZoneRef v32;
  CFLocaleRef v33;
  int DateAndTimeZoneWithLocaleAndTimeZone;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const __CFArray *SubResults;
  const __CFArray *v44;
  id *ValueAtIndex;
  id v46;
  id v47;
  _UNKNOWN **v48;
  uint64_t v49;
  void *v50;
  uint64_t MatchType;
  char v52;
  char v53;
  id v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  id v61;
  uint64_t v62;
  id v63;
  uint64_t ParsecDomain;
  void *ParsecUUID;
  id v66;
  void *v67;
  void *v68;
  CFTimeZoneRef v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  id v74;
  id v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  char HasType;
  id v83;
  id v84;
  id v85;
  id v86;
  id v87;
  id v88;
  id v89;
  id v90;
  id v91[2];
  void *v92;
  _BYTE v93[9];

  v85 = a2;
  Range = DDResultGetRange();
  v5 = SGRangeFromCFRange(Range, v4);
  v7 = v6;
  RangeForURLification = DDResultGetRangeForURLification();
  v10 = SGRangeFromCFRange(RangeForURLification, v9);
  v12 = v11;
  v93[0] = 0;
  if (calendarsAndFormatters_onceToken != -1)
    dispatch_once(&calendarsAndFormatters_onceToken, &__block_literal_global_7804);
  v84 = (id)calendarsAndFormatters_result_1;
  v91[1] = 0;
  v92 = 0;
  if (DDResultHasType() && DDResultCopyMailValue()
    || DDResultHasType() && DDResultCopyPhoneValue()
    || DDResultHasType() && DDResultCopyIMScreenNameValue())
  {
    v13 = v92;
    v83 = 0;
  }
  else
  {
    v83 = 0;
    v13 = 0;
  }
  v79 = v5;
  v80 = v7;
  v77 = v12;
  v78 = v10;
  if (DDResultHasType())
  {
    v93[0] = 1;
    v14 = CFTimeZoneCopyDefault();
    SGDataDetectorsGetDate();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v81 = v13;
    if (calendarsAndFormatters_onceToken != -1)
      dispatch_once(&calendarsAndFormatters_onceToken, &__block_literal_global_7804);
    v16 = (id)calendarsAndFormatters_result_0;
    objc_msgSend(MEMORY[0x1E0C99D68], "distantPast");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "components:fromDate:", 4, v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    SGDataDetectorsGetDate();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    CFRelease(v14);
    objc_msgSend(v16, "components:fromDate:", 4, v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = objc_msgSend(v20, "year");
    if (v21 == objc_msgSend(v18, "year"))
    {
      if (calendarsAndFormatters_onceToken != -1)
        dispatch_once(&calendarsAndFormatters_onceToken, &__block_literal_global_7804);
      v22 = &calendarsAndFormatters_result_2;
    }
    else
    {
      if (calendarsAndFormatters_onceToken != -1)
        dispatch_once(&calendarsAndFormatters_onceToken, &__block_literal_global_7804);
      v22 = &calendarsAndFormatters_result_1;
    }
    v23 = (id)*v22;
    objc_msgSend(v23, "stringFromDate:", v15);
    v24 = objc_claimAutoreleasedReturnValue();

    v13 = (void *)v24;
  }
  else
  {
    v15 = 0;
  }
  if ((DDResultHasType() & 1) != 0 || DDResultHasType())
  {
    v25 = v13;
    v26 = CFTimeZoneCopyDefault();
    System = CFLocaleGetSystem();
    HasType = DDResultHasType();
    v90 = 0;
    v91[0] = v15;
    v88 = 0;
    v89 = 0;
    v70 = v26;
    SGDataDetectorsGetIntervalDatesAndTimeZoneWithLocale(a1, (uint64_t)System, v91, &v90, &v89, &v88, (uint64_t)v85, v93);
    v28 = v91[0];

    v29 = v90;
    v30 = v89;
    v75 = v88;
    if (v28)
    {
      objc_msgSend(v84, "stringFromDate:", v28, v26);
      v31 = objc_claimAutoreleasedReturnValue();

      v25 = (void *)v31;
    }
    v76 = v30;
    if (v26)
      CFRelease(v26);
    v15 = v28;
    v13 = v25;
  }
  else
  {
    HasType = 0;
    v75 = 0;
    v76 = 0;
    v29 = 0;
  }
  if ((DDResultHasType() & 1) != 0 || (DDResultHasType() & 1) != 0 || DDResultHasType())
  {
    v32 = CFTimeZoneCopyDefault();
    v33 = CFLocaleGetSystem();
    v86 = v29;
    v87 = v15;
    DateAndTimeZoneWithLocaleAndTimeZone = SGDataDetectorsGetDateAndTimeZoneWithLocaleAndTimeZone(a1, (uint64_t)v33, (uint64_t)v85, (uint64_t)v32, &v87, &v86, v93);
    v35 = v87;

    v74 = v86;
    if (DateAndTimeZoneWithLocaleAndTimeZone)
    {
      if (calendarsAndFormatters_onceToken != -1)
        dispatch_once(&calendarsAndFormatters_onceToken, &__block_literal_global_7804);
      v36 = (id)calendarsAndFormatters_result_3;
      objc_msgSend(v36, "stringFromDate:", v35);
      v37 = objc_claimAutoreleasedReturnValue();

      v13 = (void *)v37;
    }
    if (v32)
      CFRelease(v32);
  }
  else
  {
    v74 = v29;
    v35 = v15;
  }
  if (DDResultGetSubresultWithType())
  {
    v38 = DDResultGetRange();
    v40 = SGRangeFromCFRange(v38, v39);
    v42 = v41;
  }
  else
  {
    v42 = 0;
    v40 = 0x7FFFFFFFFFFFFFFFLL;
  }
  v73 = v35;
  if (DDResultHasType())
  {
    SubResults = (const __CFArray *)DDResultGetSubResults();
    if (SubResults)
    {
      v44 = SubResults;
      if (CFArrayGetCount(SubResults) >= 1)
      {
        ValueAtIndex = (id *)CFArrayGetValueAtIndex(v44, 0);
        v46 = ValueAtIndex[8];

        v47 = ValueAtIndex[9];
        v83 = v46;
        v13 = v47;
      }
    }
  }
  v48 = &off_1E7DA5000;
  if ((DDResultHasType() & 1) != 0
    || (DDResultHasType() & 1) != 0
    || (DDResultHasType() & 1) != 0
    || DDResultHasType())
  {
    HasType = +[SGDataDetectorMatch inferredDateForDataDetectorResult:](SGDataDetectorMatch, "inferredDateForDataDetectorResult:", a1, v70);
  }
  if (DDResultGetCategory() == 3)
  {
    DDResultCopyFullAddressComponents();
    objc_msgSend(MEMORY[0x1E0D198E8], "components:city:state:postalCode:country:", 0, 0, 0, 0, 0);
    v49 = objc_claimAutoreleasedReturnValue();

    v50 = (void *)v49;
    v48 = &off_1E7DA5000;

  }
  else
  {
    v50 = 0;
  }
  MatchType = SGDataDetectorsGetMatchType();
  switch((int)MatchType)
  {
    case 1:
      v61 = objc_alloc((Class)v48[346]);
      v56 = v83;
      v62 = objc_msgSend(v61, "initWithMatchType:range:labelRange:labelString:valueRange:valueString:postalAddressComponents:", 1, v79, v80, v40, v42, v83, v78, v77, v13, v50);
      goto LABEL_63;
    case 3:
    case 8:
      v52 = objc_msgSend(v48[346], "approximateTimeForDataDetectorResult:", a1);
      v53 = objc_msgSend(v48[346], "partialDateForDataDetectorResult:", a1);
      v54 = objc_alloc((Class)v48[346]);
      BYTE3(v72) = v53;
      BYTE2(v72) = v52;
      BYTE1(v72) = HasType;
      LOBYTE(v72) = v93[0] != 0;
      v55 = v76;
      v56 = v83;
      v71 = v40;
      v57 = v73;
      v58 = v74;
      v59 = v75;
      v60 = (void *)objc_msgSend(v54, "initWithDetectedDate:detectedTimeZone:detectedEndDate:detectedEndTimeZone:matchType:range:labelRange:labelString:valueRange:valueString:allDay:inferredDate:approximateTime:partialDate:", v73, v74, v76, v75, MatchType, v79, v80, v71, v42, v83, v78, v77, v13, v72);
      goto LABEL_65;
    case 6:
      ParsecDomain = DDResultGetParsecDomain();
      ParsecUUID = (void *)DDResultGetParsecUUID();
      v66 = objc_alloc((Class)v48[346]);
      v67 = v66;
      if (ParsecUUID)
      {
        v68 = (void *)objc_msgSend(ParsecUUID, "copy");
        v56 = v83;
        v60 = (void *)objc_msgSend(v67, "initWithLookupHintInDomain:range:labelRange:labelString:valueRange:valueString:qid:", ParsecDomain, v79, v80, v40, v42, v83, v78, v77, v13, v68);

      }
      else
      {
        v56 = v83;
        v62 = objc_msgSend(v66, "initWithLookupHintInDomain:range:labelRange:labelString:valueRange:valueString:qid:", ParsecDomain, v79, v80, v40, v42, v83, v78, v77, v13, 0);
LABEL_63:
        v60 = (void *)v62;
      }
      v59 = v75;
      v55 = v76;
      v57 = v73;
      v58 = v74;
LABEL_65:

      return v60;
    default:
      v63 = objc_alloc((Class)v48[346]);
      v56 = v83;
      v62 = objc_msgSend(v63, "initWithMatchType:range:labelRange:labelString:valueRange:valueString:", MatchType, v79, v80, v40, v42, v83, v78, v77, v13);
      goto LABEL_63;
  }
}

void __calendarsAndFormatters_block_invoke()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;

  objc_msgSend(MEMORY[0x1E0C99D48], "calendarWithIdentifier:", *MEMORY[0x1E0C996C8]);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)calendarsAndFormatters_result_0;
  calendarsAndFormatters_result_0 = v0;

  v2 = (void *)objc_opt_new();
  objc_msgSend(v2, "setDateFormat:", CFSTR("dd-MM-yyyy"));
  v3 = (void *)calendarsAndFormatters_result_1;
  calendarsAndFormatters_result_1 = (uint64_t)v2;

  v4 = (void *)objc_opt_new();
  objc_msgSend(v4, "setDateFormat:", CFSTR("dd-MM"));
  v5 = (void *)calendarsAndFormatters_result_2;
  calendarsAndFormatters_result_2 = (uint64_t)v4;

  v6 = objc_opt_new();
  v7 = (void *)calendarsAndFormatters_result_3;
  calendarsAndFormatters_result_3 = v6;

}

void sub_1C369FF7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1C36A04E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;

  _Block_object_dispose(&a29, 8);
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose((const void *)(v35 - 224), 8);
  _Block_object_dispose((const void *)(v35 - 176), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__7849(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__7850(uint64_t a1)
{

}

id patterns()
{
  if (patterns_onceToken != -1)
    dispatch_once(&patterns_onceToken, &__block_literal_global_7855);
  return (id)patterns_patterns;
}

void __patterns_block_invoke()
{
  uint64_t v0;
  void *v1;

  +[SGPatterns patternsForClass:](SGPatterns, "patternsForClass:", objc_opt_class());
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)patterns_patterns;
  patterns_patterns = v0;

}

void sub_1C36A10AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C36A1598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id patterns_7942()
{
  if (patterns_onceToken_7953 != -1)
    dispatch_once(&patterns_onceToken_7953, &__block_literal_global_7954);
  return (id)patterns_patterns_7955;
}

void __patterns_block_invoke_7956()
{
  uint64_t v0;
  void *v1;

  +[SGPatterns patternsForClass:](SGPatterns, "patternsForClass:", objc_opt_class());
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)patterns_patterns_7955;
  patterns_patterns_7955 = v0;

}

id emailAddressDomain(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v1 = a1;
  v2 = (void *)MEMORY[0x1C3BD4F6C]();
  v3 = objc_msgSend(v1, "rangeOfString:options:", CFSTR("@"), 6);
  if (v3 == 0x7FFFFFFFFFFFFFFFLL)
  {
    v4 = 0;
  }
  else
  {
    objc_msgSend(v1, "substringFromIndex:", v3 + 1);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "lowercaseString");
    v4 = (void *)objc_claimAutoreleasedReturnValue();

  }
  objc_autoreleasePoolPop(v2);

  return v4;
}

void enumerateTokensInEmailAddress(void *a1, void *a2)
{
  id v3;
  __CFString *v4;
  void *v5;
  CFIndex Length;
  const UniChar *CharactersPtr;
  const char *CStringPtr;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  CFIndex v16;
  UniChar v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  CFIndex v25;
  int v26;
  uint64_t v27;
  int v28;
  char v29;
  char *v30;
  char *v31;
  __CFString *v32;
  void *v33;
  CFIndex v34;
  const UniChar *v35;
  const char *v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  CFIndex v42;
  UniChar v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  int64_t v49;
  CFIndex v50;
  int v51;
  void *v52;
  int v53;
  id v54;
  __CFString *v55;
  id v56;
  id v57;
  uint64_t (**v58)(id, void *);
  UniChar buffer[8];
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  CFStringRef theString;
  const UniChar *v68;
  const char *v69;
  uint64_t v70;
  CFIndex v71;
  uint64_t v72;
  uint64_t v73;
  CFRange v74;
  CFRange v75;

  v3 = a1;
  v58 = a2;
  if (!v3)
    goto LABEL_87;
  v4 = (__CFString *)v3;
  objc_opt_self();
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v5)
    goto LABEL_39;
  v65 = 0u;
  v66 = 0u;
  v63 = 0u;
  v64 = 0u;
  v61 = 0u;
  v62 = 0u;
  *(_OWORD *)buffer = 0u;
  v60 = 0u;
  Length = CFStringGetLength(v4);
  theString = v4;
  v70 = 0;
  v71 = Length;
  CharactersPtr = CFStringGetCharactersPtr(v4);
  CStringPtr = 0;
  v68 = CharactersPtr;
  if (!CharactersPtr)
    CStringPtr = CFStringGetCStringPtr(v4, 0x600u);
  v72 = 0;
  v73 = 0;
  v69 = CStringPtr;
  if (Length < 1)
  {
LABEL_39:
    v29 = 0;
    goto LABEL_42;
  }
  v56 = v3;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 64;
  v14 = MEMORY[0x1E0C80978];
  while (1)
  {
    v15 = (unint64_t)v11 >= 4 ? 4 : v11;
    v16 = v71;
    if (v71 <= v11)
    {
      v18 = 0;
      v17 = 0;
    }
    else
    {
      if (v68)
      {
        v17 = v68[v11 + v70];
      }
      else if (v69)
      {
        v17 = v69[v70 + v11];
      }
      else
      {
        v19 = v72;
        if (v73 <= v11 || v72 > v11)
        {
          v21 = v15 + v9;
          v22 = v13 - v15;
          v23 = v11 - v15;
          v24 = v14;
          v25 = v23 + 64;
          if (v23 + 64 >= v71)
            v25 = v71;
          v72 = v23;
          v73 = v25;
          if (v71 >= v22)
            v16 = v22;
          v74.length = v16 + v21;
          v74.location = v23 + v70;
          CFStringGetCharacters(theString, v74, buffer);
          v14 = v24;
          v19 = v72;
        }
        v17 = buffer[v11 - v19];
      }
      v18 = v17;
      if (v17 > 0x7Fu)
      {
        v27 = v14;
        if (__maskrune(v17, 0x8000uLL))
        {
          v10 = 1;
          v14 = v27;
          goto LABEL_35;
        }
        v28 = __maskrune(v17, 0x1000uLL);
        v14 = v27;
        if (v28)
          goto LABEL_29;
        goto LABEL_34;
      }
    }
    v26 = *(_DWORD *)(v14 + 4 * v18 + 60);
    if ((v26 & 0x8000) != 0)
    {
      v10 = 1;
      goto LABEL_35;
    }
    if ((v26 & 0x1000) != 0)
    {
LABEL_29:
      v12 = 1;
      goto LABEL_35;
    }
LABEL_34:
    if (v17 == 64)
      goto LABEL_38;
LABEL_35:
    if ((v10 & 1) != 0 && (v12 & 1) != 0)
      break;
    ++v11;
    --v9;
    ++v13;
    if (Length == v11)
    {
LABEL_38:
      v29 = 0;
      goto LABEL_41;
    }
  }
  v29 = 1;
LABEL_41:
  v3 = v56;
LABEL_42:

  v30 = (char *)malloc_type_malloc(2 * -[__CFString length](v4, "length"), 0x1000040BDFB0063uLL);
  if (!v30)
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99850], CFSTR("malloc failed"), 0);
    v54 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v54);
  }
  v31 = v30;
  v32 = v4;
  objc_opt_self();
  v33 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v33)
    goto LABEL_85;
  v65 = 0u;
  v66 = 0u;
  v63 = 0u;
  v64 = 0u;
  v61 = 0u;
  v62 = 0u;
  *(_OWORD *)buffer = 0u;
  v60 = 0u;
  v34 = CFStringGetLength(v32);
  theString = v32;
  v70 = 0;
  v71 = v34;
  v35 = CFStringGetCharactersPtr(v32);
  v36 = 0;
  v68 = v35;
  if (!v35)
    v36 = CFStringGetCStringPtr(v32, 0x600u);
  v72 = 0;
  v73 = 0;
  v69 = v36;
  if (v34 <= 0)
    goto LABEL_85;
  v55 = v32;
  v57 = v3;
  v37 = 0;
  v38 = 0;
  v39 = 64;
  v40 = v31;
  while (2)
  {
    if ((unint64_t)v38 >= 4)
      v41 = 4;
    else
      v41 = v38;
    v42 = v71;
    if (v71 <= v38)
    {
      v44 = 0;
      v43 = 0;
      if ((v29 & 1) != 0)
        goto LABEL_71;
      goto LABEL_80;
    }
    if (v68)
    {
      v43 = v68[v38 + v70];
    }
    else if (v69)
    {
      v43 = v69[v70 + v38];
    }
    else
    {
      v45 = v72;
      if (v73 <= v38 || v72 > v38)
      {
        v47 = v41 + v37;
        v48 = v39 - v41;
        v49 = v38 - v41;
        v50 = v49 + 64;
        if (v49 + 64 >= v71)
          v50 = v71;
        v72 = v49;
        v73 = v50;
        if (v71 >= v48)
          v42 = v48;
        v75.length = v42 + v47;
        v75.location = v49 + v70;
        CFStringGetCharacters(theString, v75, buffer);
        v45 = v72;
      }
      v43 = buffer[v38 - v45];
    }
    v44 = v43;
    if (v43 != 64)
    {
      if ((v29 & 1) == 0)
        goto LABEL_74;
      if (v43 <= 0x7Fu)
      {
LABEL_71:
        if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v44 + 60) & 0x8000) != 0)
          goto LABEL_72;
LABEL_74:
        if (v43 - 45 <= 0x32 && ((1 << (v43 - 45)) & 0x4000000000003) != 0)
        {
          v51 = 0;
          goto LABEL_77;
        }
        goto LABEL_80;
      }
      if (!__maskrune(v43, 0x8000uLL))
        goto LABEL_74;
LABEL_72:
      v51 = 1;
LABEL_77:
      if (v40 > v31)
      {
        v52 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithCharactersNoCopy:length:freeWhenDone:", v31, (v40 - v31) >> 1, 0);
        v53 = v58[2](v58, v52);

        v40 = v31;
        if (!v53)
        {
          v32 = v55;
          v3 = v57;
          goto LABEL_85;
        }
      }
      if (v51)
      {
LABEL_80:
        *(_WORD *)v40 = __tolower(v44);
        v40 += 2;
      }
      ++v38;
      --v37;
      ++v39;
      if (v34 == v38)
        break;
      continue;
    }
    break;
  }

  v3 = v57;
  if (v40 <= v31)
    goto LABEL_86;
  v32 = (__CFString *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithCharactersNoCopy:length:freeWhenDone:", v31, (v40 - v31) >> 1, 0);
  v58[2](v58, v32);
LABEL_85:

LABEL_86:
  free(v31);
LABEL_87:

}

void sub_1C36A3764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  uint64_t v51;

  _Block_object_dispose(&a39, 8);
  _Block_object_dispose(&a45, 8);
  _Block_object_dispose(&a51, 8);
  _Block_object_dispose((const void *)(v51 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_1C36A3BD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__8083(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__8084(uint64_t a1)
{

}

void sub_1C36A59E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  uint64_t v45;

  _Block_object_dispose((const void *)(v45 - 176), 8);
  _Block_object_dispose(&a45, 8);
  _Unwind_Resume(a1);
}

void sub_1C36A6618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  _Block_object_dispose(&a45, 8);
  _Block_object_dispose(&a49, 8);
  _Unwind_Resume(a1);
}

void sub_1C36A6994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a12);
  va_start(va, a12);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1C36A6D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__8229(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__8230(uint64_t a1)
{

}

void sub_1C36A87A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C36A912C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1C36AAD24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose(&a39, 8);
  _Unwind_Resume(a1);
}

void sub_1C36AB24C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose(&a39, 8);
  _Unwind_Resume(a1);
}

void sub_1C36AB774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose(&a39, 8);
  _Unwind_Resume(a1);
}

void sub_1C36AB928(_Unwind_Exception *a1)
{
  uint64_t v1;

  SGRecordMeasurementState((_QWORD *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_1C36ABD88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C36AD424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C36AD4DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C36AD620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t simplifyInterdicts(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  int v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  id v27;
  id v28;
  uint64_t v29;
  id v30;
  void *context;
  id v32;
  id v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _BYTE v38[128];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v28 = a2;
  objc_msgSend(v3, "sortUsingComparator:", &__block_literal_global_319);
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v4 = v3;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v34, v38, 16);
  if (v5)
  {
    v6 = v5;
    v7 = 0;
    v8 = 0;
    v9 = *(_QWORD *)v35;
    v27 = v4;
    while (1)
    {
      v10 = 0;
      v29 = v6;
      do
      {
        if (*(_QWORD *)v35 != v9)
          objc_enumerationMutation(v4);
        v11 = *(void **)(*((_QWORD *)&v34 + 1) + 8 * v10);
        if (v8)
        {
          objc_msgSend(*(id *)(*((_QWORD *)&v34 + 1) + 8 * v10), "first");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v8, "first");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          v14 = objc_msgSend(v12, "isEqualToString:", v13);

          if (v14)
          {
            v33 = objc_alloc(MEMORY[0x1E0D81638]);
            objc_msgSend(v11, "first");
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v11, "second");
            v16 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v8, "second");
            v17 = (void *)objc_claimAutoreleasedReturnValue();
            v32 = v16;
            v30 = v17;
            context = (void *)MEMORY[0x1C3BD4F6C]();
            SGDelimitedStringsDeserializeSet();
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            SGDelimitedStringsDeserializeSet();
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v18, "setByAddingObjectsFromSet:", v19);
            v20 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v20, "allObjects");
            v21 = v9;
            v22 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v22, "sortedArrayUsingSelector:", sel_compare_);
            v23 = (void *)objc_claimAutoreleasedReturnValue();
            SGDelimitedStringsSerializeArray();
            v24 = (void *)objc_claimAutoreleasedReturnValue();

            v9 = v21;
            v6 = v29;

            objc_autoreleasePoolPop(context);
            v25 = objc_msgSend(v33, "initWithFirst:second:", v15, v24);

            v7 = 1;
            v8 = (id)v25;
            v4 = v27;
            goto LABEL_11;
          }
          objc_msgSend(v28, "addObject:", v8);
        }
        v15 = v8;
        v8 = v11;
LABEL_11:

        ++v10;
      }
      while (v6 != v10);
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v34, v38, 16);
      if (!v6)
      {

        if (v8)
        {
          objc_msgSend(v28, "addObject:", v8);
          goto LABEL_16;
        }
        goto LABEL_17;
      }
    }
  }
  v7 = 0;
  v8 = v4;
LABEL_16:

LABEL_17:
  return v7 & 1;
}

uint64_t __simplifyInterdicts_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;

  v4 = a3;
  objc_msgSend(a2, "first");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "first");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v7 = objc_msgSend(v5, "compare:", v6);
  return v7;
}

uint64_t __Block_byref_object_copy__8446(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__8447(uint64_t a1)
{

}

void sub_1C36AE49C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1C36AFA5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 248), 8);
  _Unwind_Resume(a1);
}

void sub_1C36B0784(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 208), 8);
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1C36B0B84(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t writeIdentity(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, char a10, char a11)
{
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  _QWORD v38[4];
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  uint64_t *v48;
  char v49;
  char v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  char v54;

  v18 = a1;
  v19 = a2;
  v20 = a3;
  v21 = a4;
  v22 = a5;
  v23 = a6;
  v24 = a7;
  v25 = a8;
  v26 = a9;
  v51 = 0;
  v52 = &v51;
  v53 = 0x2020000000;
  v54 = 0;
  v38[0] = MEMORY[0x1E0C809B0];
  v38[1] = 3221225472;
  v38[2] = __writeIdentity_block_invoke;
  v38[3] = &unk_1E7DAB060;
  v27 = v18;
  v39 = v27;
  v28 = v26;
  v40 = v28;
  v29 = v19;
  v41 = v29;
  v30 = v20;
  v42 = v30;
  v31 = v21;
  v43 = v31;
  v32 = v22;
  v44 = v32;
  v33 = v23;
  v45 = v33;
  v34 = v24;
  v46 = v34;
  v35 = v25;
  v49 = a10;
  v50 = a11;
  v47 = v35;
  v48 = &v51;
  objc_msgSend(v27, "writeTransaction:", v38);
  v36 = *((unsigned __int8 *)v52 + 24);

  _Block_object_dispose(&v51, 8);
  return v36;
}

void sub_1C36B16FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 120), 8);
  _Unwind_Resume(a1);
}

void __writeIdentity_block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  _QWORD v17[5];
  id v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _QWORD v23[5];
  id v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _QWORD v29[4];
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  __int16 v38;
  _BYTE v39[128];
  _BYTE v40[128];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 3221225472;
  v29[2] = __writeIdentity_block_invoke_2;
  v29[3] = &unk_1E7DAB038;
  v2 = *(void **)(a1 + 32);
  v30 = *(id *)(a1 + 40);
  v31 = *(id *)(a1 + 48);
  v32 = *(id *)(a1 + 56);
  v33 = *(id *)(a1 + 64);
  v34 = *(id *)(a1 + 72);
  v35 = *(id *)(a1 + 80);
  v36 = *(id *)(a1 + 88);
  v37 = *(id *)(a1 + 96);
  v38 = *(_WORD *)(a1 + 112);
  objc_msgSend(v2, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("INSERT OR IGNORE INTO identityPerson (recordId, surname, middlename, fullname, nameSketches, phones, socialProfileIdentifiers, email, curated, isSent) VALUES (?,?,?,?,?,?,?,?,?,?)"), v29, 0, 0);
  if (sqlite3_changes((sqlite3 *)objc_msgSend(*(id *)(a1 + 32), "handle")))
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 24) = 1;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v3 = *(id *)(a1 + 80);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v25, v40, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v26;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v26 != v6)
          objc_enumerationMutation(v3);
        v8 = *(_QWORD *)(*((_QWORD *)&v25 + 1) + 8 * v7);
        v23[0] = MEMORY[0x1E0C809B0];
        v23[1] = 3221225472;
        v23[2] = __writeIdentity_block_invoke_3;
        v23[3] = &unk_1E7DB5190;
        v23[4] = v8;
        v9 = *(void **)(a1 + 32);
        v24 = *(id *)(a1 + 40);
        objc_msgSend(v9, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("INSERT OR IGNORE INTO identityPhones (phone, recordId) VALUES (?, ?)"), v23, 0, 0);
        if (sqlite3_changes((sqlite3 *)objc_msgSend(*(id *)(a1 + 32), "handle")))
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 24) = 1;

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v25, v40, 16);
    }
    while (v5);
  }

  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v10 = *(id *)(a1 + 88);
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v19, v39, 16);
  if (v11)
  {
    v12 = v11;
    v13 = *(_QWORD *)v20;
    do
    {
      v14 = 0;
      do
      {
        if (*(_QWORD *)v20 != v13)
          objc_enumerationMutation(v10);
        v15 = *(_QWORD *)(*((_QWORD *)&v19 + 1) + 8 * v14);
        v17[0] = MEMORY[0x1E0C809B0];
        v17[1] = 3221225472;
        v17[2] = __writeIdentity_block_invoke_4;
        v17[3] = &unk_1E7DB6E80;
        v17[4] = v15;
        v16 = *(void **)(a1 + 32);
        v18 = *(id *)(a1 + 40);
        objc_msgSend(v16, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("INSERT OR IGNORE INTO identitySocialProfileIdentifiers (socialProfileIdentifier, recordId) VALUES (:socialProfileIdentifier, :recordId)"), v17, 0, 0);
        if (sqlite3_changes((sqlite3 *)objc_msgSend(*(id *)(a1 + 32), "handle")))
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 24) = 1;

        ++v14;
      }
      while (v12 != v14);
      v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v19, v39, 16);
    }
    while (v12);
  }

}

uint64_t __writeIdentity_block_invoke_2(uint64_t a1, sqlite3_stmt *a2)
{
  __CFString *v4;
  __CFString *v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  __CFString *v12;

  sqlite3_bind_int64(a2, 1, objc_msgSend(*(id *)(a1 + 32), "rowId"));
  if (*(_QWORD *)(a1 + 40))
    v4 = *(__CFString **)(a1 + 40);
  else
    v4 = &stru_1E7DB83A8;
  sqlite3_bind_text(a2, 2, (const char *)-[__CFString UTF8String](objc_retainAutorelease(v4), "UTF8String"), -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  if (*(_QWORD *)(a1 + 48))
    v5 = *(__CFString **)(a1 + 48);
  else
    v5 = &stru_1E7DB83A8;
  sqlite3_bind_text(a2, 3, (const char *)-[__CFString UTF8String](objc_retainAutorelease(v5), "UTF8String"), -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  if (objc_msgSend(*(id *)(a1 + 56), "length"))
    sqlite3_bind_text(a2, 4, (const char *)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 56)), "UTF8String"), -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  else
    sqlite3_bind_null(a2, 4);
  objc_msgSend(*(id *)(a1 + 64), "allObjects");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  SGDelimitedStringsSerializeArray();
  v7 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  sqlite3_bind_text(a2, 5, (const char *)objc_msgSend(v7, "UTF8String"), -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);

  objc_msgSend(*(id *)(a1 + 72), "allObjects");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  SGDelimitedStringsSerializeArray();
  v9 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  sqlite3_bind_text(a2, 6, (const char *)objc_msgSend(v9, "UTF8String"), -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);

  objc_msgSend(*(id *)(a1 + 80), "allObjects");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  SGDelimitedStringsSerializeArray();
  v11 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  sqlite3_bind_text(a2, 7, (const char *)objc_msgSend(v11, "UTF8String"), -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);

  if (*(_QWORD *)(a1 + 88))
    v12 = *(__CFString **)(a1 + 88);
  else
    v12 = &stru_1E7DB83A8;
  sqlite3_bind_text(a2, 8, (const char *)-[__CFString UTF8String](objc_retainAutorelease(v12), "UTF8String"), -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  sqlite3_bind_int(a2, 9, *(unsigned __int8 *)(a1 + 96));
  return sqlite3_bind_int(a2, 10, *(unsigned __int8 *)(a1 + 97));
}

uint64_t __writeIdentity_block_invoke_3(uint64_t a1, sqlite3_stmt *a2)
{
  sqlite3_bind_text(a2, 1, (const char *)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 32)), "UTF8String"), -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  return sqlite3_bind_int64(a2, 2, objc_msgSend(*(id *)(a1 + 40), "rowId"));
}

void __writeIdentity_block_invoke_4(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = a2;
  objc_msgSend(v4, "bindNamedParam:toNSString:", ":socialProfileIdentifier", v3);
  objc_msgSend(v4, "bindNamedParam:toInt64:", ":recordId", objc_msgSend(*(id *)(a1 + 40), "rowId"));

}

void sub_1C36B2B5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C36B2C64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C36B3420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  _Block_object_dispose(&a56, 8);
  _Block_object_dispose(&a62, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__8640(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__8641(uint64_t a1)
{

}

id dereferenceData(void *a1, int a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD v7[4];
  id v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  void (*v15)(uint64_t);
  id v16;

  v11 = 0;
  v12 = &v11;
  v13 = 0x3032000000;
  v14 = __Block_byref_object_copy__8640;
  v15 = __Block_byref_object_dispose__8641;
  v3 = a1;
  v16 = v3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v4 = (void *)globalPatternsData;
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = __dereferenceData_block_invoke;
    v7[3] = &unk_1E7DAB2E0;
    v9 = &v11;
    v8 = v3;
    v10 = a2;
    objc_msgSend(v4, "runWithLockAcquired:", v7);

  }
  v5 = (id)v12[5];
  _Block_object_dispose(&v11, 8);

  return v5;
}

void sub_1C36B39AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __dereferenceData_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  objc_msgSend(*(id *)(a2 + 16), "dataForOffset:includeTerminator:", *(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 48));
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

}

void sub_1C36B4248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C36B730C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL isInhumanHeader(void *a1)
{
  id v1;
  _BOOL8 v2;

  v1 = a1;
  v2 = objc_msgSend(v1, "length")
    && objc_msgSend(v1, "characterAtIndex:", 0) == 120
    && objc_msgSend(CFSTR(" x-sendgrid-eid x-facebook-notify x-amazon-mail-relay-type x-autogenerated x-campaign x-ses-outgoing x-ebay-mailtracker x-mailing-id x-phpbb-origin x-report-abuse x-facebook x-bloggermail x-campaign-id x-feedback-id"), "rangeOfString:options:", v1, 2) != 0x7FFFFFFFFFFFFFFFLL;

  return v2;
}

re2::NFA *re2::NFA::NFA(re2::NFA *this, re2::Prog *a2)
{
  char *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  v3 = (char *)this + 88;
  *(_OWORD *)((char *)this + 65) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 113) = 0u;
  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = *((unsigned int *)a2 + 1);
  *((_WORD *)this + 8) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  re2::SparseArray<re2::NFA::Thread *>::resize((uint64_t)this + 40, *((_DWORD *)a2 + 3));
  re2::SparseArray<re2::NFA::Thread *>::resize((uint64_t)v3, *(_DWORD *)(*(_QWORD *)this + 12));
  v4 = 2 * *(_DWORD *)(*(_QWORD *)this + 12);
  *((_DWORD *)this + 40) = v4;
  v5 = operator new[]();
  if (v4)
  {
    v6 = ((v4 + 0xFFFFFFFFFFFFFFELL) & 0xFFFFFFFFFFFFFFFLL) + 2;
    v7 = (_QWORD *)(v5 + 16);
    do
    {
      *(v7 - 2) = 0xFFFFFFFF00000000;
      *v7 = 0xFFFFFFFF00000000;
      *(v7 - 1) = 0;
      v7[1] = 0;
      v7 += 4;
      v6 -= 2;
    }
    while (v6);
  }
  *((_QWORD *)this + 19) = v5;
  *((_QWORD *)this + 17) = 0;
  *((_BYTE *)this + 144) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_DWORD *)this + 41) = re2::NFA::ComputeFirstByte(this);
  return this;
}

void sub_1C36BB300(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  re2::SparseArray<re2::NFA::Thread *>::~SparseArray(v2);
  re2::SparseArray<re2::NFA::Thread *>::~SparseArray(v1);
  _Unwind_Resume(a1);
}

void re2::SparseArray<re2::NFA::Thread *>::resize(uint64_t a1, int a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  int v22;
  char *v23;

  if (*(_DWORD *)(a1 + 4) >= a2)
    goto LABEL_24;
  v4 = (char *)operator new[]();
  v5 = v4;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = *(int *)(a1 + 4);
    memmove(v4, *(const void **)(a1 + 8), 4 * v7);
    if (*(_BYTE *)(a1 + 40) && (int)v7 < a2)
      memset(&v5[4 * v7], 171, 4 * (~(_DWORD)v7 + a2) + 4);
    MEMORY[0x1C3BD4840](v6, 0x1000C8052888210);
  }
  *(_QWORD *)(a1 + 8) = v5;
  v9 = *(char **)(a1 + 16);
  v8 = *(char **)(a1 + 24);
  v10 = (v8 - v9) >> 4;
  v11 = a2 - v10;
  if (a2 <= v10)
  {
    if (a2 >= v10)
      goto LABEL_24;
    v23 = &v9[16 * a2];
    goto LABEL_23;
  }
  v12 = *(_QWORD *)(a1 + 32);
  if (v11 <= (v12 - (uint64_t)v8) >> 4)
  {
    v23 = &v8[16 * v11];
LABEL_23:
    *(_QWORD *)(a1 + 24) = v23;
    goto LABEL_24;
  }
  if (a2 < 0)
    std::vector<re2::RE2 *>::__throw_length_error[abi:ne180100]();
  v13 = v12 - (_QWORD)v9;
  v14 = v13 >> 3;
  if (v13 >> 3 <= (unint64_t)a2)
    v14 = a2;
  v15 = (unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0;
  v16 = 0xFFFFFFFFFFFFFFFLL;
  if (!v15)
    v16 = v14;
  if (v16 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v17 = 16 * v16;
  v18 = (char *)operator new(16 * v16);
  v19 = &v18[16 * v10];
  v20 = &v19[16 * v11];
  if (v8 != v9)
  {
    do
    {
      v21 = *((_QWORD *)v8 - 2);
      v8 -= 16;
      v22 = *((_DWORD *)v8 + 2);
      *((_QWORD *)v19 - 2) = v21;
      v19 -= 16;
      *((_DWORD *)v19 + 2) = v22;
    }
    while (v8 != v9);
    v8 = *(char **)(a1 + 16);
  }
  *(_QWORD *)(a1 + 16) = v19;
  *(_QWORD *)(a1 + 24) = v20;
  *(_QWORD *)(a1 + 32) = &v18[v17];
  if (v8)
    operator delete(v8);
LABEL_24:
  *(_DWORD *)(a1 + 4) = a2;
  if (*(_DWORD *)a1 > a2)
    *(_DWORD *)a1 = a2;
}

uint64_t re2::NFA::ComputeFirstByte(re2::NFA *this)
{
  unsigned int v2;
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;
  unsigned int v6;

  if (*((_DWORD *)this + 2))
  {
    v2 = *(_DWORD *)(*(_QWORD *)this + 12);
    v3 = operator new[]();
    v4 = (_DWORD *)operator new[]();
    v5 = v4;
    v6 = *((_DWORD *)this + 2);
    if (v2 > v6)
    {
      *(_DWORD *)(v3 + 4 * (int)v6) = 0;
      *v4 = v6;
      __asm { BR              X17 }
    }
    MEMORY[0x1C3BD4840](v3, 0x1000C8052888210);
    MEMORY[0x1C3BD4840](v5, 0x1000C8052888210);
  }
  return 0xFFFFFFFFLL;
}

_QWORD *re2::SparseArray<re2::NFA::Thread *>::~SparseArray(_QWORD *a1)
{
  uint64_t v2;
  void *v3;

  v2 = a1[1];
  if (v2)
    MEMORY[0x1C3BD4840](v2, 0x1000C8052888210);
  v3 = (void *)a1[2];
  if (v3)
  {
    a1[3] = v3;
    operator delete(v3);
  }
  return a1;
}

void re2::NFA::~NFA(re2::NFA *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;

  v2 = *((_QWORD *)this + 17);
  if (v2)
    MEMORY[0x1C3BD4840](v2, 0x50C80EE9192B6);
  v3 = *((_QWORD *)this + 19);
  if (v3)
    MEMORY[0x1C3BD4840](v3, 0x1050C80606E6C2FLL);
  v4 = (_QWORD *)*((_QWORD *)this + 21);
  if (v4)
  {
    do
    {
      v10 = (_QWORD *)*v4;
      v9 = v4[1];
      if (v9)
        MEMORY[0x1C3BD4840](v9, 0x50C80EE9192B6);
      MEMORY[0x1C3BD4858](v4, 0x10A2C40E7E742B6);
      v4 = v10;
    }
    while (v10);
  }
  v5 = *((_QWORD *)this + 12);
  if (v5)
    MEMORY[0x1C3BD4840](v5, 0x1000C8052888210);
  v6 = (void *)*((_QWORD *)this + 13);
  if (v6)
  {
    *((_QWORD *)this + 14) = v6;
    operator delete(v6);
  }
  v7 = *((_QWORD *)this + 6);
  if (v7)
    MEMORY[0x1C3BD4840](v7, 0x1000C8052888210);
  v8 = (void *)*((_QWORD *)this + 7);
  if (v8)
  {
    *((_QWORD *)this + 8) = v8;
    operator delete(v8);
  }
}

uint64_t re2::NFA::AddToThreadq(uint64_t result, unsigned int *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  int i;
  uint64_t v8;
  signed int *v9;
  uint64_t v10;
  signed int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (a3)
  {
    v6 = *(_QWORD *)(result + 152);
    *(_DWORD *)v6 = a3;
    *(_DWORD *)(v6 + 4) = -1;
    *(_QWORD *)(v6 + 8) = 0;
    for (i = 1; ; --i)
    {
      v8 = (i - 1);
      v9 = (signed int *)(v6 + 16 * v8);
      v10 = v9[1];
      if ((v10 & 0x80000000) == 0)
        *(_QWORD *)(a6 + 8 * v10) = *(_QWORD *)(v6 + 16 * v8 + 8);
      v11 = *v9;
      if (*v9)
      {
        v12 = *a2;
        if (a2[1] <= v11)
          goto LABEL_11;
        v13 = *((_QWORD *)a2 + 1);
        v14 = *((_QWORD *)a2 + 2);
        v15 = *(int *)(v13 + 4 * v11);
        if (v15 >= v12 || *(_DWORD *)(v14 + 16 * v15 + 8) != v11)
          break;
      }
      if ((int)v8 <= 0)
        return result;
    }
    *(_DWORD *)(v13 + 4 * v11) = v12;
    v16 = (int)*a2;
    *(_DWORD *)(v14 + 16 * v16 + 8) = v11;
    *a2 = v16 + 1;
    *(_QWORD *)(v14 + 16 * *(int *)(v13 + 4 * v11)) = 0;
LABEL_11:
    __asm { BR              X10 }
  }
  return result;
}

std::string *re2::NFA::FormatCapture@<X0>(std::string *this@<X0>, const char **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, std::string *a9@<X8>)
{
  std::string *v11;
  uint64_t v12;
  const char *v13;
  char v14;
  char v15;

  a9->__r_.__value_.__r.__words[0] = 0;
  a9->__r_.__value_.__l.__size_ = 0;
  a9->__r_.__value_.__r.__words[2] = 0;
  if (SHIDWORD(this->__r_.__value_.__r.__words[1]) >= 1)
  {
    v11 = this;
    v12 = 0;
    do
    {
      v13 = a2[v12];
      if (v13)
      {
        v14 = (_BYTE)v13 - v11[1].__r_.__value_.__r.__words[0];
        if (a2[v12 + 1])
          this = re2::StringAppendF(a9, "(%d,%d)", a3, a4, a5, a6, a7, a8, v14);
        else
          this = re2::StringAppendF(a9, "(%d,?)", a3, a4, a5, a6, a7, a8, v14);
      }
      else
      {
        this = re2::StringAppendF(a9, "(?,?)", a3, a4, a5, a6, a7, a8, v15);
      }
      v12 += 2;
    }
    while (SHIDWORD(v11->__r_.__value_.__r.__words[1]) > (int)v12);
  }
  return this;
}

void sub_1C36BBD94(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t re2::NFA::Search(re2::NFA *this, const re2::StringPiece *a2, const re2::StringPiece *a3, int a4, char a5, re2::StringPiece *a6, int a7)
{
  _BYTE *v10;
  int v11;
  _BYTE *v12;
  _BYTE *v13;
  int v15;
  uint64_t v18;
  void *v19;
  unsigned int *v20;
  size_t v21;
  unsigned int *v22;
  _BYTE *v23;
  uint64_t v26;
  uint64_t v27;
  std::ios_base *v28;
  int v29;
  int v30;
  signed int v31;
  int v32;
  _BYTE *v33;
  int v34;
  BOOL v35;
  BOOL v36;
  int v37;
  int v38;
  _QWORD **v39;
  _QWORD **v40;
  _QWORD *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  uint64_t *v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  int v60;
  std::ios_base *v61;
  _QWORD *v62;
  _QWORD *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  BOOL v67;
  unint64_t v68;
  uint64_t v69;
  _OWORD *v70;
  __int128 *v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  unint64_t v77;
  _QWORD *v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  unint64_t v85;
  uint64_t v86;
  _OWORD *v87;
  __int128 *v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  const re2::StringPiece *v94;
  _BYTE *v95;
  _BYTE *v96;
  unsigned int *v97;
  int v98;
  unsigned __int8 *v99;
  int v100;
  _BOOL4 v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  BOOL v108;
  unint64_t v109;
  uint64_t v110;
  _OWORD *v111;
  __int128 *v112;
  uint64_t v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  unint64_t v118;
  _QWORD *v119;
  uint64_t *v120;
  uint64_t v121;
  _QWORD **v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  unsigned int v129;
  std::ios_base *v130;
  std::ios_base *v131;
  signed int v132;
  _QWORD **v133;
  _QWORD **v134;
  _QWORD *v135;
  uint64_t v136;
  _DWORD *v137;
  _DWORD *v138;
  uint64_t v139;
  int v140;
  _QWORD *v142;
  _QWORD *v143;
  _QWORD *v144;
  int v146;
  unsigned int v148;
  _BOOL4 v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unsigned int *v154;
  _BYTE *v155;
  __int128 v156;
  void *v157;
  uint64_t v158;
  _QWORD v159[8];
  __int128 v160;
  __int128 v161;
  int v162;
  uint64_t v163;

  if (!*((_DWORD *)this + 2))
    return 0;
  v156 = *(_OWORD *)a3;
  v10 = (_BYTE *)v156;
  if (!(_QWORD)v156)
  {
    v10 = *(_BYTE **)a2;
    *(_QWORD *)&v156 = *(_QWORD *)a2;
    DWORD2(v156) = *((_DWORD *)a2 + 2);
  }
  v11 = DWORD2(v156);
  v12 = &v10[SDWORD2(v156)];
  v13 = (_BYTE *)(*(_QWORD *)a2 + *((int *)a2 + 2));
  if ((unint64_t)v10 > *(_QWORD *)a2 || v12 < v13)
  {
    LogMessage::LogMessage((LogMessage *)&v157, "/Library/Caches/com.apple.xbs/Sources/Suggestions/re2/re2/re2_nfa.cc");
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v158, (uint64_t)"Bad args: context does not contain text ", 40);
    v142 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v142, (uint64_t)"+", 1);
    v143 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v143, (uint64_t)" ", 1);
    v144 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v144, (uint64_t)"+", 1);
    std::ostream::operator<<();
    LogMessage::Flush((LogMessage *)&v157);
    abort();
  }
  v15 = **(unsigned __int8 **)this;
  if (v10 != *(_BYTE **)a2 && v15 != 0)
    return 0;
  if (*(_BYTE *)(*(_QWORD *)this + 1))
  {
    if (v12 != v13)
      return 0;
    a5 = 1;
    *((_BYTE *)this + 17) = 1;
    *((_QWORD *)this + 4) = v12;
  }
  if (v15)
    a4 = 1;
  v146 = a4;
  v18 = MEMORY[0x1E0DE4FE0];
  if (a7 < 0)
  {
    LOBYTE(v157) = 0;
    v26 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v27 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v163 = MEMORY[0x1E0DE4FE0] + 64;
    v158 = v26;
    *(_QWORD *)((char *)&v159[-1] + *(_QWORD *)(v26 - 24)) = v27;
    v28 = (std::ios_base *)((char *)&v159[-1] + *(_QWORD *)(v158 - 24));
    std::ios_base::init(v28, v159);
    v28[1].__vftable = 0;
    v28[1].__fmtflags_ = -1;
    v158 = v18 + 24;
    v163 = v18 + 64;
    std::streambuf::basic_streambuf();
    v159[0] = MEMORY[0x1E0DE4FB8] + 16;
    v160 = 0u;
    v161 = 0u;
    v162 = 16;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v158, (uint64_t)"Bad args: nsubmatch=", 20);
    std::ostream::operator<<();
    LogMessage::~LogMessage(&v157);
    return 0;
  }
  *((_DWORD *)this + 3) = 2 * a7;
  *((_BYTE *)this + 16) = a5;
  if (!a7)
    *((_DWORD *)this + 3) = 2;
  v19 = (void *)operator new[]();
  *((_DWORD *)this + 10) = 0;
  v20 = (unsigned int *)((char *)this + 40);
  *((_QWORD *)this + 17) = v19;
  *((_BYTE *)this + 144) = 0;
  v21 = 8 * *((int *)this + 3);
  *((_QWORD *)this + 3) = v10;
  *((_DWORD *)this + 22) = 0;
  v22 = (unsigned int *)((char *)this + 88);
  bzero(v19, v21);
  v23 = *(_BYTE **)a2;
  if (*(_QWORD *)a2 > (unint64_t)v10)
  {
    v30 = *(v23 - 1);
    v29 = (v30 - 48) < 0xA || (v30 & 0xFFFFFFDF) - 65 < 0x1A || v30 == 95;
  }
  else
  {
    v29 = 0;
    v30 = -1;
  }
  v31 = 0;
  v152 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v153 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v151 = MEMORY[0x1E0DE4FE0] + 64;
  v150 = MEMORY[0x1E0DE4FB8] + 16;
  while (1)
  {
    if (v23 == v10)
      v32 = 5;
    else
      v32 = v23 <= &v10[v11] && *(v23 - 1) == 10;
    v33 = &v10[v11];
    if (v23 == v33)
    {
      v32 |= 0xAu;
      if (v23 >= v33)
        goto LABEL_58;
    }
    else
    {
      if (v23 < v33 && *v23 == 10)
        v32 |= 2u;
      if (v23 >= v33)
      {
LABEL_58:
        v37 = 0;
        goto LABEL_59;
      }
    }
    v34 = *v23;
    v35 = (v34 - 48) >= 0xA && (v34 & 0xFFFFFFDF) - 65 >= 0x1A;
    v36 = !v35 || v34 == 95;
    v37 = v36;
LABEL_59:
    v149 = v37;
    if (v37 == v29)
      v38 = 32;
    else
      v38 = 16;
    v148 = v38 | v32;
    v154 = v22;
    *v22 = 0;
    if (!v31)
    {
LABEL_130:
      *v20 = 0;
LABEL_131:
      *v20 = 0;
      v94 = a2;
      v95 = *(_BYTE **)a2;
      v96 = (_BYTE *)(*(_QWORD *)a2 + *((int *)a2 + 2));
      v97 = v22;
      goto LABEL_132;
    }
    v155 = v23 - 1;
    v39 = (_QWORD **)*((_QWORD *)v20 + 2);
    v40 = v39;
    while (1)
    {
      v41 = *v40;
      if (!*v40)
        goto LABEL_66;
      v42 = *((unsigned __int8 *)this + 16);
      if (*((_BYTE *)this + 16) && *((_BYTE *)this + 144) && **((_QWORD **)this + 17) < *(_QWORD *)v41[1])
        goto LABEL_65;
      v43 = *(int *)v41;
      v44 = *(_QWORD *)(*(_QWORD *)this + 32);
      v45 = (unsigned int *)(v44 + 8 * v43);
      v46 = *v45;
      v47 = *v45 & 7;
      if (v47 == 1)
        break;
      if (v47 == 2)
      {
        if (*((_BYTE *)v45 + 6))
          v58 = (v30 - 65) >= 0x1A;
        else
          v58 = 1;
        v59 = v44 + 8 * v43;
        v60 = v30 + 32;
        if (v58)
          v60 = v30;
        if (v60 >= *(unsigned __int8 *)(v59 + 4) && v60 <= *((unsigned __int8 *)v45 + 5))
          re2::NFA::AddToThreadq((uint64_t)this, v22, v46 >> 3, v148, (uint64_t)v23, v41[1]);
      }
      else if (v47 == 5)
      {
        if (!*((_BYTE *)this + 17) || *((_BYTE **)this + 4) == v155)
        {
          v48 = v41[1];
          v49 = *(_QWORD *)(v48 + 8);
          *(_QWORD *)(v48 + 8) = v155;
          if (v42)
          {
            v50 = (_QWORD *)*((_QWORD *)this + 17);
            v51 = (_QWORD *)v41[1];
            if (*((_BYTE *)this + 144) && *v51 >= *v50 && (*v51 != *v50 || v51[1] <= v50[1]))
              goto LABEL_113;
            v52 = *((unsigned int *)this + 3);
            if ((int)v52 < 1)
              goto LABEL_113;
            if (v52 >= 0xB
              && ((v53 = (8 * v52 - 8) & 0xFFFFFFFFFFFFFFF0, v50 >= (_QWORD *)((char *)v51 + v53 + 16))
               || v51 >= (_QWORD *)((char *)v50 + v53 + 16)))
            {
              v85 = ((v52 - 1) >> 1) + 1;
              v86 = v85 & 0x7FFFFFFFFFFFFFFCLL;
              v87 = v50 + 4;
              v88 = (__int128 *)(v51 + 4);
              v89 = v85 & 0x7FFFFFFFFFFFFFFCLL;
              do
              {
                v91 = *(v88 - 2);
                v90 = *(v88 - 1);
                v93 = *v88;
                v92 = v88[1];
                v88 += 4;
                *(v87 - 2) = v91;
                *(v87 - 1) = v90;
                *v87 = v93;
                v87[1] = v92;
                v87 += 4;
                v89 -= 4;
              }
              while (v89);
              if (v85 == v86)
                goto LABEL_86;
              v54 = 2 * v86;
            }
            else
            {
              v54 = 0;
            }
            v55 = &v50[v54 + 1];
            v56 = &v51[v54 + 1];
            do
            {
              *(v55 - 1) = *(v56 - 1);
              v57 = *v56;
              v56 += 2;
              *v55 = v57;
              v55 += 2;
              v54 += 2;
            }
            while (v54 < v52);
LABEL_86:
            v51 = (_QWORD *)v41[1];
LABEL_113:
            *v51 = v49;
            goto LABEL_124;
          }
          v63 = (_QWORD *)v41[1];
          v64 = *((unsigned int *)this + 3);
          if ((int)v64 < 1)
          {
LABEL_118:
            *v63 = v49;
            *v41 = *((_QWORD *)this + 21);
            *((_QWORD *)this + 21) = v41;
            v40 += 2;
            v81 = *((_QWORD *)v20 + 2);
            v82 = (int)*v20;
            if (v40 != (_QWORD **)(v81 + 16 * v82))
            {
              v83 = v41;
              do
              {
                v84 = *v40;
                if (*v40)
                {
                  *v84 = v83;
                  *((_QWORD *)this + 21) = v84;
                  v81 = *((_QWORD *)v20 + 2);
                  LODWORD(v82) = *v20;
                  v83 = v84;
                }
                v40 += 2;
              }
              while (v40 != (_QWORD **)(v81 + 16 * (int)v82));
            }
            *v20 = 0;
LABEL_124:
            *((_BYTE *)this + 144) = 1;
            if (!v42)
              goto LABEL_131;
            goto LABEL_65;
          }
          v65 = *((_QWORD *)this + 17);
          if (v64 >= 0xB
            && ((v66 = (8 * v64 - 8) & 0xFFFFFFFFFFFFFFF0, v65 < (unint64_t)v63 + v66 + 16)
              ? (v67 = (unint64_t)v63 >= v65 + v66 + 16)
              : (v67 = 1),
                v67))
          {
            v68 = ((v64 - 1) >> 1) + 1;
            v69 = v68 & 0x7FFFFFFFFFFFFFFCLL;
            v70 = (_OWORD *)(v65 + 32);
            v71 = (__int128 *)(v63 + 4);
            v72 = v68 & 0x7FFFFFFFFFFFFFFCLL;
            do
            {
              v74 = *(v71 - 2);
              v73 = *(v71 - 1);
              v76 = *v71;
              v75 = v71[1];
              v71 += 4;
              *(v70 - 2) = v74;
              *(v70 - 1) = v73;
              *v70 = v76;
              v70[1] = v75;
              v70 += 4;
              v72 -= 4;
            }
            while (v72);
            if (v68 == v69)
              goto LABEL_117;
            v77 = 2 * v69;
          }
          else
          {
            v77 = 0;
          }
          v78 = (_QWORD *)(v65 + 8 * v77 + 8);
          v79 = &v63[v77 + 1];
          do
          {
            *(v78 - 1) = *(v79 - 1);
            v80 = *v79;
            v79 += 2;
            *v78 = v80;
            v78 += 2;
            v77 += 2;
          }
          while (v77 < v64);
LABEL_117:
          v63 = (_QWORD *)v41[1];
          goto LABEL_118;
        }
      }
      else
      {
        LOBYTE(v157) = 0;
        v163 = v151;
        v158 = v153;
        *(_QWORD *)((char *)&v159[-1] + *(_QWORD *)(v153 - 24)) = v152;
        v61 = (std::ios_base *)((char *)&v159[-1] + *(_QWORD *)(v158 - 24));
        std::ios_base::init(v61, v159);
        v61[1].__vftable = 0;
        v61[1].__fmtflags_ = -1;
        v158 = MEMORY[0x1E0DE4FE0] + 24;
        v163 = MEMORY[0x1E0DE4FE0] + 64;
        std::streambuf::basic_streambuf();
        v159[0] = v150;
        v160 = 0u;
        v161 = 0u;
        v162 = 16;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v158, (uint64_t)"Unhandled ", 10);
        v62 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)" in step", 8);
        LogMessage::~LogMessage(&v157);
      }
LABEL_65:
      *v41 = *((_QWORD *)this + 21);
      *((_QWORD *)this + 21) = v41;
      v39 = (_QWORD **)*((_QWORD *)v20 + 2);
      v31 = *v20;
LABEL_66:
      v40 += 2;
      if (v40 == &v39[2 * v31])
        goto LABEL_130;
    }
    if (v40 != v39)
      goto LABEL_65;
    if (!*((_BYTE *)this + 16) && (*(_DWORD *)(v44 + (v46 & 0xFFFFFFF8)) & 7) != 2)
    {
      v40 = v39;
      goto LABEL_65;
    }
    v104 = *((unsigned int *)this + 3);
    v97 = v22;
    if ((int)v104 >= 1)
    {
      v105 = *((_QWORD *)this + 17);
      v106 = v41[1];
      if (v104 < 0xF
        || ((v107 = ((8 * v104 - 8) & 0xFFFFFFFFFFFFFFF0) + 16, v105 < v106 + v107)
          ? (v108 = v106 >= v105 + v107)
          : (v108 = 1),
            !v108))
      {
        v118 = 0;
        goto LABEL_164;
      }
      v109 = ((v104 - 1) >> 1) + 1;
      v110 = v109 & 0x7FFFFFFFFFFFFFFCLL;
      v111 = (_OWORD *)(v105 + 32);
      v112 = (__int128 *)(v106 + 32);
      v113 = v109 & 0x7FFFFFFFFFFFFFFCLL;
      do
      {
        v115 = *(v112 - 2);
        v114 = *(v112 - 1);
        v117 = *v112;
        v116 = v112[1];
        v112 += 4;
        *(v111 - 2) = v115;
        *(v111 - 1) = v114;
        *v111 = v117;
        v111[1] = v116;
        v111 += 4;
        v113 -= 4;
      }
      while (v113);
      if (v109 != v110)
      {
        v118 = 2 * v110;
LABEL_164:
        v119 = (_QWORD *)(v105 + 8 * v118 + 8);
        v120 = (uint64_t *)(v106 + 8 * v118 + 8);
        do
        {
          *(v119 - 1) = *(v120 - 1);
          v121 = *v120;
          v120 += 2;
          *v119 = v121;
          v119 += 2;
          v118 += 2;
        }
        while (v118 < v104);
      }
    }
    *v41 = *((_QWORD *)this + 21);
    *((_QWORD *)this + 21) = v41;
    v122 = v39 + 2;
    v123 = *((_QWORD *)v20 + 2);
    v124 = (int)*v20;
    v94 = a2;
    if (v122 != (_QWORD **)(v123 + 16 * v124))
    {
      do
      {
        v127 = *v122;
        if (*v122)
        {
          *v127 = v41;
          *((_QWORD *)this + 21) = v127;
          v123 = *((_QWORD *)v20 + 2);
          LODWORD(v124) = *v20;
          v41 = v127;
        }
        v122 += 2;
      }
      while (v122 != (_QWORD **)(v123 + 16 * (int)v124));
    }
    *v20 = 0;
    *((_BYTE *)this + 144) = 1;
    v125 = (unint64_t)*v45 >> 3;
    v126 = *(_QWORD *)(*(_QWORD *)this + 32);
    if ((*(_DWORD *)(v126 + 8 * v125) & 7) == 2)
      LODWORD(v125) = *(_DWORD *)(v44 + 8 * v43 + 4);
    *v20 = 0;
    v95 = *(_BYTE **)a2;
    v96 = (_BYTE *)(*(_QWORD *)a2 + *((int *)a2 + 2));
    if ((_DWORD)v125)
      break;
LABEL_132:
    if (v23 > v96)
      goto LABEL_188;
    if (!*((_BYTE *)this + 144))
    {
      if (v146)
      {
        if (v23 != v95)
          goto LABEL_177;
      }
      else
      {
        v98 = *((_DWORD *)this + 41);
        if ((v98 & 0x80000000) == 0 && v23 < v96 && !*v97 && v98 != *v23)
        {
          v99 = (unsigned __int8 *)memchr(v23, v98, v96 - v23);
          if (v99)
          {
            v100 = *v99;
            v103 = (v100 - 48) < 0xA || (v100 & 0xFFFFFFDF) - 65 < 0x1A || v100 == 95;
            v149 = v103;
            v96 = v99;
          }
          else
          {
            v149 = 0;
          }
          v148 = re2::Prog::EmptyFlags((uint64_t)&v156, v96);
          v23 = v96;
        }
      }
      **((_QWORD **)this + 17) = v23;
      re2::NFA::AddToThreadq((uint64_t)this, v97, *((_DWORD *)this + 2), v148, (uint64_t)v23, *((_QWORD *)this + 17));
      **((_QWORD **)this + 17) = 0;
    }
LABEL_177:
    v31 = *v97;
    if (!*v97)
      goto LABEL_193;
    if (v23 == (_BYTE *)(*(_QWORD *)v94 + *((int *)v94 + 2)))
      v30 = 0;
    else
      v30 = *v23;
    v29 = v149;
    ++v23;
    v10 = (_BYTE *)v156;
    v11 = DWORD2(v156);
    v22 = v20;
    v20 = v97;
  }
  v128 = MEMORY[0x1E0DE4FE0];
  while (2)
  {
    v129 = *(_DWORD *)(v126 + 8 * (int)v125);
    switch(v129 & 7)
    {
      case 3u:
        *(_QWORD *)(*((_QWORD *)this + 17) + 8 * *(int *)(v126 + 8 * (int)v125 + 4)) = v96;
        v126 = *(_QWORD *)(*(_QWORD *)this + 32);
        goto LABEL_181;
      case 4u:
        if ((*(_DWORD *)(v126 + 8 * (int)v125 + 4) & 0xFFFFFFF5) == 0)
          goto LABEL_181;
        LOBYTE(v157) = 0;
        v163 = v128 + 64;
        v158 = v153;
        *(_QWORD *)((char *)&v159[-1] + *(_QWORD *)(v153 - 24)) = v152;
        v130 = (std::ios_base *)((char *)&v159[-1] + *(_QWORD *)(v158 - 24));
        std::ios_base::init(v130, v159);
        v130[1].__vftable = 0;
        v130[1].__fmtflags_ = -1;
        v158 = v128 + 24;
        v163 = v128 + 64;
        std::streambuf::basic_streambuf();
        v159[0] = MEMORY[0x1E0DE4FB8] + 16;
        v160 = 0u;
        v161 = 0u;
        v162 = 16;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v158, (uint64_t)"Unexpected empty-width in short circuit: ", 41);
        std::ostream::operator<<();
        goto LABEL_187;
      case 5u:
        *(_QWORD *)(*((_QWORD *)this + 17) + 8) = v96;
        *((_BYTE *)this + 144) = 1;
        break;
      case 6u:
LABEL_181:
        LODWORD(v125) = v129 >> 3;
        continue;
      default:
        LOBYTE(v157) = 0;
        v163 = v128 + 64;
        v158 = v153;
        *(_QWORD *)((char *)&v159[-1] + *(_QWORD *)(v153 - 24)) = v152;
        v131 = (std::ios_base *)((char *)&v159[-1] + *(_QWORD *)(v158 - 24));
        std::ios_base::init(v131, v159);
        v131[1].__vftable = 0;
        v131[1].__fmtflags_ = -1;
        v158 = v128 + 24;
        v163 = v128 + 64;
        std::streambuf::basic_streambuf();
        v159[0] = MEMORY[0x1E0DE4FB8] + 16;
        v160 = 0u;
        v161 = 0u;
        v162 = 16;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v158, (uint64_t)"Unexpected opcode in short circuit: ", 36);
        v97 = v154;
        std::ostream::operator<<();
LABEL_187:
        LogMessage::~LogMessage(&v157);
        break;
    }
    break;
  }
LABEL_188:
  v132 = *v97;
  if (*v97)
  {
    v133 = (_QWORD **)*((_QWORD *)v97 + 2);
    v134 = v133;
    do
    {
      v135 = *v134;
      if (*v134)
      {
        *v135 = *((_QWORD *)this + 21);
        *((_QWORD *)this + 21) = v135;
        v133 = (_QWORD **)*((_QWORD *)v97 + 2);
        v132 = *v97;
      }
      v134 += 2;
    }
    while (v134 != &v133[2 * v132]);
  }
LABEL_193:
  if (!*((_BYTE *)this + 144))
    return 0;
  if (a7 >= 1)
  {
    v136 = a7;
    v137 = (_DWORD *)((char *)a6 + 8);
    v138 = (_DWORD *)(*((_QWORD *)this + 17) + 8);
    do
    {
      v139 = *((_QWORD *)v138 - 1);
      v140 = *v138;
      v138 += 4;
      *((_QWORD *)v137 - 1) = v139;
      *v137 = v140 - v139;
      v137 += 4;
      --v136;
    }
    while (v136);
  }
  return 1;
}

void sub_1C36BCAD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1C3BD4828](v1 + 120);
  _Unwind_Resume(a1);
}

uint64_t re2::Prog::SearchNFA(re2::Prog *a1, int *a2, const re2::StringPiece *a3, int a4, int a5, re2::StringPiece *a6, unsigned int a7)
{
  re2::StringPiece *v13;
  int v14;
  re2::StringPiece *v15;
  int v16;
  int v17;
  re2::StringPiece *v18;
  uint64_t v19;
  _QWORD v21[2];
  _OWORD v22[11];

  memset(v22, 0, sizeof(v22));
  re2::NFA::NFA((re2::NFA *)v22, a1);
  if (a7)
    v13 = a6;
  else
    v13 = (re2::StringPiece *)v21;
  if (a7 <= 1)
    v14 = 1;
  else
    v14 = a7;
  if (a5 == 2)
    v15 = v13;
  else
    v15 = a6;
  if (a5 == 2)
    v16 = v14;
  else
    v16 = a7;
  v17 = a5 == 2 || a4 == 1;
  v21[0] = 0;
  v21[1] = 0;
  if (!re2::NFA::Search((re2::NFA *)v22, (const re2::StringPiece *)a2, a3, v17, a5 != 0, v15, v16))
    goto LABEL_21;
  if (a5 != 2)
    goto LABEL_22;
  v18 = (re2::StringPiece *)v21;
  if (a7)
    v18 = a6;
  if (*(_QWORD *)v13 + *((int *)v18 + 2) == *(_QWORD *)a2 + a2[2])
LABEL_22:
    v19 = 1;
  else
LABEL_21:
    v19 = 0;
  re2::NFA::~NFA((re2::NFA *)v22);
  return v19;
}

void sub_1C36BCCBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  re2::NFA::~NFA((re2::NFA *)va);
  _Unwind_Resume(a1);
}

uint64_t re2::chartorune(re2 *this, int *a2, const char *a3)
{
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;

  v3 = *(unsigned __int8 *)a2;
  if (*(char *)a2 < 0)
  {
    v5 = *((unsigned __int8 *)a2 + 1) ^ 0x80;
    if (v5 <= 0x3F)
    {
      if (v3 > 0xDF)
      {
        v6 = *((unsigned __int8 *)a2 + 2) ^ 0x80;
        if (v6 <= 0x3F)
        {
          if (v3 > 0xEF)
          {
            if (v3 <= 0xF7)
            {
              v8 = *((unsigned __int8 *)a2 + 3) ^ 0x80;
              if (v8 <= 0x3F)
              {
                v9 = (((unsigned __int16)(((_WORD)v5 << 6) | ((_WORD)v3 << 12)) | (unsigned __int16)v6) & 0x7FFF) << 6;
                if (v9 >= 0x10000)
                {
                  v3 = v9 | v8;
                  v4 = 4;
                  goto LABEL_16;
                }
              }
            }
          }
          else
          {
            v7 = ((v3 & 0xF) << 12) | (v5 << 6);
            if (v7 >= 0x800)
            {
              v3 = v7 | v6;
              v4 = 3;
              goto LABEL_16;
            }
          }
        }
      }
      else if (v3 >= 0xC0)
      {
        v3 = ((v3 & 0x1F) << 6) | v5;
        if (v3 >= 0x80)
        {
          v4 = 2;
          goto LABEL_16;
        }
      }
    }
    v4 = 1;
    v3 = 65533;
    goto LABEL_16;
  }
  v4 = 1;
LABEL_16:
  *(_DWORD *)this = v3;
  return v4;
}

uint64_t re2::runetochar(re2 *this, char *a2, const int *a3)
{
  unsigned int v3;

  v3 = *(_DWORD *)a2;
  if (*(_DWORD *)a2 > 0x7Fu)
  {
    if (v3 > 0x7FF)
    {
      if (HIWORD(v3) > 0x10u)
        v3 = 65533;
      if (HIWORD(v3))
      {
        *(_BYTE *)this = (v3 >> 18) | 0xF0;
        *((_BYTE *)this + 1) = (v3 >> 12) & 0x3F | 0x80;
        *((_BYTE *)this + 2) = (v3 >> 6) & 0x3F | 0x80;
        *((_BYTE *)this + 3) = v3 & 0x3F | 0x80;
        return 4;
      }
      else
      {
        *(_BYTE *)this = (v3 >> 12) | 0xE0;
        *((_BYTE *)this + 1) = (v3 >> 6) & 0x3F | 0x80;
        *((_BYTE *)this + 2) = v3 & 0x3F | 0x80;
        return 3;
      }
    }
    else
    {
      *(_BYTE *)this = (v3 >> 6) | 0xC0;
      *((_BYTE *)this + 1) = v3 & 0x3F | 0x80;
      return 2;
    }
  }
  else
  {
    *(_BYTE *)this = v3;
    return 1;
  }
}

uint64_t re2::runelen(re2 *this)
{
  int v1;
  unsigned int v2;

  if (((_DWORD)this - 1114112) < 0xFFF00000)
    v1 = 3;
  else
    v1 = 4;
  if (this >= 0x800)
    v2 = v1;
  else
    v2 = 2;
  if (this >= 0x80)
    return v2;
  else
    return 1;
}

BOOL re2::fullrune(re2 *this, const char *a2)
{
  _BOOL8 result;
  unsigned int v3;

  result = 0;
  if ((int)a2 >= 1)
  {
    if ((*(char *)this & 0x80000000) == 0)
      return 1;
    if (a2 >= 2)
    {
      v3 = *(unsigned __int8 *)this;
      if (v3 < 0xE0 || a2 >= 3 && ((_DWORD)a2 != 3 || v3 <= 0xEF))
        return 1;
    }
  }
  return result;
}

uint64_t re2::utflen(re2 *this, const char *a2)
{
  uint64_t i;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  for (i = 0; ; i = (i + 1))
  {
    v4 = *(unsigned __int8 *)this;
    if ((*(char *)this & 0x80000000) == 0)
      break;
    v5 = *((unsigned __int8 *)this + 1) ^ 0x80;
    if (v5 > 0x3F)
      goto LABEL_3;
    if (v4 > 0xDF)
    {
      if (*((char *)this + 2) > -65)
        goto LABEL_3;
      if (v4 > 0xEF)
      {
        if (v4 > 0xF7 || *((char *)this + 3) > -65 || !((((v4 & 7) << 18) | (v5 << 12)) >> 16))
          goto LABEL_3;
        v3 = 4;
      }
      else
      {
        if ((((v4 & 0xF) << 12) | (v5 << 6)) < 0x800)
          goto LABEL_3;
        v3 = 3;
      }
    }
    else
    {
      if (v4 < 0xC0 || ((v4 << 6) & 0x780 | v5) < 0x80)
        goto LABEL_3;
      v3 = 2;
    }
LABEL_4:
    this = (re2 *)((char *)this + v3);
  }
  if (*(_BYTE *)this)
  {
LABEL_3:
    v3 = 1;
    goto LABEL_4;
  }
  return i;
}

char *re2::utfrune(char *this, const char *a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;

  if ((int)a2 < 128)
    return strchr(this, (int)a2);
  while (1)
  {
    v4 = *this;
    if (*this < 0)
    {
      v5 = this[1] ^ 0x80;
      if (v5 <= 0x3F)
      {
        if (v4 > 0xDF)
        {
          v6 = this[2] ^ 0x80;
          if (v6 <= 0x3F)
          {
            if (v4 > 0xEF)
            {
              if (v4 > 0xF7)
                goto LABEL_3;
              v8 = this[3] ^ 0x80;
              if (v8 > 0x3F)
                goto LABEL_3;
              v9 = (((unsigned __int16)(((_WORD)v5 << 6) | ((_WORD)v4 << 12)) | (unsigned __int16)v6) & 0x7FFF) << 6;
              if (v9 < 0x10000)
                goto LABEL_3;
              v2 = v9 | v8;
              v3 = 4;
            }
            else
            {
              v7 = ((v4 & 0xF) << 12) | (v5 << 6);
              if (v7 < 0x800)
                goto LABEL_3;
              v2 = v7 | v6;
              v3 = 3;
            }
LABEL_4:
            if (v2 == (_DWORD)a2)
              return this;
            goto LABEL_5;
          }
        }
        else if (v4 >= 0xC0)
        {
          v2 = ((v4 & 0x1F) << 6) | v5;
          if (v2 >= 0x80)
          {
            v3 = 2;
            goto LABEL_4;
          }
        }
      }
LABEL_3:
      v2 = 65533;
      v3 = 1;
      goto LABEL_4;
    }
    if (!*this)
      return 0;
    if (v4 == (_DWORD)a2)
      return this;
    v3 = 1;
LABEL_5:
    this += v3;
  }
}

id SGSha256HMACData(void *a1, id a2)
{
  void *v2;
  id v3;
  id v4;
  const void *v5;
  size_t v6;
  id v7;
  const void *v8;
  size_t v9;
  __int128 v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v2 = a1;
    v3 = objc_retainAutorelease(a2);
    v4 = v2;
    v5 = (const void *)objc_msgSend(v3, "bytes", (unsigned __int128)0, (unsigned __int128)0);
    v6 = objc_msgSend(v3, "length");

    v7 = objc_retainAutorelease(v4);
    v8 = (const void *)objc_msgSend(v7, "bytes");
    v9 = objc_msgSend(v7, "length");

    CCHmac(2u, v5, v6, v8, v9, &v11);
    a1 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", &v11, 32);
  }
  return a1;
}

id SGSha256ForStrings(void *a1, void *a2)
{
  _OWORD v3[2];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  memset(v3, 0, sizeof(v3));
  hashStrings(a1, a2, (unsigned __int8 *)v3);
  _PASBytesToHex();
  return (id)objc_claimAutoreleasedReturnValue();
}

void hashStrings(void *a1, void *a2, unsigned __int8 *a3)
{
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __CFString *v12;
  const char *CStringPtr;
  CFIndex v14;
  CFIndex v15;
  uint64_t v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  unsigned __int8 *md;
  CC_LONG len[2];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  CC_SHA256_CTX c;
  _OWORD buffer[32];
  _BYTE v30[128];
  uint64_t v31;
  CFRange v32;

  v31 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  if (!objc_msgSend(v5, "count"))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void hashStrings(NSArray<NSString *> *__strong, NSData *__strong, uint8_t *)");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "handleFailureInFunction:file:lineNumber:description:", v19, CFSTR("SGCrypto.m"), 30, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("strings.count > 0"));

  }
  md = a3;
  if (!a3)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void hashStrings(NSArray<NSString *> *__strong, NSData *__strong, uint8_t *)");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "handleFailureInFunction:file:lineNumber:description:", v21, CFSTR("SGCrypto.m"), 31, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("digest != NULL"));

  }
  memset(&c, 0, sizeof(c));
  CC_SHA256_Init(&c);
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v7 = v5;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v24, v30, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v25;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v25 != v10)
          objc_enumerationMutation(v7);
        v12 = *(__CFString **)(*((_QWORD *)&v24 + 1) + 8 * v11);
        CStringPtr = CFStringGetCStringPtr(v12, 0x600u);
        if (CStringPtr)
        {
          CC_SHA256_Update(&c, CStringPtr, -[__CFString length](v12, "length"));
        }
        else
        {
          memset(buffer, 0, sizeof(buffer));
          *(_QWORD *)len = 0;
          v14 = -[__CFString length](v12, "length");
          v15 = 0;
          while (1)
          {
            v32.location = v15;
            v32.length = v14;
            if (!CFStringGetBytes(v12, v32, 0x8000100u, 0, 0, (UInt8 *)buffer, 512, (CFIndex *)len))
              break;
            CC_SHA256_Update(&c, buffer, len[0]);
            v15 += *(_QWORD *)len;
            v14 -= *(_QWORD *)len;
          }
        }
        ++v11;
      }
      while (v11 != v9);
      v16 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v24, v30, 16);
      v9 = v16;
    }
    while (v16);
  }

  if (v6)
  {
    v17 = objc_retainAutorelease(v6);
    CC_SHA256_Update(&c, (const void *)objc_msgSend(v17, "bytes"), objc_msgSend(v17, "length"));
  }
  CC_SHA256_Final(md, &c);

}

id SGSha256ForString(void *a1, void *a2)
{
  objc_class *v3;
  id v4;
  id v5;
  void *v6;
  void *v7;

  v3 = (objc_class *)MEMORY[0x1E0C99D20];
  v4 = a2;
  v5 = a1;
  v6 = (void *)objc_msgSend([v3 alloc], "initWithObjects:", v5, 0);

  SGSha256ForStrings(v6, v4);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

id SGSha256BytesForStrings(void *a1, void *a2)
{
  _OWORD v3[2];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  memset(v3, 0, sizeof(v3));
  hashStrings(a1, a2, (unsigned __int8 *)v3);
  return (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", v3, 32);
}

id SGSha256BytesForString(void *a1, void *a2)
{
  objc_class *v3;
  id v4;
  id v5;
  void *v6;
  void *v7;

  v3 = (objc_class *)MEMORY[0x1E0C99D20];
  v4 = a2;
  v5 = a1;
  v6 = (void *)objc_msgSend([v3 alloc], "initWithObjects:", v5, 0);

  SGSha256BytesForStrings(v6, v4);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

id SGRandomDataOfLength(size_t a1)
{
  id v2;

  v2 = objc_retainAutorelease((id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DF0]), "initWithLength:", a1));
  arc4random_buf((void *)objc_msgSend(v2, "mutableBytes"), a1);
  return v2;
}

id SGSha256Data(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  const void *v6;
  CC_LONG v7;
  id v8;
  CC_SHA256_CTX v10;
  unsigned __int8 md[16];
  __int128 v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (a1)
  {
    memset(&v10, 0, sizeof(v10));
    v4 = a1;
    CC_SHA256_Init(&v10);
    v5 = objc_retainAutorelease(v4);
    v6 = (const void *)objc_msgSend(v5, "bytes", *(_OWORD *)v10.count, *(_OWORD *)&v10.hash[2], *(_OWORD *)&v10.hash[6], *(_OWORD *)&v10.wbuf[2], *(_OWORD *)&v10.wbuf[6], *(_OWORD *)&v10.wbuf[10], *(_QWORD *)&v10.wbuf[14]);
    v7 = objc_msgSend(v5, "length");

    CC_SHA256_Update(&v10, v6, v7);
    if (v3)
    {
      v8 = objc_retainAutorelease(v3);
      CC_SHA256_Update(&v10, (const void *)objc_msgSend(v8, "bytes"), objc_msgSend(v8, "length"));
    }
    *(_OWORD *)md = 0u;
    v12 = 0u;
    CC_SHA256_Final(md, &v10);
    a1 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", md, 32);
  }

  return a1;
}

void sub_1C36C0208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  _Block_object_dispose(&a24, 8);
  _Block_object_dispose(&a28, 8);
  _Unwind_Resume(a1);
}

void sub_1C36C02DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__9534(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__9535(uint64_t a1)
{

}

void sub_1C36C09D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C36C0FD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C36C12B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v17 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_1C36C1894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a15, 8);
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__9607(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__9608(uint64_t a1)
{

}

void sub_1C36C1A88(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;
  _BYTE *v3;
  id v4;

  if (a2 == 1)
  {
    v4 = objc_begin_catch(a1);
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(v2 + 64) + 8) + 40), v4);
    *v3 = 1;
    objc_end_catch();
    JUMPOUT(0x1C36C1A50);
  }
  _Unwind_Resume(a1);
}

id numberedString(void *a1, uint64_t a2)
{
  id v3;
  const char *v4;
  size_t v5;
  char *v6;
  void *v7;
  int v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  void *memptr;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = objc_retainAutorelease(a1);
  v4 = (const char *)objc_msgSend(v3, "UTF8String");
  v5 = strlen(v4) + 21;
  memptr = 0;
  v15 = 0;
  if (v5 > 0x200)
  {
    v9 = malloc_type_posix_memalign(&memptr, 8uLL, v5, 0x100004077774924uLL);
    LOBYTE(v15) = 0;
    if (v9)
    {
      objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99850], CFSTR("malloc failed"), 0);
      v12 = (id)objc_claimAutoreleasedReturnValue();
      objc_exception_throw(v12);
    }
    v6 = (char *)memptr;
  }
  else
  {
    MEMORY[0x1E0C80A78]();
    v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
    bzero(v6, v5);
  }
  snprintf(v6, v5, "%s%lu", v4, a2);
  v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithUTF8String:", v6);
  if (!v7)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString * _Nonnull numberedString(NSString * _Nonnull __strong, NSUInteger)");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", v11, CFSTR("SGSymbolicMappingTransformer.m"), 56, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("numberedString"));

  }
  if (v5 >= 0x201)
    free(v6);

  return v7;
}

id objCStringForCarrierKey(uint64_t a1)
{
  id v2;
  uint64_t v3;

  v2 = objc_alloc(MEMORY[0x1E0CB3940]);
  if (*(_BYTE *)(a1 + 2))
    v3 = 3;
  else
    v3 = 2;
  return (id)objc_msgSend(v2, "initWithBytes:length:encoding:", a1, v3, 1);
}

id readUtf8String(void *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = objc_msgSend(objc_retainAutorelease(a1), "dataOfLength:", a2);
  return (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithBytes:length:encoding:", v3, a2, 4);
}

void sub_1C36C2F64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id readLengthPrefixedString(void *a1)
{
  id v1;
  void *v2;

  v1 = objc_retainAutorelease(a1);
  readUtf8String(v1, bswap32(*(unsigned __int16 *)objc_msgSend(v1, "dataOfLength:", 2)) >> 16);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

size_t _SGTaggedCalloc_impl(objc_class *a1, unint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  if (!is_mul_ok(a2, a3))
    objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99850], CFSTR("malloc failed"), 0, v3, v4));
  return _SGTaggedMalloc_impl(a1, a2 * a3);
}

size_t _SGTaggedMalloc_impl(objc_class *a1, size_t a2)
{
  id Instance;

  Instance = class_createInstance(a1, a2);
  if (!Instance)
    objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99850], CFSTR("malloc failed"), 0));
  return (size_t)Instance + getTagSize();
}

size_t getTagSize()
{
  size_t result;
  objc_class *v1;

  result = getTagSize_size;
  if (getTagSize_size == -1)
  {
    v1 = (objc_class *)objc_opt_class();
    result = class_getInstanceSize(v1);
    getTagSize_size = result;
  }
  return result;
}

void _SGTaggedFree_impl(objc_class *a1, uint64_t a2)
{
  if (a2)
  {
    _SGTaggedTypeAssert_impl(a1, a2);

  }
}

Class _SGTaggedTypeAssert_impl(objc_class *a1, uint64_t a2)
{
  size_t TagSize;
  Class result;
  void *v6;
  void *v7;
  void *v8;

  if (!a2)
  {
    v6 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _SGTaggedTypeAssert_impl(Class, void *)"), CFSTR("SGTaggedMalloc.m"), 58, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("ptr"));
  }
  if ((a2 & 3) != 0)
  {
    v7 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    objc_msgSend(v7, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _SGTaggedTypeAssert_impl(Class, void *)"), CFSTR("SGTaggedMalloc.m"), 59, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("((uintptr_t)ptr & 0b11) == 0"));
  }
  TagSize = getTagSize();
  result = object_getClass((id)(a2 - TagSize));
  if (result != a1)
  {
    v8 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    return (Class)objc_msgSend(v8, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _SGTaggedTypeAssert_impl(Class, void *)"), CFSTR("SGTaggedMalloc.m"), 61, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("object_getClass(obj) == tag"));
  }
  return result;
}

dispatch_data_t _SGTaggedVMAlloc_impl(objc_class *a1, size_t a2, _QWORD *a3)
{
  vm_map_t v6;
  size_t TagSize;
  const void *v8;
  void *v10;
  vm_address_t address;

  address = 0;
  v6 = *MEMORY[0x1E0C83DA0];
  TagSize = getTagSize();
  if (vm_allocate(v6, &address, TagSize + a2, 1))
  {
    v10 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSData *_SGTaggedVMAlloc_impl(Class, size_t, void **)"), CFSTR("SGTaggedMalloc.m"), 68, CFSTR("Could not allocate virtual memory"));
  }
  objc_constructInstance(a1, (void *)address);
  v8 = (const void *)(address + getTagSize());
  address = (vm_address_t)v8;
  if (a3)
    *a3 = v8;
  return dispatch_data_create(v8, a2, 0, (dispatch_block_t)*MEMORY[0x1E0C80CF8]);
}

size_t _SGTaggedMallocAddTag_impl(objc_class *a1, void *a2)
{
  objc_constructInstance(a1, a2);
  return (size_t)a2 + getTagSize();
}

BOOL SGMIMetricsSubmodelsStatsReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SGMIMetricsSubmodelStats *v17;
  uint64_t v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(SGMIMetricsSubmodelStats);
        v18 = 72;
        goto LABEL_34;
      case 2u:
        v17 = objc_alloc_init(SGMIMetricsSubmodelStats);
        v18 = 64;
        goto LABEL_34;
      case 3u:
        v17 = objc_alloc_init(SGMIMetricsSubmodelStats);
        v18 = 96;
        goto LABEL_34;
      case 4u:
        v17 = objc_alloc_init(SGMIMetricsSubmodelStats);
        v18 = 80;
        goto LABEL_34;
      case 5u:
        v17 = objc_alloc_init(SGMIMetricsSubmodelStats);
        v18 = 56;
        goto LABEL_34;
      case 6u:
        v17 = objc_alloc_init(SGMIMetricsSubmodelStats);
        v18 = 24;
        goto LABEL_34;
      case 7u:
        v17 = objc_alloc_init(SGMIMetricsSubmodelStats);
        v18 = 16;
        goto LABEL_34;
      case 8u:
        v17 = objc_alloc_init(SGMIMetricsSubmodelStats);
        v18 = 32;
        goto LABEL_34;
      case 9u:
        v17 = objc_alloc_init(SGMIMetricsSubmodelStats);
        v18 = 8;
        goto LABEL_34;
      case 0xAu:
        v17 = objc_alloc_init(SGMIMetricsSubmodelStats);
        v18 = 104;
        goto LABEL_34;
      case 0xBu:
        v17 = objc_alloc_init(SGMIMetricsSubmodelStats);
        v18 = 88;
        goto LABEL_34;
      case 0xCu:
        v17 = objc_alloc_init(SGMIMetricsSubmodelStats);
        v18 = 40;
        goto LABEL_34;
      case 0xDu:
        v17 = objc_alloc_init(SGMIMetricsSubmodelStats);
        v18 = 48;
LABEL_34:
        objc_storeStrong((id *)(a1 + v18), v17);
        if (PBReaderPlaceMark() && SGMIMetricsSubmodelStatsReadFrom((uint64_t)v17, a2))
        {
          PBReaderRecallMark();

LABEL_37:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_37;
    }
  }
}

uint64_t __Block_byref_object_copy__10350(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__10351(uint64_t a1)
{

}

BOOL doInsert(uint64_t a1, unsigned int a2, char a3)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  _BOOL4 v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  int v10;

  v3 = a1 + 6150 * (a2 & 7);
  v4 = 10;
  v5 = a2;
  LOBYTE(v6) = 1;
  do
  {
    v7 = v5 % 0x1806;
    if (v6)
    {
      v8 = v7 >> 3;
      v9 = *(unsigned __int8 *)(v3 + (v7 >> 3));
      v10 = 1 << (v7 & a3);
      v6 = (v10 & v9) != 0;
    }
    else
    {
      v6 = 0;
      v10 = 1 << ((v5 % 0x1806) & a3);
      v8 = v7 >> 3;
      LOBYTE(v9) = *(_BYTE *)(v3 + (v7 >> 3));
    }
    *(_BYTE *)(v3 + v8) = v9 | v10;
    v5 += a2;
    --v4;
  }
  while (v4);
  return !v6;
}

uint64_t h64(void *a1)
{
  uint64_t v2[3];

  v2[2] = *MEMORY[0x1E0C80C00];
  v2[0] = 0;
  v2[1] = 0;
  SGMurmurhashString(a1, 12345, v2);
  return v2[0];
}

BOOL SGAddSignificantPseudoContactsEmail(void *a1)
{
  id v1;
  SGBloomFilter *v2;
  void *v3;
  SGBloomFilter *v4;
  _BOOL4 v5;

  v1 = a1;
  v2 = [SGBloomFilter alloc];
  +[SGPaths suggestionsDirectory](SGPaths, "suggestionsDirectory");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = -[SGBloomFilter initWithDirectory:name:](v2, "initWithDirectory:name:", v3, CFSTR("significant-pseudo-contacts.bf"));

  v5 = -[SGBloomFilter exists:](v4, "exists:", v1);
  if (!v5)
    -[SGBloomFilter add:](v4, "add:", v1);

  return !v5;
}

void sub_1C36CDB0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  SGRecordMeasurementState((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1C36CDEC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C36CE06C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__11000(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__11001(uint64_t a1)
{

}

void sub_1C36CF154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C36CF21C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C36CF300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C36CF3A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C36D0DE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  _Unwind_Resume(exception_object);
}

void sub_1C36D100C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C36D111C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C36D286C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1C36D2CF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1C36D2E14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C36D3028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C36D30E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C36D31B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C36D3278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C36D3340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__11369(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__11370(uint64_t a1)
{

}

void sub_1C36D4884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  _Block_object_dispose(&a39, 8);
  _Unwind_Resume(a1);
}

void sub_1C36D5F90(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int16 a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  void *v17;
  uint64_t v18;
  id v20;
  void *v21;
  void *v22;
  NSObject *v23;
  int has_internal_diagnostics;
  void *v25;
  void *v26;
  void *v27;
  NSObject *v28;

  if (a2 == 1)
  {
    v20 = objc_begin_catch(exc_buf);
    objc_msgSend(v20, "name");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = (void *)*MEMORY[0x1E0C99778];

    if (v21 == v22)
    {
      sgLogHandle();
      v23 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        a9 = 0;
        _os_log_error_impl(&dword_1C3607000, v23, OS_LOG_TYPE_ERROR, "Corrupted persistent logging store! Removing corrupted store.", (uint8_t *)&a9, 2u);
      }

      has_internal_diagnostics = os_variant_has_internal_diagnostics();
      v25 = *(void **)(v18 + 1568);
      if (has_internal_diagnostics)
      {
        objc_msgSend(v25, "defaultManager");
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "stringByAppendingString:", CFSTR(".old"));
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v26, "moveItemAtPath:toPath:error:", v17, v27, 0);

      }
      else
      {
        objc_msgSend(v25, "defaultManager");
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v26, "removeItemAtPath:error:", v17, 0);
      }

      xpc_transaction_exit_clean();
      objc_end_catch();
      JUMPOUT(0x1C36D5EECLL);
    }
    sgLogHandle();
    v28 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
    {
      a9 = 0;
      _os_log_debug_impl(&dword_1C3607000, v28, OS_LOG_TYPE_DEBUG, "Exception we're not catching", (uint8_t *)&a9, 2u);
    }

    objc_exception_throw(objc_retainAutorelease(v20));
  }
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(exc_buf);
}

void sub_1C36D73A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C36D7C3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_1C36D80B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;

  _Block_object_dispose(&a16, 8);
  _Block_object_dispose(&a20, 8);
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose((const void *)(v33 - 192), 8);
  _Block_object_dispose((const void *)(v33 - 160), 8);
  _Block_object_dispose((const void *)(v33 - 128), 8);
  _Block_object_dispose((const void *)(v33 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1C36D965C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

const char *identifierForActivityId(uint64_t a1)
{
  void *v3;
  void *v4;

  if (a1 < 0xF)
    return off_1E7DAC298[a1];
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "const char *identifierForActivityId(SGXPCActivity)");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("SGXPCActivity.m"), 77, CFSTR("Unknown activity id: %i"), a1);

  return "";
}

id nullHandler()
{
  if (nullHandler_onceToken != -1)
    dispatch_once(&nullHandler_onceToken, &__block_literal_global_111);
  return (id)MEMORY[0x1C3BD5158](nullHandler_instance);
}

void __nullHandler_block_invoke()
{
  uint64_t v0;
  void *v1;

  v0 = objc_msgSend(&__block_literal_global_112, "copy");
  v1 = (void *)nullHandler_instance;
  nullHandler_instance = v0;

}

id arrayFilledWith(void *a1)
{
  id v1;
  uint64_t v2;
  void *v3;

  v1 = a1;
  v2 = 15;
  v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", 15);
  do
  {
    objc_msgSend(v3, "addObject:", v1);
    --v2;
  }
  while (v2);

  return v3;
}

void sub_1C36DB590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id spotlightEscaped(void *a1)
{
  id v1;
  void *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v9;
  void *v10;

  v1 = a1;
  v2 = (void *)MEMORY[0x1C3BD4F6C]();
  v3 = objc_alloc(MEMORY[0x1E0CB3940]);
  v4 = (void *)MEMORY[0x1E0CB36D8];
  _PASRepairString();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "dataWithJSONObject:options:error:", v5, 4, 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void *)objc_msgSend(v3, "initWithData:encoding:", v6, 4);

  objc_autoreleasePoolPop(v2);
  if (!v7)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString * _Nonnull spotlightEscaped(NSString * _Nonnull __strong)");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "handleFailureInFunction:file:lineNumber:description:", v10, CFSTR("SGEnrichmentWritebackAdapter.m"), 44, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("escaped"));

  }
  return v7;
}

BOOL SGMIMetricsSubmodelStatsReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  BOOL v23;
  int *v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 28) |= 1u;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            {
              v24 = &OBJC_IVAR___SGMIMetricsSubmodelStats__ageOfTheSubmodelInDays;
              goto LABEL_61;
            }
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              break;
            v17 += 7;
            v23 = v18++ > 8;
            if (v23)
            {
              LODWORD(v19) = 0;
              v24 = &OBJC_IVAR___SGMIMetricsSubmodelStats__ageOfTheSubmodelInDays;
              goto LABEL_64;
            }
          }
          v24 = &OBJC_IVAR___SGMIMetricsSubmodelStats__ageOfTheSubmodelInDays;
          goto LABEL_62;
        case 2u:
          v25 = 0;
          v26 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 28) |= 0x10u;
          while (2)
          {
            v27 = *v3;
            v28 = *(_QWORD *)(a2 + v27);
            if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            {
              v24 = &OBJC_IVAR___SGMIMetricsSubmodelStats__nbHighlyDiscriminantTokensForSaliency;
              goto LABEL_61;
            }
            v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
            *(_QWORD *)(a2 + v27) = v28 + 1;
            v19 |= (unint64_t)(v29 & 0x7F) << v25;
            if (v29 < 0)
            {
              v25 += 7;
              v23 = v26++ > 8;
              if (v23)
              {
                LODWORD(v19) = 0;
                v24 = &OBJC_IVAR___SGMIMetricsSubmodelStats__nbHighlyDiscriminantTokensForSaliency;
                goto LABEL_64;
              }
              continue;
            }
            break;
          }
          v24 = &OBJC_IVAR___SGMIMetricsSubmodelStats__nbHighlyDiscriminantTokensForSaliency;
          goto LABEL_62;
        case 3u:
          v30 = 0;
          v31 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 28) |= 8u;
          while (2)
          {
            v32 = *v3;
            v33 = *(_QWORD *)(a2 + v32);
            if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
            {
              v24 = &OBJC_IVAR___SGMIMetricsSubmodelStats__nbHighlyDiscriminantTokensForIgnorability;
              goto LABEL_61;
            }
            v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
            *(_QWORD *)(a2 + v32) = v33 + 1;
            v19 |= (unint64_t)(v34 & 0x7F) << v30;
            if (v34 < 0)
            {
              v30 += 7;
              v23 = v31++ > 8;
              if (v23)
              {
                LODWORD(v19) = 0;
                v24 = &OBJC_IVAR___SGMIMetricsSubmodelStats__nbHighlyDiscriminantTokensForIgnorability;
                goto LABEL_64;
              }
              continue;
            }
            break;
          }
          v24 = &OBJC_IVAR___SGMIMetricsSubmodelStats__nbHighlyDiscriminantTokensForIgnorability;
          goto LABEL_62;
        case 4u:
          v35 = 0;
          v36 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 28) |= 4u;
          while (2)
          {
            v37 = *v3;
            v38 = *(_QWORD *)(a2 + v37);
            if (v38 == -1 || v38 >= *(_QWORD *)(a2 + *v4))
            {
              v24 = &OBJC_IVAR___SGMIMetricsSubmodelStats__nbExtremelyDiscriminantTokensForSaliency;
              goto LABEL_61;
            }
            v39 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v38);
            *(_QWORD *)(a2 + v37) = v38 + 1;
            v19 |= (unint64_t)(v39 & 0x7F) << v35;
            if (v39 < 0)
            {
              v35 += 7;
              v23 = v36++ > 8;
              if (v23)
              {
                LODWORD(v19) = 0;
                v24 = &OBJC_IVAR___SGMIMetricsSubmodelStats__nbExtremelyDiscriminantTokensForSaliency;
                goto LABEL_64;
              }
              continue;
            }
            break;
          }
          v24 = &OBJC_IVAR___SGMIMetricsSubmodelStats__nbExtremelyDiscriminantTokensForSaliency;
          goto LABEL_62;
        case 5u:
          v40 = 0;
          v41 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 28) |= 2u;
          break;
        default:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
          return 0;
      }
      while (1)
      {
        v42 = *v3;
        v43 = *(_QWORD *)(a2 + v42);
        if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v4))
          break;
        v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
        *(_QWORD *)(a2 + v42) = v43 + 1;
        v19 |= (unint64_t)(v44 & 0x7F) << v40;
        if ((v44 & 0x80) == 0)
        {
          v24 = &OBJC_IVAR___SGMIMetricsSubmodelStats__nbExtremelyDiscriminantTokensForIgnorability;
          goto LABEL_62;
        }
        v40 += 7;
        v23 = v41++ > 8;
        if (v23)
        {
          LODWORD(v19) = 0;
          v24 = &OBJC_IVAR___SGMIMetricsSubmodelStats__nbExtremelyDiscriminantTokensForIgnorability;
          goto LABEL_64;
        }
      }
      v24 = &OBJC_IVAR___SGMIMetricsSubmodelStats__nbExtremelyDiscriminantTokensForIgnorability;
LABEL_61:
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_62:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v19) = 0;
LABEL_64:
      *(_DWORD *)(a1 + *v24) = v19;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1C36E5500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C36E5750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C36E59D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C36E6818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *a10, id *a11, id *location)
{
  id *v12;
  id *v13;
  id *v14;
  id *v15;
  id *v16;
  uint64_t v17;

  objc_destroyWeak(v13);
  objc_destroyWeak(v12);
  objc_destroyWeak(v16);
  objc_destroyWeak(v15);
  objc_destroyWeak(v14);
  objc_destroyWeak(location);
  objc_destroyWeak(a11);
  objc_destroyWeak(a10);
  _Block_object_dispose((const void *)(v17 - 200), 8);
  _Block_object_dispose((const void *)(v17 - 168), 8);
  objc_destroyWeak((id *)(v17 - 136));
  _Unwind_Resume(a1);
}

void sub_1C36E6BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C36E72B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a34, 8);
  _Unwind_Resume(a1);
}

void sub_1C36E8DA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C36E9894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C36EA2B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__12386(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__12387(uint64_t a1)
{

}

void SGJSGarbageCollect(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  void *v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v2 = getJSGarbageCollectSymbolLoc_ptr;
  v9 = getJSGarbageCollectSymbolLoc_ptr;
  if (!getJSGarbageCollectSymbolLoc_ptr)
  {
    v3 = JavaScriptCoreLibrary();
    v2 = dlsym(v3, "JSGarbageCollect");
    v7[3] = (uint64_t)v2;
    getJSGarbageCollectSymbolLoc_ptr = v2;
  }
  _Block_object_dispose(&v6, 8);
  if (v2)
  {
    ((void (*)(uint64_t))v2)(a1);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void SGJSGarbageCollect(JSContextRef)");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("SGReverseTemplateJS.m"), 56, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_1C36EB27C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *JavaScriptCoreLibrary()
{
  void *v0;
  void *v2;
  void *v3;

  if (!JavaScriptCoreLibraryCore_frameworkLibrary)
    JavaScriptCoreLibraryCore_frameworkLibrary = _sl_dlopen();
  v0 = (void *)JavaScriptCoreLibraryCore_frameworkLibrary;
  if (!JavaScriptCoreLibraryCore_frameworkLibrary)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *JavaScriptCoreLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("SGReverseTemplateJS.m"), 45, CFSTR("%s"), 0);

    __break(1u);
    free(v3);
  }
  return v0;
}

id getJSValueClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getJSValueClass_softClass;
  v7 = getJSValueClass_softClass;
  if (!getJSValueClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getJSValueClass_block_invoke;
    v3[3] = &unk_1E7DB7220;
    v3[4] = &v4;
    __getJSValueClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1C36EC954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getJSValueClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  JavaScriptCoreLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("JSValue");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getJSValueClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getJSValueClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("SGReverseTemplateJS.m"), 47, CFSTR("Unable to find class %s"), "JSValue");

    __break(1u);
  }
}

void typedArrayDeallocatorRelease(int a1, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

id getJSContextClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getJSContextClass_softClass;
  v7 = getJSContextClass_softClass;
  if (!getJSContextClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getJSContextClass_block_invoke;
    v3[3] = &unk_1E7DB7220;
    v3[4] = &v4;
    __getJSContextClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1C36ED664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getJSContextClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  JavaScriptCoreLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("JSContext");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getJSContextClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getJSContextClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("SGReverseTemplateJS.m"), 46, CFSTR("Unable to find class %s"), "JSContext");

    __break(1u);
  }
}

void __getJSVirtualMachineClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  JavaScriptCoreLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("JSVirtualMachine");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getJSVirtualMachineClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getJSVirtualMachineClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("SGReverseTemplateJS.m"), 48, CFSTR("Unable to find class %s"), "JSVirtualMachine");

    __break(1u);
  }
}

void sub_1C36EE408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C36EE4D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C36EE718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C36EED4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C36EEF2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C36EF0A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C36EF21C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C36EF394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C36EF4E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__12885(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__12886(uint64_t a1)
{

}

void sub_1C36F0058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getPKPassLibraryClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getPKPassLibraryClass_softClass;
  v7 = getPKPassLibraryClass_softClass;
  if (!getPKPassLibraryClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getPKPassLibraryClass_block_invoke;
    v3[3] = &unk_1E7DB7220;
    v3[4] = &v4;
    __getPKPassLibraryClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1C36F0174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getPKPassLibraryClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  PassKitLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("PKPassLibrary");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getPKPassLibraryClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getPKPassLibraryClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("SGWalletPassAttachmentDissector.m"), 31, CFSTR("Unable to find class %s"), "PKPassLibrary");

    __break(1u);
  }
}

void *PassKitLibrary()
{
  void *v0;
  void *v2;
  void *v3;

  if (!PassKitLibraryCore_frameworkLibrary)
    PassKitLibraryCore_frameworkLibrary = _sl_dlopen();
  v0 = (void *)PassKitLibraryCore_frameworkLibrary;
  if (!PassKitLibraryCore_frameworkLibrary)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *PassKitLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("SGWalletPassAttachmentDissector.m"), 29, CFSTR("%s"), 0);

    __break(1u);
    free(v3);
  }
  return v0;
}

void __getPKAddPassesViewControllerClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  PassKitLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("PKAddPassesViewController");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getPKAddPassesViewControllerClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getPKAddPassesViewControllerClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("SGWalletPassAttachmentDissector.m"), 32, CFSTR("Unable to find class %s"), "PKAddPassesViewController");

    __break(1u);
  }
}

void sub_1C36F1EF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a33, 8);
  _Unwind_Resume(a1);
}

void __getPKPassClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  PassKitLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("PKPass");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getPKPassClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getPKPassClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("SGWalletPassAttachmentDissector.m"), 30, CFSTR("Unable to find class %s"), "PKPass");

    __break(1u);
  }
}

const __CFString *walletPassStateDescription(int a1)
{
  const __CFString *result;
  NSObject *v3;
  _DWORD v4[2];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  result = CFSTR("SGRealtimeWalletPassStateNew");
  switch(a1)
  {
    case 0:
      sgLogHandle();
      v3 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      {
        v4[0] = 67109120;
        v4[1] = 0;
        _os_log_error_impl(&dword_1C3607000, v3, OS_LOG_TYPE_ERROR, "walletPassStateDescription: Error in returning string for wallet pass state: %u", (uint8_t *)v4, 8u);
      }

      result = CFSTR("SGRealtimeWalletPassUnknown");
      break;
    case 2:
      result = CFSTR("SGRealtimeWalletPassStateUpdate");
      break;
    case 3:
      result = CFSTR("SGRealtimeWalletPassStateDuplicate");
      break;
    case 4:
      result = CFSTR("SGRealtimeWalletPassStateCancellation");
      break;
    default:
      return result;
  }
  return result;
}

void getPKPassSemanticDateKeyOriginalDepartureDate()
{
  id *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v0 = (id *)getPKPassSemanticDateKeyOriginalDepartureDateSymbolLoc_ptr;
  v8 = getPKPassSemanticDateKeyOriginalDepartureDateSymbolLoc_ptr;
  if (!getPKPassSemanticDateKeyOriginalDepartureDateSymbolLoc_ptr)
  {
    v1 = PassKitLibrary();
    v0 = (id *)dlsym(v1, "PKPassSemanticDateKeyOriginalDepartureDate");
    v6[3] = (uint64_t)v0;
    getPKPassSemanticDateKeyOriginalDepartureDateSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    v2 = *v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "PKPassSemanticStringKey getPKPassSemanticDateKeyOriginalDepartureDate(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("SGWalletPassAttachmentDissector.m"), 43, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_1C36F22A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getPKPassSemanticStringKeyEventType()
{
  id *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v0 = (id *)getPKPassSemanticStringKeyEventTypeSymbolLoc_ptr;
  v8 = getPKPassSemanticStringKeyEventTypeSymbolLoc_ptr;
  if (!getPKPassSemanticStringKeyEventTypeSymbolLoc_ptr)
  {
    v1 = PassKitLibrary();
    v0 = (id *)dlsym(v1, "PKPassSemanticStringKeyEventType");
    v6[3] = (uint64_t)v0;
    getPKPassSemanticStringKeyEventTypeSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    v2 = *v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "PKPassSemanticStringKey getPKPassSemanticStringKeyEventType(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("SGWalletPassAttachmentDissector.m"), 33, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_1C36F2398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getPKPassSemanticStringKeyEventName()
{
  id *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v0 = (id *)getPKPassSemanticStringKeyEventNameSymbolLoc_ptr;
  v8 = getPKPassSemanticStringKeyEventNameSymbolLoc_ptr;
  if (!getPKPassSemanticStringKeyEventNameSymbolLoc_ptr)
  {
    v1 = PassKitLibrary();
    v0 = (id *)dlsym(v1, "PKPassSemanticStringKeyEventName");
    v6[3] = (uint64_t)v0;
    getPKPassSemanticStringKeyEventNameSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    v2 = *v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "PKPassSemanticStringKey getPKPassSemanticStringKeyEventName(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("SGWalletPassAttachmentDissector.m"), 34, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_1C36F2490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getPKPassSemanticDateKeyEventStartDate()
{
  id *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v0 = (id *)getPKPassSemanticDateKeyEventStartDateSymbolLoc_ptr;
  v8 = getPKPassSemanticDateKeyEventStartDateSymbolLoc_ptr;
  if (!getPKPassSemanticDateKeyEventStartDateSymbolLoc_ptr)
  {
    v1 = PassKitLibrary();
    v0 = (id *)dlsym(v1, "PKPassSemanticDateKeyEventStartDate");
    v6[3] = (uint64_t)v0;
    getPKPassSemanticDateKeyEventStartDateSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    v2 = *v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "PKPassSemanticStringKey getPKPassSemanticDateKeyEventStartDate(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("SGWalletPassAttachmentDissector.m"), 35, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_1C36F2588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getPKPassSemanticDateKeyEventEndDate()
{
  id *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v0 = (id *)getPKPassSemanticDateKeyEventEndDateSymbolLoc_ptr;
  v8 = getPKPassSemanticDateKeyEventEndDateSymbolLoc_ptr;
  if (!getPKPassSemanticDateKeyEventEndDateSymbolLoc_ptr)
  {
    v1 = PassKitLibrary();
    v0 = (id *)dlsym(v1, "PKPassSemanticDateKeyEventEndDate");
    v6[3] = (uint64_t)v0;
    getPKPassSemanticDateKeyEventEndDateSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    v2 = *v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "PKPassSemanticStringKey getPKPassSemanticDateKeyEventEndDate(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("SGWalletPassAttachmentDissector.m"), 36, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_1C36F2680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getPKPassSemanticNumberKeySilenceRequested()
{
  id *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v0 = (id *)getPKPassSemanticNumberKeySilenceRequestedSymbolLoc_ptr;
  v8 = getPKPassSemanticNumberKeySilenceRequestedSymbolLoc_ptr;
  if (!getPKPassSemanticNumberKeySilenceRequestedSymbolLoc_ptr)
  {
    v1 = PassKitLibrary();
    v0 = (id *)dlsym(v1, "PKPassSemanticNumberKeySilenceRequested");
    v6[3] = (uint64_t)v0;
    getPKPassSemanticNumberKeySilenceRequestedSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    v2 = *v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "PKPassSemanticStringKey getPKPassSemanticNumberKeySilenceRequested(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("SGWalletPassAttachmentDissector.m"), 37, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_1C36F2778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getPKPassSemanticStringKeyVenueName()
{
  id *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v0 = (id *)getPKPassSemanticStringKeyVenueNameSymbolLoc_ptr;
  v8 = getPKPassSemanticStringKeyVenueNameSymbolLoc_ptr;
  if (!getPKPassSemanticStringKeyVenueNameSymbolLoc_ptr)
  {
    v1 = PassKitLibrary();
    v0 = (id *)dlsym(v1, "PKPassSemanticStringKeyVenueName");
    v6[3] = (uint64_t)v0;
    getPKPassSemanticStringKeyVenueNameSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    v2 = *v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "PKPassSemanticStringKey getPKPassSemanticStringKeyVenueName(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("SGWalletPassAttachmentDissector.m"), 38, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_1C36F2870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getPKPassSemanticStringKeyVenueRoom()
{
  id *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v0 = (id *)getPKPassSemanticStringKeyVenueRoomSymbolLoc_ptr;
  v8 = getPKPassSemanticStringKeyVenueRoomSymbolLoc_ptr;
  if (!getPKPassSemanticStringKeyVenueRoomSymbolLoc_ptr)
  {
    v1 = PassKitLibrary();
    v0 = (id *)dlsym(v1, "PKPassSemanticStringKeyVenueRoom");
    v6[3] = (uint64_t)v0;
    getPKPassSemanticStringKeyVenueRoomSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    v2 = *v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "PKPassSemanticStringKey getPKPassSemanticStringKeyVenueRoom(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("SGWalletPassAttachmentDissector.m"), 39, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_1C36F2968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getPKPassSemanticStringKeyVenueEntrance()
{
  id *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v0 = (id *)getPKPassSemanticStringKeyVenueEntranceSymbolLoc_ptr;
  v8 = getPKPassSemanticStringKeyVenueEntranceSymbolLoc_ptr;
  if (!getPKPassSemanticStringKeyVenueEntranceSymbolLoc_ptr)
  {
    v1 = PassKitLibrary();
    v0 = (id *)dlsym(v1, "PKPassSemanticStringKeyVenueEntrance");
    v6[3] = (uint64_t)v0;
    getPKPassSemanticStringKeyVenueEntranceSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    v2 = *v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "PKPassSemanticStringKey getPKPassSemanticStringKeyVenueEntrance(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("SGWalletPassAttachmentDissector.m"), 40, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_1C36F2A60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getPKPassSemanticStringKeyVenuePhoneNumber()
{
  id *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v0 = (id *)getPKPassSemanticStringKeyVenuePhoneNumberSymbolLoc_ptr;
  v8 = getPKPassSemanticStringKeyVenuePhoneNumberSymbolLoc_ptr;
  if (!getPKPassSemanticStringKeyVenuePhoneNumberSymbolLoc_ptr)
  {
    v1 = PassKitLibrary();
    v0 = (id *)dlsym(v1, "PKPassSemanticStringKeyVenuePhoneNumber");
    v6[3] = (uint64_t)v0;
    getPKPassSemanticStringKeyVenuePhoneNumberSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    v2 = *v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "PKPassSemanticStringKey getPKPassSemanticStringKeyVenuePhoneNumber(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("SGWalletPassAttachmentDissector.m"), 41, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_1C36F2B58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getPKPassSemanticLocationKeyVenueLocation()
{
  id *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v0 = (id *)getPKPassSemanticLocationKeyVenueLocationSymbolLoc_ptr;
  v8 = getPKPassSemanticLocationKeyVenueLocationSymbolLoc_ptr;
  if (!getPKPassSemanticLocationKeyVenueLocationSymbolLoc_ptr)
  {
    v1 = PassKitLibrary();
    v0 = (id *)dlsym(v1, "PKPassSemanticLocationKeyVenueLocation");
    v6[3] = (uint64_t)v0;
    getPKPassSemanticLocationKeyVenueLocationSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    v2 = *v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "PKPassSemanticStringKey getPKPassSemanticLocationKeyVenueLocation(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("SGWalletPassAttachmentDissector.m"), 42, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_1C36F2C50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getPKPassSemanticDateKeyOriginalArrivalDate()
{
  id *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v0 = (id *)getPKPassSemanticDateKeyOriginalArrivalDateSymbolLoc_ptr;
  v8 = getPKPassSemanticDateKeyOriginalArrivalDateSymbolLoc_ptr;
  if (!getPKPassSemanticDateKeyOriginalArrivalDateSymbolLoc_ptr)
  {
    v1 = PassKitLibrary();
    v0 = (id *)dlsym(v1, "PKPassSemanticDateKeyOriginalArrivalDate");
    v6[3] = (uint64_t)v0;
    getPKPassSemanticDateKeyOriginalArrivalDateSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    v2 = *v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "PKPassSemanticStringKey getPKPassSemanticDateKeyOriginalArrivalDate(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("SGWalletPassAttachmentDissector.m"), 44, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_1C36F2D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getPKPassSemanticStringKeyDepartureLocationDescription()
{
  id *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v0 = (id *)getPKPassSemanticStringKeyDepartureLocationDescriptionSymbolLoc_ptr;
  v8 = getPKPassSemanticStringKeyDepartureLocationDescriptionSymbolLoc_ptr;
  if (!getPKPassSemanticStringKeyDepartureLocationDescriptionSymbolLoc_ptr)
  {
    v1 = PassKitLibrary();
    v0 = (id *)dlsym(v1, "PKPassSemanticStringKeyDepartureLocationDescription");
    v6[3] = (uint64_t)v0;
    getPKPassSemanticStringKeyDepartureLocationDescriptionSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    v2 = *v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "PKPassSemanticStringKey getPKPassSemanticStringKeyDepartureLocationDescription(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("SGWalletPassAttachmentDissector.m"), 45, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_1C36F2E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getPKPassSemanticLocationKeyDepartureLocation()
{
  id *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v0 = (id *)getPKPassSemanticLocationKeyDepartureLocationSymbolLoc_ptr;
  v8 = getPKPassSemanticLocationKeyDepartureLocationSymbolLoc_ptr;
  if (!getPKPassSemanticLocationKeyDepartureLocationSymbolLoc_ptr)
  {
    v1 = PassKitLibrary();
    v0 = (id *)dlsym(v1, "PKPassSemanticLocationKeyDepartureLocation");
    v6[3] = (uint64_t)v0;
    getPKPassSemanticLocationKeyDepartureLocationSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    v2 = *v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "PKPassSemanticStringKey getPKPassSemanticLocationKeyDepartureLocation(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("SGWalletPassAttachmentDissector.m"), 53, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_1C36F2F38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getPKPassSemanticLocationKeyDestinationLocation()
{
  id *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v0 = (id *)getPKPassSemanticLocationKeyDestinationLocationSymbolLoc_ptr;
  v8 = getPKPassSemanticLocationKeyDestinationLocationSymbolLoc_ptr;
  if (!getPKPassSemanticLocationKeyDestinationLocationSymbolLoc_ptr)
  {
    v1 = PassKitLibrary();
    v0 = (id *)dlsym(v1, "PKPassSemanticLocationKeyDestinationLocation");
    v6[3] = (uint64_t)v0;
    getPKPassSemanticLocationKeyDestinationLocationSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    v2 = *v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "PKPassSemanticStringKey getPKPassSemanticLocationKeyDestinationLocation(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("SGWalletPassAttachmentDissector.m"), 46, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_1C36F3030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getPKPassSemanticStringKeyDestinationLocationDescription()
{
  id *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v0 = (id *)getPKPassSemanticStringKeyDestinationLocationDescriptionSymbolLoc_ptr;
  v8 = getPKPassSemanticStringKeyDestinationLocationDescriptionSymbolLoc_ptr;
  if (!getPKPassSemanticStringKeyDestinationLocationDescriptionSymbolLoc_ptr)
  {
    v1 = PassKitLibrary();
    v0 = (id *)dlsym(v1, "PKPassSemanticStringKeyDestinationLocationDescription");
    v6[3] = (uint64_t)v0;
    getPKPassSemanticStringKeyDestinationLocationDescriptionSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    v2 = *v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "PKPassSemanticStringKey getPKPassSemanticStringKeyDestinationLocationDescription(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("SGWalletPassAttachmentDissector.m"), 47, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_1C36F3128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getPKPassSemanticStringKeyFlightCode()
{
  id *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v0 = (id *)getPKPassSemanticStringKeyFlightCodeSymbolLoc_ptr;
  v8 = getPKPassSemanticStringKeyFlightCodeSymbolLoc_ptr;
  if (!getPKPassSemanticStringKeyFlightCodeSymbolLoc_ptr)
  {
    v1 = PassKitLibrary();
    v0 = (id *)dlsym(v1, "PKPassSemanticStringKeyFlightCode");
    v6[3] = (uint64_t)v0;
    getPKPassSemanticStringKeyFlightCodeSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    v2 = *v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "PKPassSemanticStringKey getPKPassSemanticStringKeyFlightCode(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("SGWalletPassAttachmentDissector.m"), 48, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_1C36F3220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getPKPassSemanticNumberKeyFlightNumber()
{
  id *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v0 = (id *)getPKPassSemanticNumberKeyFlightNumberSymbolLoc_ptr;
  v8 = getPKPassSemanticNumberKeyFlightNumberSymbolLoc_ptr;
  if (!getPKPassSemanticNumberKeyFlightNumberSymbolLoc_ptr)
  {
    v1 = PassKitLibrary();
    v0 = (id *)dlsym(v1, "PKPassSemanticNumberKeyFlightNumber");
    v6[3] = (uint64_t)v0;
    getPKPassSemanticNumberKeyFlightNumberSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    v2 = *v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "PKPassSemanticStringKey getPKPassSemanticNumberKeyFlightNumber(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("SGWalletPassAttachmentDissector.m"), 49, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_1C36F3318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getPKPassSemanticStringKeyAirlineCode()
{
  id *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v0 = (id *)getPKPassSemanticStringKeyAirlineCodeSymbolLoc_ptr;
  v8 = getPKPassSemanticStringKeyAirlineCodeSymbolLoc_ptr;
  if (!getPKPassSemanticStringKeyAirlineCodeSymbolLoc_ptr)
  {
    v1 = PassKitLibrary();
    v0 = (id *)dlsym(v1, "PKPassSemanticStringKeyAirlineCode");
    v6[3] = (uint64_t)v0;
    getPKPassSemanticStringKeyAirlineCodeSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    v2 = *v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "PKPassSemanticStringKey getPKPassSemanticStringKeyAirlineCode(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("SGWalletPassAttachmentDissector.m"), 50, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_1C36F3410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getPKPassSemanticStringKeyDepartureAirportCode()
{
  id *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v0 = (id *)getPKPassSemanticStringKeyDepartureAirportCodeSymbolLoc_ptr;
  v8 = getPKPassSemanticStringKeyDepartureAirportCodeSymbolLoc_ptr;
  if (!getPKPassSemanticStringKeyDepartureAirportCodeSymbolLoc_ptr)
  {
    v1 = PassKitLibrary();
    v0 = (id *)dlsym(v1, "PKPassSemanticStringKeyDepartureAirportCode");
    v6[3] = (uint64_t)v0;
    getPKPassSemanticStringKeyDepartureAirportCodeSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    v2 = *v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "PKPassSemanticStringKey getPKPassSemanticStringKeyDepartureAirportCode(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("SGWalletPassAttachmentDissector.m"), 51, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_1C36F3508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getPKPassSemanticStringKeyDestinationAirportCode()
{
  id *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v0 = (id *)getPKPassSemanticStringKeyDestinationAirportCodeSymbolLoc_ptr;
  v8 = getPKPassSemanticStringKeyDestinationAirportCodeSymbolLoc_ptr;
  if (!getPKPassSemanticStringKeyDestinationAirportCodeSymbolLoc_ptr)
  {
    v1 = PassKitLibrary();
    v0 = (id *)dlsym(v1, "PKPassSemanticStringKeyDestinationAirportCode");
    v6[3] = (uint64_t)v0;
    getPKPassSemanticStringKeyDestinationAirportCodeSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    v2 = *v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "PKPassSemanticStringKey getPKPassSemanticStringKeyDestinationAirportCode(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("SGWalletPassAttachmentDissector.m"), 52, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_1C36F3600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t stateForWalletPassStateString(void *a1)
{
  id v1;
  uint64_t v2;
  NSObject *v3;
  int v5;
  id v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("SGRealtimeWalletPassStateNew")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("SGRealtimeWalletPassStateUpdate")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("SGRealtimeWalletPassStateCancellation")) & 1) != 0)
  {
    v2 = 4;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("SGRealtimeWalletPassStateDuplicate")) & 1) != 0)
  {
    v2 = 3;
  }
  else
  {
    sgLogHandle();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v5 = 138412290;
      v6 = v1;
      _os_log_error_impl(&dword_1C3607000, v3, OS_LOG_TYPE_ERROR, "stateForWalletPassStateString: Error in returning wallet pass state for string: %@", (uint8_t *)&v5, 0xCu);
    }

    v2 = 0;
  }

  return v2;
}

void sub_1C36F3C10(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_1C36F3C30(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x1C36F3BD8);
}

void sub_1C36F4CDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1C36F4E90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C36F4FF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1C36F50C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1C36F5320(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1C36F5930(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__13207(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__13208(uint64_t a1)
{

}

__CFString *qmarksSeparatedByCommas(unint64_t a1)
{
  unint64_t v1;
  __CFString *v2;
  void *v3;
  void *v4;

  if (a1)
  {
    v1 = a1 - 129;
    if (a1 > 0x81)
    {
      v3 = (void *)MEMORY[0x1C3BD4F6C]();
      qmarksSeparatedByCommas(129);
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v2 = (__CFString *)objc_msgSend(v4, "mutableCopy");

      do
      {
        -[__CFString appendString:](v2, "appendString:", CFSTR(",?"));
        --v1;
      }
      while (v1);
      objc_autoreleasePoolPop(v3);
    }
    else
    {
      v2 = (__CFString *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithBytesNoCopy:length:encoding:freeWhenDone:", "?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?", 2 * a1 - 1, 1, 0);
    }
  }
  else
  {
    v2 = &stru_1E7DB83A8;
  }
  return v2;
}

void hasInhumanTag(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  char *v5;
  _BOOL4 v6;
  void *v7;
  void *v8;

  if (a2 != 1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void hasInhumanTag(sqlite3_context *, int, sqlite3_value **)");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "handleFailureInFunction:file:lineNumber:description:", v8, CFSTR("SGSqliteDatabase.m"), 466, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("argc == 1"));

  }
  v5 = (char *)sqlite3_value_text(*a3);
  v6 = escapedTagInTags(v5, "|inhuman", 8);
  sqlite3_result_int(a1, v6);
}

void tagsHaveEscapedTag(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  char *v5;
  unsigned __int8 *v6;
  size_t v7;
  _BOOL4 v8;
  void *v9;
  void *v10;

  if (a2 != 2)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void tagsHaveEscapedTag(sqlite3_context *, int, sqlite3_value **)");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "handleFailureInFunction:file:lineNumber:description:", v10, CFSTR("SGSqliteDatabase.m"), 472, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("argc == 2"));

  }
  v5 = (char *)sqlite3_value_text(*a3);
  v6 = (unsigned __int8 *)sqlite3_value_text(a3[1]);
  v7 = strlen((const char *)v6);
  v8 = escapedTagInTags(v5, (char *)v6, v7);
  sqlite3_result_int(a1, v8);
}

void delimitedString(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  int v5;
  const unsigned __int8 *v6;
  const unsigned __int8 *v7;
  void *v8;
  int v9;
  BOOL v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  int v13;
  unint64_t v14;
  char *v15;
  _BYTE *v16;
  char v18;
  void *v19;
  void *v20;
  int v21;
  id v22;
  uint64_t v23;
  void *memptr;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (a2 != 2)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void delimitedString(sqlite3_context *, int, sqlite3_value **)");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "handleFailureInFunction:file:lineNumber:description:", v20, CFSTR("SGSqliteDatabase.m"), 484, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("argc == 2"));

  }
  v5 = sqlite3_value_int(a3[1]);
  v6 = sqlite3_value_text(*a3);
  if (v5 < 0)
  {
    sqlite3_result_null(a1);
    return;
  }
  v7 = v6;
  v8 = (void *)MEMORY[0x1C3BD4F6C]();
  while (1)
  {
    v9 = *v7;
    if (v9 == 92)
    {
      if (v7[1])
        ++v7;
      goto LABEL_14;
    }
    if (v9 == 124)
      break;
    if (!*v7)
    {
      sqlite3_result_null(a1);
      goto LABEL_35;
    }
LABEL_14:
    ++v7;
  }
  v10 = __OFSUB__(v5--, 1);
  if (v5 < 0 == v10)
    goto LABEL_14;
  v11 = (unsigned __int8 *)(v7 + 1);
  v12 = (unsigned __int8 *)(v7 + 1);
  while (2)
  {
    v13 = *v12;
    if (v13 == 92)
    {
      if (v12[1])
        ++v12;
      goto LABEL_22;
    }
    if (*v12 && v13 != 124)
    {
LABEL_22:
      ++v12;
      continue;
    }
    break;
  }
  v14 = v12 - v7;
  memptr = 0;
  v25 = 0;
  if ((unint64_t)(v12 - v7) > 0x100)
  {
    v21 = malloc_type_posix_memalign(&memptr, 8uLL, v12 - v7, 0x19CF9101uLL);
    LOBYTE(v25) = 0;
    if (v21)
    {
      objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99850], CFSTR("malloc failed"), 0);
      v22 = (id)objc_claimAutoreleasedReturnValue();
      objc_exception_throw(v22);
    }
    v15 = (char *)memptr;
  }
  else
  {
    MEMORY[0x1E0C80A78]();
    v15 = (char *)&v23 - ((v12 - v11 + 16) & 0xFFFFFFFFFFFFFFF0);
    bzero(v15, v12 - v11 + 1);
  }
  v16 = v15;
  if (v11 < v12)
  {
    v16 = v15;
    do
    {
      if (v11 + 1 < v12 && *v11 == 92)
        ++v11;
      v18 = *v11++;
      *v16++ = v18;
    }
    while (v11 < v12);
  }
  *v16 = 0;
  sqlite3_result_text(a1, v15, (_DWORD)v16 - (_DWORD)v15, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  if (v14 >= 0x101)
    free(v15);
LABEL_35:
  objc_autoreleasePoolPop(v8);
}

void firstStringAfterPrefix(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  int v5;
  unsigned int v6;
  const unsigned __int8 *v7;
  const unsigned __int8 *v8;
  uint64_t v9;
  unsigned int v10;
  size_t v12;
  char *v13;
  void *v14;
  void *v15;
  int v16;
  id v17;
  uint64_t v18;
  void *memptr;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (a2 != 1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void firstStringAfterPrefix(sqlite3_context *, int, sqlite3_value **)");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "handleFailureInFunction:file:lineNumber:description:", v15, CFSTR("SGSqliteDatabase.m"), 535, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("argc == 1"));

  }
  v5 = sqlite3_value_bytes(*a3);
  if (v5)
  {
    v6 = v5;
    v7 = sqlite3_value_text(*a3);
    v8 = v7;
    if (v6 >= 0x7FFFFFFF)
      v9 = 0x7FFFFFFFLL;
    else
      v9 = v6;
    while (1)
    {
      v10 = v9;
      if (v9-- < 1)
        break;
      if (v7[v9] != 255)
      {
        memptr = 0;
        v20 = 0;
        if (v10 > 0x100)
        {
          v16 = malloc_type_posix_memalign(&memptr, 8uLL, v10, 0x56215E3DuLL);
          LOBYTE(v20) = 0;
          if (v16)
          {
            objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99850], CFSTR("malloc failed"), 0);
            v17 = (id)objc_claimAutoreleasedReturnValue();
            objc_exception_throw(v17);
          }
          v13 = (char *)memptr;
        }
        else
        {
          MEMORY[0x1E0C80A78]();
          v13 = (char *)&v18 - ((v12 + 15) & 0x1FFFFFFF0);
          bzero(v13, v12);
        }
        memcpy(v13, v8, v9);
        v13[v9] = v8[v9] + 1;
        sqlite3_result_text(a1, v13, v10, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
        if (v10 >= 0x101)
          free(v13);
        return;
      }
    }
  }
  sqlite3_result_zeroblob(a1, 0);
}

uint64_t wrappedBusyCallbackForTiming(void *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t (*busy)(uint64_t, uint64_t);
  uint64_t v5;

  v3 = a1;
  busy = (uint64_t (*)(uint64_t, uint64_t))_sqlite3_system_busy_handler();
  v5 = busy(objc_msgSend(v3, "handle"), a2);
  v3[2] = mach_absolute_time();

  return v5;
}

BOOL escapedTagInTags(char *__s, char *a2, uint64_t a3)
{
  const char *v5;
  int v6;
  size_t v7;
  char *v8;
  char *v9;
  char *v10;
  int v11;

  v5 = a2 + 1;
  v6 = *a2;
  v7 = a3 - 1;
  v8 = __s;
  while (1)
  {
    v9 = strchr(v8, v6);
    v10 = v9;
    if (!v9)
      break;
    v8 = v9 + 1;
    if (!strncmp(v9 + 1, v5, v7)
      && (v10 == __s || *(v10 - 1) != 92 || (unint64_t)(v10 - __s) >= 2 && *(v10 - 2) == 92))
    {
      v11 = v10[a3];
      if (v11 == 124 || v11 == 0)
        break;
    }
  }
  return v10 != 0;
}

uint64_t _indexForBindParam(sqlite3_stmt *a1, char *zName)
{
  uint64_t v4;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  if (a1)
  {
    if (zName)
      goto LABEL_3;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "int _indexForBindParam(sqlite3_stmt *, const char *)");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v7, CFSTR("SGSqliteDatabase.m"), 834, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("stmt"));

    if (zName)
      goto LABEL_3;
  }
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "int _indexForBindParam(sqlite3_stmt *, const char *)");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "handleFailureInFunction:file:lineNumber:description:", v9, CFSTR("SGSqliteDatabase.m"), 835, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("name"));

LABEL_3:
  v4 = sqlite3_bind_parameter_index(a1, zName);
  if ((int)v4 <= 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "int _indexForBindParam(sqlite3_stmt *, const char *)");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", v11, CFSTR("SGSqliteDatabase.m"), 837, CFSTR("Unknown bind parameter \"%s\""), zName);

  }
  return v4;
}

uint64_t sqlite3_bind_nsdata(sqlite3_stmt *a1, int a2, id a3)
{
  id v5;
  const void *v6;
  sqlite3_uint64 v7;

  v5 = objc_retainAutorelease(a3);
  v6 = (const void *)objc_msgSend(v5, "bytes");
  v7 = objc_msgSend(v5, "length");

  return sqlite3_bind_blob64(a1, a2, v6, v7, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
}

char *sqlite3_column_nsstring(sqlite3_stmt *a1, int a2)
{
  char *v2;

  v2 = (char *)sqlite3_column_text(a1, a2);
  if (v2)
    v2 = (char *)CFStringCreateWithCString(0, v2, 0x8000100u);
  return v2;
}

uint64_t sqlite3_bind_nsstring(sqlite3_stmt *a1, int a2, id a3)
{
  return sqlite3_bind_text(a1, a2, (const char *)objc_msgSend(objc_retainAutorelease(a3), "UTF8String"), -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
}

id sqlite3_column_nssecurecoding(sqlite3_stmt *a1, int a2, void *a3)
{
  id v5;
  const void *v6;
  int v7;
  void *v8;
  void *v9;
  void *v10;

  v5 = a3;
  v6 = sqlite3_column_blob(a1, a2);
  v7 = sqlite3_column_bytes(a1, a2);
  if (v7)
  {
    v8 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytesNoCopy:length:freeWhenDone:", v6, v7, 0);
    v9 = (void *)MEMORY[0x1C3BD4F6C]();
    objc_msgSend(MEMORY[0x1E0CB3710], "unarchivedObjectOfClasses:fromData:error:", v5, v8, 0);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_autoreleasePoolPop(v9);

  }
  else
  {
    v10 = 0;
  }

  return v10;
}

void sub_1C36F82E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__13416(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__13417(uint64_t a1)
{

}

uint64_t *re2::DFA::DFA(uint64_t *a1, uint64_t a2, int a3, uint64_t a4)
{
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;

  *a1 = a2;
  *((_DWORD *)a1 + 2) = a3;
  *((_BYTE *)a1 + 16) = 0;
  *(_OWORD *)(a1 + 3) = 0u;
  *(_OWORD *)(a1 + 5) = 0u;
  *(_OWORD *)(a1 + 7) = 0u;
  *(_OWORD *)(a1 + 9) = 0u;
  *(_OWORD *)(a1 + 11) = 0u;
  *(_OWORD *)(a1 + 13) = 0u;
  *(_OWORD *)(a1 + 15) = 0u;
  *(_OWORD *)(a1 + 17) = 0u;
  *(_OWORD *)(a1 + 19) = 0u;
  *(_OWORD *)(a1 + 21) = 0u;
  *(_OWORD *)(a1 + 23) = 0u;
  *(_OWORD *)(a1 + 25) = 0u;
  a1[27] = 0;
  if (pthread_rwlock_init((pthread_rwlock_t *)(a1 + 3), 0))
    abort();
  a1[28] = 0;
  *((_OWORD *)a1 + 16) = 0u;
  a1[56] = 0;
  *((_OWORD *)a1 + 26) = 0u;
  *((_OWORD *)a1 + 27) = 0u;
  *((_OWORD *)a1 + 24) = 0u;
  *((_OWORD *)a1 + 25) = 0u;
  *((_OWORD *)a1 + 22) = 0u;
  *((_OWORD *)a1 + 23) = 0u;
  *((_OWORD *)a1 + 20) = 0u;
  *((_OWORD *)a1 + 21) = 0u;
  *((_OWORD *)a1 + 18) = 0u;
  *((_OWORD *)a1 + 19) = 0u;
  *((_OWORD *)a1 + 17) = 0u;
  a1[29] = 0;
  a1[30] = 0;
  if (pthread_rwlock_init((pthread_rwlock_t *)(a1 + 32), 0))
    abort();
  v7 = 0;
  a1[57] = a4;
  *(_OWORD *)(a1 + 59) = 0u;
  *(_OWORD *)(a1 + 61) = 0u;
  *((_DWORD *)a1 + 126) = 1065353216;
  a1[64] = 0;
  *((_DWORD *)a1 + 130) = -1;
  a1[66] = 0;
  *((_DWORD *)a1 + 134) = -1;
  a1[68] = 0;
  *((_DWORD *)a1 + 138) = -1;
  a1[70] = 0;
  *((_DWORD *)a1 + 142) = -1;
  a1[72] = 0;
  *((_DWORD *)a1 + 146) = -1;
  a1[74] = 0;
  *((_DWORD *)a1 + 150) = -1;
  a1[76] = 0;
  *((_DWORD *)a1 + 154) = -1;
  a1[78] = 0;
  *((_DWORD *)a1 + 158) = -1;
  *((_BYTE *)a1 + 640) = 0;
  *((_DWORD *)a1 + 3) = 0;
  v8 = *(_DWORD *)(a2 + 12);
  if (*((_DWORD *)a1 + 2) == 1)
  {
    *((_DWORD *)a1 + 3) = *(_DWORD *)(a2 + 8);
    v7 = v8;
  }
  v9 = v7 + 2 * v8;
  *((_DWORD *)a1 + 62) = v9;
  v10 = *a1;
  v11 = *(int *)(*a1 + 12) + (uint64_t)v7;
  v12 = a4 - (16 * v11 + 4 * v9) - 648;
  a1[57] = v12;
  if (v12 >= 0 && (a1[58] = v12, v12 >= 20 * (8 * *(int *)(v10 + 20) + 4 * v11) + 640))
  {
    v13 = operator new();
    v14 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(v13 + 4) = v14 + v7;
    *(_QWORD *)(v13 + 8) = operator new[]();
    *(_QWORD *)(v13 + 16) = operator new[]();
    *(_BYTE *)(v13 + 24) = 0;
    *(_DWORD *)v13 = 0;
    *(_DWORD *)(v13 + 28) = v14;
    *(_DWORD *)(v13 + 32) = v7;
    *(_DWORD *)(v13 + 36) = v14;
    *(_BYTE *)(v13 + 40) = 1;
    a1[28] = v13;
    v15 = operator new();
    v16 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(v15 + 4) = v16 + v7;
    *(_QWORD *)(v15 + 8) = operator new[]();
    *(_QWORD *)(v15 + 16) = operator new[]();
    *(_BYTE *)(v15 + 24) = 0;
    *(_DWORD *)v15 = 0;
    *(_DWORD *)(v15 + 28) = v16;
    *(_DWORD *)(v15 + 32) = v7;
    *(_DWORD *)(v15 + 36) = v16;
    *(_BYTE *)(v15 + 40) = 1;
    a1[29] = v15;
    a1[30] = operator new[]();
  }
  else
  {
    *((_BYTE *)a1 + 16) = 1;
  }
  return a1;
}

void sub_1C36FF4F8(_Unwind_Exception *a1)
{
  pthread_rwlock_t *v1;
  pthread_rwlock_t *v2;
  uint64_t v3;
  uint64_t v4;

  MEMORY[0x1C3BD4858](v4, 0x1010C40C2DF3DD7);
  std::unordered_set<re2::DFA::State *,re2::DFA::StateHash,re2::DFA::StateEqual,std::allocator<re2::DFA::State *>>::~unordered_set[abi:ne180100](v3);
  re2::Mutex::~Mutex(v2);
  re2::Mutex::~Mutex(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<re2::DFA::State *,re2::DFA::StateHash,re2::DFA::StateEqual,std::allocator<re2::DFA::State *>>::~unordered_set[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void re2::Mutex::~Mutex(pthread_rwlock_t *this)
{
  if (pthread_rwlock_destroy(this))
    abort();
}

void re2::DFA::~DFA(re2::DFA *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;

  v2 = *((_QWORD *)this + 28);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
      MEMORY[0x1C3BD4840](v3, 0x1000C8052888210);
    v4 = *(_QWORD *)(v2 + 16);
    if (v4)
      MEMORY[0x1C3BD4840](v4, 0x1000C8052888210);
    MEMORY[0x1C3BD4858](v2, 0x1010C40C2DF3DD7);
  }
  v5 = *((_QWORD *)this + 29);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
      MEMORY[0x1C3BD4840](v6, 0x1000C8052888210);
    v7 = *(_QWORD *)(v5 + 16);
    if (v7)
      MEMORY[0x1C3BD4840](v7, 0x1000C8052888210);
    MEMORY[0x1C3BD4858](v5, 0x1010C40C2DF3DD7);
  }
  v8 = *((_QWORD *)this + 30);
  if (v8)
    MEMORY[0x1C3BD4840](v8, 0x1000C8052888210);
  re2::DFA::ClearCache(this);
  v9 = (_QWORD *)*((_QWORD *)this + 61);
  if (v9)
  {
    do
    {
      v10 = (_QWORD *)*v9;
      operator delete(v9);
      v9 = v10;
    }
    while (v10);
  }
  v11 = (void *)*((_QWORD *)this + 59);
  *((_QWORD *)this + 59) = 0;
  if (v11)
    operator delete(v11);
  if (pthread_rwlock_destroy((pthread_rwlock_t *)((char *)this + 256)))
    abort();
  if (pthread_rwlock_destroy((pthread_rwlock_t *)((char *)this + 24)))
    abort();
}

void re2::DFA::ClearCache(re2::DFA *this)
{
  unint64_t v2;
  char *v3;
  char *v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  char *v11;
  char *v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  char *v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t i;

  v2 = *((_QWORD *)this + 62);
  if (v2)
  {
    if (v2 >> 61)
      std::vector<re2::RE2 *>::__throw_length_error[abi:ne180100]();
    v3 = (char *)operator new(8 * v2);
    v4 = &v3[8 * v2];
    v5 = (_QWORD *)*((_QWORD *)this + 61);
    if (v5)
      goto LABEL_4;
  }
  else
  {
    v3 = 0;
    v4 = 0;
    v5 = (_QWORD *)*((_QWORD *)this + 61);
    if (v5)
    {
LABEL_4:
      v6 = v3;
      while (v6 < v4)
      {
        *(_QWORD *)v6 = v5[2];
        v6 += 8;
LABEL_6:
        v5 = (_QWORD *)*v5;
        if (!v5)
        {
          if (!*((_QWORD *)this + 62))
            goto LABEL_36;
LABEL_46:
          v25 = (_QWORD *)*((_QWORD *)this + 61);
          if (v25)
          {
            do
            {
              v26 = (_QWORD *)*v25;
              operator delete(v25);
              v25 = v26;
            }
            while (v26);
          }
          *((_QWORD *)this + 61) = 0;
          v27 = *((_QWORD *)this + 60);
          if (v27)
          {
            for (i = 0; i != v27; ++i)
              *(_QWORD *)(*((_QWORD *)this + 59) + 8 * i) = 0;
          }
          *((_QWORD *)this + 62) = 0;
          v21 = v6 - v3;
          if (v6 == v3)
            goto LABEL_52;
LABEL_37:
          v22 = v21 >> 3;
          if (v22 <= 1)
            v23 = 1;
          else
            v23 = v22;
          v24 = v3;
          do
          {
            if (*(_QWORD *)v24)
              MEMORY[0x1C3BD4840](*(_QWORD *)v24, 0x1000C8077774924);
            v24 += 8;
            --v23;
          }
          while (v23);
          goto LABEL_53;
        }
      }
      v7 = (v6 - v3) >> 3;
      v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 61)
        std::vector<re2::RE2 *>::__throw_length_error[abi:ne180100]();
      if ((v4 - v3) >> 2 > v8)
        v8 = (v4 - v3) >> 2;
      if ((unint64_t)(v4 - v3) >= 0x7FFFFFFFFFFFFFF8)
        v9 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v9 = v8;
      if (v9)
      {
        if (v9 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v10 = operator new(8 * v9);
      }
      else
      {
        v10 = 0;
      }
      v11 = &v10[8 * v7];
      *(_QWORD *)v11 = v5[2];
      v12 = v11 + 8;
      if (v6 != v3)
      {
        v13 = v6 - 8 - v3;
        if (v13 >= 0x168)
        {
          if (&v10[v6 - v3 - 8 - (v13 & 0xFFFFFFFFFFFFFFF8)] > &v10[v6 - v3 - 8])
          {
            v14 = v6;
          }
          else if (&v6[-(v13 & 0xFFFFFFFFFFFFFFF8) - 8] > v6 - 8)
          {
            v14 = v6;
          }
          else if ((unint64_t)(v3 - v10) >= 0x20)
          {
            v16 = (v13 >> 3) + 1;
            v14 = &v6[-8 * (v16 & 0x3FFFFFFFFFFFFFFCLL)];
            v17 = &v10[8 * v7 - 16];
            v18 = v6 - 16;
            v19 = v16 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v20 = *(_OWORD *)v18;
              *(v17 - 1) = *((_OWORD *)v18 - 1);
              *v17 = v20;
              v17 -= 2;
              v18 -= 32;
              v19 -= 4;
            }
            while (v19);
            v11 -= 8 * (v16 & 0x3FFFFFFFFFFFFFFCLL);
            if (v16 == (v16 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_22;
          }
          else
          {
            v14 = v6;
          }
        }
        else
        {
          v14 = v6;
        }
        do
        {
          v15 = *((_QWORD *)v14 - 1);
          v14 -= 8;
          *((_QWORD *)v11 - 1) = v15;
          v11 -= 8;
        }
        while (v14 != v3);
      }
LABEL_22:
      v4 = &v10[8 * v9];
      if (v3)
        operator delete(v3);
      v3 = v11;
      v6 = v12;
      goto LABEL_6;
    }
  }
  v6 = v3;
  if (v2)
    goto LABEL_46;
LABEL_36:
  v21 = v6 - v3;
  if (v6 != v3)
    goto LABEL_37;
LABEL_52:
  if (v3)
LABEL_53:
    operator delete(v3);
}

void sub_1C36FF9D0(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

std::string *re2::DFA::DumpWorkq@<X0>(std::string *result@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, std::string *a8@<X8>)
{
  std::string *v9;
  _DWORD *v10;
  const char *v11;
  char v12;

  a8->__r_.__value_.__r.__words[0] = 0;
  a8->__r_.__value_.__l.__size_ = 0;
  a8->__r_.__value_.__r.__words[2] = 0;
  if (LODWORD(result->__r_.__value_.__l.__data_))
  {
    v9 = result;
    v10 = (_DWORD *)result->__r_.__value_.__r.__words[2];
    v11 = "";
    do
    {
      if (SHIDWORD(v9[1].__r_.__value_.__r.__words[0]) > *v10)
      {
        result = re2::StringAppendF(a8, "%s%d", a2, a3, a4, a5, a6, a7, (char)v11);
        v11 = ",";
      }
      else
      {
        result = re2::StringAppendF(a8, "|", a2, a3, a4, a5, a6, a7, v12);
        v11 = "";
      }
      ++v10;
    }
    while (v10 != (_DWORD *)(v9->__r_.__value_.__r.__words[2] + 4 * SLODWORD(v9->__r_.__value_.__l.__data_)));
  }
  return result;
}

void sub_1C36FFABC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *re2::DFA::DumpState@<X0>(std::string *result@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  std::string *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  char v18;

  v8 = result;
  if ((unint64_t)result >= 3)
  {
    *(_QWORD *)a8 = 0;
    *(_QWORD *)(a8 + 8) = 0;
    *(_QWORD *)(a8 + 16) = 0;
    re2::StringAppendF((std::string *)a8, "(%p)", a2, a3, a4, a5, a6, a7, (char)result);
    if (SLODWORD(v8->__r_.__value_.__r.__words[1]) >= 1)
    {
      v16 = 0;
      v17 = "";
      do
      {
        if (*(_DWORD *)(v8->__r_.__value_.__r.__words[0] + 4 * v16) == -1)
        {
          re2::StringAppendF((std::string *)a8, "|", v10, v11, v12, v13, v14, v15, v18);
          v17 = "";
        }
        else
        {
          re2::StringAppendF((std::string *)a8, "%s%d", v10, v11, v12, v13, v14, v15, (char)v17);
          v17 = ",";
        }
        ++v16;
      }
      while (v16 < SLODWORD(v8->__r_.__value_.__r.__words[1]));
    }
    return re2::StringAppendF((std::string *)a8, " flag=%#x", v10, v11, v12, v13, v14, v15, HIDWORD(v8->__r_.__value_.__r.__words[1]));
  }
  else
  {
    *(_BYTE *)(a8 + 23) = 1;
    *(_WORD *)a8 = (0x2A585Fu >> (8 * (_BYTE)result));
  }
  return result;
}

void sub_1C36FFBF8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t re2::DFA::WorkqToCachedState(re2::DFA *a1, int *a2, int a3)
{
  unint64_t v6;
  int *v7;
  int *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  unsigned int v15;
  int v16;
  char v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  unsigned int v26;
  int v27;
  int v28;
  int *v30;
  int *v31;
  _BOOL4 v32;
  int *v33;
  int v34;
  uint64_t v35;

  if (a2[8] + a2[7] <= 0x2000)
  {
    pthread_mutex_lock(&re2::instScratchLock);
    v7 = &re2::instScratch;
    if (*a2)
      goto LABEL_3;
LABEL_10:
    v18 = 0;
    v9 = a3 & 0x1000;
LABEL_67:
    v16 = 0;
    a3 = v9;
    if (v18 | v9)
      goto LABEL_57;
    goto LABEL_68;
  }
  v7 = (int *)malloc_type_malloc(4 * (a2[8] + a2[7]), 0x100004052888210uLL);
  if (!*a2)
    goto LABEL_10;
LABEL_3:
  v8 = (int *)*((_QWORD *)a2 + 2);
  v9 = a3 & 0x1000;
  v10 = *v8;
  if (a2[7] <= *v8)
  {
    v11 = 0;
    v16 = 0;
    v17 = 0;
  }
  else
  {
    v11 = 0;
    v12 = *(_QWORD *)a1;
    v13 = *(_QWORD *)(*(_QWORD *)a1 + 32);
    v14 = (_DWORD *)(v13 + 8 * v10);
    v15 = *v14 & 7;
    if (v15 > 5)
    {
      v16 = 0;
      v17 = 0;
    }
    else
    {
      if (((1 << v15) & 0x35) != 0)
        goto LABEL_6;
      v16 = 0;
      v17 = 0;
      if (v15 == 1)
      {
        v28 = *((_DWORD *)a1 + 2);
        if (v28 != 3)
        {
          if (v28)
          {
            if ((a3 & 0x1000) == 0)
              goto LABEL_6;
          }
          else if ((*(_DWORD *)(v13 + (*v14 & 0xFFFFFFF8)) & 7) != 2 || v9 == 0)
          {
            goto LABEL_6;
          }
LABEL_76:
          if (v7 == &re2::instScratch)
            pthread_mutex_unlock(&re2::instScratchLock);
          else
            free(v7);
          return 2;
        }
LABEL_6:
        *v7 = v10;
        if ((*v14 & 7) == 4)
        {
          v17 = 0;
          v16 = *(_DWORD *)(v13 + 8 * v10 + 4);
        }
        else
        {
          v16 = 0;
          v17 = (*v14 & 7) == 5 && *(_BYTE *)(v12 + 1) == 0;
        }
        v11 = 1;
      }
    }
  }
  if (*a2 == 1)
  {
LABEL_16:
    v18 = v11;
    v19 = v11 - 1;
    if ((int)v11 >= 1)
      goto LABEL_52;
    goto LABEL_55;
  }
  v20 = 0;
  v21 = 1;
  while (1)
  {
    v22 = v8[v21];
    if ((v17 & 1) != 0)
      break;
    if (a2[7] > v22)
      goto LABEL_24;
    if ((int)v11 >= 1 && v7[(v11 - 1)] != -1)
    {
      v18 = (v11 + 1);
      v7[v11] = -1;
      v20 = 1;
      goto LABEL_20;
    }
LABEL_19:
    v18 = v11;
LABEL_20:
    ++v21;
    v11 = v18;
    if (v21 == *a2)
      goto LABEL_51;
  }
  if (*((_DWORD *)a1 + 2))
  {
    if (a2[7] <= v22)
      goto LABEL_16;
LABEL_24:
    v23 = *(_QWORD *)a1;
    v24 = *(_QWORD *)(*(_QWORD *)a1 + 32);
    v25 = (_DWORD *)(v24 + 8 * v22);
    v6 = *v25;
    v26 = *v25 & 7;
    if (v26 <= 5)
    {
      if (((1 << v26) & 0x35) != 0)
        goto LABEL_26;
      if (v26 == 1)
      {
        v27 = *((_DWORD *)a1 + 2);
        if (v27 != 3)
        {
          if (v27 || !(v21 * 4) && (v6 = *(_DWORD *)(v24 + (v6 & 0xFFFFFFF8)) & 7, (_DWORD)v6 == 2))
          {
            v6 = v27 == 1;
            if ((a3 & 0x1000) != 0)
            {
              v6 = v6 & v20;
              if ((v6 & 1) == 0)
                goto LABEL_76;
            }
          }
        }
LABEL_26:
        v18 = (v11 + 1);
        v7[(int)v11] = v22;
        if ((*v25 & 7) == 5)
        {
          v17 |= *(_BYTE *)(v23 + 1) == 0;
        }
        else if ((*v25 & 7) == 4)
        {
          v16 |= *(_DWORD *)(v24 + 8 * v22 + 4);
        }
        goto LABEL_20;
      }
    }
    goto LABEL_19;
  }
  v18 = v11;
LABEL_51:
  v19 = v18 - 1;
  if ((int)v18 >= 1)
  {
LABEL_52:
    if (v7[v19] == -1)
      v18 = v19;
    else
      v18 = v18;
  }
LABEL_55:
  if (!v16)
    goto LABEL_67;
  if (!(v18 | a3))
  {
LABEL_68:
    if (v7 == &re2::instScratch)
      pthread_mutex_unlock(&re2::instScratchLock);
    else
      free(v7);
    return 1;
  }
LABEL_57:
  if (*((_DWORD *)a1 + 2) == 1 && (int)v18 >= 1)
  {
    v30 = &v7[(int)v18];
    v31 = v7;
    do
    {
      v33 = v31;
      do
      {
        v34 = *v33;
        if (*v33 == -1)
          break;
        ++v33;
      }
      while (v33 < v30);
      v32 = v34 == -1;
      std::__sort<std::__less<int,int> &,int *>();
      v31 = &v33[v32];
    }
    while (v31 < v30);
  }
  v35 = re2::DFA::CachedState(a1, v7, v18, a3 | (v16 << 16), (unsigned int *)v6);
  if (v7 == &re2::instScratch)
    pthread_mutex_unlock(&re2::instScratchLock);
  else
    free(v7);
  return v35;
}

uint64_t re2::DFA::CachedState(re2::DFA *this, int *a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  int v5;
  int v6;
  float *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  unsigned int *v19;
  int *v21;
  int v22;
  int v23;
  uint64_t v24;

  v5 = a4;
  v6 = a3;
  v21 = a2;
  v22 = a3;
  v23 = a4;
  v24 = 0;
  v9 = (float *)((char *)this + 472);
  v10 = std::__hash_table<re2::DFA::State *,re2::DFA::StateHash,re2::DFA::StateEqual,std::allocator<re2::DFA::State *>>::find<re2::DFA::State *>((_QWORD *)this + 59, (uint64_t)&v21, a3, a4, a5);
  if (v10)
    return v10[2];
  v12 = *(int *)(*(_QWORD *)this + 20) + 1;
  v13 = *((_QWORD *)this + 57);
  v14 = (uint64_t)(((unint64_t)(4 * v6 + 8 * v12 + 24) << 32) + 0x2000000000) >> 32;
  v15 = v13 < v14;
  v16 = v13 - v14;
  if (v15)
  {
    v11 = 0;
    *((_QWORD *)this + 57) = -1;
  }
  else
  {
    *((_QWORD *)this + 57) = v16;
    v11 = operator new[]();
    *(_QWORD *)(v11 + 16) = v11 + 24;
    v17 = (void *)(v11 + 24 + 8 * v12);
    *(_QWORD *)v11 = v17;
    bzero((void *)(v11 + 24), 8 * v12);
    memcpy(v17, a2, 4 * v6);
    *(_DWORD *)(v11 + 8) = v6;
    *(_DWORD *)(v11 + 12) = v5;
    std::__hash_table<re2::DFA::State *,re2::DFA::StateHash,re2::DFA::StateEqual,std::allocator<re2::DFA::State *>>::__emplace_unique_key_args<re2::DFA::State *,re2::DFA::State * const&>(v9, v11, v11, v18, v19);
  }
  return v11;
}

_QWORD *std::__hash_table<re2::DFA::State *,re2::DFA::StateHash,re2::DFA::StateEqual,std::allocator<re2::DFA::State *>>::find<re2::DFA::State *>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  _DWORD *v7;
  int v8;
  unsigned int v9;
  unint64_t v10;
  int8x8_t v11;
  uint8x8_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *result;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _DWORD *v21;
  unint64_t v22;
  _DWORD *v23;
  int v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _DWORD *v29;
  unint64_t v30;
  _DWORD *v31;
  int v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  unsigned int v36;
  unsigned int v37;

  if (a2)
  {
    v7 = *(_DWORD **)a2;
    v8 = *(_DWORD *)(a2 + 8);
    v9 = *(_DWORD *)(a2 + 12);
    v36 = 0;
    v37 = v9;
    re2::hashword2(v7, (const unsigned int *)((uint64_t)(4 * v8) >> 2), (int *)&v37, &v36, a5);
    v10 = v36 | ((unint64_t)v37 << 32);
    v11 = (int8x8_t)a1[1];
    if (!*(_QWORD *)&v11)
      return 0;
  }
  else
  {
    v10 = 0;
    v11 = (int8x8_t)a1[1];
    if (!*(_QWORD *)&v11)
      return 0;
  }
  v12 = (uint8x8_t)vcnt_s8(v11);
  v12.i16[0] = vaddlv_u8(v12);
  if (v12.u32[0] > 1uLL)
  {
    v13 = v10;
    if (v10 >= *(_QWORD *)&v11)
      v13 = v10 % *(_QWORD *)&v11;
  }
  else
  {
    v13 = (*(_QWORD *)&v11 - 1) & v10;
  }
  v14 = *(_QWORD **)(*a1 + 8 * v13);
  if (v14)
  {
    v15 = (_QWORD *)*v14;
    if (v15)
    {
      v16 = *(_QWORD *)&v11 - 1;
      if (a2)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v18 = v15[1];
            if (v18 == v10)
            {
              v19 = v15[2];
              if (v19 == a2)
                return v15;
              if (v19)
              {
                v20 = *(unsigned int *)(v19 + 8);
                if (*(_QWORD *)(v19 + 8) == *(_QWORD *)(a2 + 8))
                {
                  if ((int)v20 < 1)
                    return v15;
                  v21 = *(_DWORD **)v19;
                  if (**(_DWORD **)v19 == **(_DWORD **)a2)
                  {
                    v22 = 0;
                    v23 = v21 + 1;
                    while (v20 - 1 != v22)
                    {
                      v24 = v23[v22];
                      v25 = *(_DWORD *)(*(_QWORD *)a2 + 4 + 4 * v22++);
                      if (v24 != v25)
                      {
                        if (v22 < v20)
                          goto LABEL_15;
                        return v15;
                      }
                    }
                    return v15;
                  }
                }
              }
            }
            else if ((v18 & v16) != v13)
            {
              return 0;
            }
LABEL_15:
            result = 0;
            v15 = (_QWORD *)*v15;
            if (!v15)
              return result;
          }
        }
        while (1)
        {
          v26 = v15[1];
          if (v26 == v10)
          {
            v27 = v15[2];
            if (v27 == a2)
              return v15;
            if (v27)
            {
              v28 = *(unsigned int *)(v27 + 8);
              if (*(_QWORD *)(v27 + 8) == *(_QWORD *)(a2 + 8))
              {
                if ((int)v28 < 1)
                  return v15;
                v29 = *(_DWORD **)v27;
                if (**(_DWORD **)v27 == **(_DWORD **)a2)
                {
                  v30 = 0;
                  v31 = v29 + 1;
                  do
                  {
                    if (v28 - 1 == v30)
                      return v15;
                    v32 = v31[v30];
                    v33 = *(_DWORD *)(*(_QWORD *)a2 + 4 + 4 * v30++);
                  }
                  while (v32 == v33);
                  if (v30 >= v28)
                    return v15;
                }
              }
            }
          }
          else
          {
            if (v26 >= *(_QWORD *)&v11)
              v26 %= *(_QWORD *)&v11;
            if (v26 != v13)
              return 0;
          }
          result = 0;
          v15 = (_QWORD *)*v15;
          if (!v15)
            return result;
        }
      }
      if (v12.u32[0] < 2uLL)
      {
        while (1)
        {
          v34 = v15[1];
          if (v34 == v10)
          {
            if (!v15[2])
              return v15;
          }
          else if ((v34 & v16) != v13)
          {
            return 0;
          }
          result = 0;
          v15 = (_QWORD *)*v15;
          if (!v15)
            return result;
        }
      }
      while (1)
      {
        v35 = v15[1];
        if (v35 == v10)
        {
          if (!v15[2])
            return v15;
        }
        else
        {
          if (v35 >= *(_QWORD *)&v11)
            v35 %= *(_QWORD *)&v11;
          if (v35 != v13)
            return 0;
        }
        result = 0;
        v15 = (_QWORD *)*v15;
        if (!v15)
          return result;
      }
    }
  }
  return 0;
}

void std::__hash_table<re2::DFA::State *,re2::DFA::StateHash,re2::DFA::StateEqual,std::allocator<re2::DFA::State *>>::__emplace_unique_key_args<re2::DFA::State *,re2::DFA::State * const&>(float *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  _DWORD *v8;
  int v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _DWORD *v21;
  unint64_t v22;
  _DWORD *v23;
  int v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _DWORD *v29;
  unint64_t v30;
  _DWORD *v31;
  int v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  float v37;
  float v38;
  _BOOL8 v39;
  unint64_t v40;
  unint64_t v41;
  size_t prime;
  void *v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t *v47;
  size_t v48;
  size_t v49;
  size_t v50;
  _QWORD *i;
  size_t v52;
  uint64_t v53;
  unint64_t v54;
  uint8x8_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  size_t v59;
  _QWORD *v60;
  _QWORD *v61;
  unint64_t v62;
  _QWORD *v63;
  unsigned int v64;
  unsigned int v65;

  if (a2)
  {
    v8 = *(_DWORD **)a2;
    v9 = *(_DWORD *)(a2 + 8);
    v10 = *(_DWORD *)(a2 + 12);
    v64 = 0;
    v65 = v10;
    re2::hashword2(v8, (const unsigned int *)((uint64_t)(4 * v9) >> 2), (int *)&v65, &v64, a5);
    v11 = v64 | ((unint64_t)v65 << 32);
    v12 = *((_QWORD *)a1 + 1);
    if (v12)
      goto LABEL_3;
LABEL_6:
    v14 = 0;
    goto LABEL_55;
  }
  v11 = 0;
  v12 = *((_QWORD *)a1 + 1);
  if (!v12)
    goto LABEL_6;
LABEL_3:
  v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
  v13.i16[0] = vaddlv_u8(v13);
  if (v13.u32[0] > 1uLL)
  {
    v14 = v11;
    if (v11 >= v12)
      v14 = v11 % v12;
  }
  else
  {
    v14 = (v12 - 1) & v11;
  }
  v15 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v14);
  if (v15)
  {
    v16 = (_QWORD *)*v15;
    if (v16)
    {
      v17 = v12 - 1;
      if (a2)
      {
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v18 = v16[1];
            if (v18 == v11)
            {
              v19 = v16[2];
              if (v19 == a2)
                return;
              if (v19)
              {
                v20 = *(unsigned int *)(v19 + 8);
                if (*(_QWORD *)(v19 + 8) == *(_QWORD *)(a2 + 8))
                {
                  if ((int)v20 < 1)
                    return;
                  v21 = *(_DWORD **)v19;
                  if (**(_DWORD **)v19 == **(_DWORD **)a2)
                  {
                    v22 = 0;
                    v23 = v21 + 1;
                    do
                    {
                      if (v20 - 1 == v22)
                        return;
                      v24 = v23[v22];
                      v25 = *(_DWORD *)(*(_QWORD *)a2 + 4 + 4 * v22++);
                    }
                    while (v24 == v25);
                    if (v22 >= v20)
                      return;
                  }
                }
              }
            }
            else if ((v18 & v17) != v14)
            {
              goto LABEL_55;
            }
            v16 = (_QWORD *)*v16;
            if (!v16)
              goto LABEL_55;
          }
        }
        while (1)
        {
          v26 = v16[1];
          if (v26 == v11)
          {
            v27 = v16[2];
            if (v27 == a2)
              return;
            if (v27)
            {
              v28 = *(unsigned int *)(v27 + 8);
              if (*(_QWORD *)(v27 + 8) == *(_QWORD *)(a2 + 8))
              {
                if ((int)v28 < 1)
                  return;
                v29 = *(_DWORD **)v27;
                if (**(_DWORD **)v27 == **(_DWORD **)a2)
                {
                  v30 = 0;
                  v31 = v29 + 1;
                  do
                  {
                    if (v28 - 1 == v30)
                      return;
                    v32 = v31[v30];
                    v33 = *(_DWORD *)(*(_QWORD *)a2 + 4 + 4 * v30++);
                  }
                  while (v32 == v33);
                  if (v30 >= v28)
                    return;
                }
              }
            }
          }
          else
          {
            if (v26 >= v12)
              v26 %= v12;
            if (v26 != v14)
              goto LABEL_55;
          }
          v16 = (_QWORD *)*v16;
          if (!v16)
            goto LABEL_55;
        }
      }
      if (v13.u32[0] < 2uLL)
      {
        while (1)
        {
          v34 = v16[1];
          if (v34 == v11)
          {
            if (!v16[2])
              return;
          }
          else if ((v34 & v17) != v14)
          {
            goto LABEL_55;
          }
          v16 = (_QWORD *)*v16;
          if (!v16)
            goto LABEL_55;
        }
      }
      do
      {
        v35 = v16[1];
        if (v35 == v11)
        {
          if (!v16[2])
            return;
        }
        else
        {
          if (v35 >= v12)
            v35 %= v12;
          if (v35 != v14)
            break;
        }
        v16 = (_QWORD *)*v16;
      }
      while (v16);
    }
  }
LABEL_55:
  v36 = operator new(0x18uLL);
  *v36 = 0;
  v36[1] = v11;
  v36[2] = a3;
  v37 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v38 = a1[8];
  if (v12 && (float)(v38 * (float)v12) >= v37)
  {
    v11 = v14;
    goto LABEL_105;
  }
  v39 = 1;
  if (v12 >= 3)
    v39 = (v12 & (v12 - 1)) != 0;
  v40 = v39 | (2 * v12);
  v41 = vcvtps_u32_f32(v37 / v38);
  if (v40 <= v41)
    prime = v41;
  else
    prime = v40;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v12 = *((_QWORD *)a1 + 1);
  }
  if (prime > v12)
  {
LABEL_68:
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v43 = operator new(8 * prime);
    v44 = *(_QWORD **)a1;
    *(_QWORD *)a1 = v43;
    if (v44)
      operator delete(v44);
    v45 = 0;
    *((_QWORD *)a1 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v45++) = 0;
    while (prime != v45);
    v47 = (uint64_t *)(a1 + 4);
    v46 = (_QWORD *)*((_QWORD *)a1 + 2);
    if (!v46)
      goto LABEL_92;
    v48 = v46[1];
    v49 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v50 = v48 & v49;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v50) = v47;
      for (i = (_QWORD *)*v46; *v46; i = (_QWORD *)*v46)
      {
        v52 = i[1] & v49;
        if (v52 == v50)
        {
          v46 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v52))
        {
          *v46 = *i;
          v53 = 8 * v52;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v53);
          **(_QWORD **)(*(_QWORD *)a1 + v53) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v52) = v46;
          v46 = i;
          v50 = v52;
        }
      }
LABEL_92:
      v12 = prime;
      goto LABEL_93;
    }
    if (v48 >= prime)
      v48 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v48) = v47;
    v57 = (_QWORD *)*v46;
    if (!*v46)
      goto LABEL_92;
    while (1)
    {
      v59 = v57[1];
      if (v59 >= prime)
        v59 %= prime;
      if (v59 != v48)
      {
        if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v59))
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v59) = v46;
          goto LABEL_97;
        }
        *v46 = *v57;
        v58 = 8 * v59;
        *v57 = **(_QWORD **)(*(_QWORD *)a1 + v58);
        **(_QWORD **)(*(_QWORD *)a1 + v58) = v57;
        v57 = v46;
      }
      v59 = v48;
LABEL_97:
      v46 = v57;
      v57 = (_QWORD *)*v57;
      v48 = v59;
      if (!v57)
        goto LABEL_92;
    }
  }
  if (prime >= v12)
    goto LABEL_93;
  v54 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
  if (v12 < 3 || (v55 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v55.i16[0] = vaddlv_u8(v55), v55.u32[0] > 1uLL))
  {
    v54 = std::__next_prime(v54);
  }
  else
  {
    v56 = 1 << -(char)__clz(v54 - 1);
    if (v54 >= 2)
      v54 = v56;
  }
  if (prime <= v54)
    prime = v54;
  if (prime < v12)
  {
    if (!prime)
    {
      v63 = *(_QWORD **)a1;
      *(_QWORD *)a1 = 0;
      if (v63)
        operator delete(v63);
      v12 = 0;
      *((_QWORD *)a1 + 1) = 0;
      goto LABEL_93;
    }
    goto LABEL_68;
  }
  v12 = *((_QWORD *)a1 + 1);
LABEL_93:
  if ((v12 & (v12 - 1)) != 0)
  {
    if (v11 >= v12)
      v11 %= v12;
  }
  else
  {
    v11 &= v12 - 1;
  }
LABEL_105:
  v60 = *(_QWORD **)a1;
  v61 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v11);
  if (v61)
  {
    *v36 = *v61;
LABEL_113:
    *v61 = v36;
    goto LABEL_114;
  }
  *v36 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v36;
  v60[v11] = a1 + 4;
  if (*v36)
  {
    v62 = *(_QWORD *)(*v36 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v62 >= v12)
        v62 %= v12;
    }
    else
    {
      v62 &= v12 - 1;
    }
    v61 = (_QWORD *)(*(_QWORD *)a1 + 8 * v62);
    goto LABEL_113;
  }
LABEL_114:
  ++*((_QWORD *)a1 + 3);
}

void sub_1C3700A18(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *re2::DFA::StateToWorkq(uint64_t *result, int *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  *a2 = 0;
  a2[9] = a2[7];
  v2 = *((_DWORD *)result + 2);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = 0;
    v5 = *result;
    while (1)
    {
      v6 = *(_DWORD *)(v5 + 4 * v4);
      if (v6 != -1)
        break;
      if (!*((_BYTE *)a2 + 40))
      {
        *((_BYTE *)a2 + 40) = 0;
        v6 = a2[9];
        a2[9] = v6 + 1;
LABEL_7:
        if (a2[1] > v6)
        {
          v7 = *((_QWORD *)a2 + 2);
          *(_DWORD *)(*((_QWORD *)a2 + 1) + 4 * (int)v6) = v3;
          *(_DWORD *)(v7 + 4 * *a2) = v6;
          v3 = *a2 + 1;
          *a2 = v3;
          v2 = *((_DWORD *)result + 2);
        }
      }
      if (++v4 >= v2)
        return result;
    }
    *((_BYTE *)a2 + 40) = 0;
    goto LABEL_7;
  }
  return result;
}

_QWORD *re2::DFA::AddToQueue(_QWORD *result, int *a2, int a3, int a4)
{
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;

  v4 = (_DWORD *)result[30];
  *v4 = a3;
  v5 = 1;
  do
  {
    v6 = (v5 - 1);
    v7 = v4[v6];
    if (!v7)
      goto LABEL_3;
    if (v7 == -1)
    {
      if (!*((_BYTE *)a2 + 40))
      {
        *((_BYTE *)a2 + 40) = 0;
        v8 = a2[9];
        a2[9] = v8 + 1;
        if (a2[1] > v8)
        {
          v9 = *((_QWORD *)a2 + 2);
          *(_DWORD *)(*((_QWORD *)a2 + 1) + 4 * (int)v8) = *a2;
          *(_DWORD *)(v9 + 4 * (*a2)++) = v8;
        }
      }
    }
    else
    {
      if (a2[1] <= v7)
      {
        *((_BYTE *)a2 + 40) = 0;
      }
      else
      {
        v10 = *((_QWORD *)a2 + 1);
        v11 = *(int *)(v10 + 4 * (int)v7);
        v12 = *a2;
        if (v11 >= *a2)
        {
          *((_BYTE *)a2 + 40) = 0;
          v13 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v13 = *((_QWORD *)a2 + 2);
          if (*(_DWORD *)(v13 + 4 * v11) == v7)
            goto LABEL_3;
          *((_BYTE *)a2 + 40) = 0;
        }
        *(_DWORD *)(v10 + 4 * (int)v7) = v12;
        *(_DWORD *)(v13 + 4 * (*a2)++) = v7;
      }
      v14 = *result;
      v15 = *(_QWORD *)(*result + 32);
      v16 = (_DWORD *)(v15 + 8 * (int)v7);
      switch(*v16 & 7)
      {
        case 0:
        case 1:
          v4[v6] = *(_DWORD *)(v15 + 8 * (int)v7 + 4);
          if (a2[8] >= 1 && v7 == *(_DWORD *)(v14 + 8) && v7 != *(_DWORD *)(v14 + 4))
          {
            v4[v5] = -1;
            LODWORD(v5) = v5 + 1;
          }
          v6 = (v5 + 1);
          v4[v5] = *v16 >> 3;
          break;
        case 3:
        case 6:
          goto LABEL_2;
        case 4:
          if ((*(_DWORD *)(v15 + 8 * (int)v7 + 4) & ~a4) == 0)
          {
LABEL_2:
            v4[v6] = *v16 >> 3;
            v6 = v5;
          }
          break;
        default:
          break;
      }
    }
LABEL_3:
    v5 = v6;
  }
  while ((int)v6 > 0);
  return result;
}

_QWORD *re2::DFA::RunWorkqOnEmptyString(_QWORD *result, int *a2, int *a3, int a4)
{
  _QWORD *v7;
  int *v8;
  int v9;
  int v10;
  int v11;

  *a3 = 0;
  a3[9] = a3[7];
  if (*a2)
  {
    v7 = result;
    v8 = (int *)*((_QWORD *)a2 + 2);
    do
    {
      v10 = *v8++;
      v9 = v10;
      if (a2[7] <= v10)
        v11 = -1;
      else
        v11 = v9;
      result = re2::DFA::AddToQueue(v7, a3, v11, a4);
    }
    while (v8 != (int *)(*((_QWORD *)a2 + 2) + 4 * *a2));
  }
  return result;
}

_QWORD *re2::DFA::RunWorkqOnByte(_QWORD *result, int *a2, uint64_t a3, int a4, int a5, _BYTE *a6, int a7)
{
  _QWORD *v13;
  int *v14;
  unsigned int v15;
  int v16;
  int *i;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  uint64_t v26;

  *(_DWORD *)a3 = 0;
  *(_DWORD *)(a3 + 36) = *(_DWORD *)(a3 + 28);
  if (*a2)
  {
    v13 = result;
    v14 = (int *)*((_QWORD *)a2 + 2);
    v15 = a4 - 65;
    v16 = a4 + 32;
    for (i = v14; i != &v14[*a2]; ++i)
    {
      v18 = *i;
      if (a2[7] <= (int)v18)
      {
        if (*a6)
          return result;
        if (!*(_BYTE *)(a3 + 40))
        {
          *(_BYTE *)(a3 + 40) = 0;
          v25 = *(_DWORD *)(a3 + 36);
          *(_DWORD *)(a3 + 36) = v25 + 1;
          if (*(_DWORD *)(a3 + 4) > v25)
          {
            v26 = *(_QWORD *)(a3 + 16);
            *(_DWORD *)(*(_QWORD *)(a3 + 8) + 4 * (int)v25) = *(_DWORD *)a3;
            *(_DWORD *)(v26 + 4 * (int)(*(_DWORD *)a3)++) = v25;
          }
        }
      }
      else
      {
        v19 = *(_QWORD *)(*v13 + 32);
        v20 = v19 + 8 * v18;
        v21 = *(_DWORD *)v20 & 7;
        if (v21 == 5)
        {
          if (a4 == 256 || !*(_BYTE *)(*v13 + 1))
          {
            *a6 = 1;
            if (!a7)
              return result;
          }
        }
        else if (v21 == 2)
        {
          if (*(_BYTE *)(v20 + 6))
            v22 = v15 >= 0x1A;
          else
            v22 = 1;
          v23 = v19 + 8 * v18;
          if (v22)
            v24 = a4;
          else
            v24 = v16;
          if (v24 >= *(unsigned __int8 *)(v23 + 4) && v24 <= *(unsigned __int8 *)(v20 + 5))
          {
            result = re2::DFA::AddToQueue(v13, (int *)a3, *(_DWORD *)v20 >> 3, a5);
            v14 = (int *)*((_QWORD *)a2 + 2);
          }
        }
      }
    }
  }
  return result;
}

unint64_t re2::DFA::RunStateOnByteUnlocked(uint64_t a1, unint64_t a2, int a3)
{
  pthread_rwlock_t *v6;
  unint64_t v7;

  v6 = (pthread_rwlock_t *)(a1 + 24);
  if (pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 24)))
    abort();
  v7 = re2::DFA::RunStateOnByte((uint64_t *)a1, a2, a3);
  if (pthread_rwlock_unlock(v6))
    abort();
  return v7;
}

void sub_1C3700EC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  re2::MutexLock::~MutexLock((pthread_rwlock_t **)va);
  _Unwind_Resume(a1);
}

unint64_t re2::DFA::RunStateOnByte(uint64_t *a1, unint64_t a2, int a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::ios_base *v12;
  unint64_t result;
  int *v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  _BOOL4 v22;
  int v23;
  _BOOL4 v26;
  _BOOL4 v27;
  int v28;
  int v29;
  int *v30;
  int *v31;
  int v32;
  int v33;
  int v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  std::ios_base *v41;
  int *v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  int v47;
  void *v48;
  uint64_t v49;
  _QWORD v50[8];
  __int128 v51;
  __int128 v52;
  int v53;
  uint64_t v54;

  if (a2 <= 2)
  {
    if (a2)
    {
      if (a2 == 2)
        return 2;
      LOBYTE(v48) = 0;
      v8 = MEMORY[0x1E0DE4FE0];
      v9 = MEMORY[0x1E0DE4FE0] + 64;
      v10 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
      v11 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
      v54 = MEMORY[0x1E0DE4FE0] + 64;
      v49 = v10;
      *(_QWORD *)((char *)&v50[-1] + *(_QWORD *)(v10 - 24)) = v11;
      v12 = (std::ios_base *)((char *)&v50[-1] + *(_QWORD *)(v49 - 24));
      std::ios_base::init(v12, v50);
      v12[1].__vftable = 0;
      v12[1].__fmtflags_ = -1;
      v49 = v8 + 24;
      v54 = v9;
      std::streambuf::basic_streambuf();
      v50[0] = MEMORY[0x1E0DE4FB8] + 16;
      v51 = 0u;
      v52 = 0u;
      v53 = 16;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v49, (uint64_t)"DeadState in RunStateOnByte", 27);
    }
    else
    {
      LOBYTE(v48) = 0;
      v37 = MEMORY[0x1E0DE4FE0];
      v38 = MEMORY[0x1E0DE4FE0] + 64;
      v39 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
      v40 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
      v54 = MEMORY[0x1E0DE4FE0] + 64;
      v49 = v39;
      *(_QWORD *)((char *)&v50[-1] + *(_QWORD *)(v39 - 24)) = v40;
      v41 = (std::ios_base *)((char *)&v50[-1] + *(_QWORD *)(v49 - 24));
      std::ios_base::init(v41, v50);
      v41[1].__vftable = 0;
      v41[1].__fmtflags_ = -1;
      v49 = v37 + 24;
      v54 = v38;
      std::streambuf::basic_streambuf();
      v50[0] = MEMORY[0x1E0DE4FB8] + 16;
      v51 = 0u;
      v52 = 0u;
      v53 = 16;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v49, (uint64_t)"NULL state in RunStateOnByte", 28);
    }
    LogMessage::~LogMessage(&v48);
    return 0;
  }
  else
  {
    v6 = *a1;
    if (a3 == 256)
      v7 = *(_DWORD *)(v6 + 20);
    else
      v7 = *(unsigned __int8 *)(v6 + a3 + 304);
    result = atomic_load((unint64_t *)(*(_QWORD *)(a2 + 16) + 8 * v7));
    if (!result)
    {
      v14 = (int *)a1[28];
      *v14 = 0;
      v14[9] = v14[7];
      v15 = *(_DWORD *)(a2 + 8);
      if (v15 >= 1)
      {
        v16 = 0;
        v17 = 0;
        v18 = *(_QWORD *)a2;
        while (1)
        {
          v19 = *(_DWORD *)(v18 + 4 * v17);
          if (v19 != -1)
            break;
          if (!*((_BYTE *)v14 + 40))
          {
            *((_BYTE *)v14 + 40) = 0;
            v19 = v14[9];
            v14[9] = v19 + 1;
LABEL_15:
            if (v14[1] > v19)
            {
              *(_DWORD *)(*((_QWORD *)v14 + 1) + 4 * (int)v19) = v16;
              *(_DWORD *)(*((_QWORD *)v14 + 2) + 4 * *v14) = v19;
              v16 = *v14 + 1;
              *v14 = v16;
              v15 = *(_DWORD *)(a2 + 8);
            }
          }
          if (++v17 >= v15)
            goto LABEL_18;
        }
        *((_BYTE *)v14 + 40) = 0;
        goto LABEL_15;
      }
LABEL_18:
      v20 = *(_DWORD *)(a2 + 12);
      v21 = HIWORD(v20);
      v22 = a3 == 10;
      v23 = v20 & 0xFFD | 2;
      if (a3 != 10)
        v23 = v20 & 0xFFF;
      v26 = a3 - 48 < 0xA || (a3 & 0xDFu) - 65 < 0x1A || a3 == 95;
      if (a3 == 256)
      {
        v23 |= 0xAu;
        v27 = 0;
      }
      else
      {
        v27 = v26;
      }
      if (((v20 & 0x2000) == 0) != v27)
        v28 = 32;
      else
        v28 = 16;
      v29 = v28 | v23;
      if ((v21 & ~(*(_DWORD *)(a2 + 12) & 0xFFF) & (v28 | v23)) != 0)
      {
        v30 = (int *)a1[29];
        *v30 = 0;
        v30[9] = v30[7];
        if (*v14)
        {
          v31 = (int *)*((_QWORD *)v14 + 2);
          do
          {
            v33 = *v31++;
            v32 = v33;
            if (v14[7] <= v33)
              v34 = -1;
            else
              v34 = v32;
            re2::DFA::AddToQueue(a1, v30, v34, v29);
          }
          while (v31 != (int *)(*((_QWORD *)v14 + 2) + 4 * *v14));
        }
        v36 = a1[28];
        v35 = (int *)a1[29];
        a1[28] = (uint64_t)v35;
        a1[29] = v36;
      }
      else
      {
        v35 = (int *)a1[28];
        v36 = a1[29];
      }
      LOBYTE(v48) = 0;
      re2::DFA::RunWorkqOnByte(a1, v35, v36, a3, a3 == 10, &v48, *((_DWORD *)a1 + 2));
      if (a3 == 256 && *((_DWORD *)a1 + 2) == 3)
      {
        v42 = (int *)a1[28];
      }
      else
      {
        v43 = a1[28];
        v42 = (int *)a1[29];
        a1[28] = (uint64_t)v42;
        a1[29] = v43;
      }
      if ((_BYTE)v48)
        v44 = v22 | 0x1000;
      else
        v44 = v22;
      if (v27)
        v45 = v44 | 0x2000;
      else
        v45 = v44;
      result = re2::DFA::WorkqToCachedState((re2::DFA *)a1, v42, v45);
      v46 = *a1;
      if (a3 == 256)
        v47 = *(_DWORD *)(v46 + 20);
      else
        v47 = *(unsigned __int8 *)(v46 + a3 + 304);
      atomic_store(result, (unint64_t *)(*(_QWORD *)(a2 + 16) + 8 * v47));
    }
  }
  return result;
}

void sub_1C3701388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  LogMessage::~LogMessage(&a9);
  _Unwind_Resume(a1);
}

re2::DFA::RWLocker *re2::DFA::RWLocker::RWLocker(re2::DFA::RWLocker *this, pthread_rwlock_t *a2)
{
  *(_QWORD *)this = a2;
  *((_BYTE *)this + 8) = 0;
  if (pthread_rwlock_rdlock(a2))
    abort();
  return this;
}

{
  *(_QWORD *)this = a2;
  *((_BYTE *)this + 8) = 0;
  if (pthread_rwlock_rdlock(a2))
    abort();
  return this;
}

uint64_t re2::DFA::RWLocker::LockForWriting(uint64_t this)
{
  uint64_t v1;

  if (!*(_BYTE *)(this + 8))
  {
    v1 = this;
    if (pthread_rwlock_unlock(*(pthread_rwlock_t **)this)
      || (this = pthread_rwlock_wrlock(*(pthread_rwlock_t **)v1), (_DWORD)this))
    {
      abort();
    }
    *(_BYTE *)(v1 + 8) = 1;
  }
  return this;
}

void re2::DFA::RWLocker::~RWLocker(pthread_rwlock_t **this)
{
  int v1;
  pthread_rwlock_t *v2;

  v1 = *((unsigned __int8 *)this + 8);
  v2 = *this;
  if (v1)
  {
    if (!pthread_rwlock_unlock(v2))
      return;
LABEL_5:
    abort();
  }
  if (pthread_rwlock_unlock(v2))
    goto LABEL_5;
}

{
  int v1;
  pthread_rwlock_t *v2;

  v1 = *((unsigned __int8 *)this + 8);
  v2 = *this;
  if (v1)
  {
    if (!pthread_rwlock_unlock(v2))
      return;
LABEL_5:
    abort();
  }
  if (pthread_rwlock_unlock(v2))
    goto LABEL_5;
}

void re2::DFA::ResetCache(re2::DFA *this, pthread_rwlock_t **a2)
{
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  _QWORD *v9;
  void *v11;
  uint64_t v12;
  uint64_t v13[8];
  __int128 v14;
  __int128 v15;
  int v16;
  uint64_t v17;

  v3 = a2 + 1;
  if (!*((_BYTE *)a2 + 8))
  {
    if (pthread_rwlock_unlock(*a2) || pthread_rwlock_wrlock(*a2))
      abort();
    goto LABEL_6;
  }
  if (!*((_BYTE *)this + 640))
  {
    LOBYTE(v11) = 0;
    v4 = MEMORY[0x1E0DE4FE0];
    v5 = MEMORY[0x1E0DE4FE0] + 64;
    v6 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v17 = MEMORY[0x1E0DE4FE0] + 64;
    v12 = v6;
    *(uint64_t *)((char *)&v13[-1] + *(_QWORD *)(v6 - 24)) = v7;
    v8 = (std::ios_base *)((char *)&v13[-1] + *(_QWORD *)(v12 - 24));
    std::ios_base::init(v8, v13);
    v8[1].__vftable = 0;
    v8[1].__fmtflags_ = -1;
    v12 = v4 + 24;
    v17 = v5;
    std::streambuf::basic_streambuf();
    v13[0] = MEMORY[0x1E0DE4FB8] + 16;
    v14 = 0u;
    v15 = 0u;
    v16 = 16;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)"DFA memory cache could be too small: ", 37);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)"only room for ", 14);
    v9 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" states.", 8);
    v3 = (char *)this + 640;
    LogMessage::~LogMessage(&v11);
LABEL_6:
    *v3 = 1;
  }
  *((_QWORD *)this + 64) = 0;
  *((_DWORD *)this + 130) = -1;
  *((_QWORD *)this + 66) = 0;
  *((_DWORD *)this + 134) = -1;
  *((_QWORD *)this + 68) = 0;
  *((_DWORD *)this + 138) = -1;
  *((_QWORD *)this + 70) = 0;
  *((_DWORD *)this + 142) = -1;
  *((_QWORD *)this + 72) = 0;
  *((_DWORD *)this + 146) = -1;
  *((_QWORD *)this + 74) = 0;
  *((_DWORD *)this + 150) = -1;
  *((_QWORD *)this + 76) = 0;
  *((_DWORD *)this + 154) = -1;
  *((_QWORD *)this + 78) = 0;
  *((_DWORD *)this + 158) = -1;
  re2::DFA::ClearCache(this);
  *((_QWORD *)this + 57) = *((_QWORD *)this + 58);
}

void sub_1C37016DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1C3BD4828](v1 + 120);
  _Unwind_Resume(a1);
}

void sub_1C3701704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  LogMessage::~LogMessage(&a9);
  _Unwind_Resume(a1);
}

uint64_t re2::DFA::StateSaver::StateSaver(uint64_t a1, uint64_t a2, unint64_t a3)
{
  void *v5;

  *(_QWORD *)a1 = a2;
  if (a3 <= 2)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 24) = 1;
    *(_QWORD *)(a1 + 32) = a3;
  }
  else
  {
    *(_BYTE *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a3 + 8);
    v5 = (void *)operator new[]();
    *(_QWORD *)(a1 + 8) = v5;
    memmove(v5, *(const void **)a3, 4 * *(int *)(a1 + 16));
  }
  return a1;
}

{
  void *v5;

  *(_QWORD *)a1 = a2;
  if (a3 <= 2)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 24) = 1;
    *(_QWORD *)(a1 + 32) = a3;
  }
  else
  {
    *(_BYTE *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a3 + 8);
    v5 = (void *)operator new[]();
    *(_QWORD *)(a1 + 8) = v5;
    memmove(v5, *(const void **)a3, 4 * *(int *)(a1 + 16));
  }
  return a1;
}

void re2::DFA::StateSaver::~StateSaver(re2::DFA::StateSaver *this)
{
  uint64_t v1;

  if (!*((_BYTE *)this + 24))
  {
    v1 = *((_QWORD *)this + 1);
    if (v1)
      MEMORY[0x1C3BD4840](v1, 0x1000C8052888210);
  }
}

{
  uint64_t v1;

  if (!*((_BYTE *)this + 24))
  {
    v1 = *((_QWORD *)this + 1);
    if (v1)
      MEMORY[0x1C3BD4840](v1, 0x1000C8052888210);
  }
}

uint64_t re2::DFA::StateSaver::Restore(re2::DFA::StateSaver *this)
{
  uint64_t v2;
  pthread_rwlock_t *v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  void *v11;
  uint64_t v12;
  uint64_t v13[8];
  __int128 v14;
  __int128 v15;
  int v16;
  uint64_t v17;
  pthread_rwlock_t *v18;

  if (*((_BYTE *)this + 24))
    return *((_QWORD *)this + 4);
  v3 = (pthread_rwlock_t *)(*(_QWORD *)this + 24);
  v18 = v3;
  if (pthread_rwlock_wrlock(v3))
    abort();
  v2 = re2::DFA::CachedState(*(re2::DFA **)this, *((int **)this + 1), *((unsigned int *)this + 4), *((unsigned int *)this + 5), v4);
  if (!v2)
  {
    LOBYTE(v11) = 0;
    v5 = MEMORY[0x1E0DE4FE0];
    v6 = MEMORY[0x1E0DE4FE0] + 64;
    v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v17 = MEMORY[0x1E0DE4FE0] + 64;
    v12 = v7;
    *(uint64_t *)((char *)&v13[-1] + *(_QWORD *)(v7 - 24)) = v8;
    v9 = (std::ios_base *)((char *)&v13[-1] + *(_QWORD *)(v12 - 24));
    std::ios_base::init(v9, v13);
    v9[1].__vftable = 0;
    v9[1].__fmtflags_ = -1;
    v12 = v5 + 24;
    v17 = v6;
    std::streambuf::basic_streambuf();
    v13[0] = MEMORY[0x1E0DE4FB8] + 16;
    v14 = 0u;
    v15 = 0u;
    v16 = 16;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)"StateSaver failed to restore state.", 35);
    LogMessage::~LogMessage(&v11);
  }
  if (pthread_rwlock_unlock(v3))
    abort();
  return v2;
}

void sub_1C3701A04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  LogMessage::~LogMessage((void **)va);
  re2::MutexLock::~MutexLock((pthread_rwlock_t **)(v2 - 88));
  _Unwind_Resume(a1);
}

uint64_t re2::DFA::SearchFFF(uint64_t *a1, char **a2)
{
  return re2::DFA::InlinedSearchLoop(a1, a2, 0, 0, 0);
}

uint64_t re2::DFA::InlinedSearchLoop(uint64_t *a1, char **a2, int a3, int a4, int a5)
{
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  int v10;
  char *v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  size_t v22;
  size_t v23;
  unint64_t v24;
  char v25;
  std::ios_base *v26;
  char **v27;
  uint64_t *v28;
  unsigned __int8 *v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  void *v33;
  size_t v34;
  unint64_t v35;
  char v36;
  char *v37;
  char *v38;
  int v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  _DWORD *v52;
  unint64_t v53;
  char *v54;
  unint64_t v55;
  int v56;
  uint64_t v57;
  _OWORD *v58;
  char *v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v72;
  pthread_rwlock_t *v73;
  char *v74;
  uint64_t v75;
  char *v77;
  unint64_t v80;
  pthread_rwlock_t *v81;
  uint64_t v82;
  uint64_t v83[8];
  __int128 v84;
  __int128 v85;
  int v86;
  uint64_t v87;
  uint64_t *v88;
  __int128 v89;
  __int128 v90;
  uint64_t *v91;
  __int128 v92;
  __int128 v93;

  v6 = (unint64_t)a2[5];
  v7 = *a2;
  if (a5)
    v8 = &(*a2)[*((int *)a2 + 2)];
  else
    v8 = *a2;
  if (a5)
    v9 = *a2;
  else
    v9 = &(*a2)[*((int *)a2 + 2)];
  v10 = *(_DWORD *)(v6 + 12);
  if ((v10 & 0x1000) != 0)
    v11 = v9;
  else
    v11 = 0;
  if ((v10 & 0x1000) != 0 && (a4 & 1) != 0)
  {
    a2[9] = v9;
    v12 = 1;
    return v12 & 1;
  }
  v74 = v11;
  v72 = (*(_DWORD *)(v6 + 12) & 0x1000u) >> 12;
  if (v9 == v8)
  {
    v19 = (unint64_t)a2[5];
LABEL_68:
    v6 = v19;
    if (a5)
    {
LABEL_69:
      v27 = a2;
      v28 = a1;
      v29 = (unsigned __int8 *)&(*a2)[*((int *)a2 + 2)];
      if (v29 == (unsigned __int8 *)&a2[2][*((int *)a2 + 6)])
        goto LABEL_74;
    }
    else
    {
LABEL_71:
      v27 = a2;
      v28 = a1;
      if (*a2 == a2[2])
      {
LABEL_74:
        v31 = *(_DWORD *)(*v28 + 20);
        LODWORD(v30) = 256;
        goto LABEL_75;
      }
      v29 = (unsigned __int8 *)(*a2 - 1);
    }
    v30 = *v29;
    v31 = *(unsigned __int8 *)(*v28 + v30 + 304);
LABEL_75:
    v32 = atomic_load((unint64_t *)(*(_QWORD *)(v6 + 16) + 8 * v31));
    if (v32)
      goto LABEL_96;
    v81 = (pthread_rwlock_t *)(v28 + 3);
    if (pthread_rwlock_wrlock((pthread_rwlock_t *)(v28 + 3)))
LABEL_140:
      abort();
    v32 = re2::DFA::RunStateOnByte(v28, v6, v30);
    if (pthread_rwlock_unlock((pthread_rwlock_t *)(v28 + 3)))
      abort();
    if (v32)
      goto LABEL_96;
    v93 = 0u;
    v92 = 0u;
    v91 = v28;
    if (v6 > 2)
    {
      *((_QWORD *)&v92 + 1) = *(_QWORD *)(v6 + 8);
      v34 = 4 * SDWORD2(v92);
      v33 = (void *)operator new[]();
      *(_QWORD *)&v92 = v33;
      memmove(v33, *(const void **)v6, v34);
    }
    else
    {
      v33 = 0;
      v92 = 0uLL;
      LOBYTE(v93) = 1;
      *((_QWORD *)&v93 + 1) = v6;
    }
    re2::DFA::ResetCache((re2::DFA *)v28, (pthread_rwlock_t **)v27[7]);
    v35 = re2::DFA::StateSaver::Restore((re2::DFA::StateSaver *)&v91);
    if (v35)
    {
      v81 = (pthread_rwlock_t *)(v28 + 3);
      if (pthread_rwlock_wrlock((pthread_rwlock_t *)(v28 + 3)))
        abort();
      v32 = re2::DFA::RunStateOnByte(v28, v35, v30);
      if (pthread_rwlock_unlock((pthread_rwlock_t *)(v28 + 3)))
        abort();
      if (v32)
      {
        v36 = 1;
LABEL_92:
        if (v6 >= 3 && v33)
          MEMORY[0x1C3BD4840](v33, 0x1000C8052888210);
        if ((v36 & 1) == 0)
        {
LABEL_135:
          v12 = 0;
          return v12 & 1;
        }
LABEL_96:
        if (v32 == 2)
        {
          v27[9] = v8;
          v12 = 1;
          return v12 & 1;
        }
        if (v32 < 3)
        {
          v12 = v72;
        }
        else
        {
          v12 = v72;
          if ((*(_BYTE *)(v32 + 13) & 0x10) != 0)
          {
            v37 = v27[10];
            if (v37 && *((_DWORD *)v28 + 2) == 3)
            {
              v77 = v8;
              v38 = *(char **)v37;
              *((_QWORD *)v37 + 1) = *(_QWORD *)v37;
              v39 = *(_DWORD *)(v32 + 8);
              if (v39 >= 1)
              {
                v40 = 0;
                while (1)
                {
                  v42 = *(int *)(*(_QWORD *)v32 + 4 * v40);
                  v43 = *(_QWORD *)(*v28 + 32);
                  if ((*(_DWORD *)(v43 + 8 * v42) & 7) != 5)
                    goto LABEL_107;
                  v44 = *(_DWORD *)(v43 + 8 * v42 + 4);
                  v45 = *((_QWORD *)v37 + 2);
                  if ((unint64_t)v38 >= v45)
                    break;
                  *(_DWORD *)v38 = v44;
                  v41 = v38 + 4;
LABEL_106:
                  *((_QWORD *)v37 + 1) = v41;
                  v39 = *(_DWORD *)(v32 + 8);
                  v38 = v41;
                  v28 = a1;
LABEL_107:
                  if (++v40 >= v39)
                    goto LABEL_136;
                }
                v46 = *(char **)v37;
                v47 = (uint64_t)&v38[-*(_QWORD *)v37];
                v48 = v47 >> 2;
                v49 = (v47 >> 2) + 1;
                if (v49 >> 62)
                  std::vector<re2::RE2 *>::__throw_length_error[abi:ne180100]();
                v50 = v45 - (_QWORD)v46;
                if (v50 >> 1 > v49)
                  v49 = v50 >> 1;
                if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL)
                  v49 = 0x3FFFFFFFFFFFFFFFLL;
                v80 = v49;
                if (v49)
                {
                  if (v49 >> 62)
                    std::__throw_bad_array_new_length[abi:ne180100]();
                  v51 = operator new(4 * v49);
                }
                else
                {
                  v51 = 0;
                }
                v52 = &v51[4 * v48];
                *v52 = v44;
                v41 = (char *)(v52 + 1);
                if (v38 == v46)
                {
                  v55 = v80;
                  goto LABEL_125;
                }
                v53 = v38 - 4 - v46;
                if (v53 < 0xBC
                  || &v51[v47 - 4 - (v53 & 0xFFFFFFFFFFFFFFFCLL)] > &v51[v47 - 4]
                  || &v38[-(v53 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v38 - 4
                  || (unint64_t)(v38 - &v51[v47]) < 0x20)
                {
                  v54 = v38;
                  v55 = v80;
                }
                else
                {
                  v57 = (v53 >> 2) + 1;
                  v54 = &v38[-4 * (v57 & 0x7FFFFFFFFFFFFFF8)];
                  v58 = &v51[4 * v48 - 16];
                  v59 = v38 - 16;
                  v60 = v57 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    v61 = *(_OWORD *)v59;
                    *(v58 - 1) = *((_OWORD *)v59 - 1);
                    *v58 = v61;
                    v58 -= 2;
                    v59 -= 32;
                    v60 -= 8;
                  }
                  while (v60);
                  v52 -= v57 & 0x7FFFFFFFFFFFFFF8;
                  v55 = v80;
                  if (v57 == (v57 & 0x7FFFFFFFFFFFFFF8))
                  {
LABEL_125:
                    *(_QWORD *)v37 = v52;
                    *((_QWORD *)v37 + 1) = v41;
                    *((_QWORD *)v37 + 2) = &v51[4 * v55];
                    if (v46)
                      operator delete(v46);
                    goto LABEL_106;
                  }
                }
                do
                {
                  v56 = *((_DWORD *)v54 - 1);
                  v54 -= 4;
                  *--v52 = v56;
                }
                while (v54 != v46);
                goto LABEL_125;
              }
LABEL_136:
              v12 = 1;
              v74 = v77;
            }
            else
            {
              v12 = 1;
              v74 = v8;
            }
          }
        }
        v27[9] = v74;
        return v12 & 1;
      }
      LogMessage::LogMessage((LogMessage *)&v81);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v82, (uint64_t)"RunStateOnByteUnlocked failed after Reset", 41);
      LogMessage::~LogMessage((void **)&v81);
    }
    v36 = 0;
    v32 = 0;
    *((_BYTE *)v27 + 64) = 1;
    goto LABEL_92;
  }
  v75 = *a1 + 304;
  v73 = (pthread_rwlock_t *)(a1 + 3);
  v68 = 0;
  v65 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v66 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v13 = -1;
  if (!a5)
    v13 = 1;
  v70 = v13;
  v64 = MEMORY[0x1E0DE4FE0] + 64;
  v63 = MEMORY[0x1E0DE4FB8] + 16;
  v14 = (unint64_t)a2[5];
  while (1)
  {
    if (a3 && v14 == v6)
    {
      v15 = *((_DWORD *)a2 + 12);
      if (a5)
      {
        v9 = (char *)memchr(v9, v15, v8 - v9);
        if (!v9)
          goto LABEL_69;
      }
      else
      {
        v21 = (char *)(v9 - v8);
        if (v9 == v8)
          goto LABEL_71;
        while (1)
        {
          v9 = &v21[(_QWORD)v7];
          if (v15 == v21[(_QWORD)v7 - 1])
            break;
          if (!--v21)
            goto LABEL_71;
        }
      }
    }
    v16 = v8;
    if (a5)
      v17 = v9;
    else
      v17 = v9 - 1;
    if (a5)
      ++v9;
    else
      --v9;
    v18 = *v17;
    v19 = atomic_load((unint64_t *)(*(_QWORD *)(v14 + 16) + 8 * *(unsigned __int8 *)(v75 + v18)));
    if (v19)
      goto LABEL_33;
    v81 = v73;
    if (pthread_rwlock_wrlock(v73))
      goto LABEL_140;
    v19 = re2::DFA::RunStateOnByte(a1, v14, v18);
    if (pthread_rwlock_unlock(v73))
      abort();
    if (v19)
    {
LABEL_33:
      v20 = v6;
      goto LABEL_34;
    }
    if (re2::FLAGS_re2_dfa_bail_when_slow && v68 && v9 - v68 < (unint64_t)(10 * a1[62]))
    {
      v12 = 0;
      *((_BYTE *)a2 + 64) = 1;
      return v12 & 1;
    }
    v92 = 0u;
    v93 = 0u;
    v91 = a1;
    if (v6 > 2)
    {
      *((_QWORD *)&v92 + 1) = *(_QWORD *)(v6 + 8);
      v22 = 4 * SDWORD2(v92);
      *(_QWORD *)&v92 = operator new[]();
      v69 = v92;
      memmove((void *)v92, *(const void **)v6, v22);
    }
    else
    {
      v69 = 0;
      v92 = 0uLL;
      LOBYTE(v93) = 1;
      *((_QWORD *)&v93 + 1) = v6;
    }
    v89 = 0u;
    v90 = 0u;
    v88 = a1;
    if (v14 > 2)
    {
      *((_QWORD *)&v89 + 1) = *(_QWORD *)(v14 + 8);
      v23 = 4 * SDWORD2(v89);
      *(_QWORD *)&v89 = operator new[]();
      v67 = v89;
      memmove((void *)v89, *(const void **)v14, v23);
    }
    else
    {
      v67 = 0;
      v89 = 0uLL;
      LOBYTE(v90) = 1;
      *((_QWORD *)&v90 + 1) = v14;
    }
    re2::DFA::ResetCache((re2::DFA *)a1, (pthread_rwlock_t **)a2[7]);
    v20 = re2::DFA::StateSaver::Restore((re2::DFA::StateSaver *)&v91);
    if (!v20)
      goto LABEL_58;
    v24 = re2::DFA::StateSaver::Restore((re2::DFA::StateSaver *)&v88);
    if (!v24)
      goto LABEL_58;
    v81 = v73;
    if (pthread_rwlock_wrlock(v73))
      abort();
    v19 = re2::DFA::RunStateOnByte(a1, v24, v18);
    if (pthread_rwlock_unlock(v73))
      abort();
    if (!v19)
    {
      LOBYTE(v81) = 0;
      v87 = v64;
      v82 = v66;
      *(uint64_t *)((char *)&v83[-1] + *(_QWORD *)(v66 - 24)) = v65;
      v26 = (std::ios_base *)((char *)&v83[-1] + *(_QWORD *)(v82 - 24));
      std::ios_base::init(v26, v83);
      v26[1].__vftable = 0;
      v26[1].__fmtflags_ = -1;
      v82 = MEMORY[0x1E0DE4FE0] + 24;
      v87 = MEMORY[0x1E0DE4FE0] + 64;
      std::streambuf::basic_streambuf();
      v83[0] = v63;
      v84 = 0u;
      v85 = 0u;
      v86 = 16;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v82, (uint64_t)"RunStateOnByteUnlocked failed after ResetCache", 46);
      LogMessage::~LogMessage((void **)&v81);
LABEL_58:
      v25 = 0;
      v19 = 0;
      *((_BYTE *)a2 + 64) = 1;
      goto LABEL_59;
    }
    v25 = 1;
LABEL_59:
    if (v14 >= 3 && v67)
      MEMORY[0x1C3BD4840](v67, 0x1000C8052888210);
    if (v6 >= 3 && v69)
      MEMORY[0x1C3BD4840](v69, 0x1000C8052888210);
    v68 = v9;
    if ((v25 & 1) == 0)
      goto LABEL_135;
LABEL_34:
    if (v19 <= 2)
      break;
    v8 = v16;
    if ((*(_BYTE *)(v19 + 13) & 0x10) != 0)
    {
      v74 = &v9[v70];
      if (a4)
      {
        a2[9] = v74;
        v12 = 1;
        return v12 & 1;
      }
      LOBYTE(v72) = 1;
    }
    v6 = v20;
    v14 = v19;
    if (v9 == v16)
      goto LABEL_68;
  }
  if (v19 == 1)
  {
    a2[9] = v74;
    v12 = v72;
  }
  else
  {
    a2[9] = v16;
    v12 = 1;
  }
  return v12 & 1;
}

void sub_1C37023C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28)
{
  unint64_t v28;
  uint64_t v29;

  LogMessage::~LogMessage(&a28);
  if (v28 >= 3)
  {
    if (v29)
      MEMORY[0x1C3BD4840](v29, 0x1000C8052888210);
  }
  _Unwind_Resume(a1);
}

uint64_t re2::DFA::SearchFFT(uint64_t *a1, char **a2)
{
  return re2::DFA::InlinedSearchLoop(a1, a2, 0, 0, 1);
}

uint64_t re2::DFA::SearchFTF(uint64_t *a1, char **a2)
{
  return re2::DFA::InlinedSearchLoop(a1, a2, 0, 1, 0);
}

uint64_t re2::DFA::SearchFTT(uint64_t *a1, char **a2)
{
  return re2::DFA::InlinedSearchLoop(a1, a2, 0, 1, 1);
}

uint64_t re2::DFA::SearchTFF(uint64_t *a1, char **a2)
{
  return re2::DFA::InlinedSearchLoop(a1, a2, 1, 0, 0);
}

uint64_t re2::DFA::SearchTFT(uint64_t *a1, char **a2)
{
  return re2::DFA::InlinedSearchLoop(a1, a2, 1, 0, 1);
}

uint64_t re2::DFA::SearchTTF(uint64_t *a1, char **a2)
{
  return re2::DFA::InlinedSearchLoop(a1, a2, 1, 1, 0);
}

uint64_t re2::DFA::SearchTTT(uint64_t *a1, char **a2)
{
  return re2::DFA::InlinedSearchLoop(a1, a2, 1, 1, 1);
}

uint64_t re2::DFA::SlowSearchLoop(uint64_t *a1, uint64_t a2)
{
  return re2::DFA::InlinedSearchLoop(a1, (char **)a2, *(_DWORD *)(a2 + 48) >= 0, *(unsigned __int8 *)(a2 + 33), *(unsigned __int8 *)(a2 + 34));
}

uint64_t re2::DFA::FastSearchLoop(uint64_t a1, uint64_t a2)
{
  return re2::DFA::FastSearchLoop(re2::DFA::SearchParams *)::Searches[2
                                                                    * (((*(_DWORD *)(a2 + 48) >> 29) & 4 | (2 * *(unsigned __int8 *)(a2 + 33)) | *(unsigned __int8 *)(a2 + 34)) ^ 4u)]();
}

uint64_t re2::DFA::AnalyzeSearch(re2::DFA *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::ios_base *v11;
  uint64_t result;
  int v14;
  int v15;
  unsigned int v16;
  BOOL v18;
  _QWORD *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::ios_base *v25;
  void *v26;
  uint64_t v27;
  _QWORD v28[8];
  __int128 v29;
  __int128 v30;
  int v31;
  uint64_t v32;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  if (*(_QWORD *)a2 < v4
    || (v5 = (unsigned __int8 *)(v3 + *(int *)(a2 + 8)), v6 = (unsigned __int8 *)(v4 + *(int *)(a2 + 24)), v5 > v6))
  {
    LOBYTE(v26) = 0;
    v7 = MEMORY[0x1E0DE4FE0];
    v8 = MEMORY[0x1E0DE4FE0] + 64;
    v9 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v10 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v32 = MEMORY[0x1E0DE4FE0] + 64;
    v27 = v9;
    *(_QWORD *)((char *)&v28[-1] + *(_QWORD *)(v9 - 24)) = v10;
    v11 = (std::ios_base *)((char *)&v28[-1] + *(_QWORD *)(v27 - 24));
    std::ios_base::init(v11, v28);
    v11[1].__vftable = 0;
    v11[1].__fmtflags_ = -1;
    v27 = v7 + 24;
    v32 = v8;
    std::streambuf::basic_streambuf();
    v28[0] = MEMORY[0x1E0DE4FB8] + 16;
    v29 = 0u;
    v30 = 0u;
    v31 = 16;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"Text is not inside context.", 27);
    LogMessage::~LogMessage(&v26);
    result = 1;
    *(_QWORD *)(a2 + 40) = 1;
    return result;
  }
  if (*(_BYTE *)(a2 + 34))
  {
    if (v3 != v4)
    {
      v14 = *(unsigned __int8 *)(v3 - 1);
      if (v14 == 10)
        goto LABEL_7;
      goto LABEL_11;
    }
LABEL_25:
    v16 = 0;
    v15 = 5;
    if (!*(_BYTE *)(a2 + 32))
      goto LABEL_26;
    goto LABEL_27;
  }
  if (v5 == v6)
    goto LABEL_25;
  v14 = *v5;
  if (v14 == 10)
  {
LABEL_7:
    v15 = 1;
    v16 = 2;
    if (!*(_BYTE *)(a2 + 32))
      goto LABEL_26;
LABEL_27:
    v16 |= 1u;
    goto LABEL_28;
  }
LABEL_11:
  v18 = (v14 - 48) < 0xA || (v14 & 0xFFFFFFDF) - 65 < 0x1A || v14 == 95;
  if (v18)
    v16 = 4;
  else
    v16 = 6;
  if (v18)
    v15 = 0x2000;
  else
    v15 = 0;
  if (*(_BYTE *)(a2 + 32))
    goto LABEL_27;
LABEL_26:
  if (**(_BYTE **)a1)
    goto LABEL_27;
LABEL_28:
  v19 = (_QWORD *)((char *)a1 + 16 * v16 + 512);
  if ((re2::DFA::AnalyzeSearchHelper((uint64_t)a1, a2, (uint64_t)v19, v15) & 1) != 0
    || (re2::DFA::ResetCache(a1, *(pthread_rwlock_t ***)(a2 + 56)),
        (re2::DFA::AnalyzeSearchHelper((uint64_t)a1, a2, (uint64_t)v19, v15) & 1) != 0))
  {
    *(_QWORD *)(a2 + 40) = *v19;
    v20 = atomic_load((unsigned int *)a1 + 4 * v16 + 130);
    *(_DWORD *)(a2 + 48) = v20;
    return 1;
  }
  else
  {
    LOBYTE(v26) = 0;
    v21 = MEMORY[0x1E0DE4FE0];
    v22 = MEMORY[0x1E0DE4FE0] + 64;
    v23 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v24 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v32 = MEMORY[0x1E0DE4FE0] + 64;
    v27 = v23;
    *(_QWORD *)((char *)&v28[-1] + *(_QWORD *)(v23 - 24)) = v24;
    v25 = (std::ios_base *)((char *)&v28[-1] + *(_QWORD *)(v27 - 24));
    std::ios_base::init(v25, v28);
    v25[1].__vftable = 0;
    v25[1].__fmtflags_ = -1;
    v27 = v21 + 24;
    v32 = v22;
    std::streambuf::basic_streambuf();
    v28[0] = MEMORY[0x1E0DE4FB8] + 16;
    v29 = 0u;
    v30 = 0u;
    v31 = 16;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"Failed to analyze start state.", 30);
    LogMessage::~LogMessage(&v26);
    result = 0;
    *(_BYTE *)(a2 + 64) = 1;
  }
  return result;
}

void sub_1C3702884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  LogMessage::~LogMessage(&a9);
  _Unwind_Resume(a1);
}

uint64_t re2::DFA::AnalyzeSearchHelper(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  unsigned int v4;
  _BOOL8 v5;
  pthread_rwlock_t *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  int v17;
  unint64_t v18;
  BOOL v19;

  v4 = atomic_load((unsigned int *)(a3 + 8));
  if (v4 != -1)
    return 1;
  v10 = (pthread_rwlock_t *)(a1 + 24);
  if (pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 24)))
    abort();
  if (*(_DWORD *)(a3 + 8) != -1)
  {
    v5 = 1;
    goto LABEL_13;
  }
  v11 = *(int **)(a1 + 224);
  *v11 = 0;
  v11[9] = v11[7];
  v12 = 4;
  if (!*(_BYTE *)(a2 + 32))
    v12 = 8;
  re2::DFA::AddToQueue((_QWORD *)a1, v11, *(_DWORD *)(*(_QWORD *)a1 + v12), a4);
  v13 = re2::DFA::WorkqToCachedState((re2::DFA *)a1, *(int **)(a1 + 224), a4);
  v14 = v13;
  *(_QWORD *)a3 = v13;
  if ((unint64_t)(v13 - 1) < 2)
  {
    v5 = 1;
    v15 = -3;
LABEL_10:
    atomic_store(v15, (unsigned int *)(a3 + 8));
    goto LABEL_13;
  }
  if (v13)
  {
    v17 = 0;
    v15 = -3;
    while (1)
    {
      v18 = re2::DFA::RunStateOnByte((uint64_t *)a1, v14, v17);
      v5 = v18 != 0;
      if (!v18)
        goto LABEL_10;
      v14 = *(_QWORD *)a3;
      if (v18 != *(_QWORD *)a3)
      {
        v19 = v15 == -3;
        v15 = v17;
        if (!v19)
        {
          v5 = 1;
          v15 = -2;
          goto LABEL_10;
        }
      }
      if (++v17 == 256)
      {
        v5 = 1;
        goto LABEL_10;
      }
    }
  }
  v5 = 0;
LABEL_13:
  if (pthread_rwlock_unlock(v10))
    abort();
  return v5;
}

void sub_1C3702A3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  re2::MutexLock::~MutexLock((pthread_rwlock_t **)va);
  _Unwind_Resume(a1);
}

unint64_t re2::Prog::GetDFA(uint64_t a1, int a2)
{
  int v2;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = a2;
  if (a2 != 3 && a2)
  {
    v4 = (unint64_t *)(a1 + 248);
    v2 = 1;
    v5 = atomic_load((unint64_t *)(a1 + 248));
    if (v5)
      return v5;
  }
  else
  {
    v4 = (unint64_t *)(a1 + 240);
    v5 = atomic_load((unint64_t *)(a1 + 240));
    if (v5)
      return v5;
  }
  if (pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 40)))
    abort();
  v5 = *v4;
  if (!*v4)
  {
    v6 = *(_QWORD *)(a1 + 256);
    v7 = *(unsigned __int8 *)(a1 + 2);
    v8 = (uint64_t *)operator new();
    v5 = (unint64_t)v8;
    if (v6 >= 0)
      v9 = v6;
    else
      v9 = v6 + 1;
    v10 = v9 >> 1;
    if ((v2 & 0xFFFFFFFD) == 1)
      v11 = v6;
    else
      v11 = 0;
    if (v7)
      v12 = v11;
    else
      v12 = v10;
    re2::DFA::DFA(v8, a1, v2, v12);
    *(_QWORD *)(a1 + 264) = re2::DeleteDFA;
    atomic_store(v5, v4);
  }
  if (pthread_rwlock_unlock((pthread_rwlock_t *)(a1 + 40)))
    abort();
  return v5;
}

void sub_1C3702B5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x1C3BD4858](v2, 0x10B0C4020215F48);
  re2::MutexLock::~MutexLock((pthread_rwlock_t **)va);
  _Unwind_Resume(a1);
}

re2::DFA *re2::DeleteDFA(re2::DFA *this, re2::DFA *a2)
{
  if (this)
  {
    re2::DFA::~DFA(this);
    JUMPOUT(0x1C3BD4858);
  }
  return this;
}

BOOL re2::Prog::SearchDFA(unsigned __int8 *a1, uint64_t *a2, uint64_t *a3, int a4, int a5, uint64_t a6, _BYTE *a7)
{
  _BOOL8 result;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  _BOOL4 v13;
  int v16;
  _BOOL4 v17;
  uint64_t v18;
  BOOL v23;
  char v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  unint64_t DFA;
  re2::DFA *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  BOOL v44;
  uint64_t v45;
  int v46;
  char v47;
  int v48;
  __int128 v49;
  uint64_t v50;
  int v51;
  int v52;
  __int128 v53;
  uint64_t v54;
  pthread_rwlock_t **v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  pthread_rwlock_t *v59;
  uint64_t v60;

  result = 0;
  *a7 = 0;
  v9 = *a2;
  if (*a3)
    v10 = a3;
  else
    v10 = a2;
  if (*a3)
    v11 = *a3;
  else
    v11 = *a2;
  v12 = *a1;
  v13 = *a1 != 0;
  if (a1[2])
    v13 = a1[1] != 0;
  if (!v13 || v11 == v9)
  {
    v16 = *((_DWORD *)v10 + 2);
    if (a1[2])
      v17 = v12 != 0;
    else
      v17 = a1[1] != 0;
    v18 = v9 + *((int *)a2 + 2);
    if (v17 && v11 + v16 != v18)
      return 0;
    v23 = a5 == 2 || v12 != 0;
    v24 = a4 == 1 || v23;
    if (a5 == 2)
      goto LABEL_35;
    if (a5 == 3)
    {
      v25 = 0;
      v48 = 1;
      v26 = 3;
      goto LABEL_36;
    }
    if (a1[1])
    {
LABEL_35:
      v25 = 0;
      v26 = 1;
      a5 = 1;
      v48 = 1;
    }
    else
    {
      v48 = 0;
      v26 = 1;
      v25 = 1;
    }
LABEL_36:
    v27 = *((_DWORD *)a3 + 3);
    if (a6)
      v28 = a5;
    else
      v28 = v26;
    if (a6)
      v29 = 0;
    else
      v29 = v25;
    DFA = re2::Prog::GetDFA((uint64_t)a1, v28);
    if (*(_BYTE *)(DFA + 16))
    {
      result = 0;
      *a7 = 1;
      return result;
    }
    v31 = (re2::DFA *)DFA;
    v47 = v24;
    v32 = a1[2];
    *a7 = 0;
    v59 = (pthread_rwlock_t *)(DFA + 256);
    v60 = 0;
    if (pthread_rwlock_rdlock((pthread_rwlock_t *)(DFA + 256)))
      abort();
    v49 = *(_OWORD *)a2;
    v53 = 0u;
    v50 = v11;
    v51 = v16;
    v52 = v27;
    v54 = 0xFFFFFFFFLL;
    v55 = &v59;
    v56 = 0;
    v57 = 0;
    v58 = 0;
    LOBYTE(v53) = v47;
    BYTE1(v53) = v29;
    BYTE2(v53) = v32 ^ 1;
    if ((re2::DFA::AnalyzeSearch(v31, (uint64_t)&v49) & 1) != 0)
    {
      if (*((_QWORD *)&v53 + 1) == 1)
      {
        v34 = 0;
        v35 = 0;
        goto LABEL_56;
      }
      if (*((_QWORD *)&v53 + 1) == 2)
      {
        if (v29 != (v32 == 0))
          v33 = *((int *)a2 + 2);
        else
          v33 = 0;
        v34 = *a2 + v33;
        v35 = 1;
LABEL_56:
        if ((_BYTE)v60)
        {
          if (!pthread_rwlock_unlock(v59))
            goto LABEL_58;
        }
        else if (!pthread_rwlock_unlock(v59))
        {
LABEL_58:
          if (*a7)
            v37 = 0;
          else
            v37 = v35;
          if (v37 != 1)
            return 0;
          if (v48)
          {
            v38 = a1[2];
            v39 = *a2;
            v40 = *((_DWORD *)a2 + 2);
            if (a1[2])
              v41 = 0;
            else
              v41 = *((int *)a2 + 2);
            v42 = v39 + v41;
            result = v34 == v42;
            if (!a6 || v34 != v42)
              return result;
          }
          else
          {
            if (!a6)
              return 1;
            v38 = a1[2];
            v39 = *a2;
            v40 = *((_DWORD *)a2 + 2);
          }
          v43 = v39 + v40;
          v44 = v38 == 0;
          if (v38)
            v45 = v34;
          else
            v45 = v39;
          if (v44)
            v46 = v34;
          else
            v46 = v43;
          *(_QWORD *)a6 = v45;
          *(_DWORD *)(a6 + 8) = v46 - v45;
          return 1;
        }
        abort();
      }
      v36 = ((uint64_t (*)(re2::DFA *, __int128 *))re2::DFA::FastSearchLoop(re2::DFA::SearchParams *)::Searches[2 * (((v54 >> 29) & 4 | (2 * BYTE1(v53)) | BYTE2(v53)) ^ 4)])(v31, &v49);
      if (!(_BYTE)v56)
      {
        v35 = v36;
        v34 = v57;
        goto LABEL_56;
      }
    }
    v34 = 0;
    v35 = 0;
    *a7 = 1;
    goto LABEL_56;
  }
  return result;
}

void sub_1C3702EEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  re2::DFA::RWLocker::~RWLocker((pthread_rwlock_t **)(v1 - 96));
  _Unwind_Resume(a1);
}

unint64_t re2::DFA::BuildAllStates(re2::DFA *this)
{
  unint64_t v1;
  re2::DFA *v2;
  char v3;
  uint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  char v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t *v10;
  pthread_rwlock_t *v11;
  unint64_t *v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _BYTE *v25;
  unint64_t *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t v30;
  _OWORD *v31;
  unint64_t *v32;
  uint64_t v33;
  __int128 v34;
  unint64_t v35;
  char *v36;
  _QWORD *v37;
  _QWORD *v38;
  void *v39;
  uint64_t v41;
  re2::DFA *v42;
  void *v43[2];
  void *__p[2];
  uint64_t v45;
  _OWORD v46[2];
  __int128 v47;
  uint64_t v48;
  pthread_rwlock_t **v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  pthread_rwlock_t *v53;
  uint64_t v54;
  pthread_rwlock_t *v55;

  if (!*((_BYTE *)this + 16))
  {
    v2 = this;
    v53 = (pthread_rwlock_t *)((char *)this + 256);
    v54 = 0;
    if (pthread_rwlock_rdlock((pthread_rwlock_t *)((char *)this + 256)))
      abort();
    v47 = 0u;
    memset(v46, 0, sizeof(v46));
    v48 = 0xFFFFFFFFLL;
    v49 = &v53;
    v50 = 0;
    v51 = 0;
    v52 = 0;
    v3 = re2::DFA::AnalyzeSearch(v2, (uint64_t)v46);
    v6 = *((_QWORD *)&v47 + 1);
    if (*((_QWORD *)&v47 + 1) > 2uLL)
      v7 = v3;
    else
      v7 = 0;
    if ((v7 & 1) == 0)
    {
      v1 = 0;
      goto LABEL_47;
    }
    *(_OWORD *)v43 = 0u;
    *(_OWORD *)__p = 0u;
    v45 = 1065353216;
    std::__hash_table<re2::DFA::State *,re2::DFA::StateHash,re2::DFA::StateEqual,std::allocator<re2::DFA::State *>>::__emplace_unique_key_args<re2::DFA::State *,re2::DFA::State * const&>((float *)v43, *((uint64_t *)&v47 + 1), *((uint64_t *)&v47 + 1), v4, v5);
    v8 = (unint64_t *)operator new(8uLL);
    v9 = 0;
    *v8 = v6;
    v10 = v8 + 1;
    v11 = (pthread_rwlock_t *)((char *)v2 + 24);
    v12 = v8 + 1;
    v42 = v2;
LABEL_10:
    v13 = 0;
    v41 = v9;
    v14 = v8[v9];
    while (1)
    {
      v55 = v11;
      if (pthread_rwlock_wrlock(v11))
        abort();
      v15 = re2::DFA::RunStateOnByte((uint64_t *)v2, v14, v13);
      if (pthread_rwlock_unlock(v11))
        abort();
      if (v15 < 3
        || std::__hash_table<re2::DFA::State *,re2::DFA::StateHash,re2::DFA::StateEqual,std::allocator<re2::DFA::State *>>::find<re2::DFA::State *>(v43, v15, v16, v17, v18))
      {
        goto LABEL_12;
      }
      std::__hash_table<re2::DFA::State *,re2::DFA::StateHash,re2::DFA::StateEqual,std::allocator<re2::DFA::State *>>::__emplace_unique_key_args<re2::DFA::State *,re2::DFA::State * const&>((float *)v43, v15, v15, v19, v20);
      if (v10 >= v12)
        break;
      *v10++ = v15;
LABEL_12:
      if (++v13 == 257)
      {
        v9 = v41 + 1;
        if (v41 + 1 < (unint64_t)(v10 - v8))
          goto LABEL_10;
        if (v8)
          operator delete(v8);
        v37 = __p[0];
        if (__p[0])
        {
          do
          {
            v38 = (_QWORD *)*v37;
            operator delete(v37);
            v37 = v38;
          }
          while (v38);
        }
        v1 = (unint64_t)((char *)v10 - (char *)v8) >> 3;
        v39 = v43[0];
        v43[0] = 0;
        if (v39)
          operator delete(v39);
LABEL_47:
        if ((_BYTE)v54)
        {
          if (!pthread_rwlock_unlock(v53))
            return v1;
        }
        else if (!pthread_rwlock_unlock(v53))
        {
          return v1;
        }
        abort();
      }
    }
    v21 = v10 - v8;
    v22 = v21 + 1;
    if ((unint64_t)(v21 + 1) >> 61)
      std::vector<re2::RE2 *>::__throw_length_error[abi:ne180100]();
    if (((char *)v12 - (char *)v8) >> 2 > v22)
      v22 = ((char *)v12 - (char *)v8) >> 2;
    if ((unint64_t)((char *)v12 - (char *)v8) >= 0x7FFFFFFFFFFFFFF8)
      v23 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v23 = v22;
    if (v23)
    {
      if (v23 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v24 = v23;
      v25 = operator new(8 * v23);
      v23 = v24;
    }
    else
    {
      v25 = 0;
    }
    v26 = (unint64_t *)&v25[8 * v21];
    *v26 = v15;
    v27 = v26 + 1;
    if (v10 != v8)
    {
      v28 = (char *)(v10 - 1) - (char *)v8;
      if (v28 >= 0x58)
      {
        if ((unint64_t)((char *)v8 - v25) >= 0x20)
        {
          v30 = (v28 >> 3) + 1;
          v29 = &v10[-(v30 & 0x3FFFFFFFFFFFFFFCLL)];
          v31 = &v25[8 * v21 - 16];
          v32 = v10 - 2;
          v33 = v30 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v34 = *(_OWORD *)v32;
            *(v31 - 1) = *((_OWORD *)v32 - 1);
            *v31 = v34;
            v31 -= 2;
            v32 -= 4;
            v33 -= 4;
          }
          while (v33);
          v26 -= v30 & 0x3FFFFFFFFFFFFFFCLL;
          if (v30 == (v30 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_37;
        }
        else
        {
          v29 = v10;
        }
      }
      else
      {
        v29 = v10;
      }
      do
      {
        v35 = *--v29;
        *--v26 = v35;
      }
      while (v29 != v8);
    }
LABEL_37:
    v36 = &v25[8 * v23];
    if (v8)
      operator delete(v8);
    v8 = v26;
    v10 = v27;
    v2 = v42;
    v12 = (unint64_t *)v36;
    goto LABEL_12;
  }
  return 0;
}

void sub_1C3703234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  std::unordered_set<re2::DFA::State *,re2::DFA::StateHash,re2::DFA::StateEqual,std::allocator<re2::DFA::State *>>::~unordered_set[abi:ne180100]((uint64_t)va);
  re2::DFA::RWLocker::~RWLocker((pthread_rwlock_t **)(v3 - 112));
  _Unwind_Resume(a1);
}

unint64_t re2::Prog::BuildEntireDFA(uint64_t a1, int a2)
{
  re2::DFA *DFA;

  DFA = (re2::DFA *)re2::Prog::GetDFA(a1, a2);
  return re2::DFA::BuildAllStates(DFA);
}

uint64_t SGScalesRecordTime(uint64_t a1, double a2)
{
  return +[SGAggregateLogging pushValue:toDistKeyWithDomain:suffix:](SGAggregateLogging, "pushValue:toDistKeyWithDomain:suffix:", CFSTR("timing"), a1, a2 / 1000000.0);
}

unint64_t SGMachTimeToNanoseconds(uint64_t a1)
{
  if (SGMachTimeToNanoseconds_onceToken != -1)
    dispatch_once(&SGMachTimeToNanoseconds_onceToken, &__block_literal_global_13797);
  return (unint64_t)SGMachTimeToNanoseconds_machTimebaseInfo * a1 / *(unsigned int *)algn_1ED52979C;
}

void sub_1C370368C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C370376C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__13913(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__13914(uint64_t a1)
{

}

void sub_1C370423C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C37044A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C3704D9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1C37063A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;

  _Block_object_dispose(&a65, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__14015(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__14016(uint64_t a1)
{

}

_WORD *SGFeatureVectorSerialize(_WORD *a1, char a2)
{
  _WORD *v3;
  uint64_t v4;
  id v5;

  if (a1)
  {
    v3 = a1;
    if ((unsigned __int16)a1[1] - 1 > 2)
      v4 = 0;
    else
      v4 = qword_1C3858AC8[(unsigned __int16)(a1[1] - 1)];
    v5 = objc_alloc(MEMORY[0x1E0C99D50]);
    if ((a2 & 1) != 0)
      return (id)objc_msgSend(v5, "initWithBytesNoCopy:length:freeWhenDone:", v3, v4, 0);
    a1 = (_WORD *)objc_msgSend(v5, "initWithBytes:length:", v3, v4);
  }
  return a1;
}

uint64_t SGFeatureVectorSize(uint64_t a1)
{
  if (*(unsigned __int16 *)(a1 + 2) - 1 > 2)
    return 0;
  else
    return qword_1C3858AC8[(unsigned __int16)(*(_WORD *)(a1 + 2) - 1)];
}

__int16 *SGFeatureVectorParse(void *a1)
{
  id v1;
  void *v2;
  __int16 *v3;
  _DWORD *v4;
  unsigned int v5;
  unsigned int v6;
  size_t v7;
  size_t v8;
  void *v9;
  __int16 *v10;
  __int16 *v11;
  int v12;
  uint64_t j;
  int v14;
  uint64_t i;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend(v1, "readDataOfLength:", 4);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v2, "length") != 4)
    goto LABEL_7;
  v3 = (__int16 *)objc_msgSend(objc_retainAutorelease(v2), "bytes");
  v4 = v3;
  v5 = (unsigned __int16)v3[1];
  if (*v3 == -2)
  {
    v5 = __rev16(v5);
    v3[1] = v5;
  }
  v6 = v5 - 1;
  if (v6 <= 2)
  {
    v7 = qword_1C3858AC8[(unsigned __int16)v6];
    v8 = v7 - 4;
    objc_msgSend(v1, "readDataOfLength:", v7 - 4);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v9, "length") >= v7 - 4)
    {
      v11 = (__int16 *)malloc_type_malloc(v7, 0x62BFDA37uLL);
      v10 = v11;
      if (v11)
      {
        *(_DWORD *)v11 = *v4;
        memcpy(v11 + 2, (const void *)objc_msgSend(objc_retainAutorelease(v9), "bytes"), v8);
        v12 = (unsigned __int16)v10[1];
        if (v12 == 3)
        {
          v14 = *v10;
          v17 = 0x140010000C0008;
          v18 = 24;
          if (v14 == -2)
          {
            for (i = 0; i != 10; i += 2)
              *(_DWORD *)((char *)v10 + *(unsigned __int16 *)((char *)&v17 + i)) = bswap32(*(_DWORD *)((char *)v10 + *(unsigned __int16 *)((char *)&v17 + i)));
          }
        }
        else if (v12 == 1 && *v10 == -2)
        {
          for (j = 0; j != 9; ++j)
            *(_DWORD *)((char *)v10 + (unsigned __int16)word_1C3858AB6[j]) = bswap32(*(_DWORD *)((char *)v10
                                                                                               + (unsigned __int16)word_1C3858AB6[j]));
        }
      }
    }
    else
    {
      v10 = 0;
    }

  }
  else
  {
LABEL_7:
    v10 = 0;
  }

  return v10;
}

void SGFeatureVectorLog(uint64_t a1)
{
  int v2;
  NSObject *v3;
  int v4;
  int v5;
  int v6;
  const char *v7;
  const char *v8;
  const char *v9;
  const char *v10;
  const char *v11;
  const char *v12;
  double v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  const char *v19;
  NSObject *v20;
  uint32_t v21;
  const char *v22;
  const char *v23;
  const char *v24;
  const char *v25;
  double v26;
  int v27;
  int v28;
  int v29;
  int v30;
  const char *v31;
  const char *v32;
  const char *v33;
  const char *v34;
  int v35;
  const char *v36;
  int v37;
  _BYTE v38[10];
  const char *v39;
  _BYTE v40[10];
  _BYTE v41[10];
  _BYTE v42[10];
  const char *v43;
  _BYTE v44[10];
  __int16 v45;
  double v46;
  __int16 v47;
  int v48;
  __int16 v49;
  int v50;
  __int16 v51;
  int v52;
  __int16 v53;
  int v54;
  __int16 v55;
  int v56;
  __int16 v57;
  const char *v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v2 = *(unsigned __int16 *)(a1 + 2);
  switch(v2)
  {
    case 3:
      sgLogHandle();
      v3 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        v22 = "True";
        if (*(_BYTE *)(a1 + 4))
          v23 = "True";
        else
          v23 = "False";
        if (*(_BYTE *)(a1 + 5))
          v24 = "True";
        else
          v24 = "False";
        if (*(_BYTE *)(a1 + 6))
          v25 = "True";
        else
          v25 = "False";
        if (!*(_BYTE *)(a1 + 7))
          v22 = "False";
        v26 = *(float *)(a1 + 8);
        v27 = *(_DWORD *)(a1 + 12);
        v28 = *(_DWORD *)(a1 + 16);
        v29 = *(_DWORD *)(a1 + 20);
        v30 = *(_DWORD *)(a1 + 24);
        v37 = 136317186;
        *(_QWORD *)v38 = v23;
        *(_WORD *)&v38[8] = 2080;
        v39 = v24;
        *(_WORD *)v40 = 2080;
        *(_QWORD *)&v40[2] = v25;
        *(_WORD *)v41 = 2080;
        *(_QWORD *)&v41[2] = v22;
        *(_WORD *)v42 = 2048;
        *(double *)&v42[2] = v26;
        LOWORD(v43) = 1024;
        *(_DWORD *)((char *)&v43 + 2) = v27;
        HIWORD(v43) = 1024;
        *(_DWORD *)v44 = v28;
        *(_WORD *)&v44[4] = 1024;
        *(_DWORD *)&v44[6] = v29;
        v45 = 1024;
        LODWORD(v46) = v30;
        v19 = "SGDetectionNotabilityFeatureVec: <\n"
              "  Is phone number: %s\n"
              "  Is address: %s\n"
              "  In HMM-detected sig: %s\n"
              "  In DD sig: %s\n"
              "  How far down the email was this found?: %0.3f\n"
              "  Phone numbers in sig: %i\n"
              "  Phone numbers in email: %i\n"
              "  Addresses in sig: %i\n"
              "  Addresses in email: %i\n"
              ">";
        v20 = v3;
        v21 = 76;
        goto LABEL_52;
      }
      break;
    case 2:
      sgLogHandle();
      v3 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        v31 = "True";
        if (*(_BYTE *)(a1 + 4))
          v32 = "True";
        else
          v32 = "False";
        if (*(_BYTE *)(a1 + 5))
          v33 = "True";
        else
          v33 = "False";
        if (*(_BYTE *)(a1 + 6))
          v34 = "True";
        else
          v34 = "False";
        v35 = *(unsigned __int8 *)(a1 + 8);
        if (*(_BYTE *)(a1 + 7))
          v36 = "True";
        else
          v36 = "False";
        v37 = 136316162;
        if (!v35)
          v31 = "False";
        *(_QWORD *)v38 = v32;
        *(_WORD *)&v38[8] = 2080;
        v39 = v33;
        *(_WORD *)v40 = 2080;
        *(_QWORD *)&v40[2] = v34;
        *(_WORD *)v41 = 2080;
        *(_QWORD *)&v41[2] = v36;
        *(_WORD *)v42 = 2080;
        *(_QWORD *)&v42[2] = v31;
        v19 = "SGInhumanityFeatureVec: <\n"
              "  Has one or more inhuman-looking headers: %s\n"
              "  Author email address looks inhuman: %s\n"
              "  Author name looks inhuman: %s\n"
              "  Body of email contains inhuman phrase: %s\n"
              "  Domain is a template sender: %s\n"
              ">";
        v20 = v3;
        v21 = 52;
        goto LABEL_52;
      }
      break;
    case 1:
      sgLogHandle();
      v3 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        v4 = *(_DWORD *)(a1 + 4);
        v5 = *(_DWORD *)(a1 + 8);
        v6 = *(_DWORD *)(a1 + 12);
        v7 = "True";
        if (*(_BYTE *)(a1 + 16))
          v8 = "True";
        else
          v8 = "False";
        if (*(_BYTE *)(a1 + 17))
          v9 = "True";
        else
          v9 = "False";
        if (*(_BYTE *)(a1 + 18))
          v10 = "True";
        else
          v10 = "False";
        if (*(_BYTE *)(a1 + 19))
          v11 = "True";
        else
          v11 = "False";
        if (*(_BYTE *)(a1 + 20))
          v12 = "True";
        else
          v12 = "False";
        v13 = *(float *)(a1 + 24);
        v14 = *(_DWORD *)(a1 + 28);
        v15 = *(_DWORD *)(a1 + 32);
        v16 = *(_DWORD *)(a1 + 36);
        v17 = *(_DWORD *)(a1 + 40);
        v18 = *(_DWORD *)(a1 + 44);
        if (!*(_BYTE *)(a1 + 48))
          v7 = "False";
        v37 = 67112706;
        *(_DWORD *)v38 = v4;
        *(_WORD *)&v38[4] = 1024;
        *(_DWORD *)&v38[6] = v5;
        LOWORD(v39) = 1024;
        *(_DWORD *)((char *)&v39 + 2) = v6;
        HIWORD(v39) = 2080;
        *(_QWORD *)v40 = v8;
        *(_WORD *)&v40[8] = 2080;
        *(_QWORD *)v41 = v9;
        *(_WORD *)&v41[8] = 2080;
        *(_QWORD *)v42 = v10;
        *(_WORD *)&v42[8] = 2080;
        v43 = v11;
        *(_WORD *)v44 = 2080;
        *(_QWORD *)&v44[2] = v12;
        v45 = 2048;
        v46 = v13;
        v47 = 1024;
        v48 = v14;
        v49 = 1024;
        v50 = v15;
        v51 = 1024;
        v52 = v16;
        v53 = 1024;
        v54 = v17;
        v55 = 1024;
        v56 = v18;
        v57 = 2080;
        v58 = v7;
        v19 = "SGRealtimeContactConfidenceFeatureVec: <\n"
              "  contacts with phone number matches: %i\n"
              "  contacts with name matches: %i\n"
              "  contact with both phone and name matches: %i\n"
              "  Phone number matches an existing contact: %s\n"
              "  Name matches an existing contact: %s\n"
              "  Email matches an existing contact: %s\n"
              "  IM Address matches an existing contact: %s\n"
              "  Existing contact has address: %s\n"
              "  Address match with existing contact, if both have addrs: %0.3f\n"
              "  New phone numbers: %i\n"
              "  New emails: %i\n"
              "  New IM addresses: %i\n"
              "  New addresses: %i\n"
              "  Length of name: %i\n"
              "  Name has at-sign: %s\n"
              ">";
        v20 = v3;
        v21 = 120;
LABEL_52:
        _os_log_impl(&dword_1C3607000, v20, OS_LOG_TYPE_INFO, v19, (uint8_t *)&v37, v21);
      }
      break;
    default:
      return;
  }

}

void sub_1C370AB08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a33, 8);
  _Unwind_Resume(a1);
}

void sub_1C370B424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C370B778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C370D81C(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x1C370D650);
  }
  _Unwind_Resume(exc_buf);
}

id patterns_14444()
{
  if (patterns_onceToken_14447 != -1)
    dispatch_once(&patterns_onceToken_14447, &__block_literal_global_168);
  return (id)patterns_patterns_14448;
}

void __patterns_block_invoke_14449()
{
  uint64_t v0;
  void *v1;

  +[SGPatterns patternsForClass:](SGPatterns, "patternsForClass:", objc_opt_class());
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)patterns_patterns_14448;
  patterns_patterns_14448 = v0;

}

id SGNamesAsciify(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;

  v1 = a1;
  v2 = v1;
  if (v1 && (isLowercaseAscii(v1) & 1) == 0)
  {
    v3 = (void *)MEMORY[0x1C3BD4F6C]();
    objc_msgSend(v2, "lowercaseString");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_autoreleasePoolPop(v3);

    if ((isLowercaseAscii(v4) & 1) != 0)
    {
      v2 = v4;
    }
    else if (v4)
    {
      _PASSimpleICUTransform();
      v2 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v2 = 0;
    }
  }
  return v2;
}

id letters(void *a1)
{
  id v1;
  size_t v2;
  char *v3;
  __CFString *v4;
  void *v5;
  CFIndex Length;
  const UniChar *CharactersPtr;
  const char *CStringPtr;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  CFIndex v15;
  UniChar v16;
  unsigned int v17;
  int64_t v18;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  CFIndex v23;
  int v24;
  uint64_t v25;
  void *v26;
  int v28;
  id v29;
  uint64_t v30;
  size_t v31;
  _OWORD buffer[8];
  __CFString *v33;
  const UniChar *v34;
  const char *v35;
  uint64_t v36;
  CFIndex v37;
  int64_t v38;
  int64_t v39;
  uint64_t v40;
  CFRange v41;

  v40 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = objc_msgSend(v1, "length");
  buffer[0] = 0uLL;
  if (v2 > 0x200)
  {
    v28 = malloc_type_posix_memalign((void **)buffer, 8uLL, v2, 0x778FEE5FuLL);
    BYTE8(buffer[0]) = 0;
    if (v28)
    {
      objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99850], CFSTR("malloc failed"), 0);
      v29 = (id)objc_claimAutoreleasedReturnValue();
      objc_exception_throw(v29);
    }
    v3 = *(char **)&buffer[0];
  }
  else
  {
    MEMORY[0x1E0C80A78]();
    v3 = (char *)&v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
    bzero(v3, v2);
  }
  v4 = (__CFString *)v1;
  objc_opt_self();
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
  {
    memset(buffer, 0, sizeof(buffer));
    Length = CFStringGetLength(v4);
    v33 = v4;
    v36 = 0;
    v37 = Length;
    CharactersPtr = CFStringGetCharactersPtr(v4);
    CStringPtr = 0;
    v34 = CharactersPtr;
    if (!CharactersPtr)
      CStringPtr = CFStringGetCStringPtr(v4, 0x600u);
    v31 = v2;
    v38 = 0;
    v39 = 0;
    v35 = CStringPtr;
    if (Length >= 1)
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v12 = 64;
      v13 = MEMORY[0x1E0C80978];
      while (1)
      {
        if ((unint64_t)v10 >= 4)
          v14 = 4;
        else
          v14 = v10;
        v15 = v37;
        if (v37 <= v10)
        {
          v17 = 0;
          LOBYTE(v16) = 0;
        }
        else
        {
          if (v34)
          {
            v16 = v34[v10 + v36];
          }
          else if (v35)
          {
            v16 = v35[v36 + v10];
          }
          else
          {
            v18 = v38;
            if (v39 <= v10 || v38 > v10)
            {
              v20 = v14 + v9;
              v21 = v12 - v14;
              v22 = v10 - v14;
              v23 = v22 + 64;
              if (v22 + 64 >= v37)
                v23 = v37;
              v38 = v22;
              v39 = v23;
              if (v37 >= v21)
                v15 = v21;
              v41.length = v15 + v20;
              v41.location = v22 + v36;
              CFStringGetCharacters(v33, v41, (UniChar *)buffer);
              v18 = v38;
            }
            v16 = *((_WORD *)buffer + v10 - v18);
          }
          v17 = v16;
          if (v16 > 0x7Fu)
          {
            v24 = __maskrune(v16, 0x100uLL);
            LOBYTE(v16) = v17;
            if (!v24)
              goto LABEL_30;
LABEL_29:
            v3[v11++] = v16;
            goto LABEL_30;
          }
        }
        if ((*(_DWORD *)(v13 + 4 * v17 + 60) & 0x100) != 0)
          goto LABEL_29;
LABEL_30:
        ++v10;
        --v9;
        ++v12;
        if (Length == v10)
          goto LABEL_36;
      }
    }
    v11 = 0;
LABEL_36:
    v2 = v31;
  }
  else
  {
    v11 = 0;
  }

  if (v11 == v2)
  {
    v25 = -[__CFString copy](v4, "copy");
  }
  else
  {
    v3[v11] = 0;
    v25 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithCString:encoding:", v3, 1);
  }
  v26 = (void *)v25;
  if (v2 >= 0x201)
    free(v3);

  return v26;
}

__CFString *sketchWithInitialAndName(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  __CFString *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  const char *v10;
  const char *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  __CFString *v16;
  __CFString *v17;
  int v19;
  id v20;
  uint64_t v21;
  void *memptr;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  v6 = &stru_1E7DB83A8;
  if (v3 && v4)
  {
    v7 = objc_msgSend(v3, "length");
    if (v7 != 1)
    {
      if (!v7)
      {
        v6 = v5;
        goto LABEL_17;
      }
      v8 = (void *)MEMORY[0x1C3BD4F6C]();
      objc_msgSend(v3, "substringWithRange:", 0, 1);
      v9 = objc_claimAutoreleasedReturnValue();

      objc_autoreleasePoolPop(v8);
      v3 = (id)v9;
    }
    v10 = (const char *)objc_msgSend(objc_retainAutorelease(v5), "UTF8String");
    v3 = objc_retainAutorelease(v3);
    v11 = (const char *)objc_msgSend(v3, "UTF8String");
    v6 = &stru_1E7DB83A8;
    if (v10)
    {
      v12 = v11;
      if (v11)
      {
        v13 = strlen(v11);
        v14 = v13 + strlen(v10) + 2;
        memptr = 0;
        v23 = 0;
        if (v14 > 0x200)
        {
          v19 = malloc_type_posix_memalign(&memptr, 8uLL, v14, 0x95FD74B8uLL);
          LOBYTE(v23) = 0;
          if (v19)
          {
            objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99850], CFSTR("malloc failed"), 0);
            v20 = (id)objc_claimAutoreleasedReturnValue();
            objc_exception_throw(v20);
          }
          v15 = (char *)memptr;
        }
        else
        {
          MEMORY[0x1E0C80A78]();
          v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
          bzero(v15, v14);
        }
        snprintf(v15, v14, "%s.%s", v12, v10);
        v16 = (__CFString *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithUTF8String:", v15);
        if (v14 >= 0x201)
          free(v15);
        if (v16)
          v17 = v16;
        else
          v17 = &stru_1E7DB83A8;
        v6 = v17;

      }
    }
  }
LABEL_17:

  return v6;
}

id SGNamesOnlyNameChars(void *a1)
{
  id v1;
  void *v2;

  if (a1)
  {
    v1 = a1;
    _PASGetNameCharacterSet();
    _PASKeepOnlyCharacterSet();
    v2 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id tokenizeName(void *a1)
{
  id v1;
  id v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  _QWORD v10[4];
  id v11;
  id v12;
  id v13;

  v1 = a1;
  if (tokenizeName__pasOnceToken35 != -1)
    dispatch_once(&tokenizeName__pasOnceToken35, &__block_literal_global_173);
  v2 = (id)tokenizeName__pasExprOnceResult;
  v3 = (void *)objc_opt_new();
  objc_msgSend(v2, "result");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __tokenizeName_block_invoke_3;
  v10[3] = &unk_1E7DAD498;
  v13 = v1;
  v11 = v1;
  v5 = v3;
  v12 = v5;
  v6 = v1;
  objc_msgSend(v4, "runWithLockAcquired:", v10);

  v7 = v12;
  v8 = v5;

  return v8;
}

long double limitedTermProb(void *a1)
{
  unsigned int v1;
  double v2;
  long double result;

  v1 = nameData(a1);
  v2 = (double)(int)((v1 >> 12) + 1) / 47171077.0;
  if ((v1 & 2) == 0)
    v2 = 0.0000000211994312;
  result = log10(v2);
  if (result < -3.5)
    return -3.5;
  return result;
}

uint64_t nameData(void *a1)
{
  id v1;
  id v2;
  uint64_t v3;

  v1 = a1;
  if ((unint64_t)objc_msgSend(v1, "length") > 0x20)
  {
    v3 = 0;
  }
  else
  {
    if (nameFreqTrie_onceToken != -1)
      dispatch_once(&nameFreqTrie_onceToken, &__block_literal_global_156_14478);
    pthread_mutex_lock(&nameFreqTrie_updateLock);
    v2 = (id)nameFreqTrie_trie;
    pthread_mutex_unlock(&nameFreqTrie_updateLock);
    v3 = objc_msgSend(v2, "payloadForString:", v1);

  }
  return v3;
}

void __nameFreqTrie_block_invoke()
{
  void *v0;
  id v1;
  id v2;

  +[SGAsset asset](SGAsset, "asset");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = (id)objc_msgSend(v0, "registerUpdateHandler:", &__block_literal_global_158_14479);

  +[SGAsset asset](SGAsset, "asset");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  __nameFreqTrie_block_invoke_2((uint64_t)v2, v2);

}

void __nameFreqTrie_block_invoke_2(uint64_t a1, void *a2)
{
  id v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v2 = a2;
  pthread_mutex_lock(&nameFreqTrie_updateLock);
  objc_msgSend(v2, "filesystemPathForAssetDataRelativePath:", CFSTR("namefreq.trie"));
  v7 = (id)objc_claimAutoreleasedReturnValue();

  v3 = (uint64_t)v7;
  if (v7)
    v3 = objc_msgSend(objc_alloc(MEMORY[0x1E0D81548]), "initWithPath:", v7);
  v4 = (void *)nameFreqTrie_trie;
  nameFreqTrie_trie = v3;

  if (!nameFreqTrie_trie)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_PASCFBurstTrie *nameFreqTrie(void)_block_invoke_2");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, CFSTR("SGNames.m"), 65, CFSTR("Could not load name frequency trie"));

  }
  pthread_mutex_unlock(&nameFreqTrie_updateLock);

}

void __tokenizeName_block_invoke_3(uint64_t a1, void *a2)
{
  const __CFString *v3;
  const __CFAllocator *v4;
  __CFString *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  __CFStringTokenizer *tokenizer;
  CFRange v11;
  CFRange CurrentTokenRange;
  CFRange v13;

  tokenizer = a2;
  v3 = *(const __CFString **)(a1 + 48);
  v11.length = objc_msgSend(*(id *)(a1 + 32), "length");
  v11.location = 0;
  CFStringTokenizerSetString(tokenizer, v3, v11);
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  while (CFStringTokenizerAdvanceToNextToken(tokenizer))
  {
    CurrentTokenRange = CFStringTokenizerGetCurrentTokenRange(tokenizer);
    v5 = (__CFString *)CFStringCreateWithSubstring(v4, *(CFStringRef *)(a1 + 48), CurrentTokenRange);
    SGNamesAsciify(v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3500], "alphanumericCharacterSet");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "rangeOfCharacterFromSet:", v7);
    v9 = v8;

    if (v9)
      objc_msgSend(*(id *)(a1 + 40), "addObject:", v6);
    CFRelease(v5);

  }
  v13.location = 0;
  v13.length = 1;
  CFStringTokenizerSetString(tokenizer, CFSTR("âŒ˜"), v13);
  CFRelease(tokenizer);

}

void __tokenizeName_block_invoke()
{
  void *v0;
  uint64_t v1;
  void *v2;

  v0 = (void *)MEMORY[0x1C3BD4F6C]();
  v1 = objc_msgSend(objc_alloc(MEMORY[0x1E0D815E0]), "initWithBlock:idleTimeout:", &__block_literal_global_175, 1.0);
  v2 = (void *)tokenizeName__pasExprOnceResult;
  tokenizeName__pasExprOnceResult = v1;

  objc_autoreleasePoolPop(v0);
}

id __tokenizeName_block_invoke_2()
{
  const __CFLocale *v0;
  CFStringTokenizerRef v1;
  void *v2;
  void *v4;
  void *v5;
  CFRange v6;

  v0 = CFLocaleCopyCurrent();
  v6.location = 0;
  v6.length = 0;
  v1 = CFStringTokenizerCreate(0, 0, v6, 4uLL, v0);
  if (!v1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSArray<NSString *> *tokenizeName(NSString *__strong)_block_invoke_2");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("SGNames.m"), 940, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("guardedTokenizer"));

  }
  CFRelease(v0);
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D815F0]), "initWithGuardedData:", v1);

  return v2;
}

uint64_t __Block_byref_object_copy__14499(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__14500(uint64_t a1)
{

}

id removeParens(void *a1)
{
  id v1;
  void *v2;
  __CFString *v3;
  void *v4;
  CFIndex Length;
  const UniChar *CharactersPtr;
  const char *CStringPtr;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  CFIndex v13;
  UniChar v14;
  int v15;
  int v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  CFIndex v21;
  unsigned int v23;
  size_t v25;
  uint64_t v26;
  CFIndex v27;
  const UniChar *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  CFIndex v39;
  UniChar v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  CFIndex v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  int v49;
  id v50;
  size_t v51;
  char *v52;
  __int128 buffer;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  CFStringRef v61;
  const UniChar *v62;
  const char *v63;
  uint64_t v64;
  CFIndex v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  CFRange v69;
  CFRange v70;

  v68 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    v10 = 0;
    goto LABEL_39;
  }
  v3 = (__CFString *)v1;
  objc_opt_self();
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v4)
    goto LABEL_38;
  v59 = 0u;
  v60 = 0u;
  v57 = 0u;
  v58 = 0u;
  v55 = 0u;
  v56 = 0u;
  v54 = 0u;
  buffer = 0u;
  Length = CFStringGetLength(v3);
  v61 = v3;
  v64 = 0;
  v65 = Length;
  CharactersPtr = CFStringGetCharactersPtr(v3);
  CStringPtr = 0;
  v62 = CharactersPtr;
  if (!CharactersPtr)
    CStringPtr = CFStringGetCStringPtr(v3, 0x600u);
  v66 = 0;
  v67 = 0;
  v63 = CStringPtr;
  if (Length < 1)
  {
LABEL_38:

    v10 = v3;
    goto LABEL_39;
  }
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 64;
  while (1)
  {
    v12 = (unint64_t)v10 >= 4 ? 4 : v10;
    v13 = v65;
    if (v65 <= v10)
    {
      v14 = 0;
    }
    else
    {
      if (v62)
      {
        v14 = v62[v10 + v64];
      }
      else if (v63)
      {
        v14 = v63[v64 + v10];
      }
      else
      {
        if (v67 <= v10 || v9 > v10)
        {
          v18 = v12 + v8;
          v19 = v11 - v12;
          v20 = v10 - v12;
          v21 = v20 + 64;
          if (v20 + 64 >= v65)
            v21 = v65;
          v66 = v20;
          v67 = v21;
          if (v65 >= v19)
            v13 = v19;
          v69.length = v13 + v18;
          v69.location = v20 + v64;
          CFStringGetCharacters(v61, v69, (UniChar *)&buffer);
          v9 = v66;
        }
        v14 = *((_WORD *)&buffer + v10 - v9);
      }
      if (v14 - 40 <= 0x33 && ((1 << (v14 - 40)) & 0x8000000100001) != 0)
      {
        v16 = 0;
        v15 = 1;
        goto LABEL_32;
      }
    }
    v15 = 0;
    v16 = 1;
LABEL_32:
    v23 = v14 - 40;
    if (v23 <= 0x33 && ((1 << v23) & 0x8000000100001) != 0)
      break;
    ++v10;
    --v8;
    ++v11;
    if (Length == v10)
      goto LABEL_38;
  }
  if (v16)
    goto LABEL_38;

  if (v15)
  {
    v25 = (2 * -[__CFString length](v3, "length")) | 1;
    buffer = 0uLL;
    if (v25 > 0x200)
    {
      v49 = malloc_type_posix_memalign((void **)&buffer, 8uLL, 2 * -[__CFString length](v3, "length"), 0x1000040BDFB0063uLL);
      BYTE8(buffer) = 0;
      if (v49)
      {
        objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99850], CFSTR("malloc failed"), 0);
        v50 = (id)objc_claimAutoreleasedReturnValue();
        objc_exception_throw(v50);
      }
      v52 = (char *)buffer;
    }
    else
    {
      MEMORY[0x1E0C80A78]();
      v52 = (char *)&v51 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
      bzero(v52, v25);
    }
    v10 = v3;
    objc_opt_self();
    v26 = objc_claimAutoreleasedReturnValue();

    if (v26)
    {
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      v54 = 0u;
      buffer = 0u;
      v27 = CFStringGetLength((CFStringRef)v10);
      v61 = (CFStringRef)v10;
      v64 = 0;
      v65 = v27;
      v28 = CFStringGetCharactersPtr((CFStringRef)v10);
      v29 = 0;
      v62 = v28;
      if (!v28)
        v29 = CFStringGetCStringPtr((CFStringRef)v10, 0x600u);
      v51 = v25;
      v66 = 0;
      v67 = 0;
      v63 = v29;
      if (v27 >= 1)
      {
        v30 = 0;
        v31 = 0;
        v32 = 0;
        v33 = 0;
        v34 = 0;
        v35 = 0;
        v26 = 0;
        v36 = 64;
        v37 = v52;
        while (1)
        {
          v38 = (unint64_t)v32 >= 4 ? 4 : v32;
          v39 = v65;
          if (v65 <= v32)
            break;
          if (v62)
          {
            v40 = v62[v32 + v64];
          }
          else if (v63)
          {
            v40 = v63[v64 + v32];
          }
          else
          {
            if (v67 <= v32 || v31 > v32)
            {
              v42 = v38 + v30;
              v43 = v36 - v38;
              v44 = v32 - v38;
              v45 = v44 + 64;
              if (v44 + 64 >= v65)
                v45 = v65;
              v66 = v44;
              v67 = v45;
              if (v65 >= v43)
                v39 = v43;
              v70.length = v39 + v42;
              v70.location = v44 + v64;
              CFStringGetCharacters(v61, v70, (UniChar *)&buffer);
              v37 = v52;
              v31 = v66;
            }
            v40 = *((_WORD *)&buffer + v32 - v31);
          }
          if (v40 > 0x3Du)
          {
            switch(v40)
            {
              case '>':
                if (!v34)
                  goto LABEL_39;
                --v34;
                break;
              case '[':
                ++v33;
                break;
              case ']':
                if (!v33)
                  goto LABEL_39;
                --v33;
                break;
              default:
                goto LABEL_55;
            }
          }
          else
          {
            switch(v40)
            {
              case '(':
                ++v35;
                break;
              case ')':
                if (!v35)
                  goto LABEL_39;
                --v35;
                break;
              case '<':
                ++v34;
                break;
              default:
                goto LABEL_55;
            }
          }
LABEL_59:
          ++v32;
          --v30;
          ++v36;
          if (v27 == v32)
            goto LABEL_91;
        }
        v40 = 0;
LABEL_55:
        if (!v35 && !v34 && !v33)
        {
          v35 = 0;
          v34 = 0;
          *(_WORD *)&v37[2 * v26++] = v40;
        }
        goto LABEL_59;
      }
      v26 = 0;
      v35 = 0;
      v34 = 0;
      v33 = 0;
LABEL_91:
      v25 = v51;
    }
    else
    {
      v35 = 0;
      v34 = 0;
      v33 = 0;
    }

    v46 = objc_msgSend((id)v10, "length");
    if (v34 + v35 + v33 || v26 == v46)
    {
      v48 = objc_msgSend((id)v10, "copy", v51);
    }
    else
    {
      v47 = objc_alloc(MEMORY[0x1E0CB3940]);
      v48 = objc_msgSend(v47, "initWithCharacters:length:", v52, v26);
    }
    v10 = v48;
    if (v25 >= 0x201)
      free(v52);
  }
LABEL_39:

  return (id)v10;
}

void findEndOfHonorificPrefixCandidate(void *a1, void *a2)
{
  __CFString *v3;
  void (**v4)(id, unint64_t, unint64_t, BOOL);
  unint64_t v5;
  UniChar *CharactersPtr;
  size_t v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD v12[2];

  v12[1] = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = -[__CFString length](v3, "length");
  CharactersPtr = (UniChar *)CFStringGetCharactersPtr(v3);
  if (!CharactersPtr)
  {
    MEMORY[0x1E0C80A78]();
    CharactersPtr = (UniChar *)((char *)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
    bzero(CharactersPtr, v7);
    -[__CFString getCharacters:](v3, "getCharacters:", CharactersPtr);
  }
  if (v5)
  {
    v8 = 0;
    while (1)
    {
      v9 = CharactersPtr[v8];
      if (v9 == 32 || v9 == 46)
        break;
      if (v5 == ++v8)
        goto LABEL_18;
    }
    if (v9 == 46)
      v10 = v8 + 1;
    else
      v10 = v8;
    v11 = v10;
    if (v10 < v5)
    {
      v11 = v10;
      while (CharactersPtr[v11] == 32)
      {
        if (++v11 >= v5)
        {
          v11 = v5;
          break;
        }
      }
    }
    v4[2](v4, v10, v11, v9 == 46);
  }
LABEL_18:

}

void __enumerateTrailingHonorificMatchesInString_block_invoke_2(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;

  v10 = a2;
  v6 = (void *)MEMORY[0x1C3BD4F6C]();
  v7 = *(_QWORD *)(a1 + 32);
  v8 = objc_msgSend(v10, "range");
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v7, v8, v9) & 1) == 0)
    *a4 = 1;
  objc_autoreleasePoolPop(v6);

}

void __enumerateTrailingHonorificMatchesInString_block_invoke()
{
  void *v0;
  void *v1;
  uint64_t v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  patterns_14444();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "rawValueForKey:", CFSTR("TrailingHonorific"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void enumerateTrailingHonorificMatchesInString(NSString *__strong, BOOL (^__strong)(NSRange))_block_invoke");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, CFSTR("SGNames.m"), 691, CFSTR("Could not initialize the raw regexp"));

  }
  v9 = 0;
  v2 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB38E8]), "initWithPattern:options:error:", v1, 0, &v9);
  v3 = v9;
  v4 = (void *)enumerateTrailingHonorificMatchesInString_trailingRe;
  enumerateTrailingHonorificMatchesInString_trailingRe = v2;

  if (!enumerateTrailingHonorificMatchesInString_trailingRe)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void enumerateTrailingHonorificMatchesInString(NSString *__strong, BOOL (^__strong)(NSRange))_block_invoke");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "handleFailureInFunction:file:lineNumber:description:", v8, CFSTR("SGNames.m"), 693, CFSTR("Could not initialize regular expression: %@"), v3);

  }
}

uint64_t SGGuessNamingTradition(void *a1)
{
  id v1;
  id v2;
  id v3;
  uint64_t v4;
  _QWORD v6[4];
  id v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;

  v1 = a1;
  if (SGGuessNamingTradition__pasOnceToken3 != -1)
    dispatch_once(&SGGuessNamingTradition__pasOnceToken3, &__block_literal_global_14538);
  v2 = (id)SGGuessNamingTradition__pasExprOnceResult;
  v9 = 0;
  v10 = &v9;
  v11 = 0x2020000000;
  v12 = 0;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __SGGuessNamingTradition_block_invoke_2;
  v6[3] = &unk_1E7DB1180;
  v3 = v1;
  v7 = v3;
  v8 = &v9;
  objc_msgSend(v2, "runWithLockAcquired:", v6);
  v4 = *((unsigned int *)v10 + 6);

  _Block_object_dispose(&v9, 8);
  return v4;
}

void sub_1C370FF14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id chineseCharSet()
{
  if (chineseCharSet_onceToken != -1)
    dispatch_once(&chineseCharSet_onceToken, &__block_literal_global_165_14573);
  return (id)chineseCharSet_result;
}

id hangulCharSet()
{
  if (hangulCharSet_onceToken != -1)
    dispatch_once(&hangulCharSet_onceToken, &__block_literal_global_167);
  return (id)hangulCharSet_result;
}

id japaneseCharSet()
{
  if (japaneseCharSet_onceToken != -1)
    dispatch_once(&japaneseCharSet_onceToken, &__block_literal_global_166);
  return (id)japaneseCharSet_result;
}

void __thaiCharSet_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  void *v9;

  charSetWithEndpoints(2, a2, a3, a4, a5, a6, a7, a8, 3584);
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = (void *)thaiCharSet_result;
  thaiCharSet_result = v8;

}

id charSetWithEndpoints(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v10;
  int v11;
  int *v12;
  int v13;
  int v14;
  void *v15;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  int *v21;

  if ((a1 & 1) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSCharacterSet *charSetWithEndpoints(int, ...)");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "handleFailureInFunction:file:lineNumber:description:", v18, CFSTR("SGNames.m"), 105, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("n_args && (n_args % 2) == 0"));

  }
  v21 = (int *)&a9;
  v10 = (void *)objc_opt_new();
  v11 = 1;
  do
  {
    v12 = v21;
    v13 = *v21;
    v21 += 4;
    LODWORD(v12) = v12[2];
    v14 = (_DWORD)v12 - v13;
    if ((int)v12 <= v13)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSCharacterSet *charSetWithEndpoints(int, ...)");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "handleFailureInFunction:file:lineNumber:description:", v19, CFSTR("SGNames.m"), 112, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("start < end"));

    }
    objc_msgSend(v10, "addCharactersInRange:", v13, v14 + 1);
    v11 += 2;
  }
  while (v11 <= a1);
  v15 = (void *)objc_msgSend(v10, "copy");

  return v15;
}

void __cyrillicCharSet_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  void *v9;

  charSetWithEndpoints(10, a2, a3, a4, a5, a6, a7, a8, 1024);
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = (void *)cyrillicCharSet_result;
  cyrillicCharSet_result = v8;

}

void __latinCharSet_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  void *v9;

  charSetWithEndpoints(6, a2, a3, a4, a5, a6, a7, a8, 65);
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = (void *)latinCharSet_result;
  latinCharSet_result = v8;

}

void __japaneseCharSet_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  void *v9;

  charSetWithEndpoints(14, a2, a3, a4, a5, a6, a7, a8, 12352);
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = (void *)japaneseCharSet_result;
  japaneseCharSet_result = v8;

}

void __hangulCharSet_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  void *v9;

  charSetWithEndpoints(14, a2, a3, a4, a5, a6, a7, a8, 44032);
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = (void *)hangulCharSet_result;
  hangulCharSet_result = v8;

}

void __chineseCharSet_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  void *v9;

  charSetWithEndpoints(2, a2, a3, a4, a5, a6, a7, a8, 19968);
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = (void *)chineseCharSet_result;
  chineseCharSet_result = v8;

}

void SGPreferChineseNamesForTesting()
{
  forcePreferChinese = 1;
  forcePreferJapanese = 0;
}

void SGPreferJapaneseNamesForTesting()
{
  forcePreferChinese = 0;
  forcePreferJapanese = 1;
}

void SGResetPreferredNameTraditionForTesting()
{
  forcePreferChinese = 0;
  forcePreferJapanese = 0;
}

BOOL SGNamesIsMostlyAlpha(void *a1)
{
  id v1;
  const __CFCharacterSet *Predefined;
  __CFString *v3;
  void *v4;
  CFIndex Length;
  const UniChar *CharactersPtr;
  const char *CStringPtr;
  uint64_t v8;
  int64_t v9;
  double v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  CFIndex v14;
  UniChar v15;
  int64_t v16;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  CFIndex v21;
  _BOOL8 v22;
  _OWORD v24[8];
  CFStringRef theString;
  const UniChar *v26;
  const char *v27;
  uint64_t v28;
  CFIndex v29;
  int64_t v30;
  int64_t v31;
  CFRange v32;

  v1 = a1;
  if (v1)
  {
    Predefined = CFCharacterSetGetPredefined(kCFCharacterSetLetter);
    v3 = (__CFString *)v1;
    objc_opt_self();
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v4)
      goto LABEL_32;
    memset(v24, 0, sizeof(v24));
    Length = CFStringGetLength(v3);
    theString = v3;
    v28 = 0;
    v29 = Length;
    CharactersPtr = CFStringGetCharactersPtr(v3);
    CStringPtr = 0;
    v26 = CharactersPtr;
    if (!CharactersPtr)
      CStringPtr = CFStringGetCStringPtr(v3, 0x600u);
    v30 = 0;
    v31 = 0;
    v27 = CStringPtr;
    if (Length >= 1)
    {
      v8 = 0;
      v9 = 0;
      v10 = 0.0;
      v11 = 64;
      v12 = 0.0;
      do
      {
        if ((unint64_t)v9 >= 4)
          v13 = 4;
        else
          v13 = v9;
        v14 = v29;
        if (v29 <= v9)
        {
          v15 = 0;
        }
        else if (v26)
        {
          v15 = v26[v9 + v28];
        }
        else if (v27)
        {
          v15 = v27[v28 + v9];
        }
        else
        {
          v16 = v30;
          if (v31 <= v9 || v30 > v9)
          {
            v18 = v13 + v8;
            v19 = v11 - v13;
            v20 = v9 - v13;
            v21 = v20 + 64;
            if (v20 + 64 >= v29)
              v21 = v29;
            v30 = v20;
            v31 = v21;
            if (v29 >= v19)
              v14 = v19;
            v32.length = v14 + v18;
            v32.location = v20 + v28;
            CFStringGetCharacters(theString, v32, (UniChar *)v24);
            v16 = v30;
          }
          v15 = *((_WORD *)v24 + v9 - v16);
        }
        if (CFCharacterSetIsCharacterMember(Predefined, v15))
          v10 = v10 + 1.0;
        else
          v12 = v12 + 1.0;
        ++v9;
        --v8;
        ++v11;
      }
      while (Length != v9);
    }
    else
    {
LABEL_32:
      v12 = 0.0;
      v10 = 0.0;
    }

    v22 = v10 / (v12 + v10) > 0.81;
  }
  else
  {
    v22 = 0;
  }

  return v22;
}

void sub_1C3712CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C37133E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1C37139E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  _Block_object_dispose(&a41, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__14839(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__14840(uint64_t a1)
{

}

id SGEntityTagsFromStorage(void *a1)
{
  id v1;
  id v3;

  v1 = a1;
  v3 = (id)objc_opt_new();
  SGDelimitedStringsDeserializeWithBlock();

  return v3;
}

__CFString *SGEntityTagsForStorage(void *a1)
{
  id v1;
  __CFString *Mutable;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __CFString *v10;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  Mutable = CFStringCreateMutable(0, 0);
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v14;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v14 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * i);
        if (objc_msgSend(v8, "stored", v12))
        {
          objc_msgSend(v8, "name");
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          v12 = 0;
          SGDelimitedStringsSerialize();
          v10 = (__CFString *)objc_claimAutoreleasedReturnValue();

          CFStringAppend(Mutable, v10);
        }
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v5);
  }

  return Mutable;
}

__CFString *globEscape(void *a1)
{
  id v1;
  void *v2;
  __CFString *v3;
  void *v4;
  CFIndex Length;
  const UniChar *CharactersPtr;
  const char *CStringPtr;
  uint64_t v8;
  __CFString *v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  CFIndex v14;
  UniChar v15;
  void *v16;
  int64_t v17;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  CFIndex v22;
  __CFString *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *context;
  CFIndex v31;
  uint64_t v32;
  UniChar buffer[8];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  CFStringRef theString;
  const UniChar *v42;
  const char *v43;
  uint64_t v44;
  CFIndex v45;
  int64_t v46;
  int64_t v47;
  CFRange v48;

  v1 = a1;
  v2 = (void *)MEMORY[0x1C3BD4F6C]();
  v3 = (__CFString *)v1;
  objc_opt_self();
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v4)
    goto LABEL_37;
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  *(_OWORD *)buffer = 0u;
  v34 = 0u;
  Length = CFStringGetLength(v3);
  theString = v3;
  v44 = 0;
  v45 = Length;
  CharactersPtr = CFStringGetCharactersPtr(v3);
  CStringPtr = 0;
  v42 = CharactersPtr;
  if (!CharactersPtr)
    CStringPtr = CFStringGetCStringPtr(v3, 0x600u);
  v46 = 0;
  v47 = 0;
  v43 = CStringPtr;
  if (Length <= 0)
  {
LABEL_37:

    goto LABEL_38;
  }
  context = v2;
  v31 = Length;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v32 = 0;
  v11 = 0;
  v12 = 64;
  do
  {
    if ((unint64_t)v10 >= 4)
      v13 = 4;
    else
      v13 = v10;
    v14 = v45;
    if (v45 <= v10)
    {
      v16 = (void *)MEMORY[0x1C3BD4F6C]();
LABEL_13:
      ++v11;
      goto LABEL_33;
    }
    if (v42)
    {
      v15 = v42[v10 + v44];
    }
    else if (v43)
    {
      v15 = v43[v44 + v10];
    }
    else
    {
      v17 = v46;
      if (v47 <= v10 || v46 > v10)
      {
        v19 = v13 + v8;
        v20 = v12 - v13;
        v21 = v10 - v13;
        v22 = v21 + 64;
        if (v21 + 64 >= v45)
          v22 = v45;
        v46 = v21;
        v47 = v22;
        if (v45 >= v20)
          v14 = v20;
        v48.length = v14 + v19;
        v48.location = v21 + v44;
        CFStringGetCharacters(theString, v48, buffer);
        v17 = v46;
      }
      v15 = buffer[v10 - v17];
    }
    v16 = (void *)MEMORY[0x1C3BD4F6C]();
    if (v15 - 42 > 0x31 || ((1 << (v15 - 42)) & 0x2000000200001) == 0)
      goto LABEL_13;
    if (!v9)
      v9 = (__CFString *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithCapacity:", -[__CFString length](v3, "length"));
    -[__CFString substringWithRange:](v3, "substringWithRange:", v32, v11);
    v24 = v3;
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    -[__CFString appendFormat:](v9, "appendFormat:", CFSTR("%@[%c]"), v25, v15);

    v3 = v24;
    v26 = v11 + v32;
    v11 = 0;
    v32 = v26 + 1;
    Length = v31;
LABEL_33:
    objc_autoreleasePoolPop(v16);
    ++v10;
    --v8;
    ++v12;
  }
  while (Length != v10);

  v2 = context;
  if (!v9)
  {
LABEL_38:
    v9 = v3;
    goto LABEL_39;
  }
  if (v11)
  {
    v27 = (void *)MEMORY[0x1C3BD4F6C]();
    -[__CFString substringWithRange:](v3, "substringWithRange:", v32, v11);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    -[__CFString appendString:](v9, "appendString:", v28);

    objc_autoreleasePoolPop(v27);
  }
LABEL_39:
  objc_autoreleasePoolPop(v2);

  return v9;
}

uint64_t re2::RunningOnValgrind(re2 *this)
{
  return 0;
}

void sub_1C3715FE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1C3716254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a33, 8);
  _Unwind_Resume(a1);
}

void sub_1C3716318(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1C3716730(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  _Unwind_Resume(exception_object);
}

id _bold(void *a1)
{
  objc_class *v1;
  id v2;
  void *v3;

  v1 = (objc_class *)MEMORY[0x1E0CB3940];
  v2 = a1;
  v3 = (void *)objc_msgSend([v1 alloc], "initWithFormat:", CFSTR("\x1B[1m%@\x1B[0m"), v2);

  return v3;
}

BOOL SGMIMetricsSubmodelsProbabilitiesReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int *v4;
  int *v5;
  int *v6;
  int *v8;
  int *v9;
  int *v10;
  int *v11;
  int *v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  int v21;
  uint64_t v23;
  unint64_t v24;
  int v25;
  int *v26;
  int *v27;
  uint64_t v28;
  int *v29;
  int *v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  int *v57;

  v4 = (int *)MEMORY[0x1E0D82BF0];
  v5 = (int *)MEMORY[0x1E0D82BD8];
  v6 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v8 = &OBJC_IVAR___SGStructuredEventCoreMLInputWrapper__I;
    v9 = &OBJC_IVAR___SGMIMetricsSubmodelsProbabilities__personFromSenderProbability;
    v10 = (int *)MEMORY[0x1E0D82BB8];
    v11 = &OBJC_IVAR___SGMIMetricsSubmodelsProbabilities__personFromSenderInDyadicConversationProbability;
    v12 = &OBJC_IVAR___SGMIMetricsSubmodelsProbabilities__subjectContentProbability;
    while (1)
    {
      if (*(_BYTE *)(a2 + *v6))
        return *(_BYTE *)(a2 + *v6) == 0;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = *v4;
        v17 = *(_QWORD *)(a2 + v16);
        v18 = v17 + 1;
        if (v17 == -1 || v18 > *(_QWORD *)(a2 + *v5))
          break;
        v19 = *(_BYTE *)(*(_QWORD *)(a2 + *v10) + v17);
        *(_QWORD *)(a2 + v16) = v18;
        v15 |= (unint64_t)(v19 & 0x7F) << v13;
        if ((v19 & 0x80) == 0)
          goto LABEL_12;
        v13 += 7;
        if (v14++ >= 9)
        {
          v15 = 0;
          v21 = *(unsigned __int8 *)(a2 + *v6);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v6) = 1;
LABEL_12:
      v21 = *(unsigned __int8 *)(a2 + *v6);
      if (*(_BYTE *)(a2 + *v6))
        v15 = 0;
LABEL_14:
      if (v21 || (v15 & 7) == 4)
        return *(_BYTE *)(a2 + *v6) == 0;
      switch((v15 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + v8[93]) |= 0x100u;
          v23 = *v4;
          v24 = *(_QWORD *)(a2 + v23);
          if (v24 <= 0xFFFFFFFFFFFFFFFBLL && v24 + 4 <= *(_QWORD *)(a2 + *v5))
          {
            v25 = *(_DWORD *)(*(_QWORD *)(a2 + *v10) + v24);
            *(_QWORD *)(a2 + v23) = v24 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + *v6) = 1;
            v25 = 0;
          }
          v57 = v9;
          goto LABEL_86;
        case 2u:
          *(_WORD *)(a1 + v8[93]) |= 0x80u;
          v33 = *v4;
          v34 = *(_QWORD *)(a2 + v33);
          if (v34 <= 0xFFFFFFFFFFFFFFFBLL && v34 + 4 <= *(_QWORD *)(a2 + *v5))
          {
            v25 = *(_DWORD *)(*(_QWORD *)(a2 + *v10) + v34);
            *(_QWORD *)(a2 + v33) = v34 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + *v6) = 1;
            v25 = 0;
          }
          v57 = v11;
          goto LABEL_86;
        case 3u:
          *(_WORD *)(a1 + v8[93]) |= 0x800u;
          v35 = *v4;
          v36 = *(_QWORD *)(a2 + v35);
          if (v36 <= 0xFFFFFFFFFFFFFFFBLL && v36 + 4 <= *(_QWORD *)(a2 + *v5))
          {
            v25 = *(_DWORD *)(*(_QWORD *)(a2 + *v10) + v36);
            *(_QWORD *)(a2 + v35) = v36 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + *v6) = 1;
            v25 = 0;
          }
          v57 = v12;
          goto LABEL_86;
        case 4u:
          *(_WORD *)(a1 + v8[93]) |= 0x200u;
          v37 = *v4;
          v38 = *(_QWORD *)(a2 + v37);
          if (v38 <= 0xFFFFFFFFFFFFFFFBLL && v38 + 4 <= *(_QWORD *)(a2 + *v5))
          {
            v25 = *(_DWORD *)(*(_QWORD *)(a2 + *v10) + v38);
            *(_QWORD *)(a2 + v37) = v38 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + *v6) = 1;
            v25 = 0;
          }
          v57 = &OBJC_IVAR___SGMIMetricsSubmodelsProbabilities__personToRecipientsProbability;
          goto LABEL_86;
        case 5u:
          *(_WORD *)(a1 + v8[93]) |= 0x40u;
          v39 = *v4;
          v40 = *(_QWORD *)(a2 + v39);
          if (v40 <= 0xFFFFFFFFFFFFFFFBLL && v40 + 4 <= *(_QWORD *)(a2 + *v5))
          {
            v25 = *(_DWORD *)(*(_QWORD *)(a2 + *v10) + v40);
            *(_QWORD *)(a2 + v39) = v40 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + *v6) = 1;
            v25 = 0;
          }
          v57 = &OBJC_IVAR___SGMIMetricsSubmodelsProbabilities__personCCRecipientsProbability;
          goto LABEL_86;
        case 6u:
          *(_WORD *)(a1 + v8[93]) |= 4u;
          v41 = *v4;
          v42 = *(_QWORD *)(a2 + v41);
          if (v42 <= 0xFFFFFFFFFFFFFFFBLL && v42 + 4 <= *(_QWORD *)(a2 + *v5))
          {
            v25 = *(_DWORD *)(*(_QWORD *)(a2 + *v10) + v42);
            *(_QWORD *)(a2 + v41) = v42 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + *v6) = 1;
            v25 = 0;
          }
          v57 = &OBJC_IVAR___SGMIMetricsSubmodelsProbabilities__domainFromSenderProbability;
          goto LABEL_86;
        case 7u:
          *(_WORD *)(a1 + v8[93]) |= 2u;
          v43 = *v4;
          v44 = *(_QWORD *)(a2 + v43);
          if (v44 <= 0xFFFFFFFFFFFFFFFBLL && v44 + 4 <= *(_QWORD *)(a2 + *v5))
          {
            v25 = *(_DWORD *)(*(_QWORD *)(a2 + *v10) + v44);
            *(_QWORD *)(a2 + v43) = v44 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + *v6) = 1;
            v25 = 0;
          }
          v57 = &OBJC_IVAR___SGMIMetricsSubmodelsProbabilities__conversationProbability;
          goto LABEL_86;
        case 8u:
          *(_WORD *)(a1 + v8[93]) |= 8u;
          v45 = *v4;
          v46 = *(_QWORD *)(a2 + v45);
          if (v46 <= 0xFFFFFFFFFFFFFFFBLL && v46 + 4 <= *(_QWORD *)(a2 + *v5))
          {
            v25 = *(_DWORD *)(*(_QWORD *)(a2 + *v10) + v46);
            *(_QWORD *)(a2 + v45) = v46 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + *v6) = 1;
            v25 = 0;
          }
          v57 = &OBJC_IVAR___SGMIMetricsSubmodelsProbabilities__listIdProbability;
          goto LABEL_86;
        case 9u:
          *(_WORD *)(a1 + v8[93]) |= 1u;
          v47 = *v4;
          v48 = *(_QWORD *)(a2 + v47);
          if (v48 <= 0xFFFFFFFFFFFFFFFBLL && v48 + 4 <= *(_QWORD *)(a2 + *v5))
          {
            v25 = *(_DWORD *)(*(_QWORD *)(a2 + *v10) + v48);
            *(_QWORD *)(a2 + v47) = v48 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + *v6) = 1;
            v25 = 0;
          }
          v57 = &OBJC_IVAR___SGMIMetricsSubmodelsProbabilities__attachmentsProbability;
          goto LABEL_86;
        case 0xAu:
          *(_WORD *)(a1 + v8[93]) |= 0x1000u;
          v49 = *v4;
          v50 = *(_QWORD *)(a2 + v49);
          if (v50 <= 0xFFFFFFFFFFFFFFFBLL && v50 + 4 <= *(_QWORD *)(a2 + *v5))
          {
            v25 = *(_DWORD *)(*(_QWORD *)(a2 + *v10) + v50);
            *(_QWORD *)(a2 + v49) = v50 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + *v6) = 1;
            v25 = 0;
          }
          v57 = &OBJC_IVAR___SGMIMetricsSubmodelsProbabilities__subjectCountStatsProbability;
          goto LABEL_86;
        case 0xBu:
          *(_WORD *)(a1 + v8[93]) |= 0x400u;
          v51 = *v4;
          v52 = *(_QWORD *)(a2 + v51);
          if (v52 <= 0xFFFFFFFFFFFFFFFBLL && v52 + 4 <= *(_QWORD *)(a2 + *v5))
          {
            v25 = *(_DWORD *)(*(_QWORD *)(a2 + *v10) + v52);
            *(_QWORD *)(a2 + v51) = v52 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + *v6) = 1;
            v25 = 0;
          }
          v57 = &OBJC_IVAR___SGMIMetricsSubmodelsProbabilities__standardMailRulesProbability;
          goto LABEL_86;
        case 0xCu:
          *(_WORD *)(a1 + v8[93]) |= 0x10u;
          v53 = *v4;
          v54 = *(_QWORD *)(a2 + v53);
          if (v54 <= 0xFFFFFFFFFFFFFFFBLL && v54 + 4 <= *(_QWORD *)(a2 + *v5))
          {
            v25 = *(_DWORD *)(*(_QWORD *)(a2 + *v10) + v54);
            *(_QWORD *)(a2 + v53) = v54 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + *v6) = 1;
            v25 = 0;
          }
          v57 = &OBJC_IVAR___SGMIMetricsSubmodelsProbabilities__mailboxProbability;
          goto LABEL_86;
        case 0xDu:
          *(_WORD *)(a1 + v8[93]) |= 0x20u;
          v55 = *v4;
          v56 = *(_QWORD *)(a2 + v55);
          if (v56 <= 0xFFFFFFFFFFFFFFFBLL && v56 + 4 <= *(_QWORD *)(a2 + *v5))
          {
            v25 = *(_DWORD *)(*(_QWORD *)(a2 + *v10) + v56);
            *(_QWORD *)(a2 + v55) = v56 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + *v6) = 1;
            v25 = 0;
          }
          v57 = &OBJC_IVAR___SGMIMetricsSubmodelsProbabilities__mailboxTypeProbability;
LABEL_86:
          *(_DWORD *)(a1 + *v57) = v25;
          goto LABEL_87;
        default:
          v26 = v9;
          v27 = v11;
          v28 = v2;
          v29 = v8;
          v30 = v12;
          v31 = a1;
          v32 = PBReaderSkipValueWithTag();
          a1 = v31;
          v6 = (int *)MEMORY[0x1E0D82BC8];
          v12 = v30;
          v8 = v29;
          v2 = v28;
          v11 = v27;
          v9 = v26;
          if ((v32 & 1) == 0)
            return 0;
LABEL_87:
          if (*(_QWORD *)(a2 + *v4) >= *(_QWORD *)(a2 + *v5))
            return *(_BYTE *)(a2 + *v6) == 0;
          break;
      }
    }
  }
  return *(_BYTE *)(a2 + *v6) == 0;
}

void sub_1C3719338(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,__int128 buf)
{
  id v25;
  NSObject *v26;
  void *v27;

  if (a2 == 1)
  {
    v25 = objc_begin_catch(a1);
    sgLogHandle();
    v26 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_FAULT))
    {
      objc_msgSend(v25, "debugDescription");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(buf) = 138412290;
      *(_QWORD *)((char *)&buf + 4) = v27;
      _os_log_fault_impl(&dword_1C3607000, v26, OS_LOG_TYPE_FAULT, "Failed to report dbStats to AggD: %@", (uint8_t *)&buf, 0xCu);

    }
    if (!_PASEvaluateLogFaultAndProbCrashCriteria())
    {
      xpc_transaction_exit_clean();

      objc_end_catch();
      JUMPOUT(0x1C37192FCLL);
    }
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_1C37196F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  os_activity_scope_leave((os_activity_scope_state_t)(v1 - 96));
  _Unwind_Resume(a1);
}

void sub_1C371A58C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  void *v32;

  if (a2)
  {
    _Block_object_dispose(&a31, 8);
    objc_begin_catch(exception_object);
    v32 = *a9;
    *a9 = 0;

    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_1C371AAFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C371AD44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v17 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__15476(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__15477(uint64_t a1)
{

}

void __getWKWebViewConfigurationClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  WebKitLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("WKWebViewConfiguration");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getWKWebViewConfigurationClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getWKWebViewConfigurationClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("SGDOMParser.m"), 23, CFSTR("Unable to find class %s"), "WKWebViewConfiguration");

    __break(1u);
  }
}

id getWKWebsiteDataStoreClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getWKWebsiteDataStoreClass_softClass;
  v7 = getWKWebsiteDataStoreClass_softClass;
  if (!getWKWebsiteDataStoreClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getWKWebsiteDataStoreClass_block_invoke;
    v3[3] = &unk_1E7DB7220;
    v3[4] = &v4;
    __getWKWebsiteDataStoreClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1C371B3F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getWKWebpagePreferencesClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  WebKitLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("WKWebpagePreferences");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getWKWebpagePreferencesClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getWKWebpagePreferencesClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("SGDOMParser.m"), 25, CFSTR("Unable to find class %s"), "WKWebpagePreferences");

    __break(1u);
  }
}

void __getWKWebViewClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  WebKitLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("WKWebView");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getWKWebViewClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getWKWebViewClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("SGDOMParser.m"), 22, CFSTR("Unable to find class %s"), "WKWebView");

    __break(1u);
  }
}

void WebKitLibrary()
{
  void *v0;
  void *v1;
  void *v2;

  if (!WebKitLibraryCore_frameworkLibrary)
    WebKitLibraryCore_frameworkLibrary = _sl_dlopen();
  if (!WebKitLibraryCore_frameworkLibrary)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *WebKitLibrary(void)");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("SGDOMParser.m"), 21, CFSTR("%s"), 0);

    __break(1u);
    free(v2);
  }
}

void __getWKWebsiteDataStoreClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  WebKitLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("WKWebsiteDataStore");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getWKWebsiteDataStoreClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getWKWebsiteDataStoreClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("SGDOMParser.m"), 24, CFSTR("Unable to find class %s"), "WKWebsiteDataStore");

    __break(1u);
  }
}

uint64_t SGMIMetricsTrialMetadataReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  void *v26;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v20 = 0;
        v21 = 0;
        v22 = 0;
        *(_BYTE *)(a1 + 32) |= 1u;
        while (1)
        {
          v23 = *v3;
          v24 = *(_QWORD *)(a2 + v23);
          if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v4))
            break;
          v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
          *(_QWORD *)(a2 + v23) = v24 + 1;
          v22 |= (unint64_t)(v25 & 0x7F) << v20;
          if ((v25 & 0x80) == 0)
            goto LABEL_34;
          v20 += 7;
          v14 = v21++ >= 9;
          if (v14)
          {
            LODWORD(v22) = 0;
            goto LABEL_36;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_34:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v22) = 0;
LABEL_36:
        *(_DWORD *)(a1 + 8) = v22;
      }
      else
      {
        if ((_DWORD)v17 == 2)
        {
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 24;
        }
        else
        {
          if ((_DWORD)v17 != 1)
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
            continue;
          }
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 16;
        }
        v26 = *(void **)(a1 + v19);
        *(_QWORD *)(a1 + v19) = v18;

      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1C371F68C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C371FB10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C371FFD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C3720248(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C3720930(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 112));
  _Unwind_Resume(a1);
}

void sub_1C3720FCC(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 128));
  _Unwind_Resume(a1);
}

void sub_1C37214EC(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 88));
  _Unwind_Resume(a1);
}

void sub_1C3721A80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C372207C(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 160));
  _Unwind_Resume(a1);
}

void sub_1C3722BE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__16121(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__16122(uint64_t a1)
{

}

uint64_t __Block_byref_object_copy__220(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = MEMORY[0x1C3BD5158](*(_QWORD *)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __Block_byref_object_dispose__221(uint64_t a1)
{

}

void sub_1C3726478(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1C3726D78(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1C3728F04(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C37292B4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C3729420(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C3729590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C3729798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C3729908(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL SGMIMetricsMailAttachmentHistogramReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  BOOL v23;
  int *v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  char v50;
  unsigned int v51;
  uint64_t v52;
  unint64_t v53;
  char v54;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 36) |= 1u;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            {
              v24 = &OBJC_IVAR___SGMIMetricsMailAttachmentHistogram__category;
              goto LABEL_77;
            }
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              break;
            v17 += 7;
            v23 = v18++ > 8;
            if (v23)
            {
              LODWORD(v19) = 0;
              v24 = &OBJC_IVAR___SGMIMetricsMailAttachmentHistogram__category;
              goto LABEL_80;
            }
          }
          v24 = &OBJC_IVAR___SGMIMetricsMailAttachmentHistogram__category;
          goto LABEL_78;
        case 2u:
          v25 = 0;
          v26 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 36) |= 0x40u;
          while (2)
          {
            v27 = *v3;
            v28 = *(_QWORD *)(a2 + v27);
            if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            {
              v24 = &OBJC_IVAR___SGMIMetricsMailAttachmentHistogram__countUpTo8KB;
              goto LABEL_77;
            }
            v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
            *(_QWORD *)(a2 + v27) = v28 + 1;
            v19 |= (unint64_t)(v29 & 0x7F) << v25;
            if (v29 < 0)
            {
              v25 += 7;
              v23 = v26++ > 8;
              if (v23)
              {
                LODWORD(v19) = 0;
                v24 = &OBJC_IVAR___SGMIMetricsMailAttachmentHistogram__countUpTo8KB;
                goto LABEL_80;
              }
              continue;
            }
            break;
          }
          v24 = &OBJC_IVAR___SGMIMetricsMailAttachmentHistogram__countUpTo8KB;
          goto LABEL_78;
        case 3u:
          v30 = 0;
          v31 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 36) |= 0x10u;
          while (2)
          {
            v32 = *v3;
            v33 = *(_QWORD *)(a2 + v32);
            if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
            {
              v24 = &OBJC_IVAR___SGMIMetricsMailAttachmentHistogram__count8KBTo32KB;
              goto LABEL_77;
            }
            v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
            *(_QWORD *)(a2 + v32) = v33 + 1;
            v19 |= (unint64_t)(v34 & 0x7F) << v30;
            if (v34 < 0)
            {
              v30 += 7;
              v23 = v31++ > 8;
              if (v23)
              {
                LODWORD(v19) = 0;
                v24 = &OBJC_IVAR___SGMIMetricsMailAttachmentHistogram__count8KBTo32KB;
                goto LABEL_80;
              }
              continue;
            }
            break;
          }
          v24 = &OBJC_IVAR___SGMIMetricsMailAttachmentHistogram__count8KBTo32KB;
          goto LABEL_78;
        case 4u:
          v35 = 0;
          v36 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 36) |= 4u;
          while (2)
          {
            v37 = *v3;
            v38 = *(_QWORD *)(a2 + v37);
            if (v38 == -1 || v38 >= *(_QWORD *)(a2 + *v4))
            {
              v24 = &OBJC_IVAR___SGMIMetricsMailAttachmentHistogram__count32KBTo128KB;
              goto LABEL_77;
            }
            v39 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v38);
            *(_QWORD *)(a2 + v37) = v38 + 1;
            v19 |= (unint64_t)(v39 & 0x7F) << v35;
            if (v39 < 0)
            {
              v35 += 7;
              v23 = v36++ > 8;
              if (v23)
              {
                LODWORD(v19) = 0;
                v24 = &OBJC_IVAR___SGMIMetricsMailAttachmentHistogram__count32KBTo128KB;
                goto LABEL_80;
              }
              continue;
            }
            break;
          }
          v24 = &OBJC_IVAR___SGMIMetricsMailAttachmentHistogram__count32KBTo128KB;
          goto LABEL_78;
        case 5u:
          v40 = 0;
          v41 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 36) |= 2u;
          while (2)
          {
            v42 = *v3;
            v43 = *(_QWORD *)(a2 + v42);
            if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v4))
            {
              v24 = &OBJC_IVAR___SGMIMetricsMailAttachmentHistogram__count128KBTo512KB;
              goto LABEL_77;
            }
            v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
            *(_QWORD *)(a2 + v42) = v43 + 1;
            v19 |= (unint64_t)(v44 & 0x7F) << v40;
            if (v44 < 0)
            {
              v40 += 7;
              v23 = v41++ > 8;
              if (v23)
              {
                LODWORD(v19) = 0;
                v24 = &OBJC_IVAR___SGMIMetricsMailAttachmentHistogram__count128KBTo512KB;
                goto LABEL_80;
              }
              continue;
            }
            break;
          }
          v24 = &OBJC_IVAR___SGMIMetricsMailAttachmentHistogram__count128KBTo512KB;
          goto LABEL_78;
        case 6u:
          v45 = 0;
          v46 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 36) |= 8u;
          while (2)
          {
            v47 = *v3;
            v48 = *(_QWORD *)(a2 + v47);
            if (v48 == -1 || v48 >= *(_QWORD *)(a2 + *v4))
            {
              v24 = &OBJC_IVAR___SGMIMetricsMailAttachmentHistogram__count512KBTo2MB;
              goto LABEL_77;
            }
            v49 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v48);
            *(_QWORD *)(a2 + v47) = v48 + 1;
            v19 |= (unint64_t)(v49 & 0x7F) << v45;
            if (v49 < 0)
            {
              v45 += 7;
              v23 = v46++ > 8;
              if (v23)
              {
                LODWORD(v19) = 0;
                v24 = &OBJC_IVAR___SGMIMetricsMailAttachmentHistogram__count512KBTo2MB;
                goto LABEL_80;
              }
              continue;
            }
            break;
          }
          v24 = &OBJC_IVAR___SGMIMetricsMailAttachmentHistogram__count512KBTo2MB;
          goto LABEL_78;
        case 7u:
          v50 = 0;
          v51 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 36) |= 0x20u;
          break;
        default:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
          return 0;
      }
      while (1)
      {
        v52 = *v3;
        v53 = *(_QWORD *)(a2 + v52);
        if (v53 == -1 || v53 >= *(_QWORD *)(a2 + *v4))
          break;
        v54 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v53);
        *(_QWORD *)(a2 + v52) = v53 + 1;
        v19 |= (unint64_t)(v54 & 0x7F) << v50;
        if ((v54 & 0x80) == 0)
        {
          v24 = &OBJC_IVAR___SGMIMetricsMailAttachmentHistogram__countOver2MB;
          goto LABEL_78;
        }
        v50 += 7;
        v23 = v51++ > 8;
        if (v23)
        {
          LODWORD(v19) = 0;
          v24 = &OBJC_IVAR___SGMIMetricsMailAttachmentHistogram__countOver2MB;
          goto LABEL_80;
        }
      }
      v24 = &OBJC_IVAR___SGMIMetricsMailAttachmentHistogram__countOver2MB;
LABEL_77:
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_78:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v19) = 0;
LABEL_80:
      *(_DWORD *)(a1 + *v24) = v19;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void re2::ToStringWalker::~ToStringWalker(re2::ToStringWalker *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_1E7DAE000;
  re2::Regexp::Walker<int>::Reset((uint64_t)this);
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    v3 = std::deque<re2::WalkState<int>>::~deque[abi:ne180100](v2);
    MEMORY[0x1C3BD4858](v3, 0x1080C40BE8D5F09);
  }
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_1E7DAE000;
  re2::Regexp::Walker<int>::Reset((uint64_t)this);
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    v3 = std::deque<re2::WalkState<int>>::~deque[abi:ne180100](v2);
    MEMORY[0x1C3BD4858](v3, 0x1080C40BE8D5F09);
  }
  JUMPOUT(0x1C3BD4858);
}

uint64_t re2::ToStringWalker::PreVisit(std::string **this, re2::Regexp *a2, int a3, BOOL *a4)
{
  uint64_t v4;
  std::string **v5;
  const std::string::value_type *v6;
  uint64_t v8;
  int v9;
  const std::string::value_type *v10;
  std::string::size_type v11;

  switch(*(_BYTE *)a2)
  {
    case 4:
    case 5:
      if (a3 <= 1)
      {
        v5 = this + 3;
        v4 = 2;
        goto LABEL_9;
      }
      v4 = 2;
      break;
    case 6:
      if (a3 <= 2)
      {
        v5 = this + 3;
        v4 = 3;
        goto LABEL_9;
      }
      v4 = 3;
      break;
    case 7:
    case 8:
    case 9:
    case 0xA:
      if (a3 > 0)
        goto LABEL_3;
      v4 = 0;
      v5 = this + 3;
LABEL_9:
      v6 = "(?:";
      goto LABEL_10;
    case 0xB:
      v5 = this + 3;
      std::string::append(this[3], "(");
      if (*((_QWORD *)a2 + 4))
      {
        std::string::append(*v5, "?P<");
        v8 = *((_QWORD *)a2 + 4);
        v9 = *(char *)(v8 + 23);
        if (v9 >= 0)
          v10 = (const std::string::value_type *)*((_QWORD *)a2 + 4);
        else
          v10 = *(const std::string::value_type **)v8;
        if (v9 >= 0)
          v11 = *(unsigned __int8 *)(v8 + 23);
        else
          v11 = *(_QWORD *)(v8 + 8);
        std::string::append(*v5, v10, v11);
        v4 = 5;
        v6 = ">";
LABEL_10:
        std::string::append(*v5, v6);
      }
      else
      {
        v4 = 5;
      }
      break;
    default:
LABEL_3:
      v4 = 0;
      break;
  }
  return v4;
}

uint64_t re2::ToStringWalker::PostVisit(re2::ToStringWalker *this, re2::Regexp *a2, int a3, uint64_t a4, int *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  std::string *v11;
  const std::string::value_type *v12;
  uint64_t v13;
  uint64_t v14;
  std::string::size_type v15;
  std::string *v16;
  const std::string::value_type *v17;
  std::string *v18;
  const std::string::value_type *v19;
  uint64_t v20;
  std::string *v21;
  std::string *v22;
  std::string::size_type size;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  int *v35;
  int v36;
  int v37;
  std::string *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  std::string::size_type v47;
  std::string::size_type v48;
  std::ios_base *v49;
  std::string __p[3];
  __int128 v52;
  __int128 v53;
  int v54;
  uint64_t v55;

  switch(*(_BYTE *)a2)
  {
    case 1:
      v11 = (std::string *)*((_QWORD *)this + 3);
      goto LABEL_55;
    case 2:
      if (a3 > 3)
        return 0;
      v11 = (std::string *)*((_QWORD *)this + 3);
      v12 = "(?:)";
      goto LABEL_70;
    case 3:
      re2::AppendLiteral(*((std::string **)this + 3), *((_DWORD *)a2 + 6), *((_WORD *)a2 + 1) & 1, a4, (uint64_t)a5, a6, a7, a8);
      goto LABEL_71;
    case 4:
      if (*((int *)a2 + 6) >= 1)
      {
        v13 = 0;
        do
          re2::AppendLiteral(*((std::string **)this + 3), *(_DWORD *)(*((_QWORD *)a2 + 4) + 4 * v13++), *((_WORD *)a2 + 1) & 1, a4, (uint64_t)a5, a6, a7, a8);
        while (v13 < *((int *)a2 + 6));
      }
      goto LABEL_9;
    case 5:
LABEL_9:
      if (a3 > 1)
        goto LABEL_71;
      goto LABEL_22;
    case 6:
      v14 = *((_QWORD *)this + 3);
      if (*(char *)(v14 + 23) < 0)
      {
        v15 = *(_QWORD *)(v14 + 8) - 1;
        if (*(_BYTE *)(*(_QWORD *)v14 + v15) == 124)
        {
LABEL_13:
          std::string::erase((std::string *)v14, v15, 0xFFFFFFFFFFFFFFFFLL);
          if (a3 > 2)
            goto LABEL_71;
          goto LABEL_22;
        }
      }
      else
      {
        v15 = *(unsigned __int8 *)(v14 + 23) - 1;
        if (*(_BYTE *)(v14 + v15) == 124)
          goto LABEL_13;
      }
      __p[0].__r_.__value_.__s.__data_[0] = 0;
      v45 = MEMORY[0x1E0DE4FE0];
      v46 = MEMORY[0x1E0DE4FE0] + 64;
      v47 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
      v48 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
      v55 = MEMORY[0x1E0DE4FE0] + 64;
      __p[0].__r_.__value_.__l.__size_ = v47;
      *(std::string::size_type *)((char *)&__p[0].__r_.__value_.__r.__words[1] + *(_QWORD *)(v47 - 24)) = v48;
      v49 = (std::ios_base *)((char *)&__p[0].__r_.__value_.__r.__words[1]
                            + *(_QWORD *)(__p[0].__r_.__value_.__l.__size_ - 24));
      std::ios_base::init(v49, &__p[0].__r_.__value_.__r.__words[2]);
      v49[1].__vftable = 0;
      v49[1].__fmtflags_ = -1;
      __p[0].__r_.__value_.__l.__size_ = v45 + 24;
      v55 = v46;
      std::streambuf::basic_streambuf();
      __p[0].__r_.__value_.__r.__words[2] = MEMORY[0x1E0DE4FB8] + 16;
      v52 = 0u;
      v53 = 0u;
      v54 = 16;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"Bad final char: ", 16);
      std::ostream::operator<<();
      LogMessage::~LogMessage((void **)&__p[0].__r_.__value_.__l.__data_);
      if (a3 <= 2)
      {
LABEL_22:
        v18 = (std::string *)*((_QWORD *)this + 3);
        v19 = ")";
        goto LABEL_73;
      }
      goto LABEL_71;
    case 7:
      v16 = (std::string *)*((_QWORD *)this + 3);
      v17 = "*";
      goto LABEL_18;
    case 8:
      v16 = (std::string *)*((_QWORD *)this + 3);
      v17 = "+";
      goto LABEL_18;
    case 9:
      v16 = (std::string *)*((_QWORD *)this + 3);
      v17 = "?";
LABEL_18:
      std::string::append(v16, v17);
      goto LABEL_19;
    case 0xA:
      v20 = *((unsigned int *)a2 + 6);
      if ((_DWORD)v20 == -1)
      {
        v21 = (std::string *)*((_QWORD *)this + 3);
        re2::StringPrintf((re2 *)"{%d,}", __p, *((unsigned int *)a2 + 7));
        if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v22 = __p;
        else
          v22 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
        if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
        else
          size = __p[0].__r_.__value_.__l.__size_;
      }
      else
      {
        v21 = (std::string *)*((_QWORD *)this + 3);
        if (*((_DWORD *)a2 + 7) == (_DWORD)v20)
        {
          re2::StringPrintf((re2 *)"{%d}", __p, *((unsigned int *)a2 + 6));
          if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v22 = __p;
          else
            v22 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
          if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
          else
            size = __p[0].__r_.__value_.__l.__size_;
        }
        else
        {
          re2::StringPrintf((re2 *)"{%d,%d}", __p, *((unsigned int *)a2 + 7), v20);
          if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v22 = __p;
          else
            v22 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
          if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
          else
            size = __p[0].__r_.__value_.__l.__size_;
        }
      }
      std::string::append(v21, (const std::string::value_type *)v22, size);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
LABEL_19:
      if ((*((_WORD *)a2 + 1) & 0x40) != 0)
        std::string::append(*((std::string **)this + 3), "?");
      if (a3 <= 0)
        goto LABEL_22;
      goto LABEL_71;
    case 0xB:
      v11 = (std::string *)*((_QWORD *)this + 3);
      v12 = ")";
      goto LABEL_70;
    case 0xC:
      v11 = (std::string *)*((_QWORD *)this + 3);
      v12 = ".";
      goto LABEL_70;
    case 0xD:
      v11 = (std::string *)*((_QWORD *)this + 3);
      v12 = "\\C";
      goto LABEL_70;
    case 0xE:
      v11 = (std::string *)*((_QWORD *)this + 3);
      v12 = "^";
      goto LABEL_70;
    case 0xF:
      v11 = (std::string *)*((_QWORD *)this + 3);
      v12 = "$";
      goto LABEL_70;
    case 0x10:
      v11 = (std::string *)*((_QWORD *)this + 3);
      v12 = "\\b";
      goto LABEL_70;
    case 0x11:
      v11 = (std::string *)*((_QWORD *)this + 3);
      v12 = "\\B";
      goto LABEL_70;
    case 0x12:
      v11 = (std::string *)*((_QWORD *)this + 3);
      v12 = "(?-m:^)";
      goto LABEL_70;
    case 0x13:
      v11 = (std::string *)*((_QWORD *)this + 3);
      if (*((__int16 *)a2 + 1) < 0)
        v12 = "(?-m:$)";
      else
        v12 = "\\z";
      goto LABEL_70;
    case 0x14:
      v11 = (std::string *)*((_QWORD *)this + 3);
      if (!*(_DWORD *)(*((_QWORD *)a2 + 3) + 4))
      {
LABEL_55:
        v12 = "[^\\x00-\\x{10ffff}]";
        goto LABEL_70;
      }
      std::string::append(v11, "[");
      v30 = *((_QWORD *)a2 + 3);
      v31 = *(_DWORD *)(v30 + 16);
      if (v31 < 1)
        goto LABEL_49;
      v32 = *(_QWORD *)(v30 + 8);
      while (2)
      {
        v34 = v31 >> 1;
        if (*(int *)(v32 + 8 * v34 + 4) <= 65533)
        {
          v33 = v34 + 1;
          v32 += 8 * v33;
          v31 -= v33;
          goto LABEL_45;
        }
        v31 = v31 >> 1;
        if (*(int *)(v32 + 8 * v34) >= 0xFFFF)
        {
LABEL_45:
          if (v31 <= 0)
            goto LABEL_50;
          continue;
        }
        break;
      }
      v30 = re2::CharClass::Negate(*((re2::CharClass **)a2 + 3));
      std::string::append(*((std::string **)this + 3), "^");
      v31 = *(_DWORD *)(v30 + 16);
LABEL_49:
      if (v31)
      {
LABEL_50:
        v35 = *(int **)(v30 + 8);
        do
        {
          v37 = *v35;
          v36 = v35[1];
          if (*v35 <= v36)
          {
            v38 = (std::string *)*((_QWORD *)this + 3);
            re2::AppendCCChar(v38, *v35, v24, v25, v26, v27, v28, v29);
            if (v37 < v36)
            {
              std::string::append(v38, "-");
              re2::AppendCCChar(v38, v36, v39, v40, v41, v42, v43, v44);
            }
          }
          v35 += 2;
        }
        while (v35 != (int *)(*(_QWORD *)(v30 + 8) + 8 * *(int *)(v30 + 16)));
      }
      if (v30 != *((_QWORD *)a2 + 3))
        MEMORY[0x1C3BD4840](v30, 0x1000C8077774924);
      v11 = (std::string *)*((_QWORD *)this + 3);
      v12 = "]";
LABEL_70:
      std::string::append(v11, v12);
LABEL_71:
      if (a3 == 3)
      {
        v18 = (std::string *)*((_QWORD *)this + 3);
        v19 = "|";
LABEL_73:
        std::string::append(v18, v19);
      }
      return 0;
    case 0x15:
      std::string::append(*((std::string **)this + 3), "(?HaveMatch:%d)", *((int *)a2 + 6));
      goto LABEL_71;
    default:
      goto LABEL_71;
  }
}

void sub_1C3730698(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1C37306BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1C3BD4828](v1 + 120);
  _Unwind_Resume(a1);
}

void sub_1C37306E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t re2::ToStringWalker::ShortVisit(re2::ToStringWalker *this, re2::Regexp *a2)
{
  return 0;
}

std::string *re2::AppendLiteral(std::string *this, int __c, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  std::string::value_type v11;
  std::string *v12;

  v8 = a3;
  if (__c && __c <= 127 && memchr("(){}[]*+?|.^$\\", __c, 0xFuLL))
  {
    std::string::append(this, 1uLL, 92);
    v11 = __c;
    v12 = this;
    return std::string::append(v12, 1uLL, v11);
  }
  if ((__c - 97) <= 0x19 && v8)
  {
    std::string::append(this, 1uLL, 91);
    std::string::append(this, 1uLL, __c - 32);
    std::string::append(this, 1uLL, __c);
    v12 = this;
    v11 = 93;
    return std::string::append(v12, 1uLL, v11);
  }
  return re2::AppendCCChar(this, __c, a3, a4, a5, a6, a7, a8);
}

std::string *re2::AppendCCChar(std::string *this, int __c, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  std::string::value_type v8;
  std::string *result;
  const std::string::value_type *v11;

  v8 = __c;
  if ((__c - 32) > 0x5E)
  {
    switch(__c)
    {
      case 9:
        v11 = "\\t";
        goto LABEL_10;
      case 10:
        v11 = "\\n";
        goto LABEL_10;
      case 12:
        v11 = "\\f";
        goto LABEL_10;
      case 13:
        v11 = "\\r";
LABEL_10:
        result = std::string::append(this, v11);
        break;
      default:
        if (__c > 255)
          result = re2::StringAppendF(this, "\\x{%x}", a3, a4, a5, a6, a7, a8, __c);
        else
          result = re2::StringAppendF(this, "\\x%02x", a3, a4, a5, a6, a7, a8, __c);
        break;
    }
  }
  else
  {
    if (memchr("[]^-\\", __c, 6uLL))
      std::string::append(this, "\\");
    return std::string::append(this, 1uLL, v8);
  }
  return result;
}

_OWORD *re2::Regexp::ToString@<X0>(re2::Regexp *this@<X0>, std::string *a2@<X8>)
{
  _OWORD *v4;
  _OWORD *result;
  uint64_t v6;
  void (**v7)();
  _OWORD *v8;
  uint64_t v9;
  std::string *v10;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v9 = 0x186A000000000;
  v4 = (_OWORD *)operator new();
  *v4 = 0u;
  v4[1] = 0u;
  v4[2] = 0u;
  v7 = (void (**)())&off_1E7DADF98;
  v8 = v4;
  v10 = a2;
  re2::Regexp::Walker<int>::WalkInternal((uint64_t *)&v7, (uint64_t)this, 6, 0);
  if ((_BYTE)v9)
    std::string::append(a2, " [truncated]");
  v7 = off_1E7DAE000;
  re2::Regexp::Walker<int>::Reset((uint64_t)&v7);
  result = v8;
  if (v8)
  {
    v6 = std::deque<re2::WalkState<int>>::~deque[abi:ne180100]((uint64_t)v8);
    return (_OWORD *)MEMORY[0x1C3BD4858](v6, 0x1080C40BE8D5F09);
  }
  return result;
}

void sub_1C37309B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  re2::ToStringWalker::~ToStringWalker((re2::ToStringWalker *)&a9);
  if (*(char *)(v9 + 23) < 0)
    operator delete(*(void **)v9);
  _Unwind_Resume(a1);
}

void sub_1C3730E28(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_1C3732680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t findConnectedComponents(unsigned int *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint8x8_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *i;
  unint64_t v20;
  _QWORD *v21;
  __int128 v22;
  float v23;
  float v24;
  _BOOL8 v25;
  unint64_t v26;
  unint64_t v27;
  int8x8_t prime;
  void *v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  uint8x8_t v34;
  unint64_t v35;
  uint8x8_t v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  uint8x8_t v44;
  unint64_t v45;
  _QWORD *v46;
  _QWORD *j;
  unint64_t v48;
  int64x2_t *v49;
  float v50;
  float v51;
  _BOOL8 v52;
  unint64_t v53;
  unint64_t v54;
  size_t v55;
  uint64_t v56;
  int64x2_t **v57;
  unint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  unint64_t *v66;
  unint64_t v67;
  int64x2_t **v69;
  _QWORD *v70;
  uint64_t *v71;
  unsigned int *v72;
  uint64_t v73;
  void *__p;
  __int128 v75;

  v2 = operator new();
  v3 = v2;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_DWORD *)(v2 + 32) = 1065353216;
  *(_OWORD *)(v2 + 40) = 0u;
  v4 = (uint64_t *)(v2 + 40);
  *(_OWORD *)(v2 + 56) = 0u;
  *(_DWORD *)(v2 + 72) = 1065353216;
  if (!*a1)
    return v3;
  v5 = 0;
  v69 = (int64x2_t **)(v2 + 56);
  v70 = (_QWORD *)(v2 + 16);
  v71 = (uint64_t *)(v2 + 40);
  v72 = a1;
  do
  {
    v6 = *((_QWORD *)a1 + 1) + 24 * v5;
    if (std::__hash_table<std::__hash_value_type<_vertex_t const*,_vertex_t const*>,std::__unordered_map_hasher<_vertex_t const*,std::__hash_value_type<_vertex_t const*,_vertex_t const*>,std::hash<_vertex_t const*>,std::equal_to<_vertex_t const*>,true>,std::__unordered_map_equal<_vertex_t const*,std::__hash_value_type<_vertex_t const*,_vertex_t const*>,std::equal_to<_vertex_t const*>,std::hash<_vertex_t const*>,true>,std::allocator<std::__hash_value_type<_vertex_t const*,_vertex_t const*>>>::find<_vertex_t const*>(v4, v6))
    {
      __assert_rtn("addSingleton", "componentAnalysis.mm", 39, "elementToRepresentative.find(x) == elementToRepresentative.end()");
    }
    v7 = operator new(8uLL);
    *v7 = v6;
    __p = v7;
    v8 = std::__allocate_at_least[abi:ne180100]<std::allocator<_vertex_t const*>>(1uLL);
    v10 = v9;
    *(_QWORD *)&v11 = v6;
    v73 = v6;
    *((_QWORD *)&v11 + 1) = v8;
    v75 = v11;
    *v8 = *v7;
    v12 = 0x9DDFEA08EB382D69 * (((8 * v6) + 8) ^ HIDWORD(v6));
    v13 = 0x9DDFEA08EB382D69 * (HIDWORD(v6) ^ (v12 >> 47) ^ v12);
    v14 = 0x9DDFEA08EB382D69 * (v13 ^ (v13 >> 47));
    v15 = *(_QWORD *)(v3 + 8);
    if (v15)
    {
      v16 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
      v16.i16[0] = vaddlv_u8(v16);
      if (v16.u32[0] > 1uLL)
      {
        v17 = 0x9DDFEA08EB382D69 * (v13 ^ (v13 >> 47));
        if (v14 >= v15)
          v17 = v14 % v15;
      }
      else
      {
        v17 = v14 & (v15 - 1);
      }
      v18 = *(_QWORD **)(*(_QWORD *)v3 + 8 * v17);
      if (v18)
      {
        for (i = (_QWORD *)*v18; i; i = (_QWORD *)*i)
        {
          v20 = i[1];
          if (v20 == v14)
          {
            if (i[2] == v6)
            {
              v4 = v71;
              a1 = v72;
              goto LABEL_77;
            }
          }
          else
          {
            if (v16.u32[0] > 1uLL)
            {
              if (v20 >= v15)
                v20 %= v15;
            }
            else
            {
              v20 &= v15 - 1;
            }
            if (v20 != v17)
              break;
          }
        }
      }
    }
    else
    {
      v17 = 0;
    }
    v21 = operator new(0x30uLL);
    *(_QWORD *)&v22 = v8 + 1;
    *((_QWORD *)&v22 + 1) = &v8[v10];
    *v21 = 0;
    v21[1] = v14;
    *((_OWORD *)v21 + 1) = v75;
    *((_OWORD *)v21 + 2) = v22;
    v75 = (unint64_t)v75;
    v23 = (float)(unint64_t)(*(_QWORD *)(v3 + 24) + 1);
    v24 = *(float *)(v3 + 32);
    if (!v15 || (float)(v24 * (float)v15) < v23)
    {
      v25 = (v15 & (v15 - 1)) != 0;
      if (v15 < 3)
        v25 = 1;
      v26 = v25 | (2 * v15);
      v27 = vcvtps_u32_f32(v23 / v24);
      if (v26 <= v27)
        prime = (int8x8_t)v27;
      else
        prime = (int8x8_t)v26;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
        v15 = *(_QWORD *)(v3 + 8);
      }
      if (*(_QWORD *)&prime > v15)
        goto LABEL_33;
      if (*(_QWORD *)&prime < v15)
      {
        v35 = vcvtps_u32_f32((float)*(unint64_t *)(v3 + 24) / *(float *)(v3 + 32));
        if (v15 < 3 || (v36 = (uint8x8_t)vcnt_s8((int8x8_t)v15), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
        {
          v35 = std::__next_prime(v35);
        }
        else
        {
          v37 = 1 << -(char)__clz(v35 - 1);
          if (v35 >= 2)
            v35 = v37;
        }
        if (*(_QWORD *)&prime <= v35)
          prime = (int8x8_t)v35;
        if (*(_QWORD *)&prime >= v15)
        {
          v15 = *(_QWORD *)(v3 + 8);
        }
        else
        {
          if (prime)
          {
LABEL_33:
            if (*(_QWORD *)&prime >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v29 = operator new(8 * *(_QWORD *)&prime);
            v30 = *(_QWORD **)v3;
            *(_QWORD *)v3 = v29;
            if (v30)
              operator delete(v30);
            v31 = 0;
            *(int8x8_t *)(v3 + 8) = prime;
            do
              *(_QWORD *)(*(_QWORD *)v3 + 8 * v31++) = 0;
            while (*(_QWORD *)&prime != v31);
            v32 = (_QWORD *)*v70;
            if (*v70)
            {
              v33 = v32[1];
              v34 = (uint8x8_t)vcnt_s8(prime);
              v34.i16[0] = vaddlv_u8(v34);
              if (v34.u32[0] > 1uLL)
              {
                if (v33 >= *(_QWORD *)&prime)
                  v33 %= *(_QWORD *)&prime;
              }
              else
              {
                v33 &= *(_QWORD *)&prime - 1;
              }
              *(_QWORD *)(*(_QWORD *)v3 + 8 * v33) = v70;
              v38 = (_QWORD *)*v32;
              if (*v32)
              {
                do
                {
                  v39 = v38[1];
                  if (v34.u32[0] > 1uLL)
                  {
                    if (v39 >= *(_QWORD *)&prime)
                      v39 %= *(_QWORD *)&prime;
                  }
                  else
                  {
                    v39 &= *(_QWORD *)&prime - 1;
                  }
                  if (v39 != v33)
                  {
                    if (!*(_QWORD *)(*(_QWORD *)v3 + 8 * v39))
                    {
                      *(_QWORD *)(*(_QWORD *)v3 + 8 * v39) = v32;
                      goto LABEL_58;
                    }
                    *v32 = *v38;
                    *v38 = **(_QWORD **)(*(_QWORD *)v3 + 8 * v39);
                    **(_QWORD **)(*(_QWORD *)v3 + 8 * v39) = v38;
                    v38 = v32;
                  }
                  v39 = v33;
LABEL_58:
                  v32 = v38;
                  v38 = (_QWORD *)*v38;
                  v33 = v39;
                }
                while (v38);
              }
            }
            v15 = (unint64_t)prime;
            goto LABEL_62;
          }
          v60 = *(_QWORD **)v3;
          *(_QWORD *)v3 = 0;
          if (v60)
            operator delete(v60);
          v15 = 0;
          *(_QWORD *)(v3 + 8) = 0;
        }
      }
LABEL_62:
      if ((v15 & (v15 - 1)) != 0)
      {
        if (v14 >= v15)
          v17 = v14 % v15;
        else
          v17 = v14;
      }
      else
      {
        v17 = (v15 - 1) & v14;
      }
    }
    v40 = *(_QWORD **)v3;
    v41 = *(_QWORD **)(*(_QWORD *)v3 + 8 * v17);
    if (v41)
    {
      *v21 = *v41;
      v4 = v71;
      a1 = v72;
LABEL_75:
      *v41 = v21;
      goto LABEL_76;
    }
    v4 = v71;
    *v21 = *v70;
    *v70 = v21;
    v40[v17] = v70;
    a1 = v72;
    if (*v21)
    {
      v42 = *(_QWORD *)(*v21 + 8);
      if ((v15 & (v15 - 1)) != 0)
      {
        if (v42 >= v15)
          v42 %= v15;
      }
      else
      {
        v42 &= v15 - 1;
      }
      v41 = (_QWORD *)(*(_QWORD *)v3 + 8 * v42);
      goto LABEL_75;
    }
LABEL_76:
    ++*(_QWORD *)(v3 + 24);
LABEL_77:
    if (*((_QWORD *)&v75 + 1))
      operator delete(*((void **)&v75 + 1));
    v43 = *(_QWORD *)(v3 + 48);
    if (v43)
    {
      v44 = (uint8x8_t)vcnt_s8((int8x8_t)v43);
      v44.i16[0] = vaddlv_u8(v44);
      if (v44.u32[0] > 1uLL)
      {
        v45 = v14;
        if (v14 >= v43)
          v45 = v14 % v43;
      }
      else
      {
        v45 = v14 & (v43 - 1);
      }
      v46 = *(_QWORD **)(*v4 + 8 * v45);
      if (v46)
      {
        for (j = (_QWORD *)*v46; j; j = (_QWORD *)*j)
        {
          v48 = j[1];
          if (v48 == v14)
          {
            if (j[2] == v6)
              goto LABEL_118;
          }
          else
          {
            if (v44.u32[0] > 1uLL)
            {
              if (v48 >= v43)
                v48 %= v43;
            }
            else
            {
              v48 &= v43 - 1;
            }
            if (v48 != v45)
              break;
          }
        }
      }
    }
    else
    {
      v45 = 0;
    }
    v49 = (int64x2_t *)operator new(0x20uLL);
    v49->i64[0] = 0;
    v49->i64[1] = v14;
    v49[1] = vdupq_lane_s64(v73, 0);
    v50 = (float)(unint64_t)(*(_QWORD *)(v3 + 64) + 1);
    v51 = *(float *)(v3 + 72);
    if (!v43 || (float)(v51 * (float)v43) < v50)
    {
      v52 = (v43 & (v43 - 1)) != 0;
      if (v43 < 3)
        v52 = 1;
      v53 = v52 | (2 * v43);
      v54 = vcvtps_u32_f32(v50 / v51);
      if (v53 <= v54)
        v55 = v54;
      else
        v55 = v53;
      std::__hash_table<std::__hash_value_type<_vertex_t const*,_vertex_t const*>,std::__unordered_map_hasher<_vertex_t const*,std::__hash_value_type<_vertex_t const*,_vertex_t const*>,std::hash<_vertex_t const*>,std::equal_to<_vertex_t const*>,true>,std::__unordered_map_equal<_vertex_t const*,std::__hash_value_type<_vertex_t const*,_vertex_t const*>,std::equal_to<_vertex_t const*>,std::hash<_vertex_t const*>,true>,std::allocator<std::__hash_value_type<_vertex_t const*,_vertex_t const*>>>::__rehash<true>((uint64_t)v4, v55);
      v43 = *(_QWORD *)(v3 + 48);
      if ((v43 & (v43 - 1)) != 0)
      {
        if (v14 >= v43)
          v45 = v14 % v43;
        else
          v45 = v14;
      }
      else
      {
        v45 = (v43 - 1) & v14;
      }
    }
    v56 = *v4;
    v57 = *(int64x2_t ***)(*v4 + 8 * v45);
    if (v57)
    {
      v49->i64[0] = (uint64_t)*v57;
LABEL_116:
      *v57 = v49;
      goto LABEL_117;
    }
    v49->i64[0] = (uint64_t)*v69;
    *v69 = v49;
    *(_QWORD *)(v56 + 8 * v45) = v69;
    if (v49->i64[0])
    {
      v58 = *(_QWORD *)(v49->i64[0] + 8);
      if ((v43 & (v43 - 1)) != 0)
      {
        if (v58 >= v43)
          v58 %= v43;
      }
      else
      {
        v58 &= v43 - 1;
      }
      v57 = (int64x2_t **)(*v4 + 8 * v58);
      goto LABEL_116;
    }
LABEL_117:
    ++*(_QWORD *)(v3 + 64);
LABEL_118:
    operator delete(__p);
    ++v5;
    v59 = *a1;
  }
  while (v5 < v59);
  if (*a1)
  {
    v61 = 0;
    do
    {
      v62 = *((_QWORD *)a1 + 1);
      v63 = v62 + 24 * v61;
      if (*(_DWORD *)(v63 + 16))
      {
        v64 = 0;
        v65 = (_QWORD *)(v62 + 24 * v61 + 8);
        do
        {
          v66 = *(unint64_t **)(*v65 + 8 * v64);
          v67 = *v66;
          if (*v66 == v63)
            v67 = v66[1];
          ++v64;
        }
        while (v64 < *(unsigned int *)(v63 + 16));
        v59 = *a1;
      }
      ++v61;
    }
    while (v61 < v59);
  }
  return v3;
}

void sub_1C37338F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, __int128 a17)
{
  _QWORD *v17;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<_vertex_t const*,std::vector<_vertex_t const*>>,void *>>>::operator()[abi:ne180100](1, v17);
  if (*((_QWORD *)&a17 + 1))
    operator delete(*((void **)&a17 + 1));
  operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<_vertex_t const*,_vertex_t const*>,std::__unordered_map_hasher<_vertex_t const*,std::__hash_value_type<_vertex_t const*,_vertex_t const*>,std::hash<_vertex_t const*>,std::equal_to<_vertex_t const*>,true>,std::__unordered_map_equal<_vertex_t const*,std::__hash_value_type<_vertex_t const*,_vertex_t const*>,std::equal_to<_vertex_t const*>,std::hash<_vertex_t const*>,true>,std::allocator<std::__hash_value_type<_vertex_t const*,_vertex_t const*>>>::find<_vertex_t const*>(_QWORD *a1, unint64_t a2)
{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  unint64_t v10;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v4 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v3 >> 47) ^ v3);
  v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v5;
    if (v5 >= *(_QWORD *)&v2)
      v7 = v5 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = v5 & (*(_QWORD *)&v2 - 1);
  }
  v8 = *(_QWORD **)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  result = (_QWORD *)*v8;
  if (*v8)
  {
    do
    {
      v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == a2)
          return result;
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(_QWORD *)&v2)
            v10 %= *(_QWORD *)&v2;
        }
        else
        {
          v10 &= *(_QWORD *)&v2 - 1;
        }
        if (v10 != v7)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  unint64_t v10;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v4 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v3 >> 47) ^ v3);
  v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v5;
    if (v5 >= *(_QWORD *)&v2)
      v7 = v5 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = v5 & (*(_QWORD *)&v2 - 1);
  }
  v8 = *(_QWORD **)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  result = (_QWORD *)*v8;
  if (*v8)
  {
    do
    {
      v10 = result[1];
      if (v5 == v10)
      {
        if (result[2] == a2)
          return result;
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(_QWORD *)&v2)
            v10 %= *(_QWORD *)&v2;
        }
        else
        {
          v10 &= *(_QWORD *)&v2 - 1;
        }
        if (v10 != v7)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

void `anonymous namespace'::DisjointSets<_vertex_t const*>::union_(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t *v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  char **v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  char **v19;
  BOOL v20;
  char *v21;
  char **v22;
  char *v23;
  char **v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  int64_t v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  _QWORD *v40;
  char *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  unint64_t v54;
  _QWORD *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint8x8_t v60;
  unint64_t v61;
  _QWORD **v62;
  _QWORD *i;
  unint64_t v64;
  float v65;
  float v66;
  _BOOL8 v67;
  unint64_t v68;
  unint64_t v69;
  size_t v70;
  uint64_t v71;
  _QWORD *v72;
  unint64_t v73;
  unint64_t v74;
  _QWORD *v75;
  int8x8_t v76;
  unint64_t v77;
  uint8x8_t v78;
  _QWORD *v79;
  _QWORD *v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;

  v5 = (uint64_t *)(a1 + 40);
  v6 = std::__hash_table<std::__hash_value_type<_vertex_t const*,_vertex_t const*>,std::__unordered_map_hasher<_vertex_t const*,std::__hash_value_type<_vertex_t const*,_vertex_t const*>,std::hash<_vertex_t const*>,std::equal_to<_vertex_t const*>,true>,std::__unordered_map_equal<_vertex_t const*,std::__hash_value_type<_vertex_t const*,_vertex_t const*>,std::equal_to<_vertex_t const*>,std::hash<_vertex_t const*>,true>,std::allocator<std::__hash_value_type<_vertex_t const*,_vertex_t const*>>>::find<_vertex_t const*>((_QWORD *)(a1 + 40), a2);
  v7 = std::__hash_table<std::__hash_value_type<_vertex_t const*,_vertex_t const*>,std::__unordered_map_hasher<_vertex_t const*,std::__hash_value_type<_vertex_t const*,_vertex_t const*>,std::hash<_vertex_t const*>,std::equal_to<_vertex_t const*>,true>,std::__unordered_map_equal<_vertex_t const*,std::__hash_value_type<_vertex_t const*,_vertex_t const*>,std::equal_to<_vertex_t const*>,std::hash<_vertex_t const*>,true>,std::allocator<std::__hash_value_type<_vertex_t const*,_vertex_t const*>>>::find<_vertex_t const*>(v5, a3);
  if (!v6)
    __assert_rtn("union_", "componentAnalysis.mm", 52, "rep1Iter != elementToRepresentative.end()");
  if (!v7)
    __assert_rtn("union_", "componentAnalysis.mm", 53, "rep2Iter != elementToRepresentative.end()");
  v8 = v6[3];
  v9 = v7[3];
  if (v8 != v9)
  {
    v10 = std::__hash_table<std::__hash_value_type<_vertex_t const*,_vertex_t const*>,std::__unordered_map_hasher<_vertex_t const*,std::__hash_value_type<_vertex_t const*,_vertex_t const*>,std::hash<_vertex_t const*>,std::equal_to<_vertex_t const*>,true>,std::__unordered_map_equal<_vertex_t const*,std::__hash_value_type<_vertex_t const*,_vertex_t const*>,std::equal_to<_vertex_t const*>,std::hash<_vertex_t const*>,true>,std::allocator<std::__hash_value_type<_vertex_t const*,_vertex_t const*>>>::find<_vertex_t const*>((_QWORD *)a1, v8);
    v11 = std::__hash_table<std::__hash_value_type<_vertex_t const*,_vertex_t const*>,std::__unordered_map_hasher<_vertex_t const*,std::__hash_value_type<_vertex_t const*,_vertex_t const*>,std::hash<_vertex_t const*>,std::equal_to<_vertex_t const*>,true>,std::__unordered_map_equal<_vertex_t const*,std::__hash_value_type<_vertex_t const*,_vertex_t const*>,std::equal_to<_vertex_t const*>,std::hash<_vertex_t const*>,true>,std::allocator<std::__hash_value_type<_vertex_t const*,_vertex_t const*>>>::find<_vertex_t const*>((_QWORD *)a1, v9);
    if (v10)
      v12 = v11 == 0;
    else
      v12 = 1;
    if (v12)
      __assert_rtn("union_", "componentAnalysis.mm", 63, "set1Iter != representativeToSet.end() && set2Iter != representativeToSet.end()");
    v87 = v9;
    v88 = v8;
    v15 = (char *)v11[3];
    v14 = v11[4];
    v13 = (char **)(v11 + 3);
    v16 = v14 - (_QWORD)v15;
    v18 = (char *)v10[3];
    v17 = v10[4];
    v19 = (char **)(v10 + 3);
    v85 = v17 - (_QWORD)v18;
    v86 = v16;
    v20 = v16 >= v17 - (uint64_t)v18;
    if (v16 >= v17 - (uint64_t)v18)
      v21 = v15;
    else
      v21 = v18;
    if (v20)
      v22 = v13;
    else
      v22 = v19;
    if (v20)
      v23 = v18;
    else
      v23 = v15;
    if (v20)
      v24 = v19;
    else
      v24 = v13;
    v25 = v24[1];
    if (v25 - v23 >= 1)
    {
      v26 = (v25 - v23) >> 3;
      v28 = v22[1];
      v27 = v22[2];
      if (v26 <= (v27 - v28) >> 3)
      {
        if (v26 <= 0)
        {
          v35 = v22[1];
          v36 = &v28[8 * v26];
          v37 = &v35[-8 * v26];
          v38 = v35;
          if (v37 < v28)
          {
            v38 = v22[1];
            do
            {
              v39 = *(_QWORD *)v37;
              v37 += 8;
              *(_QWORD *)v38 = v39;
              v38 += 8;
            }
            while (v37 < v28);
          }
          v22[1] = v38;
          if (v35 != v36)
            memmove(&v35[-8 * ((v35 - v36) >> 3)], v28, v35 - v36);
          if (&v23[8 * v26] != v23)
            memmove(v28, v23, 8 * v26);
        }
        else
        {
          v34 = v25 - v23;
          if (v25 != v23)
            memmove(v22[1], v23, v25 - v23);
          v22[1] = &v28[v34];
        }
      }
      else
      {
        v29 = (v28 - v21) >> 3;
        v30 = v29 + v26;
        if ((unint64_t)(v29 + v26) >> 61)
          std::vector<re2::RE2 *>::__throw_length_error[abi:ne180100]();
        v31 = v27 - v21;
        if (v31 >> 2 > v30)
          v30 = v31 >> 2;
        if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
          v32 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v32 = v30;
        if (v32)
          v32 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<_vertex_t const*>>(v32);
        else
          v33 = 0;
        v40 = (_QWORD *)(v32 + 8 * v29);
        v41 = (char *)&v40[v26];
        v42 = 8 * v26;
        v43 = v40;
        do
        {
          v44 = *(_QWORD *)v23;
          v23 += 8;
          *v43++ = v44;
          v42 -= 8;
        }
        while (v42);
        v45 = *v22;
        if (*v22 != v28)
        {
          v46 = v28;
          do
          {
            v47 = *((_QWORD *)v46 - 1);
            v46 -= 8;
            *--v40 = v47;
          }
          while (v46 != v45);
        }
        v48 = v32 + 8 * v33;
        v49 = v22[1];
        v50 = v49 - v28;
        if (v49 != v28)
          memmove(v41, v28, v49 - v28);
        v51 = *v22;
        *v22 = (char *)v40;
        v22[1] = &v41[v50];
        v22[2] = (char *)v48;
        if (v51)
          operator delete(v51);
      }
    }
    v52 = *v24;
    v53 = v24[1];
    if (*v24 != v53)
    {
      v54 = v88;
      if (v86 >= v85)
        v54 = v87;
      v89 = v54;
      v55 = (_QWORD *)(a1 + 56);
      v56 = *(_QWORD *)(a1 + 48);
      do
      {
        v57 = 0x9DDFEA08EB382D69 * ((8 * *(_QWORD *)v52 + 8) ^ HIDWORD(*(_QWORD *)v52));
        v58 = 0x9DDFEA08EB382D69 * (HIDWORD(*(_QWORD *)v52) ^ (v57 >> 47) ^ v57);
        v59 = 0x9DDFEA08EB382D69 * (v58 ^ (v58 >> 47));
        if (v56)
        {
          v60 = (uint8x8_t)vcnt_s8((int8x8_t)v56);
          v60.i16[0] = vaddlv_u8(v60);
          if (v60.u32[0] > 1uLL)
          {
            v61 = 0x9DDFEA08EB382D69 * (v58 ^ (v58 >> 47));
            if (v59 >= v56)
              v61 = v59 % v56;
          }
          else
          {
            v61 = v59 & (v56 - 1);
          }
          v62 = *(_QWORD ***)(*v5 + 8 * v61);
          if (v62)
          {
            for (i = *v62; i; i = (_QWORD *)*i)
            {
              v64 = i[1];
              if (v64 == v59)
              {
                if (i[2] == *(_QWORD *)v52)
                  goto LABEL_94;
              }
              else
              {
                if (v60.u32[0] > 1uLL)
                {
                  if (v64 >= v56)
                    v64 %= v56;
                }
                else
                {
                  v64 &= v56 - 1;
                }
                if (v64 != v61)
                  break;
              }
            }
          }
        }
        else
        {
          v61 = 0;
        }
        i = operator new(0x20uLL);
        *i = 0;
        i[1] = v59;
        i[2] = *(_QWORD *)v52;
        i[3] = 0;
        v65 = (float)(unint64_t)(*(_QWORD *)(a1 + 64) + 1);
        v66 = *(float *)(a1 + 72);
        if (!v56 || (float)(v66 * (float)v56) < v65)
        {
          v67 = (v56 & (v56 - 1)) != 0;
          if (v56 < 3)
            v67 = 1;
          v68 = v67 | (2 * v56);
          v69 = vcvtps_u32_f32(v65 / v66);
          if (v68 <= v69)
            v70 = v69;
          else
            v70 = v68;
          std::__hash_table<std::__hash_value_type<_vertex_t const*,_vertex_t const*>,std::__unordered_map_hasher<_vertex_t const*,std::__hash_value_type<_vertex_t const*,_vertex_t const*>,std::hash<_vertex_t const*>,std::equal_to<_vertex_t const*>,true>,std::__unordered_map_equal<_vertex_t const*,std::__hash_value_type<_vertex_t const*,_vertex_t const*>,std::equal_to<_vertex_t const*>,std::hash<_vertex_t const*>,true>,std::allocator<std::__hash_value_type<_vertex_t const*,_vertex_t const*>>>::__rehash<true>((uint64_t)v5, v70);
          v56 = *(_QWORD *)(a1 + 48);
          if ((v56 & (v56 - 1)) != 0)
          {
            if (v59 >= v56)
              v61 = v59 % v56;
            else
              v61 = v59;
          }
          else
          {
            v61 = (v56 - 1) & v59;
          }
        }
        v71 = *v5;
        v72 = *(_QWORD **)(*v5 + 8 * v61);
        if (v72)
        {
          *i = *v72;
        }
        else
        {
          *i = *v55;
          *v55 = i;
          *(_QWORD *)(v71 + 8 * v61) = v55;
          if (!*i)
            goto LABEL_93;
          v73 = *(_QWORD *)(*i + 8);
          if ((v56 & (v56 - 1)) != 0)
          {
            if (v73 >= v56)
              v73 %= v56;
          }
          else
          {
            v73 &= v56 - 1;
          }
          v72 = (_QWORD *)(*v5 + 8 * v73);
        }
        *v72 = i;
LABEL_93:
        ++*(_QWORD *)(a1 + 64);
LABEL_94:
        i[3] = v89;
        v52 += 8;
      }
      while (v52 != v53);
    }
    if (v86 >= v85)
      v74 = v88;
    else
      v74 = v87;
    v75 = std::__hash_table<std::__hash_value_type<_vertex_t const*,_vertex_t const*>,std::__unordered_map_hasher<_vertex_t const*,std::__hash_value_type<_vertex_t const*,_vertex_t const*>,std::hash<_vertex_t const*>,std::equal_to<_vertex_t const*>,true>,std::__unordered_map_equal<_vertex_t const*,std::__hash_value_type<_vertex_t const*,_vertex_t const*>,std::equal_to<_vertex_t const*>,std::hash<_vertex_t const*>,true>,std::allocator<std::__hash_value_type<_vertex_t const*,_vertex_t const*>>>::find<_vertex_t const*>((_QWORD *)a1, v74);
    if (v75)
    {
      v76 = *(int8x8_t *)(a1 + 8);
      v77 = v75[1];
      v78 = (uint8x8_t)vcnt_s8(v76);
      v78.i16[0] = vaddlv_u8(v78);
      if (v78.u32[0] > 1uLL)
      {
        if (v77 >= *(_QWORD *)&v76)
          v77 %= *(_QWORD *)&v76;
      }
      else
      {
        v77 &= *(_QWORD *)&v76 - 1;
      }
      v79 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v77);
      do
      {
        v80 = v79;
        v79 = (_QWORD *)*v79;
      }
      while (v79 != v75);
      if (v80 == (_QWORD *)(a1 + 16))
        goto LABEL_117;
      v81 = v80[1];
      if (v78.u32[0] > 1uLL)
      {
        if (v81 >= *(_QWORD *)&v76)
          v81 %= *(_QWORD *)&v76;
      }
      else
      {
        v81 &= *(_QWORD *)&v76 - 1;
      }
      if (v81 != v77)
      {
LABEL_117:
        if (!*v75)
          goto LABEL_118;
        v82 = *(_QWORD *)(*v75 + 8);
        if (v78.u32[0] > 1uLL)
        {
          if (v82 >= *(_QWORD *)&v76)
            v82 %= *(_QWORD *)&v76;
        }
        else
        {
          v82 &= *(_QWORD *)&v76 - 1;
        }
        if (v82 != v77)
LABEL_118:
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v77) = 0;
      }
      v83 = *v75;
      if (*v75)
      {
        v84 = *(_QWORD *)(v83 + 8);
        if (v78.u32[0] > 1uLL)
        {
          if (v84 >= *(_QWORD *)&v76)
            v84 %= *(_QWORD *)&v76;
        }
        else
        {
          v84 &= *(_QWORD *)&v76 - 1;
        }
        if (v84 != v77)
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v84) = v80;
          v83 = *v75;
        }
      }
      *v80 = v83;
      *v75 = 0;
      --*(_QWORD *)(a1 + 24);
      std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<_vertex_t const*,std::vector<_vertex_t const*>>,void *>>>::operator()[abi:ne180100](1, v75);
    }
  }
}

void sub_1C373408C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<_vertex_t const*,_vertex_t const*>,std::__unordered_map_hasher<_vertex_t const*,std::__hash_value_type<_vertex_t const*,_vertex_t const*>,std::hash<_vertex_t const*>,std::equal_to<_vertex_t const*>,true>,std::__unordered_map_equal<_vertex_t const*,std::__hash_value_type<_vertex_t const*,_vertex_t const*>,std::equal_to<_vertex_t const*>,std::hash<_vertex_t const*>,true>,std::allocator<std::__hash_value_type<_vertex_t const*,_vertex_t const*>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  void *v16;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(_QWORD *)&v4)
  {
    if (prime >= *(_QWORD *)&v4)
      return;
    v11 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v12 = (uint8x8_t)vcnt_s8(v4), v12.i16[0] = vaddlv_u8(v12), v12.u32[0] > 1uLL))
    {
      v11 = std::__next_prime(v11);
    }
    else
    {
      v13 = 1 << -(char)__clz(v11 - 1);
      if (v11 >= 2)
        v11 = v13;
    }
    if (prime <= v11)
      prime = v11;
    if (prime >= *(_QWORD *)&v4)
      return;
    if (!prime)
    {
      v16 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v16)
        operator delete(v16);
      *(_QWORD *)(a1 + 8) = 0;
      return;
    }
  }
  if (prime >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v5 = operator new(8 * prime);
  v6 = *(void **)a1;
  *(_QWORD *)a1 = v5;
  if (v6)
    operator delete(v6);
  v7 = 0;
  *(_QWORD *)(a1 + 8) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v7++) = 0;
  while (prime != v7);
  v8 = *(_QWORD **)(a1 + 16);
  if (v8)
  {
    v9 = v8[1];
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      if (v9 >= prime)
        v9 %= prime;
    }
    else
    {
      v9 &= prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = a1 + 16;
    v14 = (_QWORD *)*v8;
    if (*v8)
    {
      do
      {
        v15 = v14[1];
        if (v10.u32[0] > 1uLL)
        {
          if (v15 >= prime)
            v15 %= prime;
        }
        else
        {
          v15 &= prime - 1;
        }
        if (v15 != v9)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v15))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v15) = v8;
            goto LABEL_31;
          }
          *v8 = *v14;
          *v14 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v15);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v15) = v14;
          v14 = v8;
        }
        v15 = v9;
LABEL_31:
        v8 = v14;
        v14 = (_QWORD *)*v14;
        v9 = v15;
      }
      while (v14);
    }
  }
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<_vertex_t const*,std::vector<_vertex_t const*>>,void *>>>::operator()[abi:ne180100](char a1, _QWORD *__p)
{
  void *v3;

  if (a1)
  {
    v3 = (void *)__p[3];
    if (v3)
    {
      __p[4] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<_vertex_t const*>>(unint64_t a1)
{
  if (a1 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a1);
}

BOOL sameConnectedComponent(uint64_t a1, unint64_t a2, unint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _BOOL8 result;

  v4 = (_QWORD *)(a1 + 40);
  v5 = std::__hash_table<std::__hash_value_type<_vertex_t const*,_vertex_t const*>,std::__unordered_map_hasher<_vertex_t const*,std::__hash_value_type<_vertex_t const*,_vertex_t const*>,std::hash<_vertex_t const*>,std::equal_to<_vertex_t const*>,true>,std::__unordered_map_equal<_vertex_t const*,std::__hash_value_type<_vertex_t const*,_vertex_t const*>,std::equal_to<_vertex_t const*>,std::hash<_vertex_t const*>,true>,std::allocator<std::__hash_value_type<_vertex_t const*,_vertex_t const*>>>::find<_vertex_t const*>((_QWORD *)(a1 + 40), a2);
  v6 = std::__hash_table<std::__hash_value_type<_vertex_t const*,_vertex_t const*>,std::__unordered_map_hasher<_vertex_t const*,std::__hash_value_type<_vertex_t const*,_vertex_t const*>,std::hash<_vertex_t const*>,std::equal_to<_vertex_t const*>,true>,std::__unordered_map_equal<_vertex_t const*,std::__hash_value_type<_vertex_t const*,_vertex_t const*>,std::equal_to<_vertex_t const*>,std::hash<_vertex_t const*>,true>,std::allocator<std::__hash_value_type<_vertex_t const*,_vertex_t const*>>>::find<_vertex_t const*>(v4, a3);
  result = 0;
  if (v5)
  {
    if (v6)
      return v5[3] == v6[3];
  }
  return result;
}

uint64_t freeDisjointSet(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  void *v8;

  if (result)
  {
    v1 = result;
    v2 = *(_QWORD **)(result + 56);
    if (v2)
    {
      do
      {
        v3 = (_QWORD *)*v2;
        operator delete(v2);
        v2 = v3;
      }
      while (v3);
    }
    v4 = *(void **)(v1 + 40);
    *(_QWORD *)(v1 + 40) = 0;
    if (v4)
      operator delete(v4);
    v5 = *(_QWORD **)(v1 + 16);
    if (v5)
    {
      do
      {
        v6 = (_QWORD *)*v5;
        v7 = (void *)v5[3];
        if (v7)
        {
          v5[4] = v7;
          operator delete(v7);
        }
        operator delete(v5);
        v5 = v6;
      }
      while (v6);
    }
    v8 = *(void **)v1;
    *(_QWORD *)v1 = 0;
    if (v8)
      operator delete(v8);
    JUMPOUT(0x1C3BD4858);
  }
  return result;
}

void visitConnectedComponents(uint64_t a1, void *a2, void *a3)
{
  void (**v5)(id, _QWORD);
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  _QWORD *v21;
  _QWORD *v22;
  void (**v23)(void);

  v23 = a2;
  v5 = a3;
  v6 = *(_QWORD *)(a1 + 24);
  if (v6)
  {
    if (v6 >> 61)
      std::vector<re2::RE2 *>::__throw_length_error[abi:ne180100]();
    v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_vertex_t const*>>(v6);
    v9 = &v7[8 * v8];
  }
  else
  {
    v7 = 0;
    v9 = 0;
  }
  v10 = *(_QWORD **)(a1 + 16);
  if (v10)
  {
    v11 = v7;
    do
    {
      v12 = v10 + 3;
      if (v11 >= v9)
      {
        v13 = (v11 - v7) >> 3;
        v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 61)
          std::vector<re2::RE2 *>::__throw_length_error[abi:ne180100]();
        if ((v9 - v7) >> 2 > v14)
          v14 = (v9 - v7) >> 2;
        if ((unint64_t)(v9 - v7) >= 0x7FFFFFFFFFFFFFF8)
          v15 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v15 = v14;
        if (v15)
          v15 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<_vertex_t const*>>(v15);
        else
          v16 = 0;
        v17 = (char *)(v15 + 8 * v13);
        *(_QWORD *)v17 = v12;
        v18 = v17 + 8;
        while (v11 != v7)
        {
          v19 = *((_QWORD *)v11 - 1);
          v11 -= 8;
          *((_QWORD *)v17 - 1) = v19;
          v17 -= 8;
        }
        v9 = (char *)(v15 + 8 * v16);
        if (v7)
          operator delete(v7);
        v7 = v17;
        v11 = v18;
      }
      else
      {
        *(_QWORD *)v11 = v12;
        v11 += 8;
      }
      v10 = (_QWORD *)*v10;
    }
    while (v10);
    if (v7 != v11)
    {
      v20 = v7;
      do
      {
        v21 = **(_QWORD ***)v20;
        v22 = *(_QWORD **)(*(_QWORD *)v20 + 8);
        while (v21 != v22)
          v5[2](v5, *v21++);
        v23[2]();
        v20 += 8;
      }
      while (v20 != v11);
    }
  }
  if (v7)
    operator delete(v7);

}

void sub_1C373469C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1C3734FF8(_Unwind_Exception *a1)
{
  objc_sync_exit(CFSTR("SuggestionsMLDebugContextDataKey"));
  _Unwind_Resume(a1);
}

uint64_t SGMIMetricsMissingElementPredictionReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  unint64_t v19;
  int v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v21 = 0;
        v22 = 0;
        v23 = 0;
        *(_BYTE *)(a1 + 16) |= 2u;
        while (1)
        {
          v24 = *v3;
          v25 = *(_QWORD *)(a2 + v24);
          v26 = v25 + 1;
          if (v25 == -1 || v26 > *(_QWORD *)(a2 + *v4))
            break;
          v27 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v25);
          *(_QWORD *)(a2 + v24) = v26;
          v23 |= (unint64_t)(v27 & 0x7F) << v21;
          if ((v27 & 0x80) == 0)
            goto LABEL_33;
          v21 += 7;
          v15 = v22++ >= 9;
          if (v15)
          {
            v23 = 0;
            goto LABEL_35;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_33:
        if (*(_BYTE *)(a2 + *v5))
          v23 = 0;
LABEL_35:
        *(_BYTE *)(a1 + 12) = v23 != 0;
      }
      else if ((v10 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 16) |= 1u;
        v18 = *v3;
        v19 = *(_QWORD *)(a2 + v18);
        if (v19 <= 0xFFFFFFFFFFFFFFFBLL && v19 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v20 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v19);
          *(_QWORD *)(a2 + v18) = v19 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v20 = 0;
        }
        *(_DWORD *)(a1 + 8) = v20;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1C3737908(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose(&STACK[0x388], 8);
  _Block_object_dispose((const void *)(v1 - 160), 8);
  SGRecordMeasurementState(&STACK[0x3A8]);
  _Unwind_Resume(a1);
}

void sub_1C373B658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C373CA90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_1C373CCDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C373D01C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C373D358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C373D684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__18095(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__18096(uint64_t a1)
{

}

void __serialQueue_block_invoke()
{
  void *v0;
  uint64_t v1;
  void *v2;

  v0 = (void *)MEMORY[0x1C3BD4F6C]();
  objc_msgSend(MEMORY[0x1E0D81598], "autoreleasingSerialQueueWithLabel:qosClass:", "com.apple.suggestions.messageEventDissector", 17);
  v1 = objc_claimAutoreleasedReturnValue();
  v2 = (void *)serialQueue__pasExprOnceResult;
  serialQueue__pasExprOnceResult = v1;

  objc_autoreleasePoolPop(v0);
}

void sub_1C3741A84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C3741B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C3741CDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1C374202C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v10 - 184), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__18382(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__18383(uint64_t a1)
{

}

void SGDataDetectorsRunWithSharedScanner(void *a1)
{
  id v1;
  id v2;
  void *v3;
  id v4;
  _QWORD v5[4];
  id v6;

  v1 = a1;
  if (SGDataDetectorsRunWithSharedScanner__pasOnceToken3 != -1)
    dispatch_once(&SGDataDetectorsRunWithSharedScanner__pasOnceToken3, &__block_literal_global_18469);
  v2 = (id)SGDataDetectorsRunWithSharedScanner__pasExprOnceResult;
  objc_msgSend(v2, "result");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __SGDataDetectorsRunWithSharedScanner_block_invoke_3;
  v5[3] = &unk_1E7DAE738;
  v6 = v1;
  v4 = v1;
  objc_msgSend(v3, "runWithLockAcquired:", v5);

}

void SGDataDetectorsScan(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v7;
  id v8;

  v7 = a4;
  v8 = a2;
  SGDataDetectorsScanRange(a1, v8, 0, objc_msgSend(v8, "length"), a3, v7);

}

void SGDataDetectorsScanRange(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  id v7;
  uint64_t (**v8)(id, const void *);
  const __CFArray *v9;
  const __CFArray *v10;
  CFIndex Count;
  CFIndex v12;
  CFIndex v13;
  void *v14;
  const void *ValueAtIndex;
  NSObject *v16;
  int v17;
  uint8_t buf[4];
  const void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a6;
  if (DDScannerScanStringWithRange())
  {
    v9 = (const __CFArray *)DDScannerCopyResultsWithOptions();
    if (v9)
    {
      v10 = v9;
      Count = CFArrayGetCount(v9);
      v12 = Count - 1;
      if (Count >= 1)
      {
        v13 = 0;
        do
        {
          v14 = (void *)MEMORY[0x1C3BD4F6C]();
          ValueAtIndex = CFArrayGetValueAtIndex(v10, v13);
          sgLogHandle();
          v16 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 138412290;
            v20 = ValueAtIndex;
            _os_log_debug_impl(&dword_1C3607000, v16, OS_LOG_TYPE_DEBUG, "SGDataDetectors: data detection: %@", buf, 0xCu);
          }

          v17 = v8[2](v8, ValueAtIndex);
          objc_autoreleasePoolPop(v14);
          if (!v17)
            break;
        }
        while (v12 != v13++);
      }
      CFRelease(v10);
    }
  }
  DDScannerReset();

}

id SGDataDetectorsGetDate()
{
  int v0;
  id v1;

  v0 = DDResultCopyExtractedDateFromReferenceDate();
  v1 = 0;
  if (v0)

  return v1;
}

id SGDataDetectorsGetDateWithLocale()
{
  int v0;
  id v1;

  v0 = DDResultCopyExtractedDateFromReferenceDateWithLocale();
  v1 = 0;
  if (v0)

  return v1;
}

id SGDataDetectorsGetDateAndTimeZoneWithLocale(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _BYTE *a5)
{
  if (utcTz__pasOnceToken5 != -1)
    dispatch_once(&utcTz__pasOnceToken5, &__block_literal_global_44);
  if (DDResultCopyExtractedDateFromReferenceDateWithLocale())
  {
    *a4 = objc_retainAutorelease(0);
    *a5 = 0;
  }
  return 0;
}

void __utcTz_block_invoke()
{
  void *v0;

  v0 = (void *)MEMORY[0x1C3BD4F6C]();
  utcTz__pasExprOnceResult = (uint64_t)CFTimeZoneCreateWithTimeIntervalFromGMT(0, 0.0);
  objc_autoreleasePoolPop(v0);
}

uint64_t SGDataDetectorsGetDateAndTimeZoneWithLocaleAndTimeZone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, _QWORD *a6, _BYTE *a7)
{
  uint64_t result;

  result = DDResultCopyExtractedDateFromReferenceDateWithLocale();
  if ((_DWORD)result)
  {
    *a7 = 0;
    *a5 = 0;
    *a6 = objc_retainAutorelease(0);
    return 1;
  }
  return result;
}

uint64_t SGDataDetectorsGetIntervalDatesAndTimeZoneWithLocale(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, uint64_t a7, _BYTE *a8)
{
  uint64_t result;

  result = DDResultCopyExtractedStartDateEndDateWithLocale();
  if ((_DWORD)result)
  {
    *a3 = 0;
    *a5 = 0;
    *a4 = objc_retainAutorelease(0);
    *a6 = objc_retainAutorelease(0);
    *a8 = 0;
    return 1;
  }
  return result;
}

uint64_t SGDataDetectorsGetType()
{
  int v0;
  uint64_t result;
  BOOL v2;
  uint64_t v3;

  v0 = DDResultGetCategory() - 1;
  result = 32;
  switch(v0)
  {
    case 0:
      return result;
    case 1:
      result = 2048;
      break;
    case 2:
      result = 16;
      break;
    case 3:
      result = 8;
      break;
    case 4:
      v2 = DDResultHasType() == 0;
      v3 = 4096;
      goto LABEL_7;
    default:
      v2 = DDResultHasType() == 0;
      v3 = 8;
LABEL_7:
      if (v2)
        result = 0;
      else
        result = v3;
      break;
  }
  return result;
}

uint64_t SGDataDetectorsGetMatchType()
{
  int v0;
  uint64_t result;

  v0 = DDResultGetCategory() - 1;
  result = 0;
  switch(v0)
  {
    case 0:
      if (DDResultHasType())
        return 2;
      else
        return 5;
    case 1:
      return result;
    case 2:
      return 1;
    case 3:
      goto LABEL_8;
    case 4:
      if ((DDResultHasType() & 1) != 0)
      {
        result = 4;
      }
      else if ((DDResultHasType() & 1) != 0)
      {
        result = 6;
      }
      else
      {
LABEL_12:
        if ((DDResultHasType() & 1) != 0)
        {
          result = 7;
        }
        else if (DDResultHasType())
        {
          result = 8;
        }
        else
        {
          result = 9;
        }
      }
      break;
    default:
      if ((DDResultHasType() & 1) == 0)
        goto LABEL_12;
LABEL_8:
      result = 3;
      break;
  }
  return result;
}

const __CFString *SGNSTextCheckingTypeToString(uint64_t a1)
{
  const __CFString *v1;
  const __CFString *v2;
  const __CFString *v3;
  const __CFString *v4;
  const __CFString *v5;

  v1 = CFSTR("NSTextCheckingTypeTransitInformation");
  v2 = CFSTR("NSTextCheckingTypePhoneNumber");
  v3 = CFSTR("NSTextCheckingTypeLink");
  if (a1 != 32)
    v3 = 0;
  if (a1 != 2048)
    v2 = v3;
  if (a1 != 4096)
    v1 = v2;
  v4 = CFSTR("NSTextCheckingTypeDate");
  v5 = CFSTR("NSTextCheckingTypeAddress");
  if (a1 != 16)
    v5 = 0;
  if (a1 != 8)
    v4 = v5;
  if (a1 <= 31)
    return v4;
  else
    return v1;
}

const __CFString *SGDataDetectorMatchTypeToString(unsigned int a1)
{
  if (a1 > 8)
    return CFSTR("SGDDMatchOther");
  else
    return off_1E7DAE7C8[a1];
}

id SGDataDetectorsScanForPhone(void *a1)
{
  id v1;
  unint64_t v2;
  uint64_t v3;
  id v4;
  _QWORD v6[4];
  id v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  void (*v15)(uint64_t);
  id v16;

  v1 = a1;
  if (objc_msgSend(v1, "length"))
  {
    v2 = objc_msgSend(v1, "length");
    if (v2 >= 0x64)
      v3 = 100;
    else
      v3 = v2;
    v11 = 0;
    v12 = &v11;
    v13 = 0x3032000000;
    v14 = __Block_byref_object_copy__18521;
    v15 = __Block_byref_object_dispose__18522;
    v16 = 0;
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = __SGDataDetectorsScanForPhone_block_invoke;
    v6[3] = &unk_1E7DAE788;
    v9 = 0;
    v10 = v3;
    v7 = v1;
    v8 = &v11;
    SGDataDetectorsRunWithSharedScanner(v6);
    v4 = (id)v12[5];

    _Block_object_dispose(&v11, 8);
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

void sub_1C374321C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__18521(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__18522(uint64_t a1)
{

}

void sub_1C3744144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  SGRecordMeasurementState(&a37);
  _Unwind_Resume(a1);
}

void sub_1C37446F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  _Block_object_dispose(&a19, 8);
  SGRecordMeasurementState(&a40);
  _Unwind_Resume(a1);
}

void sub_1C37448F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C3745AA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C3745E44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C3746A64(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1C37470BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;

  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v31 - 160), 8);
  _Block_object_dispose((const void *)(v31 - 128), 8);
  _Block_object_dispose((const void *)(v31 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1C3747FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

void sub_1C3748CF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  uint64_t a67;

  _Block_object_dispose(&a45, 8);
  _Block_object_dispose(&a51, 8);
  _Block_object_dispose(&a57, 8);
  _Block_object_dispose(&a63, 8);
  SGRecordMeasurementState(&a67);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__18696(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__18697(uint64_t a1)
{

}

void sub_1C37494D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_1C37497C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1C374B6CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1C374BB40(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1C374C1C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void SGEnumerateReplyAttributionCandidates(void *a1, void *a2)
{
  __CFString *v3;
  id v4;
  uint64_t v5;
  const UniChar *CharactersPtr;
  const char *CStringPtr;
  int64_t v8;
  int v9;
  int64_t v10;
  int64_t v11;
  int v12;
  int64_t v13;
  int64_t v14;
  int CharacterFromInlineBuffer;
  int64_t v17;
  UniChar v18;
  int64_t v19;
  int64_t v20;
  BOOL v21;
  int v22;
  int64_t v23;
  UniChar *v24;
  int64_t v25;
  UniChar v26;
  int64_t v27;
  UniChar *v28;
  int64_t v29;
  UniChar v30;
  int64_t v31;
  int64_t v32;
  int64_t v33;
  int64_t v34;
  int64_t v35;
  UniChar v36;
  int64_t v37;
  int64_t v38;
  int64_t v39;
  int64_t v41;
  int v42;
  int64_t v43;
  int64_t v45;
  BOOL v46;
  int64_t v47;
  int64_t v48;
  int64_t v49;
  int64_t v51;
  int64_t v52;
  int64_t v53;
  int64_t v54;
  UniChar *v55;
  int64_t v56;
  UniChar v57;
  int64_t v58;
  UniChar *v59;
  int64_t v60;
  UniChar v61;
  int64_t v62;
  int64_t v63;
  int64_t v64;
  int64_t v65;
  __CFString *v66;
  UniChar buffer[8];
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  CFStringRef theString;
  UniChar *v76;
  const char *v77;
  uint64_t v78;
  int64_t v79;
  int64_t v80;
  int64_t v81;
  CFRange v82;
  CFRange v83;
  CFRange v84;
  CFRange v85;
  CFRange v86;
  CFRange v87;
  CFRange v88;
  CFRange v89;

  v3 = a1;
  v4 = a2;
  if (!callBlockOnFirstlineCandidate(v3, v4))
    goto LABEL_176;
  v5 = -[__CFString length](v3, "length");
  v73 = 0u;
  v74 = 0u;
  v71 = 0u;
  v72 = 0u;
  v69 = 0u;
  v70 = 0u;
  *(_OWORD *)buffer = 0u;
  v68 = 0u;
  theString = v3;
  v78 = 0;
  v79 = v5;
  CharactersPtr = CFStringGetCharactersPtr(v3);
  CStringPtr = 0;
  v76 = (UniChar *)CharactersPtr;
  if (!CharactersPtr)
    CStringPtr = CFStringGetCStringPtr(v3, 0x600u);
  v66 = v3;
  v8 = 0;
  v9 = 0;
  v80 = 0;
  v81 = 0;
  v77 = CStringPtr;
  if (!v5)
  {
    v12 = 7;
    v11 = 0;
    goto LABEL_174;
  }
  v10 = v5;
  v11 = 0;
  while (v10 <= v11)
  {
    do
    {
LABEL_74:
      v14 = v11 + 1;
      v13 = v11;
LABEL_60:
      v11 = v13 + 1;
      v12 = 7;
      if (v13 + 1 == v5)
      {
        v11 = 0;
        v8 = v14;
        goto LABEL_174;
      }
    }
    while (v11 < 0);
    v10 = v79;
  }
  v24 = v76;
  if (v76)
  {
    v25 = v78 + v11;
LABEL_67:
    v26 = v24[v25];
    goto LABEL_70;
  }
  if (!v77)
  {
    if (v81 <= v11 || (v31 = v80, v80 > v11))
    {
      v32 = v11 - 4;
      if ((unint64_t)v11 < 4)
        v32 = 0;
      if (v32 + 64 < v10)
        v10 = v32 + 64;
      v80 = v32;
      v81 = v10;
      v83.location = v78 + v32;
      v83.length = v10 - v32;
      CFStringGetCharacters(theString, v83, buffer);
      v31 = v80;
    }
    v25 = v11 - v31;
    v24 = buffer;
    goto LABEL_67;
  }
  v26 = v77[v78 + v11];
LABEL_70:
  if (v26 != 10)
    goto LABEL_74;
  v8 = v11 + 1;
  if (v11 + 1 == v5)
  {
    v12 = 8;
    v9 = 2;
LABEL_73:
    v8 = v5;
    goto LABEL_174;
  }
  v27 = v79;
  if (v79 > v8)
  {
    v28 = v76;
    if (v76)
    {
      v29 = v78 + v8;
      goto LABEL_78;
    }
    if (v77)
    {
      v30 = v77[v78 + v8];
    }
    else
    {
      if (v81 <= v8 || (v52 = v80, v80 > v8))
      {
        v53 = v11 - 3;
        if ((unint64_t)v8 < 4)
          v53 = 0;
        if (v53 + 64 < v79)
          v27 = v53 + 64;
        v80 = v53;
        v81 = v27;
        v87.location = v78 + v53;
        v87.length = v27 - v53;
        CFStringGetCharacters(theString, v87, buffer);
        v52 = v80;
      }
      v29 = v8 - v52;
      v28 = buffer;
LABEL_78:
      v30 = v28[v29];
    }
    if (v30 == 10)
    {
      v9 = 2;
      v14 = v11 + 1;
      goto LABEL_58;
    }
  }
  v33 = v11 + 2;
  if (v11 + 2 == v5)
  {
    v12 = 0;
LABEL_173:
    v9 = 2;
    goto LABEL_174;
  }
  v34 = v11 + 1;
  v9 = 2;
  while (2)
  {
    if (v33 < 0 || (v35 = v79, v79 <= v33))
    {
      v37 = v33;
      goto LABEL_99;
    }
    if (v76)
    {
      v36 = v76[v78 + v33];
    }
    else if (v77)
    {
      v36 = v77[v78 + v33];
    }
    else
    {
      if (v81 <= v33 || (v38 = v80, v80 > v33))
      {
        v39 = v33 - 4;
        if ((unint64_t)v33 < 4)
          v39 = 0;
        if (v39 + 64 < v79)
          v35 = v39 + 64;
        v80 = v39;
        v81 = v35;
        v84.location = v78 + v39;
        v84.length = v35 - v39;
        CFStringGetCharacters(theString, v84, buffer);
        v38 = v80;
      }
      v36 = buffer[v33 - v38];
    }
    if (v36 != 58 && v36 != 65306)
    {
      v37 = v33;
      if (v36 == 10)
      {
        v51 = v34 + 2;
        if (v34 + 2 == v5)
        {
          v12 = 1;
          goto LABEL_173;
        }
        v9 = 2;
        if (v51 < 0)
          goto LABEL_201;
        v58 = v79;
        if (v79 <= v51)
          goto LABEL_201;
        v59 = v76;
        if (v76)
        {
          v60 = v78 + v51;
          goto LABEL_196;
        }
        if (v77)
        {
          v61 = v77[v78 + v51];
        }
        else
        {
          if (v81 <= v51 || (v64 = v80, v80 > v51))
          {
            v65 = v34 - 2;
            if ((unint64_t)v51 < 4)
              v65 = 0;
            if (v65 + 64 < v79)
              v58 = v65 + 64;
            v80 = v65;
            v81 = v58;
            v89.location = v78 + v65;
            v89.length = v58 - v65;
            CFStringGetCharacters(theString, v89, buffer);
            v64 = v80;
          }
          v60 = v51 - v64;
          v59 = buffer;
LABEL_196:
          v61 = v59[v60];
        }
        if (v61 == 10)
          goto LABEL_9;
        goto LABEL_201;
      }
LABEL_99:
      v33 = v37 + 1;
      v34 = v37;
      if (v37 + 1 == v5)
      {
        v12 = 0;
        goto LABEL_174;
      }
      continue;
    }
    break;
  }
  v37 = v33 + 1;
  while (2)
  {
    if (v37 == v5)
    {
      v12 = 5;
      goto LABEL_173;
    }
    v41 = v79;
    if (v79 <= v37)
      goto LABEL_99;
    if (v76)
    {
      LOWORD(v42) = v76[v78 + v37];
    }
    else if (v77)
    {
      LOWORD(v42) = v77[v78 + v37];
    }
    else
    {
      v43 = v80;
      if (v81 <= v37 || v80 > v37)
      {
        v45 = v37 - 4;
        if ((unint64_t)v37 < 4)
          v45 = 0;
        if (v45 + 64 < v79)
          v41 = v45 + 64;
        v80 = v45;
        v81 = v41;
        v85.location = v78 + v45;
        v85.length = v41 - v45;
        CFStringGetCharacters(theString, v85, buffer);
        v43 = v80;
      }
      LOWORD(v42) = buffer[v37 - v43];
    }
    v42 = (unsigned __int16)v42;
    if ((unsigned __int16)v42 > 0x39u)
    {
      v46 = (unsigned __int16)v42 == 58 || (unsigned __int16)v42 == 65306;
      if (!v46 && (unsigned __int16)v42 != 160)
        goto LABEL_99;
      goto LABEL_166;
    }
    if ((unsigned __int16)v42 <= 0xCu)
    {
      if ((unsigned __int16)v42 != 9)
        goto LABEL_169;
      goto LABEL_166;
    }
    if ((unsigned __int16)v42 != 13)
    {
      if ((unsigned __int16)v42 != 32)
        goto LABEL_99;
LABEL_166:
      v33 = v37++;
      continue;
    }
    break;
  }
  v37 = v33 + 2;
  if (v33 + 2 == v5)
  {
    v12 = 6;
    goto LABEL_173;
  }
  if (v37 < 0)
    goto LABEL_99;
  v47 = v79;
  if (v79 <= v37)
    goto LABEL_99;
  if (v76)
  {
    LOWORD(v42) = v76[v78 + v37];
  }
  else if (v77)
  {
    LOWORD(v42) = v77[v78 + v37];
  }
  else
  {
    if (v81 <= v37 || (v48 = v80, v80 > v37))
    {
      v49 = v33 - 2;
      if ((unint64_t)v37 < 4)
        v49 = 0;
      if (v49 + 64 < v79)
        v47 = v49 + 64;
      v80 = v49;
      v81 = v47;
      v86.location = v78 + v49;
      v86.length = v47 - v49;
      CFStringGetCharacters(theString, v86, buffer);
      v48 = v80;
    }
    LOWORD(v42) = buffer[v37 - v48];
  }
  v42 = (unsigned __int16)v42;
  if ((unsigned __int16)v42 == 58 || (unsigned __int16)v42 == 65306)
    goto LABEL_166;
LABEL_169:
  if (v42 != 10)
    goto LABEL_99;
  v51 = v37 + 1;
  if (v37 + 1 == v5)
  {
    v12 = 9;
    v9 = 1;
    goto LABEL_73;
  }
  v54 = v79;
  v9 = 1;
  if (v79 > v51)
  {
    v55 = v76;
    if (v76)
    {
      v56 = v78 + v51;
      goto LABEL_189;
    }
    if (v77)
    {
      v57 = v77[v78 + v51];
    }
    else
    {
      if (v81 <= v51 || (v62 = v80, v80 > v51))
      {
        v63 = v37 - 3;
        if ((unint64_t)v51 < 4)
          v63 = 0;
        if (v63 + 64 < v79)
          v54 = v63 + 64;
        v80 = v63;
        v81 = v54;
        v88.location = v78 + v63;
        v88.length = v54 - v63;
        CFStringGetCharacters(theString, v88, buffer);
        v62 = v80;
      }
      v56 = v51 - v62;
      v55 = buffer;
LABEL_189:
      v57 = v55[v56];
    }
    if (v57 == 10)
    {
LABEL_59:
      v14 = v51 - 1;
      v13 = v51 - 2;
      if (!(*((unsigned int (**)(id, int64_t, int64_t))v4 + 2))(v4, v11, v14 - v11))
        goto LABEL_175;
      goto LABEL_60;
    }
  }
  v8 = v37 + 1;
LABEL_201:
  v23 = v51 + 1;
  if (v23 == v5)
  {
    v12 = 2;
    goto LABEL_174;
  }
LABEL_10:
  CharacterFromInlineBuffer = CFStringGetCharacterFromInlineBuffer(buffer, v23);
  if (CharacterFromInlineBuffer == 58 || CharacterFromInlineBuffer == 65306)
  {
    v14 = v23 + 1;
    if (v23 + 1 == v5)
    {
      v12 = 3;
      goto LABEL_174;
    }
    while (1)
    {
      if (v14 < 0)
        goto LABEL_49;
      v17 = v79;
      if (v79 <= v14)
        goto LABEL_49;
      if (v76)
      {
        v18 = v76[v78 + v14];
      }
      else if (v77)
      {
        v18 = v77[v78 + v14];
      }
      else
      {
        if (v81 <= v14 || (v19 = v80, v80 > v14))
        {
          v20 = v14 - 4;
          if ((unint64_t)v14 < 4)
            v20 = 0;
          if (v20 + 64 < v79)
            v17 = v20 + 64;
          v80 = v20;
          v81 = v17;
          v82.location = v78 + v20;
          v82.length = v17 - v20;
          CFStringGetCharacters(theString, v82, buffer);
          v19 = v80;
        }
        v18 = buffer[v14 - v19];
      }
      if (v18 > 0x39u)
      {
        v21 = v18 == 58 || v18 == 65306;
        if (!v21 && v18 != 160)
          goto LABEL_49;
      }
      else if (v18 <= 0xCu)
      {
        if (v18 != 9)
        {
          if (v18 == 10)
            goto LABEL_54;
          goto LABEL_49;
        }
      }
      else if (v18 == 13)
      {
        v14 = v23 + 2;
        if (v23 + 2 == v5)
        {
          v12 = 4;
          goto LABEL_174;
        }
        v22 = CFStringGetCharacterFromInlineBuffer(buffer, v23 + 2);
        if (v22 != 58 && v22 != 65306)
        {
          if (v22 == 10)
          {
LABEL_54:
            if (((*((uint64_t (**)(id, int64_t, int64_t))v4 + 2))(v4, v11, v14 - v11) & 1) == 0)
              goto LABEL_175;
LABEL_58:
            v13 = v14 - 1;
            goto LABEL_60;
          }
LABEL_49:
          v23 = v14 + 1;
          v12 = 2;
          if (v14 + 1 == v5)
          {
LABEL_174:
            v14 = v5;
            v51 = v5;
            switch(v12)
            {
              case 0:
              case 1:
              case 5:
              case 6:
                goto LABEL_9;
              case 2:
              case 3:
              case 4:
                goto LABEL_7;
              case 8:
                goto LABEL_58;
              case 9:
                goto LABEL_59;
              default:
                goto LABEL_175;
            }
            goto LABEL_175;
          }
          goto LABEL_10;
        }
      }
      else if (v18 != 32)
      {
        goto LABEL_49;
      }
      v23 = v14++;
      v12 = 3;
      if (v14 == v5)
        goto LABEL_174;
    }
  }
  v14 = v23;
  if (CharacterFromInlineBuffer != 10)
    goto LABEL_49;
LABEL_7:
  if (v9 != 1
    || (--v8, (*((unsigned int (**)(id, int64_t, int64_t))v4 + 2))(v4, v11, v8 - v11)))
  {
LABEL_9:
    v13 = v8 - 1;
    v14 = v8;
    goto LABEL_60;
  }
LABEL_175:
  v3 = v66;
LABEL_176:

}

uint64_t callBlockOnFirstlineCandidate(void *a1, void *a2)
{
  id v3;
  uint64_t (**v4)(id, _QWORD, int64_t);
  __CFString *v5;
  void *v6;
  CFIndex Length;
  const UniChar *CharactersPtr;
  const char *CStringPtr;
  uint64_t v10;
  int64_t v11;
  int64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  CFIndex v16;
  UniChar v17;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  CFIndex v22;
  uint64_t v24;
  _OWORD v26[8];
  CFStringRef theString;
  const UniChar *v28;
  const char *v29;
  uint64_t v30;
  CFIndex v31;
  int64_t v32;
  int64_t v33;
  CFRange v34;

  v3 = a1;
  v4 = a2;
  v5 = (__CFString *)v3;
  objc_opt_self();
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v6)
    goto LABEL_32;
  memset(v26, 0, sizeof(v26));
  Length = CFStringGetLength(v5);
  theString = v5;
  v30 = 0;
  v31 = Length;
  CharactersPtr = CFStringGetCharactersPtr(v5);
  CStringPtr = 0;
  v28 = CharactersPtr;
  if (!CharactersPtr)
    CStringPtr = CFStringGetCStringPtr(v5, 0x600u);
  v32 = 0;
  v33 = 0;
  v29 = CStringPtr;
  if (Length < 1)
    goto LABEL_32;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 64;
  while (1)
  {
    if ((unint64_t)v12 >= 4)
      v15 = 4;
    else
      v15 = v12;
    v16 = v31;
    if (v31 <= v12)
      goto LABEL_31;
    if (v28)
    {
      v17 = v28[v12 + v30];
    }
    else if (v29)
    {
      v17 = v29[v30 + v12];
    }
    else
    {
      if (v33 <= v12 || v11 > v12)
      {
        v19 = v15 + v10;
        v20 = v14 - v15;
        v21 = v12 - v15;
        v22 = v21 + 64;
        if (v21 + 64 >= v31)
          v22 = v31;
        v32 = v21;
        v33 = v22;
        if (v31 >= v20)
          v16 = v20;
        v34.length = v16 + v19;
        v34.location = v21 + v30;
        CFStringGetCharacters(theString, v34, (UniChar *)v26);
        v11 = v32;
      }
      v17 = *((_WORD *)v26 + v12 - v11);
    }
    if (v17 != 58 && v17 != 65306)
      break;
    v13 = 1;
LABEL_31:
    ++v12;
    --v10;
    ++v14;
    if (Length == v12)
      goto LABEL_32;
  }
  if (v17 != 10)
    goto LABEL_31;
  if (v13)
  {
    v24 = v4[2](v4, 0, v12);
    goto LABEL_33;
  }
LABEL_32:
  v24 = 1;
LABEL_33:

  return v24;
}

uint64_t CFStringGetCharacterFromInlineBuffer(UniChar *buffer, int64_t a2)
{
  int64_t v4;
  uint64_t v5;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  CFRange v11;

  if (a2 < 0)
  {
    return 0;
  }
  else
  {
    v4 = *((_QWORD *)buffer + 20);
    if (v4 <= a2)
    {
      return 0;
    }
    else
    {
      v5 = *((_QWORD *)buffer + 17);
      if (v5)
      {
        return *(unsigned __int16 *)(v5 + 2 * (*((_QWORD *)buffer + 19) + a2));
      }
      else
      {
        v8 = *((_QWORD *)buffer + 18);
        if (v8)
        {
          return (unsigned __int16)*(char *)(v8 + *((_QWORD *)buffer + 19) + a2);
        }
        else
        {
          if (*((_QWORD *)buffer + 22) <= a2 || (v9 = *((_QWORD *)buffer + 21), v9 > a2))
          {
            v10 = a2 - 4;
            if ((unint64_t)a2 < 4)
              v10 = 0;
            if (v10 + 64 < v4)
              v4 = v10 + 64;
            *((_QWORD *)buffer + 21) = v10;
            *((_QWORD *)buffer + 22) = v4;
            v11.location = *((_QWORD *)buffer + 19) + v10;
            v11.length = v4 - v10;
            CFStringGetCharacters(*((CFStringRef *)buffer + 16), v11, buffer);
            v9 = *((_QWORD *)buffer + 21);
          }
          return buffer[a2 - v9];
        }
      }
    }
  }
}

void SGEnumerateBodyHeaderCandidates(void *a1, void *a2)
{
  __CFString *v3;
  uint64_t (**v4)(_QWORD, int64_t, uint64_t);
  uint64_t v5;
  const UniChar *CharactersPtr;
  const char *CStringPtr;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  unsigned int v11;
  UniChar *v12;
  int64_t v13;
  UniChar v14;
  int64_t v15;
  UniChar *v16;
  int64_t v17;
  UniChar v18;
  int64_t v19;
  int64_t v20;
  int64_t v21;
  UniChar *v22;
  int64_t v23;
  UniChar v24;
  int64_t v25;
  int64_t v26;
  UniChar *v27;
  unint64_t v29;
  int64_t v30;
  int64_t v31;
  int64_t v32;
  uint64_t v33;
  int64_t v34;
  UniChar v35;
  int64_t v36;
  uint64_t v38;
  int64_t v39;
  int64_t v40;
  int64_t v41;
  int64_t v42;
  UniChar *v43;
  int64_t v45;
  int64_t v46;
  int64_t v47;
  unint64_t v48;
  int64_t v49;
  UniChar *v50;
  int64_t v51;
  UniChar v52;
  int64_t v53;
  int64_t v54;
  UniChar *v55;
  uint64_t v56;
  int64_t v57;
  int64_t v58;
  int64_t v59;
  UniChar v60;
  int64_t v61;
  uint64_t v62;
  int64_t v63;
  int64_t v64;
  UniChar *v65;
  int64_t v66;
  int64_t v67;
  char v68;
  int64_t v69;
  int64_t v70;
  __CFString *v71;
  uint64_t (**v72)(_QWORD, int64_t, uint64_t);
  UniChar buffer[8];
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  CFStringRef theString;
  UniChar *v82;
  const char *v83;
  uint64_t v84;
  int64_t v85;
  int64_t v86;
  int64_t v87;
  CFRange v88;
  CFRange v89;
  CFRange v90;
  CFRange v91;
  CFRange v92;
  CFRange v93;

  v3 = a1;
  v4 = a2;
  if (callBlockOnFirstlineCandidate(v3, v4))
  {
    v5 = -[__CFString length](v3, "length");
    v79 = 0u;
    v80 = 0u;
    v77 = 0u;
    v78 = 0u;
    v75 = 0u;
    v76 = 0u;
    *(_OWORD *)buffer = 0u;
    v74 = 0u;
    theString = v3;
    v84 = 0;
    v85 = v5;
    CharactersPtr = CFStringGetCharactersPtr(v3);
    CStringPtr = 0;
    v82 = (UniChar *)CharactersPtr;
    if (!CharactersPtr)
      CStringPtr = CFStringGetCStringPtr(v3, 0x600u);
    v8 = 0;
    v86 = 0;
    v87 = 0;
    v83 = CStringPtr;
    v71 = v3;
    v72 = v4;
    if (v5)
    {
      v9 = v5;
      v10 = 0;
      goto LABEL_15;
    }
    v11 = 4;
LABEL_9:
    while (2)
    {
      while (2)
      {
        if (v11 >= 4)
        {
          v8 = v5;
          if (v11 != 5)
          {
LABEL_11:
            v3 = v71;
            v4 = v72;
            goto LABEL_12;
          }
        }
LABEL_7:
        v10 = v8 - 1;
LABEL_8:
        ++v10;
        v11 = 4;
        if (v10 == v5)
          continue;
        break;
      }
      if (v10 < 0)
        goto LABEL_24;
      v9 = v85;
LABEL_15:
      if (v9 <= v10)
        goto LABEL_24;
      v12 = v82;
      if (v82)
      {
        v13 = v84 + v10;
      }
      else
      {
        if (v83)
        {
          v14 = v83[v84 + v10];
LABEL_21:
          if (v14 == 10)
          {
            v8 = v10 + 1;
            if (v10 + 1 == v5)
            {
              v11 = 5;
              v8 = v5;
              continue;
            }
            v15 = v85;
            if (v85 <= v8)
              goto LABEL_40;
            v16 = v82;
            if (v82)
            {
              v17 = v84 + v8;
            }
            else
            {
              if (v83)
              {
                v18 = v83[v84 + v8];
LABEL_39:
                if (v18 == 10)
                  goto LABEL_7;
LABEL_40:
                v21 = v10 + 2;
                if (v10 + 2 == v5)
                {
LABEL_41:
                  v11 = 0;
                  continue;
                }
                v22 = &buffer[1];
                while (1)
                {
                  if ((v21 & 0x8000000000000000) == 0)
                  {
                    v23 = v85;
                    if (v85 > v21)
                    {
                      if (v82)
                      {
                        v24 = v82[v84 + v21];
                      }
                      else if (v83)
                      {
                        v24 = v83[v84 + v21];
                      }
                      else
                      {
                        if (v87 <= v21 || (v25 = v86, v86 > v21))
                        {
                          v26 = v21 - 4;
                          if ((unint64_t)v21 < 4)
                            v26 = 0;
                          if (v26 + 64 < v85)
                            v23 = v26 + 64;
                          v86 = v26;
                          v87 = v23;
                          v89.location = v84 + v26;
                          v89.length = v23 - v26;
                          v27 = v22;
                          CFStringGetCharacters(theString, v89, buffer);
                          v22 = v27;
                          v25 = v86;
                        }
                        v24 = buffer[v21 - v25];
                      }
                      if (v24 == 58 || v24 == 65306)
                      {
                        v29 = v21 + 1;
                        if (v21 + 1 == v5)
                        {
                          v11 = 1;
                          goto LABEL_9;
                        }
                        v30 = ~v21;
                        v31 = v21 + 65;
                        while (1)
                        {
                          v32 = v21 + 1;
                          if (v29 >= 4)
                            v33 = 4;
                          else
                            v33 = v29;
                          v34 = v85;
                          if (v85 <= v32)
                            goto LABEL_93;
                          if (v82)
                          {
                            v35 = v82[v21 + 1 + v84];
                          }
                          else if (v83)
                          {
                            v35 = v83[v84 + 1 + v21];
                          }
                          else
                          {
                            v36 = v86;
                            if (v87 <= v32 || v86 > v32)
                            {
                              v38 = v33 + v30;
                              v39 = v31 - v33;
                              v40 = v21 - v33;
                              v41 = v40 + 1;
                              v42 = v40 + 65;
                              if (v42 >= v85)
                                v42 = v85;
                              v86 = v41;
                              v87 = v42;
                              if (v85 >= v39)
                                v34 = v39;
                              v90.length = v34 + v38;
                              v43 = v22;
                              v90.location = v41 + v84;
                              CFStringGetCharacters(theString, v90, buffer);
                              v22 = v43;
                              v36 = v86;
                            }
                            v35 = v22[v21 - v36];
                          }
                          if (v35 <= 0x39u)
                            break;
                          if (v35 != 58 && v35 != 65306)
                          {
                            if (v35 == 160)
                              goto LABEL_98;
LABEL_93:
                            ++v21;
                            goto LABEL_95;
                          }
                          ++v29;
                          ++v21;
                          --v30;
                          ++v31;
                          v11 = 1;
                          if (v5 - 1 == v21)
                            goto LABEL_9;
                        }
                        if (v35 != 9)
                        {
                          if (v35 == 10)
                            goto LABEL_7;
                          if (v35 != 32)
                            goto LABEL_93;
                        }
LABEL_98:
                        v45 = v21 + 2;
                        if (v21 + 2 == v5)
                        {
                          v11 = 2;
                          goto LABEL_9;
                        }
                        v46 = v21 + 67;
                        v47 = -3 - v21;
                        v48 = v21 + 3;
                        if ((v45 & 0x8000000000000000) == 0)
                        {
                          v49 = v85;
                          if (v85 > v45)
                          {
                            v50 = v82;
                            if (v82)
                            {
                              v51 = v84 + v45;
                              goto LABEL_104;
                            }
                            if (v83)
                            {
                              v52 = v83[v84 + v45];
                            }
                            else
                            {
                              if (v87 <= v45 || (v69 = v86, v86 > v45))
                              {
                                v70 = v21 - 2;
                                if ((unint64_t)v45 < 4)
                                  v70 = 0;
                                if (v70 + 64 < v85)
                                  v49 = v70 + 64;
                                v86 = v70;
                                v87 = v49;
                                v93.location = v84 + v70;
                                v93.length = v49 - v70;
                                CFStringGetCharacters(theString, v93, buffer);
                                v69 = v86;
                              }
                              v51 = v45 - v69;
                              v50 = buffer;
LABEL_104:
                              v52 = v50[v51];
                            }
                            if (v52 == 10)
                              goto LABEL_7;
                          }
                        }
                        v55 = &buffer[3];
                        do
                        {
                          if (v48 >= 4)
                            v56 = 4;
                          else
                            v56 = v48;
                          if (v5 - 3 == v21)
                          {
                            v11 = 3;
                            goto LABEL_9;
                          }
                          v57 = v21;
                          v58 = v21 + 3;
                          if (v21 + 3 < 0 || (v59 = v85, v85 <= v58))
                          {
                            v60 = 0;
                          }
                          else if (v82)
                          {
                            v60 = v82[v21 + 3 + v84];
                          }
                          else if (v83)
                          {
                            v60 = v83[v84 + 3 + v21];
                          }
                          else
                          {
                            if (v87 <= v58 || (v61 = v86, v86 > v58))
                            {
                              v62 = v56 + v47;
                              v63 = v46 - v56;
                              v64 = v21 - v56;
                              v65 = v55;
                              v66 = v64 + 3;
                              v67 = v64 + 67;
                              if (v67 >= v85)
                                v67 = v85;
                              v86 = v66;
                              v87 = v67;
                              if (v85 >= v63)
                                v59 = v63;
                              v92.length = v59 + v62;
                              v92.location = v66 + v84;
                              CFStringGetCharacters(theString, v92, buffer);
                              v55 = v65;
                              v61 = v86;
                            }
                            v60 = v55[v57 - v61];
                          }
                          v21 = v57 + 1;
                          ++v48;
                          --v47;
                          ++v46;
                        }
                        while (v60 != 10);
                        v8 = v57 + 3;
                        v68 = v72[2](v72, v10, v57 + 3 - v10);
                        if ((v68 & 1) == 0)
                          goto LABEL_11;
                        v10 = v57 + 2;
                        goto LABEL_8;
                      }
                      if (v24 == 10)
                        goto LABEL_7;
                    }
                  }
LABEL_95:
                  if (++v21 == v5)
                    goto LABEL_41;
                }
              }
              if (v87 <= v8 || (v53 = v86, v86 > v8))
              {
                v54 = v10 - 3;
                if ((unint64_t)v8 < 4)
                  v54 = 0;
                if (v54 + 64 < v85)
                  v15 = v54 + 64;
                v86 = v54;
                v87 = v15;
                v91.location = v84 + v54;
                v91.length = v15 - v54;
                CFStringGetCharacters(theString, v91, buffer);
                v53 = v86;
              }
              v17 = v8 - v53;
              v16 = buffer;
            }
            v18 = v16[v17];
            goto LABEL_39;
          }
LABEL_24:
          v8 = v10 + 1;
          goto LABEL_8;
        }
        if (v87 <= v10 || (v19 = v86, v86 > v10))
        {
          v20 = v10 - 4;
          if ((unint64_t)v10 < 4)
            v20 = 0;
          if (v20 + 64 < v9)
            v9 = v20 + 64;
          v86 = v20;
          v87 = v9;
          v88.location = v84 + v20;
          v88.length = v9 - v20;
          CFStringGetCharacters(theString, v88, buffer);
          v19 = v86;
        }
        v13 = v10 - v19;
        v12 = buffer;
      }
      break;
    }
    v14 = v12[v13];
    goto LABEL_21;
  }
LABEL_12:

}

void charactersSAX(void *a1, uint64_t a2, int a3)
{
  objc_class *v5;
  id v6;
  id v7;

  v5 = (objc_class *)MEMORY[0x1E0CB3940];
  v6 = a1;
  v7 = (id)objc_msgSend([v5 alloc], "initWithBytes:length:encoding:", a2, a3, 4);
  objc_msgSend(v6, "appendString:", v7);

}

void sub_1C374F7F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C3752D60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose(&STACK[0x2A0], 8);
  _Unwind_Resume(a1);
}

id patterns_19149()
{
  if (patterns_onceToken_19190 != -1)
    dispatch_once(&patterns_onceToken_19190, &__block_literal_global_175_19191);
  return (id)patterns_patterns_19192;
}

id nontokenCharset()
{
  if (nontokenCharset_onceToken != -1)
    dispatch_once(&nontokenCharset_onceToken, &__block_literal_global_202);
  return (id)nontokenCharset_nontoken;
}

void __nontokenCharset_block_invoke()
{
  void *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  id v4;

  objc_msgSend(MEMORY[0x1E0CB3500], "whitespaceAndNewlineCharacterSet");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (id)objc_msgSend(v0, "mutableCopy");

  punctuationCharset();
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "formUnionWithCharacterSet:", v1);

  v2 = objc_msgSend(v4, "copy");
  v3 = (void *)nontokenCharset_nontoken;
  nontokenCharset_nontoken = v2;

}

id punctuationCharset()
{
  if (punctuationCharset__pasOnceToken3 != -1)
    dispatch_once(&punctuationCharset__pasOnceToken3, &__block_literal_global_199_19185);
  return (id)punctuationCharset__pasExprOnceResult;
}

void __punctuationCharset_block_invoke()
{
  void *v0;
  uint64_t v1;
  void *v2;

  v0 = (void *)MEMORY[0x1C3BD4F6C]();
  objc_msgSend(MEMORY[0x1E0CB3500], "characterSetWithCharactersInString:", CFSTR(".,?"));
  v1 = objc_claimAutoreleasedReturnValue();
  v2 = (void *)punctuationCharset__pasExprOnceResult;
  punctuationCharset__pasExprOnceResult = v1;

  objc_autoreleasePoolPop(v0);
}

void __patterns_block_invoke_19193()
{
  uint64_t v0;
  void *v1;

  +[SGPatterns patternsForClass:](SGPatterns, "patternsForClass:", objc_opt_class());
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)patterns_patterns_19192;
  patterns_patterns_19192 = v0;

}

void tokenize(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  _QWORD v14[4];
  id v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD v18[3];
  char v19;

  v9 = a1;
  v10 = a5;
  if (a3 > objc_msgSend(v9, "length") || a3 + a4 > objc_msgSend(v9, "length"))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void tokenize(NSString *__strong, TokenizationState *, NSRange, NSString *__strong)");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "handleFailureInFunction:file:lineNumber:description:", v13, CFSTR("SGSignatureDissector.m"), 239, CFSTR("tokenize range (%lu, %lu) beyond text length %lu"), a3, a4, objc_msgSend(v9, "length"));

  }
  if (tokenize_onceToken != -1)
    dispatch_once(&tokenize_onceToken, &__block_literal_global_183);
  pthread_mutex_lock(&tokenize_updateLock);
  v18[0] = 0;
  v18[1] = v18;
  v18[2] = 0x2020000000;
  v19 = 0;
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = __tokenize_block_invoke_3;
  v14[3] = &unk_1E7DAEF68;
  v16 = v18;
  v11 = v10;
  v15 = v11;
  v17 = a2;
  +[SGTokenizer enumerateTokensInString:withRange:block:](SGTokenizer, "enumerateTokensInString:withRange:block:", v9, a3, a4, v14);
  pthread_mutex_unlock(&tokenize_updateLock);

  _Block_object_dispose(v18, 8);
}

void sub_1C375363C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void **emitToken(void **result, char a2, int a3)
{
  void **v5;
  _BYTE *v6;
  size_t v7;
  void *v8;
  char *v9;
  id v10;

  v5 = result;
  v6 = *result;
  if (*result >= result[1])
  {
    v7 = (size_t)result[1] + ((unint64_t)result[1] & 1) + ((unint64_t)result[1] >> 1);
    result[1] = (void *)v7;
    v8 = reallocf(result[2], v7);
    if (!v8 || (v5[2] = v8, (result = (void **)reallocf(v5[3], 4 * (_QWORD)v5[1])) == 0))
    {
      objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99850], CFSTR("malloc failed"), 0);
      v10 = (id)objc_claimAutoreleasedReturnValue();
      objc_exception_throw(v10);
    }
    v5[3] = result;
    v6 = *v5;
  }
  v6[(_QWORD)v5[2]] = a2;
  v9 = (char *)*v5;
  *((_DWORD *)v5[3] + (_QWORD)*v5) = a3;
  *v5 = v9 + 1;
  return result;
}

void __viterbi_block_invoke()
{
  void *v0;
  id v1;
  id v2;

  atomic_store(0, viterbi_hmmLoaded);
  +[SGAsset asset](SGAsset, "asset");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = (id)objc_msgSend(v0, "registerUpdateHandler:", &__block_literal_global_204_19224);

  +[SGAsset asset](SGAsset, "asset");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  __viterbi_block_invoke_2((uint64_t)v2, v2);

}

void __viterbi_block_invoke_2(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  void *v4;
  void *v5;
  NSObject *v6;
  id v7;
  id v8;
  NSObject *v9;
  void *v10;
  void *v11;
  id v12;
  uint8_t buf[4];
  NSObject *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  v3 = (void *)MEMORY[0x1C3BD4F6C]();
  objc_msgSend(v2, "filesystemPathForAssetDataRelativePath:", CFSTR("hmm.dat"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    v12 = 0;
    objc_msgSend(MEMORY[0x1E0C99D50], "dataWithContentsOfFile:options:error:", v4, 1, &v12);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v12;
    if (v5)
    {
      v7 = v5;
      if (objc_msgSend(v7, "length") != 336)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void deserializeHmm(NSData *__strong)");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", v11, CFSTR("SGSignatureDissector.m"), 1353, CFSTR("Wrong data length: %li"), objc_msgSend(v7, "length"));

      }
      v8 = objc_retainAutorelease(v7);
      memcpy(hmm, (const void *)objc_msgSend(v8, "bytes"), 0x150uLL);

      atomic_store(1u, viterbi_hmmLoaded);
    }
    else
    {
      sgLogHandle();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v14 = v6;
        _os_log_error_impl(&dword_1C3607000, v9, OS_LOG_TYPE_ERROR, "Could not load HMM data: %@", buf, 0xCu);
      }

    }
  }
  else
  {
    sgLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1C3607000, v6, OS_LOG_TYPE_ERROR, "Could not fetch filesystem path for HMM", buf, 2u);
    }
  }

  objc_autoreleasePoolPop(v3);
}

void __tokenize_block_invoke_3(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v8;
  unsigned int v9;
  int v10;
  void *v11;
  int v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL4 v18;
  const __CFCharacterSet *v19;
  uint64_t v20;
  const __CFString *v21;
  uint64_t v22;
  _QWORD v23[4];
  __CFString *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;

  v8 = a2;
  if (objc_msgSend(v8, "length"))
  {
    v9 = objc_msgSend(v8, "characterAtIndex:", 0);
    if (v9 > 0x7F)
      v10 = __maskrune(v9, 0x8000uLL);
    else
      v10 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v9 + 60) & 0x8000;
    objc_msgSend(v8, "lowercaseString");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_msgSend((id)tokenize_trie, "payloadForString:", v11);
    if (v12)
    {
      v13 = v12 - 1;
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
    }
    else
    {
      if (objc_msgSend(v11, "length") != 1
        || objc_msgSend(v11, "characterAtIndex:", 0) != 45
        && objc_msgSend(v11, "characterAtIndex:", 0) != 95)
      {
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
        if (*(_QWORD *)(a1 + 32))
        {
          v15 = objc_msgSend(v11, "rangeOfString:");
          if (!v15)
          {
            v13 = 10;
            goto LABEL_7;
          }
        }
        else
        {
          v15 = 0x7FFFFFFFFFFFFFFFLL;
        }
        v16 = objc_msgSend(v11, "length");
        v17 = v16 - objc_msgSend(*(id *)(a1 + 32), "length");
        v13 = 10;
        if (v15 != v17)
        {
          v18 = +[SGNames isLowercaseStringCommonNameWord:](SGNames, "isLowercaseStringCommonNameWord:", v8);
          v13 = v18 ? 10 : 8;
          if (!v18 && !v10)
          {
            v13 = 7;
            if (objc_msgSend(v8, "characterAtIndex:", 0) - 48 <= 9)
            {
              v19 = (const __CFCharacterSet *)punctuationCharset();
              v20 = objc_msgSend(v8, "length");
              v23[0] = MEMORY[0x1E0C809B0];
              v23[1] = 3221225472;
              v23[2] = __tokenize_block_invoke_4;
              v23[3] = &unk_1E7DAEF40;
              v21 = (const __CFString *)v8;
              v22 = *(_QWORD *)(a1 + 48);
              v24 = (__CFString *)v21;
              v25 = v22;
              v26 = a4;
              v27 = a5;
              v28 = 7;
              enumerateTokensSeparatedByCharset(v21, v19, 0, v20, v23);

              goto LABEL_8;
            }
          }
        }
        goto LABEL_7;
      }
      v14 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      if (*(_BYTE *)(v14 + 24))
        goto LABEL_8;
      *(_BYTE *)(v14 + 24) = 1;
      v13 = 11;
    }
LABEL_7:
    emitToken(*(void ***)(a1 + 48), v13, a4);
LABEL_8:

  }
}

void **__tokenize_block_invoke_4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __CFString *v5;
  void *v6;
  CFIndex Length;
  const UniChar *CharactersPtr;
  const char *CStringPtr;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  CFIndex v15;
  UniChar v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  CFIndex v21;
  void **v22;
  uint64_t v23;
  char v24;
  _OWORD v26[8];
  CFStringRef theString;
  const UniChar *v28;
  const char *v29;
  uint64_t v30;
  CFIndex v31;
  uint64_t v32;
  uint64_t v33;
  CFRange v34;

  objc_msgSend(*(id *)(a1 + 32), "substringWithRange:", a2, a3);
  v5 = (__CFString *)(id)objc_claimAutoreleasedReturnValue();
  objc_opt_self();
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v6)
    goto LABEL_26;
  memset(v26, 0, sizeof(v26));
  Length = CFStringGetLength(v5);
  theString = v5;
  v30 = 0;
  v31 = Length;
  CharactersPtr = CFStringGetCharactersPtr(v5);
  CStringPtr = 0;
  v28 = CharactersPtr;
  if (!CharactersPtr)
    CStringPtr = CFStringGetCStringPtr(v5, 0x600u);
  v32 = 0;
  v33 = 0;
  v29 = CStringPtr;
  if (Length >= 1)
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 64;
    while (1)
    {
      v14 = (unint64_t)v12 >= 4 ? 4 : v12;
      v15 = v31;
      if (v31 <= v12)
        break;
      if (v28)
      {
        v16 = v28[v12 + v30];
      }
      else if (v29)
      {
        v16 = v29[v30 + v12];
      }
      else
      {
        if (v33 <= v12 || v11 > v12)
        {
          v18 = v14 + v10;
          v19 = v13 - v14;
          v20 = v12 - v14;
          v21 = v20 + 64;
          if (v20 + 64 >= v31)
            v21 = v31;
          v32 = v20;
          v33 = v21;
          if (v31 >= v19)
            v15 = v19;
          v34.length = v15 + v18;
          v34.location = v20 + v30;
          CFStringGetCharacters(theString, v34, (UniChar *)v26);
          v11 = v32;
        }
        v16 = *((_WORD *)v26 + v12 - v11);
      }
      if (v16 - 48 >= 0xA)
        break;
      ++v12;
      --v10;
      ++v13;
      if (Length == v12)
        goto LABEL_26;
    }

    v24 = *(_BYTE *)(a1 + 64);
    v22 = *(void ***)(a1 + 40);
    v23 = *(_QWORD *)(a1 + 48) + a2;
  }
  else
  {
LABEL_26:

    v22 = *(void ***)(a1 + 40);
    v23 = *(_QWORD *)(a1 + 48) + a2;
    v24 = 9;
  }
  return emitToken(v22, v24, v23);
}

void enumerateTokensSeparatedByCharset(const __CFString *a1, const __CFCharacterSet *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v9;
  const char *CStringPtr;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  UniChar *v19;
  uint64_t v20;
  UniChar v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  UniChar v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  UniChar *v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  UniChar buffer[8];
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  CFStringRef theString;
  const UniChar *CharactersPtr;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  CFRange v62;
  CFRange v63;

  v9 = a5;
  if (a1 && a4)
  {
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    *(_OWORD *)buffer = 0u;
    v48 = 0u;
    theString = a1;
    v58 = a3;
    v59 = a4;
    CharactersPtr = CFStringGetCharactersPtr(a1);
    if (CharactersPtr)
      CStringPtr = 0;
    else
      CStringPtr = CFStringGetCStringPtr(a1, 0x600u);
    v11 = a3 + a4;
    v60 = 0;
    v61 = 0;
    v57 = CStringPtr;
    v12 = -a3;
    v46 = 1 - a3;
    v44 = v9;
    v45 = 65 - a3;
    v42 = &buffer[-a3 + 1];
    v43 = a3 - 1;
    v13 = -(a4 + a3);
    v14 = a3;
    v40 = a3 + a4;
    v41 = a3;
    while (1)
    {
LABEL_7:
      v15 = v11 - v14;
      if (v11 == v14)
        break;
      v16 = v14;
      v17 = v14 - a3;
      if (v17 < 0 || (v18 = v59, v59 <= v17))
      {
        v21 = 0;
      }
      else
      {
        v19 = (UniChar *)CharactersPtr;
        if (CharactersPtr)
        {
          v20 = v58 + v17;
        }
        else
        {
          if (v57)
          {
            v21 = v57[v58 + v17];
            goto LABEL_14;
          }
          if (v61 <= v17 || (v37 = v60, v60 > v17))
          {
            v38 = v17 - 4;
            if ((unint64_t)v17 < 4)
              v38 = 0;
            if (v38 + 64 < v59)
              v18 = v38 + 64;
            v60 = v38;
            v61 = v18;
            v63.location = v58 + v38;
            v63.length = v18 - v38;
            CFStringGetCharacters(theString, v63, buffer);
            v37 = v60;
          }
          v20 = v17 - v37;
          v19 = buffer;
        }
        v21 = v19[v20];
      }
LABEL_14:
      v14 = v16 + 1;
      if (!CFCharacterSetIsCharacterMember(a2, v21))
      {
        v22 = v46 + v16;
        v23 = v43 - v16;
        v24 = v45 + v16;
        v25 = v16;
        while (1)
        {
          v26 = v22 >= 4 ? 4 : v22;
          if (v13 + v25 == -1)
            break;
          v27 = v25;
          v28 = v12 + v25 + 1;
          if (v28 < 0 || (v29 = v59, v59 <= v28))
          {
            v30 = 0;
          }
          else if (CharactersPtr)
          {
            v30 = CharactersPtr[v12 + 1 + v25 + v58];
          }
          else if (v57)
          {
            v30 = v57[v58 + 1 + v12 + v25];
          }
          else
          {
            if (v61 <= v28 || (v31 = v60, v60 > v28))
            {
              v32 = v26 + v23;
              v33 = v24 - v26;
              v34 = -v26;
              v35 = v45 + v25 + v34;
              if (v35 >= v59)
                v35 = v59;
              v60 = v46 + v25 + v34;
              v61 = v35;
              if (v59 >= v33)
                v29 = v33;
              v62.length = v29 + v32;
              v62.location = v12 + v25 + v34 + v58 + 1;
              CFStringGetCharacters(theString, v62, buffer);
              v31 = v60;
            }
            v30 = v42[v25 - v31];
          }
          ++v25;
          ++v22;
          --v23;
          ++v24;
          if (CFCharacterSetIsCharacterMember(a2, v30))
          {
            v14 = v27 + 2;
            v36 = (void *)MEMORY[0x1C3BD4F6C]();
            v9 = v44;
            (*((void (**)(id, uint64_t, uint64_t))v44 + 2))(v44, v16, v25 - v16);
            objc_autoreleasePoolPop(v36);
            v11 = v40;
            a3 = v41;
            goto LABEL_7;
          }
        }
        v39 = (void *)MEMORY[0x1C3BD4F6C]();
        v9 = v44;
        (*((void (**)(id, uint64_t, uint64_t))v44 + 2))(v44, v16, v15);
        objc_autoreleasePoolPop(v39);
        break;
      }
    }
  }

}

void __tokenize_block_invoke()
{
  void *v0;
  id v1;
  id v2;

  +[SGAsset asset](SGAsset, "asset");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = (id)objc_msgSend(v0, "registerUpdateHandler:", &__block_literal_global_185);

  +[SGAsset asset](SGAsset, "asset");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  __tokenize_block_invoke_2((uint64_t)v2, v2);

}

void __tokenize_block_invoke_2(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;

  v12 = a2;
  pthread_mutex_lock(&tokenize_updateLock);
  v2 = v12;
  if (!v12)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void tokenize(NSString *__strong, TokenizationState *, NSRange, NSString *__strong)_block_invoke_2");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v7, CFSTR("SGSignatureDissector.m"), 248, CFSTR("Encountered nil Asset while attempting to load HMM tokens."));

    v2 = 0;
  }
  objc_msgSend(v2, "filesystemPathForAssetDataRelativePath:", CFSTR("HmmSigTokens.dat"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v3)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void tokenize(NSString *__strong, TokenizationState *, NSRange, NSString *__strong)_block_invoke_2");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "handleFailureInFunction:file:lineNumber:description:", v9, CFSTR("SGSignatureDissector.m"), 250, CFSTR("No HMM token file contained in CoreSuggestions MobileAsset version %lu"), objc_msgSend(v12, "assetVersion"));

  }
  v4 = objc_msgSend(objc_alloc(MEMORY[0x1E0D81548]), "initWithPath:", v3);
  v5 = (void *)tokenize_trie;
  tokenize_trie = v4;

  if (!tokenize_trie)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void tokenize(NSString *__strong, TokenizationState *, NSRange, NSString *__strong)_block_invoke_2");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", v11, CFSTR("SGSignatureDissector.m"), 252, CFSTR("Could not load HMM keyword trie"));

  }
  pthread_mutex_unlock(&tokenize_updateLock);

}

uint64_t __Block_byref_object_copy__19251(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__19252(uint64_t a1)
{

}

BOOL re2::StringPiece::_equal(uint64_t *a1, unsigned __int8 **a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  _BOOL8 result;
  BOOL v9;

  v2 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v2 != *((_DWORD *)a2 + 2))
    return 0;
  if ((int)v2 < 1)
    return 1;
  v3 = *a1;
  v4 = *a2;
  if (*(unsigned __int8 *)(*a1 + (v2 - 1)) != (*a2)[(v2 - 1)])
    return 0;
  v5 = v3 + v2;
  v6 = v3 + 1;
  do
  {
    v7 = *v4++;
    result = *(unsigned __int8 *)(v6 - 1) == v7;
    v9 = *(unsigned __int8 *)(v6 - 1) != v7 || v6 >= v5;
    ++v6;
  }
  while (!v9);
  return result;
}

unint64_t re2::StringPiece::copy(re2::StringPiece *this, char *__dst, unint64_t a3, uint64_t a4)
{
  unint64_t v4;

  if (*((int *)this + 2) - a4 >= a3)
    v4 = a3;
  else
    v4 = *((int *)this + 2) - a4;
  memcpy(__dst, (const void *)(*(_QWORD *)this + a4), (int)v4);
  return v4;
}

uint64_t re2::StringPiece::find(re2::StringPiece *this, const re2::StringPiece *a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  unsigned __int8 *v12;

  v3 = *((unsigned int *)this + 2);
  if ((v3 & 0x80000000) != 0 || v3 < a3)
    return 0xFFFFFFFFLL;
  v5 = *(_QWORD *)this;
  v6 = (unsigned __int8 *)(*(_QWORD *)this + a3);
  v7 = *((int *)a2 + 2);
  if ((_DWORD)v7)
  {
    if ((uint64_t)(v5 + v3 - (_QWORD)v6) < v7 || (v8 = v5 + v3 - v7 + 1, (unsigned __int8 *)v8 == v6))
    {
LABEL_14:
      v6 = (unsigned __int8 *)(v5 + v3);
    }
    else
    {
      while (*v6 != **(unsigned __int8 **)a2)
      {
LABEL_8:
        if (++v6 == (unsigned __int8 *)v8)
          goto LABEL_14;
      }
      v9 = 1;
      while (v7 != v9)
      {
        v10 = v6[v9];
        v11 = *(unsigned __int8 *)(*(_QWORD *)a2 + v9++);
        if (v10 != v11)
          goto LABEL_8;
      }
    }
  }
  v12 = &v6[-v5];
  if ((unint64_t)&v12[v7] > v3)
    return 0xFFFFFFFFLL;
  else
    return v12;
}

uint64_t re2::StringPiece::find(re2::StringPiece *this, int a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;

  v3 = *((unsigned int *)this + 2);
  if ((int)v3 < 1 || v3 <= a3)
    return 0xFFFFFFFFLL;
  v4 = *(_QWORD *)this;
  v5 = (void *)(*(_QWORD *)this + v3);
  v6 = memchr((void *)(*(_QWORD *)this + a3), a2, (size_t)v5 - *(_QWORD *)this - a3);
  if (v6)
    v7 = v6;
  else
    v7 = v5;
  if (v7 == v5)
    return 0xFFFFFFFFLL;
  else
    return ((_DWORD)v7 - v4);
}

unint64_t re2::StringPiece::rfind(unsigned __int8 **this, const re2::StringPiece *a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unsigned __int8 *v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;

  v3 = *((int *)this + 2);
  v4 = *((int *)a2 + 2);
  if ((int)v3 < (int)v4)
    return 0xFFFFFFFFLL;
  if ((_DWORD)v4)
  {
    v6 = *this;
    v7 = v3 - v4;
    if (v7 >= a3)
      v7 = a3;
    v8 = &v6[v4 + v7];
    if (v6 == v8)
      return 0xFFFFFFFFLL;
    v9 = *this;
    v10 = v8;
    do
    {
      if (*v9 == **(unsigned __int8 **)a2)
      {
        v11 = 1;
        while (v4 != v11)
        {
          if (&v9[v11] == v8)
            goto LABEL_17;
          v12 = v9[v11];
          v13 = *(unsigned __int8 *)(*(_QWORD *)a2 + v11++);
          if (v12 != v13)
            goto LABEL_9;
        }
        v10 = v9;
      }
LABEL_9:
      ++v9;
    }
    while (v9 != v8);
LABEL_17:
    v14 = (_DWORD)v10 - (_DWORD)v6;
    if (v10 == v8)
      return 0xFFFFFFFFLL;
    else
      return v14;
  }
  else if (v3 >= a3)
  {
    return a3;
  }
  else
  {
    return *((int *)this + 2);
  }
}

unint64_t re2::StringPiece::rfind(re2::StringPiece *this, unsigned __int8 a2, unint64_t a3)
{
  int v3;
  unint64_t result;
  uint64_t v6;
  BOOL v7;

  v3 = *((_DWORD *)this + 2);
  if (v3 < 1)
    return 0xFFFFFFFFLL;
  if ((v3 - 1) >= a3)
    result = a3;
  else
    result = (v3 - 1);
  v6 = *(_QWORD *)this;
  while (*(unsigned __int8 *)(v6 + result) != a2)
  {
    v7 = (int)result <= 0;
    result = (result - 1);
    if (v7)
      return 0xFFFFFFFFLL;
  }
  return result;
}

unint64_t re2::StringPiece::substr(re2::StringPiece *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;

  v2 = *((int *)this + 2);
  if (v2 >= a2)
    v3 = a2;
  else
    v3 = *((int *)this + 2);
  return *(_QWORD *)this + v3;
}

uint64_t SGMIMetricsRegexSignatureStatsReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  void *v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  SGMIMetricsTrialMetadata *v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  char v42;
  unsigned int v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  char v52;
  unsigned int v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  uint64_t result;
  uint64_t v58;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((int)(v10 >> 3) > 191)
      {
        if ((int)v17 <= 289)
        {
          if ((_DWORD)v17 == 192)
          {
            v52 = 0;
            v53 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 64) |= 0x20u;
            while (1)
            {
              v54 = *v3;
              v55 = *(_QWORD *)(a2 + v54);
              if (v55 == -1 || v55 >= *(_QWORD *)(a2 + *v4))
                break;
              v56 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v55);
              *(_QWORD *)(a2 + v54) = v55 + 1;
              v20 |= (unint64_t)(v56 & 0x7F) << v52;
              if ((v56 & 0x80) == 0)
                goto LABEL_114;
              v52 += 7;
              v14 = v53++ >= 9;
              if (v14)
              {
                LODWORD(v20) = 0;
                goto LABEL_116;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_114:
            if (*(_BYTE *)(a2 + *v5))
              LODWORD(v20) = 0;
LABEL_116:
            v58 = 44;
          }
          else
          {
            if ((_DWORD)v17 != 200)
            {
LABEL_87:
              result = PBReaderSkipValueWithTag();
              if (!(_DWORD)result)
                return result;
              goto LABEL_118;
            }
            v31 = 0;
            v32 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 64) |= 4u;
            while (1)
            {
              v33 = *v3;
              v34 = *(_QWORD *)(a2 + v33);
              if (v34 == -1 || v34 >= *(_QWORD *)(a2 + *v4))
                break;
              v35 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v34);
              *(_QWORD *)(a2 + v33) = v34 + 1;
              v20 |= (unint64_t)(v35 & 0x7F) << v31;
              if ((v35 & 0x80) == 0)
                goto LABEL_98;
              v31 += 7;
              v14 = v32++ >= 9;
              if (v14)
              {
                LODWORD(v20) = 0;
                goto LABEL_100;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_98:
            if (*(_BYTE *)(a2 + *v5))
              LODWORD(v20) = 0;
LABEL_100:
            v58 = 24;
          }
        }
        else
        {
          switch((_DWORD)v17)
          {
            case 0x122:
              v42 = 0;
              v43 = 0;
              v20 = 0;
              *(_BYTE *)(a1 + 64) |= 1u;
              while (1)
              {
                v44 = *v3;
                v45 = *(_QWORD *)(a2 + v44);
                if (v45 == -1 || v45 >= *(_QWORD *)(a2 + *v4))
                  break;
                v46 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v45);
                *(_QWORD *)(a2 + v44) = v45 + 1;
                v20 |= (unint64_t)(v46 & 0x7F) << v42;
                if ((v46 & 0x80) == 0)
                  goto LABEL_106;
                v42 += 7;
                v14 = v43++ >= 9;
                if (v14)
                {
                  LODWORD(v20) = 0;
                  goto LABEL_108;
                }
              }
              *(_BYTE *)(a2 + *v5) = 1;
LABEL_106:
              if (*(_BYTE *)(a2 + *v5))
                LODWORD(v20) = 0;
LABEL_108:
              v58 = 16;
              break;
            case 0x12C:
              v47 = 0;
              v48 = 0;
              v20 = 0;
              *(_BYTE *)(a1 + 64) |= 8u;
              while (1)
              {
                v49 = *v3;
                v50 = *(_QWORD *)(a2 + v49);
                if (v50 == -1 || v50 >= *(_QWORD *)(a2 + *v4))
                  break;
                v51 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v50);
                *(_QWORD *)(a2 + v49) = v50 + 1;
                v20 |= (unint64_t)(v51 & 0x7F) << v47;
                if ((v51 & 0x80) == 0)
                  goto LABEL_110;
                v47 += 7;
                v14 = v48++ >= 9;
                if (v14)
                {
                  LODWORD(v20) = 0;
                  goto LABEL_112;
                }
              }
              *(_BYTE *)(a2 + *v5) = 1;
LABEL_110:
              if (*(_BYTE *)(a2 + *v5))
                LODWORD(v20) = 0;
LABEL_112:
              v58 = 28;
              break;
            case 0x186:
              v24 = 0;
              v25 = 0;
              v20 = 0;
              *(_BYTE *)(a1 + 64) |= 2u;
              while (1)
              {
                v26 = *v3;
                v27 = *(_QWORD *)(a2 + v26);
                if (v27 == -1 || v27 >= *(_QWORD *)(a2 + *v4))
                  break;
                v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v27);
                *(_QWORD *)(a2 + v26) = v27 + 1;
                v20 |= (unint64_t)(v28 & 0x7F) << v24;
                if ((v28 & 0x80) == 0)
                  goto LABEL_94;
                v24 += 7;
                v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v20) = 0;
                  goto LABEL_96;
                }
              }
              *(_BYTE *)(a2 + *v5) = 1;
LABEL_94:
              if (*(_BYTE *)(a2 + *v5))
                LODWORD(v20) = 0;
LABEL_96:
              v58 = 20;
              break;
            default:
              goto LABEL_87;
          }
        }
        goto LABEL_117;
      }
      if ((int)v17 > 99)
        break;
      if ((_DWORD)v17 == 1)
      {
        v36 = objc_alloc_init(SGMIMetricsTrialMetadata);
        objc_storeStrong((id *)(a1 + 56), v36);
        if (!PBReaderPlaceMark() || (SGMIMetricsTrialMetadataReadFrom((uint64_t)v36, a2) & 1) == 0)
        {
LABEL_120:

          return 0;
        }
LABEL_79:
        PBReaderRecallMark();

        goto LABEL_118;
      }
      if ((_DWORD)v17 != 10)
        goto LABEL_87;
      PBReaderReadString();
      v29 = objc_claimAutoreleasedReturnValue();
      v30 = *(void **)(a1 + 8);
      *(_QWORD *)(a1 + 8) = v29;

LABEL_118:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    if ((_DWORD)v17 != 100)
    {
      if ((_DWORD)v17 == 190)
      {
        v37 = 0;
        v38 = 0;
        v20 = 0;
        *(_BYTE *)(a1 + 64) |= 0x10u;
        while (1)
        {
          v39 = *v3;
          v40 = *(_QWORD *)(a2 + v39);
          if (v40 == -1 || v40 >= *(_QWORD *)(a2 + *v4))
            break;
          v41 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v40);
          *(_QWORD *)(a2 + v39) = v40 + 1;
          v20 |= (unint64_t)(v41 & 0x7F) << v37;
          if ((v41 & 0x80) == 0)
            goto LABEL_102;
          v37 += 7;
          v14 = v38++ >= 9;
          if (v14)
          {
            LODWORD(v20) = 0;
            goto LABEL_104;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_102:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v20) = 0;
LABEL_104:
        v58 = 40;
      }
      else
      {
        if ((_DWORD)v17 != 191)
          goto LABEL_87;
        v18 = 0;
        v19 = 0;
        v20 = 0;
        *(_BYTE *)(a1 + 64) |= 0x40u;
        while (1)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
            break;
          v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0)
            goto LABEL_90;
          v18 += 7;
          v14 = v19++ >= 9;
          if (v14)
          {
            LODWORD(v20) = 0;
            goto LABEL_92;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_90:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v20) = 0;
LABEL_92:
        v58 = 48;
      }
LABEL_117:
      *(_DWORD *)(a1 + v58) = v20;
      goto LABEL_118;
    }
    v36 = objc_alloc_init(SGMIMetricsRegexSignatureStat);
    objc_msgSend((id)a1, "addStats:", v36);
    if (!PBReaderPlaceMark() || (SGMIMetricsRegexSignatureStatReadFrom((uint64_t)v36, a2) & 1) == 0)
      goto LABEL_120;
    goto LABEL_79;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1C375705C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C37581E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1C3758424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C37584D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C375884C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  SGRecordMeasurementState((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1C3758DA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__19784(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__19785(uint64_t a1)
{

}

void sub_1C3758F24(_Unwind_Exception *exception_object, int a2)
{
  uint64_t v2;
  id v3;
  uint64_t v4;
  void *v5;

  if (a2 != 1)
    _Unwind_Resume(exception_object);
  v3 = objc_begin_catch(exception_object);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 40) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = 0;

  xpc_transaction_exit_clean();
  objc_end_catch();
  JUMPOUT(0x1C3758E68);
}

void sub_1C3758F7C()
{
  objc_end_catch();
  JUMPOUT(0x1C3758F34);
}

void sub_1C37591FC(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_1C37593A0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 buf)
{
  uint64_t v11;
  sqlite3_stmt *v12;
  id v13;
  NSObject *v14;
  sqlite3_int64 v15;
  uint64_t v16;
  void *v17;

  if (a2 == 1)
  {
    v13 = objc_begin_catch(a1);
    sgLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      v15 = sqlite3_column_int64(v12, 0);
      LODWORD(buf) = 134217984;
      *(_QWORD *)((char *)&buf + 4) = v15;
      _os_log_impl(&dword_1C3607000, v14, OS_LOG_TYPE_DEFAULT, "Unexpected error while deserializing contact: %lld", (uint8_t *)&buf, 0xCu);
    }

    v16 = *(_QWORD *)(*(_QWORD *)(v11 + 32) + 8);
    v17 = *(void **)(v16 + 40);
    *(_QWORD *)(v16 + 40) = 0;

    xpc_transaction_exit_clean();
    objc_end_catch();
    JUMPOUT(0x1C375936CLL);
  }
  _Unwind_Resume(a1);
}

uint64_t SGUnarchiverZip(NSURL *a1, NSURL *a2)
{
  NSURL *v3;
  NSURL *v4;
  NSURL *v5;
  uint64_t v6;
  NSURL *v7;
  int v8;
  int v9;
  NSObject *v10;
  NSObject *v11;
  const char *v12;
  NSObject *v13;
  uint32_t v14;
  int *v16;
  char *v17;
  int *v18;
  char *v19;
  int v20;
  _BYTE v21[24];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  v6 = 0;
  if (!v3 || !v4)
    goto LABEL_14;
  if (!-[NSURL isFileURL](v3, "isFileURL"))
  {
    sgLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
LABEL_13:

      v6 = 0;
      goto LABEL_14;
    }
    v20 = 138412290;
    *(_QWORD *)v21 = v3;
    v12 = "SGUnarchiver: unable to open non-file URL %@.";
    v13 = v11;
    v14 = 12;
LABEL_16:
    _os_log_error_impl(&dword_1C3607000, v13, OS_LOG_TYPE_ERROR, v12, (uint8_t *)&v20, v14);
    goto LABEL_13;
  }
  v7 = objc_retainAutorelease(v3);
  v8 = open(-[NSURL fileSystemRepresentation](v7, "fileSystemRepresentation"), 4);
  if (v8 < 0)
  {
    sgLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      goto LABEL_13;
    v18 = __error();
    v19 = strerror(*v18);
    v20 = 138412546;
    *(_QWORD *)v21 = v7;
    *(_WORD *)&v21[8] = 2082;
    *(_QWORD *)&v21[10] = v19;
    v12 = "SGUnarchiver: unable to open file %@ - %{public}s.";
    v13 = v11;
    v14 = 22;
    goto LABEL_16;
  }
  v9 = v8;
  v6 = SGUnarchiverZip(v8, v5);
  if (close(v9))
  {
    sgLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
    {
      v16 = __error();
      v17 = strerror(*v16);
      v20 = 67240706;
      *(_DWORD *)v21 = v9;
      *(_WORD *)&v21[4] = 2112;
      *(_QWORD *)&v21[6] = v7;
      *(_WORD *)&v21[14] = 2082;
      *(_QWORD *)&v21[16] = v17;
      _os_log_fault_impl(&dword_1C3607000, v10, OS_LOG_TYPE_FAULT, "SGUnarchiver: unable to close file descriptor %{public}d for %@ (leaking) - %{public}s.", (uint8_t *)&v20, 0x1Cu);
    }

    if (_PASEvaluateLogFaultAndProbCrashCriteria())
      abort();
  }
LABEL_14:

  return v6;
}

uint64_t SGUnarchiverZip(int a1, NSURL *a2)
{
  NSURL *v3;
  NSURL *v4;
  uint64_t v5;
  uint64_t Archive;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = v3;
  v5 = 0;
  if (a1 < 0 || !v3)
    goto LABEL_17;
  Archive = SGCreateReadArchive();
  if (!Archive)
  {
    v5 = 0;
    goto LABEL_17;
  }
  v7 = Archive;
  NSPageSize();
  if (archive_read_open_fd())
  {
    sgLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v12 = 136446210;
      v13 = archive_error_string();
      _os_log_error_impl(&dword_1C3607000, v8, OS_LOG_TYPE_ERROR, "SGUnarchiver: unable to open archive_read - %{public}s.", (uint8_t *)&v12, 0xCu);
    }
    v5 = 0;
  }
  else
  {
    v5 = SGZipUnarchive(v7, v4);
    if (!archive_read_close())
      goto LABEL_13;
    sgLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v12 = 136446210;
      v13 = archive_error_string();
      _os_log_error_impl(&dword_1C3607000, v8, OS_LOG_TYPE_ERROR, "SGUnarchiver: unable to close archive_read - %{public}s.", (uint8_t *)&v12, 0xCu);
    }
  }

LABEL_13:
  if (archive_read_free())
  {
    sgLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_FAULT))
    {
      v11 = archive_error_string();
      v12 = 136446210;
      v13 = v11;
      _os_log_fault_impl(&dword_1C3607000, v9, OS_LOG_TYPE_FAULT, "SGUnarchiver: unable to free archive_read (leaking) - %{public}s.", (uint8_t *)&v12, 0xCu);
    }

    if (_PASEvaluateLogFaultAndProbCrashCriteria())
      abort();
  }
LABEL_17:

  return v5;
}

uint64_t SGCreateReadArchive()
{
  uint64_t v0;
  NSObject *v1;
  NSObject *v2;
  int support_filter_all;
  int v5;
  NSObject *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v0 = archive_read_new();
  if (!v0)
    return v0;
  if (archive_read_support_format_zip())
  {
    sgLogHandle();
    v1 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
    {
      v8 = 136446210;
      v9 = archive_error_string();
      _os_log_impl(&dword_1C3607000, v1, OS_LOG_TYPE_DEFAULT, "SGUnarchiver: archive_read unable to set supported formats - %{public}s.", (uint8_t *)&v8, 0xCu);
    }

LABEL_6:
    if (archive_read_free())
    {
      sgLogHandle();
      v2 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      {
        v7 = archive_error_string();
        v8 = 136446210;
        v9 = v7;
        _os_log_error_impl(&dword_1C3607000, v2, OS_LOG_TYPE_ERROR, "SGUnarchiver: unable to free archive_read (leaking) - %{public}s.", (uint8_t *)&v8, 0xCu);
      }

    }
    return 0;
  }
  support_filter_all = archive_read_support_filter_all();
  if (support_filter_all != -20)
  {
    v5 = support_filter_all;
    if (support_filter_all)
    {
      sgLogHandle();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        v8 = 136446210;
        v9 = archive_error_string();
        _os_log_error_impl(&dword_1C3607000, v6, OS_LOG_TYPE_ERROR, "SGUnarchiver: archive_read unable to set supported compression formats - %{public}s.", (uint8_t *)&v8, 0xCu);
      }

      if (v5)
        goto LABEL_6;
    }
  }
  return v0;
}

uint64_t SGZipUnarchive(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  void *v4;
  char v5;
  NSObject *v6;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  const char *v11;
  NSObject *v12;
  uint64_t v13;
  void *v15;
  __int128 v16;
  char *v17;
  char *v18;
  uint64_t v19;
  NSObject *v20;
  int next_header;
  int v22;
  void *v23;
  uint64_t v24;
  const char *v25;
  char *v26;
  char *v27;
  int v28;
  NSObject *v29;
  void *v30;
  uint64_t v31;
  void *v32;
  id v33;
  int data_block;
  size_t v35;
  uint64_t v36;
  const char *v37;
  NSObject *v38;
  NSObject *v40;
  NSObject *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  NSObject *v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  uint64_t v53;
  uint64_t v54;
  int *v55;
  char *v56;
  __int128 v57;
  id v58[4];
  uint8_t buf[4];
  uint64_t v60;
  __int16 v61;
  size_t v62;
  uint64_t v63;
  _QWORD v64[2];

  v64[1] = *MEMORY[0x1E0C80C00];
  v2 = a2;
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v63 = *MEMORY[0x1E0CB2AA8];
  v64[0] = &unk_1E7E0C650;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v64, &v63, 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v58[0] = 0;
  v5 = objc_msgSend(v3, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v2, 0, v4, v58);
  v6 = v58[0];

  if ((v5 & 1) == 0)
  {
    -[NSObject domain](v6, "domain");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v7, "isEqualToString:", *MEMORY[0x1E0CB28A8]))
    {
      v8 = -[NSObject code](v6, "code");

      if (v8 == 516)
        goto LABEL_4;
    }
    else
    {

    }
    sgLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412546;
      v60 = (uint64_t)v2;
      v61 = 2112;
      v62 = (size_t)v6;
      _os_log_error_impl(&dword_1C3607000, v12, OS_LOG_TYPE_ERROR, "SGUnarchiver: failed to create directory at %@ - %@.", buf, 0x16u);
    }

    goto LABEL_17;
  }
LABEL_4:

  if (!archive_write_disk_new())
  {
LABEL_19:
    v13 = 0;
    goto LABEL_20;
  }
  if (archive_write_disk_set_standard_lookup())
  {
    sgLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      goto LABEL_14;
    v10 = archive_error_string();
    *(_DWORD *)buf = 136446210;
    v60 = v10;
    v11 = "SGUnarchiver: archive_write_disk unable to set lookup functions - %{public}s.";
    goto LABEL_65;
  }
  if (!archive_write_disk_set_options())
  {
    objc_msgSend(v2, "path");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    if (v15)
    {
      v6 = objc_retainAutorelease(v15);
      v17 = realpath_DARWIN_EXTSN((const char *)-[NSObject fileSystemRepresentation](v6, "fileSystemRepresentation"), 0);
      if (v17)
      {
        v18 = v17;
        v19 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithUTF8String:", v17);

        free(v18);
        v6 = v19;
      }
      else
      {
        sgLogHandle();
        v20 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          v55 = __error();
          v56 = strerror(*v55);
          *(_DWORD *)buf = 138412546;
          v60 = (uint64_t)v6;
          v61 = 2080;
          v62 = (size_t)v56;
          _os_log_error_impl(&dword_1C3607000, v20, OS_LOG_TYPE_ERROR, "SGUnarchiver: unable to resolve physical path for destination path %@ - %s.", buf, 0x16u);
        }

      }
    }
    else
    {
      v6 = 0;
    }
    *(_QWORD *)&v16 = 134218240;
    v57 = v16;
    while (1)
    {
      next_header = archive_read_next_header();
      if (next_header)
        break;
      v22 = archive_entry_filetype();
      v23 = (void *)MEMORY[0x1C3BD4F6C]();
      v24 = archive_entry_pathname_utf8();
      if (!v24)
      {
        sgLogHandle();
        v45 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl(&dword_1C3607000, v45, OS_LOG_TYPE_ERROR, "SGUnarchiver: archive_entry with no path encountered.", buf, 2u);
        }

LABEL_74:
        objc_autoreleasePoolPop(v23);
        goto LABEL_53;
      }
      v25 = (const char *)v24;
      v26 = 0;
      do
      {
        v27 = v26;
        v28 = (v26++)[v24];
      }
      while (v28 == 47);
      if (v27)
      {
        sgLogHandle();
        v29 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
        {
          v35 = strlen(v25);
          *(_DWORD *)buf = v57;
          v60 = (uint64_t)v27;
          v61 = 2048;
          v62 = v35;
          _os_log_error_impl(&dword_1C3607000, v29, OS_LOG_TYPE_ERROR, "SGUnarchiver: archive_entry with absolute path encountered...ignoring leading %zu of %zu bytes.", buf, 0x16u);
        }

      }
      v30 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithUTF8String:", &v27[(_QWORD)v25]);
      v31 = objc_msgSend(v30, "length");
      if (!v31 && v22 != 0x4000)
      {
        sgLogHandle();
        v46 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl(&dword_1C3607000, v46, OS_LOG_TYPE_ERROR, "SGUnarchiver: archive_entry with no path after sanitization encountered.", buf, 2u);
        }

        goto LABEL_74;
      }
      -[NSObject stringByAppendingPathComponent:](v6, "stringByAppendingPathComponent:", v30, v57);
      v32 = (void *)objc_claimAutoreleasedReturnValue();

      v33 = objc_retainAutorelease(v32);
      objc_msgSend(v33, "fileSystemRepresentation");
      archive_entry_update_pathname_utf8();

      objc_autoreleasePoolPop(v23);
      archive_entry_perm();
      archive_entry_set_perm();
      if (v31)
      {
        if (archive_write_header())
        {
          sgLogHandle();
          v51 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
          {
            v47 = archive_error_string();
            *(_DWORD *)buf = 136446210;
            v60 = v47;
            v48 = "SGUnarchiver: archive_write_header failed - %{public}s.";
            goto LABEL_79;
          }
LABEL_80:

          goto LABEL_53;
        }
        if (!archive_entry_size_is_set() || archive_entry_size() >= 1)
        {
          do
          {
            memset(&v58[1], 0, 24);
            data_block = archive_read_data_block();
            if (data_block)
            {
              if (data_block == 1)
                goto LABEL_47;
              sgLogHandle();
              v38 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
              {
                v36 = archive_error_string();
                *(_DWORD *)buf = 136446210;
                v60 = v36;
                v37 = "SGUnarchiver: archive_read_data_block failed - %{public}s.";
                goto LABEL_82;
              }
              goto LABEL_52;
            }
          }
          while ((archive_write_data_block() & 0x8000000000000000) == 0);
          sgLogHandle();
          v38 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
          {
            v54 = archive_error_string();
            *(_DWORD *)buf = 136446210;
            v60 = v54;
            v37 = "SGUnarchiver: archive_write_data_block failed - %{public}s.";
            goto LABEL_82;
          }
LABEL_52:

LABEL_53:
          v13 = 0;
          goto LABEL_54;
        }
LABEL_47:
        if (archive_write_finish_entry())
        {
          sgLogHandle();
          v51 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
          {
            v53 = archive_error_string();
            *(_DWORD *)buf = 136446210;
            v60 = v53;
            v48 = "SGUnarchiver: archive_write_finish_entry failed - %{public}s.";
LABEL_79:
            _os_log_impl(&dword_1C3607000, v51, OS_LOG_TYPE_DEFAULT, v48, buf, 0xCu);
          }
          goto LABEL_80;
        }
      }
    }
    if (next_header != 1)
    {
      sgLogHandle();
      v38 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
      {
        v44 = archive_error_string();
        *(_DWORD *)buf = 136446210;
        v60 = v44;
        v37 = "SGUnarchiver: archive_read_next_header failed - %{public}s.";
LABEL_82:
        _os_log_error_impl(&dword_1C3607000, v38, OS_LOG_TYPE_ERROR, v37, buf, 0xCu);
      }
      goto LABEL_52;
    }
    v13 = 1;
LABEL_54:
    if (archive_write_close())
    {
      sgLogHandle();
      v40 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
      {
        v49 = archive_error_string();
        *(_DWORD *)buf = 136446210;
        v60 = v49;
        _os_log_error_impl(&dword_1C3607000, v40, OS_LOG_TYPE_ERROR, "SGUnarchiver: unable to close archive_write_disk - %{public}s.", buf, 0xCu);
      }

      v13 = 0;
    }
    if (archive_write_free())
    {
      sgLogHandle();
      v41 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
      {
        v50 = archive_error_string();
        *(_DWORD *)buf = 136446210;
        v60 = v50;
        _os_log_error_impl(&dword_1C3607000, v41, OS_LOG_TYPE_ERROR, "SGUnarchiver: unable to free archive_write_disk (leaking) - %{public}s.", buf, 0xCu);
      }

    }
    goto LABEL_18;
  }
  sgLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    v43 = archive_error_string();
    *(_DWORD *)buf = 136446210;
    v60 = v43;
    v11 = "SGUnarchiver: archive_write_disk unable to set options - %{public}s.";
LABEL_65:
    _os_log_error_impl(&dword_1C3607000, v9, OS_LOG_TYPE_ERROR, v11, buf, 0xCu);
  }
LABEL_14:

  if (!archive_write_free())
    goto LABEL_19;
  sgLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    v42 = archive_error_string();
    *(_DWORD *)buf = 136446210;
    v60 = v42;
    _os_log_error_impl(&dword_1C3607000, v6, OS_LOG_TYPE_ERROR, "SGUnarchiver: unable to free archive_write_disk (leaking) - %{public}s.", buf, 0xCu);
  }
LABEL_17:
  v13 = 0;
LABEL_18:

LABEL_20:
  return v13;
}

uint64_t SGUnarchiverZip(NSData *a1, NSURL *a2)
{
  NSData *v3;
  NSURL *v4;
  NSData *v5;
  const void *v6;
  unint64_t v7;
  uint64_t v8;

  if (!a1 || !a2)
    return 0;
  v3 = objc_retainAutorelease(a1);
  v4 = a2;
  v5 = v3;
  v6 = -[NSData bytes](v5, "bytes");
  v7 = -[NSData length](v5, "length");

  v8 = SGUnarchiverZip(v6, v7, v4);
  return v8;
}

uint64_t SGUnarchiverZip(const void *a1, unint64_t a2, NSURL *a3)
{
  NSURL *v4;
  NSURL *v5;
  uint64_t v6;
  uint64_t Archive;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = v4;
  v6 = 0;
  if (!a1 || !v4)
    goto LABEL_17;
  Archive = SGCreateReadArchive();
  if (!Archive)
  {
    v6 = 0;
    goto LABEL_17;
  }
  v8 = Archive;
  if (archive_read_open_memory())
  {
    sgLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v13 = 136446210;
      v14 = archive_error_string();
      _os_log_error_impl(&dword_1C3607000, v9, OS_LOG_TYPE_ERROR, "SGUnarchiver: unable to open archive_read - %{public}s.", (uint8_t *)&v13, 0xCu);
    }
    v6 = 0;
  }
  else
  {
    v6 = SGZipUnarchive(v8, v5);
    if (!archive_read_close())
      goto LABEL_13;
    sgLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v13 = 136446210;
      v14 = archive_error_string();
      _os_log_error_impl(&dword_1C3607000, v9, OS_LOG_TYPE_ERROR, "SGUnarchiver: unable to close archive_read - %{public}s.", (uint8_t *)&v13, 0xCu);
    }
  }

LABEL_13:
  if (archive_read_free())
  {
    sgLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
    {
      v12 = archive_error_string();
      v13 = 136446210;
      v14 = v12;
      _os_log_fault_impl(&dword_1C3607000, v10, OS_LOG_TYPE_FAULT, "SGUnarchiver: unable to free archive_read (leaking) - %{public}s.", (uint8_t *)&v13, 0xCu);
    }

    if (_PASEvaluateLogFaultAndProbCrashCriteria())
      abort();
  }
LABEL_17:

  return v6;
}

void sub_1C375C5E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C375DE48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;

  _Block_object_dispose(&a37, 8);
  _Block_object_dispose((const void *)(v37 - 208), 8);
  _Block_object_dispose((const void *)(v37 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__20086(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__20087(uint64_t a1)
{

}

id patterns_20088()
{
  if (patterns_onceToken_20096 != -1)
    dispatch_once(&patterns_onceToken_20096, &__block_literal_global_20097);
  return (id)patterns_patterns_20098;
}

void __patterns_block_invoke_20099()
{
  uint64_t v0;
  void *v1;

  +[SGPatterns patternsForIdentifier:](SGPatterns, "patternsForIdentifier:", CFSTR("SGMailQuoteDissector"));
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)patterns_patterns_20098;
  patterns_patterns_20098 = v0;

}

void sub_1C375E61C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C375E7D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C375E998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C375EB54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C375ECA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C375EDFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C375EF54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C375F0CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C375F244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C375F3BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C375F534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__20147(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__20148(uint64_t a1)
{

}

void ___createITSListForFTSQuery_block_invoke()
{
  void *v0;
  uint64_t v1;
  void *v2;

  v0 = (void *)MEMORY[0x1C3BD4F6C]();
  v1 = objc_msgSend(objc_alloc(MEMORY[0x1E0D815E0]), "initWithBlock:idleTimeout:", &__block_literal_global_44_20378, 1.0);
  v2 = (void *)_createITSListForFTSQuery__pasExprOnceResult;
  _createITSListForFTSQuery__pasExprOnceResult = v1;

  objc_autoreleasePoolPop(v0);
}

void sub_1C3761978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C3761B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C3761D84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C3762694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C3762AB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C37630A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C37631D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C3764164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  _Block_object_dispose(&a28, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__20493(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__20494(uint64_t a1)
{

}

void sub_1C37656BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

Class __getHKHealthStoreClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!HealthKitLibraryCore_frameworkLibrary)
    HealthKitLibraryCore_frameworkLibrary = _sl_dlopen();
  if (!HealthKitLibraryCore_frameworkLibrary)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *HealthKitLibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("SGDetectedAttributeDissector.m"), 73, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("HKHealthStore");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getHKHealthStoreClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("SGDetectedAttributeDissector.m"), 74, CFSTR("Unable to find class %s"), "HKHealthStore");

LABEL_8:
    __break(1u);
  }
  getHKHealthStoreClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1C376647C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C3767F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  _Block_object_dispose(&a39, 8);
  _Unwind_Resume(a1);
}

void sub_1C3768BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  _Block_object_dispose(&a47, 8);
  _Unwind_Resume(a1);
}

void sub_1C376ABC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__20702(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__20703(uint64_t a1)
{

}

id regex2ForKey(void *a1)
{
  id v1;
  void *v2;
  void *v3;

  v1 = a1;
  +[SGDetectedAttributeDissector patterns](SGDetectedAttributeDissector, "patterns");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "regex2ForKey:", v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id textToMatch(uint64_t a1, uint64_t a2, void *a3, unsigned int a4)
{
  id v7;
  void *v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  const __CFString *v14;
  objc_class *v15;
  id v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  void *v22;
  void *v23;

  v7 = a3;
  if (a4 >= 4)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *textToMatch(long, long, NSString *__strong, SGDataDetectorMatchType)");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "handleFailureInFunction:file:lineNumber:description:", v23, CFSTR("SGDetectedAttributeDissector.m"), 125, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("type == SGDDMatchPhone || type == SGDDMatchPostalAddress || type == SGDDMatchEmailAddress || type == SGDDMatchDate"));

  }
  v8 = (void *)MEMORY[0x1C3BD4F6C]();
  v9 = 100;
  if (a1 > 100)
    v9 = a1;
  objc_msgSend(v7, "substringWithRange:", v9 - 100, a1 - (v9 - 100));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v7, "length");
  v12 = a2 + 100;
  if (v11 < a2 + 100)
    v12 = v11;
  objc_msgSend(v7, "substringWithRange:", a2, v12 - a2);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  if (a4 > 3)
    v14 = CFSTR("%WRONG_MATCH_TYPE");
  else
    v14 = off_1E7DAF930[a4];
  v15 = (objc_class *)MEMORY[0x1E0CB3940];
  v16 = v10;
  v17 = [v15 alloc];
  _PASNormalizeUnicodeString();
  v18 = (void *)objc_claimAutoreleasedReturnValue();

  _PASNormalizeUnicodeString();
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = (void *)objc_msgSend(v17, "initWithFormat:", CFSTR("%@%@%@"), v18, v14, v19);

  objc_autoreleasePoolPop(v8);
  return v20;
}

BOOL attributionRegexpMatches(void *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;

  v3 = a2;
  regex2ForKey(a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "existsInString:", v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
    +[SGAggregateLogging reMatched:](SGAggregateLogging, "reMatched:", v5);

  return v5 != 0;
}

BOOL attributionPatternMatches(void *a1, void *a2, void *a3, uint64_t a4, unsigned int a5)
{
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  _BOOL8 v15;

  v9 = a3;
  v10 = a2;
  v11 = a1;
  v12 = objc_msgSend(v11, "rangeOfString:options:", a4, 2);
  textToMatch(v12, v12 + v13, v11, a5);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  v15 = attributionRegexpMatches(v10, v14);
  if (v15)
    v15 = !attributionRegexpMatches(v9, v14);

  return v15;
}

id patterns_21107()
{
  if (patterns_onceToken_21110 != -1)
    dispatch_once(&patterns_onceToken_21110, &__block_literal_global_21111);
  return (id)patterns_patterns_21112;
}

void __patterns_block_invoke_21113()
{
  uint64_t v0;
  void *v1;

  +[SGPatterns patternsForClass:](SGPatterns, "patternsForClass:", objc_opt_class());
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)patterns_patterns_21112;
  patterns_patterns_21112 = v0;

}

double re2::PrefilterTree::PrefilterTree(re2::PrefilterTree *this)
{
  double result;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = (char *)this + 32;
  result = 0.0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *(_OWORD *)((char *)this + 105) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = (char *)this + 32;
  result = 0.0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *(_OWORD *)((char *)this + 105) = 0u;
  return result;
}

void re2::PrefilterTree::~PrefilterTree(re2::PrefilterTree *this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  re2::Prefilter *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;

  v3 = *((_QWORD *)this + 9);
  v2 = *((_QWORD *)this + 10);
  if (v2 != v3)
  {
    v4 = 0;
    do
    {
      v5 = *(re2::Prefilter **)(v3 + 8 * v4);
      if (v5)
      {
        re2::Prefilter::~Prefilter(v5);
        MEMORY[0x1C3BD4858]();
        v3 = *((_QWORD *)this + 9);
        v2 = *((_QWORD *)this + 10);
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  v7 = *(_QWORD *)this;
  v6 = *((_QWORD *)this + 1);
  if (v6 != *(_QWORD *)this)
  {
    v8 = 0;
    v9 = 8;
    do
    {
      v10 = *(_QWORD *)(v7 + v9);
      if (v10)
      {
        std::__tree<std::__value_type<unsigned long long,int>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,int>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,int>>>::destroy(*(_QWORD **)(v10 + 8));
        MEMORY[0x1C3BD4858](v10, 0x1020C4062D53EE8);
        v7 = *(_QWORD *)this;
        v6 = *((_QWORD *)this + 1);
      }
      ++v8;
      v9 += 40;
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((v6 - v7) >> 3) > v8);
  }
  v11 = (void *)*((_QWORD *)this + 12);
  if (v11)
  {
    *((_QWORD *)this + 13) = v11;
    operator delete(v11);
  }
  v12 = (void *)*((_QWORD *)this + 9);
  if (v12)
  {
    *((_QWORD *)this + 10) = v12;
    operator delete(v12);
  }
  v13 = (void *)*((_QWORD *)this + 6);
  if (v13)
  {
    *((_QWORD *)this + 7) = v13;
    operator delete(v13);
  }
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(*((char **)this + 4));
  v14 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v15 = *((_QWORD *)this + 1);
    v16 = *(void **)this;
    if (v15 != v14)
    {
      do
      {
        v17 = *(void **)(v15 - 24);
        if (v17)
        {
          *(_QWORD *)(v15 - 16) = v17;
          operator delete(v17);
        }
        v15 -= 40;
      }
      while (v15 != v14);
      v16 = *(void **)this;
    }
    *((_QWORD *)this + 1) = v14;
    operator delete(v16);
  }
}

void re2::PrefilterTree::Add(re2::PrefilterTree *this, re2::Prefilter *a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;
  re2::Prefilter *v8;
  unint64_t v10;
  char *v11;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  re2::Prefilter **v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  re2::Prefilter *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30[8];
  __int128 v31;
  __int128 v32;
  int v33;
  uint64_t v34;

  if (*((_BYTE *)this + 120))
  {
    LOBYTE(v28) = 0;
    v3 = MEMORY[0x1E0DE4FE0];
    v4 = MEMORY[0x1E0DE4FE0] + 64;
    v5 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v6 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v34 = MEMORY[0x1E0DE4FE0] + 64;
    v29 = v5;
    *(uint64_t *)((char *)&v30[-1] + *(_QWORD *)(v5 - 24)) = v6;
    v7 = (std::ios_base *)((char *)&v30[-1] + *(_QWORD *)(v29 - 24));
    std::ios_base::init(v7, v30);
    v7[1].__vftable = 0;
    v7[1].__fmtflags_ = -1;
    v29 = v3 + 24;
    v34 = v4;
    std::streambuf::basic_streambuf();
    v30[0] = MEMORY[0x1E0DE4FB8] + 16;
    v31 = 0u;
    v32 = 0u;
    v33 = 16;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v29, (uint64_t)"Add after Compile.", 18);
    LogMessage::~LogMessage(&v28);
  }
  else
  {
    v8 = a2;
    if (a2 && !re2::KeepPart((_BOOL8)a2, 0, a3))
    {
      re2::Prefilter::~Prefilter(v8);
      MEMORY[0x1C3BD4858]();
      v8 = 0;
    }
    v11 = (char *)*((_QWORD *)this + 10);
    v10 = *((_QWORD *)this + 11);
    if ((unint64_t)v11 >= v10)
    {
      v13 = (char *)*((_QWORD *)this + 9);
      v14 = (v11 - v13) >> 3;
      v15 = v14 + 1;
      if ((unint64_t)(v14 + 1) >> 61)
        std::vector<re2::RE2 *>::__throw_length_error[abi:ne180100]();
      v16 = v10 - (_QWORD)v13;
      if (v16 >> 2 > v15)
        v15 = v16 >> 2;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
        v17 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v17 = v15;
      if (v17)
      {
        if (v17 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v18 = operator new(8 * v17);
      }
      else
      {
        v18 = 0;
      }
      v19 = (re2::Prefilter **)&v18[8 * v14];
      v20 = &v18[8 * v17];
      *v19 = v8;
      v12 = v19 + 1;
      if (v11 == v13)
      {
        v13 = v11;
      }
      else
      {
        v21 = v11 - v13 - 8;
        if (v21 < 0x58)
          goto LABEL_35;
        if ((unint64_t)(v13 - v18) < 0x20)
          goto LABEL_35;
        v22 = (v21 >> 3) + 1;
        v23 = &v18[8 * v14 - 16];
        v24 = v11 - 16;
        v25 = v22 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v26 = *(_OWORD *)v24;
          *(v23 - 1) = *((_OWORD *)v24 - 1);
          *v23 = v26;
          v23 -= 2;
          v24 -= 32;
          v25 -= 4;
        }
        while (v25);
        v19 -= v22 & 0x3FFFFFFFFFFFFFFCLL;
        v11 -= 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
        if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_35:
          do
          {
            v27 = (re2::Prefilter *)*((_QWORD *)v11 - 1);
            v11 -= 8;
            *--v19 = v27;
          }
          while (v11 != v13);
          v13 = (char *)*((_QWORD *)this + 9);
        }
      }
      *((_QWORD *)this + 9) = v19;
      *((_QWORD *)this + 10) = v12;
      *((_QWORD *)this + 11) = v20;
      if (v13)
        operator delete(v13);
    }
    else
    {
      *(_QWORD *)v11 = v8;
      v12 = v11 + 8;
    }
    *((_QWORD *)this + 10) = v12;
  }
}

void sub_1C376D7E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  LogMessage::~LogMessage(&a9);
  _Unwind_Resume(a1);
}

void sub_1C376D7F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1C3BD4828](v1 + 120);
  _Unwind_Resume(a1);
}

BOOL re2::KeepPart(_BOOL8 this, re2::Prefilter *a2, int a3)
{
  uint64_t v3;
  int v4;
  unint64_t v5;
  re2 ***v6;
  re2 **v7;
  unint64_t v8;
  int v9;
  re2::Prefilter *v10;
  re2 **v11;
  unint64_t v12;
  int v13;
  re2::Prefilter *v14;
  unint64_t v15;
  re2::Prefilter *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::ios_base *v23;
  int v24;
  unint64_t v25;
  re2 **v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _BYTE *v31;
  re2 **v32;
  char *v33;
  size_t v34;
  re2 **v35;
  re2 **v36;
  unint64_t v37;
  re2 **v38;
  uint64_t v39;
  _OWORD *v40;
  re2 **v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47[8];
  __int128 v48;
  __int128 v49;
  int v50;
  uint64_t v51;

  if (this)
  {
    v3 = this;
    v4 = *(_DWORD *)this;
    this = 0;
    switch(v4)
    {
      case 0:
        return this;
      case 2:
        if (*(char *)(v3 + 39) < 0)
          v5 = *(_QWORD *)(v3 + 24);
        else
          v5 = *(unsigned __int8 *)(v3 + 39);
        return v5 >= re2::FLAGS_filtered_re2_min_atom_len;
      case 3:
        v6 = *(re2 ****)(v3 + 8);
        v7 = v6[1];
        if (v7 == *v6)
        {
          v9 = 0;
          v12 = v7 - *v6;
          v11 = v6[1];
        }
        else
        {
          v8 = 0;
          v9 = 0;
          v10 = (re2::Prefilter *)((_DWORD)a2 + 1);
          v7 = *v6;
          do
          {
            v13 = re2::KeepPart(v7[v8], v10, a3);
            v14 = (*v6)[v8];
            if (v13)
            {
              (*v6)[v9++] = v14;
            }
            else if (v14)
            {
              re2::Prefilter::~Prefilter(v14);
              MEMORY[0x1C3BD4858]();
            }
            ++v8;
            v7 = *v6;
            v11 = v6[1];
            v12 = v11 - *v6;
          }
          while (v12 > v8);
        }
        v24 = v9;
        v25 = v9 - v12;
        if (v9 <= v12)
        {
          if (v9 >= v12)
            return v24 > 0;
          v32 = &v7[v9];
        }
        else
        {
          v26 = v6[2];
          if (v25 > v26 - v11)
          {
            v27 = v11 - v7;
            v28 = v27 + v25;
            if ((v27 + v25) >> 61)
              std::vector<re2::RE2 *>::__throw_length_error[abi:ne180100]();
            v29 = (char *)v26 - (char *)v7;
            if (v29 >> 2 > v28)
              v28 = v29 >> 2;
            if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
              v30 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v30 = v28;
            if (v30)
            {
              if (v30 >> 61)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v31 = operator new(8 * v30);
            }
            else
            {
              v31 = 0;
            }
            v33 = &v31[8 * v27];
            v34 = 8 * v25;
            v35 = (re2 **)&v31[8 * v30];
            bzero(v33, v34);
            v36 = (re2 **)&v33[v34];
            if (v11 == v7)
              goto LABEL_48;
            v37 = (char *)v11 - (char *)v7 - 8;
            if (v37 >= 0x58)
            {
              if ((unint64_t)((char *)v7 - v31) >= 0x20)
              {
                v39 = (v37 >> 3) + 1;
                v38 = &v11[-(v39 & 0x3FFFFFFFFFFFFFFCLL)];
                v40 = &v31[8 * v27 - 16];
                v41 = v11 - 2;
                v42 = v39 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v43 = *(_OWORD *)v41;
                  *(v40 - 1) = *((_OWORD *)v41 - 1);
                  *v40 = v43;
                  v40 -= 2;
                  v41 -= 4;
                  v42 -= 4;
                }
                while (v42);
                v33 -= 8 * (v39 & 0x3FFFFFFFFFFFFFFCLL);
                if (v39 == (v39 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_48;
              }
              else
              {
                v38 = v11;
              }
            }
            else
            {
              v38 = v11;
            }
            do
            {
              v44 = (uint64_t)*--v38;
              *((_QWORD *)v33 - 1) = v44;
              v33 -= 8;
            }
            while (v38 != v7);
            v7 = *v6;
LABEL_48:
            *v6 = (re2 **)v33;
            v6[1] = v36;
            v6[2] = v35;
            if (v7)
              operator delete(v7);
            return v24 > 0;
          }
          bzero(v11, 8 * v25);
          v32 = &v11[v25];
        }
        v6[1] = v32;
        return v24 > 0;
      case 4:
        v15 = 0;
        v16 = (re2::Prefilter *)((_DWORD)a2 + 1);
        while (1)
        {
          v17 = **(_QWORD **)(v3 + 8);
          v18 = (*(_QWORD *)(*(_QWORD *)(v3 + 8) + 8) - v17) >> 3;
          this = v18 <= v15;
          if (v18 <= v15)
            break;
          if ((re2::KeepPart(*(re2 **)(v17 + 8 * v15), v16, a3) & 1) == 0)
            return 0;
          ++v15;
          if ((*(_DWORD *)v3 - 3) >= 2)
          {
            LogMessage::LogMessage((LogMessage *)&v45, "/Library/Caches/com.apple.xbs/Sources/Suggestions/re2/re2/re2_prefilter.h");
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v46, (uint64_t)"Check failed: op_ == AND || op_ == OR", 37);
            LogMessage::Flush((LogMessage *)&v45);
            abort();
          }
        }
        return this;
      default:
        LOBYTE(v45) = 0;
        v19 = MEMORY[0x1E0DE4FE0];
        v20 = MEMORY[0x1E0DE4FE0] + 64;
        v21 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
        v22 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
        v51 = MEMORY[0x1E0DE4FE0] + 64;
        v46 = v21;
        *(uint64_t *)((char *)&v47[-1] + *(_QWORD *)(v21 - 24)) = v22;
        v23 = (std::ios_base *)((char *)&v47[-1] + *(_QWORD *)(v46 - 24));
        std::ios_base::init(v23, v47);
        v23[1].__vftable = 0;
        v23[1].__fmtflags_ = -1;
        v46 = v19 + 24;
        v51 = v20;
        std::streambuf::basic_streambuf();
        v47[0] = MEMORY[0x1E0DE4FB8] + 16;
        v48 = 0u;
        v49 = 0u;
        v50 = 16;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v46, (uint64_t)"Unexpected op in KeepPart: ", 27);
        std::ostream::operator<<();
        LogMessage::~LogMessage(&v45);
        return 0;
    }
  }
  return this;
}

void sub_1C376DBFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1C3BD4828](v1 + 120);
  _Unwind_Resume(a1);
}

void sub_1C376DC24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_1C376DC3C(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  LogMessageFatal::~LogMessageFatal((LogMessageFatal *)va);
}

uint64_t re2::PrefilterTree::CanonicalNode(re2::PrefilterTree *this, re2::Prefilter *a2)
{
  std::string *p_p;
  char *v4;
  char *v5;
  char *v6;
  char v7;
  std::string::size_type size;
  char *v9;
  int v10;
  size_t v11;
  const void *v12;
  size_t v13;
  int v14;
  _BOOL4 v15;
  BOOL v16;
  char **v17;
  int v18;
  std::string::size_type v19;
  char *v20;
  size_t v21;
  int v22;
  BOOL v23;
  uint64_t v24;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  p_p = &__p;
  re2::PrefilterTree::NodeString(a2, &__p);
  v6 = (char *)*((_QWORD *)this + 4);
  v4 = (char *)this + 32;
  v5 = v6;
  v7 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if (v6)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    v9 = v4;
    do
    {
      v10 = v5[55];
      if (v10 >= 0)
        v11 = v5[55];
      else
        v11 = *((_QWORD *)v5 + 5);
      if (v10 >= 0)
        v12 = v5 + 32;
      else
        v12 = (const void *)*((_QWORD *)v5 + 4);
      if (size >= v11)
        v13 = v11;
      else
        v13 = size;
      v14 = memcmp(v12, p_p, v13);
      v15 = v11 < size;
      if (v14)
        v15 = v14 < 0;
      v16 = !v15;
      if (v15)
        v17 = (char **)(v5 + 8);
      else
        v17 = (char **)v5;
      if (v16)
        v9 = v5;
      v5 = *v17;
    }
    while (*v17);
    if (v9 != v4)
    {
      v18 = v9[55];
      v19 = v18 >= 0 ? v9[55] : *((_QWORD *)v9 + 5);
      v20 = v18 >= 0 ? v9 + 32 : (char *)*((_QWORD *)v9 + 4);
      v21 = v19 >= size ? size : v19;
      v22 = memcmp(p_p, v20, v21);
      v23 = size < v19;
      if (v22)
        v23 = v22 < 0;
      if (!v23)
      {
        v24 = *((_QWORD *)v9 + 7);
        if ((v7 & 0x80) == 0)
          return v24;
        goto LABEL_40;
      }
    }
  }
  v24 = 0;
  if (v7 < 0)
LABEL_40:
    operator delete(__p.__r_.__value_.__l.__data_);
  return v24;
}

void re2::PrefilterTree::NodeString(re2::Prefilter *a1@<X1>, std::string *a2@<X8>)
{
  int v5;
  size_t v6;
  std::string::size_type v7;
  std::string *p_dst;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  __int128 v12;
  const std::string::value_type *v13;
  char *v14;
  const std::string::value_type *v15;
  int v16;
  const std::string::value_type *v17;
  std::string::size_type v18;
  uint64_t v19;
  int v20;
  size_t v21;
  std::string::size_type v22;
  std::string *v23;
  uint64_t v24;
  uint64_t v25;
  std::string *v26;
  std::string::size_type size;
  unint64_t v28;
  int v29;
  size_t v30;
  std::string::size_type v31;
  std::string *v32;
  uint64_t v33;
  uint64_t v34;
  std::string *v35;
  std::string::size_type v36;
  std::string __dst;
  char __str[16];
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  int v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v5 = *(_DWORD *)a1;
  v44 = 0;
  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  *(_OWORD *)__str = 0u;
  v39 = 0u;
  snprintf(__str, 0x64uLL, "%d", v5);
  v6 = strlen(__str);
  if (v6 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    p_dst = (std::string *)operator new(v9 + 1);
    __dst.__r_.__value_.__l.__size_ = v7;
    __dst.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v6;
  p_dst = &__dst;
  if (v6)
LABEL_8:
    memcpy(p_dst, __str, v7);
  p_dst->__r_.__value_.__s.__data_[v7] = 0;
  v11 = std::string::append(&__dst, ":");
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  a2->__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (*(_DWORD *)a1 != 2)
  {
    if ((*(_DWORD *)a1 - 3) > 1)
      goto LABEL_59;
    v19 = **((_QWORD **)a1 + 1);
    if (*(_QWORD *)(*((_QWORD *)a1 + 1) + 8) == v19)
      return;
    v20 = *(_DWORD *)(*(_QWORD *)v19 + 40);
    v44 = 0;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    *(_OWORD *)__str = 0u;
    v39 = 0u;
    snprintf(__str, 0x64uLL, "%d", v20);
    v21 = strlen(__str);
    if (v21 > 0x7FFFFFFFFFFFFFF7)
LABEL_60:
      std::string::__throw_length_error[abi:ne180100]();
    v22 = v21;
    if (v21 >= 0x17)
    {
      v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v21 | 7) != 0x17)
        v24 = v21 | 7;
      v25 = v24 + 1;
      v23 = (std::string *)operator new(v24 + 1);
      __dst.__r_.__value_.__l.__size_ = v22;
      __dst.__r_.__value_.__r.__words[2] = v25 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v21;
      v23 = &__dst;
      if (!v21)
      {
LABEL_29:
        v23->__r_.__value_.__s.__data_[v22] = 0;
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v26 = &__dst;
        else
          v26 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
        else
          size = __dst.__r_.__value_.__l.__size_;
        std::string::append(a2, (const std::string::value_type *)v26, size);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        if ((*(_DWORD *)a1 - 3) <= 1)
        {
          v28 = 1;
          do
          {
            if (v28 >= (uint64_t)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 8) - **((_QWORD **)a1 + 1)) >> 3)
              return;
            std::string::push_back(a2, 44);
            if ((*(_DWORD *)a1 - 3) >= 2)
            {
              LogMessage::LogMessage((LogMessage *)__str, "/Library/Caches/com.apple.xbs/Sources/Suggestions/re2/re2/re2_prefilter.h");
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str[8], (uint64_t)"Check failed: op_ == AND || op_ == OR", 37);
              LogMessage::Flush((LogMessage *)__str);
              abort();
            }
            v29 = *(_DWORD *)(*(_QWORD *)(**((_QWORD **)a1 + 1) + 8 * v28) + 40);
            v44 = 0;
            v42 = 0u;
            v43 = 0u;
            v40 = 0u;
            v41 = 0u;
            *(_OWORD *)__str = 0u;
            v39 = 0u;
            snprintf(__str, 0x64uLL, "%d", v29);
            v30 = strlen(__str);
            if (v30 > 0x7FFFFFFFFFFFFFF7)
              goto LABEL_60;
            v31 = v30;
            if (v30 >= 0x17)
            {
              v33 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v30 | 7) != 0x17)
                v33 = v30 | 7;
              v34 = v33 + 1;
              v32 = (std::string *)operator new(v33 + 1);
              __dst.__r_.__value_.__l.__size_ = v31;
              __dst.__r_.__value_.__r.__words[2] = v34 | 0x8000000000000000;
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
            }
            else
            {
              *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v30;
              v32 = &__dst;
              if (!v30)
                goto LABEL_50;
            }
            memcpy(v32, __str, v31);
LABEL_50:
            v32->__r_.__value_.__s.__data_[v31] = 0;
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v35 = &__dst;
            else
              v35 = (std::string *)__dst.__r_.__value_.__r.__words[0];
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v36 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
            else
              v36 = __dst.__r_.__value_.__l.__size_;
            std::string::append(a2, (const std::string::value_type *)v35, v36);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__dst.__r_.__value_.__l.__data_);
            ++v28;
          }
          while ((*(_DWORD *)a1 - 3) < 2);
        }
LABEL_59:
        LogMessage::LogMessage((LogMessage *)__str, "/Library/Caches/com.apple.xbs/Sources/Suggestions/re2/re2/re2_prefilter.h");
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str[8], (uint64_t)"Check failed: op_ == AND || op_ == OR", 37);
        LogMessage::Flush((LogMessage *)__str);
        abort();
      }
    }
    memcpy(v23, __str, v22);
    goto LABEL_29;
  }
  v15 = (const std::string::value_type *)*((_QWORD *)a1 + 2);
  v14 = (char *)a1 + 16;
  v13 = v15;
  v16 = v14[23];
  if (v16 >= 0)
    v17 = v14;
  else
    v17 = v13;
  if (v16 >= 0)
    v18 = v14[23];
  else
    v18 = *((_QWORD *)v14 + 1);
  std::string::append(a2, v17, v18);
}

void sub_1C376E1D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 + 23) < 0)
    operator delete(*(void **)v16);
  _Unwind_Resume(exception_object);
}

void re2::PrefilterTree::PrintPrefilter(re2::PrefilterTree *this, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  std::string *p_p;
  std::string::size_type size;
  std::string __p;
  void *v12;
  uint64_t v13;
  uint64_t v14[8];
  __int128 v15;
  __int128 v16;
  int v17;
  uint64_t v18;

  LOBYTE(v12) = 0;
  v4 = MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v18 = MEMORY[0x1E0DE4FE0] + 64;
  v13 = v6;
  *(uint64_t *)((char *)&v14[-1] + *(_QWORD *)(v6 - 24)) = v7;
  v8 = (std::ios_base *)((char *)&v14[-1] + *(_QWORD *)(v13 - 24));
  std::ios_base::init(v8, v14);
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v13 = v4 + 24;
  v18 = v5;
  std::streambuf::basic_streambuf();
  v14[0] = MEMORY[0x1E0DE4FB8] + 16;
  v15 = 0u;
  v16 = 0u;
  v17 = 16;
  re2::PrefilterTree::DebugNodeString(this, *(re2::Prefilter **)(*((_QWORD *)this + 9) + 8 * a2), &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  LogMessage::~LogMessage(&v12);
}

void sub_1C376E380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  if (a15 < 0)
    operator delete(__p);
  LogMessage::~LogMessage(&a16);
  _Unwind_Resume(a1);
}

void sub_1C376E3AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1C3BD4828](v1 + 120);
  _Unwind_Resume(a1);
}

std::string *re2::PrefilterTree::DebugNodeString@<X0>(re2::PrefilterTree *this@<X0>, re2::Prefilter *a2@<X1>, std::string *a3@<X8>)
{
  char *v5;
  int v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  const std::string::value_type *v11;
  uint64_t v12;
  int v13;
  size_t v14;
  std::string::size_type v15;
  _BYTE *p_dst;
  uint64_t v17;
  uint64_t v18;
  std::string *v19;
  std::string::size_type size;
  std::string *v21;
  std::string::size_type v22;
  unint64_t v23;
  int v24;
  size_t v25;
  std::string::size_type v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  std::string *v30;
  std::string::size_type v31;
  std::string *v32;
  std::string::size_type v33;
  std::string __dst;
  char __str[16];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  if (*(_DWORD *)a2 != 2)
  {
    if (*(_DWORD *)a2 == 3)
      v11 = "AND";
    else
      v11 = "OR";
    std::string::append(a3, v11);
    std::string::append(a3, "(");
    if ((*(_DWORD *)a2 - 3) > 1)
      goto LABEL_70;
    v12 = **((_QWORD **)a2 + 1);
    if (*(_QWORD *)(*((_QWORD *)a2 + 1) + 8) == v12)
      return std::string::append(a3, ")");
    v13 = *(_DWORD *)(*(_QWORD *)v12 + 40);
    v41 = 0;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    *(_OWORD *)__str = 0u;
    v36 = 0u;
    snprintf(__str, 0x64uLL, "%d", v13);
    v14 = strlen(__str);
    if (v14 > 0x7FFFFFFFFFFFFFF7)
LABEL_72:
      std::string::__throw_length_error[abi:ne180100]();
    v15 = v14;
    if (v14 >= 0x17)
    {
      v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v14 | 7) != 0x17)
        v17 = v14 | 7;
      v18 = v17 + 1;
      p_dst = operator new(v17 + 1);
      __dst.__r_.__value_.__l.__size_ = v15;
      __dst.__r_.__value_.__r.__words[2] = v18 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v14;
      p_dst = &__dst;
      if (!v14)
      {
LABEL_22:
        p_dst[v15] = 0;
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v19 = &__dst;
        else
          v19 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
        else
          size = __dst.__r_.__value_.__l.__size_;
        std::string::append(a3, (const std::string::value_type *)v19, size);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        std::string::append(a3, ":");
        if ((*(_DWORD *)a2 - 3) > 1)
        {
LABEL_71:
          LogMessage::LogMessage((LogMessage *)__str, "/Library/Caches/com.apple.xbs/Sources/Suggestions/re2/re2/re2_prefilter.h");
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str[8], (uint64_t)"Check failed: op_ == AND || op_ == OR", 37);
          LogMessage::Flush((LogMessage *)__str);
          abort();
        }
        re2::PrefilterTree::DebugNodeString((uint64_t *)&__dst, this, ***((re2::Prefilter ****)a2 + 1));
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v21 = &__dst;
        else
          v21 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v22 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
        else
          v22 = __dst.__r_.__value_.__l.__size_;
        std::string::append(a3, (const std::string::value_type *)v21, v22);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        if ((*(_DWORD *)a2 - 3) <= 1)
        {
          v23 = 1;
          while (1)
          {
            if (v23 >= (uint64_t)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 8) - **((_QWORD **)a2 + 1)) >> 3)
              return std::string::append(a3, ")");
            std::string::push_back(a3, 44);
            if ((*(_DWORD *)a2 - 3) >= 2)
            {
              LogMessage::LogMessage((LogMessage *)__str, "/Library/Caches/com.apple.xbs/Sources/Suggestions/re2/re2/re2_prefilter.h");
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str[8], (uint64_t)"Check failed: op_ == AND || op_ == OR", 37);
              LogMessage::Flush((LogMessage *)__str);
              abort();
            }
            v24 = *(_DWORD *)(*(_QWORD *)(**((_QWORD **)a2 + 1) + 8 * v23) + 40);
            v41 = 0;
            v39 = 0u;
            v40 = 0u;
            v37 = 0u;
            v38 = 0u;
            *(_OWORD *)__str = 0u;
            v36 = 0u;
            snprintf(__str, 0x64uLL, "%d", v24);
            v25 = strlen(__str);
            if (v25 > 0x7FFFFFFFFFFFFFF7)
              goto LABEL_72;
            v26 = v25;
            if (v25 >= 0x17)
              break;
            *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v25;
            v27 = &__dst;
            if (v25)
              goto LABEL_51;
LABEL_52:
            v27[v26] = 0;
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v30 = &__dst;
            else
              v30 = (std::string *)__dst.__r_.__value_.__r.__words[0];
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v31 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
            else
              v31 = __dst.__r_.__value_.__l.__size_;
            std::string::append(a3, (const std::string::value_type *)v30, v31);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__dst.__r_.__value_.__l.__data_);
            std::string::append(a3, ":");
            if ((*(_DWORD *)a2 - 3) >= 2)
              goto LABEL_71;
            re2::PrefilterTree::DebugNodeString((uint64_t *)&__dst, this, *(re2::Prefilter **)(**((_QWORD **)a2 + 1) + 8 * v23));
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v32 = &__dst;
            else
              v32 = (std::string *)__dst.__r_.__value_.__r.__words[0];
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v33 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
            else
              v33 = __dst.__r_.__value_.__l.__size_;
            std::string::append(a3, (const std::string::value_type *)v32, v33);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__dst.__r_.__value_.__l.__data_);
            ++v23;
            if ((*(_DWORD *)a2 - 3) >= 2)
              goto LABEL_70;
          }
          v28 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v25 | 7) != 0x17)
            v28 = v25 | 7;
          v29 = v28 + 1;
          v27 = operator new(v28 + 1);
          __dst.__r_.__value_.__l.__size_ = v26;
          __dst.__r_.__value_.__r.__words[2] = v29 | 0x8000000000000000;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
LABEL_51:
          memcpy(v27, __str, v26);
          goto LABEL_52;
        }
LABEL_70:
        LogMessage::LogMessage((LogMessage *)__str, "/Library/Caches/com.apple.xbs/Sources/Suggestions/re2/re2/re2_prefilter.h");
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str[8], (uint64_t)"Check failed: op_ == AND || op_ == OR", 37);
        LogMessage::Flush((LogMessage *)__str);
        abort();
      }
    }
    memcpy(p_dst, __str, v15);
    goto LABEL_22;
  }
  v5 = (char *)a2 + 16;
  v6 = *((char *)a2 + 39);
  if (v6 >= 0)
    v7 = (char *)a2 + 16;
  else
    v7 = (const std::string::value_type *)*((_QWORD *)a2 + 2);
  if (v6 >= 0)
    v8 = v5[23];
  else
    v8 = *((_QWORD *)v5 + 1);
  return std::string::append(a3, v7, v8);
}

void sub_1C376E8A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 + 23) < 0)
    operator delete(*(void **)v16);
  _Unwind_Resume(exception_object);
}

void fastIncrementBy(unsigned int *a1, int a2, void *a3, void *a4)
{
  id v7;
  id v8;
  unsigned int v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(_QWORD *);
  void *v16;
  id v17;
  id v18;
  id v19;
  unsigned int *v20;

  v7 = a3;
  v8 = a4;
  if (a2)
  {
    do
      v9 = __ldaxr(a1);
    while (__stlxr(v9 + a2, a1));
    if (!v9)
    {
      v13 = MEMORY[0x1E0C809B0];
      v14 = 3221225472;
      v15 = __fastIncrementBy_block_invoke;
      v16 = &unk_1E7DB5990;
      v20 = a1;
      v17 = 0;
      v18 = v7;
      v19 = v8;
      v10 = (void *)MEMORY[0x1C3BD5158](&v13);
      v11 = (void *)MEMORY[0x1E0D81598];
      dispatch_get_global_queue(-32768, 0);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "runAsyncOnQueue:afterDelaySeconds:block:", v12, v10, 1.0, v13, v14, v15, v16);

    }
  }

}

uint64_t __fastIncrementBy_block_invoke(_QWORD *a1)
{
  unsigned int *v1;
  signed int v2;

  v1 = (unsigned int *)a1[7];
  do
    v2 = __ldaxr(v1);
  while (__stlxr(0, v1));
  return +[SGAggregateLogging incrementKeyWithDomain:subdomain:suffix:by:](SGAggregateLogging, "incrementKeyWithDomain:subdomain:suffix:by:", a1[4], a1[5], a1[6], v2);
}

uint64_t SGEntityTypeToContactDetailType(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v6;
  void *v7;

  if ((SGEntityTypeIsContactDetail() & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "SGContactDetailType SGEntityTypeToContactDetailType(SGEntityType)");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v7, CFSTR("SGContactDetail.m"), 86, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("SGEntityTypeIsContactDetail(entityType)"));

  }
  v2 = a1 - 6;
  if ((unint64_t)(a1 - 6) < 0x12 && ((0x2E23Fu >> v2) & 1) != 0)
    return qword_1C3858C38[v2];
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "SGContactDetailType SGEntityTypeToContactDetailType(SGEntityType)");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("SGContactDetail.m"), 113, CFSTR("This should never happen. The param assert should hit if this is the case."));

  return -1;
}

__CFString *SGContactDetailTypeDescription(unint64_t a1)
{
  void *v3;
  void *v4;

  if (a1 < 7)
    return off_1E7DAFB18[a1];
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString * _Nonnull SGContactDetailTypeDescription(SGContactDetailType)");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("SGContactDetail.m"), 40, CFSTR("Unknown contact detail type: %lu"), a1);

  return 0;
}

uint64_t SGContactDetailTypeToEntityTypes(unint64_t a1)
{
  if (a1 > 6)
    return 0;
  else
    return qword_1C3858C00[a1];
}

void sub_1C3774FF4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C37752A8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C3775740(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C3775A40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C3775E58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  SGRecordMeasurementState((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1C3776220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C3776374(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  _Unwind_Resume(exception_object);
}

void sub_1C37768E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C37773BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__22084(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__22085(uint64_t a1)
{

}

void sub_1C3779F4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C377ABFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C377ACE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__22329(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__22330(uint64_t a1)
{

}

void sub_1C377C0A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int16 a9)
{
  void *v9;
  void *v10;

  if (a2 == 1)
  {
    objc_msgSend(objc_begin_catch(exception_object), "userInfo");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("sqliteCode"));
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "isEqual:", &unk_1E7E0C758);

    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_1C377C8C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C377CA88(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C377CBBC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C377CE64(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C377CF90(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C377D0D0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C377D1C0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C377D2BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C377D660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C377D900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C377DC54(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_1C377F3FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C377FA64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1C377FE94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C37802B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C37804B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C3780970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C3780AF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C3780E58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C37817BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C3781938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C3781C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C3781D64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__22479(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__22480(uint64_t a1)
{

}

void sub_1C37849C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C3786784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C378947C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C37895F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _moveOrRemoveDbFile(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  int v6;
  id v7;
  NSObject *v8;
  NSObject *v9;
  void *v10;
  id v11;
  uint8_t buf[4];
  id v13;
  __int16 v14;
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = 0;
  v6 = objc_msgSend(v5, "moveItemAtPath:toPath:error:", v3, v4, &v11);
  v7 = v11;

  sgLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = v8;
  if (v6)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v13 = v4;
      _os_log_impl(&dword_1C3607000, v9, OS_LOG_TYPE_INFO, "Corrupt database file moved to \"%@\".", buf, 0xCu);
    }
  }
  else
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      objc_msgSend(v7, "localizedDescription");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412546;
      v13 = v4;
      v14 = 2112;
      v15 = v10;
      _os_log_error_impl(&dword_1C3607000, v9, OS_LOG_TYPE_ERROR, "Unable to move corrupt database file to \"%@\": %@", buf, 0x16u);

    }
    objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v9 = objc_claimAutoreleasedReturnValue();
    -[NSObject removeItemAtPath:error:](v9, "removeItemAtPath:error:", v3, 0);
  }

}

void SGMurmurhashString(void *a1, uint64_t a2, uint64_t *a3)
{
  const char *CStringPtr;
  const __CFData *v5;
  uint64_t v6;
  __CFString *theString;

  theString = a1;
  CStringPtr = CFStringGetCStringPtr(theString, 0x600u);
  -[__CFString length](theString, "length");
  if (!CStringPtr)
  {
    v5 = objc_retainAutorelease(CFStringCreateExternalRepresentation((CFAllocatorRef)*MEMORY[0x1E0C9AE10], theString, 0x8000100u, 0));
    -[__CFData bytes](v5, "bytes");
    -[__CFData length](v5, "length");

  }
  *a3 = _PASMurmur3_x86_128();
  a3[1] = v6;

}

void sub_1C378A734(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C378D76C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C378D864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C378D95C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C378DA54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C378EFB0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Unwind_Resume(a1);
}

void sub_1C37909F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C3790B0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C3790C18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C3790D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C3790E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C3790F54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C37910C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C3791260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C37933F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C3793518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C3794044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__23084(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__23085(uint64_t a1)
{

}

void sub_1C3797A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C3797B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C3798FA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  char a67;
  char a71;

  _Block_object_dispose(&a59, 8);
  _Block_object_dispose(&a63, 8);
  _Block_object_dispose(&a67, 8);
  _Block_object_dispose(&a71, 8);
  _Block_object_dispose(&STACK[0x210], 8);
  _Unwind_Resume(a1);
}

void sub_1C3799308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  SGRecordMeasurementState((uint64_t *)va);
  _Unwind_Resume(a1);
}

void addAddressResultsToComponents(uint64_t a1, void *a2)
{
  uint64_t SubResults;
  const __CFArray *v3;
  id v4;
  uint64_t v5;
  void *v6;
  CFIndex Count;
  CFIndex v8;
  CFIndex i;
  const void *ValueAtIndex;
  void *v11;
  void *v12;
  uint64_t Value;
  const void *v14;
  CFTypeID TypeID;
  id v16;

  v16 = a2;
  SubResults = DDResultGetSubResults();
  v3 = (const __CFArray *)SubResults;
  if (addAddressResultsToComponents_subTypesToKeysDictionary)
  {
    if (!SubResults)
      goto LABEL_12;
  }
  else
  {
    v4 = objc_alloc(MEMORY[0x1E0C99D80]);
    v5 = objc_msgSend(v4, "initWithObjectsAndKeys:", CFSTR("Contact"), *MEMORY[0x1E0CB3280], CFSTR("ContactName"), *MEMORY[0x1E0CB3280], CFSTR("AddressBookContactName"), *MEMORY[0x1E0CB3278], CFSTR("JobTitle"), *MEMORY[0x1E0CB3288], CFSTR("CompanyName"), *MEMORY[0x1E0CB3298], CFSTR("Street"), *MEMORY[0x1E0CB3260], CFSTR("City"), *MEMORY[0x1E0CB3290], CFSTR("State"), *MEMORY[0x1E0CB32A0], CFSTR("ZipCode"),
           *MEMORY[0x1E0CB3268],
           CFSTR("Country"),
           *MEMORY[0x1E0CB3258],
           CFSTR("AirlineName"),
           *MEMORY[0x1E0CB3270],
           CFSTR("FlightNumber"),
           0);
    v6 = (void *)addAddressResultsToComponents_subTypesToKeysDictionary;
    addAddressResultsToComponents_subTypesToKeysDictionary = v5;

    if (!v3)
      goto LABEL_12;
  }
  Count = CFArrayGetCount(v3);
  if (Count >= 1)
  {
    v8 = Count;
    for (i = 0; i != v8; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v3, i);
      DDResultGetType();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend((id)addAddressResultsToComponents_subTypesToKeysDictionary, "objectForKey:", v11);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      if (v12)
      {
        Value = DDResultGetValue();
        if (Value)
        {
          v14 = (const void *)Value;
          TypeID = CFStringGetTypeID();
          if (TypeID == CFGetTypeID(v14))
            objc_msgSend(v16, "setObject:forKey:", v14, v12);
        }
      }
      addAddressResultsToComponents(ValueAtIndex, v16);

    }
  }
LABEL_12:

}

uint64_t SGDCKLocationReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  BOOL v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (2)
    {
      if (!*(_BYTE *)(a2 + *v5))
      {
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v3;
          v12 = *(_QWORD *)(a2 + v11);
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
            break;
          v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
          *(_QWORD *)(a2 + v11) = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_12;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = *(unsigned __int8 *)(a2 + *v5);
            goto LABEL_14;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
        v16 = *(unsigned __int8 *)(a2 + *v5);
        if (*(_BYTE *)(a2 + *v5))
          v10 = 0;
LABEL_14:
        if (v16)
          v17 = 1;
        else
          v17 = (v10 & 7) == 4;
        if (!v17)
        {
          switch((v10 >> 3))
          {
            case 1u:
              v18 = 0;
              v19 = 0;
              v20 = 0;
              *(_BYTE *)(a1 + 76) |= 0x10u;
              break;
            case 2u:
              PBReaderReadString();
              v26 = objc_claimAutoreleasedReturnValue();
              v27 = 64;
              goto LABEL_44;
            case 3u:
              PBReaderReadString();
              v26 = objc_claimAutoreleasedReturnValue();
              v27 = 40;
              goto LABEL_44;
            case 4u:
              *(_BYTE *)(a1 + 76) |= 2u;
              v28 = *v3;
              v29 = *(_QWORD *)(a2 + v28);
              if (v29 <= 0xFFFFFFFFFFFFFFF7 && v29 + 8 <= *(_QWORD *)(a2 + *v4))
              {
                v30 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v29);
                *(_QWORD *)(a2 + v28) = v29 + 8;
              }
              else
              {
                *(_BYTE *)(a2 + *v5) = 1;
                v30 = 0;
              }
              v38 = 16;
              goto LABEL_57;
            case 5u:
              *(_BYTE *)(a1 + 76) |= 4u;
              v31 = *v3;
              v32 = *(_QWORD *)(a2 + v31);
              if (v32 <= 0xFFFFFFFFFFFFFFF7 && v32 + 8 <= *(_QWORD *)(a2 + *v4))
              {
                v30 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v32);
                *(_QWORD *)(a2 + v31) = v32 + 8;
              }
              else
              {
                *(_BYTE *)(a2 + *v5) = 1;
                v30 = 0;
              }
              v38 = 24;
              goto LABEL_57;
            case 6u:
              *(_BYTE *)(a1 + 76) |= 1u;
              v33 = *v3;
              v34 = *(_QWORD *)(a2 + v33);
              if (v34 <= 0xFFFFFFFFFFFFFFF7 && v34 + 8 <= *(_QWORD *)(a2 + *v4))
              {
                v30 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v34);
                *(_QWORD *)(a2 + v33) = v34 + 8;
              }
              else
              {
                *(_BYTE *)(a2 + *v5) = 1;
                v30 = 0;
              }
              v38 = 8;
              goto LABEL_57;
            case 7u:
              *(_BYTE *)(a1 + 76) |= 8u;
              v35 = *v3;
              v36 = *(_QWORD *)(a2 + v35);
              if (v36 <= 0xFFFFFFFFFFFFFFF7 && v36 + 8 <= *(_QWORD *)(a2 + *v4))
              {
                v30 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v36);
                *(_QWORD *)(a2 + v35) = v36 + 8;
              }
              else
              {
                *(_BYTE *)(a2 + *v5) = 1;
                v30 = 0;
              }
              v38 = 32;
LABEL_57:
              *(_QWORD *)(a1 + v38) = v30;
              goto LABEL_58;
            case 8u:
              PBReaderReadData();
              v26 = objc_claimAutoreleasedReturnValue();
              v27 = 56;
              goto LABEL_44;
            case 9u:
              PBReaderReadString();
              v26 = objc_claimAutoreleasedReturnValue();
              v27 = 48;
LABEL_44:
              v37 = *(void **)(a1 + v27);
              *(_QWORD *)(a1 + v27) = v26;

              goto LABEL_58;
            default:
              result = PBReaderSkipValueWithTag();
              if (!(_DWORD)result)
                return result;
LABEL_58:
              if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
                return *(_BYTE *)(a2 + *v5) == 0;
              continue;
          }
          while (1)
          {
            v21 = *v3;
            v22 = *(_QWORD *)(a2 + v21);
            v23 = v22 + 1;
            if (v22 == -1 || v23 > *(_QWORD *)(a2 + *v4))
              break;
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
            *(_QWORD *)(a2 + v21) = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0)
              goto LABEL_46;
            v18 += 7;
            v15 = v19++ >= 9;
            if (v15)
            {
              LODWORD(v20) = 0;
              goto LABEL_48;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_46:
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v20) = 0;
LABEL_48:
          *(_DWORD *)(a1 + 72) = v20;
          goto LABEL_58;
        }
      }
      break;
    }
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL initGraph(_QWORD *a1)
{
  void *v2;

  *a1 = 0x400000000;
  v2 = malloc_type_malloc(0x60uLL, 0x1080040CC6EE3FDuLL);
  a1[1] = v2;
  return v2 == 0;
}

BOOL newVertex(int *a1, uint64_t a2)
{
  char *v3;
  int v5;
  unsigned int v6;
  char *v7;
  void *v8;

  if (!a1 || (v3 = (char *)*((_QWORD *)a1 + 1)) == 0)
    __assert_rtn("newVertex", "mincut.m", 59, "g && g->vertices");
  v5 = *a1;
  if (*a1 != a1[1])
    goto LABEL_6;
  v6 = 2 * v5;
  a1[1] = v6;
  v3 = (char *)safeRealloc(v3, 24 * v6);
  *((_QWORD *)a1 + 1) = v3;
  if (v3)
  {
    v5 = *a1;
LABEL_6:
    *a1 = v5 + 1;
    v7 = &v3[24 * v5];
    *(_QWORD *)v7 = a2;
    *((_QWORD *)v7 + 2) = 0x400000000;
    v8 = malloc_type_malloc(0x20uLL, 0x2004093837F09uLL);
    *((_QWORD *)v7 + 1) = v8;
    return v8 == 0;
  }
  return 1;
}

void *safeRealloc(void *a1, size_t a2)
{
  void *v3;

  v3 = malloc_type_realloc(a1, a2, 0xE7C72B35uLL);
  if (!v3)
    free(a1);
  return v3;
}

uint64_t addEdge(uint64_t a1, uint64_t a2, double a3)
{
  _QWORD *v6;
  void *v7;
  uint64_t result;
  const char *v9;

  if (!a1)
  {
    v9 = "u";
    goto LABEL_14;
  }
  if (!a2)
  {
    v9 = "v";
    goto LABEL_14;
  }
  if (a3 <= 0.0)
  {
    v9 = "capacity > 0.0";
LABEL_14:
    __assert_rtn("newEdge", "mincut.m", 76, v9);
  }
  v6 = malloc_type_malloc(0x18uLL, 0x102004062D53EE8uLL);
  if (v6)
  {
    v7 = v6;
    *v6 = a1;
    v6[1] = a2;
    *((double *)v6 + 2) = a3;
    if (!addEdgeToIncidenceList(a1, (uint64_t)v6))
    {
      result = addEdgeToIncidenceList(a2, (uint64_t)v7);
      if (!(_DWORD)result)
        return result;
      --*(_DWORD *)(a1 + 16);
    }
    free(v7);
  }
  return 1;
}

uint64_t addEdgeToIncidenceList(uint64_t a1, uint64_t a2)
{
  int v4;
  _QWORD *v5;
  uint64_t v6;

  v4 = *(_DWORD *)(a1 + 16);
  if (v4 == *(_DWORD *)(a1 + 20))
  {
    *(_DWORD *)(a1 + 20) = 2 * v4;
    v5 = safeRealloc(*(void **)(a1 + 8), 8 * (2 * v4));
    *(_QWORD *)(a1 + 8) = v5;
    if (!v5)
      return 1;
    v4 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v5 = *(_QWORD **)(a1 + 8);
  }
  v6 = 0;
  *(_DWORD *)(a1 + 16) = v4 + 1;
  v5[v4] = a2;
  return v6;
}

void freeGraph(unsigned int *a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unint64_t v8;
  _QWORD *v9;

  if (*a1)
  {
    v2 = 0;
    do
    {
      v3 = *((_QWORD *)a1 + 1);
      v4 = v3 + 24 * v2;
      v7 = *(_DWORD *)(v4 + 16);
      v6 = (unsigned int *)(v4 + 16);
      v5 = v7;
      if (v7)
      {
        v8 = 0;
        do
        {
          v9 = *(_QWORD **)(*(_QWORD *)(v3 + 24 * v2 + 8) + 8 * v8);
          if (*v9)
          {
            *v9 = 0;
          }
          else
          {
            free(v9);
            v5 = *v6;
          }
          ++v8;
        }
        while (v8 < v5);
      }
      free(*(void **)(v3 + 24 * v2++ + 8));
    }
    while (v2 < *a1);
  }
  free(*((void **)a1 + 1));
  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
}

size_t printDot(unsigned int *a1, FILE *__stream)
{
  unint64_t v4;
  unint64_t i;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  fwrite("digraph g {\n", 0xCuLL, 1uLL, __stream);
  v4 = *a1;
  if ((_DWORD)v4)
  {
    for (i = 0; i < v4; ++i)
    {
      v6 = *((_QWORD *)a1 + 1);
      v7 = v6 + 24 * i;
      v8 = *(unsigned int *)(v7 + 16);
      if (*(_DWORD *)(v7 + 16))
      {
        v9 = 0;
        v10 = (_QWORD *)(v6 + 24 * i + 8);
        do
        {
          v11 = *(_QWORD *)(*v10 + 8 * v9);
          if (*(_QWORD *)v11 == v7)
          {
            fprintf(__stream, "    V%u -> V%u [label=\"%0.2f\"];\n",
              -1431655765 * ((v7 - *((_QWORD *)a1 + 1)) >> 3),
              -1431655765 * ((uint64_t)(*(_QWORD *)(v11 + 8) - *((_QWORD *)a1 + 1)) >> 3),
              *(double *)(v11 + 16));
            v8 = *(unsigned int *)(v7 + 16);
          }
          ++v9;
        }
        while (v9 < v8);
        v4 = *a1;
      }
    }
  }
  return fwrite("}\n", 2uLL, 1uLL, __stream);
}

void *mincut(unsigned int *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v3;
  unsigned int *v7;
  unsigned int *v8;
  void *v9;
  void *v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  unint64_t v19;
  signed int v20;
  uint64_t v21;
  signed int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  unint64_t v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double **v41;
  uint64_t v42;
  double *v43;
  NSObject *v44;
  size_t v45;
  void *v46;
  _DWORD *v47;
  signed int v48;
  int v49;
  signed int v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  unint64_t v59;
  __int16 v61[8];

  v3 = *a1;
  if (!(_DWORD)v3)
    goto LABEL_60;
  v7 = (unsigned int *)malloc_type_malloc(4 * v3, 0x100004052888210uLL);
  if (!v7)
    goto LABEL_60;
  v8 = v7;
  v9 = malloc_type_malloc(8 * *a1, 0x100004000313F17uLL);
  if (!v9)
  {
    v10 = v8;
LABEL_59:
    free(v10);
    goto LABEL_60;
  }
  v10 = v9;
  v11 = malloc_type_malloc(4 * *a1, 0x100004052888210uLL);
  if (!v11)
  {
    free(v8);
    goto LABEL_59;
  }
  if (!*a1)
    goto LABEL_35;
  v12 = v11;
  v13 = a2;
  v14 = a3;
  v15 = *((_QWORD *)a1 + 1);
  v16 = v15 + 24 * a3;
  v17 = 10000000;
  v18 = 0.0;
  while (2)
  {
    v19 = 0;
    do
      v8[v19++] = -1;
    while (v19 < *a1);
    v20 = 0;
    v8[v13] = -2;
    *((_QWORD *)v10 + v13) = 0x7FF0000000000000;
    *v12 = v13;
    v21 = *a1;
    v22 = 1;
    v23 = 1;
    while (1)
    {
      v24 = v12[v20];
      --v23;
      v25 = v15 + 24 * v24;
      v28 = *(_DWORD *)(v25 + 16);
      v26 = (unsigned int *)(v25 + 16);
      v27 = v28;
      if (v28)
        break;
      v31 = v21;
LABEL_22:
      v20 = (v20 + 1) % v21;
      v21 = v31;
      if (v23 < 1)
        goto LABEL_39;
    }
    v29 = 0;
    v30 = *(_QWORD *)(v15 + 24 * v24 + 8);
    v31 = v21;
    while (1)
    {
      v32 = *(_QWORD *)(v30 + 8 * v29);
      if (v15 + 24 * v24 != *(_QWORD *)v32)
        goto LABEL_19;
      v33 = *(double *)(v32 + 16);
      if (v33 == 0.0)
        goto LABEL_19;
      v34 = *(_QWORD *)(v32 + 8);
      v35 = 0xAAAAAAAAAAAAAAABLL * ((v34 - v15) >> 3);
      if (v8[v35] != -1)
        goto LABEL_19;
      v8[-1431655765 * ((v34 - v15) >> 3)] = v24;
      if (*((double *)v10 + v24) < v33)
        v33 = *((double *)v10 + v24);
      *((double *)v10 - 1431655765 * ((v34 - v15) >> 3)) = v33;
      if (v34 == v16)
        break;
      v12[v22] = v35;
      v31 = *a1;
      v22 = (v22 + 1) % v31;
      ++v23;
      v27 = *v26;
LABEL_19:
      if (++v29 >= v27)
        goto LABEL_22;
    }
    v36 = *((double *)v10 + v14);
    if (v36 != 0.0)
    {
      if (--v17)
      {
        v37 = v14;
        while (v37 != v13)
        {
          v38 = v37;
          v37 = v8[v37];
          v39 = v15 + 24 * v37;
          v40 = *(unsigned int *)(v39 + 16);
          if ((_DWORD)v40)
          {
            v41 = *(double ***)(v15 + 24 * v37 + 8);
            v42 = v15 + 24 * v38;
            do
            {
              v43 = *v41;
              if (*(_QWORD *)*v41 == v39 && *((_QWORD *)v43 + 1) == v42)
                v43[2] = v43[2] - v36;
              ++v41;
              --v40;
            }
            while (v40);
          }
        }
        v18 = v18 + v36;
        if (!*a1)
LABEL_35:
          __assert_rtn("findAugmentingPathWithPreallocatedInternalState", "mincut.m", 147, "g->count > 0");
        continue;
      }
      sgLogHandle();
      v44 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v44, OS_LOG_TYPE_FAULT))
      {
        v61[0] = 0;
        _os_log_fault_impl(&dword_1C3607000, v44, OS_LOG_TYPE_FAULT, "out of iterations", (uint8_t *)v61, 2u);
      }

      if (_PASEvaluateLogFaultAndProbCrashCriteria())
        abort();
    }
    break;
  }
LABEL_39:
  free(v8);
  free(v10);
  free(v12);
  if (v18 <= 0.0)
LABEL_60:
    __assert_rtn("mincut", "mincut.m", 273, "maxflow > 0");
  v45 = *a1;
  if (!(_DWORD)v45)
    return 0;
  v46 = malloc_type_calloc(v45, 1uLL, 0x100004077774924uLL);
  if (!v46)
    return v46;
  v47 = malloc_type_malloc(4 * *a1, 0x100004052888210uLL);
  if (!v47)
  {
    free(v46);
    return 0;
  }
  v48 = 0;
  *v47 = v14;
  *((_BYTE *)v46 + v14) = 1;
  v49 = 1;
  v50 = 1;
  do
  {
    v51 = v47[v48];
    v52 = *a1;
    --v49;
    v53 = *((_QWORD *)a1 + 1);
    v54 = v53 + 24 * v51;
    v55 = *(unsigned int *)(v54 + 16);
    if (*(_DWORD *)(v54 + 16))
    {
      v56 = 0;
      v57 = (_QWORD *)(v53 + 24 * v51 + 8);
      do
      {
        v58 = *(_QWORD *)(*v57 + 8 * v56);
        if (*(_QWORD *)(v58 + 8) == v54 && *(double *)(v58 + 16) > 0.0)
        {
          v59 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)v58 - *((_QWORD *)a1 + 1)) >> 3);
          if (!*((_BYTE *)v46 + v59))
          {
            v47[v50] = v59;
            v50 = (v50 + 1) % *a1;
            ++v49;
            *((_BYTE *)v46 + v59) = 1;
            v55 = *(unsigned int *)(v54 + 16);
          }
        }
        ++v56;
      }
      while (v56 < v55);
    }
    v48 = (v48 + 1) % v52;
  }
  while (v49 >= 1);
  free(v47);
  return v46;
}

void sub_1C37A3C88(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_1C37A3DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__24308(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__24309(uint64_t a1)
{

}

id SGCleavePhoneNumberAndExtension(void *a1)
{
  id v1;
  id v2;
  uint64_t v3;
  __CFString *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v9;
  void *v10;

  v1 = a1;
  if (!v1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_PASTuple2<NSString *,NSString *> *SGCleavePhoneNumberAndExtension(NSString *__strong)");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "handleFailureInFunction:file:lineNumber:description:", v10, CFSTR("SGDataNormalization.m"), 113, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("phoneNumber"));

  }
  v2 = v1;
  v3 = objc_msgSend(v2, "rangeOfString:options:", CFSTR(";"), 2);
  if (v3 == 0x7FFFFFFFFFFFFFFFLL)
  {
    v4 = &stru_1E7DB83A8;
    v5 = v2;
  }
  else
  {
    v6 = v3;
    objc_msgSend(v2, "substringFromIndex:", v3);
    v4 = (__CFString *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "substringToIndex:", v6);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

  }
  v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D81638]), "initWithFirst:second:", v5, v4);

  return v7;
}

uint64_t SGPhoneNumberMatchInSet(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t j;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  void *v34;
  void *v35;
  void *v36;
  id v37;
  void *v38;
  void *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _BYTE v48[128];
  _BYTE v49[128];
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (v6)
  {
    v8 = v6;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "BOOL SGPhoneNumberMatchInSet(NSMutableDictionary<NSString *,NSString<SGNormalizedPhoneNumber> *> *__strong, NSString *__strong, NSArray<NSString<SGNormalizedPhoneNumber> *> *__strong)");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v34, "handleFailureInFunction:file:lineNumber:description:", v35, CFSTR("SGDataNormalization.m"), 142, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("needle"));

    v8 = 0;
  }
  SGCleavePhoneNumberAndExtension(v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "first");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  SGNormalizePhoneNumberCached();
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v9, "second");
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  if (v11)
  {
    if ((objc_msgSend(v7, "containsObject:", v11) & 1) != 0)
    {
      v12 = 1;
    }
    else
    {
      v36 = v9;
      v37 = v7;
      v38 = v6;
      v46 = 0u;
      v47 = 0u;
      v44 = 0u;
      v45 = 0u;
      v13 = v7;
      v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v44, v49, 16);
      if (v14)
      {
        v15 = v14;
        v16 = *(_QWORD *)v45;
        while (2)
        {
          for (i = 0; i != v15; ++i)
          {
            if (*(_QWORD *)v45 != v16)
              objc_enumerationMutation(v13);
            v18 = *(void **)(*((_QWORD *)&v44 + 1) + 8 * i);
            v19 = (void *)MEMORY[0x1C3BD4F6C]();
            SGCleavePhoneNumberAndExtension(v18);
            v20 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v20, "first");
            v21 = (void *)objc_claimAutoreleasedReturnValue();
            SGNormalizePhoneNumberCached();
            v22 = (void *)objc_claimAutoreleasedReturnValue();

            objc_msgSend(v20, "second");
            v23 = (void *)objc_claimAutoreleasedReturnValue();
            if (objc_msgSend(v23, "length")
              && objc_msgSend(v22, "isEqualToString:", v11)
              && (!objc_msgSend(v39, "length") || (objc_msgSend(v39, "isEqualToString:", v23) & 1) != 0))
            {

              objc_autoreleasePoolPop(v19);
              v12 = 1;
              v24 = v13;
              v6 = v38;
              goto LABEL_34;
            }

            objc_autoreleasePoolPop(v19);
          }
          v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v44, v49, 16);
          if (v15)
            continue;
          break;
        }
      }

      v6 = v38;
      digitsOnly(v38);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      if ((unint64_t)objc_msgSend(v24, "length") < 5)
      {
        v12 = 0;
      }
      else
      {
        v42 = 0u;
        v43 = 0u;
        v40 = 0u;
        v41 = 0u;
        v25 = v13;
        v12 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v40, v48, 16);
        if (v12)
        {
          v26 = *(_QWORD *)v41;
          while (2)
          {
            for (j = 0; j != v12; ++j)
            {
              if (*(_QWORD *)v41 != v26)
                objc_enumerationMutation(v25);
              v28 = *(void **)(*((_QWORD *)&v40 + 1) + 8 * j);
              v29 = (void *)MEMORY[0x1C3BD4F6C]();
              digitsOnly(v28);
              v30 = (void *)objc_claimAutoreleasedReturnValue();
              if ((unint64_t)objc_msgSend(v30, "length") >= 5)
              {
                objc_msgSend(v24, "rangeOfString:", v30);
                if (v31 || (objc_msgSend(v30, "rangeOfString:", v24), v32))
                {

                  objc_autoreleasePoolPop(v29);
                  v12 = 1;
                  goto LABEL_33;
                }
              }

              objc_autoreleasePoolPop(v29);
            }
            v12 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v40, v48, 16);
            if (v12)
              continue;
            break;
          }
        }
LABEL_33:

      }
LABEL_34:
      v9 = v36;
      v7 = v37;

    }
  }
  else
  {
    v12 = 0;
  }

  return v12;
}

id digitsOnly(void *a1)
{
  id v1;
  _BYTE *v2;
  __CFString *v3;
  void *v4;
  _BYTE *v5;
  CFIndex Length;
  const UniChar *CharactersPtr;
  const char *CStringPtr;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  CFIndex v13;
  UniChar v14;
  int64_t v15;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  CFIndex v20;
  void *v21;
  _OWORD v23[8];
  CFStringRef theString;
  const UniChar *v25;
  const char *v26;
  uint64_t v27;
  CFIndex v28;
  int64_t v29;
  int64_t v30;
  CFRange v31;

  v1 = a1;
  v2 = malloc_type_malloc(objc_msgSend(v1, "length") + 1, 0xB1DC1DF8uLL);
  v3 = (__CFString *)v1;
  objc_opt_self();
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  v5 = v2;
  if (v4)
  {
    memset(v23, 0, sizeof(v23));
    Length = CFStringGetLength(v3);
    theString = v3;
    v27 = 0;
    v28 = Length;
    CharactersPtr = CFStringGetCharactersPtr(v3);
    CStringPtr = 0;
    v25 = CharactersPtr;
    if (!CharactersPtr)
      CStringPtr = CFStringGetCStringPtr(v3, 0x600u);
    v29 = 0;
    v30 = 0;
    v5 = v2;
    v26 = CStringPtr;
    if (Length >= 1)
    {
      v9 = 0;
      v10 = 0;
      v11 = 64;
      v5 = v2;
      do
      {
        if ((unint64_t)v10 >= 4)
          v12 = 4;
        else
          v12 = v10;
        v13 = v28;
        if (v28 > v10)
        {
          if (v25)
          {
            v14 = v25[v10 + v27];
          }
          else if (v26)
          {
            v14 = v26[v27 + v10];
          }
          else
          {
            v15 = v29;
            if (v30 <= v10 || v29 > v10)
            {
              v17 = v12 + v9;
              v18 = v11 - v12;
              v19 = v10 - v12;
              v20 = v19 + 64;
              if (v19 + 64 >= v28)
                v20 = v28;
              v29 = v19;
              v30 = v20;
              if (v28 >= v18)
                v13 = v18;
              v31.length = v13 + v17;
              v31.location = v19 + v27;
              CFStringGetCharacters(theString, v31, (UniChar *)v23);
              v15 = v29;
            }
            v14 = *((_WORD *)v23 + v10 - v15);
          }
          if (v14 - 48 <= 9)
            *v5++ = v14;
        }
        ++v10;
        --v9;
        ++v11;
      }
      while (Length != v10);
    }
  }

  *v5 = 0;
  v21 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithUTF8String:", v2);
  free(v2);

  return v21;
}

uint64_t SGIsPhoneNumberWithRangeBlocked(void *a1, uint64_t a2, unint64_t a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  __CFString *v11;
  void *v12;
  CFIndex Length;
  const UniChar *CharactersPtr;
  const char *CStringPtr;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  CFIndex v21;
  UniChar v22;
  int64_t v23;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  CFIndex v28;
  void *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  CFStringRef theString;
  const UniChar *v40;
  const char *v41;
  uint64_t v42;
  CFIndex v43;
  int64_t v44;
  int64_t v45;
  CFRange v46;

  v5 = a1;
  if (a3 < 5)
  {
    v6 = 1;
    goto LABEL_39;
  }
  v7 = (void *)MEMORY[0x1C3BD4F6C]();
  if (a3 >= objc_msgSend(v5, "length"))
  {
    v9 = v5;
  }
  else
  {
    v8 = (void *)MEMORY[0x1C3BD4F6C]();
    objc_msgSend(v5, "substringWithRange:", a2, a3);
    v9 = (id)objc_claimAutoreleasedReturnValue();
    objc_autoreleasePoolPop(v8);
  }
  objc_msgSend(MEMORY[0x1E0CB3500], "decimalDigitCharacterSet");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = (__CFString *)v9;
  objc_opt_self();
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v12)
    goto LABEL_36;
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  Length = CFStringGetLength(v11);
  theString = v11;
  v42 = 0;
  v43 = Length;
  CharactersPtr = CFStringGetCharactersPtr(v11);
  CStringPtr = 0;
  v40 = CharactersPtr;
  if (!CharactersPtr)
    CStringPtr = CFStringGetCStringPtr(v11, 0x600u);
  v44 = 0;
  v45 = 0;
  v41 = CStringPtr;
  if (Length <= 0)
  {
LABEL_36:

LABEL_37:
    v6 = 1;
    goto LABEL_38;
  }
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 64;
  do
  {
    if ((unint64_t)v17 >= 4)
      v20 = 4;
    else
      v20 = v17;
    v21 = v43;
    if (v43 <= v17)
    {
      v22 = 0;
LABEL_31:
      if (!objc_msgSend(v10, "characterIsMember:", v22, v31, v32, v33, v34, v35, v36, v37, v38))
        goto LABEL_33;
      goto LABEL_32;
    }
    if (v40)
    {
      v22 = v40[v17 + v42];
    }
    else if (v41)
    {
      v22 = v41[v42 + v17];
    }
    else
    {
      v23 = v44;
      if (v45 <= v17 || v44 > v17)
      {
        v25 = v20 + v16;
        v26 = v19 - v20;
        v27 = v17 - v20;
        v28 = v27 + 64;
        if (v27 + 64 >= v43)
          v28 = v43;
        v44 = v27;
        v45 = v28;
        if (v43 >= v26)
          v21 = v26;
        v46.length = v21 + v25;
        v46.location = v27 + v42;
        CFStringGetCharacters(theString, v46, (UniChar *)&v31);
        v23 = v44;
      }
      v22 = *((_WORD *)&v31 + v17 - v23);
    }
    if (v22 - 48 >= 0xA)
      goto LABEL_31;
LABEL_32:
    ++v18;
LABEL_33:
    ++v17;
    --v16;
    ++v19;
  }
  while (Length != v17);

  if (v18 > 5)
  {
    v6 = 0;
    goto LABEL_38;
  }
  if (v18 != 5)
    goto LABEL_37;
  CFCharacterSetGetPredefined(kCFCharacterSetDecimalDigit);
  _PASKeepOnlyCharacterSet();
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v30, "isEqualToString:", CFSTR("10111")) & 1) != 0)
    v6 = 1;
  else
    v6 = objc_msgSend(v30, "isEqualToString:", CFSTR("10177"));

LABEL_38:
  objc_autoreleasePoolPop(v7);
LABEL_39:

  return v6;
}

id SGNormalizeInstantMessageAddress(void *a1)
{
  void *v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  id v7;

  v2 = (void *)MEMORY[0x1C3BD4F6C]();
  v3 = (void *)MEMORY[0x1E0CB3500];
  v4 = a1;
  objc_msgSend(v3, "whitespaceAndNewlineCharacterSet");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "stringByTrimmingCharactersInSet:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v7 = v6;
  objc_autoreleasePoolPop(v2);

  return v7;
}

id SGNormalizeSocialProfile(void *a1)
{
  id v1;
  void *v2;
  id v3;

  v1 = a1;
  v2 = (void *)MEMORY[0x1C3BD4F6C]();
  v3 = v1;
  objc_autoreleasePoolPop(v2);

  return v3;
}

id SGNormalizeSocialProfileIdentifier(void *a1)
{
  id v1;
  void *v2;
  SGSocialProfileDetails *v3;
  SGSocialProfileDetails *v4;
  id v5;
  NSObject *v6;
  void *v7;
  int v9;
  id v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)MEMORY[0x1C3BD4F6C]();
  v3 = -[SGSocialProfileDetails initWithSerialized:]([SGSocialProfileDetails alloc], "initWithSerialized:", v1);
  v4 = v3;
  if (v3)
  {
    -[SGSocialProfileDetails preferredUniqueIdentifier](v3, "preferredUniqueIdentifier");
    v5 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    sgLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
    {
      v9 = 138412290;
      v10 = v1;
      _os_log_fault_impl(&dword_1C3607000, v6, OS_LOG_TYPE_FAULT, "Unexpectedly could not deserialize a serializedSocialProfile: %@", (uint8_t *)&v9, 0xCu);
    }

    if (_PASEvaluateLogFaultAndProbCrashCriteria())
      abort();
    v5 = v1;
  }
  v7 = v5;

  objc_autoreleasePoolPop(v2);
  return v7;
}

id SGNormalizeBirthday(void *a1)
{
  void *v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  id v7;

  v2 = (void *)MEMORY[0x1C3BD4F6C]();
  v3 = (void *)MEMORY[0x1E0CB3500];
  v4 = a1;
  objc_msgSend(v3, "whitespaceAndNewlineCharacterSet");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "stringByTrimmingCharactersInSet:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v7 = v6;
  objc_autoreleasePoolPop(v2);

  return v7;
}

id SGDateComponentsFromNormalizeBirthday(void *a1)
{
  id v1;
  void *v2;
  unint64_t v3;
  __CFString *v4;
  __CFString *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v1 = a1;
  v2 = (void *)MEMORY[0x1C3BD4F6C]();
  v3 = objc_msgSend(v1, "length");
  v4 = CFSTR("dd-MM");
  if (v3 > 5)
    v4 = CFSTR("dd-MM-yyyy");
  v5 = v4;
  v6 = (void *)objc_opt_new();
  objc_msgSend(v6, "setDateFormat:", v5);

  objc_msgSend(v6, "dateFromString:", v1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (v7)
  {
    if (v3 <= 5)
      v8 = 24;
    else
      v8 = 28;
    objc_msgSend(MEMORY[0x1E0C99D48], "currentCalendar");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "components:fromDate:", v8, v7);
    v10 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v10 = 0;
  }

  objc_autoreleasePoolPop(v2);
  return v10;
}

id SGNormalizeName(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  +[SGNames cleanName:](SGNames, "cleanName:", a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  +[SGNames stripHonorifics:](SGNames, "stripHonorifics:", v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  +[SGNames handleLastNameFirstOrder:](SGNames, "handleLastNameFirstOrder:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  +[SGNames stripHonorifics:](SGNames, "stripHonorifics:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  v5 = (void *)MEMORY[0x1C3BD4F6C]();
  objc_msgSend(v4, "lowercaseString");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_autoreleasePoolPop(v5);

  return v6;
}

void SGDataNormalizationClearCaches()
{
  id v0;

  parsedAddressCache();
  v0 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "runWithLockAcquired:", &__block_literal_global_24410);

}

uint64_t parsedAddressCache()
{
  if (parsedAddressCache__pasOnceToken12 != -1)
    dispatch_once(&parsedAddressCache__pasOnceToken12, &__block_literal_global_48);
  return objc_msgSend((id)parsedAddressCache__pasExprOnceResult, "result");
}

void __parsedAddressCache_block_invoke()
{
  void *v0;
  uint64_t v1;
  void *v2;

  v0 = (void *)MEMORY[0x1C3BD4F6C]();
  v1 = objc_msgSend(objc_alloc(MEMORY[0x1E0D815E0]), "initWithBlock:", &__block_literal_global_51);
  v2 = (void *)parsedAddressCache__pasExprOnceResult;
  parsedAddressCache__pasExprOnceResult = v1;

  objc_autoreleasePoolPop(v0);
}

id __parsedAddressCache_block_invoke_2()
{
  id v0;
  void *v1;
  void *v2;

  v0 = objc_alloc(MEMORY[0x1E0D815F0]);
  v1 = (void *)objc_opt_new();
  v2 = (void *)objc_msgSend(v0, "initWithGuardedData:", v1);

  return v2;
}

id SGPostalAddressParseCNPostalAddress(void *a1)
{
  id v1;
  uint64_t v2;
  void *v3;
  const __CFString *v4;
  uint64_t v5;
  void *v6;
  const __CFString *v7;
  uint64_t v8;
  void *v9;
  const __CFString *v10;
  uint64_t v11;
  void *v12;
  const __CFString *v13;
  __CFString *v14;
  const __CFString *v15;
  void *v16;
  _QWORD v18[5];
  _QWORD v19[6];

  v19[5] = *MEMORY[0x1E0C80C00];
  v18[0] = CFSTR("Street");
  v1 = a1;
  objc_msgSend(v1, "street");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = (void *)v2;
  if (v2)
    v4 = (const __CFString *)v2;
  else
    v4 = &stru_1E7DB83A8;
  v19[0] = v4;
  v18[1] = CFSTR("City");
  objc_msgSend(v1, "city");
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = (void *)v5;
  if (v5)
    v7 = (const __CFString *)v5;
  else
    v7 = &stru_1E7DB83A8;
  v19[1] = v7;
  v18[2] = CFSTR("State");
  objc_msgSend(v1, "state");
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = (void *)v8;
  if (v8)
    v10 = (const __CFString *)v8;
  else
    v10 = &stru_1E7DB83A8;
  v19[2] = v10;
  v18[3] = CFSTR("ZIP");
  objc_msgSend(v1, "postalCode");
  v11 = objc_claimAutoreleasedReturnValue();
  v12 = (void *)v11;
  if (v11)
    v13 = (const __CFString *)v11;
  else
    v13 = &stru_1E7DB83A8;
  v19[3] = v13;
  v18[4] = CFSTR("Country");
  objc_msgSend(v1, "country");
  v14 = (__CFString *)objc_claimAutoreleasedReturnValue();

  if (v14)
    v15 = v14;
  else
    v15 = &stru_1E7DB83A8;
  v19[4] = v15;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v19, v18, 5);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  return v16;
}

id SGPostalAddressParse(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  _QWORD v10[4];
  id v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  void (*v17)(uint64_t);
  id v18;

  v1 = (void *)MEMORY[0x1E0CB3500];
  v2 = a1;
  objc_msgSend(v1, "newlineCharacterSet");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "componentsSeparatedByCharactersInSet:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "_pas_componentsJoinedByString:", CFSTR(" "));
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v13 = 0;
  v14 = &v13;
  v15 = 0x3032000000;
  v16 = __Block_byref_object_copy__24424;
  v17 = __Block_byref_object_dispose__24425;
  v18 = 0;
  parsedAddressCache();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __SGPostalAddressParse_block_invoke;
  v10[3] = &unk_1E7DB1180;
  v7 = v5;
  v11 = v7;
  v12 = &v13;
  objc_msgSend(v6, "runWithLockAcquired:", v10);

  v8 = (id)v14[5];
  _Block_object_dispose(&v13, 8);

  return v8;
}

void sub_1C37A5250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__24424(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__24425(uint64_t a1)
{

}

void sub_1C37A5404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t SGPostalAddressParsedCompare(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  int v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  void *v21;
  uint64_t v22;
  id v24;
  void *v25;
  void *v26;

  v3 = a1;
  v4 = a2;
  v5 = (void *)MEMORY[0x1C3BD4F6C]();
  objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("Street"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "lowercaseString");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("Street"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "lowercaseString");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if ((existsSignificantPrefixRelation(v7, v9) & 1) != 0)
  {
LABEL_2:
    v26 = v5;
    objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("State"));
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("State"));
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v10, "length") == 2 && objc_msgSend(v11, "length") == 2)
    {
      objc_msgSend(v10, "uppercaseString");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "uppercaseString");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = objc_msgSend(v12, "isEqualToString:", v13);

      if (!v14)
      {
        v22 = 0;
        goto LABEL_19;
      }
    }
    objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("ZIP"));
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    squish(v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("ZIP"));
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    squish(v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    if (!objc_msgSend(v16, "length") || !objc_msgSend(v18, "length"))
    {
      v22 = 2;
      goto LABEL_18;
    }
    v19 = v16;
    v20 = v18;
    v25 = v19;
    if ((objc_msgSend(v19, "isEqualToString:", &stru_1E7DB83A8) & 1) != 0
      || (objc_msgSend(v20, "isEqualToString:", &stru_1E7DB83A8, v19) & 1) != 0)
    {
      v21 = v20;
    }
    else
    {
      if (objc_msgSend(v19, "rangeOfString:", v20) == 0x7FFFFFFFFFFFFFFFLL)
      {
        v24 = v19;
        v21 = v20;
        v22 = objc_msgSend(v20, "rangeOfString:", v24) != 0x7FFFFFFFFFFFFFFFLL;
        goto LABEL_11;
      }
      v21 = v20;
    }
    v22 = 1;
LABEL_11:

LABEL_18:
LABEL_19:
    v5 = v26;
    goto LABEL_20;
  }
  longestDigitalSubstringOrInitialNumber(v7);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  longestDigitalSubstringOrInitialNumber(v9);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v10, "length")
    && objc_msgSend(v10, "length")
    && objc_msgSend(v10, "isEqualToString:", v11))
  {

    goto LABEL_2;
  }
  v22 = 0;
LABEL_20:

  objc_autoreleasePoolPop(v5);
  return v22;
}

uint64_t existsSignificantPrefixRelation(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if ((unint64_t)objc_msgSend(v3, "length") >= 5 && (unint64_t)objc_msgSend(v4, "length") >= 5)
  {
    if ((objc_msgSend(v3, "hasPrefix:", v4) & 1) != 0)
      v5 = 1;
    else
      v5 = objc_msgSend(v4, "hasPrefix:", v3);
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

__CFString *longestDigitalSubstringOrInitialNumber(void *a1)
{
  id v1;
  __CFString *v2;
  void *v3;
  CFIndex Length;
  const UniChar *CharactersPtr;
  const char *CStringPtr;
  uint64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  CFIndex v17;
  UniChar v18;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  CFIndex v23;
  BOOL v24;
  unint64_t v25;
  int64_t v26;
  void *v27;
  __CFString *v28;
  __CFString *v30;
  id v31;
  UniChar buffer[8];
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  CFStringRef theString;
  const UniChar *v41;
  const char *v42;
  uint64_t v43;
  CFIndex v44;
  int64_t v45;
  int64_t v46;
  CFRange v47;

  v1 = a1;
  if (!objc_msgSend(v1, "length"))
    goto LABEL_49;
  v2 = (__CFString *)v1;
  objc_opt_self();
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    *(_OWORD *)buffer = 0u;
    v33 = 0u;
    Length = CFStringGetLength(v2);
    theString = v2;
    v43 = 0;
    v44 = Length;
    CharactersPtr = CFStringGetCharactersPtr(v2);
    CStringPtr = 0;
    v41 = CharactersPtr;
    if (!CharactersPtr)
      CStringPtr = CFStringGetCStringPtr(v2, 0x600u);
    v30 = v2;
    v31 = v1;
    v45 = 0;
    v46 = 0;
    v42 = CStringPtr;
    if (Length >= 1)
    {
      v7 = 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v15 = 64;
      while (1)
      {
        if ((unint64_t)v10 >= 4)
          v16 = 4;
        else
          v16 = v10;
        v17 = v44;
        if (v44 <= v10)
          goto LABEL_32;
        if (v41)
        {
          v18 = v41[v10 + v43];
        }
        else if (v42)
        {
          v18 = v42[v43 + v10];
        }
        else
        {
          if (v46 <= v10 || v8 > v10)
          {
            v20 = v16 + v7;
            v21 = v15 - v16;
            v22 = v10 - v16;
            v23 = v22 + 64;
            if (v22 + 64 >= v44)
              v23 = v44;
            v45 = v22;
            v46 = v23;
            if (v44 >= v21)
              v17 = v21;
            v47.length = v17 + v20;
            v47.location = v22 + v43;
            CFStringGetCharacters(theString, v47, buffer);
            v8 = v45;
          }
          v18 = buffer[v10 - v8];
        }
        if (v18 - 48 > 9)
        {
LABEL_32:
          if (v14 <= v11)
          {
            v13 = 0;
            v25 = v14;
          }
          else
          {
            if (!v12)
            {
              v2 = v30;

              v26 = 0;
              v1 = v31;
              goto LABEL_48;
            }
            v13 = 0;
            v25 = 0;
            v11 = v14;
            v9 = v12;
          }
        }
        else
        {
          v24 = (v13 & 1) == 0;
          v13 = 1;
          if (v24)
            v25 = 1;
          else
            v25 = v14 + 1;
          if (v24)
            v12 = v10;
        }
        ++v10;
        --v7;
        ++v15;
        v14 = v25;
        if (Length == v10)
          goto LABEL_40;
      }
    }
    v25 = 0;
    v12 = 0;
    v11 = 0;
    v9 = 0;
LABEL_40:
    v2 = v30;
    v1 = v31;
  }
  else
  {
    v25 = 0;
    v12 = 0;
    v11 = 0;
    v9 = 0;
  }

  v14 = v25 <= v11 ? v11 : v25;
  v26 = v25 <= v11 ? v9 : v12;
  if (v14)
  {
LABEL_48:
    v27 = (void *)MEMORY[0x1C3BD4F6C]();
    -[__CFString substringWithRange:](v2, "substringWithRange:", v26, v14);
    v28 = (__CFString *)objc_claimAutoreleasedReturnValue();
    objc_autoreleasePoolPop(v27);
  }
  else
  {
LABEL_49:
    v28 = &stru_1E7DB83A8;
  }

  return v28;
}

id squish(void *a1)
{
  void *v1;
  void *v2;

  preprocess(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  _PASRemoveWhitespace();
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

uint64_t SGPostalAddressesMatchWithParsed(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, uint64_t a7)
{
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  BOOL v19;
  int v20;
  int v21;
  int v22;

  v13 = a1;
  v14 = a2;
  v15 = a3;
  v16 = a4;
  v17 = a5;
  v18 = a6;
  if (v13)
    v19 = v14 == 0;
  else
    v19 = 1;
  v20 = !v19;
  if (!v19)
  {
    v21 = postalAddressStringsCompare(v13, v14, v15, v16);
    if (v21 != 2)
      goto LABEL_16;
  }
  if (v17)
  {
    if (v18)
      goto LABEL_11;
  }
  else
  {
    SGPostalAddressParse(v13);
    v17 = (id)objc_claimAutoreleasedReturnValue();
    if (v18)
      goto LABEL_11;
  }
  SGPostalAddressParse(v14);
  v18 = (id)objc_claimAutoreleasedReturnValue();
LABEL_11:
  v21 = SGPostalAddressParsedCompare(v17, v18);
  if (v21 != 2)
  {
LABEL_16:
    a7 = v21 == 1;
    goto LABEL_17;
  }
  if (v20)
  {
    v22 = postalAddressStringsCompare(v13, v14, v15, v16);
    if (v22 == 2)
      a7 = a7;
    else
      a7 = v22 == 1;
  }
LABEL_17:

  return a7;
}

uint64_t postalAddressStringsCompare(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;

  v7 = a1;
  v8 = a2;
  v9 = a3;
  v10 = a4;
  if ((objc_msgSend(v7, "isEqualToString:", v8) & 1) == 0)
  {
    heuristicZipCode(v7);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    heuristicZipCode(v8);
    v13 = objc_claimAutoreleasedReturnValue();
    v14 = (void *)v13;
    if (v12 && v13 && !objc_msgSend(v12, "isEqualToString:", v13))
    {
      v11 = 0;
LABEL_16:

      goto LABEL_17;
    }
    if (v9)
    {
      if (v10)
        goto LABEL_9;
    }
    else
    {
      SGNormalizeAddress(v7);
      v9 = (id)objc_claimAutoreleasedReturnValue();
      if (v10)
      {
LABEL_9:
        v11 = 1;
        if ((objc_msgSend(v9, "isEqualToString:", v10) & 1) == 0)
        {
          if (existsSignificantPrefixRelation(v9, v10))
            v11 = 1;
          else
            v11 = 2;
        }
        goto LABEL_16;
      }
    }
    SGNormalizeAddress(v8);
    v10 = (id)objc_claimAutoreleasedReturnValue();
    goto LABEL_9;
  }
  v11 = 1;
LABEL_17:

  return v11;
}

id heuristicZipCode(void *a1)
{
  __CFString *v1;
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const UniChar *CharactersPtr;
  const char *CStringPtr;
  int64_t v13;
  int64_t v14;
  int64_t v15;
  int64_t v16;
  int64_t v17;
  UniChar v18;
  int64_t v19;
  int64_t v20;
  unsigned int v21;
  unint64_t v22;
  void *v23;
  void *v24;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  CFStringRef theString;
  const UniChar *v35;
  const char *v36;
  uint64_t v37;
  int64_t v38;
  int64_t v39;
  int64_t v40;
  CFRange v41;

  v1 = a1;
  v2 = -[__CFString length](v1, "length");
  if (v2 < 10)
    goto LABEL_23;
  v3 = v2;
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  theString = v1;
  v37 = 0;
  v38 = v2;
  CharactersPtr = CFStringGetCharactersPtr(v1);
  CStringPtr = 0;
  v35 = CharactersPtr;
  if (!CharactersPtr)
    CStringPtr = CFStringGetCStringPtr(v1, 0x600u);
  v13 = 0;
  v39 = 0;
  v40 = 0;
  v36 = CStringPtr;
  v14 = 5 - v3;
  v15 = v3 + 59;
  v16 = v3;
  do
  {
    v17 = v16;
    if ((unint64_t)v16 < 0xC || v38 < v16)
      break;
    if (v35)
    {
      v18 = v35[v16 - 1 + v37];
    }
    else if (v36)
    {
      v18 = v36[v37 - 1 + v16];
    }
    else
    {
      if (v40 < v16 || v13 >= v16)
      {
        v19 = v16 + 59;
        if (v16 + 59 >= v38)
          v19 = v38;
        v39 = v16 - 5;
        v40 = v19;
        if (v38 >= v15)
          v20 = v15;
        else
          v20 = v38;
        v41.length = v20 + v14;
        v41.location = v16 - 5 + v37;
        CFStringGetCharacters(theString, v41, (UniChar *)&v26);
        v13 = v39;
      }
      v18 = *((_WORD *)&v26 + v17 - v13 - 1);
    }
    v21 = v18 - 48;
    ++v14;
    --v15;
    v16 = v17 - 1;
  }
  while (v21 < 0xA);
  v22 = v3 - v17;
  if (v22 < 5)
  {
LABEL_23:
    v24 = 0;
  }
  else
  {
    v23 = (void *)MEMORY[0x1C3BD4F6C](CStringPtr, v4, v5, v6, v7, v8, v9, v10, v26, *((_QWORD *)&v26 + 1), v27, *((_QWORD *)&v27 + 1), v28, *((_QWORD *)&v28 + 1), v29, *((_QWORD *)&v29 + 1));
    -[__CFString substringWithRange:](v1, "substringWithRange:", v17, v22);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_autoreleasePoolPop(v23);
  }

  return v24;
}

id SGPostalAddressUnparse(void *a1)
{
  id v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v17;
  _QWORD v18[5];

  v18[4] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("Street"));
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = (void *)v2;
  if (!v2)
  {
    objc_msgSend(MEMORY[0x1E0C99E38], "null");
    v2 = objc_claimAutoreleasedReturnValue();
  }
  objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("City"), v2, v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v4;
  if (!v4)
  {
    objc_msgSend(MEMORY[0x1E0C99E38], "null");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
  }
  v18[1] = v5;
  objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("State"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (!v6)
  {
    objc_msgSend(MEMORY[0x1E0C99E38], "null");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
  }
  v18[2] = v7;
  objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("ZIP"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = v8;
  if (!v8)
  {
    objc_msgSend(MEMORY[0x1E0C99E38], "null");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
  }
  v18[3] = v9;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v18, 4);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = (void *)objc_msgSend(v10, "mutableCopy");

  if (!v8)
  if (!v6)

  if (!v4)
  if (!v3)

  objc_msgSend(MEMORY[0x1E0C99E38], "null");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "removeObject:", v12);

  v13 = (void *)MEMORY[0x1C3BD4F6C]();
  objc_msgSend(v11, "_pas_componentsJoinedByString:", CFSTR(" "));
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  _PASCollapseWhitespaceAndStrip();
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  objc_autoreleasePoolPop(v13);
  return v15;
}

uint64_t SGPostalAddressesMatch(void *a1, void *a2)
{
  return SGPostalAddressesMatchWithParsed(a1, a2, 0, 0, 0, 0, 1);
}

BOOL SGDCKInteractionInfoReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  uint64_t v18;
  void *v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      switch((v10 >> 3))
      {
        case 1u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 32;
          goto LABEL_28;
        case 2u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 24;
          goto LABEL_28;
        case 3u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 16;
          goto LABEL_28;
        case 5u:
          PBReaderReadData();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 56;
          goto LABEL_28;
        case 6u:
          PBReaderReadData();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 48;
          goto LABEL_28;
        case 7u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 8;
          goto LABEL_28;
        case 8u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 40;
LABEL_28:
          v19 = *(void **)(a1 + v18);
          *(_QWORD *)(a1 + v18) = v17;

          goto LABEL_29;
        default:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            return 0;
LABEL_29:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          break;
      }
    }
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL SGM2HarvestBudgetStatusTransitionReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  BOOL v23;
  int *v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 16) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
          {
            v24 = &OBJC_IVAR___SGM2HarvestBudgetStatusTransition__fromStatus;
            goto LABEL_38;
          }
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            break;
          v17 += 7;
          v23 = v18++ > 8;
          if (v23)
          {
            LODWORD(v19) = 0;
            v24 = &OBJC_IVAR___SGM2HarvestBudgetStatusTransition__fromStatus;
            goto LABEL_41;
          }
        }
        v24 = &OBJC_IVAR___SGM2HarvestBudgetStatusTransition__fromStatus;
LABEL_39:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_41:
        *(_DWORD *)(a1 + *v24) = v19;
        goto LABEL_42;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_42:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v25 = 0;
    v26 = 0;
    v19 = 0;
    *(_BYTE *)(a1 + 16) |= 2u;
    while (1)
    {
      v27 = *v3;
      v28 = *(_QWORD *)(a2 + v27);
      if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
        break;
      v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
      *(_QWORD *)(a2 + v27) = v28 + 1;
      v19 |= (unint64_t)(v29 & 0x7F) << v25;
      if ((v29 & 0x80) == 0)
      {
        v24 = &OBJC_IVAR___SGM2HarvestBudgetStatusTransition__toStatus;
        goto LABEL_39;
      }
      v25 += 7;
      v23 = v26++ > 8;
      if (v23)
      {
        LODWORD(v19) = 0;
        v24 = &OBJC_IVAR___SGM2HarvestBudgetStatusTransition__toStatus;
        goto LABEL_41;
      }
    }
    v24 = &OBJC_IVAR___SGM2HarvestBudgetStatusTransition__toStatus;
LABEL_38:
    *(_BYTE *)(a2 + *v5) = 1;
    goto LABEL_39;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

std::string *re2::StringPrintf@<X0>(re2 *this@<X0>, std::string *a2@<X8>, ...)
{
  va_list va;

  va_start(va, a2);
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return re2::StringAppendV(a2, (const char *)this, va);
}

void sub_1C37A80BC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *re2::StringAppendV(std::string *a1, const char *a2, va_list a3)
{
  unsigned int v5;
  int v6;
  int v8;
  char *v9;
  int v10;
  char __str[1024];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  bzero(__str, 0x400uLL);
  v5 = vsnprintf(__str, 0x400uLL, a2, a3);
  v6 = v5;
  if (v5 < 0x400)
    return std::string::append(a1, __str, v5);
  v8 = 1024;
  while (1)
  {
    if (v6 >= 0)
      v8 = v6 + 1;
    else
      v8 *= 2;
    v9 = (char *)operator new[]();
    v10 = vsnprintf(v9, v8, a2, a3);
    v6 = v10;
    if ((v10 & 0x80000000) == 0 && v10 < v8)
      break;
    MEMORY[0x1C3BD4840](v9, 0x1000C8077774924);
  }
  std::string::append(a1, v9, v10);
  return (std::string *)MEMORY[0x1C3BD4840](v9, 0x1000C8077774924);
}

std::string *re2::StringAppendF(std::string *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return re2::StringAppendV(a1, a2, &a9);
}

uint64_t re2::hashword(re2 *this, const unsigned int *a2, int a3)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  unint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;

  v3 = (a3 + 4 * (_DWORD)a2 - 559038737);
  if ((unint64_t)a2 < 4)
  {
    v5 = a3 + 4 * (_DWORD)a2 - 559038737;
    v4 = v5;
    if (a2 == (const unsigned int *)1)
    {
LABEL_11:
      HIDWORD(v17) = v4;
      LODWORD(v17) = v4;
      v18 = (v3 ^ v4) - (v17 >> 18);
      HIDWORD(v17) = v18;
      LODWORD(v17) = v18;
      v19 = ((*(_DWORD *)this + v5) ^ v18) - (v17 >> 21);
      HIDWORD(v17) = v19;
      LODWORD(v17) = v19;
      v20 = (v19 ^ v4) - (v17 >> 7);
      HIDWORD(v17) = v20;
      LODWORD(v17) = v20;
      v21 = (v20 ^ v18) - (v17 >> 16);
      HIDWORD(v17) = v21;
      LODWORD(v17) = v21;
      HIDWORD(v17) = (v21 ^ v19) - (v17 >> 28);
      LODWORD(v17) = HIDWORD(v17);
      HIDWORD(v17) = (HIDWORD(v17) ^ v20) - (v17 >> 18);
      LODWORD(v17) = HIDWORD(v17);
      return (HIDWORD(v17) ^ v21) - (v17 >> 8);
    }
  }
  else
  {
    v4 = a3 + 4 * (_DWORD)a2 - 559038737;
    v5 = v4;
    do
    {
      v6 = *((_DWORD *)this + 1) + v4;
      v7 = *((_DWORD *)this + 2) + v3;
      v8 = (*(_DWORD *)this + v5 - v7) ^ __ROR4__(v7, 28);
      v9 = v7 + v6;
      v10 = (v6 - v8) ^ __ROR4__(v8, 26);
      v11 = v8 + v9;
      v12 = (v9 - v10) ^ __ROR4__(v10, 24);
      v13 = v10 + v11;
      v14 = (v11 - v12) ^ __ROR4__(v12, 16);
      v15 = v12 + v13;
      v16 = (v13 - v14) ^ __ROR4__(v14, 13);
      v5 = v14 + v15;
      v3 = (v15 - v16) ^ __ROR4__(v16, 28);
      v4 = v16 + v5;
      a2 = (const unsigned int *)((char *)a2 - 3);
      this = (re2 *)((char *)this + 12);
    }
    while ((unint64_t)a2 > 3);
    if (a2 == (const unsigned int *)1)
      goto LABEL_11;
  }
  if (a2 == (const unsigned int *)2)
  {
LABEL_10:
    v4 += *((_DWORD *)this + 1);
    goto LABEL_11;
  }
  if (a2 == (const unsigned int *)3)
  {
    LODWORD(v3) = *((_DWORD *)this + 2) + v3;
    goto LABEL_10;
  }
  return v3;
}

_DWORD *re2::hashword2(_DWORD *this, const unsigned int *a2, int *a3, unsigned int *a4, unsigned int *a5)
{
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;

  v5 = *a3 + 4 * (_DWORD)a2 - 559038737;
  v6 = v5 + *a4;
  v7 = v5;
  if ((unint64_t)a2 >= 4)
  {
    do
    {
      v8 = this[1] + v5;
      v9 = this[2] + v6;
      v10 = (*this + v7 - v9) ^ __ROR4__(v9, 28);
      v11 = v9 + v8;
      v12 = (v8 - v10) ^ __ROR4__(v10, 26);
      v13 = v10 + v11;
      v14 = (v11 - v12) ^ __ROR4__(v12, 24);
      v15 = v12 + v13;
      v16 = (v13 - v14) ^ __ROR4__(v14, 16);
      v17 = v14 + v15;
      v18 = (v15 - v16) ^ __ROR4__(v16, 13);
      v7 = v16 + v17;
      v6 = (v17 - v18) ^ __ROR4__(v18, 28);
      v5 = v18 + v7;
      a2 = (const unsigned int *)((char *)a2 - 3);
      this += 3;
    }
    while ((unint64_t)a2 > 3);
  }
  if (a2 == (const unsigned int *)1)
    goto LABEL_8;
  if (a2 == (const unsigned int *)2)
  {
LABEL_7:
    v5 += this[1];
LABEL_8:
    HIDWORD(v19) = v5;
    LODWORD(v19) = v5;
    v20 = (v6 ^ v5) - (v19 >> 18);
    HIDWORD(v19) = v20;
    LODWORD(v19) = v20;
    v21 = ((*this + v7) ^ v20) - (v19 >> 21);
    HIDWORD(v19) = v21;
    LODWORD(v19) = v21;
    v22 = (v21 ^ v5) - (v19 >> 7);
    HIDWORD(v19) = v22;
    LODWORD(v19) = v22;
    v23 = (v22 ^ v20) - (v19 >> 16);
    HIDWORD(v19) = v23;
    LODWORD(v19) = v23;
    HIDWORD(v19) = (v23 ^ v21) - (v19 >> 28);
    LODWORD(v19) = HIDWORD(v19);
    v5 = (HIDWORD(v19) ^ v22) - (v19 >> 18);
    HIDWORD(v19) = v5;
    LODWORD(v19) = v5;
    v6 = (v5 ^ v23) - (v19 >> 8);
    goto LABEL_9;
  }
  if (a2 == (const unsigned int *)3)
  {
    v6 += this[2];
    goto LABEL_7;
  }
LABEL_9:
  *a3 = v6;
  *a4 = v5;
  return this;
}

void sub_1C37A8804(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C37A8A4C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C37AA4F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  _Block_object_dispose(&a19, 8);
  _Block_object_dispose(&a39, 8);
  _Unwind_Resume(a1);
}

void sub_1C37AA8A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_1C37AAC6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  _Block_object_dispose(&a17, 8);
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_1C37AB0BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C37AB3A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 152), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__24786(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__24787(uint64_t a1)
{

}

void sub_1C37ACE18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C37AF178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id tokenizeNameAfterWhitespaceNormalization(void *a1)
{
  id v1;
  _WORD *v2;
  _WORD *v3;
  void *v4;
  __CFString *v5;
  void *v6;
  CFIndex Length;
  const UniChar *CharactersPtr;
  const char *CStringPtr;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  CFIndex v15;
  UniChar v16;
  int64_t v17;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  CFIndex v22;
  unsigned int v23;
  uint64_t v24;
  BOOL v25;
  id v26;
  void *v27;
  id v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  CFStringRef theString;
  const UniChar *v39;
  const char *v40;
  uint64_t v41;
  CFIndex v42;
  int64_t v43;
  int64_t v44;
  CFRange v45;

  v1 = a1;
  if (!objc_msgSend(v1, "length"))
  {
    v4 = 0;
    goto LABEL_40;
  }
  v2 = malloc_type_malloc(2 * objc_msgSend(v1, "length"), 0x1000040BDFB0063uLL);
  if (!v2)
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99850], CFSTR("malloc failed"), 0);
    v29 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v29);
  }
  v3 = v2;
  v4 = (void *)objc_opt_new();
  v5 = (__CFString *)v1;
  objc_opt_self();
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    Length = CFStringGetLength(v5);
    theString = v5;
    v41 = 0;
    v42 = Length;
    CharactersPtr = CFStringGetCharactersPtr(v5);
    CStringPtr = 0;
    v39 = CharactersPtr;
    if (!CharactersPtr)
      CStringPtr = CFStringGetCStringPtr(v5, 0x600u);
    v43 = 0;
    v44 = 0;
    v40 = CStringPtr;
    if (Length > 0)
    {
      v10 = 0;
      v11 = 0;
      v12 = 0;
      v13 = 64;
      do
      {
        if ((unint64_t)v11 >= 4)
          v14 = 4;
        else
          v14 = v11;
        v15 = v42;
        if (v42 <= v11)
        {
          v3[v12++] = 0;
        }
        else
        {
          if (v39)
          {
            v16 = v39[v11 + v41];
          }
          else if (v40)
          {
            v16 = v40[v41 + v11];
          }
          else
          {
            v17 = v43;
            if (v44 <= v11 || v43 > v11)
            {
              v19 = v14 + v10;
              v20 = v13 - v14;
              v21 = v11 - v14;
              v22 = v21 + 64;
              if (v21 + 64 >= v42)
                v22 = v42;
              v43 = v21;
              v44 = v22;
              if (v42 >= v20)
                v15 = v20;
              v45.length = v15 + v19;
              v45.location = v21 + v41;
              CFStringGetCharacters(theString, v45, (UniChar *)&v30);
              v17 = v43;
            }
            v16 = *((_WORD *)&v30 + v11 - v17);
          }
          v23 = v16;
          if (v16 == 32
            || ((v3[v12] = v16, ++v12, v24 = (1 << v16) & 0xD00000000000, v23 <= 0x2F)
              ? (v25 = v24 == 0)
              : (v25 = 1),
                !v25))
          {
            if (v12)
            {
              v26 = objc_alloc(MEMORY[0x1E0CB3940]);
              v27 = (void *)objc_msgSend(v26, "initWithCharacters:length:", v3, v12, v30, v31, v32, v33, v34, v35, v36, v37);
              objc_msgSend(v4, "addObject:", v27);

              v12 = 0;
            }
          }
        }
        ++v11;
        --v10;
        ++v13;
      }
      while (Length != v11);

      if (!v12)
        goto LABEL_38;
      v5 = (__CFString *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithCharacters:length:", v3, v12);
      objc_msgSend(v4, "addObject:", v5);
    }
  }

LABEL_38:
  free(v3);
LABEL_40:

  return v4;
}

uint64_t letterLength(void *a1)
{
  id v1;
  const __CFCharacterSet *Predefined;
  __CFString *v3;
  void *v4;
  CFIndex Length;
  const UniChar *CharactersPtr;
  const char *CStringPtr;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  CFIndex v13;
  UniChar v14;
  int64_t v15;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  CFIndex v20;
  _OWORD v22[8];
  CFStringRef theString;
  const UniChar *v24;
  const char *v25;
  uint64_t v26;
  CFIndex v27;
  int64_t v28;
  int64_t v29;
  CFRange v30;

  v1 = a1;
  Predefined = CFCharacterSetGetPredefined(kCFCharacterSetLetter);
  v3 = (__CFString *)v1;
  objc_opt_self();
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v4)
    goto LABEL_29;
  memset(v22, 0, sizeof(v22));
  Length = CFStringGetLength(v3);
  theString = v3;
  v26 = 0;
  v27 = Length;
  CharactersPtr = CFStringGetCharactersPtr(v3);
  CStringPtr = 0;
  v24 = CharactersPtr;
  if (!CharactersPtr)
    CStringPtr = CFStringGetCStringPtr(v3, 0x600u);
  v28 = 0;
  v29 = 0;
  v25 = CStringPtr;
  if (Length >= 1)
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 64;
    do
    {
      if ((unint64_t)v10 >= 4)
        v12 = 4;
      else
        v12 = v10;
      v13 = v27;
      if (v27 <= v10)
      {
        v14 = 0;
      }
      else if (v24)
      {
        v14 = v24[v10 + v26];
      }
      else if (v25)
      {
        v14 = v25[v26 + v10];
      }
      else
      {
        v15 = v28;
        if (v29 <= v10 || v28 > v10)
        {
          v17 = v12 + v8;
          v18 = v11 - v12;
          v19 = v10 - v12;
          v20 = v19 + 64;
          if (v19 + 64 >= v27)
            v20 = v27;
          v28 = v19;
          v29 = v20;
          if (v27 >= v18)
            v13 = v18;
          v30.length = v13 + v17;
          v30.location = v19 + v26;
          CFStringGetCharacters(theString, v30, (UniChar *)v22);
          v15 = v28;
        }
        v14 = *((_WORD *)v22 + v10 - v15);
      }
      if (CFCharacterSetIsCharacterMember(Predefined, v14))
        ++v9;
      ++v10;
      --v8;
      ++v11;
    }
    while (Length != v10);
  }
  else
  {
LABEL_29:
    v9 = 0;
  }

  return v9;
}

uint64_t isCapitalized(void *a1)
{
  id v1;
  const __CFCharacterSet *Predefined;
  __CFString *v3;
  void *v4;
  CFIndex Length;
  const UniChar *CharactersPtr;
  const char *CStringPtr;
  uint64_t v8;
  int64_t v9;
  int v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  CFIndex v14;
  UniChar v15;
  int IsCharacterMember;
  int64_t v17;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  CFIndex v22;
  uint64_t v23;
  _OWORD v25[8];
  CFStringRef theString;
  const UniChar *v27;
  const char *v28;
  uint64_t v29;
  CFIndex v30;
  int64_t v31;
  int64_t v32;
  CFRange v33;

  v1 = a1;
  Predefined = CFCharacterSetGetPredefined(kCFCharacterSetUppercaseLetter);
  v3 = (__CFString *)v1;
  objc_opt_self();
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    memset(v25, 0, sizeof(v25));
    Length = CFStringGetLength(v3);
    theString = v3;
    v29 = 0;
    v30 = Length;
    CharactersPtr = CFStringGetCharactersPtr(v3);
    CStringPtr = 0;
    v27 = CharactersPtr;
    if (!CharactersPtr)
      CStringPtr = CFStringGetCStringPtr(v3, 0x600u);
    v31 = 0;
    v32 = 0;
    v28 = CStringPtr;
    if (Length >= 1)
    {
      v8 = 0;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v12 = 64;
      while (1)
      {
        if ((unint64_t)v9 >= 4)
          v13 = 4;
        else
          v13 = v9;
        v14 = v30;
        if (v30 <= v9)
        {
          v15 = 0;
        }
        else if (v27)
        {
          v15 = v27[v9 + v29];
        }
        else if (v28)
        {
          v15 = v28[v29 + v9];
        }
        else
        {
          v17 = v31;
          if (v32 <= v9 || v31 > v9)
          {
            v19 = v13 + v8;
            v20 = v12 - v13;
            v21 = v9 - v13;
            v22 = v21 + 64;
            if (v21 + 64 >= v30)
              v22 = v30;
            v31 = v21;
            v32 = v22;
            if (v30 >= v20)
              v14 = v20;
            v33.length = v14 + v19;
            v33.location = v21 + v29;
            CFStringGetCharacters(theString, v33, (UniChar *)v25);
            v17 = v31;
          }
          v15 = *((_WORD *)v25 + v9 - v17);
        }
        IsCharacterMember = CFCharacterSetIsCharacterMember(Predefined, v15);
        if ((v11 & 1) != 0)
        {
          if (!IsCharacterMember)
            ++v10;
        }
        else if (!IsCharacterMember)
        {
          LODWORD(v23) = 0;
          goto LABEL_34;
        }
        ++v9;
        --v8;
        ++v12;
        v11 = 1;
        if (Length == v9)
          goto LABEL_33;
      }
    }
  }
  v10 = 0;
LABEL_33:
  LODWORD(v23) = 1;
LABEL_34:

  if (v10 > 0)
    v23 = v23;
  else
    v23 = 0;

  return v23;
}

BOOL fixedWidthStringSetContains(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  _BOOL8 v8;
  size_t v9;
  id v10;
  const void *v11;
  unint64_t v12;
  _QWORD __compar[4];
  size_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a3;
  v7 = v6;
  v8 = 0;
  if (v5 && v6)
  {
    if (objc_msgSend(v6, "length") == a2)
    {
      MEMORY[0x1E0C80A78]();
      bzero((char *)__compar - ((2 * a2 + 16) & 0xFFFFFFFFFFFFFFF0), v9);
      objc_msgSend(v7, "getCharacters:", (char *)__compar - ((2 * a2 + 16) & 0xFFFFFFFFFFFFFFF0));
      v10 = objc_retainAutorelease(v5);
      v11 = (const void *)objc_msgSend(v10, "bytes");
      v12 = objc_msgSend(v10, "length");
      __compar[0] = MEMORY[0x1E0C809B0];
      __compar[1] = 3221225472;
      __compar[2] = __fixedWidthStringSetContains_block_invoke;
      __compar[3] = &__block_descriptor_40_e15_i24__0r_v8r_v16l;
      v15 = 2 * a2;
      v8 = bsearch_b((char *)__compar - ((v15 + 16) & 0xFFFFFFFFFFFFFFF0), v11, v12 / v15, v15, __compar) != 0;
    }
    else
    {
      v8 = 0;
    }
  }

  return v8;
}

uint64_t __fixedWidthStringSetContains_block_invoke(uint64_t a1, void *__s1, void *__s2)
{
  return memcmp(__s1, __s2, *(_QWORD *)(a1 + 32));
}

void sub_1C37B2030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__25299(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__25300(uint64_t a1)
{

}

void sub_1C37B2470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t SGM2BirthdayExtractionWithSupervisionReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  char v42;
  unsigned int v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 20) |= 4u;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_64;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v19 = 0;
              goto LABEL_66;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_64:
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_66:
          v53 = v19 != 0;
          v54 = 16;
          goto LABEL_88;
        case 2u:
          v24 = 0;
          v25 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 20) |= 0x20u;
          while (2)
          {
            v27 = *v3;
            v28 = *(_QWORD *)(a2 + v27);
            if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
              *(_QWORD *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                v14 = v25++ >= 9;
                if (v14)
                {
                  v26 = 0;
                  goto LABEL_70;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v26 = 0;
LABEL_70:
          v53 = v26 != 0;
          v54 = 19;
          goto LABEL_88;
        case 3u:
          v30 = 0;
          v31 = 0;
          v32 = 0;
          *(_BYTE *)(a1 + 20) |= 1u;
          while (2)
          {
            v33 = *v3;
            v34 = *(_QWORD *)(a2 + v33);
            if (v34 == -1 || v34 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v35 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v34);
              *(_QWORD *)(a2 + v33) = v34 + 1;
              v32 |= (unint64_t)(v35 & 0x7F) << v30;
              if (v35 < 0)
              {
                v30 += 7;
                v14 = v31++ >= 9;
                if (v14)
                {
                  LODWORD(v32) = 0;
                  goto LABEL_74;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v32) = 0;
LABEL_74:
          v55 = 8;
          goto LABEL_83;
        case 4u:
          v36 = 0;
          v37 = 0;
          v38 = 0;
          *(_BYTE *)(a1 + 20) |= 8u;
          while (2)
          {
            v39 = *v3;
            v40 = *(_QWORD *)(a2 + v39);
            if (v40 == -1 || v40 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v41 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v40);
              *(_QWORD *)(a2 + v39) = v40 + 1;
              v38 |= (unint64_t)(v41 & 0x7F) << v36;
              if (v41 < 0)
              {
                v36 += 7;
                v14 = v37++ >= 9;
                if (v14)
                {
                  v38 = 0;
                  goto LABEL_78;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v38 = 0;
LABEL_78:
          v53 = v38 != 0;
          v54 = 17;
          goto LABEL_88;
        case 5u:
          v42 = 0;
          v43 = 0;
          v32 = 0;
          *(_BYTE *)(a1 + 20) |= 2u;
          while (2)
          {
            v44 = *v3;
            v45 = *(_QWORD *)(a2 + v44);
            if (v45 == -1 || v45 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v46 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v45);
              *(_QWORD *)(a2 + v44) = v45 + 1;
              v32 |= (unint64_t)(v46 & 0x7F) << v42;
              if (v46 < 0)
              {
                v42 += 7;
                v14 = v43++ >= 9;
                if (v14)
                {
                  LODWORD(v32) = 0;
                  goto LABEL_82;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v32) = 0;
LABEL_82:
          v55 = 12;
LABEL_83:
          *(_DWORD *)(a1 + v55) = v32;
          continue;
        case 6u:
          v47 = 0;
          v48 = 0;
          v49 = 0;
          *(_BYTE *)(a1 + 20) |= 0x10u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v50 = *v3;
        v51 = *(_QWORD *)(a2 + v50);
        if (v51 == -1 || v51 >= *(_QWORD *)(a2 + *v4))
          break;
        v52 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v51);
        *(_QWORD *)(a2 + v50) = v51 + 1;
        v49 |= (unint64_t)(v52 & 0x7F) << v47;
        if ((v52 & 0x80) == 0)
          goto LABEL_85;
        v47 += 7;
        v14 = v48++ >= 9;
        if (v14)
        {
          v49 = 0;
          goto LABEL_87;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_85:
      if (*(_BYTE *)(a2 + *v5))
        v49 = 0;
LABEL_87:
      v53 = v49 != 0;
      v54 = 18;
LABEL_88:
      *(_BYTE *)(a1 + v54) = v53;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1C37B9FA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  SGRecordMeasurementState((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1C37BAF20(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(exception_object);
}

void sub_1C37BB928(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  SGRecordMeasurementState((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1C37BD0DC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C37BD198(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C37BD710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;

  _Block_object_dispose(&a39, 8);
  _Block_object_dispose((const void *)(v39 - 224), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__26334(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__26335(uint64_t a1)
{

}

uint64_t re2::BitState::BitState(uint64_t this, re2::Prog *a2)
{
  *(_QWORD *)this = a2;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  *(_WORD *)(this + 40) = 0;
  *(_BYTE *)(this + 42) = 0;
  *(_QWORD *)(this + 48) = 0;
  *(_DWORD *)(this + 56) = 0;
  *(_QWORD *)(this + 64) = 0;
  *(_DWORD *)(this + 72) = 0;
  *(_QWORD *)(this + 80) = 0;
  *(_DWORD *)(this + 88) = 0;
  *(_QWORD *)(this + 96) = 0;
  *(_QWORD *)(this + 104) = 0;
  return this;
}

{
  *(_QWORD *)this = a2;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  *(_WORD *)(this + 40) = 0;
  *(_BYTE *)(this + 42) = 0;
  *(_QWORD *)(this + 48) = 0;
  *(_DWORD *)(this + 56) = 0;
  *(_QWORD *)(this + 64) = 0;
  *(_DWORD *)(this + 72) = 0;
  *(_QWORD *)(this + 80) = 0;
  *(_DWORD *)(this + 88) = 0;
  *(_QWORD *)(this + 96) = 0;
  *(_QWORD *)(this + 104) = 0;
  return this;
}

void re2::BitState::~BitState(re2::BitState *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *((_QWORD *)this + 10);
  if (v2)
    MEMORY[0x1C3BD4840](v2, 0x1000C8052888210);
  v3 = *((_QWORD *)this + 12);
  if (v3)
    MEMORY[0x1C3BD4840](v3, 0x1050C80606E6C2FLL);
  v4 = *((_QWORD *)this + 8);
  if (v4)
    MEMORY[0x1C3BD4840](v4, 0x50C80EE9192B6);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *((_QWORD *)this + 10);
  if (v2)
    MEMORY[0x1C3BD4840](v2, 0x1000C8052888210);
  v3 = *((_QWORD *)this + 12);
  if (v3)
    MEMORY[0x1C3BD4840](v3, 0x1050C80606E6C2FLL);
  v4 = *((_QWORD *)this + 8);
  if (v4)
    MEMORY[0x1C3BD4840](v4, 0x50C80EE9192B6);
}

BOOL re2::BitState::GrowStack(re2::BitState *this)
{
  void *v2;
  const void *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::ios_base *v10;
  void *v12;
  uint64_t v13;
  uint64_t v14[8];
  __int128 v15;
  __int128 v16;
  int v17;
  uint64_t v18;

  *((_DWORD *)this + 27) *= 2;
  v2 = (void *)operator new[]();
  v3 = (const void *)*((_QWORD *)this + 12);
  v4 = *((int *)this + 26);
  memmove(v2, v3, 16 * v4);
  if (v3)
  {
    MEMORY[0x1C3BD4840](v3, 0x1050C80606E6C2FLL);
    LODWORD(v4) = *((_DWORD *)this + 26);
  }
  *((_QWORD *)this + 12) = v2;
  v5 = *((_DWORD *)this + 27);
  if ((int)v4 >= v5)
  {
    LOBYTE(v12) = 0;
    v6 = MEMORY[0x1E0DE4FE0];
    v7 = MEMORY[0x1E0DE4FE0] + 64;
    v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v9 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v18 = MEMORY[0x1E0DE4FE0] + 64;
    v13 = v8;
    *(uint64_t *)((char *)&v14[-1] + *(_QWORD *)(v8 - 24)) = v9;
    v10 = (std::ios_base *)((char *)&v14[-1] + *(_QWORD *)(v13 - 24));
    std::ios_base::init(v10, v14);
    v10[1].__vftable = 0;
    v10[1].__fmtflags_ = -1;
    v13 = v6 + 24;
    v18 = v7;
    std::streambuf::basic_streambuf();
    v14[0] = MEMORY[0x1E0DE4FB8] + 16;
    v15 = 0u;
    v16 = 0u;
    v17 = 16;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)"Job stack overflow.", 19);
    LogMessage::~LogMessage(&v12);
  }
  return (int)v4 < v5;
}

void sub_1C37BDE58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  LogMessage::~LogMessage(&a9);
  _Unwind_Resume(a1);
}

void sub_1C37BDE6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1C3BD4828](v1 + 120);
  _Unwind_Resume(a1);
}

uint64_t re2::BitState::Push(uint64_t this, int a2, const char *a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;

  v7 = this;
  if (*(_DWORD *)(this + 104) < *(_DWORD *)(this + 108)
    || (this = re2::BitState::GrowStack((re2::BitState *)this), (_DWORD)this))
  {
    if ((~*(_DWORD *)(*(_QWORD *)(*(_QWORD *)v7 + 32) + 8 * a2) & 7) != 0)
    {
      if (a4)
      {
LABEL_5:
        v8 = *(_QWORD *)(v7 + 96);
        v9 = *(int *)(v7 + 104);
        *(_DWORD *)(v7 + 104) = v9 + 1;
        v10 = v8 + 16 * v9;
        *(_QWORD *)(v10 + 8) = a3;
        *(_DWORD *)v10 = a2;
        *(_DWORD *)(v10 + 4) = a4;
        return this;
      }
      v11 = a2 + a2 * *(_DWORD *)(v7 + 16) + (_DWORD)a3 - *(_DWORD *)(v7 + 8);
      v12 = *(_QWORD *)(v7 + 80);
      v13 = v11 >> 5;
      v14 = *(_DWORD *)(v12 + 4 * v13);
      v15 = 1 << v11;
      if ((v15 & v14) == 0)
      {
        *(_DWORD *)(v12 + 4 * v13) = v15 | v14;
        goto LABEL_5;
      }
    }
  }
  return this;
}

uint64_t re2::BitState::TrySearch(re2::BitState *this, int a2, const char *a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _BYTE *v17;
  unsigned int v18;
  uint64_t v19;
  _BYTE *v20;
  signed int v21;
  int v22;
  uint64_t v23;
  unsigned int *v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  signed int *v34;
  int v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  int *v48;
  unsigned int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  int v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  std::ios_base *v73;
  int v74;
  uint64_t v75;
  std::ios_base *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  std::ios_base *v85;
  _QWORD *v86;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  void *v93;
  uint64_t v94;
  _QWORD v95[8];
  __int128 v96;
  __int128 v97;
  int v98;
  uint64_t v99;

  v6 = *((_QWORD *)this + 1);
  v7 = *((int *)this + 4);
  *((_DWORD *)this + 26) = 0;
  if ((*((int *)this + 27) > 0 || re2::BitState::GrowStack(this))
    && (~*(_DWORD *)(*(_QWORD *)(*(_QWORD *)this + 32) + 8 * a2) & 7) != 0)
  {
    v8 = a2 + a2 * *((_DWORD *)this + 4) + (_DWORD)a3 - *((_DWORD *)this + 2);
    v9 = *((_QWORD *)this + 10);
    v10 = v8 >> 5;
    v11 = *(_DWORD *)(v9 + 4 * v10);
    v12 = 1 << v8;
    if ((v12 & v11) == 0)
    {
      *(_DWORD *)(v9 + 4 * v10) = v12 | v11;
      v13 = *((_QWORD *)this + 12);
      v14 = *((int *)this + 26);
      *((_DWORD *)this + 26) = v14 + 1;
      v15 = v13 + 16 * v14;
      *(_QWORD *)(v15 + 8) = a3;
      *(_DWORD *)v15 = a2;
      *(_DWORD *)(v15 + 4) = 0;
    }
  }
  v16 = *((_DWORD *)this + 26);
  if (v16 < 1)
  {
LABEL_85:
    v92 = 0;
    return v92 & 1;
  }
  v92 = 0;
  v17 = (_BYTE *)(v6 + v7);
  v90 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v91 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v89 = MEMORY[0x1E0DE4FE0] + 64;
  v88 = MEMORY[0x1E0DE4FB8] + 16;
LABEL_10:
  v18 = v16 - 1;
  *((_DWORD *)this + 26) = v18;
  v19 = *((_QWORD *)this + 12) + 16 * v18;
  v20 = *(_BYTE **)(v19 + 8);
  v21 = *(_DWORD *)v19;
  v22 = *(_DWORD *)(v19 + 4);
  while (2)
  {
    v23 = *(_QWORD *)(*(_QWORD *)this + 32);
    v24 = (unsigned int *)(v23 + 8 * v21);
    v25 = *v24;
    v26 = v21;
    switch(v25 & 7)
    {
      case 0uLL:
        if (v22 != 1)
        {
          if (v22)
          {
            LOBYTE(v93) = 0;
            v99 = v89;
            v94 = v91;
            *(_QWORD *)((char *)&v95[-1] + *(_QWORD *)(v91 - 24)) = v90;
            v77 = (std::ios_base *)((char *)&v95[-1] + *(_QWORD *)(v94 - 24));
            std::ios_base::init(v77, v95);
            v77[1].__vftable = 0;
            v77[1].__fmtflags_ = -1;
            v94 = MEMORY[0x1E0DE4FE0] + 24;
            v99 = MEMORY[0x1E0DE4FE0] + 64;
            std::streambuf::basic_streambuf();
            v95[0] = v88;
            v96 = 0u;
            v97 = 0u;
            v98 = 16;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v94, (uint64_t)"Bad arg in kInstCapture: ", 25);
            std::ostream::operator<<();
LABEL_77:
            LogMessage::~LogMessage(&v93);
            goto LABEL_9;
          }
          v27 = *((_DWORD *)this + 26);
          if (v27 < *((_DWORD *)this + 27))
          {
LABEL_18:
            v28 = *((_QWORD *)this + 12);
            *((_DWORD *)this + 26) = v27 + 1;
            v29 = v28 + 16 * v27;
            *(_QWORD *)(v29 + 8) = v20;
            *(_DWORD *)v29 = v21;
            *(_DWORD *)(v29 + 4) = 1;
          }
          else if (re2::BitState::GrowStack(this)
                 && (~*(_DWORD *)(*(_QWORD *)(*(_QWORD *)this + 32) + 8 * v21) & 7) != 0)
          {
            v27 = *((_DWORD *)this + 26);
            goto LABEL_18;
          }
          v22 = 0;
          goto LABEL_43;
        }
        v22 = 0;
        v21 = *(_DWORD *)(v23 + 8 * v21 + 4);
LABEL_60:
        v66 = v21 + v21 * *((_DWORD *)this + 4) + (_DWORD)v20 - *((_DWORD *)this + 2);
        v67 = *((_QWORD *)this + 10);
        v68 = v66 >> 5;
        v69 = *(_DWORD *)(v67 + 4 * v68);
        v70 = 1 << v66;
        if ((v70 & v69) != 0)
          goto LABEL_9;
        *(_DWORD *)(v67 + 4 * v68) = v70 | v69;
        continue;
      case 1uLL:
        v30 = v25 >> 3;
        v31 = 8 * (v25 >> 3);
        v32 = *(_DWORD *)(v23 + v31) & 7;
        if (v32 == 2)
        {
          v33 = v23 + 8 * v26;
          v36 = *(_DWORD *)(v33 + 4);
          v34 = (signed int *)(v33 + 4);
          v35 = v36;
          if (*((_DWORD *)this + 26) < *((_DWORD *)this + 27))
            goto LABEL_24;
          if (re2::BitState::GrowStack(this))
          {
            v23 = *(_QWORD *)(*(_QWORD *)this + 32);
LABEL_24:
            if ((~*(_DWORD *)(v23 + 8 * v35) & 7) != 0)
            {
              v37 = v35 + v35 * *((_DWORD *)this + 4) + (_DWORD)v20 - *((_DWORD *)this + 2);
              v38 = *((_QWORD *)this + 10);
              v39 = v37 >> 5;
              v40 = *(_DWORD *)(v38 + 4 * v39);
              v41 = 1 << v37;
              if ((v41 & v40) == 0)
              {
                *(_DWORD *)(v38 + 4 * v39) = v41 | v40;
                v42 = *((_QWORD *)this + 12);
                v43 = *((int *)this + 26);
                *((_DWORD *)this + 26) = v43 + 1;
                v44 = v42 + 16 * v43;
                *(_QWORD *)(v44 + 8) = v20;
                *(_DWORD *)v44 = v35;
                *(_DWORD *)(v44 + 4) = 0;
              }
            }
          }
          v21 = *v34;
          v20 = v17;
          goto LABEL_60;
        }
        if (*((_DWORD *)this + 26) < *((_DWORD *)this + 27))
          goto LABEL_40;
        if (re2::BitState::GrowStack(this))
        {
          v32 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)this + 32) + v31) & 7;
LABEL_40:
          if (v32 != 7)
          {
            v55 = v30 + v30 * *((_DWORD *)this + 4) + (_DWORD)v17 - *((_DWORD *)this + 2);
            v56 = *((_QWORD *)this + 10);
            v57 = v55 >> 5;
            v58 = *(_DWORD *)(v56 + 4 * v57);
            v59 = 1 << v55;
            if ((v59 & v58) == 0)
            {
              *(_DWORD *)(v56 + 4 * v57) = v59 | v58;
              v60 = *((_QWORD *)this + 12);
              v61 = *((int *)this + 26);
              *((_DWORD *)this + 26) = v61 + 1;
              v62 = v60 + 16 * v61;
              *(_QWORD *)(v62 + 8) = v17;
              *(_DWORD *)v62 = v30;
              *(_DWORD *)(v62 + 4) = 0;
            }
          }
        }
LABEL_43:
        v21 = *v24 >> 3;
        goto LABEL_60;
      case 2uLL:
        if (v20 >= v17)
          v45 = -1;
        else
          v45 = *v20;
        v63 = v23 + 8 * v21;
        if (*((_BYTE *)v24 + 6))
          v64 = (v45 - 65) >= 0x1A;
        else
          v64 = 1;
        v65 = v45 + 32;
        if (v64)
          v65 = v45;
        if (v65 < *(unsigned __int8 *)(v63 + 4) || v65 > *((unsigned __int8 *)v24 + 5))
          goto LABEL_9;
        v21 = v25 >> 3;
        ++v20;
        goto LABEL_60;
      case 3uLL:
        if (!v22)
        {
          v46 = v23 + 8 * v21;
          v49 = *(_DWORD *)(v46 + 4);
          v48 = (int *)(v46 + 4);
          v47 = v49;
          if ((v49 & 0x80000000) == 0 && (int)v47 < *((_DWORD *)this + 18))
          {
            v50 = *(_QWORD *)(*((_QWORD *)this + 8) + 8 * v47);
            v51 = *((_DWORD *)this + 26);
            if (v51 < *((_DWORD *)this + 27))
              goto LABEL_34;
            if (re2::BitState::GrowStack(this)
              && (~*(_DWORD *)(*(_QWORD *)(*(_QWORD *)this + 32) + 8 * v21) & 7) != 0)
            {
              v51 = *((_DWORD *)this + 26);
LABEL_34:
              v52 = *((_QWORD *)this + 12);
              *((_DWORD *)this + 26) = v51 + 1;
              v53 = v52 + 16 * v51;
              *(_QWORD *)(v53 + 8) = v50;
              *(_DWORD *)v53 = v21;
              *(_DWORD *)(v53 + 4) = 1;
            }
            *(_QWORD *)(*((_QWORD *)this + 8) + 8 * *v48) = v20;
            LODWORD(v25) = *v24;
          }
          v22 = 0;
LABEL_59:
          v21 = v25 >> 3;
          goto LABEL_60;
        }
        if (v22 != 1)
        {
          LOBYTE(v93) = 0;
          v71 = MEMORY[0x1E0DE4FE0];
          v72 = MEMORY[0x1E0DE4FE0] + 64;
          v99 = MEMORY[0x1E0DE4FE0] + 64;
          v94 = v91;
          *(_QWORD *)((char *)&v95[-1] + *(_QWORD *)(v91 - 24)) = v90;
          v73 = (std::ios_base *)((char *)&v95[-1] + *(_QWORD *)(v94 - 24));
          std::ios_base::init(v73, v95);
          v73[1].__vftable = 0;
          v73[1].__fmtflags_ = -1;
          v94 = v71 + 24;
          v99 = v72;
          std::streambuf::basic_streambuf();
          v95[0] = MEMORY[0x1E0DE4FB8] + 16;
          v96 = 0u;
          v97 = 0u;
          v98 = 16;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v94, (uint64_t)"Bad arg in kInstCapture: ", 25);
          std::ostream::operator<<();
          goto LABEL_77;
        }
        *(_QWORD *)(*((_QWORD *)this + 8) + 8 * *(int *)(v23 + 8 * v21 + 4)) = v20;
LABEL_9:
        v16 = *((_DWORD *)this + 26);
        if (v16 <= 0)
          return v92 & 1;
        goto LABEL_10;
      case 4uLL:
        v54 = *(_DWORD *)(v23 + 8 * v21 + 4);
        if ((v54 & ~re2::Prog::EmptyFlags((uint64_t)this + 24, v20)) != 0)
          goto LABEL_9;
        goto LABEL_59;
      case 5uLL:
        if (*((_BYTE *)this + 42) && v20 != (_BYTE *)(*((_QWORD *)this + 1) + *((int *)this + 4)))
          goto LABEL_9;
        v74 = *((_DWORD *)this + 14);
        if (!v74)
          goto LABEL_87;
        *(_QWORD *)(*((_QWORD *)this + 8) + 8) = v20;
        v75 = *((_QWORD *)this + 6);
        if (!*(_QWORD *)v75)
        {
          if (v74 < 1)
            goto LABEL_81;
          goto LABEL_79;
        }
        if (!*((_BYTE *)this + 41))
        {
LABEL_87:
          v92 = 1;
          return v92 & 1;
        }
        if ((unint64_t)v20 > *(_QWORD *)v75 + *(int *)(v75 + 8) && v74 > 0)
        {
LABEL_79:
          v78 = 0;
          v79 = 0;
          do
          {
            v80 = (uint64_t *)(*((_QWORD *)this + 8) + v78);
            v81 = *v80;
            LODWORD(v80) = *((_DWORD *)v80 + 2) - *v80;
            v82 = *((_QWORD *)this + 6) + v78;
            *(_QWORD *)v82 = v81;
            *(_DWORD *)(v82 + 8) = (_DWORD)v80;
            ++v79;
            v78 += 16;
          }
          while (v79 < *((int *)this + 14));
        }
LABEL_81:
        if (!*((_BYTE *)this + 41))
          goto LABEL_87;
        v92 = 1;
        if (v20 != (_BYTE *)(*((_QWORD *)this + 1) + *((int *)this + 4)))
          goto LABEL_9;
        return v92 & 1;
      case 6uLL:
        goto LABEL_59;
      default:
        LOBYTE(v93) = 0;
        v83 = MEMORY[0x1E0DE4FE0];
        v84 = MEMORY[0x1E0DE4FE0] + 64;
        v99 = MEMORY[0x1E0DE4FE0] + 64;
        v94 = v91;
        *(_QWORD *)((char *)&v95[-1] + *(_QWORD *)(v91 - 24)) = v90;
        v85 = (std::ios_base *)((char *)&v95[-1] + *(_QWORD *)(v94 - 24));
        std::ios_base::init(v85, v95);
        v85[1].__vftable = 0;
        v85[1].__fmtflags_ = -1;
        v94 = v83 + 24;
        v99 = v84;
        std::streambuf::basic_streambuf();
        v95[0] = MEMORY[0x1E0DE4FB8] + 16;
        v96 = 0u;
        v97 = 0u;
        v98 = 16;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v94, (uint64_t)"Unexpected opcode: ", 19);
        v86 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)" arg ", 5);
        std::ostream::operator<<();
        LogMessage::~LogMessage(&v93);
        goto LABEL_85;
    }
  }
}

void sub_1C37BE714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::ostream::~ostream();
  MEMORY[0x1C3BD4828](a10);
  _Unwind_Resume(a1);
}

void sub_1C37BE774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t re2::BitState::Search(re2::BitState *this, const re2::StringPiece *a2, const re2::StringPiece *a3, char a4, char a5, re2::StringPiece *a6, int a7)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  int v27;
  void *v28;
  const char *v29;

  v10 = *(_QWORD *)a2;
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 2);
  *((_QWORD *)this + 1) = v10;
  LODWORD(v10) = *((_DWORD *)a3 + 2);
  v11 = *(_QWORD *)a3;
  *((_QWORD *)this + 3) = *(_QWORD *)a3;
  v12 = (_QWORD *)((char *)this + 24);
  *((_DWORD *)this + 8) = v10;
  if (!v11)
  {
    v13 = *(_QWORD *)a2;
    *((_DWORD *)this + 8) = *((_DWORD *)a2 + 2);
    *v12 = v13;
  }
  v14 = *(_QWORD *)this;
  if (**(_BYTE **)this && *v12 != *(_QWORD *)a2)
    return 0;
  v15 = *(unsigned __int8 *)(v14 + 1);
  if (*(_BYTE *)(v14 + 1))
  {
    if (*((_QWORD *)this + 3) + *((int *)this + 8) != *(_QWORD *)a2 + *((int *)a2 + 2))
      return 0;
  }
  if (**(_BYTE **)this)
    a4 = 1;
  *((_BYTE *)this + 40) = a4;
  if (v15)
    a5 = 1;
  *((_BYTE *)this + 41) = a5;
  *((_BYTE *)this + 42) = v15;
  *((_QWORD *)this + 6) = a6;
  *((_DWORD *)this + 14) = a7;
  if (a7 >= 1)
  {
    v19 = 0;
    v20 = 0;
    do
    {
      v21 = *((_QWORD *)this + 6) + v19;
      *(_QWORD *)v21 = 0;
      *(_DWORD *)(v21 + 8) = 0;
      ++v20;
      v19 += 16;
    }
    while (v20 < *((int *)this + 14));
    v14 = *(_QWORD *)this;
  }
  v22 = *(int *)(v14 + 12) + *(int *)(v14 + 12) * (uint64_t)*((int *)a2 + 2);
  v24 = v22 + 31;
  v23 = v22 < -31;
  v25 = v22 + 62;
  if (!v23)
    v25 = v24;
  *((_DWORD *)this + 22) = v25 >> 5;
  v26 = (void *)operator new[]();
  *((_QWORD *)this + 10) = v26;
  bzero(v26, 4 * *((int *)this + 22));
  v27 = 2 * a7;
  if (a7 < 1)
    v27 = 2;
  *((_DWORD *)this + 18) = v27;
  v28 = (void *)operator new[]();
  *((_QWORD *)this + 8) = v28;
  bzero(v28, 8 * *((int *)this + 18));
  *((_DWORD *)this + 27) = 256;
  *((_QWORD *)this + 12) = operator new[]();
  if (*((_BYTE *)this + 40))
  {
    **((_QWORD **)this + 8) = *(_QWORD *)a2;
    return re2::BitState::TrySearch(this, *(_DWORD *)(*(_QWORD *)this + 4), *(const char **)a2);
  }
  if ((*((_DWORD *)a2 + 2) & 0x80000000) != 0)
    return 0;
  v29 = *(const char **)a2;
  do
  {
    **((_QWORD **)this + 8) = v29;
    result = re2::BitState::TrySearch(this, *(_DWORD *)(*(_QWORD *)this + 4), v29);
    if ((_DWORD)result)
      break;
    ++v29;
  }
  while ((unint64_t)v29 <= *(_QWORD *)a2 + *((int *)a2 + 2));
  return result;
}

uint64_t re2::Prog::SearchBitState(uint64_t a1, int *a2, const re2::StringPiece *a3, int a4, int a5, re2::StringPiece *a6, int a7)
{
  int v7;
  re2::StringPiece *v8;
  int v11;
  re2::StringPiece *v12;
  char v13;
  re2::StringPiece *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[2];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[2];

  v7 = a7;
  v8 = a6;
  v26[0] = 0;
  v26[1] = 0;
  v22 = 0u;
  v23 = 0u;
  if (a7 <= 1)
    v11 = 1;
  else
    v11 = a7;
  v20 = 0uLL;
  v21 = 0uLL;
  if (a7 >= 1)
    v12 = a6;
  else
    v12 = (re2::StringPiece *)v26;
  v19 = 0uLL;
  if (a5 == 2)
  {
    a7 = v11;
    a6 = v12;
  }
  v18[0] = a1;
  v18[1] = 0;
  BYTE8(v20) = 0;
  DWORD2(v21) = 0;
  DWORD2(v23) = 0;
  v13 = a5 == 2 || a4 == 1;
  v24 = 0;
  v25 = 0;
  if ((re2::BitState::Search((re2::BitState *)v18, (const re2::StringPiece *)a2, a3, v13, a5 != 0, a6, a7) & 1) == 0)
    goto LABEL_17;
  if (a5 == 2)
  {
    v14 = (re2::StringPiece *)v26;
    if (v7 >= 1)
      v14 = v8;
    if (*(_QWORD *)v12 + *((int *)v14 + 2) != *(_QWORD *)a2 + a2[2])
    {
LABEL_17:
      v15 = 0;
      v16 = v23;
      if (!(_QWORD)v23)
        goto LABEL_19;
      goto LABEL_18;
    }
  }
  v15 = 1;
  v16 = v23;
  if ((_QWORD)v23)
LABEL_18:
    MEMORY[0x1C3BD4840](v16, 0x1000C8052888210);
LABEL_19:
  if (v24)
    MEMORY[0x1C3BD4840](v24, 0x1050C80606E6C2FLL);
  if ((_QWORD)v22)
    MEMORY[0x1C3BD4840](v22, 0x50C80EE9192B6);
  return v15;
}

void sub_1C37BEB14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  re2::BitState::~BitState((re2::BitState *)&a9);
  _Unwind_Resume(a1);
}

uint64_t __sortLocations_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  return objc_msgSend(a3, "compare:", a2);
}

void sub_1C37C1FD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_1C37C3568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getPSUSummarizationPipelineClass_block_invoke(uint64_t a1)
{
  Class result;

  if (!ProactiveSummarizationLibraryCore_frameworkLibrary_27040)
    ProactiveSummarizationLibraryCore_frameworkLibrary_27040 = _sl_dlopen();
  result = objc_getClass("PSUSummarizationPipeline");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  getPSUSummarizationPipelineClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __Block_byref_object_copy__27048(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__27049(uint64_t a1)
{

}

void sub_1C37C4584(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  uint64_t v16;
  va_list va;

  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v16 - 136), 8);
  objc_begin_catch(a1);
  JUMPOUT(0x1C37C4538);
}

uint64_t __Block_byref_object_copy__27150(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__27151(uint64_t a1)
{

}

uint64_t SGDCKEventReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  SGDCKTimeRange *v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  char v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  void *v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      v13 = v12 + 1;
      if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
        break;
      v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v15 = v9++ >= 9;
      if (v15)
      {
        v10 = 0;
        v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v16 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 64;
        goto LABEL_73;
      case 2u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 104;
        goto LABEL_73;
      case 3u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 40;
        goto LABEL_73;
      case 4u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 120;
        goto LABEL_73;
      case 5u:
        *(_BYTE *)(a1 + 140) |= 1u;
        v21 = *v3;
        v22 = *(_QWORD *)(a2 + v21);
        if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v23 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v23 = 0;
        }
        v58 = 8;
        goto LABEL_97;
      case 6u:
        *(_BYTE *)(a1 + 140) |= 2u;
        v24 = *v3;
        v25 = *(_QWORD *)(a2 + v24);
        if (v25 <= 0xFFFFFFFFFFFFFFF7 && v25 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v23 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v25);
          *(_QWORD *)(a2 + v24) = v25 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v23 = 0;
        }
        v58 = 16;
LABEL_97:
        *(_QWORD *)(a1 + v58) = v23;
        goto LABEL_74;
      case 7u:
        v26 = objc_alloc_init(SGDCKTimeRange);
        objc_storeStrong((id *)(a1 + 128), v26);
        if (!PBReaderPlaceMark() || (SGDCKTimeRangeReadFrom((uint64_t)v26, a2) & 1) == 0)
          goto LABEL_99;
        goto LABEL_64;
      case 8u:
        v27 = 0;
        v28 = 0;
        v29 = 0;
        *(_BYTE *)(a1 + 140) |= 0x10u;
        while (2)
        {
          v30 = *v3;
          v31 = *(_QWORD *)(a2 + v30);
          v32 = v31 + 1;
          if (v31 == -1 || v32 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v33 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v31);
            *(_QWORD *)(a2 + v30) = v32;
            v29 |= (unint64_t)(v33 & 0x7F) << v27;
            if (v33 < 0)
            {
              v27 += 7;
              v15 = v28++ >= 9;
              if (v15)
              {
                v29 = 0;
                goto LABEL_79;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v29 = 0;
LABEL_79:
        v56 = v29 != 0;
        v57 = 136;
        goto LABEL_84;
      case 9u:
        v26 = objc_alloc_init(SGDCKLocation);
        objc_msgSend((id)a1, "addLocations:", v26);
        if (!PBReaderPlaceMark() || (SGDCKLocationReadFrom((uint64_t)v26, a2) & 1) == 0)
          goto LABEL_99;
        goto LABEL_64;
      case 0xAu:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 56;
        goto LABEL_73;
      case 0xBu:
        v34 = 0;
        v35 = 0;
        v36 = 0;
        *(_BYTE *)(a1 + 140) |= 0x20u;
        while (2)
        {
          v37 = *v3;
          v38 = *(_QWORD *)(a2 + v37);
          v39 = v38 + 1;
          if (v38 == -1 || v39 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v40 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v38);
            *(_QWORD *)(a2 + v37) = v39;
            v36 |= (unint64_t)(v40 & 0x7F) << v34;
            if (v40 < 0)
            {
              v34 += 7;
              v15 = v35++ >= 9;
              if (v15)
              {
                v36 = 0;
                goto LABEL_83;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v36 = 0;
LABEL_83:
        v56 = v36 != 0;
        v57 = 137;
LABEL_84:
        *(_BYTE *)(a1 + v57) = v56;
        goto LABEL_74;
      case 0xCu:
        PBReaderReadData();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 96;
        goto LABEL_73;
      case 0xDu:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 48;
        goto LABEL_73;
      case 0xEu:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 112;
        goto LABEL_73;
      case 0xFu:
        v41 = 0;
        v42 = 0;
        v43 = 0;
        *(_BYTE *)(a1 + 140) |= 8u;
        while (2)
        {
          v44 = *v3;
          v45 = *(_QWORD *)(a2 + v44);
          v46 = v45 + 1;
          if (v45 == -1 || v46 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v47 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v45);
            *(_QWORD *)(a2 + v44) = v46;
            v43 |= (unint64_t)(v47 & 0x7F) << v41;
            if (v47 < 0)
            {
              v41 += 7;
              v15 = v42++ >= 9;
              if (v15)
              {
                LODWORD(v43) = 0;
                goto LABEL_88;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v43) = 0;
LABEL_88:
        *(_DWORD *)(a1 + 32) = v43;
        goto LABEL_74;
      case 0x10u:
        v26 = objc_alloc_init(SGDCKInteractionInfo);
        objc_storeStrong((id *)(a1 + 72), v26);
        if (PBReaderPlaceMark() && SGDCKInteractionInfoReadFrom((uint64_t)v26, a2))
        {
LABEL_64:
          PBReaderRecallMark();

LABEL_74:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_99:

        return 0;
      case 0x11u:
        v48 = 0;
        v49 = 0;
        v50 = 0;
        *(_BYTE *)(a1 + 140) |= 4u;
        while (2)
        {
          v51 = *v3;
          v52 = *(_QWORD *)(a2 + v51);
          v53 = v52 + 1;
          if (v52 == -1 || v53 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v54 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v52);
            *(_QWORD *)(a2 + v51) = v53;
            v50 |= (unint64_t)(v54 & 0x7F) << v48;
            if (v54 < 0)
            {
              v48 += 7;
              v15 = v49++ >= 9;
              if (v15)
              {
                v50 = 0;
                goto LABEL_92;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v50 = 0;
LABEL_92:
        *(_QWORD *)(a1 + 24) = -(v50 & 1) ^ (v50 >> 1);
        goto LABEL_74;
      case 0x12u:
        PBReaderReadData();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 88;
LABEL_73:
        v55 = *(void **)(a1 + v19);
        *(_QWORD *)(a1 + v19) = v18;

        goto LABEL_74;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_74;
    }
  }
}

void sub_1C37CD4D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

Class __getFKSuggestionsWalletOrderAttachmentClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!FinanceKitLibraryCore_frameworkLibrary)
    FinanceKitLibraryCore_frameworkLibrary = _sl_dlopen();
  if (!FinanceKitLibraryCore_frameworkLibrary)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *FinanceKitLibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("SGWalletOrderAttachmentDissector.m"), 27, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("FKSuggestionsWalletOrderAttachment");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getFKSuggestionsWalletOrderAttachmentClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("SGWalletOrderAttachmentDissector.m"), 28, CFSTR("Unable to find class %s"), "FKSuggestionsWalletOrderAttachment");

LABEL_8:
    __break(1u);
  }
  getFKSuggestionsWalletOrderAttachmentClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

const __CFString *walletOrderStateDescription(int a1)
{
  const __CFString *result;
  NSObject *v3;
  objc_class *v4;
  void *v5;
  int v6;
  void *v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  result = CFSTR("SGRealtimeWalletOrderStateNew");
  switch(a1)
  {
    case 0:
      sgLogHandle();
      v3 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      {
        v4 = (objc_class *)objc_opt_class();
        NSStringFromClass(v4);
        v5 = (void *)objc_claimAutoreleasedReturnValue();
        v6 = 138412546;
        v7 = v5;
        v8 = 1024;
        v9 = 0;
        _os_log_error_impl(&dword_1C3607000, v3, OS_LOG_TYPE_ERROR, "%@, Error in returning string for wallet order state %u:", (uint8_t *)&v6, 0x12u);

      }
      result = CFSTR("SGRealtimeWalletOrderStateUnknown");
      break;
    case 2:
      result = CFSTR("SGRealtimeWalletOrderStateUpdate");
      break;
    case 3:
      result = CFSTR("SGRealtimeWalletOrderStateDuplicate");
      break;
    case 4:
      result = CFSTR("SGRealtimeWalletOrderStateCancellation");
      break;
    default:
      return result;
  }
  return result;
}

uint64_t stateForWalletOrderString(void *a1)
{
  id v1;
  uint64_t v2;
  NSObject *v3;
  objc_class *v5;
  void *v6;
  int v7;
  void *v8;
  __int16 v9;
  id v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("SGRealtimeWalletOrderStateNew")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("SGRealtimeWalletOrderStateUpdate")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("SGRealtimeWalletOrderStateCancellation")) & 1) != 0)
  {
    v2 = 4;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("SGRealtimeWalletOrderStateDuplicate")) & 1) != 0)
  {
    v2 = 3;
  }
  else
  {
    sgLogHandle();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v5 = (objc_class *)objc_opt_class();
      NSStringFromClass(v5);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = 138412546;
      v8 = v6;
      v9 = 2112;
      v10 = v1;
      _os_log_error_impl(&dword_1C3607000, v3, OS_LOG_TYPE_ERROR, "%@, Error in returning wallet order state for string %@:", (uint8_t *)&v7, 0x16u);

    }
    v2 = 0;
  }

  return v2;
}

void sub_1C37CEAA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C37CEBBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__27943(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__27944(uint64_t a1)
{

}

void sub_1C37CF3A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__28009(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__28010(uint64_t a1)
{

}

id getTokenizerDispatchQueue()
{
  if (getTokenizerDispatchQueue__pasOnceToken2 != -1)
    dispatch_once(&getTokenizerDispatchQueue__pasOnceToken2, &__block_literal_global_252);
  return (id)getTokenizerDispatchQueue__pasExprOnceResult;
}

void __getTokenizerDispatchQueue_block_invoke()
{
  void *v0;
  NSObject *v1;
  NSObject *v2;
  dispatch_queue_t v3;
  void *v4;

  v0 = (void *)MEMORY[0x1C3BD4F6C]();
  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v1 = objc_claimAutoreleasedReturnValue();
  dispatch_queue_attr_make_with_qos_class(v1, QOS_CLASS_BACKGROUND, 0);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = dispatch_queue_create("com.apple.suggestions.ml.tokenizing", v2);
  v4 = (void *)getTokenizerDispatchQueue__pasExprOnceResult;
  getTokenizerDispatchQueue__pasExprOnceResult = (uint64_t)v3;

  objc_autoreleasePoolPop(v0);
}

void ___enumerateTokensInRange_block_invoke(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  void *v5;
  void *v6;

  v5 = (void *)MEMORY[0x1C3BD4F6C]();
  v6 = (void *)NLTaggerCopyTagForCurrentToken();
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  if (a3)
    *a3 = 0;

  objc_autoreleasePoolPop(v5);
}

uint64_t _createNLPTagger(int a1)
{
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  _QWORD v7[2];
  _QWORD v8[2];
  _QWORD v9[2];

  v9[1] = *MEMORY[0x1E0C80C00];
  v1 = (_QWORD *)MEMORY[0x1E0D174E0];
  if (!a1)
    v1 = (_QWORD *)MEMORY[0x1E0D174F0];
  v9[0] = *v1;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v9, 1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = *MEMORY[0x1E0D17530];
  v7[0] = *MEMORY[0x1E0D17528];
  v7[1] = v3;
  v8[0] = MEMORY[0x1E0C9AAB0];
  v8[1] = MEMORY[0x1E0C9AAB0];
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v8, v7, 2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = NLTaggerCreate();

  return v5;
}

void sub_1C37D11E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C37D149C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__28244(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__28245(uint64_t a1)
{

}

uint64_t re2::Regexp::ParseState::ParseState(uint64_t result, int a2, _OWORD *a3, uint64_t a4)
{
  int v4;

  *(_DWORD *)result = a2;
  *(_OWORD *)(result + 8) = *a3;
  *(_QWORD *)(result + 24) = a4;
  *(_QWORD *)(result + 32) = 0;
  if ((a2 & 0x20) != 0)
    v4 = 255;
  else
    v4 = 1114111;
  *(_DWORD *)(result + 40) = 0;
  *(_DWORD *)(result + 44) = v4;
  return result;
}

{
  int v4;

  *(_DWORD *)result = a2;
  *(_OWORD *)(result + 8) = *a3;
  *(_QWORD *)(result + 24) = a4;
  *(_QWORD *)(result + 32) = 0;
  if ((a2 & 0x20) != 0)
    v4 = 255;
  else
    v4 = 1114111;
  *(_DWORD *)(result + 40) = 0;
  *(_DWORD *)(result + 44) = v4;
  return result;
}

void re2::Regexp::ParseState::~ParseState(re2::Regexp::ParseState *this)
{
  re2::Regexp *i;
  re2::Regexp *v2;
  uint64_t v3;

  for (i = (re2::Regexp *)*((_QWORD *)this + 4); i; i = v2)
  {
    v2 = (re2::Regexp *)*((_QWORD *)i + 2);
    *((_QWORD *)i + 2) = 0;
    if (*(_BYTE *)i == 22)
    {
      v3 = *((_QWORD *)i + 4);
      if (v3)
      {
        if (*(char *)(v3 + 23) < 0)
          operator delete(*(void **)v3);
        MEMORY[0x1C3BD4858](v3, 0x1012C40EC159624);
      }
    }
    re2::Regexp::Decref(i);
  }
}

{
  re2::Regexp *i;
  re2::Regexp *v2;
  uint64_t v3;

  for (i = (re2::Regexp *)*((_QWORD *)this + 4); i; i = v2)
  {
    v2 = (re2::Regexp *)*((_QWORD *)i + 2);
    *((_QWORD *)i + 2) = 0;
    if (*(_BYTE *)i == 22)
    {
      v3 = *((_QWORD *)i + 4);
      if (v3)
      {
        if (*(char *)(v3 + 23) < 0)
          operator delete(*(void **)v3);
        MEMORY[0x1C3BD4858](v3, 0x1012C40EC159624);
      }
    }
    re2::Regexp::Decref(i);
  }
}

re2::Regexp *re2::Regexp::ParseState::FinishRegexp(re2::Regexp::ParseState *this, re2::Regexp *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (a2)
  {
    *((_QWORD *)a2 + 2) = 0;
    if (*(_BYTE *)a2 == 20)
    {
      v3 = *((_QWORD *)a2 + 4);
      if (v3)
      {
        *((_QWORD *)a2 + 4) = 0;
        v4 = operator new[]();
        *(_QWORD *)(v4 + 8) = v4 + 24;
        *(_DWORD *)(v4 + 16) = 0;
        *(_BYTE *)v4 = 0;
        *(_DWORD *)(v4 + 4) = 0;
        v5 = *(_QWORD **)(v3 + 16);
        if (v5 == (_QWORD *)(v3 + 24))
        {
          LODWORD(v6) = 0;
        }
        else
        {
          v6 = 0;
          do
          {
            *(_QWORD *)(*(_QWORD *)(v4 + 8) + 8 * v6) = *(_QWORD *)((char *)v5 + 28);
            v7 = (_QWORD *)v5[1];
            if (v7)
            {
              do
              {
                v8 = v7;
                v7 = (_QWORD *)*v7;
              }
              while (v7);
            }
            else
            {
              do
              {
                v8 = (_QWORD *)v5[2];
                v9 = *v8 == (_QWORD)v5;
                v5 = v8;
              }
              while (!v9);
            }
            ++v6;
            v5 = v8;
          }
          while (v8 != (_QWORD *)(v3 + 24));
        }
        *(_DWORD *)(v4 + 16) = v6;
        *(_DWORD *)(v4 + 4) = *(_DWORD *)(v3 + 8);
        *(_BYTE *)v4 = ((*(_DWORD *)(v3 + 4) ^ *(_DWORD *)v3) & 0x3FFFFFF) == 0;
        *((_QWORD *)a2 + 3) = v4;
        std::__tree<std::__value_type<unsigned long long,int>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,int>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,int>>>::destroy(*(_QWORD **)(v3 + 24));
        MEMORY[0x1C3BD4858](v3, 0x1020C4098A2B122);
      }
    }
  }
  return a2;
}

uint64_t re2::Regexp::ParseState::PushRegexp(re2::Regexp::ParseState *this, re2::Regexp *a2)
{
  unsigned int v4;
  uint64_t v5;
  int v6;
  int v7;
  re2::Regexp *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  uint64_t *v17;

  re2::Regexp::ParseState::MaybeConcatString((uint64_t)this, -1, 0);
  v4 = *(unsigned __int8 *)a2;
  if (v4 != 20)
  {
    if (v4 > 0x15)
      goto LABEL_20;
    goto LABEL_19;
  }
  v5 = *((_QWORD *)a2 + 4);
  v6 = *(_DWORD *)(v5 + 8);
  if (v6 == 2)
  {
    v10 = *(_DWORD *)(*(_QWORD *)(v5 + 16) + 28);
    if ((v10 - 65) > 0x19)
      goto LABEL_19;
    v13 = *(_QWORD *)(v5 + 24);
    v11 = v5 + 24;
    v12 = v13;
    if (!v13)
      goto LABEL_19;
    v7 = v10 + 32;
    v14 = v11;
    do
    {
      v15 = *(_DWORD *)(v12 + 32);
      v16 = v15 < v7;
      if (v15 >= v7)
        v17 = (uint64_t *)v12;
      else
        v17 = (uint64_t *)(v12 + 8);
      if (!v16)
        v14 = v12;
      v12 = *v17;
    }
    while (*v17);
    if (v14 == v11 || *(_DWORD *)(v14 + 28) > v7)
      goto LABEL_19;
    re2::Regexp::Decref(a2);
    v8 = (re2::Regexp *)mallocRegexp();
    a2 = v8;
    LOWORD(v9) = *(_WORD *)this;
    *(_WORD *)v8 = 3;
    LOWORD(v9) = v9 | 1;
    goto LABEL_5;
  }
  if (v6 == 1)
  {
    v7 = *(_DWORD *)(*(_QWORD *)(v5 + 16) + 28);
    re2::Regexp::Decref(a2);
    v8 = (re2::Regexp *)mallocRegexp();
    a2 = v8;
    v9 = *(_DWORD *)this;
    *(_WORD *)v8 = 3;
LABEL_5:
    *((_WORD *)v8 + 1) = v9;
    *((_WORD *)a2 + 2) = 1;
    *(_OWORD *)((char *)a2 + 22) = 0u;
    *(_OWORD *)((char *)a2 + 6) = 0u;
    *((_WORD *)a2 + 19) = 0;
    *((_DWORD *)a2 + 6) = v7;
  }
LABEL_19:
  *((_BYTE *)a2 + 1) = re2::Regexp::ComputeSimple(a2);
LABEL_20:
  *((_QWORD *)a2 + 2) = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = a2;
  return 1;
}

uint64_t re2::Regexp::ParseState::MaybeConcatString(uint64_t a1, int a2, __int16 a3)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  int v5;
  int v6;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *(unsigned __int8 **)(a1 + 32);
  if (v3)
  {
    v4 = (unsigned __int8 *)*((_QWORD *)v3 + 2);
    if (v4)
    {
      v5 = *v3;
      if ((v5 - 3) <= 1)
      {
        v6 = *v4;
        if ((v6 - 3) <= 1 && ((*((unsigned __int16 *)v4 + 1) ^ *((unsigned __int16 *)v3 + 1)) & 1) == 0)
        {
          if (v6 == 3)
          {
            v10 = *((_DWORD *)v4 + 6);
            *v4 = 4;
            *((_DWORD *)v4 + 6) = 0;
            *((_QWORD *)v4 + 4) = 0;
            re2::Regexp::AddRuneToString((uint64_t)v4, v10);
            v5 = *v3;
          }
          v11 = *((_DWORD *)v3 + 6);
          if (v5 == 3)
          {
            re2::Regexp::AddRuneToString((uint64_t)v4, v11);
          }
          else
          {
            if (v11 >= 1)
            {
              v12 = 0;
              do
                re2::Regexp::AddRuneToString((uint64_t)v4, *(_DWORD *)(*((_QWORD *)v3 + 4) + 4 * v12++));
              while (v12 < *((int *)v3 + 6));
            }
            *((_DWORD *)v3 + 6) = 0;
            v13 = *((_QWORD *)v3 + 4);
            if (v13)
              MEMORY[0x1C3BD4840](v13, 0x1000C8052888210);
            *((_QWORD *)v3 + 4) = 0;
          }
          if ((a2 & 0x80000000) == 0)
          {
            *v3 = 3;
            *((_DWORD *)v3 + 6) = a2;
            *((_WORD *)v3 + 1) = a3;
            return 1;
          }
          *(_QWORD *)(a1 + 32) = v4;
          re2::Regexp::Decref((re2::Regexp *)v3);
        }
      }
    }
  }
  return 0;
}

BOOL re2::Regexp::ParseState::IsMarker(uint64_t a1, int a2)
{
  return a2 > 21;
}

unint64_t re2::LookupCaseFold(unint64_t a1, int a2, unsigned int a3)
{
  unint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  v3 = a1;
  if (a2 < 1)
  {
LABEL_13:
    if (v3 >= a1 + 12 * a2)
      return 0;
    else
      return v3;
  }
  else
  {
    v4 = a2;
    v3 = a1;
    while (1)
    {
      v7 = v4 >> 1;
      v8 = *(_DWORD *)(v3 + 12 * (v4 >> 1));
      if (v8 <= a3 && *(_DWORD *)(v3 + 12 * v7 + 4) >= a3)
        return v3 + 12 * v7;
      v5 = v4 - (v7 + 1);
      if (v8 <= a3)
        v6 = v7 + 1;
      else
        v6 = 0;
      v3 += 12 * v6;
      if (v8 <= a3)
        v4 = v5;
      else
        v4 = v7;
      if (v4 <= 0)
        goto LABEL_13;
    }
  }
}

uint64_t re2::ApplyFold(_DWORD *a1, uint64_t a2)
{
  int v2;

  v2 = a1[2];
  if (v2 <= 0x3FFFFFFF)
  {
    if (v2 != -1)
    {
      if (v2 != 1)
        return (v2 + a2);
      goto LABEL_13;
    }
LABEL_8:
    if ((a2 & 0x80000001) == 1)
      return (a2 + 1);
    else
      return (a2 - 1);
  }
  if (v2 != 0x40000000)
  {
    if (v2 != 1073741825)
      return (v2 + a2);
    if ((((_DWORD)a2 - *a1) & 1) != 0)
      return a2;
    goto LABEL_8;
  }
  if ((((_DWORD)a2 - *a1) & 1) != 0)
    return a2;
LABEL_13:
  if ((a2 & 1) != 0)
    return (a2 - 1);
  else
    return (a2 + 1);
}

uint64_t re2::CycleFoldRune(uint64_t this)
{
  int v1;
  unsigned int *v2;
  BOOL v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  char v8;
  unsigned int v9;
  int v10;

  v1 = 289;
  v2 = (unsigned int *)&re2::unicode_casefold;
  do
  {
    v5 = v2;
    v6 = v1 >> 1;
    v7 = v2[3 * (v1 >> 1)];
    if (v7 <= this && v5[3 * v6 + 1] >= this)
    {
      v8 = this - v7;
      if (this < v7)
        return this;
LABEL_14:
      v10 = v5[3 * v6 + 2];
      if (v10 > 0x3FFFFFFF)
      {
        if (v10 == 0x40000000)
        {
          if ((v8 & 1) != 0)
            return this;
          goto LABEL_25;
        }
        if (v10 != 1073741825)
          return (v10 + this);
        if ((v8 & 1) != 0)
          return this;
      }
      else if (v10 != -1)
      {
        if (v10 != 1)
          return (v10 + this);
LABEL_25:
        if ((this & 1) != 0)
          return (this - 1);
        else
          return (this + 1);
      }
      if ((this & 0x80000001) == 1)
        return (this + 1);
      else
        return (this - 1);
    }
    v1 -= v6 + 1;
    v3 = v7 > this;
    if (v7 <= this)
      v4 = v6 + 1;
    else
      v4 = 0;
    v2 = &v5[3 * v4];
    if (v3)
      v1 = v6;
  }
  while (v1 > 0);
  if (v2 < &re2::num_unicode_casefold)
  {
    v9 = *v2;
    v6 = v4;
    v8 = this - v9;
    if (this >= v9)
      goto LABEL_14;
  }
  return this;
}

uint64_t re2::Regexp::ParseState::PushLiteral(re2::Regexp::ParseState *this, re2 *a2)
{
  int v4;
  char *v5;
  int v6;
  __int16 v7;
  __int16 v8;
  uint64_t v9;
  re2 *v10;

  v4 = *(_DWORD *)this;
  if ((*(_DWORD *)this & 1) != 0 && re2::CycleFoldRune((uint64_t)a2) != (_DWORD)a2)
  {
    v5 = (char *)mallocRegexp();
    v8 = *(_WORD *)this;
    *(_WORD *)v5 = 20;
    *((_WORD *)v5 + 1) = v8 & 0xFFFE;
    *((_WORD *)v5 + 2) = 1;
    *((_WORD *)v5 + 19) = 0;
    *(_OWORD *)(v5 + 22) = 0u;
    *(_OWORD *)(v5 + 6) = 0u;
    v9 = operator new();
    *(_QWORD *)(v9 + 32) = 0;
    *(_QWORD *)(v9 + 24) = 0;
    *(_QWORD *)(v9 + 16) = v9 + 24;
    *(_DWORD *)(v9 + 8) = 0;
    *(_QWORD *)v9 = 0;
    *((_QWORD *)v5 + 4) = v9;
    v10 = a2;
    do
    {
      if ((_DWORD)v10 != 10 || (*(_DWORD *)this & 0x800) == 0)
        re2::CharClassBuilder::AddRange(*((re2::CharClassBuilder **)v5 + 4), (int)v10, (uint64_t)v10);
      v10 = (re2 *)re2::CycleFoldRune((uint64_t)v10);
    }
    while ((_DWORD)v10 != (_DWORD)a2);
    re2::CharClassBuilder::RemoveAbove(*((_QWORD *)v5 + 4), *((unsigned int *)this + 11));
    goto LABEL_15;
  }
  if ((_DWORD)a2 == 10 && (v4 & 0x800) != 0)
  {
    v5 = (char *)mallocRegexp();
    v6 = *(_DWORD *)this;
    *(_WORD *)v5 = 1;
    *((_WORD *)v5 + 1) = v6;
    *((_WORD *)v5 + 2) = 1;
    *((_WORD *)v5 + 19) = 0;
    *(_OWORD *)(v5 + 22) = 0u;
    *(_OWORD *)(v5 + 6) = 0u;
LABEL_15:
    re2::Regexp::ParseState::PushRegexp(this, (re2::Regexp *)v5);
    return 1;
  }
  if ((re2::Regexp::ParseState::MaybeConcatString((uint64_t)this, (int)a2, v4) & 1) == 0)
  {
    v5 = (char *)mallocRegexp();
    v7 = *(_DWORD *)this;
    *(_WORD *)v5 = 3;
    *((_WORD *)v5 + 1) = v7;
    *((_WORD *)v5 + 2) = 1;
    *(_OWORD *)(v5 + 22) = 0u;
    *((_WORD *)v5 + 19) = 0;
    *(_OWORD *)(v5 + 6) = 0u;
    *((_DWORD *)v5 + 6) = (_DWORD)a2;
    goto LABEL_15;
  }
  return 1;
}

uint64_t re2::Regexp::ParseState::PushCarat(re2::Regexp::ParseState *this)
{
  int v2;
  char *v3;
  int v4;
  char v5;

  v2 = *(_DWORD *)this;
  v3 = (char *)mallocRegexp();
  v4 = *(_DWORD *)this;
  *(_OWORD *)(v3 + 6) = 0u;
  *(_OWORD *)(v3 + 22) = 0u;
  *((_WORD *)v3 + 19) = 0;
  if ((v2 & 0x10) != 0)
    v5 = 18;
  else
    v5 = 14;
  *v3 = v5;
  v3[1] = 0;
  *((_WORD *)v3 + 1) = v4;
  *((_WORD *)v3 + 2) = 1;
  re2::Regexp::ParseState::PushRegexp(this, (re2::Regexp *)v3);
  return 1;
}

uint64_t re2::Regexp::ParseState::PushSimpleOp(re2::Regexp::ParseState *a1, char a2)
{
  char *v4;
  __int16 v5;

  v4 = (char *)mallocRegexp();
  v5 = *(_DWORD *)a1;
  *v4 = a2;
  v4[1] = 0;
  *((_WORD *)v4 + 1) = v5;
  *((_WORD *)v4 + 2) = 1;
  *((_WORD *)v4 + 19) = 0;
  *(_OWORD *)(v4 + 22) = 0u;
  *(_OWORD *)(v4 + 6) = 0u;
  re2::Regexp::ParseState::PushRegexp(a1, (re2::Regexp *)v4);
  return 1;
}

uint64_t re2::Regexp::ParseState::PushWordBoundary(re2::Regexp::ParseState *this, int a2)
{
  char *v4;
  int v5;
  char v6;

  v4 = (char *)mallocRegexp();
  v5 = *(_DWORD *)this;
  *(_OWORD *)(v4 + 6) = 0u;
  *(_OWORD *)(v4 + 22) = 0u;
  *((_WORD *)v4 + 19) = 0;
  if (a2)
    v6 = 16;
  else
    v6 = 17;
  *v4 = v6;
  v4[1] = 0;
  *((_WORD *)v4 + 1) = v5;
  *((_WORD *)v4 + 2) = 1;
  re2::Regexp::ParseState::PushRegexp(this, (re2::Regexp *)v4);
  return 1;
}

uint64_t re2::Regexp::ParseState::PushDollar(re2::Regexp::ParseState *this)
{
  int v2;
  char *v3;
  __int16 v4;
  char *v5;
  __int16 v6;

  v2 = *(_DWORD *)this;
  if ((*(_DWORD *)this & 0x10) != 0)
  {
    *(_DWORD *)this = v2 | 0x8000;
    v5 = (char *)mallocRegexp();
    v6 = *(_DWORD *)this;
    *(_WORD *)v5 = 19;
    *((_WORD *)v5 + 1) = v6;
    *((_WORD *)v5 + 2) = 1;
    *((_WORD *)v5 + 19) = 0;
    *(_OWORD *)(v5 + 22) = 0u;
    *(_OWORD *)(v5 + 6) = 0u;
    re2::Regexp::ParseState::PushRegexp(this, (re2::Regexp *)v5);
    *(_DWORD *)this = v2;
  }
  else
  {
    v3 = (char *)mallocRegexp();
    v4 = *(_DWORD *)this;
    *(_WORD *)v3 = 15;
    *((_WORD *)v3 + 1) = v4;
    *((_WORD *)v3 + 2) = 1;
    *((_WORD *)v3 + 19) = 0;
    *(_OWORD *)(v3 + 22) = 0u;
    *(_OWORD *)(v3 + 6) = 0u;
    re2::Regexp::ParseState::PushRegexp(this, (re2::Regexp *)v3);
  }
  return 1;
}

uint64_t re2::Regexp::ParseState::PushDot(re2::Regexp::ParseState *this)
{
  int v2;
  char *v3;
  re2::CharClassBuilder **v4;
  int v5;
  uint64_t v6;

  v2 = *(_DWORD *)this & 0x808;
  v3 = (char *)mallocRegexp();
  v4 = (re2::CharClassBuilder **)v3;
  v5 = *(_DWORD *)this;
  if (v2 == 8)
  {
    *(_WORD *)v3 = 12;
    *((_WORD *)v3 + 1) = v5;
    *((_WORD *)v3 + 2) = 1;
    *(_OWORD *)(v3 + 6) = 0u;
    *(_OWORD *)(v3 + 22) = 0u;
    *((_WORD *)v3 + 19) = 0;
  }
  else
  {
    *(_WORD *)v3 = 20;
    *((_WORD *)v3 + 1) = v5 & 0xFFFE;
    *((_WORD *)v3 + 2) = 1;
    *(_OWORD *)(v3 + 6) = 0u;
    *(_OWORD *)(v3 + 22) = 0u;
    *((_WORD *)v3 + 19) = 0;
    v6 = operator new();
    *(_QWORD *)(v6 + 24) = 0;
    *(_QWORD *)(v6 + 32) = 0;
    *(_QWORD *)(v6 + 16) = v6 + 24;
    *(_DWORD *)(v6 + 8) = 0;
    *(_QWORD *)v6 = 0;
    v4[4] = (re2::CharClassBuilder *)v6;
    re2::CharClassBuilder::AddRange((re2::CharClassBuilder *)v6, 0, 9);
    re2::CharClassBuilder::AddRange(v4[4], 11, *((unsigned int *)this + 11));
  }
  re2::Regexp::ParseState::PushRegexp(this, (re2::Regexp *)v4);
  return 1;
}

uint64_t re2::Regexp::ParseState::PushRepeatOp(uint64_t a1, char a2, uint64_t *a3, int a4)
{
  unsigned __int8 *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  __int16 v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  BOOL v20;

  v5 = *(unsigned __int8 **)(a1 + 32);
  if (v5 && *v5 < 0x16u)
  {
    if (a4)
      v10 = *(_WORD *)a1 ^ 0x40;
    else
      v10 = *(_DWORD *)a1;
    v11 = (char *)mallocRegexp();
    *v11 = a2;
    v11[1] = 0;
    *((_WORD *)v11 + 1) = v10;
    *((_DWORD *)v11 + 1) = 65537;
    *(_OWORD *)(v11 + 8) = 0u;
    v12 = v11 + 8;
    *(_OWORD *)(v11 + 24) = 0u;
    v13 = *(_QWORD *)(a1 + 32);
    *((_QWORD *)v11 + 2) = *(_QWORD *)(v13 + 16);
    *(_QWORD *)(v13 + 16) = 0;
    if (*(_BYTE *)v13 == 20)
    {
      v14 = *(_QWORD *)(v13 + 32);
      if (v14)
      {
        *(_QWORD *)(v13 + 32) = 0;
        v15 = operator new[]();
        *(_QWORD *)(v15 + 8) = v15 + 24;
        *(_DWORD *)(v15 + 16) = 0;
        *(_BYTE *)v15 = 0;
        *(_DWORD *)(v15 + 4) = 0;
        v16 = *(_QWORD **)(v14 + 16);
        if (v16 == (_QWORD *)(v14 + 24))
        {
          LODWORD(v17) = 0;
        }
        else
        {
          v17 = 0;
          do
          {
            *(_QWORD *)(*(_QWORD *)(v15 + 8) + 8 * v17) = *(_QWORD *)((char *)v16 + 28);
            v18 = (_QWORD *)v16[1];
            if (v18)
            {
              do
              {
                v19 = v18;
                v18 = (_QWORD *)*v18;
              }
              while (v18);
            }
            else
            {
              do
              {
                v19 = (_QWORD *)v16[2];
                v20 = *v19 == (_QWORD)v16;
                v16 = v19;
              }
              while (!v20);
            }
            ++v17;
            v16 = v19;
          }
          while (v19 != (_QWORD *)(v14 + 24));
        }
        *(_DWORD *)(v15 + 16) = v17;
        *(_DWORD *)(v15 + 4) = *(_DWORD *)(v14 + 8);
        *(_BYTE *)v15 = ((*(_DWORD *)(v14 + 4) ^ *(_DWORD *)v14) & 0x3FFFFFF) == 0;
        *(_QWORD *)(v13 + 24) = v15;
        std::__tree<std::__value_type<unsigned long long,int>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,int>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,int>>>::destroy(*(_QWORD **)(v14 + 24));
        MEMORY[0x1C3BD4858](v14, 0x1020C4098A2B122);
        if (*((unsigned __int16 *)v11 + 3) >= 2u)
          v12 = (_QWORD *)*v12;
      }
    }
    *v12 = v13;
    v11[1] = re2::Regexp::ComputeSimple((re2::Regexp *)v11);
    *(_QWORD *)(a1 + 32) = v11;
    return 1;
  }
  else
  {
    result = 0;
    v7 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)v7 = 8;
    v8 = *a3;
    *(_DWORD *)(v7 + 16) = *((_DWORD *)a3 + 2);
    *(_QWORD *)(v7 + 8) = v8;
  }
  return result;
}

uint64_t re2::Regexp::ParseState::PushRepetition(re2::Regexp::ParseState *this, int a2, int a3, const re2::StringPiece *a4, int a5)
{
  unsigned __int8 *v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  uint64_t v12;
  __int16 v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  BOOL v23;

  if (a3 == -1)
  {
    if (a2 < 1001)
      goto LABEL_5;
LABEL_9:
    result = 0;
    v10 = *((_QWORD *)this + 3);
    v11 = 9;
    goto LABEL_10;
  }
  if (a3 > 1000 || a2 > 1000 || a3 < a2)
    goto LABEL_9;
LABEL_5:
  v8 = (unsigned __int8 *)*((_QWORD *)this + 4);
  if (!v8 || *v8 >= 0x16u)
  {
    result = 0;
    v10 = *((_QWORD *)this + 3);
    v11 = 8;
LABEL_10:
    *(_DWORD *)v10 = v11;
    v12 = *(_QWORD *)a4;
    *(_DWORD *)(v10 + 16) = *((_DWORD *)a4 + 2);
    *(_QWORD *)(v10 + 8) = v12;
    return result;
  }
  if (a5)
    v13 = *(_WORD *)this ^ 0x40;
  else
    v13 = *(_DWORD *)this;
  v14 = (char *)mallocRegexp();
  *(_WORD *)v14 = 10;
  *((_WORD *)v14 + 1) = v13;
  *((_DWORD *)v14 + 1) = 65537;
  *(_OWORD *)(v14 + 8) = 0u;
  v15 = v14 + 8;
  *(_OWORD *)(v14 + 24) = 0u;
  *((_DWORD *)v14 + 6) = a3;
  *((_DWORD *)v14 + 7) = a2;
  v16 = *((_QWORD *)this + 4);
  *((_QWORD *)v14 + 2) = *(_QWORD *)(v16 + 16);
  *(_QWORD *)(v16 + 16) = 0;
  if (*(_BYTE *)v16 == 20)
  {
    v17 = *(_QWORD *)(v16 + 32);
    if (v17)
    {
      *(_QWORD *)(v16 + 32) = 0;
      v18 = operator new[]();
      *(_QWORD *)(v18 + 8) = v18 + 24;
      *(_DWORD *)(v18 + 16) = 0;
      *(_BYTE *)v18 = 0;
      *(_DWORD *)(v18 + 4) = 0;
      v19 = *(_QWORD **)(v17 + 16);
      if (v19 == (_QWORD *)(v17 + 24))
      {
        LODWORD(v20) = 0;
      }
      else
      {
        v20 = 0;
        do
        {
          *(_QWORD *)(*(_QWORD *)(v18 + 8) + 8 * v20) = *(_QWORD *)((char *)v19 + 28);
          v21 = (_QWORD *)v19[1];
          if (v21)
          {
            do
            {
              v22 = v21;
              v21 = (_QWORD *)*v21;
            }
            while (v21);
          }
          else
          {
            do
            {
              v22 = (_QWORD *)v19[2];
              v23 = *v22 == (_QWORD)v19;
              v19 = v22;
            }
            while (!v23);
          }
          ++v20;
          v19 = v22;
        }
        while (v22 != (_QWORD *)(v17 + 24));
      }
      *(_DWORD *)(v18 + 16) = v20;
      *(_DWORD *)(v18 + 4) = *(_DWORD *)(v17 + 8);
      *(_BYTE *)v18 = ((*(_DWORD *)(v17 + 4) ^ *(_DWORD *)v17) & 0x3FFFFFF) == 0;
      *(_QWORD *)(v16 + 24) = v18;
      std::__tree<std::__value_type<unsigned long long,int>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,int>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,int>>>::destroy(*(_QWORD **)(v17 + 24));
      MEMORY[0x1C3BD4858](v17, 0x1020C4098A2B122);
      if (*((unsigned __int16 *)v14 + 3) >= 2u)
        v15 = (_QWORD *)*v15;
    }
  }
  *v15 = v16;
  v14[1] = re2::Regexp::ComputeSimple((re2::Regexp *)v14);
  *((_QWORD *)this + 4) = v14;
  return 1;
}

uint64_t re2::Regexp::ParseState::DoLeftParen(re2::Regexp::ParseState *this, const void **a2)
{
  char *v4;
  __int16 v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  const void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;

  v4 = (char *)mallocRegexp();
  v5 = *(_DWORD *)this;
  *(_WORD *)v4 = 22;
  *((_WORD *)v4 + 1) = v5;
  *((_WORD *)v4 + 2) = 1;
  *((_WORD *)v4 + 19) = 0;
  *(_OWORD *)(v4 + 22) = 0u;
  *(_OWORD *)(v4 + 6) = 0u;
  v6 = *((_DWORD *)this + 10) + 1;
  *((_DWORD *)this + 10) = v6;
  *((_DWORD *)v4 + 6) = v6;
  if (*a2)
  {
    v7 = operator new();
    v8 = (_QWORD *)v7;
    v9 = *((int *)a2 + 2);
    if ((v9 & 0x80000000) != 0)
      std::string::__throw_length_error[abi:ne180100]();
    v10 = *a2;
    if (v9 >= 0x17)
    {
      v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17)
        v12 = v9 | 7;
      v13 = v12 + 1;
      v11 = operator new(v12 + 1);
      v8[1] = v9;
      v8[2] = v13 | 0x8000000000000000;
      *v8 = v11;
    }
    else
    {
      *(_BYTE *)(v7 + 23) = v9;
      v11 = (void *)v7;
      if (!(_DWORD)v9)
        goto LABEL_10;
    }
    memmove(v11, v10, v9);
LABEL_10:
    *((_BYTE *)v11 + v9) = 0;
    *((_QWORD *)v4 + 4) = v8;
  }
  re2::Regexp::ParseState::PushRegexp(this, (re2::Regexp *)v4);
  return 1;
}

void sub_1C37D3414(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3BD4858](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

uint64_t re2::Regexp::ParseState::DoLeftParenNoCapture(re2::Regexp::ParseState *this)
{
  char *v2;
  __int16 v3;

  v2 = (char *)mallocRegexp();
  v3 = *(_DWORD *)this;
  *(_WORD *)v2 = 22;
  *((_WORD *)v2 + 1) = v3;
  *((_WORD *)v2 + 2) = 1;
  *(_OWORD *)(v2 + 22) = 0u;
  *((_WORD *)v2 + 19) = 0;
  *(_OWORD *)(v2 + 6) = 0u;
  *((_DWORD *)v2 + 6) = -1;
  re2::Regexp::ParseState::PushRegexp(this, (re2::Regexp *)v2);
  return 1;
}

uint64_t re2::Regexp::ParseState::DoVerticalBar(re2::Regexp::ParseState *this)
{
  unsigned __int8 *v2;
  char *v3;
  __int16 v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  int v9;
  unsigned __int8 *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v17;
  re2::CharClassBuilder *v18;
  unsigned int v19;
  __int16 v20;
  char *v21;
  __int16 v22;
  uint64_t v24;

  re2::Regexp::ParseState::MaybeConcatString((uint64_t)this, -1, 0);
  v2 = (unsigned __int8 *)*((_QWORD *)this + 4);
  if (!v2 || *v2 >= 0x16u)
  {
    v3 = (char *)mallocRegexp();
    v4 = *(_DWORD *)this;
    *(_WORD *)v3 = 2;
    *((_WORD *)v3 + 1) = v4;
    *((_WORD *)v3 + 2) = 1;
    *((_WORD *)v3 + 19) = 0;
    *(_OWORD *)(v3 + 22) = 0u;
    *(_OWORD *)(v3 + 6) = 0u;
    re2::Regexp::ParseState::PushRegexp(this, (re2::Regexp *)v3);
  }
  re2::Regexp::ParseState::DoCollapse((_BOOL8)this, 5);
  v5 = (unsigned __int8 *)*((_QWORD *)this + 4);
  if (v5 && (v6 = *((_QWORD *)v5 + 2)) != 0 && *(_BYTE *)v6 == 23)
  {
    v7 = *v5;
    v8 = v7 > 0x14;
    v9 = (1 << v7) & 0x101008;
    if (v8 || v9 == 0)
    {
      v11 = *(unsigned __int8 **)(v6 + 16);
    }
    else
    {
      v11 = *(unsigned __int8 **)(v6 + 16);
      if (v11)
      {
        v12 = *v11;
        switch(v12)
        {
          case 20:
            goto LABEL_20;
          case 12:
            goto LABEL_37;
          case 3:
            v13 = *((unsigned int *)v11 + 6);
            *v11 = 20;
            *((_QWORD *)v11 + 3) = 0;
            v14 = operator new();
            *(_QWORD *)(v14 + 32) = 0;
            *(_QWORD *)(v14 + 24) = 0;
            *(_QWORD *)(v14 + 16) = v14 + 24;
            *(_DWORD *)(v14 + 8) = 0;
            *(_QWORD *)v14 = 0;
            *((_QWORD *)v11 + 4) = v14;
            v15 = *((_WORD *)v11 + 1) & 1;
            re2::CharClassBuilder::AddRange((re2::CharClassBuilder *)v14, v13, v13);
            if ((v13 - 97) <= 0x19 && v15 != 0)
              re2::CharClassBuilder::AddRange((re2::CharClassBuilder *)v14, v13 - 32, (v13 - 32));
LABEL_20:
            v17 = *v5;
            if (v17 == 20)
            {
              re2::CharClassBuilder::AddCharClass(*((re2::CharClassBuilder **)v11 + 4), *((re2::CharClassBuilder **)v5 + 4));
            }
            else
            {
              if (v17 != 3)
              {
LABEL_31:
                v24 = *((_QWORD *)v11 + 4);
                if (v17 == 12)
                {
                  if (!v24)
                    goto LABEL_36;
                  goto LABEL_35;
                }
                if (*(_DWORD *)(v24 + 8) == 1114112)
                {
LABEL_35:
                  std::__tree<std::__value_type<unsigned long long,int>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,int>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,int>>>::destroy(*(_QWORD **)(v24 + 24));
                  MEMORY[0x1C3BD4858](v24, 0x1020C4098A2B122);
LABEL_36:
                  *((_QWORD *)v11 + 4) = 0;
                  *v11 = 12;
                }
LABEL_37:
                *((_QWORD *)this + 4) = v6;
                re2::Regexp::Decref((re2::Regexp *)v5);
                return 1;
              }
              v18 = (re2::CharClassBuilder *)*((_QWORD *)v11 + 4);
              v19 = *((_DWORD *)v5 + 6);
              v20 = *((_WORD *)v5 + 1);
              re2::CharClassBuilder::AddRange(v18, v19, v19);
              if (v19 - 97 <= 0x19 && (v20 & 1) != 0)
                re2::CharClassBuilder::AddRange(v18, v19 - 32, v19 - 32);
            }
            v17 = *v5;
            goto LABEL_31;
        }
      }
    }
    *((_QWORD *)v5 + 2) = v11;
    *(_QWORD *)(v6 + 16) = v5;
    *((_QWORD *)this + 4) = v6;
  }
  else
  {
    v21 = (char *)mallocRegexp();
    v22 = *(_DWORD *)this;
    *(_WORD *)v21 = 23;
    *((_WORD *)v21 + 1) = v22;
    *((_WORD *)v21 + 2) = 1;
    *((_WORD *)v21 + 19) = 0;
    *(_OWORD *)(v21 + 22) = 0u;
    *(_OWORD *)(v21 + 6) = 0u;
    re2::Regexp::ParseState::PushRegexp(this, (re2::Regexp *)v21);
  }
  return 1;
}

BOOL re2::Regexp::ParseState::DoCollapse(_BOOL8 result, uint64_t a2)
{
  unsigned int *v3;
  unsigned __int8 **v4;
  unsigned int v5;
  uint64_t v6;
  unsigned __int8 *v7;
  int v8;
  void **v9;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned __int8 *v12;
  char *v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  BOOL v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  re2::Regexp *v27;

  v3 = (unsigned int *)result;
  v4 = *(unsigned __int8 ***)(result + 32);
  if (v4)
  {
    v5 = *(unsigned __int8 *)v4;
    if (v5 <= 0x15)
    {
      LODWORD(v6) = 0;
      v7 = *(unsigned __int8 **)(result + 32);
      do
      {
        if (v5 == (_DWORD)a2)
          v8 = *((unsigned __int16 *)v7 + 3);
        else
          v8 = 1;
        v7 = (unsigned __int8 *)*((_QWORD *)v7 + 2);
        v6 = (v8 + v6);
        if (!v7)
          break;
        v5 = *v7;
      }
      while (v5 <= 0x15);
    }
    else
    {
      v6 = 0;
      v7 = 0;
    }
    if (v4[2] == v7)
      return result;
  }
  else
  {
    v6 = 0;
  }
  v9 = (void **)operator new[]();
  v10 = (unsigned __int8 *)*((_QWORD *)v3 + 4);
  if (v10)
  {
    v11 = *v10;
    if (v11 <= 0x15)
    {
      v14 = v6;
      while (1)
      {
        v12 = (unsigned __int8 *)*((_QWORD *)v10 + 2);
        if (v11 == (_DWORD)a2)
          break;
        *((_QWORD *)v10 + 2) = 0;
        if (v11 == 20)
        {
          v18 = *((_QWORD *)v10 + 4);
          if (v18)
          {
            *((_QWORD *)v10 + 4) = 0;
            v19 = operator new[]();
            *(_QWORD *)(v19 + 8) = v19 + 24;
            *(_DWORD *)(v19 + 16) = 0;
            *(_BYTE *)v19 = 0;
            *(_DWORD *)(v19 + 4) = 0;
            v20 = *(_QWORD **)(v18 + 16);
            if (v20 == (_QWORD *)(v18 + 24))
            {
              LODWORD(v15) = 0;
            }
            else
            {
              v15 = 0;
              do
              {
                *(_QWORD *)(*(_QWORD *)(v19 + 8) + 8 * v15) = *(_QWORD *)((char *)v20 + 28);
                v21 = (_QWORD *)v20[1];
                if (v21)
                {
                  do
                  {
                    v22 = v21;
                    v21 = (_QWORD *)*v21;
                  }
                  while (v21);
                }
                else
                {
                  do
                  {
                    v22 = (_QWORD *)v20[2];
                    v23 = *v22 == (_QWORD)v20;
                    v20 = v22;
                  }
                  while (!v23);
                }
                ++v15;
                v20 = v22;
              }
              while (v22 != (_QWORD *)(v18 + 24));
            }
            *(_DWORD *)(v19 + 16) = v15;
            *(_DWORD *)(v19 + 4) = *(_DWORD *)(v18 + 8);
            *(_BYTE *)v19 = ((*(_DWORD *)(v18 + 4) ^ *(_DWORD *)v18) & 0x3FFFFFF) == 0;
            *((_QWORD *)v10 + 3) = v19;
            std::__tree<std::__value_type<unsigned long long,int>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,int>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,int>>>::destroy(*(_QWORD **)(v18 + 24));
            MEMORY[0x1C3BD4858](v18, 0x1020C4098A2B122);
          }
        }
        v9[--v14] = v10;
        if (!v12)
          goto LABEL_15;
LABEL_21:
        v11 = *v12;
        v10 = v12;
        if (v11 > 0x15)
          goto LABEL_15;
      }
      v16 = *((unsigned __int16 *)v10 + 3);
      v17 = v10 + 8;
      if (v16 >= 2)
      {
        v17 = (_QWORD *)*v17;
      }
      else if (!*((_WORD *)v10 + 3))
      {
        goto LABEL_41;
      }
      v24 = v14;
      v25 = v17 - 1;
      do
      {
        v26 = v24;
        v27 = re2::Regexp::Incref((re2::Regexp *)v25[v16]);
        v24 = v26 - 1;
        v9[v26 - 1] = v27;
      }
      while (v16-- > 1);
      v14 = v26 - 1;
LABEL_41:
      re2::Regexp::Decref((re2::Regexp *)v10);
      if (!v12)
        goto LABEL_15;
      goto LABEL_21;
    }
  }
  v12 = 0;
LABEL_15:
  v13 = re2::Regexp::ConcatOrAlternate(a2, v9, v6, *v3, 1);
  MEMORY[0x1C3BD4840](v9, 0x20C8093837F09);
  result = re2::Regexp::ComputeSimple((re2::Regexp *)v13);
  v13[1] = result;
  *((_QWORD *)v13 + 2) = v12;
  *((_QWORD *)v3 + 4) = v13;
  return result;
}

BOOL re2::Regexp::ParseState::DoConcatenation(re2::Regexp::ParseState *this)
{
  unsigned __int8 *v2;
  char *v3;
  __int16 v4;

  v2 = (unsigned __int8 *)*((_QWORD *)this + 4);
  if (!v2 || *v2 >= 0x16u)
  {
    v3 = (char *)mallocRegexp();
    v4 = *(_DWORD *)this;
    *(_WORD *)v3 = 2;
    *((_WORD *)v3 + 1) = v4;
    *((_WORD *)v3 + 2) = 1;
    *((_WORD *)v3 + 19) = 0;
    *(_OWORD *)(v3 + 22) = 0u;
    *(_OWORD *)(v3 + 6) = 0u;
    re2::Regexp::ParseState::PushRegexp(this, (re2::Regexp *)v3);
  }
  return re2::Regexp::ParseState::DoCollapse((_BOOL8)this, 5);
}

uint64_t re2::Regexp::ParseState::DoRightParen(re2::Regexp **this)
{
  re2::Regexp *v2;
  re2::Regexp *v3;
  re2::Regexp *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  re2::Regexp *v10;
  re2::Regexp *v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  re2::Regexp **v15;

  re2::Regexp::ParseState::DoVerticalBar((re2::Regexp::ParseState *)this);
  v2 = this[4];
  this[4] = (re2::Regexp *)*((_QWORD *)v2 + 2);
  re2::Regexp::Decref(v2);
  re2::Regexp::ParseState::DoCollapse((_BOOL8)this, 6);
  v3 = this[4];
  if (v3 && (v4 = (re2::Regexp *)*((_QWORD *)v3 + 2)) != 0 && *(_BYTE *)v4 == 22)
  {
    this[4] = (re2::Regexp *)*((_QWORD *)v4 + 2);
    *(_DWORD *)this = *((unsigned __int16 *)v4 + 1);
    if (*((int *)v4 + 6) < 1)
    {
      re2::Regexp::Decref(v4);
      v4 = v3;
    }
    else
    {
      *(_BYTE *)v4 = 11;
      *((_WORD *)v4 + 3) = 1;
      *((_QWORD *)v3 + 2) = 0;
      if (*(_BYTE *)v3 == 20 && (v5 = *((_QWORD *)v3 + 4)) != 0)
      {
        *((_QWORD *)v3 + 4) = 0;
        v6 = operator new[]();
        *(_QWORD *)(v6 + 8) = v6 + 24;
        *(_DWORD *)(v6 + 16) = 0;
        *(_BYTE *)v6 = 0;
        *(_DWORD *)(v6 + 4) = 0;
        v7 = *(_QWORD **)(v5 + 16);
        if (v7 == (_QWORD *)(v5 + 24))
        {
          LODWORD(v8) = 0;
        }
        else
        {
          v8 = 0;
          do
          {
            *(_QWORD *)(*(_QWORD *)(v6 + 8) + 8 * v8) = *(_QWORD *)((char *)v7 + 28);
            v12 = (_QWORD *)v7[1];
            if (v12)
            {
              do
              {
                v13 = v12;
                v12 = (_QWORD *)*v12;
              }
              while (v12);
            }
            else
            {
              do
              {
                v13 = (_QWORD *)v7[2];
                v14 = *v13 == (_QWORD)v7;
                v7 = v13;
              }
              while (!v14);
            }
            ++v8;
            v7 = v13;
          }
          while (v13 != (_QWORD *)(v5 + 24));
        }
        *(_DWORD *)(v6 + 16) = v8;
        *(_DWORD *)(v6 + 4) = *(_DWORD *)(v5 + 8);
        *(_BYTE *)v6 = ((*(_DWORD *)(v5 + 4) ^ *(_DWORD *)v5) & 0x3FFFFFF) == 0;
        *((_QWORD *)v3 + 3) = v6;
        std::__tree<std::__value_type<unsigned long long,int>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,int>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,int>>>::destroy(*(_QWORD **)(v5 + 24));
        MEMORY[0x1C3BD4858](v5, 0x1020C4098A2B122);
        v15 = (re2::Regexp **)((char *)v4 + 8);
        if (*((unsigned __int16 *)v4 + 3) >= 2u)
          v15 = (re2::Regexp **)*v15;
      }
      else
      {
        v15 = (re2::Regexp **)((char *)v4 + 8);
      }
      *v15 = v3;
      *((_BYTE *)v4 + 1) = re2::Regexp::ComputeSimple(v4);
    }
    re2::Regexp::ParseState::PushRegexp((re2::Regexp::ParseState *)this, v4);
    return 1;
  }
  else
  {
    result = 0;
    v10 = this[3];
    *(_DWORD *)v10 = 6;
    v11 = this[1];
    *((_DWORD *)v10 + 4) = *((_DWORD *)this + 4);
    *((_QWORD *)v10 + 1) = v11;
  }
  return result;
}

BOOL re2::Regexp::ParseState::DoAlternation(re2::Regexp **this)
{
  re2::Regexp *v2;

  re2::Regexp::ParseState::DoVerticalBar((re2::Regexp::ParseState *)this);
  v2 = this[4];
  this[4] = (re2::Regexp *)*((_QWORD *)v2 + 2);
  re2::Regexp::Decref(v2);
  return re2::Regexp::ParseState::DoCollapse((_BOOL8)this, 6);
}

re2::Regexp *re2::Regexp::ParseState::DoFinish(re2::Regexp **this)
{
  re2::Regexp *v2;
  re2::Regexp *v3;
  re2::Regexp *v4;
  re2::Regexp *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;

  re2::Regexp::ParseState::DoVerticalBar((re2::Regexp::ParseState *)this);
  v2 = this[4];
  this[4] = (re2::Regexp *)*((_QWORD *)v2 + 2);
  re2::Regexp::Decref(v2);
  re2::Regexp::ParseState::DoCollapse((_BOOL8)this, 6);
  v3 = this[4];
  if (v3)
  {
    if (*((_QWORD *)v3 + 2))
    {
      v3 = 0;
      v4 = this[3];
      *(_DWORD *)v4 = 6;
      v5 = this[1];
      *((_DWORD *)v4 + 4) = *((_DWORD *)this + 4);
      *((_QWORD *)v4 + 1) = v5;
    }
    else
    {
      this[4] = 0;
      *((_QWORD *)v3 + 2) = 0;
      if (*(_BYTE *)v3 == 20)
      {
        v6 = *((_QWORD *)v3 + 4);
        if (v6)
        {
          *((_QWORD *)v3 + 4) = 0;
          v7 = operator new[]();
          *(_QWORD *)(v7 + 8) = v7 + 24;
          *(_DWORD *)(v7 + 16) = 0;
          *(_BYTE *)v7 = 0;
          *(_DWORD *)(v7 + 4) = 0;
          v8 = *(_QWORD **)(v6 + 16);
          if (v8 == (_QWORD *)(v6 + 24))
          {
            LODWORD(v9) = 0;
          }
          else
          {
            v9 = 0;
            do
            {
              *(_QWORD *)(*(_QWORD *)(v7 + 8) + 8 * v9) = *(_QWORD *)((char *)v8 + 28);
              v10 = (_QWORD *)v8[1];
              if (v10)
              {
                do
                {
                  v11 = v10;
                  v10 = (_QWORD *)*v10;
                }
                while (v10);
              }
              else
              {
                do
                {
                  v11 = (_QWORD *)v8[2];
                  v12 = *v11 == (_QWORD)v8;
                  v8 = v11;
                }
                while (!v12);
              }
              ++v9;
              v8 = v11;
            }
            while (v11 != (_QWORD *)(v6 + 24));
          }
          *(_DWORD *)(v7 + 16) = v9;
          *(_DWORD *)(v7 + 4) = *(_DWORD *)(v6 + 8);
          *(_BYTE *)v7 = ((*(_DWORD *)(v6 + 4) ^ *(_DWORD *)v6) & 0x3FFFFFF) == 0;
          *((_QWORD *)v3 + 3) = v7;
          std::__tree<std::__value_type<unsigned long long,int>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,int>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,int>>>::destroy(*(_QWORD **)(v6 + 24));
          MEMORY[0x1C3BD4858](v6, 0x1020C4098A2B122);
        }
      }
    }
  }
  else
  {
    this[4] = 0;
  }
  return v3;
}

unsigned __int8 *re2::Regexp::LeadingRegexp(unsigned __int8 *this, re2::Regexp *a2)
{
  int v2;

  v2 = *this;
  if (v2 == 2)
    return 0;
  if (v2 == 5 && *((unsigned __int16 *)this + 3) >= 2u)
  {
    if (***((_BYTE ***)this + 1) == 2)
      return 0;
    else
      return (unsigned __int8 *)**((_QWORD **)this + 1);
  }
  return this;
}

re2::Regexp *re2::Regexp::RemoveLeadingRegexp(re2::Regexp *this, re2::Regexp *a2)
{
  re2::Regexp *v2;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  __int16 v7;
  unsigned __int16 v9;

  v2 = this;
  v3 = *(unsigned __int8 *)this;
  if (v3 != 2)
  {
    if (v3 == 5 && *((unsigned __int16 *)this + 3) >= 2u)
    {
      v4 = *((_QWORD *)this + 1);
      if (**(_BYTE **)v4 != 2)
      {
        re2::Regexp::Decref(*(re2::Regexp **)v4);
        *(_QWORD *)v4 = 0;
        v5 = *((unsigned __int16 *)v2 + 3);
        if (v5 == 2)
        {
          v6 = *(_QWORD *)(v4 + 8);
          *(_QWORD *)(v4 + 8) = 0;
          re2::Regexp::Decref(v2);
          return (re2::Regexp *)v6;
        }
        else
        {
          v9 = v5 - 1;
          *((_WORD *)v2 + 3) = v9;
          memmove((void *)v4, (const void *)(v4 + 8), 8 * v9);
        }
      }
    }
    else
    {
      v7 = *((_WORD *)this + 1);
      re2::Regexp::Decref(this);
      v2 = (re2::Regexp *)mallocRegexp();
      *(_WORD *)v2 = 2;
      *((_WORD *)v2 + 1) = v7;
      *((_WORD *)v2 + 2) = 1;
      *(_OWORD *)((char *)v2 + 6) = 0u;
      *(_OWORD *)((char *)v2 + 22) = 0u;
      *((_WORD *)v2 + 19) = 0;
    }
  }
  return v2;
}

unsigned __int8 *re2::Regexp::LeadingString(unsigned __int8 *a1, _DWORD *a2, int *a3)
{
  int v3;
  unsigned __int8 *v4;
  unsigned __int8 *result;

  while (1)
  {
    v3 = *a1;
    if (v3 != 5)
      break;
    if (!*((_WORD *)a1 + 3))
    {
      *a3 = *((_WORD *)a1 + 1) & 1;
LABEL_11:
      result = 0;
      *a2 = 0;
      return result;
    }
    v4 = a1 + 8;
    if (*((_WORD *)a1 + 3) != 1)
      v4 = *(unsigned __int8 **)v4;
    a1 = *(unsigned __int8 **)v4;
  }
  *a3 = *((_WORD *)a1 + 1) & 1;
  if (v3 != 4)
  {
    if (v3 == 3)
    {
      *a2 = 1;
      return a1 + 24;
    }
    goto LABEL_11;
  }
  *a2 = *((_DWORD *)a1 + 6);
  return (unsigned __int8 *)*((_QWORD *)a1 + 4);
}

void re2::Regexp::RemoveLeadingString(re2::Regexp *this, re2::Regexp *a2)
{
  unint64_t v3;
  int v4;
  re2::Regexp *v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 v14;
  __int128 *v15;
  re2::Regexp *v16;
  unsigned int v17;
  std::ios_base *v18;
  __int128 *v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28[8];
  __int128 v29;
  __int128 v30;
  int v31;
  uint64_t v32;
  _OWORD v33[5];
  uint64_t v34;

  v3 = 0;
  v34 = *MEMORY[0x1E0C80C00];
  memset(v33, 0, 32);
  while (1)
  {
    v4 = *(unsigned __int8 *)this;
    if (v4 != 5)
      break;
    if (v3 <= 3)
      *((_QWORD *)v33 + v3++) = this;
    v5 = (re2::Regexp *)((char *)this + 8);
    if (*((unsigned __int16 *)this + 3) >= 2u)
      v5 = *(re2::Regexp **)v5;
    this = *(re2::Regexp **)v5;
  }
  if (v4 == 3)
  {
LABEL_17:
    *((_DWORD *)this + 6) = 0;
    *(_BYTE *)this = 2;
LABEL_18:
    if ((int)v3 < 1)
      return;
    goto LABEL_19;
  }
  if (v4 != 4)
    goto LABEL_18;
  v6 = *((_DWORD *)this + 6);
  v7 = v6 - (_DWORD)a2;
  if (v6 <= (int)a2)
  {
    v9 = *((_QWORD *)this + 4);
    if (v9)
      MEMORY[0x1C3BD4840](v9, 0x1000C8052888210);
    *((_QWORD *)this + 4) = 0;
    goto LABEL_17;
  }
  if (v6 - 1 == (_DWORD)a2)
  {
    v8 = *(_DWORD *)(*((_QWORD *)this + 4) + 4 * (int)a2);
    MEMORY[0x1C3BD4840]();
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 6) = v8;
    *(_BYTE *)this = 3;
    if ((int)v3 < 1)
      return;
  }
  else
  {
    *((_DWORD *)this + 6) = v7;
    memmove(*((void **)this + 4), (const void *)(*((_QWORD *)this + 4) + 4 * (int)a2), 4 * v7);
    if ((int)v3 < 1)
      return;
  }
LABEL_19:
  v10 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v25 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v11 = v3 + 1;
  v12 = MEMORY[0x1E0DE4FE0] + 64;
  v13 = MEMORY[0x1E0DE4FB8] + 16;
  do
  {
    v15 = (__int128 *)*((_QWORD *)v33 + (v11 - 2));
    v16 = (re2::Regexp *)((char *)v15 + 8);
    if (*((unsigned __int16 *)v15 + 3) >= 2u)
      v16 = *(re2::Regexp **)v16;
    if (**(_BYTE **)v16 == 2)
    {
      re2::Regexp::Decref(*(re2::Regexp **)v16);
      *(_QWORD *)v16 = 0;
      v17 = *((unsigned __int16 *)v15 + 3);
      if (v17 >= 2)
      {
        if (v17 == 2)
        {
          v19 = (__int128 *)*((_QWORD *)v16 + 1);
          *((_QWORD *)v16 + 1) = 0;
          v20 = *v15;
          v21 = v15[1];
          v22 = *((_QWORD *)v15 + 4);
          v23 = *((_QWORD *)v19 + 4);
          v24 = v19[1];
          *v15 = *v19;
          v15[1] = v24;
          *((_QWORD *)v15 + 4) = v23;
          *((_QWORD *)v19 + 4) = v22;
          *v19 = v20;
          v19[1] = v21;
          re2::Regexp::Decref((re2::Regexp *)v19);
        }
        else
        {
          v14 = v17 - 1;
          *((_WORD *)v15 + 3) = v14;
          memmove(v16, (char *)v16 + 8, 8 * v14);
        }
      }
      else
      {
        LOBYTE(v26) = 0;
        v32 = v12;
        v27 = v10;
        *(uint64_t *)((char *)&v28[-1] + *(_QWORD *)(v10 - 24)) = v25;
        v18 = (std::ios_base *)((char *)&v28[-1] + *(_QWORD *)(v27 - 24));
        std::ios_base::init(v18, v28);
        v18[1].__vftable = 0;
        v18[1].__fmtflags_ = -1;
        v27 = MEMORY[0x1E0DE4FE0] + 24;
        v32 = MEMORY[0x1E0DE4FE0] + 64;
        std::streambuf::basic_streambuf();
        v28[0] = v13;
        v29 = 0u;
        v30 = 0u;
        v31 = 16;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"Concat of ", 10);
        std::ostream::operator<<();
        LogMessage::~LogMessage(&v26);
        *((_QWORD *)v15 + 1) = 0;
        *(_BYTE *)v15 = 2;
      }
    }
    --v11;
  }
  while (v11 > 1);
}

void sub_1C37D4280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostream::~ostream();
  MEMORY[0x1C3BD4828](a9);
  _Unwind_Resume(a1);
}

void sub_1C37D42B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t re2::Regexp::FactorAlternation(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return re2::Regexp::FactorAlternationRecursive(a1, a2, a3, 8);
}

uint64_t re2::Regexp::FactorAlternationRecursive(uint64_t a1, uint64_t a2, unint64_t a3, int a4)
{
  uint64_t v4;
  unint64_t v6;
  unsigned int v7;
  int v8;
  re2::Regexp *v9;
  int *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  unint64_t v16;
  unsigned __int8 **i;
  int v18;
  int v19;
  unsigned __int8 **v20;
  unsigned int v21;
  unsigned int v22;
  int *v23;
  __int16 v24;
  unsigned __int8 *v25;
  re2::Regexp *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  re2::Regexp *v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  re2::Regexp *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  __int16 v42;
  unsigned __int8 *v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  unsigned __int8 *v48;
  unsigned __int16 v49;
  unsigned int v50;
  unint64_t v51;
  int v52;
  int v53;
  unint64_t v54;
  int v55;
  BOOL v56;
  uint64_t v57;
  unsigned __int8 *v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  std::ios_base *v62;
  _QWORD *v63;
  std::string *p_p;
  std::string::size_type size;
  uint64_t v66;
  uint64_t v67;
  __int128 *v68;
  uint64_t v69;
  __int128 *v70;
  __int128 *v71;
  int v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  re2::Regexp *v77;
  unint64_t v79;
  unint64_t v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  unint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  uint64_t v95;
  std::string __p;
  void *v97;
  uint64_t v98;
  uint64_t v99[8];
  __int128 v100;
  __int128 v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  __int128 *v106;
  __int128 v107;

  v81 = a3;
  v4 = a2;
  v94 = a4 - 1;
  if (a4 < 1)
    return v4;
  if ((a2 & 0x80000000) != 0)
  {
    v7 = 0;
    goto LABEL_51;
  }
  v6 = 0;
  v7 = 0;
  v8 = 0;
  a3 = 0;
  v9 = 0;
  v10 = 0;
  v11 = (a2 + 1);
  v12 = a2;
  v82 = v11;
  v80 = a2;
  do
  {
    if (v6 >= v12)
    {
      v21 = 0;
      v22 = 0;
      v23 = 0;
      if (v6 == v8)
        goto LABEL_6;
      goto LABEL_43;
    }
    for (i = *(unsigned __int8 ***)(a1 + 8 * v6); ; i = (unsigned __int8 **)*v20)
    {
      v18 = *(unsigned __int8 *)i;
      if (v18 != 5)
        break;
      v19 = *((unsigned __int16 *)i + 3);
      if (!*((_WORD *)i + 3))
      {
        v21 = 0;
        v23 = 0;
        v24 = *((_WORD *)i + 1);
        goto LABEL_30;
      }
      v20 = i + 1;
      if (v19 != 1)
        v20 = (unsigned __int8 **)*v20;
    }
    v24 = *((_WORD *)i + 1);
    if (v18 == 4)
    {
      v21 = *((_DWORD *)i + 6);
      v23 = (int *)i[4];
    }
    else
    {
      v25 = (unsigned __int8 *)(i + 3);
      v21 = v18 == 3;
      if (v18 == 3)
        v23 = (int *)v25;
      else
        v23 = 0;
    }
LABEL_30:
    v22 = v24 & 1;
    if ((_DWORD)a3 != v22)
    {
LABEL_42:
      if (v6 == v8)
        goto LABEL_6;
LABEL_43:
      if (v6 == v8 + 1)
      {
        v14 = *(char **)(a1 + 8 * v8);
      }
      else
      {
        v91 = v7;
        v88 = a3;
        v85 = re2::Regexp::LiteralString(v10, (int)v9, a3);
        v27 = v8;
        if ((uint64_t)v6 > v8)
        {
          do
            re2::Regexp::RemoveLeadingString(*(re2::Regexp **)(a1 + 8 * v27++), v9);
          while (v6 != v27);
        }
        v13 = re2::Regexp::FactorAlternationRecursive(a1 + 8 * v8, (v6 - v8), v81, v94);
        v84 = re2::Regexp::ConcatOrAlternate(6, a1 + 8 * v8, v13, v81, 0);
        v14 = (char *)mallocRegexp();
        *(_WORD *)v14 = 5;
        *((_WORD *)v14 + 1) = v81;
        *((_WORD *)v14 + 2) = 1;
        *(_OWORD *)(v14 + 6) = 0u;
        *(_OWORD *)(v14 + 22) = 0u;
        *((_WORD *)v14 + 19) = 0;
        v15 = (_QWORD *)operator new[]();
        *((_QWORD *)v14 + 1) = v15;
        *((_WORD *)v14 + 3) = 2;
        v11 = v82;
        *v15 = v85;
        v15[1] = v84;
        v7 = v91;
        LODWORD(a3) = v88;
        v12 = v80;
      }
      *(_QWORD *)(a1 + 8 * (int)v7++) = v14;
      goto LABEL_6;
    }
    if ((int)v9 >= (int)v21)
      v16 = v21;
    else
      v16 = v9;
    if ((int)v16 < 1)
    {
      v22 = a3;
      if (v6 != v8)
        goto LABEL_43;
LABEL_6:
      if (v6 >= v12)
      {
        v16 = v9;
      }
      else
      {
        v10 = v23;
        v16 = v21;
      }
      if (v6 < v12)
        a3 = v22;
      else
        a3 = a3;
      if (v6 < v12)
        v8 = v6;
      goto LABEL_14;
    }
    v26 = 0;
    while (v10[(_QWORD)v26] == v23[(_QWORD)v26])
    {
      v26 = (re2::Regexp *)((char *)v26 + 1);
      if ((re2::Regexp *)v16 == v26)
        goto LABEL_14;
    }
    v16 = (unint64_t)v26;
    v22 = a3;
    if (!(_DWORD)v26)
      goto LABEL_42;
LABEL_14:
    ++v6;
    v9 = (re2::Regexp *)v16;
  }
  while (v6 != v11);
  if ((v7 & 0x80000000) != 0)
  {
    LODWORD(v28) = 0;
    goto LABEL_83;
  }
LABEL_51:
  v29 = 0;
  v30 = 0;
  v28 = 0;
  v31 = 0;
  v32 = v7 + 1;
  v33 = v7;
  v86 = v7;
  v89 = v32;
  while (2)
  {
    v35 = v30;
    if (v29 >= v33)
    {
LABEL_69:
      if (v29 != v31)
      {
        if (v29 == v31 + 1)
        {
          v34 = *(char **)(a1 + 8 * v31);
        }
        else
        {
          re2::Regexp::Incref(v30);
          v37 = v31;
          v38 = v31;
          if ((uint64_t)v29 > v31)
          {
            do
            {
              v43 = *(unsigned __int8 **)(a1 + 8 * v38);
              v44 = *v43;
              if (v44 != 2)
              {
                if (v44 == 5 && *((unsigned __int16 *)v43 + 3) >= 2u)
                {
                  v45 = *((_QWORD *)v43 + 1);
                  if (**(_BYTE **)v45 != 2)
                  {
                    re2::Regexp::Decref(*(re2::Regexp **)v45);
                    *(_QWORD *)v45 = 0;
                    v46 = *((unsigned __int16 *)v43 + 3);
                    if (v46 == 2)
                    {
                      v92 = v37;
                      v47 = v28;
                      v48 = *(unsigned __int8 **)(v45 + 8);
                      *(_QWORD *)(v45 + 8) = 0;
                      re2::Regexp::Decref((re2::Regexp *)v43);
                      v43 = v48;
                      v28 = v47;
                      v37 = v92;
                    }
                    else
                    {
                      v49 = v46 - 1;
                      *((_WORD *)v43 + 3) = v49;
                      memmove((void *)v45, (const void *)(v45 + 8), 8 * v49);
                    }
                  }
                }
                else
                {
                  v42 = *((_WORD *)v43 + 1);
                  re2::Regexp::Decref(*(re2::Regexp **)(a1 + 8 * v38));
                  v43 = (unsigned __int8 *)mallocRegexp();
                  *(_WORD *)v43 = 2;
                  *((_WORD *)v43 + 1) = v42;
                  *((_WORD *)v43 + 2) = 1;
                  *(_OWORD *)(v43 + 6) = 0u;
                  *(_OWORD *)(v43 + 22) = 0u;
                  *((_WORD *)v43 + 19) = 0;
                }
              }
              *(_QWORD *)(a1 + 8 * v38++) = v43;
            }
            while (v29 != v38);
          }
          v39 = re2::Regexp::FactorAlternationRecursive(a1 + 8 * v37, (v29 - v31), v81, v94);
          v40 = re2::Regexp::ConcatOrAlternate(6, a1 + 8 * v37, v39, v81, 0);
          v34 = (char *)mallocRegexp();
          *(_WORD *)v34 = 5;
          *((_WORD *)v34 + 1) = v81;
          *((_WORD *)v34 + 2) = 1;
          *(_OWORD *)(v34 + 6) = 0u;
          *(_OWORD *)(v34 + 22) = 0u;
          *((_WORD *)v34 + 19) = 0;
          v41 = (_QWORD *)operator new[]();
          *((_QWORD *)v34 + 1) = v41;
          *((_WORD *)v34 + 3) = 2;
          *v41 = v30;
          v41[1] = v40;
          v33 = v86;
          v32 = v89;
        }
        *(_QWORD *)(a1 + 8 * (int)v28) = v34;
        v28 = (v28 + 1);
      }
      if (v29 < v33)
        v31 = v29;
      v30 = v35;
    }
    else
    {
      v35 = *(re2::Regexp **)(a1 + 8 * v29);
      v36 = *(unsigned __int8 *)v35;
      if (v36 == 2)
      {
        v35 = 0;
        if (!v30)
          goto LABEL_69;
      }
      else
      {
        if (v36 == 5 && *((unsigned __int16 *)v35 + 3) >= 2u)
        {
          if (***((_BYTE ***)v35 + 1) == 2)
            v35 = 0;
          else
            v35 = (re2::Regexp *)**((_QWORD **)v35 + 1);
        }
        if (!v30)
          goto LABEL_69;
      }
      if (!re2::Regexp::Equal(v30, v35, (re2::Regexp *)a3))
        goto LABEL_69;
    }
    if (++v29 != v32)
      continue;
    break;
  }
  if ((v28 & 0x80000000) != 0)
    return 0;
LABEL_83:
  v50 = v28;
  v51 = 0;
  v52 = 0;
  v53 = 0;
  v90 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v93 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v54 = v50;
  v95 = v50 + 1;
  v87 = MEMORY[0x1E0DE4FE0] + 64;
  v83 = MEMORY[0x1E0DE4FB8] + 16;
  v79 = v50;
  while (2)
  {
    if (v51 >= v54 || ((v55 = **(unsigned __int8 **)(a1 + 8 * v51), v55 != 3) ? (v56 = v55 == 20) : (v56 = 1), !v56))
    {
      if (v51 == v53)
        goto LABEL_94;
      if (v51 == v53 + 1)
      {
        *(_QWORD *)(a1 + 8 * v52++) = *(_QWORD *)(a1 + 8 * v53);
LABEL_94:
        if (v51 < v54)
LABEL_95:
          *(_QWORD *)(a1 + 8 * v52++) = *(_QWORD *)(a1 + 8 * v51);
      }
      else
      {
        v105 = 0;
        v107 = 0u;
        v106 = &v107;
        v57 = v53;
        v104 = 0;
        if ((uint64_t)v51 > v53)
        {
          do
          {
            v58 = *(unsigned __int8 **)(a1 + 8 * v57);
            v59 = *v58;
            if (v59 == 3)
            {
              re2::CharClassBuilder::AddRangeFlags((re2 *)&v104, *((unsigned int *)v58 + 6), *((unsigned int *)v58 + 6), *((_WORD *)v58 + 1));
            }
            else if (v59 == 20)
            {
              v60 = *((_QWORD *)v58 + 3);
              if (*(_DWORD *)(v60 + 16))
              {
                v61 = *(_QWORD *)(v60 + 8);
                do
                {
                  re2::CharClassBuilder::AddRange((re2::CharClassBuilder *)&v104, *(_DWORD *)v61, *(unsigned int *)(v61 + 4));
                  v61 += 8;
                }
                while (v61 != *(_QWORD *)(v60 + 8) + 8 * *(int *)(v60 + 16));
              }
            }
            else
            {
              LOBYTE(v97) = 0;
              v103 = v87;
              v98 = v93;
              *(uint64_t *)((char *)&v99[-1] + *(_QWORD *)(v93 - 24)) = v90;
              v62 = (std::ios_base *)((char *)&v99[-1] + *(_QWORD *)(v98 - 24));
              std::ios_base::init(v62, v99);
              v62[1].__vftable = 0;
              v62[1].__fmtflags_ = -1;
              v98 = MEMORY[0x1E0DE4FE0] + 24;
              v103 = MEMORY[0x1E0DE4FE0] + 64;
              std::streambuf::basic_streambuf();
              v99[0] = v83;
              v100 = 0u;
              v101 = 0u;
              v102 = 16;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v98, (uint64_t)"RE2: unexpected op: ", 20);
              v63 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)" ", 1);
              re2::Regexp::ToString((re2::Regexp *)v58, &__p);
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                p_p = &__p;
              else
                p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
              else
                size = __p.__r_.__value_.__l.__size_;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)p_p, size);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              LogMessage::~LogMessage(&v97);
            }
            re2::Regexp::Decref((re2::Regexp *)v58);
            ++v57;
          }
          while (v51 != v57);
        }
        v66 = operator new[]();
        v54 = v79;
        v67 = v66;
        *(_QWORD *)(v66 + 8) = v66 + 24;
        *(_DWORD *)(v66 + 16) = 0;
        *(_BYTE *)v66 = 0;
        *(_DWORD *)(v66 + 4) = 0;
        v68 = v106;
        if (v106 == &v107)
        {
          LODWORD(v69) = 0;
        }
        else
        {
          v69 = 0;
          do
          {
            *(_QWORD *)(*(_QWORD *)(v66 + 8) + 8 * v69) = *(_QWORD *)((char *)v68 + 28);
            v70 = (__int128 *)*((_QWORD *)v68 + 1);
            if (v70)
            {
              do
              {
                v71 = v70;
                v70 = *(__int128 **)v70;
              }
              while (v70);
            }
            else
            {
              do
              {
                v71 = (__int128 *)*((_QWORD *)v68 + 2);
                v56 = *(_QWORD *)v71 == (_QWORD)v68;
                v68 = v71;
              }
              while (!v56);
            }
            ++v69;
            v68 = v71;
          }
          while (v71 != &v107);
        }
        *(_DWORD *)(v66 + 16) = v69;
        v72 = HIDWORD(v104);
        *(_DWORD *)(v66 + 4) = v105;
        *(_BYTE *)v66 = ((v72 ^ v104) & 0x3FFFFFF) == 0;
        v73 = (char *)mallocRegexp();
        *(_WORD *)v73 = 20;
        *((_WORD *)v73 + 1) = v81;
        *((_WORD *)v73 + 2) = 1;
        *(_OWORD *)(v73 + 22) = 0u;
        *(_OWORD *)(v73 + 6) = 0u;
        *((_WORD *)v73 + 19) = 0;
        *((_QWORD *)v73 + 3) = v67;
        *(_QWORD *)(a1 + 8 * v52) = v73;
        std::__tree<std::__value_type<unsigned long long,int>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,int>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,int>>>::destroy((_QWORD *)v107);
        ++v52;
        if (v51 < v79)
          goto LABEL_95;
      }
      v53 = v51 + 1;
    }
    if (++v51 != v95)
      continue;
    break;
  }
  if (v52 < 1)
    return 0;
  v74 = 0;
  v4 = 0;
  v75 = v52;
  do
  {
    v76 = v74 + 1;
    v77 = *(re2::Regexp **)(a1 + 8 * v74);
    if (v74 + 1 < v75 && *(_BYTE *)v77 == 2 && **(_BYTE **)(a1 + 8 * v74 + 8) == 2)
    {
      re2::Regexp::Decref(v77);
    }
    else
    {
      *(_QWORD *)(a1 + 8 * (int)v4) = v77;
      v4 = (v4 + 1);
    }
    v74 = v76;
  }
  while (v75 != v76);
  return v4;
}

void sub_1C37D4BD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  uint64_t v26;

  std::__tree<std::__value_type<unsigned long long,int>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,int>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,int>>>::destroy(*(_QWORD **)(v26 - 104));
  _Unwind_Resume(a1);
}

void re2::CharClassBuilder::AddRangeFlags(re2 *this, uint64_t a2, uint64_t a3, __int16 a4)
{
  char v4;
  re2 *v6;

  v4 = a4;
  v6 = this;
  if ((int)a3 < 10 || (int)a2 > 10 || (a4 & 0x804) == 4)
  {
    if ((a4 & 1) != 0)
      goto LABEL_9;
LABEL_11:
    re2::CharClassBuilder::AddRange(this, a2, a3);
    return;
  }
  if ((int)a2 > 9)
    goto LABEL_7;
  if ((a4 & 1) == 0)
  {
    re2::CharClassBuilder::AddRange(this, a2, 9);
LABEL_7:
    if (a3 < 0xB)
      return;
LABEL_8:
    this = v6;
    a2 = 11;
    if ((v4 & 1) != 0)
    {
LABEL_9:
      re2::AddFoldedRange(this, (re2::CharClassBuilder *)a2, a3, 0);
      return;
    }
    goto LABEL_11;
  }
  re2::AddFoldedRange(this, (re2::CharClassBuilder *)a2, 9, 0);
  if (a3 >= 0xB)
    goto LABEL_8;
}

void re2::AddFoldedRange(re2 *this, re2::CharClassBuilder *a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  signed int v10;
  unsigned int v11;
  int v13;
  int v14;
  int v15;
  int v16;
  unsigned int *v17;
  BOOL v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  signed int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  BOOL v29;
  int v30;
  int v31;
  void *v32;
  uint64_t v33;
  uint64_t v34[8];
  __int128 v35;
  __int128 v36;
  int v37;
  uint64_t v38;

  if (a4 < 11)
  {
    v10 = a3;
    v11 = a2;
    v13 = re2::CharClassBuilder::AddRange(this, (int)a2, a3);
    if ((int)v11 <= v10 && v13)
    {
      v15 = a4 + 1;
LABEL_7:
      v16 = 289;
      v17 = (unsigned int *)&re2::unicode_casefold;
      do
      {
        v20 = v16 >> 1;
        v21 = v17[3 * (v16 >> 1)];
        if (v21 <= v11 && v17[3 * v20 + 1] >= v11)
        {
          v17 += 3 * v20;
          if (v11 >= v21)
          {
LABEL_20:
            v23 = v17[1];
            v22 = v17[2];
            if (v23 >= v10)
              v24 = v10;
            else
              v24 = v23;
            if ((v24 & 0x80000001) == 1)
              v25 = v24 + 1;
            else
              v25 = v24;
            if ((v11 & 0x80000001) == 1)
              v26 = -1;
            else
              v26 = 0;
            v27 = v24 | 1;
            v28 = v24 + v22;
            if (v22 == 1)
              v28 = v27;
            else
              v26 = v22;
            v29 = v22 == -1;
            if (v22 == -1)
              v30 = (v11 & 1) - 1;
            else
              v30 = v26;
            if (v29)
              v31 = v25;
            else
              v31 = v28;
            re2::AddFoldedRange(this, (re2::CharClassBuilder *)(v30 + v11), v31, v15, v14);
            v21 = v23 + 1;
          }
LABEL_6:
          v11 = v21;
          if ((int)v21 > v10)
            return;
          goto LABEL_7;
        }
        v16 -= v20 + 1;
        v18 = v21 > v11;
        if (v21 <= v11)
          v19 = v20 + 1;
        else
          v19 = 0;
        v17 += 3 * v19;
        if (v18)
          v16 = v20;
      }
      while (v16 > 0);
      if (v17 < &re2::num_unicode_casefold)
      {
        v21 = *v17;
        if (v11 >= *v17)
          goto LABEL_20;
        goto LABEL_6;
      }
    }
  }
  else
  {
    LOBYTE(v32) = 0;
    v4 = MEMORY[0x1E0DE4FE0];
    v5 = MEMORY[0x1E0DE4FE0] + 64;
    v6 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v38 = MEMORY[0x1E0DE4FE0] + 64;
    v33 = v6;
    *(uint64_t *)((char *)&v34[-1] + *(_QWORD *)(v6 - 24)) = v7;
    v8 = (std::ios_base *)((char *)&v34[-1] + *(_QWORD *)(v33 - 24));
    std::ios_base::init(v8, v34);
    v8[1].__vftable = 0;
    v8[1].__fmtflags_ = -1;
    v33 = v4 + 24;
    v38 = v5;
    std::streambuf::basic_streambuf();
    v34[0] = MEMORY[0x1E0DE4FB8] + 16;
    v35 = 0u;
    v36 = 0u;
    v37 = 16;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)"AddFoldedRange recurses too much.", 33);
    LogMessage::~LogMessage(&v32);
  }
}

void sub_1C37D4F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  LogMessage::~LogMessage(&a9);
  _Unwind_Resume(a1);
}

void sub_1C37D4F34(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1C3BD4828](v1 + 120);
  _Unwind_Resume(a1);
}

char **re2::MaybeParsePerlCCEscape(uint64_t a1, char a2)
{
  int v2;
  int v3;
  _BYTE *v4;
  int v5;
  char **v6;

  if ((a2 & 0x80) == 0)
    return 0;
  v2 = *(_DWORD *)(a1 + 8);
  v3 = v2 - 2;
  if (v2 < 2)
    return 0;
  v4 = *(_BYTE **)a1;
  if (**(_BYTE **)a1 != 92)
    return 0;
  v5 = v4[1];
  switch(v5)
  {
    case 'D':
      if (*v4 == 92)
      {
        v6 = &off_1E7DB24B8;
        goto LABEL_23;
      }
      v5 = v4[1];
      break;
    case 'd':
      v6 = &re2::perl_groups;
LABEL_23:
      *(_QWORD *)a1 = v4 + 2;
      *(_DWORD *)(a1 + 8) = v3;
      return v6;
    case 's':
      if (*v4 == 92)
      {
        v6 = &off_1E7DB24E8;
        goto LABEL_23;
      }
      break;
    case 'S':
      if (*v4 == 92)
      {
        v6 = &off_1E7DB2518;
        goto LABEL_23;
      }
      break;
    default:
      goto LABEL_17;
  }
  v5 = v4[1];
LABEL_17:
  if (v5 == 119 && *v4 == 92)
  {
    v6 = &off_1E7DB2548;
    goto LABEL_23;
  }
  if (v4[1] == 87 && *v4 == 92)
  {
    v6 = &off_1E7DB2578;
    goto LABEL_23;
  }
  return 0;
}

uint64_t re2::ParseUnicodeGroup(unsigned __int8 **a1, __int16 a2, re2 *a3, re2::RegexpStatus *a4)
{
  const re2::StringPiece *v6;
  unsigned int v7;
  unsigned __int8 *v8;
  int v9;
  int v12;
  int v13;
  re2 *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  const re2::StringPiece *v23;
  unsigned __int8 *v24;
  char **v25;
  uint64_t v26;
  const char *v27;
  const char *v28;
  re2 *v29;
  int v30;
  int v31;
  int v32;
  int v34;
  int v35;
  int v36;

  if ((a2 & 0x400) == 0)
    return 2;
  v6 = (const re2::StringPiece *)*((unsigned int *)a1 + 2);
  v7 = (_DWORD)v6 - 2;
  if ((int)v6 < 2)
    return 2;
  v8 = *a1;
  if (**a1 != 92)
    return 2;
  v9 = (char)v8[1];
  if ((v9 & 0xFFFFFFDF) != 0x50)
    return 2;
  if (v9 == 80)
    v12 = 1;
  else
    v12 = -1;
  if (v9 == 80)
    v13 = -1;
  else
    v13 = 1;
  v14 = (re2 *)(v8 + 2);
  *a1 = v8 + 2;
  *((_DWORD *)a1 + 2) = v7;
  if ((int)v6 >= 3)
  {
    v15 = *(unsigned __int8 *)v14;
    if ((*(char *)v14 & 0x80000000) == 0)
    {
      *a1 = v8 + 3;
      *((_DWORD *)a1 + 2) = (_DWORD)v6 - 3;
      v9 = v15;
      goto LABEL_36;
    }
    if (v7 >= 2 && (v15 < 0xE0 || v7 >= 3 && ((_DWORD)v6 != 5 || v15 <= 0xEF)))
    {
      v16 = v8[3] ^ 0x80;
      if (v16 <= 0x3F)
      {
        if (v15 > 0xDF)
        {
          v18 = v8[4] ^ 0x80;
          if (v18 <= 0x3F)
          {
            if (v15 > 0xEF)
            {
              v9 = 65533;
              if (v15 > 0xF7 || (v8[5] ^ 0x80u) > 0x3F)
                goto LABEL_35;
              if ((unsigned __int16)((((_WORD)v16 << 6) | ((_WORD)v15 << 12) | v18) & 0x7FFF) << 6 >= 0x10000u)
              {
                v17 = 4;
                goto LABEL_48;
              }
            }
            else if ((((v15 & 0xF) << 12) | (v16 << 6)) >= 0x800)
            {
              v17 = 3;
              goto LABEL_48;
            }
          }
        }
        else if (v15 >= 0xC0 && (((v15 & 0x1F) << 6) | v16) >= 0x80)
        {
          v17 = 2;
LABEL_48:
          *a1 = (unsigned __int8 *)v14 + v17;
          *((_DWORD *)a1 + 2) = v7 - v17;
          goto LABEL_49;
        }
      }
      v9 = 65533;
    }
  }
LABEL_35:
  *(_DWORD *)a4 = 12;
  *((_QWORD *)a4 + 1) = 0;
  *((_DWORD *)a4 + 4) = 0;
LABEL_36:
  if (v9 == 123)
  {
    v36 = v12;
    v19 = *((unsigned int *)a1 + 2);
    if ((int)v19 < 1
      || ((v14 = (re2 *)*a1,
           v20 = &(*a1)[v19],
           (v21 = (unsigned __int8 *)memchr(*a1, 125, *((unsigned int *)a1 + 2))) != 0)
        ? (v22 = v21)
        : (v22 = v20),
          (v23 = (const re2::StringPiece *)(v22 - (unsigned __int8 *)v14), v22 - (unsigned __int8 *)v14 == v19)
       || (_DWORD)v23 == -1))
    {
      if (re2::IsValidUTF8((re2 *)v8, v6, a4))
      {
        *(_DWORD *)a4 = 4;
        *((_QWORD *)a4 + 1) = v8;
        *((_DWORD *)a4 + 4) = (_DWORD)v6;
      }
    }
    else
    {
      *a1 = (unsigned __int8 *)v14 + (int)v23 + 1;
      *((_DWORD *)a1 + 2) = v19 - ((_DWORD)v23 + 1);
      if (re2::IsValidUTF8(v14, v23, a4))
      {
        v24 = *a1;
        v12 = v36;
        goto LABEL_50;
      }
    }
    return 1;
  }
LABEL_49:
  v24 = *a1;
  LODWORD(v23) = *a1 - (_DWORD)v14;
LABEL_50:
  if ((int)v23 < 1)
  {
    v34 = v13;
    goto LABEL_59;
  }
  if (*(_BYTE *)v14 == 94)
  {
    v14 = (re2 *)((char *)v14 + 1);
    LODWORD(v23) = (_DWORD)v23 - 1;
    v13 = v12;
  }
  v34 = v13;
  if ((_DWORD)v23 != 3 || *((_BYTE *)v14 + 2) != 121 || *(_BYTE *)v14 != 65 || *((_BYTE *)v14 + 1) != 110)
  {
LABEL_59:
    v26 = 0;
    v35 = (_DWORD)v24 - (_DWORD)v8;
    do
    {
      v25 = &(&re2::unicode_groups)[6 * v26];
      v27 = *v25;
      if (*v25)
      {
        if ((_DWORD)v23 == strlen(*v25))
        {
          if ((int)v23 < 1)
            goto LABEL_73;
          if (v27[(_DWORD)v23 - 1] == *((unsigned __int8 *)v14 + ((_DWORD)v23 - 1)))
          {
            v28 = v27 + 1;
            v29 = v14;
            do
            {
              v30 = *((unsigned __int8 *)v28 - 1);
              v32 = *(unsigned __int8 *)v29;
              v29 = (re2 *)((char *)v29 + 1);
              v31 = v32;
            }
            while (v30 == v32 && v28++ < &v27[v23]);
            if (v30 == v31)
            {
LABEL_73:
              v13 = v34;
              goto LABEL_74;
            }
          }
        }
      }
      else if (!(_DWORD)v23)
      {
        goto LABEL_73;
      }
      ++v26;
    }
    while (v26 != 138);
    *(_DWORD *)a4 = 4;
    *((_QWORD *)a4 + 1) = v8;
    *((_DWORD *)a4 + 4) = v35;
    return 1;
  }
  v25 = &re2::anygroup;
LABEL_74:
  re2::AddUGroup(a3, (uint64_t)v25, v13, a2);
  return 0;
}

BOOL re2::IsValidUTF8(re2 *this, const re2::StringPiece *a2, re2::RegexpStatus *a3)
{
  int v3;
  BOOL v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  v3 = (_DWORD)a2 - 1;
  if ((int)a2 >= 1)
  {
    while (1)
    {
      while ((*(char *)this & 0x80000000) == 0)
      {
        this = (re2 *)((char *)this + 1);
        LODWORD(a2) = v3;
        v4 = __OFSUB__(v3--, 1);
        if (v3 < 0 != v4)
          return (int)a2 < 1;
      }
      if (a2 < 2)
        break;
      v5 = *(unsigned __int8 *)this;
      if (v5 >= 0xE0)
      {
        if (a2 < 3 || (_DWORD)a2 == 3 && v5 >= 0xF0)
          break;
        v8 = *((unsigned __int8 *)this + 1) ^ 0x80;
        if (v8 >= 0x40 || *((char *)this + 2) > -65)
          break;
        if (v5 > 0xEF)
        {
          if (v5 > 0xF7 || *((char *)this + 3) > -65 || (((v5 & 7) << 18) | (v8 << 12)) < 0x10000)
            break;
          v7 = 4;
        }
        else
        {
          if ((((v5 & 0xF) << 12) | (v8 << 6)) < 0x800)
            break;
          v7 = 3;
        }
      }
      else
      {
        v6 = *((unsigned __int8 *)this + 1) ^ 0x80;
        if (v6 >= 0x40 || v5 < 0xC0 || ((v5 << 6) & 0x780 | v6) < 0x80)
          break;
        v7 = 2;
      }
      this = (re2 *)((char *)this + v7);
      LODWORD(a2) = (_DWORD)a2 - v7;
      v3 = (_DWORD)a2 - 1;
      if ((int)a2 < 1)
        return (int)a2 < 1;
    }
    *(_DWORD *)a3 = 12;
    *((_QWORD *)a3 + 1) = 0;
    *((_DWORD *)a3 + 4) = 0;
  }
  return (int)a2 < 1;
}

void re2::AddUGroup(re2 *this, uint64_t a2, int a3, __int16 a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 *v21;
  __int128 *v22;
  __int128 *v23;
  BOOL v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  int8x8_t v30[2];
  __int128 *v31;
  __int128 v32;

  if (a3 == 1)
  {
    if (*(int *)(a2 + 24) >= 1)
    {
      v7 = 0;
      v8 = 0;
      do
      {
        re2::CharClassBuilder::AddRangeFlags(this, *(unsigned __int16 *)(*(_QWORD *)(a2 + 16) + v7), *(unsigned __int16 *)(*(_QWORD *)(a2 + 16) + v7 + 2), a4);
        ++v8;
        v7 += 4;
      }
      while (v8 < *(int *)(a2 + 24));
    }
    if (*(int *)(a2 + 40) >= 1)
    {
      v9 = 0;
      v10 = 0;
      do
      {
        re2::CharClassBuilder::AddRangeFlags(this, *(unsigned int *)(*(_QWORD *)(a2 + 32) + v9), *(unsigned int *)(*(_QWORD *)(a2 + 32) + v9 + 4), a4);
        ++v10;
        v9 += 8;
      }
      while (v10 < *(int *)(a2 + 40));
    }
  }
  else if ((a4 & 1) != 0)
  {
    v30[1] = 0;
    v32 = 0u;
    v31 = &v32;
    v30[0] = 0;
    if (*(int *)(a2 + 24) >= 1)
    {
      v17 = 0;
      v18 = 0;
      do
      {
        re2::CharClassBuilder::AddRangeFlags((re2 *)v30, *(unsigned __int16 *)(*(_QWORD *)(a2 + 16) + v17), *(unsigned __int16 *)(*(_QWORD *)(a2 + 16) + v17 + 2), a4);
        ++v18;
        v17 += 4;
      }
      while (v18 < *(int *)(a2 + 24));
    }
    if (*(int *)(a2 + 40) >= 1)
    {
      v19 = 0;
      v20 = 0;
      do
      {
        re2::CharClassBuilder::AddRangeFlags((re2 *)v30, *(unsigned int *)(*(_QWORD *)(a2 + 32) + v19), *(unsigned int *)(*(_QWORD *)(a2 + 32) + v19 + 4), a4);
        ++v20;
        v19 += 8;
      }
      while (v20 < *(int *)(a2 + 40));
    }
    if ((a4 & 0x804) != 4)
      re2::CharClassBuilder::AddRange((re2::CharClassBuilder *)v30, 10, 10);
    re2::CharClassBuilder::Negate(v30);
    v21 = v31;
    if (v31 != &v32)
    {
      do
      {
        re2::CharClassBuilder::AddRange(this, *((_DWORD *)v21 + 7), *((unsigned int *)v21 + 8));
        v22 = (__int128 *)*((_QWORD *)v21 + 1);
        if (v22)
        {
          do
          {
            v23 = v22;
            v22 = *(__int128 **)v22;
          }
          while (v22);
        }
        else
        {
          do
          {
            v23 = (__int128 *)*((_QWORD *)v21 + 2);
            v24 = *(_QWORD *)v23 == (_QWORD)v21;
            v21 = v23;
          }
          while (!v24);
        }
        v21 = v23;
      }
      while (v23 != &v32);
    }
    std::__tree<std::__value_type<unsigned long long,int>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,int>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,int>>>::destroy((_QWORD *)v32);
  }
  else
  {
    v11 = *(_DWORD *)(a2 + 24);
    if (v11 < 1)
    {
      v14 = 0;
    }
    else
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v15 = *(_QWORD *)(a2 + 16);
      do
      {
        v16 = *(unsigned __int16 *)(v15 + v12);
        if (v14 < v16)
        {
          re2::CharClassBuilder::AddRangeFlags(this, v14, v16 - 1, a4);
          v15 = *(_QWORD *)(a2 + 16);
          v11 = *(_DWORD *)(a2 + 24);
        }
        v14 = *(unsigned __int16 *)(v15 + v12 + 2) + 1;
        ++v13;
        v12 += 4;
      }
      while (v13 < v11);
    }
    v25 = *(_DWORD *)(a2 + 40);
    if (v25 < 1)
      goto LABEL_39;
    v26 = 0;
    v27 = 0;
    v28 = *(_QWORD *)(a2 + 32);
    do
    {
      v29 = *(_DWORD *)(v28 + v26);
      if (v14 < v29)
      {
        re2::CharClassBuilder::AddRangeFlags(this, v14, v29 - 1, a4);
        v28 = *(_QWORD *)(a2 + 32);
        v25 = *(_DWORD *)(a2 + 40);
      }
      v14 = (*(_DWORD *)(v28 + v26 + 4) + 1);
      ++v27;
      v26 += 8;
    }
    while (v27 < v25);
    if ((int)v14 < 1114112)
LABEL_39:
      re2::CharClassBuilder::AddRangeFlags(this, v14, 1114111, a4);
  }
}

void sub_1C37D57FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _QWORD *a13)
{
  std::__tree<std::__value_type<unsigned long long,int>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,int>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,int>>>::destroy(a13);
  _Unwind_Resume(a1);
}

uint64_t re2::Regexp::ParseState::ParseCCCharacter(re2::Regexp::ParseState *this, re2::StringPiece *a2, re2::StringPiece *a3, const re2::StringPiece *a4, re2::RegexpStatus *a5)
{
  int v5;
  unsigned __int8 *v6;
  unsigned int v7;
  uint64_t result;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;

  v5 = *((_DWORD *)a2 + 2);
  if (!v5)
  {
    result = 0;
    *(_DWORD *)a5 = 5;
    v9 = *(_QWORD *)a4;
    *((_DWORD *)a5 + 4) = *((_DWORD *)a4 + 2);
    *((_QWORD *)a5 + 1) = v9;
    return result;
  }
  if (v5 >= 1)
  {
    v6 = *(unsigned __int8 **)a2;
    v7 = **(unsigned __int8 **)a2;
    if (v7 == 92)
      return re2::ParseEscape(a2, a3, a5, (re2::RegexpStatus *)*((unsigned int *)this + 11));
    if ((v7 & 0x80) == 0)
    {
      *(_DWORD *)a3 = v7;
      *(_QWORD *)a2 = v6 + 1;
      v10 = *((_DWORD *)a2 + 2) - 1;
LABEL_8:
      *((_DWORD *)a2 + 2) = v10;
      return 1;
    }
    if (v5 >= 2 && (v7 < 0xE0 || v5 >= 3 && (v5 != 3 || v7 <= 0xEF)))
    {
      v11 = v6[1] ^ 0x80;
      if (v11 <= 0x3F)
      {
        if (v7 > 0xDF)
        {
          v14 = v6[2] ^ 0x80;
          if (v14 <= 0x3F)
          {
            if (v7 > 0xEF)
            {
              if (v7 <= 0xF7)
              {
                v16 = v6[3] ^ 0x80;
                if (v16 <= 0x3F)
                {
                  v17 = (((unsigned __int16)(((_WORD)v11 << 6) | ((_WORD)v7 << 12)) | (unsigned __int16)v14) & 0x7FFF) << 6;
                  if (v17 >= 0x10000)
                  {
                    v12 = v17 | v16;
                    v13 = 4;
                    goto LABEL_30;
                  }
                }
              }
            }
            else
            {
              v15 = ((v7 & 0xF) << 12) | (v11 << 6);
              if (v15 >= 0x800)
              {
                v12 = v15 | v14;
                v13 = 3;
                goto LABEL_30;
              }
            }
          }
        }
        else if (v7 >= 0xC0)
        {
          v12 = ((v7 & 0x1F) << 6) | v11;
          if (v12 >= 0x80)
          {
            v13 = 2;
LABEL_30:
            *(_DWORD *)a3 = v12;
            *(_QWORD *)a2 = &v6[v13];
            v10 = *((_DWORD *)a2 + 2) - v13;
            goto LABEL_8;
          }
        }
      }
      *(_DWORD *)a3 = 65533;
    }
  }
  result = 0;
  *(_DWORD *)a5 = 12;
  *((_QWORD *)a5 + 1) = 0;
  *((_DWORD *)a5 + 4) = 0;
  return result;
}

uint64_t re2::ParseEscape(re2 *this, re2::StringPiece *a2, re2::StringPiece *a3, re2::RegexpStatus *a4)
{
  int v5;
  unsigned __int8 *v7;
  unsigned int v8;
  uint64_t result;
  int v10;
  int v11;
  unsigned int v13;
  char *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  re2::RegexpStatus *v22;
  re2 *v23;
  int v24;
  int v25;
  re2::RegexpStatus *v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  re2 *v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  int v36;
  unsigned int v37;
  re2 *v38;

  v5 = *((_DWORD *)this + 2);
  if (v5 < 1 || (v7 = *(unsigned __int8 **)this, **(_BYTE **)this != 92))
  {
    result = 0;
    v10 = 1;
    goto LABEL_6;
  }
  v8 = v5 - 1;
  if (v5 <= 1)
  {
    result = 0;
    v10 = 7;
LABEL_6:
    *(_DWORD *)a3 = v10;
    *((_QWORD *)a3 + 1) = 0;
    *((_DWORD *)a3 + 4) = 0;
    return result;
  }
  v11 = (int)a4;
  v37 = 0;
  *(_QWORD *)this = v7 + 1;
  *((_DWORD *)this + 2) = v8;
  v13 = v7[1];
  if ((v13 & 0x80) != 0)
  {
    if (v8 >= 2 && (v13 < 0xE0 || v8 >= 3 && (v5 != 4 || v13 <= 0xEF)))
    {
      v19 = v7[2] ^ 0x80;
      if (v19 <= 0x3F)
      {
        if (v13 > 0xDF)
        {
          v29 = v7[3] ^ 0x80;
          if (v29 <= 0x3F)
          {
            if (v13 > 0xEF)
            {
              if (v13 <= 0xF7)
              {
                v33 = v7[4] ^ 0x80;
                if (v33 <= 0x3F)
                {
                  v34 = (((unsigned __int16)(((_WORD)v19 << 6) | ((_WORD)v13 << 12)) | (unsigned __int16)v29) & 0x7FFF) << 6;
                  if (v34 >= 0x10000)
                  {
                    v13 = v34 | v33;
                    v20 = 4;
                    goto LABEL_72;
                  }
                }
              }
            }
            else
            {
              v30 = ((v13 & 0xF) << 12) | (v19 << 6);
              if (v30 >= 0x800)
              {
                v13 = v30 | v29;
                v20 = 3;
                goto LABEL_72;
              }
            }
          }
        }
        else if (v13 >= 0xC0)
        {
          v13 = ((v13 & 0x1F) << 6) | v19;
          if (v13 >= 0x80)
          {
            v20 = 2;
LABEL_72:
            LODWORD(v38) = v13;
            v14 = (char *)&v7[v20 + 1];
            *(_QWORD *)this = v14;
            v15 = v8 - v20;
            goto LABEL_9;
          }
        }
      }
    }
    result = 0;
    v10 = 12;
    goto LABEL_6;
  }
  LODWORD(v38) = v7[1];
  v14 = (char *)(v7 + 2);
  *(_QWORD *)this = v7 + 2;
  v15 = v5 - 2;
LABEL_9:
  *((_DWORD *)this + 2) = v15;
  v16 = v13 - 48;
  switch(v13)
  {
    case '0':
      goto LABEL_12;
    case '1':
    case '2':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
      if (!v15 || *v14 - 56 < 0xFFFFFFF8)
        goto LABEL_78;
LABEL_12:
      if (v15 >= 1)
      {
        v17 = *v14;
        if ((v17 & 0xFFFFFFF8) == 0x30)
        {
          v16 = v17 + 8 * v16 - 48;
          *(_QWORD *)this = v14 + 1;
          *((_DWORD *)this + 2) = v15 - 1;
          if (v15 != 1)
          {
            v18 = v14[1];
            if ((v18 & 0xFFFFFFF8) == 0x30)
            {
              v16 = v18 + 8 * v16 - 48;
              *(_QWORD *)this = v14 + 2;
              *((_DWORD *)this + 2) = v15 - 2;
            }
          }
        }
      }
      if (v16 > (int)a4)
        goto LABEL_78;
      *(_DWORD *)a2 = v16;
      return 1;
    case 'a':
      v13 = 7;
      goto LABEL_40;
    case 'f':
      v13 = 12;
      goto LABEL_40;
    case 'n':
      v13 = 10;
      goto LABEL_40;
    case 'r':
      v13 = 13;
      goto LABEL_40;
    case 't':
      v13 = 9;
      goto LABEL_40;
    case 'v':
      v13 = 11;
      goto LABEL_40;
    case 'x':
      if (!v15)
        goto LABEL_78;
      if ((re2::StringPieceToRune((re2 *)&v38, (int *)this, a3, a4) & 0x80000000) != 0)
        return 0;
      v23 = (re2 *)v38;
      if ((_DWORD)v38 == 123)
      {
        if ((re2::StringPieceToRune((re2 *)&v38, (int *)this, a3, v22) & 0x80000000) == 0)
        {
          v24 = 0;
          v25 = 0;
          while (((_DWORD)v38 - 58) > 0xFFFFFFF5 || (v38 & 0xFFFFFFDF) - 71 >= 0xFFFFFFFA)
          {
            v24 = re2::UnHex((re2 *)v38) | (16 * v24);
            if (v24 > v11 || !*((_DWORD *)this + 2))
              goto LABEL_78;
            v28 = re2::StringPieceToRune((re2 *)&v38, (int *)this, a3, v27);
            result = 0;
            ++v25;
            if (v28 < 0)
              return result;
          }
          if ((_DWORD)v38 == 125 && v25 != 0)
          {
            *(_DWORD *)a2 = v24;
            return 1;
          }
          goto LABEL_78;
        }
        return 0;
      }
      if (!*((_DWORD *)this + 2))
        goto LABEL_78;
      if ((re2::StringPieceToRune((re2 *)&v37, (int *)this, a3, v22) & 0x80000000) != 0)
        return 0;
      if (((_DWORD)v23 - 58) <= 0xFFFFFFF5 && (v23 & 0xFFFFFFDF) - 71 < 0xFFFFFFFA
        || (v31 = (re2 *)v37, v37 - 58 <= 0xFFFFFFF5) && (v37 & 0xFFFFFFDF) - 71 < 0xFFFFFFFA)
      {
LABEL_78:
        result = 0;
        *(_DWORD *)a3 = 2;
        v36 = *(_DWORD *)this - (_DWORD)v7;
        *((_QWORD *)a3 + 1) = v7;
        *((_DWORD *)a3 + 4) = v36;
        return result;
      }
      v32 = re2::UnHex(v23);
      v13 = re2::UnHex(v31) | (16 * v32);
LABEL_40:
      *(_DWORD *)a2 = v13;
      return 1;
    default:
      if ((int)v13 > 127)
        goto LABEL_78;
      v21 = MEMORY[0x1E0C80978] + 4 * v13;
      if ((*(_DWORD *)(v21 + 60) & 0x100) != 0 || (*(_DWORD *)(v21 + 60) & 0x400) != 0)
        goto LABEL_78;
      goto LABEL_40;
  }
}

uint64_t re2::StringPieceToRune(re2 *this, int *a2, re2::StringPiece *a3, re2::RegexpStatus *a4)
{
  int v4;
  unsigned __int8 *v5;
  unsigned int v6;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;

  v4 = a2[2];
  if (v4 < 1)
    goto LABEL_23;
  v5 = *(unsigned __int8 **)a2;
  v6 = **(unsigned __int8 **)a2;
  if ((**(char **)a2 & 0x80000000) == 0)
  {
    *(_DWORD *)this = v6;
    *(_QWORD *)a2 = v5 + 1;
    --a2[2];
    return 1;
  }
  if (v4 < 2 || v6 >= 0xE0 && (v4 < 3 || v4 == 3 && v6 > 0xEF))
    goto LABEL_23;
  v8 = v5[1] ^ 0x80;
  if (v8 > 0x3F)
    goto LABEL_22;
  if (v6 > 0xDF)
  {
    v11 = v5[2] ^ 0x80;
    if (v11 <= 0x3F)
    {
      if (v6 > 0xEF)
      {
        if (v6 <= 0xF7)
        {
          v13 = v5[3] ^ 0x80;
          if (v13 <= 0x3F)
          {
            v14 = (((unsigned __int16)(((_WORD)v8 << 6) | ((_WORD)v6 << 12)) | (unsigned __int16)v11) & 0x7FFF) << 6;
            if (v14 >= 0x10000)
            {
              v9 = v14 | v13;
              v10 = 4;
              goto LABEL_25;
            }
          }
        }
      }
      else
      {
        v12 = ((v6 & 0xF) << 12) | (v8 << 6);
        if (v12 >= 0x800)
        {
          v9 = v12 | v11;
          v10 = 3;
          goto LABEL_25;
        }
      }
    }
    goto LABEL_22;
  }
  if (v6 < 0xC0 || (v9 = ((v6 & 0x1F) << 6) | v8, v9 < 0x80))
  {
LABEL_22:
    *(_DWORD *)this = 65533;
LABEL_23:
    *(_DWORD *)a3 = 12;
    *((_QWORD *)a3 + 1) = 0;
    *((_DWORD *)a3 + 4) = 0;
    return 0xFFFFFFFFLL;
  }
  v10 = 2;
LABEL_25:
  *(_DWORD *)this = v9;
  *(_QWORD *)a2 = &v5[v10];
  a2[2] -= v10;
  return v10;
}

uint64_t re2::UnHex(re2 *this)
{
  int v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10[8];
  __int128 v11;
  __int128 v12;
  int v13;
  uint64_t v14;

  v1 = (int)this;
  result = ((_DWORD)this - 48);
  if (result >= 0xA)
  {
    if ((v1 - 65) > 5)
    {
      if ((v1 - 97) > 5)
      {
        LOBYTE(v8) = 0;
        v3 = MEMORY[0x1E0DE4FE0];
        v4 = MEMORY[0x1E0DE4FE0] + 64;
        v5 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
        v6 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
        v14 = MEMORY[0x1E0DE4FE0] + 64;
        v9 = v5;
        *(uint64_t *)((char *)&v10[-1] + *(_QWORD *)(v5 - 24)) = v6;
        v7 = (std::ios_base *)((char *)&v10[-1] + *(_QWORD *)(v9 - 24));
        std::ios_base::init(v7, v10);
        v7[1].__vftable = 0;
        v7[1].__fmtflags_ = -1;
        v9 = v3 + 24;
        v14 = v4;
        std::streambuf::basic_streambuf();
        v10[0] = MEMORY[0x1E0DE4FB8] + 16;
        v11 = 0u;
        v12 = 0u;
        v13 = 16;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)"Bad hex digit ", 14);
        std::ostream::operator<<();
        LogMessage::~LogMessage(&v8);
        return 0;
      }
      else
      {
        return (v1 - 87);
      }
    }
    else
    {
      return (v1 - 55);
    }
  }
  return result;
}

void sub_1C37D600C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1C3BD4828](v1 + 120);
  _Unwind_Resume(a1);
}

void sub_1C37D6034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  LogMessage::~LogMessage(&a9);
  _Unwind_Resume(a1);
}

uint64_t re2::Regexp::ParseState::ParseCCRange(re2::Regexp::ParseState *a1, re2::StringPiece *a2, uint64_t a3, const re2::StringPiece *a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t result;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;

  v10 = *(_QWORD *)a2;
  result = re2::Regexp::ParseState::ParseCCCharacter(a1, a2, (re2::StringPiece *)a3, a4, (re2::RegexpStatus *)a5);
  if ((_DWORD)result)
  {
    v12 = *((_DWORD *)a2 + 2);
    if (v12 < 2
      || (v13 = *(_QWORD *)a2, **(_BYTE **)a2 != 45)
      || (v15 = *(unsigned __int8 *)(v13 + 1), v14 = v13 + 1, v15 == 93))
    {
      *(_DWORD *)(a3 + 4) = *(_DWORD *)a3;
      return 1;
    }
    *(_QWORD *)a2 = v14;
    *((_DWORD *)a2 + 2) = v12 - 1;
    result = re2::Regexp::ParseState::ParseCCCharacter(a1, a2, (re2::StringPiece *)(a3 + 4), a4, (re2::RegexpStatus *)a5);
    if ((_DWORD)result)
    {
      if (*(_DWORD *)(a3 + 4) < *(_DWORD *)a3)
      {
        result = 0;
        *(_DWORD *)a5 = 4;
        v16 = *(_DWORD *)a2 - v10;
        *(_QWORD *)(a5 + 8) = v10;
        *(_DWORD *)(a5 + 16) = v16;
        return result;
      }
      return 1;
    }
  }
  return result;
}

uint64_t re2::Regexp::ParseState::ParseCharClass(re2::Regexp::ParseState *this, re2::StringPiece *a2, re2::Regexp **a3, re2::RegexpStatus *a4)
{
  char *v8;
  __int16 v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  int v18;
  re2::StringPiece *v19;
  char v20;
  uint64_t v21;
  int v22;
  _BYTE *v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  int v29;
  _BYTE *v30;
  int v31;
  int v32;
  int v33;
  unsigned int v34;
  char **v35;
  const char **v36;
  const char *v37;
  const char *v38;
  unsigned __int8 *v39;
  int v40;
  int v41;
  int v42;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t result;
  uint64_t v52;
  int v53;
  int v54;
  re2::StringPiece *v55;
  int v56;
  re2::Regexp **v57;
  re2 *v58;
  uint64_t v59;
  int v60[2];
  __int128 v61;

  v61 = *(_OWORD *)a2;
  if (!*((_DWORD *)a2 + 2) || **(_BYTE **)a2 != 91)
  {
    result = 0;
    *(_DWORD *)a4 = 1;
    *((_QWORD *)a4 + 1) = 0;
    *((_DWORD *)a4 + 4) = 0;
    return result;
  }
  v8 = (char *)mallocRegexp();
  v9 = *(_WORD *)this;
  *(_WORD *)v8 = 20;
  *((_WORD *)v8 + 1) = v9 & 0xFFFE;
  *((_WORD *)v8 + 2) = 1;
  *((_WORD *)v8 + 19) = 0;
  *(_OWORD *)(v8 + 22) = 0u;
  *(_OWORD *)(v8 + 6) = 0u;
  v10 = operator new();
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v10 + 24) = 0;
  *(_QWORD *)(v10 + 16) = v10 + 24;
  *(_DWORD *)(v10 + 8) = 0;
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v8 + 4) = v10;
  v12 = *(_QWORD *)a2;
  v13 = (unsigned __int8 *)(*(_QWORD *)a2 + 1);
  *(_QWORD *)a2 = v13;
  v14 = *((_DWORD *)a2 + 2);
  v15 = v14 - 1;
  *((_DWORD *)a2 + 2) = v14 - 1;
  v16 = __OFSUB__(v14, 2);
  v17 = v14 - 2;
  if (v17 < 0 != v16)
  {
    if (v15)
    {
      *(_QWORD *)a2 = v12 + 2;
      *((_DWORD *)a2 + 2) = v17;
      goto LABEL_90;
    }
LABEL_91:
    *(_DWORD *)a4 = 5;
    *((_QWORD *)a4 + 1) = v61;
    v50 = DWORD2(v61);
LABEL_92:
    *((_DWORD *)a4 + 4) = v50;
LABEL_93:
    re2::Regexp::Decref((re2::Regexp *)v8);
    return 0;
  }
  v18 = *v13;
  if (v18 == 94)
  {
    *(_QWORD *)a2 = v12 + 2;
    *((_DWORD *)a2 + 2) = v17;
    v15 = v17;
    if ((*(_DWORD *)this & 0x804) != 4)
    {
      re2::CharClassBuilder::AddRange(*((re2::CharClassBuilder **)v8 + 4), 10, 10);
      v15 = *((_DWORD *)a2 + 2);
    }
    if (v15 < 1)
    {
      if (v15)
      {
        ++*(_QWORD *)a2;
        *((_DWORD *)a2 + 2) = v15 - 1;
LABEL_89:
        re2::CharClassBuilder::Negate(*((int8x8_t **)v8 + 4));
        goto LABEL_90;
      }
      goto LABEL_91;
    }
  }
  v19 = (re2::StringPiece *)&v60[1];
  v20 = 1;
  do
  {
    v21 = *(_QWORD *)a2;
    v22 = **(unsigned __int8 **)a2;
    if ((v20 & 1) == 0 && v22 == 93)
    {
      v52 = v21 + 1;
      goto LABEL_85;
    }
    if (v20 & 1 | (v22 != 45))
    {
      if (v15 >= 3 && v22 == 91)
      {
        if (*(_BYTE *)(v21 + 1) == 58 && v15 >= 4)
        {
          v58 = (re2 *)*((_QWORD *)v8 + 4);
          v23 = (_BYTE *)(v21 + 2);
          while (*v23 != 58 || v23[1] != 93)
          {
            if ((unint64_t)++v23 > v21 + (unint64_t)v15 - 2)
              goto LABEL_25;
          }
          v54 = *(_DWORD *)this;
          v55 = v19;
          v56 = v18;
          v57 = a3;
          v24 = 0;
          v25 = (_DWORD)v23 - v21 + 2;
          v59 = ((_DWORD)v23 - v21 + 1);
          do
          {
            v36 = (const char **)&(&re2::posix_groups)[6 * v24];
            v37 = *v36;
            if (*v36)
            {
              if (strlen(*v36) == v25)
              {
                if (v25 < 1)
                  goto LABEL_50;
                if (v37[v59] == *(unsigned __int8 *)(v21 + v59))
                {
                  v38 = v37 + 1;
                  v39 = *(unsigned __int8 **)a2;
                  do
                  {
                    v40 = *((unsigned __int8 *)v38 - 1);
                    v42 = *v39++;
                    v41 = v42;
                  }
                  while (v40 == v42 && v38++ < &v37[v25]);
                  if (v40 == v41)
                  {
LABEL_50:
                    *(_QWORD *)a2 = v21 + v25;
                    *((_DWORD *)a2 + 2) = v15 - v25;
                    re2::AddUGroup(v58, (uint64_t)&(&re2::posix_groups)[6 * v24], (int)(&re2::posix_groups)[6 * v24 + 1], v54);
                    a3 = v57;
                    v18 = v56;
                    v19 = v55;
                    goto LABEL_74;
                  }
                }
              }
            }
            else if (!v25)
            {
              goto LABEL_50;
            }
            ++v24;
          }
          while (v24 != 28);
          *(_DWORD *)a4 = 4;
          *((_QWORD *)a4 + 1) = v21;
          *((_DWORD *)a4 + 4) = v25;
          goto LABEL_93;
        }
      }
      else
      {
LABEL_25:
        if (v15 >= 3 && v22 == 92 && (*(unsigned __int8 *)(v21 + 1) | 0x20) == 0x70)
        {
          v28 = re2::ParseUnicodeGroup((unsigned __int8 **)a2, *(_DWORD *)this, *((re2 **)v8 + 4), a4);
          if (!v28)
            goto LABEL_74;
          if (v28 == 1)
            goto LABEL_93;
        }
      }
    }
    else if ((*((_BYTE *)this + 1) & 2) == 0)
    {
      v26 = v15 - 1;
      if (v15 == 1)
        goto LABEL_104;
      v27 = *(unsigned __int8 *)(v21 + 1);
      if (v27 != 93)
      {
        v60[0] = 0;
        if ((v27 & 0x80) != 0 && (v26 < 2 || v27 >= 0xE0 && (v26 < 3 || v15 == 4 && v27 > 0xEF))
          || (v53 = re2::chartorune((re2 *)v60, (int *)(v21 + 1), v11), v53 == 1) && v60[0] == 65533)
        {
LABEL_104:
          v21 = 0;
          v50 = 0;
          *(_DWORD *)a4 = 12;
        }
        else
        {
          *(_DWORD *)a4 = 4;
          v50 = v53 + 1;
        }
        *((_QWORD *)a4 + 1) = v21;
        goto LABEL_92;
      }
    }
    v29 = *(_DWORD *)this;
    if ((*(_DWORD *)this & 0x80) != 0)
    {
      v31 = *((_DWORD *)a2 + 2);
      v30 = *(_BYTE **)a2;
      v16 = __OFSUB__(v31, 2);
      v32 = v31 - 2;
      if (v32 < 0 != v16 || *v30 != 92)
        goto LABEL_68;
      v33 = v30[1];
      switch(v33)
      {
        case 'D':
          if (*v30 == 92)
          {
            v34 = 1;
            v35 = &off_1E7DB24B8;
            goto LABEL_67;
          }
          v33 = v30[1];
          break;
        case 'd':
          v34 = 0;
          v35 = &re2::perl_groups;
          goto LABEL_67;
        case 's':
          if (*v30 == 92)
          {
            v34 = 2;
            v35 = &off_1E7DB24E8;
            goto LABEL_67;
          }
          break;
        case 'S':
          if (*v30 == 92)
          {
            v34 = 3;
            v35 = &off_1E7DB2518;
            goto LABEL_67;
          }
          break;
        default:
LABEL_61:
          if (v33 == 119 && *v30 == 92)
          {
            v34 = 4;
            v35 = &off_1E7DB2548;
          }
          else
          {
            if (v30[1] != 87 || *v30 != 92)
              goto LABEL_68;
            v34 = 5;
            v35 = &off_1E7DB2578;
          }
LABEL_67:
          *(_QWORD *)a2 = v30 + 2;
          *((_DWORD *)a2 + 2) = v32;
          re2::AddUGroup(*((re2 **)v8 + 4), (uint64_t)v35, (int)(&re2::perl_groups)[6 * v34 + 1], v29);
          goto LABEL_74;
      }
      v33 = v30[1];
      goto LABEL_61;
    }
    v30 = *(_BYTE **)a2;
LABEL_68:
    *(_QWORD *)v60 = 0;
    if (!re2::Regexp::ParseState::ParseCCCharacter(this, a2, (re2::StringPiece *)v60, (const re2::StringPiece *)&v61, a4))goto LABEL_93;
    v44 = *((_DWORD *)a2 + 2);
    if (v44 >= 2
      && (v45 = *(_QWORD *)a2, **(_BYTE **)a2 == 45)
      && (v47 = *(unsigned __int8 *)(v45 + 1), v46 = v45 + 1, v47 != 93))
    {
      *(_QWORD *)a2 = v46;
      *((_DWORD *)a2 + 2) = v44 - 1;
      if (!re2::Regexp::ParseState::ParseCCCharacter(this, a2, v19, (const re2::StringPiece *)&v61, a4))
        goto LABEL_93;
      v49 = v60[0];
      v48 = v60[1];
      if (v60[1] < v60[0])
      {
        *(_DWORD *)a4 = 4;
        v50 = *(_DWORD *)a2 - (_DWORD)v30;
        *((_QWORD *)a4 + 1) = v30;
        goto LABEL_92;
      }
    }
    else
    {
      v48 = v60[0];
      v49 = v60[0];
    }
    re2::CharClassBuilder::AddRangeFlags(*((re2 **)v8 + 4), v49, v48, *(_DWORD *)this | 4);
LABEL_74:
    v20 = 0;
    v15 = *((_DWORD *)a2 + 2);
  }
  while (v15 > 0);
  if (!v15)
    goto LABEL_91;
  v52 = *(_QWORD *)a2 + 1;
LABEL_85:
  *(_QWORD *)a2 = v52;
  *((_DWORD *)a2 + 2) = v15 - 1;
  if (v18 == 94)
    goto LABEL_89;
LABEL_90:
  re2::CharClassBuilder::RemoveAbove(*((_QWORD *)v8 + 4), *((unsigned int *)this + 11));
  *a3 = (re2::Regexp *)v8;
  return 1;
}

BOOL re2::Regexp::ParseState::ParsePerlFlags(re2::Regexp::ParseState *this, re2 **a2)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  char *v7;
  int v8;
  int v9;
  const re2::StringPiece *v10;
  _BOOL8 result;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  const re2::StringPiece *v17;
  const re2::StringPiece *v18;
  std::ios_base *v19;
  uint64_t v20;
  uint64_t *v21;
  BOOL v22;
  char v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  BOOL v33;
  char *v34;
  __int16 v35;
  uint64_t v36;
  re2 *v37;
  unsigned int v38;
  uint64_t v39;
  void *v40;
  const re2::StringPiece *v41;
  uint64_t v42[8];
  __int128 v43;
  __int128 v44;
  int v45;
  uint64_t v46;
  __int128 v47;

  v47 = *(_OWORD *)a2;
  v3 = *(_DWORD *)this;
  if ((*(_DWORD *)this & 0x200) == 0
    || (v4 = DWORD2(v47) - 2, SDWORD2(v47) < 2)
    || (v5 = v47, *(_BYTE *)v47 != 40)
    || *(_BYTE *)(v47 + 1) != 63)
  {
    LOBYTE(v40) = 0;
    v15 = MEMORY[0x1E0DE4FE0];
    v16 = MEMORY[0x1E0DE4FE0] + 64;
    v17 = *(const re2::StringPiece **)(MEMORY[0x1E0DE4F60] + 8);
    v18 = *(const re2::StringPiece **)(MEMORY[0x1E0DE4F60] + 16);
    v46 = MEMORY[0x1E0DE4FE0] + 64;
    v41 = v17;
    *(uint64_t *)((char *)&v42[-1] + *((_QWORD *)v17 - 3)) = (uint64_t)v18;
    v19 = (std::ios_base *)((char *)&v42[-1] + *((_QWORD *)v41 - 3));
    std::ios_base::init(v19, v42);
    v19[1].__vftable = 0;
    v19[1].__fmtflags_ = -1;
    v41 = (const re2::StringPiece *)(v15 + 24);
    v46 = v16;
    std::streambuf::basic_streambuf();
    v42[0] = MEMORY[0x1E0DE4FB8] + 16;
    v43 = 0u;
    v44 = 0u;
    v45 = 16;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v41, (uint64_t)"Bad call to ParseState::ParsePerlFlags", 38);
    LogMessage::~LogMessage(&v40);
    result = 0;
    **((_DWORD **)this + 3) = 1;
    return result;
  }
  v7 = (char *)(v47 + 2);
  *(_QWORD *)&v47 = v47 + 2;
  DWORD2(v47) -= 2;
  if (v4 < 3)
  {
    v21 = (uint64_t *)((char *)this + 24);
    v20 = *((_QWORD *)this + 3);
    if (!v4)
      goto LABEL_65;
    goto LABEL_17;
  }
  if (*v7 != 80 || *(_BYTE *)(v5 + 3) != 60)
  {
    v21 = (uint64_t *)((char *)this + 24);
    v20 = *((_QWORD *)this + 3);
LABEL_17:
    v22 = 0;
    v23 = 0;
    while (1)
    {
      while (1)
      {
        if ((int)v4 < 1)
        {
LABEL_55:
          result = 0;
          *(_DWORD *)v20 = 12;
          *(_QWORD *)(v20 + 8) = 0;
          *(_DWORD *)(v20 + 16) = 0;
          return result;
        }
        v24 = *v7;
        if (*v7 < 0)
        {
          if (v4 < 2 || v24 >= 0xE0 && (v4 < 3 || v4 == 3 && v24 > 0xEF))
            goto LABEL_55;
          v25 = v7[1] ^ 0x80;
          if (v25 > 0x3F)
            goto LABEL_55;
          if (v24 > 0xDF)
          {
            v27 = v7[2] ^ 0x80;
            if (v27 > 0x3F)
              goto LABEL_55;
            if (v24 > 0xEF)
            {
              if (v24 > 0xF7)
                goto LABEL_55;
              v29 = v7[3] ^ 0x80;
              if (v29 > 0x3F)
                goto LABEL_55;
              v30 = (((unsigned __int16)(((_WORD)v25 << 6) | ((_WORD)v24 << 12)) | (unsigned __int16)v27) & 0x7FFF) << 6;
              if (v30 < 0x10000)
                goto LABEL_55;
              v24 = v30 | v29;
              v26 = 4;
            }
            else
            {
              v28 = ((v24 & 0xF) << 12) | (v25 << 6);
              if (v28 < 0x800)
                goto LABEL_55;
              v24 = v28 | v27;
              v26 = 3;
            }
          }
          else
          {
            if (v24 < 0xC0)
              goto LABEL_55;
            v24 = ((v24 & 0x1F) << 6) | v25;
            if (v24 < 0x80)
              goto LABEL_55;
            v26 = 2;
          }
          v7 += v26;
          *(_QWORD *)&v47 = v7;
          v4 -= v26;
        }
        else
        {
          *(_QWORD *)&v47 = ++v7;
          --v4;
        }
        DWORD2(v47) = v4;
        if ((int)v24 <= 84)
          break;
        switch(v24)
        {
          case 'U':
            v31 = v3 | 0x40;
            v32 = v3 & 0xFFFFFFBF;
            break;
          case 'i':
            v31 = v3 | 1;
            v32 = v3 & 0xFFFFFFFE;
            break;
          case 'm':
            v31 = v3 & 0xFFFFFFEF;
            v32 = v3 | 0x10;
            break;
          case 's':
            v31 = v3 | 8;
            v32 = v3 & 0xFFFFFFF7;
            break;
          default:
            goto LABEL_65;
        }
        v33 = !v22;
        v22 = v22;
        v23 = 1;
        if (v33)
          v3 = v31;
        else
          v3 = v32;
        if (!v4)
          goto LABEL_65;
      }
      if (v24 != 45)
        break;
      if (!v22)
      {
        v23 = 0;
        v22 = 1;
        if (v4)
          continue;
      }
      goto LABEL_65;
    }
    if (v24 == 41)
      goto LABEL_59;
    if (v24 == 58)
    {
      v34 = (char *)mallocRegexp();
      v35 = *(_DWORD *)this;
      *(_WORD *)v34 = 22;
      *((_WORD *)v34 + 1) = v35;
      *((_WORD *)v34 + 2) = 1;
      *(_OWORD *)(v34 + 22) = 0u;
      *((_WORD *)v34 + 19) = 0;
      *(_OWORD *)(v34 + 6) = 0u;
      *((_DWORD *)v34 + 6) = -1;
      re2::Regexp::ParseState::PushRegexp(this, (re2::Regexp *)v34);
LABEL_59:
      if (v23 & 1 | !v22)
      {
        *(_DWORD *)this = v3;
        *a2 = (re2 *)v47;
        v14 = DWORD2(v47);
        goto LABEL_61;
      }
      v20 = *v21;
    }
LABEL_65:
    result = 0;
    *(_DWORD *)v20 = 11;
    v38 = (_DWORD)v7 - *a2;
    *(_QWORD *)(v20 + 8) = *a2;
    *(_DWORD *)(v20 + 16) = v38;
    return result;
  }
  v8 = re2::StringPiece::find((re2::StringPiece *)&v47, 62, 2uLL);
  if (v8 == -1)
  {
    result = re2::IsValidUTF8(*a2, (const re2::StringPiece *)*((unsigned int *)a2 + 2), *((re2::RegexpStatus **)this + 3));
    if (result)
    {
      result = 0;
      v36 = *((_QWORD *)this + 3);
      *(_DWORD *)v36 = 13;
      v37 = *a2;
      *(_DWORD *)(v36 + 16) = *((_DWORD *)a2 + 2);
      *(_QWORD *)(v36 + 8) = v37;
    }
  }
  else
  {
    v9 = v8;
    v10 = (const re2::StringPiece *)(v8 - 2);
    v40 = (void *)(v5 + 4);
    v41 = v10;
    result = re2::IsValidUTF8((re2 *)(v5 + 4), v10, *((re2::RegexpStatus **)this + 3));
    if (result)
    {
      v12 = v9 + 3;
      if (re2::IsValidCaptureName((re2 *)(v5 + 4), v10))
      {
        re2::Regexp::ParseState::DoLeftParen(this, (const void **)&v40);
        v13 = v5 + v12 - *a2;
        *a2 = (re2 *)((char *)*a2 + v13);
        v14 = *((_DWORD *)a2 + 2) - v13;
LABEL_61:
        *((_DWORD *)a2 + 2) = v14;
        return 1;
      }
      result = 0;
      v39 = *((_QWORD *)this + 3);
      *(_DWORD *)v39 = 13;
      *(_QWORD *)(v39 + 8) = v5;
      *(_DWORD *)(v39 + 16) = v12;
    }
  }
  return result;
}

void sub_1C37D6C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  LogMessage::~LogMessage(&a9);
  _Unwind_Resume(a1);
}

void sub_1C37D6C20(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1C3BD4828](v1 + 120);
  _Unwind_Resume(a1);
}

BOOL re2::IsValidCaptureName(re2 *this, const re2::StringPiece *a2)
{
  uint64_t v2;
  BOOL v3;
  int v4;

  if (!(_DWORD)a2)
    return 0;
  if ((int)a2 < 1)
    return 1;
  v2 = 0;
  v3 = 0;
  do
  {
    v4 = *((unsigned __int8 *)this + v2);
    if ((v4 - 48) >= 0xA && (v4 - 97) >= 0x1A && v4 != 95 && (v4 - 65) > 0x19)
      break;
    v3 = ++v2 >= (unint64_t)a2;
  }
  while (a2 != v2);
  return v3;
}

re2::Regexp *re2::Regexp::Parse(__int128 *a1, unsigned int a2, int *a3)
{
  char v4;
  re2::RegexpStatus *v5;
  int v6;
  unsigned int v7;
  BOOL v8;
  re2::Regexp *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  std::string::size_type v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  int v19;
  re2 *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  re2::Regexp *v27;
  re2 *v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  int v32;
  char *v33;
  int v34;
  uint64_t v35;
  _BYTE *v36;
  int v37;
  int v38;
  __int16 v39;
  _BYTE *v40;
  int v41;
  int v42;
  __int16 v43;
  char *v44;
  char v45;
  __int16 v46;
  unsigned int v47;
  char *v48;
  uint64_t v49;
  int v50;
  char *v51;
  int v52;
  char *v53;
  char v54;
  char *v55;
  unsigned int v56;
  unsigned int v57;
  int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  char *v63;
  int v64;
  int v65;
  unsigned int v66;
  char **v67;
  char *v68;
  unsigned __int8 *v69;
  re2 *v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  char *v77;
  uint64_t v78;
  int v79;
  int v80;
  int *v81;
  int v82;
  int *v83;
  re2::Regexp *i;
  re2::Regexp *v85;
  uint64_t v86;
  uint64_t v87;
  __int128 v89;
  int v90;
  __int128 v91;
  unint64_t v92;
  __int128 v93;
  re2::RegexpStatus *v94;
  re2::Regexp *v95;
  int v96;
  _DWORD v97[5];
  __int128 v98;
  std::string::value_type __s[16];

  v4 = a2;
  *(_OWORD *)&v97[1] = 0u;
  v98 = 0u;
  if (a3)
    v5 = (re2::RegexpStatus *)a3;
  else
    v5 = (re2::RegexpStatus *)&v97[1];
  v92 = a2;
  v93 = *a1;
  v94 = v5;
  v95 = 0;
  if ((a2 & 0x20) != 0)
    v6 = 255;
  else
    v6 = 1114111;
  v96 = 0;
  v97[0] = v6;
  v91 = *a1;
  if ((a2 & 0x20) != 0)
  {
    v11 = operator new();
    *(_QWORD *)v11 = 0;
    *(_QWORD *)(v11 + 8) = 0;
    *(_QWORD *)(v11 + 16) = 0;
    *(_DWORD *)__s = 0;
    *(_BYTE *)v11 = 0;
    *(_BYTE *)(v11 + 23) = 0;
    if (SDWORD2(v91) >= 1)
    {
      v12 = 0;
      do
      {
        v13 = *(char *)(v91 + v12);
        if (v13 < 0)
        {
          __s[1] = v13 & 0x3F | 0x80;
          LOBYTE(v13) = (v13 >> 6) | 0xC0;
          v14 = 2;
        }
        else
        {
          v14 = 1;
        }
        __s[0] = v13;
        std::string::append((std::string *)v11, __s, v14);
        ++v12;
      }
      while (v12 < SDWORD2(v91));
    }
    if (a3)
      v15 = a3;
    else
      v15 = &v97[1];
    v16 = *((_QWORD *)v15 + 3);
    if (v16)
    {
      if (*(char *)(v16 + 23) < 0)
        operator delete(*(void **)v16);
      MEMORY[0x1C3BD4858](v16, 0x1012C40EC159624);
    }
    *((_QWORD *)v15 + 3) = v11;
    v7 = *(unsigned __int8 *)(v11 + 23);
    if ((v7 & 0x80u) == 0)
      v17 = v11;
    else
      v17 = *(_QWORD *)v11;
    if ((v7 & 0x80u) != 0)
      v7 = *(_DWORD *)(v11 + 8);
    *(_QWORD *)&v91 = v17;
    DWORD2(v91) = v7;
    v8 = (int)v7 < 1;
    if ((v4 & 2) == 0)
      goto LABEL_9;
LABEL_30:
    if (!v8)
    {
      v18 = (unsigned __int8 *)v91;
      v19 = DWORD2(v91);
      do
      {
        v20 = (re2 *)*v18;
        if ((char)*v18 < 0)
        {
          if (v7 < 2
            || v20 >= 0xE0 && (v7 < 3 || v7 == 3 && v20 > 0xEF)
            || (v21 = v18[1] ^ 0x80, v21 > 0x3F))
          {
LABEL_235:
            v9 = 0;
            *(_QWORD *)&v91 = v18;
            DWORD2(v91) = v19;
            goto LABEL_236;
          }
          if (v20 > 0xDF)
          {
            v23 = v18[2] ^ 0x80;
            if (v23 > 0x3F)
              goto LABEL_235;
            if (v20 > 0xEF)
            {
              if (v20 > 0xF7)
                goto LABEL_235;
              v25 = v18[3] ^ 0x80;
              if (v25 > 0x3F)
                goto LABEL_235;
              v26 = (((unsigned __int16)(((_WORD)v21 << 6) | ((_WORD)v20 << 12)) | (unsigned __int16)v23) & 0x7FFF) << 6;
              if (v26 < 0x10000)
                goto LABEL_235;
              v20 = (re2 *)(v26 | v25);
              v22 = 4;
            }
            else
            {
              v24 = ((v20 & 0xF) << 12) | (v21 << 6);
              if (v24 < 0x800)
                goto LABEL_235;
              v20 = (re2 *)(v24 | v23);
              v22 = 3;
            }
          }
          else
          {
            if (v20 < 0xC0)
              goto LABEL_235;
            v20 = (re2 *)(((v20 & 0x1F) << 6) | v21);
            if (v20 < 0x80)
              goto LABEL_235;
            v22 = 2;
          }
          v18 += v22;
          v19 = v7 - v22;
        }
        else
        {
          ++v18;
          v19 = v7 - 1;
        }
        re2::Regexp::ParseState::PushLiteral((re2::Regexp::ParseState *)&v92, v20);
        v7 = v19;
      }
      while (v19 > 0);
      *(_QWORD *)&v91 = v18;
      DWORD2(v91) = v19;
    }
    v27 = re2::Regexp::ParseState::DoFinish((re2::Regexp **)&v92);
LABEL_246:
    v9 = v27;
    goto LABEL_247;
  }
  v7 = DWORD2(v91);
  v8 = SDWORD2(v91) < 1;
  if ((a2 & 2) != 0)
    goto LABEL_30;
LABEL_9:
  if (v8)
  {
LABEL_245:
    v27 = re2::Regexp::ParseState::DoFinish((re2::Regexp **)&v92);
    goto LABEL_246;
  }
  v9 = 0;
  v10 = 0;
  while (2)
  {
    v30 = v91;
    v31 = 7;
    switch(*(_BYTE *)v91)
    {
      case '$':
        v32 = v92;
        if ((v92 & 0x10) != 0)
        {
          LODWORD(v92) = v92 | 0x8000;
          v51 = (char *)mallocRegexp();
          *(_WORD *)v51 = 19;
          *((_WORD *)v51 + 1) = v32 | 0x8000;
          *((_WORD *)v51 + 2) = 1;
          *(_OWORD *)(v51 + 6) = 0u;
          *(_OWORD *)(v51 + 22) = 0u;
          *((_WORD *)v51 + 19) = 0;
          re2::Regexp::ParseState::PushRegexp((re2::Regexp::ParseState *)&v92, (re2::Regexp *)v51);
          LODWORD(v92) = v32;
        }
        else
        {
          v33 = (char *)mallocRegexp();
          *(_WORD *)v33 = 15;
          *((_WORD *)v33 + 1) = v32;
          *((_WORD *)v33 + 2) = 1;
          *(_OWORD *)(v33 + 6) = 0u;
          *(_OWORD *)(v33 + 22) = 0u;
          *((_WORD *)v33 + 19) = 0;
          re2::Regexp::ParseState::PushRegexp((re2::Regexp::ParseState *)&v92, (re2::Regexp *)v33);
        }
        goto LABEL_117;
      case '(':
        v39 = v92;
        if (v7 < 2 || (v92 & 0x200) == 0 || *(_BYTE *)(v91 + 1) != 63)
        {
          if ((v92 & 0x1000) != 0)
          {
            v55 = (char *)mallocRegexp();
            *(_WORD *)v55 = 22;
            *((_WORD *)v55 + 1) = v39;
            *((_WORD *)v55 + 2) = 1;
            *(_OWORD *)(v55 + 22) = 0u;
            *(_OWORD *)(v55 + 6) = 0u;
            *((_WORD *)v55 + 19) = 0;
            *((_DWORD *)v55 + 6) = -1;
            re2::Regexp::ParseState::PushRegexp((re2::Regexp::ParseState *)&v92, (re2::Regexp *)v55);
          }
          else
          {
            *(_QWORD *)__s = 0;
            *(_DWORD *)&__s[8] = 0;
            re2::Regexp::ParseState::DoLeftParen((re2::Regexp::ParseState *)&v92, (const void **)__s);
          }
LABEL_117:
          v10 = 0;
          v9 = 0;
          *(_QWORD *)&v91 = v91 + 1;
          v7 = DWORD2(v91) - 1;
          goto LABEL_118;
        }
        v9 = 0;
        if (!re2::Regexp::ParseState::ParsePerlFlags((re2::Regexp::ParseState *)&v92, (re2 **)&v91))
          goto LABEL_247;
        v10 = 0;
        goto LABEL_60;
      case ')':
        if (!re2::Regexp::ParseState::DoRightParen((re2::Regexp **)&v92))
          goto LABEL_244;
        goto LABEL_117;
      case '*':
        goto LABEL_83;
      case '+':
        v31 = 8;
        goto LABEL_83;
      case '.':
        re2::Regexp::ParseState::PushDot((re2::Regexp::ParseState *)&v92);
        goto LABEL_117;
      case '?':
        v31 = 9;
LABEL_83:
        *(_OWORD *)__s = v91;
        v40 = (_BYTE *)(v91 + 1);
        *(_QWORD *)&v91 = v91 + 1;
        DWORD2(v91) = v7 - 1;
        if ((v92 & 0x200) == 0)
        {
          v41 = 0;
LABEL_90:
          v9 = *(re2::Regexp **)__s;
          v10 = (_DWORD)v40 - *(_DWORD *)__s;
          *(_DWORD *)&__s[8] = (_DWORD)v40 - *(_DWORD *)__s;
          v42 = re2::Regexp::ParseState::PushRepeatOp((uint64_t)&v92, v31, (uint64_t *)__s, v41);
          goto LABEL_91;
        }
        if (v7 == 1 || *v40 != 63)
        {
          v41 = 0;
          if (v10 < 1)
            goto LABEL_90;
        }
        else
        {
          LODWORD(v40) = v30 + 2;
          *(_QWORD *)&v91 = v30 + 2;
          DWORD2(v91) = v7 - 2;
          v41 = 1;
          if (v10 < 1)
            goto LABEL_90;
        }
        *(_DWORD *)v5 = 10;
        v82 = (_DWORD)v40 - (_DWORD)v9;
        goto LABEL_241;
      case '[':
        *(_QWORD *)__s = 0;
        if ((re2::Regexp::ParseState::ParseCharClass((re2::Regexp::ParseState *)&v92, (re2::StringPiece *)&v91, (re2::Regexp **)__s, v5) & 1) == 0)goto LABEL_244;
        re2::Regexp::ParseState::PushRegexp((re2::Regexp::ParseState *)&v92, *(re2::Regexp **)__s);
        goto LABEL_59;
      case '\\':
        v46 = v92;
        if ((v92 & 0x100) == 0)
          goto LABEL_98;
        if (v7 < 2)
          goto LABEL_161;
        v52 = *(unsigned __int8 *)(v91 + 1);
        if ((v52 | 0x20) == 0x62)
        {
          v53 = (char *)mallocRegexp();
          *((_WORD *)v53 + 19) = 0;
          *(_OWORD *)(v53 + 22) = 0u;
          *(_OWORD *)(v53 + 6) = 0u;
          if (v52 == 98)
            v54 = 16;
          else
            v54 = 17;
          *v53 = v54;
          v53[1] = 0;
          *((_WORD *)v53 + 1) = v46;
          *((_WORD *)v53 + 2) = 1;
          re2::Regexp::ParseState::PushRegexp((re2::Regexp::ParseState *)&v92, (re2::Regexp *)v53);
LABEL_115:
          v10 = 0;
          v9 = 0;
          *(_QWORD *)&v91 = v91 + 2;
          v7 = DWORD2(v91) - 2;
LABEL_118:
          DWORD2(v91) = v7;
          goto LABEL_61;
        }
LABEL_98:
        if ((v92 & 0x200) == 0)
        {
          if (v7 < 2)
            goto LABEL_161;
          v47 = *(unsigned __int8 *)(v91 + 1);
          goto LABEL_101;
        }
        v58 = v7 - 2;
        if (v7 < 2)
          goto LABEL_161;
        v47 = *(unsigned __int8 *)(v91 + 1);
        if (v47 <= 0x50)
        {
          if (v47 == 65)
          {
            v68 = (char *)mallocRegexp();
            *(_WORD *)v68 = 18;
            *((_WORD *)v68 + 1) = v46;
            *((_WORD *)v68 + 2) = 1;
            *(_OWORD *)(v68 + 6) = 0u;
            *(_OWORD *)(v68 + 22) = 0u;
            *((_WORD *)v68 + 19) = 0;
            re2::Regexp::ParseState::PushRegexp((re2::Regexp::ParseState *)&v92, (re2::Regexp *)v68);
            goto LABEL_115;
          }
          if (v47 == 67)
          {
            re2::Regexp::ParseState::PushSimpleOp((re2::Regexp::ParseState *)&v92, 13);
            goto LABEL_115;
          }
          goto LABEL_101;
        }
        if (v47 != 81)
        {
          if (v47 == 122)
          {
            v63 = (char *)mallocRegexp();
            *(_WORD *)v63 = 19;
            *((_WORD *)v63 + 1) = v46;
            *((_WORD *)v63 + 2) = 1;
            *(_OWORD *)(v63 + 6) = 0u;
            *(_OWORD *)(v63 + 22) = 0u;
            *((_WORD *)v63 + 19) = 0;
            re2::Regexp::ParseState::PushRegexp((re2::Regexp::ParseState *)&v92, (re2::Regexp *)v63);
            goto LABEL_115;
          }
LABEL_101:
          if ((v47 | 0x20) != 0x70)
            goto LABEL_161;
          v48 = (char *)mallocRegexp();
          *(_WORD *)v48 = 20;
          *((_WORD *)v48 + 1) = v46 & 0xFFFE;
          *((_WORD *)v48 + 2) = 1;
          *(_OWORD *)(v48 + 6) = 0u;
          *(_OWORD *)(v48 + 22) = 0u;
          *((_WORD *)v48 + 19) = 0;
          v49 = operator new();
          *(_QWORD *)(v49 + 24) = 0;
          *(_QWORD *)(v49 + 32) = 0;
          *(_QWORD *)(v49 + 16) = v49 + 24;
          *(_DWORD *)(v49 + 8) = 0;
          *(_QWORD *)v49 = 0;
          *((_QWORD *)v48 + 4) = v49;
          v50 = re2::ParseUnicodeGroup((unsigned __int8 **)&v91, v46, (re2 *)v49, v5);
          if (v50)
          {
            if (v50 == 2)
            {
              re2::Regexp::Decref((re2::Regexp *)v48);
            }
            else if (v50 == 1)
            {
              re2::Regexp::Decref((re2::Regexp *)v48);
              goto LABEL_244;
            }
LABEL_161:
            if ((v46 & 0x80) == 0 || SDWORD2(v91) < 2 || *(_BYTE *)v91 != 92)
            {
LABEL_214:
              *(_DWORD *)__s = 0;
              if ((re2::ParseEscape((re2 *)&v91, (re2::StringPiece *)__s, v5, (re2::RegexpStatus *)v97[0]) & 1) == 0)
                goto LABEL_244;
              re2::Regexp::ParseState::PushLiteral((re2::Regexp::ParseState *)&v92, (re2 *)*(unsigned int *)__s);
              goto LABEL_59;
            }
            v65 = *(unsigned __int8 *)(v91 + 1);
            switch(v65)
            {
              case 'D':
                if (*(_BYTE *)v91 == 92)
                {
                  v66 = 1;
                  v67 = &off_1E7DB24B8;
                  goto LABEL_213;
                }
                v65 = *(unsigned __int8 *)(v91 + 1);
                break;
              case 'd':
                v66 = 0;
                v67 = &re2::perl_groups;
LABEL_213:
                *(_QWORD *)&v91 = v91 + 2;
                DWORD2(v91) -= 2;
                v77 = (char *)mallocRegexp();
                *(_WORD *)v77 = 20;
                *((_WORD *)v77 + 1) = v46 & 0xFFFE;
                *((_WORD *)v77 + 2) = 1;
                *(_OWORD *)(v77 + 6) = 0u;
                *(_OWORD *)(v77 + 22) = 0u;
                *((_WORD *)v77 + 19) = 0;
                v78 = operator new();
                *(_QWORD *)(v78 + 32) = 0;
                *(_QWORD *)(v78 + 24) = 0;
                *(_QWORD *)(v78 + 16) = v78 + 24;
                *(_DWORD *)(v78 + 8) = 0;
                *(_QWORD *)v78 = 0;
                *((_QWORD *)v77 + 4) = v78;
                re2::AddUGroup((re2 *)v78, (uint64_t)v67, (int)(&re2::perl_groups)[6 * v66 + 1], v46);
                re2::Regexp::ParseState::PushRegexp((re2::Regexp::ParseState *)&v92, (re2::Regexp *)v77);
                v10 = 0;
                v9 = 0;
                goto LABEL_60;
              case 's':
                if (*(_BYTE *)v91 == 92)
                {
                  v66 = 2;
                  v67 = &off_1E7DB24E8;
                  goto LABEL_213;
                }
                break;
              case 'S':
                if (*(_BYTE *)v91 == 92)
                {
                  v66 = 3;
                  v67 = &off_1E7DB2518;
                  goto LABEL_213;
                }
                break;
              default:
                goto LABEL_207;
            }
            v65 = *(unsigned __int8 *)(v91 + 1);
LABEL_207:
            if (v65 == 119 && *(_BYTE *)v91 == 92)
            {
              v66 = 4;
              v67 = &off_1E7DB2548;
              goto LABEL_213;
            }
            if (*(_BYTE *)(v91 + 1) == 87 && *(_BYTE *)v91 == 92)
            {
              v66 = 5;
              v67 = &off_1E7DB2578;
              goto LABEL_213;
            }
            goto LABEL_214;
          }
          re2::Regexp::ParseState::PushRegexp((re2::Regexp::ParseState *)&v92, (re2::Regexp *)v48);
LABEL_59:
          v10 = 0;
          v9 = 0;
          goto LABEL_60;
        }
        *(_QWORD *)&v91 = v91 + 2;
        if (v7 < 3)
          goto LABEL_245;
        v69 = (unsigned __int8 *)v91;
        while (2)
        {
          v70 = (re2 *)*v69;
          if (v58 != 1 && (_DWORD)v70 == 92)
          {
            if (v69[1] == 69)
            {
              v10 = 0;
              v9 = 0;
              *(_QWORD *)&v91 = v69 + 2;
              v7 = v58 - 2;
              DWORD2(v91) = v58 - 2;
              goto LABEL_61;
            }
            goto LABEL_177;
          }
          if ((v70 & 0x80) == 0)
          {
LABEL_177:
            ++v69;
            --v58;
            goto LABEL_178;
          }
          if (v58 >= 2
            && (v70 < 0xE0 || v58 >= 3 && (v58 != 3 || v70 <= 0xEF)))
          {
            v71 = v69[1] ^ 0x80;
            if (v71 <= 0x3F)
            {
              if (v70 > 0xDF)
              {
                v73 = v69[2] ^ 0x80;
                if (v73 > 0x3F)
                  break;
                if (v70 > 0xEF)
                {
                  if (v70 > 0xF7)
                    break;
                  v75 = v69[3] ^ 0x80;
                  if (v75 > 0x3F)
                    break;
                  v76 = (((unsigned __int16)(((_WORD)v71 << 6) | ((_WORD)v70 << 12)) | (unsigned __int16)v73) & 0x7FFF) << 6;
                  if (v76 < 0x10000)
                    break;
                  v70 = (re2 *)(v76 | v75);
                  v72 = 4;
                }
                else
                {
                  v74 = ((v70 & 0xF) << 12) | (v71 << 6);
                  if (v74 < 0x800)
                    break;
                  v70 = (re2 *)(v74 | v73);
                  v72 = 3;
                }
              }
              else
              {
                if (v70 < 0xC0)
                  break;
                v70 = (re2 *)(((v70 & 0x1F) << 6) | v71);
                if (v70 < 0x80)
                  break;
                v72 = 2;
              }
              v69 += v72;
              v58 -= v72;
LABEL_178:
              DWORD2(v91) = v58;
              re2::Regexp::ParseState::PushLiteral((re2::Regexp::ParseState *)&v92, v70);
              if (v58 < 1)
              {
                *(_QWORD *)&v91 = v69;
                goto LABEL_245;
              }
              continue;
            }
          }
          break;
        }
        v9 = 0;
        *(_QWORD *)&v91 = v69;
LABEL_236:
        *(_DWORD *)v5 = 12;
        v81 = &v97[1];
        if (a3)
          v81 = a3;
        *((_QWORD *)v81 + 1) = 0;
        v81[4] = 0;
LABEL_247:
        for (i = v95; i; i = v85)
        {
          v85 = (re2::Regexp *)*((_QWORD *)i + 2);
          *((_QWORD *)i + 2) = 0;
          if (*(_BYTE *)i == 22)
          {
            v86 = *((_QWORD *)i + 4);
            if (v86)
            {
              if (*(char *)(v86 + 23) < 0)
                operator delete(*(void **)v86);
              MEMORY[0x1C3BD4858](v86, 0x1012C40EC159624);
            }
          }
          re2::Regexp::Decref(i);
        }
        v87 = *((_QWORD *)&v98 + 1);
        if (*((_QWORD *)&v98 + 1))
        {
          if (*(char *)(*((_QWORD *)&v98 + 1) + 23) < 0)
            operator delete(**((void ***)&v98 + 1));
          MEMORY[0x1C3BD4858](v87, 0x1012C40EC159624);
        }
        return v9;
      case '^':
        v43 = v92;
        v44 = (char *)mallocRegexp();
        *((_WORD *)v44 + 19) = 0;
        *(_OWORD *)(v44 + 22) = 0u;
        *(_OWORD *)(v44 + 6) = 0u;
        if ((v43 & 0x10) != 0)
          v45 = 18;
        else
          v45 = 14;
        *v44 = v45;
        v44[1] = 0;
        *((_WORD *)v44 + 1) = v43;
        *((_WORD *)v44 + 2) = 1;
        re2::Regexp::ParseState::PushRegexp((re2::Regexp::ParseState *)&v92, (re2::Regexp *)v44);
        goto LABEL_117;
      case '{':
        v90 = 0;
        v89 = v91;
        *(_OWORD *)__s = v91;
        v34 = DWORD2(v91);
        if (!DWORD2(v91))
          goto LABEL_69;
        v35 = *(_QWORD *)__s;
        if (**(_BYTE **)__s != 123)
          goto LABEL_69;
        v36 = (_BYTE *)++*(_QWORD *)__s;
        v37 = DWORD2(v91) - 1;
        *(_DWORD *)&__s[8] = DWORD2(v91) - 1;
        if (DWORD2(v91) == 1)
          goto LABEL_69;
        v38 = *v36;
        if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * *v36 + 60) & 0x400) == 0)
          goto LABEL_69;
        if (SDWORD2(v91) > 2 && v38 == 48)
        {
          if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * *(unsigned __int8 *)(v35 + 2) + 60) & 0x400) != 0)
            goto LABEL_69;
        }
        else if (SDWORD2(v91) < 2)
        {
          v64 = 0;
          goto LABEL_218;
        }
        v64 = 0;
        if (v37 >= 1)
          v37 = 1;
        --v37;
        do
        {
          --v34;
          v38 = *v36;
          if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * *v36 + 60) & 0x400) == 0)
          {
            *(_QWORD *)__s = v36;
            *(_DWORD *)&__s[8] = v34;
            v37 = v34;
LABEL_218:
            if (v38 == 44)
            {
              *(_QWORD *)__s = ++v36;
              *(_DWORD *)&__s[8] = --v37;
              if (!v37)
                goto LABEL_69;
              if (*v36 == 125)
              {
                v90 = -1;
              }
              else
              {
                if (!re2::ParseInteger((re2 *)__s, (re2::StringPiece *)&v90, a3))
                  goto LABEL_69;
                v37 = *(_DWORD *)&__s[8];
                if (!*(_DWORD *)&__s[8])
                  goto LABEL_69;
                v36 = *(_BYTE **)__s;
              }
            }
            else
            {
              v90 = v64;
            }
            if (*v36 != 125)
              goto LABEL_69;
            *(_QWORD *)&v91 = v36 + 1;
            DWORD2(v91) = v37 - 1;
            if ((v92 & 0x200) == 0)
            {
              v79 = 0;
              v80 = v91;
              goto LABEL_234;
            }
            v80 = v91;
            if (SDWORD2(v91) >= 1 && *(_BYTE *)v91 == 63)
            {
              v80 = v91 + 1;
              *(_QWORD *)&v91 = v91 + 1;
              --DWORD2(v91);
              v79 = 1;
            }
            else
            {
              v79 = 0;
            }
            if (v10 < 1)
            {
LABEL_234:
              v9 = (re2::Regexp *)v89;
              v10 = v80 - v89;
              DWORD2(v89) = v80 - v89;
              v42 = re2::Regexp::ParseState::PushRepetition((re2::Regexp::ParseState *)&v92, v64, v90, (const re2::StringPiece *)&v89, v79);
LABEL_91:
              if (!v42)
              {
LABEL_244:
                v9 = 0;
                goto LABEL_247;
              }
LABEL_60:
              v7 = DWORD2(v91);
              goto LABEL_61;
            }
            *(_DWORD *)v5 = 10;
            v82 = v80 - (_DWORD)v9;
LABEL_241:
            v83 = &v97[1];
            if (a3)
              v83 = a3;
            *((_QWORD *)v83 + 1) = v9;
            v83[4] = v82;
            goto LABEL_244;
          }
          if (v64 > 99999999)
            goto LABEL_69;
          v64 = v38 + 10 * v64 - 48;
          ++v36;
        }
        while (v34 > 1);
        *(_QWORD *)__s = v36;
        *(_DWORD *)&__s[8] = v37;
        if (v37)
        {
          v38 = *v36;
          goto LABEL_218;
        }
LABEL_69:
        re2::Regexp::ParseState::PushLiteral((re2::Regexp::ParseState *)&v92, (re2 *)0x7B);
        v10 = 0;
        v9 = 0;
        *(_QWORD *)&v91 = v91 + 1;
        v7 = --DWORD2(v91);
LABEL_61:
        if ((int)v7 <= 0)
          goto LABEL_245;
        continue;
      case '|':
        re2::Regexp::ParseState::DoVerticalBar((re2::Regexp::ParseState *)&v92);
        goto LABEL_117;
      default:
        v28 = (re2 *)*(unsigned __int8 *)v91;
        if ((*(_BYTE *)v91 & 0x80) == 0)
        {
          *(_QWORD *)&v91 = v91 + 1;
          v29 = v7 - 1;
LABEL_58:
          DWORD2(v91) = v29;
          re2::Regexp::ParseState::PushLiteral((re2::Regexp::ParseState *)&v92, v28);
          goto LABEL_59;
        }
        if (v7 < 2 || v28 >= 0xE0 && (v7 < 3 || v7 == 3 && v28 > 0xEF))
          goto LABEL_239;
        v56 = *(unsigned __int8 *)(v91 + 1) ^ 0x80;
        if (v56 > 0x3F)
          goto LABEL_239;
        if (v28 > 0xDF)
        {
          v59 = *(unsigned __int8 *)(v91 + 2) ^ 0x80;
          if (v59 <= 0x3F)
          {
            if (v28 > 0xEF)
            {
              if (v28 <= 0xF7)
              {
                v61 = *(unsigned __int8 *)(v91 + 3) ^ 0x80;
                if (v61 <= 0x3F)
                {
                  v62 = (((unsigned __int16)(((_WORD)v56 << 6) | ((_WORD)v28 << 12)) | (unsigned __int16)v59) & 0x7FFF) << 6;
                  if (v62 >= 0x10000)
                  {
                    v28 = (re2 *)(v62 | v61);
                    v57 = 4;
                    goto LABEL_146;
                  }
                }
              }
            }
            else
            {
              v60 = ((v28 & 0xF) << 12) | (v56 << 6);
              if (v60 >= 0x800)
              {
                v28 = (re2 *)(v60 | v59);
                v57 = 3;
                goto LABEL_146;
              }
            }
          }
        }
        else if (v28 >= 0xC0)
        {
          v28 = (re2 *)(((v28 & 0x1F) << 6) | v56);
          if (v28 >= 0x80)
          {
            v57 = 2;
LABEL_146:
            *(_QWORD *)&v91 = v91 + v57;
            v29 = v7 - v57;
            goto LABEL_58;
          }
        }
LABEL_239:
        v9 = 0;
        goto LABEL_236;
    }
  }
}

void sub_1C37D7B68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  re2::Regexp::ParseState::~ParseState((re2::Regexp::ParseState *)va);
  re2::RegexpStatus::~RegexpStatus((re2::RegexpStatus *)va1);
  _Unwind_Resume(a1);
}

uint64_t re2::ParseInteger(re2 *this, re2::StringPiece *a2, int *a3)
{
  int v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  int v8;
  unsigned __int8 *v9;
  int v10;
  uint64_t v11;

  v3 = *((_DWORD *)this + 2);
  if (!v3)
    return 0;
  v4 = *(unsigned __int8 **)this;
  v5 = **(unsigned __int8 **)this;
  v6 = MEMORY[0x1E0C80978];
  if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v5 + 60) & 0x400) == 0)
    return 0;
  if (v3 > 1 && (_DWORD)v5 == 48)
  {
    if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v4[1] + 60) & 0x400) != 0)
      return 0;
    goto LABEL_9;
  }
  if (v3 >= 1)
  {
LABEL_9:
    v8 = 0;
    v9 = v4 + 1;
    v10 = v3 + 1;
    do
    {
      v11 = *(v9 - 1);
      if ((*(_DWORD *)(v6 + 4 * v11 + 60) & 0x400) == 0)
        break;
      if (v8 > 99999999)
        return 0;
      v8 = v11 + 10 * v8 - 48;
      *(_QWORD *)this = v9;
      *((_DWORD *)this + 2) = v10 - 2;
      ++v9;
      --v10;
    }
    while (v10 > 1);
    goto LABEL_15;
  }
  v8 = 0;
LABEL_15:
  *(_DWORD *)a2 = v8;
  return 1;
}

void sub_1C37D93CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C37D96E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C37D9BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C37D9F3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_1C37DA108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C37DA204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C37DA598(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1C37DB7FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1C37DBB4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1C37DBC2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C37DBFA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
  _Block_object_dispose(&a52, 8);
  _Unwind_Resume(a1);
}

void sub_1C37DC374(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1C37DC578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C37DC7A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C37DC870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C37DC948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C37DCAC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1C37DCBA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1C37DCE58(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1C37DD064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;

  _Block_object_dispose(&a28, 8);
  _Block_object_dispose((const void *)(v28 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_1C37DD1B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C37DD728(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1C37DD7FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C37DDC9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__28501(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__28502(uint64_t a1)
{

}

void hashHexToBlob(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  const unsigned __int8 *v5;
  void *v6;
  void *v7;
  void *v8;

  if (a2 != 1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void hashHexToBlob(sqlite3_context *, int, sqlite3_value **)");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "handleFailureInFunction:file:lineNumber:description:", v8, CFSTR("SGSqlEntityStore+DatabaseMigrator.m"), 1187, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("argc == 1"));

  }
  v5 = sqlite3_value_text(*a3);
  if (v5 && strlen((const char *)v5))
  {
    v6 = (void *)_PASHexToBytes();
    sqlite3_result_blob(a1, v6, 0, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
    free(v6);
  }
  else
  {
    sqlite3_result_null(a1);
  }
}

uint64_t ___detachSnippets_block_invoke()
{
  NSObject *v0;
  uint8_t v2[16];

  sgLogHandle();
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v2 = 0;
    _os_log_error_impl(&dword_1C3607000, v0, OS_LOG_TYPE_ERROR, "unable to detach snippets after trying to migrate content data", v2, 2u);
  }

  return 1;
}

void sub_1C37E0810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v17 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1C37E1FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  SGRecordMeasurementState((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL hasMessageAndValidAuthorsName(void *a1)
{
  void *v2;
  void *v3;
  _BOOL8 v4;
  void *v5;

  objc_msgSend(a1, "author");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "displayName");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  v4 = 0;
  if (a1 && v3)
  {
    if ((unint64_t)objc_msgSend(v3, "length") >= 2
      && objc_msgSend(v3, "rangeOfString:", CFSTR("@")) == 0x7FFFFFFFFFFFFFFFLL)
    {
      objc_msgSend(MEMORY[0x1E0CB3500], "decimalDigitCharacterSet");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v4 = objc_msgSend(v3, "rangeOfCharacterFromSet:", v5) == 0x7FFFFFFFFFFFFFFFLL;

    }
    else
    {
      v4 = 0;
    }
  }

  return v4;
}

void sub_1C37E3D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  _Block_object_dispose(&a51, 8);
  _Block_object_dispose(&a57, 8);
  _Unwind_Resume(a1);
}

void sub_1C37E4900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a69;

  _Block_object_dispose(&a69, 8);
  _Unwind_Resume(a1);
}

void sub_1C37E550C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_1C37E57E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a19, 8);
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_1C37E5A4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__29077(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__29078(uint64_t a1)
{

}

void sub_1C37E5F1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v17 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t firstPersonContactSharingLabelFromMatchType(unsigned int a1)
{
  void *v2;
  void *v3;
  uint64_t v5;

  if (a1 - 3 >= 7)
  {
    v5 = 1;
    if (a1 == 2)
      v5 = 2;
    if (a1 == 1)
      return 3;
    else
      return v5;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "SGContactSharingLabel firstPersonContactSharingLabelFromMatchType(SGDataDetectorMatchType)");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("SGDetectedAttributeML.m"), 115, CFSTR("Contact sharing model doesn't support matchType = %lu"), a1);

    return -1;
  }
}

uint64_t thirdPersonContactSharingLabelFromMatchType(unsigned int a1)
{
  void *v2;
  void *v3;
  uint64_t v5;

  if (a1 - 3 >= 7)
  {
    v5 = 4;
    if (a1 == 2)
      v5 = 5;
    if (a1 == 1)
      return 6;
    else
      return v5;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "SGContactSharingLabel thirdPersonContactSharingLabelFromMatchType(SGDataDetectorMatchType)");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("SGDetectedAttributeML.m"), 132, CFSTR("Contact sharing model doesn't support matchType = %lu"), a1);

    return -1;
  }
}

void sub_1C37E6B70(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_1C37E9104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  uint64_t v61;

  _Block_object_dispose(&a57, 8);
  _Block_object_dispose(&a61, 8);
  _Block_object_dispose((const void *)(v61 - 256), 8);
  _Block_object_dispose((const void *)(v61 - 224), 8);
  _Block_object_dispose((const void *)(v61 - 192), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__29304(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__29305(uint64_t a1)
{

}

void sub_1C37E9F00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C37EA01C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v4 = v3;
  MEMORY[0x1C3BD4858](v4, 0x1072C4099187B91);

  _Unwind_Resume(a1);
}

void sub_1C37EA160(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_1C37EA1FC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_1C37EA2B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1C37EAAA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

void sub_1C37EABDC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_1C37EADA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C37EAE7C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_1C37EAEF8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C37EAF6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C37EAFF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1C37EB0A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1C37EB138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1C37EB20C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C37EB25C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C37EB2AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C37EB2FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C37EB368(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C37EB3C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C37EB40C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id getLazyRe2Cache(void)
{
  if (getLazyRe2Cache(void)::onceToken != -1)
    dispatch_once(&getLazyRe2Cache(void)::onceToken, &__block_literal_global_83_29380);
  return (id)getLazyRe2Cache(void)::cache;
}

uint64_t ___ZL15getLazyRe2Cachev_block_invoke()
{
  uint64_t v0;
  void *v1;

  v0 = objc_opt_new();
  v1 = (void *)getLazyRe2Cache(void)::cache;
  getLazyRe2Cache(void)::cache = v0;

  return objc_msgSend((id)getLazyRe2Cache(void)::cache, "setCountLimit:", 50);
}

void sub_1C37EB59C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1C37EB798(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C37EB9BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C37EBC14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C37EBCE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C37EBDA4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__29392(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__29393(uint64_t a1)
{

}

void sub_1C37EBE58(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C37EBEF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C37EBFA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C37EC094(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C37EC100(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C37EC15C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C37EC1F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C37EC2B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C37EC314(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

SGRe2Basic *getInternal(NSData *a1)
{
  NSData *v1;
  void *v2;
  SGRe2Basic *v3;
  void *v5;
  void *v6;

  v1 = a1;
  getLazyRe2Cache();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "objectForKey:", v1);
  v3 = (SGRe2Basic *)objc_claimAutoreleasedReturnValue();
  if (!v3)
  {
    v3 = -[SGRe2Basic initWithRegexpData:]([SGRe2Basic alloc], "initWithRegexpData:", v1);
    objc_msgSend(v2, "setObject:forKey:", v3, v1);
    if (!v3)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "SGRe2 *getInternal(NSData *__strong)");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, CFSTR("SGRe2.mm"), 677, CFSTR("Could not initialize regexp: %@"), v1);

      v3 = 0;
    }
  }

  return v3;
}

void sub_1C37EC434(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1C37ECBF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a12);
  va_start(va, a12);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1C37ED3F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

const __CFString *descriptionForIdentityKeyType(unint64_t a1)
{
  if (a1 > 5)
    return CFSTR("UNKNOWN IDENTITY KEY TYPE!");
  else
    return off_1E7DB4FA0[a1];
}

void startElementSAX(void *a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  uint64_t *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v12;

  v12 = a1;
  if (startElementSAX_onceToken != -1)
    dispatch_once(&startElementSAX_onceToken, &__block_literal_global_29890);
  v4 = 0;
  if (a3)
  {
    v5 = (uint64_t *)(a3 + 16);
    do
    {
      v6 = (void *)MEMORY[0x1C3BD4F6C]();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", *(v5 - 2));
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend((id)startElementSAX_attrWhitelist, "containsObject:", v7))
      {
        if (!v4)
        {
          objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithSharedKeySet:", startElementSAX_sharedKeySet);
          v4 = (void *)objc_claimAutoreleasedReturnValue();
        }
        if (*(v5 - 1))
        {
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:");
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v8, v7);

        }
        else
        {
          objc_msgSend(v4, "setObject:forKeyedSubscript:", &stru_1E7DB83A8, v7);
        }
      }

      objc_autoreleasePoolPop(v6);
      v9 = *v5;
      v5 += 2;
    }
    while (v9);
  }
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", a2, a2);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "startElement:withAttributes:", v10, v4);

}

void charactersSAX_29888(void *a1, uint64_t a2, int a3)
{
  objc_class *v5;
  id v6;
  id v7;

  v5 = (objc_class *)MEMORY[0x1E0CB3940];
  v6 = a1;
  v7 = (id)objc_msgSend([v5 alloc], "initWithBytes:length:encoding:", a2, a3, 4);
  objc_msgSend(v6, "textContent:", v7);

}

void __startElementSAX_block_invoke()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;

  v0 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99E60]), "initWithArray:", &unk_1E7E10AE8);
  v1 = (void *)startElementSAX_attrWhitelist;
  startElementSAX_attrWhitelist = v0;

  objc_msgSend(MEMORY[0x1E0C99D80], "sharedKeySetForKeys:", &unk_1E7E10AE8);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = (void *)startElementSAX_sharedKeySet;
  startElementSAX_sharedKeySet = v2;

}

void sub_1C37F0714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C37F0C70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C37F0FE4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C37F1E38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1C37F2C90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  _Block_object_dispose(&a51, 8);
  _Unwind_Resume(a1);
}

void sub_1C37F2DB8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C37F35A0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__30047(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__30048(uint64_t a1)
{

}

void sub_1C37F4274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C37F43B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C37F4BB0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1C37F4D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C37F4E54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C37F5150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C37F578C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C37F5F64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__30362(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__30363(uint64_t a1)
{

}

void sub_1C37F96D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C37FA3B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C37FA73C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C37FA8DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C37FAFE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C37FB0FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C37FB878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C37FC64C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 + 224), 8);
  _Unwind_Resume(a1);
}

void sub_1C37FCB48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__30539(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__30540(uint64_t a1)
{

}

void sub_1C37FD3D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;

  _Block_object_dispose(&a32, 8);
  _Block_object_dispose((const void *)(v32 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_1C37FF7F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C37FF92C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C37FFA60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C37FFD24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C380041C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;

  _Block_object_dispose(&a24, 8);
  _Block_object_dispose(&a30, 8);
  _Block_object_dispose(&a36, 8);
  _Block_object_dispose((const void *)(v36 - 232), 8);
  _Block_object_dispose((const void *)(v36 - 184), 8);
  _Block_object_dispose((const void *)(v36 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_1C38010C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C380161C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C38018DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C3801F0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1C38021F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C380238C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C3802BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C3802F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C3803D20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C3805280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
  _Block_object_dispose(&a50, 8);
  _Unwind_Resume(a1);
}

void sub_1C3805EF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C38063D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_1C3809ED4(_Unwind_Exception *exception_object, int a2)
{
  char v2;

  if (a2)
  {
    objc_begin_catch(exception_object);
    if ((v2 & 1) != 0)
      JUMPOUT(0x1C3809E54);
    JUMPOUT(0x1C3809E4CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C380A488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1C380D114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__31331(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__31332(uint64_t a1)
{

}

void sub_1C380DF8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

id _PASValidatedFormat_31494(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  objc_class *v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v20[2];
  uint64_t v21;
  _QWORD v22[2];

  v22[1] = *MEMORY[0x1E0C80C00];
  v20[1] = &a9;
  v10 = (objc_class *)MEMORY[0x1E0CB3940];
  v11 = a2;
  v12 = a1;
  v20[0] = 0;
  v13 = (void *)objc_msgSend([v10 alloc], "initWithValidatedFormat:validFormatSpecifiers:locale:arguments:error:", v12, v11, 0, &a9, v20);

  v14 = v20[0];
  if (!v13)
  {
    v15 = objc_alloc(MEMORY[0x1E0C99DA0]);
    v16 = *MEMORY[0x1E0C99778];
    v21 = *MEMORY[0x1E0CB3388];
    v22[0] = v14;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v22, &v21, 1);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = (void *)objc_msgSend(v15, "initWithName:reason:userInfo:", v16, CFSTR("An error occurred while formatting the string."), v17);

    objc_msgSend(v18, "raise");
  }

  return v13;
}

void sub_1C380F60C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1C380F7B0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C380F8F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  objc_sync_exit(v7);
  _Unwind_Resume(a1);
}

void sub_1C380FB14(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__31588(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__31589(uint64_t a1)
{

}

void sub_1C3813148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id escapedTagForEntityExtraction(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0D197F0], "containsEntityExtraction:", a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "name");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  SGDelimitedStringsSerialize();
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

uint64_t __Block_byref_object_copy__31793(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__31794(uint64_t a1)
{

}

void sub_1C38148BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1C3814B78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C38150A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C38151A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C3815318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__31932(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__31933(uint64_t a1)
{

}

void re2::PCREWalker::~PCREWalker(re2::PCREWalker *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_1E7DB6CF8;
  re2::Regexp::Walker<BOOL>::Reset((uint64_t)this);
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    v3 = std::deque<re2::WalkState<BOOL>>::~deque[abi:ne180100](v2);
    MEMORY[0x1C3BD4858](v3, 0x1080C40BE8D5F09);
  }
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_1E7DB6CF8;
  re2::Regexp::Walker<BOOL>::Reset((uint64_t)this);
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    v3 = std::deque<re2::WalkState<BOOL>>::~deque[abi:ne180100](v2);
    MEMORY[0x1C3BD4858](v3, 0x1080C40BE8D5F09);
  }
  JUMPOUT(0x1C3BD4858);
}

uint64_t re2::Regexp::Walker<BOOL>::PreVisit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t re2::PCREWalker::PostVisit(re2::PCREWalker *this, re2::Regexp *a2, BOOL a3, BOOL a4, BOOL *a5, int a6)
{
  uint64_t v6;
  uint64_t result;
  re2 **v9;

  if (a6 < 1)
  {
LABEL_5:
    result = 0;
    switch(*(_BYTE *)a2)
    {
      case 2:
      case 0x13:
        if (*((__int16 *)a2 + 1) < 0)
          return 0;
        goto LABEL_15;
      case 3:
        if (*((_DWORD *)a2 + 6) == 11)
          return 0;
        goto LABEL_15;
      case 7:
      case 8:
      case 9:
        goto LABEL_6;
      case 0xA:
        if (*((_DWORD *)a2 + 6) != -1)
          goto LABEL_15;
LABEL_6:
        v9 = (re2 **)((char *)a2 + 8);
        if (*((unsigned __int16 *)a2 + 3) >= 2u)
          v9 = (re2 **)*v9;
        if ((re2::CanBeEmptyString(*v9, a2) & 1) != 0)
          return 0;
        goto LABEL_15;
      case 0xE:
        return result;
      default:
LABEL_15:
        result = 1;
        break;
    }
  }
  else
  {
    v6 = a6;
    while (*a5++)
    {
      if (!--v6)
        goto LABEL_5;
    }
    return 0;
  }
  return result;
}

uint64_t re2::Regexp::Walker<BOOL>::Copy(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t re2::PCREWalker::ShortVisit(re2::PCREWalker *this, re2::Regexp *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  void *v10;
  uint64_t v11;
  uint64_t v12[8];
  __int128 v13;
  __int128 v14;
  int v15;
  uint64_t v16;

  LOBYTE(v10) = 0;
  v4 = MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v16 = MEMORY[0x1E0DE4FE0] + 64;
  v11 = v6;
  *(uint64_t *)((char *)&v12[-1] + *(_QWORD *)(v6 - 24)) = v7;
  v8 = (std::ios_base *)((char *)&v12[-1] + *(_QWORD *)(v11 - 24));
  std::ios_base::init(v8, v12);
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v11 = v4 + 24;
  v16 = v5;
  std::streambuf::basic_streambuf();
  v12[0] = MEMORY[0x1E0DE4FB8] + 16;
  v13 = 0u;
  v14 = 0u;
  v15 = 16;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v11, (uint64_t)"EmptyStringWalker::ShortVisit called", 36);
  LogMessage::~LogMessage(&v10);
  return a3;
}

void sub_1C381620C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  LogMessage::~LogMessage(&a9);
  _Unwind_Resume(a1);
}

void sub_1C3816220(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1C3BD4828](v1 + 120);
  _Unwind_Resume(a1);
}

uint64_t re2::CanBeEmptyString(re2 *this, re2::Regexp *a2)
{
  _OWORD *v3;
  uint64_t v4;
  uint64_t v5;
  void (**v7)();
  _OWORD *v8;
  uint64_t v9;

  v9 = 0xF424000000000;
  v3 = (_OWORD *)operator new();
  *v3 = 0u;
  v3[1] = 0u;
  v3[2] = 0u;
  v7 = (void (**)())&off_1E7DB6CA0;
  v8 = v3;
  v4 = re2::Regexp::Walker<BOOL>::WalkInternal((uint64_t *)&v7, (uint64_t)this);
  v7 = off_1E7DB6CF8;
  re2::Regexp::Walker<BOOL>::Reset((uint64_t)&v7);
  if (v8)
  {
    v5 = std::deque<re2::WalkState<BOOL>>::~deque[abi:ne180100]((uint64_t)v8);
    MEMORY[0x1C3BD4858](v5, 0x1080C40BE8D5F09);
  }
  return v4;
}

void sub_1C38162F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  re2::EmptyStringWalker::~EmptyStringWalker((re2::EmptyStringWalker *)va);
  _Unwind_Resume(a1);
}

uint64_t re2::Regexp::Walker<BOOL>::WalkInternal(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  _DWORD *v19;
  int v20;
  int v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  std::ios_base *v61;
  void *v63;
  uint64_t v64;
  uint64_t v65[8];
  __int128 v66;
  __int128 v67;
  int v68;
  uint64_t v69;

  re2::Regexp::Walker<BOOL>::Reset((uint64_t)a1);
  if (a2)
  {
    v4 = (_QWORD *)a1[1];
    v5 = v4[2];
    v6 = v4[1];
    v7 = -1;
    if (v5 == v6)
      v8 = 0;
    else
      v8 = 170 * ((v5 - v6) >> 3) - 1;
    v9 = v4[5];
    v10 = v9 + v4[4];
    if (v8 == v10)
    {
      std::deque<re2::WalkState<BOOL>>::__add_back_capacity(a1[1]);
      v6 = v4[1];
      v9 = v4[5];
      v10 = v9 + v4[4];
    }
    v11 = *(_QWORD *)(v6 + 8 * (v10 / 0xAA)) + 24 * (v10 % 0xAA);
    *(_QWORD *)v11 = a2;
    *(_DWORD *)(v11 + 8) = -1;
    *(_BYTE *)(v11 + 12) = 1;
    *(_QWORD *)(v11 + 16) = 0;
    v4[5] = v9 + 1;
    while (1)
    {
      while (1)
      {
        v13 = (_QWORD *)a1[1];
        v14 = v13[5] + v13[4] - 1;
        v15 = *(_QWORD *)(v13[1] + 8 * (v14 / 0xAA));
        v16 = v14 % 0xAA;
        v17 = (uint64_t *)(v15 + 24 * (v14 % 0xAA));
        v18 = *v17;
        v20 = *((_DWORD *)v17 + 2);
        v19 = v17 + 1;
        if (v20 == -1)
        {
          v33 = *((_DWORD *)a1 + 5);
          *((_DWORD *)a1 + 5) = v33 - 1;
          if (v33 <= 0)
          {
            *((_BYTE *)a1 + 16) = 1;
            v37 = (*(uint64_t (**)(uint64_t *, uint64_t, _QWORD))(*a1 + 40))(a1, v18, *(unsigned __int8 *)(v15 + 24 * v16 + 12));
            goto LABEL_30;
          }
          v34 = v7;
          LOBYTE(v63) = 0;
          v35 = v15 + 24 * v16;
          v36 = (*(uint64_t (**)(uint64_t *, uint64_t, _QWORD, void **))(*a1 + 16))(a1, v18, *(unsigned __int8 *)(v35 + 12), &v63);
          *(_BYTE *)(v35 + 13) = v36;
          if ((_BYTE)v63)
          {
            v37 = v36;
            v7 = v34;
            goto LABEL_30;
          }
          *v19 = 0;
          v51 = v15 + 24 * v16;
          *(_QWORD *)(v51 + 16) = 0;
          v52 = (uint64_t *)(v51 + 16);
          v7 = v34;
          if (*(_WORD *)(v18 + 6))
          {
            if (*(_WORD *)(v18 + 6) == 1)
              v53 = v15 + 24 * v16 + 14;
            else
              v53 = operator new[]();
            *v52 = v53;
          }
        }
        v21 = *(unsigned __int16 *)(v18 + 6);
        if (*(_WORD *)(v18 + 6))
          break;
        v23 = *v19;
LABEL_26:
        v38 = v15 + 24 * v16;
        v40 = *(_QWORD *)(v38 + 16);
        v39 = (_QWORD *)(v38 + 16);
        v37 = (*(uint64_t (**)(uint64_t *, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))(*a1 + 24))(a1, v18, *((unsigned __int8 *)v39 - 4), *((unsigned __int8 *)v39 - 3), v40, v23);
        if (*(unsigned __int16 *)(v18 + 6) >= 2u && *v39)
          MEMORY[0x1C3BD4840](*v39, 0x1000C8077774924);
LABEL_30:
        v41 = (_QWORD *)a1[1];
        v42 = v41[2];
        v44 = v41[4];
        v43 = v41[5];
        if (v42 == v41[1])
          v45 = 0;
        else
          v45 = v7 + 170 * ((v42 - v41[1]) >> 3);
        v46 = v43 - 1;
        v41[5] = v43 - 1;
        if ((unint64_t)(v45 - (v43 + v44) + 1) >= 0x154)
        {
          operator delete(*(void **)(v42 - 8));
          v41[2] -= 8;
          v41 = (_QWORD *)a1[1];
          v46 = v41[5];
        }
        if (!v46)
          return v37;
        v47 = v46 + v41[4] - 1;
        v48 = *(_QWORD *)(v41[1] + 8 * (v47 / 0xAA));
        v49 = v47 % 0xAA;
        v50 = *(_QWORD *)(v48 + 24 * v49 + 16);
        if (v50)
        {
          v12 = *(int *)(v48 + 24 * v49 + 8);
          *(_BYTE *)(v50 + v12) = v37;
        }
        else
        {
          v12 = v48 + 24 * v49;
          *(_BYTE *)(v12 + 14) = v37;
          LODWORD(v12) = *(_DWORD *)(v12 + 8);
        }
        *(_DWORD *)(v48 + 24 * v49 + 8) = v12 + 1;
      }
      v22 = (_QWORD *)(v18 + 8);
      if (v21 != 1)
        v22 = (_QWORD *)*v22;
      v23 = *v19;
      if ((int)v23 >= v21)
        goto LABEL_26;
      v24 = (v23 - 1);
      if ((int)v23 >= 1 && v22[v24] == v22[v23])
      {
        v54 = v15 + 24 * v16;
        v55 = (*(uint64_t (**)(uint64_t *, _QWORD))(*a1 + 32))(a1, *(unsigned __int8 *)(*(_QWORD *)(v54 + 16) + v24));
        v56 = (int)*v19;
        *(_BYTE *)(*(_QWORD *)(v54 + 16) + v56) = v55;
        *v19 = v56 + 1;
      }
      else
      {
        v25 = (_QWORD *)a1[1];
        v26 = v25[1];
        v27 = v7 + 170 * ((v25[2] - v26) >> 3);
        v28 = v22[(int)v23];
        v29 = *(_BYTE *)(v15 + 24 * v16 + 13);
        if (v25[2] == v26)
          v27 = 0;
        v30 = v25[5];
        v31 = v30 + v25[4];
        if (v27 == v31)
        {
          std::deque<re2::WalkState<BOOL>>::__add_back_capacity(a1[1]);
          v26 = v25[1];
          v30 = v25[5];
          v31 = v30 + v25[4];
        }
        v32 = *(_QWORD *)(v26 + 8 * (v31 / 0xAA)) + 24 * (v31 % 0xAA);
        *(_QWORD *)v32 = v28;
        *(_DWORD *)(v32 + 8) = -1;
        *(_BYTE *)(v32 + 12) = v29;
        *(_QWORD *)(v32 + 16) = 0;
        v25[5] = v30 + 1;
      }
    }
  }
  LOBYTE(v63) = 0;
  v57 = MEMORY[0x1E0DE4FE0];
  v58 = MEMORY[0x1E0DE4FE0] + 64;
  v59 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v60 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v69 = MEMORY[0x1E0DE4FE0] + 64;
  v64 = v59;
  *(uint64_t *)((char *)&v65[-1] + *(_QWORD *)(v59 - 24)) = v60;
  v61 = (std::ios_base *)((char *)&v65[-1] + *(_QWORD *)(v64 - 24));
  std::ios_base::init(v61, v65);
  v61[1].__vftable = 0;
  v61[1].__fmtflags_ = -1;
  v64 = v57 + 24;
  v69 = v58;
  std::streambuf::basic_streambuf();
  v65[0] = MEMORY[0x1E0DE4FB8] + 16;
  v66 = 0u;
  v67 = 0u;
  v68 = 16;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v64, (uint64_t)"Walk NULL", 9);
  LogMessage::~LogMessage(&v63);
  return 1;
}

void sub_1C38167BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_1C38167D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1C3BD4828](v1 + 120);
  _Unwind_Resume(a1);
}

void re2::Regexp::Walker<BOOL>::Reset(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22[8];
  __int128 v23;
  __int128 v24;
  int v25;
  uint64_t v26;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(v1 + 40))
    {
      LOBYTE(v20) = 0;
      v3 = MEMORY[0x1E0DE4FE0];
      v4 = MEMORY[0x1E0DE4FE0] + 64;
      v5 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
      v6 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
      v26 = MEMORY[0x1E0DE4FE0] + 64;
      v21 = v5;
      *(uint64_t *)((char *)&v22[-1] + *(_QWORD *)(v5 - 24)) = v6;
      v7 = (std::ios_base *)((char *)&v22[-1] + *(_QWORD *)(v21 - 24));
      std::ios_base::init(v7, v22);
      v7[1].__vftable = 0;
      v7[1].__fmtflags_ = -1;
      v21 = v3 + 24;
      v26 = v4;
      std::streambuf::basic_streambuf();
      v22[0] = MEMORY[0x1E0DE4FB8] + 16;
      v23 = 0u;
      v24 = 0u;
      v25 = 16;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Stack not empty.", 16);
      LogMessage::~LogMessage(&v20);
      v8 = *(_QWORD **)(a1 + 8);
      v9 = v8[5];
      while (v9)
      {
        v10 = v8[4];
        v11 = v9 + v10 - 1;
        v12 = v8[1];
        v13 = *(_QWORD *)(*(_QWORD *)(v12 + 8 * (v11 / 0xAA)) + 24 * (v11 % 0xAA) + 16);
        if (v13)
        {
          MEMORY[0x1C3BD4858](v13, 0x1000C4077774924);
          v8 = *(_QWORD **)(a1 + 8);
          v10 = v8[4];
          v12 = v8[1];
        }
        v14 = v8[2];
        v16 = v14 - v12;
        v15 = v16 == 0;
        v17 = 170 * (v16 >> 3) - 1;
        v18 = v8[5];
        if (v15)
          v19 = 0;
        else
          v19 = v17;
        v9 = v18 - 1;
        v8[5] = v18 - 1;
        if ((unint64_t)(v19 - (v18 + v10) + 1) >= 0x154)
        {
          operator delete(*(void **)(v14 - 8));
          v8[2] -= 8;
          v8 = *(_QWORD **)(a1 + 8);
          v9 = v8[5];
        }
      }
    }
  }
}

void sub_1C38169C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  LogMessage::~LogMessage(&a9);
  _Unwind_Resume(a1);
}

void sub_1C38169D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1C3BD4828](v1 + 120);
  _Unwind_Resume(a1);
}

uint64_t std::deque<re2::WalkState<BOOL>>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 85;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 170;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void re2::EmptyStringWalker::~EmptyStringWalker(re2::EmptyStringWalker *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_1E7DB6CF8;
  re2::Regexp::Walker<BOOL>::Reset((uint64_t)this);
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    v3 = std::deque<re2::WalkState<BOOL>>::~deque[abi:ne180100](v2);
    MEMORY[0x1C3BD4858](v3, 0x1080C40BE8D5F09);
  }
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_1E7DB6CF8;
  re2::Regexp::Walker<BOOL>::Reset((uint64_t)this);
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    v3 = std::deque<re2::WalkState<BOOL>>::~deque[abi:ne180100](v2);
    MEMORY[0x1C3BD4858](v3, 0x1080C40BE8D5F09);
  }
  JUMPOUT(0x1C3BD4858);
}

uint64_t re2::Regexp::Walker<BOOL>::PostVisit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a4;
}

void std::deque<re2::WalkState<BOOL>>::__add_back_capacity(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  void *v29;
  char *v30;
  char *v31;
  void *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  BOOL v40;
  int64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  unint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _OWORD *v52;
  unint64_t v53;
  char *v54;
  char *v55;
  unint64_t v56;
  int64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 *v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  unint64_t v78;
  uint64_t v79;
  __int128 *v80;
  _OWORD *v81;
  uint64_t v82;
  __int128 v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  __int128 *v87;
  _OWORD *v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  int64_t v96;
  unint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  __int128 *v102;
  _OWORD *v103;
  uint64_t v104;
  __int128 v105;
  uint64_t v106;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0xAA;
  v4 = v2 - 170;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_86:
      *(_QWORD *)v5 = v8;
      goto LABEL_87;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v34 = (v5 - v9) >> 2;
      if (v5 == v9)
        v34 = 1;
      if (!(v34 >> 61))
      {
        v35 = v34 >> 2;
        v36 = 8 * v34;
        v37 = (char *)operator new(8 * v34);
        v38 = &v37[8 * v35];
        v39 = &v37[v36];
        v41 = v5 - v7;
        v40 = v5 == v7;
        v5 = v38;
        if (!v40)
        {
          v5 = &v38[v41 & 0xFFFFFFFFFFFFFFF8];
          v42 = v41 - 8;
          if ((unint64_t)(v41 - 8) >= 0x38)
          {
            v84 = &v37[8 * v35];
            v43 = v84;
            if ((unint64_t)(v84 - v7) >= 0x20)
            {
              v85 = (v42 >> 3) + 1;
              v86 = 8 * (v85 & 0x3FFFFFFFFFFFFFFCLL);
              v43 = &v38[v86];
              v87 = (__int128 *)(v6 + 3);
              v88 = v84 + 16;
              v89 = v85 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v90 = *v87;
                *(v88 - 1) = *(v87 - 1);
                *v88 = v90;
                v87 += 2;
                v88 += 2;
                v89 -= 4;
              }
              while (v89);
              if (v85 == (v85 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_79;
              v7 += v86;
            }
          }
          else
          {
            v43 = &v37[8 * v35];
          }
          do
          {
            v91 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v43 = v91;
            v43 += 8;
          }
          while (v43 != v5);
        }
        goto LABEL_79;
      }
LABEL_104:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_86;
  }
  v18 = *(char **)(a1 + 16);
  v17 = *(char **)(a1 + 24);
  v20 = *(char **)a1;
  v19 = *(char **)(a1 + 8);
  v21 = v18 - v19;
  v22 = (v18 - v19) >> 3;
  v23 = (uint64_t)&v17[-*(_QWORD *)a1];
  if (v22 < (unint64_t)(v23 >> 3))
  {
    v24 = operator new(0xFF0uLL);
    v25 = v24;
    if (v17 != v18)
    {
      *(_QWORD *)v18 = v24;
LABEL_87:
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    if (v19 != v20)
    {
      v44 = v19;
      goto LABEL_85;
    }
    v69 = (v17 - v19) >> 2;
    if (v18 == v19)
      v69 = 1;
    if (v69 >> 61)
      goto LABEL_104;
    v70 = (v69 + 3) >> 2;
    v71 = 8 * v69;
    v72 = (char *)operator new(8 * v69);
    v44 = &v72[8 * v70];
    v73 = &v72[v71];
    v74 = v44;
    if (v18 != v19)
    {
      v74 = &v44[8 * v22];
      v75 = &v72[8 * v70];
      v76 = v19;
      if ((unint64_t)(v21 - 8) > 0x37)
      {
        v77 = &v72[8 * v70];
        v75 = v77;
        v76 = v19;
        if ((unint64_t)(v77 - v19) >= 0x20)
        {
          v78 = ((unint64_t)(v21 - 8) >> 3) + 1;
          v79 = 8 * (v78 & 0x3FFFFFFFFFFFFFFCLL);
          v75 = &v44[v79];
          v80 = (__int128 *)(v19 + 16);
          v81 = v77 + 16;
          v82 = v78 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v83 = *v80;
            *(v81 - 1) = *(v80 - 1);
            *v81 = v83;
            v80 += 2;
            v81 += 2;
            v82 -= 4;
          }
          while (v82);
          if (v78 == (v78 & 0x3FFFFFFFFFFFFFFCLL))
          {
            *(_QWORD *)a1 = v72;
            *(_QWORD *)(a1 + 8) = v44;
            *(_QWORD *)(a1 + 16) = v74;
            *(_QWORD *)(a1 + 24) = v73;
LABEL_84:
            operator delete(v19);
            v44 = *(char **)(a1 + 8);
LABEL_85:
            *((_QWORD *)v44 - 1) = v25;
            v7 = *(char **)(a1 + 8);
            v5 = *(char **)(a1 + 16);
            *(_QWORD *)(a1 + 8) = v7 - 8;
            v8 = *((_QWORD *)v7 - 1);
            *(_QWORD *)(a1 + 8) = v7;
            if (v5 != *(char **)(a1 + 24))
              goto LABEL_86;
            v9 = *(char **)a1;
            v10 = (uint64_t)&v7[-*(_QWORD *)a1];
            if ((unint64_t)v7 <= *(_QWORD *)a1)
            {
              v93 = (v5 - v9) >> 2;
              if (v5 == v9)
                v93 = 1;
              if (!(v93 >> 61))
              {
                v94 = v93 >> 2;
                v95 = 8 * v93;
                v37 = (char *)operator new(8 * v93);
                v38 = &v37[8 * v94];
                v39 = &v37[v95];
                v96 = v5 - v7;
                v40 = v5 == v7;
                v5 = v38;
                if (!v40)
                {
                  v5 = &v38[v96 & 0xFFFFFFFFFFFFFFF8];
                  v97 = v96 - 8;
                  if ((unint64_t)(v96 - 8) >= 0x38)
                  {
                    v99 = &v37[8 * v94];
                    v98 = v99;
                    if ((unint64_t)(v99 - v7) >= 0x20)
                    {
                      v100 = (v97 >> 3) + 1;
                      v101 = 8 * (v100 & 0x3FFFFFFFFFFFFFFCLL);
                      v98 = &v38[v101];
                      v102 = (__int128 *)(v7 + 16);
                      v103 = v99 + 16;
                      v104 = v100 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        v105 = *v102;
                        *(v103 - 1) = *(v102 - 1);
                        *v103 = v105;
                        v102 += 2;
                        v103 += 2;
                        v104 -= 4;
                      }
                      while (v104);
                      if (v100 == (v100 & 0x3FFFFFFFFFFFFFFCLL))
                        goto LABEL_79;
                      v7 += v101;
                    }
                  }
                  else
                  {
                    v98 = &v37[8 * v94];
                  }
                  do
                  {
                    v106 = *(_QWORD *)v7;
                    v7 += 8;
                    *(_QWORD *)v98 = v106;
                    v98 += 8;
                  }
                  while (v98 != v5);
                }
LABEL_79:
                *(_QWORD *)a1 = v37;
                *(_QWORD *)(a1 + 8) = v38;
                *(_QWORD *)(a1 + 16) = v5;
                *(_QWORD *)(a1 + 24) = v39;
                if (v9)
                {
                  operator delete(v9);
                  v5 = *(char **)(a1 + 16);
                }
                goto LABEL_86;
              }
              goto LABEL_104;
            }
            goto LABEL_5;
          }
          v76 = &v19[v79];
        }
      }
      do
      {
        v92 = *(_QWORD *)v76;
        v76 += 8;
        *(_QWORD *)v75 = v92;
        v75 += 8;
      }
      while (v75 != v74);
    }
    *(_QWORD *)a1 = v72;
    *(_QWORD *)(a1 + 8) = v44;
    *(_QWORD *)(a1 + 16) = v74;
    *(_QWORD *)(a1 + 24) = v73;
    if (!v19)
      goto LABEL_85;
    goto LABEL_84;
  }
  v26 = v23 >> 2;
  if (v17 == v20)
    v27 = 1;
  else
    v27 = v26;
  if (v27 >> 61)
    goto LABEL_104;
  v28 = (char *)operator new(8 * v27);
  v29 = operator new(0xFF0uLL);
  v30 = &v28[8 * v22];
  v31 = &v28[8 * v27];
  if (v22 == v27)
  {
    v32 = v29;
    if (v21 < 1)
    {
      if (v18 == v19)
        v45 = 1;
      else
        v45 = v21 >> 2;
      if (v45 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v30 = (char *)operator new(8 * v45);
      v31 = &v30[8 * v45];
      operator delete(v28);
      v19 = *(char **)(a1 + 8);
      v18 = *(char **)(a1 + 16);
      v28 = v30;
    }
    else
    {
      v33 = v22 + 2;
      if (v22 >= -1)
        v33 = v22 + 1;
      v30 -= 8 * (v33 >> 1);
    }
    v29 = v32;
  }
  *(_QWORD *)v30 = v29;
  v46 = v30 + 8;
  if (v18 != v19)
  {
    do
    {
      if (v30 != v28)
        goto LABEL_41;
      if (v46 < v31)
      {
        v49 = (v31 - v46) >> 3;
        if (v49 >= -1)
          v50 = v49 + 1;
        else
          v50 = v49 + 2;
        v51 = v50 >> 1;
        v30 = &v28[8 * (v50 >> 1)];
        v52 = v28;
        if (v46 != v28)
        {
          memmove(v30, v28, v46 - v28);
          v52 = v46;
        }
        v46 = (char *)v52 + 8 * v51;
        goto LABEL_41;
      }
      if (v31 == v28)
        v53 = 1;
      else
        v53 = (v31 - v28) >> 2;
      if (v53 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v54 = (char *)operator new(8 * v53);
      v55 = v54;
      v56 = (v53 + 3) >> 2;
      v30 = &v54[8 * v56];
      v57 = v46 - v28;
      v40 = v46 == v28;
      v46 = v30;
      if (!v40)
      {
        v46 = &v30[v57 & 0xFFFFFFFFFFFFFFF8];
        v58 = v57 - 8;
        v59 = &v54[8 * v56];
        v60 = v28;
        if (v58 >= 0x38)
        {
          v61 = 8 * v56;
          v59 = &v54[8 * v56];
          v60 = v28;
          if ((unint64_t)(v59 - v28) >= 0x20)
          {
            v62 = (v58 >> 3) + 1;
            v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
            v59 = &v30[v63];
            v64 = (__int128 *)(v28 + 16);
            v65 = &v54[v61 + 16];
            v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v67 = *v64;
              *((_OWORD *)v65 - 1) = *(v64 - 1);
              *(_OWORD *)v65 = v67;
              v64 += 2;
              v65 += 32;
              v66 -= 4;
            }
            while (v66);
            if (v62 == (v62 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_40;
            v60 = &v28[v63];
          }
        }
        do
        {
          v68 = *(_QWORD *)v60;
          v60 += 8;
          *(_QWORD *)v59 = v68;
          v59 += 8;
        }
        while (v59 != v46);
      }
LABEL_40:
      v31 = &v54[8 * v53];
      operator delete(v28);
      v28 = v55;
LABEL_41:
      v48 = *((_QWORD *)v18 - 1);
      v18 -= 8;
      *((_QWORD *)v30 - 1) = v48;
      v30 -= 8;
    }
    while (v18 != *(char **)(a1 + 8));
  }
  v47 = *(char **)a1;
  *(_QWORD *)a1 = v28;
  *(_QWORD *)(a1 + 8) = v30;
  *(_QWORD *)(a1 + 16) = v46;
  *(_QWORD *)(a1 + 24) = v31;
  if (v47)
    operator delete(v47);
}

void sub_1C3817128(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL re2::EmptyStringWalker::PostVisit(re2::EmptyStringWalker *this, re2::Regexp *a2, BOOL a3, BOOL a4, BOOL *a5, unsigned int a6)
{
  _BOOL8 result;
  unint64_t v7;
  unint64_t v9;

  result = 0;
  switch(*(_BYTE *)a2)
  {
    case 2:
    case 7:
    case 9:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x15:
      return 1;
    case 5:
      if ((int)a6 < 1)
        return 1;
      if (!*a5)
        return 0;
      v7 = 0;
      while (a6 - 1 != v7)
      {
        if (!a5[++v7])
          return v7 >= a6;
      }
      v7 = a6;
      return v7 >= a6;
    case 6:
      if ((int)a6 < 1)
        return 0;
      if (*a5)
        return 1;
      v9 = 0;
      break;
    case 8:
    case 0xB:
      if (!a5)
        return 0;
      return *a5;
    case 0xA:
      if (!a5)
        return 0;
      return *a5 || *((_DWORD *)a2 + 7) == 0;
    default:
      return result;
  }
  while (a6 - 1 != v9)
  {
    if (a5[++v9])
      return v9 < a6;
  }
  v9 = a6;
  return v9 < a6;
}

uint64_t re2::EmptyStringWalker::ShortVisit(re2::EmptyStringWalker *this, re2::Regexp *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  void *v10;
  uint64_t v11;
  uint64_t v12[8];
  __int128 v13;
  __int128 v14;
  int v15;
  uint64_t v16;

  LOBYTE(v10) = 0;
  v4 = MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v16 = MEMORY[0x1E0DE4FE0] + 64;
  v11 = v6;
  *(uint64_t *)((char *)&v12[-1] + *(_QWORD *)(v6 - 24)) = v7;
  v8 = (std::ios_base *)((char *)&v12[-1] + *(_QWORD *)(v11 - 24));
  std::ios_base::init(v8, v12);
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v11 = v4 + 24;
  v16 = v5;
  std::streambuf::basic_streambuf();
  v12[0] = MEMORY[0x1E0DE4FB8] + 16;
  v13 = 0u;
  v14 = 0u;
  v15 = 16;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v11, (uint64_t)"EmptyStringWalker::ShortVisit called", 36);
  LogMessage::~LogMessage(&v10);
  return a3;
}

void sub_1C38173B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  LogMessage::~LogMessage(&a9);
  _Unwind_Resume(a1);
}

void sub_1C38173C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1C3BD4828](v1 + 120);
  _Unwind_Resume(a1);
}

uint64_t re2::Regexp::MimicsPCRE(re2::Regexp *this)
{
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void (**v6)();
  _OWORD *v7;
  uint64_t v8;

  v8 = 0xF424000000000;
  v2 = (_OWORD *)operator new();
  *v2 = 0u;
  v2[1] = 0u;
  v2[2] = 0u;
  v6 = (void (**)())&off_1E7DB6C38;
  v7 = v2;
  v3 = re2::Regexp::Walker<BOOL>::WalkInternal((uint64_t *)&v6, (uint64_t)this);
  v6 = off_1E7DB6CF8;
  re2::Regexp::Walker<BOOL>::Reset((uint64_t)&v6);
  if (v7)
  {
    v4 = std::deque<re2::WalkState<BOOL>>::~deque[abi:ne180100]((uint64_t)v7);
    MEMORY[0x1C3BD4858](v4, 0x1080C40BE8D5F09);
  }
  return v3;
}

void sub_1C3817498(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  re2::PCREWalker::~PCREWalker((re2::PCREWalker *)va);
  _Unwind_Resume(a1);
}

void sub_1C38188D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t levenshtein<char>(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  unsigned int v5;
  int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  unsigned int i;
  uint64_t v18;
  int v20;
  size_t v21;
  int v22;
  _DWORD *v23;
  size_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v5 = a3;
  v8 = 0;
  v9 = 0;
  v39 = *MEMORY[0x1E0C80C00];
  if (a3 >= a4)
    v10 = a4;
  else
    v10 = a3;
  if (a4 <= a3)
    v11 = a3;
  else
    v11 = a4;
  while (*(unsigned __int8 *)(a1 + v9) == *(unsigned __int8 *)(a2 + v9))
  {
    ++v9;
    --v8;
    if (!(v10 + v8))
    {
      v12 = 0;
      return v11 - v10 + v12;
    }
  }
  v13 = 0;
  v14 = a3 + v8;
  v15 = v10 + v8;
  v12 = -v15;
  v16 = a4 - 1;
  for (i = a3 - 1; *(unsigned __int8 *)(a1 + i) == *(unsigned __int8 *)(a2 + v16); --i)
  {
    --v14;
    ++v13;
    --v16;
    if (v15 == v13)
    {
      v10 = v9;
      return v11 - v10 + v12;
    }
  }
  v20 = v9 + v13;
  v21 = v11 - ((_DWORD)v9 + v13) + 1;
  v22 = a4 + v8;
  v37 = v11 + v8 - v13;
  v38 = (4 * v21);
  if (v38 <= 0x7CF)
  {
    MEMORY[0x1E0C80A78]();
    v23 = (_DWORD *)((char *)&v36 - ((v24 + 15) & 0x1FFFFFFF0));
    bzero(v23, v24);
  }
  else
  {
    v23 = malloc_type_calloc(4uLL, v21, 0x88A251CFuLL);
  }
  v25 = 0;
  v26 = (v22 - v13);
  v27 = v37 + 1;
  do
  {
    v23[v25] = v25;
    ++v25;
  }
  while (v27 != v25);
  if (v20 != v5)
  {
    v28 = 0;
    if (v14 <= 1)
      v29 = 1;
    else
      v29 = v14;
    if (v26 <= 1)
      v26 = 1;
    v30 = v23 + 1;
    do
    {
      v31 = *(unsigned __int8 *)(a1 + (v9 + v28));
      v32 = v28 + 1;
      *v23 = v28 + 1;
      if (v20 != a4)
      {
        v33 = 0;
        v34 = v28 + 1;
        do
        {
          if (*(unsigned __int8 *)(a2 + (v9 + v33)) != v31)
            LODWORD(v28) = v28 + 1;
          v35 = v30[v33];
          if (v35 + 1 >= v34 + 1)
            ++v34;
          else
            v34 = v35 + 1;
          if (v34 >= v28)
            v34 = v28;
          v30[v33++] = v34;
          LODWORD(v28) = v35;
        }
        while (v26 != v33);
      }
      v28 = v32;
    }
    while (v32 != v29);
    v5 = v9 + v13;
  }
  v18 = v23[a4 - v5];
  if (v38 > 0x7CF)
    free(v23);
  return v18;
}

uint64_t levenshtein<unsigned int>(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  unsigned int v5;
  unsigned int v6;
  int v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  size_t v22;
  int v23;
  _DWORD *v24;
  size_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v5 = a3;
  v40 = *MEMORY[0x1E0C80C00];
  if (a3 >= a4)
    v6 = a4;
  else
    v6 = a3;
  if (v6)
  {
    v9 = 0;
    v10 = 0;
    if (a4 <= a3)
      v11 = a3;
    else
      v11 = a4;
    while (*(_DWORD *)(a1 + 4 * v10) == *(_DWORD *)(a2 + 4 * v10))
    {
      ++v10;
      --v9;
      if (!(v6 + v9))
        goto LABEL_10;
    }
    v16 = 0;
    v17 = a3 + v9;
    v18 = v6 + v9;
    v12 = -v18;
    v19 = a4 - 1;
    v20 = a3 - 1;
    while (*(_DWORD *)(a1 + 4 * v20) == *(_DWORD *)(a2 + 4 * v19))
    {
      --v17;
      ++v16;
      --v19;
      --v20;
      if (v18 == v16)
      {
        v6 = v10;
        goto LABEL_11;
      }
    }
    v21 = v10 + v16;
    v22 = v11 - ((_DWORD)v10 + v16) + 1;
    v23 = a4 + v9;
    v38 = v11 + v9 - v16;
    v39 = (4 * v22);
    if (v39 <= 0x7CF)
    {
      MEMORY[0x1E0C80A78]();
      v24 = (_DWORD *)((char *)&v37 - ((v25 + 15) & 0x1FFFFFFF0));
      bzero(v24, v25);
    }
    else
    {
      v24 = malloc_type_calloc(4uLL, v22, 0x88A251CFuLL);
    }
    v26 = 0;
    v27 = (v23 - v16);
    v28 = v38 + 1;
    do
    {
      v24[v26] = v26;
      ++v26;
    }
    while (v28 != v26);
    if (v21 != v5)
    {
      v29 = 0;
      if (v17 <= 1)
        v30 = 1;
      else
        v30 = v17;
      if (v27 <= 1)
        v27 = 1;
      v31 = v24 + 1;
      do
      {
        v32 = *(_DWORD *)(a1 + 4 * (v10 + v29));
        v33 = v29 + 1;
        *v24 = v29 + 1;
        if (v21 != a4)
        {
          v34 = 0;
          v35 = v29 + 1;
          do
          {
            if (*(_DWORD *)(a2 + 4 * (v10 + v34)) != v32)
              LODWORD(v29) = v29 + 1;
            v36 = v31[v34];
            if (v36 + 1 >= v35 + 1)
              ++v35;
            else
              v35 = v36 + 1;
            if (v35 >= v29)
              v35 = v29;
            v31[v34++] = v35;
            LODWORD(v29) = v36;
          }
          while (v27 != v34);
        }
        v29 = v33;
      }
      while (v33 != v30);
      v5 = v10 + v16;
    }
    v14 = v24[a4 - v5];
    if (v39 > 0x7CF)
      free(v24);
  }
  else
  {
LABEL_10:
    v12 = 0;
LABEL_11:
    if (a3 <= a4)
      v13 = a4;
    else
      v13 = a3;
    return v13 - v6 + v12;
  }
  return v14;
}

uint64_t SGDCKTimeRangeReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  unint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 44) |= 4u;
          v18 = *v3;
          v19 = *(_QWORD *)(a2 + v18);
          if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v20 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v19);
            *(_QWORD *)(a2 + v18) = v19 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v20 = 0;
          }
          v47 = 24;
          goto LABEL_65;
        case 2u:
          *(_BYTE *)(a1 + 44) |= 1u;
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 <= 0xFFFFFFFFFFFFFFF7 && v23 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v20 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v20 = 0;
          }
          v47 = 8;
LABEL_65:
          *(_QWORD *)(a1 + v47) = v20;
          continue;
        case 3u:
          v24 = 0;
          v25 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 44) |= 8u;
          while (2)
          {
            v27 = *v3;
            v28 = *(_QWORD *)(a2 + v27);
            v29 = v28 + 1;
            if (v28 == -1 || v29 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
              *(_QWORD *)(a2 + v27) = v29;
              v26 |= (unint64_t)(v30 & 0x7F) << v24;
              if (v30 < 0)
              {
                v24 += 7;
                v15 = v25++ >= 9;
                if (v15)
                {
                  v26 = 0;
                  goto LABEL_51;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v26 = 0;
LABEL_51:
          v45 = -(v26 & 1) ^ (v26 >> 1);
          v46 = 32;
          goto LABEL_56;
        case 4u:
          v31 = 0;
          v32 = 0;
          v33 = 0;
          *(_BYTE *)(a1 + 44) |= 2u;
          while (2)
          {
            v34 = *v3;
            v35 = *(_QWORD *)(a2 + v34);
            v36 = v35 + 1;
            if (v35 == -1 || v36 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v37 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v35);
              *(_QWORD *)(a2 + v34) = v36;
              v33 |= (unint64_t)(v37 & 0x7F) << v31;
              if (v37 < 0)
              {
                v31 += 7;
                v15 = v32++ >= 9;
                if (v15)
                {
                  v33 = 0;
                  goto LABEL_55;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v33 = 0;
LABEL_55:
          v45 = -(v33 & 1) ^ (v33 >> 1);
          v46 = 16;
LABEL_56:
          *(_QWORD *)(a1 + v46) = v45;
          continue;
        case 5u:
          v38 = 0;
          v39 = 0;
          v40 = 0;
          *(_BYTE *)(a1 + 44) |= 0x10u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v41 = *v3;
        v42 = *(_QWORD *)(a2 + v41);
        v43 = v42 + 1;
        if (v42 == -1 || v43 > *(_QWORD *)(a2 + *v4))
          break;
        v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v42);
        *(_QWORD *)(a2 + v41) = v43;
        v40 |= (unint64_t)(v44 & 0x7F) << v38;
        if ((v44 & 0x80) == 0)
          goto LABEL_58;
        v38 += 7;
        v15 = v39++ >= 9;
        if (v15)
        {
          v40 = 0;
          goto LABEL_60;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_58:
      if (*(_BYTE *)(a2 + *v5))
        v40 = 0;
LABEL_60:
      *(_BYTE *)(a1 + 40) = v40 != 0;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void re2::SimplifyWalker::~SimplifyWalker(re2::SimplifyWalker *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_1E7DB6DA0;
  re2::Regexp::Walker<re2::Regexp*>::Reset((uint64_t)this);
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    v3 = std::deque<re2::WalkState<re2::Frag>>::~deque[abi:ne180100](v2);
    MEMORY[0x1C3BD4858](v3, 0x1080C40BE8D5F09);
  }
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_1E7DB6DA0;
  re2::Regexp::Walker<re2::Regexp*>::Reset((uint64_t)this);
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    v3 = std::deque<re2::WalkState<re2::Frag>>::~deque[abi:ne180100](v2);
    MEMORY[0x1C3BD4858](v3, 0x1080C40BE8D5F09);
  }
  JUMPOUT(0x1C3BD4858);
}

re2::Regexp *re2::SimplifyWalker::PreVisit(re2::SimplifyWalker *this, re2::Regexp *a2, re2::Regexp *a3, BOOL *a4)
{
  if (!*((_BYTE *)a2 + 1))
    return 0;
  *a4 = 1;
  return re2::Regexp::Incref(a2);
}

re2::Regexp *re2::SimplifyWalker::PostVisit(re2::SimplifyWalker *this, re2::Regexp *a2, re2::Regexp *a3, re2::Regexp *a4, re2::Regexp **a5)
{
  re2::Regexp *v5;
  re2::Regexp *v7;
  int v9;
  re2::Regexp *v10;
  _WORD *v11;
  __int16 v12;
  uint64_t v13;
  re2::Regexp *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::ios_base *v19;
  int v20;
  char *v21;
  __int16 v22;
  re2::Regexp **v23;
  unint64_t v24;
  re2::Regexp *v25;
  re2::Regexp *v26;
  __int16 v27;
  __int16 v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD *v32;
  re2::Regexp **v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  re2::Regexp **v39;
  uint64_t v40;
  re2::Regexp *v41;
  __int16 v42;
  void *v43;
  uint64_t v44;
  uint64_t v45[8];
  __int128 v46;
  __int128 v47;
  int v48;
  uint64_t v49;

  v5 = a2;
  switch(*(_BYTE *)a2)
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x15:
      goto LABEL_2;
    case 5:
    case 6:
      v13 = *((unsigned __int16 *)a2 + 3);
      v14 = (re2::Regexp *)((char *)a2 + 8);
      if (v13 >= 2)
      {
        v14 = *(re2::Regexp **)v14;
      }
      else if (!*((_WORD *)a2 + 3))
      {
        goto LABEL_2;
      }
      v23 = a5;
      do
      {
        if (*v23 != *(re2::Regexp **)v14)
        {
          v7 = (re2::Regexp *)mallocRegexp();
          v28 = *((_WORD *)v5 + 1);
          *(_BYTE *)v7 = *(_BYTE *)v5;
          *((_BYTE *)v7 + 1) = 0;
          *((_WORD *)v7 + 1) = v28;
          *((_WORD *)v7 + 2) = 1;
          *(_OWORD *)((char *)v7 + 22) = 0u;
          *(_OWORD *)((char *)v7 + 6) = 0u;
          *((_WORD *)v7 + 19) = 0;
          re2::Regexp::AllocSub((uint64_t)v7, *((unsigned __int16 *)v5 + 3));
          v29 = (_QWORD *)((char *)v7 + 8);
          if (*((unsigned __int16 *)v7 + 3) >= 2u)
            v29 = (_QWORD *)*v29;
          v30 = *((unsigned __int16 *)v5 + 3);
          if (*((_WORD *)v5 + 3))
          {
            v31 = 0;
            if (v30 < 4)
              goto LABEL_41;
            if ((unint64_t)((char *)v29 - (char *)a5) <= 0x1F)
              goto LABEL_41;
            v31 = (unsigned __int16)v30 & 0xFFFC;
            v32 = v29 + 2;
            v33 = a5 + 2;
            v34 = v31;
            do
            {
              v35 = *(_OWORD *)v33;
              *(v32 - 1) = *((_OWORD *)v33 - 1);
              *v32 = v35;
              v32 += 2;
              v33 += 4;
              v34 -= 4;
            }
            while (v34);
            if (v31 != v30)
            {
LABEL_41:
              v36 = v30 - v31;
              v37 = v31;
              v38 = &v29[v37];
              v39 = &a5[v37];
              do
              {
                v40 = (uint64_t)*v39++;
                *v38++ = v40;
                --v36;
              }
              while (v36);
            }
          }
          *((_BYTE *)v7 + 1) = 1;
          return v7;
        }
        ++v23;
        v14 = (re2::Regexp *)((char *)v14 + 8);
        --v13;
      }
      while (v13);
      v24 = 0;
      do
        re2::Regexp::Decref(a5[v24++]);
      while (v24 < *((unsigned __int16 *)v5 + 3));
LABEL_2:
      *((_BYTE *)v5 + 1) = 1;
LABEL_3:
      re2::Regexp::Incref(v5);
      return v5;
    case 7:
    case 8:
    case 9:
      v7 = *a5;
      v9 = *(unsigned __int8 *)*a5;
      if (v9 == 2)
        return v7;
      v10 = (re2::Regexp *)((char *)a2 + 8);
      if (*((unsigned __int16 *)a2 + 3) >= 2u)
        v10 = *(re2::Regexp **)v10;
      if (v7 == *(re2::Regexp **)v10)
      {
        v41 = *a5;
        goto LABEL_46;
      }
      if (*(unsigned __int8 *)a2 != v9 || *((unsigned __int16 *)a2 + 1) != *((unsigned __int16 *)v7 + 1))
      {
        v11 = mallocRegexp();
        v12 = *((_WORD *)v5 + 1);
        *(_BYTE *)v11 = *(_BYTE *)v5;
        v11[1] = v12;
        *((_DWORD *)v11 + 1) = 65537;
        *((_QWORD *)v11 + 3) = 0;
        *((_QWORD *)v11 + 4) = 0;
        *((_QWORD *)v11 + 1) = v7;
        *((_QWORD *)v11 + 2) = 0;
        *((_BYTE *)v11 + 1) = 1;
        return (re2::Regexp *)v11;
      }
      return v7;
    case 0xA:
      v7 = *a5;
      if (*(_BYTE *)*a5 == 2)
        return v7;
      v5 = re2::SimplifyWalker::SimplifyRepeat(*a5, *((_DWORD *)a2 + 7), *((_DWORD *)a2 + 6), *((unsigned __int16 *)a2 + 1));
      re2::Regexp::Decref(v7);
      goto LABEL_50;
    case 0xB:
      v25 = *a5;
      v26 = (re2::Regexp *)((char *)a2 + 8);
      if (*((unsigned __int16 *)a2 + 3) >= 2u)
        v26 = *(re2::Regexp **)v26;
      if (v25 != *(re2::Regexp **)v26)
      {
        v7 = (re2::Regexp *)mallocRegexp();
        v27 = *((_WORD *)v5 + 1);
        *(_WORD *)v7 = 11;
        *((_WORD *)v7 + 1) = v27;
        *((_DWORD *)v7 + 1) = 65537;
        *((_QWORD *)v7 + 3) = 0;
        *((_QWORD *)v7 + 4) = 0;
        *((_QWORD *)v7 + 1) = v25;
        *((_QWORD *)v7 + 2) = 0;
        *((_DWORD *)v7 + 6) = *((_DWORD *)v5 + 6);
        *((_BYTE *)v7 + 1) = 1;
        return v7;
      }
      v41 = *a5;
LABEL_46:
      re2::Regexp::Decref(v41);
      goto LABEL_2;
    case 0x14:
      v20 = *(_DWORD *)(*((_QWORD *)a2 + 3) + 4);
      if (v20 == 1114112)
      {
        v21 = (char *)mallocRegexp();
        v42 = *((_WORD *)v5 + 1);
        *(_WORD *)v21 = 12;
        *((_WORD *)v21 + 1) = v42;
        *((_WORD *)v21 + 2) = 1;
        goto LABEL_48;
      }
      if (!v20)
      {
        v21 = (char *)mallocRegexp();
        v22 = *((_WORD *)v5 + 1);
        *(_WORD *)v21 = 1;
        *((_WORD *)v21 + 1) = v22;
        *((_WORD *)v21 + 2) = 1;
LABEL_48:
        *((_WORD *)v21 + 19) = 0;
        *(_OWORD *)(v21 + 22) = 0u;
        *(_OWORD *)(v21 + 6) = 0u;
        v5 = (re2::Regexp *)v21;
        goto LABEL_50;
      }
      re2::Regexp::Incref(a2);
LABEL_50:
      *((_BYTE *)v5 + 1) = 1;
      return v5;
    default:
      LOBYTE(v43) = 0;
      v15 = MEMORY[0x1E0DE4FE0];
      v16 = MEMORY[0x1E0DE4FE0] + 64;
      v17 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
      v18 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
      v49 = MEMORY[0x1E0DE4FE0] + 64;
      v44 = v17;
      *(uint64_t *)((char *)&v45[-1] + *(_QWORD *)(v17 - 24)) = v18;
      v19 = (std::ios_base *)((char *)&v45[-1] + *(_QWORD *)(v44 - 24));
      std::ios_base::init(v19, v45);
      v19[1].__vftable = 0;
      v19[1].__fmtflags_ = -1;
      v44 = v15 + 24;
      v49 = v16;
      std::streambuf::basic_streambuf();
      v45[0] = MEMORY[0x1E0DE4FB8] + 16;
      v46 = 0u;
      v47 = 0u;
      v48 = 16;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)"Simplify case not handled: ", 27);
      std::ostream::operator<<();
      LogMessage::~LogMessage(&v43);
      goto LABEL_3;
  }
}

void sub_1C381A8C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1C3BD4828](v1 + 120);
  _Unwind_Resume(a1);
}

void sub_1C381A8F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  LogMessage::~LogMessage(&a9);
  _Unwind_Resume(a1);
}

re2::Regexp *re2::SimplifyWalker::Copy(re2::SimplifyWalker *this, re2::Regexp *a2)
{
  return re2::Regexp::Incref(a2);
}

re2::Regexp *re2::SimplifyWalker::ShortVisit(re2::SimplifyWalker *this, re2::Regexp *a2, re2::Regexp *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  void *v10;
  uint64_t v11;
  uint64_t v12[8];
  __int128 v13;
  __int128 v14;
  int v15;
  uint64_t v16;

  LOBYTE(v10) = 0;
  v4 = MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v16 = MEMORY[0x1E0DE4FE0] + 64;
  v11 = v6;
  *(uint64_t *)((char *)&v12[-1] + *(_QWORD *)(v6 - 24)) = v7;
  v8 = (std::ios_base *)((char *)&v12[-1] + *(_QWORD *)(v11 - 24));
  std::ios_base::init(v8, v12);
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v11 = v4 + 24;
  v16 = v5;
  std::streambuf::basic_streambuf();
  v12[0] = MEMORY[0x1E0DE4FB8] + 16;
  v13 = 0u;
  v14 = 0u;
  v15 = 16;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v11, (uint64_t)"SimplifyWalker::ShortVisit called", 33);
  LogMessage::~LogMessage(&v10);
  return re2::Regexp::Incref(a2);
}

void sub_1C381AA04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  LogMessage::~LogMessage(&a9);
  _Unwind_Resume(a1);
}

void sub_1C381AA18(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1C3BD4828](v1 + 120);
  _Unwind_Resume(a1);
}

re2::Regexp *re2::SimplifyWalker::SimplifyRepeat(re2::Regexp *this, signed int a2, signed int a3, int a4)
{
  re2::Regexp *v6;
  uint64_t v8;
  char *v9;
  char *v10;
  __int16 v11;
  char *v12;
  re2::Regexp **v13;
  uint64_t v14;
  re2::Regexp **v15;
  re2::Regexp **v16;
  uint64_t v17;
  _WORD *v18;
  _WORD *v19;
  int v20;
  _WORD *v21;
  char *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  std::ios_base *v28;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v31;
  _QWORD *v32;
  std::string __p;
  void *v35;
  uint64_t v36;
  uint64_t v37[8];
  __int128 v38;
  __int128 v39;
  int v40;
  uint64_t v41;

  v6 = this;
  if (a3 == -1)
  {
    v8 = (a2 - 1);
    if (a2 == 1)
    {
      re2::Regexp::Incref(this);
      if (*(_BYTE *)v6 == 8 && *((unsigned __int16 *)v6 + 1) == a4)
        return v6;
      v9 = (char *)mallocRegexp();
      v10 = v9;
      v11 = 8;
    }
    else
    {
      if (a2)
      {
        v10 = (char *)mallocRegexp();
        *(_WORD *)v10 = 5;
        *((_WORD *)v10 + 1) = a4;
        *((_WORD *)v10 + 2) = 1;
        *(_OWORD *)(v10 + 6) = 0u;
        *(_OWORD *)(v10 + 22) = 0u;
        *((_WORD *)v10 + 19) = 0;
        re2::Regexp::AllocSub((uint64_t)v10, a2);
        v15 = (re2::Regexp **)(v10 + 8);
        if (*((unsigned __int16 *)v10 + 3) >= 2u)
          v15 = (re2::Regexp **)*v15;
        if (a2 >= 2)
        {
          v16 = v15;
          v17 = v8;
          do
          {
            re2::Regexp::Incref(v6);
            *v16++ = v6;
            --v17;
          }
          while (v17);
        }
        re2::Regexp::Incref(v6);
        if (*(_BYTE *)v6 != 8 || *((unsigned __int16 *)v6 + 1) != a4)
        {
          v18 = mallocRegexp();
          *v18 = 8;
          v18[1] = a4;
          *((_DWORD *)v18 + 1) = 65537;
          *((_QWORD *)v18 + 1) = v6;
          *((_QWORD *)v18 + 2) = 0;
          v6 = (re2::Regexp *)v18;
          *((_QWORD *)v18 + 3) = 0;
          *((_QWORD *)v18 + 4) = 0;
        }
        v15[(int)v8] = v6;
        return (re2::Regexp *)v10;
      }
      re2::Regexp::Incref(this);
      if (*(_BYTE *)v6 == 7 && *((unsigned __int16 *)v6 + 1) == a4)
        return v6;
      v9 = (char *)mallocRegexp();
      v10 = v9;
      v11 = 7;
    }
    *(_WORD *)v9 = v11;
    *((_WORD *)v9 + 1) = a4;
    *((_DWORD *)v9 + 1) = 65537;
    *((_QWORD *)v9 + 3) = 0;
    *((_QWORD *)v9 + 4) = 0;
    *((_QWORD *)v9 + 1) = v6;
    *((_QWORD *)v9 + 2) = 0;
    return (re2::Regexp *)v10;
  }
  if (!(a3 | a2))
  {
    v12 = (char *)mallocRegexp();
    v10 = v12;
    *(_WORD *)v12 = 2;
    *((_WORD *)v12 + 1) = a4;
LABEL_54:
    *((_WORD *)v12 + 2) = 1;
    *(_OWORD *)(v12 + 6) = 0u;
    *(_OWORD *)(v12 + 22) = 0u;
    *((_WORD *)v12 + 19) = 0;
    return (re2::Regexp *)v10;
  }
  if (a2 == 1 && a3 == 1)
  {
    re2::Regexp::Incref(this);
    return v6;
  }
  if (a2 < 1)
  {
    if (a3 <= a2)
    {
LABEL_45:
      LOBYTE(v35) = 0;
      v24 = MEMORY[0x1E0DE4FE0];
      v25 = MEMORY[0x1E0DE4FE0] + 64;
      v26 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
      v27 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
      v41 = MEMORY[0x1E0DE4FE0] + 64;
      v36 = v26;
      *(uint64_t *)((char *)&v37[-1] + *(_QWORD *)(v26 - 24)) = v27;
      v28 = (std::ios_base *)((char *)&v37[-1] + *(_QWORD *)(v36 - 24));
      std::ios_base::init(v28, v37);
      v28[1].__vftable = 0;
      v28[1].__fmtflags_ = -1;
      v36 = v24 + 24;
      v41 = v25;
      std::streambuf::basic_streambuf();
      v37[0] = MEMORY[0x1E0DE4FB8] + 16;
      v38 = 0u;
      v39 = 0u;
      v40 = 16;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)"Malformed repeat ", 17);
      re2::Regexp::ToString(v6, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)p_p, size);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)" ", 1);
      v31 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)" ", 1);
      std::ostream::operator<<();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      LogMessage::~LogMessage(&v35);
      v12 = (char *)mallocRegexp();
      v10 = v12;
      *(_WORD *)v12 = 1;
      *((_WORD *)v12 + 1) = a4;
      goto LABEL_54;
    }
    v10 = 0;
LABEL_35:
    re2::Regexp::Incref(v6);
    if (*(_BYTE *)v6 != 9 || (v19 = v6, *((unsigned __int16 *)v6 + 1) != a4))
    {
      v19 = mallocRegexp();
      *v19 = 9;
      v19[1] = a4;
      *((_DWORD *)v19 + 1) = 65537;
      *((_QWORD *)v19 + 3) = 0;
      *((_QWORD *)v19 + 4) = 0;
      *((_QWORD *)v19 + 1) = v6;
      *((_QWORD *)v19 + 2) = 0;
    }
    if (a2 + 1 >= a3)
    {
      v22 = (char *)v19;
    }
    else
    {
      v20 = ~a2 + a3;
      do
      {
        re2::Regexp::Incref(v6);
        v22 = (char *)mallocRegexp();
        *(_WORD *)v22 = 5;
        *((_WORD *)v22 + 1) = a4;
        *((_WORD *)v22 + 2) = 1;
        *(_OWORD *)(v22 + 6) = 0u;
        *(_OWORD *)(v22 + 22) = 0u;
        *((_WORD *)v22 + 19) = 0;
        v23 = (_QWORD *)operator new[]();
        *((_QWORD *)v22 + 1) = v23;
        *((_WORD *)v22 + 3) = 2;
        *v23 = v6;
        v23[1] = v19;
        if (*v22 != 9 || *((unsigned __int16 *)v22 + 1) != a4)
        {
          v21 = mallocRegexp();
          *v21 = 9;
          v21[1] = a4;
          *((_DWORD *)v21 + 1) = 65537;
          *((_QWORD *)v21 + 1) = v22;
          *((_QWORD *)v21 + 2) = 0;
          v22 = (char *)v21;
          *((_QWORD *)v21 + 3) = 0;
          *((_QWORD *)v21 + 4) = 0;
        }
        v19 = v22;
        --v20;
      }
      while (v20);
    }
    if (!v10)
      return (re2::Regexp *)v22;
    v6 = (re2::Regexp *)mallocRegexp();
    *(_WORD *)v6 = 5;
    *((_WORD *)v6 + 1) = a4;
    *((_WORD *)v6 + 2) = 1;
    *(_OWORD *)((char *)v6 + 6) = 0u;
    *(_OWORD *)((char *)v6 + 22) = 0u;
    *((_WORD *)v6 + 19) = 0;
    v32 = (_QWORD *)operator new[]();
    *((_QWORD *)v6 + 1) = v32;
    *((_WORD *)v6 + 3) = 2;
    *v32 = v10;
    v32[1] = v22;
    return v6;
  }
  v10 = (char *)mallocRegexp();
  *(_WORD *)v10 = 5;
  *((_WORD *)v10 + 1) = a4;
  *((_WORD *)v10 + 2) = 1;
  *(_OWORD *)(v10 + 6) = 0u;
  *(_OWORD *)(v10 + 22) = 0u;
  *((_WORD *)v10 + 19) = 0;
  re2::Regexp::AllocSub((uint64_t)v10, a2);
  v13 = (re2::Regexp **)(v10 + 8);
  if (*((unsigned __int16 *)v10 + 3) >= 2u)
    v13 = (re2::Regexp **)*v13;
  v14 = a2;
  do
  {
    re2::Regexp::Incref(v6);
    *v13++ = v6;
    --v14;
  }
  while (v14);
  if (a3 > a2)
    goto LABEL_35;
  if (!v10)
    goto LABEL_45;
  return (re2::Regexp *)v10;
}

void sub_1C381AF60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  LogMessage::~LogMessage(&a15);
  _Unwind_Resume(a1);
}

re2::SimplifyWalker *re2::SimplifyWalker::SimplifyCharClass(re2::SimplifyWalker *this, re2::Regexp *a2)
{
  re2::SimplifyWalker *v2;
  int v3;
  char *v4;
  __int16 v5;
  __int16 v6;

  v2 = this;
  v3 = *(_DWORD *)(*((_QWORD *)this + 3) + 4);
  if (v3 == 1114112)
  {
    v4 = (char *)mallocRegexp();
    v6 = *((_WORD *)v2 + 1);
    *(_WORD *)v4 = 12;
    *((_WORD *)v4 + 1) = v6;
    *((_WORD *)v4 + 2) = 1;
  }
  else
  {
    if (v3)
    {
      re2::Regexp::Incref(this);
      return v2;
    }
    v4 = (char *)mallocRegexp();
    v5 = *((_WORD *)v2 + 1);
    *(_WORD *)v4 = 1;
    *((_WORD *)v4 + 1) = v5;
    *((_WORD *)v4 + 2) = 1;
  }
  *((_WORD *)v4 + 19) = 0;
  *(_OWORD *)(v4 + 22) = 0u;
  *(_OWORD *)(v4 + 6) = 0u;
  return (re2::SimplifyWalker *)v4;
}

void re2::Regexp::Walker<re2::Regexp*>::Reset(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22[8];
  __int128 v23;
  __int128 v24;
  int v25;
  uint64_t v26;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(v1 + 40))
    {
      LOBYTE(v20) = 0;
      v3 = MEMORY[0x1E0DE4FE0];
      v4 = MEMORY[0x1E0DE4FE0] + 64;
      v5 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
      v6 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
      v26 = MEMORY[0x1E0DE4FE0] + 64;
      v21 = v5;
      *(uint64_t *)((char *)&v22[-1] + *(_QWORD *)(v5 - 24)) = v6;
      v7 = (std::ios_base *)((char *)&v22[-1] + *(_QWORD *)(v21 - 24));
      std::ios_base::init(v7, v22);
      v7[1].__vftable = 0;
      v7[1].__fmtflags_ = -1;
      v21 = v3 + 24;
      v26 = v4;
      std::streambuf::basic_streambuf();
      v22[0] = MEMORY[0x1E0DE4FB8] + 16;
      v23 = 0u;
      v24 = 0u;
      v25 = 16;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Stack not empty.", 16);
      LogMessage::~LogMessage(&v20);
      v8 = *(_QWORD **)(a1 + 8);
      v9 = v8[5];
      while (v9)
      {
        v10 = v8[4];
        v11 = v9 + v10 - 1;
        v12 = v8[1];
        v13 = *(_QWORD *)(*(_QWORD *)(v12 + 8 * (v11 / 0x55)) + 48 * (v11 % 0x55) + 40);
        if (v13)
        {
          MEMORY[0x1C3BD4858](v13, 0x20C4093837F09);
          v8 = *(_QWORD **)(a1 + 8);
          v10 = v8[4];
          v12 = v8[1];
        }
        v14 = v8[2];
        v16 = v14 - v12;
        v15 = v16 == 0;
        v17 = 85 * (v16 >> 3) - 1;
        v18 = v8[5];
        if (v15)
          v19 = 0;
        else
          v19 = v17;
        v9 = v18 - 1;
        v8[5] = v18 - 1;
        if ((unint64_t)(v19 - (v18 + v10) + 1) >= 0xAA)
        {
          operator delete(*(void **)(v14 - 8));
          v8[2] -= 8;
          v8 = *(_QWORD **)(a1 + 8);
          v9 = v8[5];
        }
      }
    }
  }
}

void sub_1C381B218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  LogMessage::~LogMessage(&a9);
  _Unwind_Resume(a1);
}

void sub_1C381B22C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1C3BD4828](v1 + 120);
  _Unwind_Resume(a1);
}

uint64_t re2::Regexp::Walker<re2::Regexp*>::PreVisit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t re2::Regexp::Walker<re2::Regexp*>::PostVisit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a4;
}

uint64_t re2::Regexp::Walker<re2::Regexp*>::Copy(uint64_t a1, uint64_t a2)
{
  return a2;
}

re2::Regexp *re2::Regexp::Simplify(re2::Regexp *this)
{
  re2::Regexp *v1;
  _OWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  _DWORD *v16;
  int v17;
  int v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (**v52)();
  _QWORD *v53;
  uint64_t v54;
  char v55;

  v1 = this;
  if (*((_BYTE *)this + 1))
  {
    re2::Regexp::Incref(this);
    return v1;
  }
  v54 = 0xF424000000000;
  v2 = (_OWORD *)operator new();
  *v2 = 0u;
  v2[1] = 0u;
  v2[2] = 0u;
  v52 = (void (**)())&off_1E7DB6D38;
  v53 = v2;
  re2::Regexp::Walker<re2::Regexp*>::Reset((uint64_t)&v52);
  v3 = v53;
  v4 = v53[2];
  v5 = v53[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = 85 * ((v4 - v5) >> 3) - 1;
  v7 = v53[5];
  v8 = v7 + v53[4];
  if (v6 == v8)
  {
    std::deque<re2::WalkState<re2::Regexp *>>::__add_back_capacity((uint64_t)v53);
    v5 = v3[1];
    v7 = v3[5];
    v8 = v7 + v3[4];
  }
  v9 = *(_QWORD *)(v5 + 8 * (v8 / 0x55)) + 48 * (v8 % 0x55);
  *(_QWORD *)v9 = v1;
  *(_DWORD *)(v9 + 8) = -1;
  *(_QWORD *)(v9 + 16) = 0;
  *(_QWORD *)(v9 + 40) = 0;
  v3[5] = v7 + 1;
  while (1)
  {
    while (1)
    {
      v11 = v53[5] + v53[4] - 1;
      v12 = *(_QWORD *)(v53[1] + 8 * (v11 / 0x55));
      v13 = v11 % 0x55;
      v14 = (uint64_t *)(v12 + 48 * (v11 % 0x55));
      v15 = *v14;
      v17 = *((_DWORD *)v14 + 2);
      v16 = v14 + 1;
      if (v17 == -1)
      {
        v30 = HIDWORD(v54)--;
        if (v30 <= 0)
        {
          LOBYTE(v54) = 1;
          v1 = (re2::Regexp *)((uint64_t (*)(void (***)(), uint64_t, _QWORD))v52[5])(&v52, v15, *(_QWORD *)(v12 + 48 * v13 + 16));
          goto LABEL_33;
        }
        v55 = 0;
        v1 = (re2::Regexp *)((uint64_t (*)(void (***)(), uint64_t, _QWORD, char *))v52[2])(&v52, v15, *(_QWORD *)(v12 + 48 * v13 + 16), &v55);
        *(_QWORD *)(v12 + 48 * v13 + 24) = v1;
        if (v55)
          goto LABEL_33;
        *v16 = 0;
        v31 = v12 + 48 * v13;
        *(_QWORD *)(v31 + 40) = 0;
        v32 = (uint64_t *)(v31 + 40);
        if (*(_WORD *)(v15 + 6))
        {
          if (*(_WORD *)(v15 + 6) == 1)
            v33 = v12 + 48 * v13 + 32;
          else
            v33 = operator new[]();
          *v32 = v33;
        }
      }
      v18 = *(unsigned __int16 *)(v15 + 6);
      if (!*(_WORD *)(v15 + 6))
        break;
      v19 = (_QWORD *)(v15 + 8);
      if (v18 != 1)
        v19 = (_QWORD *)*v19;
      v20 = *v16;
      if ((int)v20 >= v18)
        goto LABEL_29;
      v21 = (v20 - 1);
      if ((int)v20 >= 1 && v19[v21] == v19[v20])
      {
        v47 = v12 + 48 * v13;
        v48 = ((uint64_t (*)(void (***)(), _QWORD))v52[4])(&v52, *(_QWORD *)(*(_QWORD *)(v47 + 40) + 8 * v21));
        v49 = (int)*v16;
        *(_QWORD *)(*(_QWORD *)(v47 + 40) + 8 * v49) = v48;
        *v16 = v49 + 1;
      }
      else
      {
        v22 = v53;
        v23 = v53[1];
        v24 = 85 * ((v53[2] - v23) >> 3) - 1;
        v25 = v19[(int)v20];
        v26 = *(_QWORD *)(v12 + 48 * v13 + 24);
        if (v53[2] == v23)
          v24 = 0;
        v27 = v53[5];
        v28 = v27 + v53[4];
        if (v24 == v28)
        {
          std::deque<re2::WalkState<re2::Regexp *>>::__add_back_capacity((uint64_t)v53);
          v23 = v22[1];
          v27 = v22[5];
          v28 = v27 + v22[4];
        }
        v29 = *(_QWORD *)(v23 + 8 * (v28 / 0x55)) + 48 * (v28 % 0x55);
        *(_QWORD *)v29 = v25;
        *(_DWORD *)(v29 + 8) = -1;
        *(_QWORD *)(v29 + 16) = v26;
        *(_QWORD *)(v29 + 40) = 0;
        v22[5] = v27 + 1;
      }
    }
    v20 = *v16;
LABEL_29:
    v34 = v12 + 48 * v13;
    v36 = *(_QWORD *)(v34 + 40);
    v35 = (_QWORD *)(v34 + 40);
    v1 = (re2::Regexp *)((uint64_t (*)(void (***)(), uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))v52[3])(&v52, v15, *(v35 - 3), *(v35 - 2), v36, v20);
    if (*(unsigned __int16 *)(v15 + 6) >= 2u && *v35)
      MEMORY[0x1C3BD4840](*v35, 0x20C8093837F09);
LABEL_33:
    v37 = v53;
    v38 = v53[2];
    v40 = v53[4];
    v39 = v53[5];
    if (v38 == v53[1])
      v41 = 0;
    else
      v41 = 85 * ((v38 - v53[1]) >> 3) - 1;
    v42 = v39 - 1;
    v53[5] = v39 - 1;
    if ((unint64_t)(v41 - (v39 + v40) + 1) >= 0xAA)
    {
      operator delete(*(void **)(v38 - 8));
      v37[2] -= 8;
      v37 = v53;
      v42 = v53[5];
    }
    if (!v42)
      break;
    v43 = v42 + v37[4] - 1;
    v44 = *(_QWORD *)(v37[1] + 8 * (v43 / 0x55));
    v45 = v43 % 0x55;
    v46 = *(_QWORD *)(v44 + 48 * v45 + 40);
    if (v46)
    {
      v10 = *(int *)(v44 + 48 * v45 + 8);
      *(_QWORD *)(v46 + 8 * v10) = v1;
    }
    else
    {
      v10 = v44 + 48 * v45;
      *(_QWORD *)(v10 + 32) = v1;
      LODWORD(v10) = *(_DWORD *)(v10 + 8);
    }
    *(_DWORD *)(v44 + 48 * v45 + 8) = v10 + 1;
  }
  v52 = off_1E7DB6DA0;
  re2::Regexp::Walker<re2::Regexp*>::Reset((uint64_t)&v52);
  if (v53)
  {
    v50 = std::deque<re2::WalkState<re2::Frag>>::~deque[abi:ne180100]((uint64_t)v53);
    MEMORY[0x1C3BD4858](v50, 0x1080C40BE8D5F09);
  }
  return v1;
}

void sub_1C381B6D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  re2::SimplifyWalker::~SimplifyWalker((re2::SimplifyWalker *)&a9);
  _Unwind_Resume(a1);
}

void std::deque<re2::WalkState<re2::Regexp *>>::__add_back_capacity(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  void *v29;
  char *v30;
  char *v31;
  void *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  BOOL v40;
  int64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  unint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _OWORD *v52;
  unint64_t v53;
  char *v54;
  char *v55;
  unint64_t v56;
  int64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 *v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  unint64_t v78;
  uint64_t v79;
  __int128 *v80;
  _OWORD *v81;
  uint64_t v82;
  __int128 v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  __int128 *v87;
  _OWORD *v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  int64_t v96;
  unint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  __int128 *v102;
  _OWORD *v103;
  uint64_t v104;
  __int128 v105;
  uint64_t v106;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x55;
  v4 = v2 - 85;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_86:
      *(_QWORD *)v5 = v8;
      goto LABEL_87;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v34 = (v5 - v9) >> 2;
      if (v5 == v9)
        v34 = 1;
      if (!(v34 >> 61))
      {
        v35 = v34 >> 2;
        v36 = 8 * v34;
        v37 = (char *)operator new(8 * v34);
        v38 = &v37[8 * v35];
        v39 = &v37[v36];
        v41 = v5 - v7;
        v40 = v5 == v7;
        v5 = v38;
        if (!v40)
        {
          v5 = &v38[v41 & 0xFFFFFFFFFFFFFFF8];
          v42 = v41 - 8;
          if ((unint64_t)(v41 - 8) >= 0x38)
          {
            v84 = &v37[8 * v35];
            v43 = v84;
            if ((unint64_t)(v84 - v7) >= 0x20)
            {
              v85 = (v42 >> 3) + 1;
              v86 = 8 * (v85 & 0x3FFFFFFFFFFFFFFCLL);
              v43 = &v38[v86];
              v87 = (__int128 *)(v6 + 3);
              v88 = v84 + 16;
              v89 = v85 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v90 = *v87;
                *(v88 - 1) = *(v87 - 1);
                *v88 = v90;
                v87 += 2;
                v88 += 2;
                v89 -= 4;
              }
              while (v89);
              if (v85 == (v85 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_79;
              v7 += v86;
            }
          }
          else
          {
            v43 = &v37[8 * v35];
          }
          do
          {
            v91 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v43 = v91;
            v43 += 8;
          }
          while (v43 != v5);
        }
        goto LABEL_79;
      }
LABEL_104:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_86;
  }
  v18 = *(char **)(a1 + 16);
  v17 = *(char **)(a1 + 24);
  v20 = *(char **)a1;
  v19 = *(char **)(a1 + 8);
  v21 = v18 - v19;
  v22 = (v18 - v19) >> 3;
  v23 = (uint64_t)&v17[-*(_QWORD *)a1];
  if (v22 < (unint64_t)(v23 >> 3))
  {
    v24 = operator new(0xFF0uLL);
    v25 = v24;
    if (v17 != v18)
    {
      *(_QWORD *)v18 = v24;
LABEL_87:
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    if (v19 != v20)
    {
      v44 = v19;
      goto LABEL_85;
    }
    v69 = (v17 - v19) >> 2;
    if (v18 == v19)
      v69 = 1;
    if (v69 >> 61)
      goto LABEL_104;
    v70 = (v69 + 3) >> 2;
    v71 = 8 * v69;
    v72 = (char *)operator new(8 * v69);
    v44 = &v72[8 * v70];
    v73 = &v72[v71];
    v74 = v44;
    if (v18 != v19)
    {
      v74 = &v44[8 * v22];
      v75 = &v72[8 * v70];
      v76 = v19;
      if ((unint64_t)(v21 - 8) > 0x37)
      {
        v77 = &v72[8 * v70];
        v75 = v77;
        v76 = v19;
        if ((unint64_t)(v77 - v19) >= 0x20)
        {
          v78 = ((unint64_t)(v21 - 8) >> 3) + 1;
          v79 = 8 * (v78 & 0x3FFFFFFFFFFFFFFCLL);
          v75 = &v44[v79];
          v80 = (__int128 *)(v19 + 16);
          v81 = v77 + 16;
          v82 = v78 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v83 = *v80;
            *(v81 - 1) = *(v80 - 1);
            *v81 = v83;
            v80 += 2;
            v81 += 2;
            v82 -= 4;
          }
          while (v82);
          if (v78 == (v78 & 0x3FFFFFFFFFFFFFFCLL))
          {
            *(_QWORD *)a1 = v72;
            *(_QWORD *)(a1 + 8) = v44;
            *(_QWORD *)(a1 + 16) = v74;
            *(_QWORD *)(a1 + 24) = v73;
LABEL_84:
            operator delete(v19);
            v44 = *(char **)(a1 + 8);
LABEL_85:
            *((_QWORD *)v44 - 1) = v25;
            v7 = *(char **)(a1 + 8);
            v5 = *(char **)(a1 + 16);
            *(_QWORD *)(a1 + 8) = v7 - 8;
            v8 = *((_QWORD *)v7 - 1);
            *(_QWORD *)(a1 + 8) = v7;
            if (v5 != *(char **)(a1 + 24))
              goto LABEL_86;
            v9 = *(char **)a1;
            v10 = (uint64_t)&v7[-*(_QWORD *)a1];
            if ((unint64_t)v7 <= *(_QWORD *)a1)
            {
              v93 = (v5 - v9) >> 2;
              if (v5 == v9)
                v93 = 1;
              if (!(v93 >> 61))
              {
                v94 = v93 >> 2;
                v95 = 8 * v93;
                v37 = (char *)operator new(8 * v93);
                v38 = &v37[8 * v94];
                v39 = &v37[v95];
                v96 = v5 - v7;
                v40 = v5 == v7;
                v5 = v38;
                if (!v40)
                {
                  v5 = &v38[v96 & 0xFFFFFFFFFFFFFFF8];
                  v97 = v96 - 8;
                  if ((unint64_t)(v96 - 8) >= 0x38)
                  {
                    v99 = &v37[8 * v94];
                    v98 = v99;
                    if ((unint64_t)(v99 - v7) >= 0x20)
                    {
                      v100 = (v97 >> 3) + 1;
                      v101 = 8 * (v100 & 0x3FFFFFFFFFFFFFFCLL);
                      v98 = &v38[v101];
                      v102 = (__int128 *)(v7 + 16);
                      v103 = v99 + 16;
                      v104 = v100 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        v105 = *v102;
                        *(v103 - 1) = *(v102 - 1);
                        *v103 = v105;
                        v102 += 2;
                        v103 += 2;
                        v104 -= 4;
                      }
                      while (v104);
                      if (v100 == (v100 & 0x3FFFFFFFFFFFFFFCLL))
                        goto LABEL_79;
                      v7 += v101;
                    }
                  }
                  else
                  {
                    v98 = &v37[8 * v94];
                  }
                  do
                  {
                    v106 = *(_QWORD *)v7;
                    v7 += 8;
                    *(_QWORD *)v98 = v106;
                    v98 += 8;
                  }
                  while (v98 != v5);
                }
LABEL_79:
                *(_QWORD *)a1 = v37;
                *(_QWORD *)(a1 + 8) = v38;
                *(_QWORD *)(a1 + 16) = v5;
                *(_QWORD *)(a1 + 24) = v39;
                if (v9)
                {
                  operator delete(v9);
                  v5 = *(char **)(a1 + 16);
                }
                goto LABEL_86;
              }
              goto LABEL_104;
            }
            goto LABEL_5;
          }
          v76 = &v19[v79];
        }
      }
      do
      {
        v92 = *(_QWORD *)v76;
        v76 += 8;
        *(_QWORD *)v75 = v92;
        v75 += 8;
      }
      while (v75 != v74);
    }
    *(_QWORD *)a1 = v72;
    *(_QWORD *)(a1 + 8) = v44;
    *(_QWORD *)(a1 + 16) = v74;
    *(_QWORD *)(a1 + 24) = v73;
    if (!v19)
      goto LABEL_85;
    goto LABEL_84;
  }
  v26 = v23 >> 2;
  if (v17 == v20)
    v27 = 1;
  else
    v27 = v26;
  if (v27 >> 61)
    goto LABEL_104;
  v28 = (char *)operator new(8 * v27);
  v29 = operator new(0xFF0uLL);
  v30 = &v28[8 * v22];
  v31 = &v28[8 * v27];
  if (v22 == v27)
  {
    v32 = v29;
    if (v21 < 1)
    {
      if (v18 == v19)
        v45 = 1;
      else
        v45 = v21 >> 2;
      if (v45 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v30 = (char *)operator new(8 * v45);
      v31 = &v30[8 * v45];
      operator delete(v28);
      v19 = *(char **)(a1 + 8);
      v18 = *(char **)(a1 + 16);
      v28 = v30;
    }
    else
    {
      v33 = v22 + 2;
      if (v22 >= -1)
        v33 = v22 + 1;
      v30 -= 8 * (v33 >> 1);
    }
    v29 = v32;
  }
  *(_QWORD *)v30 = v29;
  v46 = v30 + 8;
  if (v18 != v19)
  {
    do
    {
      if (v30 != v28)
        goto LABEL_41;
      if (v46 < v31)
      {
        v49 = (v31 - v46) >> 3;
        if (v49 >= -1)
          v50 = v49 + 1;
        else
          v50 = v49 + 2;
        v51 = v50 >> 1;
        v30 = &v28[8 * (v50 >> 1)];
        v52 = v28;
        if (v46 != v28)
        {
          memmove(v30, v28, v46 - v28);
          v52 = v46;
        }
        v46 = (char *)v52 + 8 * v51;
        goto LABEL_41;
      }
      if (v31 == v28)
        v53 = 1;
      else
        v53 = (v31 - v28) >> 2;
      if (v53 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v54 = (char *)operator new(8 * v53);
      v55 = v54;
      v56 = (v53 + 3) >> 2;
      v30 = &v54[8 * v56];
      v57 = v46 - v28;
      v40 = v46 == v28;
      v46 = v30;
      if (!v40)
      {
        v46 = &v30[v57 & 0xFFFFFFFFFFFFFFF8];
        v58 = v57 - 8;
        v59 = &v54[8 * v56];
        v60 = v28;
        if (v58 >= 0x38)
        {
          v61 = 8 * v56;
          v59 = &v54[8 * v56];
          v60 = v28;
          if ((unint64_t)(v59 - v28) >= 0x20)
          {
            v62 = (v58 >> 3) + 1;
            v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
            v59 = &v30[v63];
            v64 = (__int128 *)(v28 + 16);
            v65 = &v54[v61 + 16];
            v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v67 = *v64;
              *((_OWORD *)v65 - 1) = *(v64 - 1);
              *(_OWORD *)v65 = v67;
              v64 += 2;
              v65 += 32;
              v66 -= 4;
            }
            while (v66);
            if (v62 == (v62 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_40;
            v60 = &v28[v63];
          }
        }
        do
        {
          v68 = *(_QWORD *)v60;
          v60 += 8;
          *(_QWORD *)v59 = v68;
          v59 += 8;
        }
        while (v59 != v46);
      }
LABEL_40:
      v31 = &v54[8 * v53];
      operator delete(v28);
      v28 = v55;
LABEL_41:
      v48 = *((_QWORD *)v18 - 1);
      v18 -= 8;
      *((_QWORD *)v30 - 1) = v48;
      v30 -= 8;
    }
    while (v18 != *(char **)(a1 + 8));
  }
  v47 = *(char **)a1;
  *(_QWORD *)a1 = v28;
  *(_QWORD *)(a1 + 8) = v30;
  *(_QWORD *)(a1 + 16) = v46;
  *(_QWORD *)(a1 + 24) = v31;
  if (v47)
    operator delete(v47);
}

void sub_1C381BCEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL re2::Regexp::ComputeSimple(re2::Regexp *this)
{
  int v2;
  _BOOL8 result;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  unsigned int v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::ios_base *v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  char *v17;
  char *v19;
  BOOL v20;
  void *v21;
  uint64_t v22;
  uint64_t v23[8];
  __int128 v24;
  __int128 v25;
  int v26;
  uint64_t v27;
  char v28;

  v2 = *(unsigned __int8 *)this - 1;
  result = 1;
  switch(v2)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 20:
      return result;
    case 4:
    case 5:
      v7 = *((unsigned __int16 *)this + 3);
      v8 = (char *)this + 8;
      if (v7 >= 2)
      {
        v8 = *(char **)v8;
      }
      else if (!*((_WORD *)this + 3))
      {
        return result;
      }
      if (!*(_BYTE *)(*(_QWORD *)v8 + 1))
        return 0;
      v16 = 0;
      v17 = v8 + 8;
      while (v7 - 1 != v16)
      {
        if (!*(unsigned __int8 *)(*(_QWORD *)&v17[8 * v16++] + 1))
          return v16 >= v7;
      }
      v16 = *((unsigned __int16 *)this + 3);
      return v16 >= v7;
    case 6:
    case 7:
    case 8:
      v4 = (unsigned __int8 *)this + 8;
      if (*((unsigned __int16 *)this + 3) >= 2u)
        v4 = *(unsigned __int8 **)v4;
      v5 = *(unsigned __int8 **)v4;
      if (!v5[1])
        return 0;
      v6 = *v5;
      if (v6 < 0xA)
        return (0x79u >> v6) & 1;
      return result;
    case 9:
      return 0;
    case 10:
      v19 = (char *)this + 8;
      if (*((unsigned __int16 *)this + 3) >= 2u)
        v19 = *(char **)v19;
      return *(unsigned __int8 *)(*(_QWORD *)v19 + 1) != 0;
    case 19:
      v14 = *((_QWORD *)this + 4);
      if (v14)
        v15 = *(_DWORD *)(v14 + 8);
      else
        v15 = *(_DWORD *)(*((_QWORD *)this + 3) + 4);
      if (v15)
        v20 = v15 == 1114112;
      else
        v20 = 1;
      return !v20;
    default:
      LOBYTE(v21) = 0;
      v9 = MEMORY[0x1E0DE4FE0];
      v10 = MEMORY[0x1E0DE4FE0] + 64;
      v11 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
      v12 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
      v27 = MEMORY[0x1E0DE4FE0] + 64;
      v22 = v11;
      *(uint64_t *)((char *)&v23[-1] + *(_QWORD *)(v11 - 24)) = v12;
      v13 = (std::ios_base *)((char *)&v23[-1] + *(_QWORD *)(v22 - 24));
      std::ios_base::init(v13, v23);
      v13[1].__vftable = 0;
      v13[1].__fmtflags_ = -1;
      v22 = v9 + 24;
      v27 = v10;
      std::streambuf::basic_streambuf();
      v23[0] = MEMORY[0x1E0DE4FB8] + 16;
      v24 = 0u;
      v25 = 0u;
      v26 = 16;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"Case not handled in ComputeSimple: ", 35);
      v28 = *(_BYTE *)this;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)&v28, 1);
      LogMessage::~LogMessage(&v21);
      return 0;
  }
}

void sub_1C381BF58(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1C3BD4828](v1 + 120);
  _Unwind_Resume(a1);
}

void sub_1C381BF80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

char *re2::SimplifyWalker::Concat2(uint64_t a1, uint64_t a2, __int16 a3)
{
  char *v6;
  _QWORD *v7;

  v6 = (char *)mallocRegexp();
  *(_WORD *)v6 = 5;
  *((_WORD *)v6 + 1) = a3;
  *((_WORD *)v6 + 2) = 1;
  *(_OWORD *)(v6 + 6) = 0u;
  *(_OWORD *)(v6 + 22) = 0u;
  *((_WORD *)v6 + 19) = 0;
  v7 = (_QWORD *)operator new[]();
  *((_QWORD *)v6 + 1) = v7;
  *((_WORD *)v6 + 3) = 2;
  *v7 = a1;
  v7[1] = a2;
  return v6;
}

void re2::Prefilter::Info::Walker::~Walker(re2::Prefilter::Info::Walker *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_1E7DB6E48;
  re2::Regexp::Walker<re2::Prefilter::Info *>::Reset((uint64_t)this);
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    v3 = std::deque<re2::WalkState<re2::Frag>>::~deque[abi:ne180100](v2);
    MEMORY[0x1C3BD4858](v3, 0x1080C40BE8D5F09);
  }
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_1E7DB6E48;
  re2::Regexp::Walker<re2::Prefilter::Info *>::Reset((uint64_t)this);
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    v3 = std::deque<re2::WalkState<re2::Frag>>::~deque[abi:ne180100](v2);
    MEMORY[0x1C3BD4858](v3, 0x1080C40BE8D5F09);
  }
  JUMPOUT(0x1C3BD4858);
}

uint64_t re2::Regexp::Walker<re2::Prefilter::Info *>::PreVisit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

re2::Prefilter::Info *re2::Prefilter::Info::Walker::PostVisit(re2::Prefilter::Info::Walker *this, re2::Regexp *a2, re2::Prefilter::Info *a3, re2::Prefilter::Info *a4, re2::Prefilter::Info **a5, int a6)
{
  re2::Prefilter::Info **v7;
  re2::Prefilter::Info *v8;
  uint64_t v9;
  re2::Prefilter::Info *v10;
  uint64_t v11;
  unsigned __int8 v12;
  int v13;
  re2::Prefilter::Info *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  re2::Prefilter::Info *v18;
  unsigned __int8 v19;
  re2::Prefilter::Info *v20;
  re2::Prefilter::Info *v21;
  re2::Prefilter::Info *v22;
  uint64_t v23;
  re2::Prefilter::Info *v24;
  re2::Prefilter::Info *v25;
  re2::Prefilter::Info *v26;
  uint64_t v27;
  re2::Prefilter::Info **v28;
  re2::Prefilter::Info *v29;
  re2::Prefilter::Info *v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  std::ios_base *v37;
  int v38;
  re2::Prefilter::Info *v39;
  uint64_t v40;
  re2::Prefilter::Info *v41;
  re2::Prefilter::Info *v42;
  void *__p;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  int v48;
  uint64_t v49;

  v7 = a5;
  switch(*(_BYTE *)a2)
  {
    case 1:
      v8 = (re2::Prefilter::Info *)operator new();
      *((_QWORD *)v8 + 2) = 0;
      *((_QWORD *)v8 + 1) = 0;
      *(_QWORD *)v8 = (char *)v8 + 8;
      *((_BYTE *)v8 + 24) = 0;
      *((_QWORD *)v8 + 4) = 0;
      v9 = operator new();
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 0;
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = 0;
      *(_QWORD *)(v9 + 16) = 0;
      goto LABEL_47;
    case 2:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
      v8 = (re2::Prefilter::Info *)operator new();
      *((_QWORD *)v8 + 2) = 0;
      *((_QWORD *)v8 + 1) = 0;
      *(_QWORD *)v8 = (char *)v8 + 8;
      *((_QWORD *)v8 + 4) = 0;
      *((_BYTE *)v8 + 24) = 1;
      HIBYTE(v45) = 0;
      LOBYTE(__p) = 0;
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)v8, (const void **)&__p, (uint64_t)&__p);
      goto LABEL_3;
    case 3:
      v10 = (re2::Prefilter::Info *)*((unsigned int *)a2 + 6);
      if (!*((_BYTE *)this + 24))
        return (re2::Prefilter::Info *)re2::Prefilter::Info::Literal(v10);
      v11 = operator new();
      v8 = (re2::Prefilter::Info *)v11;
      *(_QWORD *)(v11 + 8) = 0;
      *(_QWORD *)(v11 + 16) = 0;
      *(_QWORD *)v11 = v11 + 8;
      *(_BYTE *)(v11 + 24) = 0;
      *(_QWORD *)(v11 + 32) = 0;
      if (((_DWORD)v10 - 65) >= 0x1A)
        v12 = v10;
      else
        v12 = (_BYTE)v10 + 32;
      HIBYTE(v45) = 1;
      LOWORD(__p) = v12;
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)v11, (const void **)&__p, (uint64_t)&__p);
      if (SHIBYTE(v45) < 0)
        operator delete(__p);
      *((_BYTE *)v8 + 24) = 1;
      return v8;
    case 4:
      if (!*((_DWORD *)a2 + 6))
        return (re2::Prefilter::Info *)re2::Prefilter::Info::NoMatch(this);
      v13 = *((unsigned __int8 *)this + 24);
      v14 = (re2::Prefilter::Info *)**((unsigned int **)a2 + 4);
      if (v13)
      {
        v8 = (re2::Prefilter::Info *)re2::Prefilter::Info::LiteralLatin1(v14);
        if (*((int *)a2 + 6) >= 2)
        {
          v15 = 1;
          do
          {
            v16 = *(_DWORD *)(*((_QWORD *)a2 + 4) + 4 * v15);
            v17 = operator new();
            v18 = (re2::Prefilter::Info *)v17;
            *(_QWORD *)(v17 + 16) = 0;
            *(_QWORD *)(v17 + 8) = 0;
            *(_QWORD *)v17 = v17 + 8;
            *(_BYTE *)(v17 + 24) = 0;
            *(_QWORD *)(v17 + 32) = 0;
            if ((v16 - 65) >= 0x1A)
              v19 = v16;
            else
              v19 = v16 + 32;
            HIBYTE(v45) = 1;
            LOWORD(__p) = v19;
            std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)v17, (const void **)&__p, (uint64_t)&__p);
            if (SHIBYTE(v45) < 0)
              operator delete(__p);
            *((_BYTE *)v18 + 24) = 1;
            v8 = re2::Prefilter::Info::Concat(v8, v18, v20);
            ++v15;
          }
          while (v15 < *((int *)a2 + 6));
        }
      }
      else
      {
        v8 = (re2::Prefilter::Info *)re2::Prefilter::Info::Literal(v14);
        if (*((int *)a2 + 6) >= 2)
        {
          v40 = 1;
          do
          {
            v41 = (re2::Prefilter::Info *)re2::Prefilter::Info::Literal((re2::Prefilter::Info *)*(unsigned int *)(*((_QWORD *)a2 + 4) + 4 * v40));
            v8 = re2::Prefilter::Info::Concat(v8, v41, v42);
            ++v40;
          }
          while (v40 < *((int *)a2 + 6));
        }
      }
      return v8;
    case 5:
      if (a6 >= 1)
      {
        v21 = 0;
        v22 = 0;
        v23 = a6;
        while (1)
        {
          v26 = *v7;
          if (*((_BYTE *)*v7 + 24))
          {
            if (!v21)
              goto LABEL_26;
            if (*((_QWORD *)v21 + 2) * *((_QWORD *)v26 + 2) <= 0x10uLL)
            {
              v26 = re2::Prefilter::Info::Concat(v21, *v7, a3);
              goto LABEL_26;
            }
          }
          v24 = re2::Prefilter::Info::And(v22, v21, a3);
          v22 = re2::Prefilter::Info::And(v24, v26, v25);
          v26 = 0;
LABEL_26:
          ++v7;
          v21 = v26;
          if (!--v23)
            return re2::Prefilter::Info::And(v22, v26, a3);
        }
      }
      v22 = 0;
      v26 = 0;
      return re2::Prefilter::Info::And(v22, v26, a3);
    case 6:
      if (!a5)
      {
        LogMessage::LogMessage((LogMessage *)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)"kRegexpAlternate child_args is NULL", 35);
        goto LABEL_57;
      }
      v8 = *a5;
      if (a6 >= 2)
      {
        v27 = a6 - 1;
        v28 = a5 + 1;
        do
        {
          v29 = *v28++;
          v8 = (re2::Prefilter::Info *)re2::Prefilter::Info::Alt(v8, v29, a3);
          --v27;
        }
        while (v27);
      }
      return v8;
    case 7:
      if (a5)
        return (re2::Prefilter::Info *)re2::Prefilter::Info::Quest(*a5, a2);
      LogMessage::LogMessage((LogMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)"kRegexpStar child_args is NULL", 30);
      goto LABEL_57;
    case 8:
      if (!a5)
      {
        LogMessage::LogMessage((LogMessage *)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)"kRegexpPlus child_args is NULL", 30);
        goto LABEL_57;
      }
      v30 = *a5;
      v8 = (re2::Prefilter::Info *)operator new();
      *((_QWORD *)v8 + 2) = 0;
      *((_QWORD *)v8 + 1) = 0;
      *(_QWORD *)v8 = (char *)v8 + 8;
      *((_BYTE *)v8 + 24) = 0;
      *((_QWORD *)v8 + 4) = 0;
      if (*((_BYTE *)v30 + 24))
      {
        v31 = re2::Prefilter::OrStrings(v30);
        *((_BYTE *)v30 + 24) = 0;
      }
      else
      {
        v31 = *((_QWORD *)v30 + 4);
      }
      *((_QWORD *)v30 + 4) = 0;
      *((_QWORD *)v8 + 4) = v31;
      *((_BYTE *)v8 + 24) = 0;
      std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(*((char **)v30 + 1));
      MEMORY[0x1C3BD4858](v30, 0x1020C40D4209308);
      return v8;
    case 9:
      if (a5)
        return (re2::Prefilter::Info *)re2::Prefilter::Info::Quest(*a5, a2);
      LogMessage::LogMessage((LogMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)"kRegexpQuest child_args is NULL", 31);
      goto LABEL_57;
    case 0xB:
      if (a5)
        return *a5;
      LogMessage::LogMessage((LogMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)"kRegexpCapture child_args is NULL", 33);
LABEL_57:
      LogMessage::~LogMessage(&__p);
      return (re2::Prefilter::Info *)re2::Prefilter::Info::EmptyString(v39);
    case 0xC:
      v8 = (re2::Prefilter::Info *)operator new();
      *((_QWORD *)v8 + 2) = 0;
      *((_QWORD *)v8 + 1) = 0;
      *(_QWORD *)v8 = (char *)v8 + 8;
      *((_BYTE *)v8 + 24) = 0;
      *((_QWORD *)v8 + 4) = 0;
      v9 = operator new();
      *(_DWORD *)v9 = 0;
      *(_OWORD *)(v9 + 8) = 0u;
      *(_OWORD *)(v9 + 24) = 0u;
LABEL_47:
      v38 = re2::alloc_id++;
      *(_DWORD *)(v9 + 44) = v38;
      *((_QWORD *)v8 + 4) = v9;
      return v8;
    case 0x14:
      return (re2::Prefilter::Info *)re2::Prefilter::Info::CClass(*((re2::Prefilter::Info **)a2 + 3), (re2::CharClass *)*((unsigned __int8 *)this + 24));
    default:
      LOBYTE(__p) = 0;
      v33 = MEMORY[0x1E0DE4FE0];
      v34 = MEMORY[0x1E0DE4FE0] + 64;
      v35 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
      v36 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
      v49 = MEMORY[0x1E0DE4FE0] + 64;
      v44 = v35;
      *(uint64_t *)((char *)&v44 + *(_QWORD *)(v35 - 24)) = v36;
      v37 = (std::ios_base *)((char *)&v44 + *(_QWORD *)(v44 - 24));
      std::ios_base::init(v37, &v45);
      v37[1].__vftable = 0;
      v37[1].__fmtflags_ = -1;
      v44 = v33 + 24;
      v49 = v34;
      std::streambuf::basic_streambuf();
      v45 = MEMORY[0x1E0DE4FB8] + 16;
      v46 = 0u;
      v47 = 0u;
      v48 = 16;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)"Bad regexp op ", 14);
      std::ostream::operator<<();
      LogMessage::~LogMessage(&__p);
      v8 = (re2::Prefilter::Info *)operator new();
      *((_QWORD *)v8 + 2) = 0;
      *((_QWORD *)v8 + 1) = 0;
      *(_QWORD *)v8 = (char *)v8 + 8;
      *((_QWORD *)v8 + 4) = 0;
      *((_BYTE *)v8 + 24) = 1;
      HIBYTE(v45) = 0;
      LOBYTE(__p) = 0;
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)v8, (const void **)&__p, (uint64_t)&__p);
LABEL_3:
      if (SHIBYTE(v45) < 0)
        operator delete(__p);
      return v8;
  }
}

void sub_1C381CB3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  LogMessage::~LogMessage(&__p);
  _Unwind_Resume(a1);
}

void sub_1C381CB94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(a1);
}

uint64_t re2::Regexp::Walker<re2::Prefilter::Info *>::Copy(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t re2::Prefilter::Info::Walker::ShortVisit(re2::Prefilter::Info::Walker *this, re2::Regexp *a2, re2::Prefilter::Info *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;

  v3 = operator new();
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)v3 = v3 + 8;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  v4 = operator new();
  *(_DWORD *)v4 = 0;
  *(_OWORD *)(v4 + 8) = 0u;
  *(_OWORD *)(v4 + 24) = 0u;
  v5 = re2::alloc_id++;
  *(_DWORD *)(v4 + 44) = v5;
  *(_QWORD *)(v3 + 32) = v4;
  return v3;
}

uint64_t *std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  size_t v8;
  const void *v9;
  uint64_t **v10;
  _QWORD *v11;
  const void *v12;
  const void *v13;
  int v14;
  size_t v15;
  const void *v16;
  size_t v17;
  int v18;
  _BOOL4 v19;
  uint64_t *result;
  _BOOL4 v21;
  _OWORD *v22;
  uint64_t *v23;
  uint64_t *v24;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *((char *)a2 + 23);
    if (v7 >= 0)
      v8 = *((unsigned __int8 *)a2 + 23);
    else
      v8 = (size_t)a2[1];
    if (v7 >= 0)
      v9 = a2;
    else
      v9 = *a2;
    while (1)
    {
      while (1)
      {
        v10 = (uint64_t **)v5;
        v13 = (const void *)v5[4];
        v11 = v5 + 4;
        v12 = v13;
        v14 = *((char *)v11 + 23);
        if (v14 >= 0)
          v15 = *((unsigned __int8 *)v11 + 23);
        else
          v15 = v11[1];
        if (v14 >= 0)
          v16 = v11;
        else
          v16 = v12;
        if (v15 >= v8)
          v17 = v8;
        else
          v17 = v15;
        v18 = memcmp(v9, v16, v17);
        v19 = v8 < v15;
        if (v18)
          v19 = v18 < 0;
        if (!v19)
          break;
        v5 = *v10;
        v6 = v10;
        if (!*v10)
          goto LABEL_27;
      }
      result = (uint64_t *)memcmp(v16, v9, v17);
      v21 = v15 < v8;
      if ((_DWORD)result)
        v21 = (int)result < 0;
      if (!v21)
        break;
      v5 = v10[1];
      if (!v5)
      {
        v6 = v10 + 1;
        goto LABEL_27;
      }
    }
  }
  else
  {
    v10 = a1 + 1;
LABEL_27:
    v22 = operator new(0x38uLL);
    v22[2] = *(_OWORD *)a3;
    *((_QWORD *)v22 + 6) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)v22 = 0;
    *((_QWORD *)v22 + 1) = 0;
    *((_QWORD *)v22 + 2) = v10;
    *v6 = (uint64_t *)v22;
    v23 = (uint64_t *)**a1;
    if (v23)
    {
      *a1 = v23;
      v24 = *v6;
    }
    else
    {
      v24 = (uint64_t *)v22;
    }
    result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v24);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return result;
}

uint64_t re2::Prefilter::Info::Literal(re2::Prefilter::Info *this)
{
  unsigned int v1;
  uint64_t v2;
  const char *v3;
  int v4;
  BOOL v5;
  unsigned int v6;
  const char *v7;
  unsigned int v8;
  unsigned int v9;
  char v10;
  unsigned int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  void *__p[2];
  char v19;
  int __src;

  v1 = this;
  v2 = operator new();
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)v2 = v2 + 8;
  *(_BYTE *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  if ((int)v1 < 128)
  {
    if (v1 - 65 < 0x1A)
      v1 += 32;
    goto LABEL_34;
  }
  v3 = "A";
  v4 = 167;
  do
  {
    v7 = v3;
    v8 = v4 >> 1;
    v9 = *(_DWORD *)&v3[12 * (v4 >> 1)];
    if (v9 <= v1 && *(_DWORD *)&v7[12 * v8 + 4] >= v1)
    {
      v10 = v1 - v9;
      if (v1 < v9)
        goto LABEL_34;
LABEL_21:
      v13 = *(_DWORD *)&v7[12 * v8 + 8];
      if (v13 > 0x3FFFFFFF)
      {
        if (v13 == 0x40000000)
        {
          if ((v10 & 1) != 0)
            goto LABEL_34;
          goto LABEL_31;
        }
        if (v13 != 1073741825)
        {
LABEL_33:
          v1 += v13;
          goto LABEL_34;
        }
        if ((v10 & 1) != 0)
          goto LABEL_34;
      }
      else if (v13 != -1)
      {
        if (v13 != 1)
          goto LABEL_33;
LABEL_31:
        if ((v1 & 1) == 0)
          goto LABEL_32;
        goto LABEL_29;
      }
      if ((v1 & 0x80000001) == 1)
      {
LABEL_32:
        ++v1;
        goto LABEL_34;
      }
LABEL_29:
      --v1;
      goto LABEL_34;
    }
    v4 -= v8 + 1;
    v5 = v9 > v1;
    if (v9 <= v1)
      v6 = v8 + 1;
    else
      v6 = 0;
    v3 = &v7[12 * v6];
    if (v5)
      v4 = v8;
  }
  while (v4 > 0);
  if (v3 < re2::num_unicode_tolower && v7 != 0)
  {
    v12 = *(_DWORD *)v3;
    v8 = v6;
    v10 = v1 - v12;
    if (v1 >= v12)
      goto LABEL_21;
  }
LABEL_34:
  __src = 0;
  if (v1 > 0x7F)
  {
    if (v1 > 0x7FF)
    {
      if (HIWORD(v1) <= 0x10u)
        v15 = v1;
      else
        v15 = 65533;
      if (HIWORD(v15))
      {
        LOBYTE(__src) = (v15 >> 18) | 0xF0;
        BYTE1(__src) = (v15 >> 12) & 0x3F | 0x80;
        BYTE2(__src) = (v15 >> 6) & 0x3F | 0x80;
        HIBYTE(__src) = v15 & 0x3F | 0x80;
        v14 = 4;
      }
      else
      {
        LOBYTE(__src) = (v15 >> 12) | 0xE0;
        BYTE1(__src) = (v15 >> 6) & 0x3F | 0x80;
        BYTE2(__src) = v15 & 0x3F | 0x80;
        v14 = 3;
      }
    }
    else
    {
      LOBYTE(__src) = (v1 >> 6) | 0xC0;
      BYTE1(__src) = v1 & 0x3F | 0x80;
      v14 = 2;
    }
  }
  else
  {
    LOBYTE(__src) = v1;
    v14 = 1;
  }
  v16 = v14;
  v19 = v14;
  memcpy(__p, &__src, v14);
  *(_BYTE *)((unint64_t)__p | v16) = 0;
  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)v2, (const void **)__p, (uint64_t)__p);
  if (v19 < 0)
    operator delete(__p[0]);
  *(_BYTE *)(v2 + 24) = 1;
  return v2;
}

void sub_1C381D02C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t re2::Prefilter::Info::NoMatch(re2::Prefilter::Info *this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;

  v1 = operator new();
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 8) = 0;
  *(_QWORD *)v1 = v1 + 8;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 32) = 0;
  v2 = operator new();
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_DWORD *)v2 = 1;
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  v3 = re2::alloc_id++;
  *(_DWORD *)(v2 + 44) = v3;
  *(_QWORD *)(v1 + 32) = v2;
  return v1;
}

uint64_t re2::Prefilter::Info::LiteralLatin1(re2::Prefilter::Info *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;
  void *__p[2];
  char v7;

  v1 = (int)this;
  v2 = operator new();
  v3 = v2;
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)v2 = v2 + 8;
  *(_BYTE *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  if ((v1 - 65) >= 0x1A)
    v4 = v1;
  else
    v4 = v1 + 32;
  v7 = 1;
  LOWORD(__p[0]) = v4;
  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)v2, (const void **)__p, (uint64_t)__p);
  if (v7 < 0)
    operator delete(__p[0]);
  *(_BYTE *)(v3 + 24) = 1;
  return v3;
}

void sub_1C381D178(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

re2::Prefilter::Info *re2::Prefilter::Info::Concat(re2::Prefilter::Info *this, re2::Prefilter::Info *a2, re2::Prefilter::Info *a3)
{
  re2::Prefilter::Info *v3;
  uint64_t v5;
  re2::Prefilter::Info *v6;
  _QWORD *v7;
  int v8;
  size_t v9;
  int v10;
  size_t v11;
  unint64_t v12;
  __int128 *v13;
  uint64_t v14;
  uint64_t v15;
  const void *v16;
  char *v17;
  const void *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  char v22;
  size_t v23;
  __int128 *p_dst;
  _QWORD *v25;
  const void *v26;
  const void *v27;
  int v28;
  size_t v29;
  const void *v30;
  size_t v31;
  int v32;
  _BOOL4 v33;
  int v34;
  _BOOL4 v35;
  _OWORD *v36;
  uint64_t v37;
  _BYTE *v38;
  BOOL v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  _BYTE *v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  _OWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  re2::Prefilter::Info *v54;
  re2::Prefilter::Info **v55;
  re2::Prefilter *v56;
  re2::Prefilter *v57;
  re2::Prefilter::Info *v59;
  re2::Prefilter::Info *v60;
  re2::Prefilter::Info **v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  __int128 __dst;
  int64_t v66;

  v3 = a2;
  if (!this)
    return a2;
  v5 = operator new();
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  v64 = (_QWORD *)(v5 + 8);
  *(_QWORD *)v5 = v5 + 8;
  *(_BYTE *)(v5 + 24) = 0;
  v62 = v5;
  *(_QWORD *)(v5 + 32) = 0;
  v59 = this;
  v6 = *(re2::Prefilter::Info **)this;
  v61 = (re2::Prefilter::Info **)((char *)this + 8);
  if (*(re2::Prefilter::Info **)this != (re2::Prefilter::Info *)((char *)this + 8))
  {
    v63 = (_QWORD *)((char *)v3 + 8);
    if (*(re2::Prefilter::Info **)v3 != (re2::Prefilter::Info *)((char *)v3 + 8))
    {
      v60 = v3;
      while (1)
      {
        v7 = *(_QWORD **)v3;
        if (*(_QWORD **)v3 != v63)
          break;
LABEL_96:
        v54 = (re2::Prefilter::Info *)*((_QWORD *)v6 + 1);
        if (v54)
        {
          do
          {
            v55 = (re2::Prefilter::Info **)v54;
            v54 = *(re2::Prefilter::Info **)v54;
          }
          while (v54);
        }
        else
        {
          do
          {
            v55 = (re2::Prefilter::Info **)*((_QWORD *)v6 + 2);
            v39 = *v55 == v6;
            v6 = (re2::Prefilter::Info *)v55;
          }
          while (!v39);
        }
        v6 = (re2::Prefilter::Info *)v55;
        v3 = v60;
        if (v55 == v61)
          goto LABEL_102;
      }
      while (1)
      {
        v8 = *((char *)v6 + 55);
        if (v8 >= 0)
          v9 = *((unsigned __int8 *)v6 + 55);
        else
          v9 = *((_QWORD *)v6 + 5);
        v10 = *((char *)v7 + 55);
        if (v10 >= 0)
          v11 = *((unsigned __int8 *)v7 + 55);
        else
          v11 = v7[5];
        v66 = 0;
        __dst = 0uLL;
        v12 = v11 + v9;
        if (v11 + v9 >= 0x7FFFFFFFFFFFFFF8)
          std::string::__throw_length_error[abi:ne180100]();
        if (v12 <= 0x16)
          break;
        v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17)
          v14 = v12 | 7;
        v15 = v14 + 1;
        v13 = (__int128 *)operator new(v14 + 1);
        *((_QWORD *)&__dst + 1) = v11 + v9;
        v66 = v15 | 0x8000000000000000;
        *(_QWORD *)&__dst = v13;
        if (v9)
          goto LABEL_22;
LABEL_26:
        v17 = (char *)v13 + v9;
        if (v11)
        {
          if (v10 >= 0)
            v18 = v7 + 4;
          else
            v18 = (const void *)v7[4];
          memmove(v17, v18, v11);
        }
        v17[v11] = 0;
        v19 = v64;
        v20 = (_QWORD *)*v64;
        v21 = v64;
        if (*v64)
        {
          v22 = HIBYTE(v66);
          if (v66 >= 0)
            v23 = HIBYTE(v66);
          else
            v23 = *((_QWORD *)&__dst + 1);
          if (v66 >= 0)
            p_dst = &__dst;
          else
            p_dst = (__int128 *)__dst;
          while (1)
          {
            while (1)
            {
              v19 = v20;
              v27 = (const void *)v20[4];
              v25 = v20 + 4;
              v26 = v27;
              v28 = *((char *)v25 + 23);
              if (v28 >= 0)
                v29 = *((unsigned __int8 *)v25 + 23);
              else
                v29 = v25[1];
              if (v28 >= 0)
                v30 = v25;
              else
                v30 = v26;
              if (v29 >= v23)
                v31 = v23;
              else
                v31 = v29;
              v32 = memcmp(p_dst, v30, v31);
              v33 = v23 < v29;
              if (v32)
                v33 = v32 < 0;
              if (!v33)
                break;
              v20 = (_QWORD *)*v19;
              v21 = v19;
              if (!*v19)
                goto LABEL_56;
            }
            v34 = memcmp(v30, p_dst, v31);
            v35 = v29 < v23;
            if (v34)
              v35 = v34 < 0;
            if (!v35)
              break;
            v20 = (_QWORD *)v19[1];
            if (!v20)
            {
              v21 = v19 + 1;
              goto LABEL_56;
            }
          }
        }
        else
        {
LABEL_56:
          v36 = operator new(0x38uLL);
          v36[2] = __dst;
          *((_QWORD *)v36 + 6) = v66;
          v66 = 0;
          __dst = 0uLL;
          *(_QWORD *)v36 = 0;
          *((_QWORD *)v36 + 1) = 0;
          *((_QWORD *)v36 + 2) = v19;
          *v21 = v36;
          v37 = **(_QWORD **)v62;
          if (v37)
          {
            *(_QWORD *)v62 = v37;
            v36 = (_OWORD *)*v21;
          }
          v38 = (_BYTE *)*v64;
          v39 = v36 == (_OWORD *)*v64;
          *((_BYTE *)v36 + 24) = v39;
          if (!v39)
          {
            do
            {
              v40 = *((_QWORD *)v36 + 2);
              if (*(_BYTE *)(v40 + 24))
                break;
              v41 = *(_BYTE **)(v40 + 16);
              v42 = *(_QWORD *)v41;
              if (*(_QWORD *)v41 == v40)
              {
                v45 = *((_QWORD *)v41 + 1);
                if (!v45 || (v46 = *(unsigned __int8 *)(v45 + 24), v43 = (_BYTE *)(v45 + 24), v46))
                {
                  if (*(_OWORD **)v40 == v36)
                  {
                    v47 = (uint64_t *)*((_QWORD *)v36 + 2);
                  }
                  else
                  {
                    v47 = *(uint64_t **)(v40 + 8);
                    v48 = *v47;
                    *(_QWORD *)(v40 + 8) = *v47;
                    if (v48)
                    {
                      *(_QWORD *)(v48 + 16) = v40;
                      v41 = *(_BYTE **)(v40 + 16);
                    }
                    v47[2] = (uint64_t)v41;
                    *(_QWORD *)(*(_QWORD *)(v40 + 16) + 8 * (**(_QWORD **)(v40 + 16) != v40)) = v47;
                    *v47 = v40;
                    *(_QWORD *)(v40 + 16) = v47;
                    v41 = (_BYTE *)v47[2];
                    v40 = *(_QWORD *)v41;
                  }
                  *((_BYTE *)v47 + 24) = 1;
                  v41[24] = 0;
                  v51 = *(_QWORD *)(v40 + 8);
                  *(_QWORD *)v41 = v51;
                  if (v51)
                    *(_QWORD *)(v51 + 16) = v41;
                  *(_QWORD *)(v40 + 16) = *((_QWORD *)v41 + 2);
                  *(_QWORD *)(*((_QWORD *)v41 + 2) + 8 * (**((_QWORD **)v41 + 2) != (_QWORD)v41)) = v40;
                  *(_QWORD *)(v40 + 8) = v41;
                  goto LABEL_85;
                }
              }
              else if (!v42 || (v44 = *(unsigned __int8 *)(v42 + 24), v43 = (_BYTE *)(v42 + 24), v44))
              {
                if (*(_OWORD **)v40 == v36)
                {
                  v49 = *((_QWORD *)v36 + 1);
                  *(_QWORD *)v40 = v49;
                  if (v49)
                  {
                    *(_QWORD *)(v49 + 16) = v40;
                    v41 = *(_BYTE **)(v40 + 16);
                  }
                  *((_QWORD *)v36 + 2) = v41;
                  *(_QWORD *)(*(_QWORD *)(v40 + 16) + 8 * (**(_QWORD **)(v40 + 16) != v40)) = v36;
                  *((_QWORD *)v36 + 1) = v40;
                  *(_QWORD *)(v40 + 16) = v36;
                  v41 = (_BYTE *)*((_QWORD *)v36 + 2);
                }
                else
                {
                  v36 = (_OWORD *)*((_QWORD *)v36 + 2);
                }
                *((_BYTE *)v36 + 24) = 1;
                v41[24] = 0;
                v40 = *((_QWORD *)v41 + 1);
                v50 = *(_OWORD **)v40;
                *((_QWORD *)v41 + 1) = *(_QWORD *)v40;
                if (v50)
                  *((_QWORD *)v50 + 2) = v41;
                *(_QWORD *)(v40 + 16) = *((_QWORD *)v41 + 2);
                *(_QWORD *)(*((_QWORD *)v41 + 2) + 8 * (**((_QWORD **)v41 + 2) != (_QWORD)v41)) = v40;
                *(_QWORD *)v40 = v41;
LABEL_85:
                *((_QWORD *)v41 + 2) = v40;
                break;
              }
              *(_BYTE *)(v40 + 24) = 1;
              v36 = v41;
              v41[24] = v41 == v38;
              *v43 = 1;
            }
            while (v41 != v38);
          }
          ++*(_QWORD *)(v62 + 16);
          v22 = HIBYTE(v66);
        }
        if (v22 < 0)
        {
          operator delete((void *)__dst);
          v52 = (_QWORD *)v7[1];
          if (v52)
          {
            do
            {
LABEL_91:
              v53 = v52;
              v52 = (_QWORD *)*v52;
            }
            while (v52);
            goto LABEL_8;
          }
        }
        else
        {
          v52 = (_QWORD *)v7[1];
          if (v52)
            goto LABEL_91;
        }
        do
        {
          v53 = (_QWORD *)v7[2];
          v39 = *v53 == (_QWORD)v7;
          v7 = v53;
        }
        while (!v39);
LABEL_8:
        v7 = v53;
        if (v53 == v63)
          goto LABEL_96;
      }
      HIBYTE(v66) = v11 + v9;
      v13 = &__dst;
      if (!v9)
        goto LABEL_26;
LABEL_22:
      if (v8 >= 0)
        v16 = (char *)v6 + 32;
      else
        v16 = (const void *)*((_QWORD *)v6 + 4);
      memmove(v13, v16, v9);
      goto LABEL_26;
    }
  }
LABEL_102:
  *(_BYTE *)(v62 + 24) = 1;
  v56 = (re2::Prefilter *)*((_QWORD *)v59 + 4);
  if (v56)
  {
    re2::Prefilter::~Prefilter(v56);
    MEMORY[0x1C3BD4858]();
  }
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(*((char **)v59 + 1));
  MEMORY[0x1C3BD4858](v59, 0x1020C40D4209308);
  v57 = (re2::Prefilter *)*((_QWORD *)v3 + 4);
  if (v57)
  {
    re2::Prefilter::~Prefilter(v57);
    MEMORY[0x1C3BD4858]();
  }
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(*((char **)v3 + 1));
  MEMORY[0x1C3BD4858](v3, 0x1020C40D4209308);
  return (re2::Prefilter::Info *)v62;
}

void sub_1C381D71C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

re2::Prefilter::Info *re2::Prefilter::Info::And(re2::Prefilter::Info *this, re2::Prefilter::Info *a2, re2::Prefilter::Info *a3)
{
  uint64_t v5;
  re2::Prefilter *v6;
  re2::Prefilter *v7;
  re2::Prefilter *v8;
  re2::Prefilter *v9;

  if (!this)
    return a2;
  if (!a2)
    return this;
  v5 = operator new();
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)v5 = v5 + 8;
  *(_BYTE *)(v5 + 24) = 0;
  *(_QWORD *)(v5 + 32) = 0;
  if (*((_BYTE *)this + 24))
  {
    v6 = (re2::Prefilter *)re2::Prefilter::OrStrings(this);
    *((_BYTE *)this + 24) = 0;
  }
  else
  {
    v6 = (re2::Prefilter *)*((_QWORD *)this + 4);
  }
  *((_QWORD *)this + 4) = 0;
  if (*((_BYTE *)a2 + 24))
  {
    v7 = (re2::Prefilter *)re2::Prefilter::OrStrings(a2);
    *((_BYTE *)a2 + 24) = 0;
  }
  else
  {
    v7 = (re2::Prefilter *)*((_QWORD *)a2 + 4);
  }
  *((_QWORD *)a2 + 4) = 0;
  *(_QWORD *)(v5 + 32) = re2::Prefilter::AndOr(3, v6, v7);
  *(_BYTE *)(v5 + 24) = 0;
  v8 = (re2::Prefilter *)*((_QWORD *)this + 4);
  if (v8)
  {
    re2::Prefilter::~Prefilter(v8);
    MEMORY[0x1C3BD4858]();
  }
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(*((char **)this + 1));
  MEMORY[0x1C3BD4858](this, 0x1020C40D4209308);
  v9 = (re2::Prefilter *)*((_QWORD *)a2 + 4);
  if (v9)
  {
    re2::Prefilter::~Prefilter(v9);
    MEMORY[0x1C3BD4858]();
  }
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(*((char **)a2 + 1));
  MEMORY[0x1C3BD4858](a2, 0x1020C40D4209308);
  return (re2::Prefilter::Info *)v5;
}

uint64_t re2::Prefilter::Info::EmptyString(re2::Prefilter::Info *this)
{
  uint64_t v1;
  void *__p[2];
  char v4;

  v1 = operator new();
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 8) = 0;
  *(_QWORD *)v1 = v1 + 8;
  *(_QWORD *)(v1 + 32) = 0;
  *(_BYTE *)(v1 + 24) = 1;
  v4 = 0;
  LOBYTE(__p[0]) = 0;
  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)v1, (const void **)__p, (uint64_t)__p);
  if (v4 < 0)
    operator delete(__p[0]);
  return v1;
}

void sub_1C381D90C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t re2::Prefilter::Info::Alt(re2::Prefilter::Info *this, re2::Prefilter::Info *a2, re2::Prefilter::Info *a3)
{
  uint64_t v5;
  re2::Prefilter::Info *v6;
  re2::Prefilter::Info *v7;
  char v8;
  re2::Prefilter::Info *v9;
  re2::Prefilter::Info *v10;
  BOOL v11;
  re2::Prefilter::Info *v12;
  re2::Prefilter::Info *v13;
  re2::Prefilter *v14;
  re2::Prefilter *v15;
  re2::Prefilter *v16;
  re2::Prefilter *v17;
  re2::Prefilter *v18;

  v5 = operator new();
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)v5 = v5 + 8;
  *(_BYTE *)(v5 + 24) = 0;
  *(_QWORD *)(v5 + 32) = 0;
  if (!*((_BYTE *)this + 24))
  {
    v14 = (re2::Prefilter *)*((_QWORD *)this + 4);
LABEL_22:
    *((_QWORD *)this + 4) = 0;
    if (*((_BYTE *)a2 + 24))
    {
      v15 = (re2::Prefilter *)re2::Prefilter::OrStrings(a2);
      *((_BYTE *)a2 + 24) = 0;
    }
    else
    {
      v15 = (re2::Prefilter *)*((_QWORD *)a2 + 4);
    }
    *((_QWORD *)a2 + 4) = 0;
    v16 = re2::Prefilter::AndOr(4, v14, v15);
    v8 = 0;
    *(_QWORD *)(v5 + 32) = v16;
    goto LABEL_26;
  }
  if (!*((_BYTE *)a2 + 24))
  {
    v14 = (re2::Prefilter *)re2::Prefilter::OrStrings(this);
    *((_BYTE *)this + 24) = 0;
    goto LABEL_22;
  }
  v6 = *(re2::Prefilter::Info **)this;
  if (*(re2::Prefilter::Info **)this != (re2::Prefilter::Info *)((char *)this + 8))
  {
    do
    {
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)v5, (const void **)v6 + 4, (uint64_t)v6 + 32);
      v9 = (re2::Prefilter::Info *)*((_QWORD *)v6 + 1);
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = *(re2::Prefilter::Info **)v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (re2::Prefilter::Info *)*((_QWORD *)v6 + 2);
          v11 = *(_QWORD *)v10 == (_QWORD)v6;
          v6 = v10;
        }
        while (!v11);
      }
      v6 = v10;
    }
    while (v10 != (re2::Prefilter::Info *)((char *)this + 8));
  }
  v7 = *(re2::Prefilter::Info **)a2;
  if (*(re2::Prefilter::Info **)a2 != (re2::Prefilter::Info *)((char *)a2 + 8))
  {
    do
    {
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)v5, (const void **)v7 + 4, (uint64_t)v7 + 32);
      v12 = (re2::Prefilter::Info *)*((_QWORD *)v7 + 1);
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = *(re2::Prefilter::Info **)v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (re2::Prefilter::Info *)*((_QWORD *)v7 + 2);
          v11 = *(_QWORD *)v13 == (_QWORD)v7;
          v7 = v13;
        }
        while (!v11);
      }
      v7 = v13;
    }
    while (v13 != (re2::Prefilter::Info *)((char *)a2 + 8));
  }
  v8 = 1;
LABEL_26:
  *(_BYTE *)(v5 + 24) = v8;
  v17 = (re2::Prefilter *)*((_QWORD *)this + 4);
  if (v17)
  {
    re2::Prefilter::~Prefilter(v17);
    MEMORY[0x1C3BD4858]();
  }
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(*((char **)this + 1));
  MEMORY[0x1C3BD4858](this, 0x1020C40D4209308);
  if (a2)
  {
    v18 = (re2::Prefilter *)*((_QWORD *)a2 + 4);
    if (v18)
    {
      re2::Prefilter::~Prefilter(v18);
      MEMORY[0x1C3BD4858]();
    }
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(*((char **)a2 + 1));
    MEMORY[0x1C3BD4858](a2, 0x1020C40D4209308);
  }
  return v5;
}

uint64_t re2::Prefilter::Info::Quest(re2::Prefilter::Info *this, re2::Prefilter::Info *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  re2::Prefilter *v6;

  v3 = operator new();
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)v3 = v3 + 8;
  *(_QWORD *)(v3 + 32) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  v4 = operator new();
  *(_DWORD *)v4 = 0;
  *(_OWORD *)(v4 + 8) = 0u;
  *(_OWORD *)(v4 + 24) = 0u;
  v5 = re2::alloc_id++;
  *(_DWORD *)(v4 + 44) = v5;
  *(_QWORD *)(v3 + 32) = v4;
  if (this)
  {
    v6 = (re2::Prefilter *)*((_QWORD *)this + 4);
    if (v6)
    {
      re2::Prefilter::~Prefilter(v6);
      MEMORY[0x1C3BD4858]();
    }
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(*((char **)this + 1));
    MEMORY[0x1C3BD4858](this, 0x1020C40D4209308);
  }
  return v3;
}

uint64_t re2::Prefilter::OrStrings(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  int v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  char *v14;
  uint64_t v15;
  char v16;
  char *v17;
  int64_t v18;
  char *v19;
  int v20;
  void *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t *v27;
  _QWORD *v28;
  uint64_t v29;
  int v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v35;

  v1 = (_QWORD *)*a1;
  v35 = a1 + 1;
  if ((_QWORD *)*a1 != a1 + 1)
  {
    do
    {
      v5 = (_QWORD *)v1[1];
      v6 = v5;
      v7 = v1;
      if (v5)
      {
        do
        {
          v8 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v7[2];
          v9 = *v8 == (_QWORD)v7;
          v7 = v8;
        }
        while (!v9);
      }
      if (v8 != v35)
      {
        do
        {
          v10 = v8;
          v11 = (_QWORD *)v8[1];
          v12 = v11;
          v13 = v8;
          if (v11)
          {
            do
            {
              v8 = v12;
              v12 = (_QWORD *)*v12;
            }
            while (v12);
          }
          else
          {
            do
            {
              v8 = (_QWORD *)v13[2];
              v9 = *v8 == (_QWORD)v13;
              v13 = v8;
            }
            while (!v9);
          }
          v14 = (char *)(v10 + 4);
          if (*((char *)v10 + 55) < 0)
          {
            v14 = (char *)v10[4];
            v15 = v10[5];
          }
          else
          {
            v15 = *((unsigned __int8 *)v10 + 55);
          }
          v16 = *((_BYTE *)v1 + 55);
          if (v16 >= 0)
            v17 = (char *)(v1 + 4);
          else
            v17 = (char *)v1[4];
          if (v16 >= 0)
            v18 = *((unsigned __int8 *)v1 + 55);
          else
            v18 = v1[5];
          if (v18)
          {
            if (v15 >= v18)
            {
              v19 = &v14[v15];
              v20 = *v17;
              v21 = v14;
              do
              {
                v22 = v15 - v18;
                if (v22 == -1)
                  break;
                v23 = (char *)memchr(v21, v20, v22 + 1);
                if (!v23)
                  break;
                v24 = v23;
                if (!memcmp(v23, v17, v18))
                {
                  if (v24 == v19 || v24 - v14 == -1)
                    break;
                  goto LABEL_39;
                }
                v21 = v24 + 1;
                v15 = v19 - (v24 + 1);
              }
              while (v15 >= v18);
            }
          }
          else
          {
LABEL_39:
            v25 = v10;
            if (v11)
            {
              do
              {
                v26 = v11;
                v11 = (_QWORD *)*v11;
              }
              while (v11);
            }
            else
            {
              do
              {
                v26 = (_QWORD *)v25[2];
                v9 = *v26 == (_QWORD)v25;
                v25 = v26;
              }
              while (!v9);
            }
            if ((_QWORD *)*a1 == v10)
              *a1 = v26;
            v27 = (uint64_t *)a1[1];
            --a1[2];
            std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v27, v10);
            if (*((char *)v10 + 55) < 0)
              operator delete((void *)v10[4]);
            operator delete(v10);
          }
        }
        while (v8 != v35);
        v5 = (_QWORD *)v1[1];
      }
      if (v5)
      {
        do
        {
          v28 = v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v28 = (_QWORD *)v1[2];
          v9 = *v28 == (_QWORD)v1;
          v1 = v28;
        }
        while (!v9);
      }
      v1 = v28;
    }
    while (v28 != v35);
  }
  if (!a1[2])
    return 0;
  v2 = operator new();
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_DWORD *)v2 = 1;
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  v3 = re2::alloc_id++;
  *(_DWORD *)(v2 + 44) = v3;
  v4 = (_QWORD *)*a1;
  if ((_QWORD *)*a1 != v35)
  {
    do
    {
      v29 = operator new();
      *(_QWORD *)(v29 + 24) = 0;
      *(_QWORD *)(v29 + 32) = 0;
      *(_DWORD *)v29 = 2;
      *(_QWORD *)(v29 + 8) = 0;
      *(_QWORD *)(v29 + 16) = 0;
      v30 = re2::alloc_id++;
      *(_DWORD *)(v29 + 44) = v30;
      std::string::operator=((std::string *)(v29 + 16), (const std::string *)(v4 + 4));
      v2 = (uint64_t)re2::Prefilter::AndOr(4, (re2::Prefilter *)v2, (re2::Prefilter *)v29);
      v31 = (_QWORD *)v4[1];
      if (v31)
      {
        do
        {
          v32 = v31;
          v31 = (_QWORD *)*v31;
        }
        while (v31);
      }
      else
      {
        do
        {
          v32 = (_QWORD *)v4[2];
          v9 = *v32 == (_QWORD)v4;
          v4 = v32;
        }
        while (!v9);
      }
      v4 = v32;
    }
    while (v32 != v35);
  }
  return v2;
}

uint64_t re2::Prefilter::Info::CClass(re2::Prefilter::Info *this, re2::CharClass *a2)
{
  int v2;
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  int *v12;
  int v13;
  unsigned __int8 v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  const void *v19;
  const void *v20;
  int v21;
  unint64_t v22;
  const void *v23;
  int v24;
  BOOL v25;
  int v26;
  _BOOL4 v27;
  _OWORD *v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  _BYTE *v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD *v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  const char *v47;
  BOOL v48;
  unsigned int v49;
  const char *v50;
  unsigned int v51;
  unsigned int v52;
  BOOL v53;
  BOOL v54;
  char v55;
  int v56;
  size_t v57;
  unsigned int v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  char v62;
  size_t v63;
  __int128 *p_s1;
  _QWORD *v65;
  const void *v66;
  const void *v67;
  int v68;
  size_t v69;
  const void *v70;
  size_t v71;
  int v72;
  _BOOL4 v73;
  int v74;
  _BOOL4 v75;
  _OWORD *v76;
  uint64_t v77;
  _BYTE *v78;
  uint64_t v79;
  _BYTE *v80;
  uint64_t v81;
  _BYTE *v82;
  int v83;
  uint64_t v84;
  int v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  _OWORD *v89;
  uint64_t v90;
  re2::Prefilter::Info *v92;
  unsigned int *v93;
  uint64_t v94;
  __int128 __s1;
  uint64_t v96;
  int __src;

  v2 = (int)a2;
  v4 = *((_DWORD *)this + 1);
  v5 = operator new();
  v6 = v5;
  *(_QWORD *)(v5 + 8) = 0;
  v7 = (_QWORD *)(v5 + 8);
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)v5 = v5 + 8;
  *(_BYTE *)(v5 + 24) = 0;
  *(_QWORD *)(v5 + 32) = 0;
  if (v4 < 11)
  {
    v10 = *((_DWORD *)this + 4);
    if (!v10)
    {
LABEL_172:
      *(_BYTE *)(v6 + 24) = 1;
      return v6;
    }
    v11 = *((_QWORD *)this + 1);
    if (v2)
    {
      v12 = (int *)*((_QWORD *)this + 1);
      do
      {
        v13 = *v12;
        if (*v12 <= v12[1])
        {
          do
          {
            if ((v13 - 65) >= 0x1A)
              v14 = v13;
            else
              v14 = v13 + 32;
            HIBYTE(v96) = 1;
            LOWORD(__s1) = v14;
            v15 = (_QWORD *)*v7;
            v16 = v7;
            v17 = v7;
            if (*v7)
            {
              while (1)
              {
                while (1)
                {
                  v17 = v15;
                  v20 = (const void *)v15[4];
                  v18 = v15 + 4;
                  v19 = v20;
                  v21 = *((char *)v18 + 23);
                  if (v21 >= 0)
                    v22 = *((unsigned __int8 *)v18 + 23);
                  else
                    v22 = v18[1];
                  if (v21 >= 0)
                    v23 = v18;
                  else
                    v23 = v19;
                  v24 = memcmp(&__s1, v23, v22 != 0);
                  v25 = v22 > 1;
                  if (v24)
                    v25 = v24 < 0;
                  if (!v25)
                    break;
                  v15 = (_QWORD *)*v17;
                  v16 = v17;
                  if (!*v17)
                    goto LABEL_31;
                }
                v26 = memcmp(v23, &__s1, v22 != 0);
                v27 = v22 == 0;
                if (v26)
                  v27 = v26 < 0;
                if (!v27)
                  break;
                v15 = (_QWORD *)v17[1];
                if (!v15)
                {
                  v16 = v17 + 1;
                  goto LABEL_31;
                }
              }
            }
            else
            {
LABEL_31:
              v28 = operator new(0x38uLL);
              v28[2] = __s1;
              *((_QWORD *)v28 + 6) = v96;
              __s1 = 0uLL;
              v96 = 0;
              *(_QWORD *)v28 = 0;
              *((_QWORD *)v28 + 1) = 0;
              *((_QWORD *)v28 + 2) = v17;
              *v16 = v28;
              v29 = **(_QWORD **)v6;
              if (v29)
              {
                *(_QWORD *)v6 = v29;
                v28 = (_OWORD *)*v16;
              }
              v30 = (_BYTE *)*v7;
              v53 = v28 == (_OWORD *)*v7;
              *((_BYTE *)v28 + 24) = v53;
              if (!v53)
              {
                do
                {
                  v31 = *((_QWORD *)v28 + 2);
                  if (*(_BYTE *)(v31 + 24))
                    break;
                  v32 = *(_BYTE **)(v31 + 16);
                  v33 = *(_QWORD *)v32;
                  if (*(_QWORD *)v32 == v31)
                  {
                    v36 = *((_QWORD *)v32 + 1);
                    if (!v36 || (v37 = *(unsigned __int8 *)(v36 + 24), v34 = (_BYTE *)(v36 + 24), v37))
                    {
                      if (*(_OWORD **)v31 == v28)
                      {
                        v38 = (uint64_t *)*((_QWORD *)v28 + 2);
                      }
                      else
                      {
                        v38 = *(uint64_t **)(v31 + 8);
                        v39 = *v38;
                        *(_QWORD *)(v31 + 8) = *v38;
                        if (v39)
                        {
                          *(_QWORD *)(v39 + 16) = v31;
                          v32 = *(_BYTE **)(v31 + 16);
                        }
                        v38[2] = (uint64_t)v32;
                        *(_QWORD *)(*(_QWORD *)(v31 + 16) + 8 * (**(_QWORD **)(v31 + 16) != v31)) = v38;
                        *v38 = v31;
                        *(_QWORD *)(v31 + 16) = v38;
                        v32 = (_BYTE *)v38[2];
                        v31 = *(_QWORD *)v32;
                      }
                      *((_BYTE *)v38 + 24) = 1;
                      v32[24] = 0;
                      v42 = *(_QWORD *)(v31 + 8);
                      *(_QWORD *)v32 = v42;
                      if (v42)
                        *(_QWORD *)(v42 + 16) = v32;
                      *(_QWORD *)(v31 + 16) = *((_QWORD *)v32 + 2);
                      *(_QWORD *)(*((_QWORD *)v32 + 2) + 8 * (**((_QWORD **)v32 + 2) != (_QWORD)v32)) = v31;
                      *(_QWORD *)(v31 + 8) = v32;
                      goto LABEL_60;
                    }
                  }
                  else if (!v33 || (v35 = *(unsigned __int8 *)(v33 + 24), v34 = (_BYTE *)(v33 + 24), v35))
                  {
                    if (*(_OWORD **)v31 == v28)
                    {
                      v40 = *((_QWORD *)v28 + 1);
                      *(_QWORD *)v31 = v40;
                      if (v40)
                      {
                        *(_QWORD *)(v40 + 16) = v31;
                        v32 = *(_BYTE **)(v31 + 16);
                      }
                      *((_QWORD *)v28 + 2) = v32;
                      *(_QWORD *)(*(_QWORD *)(v31 + 16) + 8 * (**(_QWORD **)(v31 + 16) != v31)) = v28;
                      *((_QWORD *)v28 + 1) = v31;
                      *(_QWORD *)(v31 + 16) = v28;
                      v32 = (_BYTE *)*((_QWORD *)v28 + 2);
                    }
                    else
                    {
                      v28 = (_OWORD *)*((_QWORD *)v28 + 2);
                    }
                    *((_BYTE *)v28 + 24) = 1;
                    v32[24] = 0;
                    v31 = *((_QWORD *)v32 + 1);
                    v41 = *(_OWORD **)v31;
                    *((_QWORD *)v32 + 1) = *(_QWORD *)v31;
                    if (v41)
                      *((_QWORD *)v41 + 2) = v32;
                    *(_QWORD *)(v31 + 16) = *((_QWORD *)v32 + 2);
                    *(_QWORD *)(*((_QWORD *)v32 + 2) + 8 * (**((_QWORD **)v32 + 2) != (_QWORD)v32)) = v31;
                    *(_QWORD *)v31 = v32;
LABEL_60:
                    *((_QWORD *)v32 + 2) = v31;
                    break;
                  }
                  *(_BYTE *)(v31 + 24) = 1;
                  v28 = v32;
                  v32[24] = v32 == v30;
                  *v34 = 1;
                }
                while (v32 != v30);
              }
              ++*(_QWORD *)(v6 + 16);
              if (SHIBYTE(v96) < 0)
                operator delete((void *)__s1);
            }
            v48 = v13++ < v12[1];
          }
          while (v48);
          v11 = *((_QWORD *)this + 1);
          v10 = *((_DWORD *)this + 4);
        }
        v12 += 2;
      }
      while (v12 != (int *)(v11 + 8 * v10));
      goto LABEL_172;
    }
    v43 = (unsigned int *)*((_QWORD *)this + 1);
    v94 = v5;
    v92 = this;
    while (1)
    {
      v44 = *v43;
      v93 = v43;
      if ((int)*v43 <= (int)v43[1])
        break;
LABEL_64:
      v43 += 2;
      if (v43 == (unsigned int *)(v11 + 8 * v10))
        goto LABEL_172;
    }
    while (1)
    {
      if ((int)v44 >= 128)
      {
        v46 = 167;
        v47 = "A";
        do
        {
          v50 = v47;
          v51 = v46 >> 1;
          v52 = *(_DWORD *)&v47[12 * (v46 >> 1)];
          if (v52 <= v44 && *(_DWORD *)&v50[12 * v51 + 4] >= v44)
            goto LABEL_88;
          v46 -= v51 + 1;
          v48 = v52 > v44;
          if (v52 <= v44)
            v49 = v51 + 1;
          else
            v49 = 0;
          v47 = &v50[12 * v49];
          if (v48)
            v46 = v51;
        }
        while (v46 > 0);
        v53 = v47 >= re2::num_unicode_tolower || v50 == 0;
        v45 = v44;
        if (!v53)
        {
          v52 = *(_DWORD *)v47;
          v51 = v49;
LABEL_88:
          v45 = v44;
          v54 = v44 >= v52;
          v55 = v44 - v52;
          if (!v54)
            goto LABEL_103;
          v56 = *(_DWORD *)&v50[12 * v51 + 8];
          if (v56 > 0x3FFFFFFF)
          {
            if (v56 == 0x40000000)
            {
              v45 = v44;
              if ((v55 & 1) != 0)
                goto LABEL_103;
LABEL_100:
              if ((v44 & 1) != 0)
              {
LABEL_98:
                v45 = v44 - 1;
                goto LABEL_103;
              }
LABEL_101:
              v45 = v44 + 1;
              goto LABEL_103;
            }
            if (v56 == 1073741825)
            {
              v45 = v44;
              if ((v55 & 1) != 0)
                goto LABEL_103;
LABEL_97:
              if ((v44 & 0x80000001) != 1)
                goto LABEL_98;
              goto LABEL_101;
            }
          }
          else
          {
            if (v56 == -1)
              goto LABEL_97;
            if (v56 == 1)
              goto LABEL_100;
          }
          v45 = v56 + v44;
        }
      }
      else
      {
        v45 = v44 + 32;
        if (v44 - 65 >= 0x1A)
          v45 = v44;
      }
LABEL_103:
      __src = 0;
      if (v45 > 0x7F)
      {
        if (v45 > 0x7FF)
        {
          if (HIWORD(v45) <= 0x10u)
            v58 = v45;
          else
            v58 = 65533;
          if (HIWORD(v58))
          {
            LOBYTE(__src) = (v58 >> 18) | 0xF0;
            BYTE1(__src) = (v58 >> 12) & 0x3F | 0x80;
            BYTE2(__src) = (v58 >> 6) & 0x3F | 0x80;
            HIBYTE(__src) = v58 & 0x3F | 0x80;
            v57 = 4;
          }
          else
          {
            LOBYTE(__src) = (v58 >> 12) | 0xE0;
            BYTE1(__src) = (v58 >> 6) & 0x3F | 0x80;
            BYTE2(__src) = v58 & 0x3F | 0x80;
            v57 = 3;
          }
        }
        else
        {
          LOBYTE(__src) = (v45 >> 6) | 0xC0;
          BYTE1(__src) = v45 & 0x3F | 0x80;
          v57 = 2;
        }
      }
      else
      {
        LOBYTE(__src) = v45;
        v57 = 1;
      }
      HIBYTE(v96) = v57;
      memcpy(&__s1, &__src, v57);
      *(_BYTE *)((unint64_t)&__s1 | v57) = 0;
      v59 = (_QWORD *)*v7;
      v60 = v7;
      v61 = v7;
      if (*v7)
      {
        v62 = HIBYTE(v96);
        if (v96 >= 0)
          v63 = HIBYTE(v96);
        else
          v63 = *((_QWORD *)&__s1 + 1);
        if (v96 >= 0)
          p_s1 = &__s1;
        else
          p_s1 = (__int128 *)__s1;
        while (1)
        {
          while (1)
          {
            v61 = v59;
            v67 = (const void *)v59[4];
            v65 = v59 + 4;
            v66 = v67;
            v68 = *((char *)v65 + 23);
            if (v68 >= 0)
              v69 = *((unsigned __int8 *)v65 + 23);
            else
              v69 = v65[1];
            if (v68 >= 0)
              v70 = v65;
            else
              v70 = v66;
            if (v69 >= v63)
              v71 = v63;
            else
              v71 = v69;
            v72 = memcmp(p_s1, v70, v71);
            v73 = v63 < v69;
            if (v72)
              v73 = v72 < 0;
            if (!v73)
              break;
            v59 = (_QWORD *)*v61;
            v60 = v61;
            if (!*v61)
              goto LABEL_138;
          }
          v74 = memcmp(v70, p_s1, v71);
          v75 = v69 < v63;
          if (v74)
            v75 = v74 < 0;
          if (!v75)
            break;
          v59 = (_QWORD *)v61[1];
          if (!v59)
          {
            v60 = v61 + 1;
            goto LABEL_138;
          }
        }
        v43 = v93;
        if ((v62 & 0x80) == 0)
          goto LABEL_68;
      }
      else
      {
LABEL_138:
        v76 = operator new(0x38uLL);
        v76[2] = __s1;
        *((_QWORD *)v76 + 6) = v96;
        v96 = 0;
        __s1 = 0uLL;
        *(_QWORD *)v76 = 0;
        *((_QWORD *)v76 + 1) = 0;
        *((_QWORD *)v76 + 2) = v61;
        *v60 = v76;
        v43 = v93;
        v77 = **(_QWORD **)v94;
        if (v77)
        {
          *(_QWORD *)v94 = v77;
          v76 = (_OWORD *)*v60;
        }
        v78 = (_BYTE *)*v7;
        v53 = v76 == (_OWORD *)*v7;
        *((_BYTE *)v76 + 24) = v53;
        if (!v53)
        {
          do
          {
            v79 = *((_QWORD *)v76 + 2);
            if (*(_BYTE *)(v79 + 24))
              break;
            v80 = *(_BYTE **)(v79 + 16);
            v81 = *(_QWORD *)v80;
            if (*(_QWORD *)v80 == v79)
            {
              v84 = *((_QWORD *)v80 + 1);
              if (!v84 || (v85 = *(unsigned __int8 *)(v84 + 24), v82 = (_BYTE *)(v84 + 24), v85))
              {
                if (*(_OWORD **)v79 == v76)
                {
                  v86 = (uint64_t *)*((_QWORD *)v76 + 2);
                }
                else
                {
                  v86 = *(uint64_t **)(v79 + 8);
                  v87 = *v86;
                  *(_QWORD *)(v79 + 8) = *v86;
                  if (v87)
                  {
                    *(_QWORD *)(v87 + 16) = v79;
                    v80 = *(_BYTE **)(v79 + 16);
                  }
                  v86[2] = (uint64_t)v80;
                  *(_QWORD *)(*(_QWORD *)(v79 + 16) + 8 * (**(_QWORD **)(v79 + 16) != v79)) = v86;
                  *v86 = v79;
                  *(_QWORD *)(v79 + 16) = v86;
                  v80 = (_BYTE *)v86[2];
                  v79 = *(_QWORD *)v80;
                }
                *((_BYTE *)v86 + 24) = 1;
                v80[24] = 0;
                v90 = *(_QWORD *)(v79 + 8);
                *(_QWORD *)v80 = v90;
                if (v90)
                  *(_QWORD *)(v90 + 16) = v80;
                *(_QWORD *)(v79 + 16) = *((_QWORD *)v80 + 2);
                *(_QWORD *)(*((_QWORD *)v80 + 2) + 8 * (**((_QWORD **)v80 + 2) != (_QWORD)v80)) = v79;
                *(_QWORD *)(v79 + 8) = v80;
                goto LABEL_169;
              }
            }
            else if (!v81 || (v83 = *(unsigned __int8 *)(v81 + 24), v82 = (_BYTE *)(v81 + 24), v83))
            {
              if (*(_OWORD **)v79 == v76)
              {
                v88 = *((_QWORD *)v76 + 1);
                *(_QWORD *)v79 = v88;
                if (v88)
                {
                  *(_QWORD *)(v88 + 16) = v79;
                  v80 = *(_BYTE **)(v79 + 16);
                }
                *((_QWORD *)v76 + 2) = v80;
                *(_QWORD *)(*(_QWORD *)(v79 + 16) + 8 * (**(_QWORD **)(v79 + 16) != v79)) = v76;
                *((_QWORD *)v76 + 1) = v79;
                *(_QWORD *)(v79 + 16) = v76;
                v80 = (_BYTE *)*((_QWORD *)v76 + 2);
              }
              else
              {
                v76 = (_OWORD *)*((_QWORD *)v76 + 2);
              }
              *((_BYTE *)v76 + 24) = 1;
              v80[24] = 0;
              v79 = *((_QWORD *)v80 + 1);
              v89 = *(_OWORD **)v79;
              *((_QWORD *)v80 + 1) = *(_QWORD *)v79;
              if (v89)
                *((_QWORD *)v89 + 2) = v80;
              *(_QWORD *)(v79 + 16) = *((_QWORD *)v80 + 2);
              *(_QWORD *)(*((_QWORD *)v80 + 2) + 8 * (**((_QWORD **)v80 + 2) != (_QWORD)v80)) = v79;
              *(_QWORD *)v79 = v80;
LABEL_169:
              *((_QWORD *)v80 + 2) = v79;
              break;
            }
            *(_BYTE *)(v79 + 24) = 1;
            v76 = v80;
            v80[24] = v80 == v78;
            *v82 = 1;
          }
          while (v80 != v78);
        }
        ++*(_QWORD *)(v94 + 16);
        if ((v96 & 0x8000000000000000) == 0)
          goto LABEL_68;
      }
      operator delete((void *)__s1);
LABEL_68:
      v48 = (int)v44++ < (int)v43[1];
      v6 = v94;
      if (!v48)
      {
        v11 = *((_QWORD *)v92 + 1);
        v10 = *((_DWORD *)v92 + 4);
        goto LABEL_64;
      }
    }
  }
  v8 = operator new();
  *(_DWORD *)v8 = 0;
  *(_OWORD *)(v8 + 8) = 0u;
  *(_OWORD *)(v8 + 24) = 0u;
  v9 = re2::alloc_id++;
  *(_DWORD *)(v8 + 44) = v9;
  *(_QWORD *)(v6 + 32) = v8;
  return v6;
}

void sub_1C381E858(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

re2::Prefilter *re2::Prefilter::AndOr(int a1, re2::Prefilter *this, re2::Prefilter *a3)
{
  re2::Prefilter *v4;
  int v6;
  uint64_t v7;
  re2::Prefilter **v8;
  uint64_t v9;
  re2::Prefilter *v10;
  int v11;
  uint64_t v12;
  int **v13;
  uint64_t v14;
  int *v15;
  BOOL v16;
  int *v17;
  re2::Prefilter *v18;
  re2::Prefilter *v19;
  int v20;
  re2::Prefilter *v22;
  uint64_t v23;
  unint64_t v24;
  re2::Prefilter **v25;
  unint64_t v26;
  char *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  char **v31;
  unint64_t v32;
  char *v33;
  int *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  char *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _OWORD *v45;
  char *v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v51;
  void **v52;
  int v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  void *v59;
  re2::Prefilter **v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  _BYTE *v66;
  re2::Prefilter **v67;
  char *v68;
  _QWORD *v69;
  unint64_t v70;
  uint64_t v71;
  _OWORD *v72;
  re2::Prefilter **v73;
  uint64_t v74;
  __int128 v75;
  re2::Prefilter *v76;
  int v77;
  unint64_t v78;
  char v79[8];
  _QWORD v80[34];

  v4 = this;
  v6 = *(_DWORD *)this;
  if ((*(_DWORD *)this - 3) <= 1)
  {
    while (1)
    {
      v7 = *((_QWORD *)v4 + 1);
      v8 = *(re2::Prefilter ***)v7;
      v9 = (uint64_t)(*(_QWORD *)(v7 + 8) - *(_QWORD *)v7) >> 3;
      if (v9 != 1)
        break;
      v10 = *v8;
      *(_QWORD *)(v7 + 8) = v8;
      re2::Prefilter::~Prefilter(v4);
      MEMORY[0x1C3BD4858]();
      v6 = *(_DWORD *)v10;
      v4 = v10;
      if ((*(_DWORD *)v10 - 3) >= 2)
        goto LABEL_8;
    }
    if (!v9)
      *(_DWORD *)v4 = v6 != 3;
  }
  v10 = v4;
LABEL_8:
  v11 = *(_DWORD *)a3;
  if ((*(_DWORD *)a3 - 3) <= 1)
  {
    while (1)
    {
      v12 = *((_QWORD *)a3 + 1);
      v13 = *(int ***)v12;
      v14 = (uint64_t)(*(_QWORD *)(v12 + 8) - *(_QWORD *)v12) >> 3;
      if (v14 != 1)
        break;
      v15 = *v13;
      *(_QWORD *)(v12 + 8) = v13;
      re2::Prefilter::~Prefilter(a3);
      MEMORY[0x1C3BD4858]();
      v11 = *v15;
      a3 = (re2::Prefilter *)v15;
      if ((*v15 - 3) >= 2)
        goto LABEL_15;
    }
    if (!v14)
    {
      v11 = v11 != 3;
      *(_DWORD *)a3 = v11;
    }
  }
  v15 = (int *)a3;
LABEL_15:
  v16 = *(_DWORD *)v10 <= v11;
  if (*(_DWORD *)v10 < v11)
    v11 = *(_DWORD *)v10;
  if (v16)
    v17 = (int *)v10;
  else
    v17 = v15;
  if (v16)
    v18 = (re2::Prefilter *)v15;
  else
    v18 = v10;
  if (v11 == 1)
  {
    if (a1 != 4)
      goto LABEL_72;
LABEL_28:
    re2::Prefilter::~Prefilter((re2::Prefilter *)v17);
    MEMORY[0x1C3BD4858]();
    return v18;
  }
  if (!v11)
  {
    if (a1 != 3)
    {
LABEL_72:
      re2::Prefilter::~Prefilter(v18);
      MEMORY[0x1C3BD4858]();
      return (re2::Prefilter *)v17;
    }
    goto LABEL_28;
  }
  v20 = *(_DWORD *)v18;
  if (v11 == a1 && v20 == a1)
  {
    if ((a1 - 3) > 1)
    {
LABEL_103:
      LogMessage::LogMessage((LogMessage *)v79, "/Library/Caches/com.apple.xbs/Sources/Suggestions/re2/re2/re2_prefilter.h");
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)"Check failed: op_ == AND || op_ == OR", 37);
      LogMessage::Flush((LogMessage *)v79);
      abort();
    }
    v26 = 0;
    while (1)
    {
      v28 = (uint64_t *)*((_QWORD *)v18 + 1);
      v29 = *v28;
      if (v26 >= (v28[1] - *v28) >> 3)
      {
        v28[1] = v29;
        goto LABEL_72;
      }
      if ((*v17 - 3) >= 2)
      {
        LogMessage::LogMessage((LogMessage *)v79, "/Library/Caches/com.apple.xbs/Sources/Suggestions/re2/re2/re2_prefilter.h");
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)"Check failed: op_ == AND || op_ == OR", 37);
        LogMessage::Flush((LogMessage *)v79);
        abort();
      }
      v30 = *(_QWORD *)(v29 + 8 * v26);
      v31 = (char **)*((_QWORD *)v17 + 1);
      v33 = v31[1];
      v32 = (unint64_t)v31[2];
      if ((unint64_t)v33 >= v32)
        break;
      *(_QWORD *)v33 = v30;
      v27 = v33 + 8;
LABEL_46:
      v31[1] = v27;
      ++v26;
      if ((*(_DWORD *)v18 - 3) >= 2)
        goto LABEL_103;
    }
    v34 = v17;
    v35 = *v31;
    v36 = v33 - *v31;
    v37 = v36 >> 3;
    v38 = (v36 >> 3) + 1;
    if (v38 >> 61)
      goto LABEL_105;
    v39 = v32 - (_QWORD)v35;
    if (v39 >> 2 > v38)
      v38 = v39 >> 2;
    if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8)
      v38 = 0x1FFFFFFFFFFFFFFFLL;
    v78 = v38;
    if (v38)
    {
      if (v38 >> 61)
        goto LABEL_106;
      v40 = operator new(8 * v38);
    }
    else
    {
      v40 = 0;
    }
    v41 = &v40[8 * v37];
    *(_QWORD *)v41 = v30;
    v27 = v41 + 8;
    if (v33 == v35)
    {
      v17 = v34;
      goto LABEL_69;
    }
    v42 = v33 - 8 - v35;
    if (v42 >= 0x58)
    {
      v43 = v33 - &v40[v36];
      v17 = v34;
      if (v43 >= 0x20)
      {
        v44 = (v42 >> 3) + 1;
        v45 = &v40[8 * v37 - 16];
        v46 = v33 - 16;
        v47 = v44 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v48 = *(_OWORD *)v46;
          *(v45 - 1) = *((_OWORD *)v46 - 1);
          *v45 = v48;
          v45 -= 2;
          v46 -= 32;
          v47 -= 4;
        }
        while (v47);
        v41 -= 8 * (v44 & 0x3FFFFFFFFFFFFFFCLL);
        v33 -= 8 * (v44 & 0x3FFFFFFFFFFFFFFCLL);
        if (v44 == (v44 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_68;
      }
    }
    else
    {
      v17 = v34;
    }
    do
    {
      v49 = *((_QWORD *)v33 - 1);
      v33 -= 8;
      *((_QWORD *)v41 - 1) = v49;
      v41 -= 8;
    }
    while (v33 != v35);
LABEL_68:
    v33 = *v31;
LABEL_69:
    *v31 = v41;
    v31[1] = v27;
    v31[2] = &v40[8 * v78];
    if (v33)
      operator delete(v33);
    goto LABEL_46;
  }
  if (v20 == a1)
    v19 = v18;
  else
    v19 = (re2::Prefilter *)v17;
  if (v20 == a1)
    v22 = (re2::Prefilter *)v17;
  else
    v22 = v18;
  if (*(_DWORD *)v19 != a1)
  {
    v51 = operator new();
    v17 = (int *)v51;
    *(_QWORD *)(v51 + 24) = 0;
    *(_QWORD *)(v51 + 32) = 0;
    *(_DWORD *)v51 = a1;
    *(_QWORD *)(v51 + 8) = 0;
    *(_QWORD *)(v51 + 16) = 0;
    if ((a1 - 3) > 1)
    {
      v77 = re2::alloc_id++;
      *(_DWORD *)(v51 + 44) = v77;
      LogMessage::LogMessage((LogMessage *)v79, "/Library/Caches/com.apple.xbs/Sources/Suggestions/re2/re2/re2_prefilter.h");
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)"Check failed: op_ == AND || op_ == OR", 37);
      LogMessage::Flush((LogMessage *)v79);
      abort();
    }
    v52 = (void **)operator new();
    *v52 = 0;
    v52[1] = 0;
    v52[2] = 0;
    *((_QWORD *)v17 + 1) = v52;
    v53 = re2::alloc_id++;
    v17[11] = v53;
    v54 = operator new(8uLL);
    *v54 = v19;
    *v52 = v54;
    v52[1] = v54 + 1;
    v52[2] = v54 + 1;
    v55 = operator new(0x10uLL);
    v56 = 0;
    v57 = (char *)(v55 + 2);
    v55[1] = v22;
    do
    {
      v55[v56] = v54[v56];
      --v56;
    }
    while (v56 != -1);
    v58 = (char *)(v55 - 1);
    v59 = *v52;
    *v52 = v58 + 8;
    v52[1] = v57;
    v52[2] = v57;
    if (v59)
      operator delete(v59);
    v52[1] = v57;
    return (re2::Prefilter *)v17;
  }
  if ((a1 - 3) >= 2)
  {
    LogMessage::LogMessage((LogMessage *)v79, "/Library/Caches/com.apple.xbs/Sources/Suggestions/re2/re2/re2_prefilter.h");
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)"Check failed: op_ == AND || op_ == OR", 37);
    LogMessage::Flush((LogMessage *)v79);
    abort();
  }
  v23 = *((_QWORD *)v19 + 1);
  v25 = *(re2::Prefilter ***)(v23 + 8);
  v24 = *(_QWORD *)(v23 + 16);
  if ((unint64_t)v25 >= v24)
  {
    v60 = *(re2::Prefilter ***)v23;
    v61 = (uint64_t)v25 - *(_QWORD *)v23;
    v62 = v61 >> 3;
    v63 = (v61 >> 3) + 1;
    if (v63 >> 61)
LABEL_105:
      std::vector<re2::RE2 *>::__throw_length_error[abi:ne180100]();
    v64 = v24 - (_QWORD)v60;
    if (v64 >> 2 > v63)
      v63 = v64 >> 2;
    if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8)
      v65 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v65 = v63;
    if (v65)
    {
      if (v65 >> 61)
LABEL_106:
        std::__throw_bad_array_new_length[abi:ne180100]();
      v66 = operator new(8 * v65);
    }
    else
    {
      v66 = 0;
    }
    v67 = (re2::Prefilter **)&v66[8 * v62];
    v68 = &v66[8 * v65];
    *v67 = v22;
    v69 = v67 + 1;
    if (v25 == v60)
    {
      v60 = v25;
    }
    else
    {
      v70 = (char *)v25 - (char *)v60 - 8;
      if (v70 < 0x58)
        goto LABEL_111;
      if ((unint64_t)((char *)v25 - v66 - v61) < 0x20)
        goto LABEL_111;
      v71 = (v70 >> 3) + 1;
      v72 = &v66[8 * v62 - 16];
      v73 = v25 - 2;
      v74 = v71 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v75 = *(_OWORD *)v73;
        *(v72 - 1) = *((_OWORD *)v73 - 1);
        *v72 = v75;
        v72 -= 2;
        v73 -= 4;
        v74 -= 4;
      }
      while (v74);
      v67 -= v71 & 0x3FFFFFFFFFFFFFFCLL;
      v25 -= v71 & 0x3FFFFFFFFFFFFFFCLL;
      if (v71 != (v71 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_111:
        do
        {
          v76 = *--v25;
          *--v67 = v76;
        }
        while (v25 != v60);
        v60 = *(re2::Prefilter ***)v23;
      }
    }
    *(_QWORD *)v23 = v67;
    *(_QWORD *)(v23 + 8) = v69;
    *(_QWORD *)(v23 + 16) = v68;
    if (v60)
      operator delete(v60);
    *(_QWORD *)(v23 + 8) = v69;
  }
  else
  {
    *v25 = v22;
    *(_QWORD *)(v23 + 8) = v25 + 1;
  }
  return v19;
}

void sub_1C381EF14(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  LogMessageFatal::~LogMessageFatal((LogMessageFatal *)va);
}

void sub_1C381EF20(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  LogMessageFatal::~LogMessageFatal((LogMessageFatal *)va);
}

void sub_1C381EF28(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3BD4858](v1, 0x1032C40B307CA0FLL);
  _Unwind_Resume(a1);
}

void sub_1C381EF50(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  LogMessageFatal::~LogMessageFatal((LogMessageFatal *)va);
}

void sub_1C381EF5C(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  LogMessageFatal::~LogMessageFatal((LogMessageFatal *)va);
}

void re2::Prefilter::~Prefilter(re2::Prefilter *this)
{
  re2::Prefilter ***v2;
  re2::Prefilter **v3;
  unint64_t v4;

  v2 = (re2::Prefilter ***)*((_QWORD *)this + 1);
  if (v2)
  {
    v3 = v2[1];
    if (v3 != *v2)
    {
      v4 = 0;
      v3 = *v2;
      do
      {
        if (v3[v4])
        {
          re2::Prefilter::~Prefilter(v3[v4]);
          MEMORY[0x1C3BD4858]();
          v2 = (re2::Prefilter ***)*((_QWORD *)this + 1);
          v3 = *v2;
        }
        ++v4;
      }
      while (v4 < v2[1] - v3);
    }
    if (v3)
    {
      v2[1] = v3;
      operator delete(v3);
    }
    MEMORY[0x1C3BD4858](v2, 0x80C40D6874129);
    *((_QWORD *)this + 1) = 0;
  }
  if (*((char *)this + 39) < 0)
    operator delete(*((void **)this + 2));
}

uint64_t *std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  size_t v8;
  const void *v9;
  uint64_t **v10;
  _QWORD *v11;
  const void *v12;
  const void *v13;
  int v14;
  size_t v15;
  const void *v16;
  size_t v17;
  int v18;
  _BOOL4 v19;
  uint64_t *result;
  _BOOL4 v21;
  uint64_t *v22;
  std::string *v23;
  uint64_t *v24;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *((char *)a2 + 23);
    if (v7 >= 0)
      v8 = *((unsigned __int8 *)a2 + 23);
    else
      v8 = (size_t)a2[1];
    if (v7 >= 0)
      v9 = a2;
    else
      v9 = *a2;
    while (1)
    {
      while (1)
      {
        v10 = (uint64_t **)v5;
        v13 = (const void *)v5[4];
        v11 = v5 + 4;
        v12 = v13;
        v14 = *((char *)v11 + 23);
        if (v14 >= 0)
          v15 = *((unsigned __int8 *)v11 + 23);
        else
          v15 = v11[1];
        if (v14 >= 0)
          v16 = v11;
        else
          v16 = v12;
        if (v15 >= v8)
          v17 = v8;
        else
          v17 = v15;
        v18 = memcmp(v9, v16, v17);
        v19 = v8 < v15;
        if (v18)
          v19 = v18 < 0;
        if (!v19)
          break;
        v5 = *v10;
        v6 = v10;
        if (!*v10)
          goto LABEL_27;
      }
      result = (uint64_t *)memcmp(v16, v9, v17);
      v21 = v15 < v8;
      if ((_DWORD)result)
        v21 = (int)result < 0;
      if (!v21)
        break;
      v5 = v10[1];
      if (!v5)
      {
        v6 = v10 + 1;
        goto LABEL_27;
      }
    }
  }
  else
  {
    v10 = a1 + 1;
LABEL_27:
    v22 = (uint64_t *)operator new(0x38uLL);
    v23 = (std::string *)(v22 + 4);
    if (*(char *)(a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v23, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)&v23->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
      v22[6] = *(_QWORD *)(a3 + 16);
    }
    *v22 = 0;
    v22[1] = 0;
    v22[2] = (uint64_t)v10;
    *v6 = v22;
    v24 = (uint64_t *)**a1;
    if (v24)
    {
      *a1 = v24;
      v22 = *v6;
    }
    result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v22);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return result;
}

void sub_1C381F194(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void re2::Regexp::Walker<re2::Prefilter::Info *>::Reset(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22[8];
  __int128 v23;
  __int128 v24;
  int v25;
  uint64_t v26;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1)
  {
    if (*(_QWORD *)(v1 + 40))
    {
      LOBYTE(v20) = 0;
      v3 = MEMORY[0x1E0DE4FE0];
      v4 = MEMORY[0x1E0DE4FE0] + 64;
      v5 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
      v6 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
      v26 = MEMORY[0x1E0DE4FE0] + 64;
      v21 = v5;
      *(uint64_t *)((char *)&v22[-1] + *(_QWORD *)(v5 - 24)) = v6;
      v7 = (std::ios_base *)((char *)&v22[-1] + *(_QWORD *)(v21 - 24));
      std::ios_base::init(v7, v22);
      v7[1].__vftable = 0;
      v7[1].__fmtflags_ = -1;
      v21 = v3 + 24;
      v26 = v4;
      std::streambuf::basic_streambuf();
      v22[0] = MEMORY[0x1E0DE4FB8] + 16;
      v23 = 0u;
      v24 = 0u;
      v25 = 16;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Stack not empty.", 16);
      LogMessage::~LogMessage(&v20);
      v8 = *(_QWORD **)(a1 + 8);
      v9 = v8[5];
      while (v9)
      {
        v10 = v8[4];
        v11 = v9 + v10 - 1;
        v12 = v8[1];
        v13 = *(_QWORD *)(*(_QWORD *)(v12 + 8 * (v11 / 0x55)) + 48 * (v11 % 0x55) + 40);
        if (v13)
        {
          MEMORY[0x1C3BD4858](v13, 0x20C4093837F09);
          v8 = *(_QWORD **)(a1 + 8);
          v10 = v8[4];
          v12 = v8[1];
        }
        v14 = v8[2];
        v16 = v14 - v12;
        v15 = v16 == 0;
        v17 = 85 * (v16 >> 3) - 1;
        v18 = v8[5];
        if (v15)
          v19 = 0;
        else
          v19 = v17;
        v9 = v18 - 1;
        v8[5] = v18 - 1;
        if ((unint64_t)(v19 - (v18 + v10) + 1) >= 0xAA)
        {
          operator delete(*(void **)(v14 - 8));
          v8[2] -= 8;
          v8 = *(_QWORD **)(a1 + 8);
          v9 = v8[5];
        }
      }
    }
  }
}

void sub_1C381F374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  LogMessage::~LogMessage(&a9);
  _Unwind_Resume(a1);
}

void sub_1C381F388(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1C3BD4828](v1 + 120);
  _Unwind_Resume(a1);
}

uint64_t re2::Regexp::Walker<re2::Prefilter::Info *>::PostVisit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a4;
}

uint64_t re2::Prefilter::Prefilter(uint64_t a1, int a2)
{
  _QWORD *v3;
  int v4;

  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)a1 = a2;
  *(_OWORD *)(a1 + 8) = 0u;
  if ((a2 - 3) <= 1)
  {
    v3 = (_QWORD *)operator new();
    *v3 = 0;
    v3[1] = 0;
    v3[2] = 0;
    *(_QWORD *)(a1 + 8) = v3;
  }
  v4 = re2::alloc_id++;
  *(_DWORD *)(a1 + 44) = v4;
  return a1;
}

{
  _QWORD *v3;
  int v4;

  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)a1 = a2;
  *(_OWORD *)(a1 + 8) = 0u;
  if ((a2 - 3) <= 1)
  {
    v3 = (_QWORD *)operator new();
    *v3 = 0;
    v3[1] = 0;
    v3[2] = 0;
    *(_QWORD *)(a1 + 8) = v3;
  }
  v4 = re2::alloc_id++;
  *(_DWORD *)(a1 + 44) = v4;
  return a1;
}

void sub_1C381F440(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_1C381F4DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

re2::Prefilter *re2::Prefilter::Simplify(re2::Prefilter *this)
{
  int v1;
  uint64_t v2;
  re2::Prefilter **v3;
  uint64_t v4;
  re2::Prefilter *v5;

  v1 = *(_DWORD *)this;
  if ((*(_DWORD *)this - 3) <= 1)
  {
    while (1)
    {
      v2 = *((_QWORD *)this + 1);
      v3 = *(re2::Prefilter ***)v2;
      v4 = (uint64_t)(*(_QWORD *)(v2 + 8) - *(_QWORD *)v2) >> 3;
      if (v4 != 1)
        break;
      v5 = *v3;
      *(_QWORD *)(v2 + 8) = v3;
      re2::Prefilter::~Prefilter(this);
      MEMORY[0x1C3BD4858]();
      v1 = *(_DWORD *)v5;
      this = v5;
      if ((*(_DWORD *)v5 - 3) >= 2)
        return v5;
    }
    if (!v4)
      *(_DWORD *)this = v1 != 3;
  }
  return this;
}

re2::Prefilter *re2::Prefilter::And(re2::Prefilter *this, re2::Prefilter *a2, re2::Prefilter *a3)
{
  return re2::Prefilter::AndOr(3, this, a2);
}

re2::Prefilter *re2::Prefilter::Or(re2::Prefilter *this, re2::Prefilter *a2, re2::Prefilter *a3)
{
  return re2::Prefilter::AndOr(4, this, a2);
}

uint64_t re2::Prefilter::Info::Info(uint64_t this)
{
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)this = this + 8;
  *(_BYTE *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  return this;
}

{
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)this = this + 8;
  *(_BYTE *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  return this;
}

void re2::Prefilter::Info::~Info(re2::Prefilter::Info *this)
{
  re2::Prefilter *v2;

  v2 = (re2::Prefilter *)*((_QWORD *)this + 4);
  if (v2)
  {
    re2::Prefilter::~Prefilter(v2);
    MEMORY[0x1C3BD4858]();
  }
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(*((char **)this + 1));
}

{
  re2::Prefilter *v2;

  v2 = (re2::Prefilter *)*((_QWORD *)this + 4);
  if (v2)
  {
    re2::Prefilter::~Prefilter(v2);
    MEMORY[0x1C3BD4858]();
  }
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(*((char **)this + 1));
}

uint64_t re2::Prefilter::Info::TakeMatch(re2::Prefilter::Info *this)
{
  uint64_t result;

  if (*((_BYTE *)this + 24))
  {
    result = re2::Prefilter::OrStrings(this);
    *((_BYTE *)this + 24) = 0;
  }
  else
  {
    result = *((_QWORD *)this + 4);
  }
  *((_QWORD *)this + 4) = 0;
  return result;
}

void re2::Prefilter::Info::ToString(re2::Prefilter::Info *this@<X0>, uint64_t a2@<X8>)
{
  char *v3;
  _QWORD *v4;
  int v5;
  int v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  char *v9;
  char *v10;
  BOOL v11;
  re2::Prefilter *v12;

  if (!this)
  {
LABEL_22:
    *(_BYTE *)(a2 + 23) = 0;
    *(_BYTE *)a2 = 0;
    return;
  }
  if (!*((_BYTE *)this + 24))
  {
    v12 = (re2::Prefilter *)*((_QWORD *)this + 4);
    if (v12)
    {
      re2::Prefilter::DebugString(v12, a2);
      return;
    }
    goto LABEL_22;
  }
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v3 = (char *)this + 8;
  v4 = *(_QWORD **)this;
  if (*(re2::Prefilter::Info **)this != (re2::Prefilter::Info *)((char *)this + 8))
  {
    v5 = 0;
    do
    {
      if (v5)
        std::string::append((std::string *)a2, ",");
      v6 = *((char *)v4 + 55);
      if (v6 >= 0)
        v7 = (const std::string::value_type *)(v4 + 4);
      else
        v7 = (const std::string::value_type *)v4[4];
      if (v6 >= 0)
        v8 = *((unsigned __int8 *)v4 + 55);
      else
        v8 = v4[5];
      std::string::append((std::string *)a2, v7, v8);
      v9 = (char *)v4[1];
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = *(char **)v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (char *)v4[2];
          v11 = *(_QWORD *)v10 == (_QWORD)v4;
          v4 = v10;
        }
        while (!v11);
      }
      ++v5;
      v4 = v10;
    }
    while (v10 != v3);
  }
}

void sub_1C381F7B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void re2::Prefilter::DebugString(re2::Prefilter *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::ios_base *v8;
  re2::Prefilter **v9;
  const std::string::value_type *p_p;
  std::string::size_type v11;
  unint64_t v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  re2::Prefilter **v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  unint64_t v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  void *__p;
  std::string::size_type v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  int v26;
  uint64_t v27;

  if (this)
  {
    switch(*(_DWORD *)this)
    {
      case 0:
        *(_BYTE *)(a2 + 23) = 0;
        *(_BYTE *)a2 = 0;
        break;
      case 1:
        *(_BYTE *)(a2 + 23) = 12;
        strcpy((char *)a2, "*no-matches*");
        break;
      case 2:
        if (*((char *)this + 39) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)a2, *((const std::string::value_type **)this + 2), *((_QWORD *)this + 3));
        }
        else
        {
          *(_OWORD *)a2 = *((_OWORD *)this + 1);
          *(_QWORD *)(a2 + 16) = *((_QWORD *)this + 4);
        }
        break;
      case 3:
        *(_QWORD *)a2 = 0;
        *(_QWORD *)(a2 + 8) = 0;
        *(_QWORD *)(a2 + 16) = 0;
        v9 = (re2::Prefilter **)**((_QWORD **)this + 1);
        if (*(re2::Prefilter ***)(*((_QWORD *)this + 1) + 8) != v9)
        {
          re2::Prefilter::DebugString((uint64_t *)&__p, *v9);
          if (v23 >= 0)
            p_p = (const std::string::value_type *)&__p;
          else
            p_p = (const std::string::value_type *)__p;
          if (v23 >= 0)
            v11 = HIBYTE(v23);
          else
            v11 = v22;
          std::string::append((std::string *)a2, p_p, v11);
          if (SHIBYTE(v23) < 0)
            operator delete(__p);
          if (*(_QWORD *)(*((_QWORD *)this + 1) + 8) - **((_QWORD **)this + 1) >= 9uLL)
          {
            v12 = 1;
            do
            {
              std::string::append((std::string *)a2, " ");
              re2::Prefilter::DebugString((uint64_t *)&__p, *(re2::Prefilter **)(**((_QWORD **)this + 1) + 8 * v12));
              if (v23 >= 0)
                v13 = (const std::string::value_type *)&__p;
              else
                v13 = (const std::string::value_type *)__p;
              if (v23 >= 0)
                v14 = HIBYTE(v23);
              else
                v14 = v22;
              std::string::append((std::string *)a2, v13, v14);
              if (SHIBYTE(v23) < 0)
                operator delete(__p);
              ++v12;
            }
            while (v12 < (uint64_t)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) - **((_QWORD **)this + 1)) >> 3);
          }
        }
        break;
      case 4:
        *(_QWORD *)(a2 + 8) = 0;
        *(_QWORD *)(a2 + 16) = 0;
        *(_QWORD *)a2 = 0;
        *(_BYTE *)(a2 + 23) = 1;
        *(_BYTE *)a2 = 40;
        v15 = (re2::Prefilter **)**((_QWORD **)this + 1);
        if (*(re2::Prefilter ***)(*((_QWORD *)this + 1) + 8) != v15)
        {
          re2::Prefilter::DebugString((uint64_t *)&__p, *v15);
          if (v23 >= 0)
            v16 = (const std::string::value_type *)&__p;
          else
            v16 = (const std::string::value_type *)__p;
          if (v23 >= 0)
            v17 = HIBYTE(v23);
          else
            v17 = v22;
          std::string::append((std::string *)a2, v16, v17);
          if (SHIBYTE(v23) < 0)
            operator delete(__p);
          if (*(_QWORD *)(*((_QWORD *)this + 1) + 8) - **((_QWORD **)this + 1) >= 9uLL)
          {
            v18 = 1;
            do
            {
              std::string::append((std::string *)a2, "|");
              re2::Prefilter::DebugString((uint64_t *)&__p, *(re2::Prefilter **)(**((_QWORD **)this + 1) + 8 * v18));
              if (v23 >= 0)
                v19 = (const std::string::value_type *)&__p;
              else
                v19 = (const std::string::value_type *)__p;
              if (v23 >= 0)
                v20 = HIBYTE(v23);
              else
                v20 = v22;
              std::string::append((std::string *)a2, v19, v20);
              if (SHIBYTE(v23) < 0)
                operator delete(__p);
              ++v18;
            }
            while (v18 < (uint64_t)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) - **((_QWORD **)this + 1)) >> 3);
          }
        }
        std::string::append((std::string *)a2, ")");
        break;
      default:
        LOBYTE(__p) = 0;
        v4 = MEMORY[0x1E0DE4FE0];
        v5 = MEMORY[0x1E0DE4FE0] + 64;
        v6 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
        v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
        v27 = MEMORY[0x1E0DE4FE0] + 64;
        v22 = v6;
        *(std::string::size_type *)((char *)&v22 + *(_QWORD *)(v6 - 24)) = v7;
        v8 = (std::ios_base *)((char *)&v22 + *(_QWORD *)(v22 - 24));
        std::ios_base::init(v8, &v23);
        v8[1].__vftable = 0;
        v8[1].__fmtflags_ = -1;
        v22 = v4 + 24;
        v27 = v5;
        std::streambuf::basic_streambuf();
        v23 = MEMORY[0x1E0DE4FB8] + 16;
        v24 = 0u;
        v25 = 0u;
        v26 = 16;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"Bad op in Prefilter::DebugString: ", 34);
        std::ostream::operator<<();
        LogMessage::~LogMessage(&__p);
        re2::StringPrintf((re2 *)"op%d", (std::string *)a2, *(unsigned int *)this);
        break;
    }
  }
  else
  {
    *(_BYTE *)(a2 + 23) = 5;
    strcpy((char *)a2, "<nil>");
  }
}

void sub_1C381FBA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  if (a16 < 0)
  {
    operator delete(__p);
    if (*(char *)(v16 + 23) < 0)
    {
LABEL_5:
      operator delete(*(void **)v16);
      _Unwind_Resume(a1);
    }
  }
  else if (*(char *)(v16 + 23) < 0)
  {
    goto LABEL_5;
  }
  _Unwind_Resume(a1);
}

uint64_t re2::Prefilter::Info::Plus(re2::Prefilter::Info *this, re2::Prefilter::Info *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = operator new();
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)v3 = v3 + 8;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  if (*((_BYTE *)this + 24))
  {
    v4 = re2::Prefilter::OrStrings(this);
    *((_BYTE *)this + 24) = 0;
  }
  else
  {
    v4 = *((_QWORD *)this + 4);
  }
  *((_QWORD *)this + 4) = 0;
  *(_QWORD *)(v3 + 32) = v4;
  *(_BYTE *)(v3 + 24) = 0;
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(*((char **)this + 1));
  MEMORY[0x1C3BD4858](this, 0x1020C40D4209308);
  return v3;
}

uint64_t re2::Prefilter::Info::AnyChar(re2::Prefilter::Info *this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;

  v1 = operator new();
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 8) = 0;
  *(_QWORD *)v1 = v1 + 8;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 32) = 0;
  v2 = operator new();
  *(_DWORD *)v2 = 0;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  v3 = re2::alloc_id++;
  *(_DWORD *)(v2 + 44) = v3;
  *(_QWORD *)(v1 + 32) = v2;
  return v1;
}

uint64_t re2::Prefilter::Info::AnyMatch(re2::Prefilter::Info *this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;

  v1 = operator new();
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 8) = 0;
  *(_QWORD *)v1 = v1 + 8;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 32) = 0;
  v2 = operator new();
  *(_DWORD *)v2 = 0;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  v3 = re2::alloc_id++;
  *(_DWORD *)(v2 + 44) = v3;
  *(_QWORD *)(v1 + 32) = v2;
  return v1;
}

uint64_t re2::Prefilter::BuildInfo(re2::Prefilter *this, re2::Regexp *a2)
{
  unsigned int v3;
  int v4;
  _OWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  _DWORD *v19;
  int v20;
  int v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  re2::Prefilter *v50;
  uint64_t v51;
  void (**v53)();
  _QWORD *v54;
  int v55;
  int v56;
  uint64_t v57;
  char v58;

  v3 = *((unsigned __int8 *)this + 2);
  v55 = 0;
  v57 = 0;
  v4 = (v3 >> 5) & 1;
  v5 = (_OWORD *)operator new();
  *v5 = 0u;
  v5[1] = 0u;
  v5[2] = 0u;
  LOBYTE(v55) = 0;
  v53 = (void (**)())&off_1E7DB6DE0;
  v54 = v5;
  LOBYTE(v57) = v4;
  v56 = 100000;
  re2::Regexp::Walker<re2::Prefilter::Info *>::Reset((uint64_t)&v53);
  v6 = v54;
  v7 = v54[2];
  v8 = v54[1];
  if (v7 == v8)
    v9 = 0;
  else
    v9 = 85 * ((v7 - v8) >> 3) - 1;
  v10 = v54[5];
  v11 = v10 + v54[4];
  if (v9 == v11)
  {
    std::deque<re2::WalkState<re2::Prefilter::Info *>>::__add_back_capacity((uint64_t)v54);
    v8 = v6[1];
    v10 = v6[5];
    v11 = v10 + v6[4];
  }
  v12 = *(_QWORD *)(v8 + 8 * (v11 / 0x55)) + 48 * (v11 % 0x55);
  *(_QWORD *)v12 = this;
  *(_DWORD *)(v12 + 8) = -1;
  *(_QWORD *)(v12 + 16) = 0;
  *(_QWORD *)(v12 + 40) = 0;
  v6[5] = v10 + 1;
  while (1)
  {
    while (1)
    {
      v14 = v54[5] + v54[4] - 1;
      v15 = *(_QWORD *)(v54[1] + 8 * (v14 / 0x55));
      v16 = v14 % 0x55;
      v17 = (uint64_t *)(v15 + 48 * (v14 % 0x55));
      v18 = *v17;
      v20 = *((_DWORD *)v17 + 2);
      v19 = v17 + 1;
      if (v20 == -1)
      {
        v32 = v56--;
        if (v32 <= 0)
        {
          LOBYTE(v55) = 1;
          v33 = ((uint64_t (*)(void (***)(), uint64_t, _QWORD))v53[5])(&v53, v18, *(_QWORD *)(v15 + 48 * v16 + 16));
          goto LABEL_29;
        }
        v58 = 0;
        v33 = ((uint64_t (*)(void (***)(), uint64_t, _QWORD, char *))v53[2])(&v53, v18, *(_QWORD *)(v15 + 48 * v16 + 16), &v58);
        *(_QWORD *)(v15 + 48 * v16 + 24) = v33;
        if (v58)
          goto LABEL_29;
        *v19 = 0;
        v34 = v15 + 48 * v16;
        *(_QWORD *)(v34 + 40) = 0;
        v35 = (uint64_t *)(v34 + 40);
        if (*(_WORD *)(v18 + 6))
        {
          if (*(_WORD *)(v18 + 6) == 1)
            v36 = v15 + 48 * v16 + 32;
          else
            v36 = operator new[]();
          *v35 = v36;
        }
      }
      v21 = *(unsigned __int16 *)(v18 + 6);
      if (!*(_WORD *)(v18 + 6))
        break;
      v22 = (_QWORD *)(v18 + 8);
      if (v21 != 1)
        v22 = (_QWORD *)*v22;
      v23 = *v19;
      if ((int)v23 >= v21)
        goto LABEL_25;
      v24 = v54;
      v25 = v54[1];
      v26 = 85 * ((v54[2] - v25) >> 3) - 1;
      v27 = v22[(int)v23];
      v28 = *(_QWORD *)(v15 + 48 * v16 + 24);
      if (v54[2] == v25)
        v26 = 0;
      v29 = v54[5];
      v30 = v29 + v54[4];
      if (v26 == v30)
      {
        std::deque<re2::WalkState<re2::Prefilter::Info *>>::__add_back_capacity((uint64_t)v54);
        v25 = v24[1];
        v29 = v24[5];
        v30 = v29 + v24[4];
      }
      v31 = *(_QWORD *)(v25 + 8 * (v30 / 0x55)) + 48 * (v30 % 0x55);
      *(_QWORD *)v31 = v27;
      *(_DWORD *)(v31 + 8) = -1;
      *(_QWORD *)(v31 + 16) = v28;
      *(_QWORD *)(v31 + 40) = 0;
      v24[5] = v29 + 1;
    }
    v23 = *v19;
LABEL_25:
    v37 = v15 + 48 * v16;
    v39 = *(_QWORD *)(v37 + 40);
    v38 = (_QWORD *)(v37 + 40);
    v33 = ((uint64_t (*)(void (***)(), uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))v53[3])(&v53, v18, *(v38 - 3), *(v38 - 2), v39, v23);
    if (*(unsigned __int16 *)(v18 + 6) >= 2u && *v38)
      MEMORY[0x1C3BD4840](*v38, 0x20C8093837F09);
LABEL_29:
    v40 = v54;
    v41 = v54[2];
    v43 = v54[4];
    v42 = v54[5];
    if (v41 == v54[1])
      v44 = 0;
    else
      v44 = 85 * ((v41 - v54[1]) >> 3) - 1;
    v45 = v42 - 1;
    v54[5] = v42 - 1;
    if ((unint64_t)(v44 - (v42 + v43) + 1) >= 0xAA)
    {
      operator delete(*(void **)(v41 - 8));
      v40[2] -= 8;
      v40 = v54;
      v45 = v54[5];
    }
    if (!v45)
      break;
    v46 = v45 + v40[4] - 1;
    v47 = *(_QWORD *)(v40[1] + 8 * (v46 / 0x55));
    v48 = v46 % 0x55;
    v49 = *(_QWORD *)(v47 + 48 * v48 + 40);
    if (v49)
    {
      v13 = *(int *)(v47 + 48 * v48 + 8);
      *(_QWORD *)(v49 + 8 * v13) = v33;
    }
    else
    {
      v13 = v47 + 48 * v48;
      *(_QWORD *)(v13 + 32) = v33;
      LODWORD(v13) = *(_DWORD *)(v13 + 8);
    }
    *(_DWORD *)(v47 + 48 * v48 + 8) = v13 + 1;
  }
  if ((_BYTE)v55 && v33)
  {
    v50 = *(re2::Prefilter **)(v33 + 32);
    if (v50)
    {
      re2::Prefilter::~Prefilter(v50);
      MEMORY[0x1C3BD4858]();
    }
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(*(char **)(v33 + 8));
    MEMORY[0x1C3BD4858](v33, 0x1020C40D4209308);
    v33 = 0;
  }
  v53 = off_1E7DB6E48;
  re2::Regexp::Walker<re2::Prefilter::Info *>::Reset((uint64_t)&v53);
  if (v54)
  {
    v51 = std::deque<re2::WalkState<re2::Frag>>::~deque[abi:ne180100]((uint64_t)v54);
    MEMORY[0x1C3BD4858](v51, 0x1080C40BE8D5F09);
  }
  return v33;
}

void sub_1C3820278(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  re2::Prefilter::Info::Walker::~Walker((re2::Prefilter::Info::Walker *)va);
  _Unwind_Resume(a1);
}

void std::deque<re2::WalkState<re2::Prefilter::Info *>>::__add_back_capacity(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  void *v29;
  char *v30;
  char *v31;
  void *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  BOOL v40;
  int64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  unint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _OWORD *v52;
  unint64_t v53;
  char *v54;
  char *v55;
  unint64_t v56;
  int64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 *v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  unint64_t v78;
  uint64_t v79;
  __int128 *v80;
  _OWORD *v81;
  uint64_t v82;
  __int128 v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  __int128 *v87;
  _OWORD *v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  int64_t v96;
  unint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  __int128 *v102;
  _OWORD *v103;
  uint64_t v104;
  __int128 v105;
  uint64_t v106;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x55;
  v4 = v2 - 85;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_86:
      *(_QWORD *)v5 = v8;
      goto LABEL_87;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v34 = (v5 - v9) >> 2;
      if (v5 == v9)
        v34 = 1;
      if (!(v34 >> 61))
      {
        v35 = v34 >> 2;
        v36 = 8 * v34;
        v37 = (char *)operator new(8 * v34);
        v38 = &v37[8 * v35];
        v39 = &v37[v36];
        v41 = v5 - v7;
        v40 = v5 == v7;
        v5 = v38;
        if (!v40)
        {
          v5 = &v38[v41 & 0xFFFFFFFFFFFFFFF8];
          v42 = v41 - 8;
          if ((unint64_t)(v41 - 8) >= 0x38)
          {
            v84 = &v37[8 * v35];
            v43 = v84;
            if ((unint64_t)(v84 - v7) >= 0x20)
            {
              v85 = (v42 >> 3) + 1;
              v86 = 8 * (v85 & 0x3FFFFFFFFFFFFFFCLL);
              v43 = &v38[v86];
              v87 = (__int128 *)(v6 + 3);
              v88 = v84 + 16;
              v89 = v85 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v90 = *v87;
                *(v88 - 1) = *(v87 - 1);
                *v88 = v90;
                v87 += 2;
                v88 += 2;
                v89 -= 4;
              }
              while (v89);
              if (v85 == (v85 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_79;
              v7 += v86;
            }
          }
          else
          {
            v43 = &v37[8 * v35];
          }
          do
          {
            v91 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v43 = v91;
            v43 += 8;
          }
          while (v43 != v5);
        }
        goto LABEL_79;
      }
LABEL_104:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_86;
  }
  v18 = *(char **)(a1 + 16);
  v17 = *(char **)(a1 + 24);
  v20 = *(char **)a1;
  v19 = *(char **)(a1 + 8);
  v21 = v18 - v19;
  v22 = (v18 - v19) >> 3;
  v23 = (uint64_t)&v17[-*(_QWORD *)a1];
  if (v22 < (unint64_t)(v23 >> 3))
  {
    v24 = operator new(0xFF0uLL);
    v25 = v24;
    if (v17 != v18)
    {
      *(_QWORD *)v18 = v24;
LABEL_87:
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    if (v19 != v20)
    {
      v44 = v19;
      goto LABEL_85;
    }
    v69 = (v17 - v19) >> 2;
    if (v18 == v19)
      v69 = 1;
    if (v69 >> 61)
      goto LABEL_104;
    v70 = (v69 + 3) >> 2;
    v71 = 8 * v69;
    v72 = (char *)operator new(8 * v69);
    v44 = &v72[8 * v70];
    v73 = &v72[v71];
    v74 = v44;
    if (v18 != v19)
    {
      v74 = &v44[8 * v22];
      v75 = &v72[8 * v70];
      v76 = v19;
      if ((unint64_t)(v21 - 8) > 0x37)
      {
        v77 = &v72[8 * v70];
        v75 = v77;
        v76 = v19;
        if ((unint64_t)(v77 - v19) >= 0x20)
        {
          v78 = ((unint64_t)(v21 - 8) >> 3) + 1;
          v79 = 8 * (v78 & 0x3FFFFFFFFFFFFFFCLL);
          v75 = &v44[v79];
          v80 = (__int128 *)(v19 + 16);
          v81 = v77 + 16;
          v82 = v78 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v83 = *v80;
            *(v81 - 1) = *(v80 - 1);
            *v81 = v83;
            v80 += 2;
            v81 += 2;
            v82 -= 4;
          }
          while (v82);
          if (v78 == (v78 & 0x3FFFFFFFFFFFFFFCLL))
          {
            *(_QWORD *)a1 = v72;
            *(_QWORD *)(a1 + 8) = v44;
            *(_QWORD *)(a1 + 16) = v74;
            *(_QWORD *)(a1 + 24) = v73;
LABEL_84:
            operator delete(v19);
            v44 = *(char **)(a1 + 8);
LABEL_85:
            *((_QWORD *)v44 - 1) = v25;
            v7 = *(char **)(a1 + 8);
            v5 = *(char **)(a1 + 16);
            *(_QWORD *)(a1 + 8) = v7 - 8;
            v8 = *((_QWORD *)v7 - 1);
            *(_QWORD *)(a1 + 8) = v7;
            if (v5 != *(char **)(a1 + 24))
              goto LABEL_86;
            v9 = *(char **)a1;
            v10 = (uint64_t)&v7[-*(_QWORD *)a1];
            if ((unint64_t)v7 <= *(_QWORD *)a1)
            {
              v93 = (v5 - v9) >> 2;
              if (v5 == v9)
                v93 = 1;
              if (!(v93 >> 61))
              {
                v94 = v93 >> 2;
                v95 = 8 * v93;
                v37 = (char *)operator new(8 * v93);
                v38 = &v37[8 * v94];
                v39 = &v37[v95];
                v96 = v5 - v7;
                v40 = v5 == v7;
                v5 = v38;
                if (!v40)
                {
                  v5 = &v38[v96 & 0xFFFFFFFFFFFFFFF8];
                  v97 = v96 - 8;
                  if ((unint64_t)(v96 - 8) >= 0x38)
                  {
                    v99 = &v37[8 * v94];
                    v98 = v99;
                    if ((unint64_t)(v99 - v7) >= 0x20)
                    {
                      v100 = (v97 >> 3) + 1;
                      v101 = 8 * (v100 & 0x3FFFFFFFFFFFFFFCLL);
                      v98 = &v38[v101];
                      v102 = (__int128 *)(v7 + 16);
                      v103 = v99 + 16;
                      v104 = v100 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        v105 = *v102;
                        *(v103 - 1) = *(v102 - 1);
                        *v103 = v105;
                        v102 += 2;
                        v103 += 2;
                        v104 -= 4;
                      }
                      while (v104);
                      if (v100 == (v100 & 0x3FFFFFFFFFFFFFFCLL))
                        goto LABEL_79;
                      v7 += v101;
                    }
                  }
                  else
                  {
                    v98 = &v37[8 * v94];
                  }
                  do
                  {
                    v106 = *(_QWORD *)v7;
                    v7 += 8;
                    *(_QWORD *)v98 = v106;
                    v98 += 8;
                  }
                  while (v98 != v5);
                }
LABEL_79:
                *(_QWORD *)a1 = v37;
                *(_QWORD *)(a1 + 8) = v38;
                *(_QWORD *)(a1 + 16) = v5;
                *(_QWORD *)(a1 + 24) = v39;
                if (v9)
                {
                  operator delete(v9);
                  v5 = *(char **)(a1 + 16);
                }
                goto LABEL_86;
              }
              goto LABEL_104;
            }
            goto LABEL_5;
          }
          v76 = &v19[v79];
        }
      }
      do
      {
        v92 = *(_QWORD *)v76;
        v76 += 8;
        *(_QWORD *)v75 = v92;
        v75 += 8;
      }
      while (v75 != v74);
    }
    *(_QWORD *)a1 = v72;
    *(_QWORD *)(a1 + 8) = v44;
    *(_QWORD *)(a1 + 16) = v74;
    *(_QWORD *)(a1 + 24) = v73;
    if (!v19)
      goto LABEL_85;
    goto LABEL_84;
  }
  v26 = v23 >> 2;
  if (v17 == v20)
    v27 = 1;
  else
    v27 = v26;
  if (v27 >> 61)
    goto LABEL_104;
  v28 = (char *)operator new(8 * v27);
  v29 = operator new(0xFF0uLL);
  v30 = &v28[8 * v22];
  v31 = &v28[8 * v27];
  if (v22 == v27)
  {
    v32 = v29;
    if (v21 < 1)
    {
      if (v18 == v19)
        v45 = 1;
      else
        v45 = v21 >> 2;
      if (v45 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v30 = (char *)operator new(8 * v45);
      v31 = &v30[8 * v45];
      operator delete(v28);
      v19 = *(char **)(a1 + 8);
      v18 = *(char **)(a1 + 16);
      v28 = v30;
    }
    else
    {
      v33 = v22 + 2;
      if (v22 >= -1)
        v33 = v22 + 1;
      v30 -= 8 * (v33 >> 1);
    }
    v29 = v32;
  }
  *(_QWORD *)v30 = v29;
  v46 = v30 + 8;
  if (v18 != v19)
  {
    do
    {
      if (v30 != v28)
        goto LABEL_41;
      if (v46 < v31)
      {
        v49 = (v31 - v46) >> 3;
        if (v49 >= -1)
          v50 = v49 + 1;
        else
          v50 = v49 + 2;
        v51 = v50 >> 1;
        v30 = &v28[8 * (v50 >> 1)];
        v52 = v28;
        if (v46 != v28)
        {
          memmove(v30, v28, v46 - v28);
          v52 = v46;
        }
        v46 = (char *)v52 + 8 * v51;
        goto LABEL_41;
      }
      if (v31 == v28)
        v53 = 1;
      else
        v53 = (v31 - v28) >> 2;
      if (v53 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v54 = (char *)operator new(8 * v53);
      v55 = v54;
      v56 = (v53 + 3) >> 2;
      v30 = &v54[8 * v56];
      v57 = v46 - v28;
      v40 = v46 == v28;
      v46 = v30;
      if (!v40)
      {
        v46 = &v30[v57 & 0xFFFFFFFFFFFFFFF8];
        v58 = v57 - 8;
        v59 = &v54[8 * v56];
        v60 = v28;
        if (v58 >= 0x38)
        {
          v61 = 8 * v56;
          v59 = &v54[8 * v56];
          v60 = v28;
          if ((unint64_t)(v59 - v28) >= 0x20)
          {
            v62 = (v58 >> 3) + 1;
            v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
            v59 = &v30[v63];
            v64 = (__int128 *)(v28 + 16);
            v65 = &v54[v61 + 16];
            v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v67 = *v64;
              *((_OWORD *)v65 - 1) = *(v64 - 1);
              *(_OWORD *)v65 = v67;
              v64 += 2;
              v65 += 32;
              v66 -= 4;
            }
            while (v66);
            if (v62 == (v62 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_40;
            v60 = &v28[v63];
          }
        }
        do
        {
          v68 = *(_QWORD *)v60;
          v60 += 8;
          *(_QWORD *)v59 = v68;
          v59 += 8;
        }
        while (v59 != v46);
      }
LABEL_40:
      v31 = &v54[8 * v53];
      operator delete(v28);
      v28 = v55;
LABEL_41:
      v48 = *((_QWORD *)v18 - 1);
      v18 -= 8;
      *((_QWORD *)v30 - 1) = v48;
      v30 -= 8;
    }
    while (v18 != *(char **)(a1 + 8));
  }
  v47 = *(char **)a1;
  *(_QWORD *)a1 = v28;
  *(_QWORD *)(a1 + 8) = v30;
  *(_QWORD *)(a1 + 16) = v46;
  *(_QWORD *)(a1 + 24) = v31;
  if (v47)
    operator delete(v47);
}

void sub_1C3820890(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t re2::Prefilter::FromRegexp(re2::Prefilter *this, re2::Regexp *a2)
{
  re2::Regexp *v2;
  re2::Regexp *v3;
  uint64_t v4;
  uint64_t v5;

  if (!this)
    return 0;
  v2 = re2::Regexp::Simplify(this);
  v4 = re2::Prefilter::BuildInfo(v2, v3);
  re2::Regexp::Decref(v2);
  if (!v4)
    return 0;
  if (*(_BYTE *)(v4 + 24))
  {
    v5 = re2::Prefilter::OrStrings((_QWORD *)v4);
    *(_BYTE *)(v4 + 24) = 0;
  }
  else
  {
    v5 = *(_QWORD *)(v4 + 32);
  }
  *(_QWORD *)(v4 + 32) = 0;
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(*(char **)(v4 + 8));
  MEMORY[0x1C3BD4858](v4, 0x1020C40D4209308);
  return v5;
}

uint64_t re2::Prefilter::FromRE2(re2::Prefilter *this, const re2::RE2 *a2)
{
  re2::Regexp *v2;
  re2::Regexp *v3;
  re2::Regexp *v4;
  uint64_t v5;
  uint64_t v6;

  if (!this)
    return 0;
  v2 = (re2::Regexp *)*((_QWORD *)this + 10);
  if (!v2)
    return 0;
  v3 = re2::Regexp::Simplify(v2);
  v5 = re2::Prefilter::BuildInfo(v3, v4);
  re2::Regexp::Decref(v3);
  if (!v5)
    return 0;
  if (*(_BYTE *)(v5 + 24))
  {
    v6 = re2::Prefilter::OrStrings((_QWORD *)v5);
    *(_BYTE *)(v5 + 24) = 0;
  }
  else
  {
    v6 = *(_QWORD *)(v5 + 32);
  }
  *(_QWORD *)(v5 + 32) = 0;
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(*(char **)(v5 + 8));
  MEMORY[0x1C3BD4858](v5, 0x1020C40D4209308);
  return v6;
}

void sub_1C3821D20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C38222D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C3822564(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__33179(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__33180(uint64_t a1)
{

}

id getQueue()
{
  if (getQueue__pasOnceToken1 != -1)
    dispatch_once(&getQueue__pasOnceToken1, &__block_literal_global_33207);
  return (id)getQueue__pasExprOnceResult;
}

void __getQueue_block_invoke()
{
  void *v0;
  NSObject *v1;
  dispatch_queue_t v2;
  void *v3;

  v0 = (void *)MEMORY[0x1C3BD4F6C]();
  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v1 = objc_claimAutoreleasedReturnValue();
  v2 = dispatch_queue_create("SGDNotificationBroadcaster", v1);
  v3 = (void *)getQueue__pasExprOnceResult;
  getQueue__pasExprOnceResult = (uint64_t)v2;

  objc_autoreleasePoolPop(v0);
}

void ___notifyURLs_block_invoke()
{
  NSObject *v0;
  uint32_t v1;
  uint32_t v2;
  NSObject *v3;
  _DWORD v4[2];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  sgLogHandle();
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
  {
    LOWORD(v4[0]) = 0;
    _os_log_impl(&dword_1C3607000, v0, OS_LOG_TYPE_INFO, "SGDNotificationBroadcaster posting SGURL changed notification", (uint8_t *)v4, 2u);
  }

  ++_notificationCount;
  v1 = notify_post((const char *)*MEMORY[0x1E0D19DE0]);
  if (v1)
  {
    v2 = v1;
    sgLogHandle();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v4[0] = 67109120;
      v4[1] = v2;
      _os_log_error_impl(&dword_1C3607000, v3, OS_LOG_TYPE_ERROR, "SGDNotificationBroadcaster failed to post SGURL change notification: error %u", (uint8_t *)v4, 8u);
    }

  }
  atomic_store(0, _notifyURLs_pending);
}

void _notifyReminders()
{
  unsigned __int8 v0;
  void *v1;
  id v2;

  do
    v0 = __ldaxr(_notifyReminders_pending);
  while (__stlxr(1u, _notifyReminders_pending));
  if ((v0 & 1) == 0)
  {
    v1 = (void *)MEMORY[0x1E0D81598];
    getQueue();
    v2 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "runAsyncOnQueue:afterDelaySeconds:block:", v2, &__block_literal_global_16_33213, 0.3);

  }
}

void ___notifyReminders_block_invoke()
{
  NSObject *v0;
  __CFNotificationCenter *DistributedCenter;
  uint8_t v2[16];

  sgLogHandle();
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_1C3607000, v0, OS_LOG_TYPE_INFO, "SGDNotificationBroadcaster posting reminder notification", v2, 2u);
  }

  ++_notificationCount;
  DistributedCenter = CFNotificationCenterGetDistributedCenter();
  CFNotificationCenterPostNotification(DistributedCenter, CFSTR("com.apple.suggestions.remindersDidChange"), CFSTR("com.apple.suggestions.remindersDidChange"), 0, 1u);
  atomic_store(0, _notifyReminders_pending);
}

void _notifyEvents()
{
  unsigned __int8 v0;
  void *v1;
  id v2;

  do
    v0 = __ldaxr(_notifyEvents_pending);
  while (__stlxr(1u, _notifyEvents_pending));
  if ((v0 & 1) == 0)
  {
    v1 = (void *)MEMORY[0x1E0D81598];
    getQueue();
    v2 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "runAsyncOnQueue:afterDelaySeconds:block:", v2, &__block_literal_global_11_33217, 0.3);

  }
}

void ___notifyEvents_block_invoke()
{
  NSObject *v0;
  __CFNotificationCenter *DistributedCenter;
  uint8_t v2[16];

  sgLogHandle();
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_1C3607000, v0, OS_LOG_TYPE_INFO, "SGDNotificationBroadcaster posting event notification", v2, 2u);
  }

  ++_notificationCount;
  DistributedCenter = CFNotificationCenterGetDistributedCenter();
  CFNotificationCenterPostNotification(DistributedCenter, CFSTR("com.apple.suggestions.eventsDidChange"), CFSTR("com.apple.suggestions.eventsDidChange"), 0, 1u);
  atomic_store(0, _notifyEvents_pending);
}

void _notifyContacts()
{
  unsigned __int8 v0;
  void *v1;
  id v2;

  do
    v0 = __ldaxr(_notifyContacts_pending);
  while (__stlxr(1u, _notifyContacts_pending));
  if ((v0 & 1) == 0)
  {
    v1 = (void *)MEMORY[0x1E0D81598];
    getQueue();
    v2 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "runAsyncOnQueue:afterDelaySeconds:block:", v2, &__block_literal_global_13_33221, 0.3);

  }
}

void ___notifyContacts_block_invoke()
{
  NSObject *v0;
  __CFNotificationCenter *DistributedCenter;
  uint8_t v2[16];

  sgLogHandle();
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_1C3607000, v0, OS_LOG_TYPE_INFO, "SGDNotificationBroadcaster posting contact notification", v2, 2u);
  }

  ++_notificationCount;
  DistributedCenter = CFNotificationCenterGetDistributedCenter();
  CFNotificationCenterPostNotification(DistributedCenter, CFSTR("com.apple.suggestions.contactsDidChange"), CFSTR("com.apple.suggestions.contactsDidChange"), 0, 0);
  atomic_store(0, _notifyContacts_pending);
}

BOOL SGMIMetricsSubmodelAgeVectorReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  uint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int *v33;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      switch((v10 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 36) |= 8u;
          v18 = *v3;
          v19 = *(_QWORD *)(a2 + v18);
          if (v19 <= 0xFFFFFFFFFFFFFFFBLL && v19 + 4 <= *(_QWORD *)(a2 + *v4))
          {
            v20 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v19);
            *(_QWORD *)(a2 + v18) = v19 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v20 = 0;
          }
          v33 = &OBJC_IVAR___SGMIMetricsSubmodelAgeVector__personFromSenderAge;
          goto LABEL_56;
        case 2u:
          *(_BYTE *)(a1 + 36) |= 0x10u;
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 <= 0xFFFFFFFFFFFFFFFBLL && v22 + 4 <= *(_QWORD *)(a2 + *v4))
          {
            v20 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v22);
            *(_QWORD *)(a2 + v21) = v22 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v20 = 0;
          }
          v33 = &OBJC_IVAR___SGMIMetricsSubmodelAgeVector__personFromSenderInDyadicConversationAge;
          goto LABEL_56;
        case 3u:
          *(_BYTE *)(a1 + 36) |= 0x40u;
          v23 = *v3;
          v24 = *(_QWORD *)(a2 + v23);
          if (v24 <= 0xFFFFFFFFFFFFFFFBLL && v24 + 4 <= *(_QWORD *)(a2 + *v4))
          {
            v20 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v24);
            *(_QWORD *)(a2 + v23) = v24 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v20 = 0;
          }
          v33 = &OBJC_IVAR___SGMIMetricsSubmodelAgeVector__subjectContentAge;
          goto LABEL_56;
        case 4u:
          *(_BYTE *)(a1 + 36) |= 0x20u;
          v25 = *v3;
          v26 = *(_QWORD *)(a2 + v25);
          if (v26 <= 0xFFFFFFFFFFFFFFFBLL && v26 + 4 <= *(_QWORD *)(a2 + *v4))
          {
            v20 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v26);
            *(_QWORD *)(a2 + v25) = v26 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v20 = 0;
          }
          v33 = &OBJC_IVAR___SGMIMetricsSubmodelAgeVector__personToRecipientsAge;
          goto LABEL_56;
        case 5u:
          *(_BYTE *)(a1 + 36) |= 4u;
          v27 = *v3;
          v28 = *(_QWORD *)(a2 + v27);
          if (v28 <= 0xFFFFFFFFFFFFFFFBLL && v28 + 4 <= *(_QWORD *)(a2 + *v4))
          {
            v20 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v28);
            *(_QWORD *)(a2 + v27) = v28 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v20 = 0;
          }
          v33 = &OBJC_IVAR___SGMIMetricsSubmodelAgeVector__personCCRecipientsAge;
          goto LABEL_56;
        case 6u:
          *(_BYTE *)(a1 + 36) |= 2u;
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          if (v30 <= 0xFFFFFFFFFFFFFFFBLL && v30 + 4 <= *(_QWORD *)(a2 + *v4))
          {
            v20 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v30);
            *(_QWORD *)(a2 + v29) = v30 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v20 = 0;
          }
          v33 = &OBJC_IVAR___SGMIMetricsSubmodelAgeVector__domainFromSenderAge;
          goto LABEL_56;
        case 7u:
          *(_BYTE *)(a1 + 36) |= 1u;
          v31 = *v3;
          v32 = *(_QWORD *)(a2 + v31);
          if (v32 <= 0xFFFFFFFFFFFFFFFBLL && v32 + 4 <= *(_QWORD *)(a2 + *v4))
          {
            v20 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v32);
            *(_QWORD *)(a2 + v31) = v32 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v20 = 0;
          }
          v33 = &OBJC_IVAR___SGMIMetricsSubmodelAgeVector__conversationAge;
LABEL_56:
          *(_DWORD *)(a1 + *v33) = v20;
          goto LABEL_57;
        default:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            return 0;
LABEL_57:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          break;
      }
    }
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1C3825E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C3825F88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C38260D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C3826228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C3826378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C38264C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C382664C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C38267D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C3826954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C3826AD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C3826C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C3826DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C3826F64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C38270E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C382726C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C38273F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C3827574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C38276C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C3827814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C3827964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C3827AE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C3827C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C3827D90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C3827F14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C3828098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C382821C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C38283A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C3828524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C3828674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C38287C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C3828948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C3828ACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C3828C1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C3828D6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C3828EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C382900C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C382915C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__33489(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__33490(uint64_t a1)
{

}

void sub_1C3829E6C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void SGJSWatchdogTimerMakeVMWithTimeout(void *a1, double a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;

  v3 = a1;
  v4 = (void *)objc_msgSend(v3, "copy");

  v21 = 0;
  v22 = (uint64_t)&v21;
  v23 = 0x2020000000;
  v5 = getJSContextGroupCreateSymbolLoc(void)::ptr;
  v24 = getJSContextGroupCreateSymbolLoc(void)::ptr;
  if (!getJSContextGroupCreateSymbolLoc(void)::ptr)
  {
    v6 = JavaScriptCoreLibrary();
    v5 = dlsym(v6, "JSContextGroupCreate");
    *(_QWORD *)(v22 + 24) = v5;
    getJSContextGroupCreateSymbolLoc(void)::ptr = v5;
  }
  _Block_object_dispose(&v21, 8);
  if (!v5)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "JSContextGroupRef SGJSContextGroupCreate()");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "handleFailureInFunction:file:lineNumber:description:", v18, CFSTR("SGJSWatchdogTimer.mm"), 21, CFSTR("%s"), dlerror());

    __break(1u);
LABEL_19:
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void SGJSContextGroupSetExecutionTimeLimit(JSContextGroupRef, double, JSShouldTerminateCallback, void *)");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "handleFailureInFunction:file:lineNumber:description:", v20, CFSTR("SGJSWatchdogTimer.mm"), 22, CFSTR("%s"), dlerror());
    goto LABEL_21;
  }
  v7 = ((uint64_t (*)(void))v5)();
  if (!v7)
  {
    v10 = 0;
    goto LABEL_17;
  }
  v26 = 0;
  v27 = &v26;
  v28 = 0x2050000000;
  v8 = (void *)getJSVirtualMachineClass(void)::softClass;
  v29 = getJSVirtualMachineClass(void)::softClass;
  if (!getJSVirtualMachineClass(void)::softClass)
  {
    v21 = MEMORY[0x1E0C809B0];
    v22 = 3221225472;
    v23 = (uint64_t)___ZL24getJSVirtualMachineClassv_block_invoke;
    v24 = &unk_1E7DB7220;
    v25 = &v26;
    ___ZL24getJSVirtualMachineClassv_block_invoke((uint64_t)&v21);
    v8 = (void *)v27[3];
  }
  v9 = objc_retainAutorelease(v8);
  _Block_object_dispose(&v26, 8);
  objc_msgSend(v9, "virtualMachineWithContextGroupRef:", v7);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    v11 = (void *)MEMORY[0x1C3BD5158](v4);
    objc_setAssociatedObject(v10, "SGJSWatchdogTimerCallback", v11, (void *)0x301);

  }
  v21 = 0;
  v22 = (uint64_t)&v21;
  v23 = 0x2020000000;
  v12 = getJSContextGroupSetExecutionTimeLimitSymbolLoc(void)::ptr;
  v24 = getJSContextGroupSetExecutionTimeLimitSymbolLoc(void)::ptr;
  if (!getJSContextGroupSetExecutionTimeLimitSymbolLoc(void)::ptr)
  {
    v13 = JavaScriptCoreLibrary();
    v12 = dlsym(v13, "JSContextGroupSetExecutionTimeLimit");
    *(_QWORD *)(v22 + 24) = v12;
    getJSContextGroupSetExecutionTimeLimitSymbolLoc(void)::ptr = v12;
  }
  _Block_object_dispose(&v21, 8);
  if (!v12)
    goto LABEL_19;
  ((void (*)(uint64_t, void (*)(const OpaqueJSContext *, void *), void *, double))v12)(v7, shouldTerminateCallback, v4, a2);
  v21 = 0;
  v22 = (uint64_t)&v21;
  v23 = 0x2020000000;
  v14 = getJSContextGroupReleaseSymbolLoc(void)::ptr;
  v24 = getJSContextGroupReleaseSymbolLoc(void)::ptr;
  if (!getJSContextGroupReleaseSymbolLoc(void)::ptr)
  {
    v15 = JavaScriptCoreLibrary();
    v14 = dlsym(v15, "JSContextGroupRelease");
    *(_QWORD *)(v22 + 24) = v14;
    getJSContextGroupReleaseSymbolLoc(void)::ptr = v14;
  }
  _Block_object_dispose(&v21, 8);
  if (v14)
  {
    ((void (*)(uint64_t))v14)(v7);
LABEL_17:

    v16 = v10;
    return;
  }
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void SGJSContextGroupRelease(JSContextGroupRef)");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "handleFailureInFunction:file:lineNumber:description:", v20, CFSTR("SGJSWatchdogTimer.mm"), 23, CFSTR("%s"), dlerror());
LABEL_21:

  __break(1u);
}

void sub_1C382BAA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

void *JavaScriptCoreLibrary(void)
{
  void *v0;
  void *v2;
  void *v3;

  if (!JavaScriptCoreLibraryCore(char **)::frameworkLibrary)
    JavaScriptCoreLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
  v0 = (void *)JavaScriptCoreLibraryCore(char **)::frameworkLibrary;
  if (!JavaScriptCoreLibraryCore(char **)::frameworkLibrary)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *JavaScriptCoreLibrary()");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("SGJSWatchdogTimer.mm"), 17, CFSTR("%s"), 0);

    __break(1u);
    free(v2);
  }
  return v0;
}

void sub_1C382BC3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, _Unwind_Exception *exception_object)
{
  void *v11;

  _Unwind_Resume(a1);
}

void ___ZL24getJSVirtualMachineClassv_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  JavaScriptCoreLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("JSVirtualMachine");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getJSVirtualMachineClass(void)::softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getJSVirtualMachineClass()_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("SGJSWatchdogTimer.mm"), 18, CFSTR("Unable to find class %s"), "JSVirtualMachine");

    __break(1u);
  }
}

void sub_1C382BD24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void shouldTerminateCallback(const OpaqueJSContext *a1, void *a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void (**v9)(_QWORD, _QWORD);
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  void *v15;

  v12 = 0;
  v13 = &v12;
  v14 = 0x2020000000;
  v4 = getJSContextCreateBacktraceSymbolLoc(void)::ptr;
  v15 = getJSContextCreateBacktraceSymbolLoc(void)::ptr;
  if (!getJSContextCreateBacktraceSymbolLoc(void)::ptr)
  {
    v5 = JavaScriptCoreLibrary();
    v4 = dlsym(v5, "JSContextCreateBacktrace");
    v13[3] = (uint64_t)v4;
    getJSContextCreateBacktraceSymbolLoc(void)::ptr = v4;
  }
  _Block_object_dispose(&v12, 8);
  if (!v4)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "JSStringRef SGJSContextCreateBacktrace(JSContextRef, unsigned int)");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", v11, CFSTR("SGJSWatchdogTimer.mm"), 19, CFSTR("%s"), dlerror());
    goto LABEL_14;
  }
  v6 = (void *)((uint64_t (*)(const OpaqueJSContext *, uint64_t))v4)(a1, 100);
  if (v6)
  {
    v12 = 0;
    v13 = &v12;
    v14 = 0x2020000000;
    v7 = getJSStringCopyCFStringSymbolLoc(void)::ptr;
    v15 = getJSStringCopyCFStringSymbolLoc(void)::ptr;
    if (!getJSStringCopyCFStringSymbolLoc(void)::ptr)
    {
      v8 = JavaScriptCoreLibrary();
      v7 = dlsym(v8, "JSStringCopyCFString");
      v13[3] = (uint64_t)v7;
      getJSStringCopyCFStringSymbolLoc(void)::ptr = v7;
    }
    _Block_object_dispose(&v12, 8);
    if (v7)
    {
      v6 = (void *)((uint64_t (*)(_QWORD, void *))v7)(0, v6);
      goto LABEL_9;
    }
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "CFStringRef SGJSStringCopyCFString(CFAllocatorRef, JSStringRef)");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", v11, CFSTR("SGJSWatchdogTimer.mm"), 20, CFSTR("%s"), dlerror());
LABEL_14:

    __break(1u);
    return;
  }
LABEL_9:
  if (a2)
  {
    v9 = (void (**)(_QWORD, _QWORD))MEMORY[0x1C3BD5158](a2);
    ((void (**)(_QWORD, void *))v9)[2](v9, v6);

  }
}

void sub_1C382BF2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C382CB34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__33955(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__33956(uint64_t a1)
{

}

void sub_1C382D3C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *mallocRegexp()
{
  uint64_t v0;
  uint64_t *v1;
  NSObject *v2;
  void *v3;
  unsigned int v4;
  vm_address_t *v5;
  vm_address_t v6;
  char *v7;
  _DWORD *v8;
  int v9;
  int v10;
  char *v11;
  _DWORD *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  char *v18;
  void *v19;
  void *v20;
  unsigned int v21;
  uint8_t buf[16];

  os_unfair_lock_lock((os_unfair_lock_t)&lock);
  v0 = 0;
  v1 = &superblocks;
  do
  {
    if (!*v1 || *((int *)v1 + 3) >= 1)
    {
      v4 = v0;
      v5 = (vm_address_t *)((char *)&superblocks + 20 * v0);
      v6 = *v5;
      if (*v5)
      {
        v7 = (char *)&superblocks + 20 * v4;
        v10 = *((_DWORD *)v7 + 3);
        v8 = v7 + 12;
        v9 = v10;
        if (!v10)
        {
          v3 = 0;
          goto LABEL_14;
        }
        v11 = (char *)&superblocks + 20 * v4;
        v14 = *((_DWORD *)v11 + 2);
        v12 = v11 + 8;
        v13 = v14;
        v15 = v12[2];
        *v8 = v9 - 1;
        if (v14 != v15)
        {
          v16 = *(_DWORD *)(v6 + 40 * v13);
          goto LABEL_13;
        }
      }
      else
      {
        if (vm_allocate(*MEMORY[0x1E0C83DA0], v5, 0x82000uLL, 1))
        {
          objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
          v21 = v4;
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *superblockMalloc(int)");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v19, "handleFailureInFunction:file:lineNumber:description:", v20, CFSTR("SGChunkPool.m"), 43, CFSTR("Could not allocate memory for mallocRegexp"));

          v4 = v21;
        }
        v13 = 0;
        v18 = (char *)&superblocks + 20 * v4;
        *((_QWORD *)v18 + 1) = 0x33FE00000000;
        v12 = v18 + 8;
        v6 = *v5;
      }
      v16 = v13 + 1;
      *((_DWORD *)&superblocks + 5 * v4 + 4) = v13 + 1;
LABEL_13:
      *v12 = v16;
      v3 = (void *)(v6 + 40 * v13);
      goto LABEL_14;
    }
    ++v0;
    v1 = (uint64_t *)((char *)v1 + 20);
  }
  while (v0 != 197);
  sgLogHandle();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1C3607000, v2, OS_LOG_TYPE_ERROR, "Error: could not mallocRegexp!", buf, 2u);
  }

  v3 = malloc_type_malloc(0x28uLL, 0xB81C9F1AuLL);
LABEL_14:
  os_unfair_lock_unlock((os_unfair_lock_t)&lock);
  return v3;
}

void freeRegexp(void *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  NSObject *v6;
  unint64_t v7;
  char *v8;
  int v9;
  void *v10;
  void *v11;
  uint64_t *v12;
  uint8_t buf[4];
  void *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&lock);
    v2 = 0;
    v3 = &superblocks;
    while (1)
    {
      v4 = *v3;
      if (*v3 <= (unint64_t)a1 && *v3 + 532480 > (unint64_t)a1)
        break;
      ++v2;
      v3 = (uint64_t *)((char *)v3 + 20);
      if (v2 == 197)
      {
        sgLogHandle();
        v6 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134217984;
          v14 = a1;
          _os_log_error_impl(&dword_1C3607000, v6, OS_LOG_TYPE_ERROR, "Memory not allocated by mallocRegexp: %llu", buf, 0xCu);
        }

        free(a1);
        goto LABEL_15;
      }
    }
    v7 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a1 - v4) >> 3);
    v8 = (char *)&superblocks + 20 * v2;
    *(_DWORD *)(v4 + 40 * (int)v7) = *((_DWORD *)v8 + 2);
    v9 = *((_DWORD *)v8 + 3) + 1;
    *((_DWORD *)v8 + 2) = v7;
    *((_DWORD *)v8 + 3) = v9;
    if (v9 == 13312)
    {
      if (MEMORY[0x1C3BD5848](*MEMORY[0x1E0C83DA0], *v3, 532480))
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void freeRegexp(void *)");
        v12 = v3;
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", v11, CFSTR("SGChunkPool.m"), 94, CFSTR("Could not deallocate memory from mallocRegexp"));

        v3 = v12;
      }
      *v3 = 0;
    }
LABEL_15:
    os_unfair_lock_unlock((os_unfair_lock_t)&lock);
  }
}

uint64_t SGMIMetricsRegexSignatureStatReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  char v42;
  unsigned int v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  void *v47;
  char v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  uint64_t result;
  uint64_t v54;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((int)(v10 >> 3) > 100)
        break;
      if ((int)v17 <= 29)
      {
        if ((_DWORD)v17 == 10)
        {
          PBReaderReadString();
          v24 = objc_claimAutoreleasedReturnValue();
          v25 = 16;
        }
        else
        {
          if ((_DWORD)v17 != 20)
            goto LABEL_76;
          PBReaderReadString();
          v24 = objc_claimAutoreleasedReturnValue();
          v25 = 40;
        }
LABEL_68:
        v47 = *(void **)(a1 + v25);
        *(_QWORD *)(a1 + v25) = v24;

        goto LABEL_103;
      }
      if ((_DWORD)v17 == 30)
      {
        v48 = 0;
        v49 = 0;
        v20 = 0;
        *(_BYTE *)(a1 + 64) |= 0x10u;
        while (1)
        {
          v50 = *v3;
          v51 = *(_QWORD *)(a2 + v50);
          if (v51 == -1 || v51 >= *(_QWORD *)(a2 + *v4))
            break;
          v52 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v51);
          *(_QWORD *)(a2 + v50) = v51 + 1;
          v20 |= (unint64_t)(v52 & 0x7F) << v48;
          if ((v52 & 0x80) == 0)
            goto LABEL_99;
          v48 += 7;
          v14 = v49++ >= 9;
          if (v14)
          {
            LODWORD(v20) = 0;
            goto LABEL_101;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_99:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v20) = 0;
LABEL_101:
        v54 = 56;
LABEL_102:
        *(_DWORD *)(a1 + v54) = v20;
        goto LABEL_103;
      }
      if ((_DWORD)v17 != 40)
      {
LABEL_76:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_103;
      }
      v31 = 0;
      v32 = 0;
      v33 = 0;
      *(_BYTE *)(a1 + 64) |= 0x20u;
      while (1)
      {
        v34 = *v3;
        v35 = *(_QWORD *)(a2 + v34);
        if (v35 == -1 || v35 >= *(_QWORD *)(a2 + *v4))
          break;
        v36 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v35);
        *(_QWORD *)(a2 + v34) = v35 + 1;
        v33 |= (unint64_t)(v36 & 0x7F) << v31;
        if ((v36 & 0x80) == 0)
          goto LABEL_87;
        v31 += 7;
        v14 = v32++ >= 9;
        if (v14)
        {
          v33 = 0;
          goto LABEL_89;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_87:
      if (*(_BYTE *)(a2 + *v5))
        v33 = 0;
LABEL_89:
      *(_BYTE *)(a1 + 60) = v33 != 0;
LABEL_103:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    if ((int)v17 > 209)
    {
      switch((_DWORD)v17)
      {
        case 0xD2:
          v37 = 0;
          v38 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 64) |= 4u;
          while (1)
          {
            v39 = *v3;
            v40 = *(_QWORD *)(a2 + v39);
            if (v40 == -1 || v40 >= *(_QWORD *)(a2 + *v4))
              break;
            v41 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v40);
            *(_QWORD *)(a2 + v39) = v40 + 1;
            v20 |= (unint64_t)(v41 & 0x7F) << v37;
            if ((v41 & 0x80) == 0)
              goto LABEL_91;
            v37 += 7;
            v14 = v38++ >= 9;
            if (v14)
            {
              LODWORD(v20) = 0;
              goto LABEL_93;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_91:
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v20) = 0;
LABEL_93:
          v54 = 28;
          break;
        case 0xDC:
          v42 = 0;
          v43 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 64) |= 8u;
          while (1)
          {
            v44 = *v3;
            v45 = *(_QWORD *)(a2 + v44);
            if (v45 == -1 || v45 >= *(_QWORD *)(a2 + *v4))
              break;
            v46 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v45);
            *(_QWORD *)(a2 + v44) = v45 + 1;
            v20 |= (unint64_t)(v46 & 0x7F) << v42;
            if ((v46 & 0x80) == 0)
              goto LABEL_95;
            v42 += 7;
            v14 = v43++ >= 9;
            if (v14)
            {
              LODWORD(v20) = 0;
              goto LABEL_97;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_95:
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v20) = 0;
LABEL_97:
          v54 = 32;
          break;
        case 0x12C:
          v18 = 0;
          v19 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 64) |= 1u;
          while (1)
          {
            v21 = *v3;
            v22 = *(_QWORD *)(a2 + v21);
            if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
              break;
            v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
            *(_QWORD *)(a2 + v21) = v22 + 1;
            v20 |= (unint64_t)(v23 & 0x7F) << v18;
            if ((v23 & 0x80) == 0)
              goto LABEL_79;
            v18 += 7;
            v14 = v19++ >= 9;
            if (v14)
            {
              LODWORD(v20) = 0;
              goto LABEL_81;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_79:
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v20) = 0;
LABEL_81:
          v54 = 8;
          break;
        default:
          goto LABEL_76;
      }
      goto LABEL_102;
    }
    if ((_DWORD)v17 != 101)
    {
      if ((_DWORD)v17 != 200)
        goto LABEL_76;
      v26 = 0;
      v27 = 0;
      v20 = 0;
      *(_BYTE *)(a1 + 64) |= 2u;
      while (1)
      {
        v28 = *v3;
        v29 = *(_QWORD *)(a2 + v28);
        if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
          break;
        v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
        *(_QWORD *)(a2 + v28) = v29 + 1;
        v20 |= (unint64_t)(v30 & 0x7F) << v26;
        if ((v30 & 0x80) == 0)
          goto LABEL_83;
        v26 += 7;
        v14 = v27++ >= 9;
        if (v14)
        {
          LODWORD(v20) = 0;
          goto LABEL_85;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_83:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v20) = 0;
LABEL_85:
      v54 = 24;
      goto LABEL_102;
    }
    PBReaderReadData();
    v24 = objc_claimAutoreleasedReturnValue();
    v25 = 48;
    goto LABEL_68;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t SGMIMetricsInferenceAndGroundTruthReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  unint64_t v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  SGMIMetricsMissingElementPrediction *v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  uint64_t result;
  uint64_t v57;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v18 = v10 >> 3;
      if ((int)(v10 >> 3) > 29)
      {
        if ((int)v18 <= 50)
        {
          if ((_DWORD)v18 == 30)
          {
            v49 = 0;
            v50 = 0;
            v51 = 0;
            *(_BYTE *)(a1 + 76) |= 0x20u;
            while (1)
            {
              v52 = *v3;
              v53 = *(_QWORD *)(a2 + v52);
              v54 = v53 + 1;
              if (v53 == -1 || v54 > *(_QWORD *)(a2 + *v4))
                break;
              v55 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v53);
              *(_QWORD *)(a2 + v52) = v54;
              v51 |= (unint64_t)(v55 & 0x7F) << v49;
              if ((v55 & 0x80) == 0)
                goto LABEL_100;
              v49 += 7;
              v15 = v50++ >= 9;
              if (v15)
              {
                v51 = 0;
                goto LABEL_102;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_100:
            if (*(_BYTE *)(a2 + *v5))
              v51 = 0;
LABEL_102:
            *(_BYTE *)(a1 + 72) = v51 != 0;
            continue;
          }
          if ((_DWORD)v18 != 50)
          {
LABEL_80:
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
            continue;
          }
          v32 = objc_alloc_init(SGMIMetricsMissingElementPrediction);
          objc_msgSend((id)a1, "addMissingAttachment:", v32);
        }
        else
        {
          if ((_DWORD)v18 == 51)
          {
            v43 = 0;
            v44 = 0;
            v21 = 0;
            *(_BYTE *)(a1 + 76) |= 1u;
            while (1)
            {
              v45 = *v3;
              v46 = *(_QWORD *)(a2 + v45);
              v47 = v46 + 1;
              if (v46 == -1 || v47 > *(_QWORD *)(a2 + *v4))
                break;
              v48 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v46);
              *(_QWORD *)(a2 + v45) = v47;
              v21 |= (unint64_t)(v48 & 0x7F) << v43;
              if ((v48 & 0x80) == 0)
                goto LABEL_95;
              v43 += 7;
              v15 = v44++ >= 9;
              if (v15)
              {
                v21 = 0;
                goto LABEL_97;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_95:
            if (*(_BYTE *)(a2 + *v5))
              v21 = 0;
LABEL_97:
            v57 = 8;
LABEL_98:
            *(_QWORD *)(a1 + v57) = v21;
            continue;
          }
          if ((_DWORD)v18 != 60)
          {
            if ((_DWORD)v18 != 61)
              goto LABEL_80;
            v26 = 0;
            v27 = 0;
            v21 = 0;
            *(_BYTE *)(a1 + 76) |= 2u;
            while (1)
            {
              v28 = *v3;
              v29 = *(_QWORD *)(a2 + v28);
              v30 = v29 + 1;
              if (v29 == -1 || v30 > *(_QWORD *)(a2 + *v4))
                break;
              v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
              *(_QWORD *)(a2 + v28) = v30;
              v21 |= (unint64_t)(v31 & 0x7F) << v26;
              if ((v31 & 0x80) == 0)
                goto LABEL_87;
              v26 += 7;
              v15 = v27++ >= 9;
              if (v15)
              {
                v21 = 0;
                goto LABEL_89;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_87:
            if (*(_BYTE *)(a2 + *v5))
              v21 = 0;
LABEL_89:
            v57 = 16;
            goto LABEL_98;
          }
          v32 = objc_alloc_init(SGMIMetricsMissingElementPrediction);
          objc_msgSend((id)a1, "addMissingRecipient:", v32);
        }
        if (!PBReaderPlaceMark()
          || (SGMIMetricsMissingElementPredictionReadFrom((uint64_t)v32, a2) & 1) == 0)
        {
LABEL_107:

          return 0;
        }
      }
      else
      {
        if ((int)v18 > 19)
        {
          if ((_DWORD)v18 == 20)
          {
            *(_BYTE *)(a1 + 76) |= 0x10u;
            v33 = *v3;
            v34 = *(_QWORD *)(a2 + v33);
            if (v34 <= 0xFFFFFFFFFFFFFFFBLL && v34 + 4 <= *(_QWORD *)(a2 + *v4))
            {
              v35 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v34);
              *(_QWORD *)(a2 + v33) = v34 + 4;
            }
            else
            {
              *(_BYTE *)(a2 + *v5) = 1;
              v35 = 0;
            }
            *(_DWORD *)(a1 + 52) = v35;
            continue;
          }
          if ((_DWORD)v18 == 21)
          {
            v36 = 0;
            v37 = 0;
            v38 = 0;
            *(_BYTE *)(a1 + 76) |= 8u;
            while (1)
            {
              v39 = *v3;
              v40 = *(_QWORD *)(a2 + v39);
              v41 = v40 + 1;
              if (v40 == -1 || v41 > *(_QWORD *)(a2 + *v4))
                break;
              v42 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v40);
              *(_QWORD *)(a2 + v39) = v41;
              v38 |= (unint64_t)(v42 & 0x7F) << v36;
              if ((v42 & 0x80) == 0)
                goto LABEL_91;
              v36 += 7;
              v15 = v37++ >= 9;
              if (v15)
              {
                LODWORD(v38) = 0;
                goto LABEL_93;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_91:
            if (*(_BYTE *)(a2 + *v5))
              LODWORD(v38) = 0;
LABEL_93:
            *(_DWORD *)(a1 + 48) = v38;
            continue;
          }
          if ((_DWORD)v18 != 22)
            goto LABEL_80;
          v19 = 0;
          v20 = 0;
          v21 = 0;
          *(_BYTE *)(a1 + 76) |= 4u;
          while (1)
          {
            v22 = *v3;
            v23 = *(_QWORD *)(a2 + v22);
            v24 = v23 + 1;
            if (v23 == -1 || v24 > *(_QWORD *)(a2 + *v4))
              break;
            v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v24;
            v21 |= (unint64_t)(v25 & 0x7F) << v19;
            if ((v25 & 0x80) == 0)
              goto LABEL_83;
            v19 += 7;
            v15 = v20++ >= 9;
            if (v15)
            {
              v21 = 0;
              goto LABEL_85;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_83:
          if (*(_BYTE *)(a2 + *v5))
            v21 = 0;
LABEL_85:
          v57 = 24;
          goto LABEL_98;
        }
        if ((_DWORD)v18 == 1)
        {
          v32 = objc_alloc_init(SGMIMetricsTrialMetadata);
          objc_storeStrong((id *)(a1 + 64), v32);
          if (!PBReaderPlaceMark() || (SGMIMetricsTrialMetadataReadFrom((uint64_t)v32, a2) & 1) == 0)
            goto LABEL_107;
        }
        else
        {
          if ((_DWORD)v18 != 11)
            goto LABEL_80;
          v32 = objc_alloc_init(SGMIMetricsSubmodelsProbabilities);
          objc_storeStrong((id *)(a1 + 56), v32);
          if (!PBReaderPlaceMark() || !SGMIMetricsSubmodelsProbabilitiesReadFrom((uint64_t)v32, a2))
            goto LABEL_107;
        }
      }
      PBReaderRecallMark();

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1C3834A60(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void __setup_block_invoke()
{
  void *v0;
  dispatch_queue_t v1;
  void *v2;
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  __CFString *v11;
  id v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  const __CFString *v26;
  uint64_t v27;
  const __CFString *v28;
  uint64_t v29;
  const __CFString *v30;
  _QWORD v31[2];

  v31[1] = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0CB34D0], "bundleForClass:", objc_opt_class());
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = dispatch_queue_create("SGAsset-notifications", 0);
  v2 = (void *)notificationQueue;
  notificationQueue = (uint64_t)v1;

  v3 = objc_alloc(MEMORY[0x1E0D81528]);
  objc_msgSend(v0, "pathForResource:ofType:", CFSTR("Assets"), CFSTR("suggestionsassets"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v30 = CFSTR("SGAssetIdentifier");
  v31[0] = CFSTR("common");
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v31, &v30, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = MEMORY[0x1E0C81028];
  v7 = objc_msgSend(v3, "initWithAssetTypeDescriptorPath:defaultBundlePath:matchingKeysAndValues:notificationQueue:logHandle:enableAssetUpdates:", CFSTR("/System/Library/AssetTypeDescriptors/com.apple.MobileAsset.AssetTypeDescriptor.CoreSuggestionsAssets.plist"), v4, v5, notificationQueue, MEMORY[0x1E0C81028], 1);
  v8 = (void *)assetInstance;
  assetInstance = v7;

  objc_msgSend(MEMORY[0x1E0D19EC0], "defaultLanguage");
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = (void *)v9;
  if (v9)
    v11 = (__CFString *)v9;
  else
    v11 = CFSTR("unknown");
  objc_storeStrong((id *)&localeAssetIdentifier, v11);

  v12 = objc_alloc(MEMORY[0x1E0D81528]);
  objc_msgSend(v0, "pathForResource:ofType:", localeAssetIdentifier, CFSTR("suggestionsassets"));
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v28 = CFSTR("SGAssetIdentifier");
  v29 = localeAssetIdentifier;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v29, &v28, 1);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend(v12, "initWithAssetTypeDescriptorPath:defaultBundlePath:matchingKeysAndValues:notificationQueue:logHandle:enableAssetUpdates:", CFSTR("/System/Library/AssetTypeDescriptors/com.apple.MobileAsset.AssetTypeDescriptor.CoreSuggestionsAssets.plist"), v13, v14, notificationQueue, v6, 1);
  v16 = (void *)localeAssetInstance;
  localeAssetInstance = v15;

  objc_msgSend(MEMORY[0x1E0C99DC8], "currentLocale");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "localeIdentifier");
  v18 = objc_claimAutoreleasedReturnValue();
  v19 = (void *)regionAssetIdentifier;
  regionAssetIdentifier = v18;

  if (+[SGMessageEventDissector mobileAssetsEnabled](SGMessageEventDissector, "mobileAssetsEnabled"))
  {
    v20 = objc_alloc(MEMORY[0x1E0D81528]);
    objc_msgSend(v0, "pathForResource:ofType:", regionAssetIdentifier, CFSTR("suggestionsassets"));
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v26 = CFSTR("SGAssetIdentifier");
    v27 = regionAssetIdentifier;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v27, &v26, 1);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    LOBYTE(v25) = 1;
    v23 = objc_msgSend(v20, "initWithAssetTypeDescriptorPath:defaultBundlePath:matchingKeysAndValues:notificationQueue:logHandle:enableAssetUpdates:purgeObsoleteInstalledAssets:", CFSTR("/System/Library/AssetTypeDescriptors/com.apple.MobileAsset.AssetTypeDescriptor.CoreSuggestionsAssets.plist"), v21, v22, notificationQueue, MEMORY[0x1E0C81028], 1, v25);
    v24 = (void *)regionAssetInstance;
    regionAssetInstance = v23;

  }
}

void sub_1C383515C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C3835278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__34837(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__34838(uint64_t a1)
{

}

uint64_t SGM2HarvestCostBreakdownReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  void *v31;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v24 = 0;
        v25 = 0;
        v26 = 0;
        *(_BYTE *)(a1 + 24) |= 2u;
        while (1)
        {
          v27 = *v3;
          v28 = *(_QWORD *)(a2 + v27);
          if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            break;
          v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
          *(_QWORD *)(a2 + v27) = v28 + 1;
          v26 |= (unint64_t)(v29 & 0x7F) << v24;
          if ((v29 & 0x80) == 0)
            goto LABEL_43;
          v24 += 7;
          v14 = v25++ >= 9;
          if (v14)
          {
            v26 = 0;
            goto LABEL_45;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_43:
        if (*(_BYTE *)(a2 + *v5))
          v26 = 0;
LABEL_45:
        *(_BYTE *)(a1 + 20) = v26 != 0;
      }
      else if ((_DWORD)v17 == 2)
      {
        PBReaderReadString();
        v30 = objc_claimAutoreleasedReturnValue();
        v31 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v30;

      }
      else if ((_DWORD)v17 == 1)
      {
        v18 = 0;
        v19 = 0;
        v20 = 0;
        *(_BYTE *)(a1 + 24) |= 1u;
        while (1)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
            break;
          v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0)
            goto LABEL_39;
          v18 += 7;
          v14 = v19++ >= 9;
          if (v14)
          {
            LODWORD(v20) = 0;
            goto LABEL_41;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_39:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v20) = 0;
LABEL_41:
        *(_DWORD *)(a1 + 16) = v20;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1C383B644(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,__int128 buf,uint64_t a24,uint64_t a25,const __CFString *a26,const __CFString *a27,const __CFString *a28)
{
  uint64_t v28;
  void *v29;
  uint64_t v30;
  id v31;
  id v32;
  NSObject *v33;
  void *v34;
  void *v35;
  void *v36;

  if (!a2)
    _Unwind_Resume(a1);
  if (a2 != 2)
  {
    objc_begin_catch(a1);
    JUMPOUT(0x1C383B294);
  }
  v31 = objc_begin_catch(a1);
  if (os_variant_has_internal_diagnostics())
  {
    *(_BYTE *)(a20 + 24) = 0;
  }
  else if (*(_BYTE *)(a20 + 24))
  {
    sgLogHandle();
    v33 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf) = 138412290;
      *(_QWORD *)((char *)&buf + 4) = v28;
      _os_log_debug_impl(&dword_1C3607000, v33, OS_LOG_TYPE_DEBUG, "A bogus or corrupt journal file was found and has been cleaned up. Suggestd will relaunch and continue: %@", (uint8_t *)&buf, 0xCu);
    }

    v34 = (void *)MEMORY[0x1E0C99DA0];
    *(_QWORD *)(v30 - 120) = v28;
    a26 = CFSTR("fullPath");
    a27 = CFSTR("query");
    objc_msgSend(v29, "objectForKeyedSubscript:", CFSTR("__query"));
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    a28 = CFSTR("originalException");
    *(_QWORD *)(v30 - 112) = v35;
    *(_QWORD *)(v30 - 104) = v31;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v30 - 120, &a26, 3);
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v34, "exceptionWithName:reason:userInfo:", CFSTR("SGDatabaseJournalWillRecoverOnNextLaunch"), CFSTR("A bogus or corrupt journal file was found and has been cleaned up. Suggestd will relaunch and continue."), v36);
    v32 = (id)objc_claimAutoreleasedReturnValue();

LABEL_8:
    objc_exception_throw(v32);
  }
  v32 = objc_retainAutorelease(v31);
  goto LABEL_8;
}

void sub_1C383B804(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x1C383B6B8);
  }
  JUMPOUT(0x1C383B81CLL);
}

void sub_1C383BF68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL _sqliteErrorIndicatesDeviceBecameLocked(void *a1)
{
  void *v1;
  void *v2;
  _BOOL8 v3;

  objc_msgSend(a1, "userInfo");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("sqliteCode"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  if (v2)
    v3 = objc_msgSend(v2, "integerValue") == 778;
  else
    v3 = 0;

  return v3;
}

void sub_1C383C59C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t AnalyticsSendEvent()
{
  return MEMORY[0x1E0D15420]();
}

uint64_t AnalyticsSendEventLazy()
{
  return MEMORY[0x1E0D15428]();
}

uint64_t BiomeLibrary()
{
  return MEMORY[0x1E0D01E18]();
}

void CCHmac(CCHmacAlgorithm algorithm, const void *key, size_t keyLength, const void *data, size_t dataLength, void *macOut)
{
  MEMORY[0x1E0C801D8](*(_QWORD *)&algorithm, key, keyLength, data, dataLength, macOut);
}

unsigned __int8 *__cdecl CC_SHA1(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x1E0C80328](data, *(_QWORD *)&len, md);
}

unsigned __int8 *__cdecl CC_SHA256(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x1E0C80368](data, *(_QWORD *)&len, md);
}

int CC_SHA256_Final(unsigned __int8 *md, CC_SHA256_CTX *c)
{
  return MEMORY[0x1E0C80370](md, c);
}

int CC_SHA256_Init(CC_SHA256_CTX *c)
{
  return MEMORY[0x1E0C80378](c);
}

int CC_SHA256_Update(CC_SHA256_CTX *c, const void *data, CC_LONG len)
{
  return MEMORY[0x1E0C80380](c, data, *(_QWORD *)&len);
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  CFAbsoluteTime result;

  MEMORY[0x1E0C97C58]();
  return result;
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
  MEMORY[0x1E0C97CF8](theArray, value);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x1E0C97D38](allocator, capacity, callBacks);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1E0C97D60](theArray);
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1E0C97D98](theArray, idx);
}

void CFCharacterSetAddCharactersInString(CFMutableCharacterSetRef theSet, CFStringRef theString)
{
  MEMORY[0x1E0C982A8](theSet, theString);
}

CFCharacterSetRef CFCharacterSetCreateCopy(CFAllocatorRef alloc, CFCharacterSetRef theSet)
{
  return (CFCharacterSetRef)MEMORY[0x1E0C982B8](alloc, theSet);
}

CFMutableCharacterSetRef CFCharacterSetCreateMutable(CFAllocatorRef alloc)
{
  return (CFMutableCharacterSetRef)MEMORY[0x1E0C982C8](alloc);
}

CFCharacterSetRef CFCharacterSetCreateWithCharactersInString(CFAllocatorRef alloc, CFStringRef theString)
{
  return (CFCharacterSetRef)MEMORY[0x1E0C982E8](alloc, theString);
}

CFCharacterSetRef CFCharacterSetGetPredefined(CFCharacterSetPredefinedSet theSetIdentifier)
{
  return (CFCharacterSetRef)MEMORY[0x1E0C982F0](theSetIdentifier);
}

Boolean CFCharacterSetIsCharacterMember(CFCharacterSetRef theSet, UniChar theChar)
{
  return MEMORY[0x1E0C98320](theSet, theChar);
}

void CFCharacterSetUnion(CFMutableCharacterSetRef theSet, CFCharacterSetRef theOtherSet)
{
  MEMORY[0x1E0C98348](theSet, theOtherSet);
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C98500](theDict, key, value);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0C98550](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFStringRef CFErrorCopyDescription(CFErrorRef err)
{
  return (CFStringRef)MEMORY[0x1E0C98630](err);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1E0C98738](cf);
}

CFLocaleRef CFLocaleCopyCurrent(void)
{
  return (CFLocaleRef)MEMORY[0x1E0C98770]();
}

CFArrayRef CFLocaleCopyPreferredLanguages(void)
{
  return (CFArrayRef)MEMORY[0x1E0C98790]();
}

CFLocaleRef CFLocaleCreate(CFAllocatorRef allocator, CFLocaleIdentifier localeIdentifier)
{
  return (CFLocaleRef)MEMORY[0x1E0C98798](allocator, localeIdentifier);
}

CFLocaleRef CFLocaleGetSystem(void)
{
  return (CFLocaleRef)MEMORY[0x1E0C987F0]();
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1E0C988B8]();
}

CFNotificationCenterRef CFNotificationCenterGetDistributedCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1E0C988C8]();
}

void CFNotificationCenterPostNotification(CFNotificationCenterRef center, CFNotificationName name, const void *object, CFDictionaryRef userInfo, Boolean deliverImmediately)
{
  MEMORY[0x1E0C988E0](center, name, object, userInfo, deliverImmediately);
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98A40](key, applicationID);
}

CFPropertyListRef CFPropertyListCreateDeepCopy(CFAllocatorRef allocator, CFPropertyListRef propertyList, CFOptionFlags mutabilityOption)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98AB0](allocator, propertyList, mutabilityOption);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x1E0C98BC0](cf);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1E0C98BD0](cf);
}

void CFSetAddValue(CFMutableSetRef theSet, const void *value)
{
  MEMORY[0x1E0C98D70](theSet, value);
}

Boolean CFSetContainsValue(CFSetRef theSet, const void *value)
{
  return MEMORY[0x1E0C98D80](theSet, value);
}

CFMutableSetRef CFSetCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFSetCallBacks *callBacks)
{
  return (CFMutableSetRef)MEMORY[0x1E0C98D98](allocator, capacity, callBacks);
}

void CFSetRemoveValue(CFMutableSetRef theSet, const void *value)
{
  MEMORY[0x1E0C98DE0](theSet, value);
}

void CFStringAppend(CFMutableStringRef theString, CFStringRef appendedString)
{
  MEMORY[0x1E0C98ED8](theString, appendedString);
}

void CFStringCapitalize(CFMutableStringRef theString, CFLocaleRef locale)
{
  MEMORY[0x1E0C98F00](theString, locale);
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1E0C98F10](theString1, theString2, compareOptions);
}

unint64_t CFStringConvertEncodingToNSStringEncoding(CFStringEncoding encoding)
{
  return MEMORY[0x1E0C98F30](*(_QWORD *)&encoding);
}

CFStringEncoding CFStringConvertIANACharSetNameToEncoding(CFStringRef theString)
{
  return MEMORY[0x1E0C98F40](theString);
}

CFDataRef CFStringCreateExternalRepresentation(CFAllocatorRef alloc, CFStringRef theString, CFStringEncoding encoding, UInt8 lossByte)
{
  return (CFDataRef)MEMORY[0x1E0C98F80](alloc, theString, *(_QWORD *)&encoding, lossByte);
}

CFMutableStringRef CFStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength)
{
  return (CFMutableStringRef)MEMORY[0x1E0C98F90](alloc, maxLength);
}

CFMutableStringRef CFStringCreateMutableCopy(CFAllocatorRef alloc, CFIndex maxLength, CFStringRef theString)
{
  return (CFMutableStringRef)MEMORY[0x1E0C98F98](alloc, maxLength, theString);
}

CFStringRef CFStringCreateWithBytesNoCopy(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation, CFAllocatorRef contentsDeallocator)
{
  return (CFStringRef)MEMORY[0x1E0C98FC8](alloc, bytes, numBytes, *(_QWORD *)&encoding, isExternalRepresentation, contentsDeallocator);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1E0C98FD0](alloc, cStr, *(_QWORD *)&encoding);
}

CFStringRef CFStringCreateWithSubstring(CFAllocatorRef alloc, CFStringRef str, CFRange range)
{
  return (CFStringRef)MEMORY[0x1E0C99030](alloc, str, range.location, range.length);
}

void CFStringDelete(CFMutableStringRef theString, CFRange range)
{
  MEMORY[0x1E0C99038](theString, range.location, range.length);
}

Boolean CFStringFindWithOptions(CFStringRef theString, CFStringRef stringToFind, CFRange rangeToSearch, CFStringCompareFlags searchOptions, CFRange *result)
{
  return MEMORY[0x1E0C99068](theString, stringToFind, rangeToSearch.location, rangeToSearch.length, searchOptions, result);
}

CFIndex CFStringGetBytes(CFStringRef theString, CFRange range, CFStringEncoding encoding, UInt8 lossByte, Boolean isExternalRepresentation, UInt8 *buffer, CFIndex maxBufLen, CFIndex *usedBufLen)
{
  return MEMORY[0x1E0C99080](theString, range.location, range.length, *(_QWORD *)&encoding, lossByte, isExternalRepresentation, buffer, maxBufLen);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x1E0C990A0](theString, *(_QWORD *)&encoding);
}

UniChar CFStringGetCharacterAtIndex(CFStringRef theString, CFIndex idx)
{
  return MEMORY[0x1E0C990B0](theString, idx);
}

void CFStringGetCharacters(CFStringRef theString, CFRange range, UniChar *buffer)
{
  MEMORY[0x1E0C990C0](theString, range.location, range.length, buffer);
}

const UniChar *__cdecl CFStringGetCharactersPtr(CFStringRef theString)
{
  return (const UniChar *)MEMORY[0x1E0C990C8](theString);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x1E0C99100](theString);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x1E0C99170]();
}

void CFStringLowercase(CFMutableStringRef theString, CFLocaleRef locale)
{
  MEMORY[0x1E0C991D0](theString, locale);
}

void CFStringNormalize(CFMutableStringRef theString, CFStringNormalizationForm theForm)
{
  MEMORY[0x1E0C991D8](theString, theForm);
}

CFStringTokenizerTokenType CFStringTokenizerAdvanceToNextToken(CFStringTokenizerRef tokenizer)
{
  return MEMORY[0x1E0C99208](tokenizer);
}

CFStringTokenizerRef CFStringTokenizerCreate(CFAllocatorRef alloc, CFStringRef string, CFRange range, CFOptionFlags options, CFLocaleRef locale)
{
  return (CFStringTokenizerRef)MEMORY[0x1E0C99220](alloc, string, range.location, range.length, options, locale);
}

CFRange CFStringTokenizerGetCurrentTokenRange(CFStringTokenizerRef tokenizer)
{
  CFIndex v1;
  CFIndex v2;
  CFRange result;

  v1 = MEMORY[0x1E0C99230](tokenizer);
  result.length = v2;
  result.location = v1;
  return result;
}

void CFStringTokenizerSetString(CFStringTokenizerRef tokenizer, CFStringRef string, CFRange range)
{
  MEMORY[0x1E0C99240](tokenizer, string, range.location, range.length);
}

void CFStringTrimWhitespace(CFMutableStringRef theString)
{
  MEMORY[0x1E0C99258](theString);
}

CFTimeZoneRef CFTimeZoneCopyDefault(void)
{
  return (CFTimeZoneRef)MEMORY[0x1E0C99270]();
}

CFTimeZoneRef CFTimeZoneCreateWithTimeIntervalFromGMT(CFAllocatorRef allocator, CFTimeInterval ti)
{
  return (CFTimeZoneRef)MEMORY[0x1E0C99290](allocator, ti);
}

uint64_t CKCanRetryForError()
{
  return MEMORY[0x1E0C946D8]();
}

uint64_t DDAddressResultCanBeMergedWith()
{
  return MEMORY[0x1E0D1CA20]();
}

uint64_t DDForce24HrsFormatProcessWideForExtraction()
{
  return MEMORY[0x1E0D1CBD8]();
}

uint64_t DDResultCopyExtractedDateFromReferenceDate()
{
  return MEMORY[0x1E0D1CC10]();
}

uint64_t DDResultCopyExtractedDateFromReferenceDateWithLocale()
{
  return MEMORY[0x1E0D1CC18]();
}

uint64_t DDResultCopyExtractedStartDateEndDateWithLocale()
{
  return MEMORY[0x1E0D1CC28]();
}

uint64_t DDResultCopyExtractedURL()
{
  return MEMORY[0x1E0D1CC30]();
}

uint64_t DDResultCopyFullAddressComponents()
{
  return MEMORY[0x1E0D1CC40]();
}

uint64_t DDResultCopyIMScreenNameValue()
{
  return MEMORY[0x1E0D1CC48]();
}

uint64_t DDResultCopyMailValue()
{
  return MEMORY[0x1E0D1CC50]();
}

uint64_t DDResultCopyPhoneValue()
{
  return MEMORY[0x1E0D1CC58]();
}

uint64_t DDResultGetCategory()
{
  return MEMORY[0x1E0D1CC90]();
}

uint64_t DDResultGetParsecDomain()
{
  return MEMORY[0x1E0D1CCA8]();
}

uint64_t DDResultGetParsecUUID()
{
  return MEMORY[0x1E0D1CCB8]();
}

uint64_t DDResultGetRange()
{
  return MEMORY[0x1E0D1CCD0]();
}

uint64_t DDResultGetRangeForURLification()
{
  return MEMORY[0x1E0D1CCD8]();
}

uint64_t DDResultGetSubResults()
{
  return MEMORY[0x1E0D1CCF0]();
}

uint64_t DDResultGetSubresultWithType()
{
  return MEMORY[0x1E0D1CCF8]();
}

uint64_t DDResultGetType()
{
  return MEMORY[0x1E0D1CD00]();
}

uint64_t DDResultGetValue()
{
  return MEMORY[0x1E0D1CD08]();
}

uint64_t DDResultHasType()
{
  return MEMORY[0x1E0D1CD18]();
}

uint64_t DDResultTimeIsApprox()
{
  return MEMORY[0x1E0D1CD58]();
}

uint64_t DDScannerCopyResultsWithOptions()
{
  return MEMORY[0x1E0D1CDA8]();
}

uint64_t DDScannerCreate()
{
  return MEMORY[0x1E0D1CDB0]();
}

uint64_t DDScannerCreateWithLocale()
{
  return MEMORY[0x1E0D1CDC0]();
}

uint64_t DDScannerEnableOptionalSource()
{
  return MEMORY[0x1E0D1CDD0]();
}

uint64_t DDScannerReset()
{
  return MEMORY[0x1E0D1CDE0]();
}

uint64_t DDScannerScanStringWithRange()
{
  return MEMORY[0x1E0D1CDF0]();
}

uint64_t DDScannerSetScannerTimeout()
{
  return MEMORY[0x1E0D1CE10]();
}

uint64_t HVBatteryMonitoringStart()
{
  return MEMORY[0x1E0D80F40]();
}

uint64_t HVDataSourceFileProtection()
{
  return MEMORY[0x1E0D80F48]();
}

uint64_t HVDataSourceForBundleIdentifier()
{
  return MEMORY[0x1E0D80F50]();
}

uint64_t HVIsConnectedToPower()
{
  return MEMORY[0x1E0D80F60]();
}

uint64_t ITSCopyFTSTableCreateStatementUsingCurrentLanguage()
{
  return MEMORY[0x1E0D3EF78]();
}

uint64_t ITSCopyUserLanguage()
{
  return MEMORY[0x1E0D3EF80]();
}

uint64_t ITSTokenListCopyEscapedTokenAtIndex()
{
  return MEMORY[0x1E0D3EF90]();
}

uint64_t ITSTokenListCreate()
{
  return MEMORY[0x1E0D3EF98]();
}

uint64_t ITSTokenListGetCount()
{
  return MEMORY[0x1E0D3EFA0]();
}

uint64_t ITSTokenListPopulateFromString()
{
  return MEMORY[0x1E0D3EFA8]();
}

uint64_t LXEntryCopyString()
{
  return MEMORY[0x1E0D435C8]();
}

uint64_t LXEntryGetMetaFlags()
{
  return MEMORY[0x1E0D43600]();
}

uint64_t LXEntryGetTokenID()
{
  return MEMORY[0x1E0D43628]();
}

uint64_t LXLexiconCopyEntryForTokenID()
{
  return MEMORY[0x1E0D43678]();
}

uint64_t LXLexiconCreate()
{
  return MEMORY[0x1E0D43690]();
}

uint64_t LXLexiconEnumerateEntriesForString()
{
  return MEMORY[0x1E0D436B8]();
}

uint64_t NLTaggerCopyTagForCurrentToken()
{
  return MEMORY[0x1E0D17248]();
}

uint64_t NLTaggerCreate()
{
  return MEMORY[0x1E0D17250]();
}

uint64_t NLTaggerEnumerateTokens()
{
  return MEMORY[0x1E0D17258]();
}

uint64_t NLTaggerSetLocaleForRange()
{
  return MEMORY[0x1E0D17270]();
}

uint64_t NLTaggerSetString()
{
  return MEMORY[0x1E0D17278]();
}

NSArray *__cdecl NSAllMapTableKeys(NSMapTable *table)
{
  return (NSArray *)MEMORY[0x1E0CB2850](table);
}

Class NSClassFromString(NSString *aClassName)
{
  return (Class)MEMORY[0x1E0CB28A0](aClassName);
}

NSRange NSIntersectionRange(NSRange range1, NSRange range2)
{
  NSUInteger v2;
  NSUInteger v3;
  NSRange result;

  v2 = MEMORY[0x1E0CB2C58](range1.location, range1.length, range2.location, range2.length);
  result.length = v3;
  result.location = v2;
  return result;
}

void NSLog(NSString *format, ...)
{
  MEMORY[0x1E0CB2D88](format);
}

NSUInteger NSPageSize(void)
{
  return MEMORY[0x1E0CB2FE8]();
}

NSRange NSRangeFromString(NSString *aString)
{
  NSUInteger v1;
  NSUInteger v2;
  NSRange result;

  v1 = MEMORY[0x1E0CB3128](aString);
  result.length = v2;
  result.location = v1;
  return result;
}

SEL NSSelectorFromString(NSString *aSelectorName)
{
  return (SEL)MEMORY[0x1E0CB3190](aSelectorName);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x1E0CB3200](aClass);
}

NSString *__cdecl NSStringFromRange(NSRange range)
{
  return (NSString *)MEMORY[0x1E0CB3220](range.location, range.length);
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return (NSString *)MEMORY[0x1E0CB3230](aSelector);
}

NSRange NSUnionRange(NSRange range1, NSRange range2)
{
  NSUInteger v2;
  NSUInteger v3;
  NSRange result;

  v2 = MEMORY[0x1E0CB3400](range1.location, range1.length, range2.location, range2.length);
  result.length = v3;
  result.location = v2;
  return result;
}

uint64_t PBDataWriterWriteBOOLField()
{
  return MEMORY[0x1E0D82C10]();
}

uint64_t PBDataWriterWriteDataField()
{
  return MEMORY[0x1E0D82C28]();
}

uint64_t PBDataWriterWriteDoubleField()
{
  return MEMORY[0x1E0D82C38]();
}

uint64_t PBDataWriterWriteFloatField()
{
  return MEMORY[0x1E0D82C50]();
}

uint64_t PBDataWriterWriteInt32Field()
{
  return MEMORY[0x1E0D82C58]();
}

uint64_t PBDataWriterWriteSint64Field()
{
  return MEMORY[0x1E0D82C90]();
}

uint64_t PBDataWriterWriteStringField()
{
  return MEMORY[0x1E0D82C98]();
}

uint64_t PBDataWriterWriteSubmessage()
{
  return MEMORY[0x1E0D82CB0]();
}

uint64_t PBDataWriterWriteUint32Field()
{
  return MEMORY[0x1E0D82CB8]();
}

uint64_t PBDataWriterWriteUint64Field()
{
  return MEMORY[0x1E0D82CC0]();
}

uint64_t PBReaderPlaceMark()
{
  return MEMORY[0x1E0D82CE0]();
}

uint64_t PBReaderReadData()
{
  return MEMORY[0x1E0D82CF0]();
}

uint64_t PBReaderReadString()
{
  return MEMORY[0x1E0D82D00]();
}

uint64_t PBReaderRecallMark()
{
  return MEMORY[0x1E0D82D10]();
}

uint64_t PBReaderSkipValueWithTag()
{
  return MEMORY[0x1E0D82D28]();
}

uint64_t PBRepeatedInt32Add()
{
  return MEMORY[0x1E0D82DD8]();
}

uint64_t PBRepeatedInt32Clear()
{
  return MEMORY[0x1E0D82DE0]();
}

uint64_t PBRepeatedInt32Copy()
{
  return MEMORY[0x1E0D82DE8]();
}

uint64_t PBRepeatedInt32Hash()
{
  return MEMORY[0x1E0D82DF0]();
}

uint64_t PBRepeatedInt32IsEqual()
{
  return MEMORY[0x1E0D82DF8]();
}

uint64_t PBRepeatedInt32Set()
{
  return MEMORY[0x1E0D82E08]();
}

uint64_t PLLogRegisteredEvent()
{
  return MEMORY[0x1E0D7FE28]();
}

uint64_t PMLBuildChunkFile()
{
  return MEMORY[0x1E0D81088]();
}

uint64_t PMLReadChunkFile()
{
  return MEMORY[0x1E0D81098]();
}

uint64_t SGDelimitedStringsDeserialize()
{
  return MEMORY[0x1E0D19A80]();
}

uint64_t SGDelimitedStringsDeserializeSet()
{
  return MEMORY[0x1E0D19A88]();
}

uint64_t SGDelimitedStringsDeserializeWithBlock()
{
  return MEMORY[0x1E0D19A90]();
}

uint64_t SGDelimitedStringsSerialize()
{
  return MEMORY[0x1E0D19A98]();
}

uint64_t SGDelimitedStringsSerializeArray()
{
  return MEMORY[0x1E0D19AA0]();
}

uint64_t SGEntityTypeDescription()
{
  return MEMORY[0x1E0D19AA8]();
}

uint64_t SGEntityTypeHasSnippetData()
{
  return MEMORY[0x1E0D19AB0]();
}

uint64_t SGEntityTypeIsContact()
{
  return MEMORY[0x1E0D19AB8]();
}

uint64_t SGEntityTypeIsContactDetail()
{
  return MEMORY[0x1E0D19AC0]();
}

uint64_t SGEntityTypeIsCurated()
{
  return MEMORY[0x1E0D19AC8]();
}

uint64_t SGEntityTypeIsDelivery()
{
  return MEMORY[0x1E0D19AD0]();
}

uint64_t SGEntityTypeIsEvent()
{
  return MEMORY[0x1E0D19AD8]();
}

uint64_t SGEntityTypeIsMessage()
{
  return MEMORY[0x1E0D19AE0]();
}

uint64_t SGExtractionTypeDescription()
{
  return MEMORY[0x1E0D19AF0]();
}

uint64_t SGNormalizeEmailAddress()
{
  return MEMORY[0x1E0D19D08]();
}

uint64_t SGNormalizePhoneNumber()
{
  return MEMORY[0x1E0D19D10]();
}

uint64_t SGNormalizePhoneNumberCached()
{
  return MEMORY[0x1E0D19D18]();
}

uint64_t SGParseNamedEmailAddress()
{
  return MEMORY[0x1E0D19D20]();
}

uint64_t SGPrettifyPhoneNumber()
{
  return MEMORY[0x1E0D19D28]();
}

uint64_t SGThrottle()
{
  return MEMORY[0x1E0D19D30]();
}

uint64_t SGWeakLinkStringConstant()
{
  return MEMORY[0x1E0D19D38]();
}

CFTypeRef SecTaskCopyValueForEntitlement(SecTaskRef task, CFStringRef entitlement, CFErrorRef *error)
{
  return (CFTypeRef)MEMORY[0x1E0CD65F0](task, entitlement, error);
}

SecTaskRef SecTaskCreateWithAuditToken(CFAllocatorRef allocator, audit_token_t *token)
{
  return (SecTaskRef)MEMORY[0x1E0CD6620](allocator, token);
}

uint64_t SpotlightReceiverRegister()
{
  return MEMORY[0x1E0DA9C80]();
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x1E0C80948](a1, *(_QWORD *)&a2);
}

uint64_t _CFCopyServerVersionDictionary()
{
  return MEMORY[0x1E0C9A0C0]();
}

uint64_t _CFCopySystemVersionDictionary()
{
  return MEMORY[0x1E0C9A0D0]();
}

uint64_t _CFXPCCreateCFObjectFromXPCObject()
{
  return MEMORY[0x1E0C9A800]();
}

uint64_t _LSCopyAdvertisementStringForTeamIdentifierAndActivityType()
{
  return MEMORY[0x1E0CA59B8]();
}

uint64_t _PASBytesToHex()
{
  return MEMORY[0x1E0D81668]();
}

uint64_t _PASCollapseWhitespaceAndStrip()
{
  return MEMORY[0x1E0D81670]();
}

uint64_t _PASEnumerateSimpleLinesInString()
{
  return MEMORY[0x1E0D81690]();
}

uint64_t _PASEnumerateSimpleLinesInUTF8Data()
{
  return MEMORY[0x1E0D81698]();
}

uint64_t _PASEvaluateLogFaultAndProbCrashCriteria()
{
  return MEMORY[0x1E0D816A0]();
}

uint64_t _PASGetNameCharacterSet()
{
  return MEMORY[0x1E0D816B0]();
}

uint64_t _PASGetNounsAndNames()
{
  return MEMORY[0x1E0D816B8]();
}

uint64_t _PASGetQuotationMarkCharacterSet()
{
  return MEMORY[0x1E0D816C0]();
}

uint64_t _PASHexToBytes()
{
  return MEMORY[0x1E0D816C8]();
}

uint64_t _PASIsAllDigits()
{
  return MEMORY[0x1E0D816D8]();
}

uint64_t _PASIsAllUppercase()
{
  return MEMORY[0x1E0D816E0]();
}

uint64_t _PASKeepOnlyCharacterSet()
{
  return MEMORY[0x1E0D81700]();
}

uint64_t _PASLooksLikeNumber()
{
  return MEMORY[0x1E0D81708]();
}

uint64_t _PASMemoryHeavyOperation()
{
  return MEMORY[0x1E0D81710]();
}

uint64_t _PASMurmur3_x86_128()
{
  return MEMORY[0x1E0D81720]();
}

uint64_t _PASNormalizeUnicodeString()
{
  return MEMORY[0x1E0D81730]();
}

uint64_t _PASNormalizeUnicodeStringMinimally()
{
  return MEMORY[0x1E0D81738]();
}

uint64_t _PASRemoveCharacterSet()
{
  return MEMORY[0x1E0D81748]();
}

uint64_t _PASRemoveSomePunctuation()
{
  return MEMORY[0x1E0D81750]();
}

uint64_t _PASRemoveWhitespace()
{
  return MEMORY[0x1E0D81758]();
}

uint64_t _PASRepairString()
{
  return MEMORY[0x1E0D81760]();
}

uint64_t _PASSimpleICUClearCache()
{
  return MEMORY[0x1E0D81768]();
}

uint64_t _PASSimpleICUTransform()
{
  return MEMORY[0x1E0D81770]();
}

uint64_t _PASStripQuotationMarks()
{
  return MEMORY[0x1E0D81790]();
}

uint64_t _PASTrimTrailingWhitespace()
{
  return MEMORY[0x1E0D81798]();
}

uint64_t _PASUtfNCursorAdvance()
{
  return MEMORY[0x1E0D817A8]();
}

uint64_t _PASUtfNCursorInit()
{
  return MEMORY[0x1E0D817B0]();
}

uint64_t _PNCopyIndexStringsForAddressBookSearch()
{
  return MEMORY[0x1E0D71070]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x1E0C80A20](exception_object);
}

uint64_t std::stringbuf::str()
{
  return MEMORY[0x1E0DE41F0]();
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x1E0DE4248](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x1E0DE4258](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x1E0DE4288](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x1E0DE4388](this);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x1E0DE43E8](__n);
}

std::string *__cdecl std::string::erase(std::string *this, std::string::size_type __pos, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1E0DE4408](this, __pos, __n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1E0DE4420](this, __s);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1E0DE4428](this, __s, __n);
}

std::string *__cdecl std::string::append(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
  return (std::string *)MEMORY[0x1E0DE4438](this, __n, __c);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1E0DE4448](this, __s, __n);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1E0DE4470](this, __pos, __s, __n);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
  MEMORY[0x1E0DE4480](this, __n, __c);
}

void std::string::reserve(std::string *this, std::string::size_type __requested_capacity)
{
  MEMORY[0x1E0DE44A8](this, __requested_capacity);
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
  MEMORY[0x1E0DE44B8](this, __c);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x1E0DE44D8](this, __str);
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x1E0DE46B0]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x1E0DE46B8]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x1E0DE46C8]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x1E0DE46D0]();
}

{
  return MEMORY[0x1E0DE4700]();
}

{
  return MEMORY[0x1E0DE4718]();
}

{
  return MEMORY[0x1E0DE4728]();
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x1E0DE47E0]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x1E0DE47E8]();
}

uint64_t std::__sort<std::__less<int,int> &,int *>()
{
  return MEMORY[0x1E0DE4AF8]();
}

void std::locale::~locale(std::locale *this)
{
  MEMORY[0x1E0DE4B98](this);
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
  MEMORY[0x1E0DE4C50](this);
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
  MEMORY[0x1E0DE4C68](this, __sb);
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
  MEMORY[0x1E0DE4C80](this, *(_QWORD *)&__state);
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x1E0DE4D28]();
}

void std::terminate(void)
{
  MEMORY[0x1E0DE4E18]();
}

uint64_t operator delete[]()
{
  return off_1E7DA6D60();
}

void operator delete(void *__p)
{
  off_1E7DA6D68(__p);
}

uint64_t operator delete()
{
  return off_1E7DA6D70();
}

uint64_t operator new[]()
{
  return off_1E7DA6D78();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_1E7DA6D80(__sz);
}

uint64_t operator new()
{
  return off_1E7DA6D88();
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
  MEMORY[0x1E0C80A58](a1, a2, *(_QWORD *)&a3, a4);
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x1E0DE5068](thrown_size);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1E0DE5080](a1);
}

void __cxa_end_catch(void)
{
  MEMORY[0x1E0DE5098]();
}

void __cxa_free_exception(void *a1)
{
  MEMORY[0x1E0DE50A0](a1);
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x1E0DE50D8](a1, lptinfo, a3);
}

int *__error(void)
{
  return (int *)MEMORY[0x1E0C80AC0]();
}

double __exp10(double a1)
{
  double result;

  MEMORY[0x1E0C80AC8](a1);
  return result;
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x1E0C80B50](*(_QWORD *)&a1, a2);
}

int __sprintf_chk(char *a1, int a2, size_t a3, const char *a4, ...)
{
  return MEMORY[0x1E0C80BE8](a1, *(_QWORD *)&a2, a3, a4);
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return MEMORY[0x1E0C80C70](*(_QWORD *)&a1);
}

__darwin_ct_rune_t __toupper(__darwin_ct_rune_t a1)
{
  return MEMORY[0x1E0C80C78](*(_QWORD *)&a1);
}

void _exit(int a1)
{
  MEMORY[0x1E0C80F80](*(_QWORD *)&a1);
}

os_activity_t _os_activity_create(void *dso, const char *description, os_activity_t activity, os_activity_flag_t flags)
{
  return (os_activity_t)MEMORY[0x1E0C80FC0](dso, description, activity, *(_QWORD *)&flags);
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x1E0C81010]();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81020](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81038](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81040](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81048](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C810D0](dso, log, type, spid, name, format, buf, *(_QWORD *)&size);
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x1E0DA88F0]();
}

uint64_t _sqlite3_system_busy_handler()
{
  return MEMORY[0x1E0DE8548]();
}

void abort(void)
{
  MEMORY[0x1E0C813A8]();
}

uLong adler32(uLong adler, const Bytef *buf, uInt len)
{
  return MEMORY[0x1E0DE9290](adler, buf, *(_QWORD *)&len);
}

void arc4random_buf(void *__buf, size_t __nbytes)
{
  MEMORY[0x1E0C81580](__buf, __nbytes);
}

uint32_t arc4random_uniform(uint32_t __upper_bound)
{
  return MEMORY[0x1E0C81588](*(_QWORD *)&__upper_bound);
}

uint64_t archive_entry_filetype()
{
  return MEMORY[0x1E0DE3DC0]();
}

uint64_t archive_entry_pathname_utf8()
{
  return MEMORY[0x1E0DE3DE0]();
}

uint64_t archive_entry_perm()
{
  return MEMORY[0x1E0DE3DE8]();
}

uint64_t archive_entry_set_perm()
{
  return MEMORY[0x1E0DE3E20]();
}

uint64_t archive_entry_size()
{
  return MEMORY[0x1E0DE3E38]();
}

uint64_t archive_entry_size_is_set()
{
  return MEMORY[0x1E0DE3E40]();
}

uint64_t archive_entry_update_pathname_utf8()
{
  return MEMORY[0x1E0DE3E50]();
}

uint64_t archive_error_string()
{
  return MEMORY[0x1E0DE3E60]();
}

uint64_t archive_read_append_filter()
{
  return MEMORY[0x1E0DE3E70]();
}

uint64_t archive_read_close()
{
  return MEMORY[0x1E0DE3E78]();
}

uint64_t archive_read_data()
{
  return MEMORY[0x1E0DE3E80]();
}

uint64_t archive_read_data_block()
{
  return MEMORY[0x1E0DE3E88]();
}

uint64_t archive_read_free()
{
  return MEMORY[0x1E0DE3EF8]();
}

uint64_t archive_read_new()
{
  return MEMORY[0x1E0DE3F00]();
}

uint64_t archive_read_next_header()
{
  return MEMORY[0x1E0DE3F08]();
}

uint64_t archive_read_open_fd()
{
  return MEMORY[0x1E0DE3F20]();
}

uint64_t archive_read_open_memory()
{
  return MEMORY[0x1E0DE3F30]();
}

uint64_t archive_read_support_filter_all()
{
  return MEMORY[0x1E0DE3F48]();
}

uint64_t archive_read_support_filter_uu()
{
  return MEMORY[0x1E0DE3F68]();
}

uint64_t archive_read_support_format_raw()
{
  return MEMORY[0x1E0DE3F80]();
}

uint64_t archive_read_support_format_zip()
{
  return MEMORY[0x1E0DE3F90]();
}

uint64_t archive_write_close()
{
  return MEMORY[0x1E0DE3FC0]();
}

uint64_t archive_write_data_block()
{
  return MEMORY[0x1E0DE3FD0]();
}

uint64_t archive_write_disk_new()
{
  return MEMORY[0x1E0DE3FD8]();
}

uint64_t archive_write_disk_set_options()
{
  return MEMORY[0x1E0DE3FE0]();
}

uint64_t archive_write_disk_set_standard_lookup()
{
  return MEMORY[0x1E0DE3FE8]();
}

uint64_t archive_write_finish_entry()
{
  return MEMORY[0x1E0DE3FF8]();
}

uint64_t archive_write_free()
{
  return MEMORY[0x1E0DE4000]();
}

uint64_t archive_write_header()
{
  return MEMORY[0x1E0DE4008]();
}

void *__cdecl bsearch_b(const void *__key, const void *__base, size_t __nel, size_t __width, void *__compar)
{
  return (void *)MEMORY[0x1E0C81740](__key, __base, __nel, __width, __compar);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

Method *__cdecl class_copyMethodList(Class cls, unsigned int *outCount)
{
  return (Method *)MEMORY[0x1E0DE7A78](cls, outCount);
}

id class_createInstance(Class cls, size_t extraBytes)
{
  return (id)MEMORY[0x1E0DE7A90](cls, extraBytes);
}

size_t class_getInstanceSize(Class cls)
{
  return MEMORY[0x1E0DE7AB0](cls);
}

const char *__cdecl class_getName(Class cls)
{
  return (const char *)MEMORY[0x1E0DE7AC8](cls);
}

objc_property_t class_getProperty(Class cls, const char *name)
{
  return (objc_property_t)MEMORY[0x1E0DE7AD0](cls, name);
}

clock_t clock(void)
{
  return MEMORY[0x1E0C82650]();
}

int close(int a1)
{
  return MEMORY[0x1E0C82688](*(_QWORD *)&a1);
}

uint64_t ct_green_tea_logger_create()
{
  return MEMORY[0x1E0DDFE88]();
}

uint64_t ct_green_tea_logger_destroy()
{
  return MEMORY[0x1E0DDFE98]();
}

void dispatch_activate(dispatch_object_t object)
{
  MEMORY[0x1E0C82BC0](object);
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82BC8](when, queue, block);
}

void dispatch_apply(size_t iterations, dispatch_queue_t queue, void *block)
{
  MEMORY[0x1E0C82BD8](iterations, queue, block);
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
  MEMORY[0x1E0C82BE8](queue);
}

void dispatch_assert_queue_not_V2(dispatch_queue_t queue)
{
  MEMORY[0x1E0C82BF8](queue);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C00](queue, block);
}

void dispatch_async_and_wait(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C08](queue, block);
}

void dispatch_barrier_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C48](queue, block);
}

void dispatch_block_cancel(dispatch_block_t block)
{
  MEMORY[0x1E0C82C58](block);
}

dispatch_block_t dispatch_block_create(dispatch_block_flags_t flags, dispatch_block_t block)
{
  return (dispatch_block_t)MEMORY[0x1E0C82C60](flags, block);
}

dispatch_block_t dispatch_block_create_with_qos_class(dispatch_block_flags_t flags, dispatch_qos_class_t qos_class, int relative_priority, dispatch_block_t block)
{
  return (dispatch_block_t)MEMORY[0x1E0C82C68](flags, *(_QWORD *)&qos_class, *(_QWORD *)&relative_priority, block);
}

intptr_t dispatch_block_wait(dispatch_block_t block, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82C98](block, timeout);
}

dispatch_data_t dispatch_data_create(const void *buffer, size_t size, dispatch_queue_t queue, dispatch_block_t destructor)
{
  return (dispatch_data_t)MEMORY[0x1E0C82CB0](buffer, size, queue, destructor);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1E0C82D00](identifier, flags);
}

void dispatch_group_async(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82D10](group, queue, block);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1E0C82D20]();
}

void dispatch_group_enter(dispatch_group_t group)
{
  MEMORY[0x1E0C82D28](group);
}

void dispatch_group_leave(dispatch_group_t group)
{
  MEMORY[0x1E0C82D30](group);
}

void dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82D38](group, queue, block);
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82D48](group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x1E0C82E08](predicate, block);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E28](attr, frequency);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E38](attr, *(_QWORD *)&qos_class, *(_QWORD *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E48](label, attr);
}

void dispatch_resume(dispatch_object_t object)
{
  MEMORY[0x1E0C82EA0](object);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1E0C82EB8](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1E0C82EC8](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82ED8](dsema, timeout);
}

void dispatch_source_cancel(dispatch_source_t source)
{
  MEMORY[0x1E0C82F10](source);
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x1E0C82F20](type, handle, mask, queue);
}

uintptr_t dispatch_source_get_data(dispatch_source_t source)
{
  return MEMORY[0x1E0C82F28](source);
}

void dispatch_source_merge_data(dispatch_source_t source, uintptr_t value)
{
  MEMORY[0x1E0C82F40](source, value);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
  MEMORY[0x1E0C82F58](source, handler);
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
  MEMORY[0x1E0C82F78](source, start, interval, leeway);
}

void dispatch_suspend(dispatch_object_t object)
{
  MEMORY[0x1E0C82F88](object);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82F90](queue, block);
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1E0C82FB8](when, delta);
}

char *dlerror(void)
{
  return (char *)MEMORY[0x1E0C83038]();
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1E0C83050](__handle, __symbol);
}

void exit(int a1)
{
  MEMORY[0x1E0C83278](*(_QWORD *)&a1);
}

long double exp(long double __x)
{
  long double result;

  MEMORY[0x1E0C83280](__x);
  return result;
}

int fcntl(int a1, int a2, ...)
{
  return MEMORY[0x1E0C83300](*(_QWORD *)&a1, *(_QWORD *)&a2);
}

long double fmod(long double __x, long double __y)
{
  long double result;

  MEMORY[0x1E0C83440](__x, __y);
  return result;
}

float fmodf(float a1, float a2)
{
  float result;

  MEMORY[0x1E0C83448](a1, a2);
  return result;
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C83478](a1, a2);
}

void free(void *a1)
{
  MEMORY[0x1E0C834A8](a1);
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x1E0C83560](*(_QWORD *)&a1, a2);
}

int ftruncate(int a1, off_t a2)
{
  return MEMORY[0x1E0C83590](*(_QWORD *)&a1, a2);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1E0C835E0](__ptr, __size, __nitems, __stream);
}

uint64_t getCTGreenTeaOsLogHandle()
{
  return MEMORY[0x1E0DDFEA8]();
}

htmlParserCtxtPtr htmlCreatePushParserCtxt(htmlSAXHandlerPtr sax, void *user_data, const char *chunk, int size, const char *filename, xmlCharEncoding enc)
{
  return (htmlParserCtxtPtr)MEMORY[0x1E0DE8C18](sax, user_data, chunk, *(_QWORD *)&size, filename, *(_QWORD *)&enc);
}

int htmlCtxtUseOptions(htmlParserCtxtPtr ctxt, int options)
{
  return MEMORY[0x1E0DE8C20](ctxt, *(_QWORD *)&options);
}

void htmlFreeParserCtxt(htmlParserCtxtPtr ctxt)
{
  MEMORY[0x1E0DE8C28](ctxt);
}

int htmlParseChunk(htmlParserCtxtPtr ctxt, const char *chunk, int size, int terminate)
{
  return MEMORY[0x1E0DE8C30](ctxt, chunk, *(_QWORD *)&size, *(_QWORD *)&terminate);
}

long double log(long double __x)
{
  long double result;

  MEMORY[0x1E0C83BB8](__x);
  return result;
}

long double log10(long double __x)
{
  long double result;

  MEMORY[0x1E0C83BC0](__x);
  return result;
}

off_t lseek(int a1, off_t a2, int a3)
{
  return MEMORY[0x1E0C83C38](*(_QWORD *)&a1, a2, *(_QWORD *)&a3);
}

uint64_t mach_absolute_time(void)
{
  return MEMORY[0x1E0C83C50]();
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x1E0C83DB8](info);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83EF8](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F00](size, type_id);
}

int malloc_type_posix_memalign(void **memptr, size_t alignment, size_t size, malloc_type_id_t type_id)
{
  return MEMORY[0x1E0C83F08](memptr, alignment, size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F10](ptr, size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x1E0C84070](__s, *(_QWORD *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1E0C84078](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C84088](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1E0C84098](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1E0C840B0](__b, *(_QWORD *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
  MEMORY[0x1E0C840B8](__b, __pattern16, __len);
}

SEL method_getName(Method m)
{
  return (SEL)MEMORY[0x1E0DE7B70](m);
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return (void *)MEMORY[0x1E0C841D8](a1, a2, *(_QWORD *)&a3, *(_QWORD *)&a4, *(_QWORD *)&a5, a6);
}

int msync(void *a1, size_t a2, int a3)
{
  return MEMORY[0x1E0C84210](a1, a2, *(_QWORD *)&a3);
}

int munmap(void *a1, size_t a2)
{
  return MEMORY[0x1E0C84220](a1, a2);
}

uint32_t notify_cancel(int token)
{
  return MEMORY[0x1E0C843D8](*(_QWORD *)&token);
}

uint32_t notify_post(const char *name)
{
  return MEMORY[0x1E0C843F8](name);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return MEMORY[0x1E0C84408](name, out_token, queue, handler);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1E0DE7BA8](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1E0DE7BB8]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7BD0](a1);
}

void objc_autoreleasePoolPop(void *context)
{
  MEMORY[0x1E0DE7BD8](context);
}

void *objc_autoreleasePoolPush(void)
{
  return (void *)MEMORY[0x1E0DE7BE0]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7BE8](a1);
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x1E0DE7BF0](exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1E0DE7BF8]();
}

id objc_constructInstance(Class cls, void *bytes)
{
  return (id)MEMORY[0x1E0DE7C00](cls, bytes);
}

void objc_copyWeak(id *to, id *from)
{
  MEMORY[0x1E0DE7C38](to, from);
}

void objc_destroyWeak(id *location)
{
  MEMORY[0x1E0DE7C60](location);
}

void objc_end_catch(void)
{
  MEMORY[0x1E0DE7C80]();
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x1E0DE7C90](obj);
}

void objc_exception_rethrow(void)
{
  MEMORY[0x1E0DE7C98]();
}

void objc_exception_throw(id exception)
{
  MEMORY[0x1E0DE7CA0](exception);
}

id objc_getAssociatedObject(id object, const void *key)
{
  return (id)MEMORY[0x1E0DE7CA8](object, key);
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x1E0DE7CB0](name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x1E0DE7CD0](self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x1E0DE7CE0](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1E0DE7D08](location);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D30](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1E0DE7D38]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1E0DE7D40]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1E0DE7D48]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1E0DE7D50]();
}

uint64_t objc_opt_self()
{
  return MEMORY[0x1E0DE7D58]();
}

void objc_release(id a1)
{
  MEMORY[0x1E0DE7D78](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1E0DE7E50](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7E58](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E60](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E68](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x1E0DE7E70](a1);
}

void objc_setAssociatedObject(id object, const void *key, id value, void *policy)
{
  MEMORY[0x1E0DE7F40](object, key, value, policy);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7F88](self, _cmd, newValue, offset);
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7FA0](self, _cmd, newValue, offset);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x1E0DE7FB0](location, obj);
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x1E0DE7FB8](location, obj);
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x1E0DE7FC8](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x1E0DE7FD0](obj);
}

void objc_terminate(void)
{
  MEMORY[0x1E0DE7FD8]();
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7FE0](a1);
}

Class object_getClass(id a1)
{
  return (Class)MEMORY[0x1E0DE7FF8](a1);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1E0C84480](a1, *(_QWORD *)&a2);
}

int open_dprotected_np(const char *a1, int a2, int a3, int a4, ...)
{
  return MEMORY[0x1E0C84488](a1, *(_QWORD *)&a2, *(_QWORD *)&a3, *(_QWORD *)&a4);
}

void os_activity_scope_enter(os_activity_t activity, os_activity_scope_state_t state)
{
  MEMORY[0x1E0C84510](activity, state);
}

void os_activity_scope_leave(os_activity_scope_state_t state)
{
  MEMORY[0x1E0C84518](state);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1E0C84780](oslog, type);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x1E0C84920](log);
}

os_signpost_id_t os_signpost_id_generate(os_log_t log)
{
  return MEMORY[0x1E0C84928](log);
}

os_signpost_id_t os_signpost_id_make_with_pointer(os_log_t log, const void *ptr)
{
  return MEMORY[0x1E0C84930](log, ptr);
}

uint64_t os_transaction_create()
{
  return MEMORY[0x1E0C84970]();
}

uint64_t os_transaction_needs_more_time()
{
  return MEMORY[0x1E0C84980]();
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C84998](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C849B0](lock);
}

uint64_t os_variant_has_internal_diagnostics()
{
  return MEMORY[0x1E0C849F8]();
}

int pause(void)
{
  return MEMORY[0x1E0C84AE0]();
}

ssize_t pread(int __fd, void *__buf, size_t __nbyte, off_t a4)
{
  return MEMORY[0x1E0C84BC8](*(_QWORD *)&__fd, __buf, __nbyte, a4);
}

int proc_name(int pid, void *buffer, uint32_t buffersize)
{
  return MEMORY[0x1E0C84C20](*(_QWORD *)&pid, buffer, *(_QWORD *)&buffersize);
}

char *__cdecl property_copyAttributeValue(objc_property_t property, const char *attributeName)
{
  return (char *)MEMORY[0x1E0DE8060](property, attributeName);
}

const char *__cdecl property_getName(objc_property_t property)
{
  return (const char *)MEMORY[0x1E0DE8070](property);
}

BOOL protocol_isEqual(Protocol *proto, Protocol *other)
{
  return MEMORY[0x1E0DE80C0](proto, other);
}

int pthread_cond_destroy(pthread_cond_t *a1)
{
  return MEMORY[0x1E0C84D20](a1);
}

int pthread_cond_init(pthread_cond_t *a1, const pthread_condattr_t *a2)
{
  return MEMORY[0x1E0C84D28](a1, a2);
}

int pthread_cond_signal(pthread_cond_t *a1)
{
  return MEMORY[0x1E0C84D30](a1);
}

int pthread_cond_wait(pthread_cond_t *a1, pthread_mutex_t *a2)
{
  return MEMORY[0x1E0C84D48](a1, a2);
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E18](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x1E0C84E20](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E28](a1);
}

int pthread_mutex_trylock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E30](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E38](a1);
}

int pthread_mutexattr_destroy(pthread_mutexattr_t *a1)
{
  return MEMORY[0x1E0C84E40](a1);
}

int pthread_mutexattr_init(pthread_mutexattr_t *a1)
{
  return MEMORY[0x1E0C84E48](a1);
}

int pthread_mutexattr_settype(pthread_mutexattr_t *a1, int a2)
{
  return MEMORY[0x1E0C84E60](a1, *(_QWORD *)&a2);
}

int pthread_rwlock_destroy(pthread_rwlock_t *a1)
{
  return MEMORY[0x1E0C84E90](a1);
}

int pthread_rwlock_init(pthread_rwlock_t *a1, const pthread_rwlockattr_t *a2)
{
  return MEMORY[0x1E0C84E98](a1, a2);
}

int pthread_rwlock_rdlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x1E0C84EA0](a1);
}

int pthread_rwlock_unlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x1E0C84EB8](a1);
}

int pthread_rwlock_wrlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x1E0C84EC0](a1);
}

int puts(const char *a1)
{
  return MEMORY[0x1E0C84F60](a1);
}

qos_class_t qos_class_self(void)
{
  return MEMORY[0x1E0C84F80]();
}

void qsort_b(void *__base, size_t __nel, size_t __width, void *__compar)
{
  MEMORY[0x1E0C84F90](__base, __nel, __width, __compar);
}

void *__cdecl reallocf(void *__ptr, size_t __size)
{
  return (void *)MEMORY[0x1E0C85030](__ptr, __size);
}

char *__cdecl realpath_DARWIN_EXTSN(const char *a1, char *a2)
{
  return (char *)MEMORY[0x1E0C85040](a1, a2);
}

void rename(const std::__fs::filesystem::path *__from, const std::__fs::filesystem::path *__to, std::error_code *__ec)
{
  MEMORY[0x1E0C85100](__from, __to, __ec);
}

int scandir(const char *a1, dirent ***a2, int (__cdecl *a3)(const dirent *), int (__cdecl *a4)(const dirent **, const dirent **))
{
  return MEMORY[0x1E0C85250](a1, a2, a3, a4);
}

const char *__cdecl sel_getName(SEL sel)
{
  return (const char *)MEMORY[0x1E0DE80C8](sel);
}

SEL sel_registerName(const char *str)
{
  return (SEL)MEMORY[0x1E0DE80E8](str);
}

uint64_t sgDeveloperLogHandle()
{
  return MEMORY[0x1E0D19E08]();
}

uint64_t sgEventsLogHandle()
{
  return MEMORY[0x1E0D19E10]();
}

uint64_t sgFilter()
{
  return MEMORY[0x1E0D19E18]();
}

uint64_t sgLogHandle()
{
  return MEMORY[0x1E0D19E20]();
}

uint64_t sgMailIntelligenceLogHandle()
{
  return MEMORY[0x1E0D19E28]();
}

uint64_t sgMap()
{
  return MEMORY[0x1E0D19E30]();
}

uint64_t sgMapAndFilter()
{
  return MEMORY[0x1E0D19E38]();
}

uint64_t sgMapSelector()
{
  return MEMORY[0x1E0D19E40]();
}

uint64_t sgPrivateLogHandle()
{
  return MEMORY[0x1E0D19E48]();
}

uint64_t sgQuicktypeLogHandle()
{
  return MEMORY[0x1E0D19E50]();
}

uint64_t sgRemindersLogHandle()
{
  return MEMORY[0x1E0D19E58]();
}

uint64_t sgSignpostHandle()
{
  return MEMORY[0x1E0D19E60]();
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1E0C85440](__str, __size, __format);
}

int sprintf(char *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C85460](a1, a2);
}

int sqlite3_bind_blob64(sqlite3_stmt *a1, int a2, const void *a3, sqlite3_uint64 a4, void (__cdecl *a5)(void *))
{
  return MEMORY[0x1E0DE8588](a1, *(_QWORD *)&a2, a3, a4, a5);
}

int sqlite3_bind_double(sqlite3_stmt *a1, int a2, double a3)
{
  return MEMORY[0x1E0DE8598](a1, *(_QWORD *)&a2, a3);
}

int sqlite3_bind_int(sqlite3_stmt *a1, int a2, int a3)
{
  return MEMORY[0x1E0DE85A0](a1, *(_QWORD *)&a2, *(_QWORD *)&a3);
}

int sqlite3_bind_int64(sqlite3_stmt *a1, int a2, sqlite3_int64 a3)
{
  return MEMORY[0x1E0DE85A8](a1, *(_QWORD *)&a2, a3);
}

int sqlite3_bind_null(sqlite3_stmt *a1, int a2)
{
  return MEMORY[0x1E0DE85B0](a1, *(_QWORD *)&a2);
}

int sqlite3_bind_parameter_index(sqlite3_stmt *a1, const char *zName)
{
  return MEMORY[0x1E0DE85C0](a1, zName);
}

int sqlite3_bind_text(sqlite3_stmt *a1, int a2, const char *a3, int a4, void (__cdecl *a5)(void *))
{
  return MEMORY[0x1E0DE85D8](a1, *(_QWORD *)&a2, a3, *(_QWORD *)&a4, a5);
}

int sqlite3_busy_handler(sqlite3 *a1, int (__cdecl *a2)(void *, int), void *a3)
{
  return MEMORY[0x1E0DE8630](a1, a2, a3);
}

int sqlite3_busy_timeout(sqlite3 *a1, int ms)
{
  return MEMORY[0x1E0DE8638](a1, *(_QWORD *)&ms);
}

int sqlite3_changes(sqlite3 *a1)
{
  return MEMORY[0x1E0DE8640](a1);
}

const void *__cdecl sqlite3_column_blob(sqlite3_stmt *a1, int iCol)
{
  return (const void *)MEMORY[0x1E0DE8660](a1, *(_QWORD *)&iCol);
}

int sqlite3_column_bytes(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1E0DE8668](a1, *(_QWORD *)&iCol);
}

int sqlite3_column_count(sqlite3_stmt *pStmt)
{
  return MEMORY[0x1E0DE8678](pStmt);
}

double sqlite3_column_double(sqlite3_stmt *a1, int iCol)
{
  double result;

  MEMORY[0x1E0DE8688](a1, *(_QWORD *)&iCol);
  return result;
}

int sqlite3_column_int(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1E0DE8690](a1, *(_QWORD *)&iCol);
}

sqlite3_int64 sqlite3_column_int64(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1E0DE8698](a1, *(_QWORD *)&iCol);
}

const unsigned __int8 *__cdecl sqlite3_column_text(sqlite3_stmt *a1, int iCol)
{
  return (const unsigned __int8 *)MEMORY[0x1E0DE86B8](a1, *(_QWORD *)&iCol);
}

int sqlite3_column_type(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1E0DE86C8](a1, *(_QWORD *)&iCol);
}

int sqlite3_create_function_v2(sqlite3 *db, const char *zFunctionName, int nArg, int eTextRep, void *pApp, void (__cdecl *xFunc)(sqlite3_context *, int, sqlite3_value **), void (__cdecl *xStep)(sqlite3_context *, int, sqlite3_value **), void (__cdecl *xFinal)(sqlite3_context *), void (__cdecl *xDestroy)(void *))
{
  return MEMORY[0x1E0DE8710](db, zFunctionName, *(_QWORD *)&nArg, *(_QWORD *)&eTextRep, pApp, xFunc, xStep, xFinal);
}

int sqlite3_db_config(sqlite3 *a1, int op, ...)
{
  return MEMORY[0x1E0DE8738](a1, *(_QWORD *)&op);
}

sqlite3 *__cdecl sqlite3_db_handle(sqlite3_stmt *a1)
{
  return (sqlite3 *)MEMORY[0x1E0DE8748](a1);
}

const char *__cdecl sqlite3_errmsg(sqlite3 *a1)
{
  return (const char *)MEMORY[0x1E0DE8788](a1);
}

const char *__cdecl sqlite3_errstr(int a1)
{
  return (const char *)MEMORY[0x1E0DE8790](*(_QWORD *)&a1);
}

int sqlite3_file_control(sqlite3 *a1, const char *zDbName, int op, void *a4)
{
  return MEMORY[0x1E0DE87C0](a1, zDbName, *(_QWORD *)&op, a4);
}

sqlite3_int64 sqlite3_last_insert_rowid(sqlite3 *a1)
{
  return MEMORY[0x1E0DE8820](a1);
}

int sqlite3_limit(sqlite3 *a1, int id, int newVal)
{
  return MEMORY[0x1E0DE8830](a1, *(_QWORD *)&id, *(_QWORD *)&newVal);
}

void sqlite3_result_blob(sqlite3_context *a1, const void *a2, int a3, void (__cdecl *a4)(void *))
{
  MEMORY[0x1E0DE88B8](a1, a2, *(_QWORD *)&a3, a4);
}

void sqlite3_result_int(sqlite3_context *a1, int a2)
{
  MEMORY[0x1E0DE88F0](a1, *(_QWORD *)&a2);
}

void sqlite3_result_null(sqlite3_context *a1)
{
  MEMORY[0x1E0DE8900](a1);
}

void sqlite3_result_text(sqlite3_context *a1, const char *a2, int a3, void (__cdecl *a4)(void *))
{
  MEMORY[0x1E0DE8910](a1, a2, *(_QWORD *)&a3, a4);
}

void sqlite3_result_zeroblob(sqlite3_context *a1, int n)
{
  MEMORY[0x1E0DE8928](a1, *(_QWORD *)&n);
}

const char *__cdecl sqlite3_sql(sqlite3_stmt *pStmt)
{
  return (const char *)MEMORY[0x1E0DE8998](pStmt);
}

int sqlite3_stmt_readonly(sqlite3_stmt *pStmt)
{
  return MEMORY[0x1E0DE89B8](pStmt);
}

int sqlite3_value_bytes(sqlite3_value *a1)
{
  return MEMORY[0x1E0DE8A20](a1);
}

int sqlite3_value_int(sqlite3_value *a1)
{
  return MEMORY[0x1E0DE8A48](a1);
}

const unsigned __int8 *__cdecl sqlite3_value_text(sqlite3_value *a1)
{
  return (const unsigned __int8 *)MEMORY[0x1E0DE8A60](a1);
}

char *__cdecl strchr(char *__s, int __c)
{
  return (char *)MEMORY[0x1E0C85518](__s, *(_QWORD *)&__c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1E0C85520](__s1, __s2);
}

char *__cdecl strdup(const char *__s1)
{
  return (char *)MEMORY[0x1E0C85540](__s1);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x1E0C85548](*(_QWORD *)&__errnum);
}

size_t strlcpy(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x1E0C85570](__dst, __source, __size);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1E0C85578](__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x1E0C855A8](__s1, __s2, __n);
}

size_t strnlen(const char *__s1, size_t __n)
{
  return MEMORY[0x1E0C855C0](__s1, __n);
}

char *__cdecl strnstr(const char *__big, const char *__little, size_t __len)
{
  return (char *)MEMORY[0x1E0C855C8](__big, __little, __len);
}

char *__cdecl strptime_l(const char *a1, const char *a2, tm *a3, locale_t a4)
{
  return (char *)MEMORY[0x1E0C855E0](a1, a2, a3, a4);
}

double strtod(const char *a1, char **a2)
{
  double result;

  MEMORY[0x1E0C85618](a1, a2);
  return result;
}

float strtof(const char *a1, char **a2)
{
  float result;

  MEMORY[0x1E0C85628](a1, a2);
  return result;
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1E0C85658](__str, __endptr, *(_QWORD *)&__base);
}

uint64_t strtoll(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1E0C85678](__str, __endptr, *(_QWORD *)&__base);
}

unint64_t strtoul(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1E0C85698](__str, __endptr, *(_QWORD *)&__base);
}

unint64_t strtoull(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1E0C856A8](__str, __endptr, *(_QWORD *)&__base);
}

int unlink(const char *a1)
{
  return MEMORY[0x1E0C859B8](a1);
}

int usleep(useconds_t a1)
{
  return MEMORY[0x1E0C859E0](*(_QWORD *)&a1);
}

int uuid_parse(const uuid_string_t in, uuid_t uu)
{
  return MEMORY[0x1E0C85A38](in, uu);
}

void uuid_unparse_upper(const uuid_t uu, uuid_string_t out)
{
  MEMORY[0x1E0C85A50](uu, out);
}

kern_return_t vm_allocate(vm_map_t target_task, vm_address_t *address, vm_size_t size, int flags)
{
  return MEMORY[0x1E0C85A80](*(_QWORD *)&target_task, address, size, *(_QWORD *)&flags);
}

kern_return_t vm_deallocate(vm_map_t target_task, vm_address_t address, vm_size_t size)
{
  return MEMORY[0x1E0C85A98](*(_QWORD *)&target_task, address, size);
}

int vsnprintf(char *__str, size_t __size, const char *__format, va_list a4)
{
  return MEMORY[0x1E0C85B98](__str, __size, __format, a4);
}

ssize_t write(int __fd, const void *__buf, size_t __nbyte)
{
  return MEMORY[0x1E0C85D40](*(_QWORD *)&__fd, __buf, __nbyte);
}

ssize_t writev(int a1, const iovec *a2, int a3)
{
  return MEMORY[0x1E0C85D48](*(_QWORD *)&a1, a2, *(_QWORD *)&a3);
}

xmlNodePtr xmlDocGetRootElement(const xmlDoc *doc)
{
  return (xmlNodePtr)MEMORY[0x1E0DE8D18](doc);
}

void xmlFreeDoc(xmlDocPtr cur)
{
  MEMORY[0x1E0DE8D38](cur);
}

xmlChar *__cdecl xmlGetProp(const xmlNode *node, const xmlChar *name)
{
  return (xmlChar *)MEMORY[0x1E0DE8DA0](node, name);
}

xmlChar *__cdecl xmlNodeGetContent(const xmlNode *cur)
{
  return (xmlChar *)MEMORY[0x1E0DE8E70](cur);
}

int xmlStrEqual(const xmlChar *str1, const xmlChar *str2)
{
  return MEMORY[0x1E0DE8FF8](str1, str2);
}

int xmlStrlen(const xmlChar *str)
{
  return MEMORY[0x1E0DE9010](str);
}

xpc_object_t xpc_activity_copy_criteria(xpc_activity_t activity)
{
  return (xpc_object_t)MEMORY[0x1E0C85D80](activity);
}

xpc_activity_state_t xpc_activity_get_state(xpc_activity_t activity)
{
  return MEMORY[0x1E0C85D90](activity);
}

void xpc_activity_register(const char *identifier, xpc_object_t criteria, xpc_activity_handler_t handler)
{
  MEMORY[0x1E0C85D98](identifier, criteria, handler);
}

void xpc_activity_set_criteria(xpc_activity_t activity, xpc_object_t criteria)
{
  MEMORY[0x1E0C85DB0](activity, criteria);
}

BOOL xpc_activity_set_state(xpc_activity_t activity, xpc_activity_state_t state)
{
  return MEMORY[0x1E0C85DB8](activity, state);
}

BOOL xpc_activity_should_defer(xpc_activity_t activity)
{
  return MEMORY[0x1E0C85DC8](activity);
}

uint64_t xpc_copy_entitlement_for_self()
{
  return MEMORY[0x1E0C86118]();
}

int64_t xpc_dictionary_get_int64(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1E0C862A0](xdict, key);
}

const char *__cdecl xpc_dictionary_get_string(xpc_object_t xdict, const char *key)
{
  return (const char *)MEMORY[0x1E0C862C8](xdict, key);
}

uint64_t xpc_transaction_exit_clean()
{
  return MEMORY[0x1E0C86778]();
}

