@implementation SGDatabaseMigratorEntities

+ (id)migrations
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  _QWORD v19[3];
  const __CFString *v20;
  const __CFString *v21;
  _QWORD v22[4];
  const __CFString *v23;
  const __CFString *v24;
  _QWORD v25[6];
  _QWORD v26[4];
  _QWORD v27[6];
  _QWORD v28[4];
  _QWORD v29[6];
  _QWORD v30[5];
  _QWORD v31[3];
  const __CFString *v32;
  _QWORD v33[107];
  _QWORD v34[109];

  v34[107] = *MEMORY[0x1E0C80C00];
  v33[0] = CFSTR("1");
  v33[1] = CFSTR("2");
  v34[0] = &unk_1E7E10C38;
  v34[1] = &unk_1E7E10C50;
  v33[2] = CFSTR("3");
  v33[3] = CFSTR("4");
  v34[2] = &unk_1E7E10C68;
  v34[3] = &unk_1E7E10C80;
  v2 = MEMORY[0x1E0C9AA60];
  v33[4] = CFSTR("5");
  v33[5] = CFSTR("6");
  v34[4] = MEMORY[0x1E0C9AA60];
  v34[5] = MEMORY[0x1E0C9AA60];
  v33[6] = CFSTR("7");
  v33[7] = CFSTR("8");
  v34[6] = &unk_1E7E10C98;
  v34[7] = &unk_1E7E10CB0;
  v33[8] = CFSTR("9");
  v33[9] = CFSTR("10");
  v34[8] = &unk_1E7E10CC8;
  v34[9] = &unk_1E7E10CE0;
  v33[10] = CFSTR("11");
  v33[11] = CFSTR("12");
  v34[10] = &unk_1E7E10CF8;
  v34[11] = &unk_1E7E10D10;
  v33[12] = CFSTR("13");
  v33[13] = CFSTR("14");
  v34[12] = &unk_1E7E10D28;
  v34[13] = &unk_1E7E10D40;
  v33[14] = CFSTR("15");
  v33[15] = CFSTR("16");
  v34[14] = &unk_1E7E10D58;
  v34[15] = MEMORY[0x1E0C9AA60];
  v33[16] = CFSTR("17");
  v33[17] = CFSTR("18");
  v34[16] = &unk_1E7E10D70;
  v34[17] = &unk_1E7E10D88;
  v33[18] = CFSTR("19");
  v33[19] = CFSTR("20");
  v34[18] = &unk_1E7E10DA0;
  v34[19] = &unk_1E7E10DB8;
  v33[20] = CFSTR("21");
  v33[21] = CFSTR("22");
  v34[20] = &unk_1E7E10DD0;
  v34[21] = &unk_1E7E10DE8;
  v33[22] = CFSTR("23");
  v33[23] = CFSTR("24");
  v34[22] = &unk_1E7E10E00;
  v34[23] = &unk_1E7E10E18;
  v33[24] = CFSTR("25");
  v33[25] = CFSTR("26");
  v34[24] = &unk_1E7E10E30;
  v34[25] = &unk_1E7E10E48;
  v33[26] = CFSTR("27");
  v33[27] = CFSTR("28");
  v34[26] = &unk_1E7E10E60;
  v34[27] = &unk_1E7E10E78;
  v33[28] = CFSTR("29");
  v33[29] = CFSTR("30");
  v34[28] = &unk_1E7E10E90;
  v34[29] = MEMORY[0x1E0C9AA60];
  v33[30] = CFSTR("31");
  v33[31] = CFSTR("32");
  v34[30] = &unk_1E7E10EA8;
  v34[31] = &unk_1E7E10EC0;
  v33[32] = CFSTR("33");
  v33[33] = CFSTR("34");
  v34[32] = &unk_1E7E10ED8;
  v34[33] = &unk_1E7E10EF0;
  v33[34] = CFSTR("35");
  v33[35] = CFSTR("36");
  v34[34] = MEMORY[0x1E0C9AA60];
  v34[35] = &unk_1E7E10F08;
  v33[36] = CFSTR("37");
  v33[37] = CFSTR("38");
  v34[36] = &unk_1E7E10F20;
  v34[37] = &unk_1E7E10F38;
  v33[38] = CFSTR("39");
  v33[39] = CFSTR("40");
  v34[38] = &unk_1E7E10F50;
  v34[39] = &unk_1E7E10F68;
  v33[40] = CFSTR("41");
  v33[41] = CFSTR("42");
  v34[40] = &unk_1E7E10F80;
  v34[41] = &unk_1E7E10F98;
  v33[42] = CFSTR("43");
  v33[43] = CFSTR("44");
  v34[42] = &unk_1E7E10FB0;
  v34[43] = &unk_1E7E10FC8;
  v33[44] = CFSTR("45");
  v33[45] = CFSTR("46");
  v34[44] = &unk_1E7E10FE0;
  v34[45] = &unk_1E7E10FF8;
  v33[46] = CFSTR("47");
  v33[47] = CFSTR("48");
  v34[46] = &unk_1E7E11010;
  v34[47] = MEMORY[0x1E0C9AA60];
  v33[48] = CFSTR("49");
  v33[49] = CFSTR("50");
  v34[48] = MEMORY[0x1E0C9AA60];
  v34[49] = MEMORY[0x1E0C9AA60];
  v33[50] = CFSTR("51");
  v33[51] = CFSTR("52");
  v34[50] = &unk_1E7E11028;
  v34[51] = MEMORY[0x1E0C9AA60];
  v33[52] = CFSTR("53");
  v33[53] = CFSTR("54");
  v34[52] = &unk_1E7E11040;
  v34[53] = &unk_1E7E11058;
  v33[54] = CFSTR("55");
  v33[55] = CFSTR("56");
  v34[54] = MEMORY[0x1E0C9AA60];
  v34[55] = &unk_1E7E11070;
  v33[56] = CFSTR("57");
  v33[57] = CFSTR("58");
  v34[56] = &unk_1E7E11088;
  v34[57] = &unk_1E7E110A0;
  v33[58] = CFSTR("59");
  v33[59] = CFSTR("60");
  v34[58] = &unk_1E7E110B8;
  v34[59] = MEMORY[0x1E0C9AA60];
  v33[60] = CFSTR("61");
  v33[61] = CFSTR("62");
  v34[60] = &unk_1E7E110D0;
  v34[61] = &unk_1E7E110E8;
  v33[62] = CFSTR("63");
  v33[63] = CFSTR("64");
  v34[62] = &unk_1E7E11100;
  v34[63] = &unk_1E7E11118;
  v33[64] = CFSTR("65");
  v34[64] = &unk_1E7E11130;
  v33[65] = CFSTR("66");
  v34[65] = &unk_1E7E11148;
  v33[66] = CFSTR("67");
  v34[66] = &unk_1E7E11160;
  v33[67] = CFSTR("68");
  v34[67] = &unk_1E7E11178;
  v33[68] = CFSTR("69");
  v34[68] = &unk_1E7E11190;
  v33[69] = CFSTR("70");
  v32 = CFSTR("CREATE TABLE IF NOT EXISTS locations (id INTEGER PRIMARY KEY,locationType INTEGER NOT NULL,label TEXT NOT NULL,address TEXT NOT NULL,airportCode TEXT NOT NULL,latitude REAL NOT NULL,longitude REAL NOT NULL,accuracy REAL NOT NULL,quality REAL NOT NULL,handle BLOB)");
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v32, 1);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v34[69] = v18;
  v33[70] = CFSTR("71");
  v31[0] = CFSTR("DROP TABLE IF EXISTS reminders");
  v31[1] = CFSTR("CREATE TABLE IF NOT EXISTS reminders (id INTEGER PRIMARY KEY,entityId INTEGER NOT NULL,duplicateKey TEXT NOT NULL,sourceKey TEXT,title text NOT NULL,dueDateComponents TEXT,dueLocationId INTEGER,dueLocationType INTEGER NOT NULL,dueLocationTrigger INTEGER NOT NULL,sourceUrl TEXT NOT NULL,creationDate num NOT NULL,opaqueKey TEXT,uniqueKey TEXT,contactIdentifier TEXT,reminderStatus NUM NOT NULL,FOREIGN KEY(entityId) REFERENCES entity(id) ON DELETE NO ACTION,FOREIGN KEY(dueLocationId) REFERENCES locations(id) ON DELETE SET NULL)");
  v31[2] = CFSTR("CREATE INDEX IF NOT EXISTS reminders_duplicateKey_idx ON reminders(duplicateKey)");
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v31, 3);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v34[70] = v17;
  v33[71] = CFSTR("72");
  v34[71] = v2;
  v33[72] = CFSTR("73");
  v34[72] = &unk_1E7E111A8;
  v33[73] = CFSTR("74");
  v30[0] = CFSTR("DROP TABLE IF EXISTS locations");
  v30[1] = CFSTR("DROP TABLE IF EXISTS reminders");
  v30[2] = CFSTR("CREATE TABLE IF NOT EXISTS locations (id INTEGER PRIMARY KEY AUTOINCREMENT,locationType INTEGER NOT NULL,label TEXT,address TEXT,airportCode TEXT,latitude REAL NOT NULL,longitude REAL NOT NULL,accuracy REAL NOT NULL,quality REAL NOT NULL,handle BLOB)");
  v30[3] = CFSTR("CREATE TABLE IF NOT EXISTS reminders (id INTEGER PRIMARY KEY AUTOINCREMENT,entityId INTEGER NOT NULL,duplicateKey TEXT NOT NULL,sourceKey TEXT,title text NOT NULL,dueDateComponents TEXT,dueLocationId INTEGER,dueLocationType INTEGER NOT NULL,dueLocationTrigger INTEGER NOT NULL,sourceUrl TEXT NOT NULL,creationDate num NOT NULL,opaqueKey TEXT,uniqueKey TEXT,contactIdentifier TEXT,reminderStatus NUM NOT NULL,FOREIGN KEY(entityId) REFERENCES entity(id) ON DELETE NO ACTION,FOREIGN KEY(dueLocationId) REFERENCES locations(id) ON DELETE SET NULL)");
  v30[4] = CFSTR("CREATE INDEX IF NOT EXISTS reminders_duplicateKey_idx ON reminders(duplicateKey)");
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v30, 5);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v34[73] = v16;
  v33[74] = CFSTR("75");
  v34[74] = &unk_1E7E111C0;
  v33[75] = CFSTR("76");
  v34[75] = &unk_1E7E111D8;
  v33[76] = CFSTR("77");
  v29[0] = CFSTR("DROP TABLE IF EXISTS extractionInfos");
  v29[1] = CFSTR("DROP TABLE IF EXISTS contactDetails");
  v29[2] = CFSTR("CREATE TABLE IF NOT EXISTS extractionInfos (id INTEGER PRIMARY KEY AUTOINCREMENT,extractionType INTEGER NOT NULL,modelVersion NUM NOT NULL,confidence NUM NOT NULL)");
  v29[3] = CFSTR("CREATE TABLE IF NOT EXISTS contactDetails (id INTEGER PRIMARY KEY AUTOINCREMENT,value TEXT NOT NULL,type INTEGER NOT NULL,label TEXT,entityId INTEGER NOT NULL,duplicateKey TEXT NOT NULL,sourceKey TEXT,context TEXT,extractionInfoId INTEGER NOT NULL,FOREIGN KEY(entityId) REFERENCES entity(id) ON DELETE NO ACTION,FOREIGN KEY(extractionInfoId) REFERENCES extractionInfos(id) ON DELETE RESTRICT)");
  v29[4] = CFSTR("CREATE INDEX IF NOT EXISTS contactDetails_duplicateKey_idx ON contactDetails(duplicateKey)");
  v29[5] = CFSTR("CREATE INDEX IF NOT EXISTS contactDetails_entityId_idx ON contactDetails(entityId)");
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v29, 6);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v34[76] = v15;
  v33[77] = CFSTR("78");
  v34[77] = &unk_1E7E111F0;
  v33[78] = CFSTR("79");
  v34[78] = &unk_1E7E11208;
  v33[79] = CFSTR("80");
  v34[79] = &unk_1E7E11220;
  v33[80] = CFSTR("81");
  v34[80] = &unk_1E7E11238;
  v33[81] = CFSTR("82");
  v28[0] = CFSTR("CREATE TABLE IF NOT EXISTS locations_alterColumnsNullable (id INTEGER PRIMARY KEY AUTOINCREMENT,locationType INTEGER NOT NULL,label TEXT,address TEXT,airportCode TEXT,latitude REAL,longitude REAL,accuracy REAL,quality REAL,handle BLOB)");
  v28[1] = CFSTR("INSERT INTO locations_alterColumnsNullable SELECT * FROM locations");
  v28[2] = CFSTR("DROP TABLE locations");
  v28[3] = CFSTR("ALTER TABLE locations_alterColumnsNullable RENAME TO locations");
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v28, 4);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v34[81] = v14;
  v33[82] = CFSTR("83");
  v27[0] = CFSTR("CREATE TABLE IF NOT EXISTS events (id INTEGER PRIMARY KEY AUTOINCREMENT,entityId INTEGER NOT NULL,duplicateKey TEXT NOT NULL,sourceKey TEXT,title TEXT,content TEXT,creationTimestamp INTEGER,lastModifiedTimestamp INTEGER,whenRange TEXT,structuredData BLOB,state INTEGER,curated INTEGER)");
  v27[1] = CFSTR("CREATE TABLE IF NOT EXISTS eventTags (id INTEGER PRIMARY KEY AUTOINCREMENT,eventId INTEGER NOT NULL,name TEXT,FOREIGN KEY(eventId) REFERENCES event(id) ON DELETE RESTRICT)");
  v27[2] = CFSTR("ALTER TABLE locations ADD eventId INTEGER");
  v27[3] = CFSTR("CREATE INDEX IF NOT EXISTS events_duplicateKey_idx ON events(duplicateKey)");
  v27[4] = CFSTR("CREATE INDEX IF NOT EXISTS events_entityId_idx ON events(entityId)");
  v27[5] = CFSTR("CREATE INDEX IF NOT EXISTS eventTags_eventId_idx ON eventTags(eventId)");
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v27, 6);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v34[82] = v3;
  v33[83] = CFSTR("84");
  v34[83] = &unk_1E7E11250;
  v33[84] = CFSTR("85");
  v26[0] = CFSTR("CREATE TABLE IF NOT EXISTS mailIntelligence_featureReferenceMapping (id INTEGER PRIMARY KEY AUTOINCREMENT,sourceType INT NOT NULL,externalReference TEXT)");
  v26[1] = CFSTR("CREATE TABLE IF NOT EXISTS mailIntelligence_features (id INTEGER PRIMARY KEY AUTOINCREMENT,featureMappingId INT NOT NULL,featureName INT NOT NULL,stringValue TEXT,stringArrayValue TEXT,doubleValue NUM,doubleArrayValue TEXT,FOREIGN KEY(featureMappingId) REFERENCES mailIntelligence_featureReferenceMapping(id) ON DELETE CASCADE)");
  v26[2] = CFSTR("CREATE INDEX IF NOT EXISTS mailIntelligence_featureReferenceMapping_externalReference_idx ON mailIntelligence_featureReferenceMapping(externalReference)");
  v26[3] = CFSTR("CREATE INDEX IF NOT EXISTS mailIntelligence_features_featureMappingId_idx ON mailIntelligence_features(featureMappingId)");
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v26, 4);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v34[84] = v4;
  v33[85] = CFSTR("86");
  v25[0] = CFSTR("CREATE TABLE IF NOT EXISTS mailIntelligence_naiveBayesModelsGlobalCounts (id INTEGER PRIMARY KEY AUTOINCREMENT,featureName INTEGER NOT NULL,salientCount INTEGER NOT NULL,regularCount INTEGER NOT NULL,salientUnigramTokensCount INTEGER NOT NULL,regularUnigramTokensCount INTEGER NOT NULL,salientBigramTokensCount INTEGER NOT NULL,regularBigramTokensCount INTEGER NOT NULL,UNIQUE(featureName))");
  v25[1] = CFSTR("CREATE INDEX IF NOT EXISTS mailIntelligence_naiveBayesModelsGlobalCounts_featureName_idx ON mailIntelligence_naiveBayesModelsGlobalCounts(featureName)");
  v25[2] = CFSTR("CREATE TABLE IF NOT EXISTS mailIntelligence_naiveBayesModelsUnigramTokens (id INTEGER PRIMARY KEY AUTOINCREMENT,featureName INTEGER NOT NULL,token TEXT NOT NULL,salientCount INTEGER NOT NULL,regularCount INTEGER NOT NULL)");
  v25[3] = CFSTR("CREATE INDEX IF NOT EXISTS mailIntelligence_naiveBayesModelsUnigramTokens_featureName_idx ON mailIntelligence_naiveBayesModelsUnigramTokens(featureName)");
  v25[4] = CFSTR("CREATE TABLE IF NOT EXISTS mailIntelligence_naiveBayesModelsBigramTokens (id INTEGER PRIMARY KEY AUTOINCREMENT,featureName INTEGER NOT NULL,token TEXT NOT NULL,salientCount INTEGER NOT NULL,regularCount INTEGER NOT NULL)");
  v25[5] = CFSTR("CREATE INDEX IF NOT EXISTS mailIntelligence_naiveBayesModelsBigramTokens_featureName_idx ON mailIntelligence_naiveBayesModelsBigramTokens(featureName)");
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v25, 6);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v34[85] = v5;
  v33[86] = CFSTR("87");
  v24 = CFSTR("CREATE TABLE IF NOT EXISTS mailIntelligence_biomeProgress (id INTEGER PRIMARY KEY AUTOINCREMENT,streamName TEXT NOT NULL,progressTimestamp NUM NOT NULL)");
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v24, 1);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v34[86] = v6;
  v33[87] = CFSTR("88");
  v23 = CFSTR("CREATE TABLE IF NOT EXISTS mailIntelligence_saliency (id INTEGER PRIMARY KEY AUTOINCREMENT,creationTimestamp REAL NOT NULL,messageId TEXT NOT NULL,score NUM NOT NULL)");
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v23, 1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v34[87] = v7;
  v33[88] = CFSTR("89");
  v34[88] = &unk_1E7E11268;
  v33[89] = CFSTR("90");
  v22[0] = CFSTR("DROP TABLE IF EXISTS mailIntelligence_naiveBayesModelsUnigramTokens");
  v22[1] = CFSTR("DROP TABLE IF EXISTS mailIntelligence_naiveBayesModelsBigramTokens");
  v22[2] = CFSTR("CREATE TABLE IF NOT EXISTS mailIntelligence_naiveBayesModelsTokens (id INTEGER PRIMARY KEY AUTOINCREMENT,featureName INTEGER NOT NULL,token TEXT NOT NULL,is_unigram BOOLEAN NOT NULL,salientCount INTEGER NOT NULL,regularCount INTEGER NOT NULL)");
  v22[3] = CFSTR("CREATE UNIQUE INDEX IF NOT EXISTS mailIntelligence_naiveBayesModelsTokens_featureName_token_unigram_idx ON mailIntelligence_naiveBayesModelsTokens(featureName, token, is_unigram)");
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v22, 4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v34[89] = v8;
  v33[90] = CFSTR("91");
  v21 = CFSTR("ALTER TABLE mailIntelligence_saliency ADD COLUMN mailboxId TEXT");
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v21, 1);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v33[91] = CFSTR("92");
  v34[91] = &unk_1E7E11280;
  v33[92] = CFSTR("93");
  v34[92] = &unk_1E7E11298;
  v33[93] = CFSTR("94");
  v34[93] = &unk_1E7E112B0;
  v34[90] = v9;
  v33[94] = CFSTR("95");
  v20 = CFSTR("CREATE INDEX IF NOT EXISTS mailintelligence_saliency_covering_idx ON mailintelligence_saliency(mailboxId, creationTimestamp DESC, score, is_salient, messageId)");
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v20, 1);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v34[94] = v10;
  v33[95] = CFSTR("96");
  v19[0] = CFSTR("CREATE TABLE IF NOT EXISTS mailIntelligence_spotlightMapping (id INTEGER PRIMARY KEY AUTOINCREMENT,messageId TEXT NOT NULL,uniqueIdentifier TEXT NOT NULL,bundleIdentifier TEXT NOT NULL,terminatedDomainIdentifier TEXT)");
  v19[1] = CFSTR("CREATE UNIQUE INDEX IF NOT EXISTS mailintelligence_spotlightMapping_bundleIdentifier_uniqueIdentifier_idx ON mailIntelligence_spotlightMapping(bundleIdentifier, uniqueIdentifier)");
  v19[2] = CFSTR("CREATE INDEX IF NOT EXISTS mailintelligence_spotlightMapping_bundleIdentifier_terminatedDomainIdentifier_idx ON mailIntelligence_spotlightMapping(bundleIdentifier, terminatedDomainIdentifier)");
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v19, 3);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v34[95] = v11;
  v33[96] = CFSTR("97");
  v34[96] = &unk_1E7E112C8;
  v33[97] = CFSTR("98");
  v34[97] = &unk_1E7E112E0;
  v33[98] = CFSTR("99");
  v34[98] = &unk_1E7E112F8;
  v33[99] = CFSTR("100");
  v34[99] = &unk_1E7E11310;
  v33[100] = CFSTR("101");
  v34[100] = &unk_1E7E11328;
  v33[101] = CFSTR("102");
  v34[101] = &unk_1E7E11340;
  v33[102] = CFSTR("103");
  v34[102] = &unk_1E7E11358;
  v33[103] = CFSTR("104");
  v34[103] = &unk_1E7E11370;
  v33[104] = CFSTR("105");
  v34[104] = &unk_1E7E11388;
  v33[105] = CFSTR("106");
  v34[105] = &unk_1E7E113A0;
  v33[106] = CFSTR("107");
  v34[106] = &unk_1E7E113B8;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v34, v33, 107);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  return v12;
}

+ (id)skipFromZeroSchema:(unsigned int *)a3
{
  *a3 = 107;
  return &unk_1E7E113D0;
}

@end
