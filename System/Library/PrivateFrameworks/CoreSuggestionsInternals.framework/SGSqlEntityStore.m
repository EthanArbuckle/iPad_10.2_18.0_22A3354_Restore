@implementation SGSqlEntityStore

- (SGKeyValueCacheManager)kvCacheManager
{
  return (SGKeyValueCacheManager *)objc_getProperty(self, a2, 264, 1);
}

+ (id)defaultStore
{
  NSObject *v2;
  uint64_t v3;
  void *v4;
  uint8_t v6[16];

  pthread_mutex_lock(&defaultStore_defaultStoreInitLock);
  if (!defaultStore_instance)
  {
    sgLogHandle();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v6 = 0;
      _os_log_impl(&dword_1C3607000, v2, OS_LOG_TYPE_INFO, "Attempting to instantiate the shared default store", v6, 2u);
    }

    +[SGSqlEntityStore storeWithDefaultLocationAndExecuteJournals:](SGSqlEntityStore, "storeWithDefaultLocationAndExecuteJournals:", 1);
    v3 = objc_claimAutoreleasedReturnValue();
    v4 = (void *)defaultStore_instance;
    defaultStore_instance = v3;

  }
  pthread_mutex_unlock(&defaultStore_defaultStoreInitLock);
  return (id)defaultStore_instance;
}

- (BOOL)isEphemeral
{
  return self->_isEphemeral;
}

void __96__SGSqlEntityStore__contactIdsForContactDetailMatches_detailContactIds_socialProfileContactIds___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  objc_msgSend(v3, "bindNamedParam:toInteger:", ":pseudoContactType", 4);
  objc_msgSend(v3, "bindNamedParam:toInteger:", ":detailType", *(_QWORD *)(a1 + 40));
  objc_msgSend(v3, "bindNamedParam:toNSArray:", ":detailTags", *(_QWORD *)(a1 + 32));

}

void __124__SGSqlEntityStore_URLs__urlsFoundBetweenStartDate_endDate_excludingBundleIdentifiers_containingSubstring_flagFilter_limit___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  _QWORD v7[4];
  id v8;

  v3 = a2;
  v4 = v3;
  if (*(_QWORD *)(a1 + 32))
  {
    objc_msgSend(v3, "bindNamedParam:toNSSet:", ":excludingBundleIdentifiers");
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99E60], "set");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "bindNamedParam:toNSSet:", ":excludingBundleIdentifiers", v5);

  }
  objc_msgSend(*(id *)(a1 + 40), "timeIntervalSince1970");
  objc_msgSend(v4, "bindNamedParam:toDouble:", ":startDate");
  objc_msgSend(*(id *)(a1 + 48), "timeIntervalSince1970");
  objc_msgSend(v4, "bindNamedParam:toDouble:", ":endDate");
  objc_msgSend(v4, "bindNamedParam:toInt64:", ":limit", *(_QWORD *)(a1 + 64));
  v6 = *(void **)(a1 + 56);
  if (v6)
  {
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = __124__SGSqlEntityStore_URLs__urlsFoundBetweenStartDate_endDate_excludingBundleIdentifiers_containingSubstring_flagFilter_limit___block_invoke_3;
    v7[3] = &unk_1E7DA7CF0;
    v8 = v6;
    objc_msgSend(v4, "bindNamedParam:toBlock:", ":containingSubstringBlock", v7);

  }
  if (*(_BYTE *)(a1 + 72))
    objc_msgSend(v4, "bindNamedParam:toInt64:", ":flagFilter");

}

void __79__SGSqlEntityStore__contactIdsForContactNameMatches_strongNameIds_weakNameIds___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;

  v3 = *(void **)(a1 + 32);
  v5 = a2;
  objc_msgSend(v3, "prefilterNameMatchTerms");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "bindNamedParam:toNSString:", ":match", v4);

  objc_msgSend(*(id *)(a1 + 40), "bindCheckContactRow:isMe:", v5, objc_msgSend(*(id *)(a1 + 32), "isMe"));
}

void __67__SGSqlEntityStore__contactIdForInteractionContactIdentifierMatch___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = a2;
  objc_msgSend(v4, "bindNamedParam:toNSString:", ":interactionTag", v3);
  objc_msgSend(v4, "bindNamedParam:toInteger:", ":pseudoContact", 4);
  objc_msgSend(*(id *)(a1 + 40), "bindCheckContactRow:isMe:", v4, objc_msgSend(*(id *)(a1 + 48), "isMe"));

}

- (void)bindCheckContactRow:(id)a3 isMe:(BOOL)a4
{
  _BOOL4 v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  v4 = a4;
  v5 = (void *)MEMORY[0x1E0D197F0];
  v8 = a3;
  objc_msgSend(v5, "isSent");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "name");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "bindNamedParam:toNSString:", ":isSentTag", v7);

  objc_msgSend(v8, "bindNamedParam:toInteger:", ":isMe", v4);
}

void __95__SGSqlEntityStore_suggestContactsWithContact_withSnippets_filterConfirmRejectDetails_limitTo___block_invoke(uint64_t a1)
{
  SGSqlEntityStoreCNContactMatcherHelper *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  id v13;
  id v14;
  void (**v15)(_QWORD, _QWORD, _QWORD);
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  NSObject *v23;
  uint64_t v24;
  SGSqlEntityStoreCNContactMatcherHelper *v25;
  _QWORD v26[5];
  id v27;
  id v28;
  unint64_t v29;
  __int16 v30;
  uint8_t buf[4];
  uint64_t v32;
  _QWORD v33[2];

  v33[1] = *MEMORY[0x1E0C80C00];
  v2 = -[SGSqlEntityStoreCNContactMatcherHelper initWithCNContact:]([SGSqlEntityStoreCNContactMatcherHelper alloc], "initWithCNContact:", *(_QWORD *)(a1 + 32));
  v3 = (void *)objc_opt_new();
  v4 = (void *)objc_opt_new();
  objc_msgSend(*(id *)(a1 + 40), "_contactIdsForContactDetailMatches:detailContactIds:socialProfileContactIds:", v2, v3, v4);
  v5 = (void *)objc_opt_new();
  v6 = (void *)objc_opt_new();
  objc_msgSend(*(id *)(a1 + 40), "_contactIdsForContactNameMatches:strongNameIds:weakNameIds:", v2, v5, v6);
  v25 = v2;
  objc_msgSend(*(id *)(a1 + 40), "_contactIdForInteractionContactIdentifierMatch:", v2);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = (void *)objc_opt_new();
  v9 = (void *)objc_opt_new();
  v10 = *(_QWORD *)(a1 + 56);
  v11 = 30;
  if (v10 < 0x7FFFFFFFFFFFFFFFLL)
    v11 = -1;
  if (v11 >= v10)
    v12 = *(_QWORD *)(a1 + 56);
  else
    v12 = v11;
  v26[0] = MEMORY[0x1E0C809B0];
  v26[1] = 3221225472;
  v26[2] = __95__SGSqlEntityStore_suggestContactsWithContact_withSnippets_filterConfirmRejectDetails_limitTo___block_invoke_2;
  v26[3] = &unk_1E7DB0230;
  v26[4] = *(_QWORD *)(a1 + 40);
  v30 = *(_WORD *)(a1 + 64);
  v13 = v9;
  v27 = v13;
  v14 = v8;
  v28 = v14;
  v29 = v12;
  v15 = (void (**)(_QWORD, _QWORD, _QWORD))MEMORY[0x1C3BD5158](v26);
  objc_msgSend(v5, "allObjects");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  ((void (**)(_QWORD, void *, void *))v15)[2](v15, v16, &__block_literal_global_189);

  objc_msgSend(v6, "intersectSet:", v3);
  objc_msgSend(v6, "minusSet:", v14);
  objc_msgSend(v6, "allObjects");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  ((void (**)(_QWORD, void *, void *))v15)[2](v15, v17, &__block_literal_global_190);

  if (v7 && (objc_msgSend(v14, "containsObject:", v7) & 1) == 0)
  {
    v33[0] = v7;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v33, 1);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *, void *))v15)[2](v15, v18, &__block_literal_global_192);

  }
  objc_msgSend(v4, "minusSet:", v14);
  objc_msgSend(v4, "allObjects");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  ((void (**)(_QWORD, void *, void *))v15)[2](v15, v19, &__block_literal_global_193);

  v20 = objc_msgSend(v13, "copy");
  v21 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v22 = *(void **)(v21 + 40);
  *(_QWORD *)(v21 + 40) = v20;

  sgLogHandle();
  v23 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
  {
    v24 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "count");
    *(_DWORD *)buf = 134217984;
    v32 = v24;
    _os_log_debug_impl(&dword_1C3607000, v23, OS_LOG_TYPE_DEBUG, "Matched %lu contacts", buf, 0xCu);
  }

}

void __95__SGSqlEntityStore_suggestContactsWithContact_withSnippets_filterConfirmRejectDetails_limitTo___block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  id v11;
  _QWORD v12[4];
  id v13;
  id v14;
  id v15;
  uint64_t v16;

  v5 = a3;
  v6 = *(unsigned __int8 *)(a1 + 64);
  v7 = *(unsigned __int8 *)(a1 + 65);
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __95__SGSqlEntityStore_suggestContactsWithContact_withSnippets_filterConfirmRejectDetails_limitTo___block_invoke_3;
  v12[3] = &unk_1E7DB0208;
  v15 = v5;
  v8 = *(void **)(a1 + 32);
  v13 = *(id *)(a1 + 40);
  v9 = *(id *)(a1 + 48);
  v10 = *(_QWORD *)(a1 + 56);
  v14 = v9;
  v16 = v10;
  v11 = v5;
  objc_msgSend(v8, "_enumerateContactsForMasterEntityIds:withSnippets:filterConfirmRejectDetails:usingBlock:", a2, v6, v7, v12);

}

- (void)_enumerateContactsForMasterEntityIds:(id)a3 withSnippets:(BOOL)a4 filterConfirmRejectDetails:(BOOL)a5 usingBlock:(id)a6
{
  _BOOL8 v7;
  _BOOL8 v8;
  id v10;
  uint64_t (**v11)(id, void *);
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  void *v19;
  void *v20;
  NSObject *v21;
  NSObject *v22;
  id obj;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint8_t buf[4];
  uint64_t v29;
  _BYTE v30[128];
  uint64_t v31;

  v7 = a5;
  v8 = a4;
  v31 = *MEMORY[0x1E0C80C00];
  v10 = a3;
  v11 = (uint64_t (**)(id, void *))a6;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v12 = v10;
  v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v24, v30, 16);
  if (v13)
  {
    v14 = v13;
    v15 = 0;
    v16 = *(_QWORD *)v25;
    obj = v12;
    while (2)
    {
      for (i = 0; i != v14; ++i)
      {
        if (*(_QWORD *)v25 != v16)
          objc_enumerationMutation(obj);
        v18 = *(_QWORD *)(*((_QWORD *)&v24 + 1) + 8 * i);
        v19 = (void *)MEMORY[0x1C3BD4F6C]();
        -[SGSqlEntityStore _contactForMasterEntityId:withSnippets:filterConfirmRejectDetails:](self, "_contactForMasterEntityId:withSnippets:filterConfirmRejectDetails:", v18, v8, v7);
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        if (v20)
        {
          ++v15;
          if ((v11[2](v11, v20) & 1) == 0)
          {
            sgLogHandle();
            v21 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)buf = 0;
              _os_log_debug_impl(&dword_1C3607000, v21, OS_LOG_TYPE_DEBUG, "_enumerateContactsForMasterEntityIds aborting enumeration", buf, 2u);
            }

            objc_autoreleasePoolPop(v19);
            v12 = obj;
            goto LABEL_15;
          }
        }

        objc_autoreleasePoolPop(v19);
      }
      v12 = obj;
      v14 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v24, v30, 16);
      if (v14)
        continue;
      break;
    }
  }
  else
  {
    v15 = 0;
  }
LABEL_15:

  sgLogHandle();
  v22 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134217984;
    v29 = v15;
    _os_log_debug_impl(&dword_1C3607000, v22, OS_LOG_TYPE_DEBUG, "Loaded %tu contacts", buf, 0xCu);
  }

}

- (void)_contactIdsForContactNameMatches:(id)a3 strongNameIds:(id)a4 weakNameIds:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  SGSqliteDatabase *db;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  void (**v17)(_QWORD, _QWORD, _QWORD);
  void *v18;
  uint64_t v19;
  void *v20;
  _QWORD v21[5];
  id v22;
  _QWORD v23[4];
  id v24;
  _QWORD v25[4];
  id v26;
  SGSqlEntityStore *v27;

  v8 = a3;
  v9 = a4;
  v10 = a5;
  v11 = (void *)objc_opt_new();
  db = self->_db;
  v13 = MEMORY[0x1E0C809B0];
  v25[0] = MEMORY[0x1E0C809B0];
  v25[1] = 3221225472;
  v25[2] = __79__SGSqlEntityStore__contactIdsForContactNameMatches_strongNameIds_weakNameIds___block_invoke;
  v25[3] = &unk_1E7DB6E80;
  v14 = v8;
  v26 = v14;
  v27 = self;
  v23[0] = v13;
  v23[1] = 3221225472;
  v23[2] = __79__SGSqlEntityStore__contactIdsForContactNameMatches_strongNameIds_weakNameIds___block_invoke_2;
  v23[3] = &unk_1E7DB6ED0;
  v15 = v11;
  v24 = v15;
  -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](db, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("SELECT entity.id FROM entity_fts CROSS JOIN entity     ON entityId = entity.id WHERE messagingTerms MATCH :match     AND NOT hasInhumanTag(entity.tags) AND tagsHaveEscapedTag(entity.tags, :isSentTag) = :isMe"), v25, v23, 0);
  if (objc_msgSend(v15, "count"))
  {
    v21[0] = v13;
    v21[1] = 3221225472;
    v21[2] = __79__SGSqlEntityStore__contactIdsForContactNameMatches_strongNameIds_weakNameIds___block_invoke_3;
    v21[3] = &unk_1E7DB01E0;
    v21[4] = self;
    v16 = v15;
    v22 = v16;
    v17 = (void (**)(_QWORD, _QWORD, _QWORD))MEMORY[0x1C3BD5158](v21);
    objc_msgSend(v14, "strongNamePatterns");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, id, void *))v17)[2](v17, v9, v18);

    v19 = objc_msgSend(v9, "count");
    if (v19 != objc_msgSend(v16, "count"))
    {
      objc_msgSend(v14, "weakNamePatterns");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, id, void *))v17)[2](v17, v10, v20);

    }
  }

}

- (id)_contactIdForInteractionContactIdentifierMatch:(id)a3
{
  id v4;
  void *v5;
  SGSqliteDatabase *db;
  uint64_t v7;
  id v8;
  id v9;
  id v10;
  _QWORD v12[5];
  _QWORD v13[4];
  id v14;
  SGSqlEntityStore *v15;
  id v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  void (*v21)(uint64_t);
  id v22;

  v4 = a3;
  v17 = 0;
  v18 = &v17;
  v19 = 0x3032000000;
  v20 = __Block_byref_object_copy__22479;
  v21 = __Block_byref_object_dispose__22480;
  v22 = 0;
  objc_msgSend(v4, "interactionContactIdentifier");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  db = self->_db;
  v7 = MEMORY[0x1E0C809B0];
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = __67__SGSqlEntityStore__contactIdForInteractionContactIdentifierMatch___block_invoke;
  v13[3] = &unk_1E7DB6340;
  v8 = v5;
  v14 = v8;
  v15 = self;
  v9 = v4;
  v16 = v9;
  v12[0] = v7;
  v12[1] = 3221225472;
  v12[2] = __67__SGSqlEntityStore__contactIdForInteractionContactIdentifierMatch___block_invoke_2;
  v12[3] = &unk_1E7DB7510;
  v12[4] = &v17;
  -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](db, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("SELECT CASE WHEN entity.masterEntityId > 0 THEN entity.masterEntityId ELSE entity.id END  FROM entityTags AS t CROSS JOIN entity     ON entity.entityKey = t.entityKey AND entity.entityType = t.entityType WHERE t.tag = :interactionTag     AND t.entityType = :pseudoContact     AND NOT hasInhumanTag(entity.tags) AND tagsHaveEscapedTag(entity.tags, :isSentTag) = :isMe"), v13, v12, 0);
  v10 = (id)v18[5];

  _Block_object_dispose(&v17, 8);
  return v10;
}

void __124__SGSqlEntityStore_URLs__urlsFoundBetweenStartDate_endDate_excludingBundleIdentifiers_containingSubstring_flagFilter_limit___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  _QWORD v7[5];
  id v8;
  _QWORD v9[4];
  id v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  char v15;

  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("SELECT  url, title, received_from_handle, bundle_id, group_id, doc_id, seconds_from_1970, document_title, document_seconds_from_1970, document_time_interval, flags  FROM urls WHERE bundle_id NOT IN _pas_nsset(:excludingBundleIdentifiers)   AND (seconds_from_1970 BETWEEN :startDate AND :endDate        OR document_seconds_from_1970 BETWEEN :startDate AND :endDate)   %@ %@ ORDER BY seconds_from_1970 DESC LIMIT :limit"), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  v4 = MEMORY[0x1E0C809B0];
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __124__SGSqlEntityStore_URLs__urlsFoundBetweenStartDate_endDate_excludingBundleIdentifiers_containingSubstring_flagFilter_limit___block_invoke_2;
  v9[3] = &unk_1E7DA7D18;
  v10 = *(id *)(a1 + 56);
  v11 = *(id *)(a1 + 64);
  v5 = *(id *)(a1 + 72);
  v6 = *(_QWORD *)(a1 + 96);
  v12 = v5;
  v14 = v6;
  v13 = *(id *)(a1 + 80);
  v15 = *(_BYTE *)(a1 + 104);
  v7[0] = v4;
  v7[1] = 3221225472;
  v7[2] = __124__SGSqlEntityStore_URLs__urlsFoundBetweenStartDate_endDate_excludingBundleIdentifiers_containingSubstring_flagFilter_limit___block_invoke_4;
  v7[3] = &unk_1E7DB6BE0;
  v7[4] = *(_QWORD *)(a1 + 32);
  v8 = *(id *)(a1 + 88);
  objc_msgSend(v2, "prepAndRunSQL:onPrep:onRow:onError:", v3, v9, v7, 0);

}

- (void)_contactIdsForContactDetailMatches:(id)a3 detailContactIds:(id)a4 socialProfileContactIds:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  uint64_t v13;
  id v14;
  id v15;
  void (**v16)(_QWORD, _QWORD, _QWORD, _QWORD);
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  SGSqliteDatabase *db;
  id v22;
  SGSqliteDatabase *v23;
  uint64_t v24;
  id v25;
  _QWORD v26[4];
  id v27;
  _QWORD v28[4];
  id v29;
  SGSqlEntityStore *v30;
  id v31;
  _QWORD v32[4];
  id v33;
  _QWORD v34[4];
  id v35;
  SGSqlEntityStore *v36;
  id v37;
  _QWORD v38[5];
  id v39;
  id v40;

  v8 = a3;
  v9 = a4;
  v10 = a5;
  v11 = (void *)objc_opt_new();
  v12 = (void *)objc_opt_new();
  v13 = MEMORY[0x1E0C809B0];
  v38[0] = MEMORY[0x1E0C809B0];
  v38[1] = 3221225472;
  v38[2] = __96__SGSqlEntityStore__contactIdsForContactDetailMatches_detailContactIds_socialProfileContactIds___block_invoke;
  v38[3] = &unk_1E7DB0198;
  v38[4] = self;
  v14 = v12;
  v39 = v14;
  v15 = v11;
  v40 = v15;
  v16 = (void (**)(_QWORD, _QWORD, _QWORD, _QWORD))MEMORY[0x1C3BD5158](v38);
  objc_msgSend(v8, "socialProfileTags");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  ((void (**)(_QWORD, const __CFString *, uint64_t, void *))v16)[2](v16, CFSTR("SELECT entity.masterEntityId, entity.id, entity.entityType, entity.entityKey FROM entityTags CROSS JOIN entity     ON entity.entityKey = entityTags.entityKey AND entity.entityType = entityTags.entityType WHERE entityTags.entityType IN (:pseudoContactType, :detailType)     AND entityTags.tag IN _pas_nsarray(:detailTags)"), 19, v17);

  objc_msgSend(v8, "emailTags");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  ((void (**)(_QWORD, const __CFString *, uint64_t, void *))v16)[2](v16, CFSTR("SELECT entity.masterEntityId, entity.id, entity.entityType, entity.entityKey FROM entityTags CROSS JOIN entity     ON entity.entityKey = entityTags.entityKey AND entity.entityType = entityTags.entityType WHERE entityTags.entityType IN (:pseudoContactType, :detailType)     AND entityTags.tag IN _pas_nsarray(:detailTags)"), 8, v18);

  objc_msgSend(v8, "phoneTags");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  ((void (**)(_QWORD, const __CFString *, uint64_t, void *))v16)[2](v16, CFSTR("SELECT entity.masterEntityId, entity.id, entity.entityType, entity.entityKey FROM entityTags CROSS JOIN entity     ON entity.entityKey = entityTags.entityKey AND entity.entityType = entityTags.entityType WHERE entityTags.entityType IN (:pseudoContactType, :detailType)     AND entityTags.tag IN _pas_nsarray(:detailTags)"), 6, v19);

  objc_msgSend(v8, "addressTags");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  ((void (**)(_QWORD, const __CFString *, uint64_t, void *))v16)[2](v16, CFSTR("SELECT entity.masterEntityId, entity.id, entity.entityType, entity.entityKey FROM entityTags CROSS JOIN entity     ON entity.entityKey = entityTags.entityKey AND entity.entityType = entityTags.entityType WHERE entityTags.entityType = :detailType AND entityTags.entityType != :pseudoContactType     AND EXISTS(        SELECT value AS prefix         FROM _pas_nsarray(:detailTags)         WHERE entityTags.tag >= prefix AND entityTags.tag < firstStringAfterPrefix(prefix)    )"), 7, v20);

  if (objc_msgSend(v15, "count"))
  {
    db = self->_db;
    v34[0] = v13;
    v34[1] = 3221225472;
    v34[2] = __96__SGSqlEntityStore__contactIdsForContactDetailMatches_detailContactIds_socialProfileContactIds___block_invoke_4;
    v34[3] = &unk_1E7DB6340;
    v35 = v15;
    v36 = self;
    v22 = v8;
    v37 = v22;
    v32[0] = v13;
    v32[1] = 3221225472;
    v32[2] = __96__SGSqlEntityStore__contactIdsForContactDetailMatches_detailContactIds_socialProfileContactIds___block_invoke_5;
    v32[3] = &unk_1E7DB6ED0;
    v25 = v9;
    v33 = v9;
    -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](db, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("SELECT CASE WHEN entity.masterEntityId > 0 THEN entity.masterEntityId ELSE entity.id END  AS masterEntityId FROM entity WHERE id IN _pas_nsset(:ids)     AND NOT hasInhumanTag(entity.tags) AND tagsHaveEscapedTag(entity.tags, :isSentTag) = :isMe"), v34, v32, 0);
    if (objc_msgSend(v14, "count"))
    {
      v23 = self->_db;
      v24 = MEMORY[0x1E0C809B0];
      v28[0] = MEMORY[0x1E0C809B0];
      v28[1] = 3221225472;
      v28[2] = __96__SGSqlEntityStore__contactIdsForContactDetailMatches_detailContactIds_socialProfileContactIds___block_invoke_6;
      v28[3] = &unk_1E7DB6340;
      v29 = v14;
      v30 = self;
      v31 = v22;
      v26[0] = v24;
      v26[1] = 3221225472;
      v26[2] = __96__SGSqlEntityStore__contactIdsForContactDetailMatches_detailContactIds_socialProfileContactIds___block_invoke_7;
      v26[3] = &unk_1E7DB6ED0;
      v27 = v10;
      -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](v23, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("SELECT CASE WHEN entity.masterEntityId > 0 THEN entity.masterEntityId ELSE entity.id END  AS masterEntityId FROM entity WHERE id IN _pas_nsset(:socialProfileSubContactIds)     AND title = \"\"     AND NOT hasInhumanTag(entity.tags) AND tagsHaveEscapedTag(entity.tags, :isSentTag) = :isMe"), v28, v26, 0);

    }
    v9 = v25;
  }

}

void __96__SGSqlEntityStore__contactIdsForContactDetailMatches_detailContactIds_socialProfileContactIds___block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  _QWORD v12[5];
  id v13;
  id v14;
  uint64_t v15;
  _QWORD v16[4];
  id v17;
  uint64_t v18;

  v7 = a4;
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(void **)(a1 + 40);
  v10 = *(void **)(v8 + 8);
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3221225472;
  v16[2] = __96__SGSqlEntityStore__contactIdsForContactDetailMatches_detailContactIds_socialProfileContactIds___block_invoke_2;
  v16[3] = &unk_1E7DB6EA8;
  v17 = v7;
  v18 = a3;
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __96__SGSqlEntityStore__contactIdsForContactDetailMatches_detailContactIds_socialProfileContactIds___block_invoke_3;
  v12[3] = &unk_1E7DB0170;
  v12[4] = v8;
  v15 = a3;
  v13 = v9;
  v14 = *(id *)(a1 + 48);
  v11 = v7;
  objc_msgSend(v10, "prepAndRunSQL:onPrep:onRow:onError:", a2, v16, v12, 0);

}

- (id)suggestContactsWithContact:(id)a3 withSnippets:(BOOL)a4 filterConfirmRejectDetails:(BOOL)a5 limitTo:(unint64_t)a6
{
  id v10;
  SGSqliteDatabase *db;
  id v12;
  id v13;
  _QWORD v15[4];
  id v16;
  SGSqlEntityStore *v17;
  uint64_t *v18;
  unint64_t v19;
  BOOL v20;
  BOOL v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t);
  void (*v26)(uint64_t);
  id v27;

  v10 = a3;
  v22 = 0;
  v23 = &v22;
  v24 = 0x3032000000;
  v25 = __Block_byref_object_copy__22479;
  v26 = __Block_byref_object_dispose__22480;
  v27 = 0;
  db = self->_db;
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = __95__SGSqlEntityStore_suggestContactsWithContact_withSnippets_filterConfirmRejectDetails_limitTo___block_invoke;
  v15[3] = &unk_1E7DB02F8;
  v12 = v10;
  v16 = v12;
  v17 = self;
  v20 = a4;
  v21 = a5;
  v18 = &v22;
  v19 = a6;
  -[SGSqliteDatabase readTransaction:](db, "readTransaction:", v15);
  v13 = (id)v23[5];

  _Block_object_dispose(&v22, 8);
  return v13;
}

- (id)urlsFoundBetweenStartDate:(id)a3 endDate:(id)a4 excludingBundleIdentifiers:(id)a5 containingSubstring:(id)a6 flagFilter:(unsigned __int8)a7 limit:(int64_t)a8
{
  int v8;
  id v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  const __CFString *v18;
  const __CFString *v19;
  NSObject *v20;
  SGSqliteDatabase *db;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  NSObject *v27;
  void *v28;
  id v29;
  void *v31;
  void *v32;
  uint64_t v33;
  _QWORD v35[5];
  __CFString *v36;
  __CFString *v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  int64_t v43;
  char v44;
  uint8_t buf[4];
  id v46;
  __int16 v47;
  uint64_t v48;
  uint64_t v49;

  v8 = a7;
  v49 = *MEMORY[0x1E0C80C00];
  v13 = a3;
  v14 = a4;
  v15 = a5;
  v16 = a6;
  v17 = (void *)objc_opt_new();
  if (v16)
    v18 = CFSTR(" AND _pas_block(:containingSubstringBlock, url) ");
  else
    v18 = &stru_1E7DB83A8;
  if (v8)
    v19 = CFSTR(" AND (flags & :flagFilter) = 0 ");
  else
    v19 = &stru_1E7DB83A8;
  sgLogHandle();
  v20 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
  {
    objc_msgSend(v13, "timeIntervalSince1970");
    v32 = v31;
    objc_msgSend(v14, "timeIntervalSince1970");
    *(_DWORD *)buf = 134218240;
    v46 = v32;
    v47 = 2048;
    v48 = v33;
    _os_log_debug_impl(&dword_1C3607000, v20, OS_LOG_TYPE_DEBUG, "SGURL: query: %f - %f ", buf, 0x16u);
  }

  db = self->_db;
  v35[0] = MEMORY[0x1E0C809B0];
  v35[1] = 3221225472;
  v35[2] = __124__SGSqlEntityStore_URLs__urlsFoundBetweenStartDate_endDate_excludingBundleIdentifiers_containingSubstring_flagFilter_limit___block_invoke;
  v35[3] = &unk_1E7DA7D40;
  v35[4] = self;
  v36 = (__CFString *)v18;
  v37 = (__CFString *)v19;
  v38 = v15;
  v39 = v13;
  v40 = v14;
  v43 = a8;
  v41 = v16;
  v44 = v8;
  v22 = v17;
  v42 = v22;
  v23 = v16;
  v24 = v14;
  v25 = v13;
  v26 = v15;
  -[SGSqliteDatabase readTransaction:](db, "readTransaction:", v35);
  sgPrivateLogHandle();
  v27 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138412290;
    v46 = v22;
    _os_log_debug_impl(&dword_1C3607000, v27, OS_LOG_TYPE_DEBUG, "SGURL: urlsFoundBetweenStartDate results: %@", buf, 0xCu);
  }

  v28 = v42;
  v29 = v22;

  return v29;
}

- (id)suggestContactMatchesWithContact:(id)a3 limitTo:(unint64_t)a4
{
  id v7;
  unint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  void *v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v20;
  void *v21;
  _QWORD v22[5];
  id v23;
  id v24;
  uint8_t buf[4];
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  if (!v7)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore.m"), 1598, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("contact"));

  }
  if (a4 <= 0xA)
    v8 = 10;
  else
    v8 = a4;
  -[SGSqlEntityStore suggestContactsWithContact:withSnippets:filterConfirmRejectDetails:limitTo:](self, "suggestContactsWithContact:withSnippets:filterConfirmRejectDetails:limitTo:", v7, 1, 0, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[SGSqlEntityStore _rankSGContacts:bySimilarityToContact:](self, "_rankSGContacts:bySimilarityToContact:", v9, v7);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  v11 = (void *)objc_opt_new();
  v12 = (void *)MEMORY[0x1E0D19828];
  v22[0] = MEMORY[0x1E0C809B0];
  v22[1] = 3221225472;
  v22[2] = __61__SGSqlEntityStore_suggestContactMatchesWithContact_limitTo___block_invoke;
  v22[3] = &unk_1E7DB03F0;
  v22[4] = self;
  v23 = v7;
  v13 = v11;
  v24 = v13;
  v14 = v7;
  objc_msgSend(v12, "mapAndFilter:f:", v10, v22);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "arrayByAddingObjectsFromArray:", v13);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  sgLogHandle();
  v17 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
  {
    v20 = objc_msgSend(v16, "count");
    *(_DWORD *)buf = 134217984;
    v26 = v20;
    _os_log_debug_impl(&dword_1C3607000, v17, OS_LOG_TYPE_DEBUG, "After filtering, %lu contacts", buf, 0xCu);
  }

  if (objc_msgSend(v16, "count") > a4)
  {
    objc_msgSend(v16, "subarrayWithRange:", 0, a4);
    v18 = objc_claimAutoreleasedReturnValue();

    v16 = (void *)v18;
  }

  return v16;
}

- (id)_rankSGContacts:(id)a3 bySimilarityToContact:(id)a4
{
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  void *v10;
  char v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  id v17;
  NSObject *v18;
  _QWORD v20[5];
  id v21;
  id v22;
  uint8_t buf[16];
  _QWORD v24[4];

  v24[3] = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  objc_msgSend(MEMORY[0x1E0C97218], "descriptorForRequiredKeysForStyle:", 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = *MEMORY[0x1E0C967C0];
  v24[0] = v8;
  v24[1] = v9;
  v24[2] = *MEMORY[0x1E0C966A8];
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v24, 3);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v7, "areKeysAvailable:", v10);

  if ((v11 & 1) != 0)
  {
    objc_msgSend(MEMORY[0x1E0C97218], "stringFromContact:style:", v7, 0);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = (void *)MEMORY[0x1E0D19828];
    v20[0] = MEMORY[0x1E0C809B0];
    v20[1] = 3221225472;
    v20[2] = __58__SGSqlEntityStore__rankSGContacts_bySimilarityToContact___block_invoke;
    v20[3] = &unk_1E7DB0348;
    v20[4] = self;
    v21 = v7;
    v22 = v12;
    v14 = v12;
    objc_msgSend(v13, "map:f:", v6, v20);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "sortedArrayWithOptions:usingComparator:", 16, &__block_literal_global_204_22658);
    v16 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0D19828], "map:f:", v16, &__block_literal_global_206_22659);
    v17 = (id)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    sgLogHandle();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1C3607000, v18, OS_LOG_TYPE_DEFAULT, "rankSGContacts: target CNContact is missing required keys", buf, 2u);
    }

    v17 = v6;
  }

  return v17;
}

- (id)recentURLsWithLimit:(int64_t)a3
{
  void *v5;
  SGSqliteDatabase *db;
  id v7;
  void *v8;
  id v9;
  _QWORD v11[5];
  id v12;
  _QWORD v13[5];

  v5 = (void *)objc_opt_new();
  db = self->_db;
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = __46__SGSqlEntityStore_URLs__recentURLsWithLimit___block_invoke;
  v13[3] = &__block_descriptor_40_e29_v16__0___PASSqliteStatement_8l;
  v13[4] = a3;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __46__SGSqlEntityStore_URLs__recentURLsWithLimit___block_invoke_2;
  v11[3] = &unk_1E7DB6BE0;
  v11[4] = self;
  v7 = v5;
  v12 = v7;
  -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](db, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("SELECT  url, title, received_from_handle, bundle_id, group_id, doc_id, seconds_from_1970, document_title, document_seconds_from_1970, document_time_interval, flags  FROM urls ORDER BY seconds_from_1970 DESC LIMIT :limit"), v13, v11, 0);
  v8 = v12;
  v9 = v7;

  return v9;
}

- (BOOL)registerURLFeedback:(unsigned __int8)a3 absoluteURL:(id)a4
{
  unsigned int v4;
  id v6;
  unsigned int v7;
  BOOL v8;
  SGSqliteDatabase *db;
  id v10;
  _QWORD v12[5];
  id v13;
  char v14;

  v4 = a3;
  v6 = a4;
  v7 = 0x80204u >> (8 * v4);
  v8 = v4 >= 3;
  db = self->_db;
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  if (v8)
    LOBYTE(v7) = 0;
  v12[2] = __58__SGSqlEntityStore_URLs__registerURLFeedback_absoluteURL___block_invoke;
  v12[3] = &unk_1E7DA8F18;
  v14 = v7;
  v12[4] = self;
  v13 = v6;
  v10 = v6;
  -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v12);

  return 1;
}

- (_PASDBIterAction_)_updateURLs:(id)a3 stmt:(id)a4
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  _PASDBIterAction_ v10;
  id v11;
  double v12;
  double v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;

  v5 = a3;
  v6 = a4;
  objc_msgSend(v6, "nonnullNSStringForColumnName:table:", "url", "urls");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E98]), "initWithString:", v7);
  if (v8)
  {
    v25 = v7;
    v9 = objc_alloc(MEMORY[0x1E0C99D68]);
    objc_msgSend(v6, "getDoubleForColumnName:table:", "seconds_from_1970", "urls");
    v26 = (void *)objc_msgSend(v9, "initWithTimeIntervalSince1970:");
    if ((objc_msgSend(v6, "isNullForColumnName:table:", "document_seconds_from_1970", "urls") & 1) != 0)
    {
      v24 = 0;
    }
    else
    {
      v11 = objc_alloc(MEMORY[0x1E0C99D68]);
      objc_msgSend(v6, "getDoubleForColumnName:table:", "document_seconds_from_1970", "urls");
      v24 = (void *)objc_msgSend(v11, "initWithTimeIntervalSince1970:");
    }
    objc_msgSend(v6, "getDoubleForColumnName:table:", "document_time_interval", "urls");
    v13 = v12;
    objc_msgSend(v6, "nonnullNSStringForColumnName:table:", "bundle_id", "urls");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "nonnullNSStringForColumnName:table:", "doc_id", "urls");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = objc_alloc(MEMORY[0x1E0D19980]);
    objc_msgSend(v6, "getNSStringForColumnName:table:", "title", "urls");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "getNSStringForColumnName:table:", "received_from_handle", "urls");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "getNSStringForColumnName:table:", "group_id", "urls");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "getNSStringForColumnName:table:", "document_title", "urls");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    LOBYTE(v20) = objc_msgSend(v6, "getIntegerForColumnName:table:", "flags", "urls");
    v18 = (void *)objc_msgSend(v14, "initWithURL:title:receivedFromHandle:bundleIdentifier:groupIdentifier:documentIdentifier:documentTitle:documentDate:documentTimeInterval:receivedAt:flags:", v8, v21, v15, v23, v16, v22, v13, v17, v24, v26, v20);
    objc_msgSend(v5, "addObject:", v18);

    v10.var0 = *MEMORY[0x1E0D81780];
    v7 = v25;
  }
  else
  {
    v10.var0 = *MEMORY[0x1E0D81780];
  }

  return v10;
}

- (BOOL)writeURL:(id)a3
{
  id v4;
  SGSqliteDatabase *db;
  id v6;
  NSObject *v7;
  _QWORD v9[5];
  id v10;
  uint8_t buf[4];
  id v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  db = self->_db;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __35__SGSqlEntityStore_URLs__writeURL___block_invoke;
  v9[3] = &unk_1E7DB6A30;
  v9[4] = self;
  v6 = v4;
  v10 = v6;
  -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v9);
  sgPrivateLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138412290;
    v12 = v6;
    _os_log_debug_impl(&dword_1C3607000, v7, OS_LOG_TYPE_DEBUG, "SGURL: written: %@", buf, 0xCu);
  }

  return 1;
}

- (BOOL)trimURLs
{
  void *v3;
  BOOL v4;
  BOOL v5;
  uint64_t v7;
  uint64_t v8;

  v8 = 0;
  v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceNow:", -2592000.0);
  v4 = -[SGSqlEntityStore deleteURLsOlderThanDate:deletionCount:](self, "deleteURLsOlderThanDate:deletionCount:", v3, &v8);
  v7 = 0;
  v5 = -[SGSqlEntityStore trimURLTableDownToLimit:deletionCount:](self, "trimURLTableDownToLimit:deletionCount:", 64, &v7);
  if (v8 + v7)
    +[SGDNotificationBroadcaster emitURLChanged](SGDNotificationBroadcaster, "emitURLChanged");

  return v4 && v5;
}

- (BOOL)trimURLTableDownToLimit:(int64_t)a3 deletionCount:(int64_t *)a4
{
  SGSqliteDatabase *db;
  char v5;
  _QWORD v7[8];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;

  v8 = 0;
  v9 = &v8;
  v10 = 0x2020000000;
  v11 = 0;
  db = self->_db;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __64__SGSqlEntityStore_URLs__trimURLTableDownToLimit_deletionCount___block_invoke;
  v7[3] = &unk_1E7DA7D90;
  v7[4] = self;
  v7[5] = &v8;
  v7[6] = a3;
  v7[7] = a4;
  -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v7);
  v5 = *((_BYTE *)v9 + 24);
  _Block_object_dispose(&v8, 8);
  return v5;
}

- (BOOL)deleteURLsOlderThanDate:(id)a3 deletionCount:(int64_t *)a4
{
  id v6;
  SGSqliteDatabase *db;
  id v8;
  _QWORD v10[5];
  id v11;
  uint64_t *v12;
  int64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  char v17;

  v6 = a3;
  v14 = 0;
  v15 = &v14;
  v16 = 0x2020000000;
  v17 = 0;
  db = self->_db;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __64__SGSqlEntityStore_URLs__deleteURLsOlderThanDate_deletionCount___block_invoke;
  v10[3] = &unk_1E7DB5318;
  v12 = &v14;
  v10[4] = self;
  v8 = v6;
  v11 = v8;
  v13 = a4;
  -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v10);
  LOBYTE(a4) = *((_BYTE *)v15 + 24);

  _Block_object_dispose(&v14, 8);
  return (char)a4;
}

- (id)urlsFoundBetweenStartDate:(id)a3 endDate:(id)a4 bundleIdentifier:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  NSObject *v12;
  SGSqliteDatabase *db;
  id v14;
  id v15;
  id v16;
  id v17;
  NSObject *v18;
  void *v19;
  id v20;
  void *v22;
  void *v23;
  uint64_t v24;
  _QWORD v25[5];
  id v26;
  id v27;
  id v28;
  id v29;
  uint8_t buf[4];
  id v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  id v35;
  __int16 v36;
  id v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  v11 = (void *)objc_opt_new();
  sgLogHandle();
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    objc_msgSend(v8, "timeIntervalSince1970");
    v23 = v22;
    objc_msgSend(v9, "timeIntervalSince1970");
    *(_DWORD *)buf = 134218754;
    v31 = v23;
    v32 = 2048;
    v33 = v24;
    v34 = 2112;
    v35 = v8;
    v36 = 2112;
    v37 = v9;
    _os_log_debug_impl(&dword_1C3607000, v12, OS_LOG_TYPE_DEBUG, "SGURL: urlsFoundBetweenStartDate+bundle query: %f - %f (%@ - %@)", buf, 0x2Au);
  }

  db = self->_db;
  v25[0] = MEMORY[0x1E0C809B0];
  v25[1] = 3221225472;
  v25[2] = __77__SGSqlEntityStore_URLs__urlsFoundBetweenStartDate_endDate_bundleIdentifier___block_invoke;
  v25[3] = &unk_1E7DB57C8;
  v25[4] = self;
  v26 = v10;
  v27 = v8;
  v28 = v9;
  v14 = v11;
  v29 = v14;
  v15 = v9;
  v16 = v8;
  v17 = v10;
  -[SGSqliteDatabase readTransaction:](db, "readTransaction:", v25);
  sgPrivateLogHandle();
  v18 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138412290;
    v31 = v14;
    _os_log_debug_impl(&dword_1C3607000, v18, OS_LOG_TYPE_DEBUG, "SGURL: urlsFoundBetweenStartDate+bundle results: %@", buf, 0xCu);
  }

  v19 = v29;
  v20 = v14;

  return v20;
}

- (BOOL)deleteURLsFromBundleIdentifier:(id)a3
{
  id v4;
  SGSqliteDatabase *db;
  id v6;
  char v7;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(_QWORD *);
  void *v12;
  SGSqlEntityStore *v13;
  id v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  char v24;

  v4 = a3;
  v21 = 0;
  v22 = &v21;
  v23 = 0x2020000000;
  v24 = 0;
  v17 = 0;
  v18 = &v17;
  v19 = 0x2020000000;
  v20 = 0;
  db = self->_db;
  v9 = MEMORY[0x1E0C809B0];
  v10 = 3221225472;
  v11 = __57__SGSqlEntityStore_URLs__deleteURLsFromBundleIdentifier___block_invoke;
  v12 = &unk_1E7DB7850;
  v15 = &v21;
  v13 = self;
  v6 = v4;
  v14 = v6;
  v16 = &v17;
  -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", &v9);
  if (v18[3])
    +[SGDNotificationBroadcaster emitURLChanged](SGDNotificationBroadcaster, "emitURLChanged", v9, v10, v11, v12, v13);
  v7 = *((_BYTE *)v22 + 24);

  _Block_object_dispose(&v17, 8);
  _Block_object_dispose(&v21, 8);

  return v7;
}

- (BOOL)deleteURLsFromBundleIdentifier:(id)a3 groupIdentifierGlobs:(id)a4
{
  id v6;
  id v7;
  void *v8;
  unint64_t v9;
  SGSqliteDatabase *db;
  id v11;
  id v12;
  id v13;
  char v14;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  void *v19;
  SGSqlEntityStore *v20;
  id v21;
  id v22;
  id v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  char v33;

  v6 = a3;
  v7 = a4;
  v8 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithString:", CFSTR("DELETE FROM urls WHERE bundle_id = ? AND ((group_id GLOB ?) "));
  if ((unint64_t)objc_msgSend(v7, "count") >= 2)
  {
    v9 = 1;
    do
    {
      objc_msgSend(v8, "appendString:", CFSTR("OR (group_id GLOB ?) "));
      ++v9;
    }
    while (objc_msgSend(v7, "count") > v9);
  }
  objc_msgSend(v8, "appendString:", CFSTR(")"));
  v30 = 0;
  v31 = &v30;
  v32 = 0x2020000000;
  v33 = 0;
  v26 = 0;
  v27 = &v26;
  v28 = 0x2020000000;
  v29 = 0;
  db = self->_db;
  v16 = MEMORY[0x1E0C809B0];
  v17 = 3221225472;
  v18 = __78__SGSqlEntityStore_URLs__deleteURLsFromBundleIdentifier_groupIdentifierGlobs___block_invoke;
  v19 = &unk_1E7DA7DB8;
  v24 = &v30;
  v20 = self;
  v11 = v8;
  v21 = v11;
  v12 = v6;
  v22 = v12;
  v13 = v7;
  v23 = v13;
  v25 = &v26;
  -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", &v16);
  if (v27[3])
    +[SGDNotificationBroadcaster emitURLChanged](SGDNotificationBroadcaster, "emitURLChanged", v16, v17, v18, v19, v20, v21, v22);
  v14 = *((_BYTE *)v31 + 24);

  _Block_object_dispose(&v26, 8);
  _Block_object_dispose(&v30, 8);

  return v14;
}

- (BOOL)deleteURLsFromBundleIdentifier:(id)a3 documentIdentifiers:(id)a4
{
  id v6;
  id v7;
  SGSqliteDatabase *db;
  id v9;
  id v10;
  char v11;
  _QWORD v13[5];
  id v14;
  id v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  char v25;

  v6 = a3;
  v7 = a4;
  v22 = 0;
  v23 = &v22;
  v24 = 0x2020000000;
  v25 = 0;
  v18 = 0;
  v19 = &v18;
  v20 = 0x2020000000;
  v21 = 0;
  db = self->_db;
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = __77__SGSqlEntityStore_URLs__deleteURLsFromBundleIdentifier_documentIdentifiers___block_invoke;
  v13[3] = &unk_1E7DAB658;
  v16 = &v22;
  v13[4] = self;
  v9 = v6;
  v14 = v9;
  v10 = v7;
  v15 = v10;
  v17 = &v18;
  -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v13);
  if (v19[3])
    +[SGDNotificationBroadcaster emitURLChanged](SGDNotificationBroadcaster, "emitURLChanged");
  v11 = *((_BYTE *)v23 + 24);

  _Block_object_dispose(&v18, 8);
  _Block_object_dispose(&v22, 8);

  return v11;
}

void __77__SGSqlEntityStore_URLs__deleteURLsFromBundleIdentifier_documentIdentifiers___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, void *);
  void *v7;
  id v8;
  id v9;

  v2 = *(void **)(a1 + 40);
  v3 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v4 = MEMORY[0x1E0C809B0];
  v5 = 3221225472;
  v6 = __77__SGSqlEntityStore_URLs__deleteURLsFromBundleIdentifier_documentIdentifiers___block_invoke_2;
  v7 = &unk_1E7DB6E80;
  v8 = v2;
  v9 = *(id *)(a1 + 48);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = objc_msgSend(v3, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("DELETE FROM urls WHERE bundle_id = :bundleIdentifier AND doc_id IN _pas_nsarray(:documentIdentifiers)"), &v4, 0, 0);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = sqlite3_changes((sqlite3 *)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "handle", v4, v5, v6, v7));

}

void __77__SGSqlEntityStore_URLs__deleteURLsFromBundleIdentifier_documentIdentifiers___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = a2;
  objc_msgSend(v4, "bindNamedParam:toNonnullNSString:", ":bundleIdentifier", v3);
  objc_msgSend(v4, "bindNamedParam:toNSArray:", ":documentIdentifiers", *(_QWORD *)(a1 + 40));

}

void __78__SGSqlEntityStore_URLs__deleteURLsFromBundleIdentifier_groupIdentifierGlobs___block_invoke(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, void *);
  void *v7;
  id v8;
  id v9;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v4 = MEMORY[0x1E0C809B0];
  v5 = 3221225472;
  v6 = __78__SGSqlEntityStore_URLs__deleteURLsFromBundleIdentifier_groupIdentifierGlobs___block_invoke_2;
  v7 = &unk_1E7DB6E80;
  v8 = *(id *)(a1 + 48);
  v9 = *(id *)(a1 + 56);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = objc_msgSend(v3, "prepAndRunSQL:onPrep:onRow:onError:", v2, &v4, 0, 0);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = sqlite3_changes((sqlite3 *)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "handle", v4, v5, v6, v7));

}

void __78__SGSqlEntityStore_URLs__deleteURLsFromBundleIdentifier_groupIdentifierGlobs___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  objc_msgSend(v3, "bindParam:toNonnullNSString:", 1, *(_QWORD *)(a1 + 32));
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v4 = *(id *)(a1 + 40);
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v11;
    v8 = 2;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v11 != v7)
          objc_enumerationMutation(v4);
        objc_msgSend(v3, "bindParam:toNonnullNSString:", v8 + v9, *(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * v9), (_QWORD)v10);
        ++v9;
      }
      while (v6 != v9);
      v8 = (v8 + v9);
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v6);
  }

}

void __57__SGSqlEntityStore_URLs__deleteURLsFromBundleIdentifier___block_invoke(_QWORD *a1)
{
  void *v2;
  void *v3;
  _QWORD v4[4];
  id v5;

  v2 = (void *)a1[5];
  v3 = *(void **)(a1[4] + 8);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __57__SGSqlEntityStore_URLs__deleteURLsFromBundleIdentifier___block_invoke_2;
  v4[3] = &unk_1E7DB74A0;
  v5 = v2;
  *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = objc_msgSend(v3, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("DELETE FROM urls WHERE bundle_id = :bundleIdentifier"), v4, 0, 0);
  *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 24) = sqlite3_changes((sqlite3 *)objc_msgSend(*(id *)(a1[4] + 8), "handle"));

}

uint64_t __57__SGSqlEntityStore_URLs__deleteURLsFromBundleIdentifier___block_invoke_2(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "bindNamedParam:toNonnullNSString:", ":bundleIdentifier", *(_QWORD *)(a1 + 32));
}

void __77__SGSqlEntityStore_URLs__urlsFoundBetweenStartDate_endDate_bundleIdentifier___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  _QWORD v5[5];
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;
  id v10;

  v2 = *(void **)(a1 + 40);
  v3 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v4 = MEMORY[0x1E0C809B0];
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __77__SGSqlEntityStore_URLs__urlsFoundBetweenStartDate_endDate_bundleIdentifier___block_invoke_2;
  v7[3] = &unk_1E7DB6340;
  v8 = v2;
  v9 = *(id *)(a1 + 48);
  v10 = *(id *)(a1 + 56);
  v5[0] = v4;
  v5[1] = 3221225472;
  v5[2] = __77__SGSqlEntityStore_URLs__urlsFoundBetweenStartDate_endDate_bundleIdentifier___block_invoke_3;
  v5[3] = &unk_1E7DB6BE0;
  v5[4] = *(_QWORD *)(a1 + 32);
  v6 = *(id *)(a1 + 64);
  objc_msgSend(v3, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("SELECT  url, title, received_from_handle, bundle_id, group_id, doc_id, seconds_from_1970, document_title, document_seconds_from_1970, document_time_interval, flags  FROM urls WHERE bundle_id = :bundleId AND COALESCE(document_seconds_from_1970, seconds_from_1970) BETWEEN :startDate AND :endDate"), v7, v5, 0);

}

void __77__SGSqlEntityStore_URLs__urlsFoundBetweenStartDate_endDate_bundleIdentifier___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = a2;
  objc_msgSend(v4, "bindNamedParam:toNonnullNSString:", ":bundleId", v3);
  objc_msgSend(*(id *)(a1 + 40), "timeIntervalSince1970");
  objc_msgSend(v4, "bindNamedParam:toDouble:", ":startDate");
  objc_msgSend(*(id *)(a1 + 48), "timeIntervalSince1970");
  objc_msgSend(v4, "bindNamedParam:toDouble:", ":endDate");

}

uint64_t __77__SGSqlEntityStore_URLs__urlsFoundBetweenStartDate_endDate_bundleIdentifier___block_invoke_3(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateURLs:stmt:", *(_QWORD *)(a1 + 40), a2);
}

void __64__SGSqlEntityStore_URLs__deleteURLsOlderThanDate_deletionCount___block_invoke(_QWORD *a1)
{
  void *v2;
  void *v3;
  char v4;
  uint64_t v5;
  _QWORD v6[4];
  id v7;

  v2 = (void *)a1[5];
  v3 = *(void **)(a1[4] + 8);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __64__SGSqlEntityStore_URLs__deleteURLsOlderThanDate_deletionCount___block_invoke_2;
  v6[3] = &unk_1E7DB74A0;
  v7 = v2;
  v4 = objc_msgSend(v3, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("DELETE FROM urls WHERE seconds_from_1970 < :seconds"), v6, 0, 0);
  v5 = a1[7];
  *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = v4;
  if (v5)
    *(_QWORD *)a1[7] = sqlite3_changes((sqlite3 *)objc_msgSend(*(id *)(a1[4] + 8), "handle"));

}

void __64__SGSqlEntityStore_URLs__deleteURLsOlderThanDate_deletionCount___block_invoke_2(uint64_t a1, void *a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  objc_msgSend(v2, "timeIntervalSince1970");
  objc_msgSend(v3, "bindNamedParam:toDouble:", ":seconds");

}

uint64_t __64__SGSqlEntityStore_URLs__trimURLTableDownToLimit_deletionCount___block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t result;
  _QWORD v4[5];

  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __64__SGSqlEntityStore_URLs__trimURLTableDownToLimit_deletionCount___block_invoke_2;
  v4[3] = &__block_descriptor_40_e29_v16__0___PASSqliteStatement_8l;
  v4[4] = *(_QWORD *)(a1 + 48);
  result = objc_msgSend(v2, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("DELETE FROM urls ORDER BY id DESC LIMIT -1 OFFSET :keepThisMany"), v4, 0, 0);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  if (*(_QWORD *)(a1 + 56))
  {
    result = sqlite3_changes((sqlite3 *)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "handle"));
    **(_QWORD **)(a1 + 56) = (int)result;
  }
  return result;
}

uint64_t __64__SGSqlEntityStore_URLs__trimURLTableDownToLimit_deletionCount___block_invoke_2(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "bindNamedParam:toInt64:", ":keepThisMany", *(_QWORD *)(a1 + 32));
}

void __35__SGSqlEntityStore_URLs__writeURL___block_invoke(uint64_t a1)
{
  void *v1;
  void *v2;
  _QWORD v3[4];
  id v4;

  v1 = *(void **)(a1 + 40);
  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __35__SGSqlEntityStore_URLs__writeURL___block_invoke_2;
  v3[3] = &unk_1E7DB74A0;
  v4 = v1;
  objc_msgSend(v2, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("INSERT OR REPLACE INTO urls (url, title, received_from_handle, bundle_id, group_id, doc_id, seconds_from_1970, document_title, document_seconds_from_1970, document_time_interval, flags) VALUES (:url, :title, :receivedFromHandle, :bundleIdentifier, :groupIdentifier, :documentIdentifier, :secondsFrom1970, :documentTitle, :documentDate, :documentTimeInterval, :flags)"), v3, 0, 0);

}

void __35__SGSqlEntityStore_URLs__writeURL___block_invoke_2(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;

  v14 = a2;
  objc_msgSend(*(id *)(a1 + 32), "url");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "absoluteString");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "bindNamedParam:toNSString:", ":url", v4);

  objc_msgSend(*(id *)(a1 + 32), "title");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "bindNamedParam:toNSString:", ":title", v5);

  objc_msgSend(*(id *)(a1 + 32), "receivedFromHandle");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "bindNamedParam:toNSString:", ":receivedFromHandle", v6);

  objc_msgSend(*(id *)(a1 + 32), "bundleIdentifier");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "bindNamedParam:toNSString:", ":bundleIdentifier", v7);

  objc_msgSend(*(id *)(a1 + 32), "groupIdentifier");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "bindNamedParam:toNSString:", ":groupIdentifier", v8);

  objc_msgSend(*(id *)(a1 + 32), "documentIdentifier");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "bindNamedParam:toNSString:", ":documentIdentifier", v9);

  objc_msgSend(*(id *)(a1 + 32), "receivedAt");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "timeIntervalSince1970");
  objc_msgSend(v14, "bindNamedParam:toDouble:", ":secondsFrom1970");

  objc_msgSend(*(id *)(a1 + 32), "documentTitle");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "bindNamedParam:toNSString:", ":documentTitle", v11);

  objc_msgSend(*(id *)(a1 + 32), "documentDate");
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  if (v12)
  {
    objc_msgSend(*(id *)(a1 + 32), "documentDate");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "timeIntervalSince1970");
    objc_msgSend(v14, "bindNamedParam:toDouble:", ":documentDate");

  }
  objc_msgSend(*(id *)(a1 + 32), "documentTimeInterval");
  objc_msgSend(v14, "bindNamedParam:toDouble:", ":documentTimeInterval");
  objc_msgSend(v14, "bindNamedParam:toInteger:", ":flags", objc_msgSend(*(id *)(a1 + 32), "flags"));

}

void __58__SGSqlEntityStore_URLs__registerURLFeedback_absoluteURL___block_invoke(uint64_t a1)
{
  void *v1;
  void *v2;
  _QWORD v3[4];
  id v4;
  char v5;

  v3[0] = MEMORY[0x1E0C809B0];
  v3[2] = __58__SGSqlEntityStore_URLs__registerURLFeedback_absoluteURL___block_invoke_2;
  v3[3] = &unk_1E7DA7D68;
  v1 = *(void **)(a1 + 40);
  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v3[1] = 3221225472;
  v5 = *(_BYTE *)(a1 + 48);
  v4 = v1;
  objc_msgSend(v2, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("UPDATE urls SET flags = (flags | :flagsToSet) WHERE _pas_block(:block, url)"), v3, 0, 0);

}

void __58__SGSqlEntityStore_URLs__registerURLFeedback_absoluteURL___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;
  _QWORD v5[4];
  id v6;

  v3 = *(unsigned __int8 *)(a1 + 40);
  v4 = a2;
  objc_msgSend(v4, "bindNamedParam:toInt64:", ":flagsToSet", v3);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __58__SGSqlEntityStore_URLs__registerURLFeedback_absoluteURL___block_invoke_3;
  v5[3] = &unk_1E7DA7CF0;
  v6 = *(id *)(a1 + 32);
  objc_msgSend(v4, "bindNamedParam:toBlock:", ":block", v5);

}

id __58__SGSqlEntityStore_URLs__registerURLFeedback_absoluteURL___block_invoke_3(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;

  objc_msgSend(a2, "objectAtIndexedSubscript:", 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", objc_msgSend(*(id *)(a1 + 32), "compare:options:", v3, 1) == 0);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v4 = (void *)MEMORY[0x1E0C9AAA0];
  }

  return v4;
}

uint64_t __124__SGSqlEntityStore_URLs__urlsFoundBetweenStartDate_endDate_excludingBundleIdentifiers_containingSubstring_flagFilter_limit___block_invoke_4(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateURLs:stmt:", *(_QWORD *)(a1 + 40), a2);
}

id __124__SGSqlEntityStore_URLs__urlsFoundBetweenStartDate_endDate_excludingBundleIdentifiers_containingSubstring_flagFilter_limit___block_invoke_3(uint64_t a1, void *a2)
{
  void *v3;
  _BOOL8 v4;
  void *v5;

  objc_msgSend(a2, "objectAtIndexedSubscript:", 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v4 = objc_msgSend(v3, "rangeOfString:options:", *(_QWORD *)(a1 + 32), 1) != 0x7FFFFFFFFFFFFFFFLL;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v5 = (void *)MEMORY[0x1E0C9AAA0];
  }

  return v5;
}

uint64_t __46__SGSqlEntityStore_URLs__recentURLsWithLimit___block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "bindNamedParam:toInt64:", ":limit", *(_QWORD *)(a1 + 32));
}

uint64_t __46__SGSqlEntityStore_URLs__recentURLsWithLimit___block_invoke_2(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateURLs:stmt:", *(_QWORD *)(a1 + 40), a2);
}

- (id)getReminderWithRecordId:(id)a3
{
  return -[SGSqlEntityStore getReminder:](self, "getReminder:", -[SGSqlEntityStore reminderPrimaryKeyForEntityId:](self, "reminderPrimaryKeyForEntityId:", a3));
}

- (id)getReminderWithDuplicateKey:(id)a3
{
  void *v4;
  void *v5;

  -[SGSqlEntityStore reminderEntityIdForDuplicateKey:](self, "reminderEntityIdForDuplicateKey:", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[SGSqlEntityStore getReminder:](self, "getReminder:", -[SGSqlEntityStore reminderPrimaryKeyForEntityId:](self, "reminderPrimaryKeyForEntityId:", v4));
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

- (id)getReminder:(int64_t)a3
{
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  _QWORD v10[7];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  void (*v15)(uint64_t);
  id v16;
  _QWORD v17[5];

  v5 = MEMORY[0x1E0C809B0];
  v17[0] = MEMORY[0x1E0C809B0];
  v17[1] = 3221225472;
  v17[2] = __43__SGSqlEntityStore_Reminders__getReminder___block_invoke;
  v17[3] = &__block_descriptor_40_e23_v16__0__sqlite3_stmt__8l;
  v17[4] = a3;
  v6 = (void *)MEMORY[0x1C3BD5158](v17, a2);
  v11 = 0;
  v12 = &v11;
  v13 = 0x3032000000;
  v14 = __Block_byref_object_copy__1010;
  v15 = __Block_byref_object_dispose__1011;
  v16 = 0;
  v10[0] = v5;
  v10[1] = 3221225472;
  v10[2] = __43__SGSqlEntityStore_Reminders__getReminder___block_invoke_4;
  v10[3] = &unk_1E7DA7FB8;
  v10[5] = &v11;
  v10[6] = a3;
  v10[4] = self;
  v7 = (void *)MEMORY[0x1C3BD5158](v10);
  -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](self->_db, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("SELECT title, dueDateComponents, dueLocationId, dueLocationType, dueLocationTrigger, creationDate, contactIdentifier, reminderStatus FROM reminders WHERE id = ?"), v6, v7, 0);
  v8 = (id)v12[5];

  _Block_object_dispose(&v11, 8);
  return v8;
}

- (int64_t)commitStorageReminder:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  id v7;
  int64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  SGSqliteDatabase *db;
  id v13;
  _QWORD v15[5];
  __CFString *v16;
  id v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[4];
  id v24;
  id v25;
  SGSqlEntityStore *v26;

  v4 = a3;
  objc_msgSend(v4, "duplicateKey");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5
    && (-[SGSqlEntityStore reminderEntityIdForDuplicateKey:](self, "reminderEntityIdForDuplicateKey:", v5),
        (v6 = objc_claimAutoreleasedReturnValue()) != 0))
  {
    v7 = (id)v6;
    v8 = -[SGSqlEntityStore reminderPrimaryKeyForEntityId:](self, "reminderPrimaryKeyForEntityId:", v6);
  }
  else
  {
    objc_msgSend(v4, "toReminder");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = MEMORY[0x1E0C809B0];
    v23[0] = MEMORY[0x1E0C809B0];
    v23[1] = 3221225472;
    v23[2] = __53__SGSqlEntityStore_Reminders__commitStorageReminder___block_invoke;
    v23[3] = &unk_1E7DAC088;
    v24 = v4;
    v7 = v9;
    v25 = v7;
    v26 = self;
    v11 = (void *)MEMORY[0x1C3BD5158](v23);
    v19 = 0;
    v20 = &v19;
    v21 = 0x2020000000;
    v22 = -1;
    db = self->_db;
    v15[0] = v10;
    v15[1] = 3221225472;
    v15[2] = __53__SGSqlEntityStore_Reminders__commitStorageReminder___block_invoke_25;
    v15[3] = &unk_1E7DB74C8;
    v15[4] = self;
    v16 = CFSTR("INSERT INTO reminders (entityId, duplicateKey, sourceKey, title, dueDateComponents, dueLocationId, dueLocationType, dueLocationTrigger, sourceUrl, creationDate, opaqueKey, uniqueKey, contactIdentifier, reminderStatus) VALUES (:entityId, :duplicateKey, :sourceKey, :title, :dueDateComponents, :dueLocationId, :dueLocationType, :dueLocationTrigger, :sourceUrl, :creationDate, :opaqueKey, :uniqueKey, :contactIdentifier, :reminderStatus)");
    v13 = v11;
    v17 = v13;
    v18 = &v19;
    -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v15);
    v8 = v20[3];

    _Block_object_dispose(&v19, 8);
  }

  return v8;
}

- (id)reminderSourceKeyForDuplicateKey:(id)a3
{
  id v4;
  SGSqliteDatabase *db;
  uint64_t v6;
  id v7;
  id v8;
  _QWORD v10[5];
  _QWORD v11[4];
  id v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  void (*v17)(uint64_t);
  id v18;

  v4 = a3;
  v13 = 0;
  v14 = &v13;
  v15 = 0x3032000000;
  v16 = __Block_byref_object_copy__1010;
  v17 = __Block_byref_object_dispose__1011;
  v18 = 0;
  db = self->_db;
  v6 = MEMORY[0x1E0C809B0];
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __64__SGSqlEntityStore_Reminders__reminderSourceKeyForDuplicateKey___block_invoke;
  v11[3] = &unk_1E7DB7720;
  v7 = v4;
  v12 = v7;
  v10[0] = v6;
  v10[1] = 3221225472;
  v10[2] = __64__SGSqlEntityStore_Reminders__reminderSourceKeyForDuplicateKey___block_invoke_2;
  v10[3] = &unk_1E7DB51B8;
  v10[4] = &v13;
  -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](db, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("SELECT sourceKey FROM reminders WHERE duplicateKey = ?"), v11, v10, 0);
  v8 = (id)v14[5];

  _Block_object_dispose(&v13, 8);
  return v8;
}

- (id)reminderDuplicateKeyForEntityId:(id)a3
{
  id v4;
  SGSqliteDatabase *db;
  uint64_t v6;
  id v7;
  SGDuplicateKey *v8;
  SGDuplicateKey *v9;
  _QWORD v11[5];
  _QWORD v12[4];
  id v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  void (*v18)(uint64_t);
  id v19;

  v4 = a3;
  v14 = 0;
  v15 = &v14;
  v16 = 0x3032000000;
  v17 = __Block_byref_object_copy__1010;
  v18 = __Block_byref_object_dispose__1011;
  v19 = 0;
  db = self->_db;
  v6 = MEMORY[0x1E0C809B0];
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __63__SGSqlEntityStore_Reminders__reminderDuplicateKeyForEntityId___block_invoke;
  v12[3] = &unk_1E7DB7720;
  v7 = v4;
  v13 = v7;
  v11[0] = v6;
  v11[1] = 3221225472;
  v11[2] = __63__SGSqlEntityStore_Reminders__reminderDuplicateKeyForEntityId___block_invoke_2;
  v11[3] = &unk_1E7DB51B8;
  v11[4] = &v14;
  -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](db, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("SELECT duplicateKey FROM reminders WHERE entityId = ?"), v12, v11, 0);
  v8 = [SGDuplicateKey alloc];
  v9 = -[SGDuplicateKey initWithSerialized:](v8, "initWithSerialized:", v15[5]);

  _Block_object_dispose(&v14, 8);
  return v9;
}

- (id)reminderEntityIdForDuplicateKey:(id)a3
{
  id v4;
  SGSqliteDatabase *db;
  uint64_t v6;
  id v7;
  id v8;
  _QWORD v10[5];
  _QWORD v11[4];
  id v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  void (*v17)(uint64_t);
  id v18;

  v4 = a3;
  v13 = 0;
  v14 = &v13;
  v15 = 0x3032000000;
  v16 = __Block_byref_object_copy__1010;
  v17 = __Block_byref_object_dispose__1011;
  v18 = 0;
  db = self->_db;
  v6 = MEMORY[0x1E0C809B0];
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __63__SGSqlEntityStore_Reminders__reminderEntityIdForDuplicateKey___block_invoke;
  v11[3] = &unk_1E7DB7720;
  v7 = v4;
  v12 = v7;
  v10[0] = v6;
  v10[1] = 3221225472;
  v10[2] = __63__SGSqlEntityStore_Reminders__reminderEntityIdForDuplicateKey___block_invoke_2;
  v10[3] = &unk_1E7DB51B8;
  v10[4] = &v13;
  -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](db, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("SELECT entityId FROM reminders WHERE duplicateKey = ?"), v11, v10, 0);
  v8 = (id)v14[5];

  _Block_object_dispose(&v13, 8);
  return v8;
}

- (id)reminderOriginForPrimaryKey:(int64_t)a3
{
  SGSqliteDatabase *db;
  void *v6;
  void *v8;
  _QWORD v9[6];
  _QWORD v10[5];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  void (*v15)(uint64_t);
  id v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  void (*v21)(uint64_t);
  id v22;

  v17 = 0;
  v18 = &v17;
  v19 = 0x3032000000;
  v20 = __Block_byref_object_copy__1010;
  v21 = __Block_byref_object_dispose__1011;
  v22 = 0;
  v11 = 0;
  v12 = &v11;
  v13 = 0x3032000000;
  v14 = __Block_byref_object_copy__1010;
  v15 = __Block_byref_object_dispose__1011;
  v16 = 0;
  db = self->_db;
  v9[5] = &v11;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __59__SGSqlEntityStore_Reminders__reminderOriginForPrimaryKey___block_invoke;
  v10[3] = &__block_descriptor_40_e29_v16__0___PASSqliteStatement_8l;
  v10[4] = a3;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __59__SGSqlEntityStore_Reminders__reminderOriginForPrimaryKey___block_invoke_2;
  v9[3] = &unk_1E7DB4668;
  v9[4] = &v17;
  -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](db, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("SELECT duplicateKey, sourceKey FROM reminders WHERE id = :primaryKey"), v10, v9, 0);
  objc_msgSend(MEMORY[0x1E0D198C8], "originForDuplicateKey:sourceKey:store:", v18[5], v12[5], self);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v6)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore+Reminders.m"), 259, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("origin"));

  }
  _Block_object_dispose(&v11, 8);

  _Block_object_dispose(&v17, 8);
  return v6;
}

- (id)reminderEntityIdForPrimaryKey:(int64_t)a3
{
  uint64_t v5;
  void *v6;
  SGSqliteDatabase *db;
  void *v8;
  _QWORD v10[5];
  _QWORD v11[5];
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  v12 = 0;
  v13 = &v12;
  v14 = 0x2020000000;
  v5 = MEMORY[0x1E0C809B0];
  v15 = 0;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __61__SGSqlEntityStore_Reminders__reminderEntityIdForPrimaryKey___block_invoke;
  v11[3] = &unk_1E7DB51B8;
  v11[4] = &v12;
  v6 = (void *)MEMORY[0x1C3BD5158](v11, a2);
  db = self->_db;
  v10[0] = v5;
  v10[1] = 3221225472;
  v10[2] = __61__SGSqlEntityStore_Reminders__reminderEntityIdForPrimaryKey___block_invoke_2;
  v10[3] = &__block_descriptor_40_e23_v16__0__sqlite3_stmt__8l;
  v10[4] = a3;
  -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](db, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("SELECT entityId FROM reminders WHERE id = ?"), v10, v6, 0);
  objc_msgSend(MEMORY[0x1E0D19920], "recordIdWithNumericValue:", v13[3]);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  _Block_object_dispose(&v12, 8);
  return v8;
}

- (int64_t)reminderPrimaryKeyForEntityId:(id)a3
{
  id v4;
  uint64_t v5;
  SGSqliteDatabase *db;
  int64_t v7;
  _QWORD v9[5];
  _QWORD v10[5];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  v4 = a3;
  v5 = objc_msgSend(v4, "numericValue");
  v11 = 0;
  v12 = &v11;
  v13 = 0x2020000000;
  v14 = 0;
  db = self->_db;
  v9[4] = &v11;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __61__SGSqlEntityStore_Reminders__reminderPrimaryKeyForEntityId___block_invoke;
  v10[3] = &__block_descriptor_40_e23_v16__0__sqlite3_stmt__8l;
  v10[4] = v5;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __61__SGSqlEntityStore_Reminders__reminderPrimaryKeyForEntityId___block_invoke_2;
  v9[3] = &unk_1E7DB51B8;
  -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](db, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("SELECT id FROM reminders WHERE entityId = ?"), v10, v9, 0);
  v7 = v12[3];
  _Block_object_dispose(&v11, 8);

  return v7;
}

uint64_t __61__SGSqlEntityStore_Reminders__reminderPrimaryKeyForEntityId___block_invoke(uint64_t a1, sqlite3_stmt *a2)
{
  return sqlite3_bind_int64(a2, 1, *(_QWORD *)(a1 + 32));
}

uint64_t __61__SGSqlEntityStore_Reminders__reminderPrimaryKeyForEntityId___block_invoke_2(uint64_t a1, sqlite3_stmt *a2)
{
  void *v3;

  sqlite3_column_nsstring(a2, 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_msgSend(v3, "integerValue");

  return 1;
}

uint64_t __61__SGSqlEntityStore_Reminders__reminderEntityIdForPrimaryKey___block_invoke(uint64_t a1, sqlite3_stmt *a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = sqlite3_column_int64(a2, 0);
  return 1;
}

uint64_t __61__SGSqlEntityStore_Reminders__reminderEntityIdForPrimaryKey___block_invoke_2(uint64_t a1, sqlite3_stmt *a2)
{
  return sqlite3_bind_int64(a2, 1, *(_QWORD *)(a1 + 32));
}

uint64_t __59__SGSqlEntityStore_Reminders__reminderOriginForPrimaryKey___block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "bindNamedParam:toInt64:", ":primaryKey", *(_QWORD *)(a1 + 32));
}

uint64_t __59__SGSqlEntityStore_Reminders__reminderOriginForPrimaryKey___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  SGDuplicateKey *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  unsigned __int8 *v11;

  v3 = a2;
  objc_msgSend(v3, "nonnullNSStringForColumnName:table:", "duplicateKey", 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = -[SGDuplicateKey initWithSerialized:]([SGDuplicateKey alloc], "initWithSerialized:", v4);
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;

  objc_msgSend(v3, "getNSStringForColumnName:table:", "sourceKey", 0);
  v8 = objc_claimAutoreleasedReturnValue();

  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v10 = *(void **)(v9 + 40);
  *(_QWORD *)(v9 + 40) = v8;

  v11 = (unsigned __int8 *)MEMORY[0x1E0D81788];
  return *v11;
}

void __63__SGSqlEntityStore_Reminders__reminderEntityIdForDuplicateKey___block_invoke(uint64_t a1, sqlite3_stmt *a2)
{
  id v3;

  objc_msgSend(*(id *)(a1 + 32), "serialize");
  v3 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  sqlite3_bind_text(a2, 1, (const char *)objc_msgSend(v3, "UTF8String"), -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);

}

uint64_t __63__SGSqlEntityStore_Reminders__reminderEntityIdForDuplicateKey___block_invoke_2(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  objc_msgSend(MEMORY[0x1E0D19920], "recordIdWithNumericValue:", sqlite3_column_int64(a2, 0));
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

  return 1;
}

uint64_t __63__SGSqlEntityStore_Reminders__reminderDuplicateKeyForEntityId___block_invoke(uint64_t a1, sqlite3_stmt *a2)
{
  return sqlite3_bind_int(a2, 1, objc_msgSend(*(id *)(a1 + 32), "numericValue"));
}

uint64_t __63__SGSqlEntityStore_Reminders__reminderDuplicateKeyForEntityId___block_invoke_2(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  sqlite3_column_nsstring(a2, 0);
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

  return 1;
}

void __64__SGSqlEntityStore_Reminders__reminderSourceKeyForDuplicateKey___block_invoke(uint64_t a1, sqlite3_stmt *a2)
{
  id v3;

  objc_msgSend(*(id *)(a1 + 32), "serialize");
  v3 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  sqlite3_bind_text(a2, 1, (const char *)objc_msgSend(v3, "UTF8String"), -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);

}

uint64_t __64__SGSqlEntityStore_Reminders__reminderSourceKeyForDuplicateKey___block_invoke_2(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  sqlite3_column_nsstring(a2, 0);
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

  return 1;
}

void __53__SGSqlEntityStore_Reminders__commitStorageReminder___block_invoke(id *a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  int v25;
  void *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  objc_msgSend(a1[4], "recordId");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":entityId", objc_msgSend(v4, "numericValue"));

  objc_msgSend(a1[4], "duplicateKey");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "serialize");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  +[SGSqliteDatabase bindParam:name:nsstring:](SGSqliteDatabase, "bindParam:name:nsstring:", a2, ":duplicateKey", v6);

  objc_msgSend(a1[4], "origin");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "sourceKey");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (v8)
  {
    objc_msgSend(a1[4], "origin");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "sourceKey");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    +[SGSqliteDatabase bindParam:name:nsstring:](SGSqliteDatabase, "bindParam:name:nsstring:", a2, ":sourceKey", v10);

  }
  else
  {
    +[SGSqliteDatabase bindParamToNull:name:](SGSqliteDatabase, "bindParamToNull:name:", a2, ":sourceKey");
  }
  objc_msgSend(a1[4], "title");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  +[SGSqliteDatabase bindParam:name:nsstring:](SGSqliteDatabase, "bindParam:name:nsstring:", a2, ":title", v11);

  objc_msgSend(a1[5], "dueDateComponents");
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  if (v12)
  {
    objc_msgSend(a1[5], "dueDateComponents");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "date");
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    if (v14)
    {
      +[SGSqlEntityStore _serializeDate:](SGSqlEntityStore, "_serializeDate:", v14);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      +[SGSqliteDatabase bindParam:name:nsstring:](SGSqliteDatabase, "bindParam:name:nsstring:", a2, ":dueDateComponents", v15);

    }
    else
    {
      sgLogHandle();
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
      {
        objc_msgSend(a1[5], "dueDateComponents");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        v25 = 138412290;
        v26 = v24;
        _os_log_fault_impl(&dword_1C3607000, v16, OS_LOG_TYPE_FAULT, "null date derived from reminder.dueDateComponents is unexpected: %@", (uint8_t *)&v25, 0xCu);

      }
      if (_PASEvaluateLogFaultAndProbCrashCriteria())
        abort();
      +[SGSqliteDatabase bindParamToNull:name:](SGSqliteDatabase, "bindParamToNull:name:", a2, ":dueDateComponents");
    }

  }
  else
  {
    +[SGSqliteDatabase bindParamToNull:name:](SGSqliteDatabase, "bindParamToNull:name:", a2, ":dueDateComponents");
  }
  objc_msgSend(a1[4], "dueStorageLocation");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  if (v17)
    +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":dueLocationId", objc_msgSend(a1[6], "commitStorageLocation:", v17));
  else
    +[SGSqliteDatabase bindParamToNull:name:](SGSqliteDatabase, "bindParamToNull:name:", a2, ":dueLocationId");
  +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":dueLocationType", objc_msgSend(a1[4], "dueLocationType"));
  +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":dueLocationTrigger", objc_msgSend(a1[4], "dueLocationTrigger"));
  objc_msgSend(a1[4], "sourceURL");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "absoluteString");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  +[SGSqliteDatabase bindParam:name:nsstring:](SGSqliteDatabase, "bindParam:name:nsstring:", a2, ":sourceUrl", v19);

  objc_msgSend(a1[4], "creationDate");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "timeIntervalSince1970");
  +[SGSqliteDatabase bindParam:name:double:](SGSqliteDatabase, "bindParam:name:double:", a2, ":creationDate");

  objc_msgSend(a1[4], "opaqueKey");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  +[SGSqliteDatabase bindParam:name:nsstring:](SGSqliteDatabase, "bindParam:name:nsstring:", a2, ":opaqueKey", v21);

  objc_msgSend(a1[4], "uniqueKey");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  +[SGSqliteDatabase bindParam:name:nsstring:](SGSqliteDatabase, "bindParam:name:nsstring:", a2, ":uniqueKey", v22);

  objc_msgSend(a1[4], "contactIdentifier");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  +[SGSqliteDatabase bindParam:name:nsstring:](SGSqliteDatabase, "bindParam:name:nsstring:", a2, ":contactIdentifier", v23);

  +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":reminderStatus", objc_msgSend(a1[4], "reminderStatus"));
}

sqlite3_int64 __53__SGSqlEntityStore_Reminders__commitStorageReminder___block_invoke_25(_QWORD *a1)
{
  sqlite3_int64 result;

  objc_msgSend(*(id *)(a1[4] + 8), "prepAndRunQuery:onPrep:onRow:onError:", a1[5], a1[6], 0, 0);
  result = sqlite3_last_insert_rowid((sqlite3 *)objc_msgSend(*(id *)(a1[4] + 8), "handle"));
  *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 24) = result;
  return result;
}

uint64_t __43__SGSqlEntityStore_Reminders__getReminder___block_invoke(uint64_t a1, sqlite3_stmt *a2)
{
  return sqlite3_bind_int64(a2, 1, *(_QWORD *)(a1 + 32));
}

uint64_t __43__SGSqlEntityStore_Reminders__getReminder___block_invoke_4(uint64_t a1, sqlite3_stmt *a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  NSObject *v11;
  const char *v12;
  uint8_t *v13;
  char v14;
  double v15;
  void *v16;
  void *v17;
  void *v18;
  SGStorageReminder *v19;
  uint64_t v20;
  void *v21;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  void *v26;
  void *v27;
  uint8_t buf[2];
  __int16 v29;

  objc_msgSend(*(id *)(a1 + 32), "reminderEntityIdForPrimaryKey:", *(_QWORD *)(a1 + 48));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "reminderDuplicateKeyForEntityId:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "reminderSourceKeyForDuplicateKey:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "reminderOriginForPrimaryKey:", *(_QWORD *)(a1 + 48));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  sqlite3_column_nsstring(a2, 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  sqlite3_column_nsstring(a2, 1);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  +[SGSqlEntityStore _deserializeDateComponents:](SGSqlEntityStore, "_deserializeDateComponents:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v10)
  {
    sgLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      goto LABEL_12;
    v29 = 0;
    v12 = "SGSQLEntityStore+Reminders: unable to deserialize date components.";
    v13 = (uint8_t *)&v29;
LABEL_9:
    _os_log_impl(&dword_1C3607000, v11, OS_LOG_TYPE_DEFAULT, v12, v13, 2u);
    goto LABEL_12;
  }
  if (!v8)
  {
    sgLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      goto LABEL_12;
    *(_WORD *)buf = 0;
    v12 = "SGSQLEntityStore+Reminders: unable to fetch title.";
    v13 = buf;
    goto LABEL_9;
  }
  v26 = v7;
  v27 = v6;
  if (sqlite3_column_type(a2, 2) == 5)
  {
    v11 = 0;
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "storageLocationWithPrimaryKey:", sqlite3_column_int64(a2, 2));
    v11 = objc_claimAutoreleasedReturnValue();
  }
  v25 = sqlite3_column_int(a2, 3);
  v14 = sqlite3_column_int(a2, 4);
  v15 = sqlite3_column_double(a2, 5);
  v16 = (void *)MEMORY[0x1C3BD4F6C]();
  objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSince1970:", v15);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_autoreleasePoolPop(v16);
  sqlite3_column_nsstring(a2, 6);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v24) = sqlite3_column_int(a2, 7);
  LOBYTE(v23) = v14;
  v6 = v27;
  v19 = -[SGStorageReminder initWithRecordId:duplicateKey:sourceKey:origin:dueDate:dueLocationType:dueLocation:dueLocationTrigger:title:reminderStatus:contactIdentifier:creationDate:]([SGStorageReminder alloc], "initWithRecordId:duplicateKey:sourceKey:origin:dueDate:dueLocationType:dueLocation:dueLocationTrigger:title:reminderStatus:contactIdentifier:creationDate:", v4, v5, v27, v26, v10, v25, v11, v23, v8, v24, v18, v17);
  v20 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v21 = *(void **)(v20 + 40);
  *(_QWORD *)(v20 + 40) = v19;

  v7 = v26;
LABEL_12:

  return 1;
}

+ (id)_serializeDate:(id)a3
{
  id v3;
  void *v4;
  void *v5;

  v3 = a3;
  v4 = (void *)objc_opt_new();
  objc_msgSend(v4, "stringFromDate:", v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

+ (id)_deserializeDateComponents:(id)a3
{
  return (id)objc_msgSend(MEMORY[0x1E0C99D78], "sg_dateComponentsFromISO8601String:", a3);
}

- (void)setValue:(id)a3 forKey:(id)a4 binder:(id)a5
{
  id v7;
  id v8;
  SGSqliteDatabase *db;
  id v10;
  id v11;
  _QWORD v12[4];
  id v13;
  SGSqlEntityStore *v14;
  id v15;

  v7 = a4;
  v8 = a5;
  db = self->_db;
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __52__SGSqlEntityStore_KVStore__setValue_forKey_binder___block_invoke;
  v12[3] = &unk_1E7DB6F48;
  v14 = self;
  v15 = v8;
  v13 = v7;
  v10 = v8;
  v11 = v7;
  -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v12);

}

- (void)deleteValueForKey:(id)a3
{
  id v4;
  SGSqliteDatabase *db;
  id v6;
  _QWORD v7[4];
  id v8;
  SGSqlEntityStore *v9;

  v4 = a3;
  db = self->_db;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __47__SGSqlEntityStore_KVStore__deleteValueForKey___block_invoke;
  v7[3] = &unk_1E7DB6A30;
  v8 = v4;
  v9 = self;
  v6 = v4;
  -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v7);

}

- (id)getForKey:(id)a3 binder:(id)a4
{
  id v6;
  id v7;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  _QWORD v15[4];
  id v16;
  uint64_t *v17;
  _QWORD v18[4];
  id v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  void (*v24)(uint64_t);
  id v25;

  v6 = a3;
  v7 = a4;
  v20 = 0;
  v21 = &v20;
  v22 = 0x3032000000;
  v23 = __Block_byref_object_copy__1268;
  v24 = __Block_byref_object_dispose__1269;
  v25 = 0;
  v8 = MEMORY[0x1E0C809B0];
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 3221225472;
  v18[2] = __46__SGSqlEntityStore_KVStore__getForKey_binder___block_invoke;
  v18[3] = &unk_1E7DB74A0;
  v9 = v6;
  v19 = v9;
  v10 = (void *)MEMORY[0x1C3BD5158](v18);
  v15[0] = v8;
  v15[1] = 3221225472;
  v15[2] = __46__SGSqlEntityStore_KVStore__getForKey_binder___block_invoke_2;
  v15[3] = &unk_1E7DB63B8;
  v17 = &v20;
  v11 = v7;
  v16 = v11;
  v12 = (void *)MEMORY[0x1C3BD5158](v15);
  -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](self->_db, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("SELECT value FROM metadata WHERE key = :key LIMIT 1"), v10, v12, 0);
  v13 = (id)v21[5];

  _Block_object_dispose(&v20, 8);
  return v13;
}

- (void)setInt64NSNumber:(id)a3 forKey:(id)a4
{
  id v6;
  id v7;
  _QWORD v8[4];
  id v9;

  v6 = a3;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __53__SGSqlEntityStore_KVStore__setInt64NSNumber_forKey___block_invoke;
  v8[3] = &unk_1E7DB74A0;
  v9 = v6;
  v7 = v6;
  -[SGSqlEntityStore setValue:forKey:binder:](self, "setValue:forKey:binder:", v7, a4, v8);

}

- (id)getInt64NSNumberForKey:(id)a3
{
  return -[SGSqlEntityStore getForKey:binder:](self, "getForKey:binder:", a3, &__block_literal_global_1267);
}

- (void)incrementInt64NSNumber:(id)a3 forKey:(id)a4
{
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  int v13;
  void *v14;
  id v15;
  _QWORD v16[4];
  id v17;

  v6 = a3;
  v7 = a4;
  -[SGSqlEntityStore getInt64NSNumberForKey:](self, "getInt64NSNumberForKey:", v7);
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = (void *)v8;
  v10 = &unk_1E7E0BD50;
  if (v8)
    v10 = (void *)v8;
  v11 = v10;

  v12 = (void *)MEMORY[0x1E0CB37E8];
  v13 = objc_msgSend(v11, "intValue");

  objc_msgSend(v12, "numberWithInt:", objc_msgSend(v6, "intValue") + v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3221225472;
  v16[2] = __59__SGSqlEntityStore_KVStore__incrementInt64NSNumber_forKey___block_invoke;
  v16[3] = &unk_1E7DB74A0;
  v17 = v6;
  v15 = v6;
  -[SGSqlEntityStore setValue:forKey:binder:](self, "setValue:forKey:binder:", v14, v7, v16);

}

- (void)setDoubleNSNumber:(id)a3 forKey:(id)a4
{
  id v6;
  id v7;
  _QWORD v8[4];
  id v9;

  v6 = a3;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __54__SGSqlEntityStore_KVStore__setDoubleNSNumber_forKey___block_invoke;
  v8[3] = &unk_1E7DB74A0;
  v9 = v6;
  v7 = v6;
  -[SGSqlEntityStore setValue:forKey:binder:](self, "setValue:forKey:binder:", v7, a4, v8);

}

- (id)getDoubleNSNumberForKey:(id)a3
{
  return -[SGSqlEntityStore getForKey:binder:](self, "getForKey:binder:", a3, &__block_literal_global_14);
}

- (void)setNSString:(id)a3 forKey:(id)a4
{
  id v6;
  id v7;
  _QWORD v8[4];
  id v9;

  v6 = a3;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __48__SGSqlEntityStore_KVStore__setNSString_forKey___block_invoke;
  v8[3] = &unk_1E7DB74A0;
  v9 = v6;
  v7 = v6;
  -[SGSqlEntityStore setValue:forKey:binder:](self, "setValue:forKey:binder:", v7, a4, v8);

}

- (id)getNSStringForKey:(id)a3
{
  return -[SGSqlEntityStore getForKey:binder:](self, "getForKey:binder:", a3, &__block_literal_global_15);
}

- (void)setNSDate:(id)a3 forKey:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  _QWORD v11[4];
  id v12;

  v6 = a4;
  v7 = a3;
  v8 = (void *)objc_opt_new();
  objc_msgSend(v8, "stringFromDate:", v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __46__SGSqlEntityStore_KVStore__setNSDate_forKey___block_invoke;
  v11[3] = &unk_1E7DB74A0;
  v12 = v9;
  v10 = v9;
  -[SGSqlEntityStore setValue:forKey:binder:](self, "setValue:forKey:binder:", v10, v6, v11);

}

- (id)getNSDateForKey:(id)a3
{
  void *v3;
  void *v4;
  void *v5;

  -[SGSqlEntityStore getForKey:binder:](self, "getForKey:binder:", a3, &__block_literal_global_17);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    v4 = (void *)objc_opt_new();
    objc_msgSend(v4, "dateFromString:", v3);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t __45__SGSqlEntityStore_KVStore__getNSDateForKey___block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "getNSStringForColumn:", 0);
}

uint64_t __46__SGSqlEntityStore_KVStore__setNSDate_forKey___block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "bindNamedParam:toNSString:", ":value", *(_QWORD *)(a1 + 32));
}

uint64_t __47__SGSqlEntityStore_KVStore__getNSStringForKey___block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "getNSStringForColumn:", 0);
}

uint64_t __48__SGSqlEntityStore_KVStore__setNSString_forKey___block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "bindNamedParam:toNSString:", ":value", *(_QWORD *)(a1 + 32));
}

uint64_t __53__SGSqlEntityStore_KVStore__getDoubleNSNumberForKey___block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "getDoubleAsNSNumberForColumn:", 0);
}

uint64_t __54__SGSqlEntityStore_KVStore__setDoubleNSNumber_forKey___block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "bindNamedParam:toDoubleAsNSNumber:", ":value", *(_QWORD *)(a1 + 32));
}

uint64_t __59__SGSqlEntityStore_KVStore__incrementInt64NSNumber_forKey___block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "bindNamedParam:toInt64AsNSNumber:", ":value", *(_QWORD *)(a1 + 32));
}

uint64_t __52__SGSqlEntityStore_KVStore__getInt64NSNumberForKey___block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "getInt64AsNSNumberForColumn:", 0);
}

uint64_t __53__SGSqlEntityStore_KVStore__setInt64NSNumber_forKey___block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "bindNamedParam:toInt64AsNSNumber:", ":value", *(_QWORD *)(a1 + 32));
}

uint64_t __46__SGSqlEntityStore_KVStore__getForKey_binder___block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "bindNamedParam:toNSString:", ":key", *(_QWORD *)(a1 + 32));
}

uint64_t __46__SGSqlEntityStore_KVStore__getForKey_binder___block_invoke_2(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

  return *MEMORY[0x1E0D81788];
}

void __47__SGSqlEntityStore_KVStore__deleteValueForKey___block_invoke(uint64_t a1)
{
  void *v2;
  _QWORD v3[4];
  id v4;

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __47__SGSqlEntityStore_KVStore__deleteValueForKey___block_invoke_2;
  v3[3] = &unk_1E7DB74A0;
  v4 = *(id *)(a1 + 32);
  v2 = (void *)MEMORY[0x1C3BD5158](v3);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 8), "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("DELETE FROM metadata WHERE key = :key"), v2, 0, 0);

}

uint64_t __47__SGSqlEntityStore_KVStore__deleteValueForKey___block_invoke_2(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "bindNamedParam:toNSString:", ":key", *(_QWORD *)(a1 + 32));
}

void __52__SGSqlEntityStore_KVStore__setValue_forKey_binder___block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, void *);
  void *v6;
  id v7;
  id v8;

  v3 = MEMORY[0x1E0C809B0];
  v4 = 3221225472;
  v5 = __52__SGSqlEntityStore_KVStore__setValue_forKey_binder___block_invoke_2;
  v6 = &unk_1E7DB6390;
  v7 = *(id *)(a1 + 32);
  v8 = *(id *)(a1 + 48);
  v2 = (void *)MEMORY[0x1C3BD5158](&v3);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 8), "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("INSERT OR REPLACE INTO metadata (key, value) VALUES (:key, :value)"), v2, 0, 0, v3, v4, v5, v6);

}

void __52__SGSqlEntityStore_KVStore__setValue_forKey_binder___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = a2;
  objc_msgSend(v4, "bindNamedParam:toNSString:", ":key", v3);
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

- (id)saliencyForMessageId:(id)a3
{
  id v4;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  _QWORD v12[4];
  id v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  void (*v19)(uint64_t);
  id v20;
  _QWORD v21[4];
  id v22;

  v4 = a3;
  v5 = MEMORY[0x1E0C809B0];
  v21[0] = MEMORY[0x1E0C809B0];
  v21[1] = 3221225472;
  v21[2] = __51__SGSqlEntityStore_Saliency__saliencyForMessageId___block_invoke;
  v21[3] = &unk_1E7DB74A0;
  v6 = v4;
  v22 = v6;
  v7 = (void *)MEMORY[0x1C3BD5158](v21);
  v15 = 0;
  v16 = &v15;
  v17 = 0x3032000000;
  v18 = __Block_byref_object_copy__2256;
  v19 = __Block_byref_object_dispose__2257;
  v20 = 0;
  v12[0] = v5;
  v12[1] = 3221225472;
  v12[2] = __51__SGSqlEntityStore_Saliency__saliencyForMessageId___block_invoke_15;
  v12[3] = &unk_1E7DACEF8;
  v14 = &v15;
  v8 = v6;
  v13 = v8;
  v9 = (void *)MEMORY[0x1C3BD5158](v12);
  -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](self->_db, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("SELECT score, mailboxId, isSalient, isGteSalient, isCounted, creationTimestamp FROM mailIntelligence_saliency WHERE messageId = :messageId"), v7, v9, 0);
  v10 = (id)v16[5];

  _Block_object_dispose(&v15, 8);
  return v10;
}

- (id)topSalienciesForMailboxId:(id)a3 limit:(int64_t)a4
{
  id v6;
  void *v7;
  __CFString *v8;
  void *v9;
  uint64_t v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, void *);
  void *v21;
  id v22;
  id v23;
  _QWORD v24[4];
  id v25;
  int64_t v26;

  v6 = a3;
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", a4);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (v6)
  {
    objc_msgSend(CFSTR("SELECT messageId, score, isSalient, creationTimestamp FROM mailIntelligence_saliency WHERE isSalient != 0"), "stringByAppendingString:", CFSTR(" AND mailboxId = :mailboxId"));
    v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v8 = CFSTR("SELECT messageId, score, isSalient, creationTimestamp FROM mailIntelligence_saliency WHERE isSalient != 0");
  }
  -[__CFString stringByAppendingString:](v8, "stringByAppendingString:", CFSTR(" ORDER BY creationTimestamp DESC LIMIT :limit"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  v10 = MEMORY[0x1E0C809B0];
  v24[0] = MEMORY[0x1E0C809B0];
  v24[1] = 3221225472;
  v24[2] = __62__SGSqlEntityStore_Saliency__topSalienciesForMailboxId_limit___block_invoke;
  v24[3] = &unk_1E7DB6EA8;
  v11 = v6;
  v25 = v11;
  v26 = a4;
  v12 = (void *)MEMORY[0x1C3BD5158](v24);
  v18 = v10;
  v19 = 3221225472;
  v20 = __62__SGSqlEntityStore_Saliency__topSalienciesForMailboxId_limit___block_invoke_2;
  v21 = &unk_1E7DB6BE0;
  v13 = v7;
  v22 = v13;
  v23 = v11;
  v14 = v11;
  v15 = (void *)MEMORY[0x1C3BD5158](&v18);
  -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](self->_db, "prepAndRunSQL:onPrep:onRow:onError:", v9, v12, v15, 0, v18, v19, v20, v21);
  v16 = v13;

  return v16;
}

- (id)sortedSaliencyResultsRestrictedToMailboxTypes:(id)a3 mailboxIds:(id)a4 receivedOnOrAfter:(id)a5 ascending:(BOOL)a6 limit:(unint64_t)a7
{
  _BOOL4 v8;
  id v12;
  id v13;
  id v14;
  void *v15;
  void *v16;
  NSObject *v17;
  void *v18;
  __CFString *v19;
  void *v20;
  uint64_t v21;
  id v22;
  const __CFString *v23;
  void *v24;
  uint64_t v25;
  id v26;
  id v27;
  id v28;
  void *v29;
  id v30;
  void *v31;
  id v32;
  _QWORD v34[4];
  id v35;
  _QWORD v36[4];
  id v37;
  id v38;
  id v39;
  unint64_t v40;
  uint8_t buf[16];

  v8 = a6;
  v12 = a3;
  v13 = a4;
  v14 = a5;
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", a7);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  if (v12)
  {
    v16 = (void *)MEMORY[0x1C3BD4F6C]();
    sgMailIntelligenceLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1C3607000, v17, OS_LOG_TYPE_DEFAULT, "SGMI SGSqlEntityStore+Saliency: The sortedSaliencyResults method do not currently use mailboxType", buf, 2u);
    }

    objc_autoreleasePoolPop(v16);
  }
  if (v13)
  {
    v18 = (void *)MEMORY[0x1C3BD4F6C]();
    objc_msgSend(CFSTR("SELECT messageId, mailboxId, score, isSalient, creationTimestamp FROM mailIntelligence_saliency WHERE 1"), "stringByAppendingString:", CFSTR(" AND mailboxId IN _pas_nsarray(:mailboxIds)"));
    v19 = (__CFString *)objc_claimAutoreleasedReturnValue();
    objc_autoreleasePoolPop(v18);
    if (!v14)
      goto LABEL_8;
    goto LABEL_7;
  }
  v19 = CFSTR("SELECT messageId, mailboxId, score, isSalient, creationTimestamp FROM mailIntelligence_saliency WHERE 1");
  if (v14)
  {
LABEL_7:
    v20 = (void *)MEMORY[0x1C3BD4F6C]();
    -[__CFString stringByAppendingString:](v19, "stringByAppendingString:", CFSTR(" AND creationTimestamp > :minDate"));
    v21 = objc_claimAutoreleasedReturnValue();

    objc_autoreleasePoolPop(v20);
    v19 = (__CFString *)v21;
  }
LABEL_8:
  v22 = objc_alloc(MEMORY[0x1E0CB3940]);
  v23 = CFSTR("DESC");
  if (v8)
    v23 = CFSTR("ASC");
  v24 = (void *)objc_msgSend(v22, "initWithFormat:", CFSTR("%@ ORDER BY score %@ LIMIT :limit"), v19, v23);

  v25 = MEMORY[0x1E0C809B0];
  v36[0] = MEMORY[0x1E0C809B0];
  v36[1] = 3221225472;
  v36[2] = __121__SGSqlEntityStore_Saliency__sortedSaliencyResultsRestrictedToMailboxTypes_mailboxIds_receivedOnOrAfter_ascending_limit___block_invoke;
  v36[3] = &unk_1E7DA8568;
  v37 = v12;
  v38 = v13;
  v39 = v14;
  v40 = a7;
  v26 = v14;
  v27 = v13;
  v28 = v12;
  v29 = (void *)MEMORY[0x1C3BD5158](v36);
  v34[0] = v25;
  v34[1] = 3221225472;
  v34[2] = __121__SGSqlEntityStore_Saliency__sortedSaliencyResultsRestrictedToMailboxTypes_mailboxIds_receivedOnOrAfter_ascending_limit___block_invoke_2;
  v34[3] = &unk_1E7DB6ED0;
  v30 = v15;
  v35 = v30;
  v31 = (void *)MEMORY[0x1C3BD5158](v34);
  -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](self->_db, "prepAndRunSQL:onPrep:onRow:onError:", v24, v29, v31, 0);
  v32 = v30;

  return v32;
}

- (int64_t)checkExistsSaliencyForMessageId:(id)a3
{
  id v4;
  uint64_t v5;
  id v6;
  void *v7;
  void *v8;
  int64_t v9;
  _QWORD v11[5];
  _QWORD v12[4];
  id v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;

  v4 = a3;
  v14 = 0;
  v15 = &v14;
  v16 = 0x2020000000;
  v17 = -1;
  v5 = MEMORY[0x1E0C809B0];
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __62__SGSqlEntityStore_Saliency__checkExistsSaliencyForMessageId___block_invoke;
  v12[3] = &unk_1E7DB74A0;
  v6 = v4;
  v13 = v6;
  v7 = (void *)MEMORY[0x1C3BD5158](v12);
  v11[0] = v5;
  v11[1] = 3221225472;
  v11[2] = __62__SGSqlEntityStore_Saliency__checkExistsSaliencyForMessageId___block_invoke_2;
  v11[3] = &unk_1E7DB7510;
  v11[4] = &v14;
  v8 = (void *)MEMORY[0x1C3BD5158](v11);
  -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](self->_db, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("SELECT id FROM mailIntelligence_saliency WHERE messageId = :messageId"), v7, v8, 0);
  v9 = v15[3];

  _Block_object_dispose(&v14, 8);
  return v9;
}

- (int64_t)updateSaliency:(int64_t)a3 saliency:(id)a4
{
  id v6;
  uint64_t v7;
  id v8;
  void *v9;
  void *v10;
  SGSqliteDatabase *db;
  id v12;
  id v13;
  int64_t v14;
  _QWORD v16[5];
  __CFString *v17;
  id v18;
  id v19;
  _QWORD v20[5];
  _QWORD v21[4];
  id v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;

  v6 = a4;
  v24 = 0;
  v25 = &v24;
  v26 = 0x2020000000;
  v7 = MEMORY[0x1E0C809B0];
  v27 = -1;
  v21[0] = MEMORY[0x1E0C809B0];
  v21[1] = 3221225472;
  v21[2] = __54__SGSqlEntityStore_Saliency__updateSaliency_saliency___block_invoke;
  v21[3] = &unk_1E7DB6EA8;
  v23 = a3;
  v8 = v6;
  v22 = v8;
  v9 = (void *)MEMORY[0x1C3BD5158](v21);
  v20[0] = v7;
  v20[1] = 3221225472;
  v20[2] = __54__SGSqlEntityStore_Saliency__updateSaliency_saliency___block_invoke_2;
  v20[3] = &unk_1E7DB7510;
  v20[4] = &v24;
  v10 = (void *)MEMORY[0x1C3BD5158](v20);
  db = self->_db;
  v16[0] = v7;
  v16[1] = 3221225472;
  v16[2] = __54__SGSqlEntityStore_Saliency__updateSaliency_saliency___block_invoke_3;
  v16[3] = &unk_1E7DA90B0;
  v16[4] = self;
  v17 = CFSTR("UPDATE mailIntelligence_saliency SET messageId = :messageId, mailboxId = :mailboxId, score = :score, isSalient = :isSalient, isGteSalient = :isGteSalient, isCounted = :isCounted WHERE id = :id");
  v12 = v9;
  v18 = v12;
  v13 = v10;
  v19 = v13;
  -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v16);
  v14 = v25[3];

  _Block_object_dispose(&v24, 8);
  return v14;
}

- (int64_t)insertSaliency:(id)a3
{
  id v4;
  uint64_t v5;
  id v6;
  void *v7;
  SGSqliteDatabase *db;
  id v9;
  sqlite3_int64 insert_rowid;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(_QWORD *);
  void *v15;
  SGSqlEntityStore *v16;
  __CFString *v17;
  id v18;
  _QWORD v19[4];
  id v20;

  v4 = a3;
  v5 = MEMORY[0x1E0C809B0];
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 3221225472;
  v19[2] = __45__SGSqlEntityStore_Saliency__insertSaliency___block_invoke;
  v19[3] = &unk_1E7DB74A0;
  v20 = v4;
  v6 = v4;
  v7 = (void *)MEMORY[0x1C3BD5158](v19);
  db = self->_db;
  v12 = v5;
  v13 = 3221225472;
  v14 = __45__SGSqlEntityStore_Saliency__insertSaliency___block_invoke_2;
  v15 = &unk_1E7DB6F48;
  v16 = self;
  v17 = CFSTR("INSERT INTO mailIntelligence_saliency (creationTimestamp, messageId, mailboxId, score, isSalient, isGteSalient, isCounted) VALUES (:creationTimestamp, :messageId, :mailboxId, :score, :isSalient, :isGteSalient, :isCounted)");
  v18 = v7;
  v9 = v7;
  -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", &v12);
  insert_rowid = sqlite3_last_insert_rowid(-[SGSqliteDatabase handle](self->_db, "handle", v12, v13, v14, v15, v16));

  return insert_rowid;
}

- (int64_t)commitSaliency:(id)a3
{
  id v4;
  SGSqliteDatabase *db;
  id v6;
  int64_t v7;
  _QWORD v9[5];
  id v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  v4 = a3;
  v12 = 0;
  v13 = &v12;
  v14 = 0x2020000000;
  v15 = 0;
  db = self->_db;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __45__SGSqlEntityStore_Saliency__commitSaliency___block_invoke;
  v9[3] = &unk_1E7DB7878;
  v11 = &v12;
  v9[4] = self;
  v6 = v4;
  v10 = v6;
  -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v9);
  v7 = v13[3];

  _Block_object_dispose(&v12, 8);
  return v7;
}

- (int64_t)updateSaliencyCreationTimestampForTesting:(int64_t)a3 timestamp:(SGUnixTimestamp_)a4
{
  uint64_t v5;
  void *v6;
  void *v7;
  int64_t v8;
  _QWORD v10[5];
  _QWORD v11[6];
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  v12 = 0;
  v13 = &v12;
  v14 = 0x2020000000;
  v15 = -1;
  v5 = MEMORY[0x1E0C809B0];
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __82__SGSqlEntityStore_Saliency__updateSaliencyCreationTimestampForTesting_timestamp___block_invoke;
  v11[3] = &__block_descriptor_48_e29_v16__0___PASSqliteStatement_8l;
  v11[4] = a3;
  v11[5] = *(SGUnixTimestamp_ *)&a4.secondsFromUnixEpoch;
  v6 = (void *)MEMORY[0x1C3BD5158](v11, a2);
  v10[0] = v5;
  v10[1] = 3221225472;
  v10[2] = __82__SGSqlEntityStore_Saliency__updateSaliencyCreationTimestampForTesting_timestamp___block_invoke_2;
  v10[3] = &unk_1E7DB7510;
  v10[4] = &v12;
  v7 = (void *)MEMORY[0x1C3BD5158](v10);
  -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](self->_db, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("UPDATE mailIntelligence_saliency SET creationTimestamp = :creationTimestamp WHERE id = :id"), v6, v7, 0);
  v8 = v13[3];

  _Block_object_dispose(&v12, 8);
  return v8;
}

- (void)clearSaliencyTable
{
  SGSqliteDatabase *db;
  _QWORD v3[5];

  db = self->_db;
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __48__SGSqlEntityStore_Saliency__clearSaliencyTable__block_invoke;
  v3[3] = &unk_1E7DB56F0;
  v3[4] = self;
  -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v3);
}

- (void)setAllMailIntelligenceAsSalient
{
  SGSqliteDatabase *db;
  _QWORD v3[5];

  db = self->_db;
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __61__SGSqlEntityStore_Saliency__setAllMailIntelligenceAsSalient__block_invoke;
  v3[3] = &unk_1E7DB56F0;
  v3[4] = self;
  -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v3);
}

- (void)setAllMailIntelligenceAsNotSalient
{
  SGSqliteDatabase *db;
  _QWORD v3[5];

  db = self->_db;
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __64__SGSqlEntityStore_Saliency__setAllMailIntelligenceAsNotSalient__block_invoke;
  v3[3] = &unk_1E7DB56F0;
  v3[4] = self;
  -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v3);
}

- (id)mailIntelligenceStagedLogsForMessageId:(id)a3
{
  id v4;
  SGSqliteDatabase *db;
  uint64_t v6;
  id v7;
  SGMIStagedLogRecord *v8;
  SGMIStagedLogRecord *v9;
  SGMIMetricsMailIntelligenceForMessage *v10;
  SGMIMetricsMailIntelligenceForMessage *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  SGMIStagedLogRecord *v22;
  _QWORD v24[6];
  _QWORD v25[4];
  id v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, uint64_t);
  void (*v35)(uint64_t);
  id v36;

  v4 = a3;
  v31 = 0;
  v32 = &v31;
  v33 = 0x3032000000;
  v34 = __Block_byref_object_copy__2256;
  v35 = __Block_byref_object_dispose__2257;
  v36 = 0;
  v27 = 0;
  v28 = &v27;
  v29 = 0x2020000000;
  v30 = 0;
  db = self->_db;
  v6 = MEMORY[0x1E0C809B0];
  v25[0] = MEMORY[0x1E0C809B0];
  v25[1] = 3221225472;
  v25[2] = __69__SGSqlEntityStore_Saliency__mailIntelligenceStagedLogsForMessageId___block_invoke;
  v25[3] = &unk_1E7DB74A0;
  v7 = v4;
  v26 = v7;
  v24[0] = v6;
  v24[1] = 3221225472;
  v24[2] = __69__SGSqlEntityStore_Saliency__mailIntelligenceStagedLogsForMessageId___block_invoke_2;
  v24[3] = &unk_1E7DB4668;
  v24[4] = &v31;
  v24[5] = &v27;
  -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](db, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("SELECT stagedLog, isLogged FROM mailIntelligence_saliency WHERE messageId = :messageId"), v25, v24, 0);
  if (*((_BYTE *)v28 + 24))
  {
    v8 = [SGMIStagedLogRecord alloc];
    v9 = -[SGMIStagedLogRecord initWithLog:isLogged:](v8, "initWithLog:isLogged:", 0, *((unsigned __int8 *)v28 + 24));
  }
  else
  {
    if (v32[5])
    {
      v10 = [SGMIMetricsMailIntelligenceForMessage alloc];
      v11 = -[SGMIMetricsMailIntelligenceForMessage initWithData:](v10, "initWithData:", v32[5]);
    }
    else
    {
      v11 = (SGMIMetricsMailIntelligenceForMessage *)objc_opt_new();
      v12 = (void *)objc_opt_new();
      -[SGMIMetricsMailIntelligenceForMessage setActive:](v11, "setActive:", v12);

      v13 = (void *)objc_opt_new();
      -[SGMIMetricsMailIntelligenceForMessage active](v11, "active");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "setMissingAttachments:", v13);

      v15 = (void *)objc_opt_new();
      -[SGMIMetricsMailIntelligenceForMessage active](v11, "active");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "setMissingRecipients:", v15);

      v17 = (void *)objc_opt_new();
      -[SGMIMetricsMailIntelligenceForMessage active](v11, "active");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "setSubmodelsProbabilities:", v17);

      v19 = (void *)objc_opt_new();
      objc_msgSend(v19, "trialMetadata");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      -[SGMIMetricsMailIntelligenceForMessage active](v11, "active");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "setTrialMetadata:", v20);

    }
    v22 = [SGMIStagedLogRecord alloc];
    v9 = -[SGMIStagedLogRecord initWithLog:isLogged:](v22, "initWithLog:isLogged:", v11, *((unsigned __int8 *)v28 + 24));

  }
  _Block_object_dispose(&v27, 8);
  _Block_object_dispose(&v31, 8);

  return v9;
}

- (void)setMailIntelligenceStagedLogs:(id)a3 forMessageId:(id)a4
{
  id v6;
  void *v7;
  SGSqliteDatabase *db;
  id v9;
  id v10;
  _QWORD v11[5];
  id v12;
  id v13;

  v6 = a4;
  objc_msgSend(a3, "data");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  db = self->_db;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __73__SGSqlEntityStore_Saliency__setMailIntelligenceStagedLogs_forMessageId___block_invoke;
  v11[3] = &unk_1E7DB7800;
  v11[4] = self;
  v12 = v6;
  v13 = v7;
  v9 = v7;
  v10 = v6;
  -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v11);

}

- (void)markMailIntelligenceStagedLogsAsLoggedAndClearLogPayloadForMessageId:(id)a3
{
  id v4;
  SGSqliteDatabase *db;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  db = self->_db;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __99__SGSqlEntityStore_Saliency__markMailIntelligenceStagedLogsAsLoggedAndClearLogPayloadForMessageId___block_invoke;
  v7[3] = &unk_1E7DB6A30;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v7);

}

void __99__SGSqlEntityStore_Saliency__markMailIntelligenceStagedLogsAsLoggedAndClearLogPayloadForMessageId___block_invoke(uint64_t a1)
{
  void *v1;
  void *v2;
  _QWORD v3[4];
  id v4;

  v1 = *(void **)(a1 + 40);
  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __99__SGSqlEntityStore_Saliency__markMailIntelligenceStagedLogsAsLoggedAndClearLogPayloadForMessageId___block_invoke_2;
  v3[3] = &unk_1E7DB74A0;
  v4 = v1;
  objc_msgSend(v2, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("UPDATE mailIntelligence_saliency SET isLogged = TRUE, stagedLog = NULL WHERE messageId = :messageId"), v3, 0, 0);

}

uint64_t __99__SGSqlEntityStore_Saliency__markMailIntelligenceStagedLogsAsLoggedAndClearLogPayloadForMessageId___block_invoke_2(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "bindNamedParam:toNSString:", ":messageId", *(_QWORD *)(a1 + 32));
}

void __73__SGSqlEntityStore_Saliency__setMailIntelligenceStagedLogs_forMessageId___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  _QWORD v4[4];
  id v5;
  id v6;

  v2 = *(void **)(a1 + 40);
  v3 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __73__SGSqlEntityStore_Saliency__setMailIntelligenceStagedLogs_forMessageId___block_invoke_2;
  v4[3] = &unk_1E7DB6E80;
  v5 = v2;
  v6 = *(id *)(a1 + 48);
  objc_msgSend(v3, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("UPDATE mailIntelligence_saliency SET stagedLog=:stagedLog WHERE messageId = :messageId"), v4, 0, 0);

}

void __73__SGSqlEntityStore_Saliency__setMailIntelligenceStagedLogs_forMessageId___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = a2;
  objc_msgSend(v4, "bindNamedParam:toNSString:", ":messageId", v3);
  objc_msgSend(v4, "bindNamedParam:toNSData:", ":stagedLog", *(_QWORD *)(a1 + 40));

}

uint64_t __69__SGSqlEntityStore_Saliency__mailIntelligenceStagedLogsForMessageId___block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "bindNamedParam:toNSString:", ":messageId", *(_QWORD *)(a1 + 32));
}

uint64_t __69__SGSqlEntityStore_Saliency__mailIntelligenceStagedLogsForMessageId___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;

  v3 = a2;
  objc_msgSend(v3, "getNSDataForColumnName:table:", "stagedLog", "mailIntelligence_saliency");
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = v4;

  v7 = objc_msgSend(v3, "getIntegerForColumnName:table:", "isLogged", "mailIntelligence_saliency");
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v7 != 0;
  return *MEMORY[0x1E0D81788];
}

uint64_t __64__SGSqlEntityStore_Saliency__setAllMailIntelligenceAsNotSalient__block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("UPDATE mailIntelligence_saliency SET isSalient=0, score=0"), 0, 0, 0);
}

uint64_t __61__SGSqlEntityStore_Saliency__setAllMailIntelligenceAsSalient__block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("UPDATE mailIntelligence_saliency SET isSalient=1, score=1"), 0, 0, 0);
}

uint64_t __48__SGSqlEntityStore_Saliency__clearSaliencyTable__block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("DELETE FROM mailIntelligence_saliency"), 0, 0, 0);
}

void __82__SGSqlEntityStore_Saliency__updateSaliencyCreationTimestampForTesting_timestamp___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = a2;
  objc_msgSend(v4, "bindNamedParam:toInt64:", ":id", v3);
  objc_msgSend(v4, "bindNamedParam:toDouble:", ":creationTimestamp", *(double *)(a1 + 40));

}

uint64_t __82__SGSqlEntityStore_Saliency__updateSaliencyCreationTimestampForTesting_timestamp___block_invoke_2(uint64_t a1)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  return *MEMORY[0x1E0D81788];
}

uint64_t __45__SGSqlEntityStore_Saliency__commitSaliency___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t result;
  uint64_t v6;

  v2 = *(void **)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 40), "messageId");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend(v2, "checkExistsSaliencyForMessageId:", v3);

  v4 = *(void **)(a1 + 32);
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) & 0x8000000000000000) != 0)
  {
    result = objc_msgSend(v4, "insertSaliency:", *(_QWORD *)(a1 + 40));
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  }
  else
  {
    result = objc_msgSend(v4, "updateSaliency:saliency:");
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    if (result != -1)
      result = *(_QWORD *)(v6 + 24);
  }
  *(_QWORD *)(v6 + 24) = result;
  return result;
}

void __45__SGSqlEntityStore_Saliency__insertSaliency___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  double v6;
  double Current;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  v3 = *(void **)(a1 + 32);
  v11 = a2;
  objc_msgSend(v3, "creationDate");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    objc_msgSend(*(id *)(a1 + 32), "creationDate");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "timeIntervalSinceReferenceDate");
    Current = v6;

  }
  else
  {
    Current = CFAbsoluteTimeGetCurrent();
  }

  objc_msgSend(v11, "bindNamedParam:toDouble:", ":creationTimestamp", Current);
  objc_msgSend(*(id *)(a1 + 32), "messageId");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "bindNamedParam:toNSString:", ":messageId", v8);

  objc_msgSend(*(id *)(a1 + 32), "mailboxId");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "bindNamedParam:toNSString:", ":mailboxId", v9);

  objc_msgSend(*(id *)(a1 + 32), "score");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "bindNamedParam:toDoubleAsNSNumber:", ":score", v10);

  objc_msgSend(v11, "bindNamedParam:toInteger:", ":isSalient", objc_msgSend(*(id *)(a1 + 32), "isSalient"));
  objc_msgSend(v11, "bindNamedParam:toInteger:", ":isGteSalient", (int)objc_msgSend(*(id *)(a1 + 32), "gteSaliency"));
  objc_msgSend(v11, "bindNamedParam:toInteger:", ":isCounted", objc_msgSend(*(id *)(a1 + 32), "isCounted"));

}

uint64_t __45__SGSqlEntityStore_Saliency__insertSaliency___block_invoke_2(_QWORD *a1)
{
  return objc_msgSend(*(id *)(a1[4] + 8), "prepAndRunSQL:onPrep:onRow:onError:", a1[5], a1[6], 0, 0);
}

void __54__SGSqlEntityStore_Saliency__updateSaliency_saliency___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;
  void *v5;
  void *v6;
  id v7;

  v3 = *(_QWORD *)(a1 + 40);
  v4 = a2;
  objc_msgSend(v4, "bindNamedParam:toInt64:", ":id", v3);
  objc_msgSend(*(id *)(a1 + 32), "score");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "doubleValue");
  objc_msgSend(v4, "bindNamedParam:toDouble:", ":score");

  objc_msgSend(v4, "bindNamedParam:toInteger:", ":isSalient", objc_msgSend(*(id *)(a1 + 32), "isSalient"));
  objc_msgSend(v4, "bindNamedParam:toInteger:", ":isGteSalient", (int)objc_msgSend(*(id *)(a1 + 32), "gteSaliency"));
  objc_msgSend(v4, "bindNamedParam:toInteger:", ":isCounted", objc_msgSend(*(id *)(a1 + 32), "isCounted"));
  objc_msgSend(*(id *)(a1 + 32), "messageId");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "bindNamedParam:toNSString:", ":messageId", v6);

  objc_msgSend(*(id *)(a1 + 32), "mailboxId");
  v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "bindNamedParam:toNSString:", ":mailboxId", v7);

}

uint64_t __54__SGSqlEntityStore_Saliency__updateSaliency_saliency___block_invoke_2(uint64_t a1)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  return *MEMORY[0x1E0D81788];
}

uint64_t __54__SGSqlEntityStore_Saliency__updateSaliency_saliency___block_invoke_3(_QWORD *a1)
{
  return objc_msgSend(*(id *)(a1[4] + 8), "prepAndRunSQL:onPrep:onRow:onError:", a1[5], a1[6], a1[7], 0);
}

uint64_t __62__SGSqlEntityStore_Saliency__checkExistsSaliencyForMessageId___block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "bindNamedParam:toNSString:", ":messageId", *(_QWORD *)(a1 + 32));
}

uint64_t __62__SGSqlEntityStore_Saliency__checkExistsSaliencyForMessageId___block_invoke_2(uint64_t a1, void *a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_msgSend(a2, "getInt64ForColumnName:table:", "id", "mailIntelligence_saliency");
  return *MEMORY[0x1E0D81788];
}

void __121__SGSqlEntityStore_Saliency__sortedSaliencyResultsRestrictedToMailboxTypes_mailboxIds_receivedOnOrAfter_ascending_limit___block_invoke(_QWORD *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;

  v3 = a2;
  v4 = v3;
  v6 = v3;
  if (a1[4])
  {
    objc_msgSend(v3, "bindNamedParam:toNSArray:", ":mailboxTypes");
    v4 = v6;
  }
  if (a1[5])
  {
    objc_msgSend(v4, "bindNamedParam:toNSArray:", ":mailboxIds");
    v4 = v6;
  }
  v5 = (void *)a1[6];
  if (v5)
  {
    objc_msgSend(v5, "timeIntervalSinceReferenceDate");
    objc_msgSend(v6, "bindNamedParam:toDouble:", ":minDate");
    v4 = v6;
  }
  objc_msgSend(v4, "bindNamedParam:toInteger:", ":limit", a1[7]);

}

uint64_t __121__SGSqlEntityStore_Saliency__sortedSaliencyResultsRestrictedToMailboxTypes_mailboxIds_receivedOnOrAfter_ascending_limit___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  __CFString *v5;
  void *v6;
  _BOOL8 v7;
  double v8;
  double v9;
  void *v10;
  void *v11;
  id v12;
  const __CFString *v13;
  void *v14;
  unsigned __int8 *v15;

  v3 = a2;
  objc_msgSend(v3, "nonnullNSStringForColumnName:table:", "messageId", "mailIntelligence_saliency");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "getNSStringForColumnName:table:", "mailboxId", "mailIntelligence_saliency");
  v5 = (__CFString *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "doubleAsNonnullNSNumberForColumnName:table:", "score", "mailIntelligence_saliency");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v3, "getIntegerForColumnName:table:", "isSalient", "mailIntelligence_saliency") != 0;
  objc_msgSend(v3, "getDoubleForColumnName:table:", "creationTimestamp", "mailIntelligence_saliency");
  v9 = v8;

  objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = *(void **)(a1 + 32);
  v12 = objc_alloc(MEMORY[0x1E0D19880]);
  if (v5)
    v13 = v5;
  else
    v13 = CFSTR("Unknown Mailbox");
  v14 = (void *)objc_msgSend(v12, "initWithMessageId:mailboxId:score:isSalient:creationDate:", v4, v13, v6, v7, v10);
  objc_msgSend(v11, "addObject:", v14);

  v15 = (unsigned __int8 *)MEMORY[0x1E0D81780];
  return *v15;
}

void __62__SGSqlEntityStore_Saliency__topSalienciesForMailboxId_limit___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  id v4;

  v3 = a2;
  v4 = v3;
  if (*(_QWORD *)(a1 + 32))
  {
    objc_msgSend(v3, "bindNamedParam:toNSString:", ":mailboxId");
    v3 = v4;
  }
  objc_msgSend(v3, "bindNamedParam:toInteger:", ":limit", *(_QWORD *)(a1 + 40));

}

uint64_t __62__SGSqlEntityStore_Saliency__topSalienciesForMailboxId_limit___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  _BOOL8 v6;
  double v7;
  double v8;
  void *v9;
  void *v10;
  id v11;
  const __CFString *v12;
  void *v13;
  unsigned __int8 *v14;

  v3 = a2;
  objc_msgSend(v3, "nonnullNSStringForColumnName:table:", "messageId", "mailIntelligence_saliency");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "doubleAsNonnullNSNumberForColumnName:table:", "score", "mailIntelligence_saliency");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v3, "getIntegerForColumnName:table:", "isSalient", "mailIntelligence_saliency") != 0;
  objc_msgSend(v3, "getDoubleForColumnName:table:", "creationTimestamp", "mailIntelligence_saliency");
  v8 = v7;

  objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = *(void **)(a1 + 32);
  v11 = objc_alloc(MEMORY[0x1E0D19880]);
  if (*(_QWORD *)(a1 + 40))
    v12 = *(const __CFString **)(a1 + 40);
  else
    v12 = CFSTR("All Mailboxes");
  v13 = (void *)objc_msgSend(v11, "initWithMessageId:mailboxId:score:isSalient:creationDate:", v4, v12, v5, v6, v9);
  objc_msgSend(v10, "addObject:", v13);

  v14 = (unsigned __int8 *)MEMORY[0x1E0D81780];
  return *v14;
}

uint64_t __51__SGSqlEntityStore_Saliency__saliencyForMessageId___block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "bindNamedParam:toNSString:", ":messageId", *(_QWORD *)(a1 + 32));
}

uint64_t __51__SGSqlEntityStore_Saliency__saliencyForMessageId___block_invoke_15(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  _BOOL8 v5;
  _BOOL8 v6;
  _BOOL8 v7;
  void *v8;
  double v9;
  double v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  unsigned __int8 *v15;

  v3 = a2;
  objc_msgSend(v3, "doubleAsNonnullNSNumberForColumnName:table:", "score", "mailIntelligence_saliency");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v3, "getIntegerForColumnName:table:", "isSalient", "mailIntelligence_saliency") != 0;
  v6 = objc_msgSend(v3, "getIntegerForColumnName:table:", "isGteSalient", "mailIntelligence_saliency") != 0;
  v7 = objc_msgSend(v3, "getIntegerForColumnName:table:", "isCounted", "mailIntelligence_saliency") != 0;
  objc_msgSend(v3, "nonnullNSStringForColumnName:table:", "mailboxId", "mailIntelligence_saliency");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "getDoubleForColumnName:table:", "creationTimestamp", "mailIntelligence_saliency");
  v10 = v9;

  objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(objc_alloc(MEMORY[0x1E0D19880]), "initWithMessageId:mailboxId:score:isSalient:gteSaliency:isCounted:creationDate:", *(_QWORD *)(a1 + 32), v8, v4, v5, v6, v7, v11);
  v13 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v14 = *(void **)(v13 + 40);
  *(_QWORD *)(v13 + 40) = v12;

  v15 = (unsigned __int8 *)MEMORY[0x1E0D81788];
  return *v15;
}

- (id)uniqueIdentifierForMessageId:(id)a3
{
  id v4;
  uint64_t v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  _QWORD v11[5];
  _QWORD v12[4];
  id v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  void (*v18)(uint64_t);
  id v19;

  v4 = a3;
  v14 = 0;
  v15 = &v14;
  v16 = 0x3032000000;
  v17 = __Block_byref_object_copy__2894;
  v18 = __Block_byref_object_dispose__2895;
  v19 = 0;
  v5 = MEMORY[0x1E0C809B0];
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __76__SGSqlEntityStore_SpotlightMapping_Internal__uniqueIdentifierForMessageId___block_invoke;
  v12[3] = &unk_1E7DB74A0;
  v6 = v4;
  v13 = v6;
  v7 = (void *)MEMORY[0x1C3BD5158](v12);
  v11[0] = v5;
  v11[1] = 3221225472;
  v11[2] = __76__SGSqlEntityStore_SpotlightMapping_Internal__uniqueIdentifierForMessageId___block_invoke_2;
  v11[3] = &unk_1E7DB7510;
  v11[4] = &v14;
  v8 = (void *)MEMORY[0x1C3BD5158](v11);
  -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](self->_db, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("SELECT uniqueIdentifier FROM mailIntelligence_spotlightMapping WHERE messageId = :messageId"), v7, v8, 0);
  v9 = (id)v15[5];

  _Block_object_dispose(&v14, 8);
  return v9;
}

uint64_t __76__SGSqlEntityStore_SpotlightMapping_Internal__uniqueIdentifierForMessageId___block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "bindNamedParam:toNSString:", ":messageId", *(_QWORD *)(a1 + 32));
}

uint64_t __76__SGSqlEntityStore_SpotlightMapping_Internal__uniqueIdentifierForMessageId___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  objc_msgSend(a2, "getNSStringForColumnName:table:", "uniqueIdentifier", "mailIntelligence_spotlightMapping");
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

  return *MEMORY[0x1E0D81788];
}

- (void)storeStatsCounterWithKey:(id)a3 value:(double)a4
{
  id v6;
  SGSqliteDatabase *db;
  id v8;
  _QWORD v9[5];
  id v10;
  double v11;

  v6 = a3;
  db = self->_db;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __66__SGSqlEntityStore_StatsCounters__storeStatsCounterWithKey_value___block_invoke;
  v9[3] = &unk_1E7DB6BB8;
  v9[4] = self;
  v10 = v6;
  v11 = a4;
  v8 = v6;
  -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v9);

}

- (id)loadStatsCounterWithKey:(id)a3
{
  id v4;
  SGSqliteDatabase *db;
  uint64_t v6;
  id v7;
  id v8;
  _QWORD v10[5];
  _QWORD v11[4];
  id v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  void (*v17)(uint64_t);
  id v18;

  v4 = a3;
  v13 = 0;
  v14 = &v13;
  v15 = 0x3032000000;
  v16 = __Block_byref_object_copy__5510;
  v17 = __Block_byref_object_dispose__5511;
  v18 = 0;
  db = self->_db;
  v6 = MEMORY[0x1E0C809B0];
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __59__SGSqlEntityStore_StatsCounters__loadStatsCounterWithKey___block_invoke;
  v11[3] = &unk_1E7DB7720;
  v7 = v4;
  v12 = v7;
  v10[0] = v6;
  v10[1] = 3221225472;
  v10[2] = __59__SGSqlEntityStore_StatsCounters__loadStatsCounterWithKey___block_invoke_2;
  v10[3] = &unk_1E7DB51B8;
  v10[4] = &v13;
  -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](db, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("SELECT value FROM statsCounters WHERE key = :key"), v11, v10, 0);
  v8 = (id)v14[5];

  _Block_object_dispose(&v13, 8);
  return v8;
}

- (double)incStatsCounterWithKey:(id)a3 byValue:(double)a4
{
  id v6;
  SGSqliteDatabase *db;
  id v8;
  double v9;
  _QWORD v11[5];
  id v12;
  uint64_t *v13;
  double v14;
  uint64_t v15;
  double *v16;
  uint64_t v17;
  uint64_t v18;

  v6 = a3;
  v15 = 0;
  v16 = (double *)&v15;
  v17 = 0x2020000000;
  v18 = 0;
  db = self->_db;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __66__SGSqlEntityStore_StatsCounters__incStatsCounterWithKey_byValue___block_invoke;
  v11[3] = &unk_1E7DB5318;
  v11[4] = self;
  v8 = v6;
  v12 = v8;
  v13 = &v15;
  v14 = a4;
  -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v11);
  v9 = v16[3];

  _Block_object_dispose(&v15, 8);
  return v9;
}

- (double)incStatsCounterWithKey:(id)a3
{
  double result;

  -[SGSqlEntityStore incStatsCounterWithKey:byValue:](self, "incStatsCounterWithKey:byValue:", a3, 1.0);
  return result;
}

- (void)_logConfirmPercentWithConfirmCount:(double)a3 rejectCount:(double)a4 domain:(id)a5 suffix:(id)a6
{
  double v6;

  v6 = a3 + a4;
  if (v6 > 15.0)
    +[SGAggregateLogging setKeyWithDomain:suffix:toValue:](SGAggregateLogging, "setKeyWithDomain:suffix:toValue:", a5, a6, (unint64_t)(a3 * 100.0 / v6));
}

- (void)logConfirmPercentAfterContactConfirmation
{
  double v3;
  double v4;
  double v5;
  id v6;

  -[SGSqlEntityStore incStatsCounterWithKey:](self, "incStatsCounterWithKey:", CFSTR("contactConfirmations"));
  v4 = v3;
  -[SGSqlEntityStore loadStatsCounterWithKey:](self, "loadStatsCounterWithKey:", CFSTR("contactRejections"));
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "doubleValue");
  -[SGSqlEntityStore _logConfirmPercentWithConfirmCount:rejectCount:domain:suffix:](self, "_logConfirmPercentWithConfirmCount:rejectCount:domain:suffix:", CFSTR("behavior.scalar.confirmPercent"), CFSTR("contacts.contact"), v4, v5);

}

- (void)logConfirmPercentAfterContactRejection
{
  id v3;

  -[SGSqlEntityStore incStatsCounterWithKey:](self, "incStatsCounterWithKey:", CFSTR("contactRejections"));
  -[SGSqlEntityStore loadStatsCounterWithKey:](self, "loadStatsCounterWithKey:", CFSTR("contactConfirmations"));
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "doubleValue");
  -[SGSqlEntityStore _logConfirmPercentWithConfirmCount:rejectCount:domain:suffix:](self, "_logConfirmPercentWithConfirmCount:rejectCount:domain:suffix:", CFSTR("behavior.scalar.confirmPercent"), CFSTR("contacts.contact"));

}

- (void)logConfirmPercentAfterContactDetailConfirmation
{
  double v3;
  double v4;
  double v5;
  id v6;

  -[SGSqlEntityStore incStatsCounterWithKey:](self, "incStatsCounterWithKey:", CFSTR("contactDetailConfirmations"));
  v4 = v3;
  -[SGSqlEntityStore loadStatsCounterWithKey:](self, "loadStatsCounterWithKey:", CFSTR("contactDetailRejections"));
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "doubleValue");
  -[SGSqlEntityStore _logConfirmPercentWithConfirmCount:rejectCount:domain:suffix:](self, "_logConfirmPercentWithConfirmCount:rejectCount:domain:suffix:", CFSTR("behavior.scalar.confirmPercent"), CFSTR("contacts.detail"), v4, v5);

}

- (void)logConfirmPercentAfterContactDetailRejection
{
  id v3;

  -[SGSqlEntityStore incStatsCounterWithKey:](self, "incStatsCounterWithKey:", CFSTR("contactDetailRejections"));
  -[SGSqlEntityStore loadStatsCounterWithKey:](self, "loadStatsCounterWithKey:", CFSTR("contactDetailConfirmations"));
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "doubleValue");
  -[SGSqlEntityStore _logConfirmPercentWithConfirmCount:rejectCount:domain:suffix:](self, "_logConfirmPercentWithConfirmCount:rejectCount:domain:suffix:", CFSTR("behavior.scalar.confirmPercent"), CFSTR("contacts.detail"));

}

void __66__SGSqlEntityStore_StatsCounters__incStatsCounterWithKey_byValue___block_invoke(uint64_t a1)
{
  void *v2;
  double v3;
  double v4;
  id v5;

  objc_msgSend(*(id *)(a1 + 32), "loadStatsCounterWithKey:", *(_QWORD *)(a1 + 40));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v2;
  if (v2)
  {
    objc_msgSend(v2, "doubleValue");
    v4 = v3 + *(double *)(a1 + 56);
  }
  else
  {
    v4 = *(double *)(a1 + 56);
  }
  *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = v4;
  objc_msgSend(*(id *)(a1 + 32), "storeStatsCounterWithKey:value:", *(_QWORD *)(a1 + 40), *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24));

}

uint64_t __59__SGSqlEntityStore_StatsCounters__loadStatsCounterWithKey___block_invoke(uint64_t a1, uint64_t a2)
{
  return +[SGSqliteDatabase bindParam:name:nsstring:](SGSqliteDatabase, "bindParam:name:nsstring:", a2, ":key", *(_QWORD *)(a1 + 32));
}

uint64_t __59__SGSqlEntityStore_StatsCounters__loadStatsCounterWithKey___block_invoke_2(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", sqlite3_column_double(a2, 0));
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

  return 1;
}

void __66__SGSqlEntityStore_StatsCounters__storeStatsCounterWithKey_value___block_invoke(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  _QWORD v5[2];
  _QWORD v6[3];

  v6[2] = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v5[1] = CFSTR("value");
  v6[0] = v1;
  v5[0] = CFSTR("key");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *(double *)(a1 + 48));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v6[1] = v3;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v6, v5, 2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "insertOrReplaceIntoTable:dictionary:onError:", CFSTR("statsCounters"), v4, 0);

}

- (BOOL)_isIdentityStoreDirty
{
  unsigned __int8 v2;

  v2 = atomic_load((unsigned __int8 *)&self->_identityStoreDirty);
  return v2 & 1;
}

- (void)_markIdentityStoreDirty
{
  atomic_store(1u, (unsigned __int8 *)&self->_identityStoreDirty);
}

- (void)_markIdentityStoreClean
{
  atomic_store(0, (unsigned __int8 *)&self->_identityStoreDirty);
}

- (id)batch:(id)a3
{
  (*((void (**)(id, SEL))a3 + 2))(a3, a2);
  return -[SGSqlEntityStore getNewBlobsIfChanged](self, "getNewBlobsIfChanged");
}

- (id)getNewBlobsIfChanged
{
  void *v3;

  if (-[SGSqlEntityStore _isIdentityStoreDirty](self, "_isIdentityStoreDirty"))
  {
    -[SGSqlEntityStore computeBlobs](self, "computeBlobs");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    -[SGSqlEntityStore _markIdentityStoreClean](self, "_markIdentityStoreClean");
  }
  else
  {
    v3 = 0;
  }
  return v3;
}

- (BOOL)syncNewBlobsIfChanged
{
  SGSqliteDatabase *db;
  char v3;
  _QWORD v5[6];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  char v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v9 = 0;
  db = self->_db;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __56__SGSqlEntityStore_IdentityStore__syncNewBlobsIfChanged__block_invoke;
  v5[3] = &unk_1E7DB78A0;
  v5[4] = self;
  v5[5] = &v6;
  -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v5);
  v3 = *((_BYTE *)v7 + 24);
  _Block_object_dispose(&v6, 8);
  return v3;
}

- (void)forceBlobSync
{
  id v3;

  -[SGSqlEntityStore computeBlobs](self, "computeBlobs");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  -[SGSqlEntityStore writeIdentityBlobs:forceRewrite:](self, "writeIdentityBlobs:forceRewrite:", v3, 1);

}

- (void)addInterdictFrom:(id)a3 with:(id)a4
{
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  SGSqliteDatabase *db;
  id v12;
  id v13;
  id v14;
  _QWORD v15[5];
  id v16;
  id v17;

  v14 = a3;
  v6 = a4;
  if (objc_msgSend(v14, "intersectsSet:", v6))
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("SGIStore error"), CFSTR("Can not add interdict between non-disjoint sets %@ and %@"), v14, v6);
  sgMap();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  SGDelimitedStringsSerializeArray();
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  sgMap();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  SGDelimitedStringsSerializeArray();
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  db = self->_db;
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = __57__SGSqlEntityStore_IdentityStore__addInterdictFrom_with___block_invoke_3;
  v15[3] = &unk_1E7DB7800;
  v15[4] = self;
  v16 = v8;
  v17 = v10;
  v12 = v10;
  v13 = v8;
  -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v15);

}

- (id)loadInterdicts
{
  void *v3;
  SGSqliteDatabase *db;
  id v5;
  _QWORD v7[4];
  id v8;

  v3 = (void *)objc_opt_new();
  db = self->_db;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __49__SGSqlEntityStore_IdentityStore__loadInterdicts__block_invoke;
  v7[3] = &unk_1E7DB52C8;
  v5 = v3;
  v8 = v5;
  -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](db, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("SELECT a, b FROM identityInterdict"), 0, v7, 0);

  return v5;
}

- (id)splitNeededFor:(id)a3 withInterdicts:(id)a4 curatedRecordIds:(id)a5
{
  id v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  void *v16;
  void *v17;
  void *v18;
  char v19;
  uint64_t v20;
  void *j;
  uint64_t v22;
  void *v23;
  void *v24;
  id v25;
  void *v26;
  void *v27;
  void *v28;
  id v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _BYTE v39[128];
  _QWORD v40[2];
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = a4;
  v9 = a5;
  if ((unint64_t)objc_msgSend(v7, "count") >= 2 && (unint64_t)objc_msgSend(v7, "count") <= 0x64)
  {
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v30 = v8;
    v11 = v8;
    v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v35, v41, 16);
    if (v12)
    {
      v13 = v12;
      v14 = *(_QWORD *)v36;
      do
      {
        for (i = 0; i != v13; ++i)
        {
          if (*(_QWORD *)v36 != v14)
            objc_enumerationMutation(v11);
          v16 = *(void **)(*((_QWORD *)&v35 + 1) + 8 * i);
          objc_msgSend(v16, "first");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          if ((objc_msgSend(v7, "intersectsSet:", v17) & 1) != 0)
          {
            objc_msgSend(v16, "second");
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            v19 = objc_msgSend(v7, "intersectsSet:", v18);

            if ((v19 & 1) != 0)
            {
              v25 = (id)objc_msgSend(v7, "mutableCopy");
              objc_msgSend(v16, "first");
              v26 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v25, "intersectSet:", v26);

              v27 = (void *)objc_msgSend(v7, "mutableCopy");
              objc_msgSend(v16, "second");
              v28 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v27, "intersectSet:", v28);

              v40[0] = v25;
              v40[1] = v27;
              objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v40, 2);
              v10 = (void *)objc_claimAutoreleasedReturnValue();

              goto LABEL_26;
            }
          }
          else
          {

          }
        }
        v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v35, v41, 16);
      }
      while (v13);
    }

    v11 = (id)objc_opt_new();
    v31 = 0u;
    v32 = 0u;
    v33 = 0u;
    v34 = 0u;
    v25 = v7;
    v10 = (void *)objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v31, v39, 16);
    if (v10)
    {
      v20 = *(_QWORD *)v32;
      while (2)
      {
        for (j = 0; j != v10; j = (char *)j + 1)
        {
          if (*(_QWORD *)v32 != v20)
            objc_enumerationMutation(v25);
          v22 = *(_QWORD *)(*((_QWORD *)&v31 + 1) + 8 * (_QWORD)j);
          if (objc_msgSend(v9, "containsObject:", v22))
          {
            v23 = (void *)MEMORY[0x1C3BD4F6C]();
            v24 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E60]), "initWithObjects:", v22, 0);
            objc_autoreleasePoolPop(v23);
            objc_msgSend(v11, "addObject:", v24);

            if (objc_msgSend(v11, "count") == 2)
            {
              v11 = v11;
              v10 = v11;
              goto LABEL_26;
            }
          }
        }
        v10 = (void *)objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v31, v39, 16);
        if (v10)
          continue;
        break;
      }
    }
LABEL_26:

    v8 = v30;
  }
  else
  {
    v10 = 0;
  }

  return v10;
}

- (BOOL)processPseudoContactEntity:(id)a3 recordId:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  BOOL v22;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;

  v6 = a3;
  v7 = a4;
  -[SGSqlEntityStore loadAllContactDetailsForRecordId:](self, "loadAllContactDetailsForRecordId:", v7);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  +[SGDeduper splitContactDetailsByType:](SGDeduper, "splitContactDetailsByType:");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (void *)MEMORY[0x1E0D19828];
  objc_msgSend(v8, "objectForKey:", &unk_1E7E0C020);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "map:f:", v10, &__block_literal_global_54);
  v27 = (void *)objc_claimAutoreleasedReturnValue();

  v11 = (void *)MEMORY[0x1E0D19828];
  objc_msgSend(v8, "objectForKey:", &unk_1E7E0C038);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "map:f:", v12, &__block_literal_global_57);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  v14 = (void *)MEMORY[0x1E0D19828];
  objc_msgSend(v8, "objectForKey:", &unk_1E7E0C050);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "map:f:", v15, &__block_literal_global_60);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  v28 = v6;
  objc_msgSend(v6, "title");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = objc_msgSend(v13, "count");
  if (v18)
  {
    objc_msgSend(v13, "objectAtIndexedSubscript:", 0);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "value");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v19 = 0;
  }
  objc_msgSend(v28, "tags");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0D197F0], "isSent");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v24) = objc_msgSend(v20, "containsObject:", v21);
  v22 = -[SGSqlEntityStore registerAndLinkIdentity:recordId:phones:socialProfiles:email:curated:isSent:](self, "registerAndLinkIdentity:recordId:phones:socialProfiles:email:curated:isSent:", v17, v7, v27, v16, v19, 0, v24);

  if (v18)
  {

  }
  return v22;
}

- (BOOL)processContactEnrichment:(id)a3 recordId:(id)a4
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  int IsContact;
  BOOL v12;
  void *v14;
  void *v15;

  v7 = a3;
  v8 = a4;
  v9 = v8;
  if (!v7)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore+Identity.m"), 247, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("entity"));

    if (v9)
      goto LABEL_3;
LABEL_9:
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore+Identity.m"), 248, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("recordId"));

    goto LABEL_3;
  }
  if (!v8)
    goto LABEL_9;
LABEL_3:
  objc_msgSend(v7, "duplicateKey");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "entityType");
  IsContact = SGEntityTypeIsContact();

  v12 = IsContact
     && (objc_msgSend(v7, "isInhuman") & 1) == 0
     && -[SGSqlEntityStore processPseudoContactEntity:recordId:](self, "processPseudoContactEntity:recordId:", v7, v9);

  return v12;
}

- (BOOL)rebuildIdentityTables
{
  SGSqliteDatabase *db;
  _QWORD v6[7];
  _QWORD v7[3];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;

  v8 = 0;
  v9 = &v8;
  v10 = 0x2020000000;
  v11 = 1;
  v7[2] = 0;
  v7[0] = CFSTR("rebuildIdentityTables");
  v7[1] = mach_absolute_time();
  db = self->_db;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __56__SGSqlEntityStore_IdentityStore__rebuildIdentityTables__block_invoke;
  v6[3] = &unk_1E7DB5BC8;
  v6[5] = &v8;
  v6[6] = a2;
  v6[4] = self;
  -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v6);
  SGRecordMeasurementState(v7);
  LODWORD(a2) = *((unsigned __int8 *)v9 + 24);
  SGRecordMeasurementState(v7);
  _Block_object_dispose(&v8, 8);
  return (_DWORD)a2 != 0;
}

- (BOOL)registerAndLinkIdentity:(id)a3 recordId:(id)a4 phones:(id)a5 socialProfiles:(id)a6 email:(id)a7 curated:(BOOL)a8
{
  uint64_t v9;

  LOBYTE(v9) = 0;
  return -[SGSqlEntityStore registerAndLinkIdentity:recordId:phones:socialProfiles:email:curated:isSent:](self, "registerAndLinkIdentity:recordId:phones:socialProfiles:email:curated:isSent:", a3, a4, a5, a6, a7, a8, v9);
}

- (BOOL)registerAndLinkIdentity:(id)a3 recordId:(id)a4 phones:(id)a5 socialProfiles:(id)a6 email:(id)a7 curated:(BOOL)a8 isSent:(BOOL)a9
{
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  void *v18;
  BOOL v19;
  _BOOL4 v20;
  _BOOL4 v21;
  _BOOL4 v22;
  uint64_t v23;
  id v24;
  id v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  uint64_t v38;
  id v39;
  void *v40;
  void *v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t i;
  void *v47;
  void *v48;
  void *v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t j;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  uint64_t v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  unint64_t v69;
  int v70;
  int v71;
  int v72;
  void *v73;
  void *v74;
  double v75;
  void *v76;
  int v77;
  void *v78;
  int v79;
  void *v80;
  int v81;
  void *v82;
  int v83;
  void *v85;
  id v86;
  id v87;
  id v88;
  uint64_t v89;
  id v90;
  id v91;
  id v92;
  id v93;
  uint64_t v94;
  void *v95;
  void *v96;
  int v98;
  id v99;
  id v100;
  void *v101;
  id v102;
  id v103;
  id v104;
  void *v105;
  SGSqliteDatabase *db;
  void *v107;
  void *v108;
  void *v109;
  id v110;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  _QWORD v120[4];
  id v121;
  id v122;
  id v123;
  id v124;
  id v125;
  id v126;
  _QWORD v127[4];
  id v128;
  id v129;
  BOOL v130;
  _QWORD v131[4];
  id v132;
  id v133;
  SGSqlEntityStore *v134;
  id v135;
  id v136;
  BOOL v137;
  BOOL v138;
  _BYTE v139[128];
  _BYTE v140[128];
  uint64_t v141;

  v141 = *MEMORY[0x1E0C80C00];
  v13 = a3;
  v14 = a4;
  v15 = a5;
  v16 = a6;
  v17 = a7;
  v18 = (void *)MEMORY[0x1C3BD4F6C]();
  if (!objc_msgSend(v17, "length")
    || !+[SGInhumans isInhumanEmailAddress:](SGInhumans, "isInhumanEmailAddress:", v17))
  {
    if (objc_msgSend(v13, "length"))
      v20 = 0;
    else
      v20 = objc_msgSend(v17, "length") != 0;
    if (objc_msgSend(v13, "length"))
      v21 = 0;
    else
      v21 = objc_msgSend(v15, "count") != 0;
    if (objc_msgSend(v13, "length"))
    {
      v22 = 0;
      if (!v20)
        goto LABEL_13;
    }
    else
    {
      v22 = objc_msgSend(v16, "count") != 0;
      if (!v20)
      {
LABEL_13:
        if (v21)
          -[SGSqlEntityStore _joinIncompleteIdentityPhonesWithOthersOfTheirIlk:name:recordId:](self, "_joinIncompleteIdentityPhonesWithOthersOfTheirIlk:name:recordId:", v15, 0, v14);
        v95 = v18;
        if (v22)
          -[SGSqlEntityStore _joinIncompleteIdentitySocialProfilesWithOthersOfTheirIlk:name:recordId:](self, "_joinIncompleteIdentitySocialProfilesWithOthersOfTheirIlk:name:recordId:", v16, 0, v14);
        v131[0] = MEMORY[0x1E0C809B0];
        v131[1] = 3221225472;
        v131[2] = __111__SGSqlEntityStore_IdentityStore__registerAndLinkIdentity_recordId_phones_socialProfiles_email_curated_isSent___block_invoke;
        v131[3] = &unk_1E7DAAD40;
        v24 = v15;
        v132 = v24;
        v25 = v16;
        v133 = v25;
        v134 = self;
        v100 = v17;
        v135 = v100;
        v99 = v14;
        v136 = v99;
        v137 = a8;
        v138 = a9;
        v94 = MEMORY[0x1C3BD5158](v131);
        if (!objc_msgSend(v13, "length"))
        {
          v18 = v95;
          if (v20 || v21 || v22)
          {
            v26 = (void *)v94;
            (*(void (**)(uint64_t, _QWORD))(v94 + 16))(v94, 0);
            v19 = 1;
            v17 = v100;
LABEL_91:

            goto LABEL_92;
          }
          v19 = 0;
LABEL_28:
          v17 = v100;
          v26 = (void *)v94;
          goto LABEL_91;
        }
        if (+[SGInhumans isInhumanName:](SGInhumans, "isInhumanName:", v13))
        {
          v19 = 0;
          v18 = v95;
          goto LABEL_28;
        }
        v105 = v25;
        +[SGIdentityName nameWithString:](SGIdentityName, "nameWithString:", v13);
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v27, "surname");
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v27, "middlename");
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = v100;
        if (objc_msgSend(v28, "length"))
        {
          v85 = v27;
          SGNamesAsciify(v28);
          v108 = (void *)objc_claimAutoreleasedReturnValue();

          v88 = v14;
          v89 = (uint64_t)v13;
          v86 = v16;
          v87 = v15;
          if (v29)
          {
            SGNamesAsciify(v29);
            v30 = (void *)objc_claimAutoreleasedReturnValue();

          }
          else
          {
            v30 = 0;
          }
          v31 = v105;
          v32 = (void *)objc_opt_new();
          v33 = (void *)objc_opt_new();
          v34 = (void *)objc_opt_new();
          v35 = (void *)objc_opt_new();
          v36 = (void *)objc_opt_new();
          v37 = (void *)objc_opt_new();
          db = self->_db;
          v38 = MEMORY[0x1E0C809B0];
          v127[0] = MEMORY[0x1E0C809B0];
          v127[1] = 3221225472;
          v127[2] = __111__SGSqlEntityStore_IdentityStore__registerAndLinkIdentity_recordId_phones_socialProfiles_email_curated_isSent___block_invoke_2;
          v127[3] = &unk_1E7DAEB08;
          v90 = v30;
          v128 = v90;
          v110 = v108;
          v129 = v110;
          v130 = a9;
          v120[0] = v38;
          v120[1] = 3221225472;
          v120[2] = __111__SGSqlEntityStore_IdentityStore__registerAndLinkIdentity_recordId_phones_socialProfiles_email_curated_isSent___block_invoke_3;
          v120[3] = &unk_1E7DAAD68;
          v104 = v32;
          v121 = v104;
          v103 = v33;
          v122 = v103;
          v102 = v34;
          v123 = v102;
          v93 = v35;
          v124 = v93;
          v92 = v36;
          v125 = v92;
          v91 = v37;
          v126 = v91;
          -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](db, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("SELECT fullname, recordId, nameSketches, phones, socialProfileIdentifiers, email FROM identityPerson WHERE (surname IN _pas_nsarray(:middleNameAndSurname) OR middlename = :surname) AND isSent = :isSent LIMIT :limit"), v127, v120, 0);
          v39 = objc_alloc(MEMORY[0x1E0C99E60]);
          +[SGNames sketchesForName:](SGNames, "sketchesForName:", v89);
          v40 = (void *)objc_claimAutoreleasedReturnValue();
          v107 = (void *)objc_msgSend(v39, "initWithArray:", v40);

          v41 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E20]), "initWithCapacity:", objc_msgSend(v24, "count"));
          v116 = 0u;
          v117 = 0u;
          v118 = 0u;
          v119 = 0u;
          v42 = v24;
          v43 = objc_msgSend(v42, "countByEnumeratingWithState:objects:count:", &v116, v140, 16);
          if (v43)
          {
            v44 = v43;
            v45 = *(_QWORD *)v117;
            do
            {
              for (i = 0; i != v44; ++i)
              {
                if (*(_QWORD *)v117 != v45)
                  objc_enumerationMutation(v42);
                objc_msgSend(*(id *)(*((_QWORD *)&v116 + 1) + 8 * i), "value");
                v47 = (void *)objc_claimAutoreleasedReturnValue();
                SGNormalizePhoneNumber();
                v48 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v41, "addObject:", v48);

              }
              v44 = objc_msgSend(v42, "countByEnumeratingWithState:objects:count:", &v116, v140, 16);
            }
            while (v44);
          }

          v49 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E20]), "initWithCapacity:", objc_msgSend(v31, "count"));
          v112 = 0u;
          v113 = 0u;
          v114 = 0u;
          v115 = 0u;
          v50 = v31;
          v51 = objc_msgSend(v50, "countByEnumeratingWithState:objects:count:", &v112, v139, 16);
          v52 = (uint64_t)v100;
          if (v51)
          {
            v53 = v51;
            v54 = *(_QWORD *)v113;
            do
            {
              for (j = 0; j != v53; ++j)
              {
                if (*(_QWORD *)v113 != v54)
                  objc_enumerationMutation(v50);
                objc_msgSend(*(id *)(*((_QWORD *)&v112 + 1) + 8 * j), "value");
                v56 = (void *)objc_claimAutoreleasedReturnValue();
                SGNormalizeSocialProfileIdentifier(v56);
                v57 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v49, "addObject:", v57);

              }
              v53 = objc_msgSend(v50, "countByEnumeratingWithState:objects:count:", &v112, v139, 16);
            }
            while (v53);
          }

          v58 = v110;
          if (!v100)
          {
            -[SGSqlEntityStore loadEntityByRecordId:](self, "loadEntityByRecordId:", v99);
            v59 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v59, "duplicateKey");
            v60 = (void *)objc_claimAutoreleasedReturnValue();
            v61 = objc_msgSend(v60, "entityType");

            if (v61 == 4)
            {
              objc_msgSend(v59, "duplicateKey");
              v62 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v62, "identityKey");
              v63 = (void *)objc_claimAutoreleasedReturnValue();

              if (objc_msgSend(v63, "hasEmailAddress"))
              {
                objc_msgSend(v59, "duplicateKey");
                v64 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v64, "identityKey");
                v65 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v65, "emailAddress");
                v52 = objc_claimAutoreleasedReturnValue();

              }
              else
              {
                v52 = 0;
              }

            }
            else
            {
              v52 = 0;
            }

          }
          v101 = (void *)v52;
          SGNormalizeName(v89);
          v96 = (void *)objc_claimAutoreleasedReturnValue();
          v68 = v104;
          if (objc_msgSend(v104, "count"))
          {
            v69 = 0;
            v98 = 0;
            v70 = 0;
            v71 = 0;
            v72 = 0;
            do
            {
              objc_msgSend(v68, "objectAtIndexedSubscript:", v69);
              v73 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v103, "objectAtIndexedSubscript:", v69);
              v74 = (void *)objc_claimAutoreleasedReturnValue();
              if (v72 <= 9)
              {
                +[SGNames nameSimilarity:and:](SGNames, "nameSimilarity:and:", v96, v73);
                if (v75 > 4.0)
                {
                  -[SGSqlEntityStore link:to:type:strength:](self, "link:to:type:strength:", v99, v74, 0);
                  ++v72;
                }
              }
              objc_msgSend(v102, "objectAtIndexedSubscript:", v69);
              v76 = (void *)objc_claimAutoreleasedReturnValue();
              v77 = objc_msgSend(v107, "intersectsSet:", v76);

              if (v77)
              {
                if (v71 <= 9)
                {
                  objc_msgSend(v93, "objectAtIndexedSubscript:", v69);
                  v78 = (void *)objc_claimAutoreleasedReturnValue();
                  v79 = objc_msgSend(v41, "intersectsSet:", v78);

                  if (v79)
                  {
                    -[SGSqlEntityStore link:to:type:strength:](self, "link:to:type:strength:", v99, v74, 1, 2.0);
                    ++v71;
                  }
                }
                if (v70 <= 9)
                {
                  if (v101)
                  {
                    objc_msgSend(v91, "objectAtIndexedSubscript:", v69);
                    v80 = (void *)objc_claimAutoreleasedReturnValue();
                    v81 = objc_msgSend(v101, "isEqualToString:", v80);

                    if (v81)
                    {
                      -[SGSqlEntityStore link:to:type:strength:](self, "link:to:type:strength:", v99, v74, 2, 4.0);
                      ++v70;
                    }
                  }
                }
                if (v98 <= 9)
                {
                  objc_msgSend(v92, "objectAtIndexedSubscript:", v69);
                  v82 = (void *)objc_claimAutoreleasedReturnValue();
                  v83 = objc_msgSend(v49, "intersectsSet:", v82);

                  if (v83)
                  {
                    -[SGSqlEntityStore link:to:type:strength:](self, "link:to:type:strength:", v99, v74, 3, 4.0);
                    ++v98;
                  }
                }
              }
              v58 = v110;

              ++v69;
              v68 = v104;
            }
            while (objc_msgSend(v104, "count") > v69);
          }
          v17 = v101;
          if ((writeIdentity(self->_db, v58, v90, v96, v107, v41, v49, v101, v99, a8, a9) & 1) != 0)
            -[SGSqlEntityStore _markIdentityStoreDirty](self, "_markIdentityStoreDirty");

          v19 = 1;
          v14 = v88;
          v13 = (id)v89;
          v16 = v86;
          v15 = v87;
          v26 = (void *)v94;
          v18 = v95;
          v27 = v85;
          goto LABEL_90;
        }
        v109 = v28;
        v90 = v29;
        if (objc_msgSend(v100, "length") || objc_msgSend(v24, "count") || objc_msgSend(v105, "count"))
        {
          v18 = v95;
          if (v20)
          {
            v26 = (void *)v94;
            (*(void (**)(uint64_t, _QWORD))(v94 + 16))(v94, 0);
LABEL_61:
            v19 = 1;
LABEL_89:
            v58 = v109;
LABEL_90:

            goto LABEL_91;
          }
          objc_msgSend(v27, "firstname");
          v66 = (void *)objc_claimAutoreleasedReturnValue();

          if (v66)
          {
            SGNormalizeName((uint64_t)v13);
            v67 = (void *)objc_claimAutoreleasedReturnValue();
            if (objc_msgSend(v100, "length"))
              -[SGSqlEntityStore _joinIncompleteIdentityEmailWithOthersOfItsIlk:name:recordId:](self, "_joinIncompleteIdentityEmailWithOthersOfItsIlk:name:recordId:", v100, v67, v99);
            v26 = (void *)v94;
            if (objc_msgSend(v24, "count"))
              -[SGSqlEntityStore _joinIncompleteIdentityPhonesWithOthersOfTheirIlk:name:recordId:](self, "_joinIncompleteIdentityPhonesWithOthersOfTheirIlk:name:recordId:", v24, v67, v99);
            if (objc_msgSend(v105, "count"))
              -[SGSqlEntityStore _joinIncompleteIdentitySocialProfilesWithOthersOfTheirIlk:name:recordId:](self, "_joinIncompleteIdentitySocialProfilesWithOthersOfTheirIlk:name:recordId:", v105, v67, v99);
            (*(void (**)(uint64_t, void *))(v94 + 16))(v94, v67);

            goto LABEL_61;
          }
          v19 = 0;
        }
        else
        {
          v19 = 0;
          v18 = v95;
        }
        v26 = (void *)v94;
        goto LABEL_89;
      }
    }
    -[SGSqlEntityStore _joinIncompleteIdentityEmailWithOthersOfItsIlk:name:recordId:](self, "_joinIncompleteIdentityEmailWithOthersOfItsIlk:name:recordId:", v17, 0, v14);
    +[SGNames nameFromEmail:](SGNames, "nameFromEmail:", v17);
    v23 = objc_claimAutoreleasedReturnValue();

    v13 = (id)v23;
    goto LABEL_13;
  }
  v19 = 0;
LABEL_92:
  objc_autoreleasePoolPop(v18);

  return v19;
}

- (void)_joinIncompleteIdentityEmailWithOthersOfItsIlk:(id)a3 name:(id)a4 recordId:(id)a5
{
  id v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  const __CFString *v15;
  void *v16;
  SGSqliteDatabase *db;
  uint64_t v18;
  id v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _QWORD v33[4];
  id v34;
  _QWORD v35[4];
  id v36;
  id v37;
  _BYTE v38[128];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v9 = a3;
  v10 = a4;
  v11 = a5;
  v12 = v11;
  if (v9)
  {
    if (v11)
      goto LABEL_3;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore+Identity.m"), 567, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("email"));

    if (v12)
      goto LABEL_3;
  }
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v28, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore+Identity.m"), 568, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("recordId"));

LABEL_3:
  v13 = (void *)objc_opt_new();
  v14 = objc_alloc(MEMORY[0x1E0CB3940]);
  if (v10)
    v15 = CFSTR("SELECT recordId FROM identityPerson WHERE email=? AND fullname=? LIMIT %d");
  else
    v15 = CFSTR("SELECT recordId FROM identityPerson WHERE email=? AND fullname IS NULL LIMIT %d");
  v16 = (void *)objc_msgSend(v14, "initWithFormat:", v15, 10);
  db = self->_db;
  v18 = MEMORY[0x1E0C809B0];
  v35[0] = MEMORY[0x1E0C809B0];
  v35[1] = 3221225472;
  v35[2] = __96__SGSqlEntityStore_IdentityStore___joinIncompleteIdentityEmailWithOthersOfItsIlk_name_recordId___block_invoke;
  v35[3] = &unk_1E7DB5190;
  v19 = v9;
  v36 = v19;
  v20 = v10;
  v37 = v20;
  v33[0] = v18;
  v33[1] = 3221225472;
  v33[2] = __96__SGSqlEntityStore_IdentityStore___joinIncompleteIdentityEmailWithOthersOfItsIlk_name_recordId___block_invoke_2;
  v33[3] = &unk_1E7DB52C8;
  v21 = v13;
  v34 = v21;
  -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](db, "prepAndRunQuery:onPrep:onRow:onError:", v16, v35, v33, 0);
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v22 = v21;
  v23 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v29, v38, 16);
  if (v23)
  {
    v24 = v23;
    v25 = *(_QWORD *)v30;
    do
    {
      v26 = 0;
      do
      {
        if (*(_QWORD *)v30 != v25)
          objc_enumerationMutation(v22);
        -[SGSqlEntityStore link:to:type:strength:](self, "link:to:type:strength:", v12, *(_QWORD *)(*((_QWORD *)&v29 + 1) + 8 * v26++), 2, 1.0);
      }
      while (v24 != v26);
      v24 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v29, v38, 16);
    }
    while (v24);
  }

}

- (void)_joinIncompleteIdentityPhonesWithOthersOfTheirIlk:(id)a3 name:(id)a4 recordId:(id)a5
{
  id v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  const __CFString *v14;
  void *v15;
  SGSqliteDatabase *db;
  uint64_t v17;
  id v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _QWORD v33[4];
  id v34;
  _QWORD v35[4];
  id v36;
  id v37;
  _BYTE v38[128];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v9 = a3;
  v10 = a4;
  v11 = a5;
  v12 = v11;
  if (v9)
  {
    if (v11)
      goto LABEL_3;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore+Identity.m"), 598, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("phones"));

    if (v12)
      goto LABEL_3;
  }
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v27, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore+Identity.m"), 599, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("recordId"));

LABEL_3:
  if (!objc_msgSend(v9, "count"))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore+Identity.m"), 600, CFSTR("Expected nonzero number of phones"));

  }
  v13 = (void *)objc_opt_new();
  if (v10)
    v14 = CFSTR("fullname=:fullname");
  else
    v14 = CFSTR("(surname = '' OR surname IS NULL) AND fullname IS NULL");
  v15 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("SELECT recordId FROM identityPerson   WHERE %@ AND recordId IN(      SELECT recordId from identityPhones           WHERE phone IN _pas_nsarray(:phones)  )   LIMIT :limit"), v14);
  db = self->_db;
  v17 = MEMORY[0x1E0C809B0];
  v35[0] = MEMORY[0x1E0C809B0];
  v35[1] = 3221225472;
  v35[2] = __99__SGSqlEntityStore_IdentityStore___joinIncompleteIdentityPhonesWithOthersOfTheirIlk_name_recordId___block_invoke;
  v35[3] = &unk_1E7DB6E80;
  v18 = v10;
  v36 = v18;
  v19 = v9;
  v37 = v19;
  v33[0] = v17;
  v33[1] = 3221225472;
  v33[2] = __99__SGSqlEntityStore_IdentityStore___joinIncompleteIdentityPhonesWithOthersOfTheirIlk_name_recordId___block_invoke_3;
  v33[3] = &unk_1E7DB6ED0;
  v20 = v13;
  v34 = v20;
  -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](db, "prepAndRunSQL:onPrep:onRow:onError:", v15, v35, v33, 0);
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v21 = v20;
  v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v29, v38, 16);
  if (v22)
  {
    v23 = v22;
    v24 = *(_QWORD *)v30;
    do
    {
      v25 = 0;
      do
      {
        if (*(_QWORD *)v30 != v24)
          objc_enumerationMutation(v21);
        -[SGSqlEntityStore link:to:type:strength:](self, "link:to:type:strength:", v12, *(_QWORD *)(*((_QWORD *)&v29 + 1) + 8 * v25++), 1, 1.0);
      }
      while (v23 != v25);
      v23 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v29, v38, 16);
    }
    while (v23);
  }

}

- (void)_joinIncompleteIdentitySocialProfilesWithOthersOfTheirIlk:(id)a3 name:(id)a4 recordId:(id)a5
{
  id v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  const __CFString *v14;
  void *v15;
  SGSqliteDatabase *db;
  uint64_t v17;
  id v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _QWORD v33[4];
  id v34;
  _QWORD v35[4];
  id v36;
  id v37;
  _BYTE v38[128];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v9 = a3;
  v10 = a4;
  v11 = a5;
  v12 = v11;
  if (v9)
  {
    if (v11)
      goto LABEL_3;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore+Identity.m"), 640, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("socialProfiles"));

    if (v12)
      goto LABEL_3;
  }
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v27, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore+Identity.m"), 641, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("recordId"));

LABEL_3:
  if (!objc_msgSend(v9, "count"))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore+Identity.m"), 642, CFSTR("Expected nonzero number of socialProfiles"));

  }
  v13 = (void *)objc_opt_new();
  if (v10)
    v14 = CFSTR("fullname=:fullname");
  else
    v14 = CFSTR("(surname = '' OR surname IS NULL) AND fullname IS NULL");
  v15 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("SELECT recordId FROM identityPerson   WHERE %@ AND recordId IN(      SELECT recordId from identitySocialProfileIdentifiers           WHERE socialProfileIdentifier IN _pas_nsarray(:socialProfileIdentifiers)  )   LIMIT :limit"), v14);
  db = self->_db;
  v17 = MEMORY[0x1E0C809B0];
  v35[0] = MEMORY[0x1E0C809B0];
  v35[1] = 3221225472;
  v35[2] = __107__SGSqlEntityStore_IdentityStore___joinIncompleteIdentitySocialProfilesWithOthersOfTheirIlk_name_recordId___block_invoke;
  v35[3] = &unk_1E7DB6E80;
  v18 = v10;
  v36 = v18;
  v19 = v9;
  v37 = v19;
  v33[0] = v17;
  v33[1] = 3221225472;
  v33[2] = __107__SGSqlEntityStore_IdentityStore___joinIncompleteIdentitySocialProfilesWithOthersOfTheirIlk_name_recordId___block_invoke_3;
  v33[3] = &unk_1E7DB6ED0;
  v20 = v13;
  v34 = v20;
  -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](db, "prepAndRunSQL:onPrep:onRow:onError:", v15, v35, v33, 0);
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v21 = v20;
  v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v29, v38, 16);
  if (v22)
  {
    v23 = v22;
    v24 = *(_QWORD *)v30;
    do
    {
      v25 = 0;
      do
      {
        if (*(_QWORD *)v30 != v24)
          objc_enumerationMutation(v21);
        -[SGSqlEntityStore link:to:type:strength:](self, "link:to:type:strength:", v12, *(_QWORD *)(*((_QWORD *)&v29 + 1) + 8 * v25++), 3, 1.0);
      }
      while (v23 != v25);
      v23 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v29, v38, 16);
    }
    while (v23);
  }

}

- (void)link:(id)a3 to:(id)a4 type:(unsigned int)a5 strength:(double)a6
{
  id v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  SGSqliteDatabase *db;
  id v16;
  _QWORD v17[5];
  id v18;
  id v19;
  double v20;
  unsigned int v21;

  v16 = a3;
  v10 = a4;
  if ((objc_msgSend(v16, "isEqualToRecordId:", v10) & 1) == 0)
  {
    v11 = objc_msgSend(v16, "rowId");
    v12 = objc_msgSend(v10, "rowId");
    if (v11 >= v12)
      v13 = v10;
    else
      v13 = v16;
    if (v11 >= v12)
      v14 = v16;
    else
      v14 = v10;
    db = self->_db;
    v17[0] = MEMORY[0x1E0C809B0];
    v17[1] = 3221225472;
    v17[2] = __57__SGSqlEntityStore_IdentityStore__link_to_type_strength___block_invoke;
    v17[3] = &unk_1E7DAAE40;
    v17[4] = self;
    v16 = v14;
    v18 = v16;
    v10 = v13;
    v19 = v10;
    v21 = a5;
    v20 = a6;
    -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v17);

  }
}

- (void)deleteByRecordId:(id)a3
{
  id v4;
  SGSqliteDatabase *db;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  db = self->_db;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __52__SGSqlEntityStore_IdentityStore__deleteByRecordId___block_invoke;
  v7[3] = &unk_1E7DB6A30;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v7);

}

- (id)getAllLinks
{
  void *v3;
  SGSqliteDatabase *db;
  id v5;
  _QWORD v7[4];
  id v8;

  v3 = (void *)objc_opt_new();
  db = self->_db;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __46__SGSqlEntityStore_IdentityStore__getAllLinks__block_invoke;
  v7[3] = &unk_1E7DB52C8;
  v5 = v3;
  v8 = v5;
  -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](db, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("SELECT recordId1, recordId2, type, strength FROM identityLink"), 0, v7, 0);

  return v5;
}

- (id)curatedRecordIds
{
  void *v3;
  SGSqliteDatabase *db;
  id v5;
  _QWORD v7[4];
  id v8;

  v3 = (void *)objc_opt_new();
  db = self->_db;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __51__SGSqlEntityStore_IdentityStore__curatedRecordIds__block_invoke;
  v7[3] = &unk_1E7DB52C8;
  v5 = v3;
  v8 = v5;
  -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](db, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("SELECT recordId FROM identityPerson WHERE curated"), 0, v7, 0);

  return v5;
}

- (void)_linkNamelessEmailsIfAppropriate:(graph_t *)a3 nameToVertex:(id)a4 disjointSets:(DisjointSetHandle *)a5 edges:(id)a6
{
  void *v8;
  SGSqliteDatabase *db;
  id v10;
  uint64_t i;
  uint64_t v12;
  void *v13;
  void *v14;
  _vertex_t *var2;
  uint64_t v16;
  SGSqliteDatabase *v17;
  uint64_t v18;
  id *v19;
  void *v20;
  id v21;
  id v22;
  _QWORD *v23;
  void *v24;
  id v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  id v32;
  uint64_t v33;
  uint64_t v36;
  id obj;
  graph_t *v39;
  id v40;
  _QWORD v41[4];
  id v42;
  SGSqlEntityStore *v43;
  uint64_t *v44;
  uint64_t *v45;
  SEL v46;
  graph_t *v47;
  DisjointSetHandle *v48;
  _QWORD v49[5];
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  _QWORD v62[4];
  id v63;
  _BYTE v64[128];
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v40 = a4;
  v32 = a6;
  v39 = a3;
  if (!a3)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore+Identity.m"), 800, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("graph"));

  }
  if (!v40)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v30, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore+Identity.m"), 801, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("nameToVertex"));

  }
  if (!a5)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore+Identity.m"), 802, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("disjointSets"));

  }
  v8 = (void *)objc_opt_new();
  db = self->_db;
  v62[0] = MEMORY[0x1E0C809B0];
  v62[1] = 3221225472;
  v62[2] = __100__SGSqlEntityStore_IdentityStore___linkNamelessEmailsIfAppropriate_nameToVertex_disjointSets_edges___block_invoke;
  v62[3] = &unk_1E7DB6ED0;
  v10 = v8;
  v63 = v10;
  -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](db, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("SELECT recordId, email FROM identityPerson WHERE (surname = '' OR surname IS NULL) AND fullname IS NULL AND LENGTH(email) > 0"), 0, v62, 0);
  v60 = 0u;
  v61 = 0u;
  v58 = 0u;
  v59 = 0u;
  obj = v10;
  v36 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v58, v64, 16);
  if (v36)
  {
    v33 = *(_QWORD *)v59;
    do
    {
      for (i = 0; i != v36; ++i)
      {
        if (*(_QWORD *)v59 != v33)
          objc_enumerationMutation(obj);
        v12 = *(_QWORD *)(*((_QWORD *)&v58 + 1) + 8 * i);
        objc_msgSend(obj, "objectForKeyedSubscript:", v12);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v40, "objectForKeyedSubscript:", v13);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        if (!v14)
        {
          objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v27, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore+Identity.m"), 816, CFSTR("Vertex not found in lookup table"));

        }
        var2 = v39->var2;
        v16 = objc_msgSend(v14, "integerValue");
        v54 = 0;
        v55 = &v54;
        v56 = 0x2020000000;
        v57 = 0;
        v50 = 0;
        v51 = &v50;
        v52 = 0x2020000000;
        v53 = 1;
        v17 = self->_db;
        v49[0] = MEMORY[0x1E0C809B0];
        v49[1] = 3221225472;
        v49[2] = __100__SGSqlEntityStore_IdentityStore___linkNamelessEmailsIfAppropriate_nameToVertex_disjointSets_edges___block_invoke_2;
        v49[3] = &unk_1E7DB74A0;
        v49[4] = v12;
        v41[0] = MEMORY[0x1E0C809B0];
        v41[1] = 3221225472;
        v41[2] = __100__SGSqlEntityStore_IdentityStore___linkNamelessEmailsIfAppropriate_nameToVertex_disjointSets_edges___block_invoke_3;
        v41[3] = &unk_1E7DAAE90;
        v42 = v40;
        v43 = self;
        v46 = a2;
        v47 = v39;
        v48 = a5;
        v44 = &v54;
        v45 = &v50;
        -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](v17, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("SELECT recordId FROM identityPerson WHERE email = :email AND fullname IS NOT NULL"), v49, v41, 0);
        v18 = v55[3];
        if (v18 && *((_BYTE *)v51 + 24))
        {
          v19 = (id *)((char *)var2 + 24 * v16);
          if (addEdge((uint64_t)v19, v18, 1.0))
          {
            objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
            v28 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v28, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore+Identity.m"), 847, CFSTR("OOM while adding edge to graph"));

          }
          v20 = *(void **)v55[3];
          v21 = *v19;
          v22 = v20;
          v23 = (_QWORD *)objc_opt_new();
          v24 = (void *)v23[1];
          v23[1] = v21;
          v25 = v21;

          v26 = (void *)v23[2];
          v23[2] = v22;

          v23[3] = 0x3FF0000000000000;
          objc_msgSend(v32, "addObject:", v23);

        }
        _Block_object_dispose(&v50, 8);
        _Block_object_dispose(&v54, 8);

      }
      v36 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v58, v64, 16);
    }
    while (v36);
  }

}

- (void)_linkNamelessPhonesIfAppropriate:(graph_t *)a3 nameToVertex:(id)a4 disjointSets:(DisjointSetHandle *)a5 edges:(id)a6
{
  void *v8;
  SGSqliteDatabase *db;
  id v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  void *v14;
  void *v15;
  _vertex_t *var2;
  uint64_t v17;
  SGSqliteDatabase *v18;
  id v19;
  uint64_t v20;
  void *v21;
  id *v22;
  void *v23;
  id v24;
  id v25;
  _QWORD *v26;
  void *v27;
  id v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  id v35;
  uint64_t v36;
  uint64_t v39;
  id obj;
  graph_t *v42;
  id v43;
  _QWORD v44[4];
  id v45;
  SGSqlEntityStore *v46;
  uint64_t *v47;
  uint64_t *v48;
  SEL v49;
  graph_t *v50;
  DisjointSetHandle *v51;
  _QWORD v52[4];
  id v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  _QWORD v66[4];
  id v67;
  _BYTE v68[128];
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v43 = a4;
  v35 = a6;
  v42 = a3;
  if (!a3)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v32, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore+Identity.m"), 865, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("graph"));

  }
  if (!v43)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v33, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore+Identity.m"), 866, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("nameToVertex"));

  }
  if (!a5)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v34, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore+Identity.m"), 867, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("disjointSets"));

  }
  v8 = (void *)objc_opt_new();
  db = self->_db;
  v66[0] = MEMORY[0x1E0C809B0];
  v66[1] = 3221225472;
  v66[2] = __100__SGSqlEntityStore_IdentityStore___linkNamelessPhonesIfAppropriate_nameToVertex_disjointSets_edges___block_invoke;
  v66[3] = &unk_1E7DB52C8;
  v10 = v8;
  v67 = v10;
  -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](db, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("SELECT recordId, phones FROM identityPerson WHERE (surname = '' OR surname IS NULL) AND fullname IS NULL AND LENGTH(phones) > 0"), 0, v66, 0);
  v64 = 0u;
  v65 = 0u;
  v62 = 0u;
  v63 = 0u;
  obj = v10;
  v39 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v62, v68, 16);
  if (v39)
  {
    v36 = *(_QWORD *)v63;
    v11 = MEMORY[0x1E0C809B0];
    do
    {
      for (i = 0; i != v39; ++i)
      {
        if (*(_QWORD *)v63 != v36)
          objc_enumerationMutation(obj);
        v13 = *(_QWORD *)(*((_QWORD *)&v62 + 1) + 8 * i);
        objc_msgSend(obj, "objectForKeyedSubscript:", v13);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v43, "objectForKeyedSubscript:", v13);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        if (!v15)
        {
          objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v30, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore+Identity.m"), 881, CFSTR("Vertex not found in lookup table"));

        }
        var2 = v42->var2;
        v17 = objc_msgSend(v15, "integerValue");
        v58 = 0;
        v59 = &v58;
        v60 = 0x2020000000;
        v61 = 0;
        v54 = 0;
        v55 = &v54;
        v56 = 0x2020000000;
        v57 = 1;
        v18 = self->_db;
        v52[0] = v11;
        v52[1] = 3221225472;
        v52[2] = __100__SGSqlEntityStore_IdentityStore___linkNamelessPhonesIfAppropriate_nameToVertex_disjointSets_edges___block_invoke_2;
        v52[3] = &unk_1E7DB74A0;
        v19 = v14;
        v53 = v19;
        v44[0] = v11;
        v44[1] = 3221225472;
        v44[2] = __100__SGSqlEntityStore_IdentityStore___linkNamelessPhonesIfAppropriate_nameToVertex_disjointSets_edges___block_invoke_3;
        v44[3] = &unk_1E7DAAE90;
        v45 = v43;
        v46 = self;
        v49 = a2;
        v50 = v42;
        v51 = a5;
        v47 = &v58;
        v48 = &v54;
        -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](v18, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("SELECT recordId FROM identityPerson    WHERE fullname IS NOT NULL        AND recordId IN(           SELECT recordId from identityPhones                WHERE phone IN _pas_nsarray(:phones)       )"), v52, v44, 0);
        v20 = v59[3];
        v21 = v15;
        if (v20 && *((_BYTE *)v55 + 24))
        {
          v22 = (id *)((char *)var2 + 24 * v17);
          if (addEdge((uint64_t)v22, v20, 1.0))
          {
            objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
            v31 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v31, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore+Identity.m"), 916, CFSTR("OOM while adding edge to graph"));

          }
          v23 = *(void **)v59[3];
          v24 = *v22;
          v25 = v23;
          v26 = (_QWORD *)objc_opt_new();
          v27 = (void *)v26[1];
          v26[1] = v24;
          v28 = v24;

          v29 = (void *)v26[2];
          v26[2] = v25;

          v26[3] = 0x3FF0000000000000;
          objc_msgSend(v35, "addObject:", v26);

        }
        _Block_object_dispose(&v54, 8);
        _Block_object_dispose(&v58, 8);

      }
      v39 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v62, v68, 16);
    }
    while (v39);
  }

}

- (void)_linkNamelessSocialProfilesIfAppropriate:(graph_t *)a3 nameToVertex:(id)a4 disjointSets:(DisjointSetHandle *)a5 edges:(id)a6
{
  void *v8;
  SGSqliteDatabase *db;
  id v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  void *v14;
  void *v15;
  _vertex_t *var2;
  uint64_t v17;
  SGSqliteDatabase *v18;
  id v19;
  uint64_t v20;
  void *v21;
  id *v22;
  void *v23;
  id v24;
  id v25;
  _QWORD *v26;
  void *v27;
  id v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  id v35;
  uint64_t v36;
  uint64_t v39;
  id obj;
  graph_t *v42;
  id v43;
  _QWORD v44[4];
  id v45;
  SGSqlEntityStore *v46;
  uint64_t *v47;
  uint64_t *v48;
  SEL v49;
  graph_t *v50;
  DisjointSetHandle *v51;
  _QWORD v52[4];
  id v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  _QWORD v66[4];
  id v67;
  _BYTE v68[128];
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v43 = a4;
  v35 = a6;
  v42 = a3;
  if (!a3)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v32, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore+Identity.m"), 933, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("graph"));

  }
  if (!v43)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v33, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore+Identity.m"), 934, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("nameToVertex"));

  }
  if (!a5)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v34, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore+Identity.m"), 935, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("disjointSets"));

  }
  v8 = (void *)objc_opt_new();
  db = self->_db;
  v66[0] = MEMORY[0x1E0C809B0];
  v66[1] = 3221225472;
  v66[2] = __108__SGSqlEntityStore_IdentityStore___linkNamelessSocialProfilesIfAppropriate_nameToVertex_disjointSets_edges___block_invoke;
  v66[3] = &unk_1E7DB52C8;
  v10 = v8;
  v67 = v10;
  -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](db, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("SELECT recordId, socialProfileIdentifiers FROM identityPerson WHERE (surname = '' OR surname IS NULL) AND fullname IS NULL AND LENGTH(socialProfileIdentifiers) > 0"), 0, v66, 0);
  v64 = 0u;
  v65 = 0u;
  v62 = 0u;
  v63 = 0u;
  obj = v10;
  v39 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v62, v68, 16);
  if (v39)
  {
    v36 = *(_QWORD *)v63;
    v11 = MEMORY[0x1E0C809B0];
    do
    {
      for (i = 0; i != v39; ++i)
      {
        if (*(_QWORD *)v63 != v36)
          objc_enumerationMutation(obj);
        v13 = *(_QWORD *)(*((_QWORD *)&v62 + 1) + 8 * i);
        objc_msgSend(obj, "objectForKeyedSubscript:", v13);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v43, "objectForKeyedSubscript:", v13);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        if (!v15)
        {
          objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v30, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore+Identity.m"), 950, CFSTR("Vertex not found in lookup table"));

        }
        var2 = v42->var2;
        v17 = objc_msgSend(v15, "integerValue");
        v58 = 0;
        v59 = &v58;
        v60 = 0x2020000000;
        v61 = 0;
        v54 = 0;
        v55 = &v54;
        v56 = 0x2020000000;
        v57 = 1;
        v18 = self->_db;
        v52[0] = v11;
        v52[1] = 3221225472;
        v52[2] = __108__SGSqlEntityStore_IdentityStore___linkNamelessSocialProfilesIfAppropriate_nameToVertex_disjointSets_edges___block_invoke_2;
        v52[3] = &unk_1E7DB74A0;
        v19 = v14;
        v53 = v19;
        v44[0] = v11;
        v44[1] = 3221225472;
        v44[2] = __108__SGSqlEntityStore_IdentityStore___linkNamelessSocialProfilesIfAppropriate_nameToVertex_disjointSets_edges___block_invoke_3;
        v44[3] = &unk_1E7DAAE90;
        v45 = v43;
        v46 = self;
        v49 = a2;
        v50 = v42;
        v51 = a5;
        v47 = &v58;
        v48 = &v54;
        -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](v18, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("SELECT recordId FROM identityPerson    WHERE fullname IS NOT NULL        AND recordId IN(           SELECT recordId from identitySocialProfileIdentifiers                WHERE socialProfileIdentifier IN _pas_nsarray(:socialProfileIdentifiers)       )"), v52, v44, 0);
        v20 = v59[3];
        v21 = v15;
        if (v20 && *((_BYTE *)v55 + 24))
        {
          v22 = (id *)((char *)var2 + 24 * v17);
          if (addEdge((uint64_t)v22, v20, 1.0))
          {
            objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
            v31 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v31, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore+Identity.m"), 985, CFSTR("OOM while adding edge to graph"));

          }
          v23 = *(void **)v59[3];
          v24 = *v22;
          v25 = v23;
          v26 = (_QWORD *)objc_opt_new();
          v27 = (void *)v26[1];
          v26[1] = v24;
          v28 = v24;

          v29 = (void *)v26[2];
          v26[2] = v25;

          v26[3] = 0x3FF0000000000000;
          objc_msgSend(v35, "addObject:", v26);

        }
        _Block_object_dispose(&v54, 8);
        _Block_object_dispose(&v58, 8);

      }
      v39 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v62, v68, 16);
    }
    while (v39);
  }

}

- (id)_computeBlobsRaw:(id *)a3
{
  void *v5;
  SGSqliteDatabase *db;
  id v7;
  void *v8;
  id v9;
  _QWORD v11[5];
  id v12;
  id *v13;

  v5 = (void *)objc_opt_new();
  db = self->_db;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __52__SGSqlEntityStore_IdentityStore___computeBlobsRaw___block_invoke;
  v11[3] = &unk_1E7DB6BB8;
  v11[4] = self;
  v7 = v5;
  v12 = v7;
  v13 = a3;
  -[SGSqliteDatabase readTransaction:](db, "readTransaction:", v11);
  v8 = v12;
  v9 = v7;

  return v9;
}

- (id)computeBlobs
{
  SGSqliteDatabase *db;
  id v4;
  _QWORD v6[6];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  void (*v11)(uint64_t);
  id v12;
  _QWORD v13[3];

  v13[2] = 0;
  v13[0] = CFSTR("computeBlobs");
  v13[1] = mach_absolute_time();
  v7 = 0;
  v8 = &v7;
  v9 = 0x3032000000;
  v10 = __Block_byref_object_copy__8446;
  v11 = __Block_byref_object_dispose__8447;
  v12 = 0;
  db = self->_db;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __47__SGSqlEntityStore_IdentityStore__computeBlobs__block_invoke;
  v6[3] = &unk_1E7DB78A0;
  v6[4] = self;
  v6[5] = &v7;
  -[SGSqliteDatabase readTransaction:](db, "readTransaction:", v6);
  SGRecordMeasurementState(v13);
  v4 = (id)v8[5];
  _Block_object_dispose(&v7, 8);

  SGRecordMeasurementState(v13);
  return v4;
}

- (id)_makeBlobsFromConnectedComponents:(id)a3 edges:(id)a4
{
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t j;
  uint64_t v16;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  void *v21;
  int v22;
  uint64_t ConnectedComponents;
  void *v24;
  uint64_t v25;
  id v26;
  void *v27;
  id v28;
  id obj;
  id obja;
  _QWORD v32[5];
  _QWORD v33[4];
  id v34;
  _QWORD *v35;
  _QWORD v36[5];
  id v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  void *v47;
  _BYTE v48[128];
  _BYTE v49[128];
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  obj = a4;
  v46 = 0x400000000;
  v47 = malloc_type_malloc(0x60uLL, 0x1080040CC6EE3FDuLL);
  if (!v47)
  {
    freeGraph((unsigned int *)&v46);
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("graph error"), CFSTR("SGIStore.h, line %i"), 1100);
  }
  v6 = (void *)objc_opt_new();
  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  v7 = v5;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v42, v49, 16);
  if (v8)
  {
    v9 = *(_QWORD *)v43;
    do
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v43 != v9)
          objc_enumerationMutation(v7);
        v11 = *(_QWORD *)(*((_QWORD *)&v42 + 1) + 8 * i);
        if (newVertex((int *)&v46, v11))
        {
          freeGraph((unsigned int *)&v46);
          objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("graph error"), CFSTR("SGIStore.h, line %i"), 1104);
        }
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", (v46 - 1));
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "setObject:forKeyedSubscript:", v12, v11);

      }
      v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v42, v49, 16);
    }
    while (v8);
  }

  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  obja = obj;
  v13 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v38, v48, 16);
  if (v13)
  {
    v14 = *(_QWORD *)v39;
    do
    {
      for (j = 0; j != v13; ++j)
      {
        if (*(_QWORD *)v39 != v14)
          objc_enumerationMutation(obja);
        v16 = *(_QWORD *)(*((_QWORD *)&v38 + 1) + 8 * j);
        if (objc_msgSend(v7, "containsObject:", *(_QWORD *)(v16 + 8)))
        {
          if (objc_msgSend(v7, "containsObject:", *(_QWORD *)(v16 + 16)))
          {
            v17 = v47;
            objc_msgSend(v6, "objectForKeyedSubscript:", *(_QWORD *)(v16 + 8));
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            v19 = objc_msgSend(v18, "intValue");

            v20 = v47;
            objc_msgSend(v6, "objectForKeyedSubscript:", *(_QWORD *)(v16 + 16));
            v21 = (void *)objc_claimAutoreleasedReturnValue();
            v22 = objc_msgSend(v21, "intValue");

            if (addEdge((uint64_t)v17 + 24 * v19, (uint64_t)v20 + 24 * v22, 1.0))
            {
              freeGraph((unsigned int *)&v46);
              objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("graph error"), CFSTR("SGIStore.h, line %i"), 1112);
            }
          }
        }
      }
      v13 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v38, v48, 16);
    }
    while (v13);
  }

  ConnectedComponents = findConnectedComponents((unsigned int *)&v46);
  v24 = (void *)objc_opt_new();
  v36[0] = 0;
  v36[1] = v36;
  v36[2] = 0x3032000000;
  v36[3] = __Block_byref_object_copy__8446;
  v36[4] = __Block_byref_object_dispose__8447;
  v25 = MEMORY[0x1E0C809B0];
  v37 = 0;
  v33[0] = MEMORY[0x1E0C809B0];
  v33[1] = 3221225472;
  v33[2] = __75__SGSqlEntityStore_IdentityStore___makeBlobsFromConnectedComponents_edges___block_invoke;
  v33[3] = &unk_1E7DB78A0;
  v35 = v36;
  v26 = v24;
  v34 = v26;
  v32[0] = v25;
  v32[1] = 3221225472;
  v32[2] = __75__SGSqlEntityStore_IdentityStore___makeBlobsFromConnectedComponents_edges___block_invoke_2;
  v32[3] = &unk_1E7DAAEB8;
  v32[4] = v36;
  visitConnectedComponents(ConnectedComponents, v33, v32);
  freeDisjointSet(ConnectedComponents);
  freeGraph((unsigned int *)&v46);
  v27 = v34;
  v28 = v26;

  _Block_object_dispose(v36, 8);
  return v28;
}

- (id)splitBlob:(id)a3 withInterdicts:(id)a4 edges:(id)a5 curatedRecordIds:(id)a6
{
  id v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t j;
  uint64_t v25;
  char *v26;
  void *v27;
  uint64_t v28;
  char *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t k;
  char *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t m;
  char *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  void *v50;
  void *v51;
  uint64_t v52;
  unsigned __int8 *v53;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t n;
  void *v65;
  NSObject *v66;
  void *v68;
  id v69;
  id v70;
  id obj;
  id v72;
  id v73;
  id v74;
  id v75;
  SGSqlEntityStore *v76;
  id v77;
  void *v78;
  int v79;
  unsigned int v80;
  unsigned int v81;
  id v82;
  void *v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint8_t buf[16];
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  char *v106;
  _BYTE v107[128];
  id v108;
  _BYTE v109[128];
  _BYTE v110[128];
  _BYTE v111[128];
  _BYTE v112[128];
  _QWORD v113[3];

  v113[1] = *MEMORY[0x1E0C80C00];
  v10 = a3;
  v11 = a4;
  v12 = a5;
  v76 = self;
  v77 = a6;
  v78 = v11;
  -[SGSqlEntityStore splitNeededFor:withInterdicts:curatedRecordIds:](self, "splitNeededFor:withInterdicts:curatedRecordIds:", v10, v11);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = v13;
  if (v13)
  {
    objc_msgSend(v13, "objectAtIndexedSubscript:", 0);
    v74 = (id)objc_claimAutoreleasedReturnValue();
    v68 = v14;
    objc_msgSend(v14, "objectAtIndexedSubscript:", 1);
    v72 = (id)objc_claimAutoreleasedReturnValue();
    v105 = 0x400000000;
    v106 = (char *)malloc_type_malloc(0x60uLL, 0x1080040CC6EE3FDuLL);
    if (!v106)
    {
      freeGraph((unsigned int *)&v105);
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("graph error"), CFSTR("SGIStore.h, line %i"), 1144);
    }
    v83 = (void *)objc_opt_new();
    v101 = 0u;
    v102 = 0u;
    v103 = 0u;
    v104 = 0u;
    v70 = v10;
    obj = v10;
    v15 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v101, v112, 16);
    if (v15)
    {
      v16 = v15;
      v17 = *(_QWORD *)v102;
      do
      {
        for (i = 0; i != v16; ++i)
        {
          if (*(_QWORD *)v102 != v17)
            objc_enumerationMutation(obj);
          v19 = *(_QWORD *)(*((_QWORD *)&v101 + 1) + 8 * i);
          if (newVertex((int *)&v105, v19))
          {
            freeGraph((unsigned int *)&v105);
            objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("graph error"), CFSTR("SGIStore.h, line %i"), 1149);
          }
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", (v105 - 1));
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v83, "setObject:forKeyedSubscript:", v20, v19);

        }
        v16 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v101, v112, 16);
      }
      while (v16);
    }

    if (newVertex((int *)&v105, 0))
    {
      freeGraph((unsigned int *)&v105);
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("graph error"), CFSTR("SGIStore.h, line %i"), 1153);
    }
    if (newVertex((int *)&v105, 0))
    {
      freeGraph((unsigned int *)&v105);
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("graph error"), CFSTR("SGIStore.h, line %i"), 1153);
    }
    v79 = v105;
    v97 = 0u;
    v98 = 0u;
    v99 = 0u;
    v100 = 0u;
    v69 = v12;
    v82 = v12;
    v21 = objc_msgSend(v82, "countByEnumeratingWithState:objects:count:", &v97, v111, 16);
    if (v21)
    {
      v22 = v21;
      v23 = *(_QWORD *)v98;
      do
      {
        for (j = 0; j != v22; ++j)
        {
          if (*(_QWORD *)v98 != v23)
            objc_enumerationMutation(v82);
          v25 = *(_QWORD *)(*((_QWORD *)&v97 + 1) + 8 * j);
          if (objc_msgSend(obj, "containsObject:", *(_QWORD *)(v25 + 8))
            && objc_msgSend(obj, "containsObject:", *(_QWORD *)(v25 + 16)))
          {
            v26 = v106;
            objc_msgSend(v83, "objectForKeyedSubscript:", *(_QWORD *)(v25 + 8));
            v27 = (void *)objc_claimAutoreleasedReturnValue();
            v28 = (uint64_t)&v26[24 * (int)objc_msgSend(v27, "intValue")];

            v29 = v106;
            objc_msgSend(v83, "objectForKeyedSubscript:", *(_QWORD *)(v25 + 16));
            v30 = (void *)objc_claimAutoreleasedReturnValue();
            v31 = (uint64_t)&v29[24 * (int)objc_msgSend(v30, "intValue")];

            if (addEdge(v28, v31, *(double *)(v25 + 24)))
            {
              freeGraph((unsigned int *)&v105);
              objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("graph error"), CFSTR("SGIStore.h, line %i"), 1161);
            }
            if (addEdge(v31, v28, *(double *)(v25 + 24)))
            {
              freeGraph((unsigned int *)&v105);
              objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("graph error"), CFSTR("SGIStore.h, line %i"), 1162);
            }
          }
        }
        v22 = objc_msgSend(v82, "countByEnumeratingWithState:objects:count:", &v97, v111, 16);
      }
      while (v22);
    }
    v81 = v79 - 2;
    v80 = v79 - 1;

    v95 = 0u;
    v96 = 0u;
    v93 = 0u;
    v94 = 0u;
    v75 = v74;
    v32 = objc_msgSend(v75, "countByEnumeratingWithState:objects:count:", &v93, v110, 16);
    if (v32)
    {
      v33 = v32;
      v34 = *(_QWORD *)v94;
      do
      {
        for (k = 0; k != v33; ++k)
        {
          if (*(_QWORD *)v94 != v34)
            objc_enumerationMutation(v75);
          v36 = v106;
          v37 = (uint64_t)&v106[24 * v81];
          objc_msgSend(v83, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v93 + 1) + 8 * k));
          v38 = (void *)objc_claimAutoreleasedReturnValue();
          v39 = (uint64_t)&v36[24 * (int)objc_msgSend(v38, "intValue")];

          if (addEdge(v37, v39, INFINITY))
          {
            freeGraph((unsigned int *)&v105);
            objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("graph error"), CFSTR("SGIStore.h, line %i"), 1171);
          }
          if (addEdge(v39, v37, INFINITY))
          {
            freeGraph((unsigned int *)&v105);
            objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("graph error"), CFSTR("SGIStore.h, line %i"), 1172);
          }
        }
        v33 = objc_msgSend(v75, "countByEnumeratingWithState:objects:count:", &v93, v110, 16);
      }
      while (v33);
    }

    v91 = 0u;
    v92 = 0u;
    v89 = 0u;
    v90 = 0u;
    v73 = v72;
    v40 = objc_msgSend(v73, "countByEnumeratingWithState:objects:count:", &v89, v109, 16);
    if (v40)
    {
      v41 = v40;
      v42 = *(_QWORD *)v90;
      do
      {
        for (m = 0; m != v41; ++m)
        {
          if (*(_QWORD *)v90 != v42)
            objc_enumerationMutation(v73);
          v44 = v106;
          v45 = (uint64_t)&v106[24 * v80];
          objc_msgSend(v83, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v89 + 1) + 8 * m));
          v46 = (void *)objc_claimAutoreleasedReturnValue();
          v47 = (uint64_t)&v44[24 * (int)objc_msgSend(v46, "intValue")];

          if (addEdge(v45, v47, INFINITY))
          {
            freeGraph((unsigned int *)&v105);
            objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("graph error"), CFSTR("SGIStore.h, line %i"), 1177);
          }
          if (addEdge(v47, v45, INFINITY))
          {
            freeGraph((unsigned int *)&v105);
            objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("graph error"), CFSTR("SGIStore.h, line %i"), 1178);
          }
        }
        v41 = objc_msgSend(v73, "countByEnumeratingWithState:objects:count:", &v89, v109, 16);
      }
      while (v41);
    }

    v48 = (unsigned __int8 *)mincut((unsigned int *)&v105, v81, v80);
    if (v48)
    {
      v49 = v48;
      v50 = (void *)objc_opt_new();
      v51 = (void *)objc_opt_new();
      v12 = v69;
      if (v81)
      {
        v52 = 0;
        v53 = v49;
        do
        {
          if (*v53++)
            v55 = v50;
          else
            v55 = v51;
          objc_msgSend(v55, "addObject:", *(_QWORD *)&v106[v52]);
          v52 += 24;
        }
        while (24 * v81 != v52);
      }
      free(v49);
      freeGraph((unsigned int *)&v105);
      v56 = (void *)objc_opt_new();
      -[SGSqlEntityStore _makeBlobsFromConnectedComponents:edges:](v76, "_makeBlobsFromConnectedComponents:edges:", v50, v82);
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v56, "addObjectsFromArray:", v57);

      -[SGSqlEntityStore _makeBlobsFromConnectedComponents:edges:](v76, "_makeBlobsFromConnectedComponents:edges:", v51, v82);
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v56, "addObjectsFromArray:", v58);

      v59 = (void *)objc_opt_new();
      v84 = 0u;
      v85 = 0u;
      v86 = 0u;
      v87 = 0u;
      v60 = v56;
      v61 = objc_msgSend(v60, "countByEnumeratingWithState:objects:count:", &v84, v107, 16);
      if (v61)
      {
        v62 = v61;
        v63 = *(_QWORD *)v85;
        do
        {
          for (n = 0; n != v62; ++n)
          {
            if (*(_QWORD *)v85 != v63)
              objc_enumerationMutation(v60);
            -[SGSqlEntityStore splitBlob:withInterdicts:edges:curatedRecordIds:](v76, "splitBlob:withInterdicts:edges:curatedRecordIds:", *(_QWORD *)(*((_QWORD *)&v84 + 1) + 8 * n), v78, v82, v77);
            v65 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v59, "addObjectsFromArray:", v65);

          }
          v62 = objc_msgSend(v60, "countByEnumeratingWithState:objects:count:", &v84, v107, 16);
        }
        while (v62);
      }

      v10 = v70;
      v14 = v68;
    }
    else
    {
      sgLogHandle();
      v66 = objc_claimAutoreleasedReturnValue();
      v12 = v69;
      if (os_log_type_enabled(v66, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_1C3607000, v66, OS_LOG_TYPE_FAULT, "mincut returned NULL, will not split blob even though we want to", buf, 2u);
      }

      v10 = v70;
      v14 = v68;
      if (_PASEvaluateLogFaultAndProbCrashCriteria())
        abort();
      freeGraph((unsigned int *)&v105);
      v108 = obj;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v108, 1);
      v59 = (void *)objc_claimAutoreleasedReturnValue();
    }

  }
  else
  {
    v113[0] = v10;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v113, 1);
    v59 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v59;
}

- (id)unmergedCandidatesLimitedTo:(int)a3
{
  void *v5;
  SGSqliteDatabase *db;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  int v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  unint64_t v32;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _QWORD v41[4];
  id v42;
  _QWORD v43[4];
  int v44;
  _BYTE v45[128];
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v5 = (void *)objc_opt_new();
  db = self->_db;
  v43[0] = MEMORY[0x1E0C809B0];
  v43[1] = 3221225472;
  v43[2] = __63__SGSqlEntityStore_IdentityStore__unmergedCandidatesLimitedTo___block_invoke;
  v43[3] = &__block_descriptor_36_e23_v16__0__sqlite3_stmt__8l;
  v44 = a3;
  v41[0] = MEMORY[0x1E0C809B0];
  v41[1] = 3221225472;
  v41[2] = __63__SGSqlEntityStore_IdentityStore__unmergedCandidatesLimitedTo___block_invoke_2;
  v41[3] = &unk_1E7DB52C8;
  v7 = v5;
  v42 = v7;
  -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](db, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("SELECT (CASE WHEN e.masterEntityId > 0 THEN e.masterEntityId ELSE e.id END), i.nameSketches FROM entity AS e INNER JOIN identityPerson AS i ON e.id = i.recordId LIMIT :limit"), v43, v41, 0);
  v8 = (void *)objc_opt_new();
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v9 = v7;
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v37, v45, 16);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)v38;
    do
    {
      for (i = 0; i != v11; ++i)
      {
        if (*(_QWORD *)v38 != v12)
          objc_enumerationMutation(v9);
        v14 = *(_QWORD *)(*((_QWORD *)&v37 + 1) + 8 * i);
        v15 = (void *)MEMORY[0x1E0D81638];
        objc_msgSend(v9, "objectForKeyedSubscript:", v14);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "tupleWithFirst:second:", v14, v16);
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "addObject:", v17);

      }
      v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v37, v45, 16);
    }
    while (v11);
  }

  v18 = (void *)objc_opt_new();
  if (objc_msgSend(v8, "count"))
  {
    v19 = 0;
    v36 = 1;
    do
    {
      v34 = v19 + 1;
      if (objc_msgSend(v8, "count") > v19 + 1)
      {
        v20 = v36;
        do
        {
          objc_msgSend(v8, "objectAtIndexedSubscript:", v19, v34);
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "second");
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v8, "objectAtIndexedSubscript:", v20);
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v23, "second");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          v25 = objc_msgSend(v22, "intersectsSet:", v24);

          if (v25)
          {
            v26 = (void *)MEMORY[0x1E0D81638];
            objc_msgSend(v8, "objectAtIndexedSubscript:", v19);
            v27 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v27, "first");
            v28 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v8, "objectAtIndexedSubscript:", v20);
            v29 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v29, "first");
            v30 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v26, "tupleWithFirst:second:", v28, v30);
            v31 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v18, "addObject:", v31);

          }
          ++v20;
        }
        while (objc_msgSend(v8, "count") > v20);
      }
      v32 = objc_msgSend(v8, "count", v34);
      ++v36;
      v19 = v35;
    }
    while (v32 > v35);
  }

  return v18;
}

- (id)_uniqueGoodDetailMatchFrom:(id)a3 toDetails:(id)a4 nonUnique:(BOOL *)a5
{
  id v7;
  id v8;
  uint64_t v9;
  id v10;
  void *v11;
  id v12;
  void (**v13)(_QWORD, _QWORD, _QWORD);
  void *v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  _QWORD v20[4];
  id v21;
  BOOL *v22;
  _QWORD v23[4];
  id v24;

  v7 = a3;
  v8 = a4;
  v9 = MEMORY[0x1E0C809B0];
  v23[0] = MEMORY[0x1E0C809B0];
  v23[1] = 3221225472;
  v23[2] = __82__SGSqlEntityStore_IdentityStore___uniqueGoodDetailMatchFrom_toDetails_nonUnique___block_invoke;
  v23[3] = &unk_1E7DAAF60;
  v10 = v8;
  v24 = v10;
  v11 = (void *)MEMORY[0x1C3BD5158](v23);
  v20[0] = v9;
  v20[1] = 3221225472;
  v20[2] = __82__SGSqlEntityStore_IdentityStore___uniqueGoodDetailMatchFrom_toDetails_nonUnique___block_invoke_4;
  v20[3] = &unk_1E7DAAF88;
  v22 = a5;
  v12 = v7;
  v21 = v12;
  v13 = (void (**)(_QWORD, _QWORD, _QWORD))MEMORY[0x1C3BD5158](v20);
  objc_msgSend(MEMORY[0x1E0D19828], "map:f:", v12, v11);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  *a5 = 0;
  ((void (**)(_QWORD, _QWORD, void *))v13)[2](v13, 0, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = v15;
  if (v15)
  {
    v17 = v15;
  }
  else
  {
    if (!*a5)
    {
      v18 = 0;
      goto LABEL_6;
    }
    *a5 = 0;
    ((void (**)(_QWORD, uint64_t, void *))v13)[2](v13, 1, v14);
    v17 = (id)objc_claimAutoreleasedReturnValue();
  }
  v18 = v17;
LABEL_6:

  return v18;
}

- (id)makeInterdictsForBlob:(id)a3 withContactStore:(id)a4
{
  id v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  SGSqliteDatabase *db;
  uint64_t v12;
  id v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  void (**v17)(_QWORD, _QWORD, _QWORD);
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t i;
  uint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  NSObject *v33;
  void *v34;
  unint64_t v35;
  void *v36;
  void *v37;
  uint64_t j;
  void *v39;
  void *v40;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  id v45;
  id v46;
  id v47;
  NSObject *v48;
  id v49;
  NSObject *obj;
  uint64_t v51;
  uint64_t v52;
  void *context;
  uint64_t v54;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  _QWORD v60[4];
  id v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  _QWORD v66[4];
  id v67;
  _QWORD v68[4];
  NSObject *v69;
  _QWORD v70[4];
  id v71;
  _BYTE v72[128];
  _BYTE v73[128];
  _QWORD v74[5];
  uint8_t buf[4];
  uint64_t v76;
  __int16 v77;
  uint64_t v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = a4;
  if (objc_msgSend(v5, "count"))
  {
    if ((unint64_t)objc_msgSend(v5, "count") >= 0x65)
    {
      sgLogHandle();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134217984;
        v76 = objc_msgSend(v5, "count");
        _os_log_debug_impl(&dword_1C3607000, v7, OS_LOG_TYPE_DEBUG, "Can't create interdicts for blob of size %lu; skipping.",
          buf,
          0xCu);
      }
      v8 = (void *)MEMORY[0x1E0C9AA60];
      goto LABEL_47;
    }
    v9 = (void *)objc_opt_new();
    sgMap();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    db = self->_db;
    v12 = MEMORY[0x1E0C809B0];
    v70[0] = MEMORY[0x1E0C809B0];
    v70[1] = 3221225472;
    v70[2] = __74__SGSqlEntityStore_IdentityStore__makeInterdictsForBlob_withContactStore___block_invoke_2;
    v70[3] = &unk_1E7DB74A0;
    v13 = v10;
    v71 = v13;
    v68[0] = v12;
    v68[1] = 3221225472;
    v68[2] = __74__SGSqlEntityStore_IdentityStore__makeInterdictsForBlob_withContactStore___block_invoke_3;
    v68[3] = &unk_1E7DB6ED0;
    v7 = v9;
    v69 = v7;
    -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](db, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("SELECT recordId, fullname, phones, email, socialProfileIdentifiers FROM identityPerson WHERE recordId IN _pas_nsarray(:ids)"), v70, v68, 0);
    if ((unint64_t)-[NSObject count](v7, "count") >= 6)
    {
      sgLogHandle();
      v14 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        v42 = -[NSObject count](v7, "count");
        *(_DWORD *)buf = 134218240;
        v76 = v42;
        v77 = 2048;
        v78 = 5;
        _os_log_debug_impl(&dword_1C3607000, v14, OS_LOG_TYPE_DEBUG, "Merge group containing %lu names exceeds limit of %lu; skipping interdict construction.",
          buf,
          0x16u);
      }
      v8 = (void *)MEMORY[0x1E0C9AA60];
      goto LABEL_46;
    }
    v45 = v13;
    v46 = v5;
    v15 = *MEMORY[0x1E0C967C0];
    v74[0] = *MEMORY[0x1E0C966E8];
    v74[1] = v15;
    v16 = *MEMORY[0x1E0C96740];
    v74[2] = *MEMORY[0x1E0C966A8];
    v74[3] = v16;
    v74[4] = *MEMORY[0x1E0C96868];
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v74, 5);
    v14 = objc_claimAutoreleasedReturnValue();
    v66[0] = v12;
    v66[1] = 3221225472;
    v66[2] = __74__SGSqlEntityStore_IdentityStore__makeInterdictsForBlob_withContactStore___block_invoke_212;
    v66[3] = &unk_1E7DAAFD0;
    v47 = (id)objc_opt_new();
    v67 = v47;
    v17 = (void (**)(_QWORD, _QWORD, _QWORD))MEMORY[0x1C3BD5158](v66);
    v62 = 0u;
    v63 = 0u;
    v64 = 0u;
    v65 = 0u;
    v44 = v7;
    obj = v7;
    v52 = -[NSObject countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v62, v73, 16);
    v48 = v14;
    v49 = v6;
    if (v52)
    {
      v51 = *(_QWORD *)v63;
      do
      {
        v18 = 0;
        do
        {
          if (*(_QWORD *)v63 != v51)
            objc_enumerationMutation(obj);
          v54 = v18;
          v19 = *(_QWORD *)(*((_QWORD *)&v62 + 1) + 8 * v18);
          context = (void *)MEMORY[0x1C3BD4F6C]();
          v20 = (void *)objc_opt_new();
          v60[0] = v12;
          v60[1] = 3221225472;
          v60[2] = __74__SGSqlEntityStore_IdentityStore__makeInterdictsForBlob_withContactStore___block_invoke_2_215;
          v60[3] = &unk_1E7DB4A90;
          v21 = v20;
          v61 = v21;
          +[SGContactsInterface enumerateContactsMatchingName:withKeysToFetch:usingContactStore:error:usingBlock:](SGContactsInterface, "enumerateContactsMatchingName:withKeysToFetch:usingContactStore:error:usingBlock:", v19, v14, v6, 0, v60);
          if (objc_msgSend(v21, "count") && (unint64_t)objc_msgSend(v21, "count") <= 4)
          {
            -[NSObject objectForKeyedSubscript:](obj, "objectForKeyedSubscript:", v19);
            v22 = (void *)objc_claimAutoreleasedReturnValue();
            v56 = 0u;
            v57 = 0u;
            v58 = 0u;
            v59 = 0u;
            v23 = v22;
            v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v56, v72, 16);
            if (v24)
            {
              v25 = v24;
              v26 = *(_QWORD *)v57;
              do
              {
                for (i = 0; i != v25; ++i)
                {
                  if (*(_QWORD *)v57 != v26)
                    objc_enumerationMutation(v23);
                  v28 = *(_QWORD *)(*((_QWORD *)&v56 + 1) + 8 * i);
                  v29 = (void *)MEMORY[0x1C3BD4F6C]();
                  if (objc_msgSend(v21, "count") == 1)
                  {
                    objc_msgSend(v21, "objectAtIndexedSubscript:", 0);
                    v30 = (void *)objc_claimAutoreleasedReturnValue();
                    ((void (**)(_QWORD, void *, uint64_t))v17)[2](v17, v30, v28);
                  }
                  else
                  {
                    objc_msgSend(v23, "objectForKeyedSubscript:", v28);
                    v30 = (void *)objc_claimAutoreleasedReturnValue();
                    buf[0] = 0;
                    -[SGSqlEntityStore _uniqueGoodDetailMatchFrom:toDetails:nonUnique:](self, "_uniqueGoodDetailMatchFrom:toDetails:nonUnique:", v21, v30, buf);
                    v31 = (void *)objc_claimAutoreleasedReturnValue();
                    if (v31)
                      ((void (**)(_QWORD, void *, uint64_t))v17)[2](v17, v31, v28);

                  }
                  objc_autoreleasePoolPop(v29);
                }
                v25 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v56, v72, 16);
              }
              while (v25);
            }

            v14 = v48;
            v6 = v49;
            v12 = MEMORY[0x1E0C809B0];
          }

          objc_autoreleasePoolPop(context);
          v18 = v54 + 1;
        }
        while (v54 + 1 != v52);
        v52 = -[NSObject countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v62, v73, 16);
      }
      while (v52);
    }

    v32 = v47;
    if ((unint64_t)objc_msgSend(v47, "count") < 6)
    {
      v34 = (void *)MEMORY[0x1C3BD4F6C]();
      objc_msgSend(v47, "allValues");
      v33 = objc_claimAutoreleasedReturnValue();
      objc_autoreleasePoolPop(v34);
      v8 = (void *)objc_opt_new();
      if (-[NSObject count](v33, "count"))
      {
        v35 = 0;
        do
        {
          v36 = (void *)MEMORY[0x1C3BD4F6C]();
          -[NSObject objectAtIndexedSubscript:](v33, "objectAtIndexedSubscript:", v35);
          v37 = (void *)objc_claimAutoreleasedReturnValue();
          if (v35)
          {
            for (j = 0; j != v35; ++j)
            {
              -[NSObject objectAtIndexedSubscript:](v33, "objectAtIndexedSubscript:", j, v44);
              v39 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(MEMORY[0x1E0D81638], "tupleWithFirst:second:", v37, v39);
              v40 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v8, "addObject:", v40);

            }
          }

          objc_autoreleasePoolPop(v36);
          ++v35;
        }
        while (v35 < -[NSObject count](v33, "count"));
        v14 = v48;
        v6 = v49;
        v7 = v44;
        v32 = v47;
        goto LABEL_45;
      }
    }
    else
    {
      sgLogHandle();
      v33 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
      {
        v43 = objc_msgSend(v47, "count");
        *(_DWORD *)buf = 134218240;
        v76 = v43;
        v77 = 2048;
        v78 = 5;
        _os_log_debug_impl(&dword_1C3607000, v33, OS_LOG_TYPE_DEBUG, "Merge group mapping to %lu CNContacts exceeds limit of %lu; skipping interdict construction.",
          buf,
          0x16u);
      }
      v8 = (void *)MEMORY[0x1E0C9AA60];
    }
    v7 = v44;
LABEL_45:

    v13 = v45;
    v5 = v46;
LABEL_46:

LABEL_47:
    goto LABEL_48;
  }
  v8 = (void *)MEMORY[0x1E0C9AA60];
LABEL_48:

  return v8;
}

- (void)_writeMergeBlobSnapshotForAnalysis:(id)a3
{
  id v4;
  SGSqliteDatabase *db;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  db = self->_db;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __70__SGSqlEntityStore_IdentityStore___writeMergeBlobSnapshotForAnalysis___block_invoke;
  v7[3] = &unk_1E7DB6A30;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v7);

}

- (id)_popMergeBlobForAnalysis
{
  SGSqliteDatabase *db;
  id v3;
  _QWORD v5[6];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);
  void (*v10)(uint64_t);
  id v11;

  v6 = 0;
  v7 = &v6;
  v8 = 0x3032000000;
  v9 = __Block_byref_object_copy__8446;
  v10 = __Block_byref_object_dispose__8447;
  v11 = 0;
  db = self->_db;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __59__SGSqlEntityStore_IdentityStore___popMergeBlobForAnalysis__block_invoke;
  v5[3] = &unk_1E7DB78A0;
  v5[4] = self;
  v5[5] = &v6;
  -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v5);
  v3 = (id)v7[5];
  _Block_object_dispose(&v6, 8);

  return v3;
}

- (BOOL)_isBlobAnalysisQueueEmpty
{
  SGSqliteDatabase *db;
  char v3;
  _QWORD v5[5];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  char v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v9 = 1;
  db = self->_db;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __60__SGSqlEntityStore_IdentityStore___isBlobAnalysisQueueEmpty__block_invoke;
  v5[3] = &unk_1E7DB51B8;
  v5[4] = &v6;
  -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](db, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("SELECT 1 FROM identityBlobAnalysisJobs LIMIT 1"), 0, v5, 0);
  v3 = *((_BYTE *)v7 + 24);
  _Block_object_dispose(&v6, 8);
  return v3;
}

- (BOOL)_analyzeMergeBlobsIncremental:(id)a3
{
  id v4;
  uint64_t v5;
  SGSqliteDatabase *db;
  id v7;
  void *v8;
  _BOOL4 v9;
  SGSqliteDatabase *v10;
  _QWORD v12[5];
  _QWORD v13[5];
  id v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  char v19;

  v4 = a3;
  v16 = 0;
  v17 = &v16;
  v18 = 0x2020000000;
  v19 = 0;
  v5 = MEMORY[0x1E0C809B0];
  db = self->_db;
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = __65__SGSqlEntityStore_IdentityStore___analyzeMergeBlobsIncremental___block_invoke;
  v13[3] = &unk_1E7DB7878;
  v13[4] = self;
  v7 = v4;
  v14 = v7;
  v15 = &v16;
  -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v13);
  if (*((_BYTE *)v17 + 24))
  {
    -[SGSqlEntityStore _computeBlobsRaw:](self, "_computeBlobsRaw:", 0);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[SGSqlEntityStore _writeMergeBlobSnapshotForAnalysis:](self, "_writeMergeBlobSnapshotForAnalysis:", v8);

  }
  v9 = -[SGSqlEntityStore _isBlobAnalysisQueueEmpty](self, "_isBlobAnalysisQueueEmpty");
  if (v9)
  {
    v10 = self->_db;
    v12[0] = v5;
    v12[1] = 3221225472;
    v12[2] = __65__SGSqlEntityStore_IdentityStore___analyzeMergeBlobsIncremental___block_invoke_5;
    v12[3] = &unk_1E7DB56F0;
    v12[4] = self;
    -[SGSqliteDatabase writeTransaction:](v10, "writeTransaction:", v12);
  }

  _Block_object_dispose(&v16, 8);
  return v9;
}

- (void)analyzeMergeBlobs:(id)a3
{
  _xpc_activity_s *v3;
  NSObject *v4;
  dispatch_semaphore_t v5;
  __objc2_class **v6;
  uint64_t v7;
  __objc2_class *v8;
  NSObject *v9;
  void *v10;
  char v11;
  NSObject *v12;
  void *v13;
  NSObject *v14;
  SGSqlEntityStore *v15;
  void *v16;
  void *context;
  _QWORD v18[4];
  NSObject *v19;
  uint8_t buf[16];

  v15 = self;
  v3 = (_xpc_activity_s *)a3;
  sgLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1C3607000, v4, OS_LOG_TYPE_INFO, "Starting identity blob analysis.", buf, 2u);
  }

  +[SGContactStoreFactory contactStore](SGContactStoreFactory, "contactStore");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = dispatch_semaphore_create(0);
  v6 = off_1E7DA6000;
  v7 = MEMORY[0x1E0C809B0];
LABEL_4:
  context = (void *)MEMORY[0x1C3BD4F6C]();
  v18[0] = v7;
  v8 = v6[104];
  v18[1] = 3221225472;
  v18[2] = __53__SGSqlEntityStore_IdentityStore__analyzeMergeBlobs___block_invoke;
  v18[3] = &unk_1E7DB56F0;
  v9 = v5;
  v19 = v9;
  -[__objc2_class notifyWhenFlushed:](v8, "notifyWhenFlushed:", v18);
  while (1)
  {
    if (v3)
    {
      +[SGXPCActivityManager sharedInstance](SGXPCActivityManager, "sharedInstance");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = objc_msgSend(v10, "shouldDefer:", v3);

      if ((v11 & 1) != 0)
        break;
    }
    if (objc_msgSend(MEMORY[0x1E0D81598], "waitForSemaphore:timeoutSeconds:", v9, 0.5, v15) != 1)
    {
      if (!-[SGSqlEntityStore _analyzeMergeBlobsIncremental:](v15, "_analyzeMergeBlobsIncremental:", v16))
      {

        objc_autoreleasePoolPop(context);
        v6 = off_1E7DA6000;
        v7 = MEMORY[0x1E0C809B0];
        goto LABEL_4;
      }
      sgLogHandle();
      v14 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1C3607000, v14, OS_LOG_TYPE_INFO, "Blob analysis complete.", buf, 2u);
      }
      v13 = context;
      goto LABEL_15;
    }
  }
  sgLogHandle();
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1C3607000, v12, OS_LOG_TYPE_INFO, "Blob analysis deferring.", buf, 2u);
  }

  v13 = context;
  if (!xpc_activity_set_state(v3, 3))
  {
    sgLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1C3607000, v14, OS_LOG_TYPE_ERROR, "Could not defer blob analysis.", buf, 2u);
    }
LABEL_15:

  }
  objc_autoreleasePoolPop(v13);

}

intptr_t __53__SGSqlEntityStore_IdentityStore__analyzeMergeBlobs___block_invoke(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void __65__SGSqlEntityStore_IdentityStore___analyzeMergeBlobsIncremental___block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  void *v19;
  id obj;
  _QWORD v21[4];
  id v22;
  id v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[128];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "_popMergeBlobForAnalysis");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (v2)
  {
    v19 = v2;
    objc_msgSend(*(id *)(a1 + 32), "makeInterdictsForBlob:withContactStore:", v2, *(_QWORD *)(a1 + 40));
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v27 = 0u;
    obj = (id)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)v25;
      do
      {
        for (i = 0; i != v4; ++i)
        {
          if (*(_QWORD *)v25 != v5)
            objc_enumerationMutation(obj);
          v7 = *(void **)(*((_QWORD *)&v24 + 1) + 8 * i);
          objc_msgSend(v7, "first");
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          sgMap();
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v9, "sortedArrayUsingSelector:", sel_compare_);
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          SGDelimitedStringsSerializeArray();
          v11 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(v7, "second");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          sgMap();
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v13, "sortedArrayUsingSelector:", sel_compare_);
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          SGDelimitedStringsSerializeArray();
          v15 = (void *)objc_claimAutoreleasedReturnValue();

          v16 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
          v21[0] = MEMORY[0x1E0C809B0];
          v21[1] = 3221225472;
          v21[2] = __65__SGSqlEntityStore_IdentityStore___analyzeMergeBlobsIncremental___block_invoke_4;
          v21[3] = &unk_1E7DB5190;
          v22 = v11;
          v23 = v15;
          v17 = v15;
          v18 = v11;
          objc_msgSend(v16, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("INSERT INTO identityInterdictNext (a, b) VALUES (?, ?)"), v21, 0, 0);

        }
        v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
      }
      while (v4);
    }

    v2 = v19;
  }
  else
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
  }

}

void __65__SGSqlEntityStore_IdentityStore___analyzeMergeBlobsIncremental___block_invoke_5(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  id v6;
  char v7;
  char v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _QWORD v16[5];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _QWORD v21[4];
  id v22;
  _BYTE v23[128];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("DROP TABLE identityInterdict"), 0, 0, 0);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("CREATE TABLE identityInterdict (a TEXT NOT NULL, b TEXT NOT NULL)"), 0, 0, 0);
  v2 = (void *)objc_opt_new();
  v3 = (void *)objc_opt_new();
  v4 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v5 = MEMORY[0x1E0C809B0];
  v21[0] = MEMORY[0x1E0C809B0];
  v21[1] = 3221225472;
  v21[2] = __65__SGSqlEntityStore_IdentityStore___analyzeMergeBlobsIncremental___block_invoke_6;
  v21[3] = &unk_1E7DB6ED0;
  v6 = v2;
  v22 = v6;
  objc_msgSend(v4, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("SELECT a, b FROM identityInterdictNext"), 0, v21, 0);
  do
  {
    do
    {
      v7 = simplifyInterdicts(v6, v3);
      objc_msgSend(v6, "removeAllObjects");
      v8 = simplifyInterdicts(v3, v6);
      objc_msgSend(v3, "removeAllObjects");
    }
    while ((v7 & 1) != 0);
  }
  while ((v8 & 1) != 0);
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v9 = v6;
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v17, v23, 16);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)v18;
    do
    {
      v13 = 0;
      do
      {
        if (*(_QWORD *)v18 != v12)
          objc_enumerationMutation(v9);
        v14 = *(_QWORD *)(*((_QWORD *)&v17 + 1) + 8 * v13);
        v15 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
        v16[0] = v5;
        v16[1] = 3221225472;
        v16[2] = __65__SGSqlEntityStore_IdentityStore___analyzeMergeBlobsIncremental___block_invoke_7;
        v16[3] = &unk_1E7DB7720;
        v16[4] = v14;
        objc_msgSend(v15, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("INSERT INTO identityInterdict (a, b) VALUES (?, ?)"), v16, 0, 0);
        ++v13;
      }
      while (v11 != v13);
      v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v17, v23, 16);
    }
    while (v11);
  }

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("DELETE FROM identityInterdictNext"), 0, 0, 0);
  objc_msgSend(*(id *)(a1 + 32), "_markIdentityStoreDirty");
  objc_msgSend(*(id *)(a1 + 32), "syncNewBlobsIfChanged");

}

uint64_t __65__SGSqlEntityStore_IdentityStore___analyzeMergeBlobsIncremental___block_invoke_6(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  unsigned __int8 *v10;

  v3 = a2;
  objc_msgSend(v3, "nonnullNSStringForColumnName:table:", "a", 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "nonnullNSStringForColumnName:table:", "b", 0);
  v5 = objc_claimAutoreleasedReturnValue();

  v6 = objc_msgSend(v4, "compare:", v5);
  if (v6 == 1)
    v7 = v4;
  else
    v7 = (void *)v5;
  if (v6 == 1)
    v4 = (void *)v5;
  v8 = *(void **)(a1 + 32);
  v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D81638]), "initWithFirst:second:", v4, v7);
  objc_msgSend(v8, "addObject:", v9);

  v10 = (unsigned __int8 *)MEMORY[0x1E0D81780];
  return *v10;
}

void __65__SGSqlEntityStore_IdentityStore___analyzeMergeBlobsIncremental___block_invoke_7(uint64_t a1, sqlite3_stmt *a2)
{
  id v4;
  id v5;

  objc_msgSend(*(id *)(a1 + 32), "first");
  v4 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  sqlite3_bind_text(a2, 1, (const char *)objc_msgSend(v4, "UTF8String"), -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);

  objc_msgSend(*(id *)(a1 + 32), "second");
  v5 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  sqlite3_bind_text(a2, 2, (const char *)objc_msgSend(v5, "UTF8String"), -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);

}

uint64_t __65__SGSqlEntityStore_IdentityStore___analyzeMergeBlobsIncremental___block_invoke_4(uint64_t a1, sqlite3_stmt *a2)
{
  sqlite3_bind_text(a2, 1, (const char *)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 32)), "UTF8String"), -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  return sqlite3_bind_text(a2, 2, (const char *)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 40)), "UTF8String"), -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
}

id __65__SGSqlEntityStore_IdentityStore___analyzeMergeBlobsIncremental___block_invoke_3(uint64_t a1, void *a2)
{
  objc_class *v2;
  id v3;
  id v4;
  uint64_t v5;

  v2 = (objc_class *)MEMORY[0x1E0CB3940];
  v3 = a2;
  v4 = [v2 alloc];
  v5 = objc_msgSend(v3, "numericValue");

  return (id)objc_msgSend(v4, "initWithFormat:", CFSTR("%lld"), v5);
}

id __65__SGSqlEntityStore_IdentityStore___analyzeMergeBlobsIncremental___block_invoke_2(uint64_t a1, void *a2)
{
  objc_class *v2;
  id v3;
  id v4;
  uint64_t v5;

  v2 = (objc_class *)MEMORY[0x1E0CB3940];
  v3 = a2;
  v4 = [v2 alloc];
  v5 = objc_msgSend(v3, "numericValue");

  return (id)objc_msgSend(v4, "initWithFormat:", CFSTR("%lld"), v5);
}

uint64_t __60__SGSqlEntityStore_IdentityStore___isBlobAnalysisQueueEmpty__block_invoke(uint64_t a1)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
  return 1;
}

void __59__SGSqlEntityStore_IdentityStore___popMergeBlobForAnalysis__block_invoke(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  _QWORD v6[5];
  _QWORD v7[6];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  v8 = 0;
  v9 = &v8;
  v10 = 0x2020000000;
  v11 = -1;
  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v7[2] = __59__SGSqlEntityStore_IdentityStore___popMergeBlobForAnalysis__block_invoke_2;
  v7[3] = &unk_1E7DAD568;
  v4 = MEMORY[0x1E0C809B0];
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[4] = &v8;
  v7[5] = v2;
  objc_msgSend(v3, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("SELECT id, mergeBlob FROM identityBlobAnalysisJobs"), 0, v7, 0);
  if (v9[3] != -1)
  {
    v5 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
    v6[0] = v4;
    v6[1] = 3221225472;
    v6[2] = __59__SGSqlEntityStore_IdentityStore___popMergeBlobForAnalysis__block_invoke_3;
    v6[3] = &unk_1E7DAF138;
    v6[4] = &v8;
    objc_msgSend(v5, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("DELETE FROM identityBlobAnalysisJobs WHERE id = :blobId"), v6, 0, 0);
  }
  _Block_object_dispose(&v8, 8);
}

uint64_t __59__SGSqlEntityStore_IdentityStore___popMergeBlobForAnalysis__block_invoke_2(uint64_t a1, sqlite3_stmt *a2)
{
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = sqlite3_column_int64(a2, 0);
  v4 = (void *)MEMORY[0x1C3BD4F6C]();
  v5 = objc_alloc(MEMORY[0x1E0C99E60]);
  v6 = objc_opt_class();
  v7 = (void *)objc_msgSend(v5, "initWithObjects:", v6, objc_opt_class(), 0);
  objc_autoreleasePoolPop(v4);
  sqlite3_column_nssecurecoding(a2, 1, v7);
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v10 = *(void **)(v9 + 40);
  *(_QWORD *)(v9 + 40) = v8;

  return 1;
}

uint64_t __59__SGSqlEntityStore_IdentityStore___popMergeBlobForAnalysis__block_invoke_3(uint64_t a1, uint64_t a2)
{
  return +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":blobId", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
}

void __70__SGSqlEntityStore_IdentityStore___writeMergeBlobSnapshotForAnalysis___block_invoke(uint64_t a1)
{
  id v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  NSObject *v12;
  __int128 v13;
  _QWORD v14[4];
  id v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint8_t buf[4];
  uint64_t v21;
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("DELETE FROM identityBlobAnalysisJobs"), 0, 0, 0);
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v2 = *(id *)(a1 + 40);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v16, v22, 16);
  if (v3)
  {
    v5 = v3;
    v6 = *(_QWORD *)v17;
    *(_QWORD *)&v4 = 138412290;
    v13 = v4;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v17 != v6)
          objc_enumerationMutation(v2);
        v8 = *(_QWORD *)(*((_QWORD *)&v16 + 1) + 8 * i);
        objc_msgSend(MEMORY[0x1E0CB36F8], "archivedDataWithRootObject:requiringSecureCoding:error:", v8, 1, 0, v13);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v10 = v9;
        if (v9)
        {
          v11 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
          v14[0] = MEMORY[0x1E0C809B0];
          v14[1] = 3221225472;
          v14[2] = __70__SGSqlEntityStore_IdentityStore___writeMergeBlobSnapshotForAnalysis___block_invoke_222;
          v14[3] = &unk_1E7DB7720;
          v15 = v9;
          objc_msgSend(v11, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("INSERT INTO identityBlobAnalysisJobs (mergeBlob) VALUES (:mergeBlob)"), v14, 0, 0);

        }
        else
        {
          sgLogHandle();
          v12 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)buf = v13;
            v21 = v8;
            _os_log_fault_impl(&dword_1C3607000, v12, OS_LOG_TYPE_FAULT, "Failed to encode mergeBlob: %@", buf, 0xCu);
          }

          if (_PASEvaluateLogFaultAndProbCrashCriteria())
            abort();
        }

      }
      v5 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v16, v22, 16);
    }
    while (v5);
  }

}

uint64_t __70__SGSqlEntityStore_IdentityStore___writeMergeBlobSnapshotForAnalysis___block_invoke_222(uint64_t a1, uint64_t a2)
{
  return +[SGSqliteDatabase bindParam:name:nsdata:](SGSqliteDatabase, "bindParam:name:nsdata:", a2, ":mergeBlob", *(_QWORD *)(a1 + 32));
}

uint64_t __74__SGSqlEntityStore_IdentityStore__makeInterdictsForBlob_withContactStore___block_invoke_2(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "bindNamedParam:toNSArray:", ":ids", *(_QWORD *)(a1 + 32));
}

uint64_t __74__SGSqlEntityStore_IdentityStore__makeInterdictsForBlob_withContactStore___block_invoke_3(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v19;
  _QWORD v20[2];

  v20[1] = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (void *)MEMORY[0x1C3BD4F6C]();
  objc_msgSend(MEMORY[0x1E0D19920], "recordIdForContactWithRowId:", objc_msgSend(v3, "getInt64ForColumnName:table:", "recordId", "identityPerson"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "getNSStringForColumnName:table:", "fullname", "identityPerson");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void *)objc_opt_new();
  objc_msgSend(v3, "getNSStringForColumnName:table:", "phones", "identityPerson");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  SGDelimitedStringsDeserialize();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setPhones:", v9);

  objc_msgSend(v3, "getNSStringForColumnName:table:", "email", "identityPerson");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setEmail:", v10);

  objc_msgSend(v3, "getNSStringForColumnName:table:", "socialProfileIdentifiers", "identityPerson");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  SGDelimitedStringsDeserialize();
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setSocialProfileIdentifiers:", v12);

  if (v6)
  {
    objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v6);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    if (v13)
    {
      v14 = v13;
      v15 = v7;
      v16 = v5;
    }
    else
    {
      v19 = v5;
      v20[0] = v7;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v20, &v19, 1);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = (void *)objc_msgSend(v17, "mutableCopy");

      v13 = *(void **)(a1 + 32);
      v15 = v14;
      v16 = v6;
    }
    objc_msgSend(v13, "setObject:forKeyedSubscript:", v15, v16);

  }
  objc_autoreleasePoolPop(v4);

  return *MEMORY[0x1E0D81780];
}

void __74__SGSqlEntityStore_IdentityStore__makeInterdictsForBlob_withContactStore___block_invoke_212(uint64_t a1, void *a2, void *a3)
{
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;

  v10 = a2;
  v5 = *(void **)(a1 + 32);
  v6 = a3;
  objc_msgSend(v5, "objectForKeyedSubscript:", v10);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v7)
  {
    v8 = (void *)objc_opt_new();
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v8, v10);

  }
  objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v10);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "addObject:", v6);

}

uint64_t __74__SGSqlEntityStore_IdentityStore__makeInterdictsForBlob_withContactStore___block_invoke_2_215(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "addObject:", a2);
}

uint64_t __74__SGSqlEntityStore_IdentityStore__makeInterdictsForBlob_withContactStore___block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", objc_msgSend(a2, "rowId"));
}

id __82__SGSqlEntityStore_IdentityStore___uniqueGoodDetailMatchFrom_toDetails_nonUnique___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  unsigned int v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t j;
  void *v30;
  SGSocialProfileDetails *v31;
  void *v32;
  SGSocialProfileDetails *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t k;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t m;
  void *v43;
  uint64_t v45;
  id v46;
  id obj;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  _BYTE v64[128];
  _BYTE v65[128];
  _BYTE v66[128];
  _BYTE v67[128];
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  objc_msgSend(*(id *)(a1 + 32), "phones");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v4, "count"))
  {

    goto LABEL_12;
  }
  objc_msgSend(v3, "phoneNumbers");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "count");

  if (!v6)
  {
LABEL_12:
    v13 = 0;
    goto LABEL_15;
  }
  v7 = (void *)MEMORY[0x1E0D19828];
  objc_msgSend(v3, "phoneNumbers");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "map:f:", v8, &__block_literal_global_199_8477);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  v62 = 0u;
  v63 = 0u;
  v60 = 0u;
  v61 = 0u;
  objc_msgSend(*(id *)(a1 + 32), "phones");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v60, v67, 16);
  if (v11)
  {
    v12 = v11;
    v13 = 0;
    v14 = *(_QWORD *)v61;
    do
    {
      for (i = 0; i != v12; ++i)
      {
        if (*(_QWORD *)v61 != v14)
          objc_enumerationMutation(v10);
        v13 += objc_msgSend(v9, "containsObject:", *(_QWORD *)(*((_QWORD *)&v60 + 1) + 8 * i));
      }
      v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v60, v67, 16);
    }
    while (v12);
  }
  else
  {
    v13 = 0;
  }

LABEL_15:
  objc_msgSend(*(id *)(a1 + 32), "email");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v16, "length"))
  {
    objc_msgSend(v3, "emailAddresses");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = objc_msgSend(v17, "count");

    if (!v18)
      goto LABEL_19;
    v19 = (void *)MEMORY[0x1E0D19828];
    objc_msgSend(v3, "emailAddresses");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "map:f:", v20, &__block_literal_global_201);
    v16 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(*(id *)(a1 + 32), "email");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = objc_msgSend(v16, "containsObject:", v21);

    v13 += v22;
  }

LABEL_19:
  objc_msgSend(*(id *)(a1 + 32), "socialProfileIdentifiers");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v23, "count"))
  {
LABEL_44:

    goto LABEL_45;
  }
  objc_msgSend(v3, "socialProfiles");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v25 = objc_msgSend(v24, "count");

  if (v25)
  {
    v45 = a1;
    v46 = v3;
    v58 = 0u;
    v59 = 0u;
    v56 = 0u;
    v57 = 0u;
    objc_msgSend(v3, "socialProfiles");
    obj = (id)objc_claimAutoreleasedReturnValue();
    v26 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v56, v66, 16);
    if (v26)
    {
      v27 = v26;
      v28 = *(_QWORD *)v57;
      do
      {
        for (j = 0; j != v27; ++j)
        {
          if (*(_QWORD *)v57 != v28)
            objc_enumerationMutation(obj);
          v30 = *(void **)(*((_QWORD *)&v56 + 1) + 8 * j);
          v31 = [SGSocialProfileDetails alloc];
          objc_msgSend(v30, "value");
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          v33 = -[SGSocialProfileDetails initWithCNSocialProfile:](v31, "initWithCNSocialProfile:", v32);

          v54 = 0u;
          v55 = 0u;
          v52 = 0u;
          v53 = 0u;
          -[SGSocialProfileDetails uniqueIdentifiers](v33, "uniqueIdentifiers");
          v34 = (void *)objc_claimAutoreleasedReturnValue();
          v35 = objc_msgSend(v34, "countByEnumeratingWithState:objects:count:", &v52, v65, 16);
          if (v35)
          {
            v36 = v35;
            v37 = *(_QWORD *)v53;
            do
            {
              for (k = 0; k != v36; ++k)
              {
                if (*(_QWORD *)v53 != v37)
                  objc_enumerationMutation(v34);
                objc_msgSend(0, "addObject:", *(_QWORD *)(*((_QWORD *)&v52 + 1) + 8 * k));
              }
              v36 = objc_msgSend(v34, "countByEnumeratingWithState:objects:count:", &v52, v65, 16);
            }
            while (v36);
          }

        }
        v27 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v56, v66, 16);
      }
      while (v27);
    }

    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    objc_msgSend(*(id *)(v45 + 32), "socialProfileIdentifiers");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v39 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v48, v64, 16);
    if (v39)
    {
      v40 = v39;
      v41 = *(_QWORD *)v49;
      v3 = v46;
      do
      {
        for (m = 0; m != v40; ++m)
        {
          if (*(_QWORD *)v49 != v41)
            objc_enumerationMutation(v23);
          v13 += objc_msgSend(0, "containsObject:", *(_QWORD *)(*((_QWORD *)&v48 + 1) + 8 * m));
        }
        v40 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v48, v64, 16);
      }
      while (v40);
    }
    else
    {
      v3 = v46;
    }
    goto LABEL_44;
  }
LABEL_45:
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v13);
  v43 = (void *)objc_claimAutoreleasedReturnValue();

  return v43;
}

id __82__SGSqlEntityStore_IdentityStore___uniqueGoodDetailMatchFrom_toDetails_nonUnique___block_invoke_4(uint64_t a1, unint64_t a2, void *a3)
{
  id v5;
  uint64_t v6;
  id v7;
  void *v8;
  unint64_t v9;
  void *v10;

  v5 = a3;
  if (objc_msgSend(v5, "count"))
  {
    v6 = 0;
    v7 = 0;
    while (1)
    {
      objc_msgSend(v5, "objectAtIndexedSubscript:", v6);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = objc_msgSend(v8, "unsignedIntegerValue");

      if (v9 > a2)
      {
        if (v7)
        {
          v10 = 0;
          **(_BYTE **)(a1 + 40) = 1;
          goto LABEL_11;
        }
        objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", v6);
        v7 = (id)objc_claimAutoreleasedReturnValue();
      }
      if (++v6 >= (unint64_t)objc_msgSend(v5, "count"))
        goto LABEL_9;
    }
  }
  v7 = 0;
LABEL_9:
  v7 = v7;
  v10 = v7;
LABEL_11:

  return v10;
}

uint64_t __82__SGSqlEntityStore_IdentityStore___uniqueGoodDetailMatchFrom_toDetails_nonUnique___block_invoke_3(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "value");
}

id __82__SGSqlEntityStore_IdentityStore___uniqueGoodDetailMatchFrom_toDetails_nonUnique___block_invoke_2(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  void *v4;

  objc_msgSend(a2, "value");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "stringValue");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  SGNormalizePhoneNumber();
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

uint64_t __63__SGSqlEntityStore_IdentityStore__unmergedCandidatesLimitedTo___block_invoke(uint64_t a1, uint64_t a2)
{
  return +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":limit", *(int *)(a1 + 32));
}

uint64_t __63__SGSqlEntityStore_IdentityStore__unmergedCandidatesLimitedTo___block_invoke_2(uint64_t a1, sqlite3_stmt *a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v4 = (void *)MEMORY[0x1C3BD4F6C]();
  objc_msgSend(MEMORY[0x1E0D19920], "recordIdForContactWithRowId:", sqlite3_column_int64(a2, 0));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  sqlite3_column_nsstring(a2, 1);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  SGDelimitedStringsDeserializeSet();
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v5);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = v8;
  if (v8)
  {
    objc_msgSend(v8, "unionSet:", v7);
  }
  else
  {
    v10 = (void *)objc_msgSend(v7, "mutableCopy");
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v10, v5);

  }
  objc_autoreleasePoolPop(v4);
  return 0;
}

void __75__SGSqlEntityStore_IdentityStore___makeBlobsFromConnectedComponents_edges___block_invoke(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40))
  {
    objc_msgSend(*(id *)(a1 + 32), "addObject:");
    v2 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v3 = *(void **)(v2 + 40);
    *(_QWORD *)(v2 + 40) = 0;

  }
}

void __75__SGSqlEntityStore_IdentityStore___makeBlobsFromConnectedComponents_edges___block_invoke_2(uint64_t a1, id *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;

  v3 = *a2;
  v4 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  v8 = v3;
  if (!v4)
  {
    v5 = objc_opt_new();
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v7 = *(void **)(v6 + 40);
    *(_QWORD *)(v6 + 40) = v5;

    v3 = v8;
    v4 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  }
  objc_msgSend(v4, "addObject:", v3);

}

void __47__SGSqlEntityStore_IdentityStore__computeBlobs__block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id obj;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  id v27;
  _BYTE v28[128];
  _BYTE v29[128];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v27 = 0;
  objc_msgSend(*(id *)(a1 + 32), "_computeBlobsRaw:", &v27);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "loadInterdicts");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "curatedRecordIds");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_opt_new();
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;

  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  obj = v2;
  v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v23, v29, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v24;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v24 != v10)
          objc_enumerationMutation(obj);
        v12 = *(_QWORD *)(*((_QWORD *)&v23 + 1) + 8 * v11);
        v19 = 0u;
        v20 = 0u;
        v21 = 0u;
        v22 = 0u;
        objc_msgSend(*(id *)(a1 + 32), "splitBlob:withInterdicts:edges:curatedRecordIds:", v12, v3, v27, v4);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v19, v28, 16);
        if (v14)
        {
          v15 = v14;
          v16 = *(_QWORD *)v20;
          do
          {
            v17 = 0;
            do
            {
              if (*(_QWORD *)v20 != v16)
                objc_enumerationMutation(v13);
              objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "addObject:", *(_QWORD *)(*((_QWORD *)&v19 + 1) + 8 * v17++));
            }
            while (v15 != v17);
            v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v19, v28, 16);
          }
          while (v15);
        }

        ++v11;
      }
      while (v11 != v9);
      v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v23, v29, 16);
    }
    while (v9);
  }

}

void __52__SGSqlEntityStore_IdentityStore___computeBlobsRaw___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t j;
  uint64_t v21;
  void *v22;
  void *v23;
  int v24;
  void *v25;
  void *v26;
  int v27;
  uint64_t ConnectedComponents;
  uint64_t v29;
  id *v30;
  id v31;
  uint64_t v32;
  id obj;
  id v34;
  uint64_t v35;
  id v36;
  _QWORD v37[5];
  _QWORD v38[4];
  id v39;
  _QWORD *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _QWORD v45[4];
  id v46;
  uint64_t *v47;
  _QWORD v48[4];
  id v49;
  id v50;
  uint64_t *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  _BYTE v58[128];
  uint64_t v59;
  uint64_t v60;
  _QWORD v61[5];
  id v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v52 = 0x400000000;
  v53 = malloc_type_malloc(0x60uLL, 0x1080040CC6EE3FDuLL);
  if (!v53)
  {
    freeGraph((unsigned int *)&v52);
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("graph error"), CFSTR("SGIStore.h, line %i"), 1005);
  }
  v2 = (void *)objc_opt_new();
  v3 = (void *)objc_opt_new();
  v32 = a1;
  v4 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v48[0] = MEMORY[0x1E0C809B0];
  v48[1] = 3221225472;
  v48[2] = __52__SGSqlEntityStore_IdentityStore___computeBlobsRaw___block_invoke_2;
  v48[3] = &unk_1E7DAF7C8;
  v5 = v2;
  v49 = v5;
  v51 = &v52;
  v6 = v3;
  v50 = v6;
  objc_msgSend(v4, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("SELECT recordId1, recordId2, strength FROM identityLink"), 0, v48, 0);
  v7 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v45[0] = MEMORY[0x1E0C809B0];
  v45[1] = 3221225472;
  v45[2] = __52__SGSqlEntityStore_IdentityStore___computeBlobsRaw___block_invoke_3;
  v45[3] = &unk_1E7DAAD18;
  v36 = v5;
  v46 = v36;
  v47 = &v52;
  objc_msgSend(v7, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("SELECT recordId FROM IdentityPerson"), 0, v45, 0);
  v8 = v6;
  v9 = (void *)objc_opt_new();
  v56 = 0u;
  v57 = 0u;
  v54 = 0u;
  v55 = 0u;
  obj = v8;
  v10 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v54, v61, 16);
  if (v10)
  {
    v11 = *(_QWORD *)v55;
    do
    {
      for (i = 0; i != v10; ++i)
      {
        if (*(_QWORD *)v55 != v11)
          objc_enumerationMutation(obj);
        v13 = *(_QWORD *)(*((_QWORD *)&v54 + 1) + 8 * i);
        v60 = 0;
        v59 = 0;
        v59 = objc_msgSend(*(id *)(v13 + 8), "rowId");
        v60 = objc_msgSend(*(id *)(v13 + 16), "rowId");
        v14 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", &v59, 16);
        objc_msgSend(v9, "objectForKeyedSubscript:", v14);
        v15 = objc_claimAutoreleasedReturnValue();
        v16 = (void *)v15;
        if (v15)
          *(double *)(v15 + 24) = *(double *)(v13 + 24) + *(double *)(v15 + 24);
        else
          objc_msgSend(v9, "setObject:forKeyedSubscript:", v13, v14);

      }
      v10 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v54, v61, 16);
    }
    while (v10);
  }

  v17 = (void *)MEMORY[0x1C3BD4F6C]();
  objc_msgSend(v9, "allValues");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_autoreleasePoolPop(v17);

  v31 = (id)objc_msgSend(v18, "mutableCopy");
  v44 = 0u;
  v42 = 0u;
  v43 = 0u;
  v41 = 0u;
  v34 = v31;
  v19 = objc_msgSend(v34, "countByEnumeratingWithState:objects:count:", &v41, v58, 16);
  if (v19)
  {
    v35 = *(_QWORD *)v42;
    do
    {
      for (j = 0; j != v19; ++j)
      {
        if (*(_QWORD *)v42 != v35)
          objc_enumerationMutation(v34);
        v21 = *(_QWORD *)(*((_QWORD *)&v41 + 1) + 8 * j);
        v22 = v53;
        objc_msgSend(v36, "objectForKeyedSubscript:", *(_QWORD *)(v21 + 8));
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        v24 = objc_msgSend(v23, "intValue");

        v25 = v53;
        objc_msgSend(v36, "objectForKeyedSubscript:", *(_QWORD *)(v21 + 16));
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        v27 = objc_msgSend(v26, "intValue");

        if (addEdge((uint64_t)v22 + 24 * v24, (uint64_t)v25 + 24 * v27, *(double *)(v21 + 24)))
        {
          freeGraph((unsigned int *)&v52);
          objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("graph error"), CFSTR("SGIStore.h, line %i"), 1043);
        }
      }
      v19 = objc_msgSend(v34, "countByEnumeratingWithState:objects:count:", &v41, v58, 16);
    }
    while (v19);
  }

  ConnectedComponents = findConnectedComponents((unsigned int *)&v52);
  objc_msgSend(*(id *)(v32 + 32), "_linkNamelessEmailsIfAppropriate:nameToVertex:disjointSets:edges:", &v52, v36, ConnectedComponents, v34);
  objc_msgSend(*(id *)(v32 + 32), "_linkNamelessPhonesIfAppropriate:nameToVertex:disjointSets:edges:", &v52, v36, ConnectedComponents, v34);
  objc_msgSend(*(id *)(v32 + 32), "_linkNamelessSocialProfilesIfAppropriate:nameToVertex:disjointSets:edges:", &v52, v36, ConnectedComponents, v34);
  v61[0] = 0;
  v61[1] = v61;
  v61[2] = 0x3032000000;
  v61[3] = __Block_byref_object_copy__8446;
  v61[4] = __Block_byref_object_dispose__8447;
  v62 = 0;
  v62 = (id)objc_opt_new();
  v29 = MEMORY[0x1E0C809B0];
  v38[0] = MEMORY[0x1E0C809B0];
  v38[1] = 3221225472;
  v38[2] = __52__SGSqlEntityStore_IdentityStore___computeBlobsRaw___block_invoke_4;
  v38[3] = &unk_1E7DB78A0;
  v40 = v61;
  v39 = *(id *)(v32 + 40);
  v37[0] = v29;
  v37[1] = 3221225472;
  v37[2] = __52__SGSqlEntityStore_IdentityStore___computeBlobsRaw___block_invoke_5;
  v37[3] = &unk_1E7DAAEB8;
  v37[4] = v61;
  visitConnectedComponents(ConnectedComponents, v38, v37);
  v30 = *(id **)(v32 + 48);
  if (v30)
    objc_storeStrong(v30, v31);
  freeDisjointSet(ConnectedComponents);
  freeGraph((unsigned int *)&v52);

  _Block_object_dispose(v61, 8);
}

uint64_t __52__SGSqlEntityStore_IdentityStore___computeBlobsRaw___block_invoke_2(uint64_t a1, sqlite3_stmt *a2)
{
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  double v11;
  void *v12;
  id v13;
  id v14;
  double *v15;
  void *v16;
  id v17;
  void *v18;

  objc_msgSend(MEMORY[0x1E0D19920], "recordIdForContactWithRowId:", sqlite3_column_int64(a2, 0));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0D19920], "recordIdForContactWithRowId:", sqlite3_column_int64(a2, 1));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v5);
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = (void *)v7;
  if (v6)
  {
    if (v7)
      goto LABEL_10;
    goto LABEL_7;
  }
  if (newVertex(*(int **)(a1 + 48), (uint64_t)v4))
  {
    freeGraph(*(unsigned int **)(a1 + 48));
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("graph error"), CFSTR("SGIStore.h, line %i"), 1014);
  }
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", (**(_DWORD **)(a1 + 48) - 1));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v9, v4);

  if (!v8)
  {
LABEL_7:
    if (newVertex(*(int **)(a1 + 48), (uint64_t)v5))
    {
      freeGraph(*(unsigned int **)(a1 + 48));
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("graph error"), CFSTR("SGIStore.h, line %i"), 1018);
    }
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", (**(_DWORD **)(a1 + 48) - 1));
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v10, v5);

  }
LABEL_10:
  v11 = sqlite3_column_double(a2, 2);
  v12 = *(void **)(a1 + 40);
  v13 = v4;
  v14 = v5;
  v15 = (double *)objc_opt_new();
  v16 = (void *)*((_QWORD *)v15 + 1);
  *((_QWORD *)v15 + 1) = v13;
  v17 = v13;

  v18 = (void *)*((_QWORD *)v15 + 2);
  *((_QWORD *)v15 + 2) = v14;

  v15[3] = v11;
  objc_msgSend(v12, "addObject:", v15);

  return 0;
}

uint64_t __52__SGSqlEntityStore_IdentityStore___computeBlobsRaw___block_invoke_3(uint64_t a1, sqlite3_stmt *a2)
{
  void *v3;
  void *v4;
  void *v5;

  objc_msgSend(MEMORY[0x1E0D19920], "recordIdForContactWithRowId:", sqlite3_column_int64(a2, 0));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v4)
  {
    if (newVertex(*(int **)(a1 + 40), (uint64_t)v3))
    {
      freeGraph(*(unsigned int **)(a1 + 40));
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("graph error"), CFSTR("SGIStore.h, line %i"), 1032);
    }
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", (**(_DWORD **)(a1 + 40) - 1));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v5, v3);

  }
  return 0;
}

void __52__SGSqlEntityStore_IdentityStore___computeBlobsRaw___block_invoke_4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  if (objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "count"))
    objc_msgSend(*(id *)(a1 + 32), "addObject:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
  v2 = objc_opt_new();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

uint64_t __52__SGSqlEntityStore_IdentityStore___computeBlobsRaw___block_invoke_5(uint64_t a1, _QWORD *a2)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "addObject:", *a2);
}

uint64_t __108__SGSqlEntityStore_IdentityStore___linkNamelessSocialProfilesIfAppropriate_nameToVertex_disjointSets_edges___block_invoke(uint64_t a1, sqlite3_stmt *a2)
{
  void *v4;
  void *v5;
  void *v6;

  objc_msgSend(MEMORY[0x1E0D19920], "recordIdForContactWithRowId:", sqlite3_column_int64(a2, 0));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  sqlite3_column_nsstring(a2, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  SGDelimitedStringsDeserialize();
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v6, v4);
  return 0;
}

uint64_t __108__SGSqlEntityStore_IdentityStore___linkNamelessSocialProfilesIfAppropriate_nameToVertex_disjointSets_edges___block_invoke_2(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "bindNamedParam:toNSArray:", ":socialProfileIdentifiers", *(_QWORD *)(a1 + 32));
}

uint64_t __108__SGSqlEntityStore_IdentityStore___linkNamelessSocialProfilesIfAppropriate_nameToVertex_disjointSets_edges___block_invoke_3(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  void *v11;

  objc_msgSend(MEMORY[0x1E0D19920], "recordIdForContactWithRowId:", objc_msgSend(a2, "getInt64ForColumn:", 0));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v4)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "handleFailureInMethod:object:file:lineNumber:description:", *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 40), CFSTR("SGSqlEntityStore+Identity.m"), 969, CFSTR("Vertex not found in lookup table"));

  }
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
  v6 = v5 + 24 * objc_msgSend(v4, "integerValue");
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v8 = *(_QWORD *)(v7 + 24);
  if (!v8)
  {
    *(_QWORD *)(v7 + 24) = v6;
    goto LABEL_7;
  }
  if (sameConnectedComponent(*(_QWORD *)(a1 + 80), v8, v6))
  {
LABEL_7:
    v9 = (unsigned __int8 *)MEMORY[0x1E0D81780];
    goto LABEL_8;
  }
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 0;
  v9 = (unsigned __int8 *)MEMORY[0x1E0D81788];
LABEL_8:

  return *v9;
}

uint64_t __100__SGSqlEntityStore_IdentityStore___linkNamelessPhonesIfAppropriate_nameToVertex_disjointSets_edges___block_invoke(uint64_t a1, sqlite3_stmt *a2)
{
  void *v4;
  void *v5;
  void *v6;

  objc_msgSend(MEMORY[0x1E0D19920], "recordIdForContactWithRowId:", sqlite3_column_int64(a2, 0));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  sqlite3_column_nsstring(a2, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  SGDelimitedStringsDeserialize();
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v6, v4);
  return 0;
}

uint64_t __100__SGSqlEntityStore_IdentityStore___linkNamelessPhonesIfAppropriate_nameToVertex_disjointSets_edges___block_invoke_2(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "bindNamedParam:toNSArray:", ":phones", *(_QWORD *)(a1 + 32));
}

uint64_t __100__SGSqlEntityStore_IdentityStore___linkNamelessPhonesIfAppropriate_nameToVertex_disjointSets_edges___block_invoke_3(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  void *v11;

  objc_msgSend(MEMORY[0x1E0D19920], "recordIdForContactWithRowId:", objc_msgSend(a2, "getInt64ForColumn:", 0));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v4)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "handleFailureInMethod:object:file:lineNumber:description:", *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 40), CFSTR("SGSqlEntityStore+Identity.m"), 900, CFSTR("Vertex not found in lookup table"));

  }
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
  v6 = v5 + 24 * objc_msgSend(v4, "integerValue");
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v8 = *(_QWORD *)(v7 + 24);
  if (!v8)
  {
    *(_QWORD *)(v7 + 24) = v6;
    goto LABEL_7;
  }
  if (sameConnectedComponent(*(_QWORD *)(a1 + 80), v8, v6))
  {
LABEL_7:
    v9 = (unsigned __int8 *)MEMORY[0x1E0D81780];
    goto LABEL_8;
  }
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 0;
  v9 = (unsigned __int8 *)MEMORY[0x1E0D81788];
LABEL_8:

  return *v9;
}

uint64_t __100__SGSqlEntityStore_IdentityStore___linkNamelessEmailsIfAppropriate_nameToVertex_disjointSets_edges___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  unsigned __int8 *v8;

  v3 = a2;
  objc_msgSend(v3, "nonnullNSStringForColumnName:table:", "email", 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0D19920];
  v6 = objc_msgSend(v3, "getInt64ForColumnName:table:", "recordId", 0);

  objc_msgSend(v5, "recordIdForContactWithRowId:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v7, v4);

  v8 = (unsigned __int8 *)MEMORY[0x1E0D81780];
  return *v8;
}

uint64_t __100__SGSqlEntityStore_IdentityStore___linkNamelessEmailsIfAppropriate_nameToVertex_disjointSets_edges___block_invoke_2(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "bindNamedParam:toNonnullNSString:", ":email", *(_QWORD *)(a1 + 32));
}

uint64_t __100__SGSqlEntityStore_IdentityStore___linkNamelessEmailsIfAppropriate_nameToVertex_disjointSets_edges___block_invoke_3(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  void *v11;

  objc_msgSend(MEMORY[0x1E0D19920], "recordIdForContactWithRowId:", objc_msgSend(a2, "getInt64ForColumnName:table:", "recordId", 0));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v4)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "handleFailureInMethod:object:file:lineNumber:description:", *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 40), CFSTR("SGSqlEntityStore+Identity.m"), 831, CFSTR("Vertex not found in lookup table"));

  }
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
  v6 = v5 + 24 * objc_msgSend(v4, "integerValue");
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v8 = *(_QWORD *)(v7 + 24);
  if (!v8)
  {
    *(_QWORD *)(v7 + 24) = v6;
    goto LABEL_7;
  }
  if (sameConnectedComponent(*(_QWORD *)(a1 + 80), v8, v6))
  {
LABEL_7:
    v9 = (unsigned __int8 *)MEMORY[0x1E0D81780];
    goto LABEL_8;
  }
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 0;
  v9 = (unsigned __int8 *)MEMORY[0x1E0D81788];
LABEL_8:

  return *v9;
}

uint64_t __51__SGSqlEntityStore_IdentityStore__curatedRecordIds__block_invoke(uint64_t a1, sqlite3_stmt *a2)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 32);
  objc_msgSend(MEMORY[0x1E0D19920], "recordIdForContactWithRowId:", sqlite3_column_int64(a2, 0));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "addObject:", v3);

  return 0;
}

uint64_t __46__SGSqlEntityStore_IdentityStore__getAllLinks__block_invoke(uint64_t a1, sqlite3_stmt *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  _QWORD v10[5];

  v10[4] = *MEMORY[0x1E0C80C00];
  v3 = *(void **)(a1 + 32);
  objc_msgSend(MEMORY[0x1E0D19920], "recordIdForContactWithRowId:", sqlite3_column_int64(a2, 0));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v10[0] = v4;
  objc_msgSend(MEMORY[0x1E0D19920], "recordIdForContactWithRowId:", sqlite3_column_int64(a2, 1));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v10[1] = v5;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", sqlite3_column_int(a2, 2));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v10[2] = v6;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", sqlite3_column_double(a2, 3));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v10[3] = v7;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v10, 4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "addObject:", v8);

  return 0;
}

void __52__SGSqlEntityStore_IdentityStore__deleteByRecordId___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, sqlite3_stmt *);
  void *v16;
  id v17;
  _QWORD v18[4];
  id v19;
  _QWORD v20[4];
  id v21;
  uint64_t *v22;
  _QWORD v23[4];
  id v24;
  uint64_t *v25;
  _QWORD v26[7];
  _QWORD v27[4];
  id v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t);
  void (*v33)(uint64_t);
  id v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t (*v38)(uint64_t, uint64_t);
  void (*v39)(uint64_t);
  id v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  char v44;

  v41 = 0;
  v42 = &v41;
  v43 = 0x2020000000;
  v44 = 0;
  v35 = 0;
  v36 = &v35;
  v37 = 0x3032000000;
  v38 = __Block_byref_object_copy__8446;
  v39 = __Block_byref_object_dispose__8447;
  v40 = 0;
  v29 = 0;
  v30 = &v29;
  v31 = 0x3032000000;
  v32 = __Block_byref_object_copy__8446;
  v33 = __Block_byref_object_dispose__8447;
  v34 = 0;
  v2 = *(void **)(a1 + 40);
  v3 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v27[2] = __52__SGSqlEntityStore_IdentityStore__deleteByRecordId___block_invoke_145;
  v27[3] = &unk_1E7DB74A0;
  v4 = MEMORY[0x1E0C809B0];
  v27[0] = MEMORY[0x1E0C809B0];
  v27[1] = 3221225472;
  v28 = v2;
  v26[0] = v4;
  v26[1] = 3221225472;
  v26[2] = __52__SGSqlEntityStore_IdentityStore__deleteByRecordId___block_invoke_2;
  v26[3] = &unk_1E7DAAE68;
  v26[4] = &v35;
  v26[5] = &v29;
  v26[6] = &v41;
  objc_msgSend(v3, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("SELECT phones, socialProfileIdentifiers FROM identityPerson WHERE recordId = :recordId"), v27, v26, 0);
  if (objc_msgSend((id)v36[5], "count"))
  {
    v5 = *(void **)(a1 + 40);
    v6 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
    v23[0] = v4;
    v23[1] = 3221225472;
    v23[2] = __52__SGSqlEntityStore_IdentityStore__deleteByRecordId___block_invoke_3;
    v23[3] = &unk_1E7DAE948;
    v25 = &v35;
    v24 = v5;
    objc_msgSend(v6, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("DELETE FROM identityPhones WHERE phone IN _pas_nsarray(:phones) AND recordId=:recordId"), v23, 0, 0);

  }
  if (objc_msgSend((id)v30[5], "count"))
  {
    v7 = *(void **)(a1 + 40);
    v8 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
    v20[0] = v4;
    v20[1] = 3221225472;
    v20[2] = __52__SGSqlEntityStore_IdentityStore__deleteByRecordId___block_invoke_4;
    v20[3] = &unk_1E7DAE948;
    v22 = &v29;
    v21 = v7;
    objc_msgSend(v8, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("DELETE FROM identitySocialProfileIdentifiers WHERE socialProfileIdentifier IN _pas_nsarray(:socialProfileIdentifiers) AND recordId=:recordId"), v20, 0, 0);

  }
  v9 = *(void **)(a1 + 40);
  v10 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v18[0] = v4;
  v18[1] = 3221225472;
  v18[2] = __52__SGSqlEntityStore_IdentityStore__deleteByRecordId___block_invoke_5;
  v18[3] = &unk_1E7DB7720;
  v19 = v9;
  objc_msgSend(v10, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("DELETE FROM identityPerson WHERE recordId = ?"), v18, 0, 0);
  v11 = *(void **)(a1 + 40);
  v12 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v13 = v4;
  v14 = 3221225472;
  v15 = __52__SGSqlEntityStore_IdentityStore__deleteByRecordId___block_invoke_6;
  v16 = &unk_1E7DB7720;
  v17 = v11;
  objc_msgSend(v12, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("DELETE FROM identityLink WHERE recordId1 = ?1 OR recordId2 = ?1"), &v13, 0, 0);
  if (*((_BYTE *)v42 + 24))
    objc_msgSend(*(id *)(a1 + 32), "_markIdentityStoreDirty", v13, v14, v15, v16);

  _Block_object_dispose(&v29, 8);
  _Block_object_dispose(&v35, 8);

  _Block_object_dispose(&v41, 8);
}

void __52__SGSqlEntityStore_IdentityStore__deleteByRecordId___block_invoke_145(uint64_t a1, void *a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  objc_msgSend(v3, "bindNamedParam:toInt64:", ":recordId", objc_msgSend(v2, "rowId"));

}

uint64_t __52__SGSqlEntityStore_IdentityStore__deleteByRecordId___block_invoke_2(_QWORD *a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  v3 = a2;
  objc_msgSend(v3, "getNSStringForColumnName:table:", "phones", "identityPerson");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  SGDelimitedStringsDeserialize();
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = *(_QWORD *)(a1[4] + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;

  objc_msgSend(v3, "getNSStringForColumnName:table:", "socialProfileIdentifiers", "identityPerson");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  SGDelimitedStringsDeserialize();
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = *(_QWORD *)(a1[5] + 8);
  v11 = *(void **)(v10 + 40);
  *(_QWORD *)(v10 + 40) = v9;

  *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = 1;
  return *MEMORY[0x1E0D81780];
}

void __52__SGSqlEntityStore_IdentityStore__deleteByRecordId___block_invoke_3(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
  v4 = a2;
  objc_msgSend(v4, "bindNamedParam:toNSArray:", ":phones", v3);
  objc_msgSend(v4, "bindNamedParam:toInt64:", ":recordId", objc_msgSend(*(id *)(a1 + 32), "rowId"));

}

void __52__SGSqlEntityStore_IdentityStore__deleteByRecordId___block_invoke_4(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
  v4 = a2;
  objc_msgSend(v4, "bindNamedParam:toNSArray:", ":socialProfileIdentifiers", v3);
  objc_msgSend(v4, "bindNamedParam:toInt64:", ":recordId", objc_msgSend(*(id *)(a1 + 32), "rowId"));

}

uint64_t __52__SGSqlEntityStore_IdentityStore__deleteByRecordId___block_invoke_5(uint64_t a1, sqlite3_stmt *a2)
{
  return sqlite3_bind_int64(a2, 1, objc_msgSend(*(id *)(a1 + 32), "rowId"));
}

uint64_t __52__SGSqlEntityStore_IdentityStore__deleteByRecordId___block_invoke_6(uint64_t a1, sqlite3_stmt *a2)
{
  return sqlite3_bind_int64(a2, 1, objc_msgSend(*(id *)(a1 + 32), "rowId"));
}

void __57__SGSqlEntityStore_IdentityStore__link_to_type_strength___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, sqlite3_stmt *);
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  int v14;
  _QWORD v15[5];
  _QWORD v16[4];
  id v17;
  id v18;
  int v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  char v23;

  v20 = 0;
  v21 = &v20;
  v22 = 0x2020000000;
  v23 = 1;
  v2 = *(void **)(a1 + 40);
  v3 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v16[2] = __57__SGSqlEntityStore_IdentityStore__link_to_type_strength___block_invoke_2;
  v16[3] = &unk_1E7DAADF0;
  v4 = MEMORY[0x1E0C809B0];
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3221225472;
  v17 = v2;
  v18 = *(id *)(a1 + 48);
  v19 = *(_DWORD *)(a1 + 64);
  v15[0] = v4;
  v15[1] = 3221225472;
  v15[2] = __57__SGSqlEntityStore_IdentityStore__link_to_type_strength___block_invoke_3;
  v15[3] = &unk_1E7DB51B8;
  v15[4] = &v20;
  objc_msgSend(v3, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("SELECT 1 FROM identityLink WHERE recordId1=? AND recordId2=? AND type=?"), v16, v15, 0);
  v5 = *(void **)(a1 + 40);
  v6 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v7 = v4;
  v8 = 3221225472;
  v9 = __57__SGSqlEntityStore_IdentityStore__link_to_type_strength___block_invoke_4;
  v10 = &unk_1E7DAAE18;
  v11 = v5;
  v12 = *(id *)(a1 + 48);
  v14 = *(_DWORD *)(a1 + 64);
  v13 = *(_QWORD *)(a1 + 56);
  objc_msgSend(v6, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("INSERT OR IGNORE INTO identityLink (recordId1, recordId2, type, strength) VALUES (?,?,?,?)"), &v7, 0, 0);
  if (*((_BYTE *)v21 + 24))
    objc_msgSend(*(id *)(a1 + 32), "_markIdentityStoreDirty", v7, v8, v9, v10, v11);

  _Block_object_dispose(&v20, 8);
}

uint64_t __57__SGSqlEntityStore_IdentityStore__link_to_type_strength___block_invoke_2(uint64_t a1, sqlite3_stmt *a2)
{
  sqlite3_bind_int64(a2, 1, objc_msgSend(*(id *)(a1 + 32), "rowId"));
  sqlite3_bind_int64(a2, 2, objc_msgSend(*(id *)(a1 + 40), "rowId"));
  return sqlite3_bind_int(a2, 3, *(_DWORD *)(a1 + 48));
}

uint64_t __57__SGSqlEntityStore_IdentityStore__link_to_type_strength___block_invoke_3(uint64_t a1)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
  return 1;
}

uint64_t __57__SGSqlEntityStore_IdentityStore__link_to_type_strength___block_invoke_4(uint64_t a1, sqlite3_stmt *a2)
{
  sqlite3_bind_int64(a2, 1, objc_msgSend(*(id *)(a1 + 32), "rowId"));
  sqlite3_bind_int64(a2, 2, objc_msgSend(*(id *)(a1 + 40), "rowId"));
  sqlite3_bind_int(a2, 3, *(_DWORD *)(a1 + 56));
  return sqlite3_bind_double(a2, 4, *(double *)(a1 + 48));
}

void __107__SGSqlEntityStore_IdentityStore___joinIncompleteIdentitySocialProfilesWithOthersOfTheirIlk_name_recordId___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if (*(_QWORD *)(a1 + 32))
    objc_msgSend(v4, "bindNamedParam:toNSString:", ":fullname");
  objc_msgSend(*(id *)(a1 + 40), "_pas_mappedArrayWithTransform:", &__block_literal_global_137_8542);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "bindNamedParam:toNSArray:", ":socialProfileIdentifiers", v3);
  objc_msgSend(v4, "bindNamedParam:toInteger:", ":limit", 10);

}

uint64_t __107__SGSqlEntityStore_IdentityStore___joinIncompleteIdentitySocialProfilesWithOthersOfTheirIlk_name_recordId___block_invoke_3(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;

  v3 = objc_msgSend(a2, "getInt64ForColumnName:table:", "recordId", "identityPerson");
  v4 = *(void **)(a1 + 32);
  objc_msgSend(MEMORY[0x1E0D19920], "recordIdForContactWithRowId:", v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addObject:", v5);

  return *MEMORY[0x1E0D81780];
}

id __107__SGSqlEntityStore_IdentityStore___joinIncompleteIdentitySocialProfilesWithOthersOfTheirIlk_name_recordId___block_invoke_2(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  void *v4;

  objc_msgSend(a2, "value");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  SGNormalizeSocialProfileIdentifier(v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  SGDelimitedStringsSerialize();
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

void __99__SGSqlEntityStore_IdentityStore___joinIncompleteIdentityPhonesWithOthersOfTheirIlk_name_recordId___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if (*(_QWORD *)(a1 + 32))
    objc_msgSend(v4, "bindNamedParam:toNSString:", ":fullname");
  objc_msgSend(*(id *)(a1 + 40), "_pas_mappedArrayWithTransform:", &__block_literal_global_128);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "bindNamedParam:toNSArray:", ":phones", v3);
  objc_msgSend(v4, "bindNamedParam:toInteger:", ":limit", 10);

}

uint64_t __99__SGSqlEntityStore_IdentityStore___joinIncompleteIdentityPhonesWithOthersOfTheirIlk_name_recordId___block_invoke_3(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;

  v3 = objc_msgSend(a2, "getInt64ForColumnName:table:", "recordId", "identityPerson");
  v4 = *(void **)(a1 + 32);
  objc_msgSend(MEMORY[0x1E0D19920], "recordIdForContactWithRowId:", v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addObject:", v5);

  return *MEMORY[0x1E0D81780];
}

id __99__SGSqlEntityStore_IdentityStore___joinIncompleteIdentityPhonesWithOthersOfTheirIlk_name_recordId___block_invoke_2(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;

  objc_msgSend(a2, "value");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  SGNormalizePhoneNumber();
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

void *__96__SGSqlEntityStore_IdentityStore___joinIncompleteIdentityEmailWithOthersOfItsIlk_name_recordId___block_invoke(uint64_t a1, sqlite3_stmt *a2)
{
  void *result;

  sqlite3_bind_text(a2, 1, (const char *)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 32)), "UTF8String"), -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  result = *(void **)(a1 + 40);
  if (result)
    return (void *)sqlite3_bind_text(a2, 2, (const char *)objc_msgSend(objc_retainAutorelease(result), "UTF8String"), -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t __96__SGSqlEntityStore_IdentityStore___joinIncompleteIdentityEmailWithOthersOfItsIlk_name_recordId___block_invoke_2(uint64_t a1, sqlite3_stmt *a2)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 32);
  objc_msgSend(MEMORY[0x1E0D19920], "recordIdForContactWithRowId:", sqlite3_column_int64(a2, 0));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "addObject:", v3);

  return 0;
}

void __111__SGSqlEntityStore_IdentityStore__registerAndLinkIdentity_recordId_phones_socialProfiles_email_curated_isSent___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[128];
  _BYTE v29[128];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E20]), "initWithCapacity:", objc_msgSend(*(id *)(a1 + 32), "count"));
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v5 = *(id *)(a1 + 32);
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v24, v29, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v25;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v25 != v8)
          objc_enumerationMutation(v5);
        objc_msgSend(*(id *)(*((_QWORD *)&v24 + 1) + 8 * v9), "value");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        SGNormalizePhoneNumber();
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "addObject:", v11);

        ++v9;
      }
      while (v7 != v9);
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v24, v29, 16);
    }
    while (v7);
  }

  v12 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E20]), "initWithCapacity:", objc_msgSend(*(id *)(a1 + 40), "count"));
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v13 = *(id *)(a1 + 40);
  v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v20, v28, 16);
  if (v14)
  {
    v15 = v14;
    v16 = *(_QWORD *)v21;
    do
    {
      v17 = 0;
      do
      {
        if (*(_QWORD *)v21 != v16)
          objc_enumerationMutation(v13);
        objc_msgSend(*(id *)(*((_QWORD *)&v20 + 1) + 8 * v17), "value");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        SGNormalizeSocialProfileIdentifier(v18);
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "addObject:", v19);

        ++v17;
      }
      while (v15 != v17);
      v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v20, v28, 16);
    }
    while (v15);
  }

  if (writeIdentity(*(void **)(*(_QWORD *)(a1 + 48) + 8), 0, 0, v3, 0, v4, v12, *(void **)(a1 + 56), *(void **)(a1 + 64), *(_WORD *)(a1 + 72), HIBYTE(*(_WORD *)(a1 + 72))))objc_msgSend(*(id *)(a1 + 48), "_markIdentityStoreDirty");
}

void __111__SGSqlEntityStore_IdentityStore__registerAndLinkIdentity_recordId_phones_socialProfiles_email_curated_isSent___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (objc_msgSend(*(id *)(a1 + 32), "length"))
  {
    v4 = *(_QWORD *)(a1 + 40);
    v10 = *(_QWORD *)(a1 + 32);
    v11 = v4;
    v5 = (void *)MEMORY[0x1E0C99D20];
    v6 = &v10;
    v7 = 2;
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 40);
    v5 = (void *)MEMORY[0x1E0C99D20];
    v6 = &v9;
    v7 = 1;
  }
  objc_msgSend(v5, "arrayWithObjects:count:", v6, v7, v9, v10, v11, v12);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "bindNamedParam:toNSArray:", ":middleNameAndSurname", v8);

  objc_msgSend(v3, "bindNamedParam:toNonnullNSString:", ":surname", *(_QWORD *)(a1 + 40));
  objc_msgSend(v3, "bindNamedParam:toInteger:", ":isSent", *(unsigned __int8 *)(a1 + 48));
  objc_msgSend(v3, "bindNamedParam:toInteger:", ":limit", 100);

}

uint64_t __111__SGSqlEntityStore_IdentityStore__registerAndLinkIdentity_recordId_phones_socialProfiles_email_curated_isSent___block_invoke_3(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  unsigned __int8 *v18;

  v3 = a2;
  objc_msgSend(v3, "getNSStringForColumnName:table:", "fullname", 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
    objc_msgSend(*(id *)(a1 + 32), "addObject:", v4);
  v5 = *(void **)(a1 + 40);
  objc_msgSend(MEMORY[0x1E0D19920], "recordIdForContactWithRowId:", objc_msgSend(v3, "getInt64ForColumnName:table:", "recordId", 0));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "addObject:", v6);

  v7 = *(void **)(a1 + 48);
  objc_msgSend(v3, "nonnullNSStringForColumnName:table:", "nameSketches", 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  SGDelimitedStringsDeserializeSet();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v9);

  v10 = *(void **)(a1 + 56);
  objc_msgSend(v3, "nonnullNSStringForColumnName:table:", "phones", 0);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  SGDelimitedStringsDeserializeSet();
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "addObject:", v12);

  v13 = *(void **)(a1 + 64);
  objc_msgSend(v3, "nonnullNSStringForColumnName:table:", "socialProfileIdentifiers", 0);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  SGDelimitedStringsDeserializeSet();
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "addObject:", v15);

  v16 = *(void **)(a1 + 72);
  objc_msgSend(v3, "nonnullNSStringForColumnName:table:", "email", 0);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v16, "addObject:", v17);
  v18 = (unsigned __int8 *)MEMORY[0x1E0D81780];

  return *v18;
}

void __56__SGSqlEntityStore_IdentityStore__rebuildIdentityTables__block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD v7[5];
  _QWORD v8[6];

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("DELETE FROM identityPerson"), 0, 0, 0);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("DELETE FROM identityLink"), 0, 0, 0);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("DELETE FROM identityPhones"), 0, 0, 0);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("DELETE FROM identitySocialProfileIdentifiers"), 0, 0, 0);
  objc_msgSend(*(id *)(a1 + 32), "selectEntityQuery:", CFSTR("WHERE e.entityType = :pseudo OR e.entityType = :unrec"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(void **)(v3 + 8);
  v8[2] = __56__SGSqlEntityStore_IdentityStore__rebuildIdentityTables__block_invoke_3;
  v8[3] = &unk_1E7DAAD18;
  v7[4] = v4;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v6 = *(_QWORD *)(a1 + 48);
  v8[4] = v3;
  v8[5] = v6;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __56__SGSqlEntityStore_IdentityStore__rebuildIdentityTables__block_invoke_4;
  v7[3] = &unk_1E7DB4690;
  objc_msgSend(v5, "prepAndRunQuery:onPrep:onRow:onError:", v2, &__block_literal_global_83, v8, v7);

}

uint64_t __56__SGSqlEntityStore_IdentityStore__rebuildIdentityTables__block_invoke_3(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  SGLabeledValue *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  SGLabeledValue *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v28;
  void *v29;
  SGLabeledValue *v30;
  _QWORD v31[2];

  v31[1] = *MEMORY[0x1E0C80C00];
  v4 = (void *)MEMORY[0x1C3BD4F6C]();
  objc_msgSend(*(id *)(a1 + 32), "entityFromSqlResult:", a2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "duplicateKey");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "entityType");

  if (v7 == 12)
  {
    objc_msgSend(v5, "duplicateKey");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "identityKey");
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    if (objc_msgSend(v11, "hasPhone"))
    {
      objc_msgSend(v11, "phone");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = -[SGLabeledValue initWithLabel:value:]([SGLabeledValue alloc], "initWithLabel:value:", &stru_1E7DB83A8, v12);
      v31[0] = v13;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v31, 1);
      v29 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v29 = 0;
    }
    if (objc_msgSend(v11, "hasEmailAddress"))
    {
      objc_msgSend(v11, "emailAddress");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v18 = 0;
    }
    if (objc_msgSend(v11, "hasSocialProfile"))
    {
      objc_msgSend(v11, "socialProfile");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = -[SGLabeledValue initWithLabel:value:]([SGLabeledValue alloc], "initWithLabel:value:", &stru_1E7DB83A8, v19);
      v30 = v20;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v30, 1);
      v21 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v21 = 0;
    }
    v22 = *(void **)(a1 + 32);
    objc_msgSend(v5, "title");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "recordId");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "tags");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0D197F0], "isSent");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    LOBYTE(v28) = objc_msgSend(v25, "containsObject:", v26);
    objc_msgSend(v22, "registerAndLinkIdentity:recordId:phones:socialProfiles:email:curated:isSent:", v23, v24, v29, v21, v18, 0, v28);

    goto LABEL_15;
  }
  if (v7 != 4)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = a1 + 32;
    v14 = *(_QWORD *)(a1 + 32);
    v15 = *(_QWORD *)(v16 + 8);
    objc_msgSend(v5, "duplicateKey");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "handleFailureInMethod:object:file:lineNumber:description:", v15, v14, CFSTR("SGSqlEntityStore+Identity.m"), 298, CFSTR("Unexpected entity type: %lld"), objc_msgSend(v17, "entityType"));

LABEL_15:
    goto LABEL_16;
  }
  v8 = *(void **)(a1 + 32);
  objc_msgSend(v5, "recordId");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "processPseudoContactEntity:recordId:", v5, v9);

LABEL_16:
  objc_autoreleasePoolPop(v4);
  return 0;
}

uint64_t __56__SGSqlEntityStore_IdentityStore__rebuildIdentityTables__block_invoke_4(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v6;
  int v7;
  void *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  sgLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    objc_msgSend(v3, "description");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = 138412290;
    v8 = v6;
    _os_log_error_impl(&dword_1C3607000, v4, OS_LOG_TYPE_ERROR, "Sqlite error while rebuilding identity tables: %@", (uint8_t *)&v7, 0xCu);

  }
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;

  return 1;
}

uint64_t __56__SGSqlEntityStore_IdentityStore__rebuildIdentityTables__block_invoke_2(uint64_t a1, uint64_t a2)
{
  +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":pseudo", 4);
  return +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":unrec", 12);
}

SGLabeledValue *__71__SGSqlEntityStore_IdentityStore__processPseudoContactEntity_recordId___block_invoke_59(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  void *v4;
  id v5;
  SGLabeledValue *v6;

  v2 = a2;
  objc_msgSend(v2, "label");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "value");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  SGNormalizeSocialProfile(v4);
  objc_claimAutoreleasedReturnValue();
  v5 = v3;
  v6 = -[SGLabeledValue initWithLabel:value:]([SGLabeledValue alloc], "initWithLabel:value:", v5, v4);

  return v6;
}

SGLabeledValue *__71__SGSqlEntityStore_IdentityStore__processPseudoContactEntity_recordId___block_invoke_56(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  void *v4;
  id v5;
  SGLabeledValue *v6;

  v2 = a2;
  objc_msgSend(v2, "label");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "value");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  v5 = v3;
  v6 = -[SGLabeledValue initWithLabel:value:]([SGLabeledValue alloc], "initWithLabel:value:", v5, v4);

  return v6;
}

SGLabeledValue *__71__SGSqlEntityStore_IdentityStore__processPseudoContactEntity_recordId___block_invoke(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  void *v4;
  id v5;
  SGLabeledValue *v6;

  v2 = a2;
  objc_msgSend(v2, "label");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "value");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  v5 = v3;
  v6 = -[SGLabeledValue initWithLabel:value:]([SGLabeledValue alloc], "initWithLabel:value:", v5, v4);

  return v6;
}

uint64_t __49__SGSqlEntityStore_IdentityStore__loadInterdicts__block_invoke(uint64_t a1, sqlite3_stmt *a2)
{
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v14;
  void *v15;

  v4 = (void *)objc_opt_new();
  v5 = (void *)objc_opt_new();
  sqlite3_column_nsstring(a2, 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = MEMORY[0x1E0C809B0];
  v15 = v4;
  v8 = v4;
  SGDelimitedStringsDeserializeWithBlock();

  sqlite3_column_nsstring(a2, 1);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = v5;
  v10 = v5;
  SGDelimitedStringsDeserializeWithBlock();

  v11 = *(void **)(a1 + 32);
  objc_msgSend(MEMORY[0x1E0D81638], "tupleWithFirst:second:", v8, v10, v7, 3221225472, __49__SGSqlEntityStore_IdentityStore__loadInterdicts__block_invoke_3, &unk_1E7DAD540);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "addObject:", v12);

  return 0;
}

void __49__SGSqlEntityStore_IdentityStore__loadInterdicts__block_invoke_2(uint64_t a1, void *a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  objc_msgSend(MEMORY[0x1E0D19920], "recordIdForContactWithRowId:", objc_msgSend(a2, "longLongValue"));
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "addObject:", v3);

}

void __49__SGSqlEntityStore_IdentityStore__loadInterdicts__block_invoke_3(uint64_t a1, void *a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  objc_msgSend(MEMORY[0x1E0D19920], "recordIdForContactWithRowId:", objc_msgSend(a2, "longLongValue"));
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "addObject:", v3);

}

void __57__SGSqlEntityStore_IdentityStore__addInterdictFrom_with___block_invoke_3(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, sqlite3_stmt *);
  void *v7;
  id v8;
  id v9;

  v2 = *(void **)(a1 + 40);
  v3 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v4 = MEMORY[0x1E0C809B0];
  v5 = 3221225472;
  v6 = __57__SGSqlEntityStore_IdentityStore__addInterdictFrom_with___block_invoke_4;
  v7 = &unk_1E7DB5190;
  v8 = v2;
  v9 = *(id *)(a1 + 48);
  objc_msgSend(v3, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("INSERT INTO identityInterdict (a, b) VALUES (?, ?)"), &v4, 0, 0);
  objc_msgSend(*(id *)(a1 + 32), "_markIdentityStoreDirty", v4, v5, v6, v7);

}

uint64_t __57__SGSqlEntityStore_IdentityStore__addInterdictFrom_with___block_invoke_4(uint64_t a1, sqlite3_stmt *a2)
{
  sqlite3_bind_text(a2, 1, (const char *)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 32)), "UTF8String"), -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  return sqlite3_bind_text(a2, 2, (const char *)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 40)), "UTF8String"), -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
}

id __57__SGSqlEntityStore_IdentityStore__addInterdictFrom_with___block_invoke_2(uint64_t a1, void *a2)
{
  objc_class *v2;
  id v3;
  id v4;
  uint64_t v5;

  v2 = (objc_class *)MEMORY[0x1E0CB3940];
  v3 = a2;
  v4 = [v2 alloc];
  v5 = objc_msgSend(v3, "rowId");

  return (id)objc_msgSend(v4, "initWithFormat:", CFSTR("%lld"), v5);
}

id __57__SGSqlEntityStore_IdentityStore__addInterdictFrom_with___block_invoke(uint64_t a1, void *a2)
{
  objc_class *v2;
  id v3;
  id v4;
  uint64_t v5;

  v2 = (objc_class *)MEMORY[0x1E0CB3940];
  v3 = a2;
  v4 = [v2 alloc];
  v5 = objc_msgSend(v3, "rowId");

  return (id)objc_msgSend(v4, "initWithFormat:", CFSTR("%lld"), v5);
}

void __56__SGSqlEntityStore_IdentityStore__syncNewBlobsIfChanged__block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  objc_msgSend(*(id *)(a1 + 32), "getNewBlobsIfChanged");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (v2)
  {
    v3 = v2;
    objc_msgSend(*(id *)(a1 + 32), "writeIdentityBlobs:forceRewrite:", v2, 0);
    v2 = v3;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  }

}

- (unint64_t)storeReimportRequest:(id)a3
{
  id v4;
  SGSqliteDatabase *db;
  id v6;
  unint64_t v7;
  _QWORD v9[4];
  id v10;
  SGSqlEntityStore *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  v4 = a3;
  v13 = 0;
  v14 = &v13;
  v15 = 0x2020000000;
  v16 = 0;
  db = self->_db;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __59__SGSqlEntityStore_ReimportRequests__storeReimportRequest___block_invoke;
  v9[3] = &unk_1E7DB7878;
  v6 = v4;
  v10 = v6;
  v11 = self;
  v12 = &v13;
  -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v9);
  v7 = v14[3];

  _Block_object_dispose(&v13, 8);
  return v7;
}

- (void)storeReimportItems:(id)a3 requestId:(unint64_t)a4
{
  SGSqliteDatabase *db;
  uint64_t v7;
  id v8;
  _QWORD v9[6];
  _QWORD v10[6];

  db = self->_db;
  v7 = MEMORY[0x1E0C809B0];
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __67__SGSqlEntityStore_ReimportRequests__storeReimportItems_requestId___block_invoke;
  v10[3] = &unk_1E7DB6368;
  v10[4] = self;
  v10[5] = a4;
  v8 = a3;
  -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v10);
  v9[0] = v7;
  v9[1] = 3221225472;
  v9[2] = __67__SGSqlEntityStore_ReimportRequests__storeReimportItems_requestId___block_invoke_24;
  v9[3] = &unk_1E7DABFF8;
  v9[4] = self;
  v9[5] = a4;
  objc_msgSend(v8, "enumerateKeysAndObjectsUsingBlock:", v9);

}

- (void)markReimportRequestAsExecutedWithRequestId:(unint64_t)a3
{
  SGSqliteDatabase *db;
  _QWORD v4[6];

  db = self->_db;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __81__SGSqlEntityStore_ReimportRequests__markReimportRequestAsExecutedWithRequestId___block_invoke;
  v4[3] = &unk_1E7DB6368;
  v4[4] = self;
  v4[5] = a3;
  -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v4);
}

- (void)markReimportItemsAsSeenByReceiverWithBundleId:(id)a3 items:(id)a4
{
  id v6;
  id v7;
  SGSqliteDatabase *db;
  id v9;
  id v10;
  _QWORD v11[5];
  id v12;
  id v13;

  v6 = a3;
  v7 = a4;
  db = self->_db;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __90__SGSqlEntityStore_ReimportRequests__markReimportItemsAsSeenByReceiverWithBundleId_items___block_invoke;
  v11[3] = &unk_1E7DB7800;
  v11[4] = self;
  v12 = v6;
  v13 = v7;
  v9 = v7;
  v10 = v6;
  -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v11);

}

- (void)markReimportItemAsSeenByReceiverWithBundleId:(id)a3 uniqueId:(id)a4
{
  id v6;
  id v7;
  SGSqliteDatabase *db;
  id v9;
  id v10;
  _QWORD v11[5];
  id v12;
  id v13;

  v6 = a3;
  v7 = a4;
  db = self->_db;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __92__SGSqlEntityStore_ReimportRequests__markReimportItemAsSeenByReceiverWithBundleId_uniqueId___block_invoke;
  v11[3] = &unk_1E7DB7800;
  v11[4] = self;
  v12 = v6;
  v13 = v7;
  v9 = v7;
  v10 = v6;
  -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v11);

}

- (void)updateReimportItemUniqueIdForBundleId:(id)a3 oldValue:(id)a4 newValue:(id)a5
{
  id v8;
  id v9;
  id v10;
  SGSqliteDatabase *db;
  id v12;
  id v13;
  id v14;
  _QWORD v15[5];
  id v16;
  id v17;
  id v18;

  v8 = a3;
  v9 = a4;
  v10 = a5;
  db = self->_db;
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = __94__SGSqlEntityStore_ReimportRequests__updateReimportItemUniqueIdForBundleId_oldValue_newValue___block_invoke;
  v15[3] = &unk_1E7DB77B0;
  v15[4] = self;
  v16 = v8;
  v17 = v9;
  v18 = v10;
  v12 = v10;
  v13 = v9;
  v14 = v8;
  -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v15);

}

- (id)loadUnqueriedReimportRequests
{
  return -[SGSqlEntityStore _loadReimportRequestsWithWhereClause:](self, "_loadReimportRequestsWithWhereClause:", CFSTR("queryTimestamp IS NULL"));
}

- (id)loadUnexecutedReimportRequests
{
  return -[SGSqlEntityStore _loadReimportRequestsWithWhereClause:](self, "_loadReimportRequestsWithWhereClause:", CFSTR("queryTimestamp IS NOT NULL AND executionTimestamp IS NULL"));
}

- (id)loadAllReimportRequests
{
  return -[SGSqlEntityStore _loadReimportRequestsWithWhereClause:](self, "_loadReimportRequestsWithWhereClause:", CFSTR(" 1 "));
}

- (id)_loadReimportRequestsWithWhereClause:(id)a3
{
  id v4;
  void *v5;
  SGSqliteDatabase *db;
  void *v7;
  id v8;
  _QWORD v10[4];
  id v11;

  v4 = a3;
  v5 = (void *)objc_opt_new();
  db = self->_db;
  v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("SELECT id, plugin, personHandle, startDateTimestamp, endDateTimestamp FROM reimportRequests WHERE %@"), v4);

  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __75__SGSqlEntityStore_ReimportRequests___loadReimportRequestsWithWhereClause___block_invoke;
  v10[3] = &unk_1E7DB52C8;
  v8 = v5;
  v11 = v8;
  -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](db, "prepAndRunQuery:onPrep:onRow:onError:", v7, 0, v10, &__block_literal_global_63);

  return v8;
}

- (id)loadUnseenReimportItemsForRequest:(unint64_t)a3
{
  void *v5;
  SGSqliteDatabase *db;
  uint64_t v7;
  id v8;
  _QWORD v10[5];
  _QWORD v11[4];
  id v12;
  _QWORD v13[5];

  v5 = (void *)objc_opt_new();
  db = self->_db;
  v7 = MEMORY[0x1E0C809B0];
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = __72__SGSqlEntityStore_ReimportRequests__loadUnseenReimportItemsForRequest___block_invoke;
  v13[3] = &__block_descriptor_40_e23_v16__0__sqlite3_stmt__8l;
  v13[4] = a3;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __72__SGSqlEntityStore_ReimportRequests__loadUnseenReimportItemsForRequest___block_invoke_2;
  v11[3] = &unk_1E7DB52C8;
  v8 = v5;
  v12 = v8;
  v10[0] = v7;
  v10[1] = 3221225472;
  v10[2] = __72__SGSqlEntityStore_ReimportRequests__loadUnseenReimportItemsForRequest___block_invoke_3;
  v10[3] = &__block_descriptor_40_e37___PASDBIterAction__B_16__0__NSError_8l;
  v10[4] = a3;
  -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](db, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("SELECT bundleId, uniqueId FROM reimportItems WHERE reimportRequestId = :id AND seenByReceiverTimestamp IS NULL"), v13, v11, v10);

  return v8;
}

- (BOOL)reimportRequestsContainBundleIdentifier:(id)a3 uniqueIdentifier:(id)a4
{
  id v6;
  id v7;
  char v8;
  char v9;
  void *v10;
  SGSqliteDatabase *db;
  uint64_t v12;
  id v13;
  uint64_t *v14;
  SGSqliteDatabase *v15;
  uint64_t v16;
  id v17;
  uint64_t *v18;
  char v19;
  _QWORD v21[5];
  _QWORD v22[4];
  id v23;
  _QWORD v24[5];
  _QWORD v25[4];
  id v26;
  id v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  char v31;

  v6 = a3;
  v7 = a4;
  if (reimportRequestsContainBundleIdentifier_uniqueIdentifier__onceToken != -1)
    dispatch_once(&reimportRequestsContainBundleIdentifier_uniqueIdentifier__onceToken, &__block_literal_global_67_11715);
  objc_msgSend((id)reimportRequestsContainBundleIdentifier_uniqueIdentifier__lock, "lock");
  v28 = 0;
  v29 = &v28;
  v30 = 0x2020000000;
  v31 = 0;
  v8 = objc_msgSend((id)reimportRequestsContainBundleIdentifier_uniqueIdentifier__yesCache, "containsObject:", v6);
  v9 = v8 ^ 1;
  if (v7)
    v9 = 1;
  if ((v9 & 1) == 0)
  {
    *((_BYTE *)v29 + 24) = 1;
    goto LABEL_29;
  }
  if ((objc_msgSend((id)reimportRequestsContainBundleIdentifier_uniqueIdentifier__noCache, "containsObject:", v6) & 1) != 0)
    goto LABEL_29;
  if (!v7)
  {
    db = self->_db;
    v12 = MEMORY[0x1E0C809B0];
    v22[0] = MEMORY[0x1E0C809B0];
    v22[1] = 3221225472;
    v22[2] = __95__SGSqlEntityStore_ReimportRequests__reimportRequestsContainBundleIdentifier_uniqueIdentifier___block_invoke_5;
    v22[3] = &unk_1E7DB7720;
    v13 = v6;
    v23 = v13;
    v21[0] = v12;
    v21[1] = 3221225472;
    v21[2] = __95__SGSqlEntityStore_ReimportRequests__reimportRequestsContainBundleIdentifier_uniqueIdentifier___block_invoke_6;
    v21[3] = &unk_1E7DB51B8;
    v21[4] = &v28;
    -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](db, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("SELECT 1 FROM reimportItems WHERE bundleId = :bid"), v22, v21, &__block_literal_global_77_11719);
    if (*((_BYTE *)v29 + 24))
      v14 = &reimportRequestsContainBundleIdentifier_uniqueIdentifier__yesCache;
    else
      v14 = &reimportRequestsContainBundleIdentifier_uniqueIdentifier__noCache;
    objc_msgSend((id)*v14, "addObject:", v13);
    v10 = v23;
    goto LABEL_23;
  }
  v10 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("%@:%@"), v6, v7);
  if (objc_msgSend((id)reimportRequestsContainBundleIdentifier_uniqueIdentifier__yesCache, "containsObject:", v10))
  {
    *((_BYTE *)v29 + 24) = 1;
LABEL_16:

    goto LABEL_29;
  }
  if ((objc_msgSend((id)reimportRequestsContainBundleIdentifier_uniqueIdentifier__noCache, "containsObject:", v10) & 1) != 0)
    goto LABEL_16;
  v15 = self->_db;
  v16 = MEMORY[0x1E0C809B0];
  v25[0] = MEMORY[0x1E0C809B0];
  v25[1] = 3221225472;
  v25[2] = __95__SGSqlEntityStore_ReimportRequests__reimportRequestsContainBundleIdentifier_uniqueIdentifier___block_invoke_2;
  v25[3] = &unk_1E7DB5190;
  v17 = v6;
  v26 = v17;
  v27 = v7;
  v24[0] = v16;
  v24[1] = 3221225472;
  v24[2] = __95__SGSqlEntityStore_ReimportRequests__reimportRequestsContainBundleIdentifier_uniqueIdentifier___block_invoke_3;
  v24[3] = &unk_1E7DB51B8;
  v24[4] = &v28;
  -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](v15, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("SELECT 1 FROM reimportItems WHERE bundleId = :bid AND uniqueId = :uid"), v25, v24, &__block_literal_global_74);
  if (!*((_BYTE *)v29 + 24))
  {
    v18 = &reimportRequestsContainBundleIdentifier_uniqueIdentifier__noCache;
    v17 = v10;
    goto LABEL_21;
  }
  objc_msgSend((id)reimportRequestsContainBundleIdentifier_uniqueIdentifier__yesCache, "addObject:", v10);
  if ((v8 & 1) == 0)
  {
    v18 = &reimportRequestsContainBundleIdentifier_uniqueIdentifier__yesCache;
LABEL_21:
    objc_msgSend((id)*v18, "addObject:", v17);
  }

LABEL_23:
  if (*((_BYTE *)v29 + 24)
    && (unint64_t)objc_msgSend((id)reimportRequestsContainBundleIdentifier_uniqueIdentifier__yesCache, "count") >= 0x1A)
  {
    objc_msgSend((id)reimportRequestsContainBundleIdentifier_uniqueIdentifier__yesCache, "removeObjectsInRange:", 0, objc_msgSend((id)reimportRequestsContainBundleIdentifier_uniqueIdentifier__yesCache, "count") - 25);
  }
  if (!*((_BYTE *)v29 + 24)
    && (unint64_t)objc_msgSend((id)reimportRequestsContainBundleIdentifier_uniqueIdentifier__noCache, "count") >= 0x1A)
  {
    objc_msgSend((id)reimportRequestsContainBundleIdentifier_uniqueIdentifier__noCache, "removeObjectsInRange:", 0, objc_msgSend((id)reimportRequestsContainBundleIdentifier_uniqueIdentifier__noCache, "count") - 25);
  }
LABEL_29:
  objc_msgSend((id)reimportRequestsContainBundleIdentifier_uniqueIdentifier__lock, "unlock");
  v19 = *((_BYTE *)v29 + 24);
  _Block_object_dispose(&v28, 8);

  return v19;
}

- (void)deleteAllReimportRequestsOlderThanDate:(id)a3
{
  id v4;
  SGSqliteDatabase *db;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  db = self->_db;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __77__SGSqlEntityStore_ReimportRequests__deleteAllReimportRequestsOlderThanDate___block_invoke;
  v7[3] = &unk_1E7DB6A30;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v7);

}

- (void)deleteCompletedReimportRequests
{
  SGSqliteDatabase *db;
  _QWORD v3[5];

  db = self->_db;
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __69__SGSqlEntityStore_ReimportRequests__deleteCompletedReimportRequests__block_invoke;
  v3[3] = &unk_1E7DB56F0;
  v3[4] = self;
  -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v3);
}

- (void)_deleteOrphanedItems
{
  SGSqliteDatabase *db;
  _QWORD v3[5];

  db = self->_db;
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __58__SGSqlEntityStore_ReimportRequests___deleteOrphanedItems__block_invoke;
  v3[3] = &unk_1E7DB56F0;
  v3[4] = self;
  -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v3);
}

- (id)reimportRequestDBStats
{
  void *v3;
  SGSqliteDatabase *db;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  SGSqliteDatabase *v11;
  void *v12;
  void *v13;
  _QWORD v15[6];
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  int v23;
  _QWORD v24[9];
  uint64_t v25;
  double *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  int v44;

  if (-[SGSqliteDatabase hasTableNamed:](self->_db, "hasTableNamed:", CFSTR("reimportRequests")))
  {
    v3 = (void *)objc_opt_new();
    v41 = 0;
    v42 = &v41;
    v43 = 0x2020000000;
    v44 = 0;
    v37 = 0;
    v38 = &v37;
    v39 = 0x2020000000;
    v40 = 0;
    v33 = 0;
    v34 = &v33;
    v35 = 0x2020000000;
    v36 = 0;
    v29 = 0;
    v30 = (double *)&v29;
    v31 = 0x2020000000;
    v32 = 0x7FEFFFFFFFFFFFFFLL;
    v25 = 0;
    v26 = (double *)&v25;
    v27 = 0x2020000000;
    v28 = 0x7FEFFFFFFFFFFFFFLL;
    db = self->_db;
    v5 = MEMORY[0x1E0C809B0];
    v24[0] = MEMORY[0x1E0C809B0];
    v24[1] = 3221225472;
    v24[2] = __60__SGSqlEntityStore_ReimportRequests__reimportRequestDBStats__block_invoke;
    v24[3] = &unk_1E7DAC170;
    v24[4] = &v41;
    v24[5] = &v29;
    v24[6] = &v25;
    v24[7] = &v37;
    v24[8] = &v33;
    -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](db, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("SELECT creationTimestamp, queryTimestamp, executionTimestamp FROM reimportRequests"), 0, v24, &__block_literal_global_89_11681);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", *((unsigned int *)v42 + 6));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v6, CFSTR("reimportRequests_total"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", *((unsigned int *)v38 + 6));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v7, CFSTR("reimportRequests_unqueried"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", *((unsigned int *)v34 + 6));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v8, CFSTR("reimportRequests_unexecuted"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v30[3]);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v9, CFSTR("reimportRequests_oldest"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v26[3]);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v10, CFSTR("reimportRequests_oldestOpen"));

    v20 = 0;
    v21 = &v20;
    v22 = 0x2020000000;
    v23 = 0;
    v16 = 0;
    v17 = &v16;
    v18 = 0x2020000000;
    v19 = 0;
    v11 = self->_db;
    v15[0] = v5;
    v15[1] = 3221225472;
    v15[2] = __60__SGSqlEntityStore_ReimportRequests__reimportRequestDBStats__block_invoke_102;
    v15[3] = &unk_1E7DAD568;
    v15[4] = &v20;
    v15[5] = &v16;
    -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](v11, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("SELECT seenByReceiverTimestamp FROM reimportItems"), 0, v15, &__block_literal_global_104);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", *((unsigned int *)v21 + 6));
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v12, CFSTR("reimportItems_total"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", *((unsigned int *)v17 + 6));
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v13, CFSTR("reimportItems_unseen"));

    _Block_object_dispose(&v16, 8);
    _Block_object_dispose(&v20, 8);
    _Block_object_dispose(&v25, 8);
    _Block_object_dispose(&v29, 8);
    _Block_object_dispose(&v33, 8);
    _Block_object_dispose(&v37, 8);
    _Block_object_dispose(&v41, 8);
  }
  else
  {
    v3 = (void *)MEMORY[0x1E0C9AA70];
  }
  return v3;
}

uint64_t __60__SGSqlEntityStore_ReimportRequests__reimportRequestDBStats__block_invoke(_QWORD *a1, sqlite3_stmt *a2)
{
  double v4;
  uint64_t v5;
  double v6;
  double v7;
  uint64_t v8;
  _QWORD *v9;

  ++*(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24);
  v4 = sqlite3_column_double(a2, 0);
  v5 = *(_QWORD *)(a1[5] + 8);
  if (*(double *)(v5 + 24) > v4)
    *(double *)(v5 + 24) = v4;
  v6 = sqlite3_column_double(a2, 1);
  v7 = sqlite3_column_double(a2, 2);
  if (v6 <= 0.0 || v7 <= 0.0)
  {
    v8 = *(_QWORD *)(a1[6] + 8);
    if (*(double *)(v8 + 24) > v4)
      *(double *)(v8 + 24) = v4;
    if (v6 == 0.0)
    {
      v9 = a1 + 7;
LABEL_11:
      ++*(_DWORD *)(*(_QWORD *)(*v9 + 8) + 24);
      return 0;
    }
    if (v7 == 0.0)
    {
      v9 = a1 + 8;
      goto LABEL_11;
    }
  }
  return 0;
}

uint64_t __60__SGSqlEntityStore_ReimportRequests__reimportRequestDBStats__block_invoke_102(uint64_t a1, sqlite3_stmt *a2)
{
  ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  if (sqlite3_column_double(a2, 0) == 0.0)
    ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  return 0;
}

uint64_t __60__SGSqlEntityStore_ReimportRequests__reimportRequestDBStats__block_invoke_2_103(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  int v5;
  id v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  sgLogHandle();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    v5 = 138412290;
    v6 = v2;
    _os_log_error_impl(&dword_1C3607000, v3, OS_LOG_TYPE_ERROR, "error during reimportRequestDBStats query of reimportItems: %@", (uint8_t *)&v5, 0xCu);
  }

  return 1;
}

uint64_t __60__SGSqlEntityStore_ReimportRequests__reimportRequestDBStats__block_invoke_2(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  int v5;
  id v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  sgLogHandle();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    v5 = 138412290;
    v6 = v2;
    _os_log_error_impl(&dword_1C3607000, v3, OS_LOG_TYPE_ERROR, "error during reimportRequestDBStats query of reimportRequests: %@", (uint8_t *)&v5, 0xCu);
  }

  return 1;
}

uint64_t __58__SGSqlEntityStore_ReimportRequests___deleteOrphanedItems__block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("DELETE FROM reimportItems WHERE reimportRequestId NOT IN (SELECT id FROM reimportRequests)"), 0, 0, &__block_literal_global_86);
}

uint64_t __58__SGSqlEntityStore_ReimportRequests___deleteOrphanedItems__block_invoke_2(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  int v5;
  id v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  sgLogHandle();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    v5 = 138412290;
    v6 = v2;
    _os_log_error_impl(&dword_1C3607000, v3, OS_LOG_TYPE_ERROR, "failed to delete orphaned reimport items: %@", (uint8_t *)&v5, 0xCu);
  }

  return 1;
}

uint64_t __69__SGSqlEntityStore_ReimportRequests__deleteCompletedReimportRequests__block_invoke(uint64_t a1)
{
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("DELETE FROM reimportRequests WHERE executionTimestamp IS NOT NULL AND id NOT IN(    SELECT DISTINCT reimportRequestId FROM reimportItems     WHERE seenByReceiverTimestamp IS NULL)"), 0, 0, &__block_literal_global_83_11708);
  return objc_msgSend(*(id *)(a1 + 32), "_deleteOrphanedItems");
}

uint64_t __69__SGSqlEntityStore_ReimportRequests__deleteCompletedReimportRequests__block_invoke_2(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  int v5;
  id v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  sgLogHandle();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    v5 = 138412290;
    v6 = v2;
    _os_log_error_impl(&dword_1C3607000, v3, OS_LOG_TYPE_ERROR, "failed to delete completed reimport requests: %@", (uint8_t *)&v5, 0xCu);
  }

  return 1;
}

void __77__SGSqlEntityStore_ReimportRequests__deleteAllReimportRequestsOlderThanDate___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, void *);
  void *v8;
  id v9;
  _QWORD v10[4];
  id v11;

  v2 = *(void **)(a1 + 40);
  v3 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v4 = MEMORY[0x1E0C809B0];
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __77__SGSqlEntityStore_ReimportRequests__deleteAllReimportRequestsOlderThanDate___block_invoke_2;
  v10[3] = &unk_1E7DB7720;
  v11 = v2;
  v5 = v4;
  v6 = 3221225472;
  v7 = __77__SGSqlEntityStore_ReimportRequests__deleteAllReimportRequestsOlderThanDate___block_invoke_3;
  v8 = &unk_1E7DB77D8;
  v9 = *(id *)(a1 + 40);
  objc_msgSend(v3, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("DELETE FROM reimportRequests WHERE creationTimestamp < :date"), v10, 0, &v5);
  objc_msgSend(*(id *)(a1 + 32), "_deleteOrphanedItems", v5, v6, v7, v8);

}

uint64_t __77__SGSqlEntityStore_ReimportRequests__deleteAllReimportRequestsOlderThanDate___block_invoke_2(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 32), "timeIntervalSince1970");
  return +[SGSqliteDatabase bindParam:name:double:](SGSqliteDatabase, "bindParam:name:double:", a2, ":date");
}

uint64_t __77__SGSqlEntityStore_ReimportRequests__deleteAllReimportRequestsOlderThanDate___block_invoke_3(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  id v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  sgLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    v6 = *(_QWORD *)(a1 + 32);
    v7 = 138412546;
    v8 = v6;
    v9 = 2112;
    v10 = v3;
    _os_log_error_impl(&dword_1C3607000, v4, OS_LOG_TYPE_ERROR, "failed to delete reimport requests older than: %@: %@", (uint8_t *)&v7, 0x16u);
  }

  return 1;
}

uint64_t __95__SGSqlEntityStore_ReimportRequests__reimportRequestsContainBundleIdentifier_uniqueIdentifier___block_invoke_2(uint64_t a1, uint64_t a2)
{
  +[SGSqliteDatabase bindParam:name:nsstring:](SGSqliteDatabase, "bindParam:name:nsstring:", a2, ":bid", *(_QWORD *)(a1 + 32));
  return +[SGSqliteDatabase bindParam:name:nsstring:](SGSqliteDatabase, "bindParam:name:nsstring:", a2, ":uid", *(_QWORD *)(a1 + 40));
}

uint64_t __95__SGSqlEntityStore_ReimportRequests__reimportRequestsContainBundleIdentifier_uniqueIdentifier___block_invoke_3(uint64_t a1)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  return 1;
}

uint64_t __95__SGSqlEntityStore_ReimportRequests__reimportRequestsContainBundleIdentifier_uniqueIdentifier___block_invoke_5(uint64_t a1, uint64_t a2)
{
  return +[SGSqliteDatabase bindParam:name:nsstring:](SGSqliteDatabase, "bindParam:name:nsstring:", a2, ":bid", *(_QWORD *)(a1 + 32));
}

uint64_t __95__SGSqlEntityStore_ReimportRequests__reimportRequestsContainBundleIdentifier_uniqueIdentifier___block_invoke_6(uint64_t a1)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  return 1;
}

uint64_t __95__SGSqlEntityStore_ReimportRequests__reimportRequestsContainBundleIdentifier_uniqueIdentifier___block_invoke_7()
{
  return 1;
}

uint64_t __95__SGSqlEntityStore_ReimportRequests__reimportRequestsContainBundleIdentifier_uniqueIdentifier___block_invoke_4()
{
  return 1;
}

void __95__SGSqlEntityStore_ReimportRequests__reimportRequestsContainBundleIdentifier_uniqueIdentifier___block_invoke()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;

  v0 = objc_opt_new();
  v1 = (void *)reimportRequestsContainBundleIdentifier_uniqueIdentifier__lock;
  reimportRequestsContainBundleIdentifier_uniqueIdentifier__lock = v0;

  v2 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", 25);
  v3 = (void *)reimportRequestsContainBundleIdentifier_uniqueIdentifier__yesCache;
  reimportRequestsContainBundleIdentifier_uniqueIdentifier__yesCache = v2;

  v4 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", 25);
  v5 = (void *)reimportRequestsContainBundleIdentifier_uniqueIdentifier__noCache;
  reimportRequestsContainBundleIdentifier_uniqueIdentifier__noCache = v4;

}

uint64_t __72__SGSqlEntityStore_ReimportRequests__loadUnseenReimportItemsForRequest___block_invoke(uint64_t a1, uint64_t a2)
{
  return +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":id", *(_QWORD *)(a1 + 32));
}

uint64_t __72__SGSqlEntityStore_ReimportRequests__loadUnseenReimportItemsForRequest___block_invoke_2(uint64_t a1, sqlite3_stmt *a2)
{
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  sqlite3_column_nsstring(a2, 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  sqlite3_column_nsstring(a2, 1);
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = (void *)v5;
  if (v4 && v5)
  {
    objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v4);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v7)
    {
      v8 = (void *)objc_opt_new();
      objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v8, v4);

    }
    objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v4);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "addObject:", v6);

  }
  return 0;
}

uint64_t __72__SGSqlEntityStore_ReimportRequests__loadUnseenReimportItemsForRequest___block_invoke_3(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  id v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  sgLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    v6 = *(_QWORD *)(a1 + 32);
    v7 = 134218242;
    v8 = v6;
    v9 = 2112;
    v10 = v3;
    _os_log_error_impl(&dword_1C3607000, v4, OS_LOG_TYPE_ERROR, "failed to load unseen reimport items for request: %llu: %@", (uint8_t *)&v7, 0x16u);
  }

  return 1;
}

uint64_t __75__SGSqlEntityStore_ReimportRequests___loadReimportRequestsWithWhereClause___block_invoke(uint64_t a1, sqlite3_stmt *a2)
{
  sqlite3_int64 v4;
  void *v5;
  void *v6;
  double v7;
  void *v8;
  double v9;
  void *v10;
  void *v11;

  v4 = sqlite3_column_int64(a2, 0);
  sqlite3_column_nsstring(a2, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  sqlite3_column_nsstring(a2, 2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = sqlite3_column_double(a2, 3);
  if (v7 == 0.0)
    v8 = 0;
  else
    v8 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSince1970:", v7);
  v9 = sqlite3_column_double(a2, 4);
  if (v9 == 0.0)
    v10 = 0;
  else
    v10 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSince1970:", v9);
  +[FIAPHistoricalDataRequest historicalDataRequestWithPersonHandle:startDate:endDate:](FIAPHistoricalDataRequest, "historicalDataRequestWithPersonHandle:startDate:endDate:", v6, v8, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "setRequestId:", v4);
  objc_msgSend(v11, "setPluginIdentifier:", v5);
  objc_msgSend(*(id *)(a1 + 32), "addObject:", v11);

  return 0;
}

uint64_t __75__SGSqlEntityStore_ReimportRequests___loadReimportRequestsWithWhereClause___block_invoke_2(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  int v5;
  id v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  sgLogHandle();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    v5 = 138412290;
    v6 = v2;
    _os_log_error_impl(&dword_1C3607000, v3, OS_LOG_TYPE_ERROR, "failed to load unqueried reimport requests: %@", (uint8_t *)&v5, 0xCu);
  }

  return 1;
}

void __94__SGSqlEntityStore_ReimportRequests__updateReimportItemUniqueIdForBundleId_oldValue_newValue___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  _QWORD v5[4];
  id v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;
  id v11;

  v2 = *(void **)(a1 + 40);
  v3 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v4 = MEMORY[0x1E0C809B0];
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __94__SGSqlEntityStore_ReimportRequests__updateReimportItemUniqueIdForBundleId_oldValue_newValue___block_invoke_2;
  v8[3] = &unk_1E7DAC088;
  v9 = v2;
  v10 = *(id *)(a1 + 48);
  v11 = *(id *)(a1 + 56);
  v5[0] = v4;
  v5[1] = 3221225472;
  v5[2] = __94__SGSqlEntityStore_ReimportRequests__updateReimportItemUniqueIdForBundleId_oldValue_newValue___block_invoke_3;
  v5[3] = &unk_1E7DAC060;
  v6 = *(id *)(a1 + 48);
  v7 = *(id *)(a1 + 56);
  objc_msgSend(v3, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("UPDATE reimportItems SET uniqueId = :newValue WHERE bundleId = :bundleId AND uniqueId = :oldValue"), v8, 0, v5);

}

uint64_t __94__SGSqlEntityStore_ReimportRequests__updateReimportItemUniqueIdForBundleId_oldValue_newValue___block_invoke_2(_QWORD *a1, uint64_t a2)
{
  +[SGSqliteDatabase bindParam:name:nsstring:](SGSqliteDatabase, "bindParam:name:nsstring:", a2, ":bundleId", a1[4]);
  +[SGSqliteDatabase bindParam:name:nsstring:](SGSqliteDatabase, "bindParam:name:nsstring:", a2, ":oldValue", a1[5]);
  return +[SGSqliteDatabase bindParam:name:nsstring:](SGSqliteDatabase, "bindParam:name:nsstring:", a2, ":newValue", a1[6]);
}

uint64_t __94__SGSqlEntityStore_ReimportRequests__updateReimportItemUniqueIdForBundleId_oldValue_newValue___block_invoke_3(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  id v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  sgLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    v6 = *(_QWORD *)(a1 + 32);
    v7 = *(_QWORD *)(a1 + 40);
    v8 = 138412802;
    v9 = v6;
    v10 = 2112;
    v11 = v7;
    v12 = 2112;
    v13 = v3;
    _os_log_error_impl(&dword_1C3607000, v4, OS_LOG_TYPE_ERROR, "failed to update reimport uniqueId item from %@ to %@: %@", (uint8_t *)&v8, 0x20u);
  }

  return 1;
}

void __92__SGSqlEntityStore_ReimportRequests__markReimportItemAsSeenByReceiverWithBundleId_uniqueId___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  _QWORD v5[4];
  id v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;

  v2 = *(void **)(a1 + 40);
  v3 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v4 = MEMORY[0x1E0C809B0];
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __92__SGSqlEntityStore_ReimportRequests__markReimportItemAsSeenByReceiverWithBundleId_uniqueId___block_invoke_2;
  v8[3] = &unk_1E7DB5190;
  v9 = v2;
  v10 = *(id *)(a1 + 48);
  v5[0] = v4;
  v5[1] = 3221225472;
  v5[2] = __92__SGSqlEntityStore_ReimportRequests__markReimportItemAsSeenByReceiverWithBundleId_uniqueId___block_invoke_3;
  v5[3] = &unk_1E7DAC060;
  v6 = *(id *)(a1 + 40);
  v7 = *(id *)(a1 + 48);
  objc_msgSend(v3, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("UPDATE reimportItems SET seenByReceiverTimestamp = :time WHERE bundleId = :bundleId AND uniqueId = :uniqueId"), v8, 0, v5);

}

uint64_t __92__SGSqlEntityStore_ReimportRequests__markReimportItemAsSeenByReceiverWithBundleId_uniqueId___block_invoke_2(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = (void *)objc_opt_new();
  objc_msgSend(v4, "timeIntervalSince1970");
  +[SGSqliteDatabase bindParam:name:double:](SGSqliteDatabase, "bindParam:name:double:", a2, ":time");

  +[SGSqliteDatabase bindParam:name:nsstring:](SGSqliteDatabase, "bindParam:name:nsstring:", a2, ":bundleId", *(_QWORD *)(a1 + 32));
  return +[SGSqliteDatabase bindParam:name:nsstring:](SGSqliteDatabase, "bindParam:name:nsstring:", a2, ":uniqueId", *(_QWORD *)(a1 + 40));
}

uint64_t __92__SGSqlEntityStore_ReimportRequests__markReimportItemAsSeenByReceiverWithBundleId_uniqueId___block_invoke_3(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  id v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  sgLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    v6 = *(_QWORD *)(a1 + 32);
    v7 = *(_QWORD *)(a1 + 40);
    v8 = 138412802;
    v9 = v6;
    v10 = 2112;
    v11 = v7;
    v12 = 2112;
    v13 = v3;
    _os_log_error_impl(&dword_1C3607000, v4, OS_LOG_TYPE_ERROR, "failed to mark reimport item %@/%@ as seen: %@", (uint8_t *)&v8, 0x20u);
  }

  return 1;
}

void __90__SGSqlEntityStore_ReimportRequests__markReimportItemsAsSeenByReceiverWithBundleId_items___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  _QWORD v5[4];
  id v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;

  v2 = *(void **)(a1 + 40);
  v3 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v4 = MEMORY[0x1E0C809B0];
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __90__SGSqlEntityStore_ReimportRequests__markReimportItemsAsSeenByReceiverWithBundleId_items___block_invoke_2;
  v8[3] = &unk_1E7DB6E80;
  v9 = v2;
  v10 = *(id *)(a1 + 48);
  v5[0] = v4;
  v5[1] = 3221225472;
  v5[2] = __90__SGSqlEntityStore_ReimportRequests__markReimportItemsAsSeenByReceiverWithBundleId_items___block_invoke_4;
  v5[3] = &unk_1E7DAC060;
  v6 = *(id *)(a1 + 48);
  v7 = *(id *)(a1 + 40);
  objc_msgSend(v3, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("UPDATE reimportItems SET seenByReceiverTimestamp = :time WHERE bundleId = :bundleId AND uniqueId IN _pas_nsarray(:uids)"), v8, 0, v5);

}

void __90__SGSqlEntityStore_ReimportRequests__markReimportItemsAsSeenByReceiverWithBundleId_items___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;

  v3 = a2;
  v4 = (void *)objc_opt_new();
  objc_msgSend(v4, "timeIntervalSince1970");
  objc_msgSend(v3, "bindNamedParam:toDouble:", ":time");

  objc_msgSend(v3, "bindNamedParam:toNSString:", ":bundleId", *(_QWORD *)(a1 + 32));
  objc_msgSend(*(id *)(a1 + 40), "_pas_proxyArrayWithMapping:", &__block_literal_global_11752);
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "bindNamedParam:toNSArray:", ":uids", v5);

}

uint64_t __90__SGSqlEntityStore_ReimportRequests__markReimportItemsAsSeenByReceiverWithBundleId_items___block_invoke_4(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  id v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  sgLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    v6 = objc_msgSend(*(id *)(a1 + 32), "count");
    v7 = *(_QWORD *)(a1 + 40);
    v8 = 134218498;
    v9 = v6;
    v10 = 2112;
    v11 = v7;
    v12 = 2112;
    v13 = v3;
    _os_log_error_impl(&dword_1C3607000, v4, OS_LOG_TYPE_ERROR, "failed to mark %tu reimport items for %@ as seen: %@", (uint8_t *)&v8, 0x20u);
  }

  return *MEMORY[0x1E0D81788];
}

uint64_t __90__SGSqlEntityStore_ReimportRequests__markReimportItemsAsSeenByReceiverWithBundleId_items___block_invoke_3(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "uniqueIdentifier");
}

uint64_t __81__SGSqlEntityStore_ReimportRequests__markReimportRequestAsExecutedWithRequestId___block_invoke(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  _QWORD v4[5];
  _QWORD v5[5];

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v4[4] = v1;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __81__SGSqlEntityStore_ReimportRequests__markReimportRequestAsExecutedWithRequestId___block_invoke_2;
  v5[3] = &__block_descriptor_40_e23_v16__0__sqlite3_stmt__8l;
  v5[4] = v1;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __81__SGSqlEntityStore_ReimportRequests__markReimportRequestAsExecutedWithRequestId___block_invoke_3;
  v4[3] = &__block_descriptor_40_e37___PASDBIterAction__B_16__0__NSError_8l;
  return objc_msgSend(v2, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("UPDATE reimportRequests SET executionTimestamp = :time WHERE id = :id"), v5, 0, v4);
}

uint64_t __81__SGSqlEntityStore_ReimportRequests__markReimportRequestAsExecutedWithRequestId___block_invoke_2(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = (void *)objc_opt_new();
  objc_msgSend(v4, "timeIntervalSince1970");
  +[SGSqliteDatabase bindParam:name:double:](SGSqliteDatabase, "bindParam:name:double:", a2, ":time");

  return +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":id", *(_QWORD *)(a1 + 32));
}

uint64_t __81__SGSqlEntityStore_ReimportRequests__markReimportRequestAsExecutedWithRequestId___block_invoke_3(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  id v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  sgLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    v6 = *(_QWORD *)(a1 + 32);
    v7 = 134218242;
    v8 = v6;
    v9 = 2112;
    v10 = v3;
    _os_log_error_impl(&dword_1C3607000, v4, OS_LOG_TYPE_ERROR, "failed to mark reimport request %llu as executed: %@", (uint8_t *)&v7, 0x16u);
  }

  return 1;
}

uint64_t __67__SGSqlEntityStore_ReimportRequests__storeReimportItems_requestId___block_invoke(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  _QWORD v4[5];
  _QWORD v5[5];

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v4[4] = v1;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __67__SGSqlEntityStore_ReimportRequests__storeReimportItems_requestId___block_invoke_2;
  v5[3] = &__block_descriptor_40_e23_v16__0__sqlite3_stmt__8l;
  v5[4] = v1;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __67__SGSqlEntityStore_ReimportRequests__storeReimportItems_requestId___block_invoke_3;
  v4[3] = &__block_descriptor_40_e37___PASDBIterAction__B_16__0__NSError_8l;
  return objc_msgSend(v2, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("UPDATE reimportRequests SET queryTimestamp = :time WHERE id = :id"), v5, 0, v4);
}

void __67__SGSqlEntityStore_ReimportRequests__storeReimportItems_requestId___block_invoke_24(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  _QWORD v11[5];
  id v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD v15[3];
  char v16;

  v5 = a2;
  v6 = a3;
  v15[0] = 0;
  v15[1] = v15;
  v15[2] = 0x2020000000;
  v16 = 1;
  objc_msgSend(v6, "allObjects");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __67__SGSqlEntityStore_ReimportRequests__storeReimportItems_requestId___block_invoke_2_25;
  v11[3] = &unk_1E7DABFD0;
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v13 = v15;
  v14 = v9;
  v11[4] = v8;
  v10 = v5;
  v12 = v10;
  objc_msgSend(v7, "_pas_enumerateChunksOfSize:usingBlock:", 512, v11);

  _Block_object_dispose(v15, 8);
}

void __67__SGSqlEntityStore_ReimportRequests__storeReimportItems_requestId___block_invoke_2_25(_QWORD *a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  id v9;
  _QWORD v10[5];
  id v11;
  id v12;
  uint64_t v13;

  v3 = a2;
  v4 = *(_QWORD *)(a1[6] + 8);
  if (*(_BYTE *)(v4 + 24))
    *(_BYTE *)(v4 + 24) = 0;
  else
    usleep(0x1388u);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[2] = __67__SGSqlEntityStore_ReimportRequests__storeReimportItems_requestId___block_invoke_3_26;
  v10[3] = &unk_1E7DB5990;
  v5 = a1[4];
  v6 = (void *)a1[5];
  v7 = *(void **)(v5 + 8);
  v10[1] = 3221225472;
  v8 = a1[7];
  v10[4] = v5;
  v13 = v8;
  v11 = v6;
  v12 = v3;
  v9 = v3;
  objc_msgSend(v7, "writeTransaction:", v10);

}

void __67__SGSqlEntityStore_ReimportRequests__storeReimportItems_requestId___block_invoke_3_26(uint64_t a1)
{
  void *v2;
  void *v3;
  _QWORD v4[4];
  id v5;
  id v6;
  uint64_t v7;

  v4[0] = MEMORY[0x1E0C809B0];
  v4[2] = __67__SGSqlEntityStore_ReimportRequests__storeReimportItems_requestId___block_invoke_4;
  v4[3] = &unk_1E7DB6B00;
  v7 = *(_QWORD *)(a1 + 56);
  v2 = *(void **)(a1 + 40);
  v3 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v4[1] = 3221225472;
  v5 = v2;
  v6 = *(id *)(a1 + 48);
  objc_msgSend(v3, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("INSERT OR REPLACE INTO reimportItems (reimportRequestId, bundleId, uniqueId) SELECT :rid, :bid, value FROM _pas_nsarray(:chunk)"), v4, 0, 0);

}

void __67__SGSqlEntityStore_ReimportRequests__storeReimportItems_requestId___block_invoke_4(_QWORD *a1, void *a2)
{
  id v3;
  id v4;

  v3 = a2;
  if ((a1[6] & 0x8000000000000000) != 0)
    __assert_rtn("-[SGSqlEntityStore(ReimportRequests) storeReimportItems:requestId:]_block_invoke_4", "SGSqlEntityStore+ReimportRequests.m", 77, "requestId <= INT64_MAX");
  v4 = v3;
  objc_msgSend(v3, "bindNamedParam:toInt64:", ":rid");
  objc_msgSend(v4, "bindNamedParam:toNSString:", ":bid", a1[4]);
  objc_msgSend(v4, "bindNamedParam:toNSArray:", ":chunk", a1[5]);

}

uint64_t __67__SGSqlEntityStore_ReimportRequests__storeReimportItems_requestId___block_invoke_2(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = (void *)objc_opt_new();
  objc_msgSend(v4, "timeIntervalSince1970");
  +[SGSqliteDatabase bindParam:name:double:](SGSqliteDatabase, "bindParam:name:double:", a2, ":time");

  return +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":id", *(_QWORD *)(a1 + 32));
}

uint64_t __67__SGSqlEntityStore_ReimportRequests__storeReimportItems_requestId___block_invoke_3(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  id v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  sgLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    v6 = *(_QWORD *)(a1 + 32);
    v7 = 134218242;
    v8 = v6;
    v9 = 2112;
    v10 = v3;
    _os_log_error_impl(&dword_1C3607000, v4, OS_LOG_TYPE_ERROR, "failed to mark reimport request %llu as queried: %@", (uint8_t *)&v7, 0x16u);
  }

  return 1;
}

void __59__SGSqlEntityStore_ReimportRequests__storeReimportRequest___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  _QWORD v19[4];
  id v20;

  v2 = (void *)objc_opt_new();
  objc_msgSend(*(id *)(a1 + 32), "pluginIdentifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setValue:forKey:", v3, CFSTR("plugin"));

  v4 = (void *)MEMORY[0x1E0CB37E8];
  v5 = (void *)objc_opt_new();
  objc_msgSend(v5, "timeIntervalSince1970");
  objc_msgSend(v4, "numberWithDouble:");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setValue:forKey:", v6, CFSTR("creationTimestamp"));

  objc_msgSend(*(id *)(a1 + 32), "personHandle");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (v7)
  {
    objc_msgSend(*(id *)(a1 + 32), "personHandle");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setValue:forKey:", v8, CFSTR("personHandle"));

  }
  objc_msgSend(*(id *)(a1 + 32), "startDate");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9)
  {
    v10 = (void *)MEMORY[0x1E0CB37E8];
    objc_msgSend(*(id *)(a1 + 32), "startDate");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "timeIntervalSince1970");
    objc_msgSend(v10, "numberWithDouble:");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setValue:forKey:", v12, CFSTR("startDateTimestamp"));

  }
  objc_msgSend(*(id *)(a1 + 32), "endDate");
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  if (v13)
  {
    v14 = (void *)MEMORY[0x1E0CB37E8];
    objc_msgSend(*(id *)(a1 + 32), "endDate");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "timeIntervalSince1970");
    objc_msgSend(v14, "numberWithDouble:");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setValue:forKey:", v16, CFSTR("endDateTimestamp"));

  }
  v17 = *(void **)(a1 + 32);
  v18 = *(void **)(*(_QWORD *)(a1 + 40) + 8);
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 3221225472;
  v19[2] = __59__SGSqlEntityStore_ReimportRequests__storeReimportRequest___block_invoke_2;
  v19[3] = &unk_1E7DB77D8;
  v20 = v17;
  objc_msgSend(v18, "insertOrReplaceIntoTable:dictionary:onError:", CFSTR("reimportRequests"), v2, v19);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 8), "lastInsertRowId");

}

uint64_t __59__SGSqlEntityStore_ReimportRequests__storeReimportRequest___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  id v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  sgLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    v6 = *(_QWORD *)(a1 + 32);
    v7 = 138412546;
    v8 = v6;
    v9 = 2112;
    v10 = v3;
    _os_log_error_impl(&dword_1C3607000, v4, OS_LOG_TYPE_ERROR, "failed to store reimport request: %@: %@", (uint8_t *)&v7, 0x16u);
  }

  return 1;
}

- (id)storageLocationWithPrimaryKey:(int64_t)a3
{
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  _QWORD v9[5];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  void (*v14)(uint64_t);
  id v15;
  _QWORD v16[5];

  v4 = MEMORY[0x1E0C809B0];
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3221225472;
  v16[2] = __61__SGSqlEntityStore_Locations__storageLocationWithPrimaryKey___block_invoke;
  v16[3] = &__block_descriptor_40_e23_v16__0__sqlite3_stmt__8l;
  v16[4] = a3;
  v5 = (void *)MEMORY[0x1C3BD5158](v16, a2);
  v10 = 0;
  v11 = &v10;
  v12 = 0x3032000000;
  v13 = __Block_byref_object_copy__13913;
  v14 = __Block_byref_object_dispose__13914;
  v15 = 0;
  v9[0] = v4;
  v9[1] = 3221225472;
  v9[2] = __61__SGSqlEntityStore_Locations__storageLocationWithPrimaryKey___block_invoke_4;
  v9[3] = &unk_1E7DB51B8;
  v9[4] = &v10;
  v6 = (void *)MEMORY[0x1C3BD5158](v9);
  -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](self->_db, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("SELECT locationType, label, address, airportCode, latitude, longitude, accuracy, quality, handle FROM locations WHERE id = ?"), v5, v6, 0);
  v7 = (id)v11[5];

  _Block_object_dispose(&v10, 8);
  return v7;
}

- (int64_t)commitStorageLocation:(id)a3
{
  return -[SGSqlEntityStore commitStorageLocation:withEventId:](self, "commitStorageLocation:withEventId:", a3, -1);
}

- (int64_t)commitStorageLocation:(id)a3 withEventId:(int64_t)a4
{
  id v6;
  SGSqliteDatabase *db;
  id v8;
  int64_t v9;
  _QWORD v11[4];
  id v12;
  SGSqlEntityStore *v13;
  uint64_t *v14;
  int64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;

  v6 = a3;
  v16 = 0;
  v17 = &v16;
  v18 = 0x2020000000;
  v19 = 0;
  db = self->_db;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __65__SGSqlEntityStore_Locations__commitStorageLocation_withEventId___block_invoke;
  v11[3] = &unk_1E7DB5318;
  v15 = a4;
  v8 = v6;
  v12 = v8;
  v13 = self;
  v14 = &v16;
  -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v11);
  v9 = v17[3];

  _Block_object_dispose(&v16, 8);
  return v9;
}

void __65__SGSqlEntityStore_Locations__commitStorageLocation_withEventId___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;

  v20 = (id)objc_opt_new();
  if ((*(_QWORD *)(a1 + 56) & 0x8000000000000000) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "setObject:forKeyedSubscript:", v2, CFSTR("eventId"));

  }
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", objc_msgSend(*(id *)(a1 + 32), "locationType"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "setObject:forKeyedSubscript:", v3, CFSTR("locationType"));

  objc_msgSend(*(id *)(a1 + 32), "label");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend(*(id *)(a1 + 32), "label");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "setObject:forKeyedSubscript:", v5, CFSTR("label"));

  }
  objc_msgSend(*(id *)(a1 + 32), "address");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    objc_msgSend(*(id *)(a1 + 32), "address");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "setObject:forKeyedSubscript:", v7, CFSTR("address"));

  }
  objc_msgSend(*(id *)(a1 + 32), "airportCode");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (v8)
  {
    objc_msgSend(*(id *)(a1 + 32), "airportCode");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "setObject:forKeyedSubscript:", v9, CFSTR("airportCode"));

  }
  v10 = (void *)MEMORY[0x1E0CB37E8];
  objc_msgSend(*(id *)(a1 + 32), "latitude");
  objc_msgSend(v10, "numberWithDouble:");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "setObject:forKeyedSubscript:", v11, CFSTR("latitude"));

  v12 = (void *)MEMORY[0x1E0CB37E8];
  objc_msgSend(*(id *)(a1 + 32), "longitude");
  objc_msgSend(v12, "numberWithDouble:");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "setObject:forKeyedSubscript:", v13, CFSTR("longitude"));

  v14 = (void *)MEMORY[0x1E0CB37E8];
  objc_msgSend(*(id *)(a1 + 32), "accuracy");
  objc_msgSend(v14, "numberWithDouble:");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "setObject:forKeyedSubscript:", v15, CFSTR("accuracy"));

  v16 = (void *)MEMORY[0x1E0CB37E8];
  objc_msgSend(*(id *)(a1 + 32), "quality");
  objc_msgSend(v16, "numberWithDouble:");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "setObject:forKeyedSubscript:", v17, CFSTR("quality"));

  objc_msgSend(*(id *)(a1 + 32), "handle");
  v18 = (void *)objc_claimAutoreleasedReturnValue();

  if (v18)
  {
    objc_msgSend(*(id *)(a1 + 32), "handle");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "setObject:forKeyedSubscript:", v19, CFSTR("handle"));

  }
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 8), "insertOrReplaceIntoTable:dictionary:onError:", CFSTR("locations"), v20, 0);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = sqlite3_last_insert_rowid((sqlite3 *)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 8), "handle"));

}

uint64_t __61__SGSqlEntityStore_Locations__storageLocationWithPrimaryKey___block_invoke(uint64_t a1, sqlite3_stmt *a2)
{
  return sqlite3_bind_int64(a2, 1, *(_QWORD *)(a1 + 32));
}

uint64_t __61__SGSqlEntityStore_Locations__storageLocationWithPrimaryKey___block_invoke_4(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  double v8;
  double v9;
  double v10;
  NSObject *v11;
  const char *v12;
  uint8_t *v13;
  double v14;
  double v15;
  const void *v16;
  void *v17;
  SGStorageLocation *v18;
  uint64_t v19;
  void *v20;
  __int16 v22;
  __int16 v23;

  v4 = sqlite3_column_int(a2, 0);
  sqlite3_column_nsstring(a2, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  sqlite3_column_nsstring(a2, 2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  sqlite3_column_nsstring(a2, 3);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (sqlite3_column_type(a2, 4) == 5)
  {
    v8 = NAN;
    v9 = NAN;
    if (sqlite3_column_type(a2, 5) == 5)
      goto LABEL_13;
LABEL_5:
    v10 = sqlite3_column_double(a2, 5);
    v9 = v10;
    if (v8 != 0.0 || v10 != 0.0)
      goto LABEL_13;
    sgLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
    {
      v23 = 0;
      v12 = "Retrieved location with latitude and longitude both 0";
      v13 = (uint8_t *)&v23;
LABEL_15:
      _os_log_fault_impl(&dword_1C3607000, v11, OS_LOG_TYPE_FAULT, v12, v13, 2u);
      goto LABEL_11;
    }
    goto LABEL_11;
  }
  v8 = sqlite3_column_double(a2, 4);
  if (sqlite3_column_type(a2, 5) != 5)
    goto LABEL_5;
  sgLogHandle();
  v11 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
  {
    v22 = 0;
    v12 = "Retrieved location has one valid and one NaN coodinate";
    v13 = (uint8_t *)&v22;
    goto LABEL_15;
  }
LABEL_11:

  if (_PASEvaluateLogFaultAndProbCrashCriteria())
    abort();
  v8 = NAN;
  v9 = NAN;
LABEL_13:
  v14 = sqlite3_column_double(a2, 6);
  v15 = sqlite3_column_double(a2, 7);
  v16 = sqlite3_column_blob(a2, 8);
  v17 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", v16, sqlite3_column_bytes(a2, 8));
  v18 = -[SGStorageLocation initWithType:label:address:airportCode:latitude:longitude:accuracy:quality:handle:]([SGStorageLocation alloc], "initWithType:label:address:airportCode:latitude:longitude:accuracy:quality:handle:", v4, v5, v6, v7, v17, v8, v9, v14, v15);
  v19 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v20 = *(void **)(v19 + 40);
  *(_QWORD *)(v19 + 40) = v18;

  return 1;
}

- (void)removeSnippetsForEntities:(id)a3
{
  id v4;
  id v5;
  void *v6;
  void *v7;
  SGDatabaseJournal *snippetsJournal;
  void *v9;
  const __CFString *v10;
  _QWORD v11[2];

  v11[1] = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (objc_msgSend(v4, "count"))
  {
    v5 = objc_alloc(MEMORY[0x1E0CB3940]);
    qmarksSeparatedByCommas(objc_msgSend(v4, "count"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = (void *)objc_msgSend(v5, "initWithFormat:", CFSTR("DELETE FROM snippets WHERE entityId IN (%@)"), v6);

    snippetsJournal = self->_snippetsJournal;
    v10 = CFSTR("qmarksSeparatedByCommas");
    v11[0] = v4;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v11, &v10, 1);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[SGDatabaseJournal runQuery:values:onDb:](snippetsJournal, "runQuery:values:onDb:", v7, v9, self->_snippetDb);

  }
}

- (void)_removeSnippetsForEmails:(id)a3
{
  id v4;
  id v5;
  void *v6;
  void *v7;
  SGDatabaseJournal *snippetsJournal;
  void *v9;
  const __CFString *v10;
  _QWORD v11[2];

  v11[1] = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (objc_msgSend(v4, "count"))
  {
    v5 = objc_alloc(MEMORY[0x1E0CB3940]);
    qmarksSeparatedByCommas(objc_msgSend(v4, "count"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = (void *)objc_msgSend(v5, "initWithFormat:", CFSTR("DELETE FROM emailSnippets WHERE emailId IN (%@)"), v6);

    snippetsJournal = self->_snippetsJournal;
    v10 = CFSTR("qmarksSeparatedByCommas");
    v11[0] = v4;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v11, &v10, 1);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[SGDatabaseJournal runQuery:values:onDb:](snippetsJournal, "runQuery:values:onDb:", v7, v9, self->_snippetDb);

  }
}

- (void)pruneEntitiesOlderThan:(SGUnixTimestamp_)a3 suspensionHandler:(id)a4
{
  -[SGSqlEntityStore pruneEntitiesOlderThan:suspensionHandler:batchSize:](self, "pruneEntitiesOlderThan:suspensionHandler:batchSize:", a4, 100, a3.secondsFromUnixEpoch);
}

- (void)pruneEntitiesOlderThanOneYearWithSuspensionHandler:(id)a3
{
  void *v4;
  double v5;
  double v6;
  id v7;

  v7 = a3;
  v4 = (void *)objc_opt_new();
  objc_msgSend(v4, "timeIntervalSince1970");
  v6 = v5;

  -[SGSqlEntityStore pruneEntitiesOlderThan:suspensionHandler:batchSize:](self, "pruneEntitiesOlderThan:suspensionHandler:batchSize:", v7, 100, v6 + -31536000.0);
}

- (void)pruneEntitiesOlderThan:(SGUnixTimestamp_)a3 suspensionHandler:(id)a4 batchSize:(unint64_t)a5
{
  uint64_t (**v9)(_QWORD);
  int v10;
  NSObject *v11;
  _BOOL4 v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  SGSqliteDatabase *db;
  id v19;
  int v20;
  void *v21;
  _QWORD v22[4];
  id v23;
  __int128 *p_buf;
  _QWORD v25[7];
  __int128 buf;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v9 = (uint64_t (**)(_QWORD))a4;
  if (!a5)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore+Deleting.m"), 94, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("batchSize > 0"));

  }
  v10 = objc_msgSend(MEMORY[0x1E0D198F0], "showPastEvents");
  sgLogHandle();
  v11 = objc_claimAutoreleasedReturnValue();
  v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
  if (v10)
  {
    if (v12)
    {
      v13 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSince1970:", a3.secondsFromUnixEpoch);
      LODWORD(buf) = 138543362;
      *(_QWORD *)((char *)&buf + 4) = v13;
      _os_log_impl(&dword_1C3607000, v11, OS_LOG_TYPE_DEFAULT, "*** Not pruning entities older than %{public}@ because showPastEvents is enabled! ***", (uint8_t *)&buf, 0xCu);

    }
  }
  else
  {
    if (v12)
    {
      v14 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSince1970:", a3.secondsFromUnixEpoch);
      LODWORD(buf) = 138543362;
      *(_QWORD *)((char *)&buf + 4) = v14;
      _os_log_impl(&dword_1C3607000, v11, OS_LOG_TYPE_DEFAULT, "Pruning entities older than %{public}@", (uint8_t *)&buf, 0xCu);

    }
    *(_QWORD *)&buf = 0;
    *((_QWORD *)&buf + 1) = &buf;
    v27 = 0x2020000000;
    v28 = -1;
    v15 = MEMORY[0x1E0C809B0];
    do
    {
      v16 = (void *)MEMORY[0x1C3BD4F6C]();
      v17 = (void *)objc_opt_new();
      db = self->_db;
      p_buf = &buf;
      v25[0] = v15;
      v25[1] = 3221225472;
      v25[2] = __81__SGSqlEntityStore_Deleting__pruneEntitiesOlderThan_suspensionHandler_batchSize___block_invoke;
      v25[3] = &unk_1E7DACED0;
      v25[5] = *(SGUnixTimestamp_ *)&a3.secondsFromUnixEpoch;
      v25[4] = &buf;
      v25[6] = a5;
      v22[0] = v15;
      v22[1] = 3221225472;
      v22[2] = __81__SGSqlEntityStore_Deleting__pruneEntitiesOlderThan_suspensionHandler_batchSize___block_invoke_2;
      v22[3] = &unk_1E7DACEF8;
      v19 = v17;
      v23 = v19;
      -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](db, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("SELECT rowid AS minId, key FROM emailMetadata WHERE creationTimestamp < :time AND rowid > :minId ORDER BY rowid LIMIT :limit"), v25, v22, 0);
      -[SGSqlEntityStore deleteEntitiesByDuplicateKey:emitChangeNotifications:](self, "deleteEntitiesByDuplicateKey:emitChangeNotifications:", v19, 1);
      if (v9 && (v9[2](v9) & 1) != 0)
        v20 = 4;
      else
        v20 = 4 * (objc_msgSend(v19, "count") < a5);

      objc_autoreleasePoolPop(v16);
    }
    while (!v20);
    _Block_object_dispose(&buf, 8);
  }

}

- (void)pruneMailIntelligenceOlderThanOneYearWithSuspensionHandler:(id)a3
{
  NSObject *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  SGSqliteDatabase *db;
  id v11;
  uint64_t v12;
  void *v13;
  id v15;
  _QWORD v16[4];
  id v17;
  uint64_t v18;
  _QWORD v19[5];
  uint8_t buf[8];
  uint8_t *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;

  v15 = a3;
  sgLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1C3607000, v4, OS_LOG_TYPE_DEFAULT, "Pruning mail intelligence data older than one year", buf, 2u);
  }

  *(_QWORD *)buf = 0;
  v21 = buf;
  v22 = 0x2810000000;
  v23 = "";
  v24 = 0;
  v5 = (void *)objc_opt_new();
  objc_msgSend(v5, "timeIntervalSince1970");
  v24 = v6;

  v7 = 0;
  *((double *)v21 + 4) = *((double *)v21 + 4) + -31536000.0;
  v8 = MEMORY[0x1E0C809B0];
  while (1)
  {
    v9 = (void *)objc_opt_new();
    db = self->_db;
    v19[0] = v8;
    v19[1] = 3221225472;
    v19[2] = __89__SGSqlEntityStore_Deleting__pruneMailIntelligenceOlderThanOneYearWithSuspensionHandler___block_invoke;
    v19[3] = &unk_1E7DB46B8;
    v19[4] = buf;
    v16[0] = v8;
    v16[1] = 3221225472;
    v16[2] = __89__SGSqlEntityStore_Deleting__pruneMailIntelligenceOlderThanOneYearWithSuspensionHandler___block_invoke_2;
    v16[3] = &unk_1E7DB6EF8;
    v11 = v9;
    v17 = v11;
    v18 = 500;
    -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](db, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("SELECT messageId FROM mailIntelligence_saliency WHERE creationTimestamp < :time"), v19, v16, 0);
    if (!objc_msgSend(v11, "count"))
      break;
    if (v7)
    {
      if (objc_msgSend(v11, "containsObject:", v7))
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore+Deleting.m"), 156, CFSTR("possible infinite loop"));

      }
    }
    -[SGSqlEntityStore deleteMailIntelligenceForMessageIds:](self, "deleteMailIntelligenceForMessageIds:", v11);
    objc_msgSend(v11, "objectAtIndexedSubscript:", 0);
    v12 = objc_claimAutoreleasedReturnValue();

    v7 = (void *)v12;
  }

  _Block_object_dispose(buf, 8);
}

- (void)deleteMailIntelligenceForMessageIds:(id)a3
{
  id v4;
  SGSqliteDatabase *db;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  db = self->_db;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __66__SGSqlEntityStore_Deleting__deleteMailIntelligenceForMessageIds___block_invoke;
  v7[3] = &unk_1E7DB6A30;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v7);

}

- (void)clearMailIntelligenceSaliencyDetection
{
  void *v3;

  -[SGSqlEntityStore sgmiFeatureStore](self, "sgmiFeatureStore");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "clearMailIntelligenceSaliencyDetection");

  -[SGSqlEntityStore deleteValueForKey:](self, "deleteValueForKey:", CFSTR("lastSGMIUpdaterProcessingDate"));
  -[SGSqlEntityStore deleteValueForKey:](self, "deleteValueForKey:", CFSTR("earliestNextSGMIUpdaterProcessingDate"));
  -[SGSqlEntityStore deleteValueForKey:](self, "deleteValueForKey:", CFSTR("lastMailboxCheckedForTopSGMISaliency"));
  -[SGSqlEntityStore deleteValueForKey:](self, "deleteValueForKey:", CFSTR("lastLimitCheckedForTopSGMISaliency"));
  -[SGSqlEntityStore deleteValueForKey:](self, "deleteValueForKey:", CFSTR("totalSGMIUpdaterMailsProcessed"));
  -[SGSqlEntityStore deleteValueForKey:](self, "deleteValueForKey:", CFSTR("kTotalSGMITruePositivePredictions"));
  -[SGSqlEntityStore deleteValueForKey:](self, "deleteValueForKey:", CFSTR("kTotalSGMIFalsePositivePredictions"));
  -[SGSqlEntityStore deleteValueForKey:](self, "deleteValueForKey:", CFSTR("kTotalSGMITrueNegativePredictions"));
  -[SGSqlEntityStore deleteValueForKey:](self, "deleteValueForKey:", CFSTR("kTotalSGMIFalseNegativePredictions"));
  -[SGSqlEntityStore deleteValueForKey:](self, "deleteValueForKey:", CFSTR("lastSGMIFollowUpStatsAndSettingReportingDate"));
}

- (void)clearMailIntelligence
{
  void *v3;

  -[SGSqlEntityStore sgmiFeatureStore](self, "sgmiFeatureStore");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "reset");

  -[SGSqlEntityStore clearMailIntelligenceSaliencyDetection](self, "clearMailIntelligenceSaliencyDetection");
}

- (void)pruneDuplicateEventExtractions:(id)a3
{
  id v4;
  NSObject *v5;
  void *v6;
  SGSqliteDatabase *db;
  uint64_t v8;
  id v9;
  void *v10;
  SGSqliteDatabase *v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  NSObject *v16;
  NSObject *v17;
  uint64_t v18;
  _QWORD v19[5];
  id v20;
  id v21;
  _QWORD v22[4];
  id v23;
  _QWORD v24[4];
  id v25;
  uint8_t buf[4];
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  sgLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_debug_impl(&dword_1C3607000, v5, OS_LOG_TYPE_DEBUG, "Pruning duplicate event entities from web-pages/interactions", buf, 2u);
  }

  v6 = (void *)objc_opt_new();
  db = self->_db;
  v8 = MEMORY[0x1E0C809B0];
  v24[0] = MEMORY[0x1E0C809B0];
  v24[1] = 3221225472;
  v24[2] = __61__SGSqlEntityStore_Deleting__pruneDuplicateEventExtractions___block_invoke_2;
  v24[3] = &unk_1E7DB6ED0;
  v9 = v6;
  v25 = v9;
  -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](db, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("SELECT entityKey FROM entity WHERE entityType = :entityType GROUP BY entityKey having(COUNT(entityKey) > 1)"), &__block_literal_global_14143, v24, 0);
  v10 = (void *)objc_opt_new();
  v11 = self->_db;
  -[SGSqlEntityStore selectEntityQuery:](self, "selectEntityQuery:", CFSTR("WHERE e.entityKey in _pas_nsarray(:candidateEntityKeys) AND e.entityType = :entityType"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v22[0] = v8;
  v22[1] = 3221225472;
  v22[2] = __61__SGSqlEntityStore_Deleting__pruneDuplicateEventExtractions___block_invoke_3;
  v22[3] = &unk_1E7DB74A0;
  v23 = v9;
  v19[0] = v8;
  v19[1] = 3221225472;
  v19[2] = __61__SGSqlEntityStore_Deleting__pruneDuplicateEventExtractions___block_invoke_4;
  v19[3] = &unk_1E7DB0760;
  v19[4] = self;
  v20 = v4;
  v13 = v10;
  v21 = v13;
  v14 = v4;
  v15 = v9;
  -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](v11, "prepAndRunSQL:onPrep:onRow:onError:", v12, v22, v19, 0);

  sgLogHandle();
  v16 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138412290;
    v27 = (uint64_t)v13;
    _os_log_debug_impl(&dword_1C3607000, v16, OS_LOG_TYPE_DEBUG, "entities to delete %@", buf, 0xCu);
  }

  if (objc_msgSend(v13, "count"))
  {
    sgLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      v18 = objc_msgSend(v13, "count");
      *(_DWORD *)buf = 134349056;
      v27 = v18;
      _os_log_impl(&dword_1C3607000, v17, OS_LOG_TYPE_DEFAULT, "Pruning duplicate Event entities: %{public}lu", buf, 0xCu);
    }

    -[SGSqlEntityStore deleteEntitiesByDuplicateKey:emitChangeNotifications:](self, "deleteEntitiesByDuplicateKey:emitChangeNotifications:", v13, 1);
  }

}

- (void)pruneNLEventEntitiesOlderThanTwoWeeks
{
  void *v3;
  double v4;
  double v5;

  v3 = (void *)objc_opt_new();
  objc_msgSend(v3, "timeIntervalSince1970");
  v5 = v4;

  -[SGSqlEntityStore pruneNLEventEntitiesOlderThan:](self, "pruneNLEventEntitiesOlderThan:", v5 + -1209600.0);
}

- (void)pruneReminders
{
  void *v3;
  void *v4;
  double v5;
  double v6;
  void *v7;
  SGSqliteDatabase *db;
  id v9;
  NSObject *v10;
  uint64_t v11;
  _QWORD v12[5];
  id v13;
  _QWORD v14[5];
  uint8_t buf[4];
  uint64_t v16;
  __int16 v17;
  id v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = (void *)objc_opt_new();
  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "timeIntervalSince1970");
  v6 = v5;

  -[SGSqlEntityStore selectEntityQuery:](self, "selectEntityQuery:", CFSTR("WHERE ((e.timeRangeEnd < :timeRangeEnd AND e.timeRangeEnd != 0) OR (e.timeRangeEnd == 0 AND e.creationTimestamp < :creationTimestamp)) AND e.entityType = :entityType"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  db = self->_db;
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = __44__SGSqlEntityStore_Deleting__pruneReminders__block_invoke;
  v14[3] = &__block_descriptor_40_e23_v16__0__sqlite3_stmt__8l;
  *(double *)&v14[4] = v6 + -604800.0;
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __44__SGSqlEntityStore_Deleting__pruneReminders__block_invoke_2;
  v12[3] = &unk_1E7DB53F8;
  v12[4] = self;
  v9 = v3;
  v13 = v9;
  -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](db, "prepAndRunQuery:onPrep:onRow:onError:", v7, v14, v12, 0);
  sgRemindersLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    v11 = objc_msgSend(v9, "count");
    *(_DWORD *)buf = 134218242;
    v16 = v11;
    v17 = 2112;
    v18 = v9;
    _os_log_impl(&dword_1C3607000, v10, OS_LOG_TYPE_INFO, "PseudoReminders to prune (%lu), %@", buf, 0x16u);
  }

  -[SGSqlEntityStore deleteEntitiesByDuplicateKey:emitChangeNotifications:](self, "deleteEntitiesByDuplicateKey:emitChangeNotifications:", v9, 1);
}

- (void)pruneNLEventEntitiesOlderThan:(SGUnixTimestamp_)a3
{
  int v5;
  NSObject *v6;
  _BOOL4 v7;
  void *v8;
  void *v9;
  void *v10;
  SGSqliteDatabase *db;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[6];
  _QWORD v16[5];
  uint8_t v17[4];
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  __int128 buf;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  void (*v24)(uint64_t);
  id v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v5 = objc_msgSend(MEMORY[0x1E0D198F0], "showPastEvents");
  sgLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    if (v7)
    {
      v8 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSince1970:", a3.secondsFromUnixEpoch);
      LODWORD(buf) = 138543362;
      *(_QWORD *)((char *)&buf + 4) = v8;
      _os_log_impl(&dword_1C3607000, v6, OS_LOG_TYPE_DEFAULT, "*** Not pruning NL Events older than %{public}@ because showPastEvents is enabled! ***", (uint8_t *)&buf, 0xCu);

    }
  }
  else
  {
    if (v7)
    {
      v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSince1970:", a3.secondsFromUnixEpoch);
      LODWORD(buf) = 138543362;
      *(_QWORD *)((char *)&buf + 4) = v9;
      _os_log_impl(&dword_1C3607000, v6, OS_LOG_TYPE_DEFAULT, "Pruning NL Events older than %{public}@", (uint8_t *)&buf, 0xCu);

    }
    *(_QWORD *)&buf = 0;
    *((_QWORD *)&buf + 1) = &buf;
    v22 = 0x3032000000;
    v23 = __Block_byref_object_copy__14015;
    v24 = __Block_byref_object_dispose__14016;
    v25 = 0;
    v25 = (id)objc_opt_new();
    -[SGSqlEntityStore selectEntityQuery:](self, "selectEntityQuery:", CFSTR("WHERE e.timeRangeEnd < :timeRangeEnd AND e.entityType = :entityType"));
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    db = self->_db;
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 3221225472;
    v16[2] = __60__SGSqlEntityStore_Deleting__pruneNLEventEntitiesOlderThan___block_invoke;
    v16[3] = &__block_descriptor_40_e23_v16__0__sqlite3_stmt__8l;
    v16[4] = *(SGUnixTimestamp_ *)&a3.secondsFromUnixEpoch;
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = __60__SGSqlEntityStore_Deleting__pruneNLEventEntitiesOlderThan___block_invoke_2;
    v15[3] = &unk_1E7DB6A98;
    v15[4] = self;
    v15[5] = &buf;
    -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](db, "prepAndRunQuery:onPrep:onRow:onError:", v10, v16, v15, 0);
    sgLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      v13 = objc_msgSend(*(id *)(*((_QWORD *)&buf + 1) + 40), "count");
      v14 = *(_QWORD *)(*((_QWORD *)&buf + 1) + 40);
      *(_DWORD *)v17 = 134218243;
      v18 = v13;
      v19 = 2113;
      v20 = v14;
      _os_log_impl(&dword_1C3607000, v12, OS_LOG_TYPE_DEFAULT, "NL Event entities to delete (%tu) %{private}@", v17, 0x16u);
    }

    -[SGSqlEntityStore deleteEntitiesByDuplicateKey:emitChangeNotifications:](self, "deleteEntitiesByDuplicateKey:emitChangeNotifications:", *(_QWORD *)(*((_QWORD *)&buf + 1) + 40), 1);
    _Block_object_dispose(&buf, 8);

  }
}

- (void)deleteMessages:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  NSObject *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint8_t buf[4];
  uint64_t v23;
  __int16 v24;
  void *v25;
  _BYTE v26[128];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  sgMap();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)objc_opt_new();
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  -[SGSqlEntityStore duplicateKeysMatchingAnyTag:](self, "duplicateKeysMatchingAnyTag:", v5, 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "allValues");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v18, v26, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v19;
    do
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)v19 != v11)
          objc_enumerationMutation(v8);
        objc_msgSend(*(id *)(*((_QWORD *)&v18 + 1) + 8 * v12), "allObjects");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "addObjectsFromArray:", v13);

        ++v12;
      }
      while (v10 != v12);
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v18, v26, 16);
    }
    while (v10);
  }

  objc_msgSend(v4, "allObjects");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "_pas_mappedArrayWithTransform:", &__block_literal_global_64);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v15, "count"))
  {
    sgLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      v17 = objc_msgSend(v15, "count");
      *(_DWORD *)buf = 134218242;
      v23 = v17;
      v24 = 2112;
      v25 = v15;
      _os_log_impl(&dword_1C3607000, v16, OS_LOG_TYPE_DEFAULT, "Deleting Mail Intelligence data for %tu messages (%@)", buf, 0x16u);
    }

    -[SGSqlEntityStore deleteMailIntelligenceForMessageIds:](self, "deleteMailIntelligenceForMessageIds:", v15);
  }
  -[SGSqlEntityStore deleteMessagesByDuplicateKey:](self, "deleteMessagesByDuplicateKey:", v6);

}

- (id)childrenFromParentKey:(id)a3
{
  id v4;
  void *v5;
  SGSqliteDatabase *db;
  void *v7;
  id v8;
  id v9;
  id v10;
  _QWORD v12[4];
  id v13;
  SGSqlEntityStore *v14;
  _QWORD v15[4];
  id v16;

  v4 = a3;
  v5 = (void *)objc_opt_new();
  db = self->_db;
  -[SGSqlEntityStore selectEntityQuery:](self, "selectEntityQuery:", CFSTR("WHERE parentKey = ?"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = __52__SGSqlEntityStore_Deleting__childrenFromParentKey___block_invoke;
  v15[3] = &unk_1E7DB7720;
  v16 = v4;
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __52__SGSqlEntityStore_Deleting__childrenFromParentKey___block_invoke_2;
  v12[3] = &unk_1E7DB53F8;
  v8 = v5;
  v13 = v8;
  v14 = self;
  v9 = v4;
  -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](db, "prepAndRunQuery:onPrep:onRow:onError:", v7, v15, v12, 0);

  v10 = v8;
  return v10;
}

- (void)_recordPseudoContactsWithDeletedDetailsInTable:(id)a3 deletedChildrenTable:(id)a4
{
  SGSqliteDatabase *db;
  objc_class *v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x1E0C80C00];
  db = self->_db;
  v7 = (objc_class *)MEMORY[0x1E0CB3940];
  v8 = a4;
  v9 = a3;
  v10 = (void *)objc_msgSend([v7 alloc], "initWithFormat:", CFSTR("DROP TABLE IF EXISTS %@"), v9);
  v15[0] = v10;
  v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("CREATE TEMP TABLE %@ (masterEntityId INTEGER PRIMARY KEY)"), v9);
  v15[1] = v11;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v15, 2);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  -[SGSqliteDatabase prepAndRunNonDataQueries:onError:](db, "prepAndRunNonDataQueries:onError:", v12, 0);

  v13 = objc_alloc(MEMORY[0x1E0CB3940]);
  v14 = (void *)objc_msgSend(v13, "initWithFormat:", CFSTR("INSERT OR IGNORE INTO %@ SELECT e.masterEntityId FROM %@ AS cr CROSS JOIN entity AS e ON e.id = cr.id WHERE e.entityType IN (:email, :phone, :address, :birthday, :socialProfile)   AND e.masterEntityId > 0   AND e.masterEntityId NOT IN (SELECT id FROM %@)"), v9, v8, v8, v15[0]);

  -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](self->_db, "prepAndRunQuery:onPrep:onRow:onError:", v14, &__block_literal_global_74_14115, 0, 0);
}

- (id)_deleteChildEntitiesByRecordIdsInTable:(id)a3
{
  id v4;
  void *v5;
  SGSqliteDatabase *db;
  void *v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  void *v17;
  SGSqliteDatabase *v18;
  SGSqliteDatabase *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  SGSqliteDatabase *v24;
  SGSqliteDatabase *v25;
  void *v26;
  id v27;
  _QWORD v29[5];
  _QWORD v30[5];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _QWORD v35[4];
  id v36;
  _QWORD v37[2];
  _BYTE v38[128];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)objc_opt_new();
  db = self->_db;
  v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("SELECT DISTINCT id FROM %@"), v4);
  v8 = MEMORY[0x1E0C809B0];
  v35[0] = MEMORY[0x1E0C809B0];
  v35[1] = 3221225472;
  v35[2] = __69__SGSqlEntityStore_Deleting___deleteChildEntitiesByRecordIdsInTable___block_invoke;
  v35[3] = &unk_1E7DB52C8;
  v9 = v5;
  v36 = v9;
  -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](db, "prepAndRunQuery:onPrep:onRow:onError:", v7, 0, v35, 0);

  -[SGSqlEntityStore _recordPseudoContactsWithDeletedDetailsInTable:deletedChildrenTable:](self, "_recordPseudoContactsWithDeletedDetailsInTable:deletedChildrenTable:", CFSTR("pseudoContactsWithDeletedDetails"), v4);
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v10 = v9;
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v31, v38, 16);
  if (v11)
  {
    v12 = v11;
    v13 = *(_QWORD *)v32;
    do
    {
      v14 = 0;
      do
      {
        if (*(_QWORD *)v32 != v13)
          objc_enumerationMutation(v10);
        -[SGSqlEntityStore deleteByRecordId:](self, "deleteByRecordId:", *(_QWORD *)(*((_QWORD *)&v31 + 1) + 8 * v14++));
      }
      while (v12 != v14);
      v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v31, v38, 16);
    }
    while (v12);
  }

  -[SGSqlEntityStore syncNewBlobsIfChanged](self, "syncNewBlobsIfChanged");
  v15 = objc_alloc(MEMORY[0x1E0CB3940]);
  -[SGSqlEntityStore columnQueryPrefixSelect](self, "columnQueryPrefixSelect");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = (void *)objc_msgSend(v15, "initWithFormat:", CFSTR("%@ FROM %@ AS c CROSS JOIN entity AS e ON c.id = e.id CROSS JOIN entityParentage AS ep ON e.id = ep.childId WHERE e.entityType = :pseudoevent OR e.entityType = :pseudoreminder"), v16, v4);

  v18 = self->_db;
  v30[0] = v8;
  v30[1] = 3221225472;
  v30[2] = __69__SGSqlEntityStore_Deleting___deleteChildEntitiesByRecordIdsInTable___block_invoke_3;
  v30[3] = &unk_1E7DB52C8;
  v30[4] = self;
  -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](v18, "prepAndRunQuery:onPrep:onRow:onError:", v17, &__block_literal_global_88, v30, 0);
  v19 = self->_db;
  v20 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("DELETE FROM entity WHERE id IN (SELECT id FROM %@)"), v4);
  v37[0] = v20;
  v21 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("DELETE FROM entity_fts WHERE docid IN (SELECT id FROM %@)"), v4);
  v37[1] = v21;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v37, 2);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  -[SGSqliteDatabase prepAndRunNonDataQueries:onError:](v19, "prepAndRunNonDataQueries:onError:", v22, 0);

  -[SGSqlEntityStore _deleteRemindersByRecordIds:](self, "_deleteRemindersByRecordIds:", v10);
  -[SGSqlEntityStore _deleteContactDetailsByRecordIds:](self, "_deleteContactDetailsByRecordIds:", v10);
  -[SGSqlEntityStore _deleteEventsByRecordIds:](self, "_deleteEventsByRecordIds:", v10);
  v23 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("SELECT masterEntityId FROM %@"), CFSTR("pseudoContactsWithDeletedDetails"));

  v24 = self->_db;
  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 3221225472;
  v29[2] = __69__SGSqlEntityStore_Deleting___deleteChildEntitiesByRecordIdsInTable___block_invoke_4;
  v29[3] = &unk_1E7DB52C8;
  v29[4] = self;
  -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](v24, "prepAndRunQuery:onPrep:onRow:onError:", v23, 0, v29, 0);
  v25 = self->_db;
  v26 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("DROP TABLE %@"), CFSTR("pseudoContactsWithDeletedDetails"));
  -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](v25, "prepAndRunQuery:onPrep:onRow:onError:", v26, 0, 0, 0);

  v27 = v10;
  return v27;
}

- (id)_derefChildrenOf:(id)a3
{
  id v4;
  void *v5;
  id v6;
  void *v7;
  SGSqliteDatabase *db;
  void *v9;
  void *v10;
  _QWORD v12[4];
  id v13;
  _QWORD v14[4];

  v14[3] = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (objc_msgSend(v4, "count"))
  {
    sgMapSelector();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __47__SGSqlEntityStore_Deleting___derefChildrenOf___block_invoke;
    v12[3] = &unk_1E7DB74A0;
    v13 = v5;
    v6 = v5;
    v7 = (void *)MEMORY[0x1C3BD5158](v12);
    -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](self->_db, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("DROP TABLE IF EXISTS childrenOfRemovedParents"), 0, 0, 0);
    -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](self->_db, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("CREATE TEMP TABLE childrenOfRemovedParents (id INTEGER PRIMARY KEY)"), 0, 0, 0);
    -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](self->_db, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("INSERT INTO childrenOfRemovedParents SELECT DISTINCT childId FROM entityParentage WHERE parentKey IN _pas_nsarray(:keys)"), v7, 0, 0);
    -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](self->_db, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("DROP TABLE IF EXISTS childrenWithRemainingParents"), 0, 0, 0);
    -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](self->_db, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("CREATE TEMP TABLE childrenWithRemainingParents (id INTEGER PRIMARY KEY)"), 0, 0, 0);
    -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](self->_db, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("INSERT INTO childrenWithRemainingParents SELECT DISTINCT cr.id FROM childrenOfRemovedParents AS cr CROSS JOIN entityParentage AS ep ON cr.id = ep.childId WHERE ep.parentKey NOT IN _pas_nsarray(:keys)"), v7, 0, 0);
    db = self->_db;
    v14[0] = CFSTR("DROP TABLE IF EXISTS childrenToRemove");
    v14[1] = CFSTR("CREATE TEMP TABLE childrenToRemove (id INTEGER PRIMARY KEY)");
    v14[2] = CFSTR("INSERT INTO childrenToRemove SELECT id FROM childrenOfRemovedParents      WHERE id NOT IN (SELECT id FROM childrenWithRemainingParents)");
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v14, 3);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[SGSqliteDatabase prepAndRunNonDataQueries:onError:](db, "prepAndRunNonDataQueries:onError:", v9, 0);

    -[SGSqlEntityStore _deleteChildEntitiesByRecordIdsInTable:](self, "_deleteChildEntitiesByRecordIdsInTable:", CFSTR("childrenToRemove"));
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](self->_db, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("DELETE FROM entityTags WHERE parentKey IN _pas_nsarray(:keys)"), v7, 0, 0);
    -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](self->_db, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("DELETE FROM entityParentage WHERE parentKey IN _pas_nsarray(:keys)"), v7, 0, 0);
    -[SGSqliteDatabase prepAndRunNonDataQueries:onError:](self->_db, "prepAndRunNonDataQueries:onError:", &unk_1E7E10848, 0);
    -[SGSqlEntityStore clearMasterEntityCache](self, "clearMasterEntityCache");

  }
  else
  {
    v10 = (void *)objc_opt_new();
  }

  return v10;
}

- (id)_deleteEntitiesByDuplicateKeyNoRecurse:(id)a3
{
  id v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  _QWORD v10[4];
  id v11;

  v4 = a3;
  if (objc_msgSend(v4, "count"))
  {
    sgMapSelector();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = __69__SGSqlEntityStore_Deleting___deleteEntitiesByDuplicateKeyNoRecurse___block_invoke;
    v10[3] = &unk_1E7DB74A0;
    v11 = v5;
    v6 = v5;
    v7 = (void *)MEMORY[0x1C3BD5158](v10);
    -[SGSqliteDatabase prepAndRunNonDataQueries:onError:](self->_db, "prepAndRunNonDataQueries:onError:", &unk_1E7E10860, 0);
    -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](self->_db, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("INSERT OR IGNORE INTO entitiesToRemove SELECT childId FROM entityParentage WHERE duplicateKeyHashBlob IN _pas_nsarray(:keys)"), v7, 0, 0);
    -[SGSqlEntityStore _deleteChildEntitiesByRecordIdsInTable:](self, "_deleteChildEntitiesByRecordIdsInTable:", CFSTR("entitiesToRemove"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](self->_db, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("DROP TABLE entitiesToRemove"), 0, 0, 0);
    -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](self->_db, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("DELETE FROM entityParentage WHERE duplicateKeyHashBlob IN _pas_nsarray(:keys)"), v7, 0, 0);
    -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](self->_db, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("DELETE FROM entityTags WHERE duplicateKeyHashBlob IN _pas_nsarray(:keys)"), v7, 0, 0);

  }
  else
  {
    v8 = (void *)objc_opt_new();
  }

  return v8;
}

- (void)_deleteRemindersByRecordIds:(id)a3
{
  void *v4;
  SGSqliteDatabase *db;
  uint64_t v6;
  id v7;
  SGSqliteDatabase *v8;
  id v9;
  id v10;
  _QWORD v11[4];
  id v12;
  _QWORD v13[4];
  id v14;

  v10 = a3;
  if (objc_msgSend(v10, "count"))
  {
    sgMap();
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    db = self->_db;
    v6 = MEMORY[0x1E0C809B0];
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = __58__SGSqlEntityStore_Deleting___deleteRemindersByRecordIds___block_invoke_2;
    v13[3] = &unk_1E7DB74A0;
    v7 = v4;
    v14 = v7;
    -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](db, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("DELETE FROM locations WHERE id IN (SELECT dueLocationId FROM reminders WHERE entityId IN _pas_nsarray(:recordIds))"), v13, 0, 0);
    v8 = self->_db;
    v11[0] = v6;
    v11[1] = 3221225472;
    v11[2] = __58__SGSqlEntityStore_Deleting___deleteRemindersByRecordIds___block_invoke_3;
    v11[3] = &unk_1E7DB74A0;
    v12 = v7;
    v9 = v7;
    -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](v8, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("DELETE FROM reminders WHERE entityId IN _pas_nsarray(:recordIds)"), v11, 0, 0);

  }
}

- (void)_deleteContactDetailsByRecordIds:(id)a3
{
  void *v4;
  SGSqliteDatabase *db;
  uint64_t v6;
  id v7;
  SGSqliteDatabase *v8;
  id v9;
  id v10;
  _QWORD v11[4];
  id v12;
  _QWORD v13[4];
  id v14;

  v10 = a3;
  if (objc_msgSend(v10, "count"))
  {
    sgMap();
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    db = self->_db;
    v6 = MEMORY[0x1E0C809B0];
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = __63__SGSqlEntityStore_Deleting___deleteContactDetailsByRecordIds___block_invoke_2;
    v13[3] = &unk_1E7DB74A0;
    v7 = v4;
    v14 = v7;
    -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](db, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("DELETE FROM extractionInfos WHERE id IN (SELECT extractionInfoId FROM contactDetails WHERE entityId IN _pas_nsarray(:recordIds))"), v13, 0, 0);
    v8 = self->_db;
    v11[0] = v6;
    v11[1] = 3221225472;
    v11[2] = __63__SGSqlEntityStore_Deleting___deleteContactDetailsByRecordIds___block_invoke_3;
    v11[3] = &unk_1E7DB74A0;
    v12 = v7;
    v9 = v7;
    -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](v8, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("DELETE FROM contactDetails WHERE entityId IN _pas_nsarray(:recordIds)"), v11, 0, 0);

  }
}

- (void)_deleteEventsByRecordIds:(id)a3
{
  void *v4;
  SGSqliteDatabase *db;
  uint64_t v6;
  id v7;
  SGSqliteDatabase *v8;
  id v9;
  SGSqliteDatabase *v10;
  id v11;
  id v12;
  _QWORD v13[4];
  id v14;
  _QWORD v15[4];
  id v16;
  _QWORD v17[4];
  id v18;

  v12 = a3;
  if (objc_msgSend(v12, "count"))
  {
    sgMap();
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    db = self->_db;
    v6 = MEMORY[0x1E0C809B0];
    v17[0] = MEMORY[0x1E0C809B0];
    v17[1] = 3221225472;
    v17[2] = __55__SGSqlEntityStore_Deleting___deleteEventsByRecordIds___block_invoke_2;
    v17[3] = &unk_1E7DB74A0;
    v7 = v4;
    v18 = v7;
    -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](db, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("DELETE FROM locations WHERE eventId IN (SELECT l2.eventId FROM locations AS l2 JOIN events AS e ON e.id = l2.eventId WHERE e.entityId IN _pas_nsarray(:recordIds))"), v17, 0, 0);

    v8 = self->_db;
    v15[0] = v6;
    v15[1] = 3221225472;
    v15[2] = __55__SGSqlEntityStore_Deleting___deleteEventsByRecordIds___block_invoke_3;
    v15[3] = &unk_1E7DB74A0;
    v9 = v7;
    v16 = v9;
    -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](v8, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("DELETE FROM eventTags AS et WHERE et.eventId IN (SELECT et2.eventId FROM eventTags AS et2 JOIN events AS e ON e.id = et2.eventId WHERE e.entityId IN _pas_nsarray(:recordIds))"), v15, 0, 0);

    v10 = self->_db;
    v13[0] = v6;
    v13[1] = 3221225472;
    v13[2] = __55__SGSqlEntityStore_Deleting___deleteEventsByRecordIds___block_invoke_4;
    v13[3] = &unk_1E7DB74A0;
    v14 = v9;
    v11 = v9;
    -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](v10, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("DELETE FROM events WHERE entityId IN _pas_nsarray(:recordIds)"), v13, 0, 0);

  }
}

- (id)_deleteMessageMetadataByDuplicateKeyNoRecurse:(id)a3
{
  id v4;
  SGSqliteDatabase *db;
  uint64_t v6;
  id v7;
  void *v8;
  void *v9;
  SGSqliteDatabase *v10;
  id v11;
  _QWORD v13[4];
  id v14;
  _QWORD v15[4];
  id v16;
  _QWORD v17[4];
  id v18;

  v4 = a3;
  if (objc_msgSend(v4, "count"))
  {
    db = self->_db;
    v6 = MEMORY[0x1E0C809B0];
    v17[0] = MEMORY[0x1E0C809B0];
    v17[1] = 3221225472;
    v17[2] = __76__SGSqlEntityStore_Deleting___deleteMessageMetadataByDuplicateKeyNoRecurse___block_invoke;
    v17[3] = &unk_1E7DB74A0;
    v18 = v4;
    -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](db, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("DELETE FROM entityParentage WHERE duplicateKeyHashBlob IN _pas_nsarray(:compositeHashes)"), v17, 0, 0);
    sgMap();
    v15[0] = v6;
    v15[1] = 3221225472;
    v15[2] = __76__SGSqlEntityStore_Deleting___deleteMessageMetadataByDuplicateKeyNoRecurse___block_invoke_4;
    v15[3] = &unk_1E7DB74A0;
    v16 = (id)objc_claimAutoreleasedReturnValue();
    v7 = v16;
    v8 = (void *)MEMORY[0x1C3BD5158](v15);
    -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](self->_db, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("DELETE FROM emailTags WHERE key IN _pas_nsarray(:keys)"), v8, 0, 0);
    v9 = (void *)objc_opt_new();
    v10 = self->_db;
    v13[0] = v6;
    v13[1] = 3221225472;
    v13[2] = __76__SGSqlEntityStore_Deleting___deleteMessageMetadataByDuplicateKeyNoRecurse___block_invoke_5;
    v13[3] = &unk_1E7DB6ED0;
    v11 = v9;
    v14 = v11;
    -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](v10, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("SELECT id FROM emailMetadata WHERE key IN _pas_nsarray(:keys)"), v8, v13, 0);
    -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](self->_db, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("DELETE FROM emailMetadata WHERE key IN _pas_nsarray(:keys)"), v8, 0, 0);

  }
  else
  {
    v11 = (id)objc_opt_new();
  }

  return v11;
}

- (void)deleteEntitiesByDuplicateKey:(id)a3 emitChangeNotifications:(BOOL)a4
{
  -[SGSqlEntityStore deleteEntitiesByDuplicateKey:preserveEventConfirmationHistory:emitChangeNotifications:](self, "deleteEntitiesByDuplicateKey:preserveEventConfirmationHistory:emitChangeNotifications:", a3, 1, a4);
}

- (void)deleteEntitiesByDuplicateKey:(id)a3 preserveEventConfirmationHistory:(BOOL)a4 emitChangeNotifications:(BOOL)a5
{
  NSObject *v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t j;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  SGSqliteDatabase *db;
  id v29;
  void *v30;
  id v31;
  uint64_t v32;
  char v33;
  char v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  _BOOL4 v40;
  uint64_t v41;
  id v42;
  id v43;
  SEL v44;
  _BOOL4 v45;
  id v46;
  SGSqlEntityStore *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _QWORD v52[4];
  id v53;
  SGSqlEntityStore *v54;
  id v55;
  id v56;
  _BYTE *v57;
  SEL v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint8_t v67[128];
  _BYTE buf[24];
  uint64_t (*v69)(uint64_t, uint64_t);
  void (*v70)(uint64_t);
  id v71;
  _BYTE v72[128];
  _BYTE v73[128];
  uint64_t v74;

  v45 = a5;
  v74 = *MEMORY[0x1E0C80C00];
  v46 = a3;
  if (objc_msgSend(v46, "count"))
  {
    v44 = a2;
    v47 = self;
    sgLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218243;
      *(_QWORD *)&buf[4] = objc_msgSend(v46, "count");
      *(_WORD *)&buf[12] = 2113;
      *(_QWORD *)&buf[14] = v46;
      _os_log_impl(&dword_1C3607000, v8, OS_LOG_TYPE_DEFAULT, "Deleting entities by duplicate key (duplicateKeys count = %tu): %{private}@", buf, 0x16u);
    }

    v9 = (void *)objc_opt_new();
    v10 = (void *)objc_opt_new();
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v11 = v46;
    v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v63, v73, 16);
    if (v12)
    {
      v13 = *(_QWORD *)v64;
      do
      {
        for (i = 0; i != v12; ++i)
        {
          if (*(_QWORD *)v64 != v13)
            objc_enumerationMutation(v11);
          v15 = *(void **)(*((_QWORD *)&v63 + 1) + 8 * i);
          objc_msgSend(v15, "parentKey");
          v16 = (void *)objc_claimAutoreleasedReturnValue();

          if (v16)
            v17 = v10;
          else
            v17 = v9;
          objc_msgSend(v17, "addObject:", v15);
        }
        v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v63, v73, 16);
      }
      while (v12);
    }

    if (!a4)
    {
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      v18 = v10;
      v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v59, v72, 16);
      if (v19)
      {
        v20 = *(_QWORD *)v60;
        do
        {
          for (j = 0; j != v19; ++j)
          {
            if (*(_QWORD *)v60 != v20)
              objc_enumerationMutation(v18);
            v22 = *(void **)(*((_QWORD *)&v59 + 1) + 8 * j);
            if (objc_msgSend(v22, "entityType") == 2)
            {
              -[SGSqlEntityStore loadEventByDuplicateKey:](v47, "loadEventByDuplicateKey:", v22);
              v23 = (void *)objc_claimAutoreleasedReturnValue();
              v24 = v23;
              if (v23)
              {
                objc_msgSend(v23, "convertToEvent:", v47);
                v25 = (void *)objc_claimAutoreleasedReturnValue();
                if (v25)
                {
                  +[SGSuggestHistory sharedSuggestHistory](SGSuggestHistory, "sharedSuggestHistory");
                  v26 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v26, "removeConfirmationHistoryForEvent:", v25);

                }
              }

            }
          }
          v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v59, v72, 16);
        }
        while (v19);
      }

    }
    v27 = (void *)objc_opt_new();
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x3032000000;
    v69 = __Block_byref_object_copy__14015;
    v70 = __Block_byref_object_dispose__14016;
    v71 = 0;
    db = v47->_db;
    v52[0] = MEMORY[0x1E0C809B0];
    v52[1] = 3221225472;
    v52[2] = __116__SGSqlEntityStore_Deleting__deleteEntitiesByDuplicateKey_preserveEventConfirmationHistory_emitChangeNotifications___block_invoke;
    v52[3] = &unk_1E7DAD0C0;
    v29 = v27;
    v53 = v29;
    v54 = v47;
    v43 = v10;
    v55 = v43;
    v42 = v9;
    v56 = v42;
    v57 = buf;
    v58 = v44;
    -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v52);
    -[SGSqlEntityStore kvCacheManager](v47, "kvCacheManager");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v30, "deleteValueByRecordIdSet:", v29);

    if (v45)
    {
      v50 = 0u;
      v51 = 0u;
      v48 = 0u;
      v49 = 0u;
      v31 = v11;
      v32 = objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", &v48, v67, 16);
      if (!v32)
      {

        goto LABEL_52;
      }
      v33 = 0;
      v34 = 0;
      v35 = 0;
      v36 = *(_QWORD *)v49;
LABEL_32:
      v37 = 0;
      while (1)
      {
        if (*(_QWORD *)v49 != v36)
          objc_enumerationMutation(v31);
        v38 = *(void **)(*((_QWORD *)&v48 + 1) + 8 * v37);
        objc_msgSend(v38, "parentKey");
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        v40 = v39 == 0;

        if (v40)
          break;
        v41 = objc_msgSend(v38, "entityType");
        if ((SGEntityTypeIsEvent() & 1) != 0)
        {
          v34 = 1;
        }
        else if ((SGEntityTypeIsContact() & 1) != 0)
        {
          v33 = 1;
        }
        else
        {
          v35 |= v41 == 22;
        }
        if (v32 == ++v37)
        {
          v32 = objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", &v48, v67, 16);
          if (v32)
            goto LABEL_32;

          if ((v34 & 1) == 0)
          {
LABEL_47:
            if ((v33 & 1) != 0)
              +[SGDNotificationBroadcaster emitContactDeleted:](SGDNotificationBroadcaster, "emitContactDeleted:", 0);
            if ((v35 & 1) != 0)
              +[SGDNotificationBroadcaster emitReminderDeleted:](SGDNotificationBroadcaster, "emitReminderDeleted:", 0);
            goto LABEL_52;
          }
LABEL_46:
          +[SGDNotificationBroadcaster emitEventDeleted:](SGDNotificationBroadcaster, "emitEventDeleted:", 0);
          goto LABEL_47;
        }
      }

      v35 = 1;
      v33 = 1;
      goto LABEL_46;
    }
LABEL_52:

    _Block_object_dispose(buf, 8);
  }

}

- (void)deleteMessagesByDuplicateKey:(id)a3
{
  id v4;
  uint64_t v5;

  v4 = a3;
  -[SGSqlEntityStore deleteEntitiesByDuplicateKey:emitChangeNotifications:](self, "deleteEntitiesByDuplicateKey:emitChangeNotifications:", v4, 1);
  v5 = objc_msgSend(v4, "count");

  +[SGAggregateLogging messagesDeleted:](SGAggregateLogging, "messagesDeleted:", v5);
}

- (void)deleteInteractionEntitiesExceedingLimit:(id)a3 withSuspensionHandler:(id)a4
{
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  SGSqliteDatabase *db;
  SGSqliteDatabase *v11;
  id v12;
  id v13;
  id v14;
  id v15;
  SGSqliteDatabase *v16;
  _QWORD v17[5];
  _QWORD v18[5];
  id v19;
  id v20;
  _QWORD v21[4];
  id v22;
  id v23;
  _QWORD v24[5];

  v6 = a3;
  v7 = a4;
  v8 = (void *)objc_opt_new();
  v9 = MEMORY[0x1E0C809B0];
  db = self->_db;
  v24[0] = MEMORY[0x1E0C809B0];
  v24[1] = 3221225472;
  v24[2] = __92__SGSqlEntityStore_Deleting__deleteInteractionEntitiesExceedingLimit_withSuspensionHandler___block_invoke;
  v24[3] = &unk_1E7DB56F0;
  v24[4] = self;
  -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v24);
  v11 = self->_db;
  v21[0] = v9;
  v21[1] = 3221225472;
  v21[2] = __92__SGSqlEntityStore_Deleting__deleteInteractionEntitiesExceedingLimit_withSuspensionHandler___block_invoke_3;
  v21[3] = &unk_1E7DB53F8;
  v12 = v6;
  v22 = v12;
  v23 = v8;
  v13 = v8;
  -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](v11, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("SELECT bundleId, count(*) FROM interactionsByBundleId GROUP BY bundleId"), 0, v21, 0);
  v18[0] = v9;
  v18[1] = 3221225472;
  v18[2] = __92__SGSqlEntityStore_Deleting__deleteInteractionEntitiesExceedingLimit_withSuspensionHandler___block_invoke_4;
  v18[3] = &unk_1E7DAD108;
  v18[4] = self;
  v19 = v12;
  v20 = v7;
  v14 = v7;
  v15 = v12;
  objc_msgSend(v13, "enumerateObjectsUsingBlock:", v18);
  v16 = self->_db;
  v17[0] = v9;
  v17[1] = 3221225472;
  v17[2] = __92__SGSqlEntityStore_Deleting__deleteInteractionEntitiesExceedingLimit_withSuspensionHandler___block_invoke_7;
  v17[3] = &unk_1E7DB56F0;
  v17[4] = self;
  -[SGSqliteDatabase writeTransaction:](v16, "writeTransaction:", v17);

}

- (void)deleteItemsWithEntityTag:(id)a3
{
  -[SGSqlEntityStore deleteItemsWithEntityTag:preserveEventConfirmationHistory:](self, "deleteItemsWithEntityTag:preserveEventConfirmationHistory:", a3, 1);
}

- (void)deleteItemsWithEntityTag:(id)a3 preserveEventConfirmationHistory:(BOOL)a4
{
  _BOOL8 v4;
  id v7;
  void *v8;
  SGSqliteDatabase *db;
  id v10;
  void *v11;
  void *v12;
  id v13;
  _QWORD v14[4];
  id v15;
  _QWORD v16[4];
  id v17;

  v4 = a4;
  v7 = a3;
  if (!v7)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore+Deleting.m"), 847, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("tag"));

  }
  if ((objc_msgSend(v7, "indexed") & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore+Deleting.m"), 848, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("tag.indexed"));

  }
  v8 = (void *)objc_opt_new();
  db = self->_db;
  v15 = v8;
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3221225472;
  v16[2] = __88__SGSqlEntityStore_Deleting__deleteItemsWithEntityTag_preserveEventConfirmationHistory___block_invoke;
  v16[3] = &unk_1E7DB74A0;
  v17 = v7;
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = __88__SGSqlEntityStore_Deleting__deleteItemsWithEntityTag_preserveEventConfirmationHistory___block_invoke_2;
  v14[3] = &unk_1E7DB6ED0;
  v10 = v8;
  v13 = v7;
  -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](db, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("SELECT entityKey, entityType, parentKey FROM entityTags WHERE tag = :tag"), v16, v14, 0);
  -[SGSqlEntityStore deleteEntitiesByDuplicateKey:preserveEventConfirmationHistory:emitChangeNotifications:](self, "deleteEntitiesByDuplicateKey:preserveEventConfirmationHistory:emitChangeNotifications:", v10, v4, 1);

}

- (void)deleteInteractionsWithBundleId:(id)a3
{
  id v5;
  void *v6;
  void *v7;
  id v8;

  v5 = a3;
  v8 = v5;
  if (!v5)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore+Deleting.m"), 868, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("bundleId"));

    v5 = 0;
  }
  objc_msgSend(MEMORY[0x1E0D197F0], "interactionBundleId:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[SGSqlEntityStore deleteItemsWithEntityTag:preserveEventConfirmationHistory:](self, "deleteItemsWithEntityTag:preserveEventConfirmationHistory:", v6, 0);

}

- (void)deleteInteractionsWithBundleId:(id)a3 identifiers:(id)a4
{
  id v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  v11 = a3;
  v7 = a4;
  if (!v11)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore+Deleting.m"), 874, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("bundleId"));

  }
  if (objc_msgSend(v7, "count"))
  {
    sgMap();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[SGSqlEntityStore duplicateKeysMatchingInteractionBundleId:andTags:](self, "duplicateKeysMatchingInteractionBundleId:andTags:", v11, v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[SGSqlEntityStore deleteEntitiesByDuplicateKey:preserveEventConfirmationHistory:emitChangeNotifications:](self, "deleteEntitiesByDuplicateKey:preserveEventConfirmationHistory:emitChangeNotifications:", v9, 0, 1);

  }
}

- (void)deleteInteractionsWithBundleId:(id)a3 groupIdentifiers:(id)a4
{
  id v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  v11 = a3;
  v7 = a4;
  if (!v11)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore+Deleting.m"), 887, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("bundleId"));

  }
  if (objc_msgSend(v7, "count"))
  {
    sgMap();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[SGSqlEntityStore duplicateKeysMatchingInteractionBundleId:andTags:](self, "duplicateKeysMatchingInteractionBundleId:andTags:", v11, v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[SGSqlEntityStore deleteEntitiesByDuplicateKey:preserveEventConfirmationHistory:emitChangeNotifications:](self, "deleteEntitiesByDuplicateKey:preserveEventConfirmationHistory:emitChangeNotifications:", v9, 0, 1);

  }
}

uint64_t __78__SGSqlEntityStore_Deleting__deleteInteractionsWithBundleId_groupIdentifiers___block_invoke(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(MEMORY[0x1E0D197F0], "interactionGroupId:", a2);
}

uint64_t __73__SGSqlEntityStore_Deleting__deleteInteractionsWithBundleId_identifiers___block_invoke(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(MEMORY[0x1E0D197F0], "interactionId:", a2);
}

void __88__SGSqlEntityStore_Deleting__deleteItemsWithEntityTag_preserveEventConfirmationHistory___block_invoke(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  id v4;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  objc_msgSend(v2, "name");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "bindNamedParam:toNonnullNSString:", ":tag", v4);

}

uint64_t __88__SGSqlEntityStore_Deleting__deleteItemsWithEntityTag_preserveEventConfirmationHistory___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  SGDuplicateKey *v7;
  unsigned __int8 *v8;

  v3 = a2;
  objc_msgSend(v3, "nonnullNSStringForColumnName:table:", "entityKey", 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v3, "getInt64ForColumnName:table:", "entityType", 0);
  objc_msgSend(v3, "getNSStringForColumnName:table:", "parentKey", 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v7 = -[SGDuplicateKey initWithSerializedEntityKey:entityType:serializedParentKey:]([SGDuplicateKey alloc], "initWithSerializedEntityKey:entityType:serializedParentKey:", v4, v5, v6);
  objc_msgSend(*(id *)(a1 + 32), "addObject:", v7);
  v8 = (unsigned __int8 *)MEMORY[0x1E0D81780];

  return *v8;
}

uint64_t __92__SGSqlEntityStore_Deleting__deleteInteractionEntitiesExceedingLimit_withSuspensionHandler___block_invoke(uint64_t a1)
{
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "prepAndRunNonDataQueries:onError:", &unk_1E7E10878, 0);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("INSERT INTO interactionsByBundleId   SELECT delimitedString(key, 0),          CASE WHEN updateTimestamp > 0 THEN updateTimestamp              WHEN creationTimestamp > 0 THEN creationTimestamp              ELSE lastSeenTimestamp END,         key  FROM emailMetaData  WHERE type = ?"), &__block_literal_global_201_14007, 0, 0);
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "prepAndRunNonDataQueries:onError:", &unk_1E7E10890, 0);
}

uint64_t __92__SGSqlEntityStore_Deleting__deleteInteractionEntitiesExceedingLimit_withSuspensionHandler___block_invoke_3(uint64_t a1, sqlite3_stmt *a2)
{
  void *v4;
  int v5;

  sqlite3_column_nsstring(a2, 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = sqlite3_column_int(a2, 1);
  if (v4 && v5 > (int)objc_msgSend(*(id *)(a1 + 32), "intValue"))
    objc_msgSend(*(id *)(a1 + 40), "addObject:", v4);

  return 0;
}

void __92__SGSqlEntityStore_Deleting__deleteInteractionEntitiesExceedingLimit_withSuspensionHandler___block_invoke_4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  _QWORD v14[4];
  id v15;
  _QWORD v16[4];
  id v17;
  id v18;

  v3 = a2;
  v4 = (void *)objc_opt_new();
  v5 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v6 = MEMORY[0x1E0C809B0];
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3221225472;
  v16[2] = __92__SGSqlEntityStore_Deleting__deleteInteractionEntitiesExceedingLimit_withSuspensionHandler___block_invoke_5;
  v16[3] = &unk_1E7DB6E80;
  v13 = v3;
  v17 = v13;
  v18 = *(id *)(a1 + 40);
  v14[0] = v6;
  v14[1] = 3221225472;
  v14[2] = __92__SGSqlEntityStore_Deleting__deleteInteractionEntitiesExceedingLimit_withSuspensionHandler___block_invoke_6;
  v14[3] = &unk_1E7DB6ED0;
  v7 = v4;
  v15 = v7;
  objc_msgSend(v5, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("SELECT key FROM interactionsByBundleId WHERE bundleId = :bundleID ORDER BY timestamp DESC LIMIT -1 OFFSET :limit"), v16, v14, 0);
  objc_msgSend(*(id *)(a1 + 32), "deleteEntitiesByDuplicateKey:emitChangeNotifications:", v7, 1);
  v12 = *(_QWORD *)(a1 + 48);
  if (v12)
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 16))(v12, v8, v9, v10, v11);

}

uint64_t __92__SGSqlEntityStore_Deleting__deleteInteractionEntitiesExceedingLimit_withSuspensionHandler___block_invoke_7(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "prepAndRunNonDataQueries:onError:", &unk_1E7E108A8, 0);
}

void __92__SGSqlEntityStore_Deleting__deleteInteractionEntitiesExceedingLimit_withSuspensionHandler___block_invoke_5(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = a2;
  objc_msgSend(v4, "bindNamedParam:toNonnullNSString:", ":bundleID", v3);
  objc_msgSend(v4, "bindNamedParam:toInt64AsNonnullNSNumber:", ":limit", *(_QWORD *)(a1 + 40));

}

uint64_t __92__SGSqlEntityStore_Deleting__deleteInteractionEntitiesExceedingLimit_withSuspensionHandler___block_invoke_6(uint64_t a1, void *a2)
{
  void *v3;
  SGDuplicateKey *v4;
  unsigned __int8 *v5;

  objc_msgSend(a2, "nonnullNSStringForColumnName:table:", "key", 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = -[SGDuplicateKey initWithSerializedEntityKey:entityType:serializedParentKey:]([SGDuplicateKey alloc], "initWithSerializedEntityKey:entityType:serializedParentKey:", v3, 16, 0);
  objc_msgSend(*(id *)(a1 + 32), "addObject:", v4);
  v5 = (unsigned __int8 *)MEMORY[0x1E0D81780];

  return *v5;
}

uint64_t __92__SGSqlEntityStore_Deleting__deleteInteractionEntitiesExceedingLimit_withSuspensionHandler___block_invoke_2(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "bindParam:toInt64:", 1, 16);
}

void __116__SGSqlEntityStore_Deleting__deleteEntitiesByDuplicateKey_preserveEventConfirmationHistory_emitChangeNotifications___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *(void **)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 40), "_deleteEntitiesByDuplicateKeyNoRecurse:", *(_QWORD *)(a1 + 48));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "unionSet:", v3);

  v4 = *(void **)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 40), "_derefChildrenOf:", *(_QWORD *)(a1 + 56));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "unionSet:", v5);

  objc_msgSend(*(id *)(a1 + 40), "_deleteMessageMetadataByDuplicateKeyNoRecurse:", *(_QWORD *)(a1 + 56));
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v6;

  v9 = MEMORY[0x1E0C809B0];
  v15 = MEMORY[0x1E0C809B0];
  v16 = *(_QWORD *)(a1 + 40);
  v17 = *(_QWORD *)(a1 + 72);
  sgMap();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "removeSnippetsForEntities:", v10);
  v12 = v9;
  v13 = *(_QWORD *)(a1 + 40);
  v14 = *(_QWORD *)(a1 + 72);
  sgMap();
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(*(id *)(a1 + 40), "_removeSnippetsForEmails:", v11, v12, 3221225472, __116__SGSqlEntityStore_Deleting__deleteEntitiesByDuplicateKey_preserveEventConfirmationHistory_emitChangeNotifications___block_invoke_3, &unk_1E7DAD098, v13, v14, v15, 3221225472, __116__SGSqlEntityStore_Deleting__deleteEntitiesByDuplicateKey_preserveEventConfirmationHistory_emitChangeNotifications___block_invoke_2, &unk_1E7DAD098, v16, v17);
}

id __116__SGSqlEntityStore_Deleting__deleteEntitiesByDuplicateKey_preserveEventConfirmationHistory_emitChangeNotifications___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v6;

  v3 = a2;
  if (objc_msgSend(v3, "tableId"))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "handleFailureInMethod:object:file:lineNumber:description:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), CFSTR("SGSqlEntityStore+Deleting.m"), 727, CFSTR("Unexpected tableId for record: %@"), v3);

  }
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", objc_msgSend(v3, "rowId"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

id __116__SGSqlEntityStore_Deleting__deleteEntitiesByDuplicateKey_preserveEventConfirmationHistory_emitChangeNotifications___block_invoke_3(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v6;

  v3 = a2;
  if (objc_msgSend(v3, "tableId") != 1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "handleFailureInMethod:object:file:lineNumber:description:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), CFSTR("SGSqlEntityStore+Deleting.m"), 734, CFSTR("Unexpected tableId for record: %@"), v3);

  }
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", objc_msgSend(v3, "rowId"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

void __76__SGSqlEntityStore_Deleting___deleteMessageMetadataByDuplicateKeyNoRecurse___block_invoke(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  id v4;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  objc_msgSend(v2, "_pas_proxyArrayWithMapping:", &__block_literal_global_176);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "bindNamedParam:toNSArray:", ":compositeHashes", v4);

}

uint64_t __76__SGSqlEntityStore_Deleting___deleteMessageMetadataByDuplicateKeyNoRecurse___block_invoke_4(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "bindNamedParam:toNSArray:", ":keys", *(_QWORD *)(a1 + 32));
}

uint64_t __76__SGSqlEntityStore_Deleting___deleteMessageMetadataByDuplicateKeyNoRecurse___block_invoke_5(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 32);
  objc_msgSend(MEMORY[0x1E0D19920], "recordIdForEmailWithRowId:", objc_msgSend(a2, "getInt64ForColumnName:table:", "id", "emailMetadata"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "addObject:", v3);

  return 0;
}

id __76__SGSqlEntityStore_Deleting___deleteMessageMetadataByDuplicateKeyNoRecurse___block_invoke_3(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;

  objc_msgSend(a2, "messageKey");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "serialize");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

uint64_t __76__SGSqlEntityStore_Deleting___deleteMessageMetadataByDuplicateKeyNoRecurse___block_invoke_2(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "compositeHash");
}

uint64_t __55__SGSqlEntityStore_Deleting___deleteEventsByRecordIds___block_invoke_2(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "bindNamedParam:toNSArray:", ":recordIds", *(_QWORD *)(a1 + 32));
}

uint64_t __55__SGSqlEntityStore_Deleting___deleteEventsByRecordIds___block_invoke_3(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "bindNamedParam:toNSArray:", ":recordIds", *(_QWORD *)(a1 + 32));
}

uint64_t __55__SGSqlEntityStore_Deleting___deleteEventsByRecordIds___block_invoke_4(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "bindNamedParam:toNSArray:", ":recordIds", *(_QWORD *)(a1 + 32));
}

uint64_t __55__SGSqlEntityStore_Deleting___deleteEventsByRecordIds___block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", objc_msgSend(a2, "numericValue"));
}

uint64_t __63__SGSqlEntityStore_Deleting___deleteContactDetailsByRecordIds___block_invoke_2(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "bindNamedParam:toNSArray:", ":recordIds", *(_QWORD *)(a1 + 32));
}

uint64_t __63__SGSqlEntityStore_Deleting___deleteContactDetailsByRecordIds___block_invoke_3(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "bindNamedParam:toNSArray:", ":recordIds", *(_QWORD *)(a1 + 32));
}

uint64_t __63__SGSqlEntityStore_Deleting___deleteContactDetailsByRecordIds___block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", objc_msgSend(a2, "numericValue"));
}

uint64_t __58__SGSqlEntityStore_Deleting___deleteRemindersByRecordIds___block_invoke_2(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "bindNamedParam:toNSArray:", ":recordIds", *(_QWORD *)(a1 + 32));
}

uint64_t __58__SGSqlEntityStore_Deleting___deleteRemindersByRecordIds___block_invoke_3(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "bindNamedParam:toNSArray:", ":recordIds", *(_QWORD *)(a1 + 32));
}

uint64_t __58__SGSqlEntityStore_Deleting___deleteRemindersByRecordIds___block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", objc_msgSend(a2, "numericValue"));
}

uint64_t __69__SGSqlEntityStore_Deleting___deleteEntitiesByDuplicateKeyNoRecurse___block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "bindNamedParam:toNSArray:", ":keys", *(_QWORD *)(a1 + 32));
}

uint64_t __47__SGSqlEntityStore_Deleting___derefChildrenOf___block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "bindNamedParam:toNSArray:", ":keys", *(_QWORD *)(a1 + 32));
}

uint64_t __69__SGSqlEntityStore_Deleting___deleteChildEntitiesByRecordIdsInTable___block_invoke(uint64_t a1, sqlite3_stmt *a2)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 32);
  objc_msgSend(MEMORY[0x1E0D19920], "recordIdWithTableId:rowId:", 0, sqlite3_column_int64(a2, 0));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "addObject:", v3);

  return 0;
}

uint64_t __69__SGSqlEntityStore_Deleting___deleteChildEntitiesByRecordIdsInTable___block_invoke_3(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  SGJournalEntry *v8;
  void *v9;
  uint64_t v10;
  SGJournalEntry *v11;

  objc_msgSend(*(id *)(a1 + 32), "entityFromSqlResult:withSnippets:", a2, 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "duplicateKey");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "entityType");

  if (v5 == 2)
  {
    +[SGStorageEvent storageEventFromEntity:](SGStorageEvent, "storageEventFromEntity:", v3);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = *(void **)(*(_QWORD *)(a1 + 32) + 120);
    v8 = -[SGJournalEntry initWithOperation:event:]([SGJournalEntry alloc], "initWithOperation:event:", 10, v6);
LABEL_5:
    v11 = v8;
    objc_msgSend(v7, "addEntry:", v8);

    goto LABEL_6;
  }
  objc_msgSend(v3, "duplicateKey");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "entityType");

  if (v10 == 22)
  {
    +[SGStorageReminder storageReminderFromEntity:store:](SGStorageReminder, "storageReminderFromEntity:store:", v3, *(_QWORD *)(a1 + 32));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = *(void **)(*(_QWORD *)(a1 + 32) + 120);
    v8 = -[SGJournalEntry initWithOperation:reminder:]([SGJournalEntry alloc], "initWithOperation:reminder:", 21, v6);
    goto LABEL_5;
  }
LABEL_6:

  return 0;
}

uint64_t __69__SGSqlEntityStore_Deleting___deleteChildEntitiesByRecordIdsInTable___block_invoke_4(uint64_t a1, sqlite3_stmt *a2)
{
  objc_msgSend(*(id *)(a1 + 32), "selectAuthoritativeDetailsForContactWithId:", sqlite3_column_int64(a2, 0));
  return 0;
}

uint64_t __69__SGSqlEntityStore_Deleting___deleteChildEntitiesByRecordIdsInTable___block_invoke_2(uint64_t a1, uint64_t a2)
{
  +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":pseudoevent", 2);
  return +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":pseudoreminder", 22);
}

uint64_t __98__SGSqlEntityStore_Deleting___recordPseudoContactsWithDeletedDetailsInTable_deletedChildrenTable___block_invoke(uint64_t a1, uint64_t a2)
{
  +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":email", 8);
  +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":phone", 6);
  +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":address", 7);
  +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":birthday", 20);
  return +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":socialProfile", 19);
}

void __52__SGSqlEntityStore_Deleting__childrenFromParentKey___block_invoke(uint64_t a1, sqlite3_stmt *a2)
{
  id v3;

  objc_msgSend(*(id *)(a1 + 32), "serialize");
  v3 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  sqlite3_bind_text(a2, 1, (const char *)objc_msgSend(v3, "UTF8String"), -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);

}

uint64_t __52__SGSqlEntityStore_Deleting__childrenFromParentKey___block_invoke_2(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 40), "entityFromSqlResult:", a2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "addObject:", v3);

  return 0;
}

uint64_t __45__SGSqlEntityStore_Deleting__deleteMessages___block_invoke_2(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "messageId");
}

uint64_t __45__SGSqlEntityStore_Deleting__deleteMessages___block_invoke(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(MEMORY[0x1E0D197F0], "messageWithEmailKey:", a2);
}

uint64_t __60__SGSqlEntityStore_Deleting__pruneNLEventEntitiesOlderThan___block_invoke(uint64_t a1, uint64_t a2)
{
  +[SGSqliteDatabase bindParam:name:double:](SGSqliteDatabase, "bindParam:name:double:", a2, ":timeRangeEnd", *(double *)(a1 + 32));
  return +[SGSqliteDatabase bindParam:name:int:](SGSqliteDatabase, "bindParam:name:int:", a2, ":entityType", 2);
}

uint64_t __60__SGSqlEntityStore_Deleting__pruneNLEventEntitiesOlderThan___block_invoke_2(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  unint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  objc_msgSend(*(id *)(a1 + 32), "entityFromSqlResult:withSnippets:", a2, 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v3, "isNaturalLanguageEvent"))
  {
    v4 = *(void **)(a1 + 32);
    objc_msgSend(v3, "duplicateKey");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "parentKey");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "childrenFromParentKey:", v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "count");

    v9 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    objc_msgSend(v3, "duplicateKey");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = v10;
    if (v8 < 2)
    {
      objc_msgSend(v10, "parentKey");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "addObject:", v12);

    }
    else
    {
      objc_msgSend(v9, "addObject:", v10);
    }

  }
  return 0;
}

uint64_t __44__SGSqlEntityStore_Deleting__pruneReminders__block_invoke(uint64_t a1, uint64_t a2)
{
  +[SGSqliteDatabase bindParam:name:double:](SGSqliteDatabase, "bindParam:name:double:", a2, ":timeRangeEnd", *(double *)(a1 + 32));
  +[SGSqliteDatabase bindParam:name:double:](SGSqliteDatabase, "bindParam:name:double:", a2, ":creationTimestamp", *(double *)(a1 + 32));
  return +[SGSqliteDatabase bindParam:name:int:](SGSqliteDatabase, "bindParam:name:int:", a2, ":entityType", 22);
}

uint64_t __44__SGSqlEntityStore_Deleting__pruneReminders__block_invoke_2(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  unint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  objc_msgSend(*(id *)(a1 + 32), "entityFromSqlResult:withSnippets:", a2, 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = *(void **)(a1 + 32);
  objc_msgSend(v3, "duplicateKey");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "parentKey");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "childrenFromParentKey:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "count");

  v9 = *(void **)(a1 + 40);
  objc_msgSend(v3, "duplicateKey");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = v10;
  if (v8 < 2)
  {
    objc_msgSend(v10, "parentKey");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "addObject:", v12);

  }
  else
  {
    objc_msgSend(v9, "addObject:", v10);
  }

  return 0;
}

uint64_t __61__SGSqlEntityStore_Deleting__pruneDuplicateEventExtractions___block_invoke_2(uint64_t a1, void *a2)
{
  void *v3;
  unsigned __int8 *v4;

  objc_msgSend(a2, "nonnullNSStringForColumnName:table:", "entityKey", 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "addObject:", v3);
  v4 = (unsigned __int8 *)MEMORY[0x1E0D81780];

  return *v4;
}

void __61__SGSqlEntityStore_Deleting__pruneDuplicateEventExtractions___block_invoke_3(uint64_t a1, void *a2)
{
  uint64_t v2;
  id v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = a2;
  objc_msgSend(v3, "bindNamedParam:toNSArray:", ":candidateEntityKeys", v2);
  objc_msgSend(v3, "bindNamedParam:toInteger:", ":entityType", 2);

}

uint64_t __61__SGSqlEntityStore_Deleting__pruneDuplicateEventExtractions___block_invoke_4(uint64_t a1, id a2)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t i;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  int v18;
  NSObject *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v26;
  id obj;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint8_t buf[4];
  void *v33;
  _BYTE v34[128];
  uint64_t v35;

  v2 = a1;
  v35 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "entityFromSqlResult:withSnippets:", objc_msgSend(objc_retainAutorelease(a2), "stmt"), 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "duplicateKey");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "parentKey");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v5, "entityType") == 18)
  {

  }
  else
  {
    objc_msgSend(v3, "duplicateKey");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "parentKey");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "entityType");

    if (v8 != 16)
      goto LABEL_18;
  }
  objc_msgSend(*(id *)(v2 + 40), "eventsWithSameOpaqueKeyAsPseudoEvent:harvestStore:", v3, *(_QWORD *)(v2 + 32));
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  obj = (id)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v28, v34, 16);
  if (!v9)
    goto LABEL_16;
  v10 = v9;
  v26 = v2;
  v11 = *(_QWORD *)v29;
  v12 = 1;
  do
  {
    for (i = 0; i != v10; ++i)
    {
      if (*(_QWORD *)v29 != v11)
        objc_enumerationMutation(obj);
      objc_msgSend(*(id *)(*((_QWORD *)&v28 + 1) + 8 * i), "suggestionInfo");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "uniqueKey");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "duplicateKey");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "serialize");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = objc_msgSend(v15, "isEqualToString:", v17);

      if (v18)
      {
        sgLogHandle();
        v19 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
        {
          objc_msgSend(v3, "duplicateKey");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v20, "serialize");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412290;
          v33 = v21;
          _os_log_debug_impl(&dword_1C3607000, v19, OS_LOG_TYPE_DEBUG, "web-page event entity exists on calendar, don't delete: %@", buf, 0xCu);

        }
        v12 = 0;
      }
    }
    v10 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v28, v34, 16);
  }
  while (v10);
  v2 = v26;
  if ((v12 & 1) != 0)
  {
LABEL_16:
    v22 = *(void **)(v2 + 48);
    objc_msgSend(v3, "duplicateKey");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "parentKey");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "addObject:", v24);

  }
LABEL_18:

  return *MEMORY[0x1E0D81780];
}

uint64_t __61__SGSqlEntityStore_Deleting__pruneDuplicateEventExtractions___block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "bindNamedParam:toInteger:", ":entityType", 2);
}

void __66__SGSqlEntityStore_Deleting__deleteMailIntelligenceForMessageIds___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  _QWORD v10[4];
  id v11;
  _QWORD v12[4];
  id v13;
  _QWORD v14[4];
  id v15;

  v2 = (void *)objc_opt_new();
  v3 = *(void **)(a1 + 40);
  v4 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v5 = MEMORY[0x1E0C809B0];
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = __66__SGSqlEntityStore_Deleting__deleteMailIntelligenceForMessageIds___block_invoke_2;
  v14[3] = &unk_1E7DB74A0;
  v15 = v3;
  v12[0] = v5;
  v12[1] = 3221225472;
  v12[2] = __66__SGSqlEntityStore_Deleting__deleteMailIntelligenceForMessageIds___block_invoke_3;
  v12[3] = &unk_1E7DB6ED0;
  v13 = v2;
  v9 = v2;
  objc_msgSend(v4, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("DELETE FROM mailIntelligence_saliency WHERE messageId IN _pas_nsarray(:messageIds) RETURNING creationTimestamp"), v14, v12, 0);
  objc_msgSend(*(id *)(a1 + 32), "sgmiFeatureStore");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "clearBucketsForDates:", v9);

  v7 = *(void **)(a1 + 40);
  v8 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v10[0] = v5;
  v10[1] = 3221225472;
  v10[2] = __66__SGSqlEntityStore_Deleting__deleteMailIntelligenceForMessageIds___block_invoke_4;
  v10[3] = &unk_1E7DB74A0;
  v11 = v7;
  objc_msgSend(v8, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("DELETE FROM mailIntelligence_spotlightMapping WHERE messageId IN _pas_nsarray(:messageIds)"), v10, 0, 0);

}

uint64_t __66__SGSqlEntityStore_Deleting__deleteMailIntelligenceForMessageIds___block_invoke_2(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "bindNamedParam:toNSArray:", ":messageIds", *(_QWORD *)(a1 + 32));
}

uint64_t __66__SGSqlEntityStore_Deleting__deleteMailIntelligenceForMessageIds___block_invoke_3(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;

  objc_msgSend(a2, "getDoubleForColumnName:table:", "creationTimestamp", "mailIntelligence_saliency");
  v3 = *(void **)(a1 + 32);
  objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "addObject:", v4);

  return *MEMORY[0x1E0D81780];
}

uint64_t __66__SGSqlEntityStore_Deleting__deleteMailIntelligenceForMessageIds___block_invoke_4(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "bindNamedParam:toNSArray:", ":messageIds", *(_QWORD *)(a1 + 32));
}

uint64_t __89__SGSqlEntityStore_Deleting__pruneMailIntelligenceOlderThanOneYearWithSuspensionHandler___block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "bindNamedParam:toDouble:", ":time", *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 32));
}

uint64_t __89__SGSqlEntityStore_Deleting__pruneMailIntelligenceOlderThanOneYearWithSuspensionHandler___block_invoke_2(uint64_t a1, void *a2)
{
  void *v3;
  unint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;

  objc_msgSend(a2, "nonnullNSStringForColumnName:table:", "messageId", 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "addObject:", v3);
  v4 = objc_msgSend(*(id *)(a1 + 32), "count");
  v5 = *(_QWORD *)(a1 + 40);
  v6 = (unsigned __int8 *)MEMORY[0x1E0D81780];
  v7 = (unsigned __int8 *)MEMORY[0x1E0D81788];

  if (v4 >= v5)
    v8 = v7;
  else
    v8 = v6;
  return *v8;
}

void __81__SGSqlEntityStore_Deleting__pruneEntitiesOlderThan_suspensionHandler_batchSize___block_invoke(double *a1, void *a2)
{
  double v3;
  id v4;

  v3 = a1[5];
  v4 = a2;
  objc_msgSend(v4, "bindNamedParam:toDouble:", ":time", v3);
  objc_msgSend(v4, "bindNamedParam:toInt64:", ":minId", *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 4) + 8) + 24));
  objc_msgSend(v4, "bindNamedParam:toInt64:", ":limit", *((_QWORD *)a1 + 6));

}

uint64_t __81__SGSqlEntityStore_Deleting__pruneEntitiesOlderThan_suspensionHandler_batchSize___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  SGDuplicateKey *v6;

  v3 = a2;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(v3, "getInt64ForColumnAlias:", "minId");
  objc_msgSend(v3, "nonnullNSStringForColumnName:table:", "key", 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  v5 = *(void **)(a1 + 32);
  v6 = -[SGDuplicateKey initWithSerializedEntityKey:entityType:serializedParentKey:]([SGDuplicateKey alloc], "initWithSerializedEntityKey:entityType:serializedParentKey:", v4, 5, 0);
  objc_msgSend(v5, "addObject:", v6);

  return 0;
}

- (id)naiveBayesModelQueryResultForFeature:(int64_t)a3 unigramTokens:(id)a4 bigramTokens:(id)a5
{
  id v8;
  id v9;
  void *v10;
  void *v11;

  v8 = a5;
  v9 = a4;
  -[SGSqlEntityStore sgmiFeatureStore](self, "sgmiFeatureStore");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "naiveBayesModelQueryResultForFeature:unigramTokens:bigramTokens:", a3, v9, v8);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  return v11;
}

- (id)highlyDiscriminantTokensForFeature:(int64_t)a3 minCount:(unint64_t)a4 minRatio:(double)a5
{
  void *v8;
  void *v9;

  -[SGSqlEntityStore sgmiFeatureStore](self, "sgmiFeatureStore");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "highlyDiscriminantTokensForFeature:minCount:minRatio:", a3, a4, a5);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  return v9;
}

- (void)deleteNaiveBayesModelForProbabilityFeatureName:(int64_t)a3
{
  id v4;

  -[SGSqlEntityStore sgmiFeatureStore](self, "sgmiFeatureStore");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "deleteNaiveBayesModelForProbabilityFeatureName:", a3);

}

- (void)commitNaiveBayesModel:(id)a3 probabilityFeatureName:(int64_t)a4
{
  void *v6;
  id v7;
  id v8;

  v6 = (void *)MEMORY[0x1E0C99D68];
  v7 = a3;
  objc_msgSend(v6, "date");
  v8 = (id)objc_claimAutoreleasedReturnValue();
  -[SGSqlEntityStore commitNaiveBayesModel:probabilityFeatureName:updateDate:](self, "commitNaiveBayesModel:probabilityFeatureName:updateDate:", v7, a4, v8);

}

- (void)commitNaiveBayesModel:(id)a3 probabilityFeatureName:(int64_t)a4 updateDate:(id)a5
{
  id v8;
  id v9;
  id v10;

  v8 = a5;
  v9 = a3;
  -[SGSqlEntityStore sgmiFeatureStore](self, "sgmiFeatureStore");
  v10 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "commitNaiveBayesModel:probabilityFeatureName:updateDate:", v9, a4, v8);

}

- (void)preventUnsubscriptionOpportunitiesSuggestionsForField:(int64_t)a3 toValues:(id)a4
{
  id v6;
  id v7;

  v6 = a4;
  -[SGSqlEntityStore sgmiFeatureStore](self, "sgmiFeatureStore");
  v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setUnsubscriptionOpportunitiesSuggestionsDenyListForField:toValues:", a3, v6);

}

- (id)getUnsubscriptionOpportunitiesSuggestionsDenyListForField:(int64_t)a3
{
  void *v4;
  void *v5;

  -[SGSqlEntityStore sgmiFeatureStore](self, "sgmiFeatureStore");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "getUnsubscriptionOpportunitiesSuggestionsDenyListForField:", a3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

- (BOOL)areSubModelsEmpty
{
  void *v2;
  char v3;

  -[SGSqlEntityStore sgmiFeatureStore](self, "sgmiFeatureStore");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "areSubmodelsEmpty");

  return v3;
}

- (id)sortedUnsubscriptionOpportunitiesForField:(int64_t)a3 limit:(unint64_t)a4
{
  return -[SGSqlEntityStore sortedUnsubscriptionOpportunitiesForField:minCount:minScore:limit:](self, "sortedUnsubscriptionOpportunitiesForField:minCount:minScore:limit:", a3, 50, a4, 0.8);
}

- (id)sortedUnsubscriptionOpportunitiesForField:(int64_t)a3 minCount:(unint64_t)a4 minScore:(double)a5 limit:(unint64_t)a6
{
  void *v10;
  void *v11;

  -[SGSqlEntityStore sgmiFeatureStore](self, "sgmiFeatureStore");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "sortedUnsubscriptionOpportunitiesForField:minCount:minScore:limit:", a3, a4, a6, a5);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  return v11;
}

- (id)subModelsStats
{
  void *v2;
  void *v3;

  -[SGSqlEntityStore sgmiFeatureStore](self, "sgmiFeatureStore");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "subModelsStats");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

- (void)purgeTokensWhichLastUpdateWasBefore:(id)a3
{
  id v4;
  id v5;

  v4 = a3;
  -[SGSqlEntityStore sgmiFeatureStore](self, "sgmiFeatureStore");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "purgeTokensWhichLastUpdateWasBefore:shouldContinue:", v4, 0);

}

- (id)getSGMIStoredAddresses
{
  void *v2;
  void *v3;

  -[SGSqlEntityStore sgmiFeatureStore](self, "sgmiFeatureStore");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "getSGMIStoredAddresses");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

- (void)deleteTokensForDeletedEmailAddresses:(id)a3
{
  id v4;
  id v5;

  v4 = a3;
  -[SGSqlEntityStore sgmiFeatureStore](self, "sgmiFeatureStore");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "deleteTokensForDeletedEmailAddresses:", v4);

}

- (id)getViolationsToTokenCountsPolicy:(id)a3
{
  return (id)MEMORY[0x1E0C9AA70];
}

- (void)applyCappingPolicy:(id)a3 byDiscardingTokensCounts:(id)a4 withMargin:(float)a5
{
  id v6;
  id v7;

  v6 = a3;
  -[SGSqlEntityStore sgmiFeatureStore](self, "sgmiFeatureStore");
  v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "applyCappingPolicy:shouldContinue:", v6, 0);

}

- (id)entityFromSqlResult:(sqlite3_stmt *)a3
{
  return -[SGSqlEntityStore entityFromSqlResult:withSnippets:](self, "entityFromSqlResult:withSnippets:", a3, 1);
}

- (id)entityFromSqlResult:(sqlite3_stmt *)a3 withSnippets:(BOOL)a4
{
  _BOOL4 v4;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  SGDuplicateKey *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  _BOOL4 v24;
  void *v25;
  SGSqlEntityStore *v26;
  void *v27;
  void *v28;
  SGSqliteDatabase *snippetDb;
  uint64_t v30;
  double v31;
  double v32;
  sqlite3_int64 v33;
  sqlite3_int64 v34;
  int v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t i;
  const void *v46;
  void *v47;
  void *v48;
  uint64_t v49;
  void *v50;
  id v51;
  uint64_t v52;
  void *v53;
  void *v54;
  void *v55;
  uint64_t v56;
  void *v57;
  const __CFString *v58;
  void *v60;
  void *v61;
  id v62;
  void *v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  _QWORD v68[4];
  id v69;
  _QWORD v70[4];
  id v71;
  _QWORD v72[4];
  id v73;
  _BYTE v74[128];
  _QWORD v75[3];

  v4 = a4;
  v75[1] = *MEMORY[0x1E0C80C00];
  v8 = (void *)objc_opt_new();
  objc_msgSend(MEMORY[0x1E0D19920], "recordIdWithTableId:rowId:", 0, sqlite3_column_int64(a3, 0));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setRecordId:", v9);

  sqlite3_column_nsstring(a3, 16);
  v10 = objc_claimAutoreleasedReturnValue();
  sqlite3_column_nsstring(a3, 1);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v11)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v60 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v60, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore+SqlHelpers.m"), 104, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("serializedEntityKey"));

  }
  v63 = (void *)v10;
  v12 = -[SGDuplicateKey initWithSerializedEntityKey:entityType:serializedParentKey:]([SGDuplicateKey alloc], "initWithSerializedEntityKey:entityType:serializedParentKey:", v11, sqlite3_column_int64(a3, 2), v10);
  objc_msgSend(v8, "setDuplicateKey:", v12);

  v13 = (void *)MEMORY[0x1E0D19820];
  v14 = sqlite3_column_int(a3, 3);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", sqlite3_column_int(a3, 23));
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", sqlite3_column_double(a3, 24));
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "extractionInfoWithExtractionType:modelVersion:confidence:", v14, v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setExtractionInfo:", v17);

  sqlite3_column_nsstring(a3, 4);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setSourceKey:", v18);

  sqlite3_column_nsstring(a3, 5);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v19, "length"))
  {
    v20 = objc_alloc(MEMORY[0x1E0CA6B10]);
    objc_msgSend(v20, "sg_initWithSerializedForm:", v19);
    v21 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v21)
    {
      objc_msgSend(MEMORY[0x1E0D19938], "namedEmailAddressWithFieldValue:", v19);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "emailAddress");
      v21 = (void *)objc_claimAutoreleasedReturnValue();

      if (v21)
      {
        v62 = objc_alloc(MEMORY[0x1E0CA6B10]);
        objc_msgSend(v22, "name");
        v61 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v22, "emailAddress");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        v75[0] = v23;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v75, 1);
        v24 = v4;
        v25 = v11;
        v26 = self;
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        v21 = (void *)objc_msgSend(v62, "initWithDisplayName:handles:handleIdentifier:", v61, v27, *MEMORY[0x1E0C966A8]);

        self = v26;
        v11 = v25;
        v4 = v24;

      }
    }
    objc_msgSend(v8, "setAuthor:", v21);

  }
  objc_msgSend(v8, "setContent:", 0);
  sqlite3_column_nsstring(a3, 6);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setTitle:", v28);

  if (v4 && !-[SGDatabaseJournal journaling](self->_snippetsJournal, "journaling"))
  {
    snippetDb = self->_snippetDb;
    v30 = MEMORY[0x1E0C809B0];
    v72[0] = MEMORY[0x1E0C809B0];
    v72[1] = 3221225472;
    v72[2] = __65__SGSqlEntityStore_SqlHelpers__entityFromSqlResult_withSnippets___block_invoke;
    v72[3] = &unk_1E7DB7720;
    v73 = v8;
    v70[0] = v30;
    v70[1] = 3221225472;
    v70[2] = __65__SGSqlEntityStore_SqlHelpers__entityFromSqlResult_withSnippets___block_invoke_2;
    v70[3] = &unk_1E7DB52C8;
    v71 = v73;
    v68[0] = v30;
    v68[1] = 3221225472;
    v68[2] = __65__SGSqlEntityStore_SqlHelpers__entityFromSqlResult_withSnippets___block_invoke_3;
    v68[3] = &unk_1E7DB77D8;
    v69 = v71;
    -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](snippetDb, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("SELECT title, content, contentRangeOfInterest FROM snippets WHERE entityId=?"), v72, v70, v68);

  }
  v31 = sqlite3_column_double(a3, 17);
  v32 = sqlite3_column_double(a3, 18);
  v33 = sqlite3_column_int64(a3, 20);
  v34 = sqlite3_column_int64(a3, 21);
  v35 = sqlite3_column_int(a3, 19);
  if (v31 != 0.0 && v32 != 0.0)
  {
    v36 = (void *)MEMORY[0x1E0D19940];
    if (v35)
    {
      objc_msgSend(MEMORY[0x1E0D19940], "floatingRangeWithUTCStart:end:", v31, v32);
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "setTimeRange:", v37);
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0C99E80], "timeZoneForSecondsFromGMT:", v33);
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0C99E80], "timeZoneForSecondsFromGMT:", v34);
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v36, "rangeWithStart:startTimeZone:end:endTimeZone:", v37, v38, v31, v32);
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "setTimeRange:", v39);

    }
  }
  objc_msgSend(v8, "setCreationTimestamp:", sqlite3_column_double(a3, 7));
  objc_msgSend(v8, "setLastModifiedTimestamp:", sqlite3_column_double(a3, 8));
  v66 = 0u;
  v67 = 0u;
  v64 = 0u;
  v65 = 0u;
  sqlite3_column_nsstring(a3, 10);
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  SGEntityTagsFromStorage(v40);
  v41 = (void *)objc_claimAutoreleasedReturnValue();

  v42 = objc_msgSend(v41, "countByEnumeratingWithState:objects:count:", &v64, v74, 16);
  if (v42)
  {
    v43 = v42;
    v44 = *(_QWORD *)v65;
    do
    {
      for (i = 0; i != v43; ++i)
      {
        if (*(_QWORD *)v65 != v44)
          objc_enumerationMutation(v41);
        objc_msgSend(v8, "addTag:", *(_QWORD *)(*((_QWORD *)&v64 + 1) + 8 * i));
      }
      v43 = objc_msgSend(v41, "countByEnumeratingWithState:objects:count:", &v64, v74, 16);
    }
    while (v43);
  }

  v46 = sqlite3_column_blob(a3, 11);
  objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", v46, sqlite3_column_bytes(a3, 11));
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setStructuredData:", v47);

  objc_msgSend(v8, "setQuality:", sqlite3_column_double(a3, 12));
  objc_msgSend(v8, "setMasterEntityId:", sqlite3_column_int64(a3, 13));
  if (objc_msgSend(v8, "masterEntityId") < 0)
  {
    objc_msgSend(v8, "recordId");
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setMasterEntityId:", objc_msgSend(v48, "rowId"));

  }
  objc_msgSend(v8, "setGroupId:", sqlite3_column_int64(a3, 14));
  v49 = objc_msgSend(v8, "setState:", sqlite3_column_int(a3, 15));
  v50 = (void *)MEMORY[0x1C3BD4F6C](v49);
  v51 = objc_alloc(MEMORY[0x1E0C99E60]);
  v52 = objc_opt_class();
  v53 = (void *)objc_msgSend(v51, "initWithObjects:", v52, objc_opt_class(), 0);
  objc_autoreleasePoolPop(v50);
  sqlite3_column_nssecurecoding(a3, 22, v53);
  v54 = (void *)objc_claimAutoreleasedReturnValue();
  if (v54)
  {
    objc_msgSend(v8, "setLocations:", v54);
  }
  else
  {
    v55 = (void *)objc_opt_new();
    objc_msgSend(v8, "setLocations:", v55);

  }
  sqlite3_column_nsstring(a3, 25);
  v56 = objc_claimAutoreleasedReturnValue();
  v57 = (void *)v56;
  if (v56)
    v58 = (const __CFString *)v56;
  else
    v58 = &stru_1E7DB83A8;
  objc_msgSend(v8, "setOperatingSystemVersion:", v58);

  return v8;
}

- (id)allContactsWithEntityType:(unint64_t)a3
{
  void *v5;
  void *v6;
  SGSqliteDatabase *db;
  id v8;
  void *v9;
  id v10;
  _QWORD v12[5];
  id v13;
  _QWORD v14[5];

  -[SGSqlEntityStore selectEntityQuery:](self, "selectEntityQuery:", CFSTR("WHERE entityType = :entityType"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)objc_opt_new();
  db = self->_db;
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = __58__SGSqlEntityStore_SqlHelpers__allContactsWithEntityType___block_invoke;
  v14[3] = &__block_descriptor_40_e23_v16__0__sqlite3_stmt__8l;
  v14[4] = a3;
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __58__SGSqlEntityStore_SqlHelpers__allContactsWithEntityType___block_invoke_2;
  v12[3] = &unk_1E7DB53F8;
  v12[4] = self;
  v8 = v6;
  v13 = v8;
  -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](db, "prepAndRunQuery:onPrep:onRow:onError:", v5, v14, v12, 0);
  v9 = v13;
  v10 = v8;

  return v10;
}

- (id)allPseudoContacts
{
  return -[SGSqlEntityStore allContactsWithEntityType:](self, "allContactsWithEntityType:", 4);
}

- (unint64_t)entityCount
{
  uint64_t v3;
  SGSqliteDatabase *db;
  uint64_t v5;
  SGSqliteDatabase *v6;
  unint64_t v7;
  _QWORD v9[5];
  _QWORD v10[5];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  v11 = 0;
  v12 = &v11;
  v13 = 0x2020000000;
  v14 = 0;
  v3 = MEMORY[0x1E0C809B0];
  db = self->_db;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __43__SGSqlEntityStore_SqlHelpers__entityCount__block_invoke;
  v10[3] = &unk_1E7DB51B8;
  v10[4] = &v11;
  -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](db, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("SELECT COUNT(*) FROM entity"), 0, v10, 0);
  v5 = v12[3];
  v12[3] = 0;
  v6 = self->_db;
  v9[0] = v3;
  v9[1] = 3221225472;
  v9[2] = __43__SGSqlEntityStore_SqlHelpers__entityCount__block_invoke_2;
  v9[3] = &unk_1E7DB51B8;
  v9[4] = &v11;
  -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](v6, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("SELECT COUNT(*) FROM emailMetadata"), 0, v9, 0);
  v7 = v12[3] + v5;
  _Block_object_dispose(&v11, 8);
  return v7;
}

- (id)selectEntityQuery:(id)a3
{
  objc_class *v4;
  id v5;
  id v6;
  void *v7;
  void *v8;

  v4 = (objc_class *)MEMORY[0x1E0CB3940];
  v5 = a3;
  v6 = [v4 alloc];
  -[SGSqlEntityStore columnQueryPrefixSelect](self, "columnQueryPrefixSelect");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = (void *)objc_msgSend(v6, "initWithFormat:", CFSTR("%@ FROM entity AS e INNER JOIN entityParentage AS ep ON e.id = ep.childId %@ "), v7, v5);

  return v8;
}

- (id)dbStats
{
  void *v3;
  void *v4;
  SGSqliteDatabase *db;
  uint64_t v6;
  void *v7;
  SGSqliteDatabase *v8;
  SGSqliteDatabase *v9;
  SGSqliteDatabase *v10;
  uint64_t v11;
  SGSqliteDatabase *v12;
  void *v13;
  SGSqliteDatabase *snippetDb;
  uint64_t v15;
  SGSqliteDatabase *v16;
  SGSqliteDatabase *v17;
  SGSqliteDatabase *v18;
  SGSqliteDatabase *v19;
  void *v20;
  SGSqliteDatabase *v21;
  id v22;
  void *v23;
  void *v24;
  void *v25;
  SGSqliteDatabase *v26;
  id v27;
  id v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, sqlite3_stmt *);
  void *v33;
  id v34;
  _QWORD v35[4];
  id v36;
  _QWORD v37[5];
  _QWORD v38[5];
  _QWORD v39[5];
  _QWORD v40[5];
  _QWORD v41[5];
  _QWORD v42[5];
  _QWORD v43[5];
  _QWORD v44[6];
  _QWORD v45[5];
  _QWORD v46[6];
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t (*v54)(uint64_t, uint64_t);
  void (*v55)(uint64_t);
  id v56;

  v51 = 0;
  v52 = &v51;
  v53 = 0x3032000000;
  v54 = __Block_byref_object_copy__14839;
  v55 = __Block_byref_object_dispose__14840;
  v56 = 0;
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", 20);
  v56 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", -[SGSqliteDatabase userVersion](self->_db, "userVersion"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend((id)v52[5], "setObject:forKeyedSubscript:", v3, CFSTR("schema_version"));

  if (-[SGSqliteDatabase hasTableNamed:](self->_db, "hasTableNamed:", CFSTR("entity"))
    && -[SGSqliteDatabase hasTableNamed:](self->_db, "hasTableNamed:", CFSTR("emailMetadata")))
  {
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", 5);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend((id)v52[5], "setObject:forKeyedSubscript:", v4, CFSTR("entities"));

    v47 = 0;
    v48 = &v47;
    v49 = 0x2020000000;
    v50 = 0;
    db = self->_db;
    v6 = MEMORY[0x1E0C809B0];
    v46[0] = MEMORY[0x1E0C809B0];
    v46[1] = 3221225472;
    v46[2] = __39__SGSqlEntityStore_SqlHelpers__dbStats__block_invoke;
    v46[3] = &unk_1E7DAD568;
    v46[4] = &v51;
    v46[5] = &v47;
    -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](db, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("SELECT entityType, COUNT(*) FROM entity GROUP BY entityType UNION SELECT type, COUNT(*) FROM emailMetadata GROUP BY type"), 0, v46, &__block_literal_global_14903);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *((unsigned int *)v48 + 6));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend((id)v52[5], "setObject:forKeyedSubscript:", v7, CFSTR("total_entities"));

    v8 = self->_db;
    v45[0] = v6;
    v45[1] = 3221225472;
    v45[2] = __39__SGSqlEntityStore_SqlHelpers__dbStats__block_invoke_2_64;
    v45[3] = &unk_1E7DB51B8;
    v45[4] = &v51;
    -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](v8, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("SELECT COUNT(id) FROM entity WHERE masterEntityId > 0 AND entityType = :entityType"), &__block_literal_global_63_14906, v45, &__block_literal_global_67_14907);
    _Block_object_dispose(&v47, 8);
  }
  if (-[SGSqliteDatabase hasTableNamed:](self->_db, "hasTableNamed:", CFSTR("serializedContacts")))
  {
    v9 = self->_db;
    v44[0] = MEMORY[0x1E0C809B0];
    v44[1] = 3221225472;
    v44[2] = __39__SGSqlEntityStore_SqlHelpers__dbStats__block_invoke_72;
    v44[3] = &unk_1E7DB6A98;
    v44[4] = self;
    v44[5] = &v51;
    -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](v9, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("SELECT count(*), MIN(entityId), MAX(entityId) FROM serializedContacts"), 0, v44, &__block_literal_global_82);
  }
  if (-[SGSqliteDatabase hasTableNamed:](self->_db, "hasTableNamed:", CFSTR("entity_fts")))
  {
    v10 = self->_db;
    v11 = MEMORY[0x1E0C809B0];
    v43[0] = MEMORY[0x1E0C809B0];
    v43[1] = 3221225472;
    v43[2] = __39__SGSqlEntityStore_SqlHelpers__dbStats__block_invoke_87;
    v43[3] = &unk_1E7DB51B8;
    v43[4] = &v51;
    -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](v10, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("SELECT count(*) FROM entity_fts"), 0, v43, &__block_literal_global_91_14912);
    v12 = self->_db;
    v42[0] = v11;
    v42[1] = 3221225472;
    v42[2] = __39__SGSqlEntityStore_SqlHelpers__dbStats__block_invoke_94;
    v42[3] = &unk_1E7DB51B8;
    v42[4] = &v51;
    -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](v12, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("SELECT count(*) FROM entity_fts WHERE docid != entityId"), 0, v42, &__block_literal_global_98_14914);
    -[SGSqliteDatabase languageForFTSTable:](self->_db, "languageForFTSTable:", CFSTR("entity_fts"));
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend((id)v52[5], "setObject:forKeyedSubscript:", v13, CFSTR("entity_fts_lang"));

  }
  if (!-[SGDatabaseJournal journaling](self->_snippetsJournal, "journaling")
    && -[SGSqliteDatabase hasTableNamed:](self->_snippetDb, "hasTableNamed:", CFSTR("snippets"))
    && -[SGSqliteDatabase hasTableNamed:](self->_snippetDb, "hasTableNamed:", CFSTR("emailSnippets")))
  {
    snippetDb = self->_snippetDb;
    v15 = MEMORY[0x1E0C809B0];
    v41[0] = MEMORY[0x1E0C809B0];
    v41[1] = 3221225472;
    v41[2] = __39__SGSqlEntityStore_SqlHelpers__dbStats__block_invoke_107;
    v41[3] = &unk_1E7DB51B8;
    v41[4] = &v51;
    -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](snippetDb, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("SELECT (SELECT COUNT(*) FROM snippets) + (SELECT COUNT(*) FROM emailSnippets)"), 0, v41, &__block_literal_global_111_14919);
    v16 = self->_snippetDb;
    v40[0] = v15;
    v40[1] = 3221225472;
    v40[2] = __39__SGSqlEntityStore_SqlHelpers__dbStats__block_invoke_114;
    v40[3] = &unk_1E7DB51B8;
    v40[4] = &v51;
    -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](v16, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("SELECT (SELECT COUNT(*) FROM snippets WHERE title IS NOT NULL AND title != '') + (SELECT COUNT(*) FROM emailSnippets WHERE title IS NOT NULL AND title != '')"), 0, v40, &__block_literal_global_118_14921);
    v17 = self->_snippetDb;
    v39[0] = v15;
    v39[1] = 3221225472;
    v39[2] = __39__SGSqlEntityStore_SqlHelpers__dbStats__block_invoke_121;
    v39[3] = &unk_1E7DB51B8;
    v39[4] = &v51;
    -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](v17, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("SELECT (SELECT COUNT(*) FROM snippets WHERE content IS NOT NULL AND content != '') + (SELECT COUNT(*) FROM emailSnippets WHERE content IS NOT NULL AND content != '')"), 0, v39, &__block_literal_global_125);
  }
  if (-[SGSqliteDatabase hasTableNamed:](self->_db, "hasTableNamed:", CFSTR("harvestQueueTombstones")))
  {
    v18 = self->_db;
    v38[0] = MEMORY[0x1E0C809B0];
    v38[1] = 3221225472;
    v38[2] = __39__SGSqlEntityStore_SqlHelpers__dbStats__block_invoke_130;
    v38[3] = &unk_1E7DB51B8;
    v38[4] = &v51;
    -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](v18, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("SELECT COUNT(*) FROM harvestQueueTombstones"), 0, v38, &__block_literal_global_134_14925);
  }
  if (-[SGSqliteDatabase hasTableNamed:](self->_db, "hasTableNamed:", CFSTR("entityParentage")))
  {
    v19 = self->_db;
    v37[0] = MEMORY[0x1E0C809B0];
    v37[1] = 3221225472;
    v37[2] = __39__SGSqlEntityStore_SqlHelpers__dbStats__block_invoke_139;
    v37[3] = &unk_1E7DB51B8;
    v37[4] = &v51;
    -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](v19, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("SELECT COUNT(*) FROM entity WHERE id NOT IN (SELECT DISTINCT childId FROM entityParentage)"), 0, v37, &__block_literal_global_143_14928);
  }
  if (-[SGSqliteDatabase hasTableNamed:](self->_db, "hasTableNamed:", CFSTR("statsCounters")))
  {
    v20 = (void *)objc_opt_new();
    v21 = self->_db;
    v35[0] = MEMORY[0x1E0C809B0];
    v35[1] = 3221225472;
    v35[2] = __39__SGSqlEntityStore_SqlHelpers__dbStats__block_invoke_148;
    v35[3] = &unk_1E7DB6ED0;
    v22 = v20;
    v36 = v22;
    -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](v21, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("SELECT key, value FROM statsCounters"), 0, v35, &__block_literal_global_153_14931);
    objc_msgSend((id)v52[5], "setObject:forKeyedSubscript:", v22, CFSTR("statsCounters"));

  }
  v23 = (void *)v52[5];
  -[SGSqlEntityStore reimportRequestDBStats](self, "reimportRequestDBStats");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "addEntriesFromDictionary:", v24);

  if (-[SGSqliteDatabase hasTableNamed:](self->_db, "hasTableNamed:", CFSTR("urls")))
  {
    v25 = (void *)objc_opt_new();
    v26 = self->_db;
    v30 = MEMORY[0x1E0C809B0];
    v31 = 3221225472;
    v32 = __39__SGSqlEntityStore_SqlHelpers__dbStats__block_invoke_158;
    v33 = &unk_1E7DB52C8;
    v27 = v25;
    v34 = v27;
    -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](v26, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("SELECT COUNT(bundle_id), bundle_id FROM urls GROUP BY bundle_id"), 0, &v30, 0);
    objc_msgSend((id)v52[5], "setObject:forKeyedSubscript:", v27, CFSTR("urlsCounters"), v30, v31, v32, v33);

  }
  v28 = (id)v52[5];
  _Block_object_dispose(&v51, 8);

  return v28;
}

- (void)analyzeDatabase
{
  -[SGSqliteDatabase optimize:](self->_db, "optimize:", 65526);
}

- (void)clearAllTables
{
  SGSqliteDatabase *db;
  uint64_t v4;
  SGSqliteDatabase *v5;
  _QWORD v6[5];
  _QWORD v7[4];
  id v8;
  SGSqlEntityStore *v9;

  db = self->_db;
  v4 = MEMORY[0x1E0C809B0];
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __46__SGSqlEntityStore_SqlHelpers__clearAllTables__block_invoke;
  v7[3] = &unk_1E7DB6A30;
  v8 = &unk_1E7E108F0;
  v9 = self;
  -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v7);
  if (-[SGSqlEntityStore isEphemeral](self, "isEphemeral"))
  {
    v5 = self->_db;
    v6[0] = v4;
    v6[1] = 3221225472;
    v6[2] = __46__SGSqlEntityStore_SqlHelpers__clearAllTables__block_invoke_2;
    v6[3] = &unk_1E7DB56F0;
    v6[4] = self;
    -[SGSqliteDatabase writeTransaction:](v5, "writeTransaction:", v6);
  }

}

- (void)vacuum
{
  -[SGSqliteDatabase vacuum](self->_db, "vacuum");
  -[SGSqliteDatabase vacuum](self->_snippetDb, "vacuum");
}

- (BOOL)clearDatabases
{
  int64_t v3;

  v3 = -[SGSqlEntityStore unmigrateDatabases](self, "unmigrateDatabases");
  -[SGSqlEntityStore vacuum](self, "vacuum");
  return v3 == 1;
}

- (void)selectAuthoritativeDetailsForContactWithId:(int64_t)a3
{
  SGSqliteDatabase *db;
  _QWORD v4[6];

  db = self->_db;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __75__SGSqlEntityStore_SqlHelpers__selectAuthoritativeDetailsForContactWithId___block_invoke;
  v4[3] = &unk_1E7DB6368;
  v4[4] = self;
  v4[5] = a3;
  -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v4);
}

- (id)columnQueryPrefixSelect
{
  if (self->_entityVersion <= 0x3D)
    return CFSTR("SELECT e.id,e.entityKey,e.entityType,ep.extractionType,ep.sourceKey,e.author,e.title,e.creationTimestamp,e.updateTimestamp,e.indexTimestamp,e.tags,e.structuredData,e.quality,e.masterEntityId,e.groupId,e.state,ep.parentKey,e.timeRangeStart,e.timeRangeEnd,e.floatingRange,e.timeRangeStartUTCOffsetSeconds,e.timeRangeEndUTCOffsetSeconds,e.locations ");
  else
    return CFSTR("SELECT e.id,e.entityKey,e.entityType,ep.extractionType,ep.sourceKey,e.author,e.title,e.creationTimestamp,e.updateTimestamp,e.indexTimestamp,e.tags,e.structuredData,e.quality,e.masterEntityId,e.groupId,e.state,ep.parentKey,e.timeRangeStart,e.timeRangeEnd,e.floatingRange,e.timeRangeStartUTCOffsetSeconds,e.timeRangeEndUTCOffsetSeconds,e.locations,ep.modelVersion,ep.modelConfidence, e.harvestedOnBuild ");
}

- (float)_scoreContactDetail:(id)a3
{
  id v3;
  void *v4;
  uint64_t v5;
  float v6;
  void *v7;
  uint64_t v8;
  float result;

  v3 = a3;
  objc_msgSend(v3, "label");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "length");

  if (v5)
    v6 = 3.0;
  else
    v6 = 0.0;
  objc_msgSend(v3, "extractionInfo");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  v8 = objc_msgSend(v7, "extractionType");
  result = v6 + 1.0;
  if (v8 == 2)
    result = v6 + 2.0;
  if (!v8)
    return v6;
  return result;
}

void __75__SGSqlEntityStore_SqlHelpers__selectAuthoritativeDetailsForContactWithId___block_invoke(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  id obj;
  _QWORD v23[5];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _QWORD v28[6];
  _QWORD v29[5];
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t);
  void (*v34)(uint64_t);
  id v35;
  _BYTE v36[128];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v30 = 0;
  v31 = &v30;
  v32 = 0x3032000000;
  v33 = __Block_byref_object_copy__14839;
  v34 = __Block_byref_object_dispose__14840;
  v35 = 0;
  v35 = (id)objc_opt_new();
  objc_msgSend(*(id *)(a1 + 32), "selectEntityQuery:", CFSTR("WHERE e.groupId = :groupId"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(void **)(v2 + 8);
  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 3221225472;
  v29[2] = __75__SGSqlEntityStore_SqlHelpers__selectAuthoritativeDetailsForContactWithId___block_invoke_2;
  v29[3] = &__block_descriptor_40_e23_v16__0__sqlite3_stmt__8l;
  v29[4] = v3;
  v28[0] = MEMORY[0x1E0C809B0];
  v28[1] = 3221225472;
  v28[2] = __75__SGSqlEntityStore_SqlHelpers__selectAuthoritativeDetailsForContactWithId___block_invoke_3;
  v28[3] = &unk_1E7DB6A98;
  v28[4] = v2;
  v28[5] = &v30;
  objc_msgSend(v4, "prepAndRunQuery:onPrep:onRow:onError:", v1, v29, v28, 0);
  if (objc_msgSend((id)v31[5], "count"))
  {
    v19 = v1;
    v5 = *(void **)(a1 + 32);
    objc_msgSend(MEMORY[0x1E0D19920], "recordIdWithNumericValue:", *(_QWORD *)(a1 + 40));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "masterEntityIdForContactOrContactDetailRecord:", v6);
    v20 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(*(id *)(a1 + 32), "deleteSerializedContactForId:", *(_QWORD *)(a1 + 40));
    objc_msgSend(*(id *)(a1 + 32), "deleteSerializedContactForId:", objc_msgSend(v20, "rowId"));
    v7 = objc_alloc(MEMORY[0x1E0C99DE8]);
    v8 = (void *)objc_msgSend(v7, "initWithCapacity:", objc_msgSend((id)v31[5], "count") + 2);
    objc_msgSend(v8, "addObject:", CFSTR("UPDATE entity SET masterEntityId = (CASE id"));
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    obj = (id)v31[5];
    v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v24, v36, 16);
    if (v9)
    {
      v10 = *(_QWORD *)v25;
      do
      {
        v11 = 0;
        do
        {
          if (*(_QWORD *)v25 != v10)
            objc_enumerationMutation(obj);
          objc_msgSend((id)v31[5], "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v24 + 1) + 8 * v11));
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          v13 = objc_alloc(MEMORY[0x1E0CB3940]);
          objc_msgSend(v12, "first");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v14, "recordId");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          v16 = (void *)objc_msgSend(v13, "initWithFormat:", CFSTR("WHEN %lld THEN %lld"), objc_msgSend(v15, "rowId"), *(_QWORD *)(a1 + 40));
          objc_msgSend(v8, "addObject:", v16);

          ++v11;
        }
        while (v9 != v11);
        v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v24, v36, 16);
      }
      while (v9);
    }

    objc_msgSend(v8, "addObject:", CFSTR("ELSE -1 END) WHERE groupId = :groupId"));
    objc_msgSend(v8, "_pas_componentsJoinedByString:", CFSTR(" "));
    v1 = (void *)objc_claimAutoreleasedReturnValue();

    v17 = *(_QWORD *)(a1 + 40);
    v18 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
    v23[0] = MEMORY[0x1E0C809B0];
    v23[1] = 3221225472;
    v23[2] = __75__SGSqlEntityStore_SqlHelpers__selectAuthoritativeDetailsForContactWithId___block_invoke_219;
    v23[3] = &__block_descriptor_40_e23_v16__0__sqlite3_stmt__8l;
    v23[4] = v17;
    objc_msgSend(v18, "prepAndRunQuery:onPrep:onRow:onError:", v1, v23, 0, 0);

  }
  _Block_object_dispose(&v30, 8);

}

uint64_t __75__SGSqlEntityStore_SqlHelpers__selectAuthoritativeDetailsForContactWithId___block_invoke_2(uint64_t a1, uint64_t a2)
{
  return +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":groupId", *(_QWORD *)(a1 + 32));
}

uint64_t __75__SGSqlEntityStore_SqlHelpers__selectAuthoritativeDetailsForContactWithId___block_invoke_3(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v19;
  void *v20;
  int v21;
  void *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "entityFromSqlResult:", a2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  +[SGContactDetail contactDetailFromEntity:](SGContactDetail, "contactDetailFromEntity:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "duplicateKey");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "entityType");

  switch(v6)
  {
    case 6:
    case 9:
      objc_msgSend(v4, "value");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      SGNormalizePhoneNumber();
      v8 = objc_claimAutoreleasedReturnValue();
      goto LABEL_10;
    case 7:
    case 10:
      objc_msgSend(v4, "value");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      SGNormalizeAddress(v7);
      v8 = objc_claimAutoreleasedReturnValue();
      goto LABEL_10;
    case 8:
    case 11:
      objc_msgSend(v4, "value");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      SGNormalizeEmailAddress();
      v8 = objc_claimAutoreleasedReturnValue();
      goto LABEL_10;
    case 15:
      objc_msgSend(v4, "value");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      SGNormalizeInstantMessageAddress(v7);
      v8 = objc_claimAutoreleasedReturnValue();
      goto LABEL_10;
    case 19:
      objc_msgSend(v4, "value");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      SGNormalizeSocialProfile(v10);
      objc_claimAutoreleasedReturnValue();

      goto LABEL_11;
    case 20:
    case 21:
      objc_msgSend(v4, "value");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      SGNormalizeBirthday(v7);
      v8 = objc_claimAutoreleasedReturnValue();
LABEL_10:
      v10 = (void *)v8;

      goto LABEL_11;
    case 23:
      objc_msgSend(v4, "value");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_11:
      v11 = (void *)MEMORY[0x1E0CB37E8];
      objc_msgSend(*(id *)(a1 + 32), "_scoreContactDetail:", v4);
      objc_msgSend(v11, "numberWithFloat:");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "objectForKeyedSubscript:", v10);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = v13;
      if (!v13
        || (objc_msgSend(v13, "second"),
            v15 = (void *)objc_claimAutoreleasedReturnValue(),
            v16 = objc_msgSend(v12, "compare:", v15),
            v15,
            v16 == 1))
      {
        objc_msgSend(MEMORY[0x1E0D81638], "tupleWithFirst:second:", v3, v12);
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "setObject:forKeyedSubscript:", v17, v10);

      }
      break;
    default:
      sgLogHandle();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        objc_msgSend(v3, "duplicateKey");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v19, "entityType");
        SGEntityTypeDescription();
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        v21 = 138412290;
        v22 = v20;
        _os_log_error_impl(&dword_1C3607000, v9, OS_LOG_TYPE_ERROR, "GroupID lookup found unexpected entity type for contact detail (%@)", (uint8_t *)&v21, 0xCu);

      }
      break;
  }

  return 0;
}

uint64_t __75__SGSqlEntityStore_SqlHelpers__selectAuthoritativeDetailsForContactWithId___block_invoke_219(uint64_t a1, uint64_t a2)
{
  return +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":groupId", *(_QWORD *)(a1 + 32));
}

uint64_t __46__SGSqlEntityStore_SqlHelpers__clearAllTables__block_invoke(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v2 = *(id *)(a1 + 32);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v9;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v9 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 8), "prepAndRunQuery:onPrep:onRow:onError:", *(_QWORD *)(*((_QWORD *)&v8 + 1) + 8 * v6++), 0, 0, 0, (_QWORD)v8);
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    }
    while (v4);
  }

  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 24), "prepAndRunNonDataQueries:onError:", &unk_1E7E10908, 0);
}

uint64_t __46__SGSqlEntityStore_SqlHelpers__clearAllTables__block_invoke_2(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("INSERT INTO sqlite_sequence(name, seq) SELECT value, :minId FROM _pas_nsarray(:tableNames)"), &__block_literal_global_201_14855, 0, 0);
}

void __46__SGSqlEntityStore_SqlHelpers__clearAllTables__block_invoke_3(uint64_t a1, void *a2)
{
  id v2;

  v2 = a2;
  objc_msgSend(v2, "bindNamedParam:toInt64:", ":minId", 30000000000000000);
  objc_msgSend(v2, "bindNamedParam:toNSArray:", ":tableNames", &unk_1E7E10920);

}

uint64_t __39__SGSqlEntityStore_SqlHelpers__dbStats__block_invoke(uint64_t a1, sqlite3_stmt *a2)
{
  sqlite3_stmt *v2;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;

  v2 = a2;
  sqlite3_column_int(a2, 0);
  v4 = sqlite3_column_int(v2, 1);
  LODWORD(v2) = v4;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "objectForKeyedSubscript:", CFSTR("entities"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  SGEntityTypeDescription();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setObject:forKeyedSubscript:", v5, v7);

  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) += (_DWORD)v2;
  return 0;
}

uint64_t __39__SGSqlEntityStore_SqlHelpers__dbStats__block_invoke_2_64(uint64_t a1, sqlite3_stmt *a2)
{
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", sqlite3_column_int(a2, 0));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "setObject:forKeyedSubscript:", v3, CFSTR("merged_pseudocontacts"));

  return 1;
}

uint64_t __39__SGSqlEntityStore_SqlHelpers__dbStats__block_invoke_72(uint64_t a1, sqlite3_stmt *a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", sqlite3_column_int(a2, 1));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "setObject:forKeyedSubscript:", v4, CFSTR("serialized_contacts_lowest"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", sqlite3_column_int64(a2, 2));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "setObject:forKeyedSubscript:", v5, CFSTR("serialized_contacts_highest"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", objc_msgSend(*(id *)(a1 + 32), "serializedContactsLimit"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "setObject:forKeyedSubscript:", v6, CFSTR("serialized_contacts_limit"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", sqlite3_column_int64(a2, 0));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "setObject:forKeyedSubscript:", v7, CFSTR("serialized_contacts_total"));

  return 1;
}

uint64_t __39__SGSqlEntityStore_SqlHelpers__dbStats__block_invoke_87(uint64_t a1, sqlite3_stmt *a2)
{
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", sqlite3_column_int(a2, 0));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "setObject:forKeyedSubscript:", v3, CFSTR("entity_fts_count"));

  return 1;
}

uint64_t __39__SGSqlEntityStore_SqlHelpers__dbStats__block_invoke_94(uint64_t a1, sqlite3_stmt *a2)
{
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", sqlite3_column_int(a2, 0));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "setObject:forKeyedSubscript:", v3, CFSTR("entity_fts_details"));

  return 1;
}

uint64_t __39__SGSqlEntityStore_SqlHelpers__dbStats__block_invoke_107(uint64_t a1, sqlite3_stmt *a2)
{
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", sqlite3_column_int(a2, 0));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "setObject:forKeyedSubscript:", v3, CFSTR("snippets_count"));

  return 1;
}

uint64_t __39__SGSqlEntityStore_SqlHelpers__dbStats__block_invoke_114(uint64_t a1, sqlite3_stmt *a2)
{
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", sqlite3_column_int(a2, 0));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "setObject:forKeyedSubscript:", v3, CFSTR("snippets_title_count"));

  return 1;
}

uint64_t __39__SGSqlEntityStore_SqlHelpers__dbStats__block_invoke_121(uint64_t a1, sqlite3_stmt *a2)
{
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", sqlite3_column_int(a2, 0));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "setObject:forKeyedSubscript:", v3, CFSTR("snippets_content_count"));

  return 1;
}

uint64_t __39__SGSqlEntityStore_SqlHelpers__dbStats__block_invoke_130(uint64_t a1, sqlite3_stmt *a2)
{
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", sqlite3_column_int(a2, 0));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "setObject:forKeyedSubscript:", v3, CFSTR("tombstones_count"));

  return 1;
}

uint64_t __39__SGSqlEntityStore_SqlHelpers__dbStats__block_invoke_139(uint64_t a1, sqlite3_stmt *a2)
{
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", sqlite3_column_int(a2, 0));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "setObject:forKeyedSubscript:", v3, CFSTR("orphaned_entity_count"));

  return 1;
}

uint64_t __39__SGSqlEntityStore_SqlHelpers__dbStats__block_invoke_148(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  unsigned __int8 *v6;

  v3 = a2;
  objc_msgSend(v3, "nonnullNSStringForColumnName:table:", "key", 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "doubleAsNonnullNSNumberForColumnName:table:", "value", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v5, v4);
  v6 = (unsigned __int8 *)MEMORY[0x1E0D81780];

  return *v6;
}

uint64_t __39__SGSqlEntityStore_SqlHelpers__dbStats__block_invoke_158(uint64_t a1, sqlite3_stmt *a2)
{
  sqlite3_int64 v4;
  void *v5;
  void *v6;

  v4 = sqlite3_column_int64(a2, 0);
  sqlite3_column_nsstring(a2, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v4);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v6, v5);

  }
  return 0;
}

uint64_t __39__SGSqlEntityStore_SqlHelpers__dbStats__block_invoke_2_152(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  int v5;
  id v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  sgLogHandle();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v5 = 138412290;
    v6 = v2;
    _os_log_impl(&dword_1C3607000, v3, OS_LOG_TYPE_DEFAULT, "Unable to dump stats: %@", (uint8_t *)&v5, 0xCu);
  }

  return *MEMORY[0x1E0D81788];
}

uint64_t __39__SGSqlEntityStore_SqlHelpers__dbStats__block_invoke_2_142(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  int v5;
  id v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  sgLogHandle();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v5 = 138412290;
    v6 = v2;
    _os_log_impl(&dword_1C3607000, v3, OS_LOG_TYPE_DEFAULT, "Unable to count orphaned entities: %@", (uint8_t *)&v5, 0xCu);
  }

  return 1;
}

uint64_t __39__SGSqlEntityStore_SqlHelpers__dbStats__block_invoke_2_133(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  int v5;
  id v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  sgLogHandle();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v5 = 138412290;
    v6 = v2;
    _os_log_impl(&dword_1C3607000, v3, OS_LOG_TYPE_DEFAULT, "Unable to count tombstones: %@", (uint8_t *)&v5, 0xCu);
  }

  return 1;
}

uint64_t __39__SGSqlEntityStore_SqlHelpers__dbStats__block_invoke_2_124(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  int v5;
  id v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  sgLogHandle();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v5 = 138412290;
    v6 = v2;
    _os_log_impl(&dword_1C3607000, v3, OS_LOG_TYPE_DEFAULT, "Unable to count snippets with content: %@", (uint8_t *)&v5, 0xCu);
  }

  return 1;
}

uint64_t __39__SGSqlEntityStore_SqlHelpers__dbStats__block_invoke_2_117(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  int v5;
  id v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  sgLogHandle();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v5 = 138412290;
    v6 = v2;
    _os_log_impl(&dword_1C3607000, v3, OS_LOG_TYPE_DEFAULT, "Unable to count snippets with titles: %@", (uint8_t *)&v5, 0xCu);
  }

  return 1;
}

uint64_t __39__SGSqlEntityStore_SqlHelpers__dbStats__block_invoke_2_110(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  int v5;
  id v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  sgLogHandle();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v5 = 138412290;
    v6 = v2;
    _os_log_impl(&dword_1C3607000, v3, OS_LOG_TYPE_DEFAULT, "Unable to count snippets: %@", (uint8_t *)&v5, 0xCu);
  }

  return 1;
}

uint64_t __39__SGSqlEntityStore_SqlHelpers__dbStats__block_invoke_2_97(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  int v5;
  id v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  sgLogHandle();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v5 = 138412290;
    v6 = v2;
    _os_log_impl(&dword_1C3607000, v3, OS_LOG_TYPE_DEFAULT, "Unable to count details in entity_fts: %@", (uint8_t *)&v5, 0xCu);
  }

  return 1;
}

uint64_t __39__SGSqlEntityStore_SqlHelpers__dbStats__block_invoke_2_90(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  int v5;
  id v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  sgLogHandle();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v5 = 138412290;
    v6 = v2;
    _os_log_impl(&dword_1C3607000, v3, OS_LOG_TYPE_DEFAULT, "Unable to count entity_fts: %@", (uint8_t *)&v5, 0xCu);
  }

  return 1;
}

uint64_t __39__SGSqlEntityStore_SqlHelpers__dbStats__block_invoke_2_81(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  int v5;
  id v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  sgLogHandle();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v5 = 138412290;
    v6 = v2;
    _os_log_impl(&dword_1C3607000, v3, OS_LOG_TYPE_DEFAULT, "Unable to calculate stats from serializedContacts table: %@", (uint8_t *)&v5, 0xCu);
  }

  return 1;
}

uint64_t __39__SGSqlEntityStore_SqlHelpers__dbStats__block_invoke_3(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  int v5;
  id v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  sgLogHandle();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v5 = 138412290;
    v6 = v2;
    _os_log_impl(&dword_1C3607000, v3, OS_LOG_TYPE_DEFAULT, "Unable to count merged pseudocontacts: %@", (uint8_t *)&v5, 0xCu);
  }

  return 1;
}

uint64_t __39__SGSqlEntityStore_SqlHelpers__dbStats__block_invoke_62(uint64_t a1, uint64_t a2)
{
  return +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":entityType", 4);
}

uint64_t __39__SGSqlEntityStore_SqlHelpers__dbStats__block_invoke_2(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  int v5;
  id v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  sgLogHandle();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v5 = 138412290;
    v6 = v2;
    _os_log_impl(&dword_1C3607000, v3, OS_LOG_TYPE_DEFAULT, "Unable to calculate stats from entity table: %@", (uint8_t *)&v5, 0xCu);
  }

  return 1;
}

uint64_t __43__SGSqlEntityStore_SqlHelpers__entityCount__block_invoke(uint64_t a1, sqlite3_stmt *a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = sqlite3_column_int(a2, 0);
  return 1;
}

uint64_t __43__SGSqlEntityStore_SqlHelpers__entityCount__block_invoke_2(uint64_t a1, sqlite3_stmt *a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = sqlite3_column_int(a2, 0);
  return 1;
}

uint64_t __58__SGSqlEntityStore_SqlHelpers__allContactsWithEntityType___block_invoke(uint64_t a1, uint64_t a2)
{
  return +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":entityType", *(_QWORD *)(a1 + 32));
}

uint64_t __58__SGSqlEntityStore_SqlHelpers__allContactsWithEntityType___block_invoke_2(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  objc_msgSend(*(id *)(a1 + 32), "entityFromSqlResult:", a2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  +[SGContactEntity contactEntityFromEntity:](SGContactEntity, "contactEntityFromEntity:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = *(void **)(a1 + 40);
  +[SGStorageContact contactFromContactEntity:](SGStorageContact, "contactFromContactEntity:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "addObject:", v6);

  return 0;
}

void __65__SGSqlEntityStore_SqlHelpers__entityFromSqlResult_withSnippets___block_invoke(uint64_t a1, sqlite3_stmt *a2)
{
  id v3;

  objc_msgSend(*(id *)(a1 + 32), "recordId");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  sqlite3_bind_int64(a2, 1, objc_msgSend(v3, "rowId"));

}

uint64_t __65__SGSqlEntityStore_SqlHelpers__entityFromSqlResult_withSnippets___block_invoke_2(uint64_t a1, sqlite3_stmt *a2)
{
  void *v4;
  void *v5;
  void *v6;
  NSString *v7;
  NSString *v8;
  NSRange v9;

  objc_msgSend(*(id *)(a1 + 32), "title");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v4)
  {
    sqlite3_column_nsstring(a2, 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "setTitle:", v5);

  }
  sqlite3_column_nsstring(a2, 1);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "setContent:", v6);

  sqlite3_column_nsstring(a2, 2);
  v7 = (NSString *)objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (v7)
  {
    v9 = NSRangeFromString(v7);
    objc_msgSend(*(id *)(a1 + 32), "setContentRangeOfInterest:", v9.location, v9.length);
  }

  return 1;
}

uint64_t __65__SGSqlEntityStore_SqlHelpers__entityFromSqlResult_withSnippets___block_invoke_3(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  int v5;
  void *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  sgLogHandle();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    objc_msgSend(*(id *)(a1 + 32), "recordId");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = 138412290;
    v6 = v3;
    _os_log_impl(&dword_1C3607000, v2, OS_LOG_TYPE_DEFAULT, "failed to load snippet data for entity: %@", (uint8_t *)&v5, 0xCu);

  }
  return 1;
}

- (BOOL)performDatabaseCheck
{
  objc_class *v2;
  Method *v3;
  Method *v4;
  unint64_t v5;
  int v6;
  const char *Name;
  const char *v8;
  const char *v9;
  void *v10;
  id v11;
  void *v12;
  int v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  const __CFString *v18;
  void *v19;
  void *v20;
  id v21;
  uint64_t (*v24)(SGSqlEntityStore *, const char *);
  unsigned int outCount;

  outCount = 0;
  v2 = (objc_class *)objc_opt_class();
  v3 = class_copyMethodList(v2, &outCount);
  if (outCount)
  {
    v4 = v3;
    v5 = 0;
    v6 = 1;
    do
    {
      Name = method_getName(v4[v5]);
      if (Name)
      {
        v8 = Name;
        v9 = sel_getName(Name);
        if (!strncmp(v9, "databasecheck_", 0xEuLL))
        {
          v24 = (uint64_t (*)(SGSqlEntityStore *, const char *))-[SGSqlEntityStore methodForSelector:](self, "methodForSelector:", v8);
          v10 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("%s"), v9 + 14);
          v11 = objc_alloc(MEMORY[0x1E0CB3940]);
          v12 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("\n***** Database Check: %@"), v10);
          _bold(v12);
          v13 = v6;
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          v15 = objc_retainAutorelease((id)objc_msgSend(v11, "initWithFormat:", CFSTR("%@"), v14));
          puts((const char *)objc_msgSend(v15, "UTF8String"));

          v6 = v24(self, v8) & v13;
        }
      }
      ++v5;
    }
    while (v5 < outCount);
  }
  else
  {
    LOBYTE(v6) = 1;
  }
  v16 = objc_alloc(MEMORY[0x1E0CB3940]);
  v17 = objc_alloc(MEMORY[0x1E0CB3940]);
  v18 = CFSTR("failure");
  if ((v6 & 1) != 0)
    v18 = CFSTR("ok");
  v19 = (void *)objc_msgSend(v17, "initWithFormat:", CFSTR("\n***** Overall Status: %@"), v18);
  _bold(v19);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = objc_retainAutorelease((id)objc_msgSend(v16, "initWithFormat:", CFSTR("%@"), v20));
  puts((const char *)objc_msgSend(v21, "UTF8String"));

  return v6 & 1;
}

- (BOOL)performIntegrityCheckOnly
{
  id v3;
  void *v4;
  id v5;

  v3 = objc_alloc(MEMORY[0x1E0CB3940]);
  _bold(CFSTR("**** Integrity check"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_retainAutorelease((id)objc_msgSend(v3, "initWithFormat:", CFSTR("\n%@"), v4));
  puts((const char *)objc_msgSend(v5, "UTF8String"));

  return -[SGSqlEntityStore databasecheck_IntegrityCheck](self, "databasecheck_IntegrityCheck");
}

- (BOOL)databasecheck_IntegrityCheck
{
  uint64_t v3;
  void *v4;
  id v5;
  SGSqliteDatabase *db;
  id v7;
  SGSqliteDatabase *snippetDb;
  _QWORD v10[5];
  _QWORD v11[5];
  _QWORD v12[5];
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char v16;

  v13 = 0;
  v14 = &v13;
  v15 = 0x2020000000;
  v3 = MEMORY[0x1E0C809B0];
  v16 = 1;
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __63__SGSqlEntityStore_DatabaseCheck__databasecheck_IntegrityCheck__block_invoke;
  v12[3] = &unk_1E7DB51B8;
  v12[4] = &v13;
  v4 = (void *)MEMORY[0x1C3BD5158](v12, a2);
  v5 = objc_retainAutorelease((id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("Integrity check of entities.db")));
  puts((const char *)objc_msgSend(v5, "UTF8String"));

  db = self->_db;
  v11[0] = v3;
  v11[1] = 3221225472;
  v11[2] = __63__SGSqlEntityStore_DatabaseCheck__databasecheck_IntegrityCheck__block_invoke_2;
  v11[3] = &unk_1E7DB4690;
  v11[4] = &v13;
  -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](db, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("PRAGMA integrity_check"), 0, v4, v11);
  v7 = objc_retainAutorelease((id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("Integrity check of snippets.db")));
  puts((const char *)objc_msgSend(v7, "UTF8String"));

  snippetDb = self->_snippetDb;
  v10[0] = v3;
  v10[1] = 3221225472;
  v10[2] = __63__SGSqlEntityStore_DatabaseCheck__databasecheck_IntegrityCheck__block_invoke_3;
  v10[3] = &unk_1E7DB4690;
  v10[4] = &v13;
  -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](snippetDb, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("PRAGMA integrity_check"), 0, v4, v10);
  LOBYTE(self) = *((_BYTE *)v14 + 24);

  _Block_object_dispose(&v13, 8);
  return (char)self;
}

- (BOOL)databasecheck_BrokenEntityIDReferences
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  id v8;
  void *v9;
  SGSqliteDatabase *db;
  void *v11;
  id v12;
  id v13;
  char v14;
  id obj;
  _QWORD v18[6];
  _QWORD v19[4];
  id v20;
  uint64_t *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  char v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v26 = 0;
  v27 = &v26;
  v28 = 0x2020000000;
  v29 = 1;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  -[SGSqliteDatabase tablesWithColumnNamed:](self->_db, "tablesWithColumnNamed:", CFSTR("entityId"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v22, v30, 16);
  if (v3)
  {
    v4 = *(_QWORD *)v23;
    v5 = MEMORY[0x1E0C809B0];
    obj = v2;
    do
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v23 != v4)
          objc_enumerationMutation(obj);
        v7 = *(_QWORD *)(*((_QWORD *)&v22 + 1) + 8 * i);
        v8 = objc_retainAutorelease((id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("Broken entityId reference check: %@"), v7));
        puts((const char *)objc_msgSend(v8, "UTF8String"));

        v9 = (void *)objc_opt_new();
        db = self->_db;
        v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("SELECT entityId, * FROM %@ WHERE entityId NOT IN (SELECT id FROM entity)"), v7);
        v19[0] = v5;
        v19[1] = 3221225472;
        v19[2] = __73__SGSqlEntityStore_DatabaseCheck__databasecheck_BrokenEntityIDReferences__block_invoke;
        v19[3] = &unk_1E7DB6A98;
        v12 = v9;
        v20 = v12;
        v21 = &v26;
        v18[0] = v5;
        v18[1] = 3221225472;
        v18[2] = __73__SGSqlEntityStore_DatabaseCheck__databasecheck_BrokenEntityIDReferences__block_invoke_2;
        v18[3] = &unk_1E7DB7788;
        v18[4] = v7;
        v18[5] = &v26;
        -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](db, "prepAndRunQuery:onPrep:onRow:onError:", v11, 0, v19, v18);

        v13 = objc_retainAutorelease((id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", &stru_1E7DB83A8));
        puts((const char *)objc_msgSend(v13, "UTF8String"));

      }
      v2 = obj;
      v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v22, v30, 16);
    }
    while (v3);
  }

  v14 = *((_BYTE *)v27 + 24);
  _Block_object_dispose(&v26, 8);
  return v14;
}

- (BOOL)databasecheck_contactMergeGroupConsistency
{
  SGSqliteDatabase *db;
  char v3;
  _QWORD v5[7];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  char v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v9 = 1;
  db = self->_db;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __77__SGSqlEntityStore_DatabaseCheck__databasecheck_contactMergeGroupConsistency__block_invoke;
  v5[3] = &unk_1E7DB5BC8;
  v5[5] = &v6;
  v5[6] = a2;
  v5[4] = self;
  -[SGSqliteDatabase readTransaction:](db, "readTransaction:", v5);
  v3 = *((_BYTE *)v7 + 24);
  _Block_object_dispose(&v6, 8);
  return v3;
}

void __77__SGSqlEntityStore_DatabaseCheck__databasecheck_contactMergeGroupConsistency__block_invoke(_QWORD *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  id v16;
  const char *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id obj;
  uint64_t v23;
  _QWORD v24[5];
  _QWORD v25[5];
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[5];
  _QWORD v31[5];
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _QWORD v40[4];
  id v41;
  _BYTE v42[128];
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v2 = (void *)objc_opt_new();
  v3 = *(void **)(a1[4] + 8);
  v4 = MEMORY[0x1E0C809B0];
  v40[0] = MEMORY[0x1E0C809B0];
  v40[1] = 3221225472;
  v40[2] = __77__SGSqlEntityStore_DatabaseCheck__databasecheck_contactMergeGroupConsistency__block_invoke_3;
  v40[3] = &unk_1E7DB52C8;
  v5 = v2;
  v41 = v5;
  objc_msgSend(v3, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("SELECT DISTINCT masterEntityId FROM entity WHERE masterEntityId >= 0 AND masterEntityId != id AND entityType = :pseudo"), &__block_literal_global_15084, v40, 0);
  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  obj = v5;
  v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v36, v42, 16);
  if (v6)
  {
    v23 = *(_QWORD *)v37;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v37 != v23)
          objc_enumerationMutation(obj);
        v8 = *(void **)(*((_QWORD *)&v36 + 1) + 8 * v7);
        v32 = 0;
        v33 = &v32;
        v34 = 0x2020000000;
        v35 = 0x7FFFFFFFFFFFFFFFLL;
        v9 = *(void **)(a1[4] + 8);
        v30[4] = &v32;
        v31[0] = v4;
        v31[1] = 3221225472;
        v31[2] = __77__SGSqlEntityStore_DatabaseCheck__databasecheck_contactMergeGroupConsistency__block_invoke_4;
        v31[3] = &unk_1E7DB7720;
        v31[4] = v8;
        v30[0] = v4;
        v30[1] = 3221225472;
        v30[2] = __77__SGSqlEntityStore_DatabaseCheck__databasecheck_contactMergeGroupConsistency__block_invoke_5;
        v30[3] = &unk_1E7DB51B8;
        objc_msgSend(v9, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("SELECT MIN(id) FROM entity WHERE masterEntityId = :masterEntityId AND entityType = :pseudo"), v31, v30, 0);
        if (v33[3] == 0x7FFFFFFFFFFFFFFFLL)
        {
          objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "handleFailureInMethod:object:file:lineNumber:description:", a1[6], a1[4], CFSTR("SGSqlEntityStore+DatabaseCheck.m"), 155, CFSTR("Failed to find merge group minimal element"));

        }
        v10 = objc_msgSend(v8, "rowId");
        if (v10 != v33[3])
        {
          v11 = objc_alloc(MEMORY[0x1E0CB3940]);
          v12 = objc_msgSend(v8, "rowId");
          v13 = objc_retainAutorelease((id)objc_msgSend(v11, "initWithFormat:", CFSTR("  * merge group with masterEntityId %lld has unexpected minimal element %lld"), v12, v33[3]));
          puts((const char *)objc_msgSend(v13, "UTF8String"));

          *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = 0;
        }
        v26 = 0;
        v27 = &v26;
        v28 = 0x2020000000;
        v29 = 0x7FFFFFFFFFFFFFFFLL;
        v14 = *(void **)(a1[4] + 8);
        v24[4] = &v26;
        v25[0] = v4;
        v25[1] = 3221225472;
        v25[2] = __77__SGSqlEntityStore_DatabaseCheck__databasecheck_contactMergeGroupConsistency__block_invoke_6;
        v25[3] = &unk_1E7DB7720;
        v25[4] = v8;
        v24[0] = v4;
        v24[1] = 3221225472;
        v24[2] = __77__SGSqlEntityStore_DatabaseCheck__databasecheck_contactMergeGroupConsistency__block_invoke_7;
        v24[3] = &unk_1E7DB51B8;
        objc_msgSend(v14, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("SELECT masterEntityId FROM entity WHERE id = :mergeId"), v25, v24, 0);
        v15 = v27[3];
        if (v15 == 0x7FFFFFFFFFFFFFFFLL)
        {
          v16 = objc_retainAutorelease((id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("  * merge group has masterEntityId %lld, but there is no row with id == %lld"), objc_msgSend(v8, "rowId"), objc_msgSend(v8, "rowId")));
          v17 = (const char *)objc_msgSend(v16, "UTF8String");
        }
        else
        {
          if (v15 == v33[3])
            goto LABEL_15;
          v18 = objc_alloc(MEMORY[0x1E0CB3940]);
          v19 = objc_msgSend(v8, "rowId");
          v20 = objc_msgSend(v8, "rowId");
          v16 = objc_retainAutorelease((id)objc_msgSend(v18, "initWithFormat:", CFSTR("  * merge group has masterEntityId %lld, but the row with entity.id == %lld has masterEntityId == %lld"), v19, v20, v27[3]));
          v17 = (const char *)objc_msgSend(v16, "UTF8String");
        }
        puts(v17);

        *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = 0;
LABEL_15:
        _Block_object_dispose(&v26, 8);
        _Block_object_dispose(&v32, 8);
        ++v7;
      }
      while (v6 != v7);
      v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v36, v42, 16);
    }
    while (v6);
  }

}

uint64_t __77__SGSqlEntityStore_DatabaseCheck__databasecheck_contactMergeGroupConsistency__block_invoke_3(uint64_t a1, sqlite3_stmt *a2)
{
  sqlite3_int64 v3;
  void *v4;
  void *v5;

  v3 = sqlite3_column_int64(a2, 0);
  v4 = *(void **)(a1 + 32);
  objc_msgSend(MEMORY[0x1E0D19920], "recordIdForContactWithRowId:", v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addObject:", v5);

  return 0;
}

uint64_t __77__SGSqlEntityStore_DatabaseCheck__databasecheck_contactMergeGroupConsistency__block_invoke_4(uint64_t a1, uint64_t a2)
{
  +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":masterEntityId", objc_msgSend(*(id *)(a1 + 32), "rowId"));
  return +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":pseudo", 4);
}

uint64_t __77__SGSqlEntityStore_DatabaseCheck__databasecheck_contactMergeGroupConsistency__block_invoke_5(uint64_t a1, sqlite3_stmt *a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = sqlite3_column_int64(a2, 0);
  return 1;
}

uint64_t __77__SGSqlEntityStore_DatabaseCheck__databasecheck_contactMergeGroupConsistency__block_invoke_6(uint64_t a1, uint64_t a2)
{
  return +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":mergeId", objc_msgSend(*(id *)(a1 + 32), "rowId"));
}

uint64_t __77__SGSqlEntityStore_DatabaseCheck__databasecheck_contactMergeGroupConsistency__block_invoke_7(uint64_t a1, sqlite3_stmt *a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = sqlite3_column_int64(a2, 0);
  return 1;
}

uint64_t __77__SGSqlEntityStore_DatabaseCheck__databasecheck_contactMergeGroupConsistency__block_invoke_2(uint64_t a1, uint64_t a2)
{
  return +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":pseudo", 4);
}

uint64_t __73__SGSqlEntityStore_DatabaseCheck__databasecheck_BrokenEntityIDReferences__block_invoke(uint64_t a1, sqlite3_stmt *pStmt)
{
  int v4;
  void *v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  id v12;

  v4 = sqlite3_column_count(pStmt);
  sqlite3_column_nsstring(pStmt, 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4 >= 2)
  {
    v6 = v4;
    for (i = 1; i != v6; ++i)
    {
      sqlite3_column_nsstring(pStmt, i);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      if (v8)
      {
        objc_msgSend(*(id *)(a1 + 32), "setObject:atIndexedSubscript:", v8, i - 1);
      }
      else
      {
        objc_msgSend(MEMORY[0x1E0C99E38], "null");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 32), "setObject:atIndexedSubscript:", v9, i - 1);

      }
    }
  }
  v10 = objc_alloc(MEMORY[0x1E0CB3940]);
  objc_msgSend(*(id *)(a1 + 32), "_pas_componentsJoinedByString:", CFSTR(" | "));
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_retainAutorelease((id)objc_msgSend(v10, "initWithFormat:", CFSTR("[%@]\t%@"), v5, v11));
  puts((const char *)objc_msgSend(v12, "UTF8String"));

  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
  return 0;
}

uint64_t __73__SGSqlEntityStore_DatabaseCheck__databasecheck_BrokenEntityIDReferences__block_invoke_2(uint64_t a1)
{
  id v2;

  v2 = objc_retainAutorelease((id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("Failed to check for entityId broken reference in %@"), *(_QWORD *)(a1 + 32)));
  puts((const char *)objc_msgSend(v2, "UTF8String"));

  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
  return 0;
}

uint64_t __63__SGSqlEntityStore_DatabaseCheck__databasecheck_IntegrityCheck__block_invoke(uint64_t a1, sqlite3_stmt *a2)
{
  void *v3;
  id v4;

  sqlite3_column_nsstring(a2, 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_retainAutorelease((id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("%@"), v3));
  puts((const char *)objc_msgSend(v4, "UTF8String"));

  if ((objc_msgSend(v3, "isEqualToString:", CFSTR("ok")) & 1) == 0)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;

  return 0;
}

uint64_t __63__SGSqlEntityStore_DatabaseCheck__databasecheck_IntegrityCheck__block_invoke_2(uint64_t a1, void *a2)
{
  objc_class *v3;
  id v4;
  void *v5;
  id v6;

  v3 = (objc_class *)MEMORY[0x1E0CB3940];
  v4 = a2;
  v5 = (void *)objc_msgSend([v3 alloc], "initWithFormat:", CFSTR("Error: failed to run integrity_check on entities.db: %@"), v4);

  v6 = objc_retainAutorelease(v5);
  puts((const char *)objc_msgSend(v6, "UTF8String"));

  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
  return 1;
}

uint64_t __63__SGSqlEntityStore_DatabaseCheck__databasecheck_IntegrityCheck__block_invoke_3(uint64_t a1, void *a2)
{
  objc_class *v3;
  id v4;
  void *v5;
  id v6;

  v3 = (objc_class *)MEMORY[0x1E0CB3940];
  v4 = a2;
  v5 = (void *)objc_msgSend([v3 alloc], "initWithFormat:", CFSTR("Error: failed to run integrity_check on snippets.db: %@"), v4);

  v6 = objc_retainAutorelease(v5);
  puts((const char *)objc_msgSend(v6, "UTF8String"));

  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
  return 1;
}

- (void)registerCachePrecomputationWithCTS
{
  NSObject *v4;
  void *v5;
  void *v6;
  _QWORD v7[5];
  uint8_t buf[16];

  if (-[SGSqliteDatabase isInMemory](self->_db, "isInMemory"))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore+Maintenance.m"), 32, CFSTR("Tried to register cache computation task on an in-memory store"));

  }
  sgLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1C3607000, v4, OS_LOG_TYPE_INFO, "registering cache precomputation work with CTS", buf, 2u);
  }

  +[SGXPCActivityManager sharedInstance](SGXPCActivityManager, "sharedInstance");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __67__SGSqlEntityStore_Maintenance__registerCachePrecomputationWithCTS__block_invoke;
  v7[3] = &unk_1E7DAD750;
  v7[4] = self;
  objc_msgSend(v5, "registerForActivity:handler:", 2, v7);

}

- (void)reportDbStats
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  NSObject *v18;
  NSObject *v19;
  id obj;
  void *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _QWORD v26[4];
  const __CFString *v27;
  uint8_t buf[16];
  _BYTE v29[128];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  -[SGSqlEntityStore dbStats](self, "dbStats");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v21 = v2;
  if (v2)
  {
    v26[0] = MEMORY[0x1E0C809B0];
    v26[1] = 3221225472;
    v26[2] = __46__SGSqlEntityStore_Maintenance__reportDbStats__block_invoke;
    v26[3] = &unk_1E7DAD778;
    v27 = CFSTR("dbstats");
    objc_msgSend(v2, "enumerateKeysAndObjectsUsingBlock:", v26);
    objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("entities"));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    SGEntityTypeDescription();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "objectForKeyedSubscript:", v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "integerValue");

    if (v7 >= 1)
    {
      objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("merged_pseudocontacts"));
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      +[SGAggregateLogging setKeyWithDomain:suffix:toValue:](SGAggregateLogging, "setKeyWithDomain:suffix:toValue:", CFSTR("dbstats"), CFSTR("merged_pseudocontact_percent"), 100 * objc_msgSend(v8, "integerValue") / v7);

    }
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("entities"));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v22, v29, 16);
    if (v10)
    {
      v11 = *(_QWORD *)v23;
      obj = v9;
      do
      {
        for (i = 0; i != v10; ++i)
        {
          if (*(_QWORD *)v23 != v11)
            objc_enumerationMutation(obj);
          v13 = *(_QWORD *)(*((_QWORD *)&v22 + 1) + 8 * i);
          v14 = (void *)MEMORY[0x1C3BD4F6C]();
          objc_msgSend(CFSTR("entityTypes."), "stringByAppendingString:", v13);
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "objectForKeyedSubscript:", CFSTR("entities"));
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "objectForKeyedSubscript:", v13);
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          +[SGAggregateLogging setKeyWithDomain:suffix:toValue:](SGAggregateLogging, "setKeyWithDomain:suffix:toValue:", CFSTR("dbstats"), v15, +[SGAggregateLogging twoSigFigs:](SGAggregateLogging, "twoSigFigs:", v17));

          objc_autoreleasePoolPop(v14);
        }
        v9 = obj;
        v10 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v22, v29, 16);
      }
      while (v10);
    }

    sgLogHandle();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1C3607000, v18, OS_LOG_TYPE_INFO, "reported db stats to AggD", buf, 2u);
    }

    v19 = v27;
  }
  else
  {
    sgLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1C3607000, v19, OS_LOG_TYPE_DEFAULT, "dbStats returned nil during reportDbStats", buf, 2u);
    }
  }

}

- (void)_reportDbStatsBackground
{
  NSObject *v3;
  _QWORD block[5];

  dispatch_get_global_queue(5, 0);
  v3 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __57__SGSqlEntityStore_Maintenance___reportDbStatsBackground__block_invoke;
  block[3] = &unk_1E7DB56F0;
  block[4] = self;
  dispatch_async(v3, block);

}

uint64_t __57__SGSqlEntityStore_Maintenance___reportDbStatsBackground__block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "reportDbStats");
}

void __46__SGSqlEntityStore_Maintenance__reportDbStats__block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;

  v6 = a2;
  v5 = a3;
  if ((objc_msgSend(v6, "isEqualToString:", CFSTR("entities")) & 1) == 0
    && (objc_msgSend(v6, "isEqualToString:", CFSTR("statsCounters")) & 1) == 0
    && (objc_msgSend(v6, "isEqualToString:", CFSTR("urlsCounters")) & 1) == 0
    && (objc_msgSend(v6, "hasPrefix:", CFSTR("reimportRequests_oldest")) & 1) == 0)
  {
    +[SGAggregateLogging setKeyWithDomain:suffix:toValue:](SGAggregateLogging, "setKeyWithDomain:suffix:toValue:", *(_QWORD *)(a1 + 32), v6, +[SGAggregateLogging twoSigFigs:](SGAggregateLogging, "twoSigFigs:", v5));
  }

}

void __67__SGSqlEntityStore_Maintenance__registerCachePrecomputationWithCTS__block_invoke(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  id v9;
  uint64_t v10;
  NSObject *v11;
  id v12;
  NSObject *v13;
  uint8_t v14[16];
  _QWORD v15[5];
  id v16;
  _QWORD block[5];
  id v18;
  os_activity_scope_state_s state;

  v3 = a2;
  v4 = _os_activity_create(&dword_1C3607000, "SGSqlEntityStore cache precomputation due to CTS", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  os_activity_scope_enter(v4, &state);
  v5 = dispatch_group_create();
  v6 = *(_QWORD *)(a1 + 32);
  v7 = MEMORY[0x1E0C809B0];
  v8 = *(NSObject **)(v6 + 192);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __67__SGSqlEntityStore_Maintenance__registerCachePrecomputationWithCTS__block_invoke_2;
  block[3] = &unk_1E7DB6A30;
  block[4] = v6;
  v9 = v3;
  v18 = v9;
  dispatch_group_async(v5, v8, block);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(NSObject **)(v10 + 192);
  v15[0] = v7;
  v15[1] = 3221225472;
  v15[2] = __67__SGSqlEntityStore_Maintenance__registerCachePrecomputationWithCTS__block_invoke_8;
  v15[3] = &unk_1E7DB6A30;
  v15[4] = v10;
  v12 = v9;
  v16 = v12;
  dispatch_group_async(v5, v11, v15);
  dispatch_group_wait(v5, 0xFFFFFFFFFFFFFFFFLL);
  sgLogHandle();
  v13 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v14 = 0;
    _os_log_impl(&dword_1C3607000, v13, OS_LOG_TYPE_INFO, "all async jobs for cache precomputation are done", v14, 2u);
  }

  objc_msgSend(*(id *)(a1 + 32), "_reportDbStatsBackground");
  objc_msgSend(*(id *)(a1 + 32), "clearCaches");

  os_activity_scope_leave(&state);
}

void __67__SGSqlEntityStore_Maintenance__registerCachePrecomputationWithCTS__block_invoke_2(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  NSObject *v4;
  double v5;
  int v6;
  double v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  sgLogHandle();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    LOWORD(v6) = 0;
    _os_log_impl(&dword_1C3607000, v2, OS_LOG_TYPE_INFO, "serializing contacts due to CTS", (uint8_t *)&v6, 2u);
  }

  v3 = (void *)objc_opt_new();
  objc_msgSend(*(id *)(a1 + 32), "updateSerializedContacts:", *(_QWORD *)(a1 + 40));
  sgLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    objc_msgSend(v3, "timeIntervalSinceNow");
    v6 = 134217984;
    v7 = -v5;
    _os_log_impl(&dword_1C3607000, v4, OS_LOG_TYPE_INFO, "Finished updating serialized contacts in %0.3f seconds", (uint8_t *)&v6, 0xCu);
  }

}

uint64_t __67__SGSqlEntityStore_Maintenance__registerCachePrecomputationWithCTS__block_invoke_8(uint64_t a1)
{
  NSObject *v2;
  uint8_t v4[16];

  sgLogHandle();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1C3607000, v2, OS_LOG_TYPE_INFO, "pre-calculating CN to SG contact matches due to CTS", v4, 2u);
  }

  return objc_msgSend(*(id *)(a1 + 32), "updateCNContactMatches:", *(_QWORD *)(a1 + 40));
}

- (BOOL)contactIsSignificant:(id)a3
{
  return -[SGSqlEntityStore contactIsSignificant:usingCoreRecents:](self, "contactIsSignificant:usingCoreRecents:", a3, 1);
}

- (BOOL)contactIsSignificant:(id)a3 usingCoreRecents:(BOOL)a4
{
  _BOOL4 v4;
  id v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  _BOOL4 v13;
  void *v14;
  uint64_t v15;
  BOOL v16;
  NSObject *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  _BOOL4 v24;
  NSObject *v25;
  void *v26;
  void *v27;
  void *v28;
  NSObject *v29;
  const char *v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  void *v36;
  int v37;
  NSObject *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint8_t buf[8];
  _BYTE v52[128];
  _BYTE v53[128];
  _BYTE v54[128];
  uint64_t v55;

  v4 = a4;
  v55 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  if (objc_msgSend(v6, "significance") == 1)
  {
    sgLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_1C3607000, v7, OS_LOG_TYPE_DEBUG, "contact.significance property is true. skipping all other check.", buf, 2u);
    }
LABEL_16:
    v16 = 1;
LABEL_17:

    goto LABEL_18;
  }
  v49 = 0u;
  v50 = 0u;
  v47 = 0u;
  v48 = 0u;
  objc_msgSend(v6, "emailAddresses");
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = -[NSObject countByEnumeratingWithState:objects:count:](v7, "countByEnumeratingWithState:objects:count:", &v47, v54, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v48;
LABEL_6:
    v11 = 0;
    while (1)
    {
      if (*(_QWORD *)v48 != v10)
        objc_enumerationMutation(v7);
      objc_msgSend(*(id *)(*((_QWORD *)&v47 + 1) + 8 * v11), "emailAddress");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = -[SGSqlEntityStore mayHaveSentMessageToEmail:](self, "mayHaveSentMessageToEmail:", v12);

      if (v13)
        break;
      if (v9 == ++v11)
      {
        v9 = -[NSObject countByEnumeratingWithState:objects:count:](v7, "countByEnumeratingWithState:objects:count:", &v47, v54, 16);
        if (v9)
          goto LABEL_6;
        goto LABEL_12;
      }
    }
    sgLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      goto LABEL_15;
    *(_WORD *)buf = 0;
    v30 = "Contact is significant: Found in bloom filter (email)";
    goto LABEL_37;
  }
LABEL_12:

  objc_msgSend(v6, "socialProfiles");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend(v14, "count");

  if (!v15)
  {
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    objc_msgSend(v6, "phones");
    v7 = objc_claimAutoreleasedReturnValue();
    v19 = -[NSObject countByEnumeratingWithState:objects:count:](v7, "countByEnumeratingWithState:objects:count:", &v43, v53, 16);
    if (!v19)
    {
LABEL_27:

      if (v4)
      {
        sgLogHandle();
        v25 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_debug_impl(&dword_1C3607000, v25, OS_LOG_TYPE_DEBUG, "Sender isn't in bloom filter, checking recents", buf, 2u);
        }

        objc_msgSend(v6, "emailAddresses");
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        sgMap();
        v7 = objc_claimAutoreleasedReturnValue();

        objc_msgSend(v6, "phones");
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        sgMap();
        v28 = (void *)objc_claimAutoreleasedReturnValue();

        if (-[SGSqlEntityStore recentsContainSomeOfEmails:phoneNumbers:instantMessageAddresses:](self, "recentsContainSomeOfEmails:phoneNumbers:instantMessageAddresses:", v7, v28, MEMORY[0x1E0C9AA60]))
        {
          sgLogHandle();
          v29 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_debug_impl(&dword_1C3607000, v29, OS_LOG_TYPE_DEBUG, "Contact is significant: Found in recents", buf, 2u);
          }

          goto LABEL_16;
        }

      }
      +[SGSqlEntityStore _cachedVIPEmailAddresses](SGSqlEntityStore, "_cachedVIPEmailAddresses");
      v7 = objc_claimAutoreleasedReturnValue();
      v39 = 0u;
      v40 = 0u;
      v41 = 0u;
      v42 = 0u;
      objc_msgSend(v6, "emailAddresses", 0);
      v31 = objc_claimAutoreleasedReturnValue();
      v32 = -[NSObject countByEnumeratingWithState:objects:count:](v31, "countByEnumeratingWithState:objects:count:", &v39, v52, 16);
      if (v32)
      {
        v33 = v32;
        v34 = *(_QWORD *)v40;
        while (2)
        {
          for (i = 0; i != v33; ++i)
          {
            if (*(_QWORD *)v40 != v34)
              objc_enumerationMutation(v31);
            objc_msgSend(*(id *)(*((_QWORD *)&v39 + 1) + 8 * i), "emailAddress");
            v36 = (void *)objc_claimAutoreleasedReturnValue();
            v37 = -[NSObject containsObject:](v7, "containsObject:", v36);

            if (v37)
            {
              sgLogHandle();
              v38 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)buf = 0;
                _os_log_debug_impl(&dword_1C3607000, v38, OS_LOG_TYPE_DEBUG, "Contact is significant - VIP email address", buf, 2u);
              }

              v16 = 1;
              goto LABEL_53;
            }
          }
          v33 = -[NSObject countByEnumeratingWithState:objects:count:](v31, "countByEnumeratingWithState:objects:count:", &v39, v52, 16);
          if (v33)
            continue;
          break;
        }
      }

      sgLogHandle();
      v31 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_debug_impl(&dword_1C3607000, v31, OS_LOG_TYPE_DEBUG, "Contact is not significant", buf, 2u);
      }
      v16 = 0;
LABEL_53:

      goto LABEL_17;
    }
    v20 = v19;
    v21 = *(_QWORD *)v44;
LABEL_21:
    v22 = 0;
    while (1)
    {
      if (*(_QWORD *)v44 != v21)
        objc_enumerationMutation(v7);
      objc_msgSend(*(id *)(*((_QWORD *)&v43 + 1) + 8 * v22), "phoneNumber");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v24 = -[SGSqlEntityStore mayHaveSentMessageToHandle:](self, "mayHaveSentMessageToHandle:", v23);

      if (v24)
        break;
      if (v20 == ++v22)
      {
        v20 = -[NSObject countByEnumeratingWithState:objects:count:](v7, "countByEnumeratingWithState:objects:count:", &v43, v53, 16);
        if (v20)
          goto LABEL_21;
        goto LABEL_27;
      }
    }
    sgLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      goto LABEL_15;
    *(_WORD *)buf = 0;
    v30 = "Contact is significant: Found in bloom filter (phone)";
LABEL_37:
    _os_log_debug_impl(&dword_1C3607000, v17, OS_LOG_TYPE_DEBUG, v30, buf, 2u);
LABEL_15:

    goto LABEL_16;
  }
  v16 = 1;
LABEL_18:

  return v16;
}

- (BOOL)contactIsSignificantOrSignificanceIsDisabled:(id)a3
{
  return -[SGSqlEntityStore contactIsSignificantOrSignificanceIsDisabled:usingCoreRecents:](self, "contactIsSignificantOrSignificanceIsDisabled:usingCoreRecents:", a3, 1);
}

- (BOOL)contactIsSignificantOrSignificanceIsDisabled:(id)a3 usingCoreRecents:(BOOL)a4
{
  NSObject *v5;
  uint8_t v6[16];

  if (!-[SGSqlEntityStore contactIsSignificant:usingCoreRecents:](self, "contactIsSignificant:usingCoreRecents:", a3, a4))
  {
    if ((objc_msgSend(MEMORY[0x1E0D198F0], "onlyShowSignificantPseudoContacts") & 1) != 0)
      return 0;
    sgLogHandle();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v6 = 0;
      _os_log_debug_impl(&dword_1C3607000, v5, OS_LOG_TYPE_DEBUG, "Contact is not significant, but selecting anyway due to preference setting", v6, 2u);
    }

  }
  return 1;
}

- (BOOL)realtimeContactIsSignificant:(id)a3
{
  id v4;
  NSObject *v5;
  BOOL v6;
  void *v7;
  uint8_t v9[16];

  v4 = a3;
  if (objc_msgSend(v4, "state") == 2)
  {
    sgLogHandle();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v9 = 0;
      _os_log_debug_impl(&dword_1C3607000, v5, OS_LOG_TYPE_DEBUG, "Contact is significant: Update to curated contact", v9, 2u);
    }

    v6 = 1;
  }
  else
  {
    objc_msgSend(v4, "contact");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = -[SGSqlEntityStore contactIsSignificant:](self, "contactIsSignificant:", v7);

  }
  return v6;
}

- (BOOL)realtimeContactIsSignificantOrSignificanceIsDisabled:(id)a3
{
  NSObject *v4;
  uint8_t v5[16];

  if (!-[SGSqlEntityStore realtimeContactIsSignificant:](self, "realtimeContactIsSignificant:", a3))
  {
    if ((objc_msgSend(MEMORY[0x1E0D198F0], "onlyShowSignificantPseudoContacts") & 1) != 0)
      return 0;
    sgLogHandle();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v5 = 0;
      _os_log_debug_impl(&dword_1C3607000, v4, OS_LOG_TYPE_DEBUG, "Realtime contact is not significant, but selecting anyway due to preference setting", v5, 2u);
    }

  }
  return 1;
}

- (BOOL)anyEmailAddressIsSignificant:(id)a3
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  _BOOL4 v9;
  NSObject *v10;
  _BOOL4 v11;
  BOOL v12;
  NSObject *v13;
  uint8_t v15[16];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v4 = a3;
  v5 = -[NSObject countByEnumeratingWithState:objects:count:](v4, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v17;
    while (2)
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v17 != v7)
          objc_enumerationMutation(v4);
        if (-[SGSqlEntityStore mayHaveSentMessageToEmail:](self, "mayHaveSentMessageToEmail:", *(_QWORD *)(*((_QWORD *)&v16 + 1) + 8 * i)))
        {
          sgLogHandle();
          v13 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)v15 = 0;
            _os_log_debug_impl(&dword_1C3607000, v13, OS_LOG_TYPE_DEBUG, "Email Address is significant: Found in bloom filter", v15, 2u);
          }

          v12 = 1;
          v10 = v4;
          goto LABEL_19;
        }
      }
      v6 = -[NSObject countByEnumeratingWithState:objects:count:](v4, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
      if (v6)
        continue;
      break;
    }
  }

  v9 = -[SGSqlEntityStore recentsContainSomeOfEmails:phoneNumbers:instantMessageAddresses:](self, "recentsContainSomeOfEmails:phoneNumbers:instantMessageAddresses:", v4, MEMORY[0x1E0C9AA60], MEMORY[0x1E0C9AA60]);
  sgLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG);
  if (v9)
  {
    if (v11)
    {
      *(_WORD *)v15 = 0;
      _os_log_debug_impl(&dword_1C3607000, v10, OS_LOG_TYPE_DEBUG, "Email Address is significant: Found in recents", v15, 2u);
    }
    v12 = 1;
  }
  else
  {
    if (v11)
    {
      *(_WORD *)v15 = 0;
      _os_log_debug_impl(&dword_1C3607000, v10, OS_LOG_TYPE_DEBUG, "Email Address is not significant", v15, 2u);
    }
    v12 = 0;
  }
LABEL_19:

  return v12;
}

- (BOOL)anyHandleIsSignificant:(id)a3
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t j;
  void *v16;
  NSObject *v17;
  _BOOL4 v18;
  NSObject *v19;
  _BOOL4 v20;
  const char *v21;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint8_t buf[16];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[128];
  _BYTE v33[128];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v4 = a3;
  v5 = -[NSObject countByEnumeratingWithState:objects:count:](v4, "countByEnumeratingWithState:objects:count:", &v28, v33, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v29;
    while (2)
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v29 != v7)
          objc_enumerationMutation(v4);
        if (-[SGSqlEntityStore mayHaveSentMessageToHandle:](self, "mayHaveSentMessageToHandle:", *(_QWORD *)(*((_QWORD *)&v28 + 1) + 8 * i)))
        {
          sgLogHandle();
          v10 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_debug_impl(&dword_1C3607000, v10, OS_LOG_TYPE_DEBUG, "Handle is significant: Found in bloom filter", buf, 2u);
          }
          LOBYTE(v18) = 1;
          v9 = v4;
          goto LABEL_27;
        }
      }
      v6 = -[NSObject countByEnumeratingWithState:objects:count:](v4, "countByEnumeratingWithState:objects:count:", &v28, v33, 16);
      if (v6)
        continue;
      break;
    }
  }

  v9 = objc_opt_new();
  v10 = objc_opt_new();
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v11 = v4;
  v12 = -[NSObject countByEnumeratingWithState:objects:count:](v11, "countByEnumeratingWithState:objects:count:", &v23, v32, 16);
  if (v12)
  {
    v13 = v12;
    v14 = *(_QWORD *)v24;
    do
    {
      for (j = 0; j != v13; ++j)
      {
        if (*(_QWORD *)v24 != v14)
          objc_enumerationMutation(v11);
        v16 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * j);
        if (objc_msgSend(v16, "containsString:", CFSTR("@"), (_QWORD)v23))
          v17 = v10;
        else
          v17 = v9;
        -[NSObject addObject:](v17, "addObject:", v16);
      }
      v13 = -[NSObject countByEnumeratingWithState:objects:count:](v11, "countByEnumeratingWithState:objects:count:", &v23, v32, 16);
    }
    while (v13);
  }

  v18 = -[SGSqlEntityStore recentsContainSomeOfEmails:phoneNumbers:instantMessageAddresses:](self, "recentsContainSomeOfEmails:phoneNumbers:instantMessageAddresses:", v10, v9, v10);
  sgLogHandle();
  v19 = objc_claimAutoreleasedReturnValue();
  v20 = os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG);
  if (v18)
  {
    if (v20)
    {
      *(_WORD *)buf = 0;
      v21 = "Handle is significant: Found in recents";
LABEL_29:
      _os_log_debug_impl(&dword_1C3607000, v19, OS_LOG_TYPE_DEBUG, v21, buf, 2u);
    }
  }
  else if (v20)
  {
    *(_WORD *)buf = 0;
    v21 = "Handle is not significant";
    goto LABEL_29;
  }

LABEL_27:
  return v18;
}

- (void)setCRLookupForTesting:(id)a3
{
  void *v4;
  id crLookup;

  v4 = (void *)MEMORY[0x1C3BD5158](a3, a2);
  crLookup = self->_crLookup;
  self->_crLookup = v4;

}

- (BOOL)recentsContainSomeOfEmails:(id)a3 phoneNumbers:(id)a4 instantMessageAddresses:(id)a5
{
  id v8;
  id v9;
  id v10;
  NSObject *v11;
  char v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  dispatch_semaphore_t v35;
  void *v36;
  NSObject *v37;
  unsigned __int8 v38;
  NSObject *v39;
  const char *v40;
  void *v42;
  uint8_t v43[16];
  _QWORD v44[4];
  NSObject *v45;
  uint8_t *v46;
  uint8_t buf[8];
  uint8_t *v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  _QWORD v52[2];
  uint64_t v53;
  _QWORD v54[2];
  uint64_t v55;
  _QWORD v56[2];
  _QWORD v57[5];

  v57[3] = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  if (!self->_crLookup)
  {
    v42 = (void *)objc_opt_new();
    v13 = *MEMORY[0x1E0D18278];
    v57[0] = *MEMORY[0x1E0D18268];
    v57[1] = v13;
    v57[2] = *MEMORY[0x1E0D18260];
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v57, 3);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v42, "setDomains:", v14);

    v15 = (void *)objc_opt_new();
    if (objc_msgSend(v8, "count"))
    {
      v16 = (void *)MEMORY[0x1E0D18298];
      v55 = *MEMORY[0x1E0D18208];
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v55, 1);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "predicateForKey:inCollection:", *MEMORY[0x1E0D18248], v17);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v56[0] = v18;
      objc_msgSend(MEMORY[0x1E0D18298], "predicateForKey:inCollection:", *MEMORY[0x1E0D18238], v8);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v56[1] = v19;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v56, 2);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "predicateSatisfyingAllSubpredicates:", v20);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "addObject:", v21);

    }
    if (objc_msgSend(v9, "count"))
    {
      v22 = (void *)MEMORY[0x1E0D18298];
      v53 = *MEMORY[0x1E0D18228];
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v53, 1);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "predicateForKey:inCollection:", *MEMORY[0x1E0D18248], v23);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      v54[0] = v24;
      objc_msgSend(MEMORY[0x1E0D18298], "predicateForKey:inCollection:", *MEMORY[0x1E0D18238], v9);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      v54[1] = v25;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v54, 2);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "predicateSatisfyingAllSubpredicates:", v26);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "addObject:", v27);

    }
    if (objc_msgSend(v10, "count"))
    {
      v28 = (void *)MEMORY[0x1E0D18298];
      v51 = *MEMORY[0x1E0D18218];
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v51, 1);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v28, "predicateForKey:inCollection:", *MEMORY[0x1E0D18248], v29);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      v52[0] = v30;
      objc_msgSend(MEMORY[0x1E0D18298], "predicateForKey:inCollection:", *MEMORY[0x1E0D18238], v10);
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      v52[1] = v31;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v52, 2);
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v28, "predicateSatisfyingAllSubpredicates:", v32);
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "addObject:", v33);

    }
    if (!objc_msgSend(v15, "count"))
    {
      v12 = 0;
LABEL_18:

      goto LABEL_19;
    }
    objc_msgSend(MEMORY[0x1E0D18298], "predicateSatisfyingAnySubpredicate:", v15);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v42, "setSearchPredicate:", v34);

    *(_QWORD *)buf = 0;
    v48 = buf;
    v49 = 0x2020000000;
    v50 = 0;
    v35 = dispatch_semaphore_create(0);
    objc_msgSend(MEMORY[0x1E0D18290], "defaultInstance");
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    v44[0] = MEMORY[0x1E0C809B0];
    v44[1] = 3221225472;
    v44[2] = __98__SGSqlEntityStore_Significance__recentsContainSomeOfEmails_phoneNumbers_instantMessageAddresses___block_invoke;
    v44[3] = &unk_1E7DAE0E8;
    v46 = buf;
    v37 = v35;
    v45 = v37;
    objc_msgSend(v36, "performRecentsSearch:queue:completion:", v42, 0, v44);

    objc_msgSend(MEMORY[0x1E0D81598], "waitForSemaphore:timeoutSeconds:", v37, 1.0);
    v38 = atomic_load(v48 + 24);
    if ((v38 & 1) != 0)
    {
      sgLogHandle();
      v39 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)v43 = 0;
        v40 = "Found email in recents";
LABEL_21:
        _os_log_debug_impl(&dword_1C3607000, v39, OS_LOG_TYPE_DEBUG, v40, v43, 2u);
      }
    }
    else
    {
      sgLogHandle();
      v39 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)v43 = 0;
        v40 = "Email was not found in recents";
        goto LABEL_21;
      }
    }

    v12 = v38 & 1;
    _Block_object_dispose(buf, 8);
    goto LABEL_18;
  }
  sgLogHandle();
  v11 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_debug_impl(&dword_1C3607000, v11, OS_LOG_TYPE_DEBUG, "Looking up in custom tester function instead of actually hitting recents", buf, 2u);
  }

  v12 = (*((uint64_t (**)(void))self->_crLookup + 2))();
LABEL_19:

  return v12;
}

- (BOOL)mayHaveSentMessageToEmail:(id)a3
{
  SGBloomFilter *messageRecipients;
  void *v4;

  messageRecipients = self->_messageRecipients;
  SGNormalizeEmailAddress();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(messageRecipients) = -[SGBloomFilter exists:](messageRecipients, "exists:", v4);

  return (char)messageRecipients;
}

- (void)registerSentMailMessage:(id)a3
{
  id v3;
  void (**v4)(_QWORD, _QWORD);
  void *v5;
  void *v6;
  void *v7;
  _QWORD v8[5];

  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __58__SGSqlEntityStore_Significance__registerSentMailMessage___block_invoke;
  v8[3] = &unk_1E7DB6610;
  v8[4] = self;
  v3 = a3;
  v4 = (void (**)(_QWORD, _QWORD))MEMORY[0x1C3BD5158](v8);
  objc_msgSend(v3, "to");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  ((void (**)(_QWORD, void *))v4)[2](v4, v5);

  objc_msgSend(v3, "cc");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  ((void (**)(_QWORD, void *))v4)[2](v4, v6);

  objc_msgSend(v3, "bcc");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  ((void (**)(_QWORD, void *))v4)[2](v4, v7);
}

- (id)normalizeHandleForRecipientFilterAndRemoveFromDetailsCache:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;

  v4 = a3;
  if (!objc_msgSend(v4, "containsString:", CFSTR("@")))
  {
    if ((unint64_t)objc_msgSend(v4, "length") >= 5)
    {
      CFCharacterSetGetPredefined(kCFCharacterSetDecimalDigit);
      _PASKeepOnlyCharacterSet();
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      if ((unint64_t)objc_msgSend(v6, "length") >= 5)
      {
        v7 = objc_msgSend(v4, "length");
        if ((unint64_t)(v7 - objc_msgSend(v6, "length")) < 8)
        {
          SGNormalizePhoneNumber();
          v5 = (void *)objc_claimAutoreleasedReturnValue();
          -[SGSqlEntityStore removeStringFromNoContactsCache:](self, "removeStringFromNoContactsCache:", v5);

          goto LABEL_9;
        }
      }

    }
    v5 = 0;
    goto LABEL_9;
  }
  SGNormalizeEmailAddress();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[SGSqlEntityStore removeStringFromNoContactsCache:](self, "removeStringFromNoContactsCache:", v5);
LABEL_9:

  return v5;
}

- (BOOL)mayHaveSentMessageToHandle:(id)a3
{
  void *v4;
  BOOL v5;

  -[SGSqlEntityStore normalizeHandleForRecipientFilterAndRemoveFromDetailsCache:](self, "normalizeHandleForRecipientFilterAndRemoveFromDetailsCache:", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
    v5 = -[SGBloomFilter exists:](self->_messageRecipients, "exists:", v4);
  else
    v5 = 0;

  return v5;
}

- (void)registerSentTextMessage:(id)a3
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];
  _BYTE v25[128];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  objc_msgSend(a3, "recipients");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v20, v25, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v21;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v21 != v7)
          objc_enumerationMutation(v4);
        v9 = *(void **)(*((_QWORD *)&v20 + 1) + 8 * v8);
        v16 = 0u;
        v17 = 0u;
        v18 = 0u;
        v19 = 0u;
        objc_msgSend(v9, "handles", 0);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v16, v24, 16);
        if (v11)
        {
          v12 = v11;
          v13 = *(_QWORD *)v17;
          do
          {
            v14 = 0;
            do
            {
              if (*(_QWORD *)v17 != v13)
                objc_enumerationMutation(v10);
              -[SGSqlEntityStore normalizeHandleForRecipientFilterAndRemoveFromDetailsCache:](self, "normalizeHandleForRecipientFilterAndRemoveFromDetailsCache:", *(_QWORD *)(*((_QWORD *)&v16 + 1) + 8 * v14));
              v15 = (void *)objc_claimAutoreleasedReturnValue();
              if (v15)
                -[SGBloomFilter add:](self->_messageRecipients, "add:", v15);

              ++v14;
            }
            while (v12 != v14);
            v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v16, v24, 16);
          }
          while (v12);
        }

        ++v8;
      }
      while (v8 != v6);
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v20, v25, 16);
    }
    while (v6);
  }

}

void __58__SGSqlEntityStore_Significance__registerSentMailMessage___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v3 = a2;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v15;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v15 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * v7);
        v9 = (void *)MEMORY[0x1C3BD4F6C](v4);
        objc_msgSend(v8, "emailAddress", (_QWORD)v14);
        v10 = (void *)objc_claimAutoreleasedReturnValue();

        if (v10)
        {
          v11 = *(void **)(a1 + 32);
          objc_msgSend(v8, "emailAddress");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v11, "normalizeHandleForRecipientFilterAndRemoveFromDetailsCache:", v12);
          v13 = (void *)objc_claimAutoreleasedReturnValue();

          if (v13)
            objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 200), "add:", v13);

        }
        objc_autoreleasePoolPop(v9);
        ++v7;
      }
      while (v5 != v7);
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      v5 = v4;
    }
    while (v4);
  }

}

void __98__SGSqlEntityStore_Significance__recentsContainSomeOfEmails_phoneNumbers_instantMessageAddresses___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  void *v11;
  const __CFString *v12;
  int v13;
  const __CFString *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (v6)
  {
    sgLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      objc_msgSend(v6, "description");
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = (void *)v10;
      v12 = CFSTR("(nil)");
      if (v10)
        v12 = (const __CFString *)v10;
      v13 = 138412290;
      v14 = v12;
      _os_log_error_impl(&dword_1C3607000, v7, OS_LOG_TYPE_ERROR, "Unable to search recents; error: %@",
        (uint8_t *)&v13,
        0xCu);

    }
  }
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  if (v5)
    v9 = objc_msgSend(v5, "count") != 0;
  else
    v9 = 0;
  atomic_store(v9, (unsigned __int8 *)(v8 + 24));
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));

}

uint64_t __72__SGSqlEntityStore_Significance__contactIsSignificant_usingCoreRecents___block_invoke_2(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "phoneNumber");
}

uint64_t __72__SGSqlEntityStore_Significance__contactIsSignificant_usingCoreRecents___block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "emailAddress");
}

+ (id)_cachedVIPEmailAddresses
{
  id v2;
  void *v3;
  void *v4;

  if (_cachedVIPEmailAddresses)
  {
    v2 = (id)_cachedVIPEmailAddresses;
  }
  else
  {
    +[SGMailClientUtil sharedInstance](SGMailClientUtil, "sharedInstance");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "allVIPEmailAddresses");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v2 = (id)objc_msgSend(v4, "copy");

  }
  return v2;
}

+ (void)setCachedVIPEmailAddresses:(id)a3
{
  uint64_t v3;
  void *v4;

  v3 = objc_msgSend(a3, "copy");
  v4 = (void *)_cachedVIPEmailAddresses;
  _cachedVIPEmailAddresses = v3;

}

- (int64_t)commitContactDetail:(id)a3
{
  id v4;
  uint64_t v5;
  id v6;
  void *v7;
  SGSqliteDatabase *db;
  id v9;
  id v10;
  int64_t v11;
  _QWORD v13[5];
  id v14;
  __CFString *v15;
  id v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[4];
  id v23;
  SGSqlEntityStore *v24;

  v4 = a3;
  v5 = MEMORY[0x1E0C809B0];
  v22[0] = MEMORY[0x1E0C809B0];
  v22[1] = 3221225472;
  v22[2] = __56__SGSqlEntityStore_ContactDetails__commitContactDetail___block_invoke;
  v22[3] = &unk_1E7DB6E80;
  v6 = v4;
  v23 = v6;
  v24 = self;
  v7 = (void *)MEMORY[0x1C3BD5158](v22);
  v18 = 0;
  v19 = &v18;
  v20 = 0x2020000000;
  v21 = 0;
  db = self->_db;
  v13[0] = v5;
  v13[1] = 3221225472;
  v13[2] = __56__SGSqlEntityStore_ContactDetails__commitContactDetail___block_invoke_2;
  v13[3] = &unk_1E7DB6B50;
  v13[4] = self;
  v9 = v6;
  v17 = &v18;
  v14 = v9;
  v15 = CFSTR("INSERT INTO contactDetails (entityId, duplicateKey, sourceKey, label, value, type, extractionInfoId) VALUES (:entityId, :duplicateKey, :sourceKey, :label, :value, :type, :extractionInfoId)");
  v10 = v7;
  v16 = v10;
  -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v13);
  v11 = v19[3];

  _Block_object_dispose(&v18, 8);
  return v11;
}

- (int64_t)contactDetailPrimaryKeyForDuplicateKey:(id)a3
{
  id v4;
  SGSqliteDatabase *db;
  uint64_t v6;
  id v7;
  int64_t v8;
  _QWORD v10[5];
  _QWORD v11[4];
  id v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  v4 = a3;
  v13 = 0;
  v14 = &v13;
  v15 = 0x2020000000;
  v16 = -1;
  db = self->_db;
  v6 = MEMORY[0x1E0C809B0];
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __75__SGSqlEntityStore_ContactDetails__contactDetailPrimaryKeyForDuplicateKey___block_invoke;
  v11[3] = &unk_1E7DB74A0;
  v7 = v4;
  v12 = v7;
  v10[0] = v6;
  v10[1] = 3221225472;
  v10[2] = __75__SGSqlEntityStore_ContactDetails__contactDetailPrimaryKeyForDuplicateKey___block_invoke_2;
  v10[3] = &unk_1E7DB7510;
  v10[4] = &v13;
  -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](db, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("SELECT id FROM contactDetails WHERE duplicateKey = :duplicateKey"), v11, v10, 0);
  v8 = v14[3];

  _Block_object_dispose(&v13, 8);
  return v8;
}

- (id)contactDetailEntityIdForDuplicateKey:(id)a3
{
  id v4;
  SGSqliteDatabase *db;
  uint64_t v6;
  id v7;
  void *v8;
  _QWORD v10[6];
  _QWORD v11[4];
  id v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;

  v4 = a3;
  v17 = 0;
  v18 = &v17;
  v19 = 0x2020000000;
  v20 = 0;
  v13 = 0;
  v14 = &v13;
  v15 = 0x2020000000;
  v16 = 0;
  db = self->_db;
  v6 = MEMORY[0x1E0C809B0];
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __73__SGSqlEntityStore_ContactDetails__contactDetailEntityIdForDuplicateKey___block_invoke;
  v11[3] = &unk_1E7DB74A0;
  v7 = v4;
  v12 = v7;
  v10[0] = v6;
  v10[1] = 3221225472;
  v10[2] = __73__SGSqlEntityStore_ContactDetails__contactDetailEntityIdForDuplicateKey___block_invoke_2;
  v10[3] = &unk_1E7DB4668;
  v10[4] = &v17;
  v10[5] = &v13;
  -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](db, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("SELECT entityId FROM contactDetails WHERE duplicateKey = :duplicateKey"), v11, v10, 0);
  if (*((_BYTE *)v14 + 24))
  {
    objc_msgSend(MEMORY[0x1E0D19920], "recordIdWithNumericValue:", v18[3]);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v8 = 0;
  }

  _Block_object_dispose(&v13, 8);
  _Block_object_dispose(&v17, 8);

  return v8;
}

- (id)loadAllContactDetailsFromTableForRecordId:(id)a3 type:(unint64_t)a4
{
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  -[SGSqlEntityStore loadAllContactDetailsFromTableForRecordId:](self, "loadAllContactDetailsFromTableForRecordId:", a3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)objc_opt_new();
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v7 = v5;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v15;
    do
    {
      for (i = 0; i != v9; ++i)
      {
        if (*(_QWORD *)v15 != v10)
          objc_enumerationMutation(v7);
        v12 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * i);
        if (objc_msgSend(v12, "type", (_QWORD)v14) == a4)
          objc_msgSend(v6, "addObject:", v12);
      }
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    }
    while (v9);
  }

  return v6;
}

- (id)loadAllContactDetailsFromTableForRecordId:(id)a3
{
  id v4;
  uint64_t v5;
  id v6;
  void *v7;
  SGSqliteDatabase *snippetDb;
  id v9;
  void *v10;
  SGSqliteDatabase *db;
  id v12;
  id v13;
  _QWORD v15[5];
  id v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t);
  void (*v23)(uint64_t);
  id v24;
  _QWORD v25[4];
  id v26;
  _QWORD v27[5];
  _QWORD v28[5];
  id v29;
  _QWORD v30[4];
  id v31;

  v4 = a3;
  v5 = MEMORY[0x1E0C809B0];
  v30[0] = MEMORY[0x1E0C809B0];
  v30[1] = 3221225472;
  v30[2] = __78__SGSqlEntityStore_ContactDetails__loadAllContactDetailsFromTableForRecordId___block_invoke;
  v30[3] = &unk_1E7DB74A0;
  v6 = v4;
  v31 = v6;
  v7 = (void *)MEMORY[0x1C3BD5158](v30);
  v28[0] = 0;
  v28[1] = v28;
  v28[2] = 0x3032000000;
  v28[3] = __Block_byref_object_copy__18382;
  v28[4] = __Block_byref_object_dispose__18383;
  v29 = 0;
  snippetDb = self->_snippetDb;
  v27[0] = v5;
  v27[1] = 3221225472;
  v27[2] = __78__SGSqlEntityStore_ContactDetails__loadAllContactDetailsFromTableForRecordId___block_invoke_20;
  v27[3] = &unk_1E7DB7510;
  v27[4] = v28;
  -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](snippetDb, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("SELECT content FROM snippets WHERE entityId = :entityId"), v7, v27, 0);
  v25[0] = v5;
  v25[1] = 3221225472;
  v25[2] = __78__SGSqlEntityStore_ContactDetails__loadAllContactDetailsFromTableForRecordId___block_invoke_2;
  v25[3] = &unk_1E7DB74A0;
  v9 = v6;
  v26 = v9;
  v10 = (void *)MEMORY[0x1C3BD5158](v25);
  v19 = 0;
  v20 = &v19;
  v21 = 0x3032000000;
  v22 = __Block_byref_object_copy__18382;
  v23 = __Block_byref_object_dispose__18383;
  v24 = 0;
  v24 = (id)objc_opt_new();
  db = self->_db;
  v15[0] = v5;
  v15[1] = 3221225472;
  v15[2] = __78__SGSqlEntityStore_ContactDetails__loadAllContactDetailsFromTableForRecordId___block_invoke_3;
  v15[3] = &unk_1E7DAE690;
  v15[4] = self;
  v12 = v9;
  v16 = v12;
  v17 = v28;
  v18 = &v19;
  -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](db, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("SELECT value, label, type, duplicateKey, sourceKey, extractionInfoId FROM contactDetails WHERE entityId = :entityId OR entityId IN (SELECT e.id FROM entity AS e INNER JOIN entityParentage AS ep ON e.id = ep.childId WHERE e.masterEntityId = :entityId)"), v10, v15, 0);
  v13 = (id)v20[5];

  _Block_object_dispose(&v19, 8);
  _Block_object_dispose(v28, 8);

  return v13;
}

void __78__SGSqlEntityStore_ContactDetails__loadAllContactDetailsFromTableForRecordId___block_invoke(uint64_t a1, void *a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  objc_msgSend(v3, "bindNamedParam:toInt64:", ":entityId", objc_msgSend(v2, "numericValue"));

}

uint64_t __78__SGSqlEntityStore_ContactDetails__loadAllContactDetailsFromTableForRecordId___block_invoke_20(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  objc_msgSend(a2, "getNSStringForColumn:", 0);
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

  return 1;
}

void __78__SGSqlEntityStore_ContactDetails__loadAllContactDetailsFromTableForRecordId___block_invoke_2(uint64_t a1, void *a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  objc_msgSend(v3, "bindNamedParam:toInt64:", ":entityId", objc_msgSend(v2, "numericValue"));

}

uint64_t __78__SGSqlEntityStore_ContactDetails__loadAllContactDetailsFromTableForRecordId___block_invoke_3(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  SGDuplicateKey *v12;
  void *v13;
  unsigned __int8 *v14;

  v3 = a2;
  objc_msgSend(v3, "nonnullNSStringForColumnName:table:", "value", 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "getNSStringForColumnName:table:", "label", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v3, "getInt64ForColumnName:table:", "type", 0);
  objc_msgSend(v3, "nonnullNSStringForColumnName:table:", "duplicateKey", 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "getNSStringForColumnName:table:", "sourceKey", 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v3, "getInt64ForColumnName:table:", "extractionInfoId", 0);

  objc_msgSend(*(id *)(a1 + 32), "loadExtractionInfoForPrimaryKey:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = *(_QWORD *)(a1 + 40);
  v12 = -[SGDuplicateKey initWithSerialized:]([SGDuplicateKey alloc], "initWithSerialized:", v7);
  +[SGContactDetail contactDetail:label:type:recordId:duplicateKey:sourceKey:context:extractionInfo:](SGContactDetail, "contactDetail:label:type:recordId:duplicateKey:sourceKey:context:extractionInfo:", v4, v5, v6, v11, v12, v8, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), v10);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "addObject:", v13);
  v14 = (unsigned __int8 *)MEMORY[0x1E0D81780];

  return *v14;
}

void __73__SGSqlEntityStore_ContactDetails__contactDetailEntityIdForDuplicateKey___block_invoke(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  id v4;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  objc_msgSend(v2, "serialize");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "bindNamedParam:toNSString:", ":duplicateKey", v4);

}

uint64_t __73__SGSqlEntityStore_ContactDetails__contactDetailEntityIdForDuplicateKey___block_invoke_2(uint64_t a1, void *a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_msgSend(a2, "getIntegerForColumn:", 0);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  return 1;
}

void __75__SGSqlEntityStore_ContactDetails__contactDetailPrimaryKeyForDuplicateKey___block_invoke(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  id v4;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  objc_msgSend(v2, "serialize");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "bindNamedParam:toNSString:", ":duplicateKey", v4);

}

uint64_t __75__SGSqlEntityStore_ContactDetails__contactDetailPrimaryKeyForDuplicateKey___block_invoke_2(uint64_t a1, void *a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_msgSend(a2, "getInt64ForColumn:", 0);
  return 1;
}

void __56__SGSqlEntityStore_ContactDetails__commitContactDetail___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  id v13;

  v3 = *(void **)(a1 + 32);
  v13 = a2;
  objc_msgSend(v3, "recordId");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "bindNamedParam:toInt64:", ":entityId", objc_msgSend(v4, "numericValue"));

  objc_msgSend(*(id *)(a1 + 32), "duplicateKey");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "serialize");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "bindNamedParam:toNSString:", ":duplicateKey", v6);

  objc_msgSend(*(id *)(a1 + 32), "sourceKey");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "bindNamedParam:toNSString:", ":sourceKey", v7);

  objc_msgSend(*(id *)(a1 + 32), "label");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "bindNamedParam:toNSString:", ":label", v8);

  objc_msgSend(*(id *)(a1 + 32), "value");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "bindNamedParam:toNSString:", ":value", v9);

  objc_msgSend(v13, "bindNamedParam:toInt64:", ":type", objc_msgSend(*(id *)(a1 + 32), "type"));
  v10 = *(void **)(a1 + 40);
  objc_msgSend(*(id *)(a1 + 32), "extractionInfo");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v10, "commitExtractionInfo:", v11);

  objc_msgSend(v13, "bindNamedParam:toInt64:", ":extractionInfoId", v12);
}

void __56__SGSqlEntityStore_ContactDetails__commitContactDetail___block_invoke_2(uint64_t a1)
{
  void *v2;
  void *v3;
  sqlite3_int64 insert_rowid;

  v2 = *(void **)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 40), "duplicateKey");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  insert_rowid = objc_msgSend(v2, "contactDetailPrimaryKeyForDuplicateKey:", v3);

  if (insert_rowid < 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "prepAndRunSQL:onPrep:onRow:onError:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), 0, 0);
    insert_rowid = sqlite3_last_insert_rowid((sqlite3 *)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "handle"));
  }
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = insert_rowid;
}

- (void)writeInteractionEventEntities:(id)a3
{
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  void *v11;
  BOOL v12;
  void *v13;
  _BOOL4 v14;
  void *v15;
  void *v16;
  SGSqliteDatabase *db;
  void *v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t j;
  SEL v24;
  id v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _QWORD v30[6];
  id v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _QWORD v36[3];
  _BYTE v37[128];
  void *v38;
  _BYTE v39[128];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v25 = a3;
  v36[2] = 0;
  v36[0] = CFSTR("writeInteractionEventEntities");
  v36[1] = mach_absolute_time();
  if ((objc_msgSend(MEMORY[0x1E0D198F0], "shouldHarvestEvents") & 1) != 0)
  {
    v5 = (void *)objc_opt_new();
    v24 = a2;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v6 = v25;
    v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v32, v39, 16);
    if (v7)
    {
      v8 = *(_QWORD *)v33;
      do
      {
        for (i = 0; i != v7; ++i)
        {
          if (*(_QWORD *)v33 != v8)
            objc_enumerationMutation(v6);
          v10 = *(void **)(*((_QWORD *)&v32 + 1) + 8 * i);
          objc_msgSend(v10, "duplicateKey");
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          v12 = objc_msgSend(v11, "entityType") == 16;

          if (!v12)
          {
            objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v18, "handleFailureInMethod:object:file:lineNumber:description:", v24, self, CFSTR("SGSqlEntityStore+Writing.m"), 91, CFSTR("Do not call writeInteractionEventEntities with non-interaction entity type."));

          }
          objc_msgSend(v10, "duplicateKey");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          v14 = v13 == 0;

          if (v14)
          {
            objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v19, "handleFailureInMethod:object:file:lineNumber:description:", v24, self, CFSTR("SGSqlEntityStore+Writing.m"), 92, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("containerEntity.duplicateKey"));

          }
          objc_msgSend(v10, "validate");
          if (objc_msgSend(v10, "state") == 2)
          {
            objc_msgSend(v10, "duplicateKey");
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            v38 = v15;
            objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v38, 1);
            v16 = (void *)objc_claimAutoreleasedReturnValue();
            -[SGSqlEntityStore deleteEntitiesByDuplicateKey:emitChangeNotifications:](self, "deleteEntitiesByDuplicateKey:emitChangeNotifications:", v16, 1);

          }
          else
          {
            db = self->_db;
            v30[0] = MEMORY[0x1E0C809B0];
            v30[1] = 3221225472;
            v30[2] = __59__SGSqlEntityStore_Writing__writeInteractionEventEntities___block_invoke;
            v30[3] = &unk_1E7DB7800;
            v30[4] = self;
            v30[5] = v10;
            v31 = v5;
            -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v30);

          }
        }
        v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v32, v39, 16);
      }
      while (v7);
    }

    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v20 = v6;
    v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v26, v37, 16);
    if (v21)
    {
      v22 = *(_QWORD *)v27;
      do
      {
        for (j = 0; j != v21; ++j)
        {
          if (*(_QWORD *)v27 != v22)
            objc_enumerationMutation(v20);
          -[SGSqlEntityStore _emitChangeNotifications:](self, "_emitChangeNotifications:", *(_QWORD *)(*((_QWORD *)&v26 + 1) + 8 * j));
        }
        v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v26, v37, 16);
      }
      while (v21);
    }

    SGRecordMeasurementState(v36);
  }
  SGRecordMeasurementState(v36);

}

- (int64_t)writeEntity:(id)a3
{
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t j;
  void *v17;
  void *v18;
  char IsMessage;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  int64_t v24;
  void *v25;
  BOOL v26;
  void *v27;
  void *v28;
  NSObject *v29;
  void *v30;
  SGSqliteDatabase *db;
  id v32;
  char v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  _QWORD v39[5];
  id v40;
  uint64_t *v41;
  SEL v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  _QWORD v55[3];
  uint8_t buf[4];
  void *v57;
  void *v58;
  _BYTE v59[128];
  _BYTE v60[128];
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  objc_msgSend(v5, "duplicateKey");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v6)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v35, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore+Writing.m"), 141, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("containerEntity.duplicateKey"));

  }
  v55[2] = 0;
  v55[0] = CFSTR("writeEntity");
  v55[1] = mach_absolute_time();
  objc_msgSend(v5, "externalEnrichments");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "count");

  if (v8)
    objc_msgSend(v5, "flushExternalEnrichmentsUponDealloc");
  v53 = 0u;
  v54 = 0u;
  v51 = 0u;
  v52 = 0u;
  objc_msgSend(v5, "externalEnrichments");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v51, v60, 16);
  if (v10)
  {
    v11 = *(_QWORD *)v52;
    do
    {
      for (i = 0; i != v10; ++i)
      {
        if (*(_QWORD *)v52 != v11)
          objc_enumerationMutation(v9);
        objc_msgSend(*(id *)(*((_QWORD *)&v51 + 1) + 8 * i), "writeWithEntityStore:", self);
      }
      v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v51, v60, 16);
    }
    while (v10);
  }

  objc_msgSend(v5, "setRecordId:", 0);
  v49 = 0u;
  v50 = 0u;
  v47 = 0u;
  v48 = 0u;
  objc_msgSend(v5, "enrichments");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v47, v59, 16);
  if (v14)
  {
    v15 = *(_QWORD *)v48;
    do
    {
      for (j = 0; j != v14; ++j)
      {
        if (*(_QWORD *)v48 != v15)
          objc_enumerationMutation(v13);
        v17 = *(void **)(*((_QWORD *)&v47 + 1) + 8 * j);
        objc_msgSend(v17, "setRecordId:", 0);
        objc_msgSend(v17, "setGroupId:", 0);
        objc_msgSend(v17, "setMasterEntityId:", 0);
      }
      v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v47, v59, 16);
    }
    while (v14);
  }

  objc_msgSend(v5, "duplicateKey");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "entityType");
  IsMessage = SGEntityTypeIsMessage();

  if ((IsMessage & 1) != 0)
  {
    v43 = 0;
    v44 = &v43;
    v45 = 0x2020000000;
    v46 = -1;
    objc_msgSend(v5, "validate");
    if (!-[SGSqlEntityStore isEphemeral](self, "isEphemeral")
      && (v20 = (void *)objc_opt_class(),
          objc_msgSend(v5, "accountType"),
          v21 = (void *)objc_claimAutoreleasedReturnValue(),
          LODWORD(v20) = objc_msgSend(v20, "canStoreEventsForAccountType:", v21),
          v21,
          !(_DWORD)v20)
      || (objc_msgSend(MEMORY[0x1E0D198F0], "shouldHarvestEvents") & 1) == 0)
    {
      objc_msgSend(v5, "stripEventInformation");
    }
    if (objc_msgSend(v5, "state") == 2)
    {
      objc_msgSend(v5, "duplicateKey");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      v58 = v22;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v58, 1);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      -[SGSqlEntityStore deleteEntitiesByDuplicateKey:emitChangeNotifications:](self, "deleteEntitiesByDuplicateKey:emitChangeNotifications:", v23, 1);

LABEL_26:
      v24 = v44[3];
LABEL_37:
      _Block_object_dispose(&v43, 8);
      goto LABEL_38;
    }
    objc_msgSend(v5, "duplicateKey");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "entityType");
    if (SGEntityTypeIsMessage())
    {
      objc_msgSend(v5, "enrichments");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      if (!objc_msgSend(v28, "count"))
      {
        v34 = objc_msgSend(v5, "hasFullDownloadBeenRequested");

        if ((v34 & 1) == 0)
          goto LABEL_26;
LABEL_34:
        sgLogHandle();
        v29 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
        {
          objc_msgSend(v5, "duplicateKey");
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412290;
          v57 = v30;
          _os_log_impl(&dword_1C3607000, v29, OS_LOG_TYPE_INFO, "Writing Entity: %@", buf, 0xCu);

        }
        db = self->_db;
        v39[0] = MEMORY[0x1E0C809B0];
        v39[1] = 3221225472;
        v39[2] = __41__SGSqlEntityStore_Writing__writeEntity___block_invoke;
        v39[3] = &unk_1E7DB5318;
        v41 = &v43;
        v39[4] = self;
        v32 = v5;
        v40 = v32;
        v42 = a2;
        -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v39);
        -[SGSqlEntityStore _emitChangeNotifications:](self, "_emitChangeNotifications:", v32);
        SGRecordMeasurementState(v55);
        v24 = v44[3];

        goto LABEL_37;
      }

    }
    goto LABEL_34;
  }
  objc_msgSend(v5, "enrichments");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v26 = objc_msgSend(v25, "count") == 0;

  if (!v26)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "duplicateKey");
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v37, "entityType");
    SGEntityTypeDescription();
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v36, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore+Writing.m"), 165, CFSTR("Don't know how to write out a container entity of type %@"), v38);

  }
  v24 = -[SGSqlEntityStore _writeOneEntityToDb:](self, "_writeOneEntityToDb:", v5);
LABEL_38:
  SGRecordMeasurementState(v55);

  return v24;
}

- (int64_t)writeEnrichment:(id)a3
{
  id v4;
  int64_t v5;

  v4 = a3;
  v5 = -[SGSqlEntityStore _writeEnrichmentToDb:](self, "_writeEnrichmentToDb:", v4);
  -[SGSqlEntityStore _emitChangeNotificationForEnrichment:](self, "_emitChangeNotificationForEnrichment:", v4);

  return v5;
}

- (int64_t)writeEntity:(id)a3 withSpotlightReferenceForBundleIdentifier:(id)a4 uniqueIdentifier:(id)a5 domainIdentifier:(id)a6
{
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  SGSqliteDatabase *db;
  id v16;
  id v17;
  id v18;
  id v19;
  int64_t v20;
  _QWORD v22[5];
  id v23;
  id v24;
  id v25;
  id v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;

  v10 = a3;
  v11 = a4;
  v12 = a5;
  v13 = a6;
  v28 = 0;
  v29 = &v28;
  v30 = 0x2020000000;
  v31 = 0;
  v14 = (void *)MEMORY[0x1C3BD4F6C]();
  db = self->_db;
  v22[0] = MEMORY[0x1E0C809B0];
  v22[1] = 3221225472;
  v22[2] = __117__SGSqlEntityStore_Writing__writeEntity_withSpotlightReferenceForBundleIdentifier_uniqueIdentifier_domainIdentifier___block_invoke;
  v22[3] = &unk_1E7DAE890;
  v27 = &v28;
  v22[4] = self;
  v16 = v10;
  v23 = v16;
  v17 = v11;
  v24 = v17;
  v18 = v12;
  v25 = v18;
  v19 = v13;
  v26 = v19;
  -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v22);

  objc_autoreleasePoolPop(v14);
  v20 = v29[3];
  _Block_object_dispose(&v28, 8);

  return v20;
}

- (void)_emitChangeNotificationForEnrichment:(id)a3
{
  id v4;
  void *v5;
  int IsContact;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  SGSocialProfileDetails *v13;
  void *v14;
  SGSocialProfileDetails *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  void *v21;
  int IsContactDetail;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  SGSocialProfileDetails *v26;
  uint64_t v27;
  int IsEvent;
  void *v29;
  SGSocialProfileDetails *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t j;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _BYTE v44[128];
  _BYTE v45[128];
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "duplicateKey");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "entityType");
  IsContact = SGEntityTypeIsContact();

  objc_msgSend(v4, "duplicateKey");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (IsContact)
  {
    objc_msgSend(v7, "identityKey");
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    if (objc_msgSend(v9, "hasPhone"))
    {
      objc_msgSend(v9, "phone");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      -[SGSqlEntityStore removeStringFromNoContactsCache:](self, "removeStringFromNoContactsCache:", v10);

    }
    if (objc_msgSend(v9, "hasEmailAddress"))
    {
      objc_msgSend(v9, "emailAddress");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      -[SGSqlEntityStore removeStringFromNoContactsCache:](self, "removeStringFromNoContactsCache:", v11);

    }
    if (objc_msgSend(v9, "hasInstantMessageAddress"))
    {
      objc_msgSend(v9, "instantMessageAddress");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      -[SGSqlEntityStore removeStringFromNoContactsCache:](self, "removeStringFromNoContactsCache:", v12);

    }
    if (objc_msgSend(v9, "hasSocialProfile"))
    {
      v13 = [SGSocialProfileDetails alloc];
      objc_msgSend(v9, "socialProfile");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = -[SGSocialProfileDetails initWithSerialized:](v13, "initWithSerialized:", v14);

      if (v15)
      {
        v42 = 0u;
        v43 = 0u;
        v40 = 0u;
        v41 = 0u;
        -[SGSocialProfileDetails uniqueIdentifiers](v15, "uniqueIdentifiers");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v40, v45, 16);
        if (v17)
        {
          v18 = v17;
          v19 = *(_QWORD *)v41;
          do
          {
            for (i = 0; i != v18; ++i)
            {
              if (*(_QWORD *)v41 != v19)
                objc_enumerationMutation(v16);
              -[SGSqlEntityStore removeStringFromNoContactsCache:](self, "removeStringFromNoContactsCache:", *(_QWORD *)(*((_QWORD *)&v40 + 1) + 8 * i));
            }
            v18 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v40, v45, 16);
          }
          while (v18);
        }

      }
    }
    objc_msgSend(v4, "recordId");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    +[SGDNotificationBroadcaster emitContactUpdated:](SGDNotificationBroadcaster, "emitContactUpdated:", v21);

    goto LABEL_31;
  }
  objc_msgSend(v7, "entityType");
  IsContactDetail = SGEntityTypeIsContactDetail();

  objc_msgSend(v4, "duplicateKey");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = objc_msgSend(v23, "entityType");
  if (IsContactDetail)
  {
    v25 = SGEntityTypeToContactDetailType(v24);

    switch(v25)
    {
      case 0:
        objc_msgSend(v4, "title");
        v26 = (SGSocialProfileDetails *)objc_claimAutoreleasedReturnValue();
        SGNormalizePhoneNumber();
        v27 = objc_claimAutoreleasedReturnValue();
        goto LABEL_27;
      case 2:
        objc_msgSend(v4, "title");
        v26 = (SGSocialProfileDetails *)objc_claimAutoreleasedReturnValue();
        SGNormalizeEmailAddress();
        v27 = objc_claimAutoreleasedReturnValue();
        goto LABEL_27;
      case 3:
        objc_msgSend(v4, "title");
        v26 = (SGSocialProfileDetails *)objc_claimAutoreleasedReturnValue();
        SGNormalizeInstantMessageAddress(v26);
        v27 = objc_claimAutoreleasedReturnValue();
LABEL_27:
        v29 = (void *)v27;
        -[SGSqlEntityStore removeStringFromNoContactsCache:](self, "removeStringFromNoContactsCache:", v27);
        goto LABEL_28;
      case 4:
        v30 = [SGSocialProfileDetails alloc];
        objc_msgSend(v4, "title");
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        v26 = -[SGSocialProfileDetails initWithSerialized:](v30, "initWithSerialized:", v31);

        if (!v26)
          goto LABEL_29;
        v38 = 0u;
        v39 = 0u;
        v36 = 0u;
        v37 = 0u;
        -[SGSocialProfileDetails uniqueIdentifiers](v26, "uniqueIdentifiers", 0);
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        v32 = objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", &v36, v44, 16);
        if (v32)
        {
          v33 = v32;
          v34 = *(_QWORD *)v37;
          do
          {
            for (j = 0; j != v33; ++j)
            {
              if (*(_QWORD *)v37 != v34)
                objc_enumerationMutation(v29);
              -[SGSqlEntityStore removeStringFromNoContactsCache:](self, "removeStringFromNoContactsCache:", *(_QWORD *)(*((_QWORD *)&v36 + 1) + 8 * j));
            }
            v33 = objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", &v36, v44, 16);
          }
          while (v33);
        }
LABEL_28:

LABEL_29:
LABEL_30:
        objc_msgSend(v4, "recordId");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        +[SGDNotificationBroadcaster emitContactUpdated:](SGDNotificationBroadcaster, "emitContactUpdated:", v9);
        break;
      default:
        goto LABEL_30;
    }
    goto LABEL_31;
  }
  IsEvent = SGEntityTypeIsEvent();

  if (IsEvent)
  {
    objc_msgSend(v4, "recordId");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    +[SGDNotificationBroadcaster emitEventUpdated:](SGDNotificationBroadcaster, "emitEventUpdated:", v9);
LABEL_31:

  }
}

- (void)_emitChangeNotifications:(id)a3
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  objc_msgSend(a3, "enrichments", 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v10;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v10 != v7)
          objc_enumerationMutation(v4);
        -[SGSqlEntityStore _emitChangeNotificationForEnrichment:](self, "_emitChangeNotificationForEnrichment:", *(_QWORD *)(*((_QWORD *)&v9 + 1) + 8 * v8++));
      }
      while (v6 != v8);
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v6);
  }

}

- (void)_hashAttachedPseudoContacts:(id)a3
{
  id v4;
  id v5;
  _QWORD v6[4];
  id v7;
  SGSqlEntityStore *v8;

  v4 = a3;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __57__SGSqlEntityStore_Writing___hashAttachedPseudoContacts___block_invoke;
  v6[3] = &unk_1E7DAE8E0;
  v7 = v4;
  v8 = self;
  v5 = v4;
  objc_msgSend(v5, "enumeratePeople:", v6);

}

- (void)_writeContactDetails:(id)a3
{
  id v4;
  id v5;
  _QWORD v6[4];
  id v7;
  SGSqlEntityStore *v8;

  v4 = a3;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __50__SGSqlEntityStore_Writing___writeContactDetails___block_invoke;
  v6[3] = &unk_1E7DAE8E0;
  v7 = v4;
  v8 = self;
  v5 = v4;
  objc_msgSend(v5, "enumeratePeople:", v6);

}

- (void)_prunePseudoContactGeneratingEmails:(id)a3
{
  id v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  _QWORD v13[5];

  v5 = a3;
  objc_msgSend(v5, "duplicateKey");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "entityType");

  if (v7 != 5)
  {
    objc_msgSend(v5, "duplicateKey");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v8, "entityType") != 13)
    {
      objc_msgSend(v5, "duplicateKey");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v9, "entityType") != 16)
      {
        objc_msgSend(v5, "duplicateKey");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v11 = objc_msgSend(v10, "entityType");

        if (v11 == 18)
          goto LABEL_9;
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "duplicateKey");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "entityType");
        SGEntityTypeDescription();
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore+Writing.m"), 418, CFSTR("Don't know how to prune container entities of type %@"), v12);

      }
    }

    goto LABEL_9;
  }
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = __65__SGSqlEntityStore_Writing___prunePseudoContactGeneratingEmails___block_invoke;
  v13[3] = &unk_1E7DAE970;
  v13[4] = self;
  objc_msgSend(v5, "enumeratePeople:", v13);
LABEL_9:

}

- (void)_deleteOldInteractionContactDetails:(id)a3 currentIdentifiers:(id)a4
{
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  SGSqliteDatabase *db;
  uint64_t v13;
  id v14;
  id v15;
  _QWORD v16[4];
  id v17;
  id v18;
  _QWORD v19[4];
  id v20;
  id v21;

  v15 = a3;
  v6 = a4;
  objc_msgSend(v15, "duplicateKey");
  v7 = (id)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v7, "entityType") != 16)
    goto LABEL_4;
  v8 = objc_msgSend(v6, "count");

  if (v8)
  {
    v9 = (void *)objc_opt_new();
    objc_msgSend(v15, "duplicateKey");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "serialize");
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    db = self->_db;
    v13 = MEMORY[0x1E0C809B0];
    v19[0] = MEMORY[0x1E0C809B0];
    v19[1] = 3221225472;
    v19[2] = __84__SGSqlEntityStore_Writing___deleteOldInteractionContactDetails_currentIdentifiers___block_invoke;
    v19[3] = &unk_1E7DB6E80;
    v20 = v11;
    v21 = v6;
    v16[0] = v13;
    v16[1] = 3221225472;
    v16[2] = __84__SGSqlEntityStore_Writing___deleteOldInteractionContactDetails_currentIdentifiers___block_invoke_2;
    v16[3] = &unk_1E7DB6BE0;
    v17 = v20;
    v18 = v9;
    v14 = v9;
    v7 = v20;
    -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](db, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("SELECT e.entityKey, e.entityType    FROM entity e JOIN entityParentage ep ON e.id = ep.childId    WHERE ep.parentKey = :parentKey AND e.id not in _pas_nsset(:ids)"), v19, v16, 0);
    -[SGSqlEntityStore deleteEntitiesByDuplicateKey:emitChangeNotifications:](self, "deleteEntitiesByDuplicateKey:emitChangeNotifications:", v14, 1);

LABEL_4:
  }

}

- (void)_addIndexingTagsTo:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  id v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  SGSuggestHistory *history;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  void *v32;
  void *v33;
  void *v34;
  SGSuggestHistory *v35;
  void *v36;
  void *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t j;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  _BYTE v56[128];
  _BYTE v57[128];
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "duplicateKey");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "entityType");

  if (SGEntityTypeIsContactDetail())
  {
    objc_msgSend(v4, "duplicateKey");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = SGEntityTypeToContactDetailType(objc_msgSend(v7, "entityType"));

    switch(v8)
    {
      case 0:
        v9 = (void *)MEMORY[0x1E0D197F0];
        objc_msgSend(v4, "title");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        SGNormalizePhoneNumber();
        v11 = objc_claimAutoreleasedReturnValue();
        goto LABEL_39;
      case 1:
        v9 = (void *)MEMORY[0x1E0D197F0];
        objc_msgSend(v4, "title");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        SGNormalizeAddress(v10);
        v11 = objc_claimAutoreleasedReturnValue();
        goto LABEL_39;
      case 2:
        v9 = (void *)MEMORY[0x1E0D197F0];
        objc_msgSend(v4, "title");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        SGNormalizeEmailAddress();
        v11 = objc_claimAutoreleasedReturnValue();
        goto LABEL_39;
      case 3:
        v9 = (void *)MEMORY[0x1E0D197F0];
        objc_msgSend(v4, "title");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        SGNormalizeInstantMessageAddress(v10);
        v11 = objc_claimAutoreleasedReturnValue();
        goto LABEL_39;
      case 4:
        v23 = (void *)MEMORY[0x1E0D197F0];
        objc_msgSend(v4, "title");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        SGNormalizeSocialProfile(v10);
        objc_claimAutoreleasedReturnValue();
        objc_msgSend(v23, "contactDetail:", v10);
        v17 = (void *)objc_claimAutoreleasedReturnValue();

        goto LABEL_40;
      case 5:
        v46 = (void *)MEMORY[0x1E0D197F0];
        objc_msgSend(v4, "title");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v46, "contactDetail:", v10);
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        goto LABEL_40;
      case 6:
        v9 = (void *)MEMORY[0x1E0D197F0];
        objc_msgSend(v4, "title");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        SGNormalizeBirthday(v10);
        v11 = objc_claimAutoreleasedReturnValue();
LABEL_39:
        v47 = (void *)v11;
        objc_msgSend(v9, "contactDetail:", v11);
        v17 = (void *)objc_claimAutoreleasedReturnValue();

LABEL_40:
        break;
      default:
        v17 = 0;
        break;
    }
    objc_msgSend(v4, "addTag:", v17);
    goto LABEL_42;
  }
  if (SGEntityTypeIsContact())
  {
    objc_msgSend(v4, "duplicateKey");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "identityKey");
    v13 = (id)objc_claimAutoreleasedReturnValue();

    if (objc_msgSend(v13, "hasEmailAddress"))
    {
      v14 = (void *)MEMORY[0x1E0D197F0];
      objc_msgSend(v13, "emailAddress");
      v15 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      if (!objc_msgSend(v13, "hasPhone"))
      {
LABEL_14:
        objc_msgSend(MEMORY[0x1E0D197F0], "identity:", v13);
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "addTag:", v22);

LABEL_35:
        goto LABEL_43;
      }
      v14 = (void *)MEMORY[0x1E0D197F0];
      objc_msgSend(v13, "phone");
      v15 = objc_claimAutoreleasedReturnValue();
    }
    v20 = (void *)v15;
    objc_msgSend(v14, "contactDetail:", v15);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "addTag:", v21);

    goto LABEL_14;
  }
  switch(v6)
  {
    case 2:
      history = self->_history;
      objc_msgSend(v4, "duplicateKey");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v25, "pseudoEventKey");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "creationTimestamp");
      -[SGSuggestHistory identityBasedHashesForPseudoEvent:withCreationTime:](history, "identityBasedHashesForPseudoEvent:withCreationTime:", v26);
      v27 = (void *)objc_claimAutoreleasedReturnValue();

      v54 = 0u;
      v55 = 0u;
      v52 = 0u;
      v53 = 0u;
      v13 = v27;
      v28 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v52, v57, 16);
      if (v28)
      {
        v29 = v28;
        v30 = *(_QWORD *)v53;
        do
        {
          for (i = 0; i != v29; ++i)
          {
            if (*(_QWORD *)v53 != v30)
              objc_enumerationMutation(v13);
            v32 = (void *)MEMORY[0x1E0D197F0];
            objc_msgSend(*(id *)(*((_QWORD *)&v52 + 1) + 8 * i), "base64EncodedStringWithOptions:", 0);
            v33 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v32, "eventHash:", v33);
            v34 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v4, "addTag:", v34);

          }
          v29 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v52, v57, 16);
        }
        while (v29);
      }
      goto LABEL_34;
    case 22:
      v35 = self->_history;
      objc_msgSend(v4, "duplicateKey");
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v36, "pseudoReminderKey");
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "creationTimestamp");
      -[SGSuggestHistory identityBasedHashesForPseudoReminder:withCreationTime:](v35, "identityBasedHashesForPseudoReminder:withCreationTime:", v37);
      v38 = (void *)objc_claimAutoreleasedReturnValue();

      v50 = 0u;
      v51 = 0u;
      v48 = 0u;
      v49 = 0u;
      v13 = v38;
      v39 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v48, v56, 16);
      if (v39)
      {
        v40 = v39;
        v41 = *(_QWORD *)v49;
        do
        {
          for (j = 0; j != v40; ++j)
          {
            if (*(_QWORD *)v49 != v41)
              objc_enumerationMutation(v13);
            v43 = (void *)MEMORY[0x1E0D197F0];
            objc_msgSend(*(id *)(*((_QWORD *)&v48 + 1) + 8 * j), "base64EncodedStringWithOptions:", 0, (_QWORD)v48);
            v44 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v43, "reminderHash:", v44);
            v45 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v4, "addTag:", v45);

          }
          v40 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v48, v56, 16);
        }
        while (v40);
      }
LABEL_34:

      goto LABEL_35;
    case 5:
      v16 = (void *)MEMORY[0x1E0D197F0];
      objc_msgSend(v4, "duplicateKey");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "emailKey");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "messageWithEmailKey:", v18);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "addTag:", v19);

LABEL_42:
      break;
  }
LABEL_43:

}

- (void)_addIndexingTagsToParent:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[SGSqlEntityStore _addIndexingTagsTo:](self, "_addIndexingTagsTo:", v4);
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  objc_msgSend(v4, "enrichments", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v14;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v14 != v8)
          objc_enumerationMutation(v5);
        v10 = (void *)MEMORY[0x1E0D197F0];
        objc_msgSend(*(id *)(*((_QWORD *)&v13 + 1) + 8 * v9), "duplicateKey");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "containsEntityExtraction:", objc_msgSend(v11, "entityType"));
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "addTag:", v12);

        ++v9;
      }
      while (v7 != v9);
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v7);
  }

}

- (void)_dumpTable:(id)a3 columns:(id)a4 limitTo:(int)a5
{
  id v8;
  id v9;
  unint64_t v10;
  __CFString *v11;
  void *v12;
  __CFString *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  SGSqliteDatabase *db;
  id v18;
  _QWORD v19[4];
  id v20;
  _QWORD *v21;
  _QWORD v22[3];
  int v23;

  v8 = a3;
  v9 = a4;
  NSLog((NSString *)CFSTR("Dump table \"%@\":"), v8);
  v10 = 0;
  v22[0] = 0;
  v22[1] = v22;
  v22[2] = 0x2020000000;
  v23 = a5;
  v11 = CFSTR("SELECT ");
  while (objc_msgSend(v9, "count") > v10)
  {
    objc_msgSend(v9, "objectAtIndexedSubscript:", v10);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    -[__CFString stringByAppendingString:](v11, "stringByAppendingString:", v12);
    v13 = (__CFString *)objc_claimAutoreleasedReturnValue();

    if (objc_msgSend(v9, "count") - 1 > v10)
    {
      -[__CFString stringByAppendingString:](v13, "stringByAppendingString:", CFSTR(","));
      v14 = objc_claimAutoreleasedReturnValue();

      v13 = (__CFString *)v14;
    }
    ++v10;
    v11 = v13;
  }
  v15 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR(" FROM %@"), v8);
  -[__CFString stringByAppendingString:](v11, "stringByAppendingString:", v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  db = self->_db;
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 3221225472;
  v19[2] = __56__SGSqlEntityStore_Writing___dumpTable_columns_limitTo___block_invoke;
  v19[3] = &unk_1E7DB6A98;
  v18 = v9;
  v20 = v18;
  v21 = v22;
  -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](db, "prepAndRunQuery:onPrep:onRow:onError:", v16, 0, v19, 0);

  _Block_object_dispose(v22, 8);
}

- (id)_computePseudoContactContentHash:(id)a3 contactDetails:(id)a4
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  const __CFString *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  void *v23;
  void *v24;
  void *v26;
  void *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = a4;
  v9 = v8;
  if (v7)
  {
    if (v8)
      goto LABEL_3;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore+Writing.m"), 628, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("contactEntity"));

    if (v9)
      goto LABEL_3;
  }
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v27, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore+Writing.m"), 629, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("contactDetails"));

LABEL_3:
  objc_msgSend(v9, "sortedArrayUsingComparator:", &__block_literal_global_80_18904);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v9, "count") + 1);
  objc_msgSend(v7, "title");
  v12 = objc_claimAutoreleasedReturnValue();
  v13 = (void *)v12;
  if (v12)
    v14 = (const __CFString *)v12;
  else
    v14 = &stru_1E7DB83A8;
  objc_msgSend(v11, "addObject:", v14);

  objc_msgSend(v7, "duplicateKey");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "identityKey");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "uniqueIdentifier");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "addObject:", v17);

  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  v18 = v10;
  v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v28, v32, 16);
  if (v19)
  {
    v20 = v19;
    v21 = *(_QWORD *)v29;
    do
    {
      for (i = 0; i != v20; ++i)
      {
        if (*(_QWORD *)v29 != v21)
          objc_enumerationMutation(v18);
        objc_msgSend(*(id *)(*((_QWORD *)&v28 + 1) + 8 * i), "normalizedValue");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "addObject:", v23);

      }
      v20 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v28, v32, 16);
    }
    while (v20);
  }

  SGSha256BytesForStrings(v11, 0);
  v24 = (void *)objc_claimAutoreleasedReturnValue();

  return v24;
}

- (BOOL)entityWantsFullDownload:(id)a3
{
  id v4;
  SGSqliteDatabase *db;
  uint64_t v6;
  id v7;
  _QWORD v9[5];
  _QWORD v10[4];
  id v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;

  v4 = a3;
  v12 = 0;
  v13 = &v12;
  v14 = 0x2020000000;
  v15 = 0;
  db = self->_db;
  v6 = MEMORY[0x1E0C809B0];
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __53__SGSqlEntityStore_Writing__entityWantsFullDownload___block_invoke;
  v10[3] = &unk_1E7DB7720;
  v7 = v4;
  v11 = v7;
  v9[0] = v6;
  v9[1] = 3221225472;
  v9[2] = __53__SGSqlEntityStore_Writing__entityWantsFullDownload___block_invoke_2;
  v9[3] = &unk_1E7DB51B8;
  v9[4] = &v12;
  -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](db, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("SELECT e.downloadState FROM entity AS e INNER JOIN entityParentage AS ep ON e.id = ep.childId WHERE ep.duplicateKeyHashBlob = :duplicateKeyHash AND ep.extractionType = :extractionType"), v10, v9, 0);
  LOBYTE(db) = *((_DWORD *)v13 + 6) == 1;

  _Block_object_dispose(&v12, 8);
  return (char)db;
}

- (void)_writeMessageEntityToSnippetsDb:(id)a3
{
  void *v5;
  char IsMessage;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;

  v20 = a3;
  objc_msgSend(v20, "duplicateKey");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "entityType");
  IsMessage = SGEntityTypeIsMessage();

  if ((IsMessage & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "duplicateKey");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "entityType");
    SGEntityTypeDescription();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore+Writing.m"), 677, CFSTR("_writeMessageEntityToSnippetsDb received entity type %@"), v19);

  }
  v7 = (void *)objc_opt_new();
  v8 = (void *)MEMORY[0x1E0CB37E8];
  objc_msgSend(v20, "recordId");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "numberWithLongLong:", objc_msgSend(v9, "rowId"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setObject:forKeyedSubscript:", v10, CFSTR(":emailId"));

  objc_msgSend(v20, "snippetsContent");
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  if (v11)
  {
    objc_msgSend(v20, "snippetsContent");
    v12 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    objc_msgSend(v20, "content");
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    if (v13)
      objc_msgSend(v20, "content");
    else
      objc_msgSend(MEMORY[0x1E0C99E38], "null");
    v12 = objc_claimAutoreleasedReturnValue();
  }
  v14 = (void *)v12;
  objc_msgSend(v7, "setObject:forKeyedSubscript:", v12, CFSTR(":content"));

  objc_msgSend(v20, "title");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  if (v15)
  {
    objc_msgSend(v7, "setObject:forKeyedSubscript:", v15, CFSTR(":title"));
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99E38], "null");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setObject:forKeyedSubscript:", v16, CFSTR(":title"));

  }
  -[SGDatabaseJournal runQuery:values:onDb:](self->_snippetsJournal, "runQuery:values:onDb:", CFSTR("INSERT OR REPLACE INTO emailSnippets (emailId, content, title) VALUES (:emailId, :content, :title)"), v7, self->_snippetDb);

}

- (void)_writeEnrichmentToSnippetsDb:(id)a3
{
  void *v5;
  int IsMessage;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  NSRange v17;

  v16 = a3;
  objc_msgSend(v16, "duplicateKey");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "entityType");
  IsMessage = SGEntityTypeIsMessage();

  if (IsMessage)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore+Writing.m"), 708, CFSTR("_writeEntityToSnippetsDb received message entity type"));

  }
  v7 = (void *)objc_opt_new();
  v8 = (void *)MEMORY[0x1E0CB37E8];
  objc_msgSend(v16, "recordId");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "numberWithLongLong:", objc_msgSend(v9, "rowId"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setObject:forKeyedSubscript:", v10, CFSTR(":entityId"));

  objc_msgSend(v16, "content");
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  if (v11)
    objc_msgSend(v16, "content");
  else
    objc_msgSend(MEMORY[0x1E0C99E38], "null");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setObject:forKeyedSubscript:", v12, CFSTR(":content"));

  if (objc_msgSend(v16, "contentRangeOfInterest") == 0x7FFFFFFFFFFFFFFFLL)
  {
    objc_msgSend(MEMORY[0x1E0C99E38], "null");
  }
  else
  {
    v17.location = objc_msgSend(v16, "contentRangeOfInterest");
    NSStringFromRange(v17);
  }
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setObject:forKeyedSubscript:", v13, CFSTR(":range"));

  objc_msgSend(MEMORY[0x1E0C99E38], "null");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setObject:forKeyedSubscript:", v14, CFSTR(":title"));

  -[SGDatabaseJournal runQuery:values:onDb:](self->_snippetsJournal, "runQuery:values:onDb:", CFSTR("INSERT OR REPLACE INTO snippets (entityId, content, contentRangeOfInterest, title) VALUES (:entityId, :content, :range, :title)"), v7, self->_snippetDb);
}

- (void)_addTimeRange:(id)a3 toEntityWriteDictionary:(id)a4
{
  void *v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  id v15;

  v5 = (void *)MEMORY[0x1E0CB37E8];
  v6 = a4;
  v7 = a3;
  objc_msgSend(v7, "start");
  objc_msgSend(v5, "numberWithDouble:");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setObject:forKeyedSubscript:", v8, CFSTR("timeRangeStart"));

  v9 = (void *)MEMORY[0x1E0CB37E8];
  objc_msgSend(v7, "end");
  objc_msgSend(v9, "numberWithDouble:");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setObject:forKeyedSubscript:", v10, CFSTR("timeRangeEnd"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", objc_msgSend(v7, "startUTCOffsetSeconds"));
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setObject:forKeyedSubscript:", v11, CFSTR("timeRangeStartUTCOffsetSeconds"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", objc_msgSend(v7, "endUTCOffsetSeconds"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setObject:forKeyedSubscript:", v12, CFSTR("timeRangeEndUTCOffsetSeconds"));

  v13 = (void *)MEMORY[0x1E0CB37E8];
  v14 = objc_msgSend(v7, "isFloating");

  objc_msgSend(v13, "numberWithBool:", v14);
  v15 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setObject:forKeyedSubscript:", v15, CFSTR("floatingRange"));

}

- (void)_addLocations:(id)a3 toEntityWriteDictionary:(id)a4
{
  id v5;
  void *v6;
  id v7;

  v7 = a3;
  v5 = a4;
  if (objc_msgSend(v7, "count"))
  {
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v7, CFSTR("locations"));
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99E38], "null");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v6, CFSTR("locations"));

  }
}

- (void)writeEntityGeocodeResultToDb:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  SGSqliteDatabase *db;
  id v13;
  id v14;
  _QWORD v15[5];
  id v16;
  id v17;
  _QWORD v18[2];
  _QWORD v19[3];

  v19[2] = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v18[0] = CFSTR("id");
  v5 = (void *)MEMORY[0x1E0CB37E8];
  objc_msgSend(v4, "recordId");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "numberWithLongLong:", objc_msgSend(v6, "rowId"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v18[1] = CFSTR("pendingGeocode");
  v19[0] = v7;
  v19[1] = &unk_1E7E0C620;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v19, v18, 2);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (void *)objc_msgSend(v8, "mutableCopy");

  objc_msgSend(v4, "timeRange");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  -[SGSqlEntityStore _addTimeRange:toEntityWriteDictionary:](self, "_addTimeRange:toEntityWriteDictionary:", v10, v9);

  objc_msgSend(v4, "locations");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  -[SGSqlEntityStore _addLocations:toEntityWriteDictionary:](self, "_addLocations:toEntityWriteDictionary:", v11, v9);

  db = self->_db;
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = __58__SGSqlEntityStore_Writing__writeEntityGeocodeResultToDb___block_invoke;
  v15[3] = &unk_1E7DB7800;
  v15[4] = self;
  v16 = v4;
  v17 = v9;
  v13 = v9;
  v14 = v4;
  -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v15);

}

- (void)writeEmailVerificationResultForEmailWithKey:(id)a3 eventEntities:(id)a4
{
  id v6;
  id v7;
  SGSqliteDatabase *db;
  id v9;
  id v10;
  _QWORD v11[4];
  id v12;
  SGSqlEntityStore *v13;
  id v14;

  v6 = a3;
  v7 = a4;
  db = self->_db;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __87__SGSqlEntityStore_Writing__writeEmailVerificationResultForEmailWithKey_eventEntities___block_invoke;
  v11[3] = &unk_1E7DB7800;
  v12 = v6;
  v13 = self;
  v14 = v7;
  v9 = v7;
  v10 = v6;
  -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v11);

}

- (void)markEntityAsDupeByRecordId:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  SGSqliteDatabase *db;
  id v8;
  id v9;
  _QWORD v10[5];
  id v11;
  id v12;
  _QWORD v13[2];
  _QWORD v14[3];

  v14[2] = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v13[0] = CFSTR("id");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", objc_msgSend(v4, "rowId"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v13[1] = CFSTR("curatedDupe");
  v14[0] = v5;
  v14[1] = &unk_1E7E0C638;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v14, v13, 2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  db = self->_db;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __56__SGSqlEntityStore_Writing__markEntityAsDupeByRecordId___block_invoke;
  v10[3] = &unk_1E7DB7800;
  v10[4] = self;
  v11 = v4;
  v12 = v6;
  v8 = v6;
  v9 = v4;
  -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v10);

}

- (int64_t)_writeMessageEntityToDb:(id)a3
{
  id v4;
  int v5;
  SGSqliteDatabase *db;
  uint64_t v7;
  id v8;
  double v9;
  double v10;
  double v11;
  double v12;
  int64_t v13;
  SGSqliteDatabase *v14;
  _QWORD v16[5];
  id v17;
  uint64_t *v18;
  uint64_t *v19;
  _QWORD *v20;
  _QWORD v21[7];
  _QWORD v22[4];
  id v23;
  _QWORD v24[5];
  __CFString *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  double *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;

  v4 = a3;
  -[SGSqlEntityStore _addIndexingTagsToParent:](self, "_addIndexingTagsToParent:", v4);
  v34 = 0;
  v35 = &v34;
  v36 = 0x2020000000;
  v37 = -1;
  v30 = 0;
  v31 = (double *)&v30;
  v32 = 0x2020000000;
  v33 = 0;
  v26 = 0;
  v27 = &v26;
  v28 = 0x2020000000;
  v29 = 0;
  v5 = objc_msgSend(v4, "state");
  switch(v5)
  {
    case 1:
      +[SGAggregateLogging messagesAdded:](SGAggregateLogging, "messagesAdded:", 1);
      break;
    case 2:
      +[SGAggregateLogging messagesDeleted:](SGAggregateLogging, "messagesDeleted:", 1);
      break;
    case 3:
      +[SGAggregateLogging messagesLost:](SGAggregateLogging, "messagesLost:", 1);
      break;
  }
  v24[0] = 0;
  v24[1] = v24;
  v24[2] = 0x3032000000;
  v24[3] = __Block_byref_object_copy__18696;
  v24[4] = __Block_byref_object_dispose__18697;
  v25 = CFSTR("SELECT id, creationTimestamp, updateTimestamp, downloadState FROM emailMetadata WHERE key = :key AND type = :type");
  db = self->_db;
  v7 = MEMORY[0x1E0C809B0];
  v22[0] = MEMORY[0x1E0C809B0];
  v22[1] = 3221225472;
  v22[2] = __53__SGSqlEntityStore_Writing___writeMessageEntityToDb___block_invoke;
  v22[3] = &unk_1E7DB7720;
  v8 = v4;
  v23 = v8;
  v21[0] = v7;
  v21[1] = 3221225472;
  v21[2] = __53__SGSqlEntityStore_Writing___writeMessageEntityToDb___block_invoke_2;
  v21[3] = &unk_1E7DAE9D8;
  v21[4] = &v34;
  v21[5] = &v30;
  v21[6] = &v26;
  -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](db, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("SELECT id, creationTimestamp, updateTimestamp, downloadState FROM emailMetadata WHERE key = :key AND type = :type"), v22, v21, 0);
  if (v35[3] == -1
    || (v9 = v31[3],
        objc_msgSend(v8, "creationTimestamp"),
        v11 = v10,
        objc_msgSend(v8, "lastModifiedTimestamp"),
        v9 <= fmax(v11, v12)))
  {
    if (!*((_DWORD *)v27 + 6) && objc_msgSend(v8, "hasFullDownloadBeenRequested"))
      *((_DWORD *)v27 + 6) = 1;
    v14 = self->_db;
    v16[0] = v7;
    v16[1] = 3221225472;
    v16[2] = __53__SGSqlEntityStore_Writing___writeMessageEntityToDb___block_invoke_3;
    v16[3] = &unk_1E7DAEA00;
    v16[4] = self;
    v18 = &v34;
    v17 = v8;
    v19 = &v26;
    v20 = v24;
    -[SGSqliteDatabase writeTransaction:](v14, "writeTransaction:", v16);
    v13 = v35[3];

  }
  else
  {
    v13 = v35[3];
  }

  _Block_object_dispose(v24, 8);
  _Block_object_dispose(&v26, 8);
  _Block_object_dispose(&v30, 8);
  _Block_object_dispose(&v34, 8);

  return v13;
}

- (int64_t)_writeOneEntityToDb:(id)a3
{
  id v5;
  void *v6;
  void *v7;
  char IsMessage;
  int64_t v9;
  void *v11;
  void *v12;

  v5 = a3;
  objc_msgSend(v5, "duplicateKey");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v6)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore+Writing.m"), 913, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("entity.duplicateKey"));

  }
  objc_msgSend(v5, "duplicateKey");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "entityType");
  IsMessage = SGEntityTypeIsMessage();

  if ((IsMessage & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore+Writing.m"), 915, CFSTR("Writing enrichment via legacy code path"));

  }
  v9 = -[SGSqlEntityStore _writeMessageEntityToDb:](self, "_writeMessageEntityToDb:", v5);
  -[SGSqlEntityStore _emitChangeNotifications:](self, "_emitChangeNotifications:", v5);

  return v9;
}

- (void)_contentWriteEnrichmentToDb:(id)a3
{
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  int IsEvent;
  id v9;

  v9 = a3;
  objc_msgSend(v9, "duplicateKey");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "entityType");

  if (v5 == 22)
  {
    +[SGStorageReminder storageReminderFromEntity:store:](SGStorageReminder, "storageReminderFromEntity:store:", v9, self);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "commitWithStore:", self);
LABEL_5:

    goto LABEL_6;
  }
  objc_msgSend(v9, "duplicateKey");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "entityType");
  IsEvent = SGEntityTypeIsEvent();

  if (IsEvent)
  {
    +[SGStorageEvent storageEventFromEntity:](SGStorageEvent, "storageEventFromEntity:", v9);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[SGSqlEntityStore commitEvent:](self, "commitEvent:", v6);
    goto LABEL_5;
  }
LABEL_6:

}

- (int64_t)_writeEnrichmentToDb:(id)a3
{
  id v5;
  void *v6;
  void *v7;
  int IsMessage;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  SGSqliteDatabase *db;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  char v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  char v24;
  SGSqliteDatabase *v25;
  id v26;
  int64_t v27;
  void *v28;
  uint64_t v30;
  void *v31;
  void *v32;
  _QWORD v33[4];
  id v34;
  SGSqlEntityStore *v35;
  uint64_t *v36;
  uint64_t *v37;
  _QWORD v38[7];
  _QWORD v39[4];
  id v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t, uint64_t);
  void (*v45)(uint64_t);
  __CFString *v46;
  uint64_t v47;
  double *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;

  v5 = a3;
  objc_msgSend(v5, "duplicateKey");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v6)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore+Writing.m"), 938, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("enrichment.duplicateKey"));

  }
  objc_msgSend(v5, "duplicateKey");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "entityType");
  IsMessage = SGEntityTypeIsMessage();

  if (IsMessage)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v32, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore+Writing.m"), 940, CFSTR("Writing message entity via legacy code path"));

  }
  -[SGSqlEntityStore clearMasterEntityCache](self, "clearMasterEntityCache");
  -[SGSqlEntityStore _addIndexingTagsTo:](self, "_addIndexingTagsTo:", v5);
  v55 = 0;
  v56 = &v55;
  v57 = 0x2020000000;
  v58 = -1;
  v51 = 0;
  v52 = &v51;
  v53 = 0x2020000000;
  v54 = -1;
  v47 = 0;
  v48 = (double *)&v47;
  v49 = 0x2020000000;
  v50 = 0;
  v41 = 0;
  v42 = &v41;
  v43 = 0x3032000000;
  v44 = __Block_byref_object_copy__18696;
  v45 = __Block_byref_object_dispose__18697;
  v46 = CFSTR("SELECT e.id, e.masterEntityId, e.creationTimestamp, e.updateTimestamp FROM entity AS e INNER JOIN entityParentage AS ep ON e.id = ep.childId WHERE (ep.duplicateKeyHashBlob = :duplicateKeyHash AND ep.extractionType = :extractionType)");
  objc_msgSend(v5, "contentHash");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9)
  {
    v10 = (void *)MEMORY[0x1C3BD4F6C]();
    objc_msgSend((id)v42[5], "stringByAppendingString:", CFSTR(" UNION SELECT e.id, e.masterEntityId, e.creationTimestamp, e.updateTimestamp FROM entity AS e WHERE e.contentHashBlob = :contentHash"));
    v11 = objc_claimAutoreleasedReturnValue();
    v12 = (void *)v42[5];
    v42[5] = v11;

    objc_autoreleasePoolPop(v10);
  }
  db = self->_db;
  v14 = v42[5];
  v15 = MEMORY[0x1E0C809B0];
  v39[0] = MEMORY[0x1E0C809B0];
  v39[1] = 3221225472;
  v39[2] = __50__SGSqlEntityStore_Writing___writeEnrichmentToDb___block_invoke;
  v39[3] = &unk_1E7DB7720;
  v16 = v5;
  v40 = v16;
  v38[0] = v15;
  v38[1] = 3221225472;
  v38[2] = __50__SGSqlEntityStore_Writing___writeEnrichmentToDb___block_invoke_2;
  v38[3] = &unk_1E7DAE9D8;
  v38[4] = &v55;
  v38[5] = &v51;
  v38[6] = &v47;
  -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](db, "prepAndRunQuery:onPrep:onRow:onError:", v14, v39, v38, 0);
  objc_msgSend(v16, "duplicateKey");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "entityType");
  if (SGEntityTypeIsContact() && !objc_msgSend(v16, "masterEntityId"))
  {
    v30 = v52[3];

    if (v30 != -1)
    {
      objc_msgSend(v16, "setMasterEntityId:", v52[3]);
      v18 = 0;
      goto LABEL_11;
    }
  }
  else
  {

  }
  v18 = 1;
LABEL_11:
  objc_msgSend(v16, "creationTimestamp");
  v20 = v19;
  objc_msgSend(v16, "lastModifiedTimestamp");
  if (v56[3] == -1
    || ((v22 = fmax(v20, v21), v23 = v48[3], v23 != v22) ? (v24 = 1) : (v24 = v18), v23 <= v22 && (v24 & 1) != 0))
  {
    if (objc_msgSend(v16, "masterEntityId"))
    {
      -[SGSqlEntityStore deleteSerializedContactForId:](self, "deleteSerializedContactForId:", objc_msgSend(v16, "masterEntityId"));
      -[SGSqlEntityStore deleteAllCNContactMatchesForEntityID:](self, "deleteAllCNContactMatchesForEntityID:", objc_msgSend(v16, "masterEntityId"));
    }
    v25 = self->_db;
    v33[0] = v15;
    v33[1] = 3221225472;
    v33[2] = __50__SGSqlEntityStore_Writing___writeEnrichmentToDb___block_invoke_3;
    v33[3] = &unk_1E7DB7850;
    v36 = &v55;
    v26 = v16;
    v34 = v26;
    v35 = self;
    v37 = &v41;
    -[SGSqliteDatabase writeTransaction:](v25, "writeTransaction:", v33);
    -[SGSqlEntityStore _contentWriteEnrichmentToDb:](self, "_contentWriteEnrichmentToDb:", v26);
    v27 = v56[3];

  }
  else
  {
    -[SGSqlEntityStore _writeEntityParentageFor:entityId:](self, "_writeEntityParentageFor:entityId:", v16);
    objc_msgSend(MEMORY[0x1E0D19920], "recordIdWithTableId:rowId:", 0, v56[3]);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "setRecordId:", v28);

    v27 = v56[3];
  }

  _Block_object_dispose(&v41, 8);
  _Block_object_dispose(&v47, 8);
  _Block_object_dispose(&v51, 8);
  _Block_object_dispose(&v55, 8);

  return v27;
}

- (void)_writeEntityParentageFor:(id)a3 entityId:(int64_t)a4
{
  id v6;
  SGSqliteDatabase *db;
  id v8;
  _QWORD v9[5];
  id v10;
  int64_t v11;

  v6 = a3;
  db = self->_db;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __63__SGSqlEntityStore_Writing___writeEntityParentageFor_entityId___block_invoke;
  v9[3] = &unk_1E7DB6BB8;
  v9[4] = self;
  v10 = v6;
  v11 = a4;
  v8 = v6;
  -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v9);

}

- (id)_journalEntryFromEntity:(id)a3
{
  id v4;
  void *v5;
  char v6;
  uint64_t v7;
  void *v8;
  SGJournalEntry *v9;

  v4 = a3;
  +[SGStorageEvent storageEventFromEntity:](SGStorageEvent, "storageEventFromEntity:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v4, "isCancelled");

  if ((v6 & 1) != 0)
  {
    v7 = 3;
  }
  else
  {
    objc_msgSend(v5, "convertToEvent:", self);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    if (-[SGSuggestHistory isConfirmedEvent:](self->_history, "isConfirmedEvent:", v8))
    {
      v7 = 6;
    }
    else if (-[SGSuggestHistory isRejectedEvent:](self->_history, "isRejectedEvent:", v8))
    {
      v7 = 8;
    }
    else
    {
      v7 = 1;
    }

  }
  v9 = -[SGJournalEntry initWithOperation:event:]([SGJournalEntry alloc], "initWithOperation:event:", v7, v5);

  return v9;
}

- (id)_journalEntryFromReminderEntity:(id)a3
{
  void *v3;
  SGJournalEntry *v4;

  +[SGStorageReminder storageReminderFromEntity:store:](SGStorageReminder, "storageReminderFromEntity:store:", a3, self);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = -[SGJournalEntry initWithOperation:reminder:]([SGJournalEntry alloc], "initWithOperation:reminder:", 15, v3);

  return v4;
}

- (void)_writeEventEntitiesToJournal:(id)a3
{
  id v4;
  NSObject *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  uint8_t buf[4];
  uint64_t v11;
  __int16 v12;
  void *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  sgEventsLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = objc_msgSend(v4, "count");
    objc_msgSend(v4, "valueForKey:", CFSTR("loggingIdentifier"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "_pas_componentsJoinedByString:", CFSTR(","));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 134218242;
    v11 = v6;
    v12 = 2114;
    v13 = v8;
    _os_log_impl(&dword_1C3607000, v5, OS_LOG_TYPE_DEFAULT, "Writing %lu event entities to journal. [SGEvent (%{public}@)]", buf, 0x16u);

  }
  if (objc_msgSend(v4, "count") == 1)
  {
    objc_msgSend(v4, "firstObject");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[SGSqlEntityStore _writeEventEntityToJournal:](self, "_writeEventEntityToJournal:", v9);
  }
  else
  {
    sgMap();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[SGJournal addEntries:](self->_journal, "addEntries:", v9);
  }

}

- (void)_writeReminderEntitiesToJournal:(id)a3
{
  id v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  SGJournal *journal;
  void *v9;
  uint8_t v10[16];
  uint8_t buf[16];

  v4 = a3;
  v5 = objc_msgSend(v4, "count");
  sgLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v5 == 1)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_1C3607000, v7, OS_LOG_TYPE_DEBUG, "Writing reminder to journal", buf, 2u);
    }

    journal = self->_journal;
    objc_msgSend(v4, "firstObject");
    v7 = objc_claimAutoreleasedReturnValue();
    -[SGSqlEntityStore _journalEntryFromReminderEntity:](self, "_journalEntryFromReminderEntity:", v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[SGJournal addEntry:](journal, "addEntry:", v9);

  }
  else if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v10 = 0;
    _os_log_impl(&dword_1C3607000, v7, OS_LOG_TYPE_DEFAULT, "Trying to write multiple reminders to journal, this is not supported", v10, 2u);
  }

}

- (void)_writeEventEntityToJournal:(id)a3
{
  id v4;
  NSObject *v5;
  SGJournal *journal;
  void *v7;
  uint8_t v8[16];

  v4 = a3;
  sgLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v8 = 0;
    _os_log_debug_impl(&dword_1C3607000, v5, OS_LOG_TYPE_DEBUG, "Writing event to journal", v8, 2u);
  }

  journal = self->_journal;
  -[SGSqlEntityStore _journalEntryFromEntity:](self, "_journalEntryFromEntity:", v4);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  -[SGJournal addEntry:](journal, "addEntry:", v7);
}

- (void)_writeContactEntityToJournal:(id)a3
{
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  _BOOL4 v9;
  NSObject *v10;
  uint64_t v11;
  SGJournal *journal;
  SGJournalEntry *v13;
  uint8_t v14[16];

  v4 = a3;
  v5 = objc_msgSend(v4, "masterEntityId");
  if (!v5)
  {
    objc_msgSend(v4, "recordId");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "setMasterEntityId:", objc_msgSend(v6, "rowId"));

  }
  +[SGContactEntity contactEntityFromEntity:](SGContactEntity, "contactEntityFromEntity:", v4);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[SGStorageContact contactFromContactEntity:](SGStorageContact, "contactFromContactEntity:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v5)
    objc_msgSend(v4, "setMasterEntityId:", 0);
  v9 = -[SGSuggestHistory hasStorageContact:](self->_history, "hasStorageContact:", v8);
  sgLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v14 = 0;
    _os_log_debug_impl(&dword_1C3607000, v10, OS_LOG_TYPE_DEBUG, "Writing contact to journal", v14, 2u);
  }
  if (v9)
    v11 = 13;
  else
    v11 = 11;

  journal = self->_journal;
  v13 = -[SGJournalEntry initWithOperation:contact:]([SGJournalEntry alloc], "initWithOperation:contact:", v11, v8);
  -[SGJournal addEntry:](journal, "addEntry:", v13);

}

- (void)_writeFTSTermsForEnrichment:(id)a3 entityId:(int64_t)a4
{
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  int IsContactDetail;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  unint64_t v18;
  SGSocialProfileDetails *v19;
  uint64_t v20;
  SGSqliteDatabase *db;
  void *v22;
  char v23;
  void *v24;
  uint64_t v25;
  SGSocialProfileDetails *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  _QWORD v36[5];
  id v37;
  id v38;
  id v39;
  int64_t v40;
  _QWORD v41[5];

  v41[4] = *MEMORY[0x1E0C80C00];
  v6 = a3;
  -[SGSqlEntityStore clearMasterEntityCache](self, "clearMasterEntityCache");
  v7 = (void *)objc_opt_new();
  v8 = (void *)objc_opt_new();
  objc_msgSend(v6, "duplicateKey");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "entityType");
  if (SGEntityTypeIsContact())
  {

  }
  else
  {
    objc_msgSend(v6, "duplicateKey");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "entityType");
    IsContactDetail = SGEntityTypeIsContactDetail();

    if (!IsContactDetail)
      goto LABEL_16;
  }
  objc_msgSend(v6, "duplicateKey");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "entityType");
  if (!SGEntityTypeIsContact())
    goto LABEL_8;
  objc_msgSend(v6, "title");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend(v13, "length");

  if (v14)
  {
    objc_msgSend(v6, "title");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = objc_msgSend(v15, "length");

    if (v16)
    {
      objc_msgSend(v6, "title");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "addObject:", v12);
LABEL_8:

    }
  }
  +[SGContactDetail contactDetailFromEntity:](SGContactDetail, "contactDetailFromEntity:", v6);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = objc_msgSend(v17, "type");
  if (v18 <= 6)
  {
    if (((1 << v18) & 0x6E) != 0)
    {
      objc_msgSend(v17, "value");
      v19 = (SGSocialProfileDetails *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "addObject:", v19);
    }
    else if (v18)
    {
      v26 = [SGSocialProfileDetails alloc];
      objc_msgSend(v17, "value");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = -[SGSocialProfileDetails initWithSerialized:](v26, "initWithSerialized:", v27);

      if (v19)
      {
        -[SGSocialProfileDetails displayName](v19, "displayName");
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        v41[0] = v35;
        -[SGSocialProfileDetails bundleIdentifier](v19, "bundleIdentifier");
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        v41[1] = v34;
        -[SGSocialProfileDetails username](v19, "username");
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        v41[2] = v28;
        -[SGSocialProfileDetails service](v19, "service");
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        v41[3] = v29;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v41, 4);
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "addObjectsFromArray:", v30);

      }
    }
    else
    {
      objc_msgSend(v17, "value");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = objc_msgSend(v22, "containsString:", CFSTR(";"));

      if ((v23 & 1) != 0)
        goto LABEL_13;
      objc_msgSend(MEMORY[0x1E0C972B8], "sharedDefaults");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v24, "countryCode");
      v25 = objc_claimAutoreleasedReturnValue();
      if (v25)
      {
        v19 = (SGSocialProfileDetails *)v25;

      }
      else
      {
        objc_msgSend(MEMORY[0x1E0C99DC8], "currentLocale");
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v31, "objectForKey:", *MEMORY[0x1E0C997B0]);
        v19 = (SGSocialProfileDetails *)objc_claimAutoreleasedReturnValue();

        if (!v19)
          goto LABEL_13;
      }
      objc_msgSend(v17, "value");
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      v33 = (void *)_PNCopyIndexStringsForAddressBookSearch();

      if (v33)
        objc_msgSend(v7, "addObjectsFromArray:", v33);

    }
  }
LABEL_13:
  v20 = objc_msgSend(v7, "count");
  if (v20 + objc_msgSend(v8, "count"))
  {
    db = self->_db;
    v36[0] = MEMORY[0x1E0C809B0];
    v36[1] = 3221225472;
    v36[2] = __66__SGSqlEntityStore_Writing___writeFTSTermsForEnrichment_entityId___block_invoke;
    v36[3] = &unk_1E7DB58B0;
    v36[4] = self;
    v40 = a4;
    v37 = v6;
    v38 = v7;
    v39 = v8;
    -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v36);

  }
LABEL_16:

}

- (id)_loadIdentityBlobs
{
  void *v3;
  SGSqliteDatabase *db;
  id v5;
  id v6;
  _QWORD v8[4];
  id v9;
  SGSqlEntityStore *v10;

  v3 = (void *)objc_opt_new();
  db = self->_db;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __47__SGSqlEntityStore_Writing___loadIdentityBlobs__block_invoke;
  v8[3] = &unk_1E7DB6A30;
  v5 = v3;
  v9 = v5;
  v10 = self;
  -[SGSqliteDatabase readTransaction:](db, "readTransaction:", v8);
  v6 = v5;

  return v6;
}

- (id)_labelIdentityBlobs:(id)a3
{
  id v3;
  uint64_t v4;
  uint64_t i;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t j;
  void *v13;
  uint64_t v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  SGSqliteDatabase *db;
  id v21;
  NSObject *v22;
  void *v23;
  SGSqliteDatabase *v24;
  id v25;
  id v26;
  SEL v28;
  id obj;
  uint64_t v31;
  void *v32;
  void *v33;
  _QWORD v34[4];
  id v35;
  SGSqlEntityStore *v36;
  id v37;
  SEL v38;
  uint8_t buf[8];
  _QWORD v40[5];
  id v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  char v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  _BYTE v55[128];
  _BYTE v56[128];
  uint64_t v57;

  v28 = a2;
  v57 = *MEMORY[0x1E0C80C00];
  v3 = a3;
  v33 = (void *)objc_opt_new();
  v32 = (void *)objc_opt_new();
  v51 = 0u;
  v52 = 0u;
  v53 = 0u;
  v54 = 0u;
  obj = v3;
  v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v51, v56, 16);
  if (v4)
  {
    v31 = *(_QWORD *)v52;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v52 != v31)
          objc_enumerationMutation(obj);
        v6 = *(void **)(*((_QWORD *)&v51 + 1) + 8 * i);
        v7 = (void *)MEMORY[0x1C3BD4F6C]();
        +[SGAggregateLogging identityGroupSize:](SGAggregateLogging, "identityGroupSize:", objc_msgSend(v6, "count"));
        objc_msgSend(v6, "anyObject");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v49 = 0u;
        v50 = 0u;
        v47 = 0u;
        v48 = 0u;
        v9 = v6;
        v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v47, v55, 16);
        if (v10)
        {
          v11 = *(_QWORD *)v48;
          do
          {
            for (j = 0; j != v10; ++j)
            {
              if (*(_QWORD *)v48 != v11)
                objc_enumerationMutation(v9);
              v13 = *(void **)(*((_QWORD *)&v47 + 1) + 8 * j);
              v14 = objc_msgSend(v13, "rowId", v28);
              if (v14 < objc_msgSend(v8, "rowId"))
              {
                v15 = v13;

                v8 = v15;
              }
            }
            v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v47, v55, 16);
          }
          while (v10);
        }

        v16 = (void *)MEMORY[0x1E0D81638];
        objc_msgSend(MEMORY[0x1E0D19920], "recordIdForContactWithRowId:", objc_msgSend(v8, "rowId"));
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v16, "tupleWithFirst:second:", v9, v17);
        v18 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v33, "addObject:", v18);
        objc_msgSend(v32, "addIndex:", objc_msgSend(v8, "rowId"));

        objc_autoreleasePoolPop(v7);
      }
      v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v51, v56, 16);
    }
    while (v4);
  }

  v43 = 0;
  v44 = &v43;
  v45 = 0x2020000000;
  v46 = 0;
  v19 = MEMORY[0x1E0C809B0];
  db = self->_db;
  v40[0] = MEMORY[0x1E0C809B0];
  v40[1] = 3221225472;
  v40[2] = __49__SGSqlEntityStore_Writing___labelIdentityBlobs___block_invoke;
  v40[3] = &unk_1E7DB7878;
  v40[4] = self;
  v21 = v32;
  v41 = v21;
  v42 = &v43;
  -[SGSqliteDatabase readTransaction:](db, "readTransaction:", v40);
  if (*((_BYTE *)v44 + 24))
  {
    sgLogHandle();
    v22 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_fault_impl(&dword_1C3607000, v22, OS_LOG_TYPE_FAULT, "While writing blobs, unexpected missing entity ids", buf, 2u);
    }

    if (_PASEvaluateLogFaultAndProbCrashCriteria())
      abort();
    v23 = (void *)objc_opt_new();

    v24 = self->_db;
    v34[0] = v19;
    v34[1] = 3221225472;
    v34[2] = __49__SGSqlEntityStore_Writing___labelIdentityBlobs___block_invoke_261;
    v34[3] = &unk_1E7DB5990;
    v38 = v28;
    v35 = obj;
    v36 = self;
    v25 = v23;
    v37 = v25;
    -[SGSqliteDatabase readTransaction:](v24, "readTransaction:", v34);
    v26 = v25;

  }
  else
  {
    v26 = v33;
  }

  _Block_object_dispose(&v43, 8);
  return v26;
}

- (void)_writeLabeledBlobs:(id)a3 deletedMasterEntityIds:(id)a4
{
  id v6;
  dispatch_semaphore_t v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  void *v18;
  SGJournalEntry *v19;
  void *v20;
  int v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  SGSqliteDatabase *db;
  id v29;
  void *v30;
  void *v31;
  void *v32;
  SGJournalEntry *v33;
  void *v34;
  void *v35;
  void *v36;
  char v37;
  void *v38;
  uint64_t v39;
  void *v40;
  void *v41;
  NSObject *v42;
  void *v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t j;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t k;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  NSObject *v71;
  void *context;
  void *contexta;
  void *v74;
  void *v75;
  void *v76;
  id v77;
  id obj;
  uint64_t v79;
  id v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  id v84;
  id v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  _QWORD v94[5];
  id v95;
  char v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  _QWORD v105[4];
  NSObject *v106;
  _BYTE v107[128];
  uint8_t v108[128];
  uint8_t buf[4];
  void *v110;
  __int16 v111;
  void *v112;
  _BYTE v113[128];
  _BYTE v114[128];
  uint64_t v115;

  v115 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v80 = a4;
  v7 = dispatch_semaphore_create(0);
  v105[0] = MEMORY[0x1E0C809B0];
  v105[1] = 3221225472;
  v105[2] = __71__SGSqlEntityStore_Writing___writeLabeledBlobs_deletedMasterEntityIds___block_invoke;
  v105[3] = &unk_1E7DB56F0;
  v8 = v7;
  v106 = v8;
  +[SGSpotlightContactsAdapter notifyWhenFlushed:](SGSpotlightContactsAdapter, "notifyWhenFlushed:", v105);
  v71 = v8;
  dispatch_semaphore_wait(v8, 0xFFFFFFFFFFFFFFFFLL);
  v101 = 0u;
  v102 = 0u;
  v103 = 0u;
  v104 = 0u;
  obj = v6;
  v81 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v101, v114, 16);
  if (v81)
  {
    v79 = *(_QWORD *)v102;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v102 != v79)
          objc_enumerationMutation(obj);
        v83 = v9;
        v10 = *(void **)(*((_QWORD *)&v101 + 1) + 8 * v9);
        v82 = (void *)MEMORY[0x1C3BD4F6C]();
        objc_msgSend(v10, "first");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        -[SGSqlEntityStore deleteSerializedContactsForIdSet:](self, "deleteSerializedContactsForIdSet:", v11);

        objc_msgSend(v10, "first");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        -[SGSqlEntityStore deleteAllCNContactMatchesForIdSet:](self, "deleteAllCNContactMatchesForIdSet:", v12);

        v99 = 0u;
        v100 = 0u;
        v97 = 0u;
        v98 = 0u;
        objc_msgSend(v10, "first");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v97, v113, 16);
        if (v14)
        {
          v15 = v14;
          v16 = *(_QWORD *)v98;
          do
          {
            for (i = 0; i != v15; ++i)
            {
              if (*(_QWORD *)v98 != v16)
                objc_enumerationMutation(v13);
              +[SGStorageContact contactWithMasterEntityId:](SGStorageContact, "contactWithMasterEntityId:", objc_msgSend(*(id *)(*((_QWORD *)&v97 + 1) + 8 * i), "internalEntityId"));
              v18 = (void *)objc_claimAutoreleasedReturnValue();
              v19 = -[SGJournalEntry initWithOperation:contact:]([SGJournalEntry alloc], "initWithOperation:contact:", 13, v18);
              -[SGJournal addEntry:](self->_journal, "addEntry:", v19);

            }
            v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v97, v113, 16);
          }
          while (v15);
        }

        objc_msgSend(v10, "second");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        v21 = objc_msgSend(v80, "containsObject:", v20);

        if (v21)
        {
          -[SGSqlEntityStore kvCacheManager](self, "kvCacheManager");
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v10, "first");
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v22, "deleteValueByRecordIdSet:", v23);
        }
        else
        {
          objc_msgSend(v10, "first");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          v22 = (void *)objc_msgSend(v24, "mutableCopy");

          objc_msgSend(v10, "second");
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          if (!v23)
          {
            objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
            v69 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v69, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore+Writing.m"), 1426, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("masterEntityRecord"));

          }
          objc_msgSend(v22, "removeObject:", v23);
          if (objc_msgSend(v22, "count"))
          {
            -[SGSqlEntityStore kvCacheManager](self, "kvCacheManager");
            v25 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v25, "deleteValueByRecordIdSet:", v22);

          }
        }

        objc_msgSend(v10, "first");
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        sgMap();
        v27 = (void *)objc_claimAutoreleasedReturnValue();

        db = self->_db;
        v94[0] = MEMORY[0x1E0C809B0];
        v94[1] = 3221225472;
        v94[2] = __71__SGSqlEntityStore_Writing___writeLabeledBlobs_deletedMasterEntityIds___block_invoke_3;
        v94[3] = &unk_1E7DAEB08;
        v96 = v21;
        v94[4] = v10;
        v29 = v27;
        v95 = v29;
        -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](db, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("UPDATE entity SET masterEntityId = :masterEntityId WHERE id IN _pas_nsarray(:ids) AND entityType IN (:pseudoContact, :unrecognizedContact)"), v94, 0, 0);
        if ((v21 & 1) == 0)
        {
          objc_msgSend(v10, "second");
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          -[SGSqlEntityStore storageContactByRecordId:withSnippets:](self, "storageContactByRecordId:withSnippets:", v30, 0);
          v31 = (void *)objc_claimAutoreleasedReturnValue();

          if (v31 && !-[SGSuggestHistory hasStorageContact:](self->_history, "hasStorageContact:", v31))
          {
            -[SGSqlEntityStore journal](self, "journal");
            v32 = (void *)objc_claimAutoreleasedReturnValue();
            v33 = -[SGJournalEntry initWithOperation:contact:]([SGJournalEntry alloc], "initWithOperation:contact:", 11, v31);
            objc_msgSend(v32, "addEntry:", v33);

            objc_msgSend(v31, "convertToContact:", self);
            v34 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v34, "recordId");
            v35 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v10, "second");
            v36 = (void *)objc_claimAutoreleasedReturnValue();
            v37 = objc_msgSend(v35, "isEqual:", v36);

            if ((v37 & 1) != 0)
            {
              -[SGSqlEntityStore filterOutRejectedDetailsFromContact:](self, "filterOutRejectedDetailsFromContact:", v34);
              objc_msgSend(v34, "name");
              v38 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v38, "fullName");
              v39 = objc_claimAutoreleasedReturnValue();

              v40 = v34;
              v74 = (void *)v39;
              if (v39)
              {
                objc_msgSend(MEMORY[0x1E0D19840], "encodedStringForFullName:", v39);
                v41 = (void *)objc_claimAutoreleasedReturnValue();
              }
              else
              {
                v41 = 0;
              }
              objc_msgSend(v34, "phones");
              v43 = (void *)objc_claimAutoreleasedReturnValue();
              v44 = objc_msgSend(v43, "count");

              v76 = v31;
              v77 = v29;
              v75 = v34;
              if (v44)
              {
                context = (void *)MEMORY[0x1C3BD4F6C]();
                v45 = (void *)objc_opt_new();
                v90 = 0u;
                v91 = 0u;
                v92 = 0u;
                v93 = 0u;
                objc_msgSend(v34, "phones");
                v84 = (id)objc_claimAutoreleasedReturnValue();
                v46 = objc_msgSend(v84, "countByEnumeratingWithState:objects:count:", &v90, v108, 16);
                if (v46)
                {
                  v47 = v46;
                  v48 = *(_QWORD *)v91;
                  do
                  {
                    for (j = 0; j != v47; ++j)
                    {
                      if (*(_QWORD *)v91 != v48)
                        objc_enumerationMutation(v84);
                      objc_msgSend(*(id *)(*((_QWORD *)&v90 + 1) + 8 * j), "phoneNumber");
                      v50 = (void *)objc_claimAutoreleasedReturnValue();
                      SGNormalizePhoneNumber();
                      v51 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v45, "setObject:forKeyedSubscript:", v41, v51);

                    }
                    v47 = objc_msgSend(v84, "countByEnumeratingWithState:objects:count:", &v90, v108, 16);
                  }
                  while (v47);
                }

                -[SGSqlEntityStore kvCacheManager](self, "kvCacheManager");
                v52 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v52, "cacheOfType:", 0);
                v53 = (void *)objc_claimAutoreleasedReturnValue();

                v40 = v75;
                objc_msgSend(v75, "recordId");
                v54 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v53, "setValueIfNotPresentWithDict:fromRecordId:", v45, v54);

                objc_autoreleasePoolPop(context);
                v31 = v76;
                v29 = v77;
              }
              objc_msgSend(v40, "emailAddresses");
              v55 = (void *)objc_claimAutoreleasedReturnValue();
              v56 = objc_msgSend(v55, "count");

              if (v56)
              {
                contexta = (void *)MEMORY[0x1C3BD4F6C]();
                v57 = (void *)objc_opt_new();
                v86 = 0u;
                v87 = 0u;
                v88 = 0u;
                v89 = 0u;
                objc_msgSend(v40, "emailAddresses");
                v85 = (id)objc_claimAutoreleasedReturnValue();
                v58 = objc_msgSend(v85, "countByEnumeratingWithState:objects:count:", &v86, v107, 16);
                if (v58)
                {
                  v59 = v58;
                  v60 = *(_QWORD *)v87;
                  do
                  {
                    for (k = 0; k != v59; ++k)
                    {
                      if (*(_QWORD *)v87 != v60)
                        objc_enumerationMutation(v85);
                      objc_msgSend(*(id *)(*((_QWORD *)&v86 + 1) + 8 * k), "emailAddress");
                      v62 = (void *)objc_claimAutoreleasedReturnValue();
                      SGNormalizeEmailAddress();
                      v63 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v57, "setObject:forKeyedSubscript:", v41, v63);

                    }
                    v59 = objc_msgSend(v85, "countByEnumeratingWithState:objects:count:", &v86, v107, 16);
                  }
                  while (v59);
                }

                -[SGSqlEntityStore kvCacheManager](self, "kvCacheManager");
                v64 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v64, "cacheOfType:", 1);
                v65 = (void *)objc_claimAutoreleasedReturnValue();

                v40 = v75;
                objc_msgSend(v75, "recordId");
                v66 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v65, "setValueIfNotPresentWithDict:fromRecordId:", v57, v66);

                objc_autoreleasePoolPop(contexta);
                v31 = v76;
                v29 = v77;
              }

            }
            else
            {
              sgLogHandle();
              v42 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v42, OS_LOG_TYPE_FAULT))
              {
                objc_msgSend(v34, "recordId");
                v67 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v10, "second");
                v68 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138412546;
                v110 = v67;
                v111 = 2112;
                v112 = v68;
                _os_log_fault_impl(&dword_1C3607000, v42, OS_LOG_TYPE_FAULT, "Expected the new mergedContact record Id %@ to be %@:", buf, 0x16u);

              }
              v40 = v34;
              if (_PASEvaluateLogFaultAndProbCrashCriteria())
                abort();
            }

          }
        }

        objc_autoreleasePoolPop(v82);
        v9 = v83 + 1;
      }
      while (v83 + 1 != v81);
      v81 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v101, v114, 16);
    }
    while (v81);
  }

}

- (void)writeIdentityBlobs:(id)a3 forceRewrite:(BOOL)a4
{
  _BOOL4 v4;
  id v6;
  NSObject *v7;
  SGSqliteDatabase *db;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t j;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t k;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _QWORD v34[5];
  id v35;
  uint8_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t *v39;
  BOOL v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t, uint64_t);
  void (*v45)(uint64_t);
  id v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t (*v50)(uint64_t, uint64_t);
  void (*v51)(uint64_t);
  id v52;
  uint8_t buf[8];
  uint8_t *v54;
  uint64_t v55;
  uint64_t (*v56)(uint64_t, uint64_t);
  void (*v57)(uint64_t);
  id v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  char v62;
  const __CFString *v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE v66[128];
  _BYTE v67[128];
  _BYTE v68[128];
  uint64_t v69;

  v4 = a4;
  v69 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  sgLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1C3607000, v7, OS_LOG_TYPE_INFO, "Writing identity blobs", buf, 2u);
  }

  v64 = 0;
  v65 = 0;
  v63 = CFSTR("writeIdentityBlobs");
  v64 = mach_absolute_time();
  v59 = 0;
  v60 = &v59;
  v61 = 0x2020000000;
  v62 = 0;
  *(_QWORD *)buf = 0;
  v54 = buf;
  v55 = 0x3032000000;
  v56 = __Block_byref_object_copy__18696;
  v57 = __Block_byref_object_dispose__18697;
  v58 = 0;
  v47 = 0;
  v48 = &v47;
  v49 = 0x3032000000;
  v50 = __Block_byref_object_copy__18696;
  v51 = __Block_byref_object_dispose__18697;
  v52 = 0;
  v41 = 0;
  v42 = &v41;
  v43 = 0x3032000000;
  v44 = __Block_byref_object_copy__18696;
  v45 = __Block_byref_object_dispose__18697;
  v46 = 0;
  db = self->_db;
  v34[0] = MEMORY[0x1E0C809B0];
  v34[1] = 3221225472;
  v34[2] = __61__SGSqlEntityStore_Writing__writeIdentityBlobs_forceRewrite___block_invoke;
  v34[3] = &unk_1E7DAEBB0;
  v34[4] = self;
  v9 = v6;
  v35 = v9;
  v36 = buf;
  v37 = &v47;
  v38 = &v41;
  v39 = &v59;
  v40 = v4;
  -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v34);
  if (*((_BYTE *)v60 + 24))
  {
    -[SGSqlEntityStore clearMasterEntityCache](self, "clearMasterEntityCache");
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v10 = (id)v48[5];
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v30, v68, 16);
    if (v11)
    {
      v12 = *(_QWORD *)v31;
      do
      {
        for (i = 0; i != v11; ++i)
        {
          if (*(_QWORD *)v31 != v12)
            objc_enumerationMutation(v10);
          +[SGDNotificationBroadcaster emitContactDeleted:](SGDNotificationBroadcaster, "emitContactDeleted:", *(_QWORD *)(*((_QWORD *)&v30 + 1) + 8 * i));
        }
        v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v30, v68, 16);
      }
      while (v11);
    }

    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v14 = (id)v42[5];
    v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v26, v67, 16);
    if (v15)
    {
      v16 = *(_QWORD *)v27;
      do
      {
        for (j = 0; j != v15; ++j)
        {
          if (*(_QWORD *)v27 != v16)
            objc_enumerationMutation(v14);
          +[SGDNotificationBroadcaster emitContactUpdated:](SGDNotificationBroadcaster, "emitContactUpdated:", *(_QWORD *)(*((_QWORD *)&v26 + 1) + 8 * j));
        }
        v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v26, v67, 16);
      }
      while (v15);
    }

    if (v4)
    {
      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      v18 = *((id *)v54 + 5);
      v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v22, v66, 16);
      if (v19)
      {
        v20 = *(_QWORD *)v23;
        do
        {
          for (k = 0; k != v19; ++k)
          {
            if (*(_QWORD *)v23 != v20)
              objc_enumerationMutation(v18);
            +[SGDNotificationBroadcaster emitContactUpdated:](SGDNotificationBroadcaster, "emitContactUpdated:", *(_QWORD *)(*((_QWORD *)&v22 + 1) + 8 * k), (_QWORD)v22);
          }
          v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v22, v66, 16);
        }
        while (v19);
      }

    }
  }
  SGRecordMeasurementState(&v63);

  _Block_object_dispose(&v41, 8);
  _Block_object_dispose(&v47, 8);

  _Block_object_dispose(buf, 8);
  _Block_object_dispose(&v59, 8);
  SGRecordMeasurementState(&v63);

}

void __61__SGSqlEntityStore_Writing__writeIdentityBlobs_forceRewrite___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  int v21;
  void *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "_loadIdentityBlobs");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "_labelIdentityBlobs:", *(_QWORD *)(a1 + 40));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "_pas_mappedSetWithTransform:", &__block_literal_global_283);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "_pas_mappedSetWithTransform:", &__block_literal_global_284);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)objc_msgSend(v2, "mutableCopy");
  objc_msgSend(v6, "intersectSet:", v3);
  objc_msgSend(v6, "_pas_mappedSetWithTransform:", &__block_literal_global_285);
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v9 = *(void **)(v8 + 40);
  *(_QWORD *)(v8 + 40) = v7;

  v10 = (void *)objc_msgSend(v2, "mutableCopy");
  objc_msgSend(v10, "minusSet:", v3);
  v11 = (void *)objc_msgSend(v4, "mutableCopy");
  objc_msgSend(v11, "minusSet:", v5);
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v13 = *(void **)(v12 + 40);
  *(_QWORD *)(v12 + 40) = v11;

  v14 = (void *)objc_msgSend(v3, "mutableCopy");
  objc_msgSend(v14, "minusSet:", v2);
  v15 = (void *)objc_msgSend(v5, "mutableCopy");
  objc_msgSend(v15, "minusSet:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));
  v16 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  v17 = *(void **)(v16 + 40);
  *(_QWORD *)(v16 + 40) = v15;

  if (objc_msgSend(v10, "count"))
  {
    sgLogHandle();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
    {
      v21 = 138412290;
      v22 = v10;
      _os_log_debug_impl(&dword_1C3607000, v18, OS_LOG_TYPE_DEBUG, "IdentityStore: Writing deletes for %@", (uint8_t *)&v21, 0xCu);
    }

    objc_msgSend(*(id *)(a1 + 32), "_writeLabeledBlobs:deletedMasterEntityIds:", v10, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40));
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = 1;
  }
  if (objc_msgSend(v14, "count"))
  {
    sgLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
    {
      v21 = 138412290;
      v22 = v14;
      _os_log_debug_impl(&dword_1C3607000, v19, OS_LOG_TYPE_DEBUG, "IdentityStore: Newly created contacts %@", (uint8_t *)&v21, 0xCu);
    }

    objc_msgSend(*(id *)(a1 + 32), "_writeLabeledBlobs:deletedMasterEntityIds:", v14, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40));
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = 1;
  }
  if (*(_BYTE *)(a1 + 80) && objc_msgSend(v6, "count"))
  {
    sgLogHandle();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
    {
      v21 = 138412290;
      v22 = v6;
      _os_log_debug_impl(&dword_1C3607000, v20, OS_LOG_TYPE_DEBUG, "IdentityStore: Forced update of contacts %@", (uint8_t *)&v21, 0xCu);
    }

    objc_msgSend(*(id *)(a1 + 32), "_writeLabeledBlobs:deletedMasterEntityIds:", v6, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40));
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = 1;
  }

}

uint64_t __61__SGSqlEntityStore_Writing__writeIdentityBlobs_forceRewrite___block_invoke_4(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "second");
}

uint64_t __61__SGSqlEntityStore_Writing__writeIdentityBlobs_forceRewrite___block_invoke_3(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "second");
}

uint64_t __61__SGSqlEntityStore_Writing__writeIdentityBlobs_forceRewrite___block_invoke_2(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "second");
}

intptr_t __71__SGSqlEntityStore_Writing___writeLabeledBlobs_deletedMasterEntityIds___block_invoke(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void __71__SGSqlEntityStore_Writing___writeLabeledBlobs_deletedMasterEntityIds___block_invoke_3(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;

  v3 = a2;
  v5 = v3;
  if (*(_BYTE *)(a1 + 48))
  {
    objc_msgSend(v3, "bindNamedParam:toInt64:", ":masterEntityId", -1);
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "second");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "bindNamedParam:toInt64:", ":masterEntityId", objc_msgSend(v4, "rowId"));

  }
  objc_msgSend(v5, "bindNamedParam:toNSArray:", ":ids", *(_QWORD *)(a1 + 40));
  objc_msgSend(v5, "bindNamedParam:toInteger:", ":pseudoContact", 4);
  objc_msgSend(v5, "bindNamedParam:toInteger:", ":unrecognizedContact", 12);

}

uint64_t __71__SGSqlEntityStore_Writing___writeLabeledBlobs_deletedMasterEntityIds___block_invoke_2(uint64_t a1, void *a2)
{
  return objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", objc_msgSend(a2, "rowId"));
}

void __49__SGSqlEntityStore_Writing___labelIdentityBlobs___block_invoke(_QWORD *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  _QWORD v5[5];
  _QWORD v6[4];
  id v7;

  v2 = (void *)a1[5];
  v3 = *(void **)(a1[4] + 8);
  v4 = MEMORY[0x1E0C809B0];
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __49__SGSqlEntityStore_Writing___labelIdentityBlobs___block_invoke_2;
  v6[3] = &unk_1E7DB74A0;
  v7 = v2;
  v5[0] = v4;
  v5[1] = 3221225472;
  v5[2] = __49__SGSqlEntityStore_Writing___labelIdentityBlobs___block_invoke_3;
  v5[3] = &unk_1E7DB7510;
  v5[4] = a1[6];
  objc_msgSend(v3, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("SELECT 1 FROM _pas_nsindexset(:ids) i LEFT JOIN entity e on i.value = e.id AND e.entityType = :contact WHERE e.id IS NULL"), v6, v5, 0);

}

void __49__SGSqlEntityStore_Writing___labelIdentityBlobs___block_invoke_261(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  id obj;
  _QWORD v16[5];
  _QWORD v17[4];
  id v18;
  uint64_t v19;
  uint64_t v20;
  id (*v21)(uint64_t, void *);
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[128];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  obj = *(id *)(a1 + 32);
  v2 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
  if (v2)
  {
    v3 = MEMORY[0x1E0C809B0];
    v4 = *(_QWORD *)v30;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v30 != v4)
          objc_enumerationMutation(obj);
        v6 = *(_QWORD *)(*((_QWORD *)&v29 + 1) + 8 * v5);
        v7 = (void *)MEMORY[0x1C3BD4F6C]();
        v25 = 0;
        v26 = &v25;
        v27 = 0x2020000000;
        v28 = -1;
        v19 = v3;
        v20 = 3221225472;
        v21 = __49__SGSqlEntityStore_Writing___labelIdentityBlobs___block_invoke_2_262;
        v22 = &unk_1E7DAF090;
        v8 = *(_QWORD *)(a1 + 56);
        v23 = *(_QWORD *)(a1 + 40);
        v24 = v8;
        sgMap();
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v10 = *(void **)(*(_QWORD *)(a1 + 40) + 8);
        v17[0] = v3;
        v17[1] = 3221225472;
        v17[2] = __49__SGSqlEntityStore_Writing___labelIdentityBlobs___block_invoke_3_268;
        v17[3] = &unk_1E7DB74A0;
        v11 = v9;
        v18 = v11;
        v16[0] = v3;
        v16[1] = 3221225472;
        v16[2] = __49__SGSqlEntityStore_Writing___labelIdentityBlobs___block_invoke_4;
        v16[3] = &unk_1E7DB7510;
        v16[4] = &v25;
        objc_msgSend(v10, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("SELECT MIN(id) FROM entity WHERE id IN _pas_nsarray(:ids)"), v17, v16, 0);
        if (v26[3] >= 1)
        {
          v12 = (void *)MEMORY[0x1E0D81638];
          objc_msgSend(MEMORY[0x1E0D19920], "recordIdForContactWithRowId:");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v12, "tupleWithFirst:second:", v6, v13);
          v14 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(*(id *)(a1 + 48), "addObject:", v14);
        }

        _Block_object_dispose(&v25, 8);
        objc_autoreleasePoolPop(v7);
        ++v5;
      }
      while (v2 != v5);
      v2 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
    }
    while (v2);
  }

}

id __49__SGSqlEntityStore_Writing___labelIdentityBlobs___block_invoke_2_262(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v6;

  v3 = a2;
  if (objc_msgSend(v3, "tableId"))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "handleFailureInMethod:object:file:lineNumber:description:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), CFSTR("SGSqlEntityStore+Writing.m"), 1375, CFSTR("recordId from wrong table"));

  }
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", objc_msgSend(v3, "rowId"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

uint64_t __49__SGSqlEntityStore_Writing___labelIdentityBlobs___block_invoke_3_268(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "bindNamedParam:toNSArray:", ":ids", *(_QWORD *)(a1 + 32));
}

uint64_t __49__SGSqlEntityStore_Writing___labelIdentityBlobs___block_invoke_4(uint64_t a1, void *a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_msgSend(a2, "getInt64ForColumn:", 0);
  return *MEMORY[0x1E0D81788];
}

void __49__SGSqlEntityStore_Writing___labelIdentityBlobs___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v2;
  id v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = a2;
  objc_msgSend(v3, "bindNamedParam:toNSIndexSet:", ":ids", v2);
  objc_msgSend(v3, "bindNamedParam:toInteger:", ":contact", 4);

}

uint64_t __49__SGSqlEntityStore_Writing___labelIdentityBlobs___block_invoke_3(uint64_t a1)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  return *MEMORY[0x1E0D81788];
}

void __47__SGSqlEntityStore_Writing___loadIdentityBlobs__block_invoke(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD v10[4];
  id v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD v14[5];
  id v15;
  _QWORD v16[4];

  v16[0] = 0;
  v16[1] = v16;
  v16[2] = 0x2020000000;
  v16[3] = -1;
  v14[0] = 0;
  v14[1] = v14;
  v14[2] = 0x3032000000;
  v14[3] = __Block_byref_object_copy__18696;
  v14[4] = __Block_byref_object_dispose__18697;
  v15 = 0;
  v15 = (id)objc_opt_new();
  v2 = MEMORY[0x1E0C809B0];
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __47__SGSqlEntityStore_Writing___loadIdentityBlobs__block_invoke_2;
  v10[3] = &unk_1E7DAEA78;
  v12 = v16;
  v13 = v14;
  v11 = *(id *)(a1 + 32);
  v3 = (void *)MEMORY[0x1C3BD5158](v10);
  v4 = *(void **)(*(_QWORD *)(a1 + 40) + 8);
  v6[0] = v2;
  v6[1] = 3221225472;
  v6[2] = __47__SGSqlEntityStore_Writing___loadIdentityBlobs__block_invoke_4;
  v6[3] = &unk_1E7DAEAC0;
  v8 = v16;
  v5 = v3;
  v7 = v5;
  v9 = v14;
  objc_msgSend(v4, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("SELECT id, masterEntityId FROM entity WHERE masterEntityId > 0 AND entityType IN (:pseudo, :unrecognized) ORDER BY masterEntityId ASC"), &__block_literal_global_254, v6, 0);
  (*((void (**)(id, uint64_t))v5 + 2))(v5, -1);

  _Block_object_dispose(v14, 8);
  _Block_object_dispose(v16, 8);
}

void __47__SGSqlEntityStore_Writing___loadIdentityBlobs__block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  if (*(uint64_t *)(v4 + 24) >= 1)
  {
    v5 = (void *)MEMORY[0x1E0D81638];
    v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
    objc_msgSend(MEMORY[0x1E0D19920], "recordIdForContactWithRowId:");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "tupleWithFirst:second:", v6, v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(*(id *)(a1 + 32), "addObject:", v8);
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  }
  *(_QWORD *)(v4 + 24) = a2;
  v9 = objc_opt_new();
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v11 = *(void **)(v10 + 40);
  *(_QWORD *)(v10 + 40) = v9;

}

uint64_t __47__SGSqlEntityStore_Writing___loadIdentityBlobs__block_invoke_4(_QWORD *a1, sqlite3_stmt *a2)
{
  void *v4;
  sqlite3_int64 v5;
  void *v6;
  void *v7;

  v4 = (void *)MEMORY[0x1C3BD4F6C]();
  v5 = sqlite3_column_int64(a2, 0);
  if (sqlite3_column_int64(a2, 1) != *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24))
    (*(void (**)(void))(a1[4] + 16))();
  v6 = *(void **)(*(_QWORD *)(a1[6] + 8) + 40);
  objc_msgSend(MEMORY[0x1E0D19920], "recordIdForContactWithRowId:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v7);

  objc_autoreleasePoolPop(v4);
  return 0;
}

uint64_t __47__SGSqlEntityStore_Writing___loadIdentityBlobs__block_invoke_3(uint64_t a1, uint64_t a2)
{
  +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":pseudo", 4);
  return +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":unrecognized", 12);
}

void __66__SGSqlEntityStore_Writing___writeFTSTermsForEnrichment_entityId___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  _QWORD v4[4];
  id v5;
  id v6;
  id v7;
  uint64_t v8;

  v4[0] = MEMORY[0x1E0C809B0];
  v2 = *(void **)(a1 + 40);
  v3 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v4[2] = __66__SGSqlEntityStore_Writing___writeFTSTermsForEnrichment_entityId___block_invoke_2;
  v4[3] = &unk_1E7DAEA50;
  v8 = *(_QWORD *)(a1 + 64);
  v4[1] = 3221225472;
  v5 = v2;
  v6 = *(id *)(a1 + 48);
  v7 = *(id *)(a1 + 56);
  objc_msgSend(v3, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("INSERT OR REPLACE INTO entity_fts(docid, entityId, messagingTerms, ftsTerms) VALUES(?, ?, ?, ?)"), v4, 0, 0);

}

void __66__SGSqlEntityStore_Writing___writeFTSTermsForEnrichment_entityId___block_invoke_2(uint64_t a1, sqlite3_stmt *a2)
{
  void *v4;
  int IsContactDetail;
  sqlite3_int64 v6;
  id v7;
  id v8;

  sqlite3_bind_int64(a2, 1, *(_QWORD *)(a1 + 56));
  objc_msgSend(*(id *)(a1 + 32), "duplicateKey");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "entityType");
  IsContactDetail = SGEntityTypeIsContactDetail();

  if (IsContactDetail)
    v6 = objc_msgSend(*(id *)(a1 + 32), "groupId");
  else
    v6 = *(_QWORD *)(a1 + 56);
  sqlite3_bind_int64(a2, 2, v6);
  objc_msgSend(*(id *)(a1 + 40), "_pas_componentsJoinedByString:", CFSTR(" "));
  v7 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  sqlite3_bind_text(a2, 3, (const char *)objc_msgSend(v7, "UTF8String"), -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);

  objc_msgSend(*(id *)(a1 + 48), "_pas_componentsJoinedByString:", CFSTR(" "));
  v8 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  sqlite3_bind_text(a2, 4, (const char *)objc_msgSend(v8, "UTF8String"), -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);

}

uint64_t __58__SGSqlEntityStore_Writing___writeEventEntitiesToJournal___block_invoke(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "_journalEntryFromEntity:", a2);
}

void __63__SGSqlEntityStore_Writing___writeEntityParentageFor_entityId___block_invoke(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  _QWORD v39[6];
  _QWORD v40[6];
  _QWORD v41[8];
  _QWORD v42[10];

  v42[8] = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 32);
  v37 = *(void **)(v3 + 8);
  if (*(_DWORD *)(v3 + 80) < 0x3Eu)
  {
    v39[0] = CFSTR("parentKey");
    objc_msgSend(*(id *)(a1 + 40), "duplicateKey");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "parentKey");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (v5)
    {
      objc_msgSend(*(id *)(a1 + 40), "duplicateKey");
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v38, "parentKey");
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v35, "serialize");
      v8 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0C99E38], "null");
      v8 = objc_claimAutoreleasedReturnValue();
      v38 = (void *)v8;
    }
    v36 = (void *)v8;
    v40[0] = v8;
    v39[1] = CFSTR("childId");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)(a1 + 48));
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v40[1] = v12;
    v40[2] = CFSTR("-");
    v39[2] = CFSTR("duplicateKeyHash");
    v39[3] = CFSTR("duplicateKeyHashBlob");
    objc_msgSend(*(id *)(a1 + 40), "duplicateKey");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "compositeHash");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v40[3] = v14;
    v39[4] = CFSTR("extractionType");
    v15 = (void *)MEMORY[0x1E0CB37E8];
    objc_msgSend(*(id *)(a1 + 40), "extractionInfo");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "numberWithUnsignedInteger:", objc_msgSend(v16, "extractionType"));
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v40[4] = v17;
    v39[5] = CFSTR("sourceKey");
    objc_msgSend(*(id *)(a1 + 40), "sourceKey");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    if (v18)
      objc_msgSend(*(id *)(a1 + 40), "sourceKey");
    else
      objc_msgSend(MEMORY[0x1E0C99E38], "null");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v40[5] = v22;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v40, v39, 6);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v37, "insertOrReplaceIntoTable:dictionary:onError:", CFSTR("entityParentage"), v23, 0);

    if (v5)
    {
LABEL_27:

    }
  }
  else
  {
    v41[0] = CFSTR("parentKey");
    objc_msgSend(*(id *)(a1 + 40), "duplicateKey");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "parentKey");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (v5)
    {
      objc_msgSend(*(id *)(a1 + 40), "duplicateKey");
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v38, "parentKey");
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v35, "serialize");
      v6 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0C99E38], "null");
      v6 = objc_claimAutoreleasedReturnValue();
      v38 = (void *)v6;
    }
    v36 = (void *)v6;
    v42[0] = v6;
    v41[1] = CFSTR("childId");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)(a1 + 48));
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    v42[1] = v33;
    v42[2] = CFSTR("-");
    v41[2] = CFSTR("duplicateKeyHash");
    v41[3] = CFSTR("duplicateKeyHashBlob");
    objc_msgSend(*(id *)(a1 + 40), "duplicateKey");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v32, "compositeHash");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v42[3] = v31;
    v41[4] = CFSTR("extractionType");
    v9 = (void *)MEMORY[0x1E0CB37E8];
    objc_msgSend(*(id *)(a1 + 40), "extractionInfo");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "numberWithUnsignedInteger:", objc_msgSend(v30, "extractionType"));
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v42[4] = v29;
    v41[5] = CFSTR("modelVersion");
    objc_msgSend(*(id *)(a1 + 40), "extractionInfo");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "modelVersion");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v34 = v4;
    if (v10)
    {
      objc_msgSend(*(id *)(a1 + 40), "extractionInfo");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v27, "modelVersion");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v11 = &unk_1E7E0C620;
    }
    v42[5] = v11;
    v41[6] = CFSTR("modelConfidence");
    objc_msgSend(*(id *)(a1 + 40), "extractionInfo");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "confidence");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    if (v20)
    {
      objc_msgSend(*(id *)(a1 + 40), "extractionInfo");
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v1, "confidence");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v21 = &unk_1E7E0CDD0;
    }
    v42[6] = v21;
    v41[7] = CFSTR("sourceKey");
    objc_msgSend(*(id *)(a1 + 40), "sourceKey");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    if (v24)
      objc_msgSend(*(id *)(a1 + 40), "sourceKey");
    else
      objc_msgSend(MEMORY[0x1E0C99E38], "null");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v42[7] = v25;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v42, v41, 8);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v37, "insertOrReplaceIntoTable:dictionary:onError:", CFSTR("entityParentage"), v26, 0);

    if (v20)
    {

    }
    if (v10)
    {

    }
    v7 = v34;
    if (v5)
      goto LABEL_27;
  }

}

void __50__SGSqlEntityStore_Writing___writeEnrichmentToDb___block_invoke(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  objc_msgSend(*(id *)(a1 + 32), "duplicateKey");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "compositeHash");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  +[SGSqliteDatabase bindParam:name:nsdata:](SGSqliteDatabase, "bindParam:name:nsdata:", a2, ":duplicateKeyHash", v5);

  objc_msgSend(*(id *)(a1 + 32), "extractionInfo");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":extractionType", objc_msgSend(v6, "extractionType"));

  objc_msgSend(*(id *)(a1 + 32), "contentHash");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (v7)
  {
    objc_msgSend(*(id *)(a1 + 32), "contentHash");
    v8 = (id)objc_claimAutoreleasedReturnValue();
    +[SGSqliteDatabase bindParam:name:nsdata:](SGSqliteDatabase, "bindParam:name:nsdata:", a2, ":contentHash", v8);

  }
}

uint64_t __50__SGSqlEntityStore_Writing___writeEnrichmentToDb___block_invoke_2(_QWORD *a1, sqlite3_stmt *a2)
{
  double v4;

  *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = sqlite3_column_int64(a2, 0);
  *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) = sqlite3_column_int64(a2, 1);
  v4 = sqlite3_column_double(a2, 2);
  *(double *)(*(_QWORD *)(a1[6] + 8) + 24) = fmax(v4, sqlite3_column_double(a2, 3));
  return 1;
}

void __50__SGSqlEntityStore_Writing___writeEnrichmentToDb___block_invoke_3(uint64_t a1)
{
  void *v2;
  double v3;
  double v4;
  void *v5;
  uint64_t v6;
  const __CFString *v7;
  uint64_t v8;
  const __CFString *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  const __CFString *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  void *v36;
  void *v37;
  void *v38;
  const __CFString *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  void *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t i;
  void *v53;
  void *v54;
  void *v55;
  uint64_t v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *context;
  void *v74;
  _QWORD v75[5];
  id v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  _QWORD v81[4];
  id v82;
  _BYTE v83[128];
  _QWORD v84[17];
  _QWORD v85[19];

  v85[17] = *MEMORY[0x1E0C80C00];
  v2 = (void *)objc_opt_new();
  objc_msgSend(v2, "timeIntervalSince1970");
  v4 = v3;

  context = (void *)MEMORY[0x1C3BD4F6C]();
  v84[0] = CFSTR("id");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) == -1)
    objc_msgSend(MEMORY[0x1E0C99E38], "null");
  else
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:");
  v72 = (void *)objc_claimAutoreleasedReturnValue();
  v85[0] = v72;
  v84[1] = CFSTR("entityKey");
  objc_msgSend(*(id *)(a1 + 32), "duplicateKey");
  v71 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v71, "entityKey");
  v70 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v70, "serialize");
  v69 = (void *)objc_claimAutoreleasedReturnValue();
  v85[1] = v69;
  v84[2] = CFSTR("entityType");
  v5 = (void *)MEMORY[0x1E0CB37E8];
  objc_msgSend(*(id *)(a1 + 32), "duplicateKey");
  v68 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "numberWithLongLong:", objc_msgSend(v68, "entityType"));
  v67 = (void *)objc_claimAutoreleasedReturnValue();
  v85[2] = v67;
  v84[3] = CFSTR("author");
  objc_msgSend(*(id *)(a1 + 32), "author");
  v66 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v66, "sg_serialized");
  v6 = objc_claimAutoreleasedReturnValue();
  v65 = (void *)v6;
  if (v6)
    v7 = (const __CFString *)v6;
  else
    v7 = &stru_1E7DB83A8;
  v85[3] = v7;
  v84[4] = CFSTR("title");
  objc_msgSend(*(id *)(a1 + 32), "title");
  v8 = objc_claimAutoreleasedReturnValue();
  v64 = (void *)v8;
  if (v8)
    v9 = (const __CFString *)v8;
  else
    v9 = &stru_1E7DB83A8;
  v85[4] = v9;
  v84[5] = CFSTR("creationTimestamp");
  v10 = (void *)MEMORY[0x1E0CB37E8];
  objc_msgSend(*(id *)(a1 + 32), "creationTimestamp");
  objc_msgSend(v10, "numberWithDouble:");
  v63 = (void *)objc_claimAutoreleasedReturnValue();
  v85[5] = v63;
  v84[6] = CFSTR("updateTimestamp");
  v11 = (void *)MEMORY[0x1E0CB37E8];
  objc_msgSend(*(id *)(a1 + 32), "lastModifiedTimestamp");
  objc_msgSend(v11, "numberWithDouble:");
  v62 = (void *)objc_claimAutoreleasedReturnValue();
  v85[6] = v62;
  v84[7] = CFSTR("tags");
  objc_msgSend(*(id *)(a1 + 32), "tags");
  v61 = (void *)objc_claimAutoreleasedReturnValue();
  SGEntityTagsForStorage(v61);
  v12 = objc_claimAutoreleasedReturnValue();
  v60 = (void *)v12;
  if (v12)
    v13 = (const __CFString *)v12;
  else
    v13 = &stru_1E7DB83A8;
  v85[7] = v13;
  v84[8] = CFSTR("structuredData");
  objc_msgSend(*(id *)(a1 + 32), "structuredData");
  v14 = objc_claimAutoreleasedReturnValue();
  v15 = (void *)v14;
  if (!v14)
  {
    objc_msgSend(MEMORY[0x1E0C99E38], "null");
    v14 = objc_claimAutoreleasedReturnValue();
  }
  v85[8] = v14;
  v84[9] = CFSTR("state");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", objc_msgSend(*(id *)(a1 + 32), "state", v14));
  v59 = (void *)objc_claimAutoreleasedReturnValue();
  v85[9] = v59;
  v84[10] = CFSTR("indexTimestamp");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v4);
  v58 = (void *)objc_claimAutoreleasedReturnValue();
  v85[10] = v58;
  v84[11] = CFSTR("lastSeenTimestamp");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v4);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v85[11] = v16;
  v84[12] = CFSTR("masterEntityId");
  v17 = (void *)MEMORY[0x1E0CB37E8];
  v18 = objc_msgSend(*(id *)(a1 + 32), "masterEntityId");
  if (v18)
    v19 = v18;
  else
    v19 = -1;
  objc_msgSend(v17, "numberWithLongLong:", v19);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v85[12] = v20;
  v84[13] = CFSTR("groupId");
  v21 = (void *)MEMORY[0x1E0CB37E8];
  v22 = objc_msgSend(*(id *)(a1 + 32), "groupId");
  if (v22)
    v23 = v22;
  else
    v23 = -1;
  objc_msgSend(v21, "numberWithLongLong:", v23);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v85[13] = v24;
  v84[14] = CFSTR("contentHashBlob");
  objc_msgSend(*(id *)(a1 + 32), "contentHash");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v26 = v25;
  if (!v25)
  {
    objc_msgSend(MEMORY[0x1E0C99E38], "null");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
  }
  v85[14] = v26;
  v84[15] = CFSTR("pendingGeocode");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", objc_msgSend(*(id *)(a1 + 32), "pendingGeocode"));
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v85[15] = v27;
  v84[16] = CFSTR("harvestedOnBuild");
  objc_msgSend(MEMORY[0x1E0D81590], "currentOsBuild");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  v85[16] = v28;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v85, v84, 17);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  v74 = (void *)objc_msgSend(v29, "mutableCopy");

  if (!v25)
  if (!v15)

  objc_autoreleasePoolPop(context);
  v30 = *(void **)(a1 + 40);
  objc_msgSend(*(id *)(a1 + 32), "timeRange");
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v30, "_addTimeRange:toEntityWriteDictionary:", v31, v74);

  v32 = *(void **)(a1 + 40);
  objc_msgSend(*(id *)(a1 + 32), "locations");
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v32, "_addLocations:toEntityWriteDictionary:", v33, v74);

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 8), "insertOrReplaceIntoTable:dictionary:onError:", CFSTR("entity"), v74, 0);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = sqlite3_last_insert_rowid((sqlite3 *)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 8), "handle"));
  objc_msgSend(MEMORY[0x1E0D19920], "recordIdWithTableId:rowId:", 0, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24));
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "setRecordId:", v34);

  objc_msgSend(*(id *)(a1 + 40), "_writeEnrichmentToSnippetsDb:", *(_QWORD *)(a1 + 32));
  v35 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v36 = *(void **)(v35 + 40);
  *(_QWORD *)(v35 + 40) = CFSTR("DELETE FROM entityTags WHERE entityKey = :entityKey AND entityType = :entityType AND parentKey ");

  objc_msgSend(*(id *)(a1 + 32), "duplicateKey");
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v37, "parentKey");
  v38 = (void *)objc_claimAutoreleasedReturnValue();

  if (v38)
    v39 = CFSTR(" = :parentKey");
  else
    v39 = CFSTR(" is NULL");
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "stringByAppendingString:", v39);
  v40 = objc_claimAutoreleasedReturnValue();
  v41 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v42 = *(void **)(v41 + 40);
  *(_QWORD *)(v41 + 40) = v40;

  v43 = *(void **)(a1 + 32);
  v44 = *(void **)(*(_QWORD *)(a1 + 40) + 8);
  v45 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
  v81[2] = __50__SGSqlEntityStore_Writing___writeEnrichmentToDb___block_invoke_4;
  v81[3] = &unk_1E7DB7720;
  v81[0] = MEMORY[0x1E0C809B0];
  v81[1] = 3221225472;
  v82 = v43;
  objc_msgSend(v44, "prepAndRunQuery:onPrep:onRow:onError:", v45, v81, 0, 0);
  v46 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v47 = *(void **)(v46 + 40);
  *(_QWORD *)(v46 + 40) = CFSTR("INSERT INTO entityTags (tag, entityKey, entityType, parentKey, duplicateKeyHash, duplicateKeyHashBlob) VALUES (:tag, :entityKey, :entityType, :parentKey, '-', :duplicateKeyHash)");

  v79 = 0u;
  v80 = 0u;
  v77 = 0u;
  v78 = 0u;
  objc_msgSend(*(id *)(a1 + 32), "tags");
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  v49 = objc_msgSend(v48, "countByEnumeratingWithState:objects:count:", &v77, v83, 16);
  if (v49)
  {
    v50 = v49;
    v51 = *(_QWORD *)v78;
    do
    {
      for (i = 0; i != v50; ++i)
      {
        if (*(_QWORD *)v78 != v51)
          objc_enumerationMutation(v48);
        v53 = *(void **)(*((_QWORD *)&v77 + 1) + 8 * i);
        if (objc_msgSend(v53, "indexed"))
        {
          v54 = *(void **)(a1 + 32);
          v55 = *(void **)(*(_QWORD *)(a1 + 40) + 8);
          v56 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
          v75[0] = MEMORY[0x1E0C809B0];
          v75[1] = 3221225472;
          v75[2] = __50__SGSqlEntityStore_Writing___writeEnrichmentToDb___block_invoke_5;
          v75[3] = &unk_1E7DB5190;
          v75[4] = v53;
          v76 = v54;
          objc_msgSend(v55, "prepAndRunQuery:onPrep:onRow:onError:", v56, v75, 0, 0);

        }
      }
      v50 = objc_msgSend(v48, "countByEnumeratingWithState:objects:count:", &v77, v83, 16);
    }
    while (v50);
  }

  objc_msgSend(*(id *)(a1 + 40), "_writeEntityParentageFor:entityId:", *(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24));
  objc_msgSend(*(id *)(a1 + 40), "_writeFTSTermsForEnrichment:entityId:", *(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24));

}

void __50__SGSqlEntityStore_Writing___writeEnrichmentToDb___block_invoke_4(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;

  objc_msgSend(*(id *)(a1 + 32), "duplicateKey");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "entityKey");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "serialize");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  +[SGSqliteDatabase bindParam:name:nsstring:](SGSqliteDatabase, "bindParam:name:nsstring:", a2, ":entityKey", v6);

  objc_msgSend(*(id *)(a1 + 32), "duplicateKey");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":entityType", objc_msgSend(v7, "entityType"));

  objc_msgSend(*(id *)(a1 + 32), "duplicateKey");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "parentKey");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9)
  {
    objc_msgSend(*(id *)(a1 + 32), "duplicateKey");
    v12 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "parentKey");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "serialize");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    +[SGSqliteDatabase bindParam:name:nsstring:](SGSqliteDatabase, "bindParam:name:nsstring:", a2, ":parentKey", v11);

  }
}

void __50__SGSqlEntityStore_Writing___writeEnrichmentToDb___block_invoke_5(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;

  objc_msgSend(*(id *)(a1 + 32), "name");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  +[SGSqliteDatabase bindParam:name:nsstring:](SGSqliteDatabase, "bindParam:name:nsstring:", a2, ":tag", v4);

  objc_msgSend(*(id *)(a1 + 40), "duplicateKey");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "entityKey");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "serialize");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[SGSqliteDatabase bindParam:name:nsstring:](SGSqliteDatabase, "bindParam:name:nsstring:", a2, ":entityKey", v7);

  objc_msgSend(*(id *)(a1 + 40), "duplicateKey");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":entityType", objc_msgSend(v8, "entityType"));

  objc_msgSend(*(id *)(a1 + 40), "duplicateKey");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "parentKey");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "serialize");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  +[SGSqliteDatabase bindParam:name:nsstring:](SGSqliteDatabase, "bindParam:name:nsstring:", a2, ":parentKey", v11);

  objc_msgSend(*(id *)(a1 + 40), "duplicateKey");
  v13 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "compositeHash");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  +[SGSqliteDatabase bindParam:name:nsdata:](SGSqliteDatabase, "bindParam:name:nsdata:", a2, ":duplicateKeyHash", v12);

}

void __53__SGSqlEntityStore_Writing___writeMessageEntityToDb___block_invoke(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  id v7;

  objc_msgSend(*(id *)(a1 + 32), "duplicateKey");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "messageKey");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "serialize");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  +[SGSqliteDatabase bindParam:name:nsstring:](SGSqliteDatabase, "bindParam:name:nsstring:", a2, ":key", v6);

  objc_msgSend(*(id *)(a1 + 32), "duplicateKey");
  v7 = (id)objc_claimAutoreleasedReturnValue();
  +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":type", objc_msgSend(v7, "entityType"));

}

uint64_t __53__SGSqlEntityStore_Writing___writeMessageEntityToDb___block_invoke_2(_QWORD *a1, sqlite3_stmt *a2)
{
  double v4;

  *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = sqlite3_column_int64(a2, 0);
  v4 = sqlite3_column_double(a2, 1);
  *(double *)(*(_QWORD *)(a1[5] + 8) + 24) = fmax(v4, sqlite3_column_double(a2, 2));
  *(_DWORD *)(*(_QWORD *)(a1[6] + 8) + 24) = sqlite3_column_int(a2, 3);
  return 1;
}

void __53__SGSqlEntityStore_Writing___writeMessageEntityToDb___block_invoke_3(uint64_t a1)
{
  void *v2;
  double v3;
  double v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  const __CFString *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  int HasSnippetData;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  uint64_t v35;
  void *v36;
  void *v37;
  uint64_t v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  _QWORD v52[4];
  id v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  _QWORD v59[4];
  id v60;
  _BYTE v61[128];
  _QWORD v62[14];
  _QWORD v63[16];

  v63[14] = *MEMORY[0x1E0C80C00];
  v2 = (void *)objc_opt_new();
  objc_msgSend(v2, "timeIntervalSince1970");
  v4 = v3;

  v46 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v62[0] = CFSTR("id");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) == -1)
    objc_msgSend(MEMORY[0x1E0C99E38], "null");
  else
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:");
  v51 = (void *)objc_claimAutoreleasedReturnValue();
  v63[0] = v51;
  v62[1] = CFSTR("key");
  objc_msgSend(*(id *)(a1 + 40), "duplicateKey");
  v50 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v50, "messageKey");
  v49 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v49, "serialize");
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  v63[1] = v48;
  v62[2] = CFSTR("type");
  v5 = (void *)MEMORY[0x1E0CB37E8];
  objc_msgSend(*(id *)(a1 + 40), "duplicateKey");
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "numberWithLongLong:", objc_msgSend(v47, "entityType"));
  v45 = (void *)objc_claimAutoreleasedReturnValue();
  v63[2] = v45;
  v62[3] = CFSTR("sourceKey");
  objc_msgSend(*(id *)(a1 + 40), "sourceKey");
  v6 = objc_claimAutoreleasedReturnValue();
  v44 = (void *)v6;
  if (!v6)
  {
    objc_msgSend(MEMORY[0x1E0C99E38], "null");
    v6 = objc_claimAutoreleasedReturnValue();
  }
  v39 = (void *)v6;
  v63[3] = v6;
  v62[4] = CFSTR("author");
  objc_msgSend(*(id *)(a1 + 40), "author");
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v43, "sg_serialized");
  v7 = objc_claimAutoreleasedReturnValue();
  v42 = (void *)v7;
  v8 = &stru_1E7DB83A8;
  if (v7)
    v8 = (const __CFString *)v7;
  v63[4] = v8;
  v62[5] = CFSTR("creationTimestamp");
  v9 = (void *)MEMORY[0x1E0CB37E8];
  objc_msgSend(*(id *)(a1 + 40), "creationTimestamp");
  objc_msgSend(v9, "numberWithDouble:");
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  v63[5] = v41;
  v62[6] = CFSTR("updateTimestamp");
  v10 = (void *)MEMORY[0x1E0CB37E8];
  objc_msgSend(*(id *)(a1 + 40), "lastModifiedTimestamp");
  objc_msgSend(v10, "numberWithDouble:");
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  v63[6] = v40;
  v62[7] = CFSTR("indexTimestamp");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v4);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v63[7] = v11;
  v62[8] = CFSTR("lastSeenTimestamp");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v4);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v63[8] = v12;
  v62[9] = CFSTR("tags");
  objc_msgSend(*(id *)(a1 + 40), "tags");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  SGEntityTagsForStorage(v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v63[9] = v14;
  v62[10] = CFSTR("state");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", objc_msgSend(*(id *)(a1 + 40), "state"));
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v63[10] = v15;
  v62[11] = CFSTR("downloadState");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24));
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v63[11] = v16;
  v62[12] = CFSTR("harvestedOnBuild");
  objc_msgSend(MEMORY[0x1E0D81590], "currentOsBuild");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v63[12] = v17;
  v62[13] = CFSTR("pendingVerification");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", objc_msgSend(*(id *)(a1 + 40), "pendingVerification"));
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v63[13] = v18;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v63, v62, 14);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v46, "insertOrReplaceIntoTable:dictionary:onError:", CFSTR("emailMetadata"), v19, 0);

  if (!v44)
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = sqlite3_last_insert_rowid((sqlite3 *)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "handle"));
  objc_msgSend(MEMORY[0x1E0D19920], "recordIdForEmailWithRowId:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24));
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "setRecordId:", v20);

  objc_msgSend(*(id *)(a1 + 40), "duplicateKey");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "entityType");
  HasSnippetData = SGEntityTypeHasSnippetData();

  if (HasSnippetData)
    objc_msgSend(*(id *)(a1 + 32), "_writeMessageEntityToSnippetsDb:", *(_QWORD *)(a1 + 40));
  v23 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  v24 = *(void **)(v23 + 40);
  *(_QWORD *)(v23 + 40) = CFSTR("DELETE FROM emailTags WHERE unlikely(key = :key)");

  v25 = *(void **)(a1 + 40);
  v26 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v27 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40);
  v59[2] = __53__SGSqlEntityStore_Writing___writeMessageEntityToDb___block_invoke_4;
  v59[3] = &unk_1E7DB7720;
  v59[0] = MEMORY[0x1E0C809B0];
  v59[1] = 3221225472;
  v60 = v25;
  objc_msgSend(v26, "prepAndRunQuery:onPrep:onRow:onError:", v27, v59, 0, 0);
  v28 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  v29 = *(void **)(v28 + 40);
  *(_QWORD *)(v28 + 40) = CFSTR("INSERT INTO emailTags (key, type, tag) VALUES (:key, :type, :tag)");

  v57 = 0u;
  v58 = 0u;
  v55 = 0u;
  v56 = 0u;
  objc_msgSend(*(id *)(a1 + 40), "tags");
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  v31 = objc_msgSend(v30, "countByEnumeratingWithState:objects:count:", &v55, v61, 16);
  if (v31)
  {
    v32 = v31;
    v33 = *(_QWORD *)v56;
    do
    {
      for (i = 0; i != v32; ++i)
      {
        if (*(_QWORD *)v56 != v33)
          objc_enumerationMutation(v30);
        v35 = *(_QWORD *)(*((_QWORD *)&v55 + 1) + 8 * i);
        v36 = *(void **)(a1 + 40);
        v37 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
        v38 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40);
        v52[0] = MEMORY[0x1E0C809B0];
        v52[1] = 3221225472;
        v52[2] = __53__SGSqlEntityStore_Writing___writeMessageEntityToDb___block_invoke_5;
        v52[3] = &unk_1E7DB5190;
        v53 = v36;
        v54 = v35;
        objc_msgSend(v37, "prepAndRunQuery:onPrep:onRow:onError:", v38, v52, 0, 0);

      }
      v32 = objc_msgSend(v30, "countByEnumeratingWithState:objects:count:", &v55, v61, 16);
    }
    while (v32);
  }

}

void __53__SGSqlEntityStore_Writing___writeMessageEntityToDb___block_invoke_4(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;

  objc_msgSend(*(id *)(a1 + 32), "duplicateKey");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "messageKey");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "serialize");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  +[SGSqliteDatabase bindParam:name:nsstring:](SGSqliteDatabase, "bindParam:name:nsstring:", a2, ":key", v4);

}

void __53__SGSqlEntityStore_Writing___writeMessageEntityToDb___block_invoke_5(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  objc_msgSend(*(id *)(a1 + 32), "duplicateKey");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "messageKey");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "serialize");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  +[SGSqliteDatabase bindParam:name:nsstring:](SGSqliteDatabase, "bindParam:name:nsstring:", a2, ":key", v6);

  objc_msgSend(*(id *)(a1 + 32), "duplicateKey");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":type", objc_msgSend(v7, "entityType"));

  objc_msgSend(*(id *)(a1 + 40), "name");
  v8 = (id)objc_claimAutoreleasedReturnValue();
  +[SGSqliteDatabase bindParam:name:nsstring:](SGSqliteDatabase, "bindParam:name:nsstring:", a2, ":tag", v8);

}

void __56__SGSqlEntityStore_Writing__markEntityAsDupeByRecordId___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  _QWORD v6[5];
  _QWORD v7[4];
  id v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  char v12;

  v9 = 0;
  v10 = &v9;
  v11 = 0x2020000000;
  v12 = 0;
  v2 = *(void **)(a1 + 40);
  v3 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v7[2] = __56__SGSqlEntityStore_Writing__markEntityAsDupeByRecordId___block_invoke_2;
  v7[3] = &unk_1E7DB7720;
  v4 = MEMORY[0x1E0C809B0];
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v8 = v2;
  v6[0] = v4;
  v6[1] = 3221225472;
  v6[2] = __56__SGSqlEntityStore_Writing__markEntityAsDupeByRecordId___block_invoke_3;
  v6[3] = &unk_1E7DB51B8;
  v6[4] = &v9;
  objc_msgSend(v3, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("SELECT curatedDupe FROM entity WHERE id = :id"), v7, v6, 0);
  if (!*((_BYTE *)v10 + 24))
  {
    v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("id = %lld"), objc_msgSend(*(id *)(a1 + 40), "rowId"));
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "updateTable:dictionary:whereClause:onError:", CFSTR("entity"), *(_QWORD *)(a1 + 48), v5, 0);

  }
  _Block_object_dispose(&v9, 8);
}

uint64_t __56__SGSqlEntityStore_Writing__markEntityAsDupeByRecordId___block_invoke_2(uint64_t a1, uint64_t a2)
{
  return +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":id", objc_msgSend(*(id *)(a1 + 32), "rowId"));
}

uint64_t __56__SGSqlEntityStore_Writing__markEntityAsDupeByRecordId___block_invoke_3(uint64_t a1, sqlite3_stmt *a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = sqlite3_column_int(a2, 0) != 0;
  return 1;
}

void __87__SGSqlEntityStore_Writing__writeEmailVerificationResultForEmailWithKey_eventEntities___block_invoke(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, void *);
  void *v10;
  id v11;
  _QWORD v12[4];
  id v13;
  uint8_t buf[4];
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  sgEventsLogHandle();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    v15 = v3;
    _os_log_impl(&dword_1C3607000, v2, OS_LOG_TYPE_DEFAULT, "Removing pendingVerification flag from %@", buf, 0xCu);
  }

  v4 = *(void **)(a1 + 32);
  v5 = *(void **)(*(_QWORD *)(a1 + 40) + 8);
  v6 = MEMORY[0x1E0C809B0];
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __87__SGSqlEntityStore_Writing__writeEmailVerificationResultForEmailWithKey_eventEntities___block_invoke_131;
  v12[3] = &unk_1E7DB74A0;
  v13 = v4;
  v7 = v6;
  v8 = 3221225472;
  v9 = __87__SGSqlEntityStore_Writing__writeEmailVerificationResultForEmailWithKey_eventEntities___block_invoke_2;
  v10 = &unk_1E7DB77D8;
  v11 = *(id *)(a1 + 32);
  objc_msgSend(v5, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("UPDATE emailMetadata SET pendingVerification = :pendingVerification WHERE key = :key"), v12, 0, &v7);
  objc_msgSend(*(id *)(a1 + 40), "_writeEventEntitiesToJournal:", *(_QWORD *)(a1 + 48), v7, v8, v9, v10);

}

void __87__SGSqlEntityStore_Writing__writeEmailVerificationResultForEmailWithKey_eventEntities___block_invoke_131(uint64_t a1, void *a2)
{
  id v3;
  id v4;

  v3 = a2;
  objc_msgSend(v3, "bindNamedParam:toInteger:", ":pendingVerification", 0);
  objc_msgSend(*(id *)(a1 + 32), "serialize");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "bindNamedParam:toNSString:", ":key", v4);

}

uint64_t __87__SGSqlEntityStore_Writing__writeEmailVerificationResultForEmailWithKey_eventEntities___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  id v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  sgEventsLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
  {
    v6 = *(_QWORD *)(a1 + 32);
    v7 = 138412546;
    v8 = v6;
    v9 = 2112;
    v10 = v3;
    _os_log_fault_impl(&dword_1C3607000, v4, OS_LOG_TYPE_FAULT, "Error removing pendingVerification flag from %@: %@", (uint8_t *)&v7, 0x16u);
  }

  return *MEMORY[0x1E0D81788];
}

void __58__SGSqlEntityStore_Writing__writeEntityGeocodeResultToDb___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  id v5;
  void *v6;
  void *v7;
  _QWORD v8[5];
  _QWORD v9[4];
  id v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char v14;

  v11 = 0;
  v12 = &v11;
  v13 = 0x2020000000;
  v14 = 0;
  v2 = *(void **)(a1 + 40);
  v3 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v9[2] = __58__SGSqlEntityStore_Writing__writeEntityGeocodeResultToDb___block_invoke_2;
  v9[3] = &unk_1E7DB7720;
  v4 = MEMORY[0x1E0C809B0];
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v10 = v2;
  v8[0] = v4;
  v8[1] = 3221225472;
  v8[2] = __58__SGSqlEntityStore_Writing__writeEntityGeocodeResultToDb___block_invoke_3;
  v8[3] = &unk_1E7DB51B8;
  v8[4] = &v11;
  objc_msgSend(v3, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("SELECT pendingGeocode FROM entity WHERE id = :id"), v9, v8, 0);
  if (*((_BYTE *)v12 + 24))
  {
    v5 = objc_alloc(MEMORY[0x1E0CB3940]);
    objc_msgSend(*(id *)(a1 + 40), "recordId");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = (void *)objc_msgSend(v5, "initWithFormat:", CFSTR("id = %lld"), objc_msgSend(v6, "rowId"));

    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "updateTable:dictionary:whereClause:onError:", CFSTR("entity"), *(_QWORD *)(a1 + 48), v7, 0);
    objc_msgSend(*(id *)(a1 + 32), "_writeEventEntityToJournal:", *(_QWORD *)(a1 + 40));

  }
  _Block_object_dispose(&v11, 8);
}

void __58__SGSqlEntityStore_Writing__writeEntityGeocodeResultToDb___block_invoke_2(uint64_t a1, uint64_t a2)
{
  id v3;

  objc_msgSend(*(id *)(a1 + 32), "recordId");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":id", objc_msgSend(v3, "rowId"));

}

uint64_t __58__SGSqlEntityStore_Writing__writeEntityGeocodeResultToDb___block_invoke_3(uint64_t a1, sqlite3_stmt *a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = sqlite3_column_int(a2, 0) != 0;
  return 1;
}

void __53__SGSqlEntityStore_Writing__entityWantsFullDownload___block_invoke(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  objc_msgSend(*(id *)(a1 + 32), "duplicateKey");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "compositeHash");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  +[SGSqliteDatabase bindParam:name:nsdata:](SGSqliteDatabase, "bindParam:name:nsdata:", a2, ":duplicateKeyHash", v5);

  objc_msgSend(*(id *)(a1 + 32), "extractionInfo");
  v6 = (id)objc_claimAutoreleasedReturnValue();
  +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":extractionType", objc_msgSend(v6, "extractionType"));

}

uint64_t __53__SGSqlEntityStore_Writing__entityWantsFullDownload___block_invoke_2(uint64_t a1, sqlite3_stmt *a2)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = sqlite3_column_int(a2, 0);
  return 1;
}

uint64_t __77__SGSqlEntityStore_Writing___computePseudoContactContentHash_contactDetails___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;

  v4 = a2;
  v5 = a3;
  objc_msgSend(v4, "duplicateKey");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "entityType");

  objc_msgSend(v5, "duplicateKey");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "entityType");

  if (v7 < v9)
    v10 = -1;
  else
    v10 = 1;
  if (v7 == v9)
  {
    objc_msgSend(v4, "normalizedValue");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "normalizedValue");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v11, "compare:", v12);

  }
  return v10;
}

uint64_t __56__SGSqlEntityStore_Writing___dumpTable_columns_limitTo___block_invoke(uint64_t a1, sqlite3_stmt *a2)
{
  unint64_t v4;
  __CFString *v5;
  id v6;
  void *v7;
  void *v8;
  __CFString *v9;
  uint64_t v10;
  int v11;
  char *v12;

  if (objc_msgSend(*(id *)(a1 + 32), "count"))
  {
    v4 = 0;
    v5 = &stru_1E7DB83A8;
    do
    {
      v6 = objc_alloc(MEMORY[0x1E0CB3940]);
      sqlite3_column_nsstring(a2, v4);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = (void *)objc_msgSend(v6, "initWithFormat:", CFSTR("%@    "), v7);
      -[__CFString stringByAppendingString:](v5, "stringByAppendingString:", v8);
      v9 = (__CFString *)objc_claimAutoreleasedReturnValue();

      ++v4;
      v5 = v9;
    }
    while (objc_msgSend(*(id *)(a1 + 32), "count") > v4);
  }
  else
  {
    v9 = &stru_1E7DB83A8;
  }
  NSLog((NSString *)CFSTR("%@"), v9);
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v11 = *(_DWORD *)(v10 + 24);
  if (v11 <= 0)
  {
    v12 = &SGSqliteDatabaseStop;
  }
  else
  {
    *(_DWORD *)(v10 + 24) = v11 - 1;
    v12 = &SGSqliteDatabaseKeepGoing;
  }

  return *v12;
}

void __84__SGSqlEntityStore_Writing___deleteOldInteractionContactDetails_currentIdentifiers___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = a2;
  objc_msgSend(v4, "bindNamedParam:toNSString:", ":parentKey", v3);
  objc_msgSend(v4, "bindNamedParam:toNSSet:", ":ids", *(_QWORD *)(a1 + 40));

}

uint64_t __84__SGSqlEntityStore_Writing___deleteOldInteractionContactDetails_currentIdentifiers___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  SGDuplicateKey *v6;
  unsigned __int8 *v7;

  v3 = a2;
  objc_msgSend(v3, "getNSStringForColumnName:table:", "entityKey", "entity");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v3, "getInt64ForColumnName:table:", "entityType", "entity");

  if (objc_msgSend(v4, "length") && objc_msgSend(*(id *)(a1 + 32), "length"))
  {
    v6 = -[SGDuplicateKey initWithSerializedEntityKey:entityType:serializedParentKey:]([SGDuplicateKey alloc], "initWithSerializedEntityKey:entityType:serializedParentKey:", v4, v5, *(_QWORD *)(a1 + 32));
    objc_msgSend(*(id *)(a1 + 40), "addObject:", v6);

  }
  v7 = (unsigned __int8 *)MEMORY[0x1E0D81780];

  return *v7;
}

void __65__SGSqlEntityStore_Writing___prunePseudoContactGeneratingEmails___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  _QWORD v11[4];
  id v12;
  _QWORD v13[6];
  _QWORD v14[5];
  _QWORD v15[4];
  id v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  void (*v21)(uint64_t);
  id v22;

  v3 = a2;
  v17 = 0;
  v18 = &v17;
  v19 = 0x3032000000;
  v20 = __Block_byref_object_copy__18696;
  v21 = __Block_byref_object_dispose__18697;
  v22 = 0;
  v22 = (id)objc_opt_new();
  v4 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v5 = MEMORY[0x1E0C809B0];
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = __65__SGSqlEntityStore_Writing___prunePseudoContactGeneratingEmails___block_invoke_34;
  v15[3] = &unk_1E7DB7720;
  v6 = v3;
  v16 = v6;
  v14[0] = v5;
  v14[1] = 3221225472;
  v14[2] = __65__SGSqlEntityStore_Writing___prunePseudoContactGeneratingEmails___block_invoke_2;
  v14[3] = &unk_1E7DB51B8;
  v14[4] = &v17;
  objc_msgSend(v4, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("SELECT parentKey FROM entityParentage WHERE childId = :childId"), v15, v14, 0);
  if ((unint64_t)objc_msgSend((id)v18[5], "count") > *(_QWORD *)(*(_QWORD *)(a1 + 32) + 144))
  {
    v7 = (void *)objc_opt_new();
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(void **)(v8 + 8);
    v13[0] = v5;
    v13[1] = 3221225472;
    v13[2] = __65__SGSqlEntityStore_Writing___prunePseudoContactGeneratingEmails___block_invoke_42;
    v13[3] = &unk_1E7DAE948;
    v13[4] = v8;
    v13[5] = &v17;
    v11[0] = v5;
    v11[1] = 3221225472;
    v11[2] = __65__SGSqlEntityStore_Writing___prunePseudoContactGeneratingEmails___block_invoke_3;
    v11[3] = &unk_1E7DB6ED0;
    v10 = v7;
    v12 = v10;
    objc_msgSend(v9, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("SELECT key FROM emailMetadata WHERE key IN _pas_nsarray(:keys) AND type = :emailType ORDER BY updateTimestamp DESC LIMIT -1 OFFSET :offset"), v13, v11, 0);
    objc_msgSend(*(id *)(a1 + 32), "deleteEntitiesByDuplicateKey:emitChangeNotifications:", v10, 0);

  }
  _Block_object_dispose(&v17, 8);

}

void __65__SGSqlEntityStore_Writing___prunePseudoContactGeneratingEmails___block_invoke_34(uint64_t a1, uint64_t a2)
{
  id v3;

  objc_msgSend(*(id *)(a1 + 32), "recordId");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":childId", objc_msgSend(v3, "rowId"));

}

uint64_t __65__SGSqlEntityStore_Writing___prunePseudoContactGeneratingEmails___block_invoke_2(uint64_t a1, sqlite3_stmt *a2)
{
  void *v3;
  SGDuplicateKey *v4;
  NSObject *v5;
  int v7;
  void *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  sqlite3_column_nsstring(a2, 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    if (+[SGDuplicateKey serializationPassesBasicScrutiny:](SGDuplicateKey, "serializationPassesBasicScrutiny:", v3))
    {
      v4 = -[SGDuplicateKey initWithSerialized:]([SGDuplicateKey alloc], "initWithSerialized:", v3);
      if (-[SGDuplicateKey entityType](v4, "entityType") == 5)
        objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "addObject:", v4);

    }
    else
    {
      sgLogHandle();
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
      {
        v7 = 138412290;
        v8 = v3;
        _os_log_fault_impl(&dword_1C3607000, v5, OS_LOG_TYPE_FAULT, "invalid serialization found in _prunePseudoContactGeneratingEmails: %@", (uint8_t *)&v7, 0xCu);
      }

      if (_PASEvaluateLogFaultAndProbCrashCriteria())
        abort();
    }
  }

  return 0;
}

void __65__SGSqlEntityStore_Writing___prunePseudoContactGeneratingEmails___block_invoke_42(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;

  v3 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
  v5 = a2;
  objc_msgSend(v3, "_pas_proxyArrayWithMapping:", &__block_literal_global_18930);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "bindNamedParam:toNSArray:", ":keys", v4);

  objc_msgSend(v5, "bindNamedParam:toInteger:", ":emailType", 5);
  objc_msgSend(v5, "bindNamedParam:toInt64:", ":offset", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 144));

}

uint64_t __65__SGSqlEntityStore_Writing___prunePseudoContactGeneratingEmails___block_invoke_3(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  SGDuplicateKey *v5;
  NSObject *v6;
  unsigned __int8 *v7;
  uint8_t v9[16];

  objc_msgSend(a2, "getNSStringForColumnName:table:", "key", "emailMetadata");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    v4 = *(void **)(a1 + 32);
    v5 = -[SGDuplicateKey initWithSerializedEntityKey:entityType:serializedParentKey:]([SGDuplicateKey alloc], "initWithSerializedEntityKey:entityType:serializedParentKey:", v3, 5, 0);
    objc_msgSend(v4, "addObject:", v5);

  }
  else
  {
    sgLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v9 = 0;
      _os_log_impl(&dword_1C3607000, v6, OS_LOG_TYPE_DEFAULT, "nil key found in emailMetadata", v9, 2u);
    }

  }
  v7 = (unsigned __int8 *)MEMORY[0x1E0D81780];

  return *v7;
}

id __65__SGSqlEntityStore_Writing___prunePseudoContactGeneratingEmails___block_invoke_2_44(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;

  objc_msgSend(a2, "emailKey");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "serialize");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

void __50__SGSqlEntityStore_Writing___writeContactDetails___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t i;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  int v11;
  void *v12;
  id v14;
  id obj;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v14 = a2;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  objc_msgSend(*(id *)(a1 + 32), "enrichments");
  obj = (id)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
  if (v16)
  {
    v2 = *(_QWORD *)v18;
    do
    {
      for (i = 0; i != v16; ++i)
      {
        if (*(_QWORD *)v18 != v2)
          objc_enumerationMutation(obj);
        v4 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * i);
        objc_msgSend(v4, "duplicateKey");
        v5 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "entityType");
        if (SGEntityTypeIsContactDetail())
        {
          objc_msgSend(v4, "duplicateKey");
          v6 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v6, "contactDetailKey");
          v7 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v7, "identityKey");
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v14, "duplicateKey");
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v9, "identityKey");
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          v11 = objc_msgSend(v8, "isEqualToIdentityKey:", v10);

          if (!v11)
            continue;
          v12 = *(void **)(a1 + 40);
          +[SGContactDetail contactDetailFromEntity:](SGContactDetail, "contactDetailFromEntity:", v4);
          v5 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v12, "commitContactDetail:", v5);
        }

      }
      v16 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
    }
    while (v16);
  }

}

void __57__SGSqlEntityStore_Writing___hashAttachedPseudoContacts___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;

  v3 = a2;
  objc_msgSend(*(id *)(a1 + 32), "enrichments");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v3;
  v5 = v3;
  sgMapAndFilter();
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(*(id *)(a1 + 40), "_computePseudoContactContentHash:contactDetails:", v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setContentHash:", v7);

}

id __57__SGSqlEntityStore_Writing___hashAttachedPseudoContacts___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  unint64_t v5;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  int v12;
  void *v13;

  v3 = a2;
  objc_msgSend(v3, "duplicateKey");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "entityType");

  if (v5 > 0x14 || ((1 << v5) & 0x1881C0) == 0)
    goto LABEL_7;
  objc_msgSend(v3, "duplicateKey");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "contactDetailKey");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "identityKey");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "duplicateKey");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "identityKey");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v9, "isEqualToIdentityKey:", v11);

  if (!v12)
  {
LABEL_7:
    v13 = 0;
  }
  else
  {
    +[SGContactDetail contactDetailFromEntity:](SGContactDetail, "contactDetailFromEntity:", v3);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v13;
}

void __117__SGSqlEntityStore_Writing__writeEntity_withSpotlightReferenceForBundleIdentifier_uniqueIdentifier_domainIdentifier___block_invoke(uint64_t a1)
{
  id v2;

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = objc_msgSend(*(id *)(a1 + 32), "writeEntity:", *(_QWORD *)(a1 + 40));
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) != -1)
  {
    objc_msgSend(MEMORY[0x1E0D19920], "recordIdForEmailWithRowId:");
    v2 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "addSpotlightReferenceToEmailRecordId:withBundleIdentifier:uniqueIdentifier:domainIdentifier:", v2, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));

  }
}

void __41__SGSqlEntityStore_Writing__writeEntity___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  char IsContact;
  void *v13;
  int IsContactDetail;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  char v26;
  uint64_t v27;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  void *v34;
  void *v35;
  uint64_t v36;
  void *v37;
  void *v38;
  id v39;
  void *v40;
  id v41;
  _QWORD v42[6];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _QWORD v51[5];
  id v52;
  id v53;
  _BYTE v54[128];
  _BYTE v55[128];
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend(*(id *)(a1 + 32), "_writeOneEntityToDb:", *(_QWORD *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 32), "_hashAttachedPseudoContacts:", *(_QWORD *)(a1 + 40));
  v2 = (void *)objc_opt_new();
  v3 = (void *)objc_opt_new();
  v51[0] = MEMORY[0x1E0C809B0];
  v51[1] = 3221225472;
  v51[2] = __41__SGSqlEntityStore_Writing__writeEntity___block_invoke_2;
  v51[3] = &unk_1E7DAE840;
  v4 = *(void **)(a1 + 40);
  v51[4] = *(_QWORD *)(a1 + 32);
  v39 = v3;
  v52 = v39;
  v41 = v2;
  v53 = v41;
  objc_msgSend(v4, "enumeratePeople:", v51);
  v38 = (void *)objc_opt_new();
  v40 = (void *)objc_opt_new();
  v47 = 0u;
  v48 = 0u;
  v49 = 0u;
  v50 = 0u;
  objc_msgSend(*(id *)(a1 + 40), "enrichments");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v47, v55, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v48;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v48 != v8)
          objc_enumerationMutation(v5);
        v10 = *(void **)(*((_QWORD *)&v47 + 1) + 8 * v9);
        objc_msgSend(v10, "duplicateKey", v38);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "entityType");
        IsContact = SGEntityTypeIsContact();

        if ((IsContact & 1) == 0)
        {
          objc_msgSend(v10, "duplicateKey");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v13, "entityType");
          IsContactDetail = SGEntityTypeIsContactDetail();

          if (!IsContactDetail)
          {
            if ((objc_msgSend(v10, "isFromForwardedMessage") & 1) != 0)
              goto LABEL_17;
            objc_msgSend(v10, "extractionInfo");
            v21 = (void *)objc_claimAutoreleasedReturnValue();
            if (objc_msgSend(v21, "extractionType") == 32)
              goto LABEL_16;
            objc_msgSend(v10, "duplicateKey");
            v22 = (void *)objc_claimAutoreleasedReturnValue();
            if (objc_msgSend(v22, "entityType") != 2 || objc_msgSend(v10, "pendingGeocode"))
            {

LABEL_16:
LABEL_17:
              objc_msgSend(v10, "duplicateKey");
              v23 = (void *)objc_claimAutoreleasedReturnValue();
              v24 = objc_msgSend(v23, "entityType");

              v25 = v40;
              if (v24 == 22)
LABEL_18:
                objc_msgSend(v25, "addObject:", v10);
              objc_msgSend(*(id *)(a1 + 32), "_writeEnrichmentToDb:", v10);
              goto LABEL_20;
            }
            v26 = objc_msgSend(*(id *)(a1 + 40), "pendingVerification");

            v25 = v38;
            if ((v26 & 1) != 0)
              goto LABEL_17;
            goto LABEL_18;
          }
          objc_msgSend(v10, "duplicateKey");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v15, "contactDetailKey");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "identityKey");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v41, "objectForKeyedSubscript:", v17);
          v18 = (void *)objc_claimAutoreleasedReturnValue();

          if (v18)
          {
            objc_msgSend(v10, "setGroupId:", objc_msgSend(v18, "longLongValue"));
            v19 = objc_msgSend(*(id *)(a1 + 32), "_writeEnrichmentToDb:", v10);
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v19);
            v20 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v39, "addObject:", v20);

          }
        }
LABEL_20:
        ++v9;
      }
      while (v7 != v9);
      v27 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v47, v55, 16);
      v7 = v27;
    }
    while (v27);
  }

  v28 = v38;
  if (objc_msgSend(v38, "count"))
    objc_msgSend(*(id *)(a1 + 32), "_writeEventEntitiesToJournal:", v38);
  if (objc_msgSend(v40, "count", v38))
    objc_msgSend(*(id *)(a1 + 32), "_writeReminderEntitiesToJournal:", v40);
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  v29 = v41;
  v30 = objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", &v43, v54, 16);
  if (v30)
  {
    v31 = v30;
    v32 = *(_QWORD *)v44;
    do
    {
      for (i = 0; i != v31; ++i)
      {
        if (*(_QWORD *)v44 != v32)
          objc_enumerationMutation(v29);
        objc_msgSend(v29, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v43 + 1) + 8 * i));
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        v35 = v34;
        if (v34)
          objc_msgSend(*(id *)(a1 + 32), "selectAuthoritativeDetailsForContactWithId:", objc_msgSend(v34, "longLongValue"));

      }
      v31 = objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", &v43, v54, 16);
    }
    while (v31);
  }

  objc_msgSend(*(id *)(a1 + 32), "_deleteOldInteractionContactDetails:currentIdentifiers:", *(_QWORD *)(a1 + 40), v39);
  objc_msgSend(*(id *)(a1 + 32), "_writeContactDetails:", *(_QWORD *)(a1 + 40));
  v42[0] = MEMORY[0x1E0C809B0];
  v42[1] = 3221225472;
  v42[2] = __41__SGSqlEntityStore_Writing__writeEntity___block_invoke_3;
  v42[3] = &unk_1E7DAE868;
  v36 = *(_QWORD *)(a1 + 56);
  v37 = *(void **)(a1 + 40);
  v42[4] = *(_QWORD *)(a1 + 32);
  v42[5] = v36;
  objc_msgSend(v37, "enumeratePeople:", v42);
  objc_msgSend(*(id *)(a1 + 32), "_prunePseudoContactGeneratingEmails:", *(_QWORD *)(a1 + 40));

}

void __41__SGSqlEntityStore_Writing__writeEntity___block_invoke_2(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v5 = objc_msgSend(v3, "_writeEnrichmentToDb:", v4);
  v6 = *(void **)(a1 + 40);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v7);

  objc_msgSend(MEMORY[0x1E0D19920], "recordIdForContactWithRowId:", v5);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setRecordId:", v8);

  +[SGContactDetail contactDetailFromEntity:](SGContactDetail, "contactDetailFromEntity:", v4);
  v13 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "commitContactDetail:", v13);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v5);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = *(void **)(a1 + 48);
  objc_msgSend(v4, "duplicateKey");
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v11, "identityKey");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "setObject:forKeyedSubscript:", v9, v12);

}

void __41__SGSqlEntityStore_Writing__writeEntity___block_invoke_3(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;

  v10 = a2;
  objc_msgSend(v10, "recordId");
  v3 = objc_claimAutoreleasedReturnValue();
  if (!v3
    || (v4 = (void *)v3,
        objc_msgSend(v10, "recordId"),
        v5 = (void *)objc_claimAutoreleasedReturnValue(),
        v6 = objc_msgSend(v5, "rowId"),
        v5,
        v4,
        v6 < 0))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "handleFailureInMethod:object:file:lineNumber:description:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), CFSTR("SGSqlEntityStore+Writing.m"), 262, CFSTR("Contact lacks a recordId prior to identity store update"));

  }
  v8 = *(void **)(a1 + 32);
  objc_msgSend(v10, "recordId");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "processContactEnrichment:recordId:", v10, v9);

}

uint64_t __59__SGSqlEntityStore_Writing__writeInteractionEventEntities___block_invoke(id *a1)
{
  NSObject *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  int IsEvent;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  const char *v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t result;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint8_t buf[4];
  uint64_t v23;
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (!objc_msgSend(a1[4], "_writeOneEntityToDb:", a1[5]))
  {
    sgEventsLogHandle();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1C3607000, v2, OS_LOG_TYPE_DEFAULT, "Attempt to write entity to DB returned entityId 0", buf, 2u);
    }

  }
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  objc_msgSend(a1[5], "enrichments", 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v18, v24, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v19;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v19 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * i);
        objc_msgSend(v8, "duplicateKey");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "entityType");
        IsEvent = SGEntityTypeIsEvent();

        if (!IsEvent)
        {
          sgEventsLogHandle();
          v12 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            v13 = v12;
            v14 = "Skipping non-event enrichment";
            goto LABEL_21;
          }
LABEL_22:

          continue;
        }
        if ((objc_msgSend(v8, "pendingGeocode") & 1) != 0)
        {
          sgEventsLogHandle();
          v11 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_1C3607000, v11, OS_LOG_TYPE_DEFAULT, "Skipping event pending geocode.", buf, 2u);
          }

        }
        else
        {
          objc_msgSend(a1[6], "addObject:", v8);
        }
        if (!objc_msgSend(a1[4], "_writeEnrichmentToDb:", v8))
        {
          sgEventsLogHandle();
          v12 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            v13 = v12;
            v14 = "Attempt to write enrichment to DB returned enrichmentId 0";
LABEL_21:
            _os_log_impl(&dword_1C3607000, v13, OS_LOG_TYPE_DEFAULT, v14, buf, 2u);
          }
          goto LABEL_22;
        }
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v18, v24, 16);
    }
    while (v5);
  }

  sgEventsLogHandle();
  v15 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    v16 = objc_msgSend(a1[6], "count");
    *(_DWORD *)buf = 134217984;
    v23 = v16;
    _os_log_impl(&dword_1C3607000, v15, OS_LOG_TYPE_DEFAULT, "Number of event entities to journal: %lu", buf, 0xCu);
  }

  result = objc_msgSend(a1[6], "count");
  if (result)
    return objc_msgSend(a1[4], "_writeEventEntitiesToJournal:", a1[6]);
  return result;
}

+ (BOOL)canStoreEventsForAccountType:(id)a3
{
  return objc_msgSend(a3, "isEqualToString:", *MEMORY[0x1E0CA5CE8]) ^ 1;
}

- (void)setLostMessageOverflow:(unint64_t)a3
{
  self->_lostMessageOverflow = a3;
}

- (id)dbHandleForTesting
{
  return self->_db;
}

- (id)snippetsDbHandleForTesting
{
  return self->_snippetDb;
}

- (id)historyForTesting
{
  return self->_history;
}

- (void)setParentMessagesLimitForTesting:(unint64_t)a3
{
  self->_parentMessagesLimit = a3;
}

- (SGUnixTimestamp_)lastSeenTimestampForKey:(id)a3
{
  id v4;
  SGSqliteDatabase *db;
  uint64_t v6;
  id v7;
  SGUnixTimestamp_ v8;
  _QWORD v10[5];
  _QWORD v11[4];
  id v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  v4 = a3;
  v13 = 0;
  v14 = &v13;
  v15 = 0x2020000000;
  v16 = 0;
  db = self->_db;
  v6 = MEMORY[0x1E0C809B0];
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __57__SGSqlEntityStore_TestHelpers__lastSeenTimestampForKey___block_invoke;
  v11[3] = &unk_1E7DB7720;
  v7 = v4;
  v12 = v7;
  v10[0] = v6;
  v10[1] = 3221225472;
  v10[2] = __57__SGSqlEntityStore_TestHelpers__lastSeenTimestampForKey___block_invoke_2;
  v10[3] = &unk_1E7DB51B8;
  v10[4] = &v13;
  -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](db, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("SELECT lastSeenTimestamp FROM emailMetadata WHERE key = :emailKey"), v11, v10, 0);
  *(SGUnixTimestamp_ *)&v8.secondsFromUnixEpoch = (SGUnixTimestamp_)v14[3];

  _Block_object_dispose(&v13, 8);
  return v8;
}

- (void)setMalformedEventWhenRangeForTesting
{
  SGSqliteDatabase *db;
  _QWORD v3[5];

  db = self->_db;
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __69__SGSqlEntityStore_TestHelpers__setMalformedEventWhenRangeForTesting__block_invoke;
  v3[3] = &unk_1E7DB56F0;
  v3[4] = self;
  -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v3);
}

uint64_t __69__SGSqlEntityStore_TestHelpers__setMalformedEventWhenRangeForTesting__block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("UPDATE events SET whenRange = \"MalformedData\"), 0, 0, 0);
}

void __57__SGSqlEntityStore_TestHelpers__lastSeenTimestampForKey___block_invoke(uint64_t a1, uint64_t a2)
{
  id v3;

  objc_msgSend(*(id *)(a1 + 32), "serialize");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  +[SGSqliteDatabase bindParam:name:nsstring:](SGSqliteDatabase, "bindParam:name:nsstring:", a2, ":emailKey", v3);

}

uint64_t __57__SGSqlEntityStore_TestHelpers__lastSeenTimestampForKey___block_invoke_2(uint64_t a1, sqlite3_stmt *a2)
{
  *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = sqlite3_column_double(a2, 0);
  return 1;
}

+ (void)clearMigrationCompletedForPaths
{
  objc_msgSend((id)migrationCompletedForPaths, "removeAllObjects");
}

- (void)setSerializedContactsLimit:(unint64_t)a3
{
  self->_serializedContactsLimit = a3;
}

- (unint64_t)serializedContactsLimit
{
  return self->_serializedContactsLimit;
}

- (void)writeSerializedContact:(id)a3
{
  id v5;
  void *v6;
  int v7;
  SGSqliteDatabase *db;
  void *v9;
  void *v10;
  id v11;
  _QWORD v12[5];
  id v13;

  v5 = a3;
  objc_msgSend(v5, "recordId");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "tableId");

  if (v7)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "recordId");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore+SerializedContacts.m"), 45, CFSTR("Unexpected table for recordId: %@"), v10);

  }
  db = self->_db;
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __63__SGSqlEntityStore_SerializedContacts__writeSerializedContact___block_invoke;
  v12[3] = &unk_1E7DB6A30;
  v12[4] = self;
  v13 = v5;
  v11 = v5;
  -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v12);

}

- (void)writeSerializedContactPlaceholder:(int64_t)a3
{
  SGSqliteDatabase *db;
  _QWORD v4[6];

  db = self->_db;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __74__SGSqlEntityStore_SerializedContacts__writeSerializedContactPlaceholder___block_invoke;
  v4[3] = &unk_1E7DB6368;
  v4[4] = self;
  v4[5] = a3;
  -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v4);
}

- (void)deleteSerializedContactForId:(int64_t)a3
{
  SGSqliteDatabase *db;
  _QWORD v4[6];

  db = self->_db;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __69__SGSqlEntityStore_SerializedContacts__deleteSerializedContactForId___block_invoke;
  v4[3] = &unk_1E7DB6368;
  v4[4] = self;
  v4[5] = a3;
  -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v4);
}

- (void)deleteSerializedContactsForIdSet:(id)a3
{
  id v5;
  SGSqliteDatabase *db;
  id v7;
  _QWORD v8[4];
  id v9;
  SGSqlEntityStore *v10;
  SEL v11;

  v5 = a3;
  db = self->_db;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __73__SGSqlEntityStore_SerializedContacts__deleteSerializedContactsForIdSet___block_invoke;
  v8[3] = &unk_1E7DB6BB8;
  v10 = self;
  v11 = a2;
  v9 = v5;
  v7 = v5;
  -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v8);

}

- (id)loadSerializedContactForId:(int64_t)a3
{
  SGSqliteDatabase *db;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  id v7;
  _QWORD block[4];
  BOOL v10;
  _QWORD v11[5];
  _QWORD v12[5];
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  void (*v17)(uint64_t);
  id v18;

  v13 = 0;
  v14 = &v13;
  v15 = 0x3032000000;
  v16 = __Block_byref_object_copy__19784;
  v17 = __Block_byref_object_dispose__19785;
  v18 = 0;
  db = self->_db;
  v4 = MEMORY[0x1E0C809B0];
  v11[4] = &v13;
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __67__SGSqlEntityStore_SerializedContacts__loadSerializedContactForId___block_invoke;
  v12[3] = &__block_descriptor_40_e23_v16__0__sqlite3_stmt__8l;
  v12[4] = a3;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __67__SGSqlEntityStore_SerializedContacts__loadSerializedContactForId___block_invoke_2;
  v11[3] = &unk_1E7DB51B8;
  -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](db, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("SELECT data FROM serializedContacts WHERE entityId = ?"), v12, v11, 0);
  v5 = v14[5];
  if (loadSerializedContactForId___pasOnceToken10 != -1)
    dispatch_once(&loadSerializedContactForId___pasOnceToken10, &__block_literal_global_33_19797);
  block[0] = v4;
  block[1] = 3221225472;
  block[2] = __67__SGSqlEntityStore_SerializedContacts__loadSerializedContactForId___block_invoke_2_36;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v10 = v5 != 0;
  v6 = (id)loadSerializedContactForId___pasExprOnceResult;
  dispatch_async(v6, block);
  v7 = (id)v14[5];

  _Block_object_dispose(&v13, 8);
  return v7;
}

- (id)loadAllSerializedContacts
{
  void *v3;
  SGSqliteDatabase *db;
  id v5;
  _QWORD v7[4];
  id v8;

  v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", self->_serializedContactsLimit);
  db = self->_db;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __65__SGSqlEntityStore_SerializedContacts__loadAllSerializedContacts__block_invoke;
  v7[3] = &unk_1E7DB52C8;
  v5 = v3;
  v8 = v5;
  -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](db, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("SELECT entityId, data FROM serializedContacts ORDER BY entityId DESC"), 0, v7, &__block_literal_global_47);

  return v5;
}

- (id)serializedEntityIds
{
  void *v3;
  SGSqliteDatabase *db;
  id v5;
  _QWORD v7[4];
  id v8;

  v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E20]), "initWithCapacity:", self->_serializedContactsLimit);
  db = self->_db;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __59__SGSqlEntityStore_SerializedContacts__serializedEntityIds__block_invoke;
  v7[3] = &unk_1E7DB52C8;
  v5 = v3;
  v8 = v5;
  -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](db, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("SELECT entityId FROM serializedContacts"), 0, v7, 0);

  return v5;
}

- (void)_trimSerializedContacts
{
  SGSqliteDatabase *db;
  _QWORD v3[5];

  db = self->_db;
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __63__SGSqlEntityStore_SerializedContacts___trimSerializedContacts__block_invoke;
  v3[3] = &unk_1E7DB56F0;
  v3[4] = self;
  -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v3);
}

- (int64_t)_popQueuedSerializedContactId
{
  SGSqliteDatabase *db;
  int64_t v3;
  _QWORD v5[6];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v9 = -1;
  db = self->_db;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __69__SGSqlEntityStore_SerializedContacts___popQueuedSerializedContactId__block_invoke;
  v5[3] = &unk_1E7DB78A0;
  v5[4] = self;
  v5[5] = &v6;
  -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v5);
  v3 = v7[3];
  _Block_object_dispose(&v6, 8);
  return v3;
}

- (BOOL)_processBatchOfSerializedContactJobs
{
  SGSqliteDatabase *db;
  char v3;
  _QWORD v5[6];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  char v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v9 = 1;
  db = self->_db;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __76__SGSqlEntityStore_SerializedContacts___processBatchOfSerializedContactJobs__block_invoke;
  v5[3] = &unk_1E7DB78A0;
  v5[4] = self;
  v5[5] = &v6;
  -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v5);
  v3 = *((_BYTE *)v7 + 24);
  _Block_object_dispose(&v6, 8);
  return v3;
}

- (void)updateSerializedContacts:(id)a3
{
  _xpc_activity_s *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  SGSqliteDatabase *db;
  void *v14;
  int v15;
  void *v16;
  BOOL v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  NSObject *v21;
  uint8_t v22[16];
  _QWORD v23[4];
  id v24;
  SGSqlEntityStore *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _QWORD v30[3];
  _BYTE v31[128];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v4 = (_xpc_activity_s *)a3;
  v30[2] = 0;
  v30[0] = CFSTR("updateSerializedContacts");
  v30[1] = mach_absolute_time();
  if (!-[SGSqlEntityStore _processBatchOfSerializedContactJobs](self, "_processBatchOfSerializedContactJobs"))
  {
    v5 = (void *)objc_opt_new();
    -[SGSqlEntityStore allContactsMasterEntityIdsLimitedTo:](self, "allContactsMasterEntityIdsLimitedTo:", self->_serializedContactsLimit);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[SGSqlEntityStore serializedEntityIds](self, "serializedEntityIds");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v8 = v6;
    v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v26, v31, 16);
    if (v9)
    {
      v10 = *(_QWORD *)v27;
      do
      {
        for (i = 0; i != v9; ++i)
        {
          if (*(_QWORD *)v27 != v10)
            objc_enumerationMutation(v8);
          v12 = *(_QWORD *)(*((_QWORD *)&v26 + 1) + 8 * i);
          if ((objc_msgSend(v7, "containsObject:", v12) & 1) == 0)
            objc_msgSend(v5, "addObject:", v12);
        }
        v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v26, v31, 16);
      }
      while (v9);
    }

    if (objc_msgSend(v5, "count"))
    {
      db = self->_db;
      v23[0] = MEMORY[0x1E0C809B0];
      v23[1] = 3221225472;
      v23[2] = __65__SGSqlEntityStore_SerializedContacts__updateSerializedContacts___block_invoke;
      v23[3] = &unk_1E7DB6A30;
      v24 = v5;
      v25 = self;
      -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v23);

    }
  }
  while (1)
  {
    if (v4)
    {
      +[SGXPCActivityManager sharedInstance](SGXPCActivityManager, "sharedInstance");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = objc_msgSend(v14, "shouldDefer:", v4);

      if (v15)
        break;
    }
    v16 = (void *)MEMORY[0x1C3BD4F6C]();
    v17 = -[SGSqlEntityStore _processBatchOfSerializedContactJobs](self, "_processBatchOfSerializedContactJobs");
    objc_autoreleasePoolPop(v16);
    if (!v17)
    {
      sgLogHandle();
      v18 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v22 = 0;
        _os_log_impl(&dword_1C3607000, v18, OS_LOG_TYPE_INFO, "done serializing new contacts", v22, 2u);
      }

      -[SGSqlEntityStore _trimSerializedContacts](self, "_trimSerializedContacts");
      sgLogHandle();
      v19 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v22 = 0;
        _os_log_impl(&dword_1C3607000, v19, OS_LOG_TYPE_INFO, "done trimming serialized contacts", v22, 2u);
      }

      SGRecordMeasurementState(v30);
      goto LABEL_29;
    }
  }
  if (!xpc_activity_set_state(v4, 3))
  {
    sgLogHandle();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v22 = 0;
      _os_log_error_impl(&dword_1C3607000, v20, OS_LOG_TYPE_ERROR, "Could not defer activity", v22, 2u);
    }

  }
  sgLogHandle();
  v21 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v22 = 0;
    _os_log_impl(&dword_1C3607000, v21, OS_LOG_TYPE_INFO, "serialized contact precomputation deferring", v22, 2u);
  }

LABEL_29:
  SGRecordMeasurementState(v30);

}

void __65__SGSqlEntityStore_SerializedContacts__updateSerializedContacts___block_invoke(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _QWORD v10[5];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v2 = *(id *)(a1 + 32);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v12;
    v6 = MEMORY[0x1E0C809B0];
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v5)
          objc_enumerationMutation(v2);
        v8 = *(_QWORD *)(*((_QWORD *)&v11 + 1) + 8 * v7);
        v9 = *(void **)(*(_QWORD *)(a1 + 40) + 8);
        v10[0] = v6;
        v10[1] = 3221225472;
        v10[2] = __65__SGSqlEntityStore_SerializedContacts__updateSerializedContacts___block_invoke_2;
        v10[3] = &unk_1E7DB7720;
        v10[4] = v8;
        objc_msgSend(v9, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("INSERT INTO serializedContactCacheJobs (id) VALUES (?)"), v10, 0, 0);
        ++v7;
      }
      while (v4 != v7);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v4);
  }

}

uint64_t __65__SGSqlEntityStore_SerializedContacts__updateSerializedContacts___block_invoke_2(uint64_t a1, sqlite3_stmt *a2)
{
  return sqlite3_bind_int64(a2, 1, objc_msgSend(*(id *)(a1 + 32), "longLongValue"));
}

void __76__SGSqlEntityStore_SerializedContacts___processBatchOfSerializedContactJobs__block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  NSObject *v7;
  _QWORD v8[3];
  uint8_t buf[4];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = objc_msgSend(*(id *)(a1 + 32), "_popQueuedSerializedContactId");
  if (v2 < 0)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
    return;
  }
  v3 = v2;
  v8[0] = CFSTR("updateSerializedContacts-onequery");
  v8[1] = mach_absolute_time();
  v8[2] = 0;
  objc_msgSend(*(id *)(a1 + 32), "storageContactByMasterEntityId:withSnippets:", v3, 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v4)
  {
    v6 = 0;
    goto LABEL_8;
  }
  objc_msgSend(*(id *)(a1 + 32), "loadContactForStorageContact:usingSerializedContactCache:", v4, 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (!v5 || !objc_msgSend(v5, "containsSuggestions"))
  {
LABEL_8:
    sgLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134217984;
      v10 = v3;
      _os_log_impl(&dword_1C3607000, v7, OS_LOG_TYPE_INFO, "Writing placeholder for contact id: %lli", buf, 0xCu);
    }

    objc_msgSend(*(id *)(a1 + 32), "writeSerializedContactPlaceholder:", v3);
    goto LABEL_11;
  }
  objc_msgSend(*(id *)(a1 + 32), "writeSerializedContact:", v6);
LABEL_11:
  SGRecordMeasurementState(v8);

}

uint64_t __69__SGSqlEntityStore_SerializedContacts___popQueuedSerializedContactId__block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t result;
  uint64_t v6;
  void *v7;
  _QWORD v8[5];
  _QWORD v9[5];

  v2 = MEMORY[0x1E0C809B0];
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __69__SGSqlEntityStore_SerializedContacts___popQueuedSerializedContactId__block_invoke_2;
  v9[3] = &unk_1E7DB51B8;
  v9[4] = v3;
  result = objc_msgSend(v4, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("SELECT id FROM serializedContactCacheJobs LIMIT 1"), 0, v9, 0);
  v6 = *(_QWORD *)(a1 + 40);
  if ((*(_QWORD *)(*(_QWORD *)(v6 + 8) + 24) & 0x8000000000000000) == 0)
  {
    v7 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
    v8[0] = v2;
    v8[1] = 3221225472;
    v8[2] = __69__SGSqlEntityStore_SerializedContacts___popQueuedSerializedContactId__block_invoke_3;
    v8[3] = &unk_1E7DAF138;
    v8[4] = v6;
    return objc_msgSend(v7, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("DELETE FROM serializedContactCacheJobs WHERE id=?"), v8, 0, 0);
  }
  return result;
}

uint64_t __69__SGSqlEntityStore_SerializedContacts___popQueuedSerializedContactId__block_invoke_2(uint64_t a1, sqlite3_stmt *a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = sqlite3_column_int64(a2, 0);
  return 1;
}

uint64_t __69__SGSqlEntityStore_SerializedContacts___popQueuedSerializedContactId__block_invoke_3(uint64_t a1, sqlite3_stmt *a2)
{
  return sqlite3_bind_int64(a2, 1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
}

void __63__SGSqlEntityStore_SerializedContacts___trimSerializedContacts__block_invoke(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  _QWORD v7[5];
  _QWORD v8[6];
  _QWORD v9[5];
  id v10;

  v9[0] = 0;
  v9[1] = v9;
  v9[2] = 0x3032000000;
  v9[3] = __Block_byref_object_copy__19784;
  v9[4] = __Block_byref_object_dispose__19785;
  v10 = 0;
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 8);
  v4 = MEMORY[0x1E0C809B0];
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __63__SGSqlEntityStore_SerializedContacts___trimSerializedContacts__block_invoke_2;
  v8[3] = &unk_1E7DB6A98;
  v8[4] = v2;
  v8[5] = v9;
  objc_msgSend(v3, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("SELECT entityId, data FROM serializedContacts ORDER BY entityId DESC"), 0, v8, &__block_literal_global_52);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(void **)(v5 + 8);
  v7[0] = v4;
  v7[1] = 3221225472;
  v7[2] = __63__SGSqlEntityStore_SerializedContacts___trimSerializedContacts__block_invoke_55;
  v7[3] = &unk_1E7DB7720;
  v7[4] = v5;
  objc_msgSend(v6, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("DELETE FROM serializedContacts ORDER BY id DESC LIMIT -1 OFFSET ?"), v7, 0, 0);
  _Block_object_dispose(v9, 8);

}

uint64_t __63__SGSqlEntityStore_SerializedContacts___trimSerializedContacts__block_invoke_2(uint64_t a1, sqlite3_stmt *a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  NSObject *v9;
  uint8_t buf[4];
  sqlite3_int64 v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v4 = (void *)MEMORY[0x1C3BD4F6C]();
  v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E60]), "initWithObjects:", objc_opt_class(), 0);
  objc_autoreleasePoolPop(v4);
  sqlite3_column_nssecurecoding(a2, 1, v5);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v6;

  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40))
  {
    sgLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      v12 = sqlite3_column_int64(a2, 0);
      _os_log_impl(&dword_1C3607000, v9, OS_LOG_TYPE_DEFAULT, "Unexpected error while deserializing contact%lldld", buf, 0xCu);
    }

    objc_msgSend(*(id *)(a1 + 32), "deleteSerializedContactForId:", sqlite3_column_int64(a2, 0));
  }
  return 0;
}

uint64_t __63__SGSqlEntityStore_SerializedContacts___trimSerializedContacts__block_invoke_55(uint64_t a1, sqlite3_stmt *a2)
{
  return sqlite3_bind_int64(a2, 1, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 152));
}

uint64_t __63__SGSqlEntityStore_SerializedContacts___trimSerializedContacts__block_invoke_51(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  int v5;
  id v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  sgLogHandle();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    v5 = 138412290;
    v6 = v2;
    _os_log_error_impl(&dword_1C3607000, v3, OS_LOG_TYPE_ERROR, "Failed to load all serialized contacts: %@", (uint8_t *)&v5, 0xCu);
  }

  return 1;
}

uint64_t __59__SGSqlEntityStore_SerializedContacts__serializedEntityIds__block_invoke(uint64_t a1, sqlite3_stmt *a2)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 32);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", sqlite3_column_int64(a2, 0));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "addObject:", v3);

  return 0;
}

uint64_t __65__SGSqlEntityStore_SerializedContacts__loadAllSerializedContacts__block_invoke(uint64_t a1, sqlite3_stmt *a2)
{
  void *v4;
  void *v5;
  NSObject *v6;
  uint8_t buf[4];
  sqlite3_int64 v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v4 = (void *)MEMORY[0x1C3BD4F6C]();
  v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E60]), "initWithObjects:", objc_opt_class(), 0);
  objc_autoreleasePoolPop(v4);
  sqlite3_column_nssecurecoding(a2, 1, v5);
  v6 = objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    objc_msgSend(*(id *)(a1 + 32), "addObject:", v6);
  }
  else
  {
    sgLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      v9 = sqlite3_column_int64(a2, 0);
      _os_log_impl(&dword_1C3607000, v6, OS_LOG_TYPE_DEFAULT, "Unexpected error while deserializing contact: %lld", buf, 0xCu);
    }
  }

  return 0;
}

uint64_t __65__SGSqlEntityStore_SerializedContacts__loadAllSerializedContacts__block_invoke_46(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  int v5;
  id v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  sgLogHandle();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    v5 = 138412290;
    v6 = v2;
    _os_log_error_impl(&dword_1C3607000, v3, OS_LOG_TYPE_ERROR, "Failed to load all serialized contacts: %@", (uint8_t *)&v5, 0xCu);
  }

  return 1;
}

uint64_t __67__SGSqlEntityStore_SerializedContacts__loadSerializedContactForId___block_invoke(uint64_t a1, sqlite3_stmt *a2)
{
  return sqlite3_bind_int64(a2, 1, *(_QWORD *)(a1 + 32));
}

uint64_t __67__SGSqlEntityStore_SerializedContacts__loadSerializedContactForId___block_invoke_2(uint64_t a1, sqlite3_stmt *a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v4 = (void *)MEMORY[0x1C3BD4F6C]();
  v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E60]), "initWithObjects:", objc_opt_class(), 0);
  objc_autoreleasePoolPop(v4);
  sqlite3_column_nssecurecoding(a2, 0, v5);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v6;

  return 1;
}

void __67__SGSqlEntityStore_SerializedContacts__loadSerializedContactForId___block_invoke_2_36(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  v8 = (id)objc_opt_new();
  objc_msgSend(v8, "setCacheHit:", *(unsigned __int8 *)(a1 + 32));
  objc_msgSend(MEMORY[0x1E0D80F28], "sharedInstance");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "trackScalarForMessage:", v8);

  v3 = objc_alloc(MEMORY[0x1E0CB3940]);
  v4 = *MEMORY[0x1E0D19D98];
  objc_msgSend(v8, "key");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)objc_msgSend(v3, "initWithFormat:", CFSTR("%@.%@"), v4, v5);

  objc_msgSend(v8, "dictionaryRepresentation");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  AnalyticsSendEvent();

}

void __67__SGSqlEntityStore_SerializedContacts__loadSerializedContactForId___block_invoke_32()
{
  void *v0;
  uint64_t v1;
  void *v2;

  v0 = (void *)MEMORY[0x1C3BD4F6C]();
  objc_msgSend(MEMORY[0x1E0D81598], "autoreleasingSerialQueueWithLabel:qosClass:", "loadSerializedContactForId", 9);
  v1 = objc_claimAutoreleasedReturnValue();
  v2 = (void *)loadSerializedContactForId___pasExprOnceResult;
  loadSerializedContactForId___pasExprOnceResult = v1;

  objc_autoreleasePoolPop(v0);
}

void __73__SGSqlEntityStore_SerializedContacts__deleteSerializedContactsForIdSet___block_invoke(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;
  uint64_t v8;
  uint64_t v9;
  id (*v10)(uint64_t, void *);
  void *v11;
  __int128 v12;

  v2 = MEMORY[0x1E0C809B0];
  v8 = MEMORY[0x1E0C809B0];
  v9 = 3221225472;
  v10 = __73__SGSqlEntityStore_SerializedContacts__deleteSerializedContactsForIdSet___block_invoke_2;
  v11 = &unk_1E7DAF090;
  v12 = *(_OWORD *)(a1 + 40);
  sgMap();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = *(void **)(*(_QWORD *)(a1 + 40) + 8);
  v6[0] = v2;
  v6[1] = 3221225472;
  v6[2] = __73__SGSqlEntityStore_SerializedContacts__deleteSerializedContactsForIdSet___block_invoke_3;
  v6[3] = &unk_1E7DB74A0;
  v7 = v3;
  v5 = v3;
  objc_msgSend(v4, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("DELETE FROM serializedContacts WHERE entityId IN _pas_nsarray(:ids)"), v6, 0, &__block_literal_global_26_19804);

}

id __73__SGSqlEntityStore_SerializedContacts__deleteSerializedContactsForIdSet___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v6;

  v3 = a2;
  if (objc_msgSend(v3, "tableId"))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "handleFailureInMethod:object:file:lineNumber:description:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), CFSTR("SGSqlEntityStore+SerializedContacts.m"), 92, CFSTR("Unexpected table for recordId: %@"), v3);

  }
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", objc_msgSend(v3, "rowId"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

uint64_t __73__SGSqlEntityStore_SerializedContacts__deleteSerializedContactsForIdSet___block_invoke_3(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "bindNamedParam:toNSArray:", ":ids", *(_QWORD *)(a1 + 32));
}

uint64_t __73__SGSqlEntityStore_SerializedContacts__deleteSerializedContactsForIdSet___block_invoke_4(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  int v5;
  id v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  sgLogHandle();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    v5 = 138412290;
    v6 = v2;
    _os_log_error_impl(&dword_1C3607000, v3, OS_LOG_TYPE_ERROR, "Failed to delete serialized contact: %@", (uint8_t *)&v5, 0xCu);
  }

  return *MEMORY[0x1E0D81788];
}

uint64_t __69__SGSqlEntityStore_SerializedContacts__deleteSerializedContactForId___block_invoke(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  _QWORD v4[5];

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __69__SGSqlEntityStore_SerializedContacts__deleteSerializedContactForId___block_invoke_2;
  v4[3] = &__block_descriptor_40_e23_v16__0__sqlite3_stmt__8l;
  v4[4] = v1;
  return objc_msgSend(v2, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("DELETE FROM serializedContacts WHERE entityId = ?"), v4, 0, &__block_literal_global_20_19813);
}

uint64_t __69__SGSqlEntityStore_SerializedContacts__deleteSerializedContactForId___block_invoke_2(uint64_t a1, sqlite3_stmt *a2)
{
  return sqlite3_bind_int64(a2, 1, *(_QWORD *)(a1 + 32));
}

uint64_t __69__SGSqlEntityStore_SerializedContacts__deleteSerializedContactForId___block_invoke_3(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  int v5;
  id v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  sgLogHandle();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    v5 = 138412290;
    v6 = v2;
    _os_log_error_impl(&dword_1C3607000, v3, OS_LOG_TYPE_ERROR, "Failed to delete serialized contact: %@", (uint8_t *)&v5, 0xCu);
  }

  return 1;
}

void __74__SGSqlEntityStore_SerializedContacts__writeSerializedContactPlaceholder___block_invoke(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  _QWORD v6[2];
  _QWORD v7[3];

  v7[2] = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v6[0] = CFSTR("entityId");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v6[1] = CFSTR("data");
  v7[0] = v3;
  objc_msgSend(MEMORY[0x1E0C99E38], "null");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v7[1] = v4;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v7, v6, 2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "insertOrReplaceIntoTable:dictionary:onError:", CFSTR("serializedContacts"), v5, &__block_literal_global_16);

}

uint64_t __74__SGSqlEntityStore_SerializedContacts__writeSerializedContactPlaceholder___block_invoke_2(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  int v5;
  id v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  sgLogHandle();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    v5 = 138412290;
    v6 = v2;
    _os_log_error_impl(&dword_1C3607000, v3, OS_LOG_TYPE_ERROR, "Failed to insert serialized contact placeholder: %@", (uint8_t *)&v5, 0xCu);
  }

  return 1;
}

void __63__SGSqlEntityStore_SerializedContacts__writeSerializedContact___block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  _QWORD v9[2];
  _QWORD v10[3];

  v10[2] = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 32);
  v2 = *(void **)(a1 + 40);
  v4 = *(void **)(v3 + 8);
  v9[0] = CFSTR("entityId");
  v5 = (void *)MEMORY[0x1E0CB37E8];
  objc_msgSend(v2, "recordId");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "numberWithLongLong:", objc_msgSend(v6, "rowId"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v9[1] = CFSTR("data");
  v10[0] = v7;
  v10[1] = *(_QWORD *)(a1 + 40);
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v10, v9, 2);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "insertOrReplaceIntoTable:dictionary:onError:", CFSTR("serializedContacts"), v8, &__block_literal_global_19823);

}

uint64_t __63__SGSqlEntityStore_SerializedContacts__writeSerializedContact___block_invoke_2(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  int v5;
  id v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  sgLogHandle();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    v5 = 138412290;
    v6 = v2;
    _os_log_error_impl(&dword_1C3607000, v3, OS_LOG_TYPE_ERROR, "Failed to insert serialized contact: %@", (uint8_t *)&v5, 0xCu);
  }

  return 1;
}

- (id)loadDuplicateKeyByRecordId:(id)a3
{
  id v4;
  SGSqliteDatabase *db;
  uint64_t v6;
  id v7;
  void *v8;
  NSObject *v9;
  id v10;
  _QWORD v12[5];
  _QWORD v13[4];
  id v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  void (*v19)(uint64_t);
  id v20;
  uint8_t buf[4];
  id v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v15 = 0;
  v16 = &v15;
  v17 = 0x3032000000;
  v18 = __Block_byref_object_copy__20493;
  v19 = __Block_byref_object_dispose__20494;
  v20 = 0;
  db = self->_db;
  v6 = MEMORY[0x1E0C809B0];
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = __56__SGSqlEntityStore_Loading__loadDuplicateKeyByRecordId___block_invoke;
  v13[3] = &unk_1E7DB74A0;
  v7 = v4;
  v14 = v7;
  v12[0] = v6;
  v12[1] = 3221225472;
  v12[2] = __56__SGSqlEntityStore_Loading__loadDuplicateKeyByRecordId___block_invoke_2;
  v12[3] = &unk_1E7DB7510;
  v12[4] = &v15;
  -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](db, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("SELECT e.entityKey, e.entityType, ep.parentKey FROM entity AS e JOIN entityParentage AS ep ON ep.childId = e.id WHERE e.id = :rowId"), v13, v12, 0);
  v8 = (void *)v16[5];
  if (!v8)
  {
    sgLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v22 = v7;
      _os_log_impl(&dword_1C3607000, v9, OS_LOG_TYPE_INFO, "Could not load duplicate key with record id %@", buf, 0xCu);
    }

    v8 = (void *)v16[5];
  }
  v10 = v8;

  _Block_object_dispose(&v15, 8);
  return v10;
}

- (id)loadSourceKeyByRecordId:(id)a3
{
  id v4;
  SGSqliteDatabase *db;
  uint64_t v6;
  id v7;
  void *v8;
  NSObject *v9;
  id v10;
  _QWORD v12[5];
  _QWORD v13[4];
  id v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  void (*v19)(uint64_t);
  id v20;
  uint8_t buf[4];
  id v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v15 = 0;
  v16 = &v15;
  v17 = 0x3032000000;
  v18 = __Block_byref_object_copy__20493;
  v19 = __Block_byref_object_dispose__20494;
  v20 = 0;
  db = self->_db;
  v6 = MEMORY[0x1E0C809B0];
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = __53__SGSqlEntityStore_Loading__loadSourceKeyByRecordId___block_invoke;
  v13[3] = &unk_1E7DB7720;
  v7 = v4;
  v14 = v7;
  v12[0] = v6;
  v12[1] = 3221225472;
  v12[2] = __53__SGSqlEntityStore_Loading__loadSourceKeyByRecordId___block_invoke_2;
  v12[3] = &unk_1E7DB51B8;
  v12[4] = &v15;
  -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](db, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("SELECT ep.sourceKey FROM entity AS e JOIN entityParentage AS ep ON ep.childId = e.id WHERE e.id = :rowId"), v13, v12, 0);
  v8 = (void *)v16[5];
  if (!v8)
  {
    sgLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v22 = v7;
      _os_log_impl(&dword_1C3607000, v9, OS_LOG_TYPE_INFO, "Could not load duplicate key with record id %@", buf, 0xCu);
    }

    v8 = (void *)v16[5];
  }
  v10 = v8;

  _Block_object_dispose(&v15, 8);
  return v10;
}

- (id)loadEntityByRecordId:(id)a3
{
  id v5;
  void *v6;
  SGSqliteDatabase *db;
  uint64_t v8;
  id v9;
  void *v10;
  NSObject *v11;
  id v12;
  void *v14;
  _QWORD v15[6];
  _QWORD v16[4];
  id v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t);
  void (*v22)(uint64_t);
  id v23;
  uint8_t buf[4];
  id v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  if (objc_msgSend(v5, "tableId"))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore+Loading.m"), 100, CFSTR("No support for loading entities from non-legacy recordIds (tableId=%du, internalEntityId=%lld)"), objc_msgSend(v5, "tableId"), objc_msgSend(v5, "internalEntityId"));

  }
  -[SGSqlEntityStore selectEntityQuery:](self, "selectEntityQuery:", CFSTR("WHERE e.id = :rowId"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = 0;
  v19 = &v18;
  v20 = 0x3032000000;
  v21 = __Block_byref_object_copy__20493;
  v22 = __Block_byref_object_dispose__20494;
  v23 = 0;
  db = self->_db;
  v8 = MEMORY[0x1E0C809B0];
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3221225472;
  v16[2] = __50__SGSqlEntityStore_Loading__loadEntityByRecordId___block_invoke;
  v16[3] = &unk_1E7DB7720;
  v9 = v5;
  v17 = v9;
  v15[0] = v8;
  v15[1] = 3221225472;
  v15[2] = __50__SGSqlEntityStore_Loading__loadEntityByRecordId___block_invoke_2;
  v15[3] = &unk_1E7DB6A98;
  v15[4] = self;
  v15[5] = &v18;
  -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](db, "prepAndRunQuery:onPrep:onRow:onError:", v6, v16, v15, 0);
  v10 = (void *)v19[5];
  if (!v10)
  {
    sgLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v25 = v9;
      _os_log_impl(&dword_1C3607000, v11, OS_LOG_TYPE_INFO, "Could not load event with record id %@", buf, 0xCu);
    }

    v10 = (void *)v19[5];
  }
  v12 = v10;

  _Block_object_dispose(&v18, 8);
  return v12;
}

- (id)allEntitiesOfType:(int64_t)a3 limitedTo:(unint64_t)a4
{
  return -[SGSqlEntityStore allEntitiesOfType:limitedTo:onlyMLExtractions:](self, "allEntitiesOfType:limitedTo:onlyMLExtractions:", a3, a4, 0);
}

- (id)allEntitiesOfType:(int64_t)a3 limitedTo:(unint64_t)a4 onlyMLExtractions:(BOOL)a5
{
  __CFString *v8;
  objc_class *v9;
  __CFString *v10;
  void *v11;
  void *v12;
  void *v13;
  SGSqliteDatabase *db;
  id v15;
  void *v16;
  id v17;
  _QWORD v19[5];
  id v20;
  _QWORD v21[6];

  v8 = &stru_1E7DB83A8;
  if (a5)
    v8 = CFSTR("AND ep.modelVersion != 0");
  v9 = (objc_class *)MEMORY[0x1E0CB3940];
  v10 = v8;
  v11 = (void *)objc_msgSend([v9 alloc], "initWithFormat:", CFSTR("WHERE e.entityType = :entityType %@ LIMIT :limit"), v10);

  -[SGSqlEntityStore selectEntityQuery:](self, "selectEntityQuery:", v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  v13 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", a4);
  db = self->_db;
  v21[0] = MEMORY[0x1E0C809B0];
  v21[1] = 3221225472;
  v21[2] = __75__SGSqlEntityStore_Loading__allEntitiesOfType_limitedTo_onlyMLExtractions___block_invoke;
  v21[3] = &__block_descriptor_48_e23_v16__0__sqlite3_stmt__8l;
  v21[4] = a3;
  v21[5] = a4;
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 3221225472;
  v19[2] = __75__SGSqlEntityStore_Loading__allEntitiesOfType_limitedTo_onlyMLExtractions___block_invoke_2;
  v19[3] = &unk_1E7DB53F8;
  v19[4] = self;
  v15 = v13;
  v20 = v15;
  -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](db, "prepAndRunQuery:onPrep:onRow:onError:", v12, v21, v19, 0);
  v16 = v20;
  v17 = v15;

  return v17;
}

- (id)loadOriginByRecordId:(id)a3
{
  void *v4;
  void *v5;

  -[SGSqlEntityStore loadEntityByRecordId:](self, "loadEntityByRecordId:", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "loadOrigin:", self);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

- (id)_loadMessageByKey:(id)a3
{
  id v5;
  SGSqliteDatabase *db;
  uint64_t v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  SGDuplicateKey *v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  id v26;
  SGSqliteDatabase *snippetDb;
  void *v28;
  void *v29;
  double v30;
  double v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t i;
  void *v38;
  void *v39;
  void *v41;
  void *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _QWORD v47[4];
  id v48;
  _QWORD v49[4];
  id v50;
  _QWORD v51[4];
  id v52;
  _QWORD v53[4];
  id v54;
  _BYTE v55[128];
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  if (!v5)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v41, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore+Loading.m"), 155, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("key"));

  }
  db = self->_db;
  v7 = MEMORY[0x1E0C809B0];
  v53[0] = MEMORY[0x1E0C809B0];
  v53[1] = 3221225472;
  v53[2] = __47__SGSqlEntityStore_Loading___loadMessageByKey___block_invoke;
  v53[3] = &unk_1E7DB74A0;
  v8 = v5;
  v54 = v8;
  -[SGSqliteDatabase selectColumns:fromTable:whereClause:onPrep:onError:](db, "selectColumns:fromTable:whereClause:onPrep:onError:", &unk_1E7E10968, CFSTR("emailMetadata"), CFSTR("key = :key"), v53, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if ((unint64_t)objc_msgSend(v9, "count") >= 2)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v42, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore+Loading.m"), 165, CFSTR("_loadMessageByKey matched multiple rows"));

  }
  if (objc_msgSend(v9, "count"))
  {
    objc_msgSend(v9, "firstObject");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = (void *)objc_opt_new();
    objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("type"));
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = objc_msgSend(v12, "longLongValue");

    v14 = (void *)MEMORY[0x1E0D19920];
    objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("id"));
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "recordIdForEmailWithRowId:", objc_msgSend(v15, "longLongValue"));
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "setRecordId:", v16);

    v17 = -[SGDuplicateKey initWithEntityKey:entityType:parentKey:]([SGDuplicateKey alloc], "initWithEntityKey:entityType:parentKey:", v8, v13, 0);
    objc_msgSend(v11, "setDuplicateKey:", v17);

    objc_msgSend(MEMORY[0x1E0D19820], "extractionInfoWithExtractionType:modelVersion:confidence:", 0, 0, 0);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "setExtractionInfo:", v18);

    objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("sourceKey"));
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "setSourceKey:", v19);

    v20 = objc_alloc(MEMORY[0x1E0CA6B10]);
    objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("author"));
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "sg_initWithSerializedForm:", v21);
    v22 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v22)
    {
      v23 = (void *)MEMORY[0x1E0D19938];
      objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("author"));
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v23, "namedEmailAddressWithFieldValue:", v24);
      v25 = (void *)objc_claimAutoreleasedReturnValue();

      if (v25)
      {
        v26 = objc_alloc(MEMORY[0x1E0CA6B10]);
        objc_msgSend(v26, "sg_initWithNamedEmailAddress:", v25);
        v22 = (void *)objc_claimAutoreleasedReturnValue();

      }
      else
      {
        v22 = 0;
      }

    }
    objc_msgSend(v11, "setAuthor:", v22);
    objc_msgSend(v11, "setContentRangeOfInterest:", 0x7FFFFFFFFFFFFFFFLL, 0);
    if (!-[SGDatabaseJournal journaling](self->_snippetsJournal, "journaling"))
    {
      snippetDb = self->_snippetDb;
      v51[0] = v7;
      v51[1] = 3221225472;
      v51[2] = __47__SGSqlEntityStore_Loading___loadMessageByKey___block_invoke_2;
      v51[3] = &unk_1E7DB7720;
      v52 = v11;
      v49[0] = v7;
      v49[1] = 3221225472;
      v49[2] = __47__SGSqlEntityStore_Loading___loadMessageByKey___block_invoke_3;
      v49[3] = &unk_1E7DB52C8;
      v50 = v52;
      v47[0] = v7;
      v47[1] = 3221225472;
      v47[2] = __47__SGSqlEntityStore_Loading___loadMessageByKey___block_invoke_4;
      v47[3] = &unk_1E7DB77D8;
      v48 = v50;
      -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](snippetDb, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("SELECT title, content FROM emailSnippets WHERE emailId = :emailId"), v51, v49, v47);

    }
    objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("creationTimestamp"));
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    if (v28)
    {
      objc_msgSend(MEMORY[0x1E0C99E38], "null");
      v29 = (void *)objc_claimAutoreleasedReturnValue();

      if (v28 != v29)
      {
        objc_msgSend(v28, "doubleValue");
        v31 = v30;
        objc_msgSend(v11, "setLastModifiedTimestamp:");
        objc_msgSend(v11, "setCreationTimestamp:", v31);
      }
    }
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("tags"));
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    SGEntityTagsFromStorage(v32);
    v33 = (void *)objc_claimAutoreleasedReturnValue();

    v34 = objc_msgSend(v33, "countByEnumeratingWithState:objects:count:", &v43, v55, 16);
    if (v34)
    {
      v35 = v34;
      v36 = *(_QWORD *)v44;
      do
      {
        for (i = 0; i != v35; ++i)
        {
          if (*(_QWORD *)v44 != v36)
            objc_enumerationMutation(v33);
          objc_msgSend(v11, "addTag:", *(_QWORD *)(*((_QWORD *)&v43 + 1) + 8 * i));
        }
        v35 = objc_msgSend(v33, "countByEnumeratingWithState:objects:count:", &v43, v55, 16);
      }
      while (v35);
    }

    objc_msgSend(v11, "recordId");
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "setMasterEntityId:", objc_msgSend(v38, "rowId"));

    objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("state"));
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "setState:", objc_msgSend(v39, "unsignedIntValue"));

  }
  else
  {
    v11 = 0;
  }

  return v11;
}

- (id)loadEntityByKey:(id)a3
{
  id v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  const __CFString *v10;
  SGSqliteDatabase *db;
  uint64_t v12;
  _QWORD v14[6];
  _QWORD v15[4];
  id v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  void (*v21)(uint64_t);
  id v22;

  v4 = a3;
  objc_msgSend(v4, "entityType");
  if (SGEntityTypeIsMessage())
  {
    objc_msgSend(v4, "messageKey");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[SGSqlEntityStore _loadMessageByKey:](self, "_loadMessageByKey:", v5);
    v6 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    -[SGSqlEntityStore selectEntityQuery:](self, "selectEntityQuery:", CFSTR("WHERE e.entityKey = :entityKey AND e.entityType = :entityType AND ep.parentKey"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "parentKey");
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    v9 = (void *)MEMORY[0x1C3BD4F6C]();
    if (v8)
      v10 = CFSTR(" = :parentKey");
    else
      v10 = CFSTR(" is NULL");
    objc_msgSend(v7, "stringByAppendingString:", v10);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    objc_autoreleasePoolPop(v9);
    v17 = 0;
    v18 = &v17;
    v19 = 0x3032000000;
    v20 = __Block_byref_object_copy__20493;
    v21 = __Block_byref_object_dispose__20494;
    v22 = 0;
    db = self->_db;
    v12 = MEMORY[0x1E0C809B0];
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = __45__SGSqlEntityStore_Loading__loadEntityByKey___block_invoke;
    v15[3] = &unk_1E7DB7720;
    v16 = v4;
    v14[0] = v12;
    v14[1] = 3221225472;
    v14[2] = __45__SGSqlEntityStore_Loading__loadEntityByKey___block_invoke_2;
    v14[3] = &unk_1E7DB6A98;
    v14[4] = self;
    v14[5] = &v17;
    -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](db, "prepAndRunQuery:onPrep:onRow:onError:", v5, v15, v14, 0);
    v6 = (id)v18[5];

    _Block_object_dispose(&v17, 8);
  }

  return v6;
}

- (id)loadEntitiesByEntityKey:(id)a3 entityType:(int64_t)a4 resolveDuplicates:(id)a5
{
  id v8;
  void (**v9)(id, id);
  void *v10;
  void *v11;
  SGSqliteDatabase *db;
  id v13;
  id v14;
  void *v15;
  _QWORD v17[4];
  id v18;
  SGSqlEntityStore *v19;
  _QWORD v20[4];
  id v21;
  int64_t v22;

  v8 = a3;
  v9 = (void (**)(id, id))a5;
  -[SGSqlEntityStore selectEntityQuery:](self, "selectEntityQuery:", CFSTR("WHERE e.entityKey = :entityKey AND e.entityType = :entityType"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = (void *)objc_opt_new();
  db = self->_db;
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 3221225472;
  v20[2] = __82__SGSqlEntityStore_Loading__loadEntitiesByEntityKey_entityType_resolveDuplicates___block_invoke;
  v20[3] = &unk_1E7DAF750;
  v21 = v8;
  v22 = a4;
  v17[0] = MEMORY[0x1E0C809B0];
  v17[1] = 3221225472;
  v17[2] = __82__SGSqlEntityStore_Loading__loadEntitiesByEntityKey_entityType_resolveDuplicates___block_invoke_2;
  v17[3] = &unk_1E7DB53F8;
  v18 = v11;
  v19 = self;
  v13 = v11;
  v14 = v8;
  -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](db, "prepAndRunQuery:onPrep:onRow:onError:", v10, v20, v17, 0);
  v9[2](v9, v13);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  return v15;
}

- (id)loadEntitiesFoundInEmail:(id)a3 entityType:(int64_t)a4
{
  id v5;
  SGDuplicateKey *v6;
  void *v7;
  void *v8;
  SGSqliteDatabase *db;
  id v10;
  SGDuplicateKey *v11;
  id v12;
  _QWORD v14[4];
  id v15;
  SGSqlEntityStore *v16;
  _QWORD v17[4];
  SGDuplicateKey *v18;

  v5 = a3;
  v6 = -[SGDuplicateKey initWithEntityKey:entityType:parentKey:]([SGDuplicateKey alloc], "initWithEntityKey:entityType:parentKey:", v5, 5, 0);

  v7 = (void *)objc_opt_new();
  -[SGSqlEntityStore selectEntityQuery:](self, "selectEntityQuery:", CFSTR("WHERE ep.parentKey = :duplicateKeyForEmail AND e.entityType = :entityType"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  db = self->_db;
  v17[0] = MEMORY[0x1E0C809B0];
  v17[1] = 3221225472;
  v17[2] = __65__SGSqlEntityStore_Loading__loadEntitiesFoundInEmail_entityType___block_invoke;
  v17[3] = &unk_1E7DB74A0;
  v18 = v6;
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = __65__SGSqlEntityStore_Loading__loadEntitiesFoundInEmail_entityType___block_invoke_2;
  v14[3] = &unk_1E7DB6BE0;
  v10 = v7;
  v15 = v10;
  v16 = self;
  v11 = v6;
  -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](db, "prepAndRunSQL:onPrep:onRow:onError:", v8, v17, v14, 0);
  v12 = v10;

  return v12;
}

- (id)loadContactForStorageContact:(id)a3 usingSerializedContactCache:(BOOL)a4
{
  _BOOL4 v4;
  id v6;
  void *v7;

  v4 = a4;
  v6 = a3;
  if (-[SGSuggestHistory hasStorageContact:](self->_history, "hasStorageContact:", v6))
  {
    v7 = 0;
  }
  else
  {
    if (!v4
      || (-[SGSqlEntityStore loadSerializedContactForId:](self, "loadSerializedContactForId:", objc_msgSend(v6, "masterEntityId")), (v7 = (void *)objc_claimAutoreleasedReturnValue()) == 0))
    {
      objc_msgSend(v6, "convertToContact:", self);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
    }
    -[SGSqlEntityStore filterOutRejectedDetailsFromContact:](self, "filterOutRejectedDetailsFromContact:", v7);
  }

  return v7;
}

- (id)masterEntityIdForContactOrContactDetailRecord:(id)a3
{
  id v4;
  SGSqliteDatabase *db;
  uint64_t v6;
  id v7;
  void *v8;
  _QWORD v10[5];
  _QWORD v11[4];
  id v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  v4 = a3;
  v13 = 0;
  v14 = &v13;
  v15 = 0x2020000000;
  v16 = -1;
  db = self->_db;
  v6 = MEMORY[0x1E0C809B0];
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __75__SGSqlEntityStore_Loading__masterEntityIdForContactOrContactDetailRecord___block_invoke;
  v11[3] = &unk_1E7DB74A0;
  v7 = v4;
  v12 = v7;
  v10[0] = v6;
  v10[1] = 3221225472;
  v10[2] = __75__SGSqlEntityStore_Loading__masterEntityIdForContactOrContactDetailRecord___block_invoke_2;
  v10[3] = &unk_1E7DB7510;
  v10[4] = &v13;
  -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](db, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("SELECT CASE WHEN masterEntityId > 0 THEN masterEntityId ELSE id END FROM entity WHERE id IN (SELECT CASE WHEN entityType = :contact THEN id ELSE groupId END FROM entity WHERE id=:id)"), v11, v10, 0);
  if (v14[3] == -1)
  {
    v8 = 0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0D19920], "recordIdForContactWithRowId:");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
  }

  _Block_object_dispose(&v13, 8);
  return v8;
}

- (id)loadStorageContactByRecordId:(id)a3 error:(id *)a4
{
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v17;
  void *v18;
  uint8_t buf[4];
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  -[SGSqlEntityStore loadEntityByRecordId:](self, "loadEntityByRecordId:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (v7)
  {
    +[SGContactEntity contactEntityFromEntity:](SGContactEntity, "contactEntityFromEntity:", v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    +[SGStorageContact contactFromContactEntity:](SGStorageContact, "contactFromContactEntity:", v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v10 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("Could not load contact (recordId=%@)"), v6);
    sgLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v20 = v10;
      _os_log_error_impl(&dword_1C3607000, v11, OS_LOG_TYPE_ERROR, "%@", buf, 0xCu);
    }

    if (a4)
    {
      v12 = (void *)MEMORY[0x1E0CB35C8];
      v17 = *MEMORY[0x1E0CB2D50];
      objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "localizedStringForKey:value:table:", v10, &stru_1E7DB83A8, 0);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = v14;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v18, &v17, 1);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "errorWithDomain:code:userInfo:", CFSTR("SGSqlEntityStoreErrorDomain"), 0, v15);
      *a4 = (id)objc_claimAutoreleasedReturnValue();

    }
    v9 = 0;
  }

  return v9;
}

- (id)loadStorageContactByRecordId:(id)a3
{
  return -[SGSqlEntityStore loadStorageContactByRecordId:error:](self, "loadStorageContactByRecordId:error:", a3, 0);
}

- (id)loadContactDetailsForRecordId:(id)a3 type:(unint64_t)a4
{
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  void *v16;
  void *v17;
  void *v18;
  _QWORD v19[4];
  id v20;
  _QWORD v21[2];

  v21[1] = *MEMORY[0x1E0C80C00];
  v7 = a3;
  if (!v7)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore+Loading.m"), 352, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("recordId"));

  }
  if (objc_msgSend(v7, "tableId"))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore+Loading.m"), 353, CFSTR("RecordId with unexpected table: %@"), v7);

  }
  if (a4 == 2)
  {
    -[SGSqlEntityStore loadEntityByRecordId:](self, "loadEntityByRecordId:", v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v8)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore+Loading.m"), 360, CFSTR("No record found with id: %@"), v7);

    }
    objc_msgSend(v8, "duplicateKey");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v9, "entityType");

    if (v10 == 4)
    {
      +[SGContactDetail contactDetailFromEntity:](SGContactDetail, "contactDetailFromEntity:", v8);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v21[0] = v11;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v21, 1);
      v12 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v12 = (void *)MEMORY[0x1E0C9AA60];
    }

  }
  else
  {
    v12 = (void *)MEMORY[0x1E0C9AA60];
  }
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 3221225472;
  v19[2] = __64__SGSqlEntityStore_Loading__loadContactDetailsForRecordId_type___block_invoke;
  v19[3] = &unk_1E7DB7720;
  v20 = v7;
  v13 = v7;
  -[SGSqlEntityStore loadContactDetailsWithWhereClause:onPrep:type:dedupeAgainst:recordId:](self, "loadContactDetailsWithWhereClause:onPrep:type:dedupeAgainst:recordId:", CFSTR("WHERE masterEntityId = :masterEntityId"), v19, a4, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  return v14;
}

- (id)loadEventByKeyForOldCodePathTesting:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  const __CFString *v8;
  void *v9;
  SGSqliteDatabase *db;
  uint64_t v11;
  id v12;
  id v13;
  _QWORD v15[6];
  _QWORD v16[4];
  id v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t);
  void (*v22)(uint64_t);
  id v23;

  v4 = a3;
  -[SGSqlEntityStore selectEntityQuery:](self, "selectEntityQuery:", CFSTR("WHERE e.entityKey = :entityKey AND e.entityType = :entityType AND ep.parentKey"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "parentKey");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v7 = (void *)MEMORY[0x1C3BD4F6C]();
  if (v6)
    v8 = CFSTR(" = :parentKey");
  else
    v8 = CFSTR(" is NULL");
  objc_msgSend(v5, "stringByAppendingString:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  objc_autoreleasePoolPop(v7);
  v18 = 0;
  v19 = &v18;
  v20 = 0x3032000000;
  v21 = __Block_byref_object_copy__20493;
  v22 = __Block_byref_object_dispose__20494;
  v23 = 0;
  db = self->_db;
  v11 = MEMORY[0x1E0C809B0];
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3221225472;
  v16[2] = __65__SGSqlEntityStore_Loading__loadEventByKeyForOldCodePathTesting___block_invoke;
  v16[3] = &unk_1E7DB7720;
  v12 = v4;
  v17 = v12;
  v15[0] = v11;
  v15[1] = 3221225472;
  v15[2] = __65__SGSqlEntityStore_Loading__loadEventByKeyForOldCodePathTesting___block_invoke_2;
  v15[3] = &unk_1E7DB6A98;
  v15[4] = self;
  v15[5] = &v18;
  -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](db, "prepAndRunQuery:onPrep:onRow:onError:", v9, v16, v15, 0);
  v13 = (id)v19[5];

  _Block_object_dispose(&v18, 8);
  return v13;
}

- (id)loadEventByDuplicateKey:(id)a3
{
  id v4;
  SGSqliteDatabase *db;
  uint64_t v6;
  id v7;
  void *v8;
  _QWORD v10[5];
  _QWORD v11[4];
  id v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  v4 = a3;
  v13 = 0;
  v14 = &v13;
  v15 = 0x2020000000;
  v16 = -1;
  db = self->_db;
  v6 = MEMORY[0x1E0C809B0];
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __53__SGSqlEntityStore_Loading__loadEventByDuplicateKey___block_invoke;
  v11[3] = &unk_1E7DB7720;
  v7 = v4;
  v12 = v7;
  v10[0] = v6;
  v10[1] = 3221225472;
  v10[2] = __53__SGSqlEntityStore_Loading__loadEventByDuplicateKey___block_invoke_2;
  v10[3] = &unk_1E7DB51B8;
  v10[4] = &v13;
  -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](db, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("SELECT e.id FROM entity AS e INNER JOIN entityParentage AS ep ON e.id = ep.childId WHERE e.entityKey = :entityKey AND e.entityType = :entityType AND ep.parentKey IS :parentKey"), v11, v10, 0);
  if (v14[3] == -1)
  {
    v8 = 0;
  }
  else
  {
    -[SGSqlEntityStore loadEventForDuplicateKey:](self, "loadEventForDuplicateKey:", v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
  }

  _Block_object_dispose(&v13, 8);
  return v8;
}

- (id)loadContactDetailsWithWhereClause:(id)a3 onPrep:(id)a4 type:(unint64_t)a5 dedupeAgainst:(id)a6 recordId:(id)a7
{
  id v13;
  id v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  SGSqliteDatabase *db;
  uint64_t v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  int v31;
  int v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  void *v40;
  char v41;
  void *v42;
  void *v43;
  void *v44;
  uint64_t v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v51;
  void *v52;
  id v53;
  void *v54;
  unint64_t v55;
  SGSqlEntityStore *v56;
  id v57;
  void *v58;
  void *v59;
  void *v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  _QWORD v69[5];
  id v70;
  _QWORD v71[4];
  id v72;
  uint64_t v73;
  uint64_t v74;
  _BYTE v75[128];
  _BYTE v76[128];
  uint64_t v77;

  v77 = *MEMORY[0x1E0C80C00];
  v13 = a3;
  v14 = a4;
  v15 = a6;
  v57 = a7;
  if (v13)
  {
    if (v15)
      goto LABEL_3;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v51, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore+Loading.m"), 435, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("where"));

    if (v15)
      goto LABEL_3;
  }
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v52 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v52, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore+Loading.m"), 436, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("details"));

LABEL_3:
  v16 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("%@ AND e.entityType IN (:entityTypeDetected, :entityTypeCurated)"), v13);
  -[SGSqlEntityStore selectEntityQuery:](self, "selectEntityQuery:", v16);
  v17 = objc_claimAutoreleasedReturnValue();

  v55 = a5;
  if (a5 > 6)
  {
    v18 = 0;
    v19 = 0;
  }
  else
  {
    v18 = qword_1C3858BC8[a5];
    v19 = qword_1C3858C00[a5];
  }
  v60 = (void *)objc_opt_new();
  objc_msgSend(v60, "addObjectsFromArray:", v15);
  v20 = (void *)objc_opt_new();
  db = self->_db;
  v22 = MEMORY[0x1E0C809B0];
  v71[0] = MEMORY[0x1E0C809B0];
  v71[1] = 3221225472;
  v71[2] = __98__SGSqlEntityStore_Loading__loadContactDetailsWithWhereClause_onPrep_type_dedupeAgainst_recordId___block_invoke;
  v71[3] = &unk_1E7DAF778;
  v53 = v14;
  v72 = v53;
  v73 = v19;
  v74 = v18;
  v69[0] = v22;
  v69[1] = 3221225472;
  v69[2] = __98__SGSqlEntityStore_Loading__loadContactDetailsWithWhereClause_onPrep_type_dedupeAgainst_recordId___block_invoke_2;
  v69[3] = &unk_1E7DB53F8;
  v56 = self;
  v69[4] = self;
  v23 = v20;
  v70 = v23;
  v54 = (void *)v17;
  -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](db, "prepAndRunQuery:onPrep:onRow:onError:", v17, v71, v69, 0);
  v65 = 0u;
  v66 = 0u;
  v67 = 0u;
  v68 = 0u;
  v24 = v23;
  v25 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v65, v76, 16);
  v58 = v15;
  v59 = v13;
  if (v25)
  {
    v26 = v25;
    v27 = *(_QWORD *)v66;
    while (2)
    {
      v28 = 0;
      do
      {
        if (*(_QWORD *)v66 != v27)
          objc_enumerationMutation(v24);
        objc_msgSend(*(id *)(*((_QWORD *)&v65 + 1) + 8 * v28), "tags");
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0D197F0], "fromReply");
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        v31 = objc_msgSend(v29, "containsObject:", v30);

        if (!v31)
        {
          v32 = 1;
          goto LABEL_16;
        }
        ++v28;
      }
      while (v26 != v28);
      v26 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v65, v76, 16);
      if (v26)
        continue;
      break;
    }
  }
  v32 = 0;
LABEL_16:

  v63 = 0u;
  v64 = 0u;
  v61 = 0u;
  v62 = 0u;
  v33 = v24;
  v34 = objc_msgSend(v33, "countByEnumeratingWithState:objects:count:", &v61, v75, 16);
  if (v34)
  {
    v35 = v34;
    v36 = *(_QWORD *)v62;
    do
    {
      v37 = 0;
      do
      {
        if (*(_QWORD *)v62 != v36)
          objc_enumerationMutation(v33);
        v38 = *(void **)(*((_QWORD *)&v61 + 1) + 8 * v37);
        if (!v32
          || (objc_msgSend(*(id *)(*((_QWORD *)&v61 + 1) + 8 * v37), "tags"),
              v39 = (void *)objc_claimAutoreleasedReturnValue(),
              objc_msgSend(MEMORY[0x1E0D197F0], "fromReply"),
              v40 = (void *)objc_claimAutoreleasedReturnValue(),
              v41 = objc_msgSend(v39, "containsObject:", v40),
              v40,
              v39,
              (v41 & 1) == 0))
        {
          objc_msgSend(v38, "duplicateKey");
          v42 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v42, "entityType");
          if ((SGEntityTypeIsContact() & 1) == 0)
          {

LABEL_27:
            +[SGContactDetail contactDetailFromEntity:](SGContactDetail, "contactDetailFromEntity:", v38);
            v46 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v60, "addObject:", v46);

            goto LABEL_28;
          }
          objc_msgSend(v38, "duplicateKey");
          v43 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v43, "identityKey");
          v44 = (void *)objc_claimAutoreleasedReturnValue();
          v45 = objc_msgSend(v44, "type");

          if (v45 != 4)
            goto LABEL_27;
        }
LABEL_28:
        ++v37;
      }
      while (v35 != v37);
      v35 = objc_msgSend(v33, "countByEnumeratingWithState:objects:count:", &v61, v75, 16);
    }
    while (v35);
  }

  -[SGSqlEntityStore loadAllContactDetailsFromTableForRecordId:type:](v56, "loadAllContactDetailsFromTableForRecordId:type:", v57, v55);
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  -[SGSqlEntityStore filterOutUndisplayableEntities:](v56, "filterOutUndisplayableEntities:", v47);
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  +[SGDeduper dedupeContactDetails:](SGDeduper, "dedupeContactDetails:", v48);
  v49 = (void *)objc_claimAutoreleasedReturnValue();

  return v49;
}

- (id)loadAllContactDetailsForRecordId:(id)a3
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v17;
  void *v18;
  _QWORD v19[4];
  id v20;
  _QWORD v21[2];

  v21[1] = *MEMORY[0x1E0C80C00];
  v5 = a3;
  if (!v5)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore+Loading.m"), 488, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("recordId"));

  }
  if (objc_msgSend(v5, "tableId"))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore+Loading.m"), 489, CFSTR("RecordId with unexpected table: %@"), v5);

  }
  -[SGSqlEntityStore loadEntityByRecordId:](self, "loadEntityByRecordId:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (!v6)
    goto LABEL_10;
  objc_msgSend(v6, "duplicateKey");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v8, "entityType") != 4)
  {

    goto LABEL_10;
  }
  objc_msgSend(v7, "duplicateKey");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "identityKey");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "type");

  if (v11 == 4)
  {
LABEL_10:
    v13 = (void *)MEMORY[0x1E0C9AA60];
    goto LABEL_11;
  }
  +[SGContactDetail contactDetailFromEntity:](SGContactDetail, "contactDetailFromEntity:", v7);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v21[0] = v12;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v21, 1);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

LABEL_11:
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 3221225472;
  v19[2] = __62__SGSqlEntityStore_Loading__loadAllContactDetailsForRecordId___block_invoke;
  v19[3] = &unk_1E7DB7720;
  v20 = v5;
  v14 = v5;
  -[SGSqlEntityStore loadAllContactDetailsWithWhereClause:onPrep:dedupeAgainst:](self, "loadAllContactDetailsWithWhereClause:onPrep:dedupeAgainst:", CFSTR("WHERE masterEntityId = :masterEntityId"), v19, v13);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  return v15;
}

- (id)loadAllContactDetailsWithWhereClause:(id)a3 onPrep:(id)a4 dedupeAgainst:(id)a5
{
  id v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  uint64_t v13;
  void *v14;
  SGSqliteDatabase *db;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  int v26;
  int v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  void *v35;
  char v36;
  void *v37;
  void *v38;
  void *v39;
  uint64_t v40;
  void *v41;
  SGSuggestHistory *history;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *context;
  void *v54;
  void *v55;
  void *v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  _QWORD v66[5];
  id v67;
  SEL v68;
  _QWORD v69[4];
  id v70;
  _BYTE v71[128];
  _BYTE v72[128];
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  v11 = v10;
  if (v8)
  {
    if (v10)
      goto LABEL_3;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v49, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore+Loading.m"), 513, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("where"));

    if (v11)
      goto LABEL_3;
  }
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v50 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v50, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore+Loading.m"), 514, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("details"));

LABEL_3:
  context = (void *)MEMORY[0x1C3BD4F6C]();
  objc_msgSend(v8, "stringByAppendingString:", CFSTR(" AND e.entityType IN (:detPhone, :detAddr, :detEmailAddr, :detSocialProfile, :curPhone, :curAddr, :curEmailAddr, :detBirthday, :curBirthday, :curPhotoPath)"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  -[SGSqlEntityStore selectEntityQuery:](self, "selectEntityQuery:", v12);
  v13 = objc_claimAutoreleasedReturnValue();

  v57 = (void *)objc_opt_new();
  objc_msgSend(v57, "addObjectsFromArray:", v11);
  v14 = (void *)objc_opt_new();
  db = self->_db;
  v16 = MEMORY[0x1E0C809B0];
  v69[0] = MEMORY[0x1E0C809B0];
  v69[1] = 3221225472;
  v69[2] = __87__SGSqlEntityStore_Loading__loadAllContactDetailsWithWhereClause_onPrep_dedupeAgainst___block_invoke;
  v69[3] = &unk_1E7DAF7A0;
  v17 = v9;
  v70 = v17;
  v66[0] = v16;
  v66[1] = 3221225472;
  v66[2] = __87__SGSqlEntityStore_Loading__loadAllContactDetailsWithWhereClause_onPrep_dedupeAgainst___block_invoke_2;
  v66[3] = &unk_1E7DAF7C8;
  v66[4] = self;
  v68 = a2;
  v18 = v14;
  v67 = v18;
  v52 = (void *)v13;
  -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](db, "prepAndRunQuery:onPrep:onRow:onError:", v13, v69, v66, 0);
  v62 = 0u;
  v63 = 0u;
  v64 = 0u;
  v65 = 0u;
  v19 = v18;
  v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v62, v72, 16);
  v54 = v11;
  v55 = v8;
  v51 = v17;
  if (v20)
  {
    v21 = v20;
    v22 = *(_QWORD *)v63;
    while (2)
    {
      v23 = 0;
      do
      {
        if (*(_QWORD *)v63 != v22)
          objc_enumerationMutation(v19);
        objc_msgSend(*(id *)(*((_QWORD *)&v62 + 1) + 8 * v23), "tags");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0D197F0], "fromReply");
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        v26 = objc_msgSend(v24, "containsObject:", v25);

        if (!v26)
        {
          v27 = 1;
          goto LABEL_13;
        }
        ++v23;
      }
      while (v21 != v23);
      v21 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v62, v72, 16);
      if (v21)
        continue;
      break;
    }
  }
  v27 = 0;
LABEL_13:

  v60 = 0u;
  v61 = 0u;
  v58 = 0u;
  v59 = 0u;
  v28 = v19;
  v29 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v58, v71, 16);
  if (v29)
  {
    v30 = v29;
    v31 = *(_QWORD *)v59;
    do
    {
      v32 = 0;
      do
      {
        if (*(_QWORD *)v59 != v31)
          objc_enumerationMutation(v28);
        v33 = *(void **)(*((_QWORD *)&v58 + 1) + 8 * v32);
        if (!v27
          || (objc_msgSend(*(id *)(*((_QWORD *)&v58 + 1) + 8 * v32), "tags"),
              v34 = (void *)objc_claimAutoreleasedReturnValue(),
              objc_msgSend(MEMORY[0x1E0D197F0], "fromReply"),
              v35 = (void *)objc_claimAutoreleasedReturnValue(),
              v36 = objc_msgSend(v34, "containsObject:", v35),
              v35,
              v34,
              (v36 & 1) == 0))
        {
          objc_msgSend(v33, "duplicateKey");
          v37 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v37, "entityType");
          if ((SGEntityTypeIsContact() & 1) != 0)
          {
            objc_msgSend(v33, "duplicateKey");
            v38 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v38, "identityKey");
            v39 = (void *)objc_claimAutoreleasedReturnValue();
            v40 = objc_msgSend(v39, "type");

            if (v40 == 4)
              goto LABEL_29;
          }
          else
          {

          }
          objc_msgSend(v33, "duplicateKey");
          v41 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v41, "entityType");
          if ((SGEntityTypeIsContactDetail() & 1) == 0)
          {

LABEL_28:
            +[SGContactDetail contactDetailFromEntity:](SGContactDetail, "contactDetailFromEntity:", v33);
            v45 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v57, "addObject:", v45);

            goto LABEL_29;
          }
          history = self->_history;
          objc_msgSend(v33, "duplicateKey");
          v43 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v43, "contactDetailKey");
          v44 = (void *)objc_claimAutoreleasedReturnValue();
          LOBYTE(history) = -[SGSuggestHistory hasContactDetailKey:](history, "hasContactDetailKey:", v44);

          if ((history & 1) == 0)
            goto LABEL_28;
        }
LABEL_29:
        ++v32;
      }
      while (v30 != v32);
      v30 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v58, v71, 16);
    }
    while (v30);
  }

  -[SGSqlEntityStore filterOutUndisplayableEntities:](self, "filterOutUndisplayableEntities:", v57);
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  +[SGDeduper dedupeContactDetails:](SGDeduper, "dedupeContactDetails:", v46);
  v47 = (void *)objc_claimAutoreleasedReturnValue();

  objc_autoreleasePoolPop(context);
  return v47;
}

- (id)entityKeyCountsForEntityType:(int64_t)a3 startDate:(id)a4 endDate:(id)a5
{
  id v8;
  id v9;
  void *v10;
  SGSqliteDatabase *db;
  id v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  _QWORD v18[4];
  id v19;
  _QWORD v20[4];
  id v21;
  id v22;
  int64_t v23;

  v8 = a4;
  v9 = a5;
  v10 = (void *)objc_opt_new();
  db = self->_db;
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 3221225472;
  v20[2] = __76__SGSqlEntityStore_Loading__entityKeyCountsForEntityType_startDate_endDate___block_invoke;
  v20[3] = &unk_1E7DAF7F0;
  v22 = v9;
  v23 = a3;
  v21 = v8;
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 3221225472;
  v18[2] = __76__SGSqlEntityStore_Loading__entityKeyCountsForEntityType_startDate_endDate___block_invoke_2;
  v18[3] = &unk_1E7DB52C8;
  v12 = v10;
  v19 = v12;
  v13 = v9;
  v14 = v8;
  v15 = v19;
  v16 = v12;

  return v16;
}

- (id)allRemindersLimitedTo:(unint64_t)a3
{
  void *v5;
  uint64_t v6;
  void *v7;
  SGSqliteDatabase *db;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _QWORD v20[5];
  _QWORD v21[5];
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t);
  void (*v26)(uint64_t);
  id v27;
  _BYTE v28[128];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v22 = 0;
  v23 = &v22;
  v24 = 0x3032000000;
  v25 = __Block_byref_object_copy__20493;
  v26 = __Block_byref_object_dispose__20494;
  v27 = 0;
  v5 = (void *)objc_opt_new();
  v6 = MEMORY[0x1E0C809B0];
  v27 = v5;
  v21[0] = MEMORY[0x1E0C809B0];
  v21[1] = 3221225472;
  v21[2] = __51__SGSqlEntityStore_Loading__allRemindersLimitedTo___block_invoke;
  v21[3] = &unk_1E7DB51B8;
  v21[4] = &v22;
  v7 = (void *)MEMORY[0x1C3BD5158](v21);
  db = self->_db;
  v20[0] = v6;
  v20[1] = 3221225472;
  v20[2] = __51__SGSqlEntityStore_Loading__allRemindersLimitedTo___block_invoke_2;
  v20[3] = &__block_descriptor_40_e23_v16__0__sqlite3_stmt__8l;
  v20[4] = a3;
  -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](db, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("SELECT id FROM reminders LIMIT ?"), v20, v7, 0);
  v9 = (void *)objc_opt_new();
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  v10 = (id)v23[5];
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v16, v28, 16);
  if (v11)
  {
    v12 = *(_QWORD *)v17;
    do
    {
      v13 = 0;
      do
      {
        if (*(_QWORD *)v17 != v12)
          objc_enumerationMutation(v10);
        -[SGSqlEntityStore getReminder:](self, "getReminder:", objc_msgSend(*(id *)(*((_QWORD *)&v16 + 1) + 8 * v13), "longValue", (_QWORD)v16));
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "addObject:", v14);

        ++v13;
      }
      while (v11 != v13);
      v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v16, v28, 16);
    }
    while (v11);
  }

  _Block_object_dispose(&v22, 8);
  return v9;
}

- (id)loadReminderByKeyOld:(id)a3
{
  id v5;
  void *v6;
  void *v7;
  void *v9;

  v5 = a3;
  -[SGSqlEntityStore loadEntityByKey:](self, "loadEntityByKey:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v6)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore+Loading.m"), 639, CFSTR("Invalid duplicate key: %@"), v5);

  }
  +[SGStorageReminder storageReminderFromEntity:store:](SGStorageReminder, "storageReminderFromEntity:store:", v6, self);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

- (id)loadReminderByRecordIdOld:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  NSObject *v7;
  int v9;
  id v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[SGSqlEntityStore loadEntityByRecordId:](self, "loadEntityByRecordId:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    +[SGStorageReminder storageReminderFromEntity:store:](SGStorageReminder, "storageReminderFromEntity:store:", v5, self);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    sgRemindersLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v9 = 138412290;
      v10 = v4;
      _os_log_impl(&dword_1C3607000, v7, OS_LOG_TYPE_DEFAULT, "Unable to load entity by recordId: %@", (uint8_t *)&v9, 0xCu);
    }

    v6 = 0;
  }

  return v6;
}

- (id)allDeliveriesWithLimit:(unint64_t)a3
{
  void *v3;
  void *v4;

  -[SGSqlEntityStore allEntitiesOfType:limitedTo:](self, "allEntitiesOfType:limitedTo:", 24, a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  sgMap();
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

- (id)loadEventsWithInteractionIdentifiers:(id)a3 fromBundleIdentifier:(id)a4
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  void *v17;
  void *v19;
  void *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = a4;
  if (!v8)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore+Loading.m"), 670, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("bundleId"));

  }
  if (!objc_msgSend(v7, "count"))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore+Loading.m"), 671, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("identifiers.count != 0"));

  }
  sgMap();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[SGSqlEntityStore duplicateKeysMatchingInteractionBundleId:andTags:](self, "duplicateKeysMatchingInteractionBundleId:andTags:", v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = (void *)objc_opt_new();
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v12 = v10;
  v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
  if (v13)
  {
    v14 = v13;
    v15 = *(_QWORD *)v22;
    do
    {
      for (i = 0; i != v14; ++i)
      {
        if (*(_QWORD *)v22 != v15)
          objc_enumerationMutation(v12);
        -[SGSqlEntityStore loadEventByDuplicateKey:](self, "loadEventByDuplicateKey:", *(_QWORD *)(*((_QWORD *)&v21 + 1) + 8 * i));
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        if (v17)
          objc_msgSend(v11, "addObject:", v17);

      }
      v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
    }
    while (v14);
  }

  return v11;
}

uint64_t __87__SGSqlEntityStore_Loading__loadEventsWithInteractionIdentifiers_fromBundleIdentifier___block_invoke(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(MEMORY[0x1E0D197F0], "interactionId:", a2);
}

uint64_t __52__SGSqlEntityStore_Loading__allDeliveriesWithLimit___block_invoke(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(MEMORY[0x1E0D197D0], "deliveryForEntity:store:", a2, *(_QWORD *)(a1 + 32));
}

uint64_t __51__SGSqlEntityStore_Loading__allRemindersLimitedTo___block_invoke(uint64_t a1, sqlite3_stmt *a2)
{
  sqlite3_int64 v3;
  void *v4;
  void *v5;

  v3 = sqlite3_column_int64(a2, 0);
  v4 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addObject:", v5);

  return 0;
}

uint64_t __51__SGSqlEntityStore_Loading__allRemindersLimitedTo___block_invoke_2(uint64_t a1, sqlite3_stmt *a2)
{
  return sqlite3_bind_int(a2, 1, *(_DWORD *)(a1 + 32));
}

uint64_t __76__SGSqlEntityStore_Loading__entityKeyCountsForEntityType_startDate_endDate___block_invoke(uint64_t a1, uint64_t a2)
{
  +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":entityType", *(_QWORD *)(a1 + 48));
  objc_msgSend(*(id *)(a1 + 32), "timeIntervalSince1970");
  +[SGSqliteDatabase bindParam:name:double:](SGSqliteDatabase, "bindParam:name:double:", a2, ":startDate");
  objc_msgSend(*(id *)(a1 + 40), "timeIntervalSince1970");
  return +[SGSqliteDatabase bindParam:name:double:](SGSqliteDatabase, "bindParam:name:double:", a2, ":endDate");
}

uint64_t __76__SGSqlEntityStore_Loading__entityKeyCountsForEntityType_startDate_endDate___block_invoke_2(uint64_t a1, sqlite3_stmt *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v3 = *(void **)(a1 + 32);
  v4 = (void *)MEMORY[0x1E0D81638];
  sqlite3_column_nsstring(a2, 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", sqlite3_column_int(a2, 1));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "tupleWithFirst:second:", v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "addObject:", v7);

  return 0;
}

uint64_t __87__SGSqlEntityStore_Loading__loadAllContactDetailsWithWhereClause_onPrep_dedupeAgainst___block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
    (*(void (**)(uint64_t, uint64_t))(v3 + 16))(v3, a2);
  +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":detPhone", 6);
  +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":detAddr", 7);
  +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":detEmailAddr", 8);
  +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":detSocialProfile", 19);
  +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":curPhone", 9);
  +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":curAddr", 10);
  +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":curEmailAddr", 11);
  +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":detBirthday", 20);
  +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":curBirthday", 21);
  return +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":curPhotoPath", 23);
}

uint64_t __87__SGSqlEntityStore_Loading__loadAllContactDetailsWithWhereClause_onPrep_dedupeAgainst___block_invoke_2(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v7;

  objc_msgSend(*(id *)(a1 + 32), "entityFromSqlResult:", a2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "duplicateKey");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "parentKey");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v5)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "handleFailureInMethod:object:file:lineNumber:description:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 32), CFSTR("SGSqlEntityStore+Loading.m"), 540, CFSTR("Contact details require a parent"));

  }
  objc_msgSend(*(id *)(a1 + 40), "addObject:", v3);

  return 0;
}

uint64_t __62__SGSqlEntityStore_Loading__loadAllContactDetailsForRecordId___block_invoke(uint64_t a1, uint64_t a2)
{
  return +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":masterEntityId", objc_msgSend(*(id *)(a1 + 32), "rowId"));
}

uint64_t __98__SGSqlEntityStore_Loading__loadContactDetailsWithWhereClause_onPrep_type_dedupeAgainst_recordId___block_invoke(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = a1[4];
  if (v4)
    (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v4, a2);
  +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":entityTypeDetected", a1[5]);
  return +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":entityTypeCurated", a1[6]);
}

uint64_t __98__SGSqlEntityStore_Loading__loadContactDetailsWithWhereClause_onPrep_type_dedupeAgainst_recordId___block_invoke_2(uint64_t a1, uint64_t a2)
{
  void *v3;

  objc_msgSend(*(id *)(a1 + 32), "entityFromSqlResult:", a2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "addObject:", v3);

  return 0;
}

void __53__SGSqlEntityStore_Loading__loadEventByDuplicateKey___block_invoke(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  objc_msgSend(*(id *)(a1 + 32), "entityKey");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "serialize");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  +[SGSqliteDatabase bindParam:name:nsstring:](SGSqliteDatabase, "bindParam:name:nsstring:", a2, ":entityKey", v5);

  +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":entityType", objc_msgSend(*(id *)(a1 + 32), "entityType"));
  objc_msgSend(*(id *)(a1 + 32), "parentKey");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    objc_msgSend(*(id *)(a1 + 32), "parentKey");
    v8 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "serialize");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    +[SGSqliteDatabase bindParam:name:nsstring:](SGSqliteDatabase, "bindParam:name:nsstring:", a2, ":parentKey", v7);

  }
  else
  {
    +[SGSqliteDatabase bindParamToNull:name:](SGSqliteDatabase, "bindParamToNull:name:", a2, ":parentKey");
  }
}

uint64_t __53__SGSqlEntityStore_Loading__loadEventByDuplicateKey___block_invoke_2(uint64_t a1, sqlite3_stmt *a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = sqlite3_column_int64(a2, 0);
  return 1;
}

void __65__SGSqlEntityStore_Loading__loadEventByKeyForOldCodePathTesting___block_invoke(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  objc_msgSend(*(id *)(a1 + 32), "entityKey");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "serialize");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  +[SGSqliteDatabase bindParam:name:nsstring:](SGSqliteDatabase, "bindParam:name:nsstring:", a2, ":entityKey", v5);

  +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":entityType", objc_msgSend(*(id *)(a1 + 32), "entityType"));
  objc_msgSend(*(id *)(a1 + 32), "parentKey");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    objc_msgSend(*(id *)(a1 + 32), "parentKey");
    v8 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "serialize");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    +[SGSqliteDatabase bindParam:name:nsstring:](SGSqliteDatabase, "bindParam:name:nsstring:", a2, ":parentKey", v7);

  }
}

uint64_t __65__SGSqlEntityStore_Loading__loadEventByKeyForOldCodePathTesting___block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  objc_msgSend(*(id *)(a1 + 32), "eventFromSqlResult:", a2);
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

  return 1;
}

uint64_t __64__SGSqlEntityStore_Loading__loadContactDetailsForRecordId_type___block_invoke(uint64_t a1, uint64_t a2)
{
  return +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":masterEntityId", objc_msgSend(*(id *)(a1 + 32), "rowId"));
}

void __75__SGSqlEntityStore_Loading__masterEntityIdForContactOrContactDetailRecord___block_invoke(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  objc_msgSend(v3, "bindNamedParam:toInteger:", ":contact", 4);
  objc_msgSend(v3, "bindNamedParam:toInteger:", ":id", objc_msgSend(*(id *)(a1 + 32), "numericValue"));

}

uint64_t __75__SGSqlEntityStore_Loading__masterEntityIdForContactOrContactDetailRecord___block_invoke_2(uint64_t a1, void *a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_msgSend(a2, "getInt64ForColumn:", 0);
  return *MEMORY[0x1E0D81780];
}

void __65__SGSqlEntityStore_Loading__loadEntitiesFoundInEmail_entityType___block_invoke(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  id v4;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  objc_msgSend(v2, "serialize");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "bindNamedParam:toNonnullNSString:", ":duplicateKeyForEmail", v4);

}

uint64_t __65__SGSqlEntityStore_Loading__loadEntitiesFoundInEmail_entityType___block_invoke_2(uint64_t a1, id a2)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 40), "entityFromSqlResult:", objc_msgSend(objc_retainAutorelease(a2), "stmt"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "addObject:", v3);

  return *MEMORY[0x1E0D81780];
}

uint64_t __82__SGSqlEntityStore_Loading__loadEntitiesByEntityKey_entityType_resolveDuplicates___block_invoke(uint64_t a1, uint64_t a2)
{
  void *v4;

  objc_msgSend(*(id *)(a1 + 32), "serialize");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  +[SGSqliteDatabase bindParam:name:nsstring:](SGSqliteDatabase, "bindParam:name:nsstring:", a2, ":entityKey", v4);

  return +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":entityType", *(_QWORD *)(a1 + 40));
}

uint64_t __82__SGSqlEntityStore_Loading__loadEntitiesByEntityKey_entityType_resolveDuplicates___block_invoke_2(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 40), "entityFromSqlResult:", a2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "addObject:", v3);

  return 0;
}

void __45__SGSqlEntityStore_Loading__loadEntityByKey___block_invoke(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  objc_msgSend(*(id *)(a1 + 32), "entityKey");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "serialize");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  +[SGSqliteDatabase bindParam:name:nsstring:](SGSqliteDatabase, "bindParam:name:nsstring:", a2, ":entityKey", v5);

  +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":entityType", objc_msgSend(*(id *)(a1 + 32), "entityType"));
  objc_msgSend(*(id *)(a1 + 32), "parentKey");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    objc_msgSend(*(id *)(a1 + 32), "parentKey");
    v8 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "serialize");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    +[SGSqliteDatabase bindParam:name:nsstring:](SGSqliteDatabase, "bindParam:name:nsstring:", a2, ":parentKey", v7);

  }
}

uint64_t __45__SGSqlEntityStore_Loading__loadEntityByKey___block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  objc_msgSend(*(id *)(a1 + 32), "entityFromSqlResult:", a2);
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

  return 1;
}

void __47__SGSqlEntityStore_Loading___loadMessageByKey___block_invoke(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  id v4;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  objc_msgSend(v2, "serialize");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "bindNamedParam:toNSString:", ":key", v4);

}

void __47__SGSqlEntityStore_Loading___loadMessageByKey___block_invoke_2(uint64_t a1, uint64_t a2)
{
  id v3;

  objc_msgSend(*(id *)(a1 + 32), "recordId");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":emailId", objc_msgSend(v3, "rowId"));

}

uint64_t __47__SGSqlEntityStore_Loading___loadMessageByKey___block_invoke_3(uint64_t a1, sqlite3_stmt *a2)
{
  void *v4;
  void *v5;

  sqlite3_column_nsstring(a2, 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "setTitle:", v4);

  sqlite3_column_nsstring(a2, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "setContent:", v5);

  return 1;
}

uint64_t __47__SGSqlEntityStore_Loading___loadMessageByKey___block_invoke_4(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  sgLogHandle();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    objc_msgSend(*(id *)(a1 + 32), "recordId");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = 134217984;
    v6 = objc_msgSend(v3, "rowId");
    _os_log_impl(&dword_1C3607000, v2, OS_LOG_TYPE_DEFAULT, "failed to load snippet data for email entity: %lld", (uint8_t *)&v5, 0xCu);

  }
  return 1;
}

uint64_t __75__SGSqlEntityStore_Loading__allEntitiesOfType_limitedTo_onlyMLExtractions___block_invoke(uint64_t a1, uint64_t a2)
{
  +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":entityType", *(_QWORD *)(a1 + 32));
  return +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":limit", *(_QWORD *)(a1 + 40));
}

uint64_t __75__SGSqlEntityStore_Loading__allEntitiesOfType_limitedTo_onlyMLExtractions___block_invoke_2(uint64_t a1, uint64_t a2)
{
  void *v3;
  char *v4;
  NSObject *v5;
  uint8_t v7[16];

  objc_msgSend(*(id *)(a1 + 32), "entityFromSqlResult:", a2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    objc_msgSend(*(id *)(a1 + 40), "addObject:", v3);
    v4 = &SGSqliteDatabaseKeepGoing;
  }
  else
  {
    sgLogHandle();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v7 = 0;
      _os_log_error_impl(&dword_1C3607000, v5, OS_LOG_TYPE_ERROR, "Unable to load entity from database", v7, 2u);
    }

    v4 = &SGSqliteDatabaseStop;
  }

  return *v4;
}

uint64_t __50__SGSqlEntityStore_Loading__loadEntityByRecordId___block_invoke(uint64_t a1, uint64_t a2)
{
  return +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":rowId", objc_msgSend(*(id *)(a1 + 32), "rowId"));
}

uint64_t __50__SGSqlEntityStore_Loading__loadEntityByRecordId___block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  objc_msgSend(*(id *)(a1 + 32), "entityFromSqlResult:", a2);
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

  return 1;
}

uint64_t __53__SGSqlEntityStore_Loading__loadSourceKeyByRecordId___block_invoke(uint64_t a1, uint64_t a2)
{
  return +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":rowId", objc_msgSend(*(id *)(a1 + 32), "rowId"));
}

uint64_t __53__SGSqlEntityStore_Loading__loadSourceKeyByRecordId___block_invoke_2(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  sqlite3_column_nsstring(a2, 0);
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

  return 1;
}

void __56__SGSqlEntityStore_Loading__loadDuplicateKeyByRecordId___block_invoke(uint64_t a1, void *a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  objc_msgSend(v3, "bindNamedParam:toInt64:", ":rowId", objc_msgSend(v2, "rowId"));

}

uint64_t __56__SGSqlEntityStore_Loading__loadDuplicateKeyByRecordId___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  SGDuplicateKey *v7;
  uint64_t v8;
  void *v9;
  unsigned __int8 *v10;

  v3 = a2;
  objc_msgSend(v3, "nonnullNSStringForColumnName:table:", "entityKey", "entity");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v3, "getIntegerForColumnName:table:", "entityType", "entity");
  objc_msgSend(v3, "getNSStringForColumnName:table:", "parentKey", "entityParentage");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v7 = -[SGDuplicateKey initWithSerializedEntityKey:entityType:serializedParentKey:]([SGDuplicateKey alloc], "initWithSerializedEntityKey:entityType:serializedParentKey:", v4, v5, v6);
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v9 = *(void **)(v8 + 40);
  *(_QWORD *)(v8 + 40) = v7;

  v10 = (unsigned __int8 *)MEMORY[0x1E0D81788];
  return *v10;
}

- (int64_t)getMaxEntityId
{
  int64_t result;

  result = -[SGSqliteDatabase maxIdForTable:](self->_db, "maxIdForTable:", CFSTR("entity"));
  if (result == 0x7FFFFFFFFFFFFFFFLL)
    return 0;
  return result;
}

- (void)writeCNContactMissForRecordId:(id)a3
{
  id v4;
  int64_t v5;
  SGSqliteDatabase *db;
  id v7;
  _QWORD v8[5];
  id v9;
  int64_t v10;

  v4 = a3;
  v5 = -[SGSqlEntityStore getMaxEntityId](self, "getMaxEntityId");
  db = self->_db;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __66__SGSqlEntityStore_CNtoSGContacts__writeCNContactMissForRecordId___block_invoke;
  v8[3] = &unk_1E7DB6BB8;
  v9 = v4;
  v10 = v5;
  v8[4] = self;
  v7 = v4;
  -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v8);

}

- (void)writeCNContactMatchForContact:(id)a3 withMatches:(id)a4 andMaxEntityId:(int64_t)a5
{
  id v8;
  id v9;
  SGSqliteDatabase *db;
  id v11;
  id v12;
  _QWORD v13[5];
  id v14;
  id v15;
  int64_t v16;

  v8 = a3;
  v9 = a4;
  db = self->_db;
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = __93__SGSqlEntityStore_CNtoSGContacts__writeCNContactMatchForContact_withMatches_andMaxEntityId___block_invoke;
  v13[3] = &unk_1E7DB5990;
  v13[4] = self;
  v14 = v8;
  v15 = v9;
  v16 = a5;
  v11 = v9;
  v12 = v8;
  -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v13);

}

- (void)writeCNContactMatchAndUpdateSetForContact:(id)a3 withMatches:(id)a4 andMaxEntityId:(int64_t)a5
{
  id v8;
  NSSet *v9;
  NSSet *v10;
  NSSet *prematchedContactIdentifiers;
  id v12;

  v12 = a3;
  v8 = a4;
  -[SGSqlEntityStore writeCNContactMatchForContact:withMatches:andMaxEntityId:](self, "writeCNContactMatchForContact:withMatches:andMaxEntityId:", v12, v8, a5);
  v9 = self->_prematchedContactIdentifiers;
  objc_sync_enter(v9);
  -[SGSqlEntityStore prematchedContactIdentifiers](self, "prematchedContactIdentifiers");
  v10 = (NSSet *)objc_claimAutoreleasedReturnValue();
  prematchedContactIdentifiers = self->_prematchedContactIdentifiers;
  self->_prematchedContactIdentifiers = v10;

  objc_sync_exit(v9);
}

- (id)loadCNContactMatchesForContact:(id)a3 andGetMaxEntityId:(int64_t *)a4
{
  id v6;
  void *v7;
  NSSet *v8;
  BOOL v9;
  NSObject *v10;
  uint64_t v11;
  void *v12;
  SGSqliteDatabase *db;
  id v14;
  NSObject *v15;
  void *v16;
  NSSet *v17;
  NSObject *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, void *);
  void *v24;
  id v25;
  int64_t *v26;
  _QWORD v27[4];
  id v28;
  _QWORD block[4];
  BOOL v30;
  uint8_t buf[4];
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  objc_msgSend(v6, "identifier");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *a4 = -1;
  v8 = self->_prematchedContactIdentifiers;
  objc_sync_enter(v8);
  v9 = -[NSSet containsObject:](self->_prematchedContactIdentifiers, "containsObject:", v7);
  if (loadCNContactMatchesForContact_andGetMaxEntityId___pasOnceToken3 != -1)
    dispatch_once(&loadCNContactMatchesForContact_andGetMaxEntityId___pasOnceToken3, &__block_literal_global_22114);
  v10 = (id)loadCNContactMatchesForContact_andGetMaxEntityId___pasExprOnceResult;
  v11 = MEMORY[0x1E0C809B0];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __85__SGSqlEntityStore_CNtoSGContacts__loadCNContactMatchesForContact_andGetMaxEntityId___block_invoke_2;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v30 = v9;
  dispatch_async(v10, block);
  if (v9)
  {

    objc_sync_exit(v8);
    v12 = (void *)objc_opt_new();
    db = self->_db;
    v27[0] = v11;
    v27[1] = 3221225472;
    v27[2] = __85__SGSqlEntityStore_CNtoSGContacts__loadCNContactMatchesForContact_andGetMaxEntityId___block_invoke_26;
    v27[3] = &unk_1E7DB74A0;
    v28 = v7;
    v21 = v11;
    v22 = 3221225472;
    v23 = __85__SGSqlEntityStore_CNtoSGContacts__loadCNContactMatchesForContact_andGetMaxEntityId___block_invoke_2_27;
    v24 = &unk_1E7DB6EF8;
    v26 = a4;
    v14 = v12;
    v25 = v14;
    -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](db, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("SELECT maxEntityId, entityId FROM cnContactsToSgContacts WHERE cnContactIdentifier = :cnContactIdentifier"), v27, &v21, 0);
    sgLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      v20 = objc_msgSend(v14, "count", v21, v22, v23, v24);
      *(_DWORD *)buf = 134217984;
      v32 = v20;
      _os_log_debug_impl(&dword_1C3607000, v15, OS_LOG_TYPE_DEBUG, "Found %lu prematched contacts in CNContact cache", buf, 0xCu);
    }

    v16 = v25;
    v8 = (NSSet *)v14;

    v17 = v8;
  }
  else
  {
    sgLogHandle();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_1C3607000, v18, OS_LOG_TYPE_DEBUG, "CNContact cache miss", buf, 2u);
    }

    objc_sync_exit(v8);
    v17 = 0;
  }

  return v17;
}

- (void)deleteCNContactMatchForContactId:(id)a3
{
  id v4;
  SGSqliteDatabase *db;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  db = self->_db;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __69__SGSqlEntityStore_CNtoSGContacts__deleteCNContactMatchForContactId___block_invoke;
  v7[3] = &unk_1E7DB6A30;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v7);

}

- (void)deleteAllCNContactMatches
{
  SGSqliteDatabase *db;
  _QWORD v3[5];

  db = self->_db;
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __61__SGSqlEntityStore_CNtoSGContacts__deleteAllCNContactMatches__block_invoke;
  v3[3] = &unk_1E7DB56F0;
  v3[4] = self;
  -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v3);
}

- (void)deleteAllCNContactMatchesForIdSet:(id)a3
{
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  SGSqliteDatabase *db;
  id v13;
  _QWORD v14[5];
  id v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v4, "count"));
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v6 = v4;
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v17;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v17 != v9)
          objc_enumerationMutation(v6);
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", objc_msgSend(*(id *)(*((_QWORD *)&v16 + 1) + 8 * v10), "rowId"));
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "addObject:", v11);

        ++v10;
      }
      while (v8 != v10);
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    }
    while (v8);
  }

  db = self->_db;
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = __70__SGSqlEntityStore_CNtoSGContacts__deleteAllCNContactMatchesForIdSet___block_invoke;
  v14[3] = &unk_1E7DB6A30;
  v14[4] = self;
  v15 = v5;
  v13 = v5;
  -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v14);

}

- (void)deleteAllCNContactMatchesForEntityID:(int64_t)a3
{
  void *v5;
  id v6;
  void *v7;
  id v8;

  v5 = (void *)MEMORY[0x1C3BD4F6C](self, a2);
  v6 = objc_alloc(MEMORY[0x1E0C99E60]);
  objc_msgSend(MEMORY[0x1E0D19920], "recordIdForContactWithRowId:", a3);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = (id)objc_msgSend(v6, "initWithObjects:", v7, 0);

  objc_autoreleasePoolPop(v5);
  -[SGSqlEntityStore deleteAllCNContactMatchesForIdSet:](self, "deleteAllCNContactMatchesForIdSet:", v8);

}

- (id)prematchedContactIdentifiers
{
  void *v3;
  SGSqliteDatabase *db;
  id v5;
  _QWORD v7[4];
  id v8;

  v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E20]), "initWithCapacity:", 500);
  db = self->_db;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __64__SGSqlEntityStore_CNtoSGContacts__prematchedContactIdentifiers__block_invoke;
  v7[3] = &unk_1E7DB6ED0;
  v5 = v3;
  v8 = v5;
  -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](db, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("SELECT DISTINCT cnContactIdentifier FROM cnContactsToSgContacts"), 0, v7, 0);

  return v5;
}

- (id)loadAllPrecomputedContactMatches
{
  NSSet *v3;
  NSUInteger v4;
  void *v5;
  SGSqliteDatabase *db;
  id v7;
  _QWORD v9[4];
  id v10;

  v3 = self->_prematchedContactIdentifiers;
  objc_sync_enter(v3);
  v4 = -[NSSet count](self->_prematchedContactIdentifiers, "count");
  objc_sync_exit(v3);

  v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", v4);
  db = self->_db;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __68__SGSqlEntityStore_CNtoSGContacts__loadAllPrecomputedContactMatches__block_invoke;
  v9[3] = &unk_1E7DB6ED0;
  v7 = v5;
  v10 = v7;
  -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](db, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("SELECT cnContactIdentifier, maxEntityId, entityId FROM cnContactsToSgContacts ORDER BY cnContactIdentifier, entityId"), 0, v9, 0);

  return v7;
}

- (id)cnContactMatchesForRecordId:(id)a3 found:(BOOL *)a4
{
  id v6;
  void *v7;
  NSObject *v8;
  id v9;
  void *v10;
  SGSqliteDatabase *db;
  uint64_t v12;
  id v13;
  void *v14;
  _QWORD v16[4];
  id v17;
  BOOL *v18;
  _QWORD v19[4];
  id v20;
  uint8_t buf[4];
  void *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = v6;
  if (a4)
    *a4 = 0;
  if (objc_msgSend(v6, "tableId"))
  {
    sgLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v22 = v7;
      _os_log_impl(&dword_1C3607000, v8, OS_LOG_TYPE_DEFAULT, "cnContactMatchesForRecordId received recordId from wrong table: %@", buf, 0xCu);
    }

    v9 = (id)MEMORY[0x1E0C9AA60];
  }
  else
  {
    v10 = (void *)objc_opt_new();
    db = self->_db;
    v12 = MEMORY[0x1E0C809B0];
    v19[0] = MEMORY[0x1E0C809B0];
    v19[1] = 3221225472;
    v19[2] = __70__SGSqlEntityStore_CNtoSGContacts__cnContactMatchesForRecordId_found___block_invoke;
    v19[3] = &unk_1E7DB74A0;
    v20 = v7;
    v16[0] = v12;
    v16[1] = 3221225472;
    v16[2] = __70__SGSqlEntityStore_CNtoSGContacts__cnContactMatchesForRecordId_found___block_invoke_2;
    v16[3] = &unk_1E7DB6EF8;
    v18 = a4;
    v13 = v10;
    v17 = v13;
    -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](db, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("SELECT cnContactIdentifier FROM cnContactsToSgContacts WHERE entityId = :entityId"), v19, v16, 0);
    v14 = v17;
    v9 = v13;

  }
  return v9;
}

- (id)_popBatchOfCNContactIds
{
  SGSqliteDatabase *db;
  NSObject *v3;
  id v4;
  uint64_t v6;
  _QWORD v7[6];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  void (*v12)(uint64_t);
  id v13;
  uint8_t buf[4];
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v8 = 0;
  v9 = &v8;
  v10 = 0x3032000000;
  v11 = __Block_byref_object_copy__22084;
  v12 = __Block_byref_object_dispose__22085;
  v13 = 0;
  db = self->_db;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __59__SGSqlEntityStore_CNtoSGContacts___popBatchOfCNContactIds__block_invoke;
  v7[3] = &unk_1E7DB78A0;
  v7[4] = self;
  v7[5] = &v8;
  -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v7);
  sgLogHandle();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    v6 = v9[5];
    *(_DWORD *)buf = 138412290;
    v15 = v6;
    _os_log_debug_impl(&dword_1C3607000, v3, OS_LOG_TYPE_DEBUG, "Popped CN2SG job: %@", buf, 0xCu);
  }

  if (objc_msgSend((id)v9[5], "count"))
    v4 = (id)v9[5];
  else
    v4 = 0;
  _Block_object_dispose(&v8, 8);

  return v4;
}

- (void)_enqueueBatchOfCNContactIds:(id)a3
{
  SGSqliteDatabase *db;
  id v5;
  _QWORD v6[5];
  id v7;

  v5 = a3;
  if (objc_msgSend(v5, "count"))
  {
    db = self->_db;
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = __64__SGSqlEntityStore_CNtoSGContacts___enqueueBatchOfCNContactIds___block_invoke;
    v6[3] = &unk_1E7DB6A30;
    v6[4] = self;
    v7 = v5;
    -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v6);

  }
}

- (void)_clearPendingJobs
{
  SGSqliteDatabase *db;
  _QWORD v3[5];

  db = self->_db;
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __53__SGSqlEntityStore_CNtoSGContacts___clearPendingJobs__block_invoke;
  v3[3] = &unk_1E7DB56F0;
  v3[4] = self;
  -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v3);
}

- (void)updateCNContactMatches:(id)a3
{
  id v4;
  NSObject *v5;
  void *v6;
  int64_t v7;
  id v8;
  id v9;
  unsigned int (**v10)(_QWORD);
  _BOOL4 v11;
  void *v12;
  int v13;
  NSObject *v14;
  NSObject *v15;
  NSObject *v16;
  NSObject *v17;
  NSSet *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(_QWORD *);
  void *v22;
  SGSqlEntityStore *v23;
  id v24;
  id v25;
  int64_t v26;
  uint8_t buf[8];
  _QWORD v28[3];

  v4 = a3;
  v28[2] = 0;
  v28[0] = CFSTR("updateCNContactMatches");
  v28[1] = mach_absolute_time();
  sgLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1C3607000, v5, OS_LOG_TYPE_INFO, "start updating CNContact matches", buf, 2u);
  }

  v6 = (void *)objc_opt_new();
  v7 = -[SGSqlEntityStore getMaxEntityId](self, "getMaxEntityId");
  v19 = MEMORY[0x1E0C809B0];
  v20 = 3221225472;
  v21 = __59__SGSqlEntityStore_CNtoSGContacts__updateCNContactMatches___block_invoke;
  v22 = &unk_1E7DAFC50;
  v23 = self;
  v8 = v6;
  v24 = v8;
  v26 = v7;
  v9 = v4;
  v25 = v9;
  v10 = (unsigned int (**)(_QWORD))MEMORY[0x1C3BD5158](&v19);
  if (v9)
    v11 = xpc_activity_get_state((xpc_activity_t)v9) == 3;
  else
    v11 = 0;
  if (((v10[2](v10) | v11) & 1) != 0)
    goto LABEL_20;
  -[SGSqlEntityStore syncContactsWithStore:](self, "syncContactsWithStore:", v8, v19, v20, v21, v22, v23, v24);
  if (!v9
    || (+[SGXPCActivityManager sharedInstance](SGXPCActivityManager, "sharedInstance"),
        v12 = (void *)objc_claimAutoreleasedReturnValue(),
        v13 = objc_msgSend(v12, "shouldDefer:", v9),
        v12,
        !v13))
  {
    v10[2](v10);
    sgLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_1C3607000, v16, OS_LOG_TYPE_DEBUG, "done updating CNContact matches", buf, 2u);
    }

    sgLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1C3607000, v17, OS_LOG_TYPE_INFO, "done updating CNContact matches", buf, 2u);
    }

LABEL_20:
    -[SGSqlEntityStore prematchedContactIdentifiers](self, "prematchedContactIdentifiers", v19, v20, v21, v22, v23);
    v15 = objc_claimAutoreleasedReturnValue();
    v18 = self->_prematchedContactIdentifiers;
    objc_sync_enter(v18);
    objc_storeStrong((id *)&self->_prematchedContactIdentifiers, v15);
    objc_sync_exit(v18);

    SGRecordMeasurementState(v28);
    goto LABEL_21;
  }
  if (!xpc_activity_set_state((xpc_activity_t)v9, 3))
  {
    sgLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1C3607000, v14, OS_LOG_TYPE_ERROR, "Could not defer activity", buf, 2u);
    }

  }
  sgLogHandle();
  v15 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1C3607000, v15, OS_LOG_TYPE_INFO, "CN Contact precomputation deferring", buf, 2u);
  }
LABEL_21:

  SGRecordMeasurementState(v28);
}

- (void)clearChangeHistory:(id)a3
{
  objc_class *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  char v8;
  id v9;
  NSObject *v10;
  id v11;
  uint8_t buf[4];
  id v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v3 = (objc_class *)MEMORY[0x1E0C971C8];
    v4 = a3;
    v5 = (void *)objc_msgSend([v3 alloc], "initWithClientIdentifier:", CFSTR("com.apple.suggestions.suggestd.cntosgcontacts"));
    objc_msgSend(v4, "latestChangeAnchor");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v5, "setToChangeAnchor:", v6);
    +[SGContactStoreFactory contactStore](SGContactStoreFactory, "contactStore");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = 0;
    v8 = objc_msgSend(v7, "executeChangeHistoryClearRequest:error:", v5, &v11);
    v9 = v11;

    if ((v8 & 1) == 0)
    {
      sgLogHandle();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v13 = v9;
        _os_log_error_impl(&dword_1C3607000, v10, OS_LOG_TYPE_ERROR, "Could not clear CNContactStore change history due to: %@", buf, 0xCu);
      }

    }
  }
}

- (void)_fullSyncContactsWithStore:(id)a3
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  uint64_t v9;
  id v10;
  char v11;
  id v12;
  SGSqliteDatabase *db;
  NSObject *v14;
  void *v15;
  _QWORD v16[5];
  id v17;
  _QWORD v18[4];
  id v19;
  uint64_t *v20;
  id v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  char v25;
  uint8_t buf[4];
  id v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  -[SGSqlEntityStore deleteAllCNContactMatches](self, "deleteAllCNContactMatches");
  v6 = objc_alloc(MEMORY[0x1E0C97210]);
  v7 = (void *)objc_msgSend(v6, "initWithKeysToFetch:", MEMORY[0x1E0C9AA60]);
  objc_msgSend(v7, "setPredicate:", 0);
  v8 = (void *)objc_opt_new();
  v22 = 0;
  v23 = &v22;
  v24 = 0x2020000000;
  v25 = 0;
  v9 = MEMORY[0x1E0C809B0];
  v20 = &v22;
  v21 = 0;
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 3221225472;
  v18[2] = __63__SGSqlEntityStore_CNtoSGContacts___fullSyncContactsWithStore___block_invoke;
  v18[3] = &unk_1E7DAFC78;
  v10 = v8;
  v19 = v10;
  v11 = objc_msgSend(v5, "enumerateContactsWithFetchRequest:error:usingBlock:", v7, &v21, v18);
  v12 = v21;
  if (*((_BYTE *)v23 + 24))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore+CNtoSGContacts.m"), 452, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("!exceptionSwallowed"));

  }
  if ((v11 & 1) != 0)
  {
    db = self->_db;
    v16[0] = v9;
    v16[1] = 3221225472;
    v16[2] = __63__SGSqlEntityStore_CNtoSGContacts___fullSyncContactsWithStore___block_invoke_91;
    v16[3] = &unk_1E7DB6A30;
    v16[4] = self;
    v17 = v10;
    -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v16);
    -[SGSqlEntityStore setHasFullSync](self, "setHasFullSync");

  }
  else
  {
    sgLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v27 = v12;
      _os_log_error_impl(&dword_1C3607000, v14, OS_LOG_TYPE_ERROR, "Failed to enumerate CNContactStore: %@", buf, 0xCu);
    }

  }
  _Block_object_dispose(&v22, 8);

}

- (BOOL)needsFullSync
{
  SGSqliteDatabase *db;
  NSObject *v3;
  const __CFString *v4;
  char v5;
  _QWORD v7[6];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;
  uint8_t buf[4];
  const __CFString *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v8 = 0;
  v9 = &v8;
  v10 = 0x2020000000;
  v11 = 1;
  db = self->_db;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __49__SGSqlEntityStore_CNtoSGContacts__needsFullSync__block_invoke;
  v7[3] = &unk_1E7DB78A0;
  v7[4] = self;
  v7[5] = &v8;
  -[SGSqliteDatabase readTransaction:](db, "readTransaction:", v7);
  sgLogHandle();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    if (*((_BYTE *)v9 + 24))
      v4 = CFSTR("YES");
    else
      v4 = CFSTR("NO");
    *(_DWORD *)buf = 138412290;
    v13 = v4;
    _os_log_impl(&dword_1C3607000, v3, OS_LOG_TYPE_INFO, "Do/did we need a full CN to SG sync? %@", buf, 0xCu);
  }

  v5 = *((_BYTE *)v9 + 24);
  _Block_object_dispose(&v8, 8);
  return v5;
}

- (void)setHasFullSync
{
  SGSqliteDatabase *db;
  _QWORD v3[5];

  db = self->_db;
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __50__SGSqlEntityStore_CNtoSGContacts__setHasFullSync__block_invoke;
  v3[3] = &unk_1E7DB56F0;
  v3[4] = self;
  -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v3);
}

- (void)syncContactsWithStore:(id)a3
{
  id v4;
  void *v5;
  char v6;
  id v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  NSObject *v13;
  int v14;
  NSObject *v15;
  NSObject *v16;
  id v17;
  id v18;
  uint8_t buf[4];
  _DWORD v20[7];

  *(_QWORD *)&v20[5] = *MEMORY[0x1E0C80C00];
  v4 = a3;
  +[SGContactStoreFactory contactStore](SGContactStoreFactory, "contactStore");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = 0;
  v6 = objc_msgSend(v5, "registerChangeHistoryClientIdentifier:error:", CFSTR("com.apple.suggestions.suggestd.cntosgcontacts"), &v18);
  v7 = v18;

  if ((v6 & 1) == 0)
  {
    sgLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)v20 = v7;
      _os_log_error_impl(&dword_1C3607000, v8, OS_LOG_TYPE_ERROR, "Could not register for CNContactStore change history due to: %@", buf, 0xCu);
    }

  }
  v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C971E8]), "initWithClientIdentifier:", CFSTR("com.apple.suggestions.suggestd.cntosgcontacts"));
  objc_msgSend(v9, "setShouldUnifyResults:", 0);
  +[SGContactStoreFactory contactStore](SGContactStoreFactory, "contactStore");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = v7;
  objc_msgSend(v10, "changeHistoryWithFetchRequest:error:", v9, &v17);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = v17;

  sgLogHandle();
  v13 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    v14 = objc_msgSend(v11, "changesTruncated");
    *(_DWORD *)buf = 67109378;
    v20[0] = v14;
    LOWORD(v20[1]) = 2112;
    *(_QWORD *)((char *)&v20[1] + 2) = v11;
    _os_log_impl(&dword_1C3607000, v13, OS_LOG_TYPE_INFO, "CNChangeHistoryResult truncated: %d , %@", buf, 0x12u);
  }

  if (!v11
    || (objc_msgSend(v11, "changesTruncated") & 1) != 0
    || -[SGSqlEntityStore needsFullSync](self, "needsFullSync"))
  {
    sgLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1C3607000, v15, OS_LOG_TYPE_INFO, "Performing full sync with CNContactStore", buf, 2u);
    }

    -[SGSqlEntityStore _fullSyncContactsWithStore:](self, "_fullSyncContactsWithStore:", v4);
  }
  else
  {
    sgLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1C3607000, v16, OS_LOG_TYPE_INFO, "Performing delta sync with CNContactStore", buf, 2u);
    }

    -[SGSqlEntityStore _deltaSyncContactsWithChangeHistory:](self, "_deltaSyncContactsWithChangeHistory:", v11);
  }
  -[SGSqlEntityStore clearChangeHistory:](self, "clearChangeHistory:", v11);

}

- (void)_deltaSyncContactsWithChangeHistory:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  char v8;
  id v9;
  NSObject *v10;
  _QWORD v11[4];
  id v12;
  SGSqlEntityStore *v13;
  id v14;
  uint8_t buf[4];
  id v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)objc_opt_new();
  +[SGContactStoreFactory contactStore](SGContactStoreFactory, "contactStore");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = 0;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __72__SGSqlEntityStore_CNtoSGContacts___deltaSyncContactsWithChangeHistory___block_invoke;
  v11[3] = &unk_1E7DAFCA0;
  v7 = v5;
  v12 = v7;
  v13 = self;
  v8 = objc_msgSend(v4, "enumerateContactChangesWithKeysToFetch:fromContactStore:error:usingBlock:", MEMORY[0x1E0C9AA60], v6, &v14, v11);

  v9 = v14;
  if ((v8 & 1) != 0)
  {
    objc_msgSend(v7, "proxyArray");
    v10 = objc_claimAutoreleasedReturnValue();
    -[SGSqlEntityStore _enqueueBatchOfCNContactIds:](self, "_enqueueBatchOfCNContactIds:", v10);
  }
  else
  {
    sgLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v16 = v9;
      _os_log_error_impl(&dword_1C3607000, v10, OS_LOG_TYPE_ERROR, "Could not enumerate CNContactStore change history due to: %@", buf, 0xCu);
    }
  }

}

- (void)initRefreshSuggestionsContactDropBox
{
  SGCoalescingDropBox *v3;
  SGCoalescingDropBox *v4;
  SGCoalescingDropBox *cnToSGContactsCachePendingUpdateRequests;
  _QWORD v6[4];
  id v7;
  id location;

  location = 0;
  objc_initWeak(&location, self);
  v3 = [SGCoalescingDropBox alloc];
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __72__SGSqlEntityStore_CNtoSGContacts__initRefreshSuggestionsContactDropBox__block_invoke_2;
  v6[3] = &unk_1E7DAFD50;
  objc_copyWeak(&v7, &location);
  v4 = -[SGCoalescingDropBox initWithName:boxMaker:handler:qos:](v3, "initWithName:boxMaker:handler:qos:", "refreshSuggestionsContact", &__block_literal_global_106, v6, 17);
  cnToSGContactsCachePendingUpdateRequests = self->_cnToSGContactsCachePendingUpdateRequests;
  self->_cnToSGContactsCachePendingUpdateRequests = v4;

  objc_destroyWeak(&v7);
  objc_destroyWeak(&location);
}

- (void)refreshSuggestionsContact:(id)a3
{
  id v4;
  SGCoalescingDropBox *cnToSGContactsCachePendingUpdateRequests;
  id v6;
  _QWORD v7[4];
  id v8;

  v4 = a3;
  cnToSGContactsCachePendingUpdateRequests = self->_cnToSGContactsCachePendingUpdateRequests;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __62__SGSqlEntityStore_CNtoSGContacts__refreshSuggestionsContact___block_invoke;
  v7[3] = &unk_1E7DAFD78;
  v8 = v4;
  v6 = v4;
  -[SGCoalescingDropBox updateBox:delay:](cnToSGContactsCachePendingUpdateRequests, "updateBox:delay:", v7, 10.0);

}

void __62__SGSqlEntityStore_CNtoSGContacts__refreshSuggestionsContact___block_invoke(uint64_t a1, void *a2, _BYTE *a3)
{
  id v5;
  NSObject *v6;
  unint64_t v7;
  NSObject *v8;
  NSObject *v9;
  uint64_t v10;
  const __CFString *v11;
  void *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  __int16 v16;
  void *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  sgLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    if (objc_msgSend(v5, "containsObject:", *(_QWORD *)(a1 + 32)))
      v11 = CFSTR("duplicate");
    else
      v11 = CFSTR("new");
    objc_msgSend(*(id *)(a1 + 32), "recordId");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = 138412546;
    v15 = (uint64_t)v11;
    v16 = 2112;
    v17 = v12;
    _os_log_debug_impl(&dword_1C3607000, v6, OS_LOG_TYPE_DEBUG, "refreshSuggestionsContact added %@ storage contact %@", (uint8_t *)&v14, 0x16u);

  }
  objc_msgSend(v5, "addObject:", *(_QWORD *)(a1 + 32));
  v7 = objc_msgSend(v5, "count");
  sgLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = v8;
  if (v7 < 0x3E8)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      v13 = objc_msgSend(v5, "count");
      v14 = 134217984;
      v15 = v13;
      _os_log_debug_impl(&dword_1C3607000, v9, OS_LOG_TYPE_DEBUG, "refreshSuggestionsContact coalescing box size: %tu", (uint8_t *)&v14, 0xCu);
    }

  }
  else
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v10 = objc_msgSend(v5, "count");
      v14 = 134217984;
      v15 = v10;
      _os_log_impl(&dword_1C3607000, v9, OS_LOG_TYPE_DEFAULT, "refreshSuggestionsContact running immediately due to large number (%tu) of enqueued items", (uint8_t *)&v14, 0xCu);
    }

    *a3 = 1;
  }

}

void __72__SGSqlEntityStore_CNtoSGContacts__initRefreshSuggestionsContactDropBox__block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  NSObject *v24;
  id v25;
  id obj;
  void *v27;
  id WeakRetained;
  _QWORD v29[4];
  id v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint8_t buf[4];
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  void *v40;
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  sgLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = objc_msgSend(v3, "count");
    sgMap();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 134218242;
    v36 = v5;
    v37 = 2112;
    v38 = (uint64_t)v6;
    _os_log_impl(&dword_1C3607000, v4, OS_LOG_TYPE_DEFAULT, "refreshSuggestionsContact begin coalescing drop box handler with %tu SGStorageContacts: %@", buf, 0x16u);

  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v27 = (void *)objc_opt_new();
    v31 = 0u;
    v32 = 0u;
    v33 = 0u;
    v34 = 0u;
    v25 = v3;
    v7 = v3;
    v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v31, v41, 16);
    obj = v7;
    if (v8)
    {
      v9 = v8;
      v10 = 0;
      v11 = *(_QWORD *)v32;
      v12 = MEMORY[0x1E0C809B0];
      do
      {
        v13 = 0;
        v14 = v10;
        do
        {
          if (*(_QWORD *)v32 != v11)
            objc_enumerationMutation(obj);
          v15 = *(void **)(*((_QWORD *)&v31 + 1) + 8 * v13);
          v16 = (void *)MEMORY[0x1C3BD4F6C]();
          objc_msgSend(v15, "convertToContact:", WeakRetained);
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          v18 = (id)objc_msgSend(v14, "wait");
          +[SGSqlEntityStore cnContactIdentifiersForContact:](SGSqlEntityStore, "cnContactIdentifiersForContact:", v17);
          v10 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(v10, "setTimeout:", 5.0);
          v29[0] = v12;
          v29[1] = 3221225472;
          v29[2] = __72__SGSqlEntityStore_CNtoSGContacts__initRefreshSuggestionsContactDropBox__block_invoke_110;
          v29[3] = &unk_1E7DAFD28;
          v30 = v27;
          objc_msgSend(v10, "wait:", v29);

          objc_autoreleasePoolPop(v16);
          ++v13;
          v14 = v10;
        }
        while (v9 != v13);
        v7 = obj;
        v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v31, v41, 16);
      }
      while (v9);
    }
    else
    {
      v10 = 0;
    }

    v19 = (id)objc_msgSend(v10, "wait");
    sgLogHandle();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      v21 = objc_msgSend(v27, "count");
      v22 = objc_msgSend(obj, "count");
      *(_DWORD *)buf = 134218498;
      v36 = v21;
      v37 = 2048;
      v38 = v22;
      v39 = 2112;
      v40 = v27;
      v7 = obj;
      _os_log_impl(&dword_1C3607000, v20, OS_LOG_TYPE_DEFAULT, "refreshSuggestionsContact will enqueue CNContactIdentifier batch of size %tu (from %tu SGStorageContact's): %@", buf, 0x20u);
    }

    objc_msgSend(v7, "removeAllObjects");
    objc_msgSend(v27, "allObjects");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "_enqueueBatchOfCNContactIds:", v23);

    sgLogHandle();
    v24 = objc_claimAutoreleasedReturnValue();
    v3 = v25;
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1C3607000, v24, OS_LOG_TYPE_DEFAULT, "refreshSuggestionsContact end coalescing drop box handler", buf, 2u);
    }

  }
}

id __72__SGSqlEntityStore_CNtoSGContacts__initRefreshSuggestionsContactDropBox__block_invoke()
{
  return (id)objc_opt_new();
}

void __72__SGSqlEntityStore_CNtoSGContacts__initRefreshSuggestionsContactDropBox__block_invoke_110(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  NSObject *v7;
  uint64_t v8;
  uint8_t v9[16];

  v5 = a3;
  v6 = v5;
  if (a2)
  {
    objc_msgSend(*(id *)(a1 + 32), "addObjectsFromArray:", a2);
  }
  else
  {
    objc_msgSend(v5, "domain");
    v7 = objc_claimAutoreleasedReturnValue();
    if (v7 == *MEMORY[0x1E0D19AE8])
    {
      v8 = objc_msgSend(v6, "code");

      if (v8 != 10)
        goto LABEL_5;
      sgLogHandle();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v9 = 0;
        _os_log_impl(&dword_1C3607000, v7, OS_LOG_TYPE_DEFAULT, "refreshSuggestionsContact timed out waiting for spotlight", v9, 2u);
      }
    }

  }
LABEL_5:

}

id __72__SGSqlEntityStore_CNtoSGContacts__initRefreshSuggestionsContactDropBox__block_invoke_3(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;

  objc_msgSend(a2, "recordId");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "description");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

void __72__SGSqlEntityStore_CNtoSGContacts___deltaSyncContactsWithChangeHistory___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  v8 = a2;
  switch(objc_msgSend(v8, "changeType"))
  {
    case 0:
      goto LABEL_3;
    case 1:
    case 3:
    case 4:
    case 5:
      v3 = *(void **)(a1 + 40);
      objc_msgSend(v8, "contactIdentifier");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "deleteCNContactMatchForContactId:", v4);

LABEL_3:
      v5 = *(void **)(a1 + 32);
      objc_msgSend(v8, "contactIdentifier");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "addCNContactIdentifier:", v6);
      goto LABEL_4;
    case 2:
      v7 = *(void **)(a1 + 40);
      objc_msgSend(v8, "contactIdentifier");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "deleteCNContactMatchForContactId:", v6);
LABEL_4:

      break;
    default:
      break;
  }

}

uint64_t __50__SGSqlEntityStore_CNtoSGContacts__setHasFullSync__block_invoke(uint64_t a1)
{
  uint64_t result;
  NSObject *v3;
  uint8_t v4[16];

  result = objc_msgSend(*(id *)(a1 + 32), "needsFullSync");
  if ((_DWORD)result)
  {
    sgLogHandle();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_1C3607000, v3, OS_LOG_TYPE_INFO, "Will set full CN to SG sync completed.", v4, 2u);
    }

    return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("INSERT OR REPLACE INTO metadata (key, value) VALUES ('hasFullCNtoSGSync', 3)"), 0, 0, 0);
  }
  return result;
}

uint64_t __49__SGSqlEntityStore_CNtoSGContacts__needsFullSync__block_invoke(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  _QWORD v4[5];

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __49__SGSqlEntityStore_CNtoSGContacts__needsFullSync__block_invoke_2;
  v4[3] = &unk_1E7DB7510;
  v4[4] = v1;
  return objc_msgSend(v2, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("SELECT value FROM metadata WHERE key = 'hasFullCNtoSGSync' LIMIT 1"), 0, v4, 0);
}

uint64_t __49__SGSqlEntityStore_CNtoSGContacts__needsFullSync__block_invoke_2(uint64_t a1, void *a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_msgSend(a2, "getInt64ForColumnName:table:", "value", 0) != 3;
  return *MEMORY[0x1E0D81788];
}

void __63__SGSqlEntityStore_CNtoSGContacts___fullSyncContactsWithStore___block_invoke(uint64_t a1, void *a2, _BYTE *a3)
{
  uint64_t v3;
  void *v5;
  void *v6;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  if (*(_BYTE *)(v3 + 24))
  {
    *a3 = 1;
  }
  else
  {
    *(_BYTE *)(v3 + 24) = 1;
    v5 = *(void **)(a1 + 32);
    objc_msgSend(a2, "identifier");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "addCNContactIdentifier:", v6);

    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
  }
}

void __63__SGSqlEntityStore_CNtoSGContacts___fullSyncContactsWithStore___block_invoke_91(uint64_t a1)
{
  void *v2;
  id v3;

  objc_msgSend(*(id *)(a1 + 32), "_clearPendingJobs");
  v2 = *(void **)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 40), "proxyArray");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "_enqueueBatchOfCNContactIds:", v3);

}

uint64_t __59__SGSqlEntityStore_CNtoSGContacts__updateCNContactMatches___block_invoke(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  _QWORD v10[5];
  id v11;
  id v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  char v18;

  v15 = 0;
  v16 = &v15;
  v17 = 0x2020000000;
  v18 = 0;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[2] = __59__SGSqlEntityStore_CNtoSGContacts__updateCNContactMatches___block_invoke_2;
  v10[3] = &unk_1E7DB5818;
  v2 = a1[4];
  v3 = (void *)a1[5];
  v4 = *(void **)(v2 + 8);
  v10[1] = 3221225472;
  v10[4] = v2;
  v13 = &v15;
  v5 = v3;
  v7 = (void *)a1[6];
  v6 = a1[7];
  v11 = v5;
  v14 = v6;
  v12 = v7;
  objc_msgSend(v4, "writeTransaction:", v10);
  v8 = *((unsigned __int8 *)v16 + 24);

  _Block_object_dispose(&v15, 8);
  return v8;
}

void __59__SGSqlEntityStore_CNtoSGContacts__updateCNContactMatches___block_invoke_2(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  __int128 v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  id v14;
  void *v15;
  int v16;
  NSObject *v17;
  NSObject *v18;
  char v19;
  __int128 v20;
  void *v21;
  _QWORD v22[6];
  id v23;
  uint8_t buf[4];
  id v25;
  _QWORD v26[10];

  v26[8] = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "_popBatchOfCNContactIds");
  v2 = objc_claimAutoreleasedReturnValue();
  if (v2)
  {
    v3 = v2;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 1;
    v4 = *MEMORY[0x1E0C96780];
    v26[0] = *MEMORY[0x1E0C966D0];
    v26[1] = v4;
    v5 = *MEMORY[0x1E0C966A8];
    v26[2] = *MEMORY[0x1E0C966C0];
    v26[3] = v5;
    v6 = *MEMORY[0x1E0C967F0];
    v26[4] = *MEMORY[0x1E0C967C0];
    v26[5] = v6;
    v7 = *MEMORY[0x1E0C96670];
    v26[6] = *MEMORY[0x1E0C96868];
    v26[7] = v7;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v26, 8);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C97210]), "initWithKeysToFetch:", v21);
    *(_QWORD *)&v9 = 138412290;
    v20 = v9;
    do
    {
      v10 = (void *)MEMORY[0x1C3BD4F6C]();
      objc_msgSend(MEMORY[0x1E0C97200], "predicateForContactsWithIdentifiers:", v3);
      v11 = objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "setPredicate:", v11);

      v23 = 0;
      v22[0] = MEMORY[0x1E0C809B0];
      v22[1] = 3221225472;
      v22[2] = __59__SGSqlEntityStore_CNtoSGContacts__updateCNContactMatches___block_invoke_3;
      v22[3] = &unk_1E7DAFC28;
      v12 = *(void **)(a1 + 40);
      v13 = *(_QWORD *)(a1 + 64);
      v22[4] = *(_QWORD *)(a1 + 32);
      v22[5] = v13;
      LOBYTE(v11) = objc_msgSend(v12, "enumerateContactsWithFetchRequest:error:usingBlock:", v8, &v23, v22);
      v14 = v23;
      if ((v11 & 1) != 0)
      {
        if (*(_QWORD *)(a1 + 48)
          && (+[SGXPCActivityManager sharedInstance](SGXPCActivityManager, "sharedInstance"),
              v15 = (void *)objc_claimAutoreleasedReturnValue(),
              v16 = objc_msgSend(v15, "shouldDefer:", *(_QWORD *)(a1 + 48)),
              v15,
              v16))
        {
          if (!xpc_activity_set_state(*(xpc_activity_t *)(a1 + 48), 3))
          {
            sgLogHandle();
            v17 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              _os_log_error_impl(&dword_1C3607000, v17, OS_LOG_TYPE_ERROR, "Could not defer activity", buf, 2u);
            }

          }
          sgLogHandle();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 1;
          if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_1C3607000, v18, OS_LOG_TYPE_INFO, "CN Contact precomputation deferring", buf, 2u);
          }
        }
        else
        {
          objc_msgSend(*(id *)(a1 + 32), "_popBatchOfCNContactIds", v20);
          v19 = 0;
          v18 = v3;
          v3 = objc_claimAutoreleasedReturnValue();
        }
      }
      else
      {
        sgLogHandle();
        v18 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = v20;
          v25 = v14;
          _os_log_error_impl(&dword_1C3607000, v18, OS_LOG_TYPE_ERROR, "Failed to enumerate CNContactStore: %@", buf, 0xCu);
        }
        v19 = 1;
      }

      objc_autoreleasePoolPop(v10);
    }
    while ((v19 & 1) == 0 && v3);

  }
}

void __59__SGSqlEntityStore_CNtoSGContacts__updateCNContactMatches___block_invoke_3(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  _QWORD v7[5];
  id v8;
  uint64_t v9;

  v3 = a2;
  v4 = (void *)MEMORY[0x1E0D81658];
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __59__SGSqlEntityStore_CNtoSGContacts__updateCNContactMatches___block_invoke_4;
  v7[3] = &unk_1E7DB6BB8;
  v5 = *(_QWORD *)(a1 + 40);
  v7[4] = *(_QWORD *)(a1 + 32);
  v8 = v3;
  v9 = v5;
  v6 = v3;
  objc_msgSend(v4, "runWithExceptionBarrier:", v7);

}

void __59__SGSqlEntityStore_CNtoSGContacts__updateCNContactMatches___block_invoke_4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  NSObject *v20;
  void *v21;
  void *v22;
  id v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _QWORD v28[3];
  uint8_t v29[128];
  uint8_t buf[4];
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v28[0] = CFSTR("updateCNContactMatches-onequery");
  v28[1] = mach_absolute_time();
  v28[2] = 0;
  objc_msgSend(*(id *)(a1 + 32), "suggestContactsWithContact:withSnippets:filterConfirmRejectDetails:limitTo:", *(_QWORD *)(a1 + 40), 0, 1, -1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "_pas_mappedArrayWithTransform:", &__block_literal_global_77_22068);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "writeCNContactMatchForContact:withMatches:andMaxEntityId:", *(_QWORD *)(a1 + 40), v3, *(_QWORD *)(a1 + 48));
  +[SGCuratedContactMatcher filterCandidates:withDetailSubsetOfCNContact:](SGCuratedContactMatcher, "filterCandidates:withDetailSubsetOfCNContact:", v2, *(_QWORD *)(a1 + 40));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  sgLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    v6 = objc_msgSend(v4, "count");
    v7 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)buf = 134218242;
    v31 = v6;
    v32 = 2112;
    v33 = v7;
    _os_log_impl(&dword_1C3607000, v5, OS_LOG_TYPE_INFO, "%lu contact matches found for %@", buf, 0x16u);
  }

  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v8 = v4;
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v24, v29, 16);
  if (v9)
  {
    v10 = v9;
    v21 = v3;
    v22 = v2;
    v11 = 0;
    v12 = *(_QWORD *)v25;
    do
    {
      v13 = 0;
      v14 = v11;
      do
      {
        if (*(_QWORD *)v25 != v12)
          objc_enumerationMutation(v8);
        v15 = *(void **)(*((_QWORD *)&v24 + 1) + 8 * v13);
        v16 = *(void **)(a1 + 32);
        objc_msgSend(v15, "recordId", v21, v22);
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v16, "markEntityAsDupeByRecordId:", v17);

        v18 = *(void **)(a1 + 32);
        objc_msgSend(v15, "recordId");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        v23 = v14;
        LOBYTE(v18) = objc_msgSend(v18, "confirmContactByRecordID:error:", v19, &v23);
        v11 = v23;

        if ((v18 & 1) == 0)
        {
          sgLogHandle();
          v20 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            v31 = (uint64_t)v11;
            _os_log_error_impl(&dword_1C3607000, v20, OS_LOG_TYPE_ERROR, "Failed to confirm Contact: %@", buf, 0xCu);
          }

        }
        ++v13;
        v14 = v11;
      }
      while (v10 != v13);
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v24, v29, 16);
    }
    while (v10);

    v3 = v21;
    v2 = v22;
  }

  SGRecordMeasurementState(v28);
}

id __59__SGSqlEntityStore_CNtoSGContacts__updateCNContactMatches___block_invoke_5(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)MEMORY[0x1E0CB37E8];
  objc_msgSend(a2, "recordId");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "numberWithLongLong:", objc_msgSend(v3, "numericValue"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

uint64_t __53__SGSqlEntityStore_CNtoSGContacts___clearPendingJobs__block_invoke(uint64_t a1)
{
  NSObject *v2;
  uint8_t v4[16];

  sgLogHandle();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1C3607000, v2, OS_LOG_TYPE_DEFAULT, "Clearing entire CN2SG job queue", v4, 2u);
  }

  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("DELETE FROM cnContactsToSgContactsCacheJobs"), 0, 0, 0);
}

void __64__SGSqlEntityStore_CNtoSGContacts___enqueueBatchOfCNContactIds___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  _QWORD v4[4];
  id v5;

  if ((unint64_t)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "numberOfRowsInTable:", CFSTR("cnContactsToSgContactsCacheJobs")) < 0x186A1)
  {
    v2 = *(void **)(a1 + 40);
    v3 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
    v4[0] = MEMORY[0x1E0C809B0];
    v4[1] = 3221225472;
    v4[2] = __64__SGSqlEntityStore_CNtoSGContacts___enqueueBatchOfCNContactIds___block_invoke_64;
    v4[3] = &unk_1E7DB74A0;
    v5 = v2;
    objc_msgSend(v3, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("INSERT OR IGNORE INTO cnContactsToSgContactsCacheJobs (cnContactIdentifier) SELECT value FROM _pas_nsarray(:batch)"), v4, 0, 0);

  }
  else if (kSGCNContactMatchCacheIdentifier_block_invoke_tooManyRowsFaultOnce != -1)
  {
    dispatch_once(&kSGCNContactMatchCacheIdentifier_block_invoke_tooManyRowsFaultOnce, &__block_literal_global_61_22078);
  }
}

uint64_t __64__SGSqlEntityStore_CNtoSGContacts___enqueueBatchOfCNContactIds___block_invoke_64(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "bindNamedParam:toNSArray:", ":batch", *(_QWORD *)(a1 + 32));
}

uint64_t __64__SGSqlEntityStore_CNtoSGContacts___enqueueBatchOfCNContactIds___block_invoke_2()
{
  NSObject *v0;
  uint64_t result;
  uint8_t v2[16];

  sgLogHandle();
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_fault_impl(&dword_1C3607000, v0, OS_LOG_TYPE_FAULT, "CN2SG Over 100K unique rows in cnContactsToSgContactsCacheJobs -- will not enqueue a batch", v2, 2u);
  }

  result = _PASEvaluateLogFaultAndProbCrashCriteria();
  if ((_DWORD)result)
    abort();
  return result;
}

void __59__SGSqlEntityStore_CNtoSGContacts___popBatchOfCNContactIds__block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  _QWORD v11[5];
  _QWORD v12[4];
  id v13;

  v2 = (void *)objc_opt_new();
  v3 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v4 = MEMORY[0x1E0C809B0];
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __59__SGSqlEntityStore_CNtoSGContacts___popBatchOfCNContactIds__block_invoke_3;
  v12[3] = &unk_1E7DB6ED0;
  v10 = v2;
  v13 = v10;
  objc_msgSend(v3, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("SELECT cnContactIdentifier FROM cnContactsToSgContactsCacheJobs LIMIT :batchSize"), &__block_literal_global_54_22088, v12, 0);
  objc_msgSend(v10, "proxyArray");
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;

  if (objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "count"))
  {
    v8 = *(_QWORD *)(a1 + 40);
    v9 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
    v11[0] = v4;
    v11[1] = 3221225472;
    v11[2] = __59__SGSqlEntityStore_CNtoSGContacts___popBatchOfCNContactIds__block_invoke_4;
    v11[3] = &unk_1E7DB46B8;
    v11[4] = v8;
    objc_msgSend(v9, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("DELETE FROM cnContactsToSgContactsCacheJobs WHERE cnContactIdentifier IN _pas_nsarray(:batchArray)"), v11, 0, 0);
  }

}

uint64_t __59__SGSqlEntityStore_CNtoSGContacts___popBatchOfCNContactIds__block_invoke_3(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 32);
  objc_msgSend(a2, "nonnullNSStringForColumnName:table:", "cnContactIdentifier", 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "addCNContactIdentifier:", v3);

  return *MEMORY[0x1E0D81780];
}

uint64_t __59__SGSqlEntityStore_CNtoSGContacts___popBatchOfCNContactIds__block_invoke_4(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "bindNamedParam:toNSArray:", ":batchArray", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40));
}

uint64_t __59__SGSqlEntityStore_CNtoSGContacts___popBatchOfCNContactIds__block_invoke_2(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "bindNamedParam:toInteger:", ":batchSize", 10);
}

void __70__SGSqlEntityStore_CNtoSGContacts__cnContactMatchesForRecordId_found___block_invoke(uint64_t a1, void *a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  objc_msgSend(v3, "bindNamedParam:toInt64:", ":entityId", objc_msgSend(v2, "rowId"));

}

uint64_t __70__SGSqlEntityStore_CNtoSGContacts__cnContactMatchesForRecordId_found___block_invoke_2(uint64_t a1, void *a2)
{
  _BYTE *v3;
  void *v4;
  unsigned __int8 *v5;

  v3 = *(_BYTE **)(a1 + 40);
  if (v3)
    *v3 = 1;
  objc_msgSend(a2, "getNSStringForColumnName:table:", "cnContactIdentifier", 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v4, "isEqualToString:", CFSTR("NullCNContactIDPlaceholder:Null")) & 1) == 0)
    objc_msgSend(*(id *)(a1 + 32), "addObject:", v4);
  v5 = (unsigned __int8 *)MEMORY[0x1E0D81780];

  return *v5;
}

uint64_t __68__SGSqlEntityStore_CNtoSGContacts__loadAllPrecomputedContactMatches__block_invoke(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD v9[4];

  v9[3] = *MEMORY[0x1E0C80C00];
  v2 = *(void **)(a1 + 32);
  v3 = a2;
  objc_msgSend(v3, "getNSStringForColumnName:table:", "cnContactIdentifier", 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "getNSStringForColumnName:table:", "maxEntityId", 0, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v9[1] = v5;
  objc_msgSend(v3, "getNSStringForColumnName:table:", "entityId", 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v9[2] = v6;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v9, 3);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "addObject:", v7);

  return *MEMORY[0x1E0D81780];
}

uint64_t __64__SGSqlEntityStore_CNtoSGContacts__prematchedContactIdentifiers__block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  NSObject *v5;
  unsigned __int8 *v6;
  uint8_t v8[16];

  v3 = a2;
  objc_msgSend(v3, "getNSStringForColumnName:table:", "cnContactIdentifier", 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    objc_msgSend(*(id *)(a1 + 32), "addObject:", v4);
  }
  else
  {
    sgLogHandle();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v8 = 0;
      _os_log_fault_impl(&dword_1C3607000, v5, OS_LOG_TYPE_FAULT, "Encountered a NULL cnContactIdentifier in cnContactsToSgContacts", v8, 2u);
    }

    if (_PASEvaluateLogFaultAndProbCrashCriteria())
      abort();
  }
  v6 = (unsigned __int8 *)MEMORY[0x1E0D81780];

  return *v6;
}

void __70__SGSqlEntityStore_CNtoSGContacts__deleteAllCNContactMatchesForIdSet___block_invoke(uint64_t a1)
{
  void *v1;
  void *v2;
  _QWORD v3[4];
  id v4;

  v1 = *(void **)(a1 + 40);
  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __70__SGSqlEntityStore_CNtoSGContacts__deleteAllCNContactMatchesForIdSet___block_invoke_2;
  v3[3] = &unk_1E7DB74A0;
  v4 = v1;
  objc_msgSend(v2, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("DELETE FROM cnContactsToSgContacts WHERE entityId IN _pas_nsarray(:ids)"), v3, 0, 0);

}

uint64_t __70__SGSqlEntityStore_CNtoSGContacts__deleteAllCNContactMatchesForIdSet___block_invoke_2(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "bindNamedParam:toNSArray:", ":ids", *(_QWORD *)(a1 + 32));
}

uint64_t __61__SGSqlEntityStore_CNtoSGContacts__deleteAllCNContactMatches__block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("DELETE FROM cnContactsToSgContacts"), 0, 0, 0);
}

void __69__SGSqlEntityStore_CNtoSGContacts__deleteCNContactMatchForContactId___block_invoke(uint64_t a1)
{
  void *v1;
  void *v2;
  _QWORD v3[4];
  id v4;

  v1 = *(void **)(a1 + 40);
  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __69__SGSqlEntityStore_CNtoSGContacts__deleteCNContactMatchForContactId___block_invoke_2;
  v3[3] = &unk_1E7DB74A0;
  v4 = v1;
  objc_msgSend(v2, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("DELETE FROM cnContactsToSgContacts WHERE cnContactIdentifier = :cnContactIdentifier"), v3, 0, 0);

}

uint64_t __69__SGSqlEntityStore_CNtoSGContacts__deleteCNContactMatchForContactId___block_invoke_2(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "bindNamedParam:toNSString:", ":cnContactIdentifier", *(_QWORD *)(a1 + 32));
}

void __85__SGSqlEntityStore_CNtoSGContacts__loadCNContactMatchesForContact_andGetMaxEntityId___block_invoke_2(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  v8 = (id)objc_opt_new();
  objc_msgSend(v8, "setCacheHit:", *(unsigned __int8 *)(a1 + 32));
  objc_msgSend(MEMORY[0x1E0D80F28], "sharedInstance");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "trackScalarForMessage:", v8);

  v3 = objc_alloc(MEMORY[0x1E0CB3940]);
  v4 = *MEMORY[0x1E0D19D98];
  objc_msgSend(v8, "key");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)objc_msgSend(v3, "initWithFormat:", CFSTR("%@.%@"), v4, v5);

  objc_msgSend(v8, "dictionaryRepresentation");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  AnalyticsSendEvent();

}

uint64_t __85__SGSqlEntityStore_CNtoSGContacts__loadCNContactMatchesForContact_andGetMaxEntityId___block_invoke_26(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "bindNamedParam:toNSString:", ":cnContactIdentifier", *(_QWORD *)(a1 + 32));
}

uint64_t __85__SGSqlEntityStore_CNtoSGContacts__loadCNContactMatchesForContact_andGetMaxEntityId___block_invoke_2_27(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  unsigned __int8 *v5;

  v3 = a2;
  **(_QWORD **)(a1 + 40) = objc_msgSend(v3, "getInt64ForColumnName:table:", "maxEntityId", 0);
  objc_msgSend(v3, "getInt64AsNSNumberForColumnName:table:", "entityId", 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if ((objc_msgSend(v4, "isEqualToNumber:", &unk_1E7E0C6B0) & 1) == 0)
    objc_msgSend(*(id *)(a1 + 32), "addObject:", v4);
  v5 = (unsigned __int8 *)MEMORY[0x1E0D81780];

  return *v5;
}

void __85__SGSqlEntityStore_CNtoSGContacts__loadCNContactMatchesForContact_andGetMaxEntityId___block_invoke()
{
  void *v0;
  uint64_t v1;
  void *v2;

  v0 = (void *)MEMORY[0x1C3BD4F6C]();
  objc_msgSend(MEMORY[0x1E0D81598], "autoreleasingSerialQueueWithLabel:qosClass:", "loadCNContactMatchesForContact", 9);
  v1 = objc_claimAutoreleasedReturnValue();
  v2 = (void *)loadCNContactMatchesForContact_andGetMaxEntityId___pasExprOnceResult;
  loadCNContactMatchesForContact_andGetMaxEntityId___pasExprOnceResult = v1;

  objc_autoreleasePoolPop(v0);
}

void __93__SGSqlEntityStore_CNtoSGContacts__writeCNContactMatchForContact_withMatches_andMaxEntityId___block_invoke(_QWORD *a1)
{
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  void *v6;
  _QWORD v7[4];
  id v8;
  id v9;
  uint64_t v10;

  v2 = (void *)a1[5];
  v3 = *(void **)(a1[4] + 8);
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __93__SGSqlEntityStore_CNtoSGContacts__writeCNContactMatchForContact_withMatches_andMaxEntityId___block_invoke_2;
  v7[3] = &unk_1E7DB6B00;
  v4 = v2;
  v6 = (void *)a1[6];
  v5 = a1[7];
  v8 = v4;
  v10 = v5;
  v9 = v6;
  objc_msgSend(v3, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("INSERT OR REPLACE INTO cnContactsToSgContacts (cnContactIdentifier, maxEntityId, entityId) SELECT :cnContactIdentifier, :maxEntityId, value FROM _pas_nsarray(:matches)"), v7, 0, 0);

}

void __93__SGSqlEntityStore_CNtoSGContacts__writeCNContactMatchForContact_withMatches_andMaxEntityId___block_invoke_2(_QWORD *a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;

  v3 = (void *)a1[4];
  v5 = a2;
  objc_msgSend(v3, "identifier");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "bindNamedParam:toNSString:", ":cnContactIdentifier", v4);

  objc_msgSend(v5, "bindNamedParam:toInt64:", ":maxEntityId", a1[6]);
  objc_msgSend(v5, "bindNamedParam:toNSArray:", ":matches", a1[5]);

}

void __66__SGSqlEntityStore_CNtoSGContacts__writeCNContactMissForRecordId___block_invoke(_QWORD *a1)
{
  void *v1;
  void *v2;
  _QWORD v3[4];
  id v4;
  uint64_t v5;

  v3[0] = MEMORY[0x1E0C809B0];
  v3[2] = __66__SGSqlEntityStore_CNtoSGContacts__writeCNContactMissForRecordId___block_invoke_2;
  v3[3] = &unk_1E7DB6EA8;
  v1 = (void *)a1[5];
  v2 = *(void **)(a1[4] + 8);
  v3[1] = 3221225472;
  v5 = a1[6];
  v4 = v1;
  objc_msgSend(v2, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("INSERT OR REPLACE INTO cnContactsToSgContacts (cnContactIdentifier, maxEntityId, entityId) VALUES (:cnContactIdentifier, :maxEntityId, :entityId)"), v3, 0, 0);

}

void __66__SGSqlEntityStore_CNtoSGContacts__writeCNContactMissForRecordId___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  objc_msgSend(v3, "bindNamedParam:toNSString:", ":cnContactIdentifier", CFSTR("NullCNContactIDPlaceholder:Null"));
  objc_msgSend(v3, "bindNamedParam:toInt64:", ":maxEntityId", *(_QWORD *)(a1 + 40));
  objc_msgSend(v3, "bindNamedParam:toInt64:", ":entityId", objc_msgSend(*(id *)(a1 + 32), "internalEntityId"));

}

+ (id)cnContactIdentifiersSpotlightQueryStringForContact:(id)a3
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  id v27;
  void *v28;
  void (**v29)(_QWORD, _QWORD);
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  id v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  uint64_t v43;
  id v44;
  void *v45;
  void (**v46)(_QWORD, _QWORD);
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  id v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  uint64_t v59;
  uint64_t i;
  uint64_t v61;
  id v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  id v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  uint64_t v79;
  void *v80;
  int v81;
  void *v82;
  void *v83;
  uint64_t v84;
  void *v85;
  void *v86;
  void *v87;
  uint64_t v88;
  id v89;
  void (**v90)(_QWORD, _QWORD);
  void *v91;
  void *v92;
  void *v93;
  void *v94;
  void (**v95)(_QWORD, _QWORD, _QWORD);
  void *v96;
  id v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  id v103;
  void *v104;
  void *v105;
  void *v106;
  void *v107;
  void *v108;
  id v109;
  void *v110;
  void *v111;
  void *v112;
  void *v113;
  void *v114;
  void *v115;
  uint64_t v116;
  id v117;
  void *v118;
  void (**v119)(_QWORD, _QWORD);
  void *v120;
  void *v121;
  void *v122;
  void *v123;
  void *v124;
  id v125;
  void *v126;
  void *v127;
  void *v128;
  void *v129;
  void *v130;
  void *v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t j;
  void *v137;
  void *v138;
  void *v139;
  void *v140;
  uint64_t k;
  void *v142;
  __CFString *v143;
  void *v144;
  CFIndex Length;
  const __CFString *CharactersPtr;
  const char *CStringPtr;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  UniChar v153;
  uint64_t v154;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  void *v160;
  void *v161;
  int v162;
  id v163;
  void *v164;
  void *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  const __CFString *v169;
  uint64_t v170;
  void *v171;
  void *v172;
  uint64_t v173;
  void *v174;
  void *v175;
  id v176;
  void *v177;
  void *v178;
  void *v179;
  void *v180;
  const __CFString *v181;
  uint64_t v182;
  void *v183;
  void *v184;
  void *v185;
  void *v186;
  void *v187;
  void *v188;
  void *v189;
  void *v190;
  NSObject *v191;
  void *v193;
  void *v194;
  void *v195;
  SEL v196;
  void *v197;
  id v198;
  void *v199;
  id v200;
  id v201;
  id v202;
  void *v203;
  uint64_t v204;
  void *v205;
  void *v206;
  void *v207;
  id obj;
  id obja;
  id objb;
  id v211;
  id v212;
  id v213;
  uint64_t v214;
  uint64_t v215;
  void *v216;
  void *v217;
  uint64_t v218;
  void *v219;
  void (**v220)(_QWORD, _QWORD, _QWORD);
  void (**v221)(_QWORD, _QWORD);
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  UniChar v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  _QWORD v239[4];
  id v240;
  _QWORD v241[4];
  id v242;
  id v243;
  _BYTE v244[128];
  UniChar buffer[16];
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  CFStringRef theString[2];
  __int128 v253;
  __int128 v254;
  uint64_t v255;
  _BYTE v256[128];
  _BYTE v257[128];
  _BYTE v258[128];
  uint64_t v259;
  CFRange v260;

  v259 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = (void *)MEMORY[0x1C3BD4F6C]();
  v206 = v5;
  objc_msgSend(v5, "name");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v7)
  {
    v18 = 0;
    goto LABEL_100;
  }
  v196 = a2;
  v198 = a1;
  v203 = v6;
  v8 = (void *)objc_opt_new();
  objc_msgSend(v8, "UUIDString");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v9, "stringByAppendingString:", CFSTR("*"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "stringByAppendingString:", CFSTR("?"));
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = MEMORY[0x1E0C809B0];
  v241[0] = MEMORY[0x1E0C809B0];
  v241[1] = 3221225472;
  v241[2] = __87__SGSqlEntityStore_CNtoSGContacts__cnContactIdentifiersSpotlightQueryStringForContact___block_invoke;
  v241[3] = &unk_1E7DB5CB8;
  v202 = v10;
  v242 = v202;
  v201 = v11;
  v243 = v201;
  v221 = (void (**)(_QWORD, _QWORD))MEMORY[0x1C3BD5158](v241);
  v239[0] = v12;
  v239[1] = 3221225472;
  v239[2] = __87__SGSqlEntityStore_CNtoSGContacts__cnContactIdentifiersSpotlightQueryStringForContact___block_invoke_2;
  v239[3] = &unk_1E7DAFDA0;
  v200 = v9;
  v240 = v200;
  v220 = (void (**)(_QWORD, _QWORD, _QWORD))MEMORY[0x1C3BD5158](v239);
  objc_msgSend(v7, "firstName");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend(v13, "length");

  if (v14)
  {
    objc_msgSend(v7, "firstName");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    +[SGNicknames nicknamesForName:](SGNicknames, "nicknamesForName:", v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();

    if (v16)
    {
      objc_msgSend(v16, "objectsPassingTest:", &__block_literal_global_151);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "allObjects");
      v205 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v205 = (void *)MEMORY[0x1E0C9AA60];
    }

  }
  else
  {
    v205 = (void *)MEMORY[0x1E0C9AA60];
  }
  v217 = (void *)objc_opt_new();
  objc_msgSend(v7, "fullName");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = objc_msgSend(v19, "length");

  v207 = v7;
  if (v20)
  {
    objc_msgSend(v7, "fullName");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *))v221)[2](v221, v21);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *, const __CFString *))v220)[2](v220, v22, CFSTR("cd"));
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v217, "addObject:", v23);

    objc_msgSend(v7, "firstName");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v24, "length"))
    {
      objc_msgSend(v7, "lastName");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      v26 = objc_msgSend(v25, "length");

      if (!v26)
        goto LABEL_14;
      v27 = objc_alloc(MEMORY[0x1E0CB3940]);
      objc_msgSend(v7, "firstName");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      v29 = v221;
      ((void (**)(_QWORD, void *))v221)[2](v221, v28);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "lastName");
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, void *))v29)[2](v29, v31);
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      v33 = (void *)objc_msgSend(v27, "initWithFormat:", CFSTR("%@ %@"), v30, v32);
      ((void (**)(_QWORD, void *, const __CFString *))v220)[2](v220, v33, CFSTR("cd"));
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v217, "addObject:", v34);

      v35 = objc_alloc(MEMORY[0x1E0CB3940]);
      objc_msgSend(v7, "firstName");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, void *))v29)[2](v29, v24);
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "lastName");
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, void *))v29)[2](v29, v37);
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      v39 = (void *)objc_msgSend(v35, "initWithFormat:", CFSTR("%@ * %@"), v36, v38);
      ((void (**)(_QWORD, void *, const __CFString *))v220)[2](v220, v39, CFSTR("cd"));
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v217, "addObject:", v40);

    }
LABEL_14:
    objc_msgSend(v7, "firstName");
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v41, "length"))
    {
      objc_msgSend(v7, "middleName");
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      v43 = objc_msgSend(v42, "length");

      if (!v43)
        goto LABEL_18;
      v44 = objc_alloc(MEMORY[0x1E0CB3940]);
      objc_msgSend(v7, "firstName");
      v45 = (void *)objc_claimAutoreleasedReturnValue();
      v46 = v221;
      ((void (**)(_QWORD, void *))v221)[2](v221, v45);
      v47 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "middleName");
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, void *))v46)[2](v46, v48);
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      v50 = (void *)objc_msgSend(v44, "initWithFormat:", CFSTR("%@ %@"), v47, v49);
      ((void (**)(_QWORD, void *, const __CFString *))v220)[2](v220, v50, CFSTR("cd"));
      v51 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v217, "addObject:", v51);

      v52 = objc_alloc(MEMORY[0x1E0CB3940]);
      objc_msgSend(v7, "firstName");
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, void *))v46)[2](v46, v41);
      v53 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "middleName");
      v54 = (void *)objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, void *))v46)[2](v46, v54);
      v55 = (void *)objc_claimAutoreleasedReturnValue();
      v56 = (void *)objc_msgSend(v52, "initWithFormat:", CFSTR("%@ %@ *"), v53, v55);
      ((void (**)(_QWORD, void *, const __CFString *))v220)[2](v220, v56, CFSTR("cd"));
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v217, "addObject:", v57);

    }
LABEL_18:
    objc_msgSend(v7, "lastName");
    v58 = (void *)objc_claimAutoreleasedReturnValue();
    v59 = objc_msgSend(v58, "length");

    if (v59)
    {
      v237 = 0u;
      v238 = 0u;
      v235 = 0u;
      v236 = 0u;
      obj = v205;
      v214 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v235, v258, 16);
      if (v214)
      {
        v211 = *(id *)v236;
        do
        {
          for (i = 0; i != v214; ++i)
          {
            if (*(id *)v236 != v211)
              objc_enumerationMutation(obj);
            v61 = *(_QWORD *)(*((_QWORD *)&v235 + 1) + 8 * i);
            v62 = objc_alloc(MEMORY[0x1E0CB3940]);
            v221[2](v221, v61);
            v63 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v7, "lastName");
            v64 = (void *)objc_claimAutoreleasedReturnValue();
            ((void (**)(_QWORD, void *))v221)[2](v221, v64);
            v65 = (void *)objc_claimAutoreleasedReturnValue();
            v66 = (void *)objc_msgSend(v62, "initWithFormat:", CFSTR("%@ %@"), v63, v65);
            ((void (**)(_QWORD, void *, const __CFString *))v220)[2](v220, v66, CFSTR("cd"));
            v67 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v217, "addObject:", v67);

            v68 = objc_alloc(MEMORY[0x1E0CB3940]);
            v221[2](v221, v61);
            v69 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v7, "lastName");
            v70 = (void *)objc_claimAutoreleasedReturnValue();
            ((void (**)(_QWORD, void *))v221)[2](v221, v70);
            v71 = (void *)objc_claimAutoreleasedReturnValue();
            v72 = (void *)objc_msgSend(v68, "initWithFormat:", CFSTR("%@ * %@"), v69, v71);
            ((void (**)(_QWORD, void *, const __CFString *))v220)[2](v220, v72, CFSTR("cd"));
            v73 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v217, "addObject:", v73);

          }
          v214 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v235, v258, 16);
        }
        while (v214);
      }

    }
  }
  __87__SGSqlEntityStore_CNtoSGContacts__cnContactIdentifiersSpotlightQueryStringForContact___block_invoke_3(CFSTR("kMDItemDisplayName"), v217);
  v204 = objc_claimAutoreleasedReturnValue();

  v74 = (void *)objc_opt_new();
  objc_msgSend(v7, "fullName");
  v75 = (void *)objc_claimAutoreleasedReturnValue();
  ((void (**)(_QWORD, void *))v221)[2](v221, v75);
  v76 = (void *)objc_claimAutoreleasedReturnValue();
  ((void (**)(_QWORD, void *, const __CFString *))v220)[2](v220, v76, CFSTR("cdwt"));
  v77 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v74, "addObject:", v77);

  objc_msgSend(v7, "firstName");
  v78 = (void *)objc_claimAutoreleasedReturnValue();
  v79 = objc_msgSend(v78, "length");

  if (v79)
  {
    objc_msgSend(v7, "firstName");
    v80 = (void *)objc_claimAutoreleasedReturnValue();
    v81 = objc_msgSend(v80, "characterAtIndex:", 0) & 0xFC00;

    objc_msgSend(v7, "firstName");
    v82 = (void *)objc_claimAutoreleasedReturnValue();
    v83 = v82;
    if (v81 == 55296)
      v84 = 2;
    else
      v84 = 1;
    objc_msgSend(v82, "substringToIndex:", v84);
    v85 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v85 = 0;
  }
  objc_msgSend(v7, "firstName");
  v86 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v86, "length"))
  {
    objc_msgSend(v7, "lastName");
    v87 = (void *)objc_claimAutoreleasedReturnValue();
    v88 = objc_msgSend(v87, "length");

    if (!v88)
      goto LABEL_39;
    if (!v85)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v194 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v194, "handleFailureInMethod:object:file:lineNumber:description:", v196, v198, CFSTR("SGSqlEntityStore+CNtoSGContacts.m"), 723, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("firstInitial"));

    }
    v89 = objc_alloc(MEMORY[0x1E0CB3940]);
    v90 = v221;
    ((void (**)(_QWORD, void *))v221)[2](v221, v85);
    v91 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "lastName");
    v92 = (void *)objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *))v90)[2](v90, v92);
    v93 = (void *)objc_claimAutoreleasedReturnValue();
    v94 = (void *)objc_msgSend(v89, "initWithFormat:", CFSTR("%@ %@"), v91, v93);
    v95 = v220;
    ((void (**)(_QWORD, void *, const __CFString *))v220)[2](v220, v94, CFSTR("cd"));
    v96 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v74, "addObject:", v96);

    v97 = objc_alloc(MEMORY[0x1E0CB3940]);
    ((void (**)(_QWORD, void *))v90)[2](v90, v85);
    v98 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v207, "lastName");
    v99 = (void *)objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *))v90)[2](v90, v99);
    v100 = (void *)objc_claimAutoreleasedReturnValue();
    v101 = (void *)objc_msgSend(v97, "initWithFormat:", CFSTR("%@ * %@"), v98, v100);
    ((void (**)(_QWORD, void *, const __CFString *))v95)[2](v95, v101, CFSTR("cd"));
    v102 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v74, "addObject:", v102);

    v103 = objc_alloc(MEMORY[0x1E0CB3940]);
    ((void (**)(_QWORD, void *))v90)[2](v90, v85);
    v104 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v207, "lastName");
    v105 = (void *)objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *))v90)[2](v90, v105);
    v106 = (void *)objc_claimAutoreleasedReturnValue();
    v107 = (void *)objc_msgSend(v103, "initWithFormat:", CFSTR("%@. %@"), v104, v106);
    ((void (**)(_QWORD, void *, const __CFString *))v95)[2](v95, v107, CFSTR("cd"));
    v108 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v74, "addObject:", v108);

    v109 = objc_alloc(MEMORY[0x1E0CB3940]);
    ((void (**)(_QWORD, void *))v90)[2](v90, v85);
    v86 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v207, "lastName");
    v110 = (void *)objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *))v90)[2](v90, v110);
    v111 = (void *)objc_claimAutoreleasedReturnValue();
    v112 = (void *)objc_msgSend(v109, "initWithFormat:", CFSTR("%@. * %@"), v86, v111);
    ((void (**)(_QWORD, void *, const __CFString *))v95)[2](v95, v112, CFSTR("cd"));
    v113 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v74, "addObject:", v113);

    v7 = v207;
  }

LABEL_39:
  objc_msgSend(v7, "firstName");
  v114 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v114, "length"))
  {
LABEL_42:

    goto LABEL_43;
  }
  objc_msgSend(v7, "middleName");
  v115 = (void *)objc_claimAutoreleasedReturnValue();
  v116 = objc_msgSend(v115, "length");

  if (v116)
  {
    v117 = objc_alloc(MEMORY[0x1E0CB3940]);
    objc_msgSend(v7, "firstName");
    v118 = (void *)objc_claimAutoreleasedReturnValue();
    v119 = v221;
    ((void (**)(_QWORD, void *))v221)[2](v221, v118);
    v120 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "middleName");
    v121 = (void *)objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *))v119)[2](v119, v121);
    v122 = (void *)objc_claimAutoreleasedReturnValue();
    v123 = (void *)objc_msgSend(v117, "initWithFormat:", CFSTR("%@ %@"), v120, v122);
    ((void (**)(_QWORD, void *, const __CFString *))v220)[2](v220, v123, CFSTR("cd"));
    v124 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v74, "addObject:", v124);

    v125 = objc_alloc(MEMORY[0x1E0CB3940]);
    objc_msgSend(v207, "firstName");
    v114 = (void *)objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *))v119)[2](v119, v114);
    v126 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v207, "middleName");
    v127 = (void *)objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *))v119)[2](v119, v127);
    v128 = (void *)objc_claimAutoreleasedReturnValue();
    v129 = (void *)objc_msgSend(v125, "initWithFormat:", CFSTR("%@ %@ *"), v126, v128);
    ((void (**)(_QWORD, void *, const __CFString *))v220)[2](v220, v129, CFSTR("cd"));
    v130 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v74, "addObject:", v130);

    goto LABEL_42;
  }
LABEL_43:

  __87__SGSqlEntityStore_CNtoSGContacts__cnContactIdentifiersSpotlightQueryStringForContact___block_invoke_3(CFSTR("kMDItemDisplayName"), v74);
  v199 = (void *)objc_claimAutoreleasedReturnValue();

  v131 = (void *)objc_opt_new();
  v231 = 0u;
  v232 = 0u;
  v233 = 0u;
  v234 = 0u;
  objc_msgSend(v206, "emailAddresses");
  v132 = (void *)objc_claimAutoreleasedReturnValue();
  v133 = objc_msgSend(v132, "countByEnumeratingWithState:objects:count:", &v231, v257, 16);
  if (v133)
  {
    v134 = v133;
    v135 = *(_QWORD *)v232;
    do
    {
      for (j = 0; j != v134; ++j)
      {
        if (*(_QWORD *)v232 != v135)
          objc_enumerationMutation(v132);
        objc_msgSend(*(id *)(*((_QWORD *)&v231 + 1) + 8 * j), "emailAddress");
        v137 = (void *)objc_claimAutoreleasedReturnValue();
        ((void (**)(_QWORD, void *))v221)[2](v221, v137);
        v138 = (void *)objc_claimAutoreleasedReturnValue();
        ((void (**)(_QWORD, void *, const __CFString *))v220)[2](v220, v138, CFSTR("c"));
        v139 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v131, "addObject:", v139);

      }
      v134 = objc_msgSend(v132, "countByEnumeratingWithState:objects:count:", &v231, v257, 16);
    }
    while (v134);
  }

  __87__SGSqlEntityStore_CNtoSGContacts__cnContactIdentifiersSpotlightQueryStringForContact___block_invoke_3(CFSTR("kMDItemEmailAddresses"), v131);
  v197 = (void *)objc_claimAutoreleasedReturnValue();

  obja = (id)objc_opt_new();
  v140 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", 10);
  v227 = 0u;
  v228 = 0u;
  v229 = 0u;
  v230 = 0u;
  objc_msgSend(v206, "phones");
  v212 = (id)objc_claimAutoreleasedReturnValue();
  v218 = objc_msgSend(v212, "countByEnumeratingWithState:objects:count:", &v227, v256, 16);
  if (v218)
  {
    v215 = *(_QWORD *)v228;
    do
    {
      for (k = 0; k != v218; ++k)
      {
        if (*(_QWORD *)v228 != v215)
          objc_enumerationMutation(v212);
        v142 = *(void **)(*((_QWORD *)&v227 + 1) + 8 * k);
        objc_msgSend(v140, "removeAllObjects");
        objc_msgSend(v142, "phoneNumber");
        v143 = (__CFString *)objc_claimAutoreleasedReturnValue();
        objc_opt_self();
        v144 = (void *)objc_claimAutoreleasedReturnValue();

        if (v144)
        {
          v255 = 0;
          v253 = 0u;
          v254 = 0u;
          v251 = 0u;
          *(_OWORD *)theString = 0u;
          v249 = 0u;
          v250 = 0u;
          v247 = 0u;
          v248 = 0u;
          v246 = 0u;
          memset(buffer, 0, sizeof(buffer));
          Length = CFStringGetLength(v143);
          theString[0] = v143;
          *((_QWORD *)&v253 + 1) = 0;
          *(_QWORD *)&v254 = Length;
          CharactersPtr = (const __CFString *)CFStringGetCharactersPtr(v143);
          CStringPtr = 0;
          theString[1] = CharactersPtr;
          if (!CharactersPtr)
            CStringPtr = CFStringGetCStringPtr(v143, 0x600u);
          *(_QWORD *)&v253 = CStringPtr;
          *((_QWORD *)&v254 + 1) = 0;
          v255 = 0;
          if (Length >= 1)
          {
            v148 = 0;
            v149 = 0;
            v150 = 64;
            do
            {
              if ((unint64_t)v149 >= 4)
                v151 = 4;
              else
                v151 = v149;
              v226 = 0;
              v152 = v254;
              if ((uint64_t)v254 > v149)
              {
                if (theString[1])
                {
                  v153 = *((_WORD *)&theString[1]->isa + v149 + *((_QWORD *)&v253 + 1));
                }
                else if ((_QWORD)v253)
                {
                  v153 = *(char *)(v253 + *((_QWORD *)&v253 + 1) + v149);
                }
                else
                {
                  v154 = *((_QWORD *)&v254 + 1);
                  if (v255 <= v149 || *((_QWORD *)&v254 + 1) > v149)
                  {
                    v156 = v151 + v148;
                    v157 = v150 - v151;
                    v158 = v149 - v151;
                    v159 = v158 + 64;
                    if (v158 + 64 >= (uint64_t)v254)
                      v159 = v254;
                    *((_QWORD *)&v254 + 1) = v158;
                    v255 = v159;
                    if ((uint64_t)v254 >= v157)
                      v152 = v157;
                    v260.length = v152 + v156;
                    v260.location = v158 + *((_QWORD *)&v253 + 1);
                    CFStringGetCharacters(theString[0], v260, buffer);
                    v154 = *((_QWORD *)&v254 + 1);
                  }
                  v153 = buffer[v149 - v154];
                }
                v226 = v153;
                if ((unsigned __int16)(v153 - 48) <= 9u)
                {
                  v160 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithBytes:length:encoding:", &v226, 1, 1);
                  objc_msgSend(v140, "addObject:", v160);

                }
              }
              ++v149;
              --v148;
              ++v150;
            }
            while (Length != v149);
          }
        }

        if ((unint64_t)objc_msgSend(v140, "count") >= 4)
        {
          objc_msgSend(v140, "objectAtIndexedSubscript:", 0);
          v161 = (void *)objc_claimAutoreleasedReturnValue();
          v162 = objc_msgSend(v161, "isEqualToString:", CFSTR("1"));

          if (v162)
            objc_msgSend(v140, "removeObjectAtIndex:", 0);
          v163 = objc_alloc(MEMORY[0x1E0CB3940]);
          objc_msgSend(v140, "_pas_componentsJoinedByString:", CFSTR("*"));
          v164 = (void *)objc_claimAutoreleasedReturnValue();
          v165 = (void *)objc_msgSend(v163, "initWithFormat:", CFSTR("\"*%@*\"cd"), v164);

          objc_msgSend(obja, "addObject:", v165);
        }
      }
      v218 = objc_msgSend(v212, "countByEnumeratingWithState:objects:count:", &v227, v256, 16);
    }
    while (v218);
  }

  __87__SGSqlEntityStore_CNtoSGContacts__cnContactIdentifiersSpotlightQueryStringForContact___block_invoke_3(CFSTR("kMDItemPhoneNumbers"), obja);
  v195 = (void *)objc_claimAutoreleasedReturnValue();

  v219 = (void *)objc_opt_new();
  v222 = 0u;
  v223 = 0u;
  v224 = 0u;
  v225 = 0u;
  objc_msgSend(v206, "postalAddresses");
  v213 = (id)objc_claimAutoreleasedReturnValue();
  v166 = objc_msgSend(v213, "countByEnumeratingWithState:objects:count:", &v222, v244, 16);
  if (v166)
  {
    v167 = v166;
    v168 = *(_QWORD *)v223;
    v169 = CFSTR("cdwt");
    do
    {
      v170 = 0;
      objb = (id)v167;
      do
      {
        if (*(_QWORD *)v223 != v168)
          objc_enumerationMutation(v213);
        v171 = *(void **)(*((_QWORD *)&v222 + 1) + 8 * v170);
        objc_msgSend(v171, "components");
        v172 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v172, "street");
        v173 = objc_claimAutoreleasedReturnValue();
        if (v173)
        {
          v174 = (void *)v173;
          objc_msgSend(v172, "city");
          v175 = (void *)objc_claimAutoreleasedReturnValue();

          if (v175)
          {
            v176 = objc_alloc(MEMORY[0x1E0CB3940]);
            objc_msgSend(v172, "street");
            v216 = (void *)objc_claimAutoreleasedReturnValue();
            ((void (**)(_QWORD, void *))v221)[2](v221, v216);
            v177 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v172, "city");
            v178 = (void *)objc_claimAutoreleasedReturnValue();
            ((void (**)(_QWORD, void *))v221)[2](v221, v178);
            v179 = (void *)objc_claimAutoreleasedReturnValue();
            v180 = (void *)objc_msgSend(v176, "initWithFormat:", CFSTR("%@ %@"), v177, v179);
            ((void (**)(_QWORD, void *, const __CFString *))v220)[2](v220, v180, v169);
            v181 = v169;
            v182 = v168;
            v183 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v219, "addObject:", v183);

            v168 = v182;
            v169 = v181;

            v167 = (uint64_t)objb;
          }
        }
        objc_msgSend(v171, "address");
        v184 = (void *)objc_claimAutoreleasedReturnValue();
        ((void (**)(_QWORD, void *))v221)[2](v221, v184);
        v185 = (void *)objc_claimAutoreleasedReturnValue();
        ((void (**)(_QWORD, void *, const __CFString *))v220)[2](v220, v185, v169);
        v186 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v219, "addObject:", v186);

        ++v170;
      }
      while (v167 != v170);
      v167 = objc_msgSend(v213, "countByEnumeratingWithState:objects:count:", &v222, v244, 16);
    }
    while (v167);
  }

  __87__SGSqlEntityStore_CNtoSGContacts__cnContactIdentifiersSpotlightQueryStringForContact___block_invoke_3(CFSTR("kMDItemAuthorAddresses"), v219);
  v187 = (void *)objc_claimAutoreleasedReturnValue();

  v188 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("(%@ || %@ || %@)"), v197, v195, v187);
  v189 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("(%@ && %@)"), v199, v188);
  v190 = (void *)v204;
  v18 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("%@ && (%@ || %@)"), CFSTR("true"), v204, v189);
  sgPrivateLogHandle();
  v191 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v191, OS_LOG_TYPE_DEBUG))
  {
    objc_msgSend(v206, "name");
    v193 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buffer = 138412546;
    *(_QWORD *)&buffer[2] = v193;
    buffer[6] = 2112;
    *(_QWORD *)&buffer[7] = v18;
    _os_log_debug_impl(&dword_1C3607000, v191, OS_LOG_TYPE_DEBUG, "SG2CN query for contact %@:\n\n%@", (uint8_t *)buffer, 0x16u);

    v190 = (void *)v204;
  }

  v6 = v203;
  v7 = v207;
LABEL_100:

  objc_autoreleasePoolPop(v6);
  return v18;
}

+ (id)cnContactIdentifiersForContact:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  id v16;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  void *v21;
  id v22;
  id location;
  _QWORD v24[4];
  id v25;
  id v26;
  _QWORD v27[4];
  id v28;
  _QWORD v29[3];

  v29[2] = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(a1, "cnContactIdentifiersSpotlightQueryStringForContact:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    v6 = (void *)objc_opt_new();
    v7 = (void *)objc_opt_new();
    objc_msgSend(v7, "setLowPriority:", qos_class_self() < 0x12);
    objc_msgSend(v7, "setFetchAttributes:", MEMORY[0x1E0C9AA60]);
    objc_msgSend(v7, "setReason:", CFSTR("reason:SG2CN-candidate-search-1; code:9"));
    v8 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CA6B28]), "initWithQueryString:context:", v5, v7);
    objc_msgSend(v8, "setBundleIDs:", &unk_1E7E10980);
    objc_msgSend(v8, "setPrivateIndex:", 0);
    if (objc_msgSend(MEMORY[0x1E0D81590], "isDeviceFormattedForProtection"))
    {
      v9 = *MEMORY[0x1E0CB2AE0];
      v29[0] = *MEMORY[0x1E0CB2AC0];
      v29[1] = v9;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v29, 2);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "setProtectionClasses:", v10);

    }
    v11 = (void *)objc_opt_new();
    v12 = MEMORY[0x1E0C809B0];
    v27[0] = MEMORY[0x1E0C809B0];
    v27[1] = 3221225472;
    v27[2] = __67__SGSqlEntityStore_CNtoSGContacts__cnContactIdentifiersForContact___block_invoke;
    v27[3] = &unk_1E7DB6610;
    v13 = v11;
    v28 = v13;
    objc_msgSend(v8, "setFoundItemsHandler:", v27);
    v24[0] = v12;
    v24[1] = 3221225472;
    v24[2] = __67__SGSqlEntityStore_CNtoSGContacts__cnContactIdentifiersForContact___block_invoke_199;
    v24[3] = &unk_1E7DAFE08;
    v14 = v6;
    v25 = v14;
    v15 = v13;
    v26 = v15;
    objc_msgSend(v8, "setCompletionHandler:", v24);
    location = 0;
    objc_initWeak(&location, v8);
    v18 = v12;
    v19 = 3221225472;
    v20 = __67__SGSqlEntityStore_CNtoSGContacts__cnContactIdentifiersForContact___block_invoke_201;
    v21 = &unk_1E7DAFE30;
    objc_copyWeak(&v22, &location);
    objc_msgSend(v14, "wait:", &v18);
    objc_msgSend(v8, "start", v18, v19, v20, v21);
    v16 = v14;
    objc_destroyWeak(&v22);
    objc_destroyWeak(&location);

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0D19830], "createWithImmediateResult:error:", MEMORY[0x1E0C9AA60], 0);
    v16 = (id)objc_claimAutoreleasedReturnValue();
  }

  return v16;
}

void __67__SGSqlEntityStore_CNtoSGContacts__cnContactIdentifiersForContact___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint8_t buf[4];
  void *v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v3 = a2;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v14, v20, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v15;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v15 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * v7);
        v9 = (void *)MEMORY[0x1C3BD4F6C]();
        sgLogHandle();
        v10 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
        {
          objc_msgSend(v8, "uniqueIdentifier");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412290;
          v19 = v13;
          _os_log_debug_impl(&dword_1C3607000, v10, OS_LOG_TYPE_DEBUG, "SG2CN found identifier: %@", buf, 0xCu);

        }
        v11 = *(void **)(a1 + 32);
        objc_msgSend(v8, "uniqueIdentifier");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "addCNContactIdentifier:", v12);

        objc_autoreleasePoolPop(v9);
        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v14, v20, 16);
    }
    while (v5);
  }

}

void __67__SGSqlEntityStore_CNtoSGContacts__cnContactIdentifiersForContact___block_invoke_199(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  int v9;
  id v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  sgLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v9 = 138412290;
      v10 = v3;
      _os_log_error_impl(&dword_1C3607000, v5, OS_LOG_TYPE_ERROR, "SG2CN error: %@", (uint8_t *)&v9, 0xCu);
    }

    objc_msgSend(*(id *)(a1 + 32), "fail:", v3);
  }
  else
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      objc_msgSend(*(id *)(a1 + 40), "proxyArray");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = 138412290;
      v10 = v8;
      _os_log_debug_impl(&dword_1C3607000, v5, OS_LOG_TYPE_DEBUG, "SG2CN all found identifiers: %@", (uint8_t *)&v9, 0xCu);

    }
    v6 = *(void **)(a1 + 32);
    objc_msgSend(*(id *)(a1 + 40), "proxyArray");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "succeed:", v7);

  }
}

void __67__SGSqlEntityStore_CNtoSGContacts__cnContactIdentifiersForContact___block_invoke_201(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id WeakRetained;

  if (a3)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    objc_msgSend(WeakRetained, "cancel");

  }
}

id __87__SGSqlEntityStore_CNtoSGContacts__cnContactIdentifiersSpotlightQueryStringForContact___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = (void *)MEMORY[0x1C3BD4F6C]();
  _PASRepairString();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "stringByReplacingOccurrencesOfString:withString:", CFSTR("*"), *(_QWORD *)(a1 + 32));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "stringByReplacingOccurrencesOfString:withString:", CFSTR("?"), *(_QWORD *)(a1 + 40));
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  objc_autoreleasePoolPop(v2);
  return v5;
}

id __87__SGSqlEntityStore_CNtoSGContacts__cnContactIdentifiersSpotlightQueryStringForContact___block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  v5 = a2;
  v6 = a3;
  v7 = (void *)MEMORY[0x1C3BD4F6C]();
  objc_msgSend(v5, "stringByReplacingOccurrencesOfString:withString:", CFSTR("\\"), CFSTR("\\\\"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "stringByReplacingOccurrencesOfString:withString:", CFSTR("\"), CFSTR("\\\"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v9, "stringByReplacingOccurrencesOfString:withString:", CFSTR("'"), CFSTR("\\'"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v10, "stringByReplacingOccurrencesOfString:withString:", *(_QWORD *)(a1 + 32), CFSTR("\\"));
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  v12 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("\"%@\"%@"), v11, v6);
  objc_autoreleasePoolPop(v7);

  return v12;
}

__CFString *__87__SGSqlEntityStore_CNtoSGContacts__cnContactIdentifiersSpotlightQueryStringForContact___block_invoke_3(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;
  void *v9;
  __CFString *v10;
  uint64_t v12;
  id v13;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v4, "count"))
  {
    v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E60]), "initWithArray:", v4);
    objc_msgSend(v5, "allObjects");
    v6 = objc_claimAutoreleasedReturnValue();

    v12 = MEMORY[0x1E0C809B0];
    v13 = v3;
    sgMap();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_alloc(MEMORY[0x1E0CB3940]);
    objc_msgSend(v7, "_pas_componentsJoinedByString:", CFSTR(" || "));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = (__CFString *)objc_msgSend(v8, "initWithFormat:", CFSTR("(%@)"), v9, v12, 3221225472, __87__SGSqlEntityStore_CNtoSGContacts__cnContactIdentifiersSpotlightQueryStringForContact___block_invoke_4, &unk_1E7DB5D58);

    v4 = (id)v6;
  }
  else
  {
    v10 = CFSTR("false");
  }

  return v10;
}

id __87__SGSqlEntityStore_CNtoSGContacts__cnContactIdentifiersSpotlightQueryStringForContact___block_invoke_4(uint64_t a1, void *a2)
{
  objc_class *v3;
  id v4;
  void *v5;

  v3 = (objc_class *)MEMORY[0x1E0CB3940];
  v4 = a2;
  v5 = (void *)objc_msgSend([v3 alloc], "initWithFormat:", CFSTR("(%@ == %@)"), *(_QWORD *)(a1 + 32), v4);

  return v5;
}

BOOL __87__SGSqlEntityStore_CNtoSGContacts__cnContactIdentifiersSpotlightQueryStringForContact___block_invoke_5(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "length") != 0;
}

- (id)initForRawDatabaseAccessWithEntityPath:(id)a3 snippetsPath:(id)a4 error:(id *)a5
{
  id v8;
  id v9;
  SGSqlEntityStore *v10;
  uint64_t v11;
  SGSqliteDatabase *db;
  NSObject *v13;
  uint64_t v14;
  SGSqliteDatabase *snippetDb;
  NSObject *v16;
  uint8_t v18[16];
  objc_super v19;

  v8 = a3;
  v9 = a4;
  v19.receiver = self;
  v19.super_class = (Class)SGSqlEntityStore;
  v10 = -[SGSqlEntityStore init](&v19, sel_init);
  if (v10)
  {
    +[SGSqlEntityStore initializeDatabase:withProtection:sharedLock:newDatabaseCreated:](SGSqlEntityStore, "initializeDatabase:withProtection:sharedLock:newDatabaseCreated:", v8, 0, 0, 0);
    v11 = objc_claimAutoreleasedReturnValue();
    db = v10->_db;
    v10->_db = (SGSqliteDatabase *)v11;

    if (!v10->_db)
    {
      sgLogHandle();
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v18 = 0;
        _os_log_error_impl(&dword_1C3607000, v13, OS_LOG_TYPE_ERROR, "unable to initialize entity DB", v18, 2u);
      }

      if (a5)
      {
        objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0D19AE8], -1, &unk_1E7E11590);
        *a5 = (id)objc_claimAutoreleasedReturnValue();
      }
    }
    +[SGSqlEntityStore initializeDatabase:withProtection:sharedLock:newDatabaseCreated:](SGSqlEntityStore, "initializeDatabase:withProtection:sharedLock:newDatabaseCreated:", v9, 1, 0, 0);
    v14 = objc_claimAutoreleasedReturnValue();
    snippetDb = v10->_snippetDb;
    v10->_snippetDb = (SGSqliteDatabase *)v14;

    if (!v10->_snippetDb)
    {
      sgLogHandle();
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v18 = 0;
        _os_log_error_impl(&dword_1C3607000, v16, OS_LOG_TYPE_ERROR, "unable to initialize snippets DB", v18, 2u);
      }

      if (a5)
      {
        objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0D19AE8], -1, &unk_1E7E115B8);
        *a5 = (id)objc_claimAutoreleasedReturnValue();
      }
    }
    v10->_serializedContactsLimit = 3500;
  }

  return v10;
}

- (id)initForDbStatsOnlyWithError:(id *)a3
{
  void *v5;
  void *v6;
  int v7;
  void *v8;
  void *v9;
  SGSqlEntityStore *v10;

  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  +[SGSqlEntityStore defaultPathCreatingSuggestionsDirectoryIfNeeded:](SGSqlEntityStore, "defaultPathCreatingSuggestionsDirectoryIfNeeded:", 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v5, "fileExistsAtPath:isDirectory:", v6, 0);

  if (v7)
  {
    +[SGSqlEntityStore defaultPath](SGSqlEntityStore, "defaultPath");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    +[SGSqlEntityStore defaultSnippetPath](SGSqlEntityStore, "defaultSnippetPath");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    self = (SGSqlEntityStore *)-[SGSqlEntityStore initForRawDatabaseAccessWithEntityPath:snippetsPath:error:](self, "initForRawDatabaseAccessWithEntityPath:snippetsPath:error:", v8, v9, a3);

    v10 = self;
  }
  else if (a3)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2FE0], 2, 0);
    v10 = 0;
    *a3 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v10 = 0;
  }

  return v10;
}

- (BOOL)_runInitMigrationTasks:(id)a3 noMigrate:(BOOL)a4
{
  id v7;
  SGDatabaseJournal *v8;
  SGDatabaseJournal *snippetsJournal;
  SGDatabaseJournal *v10;
  SGDatabaseJournal *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  SGJournal *journal;
  SGJournalEntry *v16;
  SGSqliteDatabase *v17;
  SGSqliteDatabase *db;
  SGJournal *v19;
  SGJournalEntry *v20;
  SGSqliteDatabase *v21;
  SGSqliteDatabase *snippetDb;
  int64_t v23;
  NSObject *v24;
  BOOL v25;
  NSObject *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  NSObject *v30;
  NSObject *v31;
  NSObject *v32;
  NSObject *v34;
  void *v35;
  void *v36;
  const char *v37;
  void *v38;
  uint8_t v39[15];
  char v40;

  v7 = a3;
  if (+[SGSqliteDatabase isInMemoryPath:](SGSqliteDatabase, "isInMemoryPath:", self->_snippetDbPath))
  {
    +[SGDatabaseJournal journalForInMemoryDb](SGDatabaseJournal, "journalForInMemoryDb");
    v8 = (SGDatabaseJournal *)objc_claimAutoreleasedReturnValue();
    snippetsJournal = self->_snippetsJournal;
    self->_snippetsJournal = v8;

  }
  else
  {
    +[SGDatabaseJournal journalWithName:](SGDatabaseJournal, "journalWithName:", CFSTR("snippets"));
    v10 = (SGDatabaseJournal *)objc_claimAutoreleasedReturnValue();
    v11 = self->_snippetsJournal;
    self->_snippetsJournal = v10;

    -[SGSqlEntityStore tryExecuteSnippetsJournal](self, "tryExecuteSnippetsJournal");
  }
  v40 = 0;
  if (!a4 && -[SGSqlEntityStore corruptionMarkerPresent](self, "corruptionMarkerPresent"))
  {
    sgLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v39 = 0;
      _os_log_impl(&dword_1C3607000, v12, OS_LOG_TYPE_DEFAULT, "corruption marker is present, recreating db", v39, 2u);
    }

    +[SGAggregateLogging databaseCorruptionDetectedViaCorruptionMarker](SGAggregateLogging, "databaseCorruptionDetectedViaCorruptionMarker");
    +[SGSqlEntityStore _recreateCorruptDatabase:sharedLock:withProtection:](SGSqlEntityStore, "_recreateCorruptDatabase:sharedLock:withProtection:", v7, self->_sharedWriteLock, 0);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "closePermanently");

    +[SGSqlEntityStore _recreateCorruptDatabase:sharedLock:withProtection:](SGSqlEntityStore, "_recreateCorruptDatabase:sharedLock:withProtection:", self->_snippetDbPath, self->_sharedWriteLock, 1);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "closePermanently");

    -[SGSqlEntityStore _removeCorruptionMarker](self, "_removeCorruptionMarker");
    journal = self->_journal;
    v16 = -[SGJournalEntry initWithOperation:]([SGJournalEntry alloc], "initWithOperation:", 14);
    -[SGJournal addEntry:](journal, "addEntry:", v16);

  }
  +[SGSqlEntityStore initializeDatabase:withProtection:sharedLock:newDatabaseCreated:](SGSqlEntityStore, "initializeDatabase:withProtection:sharedLock:newDatabaseCreated:", v7, 0, self->_sharedWriteLock, &v40);
  v17 = (SGSqliteDatabase *)objc_claimAutoreleasedReturnValue();
  db = self->_db;
  self->_db = v17;

  if (self->_db)
  {
    if (v40)
    {
      v19 = self->_journal;
      v20 = -[SGJournalEntry initWithOperation:]([SGJournalEntry alloc], "initWithOperation:", 14);
      -[SGJournal addEntry:](v19, "addEntry:", v20);

    }
    if (-[SGDatabaseJournal journaling](self->_snippetsJournal, "journaling"))
      goto LABEL_36;
    if (self->_snippetDb)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v38, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore.m"), 491, CFSTR("snippetDb instance was unexpectedly non-nil"));

    }
    +[SGSqlEntityStore initializeDatabase:withProtection:sharedLock:newDatabaseCreated:](SGSqlEntityStore, "initializeDatabase:withProtection:sharedLock:newDatabaseCreated:", self->_snippetDbPath, !self->_isEphemeral, self->_sharedWriteLock, 0);
    v21 = (SGSqliteDatabase *)objc_claimAutoreleasedReturnValue();
    snippetDb = self->_snippetDb;
    self->_snippetDb = v21;

    if (self->_snippetDb)
    {
      if (a4)
        goto LABEL_36;
      if (self->_isEphemeral)
      {
        v23 = -[SGSqlEntityStore migrateDatabases](self, "migrateDatabases");
      }
      else
      {
        v27 = (void *)migrationCompletedForPaths;
        if (!migrationCompletedForPaths)
        {
          v28 = objc_opt_new();
          v29 = (void *)migrationCompletedForPaths;
          migrationCompletedForPaths = v28;

          v27 = (void *)migrationCompletedForPaths;
        }
        if ((objc_msgSend(v27, "containsObject:", v7) & 1) != 0)
        {
          sgLogHandle();
          v30 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)v39 = 0;
            _os_log_debug_impl(&dword_1C3607000, v30, OS_LOG_TYPE_DEBUG, "entity store already migrated. Not migrating again.", v39, 2u);
          }

          goto LABEL_36;
        }
        sgLogHandle();
        v31 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)v39 = 0;
          _os_log_debug_impl(&dword_1C3607000, v31, OS_LOG_TYPE_DEBUG, "entity store is migrating", v39, 2u);
        }

        v23 = -[SGSqlEntityStore migrateDatabases](self, "migrateDatabases");
        objc_msgSend((id)migrationCompletedForPaths, "addObject:", v7);
      }
      if (v23 == 1)
      {
LABEL_40:
        if (self->_snippetDbPath
          && !+[SGSqliteDatabase isInMemoryPath:](SGSqliteDatabase, "isInMemoryPath:"))
        {
          -[SGSqlEntityStore registerJournalUnlockHandler](self, "registerJournalUnlockHandler");
        }
        v25 = 1;
        if (self->_isEphemeral && v40)
          -[SGSqlEntityStore clearAllTables](self, "clearAllTables");
        goto LABEL_46;
      }
      if (v23)
      {
        if ((unint64_t)(v23 - 5) <= 1)
        {
          sgLogHandle();
          v34 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)v39 = 0;
            _os_log_error_impl(&dword_1C3607000, v34, OS_LOG_TYPE_ERROR, "migrator found mismatched versions or is in an unrecoverable state, performing corruption recovery", v39, 2u);
          }

          objc_msgSend((id)migrationCompletedForPaths, "removeObject:", v7);
          -[SGSqlEntityStore closeDatabases](self, "closeDatabases");
          +[SGSqlEntityStore _recreateCorruptDatabase:sharedLock:withProtection:](SGSqlEntityStore, "_recreateCorruptDatabase:sharedLock:withProtection:", v7, self->_sharedWriteLock, 0);
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v35, "closePermanently");

          +[SGSqlEntityStore _recreateCorruptDatabase:sharedLock:withProtection:](SGSqlEntityStore, "_recreateCorruptDatabase:sharedLock:withProtection:", self->_snippetDbPath, self->_sharedWriteLock, 1);
          v36 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v36, "closePermanently");

          -[SGJournal freezeObservers](self->_journal, "freezeObservers");
          goto LABEL_39;
        }
        if (v23 == 3)
        {
          +[SGSqlEntityStore addPathToFutureDbSchemas:](SGSqlEntityStore, "addPathToFutureDbSchemas:", v7);
          sgLogHandle();
          v32 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)v39 = 0;
            _os_log_impl(&dword_1C3607000, v32, OS_LOG_TYPE_INFO, "Future db schema detected. Entity store cannot be initialized.", v39, 2u);
          }
          goto LABEL_38;
        }
        sgLogHandle();
        v32 = objc_claimAutoreleasedReturnValue();
        if (!os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
        {
LABEL_38:

          -[SGJournal freezeObservers](self->_journal, "freezeObservers");
          -[SGSqlEntityStore closeDatabases](self, "closeDatabases");
LABEL_39:
          v25 = 0;
          goto LABEL_46;
        }
        *(_WORD *)v39 = 0;
        v37 = "entity store could not migrate databases, bailing out.";
LABEL_52:
        _os_log_error_impl(&dword_1C3607000, v32, OS_LOG_TYPE_ERROR, v37, v39, 2u);
        goto LABEL_38;
      }
LABEL_36:
      if (-[SGSqlEntityStore migrationNeeded](self, "migrationNeeded"))
      {
        sgLogHandle();
        v32 = objc_claimAutoreleasedReturnValue();
        if (!os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
          goto LABEL_38;
        *(_WORD *)v39 = 0;
        v37 = "entity store did not try to migrate but a migration is needed";
        goto LABEL_52;
      }
      goto LABEL_40;
    }
    sgLogHandle();
    v26 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v39 = 0;
      _os_log_error_impl(&dword_1C3607000, v26, OS_LOG_TYPE_ERROR, "unable to initialize snippets DB", v39, 2u);
    }

    -[SGJournal freezeObservers](self->_journal, "freezeObservers");
    -[SGSqlEntityStore closeDatabases](self, "closeDatabases");
    v25 = 0;
  }
  else
  {
    sgLogHandle();
    v24 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v39 = 0;
      _os_log_error_impl(&dword_1C3607000, v24, OS_LOG_TYPE_ERROR, "unable to initialize entity DB", v39, 2u);
    }

    -[SGJournal freezeObservers](self->_journal, "freezeObservers");
    v25 = 0;
  }
LABEL_46:

  return v25;
}

- (SGSqlEntityStore)initWithEntityDbPath:(id)a3 snippetDbPath:(id)a4 isEphemeral:(BOOL)a5 sharedLock:(id)a6 executeJournals:(BOOL)a7 noMigrate:(BOOL)a8
{
  _BOOL8 v8;
  id v14;
  id v15;
  SGSqlEntityStore *v16;
  SGSqlEntityStore *v17;
  NSObject *v18;
  dispatch_queue_t v19;
  OS_dispatch_queue *spotlightReindexQueue;
  id v21;
  void *v22;
  uint64_t v23;
  _PASLock *recentlyDeletedEmailKeys;
  uint64_t v25;
  SGJournal *journal;
  uint64_t v27;
  NSMutableArray *deallocNotifications;
  NSObject *v29;
  _BOOL4 v30;
  SGSqliteDatabase *db;
  SGBloomFilter *v32;
  void *messageRecipients;
  NSObject *v34;
  SGSqlEntityStore *v35;
  SGBloomFilter *v36;
  uint64_t v37;
  SGBloomFilter *v38;
  uint64_t v39;
  SGSuggestHistory *history;
  uint64_t v41;
  NSSet *prematchedContactIdentifiers;
  NSObject *v43;
  NSObject *v44;
  dispatch_queue_t v45;
  OS_dispatch_queue *precomputationQueue;
  SGSpotlightContactsAdapter *v47;
  SGSpotlightContactsAdapter *spotlightContactsAdapter;
  SGSGtoCNContactsCacheUpdateAdapter *v49;
  SGSGtoCNContactsCacheUpdateAdapter *sgToCNContactsCacheUpdateAdapter;
  SGKeyValueCacheManager *v51;
  SGKeyValueCacheManager *kvCacheManager;
  uint64_t v53;
  void *sgmiFeatureStore;
  void *v55;
  uint64_t v56;
  SGMIFeatureStore *v57;
  _BOOL4 isEphemeral;
  _BOOL4 executeJournals;
  id v61;
  uint8_t v62[16];
  _QWORD v63[4];
  SGSqlEntityStore *v64;
  id v65;
  uint8_t *v66;
  BOOL v67;
  objc_super v68;
  uint8_t buf[8];
  uint8_t *v70;
  uint64_t v71;
  char v72;
  uint64_t v73;

  v8 = a8;
  v73 = *MEMORY[0x1E0C80C00];
  v14 = a3;
  v61 = a4;
  v15 = a6;
  v68.receiver = self;
  v68.super_class = (Class)SGSqlEntityStore;
  v16 = -[SGSqlEntityStore init](&v68, sel_init);
  v17 = v16;
  if (!v16)
    goto LABEL_31;
  atomic_store(0, (unsigned int *)&v16->_spotlightReindexCount);
  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v18 = objc_claimAutoreleasedReturnValue();
  v19 = dispatch_queue_create("SGSqlEntityStore spotlight reindex", v18);
  spotlightReindexQueue = v17->_spotlightReindexQueue;
  v17->_spotlightReindexQueue = (OS_dispatch_queue *)v19;

  v17->_lostMessageOverflow = 500;
  v21 = objc_alloc(MEMORY[0x1E0D815F0]);
  v22 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E10]), "initWithCapacity:", 20);
  v23 = objc_msgSend(v21, "initWithGuardedData:", v22);
  recentlyDeletedEmailKeys = v17->_recentlyDeletedEmailKeys;
  v17->_recentlyDeletedEmailKeys = (_PASLock *)v23;

  v17->_parentMessagesLimit = 10;
  objc_storeStrong((id *)&v17->_snippetDbPath, a4);
  v17->_isEphemeral = a5;
  v17->_executeJournals = a7;
  v25 = objc_opt_new();
  journal = v17->_journal;
  v17->_journal = (SGJournal *)v25;

  v27 = objc_opt_new();
  deallocNotifications = v17->_deallocNotifications;
  v17->_deallocNotifications = (NSMutableArray *)v27;

  objc_storeStrong((id *)&v17->_sharedWriteLock, a6);
  sgLogHandle();
  v29 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
  {
    isEphemeral = v17->_isEphemeral;
    executeJournals = v17->_executeJournals;
    *(_DWORD *)buf = 67109632;
    *(_DWORD *)&buf[4] = isEphemeral;
    LOWORD(v70) = 1024;
    *(_DWORD *)((char *)&v70 + 2) = executeJournals;
    HIWORD(v70) = 1024;
    LODWORD(v71) = v8;
    _os_log_debug_impl(&dword_1C3607000, v29, OS_LOG_TYPE_DEBUG, "entity store initialization flags: isEphemeral:%d executeJournals:%d noMigrate:%d", buf, 0x14u);
  }

  *(_QWORD *)buf = 0;
  v70 = buf;
  v71 = 0x2020000000;
  v72 = 0;
  if (v15)
  {
    v63[0] = MEMORY[0x1E0C809B0];
    v63[1] = 3221225472;
    v63[2] = __104__SGSqlEntityStore_initWithEntityDbPath_snippetDbPath_isEphemeral_sharedLock_executeJournals_noMigrate___block_invoke;
    v63[3] = &unk_1E7DB5B78;
    v66 = buf;
    v64 = v17;
    v65 = v14;
    v67 = v8;
    objc_msgSend(v15, "runWithLockAcquired:", v63);

    if (!v70[24])
      goto LABEL_17;
    goto LABEL_8;
  }
  v30 = -[SGSqlEntityStore _runInitMigrationTasks:noMigrate:](v17, "_runInitMigrationTasks:noMigrate:", v14, v8);
  v70[24] = v30;
  if (v30)
  {
LABEL_8:
    db = v17->_db;
    if (!db || !v17->_snippetDb && !v17->_snippetsJournal)
    {
      sgLogHandle();
      v34 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v62 = 0;
        _os_log_error_impl(&dword_1C3607000, v34, OS_LOG_TYPE_ERROR, "failed to initialize one or more databases/journals. We cannot continue.", v62, 2u);
      }

      -[SGJournal freezeObservers](v17->_journal, "freezeObservers");
      -[SGSqlEntityStore closeDatabases](v17, "closeDatabases");
      goto LABEL_17;
    }
    if (a5 || -[SGSqliteDatabase isInMemory](db, "isInMemory"))
    {
      v32 = -[SGBloomFilter initWithInMemoryStorageSparse]([SGBloomFilter alloc], "initWithInMemoryStorageSparse");
      messageRecipients = v17->_messageRecipients;
      v17->_messageRecipients = v32;
    }
    else
    {
      v36 = [SGBloomFilter alloc];
      +[SGPaths suggestionsDirectory](SGPaths, "suggestionsDirectory");
      messageRecipients = (void *)objc_claimAutoreleasedReturnValue();
      v37 = -[SGBloomFilter initWithDirectory:name:](v36, "initWithDirectory:name:", messageRecipients, CFSTR("significant-pseudo-contacts.bf"));
      v38 = v17->_messageRecipients;
      v17->_messageRecipients = (SGBloomFilter *)v37;

    }
    +[SGSuggestHistory sharedSuggestHistory](SGSuggestHistory, "sharedSuggestHistory");
    v39 = objc_claimAutoreleasedReturnValue();
    history = v17->_history;
    v17->_history = (SGSuggestHistory *)v39;

    if (initWithEntityDbPath_snippetDbPath_isEphemeral_sharedLock_executeJournals_noMigrate__onceToken != -1)
      dispatch_once(&initWithEntityDbPath_snippetDbPath_isEphemeral_sharedLock_executeJournals_noMigrate__onceToken, &__block_literal_global_76);
    -[SGSqlEntityStore prematchedContactIdentifiers](v17, "prematchedContactIdentifiers");
    v41 = objc_claimAutoreleasedReturnValue();
    prematchedContactIdentifiers = v17->_prematchedContactIdentifiers;
    v17->_prematchedContactIdentifiers = (NSSet *)v41;

    v17->_serializedContactsLimit = 3500;
    dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    v43 = objc_claimAutoreleasedReturnValue();
    dispatch_queue_attr_make_with_qos_class(v43, (dispatch_qos_class_t)5u, 0);
    v44 = objc_claimAutoreleasedReturnValue();

    v45 = dispatch_queue_create("com.apple.suggestions.sqlentitystore.cacheprecomputationqueue", v44);
    precomputationQueue = v17->_precomputationQueue;
    v17->_precomputationQueue = (OS_dispatch_queue *)v45;

    v47 = -[SGSpotlightContactsAdapter initWithSGSqlEntityStore:]([SGSpotlightContactsAdapter alloc], "initWithSGSqlEntityStore:", v17);
    spotlightContactsAdapter = v17->_spotlightContactsAdapter;
    v17->_spotlightContactsAdapter = v47;

    v49 = -[SGSGtoCNContactsCacheUpdateAdapter initWithSGSqlEntityStore:]([SGSGtoCNContactsCacheUpdateAdapter alloc], "initWithSGSqlEntityStore:", v17);
    sgToCNContactsCacheUpdateAdapter = v17->_sgToCNContactsCacheUpdateAdapter;
    v17->_sgToCNContactsCacheUpdateAdapter = v49;

    if (a5 || -[SGSqliteDatabase isInMemory](v17->_db, "isInMemory"))
      v51 = -[SGKeyValueCacheManager initInMemory]([SGKeyValueCacheManager alloc], "initInMemory");
    else
      v51 = (SGKeyValueCacheManager *)objc_opt_new();
    kvCacheManager = v17->_kvCacheManager;
    v17->_kvCacheManager = v51;

    if (initWithEntityDbPath_snippetDbPath_isEphemeral_sharedLock_executeJournals_noMigrate___pasOnceToken30 != -1)
      dispatch_once(&initWithEntityDbPath_snippetDbPath_isEphemeral_sharedLock_executeJournals_noMigrate___pasOnceToken30, &__block_literal_global_85_22767);
    objc_storeStrong((id *)&v17->_otherDetailsWithNoContact, (id)initWithEntityDbPath_snippetDbPath_isEphemeral_sharedLock_executeJournals_noMigrate___pasExprOnceResult);
    if (-[SGSqliteDatabase isInMemory](v17->_db, "isInMemory"))
    {
      +[SGMIFeatureStore storeInMemory](SGMIFeatureStore, "storeInMemory");
      v53 = objc_claimAutoreleasedReturnValue();
      sgmiFeatureStore = v17->_sgmiFeatureStore;
      v17->_sgmiFeatureStore = (SGMIFeatureStore *)v53;
    }
    else
    {
      objc_msgSend(v14, "stringByDeletingLastPathComponent");
      v55 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v55, "stringByAppendingPathComponent:", CFSTR("mifeaturestore.db"));
      sgmiFeatureStore = (void *)objc_claimAutoreleasedReturnValue();

      +[SGMIFeatureStore storeWithFilename:](SGMIFeatureStore, "storeWithFilename:", sgmiFeatureStore);
      v56 = objc_claimAutoreleasedReturnValue();
      v57 = v17->_sgmiFeatureStore;
      v17->_sgmiFeatureStore = (SGMIFeatureStore *)v56;

    }
    -[SGSqlEntityStore initRefreshSuggestionsContactDropBox](v17, "initRefreshSuggestionsContactDropBox");

    _Block_object_dispose(buf, 8);
LABEL_31:
    v35 = v17;
    goto LABEL_32;
  }
LABEL_17:
  _Block_object_dispose(buf, 8);
  v35 = 0;
LABEL_32:

  return v35;
}

- (void)dealloc
{
  NSObject *v3;
  NSMutableArray *v4;
  NSMutableArray *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  objc_super v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint8_t v14[128];
  uint8_t buf[4];
  SGSqlEntityStore *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  sgLogHandle();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138412290;
    v16 = self;
    _os_log_debug_impl(&dword_1C3607000, v3, OS_LOG_TYPE_DEBUG, "store %@ going deallocating", buf, 0xCu);
  }

  objc_msgSend(MEMORY[0x1E0D81590], "unregisterForLockStateChangeNotifications:", self->_lockStateNotificationRegistrationToken);
  -[SGSqlEntityStore closeDatabases](self, "closeDatabases");
  v4 = self->_deallocNotifications;
  objc_sync_enter(v4);
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v5 = self->_deallocNotifications;
  v6 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v5, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v11;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v11 != v7)
          objc_enumerationMutation(v5);
        (*(void (**)(void))(*(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * v8++) + 16))();
      }
      while (v6 != v8);
      v6 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v5, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v6);
  }

  objc_sync_exit(v4);
  v9.receiver = self;
  v9.super_class = (Class)SGSqlEntityStore;
  -[SGSqlEntityStore dealloc](&v9, sel_dealloc);
}

- (void)closeDatabases
{
  atomic_flag *p_isClosed;
  unsigned __int8 v4;

  p_isClosed = &self->_isClosed;
  do
    v4 = __ldaxr((unsigned __int8 *)p_isClosed);
  while (__stlxr(1u, (unsigned __int8 *)p_isClosed));
  if ((v4 & 1) == 0)
  {
    -[SGSqliteDatabase closePermanently](self->_db, "closePermanently");
    -[SGSqliteDatabase closePermanently](self->_snippetDb, "closePermanently");
  }
}

- (void)addDeallocNotification:(id)a3
{
  NSMutableArray *v5;
  NSMutableArray *deallocNotifications;
  void *v7;
  void *v8;
  id v9;

  v9 = a3;
  if (!v9)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore.m"), 756, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("block"));

  }
  v5 = self->_deallocNotifications;
  objc_sync_enter(v5);
  deallocNotifications = self->_deallocNotifications;
  v7 = (void *)MEMORY[0x1C3BD5158](v9);
  -[NSMutableArray addObject:](deallocNotifications, "addObject:", v7);

  objc_sync_exit(v5);
}

- (BOOL)corruptionMarkerPresent
{
  void *v4;
  void *v5;
  char v6;

  if (self->_isEphemeral)
    return 0;
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  +[SGSqliteDatabase corruptionMarkerPathForPath:](SGSqliteDatabase, "corruptionMarkerPathForPath:", self->_snippetDbPath);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v4, "fileExistsAtPath:isDirectory:", v5, 0);

  return v6;
}

- (void)_removeCorruptionMarker
{
  void *v3;
  void *v4;
  uint64_t v5;
  NSObject *v6;
  uint8_t v7[8];
  uint64_t v8;

  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  +[SGSqliteDatabase corruptionMarkerPathForPath:](SGSqliteDatabase, "corruptionMarkerPathForPath:", self->_snippetDbPath);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = 0;
  objc_msgSend(v3, "removeItemAtPath:error:", v4, &v8);
  v5 = v8;

  if (v5)
  {
    sgLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_1C3607000, v6, OS_LOG_TYPE_INFO, "failed to remove corruption marker", v7, 2u);
    }

  }
}

- (void)clearMasterEntityCache
{
  id v2;

  objc_msgSend((id)masterEntityCache, "resultIfAvailable");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "runWithLockAcquired:", &__block_literal_global_104_22745);

}

- (void)clearCaches
{
  NSObject *v3;
  uint8_t v4[16];

  sgLogHandle();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1C3607000, v3, OS_LOG_TYPE_INFO, "Clearing caches in SGEntityStore", v4, 2u);
  }

  -[SGSqlEntityStore clearMasterEntityCache](self, "clearMasterEntityCache");
}

- (void)removeStringFromNoContactsCache:(id)a3
{
  id v4;
  NSObject *v5;
  NSMutableOrderedSet *v6;
  uint8_t v7[16];

  v4 = a3;
  sgLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v7 = 0;
    _os_log_debug_impl(&dword_1C3607000, v5, OS_LOG_TYPE_DEBUG, "#NoDetailCache Removing other detail...", v7, 2u);
  }

  v6 = self->_otherDetailsWithNoContact;
  objc_sync_enter(v6);
  -[NSMutableOrderedSet removeObject:](self->_otherDetailsWithNoContact, "removeObject:", v4);
  objc_sync_exit(v6);

}

- (void)_addStringToNoContactsCache:(id)a3
{
  id v4;
  NSObject *v5;
  NSMutableOrderedSet *v6;
  NSObject *v7;
  uint8_t v8[16];
  uint8_t buf[16];

  v4 = a3;
  sgLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_debug_impl(&dword_1C3607000, v5, OS_LOG_TYPE_DEBUG, "#NoDetailCache Adding other detail...", buf, 2u);
  }

  v6 = self->_otherDetailsWithNoContact;
  objc_sync_enter(v6);
  -[NSMutableOrderedSet removeObject:](self->_otherDetailsWithNoContact, "removeObject:", v4);
  -[NSMutableOrderedSet addObject:](self->_otherDetailsWithNoContact, "addObject:", v4);
  if ((unint64_t)-[NSMutableOrderedSet count](self->_otherDetailsWithNoContact, "count") >= 0x2711)
  {
    sgLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v8 = 0;
      _os_log_impl(&dword_1C3607000, v7, OS_LOG_TYPE_INFO, "#NoDetailCache 10,001 items in _otherDetailsWithNoContact. Removing least recently accessed item...", v8, 2u);
    }

    -[NSMutableOrderedSet removeObjectAtIndex:](self->_otherDetailsWithNoContact, "removeObjectAtIndex:", 0);
  }
  objc_sync_exit(v6);

}

- (BOOL)_isStringInNoContactsCache:(id)a3
{
  id v4;
  NSMutableOrderedSet *v5;
  int v6;
  NSObject *v7;
  uint8_t v9[16];
  uint8_t buf[16];

  v4 = a3;
  v5 = self->_otherDetailsWithNoContact;
  objc_sync_enter(v5);
  v6 = -[NSMutableOrderedSet containsObject:](self->_otherDetailsWithNoContact, "containsObject:", v4);
  if (v6)
  {
    sgLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_1C3607000, v7, OS_LOG_TYPE_DEBUG, "#NoDetailCache Other detail found", buf, 2u);
    }

    -[NSMutableOrderedSet removeObject:](self->_otherDetailsWithNoContact, "removeObject:", v4);
    -[NSMutableOrderedSet addObject:](self->_otherDetailsWithNoContact, "addObject:", v4);
    objc_sync_exit(v5);
  }
  else
  {
    objc_sync_exit(v5);

    sgLogHandle();
    v5 = (NSMutableOrderedSet *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(&v5->super.super, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v9 = 0;
      _os_log_debug_impl(&dword_1C3607000, &v5->super.super, OS_LOG_TYPE_DEBUG, "#NoDetailCache Other detail not found", v9, 2u);
    }
  }

  return v6;
}

- (void)clearNoContactsCache
{
  NSMutableOrderedSet *v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = self->_otherDetailsWithNoContact;
  objc_sync_enter(v3);
  sgLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    v5 = -[NSMutableOrderedSet count](self->_otherDetailsWithNoContact, "count");
    v6 = 134217984;
    v7 = v5;
    _os_log_debug_impl(&dword_1C3607000, v4, OS_LOG_TYPE_DEBUG, "#NoDetailCache Clearing %lu other details", (uint8_t *)&v6, 0xCu);
  }

  -[NSMutableOrderedSet removeAllObjects](self->_otherDetailsWithNoContact, "removeAllObjects");
  objc_sync_exit(v3);

}

- (id)nextPendingGeocode
{
  void *v3;
  SGSqliteDatabase *db;
  id v5;
  _QWORD v7[6];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  void (*v12)(uint64_t);
  id v13;

  -[SGSqlEntityStore selectEntityQuery:](self, "selectEntityQuery:", CFSTR("WHERE unlikely(pendingGeocode=1)"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = 0;
  v9 = &v8;
  v10 = 0x3032000000;
  v11 = __Block_byref_object_copy__22479;
  v12 = __Block_byref_object_dispose__22480;
  v13 = 0;
  db = self->_db;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __38__SGSqlEntityStore_nextPendingGeocode__block_invoke;
  v7[3] = &unk_1E7DB6A98;
  v7[4] = self;
  v7[5] = &v8;
  -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](db, "prepAndRunQuery:onPrep:onRow:onError:", v3, 0, v7, 0);
  v5 = (id)v9[5];
  _Block_object_dispose(&v8, 8);

  return v5;
}

- (id)emailsPendingVerification
{
  NSObject *v3;
  void *v4;
  SGSqliteDatabase *db;
  id v6;
  NSObject *v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  SGDuplicateKey *v16;
  void *v17;
  SGDuplicateKey *v18;
  void *v19;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _QWORD v25[4];
  id v26;
  uint8_t v27[128];
  uint8_t buf[4];
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  sgEventsLogHandle();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1C3607000, v3, OS_LOG_TYPE_DEFAULT, "Getting e-mails pending verification", buf, 2u);
  }

  v4 = (void *)objc_opt_new();
  db = self->_db;
  v25[0] = MEMORY[0x1E0C809B0];
  v25[1] = 3221225472;
  v25[2] = __45__SGSqlEntityStore_emailsPendingVerification__block_invoke;
  v25[3] = &unk_1E7DB6ED0;
  v6 = v4;
  v26 = v6;
  -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](db, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("SELECT key FROM emailMetadata WHERE unlikely(pendingVerification = 1) ORDER BY creationTimestamp DESC"), 0, v25, &__block_literal_global_114_22730);
  sgEventsLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v8 = objc_msgSend(v6, "count");
    *(_DWORD *)buf = 134217984;
    v29 = v8;
    _os_log_impl(&dword_1C3607000, v7, OS_LOG_TYPE_DEFAULT, "Found %lu e-mails pending verification", buf, 0xCu);
  }

  v9 = (void *)objc_opt_new();
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v10 = v6;
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v21, v27, 16);
  if (v11)
  {
    v12 = v11;
    v13 = *(_QWORD *)v22;
    do
    {
      v14 = 0;
      do
      {
        if (*(_QWORD *)v22 != v13)
          objc_enumerationMutation(v10);
        v15 = *(void **)(*((_QWORD *)&v21 + 1) + 8 * v14);
        v16 = [SGDuplicateKey alloc];
        objc_msgSend(v15, "serialize", (_QWORD)v21);
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v18 = -[SGDuplicateKey initWithSerializedEntityKey:entityType:serializedParentKey:](v16, "initWithSerializedEntityKey:entityType:serializedParentKey:", v17, 5, 0);

        -[SGSqlEntityStore loadEntityByKey:](self, "loadEntityByKey:", v18);
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        if (v19)
          objc_msgSend(v9, "addObject:", v19);

        ++v14;
      }
      while (v12 != v14);
      v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v21, v27, 16);
    }
    while (v12);
  }

  return v9;
}

- (id)mostRecentParentKeyForDuplicateKey:(id)a3
{
  id v4;
  SGSqliteDatabase *db;
  uint64_t v6;
  id v7;
  id v8;
  _QWORD v10[5];
  _QWORD v11[4];
  id v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  void (*v17)(uint64_t);
  id v18;

  v4 = a3;
  v13 = 0;
  v14 = &v13;
  v15 = 0x3032000000;
  v16 = __Block_byref_object_copy__22479;
  v17 = __Block_byref_object_dispose__22480;
  v18 = 0;
  db = self->_db;
  v6 = MEMORY[0x1E0C809B0];
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __55__SGSqlEntityStore_mostRecentParentKeyForDuplicateKey___block_invoke;
  v11[3] = &unk_1E7DB7720;
  v7 = v4;
  v12 = v7;
  v10[0] = v6;
  v10[1] = 3221225472;
  v10[2] = __55__SGSqlEntityStore_mostRecentParentKeyForDuplicateKey___block_invoke_2;
  v10[3] = &unk_1E7DB51B8;
  v10[4] = &v13;
  -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](db, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("SELECT ep.parentKey FROM entity AS e INNER JOIN entityParentage AS ep ON e.id = ep.childId WHERE e.entityType = :entityType AND e.entityKey = :entityKey ORDER BY e.creationTimestamp DESC"), v11, v10, 0);
  v8 = (id)v14[5];

  _Block_object_dispose(&v13, 8);
  return v8;
}

- (id)parentKeysForDuplicateKey:(id)a3
{
  id v4;
  void *v5;
  SGSqliteDatabase *db;
  id v7;
  id v8;
  void *v9;
  id v10;
  _QWORD v12[4];
  id v13;
  _QWORD v14[4];
  id v15;

  v4 = a3;
  v5 = (void *)objc_opt_new();
  db = self->_db;
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = __46__SGSqlEntityStore_parentKeysForDuplicateKey___block_invoke;
  v14[3] = &unk_1E7DB7720;
  v15 = v4;
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __46__SGSqlEntityStore_parentKeysForDuplicateKey___block_invoke_2;
  v12[3] = &unk_1E7DB52C8;
  v7 = v5;
  v13 = v7;
  v8 = v4;
  -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](db, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("SELECT ep.parentKey FROM entity AS e INNER JOIN entityParentage AS ep ON e.id = ep.childId WHERE e.entityType = :entityType AND e.entityKey = :entityKey"), v14, v12, 0);
  v9 = v13;
  v10 = v7;

  return v10;
}

- (BOOL)contactIsDisplayable:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  SGSqliteDatabase *db;
  uint64_t v10;
  BOOL v11;
  void *v12;
  void *v13;
  _QWORD v15[5];
  _QWORD v16[4];
  id v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  char v21;

  v4 = a3;
  objc_msgSend(v4, "profiles");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "anyObject");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    objc_msgSend(v6, "duplicateKey");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "parentKey");
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (v8)
    {
      objc_msgSend(v8, "entityType");
      if ((SGEntityTypeIsMessage() & 1) != 0)
      {
        v18 = 0;
        v19 = &v18;
        v20 = 0x2020000000;
        v21 = 0;
        db = self->_db;
        v10 = MEMORY[0x1E0C809B0];
        v16[0] = MEMORY[0x1E0C809B0];
        v16[1] = 3221225472;
        v16[2] = __41__SGSqlEntityStore_contactIsDisplayable___block_invoke;
        v16[3] = &unk_1E7DB7720;
        v17 = v8;
        v15[0] = v10;
        v15[1] = 3221225472;
        v15[2] = __41__SGSqlEntityStore_contactIsDisplayable___block_invoke_2;
        v15[3] = &unk_1E7DB51B8;
        v15[4] = &v18;
        -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](db, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("SELECT state FROM emailMetadata WHERE key = :key"), v16, v15, 0);
        v11 = *((_BYTE *)v19 + 24) != 0;

        _Block_object_dispose(&v18, 8);
      }
      else
      {
        -[SGSqlEntityStore loadEntityByKey:](self, "loadEntityByKey:", v8);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = v12;
        if (v12)
          v11 = objc_msgSend(v12, "state") != 4;
        else
          v11 = 1;

      }
    }
    else
    {
      v11 = 1;
    }

  }
  else
  {
    v11 = 0;
  }

  return v11;
}

- (id)storageContactByMasterEntityId:(int64_t)a3 withSnippets:(BOOL)a4
{
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  SGSqliteDatabase *db;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  void *v21;
  void *v22;
  void *v23;
  _QWORD v24[4];
  id v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  id (*v29)(uint64_t, void *);
  void *v30;
  SGSqlEntityStore *v31;
  SEL v32;
  _QWORD v33[5];
  id v34;
  BOOL v35;
  _QWORD v36[5];
  _QWORD v37[6];
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t, uint64_t);
  void (*v42)(uint64_t);
  id v43;

  v8 = (void *)MEMORY[0x1C3BD4F6C]();
  v38 = 0;
  v39 = &v38;
  v40 = 0x3032000000;
  v41 = __Block_byref_object_copy__22479;
  v42 = __Block_byref_object_dispose__22480;
  v43 = 0;
  objc_msgSend((id)masterEntityCache, "resultIfAvailable");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = MEMORY[0x1E0C809B0];
  v37[0] = MEMORY[0x1E0C809B0];
  v37[1] = 3221225472;
  v37[2] = __64__SGSqlEntityStore_storageContactByMasterEntityId_withSnippets___block_invoke;
  v37[3] = &unk_1E7DB0058;
  v37[4] = &v38;
  v37[5] = a3;
  objc_msgSend(v9, "runWithLockAcquired:", v37);

  v11 = (void *)v39[5];
  if (v11)
  {
    v12 = v11;
  }
  else
  {
    -[SGSqlEntityStore selectEntityQuery:](self, "selectEntityQuery:", CFSTR("WHERE (e.masterEntityId = :masterEntityId OR e.id = :masterEntityId) AND +e.entityType = :pseudo AND ep.extractionType != :messagesMeCard"));
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = (void *)objc_opt_new();
    db = self->_db;
    v36[0] = v10;
    v36[1] = 3221225472;
    v36[2] = __64__SGSqlEntityStore_storageContactByMasterEntityId_withSnippets___block_invoke_2;
    v36[3] = &__block_descriptor_40_e23_v16__0__sqlite3_stmt__8l;
    v36[4] = a3;
    v33[0] = v10;
    v33[1] = 3221225472;
    v33[2] = __64__SGSqlEntityStore_storageContactByMasterEntityId_withSnippets___block_invoke_3;
    v33[3] = &unk_1E7DB0080;
    v33[4] = self;
    v35 = a4;
    v16 = v14;
    v34 = v16;
    -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](db, "prepAndRunQuery:onPrep:onRow:onError:", v13, v36, v33, 0);
    if (objc_msgSend(v16, "count"))
    {
      v27 = v10;
      v28 = 3221225472;
      v29 = __64__SGSqlEntityStore_storageContactByMasterEntityId_withSnippets___block_invoke_4;
      v30 = &unk_1E7DB00A8;
      v31 = self;
      v32 = a2;
      sgMapAndFilter();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v17, "count"))
      {
        +[SGStorageContact mergeAll:](SGStorageContact, "mergeAll:", v17);
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v23, "count") != 1)
        {
          objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore.m"), 1087, CFSTR("Should only get 1 merged contact since that's how we selected the profiles but got %d"), objc_msgSend(v23, "count"));

        }
        objc_msgSend(v23, "anyObject");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        if (!v18)
        {
          objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v22, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore.m"), 1090, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("result"));

        }
        objc_msgSend((id)masterEntityCache, "result");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        v24[0] = v10;
        v24[1] = 3221225472;
        v24[2] = __64__SGSqlEntityStore_storageContactByMasterEntityId_withSnippets___block_invoke_5;
        v24[3] = &unk_1E7DB00D0;
        v26 = a3;
        v12 = v18;
        v25 = v12;
        objc_msgSend(v19, "runWithLockAcquired:", v24);

      }
      else
      {
        v12 = 0;
      }

    }
    else
    {
      v12 = 0;
    }

  }
  _Block_object_dispose(&v38, 8);

  objc_autoreleasePoolPop(v8);
  return v12;
}

- (id)masterEntityIDsForMasterEntityQuery:(id)a3 bindings:(id)a4
{
  id v6;
  id v7;
  void *v8;
  SGSqliteDatabase *db;
  id v10;
  id v11;
  void *v12;
  id v13;
  _QWORD v15[4];
  id v16;
  _QWORD v17[4];
  id v18;

  v6 = a4;
  v7 = a3;
  v8 = (void *)objc_opt_new();
  db = self->_db;
  v17[0] = MEMORY[0x1E0C809B0];
  v17[1] = 3221225472;
  v17[2] = __65__SGSqlEntityStore_masterEntityIDsForMasterEntityQuery_bindings___block_invoke;
  v17[3] = &unk_1E7DB00F8;
  v18 = v6;
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = __65__SGSqlEntityStore_masterEntityIDsForMasterEntityQuery_bindings___block_invoke_2;
  v15[3] = &unk_1E7DB6ED0;
  v10 = v8;
  v16 = v10;
  v11 = v6;
  -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](db, "prepAndRunSQL:onPrep:onRow:onError:", v7, v17, v15, 0);

  v12 = v16;
  v13 = v10;

  return v13;
}

- (id)_contactForMasterEntityId:(id)a3 withSnippets:(BOOL)a4 filterConfirmRejectDetails:(BOOL)a5
{
  _BOOL4 v5;
  _BOOL8 v6;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;

  v5 = a5;
  v6 = a4;
  v8 = a3;
  -[SGSqlEntityStore loadSerializedContactForId:](self, "loadSerializedContactForId:", objc_msgSend(v8, "longLongValue"));
  v9 = objc_claimAutoreleasedReturnValue();
  if (v9)
  {
    v10 = (void *)v9;
    if (!-[SGSuggestHistory hasContact:](self->_history, "hasContact:", v9))
      goto LABEL_9;

  }
  -[SGSqlEntityStore storageContactByMasterEntityId:withSnippets:](self, "storageContactByMasterEntityId:withSnippets:", objc_msgSend(v8, "longLongValue"), v6);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (v11 && !-[SGSuggestHistory hasStorageContact:](self->_history, "hasStorageContact:", v11))
  {
    objc_msgSend(v11, "convertToContact:", self);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v10 = 0;
  }

LABEL_9:
  if (v10 && v5)
    -[SGSqlEntityStore filterOutRejectedDetailsFromContact:](self, "filterOutRejectedDetailsFromContact:", v10);

  return v10;
}

- (void)_enumerateContactsForMasterEntityIds:(id)a3 withSnippets:(BOOL)a4 usingBlock:(id)a5
{
  -[SGSqlEntityStore _enumerateContactsForMasterEntityIds:withSnippets:filterConfirmRejectDetails:usingBlock:](self, "_enumerateContactsForMasterEntityIds:withSnippets:filterConfirmRejectDetails:usingBlock:", a3, a4, 1, a5);
}

- (id)_contactsForMasterEntityIds:(id)a3 withSnippets:(BOOL)a4
{
  _BOOL8 v4;
  objc_class *v6;
  id v7;
  void *v8;
  id v9;
  _QWORD v11[4];
  id v12;

  v4 = a4;
  v6 = (objc_class *)MEMORY[0x1E0C99DE8];
  v7 = a3;
  v8 = (void *)objc_msgSend([v6 alloc], "initWithCapacity:", objc_msgSend(v7, "count"));
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __61__SGSqlEntityStore__contactsForMasterEntityIds_withSnippets___block_invoke;
  v11[3] = &unk_1E7DB0120;
  v9 = v8;
  v12 = v9;
  -[SGSqlEntityStore _enumerateContactsForMasterEntityIds:withSnippets:usingBlock:](self, "_enumerateContactsForMasterEntityIds:withSnippets:usingBlock:", v7, v4, v11);

  return v9;
}

- (void)enumerateContactsByMasterEntityQuery:(id)a3 withSnippets:(BOOL)a4 limit:(unint64_t)a5 bindings:(id)a6 usingBlock:(id)a7
{
  id v12;
  id v13;
  id v14;
  SGSqliteDatabase *db;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  _QWORD v20[5];
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  BOOL v25;

  v12 = a3;
  v13 = a6;
  v14 = a7;
  db = self->_db;
  v16 = 30;
  if (a5 < 0x7FFFFFFFFFFFFFFFLL)
    v16 = -1;
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 3221225472;
  v20[2] = __96__SGSqlEntityStore_enumerateContactsByMasterEntityQuery_withSnippets_limit_bindings_usingBlock___block_invoke;
  v20[3] = &unk_1E7DB0148;
  v20[4] = self;
  v21 = v12;
  v23 = v14;
  v24 = v16;
  v25 = a4;
  v22 = v13;
  v17 = v14;
  v18 = v13;
  v19 = v12;
  -[SGSqliteDatabase readTransaction:](db, "readTransaction:", v20);

}

- (id)suggestContactsByMasterEntityQuery:(id)a3 limit:(unint64_t)a4 bindings:(id)a5
{
  return -[SGSqlEntityStore suggestContactsByMasterEntityQuery:withSnippets:limit:bindings:](self, "suggestContactsByMasterEntityQuery:withSnippets:limit:bindings:", a3, 1, a4, a5);
}

- (id)suggestContactsByMasterEntityQuery:(id)a3 withSnippets:(BOOL)a4 limit:(unint64_t)a5 bindings:(id)a6
{
  _BOOL8 v7;
  id v10;
  id v11;
  void *v12;
  id v13;
  _QWORD v15[4];
  id v16;

  v7 = a4;
  v10 = a6;
  v11 = a3;
  v12 = (void *)objc_opt_new();
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = __83__SGSqlEntityStore_suggestContactsByMasterEntityQuery_withSnippets_limit_bindings___block_invoke;
  v15[3] = &unk_1E7DB0120;
  v13 = v12;
  v16 = v13;
  -[SGSqlEntityStore enumerateContactsByMasterEntityQuery:withSnippets:limit:bindings:usingBlock:](self, "enumerateContactsByMasterEntityQuery:withSnippets:limit:bindings:usingBlock:", v11, v7, a5, v10, v15);

  return v13;
}

- (id)suggestContactsWithPrefix:(id)a3 limitTo:(unint64_t)a4
{
  id v7;
  id v8;
  void *v9;
  void *v11;
  _QWORD v12[5];
  id v13;
  unint64_t v14;

  v7 = a3;
  if (!v7)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore.m"), 1214, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("prefix"));

  }
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __54__SGSqlEntityStore_suggestContactsWithPrefix_limitTo___block_invoke;
  v12[3] = &unk_1E7DB6B00;
  v12[4] = self;
  v13 = v7;
  v14 = a4;
  v8 = v7;
  -[SGSqlEntityStore suggestContactsByMasterEntityQuery:limit:bindings:](self, "suggestContactsByMasterEntityQuery:limit:bindings:", CFSTR("SELECT DISTINCT CASE WHEN entity.masterEntityId > 0 THEN entity.masterEntityId ELSE entity.id END  FROM entity WHERE entity.entityType = :pseudo AND title LIKE :prefix ESCAPE '!' AND NOT hasInhumanTag(entity.tags) AND NOT entity.curatedDupe LIMIT :limit"), a4, v12);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  return v9;
}

- (void)filterOutRejectedDetailsFromContact:(id)a3
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  SGSuggestHistory *history;
  void *v26;
  void *v27;
  _QWORD v29[5];
  id v30;

  v3 = a3;
  v4 = (void *)MEMORY[0x1E0D197B0];
  objc_msgSend(v3, "recordId");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "name");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "emailAddresses");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "phones");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "postalAddresses");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "socialProfiles");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "birthday");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "photoPath");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "contactWithId:name:emailAddresses:phones:postalAddresses:socialProfiles:birthday:photoPath:", v5, v6, v7, v8, v9, v10, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  v14 = (void *)MEMORY[0x1E0CB3880];
  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 3221225472;
  v29[2] = __56__SGSqlEntityStore_filterOutRejectedDetailsFromContact___block_invoke;
  v29[3] = &unk_1E7DB0320;
  v29[4] = self;
  v15 = v13;
  v30 = v15;
  objc_msgSend(v14, "predicateWithBlock:", v29);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "emailAddresses");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "filteredArrayUsingPredicate:", v16);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setEmailAddresses:", v18);

  objc_msgSend(v3, "phones");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "filteredArrayUsingPredicate:", v16);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setPhones:", v20);

  objc_msgSend(v3, "postalAddresses");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "filteredArrayUsingPredicate:", v16);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setPostalAddresses:", v22);

  objc_msgSend(v3, "socialProfiles");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "filteredArrayUsingPredicate:", v16);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setSocialProfiles:", v24);

  history = self->_history;
  objc_msgSend(v3, "birthday");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(history) = -[SGSuggestHistory hasContactDetail:forContact:](history, "hasContactDetail:forContact:", v26, v15);

  if ((history & 1) != 0)
  {
    objc_msgSend(v3, "setBirthday:", 0);
  }
  else
  {
    objc_msgSend(v3, "birthday");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "setBirthday:", v27);

  }
}

- (BOOL)historyHasContact:(id)a3
{
  return -[SGSuggestHistory hasContact:](self->_history, "hasContact:", a3);
}

- (double)_scoreSGContact:(id)a3 bySimilarityToContact:(id)a4 cnContactFullname:(id)a5
{
  id v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  _BOOL4 v12;
  double v13;
  id v14;
  void *v15;
  double v16;
  void *v17;
  double v18;
  void *v19;
  double v20;
  void *v21;
  double v22;
  void *v23;
  double v24;
  double v25;
  id v27;

  v7 = a5;
  v8 = a4;
  v9 = a3;
  objc_msgSend(v9, "name");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "fullName");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = +[SGNames namesApproximatelyMatch:and:](SGNames, "namesApproximatelyMatch:and:", v7, v11);

  if (v12)
    v13 = 2.0;
  else
    v13 = 0.0;
  v27 = 0;
  +[SGCuratedContactMatcher compareContact:cnContact:newDetails:matchedDetails:matchPreference:](SGCuratedContactMatcher, "compareContact:cnContact:newDetails:matchedDetails:matchPreference:", v9, v8, 0, &v27, 0);

  v14 = v27;
  objc_msgSend(v14, "phones");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = v13 + (double)(unint64_t)objc_msgSend(v15, "count");

  objc_msgSend(v14, "emailAddresses");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = v16 + (double)(unint64_t)objc_msgSend(v17, "count");

  objc_msgSend(v14, "postalAddresses");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = v18 + (double)(unint64_t)objc_msgSend(v19, "count");

  objc_msgSend(v14, "socialProfiles");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = v20 + (double)(unint64_t)objc_msgSend(v21, "count");

  objc_msgSend(v14, "birthday");
  v23 = (void *)objc_claimAutoreleasedReturnValue();

  v24 = 1.0;
  if (!v23)
    v24 = 0.0;
  v25 = v22 + v24;

  return v25;
}

- (_PASDBIterAction_)_processContactMatchWithContacts:(id)a3 matches:(id)a4 limit:(int64_t)a5 masterEntityId:(id)a6 detailEntityId:(id)a7 contactEntityId:(id)a8 matchinfoData:(id)a9 tokens:(id)a10 requireName:(BOOL)a11
{
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  BOOL *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  _PASDBIterAction_ v28;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  unint64_t v41;
  BOOL *v42;
  void *v43;
  id v44;
  uint64_t v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  _QWORD v50[2];

  v50[1] = *MEMORY[0x1E0C80C00];
  v17 = a3;
  v18 = a4;
  v19 = a6;
  v20 = a7;
  v21 = a8;
  v22 = a9;
  v23 = a10;
  if (objc_msgSend(v17, "count") <= (unint64_t)a5)
  {
    if (objc_msgSend(v19, "longLongValue") < 1
      || objc_msgSend(v20, "longLongValue") < 1
      || (v25 = objc_msgSend(v21, "longLongValue"), !v22)
      || v25 <= 0)
    {
      v24 = (BOOL *)MEMORY[0x1E0D81780];
      goto LABEL_12;
    }
    objc_msgSend(v17, "objectForKeyedSubscript:", v19);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    if (v26)
      goto LABEL_8;
    -[SGSqlEntityStore _contactForMasterEntityId:withSnippets:filterConfirmRejectDetails:](self, "_contactForMasterEntityId:withSnippets:filterConfirmRejectDetails:", v19, 1, 1);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    v31 = v30;
    if (a11
      && (objc_msgSend(v30, "name"),
          v49 = (void *)objc_claimAutoreleasedReturnValue(),
          objc_msgSend(v49, "fullName"),
          v32 = (void *)objc_claimAutoreleasedReturnValue(),
          v45 = objc_msgSend(v32, "length"),
          v32,
          v49,
          !v45))
    {
      v28.var0 = *MEMORY[0x1E0D81780];
      v26 = v31;
    }
    else
    {
      v26 = v31;
      if ((objc_msgSend(v31, "containsDetailSuggestions") & 1) != 0)
      {
LABEL_8:
        objc_msgSend(MEMORY[0x1E0D19920], "recordIdWithTableId:rowId:", 0, objc_msgSend(v20, "longLongValue"));
        v48 = (void *)objc_claimAutoreleasedReturnValue();
        switch(objc_msgSend(MEMORY[0x1E0D198A8], "tokensMatchedDetailTypeForContact:contactEntityId:detailEntityId:matchinfoData:tokens:", v26, v21, v20, v22, v23))
        {
          case 1:
          case 4:
            objc_msgSend(v26, "detailForRecordId:", v48);
            v27 = (void *)objc_claimAutoreleasedReturnValue();

            if (v27)
              goto LABEL_22;
            goto LABEL_28;
          case 2:
            objc_msgSend(v26, "recordId");
            v46 = (void *)objc_claimAutoreleasedReturnValue();
            v33 = v48;
            if (!objc_msgSend(v46, "isEqual:", v48))
              goto LABEL_21;

            goto LABEL_22;
          case 5:
            objc_msgSend(v26, "recordId");
            v46 = (void *)objc_claimAutoreleasedReturnValue();
            v33 = v48;
            if ((objc_msgSend(v46, "isEqual:", v48) & 1) != 0)
            {
LABEL_21:
              objc_msgSend(v26, "detailForRecordId:", v33);
              v34 = (void *)objc_claimAutoreleasedReturnValue();

              if (v34)
              {
LABEL_22:
                objc_msgSend(v18, "objectForKeyedSubscript:", v19);
                v35 = objc_claimAutoreleasedReturnValue();
                v36 = (void *)v35;
                v37 = (void *)MEMORY[0x1E0C9AA60];
                if (v35)
                  v37 = (void *)v35;
                v44 = v37;

                objc_msgSend(MEMORY[0x1E0D198B0], "matchinfoDataWithEntityId:detailEntityId:matchinfoData:", v21, v20, v22);
                v38 = v26;
                v39 = (void *)objc_claimAutoreleasedReturnValue();
                v50[0] = v39;
                objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v50, 1);
                v47 = v38;
                v43 = (void *)objc_claimAutoreleasedReturnValue();

                objc_msgSend(v17, "setObject:forKeyedSubscript:", v38, v19);
                objc_msgSend(v44, "_pas_proxyArrayByAppendingArray:", v43);
                v40 = (void *)objc_claimAutoreleasedReturnValue();

                objc_msgSend(v18, "setObject:forKeyedSubscript:", v40, v19);
                v41 = objc_msgSend(v17, "count");
                v42 = (BOOL *)MEMORY[0x1E0D81780];
                if (v41 >= a5)
                  v42 = (BOOL *)MEMORY[0x1E0D81788];
                v28.var0 = *v42;

                v26 = v47;
LABEL_29:

                goto LABEL_30;
              }
            }
            else
            {

            }
LABEL_28:
            v28.var0 = *MEMORY[0x1E0D81780];
            goto LABEL_29;
          default:
            goto LABEL_22;
        }
      }
      v28.var0 = *MEMORY[0x1E0D81780];
    }
LABEL_30:

    goto LABEL_13;
  }
  v24 = (BOOL *)MEMORY[0x1E0D81788];
LABEL_12:
  v28.var0 = *v24;
LABEL_13:

  return v28;
}

- (id)suggestContactMatchesWithMessagingPrefix:(id)a3 limitTo:(unint64_t)a4
{
  id v7;
  void *v8;
  void *v9;
  NSObject *v10;
  id v11;
  void *v12;
  void *v13;
  SGSqliteDatabase *db;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  SGSqliteDatabase *v19;
  id v20;
  id v21;
  id v22;
  void *v23;
  id v24;
  void *v25;
  NSObject *v26;
  void *v27;
  uint64_t v29;
  void *v30;
  void *v31;
  _QWORD v32[4];
  id v33;
  id v34;
  id v35;
  _QWORD v36[5];
  id v37;
  id v38;
  id v39;
  unint64_t v40;
  _QWORD v41[5];
  id v42;
  _QWORD v43[5];
  id v44;
  id v45;
  id v46;
  unint64_t v47;
  _QWORD v48[4];
  id v49;
  uint8_t buf[4];
  uint64_t v51;
  _QWORD v52[3];

  v52[1] = *MEMORY[0x1E0C80C00];
  v7 = a3;
  if (!v7)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v30, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore.m"), 1726, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("prefix"));

  }
  v52[0] = v7;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v52, 1);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[SGTokenizer ftsPrefix:](SGTokenizer, "ftsPrefix:", v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v9, "isEqualToString:", CFSTR("\"*\")))
  {
    sgLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1C3607000, v10, OS_LOG_TYPE_DEFAULT, "Tried to get contacts with empty messaging prefix.", buf, 2u);
    }
    v11 = (id)MEMORY[0x1E0C9AA60];
  }
  else
  {
    v12 = (void *)objc_opt_new();
    v13 = (void *)objc_opt_new();
    db = self->_db;
    v15 = MEMORY[0x1E0C809B0];
    v48[0] = MEMORY[0x1E0C809B0];
    v48[1] = 3221225472;
    v48[2] = __69__SGSqlEntityStore_suggestContactMatchesWithMessagingPrefix_limitTo___block_invoke;
    v48[3] = &unk_1E7DB74A0;
    v49 = v9;
    v43[0] = v15;
    v43[1] = 3221225472;
    v43[2] = __69__SGSqlEntityStore_suggestContactMatchesWithMessagingPrefix_limitTo___block_invoke_2;
    v43[3] = &unk_1E7DB0420;
    v43[4] = self;
    v16 = v12;
    v44 = v16;
    v17 = v13;
    v45 = v17;
    v47 = a4;
    v31 = v8;
    v18 = v8;
    v46 = v18;
    -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](db, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("SELECT CASE WHEN entity.masterEntityId > 0 THEN entity.masterEntityId ELSE entity.id END , docid, entityId, matchinfo(entity_fts, \"pcb\") AS matchinfoData FROM entity_fts CROSS JOIN entity ON entity.id = entityId WHERE entity_fts.messagingTerms MATCH :match    AND entity.entityType = :pseudo   AND NOT hasInhumanTag(entity.tags)    AND NOT entity.curatedDupe"), v48, v43, 0);
    v19 = self->_db;
    v41[0] = v15;
    v41[1] = 3221225472;
    v41[2] = __69__SGSqlEntityStore_suggestContactMatchesWithMessagingPrefix_limitTo___block_invoke_3;
    v41[3] = &unk_1E7DB6E80;
    v41[4] = self;
    v42 = v7;
    v36[0] = v15;
    v36[1] = 3221225472;
    v36[2] = __69__SGSqlEntityStore_suggestContactMatchesWithMessagingPrefix_limitTo___block_invoke_4;
    v36[3] = &unk_1E7DB0420;
    v36[4] = self;
    v20 = v16;
    v37 = v20;
    v21 = v17;
    v38 = v21;
    v40 = a4;
    v22 = v18;
    v39 = v22;
    -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](v19, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("WITH matches AS(   SELECT entity.id as id, CASE WHEN entity.entityType = :pseudo OR entity.masterEntityId < 0 THEN entity.id ELSE entity.masterEntityId END as entityId        FROM entityTags CROSS JOIN entity ON entity.entityKey = entityTags.entityKey AND entity.entityType = entityTags.entityType        WHERE entityTags.tag GLOB :tagPrefix) SELECT CASE WHEN entity.masterEntityId > 0 THEN entity.masterEntityId ELSE entity.id END , matches.id, matches.entityId FROM matches CROSS JOIN entity ON matches.id = entity.id    WHERE entity.entityType = :pseudo        AND NOT hasInhumanTag(entity.tags)         AND NOT entity.curatedDupe"), v41, v36, 0);
    objc_msgSend(v20, "allKeys");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v32[0] = v15;
    v32[1] = 3221225472;
    v32[2] = __69__SGSqlEntityStore_suggestContactMatchesWithMessagingPrefix_limitTo___block_invoke_5;
    v32[3] = &unk_1E7DB0448;
    v33 = v20;
    v34 = v22;
    v35 = v21;
    v24 = v21;
    v10 = v20;
    objc_msgSend(v23, "_pas_mappedArrayWithTransform:", v32);
    v25 = (void *)objc_claimAutoreleasedReturnValue();

    sgLogHandle();
    v26 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
    {
      v29 = objc_msgSend(v25, "count");
      *(_DWORD *)buf = 134217984;
      v51 = v29;
      _os_log_debug_impl(&dword_1C3607000, v26, OS_LOG_TYPE_DEBUG, "%lu contacts loaded", buf, 0xCu);
    }

    v27 = (void *)MEMORY[0x1E0C9AA60];
    if (v25)
      v27 = v25;
    v11 = v27;

    v8 = v31;
  }

  return v11;
}

- (id)suggestContactMatchesWithFullTextSearch:(id)a3 limitTo:(unint64_t)a4
{
  id v6;
  void *v7;
  NSObject *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  SGSqliteDatabase *db;
  id v23;
  id v24;
  id v25;
  void *v26;
  id v27;
  id v28;
  id v29;
  void *v30;
  NSObject *v31;
  void *v32;
  uint64_t v34;
  void *v35;
  id v36;
  void *v37;
  void *v38;
  _QWORD v40[4];
  id v41;
  id v42;
  id v43;
  _QWORD v44[5];
  id v45;
  id v46;
  id v47;
  unint64_t v48;
  _QWORD v49[4];
  id v50;
  _QWORD v51[4];
  id v52;
  uint8_t buf[4];
  uint64_t v54;
  __int16 v55;
  int v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  if (!v6)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v35, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore.m"), 1833, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("query"));

  }
  if (objc_msgSend(v6, "length"))
  {
    +[SGTokenizer ftsTokenize:](SGTokenizer, "ftsTokenize:", v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if ((unint64_t)objc_msgSend(v7, "count") >= 0x7D1)
    {
      sgLogHandle();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134218240;
        v54 = objc_msgSend(v7, "count");
        v55 = 1024;
        v56 = 2000;
        _os_log_impl(&dword_1C3607000, v8, OS_LOG_TYPE_DEFAULT, "Got %llu FTS tokens, truncating to first %i", buf, 0x12u);
      }

      v9 = (void *)MEMORY[0x1C3BD4F6C]();
      objc_msgSend(v7, "subarrayWithRange:", 0, 2000);
      v10 = objc_claimAutoreleasedReturnValue();
      objc_autoreleasePoolPop(v9);

      v7 = (void *)v10;
    }
    sgMap();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = (void *)MEMORY[0x1C3BD4F6C]();
    objc_msgSend(v11, "_pas_componentsJoinedByString:", CFSTR(" "));
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_autoreleasePoolPop(v12);
    -[SGSqlEntityStore _matchableUTF8TokenRangesInMatchExpression:](self, "_matchableUTF8TokenRangesInMatchExpression:", v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = (id)MEMORY[0x1E0C9AA60];
    if (v14)
    {
      v38 = v11;
      v16 = (void *)MEMORY[0x1C3BD4F6C]();
      objc_msgSend(v13, "dataUsingEncoding:", 4);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_autoreleasePoolPop(v16);
      v18 = MEMORY[0x1E0C809B0];
      v51[0] = MEMORY[0x1E0C809B0];
      v51[1] = 3221225472;
      v51[2] = __68__SGSqlEntityStore_suggestContactMatchesWithFullTextSearch_limitTo___block_invoke_2;
      v51[3] = &unk_1E7DB0490;
      v36 = v17;
      v37 = v14;
      v52 = v36;
      objc_msgSend(v14, "_pas_mappedArrayWithTransform:", v51);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = (void *)objc_opt_new();
      v21 = (void *)objc_opt_new();
      db = self->_db;
      v49[0] = v18;
      v49[1] = 3221225472;
      v49[2] = __68__SGSqlEntityStore_suggestContactMatchesWithFullTextSearch_limitTo___block_invoke_233;
      v49[3] = &unk_1E7DB74A0;
      v50 = v13;
      v44[0] = v18;
      v44[1] = 3221225472;
      v44[2] = __68__SGSqlEntityStore_suggestContactMatchesWithFullTextSearch_limitTo___block_invoke_2_234;
      v44[3] = &unk_1E7DB0420;
      v44[4] = self;
      v23 = v20;
      v45 = v23;
      v24 = v21;
      v46 = v24;
      v48 = a4;
      v25 = v19;
      v47 = v25;
      -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](db, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("SELECT CASE WHEN entity.masterEntityId > 0 THEN entity.masterEntityId ELSE entity.id END , entity_fts.docid, entity_fts.entityId, matchinfo(entity_fts, \"pcb\")    FROM entity_fts CROSS JOIN entity ON entity_fts.entityId = entity.id    WHERE entity_fts MATCH :match        AND entity.entityType = :pseudo        AND NOT hasInhumanTag(entity.tags)        AND NOT entity.curatedDupe"), v49, v44, 0);
      objc_msgSend(v23, "allKeys");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      v40[0] = v18;
      v40[1] = 3221225472;
      v40[2] = __68__SGSqlEntityStore_suggestContactMatchesWithFullTextSearch_limitTo___block_invoke_3;
      v40[3] = &unk_1E7DB0448;
      v41 = v23;
      v42 = v25;
      v43 = v24;
      v27 = v24;
      v28 = v25;
      v29 = v23;
      objc_msgSend(v26, "_pas_mappedArrayWithTransform:", v40);
      v30 = (void *)objc_claimAutoreleasedReturnValue();

      sgLogHandle();
      v31 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
      {
        v34 = objc_msgSend(v30, "count");
        *(_DWORD *)buf = 134217984;
        v54 = v34;
        _os_log_debug_impl(&dword_1C3607000, v31, OS_LOG_TYPE_DEBUG, "After filtering, %lu contacts", buf, 0xCu);
      }

      if (v30)
        v32 = v30;
      else
        v32 = v15;
      v15 = v32;

      v14 = v37;
      v11 = v38;
    }

  }
  else
  {
    v15 = (id)MEMORY[0x1E0C9AA60];
  }

  return v15;
}

- (id)_matchableUTF8TokenRangesInMatchExpression:(id)a3
{
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  _QWORD v11[4];
  id v12;
  SGSqlEntityStore *v13;
  uint64_t *v14;
  SEL v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  void (*v20)(uint64_t);
  id v21;
  _QWORD block[6];

  v5 = a3;
  v6 = MEMORY[0x1E0C809B0];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __63__SGSqlEntityStore__matchableUTF8TokenRangesInMatchExpression___block_invoke;
  block[3] = &unk_1E7DB6368;
  block[4] = self;
  block[5] = a2;
  if (_matchableUTF8TokenRangesInMatchExpression__onceToken != -1)
    dispatch_once(&_matchableUTF8TokenRangesInMatchExpression__onceToken, block);
  if (_matchableUTF8TokenRangesInMatchExpression__tokenizerLock)
  {
    v16 = 0;
    v17 = &v16;
    v18 = 0x3032000000;
    v19 = __Block_byref_object_copy__22479;
    v20 = __Block_byref_object_dispose__22480;
    v21 = 0;
    v21 = (id)objc_opt_new();
    v7 = (void *)MEMORY[0x1C3BD4F6C]();
    v8 = (void *)_matchableUTF8TokenRangesInMatchExpression__tokenizerLock;
    v11[0] = v6;
    v11[1] = 3221225472;
    v11[2] = __63__SGSqlEntityStore__matchableUTF8TokenRangesInMatchExpression___block_invoke_258;
    v11[3] = &unk_1E7DB04F8;
    v12 = v5;
    v13 = self;
    v14 = &v16;
    v15 = a2;
    objc_msgSend(v8, "runWithLockAcquired:", v11);

    objc_autoreleasePoolPop(v7);
    v9 = (id)v17[5];
    _Block_object_dispose(&v16, 8);

  }
  else
  {
    v9 = 0;
  }

  return v9;
}

- (id)_queryForAllContactsWithLimit
{
  return CFSTR("SELECT DISTINCT CASE WHEN entity.masterEntityId > 0 THEN entity.masterEntityId ELSE entity.id END  FROM entity WHERE entity.entityType = :pseudo AND NOT hasInhumanTag(entity.tags) AND NOT entity.curatedDupe ORDER BY entity.id DESC LIMIT :limit ");
}

- (id)_queryForAllContactsWithExtractionDates
{
  return CFSTR("SELECT DISTINCT CASE WHEN entity.masterEntityId > 0 THEN entity.masterEntityId ELSE entity.id END  FROM entity WHERE entity.entityType = :pseudo AND NOT hasInhumanTag(entity.tags) AND NOT entity.curatedDupe AND creationTimeStamp <= :creationTimeEnd AND creationTimeStamp > :creationTimeStart ORDER BY creationTimestamp DESC LIMIT :limit ");
}

- (void)enumerateAllContactsWithExtractionStartDate:(id)a3 extractionEndDate:(id)a4 withSnippets:(BOOL)a5 limitTo:(unint64_t)a6 usingBlock:(id)a7
{
  _BOOL8 v8;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  _QWORD v19[7];

  v8 = a5;
  v12 = a7;
  v13 = a4;
  objc_msgSend(a3, "timeIntervalSince1970");
  v15 = v14;
  objc_msgSend(v13, "timeIntervalSince1970");
  v17 = v16;

  -[SGSqlEntityStore _queryForAllContactsWithExtractionDates](self, "_queryForAllContactsWithExtractionDates");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 3221225472;
  v19[2] = __114__SGSqlEntityStore_enumerateAllContactsWithExtractionStartDate_extractionEndDate_withSnippets_limitTo_usingBlock___block_invoke;
  v19[3] = &__block_descriptor_56_e29_v16__0___PASSqliteStatement_8l;
  v19[4] = a6;
  v19[5] = v15;
  v19[6] = v17;
  -[SGSqlEntityStore enumerateContactsByMasterEntityQuery:withSnippets:limit:bindings:usingBlock:](self, "enumerateContactsByMasterEntityQuery:withSnippets:limit:bindings:usingBlock:", v18, v8, a6, v19, v12);

}

- (void)enumerateAllContactsWithSnippets:(BOOL)a3 limitTo:(unint64_t)a4 usingBlock:(id)a5
{
  _BOOL8 v6;
  id v8;
  void *v9;
  _QWORD v10[5];

  v6 = a3;
  v8 = a5;
  -[SGSqlEntityStore _queryForAllContactsWithLimit](self, "_queryForAllContactsWithLimit");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __72__SGSqlEntityStore_enumerateAllContactsWithSnippets_limitTo_usingBlock___block_invoke;
  v10[3] = &__block_descriptor_40_e29_v16__0___PASSqliteStatement_8l;
  v10[4] = a4;
  -[SGSqlEntityStore enumerateContactsByMasterEntityQuery:withSnippets:limit:bindings:usingBlock:](self, "enumerateContactsByMasterEntityQuery:withSnippets:limit:bindings:usingBlock:", v9, v6, a4, v10, v8);

}

- (id)allContactsWithExtractionStartDate:(id)a3 extractionEndDate:(id)a4
{
  id v6;
  id v7;
  void *v8;
  id v9;
  NSObject *v10;
  uint64_t v12;
  _QWORD v13[4];
  id v14;
  uint8_t buf[4];
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v6 = a4;
  v7 = a3;
  v8 = (void *)objc_opt_new();
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = __73__SGSqlEntityStore_allContactsWithExtractionStartDate_extractionEndDate___block_invoke;
  v13[3] = &unk_1E7DB0120;
  v9 = v8;
  v14 = v9;
  -[SGSqlEntityStore enumerateAllContactsWithExtractionStartDate:extractionEndDate:withSnippets:limitTo:usingBlock:](self, "enumerateAllContactsWithExtractionStartDate:extractionEndDate:withSnippets:limitTo:usingBlock:", v7, v6, 1, 100000, v13);

  sgLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    v12 = objc_msgSend(v9, "count");
    *(_DWORD *)buf = 134217984;
    v16 = v12;
    _os_log_debug_impl(&dword_1C3607000, v10, OS_LOG_TYPE_DEBUG, "Matched birthday extraction for %tu contacts", buf, 0xCu);
  }

  return v9;
}

- (id)allContactsWithSnippets:(BOOL)a3 limitTo:(unint64_t)a4
{
  _BOOL8 v5;
  void *v7;
  id v8;
  NSObject *v9;
  uint64_t v11;
  _QWORD v12[4];
  id v13;
  uint8_t buf[4];
  uint64_t v15;
  uint64_t v16;

  v5 = a3;
  v16 = *MEMORY[0x1E0C80C00];
  v7 = (void *)objc_opt_new();
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __52__SGSqlEntityStore_allContactsWithSnippets_limitTo___block_invoke;
  v12[3] = &unk_1E7DB0120;
  v8 = v7;
  v13 = v8;
  -[SGSqlEntityStore enumerateAllContactsWithSnippets:limitTo:usingBlock:](self, "enumerateAllContactsWithSnippets:limitTo:usingBlock:", v5, a4, v12);
  sgLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    v11 = objc_msgSend(v8, "count");
    *(_DWORD *)buf = 134217984;
    v15 = v11;
    _os_log_debug_impl(&dword_1C3607000, v9, OS_LOG_TYPE_DEBUG, "Matched %tu contacts", buf, 0xCu);
  }

  return v8;
}

- (id)allContactsMasterEntityIdsLimitedTo:(unint64_t)a3
{
  void *v5;
  void *v6;
  _QWORD v8[5];

  -[SGSqlEntityStore _queryForAllContactsWithLimit](self, "_queryForAllContactsWithLimit");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __56__SGSqlEntityStore_allContactsMasterEntityIdsLimitedTo___block_invoke;
  v8[3] = &__block_descriptor_40_e29_v16__0___PASSqliteStatement_8l;
  v8[4] = a3;
  -[SGSqlEntityStore masterEntityIDsForMasterEntityQuery:bindings:](self, "masterEntityIDsForMasterEntityQuery:bindings:", v5, v8);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (id)suggestContactMatchesByType:(int64_t)a3 searchString:(id)a4 isMaybe:(BOOL)a5 onlySignificant:(BOOL)a6
{
  id v10;
  id v11;
  SGSqliteDatabase *db;
  id v13;
  void *v15;
  _QWORD v16[5];
  id v17;
  uint64_t *v18;
  uint64_t *v19;
  int64_t v20;
  SEL v21;
  BOOL v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t);
  void (*v31)(uint64_t);
  id v32;

  v10 = a4;
  if (!v10)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore.m"), 2111, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("searchString"));

  }
  if (-[SGSqlEntityStore _isStringInNoContactsCache:](self, "_isStringInNoContactsCache:", v10))
  {
    v11 = (id)MEMORY[0x1E0C9AA60];
  }
  else
  {
    v27 = 0;
    v28 = &v27;
    v29 = 0x3032000000;
    v30 = __Block_byref_object_copy__22479;
    v31 = __Block_byref_object_dispose__22480;
    v32 = 0;
    v23 = 0;
    v24 = &v23;
    v25 = 0x2020000000;
    v26 = 1;
    db = self->_db;
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 3221225472;
    v16[2] = __85__SGSqlEntityStore_suggestContactMatchesByType_searchString_isMaybe_onlySignificant___block_invoke;
    v16[3] = &unk_1E7DB0568;
    v16[4] = self;
    v13 = v10;
    v17 = v13;
    v18 = &v27;
    v20 = a3;
    v21 = a2;
    v22 = a6;
    v19 = &v23;
    -[SGSqliteDatabase readTransaction:](db, "readTransaction:", v16);
    if (*((_BYTE *)v24 + 24))
      -[SGSqlEntityStore _addStringToNoContactsCache:](self, "_addStringToNoContactsCache:", v13);
    v11 = (id)v28[5];

    _Block_object_dispose(&v23, 8);
    _Block_object_dispose(&v27, 8);

  }
  return v11;
}

- (id)suggestContactMatchesByPhoneNumber:(id)a3 isMaybe:(BOOL)a4 onlySignificant:(BOOL)a5
{
  _BOOL8 v5;
  _BOOL8 v6;
  void *v8;
  void *v9;

  v5 = a5;
  v6 = a4;
  SGNormalizePhoneNumber();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[SGSqlEntityStore suggestContactMatchesByType:searchString:isMaybe:onlySignificant:](self, "suggestContactMatchesByType:searchString:isMaybe:onlySignificant:", 2, v8, v6, v5);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  return v9;
}

- (id)suggestContactMatchesByPhoneNumber:(id)a3
{
  return -[SGSqlEntityStore suggestContactMatchesByPhoneNumber:isMaybe:onlySignificant:](self, "suggestContactMatchesByPhoneNumber:isMaybe:onlySignificant:", a3, 0, 1);
}

- (id)suggestContactMatchesByEmailAddress:(id)a3 isMaybe:(BOOL)a4 onlySignificant:(BOOL)a5
{
  _BOOL8 v5;
  _BOOL8 v6;
  void *v8;
  void *v9;

  v5 = a5;
  v6 = a4;
  SGNormalizeEmailAddress();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[SGSqlEntityStore suggestContactMatchesByType:searchString:isMaybe:onlySignificant:](self, "suggestContactMatchesByType:searchString:isMaybe:onlySignificant:", 3, v8, v6, v5);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  return v9;
}

- (id)suggestContactMatchesByEmailAddress:(id)a3
{
  return -[SGSqlEntityStore suggestContactMatchesByEmailAddress:isMaybe:onlySignificant:](self, "suggestContactMatchesByEmailAddress:isMaybe:onlySignificant:", a3, 0, 1);
}

- (id)suggestContactMatchesBySocialProfile:(id)a3 isMaybe:(BOOL)a4 onlySignificant:(BOOL)a5
{
  _BOOL8 v5;
  _BOOL8 v6;
  id v9;
  SGSocialProfileDetails *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v17;

  v5 = a5;
  v6 = a4;
  v9 = a3;
  if (!v9)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore.m"), 2187, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("socialProfile"));

  }
  v10 = -[SGSocialProfileDetails initWithSocialProfile:]([SGSocialProfileDetails alloc], "initWithSocialProfile:", v9);
  objc_msgSend(v9, "bundleIdentifier");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v11, "length"))
  {
    objc_msgSend(v9, "username");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v12, "length"))
    {

    }
    else
    {
      objc_msgSend(v9, "userIdentifier");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = objc_msgSend(v14, "length");

      if (!v15)
      {
        v13 = (void *)MEMORY[0x1E0C9AA60];
        goto LABEL_10;
      }
    }
    -[SGSocialProfileDetails preferredUniqueIdentifier](v10, "preferredUniqueIdentifier");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    SGNormalizeSocialProfile(v11);
    objc_claimAutoreleasedReturnValue();

    -[SGSqlEntityStore suggestContactMatchesByType:searchString:isMaybe:onlySignificant:](self, "suggestContactMatchesByType:searchString:isMaybe:onlySignificant:", 5, v11, v6, v5);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v13 = (void *)MEMORY[0x1E0C9AA60];
  }

LABEL_10:
  return v13;
}

- (id)suggestContactMatchesBySocialProfile:(id)a3
{
  return -[SGSqlEntityStore suggestContactMatchesBySocialProfile:isMaybe:onlySignificant:](self, "suggestContactMatchesBySocialProfile:isMaybe:onlySignificant:", a3, 0, 1);
}

- (id)storageContactByKey:(id)a3
{
  id v5;
  void *v6;
  void *v7;
  __CFString *v8;
  SGSqliteDatabase *db;
  __CFString *v10;
  id v11;
  id v12;
  void *v14;
  _QWORD v15[5];
  __CFString *v16;
  id v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t);
  void (*v23)(uint64_t);
  id v24;

  v5 = a3;
  if (!v5)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore.m"), 2209, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("key"));

  }
  v19 = 0;
  v20 = &v19;
  v21 = 0x3032000000;
  v22 = __Block_byref_object_copy__22479;
  v23 = __Block_byref_object_dispose__22480;
  v24 = 0;
  objc_msgSend(v5, "parentKey");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    v7 = (void *)MEMORY[0x1C3BD4F6C]();
    objc_msgSend(CFSTR("SELECT CASE WHEN e.masterEntityId > 0 THEN e.masterEntityId WHEN e.groupId > 0 THEN e.groupId ELSE e.id END  FROM entity AS e INNER JOIN entityParentage AS ep ON e.id = ep.childId WHERE e.entityType = :entityType AND e.entityKey = :entityKey"), "stringByAppendingString:", CFSTR(" AND ep.parentKey = :parentKey"));
    v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
    objc_autoreleasePoolPop(v7);
  }
  else
  {
    v8 = CFSTR("SELECT CASE WHEN e.masterEntityId > 0 THEN e.masterEntityId WHEN e.groupId > 0 THEN e.groupId ELSE e.id END  FROM entity AS e INNER JOIN entityParentage AS ep ON e.id = ep.childId WHERE e.entityType = :entityType AND e.entityKey = :entityKey");
  }
  db = self->_db;
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = __40__SGSqlEntityStore_storageContactByKey___block_invoke;
  v15[3] = &unk_1E7DB4620;
  v15[4] = self;
  v10 = v8;
  v16 = v10;
  v11 = v5;
  v17 = v11;
  v18 = &v19;
  -[SGSqliteDatabase readTransaction:](db, "readTransaction:", v15);
  v12 = (id)v20[5];

  _Block_object_dispose(&v19, 8);
  return v12;
}

- (id)suggestContactByKey:(id)a3
{
  id v5;
  void *v6;
  void *v7;
  __CFString *v8;
  id v9;
  void *v10;
  void *v11;
  void *v13;
  _QWORD v14[4];
  id v15;

  v5 = a3;
  if (!v5)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore.m"), 2236, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("key"));

  }
  objc_msgSend(v5, "parentKey");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    v7 = (void *)MEMORY[0x1C3BD4F6C]();
    objc_msgSend(CFSTR("SELECT CASE WHEN e.masterEntityId > 0 THEN e.masterEntityId WHEN e.groupId > 0 THEN e.groupId ELSE e.id END  FROM entity AS e INNER JOIN entityParentage AS ep ON e.id = ep.childId WHERE e.entityType = :entityType AND e.entityKey = :entityKey AND ep.extractionType != :messagesMeCard"), "stringByAppendingString:", CFSTR(" AND ep.parentKey = :parentKey"));
    v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
    objc_autoreleasePoolPop(v7);
  }
  else
  {
    v8 = CFSTR("SELECT CASE WHEN e.masterEntityId > 0 THEN e.masterEntityId WHEN e.groupId > 0 THEN e.groupId ELSE e.id END  FROM entity AS e INNER JOIN entityParentage AS ep ON e.id = ep.childId WHERE e.entityType = :entityType AND e.entityKey = :entityKey AND ep.extractionType != :messagesMeCard");
  }
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = __40__SGSqlEntityStore_suggestContactByKey___block_invoke;
  v14[3] = &unk_1E7DB74A0;
  v15 = v5;
  v9 = v5;
  -[SGSqlEntityStore suggestContactsByMasterEntityQuery:limit:bindings:](self, "suggestContactsByMasterEntityQuery:limit:bindings:", v8, 1, v14);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v10, "count"))
  {
    objc_msgSend(v10, "objectAtIndexedSubscript:", 0);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v11 = 0;
  }

  return v11;
}

- (id)suggestContactByIdentityKey:(id)a3 parentKey:(id)a4
{
  id v6;
  void *v7;
  void *v8;
  void *v9;

  v6 = a3;
  v7 = 0;
  switch(objc_msgSend(v6, "type"))
  {
    case 0:
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore.m"), 2273, CFSTR("Uninitialized identity key"));
      v7 = 0;
      goto LABEL_5;
    case 1:
    case 4:
    case 5:
      +[SGDuplicateKey duplicateKeyForPseudoContactWithIdentity:parentKey:](SGDuplicateKey, "duplicateKeyForPseudoContactWithIdentity:parentKey:", v6, 0);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      -[SGSqlEntityStore suggestContactByKey:](self, "suggestContactByKey:", v8);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      goto LABEL_5;
    case 2:
      objc_msgSend(v6, "externalId");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      +[SGDuplicateKey duplicateKeyForCuratedEventWithExternalID:](SGDuplicateKey, "duplicateKeyForCuratedEventWithExternalID:", v8);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      -[SGSqlEntityStore suggestContactByKey:](self, "suggestContactByKey:", v9);
      v7 = (void *)objc_claimAutoreleasedReturnValue();

LABEL_5:
      break;
    default:
      break;
  }

  return v7;
}

- (id)storageContactByRecordId:(id)a3 withSnippets:(BOOL)a4
{
  id v6;
  NSObject *v7;
  id v8;
  SGSqliteDatabase *db;
  _QWORD v11[5];
  __CFString *v12;
  id v13;
  __int128 *p_buf;
  BOOL v15;
  __int128 buf;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  void (*v19)(uint64_t);
  id v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  if (objc_msgSend(v6, "tableId"))
  {
    sgLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 138412290;
      *(_QWORD *)((char *)&buf + 4) = v6;
      _os_log_impl(&dword_1C3607000, v7, OS_LOG_TYPE_DEFAULT, "suggestContactByRecordId received recordId from wrong table: %@", (uint8_t *)&buf, 0xCu);
    }

    v8 = 0;
  }
  else
  {
    *(_QWORD *)&buf = 0;
    *((_QWORD *)&buf + 1) = &buf;
    v17 = 0x3032000000;
    v18 = __Block_byref_object_copy__22479;
    v19 = __Block_byref_object_dispose__22480;
    v20 = 0;
    db = self->_db;
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 3221225472;
    v11[2] = __58__SGSqlEntityStore_storageContactByRecordId_withSnippets___block_invoke;
    v11[3] = &unk_1E7DB0590;
    v11[4] = self;
    v12 = CFSTR("SELECT CASE WHEN entity.masterEntityId > 0 THEN entity.masterEntityId ELSE entity.id END  FROM entity WHERE id = :entityId");
    v13 = v6;
    p_buf = &buf;
    v15 = a4;
    -[SGSqliteDatabase readTransaction:](db, "readTransaction:", v11);
    v8 = *(id *)(*((_QWORD *)&buf + 1) + 40);

    _Block_object_dispose(&buf, 8);
  }

  return v8;
}

- (id)suggestContactByRecordId:(id)a3
{
  return -[SGSqlEntityStore suggestContactByRecordId:withSnippets:filterConfirmRejectDetails:](self, "suggestContactByRecordId:withSnippets:filterConfirmRejectDetails:", a3, 1, 1);
}

- (id)suggestContactByRecordId:(id)a3 withSnippets:(BOOL)a4 filterConfirmRejectDetails:(BOOL)a5
{
  _BOOL8 v5;
  _BOOL8 v6;
  id v8;
  NSObject *v9;
  void *v10;
  SGSqliteDatabase *db;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[5];
  _QWORD v16[4];
  id v17;
  __int128 buf;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  void (*v21)(uint64_t);
  id v22;
  uint64_t v23;

  v5 = a5;
  v6 = a4;
  v23 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  if (objc_msgSend(v8, "tableId"))
  {
    sgLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 138412290;
      *(_QWORD *)((char *)&buf + 4) = v8;
      _os_log_impl(&dword_1C3607000, v9, OS_LOG_TYPE_DEFAULT, "suggestContactByRecordId received recordId from wrong table: %@", (uint8_t *)&buf, 0xCu);
    }

    v10 = 0;
  }
  else
  {
    *(_QWORD *)&buf = 0;
    *((_QWORD *)&buf + 1) = &buf;
    v19 = 0x3032000000;
    v20 = __Block_byref_object_copy__22479;
    v21 = __Block_byref_object_dispose__22480;
    v22 = 0;
    db = self->_db;
    v12 = MEMORY[0x1E0C809B0];
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 3221225472;
    v16[2] = __85__SGSqlEntityStore_suggestContactByRecordId_withSnippets_filterConfirmRejectDetails___block_invoke;
    v16[3] = &unk_1E7DB74A0;
    v17 = v8;
    v15[0] = v12;
    v15[1] = 3221225472;
    v15[2] = __85__SGSqlEntityStore_suggestContactByRecordId_withSnippets_filterConfirmRejectDetails___block_invoke_2;
    v15[3] = &unk_1E7DB7510;
    v15[4] = &buf;
    -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](db, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("SELECT CASE WHEN entity.masterEntityId > 0 THEN entity.masterEntityId ELSE entity.id END  FROM entity WHERE id = :entityId"), v16, v15, 0);
    v13 = *(_QWORD *)(*((_QWORD *)&buf + 1) + 40);
    if (v13)
    {
      -[SGSqlEntityStore _contactForMasterEntityId:withSnippets:filterConfirmRejectDetails:](self, "_contactForMasterEntityId:withSnippets:filterConfirmRejectDetails:", v13, v6, v5);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v10 = 0;
    }

    _Block_object_dispose(&buf, 8);
  }

  return v10;
}

- (int64_t)contactMatchedRecordTypeFromEntityType:(int64_t)a3
{
  if ((unint64_t)a3 > 0x1B)
    return 0;
  else
    return qword_1C3858CF0[a3];
}

- (int64_t)contactMatchedRecordTypeFromIdentityKeyType:(unint64_t)a3
{
  if (a3 > 5)
    return 3;
  else
    return qword_1C3858DD0[a3];
}

- (int64_t)entityTypeFromIdentityKeyType:(unint64_t)a3
{
  if (a3 > 5)
    return 8;
  else
    return qword_1C3858E00[a3];
}

- (id)suggestContactMatchesByContactDetailTag:(id)a3
{
  return -[SGSqlEntityStore suggestContactMatchesByContactDetailTag:matchType:](self, "suggestContactMatchesByContactDetailTag:matchType:", a3, 0);
}

- (id)suggestContactMatchesByContactDetailTag:(id)a3 matchType:(int64_t)a4
{
  id v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  void *v15;
  void *v16;
  int64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v29;
  void *v30;
  void *v31;
  id obj;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _QWORD v37[3];
  _BYTE v38[128];
  _QWORD v39[3];

  v39[1] = *MEMORY[0x1E0C80C00];
  v7 = a3;
  if ((objc_msgSend(v7, "isContactDetail") & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore.m"), 2404, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("contactDetailTag.isContactDetail"));

  }
  v31 = (void *)objc_opt_new();
  v39[0] = v7;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v39, 1);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[SGSqlEntityStore duplicateKeysMatchingAnyTag:](self, "duplicateKeysMatchingAnyTag:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v30 = v7;
  objc_msgSend(v9, "objectForKeyedSubscript:", v7);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  obj = v10;
  v11 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v33, v38, 16);
  if (v11)
  {
    v12 = v11;
    v13 = *(_QWORD *)v34;
    do
    {
      for (i = 0; i != v12; ++i)
      {
        if (*(_QWORD *)v34 != v13)
          objc_enumerationMutation(obj);
        v15 = *(void **)(*((_QWORD *)&v33 + 1) + 8 * i);
        objc_msgSend(v15, "entityType");
        if (SGEntityTypeIsContact())
        {
          objc_msgSend(v15, "identityKey");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          v17 = -[SGSqlEntityStore contactMatchedRecordTypeFromIdentityKeyType:](self, "contactMatchedRecordTypeFromIdentityKeyType:", objc_msgSend(v16, "type"));

          if (!a4)
            goto LABEL_13;
        }
        else
        {
          v17 = -[SGSqlEntityStore contactMatchedRecordTypeFromEntityType:](self, "contactMatchedRecordTypeFromEntityType:", objc_msgSend(v15, "entityType"));
          if (!a4)
            goto LABEL_13;
        }
        if (v17 != a4)
          continue;
LABEL_13:
        -[SGSqlEntityStore loadEntityByKey:](self, "loadEntityByKey:", v15);
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "recordId");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "entityType");
        if (SGEntityTypeIsContact())
          v20 = objc_msgSend(v19, "internalEntityId");
        else
          v20 = objc_msgSend(v18, "masterEntityId");
        objc_msgSend(MEMORY[0x1E0D19920], "recordIdForContactWithRowId:", v20);
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        -[SGSqlEntityStore suggestContactByRecordId:](self, "suggestContactByRecordId:", v21);
        v22 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v22, "detailForRecordId:", v19);
        v23 = (void *)objc_claimAutoreleasedReturnValue();

        if (v23)
        {
          if (!v22 || !v19)
            goto LABEL_22;
          v37[0] = v22;
          v37[1] = v19;
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v17);
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          v37[2] = v24;
          objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v37, 3);
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v31, "addObject:", v25);
        }
        else
        {
          v25 = v22;
          v24 = v19;
          v22 = 0;
          v19 = 0;
        }

LABEL_22:
      }
      v12 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v33, v38, 16);
    }
    while (v12);
  }

  +[SGDeduper bucketerWithMapping:](SGDeduper, "bucketerWithMapping:", &__block_literal_global_301);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  +[SGDeduper dedupe:bucketer:resolver:](SGDeduper, "dedupe:bucketer:resolver:", v31, v26, &__block_literal_global_303);
  v27 = (void *)objc_claimAutoreleasedReturnValue();

  return v27;
}

- (void)rebuildContactDetailsCacheWithShouldContinueBlock:(id)a3
{
  id v4;
  SGKeyValueCacheManager *kvCacheManager;
  id v6;
  _QWORD v7[5];
  id v8;
  _QWORD *v9;
  _QWORD v10[3];
  char v11;

  v4 = a3;
  v10[0] = 0;
  v10[1] = v10;
  v10[2] = 0x2020000000;
  v11 = 0;
  kvCacheManager = self->_kvCacheManager;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __70__SGSqlEntityStore_rebuildContactDetailsCacheWithShouldContinueBlock___block_invoke;
  v7[3] = &unk_1E7DB0668;
  v7[4] = self;
  v6 = v4;
  v8 = v6;
  v9 = v10;
  -[SGKeyValueCacheManager replaceCacheOfType:block:](kvCacheManager, "replaceCacheOfType:block:", 0, v7);

  _Block_object_dispose(v10, 8);
}

- (id)contactIdsMergedWithMasterEntityId:(id)a3
{
  id v5;
  SGSqliteDatabase *db;
  uint64_t v7;
  id v8;
  id v9;
  void *v11;
  _QWORD v12[5];
  _QWORD v13[4];
  id v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  void (*v19)(uint64_t);
  id v20;

  v5 = a3;
  if (objc_msgSend(v5, "tableId"))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore.m"), 2480, CFSTR("RecordId with unexpected table: %@"), v5);

  }
  v15 = 0;
  v16 = &v15;
  v17 = 0x3032000000;
  v18 = __Block_byref_object_copy__22479;
  v19 = __Block_byref_object_dispose__22480;
  v20 = 0;
  v20 = (id)objc_opt_new();
  db = self->_db;
  v7 = MEMORY[0x1E0C809B0];
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = __55__SGSqlEntityStore_contactIdsMergedWithMasterEntityId___block_invoke;
  v13[3] = &unk_1E7DB7720;
  v8 = v5;
  v14 = v8;
  v12[0] = v7;
  v12[1] = 3221225472;
  v12[2] = __55__SGSqlEntityStore_contactIdsMergedWithMasterEntityId___block_invoke_2;
  v12[3] = &unk_1E7DB51B8;
  v12[4] = &v15;
  -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](db, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("SELECT id FROM entity WHERE entityType = :pseudo AND masterEntityId = :masterEntityId AND id != masterEntityId"), v13, v12, 0);
  v9 = (id)v16[5];

  _Block_object_dispose(&v15, 8);
  return v9;
}

- (id)eventFromSqlResult:(sqlite3_stmt *)a3
{
  void *v3;
  void *v4;

  -[SGSqlEntityStore entityFromSqlResult:](self, "entityFromSqlResult:", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  +[SGStorageEvent storageEventFromEntity:](SGStorageEvent, "storageEventFromEntity:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

- (id)_filterOutOlderVersionsOfPseudoEvents:(id)a3
{
  sgMapAndFilter();
  return (id)objc_claimAutoreleasedReturnValue();
}

- (BOOL)eventIsCancelled:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  id v9;
  id v10;
  BOOL v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  void *v21;
  void *v22;
  double v23;
  double v24;
  double v25;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _QWORD v31[4];
  id v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  char v37;
  _BYTE v38[128];
  _QWORD v39[2];

  v39[1] = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v34 = 0;
  v35 = &v34;
  v36 = 0x2020000000;
  v37 = 0;
  objc_msgSend(v4, "duplicateKey");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "entityKey");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "duplicateKey");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "entityType");
  v31[0] = MEMORY[0x1E0C809B0];
  v31[1] = 3221225472;
  v31[2] = __37__SGSqlEntityStore_eventIsCancelled___block_invoke;
  v31[3] = &unk_1E7DB06F8;
  v9 = v4;
  v32 = v9;
  v33 = &v34;
  v10 = -[SGSqlEntityStore loadEntitiesByEntityKey:entityType:resolveDuplicates:](self, "loadEntitiesByEntityKey:entityType:resolveDuplicates:", v6, v8, v31);

  if (*((_BYTE *)v35 + 24))
  {
    v11 = 1;
  }
  else
  {
    objc_msgSend(v9, "extraKeyTag");
    v12 = objc_claimAutoreleasedReturnValue();
    v13 = (void *)v12;
    if (v12)
    {
      v39[0] = v12;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v39, 1);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      -[SGSqlEntityStore duplicateKeysMatchingAnyTag:](self, "duplicateKeysMatchingAnyTag:", v14);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "objectForKeyedSubscript:", v13);
      v16 = (void *)objc_claimAutoreleasedReturnValue();

      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v17 = v16;
      v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v27, v38, 16);
      if (v18)
      {
        v19 = *(_QWORD *)v28;
        while (2)
        {
          for (i = 0; i != v18; ++i)
          {
            if (*(_QWORD *)v28 != v19)
              objc_enumerationMutation(v17);
            v21 = *(void **)(*((_QWORD *)&v27 + 1) + 8 * i);
            if (objc_msgSend(v21, "entityType", (_QWORD)v27) == 2)
            {
              -[SGSqlEntityStore loadEntityByKey:](self, "loadEntityByKey:", v21);
              v22 = (void *)objc_claimAutoreleasedReturnValue();
              if (objc_msgSend(v22, "isCancelled"))
              {
                objc_msgSend(v22, "creationTimestamp");
                v24 = v23;
                objc_msgSend(v9, "creationTimestamp");
                if (v24 >= v25)
                {

                  v11 = 1;
                  goto LABEL_18;
                }
              }

            }
          }
          v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v27, v38, 16);
          if (v18)
            continue;
          break;
        }
      }
      v11 = 0;
LABEL_18:

    }
    else
    {
      v11 = 0;
    }

  }
  _Block_object_dispose(&v34, 8);

  return v11;
}

- (id)_filterOutCancelledEvents:(id)a3
{
  sgMapAndFilter();
  return (id)objc_claimAutoreleasedReturnValue();
}

- (id)_filterOutAllButAcceptedWithUpdatedFields:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  void *v13;
  SGSqliteDatabase *db;
  id v15;
  id v16;
  id v17;
  void *v18;
  id v19;
  _QWORD v21[5];
  id v22;
  id v23;
  id v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[128];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)objc_opt_new();
  v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", objc_msgSend(v4, "count"));
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v7 = v4;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v25, v29, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v26;
    do
    {
      for (i = 0; i != v9; ++i)
      {
        if (*(_QWORD *)v26 != v10)
          objc_enumerationMutation(v7);
        v12 = *(void **)(*((_QWORD *)&v25 + 1) + 8 * i);
        objc_msgSend(v12, "recordId");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "setObject:forKeyedSubscript:", v12, v13);

      }
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v25, v29, 16);
    }
    while (v9);
  }

  db = self->_db;
  v21[0] = MEMORY[0x1E0C809B0];
  v21[1] = 3221225472;
  v21[2] = __62__SGSqlEntityStore__filterOutAllButAcceptedWithUpdatedFields___block_invoke;
  v21[3] = &unk_1E7DB77B0;
  v21[4] = self;
  v22 = v7;
  v23 = v6;
  v15 = v5;
  v24 = v15;
  v16 = v6;
  v17 = v7;
  -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v21);
  v18 = v24;
  v19 = v15;

  return v19;
}

- (id)suggestEventsStartingAt:(SGUnixTimestamp_)a3 endingAt:(SGUnixTimestamp_)a4 limitTo:(unint64_t)a5 options:(unsigned int)a6
{
  return -[SGSqlEntityStore suggestEventsStartingAt:endingAt:limitTo:additionalWhereClause:options:onPrep:](self, "suggestEventsStartingAt:endingAt:limitTo:additionalWhereClause:options:onPrep:", a5, 0, *(_QWORD *)&a6, 0, a3.secondsFromUnixEpoch, a4.secondsFromUnixEpoch);
}

- (id)suggestEventsStartingAt:(SGUnixTimestamp_)a3 endingAt:(SGUnixTimestamp_)a4 prefix:(id)a5 limitTo:(unint64_t)a6 options:(unsigned int)a7
{
  uint64_t v7;
  id v12;
  id v13;
  void *v14;
  _QWORD v16[5];
  id v17;

  v7 = *(_QWORD *)&a7;
  v12 = a5;
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3221225472;
  v16[2] = __76__SGSqlEntityStore_suggestEventsStartingAt_endingAt_prefix_limitTo_options___block_invoke;
  v16[3] = &unk_1E7DB5190;
  v16[4] = self;
  v17 = v12;
  v13 = v12;
  -[SGSqlEntityStore suggestEventsStartingAt:endingAt:limitTo:additionalWhereClause:options:onPrep:](self, "suggestEventsStartingAt:endingAt:limitTo:additionalWhereClause:options:onPrep:", a6, CFSTR("AND title LIKE :prefix ESCAPE '!'"), v7, v16, a3.secondsFromUnixEpoch, a4.secondsFromUnixEpoch);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  return v14;
}

- (id)suggestEventsStartingAt:(SGUnixTimestamp_)a3 endingAt:(SGUnixTimestamp_)a4 limitTo:(unint64_t)a5
{
  return -[SGSqlEntityStore suggestEventsStartingAt:endingAt:limitTo:options:](self, "suggestEventsStartingAt:endingAt:limitTo:options:", a5, 0, a3.secondsFromUnixEpoch, a4.secondsFromUnixEpoch);
}

- (id)suggestEventsStartingAt:(SGUnixTimestamp_)a3 endingAt:(SGUnixTimestamp_)a4 prefix:(id)a5 limitTo:(unint64_t)a6
{
  return -[SGSqlEntityStore suggestEventsStartingAt:endingAt:prefix:limitTo:options:](self, "suggestEventsStartingAt:endingAt:prefix:limitTo:options:", a5, a6, 0, a3.secondsFromUnixEpoch, a4.secondsFromUnixEpoch);
}

- (id)suggestEventsStartingAt:(SGUnixTimestamp_)a3 endingAt:(SGUnixTimestamp_)a4 limitTo:(unint64_t)a5 additionalWhereClause:(id)a6 options:(unsigned int)a7 onPrep:(id)a8
{
  __int16 v9;
  __CFString *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __CFString *v20;
  void *v21;
  void *v22;
  int v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  SGSqliteDatabase *db;
  id v30;
  id v31;
  NSObject *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(uint64_t, sqlite3_stmt *);
  void *v44;
  SGSqlEntityStore *v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(uint64_t, uint64_t);
  void *v50;
  id v51;
  double secondsFromUnixEpoch;
  double v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint8_t buf[4];
  uint64_t v58;
  __int16 v59;
  double v60;
  __int16 v61;
  double v62;
  __int16 v63;
  unint64_t v64;
  uint64_t v65;

  v9 = a7;
  v65 = *MEMORY[0x1E0C80C00];
  v14 = (__CFString *)a6;
  v15 = a8;
  objc_msgSend(MEMORY[0x1E0D19940], "toFloatingTime:", a3.secondsFromUnixEpoch);
  v17 = v16;
  objc_msgSend(MEMORY[0x1E0D19940], "toFloatingTime:", a4.secondsFromUnixEpoch);
  v19 = v18;
  if (v14)
    v20 = v14;
  else
    v20 = &stru_1E7DB83A8;
  v21 = (void *)-[__CFString mutableCopy](v20, "mutableCopy");
  v22 = v21;
  v23 = v9;
  if (v9 == 1)
    v21 = (void *)objc_msgSend(v21, "appendString:", CFSTR(" AND id IN (SELECT entityId FROM confirmedFieldValues WHERE maybeChanged=1)"));
  v24 = (void *)MEMORY[0x1C3BD4F6C](v21);
  objc_msgSend(CFSTR("WHERE (e.floatingRange = 0 AND ((:queryStart == e.timeRangeStart) OR (NOT (:queryStart >= e.timeRangeEnd OR :queryEnd <= e.timeRangeStart))) OR e.floatingRange = 1 AND ((:fltQueryStart == e.timeRangeStart) OR (NOT (:fltQueryStart >= e.timeRangeEnd OR :fltQueryEnd <= e.timeRangeStart))))AND e.entityType = :pseudoEventType AND e.state != :deleted "), "stringByAppendingString:", v22);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v25, "stringByAppendingString:", CFSTR(" ORDER BY e.timeRangeStart ASC LIMIT :limit"));
  v26 = (void *)objc_claimAutoreleasedReturnValue();

  objc_autoreleasePoolPop(v24);
  -[SGSqlEntityStore selectEntityQuery:](self, "selectEntityQuery:", v26);
  v27 = (void *)objc_claimAutoreleasedReturnValue();

  v28 = (void *)objc_opt_new();
  db = self->_db;
  v47 = MEMORY[0x1E0C809B0];
  v48 = 3221225472;
  v49 = __98__SGSqlEntityStore_suggestEventsStartingAt_endingAt_limitTo_additionalWhereClause_options_onPrep___block_invoke;
  v50 = &unk_1E7DB07C8;
  secondsFromUnixEpoch = a3.secondsFromUnixEpoch;
  v53 = a4.secondsFromUnixEpoch;
  v54 = v17;
  v55 = v19;
  v56 = a5;
  v51 = v15;
  v41 = MEMORY[0x1E0C809B0];
  v42 = 3221225472;
  v43 = __98__SGSqlEntityStore_suggestEventsStartingAt_endingAt_limitTo_additionalWhereClause_options_onPrep___block_invoke_2;
  v44 = &unk_1E7DB53F8;
  v45 = self;
  v30 = v28;
  v46 = v30;
  v31 = v15;
  -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](db, "prepAndRunQuery:onPrep:onRow:onError:", v27, &v47, &v41, 0);
  sgLogHandle();
  v32 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
  {
    v39 = objc_msgSend(v30, "count", v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, *(_QWORD *)&secondsFromUnixEpoch, *(_QWORD *)&v53, v54, v55, v56);
    *(_DWORD *)buf = 134218752;
    v58 = v39;
    v59 = 2048;
    v60 = a3.secondsFromUnixEpoch;
    v61 = 2048;
    v62 = a4.secondsFromUnixEpoch;
    v63 = 2048;
    v64 = a5;
    _os_log_debug_impl(&dword_1C3607000, v32, OS_LOG_TYPE_DEBUG, "Loaded %lu suggested events from %f to %f (max %lu)", buf, 0x2Au);
  }

  -[SGSqlEntityStore _filterOutOlderVersionsOfPseudoEvents:](self, "_filterOutOlderVersionsOfPseudoEvents:", v30);
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  -[SGSqlEntityStore filterOutUndisplayableEntities:](self, "filterOutUndisplayableEntities:", v33);
  v34 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9 != 2 && (v9 & 0x100) == 0)
  {
    -[SGSqlEntityStore _filterOutCancelledEvents:](self, "_filterOutCancelledEvents:", v34);
    v35 = objc_claimAutoreleasedReturnValue();

    v34 = (void *)v35;
  }
  if (v23 == 1)
  {
    -[SGSqlEntityStore _filterOutAllButAcceptedWithUpdatedFields:](self, "_filterOutAllButAcceptedWithUpdatedFields:", v34);
    v36 = objc_claimAutoreleasedReturnValue();

    v34 = (void *)v36;
  }
  sgLogHandle();
  v37 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
  {
    v40 = objc_msgSend(v34, "count");
    *(_DWORD *)buf = 134217984;
    v58 = v40;
    _os_log_debug_impl(&dword_1C3607000, v37, OS_LOG_TYPE_DEBUG, "Returning %lu suggested events after filtering", buf, 0xCu);
  }

  return v34;
}

- (void)confirmFieldValues:(id)a3 forEntity:(id)a4
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  NSObject *v11;
  SGSqliteDatabase *db;
  id v13;
  id v14;
  void *v15;
  void *v16;
  _QWORD v17[4];
  id v18;
  SGSqlEntityStore *v19;
  id v20;
  uint8_t buf[16];

  v7 = a3;
  v8 = a4;
  v9 = v8;
  if (v7)
  {
    if (v8)
      goto LABEL_3;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore.m"), 2761, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("fieldValues"));

    if (v9)
      goto LABEL_3;
  }
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore.m"), 2762, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("duplicateKey"));

LABEL_3:
  -[SGSqlEntityStore loadEventByDuplicateKey:](self, "loadEventByDuplicateKey:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (v10)
  {
    -[SGSuggestHistory confirmFieldValues:forStorageEvent:](self->_history, "confirmFieldValues:forStorageEvent:", v7, v10);
  }
  else
  {
    sgLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1C3607000, v11, OS_LOG_TYPE_ERROR, "Couldn't load event with given duplicate key", buf, 2u);
    }

  }
  db = self->_db;
  v17[0] = MEMORY[0x1E0C809B0];
  v17[1] = 3221225472;
  v17[2] = __49__SGSqlEntityStore_confirmFieldValues_forEntity___block_invoke;
  v17[3] = &unk_1E7DB7800;
  v18 = v9;
  v19 = self;
  v20 = v7;
  v13 = v7;
  v14 = v9;
  -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v17);

}

- (id)rejectFieldValuesForRecordId:(id)a3
{
  id v4;
  SGSqliteDatabase *db;
  id v6;
  id v7;
  _QWORD v9[5];
  id v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  void (*v16)(uint64_t);
  id v17;

  v4 = a3;
  v12 = 0;
  v13 = &v12;
  v14 = 0x3032000000;
  v15 = __Block_byref_object_copy__22479;
  v16 = __Block_byref_object_dispose__22480;
  v17 = 0;
  db = self->_db;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __49__SGSqlEntityStore_rejectFieldValuesForRecordId___block_invoke;
  v9[3] = &unk_1E7DB7878;
  v9[4] = self;
  v6 = v4;
  v10 = v6;
  v11 = &v12;
  -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v9);
  v7 = (id)v13[5];

  _Block_object_dispose(&v12, 8);
  return v7;
}

- (id)confirmedFieldValuesForEntity:(id)a3
{
  id v5;
  SGSqliteDatabase *db;
  uint64_t v7;
  id v8;
  id v9;
  void *v11;
  _QWORD v12[5];
  _QWORD v13[4];
  id v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  void (*v19)(uint64_t);
  id v20;

  v5 = a3;
  if (!v5)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore.m"), 2824, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("duplicateKey"));

  }
  v15 = 0;
  v16 = &v15;
  v17 = 0x3032000000;
  v18 = __Block_byref_object_copy__22479;
  v19 = __Block_byref_object_dispose__22480;
  v20 = 0;
  db = self->_db;
  v7 = MEMORY[0x1E0C809B0];
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = __50__SGSqlEntityStore_confirmedFieldValuesForEntity___block_invoke;
  v13[3] = &unk_1E7DB7720;
  v8 = v5;
  v14 = v8;
  v12[0] = v7;
  v12[1] = 3221225472;
  v12[2] = __50__SGSqlEntityStore_confirmedFieldValuesForEntity___block_invoke_2;
  v12[3] = &unk_1E7DB51B8;
  v12[4] = &v15;
  -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](db, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("SELECT c.fieldValues FROM confirmedFieldValues AS c INNER JOIN entity AS e ON c.entityId = e.id INNER JOIN entityParentage AS ep ON e.id = ep.childId WHERE e.entityKey = :entityKey AND e.entityType = :entityType AND ep.parentKey = :parentKey"), v13, v12, 0);
  v9 = (id)v16[5];

  _Block_object_dispose(&v15, 8);
  return v9;
}

- (id)confirmedFieldValuesForEvent:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  SGSuggestHistory *history;
  void *v14;
  void *v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "fieldsToSaveOnConfirmation");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)objc_opt_new();
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v7 = v5;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v18;
    do
    {
      for (i = 0; i != v9; ++i)
      {
        if (*(_QWORD *)v18 != v10)
          objc_enumerationMutation(v7);
        v12 = *(_QWORD *)(*((_QWORD *)&v17 + 1) + 8 * i);
        history = self->_history;
        objc_msgSend(v7, "objectForKeyedSubscript:", v12, (_QWORD)v17);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        LODWORD(history) = -[SGSuggestHistory hasConfirmedField:value:forStorageEvent:](history, "hasConfirmedField:value:forStorageEvent:", v12, v14, v4);

        if ((_DWORD)history)
        {
          objc_msgSend(v7, "objectForKeyedSubscript:", v12);
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v6, "setObject:forKey:", v15, v12);

        }
      }
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
    }
    while (v9);
  }

  return v6;
}

- (BOOL)rejectRealtimeEvent:(id)a3 error:(id *)a4
{
  id v7;
  void *v8;
  void *v9;
  SGSqliteDatabase *db;
  id v11;
  char v12;
  void *v14;
  _QWORD v15[5];
  id v16;
  uint64_t *v17;
  id *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  char v22;

  v7 = a3;
  objc_msgSend(v7, "event");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "uniqueKey");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v9)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore.m"), 2862, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("realtimeEvent.event.uniqueKey"));

  }
  v19 = 0;
  v20 = &v19;
  v21 = 0x2020000000;
  v22 = 0;
  db = self->_db;
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = __46__SGSqlEntityStore_rejectRealtimeEvent_error___block_invoke;
  v15[3] = &unk_1E7DB5318;
  v15[4] = self;
  v11 = v7;
  v16 = v11;
  v17 = &v19;
  v18 = a4;
  -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v15);
  v12 = *((_BYTE *)v20 + 24);

  _Block_object_dispose(&v19, 8);
  return v12;
}

- (BOOL)confirmRealtimeEvent:(id)a3 error:(id *)a4
{
  id v7;
  void *v8;
  void *v9;
  SGSqliteDatabase *db;
  id v11;
  char v12;
  void *v14;
  _QWORD v15[5];
  id v16;
  uint64_t *v17;
  id *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  char v22;

  v7 = a3;
  objc_msgSend(v7, "event");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "uniqueKey");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v9)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore.m"), 2892, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("realtimeEvent.event.uniqueKey"));

  }
  v19 = 0;
  v20 = &v19;
  v21 = 0x2020000000;
  v22 = 0;
  db = self->_db;
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = __47__SGSqlEntityStore_confirmRealtimeEvent_error___block_invoke;
  v15[3] = &unk_1E7DB5318;
  v15[4] = self;
  v11 = v7;
  v16 = v11;
  v17 = &v19;
  v18 = a4;
  -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v15);
  v12 = *((_BYTE *)v20 + 24);

  _Block_object_dispose(&v19, 8);
  return v12;
}

- (BOOL)rejectRealtimeContact:(id)a3 error:(id *)a4
{
  id v6;
  void *v7;
  void *v8;
  void *v9;
  SGJournal *journal;
  SGJournalEntry *v11;
  BOOL v12;

  v6 = a3;
  -[SGSuggestHistory rejectRealtimeContact:](self->_history, "rejectRealtimeContact:", v6);
  if (objc_msgSend(v6, "isHarvested"))
  {
    objc_msgSend(v6, "contact");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "recordId");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[SGSqlEntityStore loadStorageContactByRecordId:error:](self, "loadStorageContactByRecordId:error:", v8, a4);
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v9)
    {
      v12 = 0;
      goto LABEL_6;
    }
    journal = self->_journal;
    v11 = -[SGJournalEntry initWithOperation:contact:]([SGJournalEntry alloc], "initWithOperation:contact:", 13, v9);
    -[SGJournal addEntry:](journal, "addEntry:", v11);

  }
  v12 = 1;
LABEL_6:

  return v12;
}

- (BOOL)confirmRealtimeContact:(id)a3 error:(id *)a4
{
  id v6;
  void *v7;
  NSObject *v8;
  uint64_t v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  SGJournal *journal;
  SGJournalEntry *v15;
  id v16;
  BOOL v17;
  _QWORD v19[5];
  id v20;
  _QWORD v21[5];
  id v22;
  uint8_t buf[4];
  void *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  objc_msgSend(v6, "contact");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  sgLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138412290;
    v24 = v7;
    _os_log_debug_impl(&dword_1C3607000, v8, OS_LOG_TYPE_DEBUG, "Confirming details as workaround for Contacts search for realtime contact %@", buf, 0xCu);
  }

  v9 = MEMORY[0x1E0C809B0];
  v21[0] = MEMORY[0x1E0C809B0];
  v21[1] = 3221225472;
  v21[2] = __49__SGSqlEntityStore_confirmRealtimeContact_error___block_invoke;
  v21[3] = &unk_1E7DB0810;
  v21[4] = self;
  v10 = v7;
  v22 = v10;
  objc_msgSend(v10, "enumerateDetailsWithBlock:", v21);
  if (objc_msgSend(v6, "isHarvested"))
  {
    objc_msgSend(v6, "contact");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "recordId");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    -[SGSqlEntityStore loadStorageContactByRecordId:error:](self, "loadStorageContactByRecordId:error:", v12, a4);
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v13)
    {
      v17 = 0;
      goto LABEL_7;
    }
    journal = self->_journal;
    v15 = -[SGJournalEntry initWithOperation:contact:]([SGJournalEntry alloc], "initWithOperation:contact:", 12, v13);
    -[SGJournal addEntry:](journal, "addEntry:", v15);

    objc_msgSend(v13, "convertToContact:", self);
    v19[0] = v9;
    v19[1] = 3221225472;
    v19[2] = __49__SGSqlEntityStore_confirmRealtimeContact_error___block_invoke_2;
    v19[3] = &unk_1E7DB0810;
    v19[4] = self;
    v20 = (id)objc_claimAutoreleasedReturnValue();
    v16 = v20;
    objc_msgSend(v16, "enumerateDetailsWithBlock:", v19);

  }
  v17 = 1;
LABEL_7:

  return v17;
}

- (BOOL)confirmEventByRecordId:(id)a3 error:(id *)a4
{
  id v6;
  void *v7;
  BOOL v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v16;
  void *v17;
  uint8_t buf[4];
  id v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  -[SGSqlEntityStore loadEventByRecordId:](self, "loadEventByRecordId:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (v7)
  {
    v8 = -[SGSqlEntityStore confirmStoredEvent:error:](self, "confirmStoredEvent:error:", v7, a4);
  }
  else
  {
    sgLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v19 = v6;
      _os_log_error_impl(&dword_1C3607000, v9, OS_LOG_TYPE_ERROR, "Could not load event to confirm (recordId=%@)", buf, 0xCu);
    }

    v10 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("Could not load event to confirm (recordId=%@)"), v6);
    if (a4)
    {
      v11 = (void *)MEMORY[0x1E0CB35C8];
      v16 = *MEMORY[0x1E0CB2D50];
      objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "localizedStringForKey:value:table:", v10, &stru_1E7DB83A8, 0);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = v13;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v17, &v16, 1);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "errorWithDomain:code:userInfo:", CFSTR("SGSqlEntityStoreErrorDomain"), 0, v14);
      *a4 = (id)objc_claimAutoreleasedReturnValue();

    }
    v8 = 0;
  }

  return v8;
}

- (BOOL)confirmStoredEvent:(id)a3 error:(id *)a4
{
  SGSuggestHistory *history;
  id v6;
  void *v7;
  void *v8;
  SGJournal *journal;
  SGJournalEntry *v10;

  history = self->_history;
  v6 = a3;
  -[SGSuggestHistory confirmStorageEvent:](history, "confirmStorageEvent:", v6);
  objc_msgSend(v6, "fieldsToSaveOnConfirmation");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "duplicateKey");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[SGSqlEntityStore confirmFieldValues:forEntity:](self, "confirmFieldValues:forEntity:", v7, v8);

  journal = self->_journal;
  v10 = -[SGJournalEntry initWithOperation:event:]([SGJournalEntry alloc], "initWithOperation:event:", 5, v6);

  -[SGJournal addEntry:](journal, "addEntry:", v10);
  return 1;
}

- (BOOL)rejectEventByRecordId:(id)a3 error:(id *)a4
{
  id v6;
  void *v7;
  BOOL v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v16;
  void *v17;
  uint8_t buf[4];
  id v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  -[SGSqlEntityStore loadEventByRecordId:](self, "loadEventByRecordId:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (v7)
  {
    v8 = -[SGSqlEntityStore rejectStoredEvent:error:](self, "rejectStoredEvent:error:", v7, a4);
  }
  else
  {
    sgLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v19 = v6;
      _os_log_error_impl(&dword_1C3607000, v9, OS_LOG_TYPE_ERROR, "Could not load event to reject (%@)", buf, 0xCu);
    }

    v10 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("Could not load event to reject (%@)"), v6);
    if (a4)
    {
      v11 = (void *)MEMORY[0x1E0CB35C8];
      v16 = *MEMORY[0x1E0CB2D50];
      objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "localizedStringForKey:value:table:", v10, &stru_1E7DB83A8, 0);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = v13;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v17, &v16, 1);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "errorWithDomain:code:userInfo:", CFSTR("SGSqlEntityStoreErrorDomain"), 0, v14);
      *a4 = (id)objc_claimAutoreleasedReturnValue();

    }
    v8 = 0;
  }

  return v8;
}

- (BOOL)confirm:(BOOL)a3 orRejectContactByRecordID:(id)a4 error:(id *)a5
{
  _BOOL4 v5;
  void *v7;
  SGJournal *journal;
  SGJournalEntry *v9;
  uint64_t v10;
  SGJournalEntry *v11;

  v5 = a3;
  -[SGSqlEntityStore loadStorageContactByRecordId:error:](self, "loadStorageContactByRecordId:error:", a4, a5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (v7)
  {
    journal = self->_journal;
    v9 = [SGJournalEntry alloc];
    if (v5)
      v10 = 12;
    else
      v10 = 13;
    v11 = -[SGJournalEntry initWithOperation:contact:](v9, "initWithOperation:contact:", v10, v7);
    -[SGJournal addEntry:](journal, "addEntry:", v11);

  }
  return v7 != 0;
}

- (BOOL)confirmContactByRecordID:(id)a3 error:(id *)a4
{
  id v6;

  v6 = a3;
  -[SGSqlEntityStore logConfirmPercentAfterContactConfirmation](self, "logConfirmPercentAfterContactConfirmation");
  LOBYTE(a4) = -[SGSqlEntityStore confirm:orRejectContactByRecordID:error:](self, "confirm:orRejectContactByRecordID:error:", 1, v6, a4);

  return (char)a4;
}

- (BOOL)rejectContactByRecordID:(id)a3 error:(id *)a4
{
  id v6;
  void *v7;
  void *v8;

  v6 = a3;
  -[SGSqlEntityStore logConfirmPercentAfterContactRejection](self, "logConfirmPercentAfterContactRejection");
  -[SGSqlEntityStore masterEntityIdForContactOrContactDetailRecord:](self, "masterEntityIdForContactOrContactDetailRecord:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  -[SGSqlEntityStore kvCacheManager](self, "kvCacheManager");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "deleteValueByRecordId:", v7);

  LOBYTE(a4) = -[SGSqlEntityStore confirm:orRejectContactByRecordID:error:](self, "confirm:orRejectContactByRecordID:error:", 0, v6, a4);
  return (char)a4;
}

- (BOOL)confirmContactDetailByRecordID:(id)a3 error:(id *)a4
{
  -[SGSqlEntityStore logConfirmPercentAfterContactDetailConfirmation](self, "logConfirmPercentAfterContactDetailConfirmation", a3, a4);
  return 1;
}

- (BOOL)rejectContactDetailByRecordID:(id)a3 error:(id *)a4
{
  id v5;
  void *v6;
  void *v7;

  v5 = a3;
  -[SGSqlEntityStore logConfirmPercentAfterContactDetailRejection](self, "logConfirmPercentAfterContactDetailRejection");
  -[SGSqlEntityStore masterEntityIdForContactOrContactDetailRecord:](self, "masterEntityIdForContactOrContactDetailRecord:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    -[SGSqlEntityStore kvCacheManager](self, "kvCacheManager");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "deleteValueByRecordId:", v6);

  }
  return 1;
}

- (BOOL)rejectStoredEvent:(id)a3 error:(id *)a4
{
  SGSuggestHistory *history;
  id v6;
  SGJournal *journal;
  SGJournalEntry *v8;

  history = self->_history;
  v6 = a3;
  -[SGSuggestHistory rejectStorageEvent:](history, "rejectStorageEvent:", v6);
  journal = self->_journal;
  v8 = -[SGJournalEntry initWithOperation:event:]([SGJournalEntry alloc], "initWithOperation:event:", 7, v6);

  -[SGJournal addEntry:](journal, "addEntry:", v8);
  return 1;
}

- (BOOL)confirmReminderByRecordId:(id)a3 error:(id *)a4
{
  id v6;
  void *v7;
  BOOL v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  NSObject *v14;
  uint8_t buf[4];
  void *v17;
  uint64_t v18;
  _QWORD v19[2];

  v19[1] = *MEMORY[0x1E0C80C00];
  v6 = a3;
  -[SGSqlEntityStore loadReminderByRecordId:](self, "loadReminderByRecordId:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (v7)
  {
    v8 = -[SGSqlEntityStore confirmStoredReminder:error:](self, "confirmStoredReminder:error:", v7, a4);
  }
  else
  {
    v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("Could not load reminder to confirm (recordId=%@)"), v6);
    if (a4)
    {
      v10 = (void *)MEMORY[0x1E0CB35C8];
      v18 = *MEMORY[0x1E0CB2D50];
      objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "localizedStringForKey:value:table:", v9, &stru_1E7DB83A8, 0);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v19[0] = v12;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v19, &v18, 1);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "errorWithDomain:code:userInfo:", CFSTR("SGSqlEntityStoreErrorDomain"), 0, v13);
      *a4 = (id)objc_claimAutoreleasedReturnValue();

    }
    sgRemindersLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v17 = v9;
      _os_log_error_impl(&dword_1C3607000, v14, OS_LOG_TYPE_ERROR, "%@", buf, 0xCu);
    }

    v8 = 0;
  }

  return v8;
}

- (BOOL)rejectReminderByRecordId:(id)a3 error:(id *)a4
{
  id v6;
  void *v7;
  BOOL v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  NSObject *v14;
  uint8_t buf[4];
  void *v17;
  uint64_t v18;
  _QWORD v19[2];

  v19[1] = *MEMORY[0x1E0C80C00];
  v6 = a3;
  -[SGSqlEntityStore loadReminderByRecordId:](self, "loadReminderByRecordId:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (v7)
  {
    v8 = -[SGSqlEntityStore rejectStoredReminder:error:](self, "rejectStoredReminder:error:", v7, a4);
  }
  else
  {
    v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("Could not load reminder to reject (recordId=%@)"), v6);
    if (a4)
    {
      v10 = (void *)MEMORY[0x1E0CB35C8];
      v18 = *MEMORY[0x1E0CB2D50];
      objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "localizedStringForKey:value:table:", v9, &stru_1E7DB83A8, 0);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v19[0] = v12;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v19, &v18, 1);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "errorWithDomain:code:userInfo:", CFSTR("SGSqlEntityStoreErrorDomain"), 0, v13);
      *a4 = (id)objc_claimAutoreleasedReturnValue();

    }
    sgRemindersLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v17 = v9;
      _os_log_error_impl(&dword_1C3607000, v14, OS_LOG_TYPE_ERROR, "%@", buf, 0xCu);
    }

    v8 = 0;
  }

  return v8;
}

- (BOOL)rejectReminderByKey:(id)a3 error:(id *)a4
{
  id v6;
  void *v7;
  BOOL v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  NSObject *v14;
  uint8_t buf[4];
  void *v17;
  uint64_t v18;
  _QWORD v19[2];

  v19[1] = *MEMORY[0x1E0C80C00];
  v6 = a3;
  -[SGSqlEntityStore loadReminderByKey:](self, "loadReminderByKey:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (v7)
  {
    v8 = -[SGSqlEntityStore rejectStoredReminder:error:](self, "rejectStoredReminder:error:", v7, a4);
  }
  else
  {
    v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("Could not load reminder to reject (SGDuplicateKey=%@)"), v6);
    if (a4)
    {
      v10 = (void *)MEMORY[0x1E0CB35C8];
      v18 = *MEMORY[0x1E0CB2D50];
      objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "localizedStringForKey:value:table:", v9, &stru_1E7DB83A8, 0);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v19[0] = v12;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v19, &v18, 1);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "errorWithDomain:code:userInfo:", CFSTR("SGSqlEntityStoreErrorDomain"), 0, v13);
      *a4 = (id)objc_claimAutoreleasedReturnValue();

    }
    sgRemindersLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v17 = v9;
      _os_log_error_impl(&dword_1C3607000, v14, OS_LOG_TYPE_ERROR, "%@", buf, 0xCu);
    }

    v8 = 0;
  }

  return v8;
}

- (BOOL)reminderAlarmTriggeredForRecordId:(id)a3 error:(id *)a4
{
  id v6;
  void *v7;
  BOOL v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  NSObject *v14;
  uint8_t buf[4];
  void *v17;
  uint64_t v18;
  _QWORD v19[2];

  v19[1] = *MEMORY[0x1E0C80C00];
  v6 = a3;
  -[SGSqlEntityStore loadReminderByRecordId:](self, "loadReminderByRecordId:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (v7)
  {
    v8 = -[SGSqlEntityStore reminderAlarmTriggeredForStorageReminder:error:](self, "reminderAlarmTriggeredForStorageReminder:error:", v7, a4);
  }
  else
  {
    v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("Could not load reminder to reject (recordId=%@)"), v6);
    if (a4)
    {
      v10 = (void *)MEMORY[0x1E0CB35C8];
      v18 = *MEMORY[0x1E0CB2D50];
      objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "localizedStringForKey:value:table:", v9, &stru_1E7DB83A8, 0);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v19[0] = v12;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v19, &v18, 1);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "errorWithDomain:code:userInfo:", CFSTR("SGSqlEntityStoreErrorDomain"), 0, v13);
      *a4 = (id)objc_claimAutoreleasedReturnValue();

    }
    sgRemindersLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v17 = v9;
      _os_log_error_impl(&dword_1C3607000, v14, OS_LOG_TYPE_ERROR, "%@", buf, 0xCu);
    }

    v8 = 0;
  }

  return v8;
}

- (BOOL)confirmStoredReminder:(id)a3 error:(id *)a4
{
  SGSuggestHistory *history;
  id v6;
  SGJournal *journal;
  SGJournalEntry *v8;

  history = self->_history;
  v6 = a3;
  -[SGSuggestHistory confirmReminder:](history, "confirmReminder:", v6);
  journal = self->_journal;
  v8 = -[SGJournalEntry initWithOperation:reminder:]([SGJournalEntry alloc], "initWithOperation:reminder:", 16, v6);

  -[SGJournal addEntry:](journal, "addEntry:", v8);
  return 1;
}

- (BOOL)rejectStoredReminder:(id)a3 error:(id *)a4
{
  SGSuggestHistory *history;
  id v6;
  SGJournal *journal;
  SGJournalEntry *v8;

  history = self->_history;
  v6 = a3;
  -[SGSuggestHistory rejectReminder:](history, "rejectReminder:", v6);
  journal = self->_journal;
  v8 = -[SGJournalEntry initWithOperation:reminder:]([SGJournalEntry alloc], "initWithOperation:reminder:", 17, v6);

  -[SGJournal addEntry:](journal, "addEntry:", v8);
  return 1;
}

- (BOOL)reminderAlarmTriggeredForStorageReminder:(id)a3 error:(id *)a4
{
  SGJournal *journal;
  id v5;
  SGJournalEntry *v6;

  journal = self->_journal;
  v5 = a3;
  v6 = -[SGJournalEntry initWithOperation:reminder:]([SGJournalEntry alloc], "initWithOperation:reminder:", 18, v5);

  -[SGJournal addEntry:](journal, "addEntry:", v6);
  return 1;
}

- (id)duplicateKeysMatchingAnyTag:(id)a3
{
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  SGSqliteDatabase *db;
  id v13;
  id v14;
  id v15;
  void *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, void *);
  void *v21;
  id v22;
  _QWORD v23[4];
  id v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[128];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v5 = v4;
  }
  else
  {
    v5 = (id)objc_opt_new();
    v25 = 0u;
    v26 = 0u;
    v27 = 0u;
    v28 = 0u;
    v6 = v4;
    v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v25, v29, 16);
    if (v7)
    {
      v8 = v7;
      v9 = *(_QWORD *)v26;
      do
      {
        v10 = 0;
        do
        {
          if (*(_QWORD *)v26 != v9)
            objc_enumerationMutation(v6);
          objc_msgSend(v5, "addObject:", *(_QWORD *)(*((_QWORD *)&v25 + 1) + 8 * v10++));
        }
        while (v8 != v10);
        v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v25, v29, 16);
      }
      while (v8);
    }

  }
  objc_msgSend(v5, "_pas_mappedArrayWithTransform:", &__block_literal_global_389);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  db = self->_db;
  v22 = v11;
  v23[0] = MEMORY[0x1E0C809B0];
  v23[1] = 3221225472;
  v23[2] = __48__SGSqlEntityStore_duplicateKeysMatchingAnyTag___block_invoke_2;
  v23[3] = &unk_1E7DB74A0;
  v24 = v5;
  v18 = MEMORY[0x1E0C809B0];
  v19 = 3221225472;
  v20 = __48__SGSqlEntityStore_duplicateKeysMatchingAnyTag___block_invoke_4;
  v21 = &unk_1E7DB6ED0;
  v13 = v11;
  v14 = v5;
  -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](db, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("SELECT array.rowid, entityKey, entityType, parentKey FROM entityTags JOIN _pas_nsarray(:tagNames) AS array ON entityTags.tag == array.value UNION ALL SELECT array.rowid, key, :emailEntityType, NULL FROM emailTags JOIN _pas_nsarray(:tagNames) AS array ON emailTags.tag == array.value"), v23, &v18, 0);
  v15 = objc_alloc(MEMORY[0x1E0C99D80]);
  v16 = (void *)objc_msgSend(v15, "initWithObjects:forKeys:", v13, v14, v18, v19, v20, v21);

  return v16;
}

- (id)duplicateKeysMatchingAnyEventHash:(id)a3
{
  void *v4;
  void *v5;

  sgMap();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[SGSqlEntityStore _hashWithDuplicateKeysMatchingTags:](self, "_hashWithDuplicateKeysMatchingTags:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

- (id)duplicateKeysMatchingAnyReminderHash:(id)a3
{
  void *v4;
  void *v5;

  sgMap();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[SGSqlEntityStore _hashWithDuplicateKeysMatchingTags:](self, "_hashWithDuplicateKeysMatchingTags:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

- (id)_hashWithDuplicateKeysMatchingTags:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  NSObject *v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint8_t buf[4];
  void *v24;
  _BYTE v25[128];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[SGSqlEntityStore duplicateKeysMatchingAnyTag:](self, "duplicateKeysMatchingAnyTag:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)objc_opt_new();
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v7 = v4;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v19, v25, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v20;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v20 != v10)
          objc_enumerationMutation(v7);
        v12 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * v11);
        v13 = objc_alloc(MEMORY[0x1E0C99D50]);
        objc_msgSend(v12, "value");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = (void *)objc_msgSend(v13, "initWithBase64EncodedString:options:", v14, 0);

        if (v15)
        {
          objc_msgSend(v5, "objectForKeyedSubscript:", v12);
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v6, "setObject:forKeyedSubscript:", v16, v15);

        }
        else
        {
          sgLogHandle();
          v17 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v17, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)buf = 138412290;
            v24 = v12;
            _os_log_fault_impl(&dword_1C3607000, v17, OS_LOG_TYPE_FAULT, "Invalid base64encoded string for tag %@", buf, 0xCu);
          }

          if (_PASEvaluateLogFaultAndProbCrashCriteria())
            abort();
        }

        ++v11;
      }
      while (v9 != v11);
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v19, v25, 16);
    }
    while (v9);
  }

  return v6;
}

- (id)duplicateKeysMatchingInteractionBundleId:(id)a3 andTags:(id)a4
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  SGSqliteDatabase *db;
  id v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  void *v18;
  void *v19;
  _QWORD v20[4];
  id v21;
  _QWORD v22[4];
  id v23;
  id v24;

  v7 = a3;
  v8 = a4;
  if (!v7)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore.m"), 3248, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("bundleId"));

  }
  if (!objc_msgSend(v8, "count"))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore.m"), 3249, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("tags.count != 0"));

  }
  sgMap();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = (void *)objc_opt_new();
  db = self->_db;
  v22[0] = MEMORY[0x1E0C809B0];
  v22[1] = 3221225472;
  v22[2] = __69__SGSqlEntityStore_duplicateKeysMatchingInteractionBundleId_andTags___block_invoke_2;
  v22[3] = &unk_1E7DB6E80;
  v23 = v7;
  v24 = v9;
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 3221225472;
  v20[2] = __69__SGSqlEntityStore_duplicateKeysMatchingInteractionBundleId_andTags___block_invoke_3;
  v20[3] = &unk_1E7DB6ED0;
  v12 = v10;
  v21 = v12;
  v13 = v9;
  v14 = v7;
  -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](db, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("SELECT b.entityKey, b.entityType, b.parentKey FROM entityTags AS i CROSS JOIN entityTags AS b ON b.duplicateKeyHashBlob=i.duplicateKeyHashBlob WHERE b.tag=:interactionBundleIdTag AND i.tag IN _pas_nsarray(:tags)"), v22, v20, 0);
  v15 = v21;
  v16 = v12;

  return v16;
}

- (id)journal
{
  return self->_journal;
}

- (id)loadFullDownloadRequestBatch:(unint64_t)a3
{
  unint64_t v4;
  void *v5;
  SGSqliteDatabase *db;
  id v7;
  _QWORD v9[4];
  id v10;
  _QWORD v11[5];

  if ((uint64_t)a3 >= 1)
    v4 = a3;
  else
    v4 = 0x7FFFFFFFFFFFFFFFLL;
  v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", v4);
  db = self->_db;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __49__SGSqlEntityStore_loadFullDownloadRequestBatch___block_invoke;
  v11[3] = &__block_descriptor_40_e29_v16__0___PASSqliteStatement_8l;
  v11[4] = v4;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __49__SGSqlEntityStore_loadFullDownloadRequestBatch___block_invoke_2;
  v9[3] = &unk_1E7DB6ED0;
  v7 = v5;
  v10 = v7;
  -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](db, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("SELECT key FROM emailMetadata WHERE unlikely(downloadState = :requested) ORDER BY creationTimestamp DESC LIMIT :limit"), v11, v9, 0);

  return v7;
}

- (void)resolveFullDownloadRequests:(id)a3
{
  SGSqliteDatabase *db;
  id v5;
  _QWORD v6[5];
  id v7;

  v5 = a3;
  if (objc_msgSend(v5, "count"))
  {
    db = self->_db;
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = __48__SGSqlEntityStore_resolveFullDownloadRequests___block_invoke;
    v6[3] = &unk_1E7DB6A30;
    v6[4] = self;
    v7 = v5;
    -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v6);

  }
}

- (void)truncateContactDetailTable
{
  SGSqliteDatabase *db;
  _QWORD v3[5];

  db = self->_db;
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __46__SGSqlEntityStore_truncateContactDetailTable__block_invoke;
  v3[3] = &unk_1E7DB56F0;
  v3[4] = self;
  -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v3);
}

- (unint64_t)numberOfRowsInTable:(id)a3
{
  return -[SGSqliteDatabase numberOfRowsInTable:](self->_db, "numberOfRowsInTable:", a3);
}

- (id)dumpTables:(id)a3 columns:(id)a4
{
  id v6;
  id v7;
  unint64_t v8;
  __CFString *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  SGSqliteDatabase *db;
  id v15;
  SGSqlEntityStore *v16;
  void *v17;
  void *v18;
  void *v19;
  __CFString *v20;
  id v22;
  id v23;
  void *v24;
  _QWORD v25[4];
  id v26;
  id v27;

  v6 = a3;
  v7 = a4;
  if (objc_msgSend(v6, "count"))
  {
    v8 = 0;
    v9 = &stru_1E7DB83A8;
    v22 = v7;
    do
    {
      objc_msgSend(v7, "objectAtIndex:", v8);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "objectAtIndex:", v8);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "_pas_componentsJoinedByString:", CFSTR(", "));
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("SELECT %@ FROM %@"), v24, v11);
      v13 = (void *)objc_opt_new();
      db = self->_db;
      v25[0] = MEMORY[0x1E0C809B0];
      v25[1] = 3221225472;
      v25[2] = __39__SGSqlEntityStore_dumpTables_columns___block_invoke_2;
      v25[3] = &unk_1E7DB6BE0;
      v26 = v10;
      v27 = v13;
      v15 = v13;
      v23 = v10;
      -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](db, "prepAndRunSQL:onPrep:onRow:onError:", v12, &__block_literal_global_442, v25, 0);
      objc_msgSend(v15, "_pas_componentsJoinedByString:", CFSTR("|"));
      v16 = self;
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = v6;
      v19 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("%@\n%@"), v11, v17);
      -[__CFString stringByAppendingString:](v9, "stringByAppendingString:", v19);
      v20 = (__CFString *)objc_claimAutoreleasedReturnValue();

      v6 = v18;
      self = v16;
      v7 = v22;

      ++v8;
      v9 = v20;
    }
    while (objc_msgSend(v18, "count") > v8);
  }
  else
  {
    v20 = &stru_1E7DB83A8;
  }

  return v20;
}

- (id)sgmiFeatureStore
{
  return self->_sgmiFeatureStore;
}

- (void)runWithWriteLockAcquired:(id)a3
{
  SGSqliteDatabaseSharedLock *sharedWriteLock;

  sharedWriteLock = self->_sharedWriteLock;
  if (sharedWriteLock)
    -[SGSqliteDatabaseSharedLock runWithLockAcquired:](sharedWriteLock, "runWithLockAcquired:", a3);
  else
    (*((void (**)(id))a3 + 2))(a3);
}

- (BOOL)waitForMigrations
{
  return self->_waitForMigrations;
}

- (SGSpotlightContactsAdapter)spotlightContactsAdapter
{
  return (SGSpotlightContactsAdapter *)objc_getProperty(self, a2, 128, 1);
}

- (SGSGtoCNContactsCacheUpdateAdapter)sgToCNContactsCacheUpdateAdapter
{
  return (SGSGtoCNContactsCacheUpdateAdapter *)objc_getProperty(self, a2, 136, 1);
}

- (void).cxx_destruct
{
  objc_storeStrong((id *)&self->_kvCacheManager, 0);
  objc_storeStrong((id *)&self->_cnToSGContactsCachePendingUpdateRequests, 0);
  objc_storeStrong((id *)&self->_otherDetailsWithNoContact, 0);
  objc_storeStrong(&self->_lockStateNotificationRegistrationToken, 0);
  objc_storeStrong((id *)&self->_snippetDbPath, 0);
  objc_storeStrong(&self->_crLookup, 0);
  objc_storeStrong((id *)&self->_messageRecipients, 0);
  objc_storeStrong((id *)&self->_precomputationQueue, 0);
  objc_storeStrong((id *)&self->_prematchedContactIdentifiers, 0);
  objc_storeStrong((id *)&self->_spotlightReindexQueue, 0);
  objc_storeStrong((id *)&self->_recentlyDeletedEmailKeys, 0);
  objc_storeStrong((id *)&self->_sgToCNContactsCacheUpdateAdapter, 0);
  objc_storeStrong((id *)&self->_spotlightContactsAdapter, 0);
  objc_storeStrong((id *)&self->_journal, 0);
  objc_storeStrong((id *)&self->_deallocNotifications, 0);
  objc_storeStrong((id *)&self->_snippetsMigrations, 0);
  objc_storeStrong((id *)&self->_entityMigrations, 0);
  objc_storeStrong((id *)&self->_history, 0);
  objc_storeStrong((id *)&self->_sgmiFeatureStore, 0);
  objc_storeStrong((id *)&self->_snippetsJournal, 0);
  objc_storeStrong((id *)&self->_snippetDb, 0);
  objc_storeStrong((id *)&self->_sharedWriteLock, 0);
  objc_storeStrong((id *)&self->_db, 0);
}

uint64_t __39__SGSqlEntityStore_dumpTables_columns___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  unint64_t v4;
  uint64_t v5;
  __CFString *v6;
  unsigned __int8 *v7;

  v3 = a2;
  if (objc_msgSend(*(id *)(a1 + 32), "count"))
  {
    v4 = 0;
    do
    {
      objc_msgSend(v3, "getNSStringForColumn:", v4);
      v5 = objc_claimAutoreleasedReturnValue();
      if (v5)
        v6 = (__CFString *)v5;
      else
        v6 = CFSTR("NULL");
      objc_msgSend(*(id *)(a1 + 40), "addObject:", v6);

      ++v4;
    }
    while (objc_msgSend(*(id *)(a1 + 32), "count") > v4);
  }
  objc_msgSend(*(id *)(a1 + 40), "addObject:", CFSTR("\n"));
  v7 = (unsigned __int8 *)MEMORY[0x1E0D81780];

  return *v7;
}

uint64_t __46__SGSqlEntityStore_truncateContactDetailTable__block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("DELETE FROM contactDetails"), 0, 0, 0);
}

void __48__SGSqlEntityStore_resolveFullDownloadRequests___block_invoke(uint64_t a1)
{
  void *v1;
  void *v2;
  _QWORD v3[4];
  id v4;

  v1 = *(void **)(a1 + 40);
  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __48__SGSqlEntityStore_resolveFullDownloadRequests___block_invoke_2;
  v3[3] = &unk_1E7DB74A0;
  v4 = v1;
  objc_msgSend(v2, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("UPDATE emailMetadata SET downloadState = :resolved WHERE key IN _pas_nsarray(:keys)"), v3, 0, 0);

}

void __48__SGSqlEntityStore_resolveFullDownloadRequests___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  id v4;

  v3 = a2;
  objc_msgSend(v3, "bindNamedParam:toInteger:", ":resolved", 2);
  objc_msgSend(*(id *)(a1 + 32), "_pas_proxyArrayWithMapping:", &__block_literal_global_417);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "bindNamedParam:toNSArray:", ":keys", v4);

}

uint64_t __48__SGSqlEntityStore_resolveFullDownloadRequests___block_invoke_3(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "serialize");
}

void __49__SGSqlEntityStore_loadFullDownloadRequestBatch___block_invoke(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  objc_msgSend(v3, "bindNamedParam:toInt64:", ":requested", 1);
  objc_msgSend(v3, "bindNamedParam:toInt64:", ":limit", *(_QWORD *)(a1 + 32));

}

uint64_t __49__SGSqlEntityStore_loadFullDownloadRequestBatch___block_invoke_2(uint64_t a1, void *a2)
{
  void *v3;
  SGEmailKey *v4;
  unsigned __int8 *v5;

  objc_msgSend(a2, "nonnullNSStringForColumnName:table:", "key", 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = -[SGMessageKey initWithSerialized:]([SGEmailKey alloc], "initWithSerialized:", v3);
  objc_msgSend(*(id *)(a1 + 32), "addObject:", v4);
  v5 = (unsigned __int8 *)MEMORY[0x1E0D81780];

  return *v5;
}

void __69__SGSqlEntityStore_duplicateKeysMatchingInteractionBundleId_andTags___block_invoke_2(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;

  v3 = (void *)MEMORY[0x1E0D197F0];
  v4 = *(_QWORD *)(a1 + 32);
  v7 = a2;
  objc_msgSend(v3, "interactionBundleId:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "name");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "bindNamedParam:toNSString:", ":interactionBundleIdTag", v6);

  objc_msgSend(v7, "bindNamedParam:toNSArray:", ":tags", *(_QWORD *)(a1 + 40));
}

uint64_t __69__SGSqlEntityStore_duplicateKeysMatchingInteractionBundleId_andTags___block_invoke_3(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  SGDuplicateKey *v5;
  uint64_t v6;
  void *v7;
  SGDuplicateKey *v8;
  NSObject *v9;
  unsigned __int8 *v10;
  uint8_t v12[16];

  v3 = a2;
  objc_msgSend(v3, "getNSStringForColumn:", 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    v5 = [SGDuplicateKey alloc];
    v6 = objc_msgSend(v3, "getInt64ForColumn:", 1);
    objc_msgSend(v3, "getNSStringForColumn:", 2);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = -[SGDuplicateKey initWithSerializedEntityKey:entityType:serializedParentKey:](v5, "initWithSerializedEntityKey:entityType:serializedParentKey:", v4, v6, v7);

    objc_msgSend(*(id *)(a1 + 32), "addObject:", v8);
  }
  else
  {
    sgLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v12 = 0;
      _os_log_impl(&dword_1C3607000, v9, OS_LOG_TYPE_DEFAULT, "Nil serializedEntityKey found in entityTags", v12, 2u);
    }

  }
  v10 = (unsigned __int8 *)MEMORY[0x1E0D81780];

  return *v10;
}

uint64_t __69__SGSqlEntityStore_duplicateKeysMatchingInteractionBundleId_andTags___block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "name");
}

id __57__SGSqlEntityStore_duplicateKeysMatchingAnyReminderHash___block_invoke(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)MEMORY[0x1E0D197F0];
  objc_msgSend(a2, "base64EncodedStringWithOptions:", 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "reminderHash:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

id __54__SGSqlEntityStore_duplicateKeysMatchingAnyEventHash___block_invoke(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)MEMORY[0x1E0D197F0];
  objc_msgSend(a2, "base64EncodedStringWithOptions:", 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "eventHash:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

void __48__SGSqlEntityStore_duplicateKeysMatchingAnyTag___block_invoke_2(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  id v4;

  v2 = *(void **)(a1 + 32);
  v4 = a2;
  objc_msgSend(v2, "_pas_mappedArrayWithTransform:", &__block_literal_global_394);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "bindNamedParam:toNSArray:", ":tagNames", v3);

  objc_msgSend(v4, "bindNamedParam:toInt64:", ":emailEntityType", 5);
}

uint64_t __48__SGSqlEntityStore_duplicateKeysMatchingAnyTag___block_invoke_4(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  SGDuplicateKey *v9;
  unsigned __int8 *v10;

  v3 = a2;
  v4 = objc_msgSend(v3, "getInt64ForColumn:", 0);
  objc_msgSend(v3, "nonnullNSStringForColumn:", 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v3, "getInt64ForColumn:", 2);
  objc_msgSend(v3, "getNSStringForColumn:", 3);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", v4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[SGDuplicateKey initWithSerializedEntityKey:entityType:serializedParentKey:]([SGDuplicateKey alloc], "initWithSerializedEntityKey:entityType:serializedParentKey:", v5, v6, v7);
  objc_msgSend(v8, "addObject:", v9);

  v10 = (unsigned __int8 *)MEMORY[0x1E0D81780];
  return *v10;
}

uint64_t __48__SGSqlEntityStore_duplicateKeysMatchingAnyTag___block_invoke_3(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "name");
}

id __48__SGSqlEntityStore_duplicateKeysMatchingAnyTag___block_invoke()
{
  return (id)objc_opt_new();
}

uint64_t __49__SGSqlEntityStore_confirmRealtimeContact_error___block_invoke(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "confirmOrRejectDetail:forContact:", a2, *(_QWORD *)(a1 + 40));
}

uint64_t __49__SGSqlEntityStore_confirmRealtimeContact_error___block_invoke_2(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "confirmOrRejectDetail:forContact:", a2, *(_QWORD *)(a1 + 40));
}

void __47__SGSqlEntityStore_confirmRealtimeEvent_error___block_invoke(uint64_t a1)
{
  void *v2;
  SGDuplicateKey *v3;
  void *v4;
  void *v5;
  SGDuplicateKey *v6;
  _QWORD *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  v2 = *(void **)(a1 + 32);
  v3 = [SGDuplicateKey alloc];
  objc_msgSend(*(id *)(a1 + 40), "event");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "uniqueKey");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = -[SGDuplicateKey initWithSerialized:](v3, "initWithSerialized:", v5);
  objc_msgSend(v2, "loadEntityByKey:", v6);
  v11 = (id)objc_claimAutoreleasedReturnValue();

  v7 = *(_QWORD **)(a1 + 32);
  if (v11)
  {
    +[SGStorageEvent storageEventFromEntity:](SGStorageEvent, "storageEventFromEntity:", v11);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend(v7, "confirmStoredEvent:error:", v8, *(_QWORD *)(a1 + 56));

  }
  else
  {
    v9 = (void *)v7[6];
    objc_msgSend(*(id *)(a1 + 40), "event");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "confirmEvent:", v10);

    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 0;
  }

}

void __46__SGSqlEntityStore_rejectRealtimeEvent_error___block_invoke(uint64_t a1)
{
  void *v2;
  SGDuplicateKey *v3;
  void *v4;
  void *v5;
  SGDuplicateKey *v6;
  _QWORD *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  v2 = *(void **)(a1 + 32);
  v3 = [SGDuplicateKey alloc];
  objc_msgSend(*(id *)(a1 + 40), "event");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "uniqueKey");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = -[SGDuplicateKey initWithSerialized:](v3, "initWithSerialized:", v5);
  objc_msgSend(v2, "loadEntityByKey:", v6);
  v11 = (id)objc_claimAutoreleasedReturnValue();

  v7 = *(_QWORD **)(a1 + 32);
  if (v11)
  {
    +[SGStorageEvent storageEventFromEntity:](SGStorageEvent, "storageEventFromEntity:", v11);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend(v7, "rejectStoredEvent:error:", v8, *(_QWORD *)(a1 + 56));

  }
  else
  {
    v9 = (void *)v7[6];
    objc_msgSend(*(id *)(a1 + 40), "event");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "rejectEvent:", v10);

    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 0;
  }

}

void __50__SGSqlEntityStore_confirmedFieldValuesForEntity___block_invoke(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  id v7;

  objc_msgSend(*(id *)(a1 + 32), "entityKey");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "serialize");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  +[SGSqliteDatabase bindParam:name:nsstring:](SGSqliteDatabase, "bindParam:name:nsstring:", a2, ":entityKey", v5);

  +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":entityType", objc_msgSend(*(id *)(a1 + 32), "entityType"));
  objc_msgSend(*(id *)(a1 + 32), "parentKey");
  v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "serialize");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  +[SGSqliteDatabase bindParam:name:nsstring:](SGSqliteDatabase, "bindParam:name:nsstring:", a2, ":parentKey", v6);

}

uint64_t __50__SGSqlEntityStore_confirmedFieldValuesForEntity___block_invoke_2(uint64_t a1, sqlite3_stmt *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  +[SGSqlEntityStore _fieldValuesClassWhitelist](SGSqlEntityStore, "_fieldValuesClassWhitelist");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  sqlite3_column_nssecurecoding(a2, 0, v4);
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;

  return 1;
}

void __49__SGSqlEntityStore_rejectFieldValuesForRecordId___block_invoke(_QWORD *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  _QWORD v7[4];
  id v8;
  _QWORD v9[5];
  _QWORD v10[4];
  id v11;

  v2 = (void *)a1[5];
  v3 = *(void **)(a1[4] + 8);
  v4 = MEMORY[0x1E0C809B0];
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __49__SGSqlEntityStore_rejectFieldValuesForRecordId___block_invoke_2;
  v10[3] = &unk_1E7DB7720;
  v11 = v2;
  v9[0] = v4;
  v9[1] = 3221225472;
  v9[2] = __49__SGSqlEntityStore_rejectFieldValuesForRecordId___block_invoke_3;
  v9[3] = &unk_1E7DB51B8;
  v9[4] = a1[6];
  objc_msgSend(v3, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("SELECT fieldValues FROM confirmedFieldValues WHERE entityId=?"), v10, v9, 0);
  v5 = (void *)a1[5];
  v6 = *(void **)(a1[4] + 8);
  v7[0] = v4;
  v7[1] = 3221225472;
  v7[2] = __49__SGSqlEntityStore_rejectFieldValuesForRecordId___block_invoke_4;
  v7[3] = &unk_1E7DB7720;
  v8 = v5;
  objc_msgSend(v6, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("DELETE FROM confirmedFieldValues WHERE entityId=?"), v7, 0, 0);

}

uint64_t __49__SGSqlEntityStore_rejectFieldValuesForRecordId___block_invoke_2(uint64_t a1, sqlite3_stmt *a2)
{
  return sqlite3_bind_int64(a2, 1, objc_msgSend(*(id *)(a1 + 32), "rowId"));
}

uint64_t __49__SGSqlEntityStore_rejectFieldValuesForRecordId___block_invoke_3(uint64_t a1, sqlite3_stmt *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  +[SGSqlEntityStore _fieldValuesClassWhitelist](SGSqlEntityStore, "_fieldValuesClassWhitelist");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  sqlite3_column_nssecurecoding(a2, 0, v4);
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;

  return 1;
}

uint64_t __49__SGSqlEntityStore_rejectFieldValuesForRecordId___block_invoke_4(uint64_t a1, sqlite3_stmt *a2)
{
  return sqlite3_bind_int64(a2, 1, objc_msgSend(*(id *)(a1 + 32), "rowId"));
}

void __49__SGSqlEntityStore_confirmFieldValues_forEntity___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  NSObject *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  id v16;
  uint8_t v17[8];
  _QWORD v18[5];
  _QWORD v19[4];
  id v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[3];
  _QWORD v26[3];
  const __CFString *v27;
  _QWORD v28[2];

  v28[1] = *MEMORY[0x1E0C80C00];
  v21 = 0;
  v22 = &v21;
  v23 = 0x2020000000;
  v24 = -1;
  objc_msgSend(*(id *)(a1 + 32), "parentKey");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  v3 = (void *)MEMORY[0x1C3BD4F6C]();
  if (v2)
    objc_msgSend(CFSTR("SELECT e.id FROM entity AS e INNER JOIN entityParentage AS ep ON e.id=ep.childId WHERE e.entityKey=:entityKey AND e.entityType=:entityType AND ep.parentKey"), "stringByAppendingString:", CFSTR("=:parentKey"));
  else
    objc_msgSend(CFSTR("SELECT e.id FROM entity AS e INNER JOIN entityParentage AS ep ON e.id=ep.childId WHERE e.entityKey=:entityKey AND e.entityType=:entityType AND ep.parentKey"), "stringByAppendingString:", CFSTR(" IS NULL"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_autoreleasePoolPop(v3);
  v5 = *(void **)(a1 + 32);
  v6 = *(void **)(*(_QWORD *)(a1 + 40) + 8);
  v7 = MEMORY[0x1E0C809B0];
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 3221225472;
  v19[2] = __49__SGSqlEntityStore_confirmFieldValues_forEntity___block_invoke_2;
  v19[3] = &unk_1E7DB7720;
  v20 = v5;
  v18[0] = v7;
  v18[1] = 3221225472;
  v18[2] = __49__SGSqlEntityStore_confirmFieldValues_forEntity___block_invoke_3;
  v18[3] = &unk_1E7DB51B8;
  v18[4] = &v21;
  objc_msgSend(v6, "prepAndRunQuery:onPrep:onRow:onError:", v4, v19, v18, 0);
  if (v22[3] == -1)
  {
    sgLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v17 = 0;
      _os_log_error_impl(&dword_1C3607000, v12, OS_LOG_TYPE_ERROR, "Couldn't confirm field values for duplicateKey not in entity table", v17, 2u);
    }

    v13 = (void *)MEMORY[0x1E0C99DA0];
    v14 = *(_QWORD *)(a1 + 32);
    v27 = CFSTR("duplicateKey");
    v28[0] = v14;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v28, &v27, 1);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "exceptionWithName:reason:userInfo:", CFSTR("NotFound"), CFSTR("Could not find duplicateKey"), v15);
    v16 = (id)objc_claimAutoreleasedReturnValue();

    objc_exception_throw(v16);
  }
  v8 = *(void **)(*(_QWORD *)(a1 + 40) + 8);
  v25[0] = CFSTR("entityId");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = *(_QWORD *)(a1 + 48);
  v26[0] = v9;
  v26[1] = v10;
  v25[1] = CFSTR("fieldValues");
  v25[2] = CFSTR("maybeChanged");
  v26[2] = &unk_1E7E0C770;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v26, v25, 3);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "insertOrReplaceIntoTable:dictionary:onError:", CFSTR("confirmedFieldValues"), v11, 0);

  _Block_object_dispose(&v21, 8);
}

uint64_t __49__SGSqlEntityStore_confirmFieldValues_forEntity___block_invoke_2(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  objc_msgSend(*(id *)(a1 + 32), "parentKey");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend(*(id *)(a1 + 32), "parentKey");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "serialize");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    +[SGSqliteDatabase bindParam:name:nsstring:](SGSqliteDatabase, "bindParam:name:nsstring:", a2, ":parentKey", v6);

  }
  objc_msgSend(*(id *)(a1 + 32), "entityKey");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "serialize");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[SGSqliteDatabase bindParam:name:nsstring:](SGSqliteDatabase, "bindParam:name:nsstring:", a2, ":entityKey", v8);

  return +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":entityType", objc_msgSend(*(id *)(a1 + 32), "entityType"));
}

uint64_t __49__SGSqlEntityStore_confirmFieldValues_forEntity___block_invoke_3(uint64_t a1, sqlite3_stmt *a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = sqlite3_column_int64(a2, 0);
  return 1;
}

uint64_t __98__SGSqlEntityStore_suggestEventsStartingAt_endingAt_limitTo_additionalWhereClause_options_onPrep___block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  +[SGSqliteDatabase bindParam:name:double:](SGSqliteDatabase, "bindParam:name:double:", a2, ":queryStart", *(double *)(a1 + 40));
  +[SGSqliteDatabase bindParam:name:double:](SGSqliteDatabase, "bindParam:name:double:", a2, ":queryEnd", *(double *)(a1 + 48));
  +[SGSqliteDatabase bindParam:name:double:](SGSqliteDatabase, "bindParam:name:double:", a2, ":fltQueryStart", *(double *)(a1 + 56));
  +[SGSqliteDatabase bindParam:name:double:](SGSqliteDatabase, "bindParam:name:double:", a2, ":fltQueryEnd", *(double *)(a1 + 64));
  +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":pseudoEventType", 2);
  +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":deleted", 2);
  +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":limit", *(_QWORD *)(a1 + 72));
  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a2);
  return result;
}

uint64_t __98__SGSqlEntityStore_suggestEventsStartingAt_endingAt_limitTo_additionalWhereClause_options_onPrep___block_invoke_2(uint64_t a1, sqlite3_stmt *a2)
{
  void *v3;
  void *v4;

  objc_msgSend(MEMORY[0x1E0D19920], "recordIdWithInternalEntityId:", sqlite3_column_int64(a2, 0));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "loadEventForRecordId:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
    objc_msgSend(*(id *)(a1 + 40), "addObject:", v4);

  return 0;
}

void __76__SGSqlEntityStore_suggestEventsStartingAt_endingAt_prefix_limitTo_options___block_invoke(uint64_t a1, uint64_t a2)
{
  id v3;

  objc_msgSend((id)objc_opt_class(), "likePrefix:", *(_QWORD *)(a1 + 40));
  v3 = (id)objc_claimAutoreleasedReturnValue();
  +[SGSqliteDatabase bindParam:name:nsstring:](SGSqliteDatabase, "bindParam:name:nsstring:", a2, ":prefix", v3);

}

void __62__SGSqlEntityStore__filterOutAllButAcceptedWithUpdatedFields___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  _QWORD v10[4];
  id v11;
  _QWORD v12[4];
  id v13;
  id v14;
  id v15;
  _QWORD v16[4];
  id v17;

  v2 = (void *)objc_opt_new();
  v3 = *(void **)(a1 + 40);
  v4 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v5 = MEMORY[0x1E0C809B0];
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3221225472;
  v16[2] = __62__SGSqlEntityStore__filterOutAllButAcceptedWithUpdatedFields___block_invoke_2;
  v16[3] = &unk_1E7DB74A0;
  v17 = v3;
  v12[0] = v5;
  v12[1] = 3221225472;
  v12[2] = __62__SGSqlEntityStore__filterOutAllButAcceptedWithUpdatedFields___block_invoke_4;
  v12[3] = &unk_1E7DB0760;
  v13 = *(id *)(a1 + 48);
  v9 = v2;
  v14 = v9;
  v15 = *(id *)(a1 + 56);
  objc_msgSend(v4, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("SELECT entityId, fieldValues FROM confirmedFieldValues WHERE entityId IN _pas_nsarray(:ids)"), v16, v12, 0);
  if (objc_msgSend(v9, "count"))
  {
    sgMap();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
    v10[0] = v5;
    v10[1] = 3221225472;
    v10[2] = __62__SGSqlEntityStore__filterOutAllButAcceptedWithUpdatedFields___block_invoke_2_327;
    v10[3] = &unk_1E7DB74A0;
    v11 = v6;
    v8 = v6;
    objc_msgSend(v7, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("UPDATE confirmedFieldValues SET maybeChanged=0 WHERE entityId IN _pas_nsarray(:ids)"), v10, 0, 0);

  }
}

void __62__SGSqlEntityStore__filterOutAllButAcceptedWithUpdatedFields___block_invoke_2(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  id v4;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  objc_msgSend(v2, "_pas_proxyArrayWithMapping:", &__block_literal_global_317);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "bindNamedParam:toNSArray:", ":ids", v4);

}

uint64_t __62__SGSqlEntityStore__filterOutAllButAcceptedWithUpdatedFields___block_invoke_4(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  int v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  NSObject *v16;
  uint8_t v18[16];

  v3 = (void *)MEMORY[0x1E0D19920];
  v4 = a2;
  objc_msgSend(v3, "recordIdForEventWithRowId:", objc_msgSend(v4, "getInt64ForColumnName:table:", "entityId", "confirmedFieldValues"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "getNSDataForColumnName:table:", "fieldValues", "confirmedFieldValues");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (v7)
  {
    v8 = (void *)MEMORY[0x1E0CB3710];
    +[SGSqlEntityStore _fieldValuesClassWhitelist](SGSqlEntityStore, "_fieldValuesClassWhitelist");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "unarchivedObjectOfClasses:fromData:error:", v9, v7, 0);
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v6, "fieldsToSaveOnConfirmation");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_msgSend(v11, "isEqual:", v10);
    v13 = 48;
    if (v12)
    {
      v13 = 40;
      v14 = v5;
    }
    else
    {
      v14 = v6;
    }
    objc_msgSend(*(id *)(a1 + v13), "addObject:", v14);
    v15 = *MEMORY[0x1E0D81780];

  }
  else
  {
    sgLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v18 = 0;
      _os_log_impl(&dword_1C3607000, v16, OS_LOG_TYPE_DEFAULT, "Failed to retrieve fieldValues from confirmedFieldValues", v18, 2u);
    }

    v15 = *MEMORY[0x1E0D81780];
  }

  return v15;
}

uint64_t __62__SGSqlEntityStore__filterOutAllButAcceptedWithUpdatedFields___block_invoke_2_327(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "bindNamedParam:toNSArray:", ":ids", *(_QWORD *)(a1 + 32));
}

uint64_t __62__SGSqlEntityStore__filterOutAllButAcceptedWithUpdatedFields___block_invoke_322(uint64_t a1, void *a2)
{
  return objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", objc_msgSend(a2, "rowId"));
}

id __62__SGSqlEntityStore__filterOutAllButAcceptedWithUpdatedFields___block_invoke_3(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)MEMORY[0x1E0CB37E8];
  objc_msgSend(a2, "recordId");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "numberWithLongLong:", objc_msgSend(v3, "rowId"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

id __46__SGSqlEntityStore__filterOutCancelledEvents___block_invoke(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  void *v4;
  id v5;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  if (objc_msgSend(v2, "eventIsCancelled:", v3))
    v4 = 0;
  else
    v4 = v3;
  v5 = v4;

  return v5;
}

uint64_t __37__SGSqlEntityStore_eventIsCancelled___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  double v9;
  double v10;
  double v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v3 = a2;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v14;
    while (2)
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v14 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * i);
        objc_msgSend(v8, "creationTimestamp", (_QWORD)v13);
        v10 = v9;
        objc_msgSend(*(id *)(a1 + 32), "creationTimestamp");
        if (v10 >= v11 && objc_msgSend(v8, "isCancelled"))
        {
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
          goto LABEL_12;
        }
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      if (v5)
        continue;
      break;
    }
  }
LABEL_12:

  return 0;
}

id __58__SGSqlEntityStore__filterOutOlderVersionsOfPseudoEvents___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  int v16;
  id v17;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  objc_msgSend(v3, "duplicateKey");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "entityKey");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "duplicateKey");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "entityType");
  +[SGDeduper resolveByPairs:](SGDeduper, "resolveByPairs:", &__block_literal_global_312);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "loadEntitiesByEntityKey:entityType:resolveDuplicates:", v6, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v10, "objectAtIndexedSubscript:", 0);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "duplicateKey");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "serialize");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "duplicateKey");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "serialize");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend(v13, "isEqualToString:", v15);

  v17 = 0;
  if (v16)
    v17 = v3;

  return v17;
}

id __58__SGSqlEntityStore__filterOutOlderVersionsOfPseudoEvents___block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  double v6;
  double v7;
  double v8;
  void *v9;
  id v10;

  v4 = a3;
  v5 = a2;
  objc_msgSend(v4, "creationTimestamp");
  v7 = v6;
  objc_msgSend(v5, "creationTimestamp");
  if (v7 <= v8)
    v9 = v5;
  else
    v9 = v4;
  v10 = v9;

  return v10;
}

uint64_t __55__SGSqlEntityStore_contactIdsMergedWithMasterEntityId___block_invoke(uint64_t a1, uint64_t a2)
{
  +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":pseudo", 4);
  return +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":masterEntityId", objc_msgSend(*(id *)(a1 + 32), "rowId"));
}

uint64_t __55__SGSqlEntityStore_contactIdsMergedWithMasterEntityId___block_invoke_2(uint64_t a1, sqlite3_stmt *a2)
{
  void *v2;
  void *v3;

  v2 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  objc_msgSend(MEMORY[0x1E0D19920], "recordIdForContactWithRowId:", sqlite3_column_int64(a2, 0));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "addObject:", v3);

  return 0;
}

BOOL __70__SGSqlEntityStore_rebuildContactDetailsCacheWithShouldContinueBlock___block_invoke(_QWORD *a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  id v9;
  _BOOL8 v10;
  _QWORD v12[5];
  id v13;
  id v14;
  uint64_t v15;

  v3 = a2;
  v4 = a1[4];
  v5 = (void *)a1[5];
  v6 = *(void **)(v4 + 264);
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __70__SGSqlEntityStore_rebuildContactDetailsCacheWithShouldContinueBlock___block_invoke_2;
  v12[3] = &unk_1E7DB0640;
  v12[4] = v4;
  v7 = v5;
  v8 = a1[6];
  v14 = v7;
  v15 = v8;
  v13 = v3;
  v9 = v3;
  objc_msgSend(v6, "replaceCacheOfType:block:", 1, v12);
  v10 = *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) == 0;

  return v10;
}

BOOL __70__SGSqlEntityStore_rebuildContactDetailsCacheWithShouldContinueBlock___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  id v7;
  _BOOL8 v8;
  _QWORD v10[4];
  id v11;
  id v12;
  id v13;
  uint64_t v14;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __70__SGSqlEntityStore_rebuildContactDetailsCacheWithShouldContinueBlock___block_invoke_3;
  v10[3] = &unk_1E7DB0618;
  v5 = *(id *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  v13 = v5;
  v14 = v6;
  v11 = *(id *)(a1 + 40);
  v12 = v3;
  v7 = v3;
  objc_msgSend(v4, "enumerateAllContactsWithSnippets:limitTo:usingBlock:", 0, 10000, v10);
  v8 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) == 0;

  return v8;
}

uint64_t __70__SGSqlEntityStore_rebuildContactDetailsCacheWithShouldContinueBlock___block_invoke_3(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  unsigned int v31;
  id obj;
  id obja;
  uint64_t v34;
  void *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _BYTE v44[128];
  _BYTE v45[128];
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  v5 = v4;
  if ((v4 & 1) != 0)
  {
    v34 = a1;
    v31 = v4;
    objc_msgSend(v3, "name");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "fullName");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v35 = v3;
    objc_msgSend(v3, "phones");
    obj = (id)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v40, v45, 16);
    if (v8)
    {
      v9 = v8;
      v10 = *(_QWORD *)v41;
      do
      {
        v11 = 0;
        do
        {
          if (*(_QWORD *)v41 != v10)
            objc_enumerationMutation(obj);
          v12 = *(void **)(*((_QWORD *)&v40 + 1) + 8 * v11);
          v13 = (void *)MEMORY[0x1C3BD4F6C]();
          if (v7)
          {
            objc_msgSend(MEMORY[0x1E0D19840], "encodedStringForFullName:", v7);
            v14 = (void *)objc_claimAutoreleasedReturnValue();
          }
          else
          {
            v14 = 0;
          }
          v15 = *(void **)(v34 + 32);
          objc_msgSend(v12, "phoneNumber");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          SGNormalizePhoneNumber();
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v35, "recordId");
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v15, "setValue:forKey:fromRecordId:", v14, v17, v18);

          objc_autoreleasePoolPop(v13);
          ++v11;
        }
        while (v9 != v11);
        v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v40, v45, 16);
      }
      while (v9);
    }

    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    objc_msgSend(v35, "emailAddresses");
    obja = (id)objc_claimAutoreleasedReturnValue();
    v19 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v36, v44, 16);
    if (v19)
    {
      v20 = v19;
      v21 = *(_QWORD *)v37;
      do
      {
        v22 = 0;
        do
        {
          if (*(_QWORD *)v37 != v21)
            objc_enumerationMutation(obja);
          v23 = *(void **)(*((_QWORD *)&v36 + 1) + 8 * v22);
          v24 = (void *)MEMORY[0x1C3BD4F6C]();
          if (v7)
          {
            objc_msgSend(MEMORY[0x1E0D19840], "encodedStringForFullName:", v7);
            v25 = (void *)objc_claimAutoreleasedReturnValue();
          }
          else
          {
            v25 = 0;
          }
          v26 = *(void **)(v34 + 40);
          objc_msgSend(v23, "emailAddress");
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          SGNormalizeEmailAddress();
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v35, "recordId");
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v26, "setValue:forKey:fromRecordId:", v25, v28, v29);

          objc_autoreleasePoolPop(v24);
          ++v22;
        }
        while (v20 != v22);
        v20 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v36, v44, 16);
      }
      while (v20);
    }

    v5 = v31;
    v3 = v35;
  }
  else
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 1;
  }

  return v5;
}

id __70__SGSqlEntityStore_suggestContactMatchesByContactDetailTag_matchType___block_invoke_2(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  _QWORD v5[2];

  v5[1] = *MEMORY[0x1E0C80C00];
  objc_msgSend(a2, "firstObject");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v5[0] = v2;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v5, 1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id __70__SGSqlEntityStore_suggestContactMatchesByContactDetailTag_matchType___block_invoke(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  objc_msgSend(a2, "objectAtIndexedSubscript:", 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (void *)MEMORY[0x1E0CB37E8];
  objc_msgSend(v2, "recordId");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "numberWithLongLong:", objc_msgSend(v4, "rowId"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

void __85__SGSqlEntityStore_suggestContactByRecordId_withSnippets_filterConfirmRejectDetails___block_invoke(uint64_t a1, void *a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  objc_msgSend(v3, "bindNamedParam:toInt64:", ":entityId", objc_msgSend(v2, "rowId"));

}

uint64_t __85__SGSqlEntityStore_suggestContactByRecordId_withSnippets_filterConfirmRejectDetails___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  objc_msgSend(a2, "getInt64AsNSNumberForColumn:", 0);
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

  return *MEMORY[0x1E0D81780];
}

void __58__SGSqlEntityStore_storageContactByRecordId_withSnippets___block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _QWORD v9[4];
  id v10;

  v2 = *(void **)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __58__SGSqlEntityStore_storageContactByRecordId_withSnippets___block_invoke_2;
  v9[3] = &unk_1E7DB74A0;
  v10 = *(id *)(a1 + 48);
  objc_msgSend(v2, "masterEntityIDsForMasterEntityQuery:bindings:", v3, v9);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v4, "count") != 1)
    __assert_rtn("-[SGSqlEntityStore storageContactByRecordId:withSnippets:]_block_invoke", "SGSqlEntityStore.m", 2290, "masterEntityIds.count==1");
  objc_msgSend(v4, "firstObject");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "storageContactByMasterEntityId:withSnippets:", objc_msgSend(v5, "longLongValue"), *(unsigned __int8 *)(a1 + 64));
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v6;

}

void __58__SGSqlEntityStore_storageContactByRecordId_withSnippets___block_invoke_2(uint64_t a1, void *a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  objc_msgSend(v3, "bindNamedParam:toInt64:", ":entityId", objc_msgSend(v2, "rowId"));

}

void __40__SGSqlEntityStore_suggestContactByKey___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  v8 = a2;
  objc_msgSend(v8, "bindNamedParam:toInt64:", ":entityType", objc_msgSend(*(id *)(a1 + 32), "entityType"));
  objc_msgSend(*(id *)(a1 + 32), "entityKey");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "serialize");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "bindNamedParam:toNSString:", ":entityKey", v4);

  objc_msgSend(*(id *)(a1 + 32), "parentKey");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
  {
    objc_msgSend(*(id *)(a1 + 32), "parentKey");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "serialize");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "bindNamedParam:toNSString:", ":parentKey", v7);

  }
  objc_msgSend(v8, "bindNamedParam:toInt64:", ":messagesMeCard", 64);

}

void __40__SGSqlEntityStore_storageContactByKey___block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _QWORD v9[4];
  id v10;

  v2 = *(void **)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __40__SGSqlEntityStore_storageContactByKey___block_invoke_2;
  v9[3] = &unk_1E7DB74A0;
  v10 = *(id *)(a1 + 48);
  objc_msgSend(v2, "masterEntityIDsForMasterEntityQuery:bindings:", v3, v9);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "firstObject");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "storageContactByMasterEntityId:withSnippets:", objc_msgSend(v5, "longLongValue"), 1);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v6;

}

void __40__SGSqlEntityStore_storageContactByKey___block_invoke_2(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  v8 = a2;
  objc_msgSend(v8, "bindNamedParam:toInt64:", ":entityType", objc_msgSend(*(id *)(a1 + 32), "entityType"));
  objc_msgSend(*(id *)(a1 + 32), "entityKey");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "serialize");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "bindNamedParam:toNSString:", ":entityKey", v4);

  objc_msgSend(*(id *)(a1 + 32), "parentKey");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
  {
    objc_msgSend(*(id *)(a1 + 32), "parentKey");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "serialize");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "bindNamedParam:toNSString:", ":parentKey", v7);

  }
}

void __85__SGSqlEntityStore_suggestContactMatchesByType_searchString_isMaybe_onlySignificant___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;

  v2 = *(void **)(a1 + 32);
  objc_msgSend(MEMORY[0x1E0D197F0], "contactDetail:", *(_QWORD *)(a1 + 40));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "suggestContactMatchesByContactDetailTag:matchType:", v3, *(_QWORD *)(a1 + 64));
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  v8 = *(id *)(a1 + 40);
  sgMapAndFilter();
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;

}

id __85__SGSqlEntityStore_suggestContactMatchesByType_searchString_isMaybe_onlySignificant___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  unsigned __int8 v8;
  char v9;
  _BOOL4 v10;
  void *v11;
  id v12;
  void *v13;
  int v15;
  void *v16;
  void *v17;
  id v18;
  NSObject *v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint8_t buf[4];
  id v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (objc_msgSend(v3, "count") != 3)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "handleFailureInMethod:object:file:lineNumber:description:", *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 32), CFSTR("SGSqlEntityStore.m"), 2122, CFSTR("Invalid response from suggestContactMatchesByContactDetailTag"));

  }
  objc_msgSend(v3, "objectAtIndexedSubscript:", 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "objectAtIndexedSubscript:", 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "objectAtIndexedSubscript:", 2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v7 = objc_msgSend(v6, "longValue");
  v8 = objc_msgSend(v4, "containsSuggestions");
  if (*(_BYTE *)(a1 + 64) && objc_msgSend(v4, "significanceOrigin") != 2)
  {
    v15 = objc_msgSend(*(id *)(a1 + 32), "contactIsSignificantOrSignificanceIsDisabled:usingCoreRecents:", v4, 0);
    v10 = v15;
    v9 = v8 ^ 1;
    if (((v8 ^ 1) & 1) == 0 && (v15 & 1) == 0)
    {
      +[SGContactStoreFactory contactStore](SGContactStoreFactory, "contactStore");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = 0;
      +[SGCuratedContactMatcher curatedContactsFromContactStore:matchingPseudoContact:error:](SGCuratedContactMatcher, "curatedContactsFromContactStore:matchingPseudoContact:error:", v16, v4, &v21);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = v21;

      if (v17)
      {
        v10 = objc_msgSend(v17, "count") != 0;
      }
      else
      {
        sgLogHandle();
        v19 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          v24 = v18;
          _os_log_error_impl(&dword_1C3607000, v19, OS_LOG_TYPE_ERROR, "Error retrieving curated contacts: %@", buf, 0xCu);
        }

        v10 = 0;
      }

      v9 = 0;
    }
  }
  else
  {
    v9 = v8 ^ 1;
    v10 = 1;
  }
  v11 = 0;
  if ((v9 & 1) == 0 && v10)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 0;
    v12 = objc_alloc(MEMORY[0x1E0D197B8]);
    v22 = *(_QWORD *)(a1 + 40);
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v22, 1);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = (void *)objc_msgSend(v12, "initWithContact:matchingRecordId:matchType:matchTokens:", v4, v5, v7, v13);

  }
  return v11;
}

void __56__SGSqlEntityStore_allContactsMasterEntityIdsLimitedTo___block_invoke(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  objc_msgSend(v3, "bindNamedParam:toInt64:", ":pseudo", 4);
  objc_msgSend(v3, "bindNamedParam:toInt64:", ":limit", *(_QWORD *)(a1 + 32));

}

uint64_t __52__SGSqlEntityStore_allContactsWithSnippets_limitTo___block_invoke(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 32), "addObject:", a2);
  return 1;
}

uint64_t __73__SGSqlEntityStore_allContactsWithExtractionStartDate_extractionEndDate___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;

  v3 = a2;
  objc_msgSend(v3, "birthday");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
    objc_msgSend(*(id *)(a1 + 32), "addObject:", v3);

  return 1;
}

void __72__SGSqlEntityStore_enumerateAllContactsWithSnippets_limitTo_usingBlock___block_invoke(uint64_t a1, void *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  id v6;

  v6 = a2;
  objc_msgSend(v6, "bindNamedParam:toInt64:", ":pseudo", 4);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = 30;
  if (v3 < 0x7FFFFFFFFFFFFFFFLL)
    v4 = -1;
  if (v4 >= v3)
    v5 = *(_QWORD *)(a1 + 32);
  else
    v5 = v4;
  objc_msgSend(v6, "bindNamedParam:toInt64:", ":limit", v5);

}

void __114__SGSqlEntityStore_enumerateAllContactsWithExtractionStartDate_extractionEndDate_withSnippets_limitTo_usingBlock___block_invoke(uint64_t a1, void *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  id v6;

  v6 = a2;
  objc_msgSend(v6, "bindNamedParam:toInt64:", ":pseudo", 4);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = 30;
  if (v3 < 0x7FFFFFFFFFFFFFFFLL)
    v4 = -1;
  if (v4 >= v3)
    v5 = *(_QWORD *)(a1 + 32);
  else
    v5 = v4;
  objc_msgSend(v6, "bindNamedParam:toInt64:", ":limit", v5);
  objc_msgSend(v6, "bindNamedParam:toDouble:", ":creationTimeStart", *(double *)(a1 + 40));
  objc_msgSend(v6, "bindNamedParam:toDouble:", ":creationTimeEnd", *(double *)(a1 + 48));

}

void __63__SGSqlEntityStore__matchableUTF8TokenRangesInMatchExpression___block_invoke(uint64_t a1)
{
  void *v2;
  void *StatementUsingCurrentLanguage;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  NSObject *v20;
  void *v21;
  _QWORD *v22;
  id v23;
  _QWORD v24[5];
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 buf;
  const char *v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0D81620], "sqliteDatabaseWithFilename:contentProtection:errorHandler:error:", CFSTR(":memory:"), 0, 0, 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v25 = 0;
  v26 = &v25;
  v27 = 0x2020000000;
  v28 = 0;
  v24[0] = MEMORY[0x1E0C809B0];
  v24[1] = 3221225472;
  v24[2] = __63__SGSqlEntityStore__matchableUTF8TokenRangesInMatchExpression___block_invoke_3;
  v24[3] = &unk_1E7DB7510;
  v24[4] = &v25;
  objc_msgSend(v2, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("SELECT fts3_tokenizer(:tokenizerName)"), &__block_literal_global_240, v24, &__block_literal_global_245);
  StatementUsingCurrentLanguage = (void *)ITSCopyFTSTableCreateStatementUsingCurrentLanguage();
  v23 = 0;
  v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB38E8]), "initWithPattern:options:error:", CFSTR("\\(\\s*tokenize=ab_cf_tokenizer\\s+language=\"([^\\\"]*?)\"\\s+collator=\"([^\\\"]*?)\","), 0, &v23);
  v5 = v23;
  if (v5)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "handleFailureInMethod:object:file:lineNumber:description:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), CFSTR("SGSqlEntityStore.m"), 1952, CFSTR("error instantiating argumentsPattern: %@"), v5);

  }
  objc_msgSend(v4, "firstMatchInString:options:range:", StatementUsingCurrentLanguage, 0, 0, objc_msgSend(StatementUsingCurrentLanguage, "length"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (v6)
  {
    v22 = 0;
    v7 = (void *)MEMORY[0x1C3BD4F6C]();
    v8 = objc_msgSend(v6, "rangeAtIndex:", 1);
    objc_msgSend(StatementUsingCurrentLanguage, "substringWithRange:", v8, v9);
    v10 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v11 = objc_msgSend(v10, "UTF8String");

    v12 = objc_msgSend(v6, "rangeAtIndex:", 2);
    objc_msgSend(StatementUsingCurrentLanguage, "substringWithRange:", v12, v13);
    v14 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v15 = objc_msgSend(v14, "UTF8String");

    *(_QWORD *)&buf = "language";
    *((_QWORD *)&buf + 1) = v11;
    v30 = "collator";
    v31 = v15;
    (*(void (**)(uint64_t, __int128 *, _QWORD **))(v26[3] + 8))(4, &buf, &v22);
    objc_autoreleasePoolPop(v7);
    *v22 = v26[3];
    v16 = v22;
    v17 = objc_opt_new();
    objc_storeStrong((id *)(v17 + 8), v2);
    *(_QWORD *)(v17 + 16) = v26[3];
    *(_QWORD *)(v17 + 24) = v16;
    v18 = objc_msgSend(objc_alloc(MEMORY[0x1E0D815F0]), "initWithGuardedData:", v17);
    v19 = (void *)_matchableUTF8TokenRangesInMatchExpression__tokenizerLock;
    _matchableUTF8TokenRangesInMatchExpression__tokenizerLock = v18;

  }
  else
  {
    sgLogHandle();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf) = 138412290;
      *(_QWORD *)((char *)&buf + 4) = StatementUsingCurrentLanguage;
      _os_log_fault_impl(&dword_1C3607000, v20, OS_LOG_TYPE_FAULT, "Could not parse createQuery %@", (uint8_t *)&buf, 0xCu);
    }

    if (_PASEvaluateLogFaultAndProbCrashCriteria())
      abort();
  }

  _Block_object_dispose(&v25, 8);
}

void __63__SGSqlEntityStore__matchableUTF8TokenRangesInMatchExpression___block_invoke_258(uint64_t a1, void *a2)
{
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t, _QWORD **);
  id v7;
  int v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  v3 = a2;
  objc_msgSend(*(id *)(a1 + 32), "dataUsingEncoding:", 4);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = 0;
  v5 = v3[3];
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD **))(v3[2] + 24);
  v7 = objc_retainAutorelease(v4);
  v6(v5, objc_msgSend(v7, "bytes"), objc_msgSend(v7, "length"), &v18);
  *v18 = v3[3];
  while (1)
  {
    v16 = 0;
    v17 = 0;
    v15 = 0;
    v8 = (*(uint64_t (**)(_QWORD *, uint64_t *, char *, uint64_t *, char *, uint64_t *))(v3[2] + 40))(v18, &v17, (char *)&v16 + 4, &v16, (char *)&v15 + 4, &v15);
    if (v8)
      break;
    if (SHIDWORD(v15) < (int)v16)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "handleFailureInMethod:object:file:lineNumber:description:", *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 40), CFSTR("SGSqlEntityStore.m"), 2000, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("end >= start"));

    }
    v9 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
    v10 = (void *)MEMORY[0x1C3BD4F6C]();
    objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithRange:", (int)v16, SHIDWORD(v15) - (uint64_t)(int)v16);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_autoreleasePoolPop(v10);
    objc_msgSend(v9, "addObject:", v11);

  }
  if (v8 != 101)
  {
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v14 = *(void **)(v13 + 40);
    *(_QWORD *)(v13 + 40) = 0;

  }
  (*(void (**)(_QWORD *))(v3[2] + 32))(v18);
  (*(void (**)(_QWORD, const char *, _QWORD, _QWORD **))(v3[2] + 24))(v3[3], "", 0, &v18);
  *v18 = v3[3];
  (*(void (**)(_QWORD *))(v3[2] + 32))(v18);

}

uint64_t __63__SGSqlEntityStore__matchableUTF8TokenRangesInMatchExpression___block_invoke_3(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  unsigned __int8 *v6;
  uint8_t v8[16];

  v3 = objc_retainAutorelease(a2);
  if (sqlite3_column_bytes((sqlite3_stmt *)objc_msgSend(v3, "stmt"), 0) == 8)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    *(_QWORD *)(v4 + 24) = *(_QWORD *)sqlite3_column_blob((sqlite3_stmt *)objc_msgSend(objc_retainAutorelease(v3), "stmt"), 0);
  }
  else
  {
    sgLogHandle();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v8 = 0;
      _os_log_fault_impl(&dword_1C3607000, v5, OS_LOG_TYPE_FAULT, "tokenizer size mismatch", v8, 2u);
    }

    if (_PASEvaluateLogFaultAndProbCrashCriteria())
      abort();
  }
  v6 = (unsigned __int8 *)MEMORY[0x1E0D81788];

  return *v6;
}

uint64_t __63__SGSqlEntityStore__matchableUTF8TokenRangesInMatchExpression___block_invoke_244(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  int v5;
  id v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  sgLogHandle();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT))
  {
    v5 = 138412290;
    v6 = v2;
    _os_log_fault_impl(&dword_1C3607000, v3, OS_LOG_TYPE_FAULT, "something went wrong while getting tokenizer: %@", (uint8_t *)&v5, 0xCu);
  }

  if (_PASEvaluateLogFaultAndProbCrashCriteria())
    abort();

  return *MEMORY[0x1E0D81788];
}

uint64_t __63__SGSqlEntityStore__matchableUTF8TokenRangesInMatchExpression___block_invoke_2(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "bindNamedParam:toNSString:", ":tokenizerName", CFSTR("ab_cf_tokenizer"));
}

id __68__SGSqlEntityStore_suggestContactMatchesWithFullTextSearch_limitTo___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  NSUInteger v4;
  NSUInteger v5;
  NSUInteger v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v11;
  uint64_t v12;
  int v13;
  void *v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;
  NSRange v18;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = objc_msgSend(v3, "rangeValue");
  v6 = v5;
  if (v4 + v5 <= objc_msgSend(*(id *)(a1 + 32), "length"))
  {
    v9 = (void *)MEMORY[0x1C3BD4F6C]();
    v8 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithBytes:length:encoding:", objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 32)), "bytes") + v4, v6, 4);
    objc_autoreleasePoolPop(v9);
  }
  else
  {
    sgLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
    {
      v18.location = v4;
      v18.length = v6;
      NSStringFromRange(v18);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(*(id *)(a1 + 32), "length");
      v13 = 138412546;
      v14 = v11;
      v15 = 2048;
      v16 = v12;
      _os_log_fault_impl(&dword_1C3607000, v7, OS_LOG_TYPE_FAULT, "got out of bounds token range: %@ in UTF8 of size %tu", (uint8_t *)&v13, 0x16u);

    }
    if (_PASEvaluateLogFaultAndProbCrashCriteria())
      abort();
    v8 = 0;
  }

  return v8;
}

void __68__SGSqlEntityStore_suggestContactMatchesWithFullTextSearch_limitTo___block_invoke_233(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  objc_msgSend(v3, "bindNamedParam:toInt64:", ":pseudo", 4);
  objc_msgSend(v3, "bindNamedParam:toNSString:", ":match", *(_QWORD *)(a1 + 32));

}

uint64_t __68__SGSqlEntityStore_suggestContactMatchesWithFullTextSearch_limitTo___block_invoke_2_234(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v3 = (void *)MEMORY[0x1E0CB37E8];
  v4 = a2;
  objc_msgSend(v3, "numberWithLongLong:", objc_msgSend(v4, "getInt64ForColumn:", 0));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", objc_msgSend(v4, "getInt64ForColumn:", 1));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", objc_msgSend(v4, "getInt64ForColumn:", 2));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "getNSDataForColumn:", 3);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v9 = *(_QWORD *)(a1 + 64);
  v10 = 30;
  if (v9 < 0x7FFFFFFFFFFFFFFFLL)
    v10 = -1;
  if (v10 >= v9)
    v11 = *(_QWORD *)(a1 + 64);
  else
    v11 = v10;
  LOBYTE(v14) = 1;
  v12 = objc_msgSend(*(id *)(a1 + 32), "_processContactMatchWithContacts:matches:limit:masterEntityId:detailEntityId:contactEntityId:matchinfoData:tokens:requireName:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), v11, v5, v6, v7, v8, *(_QWORD *)(a1 + 56), v14);

  return v12;
}

id __68__SGSqlEntityStore_suggestContactMatchesWithFullTextSearch_limitTo___block_invoke_3(uint64_t a1, void *a2)
{
  objc_class *v3;
  id v4;
  id v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;

  v3 = (objc_class *)MEMORY[0x1E0D197B8];
  v4 = a2;
  v5 = [v3 alloc];
  objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = *(_QWORD *)(a1 + 40);
  objc_msgSend(*(id *)(a1 + 48), "objectForKeyedSubscript:", v4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v9 = (void *)objc_msgSend(v5, "initWithContact:matchTokens:matchInfo:", v6, v7, v8);
  return v9;
}

id __68__SGSqlEntityStore_suggestContactMatchesWithFullTextSearch_limitTo___block_invoke(uint64_t a1, void *a2)
{
  objc_class *v2;
  id v3;
  void *v4;

  v2 = (objc_class *)MEMORY[0x1E0CB3940];
  v3 = a2;
  v4 = (void *)objc_msgSend([v2 alloc], "initWithFormat:", CFSTR("%@*"), v3);

  return v4;
}

void __69__SGSqlEntityStore_suggestContactMatchesWithMessagingPrefix_limitTo___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v2;
  id v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = a2;
  objc_msgSend(v3, "bindNamedParam:toNSString:", ":match", v2);
  objc_msgSend(v3, "bindNamedParam:toInt64:", ":pseudo", 4);

}

uint64_t __69__SGSqlEntityStore_suggestContactMatchesWithMessagingPrefix_limitTo___block_invoke_2(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v3 = (void *)MEMORY[0x1E0CB37E8];
  v4 = a2;
  objc_msgSend(v3, "numberWithLongLong:", objc_msgSend(v4, "getInt64ForColumn:", 0));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", objc_msgSend(v4, "getInt64ForColumn:", 1));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", objc_msgSend(v4, "getInt64ForColumn:", 2));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "getNSDataForColumn:", 3);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v9 = *(_QWORD *)(a1 + 64);
  v10 = 30;
  if (v9 < 0x7FFFFFFFFFFFFFFFLL)
    v10 = -1;
  if (v10 >= v9)
    v11 = *(_QWORD *)(a1 + 64);
  else
    v11 = v10;
  LOBYTE(v14) = 0;
  v12 = objc_msgSend(*(id *)(a1 + 32), "_processContactMatchWithContacts:matches:limit:masterEntityId:detailEntityId:contactEntityId:matchinfoData:tokens:requireName:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), v11, v5, v6, v7, v8, *(_QWORD *)(a1 + 56), v14);

  return v12;
}

void __69__SGSqlEntityStore_suggestContactMatchesWithMessagingPrefix_limitTo___block_invoke_3(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  v8 = a2;
  v2 = (void *)objc_opt_class();
  v3 = (void *)MEMORY[0x1E0D197F0];
  SGNormalizeEmailAddress();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "contactDetail:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "name");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "globPrefix:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "bindNamedParam:toNSString:", ":tagPrefix", v7);

  objc_msgSend(v8, "bindNamedParam:toInt64:", ":pseudo", 4);
}

uint64_t __69__SGSqlEntityStore_suggestContactMatchesWithMessagingPrefix_limitTo___block_invoke_4(_QWORD *a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v19;

  v3 = (void *)MEMORY[0x1E0CB37E8];
  v4 = a2;
  objc_msgSend(v3, "numberWithLongLong:", objc_msgSend(v4, "getInt64ForColumn:", 0));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", objc_msgSend(v4, "getInt64ForColumn:", 1));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void *)MEMORY[0x1E0CB37E8];
  v8 = objc_msgSend(v4, "getInt64ForColumn:", 2);

  objc_msgSend(v7, "numberWithLongLong:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = (void *)a1[4];
  v11 = a1[5];
  v12 = a1[6];
  v13 = a1[8];
  v14 = 30;
  if (v13 < 0x7FFFFFFFFFFFFFFFLL)
    v14 = -1;
  if (v14 >= v13)
    v15 = a1[8];
  else
    v15 = v14;
  v16 = (void *)objc_opt_new();
  LOBYTE(v19) = 1;
  v17 = objc_msgSend(v10, "_processContactMatchWithContacts:matches:limit:masterEntityId:detailEntityId:contactEntityId:matchinfoData:tokens:requireName:", v11, v12, v15, v5, v6, v9, v16, a1[7], v19);

  return v17;
}

id __69__SGSqlEntityStore_suggestContactMatchesWithMessagingPrefix_limitTo___block_invoke_5(uint64_t a1, void *a2)
{
  objc_class *v3;
  id v4;
  id v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;

  v3 = (objc_class *)MEMORY[0x1E0D197B8];
  v4 = a2;
  v5 = [v3 alloc];
  objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = *(_QWORD *)(a1 + 40);
  objc_msgSend(*(id *)(a1 + 48), "objectForKeyedSubscript:", v4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v9 = (void *)objc_msgSend(v5, "initWithContact:matchTokens:matchInfo:", v6, v7, v8);
  return v9;
}

id __61__SGSqlEntityStore_suggestContactMatchesWithContact_limitTo___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  uint64_t v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  NSObject *v11;
  id v13;
  uint8_t buf[4];
  id v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = *(void **)(a1 + 32);
  v4 = a2;
  objc_msgSend(v3, "filterOutRejectedDetailsFromContact:", v4);
  v5 = *(_QWORD *)(a1 + 40);
  v13 = 0;
  +[SGCuratedContactMatcher compareContact:cnContact:newDetails:matchedDetails:matchPreference:](SGCuratedContactMatcher, "compareContact:cnContact:newDetails:matchedDetails:matchPreference:", v4, v5, &v13, 0, 1);

  v6 = v13;
  if ((objc_msgSend(v6, "containsDetailSuggestions") & 1) != 0)
  {
    v7 = objc_alloc(MEMORY[0x1E0D197B8]);
    v8 = (void *)objc_msgSend(v7, "initWithContact:matchTokens:matchInfo:", v6, MEMORY[0x1E0C9AA60], MEMORY[0x1E0C9AA60]);
  }
  else
  {
    if (objc_msgSend(v6, "containsSuggestions"))
    {
      v9 = objc_alloc(MEMORY[0x1E0D197B8]);
      v10 = (void *)objc_msgSend(v9, "initWithContact:matchTokens:matchInfo:", v6, MEMORY[0x1E0C9AA60], MEMORY[0x1E0C9AA60]);
      objc_msgSend(*(id *)(a1 + 48), "addObject:", v10);

    }
    else
    {
      sgLogHandle();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138412290;
        v15 = v6;
        _os_log_debug_impl(&dword_1C3607000, v11, OS_LOG_TYPE_DEBUG, "Skipping match because it contains no suggestions: %@", buf, 0xCu);
      }

    }
    v8 = 0;
  }

  return v8;
}

id __58__SGSqlEntityStore__rankSGContacts_bySimilarityToContact___block_invoke(_QWORD *a1, void *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;

  v2 = (void *)a1[4];
  v3 = a1[5];
  v4 = a1[6];
  v5 = a2;
  objc_msgSend(v2, "_scoreSGContact:bySimilarityToContact:cnContactFullname:", v5, v3, v4);
  v6 = (void *)MEMORY[0x1E0D81638];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "tupleWithFirst:second:", v5, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

uint64_t __58__SGSqlEntityStore__rankSGContacts_bySimilarityToContact___block_invoke_3(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "first");
}

uint64_t __58__SGSqlEntityStore__rankSGContacts_bySimilarityToContact___block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;

  v4 = a2;
  objc_msgSend(a3, "second");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "second");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v7 = objc_msgSend(v5, "compare:", v6);
  return v7;
}

uint64_t __56__SGSqlEntityStore_filterOutRejectedDetailsFromContact___block_invoke(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "hasContactDetail:forContact:", a2, *(_QWORD *)(a1 + 40)) ^ 1;
}

BOOL __95__SGSqlEntityStore_suggestContactsWithContact_withSnippets_filterConfirmRejectDetails_limitTo___block_invoke_7(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  _BOOL8 v4;

  objc_msgSend(a2, "name");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "fullName");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "length") == 0;

  return v4;
}

uint64_t __95__SGSqlEntityStore_suggestContactsWithContact_withSnippets_filterConfirmRejectDetails_limitTo___block_invoke_6()
{
  return 1;
}

uint64_t __95__SGSqlEntityStore_suggestContactsWithContact_withSnippets_filterConfirmRejectDetails_limitTo___block_invoke_5()
{
  return 1;
}

uint64_t __95__SGSqlEntityStore_suggestContactsWithContact_withSnippets_filterConfirmRejectDetails_limitTo___block_invoke_4()
{
  return 1;
}

BOOL __95__SGSqlEntityStore_suggestContactsWithContact_withSnippets_filterConfirmRejectDetails_limitTo___block_invoke_3(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _BOOL8 v8;

  v3 = a2;
  if ((*(unsigned int (**)(void))(*(_QWORD *)(a1 + 48) + 16))())
  {
    objc_msgSend(*(id *)(a1 + 32), "addObject:", v3);
    v4 = *(void **)(a1 + 40);
    v5 = (void *)MEMORY[0x1E0CB37E8];
    objc_msgSend(v3, "recordId");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "numberWithLongLong:", objc_msgSend(v6, "numericValue"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "addObject:", v7);

  }
  v8 = (unint64_t)objc_msgSend(*(id *)(a1 + 32), "count") < *(_QWORD *)(a1 + 56);

  return v8;
}

uint64_t __67__SGSqlEntityStore__contactIdForInteractionContactIdentifierMatch___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  objc_msgSend(a2, "getInt64AsNSNumberForColumn:", 0);
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

  return *MEMORY[0x1E0D81780];
}

uint64_t __79__SGSqlEntityStore__contactIdsForContactNameMatches_strongNameIds_weakNameIds___block_invoke_2(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 32);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", objc_msgSend(a2, "getInt64ForColumnName:table:", "id", "entity"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "addObject:", v3);

  return *MEMORY[0x1E0D81780];
}

void __79__SGSqlEntityStore__contactIdsForContactNameMatches_strongNameIds_weakNameIds___block_invoke_3(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  uint64_t v9;
  id v10;
  id v11;
  _QWORD v12[4];
  id v13;
  _QWORD v14[4];
  id v15;
  id v16;

  v5 = a2;
  v6 = a3;
  v7 = *(void **)(a1 + 40);
  v8 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v9 = MEMORY[0x1E0C809B0];
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = __79__SGSqlEntityStore__contactIdsForContactNameMatches_strongNameIds_weakNameIds___block_invoke_4;
  v14[3] = &unk_1E7DB6E80;
  v15 = v7;
  v16 = v6;
  v12[0] = v9;
  v12[1] = 3221225472;
  v12[2] = __79__SGSqlEntityStore__contactIdsForContactNameMatches_strongNameIds_weakNameIds___block_invoke_6;
  v12[3] = &unk_1E7DB6ED0;
  v13 = v5;
  v10 = v5;
  v11 = v6;
  objc_msgSend(v8, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("SELECT CASE WHEN entity.masterEntityId > 0 THEN entity.masterEntityId ELSE entity.id END  AS masterEntityId FROM entity WHERE id IN _pas_nsset(:candidates)     AND EXISTS(        SELECT value AS pattern             FROM _pas_nsarray(:patterns)             WHERE title LIKE pattern    )"), v14, v12, 0);

}

void __79__SGSqlEntityStore__contactIdsForContactNameMatches_strongNameIds_weakNameIds___block_invoke_4(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;
  id v5;
  sqlite3 *v6;
  int v7;
  void *v8;
  id v9;
  _QWORD v10[4];
  int v11;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = a2;
  objc_msgSend(v4, "bindNamedParam:toNSSet:", ":candidates", v3);
  v5 = objc_retainAutorelease(v4);
  v6 = sqlite3_db_handle((sqlite3_stmt *)objc_msgSend(v5, "stmt"));
  v7 = sqlite3_limit(v6, 8, -1);
  v8 = *(void **)(a1 + 40);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __79__SGSqlEntityStore__contactIdsForContactNameMatches_strongNameIds_weakNameIds___block_invoke_5;
  v10[3] = &__block_descriptor_36_e18_B16__0__NSString_8l;
  v11 = v7;
  objc_msgSend(v8, "_pas_filteredArrayWithTest:", v10);
  v9 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "bindNamedParam:toNSArray:", ":patterns", v9);

}

uint64_t __79__SGSqlEntityStore__contactIdsForContactNameMatches_strongNameIds_weakNameIds___block_invoke_6(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 32);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", objc_msgSend(a2, "getInt64ForColumnAlias:", "masterEntityId"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "addObject:", v3);

  return *MEMORY[0x1E0D81780];
}

BOOL __79__SGSqlEntityStore__contactIdsForContactNameMatches_strongNameIds_weakNameIds___block_invoke_5(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "lengthOfBytesUsingEncoding:", 4) < (unint64_t)*(int *)(a1 + 32);
}

void __96__SGSqlEntityStore__contactIdsForContactDetailMatches_detailContactIds_socialProfileContactIds___block_invoke_4(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = a2;
  objc_msgSend(v4, "bindNamedParam:toNSSet:", ":ids", v3);
  objc_msgSend(*(id *)(a1 + 40), "bindCheckContactRow:isMe:", v4, objc_msgSend(*(id *)(a1 + 48), "isMe"));

}

uint64_t __96__SGSqlEntityStore__contactIdsForContactDetailMatches_detailContactIds_socialProfileContactIds___block_invoke_5(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 32);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", objc_msgSend(a2, "getInt64ForColumnAlias:", "masterEntityId"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "addObject:", v3);

  return *MEMORY[0x1E0D81780];
}

void __96__SGSqlEntityStore__contactIdsForContactDetailMatches_detailContactIds_socialProfileContactIds___block_invoke_6(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = a2;
  objc_msgSend(v4, "bindNamedParam:toNSSet:", ":socialProfileSubContactIds", v3);
  objc_msgSend(*(id *)(a1 + 40), "bindCheckContactRow:isMe:", v4, objc_msgSend(*(id *)(a1 + 48), "isMe"));

}

uint64_t __96__SGSqlEntityStore__contactIdsForContactDetailMatches_detailContactIds_socialProfileContactIds___block_invoke_7(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 32);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", objc_msgSend(a2, "getInt64ForColumnAlias:", "masterEntityId"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "addObject:", v3);

  return *MEMORY[0x1E0D81780];
}

uint64_t __96__SGSqlEntityStore__contactIdsForContactDetailMatches_detailContactIds_socialProfileContactIds___block_invoke_3(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  unsigned __int8 *v8;
  SGIdentityKey *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  SGIdentityKey *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;

  v3 = a2;
  v4 = objc_msgSend(v3, "getInt64ForColumnName:table:", "masterEntityId", "entity");
  v5 = objc_msgSend(v3, "getInt64ForColumnName:table:", "id", "entity");
  v6 = objc_msgSend(v3, "getInt64ForColumnName:table:", "entityType", "entity");
  objc_msgSend(v3, "getNSStringForColumnName:table:", "entityKey", "entity");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  v8 = (unsigned __int8 *)MEMORY[0x1E0D81780];
  if (v6 == 4)
  {
    v9 = -[SGIdentityKey initWithSerialized:]([SGIdentityKey alloc], "initWithSerialized:", v7);
    v10 = objc_msgSend(*(id *)(a1 + 32), "entityTypeFromIdentityKeyType:", -[SGIdentityKey type](v9, "type"));
    v11 = *(_QWORD *)(a1 + 56);

    if (v10 == v11)
    {
      v12 = *(void **)(a1 + 48);
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v5);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = v12;
LABEL_8:
      objc_msgSend(v14, "addObject:", v13);

    }
  }
  else
  {
    SGDelimitedStringsDeserialize();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "objectAtIndexedSubscript:", 0);
    v16 = (void *)objc_claimAutoreleasedReturnValue();

    v17 = -[SGIdentityKey initWithSerialized:]([SGIdentityKey alloc], "initWithSerialized:", v16);
    if (-[SGIdentityKey type](v17, "type") == 5)
    {
      v18 = *(void **)(a1 + 40);
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v4);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "addObject:", v19);

    }
    if (v4 != -1)
    {
      v20 = *(void **)(a1 + 48);
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v4);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = v20;
      goto LABEL_8;
    }
  }
  v21 = *v8;

  return v21;
}

void __54__SGSqlEntityStore_suggestContactsWithPrefix_limitTo___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  id v7;

  v7 = a2;
  objc_msgSend(v7, "bindNamedParam:toInt64:", ":pseudo", 4);
  objc_msgSend((id)objc_opt_class(), "likePrefix:", *(_QWORD *)(a1 + 40));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "bindNamedParam:toNSString:", ":prefix", v3);

  v4 = *(_QWORD *)(a1 + 48);
  v5 = 30;
  if (v4 < 0x7FFFFFFFFFFFFFFFLL)
    v5 = -1;
  if (v5 >= v4)
    v6 = *(_QWORD *)(a1 + 48);
  else
    v6 = v5;
  objc_msgSend(v7, "bindNamedParam:toInt64:", ":limit", v6);

}

uint64_t __83__SGSqlEntityStore_suggestContactsByMasterEntityQuery_withSnippets_limit_bindings___block_invoke(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 32), "addObject:", a2);
  return 1;
}

void __96__SGSqlEntityStore_enumerateContactsByMasterEntityQuery_withSnippets_limit_bindings_usingBlock___block_invoke(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "masterEntityIDsForMasterEntityQuery:bindings:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if ((unint64_t)objc_msgSend(v2, "count") >= *(_QWORD *)(a1 + 64))
  {
    sgLogHandle();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v4 = *(_QWORD *)(a1 + 64);
      v5 = 134217984;
      v6 = v4;
      _os_log_impl(&dword_1C3607000, v3, OS_LOG_TYPE_INFO, "Got more than %lu results for query. Giving up.", (uint8_t *)&v5, 0xCu);
    }

  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "_enumerateContactsForMasterEntityIds:withSnippets:usingBlock:", v2, *(unsigned __int8 *)(a1 + 72), *(_QWORD *)(a1 + 56));
  }

}

uint64_t __61__SGSqlEntityStore__contactsForMasterEntityIds_withSnippets___block_invoke(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 32), "addObject:", a2);
  return 1;
}

uint64_t __65__SGSqlEntityStore_masterEntityIDsForMasterEntityQuery_bindings___block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __65__SGSqlEntityStore_masterEntityIDsForMasterEntityQuery_bindings___block_invoke_2(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 32);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", objc_msgSend(a2, "getIntegerForColumn:", 0));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "addObject:", v3);

  return *MEMORY[0x1E0D81780];
}

void __64__SGSqlEntityStore_storageContactByMasterEntityId_withSnippets___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;

  v3 = (void *)MEMORY[0x1E0CB37E8];
  v4 = *(_QWORD *)(a1 + 40);
  v5 = a2;
  objc_msgSend(v3, "numberWithLongLong:", v4);
  v9 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "objectForKeyedSubscript:", v9);
  v6 = objc_claimAutoreleasedReturnValue();

  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v6;

}

uint64_t __64__SGSqlEntityStore_storageContactByMasterEntityId_withSnippets___block_invoke_2(uint64_t a1, uint64_t a2)
{
  +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":masterEntityId", *(_QWORD *)(a1 + 32));
  +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":pseudo", 4);
  return +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":messagesMeCard", 64);
}

uint64_t __64__SGSqlEntityStore_storageContactByMasterEntityId_withSnippets___block_invoke_3(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  objc_msgSend(*(id *)(a1 + 32), "entityFromSqlResult:withSnippets:", a2, *(unsigned __int8 *)(a1 + 48));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = *(void **)(a1 + 40);
  +[SGContactEntity contactEntityFromEntity:](SGContactEntity, "contactEntityFromEntity:", v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  +[SGStorageContact contactFromContactEntity:](SGStorageContact, "contactFromContactEntity:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addObject:", v6);

  return 0;
}

id __64__SGSqlEntityStore_storageContactByMasterEntityId_withSnippets___block_invoke_4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;
  void *v9;

  v3 = a2;
  objc_msgSend(v3, "profiles");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "count");

  if (v5 != 1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "handleFailureInMethod:object:file:lineNumber:description:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), CFSTR("SGSqlEntityStore.m"), 1077, CFSTR("Candidate already has more than 1 profile. Merging happening early?"));

  }
  if (objc_msgSend(*(id *)(a1 + 32), "contactIsDisplayable:", v3))
    v6 = v3;
  else
    v6 = 0;
  v7 = v6;

  return v7;
}

void __64__SGSqlEntityStore_storageContactByMasterEntityId_withSnippets___block_invoke_5(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v5 = a2;
  if ((unint64_t)objc_msgSend(v5, "count") >= 0x32)
    objc_msgSend(v5, "removeAllObjects");
  v3 = *(_QWORD *)(a1 + 32);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)(a1 + 40));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setObject:forKeyedSubscript:", v3, v4);

}

void __41__SGSqlEntityStore_contactIsDisplayable___block_invoke(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  objc_msgSend(*(id *)(a1 + 32), "messageKey");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "serialize");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  +[SGSqliteDatabase bindParam:name:nsstring:](SGSqliteDatabase, "bindParam:name:nsstring:", a2, ":key", v3);

}

uint64_t __41__SGSqlEntityStore_contactIsDisplayable___block_invoke_2(uint64_t a1, sqlite3_stmt *a2)
{
  if (sqlite3_column_int(a2, 0) != 4)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  return 1;
}

void __46__SGSqlEntityStore_parentKeysForDuplicateKey___block_invoke(uint64_t a1, uint64_t a2)
{
  void *v4;
  id v5;

  +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":entityType", objc_msgSend(*(id *)(a1 + 32), "entityType"));
  objc_msgSend(*(id *)(a1 + 32), "entityKey");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "serialize");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  +[SGSqliteDatabase bindParam:name:nsstring:](SGSqliteDatabase, "bindParam:name:nsstring:", a2, ":entityKey", v4);

}

uint64_t __46__SGSqlEntityStore_parentKeysForDuplicateKey___block_invoke_2(uint64_t a1, sqlite3_stmt *a2)
{
  void *v3;
  void *v4;
  SGDuplicateKey *v5;

  sqlite3_column_nsstring(a2, 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    v4 = *(void **)(a1 + 32);
    v5 = -[SGDuplicateKey initWithSerialized:]([SGDuplicateKey alloc], "initWithSerialized:", v3);
    objc_msgSend(v4, "addObject:", v5);

  }
  return 0;
}

void __55__SGSqlEntityStore_mostRecentParentKeyForDuplicateKey___block_invoke(uint64_t a1, uint64_t a2)
{
  void *v4;
  id v5;

  +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":entityType", objc_msgSend(*(id *)(a1 + 32), "entityType"));
  objc_msgSend(*(id *)(a1 + 32), "entityKey");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "serialize");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  +[SGSqliteDatabase bindParam:name:nsstring:](SGSqliteDatabase, "bindParam:name:nsstring:", a2, ":entityKey", v4);

}

uint64_t __55__SGSqlEntityStore_mostRecentParentKeyForDuplicateKey___block_invoke_2(uint64_t a1, sqlite3_stmt *a2)
{
  void *v3;
  SGDuplicateKey *v4;
  uint64_t v5;
  void *v6;
  char *v7;

  sqlite3_column_nsstring(a2, 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    v4 = -[SGDuplicateKey initWithSerialized:]([SGDuplicateKey alloc], "initWithSerialized:", v3);
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v6 = *(void **)(v5 + 40);
    *(_QWORD *)(v5 + 40) = v4;

    v7 = &SGSqliteDatabaseStop;
  }
  else
  {
    v7 = &SGSqliteDatabaseKeepGoing;
  }

  return *v7;
}

uint64_t __45__SGSqlEntityStore_emailsPendingVerification__block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  SGEmailKey *v4;
  NSObject *v5;
  int v7;
  void *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  objc_msgSend(a2, "getNSStringForColumnName:table:", "key", 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    v4 = -[SGMessageKey initWithSerialized:]([SGEmailKey alloc], "initWithSerialized:", v3);
    if (v4)
    {
      objc_msgSend(*(id *)(a1 + 32), "addObject:", v4);
    }
    else
    {
      sgEventsLogHandle();
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        v7 = 138412290;
        v8 = v3;
        _os_log_error_impl(&dword_1C3607000, v5, OS_LOG_TYPE_ERROR, "Could not create SGEmailKey for key %@", (uint8_t *)&v7, 0xCu);
      }

    }
  }
  else
  {
    sgEventsLogHandle();
    v4 = (SGEmailKey *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(&v4->super.super, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v7) = 0;
      _os_log_error_impl(&dword_1C3607000, &v4->super.super, OS_LOG_TYPE_ERROR, "key in emailMetadata was nil", (uint8_t *)&v7, 2u);
    }
  }

  return 0;
}

uint64_t __45__SGSqlEntityStore_emailsPendingVerification__block_invoke_113(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  int v5;
  id v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  sgEventsLogHandle();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    v5 = 138412290;
    v6 = v2;
    _os_log_error_impl(&dword_1C3607000, v3, OS_LOG_TYPE_ERROR, "Error finding e-mails pending verification: %@", (uint8_t *)&v5, 0xCu);
  }

  return *MEMORY[0x1E0D81788];
}

uint64_t __38__SGSqlEntityStore_nextPendingGeocode__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  objc_msgSend(*(id *)(a1 + 32), "entityFromSqlResult:", a2);
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

  return 1;
}

uint64_t __42__SGSqlEntityStore_clearMasterEntityCache__block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "removeAllObjects");
}

uint64_t __104__SGSqlEntityStore_initWithEntityDbPath_snippetDbPath_isEphemeral_sharedLock_executeJournals_noMigrate___block_invoke(uint64_t a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(a1 + 32), "_runInitMigrationTasks:noMigrate:", *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 56));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = result;
  return result;
}

void __104__SGSqlEntityStore_initWithEntityDbPath_snippetDbPath_isEphemeral_sharedLock_executeJournals_noMigrate___block_invoke_3()
{
  void *v0;
  uint64_t v1;
  void *v2;

  v0 = (void *)MEMORY[0x1C3BD4F6C]();
  v1 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99E10]), "initWithCapacity:", 2000);
  v2 = (void *)initWithEntityDbPath_snippetDbPath_isEphemeral_sharedLock_executeJournals_noMigrate___pasExprOnceResult;
  initWithEntityDbPath_snippetDbPath_isEphemeral_sharedLock_executeJournals_noMigrate___pasExprOnceResult = v1;

  objc_autoreleasePoolPop(v0);
}

void __104__SGSqlEntityStore_initWithEntityDbPath_snippetDbPath_isEphemeral_sharedLock_executeJournals_noMigrate___block_invoke_75()
{
  uint64_t v0;
  void *v1;

  v0 = objc_msgSend(objc_alloc(MEMORY[0x1E0D815E0]), "initWithBlock:idleTimeout:", &__block_literal_global_79, 2.0);
  v1 = (void *)masterEntityCache;
  masterEntityCache = v0;

}

id __104__SGSqlEntityStore_initWithEntityDbPath_snippetDbPath_isEphemeral_sharedLock_executeJournals_noMigrate___block_invoke_2()
{
  id v0;
  void *v1;
  void *v2;

  v0 = objc_alloc(MEMORY[0x1E0D815F0]);
  v1 = (void *)objc_opt_new();
  v2 = (void *)objc_msgSend(v0, "initWithGuardedData:", v1);

  return v2;
}

+ (id)defaultPathCreatingSuggestionsDirectoryIfNeeded:(BOOL)a3
{
  return +[SGPaths suggestionsDirectoryFile:creatingSuggestionsDirectoryIfNeeded:](SGPaths, "suggestionsDirectoryFile:creatingSuggestionsDirectoryIfNeeded:", CFSTR("entities.db"), a3);
}

+ (id)defaultPath
{
  return (id)objc_msgSend(a1, "defaultPathCreatingSuggestionsDirectoryIfNeeded:", 1);
}

+ (id)defaultSnippetPath
{
  return +[SGPaths suggestionsDirectoryFile:](SGPaths, "suggestionsDirectoryFile:", CFSTR("snippets.db"));
}

+ (SGSqlEntityStore)storeWithDefaultLocationAndExecuteJournals:(BOOL)a3
{
  _BOOL8 v3;
  NSObject *v5;
  NSObject *v6;
  void *v7;
  id v9;
  id v10;
  void *v11;
  void *v12;
  SGEKCalendarAdapter *v13;
  void *v14;
  SGDCloudKitSyncObserver *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  SGRemindersAdapter *v21;
  void *v22;
  void *v23;
  void *v24;
  uint8_t v25[16];
  uint8_t buf[16];

  v3 = a3;
  if (objc_msgSend(MEMORY[0x1E0D81590], "isClassCLocked"))
  {
    sgLogHandle();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1C3607000, v5, OS_LOG_TYPE_ERROR, "Suggestions entity store cannot be opened before first unlock", buf, 2u);
    }
LABEL_8:
    v7 = 0;
    goto LABEL_9;
  }
  +[SGSqlEntityStore defaultPath](SGSqlEntityStore, "defaultPath");
  v5 = objc_claimAutoreleasedReturnValue();
  if (+[SGSqlEntityStore pathHasFutureDbSchema:](SGSqlEntityStore, "pathHasFutureDbSchema:", v5))
  {
    sgLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v25 = 0;
      _os_log_error_impl(&dword_1C3607000, v6, OS_LOG_TYPE_ERROR, "entity store is known to have a future schema. Giving up on store initialization.", v25, 2u);
    }

    goto LABEL_8;
  }
  if (storeWithDefaultLocationAndExecuteJournals___pasOnceToken5 != -1)
    dispatch_once(&storeWithDefaultLocationAndExecuteJournals___pasOnceToken5, &__block_literal_global_22875);
  v9 = (id)storeWithDefaultLocationAndExecuteJournals___pasExprOnceResult;
  v10 = objc_alloc((Class)a1);
  +[SGSqlEntityStore defaultSnippetPath](SGSqlEntityStore, "defaultSnippetPath");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void *)objc_msgSend(v10, "initWithEntityDbPath:snippetDbPath:isEphemeral:sharedLock:executeJournals:noMigrate:", v5, v11, 0, v9, v3, 0);

  if (v7)
  {
    objc_msgSend(v7, "journal");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = -[SGEKCalendarAdapter initWithSGSqlEntityStore:]([SGEKCalendarAdapter alloc], "initWithSGSqlEntityStore:", v7);
    objc_msgSend(v12, "addCalendarObserver:", v13);

    objc_msgSend(v7, "journal");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = -[SGDCloudKitSyncObserver initWithCloudKitSyncGetter:]([SGDCloudKitSyncObserver alloc], "initWithCloudKitSyncGetter:", &__block_literal_global_27_22878);
    objc_msgSend(v14, "addCalendarObserver:", v15);

    objc_msgSend(v7, "journal");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "spotlightContactsAdapter");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "addContactsObserver:", v17);

    objc_msgSend(v7, "journal");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "sgToCNContactsCacheUpdateAdapter");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "addContactsObserver:", v19);

    objc_msgSend(v7, "journal");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = -[SGRemindersAdapter initWithSGSqlEntityStore:]([SGRemindersAdapter alloc], "initWithSGSqlEntityStore:", v7);
    objc_msgSend(v20, "addRemindersObserver:", v21);

    objc_msgSend(v7, "journal");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = (void *)objc_opt_new();
    objc_msgSend(v22, "addCalendarObserver:", v23);

    objc_msgSend(v7, "journal");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "freezeObservers");

  }
LABEL_9:

  return (SGSqlEntityStore *)v7;
}

+ (id)defaultHarvestStore
{
  NSObject *v2;
  uint64_t v3;
  void *v4;
  uint8_t v6[16];

  pthread_mutex_lock(&defaultHarvestStore_harvestStoreInitLock);
  if (!defaultHarvestStore_instance)
  {
    sgLogHandle();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v6 = 0;
      _os_log_impl(&dword_1C3607000, v2, OS_LOG_TYPE_INFO, "Attempting to instantiate the shared harvest store", v6, 2u);
    }

    +[SGSqlEntityStore storeWithDefaultLocationAndExecuteJournals:](SGSqlEntityStore, "storeWithDefaultLocationAndExecuteJournals:", 0);
    v3 = objc_claimAutoreleasedReturnValue();
    v4 = (void *)defaultHarvestStore_instance;
    defaultHarvestStore_instance = v3;

  }
  pthread_mutex_unlock(&defaultHarvestStore_harvestStoreInitLock);
  return (id)defaultHarvestStore_instance;
}

+ (id)sqlStoreInMemory
{
  id v2;
  void *v3;
  void *v4;
  void *v5;

  if (!emptySqlStoreInMemory
    || (pthread_mutex_lock(&emptySqlStoreInMemoryLock),
        v2 = (id)emptySqlStoreInMemory,
        v3 = (void *)emptySqlStoreInMemory,
        emptySqlStoreInMemory = 0,
        v3,
        pthread_mutex_unlock(&emptySqlStoreInMemoryLock),
        !v2))
  {
    +[SGSqliteDatabase inMemoryPath](SGSqliteDatabase, "inMemoryPath");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    +[SGSqlEntityStore sqlStoreWithEntityDbPath:snippetDbPath:isEphemeral:executeJournals:](SGSqlEntityStore, "sqlStoreWithEntityDbPath:snippetDbPath:isEphemeral:executeJournals:", v4, v4, 1, 1);
    v2 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "journal");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "freezeObservers");

  }
  return v2;
}

+ (void)prepareSqlStoreInMemory
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;

  pthread_mutex_lock(&emptySqlStoreInMemoryLock);
  if (!emptySqlStoreInMemory)
  {
    +[SGSqliteDatabase inMemoryPath](SGSqliteDatabase, "inMemoryPath");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    +[SGSqlEntityStore sqlStoreWithEntityDbPath:snippetDbPath:isEphemeral:executeJournals:](SGSqlEntityStore, "sqlStoreWithEntityDbPath:snippetDbPath:isEphemeral:executeJournals:", v2, v2, 1, 1);
    v3 = objc_claimAutoreleasedReturnValue();
    v4 = (void *)emptySqlStoreInMemory;
    emptySqlStoreInMemory = v3;

    objc_msgSend((id)emptySqlStoreInMemory, "journal");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "freezeObservers");

  }
  pthread_mutex_unlock(&emptySqlStoreInMemoryLock);
}

+ (void)prepareSqlStoreInMemoryByClearingExistingStore:(id)a3
{
  id v4;

  v4 = a3;
  pthread_mutex_lock(&emptySqlStoreInMemoryLock);
  if (!emptySqlStoreInMemory)
  {
    objc_msgSend(v4, "clearAllTables");
    objc_storeStrong((id *)&emptySqlStoreInMemory, a3);
  }
  pthread_mutex_unlock(&emptySqlStoreInMemoryLock);

}

+ (void)deletePreparedSqlStoreInMemory
{
  void *v2;

  pthread_mutex_lock(&emptySqlStoreInMemoryLock);
  v2 = (void *)emptySqlStoreInMemory;
  emptySqlStoreInMemory = 0;

  pthread_mutex_unlock(&emptySqlStoreInMemoryLock);
}

+ (id)sqlStoreWithEntityDbPath:(id)a3 snippetDbPath:(id)a4 isEphemeral:(BOOL)a5 executeJournals:(BOOL)a6
{
  _BOOL8 v6;
  _BOOL8 v7;
  id v10;
  id v11;
  NSObject *v12;
  void *v13;
  uint8_t v15[16];

  v6 = a6;
  v7 = a5;
  v10 = a3;
  v11 = a4;
  if (+[SGSqlEntityStore pathHasFutureDbSchema:](SGSqlEntityStore, "pathHasFutureDbSchema:", v10))
  {
    sgLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v15 = 0;
      _os_log_impl(&dword_1C3607000, v12, OS_LOG_TYPE_INFO, "entity store is known to have a future schema. Giving up on store initialization.", v15, 2u);
    }

    v13 = 0;
  }
  else
  {
    v13 = (void *)objc_msgSend(objc_alloc((Class)a1), "initWithEntityDbPath:snippetDbPath:isEphemeral:sharedLock:executeJournals:noMigrate:", v10, v11, v7, 0, v6, 0);
  }

  return v13;
}

+ (id)sqlStoreWithEntityDbPath:(id)a3 snippetDbPath:(id)a4 isEphemeral:(BOOL)a5 sharedLock:(id)a6 executeJournals:(BOOL)a7
{
  _BOOL8 v7;
  _BOOL8 v9;
  id v12;
  id v13;
  id v14;
  NSObject *v15;
  void *v16;
  uint8_t v18[16];

  v7 = a7;
  v9 = a5;
  v12 = a3;
  v13 = a4;
  v14 = a6;
  if (+[SGSqlEntityStore pathHasFutureDbSchema:](SGSqlEntityStore, "pathHasFutureDbSchema:", v12))
  {
    sgLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v18 = 0;
      _os_log_impl(&dword_1C3607000, v15, OS_LOG_TYPE_INFO, "entity store is known to have a future schema. Giving up on store initialization.", v18, 2u);
    }

    v16 = 0;
  }
  else
  {
    v16 = (void *)objc_msgSend(objc_alloc((Class)a1), "initWithEntityDbPath:snippetDbPath:isEphemeral:sharedLock:executeJournals:noMigrate:", v12, v13, v9, v14, v7, 0);
  }

  return v16;
}

+ (id)sqlStoreWithEntityDbPathNoMigrate:(id)a3 snippetDbPath:(id)a4 isEphemeral:(BOOL)a5 executeJournals:(BOOL)a6
{
  _BOOL8 v6;
  _BOOL8 v7;
  id v10;
  id v11;
  NSObject *v12;
  void *v13;
  uint8_t v15[16];

  v6 = a6;
  v7 = a5;
  v10 = a3;
  v11 = a4;
  if (+[SGSqlEntityStore pathHasFutureDbSchema:](SGSqlEntityStore, "pathHasFutureDbSchema:", v10))
  {
    sgLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v15 = 0;
      _os_log_impl(&dword_1C3607000, v12, OS_LOG_TYPE_INFO, "entity store is known to have a future schema. Giving up on store initialization.", v15, 2u);
    }

    v13 = 0;
  }
  else
  {
    v13 = (void *)objc_msgSend(objc_alloc((Class)a1), "initWithEntityDbPath:snippetDbPath:isEphemeral:sharedLock:executeJournals:noMigrate:", v10, v11, v7, 0, v6, 1);
  }

  return v13;
}

+ (id)_initializeDatabaseNolock:(id)a3 withProtection:(BOOL)a4 sharedLock:(id)a5 newDatabaseCreated:(BOOL *)a6
{
  _BOOL8 v8;
  id v9;
  id v10;
  void *v11;
  char v12;
  SGSqliteDatabase *v13;
  id *v14;
  SGSqliteDatabase *v15;
  NSObject *v16;
  SGSqliteDatabase *v17;
  uint64_t v18;
  NSObject *v19;
  void *v20;
  void *v21;
  NSObject *v23;
  uint64_t v24;
  _QWORD v25[5];
  _QWORD v26[5];
  _QWORD v27[5];
  id obj;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t);
  void (*v33)(uint64_t);
  id v34;
  uint8_t buf[4];
  id v36;
  __int16 v37;
  uint64_t v38;
  uint64_t v39;

  v8 = a4;
  v39 = *MEMORY[0x1E0C80C00];
  v9 = a3;
  v10 = a5;
  v29 = 0;
  v30 = &v29;
  v31 = 0x3032000000;
  v32 = __Block_byref_object_copy__22479;
  v33 = __Block_byref_object_dispose__22480;
  v34 = 0;
  if (a6)
  {
    objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_msgSend(v11, "fileExistsAtPath:", v9);

    *a6 = v12 ^ 1;
  }
  v13 = [SGSqliteDatabase alloc];
  v14 = (id *)(v30 + 5);
  obj = (id)v30[5];
  v15 = -[SGSqliteDatabase initWithFilename:withProtection:sharedLock:error:](v13, "initWithFilename:withProtection:sharedLock:error:", v9, v8, v10, &obj);
  objc_storeStrong(v14, obj);
  if (v30[5])
  {
    sgLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      v24 = v30[5];
      *(_DWORD *)buf = 138412546;
      v36 = v9;
      v37 = 2112;
      v38 = v24;
      _os_log_error_impl(&dword_1C3607000, v16, OS_LOG_TYPE_ERROR, "failed to initialize database at path %@: %@", buf, 0x16u);
    }

LABEL_7:
    v17 = 0;
    goto LABEL_18;
  }
  if (v8 && (objc_msgSend(MEMORY[0x1E0D81590], "isUnlocked") & 1) == 0)
  {
    sgLogHandle();
    v23 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1C3607000, v23, OS_LOG_TYPE_INFO, "device locked during db initialization", buf, 2u);
    }

    -[SGSqliteDatabase closePermanently](v15, "closePermanently");
    goto LABEL_7;
  }
  v18 = MEMORY[0x1E0C809B0];
  v27[0] = MEMORY[0x1E0C809B0];
  v27[1] = 3221225472;
  v27[2] = __91__SGSqlEntityStore__initializeDatabaseNolock_withProtection_sharedLock_newDatabaseCreated___block_invoke;
  v27[3] = &unk_1E7DB4690;
  v27[4] = &v29;
  -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](v15, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("CREATE TABLE IF NOT EXISTS integrityCheck (inconsequential STRING)"), 0, 0, v27);
  if (v30[5])
    goto LABEL_13;
  v26[0] = v18;
  v26[1] = 3221225472;
  v26[2] = __91__SGSqlEntityStore__initializeDatabaseNolock_withProtection_sharedLock_newDatabaseCreated___block_invoke_2;
  v26[3] = &unk_1E7DB4690;
  v26[4] = &v29;
  -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](v15, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("PRAGMA journal_mode=WAL"), 0, 0, v26);
  if (v30[5]
    || (v25[0] = v18,
        v25[1] = 3221225472,
        v25[2] = __91__SGSqlEntityStore__initializeDatabaseNolock_withProtection_sharedLock_newDatabaseCreated___block_invoke_3,
        v25[3] = &unk_1E7DB4690,
        v25[4] = &v29,
        -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](v15, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("PRAGMA synchronous=NORMAL"), 0, 0, v25), v30[5]))
  {
LABEL_13:
    sgLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1C3607000, v19, OS_LOG_TYPE_DEFAULT, "Integrity check detected corrupt database, attempting to reinitialize.", buf, 2u);
    }

    +[SGAggregateLogging databaseCorruptionDetectedViaIntegrityCheck](SGAggregateLogging, "databaseCorruptionDetectedViaIntegrityCheck");
    -[SGSqliteDatabase closePermanently](v15, "closePermanently");
    -[SGSqliteDatabase filename](v15, "filename");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    +[SGSqlEntityStore _recreateCorruptDatabase:sharedLock:withProtection:](SGSqlEntityStore, "_recreateCorruptDatabase:sharedLock:withProtection:", v20, v10, v8);
    v21 = (void *)objc_claimAutoreleasedReturnValue();

    if (a6)
      *a6 = 1;
  }
  else
  {
    v21 = v15;
  }
  v17 = v21;
  v15 = v17;
LABEL_18:

  _Block_object_dispose(&v29, 8);
  return v17;
}

+ (id)initializeDatabase:(id)a3 withProtection:(BOOL)a4 sharedLock:(id)a5 newDatabaseCreated:(BOOL *)a6
{
  _BOOL8 v8;
  id v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t *v14;
  id v15;
  _QWORD v17[4];
  id v18;
  id v19;
  uint64_t *v20;
  id v21;
  BOOL *v22;
  BOOL v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t);
  void (*v28)(uint64_t);
  id v29;

  v8 = a4;
  v10 = a3;
  v11 = a5;
  v24 = 0;
  v25 = &v24;
  v26 = 0x3032000000;
  v27 = __Block_byref_object_copy__22479;
  v28 = __Block_byref_object_dispose__22480;
  v29 = 0;
  if (v11)
  {
    v17[0] = MEMORY[0x1E0C809B0];
    v17[1] = 3221225472;
    v17[2] = __84__SGSqlEntityStore_initializeDatabase_withProtection_sharedLock_newDatabaseCreated___block_invoke;
    v17[3] = &unk_1E7DAFF90;
    v20 = &v24;
    v21 = a1;
    v18 = v10;
    v23 = v8;
    v19 = v11;
    v22 = a6;
    objc_msgSend(v19, "runWithLockAcquired:", v17);

    v12 = v18;
  }
  else
  {
    objc_msgSend(a1, "_initializeDatabaseNolock:withProtection:sharedLock:newDatabaseCreated:", v10, v8, 0, a6);
    v13 = objc_claimAutoreleasedReturnValue();
    v12 = (void *)v25[5];
    v25[5] = v13;
  }

  v14 = v25;
  if (a6 && !v25[5])
    *a6 = 0;
  v15 = (id)v14[5];
  _Block_object_dispose(&v24, 8);

  return v15;
}

+ (BOOL)pathHasFutureDbSchema:(id)a3
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  char v7;

  v3 = a3;
  pthread_mutex_lock(&futureDbSchemasLock);
  v4 = (void *)storePathsWithFutureDbSchemas;
  if (!storePathsWithFutureDbSchemas)
  {
    v5 = objc_opt_new();
    v6 = (void *)storePathsWithFutureDbSchemas;
    storePathsWithFutureDbSchemas = v5;

    v4 = (void *)storePathsWithFutureDbSchemas;
  }
  v7 = objc_msgSend(v4, "containsObject:", v3);
  pthread_mutex_unlock(&futureDbSchemasLock);

  return v7;
}

+ (void)addPathToFutureDbSchemas:(id)a3
{
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;

  v6 = a3;
  pthread_mutex_lock(&futureDbSchemasLock);
  v3 = (void *)storePathsWithFutureDbSchemas;
  if (!storePathsWithFutureDbSchemas)
  {
    v4 = objc_opt_new();
    v5 = (void *)storePathsWithFutureDbSchemas;
    storePathsWithFutureDbSchemas = v4;

    v3 = (void *)storePathsWithFutureDbSchemas;
  }
  objc_msgSend(v3, "addObject:", v6);
  pthread_mutex_unlock(&futureDbSchemasLock);

}

+ (void)releaseInstanceAndWaitForDealloc:(id *)a3
{
  dispatch_semaphore_t v4;
  id v5;
  NSObject *v6;
  id v7;
  _QWORD v8[4];
  dispatch_semaphore_t v9;

  if (*a3)
  {
    v4 = dispatch_semaphore_create(0);
    v5 = *a3;
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = __53__SGSqlEntityStore_releaseInstanceAndWaitForDealloc___block_invoke;
    v8[3] = &unk_1E7DB56F0;
    v9 = v4;
    v6 = v4;
    objc_msgSend(v5, "addDeallocNotification:", v8);
    v7 = *a3;
    *a3 = 0;

    dispatch_semaphore_wait(v6, 0xFFFFFFFFFFFFFFFFLL);
  }
}

+ (id)_recreateCorruptDatabase:(id)a3 sharedLock:(id)a4 withProtection:(BOOL)a5
{
  _BOOL8 v5;
  id v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  double v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  SGSqliteDatabase *v20;
  id v21;
  NSObject *v22;
  id v24;
  uint8_t buf[4];
  id v26;
  uint64_t v27;

  v5 = a5;
  v27 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = a4;
  if (v5)
  {
    +[SGSqlEntityStore journalNameForDbPath:](SGSqlEntityStore, "journalNameForDbPath:", v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    +[SGDatabaseJournal journalWithName:](SGDatabaseJournal, "journalWithName:", v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "deleteAllJournaledQueries");

  }
  if (os_variant_has_internal_diagnostics())
  {
    v11 = (void *)MEMORY[0x1C3BD4F6C]();
    v12 = objc_alloc(MEMORY[0x1E0CB3940]);
    objc_msgSend(MEMORY[0x1E0C99D68], "date");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "timeIntervalSince1970");
    v15 = (void *)objc_msgSend(v12, "initWithFormat:", CFSTR("%@.corrupted.%ld"), v7, (uint64_t)v14);

    _moveOrRemoveDbFile(v7, v15);
    objc_msgSend(v7, "stringByAppendingString:", CFSTR("-shm"));
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "stringByAppendingString:", CFSTR("-shm"));
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    _moveOrRemoveDbFile(v16, v17);

    objc_msgSend(v7, "stringByAppendingString:", CFSTR("-wal"));
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "stringByAppendingString:", CFSTR("-wal"));
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    _moveOrRemoveDbFile(v18, v19);

    objc_autoreleasePoolPop(v11);
  }
  else
  {
    +[SGSqliteDatabase truncateDatabaseAtPath:](SGSqliteDatabase, "truncateDatabaseAtPath:", v7);
  }
  v24 = 0;
  v20 = -[SGSqliteDatabase initWithFilename:withProtection:sharedLock:error:]([SGSqliteDatabase alloc], "initWithFilename:withProtection:sharedLock:error:", v7, v5, v8, &v24);
  v21 = v24;
  if (!v20)
  {
    sgLogHandle();
    v22 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v26 = v21;
      _os_log_error_impl(&dword_1C3607000, v22, OS_LOG_TYPE_ERROR, "entity store failed to recreate database during corruption recovery: %@", buf, 0xCu);
    }

  }
  return v20;
}

+ (BOOL)isEphemeralIdentifier:(int64_t)a3
{
  return a3 > 0x6A94D74F42FFFFLL;
}

+ (BOOL)contactContainsEphemeralId:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  char v29;
  void *v30;
  void *v31;
  char v32;
  void *v33;
  char v34;
  char v35;
  void *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  _BYTE v54[128];
  _BYTE v55[128];
  _BYTE v56[128];
  _BYTE v57[128];
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  v53 = 0u;
  objc_msgSend(v4, "phones");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v50, v57, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v51;
LABEL_3:
    v9 = 0;
    while (1)
    {
      if (*(_QWORD *)v51 != v8)
        objc_enumerationMutation(v5);
      objc_msgSend(*(id *)(*((_QWORD *)&v50 + 1) + 8 * v9), "recordId");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = objc_msgSend(a1, "isEphemeralIdentifier:", objc_msgSend(v10, "numericValue"));

      if ((v11 & 1) != 0)
        goto LABEL_36;
      if (v7 == ++v9)
      {
        v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v50, v57, 16);
        if (v7)
          goto LABEL_3;
        break;
      }
    }
  }

  v48 = 0u;
  v49 = 0u;
  v46 = 0u;
  v47 = 0u;
  objc_msgSend(v4, "emailAddresses");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v46, v56, 16);
  if (v12)
  {
    v13 = v12;
    v14 = *(_QWORD *)v47;
LABEL_11:
    v15 = 0;
    while (1)
    {
      if (*(_QWORD *)v47 != v14)
        objc_enumerationMutation(v5);
      objc_msgSend(*(id *)(*((_QWORD *)&v46 + 1) + 8 * v15), "recordId");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = objc_msgSend(a1, "isEphemeralIdentifier:", objc_msgSend(v16, "numericValue"));

      if ((v17 & 1) != 0)
        goto LABEL_36;
      if (v13 == ++v15)
      {
        v13 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v46, v56, 16);
        if (v13)
          goto LABEL_11;
        break;
      }
    }
  }

  v44 = 0u;
  v45 = 0u;
  v42 = 0u;
  v43 = 0u;
  objc_msgSend(v4, "postalAddresses");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v42, v55, 16);
  if (v18)
  {
    v19 = v18;
    v20 = *(_QWORD *)v43;
LABEL_19:
    v21 = 0;
    while (1)
    {
      if (*(_QWORD *)v43 != v20)
        objc_enumerationMutation(v5);
      objc_msgSend(*(id *)(*((_QWORD *)&v42 + 1) + 8 * v21), "recordId");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = objc_msgSend(a1, "isEphemeralIdentifier:", objc_msgSend(v22, "numericValue"));

      if ((v23 & 1) != 0)
        goto LABEL_36;
      if (v19 == ++v21)
      {
        v19 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v42, v55, 16);
        if (v19)
          goto LABEL_19;
        break;
      }
    }
  }

  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  objc_msgSend(v4, "postalAddresses", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v38, v54, 16);
  if (v24)
  {
    v25 = v24;
    v26 = *(_QWORD *)v39;
LABEL_27:
    v27 = 0;
    while (1)
    {
      if (*(_QWORD *)v39 != v26)
        objc_enumerationMutation(v5);
      objc_msgSend(*(id *)(*((_QWORD *)&v38 + 1) + 8 * v27), "recordId");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      v29 = objc_msgSend(a1, "isEphemeralIdentifier:", objc_msgSend(v28, "numericValue"));

      if ((v29 & 1) != 0)
        break;
      if (v25 == ++v27)
      {
        v25 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v38, v54, 16);
        if (v25)
          goto LABEL_27;
        goto LABEL_33;
      }
    }
LABEL_36:
    v35 = 1;
LABEL_37:

    goto LABEL_38;
  }
LABEL_33:

  objc_msgSend(v4, "birthday");
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v30, "recordId");
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  v32 = objc_msgSend(a1, "isEphemeralIdentifier:", objc_msgSend(v31, "numericValue"));

  if ((v32 & 1) == 0)
  {
    objc_msgSend(v4, "recordId");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    v34 = objc_msgSend(a1, "isEphemeralIdentifier:", objc_msgSend(v33, "numericValue"));

    if ((v34 & 1) == 0)
    {
      objc_msgSend(v4, "name");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "recordId");
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      v35 = objc_msgSend(a1, "isEphemeralIdentifier:", objc_msgSend(v37, "numericValue"));

      goto LABEL_37;
    }
  }
  v35 = 1;
LABEL_38:

  return v35;
}

+ (id)_fieldValuesClassWhitelist
{
  if (_fieldValuesClassWhitelist__pasOnceToken87 != -1)
    dispatch_once(&_fieldValuesClassWhitelist__pasOnceToken87, &__block_literal_global_343);
  return (id)_fieldValuesClassWhitelist__pasExprOnceResult;
}

+ (id)globPrefix:(id)a3
{
  id v3;
  void *v4;
  void *v5;
  void *v6;

  v3 = a3;
  v4 = (void *)MEMORY[0x1C3BD4F6C]();
  globEscape(v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "stringByAppendingString:", CFSTR("*"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_autoreleasePoolPop(v4);
  return v6;
}

+ (id)escapeLike:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v4 = (void *)MEMORY[0x1C3BD4F6C](a1, a2);
  objc_msgSend(a3, "stringByReplacingOccurrencesOfString:withString:", CFSTR("!"), CFSTR("!!"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "stringByReplacingOccurrencesOfString:withString:", CFSTR("%"), CFSTR("!%"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v6, "stringByReplacingOccurrencesOfString:withString:", CFSTR("_"), CFSTR("!_"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v7, "stringByReplacingOccurrencesOfString:withString:", CFSTR("-"), CFSTR("!-"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  objc_autoreleasePoolPop(v4);
  return v8;
}

+ (id)likePrefix:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;

  v4 = a3;
  v5 = (void *)MEMORY[0x1C3BD4F6C]();
  objc_msgSend(a1, "escapeLike:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "stringByAppendingString:", CFSTR("%"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_autoreleasePoolPop(v5);
  return v7;
}

void __46__SGSqlEntityStore__fieldValuesClassWhitelist__block_invoke()
{
  void *v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v0 = (void *)MEMORY[0x1C3BD4F6C]();
  v1 = (void *)MEMORY[0x1C3BD4F6C]();
  v2 = objc_alloc(MEMORY[0x1E0C99E60]);
  v3 = objc_opt_class();
  v4 = objc_opt_class();
  v5 = objc_opt_class();
  v6 = objc_opt_class();
  v7 = objc_msgSend(v2, "initWithObjects:", v3, v4, v5, v6, objc_opt_class(), 0);
  objc_autoreleasePoolPop(v1);
  v8 = (void *)_fieldValuesClassWhitelist__pasExprOnceResult;
  _fieldValuesClassWhitelist__pasExprOnceResult = v7;

  objc_autoreleasePoolPop(v0);
}

intptr_t __53__SGSqlEntityStore_releaseInstanceAndWaitForDealloc___block_invoke(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void __84__SGSqlEntityStore_initializeDatabase_withProtection_sharedLock_newDatabaseCreated___block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  objc_msgSend(*(id *)(a1 + 56), "_initializeDatabaseNolock:withProtection:sharedLock:newDatabaseCreated:", *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 72), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 64));
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

uint64_t __91__SGSqlEntityStore__initializeDatabaseNolock_withProtection_sharedLock_newDatabaseCreated___block_invoke(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
  return 1;
}

uint64_t __91__SGSqlEntityStore__initializeDatabaseNolock_withProtection_sharedLock_newDatabaseCreated___block_invoke_2(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
  return 1;
}

uint64_t __91__SGSqlEntityStore__initializeDatabaseNolock_withProtection_sharedLock_newDatabaseCreated___block_invoke_3(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
  return 1;
}

SGDCloudKitSync *__63__SGSqlEntityStore_storeWithDefaultLocationAndExecuteJournals___block_invoke_2()
{
  return +[SGDCloudKitSync sharedInstance](SGDCloudKitSync, "sharedInstance");
}

void __63__SGSqlEntityStore_storeWithDefaultLocationAndExecuteJournals___block_invoke()
{
  void *v0;
  uint64_t v1;
  void *v2;

  v0 = (void *)MEMORY[0x1C3BD4F6C]();
  v1 = objc_opt_new();
  v2 = (void *)storeWithDefaultLocationAndExecuteJournals___pasExprOnceResult;
  storeWithDefaultLocationAndExecuteJournals___pasExprOnceResult = v1;

  objc_autoreleasePoolPop(v0);
}

- (void)tryExecuteSnippetsJournal
{
  SGSqliteDatabase *snippetDb;
  int v4;
  NSObject *v5;
  SGSqliteDatabase *v6;
  SGSqliteDatabase *v7;
  _DWORD v8[2];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  snippetDb = self->_snippetDb;
  -[SGSqlEntityStore startJournaling](self, "startJournaling");
  v4 = objc_msgSend(MEMORY[0x1E0D81590], "lockState");
  sgLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    v8[0] = 67109120;
    v8[1] = v4;
    _os_log_impl(&dword_1C3607000, v5, OS_LOG_TYPE_INFO, "Initial lock state is: %d", (uint8_t *)v8, 8u);
  }

  if ((v4 - 3) <= 0xFFFFFFFD)
    -[SGSqlEntityStore stopJournaling](self, "stopJournaling");
  if (!snippetDb)
  {
    v6 = self->_snippetDb;
    if (v6)
    {
      -[SGSqliteDatabase closePermanently](v6, "closePermanently");
      v7 = self->_snippetDb;
      self->_snippetDb = 0;

    }
  }
}

- (void)handleDeviceLockStateEvent:(int)a3
{
  void (**v4)(_QWORD);
  SGSqliteDatabaseSharedLock *sharedWriteLock;
  _QWORD v6[5];
  int v7;

  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __66__SGSqlEntityStore_ContentProtection__handleDeviceLockStateEvent___block_invoke;
  v6[3] = &unk_1E7DB1290;
  v7 = a3;
  v6[4] = self;
  v4 = (void (**)(_QWORD))MEMORY[0x1C3BD5158](v6, a2);
  sharedWriteLock = self->_sharedWriteLock;
  if (sharedWriteLock)
    -[SGSqliteDatabaseSharedLock runWithLockAcquired:](sharedWriteLock, "runWithLockAcquired:", v4);
  else
    v4[2](v4);

}

- (void)registerJournalUnlockHandler
{
  NSObject *v3;
  dispatch_queue_t v4;
  void *v5;
  NSObject *v6;
  void *v7;
  id lockStateNotificationRegistrationToken;
  int v9;
  NSObject *v10;
  void *v12;
  _QWORD v13[4];
  NSObject *v14;
  id v15;
  id location;
  uint8_t buf[4];
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (self->_lockStateNotificationRegistrationToken)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore+ContentProtection.m"), 92, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("!_lockStateNotificationRegistrationToken"));

  }
  location = 0;
  objc_initWeak(&location, self);
  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = dispatch_queue_create("SGSqlEntityStore-lockStateQueue", v3);

  v5 = (void *)MEMORY[0x1E0D81590];
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = __67__SGSqlEntityStore_ContentProtection__registerJournalUnlockHandler__block_invoke;
  v13[3] = &unk_1E7DB5AE0;
  v6 = v4;
  v14 = v6;
  objc_copyWeak(&v15, &location);
  objc_msgSend(v5, "registerForLockStateChangeNotifications:", v13);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  lockStateNotificationRegistrationToken = self->_lockStateNotificationRegistrationToken;
  self->_lockStateNotificationRegistrationToken = v7;

  v9 = objc_msgSend(MEMORY[0x1E0D81590], "lockState");
  -[SGSqlEntityStore startJournaling](self, "startJournaling");
  sgLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    v18 = v9;
    _os_log_impl(&dword_1C3607000, v10, OS_LOG_TYPE_INFO, "Initial lock state is: %d", buf, 8u);
  }

  if ((v9 - 3) <= 0xFFFFFFFD)
    -[SGSqlEntityStore stopJournaling](self, "stopJournaling");
  objc_destroyWeak(&v15);

  objc_destroyWeak(&location);
}

- (void)startJournaling
{
  -[SGDatabaseJournal startJournaling](self->_snippetsJournal, "startJournaling");
}

- (void)stopJournaling
{
  SGSqlEntityStore *v2;
  NSObject *v3;
  SGSqliteDatabase *snippetDb;
  uint64_t v5;
  SGSqliteDatabase *v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  uint8_t v10[16];
  uint8_t v11[16];
  uint8_t v12[16];
  uint8_t v13[16];
  uint8_t buf[16];

  v2 = self;
  objc_sync_enter(v2);
  if (-[SGDatabaseJournal journaling](v2->_snippetsJournal, "journaling"))
  {
    sgLogHandle();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1C3607000, v3, OS_LOG_TYPE_INFO, "stopping journaling", buf, 2u);
    }

    snippetDb = v2->_snippetDb;
    if (snippetDb
      || (+[SGSqlEntityStore initializeDatabase:withProtection:sharedLock:newDatabaseCreated:](SGSqlEntityStore, "initializeDatabase:withProtection:sharedLock:newDatabaseCreated:", v2->_snippetDbPath, 1, v2->_sharedWriteLock, 0), v5 = objc_claimAutoreleasedReturnValue(), v6 = v2->_snippetDb, v2->_snippetDb = (SGSqliteDatabase *)v5, v6, (snippetDb = v2->_snippetDb) != 0))
    {
      if (!v2->_executeJournals)
      {
        sgLogHandle();
        v8 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)v12 = 0;
          _os_log_debug_impl(&dword_1C3607000, v8, OS_LOG_TYPE_DEBUG, "non-primary store not executing journals", v12, 2u);
        }

        goto LABEL_15;
      }
      if (-[SGSqliteDatabase userVersion](snippetDb, "userVersion") <= 4)
      {
        sgLogHandle();
        v7 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)v11 = 0;
          _os_log_impl(&dword_1C3607000, v7, OS_LOG_TYPE_INFO, "Ignoring existing journal because there is no snippet database.", v11, 2u);
        }

        -[SGDatabaseJournal deleteAllJournaledQueries](v2->_snippetsJournal, "deleteAllJournaledQueries");
        goto LABEL_15;
      }
      if (-[SGDatabaseJournal executeQueriesOnDatabase:](v2->_snippetsJournal, "executeQueriesOnDatabase:", v2->_snippetDb))
      {
LABEL_15:
        -[SGDatabaseJournal stopJournaling](v2->_snippetsJournal, "stopJournaling");
        goto LABEL_21;
      }
      sgLogHandle();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v10 = 0;
        _os_log_impl(&dword_1C3607000, v9, OS_LOG_TYPE_DEFAULT, "tried to replay journal to snippets and something failed, so will try again later.", v10, 2u);
      }
    }
    else
    {
      sgLogHandle();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v13 = 0;
        _os_log_error_impl(&dword_1C3607000, v9, OS_LOG_TYPE_ERROR, "Failed to reopen snippets database while trying to replay journals, will try again later", v13, 2u);
      }
    }

  }
LABEL_21:
  objc_sync_exit(v2);

}

void __67__SGSqlEntityStore_ContentProtection__registerJournalUnlockHandler__block_invoke(uint64_t a1, int a2)
{
  NSObject *v3;
  _QWORD v4[4];
  id v5;
  int v6;

  v3 = *(NSObject **)(a1 + 32);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __67__SGSqlEntityStore_ContentProtection__registerJournalUnlockHandler__block_invoke_2;
  v4[3] = &unk_1E7DB5AB8;
  objc_copyWeak(&v5, (id *)(a1 + 40));
  v6 = a2;
  dispatch_async(v3, v4);
  objc_destroyWeak(&v5);
}

void __67__SGSqlEntityStore_ContentProtection__registerJournalUnlockHandler__block_invoke_2(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "handleDeviceLockStateEvent:", *(unsigned int *)(a1 + 40));

}

void __66__SGSqlEntityStore_ContentProtection__handleDeviceLockStateEvent___block_invoke(uint64_t a1)
{
  int v2;
  int v3;
  int v4;
  NSObject *v5;
  int v6;
  _DWORD v7[2];
  __int16 v8;
  int v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = objc_msgSend(MEMORY[0x1E0D81590], "lockState");
  v3 = v2;
  v4 = v2;
  if (v2 != 1)
  {
    if (v2 == 2)
    {
      if (*(_DWORD *)(a1 + 40) == 1)
        v4 = 1;
      else
        v4 = 2;
    }
    else
    {
      v4 = *(_DWORD *)(a1 + 40);
    }
  }
  sgLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_DWORD *)(a1 + 40);
    v7[0] = 67109632;
    v7[1] = v4;
    v8 = 1024;
    v9 = v6;
    v10 = 1024;
    v11 = v3;
    _os_log_impl(&dword_1C3607000, v5, OS_LOG_TYPE_DEFAULT, "entity store notified of device lock state change to %d (es=%d, cs=%d)", (uint8_t *)v7, 0x14u);
  }

  if ((v4 - 1) < 2)
  {
    objc_msgSend(*(id *)(a1 + 32), "startJournaling");
  }
  else if (!v4 || v4 == 3)
  {
    objc_msgSend(*(id *)(a1 + 32), "stopJournaling");
  }
}

+ (id)journalNameForDbPath:(id)a3
{
  void *v3;
  void *v4;

  objc_msgSend(a3, "lastPathComponent");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "stringByDeletingPathExtension");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

- (unint64_t)commitExtractionInfo:(id)a3
{
  id v4;
  uint64_t v5;
  id v6;
  void *v7;
  SGSqliteDatabase *db;
  id v9;
  unint64_t v10;
  _QWORD v12[5];
  __CFString *v13;
  id v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[4];
  id v21;

  v4 = a3;
  v5 = MEMORY[0x1E0C809B0];
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 3221225472;
  v20[2] = __58__SGSqlEntityStore_ExtractionInfos__commitExtractionInfo___block_invoke;
  v20[3] = &unk_1E7DB74A0;
  v6 = v4;
  v21 = v6;
  v7 = (void *)MEMORY[0x1C3BD5158](v20);
  v16 = 0;
  v17 = &v16;
  v18 = 0x2020000000;
  v19 = 0;
  db = self->_db;
  v12[0] = v5;
  v12[1] = 3221225472;
  v12[2] = __58__SGSqlEntityStore_ExtractionInfos__commitExtractionInfo___block_invoke_2;
  v12[3] = &unk_1E7DB74C8;
  v12[4] = self;
  v13 = CFSTR("INSERT INTO extractionInfos (extractionType, modelVersion, confidence) VALUES (:extractionType, :modelVersion, :confidence)");
  v9 = v7;
  v14 = v9;
  v15 = &v16;
  -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v12);
  v10 = v17[3];

  _Block_object_dispose(&v16, 8);
  return v10;
}

- (id)loadExtractionInfoForPrimaryKey:(int64_t)a3
{
  uint64_t v4;
  void *v5;
  SGSqliteDatabase *db;
  id v7;
  _QWORD v9[5];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  void (*v14)(uint64_t);
  id v15;
  _QWORD v16[5];

  v4 = MEMORY[0x1E0C809B0];
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3221225472;
  v16[2] = __69__SGSqlEntityStore_ExtractionInfos__loadExtractionInfoForPrimaryKey___block_invoke;
  v16[3] = &__block_descriptor_40_e29_v16__0___PASSqliteStatement_8l;
  v16[4] = a3;
  v5 = (void *)MEMORY[0x1C3BD5158](v16, a2);
  v10 = 0;
  v11 = &v10;
  v12 = 0x3032000000;
  v13 = __Block_byref_object_copy__27943;
  v14 = __Block_byref_object_dispose__27944;
  v15 = 0;
  db = self->_db;
  v9[0] = v4;
  v9[1] = 3221225472;
  v9[2] = __69__SGSqlEntityStore_ExtractionInfos__loadExtractionInfoForPrimaryKey___block_invoke_11;
  v9[3] = &unk_1E7DB7510;
  v9[4] = &v10;
  -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](db, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("SELECT extractionType, modelVersion, confidence FROM extractionInfos WHERE id = :primaryKey"), v5, v9, 0);
  v7 = (id)v11[5];
  _Block_object_dispose(&v10, 8);

  return v7;
}

uint64_t __69__SGSqlEntityStore_ExtractionInfos__loadExtractionInfoForPrimaryKey___block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "bindNamedParam:toInt64:", ":primaryKey", *(_QWORD *)(a1 + 32));
}

uint64_t __69__SGSqlEntityStore_ExtractionInfos__loadExtractionInfoForPrimaryKey___block_invoke_11(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  double v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;

  v3 = a2;
  v4 = objc_msgSend(v3, "getInt64ForColumn:", 0);
  objc_msgSend(v3, "getDoubleForColumn:", 1);
  v6 = v5;
  objc_msgSend(v3, "getDoubleForColumn:", 2);
  v8 = v7;

  v9 = (void *)MEMORY[0x1E0D19820];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v6);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v8);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "extractionInfoWithExtractionType:modelVersion:confidence:", v4, v10, v11);
  v12 = objc_claimAutoreleasedReturnValue();
  v13 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v14 = *(void **)(v13 + 40);
  *(_QWORD *)(v13 + 40) = v12;

  return 1;
}

void __58__SGSqlEntityStore_ExtractionInfos__commitExtractionInfo___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  id v6;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  objc_msgSend(v4, "bindNamedParam:toInt64:", ":extractionType", objc_msgSend(v3, "extractionType"));
  objc_msgSend(*(id *)(a1 + 32), "modelVersion");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "doubleValue");
  objc_msgSend(v4, "bindNamedParam:toDouble:", ":modelVersion");

  objc_msgSend(*(id *)(a1 + 32), "confidence");
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "doubleValue");
  objc_msgSend(v4, "bindNamedParam:toDouble:", ":confidence");

}

sqlite3_int64 __58__SGSqlEntityStore_ExtractionInfos__commitExtractionInfo___block_invoke_2(_QWORD *a1)
{
  sqlite3_int64 result;

  objc_msgSend(*(id *)(a1[4] + 8), "prepAndRunSQL:onPrep:onRow:onError:", a1[5], a1[6], 0, 0);
  result = sqlite3_last_insert_rowid((sqlite3 *)objc_msgSend(*(id *)(a1[4] + 8), "handle"));
  *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 24) = result;
  return result;
}

- (id)initForMigratorTestWithEntityDb:(id)a3 snippetDb:(id)a4
{
  id v7;
  id v8;
  SGSqlEntityStore *v9;
  SGSqlEntityStore *v10;
  void *v11;
  objc_super v13;

  v7 = a3;
  v8 = a4;
  v13.receiver = self;
  v13.super_class = (Class)SGSqlEntityStore;
  v9 = -[SGSqlEntityStore init](&v13, sel_init);
  v10 = v9;
  if (v9)
  {
    objc_storeStrong((id *)&v9->_db, a3);
    objc_storeStrong((id *)&v10->_snippetDb, a4);
    v10->_parentMessagesLimit = 10;
    -[SGSqlEntityStore journal](v10, "journal");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "freezeObservers");

  }
  return v10;
}

- (void)prepMigrator
{
  NSDictionary *v3;
  NSDictionary *entityMigrations;
  NSDictionary *v5;
  NSDictionary *snippetsMigrations;

  self->_entityVersion = -[SGSqliteDatabase userVersion](self->_db, "userVersion");
  self->_snippetsVersion = -[SGSqliteDatabase userVersion](self->_snippetDb, "userVersion");
  +[SGDatabaseMigratorEntities migrations](SGDatabaseMigratorEntities, "migrations");
  v3 = (NSDictionary *)objc_claimAutoreleasedReturnValue();
  entityMigrations = self->_entityMigrations;
  self->_entityMigrations = v3;

  +[SGDatabaseMigratorSnippets migrations](SGDatabaseMigratorSnippets, "migrations");
  v5 = (NSDictionary *)objc_claimAutoreleasedReturnValue();
  snippetsMigrations = self->_snippetsMigrations;
  self->_snippetsMigrations = v5;

}

- (int64_t)migrateDatabases
{
  NSObject *v3;
  NSObject *v4;
  uint64_t v5;
  dispatch_qos_class_t v6;
  dispatch_block_t v7;
  int64_t v8;
  _QWORD v10[6];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD block[6];
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;

  -[SGSqlEntityStore selectMigrationQueue](self, "selectMigrationQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v3)
  {
    v16 = 0;
    v17 = &v16;
    v18 = 0x2020000000;
    v19 = 0;
    v5 = MEMORY[0x1E0C809B0];
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __54__SGSqlEntityStore_DatabaseMigrator__migrateDatabases__block_invoke;
    block[3] = &unk_1E7DB78A0;
    block[4] = self;
    block[5] = &v16;
    dispatch_sync(v3, block);
    v11 = 0;
    v12 = &v11;
    v13 = 0x2020000000;
    v14 = 0;
    v6 = *((_DWORD *)v17 + 6);
    v10[0] = v5;
    v10[1] = 3221225472;
    v10[2] = __54__SGSqlEntityStore_DatabaseMigrator__migrateDatabases__block_invoke_2;
    v10[3] = &unk_1E7DB78A0;
    v10[4] = self;
    v10[5] = &v11;
    v7 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, v6, 0, v10);
    dispatch_sync(v4, v7);

    v8 = v12[3];
    _Block_object_dispose(&v11, 8);
    _Block_object_dispose(&v16, 8);
  }
  else
  {
    v8 = 2;
  }

  return v8;
}

- (id)selectMigrationQueue
{
  id v3;
  _QWORD v5[6];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);
  void (*v10)(uint64_t);
  id v11;

  if (selectMigrationQueue_once != -1)
    dispatch_once(&selectMigrationQueue_once, &__block_literal_global_28842);
  v6 = 0;
  v7 = &v6;
  v8 = 0x3032000000;
  v9 = __Block_byref_object_copy__28501;
  v10 = __Block_byref_object_dispose__28502;
  v11 = 0;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __58__SGSqlEntityStore_DatabaseMigrator__selectMigrationQueue__block_invoke_12;
  v5[3] = &unk_1E7DB78A0;
  v5[4] = self;
  v5[5] = &v6;
  dispatch_sync((dispatch_queue_t)selectMigrationQueue_migratorQueue, v5);
  v3 = (id)v7[5];
  _Block_object_dispose(&v6, 8);

  return v3;
}

- (int64_t)unmigrateDatabases
{
  NSObject *v3;
  NSObject *v4;
  int64_t v5;
  _QWORD v7[6];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  -[SGSqlEntityStore selectMigrationQueue](self, "selectMigrationQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v3)
  {
    v8 = 0;
    v9 = &v8;
    v10 = 0x2020000000;
    v11 = 1;
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = __56__SGSqlEntityStore_DatabaseMigrator__unmigrateDatabases__block_invoke;
    v7[3] = &unk_1E7DB78A0;
    v7[4] = self;
    v7[5] = &v8;
    dispatch_sync(v3, v7);
    v5 = v9[3];
    _Block_object_dispose(&v8, 8);
  }
  else
  {
    v5 = 2;
  }

  return v5;
}

- (int64_t)clearDatabase:(id)a3
{
  id v4;
  id v5;
  int64_t v6;
  _QWORD v8[4];
  id v9;
  SGSqlEntityStore *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  v4 = a3;
  v12 = 0;
  v13 = &v12;
  v14 = 0x2020000000;
  v15 = 4;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __52__SGSqlEntityStore_DatabaseMigrator__clearDatabase___block_invoke;
  v8[3] = &unk_1E7DB7878;
  v5 = v4;
  v10 = self;
  v11 = &v12;
  v9 = v5;
  objc_msgSend(v5, "writeTransaction:", v8);
  v6 = v13[3];

  _Block_object_dispose(&v12, 8);
  return v6;
}

- (int64_t)configureMigratorThenMigrateToVersion:(unint64_t)a3
{
  NSObject *v5;
  NSObject *v6;
  int64_t v7;
  _QWORD block[7];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  -[SGSqlEntityStore selectMigrationQueue](self, "selectMigrationQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v5)
  {
    v10 = 0;
    v11 = &v10;
    v12 = 0x2020000000;
    v13 = 0;
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __76__SGSqlEntityStore_DatabaseMigrator__configureMigratorThenMigrateToVersion___block_invoke;
    block[3] = &unk_1E7DB5BC8;
    block[4] = self;
    block[5] = &v10;
    block[6] = a3;
    dispatch_sync(v5, block);
    v7 = v11[3];
    _Block_object_dispose(&v10, 8);
  }
  else
  {
    v7 = 2;
  }

  return v7;
}

- (unint64_t)maxKnownDbVersion
{
  return -[NSDictionary count](self->_entityMigrations, "count");
}

- (BOOL)migrationNeeded
{
  if (!self->_entityMigrations)
    -[SGSqlEntityStore prepMigrator](self, "prepMigrator");
  return -[SGSqlEntityStore maxKnownDbVersion](self, "maxKnownDbVersion") != self->_entityVersion;
}

- (int64_t)runQuery:(id)a3 onDb:(id)a4
{
  NSString *v6;
  id v7;
  NSObject *v8;
  void *v9;
  int v10;
  SEL v11;
  int64_t v12;
  void *v14;
  _QWORD v15[4];
  id v16;
  SGSqlEntityStore *v17;
  NSString *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint8_t buf[4];
  void *v25;
  __int16 v26;
  NSString *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v6 = (NSString *)a3;
  v7 = a4;
  v20 = 0;
  v21 = &v20;
  v22 = 0x2020000000;
  v23 = 4;
  sgLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    objc_msgSend(v7, "filename");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138412546;
    v25 = v14;
    v26 = 2112;
    v27 = v6;
    _os_log_debug_impl(&dword_1C3607000, v8, OS_LOG_TYPE_DEBUG, "migrator for %@ running query: %@", buf, 0x16u);

  }
  -[NSString substringToIndex:](v6, "substringToIndex:", 10);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "isEqualToString:", CFSTR("migration_"));

  if (v10)
  {
    v11 = NSSelectorFromString(v6);
    if (v11)
      v12 = ((uint64_t (*)(SGSqlEntityStore *, SEL))-[SGSqlEntityStore methodForSelector:](self, "methodForSelector:", v11))(self, v11);
    else
      v12 = 0;
  }
  else
  {
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = __52__SGSqlEntityStore_DatabaseMigrator__runQuery_onDb___block_invoke;
    v15[3] = &unk_1E7DB4518;
    v16 = v7;
    v17 = self;
    v18 = v6;
    v19 = &v20;
    objc_msgSend(v16, "prepAndRunQuery:onPrep:onRow:onError:", v18, 0, 0, v15);
    v12 = v21[3];

  }
  _Block_object_dispose(&v20, 8);

  return v12;
}

- (int64_t)runQueries:(id)a3 forVersion:(unsigned int)a4 inTransactionOnDb:(id)a5
{
  id v8;
  id v9;
  id v10;
  id v11;
  int64_t v12;
  _QWORD v14[4];
  id v15;
  SGSqlEntityStore *v16;
  id v17;
  unsigned int v18;

  v8 = a3;
  v9 = a5;
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = __78__SGSqlEntityStore_DatabaseMigrator__runQueries_forVersion_inTransactionOnDb___block_invoke;
  v14[3] = &unk_1E7DB4540;
  v15 = v8;
  v16 = self;
  v17 = v9;
  v18 = a4;
  v10 = v9;
  v11 = v8;
  if (objc_msgSend(v10, "frailWriteTransaction:", v14))
    v12 = 4;
  else
    v12 = 2;

  return v12;
}

- (id)languageToUpdateEntityFTSTo
{
  void *v3;
  NSObject *v4;
  void *v5;
  NSObject *v6;
  id v7;
  NSObject *v8;
  void *v10;
  void *v11;
  int v12;
  void *v13;
  __int16 v14;
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = (void *)ITSCopyUserLanguage();
  sgLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    -[SGSqliteDatabase filename](self->_db, "filename");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = 138412546;
    v13 = v10;
    v14 = 2112;
    v15 = v3;
    _os_log_debug_impl(&dword_1C3607000, v4, OS_LOG_TYPE_DEBUG, "current user language: %@: %@", (uint8_t *)&v12, 0x16u);

  }
  -[SGSqliteDatabase languageForFTSTable:](self->_db, "languageForFTSTable:", CFSTR("entity_fts"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  sgLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    -[SGSqliteDatabase filename](self->_db, "filename");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = 138412546;
    v13 = v11;
    v14 = 2112;
    v15 = v5;
    _os_log_debug_impl(&dword_1C3607000, v6, OS_LOG_TYPE_DEBUG, "old user language: %@: %@", (uint8_t *)&v12, 0x16u);

  }
  if (v5 && v3)
  {
    if ((objc_msgSend(v5, "isEqualToString:", v3) & 1) != 0)
    {
LABEL_8:
      v7 = 0;
      goto LABEL_13;
    }
  }
  else if (!v3)
  {
    goto LABEL_8;
  }
  sgLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    v12 = 138412290;
    v13 = v3;
    _os_log_debug_impl(&dword_1C3607000, v8, OS_LOG_TYPE_DEBUG, "languageToUpdateEntityFTSTo returning: %@", (uint8_t *)&v12, 0xCu);
  }

  v7 = v3;
LABEL_13:

  return v7;
}

- (BOOL)_createEntityFTSTableWithName:(id)a3
{
  id v4;
  void *StatementUsingCurrentLanguage;
  NSObject *v6;
  SGSqliteDatabase *db;
  BOOL v8;
  NSObject *v9;
  void *v11;
  _QWORD v12[4];
  NSObject *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  char v18;
  uint8_t buf[4];
  id v20;
  __int16 v21;
  void *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v15 = 0;
  v16 = &v15;
  v17 = 0x2020000000;
  v18 = 1;
  StatementUsingCurrentLanguage = (void *)ITSCopyFTSTableCreateStatementUsingCurrentLanguage();
  if (StatementUsingCurrentLanguage)
  {
    sgLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      -[SGSqliteDatabase filename](self->_db, "filename");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412546;
      v20 = v11;
      v21 = 2112;
      v22 = StatementUsingCurrentLanguage;
      _os_log_debug_impl(&dword_1C3607000, v6, OS_LOG_TYPE_DEBUG, "creating new FTS table: %@: %@", buf, 0x16u);

    }
    db = self->_db;
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __68__SGSqlEntityStore_DatabaseMigrator___createEntityFTSTableWithName___block_invoke;
    v12[3] = &unk_1E7DB7788;
    v13 = v4;
    v14 = &v15;
    -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](db, "prepAndRunQuery:onPrep:onRow:onError:", StatementUsingCurrentLanguage, 0, 0, v12);

    v8 = *((_BYTE *)v16 + 24) != 0;
    v9 = v13;
  }
  else
  {
    sgLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v20 = v4;
      _os_log_error_impl(&dword_1C3607000, v9, OS_LOG_TYPE_ERROR, "failed to generate create query for new FTS table %@", buf, 0xCu);
    }
    v8 = 0;
  }

  _Block_object_dispose(&v15, 8);
  return v8;
}

- (void)_slowCopyFromTable:(id)a3 toTable:(id)a4 startingAtEntityId:(unint64_t)a5
{
  SGSqliteDatabase *db;
  void *v9;
  NSObject *v10;
  NSObject *v11;
  dispatch_queue_t v12;
  int v13;
  unint64_t v14;
  NSObject *v15;
  void *v16;
  void *v17;
  unint64_t v18;
  NSObject *v19;
  SGSqlEntityStore *v20;
  id v21;
  id v22;
  _QWORD v23[5];
  id v24;
  id v25;
  NSObject *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD v31[5];
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint8_t buf[4];
  unint64_t v37;
  __int16 v38;
  unint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v22 = a3;
  v21 = a4;
  v32 = 0;
  v33 = &v32;
  v34 = 0x2020000000;
  v35 = -1;
  v20 = self;
  db = self->_db;
  v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("SELECT MAX(docid) FROM %@"), v22);
  v31[0] = MEMORY[0x1E0C809B0];
  v31[1] = 3221225472;
  v31[2] = __84__SGSqlEntityStore_DatabaseMigrator___slowCopyFromTable_toTable_startingAtEntityId___block_invoke;
  v31[3] = &unk_1E7DB51B8;
  v31[4] = &v32;
  -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](db, "prepAndRunQuery:onPrep:onRow:onError:", v9, 0, v31, &__block_literal_global_60_28798);

  sgLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    -[SGSqliteDatabase filename](self->_db, "filename");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = v33[3];
    *(_DWORD *)buf = 138412546;
    v37 = (unint64_t)v17;
    v38 = 2048;
    v39 = v18;
    _os_log_debug_impl(&dword_1C3607000, v10, OS_LOG_TYPE_DEBUG, "highest entity for FTS copy: %@: %llu", buf, 0x16u);

  }
  v11 = dispatch_group_create();
  dispatch_queue_attr_make_with_qos_class(0, (dispatch_qos_class_t)5u, 0);
  v19 = objc_claimAutoreleasedReturnValue();
  v12 = dispatch_queue_create("DatabaseMigrator-FTS-queue", v19);
  if (v33[3] >= a5)
  {
    v13 = 0;
    v14 = a5;
    do
    {
      sgLogHandle();
      v15 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134218240;
        v37 = v14;
        v38 = 2048;
        v39 = v14 + 1000;
        _os_log_debug_impl(&dword_1C3607000, v15, OS_LOG_TYPE_DEBUG, "fts copy batch: %llu -> %llu", buf, 0x16u);
      }

      v13 += 2;
      dispatch_group_enter(v11);
      v16 = (void *)MEMORY[0x1E0D81598];
      v23[0] = MEMORY[0x1E0C809B0];
      v23[1] = 3221225472;
      v23[2] = __84__SGSqlEntityStore_DatabaseMigrator___slowCopyFromTable_toTable_startingAtEntityId___block_invoke_63;
      v23[3] = &unk_1E7DB45D0;
      v27 = v14;
      v28 = v14 + 1000;
      v23[4] = v20;
      v24 = v21;
      v25 = v22;
      v29 = 1000;
      v30 = a5;
      v26 = v11;
      objc_msgSend(v16, "runAsyncOnQueue:afterDelaySeconds:block:", v12, v23, (double)v13);

      v14 += 1001;
    }
    while (v14 <= v33[3]);
  }
  objc_msgSend(MEMORY[0x1E0D81598], "waitForGroup:timeoutSeconds:", v11, 86400.0);

  _Block_object_dispose(&v32, 8);
}

- (BOOL)_renameTable:(id)a3 to:(id)a4
{
  id v6;
  id v7;
  SGSqliteDatabase *db;
  void *v9;
  uint64_t v10;
  id v11;
  SGSqliteDatabase *v12;
  void *v13;
  id v14;
  id v15;
  _QWORD v17[4];
  id v18;
  id v19;
  uint64_t *v20;
  _QWORD v21[4];
  id v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  char v26;

  v6 = a3;
  v7 = a4;
  v23 = 0;
  v24 = &v23;
  v25 = 0x2020000000;
  v26 = 1;
  db = self->_db;
  v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("DROP TABLE IF EXISTS %@"), v7);
  v10 = MEMORY[0x1E0C809B0];
  v21[0] = MEMORY[0x1E0C809B0];
  v21[1] = 3221225472;
  v21[2] = __54__SGSqlEntityStore_DatabaseMigrator___renameTable_to___block_invoke;
  v21[3] = &unk_1E7DB77D8;
  v11 = v7;
  v22 = v11;
  -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](db, "prepAndRunQuery:onPrep:onRow:onError:", v9, 0, 0, v21);

  v12 = self->_db;
  v13 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("ALTER TABLE %@ RENAME TO %@"), v6, v11);
  v17[0] = v10;
  v17[1] = 3221225472;
  v17[2] = __54__SGSqlEntityStore_DatabaseMigrator___renameTable_to___block_invoke_75;
  v17[3] = &unk_1E7DB45F8;
  v14 = v6;
  v18 = v14;
  v15 = v11;
  v19 = v15;
  v20 = &v23;
  -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](v12, "prepAndRunQuery:onPrep:onRow:onError:", v13, 0, 0, v17);

  LOBYTE(v12) = *((_BYTE *)v24 + 24);
  _Block_object_dispose(&v23, 8);

  return (char)v12;
}

- (BOOL)_prepareToCopyFrom:(id)a3 toNewTableNamed:(id)a4
{
  id v6;
  id v7;
  SGSqliteDatabase *db;
  id v9;
  id v10;
  _QWORD v12[5];
  id v13;
  id v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  char v19;

  v6 = a3;
  v7 = a4;
  v16 = 0;
  v17 = &v16;
  v18 = 0x2020000000;
  v19 = 1;
  db = self->_db;
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __73__SGSqlEntityStore_DatabaseMigrator___prepareToCopyFrom_toNewTableNamed___block_invoke;
  v12[3] = &unk_1E7DB4620;
  v15 = &v16;
  v12[4] = self;
  v9 = v7;
  v13 = v9;
  v10 = v6;
  v14 = v10;
  -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v12);
  LOBYTE(v6) = *((_BYTE *)v17 + 24);

  _Block_object_dispose(&v16, 8);
  return (char)v6;
}

- (void)updateLanguageForFTSTablesToLanguage:(id)a3
{
  id v4;
  NSObject *v5;
  _BOOL4 v6;
  uint64_t v7;
  NSObject *v8;
  SGSqliteDatabase *db;
  void *v10;
  NSObject *v11;
  NSObject *v12;
  SGSqliteDatabase *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  _QWORD v17[5];
  __CFString *v18;
  _QWORD v19[5];
  uint8_t v20[4];
  void *v21;
  _BYTE buf[24];
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  pthread_mutex_lock(&_ftsUpdateLock);
  sgLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    -[SGSqliteDatabase filename](self->_db, "filename");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138412546;
    *(_QWORD *)&buf[4] = v15;
    *(_WORD *)&buf[12] = 2112;
    *(_QWORD *)&buf[14] = v4;
    _os_log_debug_impl(&dword_1C3607000, v5, OS_LOG_TYPE_DEBUG, "starting update of FTS table for language change: %@: %@", buf, 0x16u);

  }
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x2020000000;
  v23 = 0;
  v6 = -[SGSqliteDatabase hasTableNamed:](self->_db, "hasTableNamed:", CFSTR("entity_fts_from"));
  v7 = MEMORY[0x1E0C809B0];
  if (v6)
  {
    sgLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v20 = 0;
      _os_log_debug_impl(&dword_1C3607000, v8, OS_LOG_TYPE_DEBUG, "resuming copy of FTS data to new table", v20, 2u);
    }

    db = self->_db;
    v10 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("SELECT MIN(docid) FROM %@ WHERE docid NOT IN (SELECT docid FROM %@)"), CFSTR("entity_fts_from"), CFSTR("entity_fts"));
    v19[0] = v7;
    v19[1] = 3221225472;
    v19[2] = __75__SGSqlEntityStore_DatabaseMigrator__updateLanguageForFTSTablesToLanguage___block_invoke;
    v19[3] = &unk_1E7DB51B8;
    v19[4] = buf;
    -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](db, "prepAndRunQuery:onPrep:onRow:onError:", v10, 0, v19, 0);

LABEL_11:
    -[SGSqlEntityStore _slowCopyFromTable:toTable:startingAtEntityId:](self, "_slowCopyFromTable:toTable:startingAtEntityId:", CFSTR("entity_fts_from"), CFSTR("entity_fts"), *(_QWORD *)(*(_QWORD *)&buf[8] + 24));
    sgLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      -[SGSqliteDatabase filename](self->_db, "filename");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)v20 = 138412290;
      v21 = v16;
      _os_log_debug_impl(&dword_1C3607000, v12, OS_LOG_TYPE_DEBUG, "done with FTS copy, going to drop old table: %@", v20, 0xCu);

    }
    v13 = self->_db;
    v17[0] = v7;
    v17[1] = 3221225472;
    v17[2] = __75__SGSqlEntityStore_DatabaseMigrator__updateLanguageForFTSTablesToLanguage___block_invoke_80;
    v17[3] = &unk_1E7DB6A30;
    v17[4] = self;
    v18 = CFSTR("entity_fts_from");
    -[SGSqliteDatabase writeTransaction:](v13, "writeTransaction:", v17);
    pthread_mutex_unlock(&_ftsUpdateLock);

    goto LABEL_17;
  }
  if (v4)
  {
    sgLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v20 = 0;
      _os_log_debug_impl(&dword_1C3607000, v11, OS_LOG_TYPE_DEBUG, "preparing to copy FTS data", v20, 2u);
    }

    if (-[SGSqlEntityStore _prepareToCopyFrom:toNewTableNamed:](self, "_prepareToCopyFrom:toNewTableNamed:", CFSTR("entity_fts_from"), CFSTR("entity_fts")))
    {
      goto LABEL_11;
    }
  }
  else
  {
    sgLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v20 = 0;
      _os_log_error_impl(&dword_1C3607000, v14, OS_LOG_TYPE_ERROR, "updateLanguageForFTSTablesToLanguage got nil language but has no in-progress copy to restart", v20, 2u);
    }

  }
LABEL_17:
  _Block_object_dispose(buf, 8);

}

- (int64_t)fixupVersionMismatch
{
  unsigned int entityVersion;
  unsigned int snippetsVersion;
  BOOL v5;
  NSDictionary *snippetsMigrations;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  NSObject *v11;
  uint64_t v12;
  NSObject *v13;
  NSObject *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  entityVersion = self->_entityVersion;
  snippetsVersion = self->_snippetsVersion;
  if (snippetsVersion)
    v5 = 1;
  else
    v5 = entityVersion > 4;
  if (!v5)
  {
    sgLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v18) = 0;
      _os_log_debug_impl(&dword_1C3607000, v13, OS_LOG_TYPE_DEBUG, "bootstrapping snippets migration", (uint8_t *)&v18, 2u);
    }

    self->_snippetsVersion = self->_entityVersion;
    -[SGSqliteDatabase setUserVersion:](self->_db, "setUserVersion:");
    return 4;
  }
  if (snippetsVersion + 1 == entityVersion)
  {
    snippetsMigrations = self->_snippetsMigrations;
    v7 = (void *)MEMORY[0x1E0CB37E8];
    self->_snippetsVersion = entityVersion;
    objc_msgSend(v7, "numberWithUnsignedInt:");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "stringValue");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[NSDictionary objectForKeyedSubscript:](snippetsMigrations, "objectForKeyedSubscript:", v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    sgLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      v12 = self->_snippetsVersion;
      v18 = 134217984;
      v19 = v12;
      _os_log_impl(&dword_1C3607000, v11, OS_LOG_TYPE_INFO, "catching up snippets migration to %ld", (uint8_t *)&v18, 0xCu);
    }

    if (-[SGSqlEntityStore runQueries:forVersion:inTransactionOnDb:](self, "runQueries:forVersion:inTransactionOnDb:", v10, self->_snippetsVersion, self->_snippetDb) == 4)
    {

      return 4;
    }
    sgLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      v17 = self->_entityVersion;
      v18 = 134217984;
      v19 = v17;
      _os_log_error_impl(&dword_1C3607000, v16, OS_LOG_TYPE_ERROR, "failed to migrate snippets db to %ld", (uint8_t *)&v18, 0xCu);
    }

  }
  return 2;
}

- (int64_t)migrateToVersion:(unint64_t)a3
{
  uint64_t entityVersion;
  NSDictionary *entityMigrations;
  void *v6;
  void *v7;
  void *v8;
  NSObject *v9;
  NSDictionary *snippetsMigrations;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  NSObject *v15;
  uint64_t v16;
  int64_t v17;
  NSObject *v18;
  NSObject *v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  entityVersion = self->_entityVersion;
  if (a3 - 1 != entityVersion)
  {
    sgLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      goto LABEL_14;
    LOWORD(v26) = 0;
LABEL_23:
    _os_log_error_impl(&dword_1C3607000, v9, OS_LOG_TYPE_ERROR, "attempt to skip or repeat a migration", (uint8_t *)&v26, 2u);
    goto LABEL_14;
  }
  if ((_DWORD)entityVersion == self->_snippetsVersion)
  {
    entityMigrations = self->_entityMigrations;
    v6 = (void *)MEMORY[0x1E0CB37E8];
    self->_entityVersion = entityVersion + 1;
    objc_msgSend(v6, "numberWithUnsignedInt:");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "stringValue");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[NSDictionary objectForKeyedSubscript:](entityMigrations, "objectForKeyedSubscript:", v8);
    v9 = objc_claimAutoreleasedReturnValue();

    snippetsMigrations = self->_snippetsMigrations;
    v11 = (void *)MEMORY[0x1E0CB37E8];
    ++self->_snippetsVersion;
    objc_msgSend(v11, "numberWithUnsignedInt:");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "stringValue");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    -[NSDictionary objectForKeyedSubscript:](snippetsMigrations, "objectForKeyedSubscript:", v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v9)
    {
      v21 = 1;
      goto LABEL_20;
    }
    sgLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      v16 = self->_entityVersion;
      v26 = 134217984;
      v27 = v16;
      _os_log_impl(&dword_1C3607000, v15, OS_LOG_TYPE_INFO, "migrating entities to version %ld", (uint8_t *)&v26, 0xCu);
    }

    v17 = -[SGSqlEntityStore runQueries:forVersion:inTransactionOnDb:](self, "runQueries:forVersion:inTransactionOnDb:", v9, self->_entityVersion, self->_db);
    sgLogHandle();
    v18 = objc_claimAutoreleasedReturnValue();
    v19 = v18;
    if (v17 == 4)
    {
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        v20 = self->_entityVersion;
        v26 = 134217984;
        v27 = v20;
        _os_log_impl(&dword_1C3607000, v19, OS_LOG_TYPE_INFO, "migrating snippets to version %ld", (uint8_t *)&v26, 0xCu);
      }

      if (-[SGSqlEntityStore runQueries:forVersion:inTransactionOnDb:](self, "runQueries:forVersion:inTransactionOnDb:", v14, self->_snippetsVersion, self->_snippetDb) == 4)
      {
        v21 = 4;
LABEL_20:

        goto LABEL_21;
      }
      sgLogHandle();
      v19 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
LABEL_19:

        v21 = 2;
        goto LABEL_20;
      }
      v25 = self->_entityVersion;
      v26 = 134217984;
      v27 = v25;
      v23 = "failed to migrate snippets db to %ld";
    }
    else
    {
      if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        goto LABEL_19;
      v22 = self->_entityVersion;
      v26 = 134217984;
      v27 = v22;
      v23 = "failed to migrate entity db to %ld";
    }
    _os_log_error_impl(&dword_1C3607000, v19, OS_LOG_TYPE_ERROR, v23, (uint8_t *)&v26, 0xCu);
    goto LABEL_19;
  }
  sgLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v26) = 0;
    goto LABEL_23;
  }
LABEL_14:
  v21 = 3;
LABEL_21:

  return v21;
}

- (void)unsafeMigrateToVersionForTesting:(unint64_t)a3
{
  NSDictionary *entityMigrations;
  void *v6;
  void *v7;
  void *v8;
  NSDictionary *snippetsMigrations;
  void *v10;
  void *v11;
  void *v12;
  NSObject *v13;
  uint64_t entityVersion;
  int64_t v15;
  NSObject *v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  entityMigrations = self->_entityMigrations;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "stringValue");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  -[NSDictionary objectForKeyedSubscript:](entityMigrations, "objectForKeyedSubscript:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  snippetsMigrations = self->_snippetsMigrations;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a3);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "stringValue");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  -[NSDictionary objectForKeyedSubscript:](snippetsMigrations, "objectForKeyedSubscript:", v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  sgLogHandle();
  v13 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    entityVersion = self->_entityVersion;
    v22 = 134217984;
    v23 = entityVersion;
    _os_log_impl(&dword_1C3607000, v13, OS_LOG_TYPE_INFO, "migrating entities to version %ld", (uint8_t *)&v22, 0xCu);
  }

  v15 = -[SGSqlEntityStore runQueries:forVersion:inTransactionOnDb:](self, "runQueries:forVersion:inTransactionOnDb:", v8, self->_entityVersion, self->_db);
  sgLogHandle();
  v16 = objc_claimAutoreleasedReturnValue();
  v17 = v16;
  if (v15 != 4)
  {
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      v21 = self->_entityVersion;
      v22 = 134217984;
      v23 = v21;
      v20 = "failed to migrate entity db to %ld";
      goto LABEL_13;
    }
LABEL_10:

    goto LABEL_11;
  }
  if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
  {
    v18 = self->_entityVersion;
    v22 = 134217984;
    v23 = v18;
    _os_log_impl(&dword_1C3607000, v17, OS_LOG_TYPE_INFO, "migrating snippets to version %ld", (uint8_t *)&v22, 0xCu);
  }

  if (-[SGSqlEntityStore runQueries:forVersion:inTransactionOnDb:](self, "runQueries:forVersion:inTransactionOnDb:", v12, self->_snippetsVersion, self->_snippetDb) != 4)
  {
    sgLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      v19 = self->_entityVersion;
      v22 = 134217984;
      v23 = v19;
      v20 = "failed to migrate snippets db to %ld";
LABEL_13:
      _os_log_error_impl(&dword_1C3607000, v17, OS_LOG_TYPE_ERROR, v20, (uint8_t *)&v22, 0xCu);
      goto LABEL_10;
    }
    goto LABEL_10;
  }
LABEL_11:

}

- (int64_t)skipFromZeroSchema
{
  void *v4;
  void *v5;
  NSObject *v6;
  NSObject *v7;
  int64_t v8;
  NSObject *v9;
  const char *v10;
  void *v12;
  void *v13;
  unsigned int v14;
  unsigned int v15;
  uint8_t buf[4];
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v14 = -1;
  v15 = -1;
  +[SGDatabaseMigratorEntities skipFromZeroSchema:](SGDatabaseMigratorEntities, "skipFromZeroSchema:", &v15);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  +[SGDatabaseMigratorSnippets skipFromZeroSchema:](SGDatabaseMigratorSnippets, "skipFromZeroSchema:", &v14);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v15 == -1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore+DatabaseMigrator.m"), 677, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("skipToEntityVersion != UINT32_MAX"));

  }
  if (v14 == -1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore+DatabaseMigrator.m"), 678, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("skipToSnippetsVersion != UINT32_MAX"));

  }
  sgLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134217984;
    v17 = v15;
    _os_log_impl(&dword_1C3607000, v6, OS_LOG_TYPE_INFO, "migrating entities from zero to version %lu", buf, 0xCu);
  }

  if (-[SGSqlEntityStore runQueries:forVersion:inTransactionOnDb:](self, "runQueries:forVersion:inTransactionOnDb:", v4, v15, self->_db) != 4)
  {
    sgLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
LABEL_15:

      v8 = 2;
      goto LABEL_16;
    }
    *(_DWORD *)buf = 134217984;
    v17 = v15;
    v10 = "failed to migrate entity db from zero to %lu";
LABEL_18:
    _os_log_error_impl(&dword_1C3607000, v9, OS_LOG_TYPE_ERROR, v10, buf, 0xCu);
    goto LABEL_15;
  }
  self->_entityVersion = v15;
  sgLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134217984;
    v17 = v14;
    _os_log_impl(&dword_1C3607000, v7, OS_LOG_TYPE_INFO, "migrating snippets from zero to version %lu", buf, 0xCu);
  }

  if (-[SGSqlEntityStore runQueries:forVersion:inTransactionOnDb:](self, "runQueries:forVersion:inTransactionOnDb:", v5, v14, self->_snippetDb) != 4)
  {
    sgLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      goto LABEL_15;
    *(_DWORD *)buf = 134217984;
    v17 = v14;
    v10 = "failed to migrate snippets db from zero to %lu";
    goto LABEL_18;
  }
  self->_snippetsVersion = v14;
  v8 = 4;
LABEL_16:

  return v8;
}

- (int64_t)migrate
{
  NSObject *v3;
  NSObject *v4;
  unint64_t entityVersion;
  NSObject *v6;
  int v7;
  NSObject *v8;
  const char *v9;
  NSObject *v10;
  uint32_t v11;
  _BOOL4 v12;
  unsigned int v13;
  int v15;
  int64_t v16;
  void *v17;
  int64_t v18;
  int64_t v19;
  id v20;
  const __CFString *v21;
  NSObject *v22;
  NSObject *v23;
  void *v24;
  uint64_t v25;
  NSObject *v26;
  NSObject *v27;
  SGSqliteDatabase *v28;
  int v29;
  void *v30;
  SGSqliteDatabase *db;
  SGSqliteDatabase *snippetDb;
  uint64_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t snippetsVersion;
  _QWORD v39[7];
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  char v43;
  _QWORD block[5];
  id v45;
  os_activity_scope_state_s state;
  uint8_t buf[24];
  uint64_t v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v3 = _os_activity_create(&dword_1C3607000, "migrating SGSqliteDatabase", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  os_activity_scope_enter(v3, &state);
  sgLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    db = self->_db;
    snippetDb = self->_snippetDb;
    *(_DWORD *)buf = 138412546;
    *(_QWORD *)&buf[4] = db;
    *(_WORD *)&buf[12] = 2112;
    *(_QWORD *)&buf[14] = snippetDb;
    _os_log_debug_impl(&dword_1C3607000, v4, OS_LOG_TYPE_DEBUG, "Migrating %@ & %@", buf, 0x16u);
  }

  entityVersion = self->_entityVersion;
  if (-[SGSqlEntityStore maxKnownDbVersion](self, "maxKnownDbVersion") < entityVersion)
  {
    sgLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1C3607000, v6, OS_LOG_TYPE_INFO, "Future database version detected. Giving up on migration.", buf, 2u);
    }
LABEL_61:
    v16 = 3;
    goto LABEL_62;
  }
  if (-[SGSqliteDatabase hasTableNamed:](self->_db, "hasTableNamed:", CFSTR("version")))
    goto LABEL_7;
  v12 = -[SGSqliteDatabase hasColumnOnTable:named:](self->_db, "hasColumnOnTable:named:", CFSTR("entity"), CFSTR("duplicateKeyHash"));
  v13 = self->_entityVersion;
  v15 = v13 != 1 && v13 < 0x45 || v12;
  if (v15 == 1)
  {
    if (!v12)
    {
      if (!v13)
      {
        sgLogHandle();
        v8 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          v9 = "Encountered empty database (user_version == 0)";
          v10 = v8;
          v11 = 2;
          goto LABEL_11;
        }
LABEL_29:

        v18 = -[SGSqlEntityStore clearDatabase:](self, "clearDatabase:", self->_db);
        v19 = -[SGSqlEntityStore clearDatabase:](self, "clearDatabase:", self->_snippetDb);
        if (v18 != 4 || v19 != 4)
        {
          sgLogHandle();
          v6 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_error_impl(&dword_1C3607000, v6, OS_LOG_TYPE_ERROR, "Failed to clear legacy database.", buf, 2u);
          }
          goto LABEL_61;
        }
        *(_QWORD *)&self->_entityVersion = 0;
        goto LABEL_32;
      }
      v7 = 0;
LABEL_8:
      sgLogHandle();
      v8 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
        goto LABEL_29;
      if (v7)
      {
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)&buf[4] = CFSTR("legacy");
        v9 = "Encountered %@ database; dropping all data.";
        v10 = v8;
        v11 = 12;
LABEL_11:
        _os_log_impl(&dword_1C3607000, v10, OS_LOG_TYPE_INFO, v9, buf, v11);
        goto LABEL_29;
      }
      v17 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("old (%lu < %d)"), self->_entityVersion, 69);
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v17;
      _os_log_impl(&dword_1C3607000, v8, OS_LOG_TYPE_INFO, "Encountered %@ database; dropping all data.", buf, 0xCu);

      goto LABEL_29;
    }
LABEL_7:
    v7 = 1;
    goto LABEL_8;
  }
  if (self->_snippetsVersion != v13)
  {
    if (-[SGSqlEntityStore fixupVersionMismatch](self, "fixupVersionMismatch") != 4)
    {
      sgLogHandle();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        v37 = self->_entityVersion;
        snippetsVersion = self->_snippetsVersion;
        *(_DWORD *)buf = 134218240;
        *(_QWORD *)&buf[4] = v37;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = snippetsVersion;
        _os_log_error_impl(&dword_1C3607000, v6, OS_LOG_TYPE_ERROR, "Unrecoverable db version mismatch %ld & %ld", buf, 0x16u);
      }
      v16 = 5;
      goto LABEL_62;
    }
    v13 = self->_entityVersion;
  }
  if (v13 || self->_snippetsVersion)
  {
    v16 = 4;
    goto LABEL_33;
  }
LABEL_32:
  v16 = -[SGSqlEntityStore skipFromZeroSchema](self, "skipFromZeroSchema");
LABEL_33:
  while (v16 == 4)
  {
    if (!-[SGSqlEntityStore isEphemeral](self, "isEphemeral")
      && (objc_msgSend(MEMORY[0x1E0D81590], "isUnlocked") & 1) == 0
      && -[SGSqlEntityStore migrationNeeded](self, "migrationNeeded"))
    {
      sgLogHandle();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        v34 = self->_entityVersion;
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = v34;
        _os_log_impl(&dword_1C3607000, v6, OS_LOG_TYPE_DEFAULT, "database migration bailing out at version %lu due to device being locked.", buf, 0xCu);
      }
      v16 = 0;
      goto LABEL_62;
    }
    memset(buf, 0, sizeof(buf));
    v20 = objc_alloc(MEMORY[0x1E0CB3940]);
    if (-[SGSqliteDatabase isInMemory](self->_db, "isInMemory"))
      v21 = CFSTR("memory");
    else
      v21 = CFSTR("disk");
    *(_QWORD *)buf = objc_msgSend(v20, "initWithFormat:", CFSTR("migrator.%@.steps.%lu_to_%lu"), v21, self->_entityVersion, self->_entityVersion + 1);
    *(_QWORD *)&buf[8] = mach_absolute_time();
    v16 = -[SGSqlEntityStore migrateToVersion:](self, "migrateToVersion:", self->_entityVersion + 1);
    SGRecordMeasurementState(buf);
    SGRecordMeasurementState(buf);
  }
  if (v16 == 1)
  {
    if (self->_entityMigrationRequiresMergeBlobUpdate)
    {
      sgLogHandle();
      v22 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_debug_impl(&dword_1C3607000, v22, OS_LOG_TYPE_DEBUG, "Finalizing migration with a merge blob sync", buf, 2u);
      }

      -[SGSqlEntityStore forceBlobSync](self, "forceBlobSync");
    }
    sgLogHandle();
    v23 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
    {
      -[SGSqliteDatabase filename](self->_db, "filename");
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v35;
      _os_log_debug_impl(&dword_1C3607000, v23, OS_LOG_TYPE_DEBUG, "about to check for language change for FTS tables: %@", buf, 0xCu);

    }
    -[SGSqlEntityStore languageToUpdateEntityFTSTo](self, "languageToUpdateEntityFTSTo");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = MEMORY[0x1E0C809B0];
    if (v24 || -[SGSqliteDatabase hasTableNamed:](self->_db, "hasTableNamed:", CFSTR("entity_fts_from")))
    {
      sgLogHandle();
      v26 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
      {
        -[SGSqliteDatabase filename](self->_db, "filename");
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412546;
        *(_QWORD *)&buf[4] = v36;
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = v24;
        _os_log_debug_impl(&dword_1C3607000, v26, OS_LOG_TYPE_DEBUG, "detected need for FTS rebuild: %@: %@", buf, 0x16u);

      }
      dispatch_get_global_queue(5, 0);
      v27 = objc_claimAutoreleasedReturnValue();
      block[0] = v25;
      block[1] = 3221225472;
      block[2] = __45__SGSqlEntityStore_DatabaseMigrator__migrate__block_invoke;
      block[3] = &unk_1E7DB6A30;
      block[4] = self;
      v45 = v24;
      dispatch_async(v27, block);

    }
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v48 = 4;
    do
    {
      if (*(_QWORD *)(*(_QWORD *)&buf[8] + 24) != 4)
        break;
      v40 = 0;
      v41 = &v40;
      v42 = 0x2020000000;
      v43 = 0;
      v28 = self->_db;
      v39[0] = v25;
      v39[1] = 3221225472;
      v39[2] = __45__SGSqlEntityStore_DatabaseMigrator__migrate__block_invoke_2;
      v39[3] = &unk_1E7DB46E0;
      v39[4] = self;
      v39[5] = buf;
      v39[6] = &v40;
      -[SGSqliteDatabase writeTransaction:](v28, "writeTransaction:", v39);
      v29 = *((unsigned __int8 *)v41 + 24);
      _Block_object_dispose(&v40, 8);
    }
    while (!v29);
    _Block_object_dispose(buf, 8);

    v16 = 1;
  }
  sgLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    -[SGSqliteDatabase filename](self->_db, "filename");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = v30;
    _os_log_debug_impl(&dword_1C3607000, v6, OS_LOG_TYPE_DEBUG, "done migrating: %@", buf, 0xCu);

  }
LABEL_62:

  os_activity_scope_leave(&state);
  return v16;
}

- (int64_t)migration_deleteLegacyMessages
{
  -[SGSqlEntityStore deleteSpotlightReferencesWithBundleIdentifier:](self, "deleteSpotlightReferencesWithBundleIdentifier:", CFSTR("com.apple.iChat"));
  return 4;
}

- (int64_t)migration_MoveContentToSnippets
{
  void *v3;
  void *v4;
  void *v5;
  SGSqliteDatabase *db;
  uint64_t v7;
  SGSqliteDatabase *v8;
  int64_t v9;
  _QWORD v11[5];
  _QWORD v12[5];
  _QWORD v13[5];
  _QWORD v14[5];
  _QWORD v15[5];
  _QWORD v16[5];
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;

  v17 = 0;
  v18 = &v17;
  v19 = 0x2020000000;
  v20 = 4;
  objc_msgSend(MEMORY[0x1E0CB3898], "processInfo");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "environment");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "objectForKey:", CFSTR("SG_UPDATING_SKIP_QUERIES"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v5 && !-[SGSqliteDatabase isInMemory](self->_snippetDb, "isInMemory"))
  {
    db = self->_db;
    v7 = MEMORY[0x1E0C809B0];
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 3221225472;
    v16[2] = __69__SGSqlEntityStore_DatabaseMigrator__migration_MoveContentToSnippets__block_invoke;
    v16[3] = &unk_1E7DB7720;
    v16[4] = self;
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = __69__SGSqlEntityStore_DatabaseMigrator__migration_MoveContentToSnippets__block_invoke_2;
    v15[3] = &unk_1E7DB4690;
    v15[4] = &v17;
    -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](db, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("ATTACH DATABASE :snippetPath AS snippets"), v16, 0, v15);
    v8 = self->_db;
    if (v18[3] == 4)
    {
      v14[0] = v7;
      v14[1] = 3221225472;
      v14[2] = __69__SGSqlEntityStore_DatabaseMigrator__migration_MoveContentToSnippets__block_invoke_2_123;
      v14[3] = &unk_1E7DB4690;
      v14[4] = &v17;
      -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](v8, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("INSERT OR REPLACE INTO snippets.snippets (entityId, title, content, contentRangeOfInterest) SELECT id, title, content, contentRangeOfInterest FROM entity WHERE entityType = :entityType "), &__block_literal_global_121_28707, 0, v14);
      v8 = self->_db;
      if (v18[3] == 4)
      {
        v13[0] = v7;
        v13[1] = 3221225472;
        v13[2] = __69__SGSqlEntityStore_DatabaseMigrator__migration_MoveContentToSnippets__block_invoke_2_128;
        v13[3] = &unk_1E7DB4690;
        v13[4] = &v17;
        -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](v8, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("INSERT OR REPLACE INTO snippets.snippets (entityId, title, content, contentRangeOfInterest) SELECT id, NULL, content, contentRangeOfInterest FROM entity WHERE entityType != :entityType "), &__block_literal_global_127, 0, v13);
        v8 = self->_db;
        if (v18[3] == 4)
        {
          v12[0] = v7;
          v12[1] = 3221225472;
          v12[2] = __69__SGSqlEntityStore_DatabaseMigrator__migration_MoveContentToSnippets__block_invoke_131;
          v12[3] = &unk_1E7DB4690;
          v12[4] = &v17;
          -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](v8, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("UPDATE entity SET content=NULL, contentRangeOfInterest=NULL"), 0, 0, v12);
          v8 = self->_db;
          if (v18[3] == 4)
          {
            v11[0] = v7;
            v11[1] = 3221225472;
            v11[2] = __69__SGSqlEntityStore_DatabaseMigrator__migration_MoveContentToSnippets__block_invoke_2_136;
            v11[3] = &unk_1E7DB4690;
            v11[4] = &v17;
            -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](v8, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("UPDATE entity SET title=NULL WHERE entityType = ?"), &__block_literal_global_135_28711, 0, v11);
            v8 = self->_db;
          }
        }
      }
    }
    -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](v8, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("DETACH DATABASE snippets"), 0, 0, &__block_literal_global_405);
  }
  v9 = v18[3];
  _Block_object_dispose(&v17, 8);
  return v9;
}

- (int64_t)migration_AddAuthorColumnIfMissing
{
  int64_t v3;
  SGSqliteDatabase *db;
  _QWORD v6[5];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  if (-[SGSqliteDatabase hasColumnOnTable:named:](self->_db, "hasColumnOnTable:named:", CFSTR("entity"), CFSTR("author")))
  {
    return 4;
  }
  v7 = 0;
  v8 = &v7;
  v9 = 0x2020000000;
  v10 = 4;
  db = self->_db;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __72__SGSqlEntityStore_DatabaseMigrator__migration_AddAuthorColumnIfMissing__block_invoke;
  v6[3] = &unk_1E7DB4690;
  v6[4] = &v7;
  -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](db, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("ALTER TABLE entity ADD COLUMN author TEXT"), 0, 0, v6);
  v3 = v8[3];
  _Block_object_dispose(&v7, 8);
  return v3;
}

- (int64_t)migration_AddNewishTablesIfMissing
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  SGSqliteDatabase *db;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  SGSqliteDatabase *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  SGSqliteDatabase *v20;
  int64_t v21;
  _QWORD v23[5];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _QWORD v28[5];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _QWORD v33[5];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE v42[128];
  _BYTE v43[128];
  _BYTE v44[128];
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v38 = 0;
  v39 = &v38;
  v40 = 0x2020000000;
  v41 = 4;
  if (!-[SGSqliteDatabase hasTableNamed:](self->_db, "hasTableNamed:", CFSTR("entityParentage")))
  {
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v3 = objc_msgSend(&unk_1E7E10A58, "countByEnumeratingWithState:objects:count:", &v34, v44, 16);
    if (v3)
    {
      v4 = *(_QWORD *)v35;
      v5 = MEMORY[0x1E0C809B0];
      do
      {
        v6 = 0;
        do
        {
          if (*(_QWORD *)v35 != v4)
            objc_enumerationMutation(&unk_1E7E10A58);
          v7 = *(_QWORD *)(*((_QWORD *)&v34 + 1) + 8 * v6);
          db = self->_db;
          v33[0] = v5;
          v33[1] = 3221225472;
          v33[2] = __72__SGSqlEntityStore_DatabaseMigrator__migration_AddNewishTablesIfMissing__block_invoke;
          v33[3] = &unk_1E7DB4690;
          v33[4] = &v38;
          -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](db, "prepAndRunQuery:onPrep:onRow:onError:", v7, 0, 0, v33);
          ++v6;
        }
        while (v3 != v6);
        v3 = objc_msgSend(&unk_1E7E10A58, "countByEnumeratingWithState:objects:count:", &v34, v44, 16);
      }
      while (v3);
    }
  }
  if (!-[SGSqliteDatabase hasTableNamed:](self->_db, "hasTableNamed:", CFSTR("serializedContacts")))
  {
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v9 = objc_msgSend(&unk_1E7E10A70, "countByEnumeratingWithState:objects:count:", &v29, v43, 16);
    if (v9)
    {
      v10 = *(_QWORD *)v30;
      v11 = MEMORY[0x1E0C809B0];
      do
      {
        v12 = 0;
        do
        {
          if (*(_QWORD *)v30 != v10)
            objc_enumerationMutation(&unk_1E7E10A70);
          v13 = *(_QWORD *)(*((_QWORD *)&v29 + 1) + 8 * v12);
          v14 = self->_db;
          v28[0] = v11;
          v28[1] = 3221225472;
          v28[2] = __72__SGSqlEntityStore_DatabaseMigrator__migration_AddNewishTablesIfMissing__block_invoke_159;
          v28[3] = &unk_1E7DB4690;
          v28[4] = &v38;
          -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](v14, "prepAndRunQuery:onPrep:onRow:onError:", v13, 0, 0, v28);
          ++v12;
        }
        while (v9 != v12);
        v9 = objc_msgSend(&unk_1E7E10A70, "countByEnumeratingWithState:objects:count:", &v29, v43, 16);
      }
      while (v9);
    }
  }
  if (!-[SGSqliteDatabase hasTableNamed:](self->_db, "hasTableNamed:", CFSTR("cnContactsToSgContacts")))
  {
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v15 = objc_msgSend(&unk_1E7E10A88, "countByEnumeratingWithState:objects:count:", &v24, v42, 16);
    if (v15)
    {
      v16 = *(_QWORD *)v25;
      v17 = MEMORY[0x1E0C809B0];
      do
      {
        v18 = 0;
        do
        {
          if (*(_QWORD *)v25 != v16)
            objc_enumerationMutation(&unk_1E7E10A88);
          v19 = *(_QWORD *)(*((_QWORD *)&v24 + 1) + 8 * v18);
          v20 = self->_db;
          v23[0] = v17;
          v23[1] = 3221225472;
          v23[2] = __72__SGSqlEntityStore_DatabaseMigrator__migration_AddNewishTablesIfMissing__block_invoke_168;
          v23[3] = &unk_1E7DB4690;
          v23[4] = &v38;
          -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](v20, "prepAndRunQuery:onPrep:onRow:onError:", v19, 0, 0, v23);
          ++v18;
        }
        while (v15 != v18);
        v15 = objc_msgSend(&unk_1E7E10A88, "countByEnumeratingWithState:objects:count:", &v24, v42, 16);
      }
      while (v15);
    }
  }
  v21 = v39[3];
  _Block_object_dispose(&v38, 8);
  return v21;
}

- (int64_t)migration_FixUpColumnsForDevicesWhoMissedTheImprovedLegacyMigration
{
  SGSqliteDatabase *db;
  SGSqliteDatabase *v4;
  SGSqliteDatabase *v5;
  SGSqliteDatabase *v6;
  SGSqliteDatabase *v7;
  SGSqliteDatabase *v8;
  SGSqliteDatabase *v9;
  SGSqliteDatabase *v10;
  int64_t v11;
  _QWORD v13[5];
  _QWORD v14[5];
  _QWORD v15[5];
  _QWORD v16[5];
  _QWORD v17[5];
  _QWORD v18[5];
  _QWORD v19[5];
  _QWORD v20[5];
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;

  v21 = 0;
  v22 = &v21;
  v23 = 0x2020000000;
  v24 = 4;
  if (!-[SGSqliteDatabase hasColumnOnTable:named:](self->_db, "hasColumnOnTable:named:", CFSTR("entity"), CFSTR("downloadState")))
  {
    db = self->_db;
    v20[0] = MEMORY[0x1E0C809B0];
    v20[1] = 3221225472;
    v20[2] = __105__SGSqlEntityStore_DatabaseMigrator__migration_FixUpColumnsForDevicesWhoMissedTheImprovedLegacyMigration__block_invoke;
    v20[3] = &unk_1E7DB4690;
    v20[4] = &v21;
    -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](db, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("ALTER TABLE entity ADD COLUMN downloadState INTEGER DEFAULT 0"), 0, 0, v20);
  }
  if (!-[SGSqliteDatabase hasIndexNamed:](self->_db, "hasIndexNamed:", CFSTR("entityDownloadStateIdx")))
  {
    v4 = self->_db;
    v19[0] = MEMORY[0x1E0C809B0];
    v19[1] = 3221225472;
    v19[2] = __105__SGSqlEntityStore_DatabaseMigrator__migration_FixUpColumnsForDevicesWhoMissedTheImprovedLegacyMigration__block_invoke_177;
    v19[3] = &unk_1E7DB4690;
    v19[4] = &v21;
    -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](v4, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("CREATE INDEX entityDownloadStateIdx on entity(downloadState)"), 0, 0, v19);
  }
  if (!-[SGSqliteDatabase hasColumnOnTable:named:](self->_db, "hasColumnOnTable:named:", CFSTR("entity"), CFSTR("contentHash")))
  {
    v5 = self->_db;
    v18[0] = MEMORY[0x1E0C809B0];
    v18[1] = 3221225472;
    v18[2] = __105__SGSqlEntityStore_DatabaseMigrator__migration_FixUpColumnsForDevicesWhoMissedTheImprovedLegacyMigration__block_invoke_182;
    v18[3] = &unk_1E7DB4690;
    v18[4] = &v21;
    -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](v5, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("ALTER TABLE entity ADD COLUMN contentHash TEXT"), 0, 0, v18);
  }
  if (!-[SGSqliteDatabase hasIndexNamed:](self->_db, "hasIndexNamed:", CFSTR("entityContentHashIdx")))
  {
    v6 = self->_db;
    v17[0] = MEMORY[0x1E0C809B0];
    v17[1] = 3221225472;
    v17[2] = __105__SGSqlEntityStore_DatabaseMigrator__migration_FixUpColumnsForDevicesWhoMissedTheImprovedLegacyMigration__block_invoke_187;
    v17[3] = &unk_1E7DB4690;
    v17[4] = &v21;
    -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](v6, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("CREATE UNIQUE INDEX IF NOT EXISTS entityContentHashIdx ON entity(contentHash)"), 0, 0, v17);
  }
  if (!-[SGSqliteDatabase hasColumnOnTable:named:](self->_db, "hasColumnOnTable:named:", CFSTR("entity"), CFSTR("groupId")))
  {
    v7 = self->_db;
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 3221225472;
    v16[2] = __105__SGSqlEntityStore_DatabaseMigrator__migration_FixUpColumnsForDevicesWhoMissedTheImprovedLegacyMigration__block_invoke_192;
    v16[3] = &unk_1E7DB4690;
    v16[4] = &v21;
    -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](v7, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("ALTER TABLE entity ADD COLUMN groupId INTEGER DEFAULT -1"), 0, 0, v16);
  }
  if (!-[SGSqliteDatabase hasIndexNamed:](self->_db, "hasIndexNamed:", CFSTR("groupIdIdx")))
  {
    v8 = self->_db;
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = __105__SGSqlEntityStore_DatabaseMigrator__migration_FixUpColumnsForDevicesWhoMissedTheImprovedLegacyMigration__block_invoke_197;
    v15[3] = &unk_1E7DB4690;
    v15[4] = &v21;
    -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](v8, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("CREATE INDEX IF NOT EXISTS groupIdIdx on entity(groupId)"), 0, 0, v15);
  }
  if (!-[SGSqliteDatabase hasColumnOnTable:named:](self->_db, "hasColumnOnTable:named:", CFSTR("entityTags"), CFSTR("duplicateKeyHash")))
  {
    v9 = self->_db;
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = __105__SGSqlEntityStore_DatabaseMigrator__migration_FixUpColumnsForDevicesWhoMissedTheImprovedLegacyMigration__block_invoke_202;
    v14[3] = &unk_1E7DB4690;
    v14[4] = &v21;
    -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](v9, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("ALTER TABLE entityTags ADD COLUMN duplicateKeyHash TEXT NOT NULL DEFAULT ''"), 0, 0, v14);
  }
  if (!-[SGSqliteDatabase hasIndexNamed:](self->_db, "hasIndexNamed:", CFSTR("ix_entityTags_dupKeyHash")))
  {
    v10 = self->_db;
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = __105__SGSqlEntityStore_DatabaseMigrator__migration_FixUpColumnsForDevicesWhoMissedTheImprovedLegacyMigration__block_invoke_207;
    v13[3] = &unk_1E7DB4690;
    v13[4] = &v21;
    -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](v10, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("CREATE INDEX IF NOT EXISTS ix_entityTags_dupKeyHash ON entityTags(duplicateKeyHash)"), 0, 0, v13);
  }
  v11 = v22[3];
  _Block_object_dispose(&v21, 8);
  return v11;
}

- (int64_t)migration_RebuildIdentityTables
{
  if (!-[SGSqlEntityStore rebuildIdentityTables](self, "rebuildIdentityTables"))
    return 2;
  self->_entityMigrationRequiresMergeBlobUpdate = 1;
  return 4;
}

- (int64_t)migration_RecreateFTSTableWithITS
{
  NSObject *v3;
  uint8_t v5[16];

  sgLogHandle();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v5 = 0;
    _os_log_debug_impl(&dword_1C3607000, v3, OS_LOG_TYPE_DEBUG, "migration_RecreateFTSTableWithITS", v5, 2u);
  }

  if (-[SGSqlEntityStore _prepareToCopyFrom:toNewTableNamed:](self, "_prepareToCopyFrom:toNewTableNamed:", CFSTR("entity_fts_from"), CFSTR("entity_fts")))
  {
    return 4;
  }
  else
  {
    return 2;
  }
}

- (int64_t)migration_CreateFTSTableWithITS
{
  NSObject *v3;
  uint8_t v5[16];

  sgLogHandle();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v5 = 0;
    _os_log_debug_impl(&dword_1C3607000, v3, OS_LOG_TYPE_DEBUG, "migration_CreateFTSTableWithITS", v5, 2u);
  }

  if (-[SGSqlEntityStore _createEntityFTSTableWithName:](self, "_createEntityFTSTableWithName:", CFSTR("entity_fts")))
    return 4;
  else
    return 2;
}

- (int64_t)migration_DeduplicateIdentityPhones
{
  SGSqliteDatabase *db;
  int64_t v3;
  _QWORD v5[6];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v9 = 4;
  db = self->_db;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __73__SGSqlEntityStore_DatabaseMigrator__migration_DeduplicateIdentityPhones__block_invoke;
  v5[3] = &unk_1E7DB78A0;
  v5[4] = self;
  v5[5] = &v6;
  -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v5);
  v3 = v7[3];
  _Block_object_dispose(&v6, 8);
  return v3;
}

- (int64_t)migration_ConvertContentAndDupKeyHashesToBlobs
{
  NSObject *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint8_t buf[8];
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (sqlite3_create_function_v2(-[SGSqliteDatabase handle](self->_db, "handle"), "hashHexToBlob", 1, 2049, 0, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))hashHexToBlob, 0, 0, 0))
  {
    sgLogHandle();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1C3607000, v3, OS_LOG_TYPE_ERROR, "Could not install hashHexToBlob() sqlite function", buf, 2u);
    }

    return 2;
  }
  else
  {
    *(_QWORD *)buf = 0;
    v14 = buf;
    v15 = 0x2020000000;
    v16 = 4;
    v9 = 0u;
    v10 = 0u;
    v11 = 0u;
    v12 = 0u;
    v5 = objc_msgSend(&unk_1E7E10AA0, "countByEnumeratingWithState:objects:count:", &v9, v17, 16);
    if (v5)
    {
      v6 = *(_QWORD *)v10;
LABEL_7:
      v7 = 0;
      while (1)
      {
        if (*(_QWORD *)v10 != v6)
          objc_enumerationMutation(&unk_1E7E10AA0);
        -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](self->_db, "prepAndRunQuery:onPrep:onRow:onError:");
        if (*((_QWORD *)v14 + 3) != 4)
          break;
        if (v5 == ++v7)
        {
          v5 = objc_msgSend(&unk_1E7E10AA0, "countByEnumeratingWithState:objects:count:", &v9, v17, 16);
          if (v5)
            goto LABEL_7;
          break;
        }
      }
    }
    v4 = *((_QWORD *)v14 + 3);
    _Block_object_dispose(buf, 8);
  }
  return v4;
}

- (int64_t)migration_DropMessagingTermsWithPhoneExtensions
{
  SGSqliteDatabase *db;
  int64_t v3;
  _QWORD v5[5];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v9 = 4;
  db = self->_db;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __85__SGSqlEntityStore_DatabaseMigrator__migration_DropMessagingTermsWithPhoneExtensions__block_invoke_2;
  v5[3] = &unk_1E7DB4690;
  v5[4] = &v6;
  -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](db, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("DELETE FROM entity_fts WHERE messagingTerms GLOB :semicolon"), &__block_literal_global_232_28593, 0, v5);
  v3 = v7[3];
  _Block_object_dispose(&v6, 8);
  return v3;
}

- (int64_t)migration_RemoveEntityReferencesWithoutBundleIdentifier
{
  return 4;
}

- (int64_t)migration_FixupMergeGroups
{
  SGSqliteDatabase *db;
  _QWORD v5[5];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v9 = 4;
  db = self->_db;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __64__SGSqlEntityStore_DatabaseMigrator__migration_FixupMergeGroups__block_invoke_2;
  v5[3] = &unk_1E7DB4690;
  v5[4] = &v6;
  -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](db, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("UPDATE entity SET masterEntityId = -1 WHERE entityType IN (:pseudo, :unrec)"), &__block_literal_global_238, 0, v5);
  if (v7[3] == 4)
    self->_entityMigrationRequiresMergeBlobUpdate = 1;
  _Block_object_dispose(&v6, 8);
  return 4;
}

- (int64_t)migration_separateMessageEntities
{
  uint64_t v3;
  SGSqliteDatabase *db;
  SGSqliteDatabase *v5;
  SGSqliteDatabase *v6;
  SGSqliteDatabase *v7;
  int64_t v8;
  _QWORD v10[5];
  _QWORD v11[5];
  _QWORD v12[5];
  _QWORD v13[5];
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;

  v14 = 0;
  v15 = &v14;
  v16 = 0x2020000000;
  v17 = 4;
  v3 = MEMORY[0x1E0C809B0];
  db = self->_db;
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = __71__SGSqlEntityStore_DatabaseMigrator__migration_separateMessageEntities__block_invoke_2;
  v13[3] = &unk_1E7DB4690;
  v13[4] = &v14;
  -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](db, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("INSERT INTO emailMetadata     (id, key, type, sourceKey, author, creationTimestamp, updateTimestamp, indexTimestamp, lastSeenTimestamp,      tags, state, downloadState, harvestedOnBuild) SELECT e.id, e.entityKey, e.entityType, ep.sourceKey, e.author, e.creationTimestamp, e.updateTimestamp, e.indexTimestamp,     e.lastSeenTimestamp, e.tags, e.state, e.downloadState, e.harvestedOnBuild FROM entity AS e INNER JOIN entityParentage AS ep ON e.id = ep.childId WHERE e.entityType IN (:email, :textMessage)"), &__block_literal_global_243, 0, v13);
  v5 = self->_db;
  v12[0] = v3;
  v12[1] = 3221225472;
  v12[2] = __71__SGSqlEntityStore_DatabaseMigrator__migration_separateMessageEntities__block_invoke_2_250;
  v12[3] = &unk_1E7DB4690;
  v12[4] = &v14;
  -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](v5, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("DELETE FROM entityParentage WHERE childId IN (SELECT id FROM entity WHERE entityType IN (:email, :textMessage))"), &__block_literal_global_249_28573, 0, v12);
  v6 = self->_db;
  v11[0] = v3;
  v11[1] = 3221225472;
  v11[2] = __71__SGSqlEntityStore_DatabaseMigrator__migration_separateMessageEntities__block_invoke_2_255;
  v11[3] = &unk_1E7DB4690;
  v11[4] = &v14;
  -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](v6, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("DELETE FROM entity WHERE entityType IN (:email, :textMessage)"), &__block_literal_global_254_28575, 0, v11);
  v7 = self->_db;
  v10[0] = v3;
  v10[1] = 3221225472;
  v10[2] = __71__SGSqlEntityStore_DatabaseMigrator__migration_separateMessageEntities__block_invoke_2_260;
  v10[3] = &unk_1E7DB4690;
  v10[4] = &v14;
  -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](v7, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("INSERT INTO emailTags (key, type, tag) SELECT entityKey, entityType, tag FROM entityTags WHERE entityType IN (:email, :textMessage)"), &__block_literal_global_259, 0, v10);
  v8 = v15[3];
  _Block_object_dispose(&v14, 8);
  return v8;
}

- (int64_t)migration_separateMessageSnippets
{
  SGSqliteDatabase *db;
  int64_t v3;
  _QWORD v5[5];
  _QWORD v6[6];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v7 = 0;
  v8 = &v7;
  v9 = 0x2020000000;
  v10 = 4;
  db = self->_db;
  v5[4] = &v7;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __71__SGSqlEntityStore_DatabaseMigrator__migration_separateMessageSnippets__block_invoke;
  v6[3] = &unk_1E7DB6A98;
  v6[4] = self;
  v6[5] = &v7;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __71__SGSqlEntityStore_DatabaseMigrator__migration_separateMessageSnippets__block_invoke_270;
  v5[3] = &unk_1E7DB4690;
  -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](db, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("SELECT id FROM emailMetadata"), 0, v6, v5);
  v3 = v8[3];
  _Block_object_dispose(&v7, 8);
  return v3;
}

- (int64_t)migration_rebuildFTSWithDetailEntityIDDocIDs
{
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  SGSqliteDatabase *db;
  uint64_t v11;
  id v12;
  NSObject *v13;
  NSObject *v14;
  int64_t v15;
  _QWORD v17[5];
  _QWORD v18[5];
  id v19;
  uint64_t *v20;
  SEL v21;
  uint8_t buf[16];
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;

  v23 = 0;
  v24 = &v23;
  v25 = 0x2020000000;
  v26 = 4;
  sgLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_debug_impl(&dword_1C3607000, v4, OS_LOG_TYPE_DEBUG, "starting rebuildFTSWithDetailEntityIDDocIDs", buf, 2u);
  }

  -[SGSqlEntityStore _prepareToCopyFrom:toNewTableNamed:](self, "_prepareToCopyFrom:toNewTableNamed:", CFSTR("entity_fts_docidfix_backup"), CFSTR("entity_fts"));
  objc_msgSend(MEMORY[0x1E0C972B8], "sharedDefaults");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "countryCode");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v6)
  {
    v8 = v6;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99DC8], "currentLocale");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "objectForKey:", *MEMORY[0x1E0C997B0]);
    v8 = (id)objc_claimAutoreleasedReturnValue();

  }
  db = self->_db;
  v11 = MEMORY[0x1E0C809B0];
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 3221225472;
  v18[2] = __82__SGSqlEntityStore_DatabaseMigrator__migration_rebuildFTSWithDetailEntityIDDocIDs__block_invoke;
  v18[3] = &unk_1E7DB4898;
  v21 = a2;
  v18[4] = self;
  v12 = v8;
  v19 = v12;
  v20 = &v23;
  v17[0] = v11;
  v17[1] = 3221225472;
  v17[2] = __82__SGSqlEntityStore_DatabaseMigrator__migration_rebuildFTSWithDetailEntityIDDocIDs__block_invoke_286;
  v17[3] = &unk_1E7DB4690;
  v17[4] = &v23;
  -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](db, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("SELECT id, entityType, title, groupId, entityKey FROM entity "), 0, v18, v17);
  if (v24[3] == 4)
  {
    sgLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_1C3607000, v13, OS_LOG_TYPE_DEBUG, "rebuildFTSWithDetailEntityIDDocIDs: success. Deleting backup table.", buf, 2u);
    }

    -[SGSqliteDatabase prepAndRunNonDataQueries:onError:](self->_db, "prepAndRunNonDataQueries:onError:", &unk_1E7E10AB8, &__block_literal_global_292);
  }
  else
  {
    sgLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_1C3607000, v14, OS_LOG_TYPE_DEBUG, "rebuildFTSWithDetailEntityIDDocIDs: failed. Moving old table back.", buf, 2u);
    }

    -[SGSqlEntityStore _renameTable:to:](self, "_renameTable:to:", CFSTR("entity_fts_docidfix_backup"), CFSTR("entity_fts"));
  }
  v15 = v24[3];

  _Block_object_dispose(&v23, 8);
  return v15;
}

- (int64_t)migration_deleteInteractions
{
  uint64_t v4;
  void *v5;
  void *v6;
  SGSqliteDatabase *db;
  id v8;
  BOOL v9;
  int64_t v10;
  _QWORD v12[5];
  _QWORD v13[5];
  id v14;
  uint64_t *v15;
  uint64_t *v16;
  SEL v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;

  v26 = 0;
  v27 = &v26;
  v28 = 0x2020000000;
  v29 = 4;
  v22 = 0;
  v23 = &v22;
  v24 = 0x2020000000;
  v25 = 0;
  v4 = MEMORY[0x1E0C809B0];
  do
  {
    v5 = (void *)MEMORY[0x1C3BD4F6C]();
    v18 = 0;
    v19 = &v18;
    v20 = 0x2020000000;
    v21 = 0;
    v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", 100);
    db = self->_db;
    v13[0] = v4;
    v13[1] = 3221225472;
    v13[2] = __66__SGSqlEntityStore_DatabaseMigrator__migration_deleteInteractions__block_invoke_2;
    v13[3] = &unk_1E7DB4900;
    v17 = a2;
    v13[4] = self;
    v8 = v6;
    v14 = v8;
    v15 = &v18;
    v16 = &v22;
    v12[0] = v4;
    v12[1] = 3221225472;
    v12[2] = __66__SGSqlEntityStore_DatabaseMigrator__migration_deleteInteractions__block_invoke_302;
    v12[3] = &unk_1E7DB4690;
    v12[4] = &v26;
    -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](db, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("SELECT key FROM emailMetadata WHERE type = :interactionType LIMIT :batchSize"), &__block_literal_global_295, v13, v12);
    v9 = v27[3] == 4
      && (-[SGSqlEntityStore deleteEntitiesByDuplicateKey:emitChangeNotifications:](self, "deleteEntitiesByDuplicateKey:emitChangeNotifications:", v8, 0), v27[3] == 4)&& v19[3] == 100&& (unint64_t)v23[3] >> 4 < 0xC35;

    _Block_object_dispose(&v18, 8);
    objc_autoreleasePoolPop(v5);
  }
  while (v9);
  v10 = v27[3];
  _Block_object_dispose(&v22, 8);
  _Block_object_dispose(&v26, 8);
  return v10;
}

- (int64_t)migration_reimport
{
  return 4;
}

- (int64_t)migration_deleteEmergencyExtractions
{
  return 4;
}

- (int64_t)migration_deleteInternalExtractionsFromML
{
  return 4;
}

- (int64_t)migration_deleteSerializedContacts
{
  void *v3;
  void *v4;
  SGSqliteDatabase *db;
  int64_t v6;
  _QWORD v8[5];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  v9 = 0;
  v10 = &v9;
  v11 = 0x2020000000;
  v12 = 4;
  v3 = (void *)objc_opt_new();
  objc_msgSend(v3, "replaceCacheOfType:block:", 0, &__block_literal_global_305);

  v4 = (void *)objc_opt_new();
  objc_msgSend(v4, "replaceCacheOfType:block:", 1, &__block_literal_global_306);

  db = self->_db;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __72__SGSqlEntityStore_DatabaseMigrator__migration_deleteSerializedContacts__block_invoke_3;
  v8[3] = &unk_1E7DB4690;
  v8[4] = &v9;
  -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](db, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("DELETE FROM serializedContacts"), 0, 0, v8);
  self->_entityMigrationRequiresMergeBlobUpdate = 1;
  v6 = v10[3];
  _Block_object_dispose(&v9, 8);
  return v6;
}

- (int64_t)migration_newRemindersSchema
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  void *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  int64_t v14;
  __int128 v16;
  id obj;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint8_t buf[4];
  void *v23;
  __int16 v24;
  void *v25;
  _BYTE v26[128];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  -[SGSqlEntityStore allEntitiesOfType:limitedTo:onlyMLExtractions:](self, "allEntitiesOfType:limitedTo:onlyMLExtractions:", 22, 10000, 0);
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  obj = (id)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v18, v26, 16);
  if (v3)
  {
    v5 = v3;
    v6 = 0;
    v7 = *(_QWORD *)v19;
    *(_QWORD *)&v4 = 138543618;
    v16 = v4;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v19 != v7)
          objc_enumerationMutation(obj);
        v9 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * i);
        +[SGStorageReminder storageReminderFromEntity:store:](SGStorageReminder, "storageReminderFromEntity:store:", v9, self, v16);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        sgRemindersLogHandle();
        v11 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          objc_msgSend(v9, "loggingIdentifier");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v10, "loggingIdentifier");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = v16;
          v23 = v12;
          v24 = 2114;
          v25 = v13;
          _os_log_impl(&dword_1C3607000, v11, OS_LOG_TYPE_DEFAULT, "Entity %{public}@ -> SGStorageReminder %{public}@", buf, 0x16u);

        }
        v6 |= objc_msgSend(v10, "commitWithStore:", self) < 0;

      }
      v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v18, v26, 16);
    }
    while (v5);
    if ((v6 & 1) != 0)
      v14 = 2;
    else
      v14 = 4;
  }
  else
  {
    v14 = 4;
  }

  return v14;
}

- (int64_t)migration_newContactDetailsSchema
{
  SGSqliteDatabase *db;
  _QWORD v4[5];

  db = self->_db;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __71__SGSqlEntityStore_DatabaseMigrator__migration_newContactDetailsSchema__block_invoke_2;
  v4[3] = &unk_1E7DB6ED0;
  v4[4] = self;
  -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](db, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("SELECT id FROM entity WHERE entityType = :entityType LIMIT :limit"), &__block_literal_global_312_28516, v4, 0);
  return 4;
}

- (int64_t)migration_newEventsSchema
{
  char v3;
  uint64_t v4;
  char v5;
  char v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v3 = 0;
  v4 = 0;
  v19 = *MEMORY[0x1E0C80C00];
  v5 = 1;
  do
  {
    v6 = v5;
    -[SGSqlEntityStore allEntitiesOfType:limitedTo:onlyMLExtractions:](self, "allEntitiesOfType:limitedTo:onlyMLExtractions:", qword_1C385A5D0[v4], 10000, 0);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = 0u;
    v15 = 0u;
    v16 = 0u;
    v17 = 0u;
    v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    if (v8)
    {
      v9 = v8;
      v10 = *(_QWORD *)v15;
      do
      {
        for (i = 0; i != v9; ++i)
        {
          if (*(_QWORD *)v15 != v10)
            objc_enumerationMutation(v7);
          +[SGStorageEvent storageEventFromEntity:](SGStorageEvent, "storageEventFromEntity:", *(_QWORD *)(*((_QWORD *)&v14 + 1) + 8 * i));
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          v3 |= -[SGSqlEntityStore commitEvent:](self, "commitEvent:", v12) < 0;

        }
        v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      }
      while (v9);
    }

    v5 = 0;
    v4 = 1;
  }
  while ((v6 & 1) != 0);
  if ((v3 & 1) != 0)
    return 2;
  else
    return 4;
}

- (int64_t)migration_deleteNilDateEvents
{
  SGSqliteDatabase *db;
  uint64_t v4;
  int64_t v5;
  SGSqliteDatabase *v6;
  _QWORD v8[5];
  _QWORD v9[5];
  _QWORD v10[5];
  _QWORD v11[5];
  _QWORD v12[5];
  id v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;

  v14 = 0;
  v15 = &v14;
  v16 = 0x2020000000;
  v17 = 4;
  v12[0] = 0;
  v12[1] = v12;
  v12[2] = 0x3032000000;
  v12[3] = __Block_byref_object_copy__28501;
  v12[4] = __Block_byref_object_dispose__28502;
  v13 = 0;
  v13 = (id)objc_opt_new();
  db = self->_db;
  v4 = MEMORY[0x1E0C809B0];
  v10[4] = &v14;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __67__SGSqlEntityStore_DatabaseMigrator__migration_deleteNilDateEvents__block_invoke;
  v11[3] = &unk_1E7DB7510;
  v11[4] = v12;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __67__SGSqlEntityStore_DatabaseMigrator__migration_deleteNilDateEvents__block_invoke_2;
  v10[3] = &unk_1E7DB4690;
  -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](db, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("SELECT id, whenRange FROM events"), 0, v11, v10);
  if (v15[3] == 2)
  {
    v5 = 2;
  }
  else
  {
    v6 = self->_db;
    v9[1] = 3221225472;
    v9[2] = __67__SGSqlEntityStore_DatabaseMigrator__migration_deleteNilDateEvents__block_invoke_3;
    v9[3] = &unk_1E7DB46B8;
    v9[4] = v12;
    v8[0] = v4;
    v8[1] = 3221225472;
    v8[2] = __67__SGSqlEntityStore_DatabaseMigrator__migration_deleteNilDateEvents__block_invoke_4;
    v8[3] = &unk_1E7DB4690;
    v8[4] = &v14;
    v9[0] = v4;
    -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](v6, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("DELETE FROM events WHERE id IN _pas_nsarray(:ids)"), v9, 0, v8);
    v5 = v15[3];
  }
  _Block_object_dispose(v12, 8);

  _Block_object_dispose(&v14, 8);
  return v5;
}

- (int64_t)migration_addAppleMailMessageIdToEvents
{
  SGSqliteDatabase *db;
  int64_t v3;
  _QWORD v5[5];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v9 = 4;
  db = self->_db;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __77__SGSqlEntityStore_DatabaseMigrator__migration_addAppleMailMessageIdToEvents__block_invoke_339;
  v5[3] = &unk_1E7DB4690;
  v5[4] = &v6;
  -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](db, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("INSERT INTO eventTags (eventId, name) SELECT events.id, _pas_block(:getAMSGTagBlock, emailMetadata.tags) AS amsgTag FROM events INNER JOIN entityParentage ON events.entityId == entityParentage.childId INNER JOIN emailMetadata ON emailMetadata.key == _pas_block(:getEmailKeyFromDuplicateKeyBlock, entityParentage.parentKey) WHERE amsgTag IS NOT NULL RETURNING eventId, name"), &__block_literal_global_326, &__block_literal_global_336, v5);
  v3 = v7[3];
  _Block_object_dispose(&v6, 8);
  return v3;
}

uint64_t __77__SGSqlEntityStore_DatabaseMigrator__migration_addAppleMailMessageIdToEvents__block_invoke_339(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  int v6;
  id v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 2;
  sgLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
  {
    v6 = 138412290;
    v7 = v3;
    _os_log_fault_impl(&dword_1C3607000, v4, OS_LOG_TYPE_FAULT, "migration_addAppleMailMessageIdToEvents failed: %@", (uint8_t *)&v6, 0xCu);
  }

  if (_PASEvaluateLogFaultAndProbCrashCriteria())
    abort();

  return *MEMORY[0x1E0D81788];
}

uint64_t __77__SGSqlEntityStore_DatabaseMigrator__migration_addAppleMailMessageIdToEvents__block_invoke_5(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  void *v4;
  void *v5;
  int v7;
  void *v8;
  __int16 v9;
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  sgLogHandle();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    objc_msgSend(v2, "nonnullNSStringForColumnName:table:", "name", "eventTags");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "nonnullNSStringForColumnName:table:", "eventId", "eventTags");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = 138543618;
    v8 = v4;
    v9 = 2114;
    v10 = v5;
    _os_log_impl(&dword_1C3607000, v3, OS_LOG_TYPE_DEFAULT, "migration_addAppleMailMessageIdToEvents: Adding tag %{public}@ to event %{public}@", (uint8_t *)&v7, 0x16u);

  }
  return *MEMORY[0x1E0D81780];
}

void __77__SGSqlEntityStore_DatabaseMigrator__migration_addAppleMailMessageIdToEvents__block_invoke(uint64_t a1, void *a2)
{
  id v2;

  v2 = a2;
  objc_msgSend(v2, "bindNamedParam:toBlock:", ":getAMSGTagBlock", &__block_literal_global_329);
  objc_msgSend(v2, "bindNamedParam:toBlock:", ":getEmailKeyFromDuplicateKeyBlock", &__block_literal_global_335);

}

id __77__SGSqlEntityStore_DatabaseMigrator__migration_addAppleMailMessageIdToEvents__block_invoke_4(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  char isKindOfClass;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v2 = a2;
  objc_msgSend(v2, "objectAtIndexedSubscript:", 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();

  if ((isKindOfClass & 1) != 0)
  {
    objc_msgSend(v2, "objectAtIndexedSubscript:", 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    SGDelimitedStringsDeserialize();
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    if ((objc_msgSend(v6, "count") == 2 || objc_msgSend(v6, "count") == 3)
      && (objc_msgSend(v6, "objectAtIndexedSubscript:", 0),
          v7 = (void *)objc_claimAutoreleasedReturnValue(),
          v8 = objc_msgSend(v7, "integerValue"),
          v7,
          v8 == 5))
    {
      objc_msgSend(v6, "objectAtIndexedSubscript:", 1);
      v9 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0C99E38], "null");
      v9 = objc_claimAutoreleasedReturnValue();
    }
    v10 = (void *)v9;

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99E38], "null");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v10;
}

id __77__SGSqlEntityStore_DatabaseMigrator__migration_addAppleMailMessageIdToEvents__block_invoke_2(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  char isKindOfClass;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  void (*v14)(uint64_t);
  id v15;

  v2 = a2;
  objc_msgSend(v2, "objectAtIndexedSubscript:", 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();

  if ((isKindOfClass & 1) != 0)
  {
    v10 = 0;
    v11 = &v10;
    v12 = 0x3032000000;
    v13 = __Block_byref_object_copy__28501;
    v14 = __Block_byref_object_dispose__28502;
    v15 = 0;
    objc_msgSend(v2, "objectAtIndexedSubscript:", 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    SGDelimitedStringsDeserializeWithBlock();

    v6 = (void *)v11[5];
    if (v6)
    {
      v7 = v6;
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0C99E38], "null");
      v7 = (id)objc_claimAutoreleasedReturnValue();
    }
    v8 = v7;
    _Block_object_dispose(&v10, 8);

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99E38], "null");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v8;
}

void __77__SGSqlEntityStore_DatabaseMigrator__migration_addAppleMailMessageIdToEvents__block_invoke_3(uint64_t a1, void *a2)
{
  id v4;

  v4 = a2;
  if (objc_msgSend(v4, "hasPrefix:", CFSTR("AMSG:")))
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);

}

uint64_t __67__SGSqlEntityStore_DatabaseMigrator__migration_deleteNilDateEvents__block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  double v7;
  double v8;
  void *v9;
  double v10;
  double v11;
  uint64_t v12;
  void *v13;
  void *v14;

  v3 = a2;
  objc_msgSend(v3, "getNSStringForColumnName:table:", "whenRange", "events");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  SGDelimitedStringsDeserialize();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v5, "count") != 4)
    goto LABEL_4;
  objc_msgSend(v5, "objectAtIndexedSubscript:", 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "doubleValue");
  v8 = v7;

  objc_msgSend(v5, "objectAtIndexedSubscript:", 2);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "doubleValue");
  v11 = v10;

  if (v8 == 0.0 || v11 == 0.0)
  {
LABEL_4:
    v12 = objc_msgSend(v3, "getInt64ForColumnName:table:", "id", "events");
    v13 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v12);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "addObject:", v14);

  }
  return 0;
}

uint64_t __67__SGSqlEntityStore_DatabaseMigrator__migration_deleteNilDateEvents__block_invoke_2(uint64_t a1)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 2;
  return 1;
}

uint64_t __67__SGSqlEntityStore_DatabaseMigrator__migration_deleteNilDateEvents__block_invoke_3(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "bindNamedParam:toNSArray:", ":ids", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40));
}

uint64_t __67__SGSqlEntityStore_DatabaseMigrator__migration_deleteNilDateEvents__block_invoke_4(uint64_t a1)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 2;
  return 1;
}

uint64_t __71__SGSqlEntityStore_DatabaseMigrator__migration_newContactDetailsSchema__block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = objc_msgSend(a2, "getInt64ForColumn:", 0);
  v4 = *(void **)(a1 + 32);
  objc_msgSend(MEMORY[0x1E0D19920], "recordIdWithInternalEntityId:", v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "loadAllContactDetailsForRecordId:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v7 = v6;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v14;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v14 != v10)
          objc_enumerationMutation(v7);
        objc_msgSend(*(id *)(a1 + 32), "commitContactDetail:", *(_QWORD *)(*((_QWORD *)&v13 + 1) + 8 * v11++), (_QWORD)v13);
      }
      while (v9 != v11);
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v9);
  }

  return 0;
}

void __71__SGSqlEntityStore_DatabaseMigrator__migration_newContactDetailsSchema__block_invoke(uint64_t a1, void *a2)
{
  id v2;

  v2 = a2;
  objc_msgSend(v2, "bindNamedParam:toInt64:", ":entityType", 4);
  objc_msgSend(v2, "bindNamedParam:toInt64:", ":limit", 10000);

}

uint64_t __72__SGSqlEntityStore_DatabaseMigrator__migration_deleteSerializedContacts__block_invoke_3(uint64_t a1)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 2;
  return 1;
}

uint64_t __72__SGSqlEntityStore_DatabaseMigrator__migration_deleteSerializedContacts__block_invoke_2()
{
  return 1;
}

uint64_t __72__SGSqlEntityStore_DatabaseMigrator__migration_deleteSerializedContacts__block_invoke()
{
  return 1;
}

uint64_t __66__SGSqlEntityStore_DatabaseMigrator__migration_deleteInteractions__block_invoke_2(uint64_t a1, sqlite3_stmt *a2)
{
  void *v3;
  SGInteractionKey *v4;
  SGDuplicateKey *v5;
  void *v7;
  uint8_t buf[16];

  sqlite3_column_nsstring(a2, 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v3)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "handleFailureInMethod:object:file:lineNumber:description:", *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 32), CFSTR("SGSqlEntityStore+DatabaseMigrator.m"), 1523, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("serializedInteractionKey"));

  }
  v4 = -[SGMessageKey initWithSerialized:]([SGInteractionKey alloc], "initWithSerialized:", v3);
  if (v4)
  {
    v5 = -[SGDuplicateKey initWithEntityKey:entityType:parentKey:]([SGDuplicateKey alloc], "initWithEntityKey:entityType:parentKey:", v4, 16, 0);
    objc_msgSend(*(id *)(a1 + 40), "addObject:", v5);
  }
  else
  {
    sgLogHandle();
    v5 = (SGDuplicateKey *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(&v5->super, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1C3607000, &v5->super, OS_LOG_TYPE_DEFAULT, "discarding ill-formatted serialized interaction key", buf, 2u);
    }
  }

  ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
  ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);

  return 0;
}

uint64_t __66__SGSqlEntityStore_DatabaseMigrator__migration_deleteInteractions__block_invoke_302(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  int v6;
  id v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  sgLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    v6 = 138412290;
    v7 = v3;
    _os_log_error_impl(&dword_1C3607000, v4, OS_LOG_TYPE_ERROR, "Error during migration_deleteInteractions: %@", (uint8_t *)&v6, 0xCu);
  }

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 2;
  return 1;
}

uint64_t __66__SGSqlEntityStore_DatabaseMigrator__migration_deleteInteractions__block_invoke(uint64_t a1, uint64_t a2)
{
  +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":interactionType", 16);
  return +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":batchSize", 100);
}

BOOL __82__SGSqlEntityStore_DatabaseMigrator__migration_rebuildFTSWithDetailEntityIDDocIDs__block_invoke(_QWORD *a1, sqlite3_stmt *a2)
{
  void *v4;
  void *v5;
  void *v6;
  sqlite3_int64 v7;
  sqlite3_int64 v8;
  void *v9;
  sqlite3_int64 v10;
  void *v11;
  void *v12;
  SGPseudoContactKey *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  void *v22;
  sqlite3_int64 v23;
  void *v24;
  _QWORD v25[5];
  id v26;
  id v27;
  uint64_t v28;
  sqlite3_int64 v29;
  sqlite3_int64 v30;
  sqlite3_int64 v31;

  v4 = (void *)MEMORY[0x1C3BD4F6C]();
  v5 = (void *)objc_opt_new();
  v6 = (void *)objc_opt_new();
  v7 = sqlite3_column_int64(a2, 0);
  v8 = sqlite3_column_int64(a2, 1);
  sqlite3_column_nsstring(a2, 2);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = sqlite3_column_int64(a2, 3);
  if ((unint64_t)(v8 - 7) < 2)
  {
    if (objc_msgSend(v9, "length"))
      objc_msgSend(v6, "addObject:", v9);
  }
  else if (v8 == 4)
  {
    if (objc_msgSend(v9, "length"))
      objc_msgSend(v5, "addObject:", v9);
    v23 = v7;
    v24 = v4;
    sqlite3_column_nsstring(a2, 4);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v12)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "handleFailureInMethod:object:file:lineNumber:description:", a1[7], a1[4], CFSTR("SGSqlEntityStore+DatabaseMigrator.m"), 1424, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("serializedEntityKey"));

    }
    v13 = -[SGPseudoContactKey initWithSerialized:]([SGPseudoContactKey alloc], "initWithSerialized:", v12);
    -[SGPseudoContactKey identityKey](v13, "identityKey");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "uniqueIdentifier");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "addObject:", v15);

    v7 = v23;
    v4 = v24;
  }
  else if (v8 == 6 && (objc_msgSend(v9, "containsString:", CFSTR(";")) & 1) == 0 && a1[5])
  {
    v11 = (void *)_PNCopyIndexStringsForAddressBookSearch();
    if (v11)
      objc_msgSend(v5, "addObjectsFromArray:", v11);

  }
  v16 = objc_msgSend(v5, "count");
  if (v16 + objc_msgSend(v6, "count"))
  {
    v17 = a1[4];
    v18 = *(void **)(v17 + 8);
    v25[0] = MEMORY[0x1E0C809B0];
    v25[1] = 3221225472;
    v25[2] = __82__SGSqlEntityStore_DatabaseMigrator__migration_rebuildFTSWithDetailEntityIDDocIDs__block_invoke_2;
    v25[3] = &unk_1E7DB4870;
    v25[4] = v17;
    v29 = v7;
    v30 = v8;
    v31 = v10;
    v26 = v5;
    v19 = v6;
    v20 = a1[6];
    v27 = v19;
    v28 = v20;
    objc_msgSend(v18, "writeTransaction:", v25);

  }
  objc_autoreleasePoolPop(v4);
  return *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24) != 4;
}

uint64_t __82__SGSqlEntityStore_DatabaseMigrator__migration_rebuildFTSWithDetailEntityIDDocIDs__block_invoke_286(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  int v6;
  id v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  sgLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    v6 = 138412290;
    v7 = v3;
    _os_log_error_impl(&dword_1C3607000, v4, OS_LOG_TYPE_ERROR, "Error during rebuildFTSWithDetailEntityIDDocIDs: %@", (uint8_t *)&v6, 0xCu);
  }

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 2;
  return 1;
}

uint64_t __82__SGSqlEntityStore_DatabaseMigrator__migration_rebuildFTSWithDetailEntityIDDocIDs__block_invoke_291(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  int v5;
  id v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  sgLogHandle();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    v5 = 138412290;
    v6 = v2;
    _os_log_error_impl(&dword_1C3607000, v3, OS_LOG_TYPE_ERROR, "failed to drop backup table: entity_fts_docidfix_backup: %@", (uint8_t *)&v5, 0xCu);
  }

  return 1;
}

void __82__SGSqlEntityStore_DatabaseMigrator__migration_rebuildFTSWithDetailEntityIDDocIDs__block_invoke_2(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  _QWORD v5[5];
  _QWORD v6[4];
  id v7;
  id v8;
  __int128 v9;
  uint64_t v10;

  v2 = *(void **)(a1 + 40);
  v3 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v6[2] = __82__SGSqlEntityStore_DatabaseMigrator__migration_rebuildFTSWithDetailEntityIDDocIDs__block_invoke_3;
  v6[3] = &unk_1E7DB4848;
  v10 = *(_QWORD *)(a1 + 80);
  v4 = MEMORY[0x1E0C809B0];
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v9 = *(_OWORD *)(a1 + 64);
  v7 = v2;
  v8 = *(id *)(a1 + 48);
  v5[0] = v4;
  v5[1] = 3221225472;
  v5[2] = __82__SGSqlEntityStore_DatabaseMigrator__migration_rebuildFTSWithDetailEntityIDDocIDs__block_invoke_4;
  v5[3] = &unk_1E7DB4690;
  v5[4] = *(_QWORD *)(a1 + 56);
  objc_msgSend(v3, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("INSERT OR REPLACE INTO entity_fts(docid, entityId, messagingTerms, ftsTerms) VALUES(?, ?, ?, ?)"), v6, 0, v5);

}

void __82__SGSqlEntityStore_DatabaseMigrator__migration_rebuildFTSWithDetailEntityIDDocIDs__block_invoke_3(uint64_t a1, sqlite3_stmt *a2)
{
  int IsContactDetail;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;

  sqlite3_bind_int64(a2, 1, *(_QWORD *)(a1 + 48));
  IsContactDetail = SGEntityTypeIsContactDetail();
  v5 = 48;
  if (IsContactDetail)
    v5 = 64;
  sqlite3_bind_int64(a2, 2, *(_QWORD *)(a1 + v5));
  objc_msgSend(*(id *)(a1 + 32), "_pas_componentsJoinedByString:", CFSTR(" "));
  v6 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  sqlite3_bind_text(a2, 3, (const char *)objc_msgSend(v6, "UTF8String"), -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);

  v7 = *(void **)(a1 + 40);
  if (v7)
  {
    objc_msgSend(v7, "_pas_componentsJoinedByString:", CFSTR(" "));
    v8 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    sqlite3_bind_text(a2, 4, (const char *)objc_msgSend(v8, "UTF8String"), -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);

  }
  else
  {
    sqlite3_bind_null(a2, 4);
  }
}

uint64_t __82__SGSqlEntityStore_DatabaseMigrator__migration_rebuildFTSWithDetailEntityIDDocIDs__block_invoke_4(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  int v6;
  id v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  sgLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    v6 = 138412290;
    v7 = v3;
    _os_log_error_impl(&dword_1C3607000, v4, OS_LOG_TYPE_ERROR, "Erroring trying to reinsert FTS row: %@", (uint8_t *)&v6, 0xCu);
  }

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 2;
  return 1;
}

BOOL __71__SGSqlEntityStore_DatabaseMigrator__migration_separateMessageSnippets__block_invoke(uint64_t a1, sqlite3_stmt *a2)
{
  sqlite3_int64 v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  _QWORD v9[5];
  _QWORD v10[5];
  _QWORD v11[5];
  _QWORD v12[5];

  v3 = sqlite3_column_int64(a2, 0);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(void **)(*(_QWORD *)(a1 + 32) + 24);
  v6 = MEMORY[0x1E0C809B0];
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __71__SGSqlEntityStore_DatabaseMigrator__migration_separateMessageSnippets__block_invoke_2;
  v12[3] = &__block_descriptor_40_e23_v16__0__sqlite3_stmt__8l;
  v12[4] = v3;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __71__SGSqlEntityStore_DatabaseMigrator__migration_separateMessageSnippets__block_invoke_3;
  v11[3] = &unk_1E7DB4690;
  v11[4] = v4;
  objc_msgSend(v5, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("INSERT INTO emailSnippets (emailId, title, content) SELECT entityId, title, content FROM snippets WHERE entityId = :rowId"), v12, 0, v11);
  v7 = *(void **)(*(_QWORD *)(a1 + 32) + 24);
  v9[4] = *(_QWORD *)(a1 + 40);
  v10[0] = v6;
  v10[1] = 3221225472;
  v10[2] = __71__SGSqlEntityStore_DatabaseMigrator__migration_separateMessageSnippets__block_invoke_268;
  v10[3] = &__block_descriptor_40_e23_v16__0__sqlite3_stmt__8l;
  v10[4] = v3;
  v9[0] = v6;
  v9[1] = 3221225472;
  v9[2] = __71__SGSqlEntityStore_DatabaseMigrator__migration_separateMessageSnippets__block_invoke_2_269;
  v9[3] = &unk_1E7DB4690;
  objc_msgSend(v7, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("DELETE FROM snippets WHERE entityId = :rowId"), v10, 0, v9);
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) != 4;
}

uint64_t __71__SGSqlEntityStore_DatabaseMigrator__migration_separateMessageSnippets__block_invoke_270(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  int v6;
  id v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  sgLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    v6 = 138412290;
    v7 = v3;
    _os_log_error_impl(&dword_1C3607000, v4, OS_LOG_TYPE_ERROR, "Error selecting source document ids from emailMetadata: %@", (uint8_t *)&v6, 0xCu);
  }

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 2;
  return 1;
}

uint64_t __71__SGSqlEntityStore_DatabaseMigrator__migration_separateMessageSnippets__block_invoke_2(uint64_t a1, uint64_t a2)
{
  return +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":rowId", *(_QWORD *)(a1 + 32));
}

uint64_t __71__SGSqlEntityStore_DatabaseMigrator__migration_separateMessageSnippets__block_invoke_3(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  int v6;
  id v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  sgLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    v6 = 138412290;
    v7 = v3;
    _os_log_error_impl(&dword_1C3607000, v4, OS_LOG_TYPE_ERROR, "Unable to populate source document snippets in emailSnippets: %@", (uint8_t *)&v6, 0xCu);
  }

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 2;
  return 1;
}

uint64_t __71__SGSqlEntityStore_DatabaseMigrator__migration_separateMessageSnippets__block_invoke_268(uint64_t a1, uint64_t a2)
{
  return +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":rowId", *(_QWORD *)(a1 + 32));
}

uint64_t __71__SGSqlEntityStore_DatabaseMigrator__migration_separateMessageSnippets__block_invoke_2_269(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  int v6;
  id v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  sgLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    v6 = 138412290;
    v7 = v3;
    _os_log_error_impl(&dword_1C3607000, v4, OS_LOG_TYPE_ERROR, "Unable to delete source document snippets from legacy table: %@", (uint8_t *)&v6, 0xCu);
  }

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 2;
  return 1;
}

uint64_t __71__SGSqlEntityStore_DatabaseMigrator__migration_separateMessageEntities__block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  int v6;
  id v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  sgLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    v6 = 138412290;
    v7 = v3;
    _os_log_error_impl(&dword_1C3607000, v4, OS_LOG_TYPE_ERROR, "Unable to copy entities into emailMetadata: %@", (uint8_t *)&v6, 0xCu);
  }

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 2;
  return 1;
}

uint64_t __71__SGSqlEntityStore_DatabaseMigrator__migration_separateMessageEntities__block_invoke_2_250(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  int v6;
  id v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  sgLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    v6 = 138412290;
    v7 = v3;
    _os_log_error_impl(&dword_1C3607000, v4, OS_LOG_TYPE_ERROR, "Unable to deparent source documents found in entityParentage: %@", (uint8_t *)&v6, 0xCu);
  }

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 2;
  return 1;
}

uint64_t __71__SGSqlEntityStore_DatabaseMigrator__migration_separateMessageEntities__block_invoke_2_255(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  int v6;
  id v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  sgLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    v6 = 138412290;
    v7 = v3;
    _os_log_error_impl(&dword_1C3607000, v4, OS_LOG_TYPE_ERROR, "Unable to delete source documents from entity table: %@", (uint8_t *)&v6, 0xCu);
  }

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 2;
  return 1;
}

uint64_t __71__SGSqlEntityStore_DatabaseMigrator__migration_separateMessageEntities__block_invoke_2_260(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  int v6;
  id v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  sgLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    v6 = 138412290;
    v7 = v3;
    _os_log_error_impl(&dword_1C3607000, v4, OS_LOG_TYPE_ERROR, "Unable to populate source document tags: %@", (uint8_t *)&v6, 0xCu);
  }

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 2;
  return 1;
}

uint64_t __71__SGSqlEntityStore_DatabaseMigrator__migration_separateMessageEntities__block_invoke_258(uint64_t a1, uint64_t a2)
{
  +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":email", 5);
  return +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":textMessage", 13);
}

uint64_t __71__SGSqlEntityStore_DatabaseMigrator__migration_separateMessageEntities__block_invoke_253(uint64_t a1, uint64_t a2)
{
  +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":email", 5);
  return +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":textMessage", 13);
}

uint64_t __71__SGSqlEntityStore_DatabaseMigrator__migration_separateMessageEntities__block_invoke_248(uint64_t a1, uint64_t a2)
{
  +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":email", 5);
  return +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":textMessage", 13);
}

uint64_t __71__SGSqlEntityStore_DatabaseMigrator__migration_separateMessageEntities__block_invoke(uint64_t a1, uint64_t a2)
{
  +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":email", 5);
  return +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":textMessage", 13);
}

uint64_t __64__SGSqlEntityStore_DatabaseMigrator__migration_FixupMergeGroups__block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  int v6;
  id v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  sgLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    v6 = 138412290;
    v7 = v3;
    _os_log_error_impl(&dword_1C3607000, v4, OS_LOG_TYPE_ERROR, "Unable to clear masterEntityIds from migration_FixupMergeGroups: %@", (uint8_t *)&v6, 0xCu);
  }

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 2;
  return 1;
}

uint64_t __64__SGSqlEntityStore_DatabaseMigrator__migration_FixupMergeGroups__block_invoke(uint64_t a1, uint64_t a2)
{
  +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":pseudo", 4);
  return +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":unrec", 12);
}

uint64_t __85__SGSqlEntityStore_DatabaseMigrator__migration_DropMessagingTermsWithPhoneExtensions__block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  int v6;
  id v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  sgLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    v6 = 138412290;
    v7 = v3;
    _os_log_error_impl(&dword_1C3607000, v4, OS_LOG_TYPE_ERROR, "Unable to delete messaging terms with semicolons. Error: %@", (uint8_t *)&v6, 0xCu);
  }

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 2;
  return 1;
}

uint64_t __85__SGSqlEntityStore_DatabaseMigrator__migration_DropMessagingTermsWithPhoneExtensions__block_invoke(uint64_t a1, uint64_t a2)
{
  return +[SGSqliteDatabase bindParam:name:nsstring:](SGSqliteDatabase, "bindParam:name:nsstring:", a2, ":semicolon", CFSTR("*[0-9;];[0-9;]*"));
}

uint64_t __84__SGSqlEntityStore_DatabaseMigrator__migration_ConvertContentAndDupKeyHashesToBlobs__block_invoke(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  id v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  sgLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    v6 = *(_QWORD *)(a1 + 32);
    v7 = 138412546;
    v8 = v6;
    v9 = 2112;
    v10 = v3;
    _os_log_error_impl(&dword_1C3607000, v4, OS_LOG_TYPE_ERROR, "Unable to set blob value in migration query: %@: Error: %@", (uint8_t *)&v7, 0x16u);
  }

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 2;
  return 1;
}

uint64_t __73__SGSqlEntityStore_DatabaseMigrator__migration_DeduplicateIdentityPhones__block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t result;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  _QWORD v12[5];
  _QWORD v13[5];
  _QWORD v14[5];
  _QWORD v15[5];

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("DROP TABLE IF EXISTS identityPhonesDeduped"), 0, 0, 0);
  v2 = MEMORY[0x1E0C809B0];
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = __73__SGSqlEntityStore_DatabaseMigrator__migration_DeduplicateIdentityPhones__block_invoke_2;
  v15[3] = &unk_1E7DB4690;
  v15[4] = v3;
  result = objc_msgSend(v4, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("CREATE TEMP TABLE identityPhonesDeduped AS SELECT DISTINCT * FROM identityPhones"), 0, 0, v15);
  v6 = *(_QWORD *)(a1 + 40);
  if (*(_QWORD *)(*(_QWORD *)(v6 + 8) + 24) == 4)
  {
    v7 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
    v14[0] = v2;
    v14[1] = 3221225472;
    v14[2] = __73__SGSqlEntityStore_DatabaseMigrator__migration_DeduplicateIdentityPhones__block_invoke_214;
    v14[3] = &unk_1E7DB4690;
    v14[4] = v6;
    result = objc_msgSend(v7, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("DELETE FROM identityPhones"), 0, 0, v14);
    v8 = *(_QWORD *)(a1 + 40);
    if (*(_QWORD *)(*(_QWORD *)(v8 + 8) + 24) == 4)
    {
      v9 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
      v13[0] = v2;
      v13[1] = 3221225472;
      v13[2] = __73__SGSqlEntityStore_DatabaseMigrator__migration_DeduplicateIdentityPhones__block_invoke_217;
      v13[3] = &unk_1E7DB4690;
      v13[4] = v8;
      result = objc_msgSend(v9, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("INSERT INTO identityPhones SELECT * FROM identityPhonesDeduped"), 0, 0, v13);
      v10 = *(_QWORD *)(a1 + 40);
      if (*(_QWORD *)(*(_QWORD *)(v10 + 8) + 24) == 4)
      {
        v11 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
        v12[0] = v2;
        v12[1] = 3221225472;
        v12[2] = __73__SGSqlEntityStore_DatabaseMigrator__migration_DeduplicateIdentityPhones__block_invoke_220;
        v12[3] = &unk_1E7DB4690;
        v12[4] = v10;
        return objc_msgSend(v11, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("DROP TABLE identityPhonesDeduped"), 0, 0, v12);
      }
    }
  }
  return result;
}

uint64_t __73__SGSqlEntityStore_DatabaseMigrator__migration_DeduplicateIdentityPhones__block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  int v6;
  id v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  sgLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    v6 = 138412290;
    v7 = v3;
    _os_log_error_impl(&dword_1C3607000, v4, OS_LOG_TYPE_ERROR, "Unable to create deduplicated identityPhones table: %@", (uint8_t *)&v6, 0xCu);
  }

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 2;
  return 1;
}

uint64_t __73__SGSqlEntityStore_DatabaseMigrator__migration_DeduplicateIdentityPhones__block_invoke_214(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  int v6;
  id v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  sgLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    v6 = 138412290;
    v7 = v3;
    _os_log_error_impl(&dword_1C3607000, v4, OS_LOG_TYPE_ERROR, "Unable to clear identityPhones table during deduplication: %@", (uint8_t *)&v6, 0xCu);
  }

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 2;
  return 1;
}

uint64_t __73__SGSqlEntityStore_DatabaseMigrator__migration_DeduplicateIdentityPhones__block_invoke_217(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  int v6;
  id v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  sgLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    v6 = 138412290;
    v7 = v3;
    _os_log_error_impl(&dword_1C3607000, v4, OS_LOG_TYPE_ERROR, "Unable to rewrite identityPhones table during deduplication: %@", (uint8_t *)&v6, 0xCu);
  }

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 2;
  return 1;
}

uint64_t __73__SGSqlEntityStore_DatabaseMigrator__migration_DeduplicateIdentityPhones__block_invoke_220(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  int v6;
  id v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  sgLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    v6 = 138412290;
    v7 = v3;
    _os_log_error_impl(&dword_1C3607000, v4, OS_LOG_TYPE_ERROR, "Unable to remove identityPhones table during deduplication: %@", (uint8_t *)&v6, 0xCu);
  }

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 2;
  return 1;
}

uint64_t __105__SGSqlEntityStore_DatabaseMigrator__migration_FixUpColumnsForDevicesWhoMissedTheImprovedLegacyMigration__block_invoke(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  int v6;
  id v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  sgLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    v6 = 138412290;
    v7 = v3;
    _os_log_error_impl(&dword_1C3607000, v4, OS_LOG_TYPE_ERROR, "Unable to add downloadState column during legacy migration: %@", (uint8_t *)&v6, 0xCu);
  }

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 2;
  return 1;
}

uint64_t __105__SGSqlEntityStore_DatabaseMigrator__migration_FixUpColumnsForDevicesWhoMissedTheImprovedLegacyMigration__block_invoke_177(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  int v6;
  id v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  sgLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    v6 = 138412290;
    v7 = v3;
    _os_log_error_impl(&dword_1C3607000, v4, OS_LOG_TYPE_ERROR, "Unable to add entityDownloadStateIdx index during legacy migration: %@", (uint8_t *)&v6, 0xCu);
  }

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 2;
  return 1;
}

uint64_t __105__SGSqlEntityStore_DatabaseMigrator__migration_FixUpColumnsForDevicesWhoMissedTheImprovedLegacyMigration__block_invoke_182(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  int v6;
  id v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  sgLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    v6 = 138412290;
    v7 = v3;
    _os_log_error_impl(&dword_1C3607000, v4, OS_LOG_TYPE_ERROR, "Unable to add contentHash column during legacy migration: %@", (uint8_t *)&v6, 0xCu);
  }

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 2;
  return 1;
}

uint64_t __105__SGSqlEntityStore_DatabaseMigrator__migration_FixUpColumnsForDevicesWhoMissedTheImprovedLegacyMigration__block_invoke_187(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  int v6;
  id v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  sgLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    v6 = 138412290;
    v7 = v3;
    _os_log_error_impl(&dword_1C3607000, v4, OS_LOG_TYPE_ERROR, "Unable to add entityContentHashIdx index during legacy migration: %@", (uint8_t *)&v6, 0xCu);
  }

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 2;
  return 1;
}

uint64_t __105__SGSqlEntityStore_DatabaseMigrator__migration_FixUpColumnsForDevicesWhoMissedTheImprovedLegacyMigration__block_invoke_192(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  int v6;
  id v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  sgLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    v6 = 138412290;
    v7 = v3;
    _os_log_error_impl(&dword_1C3607000, v4, OS_LOG_TYPE_ERROR, "Unable to add groupId column during legacy migration: %@", (uint8_t *)&v6, 0xCu);
  }

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 2;
  return 1;
}

uint64_t __105__SGSqlEntityStore_DatabaseMigrator__migration_FixUpColumnsForDevicesWhoMissedTheImprovedLegacyMigration__block_invoke_197(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  int v6;
  id v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  sgLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    v6 = 138412290;
    v7 = v3;
    _os_log_error_impl(&dword_1C3607000, v4, OS_LOG_TYPE_ERROR, "Unable to add groupIdIdx index during legacy migration: %@", (uint8_t *)&v6, 0xCu);
  }

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 2;
  return 1;
}

uint64_t __105__SGSqlEntityStore_DatabaseMigrator__migration_FixUpColumnsForDevicesWhoMissedTheImprovedLegacyMigration__block_invoke_202(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  int v6;
  id v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  sgLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    v6 = 138412290;
    v7 = v3;
    _os_log_error_impl(&dword_1C3607000, v4, OS_LOG_TYPE_ERROR, "Unable to add duplicateKeyHash column during legacy migration: %@", (uint8_t *)&v6, 0xCu);
  }

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 2;
  return 1;
}

uint64_t __105__SGSqlEntityStore_DatabaseMigrator__migration_FixUpColumnsForDevicesWhoMissedTheImprovedLegacyMigration__block_invoke_207(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  int v6;
  id v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  sgLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    v6 = 138412290;
    v7 = v3;
    _os_log_error_impl(&dword_1C3607000, v4, OS_LOG_TYPE_ERROR, "Unable to add ix_entityTags_dupKeyHash index during legacy migration: %@", (uint8_t *)&v6, 0xCu);
  }

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 2;
  return 1;
}

uint64_t __72__SGSqlEntityStore_DatabaseMigrator__migration_AddNewishTablesIfMissing__block_invoke(uint64_t a1)
{
  NSObject *v2;
  uint8_t v4[16];

  sgLogHandle();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v4 = 0;
    _os_log_error_impl(&dword_1C3607000, v2, OS_LOG_TYPE_ERROR, "needed to add entityParentage table but failed", v4, 2u);
  }

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 2;
  return 1;
}

uint64_t __72__SGSqlEntityStore_DatabaseMigrator__migration_AddNewishTablesIfMissing__block_invoke_159(uint64_t a1)
{
  NSObject *v2;
  uint8_t v4[16];

  sgLogHandle();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v4 = 0;
    _os_log_error_impl(&dword_1C3607000, v2, OS_LOG_TYPE_ERROR, "needed to add serializedContacts table but failed", v4, 2u);
  }

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 2;
  return 1;
}

uint64_t __72__SGSqlEntityStore_DatabaseMigrator__migration_AddNewishTablesIfMissing__block_invoke_168(uint64_t a1)
{
  NSObject *v2;
  uint8_t v4[16];

  sgLogHandle();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v4 = 0;
    _os_log_error_impl(&dword_1C3607000, v2, OS_LOG_TYPE_ERROR, "needed to add cnContactsToSgContacts table but failed", v4, 2u);
  }

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 2;
  return 1;
}

uint64_t __72__SGSqlEntityStore_DatabaseMigrator__migration_AddAuthorColumnIfMissing__block_invoke(uint64_t a1)
{
  NSObject *v2;
  uint8_t v4[16];

  sgLogHandle();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v4 = 0;
    _os_log_error_impl(&dword_1C3607000, v2, OS_LOG_TYPE_ERROR, "needed to add author column but failed", v4, 2u);
  }

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 2;
  return 1;
}

void __69__SGSqlEntityStore_DatabaseMigrator__migration_MoveContentToSnippets__block_invoke(uint64_t a1, uint64_t a2)
{
  id v3;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "filename");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  +[SGSqliteDatabase bindParam:name:nsstring:](SGSqliteDatabase, "bindParam:name:nsstring:", a2, ":snippetPath", v3);

}

uint64_t __69__SGSqlEntityStore_DatabaseMigrator__migration_MoveContentToSnippets__block_invoke_2(uint64_t a1)
{
  NSObject *v2;
  uint8_t v4[16];

  sgLogHandle();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v4 = 0;
    _os_log_error_impl(&dword_1C3607000, v2, OS_LOG_TYPE_ERROR, "unable to attach snippets in order to migrate content data", v4, 2u);
  }

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 2;
  return 1;
}

uint64_t __69__SGSqlEntityStore_DatabaseMigrator__migration_MoveContentToSnippets__block_invoke_2_123(uint64_t a1)
{
  NSObject *v2;
  uint8_t v4[16];

  sgLogHandle();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v4 = 0;
    _os_log_error_impl(&dword_1C3607000, v2, OS_LOG_TYPE_ERROR, "unable to copy email snippets during content migration", v4, 2u);
  }

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 2;
  return 1;
}

uint64_t __69__SGSqlEntityStore_DatabaseMigrator__migration_MoveContentToSnippets__block_invoke_2_128(uint64_t a1)
{
  NSObject *v2;
  uint8_t v4[16];

  sgLogHandle();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v4 = 0;
    _os_log_error_impl(&dword_1C3607000, v2, OS_LOG_TYPE_ERROR, "unable to copy non-email snippets during content migration", v4, 2u);
  }

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 2;
  return 1;
}

uint64_t __69__SGSqlEntityStore_DatabaseMigrator__migration_MoveContentToSnippets__block_invoke_131(uint64_t a1)
{
  NSObject *v2;
  uint8_t v4[16];

  sgLogHandle();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v4 = 0;
    _os_log_error_impl(&dword_1C3607000, v2, OS_LOG_TYPE_ERROR, "unable to erase content data from entities during content migration", v4, 2u);
  }

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 2;
  return 1;
}

uint64_t __69__SGSqlEntityStore_DatabaseMigrator__migration_MoveContentToSnippets__block_invoke_2_136(uint64_t a1)
{
  NSObject *v2;
  uint8_t v4[16];

  sgLogHandle();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v4 = 0;
    _os_log_error_impl(&dword_1C3607000, v2, OS_LOG_TYPE_ERROR, "unable to erase title data from email entities during content migration", v4, 2u);
  }

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 2;
  return 1;
}

uint64_t __69__SGSqlEntityStore_DatabaseMigrator__migration_MoveContentToSnippets__block_invoke_134(int a1, sqlite3_stmt *a2)
{
  return sqlite3_bind_int64(a2, 1, 5);
}

uint64_t __69__SGSqlEntityStore_DatabaseMigrator__migration_MoveContentToSnippets__block_invoke_126(uint64_t a1, uint64_t a2)
{
  return +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":entityType", 5);
}

uint64_t __69__SGSqlEntityStore_DatabaseMigrator__migration_MoveContentToSnippets__block_invoke_120(uint64_t a1, uint64_t a2)
{
  return +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":entityType", 5);
}

uint64_t __45__SGSqlEntityStore_DatabaseMigrator__migrate__block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "updateLanguageForFTSTablesToLanguage:", *(_QWORD *)(a1 + 40));
}

void __45__SGSqlEntityStore_DatabaseMigrator__migrate__block_invoke_2(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  SEL v5;
  uint64_t v6;
  void *v7;
  _QWORD v8[5];
  _QWORD v9[5];
  _QWORD v10[6];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  void (*v15)(uint64_t);
  id v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;

  v17 = 0;
  v18 = &v17;
  v19 = 0x2020000000;
  v20 = 0x7FFFFFFFFFFFFFFFLL;
  v11 = 0;
  v12 = &v11;
  v13 = 0x3032000000;
  v14 = __Block_byref_object_copy__28501;
  v15 = __Block_byref_object_dispose__28502;
  v16 = 0;
  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v10[2] = __45__SGSqlEntityStore_DatabaseMigrator__migrate__block_invoke_3;
  v10[3] = &unk_1E7DB4668;
  v4 = MEMORY[0x1E0C809B0];
  v9[4] = v2;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[4] = &v17;
  v10[5] = &v11;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __45__SGSqlEntityStore_DatabaseMigrator__migrate__block_invoke_4;
  v9[3] = &unk_1E7DB4690;
  objc_msgSend(v3, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("SELECT rowId, task FROM postMigrationTasks ORDER BY rowId"), 0, v10, v9);
  if (v18[3] != 0x7FFFFFFFFFFFFFFFLL)
  {
    if ((objc_msgSend((id)v12[5], "hasPrefix:", CFSTR("migration_")) & 1) != 0
      && (v5 = NSSelectorFromString((NSString *)v12[5])) != 0)
    {
      v6 = ((uint64_t (*)(_QWORD, SEL))objc_msgSend(*(id *)(a1 + 32), "methodForSelector:", v5))(*(_QWORD *)(a1 + 32), v5);
    }
    else
    {
      v6 = 6;
    }
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v6;
  }
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) == 4)
  {
    if (v18[3] == 0x7FFFFFFFFFFFFFFFLL)
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
    }
    else
    {
      v7 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
      v8[0] = v4;
      v8[1] = 3221225472;
      v8[2] = __45__SGSqlEntityStore_DatabaseMigrator__migrate__block_invoke_5;
      v8[3] = &unk_1E7DB46B8;
      v8[4] = &v17;
      objc_msgSend(v7, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("DELETE FROM postMigrationTasks WHERE rowId == :rowId LIMIT 1"), v8, 0, 0);
    }
  }
  _Block_object_dispose(&v11, 8);

  _Block_object_dispose(&v17, 8);
}

uint64_t __45__SGSqlEntityStore_DatabaseMigrator__migrate__block_invoke_3(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v3 = a2;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_msgSend(v3, "getIntegerForColumn:", 0);
  objc_msgSend(v3, "getNSStringForColumnName:table:", "task", "postMigrationTasks");
  v4 = objc_claimAutoreleasedReturnValue();

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = v4;

  return *MEMORY[0x1E0D81788];
}

uint64_t __45__SGSqlEntityStore_DatabaseMigrator__migrate__block_invoke_4(uint64_t a1)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 6;
  return *MEMORY[0x1E0D81788];
}

uint64_t __45__SGSqlEntityStore_DatabaseMigrator__migrate__block_invoke_5(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "bindNamedParam:toInteger:", ":rowId", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
}

uint64_t __75__SGSqlEntityStore_DatabaseMigrator__updateLanguageForFTSTablesToLanguage___block_invoke(uint64_t a1, sqlite3_stmt *a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = sqlite3_column_int64(a2, 0);
  return 1;
}

void __75__SGSqlEntityStore_DatabaseMigrator__updateLanguageForFTSTablesToLanguage___block_invoke_80(uint64_t a1)
{
  void *v1;
  id v2;

  v1 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v2 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("DROP TABLE IF EXISTS %@"), *(_QWORD *)(a1 + 40));
  objc_msgSend(v1, "prepAndRunQuery:onPrep:onRow:onError:", v2, 0, 0, &__block_literal_global_81_28788);

}

uint64_t __75__SGSqlEntityStore_DatabaseMigrator__updateLanguageForFTSTablesToLanguage___block_invoke_2()
{
  NSObject *v0;
  uint8_t v2[16];

  sgLogHandle();
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v2 = 0;
    _os_log_error_impl(&dword_1C3607000, v0, OS_LOG_TYPE_ERROR, "failed to drop old entity_fts after updating to new language", v2, 2u);
  }

  return 1;
}

uint64_t __73__SGSqlEntityStore_DatabaseMigrator___prepareToCopyFrom_toNewTableNamed___block_invoke(uint64_t a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(a1 + 32), "_renameTable:to:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = result;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24))
  {
    result = objc_msgSend(*(id *)(a1 + 32), "_createEntityFTSTableWithName:", *(_QWORD *)(a1 + 40));
    if ((result & 1) == 0)
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 0;
  }
  return result;
}

uint64_t __54__SGSqlEntityStore_DatabaseMigrator___renameTable_to___block_invoke(uint64_t a1)
{
  NSObject *v2;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  sgLogHandle();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = 138412290;
    v6 = v4;
    _os_log_error_impl(&dword_1C3607000, v2, OS_LOG_TYPE_ERROR, "failed to drop %@ in preparation for renaming", (uint8_t *)&v5, 0xCu);
  }

  return 1;
}

uint64_t __54__SGSqlEntityStore_DatabaseMigrator___renameTable_to___block_invoke_75(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  sgLogHandle();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    v4 = a1[4];
    v5 = a1[5];
    v6 = 138412546;
    v7 = v4;
    v8 = 2112;
    v9 = v5;
    _os_log_error_impl(&dword_1C3607000, v2, OS_LOG_TYPE_ERROR, "failed to rename %@ to %@", (uint8_t *)&v6, 0x16u);
  }

  *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = 0;
  return 1;
}

uint64_t __84__SGSqlEntityStore_DatabaseMigrator___slowCopyFromTable_toTable_startingAtEntityId___block_invoke(uint64_t a1, sqlite3_stmt *a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = sqlite3_column_int64(a2, 0);
  return 1;
}

void __84__SGSqlEntityStore_DatabaseMigrator___slowCopyFromTable_toTable_startingAtEntityId___block_invoke_63(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[5];
  id v10;
  id v11;
  __int128 v12;
  __int128 v13;
  uint8_t buf[4];
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  sgLogHandle();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    v7 = *(_QWORD *)(a1 + 64);
    v8 = *(_QWORD *)(a1 + 72);
    *(_DWORD *)buf = 134218240;
    v15 = v7;
    v16 = 2048;
    v17 = v8;
    _os_log_debug_impl(&dword_1C3607000, v2, OS_LOG_TYPE_DEBUG, "Copying from old FTS table from %lu to %lu", buf, 0x16u);
  }

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(a1 + 40);
  v5 = *(void **)(v3 + 8);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __84__SGSqlEntityStore_DatabaseMigrator___slowCopyFromTable_toTable_startingAtEntityId___block_invoke_64;
  v9[3] = &unk_1E7DB45A8;
  v9[4] = v3;
  v10 = v4;
  v11 = *(id *)(a1 + 48);
  v6 = *(_OWORD *)(a1 + 80);
  v12 = *(_OWORD *)(a1 + 64);
  v13 = v6;
  objc_msgSend(v5, "writeTransaction:", v9);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));

}

void __84__SGSqlEntityStore_DatabaseMigrator___slowCopyFromTable_toTable_startingAtEntityId___block_invoke_64(uint64_t a1)
{
  void *v2;
  void *v3;
  _QWORD v4[4];
  __int128 v5;
  _QWORD v6[4];
  __int128 v7;

  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("INSERT INTO %@ (docid, entityId, messagingTerms, ftsTerms) SELECT docid, entityId, messagingTerms, ftsTerms FROM %@ WHERE docid BETWEEN :batchStart AND :batchStop   AND docid NOT IN (SELECT docid FROM %@)"), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 40));
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __84__SGSqlEntityStore_DatabaseMigrator___slowCopyFromTable_toTable_startingAtEntityId___block_invoke_2_67;
  v6[3] = &__block_descriptor_48_e23_v16__0__sqlite3_stmt__8l;
  v7 = *(_OWORD *)(a1 + 56);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __84__SGSqlEntityStore_DatabaseMigrator___slowCopyFromTable_toTable_startingAtEntityId___block_invoke_3;
  v4[3] = &__block_descriptor_48_e37___PASDBIterAction__B_16__0__NSError_8l;
  v5 = *(_OWORD *)(a1 + 72);
  objc_msgSend(v2, "prepAndRunQuery:onPrep:onRow:onError:", v3, v6, 0, v4);

}

uint64_t __84__SGSqlEntityStore_DatabaseMigrator___slowCopyFromTable_toTable_startingAtEntityId___block_invoke_2_67(uint64_t a1, uint64_t a2)
{
  +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":batchStart", *(_QWORD *)(a1 + 32));
  return +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":batchStop", *(_QWORD *)(a1 + 40));
}

uint64_t __84__SGSqlEntityStore_DatabaseMigrator___slowCopyFromTable_toTable_startingAtEntityId___block_invoke_3(uint64_t a1)
{
  NSObject *v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  sgLogHandle();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(_QWORD *)(a1 + 40);
    v6 = 134218240;
    v7 = v4;
    v8 = 2048;
    v9 = v5;
    _os_log_error_impl(&dword_1C3607000, v2, OS_LOG_TYPE_ERROR, "failed to insert from old fts table limit %lu offset %lu", (uint8_t *)&v6, 0x16u);
  }

  return 1;
}

uint64_t __84__SGSqlEntityStore_DatabaseMigrator___slowCopyFromTable_toTable_startingAtEntityId___block_invoke_2()
{
  NSObject *v0;
  uint8_t v2[16];

  sgLogHandle();
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v2 = 0;
    _os_log_error_impl(&dword_1C3607000, v0, OS_LOG_TYPE_ERROR, "failed to determine max docid", v2, 2u);
  }

  return 1;
}

uint64_t __68__SGSqlEntityStore_DatabaseMigrator___createEntityFTSTableWithName___block_invoke(uint64_t a1)
{
  NSObject *v2;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  sgLogHandle();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = 138412290;
    v6 = v4;
    _os_log_error_impl(&dword_1C3607000, v2, OS_LOG_TYPE_ERROR, "failed to create new FTS table %@", (uint8_t *)&v5, 0xCu);
  }

  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
  return 1;
}

uint64_t __78__SGSqlEntityStore_DatabaseMigrator__runQueries_forVersion_inTransactionOnDb___block_invoke(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v2 = *(id *)(a1 + 32);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v9;
    while (2)
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v9 != v5)
          objc_enumerationMutation(v2);
        if (objc_msgSend(*(id *)(a1 + 40), "runQuery:onDb:", *(_QWORD *)(*((_QWORD *)&v8 + 1) + 8 * v6), *(_QWORD *)(a1 + 48), (_QWORD)v8) != 4)
        {

          return 0;
        }
        ++v6;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      if (v4)
        continue;
      break;
    }
  }

  return objc_msgSend(*(id *)(a1 + 48), "setUserVersion:", *(unsigned int *)(a1 + 56));
}

uint64_t __52__SGSqlEntityStore_DatabaseMigrator__runQuery_onDb___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  void *v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  id v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  sgLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    objc_msgSend(*(id *)(a1 + 32), "filename");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = *(_QWORD *)(a1 + 40);
    v8 = *(_QWORD *)(a1 + 48);
    v10 = *(unsigned int *)(v7 + 80);
    v9 = *(unsigned int *)(v7 + 84);
    v11 = 138413314;
    v12 = v6;
    v13 = 2048;
    v14 = v10;
    v15 = 2048;
    v16 = v9;
    v17 = 2112;
    v18 = v8;
    v19 = 2112;
    v20 = v3;
    _os_log_error_impl(&dword_1C3607000, v4, OS_LOG_TYPE_ERROR, "SGDataMigrator encountered error during migration of %@: versions %lu & %lu, query: %@, error: %@", (uint8_t *)&v11, 0x34u);

  }
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 2;

  return 1;
}

uint64_t __76__SGSqlEntityStore_DatabaseMigrator__configureMigratorThenMigrateToVersion___block_invoke(uint64_t a1)
{
  uint64_t result;

  objc_msgSend(*(id *)(a1 + 32), "prepMigrator");
  result = objc_msgSend(*(id *)(a1 + 32), "migrateToVersion:", *(_QWORD *)(a1 + 48));
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void __52__SGSqlEntityStore_DatabaseMigrator__clearDatabase___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  id obja[2];
  id objb[2];
  id obj;
  _QWORD v21[6];
  id v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _QWORD v28[4];
  int8x16_t v29;
  uint64_t v30;
  _QWORD v31[4];
  id v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, void *);
  void *v36;
  int8x16_t v37;
  __CFString *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t, void *);
  void *v43;
  id v44;
  _BYTE v45[128];
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v2 = (void *)objc_opt_new();
  v3 = *(void **)(a1 + 32);
  v4 = MEMORY[0x1E0C809B0];
  v40 = MEMORY[0x1E0C809B0];
  v41 = 3221225472;
  v42 = __52__SGSqlEntityStore_DatabaseMigrator__clearDatabase___block_invoke_2;
  v43 = &unk_1E7DB6ED0;
  v5 = v2;
  v44 = v5;
  v33 = v4;
  v34 = 3221225472;
  v35 = __52__SGSqlEntityStore_DatabaseMigrator__clearDatabase___block_invoke_23;
  v36 = &unk_1E7DB4518;
  v39 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)obja = *(_OWORD *)(a1 + 32);
  v6 = obja[0];
  v37 = vextq_s8(*(int8x16_t *)obja, *(int8x16_t *)obja, 8uLL);
  v38 = CFSTR("SELECT name FROM sqlite_schema WHERE type='table' AND NOT name LIKE 'sqlite_%'");
  objc_msgSend(v3, "prepAndRunSQL:onPrep:onRow:onError:");
  v7 = *(void **)(a1 + 32);
  v31[0] = v4;
  v31[1] = 3221225472;
  v31[2] = __52__SGSqlEntityStore_DatabaseMigrator__clearDatabase___block_invoke_2_40;
  v31[3] = &unk_1E7DB6ED0;
  v8 = v5;
  v32 = v8;
  v28[0] = v4;
  v28[1] = 3221225472;
  v28[2] = __52__SGSqlEntityStore_DatabaseMigrator__clearDatabase___block_invoke_44;
  v28[3] = &unk_1E7DB45F8;
  v30 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)objb = *(_OWORD *)(a1 + 32);
  v9 = objb[0];
  v29 = vextq_s8(*(int8x16_t *)objb, *(int8x16_t *)objb, 8uLL);
  objc_msgSend(v7, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("PRAGMA table_list"), 0, v31, v28);
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  obj = v8;
  v10 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v24, v45, 16);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)v25;
    do
    {
      v13 = 0;
      do
      {
        if (*(_QWORD *)v25 != v12)
          objc_enumerationMutation(obj);
        v14 = *(_QWORD *)(*((_QWORD *)&v24 + 1) + 8 * v13);
        v15 = *(void **)(a1 + 32);
        v16 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("DROP TABLE IF EXISTS %@"), v14);
        v21[0] = MEMORY[0x1E0C809B0];
        v21[1] = 3221225472;
        v21[2] = __52__SGSqlEntityStore_DatabaseMigrator__clearDatabase___block_invoke_2_47;
        v21[3] = &unk_1E7DB4518;
        v23 = *(_QWORD *)(a1 + 48);
        v17 = *(void **)(a1 + 32);
        v21[4] = *(_QWORD *)(a1 + 40);
        v21[5] = v14;
        v22 = v17;
        objc_msgSend(v15, "prepAndRunSQL:onPrep:onRow:onError:", v16, 0, 0, v21);

        ++v13;
      }
      while (v11 != v13);
      v11 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v24, v45, 16);
    }
    while (v11);
  }

  objc_msgSend(*(id *)(a1 + 32), "setUserVersion:", 0);
}

uint64_t __52__SGSqlEntityStore_DatabaseMigrator__clearDatabase___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  NSObject *v5;
  unsigned __int8 *v6;
  uint8_t v8[16];

  v3 = a2;
  objc_msgSend(v3, "getNSStringForColumnName:table:", "name", 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    objc_msgSend(*(id *)(a1 + 32), "addObject:", v4);
  }
  else
  {
    sgLogHandle();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v8 = 0;
      _os_log_fault_impl(&dword_1C3607000, v5, OS_LOG_TYPE_FAULT, "sqlite_schema had a table with a NULL name", v8, 2u);
    }

    if (_PASEvaluateLogFaultAndProbCrashCriteria())
      abort();
  }
  v6 = (unsigned __int8 *)MEMORY[0x1E0D81780];

  return *v6;
}

void __52__SGSqlEntityStore_DatabaseMigrator__clearDatabase___block_invoke_23(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  _QWORD v11[3];
  id v12[4];

  v12[3] = *(id *)MEMORY[0x1E0C80C00];
  v3 = a2;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 2;
  v4 = (void *)MEMORY[0x1E0C99DA0];
  v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("%@FailedUnmigration"), objc_opt_class());
  v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("Failed to clear database: %@"), v3);
  v12[0] = *(id *)(a1 + 40);
  v11[0] = CFSTR("db");
  v11[1] = CFSTR("version");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", objc_msgSend(v12[0], "userVersion"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v11[2] = CFSTR("query");
  v8 = *(void **)(a1 + 48);
  v12[1] = v7;
  v12[2] = v8;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v12, v11, 3);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "exceptionWithName:reason:userInfo:", v5, v6, v9);
  v10 = (id)objc_claimAutoreleasedReturnValue();

  objc_exception_throw(v10);
}

uint64_t __52__SGSqlEntityStore_DatabaseMigrator__clearDatabase___block_invoke_2_40(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  int v5;
  void *v6;
  unsigned __int8 *v7;
  NSObject *v9;
  uint8_t v10[16];

  v3 = a2;
  objc_msgSend(v3, "getNSStringForColumnAlias:", "type");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(CFSTR("shadow"), "isEqual:", v4);

  if (v5)
  {
    objc_msgSend(v3, "getNSStringForColumnAlias:", "name");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (v6)
    {
      objc_msgSend(*(id *)(a1 + 32), "removeObject:", v6);
    }
    else
    {
      sgLogHandle();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)v10 = 0;
        _os_log_fault_impl(&dword_1C3607000, v9, OS_LOG_TYPE_FAULT, "shadow table has nil table name in PRAGMA table_list", v10, 2u);
      }

      if (_PASEvaluateLogFaultAndProbCrashCriteria())
        abort();
    }

  }
  v7 = (unsigned __int8 *)MEMORY[0x1E0D81780];

  return *v7;
}

void __52__SGSqlEntityStore_DatabaseMigrator__clearDatabase___block_invoke_44(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  _QWORD v10[3];
  id v11[4];

  v11[3] = *(id *)MEMORY[0x1E0C80C00];
  v3 = a2;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 2;
  v4 = (void *)MEMORY[0x1E0C99DA0];
  v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("%@FailedUnmigration"), objc_opt_class());
  v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("Failed to clear database: %@"), v3);
  v11[0] = *(id *)(a1 + 40);
  v10[0] = CFSTR("db");
  v10[1] = CFSTR("version");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", objc_msgSend(v11[0], "userVersion"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v10[2] = CFSTR("query");
  v11[1] = v7;
  v11[2] = CFSTR("PRAGMA table_list");
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v11, v10, 3);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "exceptionWithName:reason:userInfo:", v5, v6, v8);
  v9 = (id)objc_claimAutoreleasedReturnValue();

  objc_exception_throw(v9);
}

void __52__SGSqlEntityStore_DatabaseMigrator__clearDatabase___block_invoke_2_47(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  _QWORD v11[3];
  id v12[4];

  v12[3] = *(id *)MEMORY[0x1E0C80C00];
  v3 = a2;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 2;
  v4 = (void *)MEMORY[0x1E0C99DA0];
  v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("%@FailedUnmigration"), objc_opt_class());
  v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("Failed to drop table %@: %@"), *(_QWORD *)(a1 + 40), v3);
  v12[0] = *(id *)(a1 + 48);
  v11[0] = CFSTR("db");
  v11[1] = CFSTR("version");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", objc_msgSend(v12[0], "userVersion"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v12[1] = v7;
  v11[2] = CFSTR("query");
  v8 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("DROP TABLE IF EXISTS %@"), *(_QWORD *)(a1 + 40));
  v12[2] = v8;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v12, v11, 3);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "exceptionWithName:reason:userInfo:", v5, v6, v9);
  v10 = (id)objc_claimAutoreleasedReturnValue();

  objc_exception_throw(v10);
}

void __56__SGSqlEntityStore_DatabaseMigrator__unmigrateDatabases__block_invoke(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  __int16 v5;
  __int16 v6;

  objc_msgSend(*(id *)(a1 + 32), "prepMigrator");
  if (objc_msgSend(*(id *)(a1 + 32), "clearDatabase:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24)) == 2)
  {
    sgLogHandle();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      v6 = 0;
      v3 = "failed to clear snippets db";
      v4 = (uint8_t *)&v6;
LABEL_9:
      _os_log_error_impl(&dword_1C3607000, v2, OS_LOG_TYPE_ERROR, v3, v4, 2u);
    }
  }
  else
  {
    if (objc_msgSend(*(id *)(a1 + 32), "clearDatabase:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8)) != 2)
      return;
    sgLogHandle();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      v5 = 0;
      v3 = "failed to clear entities db";
      v4 = (uint8_t *)&v5;
      goto LABEL_9;
    }
  }

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 2;
}

void __58__SGSqlEntityStore_DatabaseMigrator__selectMigrationQueue__block_invoke_12(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  dispatch_queue_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint8_t v19[8];
  _QWORD v20[3];

  v20[2] = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "filename");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v2)
  {
    sgLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      goto LABEL_8;
    *(_WORD *)v19 = 0;
    v18 = "migrator passed nil filename for entity db";
LABEL_10:
    _os_log_error_impl(&dword_1C3607000, v9, OS_LOG_TYPE_ERROR, v18, v19, 2u);
    goto LABEL_8;
  }
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "filename");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v3)
  {
    sgLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      goto LABEL_8;
    *(_WORD *)v19 = 0;
    v18 = "migrator passed nil filename for snippets db";
    goto LABEL_10;
  }
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "filename");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "lastPathComponent");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v20[0] = v5;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "filename");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "lastPathComponent");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v20[1] = v7;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v20, 2);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "_pas_componentsJoinedByString:", CFSTR("#"));
  v9 = objc_claimAutoreleasedReturnValue();

  objc_msgSend((id)selectMigrationQueue_migrationQueues, "objectForKey:", v9);
  v10 = objc_claimAutoreleasedReturnValue();
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v12 = *(void **)(v11 + 40);
  *(_QWORD *)(v11 + 40) = v10;

  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40))
  {
    v13 = (void *)MEMORY[0x1C3BD4F6C]();
    objc_msgSend(CFSTR("com.apple.suggestions.databasemigration."), "stringByAppendingString:", v9);
    v14 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v15 = dispatch_queue_create((const char *)objc_msgSend(v14, "UTF8String"), 0);
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v17 = *(void **)(v16 + 40);
    *(_QWORD *)(v16 + 40) = v15;

    objc_msgSend((id)selectMigrationQueue_migrationQueues, "setObject:forKey:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), v9);
    objc_autoreleasePoolPop(v13);
  }
LABEL_8:

}

void __58__SGSqlEntityStore_DatabaseMigrator__selectMigrationQueue__block_invoke()
{
  dispatch_queue_t v0;
  void *v1;
  uint64_t v2;
  void *v3;

  v0 = dispatch_queue_create("com.apple.suggestions.databasemigration.migratorQueue", 0);
  v1 = (void *)selectMigrationQueue_migratorQueue;
  selectMigrationQueue_migratorQueue = (uint64_t)v0;

  objc_msgSend(MEMORY[0x1E0CB3748], "strongToWeakObjectsMapTable");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = (void *)selectMigrationQueue_migrationQueues;
  selectMigrationQueue_migrationQueues = v2;

}

uint64_t __54__SGSqlEntityStore_DatabaseMigrator__migrateDatabases__block_invoke(uint64_t a1)
{
  int v2;
  uint64_t result;
  int v4;

  v2 = objc_msgSend(*(id *)(a1 + 32), "migrationNeeded");
  result = qos_class_self();
  if (result >= 0x11)
    v4 = 17;
  else
    v4 = result;
  if (!v2)
    v4 = result;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v4;
  return result;
}

uint64_t __54__SGSqlEntityStore_DatabaseMigrator__migrateDatabases__block_invoke_2(uint64_t a1)
{
  id v2;
  int v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  const __CFString *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  objc_msgSend(*(id *)(a1 + 32), "prepMigrator");
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v2 = objc_alloc(MEMORY[0x1E0CB3940]);
  v3 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "isInMemory");
  v4 = *(unsigned int **)(a1 + 32);
  v5 = v4[20];
  v6 = objc_msgSend(v4, "maxKnownDbVersion");
  v7 = CFSTR("disk");
  if (v3)
    v7 = CFSTR("memory");
  v9 = objc_msgSend(v2, "initWithFormat:", CFSTR("migrator.%@.full.%lu_to_%lu"), v7, v5, v6, v9, v10, v11);
  v11 = 0;
  v10 = mach_absolute_time();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(*(id *)(a1 + 32), "migrate");
  SGRecordMeasurementState(&v9);
  return SGRecordMeasurementState(&v9);
}

- (id)domainIdentifierForSpotlightReferenceForBundleIdentifier:(id)a3 uniqueIdentifier:(id)a4
{
  id v6;
  id v7;
  SGSqliteDatabase *db;
  uint64_t v9;
  id v10;
  id v11;
  id v12;
  _QWORD v14[5];
  _QWORD v15[4];
  id v16;
  id v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t);
  void (*v22)(uint64_t);
  id v23;

  v6 = a3;
  v7 = a4;
  v18 = 0;
  v19 = &v18;
  v20 = 0x3032000000;
  v21 = __Block_byref_object_copy__30362;
  v22 = __Block_byref_object_dispose__30363;
  v23 = 0;
  db = self->_db;
  v9 = MEMORY[0x1E0C809B0];
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = __105__SGSqlEntityStore_Spotlight__domainIdentifierForSpotlightReferenceForBundleIdentifier_uniqueIdentifier___block_invoke;
  v15[3] = &unk_1E7DB5190;
  v10 = v6;
  v16 = v10;
  v11 = v7;
  v17 = v11;
  v14[0] = v9;
  v14[1] = 3221225472;
  v14[2] = __105__SGSqlEntityStore_Spotlight__domainIdentifierForSpotlightReferenceForBundleIdentifier_uniqueIdentifier___block_invoke_2;
  v14[3] = &unk_1E7DB51B8;
  v14[4] = &v18;
  -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](db, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("SELECT domainIdentifier FROM entityReferences WHERE bundleIdentifier = ? AND uniqueIdentifier = ? LIMIT 1"), v15, v14, &__block_literal_global_30414);
  v12 = (id)v19[5];

  _Block_object_dispose(&v18, 8);
  return v12;
}

- (BOOL)hasSpotlightReferenceForBundleIdentifier:(id)a3 uniqueIdentifier:(id)a4
{
  id v6;
  id v7;
  SGSqliteDatabase *db;
  uint64_t v9;
  id v10;
  id v11;
  _QWORD v13[5];
  _QWORD v14[4];
  id v15;
  id v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  char v20;

  v6 = a3;
  v7 = a4;
  v17 = 0;
  v18 = &v17;
  v19 = 0x2020000000;
  v20 = 0;
  db = self->_db;
  v9 = MEMORY[0x1E0C809B0];
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = __89__SGSqlEntityStore_Spotlight__hasSpotlightReferenceForBundleIdentifier_uniqueIdentifier___block_invoke;
  v14[3] = &unk_1E7DB5190;
  v10 = v6;
  v15 = v10;
  v11 = v7;
  v16 = v11;
  v13[0] = v9;
  v13[1] = 3221225472;
  v13[2] = __89__SGSqlEntityStore_Spotlight__hasSpotlightReferenceForBundleIdentifier_uniqueIdentifier___block_invoke_2;
  v13[3] = &unk_1E7DB51B8;
  v13[4] = &v17;
  -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](db, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("SELECT 1 FROM entityReferences WHERE bundleIdentifier = ? AND uniqueIdentifier = ? LIMIT 1"), v14, v13, &__block_literal_global_8_30410);
  LOBYTE(v6) = *((_BYTE *)v18 + 24);

  _Block_object_dispose(&v17, 8);
  return (char)v6;
}

- (void)addSpotlightReferenceToEmailRecordId:(id)a3 withBundleIdentifier:(id)a4 uniqueIdentifier:(id)a5 domainIdentifier:(id)a6
{
  id v11;
  id v12;
  id v13;
  id v14;
  SGSqliteDatabase *db;
  id v16;
  id v17;
  id v18;
  void *v19;
  id v20;
  _QWORD v21[5];
  id v22;
  id v23;
  id v24;
  id v25;

  v11 = a3;
  v12 = a4;
  v13 = a5;
  v14 = a6;
  if (objc_msgSend(v11, "tableId") != 1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore+Spotlight.m"), 91, CFSTR("Unexpected table for recordId: %@"), v11);

  }
  db = self->_db;
  v21[0] = MEMORY[0x1E0C809B0];
  v21[1] = 3221225472;
  v21[2] = __123__SGSqlEntityStore_Spotlight__addSpotlightReferenceToEmailRecordId_withBundleIdentifier_uniqueIdentifier_domainIdentifier___block_invoke;
  v21[3] = &unk_1E7DB57C8;
  v21[4] = self;
  v22 = v12;
  v23 = v13;
  v24 = v11;
  v25 = v14;
  v16 = v14;
  v17 = v11;
  v18 = v13;
  v20 = v12;
  -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v21);

}

- (id)duplicateKeysFromMailMessageKeys:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];
  _BYTE v28[128];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  sgMap();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)objc_opt_new();
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  -[SGSqlEntityStore duplicateKeysMatchingAnyTag:](self, "duplicateKeysMatchingAnyTag:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "allValues");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v23, v28, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v24;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v24 != v10)
          objc_enumerationMutation(v7);
        v12 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * v11);
        v19 = 0u;
        v20 = 0u;
        v21 = 0u;
        v22 = 0u;
        v13 = v12;
        v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v19, v27, 16);
        if (v14)
        {
          v15 = v14;
          v16 = *(_QWORD *)v20;
          do
          {
            v17 = 0;
            do
            {
              if (*(_QWORD *)v20 != v16)
                objc_enumerationMutation(v13);
              objc_msgSend(v5, "addObject:", *(_QWORD *)(*((_QWORD *)&v19 + 1) + 8 * v17++));
            }
            while (v15 != v17);
            v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v19, v27, 16);
          }
          while (v15);
        }

        ++v11;
      }
      while (v11 != v9);
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v23, v28, 16);
    }
    while (v9);
  }

  return v5;
}

- (id)duplicateKeysFromRecordIds:(id)a3
{
  id v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  int v14;
  uint64_t v15;
  void *v16;
  void *v17;
  SGSqliteDatabase *db;
  id v19;
  id v20;
  id v21;
  void *v23;
  void *context;
  id v25;
  _QWORD v26[5];
  id v27;
  id v28;
  id v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _BYTE v34[128];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  if (!objc_msgSend(v5, "count"))
  {
    v19 = (id)MEMORY[0x1E0C9AA60];
    goto LABEL_17;
  }
  v23 = (void *)objc_opt_new();
  context = (void *)MEMORY[0x1C3BD4F6C]();
  v6 = (void *)objc_opt_new();
  v7 = (void *)objc_opt_new();
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v25 = v5;
  v8 = v5;
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v30, v34, 16);
  if (!v9)
    goto LABEL_15;
  v10 = v9;
  v11 = *(_QWORD *)v31;
  do
  {
    for (i = 0; i != v10; ++i)
    {
      if (*(_QWORD *)v31 != v11)
        objc_enumerationMutation(v8);
      v13 = *(void **)(*((_QWORD *)&v30 + 1) + 8 * i);
      v14 = objc_msgSend(v13, "tableId");
      if (v14 == 1)
      {
        v15 = objc_msgSend(v13, "rowId");
        v16 = v6;
        goto LABEL_11;
      }
      if (!v14)
      {
        v15 = objc_msgSend(v13, "rowId");
        v16 = v7;
LABEL_11:
        objc_msgSend(v16, "addIndex:", v15);
        continue;
      }
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore+Spotlight.m"), 137, CFSTR("Unsupported table id %lu"), objc_msgSend(v13, "tableId"));

    }
    v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v30, v34, 16);
  }
  while (v10);
LABEL_15:

  db = self->_db;
  v26[0] = MEMORY[0x1E0C809B0];
  v26[1] = 3221225472;
  v26[2] = __58__SGSqlEntityStore_Spotlight__duplicateKeysFromRecordIds___block_invoke;
  v26[3] = &unk_1E7DB77B0;
  v26[4] = self;
  v27 = v6;
  v19 = v23;
  v28 = v19;
  v29 = v7;
  v20 = v7;
  v21 = v6;
  -[SGSqliteDatabase readTransaction:](db, "readTransaction:", v26);

  objc_autoreleasePoolPop(context);
  v5 = v25;
LABEL_17:

  return v19;
}

- (id)recordIdForKey:(id)a3
{
  id v5;
  void *v6;
  SGSqliteDatabase *db;
  uint64_t v8;
  void *v9;
  void *v10;
  const __CFString *v11;
  void *v12;
  SGSqliteDatabase *v13;
  uint64_t v14;
  id v15;
  void *v17;
  _QWORD v18[5];
  _QWORD v19[4];
  id v20;
  _QWORD v21[5];
  _QWORD v22[4];
  id v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t);
  void (*v28)(uint64_t);
  id v29;

  v5 = a3;
  v24 = 0;
  v25 = &v24;
  v26 = 0x3032000000;
  v27 = __Block_byref_object_copy__30362;
  v28 = __Block_byref_object_dispose__30363;
  v29 = 0;
  if (objc_msgSend(v5, "entityType") == 5)
  {
    objc_msgSend(v5, "parentKey");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    if (v6)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore+Spotlight.m"), 182, CFSTR("Email entities should not have a parent"));

    }
    db = self->_db;
    v8 = MEMORY[0x1E0C809B0];
    v22[0] = MEMORY[0x1E0C809B0];
    v22[1] = 3221225472;
    v22[2] = __46__SGSqlEntityStore_Spotlight__recordIdForKey___block_invoke;
    v22[3] = &unk_1E7DB7720;
    v23 = v5;
    v21[0] = v8;
    v21[1] = 3221225472;
    v21[2] = __46__SGSqlEntityStore_Spotlight__recordIdForKey___block_invoke_2;
    v21[3] = &unk_1E7DB51B8;
    v21[4] = &v24;
    -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](db, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("SELECT id FROM emailMetadata WHERE key = :key"), v22, v21, 0);

  }
  else
  {
    v9 = (void *)MEMORY[0x1C3BD4F6C]();
    objc_msgSend(v5, "parentKey");
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    if (v10)
      v11 = CFSTR(" = :parentKey");
    else
      v11 = CFSTR(" is NULL");
    objc_msgSend(CFSTR("SELECT e.id FROM entity AS e INNER JOIN entityParentage AS ep ON e.id = ep.childId WHERE e.entityKey = :entityKey AND e.entityType = :entityType AND ep.parentKey"), "stringByAppendingString:", v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = self->_db;
    v14 = MEMORY[0x1E0C809B0];
    v19[0] = MEMORY[0x1E0C809B0];
    v19[1] = 3221225472;
    v19[2] = __46__SGSqlEntityStore_Spotlight__recordIdForKey___block_invoke_3;
    v19[3] = &unk_1E7DB7720;
    v20 = v5;
    v18[0] = v14;
    v18[1] = 3221225472;
    v18[2] = __46__SGSqlEntityStore_Spotlight__recordIdForKey___block_invoke_4;
    v18[3] = &unk_1E7DB51B8;
    v18[4] = &v24;
    -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](v13, "prepAndRunQuery:onPrep:onRow:onError:", v12, v19, v18, 0);

    objc_autoreleasePoolPop(v9);
  }
  v15 = (id)v25[5];
  _Block_object_dispose(&v24, 8);

  return v15;
}

- (BOOL)addSpotlightReferenceToEmailIfFullyDownloaded:(id)a3 withBundleIdentifier:(id)a4 uniqueIdentifier:(id)a5 domainIdentifier:(id)a6
{
  id v11;
  id v12;
  id v13;
  id v14;
  void *v15;
  SGSqliteDatabase *db;
  id v17;
  id v18;
  id v19;
  id v20;
  _QWORD v22[5];
  id v23;
  id v24;
  id v25;
  id v26;
  uint64_t *v27;
  SEL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  char v32;

  v11 = a3;
  v12 = a4;
  v13 = a5;
  v14 = a6;
  v29 = 0;
  v30 = &v29;
  v31 = 0x2020000000;
  v32 = 0;
  v15 = (void *)MEMORY[0x1C3BD4F6C]();
  db = self->_db;
  v22[0] = MEMORY[0x1E0C809B0];
  v22[1] = 3221225472;
  v22[2] = __132__SGSqlEntityStore_Spotlight__addSpotlightReferenceToEmailIfFullyDownloaded_withBundleIdentifier_uniqueIdentifier_domainIdentifier___block_invoke;
  v22[3] = &unk_1E7DB5280;
  v22[4] = self;
  v17 = v11;
  v23 = v17;
  v28 = a2;
  v18 = v12;
  v24 = v18;
  v19 = v13;
  v25 = v19;
  v20 = v14;
  v26 = v20;
  v27 = &v29;
  -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v22);

  objc_autoreleasePoolPop(v15);
  LOBYTE(v15) = *((_BYTE *)v30 + 24);
  _Block_object_dispose(&v29, 8);

  return (char)v15;
}

- (id)_duplicateKeysWithZeroSpotlightReferencesFromRecordIds:(id)a3
{
  id v5;
  void *v6;
  SGSqliteDatabase *db;
  id v8;
  _QWORD v10[4];
  id v11;
  SGSqlEntityStore *v12;
  uint64_t *v13;
  SEL v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  void (*v19)(uint64_t);
  id v20;

  v5 = a3;
  v6 = (void *)MEMORY[0x1C3BD4F6C]();
  if (objc_msgSend(v5, "count"))
  {
    v15 = 0;
    v16 = &v15;
    v17 = 0x3032000000;
    v18 = __Block_byref_object_copy__30362;
    v19 = __Block_byref_object_dispose__30363;
    v20 = 0;
    db = self->_db;
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = __86__SGSqlEntityStore_Spotlight___duplicateKeysWithZeroSpotlightReferencesFromRecordIds___block_invoke;
    v10[3] = &unk_1E7DB5318;
    v11 = v5;
    v12 = self;
    v13 = &v15;
    v14 = a2;
    -[SGSqliteDatabase readTransaction:](db, "readTransaction:", v10);
    v8 = (id)v16[5];

    _Block_object_dispose(&v15, 8);
  }
  else
  {
    v8 = (id)MEMORY[0x1E0C9AA60];
  }
  objc_autoreleasePoolPop(v6);

  return v8;
}

- (void)_markRecordsLostIfNoSpotlightReferences:(id)a3
{
  void *v4;
  void *v5;
  id v6;

  -[SGSqlEntityStore _duplicateKeysWithZeroSpotlightReferencesFromRecordIds:](self, "_duplicateKeysWithZeroSpotlightReferencesFromRecordIds:", a3);
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0D19828], "map:f:", v6, &__block_literal_global_78_30360);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E60]), "initWithArray:", v4);
  -[SGSqlEntityStore markMessagesLost:](self, "markMessagesLost:", v5);

}

- (void)_deleteIfNoSpotlightReferences:(id)a3 addToRecentlyDeletedCache:(BOOL)a4
{
  _BOOL4 v4;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  void *v13;
  void *v14;
  _PASLock *recentlyDeletedEmailKeys;
  id v16;
  _QWORD v17[4];
  id v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];
  uint64_t v24;

  v4 = a4;
  v24 = *MEMORY[0x1E0C80C00];
  -[SGSqlEntityStore _duplicateKeysWithZeroSpotlightReferencesFromRecordIds:](self, "_duplicateKeysWithZeroSpotlightReferencesFromRecordIds:", a3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v4)
  {
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
    if (v8)
    {
      v9 = v8;
      v10 = *(_QWORD *)v20;
      do
      {
        for (i = 0; i != v9; ++i)
        {
          if (*(_QWORD *)v20 != v10)
            objc_enumerationMutation(v7);
          v12 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * i);
          if (+[SGEmailKey isSupportedEntityType:](SGEmailKey, "isSupportedEntityType:", objc_msgSend(v12, "entityType")))
          {
            objc_msgSend(v12, "emailKey");
            v13 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v13, "serialize");
            v14 = (void *)objc_claimAutoreleasedReturnValue();

            recentlyDeletedEmailKeys = self->_recentlyDeletedEmailKeys;
            v17[0] = MEMORY[0x1E0C809B0];
            v17[1] = 3221225472;
            v17[2] = __88__SGSqlEntityStore_Spotlight___deleteIfNoSpotlightReferences_addToRecentlyDeletedCache___block_invoke;
            v17[3] = &unk_1E7DB5380;
            v18 = v14;
            v16 = v14;
            -[_PASLock runWithLockAcquired:](recentlyDeletedEmailKeys, "runWithLockAcquired:", v17);

          }
        }
        v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
      }
      while (v9);
    }
  }
  -[SGSqlEntityStore deleteMessagesByDuplicateKey:](self, "deleteMessagesByDuplicateKey:", v7);

}

- (BOOL)isRecentlyDeleted:(id)a3
{
  id v4;
  _PASLock *recentlyDeletedEmailKeys;
  id v6;
  _QWORD v8[4];
  id v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char v14;

  v4 = a3;
  v11 = 0;
  v12 = &v11;
  v13 = 0x2020000000;
  v14 = 0;
  recentlyDeletedEmailKeys = self->_recentlyDeletedEmailKeys;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __49__SGSqlEntityStore_Spotlight__isRecentlyDeleted___block_invoke;
  v8[3] = &unk_1E7DB53A8;
  v10 = &v11;
  v6 = v4;
  v9 = v6;
  -[_PASLock runWithLockAcquired:](recentlyDeletedEmailKeys, "runWithLockAcquired:", v8);
  LOBYTE(recentlyDeletedEmailKeys) = *((_BYTE *)v12 + 24);

  _Block_object_dispose(&v11, 8);
  return (char)recentlyDeletedEmailKeys;
}

- (id)_recordIdsFromRemovingSpotlightReferencesWithBundleIdentifier:(id)a3 uniqueIdentifiers:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  SGSqliteDatabase *db;
  id v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  void *v19;
  id v20;
  id v21;
  SGSqlEntityStore *v22;
  id v23;

  v6 = a3;
  v7 = a4;
  v8 = (void *)MEMORY[0x1C3BD4F6C]();
  if (objc_msgSend(v7, "count"))
  {
    v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E20]), "initWithCapacity:", objc_msgSend(v7, "count"));
    db = self->_db;
    v16 = MEMORY[0x1E0C809B0];
    v17 = 3221225472;
    v18 = __111__SGSqlEntityStore_Spotlight___recordIdsFromRemovingSpotlightReferencesWithBundleIdentifier_uniqueIdentifiers___block_invoke;
    v19 = &unk_1E7DB77B0;
    v20 = v6;
    v21 = v7;
    v22 = self;
    v11 = v9;
    v23 = v11;
    -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", &v16);
    -[SGSqlEntityStore kvCacheManager](self, "kvCacheManager", v16, v17, v18, v19);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "deleteValueByRecordId:", 0);

    v13 = v23;
    v14 = v11;

  }
  else
  {
    v14 = (id)objc_opt_new();
  }
  objc_autoreleasePoolPop(v8);

  return v14;
}

- (void)markLostSpotlightReferencesWithBundleIdentifier:(id)a3 uniqueIdentifiers:(id)a4
{
  id v5;

  -[SGSqlEntityStore _recordIdsFromRemovingSpotlightReferencesWithBundleIdentifier:uniqueIdentifiers:](self, "_recordIdsFromRemovingSpotlightReferencesWithBundleIdentifier:uniqueIdentifiers:", a3, a4);
  v5 = (id)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v5, "count"))
    -[SGSqlEntityStore _markRecordsLostIfNoSpotlightReferences:](self, "_markRecordsLostIfNoSpotlightReferences:", v5);

}

- (void)deleteSpotlightReferencesWithBundleIdentifier:(id)a3 uniqueIdentifiers:(id)a4
{
  id v6;
  id v7;
  void *v8;
  id v9;

  v6 = a4;
  v7 = a3;
  -[SGSqlEntityStore deleteURLsFromBundleIdentifier:documentIdentifiers:](self, "deleteURLsFromBundleIdentifier:documentIdentifiers:", v7, v6);
  -[SGSqlEntityStore messageIdsForBundleIdentifier:uniqueIdentifiers:](self, "messageIdsForBundleIdentifier:uniqueIdentifiers:", v7, v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[SGSqlEntityStore deleteMailIntelligenceForMessageIds:](self, "deleteMailIntelligenceForMessageIds:", v8);

  -[SGSqlEntityStore _recordIdsFromRemovingSpotlightReferencesWithBundleIdentifier:uniqueIdentifiers:](self, "_recordIdsFromRemovingSpotlightReferencesWithBundleIdentifier:uniqueIdentifiers:", v7, v6);
  v9 = (id)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v9, "count"))
    -[SGSqlEntityStore _deleteIfNoSpotlightReferences:addToRecentlyDeletedCache:](self, "_deleteIfNoSpotlightReferences:addToRecentlyDeletedCache:", v9, 1);

}

- (void)deleteSpotlightReferencesWithBundleIdentifier:(id)a3 domainIdentifiers:(id)a4
{
  id v7;
  void *v8;
  id v9;
  void *v10;
  _QWORD v11[5];
  id v12;
  SEL v13;

  v7 = a3;
  objc_msgSend(a4, "globPatterns");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __95__SGSqlEntityStore_Spotlight__deleteSpotlightReferencesWithBundleIdentifier_domainIdentifiers___block_invoke;
  v11[3] = &unk_1E7DB53D0;
  v11[4] = self;
  v12 = v7;
  v13 = a2;
  v9 = v7;
  objc_msgSend(v8, "sg_enumerateChunksOfSize:usingBlock:", 100, v11);

  -[SGSqlEntityStore kvCacheManager](self, "kvCacheManager");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "deleteValueByRecordId:", 0);

}

- (void)deleteSpotlightReferencesWithBundleIdentifier:(id)a3
{
  id v5;
  void *v6;
  SGSqliteDatabase *db;
  void *v8;
  id v9;
  _QWORD v10[5];
  id v11;
  SEL v12;

  v5 = a3;
  v6 = (void *)MEMORY[0x1C3BD4F6C]();
  db = self->_db;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __77__SGSqlEntityStore_Spotlight__deleteSpotlightReferencesWithBundleIdentifier___block_invoke;
  v10[3] = &unk_1E7DB6BB8;
  v10[4] = self;
  v9 = v5;
  v11 = v9;
  v12 = a2;
  -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v10);
  -[SGSqlEntityStore kvCacheManager](self, "kvCacheManager");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "deleteValueByRecordId:", 0);

  objc_autoreleasePoolPop(v6);
}

- (void)deleteSpotlightReferencesWithNoBundleIdentifier
{
  void *v3;
  SGSqliteDatabase *db;
  void *v5;
  _QWORD v6[5];

  v3 = (void *)MEMORY[0x1C3BD4F6C](self, a2);
  db = self->_db;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __78__SGSqlEntityStore_Spotlight__deleteSpotlightReferencesWithNoBundleIdentifier__block_invoke;
  v6[3] = &unk_1E7DB56F0;
  v6[4] = self;
  -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v6);
  -[SGSqlEntityStore kvCacheManager](self, "kvCacheManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "deleteValueByRecordId:", 0);

  objc_autoreleasePoolPop(v3);
}

- (id)_selectingDomainsForDomainIdentifier:(id)a3
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v3 = a3;
  v4 = (void *)objc_opt_new();
  if (objc_msgSend(v3, "length"))
  {
    while (1)
    {
      v5 = (void *)MEMORY[0x1C3BD4F6C]();
      objc_msgSend(v4, "addObject:", v3);
      v6 = objc_msgSend(v3, "rangeOfString:options:", CFSTR("."), 6);
      if (!v7)
        break;
      objc_msgSend(v3, "substringToIndex:", v6);
      v8 = (void *)objc_claimAutoreleasedReturnValue();

      objc_autoreleasePoolPop(v5);
      v3 = v8;
      if (!objc_msgSend(v8, "length"))
        goto LABEL_7;
    }
    objc_autoreleasePoolPop(v5);
  }
  v8 = v3;
LABEL_7:

  return v4;
}

- (BOOL)_tombstoneExistsForBundleIdentifier:(id)a3
{
  id v4;
  BOOL v5;
  SGSqliteDatabase *db;
  uint64_t v7;
  _QWORD v9[5];
  _QWORD v10[4];
  id v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char v15;

  v4 = a3;
  if ((objc_msgSend(v4, "isEqual:", CFSTR("com.apple.iChat")) & 1) != 0)
  {
    v5 = 1;
  }
  else
  {
    v12 = 0;
    v13 = &v12;
    v14 = 0x2020000000;
    v15 = 0;
    db = self->_db;
    v7 = MEMORY[0x1E0C809B0];
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = __67__SGSqlEntityStore_Spotlight___tombstoneExistsForBundleIdentifier___block_invoke;
    v10[3] = &unk_1E7DB7720;
    v11 = v4;
    v9[0] = v7;
    v9[1] = 3221225472;
    v9[2] = __67__SGSqlEntityStore_Spotlight___tombstoneExistsForBundleIdentifier___block_invoke_2;
    v9[3] = &unk_1E7DB51B8;
    v9[4] = &v12;
    -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](db, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("SELECT 1 FROM harvestQueueTombstones WHERE bundleIdentifier=:bid AND uniqueIdentifier IS NULL AND domainIdentifier IS NULL"), v10, v9, 0);
    v5 = *((_BYTE *)v13 + 24) != 0;

    _Block_object_dispose(&v12, 8);
  }

  return v5;
}

- (void)writeTombstoneForSpotlightReferenceWithBundleIdentifier:(id)a3 domainIdentifier:(id)a4
{
  objc_class *v6;
  id v7;
  id v8;
  id v9;

  v6 = (objc_class *)MEMORY[0x1E0D815A0];
  v7 = a4;
  v8 = a3;
  v9 = (id)objc_msgSend([v6 alloc], "initWithDomain:", v7);

  -[SGSqlEntityStore writeTombstoneForSpotlightReferenceWithBundleIdentifier:domainIdentifiers:](self, "writeTombstoneForSpotlightReferenceWithBundleIdentifier:domainIdentifiers:", v8, v9);
}

- (void)writeTombstoneForSpotlightReferenceWithBundleIdentifier:(id)a3 domainIdentifiers:(id)a4
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  SGSqliteDatabase *db;
  id v20;
  void *v21;
  _QWORD v22[5];
  id v23;
  id v24;
  id v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = a4;
  if (!v7)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore+Spotlight.m"), 581, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("bundleIdentifier"));

  }
  if ((objc_msgSend(v8, "isEmpty") & 1) == 0)
  {
    v9 = (void *)objc_msgSend(v8, "copy");

    v10 = (void *)objc_opt_new();
    v26 = 0u;
    v27 = 0u;
    v28 = 0u;
    v29 = 0u;
    objc_msgSend(v9, "allDomains");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
    if (v12)
    {
      v13 = v12;
      v14 = *(_QWORD *)v27;
      do
      {
        v15 = 0;
        do
        {
          if (*(_QWORD *)v27 != v14)
            objc_enumerationMutation(v11);
          v16 = *(_QWORD *)(*((_QWORD *)&v26 + 1) + 8 * v15);
          v17 = (void *)MEMORY[0x1C3BD4F6C]();
          -[SGSqlEntityStore _selectingDomainsForDomainIdentifier:](self, "_selectingDomainsForDomainIdentifier:", v16);
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v10, "addObjectsFromArray:", v18);

          objc_autoreleasePoolPop(v17);
          ++v15;
        }
        while (v13 != v15);
        v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
      }
      while (v13);
    }

    db = self->_db;
    v22[0] = MEMORY[0x1E0C809B0];
    v22[1] = 3221225472;
    v22[2] = __105__SGSqlEntityStore_Spotlight__writeTombstoneForSpotlightReferenceWithBundleIdentifier_domainIdentifiers___block_invoke;
    v22[3] = &unk_1E7DB77B0;
    v22[4] = self;
    v23 = v7;
    v24 = v10;
    v8 = v9;
    v25 = v8;
    v20 = v10;
    -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v22);

  }
}

- (void)writeTombstoneForSpotlightReferenceWithBundleIdentifier:(id)a3 uniqueIdentifier:(id)a4
{
  void *v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v10 = a4;
  v6 = (void *)MEMORY[0x1E0C99D20];
  v7 = a4;
  v8 = a3;
  objc_msgSend(v6, "arrayWithObjects:count:", &v10, 1);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  -[SGSqlEntityStore writeTombstoneForSpotlightReferenceWithBundleIdentifier:uniqueIdentifiers:](self, "writeTombstoneForSpotlightReferenceWithBundleIdentifier:uniqueIdentifiers:", v8, v9, v10, v11);
}

- (void)writeTombstoneForSpotlightReferenceWithBundleIdentifier:(id)a3 uniqueIdentifiers:(id)a4
{
  id v7;
  SGSqliteDatabase *db;
  void *v9;
  void *v10;
  id v11;
  _QWORD v12[5];
  id v13;
  id v14;

  v11 = a3;
  v7 = a4;
  if (v11)
  {
    if (v7)
      goto LABEL_3;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore+Spotlight.m"), 649, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("bundleIdentifier"));

    if (v7)
      goto LABEL_3;
  }
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore+Spotlight.m"), 650, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("uniqueIdentifiers"));

LABEL_3:
  if (objc_msgSend(v7, "count"))
  {
    db = self->_db;
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __105__SGSqlEntityStore_Spotlight__writeTombstoneForSpotlightReferenceWithBundleIdentifier_uniqueIdentifiers___block_invoke;
    v12[3] = &unk_1E7DB7800;
    v12[4] = self;
    v13 = v11;
    v14 = v7;
    -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v12);

  }
}

- (void)writeTombstoneForSpotlightReferenceWithBundleIdentifier:(id)a3
{
  id v5;
  SGSqliteDatabase *db;
  void *v7;
  id v8;
  _QWORD v9[5];
  id v10;

  v5 = a3;
  if (!v5)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("SGSqlEntityStore+Spotlight.m"), 678, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("bundleIdentifier"));

  }
  db = self->_db;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __87__SGSqlEntityStore_Spotlight__writeTombstoneForSpotlightReferenceWithBundleIdentifier___block_invoke;
  v9[3] = &unk_1E7DB6A30;
  v9[4] = self;
  v10 = v5;
  v8 = v5;
  -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v9);

}

- (void)clearAllTombstonesForSpotlightReferencesIf:(id)a3
{
  id v4;
  NSObject *v5;
  SGSqliteDatabase *db;
  id v7;
  _QWORD v8[5];
  id v9;
  uint8_t buf[16];

  v4 = a3;
  sgLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1C3607000, v5, OS_LOG_TYPE_INFO, "clearAllTombstonesForSpotlightReferencesIf: waiting for write transaction", buf, 2u);
  }

  db = self->_db;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __74__SGSqlEntityStore_Spotlight__clearAllTombstonesForSpotlightReferencesIf___block_invoke;
  v8[3] = &unk_1E7DB7578;
  v8[4] = self;
  v9 = v4;
  v7 = v4;
  -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v8);

}

- (BOOL)tombstoneExistsForSpotlightReferenceWithBundleIdentifier:(id)a3 uniqueIdentifier:(id)a4 domainIdentifier:(id)a5
{
  id v8;
  id v9;
  id v10;
  BOOL v11;
  SGSqliteDatabase *db;
  uint64_t v13;
  _QWORD v15[5];
  _QWORD v16[4];
  id v17;
  id v18;
  SGSqlEntityStore *v19;
  id v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  char v24;

  v8 = a3;
  v9 = a4;
  v10 = a5;
  if ((objc_msgSend(v8, "isEqual:", CFSTR("com.apple.iChat")) & 1) != 0)
  {
    v11 = 1;
  }
  else
  {
    v21 = 0;
    v22 = &v21;
    v23 = 0x2020000000;
    v24 = 0;
    db = self->_db;
    v13 = MEMORY[0x1E0C809B0];
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 3221225472;
    v16[2] = __122__SGSqlEntityStore_Spotlight__tombstoneExistsForSpotlightReferenceWithBundleIdentifier_uniqueIdentifier_domainIdentifier___block_invoke;
    v16[3] = &unk_1E7DB6F20;
    v17 = v8;
    v18 = v9;
    v19 = self;
    v20 = v10;
    v15[0] = v13;
    v15[1] = 3221225472;
    v15[2] = __122__SGSqlEntityStore_Spotlight__tombstoneExistsForSpotlightReferenceWithBundleIdentifier_uniqueIdentifier_domainIdentifier___block_invoke_2;
    v15[3] = &unk_1E7DB7510;
    v15[4] = &v21;
    -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](db, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("         SELECT 1 FROM harvestQueueTombstones WHERE bundleIdentifier=:bid AND uniqueIdentifier IS NULL AND domainIdentifier IS NULL UNION ALL SELECT 1 FROM harvestQueueTombstones WHERE bundleIdentifier=:bid AND uniqueIdentifier=:uid    AND domainIdentifier IS NULL UNION ALL SELECT 1 FROM harvestQueueTombstones WHERE bundleIdentifier=:bid AND uniqueIdentifier IS NULL AND domainIdentifier IN _pas_nsarray(:dids)"), v16, v15, 0);
    v11 = *((_BYTE *)v22 + 24) != 0;

    _Block_object_dispose(&v21, 8);
  }

  return v11;
}

- (id)batchOf:(unint64_t)a3 contactsStartingAtEntityId:(unint64_t)a4
{
  void *v7;
  __CFString *v8;
  void *v9;
  void *v10;
  void *v11;
  SGSqliteDatabase *db;
  id v13;
  _QWORD v15[4];
  id v16;
  _QWORD v17[6];

  if (a4)
  {
    v7 = (void *)MEMORY[0x1C3BD4F6C](self, a2);
    objc_msgSend(CFSTR("SELECT entityId, data FROM serializedContacts"), "stringByAppendingString:", CFSTR(" WHERE entityId >= :minEntityId"));
    v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
    objc_autoreleasePoolPop(v7);
  }
  else
  {
    v8 = CFSTR("SELECT entityId, data FROM serializedContacts");
  }
  v9 = (void *)MEMORY[0x1C3BD4F6C]();
  -[__CFString stringByAppendingString:](v8, "stringByAppendingString:", CFSTR(" ORDER BY entityId LIMIT :limit"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_autoreleasePoolPop(v9);

  v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", a3);
  db = self->_db;
  v17[0] = MEMORY[0x1E0C809B0];
  v17[1] = 3221225472;
  v17[2] = __66__SGSqlEntityStore_Spotlight__batchOf_contactsStartingAtEntityId___block_invoke;
  v17[3] = &__block_descriptor_48_e23_v16__0__sqlite3_stmt__8l;
  v17[4] = a3;
  v17[5] = a4;
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = __66__SGSqlEntityStore_Spotlight__batchOf_contactsStartingAtEntityId___block_invoke_2;
  v15[3] = &unk_1E7DB52C8;
  v13 = v11;
  v16 = v13;
  -[SGSqliteDatabase prepAndRunQuery:onPrep:onRow:onError:](db, "prepAndRunQuery:onPrep:onRow:onError:", v10, v17, v15, &__block_literal_global_155_30285);

  return v13;
}

- (id)contactsWithIdentifiers:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  void *v9;
  SGSqliteDatabase *db;
  id v11;
  id v12;
  void *v13;
  id v14;
  _QWORD v16[4];
  id v17;
  _QWORD v18[4];
  id v19;
  uint8_t buf[4];
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(MEMORY[0x1E0D19828], "mapAndFilter:f:", v4, &__block_literal_global_157);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "count");
  if (v6 != objc_msgSend(v4, "count"))
  {
    sgLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v8 = objc_msgSend(v4, "count");
      *(_DWORD *)buf = 134217984;
      v21 = v8 - objc_msgSend(v5, "count");
      _os_log_impl(&dword_1C3607000, v7, OS_LOG_TYPE_DEFAULT, "contactsWithIdentifiers filtered %lu entities from the wrong table.", buf, 0xCu);
    }

  }
  v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", objc_msgSend(v5, "count"));
  db = self->_db;
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 3221225472;
  v18[2] = __55__SGSqlEntityStore_Spotlight__contactsWithIdentifiers___block_invoke_160;
  v18[3] = &unk_1E7DB74A0;
  v19 = v5;
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3221225472;
  v16[2] = __55__SGSqlEntityStore_Spotlight__contactsWithIdentifiers___block_invoke_2;
  v16[3] = &unk_1E7DB6ED0;
  v11 = v9;
  v17 = v11;
  v12 = v5;
  -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](db, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("SELECT entityId, data FROM serializedContacts WHERE entityId IN _pas_nsarray(:ids)"), v18, v16, &__block_literal_global_166_30274);
  v13 = v17;
  v14 = v11;

  return v14;
}

- (unint64_t)_minEntityIdFromMinEntityId:(unint64_t)a3 withContactIdentifiers:(id)a4
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = a4;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v13;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v13 != v8)
          objc_enumerationMutation(v5);
        v10 = objc_msgSend(*(id *)(*((_QWORD *)&v12 + 1) + 8 * v9), "integerValue");
        if (v10 > a3)
          a3 = v10;
        ++v9;
      }
      while (v7 != v9);
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v7);
  }

  return a3 + 1;
}

- (void)reindexSearchableItemsWithMinimumEntityId:(unint64_t)a3 searchableIndex:(id)a4 acknowledgementHandler:(id)a5 reindexCount:(int)a6
{
  id v11;
  id v12;
  NSObject *spotlightReindexQueue;
  id v14;
  id v15;
  _QWORD v16[5];
  id v17;
  id v18;
  unint64_t v19;
  SEL v20;
  int v21;

  v11 = a4;
  v12 = a5;
  spotlightReindexQueue = self->_spotlightReindexQueue;
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3221225472;
  v16[2] = __125__SGSqlEntityStore_Spotlight__reindexSearchableItemsWithMinimumEntityId_searchableIndex_acknowledgementHandler_reindexCount___block_invoke;
  v16[3] = &unk_1E7DB5540;
  v21 = a6;
  v18 = v12;
  v19 = a3;
  v16[4] = self;
  v17 = v11;
  v20 = a2;
  v14 = v11;
  v15 = v12;
  dispatch_async(spotlightReindexQueue, v16);

}

- (BOOL)_shouldContinueReindex:(int)a3
{
  unsigned int v3;

  v3 = atomic_load((unsigned int *)&self->_spotlightReindexCount);
  return v3 == a3;
}

- (void)searchableIndex:(id)a3 reindexAllSearchableItemsWithAcknowledgementHandler:(id)a4
{
  id v7;
  id v8;
  void *v9;
  int *p_spotlightReindexCount;
  unsigned int v11;
  unsigned int v12;
  NSObject *spotlightReindexQueue;
  id v14;
  id v15;
  _QWORD block[5];
  id v17;
  id v18;
  SEL v19;
  unsigned int v20;

  v7 = a3;
  v8 = a4;
  v9 = v8;
  p_spotlightReindexCount = &self->_spotlightReindexCount;
  do
  {
    v11 = __ldaxr((unsigned int *)p_spotlightReindexCount);
    v12 = v11 + 1;
  }
  while (__stlxr(v12, (unsigned int *)p_spotlightReindexCount));
  spotlightReindexQueue = self->_spotlightReindexQueue;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __99__SGSqlEntityStore_Spotlight__searchableIndex_reindexAllSearchableItemsWithAcknowledgementHandler___block_invoke;
  block[3] = &unk_1E7DB55B8;
  v20 = v12;
  block[4] = self;
  v17 = v7;
  v18 = v8;
  v19 = a2;
  v14 = v7;
  v15 = v9;
  dispatch_async(spotlightReindexQueue, block);

}

- (void)searchableIndex:(id)a3 reindexSearchableItemsWithIdentifiers:(id)a4 acknowledgementHandler:(id)a5
{
  id v7;
  void *v8;
  void *v9;
  void *v10;
  NSObject *spotlightReindexQueue;
  id v12;
  id v13;
  id v14;
  _QWORD block[4];
  id v16;
  id v17;

  v7 = a3;
  +[SGSpotlightContactsAdapter entityIdentifiersFromCNIdentifiers:](SGSpotlightContactsAdapter, "entityIdentifiersFromCNIdentifiers:", a4);
  v14 = (id)objc_claimAutoreleasedReturnValue();
  -[SGSqlEntityStore contactsWithIdentifiers:](self, "contactsWithIdentifiers:", v14);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[SGSqlEntityStore spotlightContactsAdapter](self, "spotlightContactsAdapter");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "searchableItemsForContactsForInternalIdentifiers:", v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  spotlightReindexQueue = self->_spotlightReindexQueue;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __108__SGSqlEntityStore_Spotlight__searchableIndex_reindexSearchableItemsWithIdentifiers_acknowledgementHandler___block_invoke;
  block[3] = &unk_1E7DB6A30;
  v16 = v7;
  v17 = v10;
  v12 = v10;
  v13 = v7;
  dispatch_sync(spotlightReindexQueue, block);

}

uint64_t __108__SGSqlEntityStore_Spotlight__searchableIndex_reindexSearchableItemsWithIdentifiers_acknowledgementHandler___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "indexSearchableItems:completionHandler:", *(_QWORD *)(a1 + 40), &__block_literal_global_175_30259);
}

void __108__SGSqlEntityStore_Spotlight__searchableIndex_reindexSearchableItemsWithIdentifiers_acknowledgementHandler___block_invoke_2(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  int v4;
  id v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  if (v2)
  {
    sgLogHandle();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v4 = 138412290;
      v5 = v2;
      _os_log_error_impl(&dword_1C3607000, v3, OS_LOG_TYPE_ERROR, "MDSearchableIndex returned error %@", (uint8_t *)&v4, 0xCu);
    }

  }
}

void __99__SGSqlEntityStore_Spotlight__searchableIndex_reindexAllSearchableItemsWithAcknowledgementHandler___block_invoke(uint64_t a1)
{
  NSObject *v2;
  id v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  __int128 v7;
  _QWORD block[4];
  id v9;
  uint64_t v10;
  __int128 v11;
  int v12;

  if ((objc_msgSend(*(id *)(a1 + 32), "_shouldContinueReindex:", *(unsigned int *)(a1 + 64)) & 1) != 0)
  {
    dispatch_get_global_queue(5, 0);
    v2 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __99__SGSqlEntityStore_Spotlight__searchableIndex_reindexAllSearchableItemsWithAcknowledgementHandler___block_invoke_2;
    block[3] = &unk_1E7DB55B8;
    v3 = *(id *)(a1 + 40);
    v4 = *(_QWORD *)(a1 + 32);
    v9 = v3;
    v10 = v4;
    v12 = *(_DWORD *)(a1 + 64);
    v7 = *(_OWORD *)(a1 + 48);
    v5 = (id)v7;
    v11 = v7;
    dispatch_async(v2, block);

  }
  else
  {
    v6 = *(_QWORD *)(a1 + 48);
    if (v6)
      (*(void (**)(void))(v6 + 16))();
  }
}

void __99__SGSqlEntityStore_Spotlight__searchableIndex_reindexAllSearchableItemsWithAcknowledgementHandler___block_invoke_2(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, void *, void *);
  void *v14;
  uint64_t v15;
  id v16;
  id v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  _QWORD v21[3];
  int v22;

  v21[0] = 0;
  v21[1] = v21;
  v21[2] = 0x2020000000;
  v22 = 0;
  v11 = MEMORY[0x1E0C809B0];
  v12 = 3221225472;
  v13 = __99__SGSqlEntityStore_Spotlight__searchableIndex_reindexAllSearchableItemsWithAcknowledgementHandler___block_invoke_3;
  v14 = &unk_1E7DB5590;
  v3 = *(void **)(a1 + 48);
  v2 = *(_QWORD *)(a1 + 56);
  v18 = v21;
  v19 = v2;
  v4 = *(void **)(a1 + 32);
  v15 = *(_QWORD *)(a1 + 40);
  v20 = *(_DWORD *)(a1 + 64);
  v17 = v3;
  v16 = *(id *)(a1 + 32);
  v5 = (void *)MEMORY[0x1C3BD5158](&v11);
  v10 = (void *)MEMORY[0x1C3BD5158](v5, v6, v7, v8, v9);

  _Block_object_dispose(v21, 8);
  objc_msgSend(v4, "fetchLastClientStateWithCompletionHandler:", v10, v11, v12, v13, v14, v15);

}

void __99__SGSqlEntityStore_Spotlight__searchableIndex_reindexAllSearchableItemsWithAcknowledgementHandler___block_invoke_3(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  NSObject *v10;
  id v11;
  id v12;
  void *v13;
  _QWORD v14[4];
  id v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  int v20;

  v5 = a2;
  v6 = a3;
  v7 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  if (v8)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "handleFailureInMethod:object:file:lineNumber:description:", *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 32), CFSTR("SGSqlEntityStore+Spotlight.m"), 896, CFSTR("This block should not be run more than once"));

  }
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(NSObject **)(v9 + 176);
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = __99__SGSqlEntityStore_Spotlight__searchableIndex_reindexAllSearchableItemsWithAcknowledgementHandler___block_invoke_4;
  v14[3] = &unk_1E7DB5568;
  v15 = v6;
  v16 = v9;
  v20 = *(_DWORD *)(a1 + 72);
  v19 = *(id *)(a1 + 48);
  v17 = v5;
  v18 = *(id *)(a1 + 40);
  v11 = v5;
  v12 = v6;
  dispatch_async(v10, v14);

}

void __99__SGSqlEntityStore_Spotlight__searchableIndex_reindexAllSearchableItemsWithAcknowledgementHandler___block_invoke_4(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5[24];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 32))
  {
    sgLogHandle();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      v4 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)v5 = 138412290;
      *(_QWORD *)&v5[4] = v4;
      _os_log_error_impl(&dword_1C3607000, v2, OS_LOG_TYPE_ERROR, "Could not fetch last CoreSpotlight state: %@", v5, 0xCu);
    }

  }
  else if ((objc_msgSend(*(id *)(a1 + 40), "_shouldContinueReindex:", *(unsigned int *)(a1 + 72)) & 1) != 0)
  {
    *(_QWORD *)v5 = 0;
    objc_msgSend(*(id *)(a1 + 48), "getBytes:length:", v5, 8);
    objc_msgSend(*(id *)(a1 + 40), "reindexSearchableItemsWithMinimumEntityId:searchableIndex:acknowledgementHandler:reindexCount:", *(_QWORD *)v5, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(unsigned int *)(a1 + 72));
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 64);
    if (v3)
      (*(void (**)(void))(v3 + 16))();
  }
}

void __125__SGSqlEntityStore_Spotlight__reindexSearchableItemsWithMinimumEntityId_searchableIndex_acknowledgementHandler_reindexCount___block_invoke(uint64_t a1)
{
  void *v2;
  BOOL v3;
  void *v4;
  void *v5;
  dispatch_semaphore_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  NSObject *v11;
  id v12;
  void *v13;
  void *v14;
  uint64_t v15;
  _QWORD v16[5];
  id v17;
  id v18;
  dispatch_semaphore_t v19;
  id v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  BOOL v25;
  _QWORD v26[3];
  int v27;

  if ((objc_msgSend(*(id *)(a1 + 32), "_shouldContinueReindex:", *(unsigned int *)(a1 + 72)) & 1) != 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "batchOf:contactsStartingAtEntityId:", 50, *(_QWORD *)(a1 + 56));
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = (unint64_t)objc_msgSend(v2, "count") < 0x32;
    objc_msgSend(*(id *)(a1 + 32), "spotlightContactsAdapter");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "searchableItemsForContactsForInternalIdentifiers:", v2);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(*(id *)(a1 + 40), "beginIndexBatch");
    v6 = dispatch_semaphore_create(0);
    v26[0] = 0;
    v26[1] = v26;
    v26[2] = 0x2020000000;
    v27 = 0;
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 3221225472;
    v16[2] = __125__SGSqlEntityStore_Spotlight__reindexSearchableItemsWithMinimumEntityId_searchableIndex_acknowledgementHandler_reindexCount___block_invoke_2;
    v16[3] = &unk_1E7DB5518;
    v7 = *(_QWORD *)(a1 + 64);
    v21 = v26;
    v22 = v7;
    v8 = *(void **)(a1 + 40);
    v16[4] = *(_QWORD *)(a1 + 32);
    v24 = *(_DWORD *)(a1 + 72);
    v20 = *(id *)(a1 + 48);
    v9 = *(id *)(a1 + 40);
    v10 = *(_QWORD *)(a1 + 56);
    v17 = v9;
    v18 = v2;
    v25 = v3;
    v23 = v10;
    v19 = v6;
    v11 = v6;
    v12 = v2;
    v13 = (void *)MEMORY[0x1C3BD5158](v16);
    v14 = (void *)MEMORY[0x1C3BD5158]();

    _Block_object_dispose(v26, 8);
    objc_msgSend(v8, "indexSearchableItems:completionHandler:", v5, v14);

    dispatch_semaphore_wait(v11, 0xFFFFFFFFFFFFFFFFLL);
  }
  else
  {
    v15 = *(_QWORD *)(a1 + 48);
    if (v15)
      (*(void (**)(void))(v15 + 16))();
  }
}

void __125__SGSqlEntityStore_Spotlight__reindexSearchableItemsWithMinimumEntityId_searchableIndex_acknowledgementHandler_reindexCount___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  unsigned int *v5;
  unsigned int v6;
  void *v7;
  NSObject *v8;
  void *v9;
  char v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  id v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  _QWORD v25[5];
  id v26;
  id v27;
  __int128 *p_buf;
  uint64_t v29;
  uint64_t v30;
  int v31;
  char v32;
  uint64_t v33;
  _QWORD v34[7];
  __int128 buf;
  uint64_t v36;
  int v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = v3;
  v5 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  if (v6)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "handleFailureInMethod:object:file:lineNumber:description:", *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 32), CFSTR("SGSqlEntityStore+Spotlight.m"), 837, CFSTR("This block should not be run more than once"));

    if (v4)
      goto LABEL_5;
  }
  else if (v3)
  {
LABEL_5:
    v7 = (void *)MEMORY[0x1C3BD4F6C]();
    sgLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 138412290;
      *(_QWORD *)((char *)&buf + 4) = v4;
      _os_log_error_impl(&dword_1C3607000, v8, OS_LOG_TYPE_ERROR, "MDSearchableIndex returned error %@", (uint8_t *)&buf, 0xCu);
    }

    goto LABEL_11;
  }
  v10 = objc_msgSend(*(id *)(a1 + 32), "_shouldContinueReindex:", *(unsigned int *)(a1 + 96));
  v7 = (void *)MEMORY[0x1C3BD4F6C]();
  if ((v10 & 1) != 0)
  {
    v11 = *(void **)(a1 + 32);
    v12 = *(_QWORD *)(a1 + 88);
    v13 = (void *)MEMORY[0x1C3BD4F6C]();
    objc_msgSend(*(id *)(a1 + 48), "allKeys");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_autoreleasePoolPop(v13);
    v15 = objc_msgSend(v11, "_minEntityIdFromMinEntityId:withContactIdentifiers:", v12, v14);

    v33 = v15;
    v16 = *(void **)(a1 + 40);
    objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", &v33, 8);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_QWORD *)&buf = 0;
    *((_QWORD *)&buf + 1) = &buf;
    v36 = 0x2020000000;
    v37 = 0;
    v25[0] = MEMORY[0x1E0C809B0];
    v25[1] = 3221225472;
    v25[2] = __125__SGSqlEntityStore_Spotlight__reindexSearchableItemsWithMinimumEntityId_searchableIndex_acknowledgementHandler_reindexCount___block_invoke_172;
    v25[3] = &unk_1E7DB54F0;
    v18 = *(_QWORD *)(a1 + 80);
    p_buf = &buf;
    v29 = v18;
    v25[4] = *(_QWORD *)(a1 + 32);
    v19 = *(id *)(a1 + 64);
    v32 = *(_BYTE *)(a1 + 100);
    v27 = v19;
    v30 = v33;
    v26 = *(id *)(a1 + 40);
    v31 = *(_DWORD *)(a1 + 96);
    v20 = (void *)MEMORY[0x1C3BD5158](v25);
    v21 = (void *)MEMORY[0x1C3BD5158]();

    goto LABEL_14;
  }
LABEL_11:
  v22 = *(_QWORD *)(a1 + 64);
  if (v22)
    (*(void (**)(void))(v22 + 16))();
  v16 = *(void **)(a1 + 40);
  objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", a1 + 88, 8);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  *(_QWORD *)&buf = 0;
  *((_QWORD *)&buf + 1) = &buf;
  v36 = 0x2020000000;
  v37 = 0;
  v34[0] = MEMORY[0x1E0C809B0];
  v34[1] = 3221225472;
  v34[2] = __125__SGSqlEntityStore_Spotlight__reindexSearchableItemsWithMinimumEntityId_searchableIndex_acknowledgementHandler_reindexCount___block_invoke_170;
  v34[3] = &unk_1E7DB54C8;
  v23 = *(_QWORD *)(a1 + 80);
  v34[5] = &buf;
  v34[6] = v23;
  v34[4] = *(_QWORD *)(a1 + 32);
  v24 = (void *)MEMORY[0x1C3BD5158](v34);
  v21 = (void *)MEMORY[0x1C3BD5158]();

LABEL_14:
  _Block_object_dispose(&buf, 8);
  objc_msgSend(v16, "endIndexBatchWithClientState:critical:reason:completionHandler:", v17, 0, 9, v21);

  objc_autoreleasePoolPop(v7);
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 56));

}

void __125__SGSqlEntityStore_Spotlight__reindexSearchableItemsWithMinimumEntityId_searchableIndex_acknowledgementHandler_reindexCount___block_invoke_170(_QWORD *a1, void *a2)
{
  id v3;
  void *v4;
  unsigned int *v5;
  unsigned int v6;
  NSObject *v7;
  void *v8;
  int v9;
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = v3;
  v5 = (unsigned int *)(*(_QWORD *)(a1[5] + 8) + 24);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  if (v6)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "handleFailureInMethod:object:file:lineNumber:description:", a1[6], a1[4], CFSTR("SGSqlEntityStore+Spotlight.m"), 849, CFSTR("This block should not be run more than once"));

    if (!v4)
      goto LABEL_8;
  }
  else if (!v3)
  {
    goto LABEL_8;
  }
  sgLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    v9 = 138412290;
    v10 = v4;
    _os_log_error_impl(&dword_1C3607000, v7, OS_LOG_TYPE_ERROR, "MDSearchableIndex returned error %@", (uint8_t *)&v9, 0xCu);
  }

LABEL_8:
}

void __125__SGSqlEntityStore_Spotlight__reindexSearchableItemsWithMinimumEntityId_searchableIndex_acknowledgementHandler_reindexCount___block_invoke_172(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  unsigned int *v5;
  unsigned int v6;
  NSObject *v7;
  void *v8;
  uint64_t v9;
  int v10;
  void *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = v3;
  v5 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  if (v6)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "handleFailureInMethod:object:file:lineNumber:description:", *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 32), CFSTR("SGSqlEntityStore+Spotlight.m"), 860, CFSTR("This block should not be run more than once"));

    if (v4)
      goto LABEL_5;
  }
  else if (v3)
  {
LABEL_5:
    sgLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v10 = 138412290;
      v11 = v4;
      _os_log_error_impl(&dword_1C3607000, v7, OS_LOG_TYPE_ERROR, "MDSearchableIndex returned error %@", (uint8_t *)&v10, 0xCu);
    }

    goto LABEL_13;
  }
  v9 = *(_QWORD *)(a1 + 48);
  if (v9)
    (*(void (**)(void))(v9 + 16))();
  if (!*(_BYTE *)(a1 + 84))
    objc_msgSend(*(id *)(a1 + 32), "reindexSearchableItemsWithMinimumEntityId:searchableIndex:acknowledgementHandler:reindexCount:", *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 40), 0, *(unsigned int *)(a1 + 80));
LABEL_13:

}

uint64_t __55__SGSqlEntityStore_Spotlight__contactsWithIdentifiers___block_invoke_160(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "bindNamedParam:toNSArray:", ":ids", *(_QWORD *)(a1 + 32));
}

uint64_t __55__SGSqlEntityStore_Spotlight__contactsWithIdentifiers___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  NSObject *v11;
  uint8_t buf[4];
  void *v14;
  __int16 v15;
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  objc_msgSend(v3, "getNSStringForColumnName:table:", "entityId", "serializedContacts");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "getNSDataForColumnName:table:", "data", "serializedContacts");
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = (void *)v5;
  if (v4 && v5)
  {
    v7 = (void *)MEMORY[0x1E0CB3710];
    v8 = (void *)MEMORY[0x1C3BD4F6C]();
    v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E60]), "initWithObjects:", objc_opt_class(), 0);
    objc_autoreleasePoolPop(v8);
    objc_msgSend(v7, "unarchivedObjectOfClasses:fromData:error:", v9, v6, 0);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v10, v4);

  }
  else
  {
    sgLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      v14 = v4;
      v15 = 2112;
      v16 = v6;
      _os_log_impl(&dword_1C3607000, v11, OS_LOG_TYPE_DEFAULT, "nil entityId or serializedContact data found: %@ %@", buf, 0x16u);
    }

  }
  return *MEMORY[0x1E0D81780];
}

uint64_t __55__SGSqlEntityStore_Spotlight__contactsWithIdentifiers___block_invoke_165(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  int v5;
  id v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  sgLogHandle();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    v5 = 138412290;
    v6 = v2;
    _os_log_error_impl(&dword_1C3607000, v3, OS_LOG_TYPE_ERROR, "Could not load contacts: %@", (uint8_t *)&v5, 0xCu);
  }

  return *MEMORY[0x1E0D81788];
}

id __55__SGSqlEntityStore_Spotlight__contactsWithIdentifiers___block_invoke(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0D19920], "recordIdWithInternalEntityId:", objc_msgSend(a2, "longLongValue"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v2, "tableId"))
  {
    v3 = 0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", objc_msgSend(v2, "rowId"));
    v3 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v3;
}

uint64_t __66__SGSqlEntityStore_Spotlight__batchOf_contactsStartingAtEntityId___block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":limit", *(_QWORD *)(a1 + 32));
  if (*(_QWORD *)(a1 + 40))
    return +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":minEntityId");
  return result;
}

uint64_t __66__SGSqlEntityStore_Spotlight__batchOf_contactsStartingAtEntityId___block_invoke_2(uint64_t a1, sqlite3_stmt *a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  NSObject *v8;
  uint8_t buf[16];

  sqlite3_column_nsstring(a2, 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    v5 = (void *)MEMORY[0x1C3BD4F6C]();
    v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E60]), "initWithObjects:", objc_opt_class(), 0);
    objc_autoreleasePoolPop(v5);
    sqlite3_column_nssecurecoding(a2, 1, v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v7, v4);

  }
  else
  {
    sgLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_fault_impl(&dword_1C3607000, v8, OS_LOG_TYPE_FAULT, "got NULL entityId from serializedContacts table", buf, 2u);
    }

    if (_PASEvaluateLogFaultAndProbCrashCriteria())
      abort();
  }

  return 0;
}

uint64_t __66__SGSqlEntityStore_Spotlight__batchOf_contactsStartingAtEntityId___block_invoke_154(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  int v5;
  id v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  sgLogHandle();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    v5 = 138412290;
    v6 = v2;
    _os_log_error_impl(&dword_1C3607000, v3, OS_LOG_TYPE_ERROR, "Could not load contacts: %@", (uint8_t *)&v5, 0xCu);
  }

  return 1;
}

void __122__SGSqlEntityStore_Spotlight__tombstoneExistsForSpotlightReferenceWithBundleIdentifier_uniqueIdentifier_domainIdentifier___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;
  id v5;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = a2;
  objc_msgSend(v4, "bindNamedParam:toNSString:", ":bid", v3);
  objc_msgSend(v4, "bindNamedParam:toNSString:", ":uid", *(_QWORD *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 48), "_selectingDomainsForDomainIdentifier:", *(_QWORD *)(a1 + 56));
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "bindNamedParam:toNSArray:", ":dids", v5);

}

uint64_t __122__SGSqlEntityStore_Spotlight__tombstoneExistsForSpotlightReferenceWithBundleIdentifier_uniqueIdentifier_domainIdentifier___block_invoke_2(uint64_t a1)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  return *MEMORY[0x1E0D81788];
}

void __74__SGSqlEntityStore_Spotlight__clearAllTombstonesForSpotlightReferencesIf___block_invoke(uint64_t a1)
{
  int v2;
  NSObject *v3;
  _BOOL4 v4;
  const char *v5;
  uint8_t *v6;
  __int16 v7;
  __int16 v8;
  uint8_t buf[16];

  v2 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  sgLogHandle();
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = os_log_type_enabled(v3, OS_LOG_TYPE_INFO);
  if (v2)
  {
    if (v4)
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1C3607000, v3, OS_LOG_TYPE_INFO, "clearAllTombstonesForSpotlightReferencesIf:YES (will clear)", buf, 2u);
    }

    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("DELETE FROM harvestQueueTombstones"), 0, 0, 0);
    sgLogHandle();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v8 = 0;
      v5 = "clearAllTombstonesForSpotlightReferencesIf:YES (did clear)";
      v6 = (uint8_t *)&v8;
LABEL_8:
      _os_log_impl(&dword_1C3607000, v3, OS_LOG_TYPE_INFO, v5, v6, 2u);
    }
  }
  else if (v4)
  {
    v7 = 0;
    v5 = "clearAllTombstonesForSpotlightReferencesIf:NO";
    v6 = (uint8_t *)&v7;
    goto LABEL_8;
  }

}

void __87__SGSqlEntityStore_Spotlight__writeTombstoneForSpotlightReferenceWithBundleIdentifier___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  _QWORD v7[4];
  id v8;
  _QWORD v9[4];
  id v10;

  if ((objc_msgSend(*(id *)(a1 + 32), "_tombstoneExistsForBundleIdentifier:", *(_QWORD *)(a1 + 40)) & 1) == 0)
  {
    v2 = *(void **)(a1 + 40);
    v3 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
    v4 = MEMORY[0x1E0C809B0];
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = __87__SGSqlEntityStore_Spotlight__writeTombstoneForSpotlightReferenceWithBundleIdentifier___block_invoke_2;
    v9[3] = &unk_1E7DB7720;
    v10 = v2;
    objc_msgSend(v3, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("DELETE FROM harvestQueueTombstones WHERE bundleIdentifier = :bid"), v9, 0, 0);
    v5 = *(void **)(a1 + 40);
    v6 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
    v7[0] = v4;
    v7[1] = 3221225472;
    v7[2] = __87__SGSqlEntityStore_Spotlight__writeTombstoneForSpotlightReferenceWithBundleIdentifier___block_invoke_3;
    v7[3] = &unk_1E7DB7720;
    v8 = v5;
    objc_msgSend(v6, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("INSERT OR IGNORE INTO harvestQueueTombstones (bundleIdentifier, uniqueIdentifier, domainIdentifier) VALUES (:bid,NULL,NULL)"), v7, 0, 0);

  }
}

uint64_t __87__SGSqlEntityStore_Spotlight__writeTombstoneForSpotlightReferenceWithBundleIdentifier___block_invoke_2(uint64_t a1, uint64_t a2)
{
  return +[SGSqliteDatabase bindParam:name:nsstring:](SGSqliteDatabase, "bindParam:name:nsstring:", a2, ":bid", *(_QWORD *)(a1 + 32));
}

uint64_t __87__SGSqlEntityStore_Spotlight__writeTombstoneForSpotlightReferenceWithBundleIdentifier___block_invoke_3(uint64_t a1, uint64_t a2)
{
  return +[SGSqliteDatabase bindParam:name:nsstring:](SGSqliteDatabase, "bindParam:name:nsstring:", a2, ":bid", *(_QWORD *)(a1 + 32));
}

void __105__SGSqlEntityStore_Spotlight__writeTombstoneForSpotlightReferenceWithBundleIdentifier_uniqueIdentifiers___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  _QWORD v4[4];
  id v5;
  id v6;

  if ((objc_msgSend(*(id *)(a1 + 32), "_tombstoneExistsForBundleIdentifier:", *(_QWORD *)(a1 + 40)) & 1) == 0)
  {
    v2 = *(void **)(a1 + 40);
    v3 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
    v4[0] = MEMORY[0x1E0C809B0];
    v4[1] = 3221225472;
    v4[2] = __105__SGSqlEntityStore_Spotlight__writeTombstoneForSpotlightReferenceWithBundleIdentifier_uniqueIdentifiers___block_invoke_2;
    v4[3] = &unk_1E7DB6E80;
    v5 = v2;
    v6 = *(id *)(a1 + 48);
    objc_msgSend(v3, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("INSERT OR IGNORE INTO harvestQueueTombstones (bundleIdentifier, uniqueIdentifier, domainIdentifier) SELECT :bid, value, NULL FROM _pas_nsarray(:uids) WHERE NOT EXISTS (SELECT 1 FROM harvestQueueTombstones WHERE bundleIdentifier=:bid AND uniqueIdentifier=value AND domainIdentifier IS NULL)"), v4, 0, 0);

  }
}

void __105__SGSqlEntityStore_Spotlight__writeTombstoneForSpotlightReferenceWithBundleIdentifier_uniqueIdentifiers___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = a2;
  objc_msgSend(v4, "bindNamedParam:toNSString:", ":bid", v3);
  objc_msgSend(v4, "bindNamedParam:toNSArray:", ":uids", *(_QWORD *)(a1 + 40));

}

void __105__SGSqlEntityStore_Spotlight__writeTombstoneForSpotlightReferenceWithBundleIdentifier_domainIdentifiers___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  id v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t j;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  id obj;
  _QWORD v26[4];
  id v27;
  uint64_t v28;
  _QWORD v29[4];
  id v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _QWORD v40[4];
  id v41;
  _QWORD v42[4];
  id v43;
  id v44;
  _BYTE v45[128];
  _BYTE v46[128];
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  if ((objc_msgSend(*(id *)(a1 + 32), "_tombstoneExistsForBundleIdentifier:", *(_QWORD *)(a1 + 40)) & 1) == 0)
  {
    v2 = (void *)objc_opt_new();
    v3 = *(void **)(a1 + 40);
    v4 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
    v5 = MEMORY[0x1E0C809B0];
    v42[0] = MEMORY[0x1E0C809B0];
    v42[1] = 3221225472;
    v42[2] = __105__SGSqlEntityStore_Spotlight__writeTombstoneForSpotlightReferenceWithBundleIdentifier_domainIdentifiers___block_invoke_2;
    v42[3] = &unk_1E7DB6E80;
    v43 = v3;
    v44 = *(id *)(a1 + 48);
    v40[0] = v5;
    v40[1] = 3221225472;
    v40[2] = __105__SGSqlEntityStore_Spotlight__writeTombstoneForSpotlightReferenceWithBundleIdentifier_domainIdentifiers___block_invoke_3;
    v40[3] = &unk_1E7DB6ED0;
    v6 = v2;
    v41 = v6;
    objc_msgSend(v4, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("SELECT domainIdentifier FROM harvestQueueTombstones WHERE bundleIdentifier=:bid AND uniqueIdentifier IS NULL AND domainIdentifier IN _pas_nsset(:overlappingDomainIdentifiers)"), v42, v40, 0);
    v7 = (void *)objc_opt_new();
    v36 = 0u;
    v37 = 0u;
    v38 = 0u;
    v39 = 0u;
    objc_msgSend(*(id *)(a1 + 56), "allDomains");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v36, v46, 16);
    if (v9)
    {
      v10 = v9;
      v11 = *(_QWORD *)v37;
      do
      {
        for (i = 0; i != v10; ++i)
        {
          if (*(_QWORD *)v37 != v11)
            objc_enumerationMutation(v8);
          v13 = *(_QWORD *)(*((_QWORD *)&v36 + 1) + 8 * i);
          if ((objc_msgSend(v6, "containsDomain:", v13) & 1) == 0)
            objc_msgSend(v7, "addObject:", v13);
        }
        v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v36, v46, 16);
      }
      while (v10);
    }

    if (objc_msgSend(v7, "count"))
    {
      v34 = 0u;
      v35 = 0u;
      v32 = 0u;
      v33 = 0u;
      v24 = v7;
      obj = v7;
      v14 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v32, v45, 16);
      if (v14)
      {
        v15 = v14;
        v16 = *(_QWORD *)v33;
        v17 = MEMORY[0x1E0C809B0];
        do
        {
          for (j = 0; j != v15; ++j)
          {
            if (*(_QWORD *)v33 != v16)
              objc_enumerationMutation(obj);
            v19 = *(_QWORD *)(*((_QWORD *)&v32 + 1) + 8 * j);
            v20 = *(void **)(a1 + 40);
            v21 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
            v29[0] = v17;
            v29[1] = 3221225472;
            v29[2] = __105__SGSqlEntityStore_Spotlight__writeTombstoneForSpotlightReferenceWithBundleIdentifier_domainIdentifiers___block_invoke_4;
            v29[3] = &unk_1E7DB5190;
            v30 = v20;
            v31 = v19;
            objc_msgSend(v21, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("INSERT OR IGNORE INTO harvestQueueTombstones (bundleIdentifier, uniqueIdentifier, domainIdentifier) VALUES (:bid, NULL, :did)"), v29, 0, 0);
            v22 = *(void **)(a1 + 40);
            v23 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
            v26[0] = v17;
            v26[1] = 3221225472;
            v26[2] = __105__SGSqlEntityStore_Spotlight__writeTombstoneForSpotlightReferenceWithBundleIdentifier_domainIdentifiers___block_invoke_5;
            v26[3] = &unk_1E7DB5190;
            v27 = v22;
            v28 = v19;
            objc_msgSend(v23, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("DELETE FROM harvestQueueTombstones WHERE bundleIdentifier=:bid AND uniqueIdentifier IS NULL AND (domainIdentifier >= :did || '.') AND (domainIdentifier < :did || '/')"), v26, 0, 0);

          }
          v15 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v32, v45, 16);
        }
        while (v15);
      }

      v7 = v24;
    }

  }
}

void __105__SGSqlEntityStore_Spotlight__writeTombstoneForSpotlightReferenceWithBundleIdentifier_domainIdentifiers___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = a2;
  objc_msgSend(v4, "bindNamedParam:toNSString:", ":bid", v3);
  objc_msgSend(v4, "bindNamedParam:toNSSet:", ":overlappingDomainIdentifiers", *(_QWORD *)(a1 + 40));

}

uint64_t __105__SGSqlEntityStore_Spotlight__writeTombstoneForSpotlightReferenceWithBundleIdentifier_domainIdentifiers___block_invoke_3(uint64_t a1, void *a2)
{
  void *v3;
  unsigned __int8 *v4;

  objc_msgSend(a2, "getNSStringForColumnName:table:", "domainIdentifier", "harvestQueueTombstones");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
    objc_msgSend(*(id *)(a1 + 32), "addDomain:", v3);
  v4 = (unsigned __int8 *)MEMORY[0x1E0D81780];

  return *v4;
}

uint64_t __105__SGSqlEntityStore_Spotlight__writeTombstoneForSpotlightReferenceWithBundleIdentifier_domainIdentifiers___block_invoke_4(uint64_t a1, uint64_t a2)
{
  +[SGSqliteDatabase bindParam:name:nsstring:](SGSqliteDatabase, "bindParam:name:nsstring:", a2, ":bid", *(_QWORD *)(a1 + 32));
  return +[SGSqliteDatabase bindParam:name:nsstring:](SGSqliteDatabase, "bindParam:name:nsstring:", a2, ":did", *(_QWORD *)(a1 + 40));
}

uint64_t __105__SGSqlEntityStore_Spotlight__writeTombstoneForSpotlightReferenceWithBundleIdentifier_domainIdentifiers___block_invoke_5(uint64_t a1, uint64_t a2)
{
  +[SGSqliteDatabase bindParam:name:nsstring:](SGSqliteDatabase, "bindParam:name:nsstring:", a2, ":bid", *(_QWORD *)(a1 + 32));
  return +[SGSqliteDatabase bindParam:name:nsstring:](SGSqliteDatabase, "bindParam:name:nsstring:", a2, ":did", *(_QWORD *)(a1 + 40));
}

uint64_t __67__SGSqlEntityStore_Spotlight___tombstoneExistsForBundleIdentifier___block_invoke(uint64_t a1, uint64_t a2)
{
  return +[SGSqliteDatabase bindParam:name:nsstring:](SGSqliteDatabase, "bindParam:name:nsstring:", a2, ":bid", *(_QWORD *)(a1 + 32));
}

uint64_t __67__SGSqlEntityStore_Spotlight___tombstoneExistsForBundleIdentifier___block_invoke_2(uint64_t a1)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  return 1;
}

void __78__SGSqlEntityStore_Spotlight__deleteSpotlightReferencesWithNoBundleIdentifier__block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  void *v14;
  id v15;
  _QWORD v16[5];
  _QWORD v17[4];
  id v18;
  id v19;

  v2 = (void *)objc_opt_new();
  v3 = (void *)objc_opt_new();
  v4 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v5 = MEMORY[0x1E0C809B0];
  v17[0] = MEMORY[0x1E0C809B0];
  v17[1] = 3221225472;
  v17[2] = __78__SGSqlEntityStore_Spotlight__deleteSpotlightReferencesWithNoBundleIdentifier__block_invoke_2;
  v17[3] = &unk_1E7DB53F8;
  v6 = v2;
  v18 = v6;
  v7 = v3;
  v19 = v7;
  objc_msgSend(v4, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("SELECT id, entityId FROM entityReferences WHERE bundleIdentifier is null"), 0, v17, 0);
  if (objc_msgSend(v6, "count"))
  {
    v16[0] = v5;
    v16[1] = 3221225472;
    v16[2] = __78__SGSqlEntityStore_Spotlight__deleteSpotlightReferencesWithNoBundleIdentifier__block_invoke_3;
    v16[3] = &unk_1E7DB5420;
    v16[4] = *(_QWORD *)(a1 + 32);
    objc_msgSend(v6, "enumerateRangesUsingBlock:", v16);
    v8 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E20]), "initWithCapacity:", objc_msgSend(v7, "count"));
    v9 = (void *)MEMORY[0x1C3BD4F6C]();
    v11 = v5;
    v12 = 3221225472;
    v13 = __78__SGSqlEntityStore_Spotlight__deleteSpotlightReferencesWithNoBundleIdentifier__block_invoke_5;
    v14 = &unk_1E7DB52F0;
    v10 = v8;
    v15 = v10;
    objc_msgSend(v7, "enumerateIndexesUsingBlock:", &v11);

    objc_autoreleasePoolPop(v9);
    objc_msgSend(*(id *)(a1 + 32), "_deleteIfNoSpotlightReferences:addToRecentlyDeletedCache:", v10, 0, v11, v12, v13, v14);

  }
}

uint64_t __78__SGSqlEntityStore_Spotlight__deleteSpotlightReferencesWithNoBundleIdentifier__block_invoke_2(uint64_t a1, sqlite3_stmt *a2)
{
  objc_msgSend(*(id *)(a1 + 32), "addIndex:", sqlite3_column_int64(a2, 0));
  objc_msgSend(*(id *)(a1 + 40), "addIndex:", sqlite3_column_int64(a2, 1));
  return 0;
}

uint64_t __78__SGSqlEntityStore_Spotlight__deleteSpotlightReferencesWithNoBundleIdentifier__block_invoke_3(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  _QWORD v5[6];

  v3 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __78__SGSqlEntityStore_Spotlight__deleteSpotlightReferencesWithNoBundleIdentifier__block_invoke_4;
  v5[3] = &__block_descriptor_48_e23_v16__0__sqlite3_stmt__8l;
  v5[4] = a2;
  v5[5] = a3;
  return objc_msgSend(v3, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("DELETE FROM entityReferences WHERE id BETWEEN ? AND ?"), v5, 0, 0);
}

void __78__SGSqlEntityStore_Spotlight__deleteSpotlightReferencesWithNoBundleIdentifier__block_invoke_5(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  objc_msgSend(MEMORY[0x1E0D19920], "recordIdForEmailWithRowId:", a2);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "addObject:", v3);

}

uint64_t __78__SGSqlEntityStore_Spotlight__deleteSpotlightReferencesWithNoBundleIdentifier__block_invoke_4(uint64_t a1, sqlite3_stmt *a2)
{
  sqlite3_int64 v4;
  uint64_t v5;
  sqlite3_int64 v6;

  if (*(_QWORD *)(a1 + 40))
    v4 = *(_QWORD *)(a1 + 32);
  else
    v4 = 0x7FFFFFFFFFFFFFFFLL;
  sqlite3_bind_int64(a2, 1, v4);
  v5 = *(_QWORD *)(a1 + 40);
  if (v5)
    v6 = *(_QWORD *)(a1 + 32) + v5 - 1;
  else
    v6 = 0x7FFFFFFFFFFFFFFFLL;
  return sqlite3_bind_int64(a2, 2, v6);
}

void __77__SGSqlEntityStore_Spotlight__deleteSpotlightReferencesWithBundleIdentifier___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  id v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  int v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  void *v21;
  id v22;
  _QWORD v23[5];
  _QWORD v24[4];
  id v25;
  id v26;
  _QWORD v27[4];
  id v28;

  v2 = (void *)objc_opt_new();
  v3 = (void *)objc_opt_new();
  v4 = *(void **)(a1 + 40);
  v5 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v6 = MEMORY[0x1E0C809B0];
  v27[0] = MEMORY[0x1E0C809B0];
  v27[1] = 3221225472;
  v27[2] = __77__SGSqlEntityStore_Spotlight__deleteSpotlightReferencesWithBundleIdentifier___block_invoke_2;
  v27[3] = &unk_1E7DB7720;
  v28 = v4;
  v24[0] = v6;
  v24[1] = 3221225472;
  v24[2] = __77__SGSqlEntityStore_Spotlight__deleteSpotlightReferencesWithBundleIdentifier___block_invoke_3;
  v24[3] = &unk_1E7DB53F8;
  v7 = v2;
  v25 = v7;
  v8 = v3;
  v26 = v8;
  objc_msgSend(v5, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("SELECT id, entityId FROM entityReferences WHERE bundleIdentifier = ?"), v27, v24, 0);
  objc_msgSend(*(id *)(a1 + 32), "deleteURLsFromBundleIdentifier:", *(_QWORD *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 32), "messageIdsForBundleIdentifier:limit:", *(_QWORD *)(a1 + 40), 500);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v9, "count"))
  {
    v10 = 0;
    do
    {
      v11 = v9;
      objc_msgSend(v9, "objectAtIndexedSubscript:", 0);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = objc_msgSend(v10, "containsObject:", v12);

      if (v13)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "handleFailureInMethod:object:file:lineNumber:description:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 32), CFSTR("SGSqlEntityStore+Spotlight.m"), 481, CFSTR("Encountered repeated message ID for deletion"));

      }
      objc_msgSend(*(id *)(a1 + 32), "deleteMailIntelligenceForMessageIds:", v11);

      objc_msgSend(*(id *)(a1 + 32), "messageIdsForBundleIdentifier:limit:", *(_QWORD *)(a1 + 40), 500);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = v11;
    }
    while (objc_msgSend(v9, "count"));
  }
  else
  {
    v11 = 0;
  }

  if (objc_msgSend(v7, "count"))
  {
    v23[0] = v6;
    v23[1] = 3221225472;
    v23[2] = __77__SGSqlEntityStore_Spotlight__deleteSpotlightReferencesWithBundleIdentifier___block_invoke_4;
    v23[3] = &unk_1E7DB5420;
    v23[4] = *(_QWORD *)(a1 + 32);
    objc_msgSend(v7, "enumerateRangesUsingBlock:", v23);
    v15 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E20]), "initWithCapacity:", objc_msgSend(v8, "count"));
    v16 = (void *)MEMORY[0x1C3BD4F6C]();
    v18 = v6;
    v19 = 3221225472;
    v20 = __77__SGSqlEntityStore_Spotlight__deleteSpotlightReferencesWithBundleIdentifier___block_invoke_6;
    v21 = &unk_1E7DB52F0;
    v17 = v15;
    v22 = v17;
    objc_msgSend(v8, "enumerateIndexesUsingBlock:", &v18);

    objc_autoreleasePoolPop(v16);
    objc_msgSend(*(id *)(a1 + 32), "_deleteIfNoSpotlightReferences:addToRecentlyDeletedCache:", v17, 0, v18, v19, v20, v21);

  }
}

uint64_t __77__SGSqlEntityStore_Spotlight__deleteSpotlightReferencesWithBundleIdentifier___block_invoke_2(uint64_t a1, sqlite3_stmt *a2)
{
  return sqlite3_bind_text(a2, 1, (const char *)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 32)), "UTF8String"), -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
}

uint64_t __77__SGSqlEntityStore_Spotlight__deleteSpotlightReferencesWithBundleIdentifier___block_invoke_3(uint64_t a1, sqlite3_stmt *a2)
{
  objc_msgSend(*(id *)(a1 + 32), "addIndex:", sqlite3_column_int64(a2, 0));
  objc_msgSend(*(id *)(a1 + 40), "addIndex:", sqlite3_column_int64(a2, 1));
  return 0;
}

uint64_t __77__SGSqlEntityStore_Spotlight__deleteSpotlightReferencesWithBundleIdentifier___block_invoke_4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  _QWORD v5[6];

  v3 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __77__SGSqlEntityStore_Spotlight__deleteSpotlightReferencesWithBundleIdentifier___block_invoke_5;
  v5[3] = &__block_descriptor_48_e23_v16__0__sqlite3_stmt__8l;
  v5[4] = a2;
  v5[5] = a3;
  return objc_msgSend(v3, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("DELETE FROM entityReferences WHERE id BETWEEN ? AND ?"), v5, 0, 0);
}

void __77__SGSqlEntityStore_Spotlight__deleteSpotlightReferencesWithBundleIdentifier___block_invoke_6(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  objc_msgSend(MEMORY[0x1E0D19920], "recordIdForEmailWithRowId:", a2);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "addObject:", v3);

}

uint64_t __77__SGSqlEntityStore_Spotlight__deleteSpotlightReferencesWithBundleIdentifier___block_invoke_5(uint64_t a1, sqlite3_stmt *a2)
{
  sqlite3_int64 v4;
  uint64_t v5;
  sqlite3_int64 v6;

  if (*(_QWORD *)(a1 + 40))
    v4 = *(_QWORD *)(a1 + 32);
  else
    v4 = 0x7FFFFFFFFFFFFFFFLL;
  sqlite3_bind_int64(a2, 1, v4);
  v5 = *(_QWORD *)(a1 + 40);
  if (v5)
    v6 = *(_QWORD *)(a1 + 32) + v5 - 1;
  else
    v6 = 0x7FFFFFFFFFFFFFFFLL;
  return sqlite3_bind_int64(a2, 2, v6);
}

void __95__SGSqlEntityStore_Spotlight__deleteSpotlightReferencesWithBundleIdentifier_domainIdentifiers___block_invoke(_QWORD *a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  id v9;
  _QWORD v10[4];
  id v11;
  uint64_t v12;
  id v13;
  uint64_t v14;

  v3 = a2;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[2] = __95__SGSqlEntityStore_Spotlight__deleteSpotlightReferencesWithBundleIdentifier_domainIdentifiers___block_invoke_2;
  v10[3] = &unk_1E7DB5990;
  v4 = a1[4];
  v5 = (void *)a1[5];
  v6 = *(void **)(v4 + 8);
  v10[1] = 3221225472;
  v11 = v3;
  v12 = v4;
  v7 = v5;
  v8 = a1[6];
  v13 = v7;
  v14 = v8;
  v9 = v3;
  objc_msgSend(v6, "writeTransaction:", v10);

}

void __95__SGSqlEntityStore_Spotlight__deleteSpotlightReferencesWithBundleIdentifier_domainIdentifiers___block_invoke_2(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  unint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  int v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  _QWORD v24[4];
  id v25;
  _QWORD v26[4];
  id v27;
  _QWORD v28[4];
  id v29;
  id v30;
  _QWORD v31[4];
  id v32;
  id v33;

  v2 = (void *)objc_opt_new();
  v3 = (void *)objc_opt_new();
  v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithString:", CFSTR("SELECT id, entityId FROM entityReferences WHERE bundleIdentifier = ? AND ((domainIdentifier GLOB ?)"));
  if ((unint64_t)objc_msgSend(*(id *)(a1 + 32), "count") >= 2)
  {
    v5 = 1;
    do
    {
      objc_msgSend(v4, "appendString:", CFSTR(" OR (domainIdentifier GLOB ?)"));
      ++v5;
    }
    while (v5 < objc_msgSend(*(id *)(a1 + 32), "count"));
  }
  objc_msgSend(v4, "appendString:", CFSTR(")"));
  v6 = *(void **)(a1 + 48);
  v7 = *(void **)(*(_QWORD *)(a1 + 40) + 8);
  v8 = MEMORY[0x1E0C809B0];
  v31[0] = MEMORY[0x1E0C809B0];
  v31[1] = 3221225472;
  v31[2] = __95__SGSqlEntityStore_Spotlight__deleteSpotlightReferencesWithBundleIdentifier_domainIdentifiers___block_invoke_3;
  v31[3] = &unk_1E7DB6E80;
  v32 = v6;
  v33 = *(id *)(a1 + 32);
  v28[0] = v8;
  v28[1] = 3221225472;
  v28[2] = __95__SGSqlEntityStore_Spotlight__deleteSpotlightReferencesWithBundleIdentifier_domainIdentifiers___block_invoke_4;
  v28[3] = &unk_1E7DB6BE0;
  v23 = v2;
  v29 = v23;
  v9 = v3;
  v30 = v9;
  objc_msgSend(v7, "prepAndRunSQL:onPrep:onRow:onError:", v4, v31, v28, 0);
  v11 = *(void **)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v12 = (void *)objc_msgSend(*(id *)(a1 + 32), "copy");
  objc_msgSend(v11, "deleteURLsFromBundleIdentifier:groupIdentifierGlobs:", v10, v12);

  objc_msgSend(*(id *)(a1 + 40), "messageIdsForBundleIdentifier:domainIdentifierGlobs:limit:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 32), 500);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v13, "count"))
  {
    v14 = 0;
    do
    {
      v15 = v13;
      objc_msgSend(v13, "objectAtIndexedSubscript:", 0, v23);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = objc_msgSend(v14, "containsObject:", v16);

      if (v17)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "handleFailureInMethod:object:file:lineNumber:description:", *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 40), CFSTR("SGSqlEntityStore+Spotlight.m"), 431, CFSTR("Encountered repeated message ID for deletion"));

      }
      objc_msgSend(*(id *)(a1 + 40), "deleteMailIntelligenceForMessageIds:", v15);

      objc_msgSend(*(id *)(a1 + 40), "messageIdsForBundleIdentifier:domainIdentifierGlobs:limit:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 32), 500);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = v15;
    }
    while (objc_msgSend(v13, "count"));
  }
  else
  {
    v15 = 0;
  }

  if (objc_msgSend(v23, "count"))
  {
    v19 = *(void **)(*(_QWORD *)(a1 + 40) + 8);
    v26[0] = v8;
    v26[1] = 3221225472;
    v26[2] = __95__SGSqlEntityStore_Spotlight__deleteSpotlightReferencesWithBundleIdentifier_domainIdentifiers___block_invoke_5;
    v26[3] = &unk_1E7DB74A0;
    v27 = v23;
    objc_msgSend(v19, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("DELETE FROM entityReferences WHERE id IN _pas_nsindexset(:affectedReferenceIds)"), v26, 0, 0);
    v20 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E20]), "initWithCapacity:", objc_msgSend(v9, "count"));
    v21 = (void *)MEMORY[0x1C3BD4F6C]();
    v24[0] = v8;
    v24[1] = 3221225472;
    v24[2] = __95__SGSqlEntityStore_Spotlight__deleteSpotlightReferencesWithBundleIdentifier_domainIdentifiers___block_invoke_6;
    v24[3] = &unk_1E7DB52F0;
    v22 = v20;
    v25 = v22;
    objc_msgSend(v9, "enumerateIndexesUsingBlock:", v24);

    objc_autoreleasePoolPop(v21);
    objc_msgSend(*(id *)(a1 + 40), "_deleteIfNoSpotlightReferences:addToRecentlyDeletedCache:", v22, 0);

  }
}

void __95__SGSqlEntityStore_Spotlight__deleteSpotlightReferencesWithBundleIdentifier_domainIdentifiers___block_invoke_3(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  objc_msgSend(v3, "bindParam:toNSString:", 1, *(_QWORD *)(a1 + 32));
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v4 = *(id *)(a1 + 40);
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v11;
    v8 = 2;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v11 != v7)
          objc_enumerationMutation(v4);
        objc_msgSend(v3, "bindParam:toNSString:", v8 + v9, *(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * v9), (_QWORD)v10);
        ++v9;
      }
      while (v6 != v9);
      v8 = (v8 + v9);
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v6);
  }

}

uint64_t __95__SGSqlEntityStore_Spotlight__deleteSpotlightReferencesWithBundleIdentifier_domainIdentifiers___block_invoke_4(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  uint64_t v6;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  objc_msgSend(v3, "addIndex:", objc_msgSend(v4, "getInt64ForColumnName:table:", "id", 0));
  v5 = *(void **)(a1 + 40);
  v6 = objc_msgSend(v4, "getInt64ForColumnName:table:", "entityId", 0);

  objc_msgSend(v5, "addIndex:", v6);
  return *MEMORY[0x1E0D81780];
}

uint64_t __95__SGSqlEntityStore_Spotlight__deleteSpotlightReferencesWithBundleIdentifier_domainIdentifiers___block_invoke_5(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "bindNamedParam:toNSIndexSet:", ":affectedReferenceIds", *(_QWORD *)(a1 + 32));
}

void __95__SGSqlEntityStore_Spotlight__deleteSpotlightReferencesWithBundleIdentifier_domainIdentifiers___block_invoke_6(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  objc_msgSend(MEMORY[0x1E0D19920], "recordIdForEmailWithRowId:", a2);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "addObject:", v3);

}

void __111__SGSqlEntityStore_Spotlight___recordIdsFromRemovingSpotlightReferencesWithBundleIdentifier_uniqueIdentifiers___block_invoke(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  _QWORD v6[4];
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;

  v2 = MEMORY[0x1E0C809B0];
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __111__SGSqlEntityStore_Spotlight___recordIdsFromRemovingSpotlightReferencesWithBundleIdentifier_uniqueIdentifiers___block_invoke_2;
  v8[3] = &unk_1E7DB6E80;
  v9 = *(id *)(a1 + 32);
  v10 = *(id *)(a1 + 40);
  v3 = (void *)MEMORY[0x1C3BD5158](v8);
  v4 = *(void **)(a1 + 56);
  v5 = *(void **)(*(_QWORD *)(a1 + 48) + 8);
  v6[0] = v2;
  v6[1] = 3221225472;
  v6[2] = __111__SGSqlEntityStore_Spotlight___recordIdsFromRemovingSpotlightReferencesWithBundleIdentifier_uniqueIdentifiers___block_invoke_3;
  v6[3] = &unk_1E7DB6ED0;
  v7 = v4;
  objc_msgSend(v5, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("SELECT DISTINCT entityId FROM entityReferences WHERE bundleIdentifier = :bid AND uniqueIdentifier IN _pas_nsarray(:uids)"), v3, v6, 0);
  if (objc_msgSend(*(id *)(a1 + 56), "count"))
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 8), "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("DELETE FROM entityReferences WHERE bundleIdentifier = :bid AND uniqueIdentifier IN _pas_nsarray(:uids)"), v3, 0, 0);

}

void __111__SGSqlEntityStore_Spotlight___recordIdsFromRemovingSpotlightReferencesWithBundleIdentifier_uniqueIdentifiers___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = a2;
  objc_msgSend(v4, "bindNamedParam:toNSString:", ":bid", v3);
  objc_msgSend(v4, "bindNamedParam:toNSArray:", ":uids", *(_QWORD *)(a1 + 40));

}

uint64_t __111__SGSqlEntityStore_Spotlight___recordIdsFromRemovingSpotlightReferencesWithBundleIdentifier_uniqueIdentifiers___block_invoke_3(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 32);
  objc_msgSend(MEMORY[0x1E0D19920], "recordIdForEmailWithRowId:", objc_msgSend(a2, "getInt64ForColumnName:table:", "entityId", "entityReferences"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "addObject:", v3);

  return *MEMORY[0x1E0D81780];
}

void __49__SGSqlEntityStore_Spotlight__isRecentlyDeleted___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  id v5;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  objc_msgSend(v3, "serialize");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  LOBYTE(v3) = objc_msgSend(v4, "containsObject:", v5);

  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = (_BYTE)v3;
}

void __88__SGSqlEntityStore_Spotlight___deleteIfNoSpotlightReferences_addToRecentlyDeletedCache___block_invoke(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  objc_msgSend(v3, "removeObject:", *(_QWORD *)(a1 + 32));
  objc_msgSend(v3, "addObject:", *(_QWORD *)(a1 + 32));
  if ((unint64_t)objc_msgSend(v3, "count") >= 0x14)
    objc_msgSend(v3, "removeObjectAtIndex:", 0);

}

uint64_t __71__SGSqlEntityStore_Spotlight___markRecordsLostIfNoSpotlightReferences___block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "emailKey");
}

void __86__SGSqlEntityStore_Spotlight___duplicateKeysWithZeroSpotlightReferencesFromRecordIds___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  _QWORD v18[4];
  id v19;
  _QWORD v20[5];
  id v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[128];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v2 = (void *)objc_opt_new();
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v3 = *(id *)(a1 + 32);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v23;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v23 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v22 + 1) + 8 * i);
        if (objc_msgSend(v8, "tableId") != 1)
        {
          objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v9, "handleFailureInMethod:object:file:lineNumber:description:", *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 40), CFSTR("SGSqlEntityStore+Spotlight.m"), 269, CFSTR("Unexpected table for recordId: %@"), v8);

        }
        objc_msgSend(v2, "addIndex:", objc_msgSend(v8, "rowId"));
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
    }
    while (v5);
  }

  v10 = (void *)objc_msgSend(v2, "mutableCopy");
  v11 = MEMORY[0x1E0C809B0];
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 3221225472;
  v20[2] = __86__SGSqlEntityStore_Spotlight___duplicateKeysWithZeroSpotlightReferencesFromRecordIds___block_invoke_2;
  v20[3] = &unk_1E7DB72C0;
  v20[4] = *(_QWORD *)(a1 + 40);
  v12 = v10;
  v21 = v12;
  objc_msgSend(v2, "enumerateRangesUsingBlock:", v20);
  if (objc_msgSend(v12, "count"))
  {
    v18[0] = v11;
    v18[1] = 3221225472;
    v18[2] = __86__SGSqlEntityStore_Spotlight___duplicateKeysWithZeroSpotlightReferencesFromRecordIds___block_invoke_5;
    v18[3] = &unk_1E7DB52F0;
    v19 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E20]), "initWithCapacity:", objc_msgSend(v12, "count"));
    v13 = v19;
    objc_msgSend(v12, "enumerateIndexesUsingBlock:", v18);
    objc_msgSend(*(id *)(a1 + 40), "duplicateKeysFromRecordIds:", v13);
    v14 = objc_claimAutoreleasedReturnValue();
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v16 = *(void **)(v15 + 40);
    *(_QWORD *)(v15 + 40) = v14;

  }
  else
  {
    v17 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v13 = *(id *)(v17 + 40);
    *(_QWORD *)(v17 + 40) = MEMORY[0x1E0C9AA60];
  }

}

void __86__SGSqlEntityStore_Spotlight___duplicateKeysWithZeroSpotlightReferencesFromRecordIds___block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v4;
  _QWORD v5[4];
  id v6;
  _QWORD v7[6];

  v3 = *(void **)(a1 + 40);
  v4 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __86__SGSqlEntityStore_Spotlight___duplicateKeysWithZeroSpotlightReferencesFromRecordIds___block_invoke_3;
  v7[3] = &__block_descriptor_48_e23_v16__0__sqlite3_stmt__8l;
  v7[4] = a2;
  v7[5] = a3;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __86__SGSqlEntityStore_Spotlight___duplicateKeysWithZeroSpotlightReferencesFromRecordIds___block_invoke_4;
  v5[3] = &unk_1E7DB52C8;
  v6 = v3;
  objc_msgSend(v4, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("SELECT DISTINCT entityId FROM entityReferences WHERE entityId BETWEEN ? AND ?"), v7, v5, 0);

}

void __86__SGSqlEntityStore_Spotlight___duplicateKeysWithZeroSpotlightReferencesFromRecordIds___block_invoke_5(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  objc_msgSend(MEMORY[0x1E0D19920], "recordIdForEmailWithRowId:", a2);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "addObject:", v3);

}

uint64_t __86__SGSqlEntityStore_Spotlight___duplicateKeysWithZeroSpotlightReferencesFromRecordIds___block_invoke_3(uint64_t a1, sqlite3_stmt *a2)
{
  sqlite3_int64 v4;
  uint64_t v5;
  sqlite3_int64 v6;

  if (*(_QWORD *)(a1 + 40))
    v4 = *(_QWORD *)(a1 + 32);
  else
    v4 = 0x7FFFFFFFFFFFFFFFLL;
  sqlite3_bind_int64(a2, 1, v4);
  v5 = *(_QWORD *)(a1 + 40);
  if (v5)
    v6 = *(_QWORD *)(a1 + 32) + v5 - 1;
  else
    v6 = 0x7FFFFFFFFFFFFFFFLL;
  return sqlite3_bind_int64(a2, 2, v6);
}

uint64_t __86__SGSqlEntityStore_Spotlight___duplicateKeysWithZeroSpotlightReferencesFromRecordIds___block_invoke_4(uint64_t a1, sqlite3_stmt *a2)
{
  objc_msgSend(*(id *)(a1 + 32), "removeIndex:", sqlite3_column_int64(a2, 0));
  return 0;
}

void __132__SGSqlEntityStore_Spotlight__addSpotlightReferenceToEmailIfFullyDownloaded_withBundleIdentifier_uniqueIdentifier_domainIdentifier___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  id v11;
  void *v12;
  _QWORD v13[5];
  _QWORD v14[4];
  id v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  char v19;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)MEMORY[0x1C3BD4F6C]();
  v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E60]), "initWithObjects:", *(_QWORD *)(a1 + 40), 0);
  objc_autoreleasePoolPop(v3);
  objc_msgSend(v2, "duplicateKeysFromMailMessageKeys:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "firstObject");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    objc_msgSend(*(id *)(a1 + 32), "recordIdForKey:", v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = v7;
    if (v7)
    {
      if (objc_msgSend(v7, "tableId") != 1)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "handleFailureInMethod:object:file:lineNumber:description:", *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 32), CFSTR("SGSqlEntityStore+Spotlight.m"), 228, CFSTR("Unexpected table for recordId: %@"), v8);

      }
      v16 = 0;
      v17 = &v16;
      v18 = 0x2020000000;
      v19 = 0;
      v9 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
      v10 = MEMORY[0x1E0C809B0];
      v14[0] = MEMORY[0x1E0C809B0];
      v14[1] = 3221225472;
      v14[2] = __132__SGSqlEntityStore_Spotlight__addSpotlightReferenceToEmailIfFullyDownloaded_withBundleIdentifier_uniqueIdentifier_domainIdentifier___block_invoke_2;
      v14[3] = &unk_1E7DB74A0;
      v11 = v8;
      v15 = v11;
      v13[0] = v10;
      v13[1] = 3221225472;
      v13[2] = __132__SGSqlEntityStore_Spotlight__addSpotlightReferenceToEmailIfFullyDownloaded_withBundleIdentifier_uniqueIdentifier_domainIdentifier___block_invoke_3;
      v13[3] = &unk_1E7DB7510;
      v13[4] = &v16;
      objc_msgSend(v9, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("SELECT state, tags FROM emailMetadata WHERE id = :id LIMIT 1"), v14, v13, 0);
      if (*((_BYTE *)v17 + 24))
      {
        objc_msgSend(*(id *)(a1 + 32), "addSpotlightReferenceToEmailRecordId:withBundleIdentifier:uniqueIdentifier:domainIdentifier:", v11, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = 1;
      }

      _Block_object_dispose(&v16, 8);
    }

  }
}

void __132__SGSqlEntityStore_Spotlight__addSpotlightReferenceToEmailIfFullyDownloaded_withBundleIdentifier_uniqueIdentifier_domainIdentifier___block_invoke_2(uint64_t a1, void *a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  objc_msgSend(v3, "bindNamedParam:toInt64:", ":id", objc_msgSend(v2, "rowId"));

}

uint64_t __132__SGSqlEntityStore_Spotlight__addSpotlightReferenceToEmailIfFullyDownloaded_withBundleIdentifier_uniqueIdentifier_domainIdentifier___block_invoke_3(uint64_t a1, void *a2)
{
  id v3;
  int v4;
  void *v5;
  void *v6;
  void *v7;
  unsigned __int8 *v8;

  v3 = a2;
  v4 = objc_msgSend(v3, "getInt64ForColumn:", 0);
  objc_msgSend(v3, "getNSStringForColumn:", 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  SGEntityTagsFromStorage(v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4 == 1)
  {
    objc_msgSend(MEMORY[0x1E0D197F0], "isPartiallyDownloaded");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_msgSend(v6, "containsObject:", v7) ^ 1;

  }
  else
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
  }
  v8 = (unsigned __int8 *)MEMORY[0x1E0D81788];

  return *v8;
}

void __46__SGSqlEntityStore_Spotlight__recordIdForKey___block_invoke(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  objc_msgSend(*(id *)(a1 + 32), "messageKey");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "serialize");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  +[SGSqliteDatabase bindParam:name:nsstring:](SGSqliteDatabase, "bindParam:name:nsstring:", a2, ":key", v3);

}

uint64_t __46__SGSqlEntityStore_Spotlight__recordIdForKey___block_invoke_2(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  objc_msgSend(MEMORY[0x1E0D19920], "recordIdForEmailWithRowId:", sqlite3_column_int64(a2, 0));
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

  return 1;
}

void __46__SGSqlEntityStore_Spotlight__recordIdForKey___block_invoke_3(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":entityType", objc_msgSend(*(id *)(a1 + 32), "entityType"));
  objc_msgSend(*(id *)(a1 + 32), "entityKey");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "serialize");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  +[SGSqliteDatabase bindParam:name:nsstring:](SGSqliteDatabase, "bindParam:name:nsstring:", a2, ":entityKey", v5);

  objc_msgSend(*(id *)(a1 + 32), "parentKey");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    objc_msgSend(*(id *)(a1 + 32), "parentKey");
    v8 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "serialize");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    +[SGSqliteDatabase bindParam:name:nsstring:](SGSqliteDatabase, "bindParam:name:nsstring:", a2, ":parentKey", v7);

  }
}

uint64_t __46__SGSqlEntityStore_Spotlight__recordIdForKey___block_invoke_4(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  objc_msgSend(MEMORY[0x1E0D19920], "recordIdWithTableId:rowId:", 0, sqlite3_column_int64(a2, 0));
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

  return 1;
}

void __58__SGSqlEntityStore_Spotlight__duplicateKeysFromRecordIds___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  _QWORD v6[4];
  id v7;
  _QWORD v8[4];
  id v9;
  _QWORD v10[4];
  id v11;
  _QWORD v12[4];
  id v13;

  v2 = *(void **)(a1 + 40);
  v3 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v4 = MEMORY[0x1E0C809B0];
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __58__SGSqlEntityStore_Spotlight__duplicateKeysFromRecordIds___block_invoke_2;
  v12[3] = &unk_1E7DB74A0;
  v13 = v2;
  v10[0] = v4;
  v10[1] = 3221225472;
  v10[2] = __58__SGSqlEntityStore_Spotlight__duplicateKeysFromRecordIds___block_invoke_3;
  v10[3] = &unk_1E7DB6ED0;
  v11 = *(id *)(a1 + 48);
  objc_msgSend(v3, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("SELECT key, type FROM emailMetadata WHERE id IN _pas_nsindexset(:emailIndexSet)"), v12, v10, 0);
  v5 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v8[0] = v4;
  v8[1] = 3221225472;
  v8[2] = __58__SGSqlEntityStore_Spotlight__duplicateKeysFromRecordIds___block_invoke_4;
  v8[3] = &unk_1E7DB74A0;
  v9 = *(id *)(a1 + 56);
  v6[0] = v4;
  v6[1] = 3221225472;
  v6[2] = __58__SGSqlEntityStore_Spotlight__duplicateKeysFromRecordIds___block_invoke_5;
  v6[3] = &unk_1E7DB6ED0;
  v7 = *(id *)(a1 + 48);
  objc_msgSend(v5, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("SELECT e.entityKey, e.entityType, ep.parentKey FROM entity AS e INNER JOIN entityParentage AS ep ON e.id = ep.childId WHERE e.id IN _pas_nsindexset(:nonEmailIndexSet)"), v8, v6, 0);

}

uint64_t __58__SGSqlEntityStore_Spotlight__duplicateKeysFromRecordIds___block_invoke_2(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "bindNamedParam:toNSIndexSet:", ":emailIndexSet", *(_QWORD *)(a1 + 32));
}

uint64_t __58__SGSqlEntityStore_Spotlight__duplicateKeysFromRecordIds___block_invoke_3(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  SGMessageKey *v5;
  void *v6;
  SGMessageKey *v7;
  void *v8;
  SGDuplicateKey *v9;
  unsigned __int8 *v10;

  v3 = a2;
  v4 = objc_msgSend(v3, "getInt64ForColumnName:table:", "type", 0);
  if (SGEntityTypeIsMessage())
  {
    v5 = [SGMessageKey alloc];
    objc_msgSend(v3, "nonnullNSStringForColumnName:table:", "key", 0);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = -[SGMessageKey initWithSerialized:](v5, "initWithSerialized:", v6);

    v8 = *(void **)(a1 + 32);
    v9 = -[SGDuplicateKey initWithEntityKey:entityType:parentKey:]([SGDuplicateKey alloc], "initWithEntityKey:entityType:parentKey:", v7, v4, 0);
    objc_msgSend(v8, "addObject:", v9);

  }
  v10 = (unsigned __int8 *)MEMORY[0x1E0D81780];

  return *v10;
}

uint64_t __58__SGSqlEntityStore_Spotlight__duplicateKeysFromRecordIds___block_invoke_4(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "bindNamedParam:toNSIndexSet:", ":nonEmailIndexSet", *(_QWORD *)(a1 + 32));
}

uint64_t __58__SGSqlEntityStore_Spotlight__duplicateKeysFromRecordIds___block_invoke_5(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  SGDuplicateKey *v8;
  unsigned __int8 *v9;

  v3 = a2;
  objc_msgSend(v3, "nonnullNSStringForColumnName:table:", "entityKey", "entity");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v3, "getInt64ForColumnName:table:", "entityType", "entity");
  objc_msgSend(v3, "getNSStringForColumnName:table:", "parentKey", "entityParentage");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v7 = *(void **)(a1 + 32);
  v8 = -[SGDuplicateKey initWithSerializedEntityKey:entityType:serializedParentKey:]([SGDuplicateKey alloc], "initWithSerializedEntityKey:entityType:serializedParentKey:", v4, v5, v6);
  objc_msgSend(v7, "addObject:", v8);

  v9 = (unsigned __int8 *)MEMORY[0x1E0D81780];
  return *v9;
}

uint64_t __64__SGSqlEntityStore_Spotlight__duplicateKeysFromMailMessageKeys___block_invoke(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(MEMORY[0x1E0D197F0], "messageWithEmailKey:", a2);
}

void __123__SGSqlEntityStore_Spotlight__addSpotlightReferenceToEmailRecordId_withBundleIdentifier_uniqueIdentifier_domainIdentifier___block_invoke(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  _QWORD v10[4];
  _QWORD v11[5];

  v11[4] = *MEMORY[0x1E0C80C00];
  v2 = a1[5];
  v3 = *(void **)(a1[4] + 8);
  v10[0] = CFSTR("bundleIdentifier");
  v10[1] = CFSTR("uniqueIdentifier");
  v5 = a1[6];
  v4 = (void *)a1[7];
  v11[0] = v2;
  v11[1] = v5;
  v10[2] = CFSTR("entityId");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", objc_msgSend(v4, "rowId"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v11[2] = v6;
  v10[3] = CFSTR("domainIdentifier");
  v7 = (void *)a1[8];
  v8 = v7;
  if (!v7)
  {
    objc_msgSend(MEMORY[0x1E0C99E38], "null");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
  }
  v11[3] = v8;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v11, v10, 4);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "insertOrReplaceIntoTable:dictionary:onError:", CFSTR("entityReferences"), v9, 0);

  if (!v7)
}

uint64_t __89__SGSqlEntityStore_Spotlight__hasSpotlightReferenceForBundleIdentifier_uniqueIdentifier___block_invoke(uint64_t a1, sqlite3_stmt *a2)
{
  sqlite3_bind_text(a2, 1, (const char *)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 32)), "UTF8String"), -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  return sqlite3_bind_text(a2, 2, (const char *)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 40)), "UTF8String"), -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
}

uint64_t __89__SGSqlEntityStore_Spotlight__hasSpotlightReferenceForBundleIdentifier_uniqueIdentifier___block_invoke_2(uint64_t a1)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  return 1;
}

uint64_t __89__SGSqlEntityStore_Spotlight__hasSpotlightReferenceForBundleIdentifier_uniqueIdentifier___block_invoke_3(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  int v5;
  id v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  sgLogHandle();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    v5 = 138412290;
    v6 = v2;
    _os_log_error_impl(&dword_1C3607000, v3, OS_LOG_TYPE_ERROR, "Failed to check for existing spotlight reference: %@", (uint8_t *)&v5, 0xCu);
  }

  return 1;
}

uint64_t __105__SGSqlEntityStore_Spotlight__domainIdentifierForSpotlightReferenceForBundleIdentifier_uniqueIdentifier___block_invoke(uint64_t a1, sqlite3_stmt *a2)
{
  sqlite3_bind_text(a2, 1, (const char *)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 32)), "UTF8String"), -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  return sqlite3_bind_text(a2, 2, (const char *)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 40)), "UTF8String"), -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
}

uint64_t __105__SGSqlEntityStore_Spotlight__domainIdentifierForSpotlightReferenceForBundleIdentifier_uniqueIdentifier___block_invoke_2(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  sqlite3_column_nsstring(a2, 0);
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

  return 1;
}

uint64_t __105__SGSqlEntityStore_Spotlight__domainIdentifierForSpotlightReferenceForBundleIdentifier_uniqueIdentifier___block_invoke_3(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  int v5;
  id v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  sgLogHandle();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    v5 = 138412290;
    v6 = v2;
    _os_log_error_impl(&dword_1C3607000, v3, OS_LOG_TYPE_ERROR, "Failed to check for existing spotlight reference: %@", (uint8_t *)&v5, 0xCu);
  }

  return 1;
}

- (id)loadMessagesToRefresh
{
  void *v3;
  SGSqliteDatabase *db;
  id v5;
  _QWORD v7[4];
  id v8;

  v3 = (void *)objc_opt_new();
  db = self->_db;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __60__SGSqlEntityStore_MessageManagement__loadMessagesToRefresh__block_invoke_2;
  v7[3] = &unk_1E7DB6ED0;
  v5 = v3;
  v8 = v5;
  -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](db, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("SELECT key FROM emailMetadata WHERE state IN (:lost, :undisplayable) ORDER BY lastSeenTimestamp asc"), &__block_literal_global_31815, v7, 0);

  return v5;
}

- (void)updateMessages:(id)a3 state:(unint64_t)a4
{
  id v6;
  id v7;

  v6 = a3;
  v7 = v6;
  switch(a4)
  {
    case 0uLL:
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("Invalid state"), CFSTR("state can't be SGMailMessageUnset"));
      goto LABEL_6;
    case 1uLL:
      -[SGSqlEntityStore markMessagesLost:](self, "markMessagesLost:", v6);
      goto LABEL_6;
    case 2uLL:
      -[SGSqlEntityStore markMessagesFound:](self, "markMessagesFound:", v6);
      goto LABEL_6;
    case 3uLL:
      -[SGSqlEntityStore deleteMessages:](self, "deleteMessages:", v6);
LABEL_6:
      v6 = v7;
      break;
    default:
      break;
  }

}

- (void)markMessagesUndisplayablyLost:(id)a3
{
  void *v4;
  SGSqliteDatabase *db;
  id v6;
  id v7;
  _QWORD v8[5];
  id v9;

  v7 = a3;
  if (objc_msgSend(v7, "count"))
  {
    -[SGSqlEntityStore clearMasterEntityCache](self, "clearMasterEntityCache");
    sgMapSelector();
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    db = self->_db;
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = __69__SGSqlEntityStore_MessageManagement__markMessagesUndisplayablyLost___block_invoke;
    v8[3] = &unk_1E7DB6A30;
    v8[4] = self;
    v9 = v4;
    v6 = v4;
    -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v8);

  }
}

- (void)markMessagesLost:(id)a3
{
  id v4;
  void *v5;
  SGSqliteDatabase *db;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  void *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _QWORD v18[5];
  id v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t);
  void (*v25)(uint64_t);
  id v26;
  _BYTE v27[128];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (objc_msgSend(v4, "count"))
  {
    v21 = 0;
    v22 = &v21;
    v23 = 0x3032000000;
    v24 = __Block_byref_object_copy__31793;
    v25 = __Block_byref_object_dispose__31794;
    v26 = 0;
    v26 = (id)objc_opt_new();
    -[SGSqlEntityStore clearMasterEntityCache](self, "clearMasterEntityCache");
    sgMapSelector();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    db = self->_db;
    v18[0] = MEMORY[0x1E0C809B0];
    v18[1] = 3221225472;
    v18[2] = __56__SGSqlEntityStore_MessageManagement__markMessagesLost___block_invoke;
    v18[3] = &unk_1E7DB7878;
    v18[4] = self;
    v7 = v5;
    v19 = v7;
    v20 = &v21;
    -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v18);
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v8 = (id)v22[5];
    v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v14, v27, 16);
    if (v9)
    {
      v10 = *(_QWORD *)v15;
      do
      {
        for (i = 0; i != v9; ++i)
        {
          if (*(_QWORD *)v15 != v10)
            objc_enumerationMutation(v8);
          v12 = *(_QWORD *)(*((_QWORD *)&v14 + 1) + 8 * i);
          objc_msgSend((id)v22[5], "objectForKeyedSubscript:", v12, (_QWORD)v14);
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          -[SGSqlEntityStore pruneLostMessagesWithSource:count:](self, "pruneLostMessagesWithSource:count:", v12, (int)objc_msgSend(v13, "intValue") - self->_lostMessageOverflow);

        }
        v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v14, v27, 16);
      }
      while (v9);
    }

    _Block_object_dispose(&v21, 8);
  }

}

- (void)pruneLostMessagesWithSource:(id)a3 count:(unint64_t)a4
{
  id v6;
  void *v7;
  uint64_t v8;
  id v9;
  void *v10;
  SGSqliteDatabase *db;
  id v12;
  id v13;
  SGSqliteDatabase *v14;
  SGSqliteDatabase *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, void *);
  void *v19;
  id v20;
  id v21;
  unint64_t v22;
  _QWORD v23[4];
  id v24;
  id v25;
  unint64_t v26;
  _QWORD v27[4];
  id v28;
  id v29;
  unint64_t v30;
  _QWORD v31[4];
  id v32;

  v6 = a3;
  v7 = (void *)objc_opt_new();
  v8 = MEMORY[0x1E0C809B0];
  v31[0] = MEMORY[0x1E0C809B0];
  v31[1] = 3221225472;
  v31[2] = __73__SGSqlEntityStore_MessageManagement__pruneLostMessagesWithSource_count___block_invoke;
  v31[3] = &unk_1E7DB6ED0;
  v9 = v7;
  v32 = v9;
  v10 = (void *)MEMORY[0x1C3BD5158](v31);
  db = self->_db;
  v27[0] = v8;
  v27[1] = 3221225472;
  v27[2] = __73__SGSqlEntityStore_MessageManagement__pruneLostMessagesWithSource_count___block_invoke_2;
  v27[3] = &unk_1E7DB6B00;
  v12 = v6;
  v28 = v12;
  v30 = a4;
  v13 = v9;
  v29 = v13;
  -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](db, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("SELECT key FROM emailMetadata WHERE unlikely(state = :lost) AND sourceKey = :sourceKey AND NOT (tagsHaveEscapedTag(tags, :eventTag) OR tagsHaveEscapedTag(tags, :contactTag)) ORDER BY lastSeenTimestamp ASC LIMIT :limit"), v27, v10, 0);
  if (objc_msgSend(v13, "count") < a4)
  {
    v14 = self->_db;
    v23[0] = v8;
    v23[1] = 3221225472;
    v23[2] = __73__SGSqlEntityStore_MessageManagement__pruneLostMessagesWithSource_count___block_invoke_3;
    v23[3] = &unk_1E7DB6B00;
    v24 = v12;
    v26 = a4;
    v25 = v13;
    -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](v14, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("SELECT key FROM emailMetadata WHERE unlikely(state = :lost) AND sourceKey = :sourceKey AND tagsHaveEscapedTag(tags, :contactTag) ORDER BY lastSeenTimestamp ASC LIMIT :limit"), v23, v10, 0);

  }
  if (objc_msgSend(v13, "count") < a4)
  {
    v15 = self->_db;
    v16 = v8;
    v17 = 3221225472;
    v18 = __73__SGSqlEntityStore_MessageManagement__pruneLostMessagesWithSource_count___block_invoke_4;
    v19 = &unk_1E7DB6B00;
    v20 = v12;
    v22 = a4;
    v21 = v13;
    -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](v15, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("SELECT key FROM emailMetadata WHERE unlikely(state = :lost) AND sourceKey = :sourceKey AND tagsHaveEscapedTag(tags, :eventTag) ORDER BY lastSeenTimestamp ASC LIMIT :limit"), &v16, v10, 0);

  }
  +[SGAggregateLogging messagesPruned:](SGAggregateLogging, "messagesPruned:", objc_msgSend(v13, "count", v16, v17, v18, v19));
  -[SGSqlEntityStore deleteEntitiesByDuplicateKey:emitChangeNotifications:](self, "deleteEntitiesByDuplicateKey:emitChangeNotifications:", v13, 1);

}

- (void)markMessagesFound:(id)a3
{
  id v4;
  void *v5;
  SGSqliteDatabase *db;
  id v7;
  _QWORD v8[5];
  id v9;

  v4 = a3;
  -[SGSqlEntityStore clearMasterEntityCache](self, "clearMasterEntityCache");
  sgMapSelector();
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  db = self->_db;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __57__SGSqlEntityStore_MessageManagement__markMessagesFound___block_invoke;
  v8[3] = &unk_1E7DB6A30;
  v8[4] = self;
  v9 = v5;
  v7 = v5;
  -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v8);

}

- (id)filterOutUndisplayableEntities:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  void *v14;
  int v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  sgMapSelector();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[SGSqlEntityStore displayableEntities:](self, "displayableEntities:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void *)objc_opt_new();
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v8 = v4;
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v18;
    do
    {
      for (i = 0; i != v10; ++i)
      {
        if (*(_QWORD *)v18 != v11)
          objc_enumerationMutation(v8);
        v13 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * i);
        objc_msgSend(v13, "duplicateKey", (_QWORD)v17);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = objc_msgSend(v6, "containsObject:", v14);

        if (v15)
          objc_msgSend(v7, "addObject:", v13);
      }
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
    }
    while (v10);
  }

  return v7;
}

- (id)displayableEntities:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  SGSqliteDatabase *db;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  char v26;
  void *v27;
  void *v28;
  int v29;
  uint64_t v30;
  void *v31;
  void *v33;
  id obj;
  void *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _QWORD v40[4];
  id v41;
  _QWORD v42[4];
  id v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _BYTE v48[128];
  _BYTE v49[128];
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v35 = (void *)objc_opt_new();
  v5 = (void *)objc_opt_new();
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  v47 = 0u;
  obj = v4;
  v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v44, v49, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v45;
    do
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v45 != v8)
          objc_enumerationMutation(obj);
        v10 = *(void **)(*((_QWORD *)&v44 + 1) + 8 * i);
        objc_msgSend(v10, "entityType");
        if (SGEntityTypeIsCurated())
          v11 = v35;
        else
          v11 = v5;
        objc_msgSend(v11, "addObject:", v10);
      }
      v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v44, v49, 16);
    }
    while (v7);
  }

  v12 = (void *)objc_opt_new();
  if (objc_msgSend(v5, "count"))
  {
    sgMap();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    db = self->_db;
    v42[0] = MEMORY[0x1E0C809B0];
    v42[1] = 3221225472;
    v42[2] = __59__SGSqlEntityStore_MessageManagement__displayableEntities___block_invoke_2;
    v42[3] = &unk_1E7DB74A0;
    v43 = v13;
    v40[0] = MEMORY[0x1E0C809B0];
    v40[1] = 3221225472;
    v40[2] = __59__SGSqlEntityStore_MessageManagement__displayableEntities___block_invoke_3;
    v40[3] = &unk_1E7DB6ED0;
    v41 = v12;
    v15 = v13;
    -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](db, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("SELECT key FROM emailMetadata WHERE state NOT IN (:deleted, :undisplayable) AND key IN _pas_nsarray(:keys)"), v42, v40, 0);

  }
  v33 = (void *)objc_opt_new();
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v16 = v5;
  v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v36, v48, 16);
  if (v17)
  {
    v18 = v17;
    v19 = *(_QWORD *)v37;
    do
    {
      v20 = 0;
      do
      {
        if (*(_QWORD *)v37 != v19)
          objc_enumerationMutation(v16);
        v21 = *(void **)(*((_QWORD *)&v36 + 1) + 8 * v20);
        objc_msgSend(v21, "parentKey");
        v22 = (void *)objc_claimAutoreleasedReturnValue();

        if (v22)
        {
          objc_msgSend(v21, "parentKey");
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v23, "messageKey");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v24, "serialize");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          v26 = objc_msgSend(v12, "containsObject:", v25);

          if ((v26 & 1) == 0)
            goto LABEL_21;
LABEL_20:
          objc_msgSend(v33, "addObject:", v21);
          goto LABEL_21;
        }
        objc_msgSend(v21, "messageKey");
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v27, "serialize");
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        v29 = objc_msgSend(v12, "containsObject:", v28);

        if (v29)
          goto LABEL_20;
LABEL_21:
        ++v20;
      }
      while (v18 != v20);
      v30 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v36, v48, 16);
      v18 = v30;
    }
    while (v30);
  }

  objc_msgSend(v33, "setByAddingObjectsFromSet:", v35);
  v31 = (void *)objc_claimAutoreleasedReturnValue();

  return v31;
}

void __59__SGSqlEntityStore_MessageManagement__displayableEntities___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  objc_msgSend(v3, "bindNamedParam:toInteger:", ":deleted", 2);
  objc_msgSend(v3, "bindNamedParam:toInteger:", ":undisplayable", 4);
  objc_msgSend(v3, "bindNamedParam:toNSArray:", ":keys", *(_QWORD *)(a1 + 32));

}

uint64_t __59__SGSqlEntityStore_MessageManagement__displayableEntities___block_invoke_3(uint64_t a1, void *a2)
{
  void *v3;
  NSObject *v4;
  unsigned __int8 *v5;
  uint8_t v7[16];

  objc_msgSend(a2, "getNSStringForColumnName:table:", "key", "emailMetadata");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    objc_msgSend(*(id *)(a1 + 32), "addObject:", v3);
  }
  else
  {
    sgLogHandle();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_1C3607000, v4, OS_LOG_TYPE_DEFAULT, "nil key found in emailMetadata", v7, 2u);
    }

  }
  v5 = (unsigned __int8 *)MEMORY[0x1E0D81780];

  return *v5;
}

id __59__SGSqlEntityStore_MessageManagement__displayableEntities___block_invoke(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = a2;
  objc_msgSend(v2, "parentKey");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    objc_msgSend(v2, "parentKey");
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v4, "messageKey");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "serialize");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    objc_msgSend(v2, "messageKey");
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v4, "serialize");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v6;
}

void __57__SGSqlEntityStore_MessageManagement__markMessagesFound___block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, void *);
  void *v13;
  id v14;
  uint64_t v15;
  _QWORD v16[4];
  id v17;
  uint64_t v18;

  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "timeIntervalSince1970");
  v4 = v3;

  v5 = MEMORY[0x1E0C809B0];
  v6 = *(void **)(a1 + 40);
  v7 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3221225472;
  v16[2] = __57__SGSqlEntityStore_MessageManagement__markMessagesFound___block_invoke_2;
  v16[3] = &unk_1E7DB6EA8;
  v18 = v4;
  v17 = v6;
  objc_msgSend(v7, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("UPDATE emailMetadata SET state = :state, lastSeenTimestamp = :lastSeen WHERE unlikely(state = :undisplayable) AND key IN _pas_nsarray(:keys)"), v16, 0, 0);
  LODWORD(v7) = sqlite3_changes((sqlite3 *)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "handle"));
  +[SGAggregateLogging messagesFoundAfterUndisplayablyLost:](SGAggregateLogging, "messagesFoundAfterUndisplayablyLost:", (int)v7);
  v8 = *(void **)(a1 + 40);
  v9 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v10 = v5;
  v11 = 3221225472;
  v12 = __57__SGSqlEntityStore_MessageManagement__markMessagesFound___block_invoke_3;
  v13 = &unk_1E7DB6EA8;
  v15 = v4;
  v14 = v8;
  objc_msgSend(v9, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("UPDATE emailMetadata SET state = :state, lastSeenTimestamp = :lastSeen WHERE unlikely(state != :normal) AND key IN _pas_nsarray(:keys)"), &v10, 0, 0);
  +[SGAggregateLogging messagesFound:](SGAggregateLogging, "messagesFound:", sqlite3_changes((sqlite3 *)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "handle", v10, v11, v12, v13))+ (uint64_t)(int)v7);

}

void __57__SGSqlEntityStore_MessageManagement__markMessagesFound___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  objc_msgSend(v3, "bindNamedParam:toInteger:", ":state", 3);
  objc_msgSend(v3, "bindNamedParam:toInteger:", ":undisplayable", 4);
  objc_msgSend(v3, "bindNamedParam:toDouble:", ":lastSeen", *(double *)(a1 + 40));
  objc_msgSend(v3, "bindNamedParam:toNSArray:", ":keys", *(_QWORD *)(a1 + 32));

}

void __57__SGSqlEntityStore_MessageManagement__markMessagesFound___block_invoke_3(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  objc_msgSend(v3, "bindNamedParam:toInteger:", ":state", 3);
  objc_msgSend(v3, "bindNamedParam:toInteger:", ":normal", 1);
  objc_msgSend(v3, "bindNamedParam:toDouble:", ":lastSeen", *(double *)(a1 + 40));
  objc_msgSend(v3, "bindNamedParam:toNSArray:", ":keys", *(_QWORD *)(a1 + 32));

}

uint64_t __73__SGSqlEntityStore_MessageManagement__pruneLostMessagesWithSource_count___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  SGDuplicateKey *v5;
  unsigned __int8 *v6;

  objc_msgSend(a2, "nonnullNSStringForColumnName:table:", "key", "emailMetadata");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = *(void **)(a1 + 32);
  v5 = -[SGDuplicateKey initWithSerializedEntityKey:entityType:serializedParentKey:]([SGDuplicateKey alloc], "initWithSerializedEntityKey:entityType:serializedParentKey:", v3, 5, 0);
  objc_msgSend(v4, "addObject:", v5);

  v6 = (unsigned __int8 *)MEMORY[0x1E0D81780];
  return *v6;
}

void __73__SGSqlEntityStore_MessageManagement__pruneLostMessagesWithSource_count___block_invoke_2(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;

  v5 = a2;
  objc_msgSend(v5, "bindNamedParam:toInt64:", ":lost", 3);
  objc_msgSend(v5, "bindNamedParam:toNSString:", ":sourceKey", *(_QWORD *)(a1 + 32));
  escapedTagForEntityExtraction(2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "bindNamedParam:toNSString:", ":eventTag", v3);

  escapedTagForEntityExtraction(4);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "bindNamedParam:toNSString:", ":contactTag", v4);

  objc_msgSend(v5, "bindNamedParam:toInt64:", ":limit", *(_QWORD *)(a1 + 48) - objc_msgSend(*(id *)(a1 + 40), "count"));
}

void __73__SGSqlEntityStore_MessageManagement__pruneLostMessagesWithSource_count___block_invoke_3(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  objc_msgSend(v4, "bindNamedParam:toInt64:", ":lost", 3);
  objc_msgSend(v4, "bindNamedParam:toNSString:", ":sourceKey", *(_QWORD *)(a1 + 32));
  escapedTagForEntityExtraction(4);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "bindNamedParam:toNSString:", ":contactTag", v3);

  objc_msgSend(v4, "bindNamedParam:toInt64:", ":limit", *(_QWORD *)(a1 + 48) - objc_msgSend(*(id *)(a1 + 40), "count"));
}

void __73__SGSqlEntityStore_MessageManagement__pruneLostMessagesWithSource_count___block_invoke_4(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  objc_msgSend(v4, "bindNamedParam:toInt64:", ":lost", 3);
  objc_msgSend(v4, "bindNamedParam:toNSString:", ":sourceKey", *(_QWORD *)(a1 + 32));
  escapedTagForEntityExtraction(2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "bindNamedParam:toNSString:", ":eventTag", v3);

  objc_msgSend(v4, "bindNamedParam:toInt64:", ":limit", *(_QWORD *)(a1 + 48) - objc_msgSend(*(id *)(a1 + 40), "count"));
}

void __56__SGSqlEntityStore_MessageManagement__markMessagesLost___block_invoke(_QWORD *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD v10[6];
  _QWORD v11[4];
  id v12;
  _QWORD v13[4];
  id v14;

  v2 = (void *)a1[5];
  v3 = *(void **)(a1[4] + 8);
  v4 = MEMORY[0x1E0C809B0];
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = __56__SGSqlEntityStore_MessageManagement__markMessagesLost___block_invoke_2;
  v13[3] = &unk_1E7DB74A0;
  v14 = v2;
  objc_msgSend(v3, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("UPDATE emailMetadata SET state = :undisplayablyLost WHERE unlikely(state = :lost) AND key in _pas_nsarray(:keys) AND lastSeenTimestamp < :lastSeenCutoff"), v13, 0, 0);
  +[SGAggregateLogging messagesUndisplayablyLost:](SGAggregateLogging, "messagesUndisplayablyLost:", sqlite3_changes((sqlite3 *)objc_msgSend(*(id *)(a1[4] + 8), "handle")));
  v5 = (void *)a1[5];
  v6 = *(void **)(a1[4] + 8);
  v11[0] = v4;
  v11[1] = 3221225472;
  v11[2] = __56__SGSqlEntityStore_MessageManagement__markMessagesLost___block_invoke_3;
  v11[3] = &unk_1E7DB74A0;
  v12 = v5;
  objc_msgSend(v6, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("UPDATE emailMetadata SET state = :lost, lastSeenTimestamp = :now WHERE likely(state NOT IN (:lost, :undisplayablyLost)) AND key IN _pas_nsarray(:keys)"), v11, 0, 0);
  +[SGAggregateLogging messagesLost:](SGAggregateLogging, "messagesLost:", sqlite3_changes((sqlite3 *)objc_msgSend(*(id *)(a1[4] + 8), "handle")));
  v7 = a1[4];
  v8 = *(void **)(v7 + 8);
  v10[0] = v4;
  v10[1] = 3221225472;
  v10[2] = __56__SGSqlEntityStore_MessageManagement__markMessagesLost___block_invoke_5;
  v10[3] = &unk_1E7DB6A98;
  v9 = a1[6];
  v10[4] = v7;
  v10[5] = v9;
  objc_msgSend(v8, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("SELECT sourceKey, COUNT(*) FROM emailMetadata WHERE unlikely(state = :lost) GROUP BY sourceKey"), &__block_literal_global_32_31798, v10, 0);

}

void __56__SGSqlEntityStore_MessageManagement__markMessagesLost___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  double v4;
  id v5;

  v3 = a2;
  objc_msgSend(v3, "bindNamedParam:toInteger:", ":lost", 3);
  objc_msgSend(v3, "bindNamedParam:toInteger:", ":undisplayablyLost", 4);
  objc_msgSend(v3, "bindNamedParam:toNSArray:", ":keys", *(_QWORD *)(a1 + 32));
  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "timeIntervalSince1970");
  objc_msgSend(v3, "bindNamedParam:toDouble:", ":lastSeenCutoff", v4 + -172800.0);

}

void __56__SGSqlEntityStore_MessageManagement__markMessagesLost___block_invoke_3(uint64_t a1, void *a2)
{
  id v3;
  id v4;

  v3 = a2;
  objc_msgSend(v3, "bindNamedParam:toInteger:", ":lost", 3);
  objc_msgSend(v3, "bindNamedParam:toInteger:", ":undisplayablyLost", 4);
  objc_msgSend(v3, "bindNamedParam:toNSArray:", ":keys", *(_QWORD *)(a1 + 32));
  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "timeIntervalSince1970");
  objc_msgSend(v3, "bindNamedParam:toDouble:", ":now");

}

uint64_t __56__SGSqlEntityStore_MessageManagement__markMessagesLost___block_invoke_5(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t v4;
  __CFString *v5;
  unint64_t v6;
  void *v7;

  sqlite3_column_nsstring(a2, 0);
  v4 = objc_claimAutoreleasedReturnValue();
  if (v4)
    v5 = (__CFString *)v4;
  else
    v5 = &stru_1E7DB83A8;
  v6 = sqlite3_column_int64(a2, 1);
  if (v6 > *(_QWORD *)(*(_QWORD *)(a1 + 32) + 96))
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "setObject:forKeyedSubscript:", v7, v5);

  }
  return 0;
}

uint64_t __56__SGSqlEntityStore_MessageManagement__markMessagesLost___block_invoke_4(uint64_t a1, uint64_t a2)
{
  return +[SGSqliteDatabase bindParam:name:int64:](SGSqliteDatabase, "bindParam:name:int64:", a2, ":lost", 3);
}

void __69__SGSqlEntityStore_MessageManagement__markMessagesUndisplayablyLost___block_invoke(uint64_t a1)
{
  void *v1;
  void *v2;
  _QWORD v3[4];
  id v4;

  v1 = *(void **)(a1 + 40);
  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __69__SGSqlEntityStore_MessageManagement__markMessagesUndisplayablyLost___block_invoke_2;
  v3[3] = &unk_1E7DB74A0;
  v4 = v1;
  objc_msgSend(v2, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("UPDATE emailMetadata SET state = :undisplayablyLost WHERE key IN _pas_nsarray(:serializedKeys)"), v3, 0, 0);

}

void __69__SGSqlEntityStore_MessageManagement__markMessagesUndisplayablyLost___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  objc_msgSend(v3, "bindNamedParam:toInteger:", ":undisplayablyLost", 4);
  objc_msgSend(v3, "bindNamedParam:toNSArray:", ":serializedKeys", *(_QWORD *)(a1 + 32));

}

uint64_t __60__SGSqlEntityStore_MessageManagement__loadMessagesToRefresh__block_invoke_2(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  SGEmailKey *v5;
  unsigned __int8 *v6;

  objc_msgSend(a2, "nonnullNSStringForColumnName:table:", "key", 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = *(void **)(a1 + 32);
  v5 = -[SGMessageKey initWithSerialized:]([SGEmailKey alloc], "initWithSerialized:", v3);
  objc_msgSend(v4, "addObject:", v5);

  v6 = (unsigned __int8 *)MEMORY[0x1E0D81780];
  return *v6;
}

void __60__SGSqlEntityStore_MessageManagement__loadMessagesToRefresh__block_invoke(uint64_t a1, void *a2)
{
  id v2;

  v2 = a2;
  objc_msgSend(v2, "bindNamedParam:toInt64:", ":lost", 3);
  objc_msgSend(v2, "bindNamedParam:toInt64:", ":undisplayable", 4);

}

- (int64_t)commitEvent:(id)a3
{
  id v4;
  SGSqliteDatabase *db;
  id v6;
  int64_t v7;
  _QWORD v9[5];
  id v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  v4 = a3;
  v12 = 0;
  v13 = &v12;
  v14 = 0x2020000000;
  v15 = 0;
  db = self->_db;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __40__SGSqlEntityStore_Events__commitEvent___block_invoke;
  v9[3] = &unk_1E7DB7878;
  v11 = &v12;
  v9[4] = self;
  v6 = v4;
  v10 = v6;
  -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v9);
  v7 = v13[3];

  _Block_object_dispose(&v12, 8);
  return v7;
}

- (int64_t)updateEvent:(id)a3 primaryKey:(int64_t)a4
{
  id v6;
  uint64_t v7;
  id v8;
  void *v9;
  void *v10;
  SGSqliteDatabase *db;
  id v12;
  id v13;
  id v14;
  _QWORD v16[5];
  __CFString *v17;
  __CFString *v18;
  __CFString *v19;
  id v20;
  id v21;
  id v22;
  int64_t v23;
  _QWORD v24[5];
  _QWORD v25[5];
  id v26;
  int64_t v27;

  v6 = a3;
  v7 = MEMORY[0x1E0C809B0];
  v25[0] = MEMORY[0x1E0C809B0];
  v25[1] = 3221225472;
  v25[2] = __51__SGSqlEntityStore_Events__updateEvent_primaryKey___block_invoke;
  v25[3] = &unk_1E7DB6B00;
  v27 = a4;
  v25[4] = self;
  v8 = v6;
  v26 = v8;
  v9 = (void *)MEMORY[0x1C3BD5158](v25);
  v24[0] = v7;
  v24[1] = 3221225472;
  v24[2] = __51__SGSqlEntityStore_Events__updateEvent_primaryKey___block_invoke_2;
  v24[3] = &__block_descriptor_40_e29_v16__0___PASSqliteStatement_8l;
  v24[4] = a4;
  v10 = (void *)MEMORY[0x1C3BD5158](v24);
  db = self->_db;
  v16[0] = v7;
  v16[1] = 3221225472;
  v16[2] = __51__SGSqlEntityStore_Events__updateEvent_primaryKey___block_invoke_3;
  v16[3] = &unk_1E7DB6B28;
  v16[4] = self;
  v17 = CFSTR("UPDATE events SET entityId = :entityId, duplicateKey = :duplicateKey, sourceKey = :sourceKey, title = :title, content = :content, creationTimestamp = :creationTimestamp, lastModifiedTimestamp = :lastModifiedTimestamp, whenRange = :whenRange, structuredData = :structuredData, state = :state, curated = :curated WHERE id = :primaryKey");
  v18 = CFSTR("DELETE FROM eventTags WHERE eventId = :primaryKey");
  v19 = CFSTR("DELETE FROM locations WHERE eventId = :primaryKey");
  v20 = v8;
  v21 = v9;
  v22 = v10;
  v23 = a4;
  v12 = v8;
  v13 = v10;
  v14 = v9;
  -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v16);

  return a4;
}

- (int64_t)insertEvent:(id)a3
{
  id v4;
  uint64_t v5;
  id v6;
  void *v7;
  SGSqliteDatabase *db;
  id v9;
  id v10;
  int64_t v11;
  _QWORD v13[5];
  __CFString *v14;
  id v15;
  id v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[5];
  id v23;

  v4 = a3;
  v5 = MEMORY[0x1E0C809B0];
  v22[0] = MEMORY[0x1E0C809B0];
  v22[1] = 3221225472;
  v22[2] = __40__SGSqlEntityStore_Events__insertEvent___block_invoke;
  v22[3] = &unk_1E7DB6E80;
  v22[4] = self;
  v6 = v4;
  v23 = v6;
  v7 = (void *)MEMORY[0x1C3BD5158](v22);
  v18 = 0;
  v19 = &v18;
  v20 = 0x2020000000;
  v21 = 0;
  db = self->_db;
  v13[0] = v5;
  v13[1] = 3221225472;
  v13[2] = __40__SGSqlEntityStore_Events__insertEvent___block_invoke_2;
  v13[3] = &unk_1E7DB6B50;
  v13[4] = self;
  v14 = CFSTR("INSERT INTO events (entityId, duplicateKey, sourceKey, title, content, creationTimestamp, lastModifiedTimestamp, whenRange, structuredData, state, curated) VALUES (:entityId, :duplicateKey, :sourceKey, :title, :content, :creationTimestamp, :lastModifiedTimestamp, :whenRange, :structuredData, :state, :curated)");
  v9 = v7;
  v16 = v9;
  v17 = &v18;
  v10 = v6;
  v15 = v10;
  -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v13);
  v11 = v19[3];

  _Block_object_dispose(&v18, 8);
  return v11;
}

- (void)bindStatementsForCommit:(id)a3 storageEvent:(id)a4
{
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  double v13;
  double v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;

  v20 = a3;
  v6 = a4;
  objc_msgSend(v6, "recordId");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "bindNamedParam:toInt64:", ":entityId", objc_msgSend(v7, "numericValue"));

  objc_msgSend(v6, "duplicateKey");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "serialize");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "bindNamedParam:toNSString:", ":duplicateKey", v9);

  objc_msgSend(v6, "sourceKey");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "bindNamedParam:toNSString:", ":sourceKey", v10);

  objc_msgSend(v6, "title");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "bindNamedParam:toNSString:", ":title", v11);

  objc_msgSend(v6, "content");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "bindNamedParam:toNSString:", ":content", v12);

  objc_msgSend(v6, "creationTimestamp");
  objc_msgSend(v20, "bindNamedParam:toInt64:", ":creationTimestamp", (uint64_t)v13);
  objc_msgSend(v6, "lastModifiedTimestamp");
  objc_msgSend(v20, "bindNamedParam:toInt64:", ":lastModifiedTimestamp", (uint64_t)v14);
  objc_msgSend(v6, "when");
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  if (v15)
  {
    objc_msgSend(v6, "when");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    -[SGSqlEntityStore _serializeRange:](self, "_serializeRange:", v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "bindNamedParam:toNSString:", ":whenRange", v17);

  }
  else
  {
    objc_msgSend(v20, "bindNamedParamToNull:", ":whenRange");
  }
  objc_msgSend(v6, "structuredData");
  v18 = (void *)objc_claimAutoreleasedReturnValue();

  if (v18)
  {
    objc_msgSend(v6, "structuredData");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "bindNamedParam:toNSData:", ":structuredData", v19);

  }
  else
  {
    objc_msgSend(v20, "bindNamedParamToNull:", ":structuredData");
  }
  objc_msgSend(v20, "bindNamedParam:toInt64:", ":state", objc_msgSend(v6, "state"));
  objc_msgSend(v20, "bindNamedParam:toInt64:", ":curated", objc_msgSend(v6, "curated"));

}

- (void)insertEventTagsAndLocations:(id)a3 primaryKey:(int64_t)a4
{
  id v6;
  SGSqliteDatabase *db;
  id v8;
  _QWORD v9[5];
  id v10;
  int64_t v11;

  v6 = a3;
  db = self->_db;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __67__SGSqlEntityStore_Events__insertEventTagsAndLocations_primaryKey___block_invoke;
  v9[3] = &unk_1E7DB6BB8;
  v10 = v6;
  v11 = a4;
  v9[4] = self;
  v8 = v6;
  -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v9);

}

- (id)loadEventForPrimaryKey:(int64_t)a3
{
  void *v5;
  SGSqliteDatabase *db;
  uint64_t v7;
  id v8;
  void *v9;
  SGSqliteDatabase *v10;
  id v11;
  void *v12;
  SGSqliteDatabase *v13;
  id v14;
  id v15;
  id v16;
  _QWORD v18[5];
  id v19;
  id v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t);
  void (*v26)(uint64_t);
  id v27;
  _QWORD v28[5];
  _QWORD v29[4];
  id v30;
  _QWORD v31[5];
  _QWORD v32[4];
  id v33;
  SGSqlEntityStore *v34;
  _QWORD v35[5];

  v5 = (void *)objc_opt_new();
  db = self->_db;
  v7 = MEMORY[0x1E0C809B0];
  v35[0] = MEMORY[0x1E0C809B0];
  v35[1] = 3221225472;
  v35[2] = __51__SGSqlEntityStore_Events__loadEventForPrimaryKey___block_invoke;
  v35[3] = &__block_descriptor_40_e29_v16__0___PASSqliteStatement_8l;
  v35[4] = a3;
  v32[0] = MEMORY[0x1E0C809B0];
  v32[1] = 3221225472;
  v32[2] = __51__SGSqlEntityStore_Events__loadEventForPrimaryKey___block_invoke_2;
  v32[3] = &unk_1E7DB6BE0;
  v8 = v5;
  v33 = v8;
  v34 = self;
  -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](db, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("SELECT id FROM locations WHERE eventId = :primaryKey"), v35, v32, 0);
  v9 = (void *)objc_opt_new();
  v10 = self->_db;
  v31[0] = v7;
  v31[1] = 3221225472;
  v31[2] = __51__SGSqlEntityStore_Events__loadEventForPrimaryKey___block_invoke_3;
  v31[3] = &__block_descriptor_40_e29_v16__0___PASSqliteStatement_8l;
  v31[4] = a3;
  v29[0] = v7;
  v29[1] = 3221225472;
  v29[2] = __51__SGSqlEntityStore_Events__loadEventForPrimaryKey___block_invoke_4;
  v29[3] = &unk_1E7DB6ED0;
  v11 = v9;
  v30 = v11;
  -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](v10, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("SELECT name FROM eventTags WHERE eventId = :primaryKey"), v31, v29, 0);
  v28[0] = v7;
  v28[1] = 3221225472;
  v28[2] = __51__SGSqlEntityStore_Events__loadEventForPrimaryKey___block_invoke_5;
  v28[3] = &__block_descriptor_40_e29_v16__0___PASSqliteStatement_8l;
  v28[4] = a3;
  v12 = (void *)MEMORY[0x1C3BD5158](v28);
  v22 = 0;
  v23 = &v22;
  v24 = 0x3032000000;
  v25 = __Block_byref_object_copy__31932;
  v26 = __Block_byref_object_dispose__31933;
  v27 = 0;
  v13 = self->_db;
  v18[0] = v7;
  v18[1] = 3221225472;
  v18[2] = __51__SGSqlEntityStore_Events__loadEventForPrimaryKey___block_invoke_36;
  v18[3] = &unk_1E7DB6C08;
  v18[4] = self;
  v21 = &v22;
  v14 = v11;
  v19 = v14;
  v15 = v8;
  v20 = v15;
  -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](v13, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("SELECT entityId, duplicateKey, sourceKey, title, content, creationTimestamp, lastModifiedTimestamp, whenRange, structuredData, state, curated FROM events WHERE id = :primaryKey"), v12, v18, 0);
  v16 = (id)v23[5];

  _Block_object_dispose(&v22, 8);
  return v16;
}

- (int64_t)checkExistsEventForDuplicateKey:(id)a3
{
  id v4;
  SGSqliteDatabase *db;
  uint64_t v6;
  id v7;
  int64_t v8;
  _QWORD v10[5];
  _QWORD v11[4];
  id v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  v4 = a3;
  v13 = 0;
  v14 = &v13;
  v15 = 0x2020000000;
  v16 = -1;
  db = self->_db;
  v6 = MEMORY[0x1E0C809B0];
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __60__SGSqlEntityStore_Events__checkExistsEventForDuplicateKey___block_invoke;
  v11[3] = &unk_1E7DB74A0;
  v7 = v4;
  v12 = v7;
  v10[0] = v6;
  v10[1] = 3221225472;
  v10[2] = __60__SGSqlEntityStore_Events__checkExistsEventForDuplicateKey___block_invoke_2;
  v10[3] = &unk_1E7DB7510;
  v10[4] = &v13;
  -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](db, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("SELECT id FROM events WHERE duplicateKey = :duplicateKey"), v11, v10, 0);
  v8 = v14[3];

  _Block_object_dispose(&v13, 8);
  return v8;
}

- (id)loadEventForDuplicateKey:(id)a3
{
  int64_t v4;
  void *v5;

  v4 = -[SGSqlEntityStore checkExistsEventForDuplicateKey:](self, "checkExistsEventForDuplicateKey:", a3);
  if (v4 == -1)
  {
    v5 = 0;
  }
  else
  {
    -[SGSqlEntityStore loadEventForPrimaryKey:](self, "loadEventForPrimaryKey:", v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
  }
  return v5;
}

- (id)loadEventForRecordId:(id)a3
{
  id v4;
  SGSqliteDatabase *db;
  uint64_t v6;
  id v7;
  void *v8;
  _QWORD v10[5];
  _QWORD v11[4];
  id v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  v4 = a3;
  v13 = 0;
  v14 = &v13;
  v15 = 0x2020000000;
  v16 = -1;
  db = self->_db;
  v6 = MEMORY[0x1E0C809B0];
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __49__SGSqlEntityStore_Events__loadEventForRecordId___block_invoke;
  v11[3] = &unk_1E7DB74A0;
  v7 = v4;
  v12 = v7;
  v10[0] = v6;
  v10[1] = 3221225472;
  v10[2] = __49__SGSqlEntityStore_Events__loadEventForRecordId___block_invoke_2;
  v10[3] = &unk_1E7DB7510;
  v10[4] = &v13;
  -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](db, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("SELECT id FROM events WHERE entityId = :entityId"), v11, v10, 0);
  if (v14[3] == -1)
  {
    v8 = 0;
  }
  else
  {
    -[SGSqlEntityStore loadEventForPrimaryKey:](self, "loadEventForPrimaryKey:");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
  }

  _Block_object_dispose(&v13, 8);
  return v8;
}

- (id)_serializeRange:(id)a3
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  __CFString *v7;
  __CFString *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  __CFString *v12;
  __CFString *v13;
  id v14;
  uint64_t v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;

  v3 = a3;
  objc_msgSend(v3, "startTimeZone");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "abbreviation");
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = (void *)v5;
  if (v5)
    v7 = (__CFString *)v5;
  else
    v7 = &stru_1E7DB83A8;
  v8 = v7;

  objc_msgSend(v3, "endTimeZone");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "abbreviation");
  v10 = objc_claimAutoreleasedReturnValue();
  v11 = (void *)v10;
  if (v10)
    v12 = (__CFString *)v10;
  else
    v12 = &stru_1E7DB83A8;
  v13 = v12;

  v14 = objc_alloc(MEMORY[0x1E0CB3940]);
  objc_msgSend(v3, "start");
  v16 = (void *)objc_msgSend(v14, "initWithFormat:", CFSTR("%f"), v15);
  v17 = objc_alloc(MEMORY[0x1E0CB3940]);
  objc_msgSend(v3, "end");
  v19 = v18;

  v20 = (void *)objc_msgSend(v17, "initWithFormat:", CFSTR("%f"), v19);
  SGDelimitedStringsSerialize();
  v21 = (void *)objc_claimAutoreleasedReturnValue();

  return v21;
}

- (id)_deserializeRange:(id)a3
{
  id v3;
  void *v4;
  void *v5;
  double v6;
  double v7;
  void *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  double v12;
  double v13;
  void *v14;
  void *v15;
  NSObject *v16;
  void *v17;
  double v18;
  NSObject *v19;
  void *v20;
  NSObject *v21;
  double v22;
  NSObject *v23;
  uint64_t v24;
  NSObject *v26;
  int v27;
  id v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = a3;
  SGDelimitedStringsDeserialize();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v4, "count") == 4)
  {
    objc_msgSend(v4, "objectAtIndexedSubscript:", 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "doubleValue");
    v7 = v6;

    v8 = (void *)MEMORY[0x1E0C99E80];
    objc_msgSend(v4, "objectAtIndexedSubscript:", 1);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeZoneWithAbbreviation:", v9);
    v10 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(v4, "objectAtIndexedSubscript:", 2);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "doubleValue");
    v13 = v12;

    v14 = (void *)MEMORY[0x1E0C99E80];
    objc_msgSend(v4, "objectAtIndexedSubscript:", 3);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "timeZoneWithAbbreviation:", v15);
    v16 = objc_claimAutoreleasedReturnValue();

    if (v10 && v16)
    {
      v17 = (void *)MEMORY[0x1E0D19940];
      v18 = v7;
      v19 = v10;
    }
    else
    {
      if (v10 || !v16)
      {
        if (!v10 || v16)
        {
          objc_msgSend(MEMORY[0x1E0D19940], "floatingRangeWithUTCStart:end:", v7, v13);
          v24 = objc_claimAutoreleasedReturnValue();
          goto LABEL_15;
        }
        sgEventsLogHandle();
        v26 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_FAULT))
        {
          LOWORD(v27) = 0;
          _os_log_fault_impl(&dword_1C3607000, v26, OS_LOG_TYPE_FAULT, "SGSqlEntityStore+Events: event endTimezone is nil but startTimezone is not nil", (uint8_t *)&v27, 2u);
        }

        v17 = (void *)MEMORY[0x1E0D19940];
        v18 = v7;
        v19 = v10;
        v22 = v13;
        v23 = v10;
LABEL_14:
        objc_msgSend(v17, "rangeWithStart:startTimeZone:end:endTimeZone:", v19, v23, v18, v22);
        v24 = objc_claimAutoreleasedReturnValue();
LABEL_15:
        v20 = (void *)v24;

        goto LABEL_16;
      }
      sgEventsLogHandle();
      v21 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_FAULT))
      {
        LOWORD(v27) = 0;
        _os_log_fault_impl(&dword_1C3607000, v21, OS_LOG_TYPE_FAULT, "SGSqlEntityStore+Events: event startTimezone is nil but endTimezone is not nil", (uint8_t *)&v27, 2u);
      }

      v17 = (void *)MEMORY[0x1E0D19940];
      v18 = v7;
      v19 = v16;
    }
    v22 = v13;
    v23 = v16;
    goto LABEL_14;
  }
  sgLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    v27 = 138412290;
    v28 = v3;
    _os_log_error_impl(&dword_1C3607000, v10, OS_LOG_TYPE_ERROR, "malformed serialized time range: %@", (uint8_t *)&v27, 0xCu);
  }
  v20 = 0;
LABEL_16:

  return v20;
}

void __49__SGSqlEntityStore_Events__loadEventForRecordId___block_invoke(uint64_t a1, void *a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  objc_msgSend(v3, "bindNamedParam:toInt64:", ":entityId", objc_msgSend(v2, "numericValue"));

}

uint64_t __49__SGSqlEntityStore_Events__loadEventForRecordId___block_invoke_2(uint64_t a1, void *a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_msgSend(a2, "getInt64ForColumn:", 0);
  return 1;
}

void __60__SGSqlEntityStore_Events__checkExistsEventForDuplicateKey___block_invoke(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  id v4;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  objc_msgSend(v2, "serialize");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "bindNamedParam:toNSString:", ":duplicateKey", v4);

}

uint64_t __60__SGSqlEntityStore_Events__checkExistsEventForDuplicateKey___block_invoke_2(uint64_t a1, void *a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_msgSend(a2, "getInt64ForColumn:", 0);
  return 1;
}

uint64_t __51__SGSqlEntityStore_Events__loadEventForPrimaryKey___block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "bindNamedParam:toInt64:", ":primaryKey", *(_QWORD *)(a1 + 32));
}

uint64_t __51__SGSqlEntityStore_Events__loadEventForPrimaryKey___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;

  v3 = objc_msgSend(a2, "getInt64ForColumn:", 0);
  v4 = *(void **)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 40), "storageLocationWithPrimaryKey:", v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addObject:", v5);

  return 0;
}

uint64_t __51__SGSqlEntityStore_Events__loadEventForPrimaryKey___block_invoke_3(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "bindNamedParam:toInt64:", ":primaryKey", *(_QWORD *)(a1 + 32));
}

uint64_t __51__SGSqlEntityStore_Events__loadEventForPrimaryKey___block_invoke_4(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;

  objc_msgSend(a2, "getNSStringForColumn:", 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    objc_msgSend(MEMORY[0x1E0D197F0], "resolveName:", v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (v4)
      objc_msgSend(*(id *)(a1 + 32), "addObject:", v4);

  }
  return 0;
}

uint64_t __51__SGSqlEntityStore_Events__loadEventForPrimaryKey___block_invoke_5(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "bindNamedParam:toInt64:", ":primaryKey", *(_QWORD *)(a1 + 32));
}

uint64_t __51__SGSqlEntityStore_Events__loadEventForPrimaryKey___block_invoke_36(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  int v9;
  BOOL v10;
  SGStorageEvent *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  SGDuplicateKey *v22;
  void *v23;

  v3 = a2;
  v4 = objc_msgSend(v3, "getInt64ForColumnName:table:", "entityId", "events");
  objc_msgSend(v3, "nonnullNSStringForColumnName:table:", "duplicateKey", "events");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = -[SGDuplicateKey initWithSerialized:]([SGDuplicateKey alloc], "initWithSerialized:", v23);
  objc_msgSend(v3, "getNSStringForColumnName:table:", "sourceKey", "events");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "getNSStringForColumnName:table:", "title", "events");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "getNSStringForColumnName:table:", "content", "events");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = objc_msgSend(v3, "getInt64ForColumnName:table:", "creationTimestamp", "events");
  v5 = objc_msgSend(v3, "getInt64ForColumnName:table:", "lastModifiedTimestamp", "events");
  objc_msgSend(v3, "getNSStringForColumnName:table:", "whenRange", "events");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (v6)
  {
    objc_msgSend(*(id *)(a1 + 32), "_deserializeRange:", v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v7 = 0;
  }
  objc_msgSend(v3, "getNSDataForColumnName:table:", "structuredData", "events");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v3, "getInt64ForColumnName:table:", "state", "events");
  v10 = objc_msgSend(v3, "getInt64ForColumnName:table:", "curated", "events") != 0;
  v11 = [SGStorageEvent alloc];
  objc_msgSend(MEMORY[0x1E0D19920], "recordIdWithInternalEntityId:", v4);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  BYTE4(v17) = v10;
  LODWORD(v17) = v9;
  v13 = -[SGStorageEvent initWithRecordId:duplicateKey:sourceKey:content:title:creationTimestamp:lastModifiedTimestamp:tags:when:locations:structuredData:state:curated:](v11, "initWithRecordId:duplicateKey:sourceKey:content:title:creationTimestamp:lastModifiedTimestamp:tags:when:locations:structuredData:state:curated:", v12, v22, v21, v19, v20, *(_QWORD *)(a1 + 40), (double)v18, (double)v5, v7, *(_QWORD *)(a1 + 48), v8, v17);
  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v15 = *(void **)(v14 + 40);
  *(_QWORD *)(v14 + 40) = v13;

  return 1;
}

void __67__SGSqlEntityStore_Events__insertEventTagsAndLocations_primaryKey___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _QWORD v15[4];
  id v16;
  uint64_t v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v15[0] = MEMORY[0x1E0C809B0];
  v15[2] = __67__SGSqlEntityStore_Events__insertEventTagsAndLocations_primaryKey___block_invoke_2;
  v15[3] = &unk_1E7DB6EA8;
  v2 = *(void **)(a1 + 40);
  v17 = *(_QWORD *)(a1 + 48);
  v3 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v15[1] = 3221225472;
  v16 = v2;
  objc_msgSend(v3, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("INSERT INTO eventTags (eventId, name) SELECT :eventId, value FROM _pas_nsarray(:tagStrings)"), v15, 0, 0);
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  objc_msgSend(*(id *)(a1 + 40), "locations", 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v11, v18, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v12;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v12 != v7)
          objc_enumerationMutation(v4);
        v9 = *(_QWORD *)(*((_QWORD *)&v11 + 1) + 8 * v8);
        v10 = (void *)MEMORY[0x1C3BD4F6C]();
        objc_msgSend(*(id *)(a1 + 32), "commitStorageLocation:withEventId:", v9, *(_QWORD *)(a1 + 48));
        objc_autoreleasePoolPop(v10);
        ++v8;
      }
      while (v6 != v8);
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v11, v18, 16);
    }
    while (v6);
  }

}

void __67__SGSqlEntityStore_Events__insertEventTagsAndLocations_primaryKey___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;
  void *v5;
  void *v6;
  id v7;

  v3 = *(_QWORD *)(a1 + 40);
  v4 = a2;
  objc_msgSend(v4, "bindNamedParam:toInt64:", ":eventId", v3);
  objc_msgSend(*(id *)(a1 + 32), "tags");
  v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "allObjects");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "_pas_mappedArrayWithTransform:", &__block_literal_global_31954);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "bindNamedParam:toNSArray:", ":tagStrings", v6);

}

uint64_t __67__SGSqlEntityStore_Events__insertEventTagsAndLocations_primaryKey___block_invoke_3(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "name");
}

uint64_t __40__SGSqlEntityStore_Events__insertEvent___block_invoke(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "bindStatementsForCommit:storageEvent:", a2, *(_QWORD *)(a1 + 40));
}

uint64_t __40__SGSqlEntityStore_Events__insertEvent___block_invoke_2(uint64_t a1)
{
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "prepAndRunSQL:onPrep:onRow:onError:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 56), 0, 0);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = sqlite3_last_insert_rowid((sqlite3 *)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "handle"));
  return objc_msgSend(*(id *)(a1 + 32), "insertEventTagsAndLocations:primaryKey:", *(_QWORD *)(a1 + 48), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24));
}

void __51__SGSqlEntityStore_Events__updateEvent_primaryKey___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;

  v3 = *(_QWORD *)(a1 + 48);
  v4 = a2;
  objc_msgSend(v4, "bindNamedParam:toInt64:", ":primaryKey", v3);
  objc_msgSend(*(id *)(a1 + 32), "bindStatementsForCommit:storageEvent:", v4, *(_QWORD *)(a1 + 40));

}

uint64_t __51__SGSqlEntityStore_Events__updateEvent_primaryKey___block_invoke_2(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "bindNamedParam:toInt64:", ":primaryKey", *(_QWORD *)(a1 + 32));
}

uint64_t __51__SGSqlEntityStore_Events__updateEvent_primaryKey___block_invoke_3(uint64_t a1)
{
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "prepAndRunSQL:onPrep:onRow:onError:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 72), 0, 0);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "prepAndRunSQL:onPrep:onRow:onError:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 80), 0, 0);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "prepAndRunSQL:onPrep:onRow:onError:", *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 80), 0, 0);
  return objc_msgSend(*(id *)(a1 + 32), "insertEventTagsAndLocations:primaryKey:", *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 88));
}

uint64_t __40__SGSqlEntityStore_Events__commitEvent___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t result;

  v2 = *(void **)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 40), "duplicateKey");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend(v2, "checkExistsEventForDuplicateKey:", v3);

  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(void **)(a1 + 32);
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) != -1)
    return objc_msgSend(v5, "updateEvent:primaryKey:", v4);
  result = objc_msgSend(v5, "insertEvent:", v4);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = result;
  return result;
}

- (id)messageIdForBundleIdentifier:(id)a3 uniqueIdentifier:(id)a4
{
  id v6;
  id v7;
  uint64_t v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  _QWORD v15[5];
  _QWORD v16[4];
  id v17;
  id v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t);
  void (*v23)(uint64_t);
  id v24;

  v6 = a3;
  v7 = a4;
  v19 = 0;
  v20 = &v19;
  v21 = 0x3032000000;
  v22 = __Block_byref_object_copy__33179;
  v23 = __Block_byref_object_dispose__33180;
  v24 = 0;
  v8 = MEMORY[0x1E0C809B0];
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3221225472;
  v16[2] = __84__SGSqlEntityStore_SpotlightMapping__messageIdForBundleIdentifier_uniqueIdentifier___block_invoke;
  v16[3] = &unk_1E7DB6E80;
  v9 = v7;
  v17 = v9;
  v10 = v6;
  v18 = v10;
  v11 = (void *)MEMORY[0x1C3BD5158](v16);
  v15[0] = v8;
  v15[1] = 3221225472;
  v15[2] = __84__SGSqlEntityStore_SpotlightMapping__messageIdForBundleIdentifier_uniqueIdentifier___block_invoke_2;
  v15[3] = &unk_1E7DB7510;
  v15[4] = &v19;
  v12 = (void *)MEMORY[0x1C3BD5158](v15);
  -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](self->_db, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("SELECT messageId FROM mailIntelligence_spotlightMapping WHERE uniqueIdentifier = :uniqueIdentifier AND bundleIdentifier = :bundleIdentifier"), v11, v12, 0);
  v13 = (id)v20[5];

  _Block_object_dispose(&v19, 8);
  return v13;
}

- (id)messageIdsForBundleIdentifier:(id)a3 limit:(unint64_t)a4
{
  id v6;
  void *v7;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  _QWORD v15[4];
  id v16;
  _QWORD v17[4];
  id v18;
  unint64_t v19;

  v6 = a3;
  v7 = (void *)objc_opt_new();
  v8 = MEMORY[0x1E0C809B0];
  v17[0] = MEMORY[0x1E0C809B0];
  v17[1] = 3221225472;
  v17[2] = __74__SGSqlEntityStore_SpotlightMapping__messageIdsForBundleIdentifier_limit___block_invoke;
  v17[3] = &unk_1E7DB6EA8;
  v18 = v6;
  v19 = a4;
  v9 = v6;
  v10 = (void *)MEMORY[0x1C3BD5158](v17);
  v15[0] = v8;
  v15[1] = 3221225472;
  v15[2] = __74__SGSqlEntityStore_SpotlightMapping__messageIdsForBundleIdentifier_limit___block_invoke_2;
  v15[3] = &unk_1E7DB6ED0;
  v11 = v7;
  v16 = v11;
  v12 = (void *)MEMORY[0x1C3BD5158](v15);
  -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](self->_db, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("SELECT messageId FROM mailIntelligence_spotlightMapping WHERE bundleIdentifier = :bundleIdentifier LIMIT :limit"), v10, v12, 0);
  v13 = v11;

  return v13;
}

- (id)messageIdsForBundleIdentifier:(id)a3 uniqueIdentifiers:(id)a4
{
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  _QWORD v17[4];
  id v18;
  _QWORD v19[4];
  id v20;
  id v21;

  v6 = a3;
  v7 = a4;
  v8 = (void *)objc_opt_new();
  v9 = MEMORY[0x1E0C809B0];
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 3221225472;
  v19[2] = __86__SGSqlEntityStore_SpotlightMapping__messageIdsForBundleIdentifier_uniqueIdentifiers___block_invoke;
  v19[3] = &unk_1E7DB6E80;
  v20 = v6;
  v21 = v7;
  v10 = v7;
  v11 = v6;
  v12 = (void *)MEMORY[0x1C3BD5158](v19);
  v17[0] = v9;
  v17[1] = 3221225472;
  v17[2] = __86__SGSqlEntityStore_SpotlightMapping__messageIdsForBundleIdentifier_uniqueIdentifiers___block_invoke_2;
  v17[3] = &unk_1E7DB6ED0;
  v13 = v8;
  v18 = v13;
  v14 = (void *)MEMORY[0x1C3BD5158](v17);
  -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](self->_db, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("SELECT messageId FROM mailIntelligence_spotlightMapping WHERE uniqueIdentifier IN _pas_nsarray(:uniqueIdentifiers) AND bundleIdentifier = :bundleIdentifier"), v12, v14, 0);
  v15 = v13;

  return v15;
}

- (id)messageIdsForBundleIdentifier:(id)a3 domainIdentifierGlobs:(id)a4 limit:(unint64_t)a5
{
  id v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  id obj;
  _QWORD v22[4];
  id v23;
  unint64_t v24;
  _QWORD v25[4];
  id v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a4;
  v10 = (void *)objc_opt_new();
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  obj = v9;
  v11 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v28, v32, 16);
  if (v11)
  {
    v12 = v11;
    v13 = *(_QWORD *)v29;
    v14 = MEMORY[0x1E0C809B0];
    do
    {
      v15 = 0;
      do
      {
        if (*(_QWORD *)v29 != v13)
          objc_enumerationMutation(obj);
        v16 = *(_QWORD *)(*((_QWORD *)&v28 + 1) + 8 * v15);
        v25[0] = v14;
        v25[1] = 3221225472;
        v25[2] = __96__SGSqlEntityStore_SpotlightMapping__messageIdsForBundleIdentifier_domainIdentifierGlobs_limit___block_invoke;
        v25[3] = &unk_1E7DB6E80;
        v26 = v8;
        v27 = v16;
        v17 = (void *)MEMORY[0x1C3BD5158](v25);
        v22[0] = v14;
        v22[1] = 3221225472;
        v22[2] = __96__SGSqlEntityStore_SpotlightMapping__messageIdsForBundleIdentifier_domainIdentifierGlobs_limit___block_invoke_2;
        v22[3] = &unk_1E7DB6EF8;
        v23 = v10;
        v24 = a5;
        v18 = (void *)MEMORY[0x1C3BD5158](v22);
        -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](self->_db, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("SELECT messageId FROM mailIntelligence_spotlightMapping WHERE bundleIdentifier = :bundleIdentifier AND terminatedDomainIdentifier GLOB :domainIdentifierGlob"), v17, v18, 0);

        ++v15;
      }
      while (v12 != v15);
      v12 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v28, v32, 16);
    }
    while (v12);
  }

  objc_msgSend(v10, "allObjects");
  v19 = (void *)objc_claimAutoreleasedReturnValue();

  return v19;
}

- (id)spotlightUniqueIdentifierForBundleIdentifier:(id)a3 messageId:(id)a4
{
  id v6;
  id v7;
  uint64_t v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  _QWORD v15[5];
  _QWORD v16[4];
  id v17;
  id v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t);
  void (*v23)(uint64_t);
  id v24;

  v6 = a3;
  v7 = a4;
  v19 = 0;
  v20 = &v19;
  v21 = 0x3032000000;
  v22 = __Block_byref_object_copy__33179;
  v23 = __Block_byref_object_dispose__33180;
  v24 = 0;
  v8 = MEMORY[0x1E0C809B0];
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3221225472;
  v16[2] = __93__SGSqlEntityStore_SpotlightMapping__spotlightUniqueIdentifierForBundleIdentifier_messageId___block_invoke;
  v16[3] = &unk_1E7DB6E80;
  v9 = v7;
  v17 = v9;
  v10 = v6;
  v18 = v10;
  v11 = (void *)MEMORY[0x1C3BD5158](v16);
  v15[0] = v8;
  v15[1] = 3221225472;
  v15[2] = __93__SGSqlEntityStore_SpotlightMapping__spotlightUniqueIdentifierForBundleIdentifier_messageId___block_invoke_2;
  v15[3] = &unk_1E7DB7510;
  v15[4] = &v19;
  v12 = (void *)MEMORY[0x1C3BD5158](v15);
  -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](self->_db, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("SELECT uniqueIdentifier FROM mailIntelligence_spotlightMapping WHERE messageId = :messageId AND bundleIdentifier = :bundleIdentifier"), v11, v12, 0);
  v13 = (id)v20[5];

  _Block_object_dispose(&v19, 8);
  return v13;
}

- (int64_t)commitSpotlightMapping:(id)a3 bundleIdentifier:(id)a4 domainIdentifier:(id)a5 uniqueIdentifier:(id)a6
{
  id v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;
  void *v18;
  sqlite3_int64 insert_rowid;
  void *v20;
  id v21;
  void *v22;
  id v23;
  SGSqliteDatabase *db;
  SGSqliteDatabase *v25;
  id v27;
  _QWORD v28[5];
  __CFString *v29;
  id v30;
  _QWORD v31[4];
  id v32;
  id v33;
  id v34;
  id v35;
  _QWORD v36[5];
  _QWORD v37[4];
  id v38;
  id v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;

  v10 = a3;
  v11 = a4;
  v12 = a5;
  v13 = a6;
  v40 = 0;
  v41 = &v40;
  v42 = 0x2020000000;
  v43 = -1;
  v14 = MEMORY[0x1E0C809B0];
  v37[0] = MEMORY[0x1E0C809B0];
  v37[1] = 3221225472;
  v37[2] = __112__SGSqlEntityStore_SpotlightMapping__commitSpotlightMapping_bundleIdentifier_domainIdentifier_uniqueIdentifier___block_invoke;
  v37[3] = &unk_1E7DB6E80;
  v15 = v11;
  v38 = v15;
  v16 = v13;
  v39 = v16;
  v17 = (id)MEMORY[0x1C3BD5158](v37);
  v36[0] = v14;
  v36[1] = 3221225472;
  v36[2] = __112__SGSqlEntityStore_SpotlightMapping__commitSpotlightMapping_bundleIdentifier_domainIdentifier_uniqueIdentifier___block_invoke_2;
  v36[3] = &unk_1E7DB7510;
  v36[4] = &v40;
  v18 = (void *)MEMORY[0x1C3BD5158](v36);
  -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](self->_db, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("SELECT id FROM mailIntelligence_spotlightMapping WHERE bundleIdentifier = :bundleIdentifier AND uniqueIdentifier = :uniqueIdentifier"), v17, v18, 0);
  insert_rowid = v41[3];
  if (insert_rowid == -1)
  {
    v27 = v12;
    objc_msgSend(v12, "stringByAppendingString:", CFSTR("."));
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v31[0] = v14;
    v31[1] = 3221225472;
    v31[2] = __112__SGSqlEntityStore_SpotlightMapping__commitSpotlightMapping_bundleIdentifier_domainIdentifier_uniqueIdentifier___block_invoke_3;
    v31[3] = &unk_1E7DB6F20;
    v32 = v10;
    v33 = v16;
    v34 = v15;
    v21 = v20;
    v35 = v21;
    v22 = (void *)MEMORY[0x1C3BD5158](v31);

    v23 = v10;
    db = self->_db;
    v28[0] = v14;
    v28[1] = 3221225472;
    v28[2] = __112__SGSqlEntityStore_SpotlightMapping__commitSpotlightMapping_bundleIdentifier_domainIdentifier_uniqueIdentifier___block_invoke_4;
    v28[3] = &unk_1E7DB6F48;
    v28[4] = self;
    v29 = CFSTR("INSERT INTO mailIntelligence_spotlightMapping (messageId, uniqueIdentifier, terminatedDomainIdentifier, bundleIdentifier) VALUES (:messageId, :uniqueIdentifier, :terminatedDomainIdentifier, :bundleIdentifier) ON CONFLICT(bundleIdentifier, uniqueIdentifier) DO UPDATE SET messageId=:messageId, terminatedDomainIdentifier=:terminatedDomainIdentifier");
    v17 = v22;
    v30 = v17;
    v25 = db;
    v10 = v23;
    -[SGSqliteDatabase writeTransaction:](v25, "writeTransaction:", v28);
    insert_rowid = sqlite3_last_insert_rowid(-[SGSqliteDatabase handle](self->_db, "handle"));
    v41[3] = insert_rowid;

    v12 = v27;
  }

  _Block_object_dispose(&v40, 8);
  return insert_rowid;
}

void __112__SGSqlEntityStore_SpotlightMapping__commitSpotlightMapping_bundleIdentifier_domainIdentifier_uniqueIdentifier___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = a2;
  objc_msgSend(v4, "bindNamedParam:toNSString:", ":bundleIdentifier", v3);
  objc_msgSend(v4, "bindNamedParam:toNSString:", ":uniqueIdentifier", *(_QWORD *)(a1 + 40));

}

uint64_t __112__SGSqlEntityStore_SpotlightMapping__commitSpotlightMapping_bundleIdentifier_domainIdentifier_uniqueIdentifier___block_invoke_2(uint64_t a1, void *a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_msgSend(a2, "getInt64ForColumnName:table:", "id", "mailIntelligence_spotlightMapping");
  return *MEMORY[0x1E0D81788];
}

void __112__SGSqlEntityStore_SpotlightMapping__commitSpotlightMapping_bundleIdentifier_domainIdentifier_uniqueIdentifier___block_invoke_3(_QWORD *a1, void *a2)
{
  uint64_t v3;
  id v4;

  v3 = a1[4];
  v4 = a2;
  objc_msgSend(v4, "bindNamedParam:toNSString:", ":messageId", v3);
  objc_msgSend(v4, "bindNamedParam:toNSString:", ":uniqueIdentifier", a1[5]);
  objc_msgSend(v4, "bindNamedParam:toNSString:", ":bundleIdentifier", a1[6]);
  objc_msgSend(v4, "bindNamedParam:toNSString:", ":terminatedDomainIdentifier", a1[7]);

}

uint64_t __112__SGSqlEntityStore_SpotlightMapping__commitSpotlightMapping_bundleIdentifier_domainIdentifier_uniqueIdentifier___block_invoke_4(_QWORD *a1)
{
  return objc_msgSend(*(id *)(a1[4] + 8), "prepAndRunSQL:onPrep:onRow:onError:", a1[5], a1[6], 0, 0);
}

void __93__SGSqlEntityStore_SpotlightMapping__spotlightUniqueIdentifierForBundleIdentifier_messageId___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = a2;
  objc_msgSend(v4, "bindNamedParam:toNSString:", ":messageId", v3);
  objc_msgSend(v4, "bindNamedParam:toNSString:", ":bundleIdentifier", *(_QWORD *)(a1 + 40));

}

uint64_t __93__SGSqlEntityStore_SpotlightMapping__spotlightUniqueIdentifierForBundleIdentifier_messageId___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  objc_msgSend(a2, "getNSStringForColumnName:table:", "uniqueIdentifier", "mailIntelligence_spotlightMapping");
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

  return *MEMORY[0x1E0D81788];
}

void __96__SGSqlEntityStore_SpotlightMapping__messageIdsForBundleIdentifier_domainIdentifierGlobs_limit___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = a2;
  objc_msgSend(v4, "bindNamedParam:toNSString:", ":bundleIdentifier", v3);
  objc_msgSend(v4, "bindNamedParam:toNSString:", ":domainIdentifierGlob", *(_QWORD *)(a1 + 40));

}

uint64_t __96__SGSqlEntityStore_SpotlightMapping__messageIdsForBundleIdentifier_domainIdentifierGlobs_limit___block_invoke_2(uint64_t a1, void *a2)
{
  void *v3;
  unint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;

  objc_msgSend(a2, "nonnullNSStringForColumnName:table:", "messageId", "mailIntelligence_spotlightMapping");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "addObject:", v3);
  v4 = objc_msgSend(*(id *)(a1 + 32), "count");
  v5 = *(_QWORD *)(a1 + 40);
  v6 = (unsigned __int8 *)MEMORY[0x1E0D81780];
  v7 = (unsigned __int8 *)MEMORY[0x1E0D81788];

  if (v4 >= v5)
    v8 = v7;
  else
    v8 = v6;
  return *v8;
}

void __86__SGSqlEntityStore_SpotlightMapping__messageIdsForBundleIdentifier_uniqueIdentifiers___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = a2;
  objc_msgSend(v4, "bindNamedParam:toNSString:", ":bundleIdentifier", v3);
  objc_msgSend(v4, "bindNamedParam:toNSArray:", ":uniqueIdentifiers", *(_QWORD *)(a1 + 40));

}

uint64_t __86__SGSqlEntityStore_SpotlightMapping__messageIdsForBundleIdentifier_uniqueIdentifiers___block_invoke_2(uint64_t a1, void *a2)
{
  void *v3;
  unsigned __int8 *v4;

  objc_msgSend(a2, "nonnullNSStringForColumnName:table:", "messageId", "mailIntelligence_spotlightMapping");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "addObject:", v3);
  v4 = (unsigned __int8 *)MEMORY[0x1E0D81780];

  return *v4;
}

void __74__SGSqlEntityStore_SpotlightMapping__messageIdsForBundleIdentifier_limit___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = a2;
  objc_msgSend(v4, "bindNamedParam:toNSString:", ":bundleIdentifier", v3);
  objc_msgSend(v4, "bindNamedParam:toInt64:", ":limit", *(_QWORD *)(a1 + 40));

}

uint64_t __74__SGSqlEntityStore_SpotlightMapping__messageIdsForBundleIdentifier_limit___block_invoke_2(uint64_t a1, void *a2)
{
  void *v3;
  unsigned __int8 *v4;

  objc_msgSend(a2, "nonnullNSStringForColumnName:table:", "messageId", "mailIntelligence_spotlightMapping");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "addObject:", v3);
  v4 = (unsigned __int8 *)MEMORY[0x1E0D81780];

  return *v4;
}

void __84__SGSqlEntityStore_SpotlightMapping__messageIdForBundleIdentifier_uniqueIdentifier___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = a2;
  objc_msgSend(v4, "bindNamedParam:toNSString:", ":uniqueIdentifier", v3);
  objc_msgSend(v4, "bindNamedParam:toNSString:", ":bundleIdentifier", *(_QWORD *)(a1 + 40));

}

uint64_t __84__SGSqlEntityStore_SpotlightMapping__messageIdForBundleIdentifier_uniqueIdentifier___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  objc_msgSend(a2, "getNSStringForColumnName:table:", "messageId", "mailIntelligence_spotlightMapping");
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

  return *MEMORY[0x1E0D81788];
}

- (int64_t)commitTag:(id)a3
{
  id v4;
  uint64_t v5;
  id v6;
  void *v7;
  SGSqliteDatabase *db;
  id v9;
  int64_t v10;
  _QWORD v12[5];
  __CFString *v13;
  id v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[4];
  id v21;

  v4 = a3;
  v5 = MEMORY[0x1E0C809B0];
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 3221225472;
  v20[2] = __36__SGSqlEntityStore_Tags__commitTag___block_invoke;
  v20[3] = &unk_1E7DB74A0;
  v6 = v4;
  v21 = v6;
  v7 = (void *)MEMORY[0x1C3BD5158](v20);
  v16 = 0;
  v17 = &v16;
  v18 = 0x2020000000;
  v19 = 0;
  db = self->_db;
  v12[0] = v5;
  v12[1] = 3221225472;
  v12[2] = __36__SGSqlEntityStore_Tags__commitTag___block_invoke_2;
  v12[3] = &unk_1E7DB74C8;
  v12[4] = self;
  v13 = CFSTR("INSERT INTO eventTags (name) VALUES (:name)");
  v9 = v7;
  v14 = v9;
  v15 = &v16;
  -[SGSqliteDatabase writeTransaction:](db, "writeTransaction:", v12);
  v10 = v17[3];

  _Block_object_dispose(&v16, 8);
  return v10;
}

- (id)loadTagForPrimaryKey:(int64_t)a3
{
  uint64_t v4;
  void *v5;
  SGSqliteDatabase *db;
  id v7;
  _QWORD v9[5];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  void (*v14)(uint64_t);
  id v15;
  _QWORD v16[5];

  v4 = MEMORY[0x1E0C809B0];
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3221225472;
  v16[2] = __47__SGSqlEntityStore_Tags__loadTagForPrimaryKey___block_invoke;
  v16[3] = &__block_descriptor_40_e29_v16__0___PASSqliteStatement_8l;
  v16[4] = a3;
  v5 = (void *)MEMORY[0x1C3BD5158](v16, a2);
  v10 = 0;
  v11 = &v10;
  v12 = 0x3032000000;
  v13 = __Block_byref_object_copy__34837;
  v14 = __Block_byref_object_dispose__34838;
  v15 = 0;
  db = self->_db;
  v9[0] = v4;
  v9[1] = 3221225472;
  v9[2] = __47__SGSqlEntityStore_Tags__loadTagForPrimaryKey___block_invoke_9;
  v9[3] = &unk_1E7DB7510;
  v9[4] = &v10;
  -[SGSqliteDatabase prepAndRunSQL:onPrep:onRow:onError:](db, "prepAndRunSQL:onPrep:onRow:onError:", CFSTR("SELECT name FROM eventTags WHERE id = :primaryKey"), v5, v9, 0);
  v7 = (id)v11[5];
  _Block_object_dispose(&v10, 8);

  return v7;
}

uint64_t __47__SGSqlEntityStore_Tags__loadTagForPrimaryKey___block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "bindNamedParam:toInt64:", ":primaryKey", *(_QWORD *)(a1 + 32));
}

uint64_t __47__SGSqlEntityStore_Tags__loadTagForPrimaryKey___block_invoke_9(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  objc_msgSend(a2, "getNSStringForColumn:", 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    objc_msgSend(MEMORY[0x1E0D197F0], "resolveName:", v3);
    v4 = objc_claimAutoreleasedReturnValue();
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v6 = *(void **)(v5 + 40);
    *(_QWORD *)(v5 + 40) = v4;

  }
  return 1;
}

void __36__SGSqlEntityStore_Tags__commitTag___block_invoke(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  id v4;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  objc_msgSend(v2, "name");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "bindNamedParam:toNSString:", ":name", v4);

}

sqlite3_int64 __36__SGSqlEntityStore_Tags__commitTag___block_invoke_2(_QWORD *a1)
{
  sqlite3_int64 result;

  objc_msgSend(*(id *)(a1[4] + 8), "prepAndRunSQL:onPrep:onRow:onError:", a1[5], a1[6], 0, 0);
  result = sqlite3_last_insert_rowid((sqlite3 *)objc_msgSend(*(id *)(a1[4] + 8), "handle"));
  *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 24) = result;
  return result;
}

@end
