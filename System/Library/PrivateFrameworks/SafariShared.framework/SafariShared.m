void sub_1A3D92710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1A3D92838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1A3D92918(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3D929B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A3D92AAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A3D92B84(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3D932D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,id location,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a67;
  uint64_t a68;
  char a70;
  id *v70;
  void *v71;
  uint64_t v72;

  objc_destroyWeak(v70);
  _Block_object_dispose(&a30, 8);

  _Block_object_dispose(&a36, 8);
  objc_destroyWeak(&location);

  _Block_object_dispose(&a70, 8);
  _Block_object_dispose(&STACK[0x260], 8);

  _Block_object_dispose(&STACK[0x290], 8);
  _Block_object_dispose(&STACK[0x2C0], 8);

  _Block_object_dispose(&STACK[0x2F0], 8);
  _Block_object_dispose((const void *)(v72 - 240), 8);

  _Unwind_Resume(a1);
}

uint64_t waitForGroupOrStopCondition(void *a1, uint64_t a2)
{
  NSObject *v3;
  int v4;
  dispatch_time_t v5;

  v3 = a1;
  do
  {
    v4 = (*(uint64_t (**)(uint64_t))(a2 + 16))(a2);
    if ((v4 & 1) != 0)
      break;
    v5 = dispatch_time(0, 55000000);
  }
  while (dispatch_group_wait(v3, v5));

  return v4 ^ 1u;
}

void sub_1A3D935AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3D9374C(_Unwind_Exception *a1)
{
  void *v1;
  id *v2;
  void *v3;
  uint64_t v4;

  objc_destroyWeak(v2);
  objc_destroyWeak((id *)(v4 - 72));

  _Unwind_Resume(a1);
}

void sub_1A3D939C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,char a28)
{
  void *v28;
  void *v29;
  uint64_t v30;

  _Block_object_dispose(&a28, 8);
  std::__hash_table<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>>>::~__hash_table(v30);

  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>>>::__deallocate_node(a1, *(id **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>>>::__deallocate_node(uint64_t a1, id *a2)
{
  id *v2;
  id *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (id *)*v2;

      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void SafariShared::ReadStreamedObjects(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  void (**v10)(id, _QWORD *);
  void (**v11)(id, _QWORD *);
  void (**v12)(id, _QWORD *);
  void (**v13)(id, _QWORD *);
  unsigned int (**v14)(_QWORD);
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  void (**v21)(id, _QWORD *);
  uint64_t v22;
  NSObject *v23;
  int *v24;
  _QWORD v25[2];

  v25[1] = *MEMORY[0x1E0C80C00];
  v10 = a2;
  v11 = a3;
  v12 = a4;
  v13 = a5;
  v14 = a6;
  v15 = malloc_type_malloc(0xD8uLL, 0x502F8467uLL);
  if (v15)
  {
    v16 = 216;
    while (2)
    {
      if (WBSReadExactAmountOfBytesFromFileDescriptor() >= 1)
      {
        if (v16 < HIDWORD(v25[0]))
        {
          free(v15);
          v15 = malloc_type_malloc(HIDWORD(v25[0]), 0x759749FFuLL);
          v16 = HIDWORD(v25[0]);
        }
        *v15 = v25[0];
        if (WBSReadExactAmountOfBytesFromFileDescriptor() >= 1)
        {
          switch(*(_DWORD *)v15)
          {
            case 1:
              v17 = v15[6];
              if (v17)
                v15[6] = (char *)v15 + v17;
              v18 = v15[7];
              if (v18)
                v15[7] = (char *)v15 + v18;
              v19 = v15 + 9;
              v20 = v15[9];
              v21 = v10;
              if (!v20)
                goto LABEL_23;
              v21 = v10;
              goto LABEL_21;
            case 2:
              v19 = v15 + 10;
              v20 = v15[10];
              v21 = v11;
              if (!v20)
                goto LABEL_23;
              v21 = v11;
              goto LABEL_21;
            case 7:
              if (!v12)
                goto LABEL_24;
              v22 = v15[4];
              if (v22)
                v15[4] = (char *)v15 + v22;
              v19 = v15 + 5;
              v20 = v15[5];
              v21 = v12;
              if (!v20)
                goto LABEL_23;
              v21 = v12;
LABEL_21:
              *v19 = (char *)v15 + v20;
LABEL_23:
              v21[2](v21, v15);
LABEL_24:
              if (v14 && v14[2](v14))
                break;
              continue;
            case 8:
              v21 = v13;
              if (v13)
                goto LABEL_23;
              goto LABEL_24;
            default:
              goto LABEL_24;
          }
        }
      }
      break;
    }
    free(v15);
  }
  else
  {
    v23 = (id)WBS_LOG_CHANNEL_PREFIXHistory();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      v24 = __error();
      SafariShared::ReadStreamedObjects(v24, (uint64_t)v25, v23);
    }

  }
}

void sub_1A3D93CEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void SafariShared::ReadStreamedObjects(uint64_t a1, void *a2, void *a3, void *a4)
{
  SafariShared::ReadStreamedObjects(a1, a2, a3, 0, 0, a4);
}

void sub_1A3D943A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3D944A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

void sub_1A3D95C84(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1A3D95F2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void __Block_byref_object_dispose_(uint64_t a1)
{

}

void __Block_byref_object_dispose__0(uint64_t a1)
{

}

void __Block_byref_object_dispose__1(uint64_t a1)
{

}

id *__Block_byref_object_dispose__2(uint64_t a1)
{
  return std::unique_ptr<SafariShared::SuddenTerminationDisabler>::reset[abi:sn180100]((id **)(a1 + 48), 0);
}

void __Block_byref_object_dispose__3(uint64_t a1)
{

}

void __Block_byref_object_dispose__4(uint64_t a1)
{

}

void __Block_byref_object_dispose__5(uint64_t a1)
{

}

void __Block_byref_object_dispose__6(uint64_t a1)
{

}

{

}

void __Block_byref_object_dispose__7(uint64_t a1)
{

}

void __Block_byref_object_dispose__8(uint64_t a1)
{

}

void __Block_byref_object_dispose__9(uint64_t a1)
{

}

void __Block_byref_object_dispose__10(uint64_t a1)
{

}

void __Block_byref_object_dispose__11(uint64_t a1)
{

}

void __Block_byref_object_dispose__12(uint64_t a1)
{

}

void __Block_byref_object_dispose__13(uint64_t a1)
{

}

void __Block_byref_object_dispose__14(uint64_t a1)
{

}

void __Block_byref_object_dispose__15(uint64_t a1)
{

}

void __Block_byref_object_dispose__16(uint64_t a1)
{

}

void __Block_byref_object_dispose__17(uint64_t a1)
{

}

void __Block_byref_object_dispose__18(uint64_t a1)
{

}

void __Block_byref_object_dispose__19(uint64_t a1)
{

}

void __Block_byref_object_dispose__20(uint64_t a1)
{

}

void __Block_byref_object_dispose__21(uint64_t a1)
{

}

void __Block_byref_object_dispose__22(uint64_t a1)
{

}

void __Block_byref_object_dispose__23(uint64_t a1)
{

}

void __Block_byref_object_dispose__24(uint64_t a1)
{

}

void __Block_byref_object_dispose__25(uint64_t a1)
{

}

void __Block_byref_object_dispose__26(uint64_t a1)
{

}

void __Block_byref_object_dispose__27(uint64_t a1)
{

}

void __Block_byref_object_dispose__28(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 40));
}

void __Block_byref_object_dispose__29(uint64_t a1)
{
  std::deque<_WBSSearchSuggestionCandidate>::~deque[abi:sn180100]((_QWORD *)(a1 + 48));
}

void __Block_byref_object_dispose__30(uint64_t a1)
{

}

void __Block_byref_object_dispose__31(uint64_t a1)
{

}

void __Block_byref_object_dispose__32(uint64_t a1)
{

}

void __Block_byref_object_dispose__33(uint64_t a1)
{

}

void __Block_byref_object_dispose__34(uint64_t a1)
{

}

void __Block_byref_object_dispose__35(uint64_t a1)
{

}

{
  _QWORD *v1;
  id *v2;
  id *v3;

  v3 = *(id **)(a1 + 48);
  v1 = (_QWORD *)(a1 + 48);
  v2 = v3;
  *v1 = 0;
  if (v3)
    std::default_delete<SafariShared::URLCompletionEntry>::operator()[abi:sn180100]((uint64_t)v1, v2);
}

void __Block_byref_object_dispose__36(uint64_t a1)
{

}

{
  objc_destroyWeak((id *)(a1 + 40));
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__1(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__2(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 48) = v2;
  return result;
}

uint64_t __Block_byref_object_copy__3(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__5(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__6(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__7(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__9(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__10(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = MEMORY[0x1A8599ED0](*(_QWORD *)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

uint64_t __Block_byref_object_copy__11(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__12(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__13(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__14(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__15(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__16(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = MEMORY[0x1A8599ED0](*(_QWORD *)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

uint64_t __Block_byref_object_copy__17(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__18(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__19(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__20(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__21(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__22(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = MEMORY[0x1A8599ED0](*(_QWORD *)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

uint64_t __Block_byref_object_copy__23(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__24(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__25(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__26(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__27(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_copy__28(uint64_t a1, uint64_t a2)
{
  objc_moveWeak((id *)(a1 + 40), (id *)(a2 + 40));
}

double __Block_byref_object_copy__29(_QWORD *a1, _QWORD *a2)
{
  double result;

  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  a1[9] = a2[9];
  result = 0.0;
  *((_OWORD *)a2 + 3) = 0u;
  *((_OWORD *)a2 + 4) = 0u;
  a1[10] = a2[10];
  a1[11] = a2[11];
  a2[10] = 0;
  a2[11] = 0;
  return result;
}

uint64_t __Block_byref_object_copy__30(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__31(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__32(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__33(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__34(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 48) = v2;
  return result;
}

uint64_t __Block_byref_object_copy__35(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__36(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = MEMORY[0x1A8599ED0](*(_QWORD *)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void sub_1A3D96454(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3D96514(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void ___ZNK12SafariShared21URLCompletionEntryMap21enumerateConcurrentlyEPU28objcproto17OS_dispatch_group8NSObjectPU28objcproto17OS_dispatch_queueS1_iU13block_pointerFvRKNS_18URLCompletionEntryEE_block_invoke_2(uint64_t a1)
{
  SafariShared::URLCompletionEntryMap::enumerate(*(uint64_t **)(a1 + 40), *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 52), *(void **)(a1 + 32));
}

void sub_1A3D96920(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3D96A28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t WBS_LOG_CHANNEL_PREFIXOfflineSearchSuggestions()
{
  if (WBS_LOG_CHANNEL_PREFIXOfflineSearchSuggestions_onceToken != -1)
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXOfflineSearchSuggestions_onceToken, &__block_literal_global_89_0);
  return WBS_LOG_CHANNEL_PREFIXOfflineSearchSuggestions_log;
}

void sub_1A3D96DA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3D96FC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3D971D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3D97240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3D972A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3D975B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t WBS_LOG_CHANNEL_PREFIXAppleAccount()
{
  if (WBS_LOG_CHANNEL_PREFIXAppleAccount_onceToken != -1)
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXAppleAccount_onceToken, &__block_literal_global_72);
  return WBS_LOG_CHANNEL_PREFIXAppleAccount_log;
}

id canonicalize(NSString *a1)
{
  NSString *v1;
  NSString *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  void *v30;
  void *v32;
  void *v33;
  uint64_t v34;
  __CFString *v35;

  v1 = a1;
  if (-[NSString safari_hasCaseInsensitivePrefix:](v1, "safari_hasCaseInsensitivePrefix:", CFSTR("http://www.")))goto LABEL_2;
  if (-[NSString safari_hasCaseInsensitivePrefix:](v1, "safari_hasCaseInsensitivePrefix:", CFSTR("https://www.")))
  {
    -[NSString substringFromIndex:](v1, "substringFromIndex:", objc_msgSend(CFSTR("https://www."), "length"));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(CFSTR("http://www."), "stringByAppendingString:", v4);
    v5 = objc_claimAutoreleasedReturnValue();
LABEL_12:
    v3 = (void *)v5;

    goto LABEL_13;
  }
  if (-[NSString safari_hasCaseInsensitivePrefix:](v1, "safari_hasCaseInsensitivePrefix:", CFSTR("http://")))
  {
    -[NSString substringFromIndex:](v1, "substringFromIndex:", objc_msgSend(CFSTR("http://"), "length"));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(CFSTR("http://www."), "stringByAppendingString:", v4);
    v5 = objc_claimAutoreleasedReturnValue();
    goto LABEL_12;
  }
  if (-[NSString safari_hasCaseInsensitivePrefix:](v1, "safari_hasCaseInsensitivePrefix:", CFSTR("https://wwws.")))
  {
    -[NSString substringFromIndex:](v1, "substringFromIndex:", objc_msgSend(CFSTR("https://wwws."), "length"));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(CFSTR("http://www."), "stringByAppendingString:", v4);
    v5 = objc_claimAutoreleasedReturnValue();
    goto LABEL_12;
  }
  if (-[NSString safari_hasCaseInsensitivePrefix:](v1, "safari_hasCaseInsensitivePrefix:", CFSTR("https://")))
  {
    -[NSString substringFromIndex:](v1, "substringFromIndex:", objc_msgSend(CFSTR("https://"), "length"));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(CFSTR("http://www."), "stringByAppendingString:", v4);
    v5 = objc_claimAutoreleasedReturnValue();
    goto LABEL_12;
  }
  objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", v1);
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v32, "scheme");
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  v34 = objc_msgSend(v33, "length");

  if (!v34)
  {
    if (-[NSString safari_hasCaseInsensitivePrefix:](v1, "safari_hasCaseInsensitivePrefix:", CFSTR("www.")))v35 = CFSTR("http://");
    else
      v35 = CFSTR("http://www.");
    -[__CFString stringByAppendingString:](v35, "stringByAppendingString:", v1);
    v2 = (NSString *)objc_claimAutoreleasedReturnValue();
    goto LABEL_3;
  }
LABEL_2:
  v2 = v1;
LABEL_3:
  v3 = v2;
LABEL_13:

  v6 = v3;
  v7 = objc_msgSend(v6, "rangeOfString:options:", CFSTR("/"), 4);
  if (v8
    && ((v9 = v7,
         v10 = objc_msgSend(v6, "length"),
         v11 = v10 - v9,
         objc_msgSend(v6, "rangeOfString:options:range:", CFSTR("index."), 1, v9, v10 - v9),
         v12)
     || (objc_msgSend(v6, "rangeOfString:options:range:", CFSTR("home."), 1, v9, v11), v13)))
  {
    objc_msgSend(v6, "substringToIndex:", v9 + 1);
    v14 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v14 = v6;
  }
  v15 = v14;

  v16 = v15;
  v17 = objc_msgSend(v16, "rangeOfString:", CFSTR("?"));
  if (v18)
  {
    objc_msgSend(v16, "substringToIndex:", v17);
    v19 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v19 = v16;
  }
  v20 = v19;

  v21 = v20;
  v22 = objc_msgSend(v21, "rangeOfString:options:", CFSTR("#"), 1);
  if (v23)
  {
    objc_msgSend(v21, "substringToIndex:", v22);
    v24 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v24 = v21;
  }
  v25 = v24;

  v26 = v25;
  v27 = objc_msgSend(v26, "length");
  if ((objc_msgSend(v26, "isEqualToString:", &stru_1E4B40D18) & 1) != 0
    || (v28 = v27 - 1, objc_msgSend(v26, "characterAtIndex:", v28) != 47))
  {
    v29 = v26;
  }
  else
  {
    objc_msgSend(v26, "substringToIndex:", v28);
    v29 = (id)objc_claimAutoreleasedReturnValue();
  }
  v30 = v29;

  return v30;
}

void sub_1A3D983A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3D9854C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A3D98C2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
  _Block_object_dispose(&a52, 8);
  _Block_object_dispose(&a56, 8);
  _Unwind_Resume(a1);
}

uint64_t __indexOfSectionWithIdentifier_block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;

  objc_msgSend(a2, "identifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isEqual:", *(_QWORD *)(a1 + 32));

  return v4;
}

id WBSHistoryServiceDatabaseInterface()
{
  if (WBSHistoryServiceDatabaseInterface_once != -1)
    dispatch_once(&WBSHistoryServiceDatabaseInterface_once, &__block_literal_global_63);
  return (id)WBSHistoryServiceDatabaseInterface_interface;
}

id WBSHistoryServiceDatabaseDelegateInterface()
{
  if (WBSHistoryServiceDatabaseDelegateInterface_once != -1)
    dispatch_once(&WBSHistoryServiceDatabaseDelegateInterface_once, &__block_literal_global_62);
  return (id)WBSHistoryServiceDatabaseDelegateInterface_interface;
}

id WBSCloudHistoryServiceInterface()
{
  if (WBSCloudHistoryServiceInterface_once != -1)
    dispatch_once(&WBSCloudHistoryServiceInterface_once, &__block_literal_global_16);
  return (id)WBSCloudHistoryServiceInterface_interface;
}

void sub_1A3D99EE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  os_unfair_lock_s *v14;
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  os_unfair_lock_unlock(v14);
  _Unwind_Resume(a1);
}

void SafariShared::URLCompletionEntryMap::enumerate(uint64_t *a1, int a2, int a3, void *a4)
{
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  int v14;
  BOOL v15;
  void (**v16)(id, _QWORD *);

  v16 = a4;
  v7 = WTF::HashTable<SafariShared::URLCompletionEntryKey,SafariShared::URLCompletionEntry,SafariShared::URLCompletionEntryKeyExtractor,SafariShared::URLCompletionEntryHash,SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryKeyTraits>::begin(a1);
  v9 = v7;
  v10 = v8;
  if (*a1)
    v11 = *a1 + 56 * *(unsigned int *)(*a1 - 4);
  else
    v11 = 0;
  if (a2 >= 1 && (_QWORD *)v11 != v7)
  {
    v12 = 0;
    while (1)
    {
      v9 += 7;
      if (v9 == v8)
      {
        v9 = v8;
LABEL_14:
        if (++v12 >= a2 || v9 == (_QWORD *)v11)
          break;
      }
      else
      {
        if (*v9)
          v13 = *v9 == (_QWORD)&stru_1E4B40D18;
        else
          v13 = 1;
        if (!v13)
          goto LABEL_14;
      }
    }
  }
  if (v9 != (_QWORD *)v11)
  {
    while (1)
    {
      v16[2](v16, v9);
      if (a3 >= 1 && v9 != (_QWORD *)v11)
        break;
LABEL_29:
      if (v9 == (_QWORD *)v11)
        goto LABEL_30;
    }
    v14 = 0;
    while (1)
    {
      v9 += 7;
      if (v9 == v10)
      {
        v9 = v10;
LABEL_27:
        if (++v14 >= a3 || v9 == (_QWORD *)v11)
          goto LABEL_29;
      }
      else
      {
        if (*v9)
          v15 = *v9 == (_QWORD)&stru_1E4B40D18;
        else
          v15 = 1;
        if (!v15)
          goto LABEL_27;
      }
    }
  }
LABEL_30:

}

void sub_1A3D9A2EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

_QWORD *WTF::HashTable<SafariShared::URLCompletionEntryKey,SafariShared::URLCompletionEntry,SafariShared::URLCompletionEntryKeyExtractor,SafariShared::URLCompletionEntryHash,SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryKeyTraits>::begin(uint64_t *a1)
{
  _QWORD *v1;

  v1 = (_QWORD *)*a1;
  if (!*a1)
    return 0;
  if (*((_DWORD *)v1 - 3))
    return WTF::HashTable<SafariShared::URLCompletionEntryKey,SafariShared::URLCompletionEntry,SafariShared::URLCompletionEntryKeyExtractor,SafariShared::URLCompletionEntryHash,SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryKeyTraits>::makeConstIterator(a1, v1);
  return &v1[7 * *((unsigned int *)v1 - 1)];
}

void __allStores_block_invoke()
{
  uint64_t v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3690], "weakObjectsHashTable");
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)allStores_allStores;
  allStores_allStores = v0;

}

void sub_1A3D9A7E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A3D9B468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  void *v45;
  void *v46;
  uint64_t v47;

  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::~__hash_table(v47 - 144);

  SafariShared::HistoryObjectStreamWriter::~HistoryObjectStreamWriter(&a30);
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::~__hash_table((uint64_t)&a33);
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::~__hash_table((uint64_t)&a39);
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::~__hash_table((uint64_t)&a45);

  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__do_rehash<true>(a1, prime);
  }
}

uint64_t SafariShared::LatestVisitInformationMap::size(SafariShared::LatestVisitInformationMap *this)
{
  return *((_QWORD *)this + 3);
}

void sub_1A3D9B854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * {__strong}&,double &>(void *a1, _QWORD *a2, double *a3)
{
  id v5;

  v5 = a1;
  objc_msgSend(v5, "bindString:atParameterIndex:", *a2, 1);
  objc_msgSend(v5, "bindDouble:atParameterIndex:", 2, *a3);

}

void sub_1A3D9B8C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3D9BB8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;

  v25 = v23;

  _Unwind_Resume(a1);
}

void SafariShared::HistoryObjectStreamWriter::~HistoryObjectStreamWriter(void **this)
{
  free(*this);
}

{
  free(*this);
}

SafariShared::HistoryObjectStreamWriter *SafariShared::HistoryObjectStreamWriter::HistoryObjectStreamWriter(SafariShared::HistoryObjectStreamWriter *this, int a2)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = a2;
  fcntl(a2, 73, 1);
  return this;
}

{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = a2;
  fcntl(a2, 73, 1);
  return this;
}

void sub_1A3D9C04C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

id SafariShared::HistoryObjectStreamWriter::createPipeHandles(_QWORD *a1, _QWORD *a2)
{
  id v4;
  id v5;
  int v7[2];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (pipe(v7) == -1)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2FE0], *__error(), 0);
    return (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v4 = objc_alloc(MEMORY[0x1E0CB3608]);
    *a1 = (id)objc_msgSend(v4, "initWithFileDescriptor:closeOnDealloc:", v7[0], 1);
    v5 = objc_alloc(MEMORY[0x1E0CB3608]);
    *a2 = (id)objc_msgSend(v5, "initWithFileDescriptor:closeOnDealloc:", v7[1], 1);
    return 0;
  }
}

void sub_1A3D9C374(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *v11;
  unint64_t v12;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:sn180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v11 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2)
              v12 %= a2;
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *v7 = *v11;
            *v11 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = v11;
            v11 = v7;
          }
          v12 = v8;
LABEL_24:
          v7 = v11;
          v11 = (_QWORD *)*v11;
          v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void sub_1A3D9C8D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1A3D9CCB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

id SafariShared::WBSSQLiteDatabaseFetch<NSString * {__strong}&>(void *a1, void *a2, _QWORD *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;

  v5 = a1;
  v6 = a2;
  v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89CC8]), "initWithDatabase:query:", v5, v6);
  objc_msgSend(v7, "bindString:atParameterIndex:", *a3, 1);
  objc_msgSend(v7, "fetch");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

void sub_1A3D9CE2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id SafariShared::WBSSQLiteDatabaseFetch<NSString * const {__strong}&>(void *a1, void *a2, _QWORD *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;

  v5 = a1;
  v6 = a2;
  v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89CC8]), "initWithDatabase:query:", v5, v6);
  objc_msgSend(v7, "bindString:atParameterIndex:", *a3, 1);
  objc_msgSend(v7, "fetch");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

void sub_1A3D9CECC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id SafariShared::WBSSQLiteDatabaseFetch<double const&,double const&>(void *a1, void *a2, double *a3, double *a4)
{
  id v7;
  id v8;
  void *v9;
  void *v10;

  v7 = a1;
  v8 = a2;
  v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89CC8]), "initWithDatabase:query:", v7, v8);
  SafariShared::_WBSSQLiteStatementBindAllParameters<1,double const&,double const&>(v9, a3, a4);
  objc_msgSend(v9, "fetch");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

void sub_1A3D9CF78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id SafariShared::WBSSQLiteDatabaseFetch<>(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;

  v3 = a1;
  v4 = a2;
  v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89CC8]), "initWithDatabase:query:", v3, v4);
  objc_msgSend(v5, "fetch");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

void sub_1A3D9D004(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,double const&,double const&>(void *a1, double *a2, double *a3)
{
  id v5;

  v5 = a1;
  objc_msgSend(v5, "bindDouble:atParameterIndex:", 1, *a2);
  objc_msgSend(v5, "bindDouble:atParameterIndex:", 2, *a3);

}

void sub_1A3D9D074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3D9D160(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3D9DB20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

uint64_t WBS_LOG_CHANNEL_PREFIXHistory()
{
  if (WBS_LOG_CHANNEL_PREFIXHistory_onceToken != -1)
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXHistory_onceToken, &__block_literal_global_27);
  return WBS_LOG_CHANNEL_PREFIXHistory_log;
}

uint64_t indexOfSectionWithIdentifier(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  _QWORD v7[4];
  id v8;

  v3 = a2;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __indexOfSectionWithIdentifier_block_invoke;
  v7[3] = &unk_1E4B3FE98;
  v8 = v3;
  v4 = v3;
  v5 = objc_msgSend(a1, "indexOfObjectPassingTest:", v7);

  return v5;
}

void sub_1A3D9E2D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3D9E390(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3D9E5A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3D9EC54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3D9EDC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3D9EF30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3D9F158(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3D9F318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1A3D9F670(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3D9F72C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3D9F940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17)
{
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::WBSSQLiteDatabaseEnumerate<NSDate * const {__strong}&,NSDate * const {__strong},int,void({block_pointer} {__strong})(NSString *)>(void *a1, uint64_t a2, void *a3, id *a4, id *a5, int *a6, _QWORD *a7)
{
  id v13;
  id v14;
  void *v15;
  void *v16;
  sqlite3_stmt *v17;
  uint64_t v18;
  id *v20[2];
  int v21;
  id v22;

  v13 = a1;
  v14 = a3;
  v15 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89CC8]), "initWithDatabase:query:error:", v13, v14, a2);
  v16 = v15;
  if (v15)
  {
    v17 = (sqlite3_stmt *)objc_msgSend(v15, "handle");
    v20[0] = a4;
    v20[1] = a5;
    v21 = *a6;
    v22 = (id)MEMORY[0x1A8599ED0](*a7);
    v18 = SafariShared::_WBSSQLiteStatementBindOrStep<0,3,std::tuple<NSDate * const {__strong}&,NSDate * const {__strong},int,void({block_pointer} {__strong})(NSString *)>>(v13, v17, a2, v20);

    objc_msgSend(v16, "invalidate");
  }
  else
  {
    v18 = 0;
  }

  return v18;
}

void sub_1A3D9FA78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<0,3,std::tuple<NSDate * const {__strong}&,NSDate * const {__strong},int,void({block_pointer} {__strong})(NSString *)>>(void *a1, sqlite3_stmt *a2, uint64_t a3, id **a4)
{
  id v7;
  id v8;
  void *v9;
  double v10;
  int v11;
  int v12;
  uint64_t v13;

  v7 = a1;
  v8 = **a4;
  v9 = v8;
  if (v8)
  {
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
    v11 = sqlite3_bind_double(a2, 1, v10);
  }
  else
  {
    v11 = sqlite3_bind_null(a2, 1);
  }
  v12 = v11;

  if (v12)
  {
    objc_msgSend(v7, "reportErrorWithCode:statement:error:", 1, a2, a3);
    v13 = 0;
  }
  else
  {
    v13 = SafariShared::_WBSSQLiteStatementBindOrStep<1,3,std::tuple<NSDate * const {__strong}&,NSDate * const {__strong},int,void({block_pointer} {__strong})(NSString *)>>(v7, a2, a3, (uint64_t)a4);
  }

  return v13;
}

void sub_1A3D9FB64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<1,3,std::tuple<NSDate * const {__strong}&,NSDate * const {__strong},int,void({block_pointer} {__strong})(NSString *)>>(void *a1, sqlite3_stmt *a2, uint64_t a3, uint64_t a4)
{
  id v7;
  id v8;
  void *v9;
  double v10;
  int v11;
  int v12;
  uint64_t v13;

  v7 = a1;
  v8 = **(id **)(a4 + 8);
  v9 = v8;
  if (v8)
  {
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
    v11 = sqlite3_bind_double(a2, 2, v10);
  }
  else
  {
    v11 = sqlite3_bind_null(a2, 2);
  }
  v12 = v11;

  if (v12)
  {
    objc_msgSend(v7, "reportErrorWithCode:statement:error:", 1, a2, a3);
    v13 = 0;
  }
  else
  {
    v13 = SafariShared::_WBSSQLiteStatementBindOrStep<2,3,std::tuple<NSDate * const {__strong}&,NSDate * const {__strong},int,void({block_pointer} {__strong})(NSString *)>>(v7, a2, a3, a4);
  }

  return v13;
}

void sub_1A3D9FC40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<2,3,std::tuple<NSDate * const {__strong}&,NSDate * const {__strong},int,void({block_pointer} {__strong})(NSString *)>>(void *a1, sqlite3_stmt *a2, uint64_t a3, uint64_t a4)
{
  id v7;
  uint64_t v8;

  v7 = a1;
  if (sqlite3_bind_int(a2, 3, *(_DWORD *)(a4 + 16)))
  {
    objc_msgSend(v7, "reportErrorWithCode:statement:error:", 1, a2, a3);
    v8 = 0;
  }
  else
  {
    v8 = SafariShared::_WBSSQLiteStatementBindOrStep<3,3,std::tuple<NSDate * const {__strong}&,NSDate * const {__strong},int,void({block_pointer} {__strong})(NSString *)>>(v7, a2, a3, a4);
  }

  return v8;
}

void sub_1A3D9FCE4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<3,3,std::tuple<NSDate * const {__strong}&,NSDate * const {__strong},int,void({block_pointer} {__strong})(NSString *)>>(void *a1, sqlite3_stmt *a2, uint64_t a3, uint64_t a4)
{
  id v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v7 = a1;
  while (1)
  {
    v8 = sqlite3_step(a2);
    if ((_DWORD)v8 != 100)
      break;
    SafariShared::WBSSQLiteEnumerationBlock<void,NSString * {__strong}>::callBlockWithAllColumns((uint64_t)&v11, a2, *(void **)(a4 + 24));
  }
  if ((_DWORD)v8 == 101)
  {
    v9 = 1;
  }
  else
  {
    objc_msgSend(v7, "reportErrorWithCode:statement:error:", v8, a2, a3);
    v9 = 0;
  }

  return v9;
}

void sub_1A3D9FD88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3D9FFEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<>(void *a1, _QWORD *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  id v13;

  v5 = a1;
  v6 = a3;
  v13 = 0;
  v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89CC8]), "initWithDatabase:query:error:", v5, v6, &v13);
  v8 = v13;
  v9 = v8;
  if (v7)
  {
    v10 = objc_msgSend(v7, "execute");
    objc_msgSend(v7, "invalidate");
    if ((v10 - 100) >= 2 && (_DWORD)v10 != 0)
      objc_msgSend(v5, "reportErrorWithCode:statement:error:", v10, objc_msgSend(v7, "handle"), a2);
  }
  else
  {
    if (a2)
      *a2 = objc_retainAutorelease(v8);
    v10 = objc_msgSend(v9, "code");
  }

  return v10;
}

void sub_1A3DA020C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A3DA0554(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1A3DA060C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3DA0790(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3DA0864(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3DA0994(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3DA129C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15)
{

  _Unwind_Resume(a1);
}

void sub_1A3DA193C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3DA1CCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1A3DA1F2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3DA1FBC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t WBSHistoryInMemoryDatabaseURL()
{
  return objc_msgSend(MEMORY[0x1E0D89CC0], "inMemoryDatabaseURL");
}

void sub_1A3DA2324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{

  _Unwind_Resume(a1);
}

id digitalHealthManagerGlobalQueue()
{
  if (digitalHealthManagerGlobalQueue_once != -1)
    dispatch_once(&digitalHealthManagerGlobalQueue_once, &__block_literal_global_70);
  return (id)digitalHealthManagerGlobalQueue_queue;
}

void sub_1A3DA2BFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void **a33)
{
  void *v33;
  void *v34;
  void *v35;
  uint64_t v36;

  _Block_object_dispose(&a33, 8);
  _Block_object_dispose((const void *)(v36 - 176), 8);
  std::vector<WBSHistoryServiceURLCompletionMatchEntry * {__strong}>::__destroy_vector::operator()[abi:sn180100](&a33);

  _Unwind_Resume(a1);
}

void sub_1A3DA2DF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3DA2F84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3DA30B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A3DA337C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3DA35A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3DA364C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3DA3710(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3DA3784(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3DA3908(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  void *v14;
  void *v15;
  id *v16;

  objc_destroyWeak(v16);

  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A3DA39E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id _urlForStorage(void)
{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;

  v0 = (void *)_urlForStorage(void)::settingsFileURL;
  if (!_urlForStorage(void)::settingsFileURL)
  {
    objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "safari_settingsDirectoryURL");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "URLByAppendingPathComponent:isDirectory:", CFSTR("BypassedInvalidCertificateWarning.plist"), 0);
    v3 = objc_claimAutoreleasedReturnValue();
    v4 = (void *)_urlForStorage(void)::settingsFileURL;
    _urlForStorage(void)::settingsFileURL = v3;

    v0 = (void *)_urlForStorage(void)::settingsFileURL;
  }
  return v0;
}

void sub_1A3DA3A78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void WBSContentBlockerStatisticsStoreMergeStatistics(void *a1, void *a2)
{
  id v3;
  id v4;
  _QWORD v5[4];
  id v6;

  v3 = a1;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __WBSContentBlockerStatisticsStoreMergeStatistics_block_invoke;
  v5[3] = &unk_1E4B380A0;
  v6 = v3;
  v4 = v3;
  objc_msgSend(a2, "enumerateKeysAndObjectsUsingBlock:", v5);

}

void WBSContentBlockerStatisticsStoreFetchAllBlockedThirdParties(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  NSObject *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  void *v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t j;
  void *v22;
  NSObject *v23;
  NSObject *v24;
  id v25;
  id v26;
  id v27;
  id obj;
  id obja;
  _QWORD block[4];
  id v31;
  id v32;
  _QWORD v33[4];
  NSObject *v34;
  id v35;
  void *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _QWORD v41[4];
  id v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _BYTE v47[128];
  uint8_t v48[128];
  uint8_t buf[4];
  id v50;
  __int16 v51;
  id v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a2;
  v9 = a3;
  v27 = a4;
  v10 = WBS_LOG_CHANNEL_PREFIXContentBlockers();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138543618;
    v50 = v7;
    v51 = 2114;
    v52 = v8;
    _os_log_impl(&dword_1A3D90000, v10, OS_LOG_TYPE_INFO, "Loading content blocker statistics from %{public}@ to %{public}@", buf, 0x16u);
  }
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  +[WBSContentBlockerStatisticsInMemoryStore allStores](WBSContentBlockerStatisticsInMemoryStore, "allStores");
  obj = (id)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v43, v48, 16);
  if (v12)
  {
    v13 = v12;
    v14 = *(_QWORD *)v44;
    do
    {
      for (i = 0; i != v13; ++i)
      {
        if (*(_QWORD *)v44 != v14)
          objc_enumerationMutation(obj);
        v16 = *(void **)(*((_QWORD *)&v43 + 1) + 8 * i);
        v41[0] = MEMORY[0x1E0C809B0];
        v41[1] = 3221225472;
        v41[2] = __WBSContentBlockerStatisticsStoreFetchAllBlockedThirdParties_block_invoke;
        v41[3] = &unk_1E4B29D40;
        v42 = v11;
        objc_msgSend(v16, "blockedThirdPartiesAfter:before:onFirstParty:completionHandler:", v7, v8, v9, v41);

      }
      v13 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v43, v48, 16);
    }
    while (v13);
  }

  v17 = dispatch_group_create();
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  +[WBSContentBlockerStatisticsSQLiteStore allStores](WBSContentBlockerStatisticsSQLiteStore, "allStores");
  obja = (id)objc_claimAutoreleasedReturnValue();
  v18 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v37, v47, 16);
  if (v18)
  {
    v19 = v18;
    v20 = *(_QWORD *)v38;
    do
    {
      for (j = 0; j != v19; ++j)
      {
        if (*(_QWORD *)v38 != v20)
          objc_enumerationMutation(obja);
        v22 = *(void **)(*((_QWORD *)&v37 + 1) + 8 * j);
        v23 = WBS_LOG_CHANNEL_PREFIXContentBlockers();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138543362;
          v50 = v22;
          _os_log_impl(&dword_1A3D90000, v23, OS_LOG_TYPE_INFO, "Loading content blocker statistics from %{public}@", buf, 0xCu);
        }
        dispatch_group_enter(v17);
        v33[0] = MEMORY[0x1E0C809B0];
        v33[1] = 3221225472;
        v33[2] = __WBSContentBlockerStatisticsStoreFetchAllBlockedThirdParties_block_invoke_5;
        v33[3] = &unk_1E4B380C8;
        v34 = v17;
        v35 = v11;
        v36 = v22;
        objc_msgSend(v22, "blockedThirdPartiesAfter:before:onFirstParty:completionHandler:", v7, v8, v9, v33);

      }
      v19 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v37, v47, 16);
    }
    while (v19);
  }

  fetchingQueue();
  v24 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __WBSContentBlockerStatisticsStoreFetchAllBlockedThirdParties_block_invoke_7;
  block[3] = &unk_1E4B2B998;
  v31 = v11;
  v32 = v27;
  v25 = v11;
  v26 = v27;
  dispatch_group_notify(v17, v24, block);

}

uint64_t WBS_LOG_CHANNEL_PREFIXContentBlockers()
{
  if (WBS_LOG_CHANNEL_PREFIXContentBlockers_onceToken != -1)
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXContentBlockers_onceToken, &__block_literal_global_21);
  return WBS_LOG_CHANNEL_PREFIXContentBlockers_log;
}

void sub_1A3DA4300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{

  _Unwind_Resume(a1);
}

id fetchingQueue()
{
  if (fetchingQueue_onceToken != -1)
    dispatch_once(&fetchingQueue_onceToken, &__block_literal_global_8);
  return (id)fetchingQueue_fetchingQueue;
}

void sub_1A3DA45AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A3DA4798(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3DA4930(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id allProfileDatabaseIdentifiers(void)
{
  if (allProfileDatabaseIdentifiers(void)::onceToken != -1)
    dispatch_once(&allProfileDatabaseIdentifiers(void)::onceToken, &__block_literal_global_160);
  return (id)allProfileDatabaseIdentifiers(void)::allProfileDatabaseIdentifiers;
}

id allStores()
{
  if (allStores_onceToken != -1)
    dispatch_once(&allStores_onceToken, &__block_literal_global_90);
  return (id)allStores_allStores;
}

void sub_1A3DA4AFC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3DA4D4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3DA4ECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A3DA4F80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1A3DA51E4(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  objc_destroyWeak((id *)(v2 - 64));
  _Unwind_Resume(a1);
}

void sub_1A3DA52B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3DA53AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3DA54B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1A3DA56C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A3DA5B24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t WBS_LOG_CHANNEL_PREFIXCloudTabs()
{
  if (WBS_LOG_CHANNEL_PREFIXCloudTabs_onceToken != -1)
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXCloudTabs_onceToken, &__block_literal_global_19_0);
  return WBS_LOG_CHANNEL_PREFIXCloudTabs_log;
}

void sub_1A3DA5EF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1A3DA626C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3DA6F6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55,char a56)
{
  void *v56;
  void *v57;
  void *v58;

  _Block_object_dispose(&a28, 8);
  std::__hash_table<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>>>::~__hash_table(a9);
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::~__hash_table((uint64_t)&a39);
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::~__hash_table((uint64_t)&a45);

  _Unwind_Resume(a1);
}

uint64_t WBS_LOG_CHANNEL_PREFIXURLAutocomplete()
{
  if (WBS_LOG_CHANNEL_PREFIXURLAutocomplete_onceToken != -1)
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXURLAutocomplete_onceToken, &__block_literal_global_67_1);
  return WBS_LOG_CHANNEL_PREFIXURLAutocomplete_log;
}

void sub_1A3DA72A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void ___ZL29allProfileDatabaseIdentifiersv_block_invoke()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  void *v10;
  void *v11;
  int v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  id v21;
  _BYTE v22[16];
  _BYTE v23[128];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99E20], "set");
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)allProfileDatabaseIdentifiers(void)::allProfileDatabaseIdentifiers;
  allProfileDatabaseIdentifiers(void)::allProfileDatabaseIdentifiers = v0;

  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "safari_profilesDirectoryURL");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = 0;
  objc_msgSend(v2, "contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:", v3, 0, 0, &v21);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = v21;

  if (!v16)
  {
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v4 = v15;
    v6 = -[NSObject countByEnumeratingWithState:objects:count:](v4, "countByEnumeratingWithState:objects:count:", &v17, v23, 16);
    if (v6)
    {
      v7 = *(_QWORD *)v18;
      do
      {
        for (i = 0; i != v6; ++i)
        {
          if (*(_QWORD *)v18 != v7)
            objc_enumerationMutation(v4);
          v9 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * i);
          objc_msgSend(v9, "URLByAppendingPathComponent:isDirectory:", CFSTR("ContentBlockerStatistics.db"), 0, v15);
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v10, "path");
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          v12 = objc_msgSend(v2, "fileExistsAtPath:", v11);

          if (v12)
          {
            v13 = (void *)allProfileDatabaseIdentifiers(void)::allProfileDatabaseIdentifiers;
            objc_msgSend(v9, "lastPathComponent");
            v14 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v13, "addObject:", v14);

          }
        }
        v6 = -[NSObject countByEnumeratingWithState:objects:count:](v4, "countByEnumeratingWithState:objects:count:", &v17, v23, 16);
      }
      while (v6);
    }
    goto LABEL_14;
  }
  if ((objc_msgSend(v16, "safari_matchesErrorDomain:andCode:", *MEMORY[0x1E0CB28A8], 260, v15) & 1) == 0)
  {
    v4 = (id)WBS_LOG_CHANNEL_PREFIXContentBlockers();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      objc_msgSend(v16, "safari_privacyPreservingDescription");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      ___ZL29allProfileDatabaseIdentifiersv_block_invoke_cold_1(v5, (uint64_t)v22, v4);
    }
LABEL_14:

  }
}

void sub_1A3DA76C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1A3DA7984(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3DA7B2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A3DA7EC4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  va_list va;

  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A3DA8284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A3DA83B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3DA842C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3DA84AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3DA87A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3DA8934(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3DA8C6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void WBSSQLiteComputeLatestVisitFinal(sqlite3_context *a1)
{
  sqlite3_int64 v2;

  v2 = *((_QWORD *)sqlite3_user_data(a1) + 3);
  sqlite3_result_int64(a1, v2);
}

void __digitalHealthManagerGlobalQueue_block_invoke()
{
  dispatch_queue_t v0;
  void *v1;

  v0 = dispatch_queue_create("com.apple.SafariShared.WBSDigitalHealthManager.globalQueue", 0);
  v1 = (void *)digitalHealthManagerGlobalQueue_queue;
  digitalHealthManagerGlobalQueue_queue = (uint64_t)v0;

}

void sub_1A3DA8FC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3DA91E0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  _Block_object_dispose((const void *)(v2 - 80), 8);
  _Unwind_Resume(a1);
}

id WBSHistoryConnectionInterface()
{
  if (WBSHistoryConnectionInterface_once != -1)
    dispatch_once(&WBSHistoryConnectionInterface_once, &__block_literal_global_58);
  return (id)WBSHistoryConnectionInterface_interface;
}

void sub_1A3DA9308(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3DA9514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17)
{
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1A3DA95B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t OUTLINED_FUNCTION_3_0()
{
  return objc_opt_class();
}

void OUTLINED_FUNCTION_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

uint64_t OUTLINED_FUNCTION_4(uint64_t result, uint64_t a2, float a3)
{
  *(float *)a2 = a3;
  *(_QWORD *)(a2 + 4) = result;
  return result;
}

id OUTLINED_FUNCTION_2_2(id a1)
{
  return a1;
}

uint64_t OUTLINED_FUNCTION_3_2()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_3_3(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void OUTLINED_FUNCTION_5_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 2u);
}

void OUTLINED_FUNCTION_0_0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void OUTLINED_FUNCTION_7(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

uint64_t OUTLINED_FUNCTION_2_5()
{
  void *v0;

  return objc_msgSend(v0, "nextBackoffTimeInterval");
}

void OUTLINED_FUNCTION_2_6(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 8u);
}

void OUTLINED_FUNCTION_0_2(void *a1@<X0>, const char *a2@<X3>, uint8_t *a3@<X4>, NSObject *a4@<X8>)
{
  _os_log_error_impl(a1, a4, OS_LOG_TYPE_ERROR, a2, a3, 0x16u);
}

uint64_t OUTLINED_FUNCTION_1_1(uint64_t result, uint64_t a2, uint64_t a3, float a4)
{
  *(float *)a3 = a4;
  *(_QWORD *)(a3 + 4) = result;
  *(_WORD *)(a3 + 12) = 2114;
  *(_QWORD *)(a3 + 14) = a2;
  return result;
}

void OUTLINED_FUNCTION_0_3(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

void OUTLINED_FUNCTION_0_4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void OUTLINED_FUNCTION_0_5(void *a1, int a2, os_log_t log, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

void OUTLINED_FUNCTION_0_6(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 2u);
}

void OUTLINED_FUNCTION_7_0(void *a1@<X0>, const char *a2@<X3>, uint8_t *a3@<X4>, NSObject *a4@<X8>)
{
  _os_log_debug_impl(a1, a4, OS_LOG_TYPE_DEBUG, a2, a3, 0x16u);
}

void OUTLINED_FUNCTION_0_7(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 8u);
}

void OUTLINED_FUNCTION_0_8(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, a5, 0xCu);
}

uint64_t OUTLINED_FUNCTION_0_9(uint64_t result, uint64_t a2, int a3, float a4)
{
  *(float *)a2 = a4;
  *(_QWORD *)(a2 + 4) = result;
  *(_WORD *)(a2 + 12) = 1024;
  *(_DWORD *)(a2 + 14) = a3;
  return result;
}

void OUTLINED_FUNCTION_0_10(void *a1, int a2, os_log_t log, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, a5, 0xCu);
}

void OUTLINED_FUNCTION_1_2(void *a1, int a2, os_log_t log, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, a5, 8u);
}

uint64_t OUTLINED_FUNCTION_0_11(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3;

  *(_QWORD *)(a2 + 4) = v3;
  *(_WORD *)(a2 + 12) = 2114;
  *(_QWORD *)(a2 + 14) = result;
  *(_WORD *)(a2 + 22) = 1024;
  *(_DWORD *)(a2 + 24) = a3;
  return result;
}

void OUTLINED_FUNCTION_0_14(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x16u);
}

void OUTLINED_FUNCTION_0_15(void *a1, int a2, os_log_t log, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, a5, 2u);
}

void OUTLINED_FUNCTION_0_16(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0x16u);
}

uint64_t WBS_LOG_CHANNEL_PREFIXCloudBookmarks()
{
  if (WBS_LOG_CHANNEL_PREFIXCloudBookmarks_onceToken != -1)
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXCloudBookmarks_onceToken, &__block_literal_global_15_1);
  return WBS_LOG_CHANNEL_PREFIXCloudBookmarks_log;
}

void __fetchingQueue_block_invoke()
{
  dispatch_queue_t v0;
  void *v1;
  NSObject *v2;

  dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
  v2 = objc_claimAutoreleasedReturnValue();
  v0 = dispatch_queue_create("com.apple.SafariShared.WBSContentBlockerStatisticsStore", v2);
  v1 = (void *)fetchingQueue_fetchingQueue;
  fetchingQueue_fetchingQueue = (uint64_t)v0;

}

void sub_1A3DAA894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A3DAAAB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16)
{

  _Unwind_Resume(a1);
}

void sub_1A3DAACB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3DAAE40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3DAAF00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void SafariShared::URLCompletionEntryMap::enumerateConcurrently(uint64_t a1, void *a2, void *a3, int a4, void *a5)
{
  NSObject *v9;
  NSObject *v10;
  id v11;
  void *v12;
  int v13;
  uint64_t v14;
  _QWORD v15[4];
  id v16;
  uint64_t v17;
  int v18;
  int v19;
  _QWORD block[4];
  id v21;
  uint64_t v22;

  v9 = a2;
  v10 = a3;
  v11 = a5;
  v12 = v11;
  if (a4 == 1)
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = ___ZNK12SafariShared21URLCompletionEntryMap21enumerateConcurrentlyEPU28objcproto17OS_dispatch_group8NSObjectPU28objcproto17OS_dispatch_queueS1_iU13block_pointerFvRKNS_18URLCompletionEntryEE_block_invoke;
    block[3] = &unk_1E4B39270;
    v22 = a1;
    v21 = v11;
    dispatch_group_async(v9, v10, block);

  }
  else if (a4 >= 1)
  {
    v13 = 0;
    v14 = MEMORY[0x1E0C809B0];
    do
    {
      v15[0] = v14;
      v15[1] = 3221225472;
      v15[2] = ___ZNK12SafariShared21URLCompletionEntryMap21enumerateConcurrentlyEPU28objcproto17OS_dispatch_group8NSObjectPU28objcproto17OS_dispatch_queueS1_iU13block_pointerFvRKNS_18URLCompletionEntryEE_block_invoke_2;
      v15[3] = &unk_1E4B3C2F0;
      v17 = a1;
      v18 = v13;
      v19 = a4;
      v16 = v12;
      dispatch_group_async(v9, v10, v15);

      ++v13;
    }
    while (a4 != v13);
  }

}

uint64_t WBSTopSitesMinimumVisitCountThreshold(unint64_t a1)
{
  unint64_t v1;

  v1 = (unint64_t)(float)((float)a1 * 0.011);
  if (v1 <= 3)
    v1 = 3;
  if (v1 >= 0xF)
    return 15;
  else
    return v1;
}

uint64_t WBSHistoryVisitScoreForWeightedVisitCount(float a1)
{
  return (int)(float)(a1 * 100.0);
}

void sub_1A3DAB5C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id WBSTabOrderManagerDefaultPreferenceValues()
{
  _QWORD v1[2];
  _QWORD v2[3];

  v2[2] = *MEMORY[0x1E0C80C00];
  v1[0] = CFSTR("WBSNewTabPositionPreferenceKey");
  v1[1] = CFSTR("WBSNewBlankTabPositionDelayPreferenceKey");
  v2[0] = &unk_1E4B87C70;
  v2[1] = &unk_1E4B87C88;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v2, v1, 2);
  return (id)objc_claimAutoreleasedReturnValue();
}

void sub_1A3DAB9C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1A3DABA68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void SafariShared::ReaderAvailabilityController::configureProcessPool(SafariShared::ReaderAvailabilityController *this, WKProcessPool *a2)
{
  void *v2;
  void *v3;
  SafariShared::ReaderAvailabilityController *v4;

  v4 = this;
  objc_msgSend(MEMORY[0x1E0C99EA0], "safari_browserDefaults");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "safari_dateForKey:", CFSTR("ReaderOrTranslationLastActivated"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
    -[SafariShared::ReaderAvailabilityController _setObject:forBundleParameter:](v4, "_setObject:forBundleParameter:", v3, CFSTR("ReaderOrTranslationLastActivated"));

}

void sub_1A3DABFB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A3DAC030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3DAC320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A3DAC5AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3DAC6FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A3DAC9B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,id a34)
{
  void *v34;
  void *v35;
  uint64_t v36;

  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v36 - 160), 8);

  _Unwind_Resume(a1);
}

void sub_1A3DACB1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1A3DACD50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3DACE48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3DAD110(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3DAD2F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3DAD444(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3DAD734(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  void *v14;

  if (a2)
  {

    objc_begin_catch(exception_object);
    JUMPOUT(0x1A3DAD6ACLL);
  }
  _Unwind_Resume(exception_object);
}

void SafariShared::ReadStreamedDomainExpansions(uint64_t a1, void *a2)
{
  void (**v2)(id, _DWORD *);
  _DWORD *v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  NSObject *v7;
  int *v8;
  _QWORD v9[2];

  v9[1] = *MEMORY[0x1E0C80C00];
  v2 = a2;
  v3 = malloc_type_malloc(0x58uLL, 0x893D304CuLL);
  if (v3)
  {
    v4 = 88;
    while (WBSReadExactAmountOfBytesFromFileDescriptor() >= 1)
    {
      v5 = v3[1];
      if (v4 < v5)
      {
        v3 = malloc_type_realloc(v3, v3[1], 0xEEE87D7DuLL);
        v4 = v5;
      }
      v6 = v3 + 2;
      if (WBSReadExactAmountOfBytesFromFileDescriptor() < 1)
        break;
      if (*v3 == 3)
      {
        if (*v6)
          *((_QWORD *)v3 + 1) = (char *)v3 + *v6;
        v2[2](v2, v3);
      }
    }
    free(v3);
  }
  else
  {
    v7 = (id)WBS_LOG_CHANNEL_PREFIXHistory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = __error();
      SafariShared::ReadStreamedObjects(v8, (uint64_t)v9, v7);
    }

  }
}

void sub_1A3DAD914(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3DADB00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id a29)
{
  void *v29;
  void *v30;

  _Block_object_dispose(&a24, 8);
  _Unwind_Resume(a1);
}

void sub_1A3DADB7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

SafariShared::BookmarkAndHistoryCompletionMatch *SafariShared::BookmarkAndHistoryCompletionMatch::BookmarkAndHistoryCompletionMatch(SafariShared::BookmarkAndHistoryCompletionMatch *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  *(_DWORD *)a1 = 1;
  *((_QWORD *)a1 + 1) = a4;
  *((_QWORD *)a1 + 2) = a5;
  *((_QWORD *)a1 + 3) = a6;
  *((_QWORD *)a1 + 4) = a3;
  *((_QWORD *)a1 + 5) = a2;
  *((_QWORD *)a1 + 9) = 0;
  SafariShared::BookmarkAndHistoryCompletionMatch::computeWeight(a1, a7);
  return a1;
}

void sub_1A3DADC74(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

float SafariShared::BookmarkAndHistoryCompletionMatch::computeWeight(SafariShared::BookmarkAndHistoryCompletionMatch *this, double a2)
{
  uint64_t v3;
  void *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  void *v10;
  uint64_t v11;
  int v12;
  float matched;
  float result;

  v3 = *((_QWORD *)this + 1);
  if ((unint64_t)(v3 - 6) < 3 || v3 == 3)
  {
    v5 = (void *)*((_QWORD *)this + 5);
  }
  else
  {
    if (v3 != 4)
    {
      objc_msgSend(*((id *)this + 5), "topSitesScoreForURLStringAtIndex:atTime:", *((_QWORD *)this + 3), a2);
      *((_DWORD *)this + 16) = v12;
      v10 = (void *)*((_QWORD *)this + 5);
      v11 = *((_QWORD *)this + 3);
      goto LABEL_12;
    }
    v8 = *((unsigned __int16 *)this + 12);
    v5 = (void *)*((_QWORD *)this + 5);
    if (*((_WORD *)this + 12))
    {
      objc_msgSend(v5, "topSitesScoreForURLStringAtIndex:atTime:", *((unsigned __int16 *)this + 12), a2);
      *((_DWORD *)this + 16) = v9;
      v10 = (void *)*((_QWORD *)this + 5);
      v11 = v8;
LABEL_12:
      v7 = objc_msgSend(v10, "visitCountScoreForURLStringAtIndex:", v11);
      goto LABEL_13;
    }
  }
  objc_msgSend(v5, "topSitesScoreForPageTitleAtTime:", a2);
  *((_DWORD *)this + 16) = v6;
  v7 = objc_msgSend(*((id *)this + 5), "visitCountScoreForPageTitleAtTime");
LABEL_13:
  *((_QWORD *)this + 7) = v7;
  matched = SafariShared::weightForMatchLocation(*((_QWORD *)this + 1));
  *((float *)this + 17) = matched;
  result = matched + *((float *)this + 16);
  *((float *)this + 12) = result;
  return result;
}

id SafariShared::BookmarkAndHistoryCompletionMatch::title(SafariShared::BookmarkAndHistoryCompletionMatch *this)
{
  uint64_t v2;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v2 = *((_QWORD *)this + 1);
  if ((unint64_t)(v2 - 6) < 3 || v2 == 3)
  {
    objc_msgSend(*((id *)this + 5), "pageTitleAtIndex:", *((_QWORD *)this + 3));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    if (v2 == 4)
    {
      objc_msgSend(*((id *)this + 5), "pageTitleAtIndex:", *((_QWORD *)this + 3) >> 16);
      v6 = (id)objc_claimAutoreleasedReturnValue();
      return v6;
    }
    objc_msgSend(*((id *)this + 5), "pageTitleForUserVisibleURLStringAtIndex:", *((_QWORD *)this + 3));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }
  v5 = v4;
  if (objc_msgSend(v4, "length"))
  {
    v6 = v5;
  }
  else
  {
    v7 = (void *)MEMORY[0x1E0C99E98];
    objc_msgSend(*((id *)this + 5), "originalURLString");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "URLWithString:", v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "host");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "safari_stringByRemovingWwwDotPrefix");
    v6 = (id)objc_claimAutoreleasedReturnValue();

  }
  return v6;
}

void sub_1A3DADE38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::BookmarkAndHistoryCompletionMatch::titleIndexFromCurrentCombinedIndex(SafariShared::BookmarkAndHistoryCompletionMatch *this)
{
  return *((_QWORD *)this + 3) >> 16;
}

uint64_t SafariShared::BookmarkAndHistoryCompletionMatch::originalURLString(id *this)
{
  return objc_msgSend(this[5], "originalURLString");
}

id SafariShared::BookmarkAndHistoryCompletionMatch::placeholderForEmptyTitle(id *this)
{
  if ((objc_msgSend(this[5], "containsBookmark") & 1) != 0)
    return 0;
  _WBSLocalizedString();
  return (id)objc_claimAutoreleasedReturnValue();
}

id SafariShared::BookmarkAndHistoryCompletionMatch::userVisibleURLString(SafariShared::BookmarkAndHistoryCompletionMatch *this)
{
  uint64_t v1;
  void *v3;
  void *v4;
  uint64_t v5;

  v1 = *((_QWORD *)this + 1);
  if ((unint64_t)(v1 - 6) < 3 || v1 == 3)
  {
    objc_msgSend(*((id *)this + 5), "userVisibleURLStringForPageTitleAtIndex:", *((_QWORD *)this + 3));
    v3 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    if (v1 == 4)
    {
      v4 = (void *)*((_QWORD *)this + 5);
      v5 = *((unsigned __int16 *)this + 12);
    }
    else
    {
      v4 = (void *)*((_QWORD *)this + 5);
      v5 = *((_QWORD *)this + 3);
    }
    objc_msgSend(v4, "userVisibleURLStringAtIndex:", v5);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
  }
  return v3;
}

uint64_t SafariShared::BookmarkAndHistoryCompletionMatch::urlIndexFromCurrentCombinedIndex(SafariShared::BookmarkAndHistoryCompletionMatch *this)
{
  return *((unsigned __int16 *)this + 12);
}

id SafariShared::BookmarkAndHistoryCompletionMatch::lastVisitedDate(id *this)
{
  id v2;

  v2 = objc_alloc(MEMORY[0x1E0C99D68]);
  objc_msgSend(this[5], "lastVisitedTimeInterval");
  return (id)objc_msgSend(v2, "initWithTimeIntervalSinceReferenceDate:");
}

id SafariShared::BookmarkAndHistoryCompletionMatch::data(id *this)
{
  return this[5];
}

id SafariShared::BookmarkAndHistoryCompletionMatch::uuidString(SafariShared::BookmarkAndHistoryCompletionMatch *this)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;

  v2 = (void *)*((_QWORD *)this + 9);
  if (!v2)
  {
    objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "UUIDString");
    v4 = objc_claimAutoreleasedReturnValue();
    v5 = (void *)*((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = v4;

    v2 = (void *)*((_QWORD *)this + 9);
  }
  return v2;
}

void sub_1A3DADFC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::BookmarkAndHistoryCompletionMatch::compare(SafariShared::BookmarkAndHistoryCompletionMatch *this, SafariShared::BookmarkAndHistoryCompletionMatch *a2, int a3)
{
  _BOOL4 v3;
  float v6;
  int v7;
  float v8;
  int v9;
  double v10;
  double v11;
  float v12;
  BOOL v13;
  double v14;
  double v15;
  double v16;

  v3 = *((_QWORD *)a2 + 1) < 5;
  if (*((_QWORD *)this + 1) > 4 != v3)
  {
    v6 = *((float *)this + 12);
    if (a3)
    {
      v7 = objc_msgSend(*((id *)this + 5), "containsBookmark");
      v8 = *((float *)a2 + 12);
      v9 = objc_msgSend(*((id *)a2 + 5), "containsBookmark");
      v10 = 0.0;
      if (v7)
        v11 = 0.75;
      else
        v11 = 0.0;
      v6 = v11 + v6;
      if (v9)
        v10 = 0.75;
      v12 = v10 + v8;
    }
    else
    {
      v12 = *((float *)a2 + 12);
    }
    v13 = v6 <= v12;
    if (v6 == v12
      && (objc_msgSend(*((id *)this + 5), "lastVisitedTimeInterval"),
          v15 = v14,
          objc_msgSend(*((id *)a2 + 5), "lastVisitedTimeInterval"),
          v13 = v15 <= v16,
          v15 == v16))
    {
      v3 = *((_QWORD *)this + 4) < *((_QWORD *)a2 + 4);
    }
    else
    {
      v3 = !v13;
    }
  }
  if (v3)
    return 0xFFFFFFFFLL;
  else
    return 1;
}

uint64_t SafariShared::BookmarkAndHistoryCompletionMatch::computeMatchLocation(void *a1, void *a2, uint64_t *a3, uint64_t *a4)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t matched;
  uint64_t v13;
  uint64_t *v14;
  void *v15;
  _QWORD v17[4];
  id v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[6];
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  *a3 = 0x7FFFFFFFFFFFFFFFLL;
  *a4 = 0;
  if (!a1)
    return 0;
  v30 = 0;
  objc_msgSend(a2, "typedStringForURLMatching");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = SafariShared::BookmarkAndHistoryCompletionMatch::computeURLMatchLocation(a1, (uint64_t)v8, &v30);

  *a4 = v9;
  if ((unint64_t)(v9 - 9) > 1)
  {
    v26 = 0;
    v27 = &v26;
    v28 = 0x2020000000;
    v29 = 0;
    v10 = MEMORY[0x1E0C809B0];
    v25[0] = MEMORY[0x1E0C809B0];
    v25[1] = 3221225472;
    v25[2] = ___ZN12SafariShared33BookmarkAndHistoryCompletionMatch20computeMatchLocationEPU36objcproto25WBSURLCompletionMatchData11objc_objectP31WBSURLCompletionUserTypedStringRmR29WBSURLCompletionMatchLocation_block_invoke;
    v25[3] = &unk_1E4B297B0;
    v25[4] = &v26;
    v25[5] = a1;
    v11 = (void *)MEMORY[0x1A8599ED0](v25);
    matched = SafariShared::BookmarkAndHistoryCompletionMatch::computeMatchLocationOfTitleUsingBlock(a2, v11);
    if (matched <= 5)
    {
      if (v9 < 5)
      {
        v21 = 0;
        v22 = &v21;
        v23 = 0x2020000000;
        if (v9 <= matched)
          v13 = matched;
        else
          v13 = v9;
        v24 = v13;
        v14 = v27 + 3;
        if (v9 > matched)
          v14 = &v30;
        *a3 = *v14;
        objc_msgSend(a2, "components");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        if ((unint64_t)objc_msgSend(v15, "count") > 1)
        {
          v17[0] = v10;
          v17[1] = 3221225472;
          v17[2] = ___ZN12SafariShared33BookmarkAndHistoryCompletionMatch20computeMatchLocationEPU36objcproto25WBSURLCompletionMatchData11objc_objectP31WBSURLCompletionUserTypedStringRmR29WBSURLCompletionMatchLocation_block_invoke_2;
          v17[3] = &unk_1E4B297D8;
          v18 = v15;
          v19 = &v21;
          v20 = a3;
          objc_msgSend(a1, "enumeratePageTitlesAndUserVisibleURLsUsingBlock:", v17);
          v9 = v22[3];

        }
        else
        {
          v9 = v22[3];
        }

        _Block_object_dispose(&v21, 8);
      }
      else
      {
        *a3 = v30;
      }
    }
    else
    {
      *a3 = v27[3];
      v9 = matched;
    }

    _Block_object_dispose(&v26, 8);
  }
  else
  {
    *a3 = v30;
  }
  return v9;
}

void sub_1A3DAE2CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  void *v9;
  uint64_t v10;
  va_list va;

  va_start(va, a8);

  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v10 - 120), 8);
  _Unwind_Resume(a1);
}

uint64_t SafariShared::BookmarkAndHistoryCompletionMatch::computeURLMatchLocation(void *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[7];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  *a3 = 0x7FFFFFFFFFFFFFFFLL;
  if (!a1)
    return 0;
  v12 = 0;
  v13 = &v12;
  v14 = 0x2020000000;
  v15 = 0;
  v8 = 0;
  v9 = &v8;
  v10 = 0x2020000000;
  v11 = 0x7FFFFFFFFFFFFFFFLL;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = ___ZN12SafariShared33BookmarkAndHistoryCompletionMatch23computeURLMatchLocationEPU36objcproto25WBSURLCompletionMatchData11objc_objectP31WBSURLCompletionUserTypedStringRm_block_invoke;
  v7[3] = &unk_1E4B29820;
  v7[5] = &v8;
  v7[6] = a2;
  v7[4] = &v12;
  objc_msgSend(a1, "enumerateUserVisibleURLsUsingBlock:", v7);
  v4 = v9[3];
  if (v4 == 0x7FFFFFFFFFFFFFFFLL)
  {
    v5 = 0;
  }
  else
  {
    *a3 = v4;
    v5 = v13[3];
  }
  _Block_object_dispose(&v8, 8);
  _Block_object_dispose(&v12, 8);
  return v5;
}

void sub_1A3DAE404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN12SafariShared33BookmarkAndHistoryCompletionMatch20computeMatchLocationEPU36objcproto25WBSURLCompletionMatchData11objc_objectP31WBSURLCompletionUserTypedStringRmR29WBSURLCompletionMatchLocation_block_invoke(uint64_t a1, uint64_t a2)
{
  return SafariShared::BookmarkAndHistoryCompletionMatch::computeTitleMatchLocation(*(void **)(a1 + 40), a2, (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
}

uint64_t SafariShared::BookmarkAndHistoryCompletionMatch::computeTitleMatchLocation(void *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[7];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  *a3 = 0x7FFFFFFFFFFFFFFFLL;
  if (!a1)
    return 0;
  v12 = 0;
  v13 = &v12;
  v14 = 0x2020000000;
  v15 = 0;
  v8 = 0;
  v9 = &v8;
  v10 = 0x2020000000;
  v11 = 0x7FFFFFFFFFFFFFFFLL;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = ___ZN12SafariShared33BookmarkAndHistoryCompletionMatch25computeTitleMatchLocationEPU36objcproto25WBSURLCompletionMatchData11objc_objectP31WBSURLCompletionUserTypedStringRm_block_invoke;
  v7[3] = &unk_1E4B29820;
  v7[5] = &v8;
  v7[6] = a2;
  v7[4] = &v12;
  objc_msgSend(a1, "enumeratePageTitlesUsingBlock:", v7);
  v4 = v9[3];
  if (v4 == 0x7FFFFFFFFFFFFFFFLL)
  {
    v5 = 0;
  }
  else
  {
    *a3 = v4;
    v5 = v13[3];
  }
  _Block_object_dispose(&v8, 8);
  _Block_object_dispose(&v12, 8);
  return v5;
}

void sub_1A3DAE51C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t SafariShared::BookmarkAndHistoryCompletionMatch::computeMatchLocationOfTitleUsingBlock(void *a1, void *a2)
{
  uint64_t (**v3)(id, void *);
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  WBSURLCompletionUserTypedString *v11;
  WBSURLCompletionUserTypedString *v12;
  uint64_t v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = v3[2](v3, a1);
  if (v4 <= 2)
  {
    objc_msgSend(a1, "normalizedString");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if ((unint64_t)objc_msgSend(v5, "length") >= 2)
    {
      objc_msgSend(a1, "components");
      v17 = 0u;
      v18 = 0u;
      v15 = 0u;
      v16 = 0u;
      v6 = (id)objc_claimAutoreleasedReturnValue();
      v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
      if (v7)
      {
        v8 = *(_QWORD *)v16;
        while (2)
        {
          for (i = 0; i != v7; ++i)
          {
            if (*(_QWORD *)v16 != v8)
              objc_enumerationMutation(v6);
            v10 = *(_QWORD *)(*((_QWORD *)&v15 + 1) + 8 * i);
            v11 = [WBSURLCompletionUserTypedString alloc];
            v12 = -[WBSURLCompletionUserTypedString initWithString:](v11, "initWithString:", v10, (_QWORD)v15);
            v13 = v3[2](v3, v12);

            if (!v13)
            {
              v4 = 0;
              goto LABEL_15;
            }
            if (v13 > v4)
              v4 = v13;
          }
          v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
          if (v7)
            continue;
          break;
        }
      }
LABEL_15:

    }
  }

  return v4;
}

void sub_1A3DAE6D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t ___ZN12SafariShared33BookmarkAndHistoryCompletionMatch20computeMatchLocationEPU36objcproto25WBSURLCompletionMatchData11objc_objectP31WBSURLCompletionUserTypedStringRmR29WBSURLCompletionMatchLocation_block_invoke_2(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, _BYTE *a6)
{
  uint64_t result;
  _QWORD *v11;

  result = SafariShared::BookmarkAndHistoryCompletionMatch::typedStringComponentsMatchTitleAndURL(*(void **)(a1 + 32), a2, a4);
  if ((_DWORD)result)
  {
    *a6 = 1;
    v11 = *(_QWORD **)(a1 + 48);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 4;
    *v11 = a5 + (a3 << 16);
  }
  return result;
}

uint64_t SafariShared::BookmarkAndHistoryCompletionMatch::typedStringComponentsMatchTitleAndURL(void *a1, void *a2, void *a3)
{
  id v5;
  __CFString *v6;
  __CFString *v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t i;
  WBSURLCompletionUserTypedString *v13;
  WBSURLCompletionUserTypedString *v14;
  uint64_t matched;
  WBSURLCompletionUserTypedString *v16;
  uint64_t v17;
  BOOL v18;
  BOOL v19;
  char v20;
  id obj;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  obj = v5;
  v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
  if (v8)
  {
    v9 = 0;
    v10 = 0;
    v11 = *(_QWORD *)v24;
    while (2)
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v24 != v11)
          objc_enumerationMutation(obj);
        v13 = -[WBSURLCompletionUserTypedString initWithString:]([WBSURLCompletionUserTypedString alloc], "initWithString:", *(_QWORD *)(*((_QWORD *)&v23 + 1) + 8 * i));
        matched = SafariShared::computeTitleMatchLocation(v6, (NSString *)&v13->super.isa, v14);
        v17 = SafariShared::computeURLMatchLocation(v7, (NSString *)&v13->super.isa, v16);
        if (matched)
          v18 = 0;
        else
          v18 = v17 <= 1;
        if (v18)
        {

          goto LABEL_14;
        }
        v19 = v17 > 1;

        v10 |= matched > 0;
        v9 |= v19;
      }
      v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
      if (v8)
        continue;
      break;
    }
    v20 = v10 & v9;
  }
  else
  {
LABEL_14:
    v20 = 0;
  }

  return v20 & 1;
}

void sub_1A3DAE920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::BookmarkAndHistoryCompletionMatch::indexCombiningTitleAndURLIndex(SafariShared::BookmarkAndHistoryCompletionMatch *this, uint64_t a2)
{
  return a2 + ((_QWORD)this << 16);
}

uint64_t SafariShared::BookmarkAndHistoryCompletionMatch::computeMatchLocation(__CFString *a1, void *a2, void *a3, uint64_t *a4)
{
  NSString *v8;
  WBSURLCompletionUserTypedString *v9;
  uint64_t v10;
  void *v11;
  uint64_t matched;
  uint64_t v13;
  void *v14;
  _QWORD v16[5];

  objc_msgSend(a3, "typedStringForURLMatching");
  v8 = (NSString *)objc_claimAutoreleasedReturnValue();
  v10 = SafariShared::computeURLMatchLocation(a1, v8, v9);

  *a4 = v10;
  if (a2 && (unint64_t)(v10 - 11) < 0xFFFFFFFFFFFFFFFELL)
  {
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 3221225472;
    v16[2] = ___ZN12SafariShared33BookmarkAndHistoryCompletionMatch20computeMatchLocationEP8NSStringS2_P31WBSURLCompletionUserTypedStringR29WBSURLCompletionMatchLocation_block_invoke;
    v16[3] = &__block_descriptor_40_e41_q16__0__WBSURLCompletionUserTypedString_8lu32l8;
    v16[4] = a2;
    v11 = (void *)MEMORY[0x1A8599ED0](v16);
    matched = SafariShared::BookmarkAndHistoryCompletionMatch::computeMatchLocationOfTitleUsingBlock(a3, v11);
    v13 = matched;
    if (matched <= 5)
    {
      v13 = v10;
      if (v10 <= 4)
      {
        if (v10 <= matched)
          v13 = matched;
        else
          v13 = v10;
        objc_msgSend(a3, "components");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        if ((unint64_t)objc_msgSend(v14, "count") >= 2
          && SafariShared::BookmarkAndHistoryCompletionMatch::typedStringComponentsMatchTitleAndURL(v14, a2, a1))
        {
          v13 = 4;
        }

      }
    }

    return v13;
  }
  return v10;
}

void sub_1A3DAEA98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN12SafariShared33BookmarkAndHistoryCompletionMatch20computeMatchLocationEP8NSStringS2_P31WBSURLCompletionUserTypedStringR29WBSURLCompletionMatchLocation_block_invoke(uint64_t a1, NSString *a2, WBSURLCompletionUserTypedString *a3)
{
  return SafariShared::computeTitleMatchLocation(*(CFStringRef *)(a1 + 32), a2, a3);
}

BOOL SafariShared::BookmarkAndHistoryCompletionMatch::hasMatchWithOptions(__CFString *this, NSString *a2, NSString *a3, WBSURLCompletionUserTypedString *a4)
{
  unsigned int v4;
  uint64_t matched;
  uint64_t v7;

  v4 = a4;
  matched = SafariShared::BookmarkAndHistoryCompletionMatch::computeMatchLocation(this, a2, a3, &v7);
  if ((v4 & 1) != 0)
    return matched > 3;
  else
    return (matched != 0) & (v4 >> 1);
}

uint64_t ___ZN12SafariShared33BookmarkAndHistoryCompletionMatch25computeTitleMatchLocationEPU36objcproto25WBSURLCompletionMatchData11objc_objectP31WBSURLCompletionUserTypedStringRm_block_invoke(uint64_t a1, CFStringRef theString, WBSURLCompletionUserTypedString *a3)
{
  uint64_t result;
  uint64_t v6;

  result = SafariShared::computeTitleMatchLocation(theString, *(NSString **)(a1 + 48), a3);
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (result > *(_QWORD *)(v6 + 24))
  {
    *(_QWORD *)(v6 + 24) = result;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = a3;
  }
  return result;
}

uint64_t ___ZN12SafariShared33BookmarkAndHistoryCompletionMatch23computeURLMatchLocationEPU36objcproto25WBSURLCompletionMatchData11objc_objectP31WBSURLCompletionUserTypedStringRm_block_invoke(uint64_t a1, CFStringRef theString, WBSURLCompletionUserTypedString *a3)
{
  uint64_t result;
  uint64_t v6;

  result = SafariShared::computeURLMatchLocation(theString, *(NSString **)(a1 + 48), a3);
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (result > *(_QWORD *)(v6 + 24))
  {
    *(_QWORD *)(v6 + 24) = result;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = a3;
  }
  return result;
}

uint64_t SafariShared::FieldLabelPatternMatcher::FieldLabelPatternMatcher(uint64_t a1, uint64_t a2, const UChar *a3, unint64_t a4)
{
  UChar **v7;
  int32_t v8;
  int32_t v9;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  UErrorCode pErrorCode;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a1 + 24;
  v7 = (UChar **)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 256;
  WTF::Vector<unsigned short,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)0>(a1 + 8, a4);
  pErrorCode = U_ZERO_ERROR;
  v8 = u_strToLower(*v7, *(_DWORD *)(a1 + 20), a3, a4, "", &pErrorCode);
  v9 = v8;
  if (pErrorCode > U_ZERO_ERROR || v8 != a4)
  {
    if (*(unsigned int *)(a1 + 20) < (unint64_t)v8)
    {
      v11 = *(unsigned int *)(a1 + 16);
      if (v11 < v8)
      {
        v12 = v11 + (v11 >> 2);
        if (v12 >= 0x10)
          v13 = v12 + 1;
        else
          v13 = 16;
        if (v13 <= v8)
          v14 = v8;
        else
          v14 = v13;
        WTF::Vector<unsigned short,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v7, v14);
      }
    }
    *(_DWORD *)(a1 + 20) = v9;
    u_strToLower(*(UChar **)(a1 + 8), v9, a3, a4, "", &pErrorCode);
  }
  return a1;
}

uint64_t SafariShared::FieldLabelPatternMatcher::longestMatch(SafariShared::FieldLabelPatternMatcher *this)
{
  unsigned __int16 *v2;
  uint64_t v3;
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  unsigned __int16 *v9;
  unsigned __int16 *i;

  v2 = (unsigned __int16 *)*((_QWORD *)this + 1);
  v3 = *((unsigned int *)this + 5);
  v4 = &v2[v3];
  if ((_DWORD)v3)
  {
    v5 = 2 * v3;
    while (1)
    {
      v6 = SafariShared::FieldLabelPatternMatcher::checkForMatch(this, v2, v4);
      if (v7 != v6)
        break;
      ++v2;
      v5 -= 2;
      if (!v5)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    v6 = 0;
    v7 = 0;
  }
  if (v7 == v6)
    return -1;
  v8 = 0;
  v9 = 0;
  do
  {
    if ((char *)v7 - (char *)v6 > (unint64_t)((char *)v8 - (char *)v9))
    {
      v9 = v6;
      v8 = v7;
    }
    for (i = v6 + 1; i != v4; ++i)
    {
      v6 = SafariShared::FieldLabelPatternMatcher::checkForMatch(this, i, v4);
      if (v7 != v6)
        goto LABEL_15;
    }
    v6 = 0;
    v7 = 0;
LABEL_15:
    ;
  }
  while (v7 != v6);
  if (v8 == v9)
    return -1;
  else
    return ((uint64_t)v9 - *((_QWORD *)this + 1)) >> 1;
}

unsigned __int16 *SafariShared::FieldLabelPatternMatcher::search(SafariShared::FieldLabelPatternMatcher *this, unsigned __int16 *a2, unsigned __int16 *a3)
{
  unsigned __int16 *v4;
  unsigned __int16 *result;
  unsigned __int16 *v7;

  if (a2 == a3)
    return 0;
  v4 = a2;
  while (1)
  {
    result = SafariShared::FieldLabelPatternMatcher::checkForMatch(this, v4, a3);
    if (v7 != result)
      break;
    if (++v4 == a3)
      return 0;
  }
  return result;
}

uint64_t SafariShared::FieldLabelPatternMatcher::toRange(uint64_t a1, _QWORD *a2)
{
  if (a2[1] == *a2)
    return -1;
  else
    return (uint64_t)(*a2 - *(_QWORD *)(a1 + 8)) >> 1;
}

uint64_t SafariShared::FieldLabelPatternMatcher::searchReverse(SafariShared::FieldLabelPatternMatcher *this)
{
  unsigned __int16 *v2;
  uint64_t v3;
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  unsigned __int16 *v9;
  unsigned __int16 *i;

  v2 = (unsigned __int16 *)*((_QWORD *)this + 1);
  v3 = *((unsigned int *)this + 5);
  v4 = &v2[v3];
  if ((_DWORD)v3)
  {
    v5 = 2 * v3;
    while (1)
    {
      v6 = SafariShared::FieldLabelPatternMatcher::checkForMatch(this, v2, v4);
      if (v7 != v6)
        break;
      ++v2;
      v5 -= 2;
      if (!v5)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    v6 = 0;
    v7 = 0;
  }
  if (v7 == v6)
    return -1;
  v8 = 0;
  v9 = 0;
  do
  {
    if (v8 == v9 || v8 < v7)
    {
      v9 = v6;
      v8 = v7;
    }
    for (i = v6 + 1; i != v4; ++i)
    {
      v6 = SafariShared::FieldLabelPatternMatcher::checkForMatch(this, i, v4);
      if (v7 != v6)
        goto LABEL_21;
    }
    v6 = 0;
    v7 = 0;
LABEL_21:
    ;
  }
  while (v7 != v6);
  if (v8 == v9)
    return -1;
  else
    return ((uint64_t)v9 - *((_QWORD *)this + 1)) >> 1;
}

BOOL SafariShared::FieldLabelPatternMatcher::isWordCharacter(SafariShared::FieldLabelPatternMatcher *this)
{
  return ((_DWORD)this - 48) < 0xA || (this & 0xFFFFFFDF) - 65 < 0x1A || (_DWORD)this == 95;
}

unsigned __int16 *SafariShared::FieldLabelPatternMatcher::checkForMatch(SafariShared::FieldLabelPatternMatcher *this, unsigned __int16 *a2, unsigned __int16 *a3)
{
  unsigned __int16 *v6;
  unsigned __int16 *NextStateAndAdvance;
  unsigned __int16 *v10;

  v6 = 0;
  NextStateAndAdvance = (unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)this + 8) + 4 * **(unsigned __int16 **)this);
  v10 = a2;
  do
  {
    if (v10 > a3)
      break;
    if (SafariShared::FieldLabelPatternMatcher::isEndState(this, NextStateAndAdvance, v10))
      v6 = a2;
    NextStateAndAdvance = (unsigned __int16 *)SafariShared::FieldLabelPatternMatcher::findNextStateAndAdvance(this, NextStateAndAdvance, (const unsigned __int16 **)&v10);
  }
  while (NextStateAndAdvance);
  return v6;
}

uint64_t SafariShared::FieldLabelPatternMatcher::isWordBoundary(SafariShared::FieldLabelPatternMatcher *this, const unsigned __int16 *a2)
{
  uint64_t v2;
  const unsigned __int16 *v3;
  const unsigned __int16 *v4;
  int v5;
  uint64_t result;
  int v9;
  _BOOL4 v12;
  int v13;

  v2 = *((unsigned int *)this + 5);
  if (!(_DWORD)v2)
    return 0;
  v3 = (const unsigned __int16 *)*((_QWORD *)this + 1);
  if (v3 == a2)
  {
    v13 = *a2;
    return (v13 - 48) < 0xA || (v13 & 0xFFFFFFDF) - 65 < 0x1A || v13 == 95;
  }
  else
  {
    v4 = &v3[v2];
    v5 = *(a2 - 1);
    result = (v5 - 48) < 0xA || (v5 & 0xFFFFFFDF) - 65 < 0x1A || v5 == 95;
    if (v4 != a2)
    {
      v9 = *a2;
      v12 = (v9 - 48) < 0xA || (v9 & 0xFFFFFFDF) - 65 < 0x1A || v9 == 95;
      return result ^ v12;
    }
  }
  return result;
}

BOOL SafariShared::FieldLabelPatternMatcher::isEndState(SafariShared::FieldLabelPatternMatcher *a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;

  v3 = a2[1];
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  result = 1;
  if (*(_WORD *)(v4 + 4 * v3) || *(__int16 *)(v4 + 4 * v3 + 2) != -1)
  {
    v5 = v3 + *a2 - 1;
    if (*(__int16 *)(v4 + 4 * v5) != -1
      || *(__int16 *)(v4 + 4 * v5 + 2) != -1
      || (SafariShared::FieldLabelPatternMatcher::isWordBoundary(a1, a3) & 1) == 0)
    {
      return 0;
    }
  }
  return result;
}

uint64_t SafariShared::FieldLabelPatternMatcher::findNextStateAndAdvance(SafariShared::FieldLabelPatternMatcher *a1, unsigned __int16 *a2, const unsigned __int16 **a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const unsigned __int16 *v8;
  unsigned __int16 *v10;
  unsigned __int16 *v11;
  unint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unsigned __int16 *v15;
  unsigned __int16 *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;

  v3 = a2[1];
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v6 = *a2;
  v7 = v6 + v3;
  v8 = *a3;
  if (*a3 == (const unsigned __int16 *)(*((_QWORD *)a1 + 1) + 2 * *((unsigned int *)a1 + 5)) || (_DWORD)v6 == 0)
    goto LABEL_21;
  v10 = (unsigned __int16 *)(v5 + 4 * v7);
  v11 = (unsigned __int16 *)(v5 + 4 * v3);
  v12 = ((char *)v10 - (char *)v11) >> 2;
  v13 = *v8;
  do
  {
    v14 = v12 >> 1;
    v15 = &v11[2 * (v12 >> 1)];
    v17 = *v15;
    v16 = v15 + 2;
    v12 += ~(v12 >> 1);
    if (v17 < v13)
      v11 = v16;
    else
      v12 = v14;
  }
  while (v12);
  if (v11 == v10 || v13 != *v11)
  {
LABEL_21:
    if (!(_DWORD)v6)
      return 0;
    v19 = v7 - 1;
    if (*(__int16 *)(v5 + 4 * v19) != -1)
      return 0;
    v18 = *(unsigned __int16 *)(v5 + 4 * v19 + 2);
    if (v18 == 0xFFFF || !SafariShared::FieldLabelPatternMatcher::isWordBoundary(a1, v8))
      return 0;
  }
  else
  {
    *a3 = v8 + 1;
    v4 = *(_QWORD *)a1;
    v18 = v11[1];
  }
  return *(_QWORD *)(v4 + 8) + 4 * v18;
}

uint64_t WTF::Vector<unsigned short,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  int v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  if (v4 < a2)
  {
    v5 = v4 + (v4 >> 2);
    if (v5 >= 0x10)
      v6 = v5 + 1;
    else
      v6 = 16;
    if (v6 > a2)
      a2 = v6;
    WTF::Vector<unsigned short,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  *(_DWORD *)(a1 + 12) = v2;
  return 1;
}

uint64_t WTF::Vector<unsigned short,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  v2 = a2;
  v3 = result;
  v4 = *(void **)result;
  v5 = *(unsigned int *)(result + 12);
  if (a2 < 0x101)
  {
    v6 = (void *)(result + 16);
    *(_QWORD *)v3 = v3 + 16;
    *(_DWORD *)(v3 + 8) = 256;
LABEL_6:
    memcpy(v6, v4, 2 * v5);
    if ((void *)(v3 + 16) != v4 && v4 != 0)
    {
      if (*(void **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree((WTF *)v4, v7);
    }
    return 1;
  }
  if (!(a2 >> 31))
  {
    v6 = (void *)WTF::fastMalloc((WTF *)(2 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(_QWORD *)v3 = v6;
    goto LABEL_6;
  }
  __break(0xC471u);
  return result;
}

JSValueRef SafariShared::JSWrapper::wrap(JSContextRef ctx, void *a2)
{
  const OpaqueJSContextGroup *Group;
  OpaqueJSContext *v5;
  SafariShared::JSWrapper *GlobalContext;
  OpaqueJSContext *v7;
  const OpaqueJSValue *v8;
  JSObjectRef v9;
  OpaqueJSValue *v10;
  OpaqueJSClass *v11;

  if (!a2)
    return JSValueMakeNull(ctx);
  if (!SafariShared::retainedContextForIteratingThroughWrappers)
  {
    JSRemoteInspectorGetInspectionFollowsInternalPolicies();
    JSRemoteInspectorSetInspectionFollowsInternalPolicies();
    JSRemoteInspectorGetInspectionEnabledByDefault();
    JSRemoteInspectorSetInspectionEnabledByDefault();
    Group = JSContextGetGroup(ctx);
    v5 = JSGlobalContextCreateInGroup(Group, 0);
    SafariShared::retainedContextForIteratingThroughWrappers = (uint64_t)JSGlobalContextRetain(v5);
    JSRemoteInspectorSetInspectionEnabledByDefault();
    JSRemoteInspectorSetInspectionFollowsInternalPolicies();
  }
  GlobalContext = JSContextGetGlobalContext(ctx);
  SafariShared::JSWrapper::knownWrappers(GlobalContext, v7);
  v8 = (const OpaqueJSValue *)JSWeakObjectMapGet();
  if (!v8 || (v9 = v8, v10 = JSValueToObject(ctx, v8, 0), !JSObjectGetPrivate(v10)))
  {
    v11 = (OpaqueJSClass *)(*(uint64_t (**)(void *))(*(_QWORD *)a2 + 16))(a2);
    v9 = JSObjectMake(ctx, v11, a2);
    JSWeakObjectMapSet();
  }
  return v9;
}

uint64_t SafariShared::JSWrapper::knownWrappers(SafariShared::JSWrapper *this, OpaqueJSContext *a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  char v5;
  SafariShared::JSWrapper *v6;

  v6 = this;
  {
    SafariShared::JSWrapper::wrappers(void)::wrappers = 0;
  }
  v3 = 0;
  WTF::HashMap<OpaqueJSContext *,OpaqueJSWeakObjectMap *,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSWeakObjectMap *>,WTF::HashTableTraits>::add<OpaqueJSWeakObjectMap *>(&SafariShared::JSWrapper::wrappers(void)::wrappers, (uint64_t *)&v6, &v3, (uint64_t)&v4);
  if (!v5)
    return *(_QWORD *)(v4 + 8);
  result = JSWeakObjectMapCreate();
  *(_QWORD *)(v4 + 8) = result;
  return result;
}

void *SafariShared::JSWrapper::unwrap(SafariShared::JSWrapper *this, const OpaqueJSContext *a2, const OpaqueJSValue *a3)
{
  OpaqueJSValue *v3;

  if (!this || !a2)
    return 0;
  v3 = JSValueToObject(this, a2, 0);
  return JSObjectGetPrivate(v3);
}

void *SafariShared::JSWrapper::initialize(SafariShared::JSWrapper *this, JSObjectRef object, OpaqueJSValue *a3)
{
  void *result;

  result = JSObjectGetPrivate(object);
  if (result)
    return (void *)(*(uint64_t (**)(void *))(*(_QWORD *)result + 24))(result);
  return result;
}

void *SafariShared::JSWrapper::disconnectWrapper(SafariShared::JSWrapper *this, OpaqueJSValue *a2)
{
  void *result;

  result = JSObjectGetPrivate(this);
  if (result)
  {
    (*(void (**)(void *))(*(_QWORD *)result + 32))(result);
    return (void *)JSObjectSetPrivate(this, 0);
  }
  return result;
}

OpaqueJSValue *SafariShared::JSWrapper::disconnectAllWrappers(OpaqueJSValue *a1)
{
  OpaqueJSValue *result;
  OpaqueJSValue *v3;
  OpaqueJSValue *v4;
  OpaqueJSValue *v5;
  uint64_t v6;
  SafariShared::JSWrapper *v7;
  OpaqueJSValue *v8;

  {
    SafariShared::JSWrapper::wrappers(void)::wrappers = 0;
  }
  result = (OpaqueJSValue *)WTF::HashTable<OpaqueJSContext *,WTF::KeyValuePair<OpaqueJSContext *,OpaqueJSWeakObjectMap *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<OpaqueJSContext *,OpaqueJSWeakObjectMap *>>,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashMap<OpaqueJSContext *,OpaqueJSWeakObjectMap *,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSWeakObjectMap *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<OpaqueJSContext *>>::begin((_QWORD **)&SafariShared::JSWrapper::wrappers(void)::wrappers);
  v3 = result;
  v5 = v4;
  if (SafariShared::JSWrapper::wrappers(void)::wrappers)
    v6 = SafariShared::JSWrapper::wrappers(void)::wrappers
       + 16 * *(unsigned int *)(SafariShared::JSWrapper::wrappers(void)::wrappers - 4);
  else
    v6 = 0;
  if ((OpaqueJSValue *)v6 != result)
  {
    do
    {
      result = (OpaqueJSValue *)JSWeakObjectMapGet();
      if (result)
      {
        v7 = result;
        result = (OpaqueJSValue *)JSObjectGetPrivate(result);
        if (result == a1)
        {
          JSWeakObjectMapRemove();
          result = (OpaqueJSValue *)SafariShared::JSWrapper::disconnectWrapper(v7, v8);
        }
      }
      while (1)
      {
        v3 = (OpaqueJSValue *)((char *)v3 + 16);
        if (v3 == v5)
          break;
        if ((unint64_t)(*(_QWORD *)v3 + 1) > 1)
          goto LABEL_14;
      }
      v3 = v5;
LABEL_14:
      ;
    }
    while (v3 != (OpaqueJSValue *)v6);
  }
  return result;
}

uint64_t *SafariShared::JSWrapper::wrappers(SafariShared::JSWrapper *this)
{
  {
    SafariShared::JSWrapper::wrappers(void)::wrappers = 0;
  }
  return &SafariShared::JSWrapper::wrappers(void)::wrappers;
}

uint64_t *WTF::HashMap<OpaqueJSContext *,OpaqueJSWeakObjectMap *,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSWeakObjectMap *>,WTF::HashTableTraits>::add<OpaqueJSWeakObjectMap *>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<OpaqueJSContext *,WTF::KeyValuePair<OpaqueJSContext *,OpaqueJSWeakObjectMap *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<OpaqueJSContext *,OpaqueJSWeakObjectMap *>>,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashMap<OpaqueJSContext *,OpaqueJSWeakObjectMap *,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSWeakObjectMap *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<OpaqueJSContext *>>::expand(result, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = ~(*a2 << 32) + *a2;
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (uint64_t *)(v8 + 16 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v22 = 0;
        else
          v22 = *(unsigned int *)(v8 - 4);
        v28 = 0;
        v29 = v8 + 16 * v22;
        goto LABEL_31;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v10;
      v16 = (uint64_t *)(v8 + 16 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      v11 = *a2;
      v16 = v18;
    }
  }
  *v16 = v11;
  v16[1] = *a3;
  v20 = *v6;
  if (*v6)
    v21 = *(_DWORD *)(v20 - 12) + 1;
  else
    v21 = 1;
  *(_DWORD *)(v20 - 12) = v21;
  v23 = *v6;
  if (*v6)
    v24 = *(_DWORD *)(v23 - 12);
  else
    v24 = 0;
  v25 = (*(_DWORD *)(v23 - 16) + v24);
  v26 = *(unsigned int *)(v23 - 4);
  if (v26 > 0x400)
  {
    if (v26 > 2 * v25)
      goto LABEL_25;
  }
  else if (3 * v26 > 4 * v25)
  {
    goto LABEL_25;
  }
  result = (uint64_t *)WTF::HashTable<OpaqueJSContext *,WTF::KeyValuePair<OpaqueJSContext *,OpaqueJSWeakObjectMap *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<OpaqueJSContext *,OpaqueJSWeakObjectMap *>>,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashMap<OpaqueJSContext *,OpaqueJSWeakObjectMap *,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSWeakObjectMap *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<OpaqueJSContext *>>::expand(v6, v16);
  v16 = result;
  v23 = *v6;
  if (!*v6)
  {
    v27 = 0;
    goto LABEL_30;
  }
LABEL_25:
  v27 = *(unsigned int *)(v23 - 4);
LABEL_30:
  v29 = v23 + 16 * v27;
  v28 = 1;
LABEL_31:
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v29;
  *(_BYTE *)(a4 + 16) = v28;
  return result;
}

uint64_t *SafariShared::JSWrapper::cacheMapDestroyed(uint64_t a1, uint64_t a2)
{
  uint64_t *result;
  uint64_t v3;
  uint64_t v4;

  {
    SafariShared::JSWrapper::wrappers(void)::wrappers = 0;
  }
  v4 = a2;
  result = (uint64_t *)WTF::HashTable<OpaqueJSContext *,WTF::KeyValuePair<OpaqueJSContext *,OpaqueJSWeakObjectMap *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<OpaqueJSContext *,OpaqueJSWeakObjectMap *>>,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashMap<OpaqueJSContext *,OpaqueJSWeakObjectMap *,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSWeakObjectMap *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<OpaqueJSContext *>>::find<WTF::IdentityHashTranslator<WTF::HashMap<OpaqueJSContext *,OpaqueJSWeakObjectMap *,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSWeakObjectMap *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<OpaqueJSContext *>>,OpaqueJSContext *>(&SafariShared::JSWrapper::wrappers(void)::wrappers, &v4);
  if (SafariShared::JSWrapper::wrappers(void)::wrappers)
  {
    v3 = SafariShared::JSWrapper::wrappers(void)::wrappers
       + 16 * *(unsigned int *)(SafariShared::JSWrapper::wrappers(void)::wrappers - 4);
    if ((uint64_t *)v3 == result)
      return result;
  }
  else
  {
    if (!result)
      return result;
    v3 = 0;
  }
  if ((uint64_t *)v3 != result)
    return WTF::HashTable<OpaqueJSContext *,WTF::KeyValuePair<OpaqueJSContext *,OpaqueJSWeakObjectMap *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<OpaqueJSContext *,OpaqueJSWeakObjectMap *>>,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashMap<OpaqueJSContext *,OpaqueJSWeakObjectMap *,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSWeakObjectMap *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<OpaqueJSContext *>>::remove(&SafariShared::JSWrapper::wrappers(void)::wrappers, result);
  return result;
}

_OWORD *WTF::HashTable<OpaqueJSContext *,WTF::KeyValuePair<OpaqueJSContext *,OpaqueJSWeakObjectMap *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<OpaqueJSContext *,OpaqueJSWeakObjectMap *>>,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashMap<OpaqueJSContext *,OpaqueJSWeakObjectMap *,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSWeakObjectMap *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<OpaqueJSContext *>>::expand(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<OpaqueJSContext *,WTF::KeyValuePair<OpaqueJSContext *,OpaqueJSWeakObjectMap *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<OpaqueJSContext *,OpaqueJSWeakObjectMap *>>,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashMap<OpaqueJSContext *,OpaqueJSWeakObjectMap *,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSWeakObjectMap *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<OpaqueJSContext *>>::rehash(a1, v5, a2);
}

_OWORD *WTF::HashTable<OpaqueJSContext *,WTF::KeyValuePair<OpaqueJSContext *,OpaqueJSWeakObjectMap *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<OpaqueJSContext *,OpaqueJSWeakObjectMap *>>,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashMap<OpaqueJSContext *,OpaqueJSWeakObjectMap *,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSWeakObjectMap *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<OpaqueJSContext *>>::rehash(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  void *v10;
  _OWORD *v11;
  _QWORD *v12;
  _OWORD *v13;
  _OWORD *result;

  v6 = *a1;
  if (*a1)
  {
    LODWORD(v7) = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    LODWORD(v7) = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if ((_DWORD)v7)
  {
    v7 = v7;
    v12 = (_QWORD *)v6;
    do
    {
      if ((unint64_t)(*v12 + 1) >= 2)
      {
        v13 = (_OWORD *)WTF::HashTable<OpaqueJSContext *,WTF::KeyValuePair<OpaqueJSContext *,OpaqueJSWeakObjectMap *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<OpaqueJSContext *,OpaqueJSWeakObjectMap *>>,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashMap<OpaqueJSContext *,OpaqueJSWeakObjectMap *,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSWeakObjectMap *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<OpaqueJSContext *>>::lookupForReinsert(a1, v12);
        *v13 = *(_OWORD *)v12;
        if (v12 == a3)
          v11 = v13;
      }
      v12 += 2;
      --v7;
    }
    while (v7);
  }
  else
  {
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v11;
}

uint64_t WTF::HashTable<OpaqueJSContext *,WTF::KeyValuePair<OpaqueJSContext *,OpaqueJSWeakObjectMap *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<OpaqueJSContext *,OpaqueJSWeakObjectMap *>>,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashMap<OpaqueJSContext *,OpaqueJSWeakObjectMap *,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSWeakObjectMap *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<OpaqueJSContext *>>::lookupForReinsert(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;

  v2 = *a1;
  if (*a1)
    v3 = *(_DWORD *)(v2 - 8);
  else
    v3 = 0;
  v4 = ~(*a2 << 32) + *a2;
  v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
  v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
  v7 = v3 & (((v6 + ~(v6 << 27)) >> 31) ^ (v6 + ~((_DWORD)v6 << 27)));
  v8 = 1;
  do
  {
    v9 = v7;
    v10 = *(_QWORD *)(v2 + 16 * v7);
    v7 = (v7 + v8++) & v3;
  }
  while (v10);
  return v2 + 16 * v9;
}

uint64_t *WTF::HashTable<OpaqueJSContext *,WTF::KeyValuePair<OpaqueJSContext *,OpaqueJSWeakObjectMap *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<OpaqueJSContext *,OpaqueJSWeakObjectMap *>>,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashMap<OpaqueJSContext *,OpaqueJSWeakObjectMap *,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSWeakObjectMap *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<OpaqueJSContext *>>::remove(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  *a2 = -1;
  ++*(_DWORD *)(*result - 16);
  v2 = *result;
  if (*result)
    v3 = *(_DWORD *)(v2 - 12) - 1;
  else
    v3 = -1;
  *(_DWORD *)(v2 - 12) = v3;
  v4 = *result;
  if (*result)
  {
    v5 = 6 * *(_DWORD *)(v4 - 12);
    v6 = *(_DWORD *)(v4 - 4);
    if (v5 < v6 && v6 >= 9)
      return (uint64_t *)WTF::HashTable<OpaqueJSContext *,WTF::KeyValuePair<OpaqueJSContext *,OpaqueJSWeakObjectMap *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<OpaqueJSContext *,OpaqueJSWeakObjectMap *>>,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashMap<OpaqueJSContext *,OpaqueJSWeakObjectMap *,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSWeakObjectMap *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<OpaqueJSContext *>>::rehash(result, v6 >> 1, 0);
  }
  return result;
}

uint64_t WTF::HashTable<OpaqueJSContext *,WTF::KeyValuePair<OpaqueJSContext *,OpaqueJSWeakObjectMap *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<OpaqueJSContext *,OpaqueJSWeakObjectMap *>>,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashMap<OpaqueJSContext *,OpaqueJSWeakObjectMap *,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSWeakObjectMap *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<OpaqueJSContext *>>::find<WTF::IdentityHashTranslator<WTF::HashMap<OpaqueJSContext *,OpaqueJSWeakObjectMap *,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSWeakObjectMap *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<OpaqueJSContext *>>,OpaqueJSContext *>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = ~(*a2 << 32) + *a2;
  v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
  v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
  v7 = v3 & (((v6 + ~(v6 << 27)) >> 31) ^ ((_DWORD)v6 + ~((_DWORD)v6 << 27)));
  v8 = *(_QWORD *)(v2 + 16 * v7);
  if (v8 == *a2)
    return v2 + 16 * v7;
  v9 = 1;
  while (v8)
  {
    v7 = ((_DWORD)v7 + v9) & v3;
    v8 = *(_QWORD *)(v2 + 16 * v7);
    ++v9;
    if (v8 == *a2)
      return v2 + 16 * v7;
  }
  return v2 + 16 * *(unsigned int *)(v2 - 4);
}

_QWORD *WTF::HashTable<OpaqueJSContext *,WTF::KeyValuePair<OpaqueJSContext *,OpaqueJSWeakObjectMap *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<OpaqueJSContext *,OpaqueJSWeakObjectMap *>>,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashMap<OpaqueJSContext *,OpaqueJSWeakObjectMap *,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSWeakObjectMap *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<OpaqueJSContext *>>::begin(_QWORD **a1)
{
  _QWORD *result;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  result = *a1;
  if (!result)
    return 0;
  v2 = *((unsigned int *)result - 1);
  v3 = &result[2 * v2];
  if (!*((_DWORD *)result - 3))
    return &result[2 * v2];
  if ((_DWORD)v2)
  {
    v4 = 16 * v2;
    while ((unint64_t)(*result + 1) <= 1)
    {
      result += 2;
      v4 -= 16;
      if (!v4)
        return v3;
    }
  }
  return result;
}

uint64_t SafariShared::caseInsensitiveFindInUserTypedString(const __CFString *this, const __CFString *a2, uint64_t a3, WBSURLCompletionUserTypedString *a4)
{
  size_t v8;
  const char *CStringPtr;
  unsigned int v10;
  char *v11;
  const char *v12;
  uint64_t v13;
  int v14;
  int v15;
  unsigned __int8 *v16;
  const char *v17;
  size_t v18;
  unsigned int v19;
  unsigned int v20;
  const UniChar *CharactersPtr;
  unsigned int v23;
  const UChar *v24;
  const UChar *v25;
  int v26;
  int v27;
  const UniChar *v28;
  const UChar *v29;
  size_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  unsigned int v41;
  int v42;
  CFRange result;
  CFRange v44;

  if (!this)
    return 0xFFFFFFFFLL;
  v8 = *(int *)(a3 + 32);
  CStringPtr = CFStringGetCStringPtr(this, SafariShared::systemEightBitStringEncoding);
  if (CStringPtr)
  {
    v10 = (_DWORD)a2 - (_DWORD)a4 - v8;
    if ((v10 & 0x80000000) == 0)
    {
      v11 = (char *)a4 + (_QWORD)CStringPtr;
      v12 = *(const char **)(a3 + 24);
      v13 = MEMORY[0x1E0CBF868];
      if ((_DWORD)v8)
      {
        v14 = 0;
        v15 = 0;
        v16 = (unsigned __int8 *)a4 + (_QWORD)CStringPtr;
        v17 = v12;
        v18 = v8;
        do
        {
          v19 = *v16++;
          v15 += *(char *)(MEMORY[0x1E0CBF868] + v19);
          v20 = *(unsigned __int8 *)v17++;
          v14 += *(char *)(MEMORY[0x1E0CBF868] + v20);
          --v18;
        }
        while (v18);
      }
      else
      {
        v15 = 0;
        v14 = 0;
      }
      v33 = 0;
      v34 = v10;
      v35 = (char *)a4 + (_QWORD)CStringPtr;
      v42 = (int)a4;
      v36 = (char *)a4 + v8 + (_QWORD)CStringPtr;
      while (v15 != v14 || strncasecmp(&v35[v33], v12, v8))
      {
        if (v34 == v33)
          return 0xFFFFFFFFLL;
        v15 = v15 + *(char *)(v13 + v36[v33]) - *(char *)(v13 + v11[v33]);
        ++v33;
      }
      if ((int)v33 >= 0)
        return (v42 + v33);
      else
        return 0xFFFFFFFFLL;
    }
    return 0xFFFFFFFFLL;
  }
  CharactersPtr = CFStringGetCharactersPtr(this);
  if (!CharactersPtr)
  {
    v44.location = 0;
    v44.length = (CFIndex)a2;
    if (CFStringFindWithOptions(this, *(CFStringRef *)(a3 + 8), v44, 1uLL, &result))
      return LODWORD(result.location);
    else
      return 0xFFFFFFFFLL;
  }
  v23 = (_DWORD)a2 - (_DWORD)a4 - v8;
  if ((v23 & 0x80000000) != 0)
    return 0xFFFFFFFFLL;
  v24 = &CharactersPtr[(_QWORD)a4];
  v25 = *(const UChar **)(a3 + 16);
  if ((_DWORD)v8)
  {
    v26 = 0;
    v27 = 0;
    v28 = &CharactersPtr[(_QWORD)a4];
    v29 = v25;
    v30 = v8;
    do
    {
      v31 = *v28++;
      v27 += (unsigned __int16)MEMORY[0x1A859A320](v31, 0);
      v32 = *v29++;
      v26 += (unsigned __int16)MEMORY[0x1A859A320](v32, 0);
      --v30;
    }
    while (v30);
  }
  else
  {
    v27 = 0;
    v26 = 0;
  }
  v37 = 0;
  v38 = -(uint64_t)v23;
  v39 = (int)a4;
  while (v27 != v26 || u_memcasecmp(v24, v25, v8, 0))
  {
    if (v38 == v37)
      return 0xFFFFFFFFLL;
    v40 = v27 + (unsigned __int16)MEMORY[0x1A859A320](v24[v8], 0);
    v41 = *v24++;
    v27 = v40 - (unsigned __int16)MEMORY[0x1A859A320](v41, 0);
    --v37;
  }
  if ((int)v37 <= 0)
    return (v39 - v37);
  else
    return 0xFFFFFFFFLL;
}

uint64_t SafariShared::initializeURLCompletionOnMainThread(SafariShared *this)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t result;

  if (!ignorablePrefixesByLength)
  {
    _WBSLocalizedString();
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "componentsSeparatedByString:", CFSTR(","));
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = (void *)objc_msgSend(v2, "mutableCopy");

    v4 = objc_msgSend(v3, "count");
    if (v4)
    {
      v5 = v4 - 1;
      do
      {
        objc_msgSend(v3, "objectAtIndex:", v5);
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        v7 = objc_msgSend(v6, "length");

        if (!v7)
          objc_msgSend(v3, "removeObjectAtIndex:", v5);
        --v5;
      }
      while (v5 != -1);
    }
    objc_msgSend(v3, "sortUsingComparator:", &__block_literal_global_19);
    v8 = (void *)ignorablePrefixesByLength;
    ignorablePrefixesByLength = (uint64_t)v3;

  }
  result = CFStringGetFastestEncoding(CFSTR(" "));
  SafariShared::systemEightBitStringEncoding = result;
  return result;
}

void sub_1A3DAFF34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL SafariShared::offsetAppearsToBeAtStartOrEndOfWord(SafariShared *this, CFStringRef theString, const __CFString *a3)
{
  int v3;
  int v5;
  int v7;
  const __CFCharacterSet *v8;
  UniChar CharacterAtIndex;

  v3 = (int)a3;
  v5 = (int)this;
  if (!(_DWORD)this && !(_DWORD)a3 || CFStringGetLength(theString) == (int)this && (v3 & 1) != 0)
    return 1;
  v7 = v3 ^ 1;
  if (SafariShared::offsetAppearsToBeAtStartOrEndOfWord(int,__CFString const*,BOOL)::onceToken != -1)
  {
    dispatch_once(&SafariShared::offsetAppearsToBeAtStartOrEndOfWord(int,__CFString const*,BOOL)::onceToken, &__block_literal_global);
    v7 = v3 ^ 1;
  }
  v8 = (const __CFCharacterSet *)SafariShared::offsetAppearsToBeAtStartOrEndOfWord(int,__CFString const*,BOOL)::delimiters;
  CharacterAtIndex = CFStringGetCharacterAtIndex(theString, v5 - v7);
  return CFCharacterSetIsCharacterMember(v8, CharacterAtIndex) != 0;
}

void ___ZN12SafariShared35offsetAppearsToBeAtStartOrEndOfWordEiPK10__CFStringb_block_invoke()
{
  __CFCharacterSet *Mutable;
  const __CFCharacterSet *Predefined;
  __CFCharacterSet *v2;
  const __CFCharacterSet *v3;

  Mutable = CFCharacterSetCreateMutable(0);
  SafariShared::offsetAppearsToBeAtStartOrEndOfWord(int,__CFString const*,BOOL)::delimiters = (uint64_t)Mutable;
  Predefined = CFCharacterSetGetPredefined(kCFCharacterSetWhitespaceAndNewline);
  CFCharacterSetUnion(Mutable, Predefined);
  v2 = (__CFCharacterSet *)SafariShared::offsetAppearsToBeAtStartOrEndOfWord(int,__CFString const*,BOOL)::delimiters;
  v3 = CFCharacterSetGetPredefined(kCFCharacterSetPunctuation);
  CFCharacterSetUnion(v2, v3);
}

const char *SafariShared::debugStringForMatchLocation(unint64_t a1)
{
  if (a1 > 0xA)
    return "<invalid>";
  else
    return off_1E4B29970[a1];
}

uint64_t SafariShared::computeURLMatchLocation(CFStringRef theString, NSString *a2, WBSURLCompletionUserTypedString *a3)
{
  uint64_t matched;
  const __CFString *Length;
  int v8;
  int v9;
  void *v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  CFIndex v15;
  NSObject *v16;
  NSObject *v17;
  const char *CStringPtr;
  void *CharactersPtr;
  void *v20;
  UniChar *v21;
  UniChar *buffer;
  uint64_t v23;
  _BYTE v24[2048];
  CFRange v25;

  if (!*((_DWORD *)a2 + 8))
    return 9;
  if (*((_BYTE *)a2 + 36))
    return 0;
  if (!theString)
  {
    v16 = WBS_LOG_CHANNEL_PREFIXHistory();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      SafariShared::computeURLMatchLocation(v16);
    return 0;
  }
  Length = (const __CFString *)CFStringGetLength(theString);
  v8 = SafariShared::caseInsensitiveFindInUserTypedString(theString, Length, (uint64_t)a2, 0);
  if (v8 == -1)
    return 0;
  v9 = v8;
  objc_msgSend(MEMORY[0x1E0CB3998], "componentsWithString:", theString);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v10, "rangeOfScheme") || (v12 = v11, !v11))
  {
    v17 = WBS_LOG_CHANNEL_PREFIXHistory();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      SafariShared::computeURLMatchLocation((uint64_t)theString, v17);
    matched = 0;
  }
  else
  {
    v13 = *((_DWORD *)a2 + 8);
    v14 = v13;
    if (v9 || v13 <= (int)v11)
    {
      if (v13 + v9 <= (int)v11
        && (v9 = SafariShared::caseInsensitiveFindInUserTypedString(theString, Length, (uint64_t)a2, (WBSURLCompletionUserTypedString *)((int)v11 + 1)), v9 == -1))
      {
        matched = 1;
      }
      else
      {
        CStringPtr = CFStringGetCStringPtr(theString, SafariShared::systemEightBitStringEncoding);
        if (CStringPtr)
        {
          matched = SafariShared::matchLocationAfterURLScheme<char>((uint64_t)CStringPtr, (int)Length, v12, v9, v14);
        }
        else
        {
          buffer = (UniChar *)v24;
          v23 = 1024;
          CharactersPtr = (void *)CFStringGetCharactersPtr(theString);
          if (!CharactersPtr)
          {
            WTF::Vector<unsigned short,1024ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resize((uint64_t)&buffer, (unint64_t)Length);
            CharactersPtr = buffer;
            v25.location = 0;
            v25.length = (CFIndex)Length;
            CFStringGetCharacters(theString, v25, buffer);
          }
          matched = SafariShared::matchLocationAfterURLScheme<unsigned short>((uint64_t)CharactersPtr, (int)Length, v12, v9, v14);
          v21 = buffer;
          if (v24 != (_BYTE *)buffer && buffer)
          {
            buffer = 0;
            LODWORD(v23) = 0;
            WTF::fastFree((WTF *)v21, v20);
          }
        }
      }
    }
    else
    {
      v15 = CFStringGetLength(theString);
      if (v15 == v14 || v14 + 1 == v15 && CFStringGetCharacterAtIndex(theString, v15 - 1) == 47)
        matched = 10;
      else
        matched = 9;
    }
  }

  return matched;
}

void sub_1A3DB030C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10)
{
  void *v10;
  WTF *v11;

  if (v11 != a9)
  {
    if (a9)
      WTF::fastFree(a9, a2);
  }

  _Unwind_Resume(a1);
}

uint64_t SafariShared::matchLocationAfterURLScheme<char>(uint64_t a1, int a2, int a3, int a4, int a5)
{
  uint64_t v5;

  v5 = a3 + 2;
  if ((int)v5 < a2
    && *(_BYTE *)(a3 + a1 + 1) == 47
    && *(_BYTE *)(a1 + v5) == 47
    && (a3 + 3 == a4
     || a3 + 7 == a4
     && a3 + 7 < a2
     && *(_BYTE *)(a1 + a3 + 3) == 119
     && *(_BYTE *)(a3 + a1 + 4) == 119
     && *(_BYTE *)(a3 + a1 + 5) == 119
     && *(_BYTE *)(a3 + a1 + 6) == 46))
  {
    if (a5 + a4 == a2)
    {
      return 10;
    }
    else if (a5 + a4 + 1 == a2)
    {
      if (*(_BYTE *)(a1 + a2 - 1) == 47)
        return 10;
      else
        return 9;
    }
    else
    {
      return 9;
    }
  }
  else if (*(_BYTE *)(a1 + a4 - 1) == 47)
  {
    return 5;
  }
  else
  {
    return 2;
  }
}

uint64_t WTF::Vector<unsigned short,1024ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resize(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = a2;
  v3 = result;
  if (*(unsigned int *)(result + 12) < a2)
  {
    v4 = *(unsigned int *)(result + 8);
    if (v4 < a2)
    {
      v5 = v4 + (v4 >> 2);
      if (v5 >= 0x10)
        v6 = v5 + 1;
      else
        v6 = 16;
      if (v6 > a2)
        a2 = v6;
      result = WTF::Vector<unsigned short,1024ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(result, a2);
    }
  }
  *(_DWORD *)(v3 + 12) = v2;
  return result;
}

uint64_t SafariShared::matchLocationAfterURLScheme<unsigned short>(uint64_t a1, int a2, int a3, int a4, int a5)
{
  uint64_t v5;
  uint64_t v7;

  v5 = a3 + 2;
  if ((int)v5 < a2
    && *(_WORD *)(a1 + 2 * a3 + 2) == 47
    && *(_WORD *)(a1 + 2 * v5) == 47
    && (a3 + 3 == a4
     || a3 + 7 == a4
     && a3 + 7 < a2
     && *(_WORD *)(a1 + 2 * (a3 + 3)) == 119
     && (v7 = a1 + 2 * a3, *(_WORD *)(v7 + 8) == 119)
     && *(_WORD *)(v7 + 10) == 119
     && *(_WORD *)(a1 + 2 * a3 + 12) == 46))
  {
    if (a5 + a4 == a2)
    {
      return 10;
    }
    else if (a5 + a4 + 1 == a2)
    {
      if (*(_WORD *)(a1 + 2 * (a2 - 1)) == 47)
        return 10;
      else
        return 9;
    }
    else
    {
      return 9;
    }
  }
  else if (*(_WORD *)(a1 + 2 * (a4 - 1)) == 47)
  {
    return 5;
  }
  else
  {
    return 2;
  }
}

uint64_t SafariShared::computeTitleMatchLocation(CFStringRef theString, NSString *a2, WBSURLCompletionUserTypedString *a3)
{
  uint64_t v3;
  const __CFString *Length;
  uint64_t v6;
  SafariShared *v7;
  void *v8;
  int v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  int v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];
  uint64_t v22;

  v3 = (uint64_t)theString;
  v22 = *MEMORY[0x1E0C80C00];
  if (theString)
  {
    Length = (const __CFString *)CFStringGetLength(theString);
    v6 = SafariShared::caseInsensitiveFindInUserTypedString((const __CFString *)v3, Length, (uint64_t)a2, 0);
    if ((_DWORD)v6 == -1)
    {
      return 0;
    }
    else
    {
      v7 = (SafariShared *)v6;
      if ((_DWORD)v6)
      {
        if (objc_msgSend((id)ignorablePrefixesByLength, "count"))
        {
          objc_msgSend((id)ignorablePrefixesByLength, "lastObject");
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          v9 = objc_msgSend(v8, "length");

          if ((int)v7 <= v9)
          {
            v19 = 0u;
            v20 = 0u;
            v17 = 0u;
            v18 = 0u;
            v10 = (id)ignorablePrefixesByLength;
            v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
            if (v11)
            {
              v12 = *(_QWORD *)v18;
              while (2)
              {
                for (i = 0; i != v11; ++i)
                {
                  if (*(_QWORD *)v18 != v12)
                    objc_enumerationMutation(v10);
                  v14 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * i);
                  v15 = objc_msgSend(v14, "length", (_QWORD)v17);
                  if ((int)v7 <= v15)
                  {
                    if ((int)v7 < v15)
                      goto LABEL_20;
                    if ((objc_msgSend((id)v3, "safari_hasLocalizedCaseInsensitivePrefix:", v14) & 1) != 0)
                    {
                      if (Length == (const __CFString *)(*((int *)a2 + 8) + (uint64_t)(int)v7))
                        v3 = 8;
                      else
                        v3 = 7;

                      return v3;
                    }
                  }
                }
                v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
                if (v11)
                  continue;
                break;
              }
            }
LABEL_20:

          }
        }
        if (SafariShared::offsetAppearsToBeAtStartOrEndOfWord(v7, (CFStringRef)v3, 0))
          return 6;
        else
          return 3;
      }
      else if (Length == (const __CFString *)*((int *)a2 + 8))
      {
        return 8;
      }
      else
      {
        return 7;
      }
    }
  }
  return v3;
}

void sub_1A3DB0764(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

float SafariShared::weightForMatchLocation(uint64_t a1)
{
  float result;

  result = 0.0;
  if ((unint64_t)(a1 - 1) <= 9)
    return flt_1A3F42A70[a1 - 1];
  return result;
}

uint64_t ___ZN12SafariSharedL23createIgnorablePrefixesEv_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  unint64_t v6;
  uint64_t v7;

  v4 = a2;
  v5 = a3;
  v6 = objc_msgSend(v4, "length");
  if (v6 < objc_msgSend(v5, "length"))
    v7 = -1;
  else
    v7 = 1;

  return v7;
}

void sub_1A3DB0814(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<unsigned short,1024ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  v2 = a2;
  v3 = result;
  v4 = *(void **)result;
  v5 = *(unsigned int *)(result + 12);
  if (a2 < 0x401)
  {
    v6 = (void *)(result + 16);
    *(_QWORD *)v3 = v3 + 16;
    *(_DWORD *)(v3 + 8) = 1024;
LABEL_6:
    memcpy(v6, v4, 2 * v5);
    if ((void *)(v3 + 16) != v4 && v4 != 0)
    {
      if (*(void **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree((WTF *)v4, v7);
    }
    return 1;
  }
  if (!(a2 >> 31))
  {
    v6 = (void *)WTF::fastMalloc((WTF *)(2 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(_QWORD *)v3 = v6;
    goto LABEL_6;
  }
  __break(0xC471u);
  return result;
}

BOOL SafariShared::ArticleFinderJSController::readerIsAvailable(SafariShared::ArticleFinderJSController *this)
{
  const OpaqueJSContext *v1;
  const OpaqueJSContext *v2;
  const OpaqueJSValue *v3;
  const OpaqueJSValue *v4;

  v1 = (const OpaqueJSContext *)*((_QWORD *)this + 3);
  if (v1
    && (v2 = (const OpaqueJSContext *)*((_QWORD *)this + 5),
        (v3 = SafariShared::JSUtilities::callJSMethodWithArguments(v2, v1, (OpaqueJSValue *)"isReaderModeAvailable", 0, 0)) != 0)&& (v4 = v3, JSValueIsBoolean(v2, v3)))
  {
    return JSValueToBoolean(v2, v4);
  }
  else
  {
    return 0;
  }
}

__CFString *SafariShared::ArticleFinderJSController::readerTextIncludingArticleMetadata(SafariShared::ArticleFinderJSController *this, BOOL a2)
{
  const OpaqueJSContext *v3;
  const OpaqueJSValue *v4;
  const OpaqueJSValue *v5;
  OpaqueJSString *v6;
  __CFString *v7;
  char v9[8];

  if (*((_QWORD *)this + 3)
    && (v3 = (const OpaqueJSContext *)*((_QWORD *)this + 5),
        *(_QWORD *)v9 = JSValueMakeBoolean(v3, a2),
        (v4 = SafariShared::JSUtilities::callJSMethodWithArguments(v3, *((const OpaqueJSContext **)this + 3), (OpaqueJSValue *)"unformattedArticleTextContentIncludingMetadata", v9, (const OpaqueJSValue *const *)1)) != 0)&& (v5 = v4, JSValueIsString(v3, v4)))
  {
    v6 = JSValueToStringCopy(v3, v5, 0);
    v7 = (__CFString *)JSStringCopyCFString(0, v6);
    if (v6)
      JSStringRelease(v6);
  }
  else
  {
    v7 = 0;
  }
  return v7;
}

void sub_1A3DB1D7C(_Unwind_Exception *exception_object)
{
  OpaqueJSString *v1;

  if (v1)
    JSStringRelease(v1);
  _Unwind_Resume(exception_object);
}

id SafariShared::ArticleFinderJSController::readerArticleTitle(SafariShared::ArticleFinderJSController *this)
{
  const OpaqueJSContext *v1;
  SafariShared::JSUtilities *v2;
  void *v3;
  OpaqueJSString *v4;

  v1 = (const OpaqueJSContext *)*((_QWORD *)this + 3);
  if (!v1)
    goto LABEL_6;
  v2 = (SafariShared::JSUtilities *)*((_QWORD *)this + 5);
  v3 = SafariShared::JSUtilities::callJSMethodWithArguments(v2, v1, (OpaqueJSValue *)"articleTitle", 0, 0);
  if (!v3)
    return v3;
  if (!JSValueIsString(v2, (JSValueRef)v3))
  {
LABEL_6:
    v3 = 0;
    return v3;
  }
  v4 = JSValueToStringCopy(v2, (JSValueRef)v3, 0);
  v3 = (void *)JSStringCopyCFString(0, v4);
  if (v4)
    JSStringRelease(v4);
  return v3;
}

void sub_1A3DB1E24(_Unwind_Exception *exception_object)
{
  OpaqueJSString *v1;

  if (v1)
    JSStringRelease(v1);
  _Unwind_Resume(exception_object);
}

JSValueRef SafariShared::ArticleFinderJSController::findTextSamplesByVisualExamination(SafariShared::ArticleFinderJSController *this)
{
  SafariShared::JSUtilities *v1;
  const OpaqueJSValue *v2;
  const OpaqueJSValue *v3;

  v1 = (SafariShared::JSUtilities *)*((_QWORD *)this + 5);
  v2 = SafariShared::JSUtilities::callJSMethodWithArguments(v1, *((const OpaqueJSContext **)this + 3), (OpaqueJSValue *)"findTextSamplesByVisualExamination", 0, 0);
  if (v2 && (v3 = v2, JSValueIsObject(v1, v2)))
    return v3;
  else
    return JSValueMakeUndefined(v1);
}

BOOL SafariShared::ArticleFinderJSController::usesSearchEngineOptimizationMetadata(SafariShared::ArticleFinderJSController *this)
{
  SafariShared::JSUtilities *v1;
  const OpaqueJSValue *v2;
  const OpaqueJSValue *v3;

  v1 = (SafariShared::JSUtilities *)*((_QWORD *)this + 5);
  v2 = SafariShared::JSUtilities::callJSMethodWithArguments(v1, *((const OpaqueJSContext **)this + 3), (OpaqueJSValue *)"usesSearchEngineOptimizationMetadata", 0, 0);
  if (v2 && (v3 = v2, JSValueIsBoolean(v1, v2)))
    return JSValueToBoolean(v1, v3);
  else
    return 0;
}

JSValueRef SafariShared::ArticleFinderJSController::prepareToTransitionToReader(SafariShared::JSUtilities **this)
{
  return SafariShared::JSUtilities::callJSMethodWithArguments(this[5], this[3], (OpaqueJSValue *)"prepareToTransitionToReader", 0, 0);
}

JSValueRef SafariShared::ArticleFinderJSController::reloadArticleContent(SafariShared::JSUtilities **this)
{
  return SafariShared::JSUtilities::callJSMethodWithArguments(this[5], this[3], (OpaqueJSValue *)"reloadArticleContent", 0, 0);
}

JSValueRef SafariShared::ArticleFinderJSController::collectReadingListItemInformation(SafariShared::ArticleFinderJSController *this)
{
  SafariShared::JSUtilities *v1;
  const OpaqueJSValue *v2;
  const OpaqueJSValue *v3;

  v1 = (SafariShared::JSUtilities *)*((_QWORD *)this + 5);
  v2 = SafariShared::JSUtilities::callJSMethodWithArguments(v1, *((const OpaqueJSContext **)this + 3), (OpaqueJSValue *)"readingListItemInformation", 0, 0);
  if (v2 && (v3 = v2, JSValueIsObject(v1, v2)))
    return v3;
  else
    return JSValueMakeUndefined(v1);
}

JSObjectRef SafariShared::ArticleFinderJSController::mainImageNode(SafariShared::ArticleFinderJSController *this)
{
  SafariShared::JSUtilities *v1;
  const OpaqueJSValue *v2;
  const OpaqueJSValue *v3;

  v1 = (SafariShared::JSUtilities *)*((_QWORD *)this + 5);
  v2 = SafariShared::JSUtilities::callJSMethodWithArguments(v1, *((const OpaqueJSContext **)this + 3), (OpaqueJSValue *)"mainImageNode", 0, 0);
  if (!v2)
    return 0;
  v3 = v2;
  if (JSValueIsNull(v1, v2) || JSValueIsUndefined(v1, v3))
    return 0;
  else
    return JSValueToObject(v1, v3, 0);
}

JSValueRef SafariShared::ArticleFinderJSController::articleContent(SafariShared::ArticleFinderJSController *this)
{
  SafariShared::JSUtilities *v1;
  const OpaqueJSValue *v2;
  const OpaqueJSValue *v3;

  v1 = (SafariShared::JSUtilities *)*((_QWORD *)this + 5);
  v2 = SafariShared::JSUtilities::callJSMethodWithArguments(v1, *((const OpaqueJSContext **)this + 3), (OpaqueJSValue *)"extractedArticleContent", 0, 0);
  if (v2 && (v3 = v2, JSValueIsObject(v1, v2)))
    return v3;
  else
    return JSValueMakeUndefined(v1);
}

id SafariShared::ArticleFinderJSController::canonicalURLForSystemNoteTaking(SafariShared::ArticleFinderJSController *this)
{
  SafariShared::JSUtilities *v1;
  const OpaqueJSValue *v2;
  const OpaqueJSValue *v3;
  OpaqueJSString *v4;
  __CFString *v5;
  void *v6;

  v1 = (SafariShared::JSUtilities *)*((_QWORD *)this + 5);
  v2 = SafariShared::JSUtilities::callJSMethodWithArguments(v1, *((const OpaqueJSContext **)this + 3), (OpaqueJSValue *)"extractCanonicalLink", 0, 0);
  if (v2 && (v3 = v2, JSValueIsString(v1, v2)))
  {
    v4 = JSValueToStringCopy(v1, v3, 0);
    v5 = (__CFString *)JSStringCopyCFString(0, v4);
    objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    if (v4)
      JSStringRelease(v4);
  }
  else
  {
    v6 = 0;
  }
  return v6;
}

void sub_1A3DB213C(_Unwind_Exception *a1)
{
  OpaqueJSString *v1;
  void *v2;

  if (v1)
    JSStringRelease(v1);
  _Unwind_Resume(a1);
}

void SafariShared::ArticleFinderJSController::evaluateSupportJavaScriptForReaderTestsIfNecessary(SafariShared::ArticleFinderJSController *this)
{
  const OpaqueJSContext *v2;
  JSStringRef script;

  v2 = (const OpaqueJSContext *)*((_QWORD *)this + 5);
  SafariShared::JSUtilities::jsString(CFSTR("if (typeof pathToElementForTesting === 'undefined') var pathToElementForTesting = function(element) {var path = \"\";for (; element; element = element.parentElement) {var index = 0;for (var sibling = element; sibling; sibling = sibling.previousElementSibling)index++;path = \"/\" + index + path;}return path;};"),
    &script);
  JSEvaluateScript(v2, script, *((JSObjectRef *)this + 3), 0, 0, 0);
  if (script)
    JSStringRelease(script);
}

void sub_1A3DB21C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, JSStringRef string)
{
  if (string)
    JSStringRelease(string);
  _Unwind_Resume(exception_object);
}

id SafariShared::ArticleFinderJSController::pathToArticleElement(SafariShared::ArticleFinderJSController *this)
{
  const OpaqueJSContext *v2;
  const OpaqueJSValue *v3;
  void *v4;
  JSStringRef script;

  v2 = (const OpaqueJSContext *)*((_QWORD *)this + 5);
  SafariShared::ArticleFinderJSController::evaluateSupportJavaScriptForReaderTestsIfNecessary(this);
  SafariShared::JSUtilities::jsString((SafariShared::JSUtilities *)"pathToElementForTesting(this.articleNode()); ",
    &script);
  v3 = JSEvaluateScript(v2, script, *((JSObjectRef *)this + 3), 0, 0, 0);
  if (script)
    JSStringRelease(script);
  if (v3 && JSValueIsString(v2, v3))
  {
    SafariShared::JSUtilities::toNSString(v2, v3, 0);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v4 = 0;
  }
  return v4;
}

void sub_1A3DB2274(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, JSStringRef string)
{
  if (string)
    JSStringRelease(string);
  _Unwind_Resume(exception_object);
}

const OpaqueJSValue *SafariShared::ArticleFinderJSController::articleTitleString(SafariShared::ArticleFinderJSController *this)
{
  SafariShared::JSUtilities *v1;
  const OpaqueJSValue *v2;
  const OpaqueJSValue *v3;

  v1 = (SafariShared::JSUtilities *)*((_QWORD *)this + 5);
  v2 = SafariShared::JSUtilities::callJSMethodWithArguments(v1, *((const OpaqueJSContext **)this + 3), (OpaqueJSValue *)"articleTitle", 0, 0);
  if (v2)
  {
    v3 = v2;
    if (JSValueIsString(v1, v2))
    {
      SafariShared::JSUtilities::toNSString(v1, v3, 0);
      v2 = (const OpaqueJSValue *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v2 = 0;
    }
  }
  return v2;
}

const OpaqueJSValue *SafariShared::ArticleFinderJSController::nextPageURLString(SafariShared::ArticleFinderJSController *this)
{
  SafariShared::JSUtilities *v1;
  const OpaqueJSValue *v2;
  const OpaqueJSValue *v3;

  v1 = (SafariShared::JSUtilities *)*((_QWORD *)this + 5);
  v2 = SafariShared::JSUtilities::callJSMethodWithArguments(v1, *((const OpaqueJSContext **)this + 3), (OpaqueJSValue *)"nextPageURL", 0, 0);
  if (v2)
  {
    v3 = v2;
    if (JSValueIsString(v1, v2))
    {
      SafariShared::JSUtilities::toNSString(v1, v3, 0);
      v2 = (const OpaqueJSValue *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v2 = 0;
    }
  }
  return v2;
}

id SafariShared::ArticleFinderJSController::multiPageContentElementsPathString(SafariShared::ArticleFinderJSController *this)
{
  const OpaqueJSContext *v2;
  const OpaqueJSValue *v3;
  void *v4;
  JSStringRef script;

  v2 = (const OpaqueJSContext *)*((_QWORD *)this + 5);
  SafariShared::ArticleFinderJSController::evaluateSupportJavaScriptForReaderTestsIfNecessary(this);
  SafariShared::JSUtilities::jsString((SafariShared::JSUtilities *)"this.containerElementsForMultiPageContent().map(pathToElementForTesting).join(' | ');",
    &script);
  v3 = JSEvaluateScript(v2, script, *((JSObjectRef *)this + 3), 0, 0, 0);
  if (script)
    JSStringRelease(script);
  if (v3 && JSValueIsString(v2, v3))
  {
    SafariShared::JSUtilities::toNSString(v2, v3, 0);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v4 = 0;
  }
  return v4;
}

void sub_1A3DB23FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, JSStringRef string)
{
  if (string)
    JSStringRelease(string);
  _Unwind_Resume(exception_object);
}

id SafariShared::ArticleFinderJSController::adoptableArticleHTML(SafariShared::ArticleFinderJSController *this)
{
  const OpaqueJSContext *v2;
  const OpaqueJSValue *v3;
  void *v4;
  JSStringRef script;

  v2 = (const OpaqueJSContext *)*((_QWORD *)this + 5);
  SafariShared::JSUtilities::jsString((SafariShared::JSUtilities *)"var adoptableArticle = this.adoptableArticle();var allElements = adoptableArticle.getEl"
                                 "ementsByTagName('*');var numberOfElements = allElements.length;for (var i = 0; i < numb"
                                 "erOfElements; ++i) {var element = allElements[i];element.removeAttribute(this.elementRe"
                                 "aderUniqueIDAttributeKey());}adoptableArticle.removeAttribute(this.elementReaderUniqueI"
                                 "DAttributeKey());var articleHTML = adoptableArticle.outerHTML;var subhead = this.articl"
                                 "eSubhead();var subheadHTML = '';if (subhead) {var subheadNode = document.createElement("
                                 "'h2');subheadNode.className = 'subhead';subheadNode.textContent = this.articleSubhead()"
                                 ";subheadHTML = subheadNode.outerHTML}var metadataElement = this.adoptableMetadataBlock("
                                 ");if (metadataElement) {var allMetadataElements = metadataElement.getElementsByTagName("
                                 "'*');var numberOfMetadataElements = allMetadataElements.length;for (var i = 0; i < numb"
                                 "erOfMetadataElements; ++i) {var element = allMetadataElements[i];element.removeAttribut"
                                 "e(this.elementReaderUniqueIDAttributeKey());}}var metadataHTML = '';if (metadataElement"
                                 " && metadataElement.innerText) {metadataElement.className = 'metadata';metadataHTML = m"
                                 "etadataElement.outerHTML;}articleHTML = subheadHTML + metadataHTML + articleHTML;articleHTML;",
    &script);
  v3 = JSEvaluateScript(v2, script, *((JSObjectRef *)this + 3), 0, 0, 0);
  if (script)
    JSStringRelease(script);
  if (v3 && JSValueIsString(v2, v3))
  {
    SafariShared::JSUtilities::toNSString(v2, v3, 0);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v4 = 0;
  }
  return v4;
}

void sub_1A3DB24A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, JSStringRef string)
{
  if (string)
    JSStringRelease(string);
  _Unwind_Resume(exception_object);
}

const char *SafariShared::ArticleFinderJSController::scriptObjectName(SafariShared::ArticleFinderJSController *this)
{
  return "ReaderArticleFinderJS";
}

uint64_t SafariShared::ArticleFinderJSController::staticValues(SafariShared::ArticleFinderJSController *this)
{
  return 0;
}

char **SafariShared::ArticleFinderJSController::staticFunctions(SafariShared::ArticleFinderJSController *this)
{
  return &SafariShared::ArticleFinderJSController::staticFunctions(void)::staticFunctions;
}

JSValueRef SafariShared::jsSubstituteURLForNextPageURL(JSContextRef ctx, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, uint64_t a5, const OpaqueJSValue *const *a6, const OpaqueJSValue **a7)
{
  void *v10;

  if (a4 != (OpaqueJSValue *)1)
    return JSValueMakeUndefined(ctx);
  if (objc_msgSend(MEMORY[0x1E0D89BE8], "isInternalInstall", a3, 1, a5, a6, a7))
  {
    v10 = SafariShared::JSController::jsController(a3);
    if (v10)
      return (JSValueRef)(*(uint64_t (**)(void *, JSContextRef, uint64_t))(*(_QWORD *)v10 + 56))(v10, ctx, a5);
    return JSValueMakeUndefined(ctx);
  }
  return *(JSValueRef *)a5;
}

JSValueRef SafariShared::jsNodeAtPoint(SafariShared *this, const OpaqueJSContext *a2, JSObjectRef object, OpaqueJSValue *a4, JSValueRef *a5, const OpaqueJSValue *const *a6, const OpaqueJSValue **a7)
{
  void *v10;
  void *v11;
  double v12;
  double v13;

  v10 = SafariShared::JSController::jsController(object);
  if (a4 != (OpaqueJSValue *)2)
    return JSValueMakeUndefined(this);
  v11 = v10;
  if (!v10)
    return JSValueMakeUndefined(this);
  v12 = JSValueToNumber(this, *a5, 0);
  v13 = JSValueToNumber(this, a5[1], 0);
  return (JSValueRef)(*(uint64_t (**)(void *, double, double))(*(_QWORD *)v11 + 48))(v11, v12, v13);
}

JSValueRef SafariShared::jsUserVisibleURLString(SafariShared *this, const OpaqueJSContext *a2, JSObjectRef object, OpaqueJSValue *a4, JSValueRef *a5, const OpaqueJSValue *const *a6, const OpaqueJSValue **a7)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  JSValueRef v15;

  v10 = SafariShared::JSController::jsController(object);
  if (a4 != (OpaqueJSValue *)1 || !v10)
    return JSValueMakeUndefined(this);
  v11 = (void *)MEMORY[0x1E0C99E98];
  SafariShared::JSUtilities::toNSString(this, *a5, 0);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "safari_URLWithDataAsString:", v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "safari_userVisibleString");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = SafariShared::JSUtilities::toJSValue(this, v14, 0);

  return v15;
}

void sub_1A3DB26C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

JSClassRef SafariShared::ArticleFinderJSController::staticJSClass(SafariShared::ArticleFinderJSController *this)
{
  JSClassRef result;

    return (JSClassRef)SafariShared::ArticleFinderJSController::staticJSClass(void)::jsClass;
  result = SafariShared::JSController::createJSClass(this);
  SafariShared::ArticleFinderJSController::staticJSClass(void)::jsClass = (uint64_t)result;
  return result;
}

uint64_t WBSAutoFillGetSavedDataClasses()
{
  void *v0;
  void *v1;
  uint64_t v2;
  _QWORD v4[5];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v8 = 0;
  objc_msgSend(MEMORY[0x1E0C92C68], "sharedCredentialStorage");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "safari_allSafariCredentials");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __hasUsernamesAndPasswords_block_invoke;
  v4[3] = &unk_1E4B29B18;
  v4[4] = &v5;
  objc_msgSend(v1, "enumerateKeysAndObjectsUsingBlock:", v4);
  v2 = *((unsigned __int8 *)v6 + 24);

  _Block_object_dispose(&v5, 8);
  if (+[WBSCreditCardDataController hasCreditCardData](WBSCreditCardDataController, "hasCreditCardData"))
    return v2 | 2;
  else
    return v2;
}

void sub_1A3DB2800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __hasUsernamesAndPasswords_block_invoke(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  void *v12;
  char v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  objc_msgSend(a3, "allValues", 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v15;
    while (2)
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v15 != v9)
          objc_enumerationMutation(v6);
        objc_msgSend(*(id *)(*((_QWORD *)&v14 + 1) + 8 * i), "user");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        +[WBSFormDataController dontSaveMarker](WBSFormDataController, "dontSaveMarker");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = objc_msgSend(v11, "isEqualToString:", v12);

        if ((v13 & 1) == 0)
        {
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
          *a4 = 1;
          goto LABEL_11;
        }
      }
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      if (v8)
        continue;
      break;
    }
  }
LABEL_11:

}

__CFString *titleForFeedbackDetailType(void *a1, int a2)
{
  id v3;
  __CFString *v4;
  int v5;

  v3 = a1;
  if (objc_msgSend(v3, "isEqualToString:", CFSTR("WBSAutoFillInternalFeedbackDetailTypeAutoFillNotOfferedFormPurpose")))
  {
    if (a2)
      goto LABEL_45;
    v4 = CFSTR("What is the purpose of the form where AutoFill wasn’t offered?");
  }
  else if (objc_msgSend(v3, "isEqualToString:", CFSTR("WBSAutoFillInternalFeedbackDetailTypeAutoFillNotOfferedExpectedAutoFillInformationTypes")))
  {
    if (a2)
      goto LABEL_45;
    v4 = CFSTR("What type(s) of information did you expect to be available for AutoFill in the form?");
  }
  else if (objc_msgSend(v3, "isEqualToString:", CFSTR("WBSAutoFillInternalFeedbackDetailTypeAutoFillIncorrectlyOfferedFormPurpose")))
  {
    if (a2)
      goto LABEL_45;
    v4 = CFSTR("What is the purpose of the form where AutoFill was incorrectly offered?");
  }
  else if (objc_msgSend(v3, "isEqualToString:", CFSTR("WBSAutoFillInternalFeedbackDetailTypeAutoFillIncorrectlyOfferedUnexpectedAutoFillInformationTypes")))
  {
    if (a2)
      goto LABEL_45;
    v4 = CFSTR("What type(s) of information were offered to be filled and why is this unexpected?");
  }
  else if (objc_msgSend(v3, "isEqualToString:", CFSTR("WBSAutoFillInternalFeedbackDetailTypeAutoFillFillingFailedUnfilledFieldsExpectingFilling")))
  {
    if (a2)
      goto LABEL_45;
    v4 = CFSTR("Which fields did you expect to be filled that were not?");
  }
  else if (objc_msgSend(v3, "isEqualToString:", CFSTR("WBSAutoFillInternalFeedbackDetailTypeAutoFillFilledIncorrectDataIncorrectFields")))
  {
    if (a2)
      goto LABEL_45;
    v4 = CFSTR("Which fields had incorrect information filled?");
  }
  else if (objc_msgSend(v3, "isEqualToString:", CFSTR("WBSAutoFillInternalFeedbackDetailTypeAutoFillFilledIncorrectDataExpectedFilledData")))
  {
    if (a2)
      goto LABEL_45;
    v4 = CFSTR("What type of information was filled and what type of information did you expect to be filled?");
  }
  else if (objc_msgSend(v3, "isEqualToString:", CFSTR("WBSAutoFillInternalFeedbackDetailTypeAutoFillFilledIncorrectFormatIncorrectFields")))
  {
    if (a2)
      goto LABEL_45;
    v4 = CFSTR("Which fields had data incorrectly formatted?");
  }
  else if (objc_msgSend(v3, "isEqualToString:", CFSTR("WBSAutoFillInternalFeedbackDetailTypeAutoFillFilledIncorrectFormatExpectedFormat")))
  {
    if (a2)
      goto LABEL_45;
    v4 = CFSTR("What format was the form expecting, and what format was filled?");
  }
  else
  {
    if (objc_msgSend(v3, "isEqualToString:", CFSTR("WBSAutoFillInternalFeedbackDetailTypeAutoFillOtherIssue")))
    {
      if (!a2)
      {
        v4 = CFSTR("What happened and how did that differ from the expected result?");
        goto LABEL_46;
      }
      goto LABEL_45;
    }
    v5 = objc_msgSend(v3, "isEqualToString:", CFSTR("WBSAutoFillInternalFeedbackDetailTypeAutoFillMultipleIssues"));
    if (v5)
      v4 = CFSTR("Please describe each issue you had, including what AutoFill did and how that differed from the expected result.");
    else
      v4 = CFSTR("unknown detail type title");
    if (v5 && a2)
    {
LABEL_45:
      _WBSLocalizedString();
      v4 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
  }
LABEL_46:

  return v4;
}

uint64_t __isABCAvailable_block_invoke()
{
  uint64_t result;

  result = objc_opt_class();
  isABCAvailable_isABCAvailable = result != 0;
  return result;
}

void sub_1A3DB4F70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3DB5104(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A3DB5204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1A3DB528C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{

  _Unwind_Resume(a1);
}

void sub_1A3DB5358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1A3DB549C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A3DB554C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1A3DB55AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3DB5644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

const __CFString *WBSAutomaticTabClosingIntervalAnalyticsTitle(unint64_t a1)
{
  if (a1 > 7)
    return CFSTR("Other");
  else
    return off_1E4B29E88[a1];
}

__CFString *WBSAutomaticTabClosingIntervalSettingsTitle(uint64_t a1)
{
  __CFString *v2;

  v2 = &stru_1E4B40D18;
  switch(a1)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 5:
    case 6:
    case 7:
      _WBSLocalizedString();
      v2 = (__CFString *)objc_claimAutoreleasedReturnValue();
      break;
    default:
      return v2;
  }
  return v2;
}

__CFString *WBSAutomaticTabClosingIntervalPromptTitle(unint64_t a1)
{
  __CFString *v2;

  v2 = &stru_1E4B40D18;
  if (a1 <= 7)
  {
    if (((1 << a1) & 0xEE) != 0)
    {
      WBSAutomaticTabClosingIntervalSettingsTitle(a1);
      v2 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
    else if (!a1)
    {
      _WBSLocalizedString();
      v2 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
  }
  return v2;
}

void WBSAutomaticTabClosingIntervalTimeInterval(uint64_t a1)
{
  void *v1;

  switch(a1)
  {
    case 1:
    case 2:
    case 3:
    case 5:
    case 6:
    case 7:
      return;
    default:
      objc_msgSend(MEMORY[0x1E0C99D68], "distantFuture", 86400.0);
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v1, "timeIntervalSinceNow");

      break;
  }
}

__CFString *WBSAutoplayRegionKeyForCountryCode(void *a1)
{
  id v1;
  id v2;
  void *v3;
  void *v4;
  __CFString *v5;

  v1 = a1;
  if (objc_msgSend(v1, "length"))
  {
    if (countryCodesToRegionKeyTable_onceToken != -1)
      dispatch_once(&countryCodesToRegionKeyTable_onceToken, &__block_literal_global_2);
    v2 = (id)countryCodesToRegionKeyTable_countryCodesToRegionKeys;
    objc_msgSend(v1, "uppercaseString");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "objectForKeyedSubscript:", v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    if (objc_msgSend(v4, "length"))
      v5 = v4;
    else
      v5 = CFSTR("OTH");

  }
  else
  {
    v5 = CFSTR("OTH");
  }

  return v5;
}

id WBSAutoplayDifferentialPrivacyKeyForSignal(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;

  v3 = a2;
  if ((unint64_t)(a1 - 1) > 2)
    v4 = 0;
  else
    v4 = (void *)-[__CFString mutableCopy](off_1E4B29EE8[a1 - 1], "mutableCopy");
  objc_msgSend(v4, "appendString:", CFSTR("."));
  WBSAutoplayRegionKeyForCountryCode(v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "appendString:", v5);

  return v4;
}

void __countryCodesToRegionKeyTable_block_invoke()
{
  void *v0;

  v0 = (void *)countryCodesToRegionKeyTable_countryCodesToRegionKeys;
  countryCodesToRegionKeyTable_countryCodesToRegionKeys = (uint64_t)&unk_1E4B87760;

}

void sub_1A3DB6BC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t WBSSignalToSendForAutoplayEventWithFlags(uint64_t a1, char a2, uint64_t a3)
{
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  uint8_t v10[16];
  uint8_t v11[16];
  uint8_t buf[16];
  uint8_t v13[16];

  switch(a1)
  {
    case 0:
      v5 = WBS_LOG_CHANNEL_PREFIXAutoPlay();
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
        goto LABEL_11;
      *(_WORD *)buf = 0;
      a3 = 2;
      _os_log_impl(&dword_1A3D90000, v5, OS_LOG_TYPE_INFO, "Did prevent media from autoplaying", buf, 2u);
      break;
    case 1:
      if ((a2 & 2) != 0)
      {
        v8 = WBS_LOG_CHANNEL_PREFIXAutoPlay();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)v13 = 0;
          _os_log_impl(&dword_1A3D90000, v8, OS_LOG_TYPE_INFO, "Did play media prevented from autoplaying", v13, 2u);
        }
        goto LABEL_17;
      }
      if ((~a2 & 5) == 0)
        goto LABEL_17;
      break;
    case 2:
      v6 = WBS_LOG_CHANNEL_PREFIXAutoPlay();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v11 = 0;
        _os_log_impl(&dword_1A3D90000, v6, OS_LOG_TYPE_INFO, "Did autoplay media past threshold without user interference", v11, 2u);
      }
      if ((a2 & 1) != 0)
LABEL_17:
        a3 = 3;
      break;
    case 3:
      v7 = WBS_LOG_CHANNEL_PREFIXAutoPlay();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v10 = 0;
        _os_log_impl(&dword_1A3D90000, v7, OS_LOG_TYPE_INFO, "User did interfere with playback", v10, 2u);
      }
      if ((a2 & 1) != 0)
LABEL_11:
        a3 = 2;
      break;
    default:
      return a3;
  }
  return a3;
}

void WBSReportAutoplaySignalIfNecessary(uint64_t a1, void *a2, char a3, double a4)
{
  id v7;
  void *v8;
  void *v9;
  void *v10;
  double v11;
  NSObject *v12;
  NSObject *v13;
  id v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  _QWORD v19[4];
  id v20;
  id v21;
  uint64_t v22;
  char v23;

  v7 = a2;
  v8 = v7;
  if (a1 && v7)
  {
    objc_msgSend(MEMORY[0x1E0C99E98], "safari_URLWithDataAsString:", v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "host");
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    if (objc_msgSend(v10, "length"))
    {
      if (a4 == 0.0 || (objc_msgSend(MEMORY[0x1E0C99D68], "timeIntervalSinceReferenceDate"), v11 - a4 >= 10.0))
      {
        v14 = v10;
        if (sendAutoplaySignalForDomain(WBSAutoplaySignal,NSString *,BOOL)::onceToken != -1)
          dispatch_once(&sendAutoplaySignalForDomain(WBSAutoplaySignal,NSString *,BOOL)::onceToken, &__block_literal_global_3);
        objc_msgSend((id)sendAutoplaySignalForDomain(WBSAutoplaySignal,NSString *,BOOL)::domainNormalizer, "transformedValue:", v14);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        +[WBSFormAutoFillCorrectionsSQLiteStore standardStore](WBSFormAutoFillCorrectionsSQLiteStore, "standardStore");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v19[0] = MEMORY[0x1E0C809B0];
        v19[1] = 3221225472;
        v19[2] = ___ZL27sendAutoplaySignalForDomain17WBSAutoplaySignalP8NSStringb_block_invoke_2;
        v19[3] = &unk_1E4B2A030;
        v22 = a1;
        v17 = v14;
        v20 = v17;
        v18 = v15;
        v21 = v18;
        v23 = a3;
        objc_msgSend(v16, "getAllowListStatusForDomain:completionHandler:", v17, v19);

      }
      else
      {
        v12 = WBS_LOG_CHANNEL_PREFIXAutoPlay();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          LOWORD(v19[0]) = 0;
          _os_log_impl(&dword_1A3D90000, v12, OS_LOG_TYPE_INFO, "Discarding auto-play signal for quick navigation", (uint8_t *)v19, 2u);
        }
        v13 = WBS_LOG_CHANNEL_PREFIXAutoPlay();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
          WBSReportAutoplaySignalIfNecessary_cold_1((uint64_t)v10, v13);
      }
    }

  }
}

void sub_1A3DB7128(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ___ZL27sendAutoplaySignalForDomain17WBSAutoplaySignalP8NSStringb_block_invoke()
{
  WBSCrowdsourcedFeedbackDomainNormalizer *v0;
  void *v1;

  v0 = objc_alloc_init(WBSCrowdsourcedFeedbackDomainNormalizer);
  v1 = (void *)sendAutoplaySignalForDomain(WBSAutoplaySignal,NSString *,BOOL)::domainNormalizer;
  sendAutoplaySignalForDomain(WBSAutoplaySignal,NSString *,BOOL)::domainNormalizer = (uint64_t)v0;

}

void ___ZL27sendAutoplaySignalForDomain17WBSAutoplaySignalP8NSStringb_block_invoke_2(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  uint64_t v4;
  NSObject *v5;
  id *v6;
  void *v7;
  NSObject *v8;
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  void *v15;
  char v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  __int128 v24;
  void (*v25)(uint64_t, uint64_t);
  void *v26;
  id v27;
  id v28;
  uint64_t v29;
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!a2 || a2 == 2)
  {
    v6 = (id *)(a1 + 32);
    objc_msgSend(*(id *)(a1 + 32), "safari_highLevelDomainFromHost");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v7, "length") && !objc_msgSend(*v6, "isEqualToString:", v7))
    {
      v11 = WBS_LOG_CHANNEL_PREFIXAutoPlay();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        v12 = *(_QWORD *)(a1 + 48);
        LODWORD(v24) = 134217984;
        *(_QWORD *)((char *)&v24 + 4) = v12;
        _os_log_impl(&dword_1A3D90000, v11, OS_LOG_TYPE_INFO, "Checking if the high-level domain is on the feedback allowlist before recording auto-play signal %lu", (uint8_t *)&v24, 0xCu);
      }
      v13 = WBS_LOG_CHANNEL_PREFIXAutoPlay();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
        ___ZL27sendAutoplaySignalForDomain17WBSAutoplaySignalP8NSStringb_block_invoke_2_cold_3((uint64_t)v7, a1, v13);
      v14 = *(_QWORD *)(a1 + 48);
      objc_msgSend((id)sendAutoplaySignalForDomain(WBSAutoplaySignal,NSString *,BOOL)::domainNormalizer, "transformedValue:", v7);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = *(_BYTE *)(a1 + 56);
      v17 = v15;
      objc_msgSend(MEMORY[0x1E0C99DC8], "currentLocale");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "countryCode");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      WBSAutoplayDifferentialPrivacyKeyForSignal(v14, v19);
      v20 = (void *)objc_claimAutoreleasedReturnValue();

      +[WBSFormAutoFillCorrectionsSQLiteStore standardStore](WBSFormAutoFillCorrectionsSQLiteStore, "standardStore");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      *(_QWORD *)&v24 = MEMORY[0x1E0C809B0];
      *((_QWORD *)&v24 + 1) = 3221225472;
      v25 = ___ZL57sendDifferentialPrivacySignalForNormalizedHighLevelDomain17WBSAutoplaySignalP8NSStringb_block_invoke;
      v26 = &unk_1E4B2A030;
      v22 = v20;
      v27 = v22;
      v23 = v17;
      v28 = v23;
      v29 = v14;
      v30 = v16;
      objc_msgSend(v21, "getAllowListStatusForDomain:completionHandler:", v23, &v24);

    }
    else
    {
      v8 = WBS_LOG_CHANNEL_PREFIXAutoPlay();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        v9 = *(_QWORD *)(a1 + 48);
        LODWORD(v24) = 134217984;
        *(_QWORD *)((char *)&v24 + 4) = v9;
        _os_log_impl(&dword_1A3D90000, v8, OS_LOG_TYPE_INFO, "Discarding auto-play signal %lu after checking feedback allowlist", (uint8_t *)&v24, 0xCu);
      }
      v10 = WBS_LOG_CHANNEL_PREFIXAutoPlay();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
        ___ZL27sendAutoplaySignalForDomain17WBSAutoplaySignalP8NSStringb_block_invoke_2_cold_2();
    }

  }
  else if (a2 == 1)
  {
    v3 = WBS_LOG_CHANNEL_PREFIXAutoPlay();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v4 = *(_QWORD *)(a1 + 48);
      LODWORD(v24) = 134217984;
      *(_QWORD *)((char *)&v24 + 4) = v4;
      _os_log_impl(&dword_1A3D90000, v3, OS_LOG_TYPE_INFO, "Recording auto-play signal: %lu", (uint8_t *)&v24, 0xCu);
    }
    v5 = WBS_LOG_CHANNEL_PREFIXAutoPlay();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
      ___ZL27sendAutoplaySignalForDomain17WBSAutoplaySignalP8NSStringb_block_invoke_2_cold_1();
    if (objc_msgSend(*(id *)(a1 + 40), "length"))
      donateEventToBiomeWithAutoPlaySignalForDomain(*(_QWORD *)(a1 + 48), *(void **)(a1 + 32), *(unsigned __int8 *)(a1 + 56));
  }
}

void sub_1A3DB74C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void donateEventToBiomeWithAutoPlaySignalForDomain(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  v9 = a2;
  +[WBSBiomeDonationManager sharedManager](WBSBiomeDonationManager, "sharedManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DC8], "currentLocale");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "countryCode");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  WBSAutoplayRegionKeyForCountryCode(v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "donateAutoPlayEventWithSignal:domain:countryCode:webPageLoadedOverPrivateRelay:", a1, v9, v8, a3);

}

void sub_1A3DB75E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void ___ZL57sendDifferentialPrivacySignalForNormalizedHighLevelDomain17WBSAutoplaySignalP8NSStringb_block_invoke(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (!a2 || a2 == 2)
  {
    v6 = WBS_LOG_CHANNEL_PREFIXAutoPlay();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v7 = *(_QWORD *)(a1 + 32);
      v9 = 138543362;
      v10 = v7;
      _os_log_impl(&dword_1A3D90000, v6, OS_LOG_TYPE_INFO, "Discarding auto-play signal %{public}@ after checking feedback allowlist", (uint8_t *)&v9, 0xCu);
    }
    v8 = WBS_LOG_CHANNEL_PREFIXAutoPlay();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      ___ZL57sendDifferentialPrivacySignalForNormalizedHighLevelDomain17WBSAutoplaySignalP8NSStringb_block_invoke_cold_2();
  }
  else if (a2 == 1)
  {
    v3 = WBS_LOG_CHANNEL_PREFIXAutoPlay();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v4 = *(_QWORD *)(a1 + 32);
      v9 = 138543362;
      v10 = v4;
      _os_log_impl(&dword_1A3D90000, v3, OS_LOG_TYPE_INFO, "Recording auto-play signal: %{public}@", (uint8_t *)&v9, 0xCu);
    }
    v5 = WBS_LOG_CHANNEL_PREFIXAutoPlay();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
      ___ZL57sendDifferentialPrivacySignalForNormalizedHighLevelDomain17WBSAutoplaySignalP8NSStringb_block_invoke_cold_1();
    if (objc_msgSend(*(id *)(a1 + 40), "length"))
      donateEventToBiomeWithAutoPlaySignalForDomain(*(_QWORD *)(a1 + 48), *(void **)(a1 + 40), *(unsigned __int8 *)(a1 + 56));
  }
}

void OUTLINED_FUNCTION_1_3(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 0x16u);
}

uint64_t WBSTimestampForBiomeEventDonation()
{
  double v0;

  objc_msgSend(MEMORY[0x1E0C99D68], "timeIntervalSinceReferenceDate");
  return objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", ceil(v0 / 1800.0) * 30.0 * 60.0);
}

uint64_t BiomeErrorResponseForStatusCode(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1 - 400;
  if (a1 < 400)
    return 0;
  result = 1;
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = 2;
      break;
    case 2:
      result = 3;
      break;
    case 3:
      result = 4;
      break;
    case 4:
      result = 5;
      break;
    case 5:
      result = 6;
      break;
    case 6:
      result = 7;
      break;
    case 7:
      result = 8;
      break;
    case 8:
      result = 9;
      break;
    case 9:
      result = 10;
      break;
    case 10:
      result = 11;
      break;
    case 11:
      result = 12;
      break;
    case 12:
      result = 13;
      break;
    case 13:
      result = 14;
      break;
    case 14:
      result = 15;
      break;
    case 15:
      result = 16;
      break;
    case 16:
      result = 17;
      break;
    case 17:
      result = 18;
      break;
    case 18:
      result = 19;
      break;
    case 22:
      result = 20;
      break;
    case 25:
      result = 21;
      break;
    case 26:
      result = 22;
      break;
    case 28:
      result = 23;
      break;
    case 29:
      result = 24;
      break;
    case 31:
      result = 25;
      break;
    case 51:
      result = 26;
      break;
    default:
      return 0;
  }
  return result;
}

void sub_1A3DB9624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  _Block_object_dispose(&a35, 8);
  _Unwind_Resume(a1);
}

void __isIPad_block_invoke()
{
  const void *v0;
  const void *v1;

  v0 = (const void *)MGCopyAnswer();
  if (v0)
  {
    v1 = v0;
    isIPad_result = CFEqual(v0, CFSTR("iPad")) != 0;
    CFRelease(v1);
  }
}

Class __getSADeviceInfoClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  if (!SearchAssetsLibraryCore_frameworkLibrary)
  {
    v4 = xmmword_1E4B2A230;
    v5 = 0;
    SearchAssetsLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!SearchAssetsLibraryCore_frameworkLibrary)
    __getSADeviceInfoClass_block_invoke_cold_1(&v3);
  result = objc_getClass("SADeviceInfo");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getSADeviceInfoClass_block_invoke_cold_2();
  getSADeviceInfoClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1A3DBADD0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3DBAEBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3DBB04C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A3DBB2CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3DBB444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3DBB644(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3DBB8D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3DBBB1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3DBBC5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3DBBE10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3DBC088(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3DBC130(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<NSString * const {__strong}&,double>(void *a1, _QWORD *a2, void *a3, _QWORD *a4, double *a5)
{
  id v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  id v17;

  v9 = a1;
  v10 = a3;
  v17 = 0;
  v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89CC8]), "initWithDatabase:query:error:", v9, v10, &v17);
  v12 = v17;
  v13 = v12;
  if (v11)
  {
    SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * const {__strong}&,double>(v11, a4, a5);
    v14 = objc_msgSend(v11, "execute");
    objc_msgSend(v11, "invalidate");
    if ((v14 - 100) >= 2 && (_DWORD)v14 != 0)
      objc_msgSend(v9, "reportErrorWithCode:statement:error:", v14, objc_msgSend(v11, "handle"), a2);
  }
  else
  {
    if (a2)
      *a2 = objc_retainAutorelease(v12);
    v14 = objc_msgSend(v13, "code");
  }

  return v14;
}

void sub_1A3DBC328(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * const {__strong}&,double>(void *a1, _QWORD *a2, double *a3)
{
  id v5;

  v5 = a1;
  objc_msgSend(v5, "bindString:atParameterIndex:", *a2, 1);
  objc_msgSend(v5, "bindDouble:atParameterIndex:", 2, *a3);

}

void sub_1A3DBC3A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<double,double>(void *a1, _QWORD *a2, void *a3, double *a4, double *a5)
{
  id v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  id v17;

  v9 = a1;
  v10 = a3;
  v17 = 0;
  v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89CC8]), "initWithDatabase:query:error:", v9, v10, &v17);
  v12 = v17;
  v13 = v12;
  if (v11)
  {
    SafariShared::_WBSSQLiteStatementBindAllParameters<1,double,double>(v11, a4, a5);
    v14 = objc_msgSend(v11, "execute");
    objc_msgSend(v11, "invalidate");
    if ((v14 - 100) >= 2 && (_DWORD)v14 != 0)
      objc_msgSend(v9, "reportErrorWithCode:statement:error:", v14, objc_msgSend(v11, "handle"), a2);
  }
  else
  {
    if (a2)
      *a2 = objc_retainAutorelease(v12);
    v14 = objc_msgSend(v13, "code");
  }

  return v14;
}

void sub_1A3DBC4C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,double,double>(void *a1, double *a2, double *a3)
{
  id v5;

  v5 = a1;
  objc_msgSend(v5, "bindDouble:atParameterIndex:", 1, *a2);
  objc_msgSend(v5, "bindDouble:atParameterIndex:", 2, *a3);

}

void sub_1A3DBC53C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<NSString * const {__strong}&>(void *a1, _QWORD *a2, void *a3, _QWORD *a4)
{
  id v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  id v15;

  v7 = a1;
  v8 = a3;
  v15 = 0;
  v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89CC8]), "initWithDatabase:query:error:", v7, v8, &v15);
  v10 = v15;
  v11 = v10;
  if (v9)
  {
    objc_msgSend(v9, "bindString:atParameterIndex:", *a4, 1);
    v12 = objc_msgSend(v9, "execute");
    objc_msgSend(v9, "invalidate");
    if ((v12 - 100) >= 2 && (_DWORD)v12 != 0)
      objc_msgSend(v7, "reportErrorWithCode:statement:error:", v12, objc_msgSend(v9, "handle"), a2);
  }
  else
  {
    if (a2)
      *a2 = objc_retainAutorelease(v10);
    v12 = objc_msgSend(v11, "code");
  }

  return v12;
}

void sub_1A3DBC654(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A3DBC768(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3DBC7F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3DBC870(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3DBC8E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3DBC938(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3DBC99C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref(uint64_t result)
{
  id *v1;
  void *v2;

  v1 = (id *)result;
  if (*(_DWORD *)result == 1)
  {

    return WTF::fastFree((WTF *)v1, v2);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

void sub_1A3DBD040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1A3DBD234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{

  _Unwind_Resume(a1);
}

void sub_1A3DBD298(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3DBD2F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3DBD4B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, uint64_t a16, uint64_t a17, id location)
{
  void *v18;
  void *v19;
  void *v20;
  id *v21;
  void *v22;
  void *v23;

  v23 = v20;

  objc_destroyWeak(v21);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_1A3DBD630(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3DBD6C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A3DBD850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  id *v18;
  void *v19;
  uint64_t v20;
  void *v21;

  v21 = v19;

  objc_destroyWeak(v18);
  objc_destroyWeak((id *)(v20 - 56));

  _Unwind_Resume(a1);
}

void sub_1A3DBD9D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3DBDA70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3DBDD38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1A3DBE15C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1A3DBE2F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3DBE528(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3DBE5C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id WBSBrowsingAssistantContentTypeAvailabilityLabel(uint64_t a1)
{
  void *v1;

  switch(a1)
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      _WBSLocalizedString();
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    default:
      v1 = 0;
      break;
  }
  return v1;
}

void WBSBrowsingAssistantContentOptionsEnumerateCasesUsingBlock(uint64_t a1, void *a2)
{
  uint64_t i;
  unint64_t v4;
  void (**v5)(id, unint64_t);

  v5 = a2;
  if (a1)
  {
    for (i = 0; i != 7; ++i)
    {
      v4 = orderedContentOptions[i];
      if ((v4 & a1) != 0)
        v5[2](v5, 64 - __clz(v4));
    }
  }

}

void WBSBrowsingAssistantContentOptionsEnumerateOptionsUsingBlock(uint64_t a1, void *a2)
{
  uint64_t i;
  void (**v4)(void);

  v4 = a2;
  if (a1)
  {
    for (i = 0; i != 7; ++i)
    {
      if ((orderedContentOptions[i] & a1) != 0)
        v4[2]();
    }
  }

}

uint64_t WBSBrowsingAssistantContentOptionsMostProminentRemoteOption(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v1 = a1 & 0x1F;
  if ((a1 & 0x1F) == 0)
    return 0;
  v2 = 0;
  while (1)
  {
    result = orderedContentOptions[v2];
    if ((result & v1) != 0)
      break;
    if (++v2 == 7)
      return 0;
  }
  return result;
}

id getSAAssetManagerFactoryClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getSAAssetManagerFactoryClass_softClass;
  v7 = getSAAssetManagerFactoryClass_softClass;
  if (!getSAAssetManagerFactoryClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getSAAssetManagerFactoryClass_block_invoke;
    v3[3] = &unk_1E4B2A210;
    v3[4] = &v4;
    __getSAAssetManagerFactoryClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1A3DBEE3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getSAAssetManagerFactoryClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  if (!SearchAssetsLibraryCore_frameworkLibrary_0)
  {
    v4 = xmmword_1E4B2A488;
    v5 = 0;
    SearchAssetsLibraryCore_frameworkLibrary_0 = _sl_dlopen();
  }
  if (!SearchAssetsLibraryCore_frameworkLibrary_0)
    __getSAAssetManagerFactoryClass_block_invoke_cold_1(&v3);
  result = objc_getClass("SAAssetManagerFactory");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getSAAssetManagerFactoryClass_block_invoke_cold_2();
  getSAAssetManagerFactoryClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t OUTLINED_FUNCTION_4_0()
{
  return objc_opt_class();
}

const __CFString *WBSBrowsingAssistantConsentStateName(unint64_t a1)
{
  if (a1 > 2)
    return CFSTR("N/A");
  else
    return off_1E4B2A598[a1];
}

void sub_1A3DC0330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A3DC0BA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A3DC1AE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t __calculationResultNumberFormatter_block_invoke()
{
  id v0;
  void *v1;

  v0 = objc_alloc_init(MEMORY[0x1E0CB37F0]);
  v1 = (void *)calculationResultNumberFormatter_formatter;
  calculationResultNumberFormatter_formatter = (uint64_t)v0;

  objc_msgSend((id)calculationResultNumberFormatter_formatter, "setMaximumFractionDigits:", 10);
  objc_msgSend((id)calculationResultNumberFormatter_formatter, "setMaximumIntegerDigits:", 20);
  objc_msgSend((id)calculationResultNumberFormatter_formatter, "setNumberStyle:", 1);
  return objc_msgSend((id)calculationResultNumberFormatter_formatter, "setUsesGroupingSeparator:", 1);
}

uint64_t __conversionResultNumberFormatter_block_invoke()
{
  id v0;
  void *v1;

  v0 = objc_alloc_init(MEMORY[0x1E0CB37F0]);
  v1 = (void *)conversionResultNumberFormatter_formatter;
  conversionResultNumberFormatter_formatter = (uint64_t)v0;

  objc_msgSend((id)conversionResultNumberFormatter_formatter, "setMaximumFractionDigits:", 2);
  objc_msgSend((id)conversionResultNumberFormatter_formatter, "setNumberStyle:", 1);
  return objc_msgSend((id)conversionResultNumberFormatter_formatter, "setUsesGroupingSeparator:", 1);
}

void sub_1A3DC26B4(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void __evaluationOptions_block_invoke()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  _QWORD v5[6];
  _QWORD v6[7];

  v6[6] = *MEMORY[0x1E0C80C00];
  v0 = *MEMORY[0x1E0D09E60];
  v5[0] = *MEMORY[0x1E0D09E50];
  v5[1] = v0;
  v6[0] = MEMORY[0x1E0C9AAB0];
  v6[1] = MEMORY[0x1E0C9AAB0];
  v1 = *MEMORY[0x1E0D09E70];
  v5[2] = *MEMORY[0x1E0D09E68];
  v5[3] = v1;
  v6[2] = MEMORY[0x1E0C9AAB0];
  v6[3] = MEMORY[0x1E0C9AAB0];
  v2 = *MEMORY[0x1E0D09E98];
  v5[4] = *MEMORY[0x1E0D09E88];
  v5[5] = v2;
  v6[4] = MEMORY[0x1E0C9AAB0];
  v6[5] = &unk_1E4B87898;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v6, v5, 6);
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = (void *)evaluationOptions_options;
  evaluationOptions_options = v3;

}

void sub_1A3DC2BE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3DC2CC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A3DC2EAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1A3DC3010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1A3DC3108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1A3DC31C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3DC327C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A3DC34A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3DC3660(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3DC3758(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3DC37F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3DC38EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3DC39A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3DC3AB4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3DC5254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  id *v28;
  void *v29;

  objc_destroyWeak(v28);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_1A3DC56D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A3DC57AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3DC5894(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3DC5B0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3DC5BAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;

  a9.super_class = (Class)WBSCloudHistory;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

void sub_1A3DC5D4C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3DC604C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3DC61C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3DC62FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{

  _Unwind_Resume(a1);
}

void sub_1A3DC638C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{

  _Unwind_Resume(a1);
}

void sub_1A3DC6600(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__96(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__97(uint64_t a1)
{

}

void sub_1A3DC6990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{
  void *v26;

  _Unwind_Resume(a1);
}

void sub_1A3DC6AA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3DC6D64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3DC7048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{

  _Unwind_Resume(a1);
}

void sub_1A3DC71F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3DC7258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3DC72E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3DC7364(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3DC7460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1A3DC755C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1A3DC765C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3DC78A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1A3DC7A8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20)
{
  void *v20;
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

void sub_1A3DC7BEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1A3DC7CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{

  _Unwind_Resume(a1);
}

void sub_1A3DC7DC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{

  _Unwind_Resume(a1);
}

void sub_1A3DC7ED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1A3DC8000(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3DC80D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3DC82BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;

  _Unwind_Resume(a1);
}

void sub_1A3DC8454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{

  _Unwind_Resume(a1);
}

void sub_1A3DC8634(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3DC890C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3DC8F34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3DC9084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3DC90E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3DC91AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1A3DC92B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3DC939C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3DC9548(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3DC9614(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3DC97FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3DC9A50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3DC9B58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1A3DC9D2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  id *v15;

  objc_destroyWeak(v15);

  _Unwind_Resume(a1);
}

void sub_1A3DCA070(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3DCA180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  id *v14;

  objc_destroyWeak(v14);
  _Unwind_Resume(a1);
}

void sub_1A3DCA2AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  id *v14;

  objc_destroyWeak(v14);
  _Unwind_Resume(a1);
}

void sub_1A3DCA3DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3DCA5FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3DCA75C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1A3DCA800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{

  _Unwind_Resume(a1);
}

void sub_1A3DCACA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3DCAF00(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_1A3DCB160(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3DCB2D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3DCB3B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3DCB46C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3DCB644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16)
{
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1A3DCB750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18)
{

  _Unwind_Resume(a1);
}

void sub_1A3DCB980(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3DCBB6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1A3DCBCD0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3DCBE78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3DCBF6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3DCC12C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A3DCC28C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A3DCC358(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3DCC458(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3DCC614(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3DCC790(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3DCC870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1A3DCC9F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3DCCA9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3DCCEC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3DCD178(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3DCD300(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3DCD4D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1A3DCD5F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3DCD6B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3DCD77C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1A3DCD8B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1A3DCD968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1A3DCDA30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1A3DCDB64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1A3DCDD38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1A3DCDEB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3DCE18C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3DCE2F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3DCE430(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3DCE538(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1A3DCE618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3DCE820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1A3DCE8E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3DCEACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3DCEB50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3DCEBFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3DCEC9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1A3DCED5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3DCEE50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1A3DCF0C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_1A3DCF1A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id *std::unique_ptr<SafariShared::SuddenTerminationDisabler>::reset[abi:sn180100](id **a1, id *a2)
{
  id *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    SafariShared::SuddenTerminationDisabler::~SuddenTerminationDisabler(result);
    JUMPOUT(0x1A85998ACLL);
  }
  return result;
}

void SafariShared::SuddenTerminationDisabler::~SuddenTerminationDisabler(id *this)
{
  SafariShared::SuddenTerminationDisabler::enableSuddenTermination((SafariShared::SuddenTerminationDisabler *)this);

}

void sub_1A3DCF3C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

uint64_t OUTLINED_FUNCTION_8(uint64_t result, uint64_t a2, uint64_t a3, float a4)
{
  *(float *)a2 = a4;
  *(_QWORD *)(a2 + 4) = a3;
  *(_WORD *)(a2 + 12) = 2114;
  *(_QWORD *)(a2 + 14) = result;
  return result;
}

void sub_1A3DCF508(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1A3DCF5E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3DCF778(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A3DCF824(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3DCF89C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3DCFAF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;

  _Unwind_Resume(a1);
}

void sub_1A3DCFCAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3DCFE54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3DCFF5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3DD0044(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3DD012C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3DD0214(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3DD02FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3DD0614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A3DD2B4C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3DD2C0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3DD2DD4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3DD2E60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3DD2F78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3DD30EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3DD32B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3DD3308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3DD3358(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3DD33AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t WBSCloudHistoryPushAgentMain(void)
{
  void *v0;
  WBSCloudHistoryPushAgent *v1;
  void *v2;

  v0 = (void *)MEMORY[0x1A8599CE4]();
  v1 = objc_alloc_init(WBSCloudHistoryPushAgent);
  v2 = (void *)cloudHistoryPushAgent;
  cloudHistoryPushAgent = (uint64_t)v1;

  objc_autoreleasePoolPop(v0);
  WBSRunLoopRunUntilTerminationSignal();
  return 0;
}

void sub_1A3DD3514(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3DD357C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)WBSCloudHistoryPushAgentProxy;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1A3DD35F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A3DD3770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  void *v26;
  void *v27;
  uint64_t v28;

  _Block_object_dispose(&a21, 8);
  _Block_object_dispose((const void *)(v28 - 128), 8);

  _Unwind_Resume(a1);
}

void sub_1A3DD38DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  v17 = v16;

  _Unwind_Resume(a1);
}

void sub_1A3DD3954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3DD39A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3DD572C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A3DD59F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  id v17;
  NSObject *v18;
  void *v19;

  if (a2 == 1)
  {
    v17 = objc_begin_catch(exception_object);
    v18 = (id)WBS_LOG_CHANNEL_PREFIXCloudHistory();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      objc_msgSend(v17, "name");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      __73__WBSCloudHistoryStore_fetchRecordsWithServerChangeTokenData_completion___block_invoke_cold_1(v19, (uint64_t)&a17, v18);
    }

    objc_end_catch();
    JUMPOUT(0x1A3DD5950);
  }
  _Unwind_Resume(exception_object);
}

void sub_1A3DD5CD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A3DD6320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1A3DD6DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_1A3DD7FFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_1_4(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0x16u);
}

void sub_1A3DDAEC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3DDB108(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3DDB35C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3DDB56C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3DDB818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  void *v22;
  void *v23;

  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_1A3DDB92C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_1A3DDBA78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3DDBB48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3DDBDF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;

  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_1A3DDBF90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17)
{

  _Unwind_Resume(a1);
}

void sub_1A3DDC1E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3DDC364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3DDC44C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3DDC6C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28)
{
  void *v28;

  _Block_object_dispose(&a23, 8);
  _Unwind_Resume(a1);
}

void sub_1A3DDC8A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3DDC93C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3DDCA88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3DDCD54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1A3DDCF04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3DDD148(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3DDD548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1A3DDD710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1A3DDD80C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1A3DDD874(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3DDD90C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1A3DDD9BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1A3DDDB08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3DDDC24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1A3DDDCD8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1A3DDDDF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  v16 = v14;

  _Unwind_Resume(a1);
}

void sub_1A3DDDEB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_4_2(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 0xCu);
}

uint64_t OUTLINED_FUNCTION_6(uint64_t result, uint64_t a2, uint64_t a3, float a4)
{
  *(float *)a3 = a4;
  *(_QWORD *)(a3 + 4) = result;
  *(_WORD *)(a3 + 12) = 2113;
  *(_QWORD *)(a3 + 14) = a2;
  return result;
}

void sub_1A3DDE6D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3DDE7A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3DDE840(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3DDE8DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3DDE9DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1A3DDEAE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1A3DDEC64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3DDEE64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A3DDF08C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A3DDF480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1A3DDF658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1A3DDF838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A3DDFA88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  _Unwind_Resume(a1);
}

void sub_1A3DDFBA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A3DDFD10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

id addressBookStringToBeDisplayed(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  id v12;
  id v13;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (!objc_msgSend(a1, "length") && objc_msgSend(v8, "length"))
  {
    v12 = v8;
    v13 = v7;
    if (objc_msgSend(v12, "isEqualToString:", CFSTR("_$!<Home>!$_")))
    {
      if (objc_msgSend(v13, "isEqualToString:", *MEMORY[0x1E0D89D38])
        || objc_msgSend(v13, "isEqualToString:", *MEMORY[0x1E0D89D48])
        || objc_msgSend(v13, "isEqualToString:", *MEMORY[0x1E0D89D60]))
      {
LABEL_23:
        _WBSLocalizedString();
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        goto LABEL_25;
      }
    }
    else if (objc_msgSend(v12, "isEqualToString:", CFSTR("_$!<Work>!$_")))
    {
      if (objc_msgSend(v13, "isEqualToString:", *MEMORY[0x1E0D89D38])
        || objc_msgSend(v13, "isEqualToString:", *MEMORY[0x1E0D89D48])
        || objc_msgSend(v13, "isEqualToString:", *MEMORY[0x1E0D89D60]))
      {
        goto LABEL_23;
      }
    }
    else if (objc_msgSend(v12, "isEqualToString:", CFSTR("_$!<Mobile>!$_"))
           && objc_msgSend(v13, "isEqualToString:", *MEMORY[0x1E0D89D60])
           || objc_msgSend(v12, "isEqualToString:", CFSTR("iPhone"))
           && objc_msgSend(v13, "isEqualToString:", *MEMORY[0x1E0D89D60]))
    {
      goto LABEL_23;
    }
    v10 = 0;
LABEL_25:

    if (v10)
      goto LABEL_3;
  }
  objc_msgSend((id)objc_opt_class(), "localizedLowercaseContactProperty:", v7);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_3:

  return v10;
}

void sub_1A3DE36D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

id storesByProfileIdentifier(void)
{
  if (storesByProfileIdentifier(void)::onceToken != -1)
    dispatch_once(&storesByProfileIdentifier(void)::onceToken, &__block_literal_global_162);
  return (id)storesByProfileIdentifier(void)::storesByProfileIdentifier;
}

void sub_1A3DE37C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3DE39AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1A3DE3BBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id SafariShared::WBSSQLiteDatabaseFetch<double const&,double const&,NSString * const {__strong}&>(void *a1, void *a2, double *a3, double *a4, _QWORD *a5)
{
  id v9;
  id v10;
  void *v11;
  void *v12;

  v9 = a1;
  v10 = a2;
  v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89CC8]), "initWithDatabase:query:", v9, v10);
  SafariShared::_WBSSQLiteStatementBindAllParameters<1,double const&,double const&,NSString * const {__strong}&>(v11, a3, a4, a5);
  objc_msgSend(v11, "fetch");
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  return v12;
}

void sub_1A3DE3C80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3DE3DFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3DE4108(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3DE4214(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1A3DE43F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v11;

  _Unwind_Resume(a1);
}

void sub_1A3DE45C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_1A3DE47A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_1A3DE4954(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A3DE4AAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1A3DE4C9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ___ZL25storesByProfileIdentifierv_block_invoke()
{
  uint64_t v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3748], "strongToWeakObjectsMapTable");
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)storesByProfileIdentifier(void)::storesByProfileIdentifier;
  storesByProfileIdentifier(void)::storesByProfileIdentifier = v0;

}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<long &,long &,double &>(void *a1, _QWORD *a2, void *a3, _QWORD *a4, _QWORD *a5, double *a6)
{
  id v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  uint64_t v16;
  id v19;

  v11 = a1;
  v12 = a3;
  v19 = 0;
  v13 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89CC8]), "initWithDatabase:query:error:", v11, v12, &v19);
  v14 = v19;
  v15 = v14;
  if (v13)
  {
    SafariShared::_WBSSQLiteStatementBindAllParameters<1,long &,long &,double &>(v13, a4, a5, a6);
    v16 = objc_msgSend(v13, "execute");
    objc_msgSend(v13, "invalidate");
    if ((v16 - 100) >= 2 && (_DWORD)v16 != 0)
      objc_msgSend(v11, "reportErrorWithCode:statement:error:", v16, objc_msgSend(v13, "handle"), a2);
  }
  else
  {
    if (a2)
      *a2 = objc_retainAutorelease(v14);
    v16 = objc_msgSend(v15, "code");
  }

  return v16;
}

void sub_1A3DE4E58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,long &,long &,double &>(void *a1, _QWORD *a2, _QWORD *a3, double *a4)
{
  id v7;

  v7 = a1;
  objc_msgSend(v7, "bindInt64:atParameterIndex:", *a2, 1);
  SafariShared::_WBSSQLiteStatementBindAllParameters<2,long &,double &>(v7, a3, a4);

}

void sub_1A3DE4EDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<2,long &,double &>(void *a1, _QWORD *a2, double *a3)
{
  id v5;

  v5 = a1;
  objc_msgSend(v5, "bindInt64:atParameterIndex:", *a2, 2);
  objc_msgSend(v5, "bindDouble:atParameterIndex:", 3, *a3);

}

void sub_1A3DE4F40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,double const&,double const&,NSString * const {__strong}&>(void *a1, double *a2, double *a3, _QWORD *a4)
{
  id v7;

  v7 = a1;
  objc_msgSend(v7, "bindDouble:atParameterIndex:", 1, *a2);
  SafariShared::_WBSSQLiteStatementBindAllParameters<2,double const&,NSString * const {__strong}&>(v7, a3, a4);

}

void sub_1A3DE4FB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<2,double const&,NSString * const {__strong}&>(void *a1, double *a2, _QWORD *a3)
{
  id v5;

  v5 = a1;
  objc_msgSend(v5, "bindDouble:atParameterIndex:", 2, *a2);
  objc_msgSend(v5, "bindString:atParameterIndex:", *a3, 3);

}

void sub_1A3DE5014(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<NSString * {__strong}&>(void *a1, _QWORD *a2, void *a3, _QWORD *a4)
{
  id v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  id v15;

  v7 = a1;
  v8 = a3;
  v15 = 0;
  v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89CC8]), "initWithDatabase:query:error:", v7, v8, &v15);
  v10 = v15;
  v11 = v10;
  if (v9)
  {
    objc_msgSend(v9, "bindString:atParameterIndex:", *a4, 1);
    v12 = objc_msgSend(v9, "execute");
    objc_msgSend(v9, "invalidate");
    if ((v12 - 100) >= 2 && (_DWORD)v12 != 0)
      objc_msgSend(v7, "reportErrorWithCode:statement:error:", v12, objc_msgSend(v9, "handle"), a2);
  }
  else
  {
    if (a2)
      *a2 = objc_retainAutorelease(v10);
    v12 = objc_msgSend(v11, "code");
  }

  return v12;
}

void sub_1A3DE512C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void WBSContentBlockerStatisticsStoreEnumerateAllStores(void *a1)
{
  void (**v1)(id, _QWORD);
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  +[WBSContentBlockerStatisticsSQLiteStore allStores](WBSContentBlockerStatisticsSQLiteStore, "allStores");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v16, v21, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v17;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v17 != v5)
          objc_enumerationMutation(v2);
        v1[2](v1, *(_QWORD *)(*((_QWORD *)&v16 + 1) + 8 * v6++));
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v16, v21, 16);
    }
    while (v4);
  }

  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  +[WBSContentBlockerStatisticsInMemoryStore allStores](WBSContentBlockerStatisticsInMemoryStore, "allStores", 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v12, v20, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v13;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v13 != v10)
          objc_enumerationMutation(v7);
        v1[2](v1, *(_QWORD *)(*((_QWORD *)&v12 + 1) + 8 * v11++));
      }
      while (v9 != v11);
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v12, v20, 16);
    }
    while (v9);
  }

}

void WBSContentBlockerStatisticsStoreClearStoresForProfilesWithIdentifiers(void *a1)
{
  id v1;
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  NSObject *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t j;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint8_t v24[128];
  uint8_t buf[4];
  uint64_t v26;
  _BYTE v27[128];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v20, v27, 16);
  if (v2)
  {
    v4 = v2;
    v5 = *(_QWORD *)v21;
    *(_QWORD *)&v3 = 138543362;
    v15 = v3;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v21 != v5)
          objc_enumerationMutation(v1);
        v7 = *(_QWORD *)(*((_QWORD *)&v20 + 1) + 8 * i);
        if (+[WBSContentBlockerStatisticsSQLiteStore storeExistsForProfileWithIdentifier:](WBSContentBlockerStatisticsSQLiteStore, "storeExistsForProfileWithIdentifier:", v7, v15))
        {
          v8 = WBS_LOG_CHANNEL_PREFIXContentBlockers();
          if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = v15;
            v26 = v7;
            _os_log_impl(&dword_1A3D90000, v8, OS_LOG_TYPE_INFO, "Clearing store for profile %{public}@", buf, 0xCu);
          }
          +[WBSContentBlockerStatisticsSQLiteStore storeForProfileWithIdentifier:](WBSContentBlockerStatisticsSQLiteStore, "storeForProfileWithIdentifier:", v7);
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v9, "clearAllStatisticsWithCompletionHandler:", 0);

        }
      }
      v4 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v20, v27, 16);
    }
    while (v4);
  }
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  +[WBSContentBlockerStatisticsInMemoryStore allStores](WBSContentBlockerStatisticsInMemoryStore, "allStores");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v16, v24, 16);
  if (v11)
  {
    v12 = v11;
    v13 = *(_QWORD *)v17;
    do
    {
      for (j = 0; j != v12; ++j)
      {
        if (*(_QWORD *)v17 != v13)
          objc_enumerationMutation(v10);
        objc_msgSend(*(id *)(*((_QWORD *)&v16 + 1) + 8 * j), "clearAllStatisticsWithCompletionHandler:", 0);
      }
      v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v16, v24, 16);
    }
    while (v12);
  }

}

void sub_1A3DE6AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;

  _Block_object_dispose(&a32, 8);
  _Block_object_dispose((const void *)(v32 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_1A3DE734C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

void sub_1A3DE7EC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1A3DE8044(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1A3DE812C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3DE8418(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A3DE8544(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3DE85E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1A3DE867C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1A3DE8A00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

uint64_t isNilOrKindOfClass(objc_object *a1, objc_class *a2)
{
  objc_object *v2;
  char isKindOfClass;

  v2 = a1;
  if (v2)
    isKindOfClass = objc_opt_isKindOfClass();
  else
    isKindOfClass = 1;

  return isKindOfClass & 1;
}

void sub_1A3DE8AF8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3DE8B5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3DE8C68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3DE9070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13)
{
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1A3DE93A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t gregorianYearFromDate(NSDate *a1)
{
  NSDate *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;

  v1 = a1;
  if (v1)
  {
    v2 = objc_alloc(MEMORY[0x1E0C99D48]);
    v3 = (void *)objc_msgSend(v2, "initWithCalendarIdentifier:", *MEMORY[0x1E0C996C8]);
    objc_msgSend(v3, "components:fromDate:", 4, v1);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v4, "year");

  }
  else
  {
    v5 = 0;
  }

  return v5;
}

void sub_1A3DE949C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3DE952C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3DE9598(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3DE95F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3DE965C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3DE980C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_1A3DE9940(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3DE9A10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3DE9C54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  _Unwind_Resume(a1);
}

Class ___ZL21getPKVirtualCardClassv_block_invoke(uint64_t a1)
{
  Class result;

  if (!PassKitCoreLibraryCore(char **)::frameworkLibrary)
    PassKitCoreLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
  result = objc_getClass("PKVirtualCard");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  getPKVirtualCardClass(void)::softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1A3DEA08C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

void sub_1A3DEA23C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3DEA57C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{

  _Unwind_Resume(a1);
}

void sub_1A3DEA77C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1A3DEA8F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3DEAB70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_1A3DEAD24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3DEADC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3DEAE34(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3DEAE90(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3DEAFE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  void *v19;
  id *v20;
  uint64_t v21;

  objc_destroyWeak(v20);
  objc_destroyWeak((id *)(v21 - 56));

  _Unwind_Resume(a1);
}

void sub_1A3DEB19C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3DEB2A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A3DEB32C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3DEB460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1A3DEB5AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3DEB6F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1A3DEB8C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,void *a23,void *a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;

  v28 = v27;

  _Unwind_Resume(a1);
}

void sub_1A3DEBAF0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3DEBC00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  id *v14;
  uint64_t v15;

  objc_destroyWeak(v14);
  objc_destroyWeak((id *)(v15 - 40));

  _Unwind_Resume(a1);
}

void sub_1A3DEBE48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1A3DEBF54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1A3DEC0DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1A3DEC29C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22)
{
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;

  v26 = v25;

  _Unwind_Resume(a1);
}

void sub_1A3DEC3C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3DEC4C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3DEC624(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3DEC6BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3DEC8BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3DECA10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3DED0CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20)
{
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void sub_1A3DED3A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3DED5AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3DED678(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A3DED744(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3DED984(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3DEDA8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1A3DEDBFC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3DEDC4C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3DEDCE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  v11 = v10;

  _Unwind_Resume(a1);
}

void sub_1A3DEDDE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_1A3DEDE6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3DEDFF8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3DEE06C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3DEE0C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3DEE308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1A3DEE558(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3DEE6D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1A3DEE7DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3DEE88C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1A3DEE900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3DEE95C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3DEE9EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3DEEA60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3DEEAF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

Class ___ZL28getPKVirtualCardManagerClassv_block_invoke(uint64_t a1)
{
  Class result;

  if (!PassKitCoreLibraryCore(char **)::frameworkLibrary)
    PassKitCoreLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
  result = objc_getClass("PKVirtualCardManager");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  getPKVirtualCardManagerClass(void)::softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class ___ZL39getPKSafariCardNotificationManagerClassv_block_invoke(uint64_t a1)
{
  Class result;

  if (!PassKitCoreLibraryCore(char **)::frameworkLibrary)
    PassKitCoreLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
  result = objc_getClass("PKSafariCardNotificationManager");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  getPKSafariCardNotificationManagerClass(void)::softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1A3DEF624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1A3DF9654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1A3DF9A24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A3DFA350(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

Class __getOSLogStoreClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  if (!OSLogLibraryCore_frameworkLibrary)
  {
    v4 = xmmword_1E4B38A68;
    v5 = 0;
    OSLogLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!OSLogLibraryCore_frameworkLibrary)
    __getOSLogStoreClass_block_invoke_cold_1(&v3);
  result = objc_getClass("OSLogStore");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getOSLogStoreClass_block_invoke_cold_2();
  getOSLogStoreClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

id WBSLocalizedDeviceName()
{
  if (WBSLocalizedDeviceName_onceToken != -1)
    dispatch_once(&WBSLocalizedDeviceName_onceToken, &__block_literal_global_42);
  return (id)WBSLocalizedDeviceName_localizedDeviceName;
}

uint64_t WBSRingerIsSilent()
{
  return 0;
}

id WBSSystemSymbolNameForCurrentDevice()
{
  if (WBSSystemSymbolNameForCurrentDevice_onceToken != -1)
    dispatch_once(&WBSSystemSymbolNameForCurrentDevice_onceToken, &__block_literal_global_2_1);
  return (id)WBSSystemSymbolNameForCurrentDevice_result;
}

void sub_1A3DFE5F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3DFE76C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3DFE85C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<long long,long long>,void *> *>>(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t i;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *inserted;
  _QWORD *v12;

  v6 = a1[1];
  if (!v6)
    goto LABEL_9;
  for (i = 0; i != v6; *(_QWORD *)(*a1 + 8 * i++) = 0)
    ;
  v8 = (_QWORD *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      v9 = a2[2];
      v8[2] = v9;
      v8[3] = a2[3];
      v10 = (_QWORD *)*v8;
      v8[1] = v9;
      inserted = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__node_insert_multi_prepare((uint64_t)a1, v9, v8 + 2);
      std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__node_insert_multi_perform(a1, v8, inserted);
      a2 = (_QWORD *)*a2;
      v8 = v10;
      if (!v10)
        goto LABEL_9;
    }
    do
    {
      v12 = (_QWORD *)*v8;
      operator delete(v8);
      v8 = v12;
    }
    while (v12);
  }
  else
  {
LABEL_9:
    while (a2 != a3)
    {
      std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__emplace_multi<std::pair<long long const,long long> const&>(a1, (_OWORD *)a2 + 1);
      a2 = (_QWORD *)*a2;
    }
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v6;
  float v7;
  float v8;
  uint64_t v9;
  _BOOL8 v10;
  size_t v11;
  unint64_t v12;
  size_t v13;
  uint8x8_t v14;
  unint64_t v15;
  _QWORD *v16;
  int v17;
  _QWORD *result;
  unint64_t v19;
  unint64_t v20;
  _BOOL4 v21;
  int v22;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    v9 = 2 * v6;
    v10 = v6 < 3 || (v6 & (v6 - 1)) != 0;
    v11 = v10 | v9;
    v12 = vcvtps_u32_f32(v7 / v8);
    if (v11 <= v12)
      v13 = v12;
    else
      v13 = v11;
    std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__rehash<false>(a1, v13);
    v6 = *(_QWORD *)(a1 + 8);
  }
  v14 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    v15 = a2;
    if (v6 <= a2)
      v15 = a2 % v6;
  }
  else
  {
    v15 = (v6 - 1) & a2;
  }
  v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v15);
  if (!v16)
    return 0;
  v17 = 0;
  do
  {
    result = v16;
    v16 = (_QWORD *)*v16;
    if (!v16)
      break;
    v19 = v16[1];
    if (v14.u32[0] > 1uLL)
    {
      v20 = v16[1];
      if (v19 >= v6)
        v20 = v19 % v6;
    }
    else
    {
      v20 = v19 & (v6 - 1);
    }
    if (v20 != v15)
      break;
    v21 = v19 == a2 && v16[2] == *a3;
    v22 = v17 & !v21;
    v17 |= v21;
  }
  while (v22 != 1);
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__node_insert_multi_perform(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  if (!a3)
  {
    *a2 = result[2];
    result[2] = a2;
    *(_QWORD *)(*result + 8 * v4) = result + 2;
    if (!*a2)
      goto LABEL_19;
    v6 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v3)
        v6 %= *(_QWORD *)&v3;
    }
    else
    {
      v6 &= *(_QWORD *)&v3 - 1;
    }
LABEL_18:
    *(_QWORD *)(*result + 8 * v6) = a2;
    goto LABEL_19;
  }
  *a2 = *a3;
  *a3 = a2;
  if (*a2)
  {
    v6 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v3)
        v6 %= *(_QWORD *)&v3;
    }
    else
    {
      v6 &= *(_QWORD *)&v3 - 1;
    }
    if (v6 != v4)
      goto LABEL_18;
  }
LABEL_19:
  ++result[3];
  return result;
}

void std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__rehash<false>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__do_rehash<false>(a1, prime);
  }
}

void std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__do_rehash<false>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *i;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:sn180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      for (i = (_QWORD *)*v7; *v7; i = (_QWORD *)*v7)
      {
        v12 = i[1];
        if (v9.u32[0] > 1uLL)
        {
          if (v12 >= a2)
            v12 %= a2;
        }
        else
        {
          v12 &= a2 - 1;
        }
        if (v12 == v8)
        {
          v7 = i;
        }
        else
        {
          v13 = i;
          if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
          {
            do
            {
              v14 = v13;
              v13 = (_QWORD *)*v13;
            }
            while (v13 && i[2] == v13[2]);
            *v7 = v13;
            *v14 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = i;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
            v7 = i;
            v8 = v12;
          }
        }
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void std::__throw_bad_array_new_length[abi:sn180100]()
{
  abort();
}

_QWORD *std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__emplace_multi<std::pair<long long const,long long> const&>(_QWORD *a1, _OWORD *a2)
{
  _QWORD *v4;
  unint64_t v5;
  _QWORD *inserted;

  v4 = operator new(0x20uLL);
  *((_OWORD *)v4 + 1) = *a2;
  v5 = v4[2];
  *v4 = 0;
  v4[1] = v5;
  inserted = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__node_insert_multi_prepare((uint64_t)a1, v5, v4 + 2);
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__node_insert_multi_perform(a1, v4, inserted);
  return v4;
}

void sub_1A3DFEE90(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::clear((_QWORD *)a1);
  v4 = *a2;
  *a2 = 0;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v8 = a2[2];
  v7 = a2 + 2;
  v6 = v8;
  v9 = *(v7 - 1);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  v10 = v7[1];
  *(_QWORD *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    v11 = *(_QWORD *)(v6 + 8);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v11 %= v12;
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = a1 + 16;
    *v7 = 0;
    v7[1] = 0;
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::clear(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t i;

  if (result[3])
  {
    v1 = result;
    result = (_QWORD *)result[2];
    if (result)
    {
      do
      {
        v2 = (_QWORD *)*result;
        operator delete(result);
        result = v2;
      }
      while (v2);
    }
    v1[2] = 0;
    v3 = v1[1];
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(*v1 + 8 * i) = 0;
    }
    v1[3] = 0;
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__emplace_unique_key_args<long long,std::pair<long long,long long>>(uint64_t a1, unint64_t *a2, _OWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v6;
  *((_OWORD *)i + 1) = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *i = *v19;
LABEL_38:
    *v19 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v20 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1A3DFF1AC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

id convertSafariProfileIdentifierToScreenTimeProfileIdentifier(void *a1)
{
  id v1;
  id v2;

  v1 = a1;
  if (objc_msgSend(v1, "length") && (objc_msgSend(v1, "isEqualToString:", *MEMORY[0x1E0D89E20]) & 1) == 0)
    v2 = v1;
  else
    v2 = 0;

  return v2;
}

void sub_1A3E00350(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t handleNotification(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "_didReceiveNotification:", 0);
}

double SafariShared::ExtensionURLTranslator::ExtensionURLTranslator(SafariShared::ExtensionURLTranslator *this)
{
  double result;

  *(_QWORD *)this = 850045863;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = 850045863;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  return result;
}

double SafariShared::ExtensionURLTranslator::shared(SafariShared::ExtensionURLTranslator *this)
{
  uint64_t v1;
  double result;

  {
    v1 = operator new();
    *(_QWORD *)v1 = 850045863;
    result = 0.0;
    *(_OWORD *)(v1 + 8) = 0u;
    *(_OWORD *)(v1 + 24) = 0u;
    *(_OWORD *)(v1 + 40) = 0u;
    *(_OWORD *)(v1 + 56) = 0u;
    *(_OWORD *)(v1 + 72) = 0u;
    SafariShared::ExtensionURLTranslator::shared(void)::shared = v1;
  }
  return result;
}

void SafariShared::ExtensionURLTranslator::addExtension(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  _QWORD v24[3];

  v24[2] = *MEMORY[0x1E0C80C00];
  v9 = a2;
  v10 = a3;
  v11 = a4;
  v12 = a5;
  std::mutex::lock((std::mutex *)a1);
  if (!*(_QWORD *)(a1 + 64))
  {
    v13 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v14 = *(void **)(a1 + 64);
    *(_QWORD *)(a1 + 64) = v13;

  }
  objc_msgSend(v9, "host");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "safari_path");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v24[0] = v16;
  v24[1] = v10;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v24, 2);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 64), "setObject:forKeyedSubscript:", v17, v15);

  if (objc_msgSend(v11, "length"))
  {
    if (!*(_QWORD *)(a1 + 80))
    {
      objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
      v18 = objc_claimAutoreleasedReturnValue();
      v19 = *(void **)(a1 + 80);
      *(_QWORD *)(a1 + 80) = v18;

    }
    v20 = (void *)objc_msgSend(v11, "copy");
    objc_msgSend(*(id *)(a1 + 80), "setObject:forKeyedSubscript:", v20, v15);

  }
  if (v12)
  {
    v21 = *(void **)(a1 + 72);
    if (!v21)
    {
      objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", 1);
      v22 = objc_claimAutoreleasedReturnValue();
      v23 = *(void **)(a1 + 72);
      *(_QWORD *)(a1 + 72) = v22;

      v21 = *(void **)(a1 + 72);
    }
    objc_msgSend(v21, "setObject:forKeyedSubscript:", v12, v15);
  }

  std::mutex::unlock((std::mutex *)a1);
}

void sub_1A3E0166C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  std::mutex *v4;
  void *v5;

  std::mutex::unlock(v4);

  _Unwind_Resume(a1);
}

void SafariShared::ExtensionURLTranslator::removeExtension(SafariShared::ExtensionURLTranslator *this, NSURL *a2)
{
  void *v3;
  NSURL *v4;

  v4 = a2;
  std::mutex::lock((std::mutex *)this);
  -[NSURL host](v4, "host");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*((id *)this + 8), "removeObjectForKey:", v3);
  objc_msgSend(*((id *)this + 9), "removeObjectForKey:", v3);
  objc_msgSend(*((id *)this + 10), "removeObjectForKey:", v3);

  std::mutex::unlock((std::mutex *)this);
}

void sub_1A3E01758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  std::mutex *v10;

  std::mutex::unlock(v10);

  _Unwind_Resume(a1);
}

id SafariShared::ExtensionURLTranslator::fileURLForExtensionURL(uint64_t a1, void *a2, int a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  _QWORD block[4];
  id v24;
  id v25;
  id v26;

  v5 = a2;
  objc_msgSend(v5, "host");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (v6)
  {
    std::mutex::lock((std::mutex *)a1);
    objc_msgSend(*(id *)(a1 + 64), "objectForKeyedSubscript:", v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    std::mutex::unlock((std::mutex *)a1);
    if (v7)
    {
      objc_msgSend(v7, "objectAtIndexedSubscript:", 0);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "objectAtIndexedSubscript:", 1);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "safari_path");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      if ((objc_msgSend(v8, "hasPrefix:", v22) & 1) != 0)
      {
        objc_msgSend(v8, "substringFromIndex:", objc_msgSend(v22, "length"));
        v9 = objc_claimAutoreleasedReturnValue();

        v20 = (void *)v9;
        objc_msgSend(MEMORY[0x1E0C99E98], "safari_URLWithDataAsString:relativeToURL:", v9, v21);
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v19, "URLByStandardizingPath");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "safari_path");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v21, "URLByStandardizingPath");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "safari_path");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        LOBYTE(v9) = objc_msgSend(v11, "hasPrefix:", v13);

        if ((v9 & 1) != 0)
        {
          v14 = v19;
          if (a3)
          {
            std::mutex::lock((std::mutex *)a1);
            objc_msgSend(*(id *)(a1 + 72), "objectForKeyedSubscript:", v6);
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            v16 = v15;
            if (v15)
            {
              block[0] = MEMORY[0x1E0C809B0];
              block[1] = 3221225472;
              block[2] = ___ZNK12SafariShared22ExtensionURLTranslator22fileURLForExtensionURLEP5NSURLNS0_23VerifyExtensionResourceE_block_invoke;
              block[3] = &unk_1E4B2B2A8;
              v24 = v15;
              v25 = v5;
              v26 = v19;
              dispatch_async(MEMORY[0x1E0C80D38], block);

            }
            v17 = v19;
            std::mutex::unlock((std::mutex *)a1);
          }
          else
          {
            v17 = v19;
          }
        }
        else
        {
          v17 = 0;
          v14 = v19;
        }

        v8 = v20;
      }
      else
      {
        v17 = 0;
      }

    }
    else
    {
      v17 = 0;
    }

  }
  else
  {
    v17 = 0;
  }

  return v17;
}

void sub_1A3E019F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;
  std::mutex *v16;

  std::mutex::unlock(v16);

  _Unwind_Resume(a1);
}

void sub_1A3E01AB0()
{
  JUMPOUT(0x1A3E01AA4);
}

id SafariShared::ExtensionURLTranslator::decodeAndResolveFileURL(SafariShared::ExtensionURLTranslator *this, NSURL *a2)
{
  -[NSURL URLByStandardizingPath](a2, "URLByStandardizingPath");
  return (id)objc_claimAutoreleasedReturnValue();
}

uint64_t ___ZNK12SafariShared22ExtensionURLTranslator22fileURLForExtensionURLEP5NSURLNS0_23VerifyExtensionResourceE_block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "verifyExtensionResourceAtExtensionURL:fileURL:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

id SafariShared::ExtensionURLTranslator::displayNameForExtensionURL(SafariShared::ExtensionURLTranslator *this, NSURL *a2)
{
  void *v3;
  void *v4;

  -[NSURL host](a2, "host");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    std::mutex::lock((std::mutex *)this);
    objc_msgSend(*((id *)this + 10), "objectForKeyedSubscript:", v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    std::mutex::unlock((std::mutex *)this);
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

void sub_1A3E01B50(_Unwind_Exception *a1)
{
  void *v1;
  std::mutex *v2;

  std::mutex::unlock(v2);

  _Unwind_Resume(a1);
}

uint64_t WBSFieldLabelPatternMatcherArrayGetCount(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t WBSFieldLabelPatternMatcherArrayGetPatternMatcherAtIndex(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 8) + 40 * a2;
}

void WBSFieldLabelPatternMatcherArrayFree(WTF **a1, void *a2)
{
  void *v3;
  void *v4;

  WTF::fastFree(a1[1], a2);
  WTF::fastFree(a1[2], v3);
  WTF::fastFree(a1[3], v4);
  JUMPOUT(0x1A85998ACLL);
}

uint64_t WBSFieldLabelPatternMatcherSearchReverse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  uint64_t v4;
  WTF *v5;
  _BYTE v8[8];
  WTF *v9;
  int v10;
  uint64_t v11;

  SafariShared::FieldLabelPatternMatcher::FieldLabelPatternMatcher(v8, a1, a2, a3);
  v4 = SafariShared::FieldLabelPatternMatcher::searchReverse((SafariShared::FieldLabelPatternMatcher *)v8);
  v5 = v9;
  if (&v11 != (uint64_t *)v9 && v9 != 0)
  {
    v9 = 0;
    v10 = 0;
    WTF::fastFree(v5, v3);
  }
  return v4;
}

uint64_t WBSFieldLabelPatternMatcherFindLongestMatch(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  uint64_t v4;
  WTF *v5;
  _BYTE v8[8];
  WTF *v9;
  int v10;
  uint64_t v11;

  SafariShared::FieldLabelPatternMatcher::FieldLabelPatternMatcher(v8, a1, a2, a3);
  v4 = SafariShared::FieldLabelPatternMatcher::longestMatch((SafariShared::FieldLabelPatternMatcher *)v8);
  v5 = v9;
  if (&v11 != (uint64_t *)v9 && v9 != 0)
  {
    v9 = 0;
    v10 = 0;
    WTF::fastFree(v5, v3);
  }
  return v4;
}

void sub_1A3E01D30(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E01F30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1A3E022F0(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,WTF *a32,int a33,WTF *a34,int a35,WTF *a36,int a37)
{
  if (a32)
    WTF::fastFree(a32, a2);
  if (a34)
    WTF::fastFree(a34, a2);
  if (a36)
    WTF::fastFree(a36, a2);

  _Unwind_Resume(a1);
}

uint64_t addInitializersForTrie(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  int v6;
  unint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  __int16 v13;
  int v14;
  _WORD *v15;
  void *v16;
  int v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  int v21;
  WTF *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  __int16 v28;
  int v30;
  int v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  WTF *v36;
  uint64_t v37;
  _BYTE v38[128];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  if (objc_msgSend(v5, "count"))
  {
    v6 = *(_DWORD *)(a2 + 12);
    v36 = 0;
    v37 = 0;
    v7 = objc_msgSend(v5, "count");
    if (v7)
    {
      if (v7 >> 31)
      {
        __break(0xC471u);
        goto LABEL_35;
      }
      LODWORD(v37) = v7;
      v36 = (WTF *)WTF::fastMalloc((WTF *)(2 * v7));
    }
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    objc_msgSend(v5, "allKeys");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "sortedArrayUsingSelector:", sel_compare_);
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v32, v38, 16);
    if (v10)
    {
      v11 = *(_QWORD *)v33;
      do
      {
        for (i = 0; i != v10; ++i)
        {
          if (*(_QWORD *)v33 != v11)
            objc_enumerationMutation(v9);
          v13 = objc_msgSend(*(id *)(*((_QWORD *)&v32 + 1) + 8 * i), "unsignedShortValue");
          LOWORD(v31) = v13;
          v14 = HIDWORD(v37);
          if (HIDWORD(v37) == (_DWORD)v37)
          {
            v15 = (_WORD *)WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v36, HIDWORD(v37) + 1, (unint64_t)&v31);
            v14 = HIDWORD(v37);
            *((_WORD *)v36 + HIDWORD(v37)) = *v15;
          }
          else
          {
            *((_WORD *)v36 + HIDWORD(v37)) = v13;
          }
          HIDWORD(v37) = v14 + 1;
        }
        v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v32, v38, 16);
      }
      while (v10);
    }

    v17 = *(_DWORD *)(a3 + 12);
    LOWORD(v31) = WORD2(v37);
    HIWORD(v31) = v17;
    v18 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v18 == *(_DWORD *)(a2 + 8))
    {
      v19 = (int *)WTF::Vector<SafariShared::FieldLabelPatternMatcher::DFA::State,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v18 + 1, (unint64_t)&v31);
      v18 = *(unsigned int *)(a2 + 12);
      v20 = *(_QWORD *)a2;
      v21 = *v19;
    }
    else
    {
      v20 = *(_QWORD *)a2;
      v21 = v31;
    }
    *(_DWORD *)(v20 + 4 * v18) = v21;
    ++*(_DWORD *)(a2 + 12);
    v22 = v36;
    if (HIDWORD(v37))
    {
      v23 = *(_DWORD *)(a3 + 12);
      v24 = 2 * HIDWORD(v37);
      do
      {
        LOWORD(v30) = *(_WORD *)v22;
        if (v23 == *(_DWORD *)(a3 + 8))
          *(_DWORD *)(*(_QWORD *)a3 + 4 * *(unsigned int *)(a3 + 12)) = *(_DWORD *)WTF::Vector<SafariShared::FieldLabelPatternMatcher::DFA::State,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v23 + 1, (unint64_t)&v30);
        else
          *(_DWORD *)(*(_QWORD *)a3 + 4 * v23) = v30;
        v23 = *(_DWORD *)(a3 + 12) + 1;
        *(_DWORD *)(a3 + 12) = v23;
        v22 = (WTF *)((char *)v22 + 2);
        v24 -= 2;
      }
      while (v24);
      v22 = v36;
      if (HIDWORD(v37))
      {
        v25 = 2 * HIDWORD(v37);
        while (1)
        {
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedShort:", *(unsigned __int16 *)v22);
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v5, "objectForKey:", v26);
          v27 = (void *)objc_claimAutoreleasedReturnValue();

          v28 = addInitializersForTrie(v27, a2, a3);
          if (*(_DWORD *)(a3 + 12) <= (unsigned __int16)v17)
            break;
          *(_WORD *)(*(_QWORD *)a3 + 4 * (unsigned __int16)v17 + 2) = v28;

          LOWORD(v17) = v17 + 1;
          v22 = (WTF *)((char *)v22 + 2);
          v25 -= 2;
          if (!v25)
          {
            v22 = v36;
            goto LABEL_30;
          }
        }
        __break(0xC471u);
LABEL_35:
        JUMPOUT(0x1A3E026A8);
      }
    }
LABEL_30:
    if (v22)
    {
      v36 = 0;
      LODWORD(v37) = 0;
      WTF::fastFree(v22, v16);
    }
  }
  else
  {
    LOWORD(v6) = -1;
  }

  return (unsigned __int16)v6;
}

void sub_1A3E026B4(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF *a19, int a20)
{
  void *v20;

  if (a19)
    WTF::fastFree(a19, a2);

  _Unwind_Resume(a1);
}

unint64_t WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 2 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  v2 = a2;
  if (!(a2 >> 31))
  {
    v3 = result;
    v4 = *(void **)result;
    v5 = *(unsigned int *)(result + 12);
    v6 = (void *)WTF::fastMalloc((WTF *)(2 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(_QWORD *)v3 = v6;
    memcpy(v6, v4, 2 * v5);
    if (v4)
    {
      if (*(void **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree((WTF *)v4, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

unint64_t WTF::Vector<SafariShared::FieldLabelPatternMatcher::DFA::State,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 4 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<SafariShared::FieldLabelPatternMatcher::DFA::State,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<SafariShared::FieldLabelPatternMatcher::DFA::State,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<SafariShared::FieldLabelPatternMatcher::DFA::State,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  v2 = a2;
  if (!(a2 >> 30))
  {
    v3 = result;
    v4 = *(void **)result;
    v5 = *(unsigned int *)(result + 12);
    v6 = (void *)WTF::fastMalloc((WTF *)(4 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(_QWORD *)v3 = v6;
    memcpy(v6, v4, 4 * v5);
    if (v4)
    {
      if (*(void **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree((WTF *)v4, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

unint64_t WTF::Vector<SafariShared::FieldLabelPatternMatcher::DFA,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 40 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<SafariShared::FieldLabelPatternMatcher::DFA,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<SafariShared::FieldLabelPatternMatcher::DFA,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<SafariShared::FieldLabelPatternMatcher::DFA,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  int v5;
  void *v6;
  void *v7;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  if (a2 < 0x6666667)
  {
    v2 = result;
    v3 = *(void **)result;
    v4 = *(unsigned int *)(result + 12);
    v5 = 40 * a2;
    v6 = (void *)WTF::fastMalloc((WTF *)(40 * a2));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x28;
    *(_QWORD *)v2 = v6;
    memcpy(v6, v3, 40 * v4);
    if (v3)
    {
      if (*(void **)v2 == v3)
      {
        *(_QWORD *)v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      WTF::fastFree((WTF *)v3, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

unsigned int *WTF::Vector<SafariShared::FieldLabelPatternMatcher::DFA::State,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, unint64_t a2)
{
  unsigned int *v2;

  if (result[2] > a2)
  {
    v2 = result;
    if (result[3] > a2)
      result[3] = a2;
    result = *(unsigned int **)result;
    if (a2)
    {
      if (a2 >> 62)
      {
        __break(0xC471u);
      }
      else
      {
        v2[2] = a2;
        result = (unsigned int *)WTF::fastRealloc((WTF *)result, (void *)(4 * a2));
        *(_QWORD *)v2 = result;
      }
    }
    else if (result)
    {
      *(_QWORD *)v2 = 0;
      v2[2] = 0;
      return (unsigned int *)WTF::fastFree((WTF *)result, 0);
    }
  }
  return result;
}

unsigned int *WTF::Vector<SafariShared::FieldLabelPatternMatcher::DFA,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, unint64_t a2)
{
  unsigned int *v2;

  if (result[2] > a2)
  {
    v2 = result;
    if (result[3] > a2)
      result[3] = a2;
    result = *(unsigned int **)result;
    if (a2)
    {
      if (a2 >= 0x666666666666667)
      {
        __break(0xC471u);
      }
      else
      {
        v2[2] = a2;
        result = (unsigned int *)WTF::fastRealloc((WTF *)result, (void *)(40 * a2));
        *(_QWORD *)v2 = result;
      }
    }
    else if (result)
    {
      *(_QWORD *)v2 = 0;
      v2[2] = 0;
      return (unsigned int *)WTF::fastFree((WTF *)result, 0);
    }
  }
  return result;
}

void sub_1A3E03C8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E03D64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1A3E03E0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E03EB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1A3E03FAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3E04070(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1A3E041E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1A3E042A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E0470C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E0480C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3E04928(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3E04BDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A3E04C24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3E04CB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E04FD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;

  _Unwind_Resume(a1);
}

void sub_1A3E0529C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;

  MEMORY[0x1A85998AC](v6, 0x1080C40D2F62047);

  _Unwind_Resume(a1);
}

void sub_1A3E05428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22)
{

  _Unwind_Resume(a1);
}

void sub_1A3E05528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1A3E05794(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  _Unwind_Resume(a1);
}

void sub_1A3E058D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;

  MEMORY[0x1A85998AC](v4, 0x1080C40D2F62047);

  _Unwind_Resume(a1);
}

void sub_1A3E05C88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;

  MEMORY[0x1A85998AC](v4, 0x1080C40D2F62047);

  _Unwind_Resume(a1);
}

void sub_1A3E06040(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;

  MEMORY[0x1A85998AC](v4, 0x1080C40D2F62047);

  _Unwind_Resume(a1);
}

void sub_1A3E062AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;

  MEMORY[0x1A85998AC](v5, 0x1080C40D2F62047);

  _Unwind_Resume(a1);
}

void sub_1A3E0642C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22)
{

  _Unwind_Resume(a1);
}

void sub_1A3E06510(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1A3E0669C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;

  MEMORY[0x1A85998AC](v8, 0x1080C40D2F62047);

  _Unwind_Resume(a1);
}

void sub_1A3E0684C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,void *a22)
{

  _Unwind_Resume(a1);
}

void sub_1A3E06990(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A3E06BAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;

  MEMORY[0x1A85998AC](v5, 0x1080C40D2F62047);

  _Unwind_Resume(a1);
}

void sub_1A3E06D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22)
{

  _Unwind_Resume(a1);
}

void sub_1A3E06E20(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  MEMORY[0x1A85998AC](v2, 0x1080C40D2F62047);

  _Unwind_Resume(a1);
}

void sub_1A3E0701C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3E07128(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E07214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1A3E072F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E07440(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E07700(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E07908(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E07A38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E07C10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E08008(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1A3E080F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E0816C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  SafariShared::SuddenTerminationDisabler::~SuddenTerminationDisabler((id *)va);
  _Unwind_Resume(a1);
}

void sub_1A3E08338(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1A3E0854C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E08670(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3E08890(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3E08AC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3E08B8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3E08DB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_1A3E08F08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3E08FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void sub_1A3E09268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A3E095B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1A3E0991C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A3E09A28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A3E09E10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1A3E0A304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  v15 = v12;

  _Unwind_Resume(a1);
}

id SafariShared::WBSSQLiteDatabaseFetch<long long &,NSString * {__strong}&>(void *a1, void *a2, _QWORD *a3, _QWORD *a4)
{
  id v7;
  id v8;
  void *v9;
  void *v10;

  v7 = a1;
  v8 = a2;
  v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89CC8]), "initWithDatabase:query:", v7, v8);
  SafariShared::_WBSSQLiteStatementBindAllParameters<1,long long &,NSString * {__strong}&>(v9, a3, a4);
  objc_msgSend(v9, "fetch");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

void sub_1A3E0A454(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3E0A750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

id SafariShared::WBSSQLiteDatabaseFetch<long long &>(void *a1, void *a2, _QWORD *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;

  v5 = a1;
  v6 = a2;
  v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89CC8]), "initWithDatabase:query:", v5, v6);
  objc_msgSend(v7, "bindInt64:atParameterIndex:", *a3, 1);
  objc_msgSend(v7, "fetch");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

void sub_1A3E0A878(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3E0AA24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;

  MEMORY[0x1A85998AC](v16, 0x1080C40D2F62047);

  _Unwind_Resume(a1);
}

void sub_1A3E0AC18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22,void *a23,void *a24)
{

  _Unwind_Resume(a1);
}

void sub_1A3E0AD24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<NSString * {__strong}&,NSString * {__strong}&>(void *a1, _QWORD *a2, void *a3, _QWORD *a4, _QWORD *a5)
{
  id v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  id v17;

  v9 = a1;
  v10 = a3;
  v17 = 0;
  v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89CC8]), "initWithDatabase:query:error:", v9, v10, &v17);
  v12 = v17;
  v13 = v12;
  if (v11)
  {
    SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * {__strong}&,NSString * {__strong}&>(v11, a4, a5);
    v14 = objc_msgSend(v11, "execute");
    objc_msgSend(v11, "invalidate");
    if ((v14 - 100) >= 2 && (_DWORD)v14 != 0)
      objc_msgSend(v9, "reportErrorWithCode:statement:error:", v14, objc_msgSend(v11, "handle"), a2);
  }
  else
  {
    if (a2)
      *a2 = objc_retainAutorelease(v12);
    v14 = objc_msgSend(v13, "code");
  }

  return v14;
}

void sub_1A3E0AEAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * {__strong}&,NSString * {__strong}&>(void *a1, _QWORD *a2, _QWORD *a3)
{
  id v5;

  v5 = a1;
  objc_msgSend(v5, "bindString:atParameterIndex:", *a2, 1);
  objc_msgSend(v5, "bindString:atParameterIndex:", *a3, 2);

}

void sub_1A3E0AF24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<long long &,NSString * {__strong}&>(void *a1, _QWORD *a2, void *a3, _QWORD *a4, _QWORD *a5)
{
  id v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  id v17;

  v9 = a1;
  v10 = a3;
  v17 = 0;
  v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89CC8]), "initWithDatabase:query:error:", v9, v10, &v17);
  v12 = v17;
  v13 = v12;
  if (v11)
  {
    SafariShared::_WBSSQLiteStatementBindAllParameters<1,long long &,NSString * {__strong}&>(v11, a4, a5);
    v14 = objc_msgSend(v11, "execute");
    objc_msgSend(v11, "invalidate");
    if ((v14 - 100) >= 2 && (_DWORD)v14 != 0)
      objc_msgSend(v9, "reportErrorWithCode:statement:error:", v14, objc_msgSend(v11, "handle"), a2);
  }
  else
  {
    if (a2)
      *a2 = objc_retainAutorelease(v12);
    v14 = objc_msgSend(v13, "code");
  }

  return v14;
}

void sub_1A3E0B048(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,long long &,NSString * {__strong}&>(void *a1, _QWORD *a2, _QWORD *a3)
{
  id v5;

  v5 = a1;
  objc_msgSend(v5, "bindInt64:atParameterIndex:", *a2, 1);
  objc_msgSend(v5, "bindString:atParameterIndex:", *a3, 2);

}

void sub_1A3E0B0C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<NSString * {__strong}&,long long &,NSString * {__strong}&>(void *a1, _QWORD *a2, void *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6)
{
  id v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  uint64_t v16;
  id v19;

  v11 = a1;
  v12 = a3;
  v19 = 0;
  v13 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89CC8]), "initWithDatabase:query:error:", v11, v12, &v19);
  v14 = v19;
  v15 = v14;
  if (v13)
  {
    SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * {__strong}&,long long &,NSString * {__strong}&>(v13, a4, a5, a6);
    v16 = objc_msgSend(v13, "execute");
    objc_msgSend(v13, "invalidate");
    if ((v16 - 100) >= 2 && (_DWORD)v16 != 0)
      objc_msgSend(v11, "reportErrorWithCode:statement:error:", v16, objc_msgSend(v13, "handle"), a2);
  }
  else
  {
    if (a2)
      *a2 = objc_retainAutorelease(v14);
    v16 = objc_msgSend(v15, "code");
  }

  return v16;
}

void sub_1A3E0B1EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * {__strong}&,long long &,NSString * {__strong}&>(void *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  id v7;

  v7 = a1;
  objc_msgSend(v7, "bindString:atParameterIndex:", *a2, 1);
  SafariShared::_WBSSQLiteStatementBindAllParameters<2,long long &,NSString * {__strong}&>(v7, a3, a4);

}

void sub_1A3E0B270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<2,long long &,NSString * {__strong}&>(void *a1, _QWORD *a2, _QWORD *a3)
{
  id v5;

  v5 = a1;
  objc_msgSend(v5, "bindInt64:atParameterIndex:", *a2, 2);
  objc_msgSend(v5, "bindString:atParameterIndex:", *a3, 3);

}

void sub_1A3E0B2D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<long long &,NSString * {__strong}&,NSString * {__strong}&,double &>(void *a1, _QWORD *a2, void *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, double *a7)
{
  id v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  uint64_t v18;
  id v21;

  v13 = a1;
  v14 = a3;
  v21 = 0;
  v15 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89CC8]), "initWithDatabase:query:error:", v13, v14, &v21);
  v16 = v21;
  v17 = v16;
  if (v15)
  {
    SafariShared::_WBSSQLiteStatementBindAllParameters<1,long long &,NSString * {__strong}&,NSString * {__strong}&,double &>(v15, a4, a5, a6, a7);
    v18 = objc_msgSend(v15, "execute");
    objc_msgSend(v15, "invalidate");
    if ((v18 - 100) >= 2 && (_DWORD)v18 != 0)
      objc_msgSend(v13, "reportErrorWithCode:statement:error:", v18, objc_msgSend(v15, "handle"), a2);
  }
  else
  {
    if (a2)
      *a2 = objc_retainAutorelease(v16);
    v18 = objc_msgSend(v17, "code");
  }

  return v18;
}

void sub_1A3E0B410(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,long long &,NSString * {__strong}&,NSString * {__strong}&,double &>(void *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, double *a5)
{
  id v9;

  v9 = a1;
  objc_msgSend(v9, "bindInt64:atParameterIndex:", *a2, 1);
  SafariShared::_WBSSQLiteStatementBindAllParameters<2,NSString * {__strong}&,NSString * {__strong}&,double &>(v9, a3, a4, a5);

}

void sub_1A3E0B49C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<2,NSString * {__strong}&,NSString * {__strong}&,double &>(void *a1, _QWORD *a2, _QWORD *a3, double *a4)
{
  id v7;

  v7 = a1;
  objc_msgSend(v7, "bindString:atParameterIndex:", *a2, 2);
  SafariShared::_WBSSQLiteStatementBindAllParameters<3,NSString * {__strong}&,double &>(v7, a3, a4);

}

void sub_1A3E0B50C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<3,NSString * {__strong}&,double &>(void *a1, _QWORD *a2, double *a3)
{
  id v5;

  v5 = a1;
  objc_msgSend(v5, "bindString:atParameterIndex:", *a2, 3);
  objc_msgSend(v5, "bindDouble:atParameterIndex:", 4, *a3);

}

void sub_1A3E0B570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<long long &,NSString * {__strong}&,NSString * {__strong}&>(void *a1, _QWORD *a2, void *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6)
{
  id v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  uint64_t v16;
  id v19;

  v11 = a1;
  v12 = a3;
  v19 = 0;
  v13 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89CC8]), "initWithDatabase:query:error:", v11, v12, &v19);
  v14 = v19;
  v15 = v14;
  if (v13)
  {
    SafariShared::_WBSSQLiteStatementBindAllParameters<1,long long &,NSString * {__strong}&,NSString * {__strong}&>(v13, a4, a5, a6);
    v16 = objc_msgSend(v13, "execute");
    objc_msgSend(v13, "invalidate");
    if ((v16 - 100) >= 2 && (_DWORD)v16 != 0)
      objc_msgSend(v11, "reportErrorWithCode:statement:error:", v16, objc_msgSend(v13, "handle"), a2);
  }
  else
  {
    if (a2)
      *a2 = objc_retainAutorelease(v14);
    v16 = objc_msgSend(v15, "code");
  }

  return v16;
}

void sub_1A3E0B69C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,long long &,NSString * {__strong}&,NSString * {__strong}&>(void *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  id v7;

  v7 = a1;
  objc_msgSend(v7, "bindInt64:atParameterIndex:", *a2, 1);
  SafariShared::_WBSSQLiteStatementBindAllParameters<2,NSString * {__strong}&,NSString * {__strong}&>(v7, a3, a4);

}

void sub_1A3E0B720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<2,NSString * {__strong}&,NSString * {__strong}&>(void *a1, _QWORD *a2, _QWORD *a3)
{
  id v5;

  v5 = a1;
  objc_msgSend(v5, "bindString:atParameterIndex:", *a2, 2);
  objc_msgSend(v5, "bindString:atParameterIndex:", *a3, 3);

}

void sub_1A3E0B784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<long long &,double>(void *a1, _QWORD *a2, void *a3, _QWORD *a4, double *a5)
{
  id v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  id v17;

  v9 = a1;
  v10 = a3;
  v17 = 0;
  v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89CC8]), "initWithDatabase:query:error:", v9, v10, &v17);
  v12 = v17;
  v13 = v12;
  if (v11)
  {
    SafariShared::_WBSSQLiteStatementBindAllParameters<1,long long &,double>(v11, a4, a5);
    v14 = objc_msgSend(v11, "execute");
    objc_msgSend(v11, "invalidate");
    if ((v14 - 100) >= 2 && (_DWORD)v14 != 0)
      objc_msgSend(v9, "reportErrorWithCode:statement:error:", v14, objc_msgSend(v11, "handle"), a2);
  }
  else
  {
    if (a2)
      *a2 = objc_retainAutorelease(v12);
    v14 = objc_msgSend(v13, "code");
  }

  return v14;
}

void sub_1A3E0B8A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,long long &,double>(void *a1, _QWORD *a2, double *a3)
{
  id v5;

  v5 = a1;
  objc_msgSend(v5, "bindInt64:atParameterIndex:", *a2, 1);
  objc_msgSend(v5, "bindDouble:atParameterIndex:", 2, *a3);

}

void sub_1A3E0B920(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<long long &>(void *a1, _QWORD *a2, void *a3, _QWORD *a4)
{
  id v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  id v15;

  v7 = a1;
  v8 = a3;
  v15 = 0;
  v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89CC8]), "initWithDatabase:query:error:", v7, v8, &v15);
  v10 = v15;
  v11 = v10;
  if (v9)
  {
    objc_msgSend(v9, "bindInt64:atParameterIndex:", *a4, 1);
    v12 = objc_msgSend(v9, "execute");
    objc_msgSend(v9, "invalidate");
    if ((v12 - 100) >= 2 && (_DWORD)v12 != 0)
      objc_msgSend(v7, "reportErrorWithCode:statement:error:", v12, objc_msgSend(v9, "handle"), a2);
  }
  else
  {
    if (a2)
      *a2 = objc_retainAutorelease(v10);
    v12 = objc_msgSend(v11, "code");
  }

  return v12;
}

void sub_1A3E0BA38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_1_5(void *a1@<X0>, const char *a2@<X3>, uint8_t *a3@<X4>, NSObject *a4@<X8>)
{
  _os_log_error_impl(a1, a4, OS_LOG_TYPE_ERROR, a2, a3, 0x12u);
}

void sub_1A3E0BB20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1A3E0BBE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A3E0C050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,id location)
{
  void *v50;

  _Block_object_dispose(&a42, 8);
  _Block_object_dispose(&a46, 8);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_1A3E0C2F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3E0C398(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E0C4D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3E0C5FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A3E0CD2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A3E0D32C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  _Block_object_dispose(&a44, 8);
  _Unwind_Resume(a1);
}

void sub_1A3E0D934(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E0D9E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1A3E0DB0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E0DC7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1A3E0DCFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3E0DE28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3E0E0B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1A3E0E210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

id sanitizedMetadata(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  id v4;
  id v5;
  void *v6;
  id v7;
  void *v9;
  _QWORD v10[4];
  id v11;
  id v12;

  v9 = (void *)MEMORY[0x1E0C99E60];
  v1 = a1;
  objc_msgSend(v9, "setWithObjects:", CFSTR("ControlUniqueID"), CFSTR("ControlRectHeight"), CFSTR("ControlRectLeft"), CFSTR("ControlRectTop"), CFSTR("ControlRectWidth"), CFSTR("ContainsActiveElement"), CFSTR("ControlIsActiveElement"), CFSTR("ControlIsAutoFilledTextField"), CFSTR("FormAction"), CFSTR("ControlNextFieldUniqueID"), CFSTR("ControlAutoFillButtonType"), CFSTR("ControlLastAutoFillButtonType"), 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __sanitizedMetadata_block_invoke;
  v10[3] = &unk_1E4B39740;
  v11 = v2;
  v4 = v3;
  v12 = v4;
  v5 = v2;
  objc_msgSend(v1, "enumerateKeysAndObjectsUsingBlock:", v10);

  v6 = v12;
  v7 = v4;

  return v7;
}

id __sanitizedFormMetadata_block_invoke(uint64_t a1, void *a2)
{
  return sanitizedMetadata(a2);
}

void __sanitizedFormMetadata_block_invoke_2(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  _QWORD v15[4];
  id v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t);
  void (*v27)(uint64_t);
  id v28;

  v5 = a2;
  v6 = a3;
  objc_msgSend(a1[4], "objectForKeyedSubscript:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (v7)
  {
    v8 = a1[5];
    v9 = a1[6];
    v10 = v6;
    v23 = 0;
    v24 = &v23;
    v25 = 0x3032000000;
    v26 = __Block_byref_object_copy__11;
    v27 = __Block_byref_object_dispose__11;
    v28 = 0;
    v19 = 0;
    v20 = &v19;
    v21 = 0x2020000000;
    v22 = 0x7FFFFFFFFFFFFFFFLL;
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = __controlDescription_block_invoke;
    v15[3] = &unk_1E4B39768;
    v11 = v10;
    v16 = v11;
    v17 = &v23;
    v18 = &v19;
    objc_msgSend(v9, "enumerateObjectsUsingBlock:", v15);
    v12 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend((id)v24[5], "safari_stringForKey:", CFSTR("ControlFieldName"));
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "stringWithFormat:", CFSTR("<ControlFieldName '%@', control index %lu>"), v13, v20[3]);
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    _Block_object_dispose(&v19, 8);
    _Block_object_dispose(&v23, 8);

    objc_msgSend(v8, "setObject:forKey:", v14, v7);
    objc_msgSend(a1[5], "removeObjectForKey:", v5);
  }

}

void sub_1A3E0E950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void __sanitizedMetadata_block_invoke(uint64_t a1, void *a2, void *a3)
{
  __CFString *v5;
  __CFString *v6;
  double v7;
  __CFString *v8;
  id v9;

  v9 = a2;
  v5 = a3;
  if ((objc_msgSend(*(id *)(a1 + 32), "containsObject:", v9) & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0C99E38], "null");
    v6 = (__CFString *)objc_claimAutoreleasedReturnValue();

    if (v6 != v5)
    {
      if (objc_msgSend(v9, "isEqualToString:", CFSTR("AutoFillFormType")))
      {
        -[__CFString doubleValue](v5, "doubleValue");
        if ((unint64_t)v7 >= 6)
        {
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("<Invalid WBSAutoFillFormType %d>"), (unint64_t)v7);
          v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
        }
        else
        {
          v8 = off_1E4B39788[(unint64_t)v7];
        }

        v5 = v8;
      }
      objc_msgSend(*(id *)(a1 + 40), "setObject:forKey:", v5, v9);
    }
  }

}

void __controlDescription_block_invoke(_QWORD *a1, void *a2, uint64_t a3, _BYTE *a4)
{
  void *v8;
  int v9;
  id v10;

  v10 = a2;
  objc_msgSend(v10, "safari_stringForKey:", CFSTR("ControlUniqueID"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "isEqualToString:", a1[4]);

  if (v9)
  {
    objc_storeStrong((id *)(*(_QWORD *)(a1[5] + 8) + 40), a2);
    *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24) = a3;
    *a4 = 1;
  }

}

void __setUpEncodingClasses_block_invoke()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;

  nsArrayClass = objc_opt_class();
  nsNumberClass = objc_opt_class();
  nsStringClass = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99E60], "setWithObjects:", nsStringClass, objc_opt_class(), 0);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)nsStringClassSet;
  nsStringClassSet = v0;

  v2 = (void *)MEMORY[0x1E0C99E60];
  v3 = objc_opt_class();
  v4 = objc_opt_class();
  v5 = objc_opt_class();
  objc_msgSend(v2, "setWithObjects:", v3, v4, v5, objc_opt_class(), 0);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)stringDictionaryClasses;
  stringDictionaryClasses = v6;

  v8 = (void *)MEMORY[0x1E0C99E60];
  v9 = objc_opt_class();
  v10 = objc_opt_class();
  v11 = objc_opt_class();
  objc_msgSend(v8, "setWithObjects:", v9, v10, v11, objc_opt_class(), 0);
  v12 = objc_claimAutoreleasedReturnValue();
  v13 = (void *)stringArrayClasses;
  stringArrayClasses = v12;

  v14 = (void *)MEMORY[0x1E0C99E60];
  v15 = objc_opt_class();
  v16 = objc_opt_class();
  v17 = objc_opt_class();
  v18 = objc_opt_class();
  v19 = objc_opt_class();
  objc_msgSend(v14, "setWithObjects:", v15, v16, v17, v18, v19, objc_opt_class(), 0);
  v20 = objc_claimAutoreleasedReturnValue();
  v21 = (void *)stringArrayDictionaryClasses;
  stringArrayDictionaryClasses = v20;

  v22 = (void *)MEMORY[0x1E0C99E60];
  v23 = objc_opt_class();
  v24 = objc_opt_class();
  v25 = objc_opt_class();
  v26 = objc_opt_class();
  objc_msgSend(v22, "setWithObjects:", v23, v24, v25, v26, objc_opt_class(), 0);
  v27 = objc_claimAutoreleasedReturnValue();
  v28 = (void *)selectElementInfoClasses;
  selectElementInfoClasses = v27;

  v29 = (void *)MEMORY[0x1E0C99E60];
  v30 = objc_opt_class();
  v31 = objc_opt_class();
  v32 = objc_opt_class();
  v33 = objc_opt_class();
  objc_msgSend(v29, "setWithObjects:", v30, v31, v32, v33, objc_opt_class(), 0);
  v34 = objc_claimAutoreleasedReturnValue();
  v35 = (void *)urlArrayDictionaryClasses;
  urlArrayDictionaryClasses = v34;

}

void __getPropertyMap_block_invoke()
{
  objc_class *v0;
  WBSFormControlMetadataProperty *v1;
  WBSFormControlMetadataProperty *v2;
  WBSFormControlMetadataProperty *v3;
  WBSFormControlMetadataProperty *v4;
  WBSFormControlMetadataProperty *v5;
  WBSFormControlMetadataProperty *v6;
  WBSFormControlMetadataProperty *v7;
  WBSFormControlMetadataProperty *v8;
  WBSFormControlMetadataProperty *v9;
  WBSFormControlMetadataProperty *v10;
  WBSFormControlMetadataProperty *v11;
  WBSFormControlMetadataProperty *v12;
  WBSFormControlMetadataProperty *v13;
  WBSFormControlMetadataProperty *v14;
  WBSFormControlMetadataProperty *v15;
  WBSFormControlMetadataProperty *v16;
  WBSFormControlMetadataProperty *v17;
  WBSFormControlMetadataProperty *v18;
  WBSFormControlMetadataProperty *v19;
  WBSFormControlMetadataProperty *v20;
  WBSFormControlMetadataProperty *v21;
  WBSFormControlMetadataProperty *v22;
  WBSFormControlMetadataProperty *v23;
  WBSFormControlMetadataProperty *v24;
  WBSFormControlMetadataProperty *v25;
  WBSFormControlMetadataProperty *v26;
  WBSFormControlMetadataProperty *v27;
  WBSFormControlMetadataProperty *v28;
  WBSFormControlMetadataProperty *v29;
  WBSFormControlMetadataProperty *v30;
  WBSFormControlMetadataProperty *v31;
  WBSFormControlMetadataProperty *v32;
  WBSFormControlMetadataProperty *v33;
  WBSFormControlMetadataProperty *v34;
  WBSFormControlMetadataProperty *v35;
  WBSFormControlMetadataProperty *v36;
  WBSFormControlMetadataProperty *v37;
  WBSFormControlMetadataProperty *v38;
  WBSFormControlMetadataProperty *v39;
  WBSFormControlMetadataProperty *v40;
  WBSFormControlMetadataProperty *v41;
  WBSFormControlMetadataProperty *v42;
  WBSFormControlMetadataProperty *v43;
  WBSFormControlMetadataProperty *v44;
  WBSFormControlMetadataProperty *v45;
  WBSFormControlMetadataProperty *v46;
  WBSFormControlMetadataProperty *v47;
  WBSFormControlMetadataProperty *v48;
  uint64_t v49;
  void *v50;
  id v51;

  nsArrayClass = objc_opt_class();
  nsDictionaryClass = objc_opt_class();
  nsNumberClass = objc_opt_class();
  nsStringClass = objc_opt_class();
  nsURLClass = objc_opt_class();
  v0 = (objc_class *)objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v51 = (id)objc_claimAutoreleasedReturnValue();
  v1 = objc_alloc_init(WBSFormControlMetadataProperty);
  v1->type = 0;
  *(_DWORD *)&v1->flagMask.flags |= 1u;
  objc_msgSend(v51, "setObject:forKeyedSubscript:", v1, CFSTR("DisallowsAutocomplete"));

  v2 = objc_alloc_init(WBSFormControlMetadataProperty);
  v2->type = 0;
  *(_DWORD *)&v2->flagMask.flags |= 2u;
  objc_msgSend(v51, "setObject:forKeyedSubscript:", v2, CFSTR("ControlClaimsToBeCurrentPasswordViaAutocompleteAttribute"));

  v3 = objc_alloc_init(WBSFormControlMetadataProperty);
  v3->type = 0;
  *(_DWORD *)&v3->flagMask.flags |= 4u;
  objc_msgSend(v51, "setObject:forKeyedSubscript:", v3, CFSTR("ControlClaimsToBeNewPasswordViaAutocompleteAttribute"));

  v4 = objc_alloc_init(WBSFormControlMetadataProperty);
  v4->type = 0;
  *(_DWORD *)&v4->flagMask.flags |= 8u;
  objc_msgSend(v51, "setObject:forKeyedSubscript:", v4, CFSTR("ControlClaimsToBeUsernameViaAutocompleteAttribute"));

  v5 = objc_alloc_init(WBSFormControlMetadataProperty);
  v5->type = 0;
  *(_DWORD *)&v5->flagMask.flags |= 0x10u;
  objc_msgSend(v51, "setObject:forKeyedSubscript:", v5, CFSTR("ControlLooksLikeCreditCardCardholderField"));

  v6 = objc_alloc_init(WBSFormControlMetadataProperty);
  v6->type = 0;
  *(_DWORD *)&v6->flagMask.flags |= 0x20u;
  objc_msgSend(v51, "setObject:forKeyedSubscript:", v6, CFSTR("ControlLooksLikeCreditCardCompositeExpirationDateField"));

  v7 = objc_alloc_init(WBSFormControlMetadataProperty);
  v7->type = 0;
  *(_DWORD *)&v7->flagMask.flags |= 0x40u;
  objc_msgSend(v51, "setObject:forKeyedSubscript:", v7, CFSTR("ControlLooksLikeCreditCardNumberField"));

  v8 = objc_alloc_init(WBSFormControlMetadataProperty);
  v8->type = 0;
  *(_DWORD *)&v8->flagMask.flags |= 0x80u;
  objc_msgSend(v51, "setObject:forKeyedSubscript:", v8, CFSTR("ControlLooksLikeCreditCardSecurityCodeField"));

  v9 = objc_alloc_init(WBSFormControlMetadataProperty);
  v9->type = 0;
  *(_DWORD *)&v9->flagMask.flags |= 0x100u;
  objc_msgSend(v51, "setObject:forKeyedSubscript:", v9, CFSTR("ControlLooksLikeCreditCardTypeField"));

  v10 = objc_alloc_init(WBSFormControlMetadataProperty);
  v10->type = 0;
  *(_DWORD *)&v10->flagMask.flags |= 0x200u;
  objc_msgSend(v51, "setObject:forKeyedSubscript:", v10, CFSTR("ControlLooksLikeEIDField"));

  v11 = objc_alloc_init(WBSFormControlMetadataProperty);
  v11->type = 0;
  *(_DWORD *)&v11->flagMask.flags |= 0x400u;
  objc_msgSend(v51, "setObject:forKeyedSubscript:", v11, CFSTR("ControlLooksLikeIMEIField"));

  v12 = objc_alloc_init(WBSFormControlMetadataProperty);
  v12->type = 0;
  *(_DWORD *)&v12->flagMask.flags |= 0x800u;
  objc_msgSend(v51, "setObject:forKeyedSubscript:", v12, CFSTR("ControlLooksLikeDayField"));

  v13 = objc_alloc_init(WBSFormControlMetadataProperty);
  v13->type = 0;
  *(_DWORD *)&v13->flagMask.flags |= 0x1000u;
  objc_msgSend(v51, "setObject:forKeyedSubscript:", v13, CFSTR("ControlLooksLikeMonthField"));

  v14 = objc_alloc_init(WBSFormControlMetadataProperty);
  v14->type = 0;
  *(_DWORD *)&v14->flagMask.flags |= 0x2000u;
  objc_msgSend(v51, "setObject:forKeyedSubscript:", v14, CFSTR("ControlLooksLikeYearField"));

  v15 = objc_alloc_init(WBSFormControlMetadataProperty);
  v15->type = 0;
  *(_DWORD *)&v15->flagMask.flags |= 0x4000u;
  objc_msgSend(v51, "setObject:forKeyedSubscript:", v15, CFSTR("ControlLooksLikeIgnoredDataTypeField"));

  v16 = objc_alloc_init(WBSFormControlMetadataProperty);
  v16->type = 0;
  *(_DWORD *)&v16->flagMask.flags |= 0x8000u;
  objc_msgSend(v51, "setObject:forKeyedSubscript:", v16, CFSTR("ControlLooksLikePasswordCredentialField"));

  v17 = objc_alloc_init(WBSFormControlMetadataProperty);
  v17->type = 0;
  *(_DWORD *)&v17->flagMask.flags |= 0x10000u;
  objc_msgSend(v51, "setObject:forKeyedSubscript:", v17, CFSTR("ControlLooksLikeOneTimeCodeField"));

  v18 = objc_alloc_init(WBSFormControlMetadataProperty);
  v18->type = 0;
  *(_DWORD *)&v18->flagMask.flags |= 0x20000u;
  objc_msgSend(v51, "setObject:forKeyedSubscript:", v18, CFSTR("OneTimeCodeIsEligibleForAutomaticLogin"));

  v19 = objc_alloc_init(WBSFormControlMetadataProperty);
  v19->type = 0;
  *(_DWORD *)&v19->flagMask.flags |= 0x40000u;
  objc_msgSend(v51, "setObject:forKeyedSubscript:", v19, CFSTR("IsVisible"));

  v20 = objc_alloc_init(WBSFormControlMetadataProperty);
  v20->type = 0;
  *(_DWORD *)&v20->flagMask.flags |= 0x80000u;
  objc_msgSend(v51, "setObject:forKeyedSubscript:", v20, CFSTR("ControlIsActiveElement"));

  v21 = objc_alloc_init(WBSFormControlMetadataProperty);
  v21->type = 0;
  *(_DWORD *)&v21->flagMask.flags |= 0x100000u;
  objc_msgSend(v51, "setObject:forKeyedSubscript:", v21, CFSTR("ControlIsDisabled"));

  v22 = objc_alloc_init(WBSFormControlMetadataProperty);
  v22->type = 0;
  *(_DWORD *)&v22->flagMask.flags |= 0x200000u;
  objc_msgSend(v51, "setObject:forKeyedSubscript:", v22, CFSTR("ControlIsReadOnly"));

  v23 = objc_alloc_init(WBSFormControlMetadataProperty);
  v23->type = 0;
  *(_DWORD *)&v23->flagMask.flags |= 0x400000u;
  objc_msgSend(v51, "setObject:forKeyedSubscript:", v23, CFSTR("ControlIsTextField"));

  v24 = objc_alloc_init(WBSFormControlMetadataProperty);
  v24->type = 0;
  *(_DWORD *)&v24->flagMask.flags |= 0x800000u;
  objc_msgSend(v51, "setObject:forKeyedSubscript:", v24, CFSTR("ControlIsSecureTextField"));

  v25 = objc_alloc_init(WBSFormControlMetadataProperty);
  v25->type = 0;
  *(_DWORD *)&v25->flagMask.flags |= 0x1000000u;
  objc_msgSend(v51, "setObject:forKeyedSubscript:", v25, CFSTR("ControlIsAutoFilledTextField"));

  v26 = objc_alloc_init(WBSFormControlMetadataProperty);
  v26->type = 0;
  *(_DWORD *)&v26->flagMask.flags |= 0x2000000u;
  objc_msgSend(v51, "setObject:forKeyedSubscript:", v26, CFSTR("ControlIsUserEditedTextField"));

  v27 = objc_alloc_init(WBSFormControlMetadataProperty);
  v27->type = 0;
  *(_DWORD *)&v27->flagMask.flags |= 0x4000000u;
  objc_msgSend(v51, "setObject:forKeyedSubscript:", v27, CFSTR("ControlIsLabeledUsernameField"));

  v28 = objc_alloc_init(WBSFormControlMetadataProperty);
  v28->type = 0;
  *(_DWORD *)&v28->flagMask.flags |= 0x8000000u;
  objc_msgSend(v51, "setObject:forKeyedSubscript:", v28, CFSTR("ControlIsVerticalWritingMode"));

  v29 = objc_alloc_init(WBSFormControlMetadataProperty);
  v29->type = 1;
  v29->ivar = class_getInstanceVariable(v0, "_addressBookLabel");
  objc_msgSend(v51, "setObject:forKeyedSubscript:", v29, CFSTR("AddressBookLabel"));

  v30 = objc_alloc_init(WBSFormControlMetadataProperty);
  v30->type = 1;
  v30->ivar = class_getInstanceVariable(v0, "_associatedUsername");
  objc_msgSend(v51, "setObject:forKeyedSubscript:", v30, CFSTR("ControlAssociatedUsername"));

  v31 = objc_alloc_init(WBSFormControlMetadataProperty);
  v31->type = 1;
  v31->ivar = class_getInstanceVariable(v0, "_fieldClass");
  objc_msgSend(v51, "setObject:forKeyedSubscript:", v31, CFSTR("ControlFieldClass"));

  v32 = objc_alloc_init(WBSFormControlMetadataProperty);
  v32->type = 1;
  v32->ivar = class_getInstanceVariable(v0, "_fieldID");
  objc_msgSend(v51, "setObject:forKeyedSubscript:", v32, CFSTR("ControlFieldID"));

  v33 = objc_alloc_init(WBSFormControlMetadataProperty);
  v33->type = 1;
  v33->ivar = class_getInstanceVariable(v0, "_fieldName");
  objc_msgSend(v51, "setObject:forKeyedSubscript:", v33, CFSTR("ControlFieldName"));

  v34 = objc_alloc_init(WBSFormControlMetadataProperty);
  v34->type = 1;
  v34->ivar = class_getInstanceVariable(v0, "_tagName");
  objc_msgSend(v51, "setObject:forKeyedSubscript:", v34, CFSTR("ControlTagName"));

  v35 = objc_alloc_init(WBSFormControlMetadataProperty);
  v35->type = 1;
  v35->ivar = class_getInstanceVariable(v0, "_uniqueID");
  objc_msgSend(v51, "setObject:forKeyedSubscript:", v35, CFSTR("ControlUniqueID"));

  v36 = objc_alloc_init(WBSFormControlMetadataProperty);
  v36->type = 1;
  v36->ivar = class_getInstanceVariable(v0, "_nextControlUniqueID");
  objc_msgSend(v51, "setObject:forKeyedSubscript:", v36, CFSTR("ControlNextFieldUniqueID"));

  v37 = objc_alloc_init(WBSFormControlMetadataProperty);
  v37->type = 1;
  v37->ivar = class_getInstanceVariable(v0, "_placeholder");
  objc_msgSend(v51, "setObject:forKeyedSubscript:", v37, CFSTR("ControlPlaceholder"));

  v38 = objc_alloc_init(WBSFormControlMetadataProperty);
  v38->type = 1;
  v38->ivar = class_getInstanceVariable(v0, "_value");
  objc_msgSend(v51, "setObject:forKeyedSubscript:", v38, CFSTR("ControlValue"));

  v39 = objc_alloc_init(WBSFormControlMetadataProperty);
  v39->type = 1;
  v39->ivar = class_getInstanceVariable(v0, "_passwordRules");
  objc_msgSend(v51, "setObject:forKeyedSubscript:", v39, CFSTR("ControlPasswordRules"));

  v40 = objc_alloc_init(WBSFormControlMetadataProperty);
  v40->type = 1;
  v40->ivar = class_getInstanceVariable(v0, "_requiredFormatForDateTimeInput");
  objc_msgSend(v51, "setObject:forKeyedSubscript:", v40, CFSTR("ControlRequiredFormatForDateTimeInput"));

  v41 = objc_alloc_init(WBSFormControlMetadataProperty);
  v41->type = 1;
  v41->ivar = class_getInstanceVariable(v0, "_classification");
  objc_msgSend(v51, "setObject:forKeyedSubscript:", v41, CFSTR("ControlClassification"));

  v42 = objc_alloc_init(WBSFormControlMetadataProperty);
  v42->type = 2;
  v42->ivar = class_getInstanceVariable(v0, "_annotations");
  v42->processObject = processAnnotations;
  objc_msgSend(v51, "setObject:forKeyedSubscript:", v42, CFSTR("Annotations"));

  v43 = objc_alloc_init(WBSFormControlMetadataProperty);
  v43->type = 2;
  v43->ivar = class_getInstanceVariable(v0, "_autocompleteTokens");
  v43->processObject = processArrayOfStrings;
  objc_msgSend(v51, "setObject:forKeyedSubscript:", v43, CFSTR("AutocompleteTokens"));

  v44 = objc_alloc_init(WBSFormControlMetadataProperty);
  v44->type = 2;
  v44->ivar = class_getInstanceVariable(v0, "_radioButtonInfo");
  v44->processObject = processRadioButtonInfo;
  objc_msgSend(v51, "setObject:forKeyedSubscript:", v44, CFSTR("RadioButtonInfo"));

  v45 = objc_alloc_init(WBSFormControlMetadataProperty);
  v45->type = 2;
  v45->ivar = class_getInstanceVariable(v0, "_selectElementInfo");
  v45->processObject = processSelectElementInfo;
  objc_msgSend(v51, "setObject:forKeyedSubscript:", v45, CFSTR("SelectElementInfo"));

  v46 = objc_alloc_init(WBSFormControlMetadataProperty);
  v46->type = 2;
  v46->ivar = class_getInstanceVariable(v0, "_ancestorFrameURLs");
  v46->processObject = processArrayOfURLs;
  objc_msgSend(v51, "setObject:forKeyedSubscript:", v46, CFSTR("AncestorFrameURLs"));

  v47 = objc_alloc_init(WBSFormControlMetadataProperty);
  v47->type = 2;
  v47->ivar = class_getInstanceVariable(v0, "_orderedParts");
  v47->processObject = processArrayOfStrings;
  objc_msgSend(v51, "setObject:forKeyedSubscript:", v47, CFSTR("ControlOrderedParts"));

  v48 = objc_alloc_init(WBSFormControlMetadataProperty);
  v48->type = 2;
  v48->ivar = class_getInstanceVariable(v0, "_classificationHints");
  v48->processObject = processArrayOfStrings;
  objc_msgSend(v51, "setObject:forKeyedSubscript:", v48, CFSTR("ControlClassificationHints"));

  v49 = objc_msgSend(v51, "copy");
  v50 = (void *)getPropertyMap_map;
  getPropertyMap_map = v49;

}

id processAnnotations(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(v1, "safari_mapAndFilterKeysAndObjectsUsingBlock:", &__block_literal_global_445);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id processArrayOfStrings(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(v1, "safari_filterObjectsUsingBlock:", &__block_literal_global_447);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id processRadioButtonInfo(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(v1, "safari_mapAndFilterKeysAndObjectsUsingBlock:", &__block_literal_global_448);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id processSelectElementInfo(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(v1, "safari_filterObjectsUsingBlock:", &__block_literal_global_449);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id processArrayOfURLs(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(v1, "safari_filterObjectsUsingBlock:", &__block_literal_global_450);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id __processAnnotations_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  id v4;

  v3 = a3;
  if ((objc_opt_isKindOfClass() & 1) != 0 && (objc_opt_isKindOfClass() & 1) != 0)
    v4 = v3;
  else
    v4 = 0;

  return v4;
}

uint64_t __processArrayOfStrings_block_invoke()
{
  return objc_opt_isKindOfClass() & 1;
}

id __processRadioButtonInfo_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  void *v4;

  v3 = a3;
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    processArrayOfStrings(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

uint64_t __processSelectElementInfo_block_invoke(uint64_t a1, void *a2)
{
  id v2;
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  char isKindOfClass;

  v2 = a2;
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v3 = v2;
    if (objc_msgSend(v3, "count") == 2)
    {
      objc_msgSend(v3, "objectAtIndexedSubscript:", 0);
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        v5 = 1;
        objc_msgSend(v3, "objectAtIndexedSubscript:", 1);
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        isKindOfClass = objc_opt_isKindOfClass();

        if ((isKindOfClass & 1) != 0)
          goto LABEL_9;
      }
      else
      {

      }
    }
    v5 = 0;
LABEL_9:

    goto LABEL_10;
  }
  v5 = 0;
LABEL_10:

  return v5;
}

uint64_t __processArrayOfURLs_block_invoke()
{
  return objc_opt_isKindOfClass() & 1;
}

void sub_1A3E12AC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A3E12B98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E12CB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E12E20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E12E90(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E12F04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E1303C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1A3E13144(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1A3E133E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1A3E134D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E13538(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E135CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E137E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1A3E138C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;

  a9.super_class = (Class)WBSFormDataController;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1A3E13BE4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E140C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  void *v41;

  WTF::Vector<SortEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a40, v41);
  _Unwind_Resume(a1);
}

uint64_t timestampForCompletionValues(NSArray *a1)
{
  void *v1;
  uint64_t v2;

  -[NSArray lastObject](a1, "lastObject");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v2 = objc_msgSend(v1, "intValue");
  else
    v2 = 0;

  return v2;
}

void sub_1A3E141C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E143D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E14998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{

  _Unwind_Resume(a1);
}

void sub_1A3E14DB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3E14F5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3E150E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A3E151C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3E15508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{

  _Unwind_Resume(a1);
}

void sub_1A3E15748(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E15874(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E159AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E15B34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1A3E16268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18)
{
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1A3E16614(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t languageOfTextIsChinese(NSString *a1)
{
  __CFString *v1;
  void *v2;
  CFStringRef v3;
  uint64_t v4;
  CFRange v6;

  v1 = a1;
  if (-[__CFString length](v1, "length"))
  {
    -[__CFString safari_bestLanguageTag](v1, "safari_bestLanguageTag");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    if (!objc_msgSend(v2, "length"))
    {
      v6.length = -[__CFString length](v1, "length");
      v6.location = 0;
      v3 = CFStringTokenizerCopyBestStringLanguage(v1, v6);

      v2 = (void *)v3;
    }
    if ((objc_msgSend(v2, "isEqualToString:", CFSTR("zh-Hant")) & 1) != 0)
      v4 = 1;
    else
      v4 = objc_msgSend(v2, "isEqualToString:", CFSTR("zh-Hans"));

  }
  else
  {
    v4 = 0;
  }

  return v4;
}

void sub_1A3E166E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E16884(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

BOOL identifyDateFields(void *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD *v12;
  _BOOL8 v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v7 = a1;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v8)
  {
    v9 = *(_QWORD *)v16;
LABEL_3:
    v10 = 0;
    while (1)
    {
      if (*(_QWORD *)v16 != v9)
        objc_enumerationMutation(v7);
      v11 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * v10);
      if (objc_msgSend(v11, "looksLikeDayField", (_QWORD)v15))
        break;
      if (objc_msgSend(v11, "looksLikeMonthField"))
      {
        v12 = a3;
        if (*a3)
          goto LABEL_20;
        goto LABEL_14;
      }
      if (objc_msgSend(v11, "looksLikeYearField"))
      {
        v12 = a4;
        if (*a4)
        {
LABEL_20:

          v13 = 0;
          goto LABEL_21;
        }
        goto LABEL_14;
      }
LABEL_15:
      if (v8 == ++v10)
      {
        v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
        if (v8)
          goto LABEL_3;
        goto LABEL_17;
      }
    }
    v12 = a2;
    if (*a2)
      goto LABEL_20;
LABEL_14:
    *v12 = objc_retainAutorelease(v11);
    goto LABEL_15;
  }
LABEL_17:

  v13 = *a2 || *a3 || *a4 != 0;
LABEL_21:

  return v13;
}

void sub_1A3E16A84(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t stringContainsDateComponentValue(void *a1, int a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t i;
  void *v17;
  void *v18;
  unint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[128];
  _BYTE v36[128];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a3;
  v7 = objc_msgSend(v5, "integerValue");
  if (v7 == dateComponentValue(a2, v6))
  {
    v8 = 1;
  }
  else
  {
    v9 = 0x1E0C99000uLL;
    objc_msgSend(MEMORY[0x1E0C99DC8], "safari_localeIdentifiersForMostWidelyUsedLanguages");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99DC8], "currentLocale");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "localeIdentifier");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "setByAddingObject:", v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v14 = v13;
    v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v31, v36, 16);
    if (v15)
    {
      v26 = *(_QWORD *)v32;
      do
      {
        v25 = v15;
        for (i = 0; i != v25; ++i)
        {
          if (*(_QWORD *)v32 != v26)
            objc_enumerationMutation(v14);
          objc_msgSend(*(id *)(v9 + 3528), "localeWithLocaleIdentifier:", *(_QWORD *)(*((_QWORD *)&v31 + 1) + 8 * i), v25);
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          dateComponentSynonyms(a2, v6);
          v18 = (void *)objc_claimAutoreleasedReturnValue();

          v19 = v9;
          v29 = 0u;
          v30 = 0u;
          v27 = 0u;
          v28 = 0u;
          v20 = v18;
          v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v27, v35, 16);
          if (v21)
          {
            v22 = *(_QWORD *)v28;
            while (2)
            {
              v23 = 0;
              do
              {
                if (*(_QWORD *)v28 != v22)
                  objc_enumerationMutation(v20);
                if (!objc_msgSend(*(id *)(*((_QWORD *)&v27 + 1) + 8 * v23), "caseInsensitiveCompare:", v5))
                {

                  v8 = 1;
                  goto LABEL_21;
                }
                ++v23;
              }
              while (v21 != v23);
              v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v27, v35, 16);
              if (v21)
                continue;
              break;
            }
          }

          v9 = v19;
        }
        v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v31, v36, 16);
        v8 = 0;
      }
      while (v15);
    }
    else
    {
      v8 = 0;
    }
LABEL_21:

  }
  return v8;
}

void sub_1A3E16D20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3E16EEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A3E17450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15, uint64_t a16, void *a17)
{
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1A3E17688(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1A3E178D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1A3E179CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3E17BC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E17CC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E17D84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3E17E64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A3E18170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void sub_1A3E183F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E185F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3E18730(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E187E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E18EC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19, void *a20,uint64_t a21,void *a22,void *a23)
{
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;

  _Unwind_Resume(a1);
}

void sub_1A3E190E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E192DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1A3E196AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1A3E19810(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

id phoneNumberWithoutFormatting(NSString *a1)
{
  NSString *v1;
  id v2;
  void *v3;
  void *v4;

  v1 = a1;
  v2 = objc_alloc_init(MEMORY[0x1E0CB3780]);
  objc_msgSend(v2, "addCharactersInString:", CFSTR("-.,() /"));
  objc_msgSend(v2, "addCharactersInRange:", 160, 1);
  -[NSString componentsSeparatedByCharactersInSet:](v1, "componentsSeparatedByCharactersInSet:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "componentsJoinedByString:", &stru_1E4B40D18);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

void sub_1A3E198DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

id unprefixedPhoneNumber(NSString *a1)
{
  NSString *v1;
  void *v2;
  NSString *v3;
  void *v4;
  NSString *v5;
  uint64_t v6;

  v1 = a1;
  v2 = (void *)PNCreateFormattedStringWithCountry();
  if (!objc_msgSend(v2, "length"))
  {
    if (-[NSString hasPrefix:](v1, "hasPrefix:", CFSTR("011")))
    {
      -[NSString substringFromIndex:](v1, "substringFromIndex:", 3);
      v5 = (NSString *)objc_claimAutoreleasedReturnValue();
      phoneNumberWithoutFormatting(v5);
      v6 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      if (!-[NSString hasPrefix:](v1, "hasPrefix:", CFSTR("1")))
      {
        v3 = v1;
        goto LABEL_3;
      }
      -[NSString substringFromIndex:](v1, "substringFromIndex:", 1);
      v5 = (NSString *)objc_claimAutoreleasedReturnValue();
      phoneNumberWithoutFormatting(v5);
      v6 = objc_claimAutoreleasedReturnValue();
    }
    v4 = (void *)v6;

    goto LABEL_9;
  }
  phoneNumberWithoutFormatting((NSString *)v2);
  v3 = (NSString *)objc_claimAutoreleasedReturnValue();
LABEL_3:
  v4 = v3;
LABEL_9:

  return v4;
}

void sub_1A3E199E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3E19B90(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E1A274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

BOOL fillSingleFieldValue(NSMutableDictionary *a1, NSString *a2, WBSFormControlMetadata *a3)
{
  NSMutableDictionary *v5;
  NSString *v6;
  WBSFormControlMetadata *v7;
  unint64_t v8;
  unint64_t v9;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  v8 = -[WBSFormControlMetadata maxLength](v7, "maxLength");
  v9 = -[NSString length](v6, "length");
  if (v8 >= v9)
    recordValueForTextField(v5, v6, v7);

  return v8 >= v9;
}

void sub_1A3E1A4BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t valueFitsInFields(void *a1, void *a2)
{
  id v3;
  unint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;
  uint64_t v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = objc_msgSend(a1, "length");
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v5 = v3;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v14;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v14 != v7)
          objc_enumerationMutation(v5);
        v9 = objc_msgSend(*(id *)(*((_QWORD *)&v13 + 1) + 8 * v8), "maxLength", (_QWORD)v13);
        v10 = v4 > v9;
        v4 -= v9;
        if (!v10)
        {
          v11 = 1;
          goto LABEL_11;
        }
        ++v8;
      }
      while (v6 != v8);
      v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v6);
  }
  v11 = 0;
LABEL_11:

  return v11;
}

void sub_1A3E1A5F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void fillMultiFieldValue(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  WBSFormControlMetadata *v13;
  void *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  NSString *v18;
  uint64_t v19;
  id v20;
  id obj;
  NSMutableDictionary *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v22 = a1;
  v7 = a2;
  v8 = a3;
  v20 = a4;
  v9 = objc_msgSend(v7, "length", v8);
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  obj = v8;
  v10 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
  if (v10)
  {
    v11 = *(_QWORD *)v24;
    do
    {
      for (i = 0; i != v10; ++i)
      {
        if (*(_QWORD *)v24 != v11)
          objc_enumerationMutation(obj);
        v13 = *(WBSFormControlMetadata **)(*((_QWORD *)&v23 + 1) + 8 * i);
        -[WBSFormControlMetadata uniqueID](v13, "uniqueID");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        if (v9)
        {
          v15 = -[WBSFormControlMetadata maxLength](v13, "maxLength");
          v16 = v15;
          if (v15 >= v9)
            v17 = v9;
          else
            v17 = v15;
          objc_msgSend(v7, "substringToIndex:", v17);
          v18 = (NSString *)objc_claimAutoreleasedReturnValue();
          recordValueForTextField(v22, v18, v13);

          if (v9 <= v16)
          {
            v9 -= v17;
          }
          else
          {
            objc_msgSend(v7, "substringFromIndex:", v17);
            v19 = objc_claimAutoreleasedReturnValue();

            v9 -= v17;
            v7 = (id)v19;
          }
        }
        else
        {
          objc_msgSend(v20, "addControlUniqueIDIgnoredByFollowUpAutoFill:", v14);
          v9 = 0;
        }

      }
      v10 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
    }
    while (v10);
  }

}

void sub_1A3E1A808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1A3E1A938(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1A3E1B18C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

uint64_t fillDateUsingClassification(void *a1, void *a2, unint64_t a3, void *a4)
{
  NSMutableDictionary *v7;
  id v8;
  id v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  WBSFormControlMetadata *v14;
  void *v15;
  BOOL v16;
  id v17;
  void *v18;
  NSString *v19;
  void *v20;
  _BOOL4 v21;
  void *v22;
  void *v23;
  int v24;
  NSObject *v25;
  NSObject *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v31;
  uint8_t v32;
  _BYTE v33[15];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint8_t buf[4];
  void *v39;
  __int16 v40;
  void *v41;
  _BYTE v42[128];
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a4;
  allControlsContinuationStartingAtIndex(a2, a3);
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v9 = (id)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v34, v42, 16);
  if (v10)
  {
    v12 = *(_QWORD *)v35;
    *(_QWORD *)&v11 = 138543618;
    v31 = v11;
    do
    {
      v13 = 0;
      do
      {
        if (*(_QWORD *)v35 != v12)
          objc_enumerationMutation(v9);
        v14 = *(WBSFormControlMetadata **)(*((_QWORD *)&v34 + 1) + 8 * v13);
        -[WBSFormControlMetadata requiredFormatForDateTimeInput](v14, "requiredFormatForDateTimeInput", v31);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v16 = v15 == 0;

        if (!v16)
        {
          v17 = objc_alloc_init(MEMORY[0x1E0CB3578]);
          -[WBSFormControlMetadata requiredFormatForDateTimeInput](v14, "requiredFormatForDateTimeInput");
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v17, "setDateFormat:", v18);

          objc_msgSend(v17, "stringFromDate:", v8);
          v19 = (NSString *)objc_claimAutoreleasedReturnValue();
          recordValueForTextField(v7, v19, v14);

          goto LABEL_19;
        }
        -[WBSFormControlMetadata orderedParts](v14, "orderedParts");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        v21 = objc_msgSend(v20, "count") == 1;

        if (v21)
        {
          -[WBSFormControlMetadata orderedParts](v14, "orderedParts");
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v22, "firstObject");
          v23 = (void *)objc_claimAutoreleasedReturnValue();

          if ((objc_msgSend(v23, "hasSuffix:", CFSTR("month")) & 1) != 0)
          {
            v24 = 1;
            goto LABEL_17;
          }
          if ((objc_msgSend(v23, "hasSuffix:", CFSTR("day")) & 1) != 0)
          {
            v24 = 0;
            goto LABEL_17;
          }
          if (objc_msgSend(v23, "hasSuffix:", CFSTR("year")))
          {
            v24 = 2;
LABEL_17:
            recordValueForDateField(v7, v24, v8, v14);
          }
          else
          {
            v26 = (id)WBS_LOG_CHANNEL_PREFIXAutoFill();
            if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
            {
              -[WBSFormControlMetadata classification](v14, "classification");
              v27 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = v31;
              v39 = v23;
              v40 = 2114;
              v41 = v27;
              _os_log_error_impl(&dword_1A3D90000, v26, OS_LOG_TYPE_ERROR, "Unrecognized part %{public}@ for classification %{public}@", buf, 0x16u);

            }
          }

          goto LABEL_19;
        }
        v25 = WBS_LOG_CHANNEL_PREFIXAutoFill();
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
          fillDateUsingClassification(&v32, v33, v25);
LABEL_19:
        ++v13;
      }
      while (v10 != v13);
      v28 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v34, v42, 16);
      v10 = v28;
    }
    while (v28);
  }

  v29 = objc_msgSend(v9, "count");
  return v29;
}

void sub_1A3E1B650(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void fillPostCode(void *a1, void *a2, void *a3, void *a4)
{
  NSMutableDictionary *v7;
  id v8;
  id v9;
  unint64_t v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSString *v28;
  WBSFormControlMetadata *v29;
  BOOL v30;
  void *v31;
  void *v32;
  id v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _QWORD v38[4];
  id v39;
  _BYTE v40[128];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a2;
  v9 = a3;
  v33 = a4;
  v10 = objc_msgSend(v9, "count");
  v11 = v8;
  {
    objc_msgSend(MEMORY[0x1E0CB3500], "alphanumericCharacterSet");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "invertedSet");
    postCodeCandidates(NSString *,BOOL)::nonAlphanumericSet = objc_claimAutoreleasedReturnValue();

  }
  objc_msgSend(v11, "componentsSeparatedByCharactersInSet:", postCodeCandidates(NSString *,BOOL)::nonAlphanumericSet);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", 4);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = v13;
  if (v10 <= 1)
  {
    objc_msgSend(v13, "addObject:", v11);
    objc_msgSend(MEMORY[0x1E0CB37A0], "stringWithCapacity:", objc_msgSend(v11, "length"));
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v38[0] = MEMORY[0x1E0C809B0];
    v38[1] = 3221225472;
    v38[2] = ___ZL18postCodeCandidatesP8NSStringb_block_invoke;
    v38[3] = &unk_1E4B39428;
    v16 = v15;
    v39 = v16;
    objc_msgSend(v12, "enumerateObjectsUsingBlock:", v38);
    objc_msgSend(v14, "addObject:", v16);

  }
  objc_msgSend(v12, "componentsJoinedByString:", &stru_1E4B40D18);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "addObject:", v17);

  v18 = v11;
  if ((unint64_t)objc_msgSend(v18, "length") >= 9
    && (objc_msgSend(MEMORY[0x1E0CB3500], "letterCharacterSet"),
        v19 = (void *)objc_claimAutoreleasedReturnValue(),
        v20 = objc_msgSend(v18, "rangeOfCharacterFromSet:", v19),
        v19,
        v20 == 0x7FFFFFFFFFFFFFFFLL))
  {
    {
      objc_msgSend(MEMORY[0x1E0CB3500], "decimalDigitCharacterSet");
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v32, "invertedSet");
      shortZIPCodeForExtendedZIPCode(NSString *)::nonDigitSet = objc_claimAutoreleasedReturnValue();

    }
    objc_msgSend(v18, "componentsSeparatedByCharactersInSet:", shortZIPCodeForExtendedZIPCode(NSString *)::nonDigitSet);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "componentsJoinedByString:", &stru_1E4B40D18);
    v22 = (void *)objc_claimAutoreleasedReturnValue();

    if (objc_msgSend(v22, "length") == 9)
    {
      objc_msgSend(v22, "substringToIndex:", 5);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v23 = 0;
    }

    if (v23)
      objc_msgSend(v14, "addObject:", v23);
  }
  else
  {

    v23 = 0;
  }

  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v24 = v14;
  v25 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v34, v40, 16);
  if (v25)
  {
    v26 = *(_QWORD *)v35;
LABEL_14:
    v27 = 0;
    while (1)
    {
      if (*(_QWORD *)v35 != v26)
        objc_enumerationMutation(v24);
      v28 = *(NSString **)(*((_QWORD *)&v34 + 1) + 8 * v27);
      if (objc_msgSend(v9, "count") == 1)
      {
        objc_msgSend(v9, "objectAtIndexedSubscript:", 0);
        v29 = (WBSFormControlMetadata *)objc_claimAutoreleasedReturnValue();
        v30 = fillSingleFieldValue(v7, v28, v29);

        if (v30)
          break;
      }
      if ((unint64_t)objc_msgSend(v9, "count") >= 2 && valueFitsInFields(v28, v9))
      {
        fillMultiFieldValue(v7, v28, v9, v33);
        break;
      }
      if (v25 == ++v27)
      {
        v25 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v34, v40, 16);
        if (v25)
          goto LABEL_14;
        break;
      }
    }
  }

}

void sub_1A3E1BAE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;

  _Unwind_Resume(a1);
}

void fillInstantMessageUsername(void *a1, void *a2, void *a3)
{
  NSString *v5;
  id v6;
  WBSFormControlMetadata *v7;
  NSMutableDictionary *v8;

  v8 = a1;
  v5 = a2;
  v6 = a3;
  if (objc_msgSend(v6, "count") == 1)
  {
    objc_msgSend(v6, "objectAtIndexedSubscript:", 0);
    v7 = (WBSFormControlMetadata *)objc_claimAutoreleasedReturnValue();
    fillSingleFieldValue(v8, v5, v7);

  }
}

void sub_1A3E1BC3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void recordValueForTextField(NSMutableDictionary *a1, NSString *a2, WBSFormControlMetadata *a3)
{
  NSString *v5;
  WBSFormControlMetadata *v6;
  void *v7;
  BOOL v8;
  void *v9;
  NSMutableDictionary *v10;

  v10 = a1;
  v5 = a2;
  v6 = a3;
  -[WBSFormControlMetadata value](v6, "value");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = -[NSString isEqualToString:](v5, "isEqualToString:", v7);

  if (!v8)
  {
    -[WBSFormControlMetadata uniqueID](v6, "uniqueID");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[NSMutableDictionary setObject:forKeyedSubscript:](v10, "setObject:forKeyedSubscript:", v5, v9);

  }
}

void sub_1A3E1BD04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void recordIndexForSelectElement(NSMutableDictionary *a1, unint64_t a2, WBSFormControlMetadata *a3)
{
  WBSFormControlMetadata *v5;
  void *v6;
  void *v7;
  NSMutableDictionary *v8;

  v8 = a1;
  v5 = a3;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", (double)a2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[WBSFormControlMetadata uniqueID](v5, "uniqueID");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  -[NSMutableDictionary setObject:forKeyedSubscript:](v8, "setObject:forKeyedSubscript:", v6, v7);

}

void sub_1A3E1BDBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void recordValueForTextarea(NSMutableDictionary *a1, NSString *a2, WBSFormControlMetadata *a3)
{
  NSString *v5;
  void *v6;
  NSMutableDictionary *v7;

  v7 = a1;
  v5 = a2;
  -[WBSFormControlMetadata uniqueID](a3, "uniqueID");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[NSMutableDictionary setObject:forKeyedSubscript:](v7, "setObject:forKeyedSubscript:", v5, v6);

}

void sub_1A3E1BE5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1A3E1BF00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E1BF58(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E1C8A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23,void *a24)
{
  void *v24;
  void *v25;
  void *v26;

  _Unwind_Resume(a1);
}

id uniqueIDForAutoFillOfControl(WBSFormControlMetadata *a1, int a2)
{
  WBSFormControlMetadata *v3;
  WBSFormControlMetadata *v4;
  id v5;
  void *v7;
  BOOL v8;
  int v9;
  void *v10;
  uint64_t v11;
  void *v12;

  v3 = a1;
  v4 = v3;
  if (v3
    && !-[WBSFormControlMetadata isDisabled](v3, "isDisabled")
    && !-[WBSFormControlMetadata isReadOnly](v4, "isReadOnly")
    && !-[WBSFormControlMetadata looksLikeIgnoredDataTypeField](v4, "looksLikeIgnoredDataTypeField")
    && ((a2 & 1) != 0 || !-[WBSFormControlMetadata disallowsAutocomplete](v4, "disallowsAutocomplete")))
  {
    -[WBSFormControlMetadata tagName](v4, "tagName");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = -[WBSFormControlMetadata isTextField](v4, "isTextField");
    if ((objc_msgSend(v7, "safari_isCaseInsensitiveEqualToString:", CFSTR("input")) & 1) != 0
      || objc_msgSend(v7, "safari_isCaseInsensitiveEqualToString:", CFSTR("textarea")))
    {
      if (!v8 && !-[WBSFormControlMetadata looksLikeCreditCardTypeField](v4, "looksLikeCreditCardTypeField"))
        goto LABEL_20;
      if ((a2 & 1) == 0 && -[WBSFormControlMetadata isSecureTextField](v4, "isSecureTextField"))
        goto LABEL_20;
      v9 = -[WBSFormControlMetadata isActive](v4, "isActive") ? 2 : 4;
      if ((v9 & a2) == 0)
      {
        -[WBSFormControlMetadata value](v4, "value");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v11 = objc_msgSend(v10, "length");

        if (v11)
          goto LABEL_20;
      }
    }
    else if (!objc_msgSend(v7, "safari_isCaseInsensitiveEqualToString:", CFSTR("select")))
    {
LABEL_20:
      v5 = 0;
LABEL_26:

      goto LABEL_6;
    }
    -[WBSFormControlMetadata uniqueID](v4, "uniqueID");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v12, "length"))
      v5 = v12;
    else
      v5 = 0;

    goto LABEL_26;
  }
  v5 = 0;
LABEL_6:

  return v5;
}

void sub_1A3E1CC3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id allControlsContinuationStartingAtIndex(void *a1, unint64_t a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  void *v7;
  _QWORD v9[2];

  v9[1] = *MEMORY[0x1E0C80C00];
  v3 = a1;
  objc_msgSend(v3, "objectAtIndexedSubscript:", a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "continuationID");
  if (v5)
  {
    v6 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    while (a2 < objc_msgSend(v3, "count"))
    {
      objc_msgSend(v3, "objectAtIndexedSubscript:", a2);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v7, "continuationID") != v5)
      {

        break;
      }
      objc_msgSend(v6, "addObject:", v7);

      ++a2;
    }
  }
  else
  {
    v9[0] = v4;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v9, 1);
    v6 = (id)objc_claimAutoreleasedReturnValue();
  }

  return v6;
}

void sub_1A3E1CD84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void recordTypeForFieldIfFilled(void *a1, void *a2, void *a3, uint64_t a4)
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  id v11;

  v11 = a1;
  v7 = a2;
  v8 = a3;
  objc_msgSend(v11, "objectForKeyedSubscript:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a4);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setObject:forKeyedSubscript:", v10, v8);

  }
}

void sub_1A3E1CE68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

BOOL fillCreditCardType(NSMutableDictionary *a1, WBSFormControlMetadata *a2, NSString *a3)
{
  WBSFormControlMetadata *v5;
  NSArray *v6;
  NSArray *v7;
  unint64_t v8;
  _BOOL8 v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  NSArray *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t j;
  id v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t k;
  void *v29;
  unint64_t v30;
  id v31;
  NSMutableDictionary *v32;
  id v33;
  void *v34;
  NSString *v35;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  id obj;
  uint64_t i;
  NSString *v42;
  WBSFormControlMetadata *v43;
  NSMutableDictionary *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  NSArray *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  _BYTE v65[128];
  _BYTE v66[128];
  _BYTE v67[128];
  _BYTE v68[128];
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v44 = a1;
  v5 = a2;
  v42 = a3;
  v43 = v5;
  if (WBSCreditCardTypeFromNumberAllowingPartialMatch())
  {
    WBSCreditCardTypeSynonyms();
    v48 = (NSArray *)objc_claimAutoreleasedReturnValue();
    if (!v48)
    {
      v9 = 0;
LABEL_53:

      goto LABEL_54;
    }
    -[WBSFormControlMetadata selectElementInfo](v5, "selectElementInfo");
    v6 = (NSArray *)objc_claimAutoreleasedReturnValue();
    v7 = v6;
    if (v6)
    {
      v8 = indexOfItemInSelectElement(v6, v48);
      v9 = v8 != 0x7FFFFFFFFFFFFFFFLL;
      if (v8 != 0x7FFFFFFFFFFFFFFFLL)
        recordIndexForSelectElement(v44, v8, v5);

      goto LABEL_53;
    }
    -[WBSFormControlMetadata radioButtonInfo](v5, "radioButtonInfo");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = v10;
    if (!v10)
    {
      WBSCreditCardTypeLocalizedName();
      v35 = (NSString *)objc_claimAutoreleasedReturnValue();
      recordValueForTextField(v44, v35, v5);

      v9 = 1;
LABEL_52:

      goto LABEL_53;
    }
    v37 = v10;
    objc_msgSend(MEMORY[0x1E0CB3550], "setWithCapacity:", objc_msgSend(v10, "count"));
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    obj = v11;
    v38 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v61, v68, 16);
    if (v38)
    {
      v39 = *(_QWORD *)v62;
      do
      {
        for (i = 0; i != v38; ++i)
        {
          if (*(_QWORD *)v62 != v39)
            objc_enumerationMutation(obj);
          v13 = *(_QWORD *)(*((_QWORD *)&v61 + 1) + 8 * i);
          objc_msgSend(obj, "safari_arrayForKey:", v13);
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          v15 = v14;
          if (v14)
          {
            v59 = 0u;
            v60 = 0u;
            v57 = 0u;
            v58 = 0u;
            v45 = v14;
            v16 = objc_msgSend(v45, "countByEnumeratingWithState:objects:count:", &v57, v67, 16);
            if (v16)
            {
              v46 = *(_QWORD *)v58;
              do
              {
                v17 = 0;
                v47 = v16;
                do
                {
                  if (*(_QWORD *)v58 != v46)
                    objc_enumerationMutation(v45);
                  v18 = *(void **)(*((_QWORD *)&v57 + 1) + 8 * v17);
                  v53 = 0u;
                  v54 = 0u;
                  v55 = 0u;
                  v56 = 0u;
                  v19 = v48;
                  v20 = -[NSArray countByEnumeratingWithState:objects:count:](v19, "countByEnumeratingWithState:objects:count:", &v53, v66, 16);
                  if (v20)
                  {
                    v21 = *(_QWORD *)v54;
                    do
                    {
                      for (j = 0; j != v20; ++j)
                      {
                        if (*(_QWORD *)v54 != v21)
                          objc_enumerationMutation(v19);
                        if (objc_msgSend(v18, "rangeOfString:options:", *(_QWORD *)(*((_QWORD *)&v53 + 1) + 8 * j), 1) != 0x7FFFFFFFFFFFFFFFLL)objc_msgSend(v12, "addObject:", v13);
                      }
                      v20 = -[NSArray countByEnumeratingWithState:objects:count:](v19, "countByEnumeratingWithState:objects:count:", &v53, v66, 16);
                    }
                    while (v20);
                  }

                  ++v17;
                }
                while (v17 != v47);
                v16 = objc_msgSend(v45, "countByEnumeratingWithState:objects:count:", &v57, v67, 16);
              }
              while (v16);
            }

          }
        }
        v38 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v61, v68, 16);
      }
      while (v38);
    }

    if (objc_msgSend(v12, "count"))
    {
      v51 = 0u;
      v52 = 0u;
      v49 = 0u;
      v50 = 0u;
      v23 = v12;
      v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v49, v65, 16);
      v9 = v24 != 0;
      if (!v24)
      {
        v33 = v23;
        goto LABEL_50;
      }
      v25 = 0;
      v26 = 0;
      v27 = *(_QWORD *)v50;
      do
      {
        for (k = 0; k != v24; ++k)
        {
          if (*(_QWORD *)v50 != v27)
            objc_enumerationMutation(v23);
          v29 = *(void **)(*((_QWORD *)&v49 + 1) + 8 * k);
          v30 = objc_msgSend(v23, "countForObject:", v29);
          if (v30 > v25)
          {
            v31 = v29;

            v25 = v30;
            v26 = v31;
          }
        }
        v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v49, v65, 16);
      }
      while (v24);

      if (v26)
      {
        v32 = v44;
        v33 = v26;
        -[WBSFormControlMetadata uniqueID](v43, "uniqueID");
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        -[NSMutableDictionary setObject:forKeyedSubscript:](v32, "setObject:forKeyedSubscript:", v33, v34);

LABEL_50:
        goto LABEL_51;
      }
    }
    v9 = 0;
LABEL_51:

    v11 = v37;
    goto LABEL_52;
  }
  v9 = 0;
LABEL_54:

  return v9;
}

void sub_1A3E1D350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  void *v20;

  _Unwind_Resume(a1);
}

void sub_1A3E1D514(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E1D600(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E1DDC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26)
{
  void *v26;
  void *v27;
  void *v28;

  _Unwind_Resume(a1);
}

void sub_1A3E1DF9C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E1E044(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E1E260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1A3E1E450(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3E1E5D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3E1E6D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E1E978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1A3E1ED70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_1A3E1F0F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_1A3E1F914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, void *a18, void *a19, uint64_t a20,uint64_t a21,void *a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34)
{
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;

  _Unwind_Resume(a1);
}

void sub_1A3E1FCF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_1A3E20598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, uint64_t a20,void *a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,void *a27,void *a28,_Unwind_Exception *exception_objecta,void *a30,void *a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  void *a64;
  void *a65;
  void *a66;
  void *a67;
  void *a68;
  void *v68;
  void *v69;
  void *v70;
  uint64_t v71;

  _Block_object_dispose((const void *)(v71 - 224), 8);
  _Block_object_dispose(&STACK[0x200], 8);

  _Unwind_Resume(a1);
}

void sub_1A3E20920(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E20B98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1A3E20F44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_1A3E2104C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3E21274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1A3E21508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1A3E2166C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E216D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E217CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1A3E21B60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,id a38)
{
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;

  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a33, 8);

  _Unwind_Resume(a1);
}

void sub_1A3E21CAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3E21DE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  void *v20;
  void *v21;

  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

void sub_1A3E21E9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1A3E22074(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1A3E2217C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E22310(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1A3E224D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1A3E2264C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_1A3E22850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1A3E22970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  uint64_t v20;

  _Block_object_dispose(&a15, 8);

  _Block_object_dispose((const void *)(v20 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1A3E22A40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3E22B3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  uint64_t v20;

  _Block_object_dispose(&a15, 8);

  _Block_object_dispose((const void *)(v20 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1A3E22BDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3E22CC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A3E23374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, uint64_t a17, void *a18, uint64_t a19, void *a20)
{
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;

  _Unwind_Resume(a1);
}

void sub_1A3E23774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1A3E238F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3E23B08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E23C34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A3E23D34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3E23E0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E23F18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1A3E23FF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E240E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A3E24320(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A3E243F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong}&)(SortEntry const&,SortEntry const&),SortEntry*,false>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, char a5)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t *v20;
  char v21;
  int v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;

  v7 = a2;
  v8 = a1;
  v26 = a2;
  v27 = a1;
  while (2)
  {
    v9 = 1 - a4;
LABEL_3:
    v10 = (char *)v7 - (char *)v8;
    v11 = 0xAAAAAAAAAAAAAAABLL * (v7 - v8);
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v24 = *a3;
        v26 = v7 - 3;
        if ((*(unsigned int (**)(void))(v24 + 16))())
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<SortEntry *&,SortEntry *&>(&v27, (uint64_t *)&v26);
        return;
      case 3uLL:
        v26 = v7 - 3;
        std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong}&)(SortEntry const&,SortEntry const&),SortEntry*>(v8, v8 + 3, (uint64_t)(v7 - 3), (uint64_t)a3);
        return;
      case 4uLL:
        v26 = v7 - 3;
        std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong}&)(SortEntry const&,SortEntry const&),SortEntry*>(v8, v8 + 3, v8 + 6, (uint64_t)(v7 - 3), a3);
        return;
      case 5uLL:
        v26 = v7 - 3;
        std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong}&)(SortEntry const&,SortEntry const&),SortEntry*>(v8, v8 + 3, v8 + 6, v8 + 9, (uint64_t)(v7 - 3), a3);
        return;
      default:
        if (v10 <= 575)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:sn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong}&)(SortEntry const&,SortEntry const&),SortEntry*>((uint64_t)v8, v7, (uint64_t)a3);
          else
            std::__insertion_sort_unguarded[abi:sn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong}&)(SortEntry const&,SortEntry const&),SortEntry*>((uint64_t)v8, (uint64_t)v7, (uint64_t)a3);
          return;
        }
        if (v9 == 1)
        {
          if (v8 != v7)
            std::__partial_sort_impl[abi:sn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong}&)(SortEntry const&,SortEntry const&),SortEntry*,SortEntry*>((__int128 *)v8, v7, v7, (uint64_t)a3);
          return;
        }
        v12 = v11 >> 1;
        v13 = (uint64_t)(v7 - 3);
        if ((unint64_t)v10 < 0xC01)
        {
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong}&)(SortEntry const&,SortEntry const&),SortEntry*>(&v8[3 * (v11 >> 1)], v8, v13, (uint64_t)a3);
          if ((a5 & 1) != 0)
          {
LABEL_11:
            v7 = v26;
            goto LABEL_12;
          }
        }
        else
        {
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong}&)(SortEntry const&,SortEntry const&),SortEntry*>(v8, &v8[3 * (v11 >> 1)], v13, (uint64_t)a3);
          v14 = v26;
          v15 = 3 * v12;
          v16 = 3 * v12;
          v17 = 24 * v12 - 24;
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong}&)(SortEntry const&,SortEntry const&),SortEntry*>(v27 + 3, (uint64_t *)((char *)v27 + v17), (uint64_t)(v26 - 6), (uint64_t)a3);
          v16 += 3;
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong}&)(SortEntry const&,SortEntry const&),SortEntry*>(v27 + 6, &v27[v16], (uint64_t)(v14 - 9), (uint64_t)a3);
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong}&)(SortEntry const&,SortEntry const&),SortEntry*>((uint64_t *)((char *)v27 + v17), &v27[v15], (uint64_t)&v27[v16], (uint64_t)a3);
          v25 = &v27[v15];
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<SortEntry *&,SortEntry *&>(&v27, (uint64_t *)&v25);
          if ((a5 & 1) != 0)
            goto LABEL_11;
        }
        v18 = (*(uint64_t (**)(void))(*a3 + 16))();
        v7 = v26;
        if ((v18 & 1) == 0)
        {
          std::__partition_with_equals_on_left[abi:sn180100]<std::_ClassicAlgPolicy,SortEntry *,BOOL({block_pointer} {__strong}&)(SortEntry const&,SortEntry const&)>(v27, v26, (uint64_t)a3);
          v8 = v23;
          goto LABEL_20;
        }
LABEL_12:
        std::__partition_with_equals_on_right[abi:sn180100]<std::_ClassicAlgPolicy,SortEntry *,BOOL({block_pointer} {__strong}&)(SortEntry const&,SortEntry const&)>((__int128 *)v27, v7, a3);
        v20 = (uint64_t *)v19;
        if ((v21 & 1) == 0)
          goto LABEL_19;
        v22 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong}&)(SortEntry const&,SortEntry const&),SortEntry*>(v27, v19, a3);
        v8 = v20 + 3;
        if (!std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong}&)(SortEntry const&,SortEntry const&),SortEntry*>(v20 + 3, (uint64_t)v7, a3))
        {
          if (v22)
          {
            v27 = v20 + 3;
            goto LABEL_18;
          }
LABEL_19:
          std::__introsort<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong}&)(SortEntry const&,SortEntry const&),SortEntry*,false>(v27, v20, a3, -v9, a5 & 1);
          v8 = v20 + 3;
LABEL_20:
          a5 = 0;
          v27 = v8;
          a4 = -v9;
          continue;
        }
        if ((v22 & 1) == 0)
        {
          v26 = v20;
          v8 = v27;
          v7 = v20;
LABEL_18:
          ++v9;
          goto LABEL_3;
        }
        return;
    }
  }
}

void std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<SortEntry *&,SortEntry *&>(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;

  v2 = *a1;
  v3 = *a2;
  v4 = **a1;
  v5 = (*a1)[1];
  *v2 = 0;
  v2[1] = 0;
  v6 = *((_DWORD *)v2 + 4);
  v7 = *(void **)v3;
  *(_QWORD *)v3 = 0;
  v8 = (void *)*v2;
  *v2 = (uint64_t)v7;

  v9 = *(_QWORD *)(v3 + 8);
  *(_QWORD *)(v3 + 8) = 0;
  v10 = (void *)v2[1];
  v2[1] = v9;

  *((_DWORD *)v2 + 4) = *(_DWORD *)(v3 + 16);
  v11 = *(void **)v3;
  *(_QWORD *)v3 = v4;

  v12 = *(void **)(v3 + 8);
  *(_QWORD *)(v3 + 8) = v5;

  *(_DWORD *)(v3 + 16) = v6;
}

void std::__insertion_sort[abi:sn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong}&)(SortEntry const&,SortEntry const&),SortEntry*>(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  _OWORD *v5;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  __int128 v22;
  int v23;

  if ((_OWORD *)a1 != a2)
  {
    v5 = (_OWORD *)(a1 + 24);
    if ((_OWORD *)(a1 + 24) != a2)
    {
      v7 = 0;
      v8 = (_OWORD *)a1;
      do
      {
        v9 = v5;
        if ((*(unsigned int (**)(void))(*(_QWORD *)a3 + 16))())
        {
          v10 = *v9;
          *(_QWORD *)v9 = 0;
          *((_QWORD *)v8 + 4) = 0;
          v22 = v10;
          v23 = *((_DWORD *)v8 + 10);
          v11 = v7;
          while (1)
          {
            v12 = a1 + v11;
            v13 = *(_QWORD *)(a1 + v11);
            *(_QWORD *)v12 = 0;
            v14 = *(void **)(a1 + v11 + 24);
            *(_QWORD *)(v12 + 24) = v13;

            v15 = *(_QWORD *)(a1 + v11 + 8);
            *(_QWORD *)(v12 + 8) = 0;
            v16 = *(void **)(a1 + v11 + 32);
            *(_QWORD *)(v12 + 32) = v15;

            *(_DWORD *)(v12 + 40) = *(_DWORD *)(v12 + 16);
            if (!v11)
              break;
            v11 -= 24;
            if (((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) == 0)
            {
              v17 = a1 + v11 + 24;
              goto LABEL_10;
            }
          }
          v17 = a1;
LABEL_10:
          v18 = v22;
          *(_QWORD *)&v22 = 0;
          v19 = *(void **)v17;
          *(_QWORD *)v17 = v18;

          v20 = *((_QWORD *)&v22 + 1);
          *((_QWORD *)&v22 + 1) = 0;
          v21 = *(void **)(v17 + 8);
          *(_QWORD *)(v17 + 8) = v20;

          *(_DWORD *)(v17 + 16) = v23;
        }
        v5 = (_OWORD *)((char *)v9 + 24);
        v7 += 24;
        v8 = v9;
      }
      while ((_OWORD *)((char *)v9 + 24) != a2);
    }
  }
}

void sub_1A3E249B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{

  _Unwind_Resume(a1);
}

void std::__insertion_sort_unguarded[abi:sn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong}&)(SortEntry const&,SortEntry const&),SortEntry*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  __int128 v23;
  int v24;

  if (a1 != a2)
  {
    v5 = (__int128 *)(a1 + 24);
    if (a1 + 24 != a2)
    {
      v7 = a1 - 24;
      v8 = -2;
      v9 = 1;
      v10 = a1;
      while (!(*(unsigned int (**)(void))(*(_QWORD *)a3 + 16))())
      {
LABEL_9:
        v10 = a1 + 24 * v9++;
        v5 = (__int128 *)(v10 + 24);
        v7 += 24;
        --v8;
        if (v10 + 24 == a2)
          return;
      }
      v11 = *v5;
      *(_QWORD *)v5 = 0;
      *(_QWORD *)(v10 + 32) = 0;
      v23 = v11;
      v24 = *(_DWORD *)(v10 + 40);
      v12 = v8;
      v13 = v7;
      while (1)
      {
        v14 = *(_QWORD *)(v13 + 24);
        *(_QWORD *)(v13 + 24) = 0;
        v15 = *(void **)(v13 + 48);
        *(_QWORD *)(v13 + 48) = v14;

        v16 = *(_QWORD *)(v13 + 32);
        *(_QWORD *)(v13 + 32) = 0;
        v17 = *(void **)(v13 + 56);
        *(_QWORD *)(v13 + 56) = v16;

        *(_DWORD *)(v13 + 64) = *(_DWORD *)(v13 + 40);
        if (__CFADD__(v12++, 1))
          break;
        v13 -= 24;
        if (((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) == 0)
        {
          v19 = v23;
          *(_QWORD *)&v23 = 0;
          v20 = *(void **)(v13 + 48);
          *(_QWORD *)(v13 + 48) = v19;

          v21 = *((_QWORD *)&v23 + 1);
          *((_QWORD *)&v23 + 1) = 0;
          v22 = *(void **)(v13 + 56);
          *(_QWORD *)(v13 + 56) = v21;

          *(_DWORD *)(v13 + 64) = v24;
          goto LABEL_9;
        }
      }
      __break(1u);
    }
  }
}

void sub_1A3E24B2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{

  _Unwind_Resume(a1);
}

uint64_t std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong}&)(SortEntry const&,SortEntry const&),SortEntry*>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  char v5;
  uint64_t result;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;

  v10 = a2;
  v11 = a1;
  v9 = a3;
  v5 = (*(uint64_t (**)(void))(*(_QWORD *)a4 + 16))();
  result = (*(uint64_t (**)(void))(*(_QWORD *)a4 + 16))();
  if ((v5 & 1) == 0)
  {
    if (!(_DWORD)result)
      return result;
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<SortEntry *&,SortEntry *&>(&v10, &v9);
    if (!(*(unsigned int (**)(void))(*(_QWORD *)a4 + 16))())
      return 1;
    v7 = &v11;
    v8 = (uint64_t *)&v10;
    goto LABEL_9;
  }
  if (!(_DWORD)result)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<SortEntry *&,SortEntry *&>(&v11, (uint64_t *)&v10);
    if (!(*(unsigned int (**)(void))(*(_QWORD *)a4 + 16))())
      return 1;
    v7 = &v10;
    v8 = &v9;
LABEL_9:
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<SortEntry *&,SortEntry *&>(v7, v8);
    return 2;
  }
  std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<SortEntry *&,SortEntry *&>(&v11, &v9);
  return 1;
}

void std::__partition_with_equals_on_left[abi:sn180100]<std::_ClassicAlgPolicy,SortEntry *,BOOL({block_pointer} {__strong}&)(SortEntry const&,SortEntry const&)>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  __int128 v6;
  uint64_t *v7;
  uint64_t *v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  __int128 v17;
  int v18;
  unint64_t v19;
  uint64_t *v20;

  v19 = (unint64_t)a2;
  v20 = a1;
  v6 = *(_OWORD *)a1;
  *a1 = 0;
  a1[1] = 0;
  v17 = v6;
  v18 = *((_DWORD *)a1 + 4);
  if (((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) != 0)
  {
    v7 = a1;
    while (1)
    {
      v7 += 3;
      v20 = v7;
      if (v7 == a2)
        goto LABEL_23;
      if (((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) != 0)
        goto LABEL_9;
    }
  }
  v8 = a1 + 3;
  do
  {
    v7 = v8;
    v20 = v8;
    if ((unint64_t)v8 >= v19)
      break;
    v9 = (*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))();
    v8 = v7 + 3;
  }
  while (!v9);
LABEL_9:
  v10 = v19;
  if ((unint64_t)v7 < v19)
  {
    while ((uint64_t *)v10 != a1)
    {
      v10 -= 24;
      v19 = v10;
      if (((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) == 0)
      {
        v7 = v20;
        goto LABEL_13;
      }
    }
    goto LABEL_23;
  }
LABEL_13:
  if ((unint64_t)v7 < v10)
  {
LABEL_14:
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<SortEntry *&,SortEntry *&>(&v20, (uint64_t *)&v19);
    while (1)
    {
      v20 += 3;
      if (v20 == a2)
        break;
      if ((*(unsigned int (**)(void))(*(_QWORD *)a3 + 16))())
      {
        while ((uint64_t *)v19 != a1)
        {
          v19 -= 24;
          if (((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) == 0)
          {
            v7 = v20;
            if ((unint64_t)v20 < v19)
              goto LABEL_14;
            goto LABEL_20;
          }
        }
        break;
      }
    }
LABEL_23:
    __break(1u);
    return;
  }
LABEL_20:
  if (v7 - 3 != a1)
  {
    v11 = *(v7 - 3);
    *(v7 - 3) = 0;
    v12 = (void *)*a1;
    *a1 = v11;

    v13 = *(v7 - 2);
    *(v7 - 2) = 0;
    v14 = (void *)a1[1];
    a1[1] = v13;

    *((_DWORD *)a1 + 4) = *((_DWORD *)v7 - 2);
  }
  v15 = (void *)*(v7 - 3);
  *(v7 - 3) = v17;

  v16 = (void *)*(v7 - 2);
  *(v7 - 2) = *((_QWORD *)&v17 + 1);

  *((_DWORD *)v7 - 2) = v18;
}

void sub_1A3E24E2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{

  _Unwind_Resume(a1);
}

void std::__partition_with_equals_on_right[abi:sn180100]<std::_ClassicAlgPolicy,SortEntry *,BOOL({block_pointer} {__strong}&)(SortEntry const&,SortEntry const&)>(__int128 *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  __int128 v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  __int128 v18;
  int v19;
  unint64_t v20;
  uint64_t *v21;

  v6 = 0;
  v20 = (unint64_t)a2;
  v7 = *a1;
  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  v18 = v7;
  v19 = *((_DWORD *)a1 + 4);
  do
  {
    v21 = (uint64_t *)((char *)a1 + v6 + 24);
    if (v21 == a2)
      goto LABEL_21;
    v6 += 24;
  }
  while (((*(uint64_t (**)(void))(*a3 + 16))() & 1) != 0);
  v8 = v20;
  if (v6 != 24)
  {
    while ((__int128 *)v8 != a1)
    {
      v8 -= 24;
      v20 = v8;
      if ((*(unsigned int (**)(void))(*a3 + 16))())
      {
        v9 = v21;
        goto LABEL_11;
      }
    }
    goto LABEL_21;
  }
  v9 = (uint64_t *)a1 + 3;
  do
  {
    if ((unint64_t)v9 >= v8)
      break;
    v10 = *a3;
    v8 -= 24;
    v20 = v8;
  }
  while (((*(uint64_t (**)(void))(v10 + 16))() & 1) == 0);
LABEL_11:
  v11 = v9;
  if ((unint64_t)v9 < v20)
  {
LABEL_12:
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<SortEntry *&,SortEntry *&>(&v21, (uint64_t *)&v20);
    while (1)
    {
      v21 += 3;
      if (v21 == a2)
        break;
      if (((*(uint64_t (**)(void))(*a3 + 16))() & 1) == 0)
      {
        while ((__int128 *)v20 != a1)
        {
          v20 -= 24;
          if ((*(unsigned int (**)(void))(*a3 + 16))())
          {
            v11 = v21;
            if ((unint64_t)v21 < v20)
              goto LABEL_12;
            goto LABEL_18;
          }
        }
        break;
      }
    }
LABEL_21:
    __break(1u);
    return;
  }
LABEL_18:
  if (v11 - 3 != (uint64_t *)a1)
  {
    v12 = *(v11 - 3);
    *(v11 - 3) = 0;
    v13 = *(void **)a1;
    *(_QWORD *)a1 = v12;

    v14 = *(v11 - 2);
    *(v11 - 2) = 0;
    v15 = (void *)*((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = v14;

    *((_DWORD *)a1 + 4) = *((_DWORD *)v11 - 2);
  }
  v16 = (void *)*(v11 - 3);
  *(v11 - 3) = v18;

  v17 = (void *)*(v11 - 2);
  *(v11 - 2) = *((_QWORD *)&v18 + 1);

  *((_DWORD *)v11 - 2) = v19;
}

void sub_1A3E25050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{

  _Unwind_Resume(a1);
}

uint64_t std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong}&)(SortEntry const&,SortEntry const&),SortEntry*>(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  _BOOL8 v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  __int128 v11;
  uint64_t *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  __int128 v22;
  int v23;
  uint64_t *v24;
  uint64_t *v25;

  v24 = (uint64_t *)a2;
  v25 = a1;
  v6 = 1;
  switch(0xAAAAAAAAAAAAAAABLL * ((a2 - (uint64_t)a1) >> 3))
  {
    case 0uLL:
    case 1uLL:
      return v6;
    case 2uLL:
      v7 = *a3;
      v24 = (uint64_t *)(a2 - 24);
      if ((*(unsigned int (**)(void))(v7 + 16))())
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<SortEntry *&,SortEntry *&>(&v25, (uint64_t *)&v24);
      return v6;
    case 3uLL:
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong}&)(SortEntry const&,SortEntry const&),SortEntry*>(a1, a1 + 3, a2 - 24, (uint64_t)a3);
      return v6;
    case 4uLL:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong}&)(SortEntry const&,SortEntry const&),SortEntry*>(a1, a1 + 3, a1 + 6, a2 - 24, a3);
      return v6;
    case 5uLL:
      std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong}&)(SortEntry const&,SortEntry const&),SortEntry*>(a1, a1 + 3, a1 + 6, a1 + 9, a2 - 24, a3);
      return v6;
    default:
      v8 = a1 + 6;
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong}&)(SortEntry const&,SortEntry const&),SortEntry*>(a1, a1 + 3, (uint64_t)(a1 + 6), (uint64_t)a3);
      v9 = a1 + 9;
      if (v9 == (uint64_t *)a2)
        return 1;
      v10 = 0;
      break;
  }
  while (!(*(unsigned int (**)(void))(*a3 + 16))())
  {
LABEL_12:
    v8 = v9;
    v9 += 3;
    if (v9 == v24)
      return 1;
  }
  v11 = *(_OWORD *)v9;
  *v9 = 0;
  v9[1] = 0;
  v22 = v11;
  v23 = *((_DWORD *)v9 + 4);
  do
  {
    v12 = v8;
    v13 = *v8;
    *v8 = 0;
    v14 = (void *)v8[3];
    v8[3] = v13;

    v15 = v8[1];
    v8[1] = 0;
    v16 = (void *)v8[4];
    v8[4] = v15;

    *((_DWORD *)v8 + 10) = *((_DWORD *)v8 + 4);
    if (v8 == v25)
      break;
    v8 -= 3;
  }
  while (((*(uint64_t (**)(void))(*a3 + 16))() & 1) != 0);
  v17 = v22;
  *(_QWORD *)&v22 = 0;
  v18 = (void *)*v12;
  *v12 = v17;

  v19 = *((_QWORD *)&v22 + 1);
  *((_QWORD *)&v22 + 1) = 0;
  v20 = (void *)v12[1];
  v12[1] = v19;

  *((_DWORD *)v12 + 4) = v23;
  if (++v10 != 8)
  {

    goto LABEL_12;
  }
  v6 = v9 + 3 == v24;

  return v6;
}

void sub_1A3E252B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{

  _Unwind_Resume(a1);
}

void std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong}&)(SortEntry const&,SortEntry const&),SortEntry*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;

  v8 = a2;
  v9 = a1;
  v6 = a4;
  v7 = a3;
  std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong}&)(SortEntry const&,SortEntry const&),SortEntry*>(a1, a2, (uint64_t)a3, (uint64_t)a5);
  if ((*(unsigned int (**)(_QWORD))(*a5 + 16))(*a5))
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<SortEntry *&,SortEntry *&>(&v7, &v6);
    if ((*(unsigned int (**)(_QWORD))(*a5 + 16))(*a5))
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<SortEntry *&,SortEntry *&>(&v8, (uint64_t *)&v7);
      if ((*(unsigned int (**)(_QWORD))(*a5 + 16))(*a5))
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<SortEntry *&,SortEntry *&>(&v9, (uint64_t *)&v8);
    }
  }
}

void std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong}&)(SortEntry const&,SortEntry const&),SortEntry*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, _QWORD *a6)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;

  v10 = a2;
  v11 = a1;
  v8 = a4;
  v9 = a3;
  v7 = a5;
  std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong}&)(SortEntry const&,SortEntry const&),SortEntry*>(a1, a2, a3, (uint64_t)a4, a6);
  if ((*(unsigned int (**)(void))(*a6 + 16))())
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<SortEntry *&,SortEntry *&>(&v8, &v7);
    if ((*(unsigned int (**)(void))(*a6 + 16))())
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<SortEntry *&,SortEntry *&>(&v9, (uint64_t *)&v8);
      if ((*(unsigned int (**)(void))(*a6 + 16))())
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<SortEntry *&,SortEntry *&>(&v10, (uint64_t *)&v9);
        if ((*(unsigned int (**)(void))(*a6 + 16))())
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<SortEntry *&,SortEntry *&>(&v11, (uint64_t *)&v10);
      }
    }
  }
}

uint64_t *std::__partial_sort_impl[abi:sn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong}&)(SortEntry const&,SortEntry const&),SortEntry*,SortEntry*>(__int128 *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 *v12;
  unint64_t v13;
  uint64_t *v16;
  __int128 *v17;

  v17 = a1;
  if (a1 != (__int128 *)a2)
  {
    v6 = a2;
    v7 = a1;
    v8 = (char *)a2 - (char *)a1;
    v9 = ((char *)a2 - (char *)a1) / 24;
    if ((char *)a2 - (char *)a1 >= 25)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (__int128 *)((char *)a1 + 24 * v10);
      do
      {
        std::__sift_down[abi:sn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong}&)(SortEntry const&,SortEntry const&),SortEntry*>((uint64_t)v7, a4, v9, v12);
        v12 = (__int128 *)((char *)v12 - 24);
        --v11;
      }
      while (v11);
    }
    v16 = v6;
    if (v6 == a3)
    {
      a3 = v6;
    }
    else
    {
      do
      {
        if ((*(unsigned int (**)(void))(*(_QWORD *)a4 + 16))())
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<SortEntry *&,SortEntry *&>(&v16, (uint64_t *)&v17);
          std::__sift_down[abi:sn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong}&)(SortEntry const&,SortEntry const&),SortEntry*>((uint64_t)v17, a4, v9, v17);
        }
        v16 += 3;
      }
      while (v16 != a3);
      v7 = v17;
      v8 = (char *)v6 - (char *)v17;
    }
    if (v8 >= 25)
    {
      v13 = v8 / 0x18uLL;
      do
      {
        std::__pop_heap[abi:sn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong})(SortEntry const&,SortEntry const&),SortEntry*>((uint64_t)v7, (uint64_t)v6, a4, v13);
        v6 -= 3;
      }
      while (v13-- > 2);
      return v16;
    }
  }
  return a3;
}

void std::__sift_down[abi:sn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong}&)(SortEntry const&,SortEntry const&),SortEntry*>(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  unint64_t v4;
  __int128 *v5;
  uint64_t v7;
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  __int128 v13;
  __int128 *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  __int128 v22;
  int v23;

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - a1) >> 3)))
    {
      v10 = (0x5555555555555556 * (((uint64_t)a4 - a1) >> 3)) | 1;
      v11 = (__int128 *)(a1 + 24 * v10);
      v12 = 0x5555555555555556 * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v12 < a3 && (*(unsigned int (**)(void))(*(_QWORD *)a2 + 16))())
      {
        v11 = (__int128 *)((char *)v11 + 24);
        v10 = v12;
      }
      if (((*(uint64_t (**)(void))(*(_QWORD *)a2 + 16))() & 1) == 0)
      {
        v13 = *v5;
        *(_QWORD *)v5 = 0;
        *((_QWORD *)v5 + 1) = 0;
        v22 = v13;
        v23 = *((_DWORD *)v5 + 4);
        do
        {
          v14 = v11;
          v15 = *(_QWORD *)v11;
          *(_QWORD *)v11 = 0;
          v16 = *(void **)v5;
          *(_QWORD *)v5 = v15;

          v17 = *((_QWORD *)v11 + 1);
          *((_QWORD *)v11 + 1) = 0;
          v18 = (void *)*((_QWORD *)v5 + 1);
          *((_QWORD *)v5 + 1) = v17;

          *((_DWORD *)v5 + 4) = *((_DWORD *)v11 + 4);
          if (v7 < v10)
            break;
          v19 = (2 * v10) | 1;
          v11 = (__int128 *)(a1 + 24 * v19);
          v10 = 2 * v10 + 2;
          if (v10 >= a3)
          {
            v10 = v19;
          }
          else if ((*(unsigned int (**)(void))(*(_QWORD *)a2 + 16))())
          {
            v11 = (__int128 *)((char *)v11 + 24);
          }
          else
          {
            v10 = v19;
          }
          v5 = v14;
        }
        while (!(*(unsigned int (**)(void))(*(_QWORD *)a2 + 16))());
        v20 = *(void **)v14;
        *(_QWORD *)v14 = v22;

        v21 = (void *)*((_QWORD *)v14 + 1);
        *((_QWORD *)v14 + 1) = *((_QWORD *)&v22 + 1);

        *((_DWORD *)v14 + 4) = v23;
      }
    }
  }
}

void sub_1A3E257A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{

  _Unwind_Resume(a1);
}

void std::__pop_heap[abi:sn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong})(SortEntry const&,SortEntry const&),SortEntry*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v7;
  void *v8;
  int v9;
  void **v10;
  void **v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  if (a4 <= 0)
  {
    __break(1u);
  }
  else if (a4 != 1)
  {
    v8 = *(void **)a1;
    v7 = *(void **)(a1 + 8);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    v9 = *(_DWORD *)(a1 + 16);
    v10 = (void **)std::__floyd_sift_down[abi:sn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong}&)(SortEntry const&,SortEntry const&),SortEntry*>(a1, a3, a4);
    v11 = v10;
    if (v10 == (void **)(a2 - 24))
    {
      v18 = *v10;
      *v10 = v8;

      v19 = v11[1];
      v11[1] = v7;

      *((_DWORD *)v11 + 4) = v9;
    }
    else
    {
      v12 = *(void **)(a2 - 24);
      *(_QWORD *)(a2 - 24) = 0;
      v13 = *v10;
      *v10 = v12;

      v14 = *(void **)(a2 - 16);
      *(_QWORD *)(a2 - 16) = 0;
      v15 = v11[1];
      v11[1] = v14;

      *((_DWORD *)v11 + 4) = *(_DWORD *)(a2 - 8);
      v16 = *(void **)(a2 - 24);
      *(_QWORD *)(a2 - 24) = v8;

      v17 = *(void **)(a2 - 16);
      *(_QWORD *)(a2 - 16) = v7;

      *(_DWORD *)(a2 - 8) = v9;
      std::__sift_up[abi:sn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong}&)(SortEntry const&,SortEntry const&),SortEntry*>(a1, (uint64_t)(v11 + 3), a3, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v11 - a1 + 24) >> 3));
    }
  }
}

void sub_1A3E258D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t std::__floyd_sift_down[abi:sn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong}&)(SortEntry const&,SortEntry const&),SortEntry*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = a1 + 24 * v6 + 24;
    v10 = (2 * v6) | 1;
    v11 = 2 * v6 + 2;
    if (v11 < a3 && (*(unsigned int (**)(void))(*(_QWORD *)a2 + 16))())
    {
      v9 += 24;
      v10 = v11;
    }
    v12 = *(_QWORD *)v9;
    *(_QWORD *)v9 = 0;
    v13 = *(void **)a1;
    *(_QWORD *)a1 = v12;

    v14 = *(_QWORD *)(v9 + 8);
    *(_QWORD *)(v9 + 8) = 0;
    v15 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v14;

    *(_DWORD *)(a1 + 16) = *(_DWORD *)(v9 + 16);
    a1 = v9;
    v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

void std::__sift_up[abi:sn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong}&)(SortEntry const&,SortEntry const&),SortEntry*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  __int128 v11;
  uint64_t *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  __int128 v21;
  int v22;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v8 = v4 >> 1;
    v9 = (uint64_t *)(a1 + 24 * (v4 >> 1));
    v10 = (uint64_t *)(a2 - 24);
    if ((*(unsigned int (**)(void))(*(_QWORD *)a3 + 16))())
    {
      v11 = *(_OWORD *)(a2 - 24);
      *(_QWORD *)(a2 - 24) = 0;
      *(_QWORD *)(a2 - 16) = 0;
      v21 = v11;
      v22 = *(_DWORD *)(a2 - 8);
      do
      {
        v12 = v9;
        v13 = *v9;
        *v9 = 0;
        v14 = (void *)*v10;
        *v10 = v13;

        v15 = v9[1];
        v9[1] = 0;
        v16 = (void *)v10[1];
        v10[1] = v15;

        *((_DWORD *)v10 + 4) = *((_DWORD *)v9 + 4);
        if (!v8)
          break;
        v8 = (v8 - 1) >> 1;
        v9 = (uint64_t *)(a1 + 24 * v8);
        v10 = v12;
      }
      while (((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) != 0);
      v17 = v21;
      *(_QWORD *)&v21 = 0;
      v18 = (void *)*v12;
      *v12 = v17;

      v19 = *((_QWORD *)&v21 + 1);
      *((_QWORD *)&v21 + 1) = 0;
      v20 = (void *)v12[1];
      v12[1] = v19;

      *((_DWORD *)v12 + 4) = v22;
    }
  }
}

void sub_1A3E25AF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{

  _Unwind_Resume(a1);
}

uint64_t ___ZL17findLiteralStringP7NSArrayP8NSString_block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;

  v3 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(v3, "userTypedString");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v4, "isEqualToString:", *(_QWORD *)(a1 + 32));

  }
  else
  {
    v5 = 0;
  }

  return v5;
}

void sub_1A3E25B8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

double elementBounds(WBSFormControlMetadata *a1)
{
  WBSFormControlMetadata *v1;
  double v2;
  double v3;

  v1 = a1;
  -[WBSFormControlMetadata rectLeft](v1, "rectLeft");
  v3 = v2;
  -[WBSFormControlMetadata rectTop](v1, "rectTop");
  -[WBSFormControlMetadata rectWidth](v1, "rectWidth");
  -[WBSFormControlMetadata rectHeight](v1, "rectHeight");

  return v3;
}

void sub_1A3E25C18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t fieldLooksLikeDateField(WBSFormControlMetadata *a1)
{
  WBSFormControlMetadata *v1;
  uint64_t v2;

  v1 = a1;
  v2 = -[WBSFormControlMetadata looksLikeDayField](v1, "looksLikeDayField")
    || -[WBSFormControlMetadata looksLikeMonthField](v1, "looksLikeMonthField")
    || -[WBSFormControlMetadata looksLikeYearField](v1, "looksLikeYearField");

  return v2;
}

void sub_1A3E25C78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL fieldLooksLikeItExpectsDataOfSize(WBSFormControlMetadata *a1, uint64_t a2)
{
  WBSFormControlMetadata *v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v7;

  v3 = a1;
  v4 = -[WBSFormControlMetadata size](v3, "size");
  v5 = -[WBSFormControlMetadata maxLength](v3, "maxLength");
  v7 = v4 <= a2 || v5 <= a2;

  return v7;
}

void sub_1A3E25CD8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t dateComponentValue(int a1, void *a2)
{
  uint64_t v2;
  id v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;

  v4 = a2;
  v5 = objc_alloc(MEMORY[0x1E0C99D48]);
  v6 = (void *)objc_msgSend(v5, "initWithCalendarIdentifier:", *MEMORY[0x1E0C996C8]);
  objc_msgSend(v6, "components:fromDate:", 28, v4);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v7;
  switch(a1)
  {
    case 0:
      v9 = objc_msgSend(v7, "day");
      goto LABEL_7;
    case 1:
      v9 = objc_msgSend(v7, "month");
      goto LABEL_7;
    case 2:
      v9 = objc_msgSend(v7, "year");
LABEL_7:
      v2 = v9;
      break;
  }

  return v2;
}

void sub_1A3E25D9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id dateComponentSynonyms(int a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  unint64_t v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;

  v3 = a2;
  v4 = objc_alloc(MEMORY[0x1E0C99E10]);
  if (a1 == 1)
    v5 = 6;
  else
    v5 = 2;
  v6 = (void *)objc_msgSend(v4, "initWithCapacity:", v5);
  v7 = dateComponentValue(a1, v3);
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%lu"), v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v8);

  if (a1 == 2 || v7 <= 9)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%02lu"), v7 % 0x64);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "addObject:", v9);

  }
  if (a1 == 1)
  {
    v10 = objc_alloc_init(MEMORY[0x1E0CB3578]);
    objc_msgSend(v10, "setDateFormat:", CFSTR("MMMM"));
    objc_msgSend(v10, "stringFromDate:", v3);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "addObject:", v11);

    objc_msgSend(v10, "setDateFormat:", CFSTR("MMM"));
    objc_msgSend(v10, "stringFromDate:", v3);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "addObject:", v12);

    objc_msgSend(v10, "setDateFormat:", CFSTR("LLLL"));
    objc_msgSend(v10, "stringFromDate:", v3);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "addObject:", v13);

    objc_msgSend(v10, "setDateFormat:", CFSTR("LLL"));
    objc_msgSend(v10, "stringFromDate:", v3);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "addObject:", v14);

    v15 = objc_alloc(MEMORY[0x1E0C99DC8]);
    v16 = (void *)objc_msgSend(v15, "initWithLocaleIdentifier:", *MEMORY[0x1E0D89D30]);
    objc_msgSend(v10, "setLocale:", v16);
    objc_msgSend(v10, "setDateFormat:", CFSTR("MMMM"));
    objc_msgSend(v10, "stringFromDate:", v3);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "addObject:", v17);

    objc_msgSend(v10, "setDateFormat:", CFSTR("MMM"));
    objc_msgSend(v10, "stringFromDate:", v3);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "addObject:", v18);

  }
  return v6;
}

void sub_1A3E2604C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v4;

  _Unwind_Resume(a1);
}

void recordValueForDateField(void *a1, int a2, void *a3, void *a4)
{
  id v7;
  WBSFormControlMetadata *v8;
  void *v9;
  _BOOL4 v10;
  unint64_t v11;
  NSString *v12;
  void *v13;
  int v14;
  NSArray *v15;
  void *v16;
  NSArray *v17;
  unint64_t v18;
  NSMutableDictionary *v19;

  v19 = a1;
  v7 = a3;
  v8 = a4;
  -[WBSFormControlMetadata tagName](v8, "tagName");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = -[WBSFormControlMetadata isTextField](v8, "isTextField");
  if ((objc_msgSend(v9, "safari_isCaseInsensitiveEqualToString:", CFSTR("input")) & v10) == 1)
  {
    v11 = dateComponentValue(a2, v7);
    if (a2 == 2)
    {
      if (-[WBSFormControlMetadata maxLength](v8, "maxLength") == 2
        || (-[WBSFormControlMetadata placeholder](v8, "placeholder"),
            v12 = (NSString *)objc_claimAutoreleasedReturnValue(),
            canonicalizedDateTemplate(v12),
            v13 = (void *)objc_claimAutoreleasedReturnValue(),
            v14 = objc_msgSend(v13, "isEqualToString:", CFSTR("yy")),
            v13,
            v12,
            v14))
      {
        v11 %= 0x64uLL;
      }
    }
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%02lu"), v11);
    v15 = (NSArray *)objc_claimAutoreleasedReturnValue();
    recordValueForTextField(v19, (NSString *)&v15->super.isa, v8);
  }
  else
  {
    -[WBSFormControlMetadata selectElementInfo](v8, "selectElementInfo");
    v15 = (NSArray *)objc_claimAutoreleasedReturnValue();
    if (v15)
    {
      dateComponentSynonyms(a2, v7);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "array");
      v17 = (NSArray *)objc_claimAutoreleasedReturnValue();
      v18 = indexOfItemInSelectElement(v15, v17);

      if (v18 != 0x7FFFFFFFFFFFFFFFLL)
        recordIndexForSelectElement(v19, v18, v8);
    }
  }

}

void sub_1A3E26280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  v15 = v13;

  _Unwind_Resume(a1);
}

NSString *canonicalizedDateTemplate(NSString *a1)
{
  NSString *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  NSString *v7;
  void *v9;

  v1 = a1;
  if (-[NSString length](v1, "length"))
  {
    objc_msgSend(MEMORY[0x1E0CB3500], "whitespaceCharacterSet");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    -[NSString safari_stringByRemovingCharactersInSet:](v1, "safari_stringByRemovingCharactersInSet:", v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

    {
      objc_msgSend(MEMORY[0x1E0CB3500], "characterSetWithCharactersInString:", CFSTR("dmyDMY/.-"));
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "invertedSet");
      canonicalizedDateTemplate(NSString *)::invalidCharacterSet = objc_claimAutoreleasedReturnValue();

    }
    if (objc_msgSend(v3, "rangeOfCharacterFromSet:", canonicalizedDateTemplate(NSString *)::invalidCharacterSet) == 0x7FFFFFFFFFFFFFFFLL)
    {
      objc_msgSend(v3, "stringByReplacingOccurrencesOfString:withString:", CFSTR("D"), CFSTR("d"));
      v4 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v4, "stringByReplacingOccurrencesOfString:withString:", CFSTR("m"), CFSTR("M"));
      v5 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v5, "stringByReplacingOccurrencesOfString:withString:", CFSTR("Y"), CFSTR("y"));
      v6 = (void *)objc_claimAutoreleasedReturnValue();

      v1 = v6;
      v7 = v1;
    }
    else
    {
      v7 = 0;
      v1 = (NSString *)v3;
    }
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

void sub_1A3E26458(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t indexOfItemInSelectElement(NSArray *a1, NSArray *a2)
{
  NSArray *v3;
  NSArray *v4;
  uint64_t v5;
  void *v6;
  uint64_t i;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  NSArray *v21;
  unint64_t v22;

  v3 = a1;
  v4 = a2;
  v5 = -[NSArray count](v3, "count");
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      -[NSArray safari_arrayAtIndex:](v3, "safari_arrayAtIndex:", i);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "safari_stringAtIndex:", 1);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "addObject:", v9);

    }
  }
  v10 = -[NSArray count](v4, "count");
  v11 = 0x7FFFFFFFFFFFFFFFLL;
  if (v10 - 1 >= 0)
  {
    v21 = v3;
    v12 = -1;
    v13 = 0x7FFFFFFFFFFFFFFFLL;
    do
    {
      --v10;
      v22 = -1;
      -[NSArray safari_stringAtIndex:](v4, "safari_stringAtIndex:", v10, v21);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = +[WBSFormToABBinder indexOfBestMatchForString:inArray:startingPosition:](WBSFormToABBinder, "indexOfBestMatchForString:inArray:startingPosition:", v14, v6, &v22);

      v16 = v22;
      if (v22 >= v12)
        v17 = v13;
      else
        v17 = v15;
      if (v22 >= v12)
        v16 = v12;
      if (v15 != 0x7FFFFFFFFFFFFFFFLL)
      {
        v13 = v17;
        v12 = v16;
      }
    }
    while (v10 > 0);
    v11 = 0x7FFFFFFFFFFFFFFFLL;
    v3 = v21;
    if (v13 != 0x7FFFFFFFFFFFFFFFLL)
    {
      -[NSArray safari_arrayAtIndex:](v21, "safari_arrayAtIndex:", v13);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "safari_numberAtIndex:", 0);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = objc_msgSend(v19, "unsignedIntValue");

    }
  }

  return v11;
}

void sub_1A3E26634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void ___ZL18postCodeCandidatesP8NSStringb_block_invoke(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if (objc_msgSend(v3, "length"))
  {
    if (objc_msgSend(*(id *)(a1 + 32), "length"))
      objc_msgSend(*(id *)(a1 + 32), "appendString:", CFSTR("-"));
    objc_msgSend(*(id *)(a1 + 32), "appendString:", v3);
  }

}

void sub_1A3E2670C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void recordStreetAddressValueForFieldOrMarkAsIgnored(void *a1, void *a2, int a3, void *a4, void *a5)
{
  unint64_t v7;
  NSMutableDictionary *v9;
  id v10;
  WBSFormControlMetadata *v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  uint64_t v17;
  __CFString *v18;
  _QWORD v19[4];
  id v20;

  LODWORD(v7) = a3;
  v9 = a1;
  v10 = a2;
  v11 = a4;
  v12 = a5;
  -[WBSFormControlMetadata uniqueID](v11, "uniqueID");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = v10;
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 3221225472;
  v19[2] = ___ZL22decomposeStreetAddressP8NSString20StreetDecomposeStyle_block_invoke;
  v19[3] = &unk_1E4B39C48;
  v16 = v15;
  v20 = v16;
  objc_msgSend(v14, "enumerateLinesUsingBlock:", v19);
  if (objc_msgSend(v16, "count"))
  {
    v7 = v7;
    switch((int)v7)
    {
      case 0:
        goto LABEL_5;
      case 1:
        v7 = 1;
        goto LABEL_5;
      case 2:
        v7 = 2;
LABEL_5:
        if (v7 >= objc_msgSend(v16, "count"))
          goto LABEL_8;
        objc_msgSend(v16, "objectAtIndex:", v7);
        v17 = objc_claimAutoreleasedReturnValue();
        break;
      case 3:
        if (objc_msgSend(v16, "count") == 1)
          goto LABEL_8;
        objc_msgSend(v16, "removeObjectAtIndex:", 0);
        goto LABEL_10;
      default:
LABEL_10:
        objc_msgSend(v16, "componentsJoinedByString:", CFSTR(", "));
        v17 = objc_claimAutoreleasedReturnValue();
        break;
    }
    v18 = (__CFString *)v17;
  }
  else
  {
LABEL_8:
    v18 = &stru_1E4B40D18;
  }

  if (-[__CFString length](v18, "length"))
    recordValueForTextField(v9, &v18->isa, v11);
  else
    objc_msgSend(v12, "addControlUniqueIDIgnoredByFollowUpAutoFill:", v13);

}

void sub_1A3E268F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void ___ZL22decomposeStreetAddressP8NSString20StreetDecomposeStyle_block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v5 = a2;
  objc_msgSend(v5, "safari_stringByTrimmingWhitespace");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "length");

  if (v4)
    objc_msgSend(*(id *)(a1 + 32), "addObject:", v5);

}

void sub_1A3E269A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t ___ZL43controlsContainTextFieldWithControlUniqueIDP7NSArrayIP22WBSFormControlMetadataEP8NSString_block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;

  v3 = a2;
  objc_msgSend(v3, "uniqueID");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v4, "isEqualToString:", *(_QWORD *)(a1 + 32)))
    v5 = objc_msgSend(v3, "isTextField");
  else
    v5 = 0;

  return v5;
}

void sub_1A3E26A28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<SortEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  void **v4;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
    WTF::VectorDestructor<true,SortEntry>::destruct(*(void ***)a1, (void **)(*(_QWORD *)a1 + 24 * v3));
  v4 = *(void ***)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

void WTF::VectorDestructor<true,SortEntry>::destruct(void **a1, void **a2)
{
  void **v3;
  void *v4;

  if (a1 != a2)
  {
    v3 = a1;
    do
    {

      v4 = *v3;
      v3 += 3;

    }
    while (v3 != a2);
  }
}

uint64_t WTF::Vector<SortEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,SortEntry&>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;

  v3 = WTF::Vector<SortEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 12);
  *(_QWORD *)v4 = *(id *)v3;
  *(_QWORD *)(v4 + 8) = *(id *)(v3 + 8);
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(v3 + 16);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<SortEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 24 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<SortEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<SortEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<SortEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  __int128 *v3;
  __int128 *v4;
  int v5;
  uint64_t v6;
  void *v7;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0xAAAAAAB)
    {
      __break(0xC471u);
      JUMPOUT(0x1A3E26C98);
    }
    v3 = *(__int128 **)a1;
    v4 = (__int128 *)(*(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 12));
    v5 = 24 * a2;
    v6 = WTF::fastMalloc((WTF *)(24 * a2));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)a1 = v6;
    WTF::VectorMover<false,SortEntry>::move(v3, v4, v6);
    if (v3)
    {
      if (*(__int128 **)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((WTF *)v3, v7);
    }
  }
  return 1;
}

void WTF::VectorMover<false,SortEntry>::move(__int128 *a1, __int128 *a2, uint64_t a3)
{
  __int128 *v5;
  __int128 v6;
  void *v7;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      v6 = *v5;
      *(_QWORD *)v5 = 0;
      *((_QWORD *)v5 + 1) = 0;
      *(_OWORD *)a3 = v6;
      *(_DWORD *)(a3 + 16) = *((_DWORD *)v5 + 4);

      v7 = *(void **)v5;
      v5 = (__int128 *)((char *)v5 + 24);

      a3 += 24;
    }
    while (v5 != a2);
  }
}

void sub_1A3E26E1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1A3E2706C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A3E27408(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E27544(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E276BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

id stringForKey(void *a1, uint64_t a2)
{
  void *v2;
  void *v3;

  objc_msgSend(a1, "objectForKeyedSubscript:", a2);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v2, "isString"))
  {
    objc_msgSend(v2, "toString");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v3 = 0;
  }

  return v3;
}

uint64_t SafariShared::FrameMetadata::FrameMetadata(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  const OpaqueJSContext *v9;
  uint64_t v10;
  OpaqueJSValue *GlobalObject;
  BOOL HasProperty;
  uint64_t ReferencingImmortalASCIIText;
  void *v14;
  NSObject *v16;
  uint64_t v17;
  _BYTE propertyName[12];
  __int16 v19;
  int v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)a1 = &off_1E4B39D68;
  v7 = v5;
  *(_QWORD *)(a1 + 48) = v7;
  v8 = v6;
  *(_QWORD *)(a1 + 56) = v8;
  v9 = (const OpaqueJSContext *)objc_msgSend(*(id *)(a1 + 48), "jsContextForMetadataControllerScriptWorld");
  if (!v9)
    goto LABEL_16;
  {
    SafariShared::FrameMetadata::FrameMetadata(objc_object  {objcproto20WBSFormAutoFillFrame}*,WBSFormMetadataController *)::frameMetadataScripts[0] = (uint64_t)"FormMetadata.js";
    *(_QWORD *)algn_1EE6FE3A8 = "FormMetadataJS";
    qword_1EE6FE3B0 = (uint64_t)formMetadataSource;
    unk_1EE6FE3B8 = formMetadataSourceLength;
    qword_1EE6FE3C0 = 0;
    unk_1EE6FE3C8 = "FormMetadataClassification.js";
    qword_1EE6FE3D0 = (uint64_t)"FormMetadataClassificationJS";
    unk_1EE6FE3D8 = formMetadataClassificationSource;
    qword_1EE6FE3E0 = formMetadataClassificationSourceLength;
    unk_1EE6FE3E8 = 0;
    qword_1EE6FE3F0 = (uint64_t)"AutomaticPassword.js";
    unk_1EE6FE3F8 = "AutomaticPasswordsJS";
    qword_1EE6FE400 = (uint64_t)"//# sourceURL=__InjectedScript_AutomaticPasswords.js\n"
                               "/* Copyright (c) 2024 Apple Inc. All rights reserved. */\n"
                               "FormMetadata.prototype._collectExtraControlMetadata=function(t,o){let e=t.getAttribute(\""
                               "passwordrules\");o.ControlPasswordRules=e||void 0},FormMetadata.prototype.removeAutomatic"
                               "StrongPasswordFromPasswordElement=function(t){let o=this.formControlWithUniqueID(t);o&&th"
                               "is._isTextField(o)&&(this.clearField(t),this._updateAnnotationsForField(o),FormMetadataJS"
                               "Controller.setInputElementAutofilled(o,!1))};let AutomaticPasswords=function(){};Automati"
                               "cPasswords.prototype={removeAutomaticPasswordElements:function(t,o,e){for (let o of t)Form"
                               "MetadataJS.removeAutomaticStrongPasswordFromPasswordElement(o);if (!e)return;let r=documen"
                               "t.activeElement,a=o?FormMetadataJS.formControlWithUniqueID(o):null;a&&a.blur(),a&&a===r&&"
                               "a.focus()},blurControlWithID:function(t){let o=t?FormMetadataJS.formControlWithUniqueID(t"
                               "):null;o&&o.blur()},setStrongPasswordElementViewableIfAppropriate:function(t,o){for (let e"
                               " of t){let t=FormMetadataJS.formControlWithUniqueID(e);if (!t)return;if (\"text\"===t.type)"
                               "return FormMetadataJSController.setInputElementAutoFilledAndViewable(t,!1),void FormMetad"
                               "ataJSController.setInputElementAutofilled(t,!1);FormMetadataJSController.setInputElementA"
                               "utoFilledAndViewable(t,o)}}};var AutomaticPasswordsJS=new AutomaticPasswords;";
    unk_1EE6FE408 = automaticPasswordsSourceLength;
    qword_1EE6FE410 = 0;
  }
  v10 = 0;
  while (1)
  {
    GlobalObject = JSContextGetGlobalObject(v9);
    SafariShared::JSUtilities::jsString((SafariShared::JSUtilities *)SafariShared::FrameMetadata::FrameMetadata(objc_object  {objcproto20WBSFormAutoFillFrame}*,WBSFormMetadataController *)::frameMetadataScripts[v10 + 1], (JSStringRef *)propertyName);
    HasProperty = JSObjectHasProperty(v9, GlobalObject, *(JSStringRef *)propertyName);
    if (*(_QWORD *)propertyName)
      JSStringRelease(*(JSStringRef *)propertyName);
    if (HasProperty)
      goto LABEL_14;
    if (!SafariShared::FrameMetadata::FrameMetadata(objc_object  {objcproto20WBSFormAutoFillFrame}*,WBSFormMetadataController *)::frameMetadataScripts[v10 + 4])
      break;
LABEL_11:
    *(_QWORD *)propertyName = 0;
    if (!JSScriptEvaluate() && *(_QWORD *)propertyName)
    {
      v14 = (void *)WBS_LOG_CHANNEL_PREFIXAutoFill();
      SafariShared::JSUtilities::logExceptionInChannel(v14, v9, *(const OpaqueJSValue **)propertyName);
    }
LABEL_14:
    v10 += 5;
    if (v10 == 15)
    {
      SafariShared::JSController::addScriptObjectToGlobalObject((SafariShared::JSController *)a1, v9);
      SafariShared::JSController::scriptObjectReady((SafariShared::JSController *)a1, v9);
      goto LABEL_16;
    }
  }
  JSContextGetGroup(v9);
  ReferencingImmortalASCIIText = JSScriptCreateReferencingImmortalASCIIText();
  if (ReferencingImmortalASCIIText)
  {
    SafariShared::FrameMetadata::FrameMetadata(objc_object  {objcproto20WBSFormAutoFillFrame}*,WBSFormMetadataController *)::frameMetadataScripts[v10 + 4] = ReferencingImmortalASCIIText;

    goto LABEL_11;
  }
  v16 = WBS_LOG_CHANNEL_PREFIXAutoFill();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    v17 = SafariShared::FrameMetadata::FrameMetadata(objc_object  {objcproto20WBSFormAutoFillFrame}*,WBSFormMetadataController *)::frameMetadataScripts[v10];
    *(_DWORD *)propertyName = 136446722;
    *(_QWORD *)&propertyName[4] = v17;
    v19 = 1024;
    v20 = 0;
    v21 = 2114;
    v22 = 0;
    _os_log_error_impl(&dword_1A3D90000, v16, OS_LOG_TYPE_ERROR, "Failed to create script %{public}s: line %i: %{public}@", propertyName, 0x1Cu);
  }

LABEL_16:
  return a1;
}

void sub_1A3E29708(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, JSStringRef string)
{
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;

  SafariShared::JSController::~JSController((WTF **)v11);
  _Unwind_Resume(a1);
}

JSClassRef SafariShared::FrameMetadata::staticJSClass(SafariShared::FrameMetadata *this)
{
  JSClassRef result;

    return (JSClassRef)SafariShared::FrameMetadata::staticJSClass(void)::jsClass;
  result = SafariShared::JSController::createJSClass(this);
  SafariShared::FrameMetadata::staticJSClass(void)::jsClass = (uint64_t)result;
  return result;
}

char **SafariShared::FrameMetadata::staticFunctions(SafariShared::FrameMetadata *this)
{
  return &SafariShared::FrameMetadata::staticFunctions(void)::staticFunctions;
}

JSValueRef SafariShared::jsSetInputElementAutofilled(JSContextRef ctx, const OpaqueJSContext *a2, JSObjectRef object, OpaqueJSValue *a4, JSValueRef *a5, const OpaqueJSValue *const *a6, const OpaqueJSValue **a7)
{
  id *v9;
  id *v10;
  void *v11;
  _BOOL8 v12;
  id v13;
  id v14;
  JSValueRef Undefined;

  if (a4 != (OpaqueJSValue *)2)
    return JSValueMakeUndefined(ctx);
  v9 = (id *)SafariShared::JSController::jsController(object);
  if (!v9)
    return JSValueMakeUndefined(ctx);
  v10 = v9;
  objc_msgSend(v9[7], "formAutoFillNodeForJSWrapper:inContext:", JSValueToObject(ctx, *a5, 0), ctx);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (v11)
  {
    v12 = JSValueToBoolean(ctx, a5[1]);
    objc_msgSend(v11, "setHTMLInputElementAutofilled:", v12);
    if (v12)
    {
      v13 = v10[6];
      v14 = v10[7];
      objc_msgSend(v14, "autoFilledField:inFrame:", v11, v13);

    }
  }
  Undefined = JSValueMakeUndefined(ctx);

  return Undefined;
}

void sub_1A3E298AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

JSValueRef SafariShared::jsSetInputElementAutoFilledAndViewable(SafariShared *this, const OpaqueJSContext *a2, JSObjectRef object, OpaqueJSValue *a4, JSValueRef *a5, const OpaqueJSValue *const *a6, const OpaqueJSValue **a7)
{
  id *v9;
  void *v10;
  JSValueRef Undefined;

  v9 = (id *)SafariShared::JSController::jsController(object);
  if (!v9)
    return JSValueMakeUndefined(this);
  objc_msgSend(v9[7], "formAutoFillNodeForJSWrapper:inContext:", JSValueToObject(this, *a5, 0), this);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (v10)
    objc_msgSend(v10, "setHTMLInputElementAutoFilledAndViewable:", JSValueToBoolean(this, a5[1]));
  Undefined = JSValueMakeUndefined(this);

  return Undefined;
}

void sub_1A3E29970(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

JSValueRef SafariShared::jsFinishedAutoFillingControlsInForm(JSContextRef ctx, const OpaqueJSContext *a2, JSObjectRef object, OpaqueJSValue *a4, uint64_t *a5, const OpaqueJSValue *const *a6, const OpaqueJSValue **a7)
{
  id *v9;
  id *v10;
  WBSFormMetadata *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  WBSFormMetadata *v16;
  id v17;
  id v18;
  JSValueRef Undefined;

  if (a4 != (OpaqueJSValue *)2)
    return JSValueMakeUndefined(ctx);
  v9 = (id *)SafariShared::JSController::jsController(object);
  if (!v9)
    return JSValueMakeUndefined(ctx);
  v10 = v9;
  v11 = [WBSFormMetadata alloc];
  v12 = (void *)MEMORY[0x1E0CBE108];
  v13 = *a5;
  objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(ctx));
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "valueWithJSValueRef:inContext:", v13, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = -[WBSFormMetadata initWithJSValue:](v11, "initWithJSValue:", v15);

  v17 = v10[7];
  v18 = v10[6];
  objc_msgSend(v17, "finishedAutoFillingForm:inFrame:shouldSubmit:", v16, v18, JSValueToBoolean(ctx, (JSValueRef)a5[1]));

  Undefined = JSValueMakeUndefined(ctx);
  return Undefined;
}

void sub_1A3E29AB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

JSValueRef SafariShared::jsFinishedAutoFillingOneTimeCode(JSContextRef ctx, const OpaqueJSContext *a2, JSObjectRef object, OpaqueJSValue *a4, JSValueRef *a5, const OpaqueJSValue *const *a6, const OpaqueJSValue **a7)
{
  id *v9;
  id *v10;
  OpaqueJSString *v11;
  __CFString *v12;
  id v13;
  id v14;
  JSValueRef Undefined;

  if (a4 != (OpaqueJSValue *)2)
    return JSValueMakeUndefined(ctx);
  v9 = (id *)SafariShared::JSController::jsController(object);
  if (!v9)
    return JSValueMakeUndefined(ctx);
  v10 = v9;
  v11 = JSValueToStringCopy(ctx, *a5, 0);
  v12 = (__CFString *)JSStringCopyCFString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v11);
  v13 = v10[7];
  v14 = v10[6];
  objc_msgSend(v13, "finishedAutoFillingOneTimeCode:inFrame:shouldSubmit:", v12, v14, JSValueToBoolean(ctx, a5[1]));

  Undefined = JSValueMakeUndefined(ctx);
  if (v11)
    JSStringRelease(v11);
  return Undefined;
}

void sub_1A3E29BD4(_Unwind_Exception *a1)
{
  OpaqueJSString *v1;
  void *v2;

  if (v1)
    JSStringRelease(v1);
  _Unwind_Resume(a1);
}

JSValueRef SafariShared::jsSetInputElementSpellCheckEnabled(JSContextRef ctx, const OpaqueJSContext *a2, JSObjectRef object, OpaqueJSValue *a4, JSValueRef *a5, const OpaqueJSValue *const *a6, const OpaqueJSValue **a7)
{
  id *v9;
  void *v10;
  JSValueRef Undefined;

  if (a4 != (OpaqueJSValue *)2)
    return JSValueMakeUndefined(ctx);
  v9 = (id *)SafariShared::JSController::jsController(object);
  if (!v9)
    return JSValueMakeUndefined(ctx);
  objc_msgSend(v9[7], "formAutoFillNodeForJSWrapper:inContext:", JSValueToObject(ctx, *a5, 0), ctx);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (v10)
  {
    if ((objc_opt_respondsToSelector() & 1) != 0)
      objc_msgSend(v10, "setHTMLInputElementSpellCheckEnabled:", JSValueToBoolean(ctx, a5[1]));
  }
  Undefined = JSValueMakeUndefined(ctx);

  return Undefined;
}

void sub_1A3E29CC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

JSValueRef SafariShared::jsSpecifierForAutocompleteTokensAndAddressBookLabel(SafariShared *this, const OpaqueJSContext *a2, NSString *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  JSValueRef Undefined;
  const __CFString *v12;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  NSString *v19;
  void *v20;
  void *v21;
  const OpaqueJSValue *v22;
  void *v23;
  void *v24;
  void *v25;
  const OpaqueJSContext *v26;
  objc_object *v27;
  const OpaqueJSContext *v28;
  objc_object *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _BYTE v34[128];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (a4 != (OpaqueJSValue *)2)
  {
    if (!a6)
      return JSValueMakeUndefined(this);
    v12 = CFSTR("Expected two arguments, autocompleteTokens and addressBookLabel.");
LABEL_9:
    *a6 = SafariShared::JSUtilities::toJSError(this, (const OpaqueJSContext *)v12, a3);
    return JSValueMakeUndefined(this);
  }
  if (JSValueIsUndefined(this, *a5))
    goto LABEL_3;
  if (!JSValueIsArray(this, *a5))
  {
    if (!a6)
      return JSValueMakeUndefined(this);
    v12 = CFSTR("Expected an array of autocomplete tokens.");
    goto LABEL_9;
  }
  SafariShared::JSUtilities::translateJSValueToNS(this, *a5, (const OpaqueJSValue *)a3);
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v14 = (id)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v30, v34, 16);
  if (!v15)
    goto LABEL_21;
  v16 = *(_QWORD *)v31;
  while (2)
  {
    for (i = 0; i != v15; ++i)
    {
      if (*(_QWORD *)v31 != v16)
        objc_enumerationMutation(v14);
      v18 = *(_QWORD *)(*((_QWORD *)&v30 + 1) + 8 * i);
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        if (a6)
          *a6 = SafariShared::JSUtilities::toJSError(this, (const OpaqueJSContext *)CFSTR("Expected autocomplete token to be a string."), v19);
        Undefined = JSValueMakeUndefined(this);
        goto LABEL_31;
      }
      +[WBSFormToABBinder specifierForAutocompleteToken:](WBSFormToABBinder, "specifierForAutocompleteToken:", v18, (_QWORD)v30);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = v20;
      if (v20)
      {
        objc_msgSend(v20, "dictionaryRepresentation");
        v28 = (const OpaqueJSContext *)objc_claimAutoreleasedReturnValue();
        Undefined = (JSValueRef)SafariShared::JSUtilities::translateNSToJSValue(this, v28, v29);

LABEL_31:
        return Undefined;
      }
    }
    v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v30, v34, 16);
    if (v15)
      continue;
    break;
  }
LABEL_21:

LABEL_3:
  if (JSValueIsUndefined(this, a5[1]) || JSValueIsNull(this, a5[1]))
    return JSValueMakeNull(this);
  if (JSValueIsString(this, a5[1]))
  {
    SafariShared::JSUtilities::translateJSValueToNS(this, a5[1], v22);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    +[WBSFormToABBinder specifierForLabel:](WBSFormToABBinder, "specifierForLabel:", v23);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = v24;
    if (!v24)
    {

      return JSValueMakeNull(this);
    }
    objc_msgSend(v24, "dictionaryRepresentation");
    v26 = (const OpaqueJSContext *)objc_claimAutoreleasedReturnValue();
    Undefined = (JSValueRef)SafariShared::JSUtilities::translateNSToJSValue(this, v26, v27);

  }
  else
  {
    if (a6)
      *a6 = SafariShared::JSUtilities::toJSError(this, (const OpaqueJSContext *)CFSTR("Expected a string for addressBookLabel."), (NSString *)v22);
    return JSValueMakeUndefined(this);
  }
  return Undefined;
}

void sub_1A3E29FD8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

JSValueRef SafariShared::jsSetInputElementAutoFilledAndObscured(SafariShared *this, const OpaqueJSContext *a2, JSObjectRef object, OpaqueJSValue *a4, JSValueRef *a5, const OpaqueJSValue *const *a6, const OpaqueJSValue **a7)
{
  id *v9;
  id *v10;
  void *v11;
  _BOOL8 v12;
  id v13;
  id v14;
  JSValueRef Undefined;

  v9 = (id *)SafariShared::JSController::jsController(object);
  if (!v9)
    return JSValueMakeUndefined(this);
  v10 = v9;
  objc_msgSend(v9[7], "formAutoFillNodeForJSWrapper:inContext:", JSValueToObject(this, *a5, 0), this);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (v11)
  {
    v12 = JSValueToBoolean(this, a5[1]);
    objc_msgSend(v11, "setHTMLInputElementAutoFilledAndObscured:", v12);
    if (v12)
    {
      v13 = v10[6];
      v14 = v10[7];
      objc_msgSend(v14, "autoFilledField:inFrame:", v11, v13);

    }
  }
  Undefined = JSValueMakeUndefined(this);

  return Undefined;
}

void sub_1A3E2A10C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

JSValueRef SafariShared::jsDateFormatFromTemplate(SafariShared *this, const OpaqueJSContext *a2, NSString *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  void *v10;
  void *v11;
  const __CFString *v12;
  NSString *v14;
  void *v15;
  void *v16;
  const OpaqueJSContext *v17;
  objc_object *v18;
  JSValueRef Undefined;

  if (a4 != (OpaqueJSValue *)2)
  {
    if (a6)
    {
      v12 = CFSTR("Expected two arguments, template and locale.");
LABEL_9:
      *a6 = SafariShared::JSUtilities::toJSError(this, (const OpaqueJSContext *)v12, a3);
    }
    return JSValueMakeUndefined(this);
  }
  if (!JSValueIsString(this, *a5))
  {
    if (a6)
    {
      v12 = CFSTR("Expected template to be a string.");
      goto LABEL_9;
    }
    return JSValueMakeUndefined(this);
  }
  SafariShared::JSUtilities::translateJSValueToNS(this, *a5, (const OpaqueJSValue *)a3);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (JSValueIsUndefined(this, a5[1]))
  {
    objc_msgSend(MEMORY[0x1E0C99DC8], "currentLocale");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    if (!JSValueIsString(this, a5[1]))
    {
      if (a6)
        *a6 = SafariShared::JSUtilities::toJSError(this, (const OpaqueJSContext *)CFSTR("Expected locale to be a string or undefined."), v14);
      Undefined = JSValueMakeUndefined(this);
      goto LABEL_17;
    }
    v15 = (void *)MEMORY[0x1E0C99DC8];
    SafariShared::JSUtilities::translateJSValueToNS(this, a5[1], (const OpaqueJSValue *)v14);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "localeWithLocaleIdentifier:", v16);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

  }
  objc_msgSend(MEMORY[0x1E0CB3578], "dateFormatFromTemplate:options:locale:", v10, 0, v11);
  v17 = (const OpaqueJSContext *)objc_claimAutoreleasedReturnValue();
  Undefined = (JSValueRef)SafariShared::JSUtilities::translateNSToJSValue(this, v17, v18);

LABEL_17:
  return Undefined;
}

void sub_1A3E2A2B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

JSValueRef SafariShared::jsStringFromDateFormat(SafariShared *this, const OpaqueJSContext *a2, NSString *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  void *v10;
  const OpaqueJSValue *v11;
  void *v12;
  id v13;
  const OpaqueJSContext *v14;
  objc_object *v15;
  uint64_t v16;
  const __CFString *v18;

  if (a4 != (OpaqueJSValue *)2)
  {
    if (!a6)
      return JSValueMakeUndefined(this);
    v18 = CFSTR("Expected two arguments, format and date.");
LABEL_11:
    *a6 = SafariShared::JSUtilities::toJSError(this, (const OpaqueJSContext *)v18, a3);
    return JSValueMakeUndefined(this);
  }
  if (!JSValueIsString(this, *a5))
  {
    if (!a6)
      return JSValueMakeUndefined(this);
    v18 = CFSTR("Expected format to be a string.");
    goto LABEL_11;
  }
  if (JSValueIsDate(this, a5[1]))
  {
    SafariShared::JSUtilities::translateJSValueToNS(this, *a5, (const OpaqueJSValue *)a3);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    SafariShared::JSUtilities::translateJSValueToNS(this, a5[1], v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = objc_alloc_init(MEMORY[0x1E0CB3578]);
    objc_msgSend(v13, "setDateFormat:", v10);
    objc_msgSend(v13, "stringFromDate:", v12);
    v14 = (const OpaqueJSContext *)objc_claimAutoreleasedReturnValue();
    v16 = SafariShared::JSUtilities::translateNSToJSValue(this, v14, v15);

    return (JSValueRef)v16;
  }
  if (a6)
  {
    v18 = CFSTR("Expected date to be a Date object instance.");
    goto LABEL_11;
  }
  return JSValueMakeUndefined(this);
}

void sub_1A3E2A408(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

char **SafariShared::FrameMetadata::staticValues(SafariShared::FrameMetadata *this)
{
  return &SafariShared::FrameMetadata::staticValues(void)::staticValues;
}

JSValueRef SafariShared::jsIsDebugConsoleLoggingEnabled(SafariShared *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  void *v5;
  int v7;
  char v8;
  JSValueRef Boolean;

  v7 = objc_msgSend(MEMORY[0x1E0D89BE8], "isInternalInstall", a3, a4, a5);
  if (v7)
  {
    objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v5, "BOOLForKey:", CFSTR("WBSDebugAutoFillConsoleLoggingEnabled"));
  }
  else
  {
    v8 = 0;
  }
  Boolean = JSValueMakeBoolean(this, v8);
  if (v7)

  return Boolean;
}

void sub_1A3E2A4C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

JSObjectRef SafariShared::jsAddressBookFieldLabelPatternMatchers(SafariShared *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  return makeJSFieldPatternMatcherArray(this, +[WBSFormToABBinder addressBookFieldLabelPatternMatchers](WBSFormToABBinder, "addressBookFieldLabelPatternMatchers", a3, a4, a5));
}

JSObjectRef SafariShared::jsEmailFieldLabelPatternMatchers(SafariShared *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  return makeJSFieldPatternMatcherArray(this, +[WBSFormToABBinder emailFieldLabelPatternMatchers](WBSFormToABBinder, "emailFieldLabelPatternMatchers", a3, a4, a5));
}

JSObjectRef SafariShared::jsCreditCardNumberFieldLabelPatternMatchers(SafariShared *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  const __WBSFieldLabelPatternMatcherArray *v5;
  void *v7;
  void *v8;
  __WBSFieldLabelPatternMatcherArray *v9;
  SafariShared *v10;
  _QWORD v11[2];

  v11[1] = *MEMORY[0x1E0C80C00];
  {
    v5 = (const __WBSFieldLabelPatternMatcherArray *)SafariShared::jsCreditCardNumberFieldLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers;
  }
  else
  {
    v10 = this;
    WBSCreditCardNumberFieldLabels();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v11[0] = v7;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v11, 1);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = +[_WBSFieldLabelPatternMatcherFactory createFieldLabelPatternMatcherArrayFromWordArrays:allowingEndOfWordMatches:](_WBSFieldLabelPatternMatcherFactory, "createFieldLabelPatternMatcherArrayFromWordArrays:allowingEndOfWordMatches:", v8, 0);

    v5 = v9;
    SafariShared::jsCreditCardNumberFieldLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers = (uint64_t)v9;
    this = v10;
  }
  return makeJSFieldPatternMatcherArray(this, v5);
}

void sub_1A3E2A628(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

JSObjectRef SafariShared::jsCreditCardSecurityCodeFieldLabelPatternMatchers(SafariShared *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  const __WBSFieldLabelPatternMatcherArray *v5;
  void *v7;
  void *v8;
  __WBSFieldLabelPatternMatcherArray *v9;
  SafariShared *v10;
  _QWORD v11[2];

  v11[1] = *MEMORY[0x1E0C80C00];
  {
    v5 = (const __WBSFieldLabelPatternMatcherArray *)SafariShared::jsCreditCardSecurityCodeFieldLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers;
  }
  else
  {
    v10 = this;
    WBSCreditCardSecurityCodeFieldLabels();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v11[0] = v7;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v11, 1);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = +[_WBSFieldLabelPatternMatcherFactory createFieldLabelPatternMatcherArrayFromWordArrays:allowingEndOfWordMatches:](_WBSFieldLabelPatternMatcherFactory, "createFieldLabelPatternMatcherArrayFromWordArrays:allowingEndOfWordMatches:", v8, 0);

    v5 = v9;
    SafariShared::jsCreditCardSecurityCodeFieldLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers = (uint64_t)v9;
    this = v10;
  }
  return makeJSFieldPatternMatcherArray(this, v5);
}

void sub_1A3E2A730(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

JSObjectRef SafariShared::jsCreditCardCardholderFieldLabelPatternMatchers(SafariShared *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  const __WBSFieldLabelPatternMatcherArray *v5;
  void *v7;
  void *v8;
  __WBSFieldLabelPatternMatcherArray *v9;
  SafariShared *v10;
  _QWORD v11[2];

  v11[1] = *MEMORY[0x1E0C80C00];
  {
    v5 = (const __WBSFieldLabelPatternMatcherArray *)SafariShared::jsCreditCardCardholderFieldLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers;
  }
  else
  {
    v10 = this;
    WBSCreditCardCardholderFieldLabels();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v11[0] = v7;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v11, 1);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = +[_WBSFieldLabelPatternMatcherFactory createFieldLabelPatternMatcherArrayFromWordArrays:allowingEndOfWordMatches:](_WBSFieldLabelPatternMatcherFactory, "createFieldLabelPatternMatcherArrayFromWordArrays:allowingEndOfWordMatches:", v8, 0);

    v5 = v9;
    SafariShared::jsCreditCardCardholderFieldLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers = (uint64_t)v9;
    this = v10;
  }
  return makeJSFieldPatternMatcherArray(this, v5);
}

void sub_1A3E2A838(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

JSObjectRef SafariShared::jsCreditCardTypeFieldLabelPatternMatchers(SafariShared *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  const __WBSFieldLabelPatternMatcherArray *v5;
  void *v7;
  void *v8;
  __WBSFieldLabelPatternMatcherArray *v9;
  SafariShared *v10;
  _QWORD v11[2];

  v11[1] = *MEMORY[0x1E0C80C00];
  {
    v5 = (const __WBSFieldLabelPatternMatcherArray *)SafariShared::jsCreditCardTypeFieldLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers;
  }
  else
  {
    v10 = this;
    WBSCreditCardTypeFieldLabels();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v11[0] = v7;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v11, 1);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = +[_WBSFieldLabelPatternMatcherFactory createFieldLabelPatternMatcherArrayFromWordArrays:allowingEndOfWordMatches:](_WBSFieldLabelPatternMatcherFactory, "createFieldLabelPatternMatcherArrayFromWordArrays:allowingEndOfWordMatches:", v8, 0);

    v5 = v9;
    SafariShared::jsCreditCardTypeFieldLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers = (uint64_t)v9;
    this = v10;
  }
  return makeJSFieldPatternMatcherArray(this, v5);
}

void sub_1A3E2A940(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

JSObjectRef SafariShared::jsNonCreditCardCardNumberFieldLabelPatternMatchers(SafariShared *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  const __WBSFieldLabelPatternMatcherArray *v5;
  void *v7;
  void *v8;
  __WBSFieldLabelPatternMatcherArray *v9;
  SafariShared *v10;
  _QWORD v11[2];

  v11[1] = *MEMORY[0x1E0C80C00];
  {
    v5 = (const __WBSFieldLabelPatternMatcherArray *)SafariShared::jsNonCreditCardCardNumberFieldLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers;
  }
  else
  {
    v10 = this;
    WBSNonCreditCardCardNumberFieldLabels();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v11[0] = v7;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v11, 1);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = +[_WBSFieldLabelPatternMatcherFactory createFieldLabelPatternMatcherArrayFromWordArrays:allowingEndOfWordMatches:](_WBSFieldLabelPatternMatcherFactory, "createFieldLabelPatternMatcherArrayFromWordArrays:allowingEndOfWordMatches:", v8, 0);

    v5 = v9;
    SafariShared::jsNonCreditCardCardNumberFieldLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers = (uint64_t)v9;
    this = v10;
  }
  return makeJSFieldPatternMatcherArray(this, v5);
}

void sub_1A3E2AA48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

JSObjectRef SafariShared::jsDayFieldLabelPatternMatchers(SafariShared *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  const __WBSFieldLabelPatternMatcherArray *v5;
  void *v7;
  void *v8;
  __WBSFieldLabelPatternMatcherArray *v9;
  SafariShared *v10;
  _QWORD v11[2];

  v11[1] = *MEMORY[0x1E0C80C00];
  {
    v5 = (const __WBSFieldLabelPatternMatcherArray *)SafariShared::jsDayFieldLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers;
  }
  else
  {
    v10 = this;
    SafariShared::dayFieldLabels(this);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v11[0] = v7;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v11, 1);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = +[_WBSFieldLabelPatternMatcherFactory createFieldLabelPatternMatcherArrayFromWordArrays:allowingEndOfWordMatches:](_WBSFieldLabelPatternMatcherFactory, "createFieldLabelPatternMatcherArrayFromWordArrays:allowingEndOfWordMatches:", v8, 1);

    v5 = v9;
    SafariShared::jsDayFieldLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers = (uint64_t)v9;
    this = v10;
  }
  return makeJSFieldPatternMatcherArray(this, v5);
}

void sub_1A3E2AB50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

JSObjectRef SafariShared::jsMonthFieldLabelPatternMatchers(SafariShared *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  const __WBSFieldLabelPatternMatcherArray *v5;
  void *v7;
  void *v8;
  __WBSFieldLabelPatternMatcherArray *v9;
  SafariShared *v10;
  _QWORD v11[2];

  v11[1] = *MEMORY[0x1E0C80C00];
  {
    v5 = (const __WBSFieldLabelPatternMatcherArray *)SafariShared::jsMonthFieldLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers;
  }
  else
  {
    v10 = this;
    SafariShared::monthFieldLabels(this);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v11[0] = v7;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v11, 1);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = +[_WBSFieldLabelPatternMatcherFactory createFieldLabelPatternMatcherArrayFromWordArrays:allowingEndOfWordMatches:](_WBSFieldLabelPatternMatcherFactory, "createFieldLabelPatternMatcherArrayFromWordArrays:allowingEndOfWordMatches:", v8, 1);

    v5 = v9;
    SafariShared::jsMonthFieldLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers = (uint64_t)v9;
    this = v10;
  }
  return makeJSFieldPatternMatcherArray(this, v5);
}

void sub_1A3E2AC58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

JSObjectRef SafariShared::jsYearFieldLabelPatternMatchers(SafariShared *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  const __WBSFieldLabelPatternMatcherArray *v5;
  void *v7;
  void *v8;
  __WBSFieldLabelPatternMatcherArray *v9;
  SafariShared *v10;
  _QWORD v11[2];

  v11[1] = *MEMORY[0x1E0C80C00];
  {
    v5 = (const __WBSFieldLabelPatternMatcherArray *)SafariShared::jsYearFieldLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers;
  }
  else
  {
    v10 = this;
    SafariShared::yearFieldLabels(this);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v11[0] = v7;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v11, 1);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = +[_WBSFieldLabelPatternMatcherFactory createFieldLabelPatternMatcherArrayFromWordArrays:allowingEndOfWordMatches:](_WBSFieldLabelPatternMatcherFactory, "createFieldLabelPatternMatcherArrayFromWordArrays:allowingEndOfWordMatches:", v8, 1);

    v5 = v9;
    SafariShared::jsYearFieldLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers = (uint64_t)v9;
    this = v10;
  }
  return makeJSFieldPatternMatcherArray(this, v5);
}

void sub_1A3E2AD60(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

JSObjectRef SafariShared::jsCreditCardCompositeExpirationDateFieldLabelPatternMatchers(SafariShared *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  const __WBSFieldLabelPatternMatcherArray *v5;
  void *v7;
  void *v8;
  __WBSFieldLabelPatternMatcherArray *v9;
  SafariShared *v10;
  _QWORD v11[2];

  v11[1] = *MEMORY[0x1E0C80C00];
  {
    v5 = (const __WBSFieldLabelPatternMatcherArray *)SafariShared::jsCreditCardCompositeExpirationDateFieldLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers;
  }
  else
  {
    v10 = this;
    WBSCreditCardCompositeExpirationDateFieldLabels();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v11[0] = v7;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v11, 1);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = +[_WBSFieldLabelPatternMatcherFactory createFieldLabelPatternMatcherArrayFromWordArrays:allowingEndOfWordMatches:](_WBSFieldLabelPatternMatcherFactory, "createFieldLabelPatternMatcherArrayFromWordArrays:allowingEndOfWordMatches:", v8, 0);

    v5 = v9;
    SafariShared::jsCreditCardCompositeExpirationDateFieldLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers = (uint64_t)v9;
    this = v10;
  }
  return makeJSFieldPatternMatcherArray(this, v5);
}

void sub_1A3E2AE68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

JSObjectRef SafariShared::jsIgnoredDataTypeFieldLabelPatternMatchers(SafariShared *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  const __WBSFieldLabelPatternMatcherArray *v5;
  void *v7;
  void *v8;
  __WBSFieldLabelPatternMatcherArray *v9;
  SafariShared *v10;
  _QWORD v11[2];

  v11[1] = *MEMORY[0x1E0C80C00];
  {
    v5 = (const __WBSFieldLabelPatternMatcherArray *)SafariShared::jsIgnoredDataTypeFieldLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers;
  }
  else
  {
    v10 = this;
    ignoredDataTypeFieldLabels();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v11[0] = v7;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v11, 1);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = +[_WBSFieldLabelPatternMatcherFactory createFieldLabelPatternMatcherArrayFromWordArrays:allowingEndOfWordMatches:](_WBSFieldLabelPatternMatcherFactory, "createFieldLabelPatternMatcherArrayFromWordArrays:allowingEndOfWordMatches:", v8, 1);

    v5 = v9;
    SafariShared::jsIgnoredDataTypeFieldLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers = (uint64_t)v9;
    this = v10;
  }
  return makeJSFieldPatternMatcherArray(this, v5);
}

void sub_1A3E2AF70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

JSObjectRef SafariShared::jsOneTimeCodeFieldLabelPatternMatchersFieldLabelPatternMatchers(SafariShared *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  const __WBSFieldLabelPatternMatcherArray *v5;
  void *v7;
  void *v8;
  __WBSFieldLabelPatternMatcherArray *v9;
  SafariShared *v10;
  _QWORD v11[2];

  v11[1] = *MEMORY[0x1E0C80C00];
  {
    v5 = (const __WBSFieldLabelPatternMatcherArray *)SafariShared::jsOneTimeCodeFieldLabelPatternMatchersFieldLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers;
  }
  else
  {
    v10 = this;
    oneTimeCodeFieldLabels();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v11[0] = v7;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v11, 1);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = +[_WBSFieldLabelPatternMatcherFactory createFieldLabelPatternMatcherArrayFromWordArrays:allowingEndOfWordMatches:](_WBSFieldLabelPatternMatcherFactory, "createFieldLabelPatternMatcherArrayFromWordArrays:allowingEndOfWordMatches:", v8, 1);

    v5 = v9;
    SafariShared::jsOneTimeCodeFieldLabelPatternMatchersFieldLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers = (uint64_t)v9;
    this = v10;
  }
  return makeJSFieldPatternMatcherArray(this, v5);
}

void sub_1A3E2B078(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

JSObjectRef SafariShared::jsWeakOneTimeCodeFieldLabelPatternMatchersFieldLabelPatternMatchers(SafariShared *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  const __WBSFieldLabelPatternMatcherArray *v5;
  void *v7;
  void *v8;
  __WBSFieldLabelPatternMatcherArray *v9;
  SafariShared *v10;
  _QWORD v11[2];

  v11[1] = *MEMORY[0x1E0C80C00];
  {
    v5 = (const __WBSFieldLabelPatternMatcherArray *)SafariShared::jsWeakOneTimeCodeFieldLabelPatternMatchersFieldLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers;
  }
  else
  {
    v10 = this;
    WeakOneTimeCodeFieldLabels();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v11[0] = v7;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v11, 1);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = +[_WBSFieldLabelPatternMatcherFactory createFieldLabelPatternMatcherArrayFromWordArrays:allowingEndOfWordMatches:](_WBSFieldLabelPatternMatcherFactory, "createFieldLabelPatternMatcherArrayFromWordArrays:allowingEndOfWordMatches:", v8, 1);

    v5 = v9;
    SafariShared::jsWeakOneTimeCodeFieldLabelPatternMatchersFieldLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers = (uint64_t)v9;
    this = v10;
  }
  return makeJSFieldPatternMatcherArray(this, v5);
}

void sub_1A3E2B180(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

JSObjectRef SafariShared::jsUsernameFieldLabelPatternMatchers(SafariShared *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  const __WBSFieldLabelPatternMatcherArray *v5;
  void *v7;
  void *v8;
  __WBSFieldLabelPatternMatcherArray *v9;
  SafariShared *v10;
  _QWORD v11[2];

  v11[1] = *MEMORY[0x1E0C80C00];
  {
    v5 = (const __WBSFieldLabelPatternMatcherArray *)SafariShared::jsUsernameFieldLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers;
  }
  else
  {
    v10 = this;
    usernameFieldLabels();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v11[0] = v7;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v11, 1);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = +[_WBSFieldLabelPatternMatcherFactory createFieldLabelPatternMatcherArrayFromWordArrays:allowingEndOfWordMatches:](_WBSFieldLabelPatternMatcherFactory, "createFieldLabelPatternMatcherArrayFromWordArrays:allowingEndOfWordMatches:", v8, 0);

    v5 = v9;
    SafariShared::jsUsernameFieldLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers = (uint64_t)v9;
    this = v10;
  }
  return makeJSFieldPatternMatcherArray(this, v5);
}

void sub_1A3E2B288(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

JSObjectRef SafariShared::jsNonAccountPasswordSecureTextEntryFieldLabelPatternMatchers(SafariShared *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  const __WBSFieldLabelPatternMatcherArray *v5;
  void *v7;
  void *v8;
  __WBSFieldLabelPatternMatcherArray *v9;
  SafariShared *v10;
  _QWORD v11[2];

  v11[1] = *MEMORY[0x1E0C80C00];
  {
    v5 = (const __WBSFieldLabelPatternMatcherArray *)SafariShared::jsNonAccountPasswordSecureTextEntryFieldLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers;
  }
  else
  {
    v10 = this;
    nonAccountPasswordSecureTextEntryFieldLabels();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v11[0] = v7;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v11, 1);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = +[_WBSFieldLabelPatternMatcherFactory createFieldLabelPatternMatcherArrayFromWordArrays:allowingEndOfWordMatches:](_WBSFieldLabelPatternMatcherFactory, "createFieldLabelPatternMatcherArrayFromWordArrays:allowingEndOfWordMatches:", v8, 0);

    v5 = v9;
    SafariShared::jsNonAccountPasswordSecureTextEntryFieldLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers = (uint64_t)v9;
    this = v10;
  }
  return makeJSFieldPatternMatcherArray(this, v5);
}

void sub_1A3E2B390(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

JSObjectRef SafariShared::jsNonUsernameFieldLabelPatternMatchers(SafariShared *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  const __WBSFieldLabelPatternMatcherArray *v5;
  void *v7;
  void *v8;
  __WBSFieldLabelPatternMatcherArray *v9;
  SafariShared *v10;
  _QWORD v11[2];

  v11[1] = *MEMORY[0x1E0C80C00];
  {
    v5 = (const __WBSFieldLabelPatternMatcherArray *)SafariShared::jsNonUsernameFieldLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers;
  }
  else
  {
    v10 = this;
    nonUsernameFieldLabels();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v11[0] = v7;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v11, 1);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = +[_WBSFieldLabelPatternMatcherFactory createFieldLabelPatternMatcherArrayFromWordArrays:allowingEndOfWordMatches:](_WBSFieldLabelPatternMatcherFactory, "createFieldLabelPatternMatcherArrayFromWordArrays:allowingEndOfWordMatches:", v8, 0);

    v5 = v9;
    SafariShared::jsNonUsernameFieldLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers = (uint64_t)v9;
    this = v10;
  }
  return makeJSFieldPatternMatcherArray(this, v5);
}

void sub_1A3E2B498(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

JSObjectRef SafariShared::jsNonEmailFieldLabelPatternMatchers(SafariShared *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  const __WBSFieldLabelPatternMatcherArray *v5;
  void *v7;
  void *v8;
  __WBSFieldLabelPatternMatcherArray *v9;
  SafariShared *v10;
  _QWORD v11[2];

  v11[1] = *MEMORY[0x1E0C80C00];
  {
    v5 = (const __WBSFieldLabelPatternMatcherArray *)SafariShared::jsNonEmailFieldLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers;
  }
  else
  {
    v10 = this;
    nonEmailFieldLabels();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v11[0] = v7;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v11, 1);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = +[_WBSFieldLabelPatternMatcherFactory createFieldLabelPatternMatcherArrayFromWordArrays:allowingEndOfWordMatches:](_WBSFieldLabelPatternMatcherFactory, "createFieldLabelPatternMatcherArrayFromWordArrays:allowingEndOfWordMatches:", v8, 0);

    v5 = v9;
    SafariShared::jsNonEmailFieldLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers = (uint64_t)v9;
    this = v10;
  }
  return makeJSFieldPatternMatcherArray(this, v5);
}

void sub_1A3E2B5A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

JSObjectRef SafariShared::jsOldPasswordFieldLabelPatternMatchers(SafariShared *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  const __WBSFieldLabelPatternMatcherArray *v5;
  void *v7;
  void *v8;
  __WBSFieldLabelPatternMatcherArray *v9;
  SafariShared *v10;
  _QWORD v11[2];

  v11[1] = *MEMORY[0x1E0C80C00];
  {
    v5 = (const __WBSFieldLabelPatternMatcherArray *)SafariShared::jsOldPasswordFieldLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers;
  }
  else
  {
    v10 = this;
    oldPasswordFieldLabels();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v11[0] = v7;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v11, 1);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = +[_WBSFieldLabelPatternMatcherFactory createFieldLabelPatternMatcherArrayFromWordArrays:allowingEndOfWordMatches:](_WBSFieldLabelPatternMatcherFactory, "createFieldLabelPatternMatcherArrayFromWordArrays:allowingEndOfWordMatches:", v8, 0);

    v5 = v9;
    SafariShared::jsOldPasswordFieldLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers = (uint64_t)v9;
    this = v10;
  }
  return makeJSFieldPatternMatcherArray(this, v5);
}

void sub_1A3E2B6A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

JSObjectRef SafariShared::jsPasswordFieldLabelPatternMatchers(SafariShared *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  const __WBSFieldLabelPatternMatcherArray *v5;
  void *v7;
  void *v8;
  __WBSFieldLabelPatternMatcherArray *v9;
  SafariShared *v10;
  _QWORD v11[2];

  v11[1] = *MEMORY[0x1E0C80C00];
  {
    v5 = (const __WBSFieldLabelPatternMatcherArray *)SafariShared::jsPasswordFieldLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers;
  }
  else
  {
    v10 = this;
    passwordFieldLabels();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v11[0] = v7;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v11, 1);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = +[_WBSFieldLabelPatternMatcherFactory createFieldLabelPatternMatcherArrayFromWordArrays:allowingEndOfWordMatches:](_WBSFieldLabelPatternMatcherFactory, "createFieldLabelPatternMatcherArrayFromWordArrays:allowingEndOfWordMatches:", v8, 0);

    v5 = v9;
    SafariShared::jsPasswordFieldLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers = (uint64_t)v9;
    this = v10;
  }
  return makeJSFieldPatternMatcherArray(this, v5);
}

void sub_1A3E2B7B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

JSObjectRef SafariShared::jsConfirmPasswordFieldLabelPatternMatchers(SafariShared *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  const __WBSFieldLabelPatternMatcherArray *v5;
  void *v7;
  void *v8;
  __WBSFieldLabelPatternMatcherArray *v9;
  SafariShared *v10;
  _QWORD v11[2];

  v11[1] = *MEMORY[0x1E0C80C00];
  {
    v5 = (const __WBSFieldLabelPatternMatcherArray *)SafariShared::jsConfirmPasswordFieldLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers;
  }
  else
  {
    v10 = this;
    confirmPasswordFieldLabels();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v11[0] = v7;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v11, 1);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = +[_WBSFieldLabelPatternMatcherFactory createFieldLabelPatternMatcherArrayFromWordArrays:allowingEndOfWordMatches:](_WBSFieldLabelPatternMatcherFactory, "createFieldLabelPatternMatcherArrayFromWordArrays:allowingEndOfWordMatches:", v8, 0);

    v5 = v9;
    SafariShared::jsConfirmPasswordFieldLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers = (uint64_t)v9;
    this = v10;
  }
  return makeJSFieldPatternMatcherArray(this, v5);
}

void sub_1A3E2B8B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

JSObjectRef SafariShared::jsConfirmEmailFieldLabelPatternMatchers(SafariShared *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  const __WBSFieldLabelPatternMatcherArray *v5;
  void *v7;
  void *v8;
  __WBSFieldLabelPatternMatcherArray *v9;
  SafariShared *v10;
  _QWORD v11[2];

  v11[1] = *MEMORY[0x1E0C80C00];
  {
    v5 = (const __WBSFieldLabelPatternMatcherArray *)SafariShared::jsConfirmEmailFieldLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers;
  }
  else
  {
    v10 = this;
    confirmEmailFieldLabels();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v11[0] = v7;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v11, 1);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = +[_WBSFieldLabelPatternMatcherFactory createFieldLabelPatternMatcherArrayFromWordArrays:allowingEndOfWordMatches:](_WBSFieldLabelPatternMatcherFactory, "createFieldLabelPatternMatcherArrayFromWordArrays:allowingEndOfWordMatches:", v8, 0);

    v5 = v9;
    SafariShared::jsConfirmEmailFieldLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers = (uint64_t)v9;
    this = v10;
  }
  return makeJSFieldPatternMatcherArray(this, v5);
}

void sub_1A3E2B9C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

JSObjectRef SafariShared::jsShowHideButtonLabelPatternMatchers(SafariShared *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  const __WBSFieldLabelPatternMatcherArray *v5;
  void *v7;
  void *v8;
  __WBSFieldLabelPatternMatcherArray *v9;
  SafariShared *v10;
  _QWORD v11[2];

  v11[1] = *MEMORY[0x1E0C80C00];
  {
    v5 = (const __WBSFieldLabelPatternMatcherArray *)SafariShared::jsShowHideButtonLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers;
  }
  else
  {
    v10 = this;
    showHideButtonLabels();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v11[0] = v7;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v11, 1);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = +[_WBSFieldLabelPatternMatcherFactory createFieldLabelPatternMatcherArrayFromWordArrays:allowingEndOfWordMatches:](_WBSFieldLabelPatternMatcherFactory, "createFieldLabelPatternMatcherArrayFromWordArrays:allowingEndOfWordMatches:", v8, 0);

    v5 = v9;
    SafariShared::jsShowHideButtonLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers = (uint64_t)v9;
    this = v10;
  }
  return makeJSFieldPatternMatcherArray(this, v5);
}

void sub_1A3E2BAC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

JSObjectRef SafariShared::jsSearchFieldLabelPatternMatchers(SafariShared *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  const __WBSFieldLabelPatternMatcherArray *v5;
  void *v7;
  void *v8;
  __WBSFieldLabelPatternMatcherArray *v9;
  SafariShared *v10;
  _QWORD v11[2];

  v11[1] = *MEMORY[0x1E0C80C00];
  {
    v5 = (const __WBSFieldLabelPatternMatcherArray *)SafariShared::jsSearchFieldLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers;
  }
  else
  {
    v10 = this;
    searchFieldLabels();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v11[0] = v7;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v11, 1);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = +[_WBSFieldLabelPatternMatcherFactory createFieldLabelPatternMatcherArrayFromWordArrays:allowingEndOfWordMatches:](_WBSFieldLabelPatternMatcherFactory, "createFieldLabelPatternMatcherArrayFromWordArrays:allowingEndOfWordMatches:", v8, 0);

    v5 = v9;
    SafariShared::jsSearchFieldLabelPatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers = (uint64_t)v9;
    this = v10;
  }
  return makeJSFieldPatternMatcherArray(this, v5);
}

void sub_1A3E2BBD0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

JSObjectRef SafariShared::jsLoginFormTypePatternMatchers(SafariShared *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  __WBSFieldLabelPatternMatcherArray *v5;
  void *v7;
  void *v8;
  void *v9;
  SafariShared *v10;
  _QWORD v11[2];

  v11[1] = *MEMORY[0x1E0C80C00];
  {
    v5 = (__WBSFieldLabelPatternMatcherArray *)SafariShared::jsLoginFormTypePatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers;
  }
  else
  {
    v10 = this;
    mapOfKeywordsIndicatingLoginFormTypeToScoreForMatching();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "allKeys");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v11[0] = v8;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v11, 1);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = +[_WBSFieldLabelPatternMatcherFactory createFieldLabelPatternMatcherArrayFromWordArrays:allowingEndOfWordMatches:](_WBSFieldLabelPatternMatcherFactory, "createFieldLabelPatternMatcherArrayFromWordArrays:allowingEndOfWordMatches:", v9, 0);

    SafariShared::jsLoginFormTypePatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers = (uint64_t)v5;
    this = v10;
  }
  return makeJSFieldPatternMatcherArray(this, v5);
}

void sub_1A3E2BCE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

JSObjectRef SafariShared::jsNewAccountFormTypePatternMatchers(SafariShared *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  __WBSFieldLabelPatternMatcherArray *v5;
  void *v7;
  void *v8;
  void *v9;
  SafariShared *v10;
  _QWORD v11[2];

  v11[1] = *MEMORY[0x1E0C80C00];
  {
    v5 = (__WBSFieldLabelPatternMatcherArray *)SafariShared::jsNewAccountFormTypePatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers;
  }
  else
  {
    v10 = this;
    mapOfKeywordsIndicatingNewAccountFormTypeToScoreForMatching();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "allKeys");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v11[0] = v8;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v11, 1);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = +[_WBSFieldLabelPatternMatcherFactory createFieldLabelPatternMatcherArrayFromWordArrays:allowingEndOfWordMatches:](_WBSFieldLabelPatternMatcherFactory, "createFieldLabelPatternMatcherArrayFromWordArrays:allowingEndOfWordMatches:", v9, 0);

    SafariShared::jsNewAccountFormTypePatternMatchers(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::patternMatchers = (uint64_t)v5;
    this = v10;
  }
  return makeJSFieldPatternMatcherArray(this, v5);
}

void sub_1A3E2BE0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::jsMapOfKeywordsIndicatingLoginFormTypeToScoreForMatching(SafariShared *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  const OpaqueJSContext *v6;
  objc_object *v7;
  uint64_t v8;

  mapOfKeywordsIndicatingLoginFormTypeToScoreForMatching();
  v6 = (const OpaqueJSContext *)objc_claimAutoreleasedReturnValue();
  v8 = SafariShared::JSUtilities::translateNSToJSValue(this, v6, v7);

  return v8;
}

void sub_1A3E2BE7C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::jsMapOfKeywordsIndicatingNewAccountFormTypeToScoreForMatching(SafariShared *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  const OpaqueJSContext *v6;
  objc_object *v7;
  uint64_t v8;

  mapOfKeywordsIndicatingNewAccountFormTypeToScoreForMatching();
  v6 = (const OpaqueJSContext *)objc_claimAutoreleasedReturnValue();
  v8 = SafariShared::JSUtilities::translateNSToJSValue(this, v6, v7);

  return v8;
}

void sub_1A3E2BECC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::jsMapOfKeywordsIndicatingChangePasswordFormTypeToScoreForMatching(SafariShared *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  objc_object *v6;

  updateCachedArraysIfNeeded();
  return SafariShared::JSUtilities::translateNSToJSValue(this, (const OpaqueJSContext *)cachedMapOfKeywordsIndicatingChangePasswordFormTypeToScoreForMatching, v6);
}

uint64_t SafariShared::jsKeywordsIndicatingNonAutoFillableFormType(SafariShared *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  objc_object *v6;

  updateCachedArraysIfNeeded();
  return SafariShared::JSUtilities::translateNSToJSValue(this, (const OpaqueJSContext *)cachedKeywordsIndicatingNonAutoFillableFormType, v6);
}

uint64_t SafariShared::jsRegularExpressionsForForgotPasswordAffordance(SafariShared *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  objc_object *v6;

  updateCachedArraysIfNeeded();
  return SafariShared::JSUtilities::translateNSToJSValue(this, (const OpaqueJSContext *)cachedRegularExpressionsForForgotPasswordAffordance, v6);
}

uint64_t SafariShared::jsRegularExpressionsForForgotUserNameAffordance(SafariShared *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  objc_object *v6;

  updateCachedArraysIfNeeded();
  return SafariShared::JSUtilities::translateNSToJSValue(this, (const OpaqueJSContext *)cachedRegularExpressionsForForgotUserNameAffordance, v6);
}

uint64_t SafariShared::jsRegularExpressionsForForgotEmailAffordance(SafariShared *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  objc_object *v6;

  updateCachedArraysIfNeeded();
  return SafariShared::JSUtilities::translateNSToJSValue(this, (const OpaqueJSContext *)cachedRegularExpressionsForForgotEmailAffordance, v6);
}

JSValueRef SafariShared::jsNextControlUniqueID(SafariShared *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  return JSValueMakeNumber(this, (double)++SafariShared::jsNextControlUniqueID(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::lastUsedControlUniqueID);
}

JSValueRef SafariShared::jsNextFormUniqueID(SafariShared *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  return JSValueMakeNumber(this, (double)++SafariShared::jsNextFormUniqueID(OpaqueJSContext const*,OpaqueJSValue *,OpaqueJSString *,OpaqueJSValue const**)::lastUsedFormUniqueID);
}

JSValueRef SafariShared::jsShouldIncludeNonEmptyFields(SafariShared *this, JSObjectRef object, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  id *v6;
  id v7;
  JSValueRef Boolean;

  v6 = (id *)SafariShared::JSController::jsController(object);
  if (!v6)
    return JSValueMakeUndefined(this);
  v7 = v6[7];
  Boolean = JSValueMakeBoolean(this, objc_msgSend(v7, "shouldIncludeNonEmptyFields"));

  return Boolean;
}

void sub_1A3E2C048(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::FrameMetadata::getFormsAndMetadata(uint64_t a1, unint64_t a2, JSObjectRef *a3, JSValueRef *a4)
{
  SafariShared::JSUtilities *v7;
  const char *v8;
  const OpaqueJSContext *v9;
  JSObjectRef v10;
  const OpaqueJSContext *v11;
  const OpaqueJSValue *v12;
  OpaqueJSValue *v13;
  OpaqueJSValue *v14;
  const OpaqueJSValue *PropertyAtIndex;
  uint64_t v16;
  _QWORD v18[2];

  v18[1] = *MEMORY[0x1E0C80C00];
  *a3 = 0;
  *a4 = 0;
  v7 = (SafariShared::JSUtilities *)objc_msgSend(*(id *)(a1 + 48), "jsContextForMetadataControllerScriptWorld");
  if (!v7)
    return 0;
  v9 = v7;
  v10 = SafariShared::JSUtilities::globalJSObjectByName(v7, (const OpaqueJSContext *)"FormMetadataJS", v8);
  if (!v10)
    return 0;
  v11 = v10;
  v18[0] = JSValueMakeNumber(v9, (double)a2);
  v12 = SafariShared::JSUtilities::callJSMethodWithArguments(v9, v11, (OpaqueJSValue *)"formsAndMetadata", (const char *)v18, (const OpaqueJSValue *const *)1);
  if (!v12)
    return 0;
  v13 = JSValueToObject(v9, v12, 0);
  if (!v13)
    return 0;
  v14 = v13;
  PropertyAtIndex = JSObjectGetPropertyAtIndex(v9, v13, 0, 0);
  *a3 = JSValueToObject(v9, PropertyAtIndex, 0);
  v16 = 1;
  *a4 = JSObjectGetPropertyAtIndex(v9, v14, 1u, 0);
  return v16;
}

uint64_t SafariShared::FrameMetadata::getFormsAndMetadata(uint64_t a1, unint64_t a2, JSObjectRef *a3, void **a4)
{
  uint64_t result;
  void *v7;
  JSValueRef v8;
  void *v9;
  void *v10;
  unint64_t v11;
  void *v12;
  unsigned int v13;
  void *v14;
  WBSFormMetadata *v15;
  void *v16;
  WBSFormMetadata *v17;
  JSValueRef v18;

  v18 = 0;
  result = SafariShared::FrameMetadata::getFormsAndMetadata(a1, a2, a3, &v18);
  if ((_DWORD)result)
  {
    result = objc_msgSend(*(id *)(a1 + 48), "jsContextForMetadataControllerScriptWorld");
    if (result)
    {
      v7 = (void *)MEMORY[0x1E0CBE108];
      v8 = v18;
      objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext((JSContextRef)result));
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "valueWithJSValueRef:inContext:", v8, v9);
      v10 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(MEMORY[0x1E0C99DE8], "array");
      v11 = 0;
      *a4 = (id)objc_claimAutoreleasedReturnValue();
      while (1)
      {
        objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("length"));
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = objc_msgSend(v12, "toUInt32");

        if (v11 >= v13)
          break;
        v14 = *a4;
        v15 = [WBSFormMetadata alloc];
        objc_msgSend(v10, "objectAtIndexedSubscript:", v11);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = -[WBSFormMetadata initWithJSValue:](v15, "initWithJSValue:", v16);
        objc_msgSend(v14, "addObject:", v17);

        ++v11;
      }

      return 1;
    }
  }
  return result;
}

void sub_1A3E2C2D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id SafariShared::FrameMetadata::metadataForAllForms(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t j;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  WBSFormMetadata *v14;
  void *v15;
  id obj;
  uint64_t v18;
  uint64_t v19;
  id v20;
  SafariShared *v21;
  void *v22;
  uint64_t i;
  id v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  void *v33;
  JSObjectRef v34;
  _BYTE v35[128];
  _BYTE v36[128];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v33 = 0;
  if (SafariShared::FrameMetadata::getFormsAndMetadata(a1, a2, &v34, &v33)
    && (v3 = objc_msgSend(*(id *)(a1 + 48), "jsContextForMetadataControllerScriptWorld")) != 0)
  {
    v4 = v3;
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v20 = (id)objc_claimAutoreleasedReturnValue();
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    obj = v33;
    v19 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v29, v36, 16);
    if (v19)
    {
      v18 = *(_QWORD *)v30;
      do
      {
        for (i = 0; i != v19; ++i)
        {
          if (*(_QWORD *)v30 != v18)
            objc_enumerationMutation(obj);
          v21 = *(SafariShared **)(*((_QWORD *)&v29 + 1) + 8 * i);
          -[SafariShared controls](v21, "controls");
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0C99DE8], "array");
          v5 = (void *)objc_claimAutoreleasedReturnValue();
          v27 = 0u;
          v28 = 0u;
          v25 = 0u;
          v26 = 0u;
          v24 = v22;
          v6 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v25, v35, 16);
          if (v6)
          {
            v7 = *(_QWORD *)v26;
            do
            {
              for (j = 0; j != v6; ++j)
              {
                if (*(_QWORD *)v26 != v7)
                  objc_enumerationMutation(v24);
                v9 = *(void **)(*((_QWORD *)&v25 + 1) + 8 * j);
                objc_msgSend(v9, "uniqueID");
                v10 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v5, "addObject:", v9);
                objc_msgSend(*(id *)(a1 + 56), "formAutoFillNodeForJSWrapper:inContext:", controlObject(*(void **)(a1 + 48), v10), v4);
                v11 = (void *)objc_claimAutoreleasedReturnValue();
                if (v11)
                {
                  v12 = (void *)objc_msgSend(v9, "mutableCopy");
                  SafariShared::addAdditionalControlMetadata(v12, v11);
                  v13 = (void *)objc_msgSend(v12, "copy");
                  objc_msgSend(v5, "setObject:atIndexedSubscript:", v13, objc_msgSend(v5, "count") - 1);

                }
              }
              v6 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v25, v35, 16);
            }
            while (v6);
          }

          SafariShared::addPasswordRequirementsToFormMetadata(v21, v14);
          -[SafariShared formMetadataByReplacingControlsWith:](v21, "formMetadataByReplacingControlsWith:", v5);
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v20, "addObject:", v15);

        }
        v19 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v29, v36, 16);
      }
      while (v19);
    }

  }
  else
  {
    v20 = 0;
  }
  return v20;
}

void sub_1A3E2C5DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12)
{

  _Unwind_Resume(a1);
}

const OpaqueJSContext *controlObject(void *a1, void *a2)
{
  id v3;
  __CFString *v4;
  __CFString *v5;
  const OpaqueJSContext *v6;
  SafariShared::JSUtilities *v7;
  const char *v8;
  const OpaqueJSContext *v9;
  OpaqueJSString *v10;
  const OpaqueJSValue *v11;
  char v13[8];

  v3 = a1;
  v4 = a2;
  v5 = v4;
  v6 = 0;
  if (v3)
  {
    if (v4)
    {
      v7 = (SafariShared::JSUtilities *)objc_msgSend(v3, "jsContextForMetadataControllerScriptWorld");
      v6 = v7;
      if (v7)
      {
        v9 = SafariShared::JSUtilities::globalJSObjectByName(v7, (const OpaqueJSContext *)"FormMetadataJS", v8);
        if (v9)
        {
          v10 = JSStringCreateWithCFString(v5);
          *(_QWORD *)v13 = JSValueMakeString(v6, v10);
          v11 = SafariShared::JSUtilities::callJSMethodWithArguments(v6, v9, (OpaqueJSValue *)"formControlWithUniqueID", v13, (const OpaqueJSValue *const *)1);
          if (v11)
          {
            v6 = JSValueToObject(v6, v11, 0);
            if (!v10)
              goto LABEL_11;
            goto LABEL_10;
          }
          v6 = 0;
          if (v10)
LABEL_10:
            JSStringRelease(v10);
        }
        else
        {
          v6 = 0;
        }
      }
    }
  }
LABEL_11:

  return v6;
}

void sub_1A3E2C77C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  OpaqueJSString *v3;

  if (v3)
    JSStringRelease(v3);

  _Unwind_Resume(a1);
}

void SafariShared::addAdditionalControlMetadata(void *a1, void *a2)
{
  id v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  id v10;

  v10 = a1;
  v3 = a2;
  objc_msgSend(v3, "elementBounds");
  v5 = v4;
  v7 = v6;
  v9 = v8;
  objc_msgSend(v10, "setRectLeft:");
  objc_msgSend(v10, "setRectTop:", v5);
  objc_msgSend(v10, "setRectWidth:", v7);
  objc_msgSend(v10, "setRectHeight:", v9);
  objc_msgSend(v10, "setAutoFillButtonType:", objc_msgSend(v3, "htmlInputElementAutoFillButtonType"));
  objc_msgSend(v10, "setLastAutoFillButtonType:", objc_msgSend(v3, "htmlInputElementLastAutoFillButtonType"));

}

void sub_1A3E2C860(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void SafariShared::addPasswordRequirementsToFormMetadata(SafariShared *this, WBSFormMetadata *a2)
{
  SafariShared *v2;
  void *v3;
  uint64_t v4;
  _BOOL4 v5;
  uint64_t v6;
  _BOOL4 v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v2 = this;
  if ((unint64_t)(-[SafariShared type](v2, "type") - 6) > 0xFFFFFFFFFFFFFFFDLL)
  {
    -[SafariShared passwordElementUniqueID](v2, "passwordElementUniqueID");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v33 = v3;
    -[SafariShared confirmPasswordElementUniqueID](v2, "confirmPasswordElementUniqueID");
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v3, "length");
    v5 = v4 != 0;
    v6 = objc_msgSend(v36, "length");
    v7 = v6 != 0;
    if (!(v4 | v6))
    {
      -[SafariShared setPasswordRequirements:](v2, "setPasswordRequirements:", 0);
LABEL_52:

      goto LABEL_53;
    }
    -[SafariShared controls](v2, "controls");
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v8 = (id)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v37, v41, 16);
    if (v9)
    {
      v34 = 0;
      v35 = 0;
      v10 = *(_QWORD *)v38;
LABEL_6:
      v11 = 0;
      while (1)
      {
        if (*(_QWORD *)v38 != v10)
          objc_enumerationMutation(v8);
        if (!v5 && !v7)
          goto LABEL_25;
        v12 = *(void **)(*((_QWORD *)&v37 + 1) + 8 * v11);
        objc_msgSend(v12, "uniqueID");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v14 = v13;
        if (v13)
        {
          if (v5 && (objc_msgSend(v13, "isEqualToString:", v3) & 1) != 0)
          {
            v5 = 0;
            v15 = v35;
            v35 = v12;
          }
          else
          {
            if (!v7)
            {
              v7 = 0;
              goto LABEL_20;
            }
            if (!objc_msgSend(v14, "isEqualToString:", v36))
            {
              v7 = 1;
              goto LABEL_20;
            }
            v7 = 0;
            v15 = v34;
            v34 = v12;
          }
          v16 = v12;

          v3 = v33;
        }
LABEL_20:

        if (v9 == ++v11)
        {
          v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v37, v41, 16);
          if (v9)
            goto LABEL_6;
          goto LABEL_25;
        }
      }
    }
    v34 = 0;
    v35 = 0;
LABEL_25:

    objc_msgSend(v35, "passwordRules");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v17, "length"))
    {
      objc_msgSend(MEMORY[0x1E0D89C98], "parsePasswordRules:error:", v17, 0);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v18 = 0;
    }
    objc_msgSend(v34, "passwordRules");
    v19 = (void *)objc_claimAutoreleasedReturnValue();

    if (objc_msgSend(v19, "length"))
    {
      objc_msgSend(MEMORY[0x1E0D89C98], "parsePasswordRules:error:", v19, 0);
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      if (v18 && v32)
      {
        objc_msgSend(MEMORY[0x1E0D89C98], "mergePasswordRuleSet:withPasswordRuleSet:", v18, v32);
        v30 = objc_claimAutoreleasedReturnValue();
        goto LABEL_37;
      }
    }
    else
    {
      v32 = 0;
    }
    if (v18)
    {
      v20 = v18;
    }
    else
    {
      v20 = v32;
      v32 = v20;
    }
    v30 = (uint64_t)v20;
LABEL_37:
    v21 = objc_msgSend(v35, "maxLength", v30);
    v22 = objc_msgSend(v35, "minLength");
    v23 = objc_msgSend(v34, "maxLength");
    v24 = objc_msgSend(v34, "minLength");
    if (v21 < v23)
      v23 = v21;
    if (v22 <= v24)
      v25 = v24;
    else
      v25 = v22;
    v26 = (void *)MEMORY[0x1E0D89C88];
    if (v25)
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v25);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      if (v23)
      {
LABEL_44:
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v23);
        v28 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_47:
        objc_msgSend(v26, "requirementsForPasswordRuleSet:respectingMinLength:maxLength:", v31, v27, v28);
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        -[SafariShared setPasswordRequirements:](v2, "setPasswordRequirements:", v29);

        if (v23)
        if (v25)

        goto LABEL_52;
      }
    }
    else
    {
      v27 = 0;
      if (v23)
        goto LABEL_44;
    }
    v28 = 0;
    goto LABEL_47;
  }
  -[SafariShared setPasswordRequirements:](v2, "setPasswordRequirements:", 0);
LABEL_53:

}

void sub_1A3E2CC64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

JSValueRef SafariShared::FrameMetadata::currentMetadataForForm(uint64_t a1, OpaqueJSValue *a2, unint64_t a3)
{
  const OpaqueJSContext *v5;
  const OpaqueJSValue *Property;
  double v7;
  uint64_t v8;
  OpaqueJSValue *v9;
  const OpaqueJSValue *PropertyAtIndex;
  void *v11;
  uint64_t v12;
  JSValueRef v13;
  JSValueRef v14;
  JSValueRef v15;
  WBSFormMetadata *v16;
  void *v17;
  WBSFormMetadata *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t j;
  void *v30;
  void *v31;
  void *v32;
  id v34;
  unsigned int propertyIndex;
  id obj;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  OpaqueJSValue *v40;
  const OpaqueJSContext *ctx;
  void *v42;
  uint64_t v43;
  uint64_t i;
  WBSFormMetadata *v45;
  void *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  JSValueRef value;
  JSObjectRef object;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  _BYTE v57[128];
  JSStringRef v58[18];

  v58[16] = *(JSStringRef *)MEMORY[0x1E0C80C00];
  value = 0;
  object = 0;
  if (!SafariShared::FrameMetadata::getFormsAndMetadata(a1, a3, &object, &value))
    return 0;
  v5 = (const OpaqueJSContext *)objc_msgSend(*(id *)(a1 + 48), "jsContextForMetadataControllerScriptWorld");
  if (!v5)
    return 0;
  ctx = v5;
  v40 = JSValueToObject(v5, value, 0);
  SafariShared::JSUtilities::jsString((SafariShared::JSUtilities *)"length", v58);
  Property = JSObjectGetProperty(ctx, v40, v58[0], 0);
  v7 = JSValueToNumber(ctx, Property, 0);
  if (v58[0])
    JSStringRelease(v58[0]);
  v34 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  if ((unint64_t)v7)
  {
    v8 = 0;
    v9 = object;
    do
    {
      PropertyAtIndex = JSObjectGetPropertyAtIndex(ctx, v9, v8, 0);
      if (JSValueToObject(ctx, PropertyAtIndex, 0) == a2)
      {
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v8);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v34, "addObject:", v11);

      }
      ++v8;
    }
    while ((unint64_t)v7 != v8);
  }
  v12 = objc_msgSend(v34, "count");
  if (v12)
  {
    if (v12 == 1)
    {
      objc_msgSend(v34, "objectAtIndexedSubscript:", 0);
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = JSObjectGetPropertyAtIndex(ctx, v40, objc_msgSend(v38, "unsignedIntegerValue"), 0);
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(ctx));
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      v49 = 0u;
      v50 = 0u;
      v47 = 0u;
      v48 = 0u;
      obj = v34;
      v39 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v47, v57, 16);
      if (v39)
      {
        propertyIndex = 0;
        v37 = *(_QWORD *)v48;
        v43 = -1;
        do
        {
          for (i = 0; i != v39; ++i)
          {
            if (*(_QWORD *)v48 != v37)
              objc_enumerationMutation(obj);
            v42 = *(void **)(*((_QWORD *)&v47 + 1) + 8 * i);
            v15 = JSObjectGetPropertyAtIndex(ctx, v40, objc_msgSend(v42, "unsignedIntegerValue"), 0);
            v16 = [WBSFormMetadata alloc];
            objc_msgSend(MEMORY[0x1E0CBE108], "valueWithJSValueRef:inContext:", v15, v38);
            v17 = (void *)objc_claimAutoreleasedReturnValue();
            v18 = -[WBSFormMetadata initWithJSValue:](v16, "initWithJSValue:", v17);

            v45 = v18;
            -[WBSFormMetadata firstCreditCardCardholderFieldOrCreditCardNumberFieldUniqueID](v45, "firstCreditCardCardholderFieldOrCreditCardNumberFieldUniqueID");
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            -[WBSFormMetadata userNameElementUniqueID](v45, "userNameElementUniqueID");
            v20 = (void *)objc_claimAutoreleasedReturnValue();
            -[WBSFormMetadata passwordElementUniqueID](v45, "passwordElementUniqueID");
            v21 = (void *)objc_claimAutoreleasedReturnValue();
            -[WBSFormMetadata confirmPasswordElementUniqueID](v45, "confirmPasswordElementUniqueID");
            v22 = objc_claimAutoreleasedReturnValue();
            v23 = v19 != 0;
            v24 = 1;
            if (v19)
              v24 = 2;
            if (v20)
              v23 = v24;
            if (v21)
              ++v23;
            v46 = (void *)v22;
            if (v22)
              v25 = v23 + 1;
            else
              v25 = v23;
            if (v25)
            {
              v55 = 0u;
              v56 = 0u;
              v53 = 0u;
              v54 = 0u;
              -[WBSFormMetadata controls](v45, "controls");
              v26 = (void *)objc_claimAutoreleasedReturnValue();
              v27 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v53, v58, 16);
              if (v27)
              {
                v28 = *(_QWORD *)v54;
                do
                {
                  for (j = 0; j != v27; ++j)
                  {
                    if (*(_QWORD *)v54 != v28)
                      objc_enumerationMutation(v26);
                    v30 = *(void **)(*((_QWORD *)&v53 + 1) + 8 * j);
                    objc_msgSend(v30, "uniqueID");
                    v31 = (void *)objc_claimAutoreleasedReturnValue();
                    if ((objc_msgSend(v31, "isEqualToString:", v19) & 1) != 0
                      || (objc_msgSend(v31, "isEqualToString:", v20) & 1) != 0
                      || (objc_msgSend(v31, "isEqualToString:", v21) & 1) != 0
                      || objc_msgSend(v31, "isEqualToString:", v46))
                    {
                      objc_msgSend(v30, "value");
                      v32 = (void *)objc_claimAutoreleasedReturnValue();
                      if (objc_msgSend(v32, "length"))
                        v25 += 10;

                    }
                  }
                  v27 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v53, v58, 16);
                }
                while (v27);
              }

            }
            if (v25 > v43)
            {
              propertyIndex = objc_msgSend(v42, "unsignedIntegerValue");
              v43 = v25;
            }

          }
          v39 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v47, v57, 16);
        }
        while (v39);
      }
      else
      {
        propertyIndex = 0;
      }

      v13 = JSObjectGetPropertyAtIndex(ctx, v40, propertyIndex, 0);
    }
    v14 = v13;

  }
  else
  {
    v14 = 0;
  }

  return v14;
}

void sub_1A3E2D24C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

JSValueRef SafariShared::FrameMetadata::lockedMetadataForForm(id *this, OpaqueJSValue *a2)
{
  uint64_t v3;
  const OpaqueJSContext *v4;
  JSValueRef Property;
  JSStringRef propertyName;

  v3 = objc_msgSend(this[6], "jsContextForMetadataControllerScriptWorld");
  if (!v3)
    return 0;
  v4 = (const OpaqueJSContext *)v3;
  SafariShared::JSUtilities::jsString((SafariShared::JSUtilities *)"_safariLockedFormMetadata", &propertyName);
  if (JSObjectHasProperty(v4, a2, propertyName))
    Property = JSObjectGetProperty(v4, a2, propertyName, 0);
  else
    Property = 0;
  if (propertyName)
    JSStringRelease(propertyName);
  return Property;
}

void sub_1A3E2D3F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, JSStringRef string)
{
  if (string)
    JSStringRelease(string);
  _Unwind_Resume(exception_object);
}

WBSFormMetadata *SafariShared::FrameMetadata::metadataForForm(id *a1, OpaqueJSValue *a2, unint64_t a3)
{
  uint64_t v6;
  const OpaqueJSContext *v7;
  JSValueRef v8;
  JSValueRef v9;
  WBSFormMetadata *v10;
  void *v11;
  void *v12;
  void *v13;
  WBSFormMetadata *v14;

  v6 = objc_msgSend(a1[6], "jsContextForMetadataControllerScriptWorld");
  if (v6
    && (v7 = (const OpaqueJSContext *)v6, (v8 = SafariShared::FrameMetadata::jsMetadataForForm(a1, a2, a3)) != 0))
  {
    v9 = v8;
    v10 = [WBSFormMetadata alloc];
    v11 = (void *)MEMORY[0x1E0CBE108];
    objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(v7));
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "valueWithJSValueRef:inContext:", v9, v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = -[WBSFormMetadata initWithJSValue:](v10, "initWithJSValue:", v13);

  }
  else
  {
    v14 = 0;
  }
  return v14;
}

void sub_1A3E2D4E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

JSValueRef SafariShared::FrameMetadata::jsMetadataForForm(id *this, OpaqueJSValue *a2, unint64_t a3)
{
  JSValueRef result;

  if (a3)
    return SafariShared::FrameMetadata::currentMetadataForForm((uint64_t)this, a2, a3);
  result = SafariShared::FrameMetadata::lockedMetadataForForm(this, a2);
  if (!result)
    return SafariShared::FrameMetadata::currentMetadataForForm((uint64_t)this, a2, a3);
  return result;
}

void sub_1A3E2D5BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E2D6A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::JSUtilities::translateNSToJSValue(SafariShared::JSUtilities *this, const OpaqueJSContext *a2, objc_object *a3)
{
  const OpaqueJSContext *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;

  v4 = a2;
  v5 = (void *)MEMORY[0x1E0CBE108];
  objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "valueWithObject:inContext:", v4, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "JSValueRef");

  return v8;
}

void sub_1A3E2D74C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1A3E2D98C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A3E2DA88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E2DC00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A3E2DD74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3E2DEE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E2E00C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, JSStringRef string)
{
  void *v9;
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1A3E2E198(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A3E2E2A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, JSStringRef string)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1A3E2E34C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A3E2E41C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E2E638(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1A3E2E7C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E2E90C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E2EA5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

void sub_1A3E2EAD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3E2EBBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E2EC50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E2ED1C(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  MEMORY[0x1A85998AC](v2, 0x10A1C406DF74740);

  _Unwind_Resume(a1);
}

uint64_t *WTF::HashMap<OpaqueFormAutoFillFrame *,std::unique_ptr<SafariShared::FrameMetadata>,WTF::DefaultHash<OpaqueFormAutoFillFrame *>,WTF::HashTraits<OpaqueFormAutoFillFrame *>,WTF::HashTraits<std::unique_ptr<SafariShared::FrameMetadata>>,WTF::HashTableTraits>::add<decltype(nullptr)>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;

  v4 = result;
  v6 = *result;
  if (*result
    || (result = WTF::HashTable<OpaqueFormAutoFillFrame *,WTF::KeyValuePair<OpaqueFormAutoFillFrame *,std::unique_ptr<SafariShared::FrameMetadata>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<OpaqueFormAutoFillFrame *,std::unique_ptr<SafariShared::FrameMetadata>>>,WTF::DefaultHash<OpaqueFormAutoFillFrame *>,WTF::HashMap<OpaqueFormAutoFillFrame *,std::unique_ptr<SafariShared::FrameMetadata>,WTF::DefaultHash<OpaqueFormAutoFillFrame *>,WTF::HashTraits<OpaqueFormAutoFillFrame *>,WTF::HashTraits<std::unique_ptr<SafariShared::FrameMetadata>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<OpaqueFormAutoFillFrame *>>::expand(result, 0), (v6 = *v4) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = *a2;
  v10 = ~(*a2 << 32) + *a2;
  v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v8 & ((v12 >> 31) ^ v12);
  v14 = (uint64_t *)(v6 + 16 * v13);
  v15 = *v14;
  if (*v14)
  {
    v16 = 0;
    v17 = 1;
    do
    {
      if (v15 == v9)
      {
        if ((v7 & 1) != 0)
          v20 = 0;
        else
          v20 = *(unsigned int *)(v6 - 4);
        v26 = 0;
        v27 = v6 + 16 * v20;
        goto LABEL_33;
      }
      if (v15 == -1)
        v16 = v14;
      v13 = (v13 + v17) & v8;
      v14 = (uint64_t *)(v6 + 16 * v13);
      v15 = *v14;
      ++v17;
    }
    while (*v14);
    if (v16)
    {
      *v16 = 0;
      v16[1] = 0;
      --*(_DWORD *)(*v4 - 16);
      v9 = *a2;
      v14 = v16;
    }
  }
  result = (uint64_t *)v14[1];
  *v14 = v9;
  v14[1] = 0;
  if (result)
    result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
  v18 = *v4;
  if (*v4)
    v19 = *(_DWORD *)(v18 - 12) + 1;
  else
    v19 = 1;
  *(_DWORD *)(v18 - 12) = v19;
  v21 = *v4;
  if (*v4)
    v22 = *(_DWORD *)(v21 - 12);
  else
    v22 = 0;
  v23 = (*(_DWORD *)(v21 - 16) + v22);
  v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 > 2 * v23)
      goto LABEL_27;
  }
  else if (3 * v24 > 4 * v23)
  {
    goto LABEL_27;
  }
  result = WTF::HashTable<OpaqueFormAutoFillFrame *,WTF::KeyValuePair<OpaqueFormAutoFillFrame *,std::unique_ptr<SafariShared::FrameMetadata>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<OpaqueFormAutoFillFrame *,std::unique_ptr<SafariShared::FrameMetadata>>>,WTF::DefaultHash<OpaqueFormAutoFillFrame *>,WTF::HashMap<OpaqueFormAutoFillFrame *,std::unique_ptr<SafariShared::FrameMetadata>,WTF::DefaultHash<OpaqueFormAutoFillFrame *>,WTF::HashTraits<OpaqueFormAutoFillFrame *>,WTF::HashTraits<std::unique_ptr<SafariShared::FrameMetadata>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<OpaqueFormAutoFillFrame *>>::expand(v4, v14);
  v14 = result;
  v21 = *v4;
  if (!*v4)
  {
    v25 = 0;
    goto LABEL_32;
  }
LABEL_27:
  v25 = *(unsigned int *)(v21 - 4);
LABEL_32:
  v27 = v21 + 16 * v25;
  v26 = 1;
LABEL_33:
  *(_QWORD *)a3 = v14;
  *(_QWORD *)(a3 + 8) = v27;
  *(_BYTE *)(a3 + 16) = v26;
  return result;
}

void sub_1A3E2F108(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A3E2F2AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, void *a9, void *a10, uint64_t a11, ...)
{
  void *v11;
  void *v12;
  void *v13;
  va_list va;

  va_start(va, a11);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A3E2F34C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3E2F410(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1A3E2F490(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E2F574(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E2F82C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1A3E2F91C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E2FA0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, JSStringRef string)
{
  void *v10;
  void *v11;

  if (string)
    JSStringRelease(string);

  _Unwind_Resume(a1);
}

void sub_1A3E2FAD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, JSStringRef string)
{
  void *v10;

  if (string)
    JSStringRelease(string);

  _Unwind_Resume(a1);
}

void sub_1A3E2FF90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, const OpaqueJSContext *a16, SafariShared::JSUtilities *a17, void *a18)
{
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v23;

  SafariShared::JSUtilities::callJSMethodWithArguments(a17, a16, (OpaqueJSValue *)"clearTextFieldOrSelectElementMetadataCache", 0, 0);
  v23 = *(void **)(v19 + 16);
  *(_QWORD *)(v19 + 16) = 0;

  _Unwind_Resume(a1);
}

void sub_1A3E30224(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3E30340(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E30478(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E305B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E306E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  uint64_t v10;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v10 - 80), 8);

  _Unwind_Resume(a1);
}

void sub_1A3E30840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, JSStringRef string)
{
  void *v10;

  _Unwind_Resume(a1);
}

BOOL SafariShared::jsObjectHasOnBeforeUnloadProperty(SafariShared *this, const OpaqueJSContext *a2, OpaqueJSValue *a3)
{
  JSValueRef Property;
  void *v6;
  _BOOL8 v7;
  JSStringRef propertyName;

  SafariShared::JSUtilities::jsString((SafariShared::JSUtilities *)"onbeforeunload", &propertyName);
  Property = JSObjectGetProperty(this, a2, propertyName, 0);
  if (propertyName)
    JSStringRelease(propertyName);
  objc_msgSend(MEMORY[0x1E0CB3940], "safari_stringWithJSValue:context:nullStringPolicy:", Property, this, 2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "length") != 0;

  return v7;
}

void sub_1A3E30900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, JSStringRef string)
{
  void *v10;
  void *v11;

  v11 = v10;

  _Unwind_Resume(a1);
}

void sub_1A3E30C64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

id getField(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;

  v5 = a1;
  v6 = a3;
  objc_msgSend(a2, "uniqueID");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "formAutoFillNodeForField:inFrame:", v7, v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

void sub_1A3E30D58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t isUsernameFieldInLoginForm(WBSFormControlMetadata *a1, WBSFormMetadata *a2)
{
  WBSFormControlMetadata *v3;
  WBSFormMetadata *v4;
  void *v5;
  void *v6;
  uint64_t v7;

  v3 = a1;
  v4 = a2;
  if (-[WBSFormMetadata type](v4, "type") == 3)
  {
    -[WBSFormMetadata userNameElementUniqueID](v4, "userNameElementUniqueID");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (v5)
    {
      -[WBSFormControlMetadata uniqueID](v3, "uniqueID");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = objc_msgSend(v5, "isEqualToString:", v6);

    }
    else
    {
      v7 = 0;
    }

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

void sub_1A3E30E18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A3E3103C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1A3E311AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E31264(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E313DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3E31614(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E316D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E318FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1A3E31B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1A3E31CD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3E31DD0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E31EBC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E31FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  void *v20;
  void *v21;

  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

void sub_1A3E32050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3E3211C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1A3E32654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1A3E327B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, JSStringRef string)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1A3E32860(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A3E329C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void SafariShared::FrameMetadata::~FrameMetadata(id *this)
{

  SafariShared::JSController::~JSController((WTF **)this);
}

{

  SafariShared::JSController::~JSController((WTF **)this);
  JUMPOUT(0x1A85998ACLL);
}

const char *SafariShared::FrameMetadata::scriptObjectName(SafariShared::FrameMetadata *this)
{
  return "FormMetadataJS";
}

JSObjectRef makeJSFieldPatternMatcherArray(const OpaqueJSContext *a1, const __WBSFieldLabelPatternMatcherArray *a2)
{
  int64_t Count;
  unint64_t v5;
  const JSValueRef *v6;
  size_t v7;
  uint64_t i;
  void *PatternMatcherAtIndex;
  OpaqueJSClass *v10;
  JSClassRef v11;
  uint64_t v13;
  void *v14;
  JSClassDefinition definition;
  _OWORD v16[4];
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  Count = WBSFieldLabelPatternMatcherArrayGetCount((uint64_t)a2);
  MEMORY[0x1E0C80A78]();
  v6 = (const JSValueRef *)((char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (v5 >= 0x200)
    v7 = 512;
  else
    v7 = v5;
  bzero((char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  if (Count >= 1)
  {
    for (i = 0; i != Count; ++i)
    {
      PatternMatcherAtIndex = (void *)WBSFieldLabelPatternMatcherArrayGetPatternMatcherAtIndex((uint64_t)a2, i);
      {
        v10 = (OpaqueJSClass *)makeJSFieldPatternMatcher(OpaqueJSContext const*,__WBSFieldLabelPatternMatcher const*)::jsClass;
      }
      else
      {
        v16[2] = xmmword_1E4B3A500;
        v16[3] = unk_1E4B3A510;
        v17 = 0;
        v16[0] = xmmword_1E4B3A4E0;
        v16[1] = unk_1E4B3A4F0;
        memset(&definition.staticFunctions, 0, 96);
        *(_QWORD *)&definition.version = 0;
        *(_OWORD *)&definition.parentClass = 0u;
        definition.className = "FieldPatternMatcher";
        definition.staticFunctions = (const JSStaticFunction *)v16;
        v14 = PatternMatcherAtIndex;
        v11 = JSClassCreate(&definition);
        PatternMatcherAtIndex = v14;
        v10 = v11;
        makeJSFieldPatternMatcher(OpaqueJSContext const*,__WBSFieldLabelPatternMatcher const*)::jsClass = (uint64_t)v11;
      }
      v6[i] = JSObjectMake(a1, v10, PatternMatcherAtIndex);
    }
  }
  *(_QWORD *)&definition.version = 0;
  return JSObjectMakeArray(a1, Count, v6, (JSValueRef *)&definition);
}

uint64_t jsFieldPatternMatcherSearchReverse(const OpaqueJSContext *a1, OpaqueJSValue *a2, OpaqueJSValue *a3, uint64_t a4, JSValueRef *a5, const OpaqueJSValue **a6)
{
  return callPatternMatcherFunction<CFRange (*)(__WBSFieldLabelPatternMatcher const*,unsigned short const*,long)>(a1, a3, a4, a5, (uint64_t (*)(void *, const JSChar *, size_t))WBSFieldLabelPatternMatcherSearchReverse);
}

uint64_t jsFieldPatternMatcherLongestMatch(const OpaqueJSContext *a1, OpaqueJSValue *a2, OpaqueJSValue *a3, uint64_t a4, JSValueRef *a5, const OpaqueJSValue **a6)
{
  return callPatternMatcherFunction<CFRange (*)(__WBSFieldLabelPatternMatcher const*,unsigned short const*,long)>(a1, a3, a4, a5, (uint64_t (*)(void *, const JSChar *, size_t))WBSFieldLabelPatternMatcherFindLongestMatch);
}

uint64_t callPatternMatcherFunction<CFRange (*)(__WBSFieldLabelPatternMatcher const*,unsigned short const*,long)>(const OpaqueJSContext *a1, OpaqueJSValue *a2, uint64_t a3, JSValueRef *a4, uint64_t (*a5)(void *, const JSChar *, size_t))
{
  JSStringRef v8;
  OpaqueJSString *v9;
  void *Private;
  const JSChar *CharactersPtr;
  size_t Length;
  uint64_t v13;
  size_t v14;
  OpaqueJSString *v15;
  OpaqueJSString *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  const OpaqueJSContext *v24;
  objc_object *v25;
  uint64_t v26;

  if (!a3)
    return 0;
  v8 = JSValueToStringCopy(a1, *a4, 0);
  if (!v8)
    return 0;
  v9 = v8;
  Private = JSObjectGetPrivate(a2);
  CharactersPtr = JSStringGetCharactersPtr(v9);
  Length = JSStringGetLength(v9);
  v13 = a5(Private, CharactersPtr, Length);
  if (v13 == -1)
  {
    v26 = 0;
  }
  else
  {
    v15 = JSStringCreateWithCharacters(&CharactersPtr[v13], v14);
    SafariShared::JSUtilities::nsString(v15, v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "lowercaseString");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    +[WBSFormToABBinder specifierForLabel:](WBSFormToABBinder, "specifierForLabel:", v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();

    v20 = objc_alloc(MEMORY[0x1E0C99D20]);
    objc_msgSend(v19, "property");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "category");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "parentProperty");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = (const OpaqueJSContext *)objc_msgSend(v20, "initWithObjects:", v17, v21, v22, v23, 0);

    v26 = SafariShared::JSUtilities::translateNSToJSValue(a1, v24, v25);
    if (v15)
      JSStringRelease(v15);
  }
  JSStringRelease(v9);
  return v26;
}

void sub_1A3E32E10(_Unwind_Exception *a1)
{
  OpaqueJSString *v1;
  OpaqueJSString *v2;
  void *v3;
  void *v4;
  void *v5;

  if (v2)
    JSStringRelease(v2);
  JSStringRelease(v1);
  _Unwind_Resume(a1);
}

id SafariShared::dayFieldLabels(SafariShared *this)
{
  updateCachedArraysIfNeeded();
  return (id)cachedDayFieldLabels;
}

void updateCachedArraysIfNeeded(void)
{
  void *v0;
  void *v1;
  void *v2;
  id v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  id v30;

  if ((updateCachedArraysIfNeeded(void)::haveLoadedData & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB34D0], "safari_safariSharedBundle");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "URLForResource:withExtension:", CFSTR("WBSFormAutoFillKeywords"), CFSTR("json"));
    v1 = (void *)objc_claimAutoreleasedReturnValue();

    v30 = 0;
    objc_msgSend(MEMORY[0x1E0C99D50], "dataWithContentsOfURL:options:error:", v1, 0, &v30);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = v30;
    v29 = v3;
    objc_msgSend(MEMORY[0x1E0CB36D8], "JSONObjectWithData:options:error:", v2, 0, &v29);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = v29;

    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      objc_msgSend(v4, "safari_arrayForKey:", CFSTR("UsernameFieldLabels"));
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      if (v6)
        objc_storeStrong((id *)&cachedUsernameFieldLabels, v6);

      objc_msgSend(v4, "safari_arrayForKey:", CFSTR("NonAccountPasswordSecureTextEntryFieldLabels"));
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      if (v7)
        objc_storeStrong((id *)&cachedNonAccountPasswordSecureTextEntryFieldLabels, v7);

      objc_msgSend(v4, "safari_arrayForKey:", CFSTR("NonUsernameFieldLabels"));
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      if (v8)
        objc_storeStrong((id *)&cachedNonUsernameFieldLabels, v8);

      objc_msgSend(v4, "safari_arrayForKey:", CFSTR("NonEmailFieldLabels"));
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      if (v9)
        objc_storeStrong((id *)&cachedNonEmailFieldLabels, v9);

      objc_msgSend(v4, "safari_arrayForKey:", CFSTR("OldPasswordFieldLabels"));
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      if (v10)
        objc_storeStrong((id *)&cachedOldPasswordFieldLabels, v10);

      objc_msgSend(v4, "safari_arrayForKey:", CFSTR("PasswordFieldLabels"));
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      if (v11)
        objc_storeStrong((id *)&cachedPasswordFieldLabels, v11);

      objc_msgSend(v4, "safari_arrayForKey:", CFSTR("ConfirmPasswordFieldLabels"));
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      if (v12)
        objc_storeStrong((id *)&cachedConfirmPasswordFieldLabels, v12);

      objc_msgSend(v4, "safari_arrayForKey:", CFSTR("ConfirmEmailFieldLabels"));
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      if (v13)
        objc_storeStrong((id *)&cachedConfirmEmailFieldLabels, v13);

      objc_msgSend(v4, "safari_arrayForKey:", CFSTR("ShowHideButtonLabels"));
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      if (v14)
        objc_storeStrong((id *)&cachedShowHideButtonLabels, v14);

      objc_msgSend(v4, "safari_arrayForKey:", CFSTR("SearchFieldLabels"));
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      if (v15)
        objc_storeStrong((id *)&cachedSearchFieldLabels, v15);

      objc_msgSend(v4, "safari_dictionaryForKey:", CFSTR("LoginFormTypeKeywords"));
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      if (v16)
        objc_storeStrong((id *)&cachedMapOfKeywordsIndicatingLoginFormTypeToScoreForMatching, v16);

      objc_msgSend(v4, "safari_dictionaryForKey:", CFSTR("NewAccountFormTypeKeywords"));
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      if (v17)
        objc_storeStrong((id *)&cachedMapOfKeywordsIndicatingNewAccountFormTypeToScoreForMatching, v17);

      objc_msgSend(v4, "safari_dictionaryForKey:", CFSTR("ChangePasswordFormTypeKeywords"));
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      if (v18)
        objc_storeStrong((id *)&cachedMapOfKeywordsIndicatingChangePasswordFormTypeToScoreForMatching, v18);

      objc_msgSend(v4, "safari_arrayForKey:", CFSTR("NonAutoFillableFormTypeKeywords"));
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      if (v19)
        objc_storeStrong((id *)&cachedKeywordsIndicatingNonAutoFillableFormType, v19);

      objc_msgSend(v4, "safari_arrayForKey:", CFSTR("IgnoredDataTypeFieldLabels"));
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      if (v20)
        objc_storeStrong((id *)&cachedIgnoredDataTypeFieldLabels, v20);

      objc_msgSend(v4, "safari_arrayForKey:", CFSTR("ForgotPasswordAffordanceRegularExpressions"));
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      if (v21)
        objc_storeStrong((id *)&cachedRegularExpressionsForForgotPasswordAffordance, v21);

      objc_msgSend(v4, "safari_arrayForKey:", CFSTR("ForgotUserNameAffordanceRegularExpressions"));
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      if (v22)
        objc_storeStrong((id *)&cachedRegularExpressionsForForgotUserNameAffordance, v22);

      objc_msgSend(v4, "safari_arrayForKey:", CFSTR("ForgotEmailAffordanceRegularExpressions"));
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      if (v23)
        objc_storeStrong((id *)&cachedRegularExpressionsForForgotEmailAffordance, v23);

      objc_msgSend(v4, "safari_arrayForKey:", CFSTR("OneTimeCodeFieldLabels"));
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      if (v24)
        objc_storeStrong((id *)&cachedOneTimeCodeFieldLabels, v24);

      objc_msgSend(v4, "safari_arrayForKey:", CFSTR("WeakOneTimeCodeFieldLabels"));
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      if (v25)
        objc_storeStrong((id *)&cachedWeakOneTimeCodeFieldLabels, v25);

      objc_msgSend(v4, "safari_arrayForKey:", CFSTR("DayFieldLabels"));
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      if (v26)
        objc_storeStrong((id *)&cachedDayFieldLabels, v26);

      objc_msgSend(v4, "safari_arrayForKey:", CFSTR("MonthFieldLabels"));
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      if (v27)
        objc_storeStrong((id *)&cachedMonthFieldLabels, v27);

      objc_msgSend(v4, "safari_arrayForKey:", CFSTR("YearFieldLabels"));
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      if (v28)
        objc_storeStrong((id *)&cachedYearFieldLabels, v28);

      updateCachedArraysIfNeeded(void)::haveLoadedData = 1;
    }

  }
}

void sub_1A3E3340C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

id SafariShared::monthFieldLabels(SafariShared *this)
{
  updateCachedArraysIfNeeded();
  return (id)cachedMonthFieldLabels;
}

id SafariShared::yearFieldLabels(SafariShared *this)
{
  updateCachedArraysIfNeeded();
  return (id)cachedYearFieldLabels;
}

id ignoredDataTypeFieldLabels(void)
{
  updateCachedArraysIfNeeded();
  return (id)cachedIgnoredDataTypeFieldLabels;
}

id oneTimeCodeFieldLabels(void)
{
  updateCachedArraysIfNeeded();
  return (id)cachedOneTimeCodeFieldLabels;
}

id WeakOneTimeCodeFieldLabels(void)
{
  updateCachedArraysIfNeeded();
  return (id)cachedWeakOneTimeCodeFieldLabels;
}

id usernameFieldLabels(void)
{
  updateCachedArraysIfNeeded();
  return (id)cachedUsernameFieldLabels;
}

id nonAccountPasswordSecureTextEntryFieldLabels(void)
{
  updateCachedArraysIfNeeded();
  return (id)cachedNonAccountPasswordSecureTextEntryFieldLabels;
}

id nonUsernameFieldLabels(void)
{
  updateCachedArraysIfNeeded();
  return (id)cachedNonUsernameFieldLabels;
}

id nonEmailFieldLabels(void)
{
  updateCachedArraysIfNeeded();
  return (id)cachedNonEmailFieldLabels;
}

id oldPasswordFieldLabels(void)
{
  updateCachedArraysIfNeeded();
  return (id)cachedOldPasswordFieldLabels;
}

id passwordFieldLabels(void)
{
  updateCachedArraysIfNeeded();
  return (id)cachedPasswordFieldLabels;
}

id confirmPasswordFieldLabels(void)
{
  updateCachedArraysIfNeeded();
  return (id)cachedConfirmPasswordFieldLabels;
}

id confirmEmailFieldLabels(void)
{
  updateCachedArraysIfNeeded();
  return (id)cachedConfirmEmailFieldLabels;
}

id showHideButtonLabels(void)
{
  updateCachedArraysIfNeeded();
  return (id)cachedShowHideButtonLabels;
}

id searchFieldLabels(void)
{
  updateCachedArraysIfNeeded();
  return (id)cachedSearchFieldLabels;
}

id mapOfKeywordsIndicatingLoginFormTypeToScoreForMatching(void)
{
  updateCachedArraysIfNeeded();
  return (id)cachedMapOfKeywordsIndicatingLoginFormTypeToScoreForMatching;
}

id mapOfKeywordsIndicatingNewAccountFormTypeToScoreForMatching(void)
{
  updateCachedArraysIfNeeded();
  return (id)cachedMapOfKeywordsIndicatingNewAccountFormTypeToScoreForMatching;
}

uint64_t WTF::HashTable<OpaqueFormAutoFillFrame *,WTF::KeyValuePair<OpaqueFormAutoFillFrame *,std::unique_ptr<SafariShared::FrameMetadata>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<OpaqueFormAutoFillFrame *,std::unique_ptr<SafariShared::FrameMetadata>>>,WTF::DefaultHash<OpaqueFormAutoFillFrame *>,WTF::HashMap<OpaqueFormAutoFillFrame *,std::unique_ptr<SafariShared::FrameMetadata>,WTF::DefaultHash<OpaqueFormAutoFillFrame *>,WTF::HashTraits<OpaqueFormAutoFillFrame *>,WTF::HashTraits<std::unique_ptr<SafariShared::FrameMetadata>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<OpaqueFormAutoFillFrame *>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (uint64_t *)(a1 + 8);
    do
    {
      if (*(v4 - 1) != -1)
      {
        v5 = *v4;
        *v4 = 0;
        if (v5)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

_QWORD *WTF::HashTable<OpaqueFormAutoFillFrame *,WTF::KeyValuePair<OpaqueFormAutoFillFrame *,std::unique_ptr<SafariShared::FrameMetadata>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<OpaqueFormAutoFillFrame *,std::unique_ptr<SafariShared::FrameMetadata>>>,WTF::DefaultHash<OpaqueFormAutoFillFrame *>,WTF::HashMap<OpaqueFormAutoFillFrame *,std::unique_ptr<SafariShared::FrameMetadata>,WTF::DefaultHash<OpaqueFormAutoFillFrame *>,WTF::HashTraits<OpaqueFormAutoFillFrame *>,WTF::HashTraits<std::unique_ptr<SafariShared::FrameMetadata>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<OpaqueFormAutoFillFrame *>>::remove(uint64_t *a1, _QWORD *a2)
{
  _QWORD *result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  result = (_QWORD *)a2[1];
  *a2 = -1;
  a2[1] = 0;
  if (result)
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return WTF::HashTable<OpaqueFormAutoFillFrame *,WTF::KeyValuePair<OpaqueFormAutoFillFrame *,std::unique_ptr<SafariShared::FrameMetadata>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<OpaqueFormAutoFillFrame *,std::unique_ptr<SafariShared::FrameMetadata>>>,WTF::DefaultHash<OpaqueFormAutoFillFrame *>,WTF::HashMap<OpaqueFormAutoFillFrame *,std::unique_ptr<SafariShared::FrameMetadata>,WTF::DefaultHash<OpaqueFormAutoFillFrame *>,WTF::HashTraits<OpaqueFormAutoFillFrame *>,WTF::HashTraits<std::unique_ptr<SafariShared::FrameMetadata>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<OpaqueFormAutoFillFrame *>>::rehash(a1, v8 >> 1, 0);
  }
  return result;
}

_QWORD *WTF::HashTable<OpaqueFormAutoFillFrame *,WTF::KeyValuePair<OpaqueFormAutoFillFrame *,std::unique_ptr<SafariShared::FrameMetadata>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<OpaqueFormAutoFillFrame *,std::unique_ptr<SafariShared::FrameMetadata>>>,WTF::DefaultHash<OpaqueFormAutoFillFrame *>,WTF::HashMap<OpaqueFormAutoFillFrame *,std::unique_ptr<SafariShared::FrameMetadata>,WTF::DefaultHash<OpaqueFormAutoFillFrame *>,WTF::HashTraits<OpaqueFormAutoFillFrame *>,WTF::HashTraits<std::unique_ptr<SafariShared::FrameMetadata>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<OpaqueFormAutoFillFrame *>>::rehash(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if (v7)
  {
    v12 = v7;
    v13 = (_QWORD *)v6;
    do
    {
      if (*v13 != -1)
      {
        if (*v13)
        {
          v15 = (_QWORD *)WTF::HashTable<OpaqueJSContext *,WTF::KeyValuePair<OpaqueJSContext *,OpaqueJSWeakObjectMap *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<OpaqueJSContext *,OpaqueJSWeakObjectMap *>>,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashMap<OpaqueJSContext *,OpaqueJSWeakObjectMap *,WTF::DefaultHash<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSContext *>,WTF::HashTraits<OpaqueJSWeakObjectMap *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<OpaqueJSContext *>>::lookupForReinsert(a1, v13);
          v16 = v15[1];
          v15[1] = 0;
          if (v16)
            (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
          *v15 = *v13;
          v17 = v13[1];
          v13[1] = 0;
          v15[1] = v17;
          v18 = v13[1];
          v13[1] = 0;
          if (v18)
            (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
          if (v13 == a3)
            v11 = v15;
        }
        else
        {
          v14 = v13[1];
          v13[1] = 0;
          if (v14)
            (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
        }
      }
      v13 += 2;
      --v12;
    }
    while (v12);
  }
  else
  {
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v11;
}

_QWORD *WTF::HashTable<OpaqueFormAutoFillFrame *,WTF::KeyValuePair<OpaqueFormAutoFillFrame *,std::unique_ptr<SafariShared::FrameMetadata>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<OpaqueFormAutoFillFrame *,std::unique_ptr<SafariShared::FrameMetadata>>>,WTF::DefaultHash<OpaqueFormAutoFillFrame *>,WTF::HashMap<OpaqueFormAutoFillFrame *,std::unique_ptr<SafariShared::FrameMetadata>,WTF::DefaultHash<OpaqueFormAutoFillFrame *>,WTF::HashTraits<OpaqueFormAutoFillFrame *>,WTF::HashTraits<std::unique_ptr<SafariShared::FrameMetadata>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<OpaqueFormAutoFillFrame *>>::expand(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<OpaqueFormAutoFillFrame *,WTF::KeyValuePair<OpaqueFormAutoFillFrame *,std::unique_ptr<SafariShared::FrameMetadata>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<OpaqueFormAutoFillFrame *,std::unique_ptr<SafariShared::FrameMetadata>>>,WTF::DefaultHash<OpaqueFormAutoFillFrame *>,WTF::HashMap<OpaqueFormAutoFillFrame *,std::unique_ptr<SafariShared::FrameMetadata>,WTF::DefaultHash<OpaqueFormAutoFillFrame *>,WTF::HashTraits<OpaqueFormAutoFillFrame *>,WTF::HashTraits<std::unique_ptr<SafariShared::FrameMetadata>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<OpaqueFormAutoFillFrame *>>::rehash(a1, v5, a2);
}

BOOL WTF::HashTable<OpaqueFormAutoFillFrame *,WTF::KeyValuePair<OpaqueFormAutoFillFrame *,std::unique_ptr<SafariShared::FrameMetadata>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<OpaqueFormAutoFillFrame *,std::unique_ptr<SafariShared::FrameMetadata>>>,WTF::DefaultHash<OpaqueFormAutoFillFrame *>,WTF::HashMap<OpaqueFormAutoFillFrame *,std::unique_ptr<SafariShared::FrameMetadata>,WTF::DefaultHash<OpaqueFormAutoFillFrame *>,WTF::HashTraits<OpaqueFormAutoFillFrame *>,WTF::HashTraits<std::unique_ptr<SafariShared::FrameMetadata>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<OpaqueFormAutoFillFrame *>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<OpaqueFormAutoFillFrame *,std::unique_ptr<SafariShared::FrameMetadata>,WTF::DefaultHash<OpaqueFormAutoFillFrame *>,WTF::HashTraits<OpaqueFormAutoFillFrame *>,WTF::HashTraits<std::unique_ptr<SafariShared::FrameMetadata>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<OpaqueFormAutoFillFrame *>>,OpaqueFormAutoFillFrame *>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  _BOOL8 result;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = ~(*a2 << 32) + *a2;
  v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
  v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
  v7 = v3 & (((v6 + ~(v6 << 27)) >> 31) ^ (v6 + ~((_DWORD)v6 << 27)));
  v8 = *(_QWORD *)(v2 + 16 * v7);
  if (v8 == *a2)
    return 1;
  v9 = 1;
  do
  {
    result = v8 != 0;
    if (!v8)
      break;
    v7 = (v7 + v9) & v3;
    v8 = *(_QWORD *)(v2 + 16 * v7);
    ++v9;
  }
  while (v8 != *a2);
  return result;
}

const __CFString *WBSStringFromAutoFillFormType(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 4)
    return CFSTR("WBSAutoFillFormTypeUndetermined");
  else
    return off_1E4B3A7A8[a1 - 1];
}

void sub_1A3E34964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose(&a39, 8);
  _Block_object_dispose(&a43, 8);
  _Block_object_dispose(&a47, 8);
  _Unwind_Resume(a1);
}

void sub_1A3E351AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  char a65;
  uint64_t v65;

  _Block_object_dispose(&a29, 8);
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose(&a37, 8);
  _Block_object_dispose(&a41, 8);
  _Block_object_dispose(&a45, 8);
  _Block_object_dispose(&a49, 8);
  _Block_object_dispose(&a53, 8);
  _Block_object_dispose(&a57, 8);
  _Block_object_dispose(&a61, 8);
  _Block_object_dispose(&a65, 8);
  _Block_object_dispose((const void *)(v65 - 256), 8);
  _Unwind_Resume(a1);
}

void sub_1A3E35C18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

id lookupSynonyms(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void ***v7;
  void ***v8;
  unint64_t v9;
  void *v10;
  void **v11;
  unint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  unint64_t v19;
  id v20;
  void *v21;
  void *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v5 = a2;
  v6 = a3;
  v7 = (void ***)findEntry<SafariShared::AddressBookAutoCompleteMappingData::SynonymCollection>(a1, v5);
  v8 = v7;
  v23 = v5;
  if (v7 && v7[1])
  {
    v9 = 0;
    v10 = 0;
    v11 = v7[2];
    v12 = -1;
    do
    {
      v25 = 0;
      v26 = 0;
      while (1)
      {
        v13 = *v11++;
        v14 = v13;
        v24 = (unint64_t)v14;
        if (!v14)
          break;
        v15 = HIDWORD(v26);
        if (HIDWORD(v26) == (_DWORD)v26)
        {
          WTF::Vector<NSString const* {__strong},0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,NSString const* {__strong}&>((uint64_t)&v25, (unint64_t)&v24);
        }
        else
        {
          v16 = v25;
          *(_QWORD *)(v16 + 8 * v15) = v14;
          ++HIDWORD(v26);
        }

      }
      v17 = objc_alloc(MEMORY[0x1E0C99D20]);
      v18 = (void *)objc_msgSend(v17, "initWithObjects:count:", v25, HIDWORD(v26), v23, v24);
      v24 = -1;
      if (+[WBSFormToABBinder indexOfBestMatchForString:inArray:startingPosition:](WBSFormToABBinder, "indexOfBestMatchForString:inArray:startingPosition:", v6, v18, &v24) != 0x7FFFFFFFFFFFFFFFLL)
      {
        v19 = v24;
        if (v24 < v12)
        {
          v20 = v18;

          v10 = v20;
          v12 = v19;
        }
      }

      WTF::Vector<NSString const* {__strong},0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v25, v21);
      ++v9;
    }
    while (v9 < (unint64_t)v8[1]);
  }
  else
  {
    v10 = 0;
  }

  return v10;
}

void sub_1A3E35E04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

unint64_t lookupSpecifier(uint64_t a1, void *a2)
{
  id v3;
  unint64_t result;
  unint64_t v5;
  WTF *v6;
  _QWORD *v7;
  void *v8;
  _QWORD *v9;
  void *v10;
  WTF *v11;
  _BYTE v12[256];
  _QWORD __key[3];

  v3 = a2;
  result = objc_msgSend(v3, "length");
  v5 = result;
  __key[0] = result;
  v11 = (WTF *)v12;
  v6 = (WTF *)v12;
  if (result >= 0x81)
  {
    if (result >> 31)
    {
      __break(0xC471u);
      return result;
    }
    v6 = (WTF *)WTF::fastMalloc((WTF *)(2 * result));
    v11 = v6;
  }
  objc_msgSend(v3, "getCharacters:range:", v6, 0, v5);
  __key[1] = v11;
  v7 = bsearch_b(__key, *(const void **)(a1 + 8), *(_QWORD *)a1, 0x18uLL, &__block_literal_global_15);
  if (v7)
  {
    v9 = (_QWORD *)v7[2];
    v10 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89B90]), "initWithProperty:component:label:category:parentProperty:classification:classificationHint:", *v9, v9[1], v9[2], v9[3], v9[4], v9[5], v9[6]);
  }
  else
  {
    v10 = 0;
  }
  if (v12 != (_BYTE *)v11)
  {
    if (v11)
      WTF::fastFree(v11, v8);
  }

  return (unint64_t)v10;
}

void sub_1A3E35F88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1A3E361B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1A3E36374(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void *findEntry<SafariShared::AddressBookAutoCompleteMappingData::SynonymCollectionMap>(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v7[2];

  v3 = a2;
  v4 = v3;
  v5 = 0;
  if (a1 && v3)
  {
    v7[0] = v3;
    v5 = bsearch_b(v7, *(const void **)(a1 + 8), *(_QWORD *)a1, 0x10uLL, &__block_literal_global_51);
  }

  return v5;
}

void sub_1A3E36414(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___Z9findEntryIN12SafariShared34AddressBookAutoCompleteMappingData20SynonymCollectionMapEEPKNT_5EntryEPKS3_P8NSString_block_invoke(uint64_t a1, id *a2, _QWORD *a3)
{
  return objc_msgSend(*a2, "compare:", *a3);
}

void *findEntry<SafariShared::AddressBookAutoCompleteMappingData::SynonymCollection>(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id __key[3];

  v3 = a2;
  v4 = v3;
  v5 = 0;
  if (a1 && v3)
  {
    __key[0] = v3;
    v5 = bsearch_b(__key, *(const void **)(a1 + 8), *(_QWORD *)a1, 0x18uLL, &__block_literal_global_14);
  }

  return v5;
}

void sub_1A3E364A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___Z9findEntryIN12SafariShared34AddressBookAutoCompleteMappingData17SynonymCollectionEEPKNT_5EntryEPKS3_P8NSString_block_invoke(uint64_t a1, id *a2, _QWORD *a3)
{
  return objc_msgSend(*a2, "compare:", *a3);
}

uint64_t WTF::Vector<NSString const* {__strong},0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,NSString const* {__strong}&>(uint64_t a1, unint64_t a2)
{
  id *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (id *)WTF::Vector<NSString const* {__strong},0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  *(_QWORD *)(v5 + 8 * v4) = *v3;
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<NSString const* {__strong},0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 8 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<NSString const* {__strong},0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<NSString const* {__strong},0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<NSString const* {__strong},0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _QWORD *v8;
  uint64_t v9;
  void **v10;
  void *v11;
  void *v12;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  v2 = a2;
  if (!(a2 >> 29))
  {
    v3 = result;
    v4 = *(WTF **)result;
    v5 = *(unsigned int *)(result + 12);
    v6 = WTF::fastMalloc((WTF *)(8 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(_QWORD *)v3 = v6;
    if ((_DWORD)v5)
    {
      v8 = (_QWORD *)v6;
      v9 = 8 * v5;
      v10 = (void **)v4;
      do
      {
        v11 = *v10;
        *v10 = 0;
        *v8++ = v11;
        v12 = *v10++;

        v9 -= 8;
      }
      while (v9);
    }
    if (v4)
    {
      if (*(WTF **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<NSString const* {__strong},0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  void **v4;
  uint64_t v5;
  void *v6;
  WTF *v7;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(void ***)a1;
    v5 = 8 * v3;
    do
    {
      v6 = *v4++;

      v5 -= 8;
    }
    while (v5);
  }
  v7 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

uint64_t ___ZL15lookupSpecifierRKN12SafariShared34AddressBookAutoCompleteMappingData3MapEP8NSString_block_invoke(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned __int16 *v6;
  unsigned __int16 *v7;
  unsigned int v8;
  unsigned int v9;

  v3 = *a3;
  v4 = *a2;
  if (*a3 >= *a2)
    v5 = *a2;
  else
    v5 = *a3;
  if (v5)
  {
    v6 = (unsigned __int16 *)a3[1];
    v7 = (unsigned __int16 *)a2[1];
    while (1)
    {
      v8 = *v7;
      v9 = *v6;
      if (v8 < v9)
        return 0xFFFFFFFFLL;
      if (v9 < v8)
        return 1;
      ++v7;
      ++v6;
      if (!--v5)
        goto LABEL_9;
    }
  }
  else
  {
LABEL_9:
    if (v4 < v3)
      return 0xFFFFFFFFLL;
    else
      return v3 < v4;
  }
}

void sub_1A3E36890(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

__CFString *mobileGestaltStringForQuery(const __CFString *a1)
{
  __CFString *v1;
  __CFString *v2;
  __CFString *v3;

  v1 = (__CFString *)MGCopyAnswer();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v2 = v1;
  else
    v2 = &stru_1E4B40D18;
  v3 = v2;

  return v3;
}

void sub_1A3E36918(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E36968(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E36C84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A3E36DDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3E37160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;

  a9.super_class = (Class)WBSFrequentlyVisitedSitesBannedURLStore;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1A3E37264(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E372D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3E37380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1A3E3747C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3E37538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1A3E37670(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E37748(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3E377DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A3E378A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A85998AC](v1, 0x1080C40D2F62047);
  _Unwind_Resume(a1);
}

void sub_1A3E379A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id *a9)
{
  void *v9;
  void *v10;

  std::unique_ptr<SafariShared::SuddenTerminationDisabler>::reset[abi:sn180100](&a9, 0);
  _Unwind_Resume(a1);
}

void sub_1A3E37CE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id a30)
{
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;

  _Block_object_dispose(&a19, 8);
  _Block_object_dispose(&a25, 8);

  _Unwind_Resume(a1);
}

void sub_1A3E37E28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E37F5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E380B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E381A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  void *v20;

  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

void sub_1A3E38318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1A3E383F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1A3E38480(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E38534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1A3E385C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{

  _Unwind_Resume(a1);
}

void sub_1A3E38684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1A3E38720(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E387C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1A3E38824(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E388FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1A3E38B78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1A3E38D54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E38E54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1A3E39060(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3E39160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1A3E39420(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3E39668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, uint64_t a17, id location)
{
  id *v18;
  void *v19;
  void *v20;
  void *v21;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A3E3977C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1A3E3A05C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3E3A0C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3E3A154(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E3A1DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E3A5C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  void *v28;
  void *v29;

  _Block_object_dispose(&a23, 8);
  _Unwind_Resume(a1);
}

void sub_1A3E3A78C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{

  _Unwind_Resume(a1);
}

void sub_1A3E3A844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3E3AA64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1A3E3AB24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E3ABB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1A3E3AC58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1A3E3ADA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E3AF20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E3AFE4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E3B03C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3E3B098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3E3B3A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_1A3E3B494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3E3B584(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E3BA14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17)
{
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1A3E3BFA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1A3E3C1A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1A3E3C388(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3E3C4B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1A3E3C570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3E3C5E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3E3C7B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16, void *a17)
{
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

void sub_1A3E3C9BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A3E3CB10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E3CCE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  void *v21;
  void *v22;
  uint64_t v23;

  _Block_object_dispose((const void *)(v23 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1A3E3CE70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1A3E3CF30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3E3D264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A3E3D344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3E3D44C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E3D518(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E3D618(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E3D72C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3E3D960(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A3E3DB18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E3DC80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E3DDDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E3DE54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A3E3DEC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A3E3E158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1A3E3E1F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3E3E338(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E3E444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1A3E3E5D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id SafariShared::WBSSQLiteDatabaseFetch<double,double>(void *a1, void *a2, double *a3, double *a4)
{
  id v7;
  id v8;
  void *v9;
  void *v10;

  v7 = a1;
  v8 = a2;
  v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89CC8]), "initWithDatabase:query:", v7, v8);
  SafariShared::_WBSSQLiteStatementBindAllParameters<1,double,double>(v9, a3, a4);
  objc_msgSend(v9, "fetch");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

void sub_1A3E3E6AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3E3E878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3E3E9E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1A3E3EB74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id SafariShared::WBSSQLiteDatabaseFetch<double &,double &>(void *a1, void *a2, double *a3, double *a4)
{
  id v7;
  id v8;
  void *v9;
  void *v10;

  v7 = a1;
  v8 = a2;
  v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89CC8]), "initWithDatabase:query:", v7, v8);
  SafariShared::_WBSSQLiteStatementBindAllParameters<1,double &,double &>(v9, a3, a4);
  objc_msgSend(v9, "fetch");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

void sub_1A3E3EC50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3E3EDFC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,double &,double &>(void *a1, double *a2, double *a3)
{
  id v5;

  v5 = a1;
  objc_msgSend(v5, "bindDouble:atParameterIndex:", 1, *a2);
  objc_msgSend(v5, "bindDouble:atParameterIndex:", 2, *a3);

}

void sub_1A3E3EED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3E3F3D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A3E3F680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void sub_1A3E3F80C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1A3E3F9A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1A3E3FA74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3E3FB50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E3FBDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_1A3E3FCC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E3FE80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3E3FFC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{

  _Unwind_Resume(a1);
}

void sub_1A3E400E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E401D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3E40300(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E422B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A3E42A90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E42B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1A3E42BC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1A3E42C80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A3E42FA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A3E4317C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A3E432E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A3E43320()
{
  JUMPOUT(0x1A3E43314);
}

void sub_1A3E434B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1A3E4361C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1A3E43784(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3E438F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A3E4394C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E43A0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1A3E43BC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id WBSHistoryTruncatePageTitle(void *a1, unint64_t a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;

  v3 = a1;
  if (objc_msgSend(v3, "length") <= a2)
  {
    v7 = v3;
  }
  else
  {
    v4 = objc_msgSend(v3, "rangeOfComposedCharacterSequencesForRange:", 0, a2 - 1);
    objc_msgSend(v3, "substringWithRange:", v4, v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "stringByAppendingString:", CFSTR("…"));
    v7 = (id)objc_claimAutoreleasedReturnValue();

  }
  return v7;
}

void sub_1A3E43D54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id WBSHistoryDecodeAutocompleteTriggers(uint64_t a1)
{
  void *v1;
  id v2;
  uint64_t v3;
  void *v4;
  char isKindOfClass;

  objc_msgSend(MEMORY[0x1E0CB38B0], "propertyListWithData:options:format:error:", a1, 1, 0, 0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v2 = v1;
    if (objc_msgSend(v2, "count"))
    {
      v3 = objc_msgSend(v2, "count");
      if (v3 - 1 >= 0)
      {
        do
        {
          objc_msgSend(v2, "objectAtIndexedSubscript:", --v3);
          v4 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          isKindOfClass = objc_opt_isKindOfClass();

          if ((isKindOfClass & 1) == 0)
            objc_msgSend(v2, "removeObjectAtIndex:", v3);
        }
        while (v3 > 0);
      }
    }
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

void sub_1A3E43E5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t WBSHistoryAddAutocompleteTriggerToArray(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;

  v3 = a1;
  v4 = a2;
  if (!objc_msgSend(v4, "length"))
  {
LABEL_10:
    v8 = 0;
    goto LABEL_11;
  }
  v5 = objc_msgSend(v3, "count");
  if (v5)
  {
    v6 = v5 - 1;
    while (1)
    {
      objc_msgSend(v3, "objectAtIndexedSubscript:", v6);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      if ((objc_msgSend(v7, "safari_hasPrefix:", v4) & 1) != 0)
        break;
      if (objc_msgSend(v4, "safari_hasPrefix:", v7))
        objc_msgSend(v3, "removeObjectAtIndex:", v6);

      if (--v6 == -1)
        goto LABEL_8;
    }

    goto LABEL_10;
  }
LABEL_8:
  objc_msgSend(v3, "addObject:", v4);
  v8 = 1;
LABEL_11:

  return v8;
}

void sub_1A3E43F4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

unsigned int *WBSHistoryCollapseDailyVisitsToWeekly(unsigned int *result, _DWORD *a2)
{
  unint64_t v3;
  unsigned int *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  int *v10;
  int *v11;
  unsigned int v12;
  int v13;

  v3 = result[3];
  if (v3 <= 0xD)
  {
    v12 = a2[3];
  }
  else
  {
    v4 = result;
    do
    {
      v13 = 0;
      v5 = 0;
      v6 = *(_QWORD *)v4 + 4 * v3;
      v7 = -7;
      do
      {
        if (!__CFADD__(v3, v7))
        {
          __break(0xC471u);
          return result;
        }
        v5 += *(_DWORD *)(v6 + 4 * v7);
        v13 = v5;
      }
      while (!__CFADD__(v7++, 1));
      v4[3] = v3 - 7;
      v9 = a2[3];
      if (v9 == a2[2])
      {
        v10 = (int *)WTF::Vector<SafariShared::FieldLabelPatternMatcher::DFA::State,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2, v9 + 1, (unint64_t)&v13);
        v9 = a2[3];
      }
      else
      {
        v10 = &v13;
      }
      v11 = *(int **)a2;
      result = (unsigned int *)memmove((void *)(*(_QWORD *)a2 + 4), *(const void **)a2, 4 * v9);
      *v11 = *v10;
      v12 = a2[3] + 1;
      a2[3] = v12;
      v3 = v4[3];
    }
    while (v3 > 0xD);
  }
  if (v12 > 5uLL)
    a2[3] = 5;
  return result;
}

uint64_t WBSHistoryPadDailyCountsForNewVisitAtTime(unsigned int *a1, unsigned int *a2, double a3, double a4)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v15;
  int v16;
  WTF *v17;
  uint64_t v18;
  _BYTE v19[128];

  v8 = a1[3];
  if (!v8)
  {
    LODWORD(v17) = 0;
    if (a1[2])
      **(_DWORD **)a1 = 0;
    else
      *(_DWORD *)(*(_QWORD *)a1 + 4 * a1[3]) = *(_DWORD *)WTF::Vector<SafariShared::FieldLabelPatternMatcher::DFA::State,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a1, 1uLL, (unint64_t)&v17);
    v8 = a1[3] + 1;
    a1[3] = v8;
  }
  if (a3 == 0.0)
    return 0;
  v9 = vcvtpd_s64_f64(a4 / 86400.0);
  v10 = vcvtpd_s64_f64(a3 / 86400.0);
  v11 = v9 - v10;
  if (v9 == v10)
    return 0;
  if ((int)v11 > 49)
  {
    WTF::Vector<SafariShared::FieldLabelPatternMatcher::DFA::State,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, 0);
    LODWORD(v17) = 0;
    v12 = a1[3];
    if ((_DWORD)v12 == a1[2])
      *(_DWORD *)(*(_QWORD *)a1 + 4 * a1[3]) = *(_DWORD *)WTF::Vector<SafariShared::FieldLabelPatternMatcher::DFA::State,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a1, v12 + 1, (unint64_t)&v17);
    else
      *(_DWORD *)(*(_QWORD *)a1 + 4 * v12) = 0;
    ++a1[3];
    WTF::Vector<SafariShared::FieldLabelPatternMatcher::DFA::State,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a2, 0);
    return 0;
  }
  v13 = v10 - v9;
  if ((int)v13 > 49)
    return 0xFFFFFFFFLL;
  v17 = (WTF *)v19;
  v18 = 32;
  if ((int)v11 < 1)
  {
    if (v8 <= (int)v13)
    {
      v16 = 0;
      WTF::Vector<int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::fill((unsigned int *)&v17, &v16, 1 - v8 - (int)v11);
      WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>((uint64_t)a1, (uint64_t)&v17);
    }
  }
  else
  {
    v16 = 0;
    WTF::Vector<int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::fill((unsigned int *)&v17, &v16, v11);
    WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::insert<int>((uint64_t)a1, 0, v17, HIDWORD(v18));
    v13 = 0;
  }
  v15 = v17;
  if (v19 != (_BYTE *)v17 && v17)
  {
    v17 = 0;
    LODWORD(v18) = 0;
    WTF::fastFree(v15, a2);
  }
  return v13;
}

void sub_1A3E44288(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11, int a12)
{
  WTF *v12;

  if (v12 != a11)
  {
    if (a11)
      WTF::fastFree(a11, a2);
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WTF::Vector<int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::fill(unsigned int *result, _DWORD *a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  _DWORD *v7;
  unint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;

  v5 = (uint64_t)result;
  v6 = result[3];
  if (v6 <= a3)
  {
    if (result[2] < a3)
    {
      WTF::Vector<int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((WTF *)result, 0);
      result = (unsigned int *)WTF::Vector<int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(v5, a3);
      LODWORD(v6) = *(_DWORD *)(v5 + 12);
    }
  }
  else
  {
    result[3] = a3;
    LODWORD(v6) = a3;
  }
  v7 = *(_DWORD **)v5;
  if ((_DWORD)v6)
  {
    v8 = v6 + 1;
    v9 = *(_DWORD **)v5;
    do
    {
      *v9++ = *a2;
      --v8;
    }
    while (v8 > 1);
    v10 = *(unsigned int *)(v5 + 12);
  }
  else
  {
    v10 = 0;
  }
  if (v10 != a3)
  {
    v11 = &v7[v10];
    v12 = 4 * a3 - 4 * v10;
    do
    {
      *v11++ = *a2;
      v12 -= 4;
    }
    while (v12);
  }
  *(_DWORD *)(v5 + 12) = a3;
  return result;
}

uint64_t WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  const void *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v2 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v2)
  {
    v3 = result;
    v4 = *(const void **)a2;
    v6 = *(unsigned int *)(result + 8);
    v5 = *(unsigned int *)(result + 12);
    v7 = v5 + v2;
    if (v5 + v2 > v6
      && ((v8 = v6 + (v6 >> 2), v8 >= 0x10) ? (v9 = v8 + 1) : (v9 = 16),
          v9 <= v7 ? (v10 = v7) : (v10 = v9),
          result = WTF::Vector<SafariShared::FieldLabelPatternMatcher::DFA::State,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(result, v10), v5 = *(unsigned int *)(v3 + 12), v7 < v5))
    {
      __break(0xC471u);
    }
    else
    {
      result = (uint64_t)memcpy((void *)(*(_QWORD *)v3 + 4 * v5), v4, 4 * v2);
      *(_DWORD *)(v3 + 12) = v7;
    }
  }
  return result;
}

uint64_t WBSHistoryAddVisitToScore(int a1, unsigned int *a2, unsigned int *a3, double a4, double a5)
{
  uint64_t result;

  result = WBSHistoryPadDailyCountsForNewVisitAtTime(a2, a3, a4, a5);
  if ((result & 0x80000000) == 0)
  {
    if (a2[3] <= result)
    {
      __break(0xC471u);
    }
    else
    {
      *(_DWORD *)(*(_QWORD *)a2 + 4 * result) += a1;
      return (uint64_t)WBSHistoryCollapseDailyVisitsToWeekly(a2, a3);
    }
  }
  return result;
}

uint64_t WBSHistoryUpdateScoreOfVisit(uint64_t result, int a2, uint64_t a3, double a4, double a5, uint64_t a6, char *a7)
{
  signed int v7;
  char v8;

  v7 = vcvtpd_s64_f64(a4 / 86400.0) - vcvtpd_s64_f64(a5 / 86400.0);
  if (*(unsigned int *)(a3 + 12) <= (unint64_t)v7)
  {
    if (!a7)
      return result;
    v8 = 1;
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)a3 + 4 * v7) += a2 - result;
    if (!a7)
      return result;
    v8 = 0;
  }
  *a7 = v8;
  return result;
}

unsigned int *WBSHistoryTimesOfVisitsToSynthesizeFromDailyCounts@<X0>(unsigned int *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  unsigned int *v5;
  unint64_t v8;
  int v9;
  int *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  int *v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  int v19;
  unint64_t i;
  int v21;
  int v22;
  double v23;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  WTF *v34;
  uint64_t v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  WTF *v47;
  uint64_t v48;
  WTF *v49;
  unsigned int v50;

  v5 = result;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v8 = result[3];
  if ((_DWORD)v8)
  {
    v9 = 0;
    v10 = *(int **)result;
    v11 = 4 * v8;
    do
    {
      v12 = *v10++;
      v9 += v12;
      v11 -= 4;
    }
    while (v11);
  }
  else
  {
    v9 = 0;
  }
  v13 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v13)
  {
    v14 = 0;
    v15 = *(int **)a2;
    v16 = 4 * v13;
    do
    {
      v17 = *v15++;
      v14 += v17;
      v16 -= 4;
    }
    while (v16);
  }
  else
  {
    v14 = 0;
  }
  v18 = v14 + v9;
  if (v14 + v9)
  {
    if (v18 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    result = (unsigned int *)WTF::fastMalloc((WTF *)(8 * (int)v18));
    *(_DWORD *)(a3 + 8) = v18;
    *(_QWORD *)a3 = result;
    v8 = v5[3];
  }
  v19 = vcvtpd_s64_f64(a4 / 86400.0);
  if (v8)
  {
    for (i = 0; i < v8; ++i)
    {
      v21 = v19 - 1;
      v22 = *(_DWORD *)(*(_QWORD *)v5 + 4 * i);
      if (v22)
      {
        v23 = 86400.0 * (double)v19;
        if (!i)
          v23 = a4;
        timesForVisits(86400.0 * (double)v21, v23, v22 - (i == 0), (uint64_t)&v49);
        v25 = v50;
        v26 = *(unsigned int *)(a3 + 8);
        v27 = v50 + (unint64_t)*(unsigned int *)(a3 + 12);
        if (v27 > v26)
        {
          v28 = v26 + (v26 >> 2);
          if (v28 >= 0x10)
            v29 = v28 + 1;
          else
            v29 = 16;
          if (v29 <= v27)
            v30 = v50 + (unint64_t)*(unsigned int *)(a3 + 12);
          else
            v30 = v29;
          WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a3, v30);
        }
        result = (unsigned int *)v49;
        if ((_DWORD)v25)
        {
          v31 = *(_QWORD *)a3;
          v32 = *(_DWORD *)(a3 + 12);
          v33 = 8 * v25;
          v34 = v49;
          do
          {
            v35 = *(_QWORD *)v34;
            v34 = (WTF *)((char *)v34 + 8);
            *(_QWORD *)(v31 + 8 * v32++) = v35;
            v33 -= 8;
          }
          while (v33);
          *(_DWORD *)(a3 + 12) = v32;
        }
        if (result)
          result = (unsigned int *)WTF::fastFree((WTF *)result, v24);
        v8 = v5[3];
      }
      v19 = v21;
    }
  }
  else
  {
    v21 = v19;
  }
  if (*(_DWORD *)(a2 + 12))
  {
    v36 = 0;
    do
    {
      timesForVisits(86400.0 * (double)(unint64_t)(v21 - 7), 86400.0 * (double)v21, *(int *)(*(_QWORD *)a2 + 4 * v36), (uint64_t)&v49);
      v38 = v50;
      v39 = *(unsigned int *)(a3 + 8);
      v40 = v50 + (unint64_t)*(unsigned int *)(a3 + 12);
      if (v40 > v39)
      {
        v41 = v39 + (v39 >> 2);
        if (v41 >= 0x10)
          v42 = v41 + 1;
        else
          v42 = 16;
        if (v42 <= v40)
          v43 = v50 + (unint64_t)*(unsigned int *)(a3 + 12);
        else
          v43 = v42;
        WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a3, v43);
      }
      result = (unsigned int *)v49;
      if ((_DWORD)v38)
      {
        v44 = *(_QWORD *)a3;
        v45 = *(_DWORD *)(a3 + 12);
        v46 = 8 * v38;
        v47 = v49;
        do
        {
          v48 = *(_QWORD *)v47;
          v47 = (WTF *)((char *)v47 + 8);
          *(_QWORD *)(v44 + 8 * v45++) = v48;
          v46 -= 8;
        }
        while (v46);
        *(_DWORD *)(a3 + 12) = v45;
      }
      if (result)
        result = (unsigned int *)WTF::fastFree((WTF *)result, v37);
      ++v36;
      v21 -= 7;
    }
    while (v36 < *(unsigned int *)(a2 + 12));
  }
  return result;
}

void sub_1A3E44764(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9)
{
  uint64_t v9;
  WTF *v11;

  v11 = *(WTF **)v9;
  if (*(_QWORD *)v9)
  {
    *(_QWORD *)v9 = 0;
    *(_DWORD *)(v9 + 8) = 0;
    WTF::fastFree(v11, a2);
  }
  _Unwind_Resume(exception_object);
}

unint64_t timesForVisits@<X0>(double a1@<D0>, double a2@<D1>, unint64_t result@<X0>, uint64_t a4@<X8>)
{
  unint64_t v4;
  double v8;

  v4 = result;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 12) = result;
  if (result)
  {
    if (!(result >> 29))
    {
      result = WTF::fastMalloc((WTF *)(8 * result));
      *(_DWORD *)(a4 + 8) = v4;
      *(_QWORD *)a4 = result;
      v8 = (a2 - a1) / (double)(v4 + 1);
      while (v4)
      {
        a1 = v8 + a1;
        *(double *)result = a1;
        result += 8;
        if (!--v4)
          return result;
      }
    }
    __break(0xC471u);
    JUMPOUT(0x1A3E44820);
  }
  return result;
}

unint64_t WBSHistoryTimesForSynthesizedVisitsPreceedingDailyAndWeeklyRange@<X0>(double a1@<D0>, unint64_t a2@<X0>, uint64_t a3@<X8>)
{
  return timesForVisits(a1 - (double)0x30uLL * 86400.0 - (double)0x1CuLL * 86400.0, a1 - (double)0x30uLL * 86400.0, a2, a3);
}

WTF *WTF::Vector<int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(WTF *result, unint64_t a2)
{
  unint64_t v2;
  int v3;
  WTF *v4;
  unint64_t v5;
  WTF *v6;
  WTF *v7;

  v2 = *((unsigned int *)result + 2);
  if (v2 > a2)
  {
    v3 = a2;
    v4 = result;
    v5 = *((unsigned int *)result + 3);
    if (v5 > a2)
    {
      *((_DWORD *)result + 3) = a2;
      LODWORD(v5) = a2;
    }
    v6 = *(WTF **)result;
    v7 = *(WTF **)result;
    if (a2)
    {
      if (v2 >= a2)
        v2 = a2;
      if (v2 >= 0x21)
      {
        if (!(a2 >> 62))
        {
          *((_DWORD *)result + 2) = a2;
          result = (WTF *)WTF::fastRealloc(v6, (void *)(4 * a2));
          *(_QWORD *)v4 = result;
          return result;
        }
LABEL_26:
        __break(0xC471u);
        JUMPOUT(0x1A3E44990);
      }
      if (a2 < 0x21)
      {
        result = (WTF *)((char *)result + 16);
        *(_QWORD *)v4 = (char *)v4 + 16;
        *((_DWORD *)v4 + 2) = 32;
      }
      else
      {
        if (a2 >> 30)
          goto LABEL_26;
        result = (WTF *)WTF::fastMalloc((WTF *)(4 * a2));
        *((_DWORD *)v4 + 2) = v3;
        *(_QWORD *)v4 = result;
      }
      v7 = v6;
      if (result != v6)
      {
        result = (WTF *)memcpy(result, v6, 4 * v5);
        v7 = *(WTF **)v4;
      }
    }
    if ((WTF *)((char *)v4 + 16) != v6 && v6 != 0)
    {
      if (v7 == v6)
      {
        *(_QWORD *)v4 = 0;
        *((_DWORD *)v4 + 2) = 0;
      }
      result = (WTF *)WTF::fastFree(v6, (void *)a2);
      v7 = *(WTF **)v4;
    }
    if (!v7)
    {
      *(_QWORD *)v4 = (char *)v4 + 16;
      *((_DWORD *)v4 + 2) = 32;
    }
  }
  return result;
}

uint64_t WTF::Vector<int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  v2 = a2;
  v3 = result;
  v4 = *(void **)result;
  v5 = *(unsigned int *)(result + 12);
  if (a2 < 0x21)
  {
    v6 = (void *)(result + 16);
    *(_QWORD *)v3 = v3 + 16;
    *(_DWORD *)(v3 + 8) = 32;
LABEL_6:
    memcpy(v6, v4, 4 * v5);
    if ((void *)(v3 + 16) != v4 && v4 != 0)
    {
      if (*(void **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree((WTF *)v4, v7);
    }
    return 1;
  }
  if (!(a2 >> 30))
  {
    v6 = (void *)WTF::fastMalloc((WTF *)(4 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(_QWORD *)v3 = v6;
    goto LABEL_6;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::insert<int>(uint64_t result, uint64_t a2, const void *a3, uint64_t a4)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;

  v7 = result;
  v9 = *(unsigned int *)(result + 8);
  v8 = *(unsigned int *)(result + 12);
  v10 = v8 + a4;
  if (v8 + a4 > v9)
  {
    v11 = v9 + (v9 >> 2);
    if (v11 >= 0x10)
      v12 = v11 + 1;
    else
      v12 = 16;
    if (v12 <= v10)
      v13 = v10;
    else
      v13 = v12;
    result = WTF::Vector<SafariShared::FieldLabelPatternMatcher::DFA::State,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(result, v13);
    v8 = *(unsigned int *)(v7 + 12);
  }
  if (v10 < v8)
  {
    __break(0xC471u);
  }
  else
  {
    v14 = (char *)(*(_QWORD *)v7 + 4 * a2);
    memmove(&v14[4 * a4], v14, *(_QWORD *)v7 + 4 * v8 - (_QWORD)v14);
    result = (uint64_t)memcpy(v14, a3, 4 * a4);
    *(_DWORD *)(v7 + 12) = v10;
  }
  return result;
}

uint64_t WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  v2 = a2;
  if (!(a2 >> 29))
  {
    v3 = result;
    v4 = *(void **)result;
    v5 = *(unsigned int *)(result + 12);
    v6 = (void *)WTF::fastMalloc((WTF *)(8 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(_QWORD *)v3 = v6;
    memcpy(v6, v4, 8 * v5);
    if (v4)
    {
      if (*(void **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree((WTF *)v4, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

void sub_1A3E44C54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E44DB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3E45118(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E45188(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E45390(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E45698(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E457C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3E45958(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E45B98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E45CB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3E4600C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A3E461D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E4629C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E462FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A3E46374(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E463E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E46480(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3E465C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E46C30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E46CE4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E46DE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E46EB4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E46FF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>>>::find<long long>(_QWORD *a1, unint64_t *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (v3 >= *(_QWORD *)&v2)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(_QWORD **)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  result = (_QWORD *)*v6;
  if (*v6)
  {
    do
    {
      v8 = result[1];
      if (v8 == v3)
      {
        if (result[2] == v3)
          return result;
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(_QWORD *)&v2)
            v8 %= *(_QWORD *)&v2;
        }
        else
        {
          v8 &= *(_QWORD *)&v2 - 1;
        }
        if (v8 != v5)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  v13 = (_QWORD *)(a1 + 16);
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__rehash<true>(a1, v19);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *i = *v21;
LABEL_38:
    *v21 = i;
    goto LABEL_39;
  }
  *i = *v13;
  *v13 = i;
  *(_QWORD *)(v20 + 8 * v4) = v13;
  if (*i)
  {
    v22 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8)
        v22 %= v8;
    }
    else
    {
      v22 &= v8 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1A3E47358(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,void *>>>::operator()[abi:sn180100](v2, v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,void *>>>::operator()[abi:sn180100](uint64_t a1, id *a2)
{
  if (*(_BYTE *)(a1 + 8))
  {

  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

uint64_t *std::__hash_table<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>>>::__erase_unique<long long>(_QWORD *a1, unint64_t *a2)
{
  uint64_t *result;

  result = std::__hash_table<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>>>::find<long long>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>>>::erase(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  id *v3;
  void *__p;
  char v5;

  if (a2)
  {
    v2 = *a2;
    std::__hash_table<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>>>::remove(result, a2, (uint64_t)&__p);
    v3 = (id *)__p;
    __p = 0;
    if (v3)
    {
      if (v5)

      operator delete(v3);
    }
    return (_QWORD *)v2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>>>::remove@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  v6 = *(_QWORD **)(*result + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (_QWORD *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2)
    goto LABEL_18;
  v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v3)
      v8 %= *(_QWORD *)&v3;
  }
  else
  {
    v8 &= *(_QWORD *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2)
      goto LABEL_19;
    v9 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v3)
        v9 %= *(_QWORD *)&v3;
    }
    else
    {
      v9 &= *(_QWORD *)&v3 - 1;
    }
    if (v9 != v4)
LABEL_19:
      *(_QWORD *)(*result + 8 * v4) = 0;
  }
  v10 = *a2;
  if (*a2)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(_QWORD *)&v3)
        v11 %= *(_QWORD *)&v3;
    }
    else
    {
      v11 &= *(_QWORD *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(_QWORD *)(*result + 8 * v11) = v7;
      v10 = *a2;
    }
  }
  *v7 = v10;
  *a2 = 0;
  --result[3];
  *(_QWORD *)a3 = a2;
  *(_QWORD *)(a3 + 8) = result + 2;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>>>::__emplace_unique_key_args<long long,std::pair<long long,WBSHistoryItem * {__strong}>>(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  v12 = (_QWORD *)(a1 + 16);
  i = operator new(0x20uLL);
  v13 = *a3;
  v14 = a3[1];
  a3[1] = 0;
  *i = 0;
  i[1] = v6;
  i[2] = v13;
  i[3] = v14;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v7 || (float)(v16 * (float)v7) < v15)
  {
    v17 = 1;
    if (v7 >= 3)
      v17 = (v7 & (v7 - 1)) != 0;
    v18 = v17 | (2 * v7);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__rehash<true>(a1, v20);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *i = *v22;
LABEL_38:
    *v22 = i;
    goto LABEL_39;
  }
  *i = *v12;
  *v12 = i;
  *(_QWORD *)(v21 + 8 * v3) = v12;
  if (*i)
  {
    v23 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v23 >= v7)
        v23 %= v7;
    }
    else
    {
      v23 &= v7 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1A3E477A8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,void *>>>::operator()[abi:sn180100](v2, v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD v24[2];
  char v25;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v13 = a1 + 16;
  v14 = operator new(0x20uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  *v14 = 0;
  v14[1] = v7;
  v14[2] = **a4;
  v14[3] = 0;
  v25 = 1;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__rehash<true>(a1, v20);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *(_QWORD *)v24[0] = *v21;
    *v21 = v24[0];
  }
  else
  {
    *(_QWORD *)v24[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v24[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v13;
    if (*(_QWORD *)v24[0])
    {
      v22 = *(_QWORD *)(*(_QWORD *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8)
          v22 %= v8;
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = v24[0];
    }
  }
  v11 = (_QWORD *)v24[0];
  v24[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>,void *>>>>::reset[abi:sn180100]((uint64_t)v24, 0);
  return v11;
}

void sub_1A3E47A04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>,void *>>>>::reset[abi:sn180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>,void *>>>>::reset[abi:sn180100](uint64_t a1, uint64_t a2)
{
  id *v2;

  v2 = *(id **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      objc_destroyWeak(v2 + 3);
    operator delete(v2);
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>>>::erase(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  _BYTE v3[24];

  if (a2)
  {
    v2 = *a2;
    std::__hash_table<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>>>::remove(result, a2, (uint64_t)v3);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>,void *>>>>::reset[abi:sn180100]((uint64_t)v3, 0);
    return (_QWORD *)v2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>>>::__emplace_unique_key_args<long long,std::pair<long long,WBSHistoryVisit * {__strong}>>(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD v24[2];
  char v25;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == v6)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v12 = a1 + 16;
  v13 = operator new(0x20uLL);
  v24[0] = v13;
  v24[1] = a1 + 16;
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = v6;
  v14 = (void *)a3[1];
  *((_QWORD *)v13 + 2) = *a3;
  objc_initWeak((id *)v13 + 3, v14);
  v25 = 1;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v7 || (float)(v16 * (float)v7) < v15)
  {
    v17 = 1;
    if (v7 >= 3)
      v17 = (v7 & (v7 - 1)) != 0;
    v18 = v17 | (2 * v7);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__rehash<true>(a1, v20);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v21)
  {
    *(_QWORD *)v24[0] = *v21;
    *v21 = v24[0];
  }
  else
  {
    *(_QWORD *)v24[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v24[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = v12;
    if (*(_QWORD *)v24[0])
    {
      v22 = *(_QWORD *)(*(_QWORD *)v24[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v22 >= v7)
          v22 %= v7;
      }
      else
      {
        v22 &= v7 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = v24[0];
    }
  }
  v10 = (_QWORD *)v24[0];
  v24[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>,void *>>>>::reset[abi:sn180100]((uint64_t)v24, 0);
  return v10;
}

void sub_1A3E47CE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>,void *>>>>::reset[abi:sn180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>>>::__deallocate_node(a1, *(id **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void std::__hash_table<std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>>>::__deallocate_node(a1, *(id **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void std::__hash_table<std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>>>::__deallocate_node(uint64_t a1, id *a2)
{
  id *v2;
  id *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (id *)*v2;
      objc_destroyWeak(v2 + 3);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,WBSHistoryVisit * {__weak}>>>::__deallocate_node(a1, *(id **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_1A3E47F58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3E481E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E48574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1A3E487FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3E488D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t WBSHistoryServiceMain(WTF *a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  NSObject *v10;
  WBSHistoryService *v11;
  WBSCloudHistoryPushAgent *v12;
  WBSHistoryService *v13;
  qos_class_t v14;
  void *v15;
  WBSHistoryService *v16;
  void *v17;
  _QWORD v19[4];
  WBSHistoryService *v20;

  v1 = WTF::initializeMainThread(a1);
  v2 = (void *)MEMORY[0x1A8599CE4](v1);
  objc_msgSend(MEMORY[0x1E0CA5860], "applicationProxyForIdentifier:placeholder:", *MEMORY[0x1E0D8A010], 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "dataContainerURL");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v4;
  if (v4)
  {
    objc_msgSend(v4, "path");
    v6 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    setenv("HOME", (const char *)objc_msgSend(v6, "fileSystemRepresentation"), 1);

    objc_msgSend(v5, "path");
    v7 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    setenv("CFFIXED_USER_HOME", (const char *)objc_msgSend(v7, "fileSystemRepresentation"), 1);

    objc_msgSend(v5, "URLByAppendingPathComponent:", CFSTR("tmp"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "path");
    v9 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    setenv("TMPDIR", (const char *)objc_msgSend(v9, "fileSystemRepresentation"), 1);

  }
  v10 = WBS_LOG_CHANNEL_PREFIXHistory();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    LOWORD(v19[0]) = 0;
    _os_log_impl(&dword_1A3D90000, v10, OS_LOG_TYPE_INFO, "History service launched", (uint8_t *)v19, 2u);
  }
  +[WBSURLCompletionDatabase initializeURLCompletionOnMainThread](WBSURLCompletionDatabase, "initializeURLCompletionOnMainThread");
  v11 = objc_alloc_init(WBSHistoryService);
  v12 = objc_alloc_init(WBSCloudHistoryPushAgent);
  v13 = v11;
  v14 = qos_class_self();
  dispatch_get_global_queue(v14, 0);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 3221225472;
  v19[2] = ___ZL19setUpSignalHandlersP17WBSHistoryService_block_invoke;
  v19[3] = &unk_1E4B2A2C8;
  v16 = v13;
  v20 = v16;
  WBSSetSignalHandler();

  objc_autoreleasePoolPop(v2);
  -[WBSHistoryService resume](v16, "resume");
  objc_msgSend(MEMORY[0x1E0C99E58], "currentRunLoop");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "run");

  return 0;
}

void sub_1A3E48BCC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void ___ZL19setUpSignalHandlersP17WBSHistoryService_block_invoke(uint64_t a1)
{
  NSObject *v2;
  uint8_t v3[16];

  v2 = WBS_LOG_CHANNEL_PREFIXHistory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_1A3D90000, v2, OS_LOG_TYPE_INFO, "Received termination signal. Closing databases and terminating", v3, 2u);
  }
  objc_msgSend(*(id *)(a1 + 32), "shutdown");
  exit(0);
}

double SafariShared::DeletionPlan::DeletionPlan(SafariShared::DeletionPlan *this)
{
  double result;

  result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 1065353216;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_DWORD *)this + 18) = 1065353216;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_DWORD *)this + 28) = 1065353216;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((_DWORD *)this + 38) = 1065353216;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_DWORD *)this + 48) = 1065353216;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 25) = 0;
  return result;
}

{
  double result;

  result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 1065353216;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_DWORD *)this + 18) = 1065353216;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_DWORD *)this + 28) = 1065353216;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((_DWORD *)this + 38) = 1065353216;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_DWORD *)this + 48) = 1065353216;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 25) = 0;
  return result;
}

uint64_t *SafariShared::DeletionPlan::sanitizeItemTouched(uint64_t *this)
{
  _QWORD *v1;
  _QWORD *v2;
  unint64_t v3;

  v1 = (_QWORD *)this[7];
  if (v1)
  {
    v2 = this + 10;
    do
    {
      v3 = v1[2];
      this = std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__erase_unique<long long>(v2, &v3);
      v1 = (_QWORD *)*v1;
    }
    while (v1);
  }
  return this;
}

_QWORD *SafariShared::DeletionPlan::sanitizeVisitsToDelete(_QWORD *this)
{
  uint64_t *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = (uint64_t *)this[22];
  if (v1)
  {
    v2 = this;
    v3 = this + 20;
    v4 = this + 5;
    do
    {
      while (1)
      {
        v5 = v1[2];
        v6 = 0;
        v7 = v5;
        this = std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(v2, &v7);
        if (!this)
          break;
        v6 = this[3];
        if (!v6)
          break;
        this = std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(v4, &v6);
        if (!this)
          break;
        this = std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::erase(v3, v1);
        v1 = this;
        if (!this)
          return this;
      }
      v1 = (uint64_t *)*v1;
    }
    while (v1);
  }
  return this;
}

_QWORD *SafariShared::DeletionPlan::findItemIDForVisitID(SafariShared::DeletionPlan *this, unint64_t a2)
{
  _QWORD *result;
  unint64_t v3;

  v3 = a2;
  result = std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(this, &v3);
  if (result)
    return (_QWORD *)result[3];
  return result;
}

void WBSHistoryTagComputeFrecencyScore(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  sqlite3_int64 v5;
  double v6;
  double v7;
  double v8;

  v5 = sqlite3_value_int64(*a3);
  v6 = sqlite3_value_double(a3[1]);
  objc_msgSend(MEMORY[0x1E0C99D68], "timeIntervalSinceReferenceDate");
  v8 = WBSHistoryTopicScore(v5, v6, v7);
  sqlite3_result_double(a1, v8);
}

void sub_1A3E495A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v2;

  _Unwind_Resume(a1);
}

void sub_1A3E496D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E497A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E49A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  va_list va;

  va_start(va, a5);

  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

id createQueryWithList(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  _QWORD *v8;
  char v9;
  uint64_t v10;
  void *v11;
  void *v12;

  v5 = a1;
  v6 = a3;
  objc_msgSend(MEMORY[0x1E0CB37A0], "stringWithCapacity:", objc_msgSend(v6, "length") + objc_msgSend(v5, "length") + 2 * *(_QWORD *)(a2 + 24));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "appendString:", v5);
  v8 = *(_QWORD **)(a2 + 16);
  if (v8)
  {
    v9 = 1;
    do
    {
      v10 = v8[2];
      if ((v9 & 1) == 0)
        objc_msgSend(v7, "appendString:", CFSTR(","));
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v10);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "stringValue");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "appendString:", v12);

      v9 = 0;
      v8 = (_QWORD *)*v8;
    }
    while (v8);
  }
  objc_msgSend(v7, "appendString:", v6);

  return v7;
}

void sub_1A3E49BD8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

sqlite3_int64 initializeStreamedHistoryVisitFromSQLiteRow(sqlite3_stmt *a1, _HistoryStreamedVisit *a2, int a3)
{
  sqlite3_int64 result;

  a2->var2 = sqlite3_column_int64(a1, a3 + 1);
  a2->var1 = sqlite3_column_int64(a1, a3);
  a2->var3 = sqlite3_column_double(a1, a3 + 2);
  a2->var13 = (char *)sqlite3_column_text(a1, a3 + 3);
  a2->var4 = sqlite3_column_int64(a1, a3 + 4);
  a2->var5 = sqlite3_column_int64(a1, a3 + 5);
  a2->var6 = sqlite3_column_int64(a1, a3 + 6);
  a2->var8 = sqlite3_column_int64(a1, a3 + 7);
  a2->var9 = sqlite3_column_int64(a1, a3 + 8);
  a2->var10 = sqlite3_column_int64(a1, a3 + 9);
  a2->var11 = sqlite3_column_int64(a1, a3 + 10);
  a2->var12 = sqlite3_column_int64(a1, a3 + 11);
  result = sqlite3_column_int64(a1, a3 + 12);
  a2->var7 = result;
  return result;
}

void sub_1A3E49E44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3E49F84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3E4A008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3E4A06C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3E4A2A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3E4A78C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,void *a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,id a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,id a44)
{
  void *v44;

  _Block_object_dispose(&a33, 8);
  _Block_object_dispose(&a39, 8);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__81(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__82(uint64_t a1)
{

}

void sub_1A3E4A954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_1A3E4AAF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::WBSSQLiteDatabaseEnumerate<void({block_pointer} {__strong})(int,NSDate *)>(void *a1, uint64_t a2, void *a3, _QWORD *a4)
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  sqlite3_stmt *v11;
  uint64_t v12;
  void *v14;

  v7 = a1;
  v8 = a3;
  v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89CC8]), "initWithDatabase:query:error:", v7, v8, a2);
  v10 = v9;
  if (v9)
  {
    v11 = (sqlite3_stmt *)objc_msgSend(v9, "handle");
    v14 = (void *)MEMORY[0x1A8599ED0](*a4);
    v12 = SafariShared::_WBSSQLiteStatementBindOrStep<0,0,std::tuple<void({block_pointer} {__strong})(int,NSDate *)>>(v7, v11, a2, &v14);

    objc_msgSend(v10, "invalidate");
  }
  else
  {
    v12 = 0;
  }

  return v12;
}

void sub_1A3E4ABEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1A3E4AC80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A3E4AD38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id SafariShared::WBSSQLiteDatabaseFetch<unsigned long &>(void *a1, void *a2, _QWORD *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;

  v5 = a1;
  v6 = a2;
  v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89CC8]), "initWithDatabase:query:", v5, v6);
  objc_msgSend(v7, "bindInt64:atParameterIndex:", *a3, 1);
  objc_msgSend(v7, "fetch");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

void sub_1A3E4ADD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3E4AED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3E4AFE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E4B210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1A3E4B2C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E4B744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1A3E4B8E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3E4B954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3E4BB3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1A3E4BC8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E4BD14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E4C10C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

id SafariShared::WBSSQLiteDatabaseFetch<long long &,long long &>(void *a1, void *a2, _QWORD *a3, _QWORD *a4)
{
  id v7;
  id v8;
  void *v9;
  void *v10;

  v7 = a1;
  v8 = a2;
  v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89CC8]), "initWithDatabase:query:", v7, v8);
  SafariShared::_WBSSQLiteStatementBindAllParameters<1,long long &,long long &>(v9, a3, a4);
  objc_msgSend(v9, "fetch");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

void sub_1A3E4C268(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3E4C3F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3E4C508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3E4C8D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,void *a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,id a46)
{

  _Block_object_dispose(&a41, 8);
  _Unwind_Resume(a1);
}

void sub_1A3E4CA9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E4CCD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E4CF3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1A3E4CFF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E4D1F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::WBSSQLiteDatabaseEnumerate<NSString * {__strong},std::tuple<long long &>>(void *a1, uint64_t a2, id *a3, void **a4)
{
  id v7;
  void *v8;
  sqlite3_stmt *v9;
  id v10;
  void *v11;
  uint64_t v12;
  id v14[2];

  v7 = a1;
  objc_msgSend(v7, "database");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (sqlite3_stmt *)objc_msgSend(v7, "handle");
  v10 = *a3;
  v11 = *a4;
  v14[0] = v10;
  v14[1] = v11;
  v12 = SafariShared::_WBSSQLiteStatementBindOrStep<0,1,std::tuple<NSString * {__strong},std::tuple<long long &>>>(v8, v9, a2, v14);

  objc_msgSend(v7, "reset");
  return v12;
}

void sub_1A3E4D300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A3E4DB84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1A3E4EDB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, uint64_t a18, void *a19, void *a20,void *a21,void *a22)
{
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;

  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::~__hash_table(v26 - 144);
  _Unwind_Resume(a1);
}

uint64_t SafariShared::WBSSQLiteDatabaseEnumerate<double,std::tuple<long long &>>(void *a1, uint64_t a2, double *a3, double *a4)
{
  id v7;
  void *v8;
  sqlite3_stmt *v9;
  uint64_t v10;
  double v12[2];

  v7 = a1;
  objc_msgSend(v7, "database");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (sqlite3_stmt *)objc_msgSend(v7, "handle");
  v12[0] = *a3;
  v12[1] = *a4;
  v10 = SafariShared::_WBSSQLiteStatementBindOrStep<0,1,std::tuple<double,std::tuple<long long &>>>(v8, v9, a2, v12);

  objc_msgSend(v7, "reset");
  return v10;
}

void sub_1A3E4F1E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::WBSSQLiteDatabaseEnumerate<std::tuple<long long &>>(void *a1, uint64_t a2, sqlite3_int64 **a3)
{
  id v5;
  void *v6;
  sqlite3_stmt *v7;
  uint64_t v8;
  sqlite3_int64 *v10;

  v5 = a1;
  objc_msgSend(v5, "database");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (sqlite3_stmt *)objc_msgSend(v5, "handle");
  v10 = *a3;
  v8 = SafariShared::_WBSSQLiteStatementBindOrStep<0,0,std::tuple<std::tuple<long long &>>>(v6, v7, a2, &v10);

  objc_msgSend(v5, "reset");
  return v8;
}

void sub_1A3E4F284(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E4F33C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E4F730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::WBSSQLiteDatabaseEnumerate<NSString * {__strong}&,std::tuple<NSData * {__strong}&>>(void *a1, uint64_t a2, void *a3, id *a4, id **a5)
{
  id v9;
  id v10;
  void *v11;
  void *v12;
  sqlite3_stmt *v13;
  id *v14;
  uint64_t v15;
  id *v17[2];

  v9 = a1;
  v10 = a3;
  v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89CC8]), "initWithDatabase:query:error:", v9, v10, a2);
  v12 = v11;
  if (v11)
  {
    v13 = (sqlite3_stmt *)objc_msgSend(v11, "handle");
    v14 = *a5;
    v17[0] = a4;
    v17[1] = v14;
    v15 = SafariShared::_WBSSQLiteStatementBindOrStep<0,1,std::tuple<NSString * {__strong}&,std::tuple<NSData * {__strong}&>>>(v9, v13, a2, v17);
    objc_msgSend(v12, "invalidate");
  }
  else
  {
    v15 = 0;
  }

  return v15;
}

void sub_1A3E4F818(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3E4F954(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1A3E4F9E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E4FB74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::WBSSQLiteDatabaseEnumerate<NSString * const {__strong}&,std::tuple<NSData * {__strong}&>>(void *a1, uint64_t a2, void *a3, id *a4, id **a5)
{
  id v9;
  id v10;
  void *v11;
  void *v12;
  sqlite3_stmt *v13;
  id *v14;
  uint64_t v15;
  id *v17[2];

  v9 = a1;
  v10 = a3;
  v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89CC8]), "initWithDatabase:query:error:", v9, v10, a2);
  v12 = v11;
  if (v11)
  {
    v13 = (sqlite3_stmt *)objc_msgSend(v11, "handle");
    v14 = *a5;
    v17[0] = a4;
    v17[1] = v14;
    v15 = SafariShared::_WBSSQLiteStatementBindOrStep<0,1,std::tuple<NSString * const {__strong}&,std::tuple<NSData * {__strong}&>>>(v9, v13, a2, v17);
    objc_msgSend(v12, "invalidate");
  }
  else
  {
    v15 = 0;
  }

  return v15;
}

void sub_1A3E4FC5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3E4FDF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A3E4FFE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{

  _Unwind_Resume(a1);
}

void sub_1A3E500C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A3E501E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E504FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::WBSSQLiteDatabaseEnumerate<NSString * {__strong},double,std::tuple<int &,int &>>(void *a1, uint64_t a2, void *a3, id *a4, id *a5, __int128 *a6)
{
  id v11;
  id v12;
  void *v13;
  void *v14;
  sqlite3_stmt *v15;
  uint64_t v16;
  id v18[2];
  __int128 v19;

  v11 = a1;
  v12 = a3;
  v13 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89CC8]), "initWithDatabase:query:error:", v11, v12, a2);
  v14 = v13;
  if (v13)
  {
    v15 = (sqlite3_stmt *)objc_msgSend(v13, "handle");
    v18[0] = *a4;
    v18[1] = *a5;
    v19 = *a6;
    v16 = SafariShared::_WBSSQLiteStatementBindOrStep<0,2,std::tuple<NSString * {__strong},double,std::tuple<int &,int &>>>(v11, v15, a2, v18);

    objc_msgSend(v14, "invalidate");
  }
  else
  {
    v16 = 0;
  }

  return v16;
}

void sub_1A3E50664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1A3E507A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3E50968(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E50A5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17)
{
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1A3E50C14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E50D68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E50DE4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E50F4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  void *v22;
  void *v23;

  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_1A3E515CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,char a31)
{
  void *v31;
  uint64_t v32;
  void *v33;

  _Block_object_dispose(&a31, 8);
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::~__hash_table(v32);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__163(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__hash_table(a1 + 48, (uint64_t *)(a2 + 48));
}

uint64_t __Block_byref_object_dispose__164(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::~__hash_table(a1 + 48);
}

uint64_t SafariShared::WBSSQLiteDatabaseEnumerate<NSDate * {__strong}&,void({block_pointer} {__strong})(long long)>(void *a1, uint64_t a2, void *a3, id *a4, _QWORD *a5)
{
  id v9;
  id v10;
  void *v11;
  void *v12;
  sqlite3_stmt *v13;
  uint64_t v14;
  id *v16;
  id v17;

  v9 = a1;
  v10 = a3;
  v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89CC8]), "initWithDatabase:query:error:", v9, v10, a2);
  v12 = v11;
  if (v11)
  {
    v13 = (sqlite3_stmt *)objc_msgSend(v11, "handle");
    v16 = a4;
    v17 = (id)MEMORY[0x1A8599ED0](*a5);
    v14 = SafariShared::_WBSSQLiteStatementBindOrStep<0,1,std::tuple<NSDate * {__strong}&,void({block_pointer} {__strong})(long long)>>(v9, v13, a2, &v16);

    objc_msgSend(v12, "invalidate");
  }
  else
  {
    v14 = 0;
  }

  return v14;
}

void sub_1A3E517CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::WBSSQLiteDatabaseEnumerate<void({block_pointer} {__strong})(long long)>(void *a1, uint64_t a2, void *a3, _QWORD *a4)
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  sqlite3_stmt *v11;
  uint64_t v12;
  void *v14;

  v7 = a1;
  v8 = a3;
  v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89CC8]), "initWithDatabase:query:error:", v7, v8, a2);
  v10 = v9;
  if (v9)
  {
    v11 = (sqlite3_stmt *)objc_msgSend(v9, "handle");
    v14 = (void *)MEMORY[0x1A8599ED0](*a4);
    v12 = SafariShared::_WBSSQLiteStatementBindOrStep<0,0,std::tuple<void({block_pointer} {__strong})(long long)>>(v7, v11, a2, &v14);

    objc_msgSend(v10, "invalidate");
  }
  else
  {
    v12 = 0;
  }

  return v12;
}

void sub_1A3E518F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::WBSSQLiteDatabaseEnumerate<void({block_pointer} {__strong})(long long,NSString *)>(void *a1, uint64_t a2, void *a3, _QWORD *a4)
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  sqlite3_stmt *v11;
  uint64_t v12;
  void *v14;

  v7 = a1;
  v8 = a3;
  v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89CC8]), "initWithDatabase:query:error:", v7, v8, a2);
  v10 = v9;
  if (v9)
  {
    v11 = (sqlite3_stmt *)objc_msgSend(v9, "handle");
    v14 = (void *)MEMORY[0x1A8599ED0](*a4);
    v12 = SafariShared::_WBSSQLiteStatementBindOrStep<0,0,std::tuple<void({block_pointer} {__strong})(long long,NSString *)>>(v7, v11, a2, &v14);

    objc_msgSend(v10, "invalidate");
  }
  else
  {
    v12 = 0;
  }

  return v12;
}

void sub_1A3E51A24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1A3E51AB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A3E51BC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E51C34(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E51CBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E51D90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1A3E51F9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object)
{
  void *v9;
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1A3E522FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  void *v21;
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

void sub_1A3E526E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  void *v12;
  void *v13;
  id *v14;
  void *v15;
  uint64_t v16;
  va_list va;

  va_start(va, a12);

  _Block_object_dispose(va, 8);
  SafariShared::DeletionPlan::~DeletionPlan(v14);
  _Block_object_dispose((const void *)(v16 - 168), 8);

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__192(uint64_t a1, uint64_t a2)
{
  __n128 result;
  uint64_t v5;

  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__hash_table(a1 + 48, (uint64_t *)(a2 + 48));
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__hash_table(a1 + 88, (uint64_t *)(a2 + 88));
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__hash_table(a1 + 128, (uint64_t *)(a2 + 128));
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__hash_table(a1 + 168, (uint64_t *)(a2 + 168));
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__hash_table(a1 + 208, (uint64_t *)(a2 + 208));
  result = *(__n128 *)(a2 + 248);
  *(_QWORD *)(a2 + 248) = 0;
  *(_QWORD *)(a2 + 256) = 0;
  *(__n128 *)(a1 + 248) = result;
  v5 = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a2 + 264) = 0;
  *(_QWORD *)(a1 + 264) = v5;
  return result;
}

uint64_t __Block_byref_object_dispose__193(id *a1)
{
  uint64_t v2;

  v2 = (uint64_t)(a1 + 6);

  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::~__hash_table((uint64_t)(a1 + 26));
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::~__hash_table((uint64_t)(a1 + 21));
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::~__hash_table((uint64_t)(a1 + 16));
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::~__hash_table((uint64_t)(a1 + 11));
  return std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::~__hash_table(v2);
}

void SafariShared::DeletionPlan::~DeletionPlan(id *this)
{

  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::~__hash_table((uint64_t)(this + 20));
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::~__hash_table((uint64_t)(this + 15));
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::~__hash_table((uint64_t)(this + 10));
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::~__hash_table((uint64_t)(this + 5));
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::~__hash_table((uint64_t)this);
}

void sub_1A3E52BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);

  _Block_object_dispose(va, 8);
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::~__hash_table(v17);
  _Unwind_Resume(a1);
}

uint64_t SafariShared::WBSSQLiteDatabaseEnumerate<NSDate * {__strong}&,NSDate * {__strong}&,void({block_pointer} {__strong})(long long)>(void *a1, uint64_t a2, void *a3, id *a4, id *a5, _QWORD *a6)
{
  id v11;
  id v12;
  void *v13;
  void *v14;
  sqlite3_stmt *v15;
  uint64_t v16;
  id *v18[2];
  id v19;

  v11 = a1;
  v12 = a3;
  v13 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89CC8]), "initWithDatabase:query:error:", v11, v12, a2);
  v14 = v13;
  if (v13)
  {
    v15 = (sqlite3_stmt *)objc_msgSend(v13, "handle");
    v18[0] = a4;
    v18[1] = a5;
    v19 = (id)MEMORY[0x1A8599ED0](*a6);
    v16 = SafariShared::_WBSSQLiteStatementBindOrStep<0,2,std::tuple<NSDate * {__strong}&,NSDate * {__strong}&,void({block_pointer} {__strong})(long long)>>(v11, v15, a2, v18);

    objc_msgSend(v14, "invalidate");
  }
  else
  {
    v16 = 0;
  }

  return v16;
}

void sub_1A3E52CF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1A3E53044(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E5321C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A3E532A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E5371C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11)
{
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1A3E540AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  id a65;
  id a66;
  void *v66;
  void *v67;

  SafariShared::DeletionPlan::~DeletionPlan((id *)&STACK[0x200]);
  _Block_object_dispose(&a54, 8);
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::~__hash_table(a11);

  _Unwind_Resume(a1);
}

uint64_t SafariShared::WBSSQLiteDatabaseEnumerate<NSData * {__strong},NSData * {__strong},std::tuple<long long &>>(void *a1, uint64_t a2, id *a3, id *a4, uint64_t *a5)
{
  id v9;
  void *v10;
  sqlite3_stmt *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  id v16;
  id v17;
  uint64_t v18;

  v9 = a1;
  objc_msgSend(v9, "database");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = (sqlite3_stmt *)objc_msgSend(v9, "handle");
  v16 = *a3;
  v12 = *a4;
  v13 = *a5;
  v17 = v12;
  v18 = v13;
  v14 = SafariShared::_WBSSQLiteStatementBindOrStep<0,2,std::tuple<NSData * {__strong},NSData * {__strong},std::tuple<long long &>>>(v10, v11, a2, &v16);

  objc_msgSend(v9, "reset");
  return v14;
}

void sub_1A3E5433C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::WBSSQLiteDatabaseEnumerate<long long &,NSDate * {__strong}&,NSDate * {__strong}&,void({block_pointer} {__strong}&)(long long)>(void *a1, uint64_t a2, sqlite3_int64 *a3, sqlite3_int64 *a4, sqlite3_int64 *a5, sqlite3_int64 *a6)
{
  id v11;
  void *v12;
  uint64_t v13;
  sqlite3_int64 *v15[4];

  v11 = a1;
  objc_msgSend(v11, "database");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v15[0] = a3;
  v15[1] = a4;
  v15[2] = a5;
  v15[3] = a6;
  v13 = SafariShared::_WBSSQLiteStatementBindOrStep<0,3,std::tuple<long long &,NSDate * {__strong}&,NSDate * {__strong}&,void({block_pointer} {__strong}&)(long long)>>(v12, (sqlite3_stmt *)objc_msgSend(v11, "handle"), a2, v15);

  objc_msgSend(v11, "reset");
  return v13;
}

void sub_1A3E5440C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E54598(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1A3E546DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1A3E54808(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E5499C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A3E54A3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E54BA4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E54C9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3E54F38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E55308(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1A3E55450(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E55518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;

  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::~__hash_table((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1A3E5591C(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::WBSSQLiteDatabaseEnumerate<void({block_pointer} {__strong})(long long,long long,long long,long long)>(void *a1, uint64_t a2, void *a3, _QWORD *a4)
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  sqlite3_stmt *v11;
  uint64_t v12;
  void *v14;

  v7 = a1;
  v8 = a3;
  v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89CC8]), "initWithDatabase:query:error:", v7, v8, a2);
  v10 = v9;
  if (v9)
  {
    v11 = (sqlite3_stmt *)objc_msgSend(v9, "handle");
    v14 = (void *)MEMORY[0x1A8599ED0](*a4);
    v12 = SafariShared::_WBSSQLiteStatementBindOrStep<0,0,std::tuple<void({block_pointer} {__strong})(long long,long long,long long,long long)>>(v7, v11, a2, &v14);

    objc_msgSend(v10, "invalidate");
  }
  else
  {
    v12 = 0;
  }

  return v12;
}

void sub_1A3E55AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1A3E55DE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, ...)
{
  uint64_t v8;
  void *v9;
  va_list va;

  va_start(va, a8);

  _Block_object_dispose(va, 8);
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::~__hash_table(v8);

  _Unwind_Resume(a1);
}

void sub_1A3E55F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1A3E561E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::WBSSQLiteDatabaseEnumerate<std::tuple<long long &>>(void *a1, uint64_t a2, void *a3, sqlite3_int64 **a4)
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  sqlite3_stmt *v11;
  uint64_t v12;
  sqlite3_int64 *v14;

  v7 = a1;
  v8 = a3;
  v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89CC8]), "initWithDatabase:query:error:", v7, v8, a2);
  v10 = v9;
  if (v9)
  {
    v11 = (sqlite3_stmt *)objc_msgSend(v9, "handle");
    v14 = *a4;
    v12 = SafariShared::_WBSSQLiteStatementBindOrStep<0,0,std::tuple<std::tuple<long long &>>>(v7, v11, a2, &v14);
    objc_msgSend(v10, "invalidate");
  }
  else
  {
    v12 = 0;
  }

  return v12;
}

void sub_1A3E5630C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3E564D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  void *v10;
  uint64_t v11;
  void *v12;
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::~__hash_table(v11);

  _Unwind_Resume(a1);
}

void sub_1A3E56808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  void *v10;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::~__hash_table(v9);

  _Unwind_Resume(a1);
}

uint64_t SafariShared::WBSSQLiteDatabaseEnumerate<double &,void({block_pointer} {__strong})(long long)>(void *a1, uint64_t a2, void *a3, double *a4, _QWORD *a5)
{
  id v9;
  id v10;
  void *v11;
  void *v12;
  sqlite3_stmt *v13;
  uint64_t v14;
  double *v16;
  id v17;

  v9 = a1;
  v10 = a3;
  v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89CC8]), "initWithDatabase:query:error:", v9, v10, a2);
  v12 = v11;
  if (v11)
  {
    v13 = (sqlite3_stmt *)objc_msgSend(v11, "handle");
    v16 = a4;
    v17 = (id)MEMORY[0x1A8599ED0](*a5);
    v14 = SafariShared::_WBSSQLiteStatementBindOrStep<0,1,std::tuple<double &,void({block_pointer} {__strong})(long long)>>(v9, v13, a2, &v16);

    objc_msgSend(v12, "invalidate");
  }
  else
  {
    v14 = 0;
  }

  return v14;
}

void sub_1A3E56944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1A3E56C1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  SafariShared::DeletionPlan::~DeletionPlan(&a9);
  _Unwind_Resume(a1);
}

void sub_1A3E56E8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  SafariShared::DeletionPlan::~DeletionPlan(&a9);
  _Unwind_Resume(a1);
}

void sub_1A3E56FCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1A3E57058(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A3E57184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::WBSSQLiteDatabaseEnumerate<void({block_pointer} {__strong})(NSString *)>(void *a1, uint64_t a2, void *a3, _QWORD *a4)
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  sqlite3_stmt *v11;
  uint64_t v12;
  void *v14;

  v7 = a1;
  v8 = a3;
  v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89CC8]), "initWithDatabase:query:error:", v7, v8, a2);
  v10 = v9;
  if (v9)
  {
    v11 = (sqlite3_stmt *)objc_msgSend(v9, "handle");
    v14 = (void *)MEMORY[0x1A8599ED0](*a4);
    v12 = SafariShared::_WBSSQLiteStatementBindOrStep<0,0,std::tuple<void({block_pointer} {__strong})(NSString *)>>(v7, v11, a2, &v14);

    objc_msgSend(v10, "invalidate");
  }
  else
  {
    v12 = 0;
  }

  return v12;
}

void sub_1A3E57278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1A3E57610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,void *a29,void *a30)
{
  void *v30;

  _Unwind_Resume(a1);
}

void sub_1A3E577C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3E5788C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A3E57994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1A3E57D8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3E57FFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1A3E58190(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E58918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  va_list va;

  va_start(va, a7);

  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::~__hash_table(v10 - 192);
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::~__hash_table(v10 - 144);
  SafariShared::DeletionPlan::~DeletionPlan((id *)va);

  _Unwind_Resume(a1);
}

void sub_1A3E58B98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E58C10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E58D8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id SafariShared::WBSSQLiteDatabaseFetch<WBSHistoryVisitOrigin>(void *a1, void *a2, _QWORD *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;

  v5 = a1;
  v6 = a2;
  v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89CC8]), "initWithDatabase:query:", v5, v6);
  objc_msgSend(v7, "bindInt64:atParameterIndex:", *a3, 1);
  objc_msgSend(v7, "fetch");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

void sub_1A3E58E44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::WBSSQLiteDatabaseEnumerate<NSDate * const {__strong}&,NSDate * const {__strong},void({block_pointer} {__strong})(NSString *)>(void *a1, uint64_t a2, void *a3, id *a4, id *a5, _QWORD *a6)
{
  id v11;
  id v12;
  void *v13;
  void *v14;
  sqlite3_stmt *v15;
  uint64_t v16;
  id *v18[2];
  id v19;

  v11 = a1;
  v12 = a3;
  v13 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89CC8]), "initWithDatabase:query:error:", v11, v12, a2);
  v14 = v13;
  if (v13)
  {
    v15 = (sqlite3_stmt *)objc_msgSend(v13, "handle");
    v18[0] = a4;
    v18[1] = a5;
    v19 = (id)MEMORY[0x1A8599ED0](*a6);
    v16 = SafariShared::_WBSSQLiteStatementBindOrStep<0,2,std::tuple<NSDate * const {__strong}&,NSDate * const {__strong},void({block_pointer} {__strong})(NSString *)>>(v11, v15, a2, v18);

    objc_msgSend(v14, "invalidate");
  }
  else
  {
    v16 = 0;
  }

  return v16;
}

void sub_1A3E58F4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1A3E590AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::WBSSQLiteDatabaseEnumerate<NSDate * const {__strong}&,std::tuple<long long &>>(void *a1, uint64_t a2, void *a3, id *a4, id **a5)
{
  id v9;
  id v10;
  void *v11;
  void *v12;
  sqlite3_stmt *v13;
  id *v14;
  uint64_t v15;
  id *v17[2];

  v9 = a1;
  v10 = a3;
  v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89CC8]), "initWithDatabase:query:error:", v9, v10, a2);
  v12 = v11;
  if (v11)
  {
    v13 = (sqlite3_stmt *)objc_msgSend(v11, "handle");
    v14 = *a5;
    v17[0] = a4;
    v17[1] = v14;
    v15 = SafariShared::_WBSSQLiteStatementBindOrStep<0,1,std::tuple<NSDate * const {__strong}&,std::tuple<long long &>>>(v9, v13, a2, v17);
    objc_msgSend(v12, "invalidate");
  }
  else
  {
    v15 = 0;
  }

  return v15;
}

void sub_1A3E59178(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3E593BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__277(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[4].n128_u32[0] = a2[4].n128_u32[0];
  a1[3] = result;
  return result;
}

void __Block_byref_object_dispose__278(uint64_t a1)
{
  SafariShared::HistoryObjectStreamWriter::~HistoryObjectStreamWriter((void **)(a1 + 48));
}

void sub_1A3E595F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E5984C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  void *v21;
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

void sub_1A3E59E4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,id a36,uint64_t a37,uint64_t a38,uint64_t a39,id a40)
{
  void *v40;
  void *v41;
  void *v42;
  uint64_t v43;

  std::__hash_table<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::~__hash_table(v43 - 144);

  _Unwind_Resume(a1);
}

id eventListenerSetToString(void *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v1 = (void *)MEMORY[0x1E0CB3940];
  objc_msgSend(a1, "allObjects");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "componentsJoinedByString:", CFSTR(":"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "stringWithFormat:", CFSTR(":%@:"), v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

void sub_1A3E5A04C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E5A17C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3E5A1E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3E5A410(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E5A850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1A3E5ABC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E5AD08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3E5AEA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A3E5B0F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3E5B238(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E5B374(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E5B4B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E5B760(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::WBSSQLiteDatabaseEnumerate<NSString * {__strong},double,std::tuple<long long &>>(void *a1, uint64_t a2, id *a3, id *a4, id *a5)
{
  id v9;
  void *v10;
  sqlite3_stmt *v11;
  uint64_t v12;
  id v14[3];

  v9 = a1;
  objc_msgSend(v9, "database");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = (sqlite3_stmt *)objc_msgSend(v9, "handle");
  v14[0] = *a3;
  v14[1] = *a4;
  v14[2] = *a5;
  v12 = SafariShared::_WBSSQLiteStatementBindOrStep<0,2,std::tuple<NSString * {__strong},double,std::tuple<long long &>>>(v10, v11, a2, v14);

  objc_msgSend(v9, "reset");
  return v12;
}

void sub_1A3E5B888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1A3E5B940(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E5BB2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E5BBF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E5C01C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{
  void *v26;
  void *v27;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::WBSSQLiteDatabaseEnumerate<long long &,int,double const&,void({block_pointer} {__strong})(NSString *,double,NSString *,int,int,NSString *,double,NSString *,double)>(void *a1, uint64_t a2, sqlite3_int64 *a3, int *a4, uint64_t a5, _QWORD *a6)
{
  id v11;
  void *v12;
  sqlite3_stmt *v13;
  uint64_t v14;
  sqlite3_int64 *v16;
  int v17;
  uint64_t v18;
  id v19;

  v11 = a1;
  objc_msgSend(v11, "database");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = (sqlite3_stmt *)objc_msgSend(v11, "handle");
  v16 = a3;
  v17 = *a4;
  v18 = a5;
  v19 = (id)MEMORY[0x1A8599ED0](*a6);
  v14 = SafariShared::_WBSSQLiteStatementBindOrStep<0,3,std::tuple<long long &,int,double const&,void({block_pointer} {__strong})(NSString *,double,NSString *,int,int,NSString *,double,NSString *,double)>>(v12, v13, a2, &v16);

  objc_msgSend(v11, "reset");
  return v14;
}

void sub_1A3E5C1BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1A3E5C378(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_1A3E5C45C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E5C568(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E5C6D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E5C824(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E5C950(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__hash_table(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)result = v2;
  *(_QWORD *)(result + 8) = a2[1];
  a2[1] = 0;
  v5 = a2[2];
  v3 = a2 + 2;
  v4 = v5;
  *(_QWORD *)(result + 16) = v5;
  v6 = v3[1];
  *(_QWORD *)(result + 24) = v6;
  *(_DWORD *)(result + 32) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    v7 = *(_QWORD *)(v4 + 8);
    v8 = *(_QWORD *)(result + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v7 %= v8;
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(_QWORD *)(v2 + 8 * v7) = result + 16;
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

uint64_t *std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__erase_unique<long long>(_QWORD *a1, unint64_t *a2)
{
  uint64_t *result;

  result = std::__hash_table<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>>>::find<long long>(a1, a2);
  if (result)
  {
    std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

_QWORD *std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::erase(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  void *v3;
  void *__p;

  if (a2)
  {
    v2 = *a2;
    std::__hash_table<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>>>::remove(result, a2, (uint64_t)&__p);
    v3 = __p;
    __p = 0;
    if (v3)
      operator delete(v3);
    return (_QWORD *)v2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

_QWORD *std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(_QWORD *a1, unint64_t *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (v3 >= *(_QWORD *)&v2)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(_QWORD **)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  result = (_QWORD *)*v6;
  if (*v6)
  {
    do
    {
      v8 = result[1];
      if (v3 == v8)
      {
        if (result[2] == v3)
          return result;
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(_QWORD *)&v2)
            v8 %= *(_QWORD *)&v2;
        }
        else
        {
          v8 &= *(_QWORD *)&v2 - 1;
        }
        if (v8 != v5)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

_QWORD *std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x18uLL);
  *i = 0;
  i[1] = v6;
  i[2] = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *i = *v19;
LABEL_38:
    *v19 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v20 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1A3E5CE58(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<0,0,std::tuple<void({block_pointer} {__strong})(int,NSDate *)>>(void *a1, sqlite3_stmt *a2, uint64_t a3, void **a4)
{
  id v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v7 = a1;
  while (1)
  {
    v8 = sqlite3_step(a2);
    if ((_DWORD)v8 != 100)
      break;
    SafariShared::WBSSQLiteEnumerationBlock<void,int,NSDate * {__strong}>::_callBlockWithAllColumns<0,1>((uint64_t)&v11, a2, *a4);
  }
  if ((_DWORD)v8 == 101)
  {
    v9 = 1;
  }
  else
  {
    objc_msgSend(v7, "reportErrorWithCode:statement:error:", v8, a2, a3);
    v9 = 0;
  }

  return v9;
}

void sub_1A3E5CEFC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void SafariShared::WBSSQLiteEnumerationBlock<void,int,NSDate * {__strong}>::_callBlockWithAllColumns<0,1>(uint64_t a1, sqlite3_stmt *a2, void *a3)
{
  uint64_t v4;
  void *v5;
  void (**v6)(id, _QWORD, void *);

  v6 = a3;
  v4 = sqlite3_column_int(a2, 0);
  if (sqlite3_column_type(a2, 1) == 5)
  {
    v5 = 0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", sqlite3_column_double(a2, 1));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
  }
  v6[2](v6, v4, v5);

}

void sub_1A3E5CFB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,unsigned long const&,double>(void *a1, _QWORD *a2, double *a3)
{
  id v5;

  v5 = a1;
  objc_msgSend(v5, "bindInt64:atParameterIndex:", *a2, 1);
  objc_msgSend(v5, "bindDouble:atParameterIndex:", 2, *a3);

}

void sub_1A3E5D020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<NSString * {__strong}&,NSData * {__strong}>(void *a1, _QWORD *a2, void *a3, _QWORD *a4, _QWORD *a5)
{
  id v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  id v17;

  v9 = a1;
  v10 = a3;
  v17 = 0;
  v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89CC8]), "initWithDatabase:query:error:", v9, v10, &v17);
  v12 = v17;
  v13 = v12;
  if (v11)
  {
    SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * {__strong}&,NSData * {__strong}>(v11, a4, a5);
    v14 = objc_msgSend(v11, "execute");
    objc_msgSend(v11, "invalidate");
    if ((v14 - 100) >= 2 && (_DWORD)v14 != 0)
      objc_msgSend(v9, "reportErrorWithCode:statement:error:", v14, objc_msgSend(v11, "handle"), a2);
  }
  else
  {
    if (a2)
      *a2 = objc_retainAutorelease(v12);
    v14 = objc_msgSend(v13, "code");
  }

  return v14;
}

void sub_1A3E5D144(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * {__strong}&,NSData * {__strong}>(void *a1, _QWORD *a2, _QWORD *a3)
{
  id v5;

  v5 = a1;
  objc_msgSend(v5, "bindString:atParameterIndex:", *a2, 1);
  objc_msgSend(v5, "bindData:atParameterIndex:", *a3, 2);

}

void sub_1A3E5D1BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<NSString * {__strong}&,NSString * {__strong}>(void *a1, _QWORD *a2, void *a3, _QWORD *a4, _QWORD *a5)
{
  id v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  id v17;

  v9 = a1;
  v10 = a3;
  v17 = 0;
  v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89CC8]), "initWithDatabase:query:error:", v9, v10, &v17);
  v12 = v17;
  v13 = v12;
  if (v11)
  {
    SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * {__strong}&,NSString * {__strong}>(v11, a4, a5);
    v14 = objc_msgSend(v11, "execute");
    objc_msgSend(v11, "invalidate");
    if ((v14 - 100) >= 2 && (_DWORD)v14 != 0)
      objc_msgSend(v9, "reportErrorWithCode:statement:error:", v14, objc_msgSend(v11, "handle"), a2);
  }
  else
  {
    if (a2)
      *a2 = objc_retainAutorelease(v12);
    v14 = objc_msgSend(v13, "code");
  }

  return v14;
}

void sub_1A3E5D2E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * {__strong}&,NSString * {__strong}>(void *a1, _QWORD *a2, _QWORD *a3)
{
  id v5;

  v5 = a1;
  objc_msgSend(v5, "bindString:atParameterIndex:", *a2, 1);
  objc_msgSend(v5, "bindString:atParameterIndex:", *a3, 2);

}

void sub_1A3E5D358(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<NSString * {__strong}&,double>(void *a1, _QWORD *a2, void *a3, _QWORD *a4, double *a5)
{
  id v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  id v17;

  v9 = a1;
  v10 = a3;
  v17 = 0;
  v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89CC8]), "initWithDatabase:query:error:", v9, v10, &v17);
  v12 = v17;
  v13 = v12;
  if (v11)
  {
    SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * {__strong}&,double>(v11, a4, a5);
    v14 = objc_msgSend(v11, "execute");
    objc_msgSend(v11, "invalidate");
    if ((v14 - 100) >= 2 && (_DWORD)v14 != 0)
      objc_msgSend(v9, "reportErrorWithCode:statement:error:", v14, objc_msgSend(v11, "handle"), a2);
  }
  else
  {
    if (a2)
      *a2 = objc_retainAutorelease(v12);
    v14 = objc_msgSend(v13, "code");
  }

  return v14;
}

void sub_1A3E5D47C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * {__strong}&,double>(void *a1, _QWORD *a2, double *a3)
{
  id v5;

  v5 = a1;
  objc_msgSend(v5, "bindString:atParameterIndex:", *a2, 1);
  objc_msgSend(v5, "bindDouble:atParameterIndex:", 2, *a3);

}

void sub_1A3E5D4F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<NSString * {__strong}&,BOOL>(void *a1, _QWORD *a2, void *a3, _QWORD *a4, unsigned __int8 *a5)
{
  id v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  id v17;

  v9 = a1;
  v10 = a3;
  v17 = 0;
  v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89CC8]), "initWithDatabase:query:error:", v9, v10, &v17);
  v12 = v17;
  v13 = v12;
  if (v11)
  {
    SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * {__strong}&,BOOL>(v11, a4, a5);
    v14 = objc_msgSend(v11, "execute");
    objc_msgSend(v11, "invalidate");
    if ((v14 - 100) >= 2 && (_DWORD)v14 != 0)
      objc_msgSend(v9, "reportErrorWithCode:statement:error:", v14, objc_msgSend(v11, "handle"), a2);
  }
  else
  {
    if (a2)
      *a2 = objc_retainAutorelease(v12);
    v14 = objc_msgSend(v13, "code");
  }

  return v14;
}

void sub_1A3E5D618(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * {__strong}&,BOOL>(void *a1, _QWORD *a2, unsigned __int8 *a3)
{
  id v5;

  v5 = a1;
  objc_msgSend(v5, "bindString:atParameterIndex:", *a2, 1);
  objc_msgSend(v5, "bindInt:atParameterIndex:", *a3, 2);

}

void sub_1A3E5D690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<NSString * {__strong}&,long long>(void *a1, _QWORD *a2, void *a3, _QWORD *a4, _QWORD *a5)
{
  id v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  id v17;

  v9 = a1;
  v10 = a3;
  v17 = 0;
  v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89CC8]), "initWithDatabase:query:error:", v9, v10, &v17);
  v12 = v17;
  v13 = v12;
  if (v11)
  {
    SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * {__strong}&,long long>(v11, a4, a5);
    v14 = objc_msgSend(v11, "execute");
    objc_msgSend(v11, "invalidate");
    if ((v14 - 100) >= 2 && (_DWORD)v14 != 0)
      objc_msgSend(v9, "reportErrorWithCode:statement:error:", v14, objc_msgSend(v11, "handle"), a2);
  }
  else
  {
    if (a2)
      *a2 = objc_retainAutorelease(v12);
    v14 = objc_msgSend(v13, "code");
  }

  return v14;
}

void sub_1A3E5D7B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * {__strong}&,long long>(void *a1, _QWORD *a2, _QWORD *a3)
{
  id v5;

  v5 = a1;
  objc_msgSend(v5, "bindString:atParameterIndex:", *a2, 1);
  objc_msgSend(v5, "bindInt64:atParameterIndex:", *a3, 2);

}

void sub_1A3E5D82C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<NSData * {__strong},long>(void *a1, _QWORD *a2, void *a3, _QWORD *a4, _QWORD *a5)
{
  id v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  id v17;

  v9 = a1;
  v10 = a3;
  v17 = 0;
  v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89CC8]), "initWithDatabase:query:error:", v9, v10, &v17);
  v12 = v17;
  v13 = v12;
  if (v11)
  {
    SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSData * {__strong},long>(v11, a4, a5);
    v14 = objc_msgSend(v11, "execute");
    objc_msgSend(v11, "invalidate");
    if ((v14 - 100) >= 2 && (_DWORD)v14 != 0)
      objc_msgSend(v9, "reportErrorWithCode:statement:error:", v14, objc_msgSend(v11, "handle"), a2);
  }
  else
  {
    if (a2)
      *a2 = objc_retainAutorelease(v12);
    v14 = objc_msgSend(v13, "code");
  }

  return v14;
}

void sub_1A3E5D950(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSData * {__strong},long>(void *a1, _QWORD *a2, _QWORD *a3)
{
  id v5;

  v5 = a1;
  objc_msgSend(v5, "bindData:atParameterIndex:", *a2, 1);
  objc_msgSend(v5, "bindInt64:atParameterIndex:", *a3, 2);

}

void sub_1A3E5D9C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<0,1,std::tuple<NSString * {__strong},std::tuple<long long &>>>(void *a1, sqlite3_stmt *a2, uint64_t a3, id *a4)
{
  id v7;
  id v8;
  void *v9;
  int v10;
  int v11;
  uint64_t v12;

  v7 = a1;
  v8 = *a4;
  v9 = v8;
  if (v8)
    v10 = sqlite3_bind_text(a2, 1, (const char *)objc_msgSend(objc_retainAutorelease(v8), "UTF8String"), -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  else
    v10 = sqlite3_bind_null(a2, 1);
  v11 = v10;

  if (v11)
  {
    objc_msgSend(v7, "reportErrorWithCode:statement:error:", 1, a2, a3);
    v12 = 0;
  }
  else
  {
    v12 = SafariShared::_WBSSQLiteStatementBindOrStep<1,1,std::tuple<NSString * {__strong},std::tuple<long long &>>>(v7, a2, a3, (uint64_t)a4);
  }

  return v12;
}

void sub_1A3E5DAA4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<1,1,std::tuple<NSString * {__strong},std::tuple<long long &>>>(void *a1, sqlite3_stmt *a2, uint64_t a3, uint64_t a4)
{
  id v7;
  uint64_t v8;
  uint64_t v9;

  v7 = a1;
  v8 = sqlite3_step(a2);
  if ((_DWORD)v8 == 100
    && (**(_QWORD **)(a4 + 8) = sqlite3_column_int64(a2, 0), v8 = sqlite3_step(a2), (_DWORD)v8 == 101))
  {
    v9 = 1;
  }
  else
  {
    objc_msgSend(v7, "reportErrorWithCode:statement:error:", v8, a2, a3);
    v9 = 0;
  }

  return v9;
}

void sub_1A3E5DB58(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * const {__strong}&,unsigned long,long long &,NSData * {__strong}&,NSData * {__strong},long>(void *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, _QWORD *a7)
{
  id v13;

  v13 = a1;
  objc_msgSend(v13, "bindString:atParameterIndex:", *a2, 1);
  SafariShared::_WBSSQLiteStatementBindAllParameters<2,unsigned long,long long &,NSData * {__strong}&,NSData * {__strong}&,long>(v13, a3, a4, a5, a6, a7);

}

void sub_1A3E5DBE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<2,unsigned long,long long &,NSData * {__strong}&,NSData * {__strong}&,long>(void *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6)
{
  id v11;

  v11 = a1;
  objc_msgSend(v11, "bindInt64:atParameterIndex:", *a2, 2);
  SafariShared::_WBSSQLiteStatementBindAllParameters<3,long long &,NSData * {__strong}&,NSData * {__strong}&,long>(v11, a3, a4, a5, a6);

}

void sub_1A3E5DC6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<3,long long &,NSData * {__strong}&,NSData * {__strong}&,long>(void *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  id v9;

  v9 = a1;
  objc_msgSend(v9, "bindInt64:atParameterIndex:", *a2, 3);
  SafariShared::_WBSSQLiteStatementBindAllParameters<4,NSData * {__strong}&,NSData * {__strong}&,long>(v9, a3, a4, a5);

}

void sub_1A3E5DCE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<4,NSData * {__strong}&,NSData * {__strong}&,long>(void *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  id v7;

  v7 = a1;
  objc_msgSend(v7, "bindData:atParameterIndex:", *a2, 4);
  SafariShared::_WBSSQLiteStatementBindAllParameters<5,NSData * {__strong}&,long>(v7, a3, a4);

}

void sub_1A3E5DD54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<5,NSData * {__strong}&,long>(void *a1, _QWORD *a2, _QWORD *a3)
{
  id v5;

  v5 = a1;
  objc_msgSend(v5, "bindData:atParameterIndex:", *a2, 5);
  objc_msgSend(v5, "bindInt64:atParameterIndex:", *a3, 6);

}

void sub_1A3E5DDB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,unsigned long,long long &,NSData * {__strong}&,NSData * {__strong}&,long,long long &>(void *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, _QWORD *a7)
{
  id v13;

  v13 = a1;
  objc_msgSend(v13, "bindInt64:atParameterIndex:", *a2, 1);
  SafariShared::_WBSSQLiteStatementBindAllParameters<2,long long &,NSData * {__strong}&,NSData * {__strong}&,long,long long &>(v13, a3, a4, a5, a6, a7);

}

void sub_1A3E5DE48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<2,long long &,NSData * {__strong}&,NSData * {__strong}&,long,long long &>(void *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6)
{
  id v11;

  v11 = a1;
  objc_msgSend(v11, "bindInt64:atParameterIndex:", *a2, 2);
  SafariShared::_WBSSQLiteStatementBindAllParameters<3,NSData * {__strong}&,NSData * {__strong}&,long,long long &>(v11, a3, a4, a5, a6);

}

void sub_1A3E5DED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<3,NSData * {__strong}&,NSData * {__strong}&,long,long long &>(void *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  id v9;

  v9 = a1;
  objc_msgSend(v9, "bindData:atParameterIndex:", *a2, 3);
  SafariShared::_WBSSQLiteStatementBindAllParameters<4,NSData * {__strong}&,long,long long &>(v9, a3, a4, a5);

}

void sub_1A3E5DF48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<4,NSData * {__strong}&,long,long long &>(void *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  id v7;

  v7 = a1;
  objc_msgSend(v7, "bindData:atParameterIndex:", *a2, 4);
  SafariShared::_WBSSQLiteStatementBindAllParameters<5,long,long long &>(v7, a3, a4);

}

void sub_1A3E5DFB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<5,long,long long &>(void *a1, _QWORD *a2, _QWORD *a3)
{
  id v5;

  v5 = a1;
  objc_msgSend(v5, "bindInt64:atParameterIndex:", *a2, 5);
  objc_msgSend(v5, "bindInt64:atParameterIndex:", *a3, 6);

}

void sub_1A3E5E01C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,long long &,double,NSString * {__strong},int,int,int,long &,int,unsigned long>(void *a1, _QWORD *a2, double *a3, _QWORD *a4, unsigned int *a5, unsigned int *a6, unsigned int *a7, _QWORD *a8, unsigned int *a9, _QWORD *a10)
{
  id v17;

  v17 = a1;
  objc_msgSend(v17, "bindInt64:atParameterIndex:", *a2, 1);
  SafariShared::_WBSSQLiteStatementBindAllParameters<2,double,NSString * {__strong},int,int,int,long &,int,unsigned long>(v17, a3, a4, a5, a6, a7, a8, a9, a10);

}

void sub_1A3E5E0D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<2,double,NSString * {__strong},int,int,int,long &,int,unsigned long>(void *a1, double *a2, _QWORD *a3, unsigned int *a4, unsigned int *a5, unsigned int *a6, _QWORD *a7, unsigned int *a8, _QWORD *a9)
{
  id v16;

  v16 = a1;
  objc_msgSend(v16, "bindDouble:atParameterIndex:", 2, *a2);
  SafariShared::_WBSSQLiteStatementBindAllParameters<3,NSString * {__strong},int,int,int,long &,int,unsigned long>(v16, a3, a4, a5, a6, a7, a8, a9);

}

void sub_1A3E5E178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<3,NSString * {__strong},int,int,int,long &,int,unsigned long>(void *a1, _QWORD *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, _QWORD *a6, unsigned int *a7, _QWORD *a8)
{
  id v15;

  v15 = a1;
  objc_msgSend(v15, "bindString:atParameterIndex:", *a2, 3);
  SafariShared::_WBSSQLiteStatementBindAllParameters<4,int,int,int,long &,int,unsigned long>(v15, a3, a4, a5, a6, a7, a8);

}

void sub_1A3E5E218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<4,int,int,int,long &,int,unsigned long>(void *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, _QWORD *a5, unsigned int *a6, _QWORD *a7)
{
  id v13;

  v13 = a1;
  objc_msgSend(v13, "bindInt:atParameterIndex:", *a2, 4);
  SafariShared::_WBSSQLiteStatementBindAllParameters<5,int,int,long &,int,unsigned long>(v13, a3, a4, a5, a6, a7);

}

void sub_1A3E5E2A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<5,int,int,long &,int,unsigned long>(void *a1, unsigned int *a2, unsigned int *a3, _QWORD *a4, unsigned int *a5, _QWORD *a6)
{
  id v11;

  v11 = a1;
  objc_msgSend(v11, "bindInt:atParameterIndex:", *a2, 5);
  SafariShared::_WBSSQLiteStatementBindAllParameters<6,int,long &,int,unsigned long>(v11, a3, a4, a5, a6);

}

void sub_1A3E5E330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<6,int,long &,int,unsigned long>(void *a1, unsigned int *a2, _QWORD *a3, unsigned int *a4, _QWORD *a5)
{
  id v9;

  v9 = a1;
  objc_msgSend(v9, "bindInt:atParameterIndex:", *a2, 6);
  SafariShared::_WBSSQLiteStatementBindAllParameters<7,long &,int,unsigned long>(v9, a3, a4, a5);

}

void sub_1A3E5E3A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<7,long &,int,unsigned long>(void *a1, _QWORD *a2, unsigned int *a3, _QWORD *a4)
{
  id v7;

  v7 = a1;
  objc_msgSend(v7, "bindInt64:atParameterIndex:", *a2, 7);
  SafariShared::_WBSSQLiteStatementBindAllParameters<8,int,unsigned long>(v7, a3, a4);

}

void sub_1A3E5E418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<8,int,unsigned long>(void *a1, unsigned int *a2, _QWORD *a3)
{
  id v5;

  v5 = a1;
  objc_msgSend(v5, "bindInt:atParameterIndex:", *a2, 8);
  objc_msgSend(v5, "bindInt64:atParameterIndex:", *a3, 9);

}

void sub_1A3E5E47C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__rehash<true>(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *i = *v20;
LABEL_38:
    *v20 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*i)
  {
    v21 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1A3E5E698(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<0,1,std::tuple<double,std::tuple<long long &>>>(void *a1, sqlite3_stmt *a2, uint64_t a3, double *a4)
{
  id v7;
  uint64_t v8;

  v7 = a1;
  if (sqlite3_bind_double(a2, 1, *a4))
  {
    objc_msgSend(v7, "reportErrorWithCode:statement:error:", 1, a2, a3);
    v8 = 0;
  }
  else
  {
    v8 = SafariShared::_WBSSQLiteStatementBindOrStep<1,1,std::tuple<double,std::tuple<long long &>>>(v7, a2, a3, (uint64_t)a4);
  }

  return v8;
}

void sub_1A3E5E730(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<1,1,std::tuple<double,std::tuple<long long &>>>(void *a1, sqlite3_stmt *a2, uint64_t a3, uint64_t a4)
{
  id v7;
  uint64_t v8;
  uint64_t v9;

  v7 = a1;
  v8 = sqlite3_step(a2);
  if ((_DWORD)v8 == 100
    && (**(_QWORD **)(a4 + 8) = sqlite3_column_int64(a2, 0), v8 = sqlite3_step(a2), (_DWORD)v8 == 101))
  {
    v9 = 1;
  }
  else
  {
    objc_msgSend(v7, "reportErrorWithCode:statement:error:", v8, a2, a3);
    v9 = 0;
  }

  return v9;
}

void sub_1A3E5E7D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * {__strong},long long &>(void *a1, _QWORD *a2, _QWORD *a3)
{
  id v5;

  v5 = a1;
  objc_msgSend(v5, "bindString:atParameterIndex:", *a2, 1);
  objc_msgSend(v5, "bindInt64:atParameterIndex:", *a3, 2);

}

void sub_1A3E5E838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,unsigned long,unsigned long,long long &>(void *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  id v7;

  v7 = a1;
  objc_msgSend(v7, "bindInt64:atParameterIndex:", *a2, 1);
  SafariShared::_WBSSQLiteStatementBindAllParameters<2,unsigned long,long long &>(v7, a3, a4);

}

void sub_1A3E5E8A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<2,unsigned long,long long &>(void *a1, _QWORD *a2, _QWORD *a3)
{
  id v5;

  v5 = a1;
  objc_msgSend(v5, "bindInt64:atParameterIndex:", *a2, 2);
  objc_msgSend(v5, "bindInt64:atParameterIndex:", *a3, 3);

}

void sub_1A3E5E90C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<0,0,std::tuple<std::tuple<long long &>>>(void *a1, sqlite3_stmt *a2, uint64_t a3, sqlite3_int64 **a4)
{
  id v7;
  uint64_t v8;
  uint64_t v9;

  v7 = a1;
  v8 = sqlite3_step(a2);
  if ((_DWORD)v8 == 100 && (**a4 = sqlite3_column_int64(a2, 0), v8 = sqlite3_step(a2), (_DWORD)v8 == 101))
  {
    v9 = 1;
  }
  else
  {
    objc_msgSend(v7, "reportErrorWithCode:statement:error:", v8, a2, a3);
    v9 = 0;
  }

  return v9;
}

void sub_1A3E5E9B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,long long &,long long &>(void *a1, _QWORD *a2, _QWORD *a3)
{
  id v5;

  v5 = a1;
  objc_msgSend(v5, "bindInt64:atParameterIndex:", *a2, 1);
  objc_msgSend(v5, "bindInt64:atParameterIndex:", *a3, 2);

}

void sub_1A3E5EA14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<0,1,std::tuple<NSString * {__strong}&,std::tuple<NSData * {__strong}&>>>(void *a1, sqlite3_stmt *a2, uint64_t a3, id **a4)
{
  id v7;
  id v8;
  void *v9;
  int v10;
  int v11;
  uint64_t v12;

  v7 = a1;
  v8 = **a4;
  v9 = v8;
  if (v8)
    v10 = sqlite3_bind_text(a2, 1, (const char *)objc_msgSend(objc_retainAutorelease(v8), "UTF8String"), -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  else
    v10 = sqlite3_bind_null(a2, 1);
  v11 = v10;

  if (v11)
  {
    objc_msgSend(v7, "reportErrorWithCode:statement:error:", 1, a2, a3);
    v12 = 0;
  }
  else
  {
    v12 = SafariShared::_WBSSQLiteStatementBindOrStep<1,1,std::tuple<NSString * {__strong}&,std::tuple<NSData * {__strong}&>>>(v7, a2, a3, (uint64_t)a4);
  }

  return v12;
}

void sub_1A3E5EAF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<1,1,std::tuple<NSString * {__strong}&,std::tuple<NSData * {__strong}&>>>(void *a1, sqlite3_stmt *a2, uint64_t a3, uint64_t a4)
{
  id v7;
  uint64_t v8;
  uint64_t v9;

  v7 = a1;
  v8 = sqlite3_step(a2);
  if ((_DWORD)v8 != 100)
    goto LABEL_5;
  if (!SafariShared::_WBSStatementFetchColumnsInTuple<std::tuple<NSData * {__strong}&>,0>(a2, (void ***)(a4 + 8)))
  {
LABEL_6:
    v9 = 0;
    goto LABEL_7;
  }
  v8 = sqlite3_step(a2);
  if ((_DWORD)v8 != 101)
  {
LABEL_5:
    objc_msgSend(v7, "reportErrorWithCode:statement:error:", v8, a2, a3);
    goto LABEL_6;
  }
  v9 = 1;
LABEL_7:

  return v9;
}

void sub_1A3E5EBA4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSStatementFetchColumnsInTuple<std::tuple<NSData * {__strong}&>,0>(sqlite3_stmt *a1, void ***a2)
{
  uint64_t v3;
  void *v4;

  SafariShared::WBSSQLiteDatatypeTraits<NSData * {__strong}>::fetch(a1, 0);
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = **a2;
  **a2 = (void *)v3;

  return 1;
}

CFDataRef SafariShared::WBSSQLiteDatatypeTraits<NSData * {__strong}>::fetch(sqlite3_stmt *a1, int a2)
{
  CFDataRef v4;
  const __CFAllocator *v5;
  const UInt8 *v6;
  int v7;

  if (sqlite3_column_type(a1, a2) == 5)
  {
    v4 = 0;
  }
  else
  {
    v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v6 = (const UInt8 *)sqlite3_column_blob(a1, a2);
    v7 = sqlite3_column_bytes(a1, a2);
    v4 = CFDataCreate(v5, v6, v7);
  }
  return v4;
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<NSData * {__strong}&,NSString * {__strong}&>(void *a1, _QWORD *a2, void *a3, _QWORD *a4, _QWORD *a5)
{
  id v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  id v17;

  v9 = a1;
  v10 = a3;
  v17 = 0;
  v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89CC8]), "initWithDatabase:query:error:", v9, v10, &v17);
  v12 = v17;
  v13 = v12;
  if (v11)
  {
    SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSData * {__strong}&,NSString * {__strong}&>(v11, a4, a5);
    v14 = objc_msgSend(v11, "execute");
    objc_msgSend(v11, "invalidate");
    if ((v14 - 100) >= 2 && (_DWORD)v14 != 0)
      objc_msgSend(v9, "reportErrorWithCode:statement:error:", v14, objc_msgSend(v11, "handle"), a2);
  }
  else
  {
    if (a2)
      *a2 = objc_retainAutorelease(v12);
    v14 = objc_msgSend(v13, "code");
  }

  return v14;
}

void sub_1A3E5ED74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSData * {__strong}&,NSString * {__strong}&>(void *a1, _QWORD *a2, _QWORD *a3)
{
  id v5;

  v5 = a1;
  objc_msgSend(v5, "bindData:atParameterIndex:", *a2, 1);
  objc_msgSend(v5, "bindString:atParameterIndex:", *a3, 2);

}

void sub_1A3E5EDEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<0,1,std::tuple<NSString * const {__strong}&,std::tuple<NSData * {__strong}&>>>(void *a1, sqlite3_stmt *a2, uint64_t a3, id **a4)
{
  id v7;
  id v8;
  void *v9;
  int v10;
  int v11;
  uint64_t v12;

  v7 = a1;
  v8 = **a4;
  v9 = v8;
  if (v8)
    v10 = sqlite3_bind_text(a2, 1, (const char *)objc_msgSend(objc_retainAutorelease(v8), "UTF8String"), -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  else
    v10 = sqlite3_bind_null(a2, 1);
  v11 = v10;

  if (v11)
  {
    objc_msgSend(v7, "reportErrorWithCode:statement:error:", 1, a2, a3);
    v12 = 0;
  }
  else
  {
    v12 = SafariShared::_WBSSQLiteStatementBindOrStep<1,1,std::tuple<NSString * const {__strong}&,std::tuple<NSData * {__strong}&>>>(v7, a2, a3, (uint64_t)a4);
  }

  return v12;
}

void sub_1A3E5EECC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<1,1,std::tuple<NSString * const {__strong}&,std::tuple<NSData * {__strong}&>>>(void *a1, sqlite3_stmt *a2, uint64_t a3, uint64_t a4)
{
  id v7;
  uint64_t v8;
  uint64_t v9;

  v7 = a1;
  v8 = sqlite3_step(a2);
  if ((_DWORD)v8 != 100)
    goto LABEL_5;
  if (!SafariShared::_WBSStatementFetchColumnsInTuple<std::tuple<NSData * {__strong}&>,0>(a2, (void ***)(a4 + 8)))
  {
LABEL_6:
    v9 = 0;
    goto LABEL_7;
  }
  v8 = sqlite3_step(a2);
  if ((_DWORD)v8 != 101)
  {
LABEL_5:
    objc_msgSend(v7, "reportErrorWithCode:statement:error:", v8, a2, a3);
    goto LABEL_6;
  }
  v9 = 1;
LABEL_7:

  return v9;
}

void sub_1A3E5EF7C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<0,2,std::tuple<NSString * {__strong},double,std::tuple<int &,int &>>>(void *a1, sqlite3_stmt *a2, uint64_t a3, id *a4)
{
  id v7;
  id v8;
  void *v9;
  int v10;
  int v11;
  uint64_t v12;

  v7 = a1;
  v8 = *a4;
  v9 = v8;
  if (v8)
    v10 = sqlite3_bind_text(a2, 1, (const char *)objc_msgSend(objc_retainAutorelease(v8), "UTF8String"), -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  else
    v10 = sqlite3_bind_null(a2, 1);
  v11 = v10;

  if (v11)
  {
    objc_msgSend(v7, "reportErrorWithCode:statement:error:", 1, a2, a3);
    v12 = 0;
  }
  else
  {
    v12 = SafariShared::_WBSSQLiteStatementBindOrStep<1,2,std::tuple<NSString * {__strong},double,std::tuple<int &,int &>>>(v7, a2, a3, (uint64_t)a4);
  }

  return v12;
}

void sub_1A3E5F054(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<1,2,std::tuple<NSString * {__strong},double,std::tuple<int &,int &>>>(void *a1, sqlite3_stmt *a2, uint64_t a3, uint64_t a4)
{
  id v7;
  uint64_t v8;

  v7 = a1;
  if (sqlite3_bind_double(a2, 2, *(double *)(a4 + 8)))
  {
    objc_msgSend(v7, "reportErrorWithCode:statement:error:", 1, a2, a3);
    v8 = 0;
  }
  else
  {
    v8 = SafariShared::_WBSSQLiteStatementBindOrStep<2,2,std::tuple<NSString * {__strong},double,std::tuple<int &,int &>>>(v7, a2, a3, a4);
  }

  return v8;
}

void sub_1A3E5F0F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<2,2,std::tuple<NSString * {__strong},double,std::tuple<int &,int &>>>(void *a1, sqlite3_stmt *a2, uint64_t a3, uint64_t a4)
{
  id v7;
  uint64_t v8;
  int v9;
  int v10;
  int *v11;
  uint64_t v12;

  v7 = a1;
  v8 = sqlite3_step(a2);
  if ((_DWORD)v8 == 100
    && (v9 = sqlite3_column_int(a2, 0),
        v10 = sqlite3_column_int(a2, 1),
        v11 = *(int **)(a4 + 24),
        **(_DWORD **)(a4 + 16) = v9,
        *v11 = v10,
        v8 = sqlite3_step(a2),
        (_DWORD)v8 == 101))
  {
    v12 = 1;
  }
  else
  {
    objc_msgSend(v7, "reportErrorWithCode:statement:error:", v8, a2, a3);
    v12 = 0;
  }

  return v12;
}

void sub_1A3E5F1BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<long long const&>(void *a1, _QWORD *a2, void *a3, _QWORD *a4)
{
  id v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  id v15;

  v7 = a1;
  v8 = a3;
  v15 = 0;
  v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89CC8]), "initWithDatabase:query:error:", v7, v8, &v15);
  v10 = v15;
  v11 = v10;
  if (v9)
  {
    objc_msgSend(v9, "bindInt64:atParameterIndex:", *a4, 1);
    v12 = objc_msgSend(v9, "execute");
    objc_msgSend(v9, "invalidate");
    if ((v12 - 100) >= 2 && (_DWORD)v12 != 0)
      objc_msgSend(v7, "reportErrorWithCode:statement:error:", v12, objc_msgSend(v9, "handle"), a2);
  }
  else
  {
    if (a2)
      *a2 = objc_retainAutorelease(v10);
    v12 = objc_msgSend(v11, "code");
  }

  return v12;
}

void sub_1A3E5F2D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<long long const&,NSData * const {__strong}&,NSData * const {__strong},long long const&>(void *a1, _QWORD *a2, void *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, _QWORD *a7)
{
  id v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  uint64_t v18;
  id v21;

  v13 = a1;
  v14 = a3;
  v21 = 0;
  v15 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89CC8]), "initWithDatabase:query:error:", v13, v14, &v21);
  v16 = v21;
  v17 = v16;
  if (v15)
  {
    SafariShared::_WBSSQLiteStatementBindAllParameters<1,long long const&,NSData * const {__strong}&,NSData * const {__strong},long long const&>(v15, a4, a5, a6, a7);
    v18 = objc_msgSend(v15, "execute");
    objc_msgSend(v15, "invalidate");
    if ((v18 - 100) >= 2 && (_DWORD)v18 != 0)
      objc_msgSend(v13, "reportErrorWithCode:statement:error:", v18, objc_msgSend(v15, "handle"), a2);
  }
  else
  {
    if (a2)
      *a2 = objc_retainAutorelease(v16);
    v18 = objc_msgSend(v17, "code");
  }

  return v18;
}

void sub_1A3E5F420(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,long long const&,NSData * const {__strong}&,NSData * const {__strong},long long const&>(void *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  id v9;

  v9 = a1;
  objc_msgSend(v9, "bindInt64:atParameterIndex:", *a2, 1);
  SafariShared::_WBSSQLiteStatementBindAllParameters<2,NSData * const {__strong}&,NSData * const {__strong},long long const&>(v9, a3, a4, a5);

}

void sub_1A3E5F4AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<2,NSData * const {__strong}&,NSData * const {__strong},long long const&>(void *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  id v7;

  v7 = a1;
  objc_msgSend(v7, "bindData:atParameterIndex:", *a2, 2);
  SafariShared::_WBSSQLiteStatementBindAllParameters<3,NSData * const {__strong}&,long long const&>(v7, a3, a4);

}

void sub_1A3E5F51C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<3,NSData * const {__strong}&,long long const&>(void *a1, _QWORD *a2, _QWORD *a3)
{
  id v5;

  v5 = a1;
  objc_msgSend(v5, "bindData:atParameterIndex:", *a2, 3);
  objc_msgSend(v5, "bindInt64:atParameterIndex:", *a3, 4);

}

void sub_1A3E5F580(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<0,1,std::tuple<NSDate * {__strong}&,void({block_pointer} {__strong})(long long)>>(void *a1, sqlite3_stmt *a2, uint64_t a3, id **a4)
{
  id v7;
  id v8;
  void *v9;
  double v10;
  int v11;
  int v12;
  uint64_t v13;

  v7 = a1;
  v8 = **a4;
  v9 = v8;
  if (v8)
  {
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
    v11 = sqlite3_bind_double(a2, 1, v10);
  }
  else
  {
    v11 = sqlite3_bind_null(a2, 1);
  }
  v12 = v11;

  if (v12)
  {
    objc_msgSend(v7, "reportErrorWithCode:statement:error:", 1, a2, a3);
    v13 = 0;
  }
  else
  {
    v13 = SafariShared::_WBSSQLiteStatementBindOrStep<1,1,std::tuple<NSDate * {__strong}&,void({block_pointer} {__strong})(long long)>>(v7, a2, a3, (uint64_t)a4);
  }

  return v13;
}

void sub_1A3E5F650(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<1,1,std::tuple<NSDate * {__strong}&,void({block_pointer} {__strong})(long long)>>(void *a1, sqlite3_stmt *a2, uint64_t a3, uint64_t a4)
{
  id v7;
  uint64_t v8;
  uint64_t v9;

  v7 = a1;
  while (1)
  {
    v8 = sqlite3_step(a2);
    if ((_DWORD)v8 != 100)
      break;
    if ((SafariShared::_WBSStatementCallBlockWithAllColumns<void,long long>(a2, *(void **)(a4 + 8)) & 1) == 0)
      goto LABEL_8;
  }
  if ((_DWORD)v8 == 101)
  {
    v9 = 1;
    goto LABEL_9;
  }
  objc_msgSend(v7, "reportErrorWithCode:statement:error:", v8, a2, a3);
LABEL_8:
  v9 = 0;
LABEL_9:

  return v9;
}

void sub_1A3E5F6F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSStatementCallBlockWithAllColumns<void,long long>(sqlite3_stmt *a1, void *a2)
{
  void (**v3)(id, sqlite3_int64);
  sqlite3_int64 v4;

  v3 = a2;
  v4 = sqlite3_column_int64(a1, 0);
  v3[2](v3, v4);

  return 1;
}

void sub_1A3E5F764(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<0,0,std::tuple<void({block_pointer} {__strong})(long long)>>(void *a1, sqlite3_stmt *a2, uint64_t a3, void **a4)
{
  id v7;
  uint64_t v8;
  uint64_t v9;

  v7 = a1;
  while (1)
  {
    v8 = sqlite3_step(a2);
    if ((_DWORD)v8 != 100)
      break;
    if ((SafariShared::_WBSStatementCallBlockWithAllColumns<void,long long>(a2, *a4) & 1) == 0)
      goto LABEL_8;
  }
  if ((_DWORD)v8 == 101)
  {
    v9 = 1;
    goto LABEL_9;
  }
  objc_msgSend(v7, "reportErrorWithCode:statement:error:", v8, a2, a3);
LABEL_8:
  v9 = 0;
LABEL_9:

  return v9;
}

void sub_1A3E5F804(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<0,0,std::tuple<void({block_pointer} {__strong})(long long,NSString *)>>(void *a1, sqlite3_stmt *a2, uint64_t a3, void **a4)
{
  id v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v7 = a1;
  while (1)
  {
    v8 = sqlite3_step(a2);
    if ((_DWORD)v8 != 100)
      break;
    SafariShared::WBSSQLiteEnumerationBlock<void,long long,NSString * {__strong}>::callBlockWithAllColumns((uint64_t)&v11, a2, *a4);
  }
  if ((_DWORD)v8 == 101)
  {
    v9 = 1;
  }
  else
  {
    objc_msgSend(v7, "reportErrorWithCode:statement:error:", v8, a2, a3);
    v9 = 0;
  }

  return v9;
}

void sub_1A3E5F8A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void SafariShared::WBSSQLiteEnumerationBlock<void,long long,NSString * {__strong}>::callBlockWithAllColumns(uint64_t a1, sqlite3_stmt *a2, void *a3)
{
  sqlite3_int64 v4;
  void *v5;
  void (**v6)(id, sqlite3_int64, void *);

  v6 = a3;
  v4 = sqlite3_column_int64(a2, 0);
  SafariShared::WBSSQLiteDatatypeTraits<NSString * {__strong}>::fetch(a2, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6[2](v6, v4, v5);

}

void sub_1A3E5F934(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

__CFString *SafariShared::WBSSQLiteDatatypeTraits<NSString * {__strong}>::fetch(sqlite3_stmt *a1, int a2)
{
  __CFString *v4;
  const __CFAllocator *v5;
  const unsigned __int8 *v6;
  int v7;

  if (sqlite3_column_type(a1, a2) == 5)
  {
    v4 = 0;
  }
  else
  {
    v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v6 = sqlite3_column_text(a1, a2);
    v7 = sqlite3_column_bytes(a1, a2);
    v4 = (__CFString *)CFStringCreateWithBytes(v5, v6, v7, 0x8000100u, 0);
  }
  return v4;
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<double,double,long &>(void *a1, _QWORD *a2, void *a3, double *a4, double *a5, _QWORD *a6)
{
  id v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  uint64_t v16;
  id v19;

  v11 = a1;
  v12 = a3;
  v19 = 0;
  v13 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89CC8]), "initWithDatabase:query:error:", v11, v12, &v19);
  v14 = v19;
  v15 = v14;
  if (v13)
  {
    SafariShared::_WBSSQLiteStatementBindAllParameters<1,double,double,long &>(v13, a4, a5, a6);
    v16 = objc_msgSend(v13, "execute");
    objc_msgSend(v13, "invalidate");
    if ((v16 - 100) >= 2 && (_DWORD)v16 != 0)
      objc_msgSend(v11, "reportErrorWithCode:statement:error:", v16, objc_msgSend(v13, "handle"), a2);
  }
  else
  {
    if (a2)
      *a2 = objc_retainAutorelease(v14);
    v16 = objc_msgSend(v15, "code");
  }

  return v16;
}

void sub_1A3E5FAF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,double,double,long &>(void *a1, double *a2, double *a3, _QWORD *a4)
{
  id v7;

  v7 = a1;
  objc_msgSend(v7, "bindDouble:atParameterIndex:", 1, *a2);
  SafariShared::_WBSSQLiteStatementBindAllParameters<2,double,long &>(v7, a3, a4);

}

void sub_1A3E5FB78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<2,double,long &>(void *a1, double *a2, _QWORD *a3)
{
  id v5;

  v5 = a1;
  objc_msgSend(v5, "bindDouble:atParameterIndex:", 2, *a2);
  objc_msgSend(v5, "bindInt64:atParameterIndex:", *a3, 3);

}

void sub_1A3E5FBDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<double,double,long long const&>(void *a1, _QWORD *a2, void *a3, double *a4, double *a5, _QWORD *a6)
{
  id v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  uint64_t v16;
  id v19;

  v11 = a1;
  v12 = a3;
  v19 = 0;
  v13 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89CC8]), "initWithDatabase:query:error:", v11, v12, &v19);
  v14 = v19;
  v15 = v14;
  if (v13)
  {
    SafariShared::_WBSSQLiteStatementBindAllParameters<1,double,double,long long const&>(v13, a4, a5, a6);
    v16 = objc_msgSend(v13, "execute");
    objc_msgSend(v13, "invalidate");
    if ((v16 - 100) >= 2 && (_DWORD)v16 != 0)
      objc_msgSend(v11, "reportErrorWithCode:statement:error:", v16, objc_msgSend(v13, "handle"), a2);
  }
  else
  {
    if (a2)
      *a2 = objc_retainAutorelease(v14);
    v16 = objc_msgSend(v15, "code");
  }

  return v16;
}

void sub_1A3E5FD08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,double,double,long long const&>(void *a1, double *a2, double *a3, _QWORD *a4)
{
  id v7;

  v7 = a1;
  objc_msgSend(v7, "bindDouble:atParameterIndex:", 1, *a2);
  SafariShared::_WBSSQLiteStatementBindAllParameters<2,double,long long const&>(v7, a3, a4);

}

void sub_1A3E5FD8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<2,double,long long const&>(void *a1, double *a2, _QWORD *a3)
{
  id v5;

  v5 = a1;
  objc_msgSend(v5, "bindDouble:atParameterIndex:", 2, *a2);
  objc_msgSend(v5, "bindInt64:atParameterIndex:", *a3, 3);

}

void sub_1A3E5FDF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<0,2,std::tuple<NSDate * {__strong}&,NSDate * {__strong}&,void({block_pointer} {__strong})(long long)>>(void *a1, sqlite3_stmt *a2, uint64_t a3, id **a4)
{
  id v7;
  id v8;
  void *v9;
  double v10;
  int v11;
  int v12;
  uint64_t v13;

  v7 = a1;
  v8 = **a4;
  v9 = v8;
  if (v8)
  {
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
    v11 = sqlite3_bind_double(a2, 1, v10);
  }
  else
  {
    v11 = sqlite3_bind_null(a2, 1);
  }
  v12 = v11;

  if (v12)
  {
    objc_msgSend(v7, "reportErrorWithCode:statement:error:", 1, a2, a3);
    v13 = 0;
  }
  else
  {
    v13 = SafariShared::_WBSSQLiteStatementBindOrStep<1,2,std::tuple<NSDate * {__strong}&,NSDate * {__strong}&,void({block_pointer} {__strong})(long long)>>(v7, a2, a3, (uint64_t)a4);
  }

  return v13;
}

void sub_1A3E5FEC0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<1,2,std::tuple<NSDate * {__strong}&,NSDate * {__strong}&,void({block_pointer} {__strong})(long long)>>(void *a1, sqlite3_stmt *a2, uint64_t a3, uint64_t a4)
{
  id v7;
  id v8;
  void *v9;
  double v10;
  int v11;
  int v12;
  uint64_t v13;

  v7 = a1;
  v8 = **(id **)(a4 + 8);
  v9 = v8;
  if (v8)
  {
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
    v11 = sqlite3_bind_double(a2, 2, v10);
  }
  else
  {
    v11 = sqlite3_bind_null(a2, 2);
  }
  v12 = v11;

  if (v12)
  {
    objc_msgSend(v7, "reportErrorWithCode:statement:error:", 1, a2, a3);
    v13 = 0;
  }
  else
  {
    v13 = SafariShared::_WBSSQLiteStatementBindOrStep<2,2,std::tuple<NSDate * {__strong}&,NSDate * {__strong}&,void({block_pointer} {__strong})(long long)>>(v7, a2, a3, a4);
  }

  return v13;
}

void sub_1A3E5FF9C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<2,2,std::tuple<NSDate * {__strong}&,NSDate * {__strong}&,void({block_pointer} {__strong})(long long)>>(void *a1, sqlite3_stmt *a2, uint64_t a3, uint64_t a4)
{
  id v7;
  uint64_t v8;
  uint64_t v9;

  v7 = a1;
  while (1)
  {
    v8 = sqlite3_step(a2);
    if ((_DWORD)v8 != 100)
      break;
    if ((SafariShared::_WBSStatementCallBlockWithAllColumns<void,long long>(a2, *(void **)(a4 + 16)) & 1) == 0)
      goto LABEL_8;
  }
  if ((_DWORD)v8 == 101)
  {
    v9 = 1;
    goto LABEL_9;
  }
  objc_msgSend(v7, "reportErrorWithCode:statement:error:", v8, a2, a3);
LABEL_8:
  v9 = 0;
LABEL_9:

  return v9;
}

void sub_1A3E60044(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSData * {__strong}&,double const&,double const&,long const&>(void *a1, _QWORD *a2, double *a3, double *a4, _QWORD *a5)
{
  id v9;

  v9 = a1;
  objc_msgSend(v9, "bindData:atParameterIndex:", *a2, 1);
  SafariShared::_WBSSQLiteStatementBindAllParameters<2,double const&,double const&,long const&>(v9, a3, a4, a5);

}

void sub_1A3E600BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<2,double const&,double const&,long const&>(void *a1, double *a2, double *a3, _QWORD *a4)
{
  id v7;

  v7 = a1;
  objc_msgSend(v7, "bindDouble:atParameterIndex:", 2, *a2);
  SafariShared::_WBSSQLiteStatementBindAllParameters<3,double const&,long const&>(v7, a3, a4);

}

void sub_1A3E6012C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<3,double const&,long const&>(void *a1, double *a2, _QWORD *a3)
{
  id v5;

  v5 = a1;
  objc_msgSend(v5, "bindDouble:atParameterIndex:", 3, *a2);
  objc_msgSend(v5, "bindInt64:atParameterIndex:", *a3, 4);

}

void sub_1A3E60190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<0,2,std::tuple<NSData * {__strong},NSData * {__strong},std::tuple<long long &>>>(void *a1, sqlite3_stmt *a2, uint64_t a3, id *a4)
{
  id v7;
  id v8;
  void *v9;
  id v10;
  int v11;
  int v12;
  uint64_t v13;

  v7 = a1;
  v8 = *a4;
  v9 = v8;
  if (v8)
  {
    v10 = objc_retainAutorelease(v8);
    v11 = sqlite3_bind_blob64(a2, 1, (const void *)objc_msgSend(v10, "bytes"), objc_msgSend(v10, "length"), (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  }
  else
  {
    v11 = sqlite3_bind_null(a2, 1);
  }
  v12 = v11;

  if (v12)
  {
    objc_msgSend(v7, "reportErrorWithCode:statement:error:", 1, a2, a3);
    v13 = 0;
  }
  else
  {
    v13 = SafariShared::_WBSSQLiteStatementBindOrStep<1,2,std::tuple<NSData * {__strong},NSData * {__strong},std::tuple<long long &>>>(v7, a2, a3, (uint64_t)a4);
  }

  return v13;
}

void sub_1A3E60284(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<1,2,std::tuple<NSData * {__strong},NSData * {__strong},std::tuple<long long &>>>(void *a1, sqlite3_stmt *a2, uint64_t a3, uint64_t a4)
{
  id v7;
  id v8;
  void *v9;
  id v10;
  int v11;
  int v12;
  uint64_t v13;

  v7 = a1;
  v8 = *(id *)(a4 + 8);
  v9 = v8;
  if (v8)
  {
    v10 = objc_retainAutorelease(v8);
    v11 = sqlite3_bind_blob64(a2, 2, (const void *)objc_msgSend(v10, "bytes"), objc_msgSend(v10, "length"), (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  }
  else
  {
    v11 = sqlite3_bind_null(a2, 2);
  }
  v12 = v11;

  if (v12)
  {
    objc_msgSend(v7, "reportErrorWithCode:statement:error:", 1, a2, a3);
    v13 = 0;
  }
  else
  {
    v13 = SafariShared::_WBSSQLiteStatementBindOrStep<2,2,std::tuple<NSData * {__strong},NSData * {__strong},std::tuple<long long &>>>(v7, a2, a3, a4);
  }

  return v13;
}

void sub_1A3E60384(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<2,2,std::tuple<NSData * {__strong},NSData * {__strong},std::tuple<long long &>>>(void *a1, sqlite3_stmt *a2, uint64_t a3, uint64_t a4)
{
  id v7;
  uint64_t v8;
  uint64_t v9;

  v7 = a1;
  v8 = sqlite3_step(a2);
  if ((_DWORD)v8 == 100
    && (**(_QWORD **)(a4 + 16) = sqlite3_column_int64(a2, 0), v8 = sqlite3_step(a2), (_DWORD)v8 == 101))
  {
    v9 = 1;
  }
  else
  {
    objc_msgSend(v7, "reportErrorWithCode:statement:error:", v8, a2, a3);
    v9 = 0;
  }

  return v9;
}

void sub_1A3E60438(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<0,3,std::tuple<long long &,NSDate * {__strong}&,NSDate * {__strong}&,void({block_pointer} {__strong}&)(long long)>>(void *a1, sqlite3_stmt *a2, uint64_t a3, sqlite3_int64 **a4)
{
  id v7;
  uint64_t v8;

  v7 = a1;
  if (sqlite3_bind_int64(a2, 1, **a4))
  {
    objc_msgSend(v7, "reportErrorWithCode:statement:error:", 1, a2, a3);
    v8 = 0;
  }
  else
  {
    v8 = SafariShared::_WBSSQLiteStatementBindOrStep<1,3,std::tuple<long long &,NSDate * {__strong}&,NSDate * {__strong}&,void({block_pointer} {__strong}&)(long long)>>(v7, a2, a3, (uint64_t)a4);
  }

  return v8;
}

void sub_1A3E604D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<1,3,std::tuple<long long &,NSDate * {__strong}&,NSDate * {__strong}&,void({block_pointer} {__strong}&)(long long)>>(void *a1, sqlite3_stmt *a2, uint64_t a3, uint64_t a4)
{
  id v7;
  id v8;
  void *v9;
  double v10;
  int v11;
  int v12;
  uint64_t v13;

  v7 = a1;
  v8 = **(id **)(a4 + 8);
  v9 = v8;
  if (v8)
  {
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
    v11 = sqlite3_bind_double(a2, 2, v10);
  }
  else
  {
    v11 = sqlite3_bind_null(a2, 2);
  }
  v12 = v11;

  if (v12)
  {
    objc_msgSend(v7, "reportErrorWithCode:statement:error:", 1, a2, a3);
    v13 = 0;
  }
  else
  {
    v13 = SafariShared::_WBSSQLiteStatementBindOrStep<2,3,std::tuple<long long &,NSDate * {__strong}&,NSDate * {__strong}&,void({block_pointer} {__strong}&)(long long)>>(v7, a2, a3, a4);
  }

  return v13;
}

void sub_1A3E605A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<2,3,std::tuple<long long &,NSDate * {__strong}&,NSDate * {__strong}&,void({block_pointer} {__strong}&)(long long)>>(void *a1, sqlite3_stmt *a2, uint64_t a3, uint64_t a4)
{
  id v7;
  id v8;
  void *v9;
  double v10;
  int v11;
  int v12;
  uint64_t v13;

  v7 = a1;
  v8 = **(id **)(a4 + 16);
  v9 = v8;
  if (v8)
  {
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
    v11 = sqlite3_bind_double(a2, 3, v10);
  }
  else
  {
    v11 = sqlite3_bind_null(a2, 3);
  }
  v12 = v11;

  if (v12)
  {
    objc_msgSend(v7, "reportErrorWithCode:statement:error:", 1, a2, a3);
    v13 = 0;
  }
  else
  {
    v13 = SafariShared::_WBSSQLiteStatementBindOrStep<3,3,std::tuple<long long &,NSDate * {__strong}&,NSDate * {__strong}&,void({block_pointer} {__strong}&)(long long)>>(v7, a2, a3, a4);
  }

  return v13;
}

void sub_1A3E6067C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<3,3,std::tuple<long long &,NSDate * {__strong}&,NSDate * {__strong}&,void({block_pointer} {__strong}&)(long long)>>(void *a1, sqlite3_stmt *a2, uint64_t a3, uint64_t a4)
{
  id v7;
  uint64_t v8;
  uint64_t v9;

  v7 = a1;
  while (1)
  {
    v8 = sqlite3_step(a2);
    if ((_DWORD)v8 != 100)
      break;
    if ((SafariShared::_WBSStatementCallBlockWithAllColumns<void,long long>(a2, **(void ***)(a4 + 24)) & 1) == 0)
      goto LABEL_8;
  }
  if ((_DWORD)v8 == 101)
  {
    v9 = 1;
    goto LABEL_9;
  }
  objc_msgSend(v7, "reportErrorWithCode:statement:error:", v8, a2, a3);
LABEL_8:
  v9 = 0;
LABEL_9:

  return v9;
}

void sub_1A3E60728(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<double &>(void *a1, _QWORD *a2, void *a3, double *a4)
{
  id v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  id v15;

  v7 = a1;
  v8 = a3;
  v15 = 0;
  v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89CC8]), "initWithDatabase:query:error:", v7, v8, &v15);
  v10 = v15;
  v11 = v10;
  if (v9)
  {
    objc_msgSend(v9, "bindDouble:atParameterIndex:", 1, *a4);
    v12 = objc_msgSend(v9, "execute");
    objc_msgSend(v9, "invalidate");
    if ((v12 - 100) >= 2 && (_DWORD)v12 != 0)
      objc_msgSend(v7, "reportErrorWithCode:statement:error:", v12, objc_msgSend(v9, "handle"), a2);
  }
  else
  {
    if (a2)
      *a2 = objc_retainAutorelease(v10);
    v12 = objc_msgSend(v11, "code");
  }

  return v12;
}

void sub_1A3E60840(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<double const&>(void *a1, _QWORD *a2, void *a3, double *a4)
{
  id v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  id v15;

  v7 = a1;
  v8 = a3;
  v15 = 0;
  v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89CC8]), "initWithDatabase:query:error:", v7, v8, &v15);
  v10 = v15;
  v11 = v10;
  if (v9)
  {
    objc_msgSend(v9, "bindDouble:atParameterIndex:", 1, *a4);
    v12 = objc_msgSend(v9, "execute");
    objc_msgSend(v9, "invalidate");
    if ((v12 - 100) >= 2 && (_DWORD)v12 != 0)
      objc_msgSend(v7, "reportErrorWithCode:statement:error:", v12, objc_msgSend(v9, "handle"), a2);
  }
  else
  {
    if (a2)
      *a2 = objc_retainAutorelease(v10);
    v12 = objc_msgSend(v11, "code");
  }

  return v12;
}

void sub_1A3E6096C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<long long>::unordered_set(uint64_t a1, uint64_t a2)
{
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(a1, i + 2, i + 2);
  return a1;
}

void sub_1A3E609F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__emplace_unique_key_args<long long,std::pair<long long,int>>(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v6;
  v12 = *(int *)(a3 + 8);
  i[2] = *(_QWORD *)a3;
  i[3] = v12;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__rehash<true>(a1, v18);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v20)
  {
    *i = *v20;
LABEL_38:
    *v20 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v19 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v21 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7)
        v21 %= v7;
    }
    else
    {
      v21 &= v7 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1A3E60C10(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<0,0,std::tuple<void({block_pointer} {__strong})(long long,long long,long long,long long)>>(void *a1, sqlite3_stmt *a2, uint64_t a3, void **a4)
{
  id v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v7 = a1;
  while (1)
  {
    v8 = sqlite3_step(a2);
    if ((_DWORD)v8 != 100)
      break;
    SafariShared::WBSSQLiteEnumerationBlock<void,long long,long long,long long,long long>::callBlockWithAllColumns((uint64_t)&v11, a2, *a4);
  }
  if ((_DWORD)v8 == 101)
  {
    v9 = 1;
  }
  else
  {
    objc_msgSend(v7, "reportErrorWithCode:statement:error:", v8, a2, a3);
    v9 = 0;
  }

  return v9;
}

void sub_1A3E60CB4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void SafariShared::WBSSQLiteEnumerationBlock<void,long long,long long,long long,long long>::callBlockWithAllColumns(uint64_t a1, sqlite3_stmt *a2, void *a3)
{
  sqlite3_int64 v4;
  sqlite3_int64 v5;
  sqlite3_int64 v6;
  sqlite3_int64 v7;
  void (**v8)(id, sqlite3_int64, sqlite3_int64, sqlite3_int64, sqlite3_int64);

  v8 = a3;
  v4 = sqlite3_column_int64(a2, 0);
  v5 = sqlite3_column_int64(a2, 1);
  v6 = sqlite3_column_int64(a2, 2);
  v7 = sqlite3_column_int64(a2, 3);
  v8[2](v8, v4, v5, v6, v7);

}

void sub_1A3E60D64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<0,1,std::tuple<double &,void({block_pointer} {__strong})(long long)>>(void *a1, sqlite3_stmt *a2, uint64_t a3, double **a4)
{
  id v7;
  uint64_t v8;

  v7 = a1;
  if (sqlite3_bind_double(a2, 1, **a4))
  {
    objc_msgSend(v7, "reportErrorWithCode:statement:error:", 1, a2, a3);
    v8 = 0;
  }
  else
  {
    v8 = SafariShared::_WBSSQLiteStatementBindOrStep<1,1,std::tuple<double &,void({block_pointer} {__strong})(long long)>>(v7, a2, a3, (uint64_t)a4);
  }

  return v8;
}

void sub_1A3E60E08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<1,1,std::tuple<double &,void({block_pointer} {__strong})(long long)>>(void *a1, sqlite3_stmt *a2, uint64_t a3, uint64_t a4)
{
  id v7;
  uint64_t v8;
  uint64_t v9;

  v7 = a1;
  while (1)
  {
    v8 = sqlite3_step(a2);
    if ((_DWORD)v8 != 100)
      break;
    if ((SafariShared::_WBSStatementCallBlockWithAllColumns<void,long long>(a2, *(void **)(a4 + 8)) & 1) == 0)
      goto LABEL_8;
  }
  if ((_DWORD)v8 == 101)
  {
    v9 = 1;
    goto LABEL_9;
  }
  objc_msgSend(v7, "reportErrorWithCode:statement:error:", v8, a2, a3);
LABEL_8:
  v9 = 0;
LABEL_9:

  return v9;
}

void sub_1A3E60EA4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<0,0,std::tuple<void({block_pointer} {__strong})(NSString *)>>(void *a1, sqlite3_stmt *a2, uint64_t a3, void **a4)
{
  id v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v7 = a1;
  while (1)
  {
    v8 = sqlite3_step(a2);
    if ((_DWORD)v8 != 100)
      break;
    SafariShared::WBSSQLiteEnumerationBlock<void,NSString * {__strong}>::callBlockWithAllColumns((uint64_t)&v11, a2, *a4);
  }
  if ((_DWORD)v8 == 101)
  {
    v9 = 1;
  }
  else
  {
    objc_msgSend(v7, "reportErrorWithCode:statement:error:", v8, a2, a3);
    v9 = 0;
  }

  return v9;
}

void sub_1A3E60F48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void SafariShared::WBSSQLiteEnumerationBlock<void,NSString * {__strong}>::callBlockWithAllColumns(uint64_t a1, sqlite3_stmt *a2, void *a3)
{
  void *v4;
  void (**v5)(id, void *);

  v5 = a3;
  SafariShared::WBSSQLiteDatatypeTraits<NSString * {__strong}>::fetch(a2, 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5[2](v5, v4);

}

void sub_1A3E60FC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<0,2,std::tuple<NSDate * const {__strong}&,NSDate * const {__strong},void({block_pointer} {__strong})(NSString *)>>(void *a1, sqlite3_stmt *a2, uint64_t a3, id **a4)
{
  id v7;
  id v8;
  void *v9;
  double v10;
  int v11;
  int v12;
  uint64_t v13;

  v7 = a1;
  v8 = **a4;
  v9 = v8;
  if (v8)
  {
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
    v11 = sqlite3_bind_double(a2, 1, v10);
  }
  else
  {
    v11 = sqlite3_bind_null(a2, 1);
  }
  v12 = v11;

  if (v12)
  {
    objc_msgSend(v7, "reportErrorWithCode:statement:error:", 1, a2, a3);
    v13 = 0;
  }
  else
  {
    v13 = SafariShared::_WBSSQLiteStatementBindOrStep<1,2,std::tuple<NSDate * const {__strong}&,NSDate * const {__strong},void({block_pointer} {__strong})(NSString *)>>(v7, a2, a3, (uint64_t)a4);
  }

  return v13;
}

void sub_1A3E610A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<1,2,std::tuple<NSDate * const {__strong}&,NSDate * const {__strong},void({block_pointer} {__strong})(NSString *)>>(void *a1, sqlite3_stmt *a2, uint64_t a3, uint64_t a4)
{
  id v7;
  id v8;
  void *v9;
  double v10;
  int v11;
  int v12;
  uint64_t v13;

  v7 = a1;
  v8 = **(id **)(a4 + 8);
  v9 = v8;
  if (v8)
  {
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
    v11 = sqlite3_bind_double(a2, 2, v10);
  }
  else
  {
    v11 = sqlite3_bind_null(a2, 2);
  }
  v12 = v11;

  if (v12)
  {
    objc_msgSend(v7, "reportErrorWithCode:statement:error:", 1, a2, a3);
    v13 = 0;
  }
  else
  {
    v13 = SafariShared::_WBSSQLiteStatementBindOrStep<2,2,std::tuple<NSDate * const {__strong}&,NSDate * const {__strong},void({block_pointer} {__strong})(NSString *)>>(v7, a2, a3, a4);
  }

  return v13;
}

void sub_1A3E61180(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<2,2,std::tuple<NSDate * const {__strong}&,NSDate * const {__strong},void({block_pointer} {__strong})(NSString *)>>(void *a1, sqlite3_stmt *a2, uint64_t a3, uint64_t a4)
{
  id v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v7 = a1;
  while (1)
  {
    v8 = sqlite3_step(a2);
    if ((_DWORD)v8 != 100)
      break;
    SafariShared::WBSSQLiteEnumerationBlock<void,NSString * {__strong}>::callBlockWithAllColumns((uint64_t)&v11, a2, *(void **)(a4 + 16));
  }
  if ((_DWORD)v8 == 101)
  {
    v9 = 1;
  }
  else
  {
    objc_msgSend(v7, "reportErrorWithCode:statement:error:", v8, a2, a3);
    v9 = 0;
  }

  return v9;
}

void sub_1A3E61230(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<0,1,std::tuple<NSDate * const {__strong}&,std::tuple<long long &>>>(void *a1, sqlite3_stmt *a2, uint64_t a3, id **a4)
{
  id v7;
  id v8;
  void *v9;
  double v10;
  int v11;
  int v12;
  uint64_t v13;

  v7 = a1;
  v8 = **a4;
  v9 = v8;
  if (v8)
  {
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
    v11 = sqlite3_bind_double(a2, 1, v10);
  }
  else
  {
    v11 = sqlite3_bind_null(a2, 1);
  }
  v12 = v11;

  if (v12)
  {
    objc_msgSend(v7, "reportErrorWithCode:statement:error:", 1, a2, a3);
    v13 = 0;
  }
  else
  {
    v13 = SafariShared::_WBSSQLiteStatementBindOrStep<1,1,std::tuple<NSDate * const {__strong}&,std::tuple<long long &>>>(v7, a2, a3, (uint64_t)a4);
  }

  return v13;
}

void sub_1A3E61300(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<1,1,std::tuple<NSDate * const {__strong}&,std::tuple<long long &>>>(void *a1, sqlite3_stmt *a2, uint64_t a3, uint64_t a4)
{
  id v7;
  uint64_t v8;
  uint64_t v9;

  v7 = a1;
  v8 = sqlite3_step(a2);
  if ((_DWORD)v8 == 100
    && (**(_QWORD **)(a4 + 8) = sqlite3_column_int64(a2, 0), v8 = sqlite3_step(a2), (_DWORD)v8 == 101))
  {
    v9 = 1;
  }
  else
  {
    objc_msgSend(v7, "reportErrorWithCode:statement:error:", v8, a2, a3);
    v9 = 0;
  }

  return v9;
}

void sub_1A3E613B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<NSString * {__strong}&,long long const&>(void *a1, _QWORD *a2, void *a3, _QWORD *a4, _QWORD *a5)
{
  id v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  id v17;

  v9 = a1;
  v10 = a3;
  v17 = 0;
  v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89CC8]), "initWithDatabase:query:error:", v9, v10, &v17);
  v12 = v17;
  v13 = v12;
  if (v11)
  {
    SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * {__strong}&,long long const&>(v11, a4, a5);
    v14 = objc_msgSend(v11, "execute");
    objc_msgSend(v11, "invalidate");
    if ((v14 - 100) >= 2 && (_DWORD)v14 != 0)
      objc_msgSend(v9, "reportErrorWithCode:statement:error:", v14, objc_msgSend(v11, "handle"), a2);
  }
  else
  {
    if (a2)
      *a2 = objc_retainAutorelease(v12);
    v14 = objc_msgSend(v13, "code");
  }

  return v14;
}

void sub_1A3E614D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * {__strong}&,long long const&>(void *a1, _QWORD *a2, _QWORD *a3)
{
  id v5;

  v5 = a1;
  objc_msgSend(v5, "bindString:atParameterIndex:", *a2, 1);
  objc_msgSend(v5, "bindInt64:atParameterIndex:", *a3, 2);

}

void sub_1A3E6154C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * {__strong},double,NSString * {__strong},NSData * {__strong}&>(void *a1, _QWORD *a2, double *a3, _QWORD *a4, _QWORD *a5)
{
  id v9;

  v9 = a1;
  objc_msgSend(v9, "bindString:atParameterIndex:", *a2, 1);
  SafariShared::_WBSSQLiteStatementBindAllParameters<2,double,NSString * {__strong},NSData * {__strong}&>(v9, a3, a4, a5);

}

void sub_1A3E615C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<2,double,NSString * {__strong},NSData * {__strong}&>(void *a1, double *a2, _QWORD *a3, _QWORD *a4)
{
  id v7;

  v7 = a1;
  objc_msgSend(v7, "bindDouble:atParameterIndex:", 2, *a2);
  SafariShared::_WBSSQLiteStatementBindAllParameters<3,NSString * {__strong},NSData * {__strong}&>(v7, a3, a4);

}

void sub_1A3E61634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<3,NSString * {__strong},NSData * {__strong}&>(void *a1, _QWORD *a2, _QWORD *a3)
{
  id v5;

  v5 = a1;
  objc_msgSend(v5, "bindString:atParameterIndex:", *a2, 3);
  objc_msgSend(v5, "bindData:atParameterIndex:", *a3, 4);

}

void sub_1A3E61698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<0,2,std::tuple<NSString * {__strong},double,std::tuple<long long &>>>(void *a1, sqlite3_stmt *a2, uint64_t a3, id *a4)
{
  id v7;
  id v8;
  void *v9;
  int v10;
  int v11;
  uint64_t v12;

  v7 = a1;
  v8 = *a4;
  v9 = v8;
  if (v8)
    v10 = sqlite3_bind_text(a2, 1, (const char *)objc_msgSend(objc_retainAutorelease(v8), "UTF8String"), -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  else
    v10 = sqlite3_bind_null(a2, 1);
  v11 = v10;

  if (v11)
  {
    objc_msgSend(v7, "reportErrorWithCode:statement:error:", 1, a2, a3);
    v12 = 0;
  }
  else
  {
    v12 = SafariShared::_WBSSQLiteStatementBindOrStep<1,2,std::tuple<NSString * {__strong},double,std::tuple<long long &>>>(v7, a2, a3, (uint64_t)a4);
  }

  return v12;
}

void sub_1A3E61774(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<1,2,std::tuple<NSString * {__strong},double,std::tuple<long long &>>>(void *a1, sqlite3_stmt *a2, uint64_t a3, uint64_t a4)
{
  id v7;
  uint64_t v8;

  v7 = a1;
  if (sqlite3_bind_double(a2, 2, *(double *)(a4 + 8)))
  {
    objc_msgSend(v7, "reportErrorWithCode:statement:error:", 1, a2, a3);
    v8 = 0;
  }
  else
  {
    v8 = SafariShared::_WBSSQLiteStatementBindOrStep<2,2,std::tuple<NSString * {__strong},double,std::tuple<long long &>>>(v7, a2, a3, a4);
  }

  return v8;
}

void sub_1A3E61818(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<2,2,std::tuple<NSString * {__strong},double,std::tuple<long long &>>>(void *a1, sqlite3_stmt *a2, uint64_t a3, uint64_t a4)
{
  id v7;
  uint64_t v8;
  uint64_t v9;

  v7 = a1;
  v8 = sqlite3_step(a2);
  if ((_DWORD)v8 == 100
    && (**(_QWORD **)(a4 + 16) = sqlite3_column_int64(a2, 0), v8 = sqlite3_step(a2), (_DWORD)v8 == 101))
  {
    v9 = 1;
  }
  else
  {
    objc_msgSend(v7, "reportErrorWithCode:statement:error:", v8, a2, a3);
    v9 = 0;
  }

  return v9;
}

void sub_1A3E618C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<0,3,std::tuple<long long &,int,double const&,void({block_pointer} {__strong})(NSString *,double,NSString *,int,int,NSString *,double,NSString *,double)>>(void *a1, sqlite3_stmt *a2, uint64_t a3, sqlite3_int64 **a4)
{
  id v7;
  uint64_t v8;

  v7 = a1;
  if (sqlite3_bind_int64(a2, 1, **a4))
  {
    objc_msgSend(v7, "reportErrorWithCode:statement:error:", 1, a2, a3);
    v8 = 0;
  }
  else
  {
    v8 = SafariShared::_WBSSQLiteStatementBindOrStep<1,3,std::tuple<long long &,int,double const&,void({block_pointer} {__strong})(NSString *,double,NSString *,int,int,NSString *,double,NSString *,double)>>(v7, a2, a3, (uint64_t)a4);
  }

  return v8;
}

void sub_1A3E61958(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<1,3,std::tuple<long long &,int,double const&,void({block_pointer} {__strong})(NSString *,double,NSString *,int,int,NSString *,double,NSString *,double)>>(void *a1, sqlite3_stmt *a2, uint64_t a3, uint64_t a4)
{
  id v7;
  uint64_t v8;

  v7 = a1;
  if (sqlite3_bind_int(a2, 2, *(_DWORD *)(a4 + 8)))
  {
    objc_msgSend(v7, "reportErrorWithCode:statement:error:", 1, a2, a3);
    v8 = 0;
  }
  else
  {
    v8 = SafariShared::_WBSSQLiteStatementBindOrStep<2,3,std::tuple<long long &,int,double const&,void({block_pointer} {__strong})(NSString *,double,NSString *,int,int,NSString *,double,NSString *,double)>>(v7, a2, a3, a4);
  }

  return v8;
}

void sub_1A3E619F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<2,3,std::tuple<long long &,int,double const&,void({block_pointer} {__strong})(NSString *,double,NSString *,int,int,NSString *,double,NSString *,double)>>(void *a1, sqlite3_stmt *a2, uint64_t a3, uint64_t a4)
{
  id v7;
  uint64_t v8;

  v7 = a1;
  if (sqlite3_bind_double(a2, 3, **(double **)(a4 + 16)))
  {
    objc_msgSend(v7, "reportErrorWithCode:statement:error:", 1, a2, a3);
    v8 = 0;
  }
  else
  {
    v8 = SafariShared::_WBSSQLiteStatementBindOrStep<3,3,std::tuple<long long &,int,double const&,void({block_pointer} {__strong})(NSString *,double,NSString *,int,int,NSString *,double,NSString *,double)>>(v7, a2, a3, a4);
  }

  return v8;
}

void sub_1A3E61A8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<3,3,std::tuple<long long &,int,double const&,void({block_pointer} {__strong})(NSString *,double,NSString *,int,int,NSString *,double,NSString *,double)>>(void *a1, sqlite3_stmt *a2, uint64_t a3, uint64_t a4)
{
  id v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v7 = a1;
  while (1)
  {
    v8 = sqlite3_step(a2);
    if ((_DWORD)v8 != 100)
      break;
    SafariShared::WBSSQLiteEnumerationBlock<void,NSString * {__strong},double,NSString * {__strong},int,int,NSString * {__strong},double,NSString * {__strong},double>::_callBlockWithAllColumns<0,1,2,3,4,5,6,7,8>((uint64_t)&v11, a2, *(void **)(a4 + 24));
  }
  if ((_DWORD)v8 == 101)
  {
    v9 = 1;
  }
  else
  {
    objc_msgSend(v7, "reportErrorWithCode:statement:error:", v8, a2, a3);
    v9 = 0;
  }

  return v9;
}

void sub_1A3E61B30(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void SafariShared::WBSSQLiteEnumerationBlock<void,NSString * {__strong},double,NSString * {__strong},int,int,NSString * {__strong},double,NSString * {__strong},double>::_callBlockWithAllColumns<0,1,2,3,4,5,6,7,8>(uint64_t a1, sqlite3_stmt *a2, void *a3)
{
  void *v4;
  double v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  double v10;
  void *v11;
  double v12;
  void (**v13)(id, void *, void *, uint64_t, uint64_t, void *, void *, double, double, double);

  v13 = a3;
  SafariShared::WBSSQLiteDatatypeTraits<NSString * {__strong}>::fetch(a2, 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = sqlite3_column_double(a2, 1);
  SafariShared::WBSSQLiteDatatypeTraits<NSString * {__strong}>::fetch(a2, 2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = sqlite3_column_int(a2, 3);
  v8 = sqlite3_column_int(a2, 4);
  SafariShared::WBSSQLiteDatatypeTraits<NSString * {__strong}>::fetch(a2, 5);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = sqlite3_column_double(a2, 6);
  SafariShared::WBSSQLiteDatatypeTraits<NSString * {__strong}>::fetch(a2, 7);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = sqlite3_column_double(a2, 8);
  v13[2](v13, v4, v6, v7, v8, v9, v11, v5, v10, v12);

}

void sub_1A3E61C70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_5_1(void *a1@<X0>, const char *a2@<X3>, uint8_t *a3@<X4>, NSObject *a4@<X8>)
{
  _os_log_error_impl(a1, a4, OS_LOG_TYPE_ERROR, a2, a3, 0x1Cu);
}

void OUTLINED_FUNCTION_8_1(void *a1, int a2, os_log_t log, const char *a4, uint8_t *a5)
{
  _os_log_fault_impl(a1, log, OS_LOG_TYPE_FAULT, a4, a5, 0xCu);
}

void OUTLINED_FUNCTION_10(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x16u);
}

uint64_t OUTLINED_FUNCTION_12_0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  *(_QWORD *)(result + 4) = a2;
  *(_WORD *)(result + 12) = 2048;
  *(double *)(result + 14) = a3;
  return result;
}

double OUTLINED_FUNCTION_19(double a1)
{
  return -a1;
}

void sub_1A3E63C10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3E63D0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E63E10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E63EC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *SafariShared::HistoryObjectStreamWriter::ensureCapacity(_QWORD *this, size_t a2)
{
  _QWORD *v3;

  if (this[1] < a2)
  {
    v3 = this;
    free((void *)*this);
    this = malloc_type_malloc(a2, 0x1EE899C4uLL);
    *v3 = this;
    v3[1] = a2;
  }
  return this;
}

BOOL SafariShared::HistoryObjectStreamWriter::write(SafariShared::HistoryObjectStreamWriter *this, const _HistoryStreamedItem *a2)
{
  unint64_t v4;
  char *var6;
  int *var7;
  unint64_t var10;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  unint64_t v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  unint64_t v17;
  __int128 v18;
  __int128 v19;

  v4 = a2->var8 + 88;
  var6 = a2->var6;
  var7 = a2->var7;
  if (!var7)
    v4 = 88;
  var10 = a2->var10;
  if (!a2->var9)
    var10 = 0;
  v8 = var10 + v4;
  if (a2->var9)
    v9 = v4;
  else
    v9 = 0;
  if (var6)
  {
    v10 = strlen(var6) + 1;
    v11 = v10 + v8;
  }
  else
  {
    v10 = 0;
    v11 = var10 + v4;
    v8 = 0;
  }
  v12 = (v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (v11 > 0x10000)
    v13 = 88;
  else
    v13 = (v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  SafariShared::HistoryObjectStreamWriter::ensureCapacity(this, v13);
  if (var7)
    v14 = 88;
  else
    v14 = 0;
  v15 = *(_QWORD *)this;
  v16 = *(_OWORD *)&a2->var2;
  *(_OWORD *)v15 = *(_OWORD *)&a2->var0.var0;
  v17 = a2->var10;
  v18 = *(_OWORD *)&a2->var8;
  v19 = *(_OWORD *)&a2->var4;
  *(_OWORD *)(v15 + 48) = *(_OWORD *)&a2->var6;
  *(_OWORD *)(v15 + 64) = v18;
  *(_OWORD *)(v15 + 16) = v16;
  *(_OWORD *)(v15 + 32) = v19;
  *(_DWORD *)(v15 + 4) = v12;
  *(_QWORD *)(v15 + 48) = v8;
  *(_QWORD *)(v15 + 56) = v14;
  *(_QWORD *)(v15 + 72) = v9;
  *(_QWORD *)(v15 + 80) = v17;
  if (v11 <= 0x10000)
  {
    if (v8)
      memcpy((void *)(*(_QWORD *)this + v8), a2->var6, v10);
    if (var7)
      memcpy((void *)(*(_QWORD *)this + 88), a2->var7, a2->var8);
    if (v9)
      memcpy((void *)(*(_QWORD *)this + v9), a2->var9, a2->var10);
    return WBSWriteExactAmountOfBytesToFileDescriptor() > 0;
  }
  if (WBSWriteExactAmountOfBytesToFileDescriptor() < 0
    || WBSWriteExactAmountOfBytesToFileDescriptor() < 0
    || WBSWriteExactAmountOfBytesToFileDescriptor() < 0
    || WBSWriteExactAmountOfBytesToFileDescriptor() < 0)
  {
    return 0;
  }
  if (v12 != v11)
    return WBSWriteExactAmountOfBytesToFileDescriptor() > 0;
  return 1;
}

BOOL SafariShared::HistoryObjectStreamWriter::write(SafariShared::HistoryObjectStreamWriter *this, const _HistoryStreamedVisit *a2)
{
  char *var13;
  size_t v5;
  size_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  var13 = a2->var13;
  if (var13)
  {
    v5 = strlen(a2->var13);
    v6 = v5 + 1;
    v7 = (v5 & 0xFFFFFFFFFFFFFFF8) + 96;
    v8 = 88;
  }
  else
  {
    v8 = 0;
    v6 = 0;
    v7 = 88;
  }
  SafariShared::HistoryObjectStreamWriter::ensureCapacity(this, v7);
  v9 = *(_QWORD *)this;
  *(_OWORD *)v9 = *(_OWORD *)&a2->var0.var0;
  v10 = *(_OWORD *)&a2->var2;
  v11 = *(_OWORD *)&a2->var4;
  v12 = *(_OWORD *)&a2->var11;
  *(_OWORD *)(v9 + 48) = *(_OWORD *)&a2->var9;
  *(_OWORD *)(v9 + 64) = v12;
  *(_OWORD *)(v9 + 16) = v10;
  *(_OWORD *)(v9 + 32) = v11;
  *(_DWORD *)(v9 + 4) = v7;
  *(_QWORD *)(v9 + 80) = v8;
  if (var13)
    memcpy((void *)(*(_QWORD *)this + v8), a2->var13, v6);
  return WBSWriteExactAmountOfBytesToFileDescriptor() > 0;
}

BOOL SafariShared::HistoryObjectStreamWriter::write(uint64_t *a1, __int128 *a2)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  size_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;

  v4 = *((_QWORD *)a2 + 4);
  if (v4)
  {
    v5 = strlen(*((const char **)a2 + 4));
    v6 = v5 + 1;
    v7 = v5 + 57;
    v8 = 56;
  }
  else
  {
    v8 = 0;
    v6 = 0;
    v7 = 56;
  }
  v9 = (const char *)*((_QWORD *)a2 + 5);
  if (v9)
  {
    v10 = strlen(v9) + 1;
    v11 = v7;
    v7 += v10;
  }
  else
  {
    v11 = 0;
    v10 = 0;
  }
  v12 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  SafariShared::HistoryObjectStreamWriter::ensureCapacity(a1, v12);
  v13 = *a1;
  v14 = *((_QWORD *)a2 + 6);
  v15 = a2[2];
  v16 = *a2;
  *(_OWORD *)(v13 + 16) = a2[1];
  *(_OWORD *)(v13 + 32) = v15;
  *(_QWORD *)(v13 + 40) = v11;
  *(_QWORD *)(v13 + 48) = v14;
  *(_OWORD *)v13 = v16;
  *(_DWORD *)(v13 + 4) = v12;
  *(_QWORD *)(v13 + 32) = v8;
  if (v4)
    memcpy((void *)(*a1 + v8), *((const void **)a2 + 4), v6);
  if (v11)
    memcpy((void *)(*a1 + v11), *((const void **)a2 + 5), v10);
  return WBSWriteExactAmountOfBytesToFileDescriptor() > 0;
}

BOOL SafariShared::HistoryObjectStreamWriter::write(uint64_t *a1, _OWORD *a2)
{
  uint64_t v4;
  __int128 v5;

  SafariShared::HistoryObjectStreamWriter::ensureCapacity(a1, 0x20uLL);
  v4 = *a1;
  v5 = a2[1];
  *(_OWORD *)v4 = *a2;
  *(_OWORD *)(v4 + 16) = v5;
  *(_DWORD *)(v4 + 4) = 32;
  return WBSWriteExactAmountOfBytesToFileDescriptor() > 0;
}

BOOL SafariShared::HistoryObjectStreamWriter::write(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    v5 = strlen(*(const char **)(a2 + 8));
    v6 = v5 + 1;
    v7 = (v5 & 0xFFFFFFFFFFFFFFF8) + 32;
    v8 = 24;
  }
  else
  {
    v8 = 0;
    v6 = 0;
    v7 = 24;
  }
  SafariShared::HistoryObjectStreamWriter::ensureCapacity(a1, v7);
  v9 = *a1;
  v10 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)v9 = *(_OWORD *)a2;
  *(_DWORD *)(v9 + 4) = v7;
  *(_QWORD *)(v9 + 8) = v8;
  *(_QWORD *)(v9 + 16) = v10;
  if (v4)
    memcpy((void *)(*a1 + v8), *(const void **)(a2 + 8), v6);
  return WBSWriteExactAmountOfBytesToFileDescriptor() > 0;
}

BOOL SafariShared::HistoryObjectStreamWriter::write(SafariShared::HistoryObjectStreamWriter *this, const _HistoryStreamedMatchEntry *a2)
{
  char *var1;
  size_t v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  char *var2;
  size_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  int64_t var4;
  __int128 v15;

  var1 = a2->var1;
  if (var1)
  {
    v5 = strlen(a2->var1);
    v6 = v5 + 1;
    v7 = v5 + 41;
    v8 = 40;
  }
  else
  {
    v8 = 0;
    v6 = 0;
    v7 = 40;
  }
  var2 = a2->var2;
  if (var2)
  {
    v10 = strlen(var2) + 1;
    v11 = v7;
    v7 += v10;
  }
  else
  {
    v11 = 0;
    v10 = 0;
  }
  v12 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  SafariShared::HistoryObjectStreamWriter::ensureCapacity(this, v12);
  v13 = *(_QWORD *)this;
  var4 = a2->var4;
  v15 = *(_OWORD *)&a2->var2;
  *(_OWORD *)v13 = *(_OWORD *)&a2->var0.var0;
  *(_OWORD *)(v13 + 16) = v15;
  *(_QWORD *)(v13 + 32) = var4;
  *(_DWORD *)(v13 + 4) = v12;
  *(_QWORD *)(v13 + 8) = v8;
  *(_QWORD *)(v13 + 16) = v11;
  if (var1)
    memcpy((void *)(*(_QWORD *)this + v8), a2->var1, v6);
  if (v11)
    memcpy((void *)(*(_QWORD *)this + v11), a2->var2, v10);
  return WBSWriteExactAmountOfBytesToFileDescriptor() > 0;
}

BOOL SafariShared::HistoryObjectStreamWriter::write(SafariShared::HistoryObjectStreamWriter *this, const _HistoryStreamedMatchData *a2)
{
  size_t var3;
  void *var2;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;

  var2 = a2->var2;
  var3 = a2->var3;
  if (var2)
    v6 = (var3 + 63) & 0xFFFFFFFFFFFFFFF8;
  else
    v6 = 56;
  if (var2)
    v7 = 56;
  else
    v7 = 0;
  SafariShared::HistoryObjectStreamWriter::ensureCapacity(this, v6);
  v8 = *(_QWORD *)this;
  v9 = *(_QWORD *)&a2->var6;
  v11 = *(_OWORD *)&a2->var2;
  v10 = *(_OWORD *)&a2->var4;
  *(_OWORD *)v8 = *(_OWORD *)&a2->var0.var0;
  *(_OWORD *)(v8 + 16) = v11;
  *(_OWORD *)(v8 + 32) = v10;
  *(_QWORD *)(v8 + 48) = v9;
  *(_DWORD *)(v8 + 4) = v6;
  *(_QWORD *)(v8 + 16) = v7;
  if (var2)
    memcpy((void *)(*(_QWORD *)this + 56), a2->var2, var3);
  return WBSWriteExactAmountOfBytesToFileDescriptor() > 0;
}

void SafariShared::ReadStreamedMatches(uint64_t a1, void *a2, void *a3)
{
  void (**v4)(id, _QWORD *);
  void (**v5)(id, _QWORD *);
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  size_t __sz;

  v4 = a2;
  v5 = a3;
  while (WBSReadExactAmountOfBytesFromFileDescriptor() >= 1)
  {
    v6 = operator new(HIDWORD(__sz));
    *v6 = __sz;
    v7 = v6 + 1;
    if (WBSReadExactAmountOfBytesFromFileDescriptor() <= 0)
    {
      operator delete(v6);
      break;
    }
    v8 = *(_DWORD *)v6;
    if (*(_DWORD *)v6 <= 8u)
    {
      if (((1 << v8) & 0x18E) != 0)
      {
        operator delete(v6);
      }
      else if (v8 == 5)
      {
        v11 = v6[2];
        if (v11)
          v6[2] = (char *)v6 + v11;
        if (*v7)
          v6[1] = (char *)v6 + *v7;
        v13 = v6;
        ((void (**)(id, _QWORD **))v5)[2](v5, &v13);
        v12 = v13;
        v13 = 0;
        if (v12)
          MEMORY[0x1A85998AC](v12, 0x1050C40224969E2);
      }
      else if (v8 == 6)
      {
        v9 = v6[2];
        if (v9)
          v6[2] = (char *)v6 + v9;
        v13 = v6;
        ((void (**)(id, _QWORD **))v4)[2](v4, &v13);
        v10 = v13;
        v13 = 0;
        if (v10)
          MEMORY[0x1A85998AC](v10, 0x10C0C40CCADEA1DLL);
      }
    }
  }

}

void sub_1A3E64A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;

  if (a9)
    MEMORY[0x1A85998AC]();

  _Unwind_Resume(a1);
}

void sub_1A3E64C18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__21(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__hash_table(a1 + 48, (uint64_t *)(a2 + 48));
}

uint64_t __Block_byref_object_dispose__22(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>>>::~__hash_table(a1 + 48);
}

void sub_1A3E64D50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E64EF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E64FC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3E65088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__51(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = MEMORY[0x1A8599ED0](*(_QWORD *)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __Block_byref_object_dispose__52(uint64_t a1)
{

}

void sub_1A3E6524C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3E65368(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E655A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29)
{
  void *v29;

  _Unwind_Resume(a1);
}

void sub_1A3E656F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E658A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E65A2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  void *v28;
  void *v29;

  _Block_object_dispose(&a17, 8);
  _Block_object_dispose(&a23, 8);

  _Unwind_Resume(a1);
}

void sub_1A3E65BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1A3E65CB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3E65DB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E65E10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E65E60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3E6615C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E662CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E6639C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E664C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_1A3E66728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_1A3E66854(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E669C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1A3E66A80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A3E66B38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E66C4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1A3E66D38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E66E10(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  MEMORY[0x1A85998AC](v2, 0x1080C40D2F62047);

  _Unwind_Resume(a1);
}

void sub_1A3E66F08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  va_list va;

  va_start(va, a2);

  std::unique_ptr<SafariShared::SuddenTerminationDisabler>::reset[abi:sn180100]((id **)va, 0);
  _Unwind_Resume(a1);
}

void sub_1A3E66FD0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E670F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1A3E671B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E67468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,void *a22)
{
  void *v22;
  void *v23;
  void *v24;

  v24 = v22;

  _Unwind_Resume(a1);
}

void sub_1A3E675E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E676FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E677C0(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  MEMORY[0x1A85998AC](v2, 0x1080C40D2F62047);

  _Unwind_Resume(a1);
}

void sub_1A3E67914(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E679C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E67A3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3E67AE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E67BB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A3E67C6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E67D58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1A3E67FA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3E68094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1A3E68208(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E68324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1A3E68470(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A3E68520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1A3E686E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1A3E68838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1A3E68940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1A3E68A84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1A3E68C2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A3E68DE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, uint64_t a19, void *a20)
{
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void sub_1A3E69048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A3E691D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1A3E69380(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1A3E694A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E6971C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  _Block_object_dispose(&a29, 8);
  std::__hash_table<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>>>::~__hash_table(v29);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__91(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__hash_table(a1 + 48, (uint64_t *)(a2 + 48));
}

uint64_t __Block_byref_object_dispose__92(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>>>::~__hash_table(a1 + 48);
}

void sub_1A3E69808(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E69944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_1A3E69A4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E69AD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3E69BC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1A3E69CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1A3E69E24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E69ED4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E69F5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E6A178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3E6A654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, void *a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

void sub_1A3E6A8A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  void *v22;

  _Unwind_Resume(a1);
}

void sub_1A3E6A984(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_1A3E6AA34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A3E6AA94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3E6B238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1A3E6B4CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1A3E6B780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id a32)
{
  void *v32;
  void *v33;
  void *v34;
  void *v35;

  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_1A3E6B934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20)
{
  void *v20;

  _Unwind_Resume(a1);
}

void sub_1A3E6B9E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E6BA54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3E6BB10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E6BC08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3E6BCDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1A3E6BD8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

_QWORD *SafariShared::URLCompletionEntryKey::URLCompletionEntryKey(_QWORD *this)
{
  *this = 0;
  this[1] = 0;
  return this;
}

{
  *this = 0;
  this[1] = 0;
  return this;
}

SafariShared::URLCompletionEntryKey *SafariShared::URLCompletionEntryKey::URLCompletionEntryKey(SafariShared::URLCompletionEntryKey *this, NSString *a2)
{
  NSString *v3;

  v3 = a2;
  *(_QWORD *)this = v3;
  *((_QWORD *)this + 1) = CFHash(v3);

  return this;
}

void sub_1A3E6BEE4(_Unwind_Exception *a1)
{
  id *v1;
  void *v2;

  _Unwind_Resume(a1);
}

CFTypeRef *SafariShared::URLCompletionEntryKey::URLCompletionEntryKey(CFTypeRef *this, const UInt8 *a2, CFIndex a3)
{
  CFStringRef v4;
  void *v5;
  CFHashCode v6;

  *this = 0;
  if (a2)
  {
    v4 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, a3, 0x8000100u, 0);
    v5 = (void *)*this;
    *this = v4;

    v6 = CFHash(*this);
  }
  else
  {
    v6 = 0;
  }
  this[1] = (CFTypeRef)v6;
  return this;
}

void sub_1A3E6BF64(_Unwind_Exception *a1)
{
  id *v1;

  _Unwind_Resume(a1);
}

double SafariShared::URLCompletionEntry::URLCompletionEntry(SafariShared::URLCompletionEntry *this)
{
  double result;

  *((_QWORD *)this + 6) = 0;
  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  return result;
}

{
  double result;

  *((_QWORD *)this + 6) = 0;
  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  return result;
}

SafariShared::URLCompletionEntry *SafariShared::URLCompletionEntry::URLCompletionEntry(SafariShared::URLCompletionEntry *this, NSString *a2, NSString *a3, double a4, uint64_t a5)
{
  NSString *v9;
  NSString *v10;
  NSString *v11;
  NSString *v12;
  NSString *v13;
  void *v14;
  uint64_t v15;
  void *v16;

  v9 = a2;
  v10 = a3;
  SafariShared::URLCompletionEntryKey::URLCompletionEntryKey(this, v9);
  *((_QWORD *)this + 2) = 0;
  v12 = v10;
  *((_QWORD *)this + 3) = v12;
  *((_QWORD *)this + 4) = 0;
  *((double *)this + 5) = a4;
  *((_QWORD *)this + 6) = a5;
  if (v9)
  {
    if ((WTF::isUserVisibleURL((WTF *)v9, v11) & 1) != 0)
    {
      v13 = v9;
      v14 = (void *)*((_QWORD *)this + 2);
      *((_QWORD *)this + 2) = v13;
    }
    else
    {
      -[NSString safari_userVisibleURL](v9, "safari_userVisibleURL");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "safari_stringByFoldingWideCharactersAndNormalizing");
      v15 = objc_claimAutoreleasedReturnValue();
      v16 = (void *)*((_QWORD *)this + 2);
      *((_QWORD *)this + 2) = v15;

    }
  }

  return this;
}

void sub_1A3E6C06C(_Unwind_Exception *a1)
{
  void *v1;
  id *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

CFTypeRef *SafariShared::URLCompletionEntry::URLCompletionEntry(CFTypeRef *this, const UInt8 *a2, CFIndex a3, const UInt8 *a4, CFIndex a5, double a6, const void *a7)
{
  CFTypeRef *v12;
  NSString *v13;
  void **v14;
  WTF *v15;
  char isUserVisibleURL;
  void *v17;
  id v18;
  void *v19;
  uint64_t v20;
  void *v21;
  CFStringRef v22;
  void *v23;

  v12 = SafariShared::URLCompletionEntryKey::URLCompletionEntryKey(this, a2, a3);
  v12[2] = 0;
  v14 = (void **)(v12 + 2);
  v12[3] = 0;
  v12[4] = 0;
  *((double *)v12 + 5) = a6;
  v12[6] = a7;
  v15 = (WTF *)*v12;
  if (v15)
  {
    isUserVisibleURL = WTF::isUserVisibleURL(v15, v13);
    v17 = (void *)*this;
    if ((isUserVisibleURL & 1) != 0)
    {
      v18 = v17;
      v19 = *v14;
      *v14 = v18;
    }
    else
    {
      objc_msgSend(v17, "safari_userVisibleURL");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "safari_stringByFoldingWideCharactersAndNormalizing");
      v20 = objc_claimAutoreleasedReturnValue();
      v21 = *v14;
      *v14 = (void *)v20;

    }
  }
  if (a4)
  {
    v22 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a4, a5, 0x8000100u, 0);
    v23 = (void *)this[3];
    this[3] = v22;

  }
  return this;
}

void sub_1A3E6C198(_Unwind_Exception *a1)
{
  id *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::URLCompletionEntry::setHasAutocompleteTriggers(uint64_t this, int a2)
{
  uint64_t v2;

  v2 = 0x1000000000000000;
  if (!a2)
    v2 = 0;
  *(_QWORD *)(this + 48) = *(_QWORD *)(this + 48) & 0xEFFFFFFFFFFFFFFFLL | v2;
  return this;
}

uint64_t SafariShared::URLCompletionEntry::setVisitCountScore(uint64_t this, int a2)
{
  *(_QWORD *)(this + 48) = a2 | ((unint64_t)*(unsigned int *)(this + 52) << 32);
  return this;
}

void SafariShared::URLCompletionEntry::update(SafariShared::URLCompletionEntry *this, NSString *a2, double a3, int a4, int a5, int a6)
{
  uint64_t v11;
  void *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  NSString *v17;

  v17 = a2;
  v11 = -[NSString copy](v17, "copy");
  v12 = (void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = v11;

  *((double *)this + 5) = a3;
  v13 = 0x8000000000000000;
  if (!a4)
    v13 = 0;
  v14 = 0x800000000000000;
  if (!a5)
    v14 = 0;
  v15 = v13 | v14;
  v16 = 0x400000000000000;
  if (!a6)
    v16 = 0;
  *((_QWORD *)this + 6) = *((_QWORD *)this + 6) & 0x73FFFFFFFFFFFFFFLL | v15 | v16;

}

void sub_1A3E6C2AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::URLCompletionEntry::markAsDeleted(SafariShared::URLCompletionEntry *this)
{
  *((_QWORD *)this + 6) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  *(_QWORD *)this = &stru_1E4B40D18;

}

_QWORD *SafariShared::URLCompletionEntryExtras::URLCompletionEntryExtras(_QWORD *this, int *a2, int *a3, unsigned __int8 *a4, unsigned __int8 *a5)
{
  *this = a2;
  this[1] = a3;
  this[2] = a4;
  this[3] = a5;
  return this;
}

{
  *this = a2;
  this[1] = a3;
  this[2] = a4;
  this[3] = a5;
  return this;
}

char *SafariShared::URLCompletionEntryExtras::create(SafariShared::URLCompletionEntryExtras *this, const int *a2, const void *a3, const int *a4, const void *a5, const unsigned __int8 *a6)
{
  char *v12;
  char *v13;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  __CFString *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  __CFString *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  void *v30;

  if ((a2 & 3) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E4B40D18, a4, a5, a6);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/SafariShared/SafariShared/History/Service/WBSHistoryServiceURLCompletion.mm");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "lastPathComponent");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = objc_msgSend(v15, "length");
    if (v19)
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR(", %@"), v15);
      v20 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v20 = &stru_1E4B40D18;
    }
    objc_msgSend(v16, "stringWithFormat:", CFSTR("ASSERTION FAILURE: \"%s\" in %s, %@:%d%@"), "dailyVisitCountsLength % sizeof(WBSVisitCountScore) == 0", "create", v18, 446, v20);
    v27 = objc_claimAutoreleasedReturnValue();
    if (v19)

    objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    NSLog(CFSTR("%@\n%@"), v27, v28);

    abort();
  }
  if ((a4 & 3) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E4B40D18);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/SafariShared/SafariShared/History/Service/WBSHistoryServiceURLCompletion.mm");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "lastPathComponent");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = objc_msgSend(v21, "length");
    if (v25)
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR(", %@"), v21);
      v26 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v26 = &stru_1E4B40D18;
    }
    objc_msgSend(v22, "stringWithFormat:", CFSTR("ASSERTION FAILURE: \"%s\" in %s, %@:%d%@"), "weeklyVisitCountsLength % sizeof(WBSVisitCountScore) == 0", "create", v24, 447, v26);
    v29 = objc_claimAutoreleasedReturnValue();
    if (v25)

    objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    NSLog(CFSTR("%@\n%@"), v29, v30);

    abort();
  }
  v12 = (char *)operator new((size_t)a4 + (_QWORD)a2 + (unint64_t)a6 + 32);
  v13 = (char *)a2 + (_QWORD)(v12 + 32) + (unint64_t)a4;
  *(_QWORD *)v12 = v12 + 32;
  *((_QWORD *)v12 + 1) = (char *)a2 + (_QWORD)(v12 + 32);
  *((_QWORD *)v12 + 2) = v13;
  *((_QWORD *)v12 + 3) = &a6[(_QWORD)v13];
  memcpy(v12 + 32, this, (size_t)a2);
  memcpy((char *)a2 + (_QWORD)(v12 + 32), a3, (size_t)a4);
  memcpy(*((void **)v12 + 2), a5, (size_t)a6);
  return v12;
}

void sub_1A3E6C5A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void SafariShared::URLCompletionEntryMap::insert(uint64_t *a1, uint64_t a2, uint64_t **a3)
{
  id v6;
  uint64_t v7;
  char *v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t **v17;
  uint64_t *v18;
  uint64_t *v19;
  id v20[2];
  char v21;
  CFTypeRef v22;
  CFTypeRef *v23;

  v6 = *(id *)a2;
  v22 = v6;
  SafariShared::URLCompletionEntryKey::URLCompletionEntryKey((SafariShared::URLCompletionEntryKey *)v20, (NSString *)v6);
  v7 = WTF::HashTable<SafariShared::URLCompletionEntryKey,SafariShared::URLCompletionEntry,SafariShared::URLCompletionEntryKeyExtractor,SafariShared::URLCompletionEntryHash,SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryKeyTraits>::lookup(a1, (uint64_t)v20);

  if (!v7 || *(double *)(v7 + 40) <= *(double *)(a2 + 40))
  {
    WTF::HashTable<SafariShared::URLCompletionEntryKey,SafariShared::URLCompletionEntry,SafariShared::URLCompletionEntryKeyExtractor,SafariShared::URLCompletionEntryHash,SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryKeyTraits>::add(a1, a2, (uint64_t)v20);
    if (!v21)
    {
      v8 = (char *)v20[0];
      v9 = *(id *)a2;
      *(_QWORD *)a2 = 0;
      v10 = *(void **)v8;
      *(_QWORD *)v8 = v9;

      *((_QWORD *)v8 + 1) = *(_QWORD *)(a2 + 8);
      v11 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a2 + 16) = 0;
      v12 = (void *)*((_QWORD *)v8 + 2);
      *((_QWORD *)v8 + 2) = v11;

      v13 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a2 + 24) = 0;
      v14 = (void *)*((_QWORD *)v8 + 3);
      *((_QWORD *)v8 + 3) = v13;

      v15 = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a2 + 32) = 0;
      v16 = (void *)*((_QWORD *)v8 + 4);
      *((_QWORD *)v8 + 4) = v15;

      *(_OWORD *)(v8 + 40) = *(_OWORD *)(a2 + 40);
    }
    if (*a3)
    {
      v23 = &v22;
      v17 = std::__hash_table<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t)(a1 + 1), &v22, (uint64_t)&std::piecewise_construct, (id **)&v23);
      v18 = *a3;
      *a3 = 0;
      v19 = v17[3];
      v17[3] = v18;
      if (v19)
        MEMORY[0x1A85998AC](v19, 0x10C402CAF9ECALL);
    }
    v6 = (id)v22;
  }

}

void sub_1A3E6C768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{

  _Unwind_Resume(a1);
}

uint64_t WTF::HashTable<SafariShared::URLCompletionEntryKey,SafariShared::URLCompletionEntry,SafariShared::URLCompletionEntryKeyExtractor,SafariShared::URLCompletionEntryHash,SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryKeyTraits>::lookup(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  int v4;
  unsigned int v5;
  uint64_t v6;
  __CFString *v7;
  int v8;

  v2 = *a1;
  if (!*a1)
    return 0;
  v4 = *(_DWORD *)(v2 - 8);
  v5 = v4 & *(_DWORD *)(a2 + 8);
  v6 = v2 + 56 * v5;
  v7 = *(__CFString **)v6;
  if (!*(_QWORD *)v6)
    return 0;
  v8 = 1;
  while (v7 == &stru_1E4B40D18 || *(_QWORD *)(v6 + 8) != *(_QWORD *)(a2 + 8) || !CFEqual(v7, *(CFTypeRef *)a2))
  {
    v5 = (v5 + v8) & v4;
    v6 = v2 + 56 * v5;
    v7 = *(__CFString **)v6;
    ++v8;
    if (!*(_QWORD *)v6)
      return 0;
  }
  return v6;
}

void WTF::HashTable<SafariShared::URLCompletionEntryKey,SafariShared::URLCompletionEntry,SafariShared::URLCompletionEntryKeyExtractor,SafariShared::URLCompletionEntryHash,SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryKeyTraits>::add(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int v7;
  unsigned int v8;
  __CFString **v9;
  __CFString *v10;
  __CFString **v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  unsigned int v23;

  v6 = *a1;
  if (*a1
    || (WTF::HashTable<SafariShared::URLCompletionEntryKey,SafariShared::URLCompletionEntry,SafariShared::URLCompletionEntryKeyExtractor,SafariShared::URLCompletionEntryHash,SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryKeyTraits>::expand(a1, 0), (v6 = *a1) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = v7 & *(_DWORD *)(a2 + 8);
  v9 = (__CFString **)(v6 + 56 * v8);
  v10 = *v9;
  if (*v9)
  {
    v11 = 0;
    v12 = 1;
    do
    {
      if (v10 == &stru_1E4B40D18)
      {
        v11 = v9;
      }
      else if (v9[1] == *(__CFString **)(a2 + 8) && CFEqual(v10, *(CFTypeRef *)a2))
      {
        v22 = *a1;
        if (*a1)
          v23 = *(_DWORD *)(v22 - 4);
        else
          v23 = 0;
        v21 = 0;
        v20 = v22 + 56 * v23;
        goto LABEL_27;
      }
      v8 = (v8 + v12) & v7;
      v9 = (__CFString **)(v6 + 56 * v8);
      v10 = *v9;
      ++v12;
    }
    while (*v9);
    if (v11)
    {
      v11[6] = 0;
      *((_OWORD *)v11 + 1) = 0u;
      *((_OWORD *)v11 + 2) = 0u;
      *(_OWORD *)v11 = 0u;
      --*(_DWORD *)(*a1 - 16);
      v9 = v11;
    }
  }
  WTF::IdentityHashTranslator<SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryHash>::translate<SafariShared::URLCompletionEntry,SafariShared::URLCompletionEntryKey,SafariShared::URLCompletionEntry>((uint64_t)v9, a2, (uint64_t *)a2);
  v13 = *a1;
  if (*a1)
    v14 = *(_DWORD *)(v13 - 12) + 1;
  else
    v14 = 1;
  *(_DWORD *)(v13 - 12) = v14;
  v15 = *a1;
  if (*a1)
    v16 = *(_DWORD *)(v15 - 12);
  else
    v16 = 0;
  v17 = (*(_DWORD *)(v15 - 16) + v16);
  v18 = *(unsigned int *)(v15 - 4);
  if (v18 > 0x400)
  {
    if (v18 > 2 * v17)
      goto LABEL_25;
  }
  else if (3 * v18 > 4 * v17)
  {
    goto LABEL_25;
  }
  v9 = (__CFString **)WTF::HashTable<SafariShared::URLCompletionEntryKey,SafariShared::URLCompletionEntry,SafariShared::URLCompletionEntryKeyExtractor,SafariShared::URLCompletionEntryHash,SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryKeyTraits>::expand(a1, (uint64_t)v9);
  v15 = *a1;
  if (!*a1)
  {
    v19 = 0;
    goto LABEL_26;
  }
LABEL_25:
  v19 = *(_DWORD *)(v15 - 4);
LABEL_26:
  v20 = v15 + 56 * v19;
  v21 = 1;
LABEL_27:
  *(_QWORD *)a3 = v9;
  *(_QWORD *)(a3 + 8) = v20;
  *(_BYTE *)(a3 + 16) = v21;
}

id SafariShared::URLCompletionEntryMap::insert(SafariShared::URLCompletionEntryMap *this, SafariShared::URLCompletionEntryBuilder *a2, char a3)
{
  id v5;
  id v6;
  char *v7;
  char *v9;
  id v10;

  SafariShared::URLCompletionEntryBuilder::buildEntryInMap((uint64_t)a2, (uint64_t *)this, a3);
  v5 = (id)objc_claimAutoreleasedReturnValue();
  v10 = v5;
  SafariShared::URLCompletionEntryBuilder::buildExtras(a2, &v9);
  if (v9)
  {
    std::__hash_table<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>>>::__emplace_unique_key_args<NSString * {__strong},NSString * {__strong}&,std::unique_ptr<SafariShared::URLCompletionEntryExtras>>((uint64_t)this + 8, (CFTypeRef *)&v10, &v10, (uint64_t *)&v9);
    v5 = v10;
  }
  v6 = v5;
  v7 = v9;
  v9 = 0;
  if (v7)
    MEMORY[0x1A85998AC](v7, 0x10C402CAF9ECALL);

  return v6;
}

void sub_1A3E6CAC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  if (a9)
    MEMORY[0x1A85998AC](a9, 0x10C402CAF9ECALL);

  _Unwind_Resume(a1);
}

__CFString *SafariShared::URLCompletionEntryBuilder::buildEntryInMap(uint64_t a1, uint64_t *a2, char a3)
{
  CFAllocatorRef *v6;
  __CFString *v7;
  uint64_t v8;
  uint64_t v9;
  const UInt8 *v10;
  __CFString *v11;
  double v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  id v23;
  void *v24;
  _QWORD v26[2];
  char v27;
  id v28[2];
  id v29;
  id v30;
  id v31;
  __int128 v32;

  v6 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if (*(_QWORD *)a1)
  {
    v7 = (__CFString *)CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(const UInt8 **)a1, *(_QWORD *)(a1 + 8), 0x8000100u, 0);
    if ((a3 & 1) != 0)
      goto LABEL_9;
  }
  else
  {
    v7 = 0;
    if ((a3 & 1) != 0)
      goto LABEL_9;
  }
  SafariShared::URLCompletionEntryKey::URLCompletionEntryKey((SafariShared::URLCompletionEntryKey *)v28, &v7->isa);
  v8 = WTF::HashTable<SafariShared::URLCompletionEntryKey,SafariShared::URLCompletionEntry,SafariShared::URLCompletionEntryKeyExtractor,SafariShared::URLCompletionEntryHash,SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryKeyTraits>::find<WTF::IdentityHashTranslator<SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryHash>,SafariShared::URLCompletionEntryKey>(a2, (uint64_t)v28);

  v9 = *a2;
  if (*a2)
    v9 += 56 * *(unsigned int *)(v9 - 4);
  if (v9 == v8 || *(double *)(v8 + 40) <= *(double *)(a1 + 96))
  {
LABEL_9:
    v10 = *(const UInt8 **)(a1 + 80);
    if (v10)
    {
      v11 = (__CFString *)CFStringCreateWithBytes(*v6, v10, *(_QWORD *)(a1 + 88), 0x8000100u, 0);
      if ((a3 & 1) != 0)
      {
LABEL_11:
        v12 = *(double *)(a1 + 96);
        v13 = SafariShared::URLCompletionEntryBuilder::buildCachedInfo((SafariShared::URLCompletionEntryBuilder *)a1);
        SafariShared::URLCompletionEntry::URLCompletionEntry((SafariShared::URLCompletionEntry *)v28, &v7->isa, &v11->isa, v12, v13);
        WTF::HashTable<SafariShared::URLCompletionEntryKey,SafariShared::URLCompletionEntry,SafariShared::URLCompletionEntryKeyExtractor,SafariShared::URLCompletionEntryHash,SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryKeyTraits>::add(a2, (uint64_t)v28, (uint64_t)v26);
LABEL_15:

        return v7;
      }
    }
    else
    {
      v11 = 0;
      if ((a3 & 1) != 0)
        goto LABEL_11;
    }
    v14 = *(double *)(a1 + 96);
    v15 = SafariShared::URLCompletionEntryBuilder::buildCachedInfo((SafariShared::URLCompletionEntryBuilder *)a1);
    SafariShared::URLCompletionEntry::URLCompletionEntry((SafariShared::URLCompletionEntry *)v28, &v7->isa, &v11->isa, v14, v15);
    WTF::HashTable<SafariShared::URLCompletionEntryKey,SafariShared::URLCompletionEntry,SafariShared::URLCompletionEntryKeyExtractor,SafariShared::URLCompletionEntryHash,SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryKeyTraits>::add(a2, (uint64_t)v28, (uint64_t)v26);
    if (!v27)
    {
      v16 = v26[0];
      v17 = v28[0];
      v28[0] = 0;
      v18 = *(void **)v26[0];
      *(_QWORD *)v26[0] = v17;

      *(id *)(v16 + 8) = v28[1];
      v19 = v29;
      v29 = 0;
      v20 = *(void **)(v16 + 16);
      *(_QWORD *)(v16 + 16) = v19;

      v21 = v30;
      v30 = 0;
      v22 = *(void **)(v16 + 24);
      *(_QWORD *)(v16 + 24) = v21;

      v23 = v31;
      v31 = 0;
      v24 = *(void **)(v16 + 32);
      *(_QWORD *)(v16 + 32) = v23;

      *(_OWORD *)(v16 + 40) = v32;
    }
    goto LABEL_15;
  }
  return v7;
}

void sub_1A3E6CCFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void *v4;
  void *v5;
  va_list va;

  va_start(va, a4);
  SafariShared::URLCompletionEntry::~URLCompletionEntry((id *)va);

  _Unwind_Resume(a1);
}

char *SafariShared::URLCompletionEntryBuilder::buildExtras@<X0>(SafariShared::URLCompletionEntryBuilder *this@<X0>, char **a2@<X8>)
{
  char *result;

  if ((SafariShared::URLCompletionEntryBuilder::buildCachedInfo(this) & 0x7000000000000000) != 0)
    result = SafariShared::URLCompletionEntryExtras::create(*((SafariShared::URLCompletionEntryExtras **)this + 3), *((const int **)this + 4), *((const void **)this + 5), *((const int **)this + 6), *((const void **)this + 7), *((const unsigned __int8 **)this + 8));
  else
    result = 0;
  *a2 = result;
  return result;
}

void SafariShared::URLCompletionEntryMap::updateAutocompleteTriggers(SafariShared::URLCompletionEntryMap *this, NSString *a2, NSData *a3)
{
  NSData *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  SafariShared::URLCompletionEntryExtras *v10;
  SafariShared::URLCompletionEntryExtras *v11;
  uint64_t v12;
  NSData *v13;
  char *v14;
  uint64_t **v15;
  id *v16;
  NSData *v17;
  const void *v18;
  size_t v19;
  id *v20;
  id *v21[2];
  NSString *v22;

  v22 = a2;
  v5 = a3;
  SafariShared::URLCompletionEntryKey::URLCompletionEntryKey((SafariShared::URLCompletionEntryKey *)v21, v22);
  v6 = WTF::HashTable<SafariShared::URLCompletionEntryKey,SafariShared::URLCompletionEntry,SafariShared::URLCompletionEntryKeyExtractor,SafariShared::URLCompletionEntryHash,SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryKeyTraits>::lookup((uint64_t *)this, (uint64_t)v21);

  if (v6)
    *(_QWORD *)(v6 + 48) = *(_QWORD *)(v6 + 48) & 0xEFFFFFFFFFFFFFFFLL | ((unint64_t)(v5 != 0) << 60);
  v7 = (_QWORD *)((char *)this + 8);
  v8 = (uint64_t *)std::__hash_table<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>>>::find<NSString * {__strong}>(v7, (CFTypeRef *)&v22);
  if (v8)
  {
    v9 = v8[3];
    v10 = *(SafariShared::URLCompletionEntryExtras **)v9;
    v11 = *(SafariShared::URLCompletionEntryExtras **)(v9 + 8);
    if (!v5 && v11 == v10)
    {
      v11 = *(SafariShared::URLCompletionEntryExtras **)v9;
      if (*(SafariShared::URLCompletionEntryExtras **)(v9 + 16) == v10)
      {
        std::__hash_table<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>>>::erase(v7, v8);
        goto LABEL_13;
      }
    }
    v12 = *(_QWORD *)(v9 + 16);
    v13 = objc_retainAutorelease(v5);
    v14 = SafariShared::URLCompletionEntryExtras::create(v10, (const int *)(v11 - v10), v11, (const int *)(v12 - (_QWORD)v11), -[NSData bytes](v13, "bytes"), (const unsigned __int8 *)-[NSData length](v13, "length"));
    v21[0] = (id *)&v22;
    v15 = std::__hash_table<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t)v7, (CFTypeRef *)&v22, (uint64_t)&std::piecewise_construct, v21);
    v16 = (id *)v15[3];
    v15[3] = (uint64_t *)v14;
    if (!v16)
      goto LABEL_13;
    goto LABEL_11;
  }
  if (v5)
  {
    v17 = objc_retainAutorelease(v5);
    v18 = -[NSData bytes](v17, "bytes");
    v19 = -[NSData length](v17, "length");
    v20 = (id *)operator new(v19 + 32);
    *v20 = v20 + 4;
    v20[1] = v20 + 4;
    v20[2] = v20 + 4;
    v20[3] = (char *)v20 + v19 + 32;
    memcpy(v20 + 4, v18, v19);
    v21[0] = v20;
    std::__hash_table<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>>>::__emplace_unique_key_args<NSString * {__strong},NSString * {__strong}&,std::unique_ptr<SafariShared::URLCompletionEntryExtras>>((uint64_t)v7, (CFTypeRef *)&v22, (id *)&v22, (uint64_t *)v21);
    v16 = v21[0];
    v21[0] = 0;
    if (v16)
LABEL_11:
      MEMORY[0x1A85998AC](v16, 0x10C402CAF9ECALL);
  }
LABEL_13:

}

void sub_1A3E6CF6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

BOOL SafariShared::URLCompletionEntryMap::queryVisitCounts(uint64_t *a1, void *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  id v9;
  uint64_t v10;
  uint64_t **v11;
  id v12;
  id v13;
  id v15[2];
  CFTypeRef v16;

  v9 = a2;
  v16 = v9;
  SafariShared::URLCompletionEntryKey::URLCompletionEntryKey((SafariShared::URLCompletionEntryKey *)v15, (NSString *)v9);
  v10 = WTF::HashTable<SafariShared::URLCompletionEntryKey,SafariShared::URLCompletionEntry,SafariShared::URLCompletionEntryKeyExtractor,SafariShared::URLCompletionEntryHash,SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryKeyTraits>::lookup(a1, (uint64_t)v15);

  if (v10)
  {
    LODWORD(v15[0]) = *(_QWORD *)(v10 + 48);
    *a3 = SLODWORD(v15[0]);
    v11 = std::__hash_table<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>>>::find<NSString * {__strong}>(a1 + 1, &v16);
    if (v11)
    {
      objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", *v11[3], v11[3][1] - *v11[3]);
      *a4 = (id)objc_claimAutoreleasedReturnValue();
      if (v11[3][2] == v11[3][1])
      {
        v12 = 0;
      }
      else
      {
        objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:");
        v12 = (id)objc_claimAutoreleasedReturnValue();
      }
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", v15, 4);
      v13 = (id)objc_claimAutoreleasedReturnValue();
      v12 = 0;
      *a4 = v13;
    }
    *a5 = v12;
    v9 = (id)v16;
  }

  return v10 != 0;
}

void sub_1A3E6D104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{

  _Unwind_Resume(a1);
}

void SafariShared::URLCompletionEntryMap::updateVisitCounts(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  void (**v7)(id, _QWORD *, uint64_t *);
  _QWORD *v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  _DWORD *v19;
  _DWORD *v20;
  int v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  _DWORD *v30;
  _DWORD *v31;
  int v32;
  uint64_t v33;
  char *v34;
  uint64_t **v35;
  uint64_t *v36;
  uint64_t v37;
  void *v38;
  WTF *v39;
  WTF *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  uint64_t v45;
  __CFString *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  uint64_t v51;
  __CFString *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  uint64_t v57;
  __CFString *v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  void *v64;
  char *v65;
  _QWORD v66[9];
  char v67;
  BOOL v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  WTF *v75;
  uint64_t v76;
  id v77;
  id *v78;

  v77 = a3;
  v7 = a4;
  v75 = 0;
  v76 = 0;
  v8 = (_QWORD *)(a1 + 8);
  v73 = 0;
  v74 = 0;
  v9 = std::__hash_table<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>>>::find<NSString * {__strong}>(v8, (CFTypeRef *)&v77);
  if (!v9)
  {
    LODWORD(v66[0]) = *(_QWORD *)(a2 + 48);
    v22 = (_DWORD *)WTF::Vector<SafariShared::FieldLabelPatternMatcher::DFA::State,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v75, 1uLL, (unint64_t)v66);
    v23 = 0;
    v11 = 0;
    *((_DWORD *)v75 + HIDWORD(v76)) = *v22;
    ++HIDWORD(v76);
    goto LABEL_27;
  }
  v10 = v9[3];
  v11 = *v10;
  if (!*v10)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E4B40D18);
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    v42 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/SafariShared/SafariShared/History/Service/WBSHistoryServiceURLCompletion.mm");
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v43, "lastPathComponent");
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    v45 = objc_msgSend(v41, "length");
    if (v45)
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR(", %@"), v41);
      v46 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v46 = &stru_1E4B40D18;
    }
    objc_msgSend(v42, "stringWithFormat:", CFSTR("ASSERTION FAILURE: \"%s\" in %s, %@:%d%@"), "extras->dailyVisitCounts()", "updateVisitCounts", v44, 567, v46);
    v59 = objc_claimAutoreleasedReturnValue();
    if (v45)

    objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
    v60 = (void *)objc_claimAutoreleasedReturnValue();
    NSLog(CFSTR("%@\n%@"), v59, v60);

    abort();
  }
  v12 = v10[1];
  if (!v12)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E4B40D18);
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    v48 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/SafariShared/SafariShared/History/Service/WBSHistoryServiceURLCompletion.mm");
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v49, "lastPathComponent");
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    v51 = objc_msgSend(v47, "length");
    if (v51)
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR(", %@"), v47);
      v52 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v52 = &stru_1E4B40D18;
    }
    objc_msgSend(v48, "stringWithFormat:", CFSTR("ASSERTION FAILURE: \"%s\" in %s, %@:%d%@"), "extras->weeklyVisitCounts()", "updateVisitCounts", v50, 568, v52);
    v61 = objc_claimAutoreleasedReturnValue();
    if (v51)

    objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
    v62 = (void *)objc_claimAutoreleasedReturnValue();
    NSLog(CFSTR("%@\n%@"), v61, v62);

    abort();
  }
  if (!v10[2])
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E4B40D18);
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    v54 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/SafariShared/SafariShared/History/Service/WBSHistoryServiceURLCompletion.mm");
    v55 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v55, "lastPathComponent");
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    v57 = objc_msgSend(v53, "length");
    if (v57)
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR(", %@"), v53);
      v58 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v58 = &stru_1E4B40D18;
    }
    objc_msgSend(v54, "stringWithFormat:", CFSTR("ASSERTION FAILURE: \"%s\" in %s, %@:%d%@"), "extras->autocompleteTriggers()", "updateVisitCounts", v56, 569, v58);
    v63 = objc_claimAutoreleasedReturnValue();
    if (v57)

    objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
    v64 = (void *)objc_claimAutoreleasedReturnValue();
    NSLog(CFSTR("%@\n%@"), v63, v64);

    abort();
  }
  v13 = v12 - v11;
  if (v12 == v11)
  {
    v15 = *v10;
  }
  else
  {
    if (HIDWORD(v13))
    {
      __break(0xC471u);
      goto LABEL_56;
    }
    v14 = WTF::fastMalloc((WTF *)v13);
    LODWORD(v76) = v13 >> 2;
    v75 = (WTF *)v14;
    v11 = *v10;
    v15 = v10[1];
    if (v15 != *v10)
    {
      v16 = 0;
      v17 = 0;
      v18 = HIDWORD(v76);
      do
      {
        v19 = (_DWORD *)(v11 + v16);
        if (v18 == (_DWORD)v76)
        {
          v20 = (_DWORD *)WTF::Vector<SafariShared::FieldLabelPatternMatcher::DFA::State,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v75, v18 + 1, (unint64_t)v19);
          v14 = (uint64_t)v75;
          *((_DWORD *)v75 + HIDWORD(v76)) = *v20;
          v21 = HIDWORD(v76);
          v11 = *v10;
          v15 = v10[1];
        }
        else
        {
          *(_DWORD *)(v14 + 4 * v18) = *v19;
          v21 = HIDWORD(v76);
        }
        v18 = v21 + 1;
        HIDWORD(v76) = v18;
        ++v17;
        v16 += 4;
      }
      while (v17 < (v15 - v11) >> 2);
      v11 = v15;
    }
  }
  v24 = v10[2];
  if (v24 != v11)
  {
    v25 = v24 - v15;
    if (!((unint64_t)(v24 - v15) >> 32))
    {
      LODWORD(v74) = v25 >> 2;
      v73 = WTF::fastMalloc((WTF *)v25);
      v11 = v10[1];
      v26 = v10[2];
      if (v26 != v11)
      {
        v27 = 0;
        v28 = 0;
        v29 = HIDWORD(v74);
        do
        {
          v30 = (_DWORD *)(v11 + v27);
          if (v29 == (_DWORD)v74)
          {
            v31 = (_DWORD *)WTF::Vector<SafariShared::FieldLabelPatternMatcher::DFA::State,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v73, v29 + 1, (unint64_t)v30);
            *(_DWORD *)(v73 + 4 * HIDWORD(v74)) = *v31;
            v32 = HIDWORD(v74);
            v11 = v10[1];
            v26 = v10[2];
          }
          else
          {
            *(_DWORD *)(v73 + 4 * v29) = *v30;
            v32 = HIDWORD(v74);
          }
          v29 = v32 + 1;
          HIDWORD(v74) = v29;
          ++v28;
          v27 += 4;
        }
        while (v28 < (v26 - v11) >> 2);
        v11 = v26;
      }
      goto LABEL_26;
    }
    __break(0xC471u);
LABEL_56:
    JUMPOUT(0x1A3E6D774);
  }
  v26 = v11;
LABEL_26:
  v23 = v10[3] - v26;
LABEL_27:
  ((void (**)(id, WTF **, uint64_t *))v7)[2](v7, &v75, &v73);
  v33 = *(_QWORD *)(a2 + 48);
  v66[0] = 0;
  v66[1] = 0;
  v66[2] = (int)v33;
  v66[3] = v75;
  v66[4] = 4 * HIDWORD(v76);
  v66[5] = v73;
  v66[6] = 4 * HIDWORD(v74);
  v66[7] = v11;
  v66[8] = v23;
  v67 = 0;
  v68 = (v33 & 0x800000000000000) != 0;
  v70 = 0;
  v71 = 0;
  v69 = 0;
  v72 = (v33 & 0x400000000000000) != 0;
  SafariShared::URLCompletionEntryBuilder::buildExtras((SafariShared::URLCompletionEntryBuilder *)v66, &v65);
  v34 = v65;
  if (v65)
  {
    v78 = &v77;
    v35 = std::__hash_table<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t)v8, (CFTypeRef *)&v77, (uint64_t)&std::piecewise_construct, &v78);
    v36 = v35[3];
    v35[3] = (uint64_t *)v34;
    if (v36)
      MEMORY[0x1A85998AC](v36, 0x10C402CAF9ECALL);
  }
  else
  {
    std::__hash_table<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>>>::__erase_unique<NSString * {__strong}>(v8, (CFTypeRef *)&v77);
  }
  v37 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = v37 & 0x8FFFFFFFFFFFFFFFLL | ((((unint64_t)SafariShared::URLCompletionEntryBuilder::buildCachedInfo((SafariShared::URLCompletionEntryBuilder *)v66) >> 60) & 7) << 60);
  v39 = (WTF *)v73;
  if (v73)
  {
    v73 = 0;
    LODWORD(v74) = 0;
    WTF::fastFree(v39, v38);
  }
  v40 = v75;
  if (v75)
  {
    v75 = 0;
    LODWORD(v76) = 0;
    WTF::fastFree(v40, v38);
  }

}

void sub_1A3E6D780(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v7;
  WTF *v8;
  WTF *v9;

  v8 = *(WTF **)(v5 - 136);
  if (v8)
  {
    *(_QWORD *)(v5 - 136) = 0;
    *(_DWORD *)(v5 - 128) = 0;
    WTF::fastFree(v8, v7);
  }
  v9 = *(WTF **)(v5 - 120);
  if (v9)
  {
    *(_QWORD *)(v5 - 120) = 0;
    *(_DWORD *)(v5 - 112) = 0;
    WTF::fastFree(v9, v7);
  }

  _Unwind_Resume(a1);
}

__n128 SafariShared::URLCompletionEntryBuilder::URLCompletionEntryBuilder(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v5;
  return result;
}

{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v5;
  return result;
}

uint64_t SafariShared::URLCompletionEntryBuilder::buildCachedInfo(SafariShared::URLCompletionEntryBuilder *this)
{
  uint64_t v1;

  v1 = *((unsigned int *)this + 4);
  if (*((_QWORD *)this + 4) >= 4uLL && **((_DWORD **)this + 3) != (_DWORD)v1)
    v1 |= 0x4000000000000000uLL;
  if (*((_QWORD *)this + 6))
    v1 |= 0x2000000000000000uLL;
  if (*((_QWORD *)this + 8))
    v1 |= 0x1000000000000000uLL;
  if (*((_BYTE *)this + 72))
    v1 |= 0x8000000000000000;
  if (*((_BYTE *)this + 73))
    v1 |= 0x800000000000000uLL;
  if (*((_BYTE *)this + 104))
    return v1 | 0x400000000000000;
  else
    return v1;
}

void SafariShared::URLCompletionEntryMap::recordVisit(uint64_t *a1, void *a2, void *a3, int a4, uint64_t a5, int a6, int a7, int a8, double a9)
{
  void *v10;
  NSString *v17;
  NSString *v18;
  BOOL v19;
  uint64_t v20;
  double v21;
  int v22;
  const char *v23;
  const char *v24;
  void *v25;
  BOOL v26;
  int *v27;
  uint64_t v28;
  size_t v29;
  id v30;
  char v31;
  char v32;
  _QWORD v33[7];
  int v34;
  int v35;
  id v36[5];
  __int128 v37;
  __int128 v38;
  char v39;
  BOOL v40;
  const char *v41;
  size_t v42;
  double v43;
  char v44;
  int v45;

  LODWORD(v10) = a7;
  v17 = a2;
  v18 = a3;
  v45 = (int)v10;
  v19 = a5 == 0;
  SafariShared::URLCompletionEntryKey::URLCompletionEntryKey((SafariShared::URLCompletionEntryKey *)v36, v17);
  v20 = WTF::HashTable<SafariShared::URLCompletionEntryKey,SafariShared::URLCompletionEntry,SafariShared::URLCompletionEntryKeyExtractor,SafariShared::URLCompletionEntryHash,SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryKeyTraits>::lookup(a1, (uint64_t)v36);

  if (v20)
  {
    v21 = *(double *)(v20 + 40);
    if (a6)
    {
      v22 = *(_DWORD *)(v20 + 48) + (_DWORD)v10;
      v33[0] = MEMORY[0x1E0C809B0];
      v33[1] = 3221225472;
      v33[2] = ___ZN12SafariShared21URLCompletionEntryMap11recordVisitEP8NSStringS2_db21WBSHistoryVisitOriginbib_block_invoke;
      v33[3] = &__block_descriptor_64_e13_v24__0_v8_v16l;
      v33[4] = v20;
      v34 = v22;
      v35 = (int)v10;
      *(double *)&v33[5] = v21;
      *(double *)&v33[6] = a9;
      SafariShared::URLCompletionEntryMap::updateVisitCounts((uint64_t)a1, v20, v17, v33);
    }
    if (v21 < a9)
      SafariShared::URLCompletionEntry::update((SafariShared::URLCompletionEntry *)v20, v18, a9, a4, a5 == 0, a8);
  }
  else
  {
    v23 = -[NSString UTF8String](objc_retainAutorelease(v17), "UTF8String");
    v31 = a4;
    v32 = a8;
    v24 = -[NSString UTF8String](objc_retainAutorelease(v18), "UTF8String");
    v25 = (void *)strlen(v23);
    v26 = a6 == 0;
    if (a6)
      v10 = (void *)(int)v10;
    else
      v10 = 0;
    if (a6)
      v27 = &v45;
    else
      v27 = 0;
    if (v26)
      v28 = 0;
    else
      v28 = 4;
    if (v24)
      v29 = strlen(v24);
    else
      v29 = 0;
    v36[0] = (id)v23;
    v36[1] = v25;
    v36[2] = v10;
    v36[3] = v27;
    v36[4] = (id)v28;
    v37 = 0u;
    v38 = 0u;
    v39 = v31;
    v40 = v19;
    v41 = v24;
    v42 = v29;
    v43 = a9;
    v44 = v32;
    v30 = SafariShared::URLCompletionEntryMap::insert((SafariShared::URLCompletionEntryMap *)a1, (SafariShared::URLCompletionEntryBuilder *)v36, 0);
  }

}

void sub_1A3E6DB04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t ___ZN12SafariShared21URLCompletionEntryMap11recordVisitEP8NSStringS2_db21WBSHistoryVisitOriginbib_block_invoke(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  int v3;

  v3 = *(_DWORD *)(a1 + 60);
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48) = *(int *)(a1 + 56) | ((unint64_t)*(unsigned int *)(*(_QWORD *)(a1 + 32) + 52) << 32);
  return WBSHistoryAddVisitToScore(v3, a2, a3, *(double *)(a1 + 40), *(double *)(a1 + 48));
}

void SafariShared::URLCompletionEntryMap::updateItemTitle(SafariShared::URLCompletionEntryMap *this, NSString *a2, double a3, NSString *a4, NSString *a5)
{
  NSString *v8;
  uint64_t v9;
  double v10;
  id v11[2];

  v8 = a4;
  SafariShared::URLCompletionEntryKey::URLCompletionEntryKey((SafariShared::URLCompletionEntryKey *)v11, a2);
  v9 = WTF::HashTable<SafariShared::URLCompletionEntryKey,SafariShared::URLCompletionEntry,SafariShared::URLCompletionEntryKeyExtractor,SafariShared::URLCompletionEntryHash,SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryKeyTraits>::lookup((uint64_t *)this, (uint64_t)v11);

  if (v9)
  {
    v10 = *(double *)(v9 + 40);
    if (v10 == a3)
      SafariShared::URLCompletionEntry::update((SafariShared::URLCompletionEntry *)v9, v8, v10, *(_QWORD *)(v9 + 48) >> 63, (*(_QWORD *)(v9 + 48) & 0x800000000000000) != 0, (*(_QWORD *)(v9 + 48) & 0x400000000000000) != 0);
  }

}

void sub_1A3E6DBF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void SafariShared::URLCompletionEntryMap::updateItemScore(SafariShared::URLCompletionEntryMap *this, NSString *a2, double a3, int a4, int a5, BOOL *a6)
{
  NSString *v11;
  uint64_t v12;
  _QWORD v13[7];
  int v14;
  int v15;
  id v16[2];

  v11 = a2;
  SafariShared::URLCompletionEntryKey::URLCompletionEntryKey((SafariShared::URLCompletionEntryKey *)v16, v11);
  v12 = WTF::HashTable<SafariShared::URLCompletionEntryKey,SafariShared::URLCompletionEntry,SafariShared::URLCompletionEntryKeyExtractor,SafariShared::URLCompletionEntryHash,SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryKeyTraits>::lookup((uint64_t *)this, (uint64_t)v16);

  if (v12)
  {
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = ___ZN12SafariShared21URLCompletionEntryMap15updateItemScoreEP8NSStringdiiPb_block_invoke;
    v13[3] = &__block_descriptor_64_e13_v24__0_v8_v16l;
    v13[4] = v12;
    v14 = a5;
    v15 = a4;
    *(double *)&v13[5] = a3;
    v13[6] = a6;
    SafariShared::URLCompletionEntryMap::updateVisitCounts((uint64_t)this, v12, v11, v13);
  }
  else if (a6)
  {
    *a6 = 0;
  }

}

void sub_1A3E6DCF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN12SafariShared21URLCompletionEntryMap15updateItemScoreEP8NSStringdiiPb_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_DWORD *)(a1 + 56);
  v7 = *(unsigned int *)(a1 + 60);
  *(_DWORD *)(v5 + 48) = (v6 + *(_DWORD *)(v5 + 48) - v7) & ~((v6 + *(_DWORD *)(v5 + 48) - (int)v7) >> 31);
  return WBSHistoryUpdateScoreOfVisit(v7, v6, a2, *(double *)(v5 + 40), *(double *)(a1 + 40), a3, *(char **)(a1 + 48));
}

void SafariShared::URLCompletionEntryMap::remove(uint64_t *a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  id v9[2];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  NSString *v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v3 = a2;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v15, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v11;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v11 != v5)
          objc_enumerationMutation(v3);
        v14 = *(NSString **)(*((_QWORD *)&v10 + 1) + 8 * i);
        SafariShared::URLCompletionEntryKey::URLCompletionEntryKey((SafariShared::URLCompletionEntryKey *)v9, v14);
        v7 = WTF::HashTable<SafariShared::URLCompletionEntryKey,SafariShared::URLCompletionEntry,SafariShared::URLCompletionEntryKeyExtractor,SafariShared::URLCompletionEntryHash,SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryKeyTraits>::find<WTF::IdentityHashTranslator<SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryHash>,SafariShared::URLCompletionEntryKey>(a1, (uint64_t)v9);
        v8 = *a1;
        if (*a1)
          v8 += 56 * *(unsigned int *)(v8 - 4);
        if (v8 != v7)
          WTF::HashTable<SafariShared::URLCompletionEntryKey,SafariShared::URLCompletionEntry,SafariShared::URLCompletionEntryKeyExtractor,SafariShared::URLCompletionEntryHash,SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryKeyTraits>::remove(a1, v7);

        std::__hash_table<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>>>::__erase_unique<NSString * {__strong}>(a1 + 1, (CFTypeRef *)&v14);
      }
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v15, 16);
    }
    while (v4);
  }

}

void sub_1A3E6DE9C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id SafariShared::URLCompletionEntryMap::nextItemInRedirectChainOfItem(SafariShared::URLCompletionEntryMap *this, NSString *a2)
{
  NSString *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  id v8;
  id v10[2];

  v3 = a2;
  if (*(_QWORD *)this)
    v4 = *(_QWORD *)this + 56 * *(unsigned int *)(*(_QWORD *)this - 4);
  else
    v4 = 0;
  SafariShared::URLCompletionEntryKey::URLCompletionEntryKey((SafariShared::URLCompletionEntryKey *)v10, v3);
  v5 = WTF::HashTable<SafariShared::URLCompletionEntryKey,SafariShared::URLCompletionEntry,SafariShared::URLCompletionEntryKeyExtractor,SafariShared::URLCompletionEntryHash,SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryKeyTraits>::find<WTF::IdentityHashTranslator<SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryHash>,SafariShared::URLCompletionEntryKey>((uint64_t *)this, (uint64_t)v10);

  if (v4 == v5)
  {
    v8 = 0;
  }
  else
  {
    v6 = *(id *)(v5 + 32);
    if (v6
      && (SafariShared::URLCompletionEntryKey::URLCompletionEntryKey((SafariShared::URLCompletionEntryKey *)v10, (NSString *)v6), v7 = WTF::HashTable<SafariShared::URLCompletionEntryKey,SafariShared::URLCompletionEntry,SafariShared::URLCompletionEntryKeyExtractor,SafariShared::URLCompletionEntryHash,SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryKeyTraits>::find<WTF::IdentityHashTranslator<SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryHash>,SafariShared::URLCompletionEntryKey>((uint64_t *)this, (uint64_t)v10), v10[0], v4 == v7))
    {
      v8 = 0;
    }
    else
    {
      v8 = v6;
    }

  }
  return v8;
}

void sub_1A3E6DFB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;
  void *v10;

  _Unwind_Resume(a1);
}

void SafariShared::URLCompletionEntryMap::setNextItemInRedirectChainOfItem(SafariShared::URLCompletionEntryMap *this, NSString *a2, NSString *a3)
{
  NSString *v5;
  NSString *v6;
  uint64_t v7;
  id v8[2];

  v5 = a2;
  v6 = a3;
  if (v5)
  {
    SafariShared::URLCompletionEntryKey::URLCompletionEntryKey((SafariShared::URLCompletionEntryKey *)v8, v5);
    v7 = WTF::HashTable<SafariShared::URLCompletionEntryKey,SafariShared::URLCompletionEntry,SafariShared::URLCompletionEntryKeyExtractor,SafariShared::URLCompletionEntryHash,SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryKeyTraits>::lookup((uint64_t *)this, (uint64_t)v8);

    if (v7)
      objc_storeStrong((id *)(v7 + 32), a3);
  }

}

void sub_1A3E6E06C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t *SafariShared::URLCompletionEntryMap::visitedMoreThanOnceStatistics(SafariShared::URLCompletionEntryMap *this, NSString *a2)
{
  uint64_t **v3;
  uint64_t *v4;
  NSString *v6;

  v6 = a2;
  v3 = std::__hash_table<NSString * {__strong},std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,std::allocator<NSString * {__strong}>>::find<NSString * {__strong}>((_QWORD *)this + 1, (CFTypeRef *)&v6);
  if (v3)
    v4 = v3[3];
  else
    v4 = 0;

  return v4;
}

void sub_1A3E6E18C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

BOOL SafariShared::URLCompletionEntryMap::addURLCompletionMatchEntryToArray(uint64_t *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  float v15;
  uint64_t *v16;
  float v17;
  WBSHistoryServiceURLCompletionMatchEntry *v18;
  id v19;
  double v20;
  WBSHistoryServiceURLCompletionMatchEntry *v21;
  id v23[2];
  CFTypeRef v24;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v24 = v9;
  SafariShared::URLCompletionEntryKey::URLCompletionEntryKey((SafariShared::URLCompletionEntryKey *)v23, (NSString *)v9);
  v10 = WTF::HashTable<SafariShared::URLCompletionEntryKey,SafariShared::URLCompletionEntry,SafariShared::URLCompletionEntryKeyExtractor,SafariShared::URLCompletionEntryHash,SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryKeyTraits>::find<WTF::IdentityHashTranslator<SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryHash>,SafariShared::URLCompletionEntryKey>(a1, (uint64_t)v23);

  if (*a1)
    v11 = *a1 + 56 * *(unsigned int *)(*a1 - 4);
  else
    v11 = 0;
  if (v11 != v10)
  {
    v12 = objc_msgSend(v8, "count");
    v13 = *(double *)(v10 + 40);
    v14 = *(_QWORD *)(v10 + 48);
    if (!v12)
    {
      +[WBSHistoryVisit weightedVisitCountFromScore:](WBSHistoryVisit, "weightedVisitCountFromScore:", *(_QWORD *)(v10 + 48));
      objc_msgSend(v7, "setVisitCount:", vcvtps_s32_f32(v15));
      objc_msgSend(v7, "setLastVisitedTimeInterval:", v13);
      v14 = *(_QWORD *)(v10 + 48);
    }
    if ((v14 & 0x7000000000000000) != 0)
    {
      v16 = std::__hash_table<NSString * {__strong},std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,std::allocator<NSString * {__strong}>>::find<NSString * {__strong}>(a1 + 1, &v24)[3];
      if (!v12 && v16[3] != v16[2])
        objc_msgSend(v7, "setAutocompleteTriggers:length:");
    }
    v17 = WBSTopSitesScore();
    v18 = [WBSHistoryServiceURLCompletionMatchEntry alloc];
    v19 = *(id *)v10;
    *(float *)&v20 = v17;
    v21 = -[WBSHistoryServiceURLCompletionMatchEntry initWithURLString:title:topSitesScore:visitCountScore:](v18, "initWithURLString:title:topSitesScore:visitCountScore:", v19, *(_QWORD *)(v10 + 24), *(int *)(v10 + 48), v20);
    objc_msgSend(v8, "addObject:", v21);

    v9 = (id)v24;
  }

  return v11 != v10;
}

void sub_1A3E6E38C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

double SafariShared::URLCompletionEntryMap::lastVisitTime(SafariShared::URLCompletionEntryMap *this, NSString *a2)
{
  NSString *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  id v8[2];

  v3 = a2;
  SafariShared::URLCompletionEntryKey::URLCompletionEntryKey((SafariShared::URLCompletionEntryKey *)v8, v3);
  v4 = WTF::HashTable<SafariShared::URLCompletionEntryKey,SafariShared::URLCompletionEntry,SafariShared::URLCompletionEntryKeyExtractor,SafariShared::URLCompletionEntryHash,SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryKeyTraits>::find<WTF::IdentityHashTranslator<SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryHash>,SafariShared::URLCompletionEntryKey>((uint64_t *)this, (uint64_t)v8);

  v5 = *(_QWORD *)this;
  if (*(_QWORD *)this)
    v5 += 56 * *(unsigned int *)(v5 - 4);
  if (v5 == v4)
    v6 = 0.0;
  else
    v6 = *(double *)(v4 + 40);

  return v6;
}

void sub_1A3E6E478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;

  _Unwind_Resume(a1);
}

CFTypeRef *SafariShared::URLCompletionEntryBuilder::buildEntry@<X0>(SafariShared::URLCompletionEntryBuilder *this@<X0>, CFTypeRef **a2@<X8>)
{
  const void *v4;
  CFTypeRef *v5;
  CFTypeRef *result;

  v4 = (const void *)SafariShared::URLCompletionEntryBuilder::buildCachedInfo(this);
  v5 = (CFTypeRef *)operator new();
  result = SafariShared::URLCompletionEntry::URLCompletionEntry(v5, *(const UInt8 **)this, *((_QWORD *)this + 1), *((const UInt8 **)this + 10), *((_QWORD *)this + 11), *((double *)this + 12), v4);
  *a2 = v5;
  return result;
}

void sub_1A3E6E520(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A85998AC](v1, 0x1080C405A21ED23);
  _Unwind_Resume(a1);
}

void SafariShared::URLCompletionEntry::~URLCompletionEntry(id *this)
{

}

void SafariShared::URLCompletionEntryBuilder::validateVisitedCountsIfNeeded(SafariShared::URLCompletionEntryBuilder *this)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if ((WBSValidateVisitCountScores(*((_QWORD *)this + 3), *((_QWORD *)this + 4) >> 2, 300) & 1) == 0)
  {
    v2 = WBS_LOG_CHANNEL_PREFIXURLAutocomplete();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      SafariShared::URLCompletionEntryBuilder::validateVisitedCountsIfNeeded(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  if ((WBSValidateVisitCountScores(*((_QWORD *)this + 5), *((_QWORD *)this + 6) >> 2, 2100) & 1) == 0)
  {
    v10 = WBS_LOG_CHANNEL_PREFIXURLAutocomplete();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      SafariShared::URLCompletionEntryBuilder::validateVisitedCountsIfNeeded(v10, v11, v12, v13, v14, v15, v16, v17);
  }
}

uint64_t __Block_byref_object_copy__23(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__hash_table(a1 + 48, (uint64_t *)(a2 + 48));
}

uint64_t __Block_byref_object_dispose__24(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>>>::~__hash_table(a1 + 48);
}

id std::for_each[abi:sn180100]<std::__hash_map_iterator<std::__hash_iterator<std::__hash_node<std::__hash_value_type<long long,long long>,void *> *>>,void({block_pointer} {__strong})(std::pair<long long,long long> const&)>(uint64_t *a1, uint64_t *a2, void *a3)
{
  void (**v5)(id, _OWORD *);
  void *v6;
  __int128 v8;

  v5 = a3;
  while (a1 != a2)
  {
    v8 = *((_OWORD *)a1 + 1);
    v5[2](v5, &v8);
    a1 = (uint64_t *)*a1;
  }
  v6 = (void *)MEMORY[0x1A8599ED0](v5);

  return v6;
}

void sub_1A3E6E6A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E6E73C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3E6EB94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__36(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 48) = v2;
  return result;
}

uint64_t __Block_byref_object_dispose__37(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (result)
    JUMPOUT(0x1A85998ACLL);
  return result;
}

void sub_1A3E6F278(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v1;

  _Unwind_Resume(a1);
}

void sub_1A3E6F3CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3E6F558(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E6F758(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__38(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a1 + 48) = v2;
  return std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__hash_table(a1 + 56, (uint64_t *)(a2 + 56));
}

void __Block_byref_object_dispose__39(uint64_t a1)
{
  std::__hash_table<NSString * {__strong},std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,std::allocator<NSString * {__strong}>>::~__hash_table(a1 + 56);

}

void sub_1A3E6FB40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;
  void *v10;

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__44(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__45(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 48);
  std::vector<WBSHistoryServiceURLCompletionMatchEntry * {__strong}>::__destroy_vector::operator()[abi:sn180100](&v1);
}

void sub_1A3E6FEA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1A3E70138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id *std::vector<WBSHistoryServiceURLCompletionMatchEntry * {__strong}>::insert(_QWORD *a1, uint64_t *a2, id *a3)
{
  id *v4;
  uint64_t *v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void **matched;
  void **v16;
  uint64_t v17;
  void **v18;
  unint64_t v20;
  void **v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  int64x2_t v30;
  char *v31;
  void **v32;
  __int128 v33;
  char *v34;
  _QWORD *v35;
  void **v36;
  int64x2_t v37;
  char *v38;
  uint64_t v39;

  v4 = (id *)a2;
  v7 = (char *)*a1;
  v6 = (uint64_t *)a1[1];
  v9 = (uint64_t)(a1 + 2);
  v8 = a1[2];
  if ((unint64_t)v6 >= v8)
  {
    v10 = (((char *)v6 - v7) >> 3) + 1;
    if (v10 >> 61)
      goto LABEL_37;
    v11 = (char *)a2 - v7;
    v12 = ((char *)a2 - v7) >> 3;
    v13 = v8 - (_QWORD)v7;
    if (v13 >> 2 > v10)
      v10 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v10;
    v35 = a1 + 2;
    if (v14)
      matched = (void **)std::__allocate_at_least[abi:sn180100]<std::allocator<WBSHistoryServiceURLCompletionMatchEntry * {__strong}>>((uint64_t)(a1 + 2), v14);
    else
      matched = 0;
    v16 = &matched[v12];
    v32 = matched;
    *(_QWORD *)&v33 = v16;
    *((_QWORD *)&v33 + 1) = v16;
    v34 = (char *)&matched[v14];
    if (v12 == v14)
    {
      if (v11 < 1)
      {
        if (v7 == (char *)v4)
          v20 = 1;
        else
          v20 = v11 >> 2;
        v39 = v9;
        v21 = (void **)std::__allocate_at_least[abi:sn180100]<std::allocator<WBSHistoryServiceURLCompletionMatchEntry * {__strong}>>(v9, v20);
        v23 = (uint64_t *)v33;
        v24 = *((_QWORD *)&v33 + 1) - v33;
        if (*((_QWORD *)&v33 + 1) == (_QWORD)v33)
        {
          v30 = vdupq_n_s64(v33);
          v26 = (unint64_t)&v21[v20 >> 2];
        }
        else
        {
          v25 = v24 >> 3;
          v26 = (unint64_t)&v21[v20 >> 2] + (v24 & 0xFFFFFFFFFFFFFFF8);
          v27 = 8 * v25;
          v28 = (char *)&v21[v20 >> 2];
          do
          {
            if (!v28)
              goto LABEL_36;
            v29 = *v23;
            *v23++ = 0;
            *(_QWORD *)v28 = v29;
            v28 += 8;
            v27 -= 8;
          }
          while (v27);
          v30 = (int64x2_t)v33;
        }
        v31 = v34;
        v36 = v32;
        v32 = v21;
        *(_QWORD *)&v33 = &v21[v20 >> 2];
        v37 = v30;
        *((_QWORD *)&v33 + 1) = v26;
        v34 = (char *)&v21[v22];
        v38 = v31;
        std::__split_buffer<WBSHistoryServiceURLCompletionMatchEntry * {__strong}>::~__split_buffer((uint64_t)&v36);
        v16 = (void **)*((_QWORD *)&v33 + 1);
        if (*((_QWORD *)&v33 + 1))
          goto LABEL_24;
        goto LABEL_36;
      }
      if (v12 >= -1)
        v17 = v12 + 1;
      else
        v17 = v12 + 2;
      std::__unwrap_and_dispatch[abi:sn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,WBSHistoryServiceURLCompletionMatchEntry * {__strong}*,WBSHistoryServiceURLCompletionMatchEntry * {__strong}*,WBSHistoryServiceURLCompletionMatchEntry * {__strong}*,0>(&matched[v12], v16, &v16[-(v17 >> 1)]);
      v16 = v18;
      *(_QWORD *)&v33 = v33 - 8 * (v17 >> 1);
      *((_QWORD *)&v33 + 1) = v18;
    }
    if (v16)
    {
LABEL_24:
      *v16 = *a3;
      *((_QWORD *)&v33 + 1) += 8;
      v4 = (id *)std::vector<WBSHistoryServiceURLCompletionMatchEntry * {__strong}>::__swap_out_circular_buffer(a1, &v32, v4);
      std::__split_buffer<WBSHistoryServiceURLCompletionMatchEntry * {__strong}>::~__split_buffer((uint64_t)&v32);
      return v4;
    }
LABEL_36:
    __break(1u);
LABEL_37:
    abort();
  }
  if (a2 == v6)
  {
    if (v7)
    {
      *a2 = (uint64_t)*a3;
      a1[1] = v4 + 1;
      return v4;
    }
    goto LABEL_36;
  }
  std::vector<WBSHistoryServiceURLCompletionMatchEntry * {__strong}>::__move_range(a1, a2, v6, (uint64_t)(a2 + 1));
  if (v4 <= a3)
    a3 += a1[1] > (unint64_t)a3;
  objc_storeStrong(v4, *a3);
  return v4;
}

void sub_1A3E70398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__split_buffer<WBSHistoryServiceURLCompletionMatchEntry * {__strong}>::~__split_buffer((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:sn180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x1E0DE4FD0];
  v3 = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = a1 + 16;
  v5 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_1A3E704F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x1A859987C](v1);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x1E0DE4F50];
  v3 = *MEMORY[0x1E0DE4F50];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F50];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1A859987C](a1 + 128);
  return a1;
}

_QWORD *std::__put_character_sequence[abi:sn180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _BYTE v13[16];
  std::locale v14;

  MEMORY[0x1A85997EC](v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, MEMORY[0x1E0DE4A90]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!std::__pad_and_output[abi:sn180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x1A85997F8](v13);
  return a1;
}

void sub_1A3E706A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  MEMORY[0x1A85997F8](&a10);
  _Unwind_Resume(a1);
}

uint64_t std::__pad_and_output[abi:sn180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  int64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v18;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if (v12 >= 1)
    {
      std::string::basic_string[abi:sn180100](__p, v12, __c);
      v13 = v18 >= 0 ? __p : (void **)__p[0];
      v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v6 + 96))(v6, v13, v12);
      if (v18 < 0)
        operator delete(__p[0]);
      if (v14 != v12)
        return 0;
    }
    v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v15) == v15)
      *(_QWORD *)(a5 + 24) = 0;
    else
      return 0;
  }
  return v6;
}

void sub_1A3E707F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::string::basic_string[abi:sn180100](_QWORD *__b, size_t __len, int __c)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((_BYTE *)__b + 23) = __len;
    v6 = __b;
    if (!__len)
      goto LABEL_9;
  }
  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

uint64_t std::stringbuf::str[abi:sn180100]<std::allocator<char>>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  unint64_t v4;
  _QWORD *v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;

  result = std::stringbuf::view[abi:sn180100](a1);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
LABEL_15:
    abort();
  v5 = (_QWORD *)result;
  v6 = v4;
  if (v4 > 0x16)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    result = (uint64_t)operator new(v7 + 1);
    a2[1] = v6;
    a2[2] = v8 | 0x8000000000000000;
    *a2 = result;
    a2 = (_QWORD *)result;
  }
  else
  {
    *((_BYTE *)a2 + 23) = v4;
  }
  v9 = (char *)a2 + v6;
  if (a2 <= v5 && v9 > (_BYTE *)v5)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (v6)
    result = (uint64_t)memmove(a2, v5, v6);
  *v9 = 0;
  return result;
}

uint64_t std::stringbuf::view[abi:sn180100](uint64_t a1)
{
  int v2;
  uint64_t result;
  unint64_t v4;
  unint64_t v5;

  v2 = *(_DWORD *)(a1 + 96);
  if ((v2 & 0x10) != 0)
  {
    v4 = *(_QWORD *)(a1 + 88);
    v5 = *(_QWORD *)(a1 + 48);
    if (v4 < v5)
    {
      *(_QWORD *)(a1 + 88) = v5;
      v4 = v5;
    }
    result = *(_QWORD *)(a1 + 40);
    if ((uint64_t)(v4 - result) < 0)
LABEL_9:
      __break(1u);
  }
  else
  {
    if ((v2 & 8) == 0)
      return 0;
    result = *(_QWORD *)(a1 + 16);
    if (*(_QWORD *)(a1 + 32) - result < 0)
      goto LABEL_9;
  }
  return result;
}

uint64_t std::__hash_table<NSString * {__strong},std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,std::allocator<NSString * {__strong}>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<NSString * {__strong},std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,std::allocator<NSString * {__strong}>>::__deallocate_node(a1, *(id **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<NSString * {__strong},std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,std::allocator<NSString * {__strong}>>::__deallocate_node(uint64_t a1, id *a2)
{
  id *v2;
  id *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (id *)*v2;

      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void ___ZL34threadCountToEnumerateConcurrentlyv_block_invoke()
{
  int v0;
  int v1;
  id v2;

  objc_msgSend(MEMORY[0x1E0CB3898], "processInfo");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  v0 = objc_msgSend(v2, "activeProcessorCount");
  if (v0 >= 4)
    v1 = 4;
  else
    v1 = v0;
  if (v1 <= 1)
    v1 = 1;
  threadCountToEnumerateConcurrently(void)::threadCount = v1;

}

void sub_1A3E70A80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t **std::__hash_table<NSString * {__strong},std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,std::allocator<NSString * {__strong}>>::find<NSString * {__strong}>(_QWORD *a1, CFTypeRef *a2)
{
  CFHashCode v4;
  int8x8_t v5;
  CFHashCode v6;
  uint8x8_t v7;
  unint64_t v8;
  CFHashCode v9;
  uint64_t ***v10;
  uint64_t **i;
  unint64_t v12;

  v4 = CFHash(*a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(uint64_t ****)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  for (i = *v10; i; i = (uint64_t **)*i)
  {
    v12 = (unint64_t)i[1];
    if (v6 == v12)
    {
      if (CFEqual(i[2], *a2))
        return i;
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= *(_QWORD *)&v5)
          v12 %= *(_QWORD *)&v5;
      }
      else
      {
        v12 &= *(_QWORD *)&v5 - 1;
      }
      if (v12 != v9)
        return 0;
    }
  }
  return i;
}

void *std::__hash_table<NSString * {__strong},std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,std::allocator<NSString * {__strong}>>::__emplace_unique_key_args<NSString * {__strong},NSString * const {__strong}&>(uint64_t a1, CFTypeRef *a2, id *a3)
{
  CFHashCode v3;
  CFHashCode v7;
  CFHashCode v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  void **v12;
  void *i;
  unint64_t v14;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v7 = CFHash(*a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      for (i = *v12; i; i = *(void **)i)
      {
        v14 = *((_QWORD *)i + 1);
        if (v14 == v8)
        {
          if (CFEqual(*((CFTypeRef *)i + 2), *a2))
            return i;
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9)
              v14 %= v9;
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3)
            break;
        }
      }
    }
  }
  v15 = (_QWORD *)(a1 + 16);
  i = operator new(0x18uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v8;
  *((_QWORD *)i + 2) = *a3;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    v18 = 1;
    if (v9 >= 3)
      v18 = (v9 & (v9 - 1)) != 0;
    v19 = v18 | (2 * v9);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__rehash<true>(a1, v21);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v23)
  {
    *(_QWORD *)i = *v23;
LABEL_38:
    *v23 = i;
    goto LABEL_39;
  }
  *(_QWORD *)i = *v15;
  *v15 = i;
  *(_QWORD *)(v22 + 8 * v3) = v15;
  if (*(_QWORD *)i)
  {
    v24 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v24 >= v9)
        v24 %= v9;
    }
    else
    {
      v24 &= v9 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1A3E70E38(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  std::__hash_node_destructor<std::allocator<std::__hash_node<NSString * {__strong},void *>>>::operator()[abi:sn180100](v2, v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<NSString * {__strong},void *>>>::operator()[abi:sn180100](uint64_t a1, id *a2)
{
  if (*(_BYTE *)(a1 + 8))
  {

  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

void std::vector<WBSHistoryServiceURLCompletionMatchEntry * {__strong}>::__destroy_vector::operator()[abi:sn180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (void *)*((_QWORD *)v4 - 1);
        v4 -= 8;

      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void **std::__unwrap_and_dispatch[abi:sn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,WBSHistoryServiceURLCompletionMatchEntry * {__strong}*,WBSHistoryServiceURLCompletionMatchEntry * {__strong}*,WBSHistoryServiceURLCompletionMatchEntry * {__strong}*,0>(void **a1, void **a2, void **a3)
{
  void **v4;
  void *v6;
  void *v7;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      v6 = *v4;
      *v4++ = 0;
      v7 = *a3;
      *a3++ = v6;

    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

_QWORD *std::vector<WBSHistoryServiceURLCompletionMatchEntry * {__strong}>::__move_range(_QWORD *result, _QWORD *a2, uint64_t *a3, uint64_t a4)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v8;

  v5 = (_QWORD *)result[1];
  v6 = v5;
  if ((_QWORD *)((char *)v5 + (_QWORD)a2 - a4) >= a3)
  {
LABEL_5:
    result[1] = v6;
    return std::__unwrap_and_dispatch[abi:sn180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,WBSHistoryServiceURLCompletionMatchEntry * {__strong}*,WBSHistoryServiceURLCompletionMatchEntry * {__strong}*,WBSHistoryServiceURLCompletionMatchEntry * {__strong}*,0>(a2, (_QWORD *)((char *)v5 + (_QWORD)a2 - a4), v5);
  }
  else
  {
    v7 = (_QWORD *)((char *)v5 + (_QWORD)a2 - a4);
    v6 = (_QWORD *)result[1];
    while (v6)
    {
      v8 = *v7;
      *v7++ = 0;
      *v6++ = v8;
      if (v7 >= a3)
        goto LABEL_5;
    }
    __break(1u);
  }
  return result;
}

uint64_t std::vector<WBSHistoryServiceURLCompletionMatchEntry * {__strong}>::__swap_out_circular_buffer(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  result = a2[1];
  v5 = (_QWORD *)*a1;
  v6 = result;
  if ((_QWORD *)*a1 != a3)
  {
    v7 = a3;
    v6 = a2[1];
    do
    {
      v8 = *--v7;
      *v7 = 0;
      *(_QWORD *)(v6 - 8) = v8;
      v6 -= 8;
    }
    while (v7 != v5);
  }
  a2[1] = v6;
  v9 = (_QWORD *)a1[1];
  v10 = (_QWORD *)a2[2];
  if (v9 == a3)
  {
LABEL_8:
    a2[2] = v10;
    v12 = (_QWORD *)*a1;
    *a1 = v6;
    a2[1] = v12;
    v13 = a1[1];
    a1[1] = a2[2];
    a2[2] = v13;
    v14 = a1[2];
    a1[2] = a2[3];
    a2[3] = v14;
    *a2 = a2[1];
  }
  else
  {
    while (v10)
    {
      v11 = *a3;
      *a3++ = 0;
      *v10++ = v11;
      if (a3 == v9)
      {
        v6 = a2[1];
        goto LABEL_8;
      }
    }
    __break(1u);
  }
  return result;
}

_QWORD *std::__unwrap_and_dispatch[abi:sn180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,WBSHistoryServiceURLCompletionMatchEntry * {__strong}*,WBSHistoryServiceURLCompletionMatchEntry * {__strong}*,WBSHistoryServiceURLCompletionMatchEntry * {__strong}*,0>(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  if (a2 != a1)
  {
    v6 = a2;
    do
    {
      v8 = *--v6;
      v7 = v8;
      *v6 = 0;
      v9 = (void *)*--a3;
      *a3 = v7;

    }
    while (v6 != a1);
  }
  return a2;
}

void *std::__allocate_at_least[abi:sn180100]<std::allocator<WBSHistoryServiceURLCompletionMatchEntry * {__strong}>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:sn180100]();
  return operator new(8 * a2);
}

uint64_t std::__split_buffer<WBSHistoryServiceURLCompletionMatchEntry * {__strong}>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;

  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:sn180100]<std::pair<NSString * const {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:sn180100]<std::pair<NSString * const {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,0>(uint64_t a1)
{
  uint64_t v2;

  if (a1)
  {
    v2 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v2)
      MEMORY[0x1A85998AC](v2, 0x10C402CAF9ECALL);

  }
  else
  {
    __break(1u);
  }
}

uint64_t WTF::HashTable<SafariShared::URLCompletionEntryKey,SafariShared::URLCompletionEntry,SafariShared::URLCompletionEntryKeyExtractor,SafariShared::URLCompletionEntryHash,SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryKeyTraits>::deallocateTable(id *a1, void *a2)
{
  uint64_t v3;
  id *v4;

  v3 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      if (*v4 != &stru_1E4B40D18)
      {

      }
      v4 += 7;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

uint64_t WTF::HashTable<SafariShared::URLCompletionEntryKey,SafariShared::URLCompletionEntry,SafariShared::URLCompletionEntryKeyExtractor,SafariShared::URLCompletionEntryHash,SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryKeyTraits>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 256;
  return WTF::HashTable<SafariShared::URLCompletionEntryKey,SafariShared::URLCompletionEntry,SafariShared::URLCompletionEntryKeyExtractor,SafariShared::URLCompletionEntryHash,SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryKeyTraits>::rehash(a1, v5, a2);
}

__n128 WTF::IdentityHashTranslator<SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryHash>::translate<SafariShared::URLCompletionEntry,SafariShared::URLCompletionEntryKey,SafariShared::URLCompletionEntry>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  __n128 result;

  v5 = *a3;
  *a3 = 0;
  v6 = *(void **)a1;
  *(_QWORD *)a1 = v5;

  v7 = a3[1];
  v8 = a3[2];
  a3[2] = 0;
  v9 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v8;

  v10 = a3[3];
  a3[3] = 0;
  v11 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v10;

  v12 = a3[4];
  a3[4] = 0;
  v13 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v12;

  result = *(__n128 *)(a3 + 5);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

uint64_t WTF::HashTable<SafariShared::URLCompletionEntryKey,SafariShared::URLCompletionEntry,SafariShared::URLCompletionEntryKeyExtractor,SafariShared::URLCompletionEntryHash,SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryKeyTraits>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  id *v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t result;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastZeroedMalloc((WTF *)(56 * a2 + 16));
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    v10 = 0;
    do
    {
      v11 = v4 + 56 * v9;
      if (*(__CFString **)v11 != &stru_1E4B40D18)
      {
        if (*(_QWORD *)v11)
        {
          v12 = *a1;
          if (*a1)
            v13 = *(_DWORD *)(v12 - 8);
          else
            v13 = 0;
          v15 = v13 & *(_DWORD *)(v11 + 8);
          v16 = 1;
          do
          {
            v17 = v15;
            v18 = v12 + 56 * v15;
            v15 = (v15 + v16++) & v13;
          }
          while (*(_QWORD *)v18);
          v19 = v12 + 56 * v17;

          v20 = *(id *)v11;
          v21 = *(_QWORD *)(v11 + 8);
          *(_QWORD *)v11 = 0;
          *(_QWORD *)v18 = v20;
          *(_QWORD *)(v18 + 8) = v21;
          v22 = v4 + 56 * v9;
          v23 = *(_OWORD *)(v22 + 16);
          *(_QWORD *)(v22 + 16) = 0;
          *(_QWORD *)(v22 + 24) = 0;
          *(_OWORD *)(v19 + 16) = v23;
          v24 = *(_QWORD *)(v22 + 32);
          *(_QWORD *)(v22 + 32) = 0;
          *(_QWORD *)(v19 + 32) = v24;
          *(_OWORD *)(v19 + 40) = *(_OWORD *)(v22 + 40);

          if (v11 == a3)
            v10 = v18;
        }
        else
        {
          v14 = (id *)(v4 + 56 * v9);

        }
      }
      ++v9;
    }
    while (v9 != v5);
  }
  else
  {
    v10 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v10;
}

uint64_t **std::__hash_table<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>(uint64_t a1, CFTypeRef *a2, uint64_t a3, id **a4)
{
  CFHashCode v4;
  CFHashCode v8;
  CFHashCode v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  uint64_t ***v13;
  uint64_t **i;
  unint64_t v15;
  _QWORD *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[2];
  char v27;

  v8 = CFHash(*a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v4 = v8;
      if (v8 >= v10)
        v4 = v8 % v10;
    }
    else
    {
      v4 = (v10 - 1) & v8;
    }
    v13 = *(uint64_t ****)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      for (i = *v13; i; i = (uint64_t **)*i)
      {
        v15 = (unint64_t)i[1];
        if (v15 == v9)
        {
          if (CFEqual(i[2], *a2))
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v4)
            break;
        }
      }
    }
  }
  v16 = operator new(0x20uLL);
  v26[0] = v16;
  v26[1] = a1 + 16;
  *v16 = 0;
  v16[1] = v9;
  v16[2] = **a4;
  v16[3] = 0;
  v27 = 1;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    v19 = 1;
    if (v10 >= 3)
      v19 = (v10 & (v10 - 1)) != 0;
    v20 = v19 | (2 * v10);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__rehash<true>(a1, v22);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v24 >= v10)
          v24 %= v10;
      }
      else
      {
        v24 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (uint64_t **)v26[0];
  v26[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,void *>>>>::reset[abi:sn180100]((uint64_t)v26, 0);
  return i;
}

void sub_1A3E7175C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,void *>>>>::reset[abi:sn180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,void *>>>>::reset[abi:sn180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:sn180100]<std::pair<NSString * const {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

uint64_t **std::__hash_table<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>>>::__emplace_unique_key_args<NSString * {__strong},NSString * {__strong}&,std::unique_ptr<SafariShared::URLCompletionEntryExtras>>(uint64_t a1, CFTypeRef *a2, id *a3, uint64_t *a4)
{
  CFHashCode v4;
  CFHashCode v9;
  CFHashCode v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  uint64_t ***v14;
  uint64_t **i;
  unint64_t v16;
  _QWORD *v17;
  id v18;
  uint64_t v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD v29[2];
  char v30;

  v9 = CFHash(*a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(uint64_t ****)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = (uint64_t **)*i)
      {
        v16 = (unint64_t)i[1];
        if (v16 == v10)
        {
          if (CFEqual(i[2], *a2))
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  v17 = operator new(0x20uLL);
  v29[0] = v17;
  v29[1] = a1 + 16;
  *v17 = 0;
  v17[1] = v10;
  v18 = *a3;
  v19 = *a4;
  *a4 = 0;
  v17[2] = v18;
  v17[3] = v19;
  v30 = 1;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__rehash<true>(a1, v25);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v26)
  {
    *(_QWORD *)v29[0] = *v26;
    *v26 = v29[0];
  }
  else
  {
    *(_QWORD *)v29[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v29[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v29[0])
    {
      v27 = *(_QWORD *)(*(_QWORD *)v29[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v27 >= v11)
          v27 %= v11;
      }
      else
      {
        v27 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v27) = v29[0];
    }
  }
  i = (uint64_t **)v29[0];
  v29[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,void *>>>>::reset[abi:sn180100]((uint64_t)v29, 0);
  return i;
}

void sub_1A3E71A28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,void *>>>>::reset[abi:sn180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t **std::__hash_table<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>>>::find<NSString * {__strong}>(_QWORD *a1, CFTypeRef *a2)
{
  CFHashCode v4;
  int8x8_t v5;
  CFHashCode v6;
  uint8x8_t v7;
  unint64_t v8;
  CFHashCode v9;
  uint64_t ***v10;
  uint64_t **i;
  unint64_t v12;

  v4 = CFHash(*a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(uint64_t ****)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  for (i = *v10; i; i = (uint64_t **)*i)
  {
    v12 = (unint64_t)i[1];
    if (v12 == v6)
    {
      if (CFEqual(i[2], *a2))
        return i;
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= *(_QWORD *)&v5)
          v12 %= *(_QWORD *)&v5;
      }
      else
      {
        v12 &= *(_QWORD *)&v5 - 1;
      }
      if (v12 != v9)
        return 0;
    }
  }
  return i;
}

_QWORD *std::__hash_table<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>>>::erase(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  _BYTE v3[24];

  if (a2)
  {
    v2 = *a2;
    std::__hash_table<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>>>::remove(result, a2, (uint64_t)v3);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,void *>>>>::reset[abi:sn180100]((uint64_t)v3, 0);
    return (_QWORD *)v2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>>>::__erase_unique<NSString * {__strong}>(_QWORD *a1, CFTypeRef *a2)
{
  uint64_t *result;

  result = (uint64_t *)std::__hash_table<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>>>::find<NSString * {__strong}>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t WTF::HashTable<SafariShared::URLCompletionEntryKey,SafariShared::URLCompletionEntry,SafariShared::URLCompletionEntryKeyExtractor,SafariShared::URLCompletionEntryHash,SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryKeyTraits>::find<WTF::IdentityHashTranslator<SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryHash>,SafariShared::URLCompletionEntryKey>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  int v5;
  unsigned int v6;
  uint64_t v7;
  __CFString *v8;
  int v9;

  v2 = *a1;
  if (!*a1)
    return 0;
  v5 = *(_DWORD *)(v2 - 8);
  v6 = v5 & *(_DWORD *)(a2 + 8);
  v7 = v2 + 56 * v6;
  v8 = *(__CFString **)v7;
  if (!*(_QWORD *)v7)
    return v2 + 56 * *(unsigned int *)(v2 - 4);
  v9 = 1;
  while (v8 == &stru_1E4B40D18 || *(_QWORD *)(v7 + 8) != *(_QWORD *)(a2 + 8) || !CFEqual(v8, *(CFTypeRef *)a2))
  {
    v6 = (v6 + v9) & v5;
    v7 = v2 + 56 * v6;
    v8 = *(__CFString **)v7;
    ++v9;
    if (!*(_QWORD *)v7)
    {
      v2 = *a1;
      if (*a1)
        return v2 + 56 * *(unsigned int *)(v2 - 4);
      return 0;
    }
  }
  return v7;
}

void WTF::HashTable<SafariShared::URLCompletionEntryKey,SafariShared::URLCompletionEntry,SafariShared::URLCompletionEntryKeyExtractor,SafariShared::URLCompletionEntryHash,SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryKeyTraits>::remove(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;

  WTF::hashTraitsDeleteBucket<SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntry>(a2);
  ++*(_DWORD *)(*a1 - 16);
  v3 = *a1;
  if (*a1)
    v4 = *(_DWORD *)(v3 - 12) - 1;
  else
    v4 = -1;
  *(_DWORD *)(v3 - 12) = v4;
  v5 = *a1;
  if (*a1)
  {
    v6 = 6 * *(_DWORD *)(v5 - 12);
    v7 = *(_DWORD *)(v5 - 4);
    if (v6 < v7 && v7 >= 0x101)
      WTF::HashTable<SafariShared::URLCompletionEntryKey,SafariShared::URLCompletionEntry,SafariShared::URLCompletionEntryKeyExtractor,SafariShared::URLCompletionEntryHash,SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryKeyTraits>::rehash(a1, v7 >> 1, 0);
  }
}

double WTF::hashTraitsDeleteBucket<SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntry>(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = &stru_1E4B40D18;
  return result;
}

_QWORD *WTF::HashTable<SafariShared::URLCompletionEntryKey,SafariShared::URLCompletionEntry,SafariShared::URLCompletionEntryKeyExtractor,SafariShared::URLCompletionEntryHash,SafariShared::URLCompletionEntryValueTraits,SafariShared::URLCompletionEntryKeyTraits>::makeConstIterator(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  unsigned int v4;
  _QWORD *v5;

  v3 = *a1;
  if (*a1)
    v4 = *(_DWORD *)(v3 - 4);
  else
    v4 = 0;
  v5 = (_QWORD *)(v3 + 56 * v4);
  if (v5 != a2)
  {
    while (!*a2 || *a2 == (_QWORD)&stru_1E4B40D18)
    {
      a2 += 7;
      if (a2 == v5)
        return (_QWORD *)(v3 + 56 * v4);
    }
  }
  return a2;
}

void std::default_delete<SafariShared::URLCompletionEntry>::operator()[abi:sn180100](uint64_t a1, id *a2)
{
  if (a2)
  {

    JUMPOUT(0x1A85998ACLL);
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__emplace_unique_key_args<long long,long long &,NSString * {__strong}&>(uint64_t a1, unint64_t *a2, _QWORD *a3, id *a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v8 = *a2;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 >= v9)
        v4 = v8 % v9;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == v8)
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4)
            break;
        }
      }
    }
  }
  v14 = (_QWORD *)(a1 + 16);
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v8;
  i[2] = *a3;
  i[3] = *a4;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__rehash<true>(a1, v20);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *i = *v22;
LABEL_38:
    *v22 = i;
    goto LABEL_39;
  }
  *i = *v14;
  *v14 = i;
  *(_QWORD *)(v21 + 8 * v4) = v14;
  if (*i)
  {
    v23 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9)
        v23 %= v9;
    }
    else
    {
      v23 &= v9 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1A3E72084(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,void *>>>::operator()[abi:sn180100](v2, v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__emplace_multi<long long &,long long &>(_QWORD *a1, unint64_t *a2, _QWORD *a3)
{
  _QWORD *v6;
  unint64_t v7;
  _QWORD *inserted;

  v6 = operator new(0x20uLL);
  v7 = *a2;
  v6[2] = *a2;
  v6[3] = *a3;
  *v6 = 0;
  v6[1] = v7;
  inserted = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__node_insert_multi_prepare((uint64_t)a1, v7, v6 + 2);
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__node_insert_multi_perform(a1, v6, inserted);
  return v6;
}

void sub_1A3E7210C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__equal_range_multi<long long>(_QWORD *a1, unint64_t *a2)
{
  _QWORD *result;
  _QWORD *v4;

  result = std::__hash_table<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>>>::find<long long>(a1, a2);
  if (result)
  {
    v4 = result;
    do
      v4 = (_QWORD *)*v4;
    while (v4 && v4[2] == *a2);
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>>>::__emplace_multi<NSString * const {__strong}&,NSString * {__strong}&>(_QWORD *a1, id *a2, id *a3)
{
  uint64_t inserted;
  uint64_t v6[3];

  std::__hash_table<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>>>::__construct_node<NSString * const {__strong}&,NSString * {__strong}&>((uint64_t)a1, a2, a3, (uint64_t)v6);
  inserted = std::__hash_table<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>>>::__node_insert_multi(a1, v6[0]);
  v6[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,void *>>>>::reset[abi:sn180100]((uint64_t)v6, 0);
  return inserted;
}

void sub_1A3E721B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,void *>>>>::reset[abi:sn180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

CFHashCode std::__hash_table<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>>>::__construct_node<NSString * const {__strong}&,NSString * {__strong}&>@<X0>(uint64_t a1@<X0>, id *a2@<X1>, id *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  CFHashCode result;

  v7 = a1 + 16;
  v8 = operator new(0x20uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *v8 = 0;
  v8[1] = 0;
  std::construct_at[abi:sn180100]<std::pair<NSString * const {__strong},NSString * {__strong}>,NSString * const&,NSString * const {__strong}&,NSString * {__strong}*>(v8 + 2, a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  result = CFHash((CFTypeRef)v8[2]);
  v8[1] = result;
  return result;
}

void sub_1A3E72240(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,void *>>>>::reset[abi:sn180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>>>::__node_insert_multi(_QWORD *a1, uint64_t a2)
{
  CFTypeRef *v4;
  CFHashCode v5;
  _QWORD *inserted;

  v4 = (CFTypeRef *)(a2 + 16);
  v5 = CFHash(*(CFTypeRef *)(a2 + 16));
  *(_QWORD *)(a2 + 8) = v5;
  inserted = std::__hash_table<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>>>::__node_insert_multi_prepare((uint64_t)a1, v5, v4);
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__node_insert_multi_perform(a1, (_QWORD *)a2, inserted);
  return a2;
}

_QWORD *std::construct_at[abi:sn180100]<std::pair<NSString * const {__strong},NSString * {__strong}>,NSString * const&,NSString * const {__strong}&,NSString * {__strong}*>(_QWORD *result, id *a2, id *a3)
{
  _QWORD *v4;

  if (result)
  {
    v4 = result;
    *result = *a2;
    v4[1] = *a3;
    return v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, CFTypeRef *a3)
{
  unint64_t v6;
  float v7;
  float v8;
  _BOOL8 v9;
  unint64_t v10;
  unint64_t v11;
  size_t v12;
  uint8x8_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  _BOOL4 v21;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    v9 = 1;
    if (v6 >= 3)
      v9 = (v6 & (v6 - 1)) != 0;
    v10 = v9 | (2 * v6);
    v11 = vcvtps_u32_f32(v7 / v8);
    if (v10 <= v11)
      v12 = v11;
    else
      v12 = v10;
    std::__hash_table<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>>>::__rehash<false>(a1, v12);
    v6 = *(_QWORD *)(a1 + 8);
  }
  v13 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v13.i16[0] = vaddlv_u8(v13);
  v14 = v13.u32[0];
  if (v13.u32[0] > 1uLL)
  {
    v15 = a2;
    if (v6 <= a2)
      v15 = a2 % v6;
  }
  else
  {
    v15 = (v6 - 1) & a2;
  }
  v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v15);
  if (v16)
  {
    v17 = (_QWORD *)*v16;
    if (*v16)
    {
      v18 = 0;
      do
      {
        v19 = v17[1];
        if (v14 > 1)
        {
          v20 = v17[1];
          if (v19 >= v6)
            v20 = v19 % v6;
        }
        else
        {
          v20 = v19 & (v6 - 1);
        }
        if (v20 != v15)
          break;
        v21 = v19 == a2 && CFEqual((CFTypeRef)v17[2], *a3) != 0;
        if ((v18 & !v21 & 1) != 0)
          break;
        v18 |= v21;
        v16 = (_QWORD *)*v16;
        v17 = (_QWORD *)*v16;
      }
      while (*v16);
    }
  }
  return v16;
}

void std::__hash_table<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>>>::__rehash<false>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>>>::__do_rehash<false>(a1, prime);
  }
}

void std::__hash_table<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>>>::__do_rehash<false>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  void *v11;
  uint64_t i;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  int v16;
  _QWORD *v17;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:sn180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(uint64_t **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      v10 = v9.u32[0];
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      for (i = *v7; *v7; i = *v7)
      {
        v13 = *(_QWORD *)(i + 8);
        if (v10 > 1)
        {
          if (v13 >= a2)
            v13 %= a2;
        }
        else
        {
          v13 &= a2 - 1;
        }
        if (v13 == v8)
        {
          v7 = (uint64_t *)i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v13))
        {
          v14 = *(_QWORD **)i;
          v15 = (_QWORD *)i;
          if (*(_QWORD *)i)
          {
            while (1)
            {
              v16 = CFEqual(*(CFTypeRef *)(i + 16), (CFTypeRef)v14[2]);
              v17 = (_QWORD *)*v15;
              if (!v16)
                break;
              v14 = (_QWORD *)*v17;
              v15 = (_QWORD *)*v15;
              if (!*v17)
                goto LABEL_30;
            }
            v14 = (_QWORD *)*v15;
            v17 = v15;
          }
          else
          {
            v17 = (_QWORD *)i;
          }
LABEL_30:
          *v7 = (uint64_t)v14;
          *v17 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v13);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v13) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = v7;
          v7 = (uint64_t *)i;
          v8 = v13;
        }
      }
    }
  }
  else
  {
    v11 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v11)
      operator delete(v11);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,void *>>>>::reset[abi:sn180100](uint64_t a1, uint64_t a2)
{
  id *v2;

  v2 = *(id **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {

    }
    operator delete(v2);
  }
}

void std::__destroy_at[abi:sn180100]<std::pair<NSString * const {__strong},NSString * {__strong}>,0>(id *a1)
{
  if (a1)
  {

  }
  else
  {
    __break(1u);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>>>::__emplace_multi<NSString * {__strong},NSString * {__strong}>(_QWORD *a1, const void **a2, uint64_t *a3)
{
  uint64_t inserted;
  uint64_t v6[3];

  std::__hash_table<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>>>::__construct_node<NSString * {__strong},NSString * {__strong}>((uint64_t)a1, a2, a3, (uint64_t)v6);
  inserted = std::__hash_table<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>>>::__node_insert_multi(a1, v6[0]);
  v6[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,void *>>>>::reset[abi:sn180100]((uint64_t)v6, 0);
  return inserted;
}

void sub_1A3E727B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,void *>>>>::reset[abi:sn180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

CFHashCode std::__hash_table<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>>>::__construct_node<NSString * {__strong},NSString * {__strong}>@<X0>(uint64_t a1@<X0>, const void **a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  const void *v9;
  uint64_t v10;
  CFHashCode result;

  v7 = a1 + 16;
  v8 = operator new(0x20uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *v8 = 0;
  v8[1] = 0;
  v9 = *a2;
  *a2 = 0;
  v10 = *a3;
  *a3 = 0;
  v8[2] = v9;
  v8[3] = v10;
  *(_BYTE *)(a4 + 16) = 1;
  result = CFHash(v9);
  v8[1] = result;
  return result;
}

void sub_1A3E72840(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,void *>>>>::reset[abi:sn180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t **std::__hash_table<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>>>::__equal_range_multi<NSString * {__strong}>(_QWORD *a1, CFTypeRef *a2)
{
  uint64_t **v3;
  uint64_t **v4;
  uint64_t **v5;

  v3 = std::__hash_table<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},std::unique_ptr<SafariShared::URLCompletionEntryExtras>>>>::find<NSString * {__strong}>(a1, a2);
  v4 = v3;
  if (v3)
  {
    v5 = v3;
    do
      v5 = (uint64_t **)*v5;
    while (v5 && CFEqual(v5[2], *a2));
  }
  return v4;
}

uint64_t std::__hash_table<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>>>::__deallocate_node(a1, *(id **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::hash<NSString * {__strong}>,std::equal_to<NSString * {__strong}>,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},NSString * {__strong}>,std::equal_to<NSString * {__strong}>,std::hash<NSString * {__strong}>,true>,std::allocator<std::__hash_value_type<NSString * {__strong},NSString * {__strong}>>>::__deallocate_node(uint64_t a1, id *a2)
{
  id *v2;
  id *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (id *)*v2;
      std::__destroy_at[abi:sn180100]<std::pair<NSString * const {__strong},NSString * {__strong}>,0>(v2 + 2);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_1A3E72ACC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3E72C54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A3E72D40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  v11 = v10;

  _Unwind_Resume(a1);
}

void sub_1A3E72F70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E73030(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E73208(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1A3E73288(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E73314(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_1A3E733A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A3E7343C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{

  _Unwind_Resume(a1);
}

void sub_1A3E73514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1A3E735D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E73640(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E73758(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E737E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E7384C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E738AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E73918(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E73FFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1A3E741E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E7438C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3E745F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E74788(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id currentSessionStartDate()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "safari_startOfDay");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

void sub_1A3E74B64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3E74E90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A3E750E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E751D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E75420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1A3E75628(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E75860(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E75A00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E75AE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

void sub_1A3E75BB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E75CAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3E75D3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E75EBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3E75F60(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3E76110(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E76278(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E76640(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E76788(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E76B78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3E76CBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E76DF0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E76EA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E76F1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3E76FA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A3E7702C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3E7725C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E7730C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E775E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

double *std::__equal_range[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,double *,double *,double,std::__identity>(double *result, double *a2, double *a3)
{
  unint64_t v3;
  double v4;
  unint64_t v5;
  double *v6;
  double *v7;
  unint64_t v8;
  double *v9;
  double *v10;
  double v11;
  double *v12;
  unint64_t v13;
  unint64_t v14;
  double *v15;
  double *v16;
  double v17;

  if (a2 == result)
    return a2;
  v3 = a2 - result;
  v4 = *a3;
  while (1)
  {
    v5 = v3 >> 1;
    v6 = &result[v3 >> 1];
    if (*v6 >= v4)
      break;
    result = v6 + 1;
    v5 = v3 + ~v5;
LABEL_7:
    v3 = v5;
    if (!v5)
      return result;
  }
  if (v4 < *v6)
  {
    a2 = &result[v3 >> 1];
    goto LABEL_7;
  }
  v7 = &result[v3 >> 1];
  if (v3 >= 2)
  {
    v7 = result;
    do
    {
      v8 = v5 >> 1;
      v9 = &v7[v5 >> 1];
      v11 = *v9;
      v10 = v9 + 1;
      v5 += ~(v5 >> 1);
      if (v11 < v4)
        v7 = v10;
      else
        v5 = v8;
    }
    while (v5);
  }
  v12 = v6 + 1;
  if (a2 == v12)
    return v7;
  v13 = a2 - v12;
  do
  {
    v14 = v13 >> 1;
    v15 = &v12[v13 >> 1];
    v17 = *v15;
    v16 = v15 + 1;
    v13 += ~(v13 >> 1);
    if (v4 < v17)
      v13 = v14;
    else
      v12 = v16;
  }
  while (v13);
  return v7;
}

unint64_t WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 8 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

id WBSHistorySHA512(void *a1, void *a2)
{
  id v3;
  id v4;
  const char *v5;
  id v6;
  CC_LONG v7;
  void *v8;
  CC_SHA512_CTX c;
  unsigned __int8 md[64];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v4, "length"))
  {
    v5 = (const char *)objc_msgSend(objc_retainAutorelease(v4), "UTF8String");
    CC_SHA512_Init(&c);
    v6 = objc_retainAutorelease(v3);
    CC_SHA512_Update(&c, (const void *)objc_msgSend(v6, "bytes"), objc_msgSend(v6, "length"));
    v7 = strlen(v5);
    CC_SHA512_Update(&c, v5, v7);
    CC_SHA512_Final(md, &c);
    objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", md, 64);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

void sub_1A3E779AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void WBSSQLiteSHA512(sqlite3_context *a1, uint64_t a2, sqlite3_value **a3)
{
  const unsigned __int8 *v5;
  const void *v6;
  CC_LONG v7;
  CC_LONG v8;
  CC_SHA512_CTX c;
  unsigned __int8 md[64];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (sqlite3_value_type(*a3) == 5)
  {
    sqlite3_result_null(a1);
  }
  else
  {
    v5 = sqlite3_value_text(*a3);
    CC_SHA512_Init(&c);
    v6 = sqlite3_value_blob(a3[1]);
    v7 = sqlite3_value_bytes(a3[1]);
    CC_SHA512_Update(&c, v6, v7);
    v8 = strlen((const char *)v5);
    CC_SHA512_Update(&c, v5, v8);
    CC_SHA512_Final(md, &c);
    sqlite3_result_blob(a1, md, 64, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  }
}

void WBSSQLiteExtractDomainExpansion(sqlite3_context *a1, uint64_t a2, sqlite3_value **a3)
{
  const unsigned __int8 *v5;
  const unsigned __int8 *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;

  if (sqlite3_value_type(*a3) == 5 || (v5 = sqlite3_value_text(*a3)) == 0)
  {
    sqlite3_result_null(a1);
    return;
  }
  v6 = v5;
  v7 = (void *)MEMORY[0x1A8599CE4]();
  v8 = (void *)MEMORY[0x1E0C99E98];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v6);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "URLWithString:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "host");
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v11, "length")
    && objc_msgSend(v11, "rangeOfString:options:", CFSTR(".com"), 13) != 0x7FFFFFFFFFFFFFFFLL)
  {
    if (objc_msgSend(v11, "rangeOfString:options:", CFSTR("www."), 9) == 0x7FFFFFFFFFFFFFFFLL)
    {
      objc_msgSend(v11, "substringWithRange:", 0, objc_msgSend(v11, "length") - 4);
      v12 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      sqlite3_result_text(a1, (const char *)objc_msgSend(v12, "UTF8String"), -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
    }
    else
    {
      if (!objc_msgSend(v11, "caseInsensitiveCompare:", CFSTR("www.com")))
      {
        sqlite3_result_text(a1, "www", 3, 0);
        goto LABEL_13;
      }
      objc_msgSend(v11, "substringWithRange:", 4, objc_msgSend(v11, "length") - 8);
      v12 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      sqlite3_result_text(a1, (const char *)objc_msgSend(v12, "UTF8String"), -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
    }

  }
  else
  {
    sqlite3_result_null(a1);
  }
LABEL_13:

  objc_autoreleasePoolPop(v7);
}

void sub_1A3E77CBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void WBSSQLiteExtractHostname(sqlite3_context *a1, uint64_t a2, sqlite3_value **a3)
{
  const unsigned __int8 *v5;
  const UInt8 *v6;
  CFIndex v7;
  void *v8;
  CFURLRef v9;
  void *v10;
  void *v11;

  if (sqlite3_value_type(*a3) == 5 || (v5 = sqlite3_value_text(*a3)) == 0)
  {
    sqlite3_result_null(a1);
  }
  else
  {
    v6 = v5;
    v7 = sqlite3_value_bytes(*a3);
    v8 = (void *)MEMORY[0x1A8599CE4]();
    v9 = CFURLCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v6, v7, 0x8000100u, 0);
    -[__CFURL safari_userVisibleHostWithoutWWWSubdomain](v9, "safari_userVisibleHostWithoutWWWSubdomain");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = v10;
    if (v10)
      sqlite3_result_text(a1, (const char *)objc_msgSend(objc_retainAutorelease(v10), "UTF8String"), -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
    else
      sqlite3_result_null(a1);

    objc_autoreleasePoolPop(v8);
  }
}

void sub_1A3E77DE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void WBSSQLiteExtractHighLevelDomain(sqlite3_context *a1, uint64_t a2, sqlite3_value **a3)
{
  const unsigned __int8 *v5;
  const UInt8 *v6;
  CFIndex v7;
  void *v8;
  CFURLRef v9;
  void *v10;
  void *v11;

  if (sqlite3_value_type(*a3) == 5 || (v5 = sqlite3_value_text(*a3)) == 0)
  {
    sqlite3_result_null(a1);
  }
  else
  {
    v6 = v5;
    v7 = sqlite3_value_bytes(*a3);
    v8 = (void *)MEMORY[0x1A8599CE4]();
    v9 = CFURLCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v6, v7, 0x8000100u, 0);
    -[__CFURL host](v9, "host");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "safari_highLevelDomainFromHost");
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    if (v11)
      sqlite3_result_text(a1, (const char *)objc_msgSend(objc_retainAutorelease(v11), "UTF8String"), -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
    else
      sqlite3_result_null(a1);

    objc_autoreleasePoolPop(v8);
  }
}

void sub_1A3E77EF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL SafariShared::LatestVisitInformationMap::find(SafariShared::LatestVisitInformationMap *this, unint64_t a2, uint64_t *a3)
{
  _QWORD *v4;
  unint64_t v6;

  v6 = a2;
  v4 = std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(this, &v6);
  if (v4)
    *a3 = v4[3];
  return v4 != 0;
}

uint64_t SafariShared::LatestVisitInformationMap::update(SafariShared::LatestVisitInformationMap *this, unint64_t a2, int64_t a3, double a4, int a5)
{
  double *v9;
  double v10;
  int v11;
  uint64_t v12;
  unint64_t v14[3];
  int v15;
  unint64_t v16;

  v16 = a2;
  v9 = (double *)std::__hash_table<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,WBSHistoryItem * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,WBSHistoryItem * {__strong}>>>::find<long long>(this, &v16);
  if (v9)
  {
    v10 = v9[4];
    if (v10 < a4 || v10 == a4 && ((v11 = *((_DWORD *)v9 + 10), v11 > a5) || v11 == a5 && *((_QWORD *)v9 + 3) < a3))
    {
      *((_QWORD *)v9 + 3) = a3;
      v9[4] = a4;
      v12 = 1;
      *((_DWORD *)v9 + 10) = a5;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    v14[0] = v16;
    v14[1] = a3;
    *(double *)&v14[2] = a4;
    v15 = a5;
    std::__hash_table<std::__hash_value_type<long long,SafariShared::LatestVisitInformation>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,SafariShared::LatestVisitInformation>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,SafariShared::LatestVisitInformation>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,SafariShared::LatestVisitInformation>>>::__emplace_unique_key_args<long long,std::pair<long long,SafariShared::LatestVisitInformation>>((uint64_t)this, v14, (uint64_t)v14);
    return 1;
  }
  return v12;
}

_QWORD *SafariShared::LatestVisitInformationMap::lastVisitsForItems(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v5;
  _QWORD *v6;
  char v7;
  unint64_t v8;

  v3 = *(_QWORD **)(a2 + 16);
  if (v3)
  {
    v5 = result;
    do
    {
      v8 = v3[2];
      result = std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(v5, &v8);
      if (result)
      {
        v6 = result + 3;
        result = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__emplace_unique_key_args<long long,long long const&,long long const&>(a3, &v8, &v8, result + 3);
        if (!v7)
          result[3] = *v6;
      }
      v3 = (_QWORD *)*v3;
    }
    while (v3);
  }
  return result;
}

uint64_t *SafariShared::LatestVisitInformationMap::removeItems(uint64_t *result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD **)(a2 + 16);
  if (v2)
  {
    v3 = result;
    do
    {
      v4 = v2[2];
      result = std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__erase_unique<long long>(v3, &v4);
      v2 = (_QWORD *)*v2;
    }
    while (v2);
  }
  return result;
}

double SafariShared::LatestVisitInformationMap::lastVisitTime(SafariShared::LatestVisitInformationMap *this, unint64_t a2)
{
  double *v2;
  unint64_t v4;

  v4 = a2;
  v2 = (double *)std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(this, &v4);
  if (v2)
    return v2[4];
  else
    return 0.0;
}

_QWORD *SafariShared::LatestVisitInformationMap::lastVisitID(SafariShared::LatestVisitInformationMap *this, unint64_t a2)
{
  _QWORD *result;
  unint64_t v3;

  v3 = a2;
  result = std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(this, &v3);
  if (result)
    return (_QWORD *)result[3];
  return result;
}

uint64_t WBSSQLiteComputeLatestVisitStep(sqlite3_context *a1, uint64_t a2, sqlite3_value **a3)
{
  SafariShared::LatestVisitInformationMap *v4;
  sqlite3_int64 v5;
  sqlite3_int64 v6;
  double v7;
  int v8;

  v4 = (SafariShared::LatestVisitInformationMap *)sqlite3_user_data(a1);
  v5 = sqlite3_value_int64(*a3);
  v6 = sqlite3_value_int64(a3[1]);
  v7 = sqlite3_value_double(a3[2]);
  v8 = sqlite3_value_int(a3[3]);
  return SafariShared::LatestVisitInformationMap::update(v4, v5, v6, v7, v8);
}

void WBSSQLiteLatestVisitFor(sqlite3_context *a1, uint64_t a2, sqlite3_value **a3)
{
  _QWORD *v5;
  _QWORD *v6;
  sqlite3_int64 v7;

  v5 = sqlite3_user_data(a1);
  v7 = sqlite3_value_int64(*a3);
  v6 = std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(v5, (unint64_t *)&v7);
  if (v6)
    sqlite3_result_int64(a1, v6[3]);
  else
    sqlite3_result_null(a1);
}

void WBSSQLiteVisitScore(sqlite3_context *a1, uint64_t a2, sqlite3_value **a3)
{
  char v5;
  int v6;
  float v7;
  sqlite3_int64 v8;

  v5 = sqlite3_value_int(*a3);
  v6 = sqlite3_value_int(a3[1]);
  v7 = WBHistoryVisitWeightForAttributesAndOrigin(v5, v6);
  v8 = (int)WBSHistoryVisitScoreForWeightedVisitCount(v7);
  sqlite3_result_int64(a1, v8);
}

_BYTE *WBSSQLiteDailyVisitCountsStep(sqlite3_context *a1, uint64_t a2, sqlite3_value **a3)
{
  _BYTE *result;
  _BYTE *v5;
  unint64_t v6;

  result = sqliteScoreAggregationContext(a1, *a3, a3[1], 13);
  if (result)
  {
    v5 = result;
    result = (_BYTE *)sqlite3_value_int(a3[2]);
    v6 = *((_QWORD *)v5 + 1) - vcvtpd_u64_f64((double)(int)result / 86400.0);
    if (v6 < *((_QWORD *)v5 + 3))
    {
      result = (_BYTE *)sqlite3_value_int(a3[3]);
      *(_DWORD *)&v5[4 * v6 + 32] += (_DWORD)result;
    }
  }
  return result;
}

_BYTE *sqliteScoreAggregationContext(sqlite3_context *a1, sqlite3_value *a2, sqlite3_value *a3, int a4)
{
  _BYTE *v7;
  _BYTE *v8;
  double v9;
  unint64_t v10;
  unint64_t v11;

  v7 = sqlite3_aggregate_context(a1, 4 * a4 + 32);
  v8 = v7;
  if (v7)
  {
    if (!*v7)
    {
      v9 = sqlite3_value_double(a2);
      v10 = vcvtpd_u64_f64(sqlite3_value_double(a3) / 86400.0);
      v11 = v10 - vcvtpd_u64_f64(v9 / 86400.0);
      if (v11 >= 0x2F)
        v11 = 47;
      *((_QWORD *)v8 + 1) = v10;
      *((_QWORD *)v8 + 2) = v11;
      if (v11 > 0xD)
        v11 -= 7 * vcvtpd_u64_f64((double)(v11 - 14) / (double)7uLL);
      *((_QWORD *)v8 + 3) = v11 + 1;
      *v8 = 1;
    }
  }
  else
  {
    sqlite3_result_error_nomem(a1);
  }
  return v8;
}

void WBSSQLiteDailyVisitCountsFinal(sqlite3_context *a1)
{
  _BYTE *v2;

  v2 = sqliteScoreAggregationContext(a1, 0, 0, 13);
  if (v2)
    sqlite3_result_blob(a1, v2 + 32, 4 * *((_DWORD *)v2 + 6), (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
}

_BYTE *WBSSQLiteWeeklyVisitCountsStep(sqlite3_context *a1, uint64_t a2, sqlite3_value **a3)
{
  _BYTE *result;
  _BYTE *v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;

  result = sqliteScoreAggregationContext(a1, *a3, a3[1], 5);
  if (result)
  {
    v5 = result;
    result = (_BYTE *)sqlite3_value_int(a3[2]);
    v6 = *((_QWORD *)v5 + 1) - vcvtpd_u64_f64((double)(int)result / 86400.0);
    v7 = *((_QWORD *)v5 + 3);
    v8 = v6 >= v7;
    v9 = v6 - v7;
    if (v8)
    {
      v10 = v9 / 7;
      if (v9 / 7 < 5)
      {
        result = (_BYTE *)sqlite3_value_int(a3[3]);
        *(_DWORD *)&v5[4 * v10 + 32] += (_DWORD)result;
      }
    }
  }
  return result;
}

void WBSSQLiteWeeklyVisitCountsFinal(sqlite3_context *a1)
{
  _QWORD *v2;
  unint64_t v3;

  v2 = sqliteScoreAggregationContext(a1, 0, 0, 5);
  if (v2)
  {
    v3 = v2[2] - v2[3] + 1;
    if (v3 >= 7)
      sqlite3_result_blob(a1, v2 + 4, 4 * (v3 / 7), (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
    else
      sqlite3_result_null(a1);
  }
}

char *std::__hash_table<std::__hash_value_type<long long,SafariShared::LatestVisitInformation>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,SafariShared::LatestVisitInformation>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,SafariShared::LatestVisitInformation>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,SafariShared::LatestVisitInformation>>>::__emplace_unique_key_args<long long,std::pair<long long,SafariShared::LatestVisitInformation>>(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  char *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (char *)*v9;
      if (*v9)
      {
        do
        {
          v11 = *((_QWORD *)v10 + 1);
          if (v11 == v6)
          {
            if (*((_QWORD *)v10 + 2) == v6)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = *(char **)v10;
        }
        while (v10);
      }
    }
  }
  v10 = (char *)operator new(0x30uLL);
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = v6;
  *((_QWORD *)v10 + 2) = *(_QWORD *)a3;
  *(_OWORD *)(v10 + 24) = *(_OWORD *)(a3 + 8);
  *((_QWORD *)v10 + 5) = *(_QWORD *)(a3 + 24);
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *(_QWORD *)v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *(_QWORD *)v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*(_QWORD *)v10)
  {
    v20 = *(_QWORD *)(*(_QWORD *)v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_1A3E787AC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__emplace_unique_key_args<long long,long long const&,long long const&>(uint64_t a1, unint64_t *a2, _QWORD *a3, uint64_t *a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v8 = *a2;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 >= v9)
        v4 = v8 % v9;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == v8)
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v8;
  v14 = *a4;
  i[2] = *a3;
  i[3] = v14;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__rehash<true>(a1, v20);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *i = *v22;
LABEL_38:
    *v22 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v21 + 8 * v4) = a1 + 16;
  if (*i)
  {
    v23 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9)
        v23 %= v9;
    }
    else
    {
      v23 &= v9 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1A3E789D4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1A3E78B24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E78D64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3E78EC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E79048(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E79174(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E79244(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E79370(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E794A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E797D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E79B88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sqliteVisitCountScore(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  double v5;

  if (sqlite3_value_type(*a3) == 5)
  {
    sqlite3_result_null(a1);
  }
  else
  {
    *(float *)&v5 = (float)sqlite3_value_int64(*a3);
    sqlite3_result_int64(a1, +[WBSHistoryVisit scoreForWeightedVisitCount:](WBSHistoryVisit, "scoreForWeightedVisitCount:", v5));
  }
}

void sqliteVisitBlobScore(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  int *v5;
  int v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  double v10;
  char *v11;
  uint64_t v12;
  _DWORD *v13;
  int v14;
  _QWORD v15[2];

  v15[1] = *MEMORY[0x1E0C80C00];
  if (sqlite3_value_type(*a3) == 5)
  {
    sqlite3_result_null(a1);
  }
  else
  {
    v5 = (int *)sqlite3_value_blob(*a3);
    v6 = sqlite3_value_bytes(*a3);
    v7 = MEMORY[0x1E0C80A78]();
    v11 = (char *)v15 - v9;
    if (v7 >= 4)
    {
      if (v8 <= 1)
        v12 = 1;
      else
        v12 = v8;
      v13 = (_DWORD *)((char *)v15 - v9);
      do
      {
        v14 = *v5++;
        *(float *)&v10 = (float)v14;
        *v13++ = +[WBSHistoryVisit scoreForWeightedVisitCount:](WBSHistoryVisit, "scoreForWeightedVisitCount:", v10);
        --v12;
      }
      while (v12);
    }
    sqlite3_result_blob(a1, v11, v6, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  }
}

void sub_1A3E79E20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E79F44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E7A1CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E7A358(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t indexExists(WBSSQLiteDatabase *a1, NSString *a2)
{
  unsigned int v3;
  uint64_t v4;
  id *v6;
  int v7;
  NSString *v8;

  v8 = a2;
  v7 = 0;
  v6 = (id *)&v7;
  v3 = SafariShared::WBSSQLiteDatabaseEnumerate<NSString * {__strong}&,std::tuple<int &>>(a1, 0, CFSTR("SELECT COUNT(*) FROM sqlite_master WHERE type = 'index' AND name = ?"), (id *)&v8, &v6);
  if (v7 == 1)
    v4 = v3;
  else
    v4 = 0;

  return v4;
}

void sub_1A3E7A3E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{

  _Unwind_Resume(a1);
}

void sub_1A3E7A788(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E7A8C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E7A964(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E7A9CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E7AFAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,WTF *a32,int a33,void *a34,void *a35,void *a36,uint64_t a37,void *a38,WTF *a39,int a40)
{
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;

  _Unwind_Resume(a1);
}

void sub_1A3E7B200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  v16 = v15;

  _Unwind_Resume(a1);
}

void sub_1A3E7B6AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF *a17, int a18, WTF *a19, int a20,WTF *a21,int a22,WTF *a23,int a24)
{

  _Unwind_Resume(a1);
}

void sub_1A3E7BFFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22)
{

  _Unwind_Resume(a1);
}

uint64_t SafariShared::WBSSQLiteDatabaseEnumerate<long long &,std::tuple<long long &>>(void *a1, uint64_t a2, void *a3, sqlite3_int64 *a4, sqlite3_int64 **a5)
{
  id v9;
  id v10;
  void *v11;
  void *v12;
  sqlite3_stmt *v13;
  sqlite3_int64 *v14;
  uint64_t v15;
  sqlite3_int64 *v17[2];

  v9 = a1;
  v10 = a3;
  v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89CC8]), "initWithDatabase:query:error:", v9, v10, a2);
  v12 = v11;
  if (v11)
  {
    v13 = (sqlite3_stmt *)objc_msgSend(v11, "handle");
    v14 = *a5;
    v17[0] = a4;
    v17[1] = v14;
    v15 = SafariShared::_WBSSQLiteStatementBindOrStep<0,1,std::tuple<long long &,std::tuple<long long &>>>(v9, v13, a2, v17);
    objc_msgSend(v12, "invalidate");
  }
  else
  {
    v15 = 0;
  }

  return v15;
}

void sub_1A3E7C22C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3E7C498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1A3E7C55C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E7C5E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E7C6E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::WBSSQLiteDatabaseEnumerate<NSString * {__strong}&,std::tuple<int &>>(void *a1, uint64_t a2, void *a3, id *a4, id **a5)
{
  id v9;
  id v10;
  void *v11;
  void *v12;
  sqlite3_stmt *v13;
  id *v14;
  uint64_t v15;
  id *v17[2];

  v9 = a1;
  v10 = a3;
  v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89CC8]), "initWithDatabase:query:error:", v9, v10, a2);
  v12 = v11;
  if (v11)
  {
    v13 = (sqlite3_stmt *)objc_msgSend(v11, "handle");
    v14 = *a5;
    v17[0] = a4;
    v17[1] = v14;
    v15 = SafariShared::_WBSSQLiteStatementBindOrStep<0,1,std::tuple<NSString * {__strong}&,std::tuple<int &>>>(v9, v13, a2, v17);
    objc_msgSend(v12, "invalidate");
  }
  else
  {
    v15 = 0;
  }

  return v15;
}

void sub_1A3E7C7E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<0,1,std::tuple<NSString * {__strong}&,std::tuple<int &>>>(void *a1, sqlite3_stmt *a2, uint64_t a3, id **a4)
{
  id v7;
  id v8;
  void *v9;
  int v10;
  int v11;
  uint64_t v12;

  v7 = a1;
  v8 = **a4;
  v9 = v8;
  if (v8)
    v10 = sqlite3_bind_text(a2, 1, (const char *)objc_msgSend(objc_retainAutorelease(v8), "UTF8String"), -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  else
    v10 = sqlite3_bind_null(a2, 1);
  v11 = v10;

  if (v11)
  {
    objc_msgSend(v7, "reportErrorWithCode:statement:error:", 1, a2, a3);
    v12 = 0;
  }
  else
  {
    v12 = SafariShared::_WBSSQLiteStatementBindOrStep<1,1,std::tuple<NSString * {__strong}&,std::tuple<int &>>>(v7, a2, a3, (uint64_t)a4);
  }

  return v12;
}

void sub_1A3E7C8D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<1,1,std::tuple<NSString * {__strong}&,std::tuple<int &>>>(void *a1, sqlite3_stmt *a2, uint64_t a3, uint64_t a4)
{
  id v7;
  uint64_t v8;
  uint64_t v9;

  v7 = a1;
  v8 = sqlite3_step(a2);
  if ((_DWORD)v8 == 100
    && (**(_DWORD **)(a4 + 8) = sqlite3_column_int(a2, 0), v8 = sqlite3_step(a2), (_DWORD)v8 == 101))
  {
    v9 = 1;
  }
  else
  {
    objc_msgSend(v7, "reportErrorWithCode:statement:error:", v8, a2, a3);
    v9 = 0;
  }

  return v9;
}

void sub_1A3E7C988(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<NSData * {__strong}&,long>(void *a1, _QWORD *a2, void *a3, _QWORD *a4, _QWORD *a5)
{
  id v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  id v17;

  v9 = a1;
  v10 = a3;
  v17 = 0;
  v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89CC8]), "initWithDatabase:query:error:", v9, v10, &v17);
  v12 = v17;
  v13 = v12;
  if (v11)
  {
    SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSData * {__strong}&,long>(v11, a4, a5);
    v14 = objc_msgSend(v11, "execute");
    objc_msgSend(v11, "invalidate");
    if ((v14 - 100) >= 2 && (_DWORD)v14 != 0)
      objc_msgSend(v9, "reportErrorWithCode:statement:error:", v14, objc_msgSend(v11, "handle"), a2);
  }
  else
  {
    if (a2)
      *a2 = objc_retainAutorelease(v12);
    v14 = objc_msgSend(v13, "code");
  }

  return v14;
}

void sub_1A3E7CAA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSData * {__strong}&,long>(void *a1, _QWORD *a2, _QWORD *a3)
{
  id v5;

  v5 = a1;
  objc_msgSend(v5, "bindData:atParameterIndex:", *a2, 1);
  objc_msgSend(v5, "bindInt64:atParameterIndex:", *a3, 2);

}

void sub_1A3E7CB20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<long long &,NSString * const {__strong}&>(void *a1, _QWORD *a2, void *a3, _QWORD *a4, _QWORD *a5)
{
  id v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  id v17;

  v9 = a1;
  v10 = a3;
  v17 = 0;
  v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89CC8]), "initWithDatabase:query:error:", v9, v10, &v17);
  v12 = v17;
  v13 = v12;
  if (v11)
  {
    SafariShared::_WBSSQLiteStatementBindAllParameters<1,long long &,NSString * const {__strong}&>(v11, a4, a5);
    v14 = objc_msgSend(v11, "execute");
    objc_msgSend(v11, "invalidate");
    if ((v14 - 100) >= 2 && (_DWORD)v14 != 0)
      objc_msgSend(v9, "reportErrorWithCode:statement:error:", v14, objc_msgSend(v11, "handle"), a2);
  }
  else
  {
    if (a2)
      *a2 = objc_retainAutorelease(v12);
    v14 = objc_msgSend(v13, "code");
  }

  return v14;
}

void sub_1A3E7CC44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,long long &,NSString * const {__strong}&>(void *a1, _QWORD *a2, _QWORD *a3)
{
  id v5;

  v5 = a1;
  objc_msgSend(v5, "bindInt64:atParameterIndex:", *a2, 1);
  objc_msgSend(v5, "bindString:atParameterIndex:", *a3, 2);

}

void sub_1A3E7CCBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<NSString * const {__strong}&,long long &>(void *a1, _QWORD *a2, void *a3, _QWORD *a4, _QWORD *a5)
{
  id v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  id v17;

  v9 = a1;
  v10 = a3;
  v17 = 0;
  v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89CC8]), "initWithDatabase:query:error:", v9, v10, &v17);
  v12 = v17;
  v13 = v12;
  if (v11)
  {
    SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * const {__strong}&,long long &>(v11, a4, a5);
    v14 = objc_msgSend(v11, "execute");
    objc_msgSend(v11, "invalidate");
    if ((v14 - 100) >= 2 && (_DWORD)v14 != 0)
      objc_msgSend(v9, "reportErrorWithCode:statement:error:", v14, objc_msgSend(v11, "handle"), a2);
  }
  else
  {
    if (a2)
      *a2 = objc_retainAutorelease(v12);
    v14 = objc_msgSend(v13, "code");
  }

  return v14;
}

void sub_1A3E7CDE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * const {__strong}&,long long &>(void *a1, _QWORD *a2, _QWORD *a3)
{
  id v5;

  v5 = a1;
  objc_msgSend(v5, "bindString:atParameterIndex:", *a2, 1);
  objc_msgSend(v5, "bindInt64:atParameterIndex:", *a3, 2);

}

void sub_1A3E7CE58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<NSString * {__strong}&,int &,int,NSData * {__strong}&,NSData * {__strong}&,NSData * {__strong}&>(void *a1, _QWORD *a2, void *a3, _QWORD *a4, unsigned int *a5, unsigned int *a6, _QWORD *a7, _QWORD *a8, _QWORD *a9)
{
  id v16;
  id v17;
  void *v18;
  id v19;
  void *v20;
  uint64_t v21;
  id v24;

  v16 = a1;
  v17 = a3;
  v24 = 0;
  v18 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89CC8]), "initWithDatabase:query:error:", v16, v17, &v24);
  v19 = v24;
  v20 = v19;
  if (v18)
  {
    SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * {__strong}&,int &,int,NSData * {__strong}&,NSData * {__strong}&,NSData * {__strong}&>(v18, a4, a5, a6, a7, a8, a9);
    v21 = objc_msgSend(v18, "execute");
    objc_msgSend(v18, "invalidate");
    if ((v21 - 100) >= 2 && (_DWORD)v21 != 0)
      objc_msgSend(v16, "reportErrorWithCode:statement:error:", v21, objc_msgSend(v18, "handle"), a2);
  }
  else
  {
    if (a2)
      *a2 = objc_retainAutorelease(v19);
    v21 = objc_msgSend(v20, "code");
  }

  return v21;
}

void sub_1A3E7CFA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * {__strong}&,int &,int,NSData * {__strong}&,NSData * {__strong}&,NSData * {__strong}&>(void *a1, _QWORD *a2, unsigned int *a3, unsigned int *a4, _QWORD *a5, _QWORD *a6, _QWORD *a7)
{
  id v13;

  v13 = a1;
  objc_msgSend(v13, "bindString:atParameterIndex:", *a2, 1);
  SafariShared::_WBSSQLiteStatementBindAllParameters<2,int &,int,NSData * {__strong}&,NSData * {__strong}&,NSData * {__strong}&>(v13, a3, a4, a5, a6, a7);

}

void sub_1A3E7D044(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<2,int &,int,NSData * {__strong}&,NSData * {__strong}&,NSData * {__strong}&>(void *a1, unsigned int *a2, unsigned int *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6)
{
  id v11;

  v11 = a1;
  objc_msgSend(v11, "bindInt:atParameterIndex:", *a2, 2);
  SafariShared::_WBSSQLiteStatementBindAllParameters<3,int,NSData * {__strong}&,NSData * {__strong}&,NSData * {__strong}&>(v11, a3, a4, a5, a6);

}

void sub_1A3E7D0CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<3,int,NSData * {__strong}&,NSData * {__strong}&,NSData * {__strong}&>(void *a1, unsigned int *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  id v9;

  v9 = a1;
  objc_msgSend(v9, "bindInt:atParameterIndex:", *a2, 3);
  SafariShared::_WBSSQLiteStatementBindAllParameters<4,NSData * {__strong}&,NSData * {__strong}&,NSData * {__strong}&>(v9, a3, a4, a5);

}

void sub_1A3E7D144(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<4,NSData * {__strong}&,NSData * {__strong}&,NSData * {__strong}&>(void *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  id v7;

  v7 = a1;
  objc_msgSend(v7, "bindData:atParameterIndex:", *a2, 4);
  SafariShared::_WBSSQLiteStatementBindAllParameters<5,NSData * {__strong}&,NSData * {__strong}&>(v7, a3, a4);

}

void sub_1A3E7D1B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<5,NSData * {__strong}&,NSData * {__strong}&>(void *a1, _QWORD *a2, _QWORD *a3)
{
  id v5;

  v5 = a1;
  objc_msgSend(v5, "bindData:atParameterIndex:", *a2, 5);
  objc_msgSend(v5, "bindData:atParameterIndex:", *a3, 6);

}

void sub_1A3E7D218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<long long &,double &,NSString * {__strong}&,unsigned long &,BOOL &,BOOL &,BOOL &>(void *a1, _QWORD *a2, void *a3, _QWORD *a4, double *a5, _QWORD *a6, _QWORD *a7, unsigned __int8 *a8, unsigned __int8 *a9, unsigned __int8 *a10)
{
  id v17;
  id v18;
  void *v19;
  id v20;
  void *v21;
  uint64_t v22;
  id v25;

  v17 = a1;
  v18 = a3;
  v25 = 0;
  v19 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89CC8]), "initWithDatabase:query:error:", v17, v18, &v25);
  v20 = v25;
  v21 = v20;
  if (v19)
  {
    SafariShared::_WBSSQLiteStatementBindAllParameters<1,long long &,double &,NSString * {__strong}&,unsigned long &,BOOL &,BOOL &,BOOL &>(v19, a4, a5, a6, a7, a8, a9, a10);
    v22 = objc_msgSend(v19, "execute");
    objc_msgSend(v19, "invalidate");
    if ((v22 - 100) >= 2 && (_DWORD)v22 != 0)
      objc_msgSend(v17, "reportErrorWithCode:statement:error:", v22, objc_msgSend(v19, "handle"), a2);
  }
  else
  {
    if (a2)
      *a2 = objc_retainAutorelease(v20);
    v22 = objc_msgSend(v21, "code");
  }

  return v22;
}

void sub_1A3E7D360(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,long long &,double &,NSString * {__strong}&,unsigned long &,BOOL &,BOOL &,BOOL &>(void *a1, _QWORD *a2, double *a3, _QWORD *a4, _QWORD *a5, unsigned __int8 *a6, unsigned __int8 *a7, unsigned __int8 *a8)
{
  id v15;

  v15 = a1;
  objc_msgSend(v15, "bindInt64:atParameterIndex:", *a2, 1);
  SafariShared::_WBSSQLiteStatementBindAllParameters<2,double &,NSString * {__strong}&,unsigned long &,BOOL &,BOOL &,BOOL &>(v15, a3, a4, a5, a6, a7, a8);

}

void sub_1A3E7D414(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<2,double &,NSString * {__strong}&,unsigned long &,BOOL &,BOOL &,BOOL &>(void *a1, double *a2, _QWORD *a3, _QWORD *a4, unsigned __int8 *a5, unsigned __int8 *a6, unsigned __int8 *a7)
{
  id v13;

  v13 = a1;
  objc_msgSend(v13, "bindDouble:atParameterIndex:", 2, *a2);
  SafariShared::_WBSSQLiteStatementBindAllParameters<3,NSString * {__strong}&,unsigned long &,BOOL &,BOOL &,BOOL &>(v13, a3, a4, a5, a6, a7);

}

void sub_1A3E7D4A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<3,NSString * {__strong}&,unsigned long &,BOOL &,BOOL &,BOOL &>(void *a1, _QWORD *a2, _QWORD *a3, unsigned __int8 *a4, unsigned __int8 *a5, unsigned __int8 *a6)
{
  id v11;

  v11 = a1;
  objc_msgSend(v11, "bindString:atParameterIndex:", *a2, 3);
  SafariShared::_WBSSQLiteStatementBindAllParameters<4,unsigned long &,BOOL &,BOOL &,BOOL &>(v11, a3, a4, a5, a6);

}

void sub_1A3E7D52C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<4,unsigned long &,BOOL &,BOOL &,BOOL &>(void *a1, _QWORD *a2, unsigned __int8 *a3, unsigned __int8 *a4, unsigned __int8 *a5)
{
  id v9;

  v9 = a1;
  objc_msgSend(v9, "bindInt64:atParameterIndex:", *a2, 4);
  SafariShared::_WBSSQLiteStatementBindAllParameters<5,BOOL &,BOOL &,BOOL &>(v9, a3, a4, a5);

}

void sub_1A3E7D5A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<5,BOOL &,BOOL &,BOOL &>(void *a1, unsigned __int8 *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  id v7;

  v7 = a1;
  objc_msgSend(v7, "bindInt:atParameterIndex:", *a2, 5);
  SafariShared::_WBSSQLiteStatementBindAllParameters<6,BOOL &,BOOL &>(v7, a3, a4);

}

void sub_1A3E7D614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<6,BOOL &,BOOL &>(void *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  id v5;

  v5 = a1;
  objc_msgSend(v5, "bindInt:atParameterIndex:", *a2, 6);
  objc_msgSend(v5, "bindInt:atParameterIndex:", *a3, 7);

}

void sub_1A3E7D678(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<unsigned long const&,long long &>(void *a1, _QWORD *a2, void *a3, _QWORD *a4, _QWORD *a5)
{
  id v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  id v17;

  v9 = a1;
  v10 = a3;
  v17 = 0;
  v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89CC8]), "initWithDatabase:query:error:", v9, v10, &v17);
  v12 = v17;
  v13 = v12;
  if (v11)
  {
    SafariShared::_WBSSQLiteStatementBindAllParameters<1,unsigned long const&,long long &>(v11, a4, a5);
    v14 = objc_msgSend(v11, "execute");
    objc_msgSend(v11, "invalidate");
    if ((v14 - 100) >= 2 && (_DWORD)v14 != 0)
      objc_msgSend(v9, "reportErrorWithCode:statement:error:", v14, objc_msgSend(v11, "handle"), a2);
  }
  else
  {
    if (a2)
      *a2 = objc_retainAutorelease(v12);
    v14 = objc_msgSend(v13, "code");
  }

  return v14;
}

void sub_1A3E7D79C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,unsigned long const&,long long &>(void *a1, _QWORD *a2, _QWORD *a3)
{
  id v5;

  v5 = a1;
  objc_msgSend(v5, "bindInt64:atParameterIndex:", *a2, 1);
  objc_msgSend(v5, "bindInt64:atParameterIndex:", *a3, 2);

}

void sub_1A3E7D814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<0,1,std::tuple<long long &,std::tuple<long long &>>>(void *a1, sqlite3_stmt *a2, uint64_t a3, sqlite3_int64 **a4)
{
  id v7;
  uint64_t v8;

  v7 = a1;
  if (sqlite3_bind_int64(a2, 1, **a4))
  {
    objc_msgSend(v7, "reportErrorWithCode:statement:error:", 1, a2, a3);
    v8 = 0;
  }
  else
  {
    v8 = SafariShared::_WBSSQLiteStatementBindOrStep<1,1,std::tuple<long long &,std::tuple<long long &>>>(v7, a2, a3, (uint64_t)a4);
  }

  return v8;
}

void sub_1A3E7D8B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<1,1,std::tuple<long long &,std::tuple<long long &>>>(void *a1, sqlite3_stmt *a2, uint64_t a3, uint64_t a4)
{
  id v7;
  uint64_t v8;
  uint64_t v9;

  v7 = a1;
  v8 = sqlite3_step(a2);
  if ((_DWORD)v8 == 100
    && (**(_QWORD **)(a4 + 8) = sqlite3_column_int64(a2, 0), v8 = sqlite3_step(a2), (_DWORD)v8 == 101))
  {
    v9 = 1;
  }
  else
  {
    objc_msgSend(v7, "reportErrorWithCode:statement:error:", v8, a2, a3);
    v9 = 0;
  }

  return v9;
}

void sub_1A3E7D958(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<long long &,long long &>(void *a1, _QWORD *a2, void *a3, _QWORD *a4, _QWORD *a5)
{
  id v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  id v17;

  v9 = a1;
  v10 = a3;
  v17 = 0;
  v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89CC8]), "initWithDatabase:query:error:", v9, v10, &v17);
  v12 = v17;
  v13 = v12;
  if (v11)
  {
    SafariShared::_WBSSQLiteStatementBindAllParameters<1,long long &,long long &>(v11, a4, a5);
    v14 = objc_msgSend(v11, "execute");
    objc_msgSend(v11, "invalidate");
    if ((v14 - 100) >= 2 && (_DWORD)v14 != 0)
      objc_msgSend(v9, "reportErrorWithCode:statement:error:", v14, objc_msgSend(v11, "handle"), a2);
  }
  else
  {
    if (a2)
      *a2 = objc_retainAutorelease(v12);
    v14 = objc_msgSend(v13, "code");
  }

  return v14;
}

void sub_1A3E7DA78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t OUTLINED_FUNCTION_4_4(uint64_t result, uint64_t a2, int a3, float a4)
{
  *(float *)a2 = a4;
  *(_DWORD *)(a2 + 4) = a3;
  *(_WORD *)(a2 + 8) = 2114;
  *(_QWORD *)(a2 + 10) = result;
  *(_WORD *)(a2 + 18) = 1024;
  *(_DWORD *)(a2 + 20) = a3;
  return result;
}

void OUTLINED_FUNCTION_5_2(void *a1@<X0>, const char *a2@<X3>, uint8_t *a3@<X4>, NSObject *a4@<X8>)
{
  _os_log_error_impl(a1, a4, OS_LOG_TYPE_ERROR, a2, a3, 0x18u);
}

void sub_1A3E7DBC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3E7DC68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

WBSSetInt64 *WBSSetOfIdentifiersFromTags(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WBSSetInt64 *v5;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD v12[2];
  int v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  memset(v12, 0, sizeof(v12));
  v13 = 1065353216;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v1 = a1;
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v8, v14, 16);
  if (v2)
  {
    v3 = *(_QWORD *)v9;
    do
    {
      v4 = 0;
      do
      {
        if (*(_QWORD *)v9 != v3)
          objc_enumerationMutation(v1);
        v7 = objc_msgSend(*(id *)(*((_QWORD *)&v8 + 1) + 8 * v4), "databaseID");
        std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>((uint64_t)v12, (unint64_t *)&v7, &v7);
        ++v4;
      }
      while (v2 != v4);
      v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v8, v14, 16);
    }
    while (v2);
  }

  v5 = -[WBSSetInt64 initWithMovableSet:]([WBSSetInt64 alloc], "initWithMovableSet:", v12);
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::~__hash_table((uint64_t)v12);

  return v5;
}

void sub_1A3E7DE10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  va_list va;

  va_start(va, a11);

  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A3E7DF64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, void *a17)
{
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1A3E7E0EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1A3E7E1DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::WBSSQLiteDatabaseEnumerate<NSString * const {__strong}&,std::tuple<long long &>>(void *a1, uint64_t a2, void *a3, id *a4, id **a5)
{
  id v9;
  id v10;
  void *v11;
  void *v12;
  sqlite3_stmt *v13;
  id *v14;
  uint64_t v15;
  id *v17[2];

  v9 = a1;
  v10 = a3;
  v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89CC8]), "initWithDatabase:query:error:", v9, v10, a2);
  v12 = v11;
  if (v11)
  {
    v13 = (sqlite3_stmt *)objc_msgSend(v11, "handle");
    v14 = *a5;
    v17[0] = a4;
    v17[1] = v14;
    v15 = SafariShared::_WBSSQLiteStatementBindOrStep<0,1,std::tuple<NSString * const {__strong}&,std::tuple<long long &>>>(v9, v13, a2, v17);
    objc_msgSend(v12, "invalidate");
  }
  else
  {
    v15 = 0;
  }

  return v15;
}

void sub_1A3E7E3BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3E7E478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1A3E7E640(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<NSString * {__strong}&,NSString * {__strong}&,unsigned long const&,long long const&,double>(void *a1, _QWORD *a2, void *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, _QWORD *a7, double *a8)
{
  id v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  uint64_t v20;
  id v23;

  v15 = a1;
  v16 = a3;
  v23 = 0;
  v17 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89CC8]), "initWithDatabase:query:error:", v15, v16, &v23);
  v18 = v23;
  v19 = v18;
  if (v17)
  {
    SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * {__strong}&,NSString * {__strong}&,unsigned long const&,long long const&,double>(v17, a4, a5, a6, a7, a8);
    v20 = objc_msgSend(v17, "execute");
    objc_msgSend(v17, "invalidate");
    if ((v20 - 100) >= 2 && (_DWORD)v20 != 0)
      objc_msgSend(v15, "reportErrorWithCode:statement:error:", v20, objc_msgSend(v17, "handle"), a2);
  }
  else
  {
    if (a2)
      *a2 = objc_retainAutorelease(v18);
    v20 = objc_msgSend(v19, "code");
  }

  return v20;
}

void sub_1A3E7E81C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * {__strong}&,NSString * {__strong}&,unsigned long const&,long long const&,double>(void *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, double *a6)
{
  id v11;

  v11 = a1;
  objc_msgSend(v11, "bindString:atParameterIndex:", *a2, 1);
  SafariShared::_WBSSQLiteStatementBindAllParameters<2,NSString * {__strong}&,unsigned long const&,long long const&,double>(v11, a3, a4, a5, a6);

}

void sub_1A3E7E8B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<2,NSString * {__strong}&,unsigned long const&,long long const&,double>(void *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, double *a5)
{
  id v9;

  v9 = a1;
  objc_msgSend(v9, "bindString:atParameterIndex:", *a2, 2);
  SafariShared::_WBSSQLiteStatementBindAllParameters<3,unsigned long const&,long long const&,double>(v9, a3, a4, a5);

}

void sub_1A3E7E930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<3,unsigned long const&,long long const&,double>(void *a1, _QWORD *a2, _QWORD *a3, double *a4)
{
  id v7;

  v7 = a1;
  objc_msgSend(v7, "bindInt64:atParameterIndex:", *a2, 3);
  SafariShared::_WBSSQLiteStatementBindAllParameters<4,long long const&,double>(v7, a3, a4);

}

void sub_1A3E7E9A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<4,long long const&,double>(void *a1, _QWORD *a2, double *a3)
{
  id v5;

  v5 = a1;
  objc_msgSend(v5, "bindInt64:atParameterIndex:", *a2, 4);
  objc_msgSend(v5, "bindDouble:atParameterIndex:", 5, *a3);

}

void sub_1A3E7EA04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<0,1,std::tuple<NSString * const {__strong}&,std::tuple<long long &>>>(void *a1, sqlite3_stmt *a2, uint64_t a3, id **a4)
{
  id v7;
  id v8;
  void *v9;
  int v10;
  int v11;
  uint64_t v12;

  v7 = a1;
  v8 = **a4;
  v9 = v8;
  if (v8)
    v10 = sqlite3_bind_text(a2, 1, (const char *)objc_msgSend(objc_retainAutorelease(v8), "UTF8String"), -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  else
    v10 = sqlite3_bind_null(a2, 1);
  v11 = v10;

  if (v11)
  {
    objc_msgSend(v7, "reportErrorWithCode:statement:error:", 1, a2, a3);
    v12 = 0;
  }
  else
  {
    v12 = SafariShared::_WBSSQLiteStatementBindOrStep<1,1,std::tuple<NSString * const {__strong}&,std::tuple<long long &>>>(v7, a2, a3, (uint64_t)a4);
  }

  return v12;
}

void sub_1A3E7EAE4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteStatementBindOrStep<1,1,std::tuple<NSString * const {__strong}&,std::tuple<long long &>>>(void *a1, sqlite3_stmt *a2, uint64_t a3, uint64_t a4)
{
  id v7;
  uint64_t v8;
  uint64_t v9;

  v7 = a1;
  v8 = sqlite3_step(a2);
  if ((_DWORD)v8 == 100
    && (**(_QWORD **)(a4 + 8) = sqlite3_column_int64(a2, 0), v8 = sqlite3_step(a2), (_DWORD)v8 == 101))
  {
    v9 = 1;
  }
  else
  {
    objc_msgSend(v7, "reportErrorWithCode:statement:error:", v8, a2, a3);
    v9 = 0;
  }

  return v9;
}

void sub_1A3E7EB98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<long long &,long long const&,double &>(void *a1, _QWORD *a2, void *a3, _QWORD *a4, _QWORD *a5, double *a6)
{
  id v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  uint64_t v16;
  id v19;

  v11 = a1;
  v12 = a3;
  v19 = 0;
  v13 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89CC8]), "initWithDatabase:query:error:", v11, v12, &v19);
  v14 = v19;
  v15 = v14;
  if (v13)
  {
    SafariShared::_WBSSQLiteStatementBindAllParameters<1,long long &,long long const&,double &>(v13, a4, a5, a6);
    v16 = objc_msgSend(v13, "execute");
    objc_msgSend(v13, "invalidate");
    if ((v16 - 100) >= 2 && (_DWORD)v16 != 0)
      objc_msgSend(v11, "reportErrorWithCode:statement:error:", v16, objc_msgSend(v13, "handle"), a2);
  }
  else
  {
    if (a2)
      *a2 = objc_retainAutorelease(v14);
    v16 = objc_msgSend(v15, "code");
  }

  return v16;
}

void sub_1A3E7ECC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,long long &,long long const&,double &>(void *a1, _QWORD *a2, _QWORD *a3, double *a4)
{
  id v7;

  v7 = a1;
  objc_msgSend(v7, "bindInt64:atParameterIndex:", *a2, 1);
  SafariShared::_WBSSQLiteStatementBindAllParameters<2,long long const&,double &>(v7, a3, a4);

}

void sub_1A3E7ED44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<2,long long const&,double &>(void *a1, _QWORD *a2, double *a3)
{
  id v5;

  v5 = a1;
  objc_msgSend(v5, "bindInt64:atParameterIndex:", *a2, 2);
  objc_msgSend(v5, "bindDouble:atParameterIndex:", 3, *a3);

}

void sub_1A3E7EDA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<double &,long long const&>(void *a1, _QWORD *a2, void *a3, double *a4, _QWORD *a5)
{
  id v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  id v17;

  v9 = a1;
  v10 = a3;
  v17 = 0;
  v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89CC8]), "initWithDatabase:query:error:", v9, v10, &v17);
  v12 = v17;
  v13 = v12;
  if (v11)
  {
    SafariShared::_WBSSQLiteStatementBindAllParameters<1,double &,long long const&>(v11, a4, a5);
    v14 = objc_msgSend(v11, "execute");
    objc_msgSend(v11, "invalidate");
    if ((v14 - 100) >= 2 && (_DWORD)v14 != 0)
      objc_msgSend(v9, "reportErrorWithCode:statement:error:", v14, objc_msgSend(v11, "handle"), a2);
  }
  else
  {
    if (a2)
      *a2 = objc_retainAutorelease(v12);
    v14 = objc_msgSend(v13, "code");
  }

  return v14;
}

void sub_1A3E7EECC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,double &,long long const&>(void *a1, double *a2, _QWORD *a3)
{
  id v5;

  v5 = a1;
  objc_msgSend(v5, "bindDouble:atParameterIndex:", 1, *a2);
  objc_msgSend(v5, "bindInt64:atParameterIndex:", *a3, 2);

}

void sub_1A3E7EF44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<NSString * const {__strong}&,long long const&>(void *a1, _QWORD *a2, void *a3, _QWORD *a4, _QWORD *a5)
{
  id v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  id v17;

  v9 = a1;
  v10 = a3;
  v17 = 0;
  v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89CC8]), "initWithDatabase:query:error:", v9, v10, &v17);
  v12 = v17;
  v13 = v12;
  if (v11)
  {
    SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * const {__strong}&,long long const&>(v11, a4, a5);
    v14 = objc_msgSend(v11, "execute");
    objc_msgSend(v11, "invalidate");
    if ((v14 - 100) >= 2 && (_DWORD)v14 != 0)
      objc_msgSend(v9, "reportErrorWithCode:statement:error:", v14, objc_msgSend(v11, "handle"), a2);
  }
  else
  {
    if (a2)
      *a2 = objc_retainAutorelease(v12);
    v14 = objc_msgSend(v13, "code");
  }

  return v14;
}

void sub_1A3E7F068(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * const {__strong}&,long long const&>(void *a1, _QWORD *a2, _QWORD *a3)
{
  id v5;

  v5 = a1;
  objc_msgSend(v5, "bindString:atParameterIndex:", *a2, 1);
  objc_msgSend(v5, "bindInt64:atParameterIndex:", *a3, 2);

}

void sub_1A3E7F0E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<double const&,double const&>(void *a1, _QWORD *a2, void *a3, double *a4, double *a5)
{
  id v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  id v17;

  v9 = a1;
  v10 = a3;
  v17 = 0;
  v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89CC8]), "initWithDatabase:query:error:", v9, v10, &v17);
  v12 = v17;
  v13 = v12;
  if (v11)
  {
    SafariShared::_WBSSQLiteStatementBindAllParameters<1,double const&,double const&>(v11, a4, a5);
    v14 = objc_msgSend(v11, "execute");
    objc_msgSend(v11, "invalidate");
    if ((v14 - 100) >= 2 && (_DWORD)v14 != 0)
      objc_msgSend(v9, "reportErrorWithCode:statement:error:", v14, objc_msgSend(v11, "handle"), a2);
  }
  else
  {
    if (a2)
      *a2 = objc_retainAutorelease(v12);
    v14 = objc_msgSend(v13, "code");
  }

  return v14;
}

void sub_1A3E7F204(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A3E7F944(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A3E7FAD0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A3E7FC2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v7 = v6;

  _Unwind_Resume(a1);
}

void sub_1A3E7FD74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E7FE48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E7FEDC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E7FFCC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E80114(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1A3E801F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3E80EF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E80FD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1A3E81090(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t WTF::ThreadSafeRefCounted<SafariShared::HistoryURLCompletionItem,(WTF::DestructionThread)0>::deref(uint64_t result)
{
  uint64_t v1;
  unsigned int v2;
  unsigned int v3;
  void *v4;
  void *v5;
  void *v6;
  void **v7;

  v1 = result;
  do
  {
    v2 = __ldaxr((unsigned int *)result);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, (unsigned int *)result));
  if (!v3)
  {
    atomic_store(1u, (unsigned int *)result);

    v4 = *(void **)(v1 + 120);
    if (v4)
    {
      *(_QWORD *)(v1 + 128) = v4;
      operator delete(v4);
    }
    v5 = *(void **)(v1 + 96);
    if (v5)
    {
      *(_QWORD *)(v1 + 104) = v5;
      operator delete(v5);
    }

    v7 = (void **)(v1 + 32);
    std::vector<WTF::RefPtr<SafariShared::HistoryURLCompletionItem,WTF::RawPtrTraits<SafariShared::HistoryURLCompletionItem>,WTF::DefaultRefDerefTraits<SafariShared::HistoryURLCompletionItem>>>::__destroy_vector::operator()[abi:sn180100](&v7);
    return WTF::fastFree((WTF *)v1, v6);
  }
  return result;
}

void std::vector<WTF::RefPtr<SafariShared::HistoryURLCompletionItem,WTF::RawPtrTraits<SafariShared::HistoryURLCompletionItem>,WTF::DefaultRefDerefTraits<SafariShared::HistoryURLCompletionItem>>>::__destroy_vector::operator()[abi:sn180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t v6;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = *--v4;
        *v4 = 0;
        if (v6)
          WTF::ThreadSafeRefCounted<SafariShared::HistoryURLCompletionItem,(WTF::DestructionThread)0>::deref();
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1A3E81328(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E814C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E81660(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v4;

  _Unwind_Resume(a1);
}

void sub_1A3E81774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1A3E81978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,void *a30)
{
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  uint64_t v36;

  _Block_object_dispose((const void *)(v36 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_1A3E81ACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1A3E81BDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A3E81D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_1A3E81F68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v4;

  _Unwind_Resume(a1);
}

void sub_1A3E82288(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E823F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1A3E82478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3E824E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3E825B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E8283C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

float WBSHistoryVisitWeightedVisitCountFromScore(int a1)
{
  return (float)a1 / 100.0;
}

double WBHistoryVisitWeightForAttributesAndOrigin(char a1, uint64_t a2)
{
  double result;
  double v3;
  double v4;
  double v5;
  double v6;

  result = 0.0;
  if ((a1 & 3) == 0)
  {
    v3 = 0.25;
    v4 = 1.0;
    if ((a1 & 4) == 0)
      v3 = 1.0;
    v5 = 0.6;
    if ((a1 & 8) == 0)
      v5 = 1.0;
    v6 = v3 * v5;
    if (a2 == 1)
      v4 = 0.2;
    return v6 * v4;
  }
  return result;
}

uint64_t WBSValidateVisitCountScores(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result;
  uint64_t v5;

  result = 1;
  if (a1 && a2)
  {
    v5 = a1 + 4 * a2;
    if ((float)((float)*(int *)(v5 - 4) / 100.0) > (float)a3)
    {
      result = 0;
      *(_DWORD *)(v5 - 4) = 0;
    }
  }
  return result;
}

void sub_1A3E82E18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1A3E82F7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E83020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3E83114(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E83220(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,double &,double &,NSString * {__strong}&>(void *a1, double *a2, double *a3, _QWORD *a4)
{
  id v7;

  v7 = a1;
  objc_msgSend(v7, "bindDouble:atParameterIndex:", 1, *a2);
  SafariShared::_WBSSQLiteStatementBindAllParameters<2,double &,NSString * {__strong}&>(v7, a3, a4);

}

void sub_1A3E833BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<2,double &,NSString * {__strong}&>(void *a1, double *a2, _QWORD *a3)
{
  id v5;

  v5 = a1;
  objc_msgSend(v5, "bindDouble:atParameterIndex:", 2, *a2);
  objc_msgSend(v5, "bindString:atParameterIndex:", *a3, 3);

}

void sub_1A3E83420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,double &,double &,NSData * {__strong}&,NSData * {__strong}&>(void *a1, double *a2, double *a3, _QWORD *a4, _QWORD *a5)
{
  id v9;

  v9 = a1;
  objc_msgSend(v9, "bindDouble:atParameterIndex:", 1, *a2);
  SafariShared::_WBSSQLiteStatementBindAllParameters<2,double &,NSData * {__strong}&,NSData * {__strong}&>(v9, a3, a4, a5);

}

void sub_1A3E83498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<2,double &,NSData * {__strong}&,NSData * {__strong}&>(void *a1, double *a2, _QWORD *a3, _QWORD *a4)
{
  id v7;

  v7 = a1;
  objc_msgSend(v7, "bindDouble:atParameterIndex:", 2, *a2);
  SafariShared::_WBSSQLiteStatementBindAllParameters<3,NSData * {__strong}&,NSData * {__strong}&>(v7, a3, a4);

}

void sub_1A3E83508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<3,NSData * {__strong}&,NSData * {__strong}&>(void *a1, _QWORD *a2, _QWORD *a3)
{
  id v5;

  v5 = a1;
  objc_msgSend(v5, "bindData:atParameterIndex:", *a2, 3);
  objc_msgSend(v5, "bindData:atParameterIndex:", *a3, 4);

}

void sub_1A3E8356C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3E83810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  void *v33;
  void *v34;
  void *v35;
  void *v36;

  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::~__hash_table((uint64_t)&a33);

  _Unwind_Resume(a1);
}

void sub_1A3E83950(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E839B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3E83B14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3E83BE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E83C6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E840EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E842B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1A3E843E8(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_1A3E8444C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)WBSIgnoredSiriSuggestedSitesController;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1A3E8452C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_1A3E845D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_1A3E8465C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A3E846E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1A3E84770(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1A3E847FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1A3E84888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1A3E84928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_1A3E84A30(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E84B04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E84BC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A3E84C44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E84D00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  va_list va;

  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A3E84E3C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E84ED0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E84FEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A3E85100(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3E851E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E852C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E853A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E85484(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E8558C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3E855F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3E856BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3E85718(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E85A18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19, void *a20)
{
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_1A3E85C18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{

  _Unwind_Resume(a1);
}

void sub_1A3E85D98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1A3E85EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3E86050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1A3E86168(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E862D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1A3E8658C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  void *v24;
  void *v25;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<NSString * {__strong},NSString * {__strong}&,NSString * {__strong}&,NSString * {__strong}&,double &,NSString * {__strong}&,int,double &,NSString * {__strong}&>(void *a1, _QWORD *a2, void *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, _QWORD *a7, double *a8, _QWORD *a9, unsigned int *a10, double *a11, _QWORD *a12)
{
  id v19;
  id v20;
  void *v21;
  id v22;
  void *v23;
  uint64_t v24;
  id v27;

  v19 = a1;
  v20 = a3;
  v27 = 0;
  v21 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89CC8]), "initWithDatabase:query:error:", v19, v20, &v27);
  v22 = v27;
  v23 = v22;
  if (v21)
  {
    SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * {__strong},NSString * {__strong}&,NSString * {__strong}&,NSString * {__strong}&,double &,NSString * {__strong}&,int,double &,NSString * {__strong}&>(v21, a4, a5, a6, a7, a8, a9, a10, a11, a12);
    v24 = objc_msgSend(v21, "execute");
    objc_msgSend(v21, "invalidate");
    if ((v24 - 100) >= 2 && (_DWORD)v24 != 0)
      objc_msgSend(v19, "reportErrorWithCode:statement:error:", v24, objc_msgSend(v21, "handle"), a2);
  }
  else
  {
    if (a2)
      *a2 = objc_retainAutorelease(v22);
    v24 = objc_msgSend(v23, "code");
  }

  return v24;
}

void sub_1A3E86790(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * {__strong},NSString * {__strong}&,NSString * {__strong}&,NSString * {__strong}&,double &,NSString * {__strong}&,int,double &,NSString * {__strong}&>(void *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, double *a6, _QWORD *a7, unsigned int *a8, double *a9, _QWORD *a10)
{
  id v17;

  v17 = a1;
  objc_msgSend(v17, "bindString:atParameterIndex:", *a2, 1);
  SafariShared::_WBSSQLiteStatementBindAllParameters<2,NSString * {__strong}&,NSString * {__strong}&,NSString * {__strong}&,double &,NSString * {__strong}&,int,double &,NSString * {__strong}&>(v17, a3, a4, a5, a6, a7, a8, a9, a10);

}

void sub_1A3E86858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<2,NSString * {__strong}&,NSString * {__strong}&,NSString * {__strong}&,double &,NSString * {__strong}&,int,double &,NSString * {__strong}&>(void *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, double *a5, _QWORD *a6, unsigned int *a7, double *a8, _QWORD *a9)
{
  id v16;

  v16 = a1;
  objc_msgSend(v16, "bindString:atParameterIndex:", *a2, 2);
  SafariShared::_WBSSQLiteStatementBindAllParameters<3,NSString * {__strong}&,NSString * {__strong}&,double &,NSString * {__strong}&,int,double &,NSString * {__strong}&>(v16, a3, a4, a5, a6, a7, a8, a9);

}

void sub_1A3E86900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<3,NSString * {__strong}&,NSString * {__strong}&,double &,NSString * {__strong}&,int,double &,NSString * {__strong}&>(void *a1, _QWORD *a2, _QWORD *a3, double *a4, _QWORD *a5, unsigned int *a6, double *a7, _QWORD *a8)
{
  id v15;

  v15 = a1;
  objc_msgSend(v15, "bindString:atParameterIndex:", *a2, 3);
  SafariShared::_WBSSQLiteStatementBindAllParameters<4,NSString * {__strong}&,double &,NSString * {__strong}&,int,double &,NSString * {__strong}&>(v15, a3, a4, a5, a6, a7, a8);

}

void sub_1A3E869A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<4,NSString * {__strong}&,double &,NSString * {__strong}&,int,double &,NSString * {__strong}&>(void *a1, _QWORD *a2, double *a3, _QWORD *a4, unsigned int *a5, double *a6, _QWORD *a7)
{
  id v13;

  v13 = a1;
  objc_msgSend(v13, "bindString:atParameterIndex:", *a2, 4);
  SafariShared::_WBSSQLiteStatementBindAllParameters<5,double &,NSString * {__strong}&,int,double &,NSString * {__strong}&>(v13, a3, a4, a5, a6, a7);

}

void sub_1A3E86A30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<5,double &,NSString * {__strong}&,int,double &,NSString * {__strong}&>(void *a1, double *a2, _QWORD *a3, unsigned int *a4, double *a5, _QWORD *a6)
{
  id v11;

  v11 = a1;
  objc_msgSend(v11, "bindDouble:atParameterIndex:", 5, *a2);
  SafariShared::_WBSSQLiteStatementBindAllParameters<6,NSString * {__strong}&,int,double &,NSString * {__strong}&>(v11, a3, a4, a5, a6);

}

void sub_1A3E86AB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<6,NSString * {__strong}&,int,double &,NSString * {__strong}&>(void *a1, _QWORD *a2, unsigned int *a3, double *a4, _QWORD *a5)
{
  id v9;

  v9 = a1;
  objc_msgSend(v9, "bindString:atParameterIndex:", *a2, 6);
  SafariShared::_WBSSQLiteStatementBindAllParameters<7,int,double &,NSString * {__strong}&>(v9, a3, a4, a5);

}

void sub_1A3E86B30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<7,int,double &,NSString * {__strong}&>(void *a1, unsigned int *a2, double *a3, _QWORD *a4)
{
  id v7;

  v7 = a1;
  objc_msgSend(v7, "bindInt:atParameterIndex:", *a2, 7);
  SafariShared::_WBSSQLiteStatementBindAllParameters<8,double &,NSString * {__strong}&>(v7, a3, a4);

}

void sub_1A3E86BA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<8,double &,NSString * {__strong}&>(void *a1, double *a2, _QWORD *a3)
{
  id v5;

  v5 = a1;
  objc_msgSend(v5, "bindDouble:atParameterIndex:", 8, *a2);
  objc_msgSend(v5, "bindString:atParameterIndex:", *a3, 9);

}

void sub_1A3E86C04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<NSString * {__strong},NSString * {__strong}&,NSString * {__strong}&,NSString * {__strong}&,double &,int,double &>(void *a1, _QWORD *a2, void *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, _QWORD *a7, double *a8, unsigned int *a9, double *a10)
{
  id v17;
  id v18;
  void *v19;
  id v20;
  void *v21;
  uint64_t v22;
  id v25;

  v17 = a1;
  v18 = a3;
  v25 = 0;
  v19 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89CC8]), "initWithDatabase:query:error:", v17, v18, &v25);
  v20 = v25;
  v21 = v20;
  if (v19)
  {
    SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * {__strong},NSString * {__strong}&,NSString * {__strong}&,NSString * {__strong}&,double &,int,double &>(v19, a4, a5, a6, a7, a8, a9, a10);
    v22 = objc_msgSend(v19, "execute");
    objc_msgSend(v19, "invalidate");
    if ((v22 - 100) >= 2 && (_DWORD)v22 != 0)
      objc_msgSend(v17, "reportErrorWithCode:statement:error:", v22, objc_msgSend(v19, "handle"), a2);
  }
  else
  {
    if (a2)
      *a2 = objc_retainAutorelease(v20);
    v22 = objc_msgSend(v21, "code");
  }

  return v22;
}

void sub_1A3E86D4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * {__strong},NSString * {__strong}&,NSString * {__strong}&,NSString * {__strong}&,double &,int,double &>(void *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, double *a6, unsigned int *a7, double *a8)
{
  id v15;

  v15 = a1;
  objc_msgSend(v15, "bindString:atParameterIndex:", *a2, 1);
  SafariShared::_WBSSQLiteStatementBindAllParameters<2,NSString * {__strong}&,NSString * {__strong}&,NSString * {__strong}&,double &,int,double &>(v15, a3, a4, a5, a6, a7, a8);

}

void sub_1A3E86E00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<2,NSString * {__strong}&,NSString * {__strong}&,NSString * {__strong}&,double &,int,double &>(void *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, double *a5, unsigned int *a6, double *a7)
{
  id v13;

  v13 = a1;
  objc_msgSend(v13, "bindString:atParameterIndex:", *a2, 2);
  SafariShared::_WBSSQLiteStatementBindAllParameters<3,NSString * {__strong}&,NSString * {__strong}&,double &,int,double &>(v13, a3, a4, a5, a6, a7);

}

void sub_1A3E86E90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<3,NSString * {__strong}&,NSString * {__strong}&,double &,int,double &>(void *a1, _QWORD *a2, _QWORD *a3, double *a4, unsigned int *a5, double *a6)
{
  id v11;

  v11 = a1;
  objc_msgSend(v11, "bindString:atParameterIndex:", *a2, 3);
  SafariShared::_WBSSQLiteStatementBindAllParameters<4,NSString * {__strong}&,double &,int,double &>(v11, a3, a4, a5, a6);

}

void sub_1A3E86F18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<4,NSString * {__strong}&,double &,int,double &>(void *a1, _QWORD *a2, double *a3, unsigned int *a4, double *a5)
{
  id v9;

  v9 = a1;
  objc_msgSend(v9, "bindString:atParameterIndex:", *a2, 4);
  SafariShared::_WBSSQLiteStatementBindAllParameters<5,double &,int,double &>(v9, a3, a4, a5);

}

void sub_1A3E86F90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<5,double &,int,double &>(void *a1, double *a2, unsigned int *a3, double *a4)
{
  id v7;

  v7 = a1;
  objc_msgSend(v7, "bindDouble:atParameterIndex:", 5, *a2);
  SafariShared::_WBSSQLiteStatementBindAllParameters<6,int,double &>(v7, a3, a4);

}

void sub_1A3E87000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<6,int,double &>(void *a1, unsigned int *a2, double *a3)
{
  id v5;

  v5 = a1;
  objc_msgSend(v5, "bindInt:atParameterIndex:", *a2, 6);
  objc_msgSend(v5, "bindDouble:atParameterIndex:", 7, *a3);

}

void sub_1A3E87064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<double,NSString * {__strong}&,NSString * {__strong}&,NSString * {__strong}&>(void *a1, _QWORD *a2, void *a3, double *a4, _QWORD *a5, _QWORD *a6, _QWORD *a7)
{
  id v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  uint64_t v18;
  id v21;

  v13 = a1;
  v14 = a3;
  v21 = 0;
  v15 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89CC8]), "initWithDatabase:query:error:", v13, v14, &v21);
  v16 = v21;
  v17 = v16;
  if (v15)
  {
    SafariShared::_WBSSQLiteStatementBindAllParameters<1,double,NSString * {__strong}&,NSString * {__strong}&,NSString * {__strong}&>(v15, a4, a5, a6, a7);
    v18 = objc_msgSend(v15, "execute");
    objc_msgSend(v15, "invalidate");
    if ((v18 - 100) >= 2 && (_DWORD)v18 != 0)
      objc_msgSend(v13, "reportErrorWithCode:statement:error:", v18, objc_msgSend(v15, "handle"), a2);
  }
  else
  {
    if (a2)
      *a2 = objc_retainAutorelease(v16);
    v18 = objc_msgSend(v17, "code");
  }

  return v18;
}

void sub_1A3E871A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,double,NSString * {__strong}&,NSString * {__strong}&,NSString * {__strong}&>(void *a1, double *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  id v9;

  v9 = a1;
  objc_msgSend(v9, "bindDouble:atParameterIndex:", 1, *a2);
  SafariShared::_WBSSQLiteStatementBindAllParameters<2,NSString * {__strong}&,NSString * {__strong}&,NSString * {__strong}&>(v9, a3, a4, a5);

}

void sub_1A3E8722C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<2,NSString * {__strong}&,NSString * {__strong}&,NSString * {__strong}&>(void *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  id v7;

  v7 = a1;
  objc_msgSend(v7, "bindString:atParameterIndex:", *a2, 2);
  SafariShared::_WBSSQLiteStatementBindAllParameters<3,NSString * {__strong}&,NSString * {__strong}&>(v7, a3, a4);

}

void sub_1A3E8729C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<3,NSString * {__strong}&,NSString * {__strong}&>(void *a1, _QWORD *a2, _QWORD *a3)
{
  id v5;

  v5 = a1;
  objc_msgSend(v5, "bindString:atParameterIndex:", *a2, 3);
  objc_msgSend(v5, "bindString:atParameterIndex:", *a3, 4);

}

void sub_1A3E87300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<double>(void *a1, _QWORD *a2, void *a3, double *a4)
{
  id v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  id v15;

  v7 = a1;
  v8 = a3;
  v15 = 0;
  v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89CC8]), "initWithDatabase:query:error:", v7, v8, &v15);
  v10 = v15;
  v11 = v10;
  if (v9)
  {
    objc_msgSend(v9, "bindDouble:atParameterIndex:", 1, *a4);
    v12 = objc_msgSend(v9, "execute");
    objc_msgSend(v9, "invalidate");
    if ((v12 - 100) >= 2 && (_DWORD)v12 != 0)
      objc_msgSend(v7, "reportErrorWithCode:statement:error:", v12, objc_msgSend(v9, "handle"), a2);
  }
  else
  {
    if (a2)
      *a2 = objc_retainAutorelease(v10);
    v12 = objc_msgSend(v11, "code");
  }

  return v12;
}

void sub_1A3E87418(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void appendToQueryItems(void *a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  id v6;
  id v7;

  if (a3)
  {
    v5 = (void *)MEMORY[0x1E0CB39D8];
    v6 = a1;
    objc_msgSend(v5, "queryItemWithName:value:", a2, a3);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "addObject:", v7);

  }
}

void SafariShared::JSController::~JSController(WTF **this)
{
  void *v2;
  WTF *v3;

  *this = (WTF *)off_1E4B3CAD8;
  SafariShared::JSController::setContext((SafariShared::JSController *)this, 0);
  v3 = this[1];
  if (v3)
  {
    this[1] = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v3, v2);
  }
}

void sub_1A3E87C20(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  WTF *v4;

  v4 = *(WTF **)(v2 + 8);
  if (v4)
  {
    *(_QWORD *)(v2 + 8) = 0;
    *(_DWORD *)(v2 + 16) = 0;
    WTF::fastFree(v4, a2);
  }
  _Unwind_Resume(exception_object);
}

void SafariShared::JSController::setContext(SafariShared::JSController *this, JSGlobalContextRef ctx)
{
  OpaqueJSContext *v2;
  OpaqueJSValue *v5;
  SafariShared::JSUtilities *v6;
  const OpaqueJSContext *v7;
  const char *v8;
  OpaqueJSValue *v9;
  SafariShared::JSUtilities *v10;
  id v11;
  const OpaqueJSContext *v12;
  const char *v13;
  OpaqueJSValue *v14;

  v2 = (OpaqueJSContext *)*((_QWORD *)this + 5);
  if (v2 != ctx)
  {
    if (v2)
    {
      v5 = (OpaqueJSValue *)*((_QWORD *)this + 4);
      if (v5)
      {
        JSObjectSetPrivate(v5, 0);
        *((_QWORD *)this + 4) = 0;
      }
      SafariShared::JSController::unprotectObjects((JSContextRef *)this);
      *((_QWORD *)this + 3) = 0;
      JSGlobalContextRelease(*((JSGlobalContextRef *)this + 5));
    }
    *((_QWORD *)this + 5) = ctx;
    if (ctx)
    {
      JSGlobalContextRetain(ctx);
      v6 = (SafariShared::JSUtilities *)*((_QWORD *)this + 5);
      v7 = (const OpaqueJSContext *)(*(uint64_t (**)(SafariShared::JSController *))(*(_QWORD *)this + 16))(this);
      v9 = SafariShared::JSUtilities::globalJSObjectByName(v6, v7, v8);
      *((_QWORD *)this + 3) = v9;
      if (v9)
        SafariShared::JSController::protectObject(this, v9);
      v10 = (SafariShared::JSUtilities *)*((_QWORD *)this + 5);
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%sController"), (*(uint64_t (**)(SafariShared::JSController *))(*(_QWORD *)this + 16))(this));
      v11 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v12 = (const OpaqueJSContext *)objc_msgSend(v11, "UTF8String");
      *((_QWORD *)this + 4) = SafariShared::JSUtilities::globalJSObjectByName(v10, v12, v13);

      v14 = (OpaqueJSValue *)*((_QWORD *)this + 4);
      if (v14)
        SafariShared::JSController::protectObject(this, v14);
    }
  }
}

void sub_1A3E87D60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void SafariShared::JSController::addScriptObjectToGlobalObject(SafariShared::JSController *this, const OpaqueJSContext *a2)
{
  const OpaqueJSContext *v4;
  OpaqueJSClass *v5;
  void *v6;
  id v7;

  v4 = (const OpaqueJSContext *)(*(uint64_t (**)(SafariShared::JSController *))(*(_QWORD *)this + 40))(this);
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%sController"), (*(uint64_t (**)(SafariShared::JSController *))(*(_QWORD *)this + 16))(this));
  v7 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v5 = (OpaqueJSClass *)objc_msgSend(v7, "UTF8String");
  SafariShared::JSUtilities::registerJSObjectInGlobalSpace(a2, v4, v5, (char *)this, v6);

}

void sub_1A3E87E0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t SafariShared::JSController::controllerName(SafariShared::JSController *this)
{
  return objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%sController"), (*(uint64_t (**)(SafariShared::JSController *))(*(_QWORD *)this + 16))(this));
}

JSClassRef SafariShared::JSController::createJSClass(SafariShared::JSController *this)
{
  const JSStaticFunction *v2;
  const JSStaticValue *v3;
  id v4;
  JSClassRef v5;
  JSClassDefinition definition;

  v2 = (const JSStaticFunction *)(*(uint64_t (**)(SafariShared::JSController *))(*(_QWORD *)this + 32))(this);
  v3 = (const JSStaticValue *)(*(uint64_t (**)(SafariShared::JSController *))(*(_QWORD *)this + 24))(this);
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%sController"), (*(uint64_t (**)(SafariShared::JSController *))(*(_QWORD *)this + 16))(this));
  memset(&definition.staticFunctions, 0, 96);
  *(_QWORD *)&definition.version = 0;
  definition.parentClass = 0;
  v4 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  definition.className = (const char *)objc_msgSend(v4, "UTF8String");
  definition.staticValues = v3;
  definition.staticFunctions = v2;
  v5 = JSClassCreate(&definition);

  return v5;
}

void sub_1A3E87F24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void SafariShared::JSController::scriptObjectReady(SafariShared::JSController *this, JSContextRef ctx)
{
  OpaqueJSContext *GlobalContext;

  GlobalContext = JSContextGetGlobalContext(ctx);
  SafariShared::JSController::setContext(this, GlobalContext);
}

void SafariShared::JSController::protectObject(SafariShared::JSController *this, OpaqueJSValue *a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  JSValueRef value;

  value = a2;
  v3 = (_QWORD *)((char *)this + 8);
  v4 = *((unsigned int *)this + 5);
  if ((_DWORD)v4 == *((_DWORD *)this + 4))
  {
    v5 = (_QWORD *)WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v3, v4 + 1, (unint64_t)&value);
    v4 = *((unsigned int *)this + 5);
    *(_QWORD *)(*((_QWORD *)this + 1) + 8 * v4) = *v5;
    a2 = value;
  }
  else
  {
    *(_QWORD *)(*v3 + 8 * v4) = a2;
  }
  *((_DWORD *)this + 5) = v4 + 1;
  JSValueProtect(*((JSContextRef *)this + 5), a2);
}

unsigned int *SafariShared::JSController::unprotectObjects(JSContextRef *this)
{
  unsigned int *v1;
  unint64_t v3;

  v1 = (unsigned int *)(this + 1);
  if (*((_DWORD *)this + 5))
  {
    v3 = 0;
    do
      JSValueUnprotect(this[5], *((JSValueRef *)this[1] + v3++));
    while (v3 < *((unsigned int *)this + 5));
  }
  return WTF::Vector<OpaqueJSValue *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(v1, 0);
}

uint64_t SafariShared::JSController::staticValues(SafariShared::JSController *this)
{
  return 0;
}

uint64_t SafariShared::JSController::staticFunctions(SafariShared::JSController *this)
{
  return 0;
}

unsigned int *WTF::Vector<OpaqueJSValue *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, unint64_t a2)
{
  unsigned int *v2;

  if (result[2] > a2)
  {
    v2 = result;
    if (result[3] > a2)
      result[3] = a2;
    result = *(unsigned int **)result;
    if (a2)
    {
      if (a2 >> 61)
      {
        __break(0xC471u);
      }
      else
      {
        v2[2] = a2;
        result = (unsigned int *)WTF::fastRealloc((WTF *)result, (void *)(8 * a2));
        *(_QWORD *)v2 = result;
      }
    }
    else if (result)
    {
      *(_QWORD *)v2 = 0;
      v2[2] = 0;
      return (unsigned int *)WTF::fastFree((WTF *)result, 0);
    }
  }
  return result;
}

void sub_1A3E8893C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E88A00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E88AC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E88B38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)WBSJSCallbackHandler;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1A3E88BD4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E88CCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, JSGlobalContextRef ctx)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

id callWithArguments<1ul>(JSObjectRef object, JSContextRef *a2, const OpaqueJSValue *a3)
{
  const OpaqueJSContext *v4;
  const OpaqueJSValue *v5;
  JSValueRef v7;
  JSValueRef arguments;

  v7 = 0;
  arguments = a3;
  v4 = JSObjectCallAsFunction(*a2, object, 0, 1uLL, &arguments, &v7);
  SafariShared::JSUtilities::translateJSValueToNS(*a2, v4, v5);
  return (id)objc_claimAutoreleasedReturnValue();
}

uint64_t SafariShared::JSUtilities::translateNSToJSValueForJSCallbackHandler(SafariShared::JSUtilities *this, const OpaqueJSContext *a2, objc_object *a3)
{
  const OpaqueJSContext *v4;
  const OpaqueJSContext *v5;
  const OpaqueJSContext *v6;
  uint64_t v7;
  JSValueRef Undefined;
  const OpaqueJSContext *v9;
  objc_object *v10;
  char isKindOfClass;

  v4 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v5 = v4;
  else
    v5 = 0;
  v6 = v5;

  if (!v6)
  {
    if (-[OpaqueJSContext conformsToProtocol:](v4, "conformsToProtocol:", &unk_1EE73D418))
    {
      Undefined = (JSValueRef)-[OpaqueJSContext translateToJSValueWithJSContext:](v4, "translateToJSValueWithJSContext:", this);
    }
    else
    {
      v9 = v4;
      if (!v9)
        goto LABEL_17;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0
        || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)
        || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)
        || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)
        || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)
        || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)
        || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)
        || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
      {
LABEL_17:

      }
      else
      {
        objc_opt_class();
        isKindOfClass = objc_opt_isKindOfClass();

        if ((isKindOfClass & 1) == 0)
        {
          Undefined = JSValueMakeUndefined(this);
          goto LABEL_19;
        }
      }
      Undefined = (JSValueRef)SafariShared::JSUtilities::translateNSToJSValue(this, v9, v10);
    }
LABEL_19:
    v7 = (uint64_t)Undefined;
    goto LABEL_20;
  }
  v7 = -[OpaqueJSContext JSValueRef](v6, "JSValueRef");

LABEL_20:
  return v7;
}

void sub_1A3E88F2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E88FB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, JSGlobalContextRef ctx)
{
  if (ctx)
    JSGlobalContextRelease(ctx);
  _Unwind_Resume(exception_object);
}

id callWithArguments<0ul>(JSObjectRef object, JSContextRef *a2)
{
  const OpaqueJSContext *v3;
  const OpaqueJSValue *v4;
  JSValueRef exception;

  exception = 0;
  v3 = JSObjectCallAsFunction(*a2, object, 0, 0, 0, &exception);
  SafariShared::JSUtilities::translateJSValueToNS(*a2, v3, v4);
  return (id)objc_claimAutoreleasedReturnValue();
}

void sub_1A3E890A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, JSGlobalContextRef ctx)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A3E89178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, JSGlobalContextRef ctx)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

id callWithArguments<2ul>(JSObjectRef object, JSContextRef *a2, const OpaqueJSValue *a3, const OpaqueJSValue *a4)
{
  const OpaqueJSContext *v5;
  const OpaqueJSValue *v6;
  JSValueRef exception;
  JSValueRef arguments[2];

  arguments[0] = a3;
  arguments[1] = a4;
  exception = 0;
  v5 = JSObjectCallAsFunction(*a2, object, 0, 2uLL, arguments, &exception);
  SafariShared::JSUtilities::translateJSValueToNS(*a2, v5, v6);
  return (id)objc_claimAutoreleasedReturnValue();
}

void sub_1A3E892C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, JSGlobalContextRef ctx)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

id callWithArguments<3ul>(JSObjectRef object, JSContextRef *a2, JSValueRef *arguments)
{
  const OpaqueJSContext *v4;
  const OpaqueJSValue *v5;
  JSValueRef exception;

  exception = 0;
  v4 = JSObjectCallAsFunction(*a2, object, 0, 3uLL, arguments, &exception);
  SafariShared::JSUtilities::translateJSValueToNS(*a2, v4, v5);
  return (id)objc_claimAutoreleasedReturnValue();
}

void sub_1A3E89408(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

OpaqueJSValue *SafariShared::JSUtilities::functionObjectByName(SafariShared::JSUtilities *this, const OpaqueJSContext *a2, OpaqueJSValue *string, const char *a4)
{
  OpaqueJSString *v6;
  const OpaqueJSValue *Property;
  OpaqueJSValue *result;
  OpaqueJSValue *v9;
  JSValueRef exception;

  exception = 0;
  v6 = JSStringCreateWithUTF8CString((const char *)string);
  Property = JSObjectGetProperty(this, a2, v6, &exception);
  if (v6)
    JSStringRelease(v6);
  if (!Property || !JSValueIsObject(this, Property))
    return 0;
  result = JSValueToObject(this, Property, &exception);
  if (result)
  {
    v9 = result;
    if (JSObjectIsFunction(this, result))
      return v9;
    else
      return 0;
  }
  return result;
}

void sub_1A3E894C4(_Unwind_Exception *exception_object)
{
  OpaqueJSString *v1;

  if (v1)
    JSStringRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1A3E89644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

JSStringRef SafariShared::JSUtilities::jsString@<X0>(SafariShared::JSUtilities *this@<X0>, JSStringRef *a2@<X8>)
{
  JSStringRef result;

  result = JSStringCreateWithUTF8CString((const char *)this);
  *a2 = result;
  return result;
}

JSValueRef SafariShared::JSUtilities::callJSMethodWithArguments(SafariShared::JSUtilities *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, const char *a4, const OpaqueJSValue *const *a5)
{
  OpaqueJSValue *v9;
  JSValueRef exception;

  v9 = SafariShared::JSUtilities::functionObjectByName(this, a2, a3, a4);
  if (!v9)
    return JSValueMakeUndefined(this);
  exception = 0;
  return JSObjectCallAsFunction(this, v9, a2, (size_t)a5, (const JSValueRef *)a4, &exception);
}

JSObjectRef SafariShared::JSUtilities::globalJSObjectByName(SafariShared::JSUtilities *this, const OpaqueJSContext *a2, const char *a3)
{
  OpaqueJSValue *GlobalObject;
  OpaqueJSString *v6;
  const OpaqueJSValue *Property;
  JSValueRef exception;

  GlobalObject = JSContextGetGlobalObject(this);
  exception = 0;
  v6 = JSStringCreateWithUTF8CString((const char *)a2);
  Property = JSObjectGetProperty(this, GlobalObject, v6, &exception);
  if (v6)
    JSStringRelease(v6);
  if (JSValueIsUndefined(this, Property))
    return 0;
  else
    return JSValueToObject(this, Property, &exception);
}

void sub_1A3E897DC(_Unwind_Exception *exception_object)
{
  OpaqueJSString *v1;

  if (v1)
    JSStringRelease(v1);
  _Unwind_Resume(exception_object);
}

void SafariShared::JSUtilities::logExceptionInChannel(void *a1, const OpaqueJSContext *a2, const OpaqueJSValue *a3)
{
  NSObject *v5;
  const OpaqueJSValue *v6;
  void *v7;
  OpaqueJSString *v8;
  const OpaqueJSValue *Property;
  int v10;
  OpaqueJSString *v11;
  const OpaqueJSValue *v12;
  void *v13;
  OpaqueJSString *v14;
  const OpaqueJSValue *v15;
  void *v16;
  int v17;
  void *v18;
  __int16 v19;
  void *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  void *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = JSValueToObject(a2, a3, 0);
  if (v6)
  {
    SafariShared::JSUtilities::toNSString(a2, v6, 0);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = JSStringCreateWithUTF8CString("line");
    Property = JSObjectGetProperty(a2, v6, v8, 0);
    if (v8)
      JSStringRelease(v8);
    if (Property)
      v10 = (int)JSValueToNumber(a2, Property, 0);
    else
      v10 = -1;
    v11 = JSStringCreateWithUTF8CString("sourceURL");
    v12 = JSObjectGetProperty(a2, v6, v11, 0);
    if (v11)
      JSStringRelease(v11);
    if (v12)
    {
      SafariShared::JSUtilities::toNSString(a2, v12, 0);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v13 = 0;
    }
    v14 = JSStringCreateWithUTF8CString("stack");
    v15 = JSObjectGetProperty(a2, v6, v14, 0);
    if (v14)
      JSStringRelease(v14);
    if (v15)
    {
      SafariShared::JSUtilities::toNSString(a2, v15, 0);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v16 = 0;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v17 = 138413058;
      v18 = v7;
      v19 = 2112;
      v20 = v13;
      v21 = 1024;
      v22 = v10;
      v23 = 2112;
      v24 = v16;
      _os_log_error_impl(&dword_1A3D90000, v5, OS_LOG_TYPE_ERROR, "JavaScript Exception: %@\n(%@:%d)\n%@", (uint8_t *)&v17, 0x26u);
    }

  }
}

void sub_1A3E89A14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

__CFString *SafariShared::JSUtilities::toNSString(JSContextRef ctx, JSValueRef value, uint64_t a3)
{
  __CFString *v5;
  OpaqueJSString *v6;

  if (a3 != 1)
  {
    if (a3 != 2)
      goto LABEL_6;
    if (JSValueIsUndefined(ctx, value))
    {
LABEL_5:
      v5 = 0;
      return v5;
    }
  }
  if (JSValueIsNull(ctx, value))
    goto LABEL_5;
LABEL_6:
  v6 = JSValueToStringCopy(ctx, value, 0);
  v5 = (__CFString *)JSStringCopyCFString(0, v6);
  if (v6)
    JSStringRelease(v6);
  return v5;
}

void sub_1A3E89B10(_Unwind_Exception *exception_object)
{
  OpaqueJSString *v1;

  if (v1)
    JSStringRelease(v1);
  _Unwind_Resume(exception_object);
}

void SafariShared::JSUtilities::registerJSObjectInGlobalSpace(SafariShared::JSUtilities *this, const OpaqueJSContext *a2, OpaqueJSClass *a3, char *a4, void *a5)
{
  OpaqueJSValue *GlobalObject;
  const OpaqueJSValue *v10;
  OpaqueJSString *v11;
  JSValueRef exception;

  GlobalObject = JSContextGetGlobalObject(this);
  v10 = JSObjectMake(this, a2, a4);
  exception = 0;
  v11 = JSStringCreateWithUTF8CString((const char *)a3);
  JSObjectSetProperty(this, GlobalObject, v11, v10, 0, &exception);
  if (v11)
    JSStringRelease(v11);
}

void sub_1A3E89BC0(_Unwind_Exception *exception_object)
{
  OpaqueJSString *v1;

  if (v1)
    JSStringRelease(v1);
  _Unwind_Resume(exception_object);
}

JSValueRef SafariShared::JSUtilities::toJSValue(const OpaqueJSContext *a1, void *a2, uint64_t a3)
{
  const __CFString *v5;
  __CFString *v6;
  JSValueRef String;
  OpaqueJSString *v8;

  v5 = a2;
  v6 = (__CFString *)v5;
  if (v5 || a3)
  {
    if (!v5)
      v5 = &stru_1E4B40D18;
    v8 = JSStringCreateWithCFString(v5);
    String = JSValueMakeString(a1, v8);
    if (v8)
      JSStringRelease(v8);
  }
  else
  {
    String = JSValueMakeNull(a1);
  }

  return String;
}

{
  void *v5;
  void *v6;
  JSValueRef v7;

  objc_msgSend(a2, "absoluteURL");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "safari_originalDataAsString");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = SafariShared::JSUtilities::toJSValue(a1, v6, a3);

  return v7;
}

void sub_1A3E89C5C(_Unwind_Exception *a1)
{
  void *v1;
  OpaqueJSString *v2;

  if (v2)
    JSStringRelease(v2);

  _Unwind_Resume(a1);
}

JSStringRef SafariShared::JSUtilities::jsString@<X0>(const __CFString *this@<X0>, JSStringRef *a2@<X8>)
{
  JSStringRef result;

  if (!this)
    this = &stru_1E4B40D18;
  result = JSStringCreateWithCFString(this);
  *a2 = result;
  return result;
}

void sub_1A3E89D1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

JSObjectRef SafariShared::JSUtilities::toJSError(SafariShared::JSUtilities *this, const OpaqueJSContext *a2, NSString *a3)
{
  const OpaqueJSContext *v4;
  JSObjectRef Error;
  JSValueRef arguments;

  v4 = a2;
  arguments = SafariShared::JSUtilities::toJSValue(this, v4, 1);
  Error = JSObjectMakeError(this, 1uLL, &arguments, 0);

  return Error;
}

void sub_1A3E89D98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

unint64_t SafariShared::JSUtilities::arrayLength(SafariShared::JSUtilities *this, const OpaqueJSContext *a2, JSValueRef *a3, const OpaqueJSValue **a4)
{
  OpaqueJSString *v7;
  const OpaqueJSValue *Property;

  *a3 = 0;
  v7 = JSStringCreateWithUTF8CString("length");
  Property = JSObjectGetProperty(this, a2, v7, a3);
  if (v7)
    JSStringRelease(v7);
  if (*a3)
    return 0;
  else
    return (unint64_t)JSValueToNumber(this, Property, a3);
}

void sub_1A3E89E38(_Unwind_Exception *exception_object)
{
  OpaqueJSString *v1;

  if (v1)
    JSStringRelease(v1);
  _Unwind_Resume(exception_object);
}

JSStringRef SafariShared::JSUtilities::nsString(JSStringRef string, OpaqueJSString *a2)
{
  if (string)
    string = (JSStringRef)JSStringCopyCFString(0, string);
  return string;
}

id SafariShared::JSUtilities::translateJSValueToNS(SafariShared::JSUtilities *this, const OpaqueJSContext *a2, const OpaqueJSValue *a3)
{
  void *v5;
  void *v6;
  void *v7;
  OpaqueJSValue *v8;
  id v9;
  void *v10;

  if (a2)
  {
    v5 = (void *)MEMORY[0x1E0CBE108];
    objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "valueWithJSValueRef:inContext:", a2, v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    if (JSValueIsObject(this, a2)
      && ((v8 = JSValueToObject(this, a2, 0), JSObjectIsFunction(this, v8))
       || (objc_msgSend(v7, "safari_isThenable") & 1) != 0))
    {
      v9 = v7;
    }
    else
    {
      objc_msgSend(v7, "toObject");
      v9 = (id)objc_claimAutoreleasedReturnValue();
    }
    v10 = v9;

  }
  else
  {
    v10 = 0;
  }
  return v10;
}

void sub_1A3E89F44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

WBSJSCallbackHandler *SafariShared::JSUtilities::toJSCallbackHandler(const OpaqueJSContext *a1, const OpaqueJSValue *a2, void *a3)
{
  id v5;
  OpaqueJSValue *v6;
  WBSJSCallbackHandler *v7;

  v5 = a3;
  if (a2 && (v6 = JSValueToObject(a1, a2, 0)) != 0 && JSObjectIsFunction(a1, v6))
    v7 = -[WBSJSCallbackHandler initWithCallbackFunction:errorReporter:context:]([WBSJSCallbackHandler alloc], "initWithCallbackFunction:errorReporter:context:", v6, v5, a1);
  else
    v7 = 0;

  return v7;
}

void sub_1A3E89FF0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

WBSJSCallbackHandler *SafariShared::JSUtilities::toJSErrorCallbackHandler(uint64_t a1, void *a2)
{
  id v3;
  WBSJSCallbackHandler *v4;

  v3 = a2;
  v4 = -[WBSJSCallbackHandler initWithErrorReporter:context:]([WBSJSCallbackHandler alloc], "initWithErrorReporter:context:", v3, a1);

  return v4;
}

void sub_1A3E8A048(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

WBSJSCallbackHandler *SafariShared::JSUtilities::toJSPromiseCallbackHandler(SafariShared::JSUtilities *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4)
{
  if (a2)
    return -[WBSJSCallbackHandler initWithPromiseResolveFunction:rejectFunction:context:]([WBSJSCallbackHandler alloc], "initWithPromiseResolveFunction:rejectFunction:context:", a2, a3, this);
  else
    return (WBSJSCallbackHandler *)0;
}

JSValueRef SafariShared::JSUtilities::deserializeJSObject(SafariShared::JSUtilities *this, const OpaqueJSContext *a2, NSString *a3)
{
  const OpaqueJSContext *v4;
  OpaqueJSString *v5;
  JSValueRef Null;

  v4 = a2;
  if (!v4)
    goto LABEL_6;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
    goto LABEL_6;
  v5 = JSStringCreateWithCFString((CFStringRef)v4);
  Null = JSValueMakeFromJSONString(this, v5);
  if (v5)
    JSStringRelease(v5);
  if (!Null)
LABEL_6:
    Null = JSValueMakeNull(this);

  return Null;
}

void sub_1A3E8A138(_Unwind_Exception *a1)
{
  void *v1;
  OpaqueJSString *v2;

  if (v2)
    JSStringRelease(v2);

  _Unwind_Resume(a1);
}

id SafariShared::JSUtilities::serializeJSObject(SafariShared::JSUtilities *this, const OpaqueJSContext *a2, JSValueRef *exception, const OpaqueJSValue **a4)
{
  OpaqueJSString *JSONString;
  OpaqueJSString *v5;
  void *v6;

  if (a2)
  {
    JSONString = JSValueCreateJSONString(this, a2, 0, exception);
    SafariShared::JSUtilities::nsString(JSONString, v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (JSONString)
      JSStringRelease(JSONString);
  }
  else
  {
    v6 = 0;
  }
  return v6;
}

void sub_1A3E8A1B0(_Unwind_Exception *exception_object)
{
  OpaqueJSString *v1;

  if (v1)
    JSStringRelease(v1);
  _Unwind_Resume(exception_object);
}

id SafariShared::JSUtilities::nsArrayWithJSValue(SafariShared::JSUtilities *this, const OpaqueJSContext *a2, const OpaqueJSValue *a3, objc_class *a4)
{
  const OpaqueJSContext *v5;
  const OpaqueJSValue **v6;
  OpaqueJSValue *v7;
  unint64_t v8;
  void *v9;
  unint64_t v10;
  uint64_t i;
  const OpaqueJSContext *PropertyAtIndex;
  const OpaqueJSValue *v13;
  void *v14;
  JSValueRef v16;

  v5 = JSValueToObject(this, a2, 0);
  if (v5)
  {
    v7 = v5;
    v16 = 0;
    v8 = SafariShared::JSUtilities::arrayLength(this, v5, &v16, v6);
    v9 = 0;
    if (!v16)
    {
      v10 = v8;
      objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", v8);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      if (v10)
      {
        for (i = 0; i != v10; ++i)
        {
          PropertyAtIndex = JSObjectGetPropertyAtIndex(this, v7, i, 0);
          SafariShared::JSUtilities::translateJSValueToNS(this, PropertyAtIndex, v13);
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            objc_msgSend(v9, "addObject:", v14);

        }
      }
    }
  }
  else
  {
    v9 = 0;
  }
  return v9;
}

void sub_1A3E8A2B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id SafariShared::JSUtilities::nsDictionaryExcludingNullValuesWithJSValue(SafariShared::JSUtilities *this, const OpaqueJSContext *a2, const OpaqueJSValue *a3)
{
  OpaqueJSValue *v5;
  OpaqueJSValue *v6;
  OpaqueJSPropertyNameArray *v7;
  size_t Count;
  void *v9;
  size_t i;
  OpaqueJSString *NameAtIndex;
  OpaqueJSString *v12;
  const OpaqueJSContext *Property;
  const OpaqueJSValue *v14;
  OpaqueJSString *v15;
  void *v16;
  void *v17;

  if (JSValueIsObject(this, a2) && (v5 = JSValueToObject(this, a2, 0)) != 0)
  {
    v6 = v5;
    v7 = JSObjectCopyPropertyNames(this, v5);
    Count = JSPropertyNameArrayGetCount(v7);
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", Count);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (Count)
    {
      for (i = 0; i != Count; ++i)
      {
        NameAtIndex = JSPropertyNameArrayGetNameAtIndex(v7, i);
        v12 = NameAtIndex;
        if (NameAtIndex)
          JSStringRetain(NameAtIndex);
        Property = JSObjectGetProperty(this, v6, v12, 0);
        if (!JSValueIsNull(this, Property))
        {
          SafariShared::JSUtilities::translateJSValueToNS(this, Property, v14);
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          if (v16)
          {
            SafariShared::JSUtilities::nsString(v12, v15);
            v17 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v9, "setObject:forKey:", v16, v17);

          }
        }
        if (v12)
          JSStringRelease(v12);
      }
    }
    JSPropertyNameArrayRelease(v7);
  }
  else
  {
    v9 = 0;
  }
  return v9;
}

void sub_1A3E8A420(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t WBS_LOG_CHANNEL_PREFIXAutoBugCapture()
{
  if (WBS_LOG_CHANNEL_PREFIXAutoBugCapture_onceToken != -1)
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXAutoBugCapture_onceToken, &__block_literal_global_3);
  return WBS_LOG_CHANNEL_PREFIXAutoBugCapture_log;
}

uint64_t WBS_LOG_CHANNEL_PREFIXAutoFill()
{
  if (WBS_LOG_CHANNEL_PREFIXAutoFill_onceToken != -1)
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXAutoFill_onceToken, &__block_literal_global_5);
  return WBS_LOG_CHANNEL_PREFIXAutoFill_log;
}

uint64_t WBS_LOG_CHANNEL_PREFIXAutoPlay()
{
  if (WBS_LOG_CHANNEL_PREFIXAutoPlay_onceToken != -1)
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXAutoPlay_onceToken, &__block_literal_global_7_0);
  return WBS_LOG_CHANNEL_PREFIXAutoPlay_log;
}

uint64_t WBS_LOG_CHANNEL_PREFIXBanners()
{
  if (WBS_LOG_CHANNEL_PREFIXBanners_onceToken != -1)
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXBanners_onceToken, &__block_literal_global_9);
  return WBS_LOG_CHANNEL_PREFIXBanners_log;
}

uint64_t WBS_LOG_CHANNEL_PREFIXCertificates()
{
  if (WBS_LOG_CHANNEL_PREFIXCertificates_onceToken != -1)
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXCertificates_onceToken, &__block_literal_global_13_1);
  return WBS_LOG_CHANNEL_PREFIXCertificates_log;
}

uint64_t WBS_LOG_CHANNEL_PREFIXCloudHistory()
{
  if (WBS_LOG_CHANNEL_PREFIXCloudHistory_onceToken != -1)
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXCloudHistory_onceToken, &__block_literal_global_17_0);
  return WBS_LOG_CHANNEL_PREFIXCloudHistory_log;
}

uint64_t WBS_LOG_CHANNEL_PREFIXCrowdsourcedAutoFill()
{
  if (WBS_LOG_CHANNEL_PREFIXCrowdsourcedAutoFill_onceToken != -1)
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXCrowdsourcedAutoFill_onceToken, &__block_literal_global_23_2);
  return WBS_LOG_CHANNEL_PREFIXCrowdsourcedAutoFill_log;
}

uint64_t WBS_LOG_CHANNEL_PREFIXCycler()
{
  if (WBS_LOG_CHANNEL_PREFIXCycler_onceToken != -1)
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXCycler_onceToken, &__block_literal_global_25_0);
  return WBS_LOG_CHANNEL_PREFIXCycler_log;
}

uint64_t WBS_LOG_CHANNEL_PREFIXKeychain()
{
  if (WBS_LOG_CHANNEL_PREFIXKeychain_onceToken != -1)
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXKeychain_onceToken, &__block_literal_global_29_1);
  return WBS_LOG_CHANNEL_PREFIXKeychain_log;
}

uint64_t WBS_LOG_CHANNEL_PREFIXKeyedArchiver()
{
  if (WBS_LOG_CHANNEL_PREFIXKeyedArchiver_onceToken != -1)
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXKeyedArchiver_onceToken, &__block_literal_global_31_0);
  return WBS_LOG_CHANNEL_PREFIXKeyedArchiver_log;
}

uint64_t WBS_LOG_CHANNEL_PREFIXMemory()
{
  if (WBS_LOG_CHANNEL_PREFIXMemory_onceToken != -1)
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXMemory_onceToken, &__block_literal_global_33_0);
  return WBS_LOG_CHANNEL_PREFIXMemory_log;
}

uint64_t WBS_LOG_CHANNEL_PREFIXOther()
{
  if (WBS_LOG_CHANNEL_PREFIXOther_onceToken != -1)
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXOther_onceToken, &__block_literal_global_39);
  return WBS_LOG_CHANNEL_PREFIXOther_log;
}

uint64_t WBS_LOG_CHANNEL_PREFIXPerSitePreferences()
{
  if (WBS_LOG_CHANNEL_PREFIXPerSitePreferences_onceToken != -1)
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXPerSitePreferences_onceToken, &__block_literal_global_45_0);
  return WBS_LOG_CHANNEL_PREFIXPerSitePreferences_log;
}

uint64_t WBS_LOG_CHANNEL_PREFIXProfiles()
{
  if (WBS_LOG_CHANNEL_PREFIXProfiles_onceToken != -1)
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXProfiles_onceToken, &__block_literal_global_49);
  return WBS_LOG_CHANNEL_PREFIXProfiles_log;
}

uint64_t WBS_LOG_CHANNEL_PREFIXReader()
{
  if (WBS_LOG_CHANNEL_PREFIXReader_onceToken != -1)
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXReader_onceToken, &__block_literal_global_51);
  return WBS_LOG_CHANNEL_PREFIXReader_log;
}

uint64_t WBS_LOG_CHANNEL_PREFIXSafariSuggestions()
{
  if (WBS_LOG_CHANNEL_PREFIXSafariSuggestions_onceToken != -1)
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXSafariSuggestions_onceToken, &__block_literal_global_53);
  return WBS_LOG_CHANNEL_PREFIXSafariSuggestions_log;
}

uint64_t WBS_LOG_CHANNEL_PREFIXSiriIntelligence()
{
  if (WBS_LOG_CHANNEL_PREFIXSiriIntelligence_onceToken != -1)
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXSiriIntelligence_onceToken, &__block_literal_global_59);
  return WBS_LOG_CHANNEL_PREFIXSiriIntelligence_log;
}

uint64_t WBS_LOG_CHANNEL_PREFIXStartPage()
{
  if (WBS_LOG_CHANNEL_PREFIXStartPage_onceToken != -1)
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXStartPage_onceToken, &__block_literal_global_61);
  return WBS_LOG_CHANNEL_PREFIXStartPage_log;
}

uint64_t WBS_LOG_CHANNEL_PREFIXTabDialogs()
{
  if (WBS_LOG_CHANNEL_PREFIXTabDialogs_onceToken != -1)
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXTabDialogs_onceToken, &__block_literal_global_63);
  return WBS_LOG_CHANNEL_PREFIXTabDialogs_log;
}

uint64_t WBS_LOG_CHANNEL_PREFIXTest()
{
  if (WBS_LOG_CHANNEL_PREFIXTest_onceToken != -1)
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXTest_onceToken, &__block_literal_global_65);
  return WBS_LOG_CHANNEL_PREFIXTest_log;
}

uint64_t WBS_LOG_CHANNEL_PREFIXUserMediaCapture()
{
  if (WBS_LOG_CHANNEL_PREFIXUserMediaCapture_onceToken != -1)
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXUserMediaCapture_onceToken, &__block_literal_global_69_0);
  return WBS_LOG_CHANNEL_PREFIXUserMediaCapture_log;
}

uint64_t WBS_LOG_CHANNEL_PREFIXWebDriver()
{
  if (WBS_LOG_CHANNEL_PREFIXWebDriver_onceToken != -1)
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXWebDriver_onceToken, &__block_literal_global_73);
  return WBS_LOG_CHANNEL_PREFIXWebDriver_log;
}

uint64_t WBS_LOG_CHANNEL_PREFIXDigitalHealth()
{
  if (WBS_LOG_CHANNEL_PREFIXDigitalHealth_onceToken != -1)
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXDigitalHealth_onceToken, &__block_literal_global_75);
  return WBS_LOG_CHANNEL_PREFIXDigitalHealth_log;
}

uint64_t WBS_LOG_CHANNEL_PREFIXPasswordBreachAwareness()
{
  if (WBS_LOG_CHANNEL_PREFIXPasswordBreachAwareness_onceToken != -1)
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXPasswordBreachAwareness_onceToken, &__block_literal_global_77_0);
  return WBS_LOG_CHANNEL_PREFIXPasswordBreachAwareness_log;
}

uint64_t WBS_LOG_CHANNEL_PREFIXTranslation()
{
  if (WBS_LOG_CHANNEL_PREFIXTranslation_onceToken != -1)
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXTranslation_onceToken, &__block_literal_global_79_0);
  return WBS_LOG_CHANNEL_PREFIXTranslation_log;
}

uint64_t WBS_LOG_CHANNEL_PREFIXExtensions()
{
  if (WBS_LOG_CHANNEL_PREFIXExtensions_onceToken != -1)
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXExtensions_onceToken, &__block_literal_global_81);
  return WBS_LOG_CHANNEL_PREFIXExtensions_log;
}

uint64_t WBS_LOG_CHANNEL_PREFIXCloudSettings()
{
  if (WBS_LOG_CHANNEL_PREFIXCloudSettings_onceToken != -1)
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXCloudSettings_onceToken, &__block_literal_global_83);
  return WBS_LOG_CHANNEL_PREFIXCloudSettings_log;
}

uint64_t WBS_LOG_CHANNEL_PREFIXInterstellar()
{
  if (WBS_LOG_CHANNEL_PREFIXInterstellar_onceToken != -1)
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXInterstellar_onceToken, &__block_literal_global_87);
  return WBS_LOG_CHANNEL_PREFIXInterstellar_log;
}

uint64_t WBS_LOG_CHANNEL_PREFIXWidgets()
{
  if (WBS_LOG_CHANNEL_PREFIXWidgets_onceToken != -1)
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXWidgets_onceToken, &__block_literal_global_91);
  return WBS_LOG_CHANNEL_PREFIXWidgets_log;
}

uint64_t WBS_LOG_CHANNEL_PREFIXBiomeDonation()
{
  if (WBS_LOG_CHANNEL_PREFIXBiomeDonation_onceToken != -1)
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXBiomeDonation_onceToken, &__block_literal_global_93);
  return WBS_LOG_CHANNEL_PREFIXBiomeDonation_log;
}

uint64_t WBS_LOG_CHANNEL_PREFIXBrowsingAssistant()
{
  if (WBS_LOG_CHANNEL_PREFIXBrowsingAssistant_onceToken != -1)
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXBrowsingAssistant_onceToken, &__block_literal_global_95_0);
  return WBS_LOG_CHANNEL_PREFIXBrowsingAssistant_log;
}

uint64_t WBS_LOG_CHANNEL_PREFIXSiriSuggestedSites()
{
  if (WBS_LOG_CHANNEL_PREFIXSiriSuggestedSites_onceToken != -1)
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXSiriSuggestedSites_onceToken, &__block_literal_global_97_0);
  return WBS_LOG_CHANNEL_PREFIXSiriSuggestedSites_log;
}

uint64_t WBS_LOG_CHANNEL_PREFIXUserDefinedContentBlocker()
{
  if (WBS_LOG_CHANNEL_PREFIXUserDefinedContentBlocker_onceToken != -1)
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXUserDefinedContentBlocker_onceToken, &__block_literal_global_99);
  return WBS_LOG_CHANNEL_PREFIXUserDefinedContentBlocker_log;
}

void sub_1A3E8C868(_Unwind_Exception *exception_object)
{
  OpaqueJSString *v1;

  if (v1)
    JSStringRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1A3E8C944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

void sub_1A3E8CBC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id a30)
{
  void *v30;
  void *v31;

  _Block_object_dispose(&a16, 8);
  _Block_object_dispose(&a20, 8);

  _Unwind_Resume(a1);
}

void sub_1A3E8CCD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3E8CD64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3E8CDC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E8CE18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E8CE94(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E8CEE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E8CF2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E8D064(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E8D0F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E8D184(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E8D1E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E8D294(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E8D3B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E8D490(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E8D538(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E8D618(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E8D67C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E8D72C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1A3E8D83C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E8D99C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v3;

  _Unwind_Resume(a1);
}

void sub_1A3E8DA7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3E8DB14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E8DC3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1A3E8DD18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E8DDA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E8DE1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E8DF68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E8E03C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E8E104(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1A3E8E20C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E8E2E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E8E390(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E8E434(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E8E650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1A3E8E73C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E8E808(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E8E8E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1A3E8E9E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E8EA40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E8EA8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E8EAD8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E8EB3C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E8EC28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E8ED48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E8EE94(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E8F00C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E8F0AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3E8F198(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3E8F214(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E8F274(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E8F2EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E8F380(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E8F4AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3E8F530(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E8F5A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E8F62C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E8F6F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3E8F77C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E8F7DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E8F994(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1A3E8FA5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E8FAA4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E8FB2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E8FC68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A3E8FD44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E8FFF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A3E901E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A3E90274(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E9037C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1A3E904A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1A3E90584(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E905EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id WBSObjCWrappedAllocateObject(objc_class *a1, NSUInteger a2)
{
  return NSAllocateObject(a1, a2, 0);
}

BOOL WBSObjCWrappedReplaceDealloc(objc_class *a1, void (*a2)(void))
{
  objc_method *InstanceMethod;
  const char *TypeEncoding;
  void (*MethodImplementation)(void);
  objc_class *Superclass;

  InstanceMethod = class_getInstanceMethod(a1, sel_dealloc);
  TypeEncoding = method_getTypeEncoding(InstanceMethod);
  MethodImplementation = class_replaceMethod(a1, sel_dealloc, a2, TypeEncoding);
  if (!MethodImplementation)
  {
    Superclass = class_getSuperclass(a1);
    MethodImplementation = class_getMethodImplementation(Superclass, sel_dealloc);
  }
  return class_addMethod(a1, sel_safari_oldDealloc, MethodImplementation, TypeEncoding);
}

uint64_t WBSObjCWrappedCallOldDealloc(void *a1)
{
  objc_class *Class;
  IMP MethodImplementation;

  Class = object_getClass(a1);
  MethodImplementation = class_getMethodImplementation(Class, sel_safari_oldDealloc);
  return ((uint64_t (*)(void *, char *))MethodImplementation)(a1, sel_safari_oldDealloc);
}

void sub_1A3E91820(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A3E919EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, id a15)
{

  std::vector<_WBSSearchSuggestionCandidate>::__destroy_vector::operator()[abi:sn180100](&a13);
  _Unwind_Resume(a1);
}

void sub_1A3E91CEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

unsigned __int8 *byteArrayToInteger(unsigned __int8 *result, unsigned int a2)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  int v12;

  if (a2 > 4)
  {
    v2 = WBS_LOG_CHANNEL_PREFIXOfflineSearchSuggestions();
    result = (unsigned __int8 *)os_log_type_enabled(v2, OS_LOG_TYPE_ERROR);
    if (!(_DWORD)result)
      return result;
    byteArrayToInteger(v2, v3, v4, v5, v6, v7, v8, v9);
    return 0;
  }
  if (!a2)
    return 0;
  v10 = result;
  v11 = 0;
  LODWORD(result) = 0;
  do
  {
    v12 = *v10++;
    result = (unsigned __int8 *)((v12 << v11) | result);
    v11 += 8;
  }
  while (8 * a2 != v11);
  return result;
}

void sub_1A3E91F84(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E92158(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1A3E92340(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

unint64_t std::vector<_WBSSearchSuggestionCandidate>::__push_back_slow_path<_WBSSearchSuggestionCandidate const&>(unint64_t *a1, uint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  int64x2_t v21;
  unint64_t v22;
  uint64_t v24;
  int64x2_t v25;
  unint64_t v26;
  uint64_t v27;

  v2 = *a1;
  v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  v8 = a1[2];
  v7 = (uint64_t)(a1 + 2);
  v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - v2) >> 3);
  if (2 * v9 > v4)
    v4 = 2 * v9;
  if (v9 >= 0x555555555555555)
    v10 = 0xAAAAAAAAAAAAAAALL;
  else
    v10 = v4;
  v27 = v7;
  if (!v10)
  {
    v12 = 0;
    v14 = 0;
    goto LABEL_14;
  }
  v11 = (char *)std::__allocate_at_least[abi:sn180100]<std::allocator<_WBSSearchSuggestionCandidate>>(v7, v10);
  v12 = v11;
  v14 = v13;
  if (!v11)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v3 = (unint64_t)&v11[24 * v3];
  v15 = *a2;
  *(_BYTE *)(v3 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)v3 = v15;
  *(_QWORD *)(v3 + 16) = (id)a2[2];
  v16 = *a1;
  v9 = a1[1];
  if (v9 == *a1)
  {
LABEL_15:
    v21 = vdupq_n_s64(v9);
    v17 = v3;
    goto LABEL_16;
  }
  v17 = v3;
  do
  {
    v18 = *(_QWORD *)(v9 - 24);
    v9 -= 24;
    v19 = *(_BYTE *)(v9 + 8);
    *(_QWORD *)(v17 - 24) = v18;
    v17 -= 24;
    *(_BYTE *)(v17 + 8) = v19;
    v20 = *(_QWORD *)(v9 + 16);
    *(_QWORD *)(v9 + 16) = 0;
    *(_QWORD *)(v17 + 16) = v20;
  }
  while (v9 != v16);
  v21 = *(int64x2_t *)a1;
LABEL_16:
  *a1 = v17;
  a1[1] = v3 + 24;
  v25 = v21;
  v22 = a1[2];
  a1[2] = (unint64_t)&v12[24 * v14];
  v26 = v22;
  v24 = v21.i64[0];
  std::__split_buffer<_WBSSearchSuggestionCandidate>::~__split_buffer((uint64_t)&v24);
  return v3 + 24;
}

void *std::__allocate_at_least[abi:sn180100]<std::allocator<_WBSSearchSuggestionCandidate>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:sn180100]();
  return operator new(24 * a2);
}

uint64_t std::__split_buffer<_WBSSearchSuggestionCandidate>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 24;

  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<_WBSSearchSuggestionCandidate>::__destroy_vector::operator()[abi:sn180100](void ***a1)
{
  void **v1;
  id *v2;
  id *v4;
  void *v5;
  id *v6;

  v1 = *a1;
  v2 = (id *)**a1;
  if (v2)
  {
    v4 = (id *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 3;

        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1A3E92888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A3E92C54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location, char a19)
{
  id *v19;
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a19, 8);
  objc_destroyWeak(v19);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_1_6(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_fault_impl(a1, v9, OS_LOG_TYPE_FAULT, a4, &a9, 0x20u);
}

void sub_1A3E93268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id urlForOfflineSearchDirectory()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;

  v0 = (void *)MEMORY[0x1E0C99E98];
  NSHomeDirectory();
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "fileURLWithPath:isDirectory:", v1, 1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "URLByAppendingPathComponent:isDirectory:", CFSTR("Library/Safari/OfflineSearchModels"), 1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id urlForOfflineSearchModelPlist()
{
  void *v0;
  void *v1;

  urlForOfflineSearchDirectory();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "URLByAppendingPathComponent:", CFSTR("OfflineSearch.plist"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

void sub_1A3E94120(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3E941E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1A3E94318(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E94480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1A3E944E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3E94544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3E946AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3E94BB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, _QWORD *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  void *v61;
  void *v62;
  uint64_t v63;

  _Block_object_dispose(&a61, 8);
  std::deque<_WBSSearchSuggestionCandidate>::~deque[abi:sn180100](a10);
  _Block_object_dispose((const void *)(v63 - 208), 8);
  std::deque<_WBSSearchSuggestionCandidate>::~deque[abi:sn180100](a11);

  _Unwind_Resume(a1);
}

void sub_1A3E94D90(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

void std::deque<_WBSSearchSuggestionCandidate>::push_back(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = 170 * ((v5 - v4) >> 3) - 1;
  if (v5 == v4)
    v6 = 0;
  if (v6 == *(_QWORD *)(a1 + 40) + *(_QWORD *)(a1 + 32))
  {
    std::deque<_WBSSearchSuggestionCandidate>::__add_back_capacity((const void **)a1);
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(_QWORD *)(a1 + 16);
  }
  if (v5 == v4 || (v7 = *(_QWORD *)(a1 + 40) + *(_QWORD *)(a1 + 32), (v8 = *(_QWORD *)(v4 + 8 * (v7 / 0xAA))) == 0))
  {
    __break(1u);
  }
  else
  {
    v9 = v8 + 24 * (v7 % 0xAA);
    v10 = *a2;
    *(_BYTE *)(v9 + 8) = *((_BYTE *)a2 + 8);
    *(_QWORD *)v9 = v10;
    *(_QWORD *)(v9 + 16) = (id)a2[2];
    ++*(_QWORD *)(a1 + 40);
  }
}

void std::deque<_WBSSearchSuggestionCandidate>::insert(uint64_t a1, _QWORD *a2, uint64_t a3, unint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  id *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t *v64;
  unint64_t v65;
  _QWORD *v66;
  uint64_t *v67;

  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = (_QWORD *)(v7 + 8 * (v6 / 0xAA));
  if (v8 == v7)
    v10 = 0;
  else
    v10 = *v9 + 24 * (v6 % 0xAA);
  if (a3 == v10)
    v11 = 0;
  else
    v11 = 170 * (a2 - v9)
        - 0x5555555555555555 * ((a3 - *a2) >> 3)
        + 0x5555555555555555 * ((uint64_t)(v10 - *v9) >> 3);
  v12 = *(_QWORD *)(a1 + 40);
  v13 = v12 - v11;
  if (v11 < v12 - v11)
  {
    if (v6)
    {
      if (v11)
        goto LABEL_10;
    }
    else
    {
      std::deque<_WBSSearchSuggestionCandidate>::__add_front_capacity(a1);
      if (v11)
      {
LABEL_10:
        v65 = a4;
        v14 = *(_QWORD *)(a1 + 32);
        v15 = *(_QWORD *)(a1 + 8);
        v16 = (_QWORD *)(v15 + 8 * (v14 / 0xAA));
        v17 = *v16;
        v18 = *v16 + 24 * (v14 % 0xAA);
        if (*(_QWORD *)(a1 + 16) == v15)
          v19 = 0;
        else
          v19 = v18;
        v20 = 0xAAAAAAAAAAAAAAABLL * ((v19 - v17) >> 3);
        if (v19 - v17 < 25)
          v21 = v16[-((170 - v20) / 0xAA)] + 24 * (170 * ((170 - v20) / 0xAA) - (170 - v20)) + 4056;
        else
          v21 = v16[(v20 - 1) / 0xAA] + 24 * ((v20 - 1) % 0xAA);
        if (v19 == a4)
        {
          v65 = v21;
          a4 = v21;
        }
        if (v21)
        {
          v44 = *(_QWORD *)v19;
          *(_BYTE *)(v21 + 8) = *(_BYTE *)(v19 + 8);
          *(_QWORD *)v21 = v44;
          v45 = *(_QWORD *)(v19 + 16);
          *(_QWORD *)(v19 + 16) = 0;
          *(_QWORD *)(v21 + 16) = v45;
          *(int64x2_t *)(a1 + 32) = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_1A3F5BCC0);
          if (v11 >= 2)
          {
            v46 = v19 - *v16;
            v47 = 0xAAAAAAAAAAAAAAABLL * (v46 >> 3);
            if (v46 < -23)
            {
              v58 = 168 - v47;
              v49 = &v16[-(v58 / 0xAA)];
              v50 = (uint64_t *)(*v49 + 24 * (170 * (v58 / 0xAA) - v58) + 4056);
            }
            else
            {
              v48 = v47 + 1;
              v49 = &v16[v48 / 0xAA];
              v50 = (uint64_t *)(*v49 + 24 * (v48 % 0xAA));
            }
            v66 = v16;
            v67 = (uint64_t *)v19;
            std::__deque_iterator<_WBSSearchSuggestionCandidate,_WBSSearchSuggestionCandidate*,_WBSSearchSuggestionCandidate&,_WBSSearchSuggestionCandidate**,long,170l>::operator+=[abi:sn180100](&v66, v11);
            std::deque<_WBSSearchSuggestionCandidate>::__move_and_check(a1, v49, v50, v66, v67, v16, v19, &v65);
            v19 = v59;
            a4 = v65;
          }
          v60 = *(_QWORD *)a4;
          *(_BYTE *)(v19 + 8) = *(_BYTE *)(a4 + 8);
          *(_QWORD *)v19 = v60;
          v56 = *(void **)(a4 + 16);
          v57 = (id *)(v19 + 16);
LABEL_55:
          objc_storeStrong(v57, v56);
          goto LABEL_56;
        }
        goto LABEL_60;
      }
    }
    v38 = *(_QWORD *)(a1 + 32);
    v39 = *(_QWORD *)(a1 + 8);
    v40 = (_QWORD *)(v39 + 8 * (v38 / 0xAA));
    v41 = *v40 + 24 * (v38 % 0xAA);
    if (*(_QWORD *)(a1 + 16) == v39)
      v42 = 0;
    else
      v42 = v41;
    if (v42 == *v40)
      v42 = *(v40 - 1) + 4080;
    v43 = *(_QWORD *)a4;
    *(_BYTE *)(v42 - 16) = *(_BYTE *)(a4 + 8);
    *(_QWORD *)(v42 - 24) = v43;
    *(_QWORD *)(v42 - 8) = *(id *)(a4 + 16);
    *(int64x2_t *)(a1 + 32) = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_1A3F5BCC0);
    goto LABEL_56;
  }
  if (v8 == v7)
    v22 = 0;
  else
    v22 = 170 * ((v8 - v7) >> 3) - 1;
  if (v22 == v12 + v6)
  {
    std::deque<_WBSSearchSuggestionCandidate>::__add_back_capacity((const void **)a1);
    v12 = *(_QWORD *)(a1 + 40);
    v13 = v12 - v11;
  }
  if (v12 != v11)
  {
    v65 = a4;
    v28 = *(_QWORD *)(a1 + 32) + v12;
    v29 = *(_QWORD *)(a1 + 8);
    v30 = (_QWORD *)(v29 + 8 * (v28 / 0xAA));
    v31 = *v30;
    v32 = *v30 + 24 * (v28 % 0xAA);
    if (*(_QWORD *)(a1 + 16) == v29)
      v33 = 0;
    else
      v33 = v32;
    v34 = 0xAAAAAAAAAAAAAAABLL * ((v33 - v31) >> 3);
    if (v33 - v31 < 25)
    {
      v51 = 170 - v34;
      v36 = &v30[-(v51 / 0xAA)];
      v37 = *v36 + 24 * (170 * (v51 / 0xAA) - v51) + 4056;
    }
    else
    {
      v35 = v34 - 1;
      v36 = &v30[v35 / 0xAA];
      v37 = *v36 + 24 * (v35 % 0xAA);
    }
    if (v37 == a4)
    {
      v65 = v33;
      a4 = v33;
    }
    if (v33)
    {
      v52 = *(_QWORD *)v37;
      *(_BYTE *)(v33 + 8) = *(_BYTE *)(v37 + 8);
      *(_QWORD *)v33 = v52;
      v53 = *(_QWORD *)(v37 + 16);
      *(_QWORD *)(v37 + 16) = 0;
      *(_QWORD *)(v33 + 16) = v53;
      ++*(_QWORD *)(a1 + 40);
      if (v13 >= 2)
      {
        v66 = v30;
        v67 = (uint64_t *)v33;
        std::__deque_iterator<_WBSSearchSuggestionCandidate,_WBSSearchSuggestionCandidate*,_WBSSearchSuggestionCandidate&,_WBSSearchSuggestionCandidate**,long,170l>::operator+=[abi:sn180100](&v66, -(uint64_t)v13);
        v30 = std::deque<_WBSSearchSuggestionCandidate>::__move_backward_and_check(a1, v66, (uint64_t)v67, v36, v37, v30, v33, &v65);
        v33 = v54;
        a4 = v65;
      }
      if (v33 == *v30)
        v33 = *(v30 - 1) + 4080;
      v55 = *(_QWORD *)a4;
      *(_BYTE *)(v33 - 16) = *(_BYTE *)(a4 + 8);
      *(_QWORD *)(v33 - 24) = v55;
      v56 = *(void **)(a4 + 16);
      v57 = (id *)(v33 - 8);
      goto LABEL_55;
    }
LABEL_60:
    __break(1u);
    return;
  }
  v23 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)(a1 + 16) == v23)
    goto LABEL_60;
  v24 = *(_QWORD *)(a1 + 32) + v11;
  v25 = *(_QWORD *)(v23 + 8 * (v24 / 0xAA));
  if (!v25)
    goto LABEL_60;
  v26 = v25 + 24 * (v24 % 0xAA);
  v27 = *(_QWORD *)a4;
  *(_BYTE *)(v26 + 8) = *(_BYTE *)(a4 + 8);
  *(_QWORD *)v26 = v27;
  *(_QWORD *)(v26 + 16) = *(id *)(a4 + 16);
  ++*(_QWORD *)(a1 + 40);
LABEL_56:
  v61 = *(_QWORD *)(a1 + 32);
  v62 = *(_QWORD *)(a1 + 8);
  v63 = (_QWORD *)(v62 + 8 * (v61 / 0xAA));
  if (*(_QWORD *)(a1 + 16) == v62)
    v64 = 0;
  else
    v64 = (uint64_t *)(*v63 + 24 * (v61 % 0xAA));
  v66 = v63;
  v67 = v64;
  std::__deque_iterator<_WBSSearchSuggestionCandidate,_WBSSearchSuggestionCandidate*,_WBSSearchSuggestionCandidate&,_WBSSearchSuggestionCandidate**,long,170l>::operator+=[abi:sn180100](&v66, v11);
}

_QWORD *std::deque<_WBSSearchSuggestionCandidate>::pop_back(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;

  v1 = result[5];
  if (v1 && (v2 = result, v3 = v1 + result[4] - 1, (v4 = *(_QWORD *)(result[1] + 8 * (v3 / 0xAA))) != 0))
  {

    --v2[5];
    return (_QWORD *)std::deque<_WBSSearchSuggestionCandidate>::__maybe_remove_back_spare[abi:sn180100](v2, 1);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t std::deque<_WBSSearchSuggestionCandidate>::pop_front(uint64_t result)
{
  unint64_t v1;
  uint64_t v2;
  int64x2_t *v3;

  v1 = *(_QWORD *)(result + 32);
  v2 = *(_QWORD *)(*(_QWORD *)(result + 8) + 8 * (v1 / 0xAA));
  if (v2)
  {
    v3 = (int64x2_t *)result;

    v3[2] = vaddq_s64(v3[2], (int64x2_t)xmmword_1A3F5BCD0);
    return std::deque<_WBSSearchSuggestionCandidate>::__maybe_remove_front_spare[abi:sn180100]((uint64_t)v3, 1);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1A3E95540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<_WBSSearchSuggestionCandidate *>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v4);
  return a1;
}

void std::deque<_WBSSearchSuggestionCandidate>::~deque[abi:sn180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
LABEL_9:
    *v4 = 0;
    v10 = (char *)v3 - (char *)v2;
    if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
    {
      do
      {
        operator delete(*v2);
        v3 = (void **)a1[2];
        v2 = (void **)(a1[1] + 8);
        a1[1] = v2;
        v10 = (char *)v3 - (char *)v2;
      }
      while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
    }
    v11 = v10 >> 3;
    if (v11 == 1)
    {
      v12 = 85;
    }
    else
    {
      if (v11 != 2)
      {
LABEL_17:
        while (v2 != v3)
        {
          v13 = *v2++;
          operator delete(v13);
        }
        std::__split_buffer<_WBSSearchSuggestionCandidate *>::~__split_buffer((uint64_t)a1);
        return;
      }
      v12 = 170;
    }
    a1[4] = v12;
    goto LABEL_17;
  }
  v4 = a1 + 5;
  v5 = a1[4];
  v6 = &v2[v5 / 0xAA];
  v7 = (unint64_t)*v6 + 24 * (v5 % 0xAA);
  v8 = (unint64_t)v2[(a1[5] + v5) / 0xAA] + 24 * ((a1[5] + v5) % 0xAA);
  if (v7 == v8)
    goto LABEL_9;
  while (v7)
  {

    v7 += 24;
    if (v7 - (_QWORD)*v6 == 4080)
    {
      v9 = (unint64_t)v6[1];
      ++v6;
      v7 = v9;
    }
    if (v7 == v8)
    {
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
      goto LABEL_9;
    }
  }
  __break(1u);
}

void std::deque<_WBSSearchSuggestionCandidate>::__add_back_capacity(const void **a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  unint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  void *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  int64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  char *matched;
  uint64_t v37;
  char *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  void *v54;
  void *v55;
  __int128 v56;
  __int128 v57;
  _QWORD *v58;

  v2 = (unint64_t)a1[4];
  v3 = v2 >= 0xAA;
  v4 = v2 - 170;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = (const void *)v4;
    v7 = a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 == v6)
    {
      v24 = v9 - (_BYTE *)*a1;
      if (v9 > *a1)
      {
LABEL_20:
        v25 = v24 >> 3;
        v26 = v24 >> 3 < -1;
        v27 = (v24 >> 3) + 2;
        if (v26)
          v28 = v27;
        else
          v28 = v25 + 1;
        v29 = -(v28 >> 1);
        v30 = v28 >> 1;
        v31 = &v9[-8 * v30];
        v32 = v8 - v9;
        if (v8 != v9)
        {
          memmove(&v9[-8 * v30], v9, v8 - v9);
          v9 = (char *)a1[1];
        }
        v8 = &v31[v32];
        a1[1] = &v9[8 * v29];
        a1[2] = &v31[v32];
LABEL_28:
        *(_QWORD *)v8 = v10;
        a1[2] = (char *)a1[2] + 8;
        return;
      }
      if (v8 == *a1)
        v35 = 1;
      else
        v35 = (v8 - (_BYTE *)*a1) >> 2;
      matched = (char *)std::__allocate_at_least[abi:sn180100]<std::allocator<WBSHistoryServiceURLCompletionMatchEntry * {__strong}>>(v5, v35);
      v38 = &matched[8 * (v35 >> 2)];
      v39 = (uint64_t *)a1[1];
      v8 = v38;
      v40 = (_BYTE *)a1[2] - (_BYTE *)v39;
      if (v40)
      {
        v8 = &v38[v40 & 0xFFFFFFFFFFFFFFF8];
        v41 = 8 * (v40 >> 3);
        v42 = &matched[8 * (v35 >> 2)];
        do
        {
          if (!v42)
            goto LABEL_5;
          v43 = *v39++;
          *(_QWORD *)v42 = v43;
          v42 += 8;
          v41 -= 8;
        }
        while (v41);
      }
      v44 = *a1;
      *a1 = matched;
      a1[1] = v38;
      a1[2] = v8;
      a1[3] = &matched[8 * v37];
      if (v44)
      {
        operator delete(v44);
        v8 = (char *)a1[2];
      }
    }
    if (!v8)
      goto LABEL_5;
    goto LABEL_28;
  }
  while (1)
  {
    v12 = a1[2];
    v13 = (v12 - (_BYTE *)a1[1]) >> 3;
    v14 = a1[3];
    v15 = v14 - (_BYTE *)*a1;
    if (v13 >= v15 >> 3)
      break;
    if (v14 != v12)
    {
      *(_QWORD *)&v56 = operator new(0xFF0uLL);
      std::__split_buffer<_WBSSearchSuggestionCandidate *>::push_back(a1, &v56);
      return;
    }
    *(_QWORD *)&v56 = operator new(0xFF0uLL);
    std::__split_buffer<_WBSSearchSuggestionCandidate *>::push_front(a1, &v56);
    v33 = a1[1];
    v8 = (char *)a1[2];
    v34 = *v33;
    v9 = (char *)(v33 + 1);
    v10 = v34;
    a1[1] = v9;
    if (v8 == a1[3])
    {
      v24 = v9 - (_BYTE *)*a1;
      if (v9 > *a1)
        goto LABEL_20;
      if (v8 == *a1)
        v45 = 1;
      else
        v45 = (v8 - (_BYTE *)*a1) >> 2;
      v46 = (char *)std::__allocate_at_least[abi:sn180100]<std::allocator<WBSHistoryServiceURLCompletionMatchEntry * {__strong}>>((uint64_t)(a1 + 3), v45);
      v48 = &v46[8 * (v45 >> 2)];
      v49 = (uint64_t *)a1[1];
      v8 = v48;
      v50 = (_BYTE *)a1[2] - (_BYTE *)v49;
      if (v50)
      {
        v8 = &v48[v50 & 0xFFFFFFFFFFFFFFF8];
        v51 = 8 * (v50 >> 3);
        v52 = &v46[8 * (v45 >> 2)];
        while (v52)
        {
          v53 = *v49++;
          *(_QWORD *)v52 = v53;
          v52 += 8;
          v51 -= 8;
          if (!v51)
            goto LABEL_47;
        }
        goto LABEL_5;
      }
LABEL_47:
      v54 = (void *)*a1;
      *a1 = v46;
      a1[1] = v48;
      a1[2] = v8;
      a1[3] = &v46[8 * v47];
      if (v54)
      {
        operator delete(v54);
        v8 = (char *)a1[2];
      }
    }
    if (v8)
      goto LABEL_28;
LABEL_5:
    __break(1u);
  }
  if (v14 == *a1)
    v16 = 1;
  else
    v16 = v15 >> 2;
  v58 = a1 + 3;
  *(_QWORD *)&v56 = std::__allocate_at_least[abi:sn180100]<std::allocator<WBSHistoryServiceURLCompletionMatchEntry * {__strong}>>((uint64_t)(a1 + 3), v16);
  *((_QWORD *)&v56 + 1) = v56 + 8 * v13;
  *(_QWORD *)&v57 = *((_QWORD *)&v56 + 1);
  *((_QWORD *)&v57 + 1) = v56 + 8 * v17;
  v55 = operator new(0xFF0uLL);
  std::__split_buffer<_WBSSearchSuggestionCandidate *>::push_back(&v56, &v55);
  v18 = a1[2];
  v19 = -7 - (_QWORD)v18;
  while (v18 != a1[1])
  {
    --v18;
    v19 += 8;
    std::__split_buffer<_WBSSearchSuggestionCandidate *>::push_front((const void **)&v56, v18);
  }
  v20 = (void *)*a1;
  v21 = v56;
  v22 = v57;
  *(_QWORD *)&v56 = *a1;
  *((_QWORD *)&v56 + 1) = v18;
  v23 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v21;
  *((_OWORD *)a1 + 1) = v22;
  v57 = v23;
  if (v18 != (_QWORD *)v23)
    *(_QWORD *)&v57 = v23 + (-(v23 + v19) & 0xFFFFFFFFFFFFFFF8);
  if (v20)
    operator delete(v20);
}

void sub_1A3E95A50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::__split_buffer<_WBSSearchSuggestionCandidate *>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  unint64_t v18;
  char *matched;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;

  v5 = (char *)a1[3];
  v4 = (uint64_t)(a1 + 3);
  v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    v7 = (char *)a1[1];
    v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v18 = 1;
      else
        v18 = (uint64_t)&v6[-*a1] >> 2;
      matched = (char *)std::__allocate_at_least[abi:sn180100]<std::allocator<WBSHistoryServiceURLCompletionMatchEntry * {__strong}>>(v4, v18);
      v21 = &matched[8 * (v18 >> 2)];
      v22 = (uint64_t *)a1[1];
      v6 = v21;
      v23 = a1[2] - (_QWORD)v22;
      if (v23)
      {
        v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        v24 = 8 * (v23 >> 3);
        v25 = &matched[8 * (v18 >> 2)];
        while (v25)
        {
          v26 = *v22++;
          *(_QWORD *)v25 = v26;
          v25 += 8;
          v24 -= 8;
          if (!v24)
            goto LABEL_16;
        }
        goto LABEL_20;
      }
LABEL_16:
      v27 = (char *)*a1;
      *a1 = matched;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &matched[8 * v20];
      if (v27)
      {
        operator delete(v27);
        v6 = (char *)a1[2];
      }
    }
    else
    {
      v9 = v8 >> 3;
      v10 = v8 >> 3 < -1;
      v11 = (v8 >> 3) + 2;
      if (v10)
        v12 = v11;
      else
        v12 = v9 + 1;
      v13 = -(v12 >> 1);
      v14 = v12 >> 1;
      v15 = &v7[-8 * v14];
      v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        v6 = (char *)a1[1];
      }
      v17 = &v6[8 * v13];
      v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  if (v6)
  {
    *(_QWORD *)v6 = *a2;
    a1[2] += 8;
    return;
  }
LABEL_20:
  __break(1u);
}

{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *matched;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      matched = (char *)std::__allocate_at_least[abi:sn180100]<std::allocator<WBSHistoryServiceURLCompletionMatchEntry * {__strong}>>(a1[4], v16);
      v19 = &matched[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &matched[8 * (v16 >> 2)];
        while (v23)
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
          if (!v22)
            goto LABEL_16;
        }
        goto LABEL_20;
      }
LABEL_16:
      v25 = (char *)*a1;
      *a1 = matched;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &matched[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  if (v4)
  {
    *(_QWORD *)v4 = *a2;
    a1[2] += 8;
    return;
  }
LABEL_20:
  __break(1u);
}

void std::__split_buffer<_WBSSearchSuggestionCandidate *>::push_front(const void **a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *matched;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void *v22;

  v4 = (char *)a1[1];
  if (v4 != *a1)
  {
    v5 = (char *)a1[1];
LABEL_19:
    *((_QWORD *)v5 - 1) = *a2;
    a1[1] = (char *)a1[1] - 8;
    return;
  }
  v6 = (uint64_t)(a1 + 3);
  v7 = a1[3];
  v8 = a1[2];
  if (v8 < v7)
  {
    v9 = (v7 - v8) >> 3;
    if (v9 >= -1)
      v10 = v9 + 1;
    else
      v10 = v9 + 2;
    v11 = v10 >> 1;
    v5 = &v4[8 * (v10 >> 1)];
    if (v8 != v4)
    {
      memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
      v4 = (char *)a1[2];
    }
    a1[1] = v5;
    a1[2] = &v4[8 * v11];
    goto LABEL_19;
  }
  if (v7 == v4)
    v12 = 1;
  else
    v12 = (v7 - v4) >> 2;
  v13 = 2 * v12;
  matched = (char *)std::__allocate_at_least[abi:sn180100]<std::allocator<WBSHistoryServiceURLCompletionMatchEntry * {__strong}>>(v6, v12);
  v5 = &matched[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
  v16 = (uint64_t *)a1[1];
  v17 = v5;
  v18 = (_BYTE *)a1[2] - (_BYTE *)v16;
  if (!v18)
  {
LABEL_17:
    v22 = (void *)*a1;
    *a1 = matched;
    a1[1] = v5;
    a1[2] = v17;
    a1[3] = &matched[8 * v15];
    if (v22)
    {
      operator delete(v22);
      v5 = (char *)a1[1];
    }
    goto LABEL_19;
  }
  v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
  v19 = 8 * (v18 >> 3);
  v20 = v5;
  while (v20)
  {
    v21 = *v16++;
    *(_QWORD *)v20 = v21;
    v20 += 8;
    v19 -= 8;
    if (!v19)
      goto LABEL_17;
  }
  __break(1u);
}

{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *matched;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void *v21;

  v4 = (char *)a1[1];
  if (v4 != *a1)
  {
    v5 = (char *)a1[1];
LABEL_19:
    *((_QWORD *)v5 - 1) = *a2;
    a1[1] = (char *)a1[1] - 8;
    return;
  }
  v6 = a1[2];
  v7 = a1[3];
  if (v6 < v7)
  {
    v8 = (v7 - v6) >> 3;
    if (v8 >= -1)
      v9 = v8 + 1;
    else
      v9 = v8 + 2;
    v10 = v9 >> 1;
    v5 = &v4[8 * (v9 >> 1)];
    if (v6 != v4)
    {
      memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
      v4 = (char *)a1[2];
    }
    a1[1] = v5;
    a1[2] = &v4[8 * v10];
    goto LABEL_19;
  }
  if (v7 == v4)
    v11 = 1;
  else
    v11 = (v7 - v4) >> 2;
  v12 = 2 * v11;
  matched = (char *)std::__allocate_at_least[abi:sn180100]<std::allocator<WBSHistoryServiceURLCompletionMatchEntry * {__strong}>>((uint64_t)a1[4], v11);
  v5 = &matched[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
  v15 = (uint64_t *)a1[1];
  v16 = v5;
  v17 = (_BYTE *)a1[2] - (_BYTE *)v15;
  if (!v17)
  {
LABEL_17:
    v21 = (void *)*a1;
    *a1 = matched;
    a1[1] = v5;
    a1[2] = v16;
    a1[3] = &matched[8 * v14];
    if (v21)
    {
      operator delete(v21);
      v5 = (char *)a1[1];
    }
    goto LABEL_19;
  }
  v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
  v18 = 8 * (v17 >> 3);
  v19 = v5;
  while (v19)
  {
    v20 = *v15++;
    *(_QWORD *)v19 = v20;
    v19 += 8;
    v18 -= 8;
    if (!v18)
      goto LABEL_17;
  }
  __break(1u);
}

void std::deque<_WBSSearchSuggestionCandidate>::__add_front_capacity(uint64_t a1)
{
  _BYTE *v2;
  _BYTE *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  unint64_t v23;
  char *matched;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  void *v41;
  void *__p;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;

  v2 = *(_BYTE **)(a1 + 8);
  v3 = *(_BYTE **)(a1 + 16);
  v4 = (v3 - v2) >> 3;
  if (v3 == v2)
    v5 = 0;
  else
    v5 = 170 * v4 - 1;
  v6 = *(_QWORD *)(a1 + 32);
  if ((unint64_t)(v5 - (*(_QWORD *)(a1 + 40) + v6)) >= 0xAA)
  {
    *(_QWORD *)(a1 + 32) = v6 + 170;
    __p = (void *)*((_QWORD *)v3 - 1);
    *(_QWORD *)(a1 + 16) = v3 - 8;
    std::__split_buffer<_WBSSearchSuggestionCandidate *>::push_front((const void **)a1, &__p);
    return;
  }
  v7 = a1 + 24;
  v8 = *(_BYTE **)(a1 + 24);
  v9 = *(_BYTE **)a1;
  v10 = (uint64_t)&v8[-*(_QWORD *)a1];
  if (v4 < v10 >> 3)
  {
    if (v2 == v9)
    {
      __p = operator new(0xFF0uLL);
      std::__split_buffer<_WBSSearchSuggestionCandidate *>::push_back((_QWORD *)a1, &__p);
      v34 = *(_QWORD *)(a1 + 16);
      __p = *(void **)(v34 - 8);
      *(_QWORD *)(a1 + 16) = v34 - 8;
    }
    else
    {
      __p = operator new(0xFF0uLL);
    }
    std::__split_buffer<_WBSSearchSuggestionCandidate *>::push_front((const void **)a1, &__p);
    if (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8) == 8)
      v35 = 85;
    else
      v35 = *(_QWORD *)(a1 + 32) + 170;
    *(_QWORD *)(a1 + 32) = v35;
    return;
  }
  if (v8 == v9)
    v11 = 1;
  else
    v11 = v10 >> 2;
  v46 = a1 + 24;
  __p = std::__allocate_at_least[abi:sn180100]<std::allocator<WBSHistoryServiceURLCompletionMatchEntry * {__strong}>>(v7, v11);
  v43 = (char *)__p;
  v44 = (char *)__p;
  v45 = (char *)__p + 8 * v12;
  v41 = operator new(0xFF0uLL);
  std::__split_buffer<_WBSSearchSuggestionCandidate *>::push_back(&__p, &v41);
  v13 = *(char **)(a1 + 8);
  v14 = v44;
  if (v13 == *(char **)(a1 + 16))
  {
    v33 = *(char **)(a1 + 8);
LABEL_39:
    v36 = *(void **)a1;
    v37 = v43;
    *(_QWORD *)a1 = __p;
    *(_QWORD *)(a1 + 8) = v37;
    __p = v36;
    v43 = v33;
    v38 = *(char **)(a1 + 24);
    v39 = v45;
    *(_QWORD *)(a1 + 16) = v14;
    *(_QWORD *)(a1 + 24) = v39;
    v44 = v13;
    v45 = v38;
    if (v14 - v37 == 8)
      v40 = 85;
    else
      v40 = *(_QWORD *)(a1 + 32) + 170;
    *(_QWORD *)(a1 + 32) = v40;
    if (v13 != v33)
      v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
    if (v36)
      operator delete(v36);
    return;
  }
  while (1)
  {
    if (v14 != v45)
      goto LABEL_30;
    v15 = v43 - (_BYTE *)__p;
    if (v43 > __p)
    {
      v16 = v15 >> 3;
      v17 = v15 >> 3 < -1;
      v18 = (v15 >> 3) + 2;
      if (v17)
        v19 = v18;
      else
        v19 = v16 + 1;
      v20 = &v43[-8 * (v19 >> 1)];
      v21 = v14 - v43;
      if (v14 != v43)
      {
        memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
        v14 = v43;
      }
      v22 = &v14[-8 * (v19 >> 1)];
      v14 = &v20[v21];
      v43 = v22;
      v44 = &v20[v21];
      goto LABEL_30;
    }
    v23 = v14 == __p ? 1 : (v14 - (_BYTE *)__p) >> 2;
    matched = (char *)std::__allocate_at_least[abi:sn180100]<std::allocator<WBSHistoryServiceURLCompletionMatchEntry * {__strong}>>(v46, v23);
    v26 = v43;
    v14 = &matched[8 * (v23 >> 2)];
    v27 = v44 - v43;
    if (v44 != v43)
      break;
LABEL_28:
    v31 = __p;
    __p = matched;
    v43 = &matched[8 * (v23 >> 2)];
    v44 = v14;
    v45 = &matched[8 * v25];
    if (v31)
    {
      operator delete(v31);
      v14 = v44;
    }
LABEL_30:
    if (!v14)
      goto LABEL_47;
    v32 = *(_QWORD *)v13;
    v13 += 8;
    *(_QWORD *)v14 = v32;
    v14 = v44 + 8;
    v44 += 8;
    if (v13 == *(char **)(a1 + 16))
    {
      v33 = *(char **)(a1 + 8);
      goto LABEL_39;
    }
  }
  v14 = &matched[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
  v28 = 8 * (v27 >> 3);
  v29 = &matched[8 * (v23 >> 2)];
  while (v29)
  {
    v30 = *(_QWORD *)v26;
    v26 += 8;
    *(_QWORD *)v29 = v30;
    v29 += 8;
    v28 -= 8;
    if (!v28)
      goto LABEL_28;
  }
LABEL_47:
  __break(1u);
}

void sub_1A3E961F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  void *v12;

  operator delete(v12);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t *std::deque<_WBSSearchSuggestionCandidate>::__move_and_check(uint64_t a1, uint64_t *a2, uint64_t *a3, _QWORD *a4, uint64_t *a5, uint64_t *a6, uint64_t a7, unint64_t *a8)
{
  int64_t v10;
  uint64_t *v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;

  v20 = a2;
  v21 = a3;
  if (a3 != a5)
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a5 - *a4) >> 3)
        + 170 * (a4 - a2)
        + 0x5555555555555555 * (((uint64_t)a3 - *a2) >> 3);
    if (v10 >= 1)
    {
      do
      {
        v12 = v21;
        v13 = *v20 + 4080;
        v14 = 0xAAAAAAAAAAAAAAABLL * ((v13 - (uint64_t)v21) >> 3);
        if (v14 >= v10)
          v15 = v10;
        else
          v15 = 0xAAAAAAAAAAAAAAABLL * ((v13 - (uint64_t)v21) >> 3);
        if (v14 <= v10)
          v16 = (uint64_t *)(*v20 + 4080);
        else
          v16 = &v21[3 * v10];
        v17 = *a8;
        if ((unint64_t)v21 <= *a8 && v17 < (unint64_t)v16)
        {
          if (v21 == (uint64_t *)a7)
            v18 = 0;
          else
            v18 = 0x5555555555555555 * (((uint64_t)v21 - *v20) >> 3)
                - 170 * (v20 - a6)
                - 0x5555555555555555 * ((a7 - *a6) >> 3);
          v22 = v20;
          v23 = (uint64_t *)v17;
          *a8 = std::__deque_iterator<_WBSSearchSuggestionCandidate,_WBSSearchSuggestionCandidate*,_WBSSearchSuggestionCandidate&,_WBSSearchSuggestionCandidate**,long,170l>::operator+=[abi:sn180100](&v22, v18)[1];
        }
        std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:sn180100]<_WBSSearchSuggestionCandidate *,std::__deque_iterator<_WBSSearchSuggestionCandidate,_WBSSearchSuggestionCandidate *,_WBSSearchSuggestionCandidate&,_WBSSearchSuggestionCandidate **,long,170l>,0>(v12, v16, a6, a7, &v22);
        a6 = v23;
        a7 = v24;
        v10 -= v15;
        std::__deque_iterator<_WBSSearchSuggestionCandidate,_WBSSearchSuggestionCandidate*,_WBSSearchSuggestionCandidate&,_WBSSearchSuggestionCandidate**,long,170l>::operator+=[abi:sn180100](&v20, v15);
      }
      while (v10 > 0);
    }
  }
  return a6;
}

_QWORD *std::deque<_WBSSearchSuggestionCandidate>::__move_backward_and_check(uint64_t a1, _QWORD *a2, uint64_t a3, unint64_t *a4, unint64_t a5, _QWORD *a6, uint64_t a7, unint64_t *a8)
{
  int64_t v10;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  _QWORD *v24;
  uint64_t v25;

  v21 = a4;
  v22 = a5;
  if (a5 != a3)
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a5 - *a4) >> 3) + 170 * (a4 - a2) + 0x5555555555555555 * ((a3 - *a2) >> 3);
    if (v10 >= 1)
    {
      do
      {
        v12 = v21;
        v13 = v22;
        if (v22 == *v21)
        {
          --v21;
          v13 = *--v12 + 4080;
        }
        v14 = v13 - 24;
        v22 = v13 - 24;
        v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - *v12) >> 3);
        if (v15 >= v10)
          v16 = v10;
        else
          v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - *v12) >> 3);
        if (v15 <= v10)
          v17 = *v12;
        else
          v17 = v13 - 24 * v10;
        v18 = *a8;
        if (*a8 < v13 && v17 <= v18)
        {
          if (v14 == a7)
            v19 = 0;
          else
            v19 = 170 * (a6 - v12)
                + 0x5555555555555555 * ((uint64_t)(v14 - *v12) >> 3)
                - 0x5555555555555555 * ((a7 - *a6) >> 3);
          v23 = v12;
          v24 = (_QWORD *)v18;
          *a8 = std::__deque_iterator<_WBSSearchSuggestionCandidate,_WBSSearchSuggestionCandidate*,_WBSSearchSuggestionCandidate&,_WBSSearchSuggestionCandidate**,long,170l>::operator+=[abi:sn180100](&v23, v19 - 1)[1];
        }
        std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:sn180100]<_WBSSearchSuggestionCandidate *,std::__deque_iterator<_WBSSearchSuggestionCandidate,_WBSSearchSuggestionCandidate *,_WBSSearchSuggestionCandidate&,_WBSSearchSuggestionCandidate **,long,170l>,0>(v17, v13, a6, a7, (uint64_t *)&v23);
        a6 = v24;
        a7 = v25;
        v10 -= v16;
        std::__deque_iterator<_WBSSearchSuggestionCandidate,_WBSSearchSuggestionCandidate*,_WBSSearchSuggestionCandidate&,_WBSSearchSuggestionCandidate**,long,170l>::operator+=[abi:sn180100](&v21, 1 - v16);
      }
      while (v10 > 0);
    }
  }
  return a6;
}

_QWORD *std::__deque_iterator<_WBSSearchSuggestionCandidate,_WBSSearchSuggestionCandidate*,_WBSSearchSuggestionCandidate&,_WBSSearchSuggestionCandidate**,long,170l>::operator+=[abi:sn180100](_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;

  if (a2)
  {
    v2 = (_QWORD *)*result;
    v3 = a2 - 0x5555555555555555 * ((uint64_t)(result[1] - *(_QWORD *)*result) >> 3);
    if ((uint64_t)v3 < 1)
    {
      v5 = 169 - v3;
      v6 = &v2[-(v5 / 0xAA)];
      *result = v6;
      v4 = *v6 + 24 * (170 * (v5 / 0xAA) - v5) + 4056;
    }
    else
    {
      *result = &v2[v3 / 0xAA];
      v4 = v2[v3 / 0xAA] + 24 * (v3 % 0xAA);
    }
    result[1] = v4;
  }
  return result;
}

uint64_t *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:sn180100]<_WBSSearchSuggestionCandidate *,std::__deque_iterator<_WBSSearchSuggestionCandidate,_WBSSearchSuggestionCandidate *,_WBSSearchSuggestionCandidate&,_WBSSearchSuggestionCandidate **,long,170l>,0>@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, uint64_t **a5@<X8>)
{
  uint64_t *v5;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = a3;
  result = a1;
  if (a1 == a2)
  {
    v8 = a1;
  }
  else
  {
    v8 = a2;
    v5 = a3 + 1;
    v9 = *a3;
    while (1)
    {
      v10 = 0xAAAAAAAAAAAAAAABLL * ((v9 - a4 + 4080) >> 3);
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (v8 - result)) < v10)
        v10 = 0xAAAAAAAAAAAAAAABLL * (v8 - result);
      result = std::__unwrap_and_dispatch[abi:sn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,_WBSSearchSuggestionCandidate *,_WBSSearchSuggestionCandidate *,_WBSSearchSuggestionCandidate *,0>(result, &result[3 * v10], a4);
      if (result == v8)
        break;
      v12 = *v5++;
      v9 = v12;
      a4 = v12;
    }
    a4 = v11;
    if (*(v5 - 1) + 4080 == v11)
      a4 = *v5;
    else
      --v5;
  }
  *a5 = v8;
  a5[1] = v5;
  a5[2] = (uint64_t *)a4;
  return result;
}

uint64_t *std::__unwrap_and_dispatch[abi:sn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,_WBSSearchSuggestionCandidate *,_WBSSearchSuggestionCandidate *,_WBSSearchSuggestionCandidate *,0>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v4 = a1;
  if (a1 == a2)
    return a1;
  v5 = a2;
  do
  {
    v6 = *v4;
    *(_BYTE *)(a3 + 8) = *((_BYTE *)v4 + 8);
    *(_QWORD *)a3 = v6;
    v7 = v4[2];
    v4[2] = 0;
    v8 = *(void **)(a3 + 16);
    *(_QWORD *)(a3 + 16) = v7;

    a3 += 24;
    v4 += 3;
  }
  while (v4 != v5);
  return v5;
}

uint64_t std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:sn180100]<_WBSSearchSuggestionCandidate *,std::__deque_iterator<_WBSSearchSuggestionCandidate,_WBSSearchSuggestionCandidate *,_WBSSearchSuggestionCandidate&,_WBSSearchSuggestionCandidate **,long,170l>,0>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = a3;
  if (a1 == a2)
  {
    v8 = a1;
  }
  else
  {
    v8 = a2;
    v9 = *a3;
    for (i = a2; ; i = v12)
    {
      v11 = 0xAAAAAAAAAAAAAAABLL * ((a4 - v9) >> 3);
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((i - a1) >> 3)) < v11)
        v11 = 0xAAAAAAAAAAAAAAABLL * ((i - a1) >> 3);
      v12 = i - 24 * v11;
      result = std::__unwrap_and_dispatch[abi:sn180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,_WBSSearchSuggestionCandidate *,_WBSSearchSuggestionCandidate *,_WBSSearchSuggestionCandidate *,0>(v12, i, a4);
      if (v12 == a1)
        break;
      v15 = *--v5;
      v9 = v15;
      a4 = v15 + 4080;
    }
    a4 = v14;
    if (*v5 + 4080 == v14)
    {
      v16 = v5[1];
      ++v5;
      a4 = v16;
    }
  }
  *a5 = v8;
  a5[1] = (uint64_t)v5;
  a5[2] = a4;
  return result;
}

uint64_t std::__unwrap_and_dispatch[abi:sn180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,_WBSSearchSuggestionCandidate *,_WBSSearchSuggestionCandidate *,_WBSSearchSuggestionCandidate *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  void *v10;

  if (a2 != a1)
  {
    v6 = a2;
    do
    {
      v7 = *(_QWORD *)(v6 - 24);
      v6 -= 24;
      v8 = *(_BYTE *)(v6 + 8);
      *(_QWORD *)(a3 - 24) = v7;
      a3 -= 24;
      *(_BYTE *)(a3 + 8) = v8;
      v9 = *(_QWORD *)(v6 + 16);
      *(_QWORD *)(v6 + 16) = 0;
      v10 = *(void **)(a3 + 16);
      *(_QWORD *)(a3 + 16) = v9;

    }
    while (v6 != a1);
  }
  return a2;
}

uint64_t std::deque<_WBSSearchSuggestionCandidate>::__maybe_remove_back_spare[abi:sn180100](_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = 170 * ((v2 - v3) >> 3) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0xAA)
    a2 = 1;
  if (v5 < 0x154)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

_OWORD *std::deque<_WBSSearchSuggestionCandidate>::deque(_OWORD *a1, _QWORD *a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t *v8;

  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  v3 = a2[4];
  v4 = a2[1];
  if (a2[2] == v4)
  {
    v5 = 0;
    v8 = 0;
    v7 = (_QWORD *)(v4 + 8 * ((a2[5] + v3) / 0xAA));
  }
  else
  {
    v5 = (uint64_t *)(*(_QWORD *)(v4 + 8 * (v3 / 0xAA)) + 24 * (v3 % 0xAA));
    v6 = a2[5] + v3;
    v7 = (_QWORD *)(v4 + 8 * (v6 / 0xAA));
    v8 = (uint64_t *)(*v7 + 24 * (v6 % 0xAA));
  }
  std::deque<_WBSSearchSuggestionCandidate>::__append<std::__deque_iterator<_WBSSearchSuggestionCandidate,_WBSSearchSuggestionCandidate const*,_WBSSearchSuggestionCandidate const&,_WBSSearchSuggestionCandidate const* const*,long,170l>,0>((uint64_t)a1, (_QWORD *)(v4 + 8 * (v3 / 0xAA)), v5, v7, v8);
  return a1;
}

void sub_1A3E9698C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__split_buffer<_WBSSearchSuggestionCandidate *>::~__split_buffer(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::deque<_WBSSearchSuggestionCandidate>::__append<std::__deque_iterator<_WBSSearchSuggestionCandidate,_WBSSearchSuggestionCandidate const*,_WBSSearchSuggestionCandidate const&,_WBSSearchSuggestionCandidate const* const*,long,170l>,0>(uint64_t a1, _QWORD *a2, uint64_t *a3, _QWORD *a4, uint64_t *a5)
{
  unint64_t v5;

  if (a5 == a3)
    v5 = 0;
  else
    v5 = 170 * (a4 - a2)
       - 0x5555555555555555 * (((uint64_t)a5 - *a4) >> 3)
       + 0x5555555555555555 * (((uint64_t)a3 - *a2) >> 3);
  return std::deque<_WBSSearchSuggestionCandidate>::__append_with_size[abi:sn180100]<std::__deque_iterator<_WBSSearchSuggestionCandidate,_WBSSearchSuggestionCandidate const*,_WBSSearchSuggestionCandidate const&,_WBSSearchSuggestionCandidate const* const*,long,170l>>(a1, a2, a3, v5);
}

_QWORD *std::deque<_WBSSearchSuggestionCandidate>::__append_with_size[abi:sn180100]<std::__deque_iterator<_WBSSearchSuggestionCandidate,_WBSSearchSuggestionCandidate const*,_WBSSearchSuggestionCandidate const&,_WBSSearchSuggestionCandidate const* const*,long,170l>>(uint64_t a1, _QWORD *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD *result;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  if (v9 == v8)
    v10 = 0;
  else
    v10 = 170 * ((v9 - v8) >> 3) - 1;
  v11 = *(_QWORD *)(a1 + 40) + *(_QWORD *)(a1 + 32);
  v12 = v10 - v11;
  if (a4 > v12)
  {
    std::deque<_WBSSearchSuggestionCandidate>::__add_back_capacity((const void **)a1, a4 - v12);
    v8 = *(_QWORD *)(a1 + 8);
    v9 = *(_QWORD *)(a1 + 16);
    v11 = *(_QWORD *)(a1 + 32) + *(_QWORD *)(a1 + 40);
  }
  v13 = (_QWORD *)(v8 + 8 * (v11 / 0xAA));
  if (v9 == v8)
    v14 = 0;
  else
    v14 = *v13 + 24 * (v11 % 0xAA);
  v23 = (_QWORD *)(v8 + 8 * (v11 / 0xAA));
  v24 = v14;
  result = std::__deque_iterator<_WBSSearchSuggestionCandidate,_WBSSearchSuggestionCandidate*,_WBSSearchSuggestionCandidate&,_WBSSearchSuggestionCandidate**,long,170l>::operator+=[abi:sn180100](&v23, a4);
  v16 = v24;
  if (v14 != v24)
  {
    v17 = v23;
    while (1)
    {
      v18 = v13 == v17 ? v16 : *v13 + 4080;
      if (v14 != v18)
        break;
      v18 = v14;
LABEL_22:
      *(_QWORD *)(a1 + 40) -= 0x5555555555555555 * ((uint64_t)(v18 - v14) >> 3);
      if (v13 != v17)
      {
        v22 = v13[1];
        ++v13;
        v14 = v22;
        if (v22 != v16)
          continue;
      }
      return result;
    }
    v19 = v14;
    while (v19)
    {
      v20 = *a3;
      *(_BYTE *)(v19 + 8) = *((_BYTE *)a3 + 8);
      *(_QWORD *)v19 = v20;
      result = (id)a3[2];
      *(_QWORD *)(v19 + 16) = result;
      a3 += 3;
      if ((uint64_t *)((char *)a3 - *a2) == (uint64_t *)4080)
      {
        v21 = (uint64_t *)a2[1];
        ++a2;
        a3 = v21;
      }
      v19 += 24;
      if (v19 == v18)
        goto LABEL_22;
    }
    __break(1u);
  }
  return result;
}

void std::deque<_WBSSearchSuggestionCandidate>::__add_back_capacity(const void **a1, unint64_t a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int64_t v26;
  char *v27;
  unint64_t v28;
  char *matched;
  uint64_t v30;
  char *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  int64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  void *v56;
  _QWORD *v57;
  uint64_t v58;
  void *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t i;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  int64_t v76;
  char *v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  void *v87;
  void *v88;
  void *__p[2];
  __int128 v90;
  _QWORD *v91;

  v3 = (char *)a1[2];
  v4 = v3 - (_BYTE *)a1[1];
  if (v4)
    v5 = a2;
  else
    v5 = a2 + 1;
  if (v5 % 0xAA)
    v6 = v5 / 0xAA + 1;
  else
    v6 = v5 / 0xAA;
  v7 = (unint64_t)a1[4];
  if (v6 >= v7 / 0xAA)
    v8 = v7 / 0xAA;
  else
    v8 = v6;
  if (v6 <= v7 / 0xAA)
  {
    a1[4] = (const void *)(v7 - 170 * v8);
    if (!v8)
      return;
    while (1)
    {
      v16 = a1[1];
      v19 = *v16;
      v17 = (char *)(v16 + 1);
      v18 = v19;
      a1[1] = v17;
      if (v3 != a1[3])
        goto LABEL_19;
      v20 = v17 - (_BYTE *)*a1;
      if (v17 <= *a1)
        break;
      v21 = v20 >> 3;
      v22 = v20 >> 3 < -1;
      v23 = (v20 >> 3) + 2;
      if (v22)
        v24 = v23;
      else
        v24 = v21 + 1;
      v25 = &v17[-8 * (v24 >> 1)];
      v26 = v3 - v17;
      if (v3 != v17)
      {
        memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
        v3 = (char *)a1[1];
      }
      v27 = &v3[-8 * (v24 >> 1)];
      v3 = &v25[v26];
      a1[1] = v27;
      a1[2] = &v25[v26];
LABEL_20:
      *(_QWORD *)v3 = v18;
      v3 = (char *)a1[2] + 8;
      a1[2] = v3;
      if (!--v8)
        return;
    }
    if (v3 == *a1)
      v28 = 1;
    else
      v28 = (v3 - (_BYTE *)*a1) >> 2;
    matched = (char *)std::__allocate_at_least[abi:sn180100]<std::allocator<WBSHistoryServiceURLCompletionMatchEntry * {__strong}>>((uint64_t)(a1 + 3), v28);
    v31 = &matched[8 * (v28 >> 2)];
    v32 = (uint64_t *)a1[1];
    v3 = v31;
    v33 = (_BYTE *)a1[2] - (_BYTE *)v32;
    if (v33)
    {
      v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
      v34 = 8 * (v33 >> 3);
      v35 = &matched[8 * (v28 >> 2)];
      do
      {
        if (!v35)
          goto LABEL_103;
        v36 = *v32++;
        *(_QWORD *)v35 = v36;
        v35 += 8;
        v34 -= 8;
      }
      while (v34);
    }
    v37 = *a1;
    *a1 = matched;
    a1[1] = v31;
    a1[2] = v3;
    a1[3] = &matched[8 * v30];
    if (v37)
    {
      operator delete(v37);
      v3 = (char *)a1[2];
    }
LABEL_19:
    if (!v3)
      goto LABEL_103;
    goto LABEL_20;
  }
  v9 = v6 - v8;
  v10 = (_BYTE *)a1[3] - (_BYTE *)*a1;
  if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
  {
    if (v9)
    {
      while (a1[3] != a1[2])
      {
        __p[0] = operator new(0xFF0uLL);
        std::__split_buffer<_WBSSearchSuggestionCandidate *>::push_back(a1, __p);
        --v6;
        if (!--v9)
          goto LABEL_79;
      }
      for (i = 0; i != v9; ++i)
      {
        __p[0] = operator new(0xFF0uLL);
        std::__split_buffer<_WBSSearchSuggestionCandidate *>::push_front(a1, __p);
        if ((_BYTE *)a1[2] - (_BYTE *)a1[1] == 8)
          v64 = 169;
        else
          v64 = 170;
        v65 = (uint64_t)a1[4] + v64;
        a1[4] = (const void *)v65;
      }
      v8 = v6;
    }
    else
    {
LABEL_79:
      v65 = (uint64_t)a1[4];
    }
    a1[4] = (const void *)(v65 - 170 * v8);
    if (!v8)
      return;
    v66 = (char *)a1[2];
    while (1)
    {
      v67 = a1[1];
      v70 = *v67;
      v68 = (char *)(v67 + 1);
      v69 = v70;
      a1[1] = v68;
      if (v66 != a1[3])
        goto LABEL_83;
      v71 = v68 - (_BYTE *)*a1;
      if (v68 <= *a1)
        break;
      v72 = v71 >> 3;
      v22 = v71 >> 3 < -1;
      v73 = (v71 >> 3) + 2;
      if (v22)
        v74 = v73;
      else
        v74 = v72 + 1;
      v75 = &v68[-8 * (v74 >> 1)];
      v76 = v66 - v68;
      if (v66 != v68)
      {
        memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
        v66 = (char *)a1[1];
      }
      v77 = &v66[-8 * (v74 >> 1)];
      v66 = &v75[v76];
      a1[1] = v77;
      a1[2] = &v75[v76];
LABEL_84:
      *(_QWORD *)v66 = v69;
      v66 = (char *)a1[2] + 8;
      a1[2] = v66;
      if (!--v8)
        return;
    }
    if (v66 == *a1)
      v78 = 1;
    else
      v78 = (v66 - (_BYTE *)*a1) >> 2;
    v79 = (char *)std::__allocate_at_least[abi:sn180100]<std::allocator<WBSHistoryServiceURLCompletionMatchEntry * {__strong}>>((uint64_t)(a1 + 3), v78);
    v81 = &v79[8 * (v78 >> 2)];
    v82 = (uint64_t *)a1[1];
    v66 = v81;
    v83 = (_BYTE *)a1[2] - (_BYTE *)v82;
    if (v83)
    {
      v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
      v84 = 8 * (v83 >> 3);
      v85 = &v79[8 * (v78 >> 2)];
      do
      {
        if (!v85)
          goto LABEL_103;
        v86 = *v82++;
        *(_QWORD *)v85 = v86;
        v85 += 8;
        v84 -= 8;
      }
      while (v84);
    }
    v87 = (void *)*a1;
    *a1 = v79;
    a1[1] = v81;
    a1[2] = v66;
    a1[3] = &v79[8 * v80];
    if (v87)
    {
      operator delete(v87);
      v66 = (char *)a1[2];
    }
LABEL_83:
    if (!v66)
      goto LABEL_103;
    goto LABEL_84;
  }
  v11 = v4 >> 3;
  v12 = v10 >> 2;
  if (v12 <= v9 + v11)
    v13 = v9 + v11;
  else
    v13 = v12;
  v14 = v11 - v8;
  v91 = a1 + 3;
  if (v13)
    v15 = (char *)std::__allocate_at_least[abi:sn180100]<std::allocator<WBSHistoryServiceURLCompletionMatchEntry * {__strong}>>((uint64_t)(a1 + 3), v13);
  else
    v15 = 0;
  v38 = -170 * v8;
  __p[0] = v15;
  __p[1] = &v15[8 * v14];
  *(void **)&v90 = __p[1];
  *((_QWORD *)&v90 + 1) = &v15[8 * v13];
  do
  {
    v88 = operator new(0xFF0uLL);
    std::__split_buffer<_WBSSearchSuggestionCandidate *>::push_back(__p, &v88);
    --v9;
  }
  while (v9);
  if (!v8)
  {
LABEL_66:
    v57 = a1[2];
    v58 = -7 - (_QWORD)v57;
    while (v57 != a1[1])
    {
      --v57;
      v58 += 8;
      std::__split_buffer<_WBSSearchSuggestionCandidate *>::push_front((const void **)__p, v57);
    }
    v59 = (void *)*a1;
    v60 = *(_OWORD *)__p;
    v61 = v90;
    __p[0] = (void *)*a1;
    __p[1] = v57;
    v62 = *((_OWORD *)a1 + 1);
    *(_OWORD *)a1 = v60;
    *((_OWORD *)a1 + 1) = v61;
    v90 = v62;
    a1[4] = (char *)a1[4] + v38;
    if (v57 != (_QWORD *)v62)
      *(_QWORD *)&v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
    if (v59)
      operator delete(v59);
    return;
  }
  v39 = a1[1];
  v40 = (char *)v90;
  while (v40 != *((char **)&v90 + 1))
  {
LABEL_64:
    if (!v40)
      goto LABEL_103;
    *(_QWORD *)v40 = *v39;
    v40 = (char *)(v90 + 8);
    *(_QWORD *)&v90 = v90 + 8;
    v39 = (char *)a1[1] + 8;
    a1[1] = v39;
    if (!--v8)
      goto LABEL_66;
  }
  v41 = (char *)__p[1] - (char *)__p[0];
  if (__p[1] > __p[0])
  {
    v42 = v41 >> 3;
    v22 = v41 >> 3 < -1;
    v43 = (v41 >> 3) + 2;
    if (v22)
      v44 = v43;
    else
      v44 = v42 + 1;
    v45 = (char *)__p[1] - 8 * (v44 >> 1);
    v46 = v40 - (char *)__p[1];
    if (v40 != __p[1])
    {
      memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
      v40 = (char *)__p[1];
    }
    v47 = &v40[-8 * (v44 >> 1)];
    v40 = &v45[v46];
    __p[1] = v47;
    *(_QWORD *)&v90 = &v45[v46];
    goto LABEL_64;
  }
  if (v40 == __p[0])
    v48 = 1;
  else
    v48 = (v40 - (char *)__p[0]) >> 2;
  v49 = (char *)std::__allocate_at_least[abi:sn180100]<std::allocator<WBSHistoryServiceURLCompletionMatchEntry * {__strong}>>((uint64_t)v91, v48);
  v51 = (uint64_t *)__p[1];
  v40 = &v49[8 * (v48 >> 2)];
  v52 = v90 - (unint64_t)__p[1];
  if ((void *)v90 == __p[1])
  {
LABEL_62:
    v56 = __p[0];
    __p[0] = v49;
    __p[1] = &v49[8 * (v48 >> 2)];
    *(_QWORD *)&v90 = v40;
    *((_QWORD *)&v90 + 1) = &v49[8 * v50];
    if (v56)
    {
      operator delete(v56);
      v40 = (char *)v90;
    }
    goto LABEL_64;
  }
  v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
  v53 = 8 * (v52 >> 3);
  v54 = &v49[8 * (v48 >> 2)];
  while (v54)
  {
    v55 = *v51++;
    *(_QWORD *)v54 = v55;
    v54 += 8;
    v53 -= 8;
    if (!v53)
      goto LABEL_62;
  }
LABEL_103:
  __break(1u);
}

void sub_1A3E970E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::deque<_WBSSearchSuggestionCandidate>::__maybe_remove_front_spare[abi:sn180100](uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0xAA)
    a2 = 1;
  if (v2 < 0x154)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 170;
  }
  return v4 ^ 1u;
}

void sub_1A3E97390(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location, id a18)
{
  id *v18;
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a18);
  _Unwind_Resume(a1);
}

void sub_1A3E97BA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_1A3E97F34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1A3E98004(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_1_7(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

void sub_1A3E98948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A3E98E94(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1A3E99DEC(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1A3E9AB1C(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_1A3E9AD9C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_1A3E9B250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A3E9B330(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1A3E9BAA0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_1A3E9BD38(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

uint64_t WBSParsecDomainSafariLastSearchFormatWithQuery(uint64_t a1)
{
  return objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("ls:%@"), a1);
}

void sub_1A3E9C4A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A3E9D05C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A3E9E708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t WBSUserMediaPermissionToWKPermissionDecision(unint64_t a1)
{
  if (a1 > 4)
    return 2;
  else
    return qword_1A3F5BD10[a1];
}

uint64_t WBSUserMediaPermissionToWKPermissionDecisionCamera(unint64_t a1)
{
  if ((a1 & 0x20) != 0)
    return 1;
  else
    return (a1 >> 3) & 2;
}

uint64_t WBSUserMediaPermissionToWKPermissionDecisionMicrophone(char a1)
{
  if ((a1 & 4) != 0)
    return 1;
  else
    return a1 & 2;
}

void WBSRespondWithRandomDelay(void *a1)
{
  id v1;
  uint32_t v2;
  dispatch_time_t v3;
  id v4;
  _QWORD block[4];
  id v6;

  v1 = a1;
  v2 = arc4random();
  v3 = dispatch_time(0, (uint64_t)(float)((float)((float)((float)v2 * 2.3283e-10) + 0.25) * 1000000000.0));
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __WBSRespondWithRandomDelay_block_invoke;
  block[3] = &unk_1E4B2A6E0;
  v6 = v1;
  v4 = v1;
  dispatch_after(v3, MEMORY[0x1E0C80D38], block);

}

void sub_1A3EA2AFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id OUTLINED_FUNCTION_1_9(uint64_t a1, void *a2)
{
  return a2;
}

void sub_1A3EA341C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3EA348C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3EA3614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1A3EA3B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1A3EA3DD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1A3EA3E60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3EA4198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1A3EA4434(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3EA47D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void __Block_byref_object_copy__35(uint64_t a1, uint64_t a2)
{
  objc_moveWeak((id *)(a1 + 40), (id *)(a2 + 40));
}

void sub_1A3EA48E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1A3EA4980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3EA4D00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3EA5050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, void *a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,void *a30)
{
  void *v30;
  void *v31;
  void *v32;
  void *v33;

  _Unwind_Resume(a1);
}

void sub_1A3EA51B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3EA5224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3EA557C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1A3EA5714(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;

  MEMORY[0x1A85998AC](v4, 0x1080C40D2F62047);

  _Unwind_Resume(a1);
}

void sub_1A3EA5818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16)
{

  _Unwind_Resume(a1);
}

void sub_1A3EA5C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

id SafariShared::WBSSQLiteDatabaseFetch<NSString * const {__strong}&,NSString * const {__strong}>(void *a1, void *a2, _QWORD *a3, _QWORD *a4)
{
  id v7;
  id v8;
  void *v9;
  void *v10;

  v7 = a1;
  v8 = a2;
  v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89CC8]), "initWithDatabase:query:", v7, v8);
  SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * const {__strong}&,NSString * const {__strong}>(v9, a3, a4);
  objc_msgSend(v9, "fetch");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

void sub_1A3EA5D6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3EA5F14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;

  MEMORY[0x1A85998AC](v4, 0x1080C40D2F62047);

  _Unwind_Resume(a1);
}

void sub_1A3EA6018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{

  _Unwind_Resume(a1);
}

void sub_1A3EA6260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1A3EA63E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3EA678C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3EA6A18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1A3EA6C80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3EA6EF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3EA70C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3EA74E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_1A3EA77BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3EA77F4()
{
  JUMPOUT(0x1A3EA77E8);
}

void sub_1A3EA7A14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3EA7A4C()
{
  JUMPOUT(0x1A3EA7A40);
}

void sub_1A3EA7C24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3EA7C5C()
{
  JUMPOUT(0x1A3EA7C50);
}

void sub_1A3EA8168(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3EA8454(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3EA869C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3EA8894(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3EA88F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3EA89D8(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_1A3EA8AA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3EA8BE4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3EA8D64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3EA8E38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3EA8F5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3EA902C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3EA9100(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3EA92DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3EA9448(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * const {__strong}&,NSString * const {__strong},long,NSString * {__strong}&>(void *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  id v9;

  v9 = a1;
  objc_msgSend(v9, "bindString:atParameterIndex:", *a2, 1);
  SafariShared::_WBSSQLiteStatementBindAllParameters<2,NSString * const {__strong}&,long,NSString * {__strong}&>(v9, a3, a4, a5);

}

void sub_1A3EA951C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<2,NSString * const {__strong}&,long,NSString * {__strong}&>(void *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  id v7;

  v7 = a1;
  objc_msgSend(v7, "bindString:atParameterIndex:", *a2, 2);
  SafariShared::_WBSSQLiteStatementBindAllParameters<3,long,NSString * {__strong}&>(v7, a3, a4);

}

void sub_1A3EA958C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<3,long,NSString * {__strong}&>(void *a1, _QWORD *a2, _QWORD *a3)
{
  id v5;

  v5 = a1;
  objc_msgSend(v5, "bindInt64:atParameterIndex:", *a2, 3);
  objc_msgSend(v5, "bindString:atParameterIndex:", *a3, 4);

}

void sub_1A3EA95F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * const {__strong}&,NSString * const {__strong},NSString * {__strong},NSString * const {__strong}&&>(void *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  id v9;

  v9 = a1;
  objc_msgSend(v9, "bindString:atParameterIndex:", *a2, 1);
  SafariShared::_WBSSQLiteStatementBindAllParameters<2,NSString * const {__strong}&,NSString * {__strong},NSString * const {__strong}&&>(v9, a3, a4, a5);

}

void sub_1A3EA9668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<2,NSString * const {__strong}&,NSString * {__strong},NSString * const {__strong}&&>(void *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  id v7;

  v7 = a1;
  objc_msgSend(v7, "bindString:atParameterIndex:", *a2, 2);
  SafariShared::_WBSSQLiteStatementBindAllParameters<3,NSString * {__strong},NSString * {__strong}&>(v7, a3, a4);

}

void sub_1A3EA96D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<3,NSString * {__strong},NSString * {__strong}&>(void *a1, _QWORD *a2, _QWORD *a3)
{
  id v5;

  v5 = a1;
  objc_msgSend(v5, "bindString:atParameterIndex:", *a2, 3);
  objc_msgSend(v5, "bindString:atParameterIndex:", *a3, 4);

}

void sub_1A3EA973C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * const {__strong}&,NSString * const {__strong}>(void *a1, _QWORD *a2, _QWORD *a3)
{
  id v5;

  v5 = a1;
  objc_msgSend(v5, "bindString:atParameterIndex:", *a2, 1);
  objc_msgSend(v5, "bindString:atParameterIndex:", *a3, 2);

}

void sub_1A3EA97A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<NSString * const {__strong}&,NSString * const {__strong}>(void *a1, _QWORD *a2, void *a3, _QWORD *a4, _QWORD *a5)
{
  id v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  id v17;

  v9 = a1;
  v10 = a3;
  v17 = 0;
  v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89CC8]), "initWithDatabase:query:error:", v9, v10, &v17);
  v12 = v17;
  v13 = v12;
  if (v11)
  {
    SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * const {__strong}&,NSString * const {__strong}>(v11, a4, a5);
    v14 = objc_msgSend(v11, "execute");
    objc_msgSend(v11, "invalidate");
    if ((v14 - 100) >= 2 && (_DWORD)v14 != 0)
      objc_msgSend(v9, "reportErrorWithCode:statement:error:", v14, objc_msgSend(v11, "handle"), a2);
  }
  else
  {
    if (a2)
      *a2 = objc_retainAutorelease(v12);
    v14 = objc_msgSend(v13, "code");
  }

  return v14;
}

void sub_1A3EA98C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<NSString * {__strong}>(void *a1, _QWORD *a2, void *a3, _QWORD *a4)
{
  id v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  id v15;

  v7 = a1;
  v8 = a3;
  v15 = 0;
  v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89CC8]), "initWithDatabase:query:error:", v7, v8, &v15);
  v10 = v15;
  v11 = v10;
  if (v9)
  {
    objc_msgSend(v9, "bindString:atParameterIndex:", *a4, 1);
    v12 = objc_msgSend(v9, "execute");
    objc_msgSend(v9, "invalidate");
    if ((v12 - 100) >= 2 && (_DWORD)v12 != 0)
      objc_msgSend(v7, "reportErrorWithCode:statement:error:", v12, objc_msgSend(v9, "handle"), a2);
  }
  else
  {
    if (a2)
      *a2 = objc_retainAutorelease(v10);
    v12 = objc_msgSend(v11, "code");
  }

  return v12;
}

void sub_1A3EA99F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<NSString * const {__strong}&,long>(void *a1, _QWORD *a2, void *a3, _QWORD *a4, _QWORD *a5)
{
  id v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  id v17;

  v9 = a1;
  v10 = a3;
  v17 = 0;
  v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89CC8]), "initWithDatabase:query:error:", v9, v10, &v17);
  v12 = v17;
  v13 = v12;
  if (v11)
  {
    SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * const {__strong}&,long>(v11, a4, a5);
    v14 = objc_msgSend(v11, "execute");
    objc_msgSend(v11, "invalidate");
    if ((v14 - 100) >= 2 && (_DWORD)v14 != 0)
      objc_msgSend(v9, "reportErrorWithCode:statement:error:", v14, objc_msgSend(v11, "handle"), a2);
  }
  else
  {
    if (a2)
      *a2 = objc_retainAutorelease(v12);
    v14 = objc_msgSend(v13, "code");
  }

  return v14;
}

void sub_1A3EA9B28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * const {__strong}&,long>(void *a1, _QWORD *a2, _QWORD *a3)
{
  id v5;

  v5 = a1;
  objc_msgSend(v5, "bindString:atParameterIndex:", *a2, 1);
  objc_msgSend(v5, "bindInt64:atParameterIndex:", *a3, 2);

}

void sub_1A3EA9BA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<NSString * const {__strong}&,NSString * {__strong}>(void *a1, _QWORD *a2, void *a3, _QWORD *a4, _QWORD *a5)
{
  id v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  id v17;

  v9 = a1;
  v10 = a3;
  v17 = 0;
  v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89CC8]), "initWithDatabase:query:error:", v9, v10, &v17);
  v12 = v17;
  v13 = v12;
  if (v11)
  {
    SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * const {__strong}&,NSString * {__strong}>(v11, a4, a5);
    v14 = objc_msgSend(v11, "execute");
    objc_msgSend(v11, "invalidate");
    if ((v14 - 100) >= 2 && (_DWORD)v14 != 0)
      objc_msgSend(v9, "reportErrorWithCode:statement:error:", v14, objc_msgSend(v11, "handle"), a2);
  }
  else
  {
    if (a2)
      *a2 = objc_retainAutorelease(v12);
    v14 = objc_msgSend(v13, "code");
  }

  return v14;
}

void sub_1A3EA9CC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * const {__strong}&,NSString * {__strong}>(void *a1, _QWORD *a2, _QWORD *a3)
{
  id v5;

  v5 = a1;
  objc_msgSend(v5, "bindString:atParameterIndex:", *a2, 1);
  objc_msgSend(v5, "bindString:atParameterIndex:", *a3, 2);

}

void sub_1A3EA9D3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * const {__strong}&,NSData * const {__strong}&>(void *a1, _QWORD *a2, _QWORD *a3)
{
  id v5;

  v5 = a1;
  objc_msgSend(v5, "bindString:atParameterIndex:", *a2, 1);
  objc_msgSend(v5, "bindData:atParameterIndex:", *a3, 2);

}

void sub_1A3EA9DA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * const {__strong}&,NSString * const {__strong},NSData * const {__strong}&,NSString * const {__strong}>(void *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  id v9;

  v9 = a1;
  objc_msgSend(v9, "bindString:atParameterIndex:", *a2, 1);
  SafariShared::_WBSSQLiteStatementBindAllParameters<2,NSString * const {__strong}&,NSData * const {__strong}&,NSString * const {__strong}>(v9, a3, a4, a5);

}

void sub_1A3EA9E18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<2,NSString * const {__strong}&,NSData * const {__strong}&,NSString * const {__strong}>(void *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  id v7;

  v7 = a1;
  objc_msgSend(v7, "bindString:atParameterIndex:", *a2, 2);
  SafariShared::_WBSSQLiteStatementBindAllParameters<3,NSData * const {__strong}&,NSString * const {__strong}&>(v7, a3, a4);

}

void sub_1A3EA9E88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<3,NSData * const {__strong}&,NSString * const {__strong}&>(void *a1, _QWORD *a2, _QWORD *a3)
{
  id v5;

  v5 = a1;
  objc_msgSend(v5, "bindData:atParameterIndex:", *a2, 3);
  objc_msgSend(v5, "bindString:atParameterIndex:", *a3, 4);

}

void sub_1A3EA9EEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_9(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x2Au);
}

void OUTLINED_FUNCTION_15(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = a1;
}

void sub_1A3EAA054(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3EAA0B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3EAA128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3EAB098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A3EAB3A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1A3EAB55C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3EAB690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1A3EAB8E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,void *a21,void *a22)
{
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

void sub_1A3EAB9BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1A3EABAC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A3EABC48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3EABD6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1A3EABE44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{

  _Unwind_Resume(a1);
}

void sub_1A3EABF6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18, void *a19)
{
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1A3EAC134(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3EAC264(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A3EAC3C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3EAC504(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3EAC658(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3EAC808(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3EAC9B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A3EACB3C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3EACC68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3EACCF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A3EACE0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3EAD104(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3EAD22C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3EAD30C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3EAD3CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A3EAD47C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A3EAD524(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3EAD5D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1A3EAD684(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3EAD780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A3EAD890(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3EAD9FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1A3EADB08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{

  _Unwind_Resume(a1);
}

void sub_1A3EADB90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A3EADC44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1A3EAE018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1A3EAE190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3EAE258(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3EAE43C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3EAE594(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3EAE924(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1A3EAEA4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A3EAEB58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A3EAEBB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3EAEC28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3EAEC70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3EAED44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3EAEDBC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3EAEE24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3EAEEB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3EAF084(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3EAF0F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3EAF188(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3EAF238(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3EAF3F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

SafariShared::ReaderAvailabilityController *SafariShared::ReaderAvailabilityController::ReaderAvailabilityController(SafariShared::ReaderAvailabilityController *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  *(_QWORD *)this = off_1E4B3E6F8;
  *((_WORD *)this + 4) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_WORD *)this + 20) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  v2 = operator new(0x18uLL);
  v2[2] = 0x3FF0000000000000;
  *(_OWORD *)v2 = xmmword_1A3F5BD90;
  v3 = operator new();
  *(_BYTE *)v3 = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 8) = 0;
  std::vector<double>::__vallocate[abi:sn180100]((_QWORD *)(v3 + 8), 3uLL);
  v4 = *(_QWORD *)(v3 + 16);
  v5 = *(_OWORD *)v2;
  *(_QWORD *)(v4 + 16) = v2[2];
  *(_OWORD *)v4 = v5;
  *(_QWORD *)(v3 + 16) = v4 + 24;
  *(_QWORD *)(v3 + 32) = this;
  *(_QWORD *)(v3 + 40) = 0x300000000;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_OWORD *)(v3 + 72) = xmmword_1A3F5BD70;
  *((_QWORD *)this + 8) = v3;
  operator delete(v2);
  *((_BYTE *)this + 72) = 0;
  v6 = operator new(0x18uLL);
  *(_OWORD *)v6 = xmmword_1A3F5BDA8;
  v6[2] = 0x4008000000000000;
  v7 = operator new();
  *(_BYTE *)v7 = 0;
  *(_QWORD *)(v7 + 16) = 0;
  *(_QWORD *)(v7 + 24) = 0;
  *(_QWORD *)(v7 + 8) = 0;
  std::vector<double>::__vallocate[abi:sn180100]((_QWORD *)(v7 + 8), 3uLL);
  v8 = *(_QWORD *)(v7 + 16);
  v9 = *(_OWORD *)v6;
  *(_QWORD *)(v8 + 16) = v6[2];
  *(_OWORD *)v8 = v9;
  *(_QWORD *)(v7 + 16) = v8 + 24;
  *(_QWORD *)(v7 + 32) = this;
  *(_QWORD *)(v7 + 40) = 0x100000000;
  *(_QWORD *)(v7 + 56) = 0;
  *(_QWORD *)(v7 + 64) = 0;
  *(_QWORD *)(v7 + 48) = 0;
  *(_OWORD *)(v7 + 72) = xmmword_1A3F5BD80;
  *((_QWORD *)this + 10) = v7;
  operator delete(v6);
  return this;
}

void sub_1A3EAF63C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v4 = v2;
  MEMORY[0x1A85998AC](v4, 0x10A0C409BFBB458);
  operator delete(v3);
  v6 = *(_QWORD *)(v1 + 64);
  *(_QWORD *)(v1 + 64) = 0;
  if (v6)
    std::default_delete<SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler>::operator()[abi:sn180100](v1 + 64, v6);

  v7 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  _Unwind_Resume(a1);
}

void SafariShared::ReaderAvailabilityController::~ReaderAvailabilityController(SafariShared::ReaderAvailabilityController *this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = off_1E4B3E6F8;
  v2 = (uint64_t *)((char *)this + 64);
  SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler::invalidateDetectionTimer(*((id **)this + 8));
  SafariShared::ReaderAvailabilityController::invalidateArticleReloadTimer((id *)this);
  SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler::invalidateDetectionTimer(*((id **)this + 10));
  SafariShared::ReaderAvailabilityController::cancelPageMetadataAndTextExtraction((id *)this);
  v3 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
    std::default_delete<SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler>::operator()[abi:sn180100]((uint64_t)this + 80, v3);
  v4 = *v2;
  *v2 = 0;
  if (v4)
    std::default_delete<SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler>::operator()[abi:sn180100]((uint64_t)v2, v4);

  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

void sub_1A3EAF7A0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *(_QWORD *)(v1 + 80);
  *(_QWORD *)(v1 + 80) = 0;
  if (v4)
    std::default_delete<SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler>::operator()[abi:sn180100](v1 + 80, v4);
  SafariShared::ReaderAvailabilityController::~ReaderAvailabilityController(v2, v1);
  _Unwind_Resume(a1);
}

void SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler::invalidateDetectionTimer(id *this)
{
  id v2;

  if (objc_msgSend(this[7], "isValid"))
  {
    objc_msgSend(this[7], "invalidate");
    v2 = this[7];
    this[7] = 0;

  }
}

void SafariShared::ReaderAvailabilityController::invalidateArticleReloadTimer(id *this)
{
  id v2;

  if (objc_msgSend(this[4], "isValid"))
  {
    objc_msgSend(this[4], "invalidate");
    v2 = this[4];
    this[4] = 0;

  }
}

void SafariShared::ReaderAvailabilityController::cancelPageMetadataAndTextExtraction(id *this)
{
  id v2;

  if (objc_msgSend(this[6], "isValid"))
  {
    objc_msgSend(this[6], "invalidate");
    v2 = this[6];
    this[6] = 0;

  }
}

uint64_t SafariShared::ReaderAvailabilityController::originalArticleFinderJSController(SafariShared::ReaderAvailabilityController *this)
{
  return *((_QWORD *)this + 2);
}

uint64_t SafariShared::ReaderAvailabilityController::prepareArticleFinder(SafariShared::ReaderAvailabilityController *this)
{
  uint64_t result;
  const OpaqueJSContext *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = (*(uint64_t (**)(SafariShared::ReaderAvailabilityController *))(*(_QWORD *)this + 80))(this);
  if ((_DWORD)result)
  {
    if (!*((_QWORD *)this + 2))
    {
      result = (*(uint64_t (**)(SafariShared::ReaderAvailabilityController *))(*(_QWORD *)this + 96))(this);
      if (!result)
        return result;
      v3 = (const OpaqueJSContext *)result;
      +[WBSReaderResources articleFinderScriptForContext:](WBSReaderResources, "articleFinderScriptForContext:", result);
      JSScriptEvaluate();
      (*(void (**)(uint64_t *__return_ptr, SafariShared::ReaderAvailabilityController *))(*(_QWORD *)this
                                                                                                  + 72))(&v7, this);
      v4 = v7;
      v7 = 0;
      v5 = *((_QWORD *)this + 2);
      *((_QWORD *)this + 2) = v4;
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
        v6 = v7;
        v7 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
      SafariShared::JSController::addScriptObjectToGlobalObject(*((SafariShared::JSController **)this + 2), v3);
      SafariShared::JSController::scriptObjectReady(*((SafariShared::JSController **)this + 2), v3);
    }
    return 1;
  }
  return result;
}

id SafariShared::ReaderAvailabilityController::extractTextSamplesForTranslation(SafariShared::ArticleFinderJSController **this)
{
  SafariShared::JSUtilities *v2;
  const OpaqueJSContext *TextSamplesByVisualExamination;
  const OpaqueJSValue *v4;
  void *v5;

  if (SafariShared::ReaderAvailabilityController::prepareArticleFinder((SafariShared::ReaderAvailabilityController *)this))
  {
    v2 = (SafariShared::JSUtilities *)(*((uint64_t (**)(SafariShared::ArticleFinderJSController **))*this + 12))(this);
    TextSamplesByVisualExamination = SafariShared::ArticleFinderJSController::findTextSamplesByVisualExamination(this[2]);
    SafariShared::JSUtilities::translateJSValueToNS(v2, TextSamplesByVisualExamination, v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v5 = 0;
  }
  return v5;
}

BOOL SafariShared::ReaderAvailabilityController::doesPageUseSearchEngineOptimizationMetadata(SafariShared::ArticleFinderJSController **this)
{
  NSObject *v3;

  if ((SafariShared::ReaderAvailabilityController::prepareArticleFinder((SafariShared::ReaderAvailabilityController *)this) & 1) != 0)
    return SafariShared::ArticleFinderJSController::usesSearchEngineOptimizationMetadata(this[2]);
  v3 = WBS_LOG_CHANNEL_PREFIXReader();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    SafariShared::ReaderAvailabilityController::doesPageUseSearchEngineOptimizationMetadata();
  return 0;
}

void SafariShared::ReaderAvailabilityController::checkTextSampleAvailabilityIfNeeded(SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler **this)
{
  WBSReaderAvailabilityCheckResult *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  void *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (((*((uint64_t (**)(SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler **))*this
         + 10))(this) & 1) != 0)
  {
    if ((SafariShared::ReaderAvailabilityController::prepareArticleFinder((SafariShared::ReaderAvailabilityController *)this) & 1) != 0)
    {
      v2 = objc_alloc_init(WBSReaderAvailabilityCheckResult);
      (*((void (**)(SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler **))*this + 6))(this);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      -[WBSReaderAvailabilityCheckResult setTextSamples:](v2, "setTextSamples:", v3);

      -[WBSReaderAvailabilityCheckResult textSamples](v2, "textSamples");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = objc_msgSend(v4, "count");

      if (v5)
      {
        v6 = (id)WBS_LOG_CHANNEL_PREFIXTranslation();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
        {
          -[WBSReaderAvailabilityCheckResult textSamples](v2, "textSamples");
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          v11 = 134217984;
          v12 = objc_msgSend(v10, "count");
          _os_log_debug_impl(&dword_1A3D90000, v6, OS_LOG_TYPE_DEBUG, "Translation found %lu text samples", (uint8_t *)&v11, 0xCu);

        }
        (*((void (**)(SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler **, WBSReaderAvailabilityCheckResult *))*this
         + 7))(this, v2);
      }
      else
      {
        v9 = WBS_LOG_CHANNEL_PREFIXTranslation();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
          SafariShared::ReaderAvailabilityController::checkTextSampleAvailabilityIfNeeded();
        SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler::scheduleDelayedDetection(this[10]);
      }

    }
    else
    {
      v8 = WBS_LOG_CHANNEL_PREFIXTranslation();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        SafariShared::ReaderAvailabilityController::doesPageUseSearchEngineOptimizationMetadata();
    }
  }
  else
  {
    v7 = WBS_LOG_CHANNEL_PREFIXTranslation();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      SafariShared::ReaderAvailabilityController::checkTextSampleAvailabilityIfNeeded();
  }
}

void sub_1A3EAFBF0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler::scheduleDelayedDetection(SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler *this)
{
  unint64_t v1;
  uint64_t v2;
  double v3;

  v1 = *((_QWORD *)this + 6);
  v2 = *((_QWORD *)this + 1);
  if (v1 >= (*((_QWORD *)this + 2) - v2) >> 3)
  {
    *((_QWORD *)this + 6) = 0;
  }
  else
  {
    v3 = *(double *)(v2 + 8 * v1);
    *((_QWORD *)this + 6) = v1 + 1;
    SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler::detectAvailabilityAfterDelay((uint64_t)this, *((_DWORD *)this + 11), v3);
  }
}

id SafariShared::ReaderAvailabilityController::extractCanonicalURLForSystemNoteTaking(SafariShared::ArticleFinderJSController **this)
{
  void *v2;

  if (SafariShared::ReaderAvailabilityController::prepareArticleFinder((SafariShared::ReaderAvailabilityController *)this))
  {
    SafariShared::ArticleFinderJSController::canonicalURLForSystemNoteTaking(this[2]);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id SafariShared::ReaderAvailabilityController::extractReaderArticleTitleIfAvailable(SafariShared::ArticleFinderJSController **this)
{
  void *v2;

  if (SafariShared::ReaderAvailabilityController::prepareArticleFinder((SafariShared::ReaderAvailabilityController *)this)
    && *((_BYTE *)this + 25))
  {
    SafariShared::ArticleFinderJSController::readerArticleTitle(this[2]);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }
  return v2;
}

void SafariShared::ReaderAvailabilityController::checkAvailabilityIfNeeded(SafariShared::ReaderAvailabilityController *this)
{
  char *v2;
  char v3;
  WBSReaderAvailabilityCheckResult *v4;
  int doesPageUseSearchEngineOptimizationMetadata;
  void *v6;
  NSObject *v7;
  void *v8;
  int v9;
  int v10;
  uint8_t v11[24];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 25))
  {
    SafariShared::ReaderAvailabilityController::extractPageMetadataAndTextSoonIfNeeded((uint64_t)this, 0);
  }
  else
  {
    v2 = (char *)*((_QWORD *)this + 8);
    if ((*((_DWORD *)v2 + 10) - 1) > 1 || !*((_BYTE *)this + 24))
    {
      v3 = *v2;
      *v2 = 1;
      *((_BYTE *)this + 25) = (*(uint64_t (**)(SafariShared::ReaderAvailabilityController *))(*(_QWORD *)this + 32))(this);
      *v2 = v3;
      v4 = objc_alloc_init(WBSReaderAvailabilityCheckResult);
      if (*((_BYTE *)this + 9))
      {
        doesPageUseSearchEngineOptimizationMetadata = *((unsigned __int8 *)this + 8);
      }
      else
      {
        doesPageUseSearchEngineOptimizationMetadata = SafariShared::ReaderAvailabilityController::doesPageUseSearchEngineOptimizationMetadata((SafariShared::ArticleFinderJSController **)this);
        if (*((_BYTE *)this + 9))
          *((_BYTE *)this + 9) = 0;
        *((_BYTE *)this + 8) = doesPageUseSearchEngineOptimizationMetadata;
        *((_BYTE *)this + 9) = 1;
      }
      -[WBSReaderAvailabilityCheckResult setDoesPageUseSearchEngineOptimizationMetadata:](v4, "setDoesPageUseSearchEngineOptimizationMetadata:", doesPageUseSearchEngineOptimizationMetadata != 0);
      if (!*((_BYTE *)this + 72))
      {
        (*(void (**)(SafariShared::ReaderAvailabilityController *))(*(_QWORD *)this + 48))(this);
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        -[WBSReaderAvailabilityCheckResult setTextSamples:](v4, "setTextSamples:", v6);
        *((_BYTE *)this + 72) = 1;
        v7 = (id)WBS_LOG_CHANNEL_PREFIXTranslation();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
          SafariShared::ReaderAvailabilityController::checkAvailabilityIfNeeded(v11, objc_msgSend(v6, "count"), v7);

        if (!objc_msgSend(v6, "count"))
          SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler::scheduleDelayedDetection(*((SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler **)this + 10));

      }
      SafariShared::ReaderAvailabilityController::extractPageMetadataAndTextSoonIfNeeded((uint64_t)this, 1);
      (*(void (**)(SafariShared::ReaderAvailabilityController *))(*(_QWORD *)this + 64))(this);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      -[WBSReaderAvailabilityCheckResult setCanonicalURL:](v4, "setCanonicalURL:", v8);

      v9 = *(_DWORD *)(*((_QWORD *)this + 8) + 40);
      if (*((_BYTE *)this + 25) || (v9 - 1) <= 2)
      {
        *((_BYTE *)this + 24) = 1;
        SafariShared::ReaderAvailabilityController::clearArticleFinderIfPossible((uint64_t)this);
        v10 = *((unsigned __int8 *)this + 25);
        if (!*((_BYTE *)this + 25) && v9 == 3)
        {
          SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler::scheduleDelayedDetection(*((SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler **)this + 8));
          v10 = *((unsigned __int8 *)this + 25);
        }
      }
      else
      {
        v10 = 0;
      }
      -[WBSReaderAvailabilityCheckResult setReaderAvailable:](v4, "setReaderAvailable:", v10 != 0);
      -[WBSReaderAvailabilityCheckResult setIsSameDocumentNavigation:](v4, "setIsSameDocumentNavigation:", v9 == 3);
      (*(void (**)(SafariShared::ReaderAvailabilityController *, WBSReaderAvailabilityCheckResult *))(*(_QWORD *)this + 104))(this, v4);

    }
  }
}

void sub_1A3EAFF38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void SafariShared::ReaderAvailabilityController::extractPageMetadataAndTextSoonIfNeeded(uint64_t a1, uint64_t a2)
{
  const __CFAllocator *v4;
  CFAbsoluteTime Current;
  CFRunLoopTimerRef v6;
  void *v7;
  __CFRunLoop *v8;
  CFRunLoopTimerContext v9;

  SafariShared::ReaderAvailabilityController::cancelPageMetadataAndTextExtraction((id *)a1);
  if (*(_BYTE *)(a1 + 41))
  {
LABEL_14:
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a1 + 120))(a1, 0, 0, a2);
    return;
  }
  if (!*(_BYTE *)(a1 + 24)
    || !*(_BYTE *)(a1 + 40)
    && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1)
    && (*(_DWORD *)(*(_QWORD *)(a1 + 64) + 40) & 0xFFFFFFFE) == 2
    || (*(_DWORD *)(*(_QWORD *)(a1 + 64) + 40) & 0xFFFFFFFE) != 2)
  {
    if (!*(_BYTE *)(a1 + 41)
      && !*(_BYTE *)(a1 + 40)
      && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1)
      && (*(_DWORD *)(*(_QWORD *)(a1 + 64) + 40) & 0xFFFFFFFE) == 2)
    {
      v9.version = 0;
      memset(&v9.retain, 0, 24);
      v9.info = (void *)a1;
      v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      Current = CFAbsoluteTimeGetCurrent();
      v6 = CFRunLoopTimerCreate(v4, Current + 5.0, 0.0, 0, 0, (CFRunLoopTimerCallBack)SafariShared::ReaderAvailabilityController::extractPageMetadataAndTextTimerFired, &v9);
      v7 = *(void **)(a1 + 48);
      *(_QWORD *)(a1 + 48) = v6;

      v8 = CFRunLoopGetCurrent();
      CFRunLoopAddTimer(v8, *(CFRunLoopTimerRef *)(a1 + 48), (CFRunLoopMode)*MEMORY[0x1E0C9B270]);
      return;
    }
    goto LABEL_14;
  }
  (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a1 + 120))(a1, 0, 0, 0);
  *(_BYTE *)(a1 + 41) = 1;
}

BOOL SafariShared::ReaderAvailabilityController::isPageLoadedEnoughForAvailabilityCheck(SafariShared::ReaderAvailabilityController *this)
{
  return (*(_DWORD *)(*((_QWORD *)this + 8) + 40) - 1) < 2;
}

uint64_t SafariShared::ReaderAvailabilityController::clearArticleFinderIfPossible(uint64_t this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!*(_BYTE *)(this + 56))
  {
    v1 = (_QWORD *)this;
    if ((*(_DWORD *)(*(_QWORD *)(this + 64) + 40) - 1) <= 2
      && (*(_BYTE *)(this + 41) || *(_BYTE *)(this + 40) || !*(_BYTE *)(this + 24) || !*(_BYTE *)(this + 25)))
    {
      v2 = *(_QWORD *)(this + 16);
      v1[2] = 0;
      if (v2)
        (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
      return (*(uint64_t (**)(_QWORD *))(*v1 + 88))(v1);
    }
  }
  return this;
}

uint64_t SafariShared::ReaderAvailabilityController::determineAvailability(SafariShared::ArticleFinderJSController **this)
{
  uint64_t result;

  result = SafariShared::ReaderAvailabilityController::prepareArticleFinder((SafariShared::ReaderAvailabilityController *)this);
  if ((_DWORD)result)
    return SafariShared::ArticleFinderJSController::readerIsAvailable(this[2]);
  return result;
}

void SafariShared::ReaderAvailabilityController::clearAvailability(SafariShared::ReaderAvailabilityController *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_WORD *)this + 12) = 0;
  *((_BYTE *)this + 72) = 0;
  *(_DWORD *)(*((_QWORD *)this + 8) + 40) = 0;
  *((_BYTE *)this + 27) = 0;
  *((_BYTE *)this + 41) = 0;
  SafariShared::ReaderAvailabilityController::cancelPageMetadataAndTextExtraction((id *)this);
  *((_BYTE *)this + 56) = 0;
  if (*((_BYTE *)this + 9))
    *((_BYTE *)this + 9) = 0;
}

uint64_t SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler::setLoadEvent(uint64_t result, int a2)
{
  *(_DWORD *)(result + 40) = a2;
  return result;
}

JSValueRef SafariShared::ReaderAvailabilityController::prepareToTransitionToReader(SafariShared::JSUtilities ***this)
{
  JSValueRef result;

  result = (JSValueRef)SafariShared::ReaderAvailabilityController::prepareArticleFinder((SafariShared::ReaderAvailabilityController *)this);
  if ((_DWORD)result)
  {
    result = SafariShared::ArticleFinderJSController::prepareToTransitionToReader(this[2]);
    *((_BYTE *)this + 56) = 1;
  }
  return result;
}

uint64_t SafariShared::ReaderAvailabilityController::originalArticleFinder(SafariShared::ReaderAvailabilityController *this)
{
  if (SafariShared::ReaderAvailabilityController::prepareArticleFinder(this))
    return *(_QWORD *)(*((_QWORD *)this + 2) + 24);
  else
    return 0;
}

uint64_t SafariShared::ReaderAvailabilityController::doneWithArticleFinder(SafariShared::ReaderAvailabilityController *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return (*(uint64_t (**)(SafariShared::ReaderAvailabilityController *))(*(_QWORD *)this + 88))(this);
}

void SafariShared::ReaderAvailabilityController::scheduleArticleReloadTimer(SafariShared::ReaderAvailabilityController *this, double a2)
{
  const __CFAllocator *v4;
  CFAbsoluteTime Current;
  CFRunLoopTimerRef v6;
  void *v7;
  __CFRunLoop *v8;
  CFRunLoopTimerContext v9;

  SafariShared::ReaderAvailabilityController::invalidateArticleReloadTimer((id *)this);
  v9.version = 0;
  memset(&v9.retain, 0, 24);
  v9.info = this;
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Current = CFAbsoluteTimeGetCurrent();
  v6 = CFRunLoopTimerCreate(v4, Current + a2, 0.0, 0, 0, (CFRunLoopTimerCallBack)SafariShared::ReaderAvailabilityController::articleReloadTimerFired, &v9);
  v7 = (void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v6;

  v8 = CFRunLoopGetCurrent();
  CFRunLoopAddTimer(v8, *((CFRunLoopTimerRef *)this + 4), (CFRunLoopMode)*MEMORY[0x1E0C9B270]);
}

SafariShared::JSUtilities **SafariShared::ReaderAvailabilityController::articleReloadTimerFired(SafariShared::ReaderAvailabilityController *this, __CFRunLoopTimer *a2, void *a3)
{
  SafariShared::JSUtilities **result;

  *((_BYTE *)a2 + 27) = 0;
  result = (SafariShared::JSUtilities **)*((_QWORD *)a2 + 2);
  if (result)
  {
    SafariShared::ArticleFinderJSController::reloadArticleContent(result);
    return (SafariShared::JSUtilities **)(*(uint64_t (**)(__CFRunLoopTimer *))(*(_QWORD *)a2 + 112))(a2);
  }
  return result;
}

void SafariShared::ReaderAvailabilityController::detectAvailabilityAfterDelay(uint64_t a1, int a2, double a3)
{
  SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler::detectAvailabilityAfterDelay(*(_QWORD *)(a1 + 64), a2, a3);
}

void SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler::detectAvailabilityAfterDelay(uint64_t a1, int a2, double a3)
{
  double Current;
  double v7;

  Current = CFAbsoluteTimeGetCurrent();
  if (!*(_BYTE *)a1)
  {
    v7 = Current + a3;
    if (objc_msgSend(*(id *)(a1 + 56), "isValid"))
    {
      if (v7 > *(double *)(a1 + 64))
        return;
      SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler::invalidateDetectionTimer((id *)a1);
    }
    SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler::scheduleDetectionTimer((SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler *)a1, a3);
    *(double *)(a1 + 64) = v7;
    *(_DWORD *)(a1 + 40) = a2;
  }
}

void SafariShared::ReaderAvailabilityController::setCanRunAvailabilityDetection(SafariShared::ReaderAvailabilityController *this, int a2)
{
  if (*((unsigned __int8 *)this + 26) != a2)
  {
    *((_BYTE *)this + 26) = a2;
    if ((a2 & 1) == 0)
      SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler::invalidateDetectionTimer(*((id **)this + 8));
  }
}

void SafariShared::ReaderAvailabilityController::didFinishDocumentLoad(SafariShared::ReaderAvailabilityController *this)
{
  SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler *v2;

  v2 = (SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler *)*((_QWORD *)this + 8);
  *((_DWORD *)v2 + 10) = 1;
  if (*((_BYTE *)this + 27))
    SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler::scheduleDetectionTimer(v2, 3.0);
}

void SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler::scheduleDetectionTimer(SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler *this, double a2)
{
  const __CFAllocator *v4;
  CFAbsoluteTime Current;
  CFRunLoopTimerRef v6;
  void *v7;
  __CFRunLoop *v8;
  CFRunLoopTimerContext v9;

  SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler::invalidateDetectionTimer((id *)this);
  v9.version = 0;
  memset(&v9.retain, 0, 24);
  v9.info = this;
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Current = CFAbsoluteTimeGetCurrent();
  v6 = CFRunLoopTimerCreate(v4, Current + a2, 0.0, 0, 0, (CFRunLoopTimerCallBack)SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler::detectionTimerFired, &v9);
  v7 = (void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = v6;

  v8 = CFRunLoopGetCurrent();
  CFRunLoopAddTimer(v8, *((CFRunLoopTimerRef *)this + 7), (CFRunLoopMode)*MEMORY[0x1E0C9B270]);
}

void SafariShared::ReaderAvailabilityController::didFinishLoad(SafariShared::ReaderAvailabilityController *this)
{
  SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler *v2;

  v2 = (SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler *)*((_QWORD *)this + 8);
  *((_DWORD *)v2 + 10) = 2;
  if (*((_BYTE *)this + 27))
    SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler::scheduleDetectionTimer(v2, 0.0);
  SafariShared::ReaderAvailabilityController::extractPageMetadataAndTextSoonIfNeeded((uint64_t)this, 0);
}

uint64_t SafariShared::ReaderAvailabilityController::detectAvailabilityForUIProcessDrivenCheck(SafariShared::ArticleFinderJSController **this)
{
  uint64_t result;

  result = SafariShared::ReaderAvailabilityController::prepareArticleFinder((SafariShared::ReaderAvailabilityController *)this);
  if ((_DWORD)result)
    return SafariShared::ArticleFinderJSController::detectAvailabilityForUIProcessDrivenCheck(this[2]);
  return result;
}

void SafariShared::ReaderAvailabilityController::detectAvailabilityAfterSameDocumentNavigation(SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler **this)
{
  SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler::scheduleDelayedDetection(this[8]);
}

uint64_t SafariShared::ReaderAvailabilityController::canExtractPageMetadataAndText(SafariShared::ReaderAvailabilityController *this)
{
  uint64_t result;

  if (*((_BYTE *)this + 41) || *((_BYTE *)this + 40))
    return 0;
  result = (*(uint64_t (**)(SafariShared::ReaderAvailabilityController *))(*(_QWORD *)this + 80))(this);
  if ((_DWORD)result)
    return (*(_DWORD *)(*((_QWORD *)this + 8) + 40) & 0xFFFFFFFE) == 2;
  return result;
}

BOOL SafariShared::ReaderAvailabilityController::isPageLoadedEnoughForPageMetadataAndTextExtraction(SafariShared::ReaderAvailabilityController *this)
{
  return (*(_DWORD *)(*((_QWORD *)this + 8) + 40) & 0xFFFFFFFE) == 2;
}

void SafariShared::ReaderAvailabilityController::extractPageMetadataAndTextTimerFired(SafariShared::ReaderAvailabilityController *this, __CFRunLoopTimer *a2, void *a3)
{
  SafariShared::ReaderAvailabilityController::extractPageMetadataAndTextNow(a2);
}

void SafariShared::ReaderAvailabilityController::extractPageMetadataAndTextNow(SafariShared::ReaderAvailabilityController *this)
{
  void *v2;
  id v3;

  SafariShared::ReaderAvailabilityController::cancelPageMetadataAndTextExtraction((id *)this);
  if (!*((_WORD *)this + 20)
    && (*(unsigned int (**)(SafariShared::ReaderAvailabilityController *))(*(_QWORD *)this + 80))(this)
    && (*(_DWORD *)(*((_QWORD *)this + 8) + 40) & 0xFFFFFFFE) == 2
    && (SafariShared::ReaderAvailabilityController::prepareArticleFinder(this) & 1) != 0)
  {
    *((_BYTE *)this + 41) = 1;
    v3 = objc_alloc_init(MEMORY[0x1E0CB37A0]);
    if (*((_BYTE *)this + 25))
    {
      SafariShared::ArticleFinderJSController::readerTextIncludingArticleMetadata(*((SafariShared::ArticleFinderJSController **)this + 2), 1);
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      if (v2)
        objc_msgSend(v3, "appendString:", v2);

    }
    (*(void (**)(SafariShared::ReaderAvailabilityController *, id, _QWORD, _QWORD))(*(_QWORD *)this + 120))(this, v3, 0, 0);
    SafariShared::ReaderAvailabilityController::clearArticleFinderIfPossible((uint64_t)this);

  }
  else
  {
    (*(void (**)(SafariShared::ReaderAvailabilityController *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)this
                                                                                                 + 120))(this, 0, 0, 0);
  }
}

void sub_1A3EB0720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::ReaderAvailabilityController::pageMetadataAndTextExtractionIsPending(id *this)
{
  return objc_msgSend(this[6], "isValid");
}

uint64_t SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler::AvailabilityDetectionScheduler(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(_BYTE *)a1 = 0;
  std::vector<double>::vector((_QWORD *)(a1 + 8), a6);
  *(_QWORD *)(a1 + 32) = a2;
  *(_DWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 44) = a3;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = a4;
  *(_QWORD *)(a1 + 80) = a5;
  return a1;
}

{
  *(_BYTE *)a1 = 0;
  std::vector<double>::vector((_QWORD *)(a1 + 8), a6);
  *(_QWORD *)(a1 + 32) = a2;
  *(_DWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 44) = a3;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = a4;
  *(_QWORD *)(a1 + 80) = a5;
  return a1;
}

uint64_t SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler::loadEvent(SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler *this)
{
  return *((unsigned int *)this + 10);
}

void SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler::detectionTimerFired(SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler *this, id *a2, void *a3)
{
  SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler::detectAvailabilityNow(a2);
}

void SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler::detectAvailabilityNow(id *this)
{
  _BYTE *v2;
  void (*v3)(_QWORD *);
  uint64_t v4;
  _QWORD *v5;

  SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler::invalidateDetectionTimer(this);
  v2 = this[4];
  if (v2[26])
  {
    v3 = (void (*)(_QWORD *))this[9];
    v4 = (uint64_t)this[10];
    v5 = &v2[v4 >> 1];
    if ((v4 & 1) != 0)
      v3 = *(void (**)(_QWORD *))(*v5 + v3);
    v3(v5);
  }
}

BOOL SafariShared::ReaderAvailabilityController::readerHasBeenActivatedRecently(SafariShared::ReaderAvailabilityController *this, NSDate *a2)
{
  SafariShared::ReaderAvailabilityController *v2;
  SafariShared::ReaderAvailabilityController *v3;
  double v4;
  _BOOL8 v5;

  v2 = this;
  v3 = v2;
  if (v2)
  {
    -[SafariShared::ReaderAvailabilityController timeIntervalSinceNow](v2, "timeIntervalSinceNow");
    v5 = v4 <= 604800.0;
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

void sub_1A3EB08B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void SafariShared::ReaderAvailabilityController::updateReaderOrTranslationLastActivated(SafariShared::ReaderAvailabilityController *this, WKProcessPool *a2)
{
  void *v2;
  void *v3;
  SafariShared::ReaderAvailabilityController *v4;

  v4 = this;
  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99EA0], "safari_browserDefaults");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "safari_setDate:forKey:", v2, CFSTR("ReaderOrTranslationLastActivated"));

  -[SafariShared::ReaderAvailabilityController _setObject:forBundleParameter:](v4, "_setObject:forBundleParameter:", v2, CFSTR("ReaderOrTranslationLastActivated"));
}

void sub_1A3EB0954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

char *std::vector<double>::__vallocate[abi:sn180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    abort();
  result = (char *)std::__allocate_at_least[abi:sn180100]<std::allocator<WBSHistoryServiceURLCompletionMatchEntry * {__strong}>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

_QWORD *std::vector<double>::vector(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  int64_t v5;
  char *v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(const void **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v5 = v3 - *(_QWORD *)a2;
  if (v3 != *(_QWORD *)a2)
  {
    std::vector<double>::__vallocate[abi:sn180100](a1, v5 >> 3);
    v6 = (char *)a1[1];
    memmove(v6, v4, v5);
    a1[1] = &v6[v5];
  }
  return a1;
}

void std::default_delete<SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler>::operator()[abi:sn180100](uint64_t a1, uint64_t a2)
{
  void *v3;

  if (a2)
  {

    v3 = *(void **)(a2 + 8);
    if (v3)
    {
      *(_QWORD *)(a2 + 16) = v3;
      operator delete(v3);
    }
    JUMPOUT(0x1A85998ACLL);
  }
}

uint64_t WBSThemeForNSString(NSString *a1)
{
  NSString *v1;
  uint64_t v2;

  v1 = a1;
  if (-[NSString length](v1, "length"))
  {
    if (-[NSString isEqualToString:](v1, "isEqualToString:", CFSTR("White")))
    {
      v2 = 0;
    }
    else if (-[NSString isEqualToString:](v1, "isEqualToString:", CFSTR("Sepia")))
    {
      v2 = 1;
    }
    else if (-[NSString isEqualToString:](v1, "isEqualToString:", CFSTR("Gray")))
    {
      v2 = 2;
    }
    else if (-[NSString isEqualToString:](v1, "isEqualToString:", CFSTR("Night")))
    {
      v2 = 3;
    }
    else
    {
      v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }

  return v2;
}

void sub_1A3EB0B20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3EB0CA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3EB0EB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3EB0F7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3EB107C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3EB1108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3EB1174(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3EB11E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A3EB1290(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3EB13E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3EB1484(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3EB1554(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3EB1748(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3EB1874(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1A3EB1924(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3EB1A60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3EB1AD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3EB1C70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1A3EB1F28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3EB2014(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3EB2168(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v1;

  _Unwind_Resume(a1);
}

void sub_1A3EB228C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1A3EB23A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1A3EB2458(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3EB24D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3EB261C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3EB26BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::ReaderJSController::evaluateLocalizedStringsScript(SafariShared::ReaderJSController *this, const OpaqueJSContext *a2)
{
  void *v3;
  __CFString *v4;
  id v5;
  NSObject *v6;
  void *v7;
  id v8;
  JSStringRef script[4];

  script[3] = *(JSStringRef *)MEMORY[0x1E0C80C00];
  +[WBSReaderResources localizedStringsScriptURL](WBSReaderResources, "localizedStringsScriptURL");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = 0;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithContentsOfURL:usedEncoding:error:", v3, 0, &v8);
  v4 = (__CFString *)objc_claimAutoreleasedReturnValue();
  v5 = v8;
  if (v4)
  {
    SafariShared::JSUtilities::jsString(v4, script);
    JSEvaluateScript(a2, script[0], 0, 0, 0, 0);
    if (script[0])
      JSStringRelease(script[0]);
  }
  else
  {
    v6 = (id)WBS_LOG_CHANNEL_PREFIXReader();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      objc_msgSend(v5, "safari_privacyPreservingDescription");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      SafariShared::ReaderJSController::evaluateLocalizedStringsScript(v7, (uint8_t *)script, v6);
    }

  }
}

void sub_1A3EB282C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, JSStringRef string)
{
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  v15 = v14;

  _Unwind_Resume(a1);
}

uint64_t SafariShared::ReaderJSController::evaluateSharedUINormalWorldScript(SafariShared::ReaderJSController *this, const OpaqueJSContext *a2)
{
  +[WBSReaderResources sharedUINormalWorldScriptForContext:](WBSReaderResources, "sharedUINormalWorldScriptForContext:", a2);
  return JSScriptEvaluate();
}

JSValueRef SafariShared::ReaderJSController::activateWithAnimation(SafariShared::ReaderJSController *this, BOOL a2)
{
  const OpaqueJSContext *v2;
  const OpaqueJSContext *GlobalObject;
  char v5[8];

  v2 = (const OpaqueJSContext *)*((_QWORD *)this + 5);
  *(_QWORD *)v5 = JSValueMakeBoolean(v2, a2);
  GlobalObject = JSContextGetGlobalObject(v2);
  return SafariShared::JSUtilities::callJSMethodWithArguments(v2, GlobalObject, (OpaqueJSValue *)"activateWithAnimation", v5, (const OpaqueJSValue *const *)1);
}

JSValueRef SafariShared::ReaderJSController::readerWillEnterBackground(SafariShared::ReaderJSController *this)
{
  const OpaqueJSContext *v1;
  const OpaqueJSContext *GlobalObject;

  v1 = (const OpaqueJSContext *)*((_QWORD *)this + 5);
  GlobalObject = JSContextGetGlobalObject(v1);
  return SafariShared::JSUtilities::callJSMethodWithArguments(v1, GlobalObject, (OpaqueJSValue *)"readerWillEnterBackground", 0, 0);
}

JSValueRef SafariShared::ReaderJSController::loadArticle(SafariShared::JSUtilities **this)
{
  return SafariShared::JSUtilities::callJSMethodWithArguments(this[5], this[3], (OpaqueJSValue *)"loadArticle", 0, 0);
}

JSValueRef SafariShared::ReaderJSController::loadNewArticle(SafariShared::JSUtilities **this)
{
  return SafariShared::JSUtilities::callJSMethodWithArguments(this[5], this[3], (OpaqueJSValue *)"loadNewArticle", 0, 0);
}

JSValueRef SafariShared::ReaderJSController::reloadArticle(SafariShared::JSUtilities **this)
{
  return SafariShared::JSUtilities::callJSMethodWithArguments(this[5], this[3], (OpaqueJSValue *)"reloadArticlePreservingScrollPosition", 0, 0);
}

void SafariShared::ReaderJSController::setConfiguration(SafariShared::ReaderJSController *this, NSDictionary *a2)
{
  NSDictionary *v3;
  SafariShared::JSUtilities *v4;
  objc_object *v5;
  const OpaqueJSContext *GlobalObject;
  _QWORD v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (SafariShared::JSUtilities *)*((_QWORD *)this + 5);
  v7[0] = SafariShared::JSUtilities::translateNSToJSValue(v4, (const OpaqueJSContext *)v3, v5);
  GlobalObject = JSContextGetGlobalObject(v4);
  SafariShared::JSUtilities::callJSMethodWithArguments(v4, GlobalObject, (OpaqueJSValue *)"setConfiguration", (const char *)v7, (const OpaqueJSValue *const *)1);

}

void sub_1A3EB2A3C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

JSValueRef SafariShared::ReaderJSController::setReaderIsActive(SafariShared::ReaderJSController *this, BOOL a2)
{
  const OpaqueJSContext *v2;
  const OpaqueJSContext *GlobalObject;
  _QWORD v5[2];

  v5[1] = *MEMORY[0x1E0C80C00];
  v2 = (const OpaqueJSContext *)*((_QWORD *)this + 5);
  v5[0] = JSValueMakeBoolean(v2, a2);
  GlobalObject = JSContextGetGlobalObject(v2);
  return SafariShared::JSUtilities::callJSMethodWithArguments(v2, GlobalObject, (OpaqueJSValue *)"setReaderIsActive", (const char *)v5, (const OpaqueJSValue *const *)1);
}

void SafariShared::ReaderJSController::setArticleLocale(SafariShared::ReaderJSController *this, NSString *a2)
{
  NSString *v3;
  SafariShared::JSUtilities *v4;
  objc_object *v5;
  const OpaqueJSContext *GlobalObject;
  _QWORD v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (SafariShared::JSUtilities *)*((_QWORD *)this + 5);
  v7[0] = SafariShared::JSUtilities::translateNSToJSValue(v4, (const OpaqueJSContext *)v3, v5);
  GlobalObject = JSContextGetGlobalObject(v4);
  SafariShared::JSUtilities::callJSMethodWithArguments(v4, GlobalObject, (OpaqueJSValue *)"setArticleLocale", (const char *)v7, (const OpaqueJSValue *const *)1);

}

void sub_1A3EB2B68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void SafariShared::ReaderJSController::setArticleSummary(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  const OpaqueJSContext *v15;
  const OpaqueJSContext *v16;
  const OpaqueJSContext *v17;
  const OpaqueJSContext *v18;
  const OpaqueJSContext *v19;
  const OpaqueJSContext *v20;
  const OpaqueJSContext *v21;
  SafariShared::JSUtilities *v22;
  objc_object *v23;
  objc_object *v24;
  objc_object *v25;
  objc_object *v26;
  objc_object *v27;
  objc_object *v28;
  objc_object *v29;
  const OpaqueJSContext *GlobalObject;
  _QWORD v31[8];

  v31[7] = *MEMORY[0x1E0C80C00];
  v15 = a2;
  v16 = a3;
  v17 = a4;
  v18 = a5;
  v19 = a6;
  v20 = a7;
  v21 = a8;
  v22 = *(SafariShared::JSUtilities **)(a1 + 40);
  v31[0] = SafariShared::JSUtilities::translateNSToJSValue(v22, v15, v23);
  v31[1] = SafariShared::JSUtilities::translateNSToJSValue(v22, v16, v24);
  v31[2] = SafariShared::JSUtilities::translateNSToJSValue(v22, v17, v25);
  v31[3] = SafariShared::JSUtilities::translateNSToJSValue(v22, v18, v26);
  v31[4] = SafariShared::JSUtilities::translateNSToJSValue(v22, v19, v27);
  v31[5] = SafariShared::JSUtilities::translateNSToJSValue(v22, v20, v28);
  v31[6] = SafariShared::JSUtilities::translateNSToJSValue(v22, v21, v29);
  GlobalObject = JSContextGetGlobalObject(v22);
  SafariShared::JSUtilities::callJSMethodWithArguments(v22, GlobalObject, (OpaqueJSValue *)"setArticleSummary", (const char *)v31, (const OpaqueJSValue *const *)7);

}

void sub_1A3EB2CEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void SafariShared::ReaderJSController::setOnDeviceSummaryButtonWithTitle(SafariShared::ReaderJSController *this, NSString *a2)
{
  NSString *v3;
  SafariShared::JSUtilities *v4;
  objc_object *v5;
  const OpaqueJSContext *GlobalObject;
  _QWORD v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (SafariShared::JSUtilities *)*((_QWORD *)this + 5);
  v7[0] = SafariShared::JSUtilities::translateNSToJSValue(v4, (const OpaqueJSContext *)v3, v5);
  GlobalObject = JSContextGetGlobalObject(v4);
  SafariShared::JSUtilities::callJSMethodWithArguments(v4, GlobalObject, (OpaqueJSValue *)"setOnDeviceSummaryButtonWithTitle", (const char *)v7, (const OpaqueJSValue *const *)1);

}

void sub_1A3EB2DB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void SafariShared::ReaderJSController::updateSummaryTextAddingSummarizedChunk(SafariShared::ReaderJSController *this, NSString *a2)
{
  NSString *v3;
  SafariShared::JSUtilities *v4;
  objc_object *v5;
  const OpaqueJSContext *GlobalObject;
  _QWORD v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (SafariShared::JSUtilities *)*((_QWORD *)this + 5);
  v7[0] = SafariShared::JSUtilities::translateNSToJSValue(v4, (const OpaqueJSContext *)v3, v5);
  GlobalObject = JSContextGetGlobalObject(v4);
  SafariShared::JSUtilities::callJSMethodWithArguments(v4, GlobalObject, (OpaqueJSValue *)"updateSummaryTextAddingSummarizedChunk", (const char *)v7, (const OpaqueJSValue *const *)1);

}

void sub_1A3EB2E5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

JSValueRef SafariShared::ReaderJSController::nextPageArticleFinder(SafariShared::ReaderJSController *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 6);
  if (v1)
    return *(JSValueRef *)(v1 + 24);
  else
    return JSValueMakeUndefined(*((JSContextRef *)this + 5));
}

uint64_t SafariShared::ReaderJSController::clearNextPageArticleFinder(SafariShared::ReaderJSController *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

JSValueRef SafariShared::ReaderJSController::stopLoadingNextPage(SafariShared::JSUtilities **this)
{
  return SafariShared::JSUtilities::callJSMethodWithArguments(this[5], this[3], (OpaqueJSValue *)"stopLoadingNextPage", 0, 0);
}

const OpaqueJSValue *SafariShared::ReaderJSController::getArticleScrollPositionAsDictionary(SafariShared::ReaderJSController *this)
{
  const OpaqueJSContext *v1;
  const OpaqueJSContext *GlobalObject;
  const OpaqueJSValue *v3;
  const OpaqueJSValue *v4;

  v1 = (const OpaqueJSContext *)*((_QWORD *)this + 5);
  GlobalObject = JSContextGetGlobalObject(v1);
  v3 = SafariShared::JSUtilities::callJSMethodWithArguments(v1, GlobalObject, (OpaqueJSValue *)"getArticleScrollPosition", 0, 0);
  if (v3)
  {
    v3 = JSValueToObject(v1, v3, 0);
    if (v3)
    {
      SafariShared::JSUtilities::translateJSValueToNS(v1, v3, v4);
      v3 = (const OpaqueJSValue *)objc_claimAutoreleasedReturnValue();
    }
  }
  return v3;
}

uint64_t SafariShared::ReaderJSController::cachedTopScrollOffset(SafariShared::ReaderJSController *this)
{
  return 0;
}

uint64_t SafariShared::ReaderJSController::maxDistanceForLoadingNextPage(SafariShared::ReaderJSController *this)
{
  return 0x7FFFFFFFLL;
}

__CFString *SafariShared::ReaderJSController::printingMailingFrameElementId(SafariShared::ReaderJSController *this)
{
  SafariShared::JSUtilities *v1;
  const OpaqueJSValue *v2;

  v1 = (SafariShared::JSUtilities *)*((_QWORD *)this + 5);
  v2 = SafariShared::JSUtilities::callJSMethodWithArguments(v1, *((const OpaqueJSContext **)this + 3), (OpaqueJSValue *)"printingMailingFrameElementId", 0, 0);
  return SafariShared::JSUtilities::toNSString(v1, v2, 0);
}

JSValueRef SafariShared::ReaderJSController::preparePrintingMailingFrame(SafariShared::JSUtilities **this)
{
  return SafariShared::JSUtilities::callJSMethodWithArguments(this[5], this[3], (OpaqueJSValue *)"preparePrintingMailingFrame", 0, 0);
}

const char *SafariShared::ReaderJSController::scriptObjectName(SafariShared::ReaderJSController *this)
{
  return "ReaderJS";
}

char **SafariShared::ReaderJSController::staticFunctions(SafariShared::ReaderJSController *this)
{
  return &SafariShared::ReaderJSController::staticFunctions(void)::staticFunctions;
}

JSValueRef SafariShared::jsArticleScrolled(SafariShared *this, const OpaqueJSContext *a2, JSObjectRef object, OpaqueJSValue *a4, unint64_t a5, const OpaqueJSValue *const *a6, const OpaqueJSValue **a7)
{
  void *v8;

  v8 = SafariShared::JSController::jsController(object);
  if (v8)
    (*(void (**)(void *))(*(_QWORD *)v8 + 160))(v8);
  return JSValueMakeUndefined(this);
}

JSValueRef SafariShared::jsClearNextPageArticleFinder(SafariShared *this, const OpaqueJSContext *a2, JSObjectRef object, OpaqueJSValue *a4, unint64_t a5, const OpaqueJSValue *const *a6, const OpaqueJSValue **a7)
{
  _QWORD *v9;
  uint64_t v10;

  v9 = SafariShared::JSController::jsController(object);
  if (!a4)
  {
    if (v9)
    {
      v10 = v9[6];
      v9[6] = 0;
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    }
  }
  return JSValueMakeUndefined(this);
}

JSValueRef SafariShared::jsRequestDeactivationFromUserAction(SafariShared *this, const OpaqueJSContext *a2, JSObjectRef object, OpaqueJSValue *a4, unint64_t a5, const OpaqueJSValue *const *a6, const OpaqueJSValue **a7)
{
  void *v9;

  v9 = SafariShared::JSController::jsController(object);
  if (!a4 && v9)
    (*(void (**)(void *))(*(_QWORD *)v9 + 48))(v9);
  return JSValueMakeUndefined(this);
}

JSValueRef SafariShared::jsDidChangeNextPageLoadingState(SafariShared *this, const OpaqueJSContext *a2, JSObjectRef object, OpaqueJSValue *a4, JSValueRef *a5, const OpaqueJSValue *const *a6, const OpaqueJSValue **a7)
{
  void *v10;
  void *v11;
  _BOOL8 v12;

  v10 = SafariShared::JSController::jsController(object);
  if (a4 == (OpaqueJSValue *)1)
  {
    v11 = v10;
    if (v10)
    {
      v12 = JSValueToBoolean(this, *a5);
      (*(void (**)(void *, _BOOL8))(*(_QWORD *)v11 + 56))(v11, v12);
    }
  }
  return JSValueMakeUndefined(this);
}

JSValueRef SafariShared::jsContentIsReadyForDisplay(SafariShared *this, const OpaqueJSContext *a2, JSObjectRef object, OpaqueJSValue *a4, JSValueRef *a5, const OpaqueJSValue *const *a6, const OpaqueJSValue **a7)
{
  void *v10;
  void *v11;
  void *v12;
  JSValueRef Undefined;

  v10 = SafariShared::JSController::jsController(object);
  if (a4 != (OpaqueJSValue *)1)
    return JSValueMakeUndefined(this);
  v11 = v10;
  if (!v10)
    return JSValueMakeUndefined(this);
  (*(void (**)(void *, _QWORD))(*(_QWORD *)v10 + 184))(v10, 0);
  SafariShared::JSUtilities::toNSString(this, *a5, 0);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(void *, void *))(*(_QWORD *)v11 + 152))(v11, v12);
  Undefined = JSValueMakeUndefined(this);

  return Undefined;
}

void sub_1A3EB319C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

JSValueRef SafariShared::jsDoneLoadingReaderPage(SafariShared *this, const OpaqueJSContext *a2, JSObjectRef object, OpaqueJSValue *a4, unint64_t a5, const OpaqueJSValue *const *a6, const OpaqueJSValue **a7)
{
  void *v8;
  void *v9;

  v8 = SafariShared::JSController::jsController(object);
  if (v8)
  {
    v9 = v8;
    (*(void (**)(void *, uint64_t))(*(_QWORD *)v8 + 184))(v8, 1);
    (*(void (**)(void *))(*(_QWORD *)v9 + 64))(v9);
  }
  return JSValueMakeUndefined(this);
}

JSValueRef SafariShared::jsGoBack(SafariShared *this, const OpaqueJSContext *a2, JSObjectRef object, OpaqueJSValue *a4, unint64_t a5, const OpaqueJSValue *const *a6, const OpaqueJSValue **a7)
{
  void *v9;

  v9 = SafariShared::JSController::jsController(object);
  if (!a4 && v9)
    (*(void (**)(void *))(*(_QWORD *)v9 + 72))(v9);
  return JSValueMakeUndefined(this);
}

JSValueRef SafariShared::jsGoForward(SafariShared *this, const OpaqueJSContext *a2, JSObjectRef object, OpaqueJSValue *a4, unint64_t a5, const OpaqueJSValue *const *a6, const OpaqueJSValue **a7)
{
  void *v9;

  v9 = SafariShared::JSController::jsController(object);
  if (!a4 && v9)
    (*(void (**)(void *))(*(_QWORD *)v9 + 80))(v9);
  return JSValueMakeUndefined(this);
}

JSValueRef SafariShared::jsInitialArticleScrollPosition(SafariShared *this, const OpaqueJSContext *a2, JSObjectRef object, OpaqueJSValue *a4, unint64_t a5, const OpaqueJSValue *const *a6, const OpaqueJSValue **a7)
{
  void *v9;
  const OpaqueJSContext *v10;
  objc_object *v11;
  JSValueRef Undefined;
  JSValueRef v14;

  v9 = SafariShared::JSController::jsController(object);
  if (a4 || !v9)
    return JSValueMakeUndefined(this);
  (*(void (**)(void *))(*(_QWORD *)v9 + 168))(v9);
  v10 = (const OpaqueJSContext *)objc_claimAutoreleasedReturnValue();
  if (-[OpaqueJSContext count](v10, "count"))
    Undefined = (JSValueRef)SafariShared::JSUtilities::translateNSToJSValue(this, v10, v11);
  else
    Undefined = JSValueMakeUndefined(this);
  v14 = Undefined;

  return v14;
}

void sub_1A3EB32FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

JSValueRef SafariShared::jsInitialConfiguration(SafariShared *this, const OpaqueJSContext *a2, JSObjectRef object, OpaqueJSValue *a4, unint64_t a5, const OpaqueJSValue *const *a6, const OpaqueJSValue **a7)
{
  void *v9;
  const OpaqueJSContext *v10;
  objc_object *v11;
  uint64_t v12;

  v9 = SafariShared::JSController::jsController(object);
  if (a4 || !v9)
    return JSValueMakeUndefined(this);
  (*(void (**)(void *))(*(_QWORD *)v9 + 88))(v9);
  v10 = (const OpaqueJSContext *)objc_claimAutoreleasedReturnValue();
  v12 = SafariShared::JSUtilities::translateNSToJSValue(this, v10, v11);

  return (JSValueRef)v12;
}

void sub_1A3EB3378(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

JSValueRef SafariShared::jsMakeFontAvailableIfNecessary(SafariShared *this, const OpaqueJSContext *a2, JSObjectRef object, OpaqueJSValue *a4, const OpaqueJSContext **a5, const OpaqueJSValue *const *a6, const OpaqueJSValue **a7)
{
  void *v10;
  const OpaqueJSValue *v11;
  void *v12;
  void *v13;
  JSValueRef Undefined;

  v10 = SafariShared::JSController::jsController(object);
  if (a4 != (OpaqueJSValue *)1)
    return JSValueMakeUndefined(this);
  v12 = v10;
  if (!v10)
    return JSValueMakeUndefined(this);
  SafariShared::JSUtilities::translateJSValueToNS(this, *a5, v11);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    (*(void (**)(void *, void *))(*(_QWORD *)v12 + 96))(v12, v13);
  Undefined = JSValueMakeUndefined(this);

  return Undefined;
}

void sub_1A3EB3438(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

JSValueRef SafariShared::jsIsInStickyMode(SafariShared *this, const OpaqueJSContext *a2, JSObjectRef object, OpaqueJSValue *a4, unint64_t a5, const OpaqueJSValue *const *a6, const OpaqueJSValue **a7)
{
  void *v9;
  char v10;

  v9 = SafariShared::JSController::jsController(object);
  if (a4 || !v9)
    return JSValueMakeUndefined(this);
  v10 = (*(uint64_t (**)(void *))(*(_QWORD *)v9 + 104))(v9);
  return JSValueMakeBoolean(this, v10);
}

JSValueRef SafariShared::jsNextPageArticleFinder(SafariShared *this, const OpaqueJSContext *a2, JSObjectRef object, OpaqueJSValue *a4, unint64_t a5, const OpaqueJSValue *const *a6, const OpaqueJSValue **a7)
{
  void *v9;
  uint64_t v10;
  const OpaqueJSContext *v12;

  v9 = SafariShared::JSController::jsController(object);
  if (a4 || !v9)
  {
    v12 = this;
  }
  else
  {
    v10 = *((_QWORD *)v9 + 6);
    if (v10)
      return *(JSValueRef *)(v10 + 24);
    v12 = (const OpaqueJSContext *)*((_QWORD *)v9 + 5);
  }
  return JSValueMakeUndefined(v12);
}

JSValueRef SafariShared::jsNextPageLoadComplete(SafariShared *this, const OpaqueJSContext *a2, JSObjectRef object, OpaqueJSValue *a4, JSValueRef *a5, const OpaqueJSValue *const *a6, const OpaqueJSValue **a7)
{
  void *v10;
  void *v11;
  double v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  JSValueRef Undefined;

  v10 = SafariShared::JSController::jsController(object);
  if (a4 != (OpaqueJSValue *)3)
    return JSValueMakeUndefined(this);
  v11 = v10;
  if (!v10)
    return JSValueMakeUndefined(this);
  v12 = JSValueToNumber(this, *a5, 0);
  v13 = (void *)MEMORY[0x1E0C99E98];
  SafariShared::JSUtilities::toNSString(this, a5[1], 0);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "_web_URLWithDataAsString:", v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  SafariShared::JSUtilities::toNSString(this, a5[2], 0);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(void *, unint64_t, void *, void *))(*(_QWORD *)v11 + 112))(v11, (unint64_t)v12, v15, v16);
  Undefined = JSValueMakeUndefined(this);

  return Undefined;
}

void sub_1A3EB35F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

JSValueRef SafariShared::jsOriginalArticleFinder(SafariShared *this, const OpaqueJSContext *a2, JSObjectRef object, OpaqueJSValue *a4, unint64_t a5, const OpaqueJSValue *const *a6, const OpaqueJSValue **a7)
{
  void *v9;
  JSValueRef result;

  v9 = SafariShared::JSController::jsController(object);
  if (a4)
    return JSValueMakeUndefined(this);
  if (!v9)
    return JSValueMakeUndefined(this);
  result = (JSValueRef)(*(uint64_t (**)(void *))(*(_QWORD *)v9 + 120))(v9);
  if (!result)
    return JSValueMakeUndefined(this);
  return result;
}

JSValueRef SafariShared::jsPrepareNextPageFrame(SafariShared *this, const OpaqueJSContext *a2, JSObjectRef object, OpaqueJSValue *a4, JSValueRef *a5, const OpaqueJSValue *const *a6, const OpaqueJSValue **a7)
{
  void *v10;
  void *v11;
  void *v12;
  JSValueRef Undefined;

  v10 = SafariShared::JSController::jsController(object);
  if (a4 != (OpaqueJSValue *)1)
    return JSValueMakeUndefined(this);
  v11 = v10;
  if (!v10)
    return JSValueMakeUndefined(this);
  SafariShared::JSUtilities::toNSString(this, *a5, 0);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(void *, void *))(*(_QWORD *)v11 + 128))(v11, v12);
  Undefined = JSValueMakeUndefined(this);

  return Undefined;
}

void sub_1A3EB3708(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

JSValueRef SafariShared::jsReaderOperationMode(SafariShared *this, const OpaqueJSContext *a2, JSObjectRef object, OpaqueJSValue *a4, unint64_t a5, const OpaqueJSValue *const *a6, const OpaqueJSValue **a7)
{
  void *v9;
  double v10;

  v9 = SafariShared::JSController::jsController(object);
  if (a4 || !v9)
    return JSValueMakeUndefined(this);
  v10 = (double)(*(int (**)(void *))(*(_QWORD *)v9 + 136))(v9);
  return JSValueMakeNumber(this, v10);
}

JSValueRef SafariShared::jsCachedTopScrollOffset(SafariShared *this, const OpaqueJSContext *a2, JSObjectRef object, OpaqueJSValue *a4, unint64_t a5, const OpaqueJSValue *const *a6, const OpaqueJSValue **a7)
{
  void *v9;
  double v10;

  v9 = SafariShared::JSController::jsController(object);
  if (a4 || !v9)
    return JSValueMakeUndefined(this);
  v10 = (double)(*(int (**)(void *))(*(_QWORD *)v9 + 192))(v9);
  return JSValueMakeNumber(this, v10);
}

JSValueRef SafariShared::jsMaxDistanceForLoadingNextPage(SafariShared *this, const OpaqueJSContext *a2, JSObjectRef object, OpaqueJSValue *a4, unint64_t a5, const OpaqueJSValue *const *a6, const OpaqueJSValue **a7)
{
  void *v9;
  double v10;

  v9 = SafariShared::JSController::jsController(object);
  if (a4 || !v9)
    return JSValueMakeUndefined(this);
  v10 = (double)(*(int (**)(void *))(*(_QWORD *)v9 + 200))(v9);
  return JSValueMakeNumber(this, v10);
}

JSValueRef SafariShared::jsReplaceSimpleTweetsWithRichTweets(SafariShared *this, const OpaqueJSContext *a2, JSObjectRef object, OpaqueJSValue *a4, const OpaqueJSContext **a5, const OpaqueJSValue *const *a6, const OpaqueJSValue **a7)
{
  void *v10;
  const OpaqueJSValue *v11;
  void *v12;
  void *v13;
  JSValueRef Undefined;

  v10 = SafariShared::JSController::jsController(object);
  if (a4 != (OpaqueJSValue *)1)
    return JSValueMakeUndefined(this);
  v12 = v10;
  if (!v10)
    return JSValueMakeUndefined(this);
  SafariShared::JSUtilities::translateJSValueToNS(this, *a5, v11);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(void *, void *))(*(_QWORD *)v12 + 176))(v12, v13);
  Undefined = JSValueMakeUndefined(this);

  return Undefined;
}

void sub_1A3EB38A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

JSValueRef SafariShared::jsRequestOnDeviceSummary(SafariShared *this, const OpaqueJSContext *a2, JSObjectRef object, OpaqueJSValue *a4, unint64_t a5, const OpaqueJSValue *const *a6, const OpaqueJSValue **a7)
{
  void *v9;

  v9 = SafariShared::JSController::jsController(object);
  if (!a4 && v9)
    (*(void (**)(void *))(*(_QWORD *)v9 + 216))(v9);
  return JSValueMakeUndefined(this);
}

JSValueRef SafariShared::jsDidSetSummary(SafariShared *this, const OpaqueJSContext *a2, JSObjectRef object, OpaqueJSValue *a4, unint64_t a5, const OpaqueJSValue *const *a6, const OpaqueJSValue **a7)
{
  void *v9;

  v9 = SafariShared::JSController::jsController(object);
  if (!a4 && v9)
    (*(void (**)(void *))(*(_QWORD *)v9 + 224))(v9);
  return JSValueMakeUndefined(this);
}

JSValueRef SafariShared::jsLog(SafariShared *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, const OpaqueJSContext **a5, const OpaqueJSValue *const *a6, const OpaqueJSValue **a7)
{
  NSObject *v9;
  const OpaqueJSValue *v10;
  void *v11;
  uint8_t v13[24];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v9 = (id)WBS_LOG_CHANNEL_PREFIXReader();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    SafariShared::JSUtilities::translateJSValueToNS(this, *a5, v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    SafariShared::jsLog(v11, v13, v9);
  }

  return JSValueMakeUndefined(this);
}

void sub_1A3EB39D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

JSValueRef SafariShared::jsSetArticleBaseURLString(SafariShared *this, const OpaqueJSContext *a2, JSObjectRef object, OpaqueJSValue *a4, const OpaqueJSContext **a5, const OpaqueJSValue *const *a6, const OpaqueJSValue **a7)
{
  void *v10;
  const OpaqueJSValue *v11;
  void *v12;
  void *v13;
  void *v14;
  JSValueRef Undefined;

  v10 = SafariShared::JSController::jsController(object);
  if (a4 != (OpaqueJSValue *)1)
    return JSValueMakeUndefined(this);
  v12 = v10;
  if (!v10)
    return JSValueMakeUndefined(this);
  SafariShared::JSUtilities::translateJSValueToNS(this, *a5, v11);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(void *, void *))(*(_QWORD *)v12 + 208))(v12, v14);
  Undefined = JSValueMakeUndefined(this);

  return Undefined;
}

void sub_1A3EB3A9C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

JSClassRef SafariShared::ReaderJSController::staticJSClass(SafariShared::ReaderJSController *this)
{
  JSClassRef result;

    return (JSClassRef)SafariShared::ReaderJSController::staticJSClass(void)::jsClass;
  result = SafariShared::JSController::createJSClass(this);
  SafariShared::ReaderJSController::staticJSClass(void)::jsClass = (uint64_t)result;
  return result;
}

id SafariShared::ReaderJSController::fullArticleHTML(SafariShared::ReaderJSController *this)
{
  const OpaqueJSContext *v2;
  const OpaqueJSValue *v3;
  void *v4;
  JSStringRef script;

  v2 = (const OpaqueJSContext *)*((_QWORD *)this + 5);
  SafariShared::JSUtilities::jsString((SafariShared::JSUtilities *)"ReaderJS.sanitizedFullArticle().outerHTML", &script);
  v3 = JSEvaluateScript(v2, script, *((JSObjectRef *)this + 3), 0, 0, 0);
  if (script)
    JSStringRelease(script);
  if (v3 && JSValueIsString(v2, v3))
  {
    SafariShared::JSUtilities::toNSString(v2, v3, 0);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v4 = 0;
  }
  return v4;
}

void sub_1A3EB3B98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, JSStringRef string)
{
  if (string)
    JSStringRelease(string);
  _Unwind_Resume(exception_object);
}

void sub_1A3EB4208(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id cherokeeFonts(void)
{
  void *v0;
  void *v1;
  _QWORD v3[2];

  v3[1] = *MEMORY[0x1E0C80C00];
  +[WBSReaderFont fontWithFamilyName:displayName:](WBSReaderFont, "fontWithFamilyName:displayName:", CFSTR("Plantagenet Cherokee"), CFSTR("Plantagenet ᏣᎳᎩ"));
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v3[0] = v0;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v3, 1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

void sub_1A3EB4348(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id gujaratiFonts(void)
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  _QWORD v6[5];

  v6[4] = *MEMORY[0x1E0C80C00];
  +[WBSReaderFont fontWithFamilyName:displayName:](WBSReaderFont, "fontWithFamilyName:displayName:", CFSTR("Kohinoor Gujarati"), CFSTR("કોહિનૂર ગુજરાતી"));
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v6[0] = v0;
  +[WBSReaderFont fontWithFamilyName:displayName:](WBSReaderFont, "fontWithFamilyName:displayName:", CFSTR("Mukta Vaani"), CFSTR("મુક્ત વાણી"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v6[1] = v1;
  +[WBSReaderFont fontWithFamilyName:displayName:](WBSReaderFont, "fontWithFamilyName:displayName:", CFSTR("Gujarati Sangam MN"), CFSTR("ગુજરાતી સંગમ MN"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v6[2] = v2;
  +[WBSReaderFont fontWithFamilyName:displayName:](WBSReaderFont, "fontWithFamilyName:displayName:", CFSTR("Gujarati MT"), CFSTR("ગુજરાતી MT"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v6[3] = v3;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v6, 4);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

void sub_1A3EB4480(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

id punjabiFonts(void)
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  _QWORD v8[7];

  v8[6] = *MEMORY[0x1E0C80C00];
  +[WBSReaderFont fontWithFamilyName:displayName:](WBSReaderFont, "fontWithFamilyName:displayName:", CFSTR("Mukta Mahee"), CFSTR("ਮੁਕਤਾ ਮਾਹੀ"));
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v8[0] = v0;
  +[WBSReaderFont fontWithFamilyName:displayName:](WBSReaderFont, "fontWithFamilyName:displayName:", CFSTR("Lahore Gurmukhi"), CFSTR("ਲਾਹੌਰ ਗੁਰਮੁਖੀ"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v8[1] = v1;
  +[WBSReaderFont fontWithFamilyName:displayName:](WBSReaderFont, "fontWithFamilyName:displayName:", CFSTR("Tiro Gurmukhi"), CFSTR("Tiro ਗੁਰਮੁਖੀ"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v8[2] = v2;
  +[WBSReaderFont fontWithFamilyName:displayName:](WBSReaderFont, "fontWithFamilyName:displayName:", CFSTR("Gurmukhi MN"), CFSTR("ਗੁਰਮੁਖੀ MN"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v8[3] = v3;
  +[WBSReaderFont fontWithFamilyName:displayName:](WBSReaderFont, "fontWithFamilyName:displayName:", CFSTR("Gurmukhi Sangam MN"), CFSTR("ਗੁਰਮੁਖੀ ਸੰਗਮ MN"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v8[4] = v4;
  +[WBSReaderFont fontWithFamilyName:displayName:](WBSReaderFont, "fontWithFamilyName:displayName:", CFSTR("Gurmukhi MT"), CFSTR("ਗੁਰਮੁਖੀ MT"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v8[5] = v5;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v8, 6);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

void sub_1A3EB4634(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

id hebrewFonts(void)
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  _QWORD v6[5];

  v6[4] = *MEMORY[0x1E0C80C00];
  +[WBSReaderFont fontWithFamilyName:displayName:](WBSReaderFont, "fontWithFamilyName:displayName:", CFSTR("Arial Hebrew"), CFSTR("Arial עברית"));
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v6[0] = v0;
  +[WBSReaderFont fontWithFamilyName:displayName:](WBSReaderFont, "fontWithFamilyName:displayName:", CFSTR("Raanana"), CFSTR("רעננה"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v6[1] = v1;
  +[WBSReaderFont fontWithFamilyName:displayName:](WBSReaderFont, "fontWithFamilyName:displayName:", CFSTR("Times New Roman"), 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v6[2] = v2;
  +[WBSReaderFont fontWithFamilyName:displayName:](WBSReaderFont, "fontWithFamilyName:displayName:", CFSTR("Tahoma"), 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v6[3] = v3;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v6, 4);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

void sub_1A3EB47A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

id hindiFonts(void)
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD v9[8];

  v9[7] = *MEMORY[0x1E0C80C00];
  +[WBSReaderFont fontWithFamilyName:displayName:](WBSReaderFont, "fontWithFamilyName:displayName:", CFSTR("Kohinoor Devanagari"), CFSTR("कोहिनूर देवनागरी"));
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  +[WBSReaderFont fontWithFamilyName:displayName:](WBSReaderFont, "fontWithFamilyName:displayName:", CFSTR("ITF Devanagari"), CFSTR("आई॰टी॰एफ़॰ देवनागरी"), v0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v9[1] = v1;
  +[WBSReaderFont fontWithFamilyName:displayName:](WBSReaderFont, "fontWithFamilyName:displayName:", CFSTR("Tiro Devanagari Hindi"), CFSTR("टीरो देवनागरी हिन्दी"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v9[2] = v2;
  +[WBSReaderFont fontWithFamilyName:displayName:](WBSReaderFont, "fontWithFamilyName:displayName:", CFSTR("Mukta"), CFSTR("मुक्त"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v9[3] = v3;
  +[WBSReaderFont fontWithFamilyName:displayName:](WBSReaderFont, "fontWithFamilyName:displayName:", CFSTR("Shobhika"), CFSTR("शोभिका"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v9[4] = v4;
  +[WBSReaderFont fontWithFamilyName:displayName:](WBSReaderFont, "fontWithFamilyName:displayName:", CFSTR("Cambay Devanagari"), CFSTR("खंभात"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v9[5] = v5;
  +[WBSReaderFont fontWithFamilyName:displayName:](WBSReaderFont, "fontWithFamilyName:displayName:", CFSTR("Devanagari MT"), CFSTR("देवनागरी MT"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v9[6] = v6;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v9, 7);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

void sub_1A3EB497C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

id japaneseFonts(void)
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  _QWORD v6[5];

  v6[4] = *MEMORY[0x1E0C80C00];
  +[WBSReaderFont fontWithFamilyName:displayName:](WBSReaderFont, "fontWithFamilyName:displayName:", CFSTR("Hiragino Kaku Gothic ProN"), CFSTR("ヒラギノ角ゴ"));
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v6[0] = v0;
  +[WBSReaderFont fontWithFamilyName:displayName:](WBSReaderFont, "fontWithFamilyName:displayName:", CFSTR("Hiragino Sans W3"), CFSTR("ヒラギノ角ゴシック"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v6[1] = v1;
  +[WBSReaderFont fontWithFamilyName:displayName:](WBSReaderFont, "fontWithFamilyName:displayName:", CFSTR("Hiragino Maru Gothic ProN"), CFSTR("ヒラギノ丸ゴ"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v6[2] = v2;
  +[WBSReaderFont fontWithFamilyName:displayName:](WBSReaderFont, "fontWithFamilyName:displayName:", CFSTR("Hiragino Mincho ProN"), CFSTR("ヒラギノ明朝"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v6[3] = v3;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v6, 4);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

void sub_1A3EB4AFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

id kannadaFonts(void)
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  _QWORD v7[6];

  v7[5] = *MEMORY[0x1E0C80C00];
  +[WBSReaderFont fontWithFamilyName:displayName:](WBSReaderFont, "fontWithFamilyName:displayName:", CFSTR("Noto Sans Kannada"), CFSTR("Noto Sans ಕನ್ನಡ"));
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  +[WBSReaderFont fontWithFamilyName:displayName:](WBSReaderFont, "fontWithFamilyName:displayName:", CFSTR("Noto Serif Kannada"), CFSTR("Noto Serif ಕನ್ನಡ"), v0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v7[1] = v1;
  +[WBSReaderFont fontWithFamilyName:displayName:](WBSReaderFont, "fontWithFamilyName:displayName:", CFSTR("Tiro Kannada"), CFSTR("Tiro ಕನ್ನಡ"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v7[2] = v2;
  +[WBSReaderFont fontWithFamilyName:displayName:](WBSReaderFont, "fontWithFamilyName:displayName:", CFSTR("Kannada MN"), CFSTR("ಕನ್ನಡ MN"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v7[3] = v3;
  +[WBSReaderFont fontWithFamilyName:displayName:](WBSReaderFont, "fontWithFamilyName:displayName:", CFSTR("Kannada Sangam MN"), CFSTR("ಕನ್ನಡ ಸಂಗಮ್ MN"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v7[4] = v4;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v7, 5);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

void sub_1A3EB4C80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

id khmerFonts(void)
{
  void *v0;
  void *v1;
  _QWORD v3[2];

  v3[1] = *MEMORY[0x1E0C80C00];
  +[WBSReaderFont fontWithFamilyName:displayName:](WBSReaderFont, "fontWithFamilyName:displayName:", CFSTR("Khmer Sangam MN"), CFSTR("ខ្មែរ Sangam MN"));
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v3[0] = v0;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v3, 1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

void sub_1A3EB4D60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id koreanFonts(void)
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  _QWORD v5[4];

  v5[3] = *MEMORY[0x1E0C80C00];
  +[WBSReaderFont fontWithFamilyName:displayName:](WBSReaderFont, "fontWithFamilyName:displayName:", CFSTR("Apple SD Gothic Neo"), CFSTR("산돌고딕 Neo"));
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  +[WBSReaderFont fontWithFamilyName:displayName:](WBSReaderFont, "fontWithFamilyName:displayName:", CFSTR("Nanum Gothic"), CFSTR("나눔고딕"), v0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v5[1] = v1;
  +[WBSReaderFont fontWithFamilyName:displayName:](WBSReaderFont, "fontWithFamilyName:displayName:", CFSTR("Nanum Myeongjo"), CFSTR("나눔명조"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v5[2] = v2;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v5, 3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

void sub_1A3EB4E68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id laoFonts(void)
{
  void *v0;
  void *v1;
  _QWORD v3[2];

  v3[1] = *MEMORY[0x1E0C80C00];
  +[WBSReaderFont fontWithFamilyName:displayName:](WBSReaderFont, "fontWithFamilyName:displayName:", CFSTR("Lao Sangam MN"), CFSTR("ລາວ Sangam MN"));
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v3[0] = v0;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v3, 1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

void sub_1A3EB4F30(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id malayalamFonts(void)
{
  void *v0;
  void *v1;
  void *v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x1E0C80C00];
  +[WBSReaderFont fontWithFamilyName:displayName:](WBSReaderFont, "fontWithFamilyName:displayName:", CFSTR("Malayalam Sangam MN"), CFSTR("മലയാളം സംഗമ MN"));
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v4[0] = v0;
  +[WBSReaderFont fontWithFamilyName:displayName:](WBSReaderFont, "fontWithFamilyName:displayName:", CFSTR("Malayalam MN"), CFSTR("മലയാളം MN"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v4[1] = v1;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v4, 2);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

void sub_1A3EB5010(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id oriyaFonts(void)
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  _QWORD v5[4];

  v5[3] = *MEMORY[0x1E0C80C00];
  +[WBSReaderFont fontWithFamilyName:displayName:](WBSReaderFont, "fontWithFamilyName:displayName:", CFSTR("Noto Sans Oriya"), CFSTR("Noto Sans ଓଡ଼ିଆ"));
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  +[WBSReaderFont fontWithFamilyName:displayName:](WBSReaderFont, "fontWithFamilyName:displayName:", CFSTR("Oriya Sangam MN"), CFSTR("ଓଡ଼ିଆ ସଙ୍ଗମ MN"), v0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v5[1] = v1;
  +[WBSReaderFont fontWithFamilyName:displayName:](WBSReaderFont, "fontWithFamilyName:displayName:", CFSTR("Oriya MN"), CFSTR("ଓଡ଼ିଆ MN"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v5[2] = v2;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v5, 3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

void sub_1A3EB5124(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id sinhalaFonts(void)
{
  void *v0;
  void *v1;
  void *v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x1E0C80C00];
  +[WBSReaderFont fontWithFamilyName:displayName:](WBSReaderFont, "fontWithFamilyName:displayName:", CFSTR("Sinhala Sangam MN"), CFSTR("සිංහල සංගම MN"));
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v4[0] = v0;
  +[WBSReaderFont fontWithFamilyName:displayName:](WBSReaderFont, "fontWithFamilyName:displayName:", CFSTR("Sinhala MN"), CFSTR("සිංහල MN"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v4[1] = v1;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v4, 2);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

void sub_1A3EB521C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id tamilFonts(void)
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  _QWORD v7[6];

  v7[5] = *MEMORY[0x1E0C80C00];
  +[WBSReaderFont fontWithFamilyName:displayName:](WBSReaderFont, "fontWithFamilyName:displayName:", CFSTR("Tamil Sangam MN"), CFSTR("தமிழ் சங்கம் MN"));
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  +[WBSReaderFont fontWithFamilyName:displayName:](WBSReaderFont, "fontWithFamilyName:displayName:", CFSTR("Tamil MN"), CFSTR("தமிழ் MN"), v0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v7[1] = v1;
  +[WBSReaderFont fontWithFamilyName:displayName:](WBSReaderFont, "fontWithFamilyName:displayName:", CFSTR("Tiro Tamil"), CFSTR("Tiro தமிழ்"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v7[2] = v2;
  +[WBSReaderFont fontWithFamilyName:displayName:](WBSReaderFont, "fontWithFamilyName:displayName:", CFSTR("Mukta Malar"), CFSTR("முக்த மலர்"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v7[3] = v3;
  +[WBSReaderFont fontWithFamilyName:displayName:](WBSReaderFont, "fontWithFamilyName:displayName:", CFSTR("InaiMathi"), CFSTR("இணைமதி"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v7[4] = v4;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v7, 5);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

void sub_1A3EB5388(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

id teluguFonts(void)
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  _QWORD v6[5];

  v6[4] = *MEMORY[0x1E0C80C00];
  +[WBSReaderFont fontWithFamilyName:displayName:](WBSReaderFont, "fontWithFamilyName:displayName:", CFSTR("Kohinoor Telugu"), CFSTR("కోహినోరు తెలుగు"));
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v6[0] = v0;
  +[WBSReaderFont fontWithFamilyName:displayName:](WBSReaderFont, "fontWithFamilyName:displayName:", CFSTR("Tiro Telugu"), CFSTR("Tiro తెలుగు"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v6[1] = v1;
  +[WBSReaderFont fontWithFamilyName:displayName:](WBSReaderFont, "fontWithFamilyName:displayName:", CFSTR("Telugu MN"), CFSTR("తెలుగు MN"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v6[2] = v2;
  +[WBSReaderFont fontWithFamilyName:displayName:](WBSReaderFont, "fontWithFamilyName:displayName:", CFSTR("Telugu Sangam MN"), CFSTR("తెలుగు సంగం MN"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v6[3] = v3;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v6, 4);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

void sub_1A3EB54F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

id thaiFonts(void)
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  _QWORD v6[5];

  v6[4] = *MEMORY[0x1E0C80C00];
  +[WBSReaderFont fontWithFamilyName:displayName:](WBSReaderFont, "fontWithFamilyName:displayName:", CFSTR("Thonburi"), CFSTR("ธนบุรี"));
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v6[0] = v0;
  +[WBSReaderFont fontWithFamilyName:displayName:](WBSReaderFont, "fontWithFamilyName:displayName:", CFSTR("Tahoma"), 0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v6[1] = v1;
  +[WBSReaderFont fontWithFamilyName:displayName:](WBSReaderFont, "fontWithFamilyName:displayName:", CFSTR("Sukhumvit Set"), CFSTR("สุขุมวิท"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v6[2] = v2;
  +[WBSReaderFont fontWithFamilyName:displayName:](WBSReaderFont, "fontWithFamilyName:displayName:", CFSTR("Silom"), CFSTR("สีลม"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v6[3] = v3;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v6, 4);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

void sub_1A3EB5648(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

id simplifiedChineseFonts(void)
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  _QWORD v6[5];

  v6[4] = *MEMORY[0x1E0C80C00];
  +[WBSReaderFont fontWithFamilyName:displayName:](WBSReaderFont, "fontWithFamilyName:displayName:", CFSTR("PingFang SC"), CFSTR("苹方"));
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v6[0] = v0;
  +[WBSReaderFont fontWithFamilyName:displayName:](WBSReaderFont, "fontWithFamilyName:displayName:", CFSTR("Songti SC"), CFSTR("宋体"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v6[1] = v1;
  +[WBSReaderFont fontWithFamilyName:displayName:](WBSReaderFont, "fontWithFamilyName:displayName:", CFSTR("Kaiti SC"), CFSTR("楷体"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v6[2] = v2;
  +[WBSReaderFont fontWithFamilyName:displayName:](WBSReaderFont, "fontWithFamilyName:displayName:", CFSTR("Yuanti SC"), CFSTR("圆体"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v6[3] = v3;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v6, 4);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

void sub_1A3EB57A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

id traditionalChineseFonts(void)
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  _QWORD v6[5];

  v6[4] = *MEMORY[0x1E0C80C00];
  +[WBSReaderFont fontWithFamilyName:displayName:](WBSReaderFont, "fontWithFamilyName:displayName:", CFSTR("PingFang TC"), CFSTR("蘋方"));
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v6[0] = v0;
  +[WBSReaderFont fontWithFamilyName:displayName:](WBSReaderFont, "fontWithFamilyName:displayName:", CFSTR("Songti TC"), CFSTR("宋體"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v6[1] = v1;
  +[WBSReaderFont fontWithFamilyName:displayName:](WBSReaderFont, "fontWithFamilyName:displayName:", CFSTR("Kaiti TC"), CFSTR("楷體"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v6[2] = v2;
  +[WBSReaderFont fontWithFamilyName:displayName:](WBSReaderFont, "fontWithFamilyName:displayName:", CFSTR("Yuanti TC"), CFSTR("圓體"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v6[3] = v3;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v6, 4);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

void sub_1A3EB5900(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

id unifiedCanadianSyllabicsFonts(void)
{
  void *v0;
  void *v1;
  _QWORD v3[2];

  v3[1] = *MEMORY[0x1E0C80C00];
  +[WBSReaderFont fontWithFamilyName:displayName:](WBSReaderFont, "fontWithFamilyName:displayName:", CFSTR("Euphemia UCAS"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v3[0] = v0;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v3, 1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

void sub_1A3EB59D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id urduFonts(void)
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  _QWORD v7[6];

  v7[5] = *MEMORY[0x1E0C80C00];
  +[WBSReaderFont fontWithFamilyName:displayName:](WBSReaderFont, "fontWithFamilyName:displayName:", CFSTR("Noto Nastaliq Urdu"), CFSTR("نوٹو نستعلیق"));
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  +[WBSReaderFont fontWithFamilyName:displayName:](WBSReaderFont, "fontWithFamilyName:displayName:", CFSTR("Geeza Pro"), CFSTR(" گیزہ پرو"), v0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v7[1] = v1;
  +[WBSReaderFont systemFontWithDisplayName:](WBSReaderFont, "systemFontWithDisplayName:", CFSTR("سان فرانسسکو"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v7[2] = v2;
  +[WBSReaderFont fontWithFamilyName:displayName:](WBSReaderFont, "fontWithFamilyName:displayName:", CFSTR("Times New Roman"), CFSTR(" ٹائمز نیو رومن"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v7[3] = v3;
  +[WBSReaderFont fontWithFamilyName:displayName:](WBSReaderFont, "fontWithFamilyName:displayName:", CFSTR("Myriad Arabic"), CFSTR("Myriad عربي"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v7[4] = v4;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v7, 5);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

void sub_1A3EB5B28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

id defaultFonts(void)
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  _QWORD v12[10];

  v12[9] = *MEMORY[0x1E0C80C00];
  +[WBSReaderFont systemFont](WBSReaderFont, "systemFont");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  +[WBSReaderFont fontWithFamilyName:displayName:](WBSReaderFont, "fontWithFamilyName:displayName:", CFSTR("Athelas"), 0, v0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v12[1] = v1;
  +[WBSReaderFont fontWithFamilyName:displayName:](WBSReaderFont, "fontWithFamilyName:displayName:", CFSTR("Charter"), 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v12[2] = v2;
  +[WBSReaderFont fontWithFamilyName:displayName:](WBSReaderFont, "fontWithFamilyName:displayName:", CFSTR("Georgia"), 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v12[3] = v3;
  +[WBSReaderFont fontWithFamilyName:displayName:](WBSReaderFont, "fontWithFamilyName:displayName:", CFSTR("Iowan Old Style"), CFSTR("Iowan"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v12[4] = v4;
  +[WBSReaderFont fontWithFamilyName:displayName:](WBSReaderFont, "fontWithFamilyName:displayName:", CFSTR("Palatino"), 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v12[5] = v5;
  +[WBSReaderFont fontWithFamilyName:displayName:](WBSReaderFont, "fontWithFamilyName:displayName:", CFSTR("Seravek"), 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v12[6] = v6;
  +[WBSReaderFont fontWithFamilyName:displayName:](WBSReaderFont, "fontWithFamilyName:displayName:", CFSTR("Times New Roman"), 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v12[7] = v7;
  +[WBSReaderFont systemSerifFont](WBSReaderFont, "systemSerifFont");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v12[8] = v8;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v12, 9);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v9, "sortedArrayUsingComparator:", &__block_literal_global_87);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

void sub_1A3EB5D4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  v2 = v1;

  _Unwind_Resume(a1);
}

void sub_1A3EB5E64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t ___ZL12defaultFontsv_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;

  v4 = a3;
  objc_msgSend(a2, "displayName");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "displayName");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v5, "localizedCaseInsensitiveCompare:", v6);

  return v7;
}

void sub_1A3EB61D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1A3EB63BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3EB641C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void WBSReloadReadingListWidget()
{
  NSObject *v0;
  void *v1;
  objc_class *v2;
  id v3;
  void *v4;
  void *v5;
  NSObject *v6;
  _QWORD v7[6];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  v0 = WBS_LOG_CHANNEL_PREFIXWidgets();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
  {
    LOWORD(v7[0]) = 0;
    _os_log_impl(&dword_1A3D90000, v0, OS_LOG_TYPE_INFO, "Requesting reload of Reading List widget", (uint8_t *)v7, 2u);
  }
  v8 = 0;
  v9 = &v8;
  v10 = 0x2050000000;
  v1 = (void *)getCHSTimelineControllerClass_softClass;
  v11 = getCHSTimelineControllerClass_softClass;
  if (!getCHSTimelineControllerClass_softClass)
  {
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = __getCHSTimelineControllerClass_block_invoke;
    v7[3] = &unk_1E4B2A210;
    v7[4] = &v8;
    __getCHSTimelineControllerClass_block_invoke((uint64_t)v7);
    v1 = (void *)v9[3];
  }
  v2 = objc_retainAutorelease(v1);
  _Block_object_dispose(&v8, 8);
  v3 = [v2 alloc];
  v4 = (void *)objc_msgSend(v3, "initWithExtensionBundleIdentifier:kind:", *MEMORY[0x1E0D89F80], CFSTR("ReadingListWidget"));
  objc_msgSend(v4, "reloadTimelineWithReason:", CFSTR("new data"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    v6 = WBS_LOG_CHANNEL_PREFIXWidgets();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      WBSReloadReadingListWidget_cold_1(v6, v5);
  }

}

void sub_1A3EB66A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getCHSTimelineControllerClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  if (!ChronoServicesLibraryCore_frameworkLibrary)
  {
    v4 = xmmword_1E4B3EBF0;
    v5 = 0;
    ChronoServicesLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!ChronoServicesLibraryCore_frameworkLibrary)
    __getCHSTimelineControllerClass_block_invoke_cold_1(&v3);
  result = objc_getClass("CHSTimelineController");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getCHSTimelineControllerClass_block_invoke_cold_2();
  getCHSTimelineControllerClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1A3EB7038(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3EB70D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1A3EB71D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3EB72E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3EB73B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A3EB74AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1A3EB752C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3EB771C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3EB78EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3EB79BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3EB7A58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A3EB7B0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1A3EB7B88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3EB7C70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{

  _Unwind_Resume(a1);
}

void sub_1A3EB7D0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A3EB8818(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3EB8914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1A3EB89F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void logCompletionMatchToDebugChannel(NSString *a1, WBSURLCompletionMatch *a2)
{
  NSString *v3;
  WBSURLCompletionMatch *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  _QWORD v8[4];

  v8[3] = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (objc_msgSend(MEMORY[0x1E0D89BE8], "isSearchEvaluationLoggingEnabled"))
  {
    v5 = (id)WBS_LOG_CHANNEL_PREFIXURLAutocomplete();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      -[WBSURLCompletionMatch uuidString](v4, "uuidString");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      logCompletionMatchToDebugChannel((uint64_t)v3, v6, (uint64_t)v8, v5);
    }
  }
  else
  {
    v5 = (id)WBS_LOG_CHANNEL_PREFIXURLAutocomplete();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      -[WBSURLCompletionMatch originalURLString](v4, "originalURLString");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      logCompletionMatchToDebugChannel((uint64_t)v3, v7, (uint64_t)v8, v5);
    }
  }

}

void sub_1A3EB8B18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3EB8C1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1A3EB8D20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3EB8E30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1A3EB8F24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3EB8FCC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3EB9024(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3EB9098(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3EB91E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3EB93CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  v16 = v14;

  _Unwind_Resume(a1);
}

void sub_1A3EB96D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1A3EB9970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1A3EB9A88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3EB9C0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A3EB9CEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3EB9D50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3EB9EC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3EB9FD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1A3EBA07C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3EBA154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1A3EBA24C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3EBA338(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3EBA3F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1A3EBA4A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3EBA574(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1A3EBA674(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3EBA8B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A3EBAD14(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_1A3EBBD8C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 88));
  _Unwind_Resume(a1);
}

void sub_1A3EBCDDC(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_1A3EBDD94(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_1A3EBEB34(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_1A3EBF678(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_1A3EBFED8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_1A3EC082C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_1A3EC16E0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_1A3EC24FC(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_1A3EC3178(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_1A3EC4084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A3EC4234(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 48));
  _Unwind_Resume(a1);
}

void sub_1A3EC4D48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A3EC4FE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A3EC585C(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_1A3EC6398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A3EC65CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A3EC66D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A3EC67E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A3EC6920(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A3EC6A48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A3EC6C18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A3EC6E1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A3EC702C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A3EC715C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t WBSSafariSandboxBrokerInterface()
{
  return objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE725B40);
}

uint64_t WBSSafariSandboxBrokerInterfaceWithProtocol(uint64_t a1)
{
  return objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", a1);
}

void sub_1A3EC77E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3EC78B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3EC79C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3EC7A20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3EC7AFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3EC7BD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3EC7C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1A3EC7D3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3EC7E10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3EC8A64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3EC8CA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  void *v15;
  id *v16;

  objc_destroyWeak(v16);

  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A3EC8DC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3EC8E24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3EC913C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3EC92BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1A3EC93C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3EC9484(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3EC96D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3EC989C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A3EC9938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3EC9C5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3EC9F34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3ECA150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

const __CFArray *WBSSecIdentityCopySSLClientAuthenticationChain(__SecIdentity *a1)
{
  SecPolicyRef SSL;
  SecPolicyRef v3;
  const __CFArray *v4;
  SecCertificateRef v5;
  void *v6;
  __CFArray *MutableCopy;
  CFIndex Count;
  SecTrustResultType result;
  SecTrustRef trust;
  SecCertificateRef certificateRef;
  _QWORD v13[2];

  v13[1] = *MEMORY[0x1E0C80C00];
  SSL = SecPolicyCreateSSL(0, 0);
  if (!SSL)
    return 0;
  v3 = SSL;
  certificateRef = 0;
  v4 = 0;
  if (!SecIdentityCopyCertificate(a1, &certificateRef))
  {
    v5 = certificateRef;
    v13[0] = certificateRef;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v13, 1);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    trust = 0;
    v4 = 0;
    if (!SecTrustCreateWithCertificates(v6, v3, &trust))
    {
      v4 = SecTrustCopyCertificateChain(trust);
      result = kSecTrustResultInvalid;
      if (v4 && !SecTrustGetTrustResult(trust, &result) && result == kSecTrustResultUnspecified)
      {
        MutableCopy = CFArrayCreateMutableCopy(0, 0, v4);
        Count = CFArrayGetCount(v4);
        CFArrayRemoveValueAtIndex(MutableCopy, Count - 1);
        CFRelease(v4);
        v4 = MutableCopy;
      }
      CFRelease(trust);
    }

  }
  CFRelease(v3);
  return v4;
}

void sub_1A3ECA8E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3ECA978(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3ECAAE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3ECABC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A3ECAD3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<long long,void *> *>>(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t i;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *inserted;
  _QWORD *v12;

  v6 = a1[1];
  if (!v6)
    goto LABEL_9;
  for (i = 0; i != v6; *(_QWORD *)(*a1 + 8 * i++) = 0)
    ;
  v8 = (_QWORD *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      v9 = a2[2];
      v8[2] = v9;
      v10 = (_QWORD *)*v8;
      v8[1] = v9;
      inserted = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__node_insert_multi_prepare((uint64_t)a1, v9, v8 + 2);
      std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__node_insert_multi_perform(a1, v8, inserted);
      a2 = (_QWORD *)*a2;
      v8 = v10;
      if (!v10)
        goto LABEL_9;
    }
    do
    {
      v12 = (_QWORD *)*v8;
      operator delete(v8);
      v8 = v12;
    }
    while (v12);
  }
  else
  {
LABEL_9:
    while (a2 != a3)
    {
      std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_multi<long long const&>(a1, a2 + 2);
      a2 = (_QWORD *)*a2;
    }
  }
}

_QWORD *std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_multi<long long const&>(_QWORD *a1, unint64_t *a2)
{
  _QWORD *v4;
  unint64_t v5;
  _QWORD *inserted;

  v4 = operator new(0x18uLL);
  v5 = *a2;
  v4[2] = *a2;
  *v4 = 0;
  v4[1] = v5;
  inserted = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__node_insert_multi_prepare((uint64_t)a1, v5, v4 + 2);
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__node_insert_multi_perform(a1, v4, inserted);
  return v4;
}

void sub_1A3ECAED0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

id coreSpotlightBookmarksDonationIdentifier()
{
  if (coreSpotlightBookmarksDonationIdentifier_once != -1)
    dispatch_once(&coreSpotlightBookmarksDonationIdentifier_once, &__block_literal_global_312);
  return (id)coreSpotlightBookmarksDonationIdentifier_identifier;
}

void sub_1A3ECD61C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  _Block_object_dispose(&a35, 8);
  _Unwind_Resume(a1);
}

void sub_1A3ECF28C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A3ECF338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1A3ECF4F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1A3ECF7F4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A3ECF8A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1A3ECFA58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void __coreSpotlightBookmarksDonationIdentifier_block_invoke()
{
  void *v0;
  uint64_t v1;
  void *v2;
  id v3;

  v0 = (void *)MEMORY[0x1E0CB3940];
  objc_msgSend(MEMORY[0x1E0CB34D0], "safari_safariApplicationPlatformBundleIdentifier");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "stringWithFormat:", CFSTR("%@.BookmarksDonation"), v3);
  v1 = objc_claimAutoreleasedReturnValue();
  v2 = (void *)coreSpotlightBookmarksDonationIdentifier_identifier;
  coreSpotlightBookmarksDonationIdentifier_identifier = v1;

}

_BYTE *OUTLINED_FUNCTION_8_2(_BYTE *result, _BYTE *a2)
{
  *result = 0;
  *a2 = 0;
  return result;
}

void sub_1A3ED0FDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 56));
  _Unwind_Resume(a1);
}

const __CFString *titleForNewTabPosition(unint64_t a1)
{
  if (a1 > 3)
    return CFSTR("Unknown");
  else
    return off_1E4B401A8[a1];
}

void sub_1A3ED5718(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

double WBSHistoryTopicScore(unint64_t a1, double a2, double a3)
{
  float v3;

  v3 = a3 - a2;
  return sqrt((double)a1) * powf(1.0, v3);
}

float WBSTopSitesScore()
{
  return WBSTopSitesScoreForCaching();
}

float WBSTopSitesScoreForCaching()
{
  const __CFString *v0;
  float *v1;
  float *v2;
  float *v3;
  float *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  double v18;
  const __CFString *v19;
  unint64_t Length;
  const char *CStringPtr;
  unint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  const UniChar *CharactersPtr;
  int v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  float v34;
  UniChar *v35;
  void *v36;
  WTF *v37;
  int v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  float v44;
  float v45;
  WTF *v46;
  uint64_t i;
  int v48;
  WTF *v49;
  uint64_t j;
  int v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  unint64_t v59;
  float *v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float *v65;
  unint64_t v66;
  float v67;
  float v68;
  float v69;
  float v70;
  uint64_t v71;
  uint64_t v72;
  float v73;
  float v74;
  BOOL v75;
  float v76;
  uint64_t v77;
  float v78;
  float *v79;
  float v80;
  uint64_t v81;
  uint64_t v82;
  float v83;
  float v84;
  BOOL v85;
  float v86;
  uint64_t v87;
  float v88;
  float *v89;
  float v90;
  void *v91;
  WTF *v93;
  _BYTE v94[4104];
  CFRange v95;

  v0 = (const __CFString *)MEMORY[0x1E0C80A78]();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v14 = v13;
  v16 = v15;
  v18 = v17;
  v19 = v0;
  Length = CFStringGetLength(v0);
  if (systemEightBitStringEncoding(void)::onceToken != -1)
    dispatch_once(&systemEightBitStringEncoding(void)::onceToken, &__block_literal_global_99);
  CStringPtr = CFStringGetCStringPtr(v19, systemEightBitStringEncoding(void)::encoding);
  if (!CStringPtr)
  {
    CharactersPtr = CFStringGetCharactersPtr(v19);
    if (!CharactersPtr)
    {
      v93 = (WTF *)v94;
      v35 = (UniChar *)v94;
      if (Length >= 0x801)
      {
        if (Length >> 31)
        {
LABEL_153:
          __break(0xC471u);
          JUMPOUT(0x1A3ED6E2CLL);
        }
        v35 = (UniChar *)WTF::fastMalloc((WTF *)(2 * Length));
        v93 = (WTF *)v35;
      }
      v95.location = 0;
      v95.length = Length;
      CFStringGetCharacters(v19, v95, v35);
      v22 = 0;
      if (Length)
      {
        v37 = v93;
        do
        {
          v39 = *(unsigned __int16 *)v37;
          v37 = (WTF *)((char *)v37 + 2);
          v38 = v39;
          if (Length == 1)
            v40 = 3;
          else
            v40 = 4;
          if (v22 == 2)
            v41 = v40;
          else
            v41 = v22 + 1;
          if (v38 != 47)
            v41 = v22;
          if (v38 == 63)
            v41 = v22 + 1;
          if (v38 == 38)
            v42 = v22 + 1;
          else
            v42 = v22;
          if (v38 == 35)
            v42 = v22 + 1;
          if (v38 <= 46)
            v22 = v42;
          else
            v22 = v41;
          --Length;
        }
        while (Length);
      }
      if (v94 != (_BYTE *)v93 && v93)
        WTF::fastFree(v93, v36);
      goto LABEL_77;
    }
    if (Length)
    {
      v22 = 0;
      do
      {
        v30 = *CharactersPtr++;
        v29 = v30;
        if (Length == 1)
          v31 = 3;
        else
          v31 = 4;
        if (v22 == 2)
          v32 = v31;
        else
          v32 = v22 + 1;
        if (v29 != 47)
          v32 = v22;
        if (v29 == 63)
          v32 = v22 + 1;
        if (v29 == 38)
          v33 = v22 + 1;
        else
          v33 = v22;
        if (v29 == 35)
          v33 = v22 + 1;
        if (v29 <= 46)
          v22 = v33;
        else
          v22 = v32;
        --Length;
      }
      while (Length);
      goto LABEL_77;
    }
LABEL_49:
    v34 = 1.0;
    goto LABEL_80;
  }
  if (!Length)
    goto LABEL_49;
  v22 = 0;
  do
  {
    v24 = *(unsigned __int8 *)CStringPtr++;
    v23 = v24;
    if (Length == 1)
      v25 = 3;
    else
      v25 = 4;
    if (v22 == 2)
      v26 = v25;
    else
      v26 = v22 + 1;
    if (v23 != 47)
      v26 = v22;
    if (v23 == 63)
      v26 = v22 + 1;
    if (v23 == 38)
      v27 = v22 + 1;
    else
      v27 = v22;
    if (v23 == 35)
      v27 = v22 + 1;
    if (v23 <= 46)
      v22 = v27;
    else
      v22 = v26;
    --Length;
  }
  while (Length);
LABEL_77:
  v34 = 1.0;
  v43 = v22 - 4;
  if (v22 >= 4)
  {
    v34 = 0.25;
    if (v43 <= 5)
      v34 = flt_1A3F6A258[v43];
  }
LABEL_80:
  if (v4)
    *v4 = v34;
  +[WBSHistoryVisit weightedVisitCountFromScore:](WBSHistoryVisit, "weightedVisitCountFromScore:", v14);
  v45 = v44;
  if (v6 | v10)
  {
    if (v10)
    {
      if (v10 >> 30)
      {
        __break(0xC471u);
        JUMPOUT(0x1A3ED6E3CLL);
      }
      v46 = (WTF *)WTF::fastMalloc((WTF *)(4 * v10));
      for (i = 0; i != v10; ++i)
      {
        +[WBSHistoryVisit weightedVisitCountFromScore:](WBSHistoryVisit, "weightedVisitCountFromScore:", *(unsigned int *)(v12 + 4 * i));
        if (v10 == i)
          goto LABEL_153;
        *((_DWORD *)v46 + i) = v48;
      }
      if (v6)
        goto LABEL_89;
    }
    else
    {
      v46 = 0;
      if (v6)
      {
LABEL_89:
        if (v6 >> 30)
        {
          __break(0xC471u);
          JUMPOUT(0x1A3ED6E44);
        }
        v49 = (WTF *)WTF::fastMalloc((WTF *)(4 * v6));
        for (j = 0; j != v6; ++j)
        {
          +[WBSHistoryVisit weightedVisitCountFromScore:](WBSHistoryVisit, "weightedVisitCountFromScore:", *(unsigned int *)(v8 + 4 * j));
          if (v6 == j)
          {
            __break(0xC471u);
            JUMPOUT(0x1A3ED6E34);
          }
          *((_DWORD *)v49 + j) = v51;
        }
LABEL_98:
        v54 = v18;
        if (v10)
        {
          v55 = *(float *)v46;
          v56 = v16 - v54;
          v57 = (float)(v55 * powf(1.0, v56)) + 0.0;
        }
        else
        {
          v57 = 0.0;
        }
        v58 = floorf(v54 / 86400.0) * 86400.0 + 43200.0;
        if (v10 >= 2)
        {
          v59 = v10 - 1;
          v60 = (float *)((char *)v46 + 4);
          do
          {
            v58 = v58 + -86400.0;
            v61 = *v60++;
            v62 = v16 - v58;
            v57 = v57 + (float)(v61 * powf(1.0, v62));
            --v59;
          }
          while (v59);
        }
        if (v6)
        {
          v63 = v58 + 259200.0;
          v64 = 0.0;
          v65 = (float *)v49;
          v66 = v6;
          do
          {
            v63 = v63 + -604800.0;
            v67 = *v65++;
            v68 = v16 - v63;
            v64 = v64 + (float)(v67 * powf(1.0, v68));
            --v66;
          }
          while (v66);
        }
        else
        {
          v64 = 0.0;
        }
        v69 = 0.5;
        v70 = 0.5;
        if (v10)
        {
          v71 = 0;
          v72 = 0;
          v73 = 0.0;
          do
          {
            v74 = *((float *)v46 + v71);
            v75 = v74 == 0.0;
            if (v74 == 0.0)
              v74 = -0.0;
            v73 = v73 + v74;
            if (!v75)
              v72 = v71;
            ++v71;
          }
          while (v10 != v71);
          v70 = 0.5;
          if (v72)
          {
            if (v73 == 0.0)
            {
              v70 = 0.0;
              if (v6)
              {
LABEL_125:
                v81 = 0;
                v82 = 0;
                v83 = 0.0;
                do
                {
                  v84 = *((float *)v49 + v81);
                  v85 = v84 == 0.0;
                  if (v84 == 0.0)
                    v84 = -0.0;
                  v83 = v83 + v84;
                  if (!v85)
                    v82 = v81;
                  ++v81;
                }
                while (v6 != v81);
                if (v82)
                {
                  if (v83 == 0.0)
                  {
                    v69 = 0.0;
                  }
                  else
                  {
                    if ((unint64_t)(v82 + 1) > 1)
                      v87 = v82 + 1;
                    else
                      v87 = 1;
                    v88 = 0.0;
                    v89 = (float *)v49;
                    do
                    {
                      v90 = *v89++;
                      v86 = 1.0 / (double)v6;
                      v88 = v88 + (float)((float)((float)(v90 / v83) - v86) * (float)((float)(v90 / v83) - v86));
                      --v87;
                    }
                    while (v87);
                    v69 = 0.09531 / logf((float)(v88 / (float)v6) + 1.1);
                  }
                }
              }
LABEL_142:
              v53 = logf(v45) * (float)((float)(v57 * v70) + (float)(v64 * v69));
              if (v2)
                *v2 = v53;
              if (v49)
                WTF::fastFree(v49, v91);
              if (v46)
                WTF::fastFree(v46, v91);
              return v34 * v53;
            }
            if ((unint64_t)(v72 + 1) > 1)
              v77 = v72 + 1;
            else
              v77 = 1;
            v78 = 0.0;
            v79 = (float *)v46;
            do
            {
              v80 = *v79++;
              v76 = 1.0 / (double)v10;
              v78 = v78 + (float)((float)((float)(v80 / v73) - v76) * (float)((float)(v80 / v73) - v76));
              --v77;
            }
            while (v77);
            v70 = 0.09531 / logf((float)(v78 / (float)v10) + 1.1);
          }
        }
        if (v6)
          goto LABEL_125;
        goto LABEL_142;
      }
    }
    v49 = 0;
    goto LABEL_98;
  }
  v52 = v16 - v18;
  v53 = powf(1.0, v52) * v44;
  if (v2)
    *v2 = v53;
  return v34 * v53;
}

void sub_1A3ED6E50(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11)
{
  WTF *v11;

  if (v11 != a10)
  {
    if (a10)
      WTF::fastFree(a10, a2);
  }
  _Unwind_Resume(exception_object);
}

BOOL WBSTopSitesCachedScoreIsStale(double a1, double a2, double a3)
{
  return a2 - a3 >= 10800.0 || a1 > a3;
}

float WBSTopSitesScoreWithCachedValues(float a1, float a2)
{
  return a1 * a2;
}

uint64_t ___ZL28systemEightBitStringEncodingv_block_invoke()
{
  uint64_t result;

  result = CFStringGetFastestEncoding(CFSTR(" "));
  systemEightBitStringEncoding(void)::encoding = result;
  return result;
}

void *WBSSetIsStringForUserTypedDomainExpansionInHistoryFunction(void *result)
{
  isStringForUserTypedDomainExpansionInHistory = result;
  return result;
}

uint64_t WBSUnifiedFieldInputTypeForString(void *a1)
{
  id v1;
  id *v2;
  void **v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  NSString *v18;
  id v19;
  id v20;
  char v21;
  uint64_t v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t ColonIndex;
  NSString *v27;
  void *v28;
  int v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  void *v37;
  void *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t (*v42)(NSString *);
  uint64_t v43;
  void *v44;
  int v45;
  id v46;
  uint64_t v47;

  v1 = a1;
  if (WBSUnifiedFieldInputTypeForString::token != -1)
    dispatch_once(&WBSUnifiedFieldInputTypeForString::token, &__block_literal_global_100);
  v2 = (id *)pthread_getspecific(WBSUnifiedFieldInputTypeForString::cacheKey);
  v3 = v2;
  if (!v2)
  {
    v3 = (void **)operator new();
    *v3 = 0;
    pthread_setspecific(WBSUnifiedFieldInputTypeForString::cacheKey, v3);
LABEL_7:
    v5 = objc_msgSend(v1, "copy");
    v6 = *v3;
    *v3 = (void *)v5;

    v46 = v1;
    objc_msgSend(MEMORY[0x1E0CB3500], "whitespaceAndNewlineCharacterSet");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v46, "stringByTrimmingCharactersInSet:", v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v8, "length"))
    {
      objc_msgSend(v8, "safari_stringByRemovingUnnecessaryCharactersFromUserTypedURLString");
      v9 = (id)objc_claimAutoreleasedReturnValue();

      if (objc_msgSend(v9, "length"))
      {
        v10 = objc_msgSend(v9, "rangeOfCharacterFromSet:", v7);
        v11 = objc_msgSend(v9, "rangeOfString:", CFSTR("/"));
        if (v10 == 0x7FFFFFFFFFFFFFFFLL)
          goto LABEL_10;
        objc_msgSend(v9, "substringToIndex:", v10);
        v18 = (NSString *)objc_claimAutoreleasedReturnValue();
        substringBeforeFirstColon(v18);
        v19 = (id)objc_claimAutoreleasedReturnValue();
        if (!objc_msgSend(v19, "length"))
          goto LABEL_26;
        v20 = v19;
        {
          isWhitespaceAllowingScheme(NSString *)::whitespaceAllowingSchemes = objc_msgSend(objc_alloc(MEMORY[0x1E0C99E60]), "initWithObjects:", CFSTR("data"), CFSTR("file"), CFSTR("ftp"), CFSTR("ftps"), CFSTR("http"), CFSTR("https"), CFSTR("javascript"), 0);
        }
        if (!objc_msgSend(v20, "length"))
        {

          goto LABEL_64;
        }
        v21 = objc_msgSend((id)isWhitespaceAllowingScheme(NSString *)::whitespaceAllowingSchemes, "containsObject:", v20);

        if ((v21 & 1) != 0)
        {
LABEL_26:
          v22 = objc_msgSend(v19, "length");
          if (!v22 || v22 != -[NSString length](v18, "length") - 1)
          {
            if (-[NSString safari_looksLikeAbsoluteURLString](v18, "safari_looksLikeAbsoluteURLString"))
            {
              v4 = 1;
              goto LABEL_65;
            }
            if (-[NSString rangeOfString:](v18, "rangeOfString:", CFSTR("?")) != 0x7FFFFFFFFFFFFFFFLL)
            {

LABEL_10:
              if (v11 != 0x7FFFFFFFFFFFFFFFLL)
                goto LABEL_34;
              v12 = v9;
              if (objc_msgSend(v12, "length"))
              {
                v13 = objc_msgSend(v12, "rangeOfString:options:", CFSTR(":"), 4);

                if (v13 != 0x7FFFFFFFFFFFFFFFLL)
                {
                  v14 = objc_msgSend(v12, "length") - 1;
                  if (v13 != v14)
                  {
                    v15 = v13 + 1;
                    v16 = MEMORY[0x1E0C80978];
                    while (v15 <= v14)
                    {
                      v17 = objc_msgSend(v12, "characterAtIndex:", v15);
                      if (v17 <= 0xFF)
                      {
                        ++v15;
                        if ((*(_DWORD *)(v16 + 4 * v17 + 60) & 0x400) != 0)
                          continue;
                      }
                      goto LABEL_32;
                    }
                    objc_msgSend(v12, "substringToIndex:", v13);
                    v23 = (id)objc_claimAutoreleasedReturnValue();
                    goto LABEL_33;
                  }
                }
              }
              else
              {

              }
LABEL_32:
              v23 = v12;
LABEL_33:
              v24 = v23;

              v9 = v24;
LABEL_34:
              v9 = v9;
              if (objc_msgSend(v9, "length")
                && (v25 = objc_msgSend(v9, "length") - 1, objc_msgSend(v9, "characterAtIndex:", v25) == 58))
              {
                ColonIndex = firstColonIndex((NSString *)v9);

                if (ColonIndex == v25)
                {
LABEL_44:
                  v31 = objc_msgSend(v9, "rangeOfString:", CFSTR("."));
                  v32 = v31;
                  if (v11 == 0x7FFFFFFFFFFFFFFFLL)
                  {
                    if (v31
                      && v31 != 0x7FFFFFFFFFFFFFFFLL
                      && (v47 = 0, (determineUnifiedFieldInputTypeFromApparentHostString(v9, &v47) & 1) != 0))
                    {
                      v4 = v47;
                    }
                    else if (objc_msgSend(v9, "caseInsensitiveCompare:", CFSTR("localhost")))
                    {
                      v4 = 3;
                    }
                    else
                    {
                      v4 = 2;
                    }
                    goto LABEL_67;
                  }
                  v9 = v9;
                  {
                    v34 = looksLikeMath(NSString *)::notMathCharacters;
                  }
                  else
                  {
                    ___ZL13looksLikeMathP8NSString_block_invoke();
                    v34 = objc_claimAutoreleasedReturnValue();
                    looksLikeMath(NSString *)::notMathCharacters = v34;
                  }
                  v35 = objc_msgSend(v9, "rangeOfCharacterFromSet:", v34);

                  if (v35 == 0x7FFFFFFFFFFFFFFFLL)
                  {
                    v4 = 3;
                    goto LABEL_67;
                  }
                  v18 = 0;
                  if (v32)
                  {
                    if (v32 != 0x7FFFFFFFFFFFFFFFLL)
                    {
                      objc_msgSend(v9, "substringToIndex:", v11);
                      v18 = (NSString *)objc_claimAutoreleasedReturnValue();
                      v47 = 0;
                      if ((determineUnifiedFieldInputTypeFromApparentHostString(v18, &v47) & 1) != 0)
                      {
                        v4 = v47;
                        goto LABEL_66;
                      }
                    }
                  }
                  v39 = objc_msgSend(v9, "rangeOfString:options:", CFSTR("/"), 4);
                  if (v39 != objc_msgSend(v9, "length") - 1)
                  {
                    v40 = objc_msgSend(v9, "rangeOfString:options:", CFSTR("#"), 4);
                    if (v40 == 0x7FFFFFFFFFFFFFFFLL || v40 <= v39)
                    {
                      v41 = objc_msgSend(v9, "rangeOfString:options:", CFSTR("?"), 4);
                      if ((v41 == 0x7FFFFFFFFFFFFFFFLL || v41 <= v11)
                        && (objc_msgSend(v9, "hasPrefix:", CFSTR("localhost/")) & 1) == 0)
                      {
                        v42 = (uint64_t (*)(NSString *))isStringForUserTypedDomainExpansionInHistory;
                        if (!isStringForUserTypedDomainExpansionInHistory)
                          goto LABEL_87;
                        if (!v18)
                        {
                          objc_msgSend(v9, "substringToIndex:", v11);
                          v43 = objc_claimAutoreleasedReturnValue();
                          v42 = (uint64_t (*)(NSString *))isStringForUserTypedDomainExpansionInHistory;
                          v18 = (NSString *)v43;
                        }
                        if ((v42(v18) & 1) == 0)
                        {
LABEL_87:
                          v4 = 3;
                          goto LABEL_66;
                        }
                      }
                    }
                  }
LABEL_90:
                  v4 = 2;
                  goto LABEL_66;
                }
              }
              else
              {

              }
              if (!objc_msgSend(v9, "safari_looksLikeAbsoluteURLString"))
                goto LABEL_44;
              objc_msgSend(MEMORY[0x1E0CB3998], "componentsWithString:", v46);
              v27 = (NSString *)objc_claimAutoreleasedReturnValue();
              v18 = v27;
              if (v27)
              {
                -[NSString scheme](v27, "scheme");
                v28 = (void *)objc_claimAutoreleasedReturnValue();
                v29 = objc_msgSend(v28, "isEqualToString:", CFSTR("about"));

                if (v29)
                {
                  -[NSString path](v18, "path");
                  v30 = (void *)objc_claimAutoreleasedReturnValue();
                  if (objc_msgSend(v30, "isEqualToString:", CFSTR("blank")))
                  {

                  }
                  else
                  {
                    -[NSString path](v18, "path");
                    v44 = (void *)objc_claimAutoreleasedReturnValue();
                    v45 = objc_msgSend(v44, "isEqualToString:", CFSTR("blank/"));

                    if (!v45)
                      goto LABEL_87;
                  }
                  goto LABEL_90;
                }
              }
              substringBeforeFirstColon((NSString *)v9);
              v19 = (id)objc_claimAutoreleasedReturnValue();
              if (v11 == 0x7FFFFFFFFFFFFFFFLL)
              {
                {
                  isSchemeThatDoesNotRequireSlashInURL(NSString *)::schemesThatDoNotRequireSlashInURL = objc_msgSend(objc_alloc(MEMORY[0x1E0C99E60]), "initWithObjects:", CFSTR("data"), CFSTR("facetime"), CFSTR("gamecenter"), CFSTR("irc"), CFSTR("javascript"), CFSTR("mailto"), CFSTR("man"), CFSTR("message"), CFSTR("radar"), CFSTR("spotify"), CFSTR("tel"), 0);
                }
                if (objc_msgSend(v19, "length"))
                {
                  v33 = objc_msgSend((id)isSchemeThatDoesNotRequireSlashInURL(NSString *)::schemesThatDoNotRequireSlashInURL, "containsObject:", v19);

                  if (v33)
                    v4 = 1;
                  else
                    v4 = 3;
                }
                else
                {

                  v4 = 3;
                }
              }
              else
              {
                {
                  isSearchPrefixQualifier(NSString *)::searchQualifiersThatAreUsedLikeSchemes = objc_msgSend(objc_alloc(MEMORY[0x1E0C99E60]), "initWithObjects:", CFSTR("site"), CFSTR("link"), CFSTR("related"), CFSTR("cache"), 0);
                }
                if (objc_msgSend(v19, "length"))
                {
                  v37 = (void *)isSearchPrefixQualifier(NSString *)::searchQualifiersThatAreUsedLikeSchemes;
                  objc_msgSend(v19, "lowercaseString");
                  v38 = (void *)objc_claimAutoreleasedReturnValue();
                  LODWORD(v37) = objc_msgSend(v37, "containsObject:", v38);

                  v4 = v37 ^ 1;
                }
                else
                {
                  v4 = 1;
                }

              }
LABEL_65:

LABEL_66:
              goto LABEL_67;
            }
          }
        }
LABEL_64:
        v4 = 0;
        goto LABEL_65;
      }
      v4 = 0;
    }
    else
    {
      v4 = 4;
      v9 = v8;
    }
LABEL_67:

    v3[1] = (void *)v4;
    goto LABEL_68;
  }
  if (!objc_msgSend(*v2, "isEqualToString:", v1))
    goto LABEL_7;
  v4 = (uint64_t)v3[1];
LABEL_68:

  return v4;
}

void sub_1A3ED81E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  void *v21;
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

id *WBSUnifiedFieldInputTypeForString::Cache::destroy(id *this, void *a2)
{
  if (this)
  {

    JUMPOUT(0x1A85998ACLL);
  }
  return this;
}

id substringBeforeFirstColon(NSString *a1)
{
  NSString *v1;
  uint64_t ColonIndex;
  void *v3;

  v1 = a1;
  ColonIndex = firstColonIndex(v1);
  if (ColonIndex == 0x7FFFFFFFFFFFFFFFLL)
  {
    v3 = 0;
  }
  else
  {
    -[NSString substringToIndex:](v1, "substringToIndex:", ColonIndex);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v3;
}

void sub_1A3ED839C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t determineUnifiedFieldInputTypeFromApparentHostString(void *a1, _QWORD *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  void *v11;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;

  v3 = a1;
  if (objc_msgSend(v3, "length"))
  {
    objc_msgSend(v3, "lowercaseString");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "safari_possibleTopLevelDomainCorrectionForUserTypedString");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v5, "length"))
    {
      v6 = v5;

      v4 = v6;
    }
    objc_msgSend(v4, "safari_highLevelDomainFromHost");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v7, "length"))
    {

LABEL_6:
      *a2 = 2 * (objc_msgSend(v4, "rangeOfString:", CFSTR("@")) == 0x7FFFFFFFFFFFFFFFLL);
      v8 = 1;
LABEL_15:

      goto LABEL_16;
    }
    v9 = v4;
    {
      hasWellKnownButUnofficialTopLevelDomainSuffix(NSString *)::unofficialTopLevelDomainSuffixes = objc_msgSend(objc_alloc(MEMORY[0x1E0C99E60]), "initWithObjects:", CFSTR("private"), CFSTR("box"), CFSTR("local"), 0);
    }
    if (objc_msgSend(v9, "length")
      && (v10 = objc_msgSend(v9, "rangeOfString:options:", CFSTR("."), 4), v10 != 0x7FFFFFFFFFFFFFFFLL))
    {
      if (v10 + 1 != objc_msgSend(v9, "length")
        || (objc_msgSend(v9, "substringToIndex:", v10),
            v11 = (void *)objc_claimAutoreleasedReturnValue(),
            v9,
            v13 = objc_msgSend(v11, "rangeOfString:options:", CFSTR("."), 4),
            v13 != 0x7FFFFFFFFFFFFFFFLL)
        && (v9 = v11, v13 + 1 != objc_msgSend(v11, "length")))
      {
        v14 = hasWellKnownButUnofficialTopLevelDomainSuffix(NSString *)::unofficialTopLevelDomainSuffixes;
        objc_msgSend(v9, "substringFromIndex:");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "lowercaseString");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        LOBYTE(v14) = objc_msgSend((id)v14, "containsObject:", v16);

        if ((v14 & 1) != 0)
          goto LABEL_6;
LABEL_14:
        v8 = 0;
        goto LABEL_15;
      }
    }
    else
    {
      v11 = v9;
    }

    goto LABEL_14;
  }
  v8 = 0;
LABEL_16:

  return v8;
}

void sub_1A3ED85E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

uint64_t firstColonIndex(NSString *a1)
{
  NSString *v1;
  uint64_t v2;

  v1 = a1;
  if (-[NSString length](v1, "length"))
    v2 = -[NSString rangeOfString:](v1, "rangeOfString:", CFSTR(":"));
  else
    v2 = 0x7FFFFFFFFFFFFFFFLL;

  return v2;
}

void sub_1A3ED86A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id ___ZL13looksLikeMathP8NSString_block_invoke()
{
  id v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v0 = objc_alloc_init(MEMORY[0x1E0CB3780]);
  objc_msgSend(MEMORY[0x1E0CB3500], "decimalDigitCharacterSet");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "formUnionWithCharacterSet:", v1);

  objc_msgSend(MEMORY[0x1E0CB3500], "punctuationCharacterSet");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "formUnionWithCharacterSet:", v2);

  objc_msgSend(MEMORY[0x1E0CB3500], "symbolCharacterSet");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "formUnionWithCharacterSet:", v3);

  objc_msgSend(v0, "invertedSet");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

void sub_1A3ED8764(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1A3ED87F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3ED8BF8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, ...)
{
  void *v7;
  void *v8;
  void *v10;
  void *v11;
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  va_list va1;
  uint64_t v17;
  va_list va2;

  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v15 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  WTF::Vector<WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);

  WTF::Vector<WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va1, v10);
  WTF::Vector<WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va2, v11);

  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendRange<WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>*>(uint64_t a1, _DWORD **a2, _DWORD **a3)
{
  _DWORD **v4;
  uint64_t result;
  uint64_t v7;
  unsigned int v8;
  _DWORD *v9;

  v4 = a2;
  result = WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + a3 - a2);
  if (a3 != v4)
  {
    v7 = *(_QWORD *)a1;
    v8 = *(_DWORD *)(a1 + 12);
    do
    {
      v9 = *v4;
      if (*v4)
        ++*v9;
      *(_QWORD *)(v7 + 8 * v8) = v9;
      ++v4;
      ++v8;
    }
    while (v4 != a3);
    *(_DWORD *)(a1 + 12) = v8;
  }
  return result;
}

uint64_t compareCompletionMatchesWithoutBoostingBookmarkScore(SafariShared::BookmarkAndHistoryCompletionMatch **a1, SafariShared::BookmarkAndHistoryCompletionMatch **a2)
{
  return SafariShared::BookmarkAndHistoryCompletionMatch::compare(*a1, *a2, 0) >> 31;
}

uint64_t compareCompletionMatches(SafariShared::BookmarkAndHistoryCompletionMatch **a1, SafariShared::BookmarkAndHistoryCompletionMatch **a2)
{
  return SafariShared::BookmarkAndHistoryCompletionMatch::compare(*a1, *a2, 1) >> 31;
}

uint64_t WTF::Vector<WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  v2 = a2;
  v3 = result;
  v4 = *(unsigned int *)(result + 12);
  if (v4 != a2)
  {
    v5 = (uint64_t *)(*(_QWORD *)result + 8 * a2);
    v6 = 8 * v4 - 8 * a2;
    do
    {
      result = *v5;
      *v5 = 0;
      if (result)
        result = WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref(result);
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  *(_DWORD *)(v3 + 12) = v2;
  return result;
}

void logMatches(uint64_t a1)
{
  unint64_t v2;
  SafariShared::BookmarkAndHistoryCompletionMatch *v3;
  NSString *v4;

  if (*(_DWORD *)(a1 + 12))
  {
    v2 = 0;
    do
    {
      v3 = *(SafariShared::BookmarkAndHistoryCompletionMatch **)(*(_QWORD *)a1 + 8 * v2);
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%4d:"), v2);
      v4 = (NSString *)objc_claimAutoreleasedReturnValue();
      logCompletionMatchToDebugChannel(v4, v3);

      ++v2;
    }
    while (v2 < *(unsigned int *)(a1 + 12));
  }
}

void sub_1A3ED8E5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3ED8F00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3ED9090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  v20 = v19;

  _Unwind_Resume(a1);
}

void sub_1A3ED915C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3ED9348(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3ED93D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3ED94D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3ED9EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  uint64_t *v21;
  uint64_t v23;

  v23 = *v21;
  *v21 = 0;
  if (v23)
    WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref(v23);

  _Unwind_Resume(a1);
}

void logCompletionMatchToDebugChannel(NSString *a1, SafariShared::BookmarkAndHistoryCompletionMatch *a2)
{
  NSString *v3;
  void *v4;
  int v5;
  NSObject *v6;
  const char *v7;
  float v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  char *v13;
  const char *matched;
  void *v15;
  const char *v16;
  float v17;
  id v18;
  id v19;
  const char *v20;
  char *v21;
  const char *v22;
  float v23;
  id v24;
  id v25;
  const char *v26;
  char *v27;
  int v28;
  NSString *v29;
  __int16 v30;
  const char *v31;
  __int16 v32;
  double v33;
  __int16 v34;
  id v35;
  __int16 v36;
  id v37;
  __int16 v38;
  const char *v39;
  __int16 v40;
  const char *v41;
  __int16 v42;
  void *v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (a2)
  {
    SafariShared::BookmarkAndHistoryCompletionMatch::data((id *)a2);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v4, "containsBookmark");

    if (objc_msgSend(MEMORY[0x1E0D89BE8], "isSearchEvaluationLoggingEnabled"))
    {
      v6 = (id)WBS_LOG_CHANNEL_PREFIXURLAutocomplete();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        if (v5)
          v7 = "bookmark";
        else
          v7 = "history";
        v8 = *((float *)a2 + 12);
        SafariShared::BookmarkAndHistoryCompletionMatch::userVisibleURLString(a2);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "safari_urlHashesOfComponents");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        SafariShared::BookmarkAndHistoryCompletionMatch::title(a2);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "safari_md5Hash");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        SafariShared::BookmarkAndHistoryCompletionMatch::uuidString(a2);
        v13 = (char *)(id)objc_claimAutoreleasedReturnValue();
        matched = SafariShared::debugStringForMatchLocation(*((_QWORD *)a2 + 1));
        SafariShared::BookmarkAndHistoryCompletionMatch::lastVisitedDate((id *)a2);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v28 = 138414082;
        v29 = v3;
        v30 = 2082;
        v31 = v7;
        v32 = 2048;
        v33 = v8;
        v34 = 2114;
        v35 = v10;
        v36 = 2114;
        v37 = v12;
        v38 = 2114;
        v39 = v13;
        v40 = 2082;
        v41 = matched;
        v42 = 2112;
        v43 = v15;
        _os_log_debug_impl(&dword_1A3D90000, v6, OS_LOG_TYPE_DEBUG, "%@: (%{public}8s) %.6f <%{public}@> \"%{public}@\" [%{public}@] (%{public}s) %@", (uint8_t *)&v28, 0x52u);

      }
    }
    else if (objc_msgSend(MEMORY[0x1E0D89BE8], "isShowURLsInURLAutocompleteDebugChannelEnabled"))
    {
      v6 = (id)WBS_LOG_CHANNEL_PREFIXURLAutocomplete();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        if (v5)
          v16 = "bookmark";
        else
          v16 = "history";
        v17 = *((float *)a2 + 12);
        SafariShared::BookmarkAndHistoryCompletionMatch::userVisibleURLString(a2);
        v18 = (id)objc_claimAutoreleasedReturnValue();
        SafariShared::BookmarkAndHistoryCompletionMatch::title(a2);
        v19 = (id)objc_claimAutoreleasedReturnValue();
        v20 = SafariShared::debugStringForMatchLocation(*((_QWORD *)a2 + 1));
        SafariShared::BookmarkAndHistoryCompletionMatch::lastVisitedDate((id *)a2);
        v21 = (char *)objc_claimAutoreleasedReturnValue();
        v28 = 138413827;
        v29 = v3;
        v30 = 2082;
        v31 = v16;
        v32 = 2048;
        v33 = v17;
        v34 = 2114;
        v35 = v18;
        v36 = 2117;
        v37 = v19;
        v38 = 2082;
        v39 = v20;
        v40 = 2112;
        v41 = v21;
        _os_log_debug_impl(&dword_1A3D90000, v6, OS_LOG_TYPE_DEBUG, "%@: (%{public}8s) %.6f <%{public}@> \"%{sensitive}@\" (%{public}s) %@", (uint8_t *)&v28, 0x48u);

      }
    }
    else
    {
      v6 = (id)WBS_LOG_CHANNEL_PREFIXURLAutocomplete();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        if (v5)
          v22 = "bookmark";
        else
          v22 = "history";
        v23 = *((float *)a2 + 12);
        SafariShared::BookmarkAndHistoryCompletionMatch::userVisibleURLString(a2);
        v24 = (id)objc_claimAutoreleasedReturnValue();
        SafariShared::BookmarkAndHistoryCompletionMatch::title(a2);
        v25 = (id)objc_claimAutoreleasedReturnValue();
        v26 = SafariShared::debugStringForMatchLocation(*((_QWORD *)a2 + 1));
        SafariShared::BookmarkAndHistoryCompletionMatch::lastVisitedDate((id *)a2);
        v27 = (char *)objc_claimAutoreleasedReturnValue();
        v28 = 138413827;
        v29 = v3;
        v30 = 2082;
        v31 = v22;
        v32 = 2048;
        v33 = v23;
        v34 = 2117;
        v35 = v24;
        v36 = 2117;
        v37 = v25;
        v38 = 2082;
        v39 = v26;
        v40 = 2112;
        v41 = v27;
        _os_log_debug_impl(&dword_1A3D90000, v6, OS_LOG_TYPE_DEBUG, "%@: (%{public}8s) %.6f <%{sensitive}@> \"%{sensitive}@\" (%{public}s) %@", (uint8_t *)&v28, 0x48u);

      }
    }

  }
}

void sub_1A3EDA4FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3EDA61C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3EDA774(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3EDA944(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  _QWORD *v5;
  void *v6;
  uint64_t v7;

  *v5 = 0;
  if (v7)
    WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref(v7);

  _Unwind_Resume(a1);
}

uint64_t SafariShared::BookmarkAndHistoryCompletionMatch::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>, double a7@<D0>)
{
  uint64_t v14;
  uint64_t result;

  v14 = WTF::fastMalloc((WTF *)0x50);
  result = SafariShared::BookmarkAndHistoryCompletionMatch::BookmarkAndHistoryCompletionMatch(v14, a1, a2, a3, a4, a5, a7);
  *a6 = v14;
  return result;
}

void sub_1A3EDAA24(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void sub_1A3EDABE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v11;

  WTF::Vector<WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, v11);
  _Unwind_Resume(a1);
}

void sub_1A3EDACE8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Vector<WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1A3EDB674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, void *a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v16;
  void *v17;
  uint64_t v18;
  va_list va;
  uint64_t v20;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v18 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref(v12);
  WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref(v11);

  WTF::Vector<WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, v16);
  WTF::Vector<WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va1, v17);

  _Unwind_Resume(a1);
}

void sub_1A3EDBB40(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;
  uint64_t v13;
  void *v15;

  WTF::Vector<NSString const* {__strong},0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v13 - 136, a2);

  WTF::Vector<NSString const* {__strong},0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v13 - 120, v15);
  _Unwind_Resume(a1);
}

void *recordItemIfFullTextMatch(void *result, void *a2, uint64_t a3, uint64_t a4, double a5)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  id v24;

  v24 = result;
  if (result)
  {
    v8 = result;
    v22 = 0;
    v23 = 0;
    result = (void *)SafariShared::BookmarkAndHistoryCompletionMatch::computeMatchLocation(result, a2, &v23, &v22);
    if (result)
    {
      v9 = (uint64_t)result;
      v10 = *(unsigned int *)(a4 + 12);
      if ((_DWORD)v10 == *(_DWORD *)(a4 + 8))
      {
        WTF::Vector<objc_object  {objcproto25WBSURLCompletionMatchData}* {__strong},0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,objc_object  {objcproto25WBSURLCompletionMatchData}&>(a4, &v24);
        v11 = v24;
      }
      else
      {
        v12 = *(_QWORD *)a4;
        v11 = v8;
        *(_QWORD *)(v12 + 8 * v10) = v11;
        ++*(_DWORD *)(a4 + 12);
      }
      SafariShared::BookmarkAndHistoryCompletionMatch::create((uint64_t)v11, *(unsigned int *)(a3 + 12), v9, v22, v23, (uint64_t *)&v21, a5);
      v13 = *(unsigned int *)(a3 + 12);
      if ((_DWORD)v13 == *(_DWORD *)(a3 + 8))
      {
        v14 = v13 + (v13 >> 2);
        if (v14 >= 0x10)
          v15 = v14 + 1;
        else
          v15 = 16;
        if (v15 <= v13 + 1)
          v16 = v13 + 1;
        else
          v16 = v15;
        WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a3, v16);
        v13 = *(unsigned int *)(a3 + 12);
        v17 = *(_QWORD *)a3;
        v18 = (uint64_t)v21;
        v21 = 0;
        *(_QWORD *)(v17 + 8 * v13) = v18;
      }
      else
      {
        v19 = *(_QWORD *)a3;
        v20 = (uint64_t)v21;
        v21 = 0;
        *(_QWORD *)(v19 + 8 * v13) = v20;
      }
      *(_DWORD *)(a3 + 12) = v13 + 1;
      result = v21;
      v21 = 0;
      if (result)
        return (void *)WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref((uint64_t)result);
    }
  }
  return result;
}

void sub_1A3EDBCF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref(a9);
  _Unwind_Resume(exception_object);
}

void addMatchData(void *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  v8 = a1;
  v3 = a2;
  objc_msgSend(v3, "originalURLString");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v4, "length"))
  {
    objc_msgSend(v8, "objectForKeyedSubscript:", v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v5;
    if (v5)
    {
      objc_msgSend(v5, "matchDataByMergingWithMatchData:", v3);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "setObject:forKeyedSubscript:", v7, v4);

    }
    else
    {
      objc_msgSend(v8, "setObject:forKeyedSubscript:", v3, v4);
    }

  }
}

void sub_1A3EDBDD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_1A3EDBE88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3EDC244(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;
  uint64_t v13;
  void *v15;

  WTF::Vector<NSString const* {__strong},0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v13 - 136, a2);

  WTF::Vector<NSString const* {__strong},0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v13 - 120, v15);
  _Unwind_Resume(a1);
}

uint64_t recordItemIfPrefixMatch(uint64_t result, void *a2, uint64_t a3, uint64_t a4, double a5)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;

  v24 = (id)result;
  if (result)
  {
    v8 = (void *)result;
    v22 = 0;
    v23 = 0;
    result = SafariShared::BookmarkAndHistoryCompletionMatch::computeMatchLocation((void *)result, a2, &v23, &v22);
    if (result >= 4)
    {
      v9 = result;
      v10 = *(unsigned int *)(a4 + 12);
      if ((_DWORD)v10 == *(_DWORD *)(a4 + 8))
      {
        WTF::Vector<objc_object  {objcproto25WBSURLCompletionMatchData}* {__strong},0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,objc_object  {objcproto25WBSURLCompletionMatchData}&>(a4, &v24);
        v11 = v24;
      }
      else
      {
        v12 = *(_QWORD *)a4;
        v11 = v8;
        *(_QWORD *)(v12 + 8 * v10) = v11;
        ++*(_DWORD *)(a4 + 12);
      }
      SafariShared::BookmarkAndHistoryCompletionMatch::create((uint64_t)v11, *(unsigned int *)(a3 + 12), v9, v22, v23, &v21, a5);
      v13 = *(unsigned int *)(a3 + 12);
      if ((_DWORD)v13 == *(_DWORD *)(a3 + 8))
      {
        v14 = v13 + (v13 >> 2);
        if (v14 >= 0x10)
          v15 = v14 + 1;
        else
          v15 = 16;
        if (v15 <= v13 + 1)
          v16 = v13 + 1;
        else
          v16 = v15;
        WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a3, v16);
        v13 = *(unsigned int *)(a3 + 12);
        v17 = *(_QWORD *)a3;
        v18 = v21;
        v21 = 0;
        *(_QWORD *)(v17 + 8 * v13) = v18;
      }
      else
      {
        v19 = *(_QWORD *)a3;
        v20 = v21;
        v21 = 0;
        *(_QWORD *)(v19 + 8 * v13) = v20;
      }
      *(_DWORD *)(a3 + 12) = v13 + 1;
      result = v21;
      v21 = 0;
      if (result)
        return WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref(result);
    }
  }
  return result;
}

void sub_1A3EDC400(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref(a9);
  _Unwind_Resume(exception_object);
}

void sub_1A3EDC498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&),WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>*,false>(uint64_t result, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *), uint64_t a4, char a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  char v19;
  BOOL v20;
  uint64_t v21;

  v8 = (uint64_t *)result;
LABEL_2:
  v9 = a2 - 1;
  v10 = v8;
LABEL_3:
  v11 = 1 - a4;
  while (2)
  {
    v8 = v10;
    v12 = v11;
    v13 = (char *)a2 - (char *)v10;
    v14 = a2 - v10;
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = (*a3)(a2 - 1, v10);
        if ((_DWORD)result)
        {
          v21 = *v10;
          *v10 = *v9;
          *v9 = v21;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&),WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>*>(v10, v10 + 1, a2 - 1, a3);
      case 4uLL:
        return std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&),WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>*>(v10, v10 + 1, v10 + 2, a2 - 1, a3);
      case 5uLL:
        return std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&),WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>*>(v10, v10 + 1, v10 + 2, v10 + 3, a2 - 1, a3);
      default:
        if (v13 <= 191)
        {
          if ((a5 & 1) != 0)
            return std::__insertion_sort[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&),WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>*>((uint64_t)v10, a2, (uint64_t (**)(uint64_t *, uint64_t))a3);
          else
            return std::__insertion_sort_unguarded[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&),WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>*>((uint64_t)v10, a2, (uint64_t (**)(uint64_t *, uint64_t))a3);
        }
        if (v12 != 1)
        {
          v15 = v14 >> 1;
          v16 = &v10[v14 >> 1];
          if ((unint64_t)v13 < 0x401)
          {
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&),WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>*>(&v10[v14 >> 1], v10, a2 - 1, a3);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&),WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>*>(v10, &v10[v14 >> 1], a2 - 1, a3);
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&),WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>*>(v10 + 1, v16 - 1, a2 - 2, a3);
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&),WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>*>(v10 + 2, &v10[v15 + 1], a2 - 3, a3);
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&),WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>*>(v16 - 1, v16, &v10[v15 + 1], a3);
            v17 = *v10;
            *v10 = *v16;
            *v16 = v17;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (((*a3)(v10 - 1, v10) & 1) == 0)
          {
            result = std::__partition_with_equals_on_left[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> *,BOOL (*&)(WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&)>(v10, a2, a3);
            v10 = (uint64_t *)result;
            goto LABEL_17;
          }
LABEL_12:
          v18 = (uint64_t *)std::__partition_with_equals_on_right[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> *,BOOL (*&)(WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&)>(v10, a2, (uint64_t (**)(uint64_t, uint64_t *))a3);
          if ((v19 & 1) == 0)
            goto LABEL_15;
          v20 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&),WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>*>(v10, v18, a3);
          v10 = v18 + 1;
          result = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&),WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>*>(v18 + 1, a2, a3);
          if (!(_DWORD)result)
          {
            v11 = v12 + 1;
            if (v20)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&),WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>*,false>(v8, v18, a3, -v12, a5 & 1);
            v10 = v18 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v12;
            goto LABEL_3;
          }
          a4 = -v12;
          a2 = v18;
          if (v20)
            return result;
          goto LABEL_2;
        }
        if (v10 != a2)
          return (uint64_t)std::__partial_sort_impl[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&),WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>*,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>*>(v10, a2, a2, (unsigned int (**)(uint64_t *, uint64_t *))a3);
        return result;
    }
  }
}

uint64_t std::__insertion_sort[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&),WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>*>(uint64_t result, _QWORD *a2, uint64_t (**a3)(uint64_t *, uint64_t))
{
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;

  if ((_QWORD *)result != a2)
  {
    v4 = (uint64_t *)result;
    v5 = (_QWORD *)(result + 8);
    if ((_QWORD *)(result + 8) != a2)
    {
      v7 = 0;
      v8 = (_QWORD *)result;
      do
      {
        v9 = v8;
        v8 = v5;
        result = (*a3)(v5, (uint64_t)v9);
        if ((_DWORD)result)
        {
          v10 = 0;
          v11 = *v8;
          *v8 = 0;
          v17 = v11;
          for (i = v7; ; i -= 8)
          {
            v13 = (uint64_t *)((char *)v4 + i);
            v14 = *(uint64_t *)((char *)v4 + i);
            *v13 = 0;
            v13[1] = v14;
            if (v10)
              WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref(v10);
            if (!i)
            {
              v15 = v4;
              goto LABEL_13;
            }
            if (((*a3)(&v17, (uint64_t)v4 + i - 8) & 1) == 0)
              break;
            v10 = *v13;
          }
          v15 = (uint64_t *)((char *)v4 + i);
LABEL_13:
          v16 = v17;
          v17 = 0;
          result = *v15;
          *v15 = v16;
          if (result)
          {
            WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref(result);
            result = v17;
            v17 = 0;
            if (result)
              result = WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref(result);
          }
        }
        v5 = v8 + 1;
        v7 += 8;
      }
      while (v8 + 1 != a2);
    }
  }
  return result;
}

void sub_1A3EDC9C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref(a10);
  _Unwind_Resume(exception_object);
}

uint64_t std::__insertion_sort_unguarded[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&),WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>*>(uint64_t result, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t))
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if ((uint64_t *)result != a2)
  {
    v4 = result;
    v5 = (uint64_t *)(result + 8);
    if ((uint64_t *)(result + 8) != a2)
    {
      v7 = 0;
      v8 = result - 8;
      v9 = -1;
      v10 = 1;
      do
      {
        v11 = v4 + 8 * v7;
        v7 = v10;
        result = (*a3)(v5, v11);
        if ((_DWORD)result)
        {
          result = 0;
          v12 = *v5;
          *v5 = 0;
          v17 = v12;
          v13 = v8;
          for (i = v9; ; ++i)
          {
            v15 = *(_QWORD *)(v13 + 8);
            *(_QWORD *)(v13 + 8) = 0;
            *(_QWORD *)(v13 + 16) = v15;
            if (result)
              result = WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref(result);
            if (!i)
            {
              __break(1u);
              return result;
            }
            if (((*a3)(&v17, v13) & 1) == 0)
              break;
            result = *(_QWORD *)(v13 + 8);
            v13 -= 8;
          }
          v16 = v17;
          v17 = 0;
          result = *(_QWORD *)(v13 + 8);
          *(_QWORD *)(v13 + 8) = v16;
          if (result)
          {
            WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref(result);
            result = v17;
            v17 = 0;
            if (result)
              result = WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref(result);
          }
        }
        v10 = v7 + 1;
        v5 = (uint64_t *)(v4 + 8 * (v7 + 1));
        --v9;
        v8 += 8;
      }
      while (v5 != a2);
    }
  }
  return result;
}

void sub_1A3EDCAF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref(a10);
  _Unwind_Resume(exception_object);
}

uint64_t std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&),WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t (**a4)(uint64_t *, uint64_t *))
{
  char v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v8 = (*a4)(a2, a1);
  result = (*a4)(a3, a2);
  if ((v8 & 1) == 0)
  {
    if (!(_DWORD)result)
      return result;
    v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    if (!(*a4)(a2, a1))
      return 1;
    v12 = *a1;
    *a1 = *a2;
    *a2 = v12;
    return 2;
  }
  v10 = *a1;
  if (!(_DWORD)result)
  {
    *a1 = *a2;
    *a2 = v10;
    if (!(*a4)(a3, a2))
      return 1;
    v13 = *a2;
    *a2 = *a3;
    *a3 = v13;
    return 2;
  }
  *a1 = *a3;
  *a3 = v10;
  return 1;
}

uint64_t std::__partition_with_equals_on_left[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> *,BOOL (*&)(WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&)>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  uint64_t v6;
  uint64_t result;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = *a1;
  *a1 = 0;
  v18 = v6;
  result = (*a3)(&v18, a2 - 1);
  if ((result & 1) != 0)
  {
    v8 = a1;
    while (1)
    {
      if (++v8 == a2)
        goto LABEL_28;
      result = (*a3)(&v18, v8);
      if ((result & 1) != 0)
        goto LABEL_9;
    }
  }
  v9 = a1 + 1;
  do
  {
    v8 = v9;
    if (v9 >= a2)
      break;
    result = (*a3)(&v18, v9);
    v9 = v8 + 1;
  }
  while (!(_DWORD)result);
LABEL_9:
  v10 = a2;
  if (v8 < a2)
  {
    v10 = a2;
    while (v10 != a1)
    {
      result = (*a3)(&v18, --v10);
      if ((result & 1) == 0)
        goto LABEL_19;
    }
    goto LABEL_28;
  }
LABEL_19:
  if (v8 < v10)
  {
    v11 = *v8;
    *v8 = *v10;
    *v10 = v11;
    while (++v8 != a2)
    {
      result = (*a3)(&v18, v8);
      if ((_DWORD)result)
      {
        while (v10 != a1)
        {
          result = (*a3)(&v18, --v10);
          if ((result & 1) == 0)
            goto LABEL_19;
        }
        break;
      }
    }
LABEL_28:
    __break(1u);
    return result;
  }
  v12 = v8 - 1;
  if (v8 - 1 != a1)
  {
    v13 = *v12;
    *v12 = 0;
    v14 = *a1;
    *a1 = v13;
    if (v14)
      WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref(v14);
  }
  v15 = v18;
  v18 = 0;
  v16 = *v12;
  *v12 = v15;
  if (v16)
    WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref(v16);
  v17 = v18;
  v18 = 0;
  if (v17)
    WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref(v17);
  return (uint64_t)v8;
}

void sub_1A3EDCD88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref(a10);
  _Unwind_Resume(exception_object);
}

uint64_t std::__partition_with_equals_on_right[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> *,BOOL (*&)(WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&)>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t *))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = 0;
  v7 = *a1;
  *a1 = 0;
  v20 = v7;
  do
  {
    result = (uint64_t)&a1[v6 + 1];
    if ((uint64_t *)result == a2)
      goto LABEL_30;
    result = (*a3)(result, &v20);
    ++v6;
  }
  while ((result & 1) != 0);
  v9 = &a1[v6];
  if (v6 != 1)
  {
    v10 = a2;
    while (v10 != a1)
    {
      result = (*a3)((uint64_t)--v10, &v20);
      if ((_DWORD)result)
        goto LABEL_12;
    }
    goto LABEL_30;
  }
  v10 = a2;
  do
  {
    if (v9 >= v10)
      break;
    result = (*a3)((uint64_t)--v10, &v20);
  }
  while ((result & 1) == 0);
LABEL_12:
  if (v9 < v10)
  {
    v11 = v9;
    v12 = v10;
LABEL_14:
    v13 = *v11;
    *v11 = *v12;
    *v12 = v13;
    while (++v11 != a2)
    {
      result = (*a3)((uint64_t)v11, &v20);
      if ((result & 1) == 0)
      {
        while (v12 != a1)
        {
          result = (*a3)((uint64_t)--v12, &v20);
          if ((_DWORD)result)
          {
            if (v11 < v12)
              goto LABEL_14;
            v14 = v11 - 1;
            goto LABEL_22;
          }
        }
        break;
      }
    }
LABEL_30:
    __break(1u);
    return result;
  }
  v14 = v9 - 1;
LABEL_22:
  if (v14 != a1)
  {
    v15 = *v14;
    *v14 = 0;
    v16 = *a1;
    *a1 = v15;
    if (v16)
      WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref(v16);
  }
  v17 = v20;
  v20 = 0;
  v18 = *v14;
  *v14 = v17;
  if (v18)
    WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref(v18);
  v19 = v20;
  v20 = 0;
  if (v19)
    WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref(v19);
  return (uint64_t)v14;
}

void sub_1A3EDCF54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref(a10);
  _Unwind_Resume(exception_object);
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&),WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>*>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  char *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = a2 - 1;
      if ((*a3)(a2 - 1, a1))
      {
        v9 = *a1;
        *a1 = *v8;
        *v8 = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&),WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>*>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&),WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>*>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&),WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>*>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v10 = a1 + 2;
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&),WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>*>(a1, a1 + 1, a1 + 2, a3);
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(v11, v10))
    {
      v14 = 0;
      v15 = *v11;
      *v11 = 0;
      v23 = v15;
      for (i = v12; ; i -= 8)
      {
        v17 = (char *)a1 + i;
        v18 = *(uint64_t *)((char *)a1 + i + 16);
        *((_QWORD *)v17 + 2) = 0;
        *((_QWORD *)v17 + 3) = v18;
        if (v14)
          WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref(v14);
        if (i == -16)
        {
          v19 = a1;
          goto LABEL_15;
        }
        if (((*a3)(&v23, (uint64_t *)((char *)a1 + i + 8)) & 1) == 0)
          break;
        v14 = *((_QWORD *)v17 + 2);
      }
      v19 = (uint64_t *)((char *)a1 + i + 16);
LABEL_15:
      v20 = v23;
      v23 = 0;
      v21 = *v19;
      *v19 = v20;
      if (v21)
        WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref(v21);
      v22 = v23;
      v23 = 0;
      if (v22)
        WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref(v22);
      if (++v13 == 8)
        return v11 + 1 == a2;
    }
    v10 = v11;
    v12 += 8;
    if (++v11 == a2)
      return 1;
  }
}

void sub_1A3EDD174(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref(a10);
  _Unwind_Resume(exception_object);
}

uint64_t std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&),WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t (**a5)(uint64_t *, uint64_t *))
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&),WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>*>(a1, a2, a3, a5);
  result = (*a5)(a4, a3);
  if ((_DWORD)result)
  {
    v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    result = (*a5)(a3, a2);
    if ((_DWORD)result)
    {
      v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      result = (*a5)(a2, a1);
      if ((_DWORD)result)
      {
        v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&),WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t (**a6)(uint64_t *, uint64_t *))
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&),WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>*>(a1, a2, a3, a4, a6);
  result = (*a6)(a5, a4);
  if ((_DWORD)result)
  {
    v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    result = (*a6)(a4, a3);
    if ((_DWORD)result)
    {
      v14 = *a3;
      *a3 = *a4;
      *a4 = v14;
      result = (*a6)(a3, a2);
      if ((_DWORD)result)
      {
        v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
        result = (*a6)(a2, a1);
        if ((_DWORD)result)
        {
          v16 = *a1;
          *a1 = *a2;
          *a2 = v16;
        }
      }
    }
  }
  return result;
}

uint64_t *std::__partial_sort_impl[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&),WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>*,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, unsigned int (**a4)(uint64_t *, uint64_t *))
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;

  if (a1 != a2)
  {
    v6 = (uint64_t)a2;
    v8 = (char *)a2 - (char *)a1;
    v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 9)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&),WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>*>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if ((uint64_t *)v6 != a3)
    {
      v14 = (uint64_t *)v6;
      do
      {
        if ((*a4)(v14, a1))
        {
          v15 = *v14;
          *v14 = *a1;
          *a1 = v15;
          std::__sift_down[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&),WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>*>((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      v13 = (uint64_t)a3;
    }
    if (v8 >= 9)
    {
      v16 = (unint64_t)v8 >> 3;
      do
      {
        std::__pop_heap[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*)(WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&),WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>*>(a1, v6, (unsigned int (**)(uint64_t *, uint64_t))a4, v16);
        v6 -= 8;
      }
      while (v16-- > 2);
    }
    return (uint64_t *)v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&),WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>*>(uint64_t result, unsigned int (**a2)(uint64_t *, uint64_t *), uint64_t a3, uint64_t *a4)
{
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v6 = result;
    v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - result) >> 3)
    {
      v10 = ((uint64_t)a4 - result) >> 2;
      v11 = v10 + 1;
      v12 = (uint64_t *)(result + 8 * (v10 + 1));
      v13 = v10 + 2;
      if (v10 + 2 < a3 && (*a2)(v12, v12 + 1))
      {
        ++v12;
        v11 = v13;
      }
      result = ((uint64_t (*)(uint64_t *, uint64_t *))*a2)(v12, v5);
      if ((result & 1) == 0)
      {
        v14 = *v5;
        *v5 = 0;
        v21 = v14;
        do
        {
          v15 = v12;
          v16 = *v12;
          *v12 = 0;
          v17 = *v5;
          *v5 = v16;
          if (v17)
            WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref(v17);
          if (v7 < v11)
            break;
          v18 = (2 * v11) | 1;
          v12 = (uint64_t *)(v6 + 8 * v18);
          v11 = 2 * v11 + 2;
          if (v11 >= a3)
          {
            v11 = v18;
          }
          else if ((*a2)((uint64_t *)(v6 + 8 * v18), v12 + 1))
          {
            ++v12;
          }
          else
          {
            v11 = v18;
          }
          v5 = v15;
        }
        while (!(*a2)(v12, &v21));
        v19 = v21;
        v21 = 0;
        v20 = *v15;
        *v15 = v19;
        if (v20)
          WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref(v20);
        result = v21;
        v21 = 0;
        if (result)
          return WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref(result);
      }
    }
  }
  return result;
}

void sub_1A3EDD59C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref(a10);
  _Unwind_Resume(exception_object);
}

uint64_t *std::__pop_heap[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*)(WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&),WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>*>(uint64_t *result, uint64_t a2, unsigned int (**a3)(uint64_t *, uint64_t), uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (a4 <= 0)
  {
    __break(1u);
  }
  else if (a4 != 1)
  {
    v6 = (uint64_t)result;
    v7 = *result;
    *result = 0;
    v8 = std::__floyd_sift_down[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&),WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>*>(result, a3, a4);
    v9 = v8;
    v10 = (uint64_t *)(a2 - 8);
    if (v8 == v10)
    {
      result = (uint64_t *)*v8;
      *v9 = v7;
      if (result)
        return (uint64_t *)WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref((uint64_t)result);
    }
    else
    {
      v11 = *v10;
      *v10 = 0;
      v12 = *v8;
      *v9 = v11;
      if (v12)
        WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref(v12);
      v13 = *v10;
      *v10 = v7;
      if (v13)
        WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref(v13);
      return (uint64_t *)std::__sift_up[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&),WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>*>(v6, (uint64_t)(v9 + 1), (uint64_t (**)(uint64_t *, uint64_t))a3, ((uint64_t)v9 - v6 + 8) >> 3);
    }
  }
  return result;
}

void sub_1A3EDD694(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref(v1);
  _Unwind_Resume(exception_object);
}

uint64_t *std::__floyd_sift_down[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&),WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>*>(uint64_t *a1, unsigned int (**a2)(uint64_t *, uint64_t), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = &a1[v6 + 1];
    v10 = 2 * v6;
    v6 = (2 * v6) | 1;
    v11 = v10 + 2;
    if (v10 + 2 < a3 && (*a2)(v9, (uint64_t)(v9 + 1)))
    {
      ++v9;
      v6 = v11;
    }
    v12 = *v9;
    *v9 = 0;
    v13 = *a1;
    *a1 = v12;
    if (v13)
      WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref(v13);
    a1 = v9;
  }
  while (v6 <= v8);
  return v9;
}

uint64_t std::__sift_up[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&),WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>*>(uint64_t result, uint64_t a2, uint64_t (**a3)(uint64_t *, uint64_t), uint64_t a4)
{
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v6 = result;
    v7 = v4 >> 1;
    v8 = (uint64_t *)(result + 8 * (v4 >> 1));
    v9 = (uint64_t *)(a2 - 8);
    result = (*a3)(v8, a2 - 8);
    if ((_DWORD)result)
    {
      v10 = *v9;
      *v9 = 0;
      v15 = v10;
      do
      {
        v11 = v8;
        v12 = *v8;
        *v8 = 0;
        v13 = *v9;
        *v9 = v12;
        if (v13)
          WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref(v13);
        if (!v7)
          break;
        v7 = (v7 - 1) >> 1;
        v8 = (uint64_t *)(v6 + 8 * v7);
        v9 = v11;
      }
      while (((*a3)(v8, (uint64_t)&v15) & 1) != 0);
      v14 = v15;
      v15 = 0;
      result = *v11;
      *v11 = v14;
      if (result)
      {
        WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref(result);
        result = v15;
        v15 = 0;
        if (result)
          return WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref(result);
      }
    }
  }
  return result;
}

void sub_1A3EDD840(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref(a10);
  _Unwind_Resume(exception_object);
}

void firstTopHitCandidate(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  int v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  float v16;
  void *v17;
  int v18;
  int v19;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  BOOL v25;
  void *v26;
  double v27;
  float v28;
  BOOL v29;
  unint64_t v30;
  void *v31;
  int v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  id v42;
  void *v44;
  BOOL v45;
  uint64_t v46;
  NSUInteger v47;
  NSUInteger v48;
  NSUInteger v49;
  NSUInteger v50;
  NSUInteger v51;
  NSRange v52;
  NSUInteger v53;
  NSUInteger v54;
  NSUInteger length;
  void *v56;
  void *v57;
  BOOL v58;
  void *v59;
  void *v60;
  char v61;
  char v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  char v68;
  uint64_t v69;
  id v70;
  unsigned int v71;
  void *v72;
  id v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  _BYTE v81[128];
  uint64_t v82;
  NSRange v83;
  NSRange v84;

  v82 = *MEMORY[0x1E0C80C00];
  v74 = a2;
  v5 = a3;
  v76 = *(unsigned int *)(a1 + 12);
  v70 = v5;
  v71 = objc_msgSend(v5, "strengthenAutocompleteTriggerExtensionMatching");
  if (objc_msgSend(MEMORY[0x1E0D89BE8], "isReflectUserIntentInSearchEnabled"))
  {
    objc_msgSend(v74, "normalizedString");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "length");
    if (v7 >= objc_msgSend(v70, "characterThresholdForStartOfTitleWordMatchLongEnoughForTopHit"))
    {
      objc_msgSend(v74, "normalizedString");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = !+[WBSURLCompletionDatabase doesStringLookLikeURLHost:](WBSURLCompletionDatabase, "doesStringLookLikeURLHost:", v9);

    }
    else
    {
      v8 = 0;
    }

    objc_msgSend(v74, "stringWithoutWhitespace");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v10, "length");
    objc_msgSend(v74, "normalizedString");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(v69) = v11 != objc_msgSend(v12, "length");

  }
  else
  {
    v8 = 0;
    LODWORD(v69) = 0;
  }
  if (!(_DWORD)v76)
  {
LABEL_76:

    return;
  }
  v75 = a1;
  v13 = 0;
  HIDWORD(v69) = v8 ^ 1;
  while (v13 < *(unsigned int *)(v75 + 12))
  {
    v14 = *(_QWORD *)(*(_QWORD *)v75 + 8 * v13);
    SafariShared::BookmarkAndHistoryCompletionMatch::data((id *)v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = *(float *)(v14 + 64);
    SafariShared::BookmarkAndHistoryCompletionMatch::data((id *)v14);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = objc_msgSend(v17, "lastVisitWasFailure");
    v19 = objc_msgSend(v17, "visitWasClientError") | v18;
    if (v19 != 1 || v16 < 5.0)
    {

      if (v19)
        goto LABEL_46;
    }
    else
    {
      v21 = (void *)MEMORY[0x1E0CB3998];
      SafariShared::BookmarkAndHistoryCompletionMatch::originalURLString((id *)v14);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "componentsWithString:", v22);
      v23 = (void *)objc_claimAutoreleasedReturnValue();

      if (v23)
      {
        objc_msgSend(v23, "host");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        v25 = +[WBSURLCompletionDatabase doesStringLookLikeURLHost:](WBSURLCompletionDatabase, "doesStringLookLikeURLHost:", v24);

        if (!v25)
        {

LABEL_46:
          logCompletionMatchToDebugChannel(CFSTR("Skipped for error in last visit"), (SafariShared::BookmarkAndHistoryCompletionMatch *)v14);
          goto LABEL_69;
        }
      }

      SafariShared::BookmarkAndHistoryCompletionMatch::lastVisitedDate((id *)v14);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v26, "timeIntervalSinceNow");
      if ((float)(10.0 - v16) <= 0.0)
        v28 = (float)((float)(10.0 - v16) / 5.0) * -21600.0;
      else
        v28 = -0.0;
      v29 = v27 >= v28;

      if (v29)
        goto LABEL_46;
    }
    v30 = *(_QWORD *)(v14 + 8);
    if (v30 - 9 > 1)
    {
      if (v30 > 8 || ((1 << v30) & 0x1C8) == 0)
        goto LABEL_68;
      SafariShared::BookmarkAndHistoryCompletionMatch::title((SafariShared::BookmarkAndHistoryCompletionMatch *)v14);
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      v45 = WBSUnifiedFieldInputTypeForString(v44) == 1;

      if (v45)
        goto LABEL_69;
    }
    else
    {
      v31 = (void *)v74[1];
      v32 = objc_msgSend(v70, "isForVoiceSearch");
      v73 = v31;
      SafariShared::BookmarkAndHistoryCompletionMatch::userVisibleURLString((SafariShared::BookmarkAndHistoryCompletionMatch *)v14);
      v72 = (void *)objc_claimAutoreleasedReturnValue();
      if ((v32 & 1) == 0 && objc_msgSend(v72, "rangeOfString:", v73) != 0x7FFFFFFFFFFFFFFFLL)
        goto LABEL_73;
      objc_msgSend(MEMORY[0x1E0CB3998], "componentsWithString:", v72, v69);
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      v34 = v33;
      if (!v33)
        goto LABEL_55;
      if (!v32)
      {
        v46 = objc_msgSend(v33, "rangeOfHost");
        v48 = v47;
        if (v47)
        {
          v49 = v46;
          v51 = objc_msgSend(v72, "rangeOfString:options:", v73, 1);
          if (v51 != 0x7FFFFFFFFFFFFFFFLL)
          {
            v84.length = v50;
            v83.location = v49;
            v83.length = v48;
            v84.location = v51;
            v52 = NSIntersectionRange(v83, v84);
            if (v52.length)
            {
              v53 = v52.location - v51;
              v54 = objc_msgSend(v73, "length") - v53;
              length = v52.length;
              if (v52.length >= v54)
                length = objc_msgSend(v73, "length") - v53;
              objc_msgSend(v73, "stringByReplacingCharactersInRange:withString:", v53, length, &stru_1E4B40D18);
              v56 = (void *)objc_claimAutoreleasedReturnValue();
              if (!objc_msgSend(v56, "length"))
              {

LABEL_73:
LABEL_74:

LABEL_75:
                goto LABEL_76;
              }
              objc_msgSend(v72, "stringByReplacingCharactersInRange:withString:", v52.location, v52.length, &stru_1E4B40D18);
              v57 = (void *)objc_claimAutoreleasedReturnValue();
              v58 = objc_msgSend(v57, "rangeOfString:", v56) == 0x7FFFFFFFFFFFFFFFLL;

              if (!v58)
                goto LABEL_75;
              goto LABEL_68;
            }
          }
        }
LABEL_55:

LABEL_67:
        goto LABEL_68;
      }
      objc_msgSend(v33, "host");
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v35, "safari_hostComponentsEnumerator");
      v36 = (void *)objc_claimAutoreleasedReturnValue();

      v79 = 0u;
      v80 = 0u;
      v77 = 0u;
      v78 = 0u;
      v37 = v36;
      v38 = objc_msgSend(v37, "countByEnumeratingWithState:objects:count:", &v77, v81, 16);
      if (v38)
      {
        v39 = *(_QWORD *)v78;
LABEL_30:
        v40 = 0;
        while (1)
        {
          if (*(_QWORD *)v78 != v39)
            objc_enumerationMutation(v37);
          v41 = *(void **)(*((_QWORD *)&v77 + 1) + 8 * v40);
          if ((objc_msgSend(v37, "isSpeculative") & 1) != 0 || (objc_msgSend(v37, "containsEmptyComponents") & 1) != 0)
            break;
          if (objc_msgSend(v37, "kind") != 3)
          {
            if (objc_msgSend(v37, "kind") == 4)
              v59 = v41;
            else
              v59 = 0;
            v42 = v59;
            goto LABEL_61;
          }
          if (v38 == ++v40)
          {
            v38 = objc_msgSend(v37, "countByEnumeratingWithState:objects:count:", &v77, v81, 16);
            v42 = 0;
            if (v38)
              goto LABEL_30;
            goto LABEL_61;
          }
        }
      }
      v42 = 0;
LABEL_61:

      objc_msgSend(v73, "stringByReplacingOccurrencesOfString:withString:", CFSTR(" "), &stru_1E4B40D18);
      v60 = (void *)objc_claimAutoreleasedReturnValue();
      v61 = objc_msgSend(v42, "safari_isCaseInsensitiveEqualToString:", v60);

      if ((v61 & 1) != 0)
        goto LABEL_75;
    }
    v62 = BYTE4(v69);
    if (v30 - 6 > 2)
      v62 = 1;
    if ((v62 & 1) == 0)
    {
      v63 = (void *)MEMORY[0x1E0C99E98];
      SafariShared::BookmarkAndHistoryCompletionMatch::originalURLString((id *)v14);
      v64 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v63, "URLWithString:", v64);
      v73 = (id)objc_claimAutoreleasedReturnValue();

      if ((_DWORD)v69)
      {
        objc_msgSend(v73, "host");
        v65 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v74, "stringWithoutWhitespace");
        v66 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v66, "lowercaseString");
        v67 = (void *)objc_claimAutoreleasedReturnValue();
        v68 = objc_msgSend(v65, "containsString:", v67);

        if ((v68 & 1) != 0)
          goto LABEL_74;
      }
      goto LABEL_67;
    }
LABEL_68:
    if (objc_msgSend(v15, "matchesAutocompleteTrigger:isStrengthened:", v74[1], v71, v69))
    {
      logCompletionMatchToDebugChannel(CFSTR("TopHitFromMatches was strengthened."), (SafariShared::BookmarkAndHistoryCompletionMatch *)v14);
      goto LABEL_75;
    }
LABEL_69:

    if (++v13 == v76)
      goto LABEL_76;
  }
  __break(0xC471u);
}

void sub_1A3EDDF58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<objc_object  {objcproto25WBSURLCompletionMatchData}* {__strong},0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,objc_object  {objcproto25WBSURLCompletionMatchData}&>(uint64_t a1, id *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
  if (v5 >= 0x10)
    v6 = v5 + 1;
  else
    v6 = 16;
  if (v6 <= v4 + 1)
    v7 = v4 + 1;
  else
    v7 = v6;
  WTF::Vector<NSString const* {__strong},0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, v7);
  v8 = *(unsigned int *)(a1 + 12);
  v9 = *(_QWORD *)a1;
  *(_QWORD *)(v9 + 8 * v8) = *a2;
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

uint64_t WTF::Vector<WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(uint64_t **)a1;
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
        WTF::RefCounted<SafariShared::BookmarkAndHistoryCompletionMatch>::deref(v6);
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

unsigned int *WTF::Vector<WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, unint64_t a2)
{
  unsigned int *v3;
  WTF *v4;
  uint64_t v5;

  if (result[2] > a2)
  {
    v3 = result;
    if (result[3] > a2)
      result = (unsigned int *)WTF::Vector<WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink((uint64_t)result, a2);
    v4 = *(WTF **)v3;
    if (a2)
    {
      if (v3[2])
      {
        if (!(a2 >> 61))
        {
          v3[2] = a2;
          result = (unsigned int *)WTF::fastRealloc(v4, (void *)(8 * a2));
          *(_QWORD *)v3 = result;
          return result;
        }
LABEL_16:
        __break(0xC471u);
        JUMPOUT(0x1A3EDE2A0);
      }
      if (a2 >> 29)
        goto LABEL_16;
      v5 = v3[3];
      result = (unsigned int *)WTF::fastMalloc((WTF *)(8 * a2));
      v3[2] = a2;
      *(_QWORD *)v3 = result;
      if (result != (unsigned int *)v4)
        result = (unsigned int *)memcpy(result, v4, 8 * v5);
    }
    if (v4)
    {
      if (*(WTF **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        v3[2] = 0;
      }
      return (unsigned int *)WTF::fastFree(v4, (void *)a2);
    }
  }
  return result;
}

void WTF::Vector<objc_object  {objcproto25WBSURLCompletionMatchData}* {__strong},0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  void **v5;
  uint64_t v6;
  void *v7;
  WTF *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void **v12;
  void *v13;
  void *v14;

  if (*(unsigned int *)(a1 + 8) > a2)
  {
    v4 = *(unsigned int *)(a1 + 12);
    if (v4 > a2)
    {
      v5 = (void **)(*(_QWORD *)a1 + 8 * a2);
      v6 = 8 * v4 - 8 * a2;
      do
      {
        v7 = *v5++;

        v6 -= 8;
      }
      while (v6);
      *(_DWORD *)(a1 + 12) = a2;
      LODWORD(v4) = a2;
    }
    v8 = *(WTF **)a1;
    if (a2)
    {
      if (a2 >> 29)
      {
        __break(0xC471u);
        return;
      }
      v9 = WTF::fastMalloc((WTF *)(8 * a2));
      *(_DWORD *)(a1 + 8) = a2;
      *(_QWORD *)a1 = v9;
      if ((WTF *)v9 != v8 && (_DWORD)v4)
      {
        v10 = (_QWORD *)v9;
        v11 = 8 * v4;
        v12 = (void **)v8;
        do
        {
          v13 = *v12;
          *v12 = 0;
          *v10++ = v13;
          v14 = *v12++;

          v11 -= 8;
        }
        while (v11);
      }
    }
    if (v8)
    {
      if (*(WTF **)a1 == v8)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v8, (void *)a2);
    }
  }
}

uint64_t WTF::Vector<WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>> const&>(uint64_t a1, unint64_t a2)
{
  _DWORD **v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;

  v3 = (_DWORD **)WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  v6 = *v3;
  if (*v3)
    ++*v6;
  *(_QWORD *)(v5 + 8 * v4) = v6;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return 1;
}

uint64_t WTF::Vector<WTF::RefPtr<SafariShared::BookmarkAndHistoryCompletionMatch,WTF::RawPtrTraits<SafariShared::BookmarkAndHistoryCompletionMatch>,WTF::DefaultRefDerefTraits<SafariShared::BookmarkAndHistoryCompletionMatch>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,SafariShared::BookmarkAndHistoryCompletionMatch*&>(uint64_t a1, _DWORD **a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;

  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
  if (v5 >= 0x10)
    v6 = v5 + 1;
  else
    v6 = 16;
  if (v6 <= v4 + 1)
    v7 = v4 + 1;
  else
    v7 = v6;
  WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, v7);
  v8 = *(unsigned int *)(a1 + 12);
  v9 = *(_QWORD *)a1;
  v10 = *a2;
  if (*a2)
    ++*v10;
  *(_QWORD *)(v9 + 8 * v8) = v10;
  *(_DWORD *)(a1 + 12) = v8 + 1;
  return 1;
}

void sub_1A3EDE55C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3EDE6FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3EDE974(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A3EDEA44(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    WTF::ThreadSafeRefCounted<SafariShared::HistoryURLCompletionItem,(WTF::DestructionThread)0>::deref(v1);
  _Unwind_Resume(exception_object);
}

void SafariShared::HistoryURLCompletionItem::create(SafariShared::HistoryURLCompletionItem *this@<X0>, NSString *a2@<X1>, NSString *a3@<X2>, SafariShared::HistoryURLCompletionItem **a4@<X8>)
{
  char v4;
  NSString *v7;
  SafariShared::HistoryURLCompletionItem *v8;
  SafariShared::HistoryURLCompletionItem *v9;

  v4 = (char)a3;
  v9 = this;
  v7 = a2;
  v8 = (SafariShared::HistoryURLCompletionItem *)WTF::fastMalloc((WTF *)0xA8);
  SafariShared::HistoryURLCompletionItem::HistoryURLCompletionItem(v8, (NSString *)v9, v7, v4);
  *a4 = v8;

}

void sub_1A3EDEAC8(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  WTF *v11;

  WTF::fastFree(v11, a2);

  _Unwind_Resume(a1);
}

SafariShared::HistoryURLCompletionItem *SafariShared::HistoryURLCompletionItem::HistoryURLCompletionItem(SafariShared::HistoryURLCompletionItem *this, NSString *a2, NSString *a3, char a4)
{
  NSString *v7;
  NSString *v8;
  uint64_t v9;

  v7 = a2;
  v8 = a3;
  *(_DWORD *)this = 1;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = -[NSString copy](v7, "copy");
  *((_QWORD *)this + 9) = -[NSString copy](v8, "copy");
  objc_msgSend(MEMORY[0x1E0C99D68], "timeIntervalSinceReferenceDate");
  *((_QWORD *)this + 10) = v9;
  *((_DWORD *)this + 22) = 1;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 100;
  *((_WORD *)this + 80) = 0;
  *((_BYTE *)this + 162) = a4;
  *((_BYTE *)this + 163) = 0;

  return this;
}

void sub_1A3EDEBF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  void *v10;
  void **v11;
  void *v12;

  a10 = v11 + 4;
  std::vector<WTF::RefPtr<SafariShared::HistoryURLCompletionItem,WTF::RawPtrTraits<SafariShared::HistoryURLCompletionItem>,WTF::DefaultRefDerefTraits<SafariShared::HistoryURLCompletionItem>>>::__destroy_vector::operator()[abi:sn180100](&a10);

  _Unwind_Resume(a1);
}

void ***std::unique_ptr<std::vector<WTF::RefPtr<SafariShared::HistoryURLCompletionItem,WTF::RawPtrTraits<SafariShared::HistoryURLCompletionItem>,WTF::DefaultRefDerefTraits<SafariShared::HistoryURLCompletionItem>>>>::reset[abi:sn180100](void ***result, void **a2)
{
  void **v2;
  void **v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = v2;
    std::vector<WTF::RefPtr<SafariShared::HistoryURLCompletionItem,WTF::RawPtrTraits<SafariShared::HistoryURLCompletionItem>,WTF::DefaultRefDerefTraits<SafariShared::HistoryURLCompletionItem>>>::__destroy_vector::operator()[abi:sn180100](&v3);
    return (void ***)MEMORY[0x1A85998AC](v2, 0x20C40960023A9);
  }
  return result;
}

void sub_1A3EDED38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3EDEE08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3EDEEE4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3EDF024(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3EDF25C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3EDF474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3EDF6FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

uint64_t typedStringMatchesTitleOrURLWithAutocompleteTrigger(NSString *a1, NSString *a2, NSString *a3, NSString *a4, const __CFCharacterSet *a5)
{
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  __CFString *v13;
  uint64_t v14;
  uint64_t i;
  __CFString *v16;
  int v17;
  uint64_t v18;
  UniChar CharacterAtIndex;
  UniChar v20;
  CFIndex Length;
  NSString *v22;
  void *v23;
  int v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  const __CFString *v30;
  id v31;
  unsigned int v32;
  NSString *v33;
  char v34;
  NSString *v35;
  char v36;
  uint64_t v37;
  NSString *v39;
  NSString *v40;
  id obj;
  uint64_t v42;
  uint64_t v43;
  __CFString *theString;
  __CFString *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _QWORD v51[2];
  _BYTE v52[128];
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  theString = a1;
  v39 = a2;
  v40 = a3;
  v46 = a4;
  objc_msgSend(MEMORY[0x1E0CB3500], "whitespaceCharacterSet");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[__CFString componentsSeparatedByCharactersInSet:](v46, "componentsSeparatedByCharactersInSet:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3880], "predicateWithFormat:", CFSTR("SELF != ''"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "filteredArrayUsingPredicate:", v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  v49 = 0u;
  v50 = 0u;
  v47 = 0u;
  v48 = 0u;
  v51[0] = v39;
  v51[1] = v40;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v51, 2);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = v46;
  v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v47, v52, 16);
  if (!v14)
  {
    v37 = 0;
    goto LABEL_25;
  }
  obj = v12;
  v42 = *(_QWORD *)v48;
  while (2)
  {
    v43 = v14;
    for (i = 0; i != v43; ++i)
    {
      if (*(_QWORD *)v48 != v42)
        objc_enumerationMutation(obj);
      v16 = (__CFString *)*(id *)(*((_QWORD *)&v47 + 1) + 8 * i);
      v17 = -[__CFString length](v13, "length");
      v18 = v17;
      CharacterAtIndex = CFStringGetCharacterAtIndex(theString, v17);
      if (CFCharacterSetIsCharacterMember(a5, CharacterAtIndex)
        || (v20 = CFStringGetCharacterAtIndex(v46, -[__CFString length](v46, "length") - 1),
            CFCharacterSetIsCharacterMember(a5, v20)))
      {
        Length = CFStringGetLength(v16);
        objc_msgSend(v11, "objectAtIndexedSubscript:", objc_msgSend(v11, "count") - 1);
        v22 = (NSString *)objc_claimAutoreleasedReturnValue();
        LOBYTE(Length) = isPrefixOrFullWordMatchInHaystack(v16, (const __CFString *)Length, v22, 1);

        if ((Length & 1) == 0)
          goto LABEL_18;
      }
      else
      {
        objc_msgSend(v11, "objectAtIndexedSubscript:", objc_msgSend(v11, "count") - 1);
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        v24 = objc_msgSend(v23, "length");

        v18 = v17 - v24;
      }
      -[__CFString substringFromIndex:](theString, "substringFromIndex:", v18, v39);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3500], "whitespaceCharacterSet");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v25, "componentsSeparatedByCharactersInSet:", v26);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3880], "predicateWithFormat:", CFSTR("SELF != ''"));
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v27, "filteredArrayUsingPredicate:", v28);
      v29 = (void *)objc_claimAutoreleasedReturnValue();

      v30 = (const __CFString *)CFStringGetLength(v16);
      v31 = v29;
      if (!objc_msgSend(v31, "count"))
      {

LABEL_22:
        v37 = 1;
        goto LABEL_23;
      }
      v32 = 0;
      while (objc_msgSend(v31, "count") - 1 > (unint64_t)v32)
      {
        objc_msgSend(v31, "objectAtIndexedSubscript:", v32);
        v33 = (NSString *)objc_claimAutoreleasedReturnValue();
        v34 = isPrefixOrFullWordMatchInHaystack(v16, v30, v33, 1);

        ++v32;
        if ((v34 & 1) == 0)
        {

          goto LABEL_17;
        }
      }
      objc_msgSend(v31, "objectAtIndexedSubscript:", objc_msgSend(v31, "count") - 1);
      v35 = (NSString *)objc_claimAutoreleasedReturnValue();
      v36 = isPrefixOrFullWordMatchInHaystack(v16, v30, v35, 0);

      if ((v36 & 1) != 0)
        goto LABEL_22;
LABEL_17:

LABEL_18:
      v13 = v46;
    }
    v14 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v47, v52, 16);
    if (v14)
      continue;
    break;
  }
  v37 = 0;
LABEL_23:
  v12 = obj;
LABEL_25:

  return v37;
}

void sub_1A3EDFB84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  void *v16;

  _Unwind_Resume(a1);
}

uint64_t isPrefixOrFullWordMatchInHaystack(const __CFString *a1, const __CFString *a2, NSString *a3, int a4)
{
  NSString *v7;
  SafariShared *v8;
  int v9;
  WBSURLCompletionUserTypedString *v10;
  uint64_t v12;

  v7 = a3;
  LODWORD(v8) = 0;
  v9 = 0;
  while (1)
  {
    v10 = -[WBSURLCompletionUserTypedString initWithString:]([WBSURLCompletionUserTypedString alloc], "initWithString:", v7);
    v8 = (SafariShared *)SafariShared::caseInsensitiveFindInUserTypedString(a1, a2, (uint64_t)v10, (WBSURLCompletionUserTypedString *)(v9 + (int)v8));

    if ((_DWORD)v8 != -1
      && SafariShared::offsetAppearsToBeAtStartOrEndOfWord(v8, a1, 0)
      && (!a4
       || SafariShared::offsetAppearsToBeAtStartOrEndOfWord((SafariShared *)(v8 + -[NSString length](v7, "length")), a1, (const __CFString *)1)))
    {
      break;
    }
    v9 = -[NSString length](v7, "length");
    if ((_DWORD)v8 == -1 || (int)v8 > (int)a2 - v9)
    {
      v12 = 0;
      goto LABEL_12;
    }
  }
  v12 = 1;
LABEL_12:

  return v12;
}

void sub_1A3EDFD80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3EE0534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A3EE073C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _SSURLCompletionMatchLocationForWBSURLCompletionMatchLocation(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 9)
    return 0;
  else
    return qword_1A3F6A298[a1 - 1];
}

void sub_1A3EE0C10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3EE0C98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3EE0DFC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3EE0E88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3EE0F2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3EE1040(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3EE1978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1A3EE2EC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3EE2F78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3EE306C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3EE3370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{

  _Unwind_Resume(a1);
}

void sub_1A3EE3410(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3EE38CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16)
{
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1A3EE39B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1A3EE3A58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3EE3C54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3EE3F2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3EE4068(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3EE4128(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_1A3EE41F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3EE42C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3EE4474(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3EE4628(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3EE476C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3EE4950(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3EE4B00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1A3EE4CB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

id SafariShared::WBSSQLiteDatabaseFetch<int,NSString * {__strong}&>(void *a1, void *a2, unsigned int *a3, _QWORD *a4)
{
  id v7;
  id v8;
  void *v9;
  void *v10;

  v7 = a1;
  v8 = a2;
  v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89CC8]), "initWithDatabase:query:", v7, v8);
  SafariShared::_WBSSQLiteStatementBindAllParameters<1,int,NSString * {__strong}&>(v9, a3, a4);
  objc_msgSend(v9, "fetch");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

void sub_1A3EE4D98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3EE4E00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3EE4EF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

id SafariShared::WBSSQLiteDatabaseFetch<int>(void *a1, void *a2, unsigned int *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;

  v5 = a1;
  v6 = a2;
  v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89CC8]), "initWithDatabase:query:", v5, v6);
  objc_msgSend(v7, "bindInt:atParameterIndex:", *a3, 1);
  objc_msgSend(v7, "fetch");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

void sub_1A3EE4FBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3EE507C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3EE5244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

id SafariShared::WBSSQLiteDatabaseFetch<NSString * {__strong}&,NSString * {__strong}&>(void *a1, void *a2, _QWORD *a3, _QWORD *a4)
{
  id v7;
  id v8;
  void *v9;
  void *v10;

  v7 = a1;
  v8 = a2;
  v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89CC8]), "initWithDatabase:query:", v7, v8);
  SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * {__strong}&,NSString * {__strong}&>(v9, a3, a4);
  objc_msgSend(v9, "fetch");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

void sub_1A3EE535C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3EE5480(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3EE57D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id SafariShared::WBSSQLiteDatabaseFetch<NSString * {__strong},NSString * {__strong},int,int const&,NSData * {__strong}>(void *a1, void *a2, _QWORD *a3, _QWORD *a4, unsigned int *a5, unsigned int *a6, _QWORD *a7)
{
  id v13;
  id v14;
  void *v15;
  void *v16;

  v13 = a1;
  v14 = a2;
  v15 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89CC8]), "initWithDatabase:query:", v13, v14);
  SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * {__strong},NSString * {__strong},int,int const&,NSData * {__strong}>(v15, a3, a4, a5, a6, a7);
  objc_msgSend(v15, "fetch");
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  return v16;
}

void sub_1A3EE5948(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3EE5AE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A3EE5CCC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3EE5E80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3EE5F8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3EE61D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

id SafariShared::WBSSQLiteDatabaseFetch<NSString * {__strong},NSString * {__strong},NSData * {__strong}&,int const&>(void *a1, void *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, unsigned int *a6)
{
  id v11;
  id v12;
  void *v13;
  void *v14;

  v11 = a1;
  v12 = a2;
  v13 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89CC8]), "initWithDatabase:query:", v11, v12);
  SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * {__strong},NSString * {__strong},NSData * {__strong}&,int const&>(v13, a3, a4, a5, a6);
  objc_msgSend(v13, "fetch");
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  return v14;
}

void sub_1A3EE6308(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3EE63C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1A3EE663C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3EE67D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3EE689C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,WBSUserDefinedContentBlockerType &,NSString * {__strong}&,BOOL &,int const&>(void *a1, _QWORD *a2, _QWORD *a3, unsigned __int8 *a4, unsigned int *a5)
{
  id v9;

  v9 = a1;
  objc_msgSend(v9, "bindInt64:atParameterIndex:", *a2, 1);
  SafariShared::_WBSSQLiteStatementBindAllParameters<2,NSString * {__strong}&,BOOL &,int const&>(v9, a3, a4, a5);

}

void sub_1A3EE695C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<2,NSString * {__strong}&,BOOL &,int const&>(void *a1, _QWORD *a2, unsigned __int8 *a3, unsigned int *a4)
{
  id v7;

  v7 = a1;
  objc_msgSend(v7, "bindString:atParameterIndex:", *a2, 2);
  SafariShared::_WBSSQLiteStatementBindAllParameters<3,BOOL &,int const&>(v7, a3, a4);

}

void sub_1A3EE69CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<3,BOOL &,int const&>(void *a1, unsigned __int8 *a2, unsigned int *a3)
{
  id v5;

  v5 = a1;
  objc_msgSend(v5, "bindInt:atParameterIndex:", *a2, 3);
  objc_msgSend(v5, "bindInt:atParameterIndex:", *a3, 4);

}

void sub_1A3EE6A30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,int,NSString * {__strong}&>(void *a1, unsigned int *a2, _QWORD *a3)
{
  id v5;

  v5 = a1;
  objc_msgSend(v5, "bindInt:atParameterIndex:", *a2, 1);
  objc_msgSend(v5, "bindString:atParameterIndex:", *a3, 2);

}

void sub_1A3EE6A94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * {__strong},NSString * {__strong},int,int const&,NSData * {__strong}>(void *a1, _QWORD *a2, _QWORD *a3, unsigned int *a4, unsigned int *a5, _QWORD *a6)
{
  id v11;

  v11 = a1;
  objc_msgSend(v11, "bindString:atParameterIndex:", *a2, 1);
  SafariShared::_WBSSQLiteStatementBindAllParameters<2,NSString * {__strong},int,int const&,NSData * {__strong}>(v11, a3, a4, a5, a6);

}

void sub_1A3EE6B1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<2,NSString * {__strong},int,int const&,NSData * {__strong}>(void *a1, _QWORD *a2, unsigned int *a3, unsigned int *a4, _QWORD *a5)
{
  id v9;

  v9 = a1;
  objc_msgSend(v9, "bindString:atParameterIndex:", *a2, 2);
  SafariShared::_WBSSQLiteStatementBindAllParameters<3,int,int const&,NSData * {__strong}>(v9, a3, a4, a5);

}

void sub_1A3EE6B94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<3,int,int const&,NSData * {__strong}>(void *a1, unsigned int *a2, unsigned int *a3, _QWORD *a4)
{
  id v7;

  v7 = a1;
  objc_msgSend(v7, "bindInt:atParameterIndex:", *a2, 3);
  SafariShared::_WBSSQLiteStatementBindAllParameters<4,int const&,NSData * {__strong}>(v7, a3, a4);

}

void sub_1A3EE6C04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<4,int const&,NSData * {__strong}>(void *a1, unsigned int *a2, _QWORD *a3)
{
  id v5;

  v5 = a1;
  objc_msgSend(v5, "bindInt:atParameterIndex:", *a2, 4);
  objc_msgSend(v5, "bindData:atParameterIndex:", *a3, 5);

}

void sub_1A3EE6C68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,NSString * {__strong},NSString * {__strong},NSData * {__strong}&,int const&>(void *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, unsigned int *a5)
{
  id v9;

  v9 = a1;
  objc_msgSend(v9, "bindString:atParameterIndex:", *a2, 1);
  SafariShared::_WBSSQLiteStatementBindAllParameters<2,NSString * {__strong},NSData * {__strong}&,int const&>(v9, a3, a4, a5);

}

void sub_1A3EE6CE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<2,NSString * {__strong},NSData * {__strong}&,int const&>(void *a1, _QWORD *a2, _QWORD *a3, unsigned int *a4)
{
  id v7;

  v7 = a1;
  objc_msgSend(v7, "bindString:atParameterIndex:", *a2, 2);
  SafariShared::_WBSSQLiteStatementBindAllParameters<3,NSData * {__strong}&,int const&>(v7, a3, a4);

}

void sub_1A3EE6D50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<3,NSData * {__strong}&,int const&>(void *a1, _QWORD *a2, unsigned int *a3)
{
  id v5;

  v5 = a1;
  objc_msgSend(v5, "bindData:atParameterIndex:", *a2, 3);
  objc_msgSend(v5, "bindInt:atParameterIndex:", *a3, 4);

}

void sub_1A3EE6DB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t SafariShared::_WBSSQLiteDatabaseExecuteAndReturnError<long &,long &>(void *a1, _QWORD *a2, void *a3, _QWORD *a4, _QWORD *a5)
{
  id v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  id v17;

  v9 = a1;
  v10 = a3;
  v17 = 0;
  v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D89CC8]), "initWithDatabase:query:error:", v9, v10, &v17);
  v12 = v17;
  v13 = v12;
  if (v11)
  {
    SafariShared::_WBSSQLiteStatementBindAllParameters<1,long &,long &>(v11, a4, a5);
    v14 = objc_msgSend(v11, "execute");
    objc_msgSend(v11, "invalidate");
    if ((v14 - 100) >= 2 && (_DWORD)v14 != 0)
      objc_msgSend(v9, "reportErrorWithCode:statement:error:", v14, objc_msgSend(v11, "handle"), a2);
  }
  else
  {
    if (a2)
      *a2 = objc_retainAutorelease(v12);
    v14 = objc_msgSend(v13, "code");
  }

  return v14;
}

void sub_1A3EE6ED8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void SafariShared::_WBSSQLiteStatementBindAllParameters<1,long &,long &>(void *a1, _QWORD *a2, _QWORD *a3)
{
  id v5;

  v5 = a1;
  objc_msgSend(v5, "bindInt64:atParameterIndex:", *a2, 1);
  objc_msgSend(v5, "bindInt64:atParameterIndex:", *a3, 2);

}

void sub_1A3EE6F50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3EE7034(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3EE7238(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1A3EE73C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3EE787C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A3EE7950(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3EE7BBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1A3EE7C54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3EE7D3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8, uint64_t a9, ...)
{
  void *v9;
  void *v10;
  va_list va;

  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A3EE7E9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  void *v22;
  void *v23;

  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_1A3EE8008(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3EE80DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3EE81B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

id originHash(NSString *a1, NSString *a2)
{
  NSString *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v3 = a2;
  -[NSString dataUsingEncoding:](a1, "dataUsingEncoding:", 4);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "safari_SHA1Hash");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  -[NSString dataUsingEncoding:](v3, "dataUsingEncoding:", 4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "safari_dataByAppendingData:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "safari_SHA1Hash");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0CB3940], "safari_stringByBase64EncodingData:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  return v9;
}

void sub_1A3EE82A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A3EE8338(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3EE8424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1A3EE855C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1A3EE86E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1A3EE88BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3EE8AC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3EE8BAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1A3EE8D50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23)
{
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void sub_1A3EE8E28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1A3EE8ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1A3EE8F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_1A3EE904C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{

  _Unwind_Resume(a1);
}

void sub_1A3EE9124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1A3EE92E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  void *v20;
  void *v21;

  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

void sub_1A3EE941C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1A3EE9510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1A3EE95B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1A3EE9780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  void *v14;
  id *v15;
  uint64_t v16;

  objc_destroyWeak(v15);
  objc_destroyWeak((id *)(v16 - 72));

  _Unwind_Resume(a1);
}

void sub_1A3EE9830(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A3EE9938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, void *a17)
{
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1A3EE9A7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A3EE9BF0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3EE9CF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_1A3EE9F74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1A3EEA084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1A3EEA21C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_1A3EEA2AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3EEA510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, ...)
{
  void *v8;
  uint64_t v9;
  va_list va;

  va_start(va, a8);

  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);

  _Unwind_Resume(a1);
}

void sub_1A3EEA5AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3EEA61C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1A3EEA674(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3EEA72C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1A3EEA7FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1A3EEAA50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A3EEAB88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1A3EEAF0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{

  _Unwind_Resume(a1);
}

void sub_1A3EEB06C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3EEB0F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A3EEB1A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1A3EEB384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1A3EEB634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, id location)
{
  void *v15;
  void *v16;
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_1A3EEB704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void SafariShared::computeURLMatchLocation(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl(&dword_1A3D90000, log, OS_LOG_TYPE_ERROR, "Nil urlString passed to computeURLMatchLocation()", v1, 2u);
}

void SafariShared::computeURLMatchLocation(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;
  __int16 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v2 = 141558275;
  v3 = 1752392040;
  v4 = 2117;
  v5 = a1;
  _os_log_error_impl(&dword_1A3D90000, a2, OS_LOG_TYPE_ERROR, "Encountered a malformed URL without a valid scheme: %{sensitive, mask.hash}@. How did that get in here?", (uint8_t *)&v2, 0x16u);
}

void WBSReportAutoplaySignalIfNecessary_cold_1(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v2 = 138477827;
  v3 = a1;
  _os_log_debug_impl(&dword_1A3D90000, a2, OS_LOG_TYPE_DEBUG, "Discarding auto-play signal for quick navigation on domain: %{private}@", (uint8_t *)&v2, 0xCu);
  OUTLINED_FUNCTION_2();
}

void ___ZL27sendAutoplaySignalForDomain17WBSAutoplaySignalP8NSStringb_block_invoke_2_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_3(&dword_1A3D90000, v0, v1, "Recording auto-play signal: %lu for domain: %{private}@", v2);
  OUTLINED_FUNCTION_2();
}

void ___ZL27sendAutoplaySignalForDomain17WBSAutoplaySignalP8NSStringb_block_invoke_2_cold_2()
{
  NSObject *v0;
  uint8_t v1[24];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_3(&dword_1A3D90000, v0, (uint64_t)v0, "Discarding auto-play signal %lu from %{private}@ after checking feedback allowlist", v1);
  OUTLINED_FUNCTION_2();
}

void ___ZL27sendAutoplaySignalForDomain17WBSAutoplaySignalP8NSStringb_block_invoke_2_cold_3(uint64_t a1, uint64_t a2, NSObject *a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a2 + 48);
  v4 = 138478083;
  v5 = a1;
  v6 = 2048;
  v7 = v3;
  OUTLINED_FUNCTION_1_3(&dword_1A3D90000, a3, (uint64_t)a3, "Checking if the high-level domain '%{private}@' is on the feedback allowlist before recording auto-play signal %lu", (uint8_t *)&v4);
  OUTLINED_FUNCTION_2();
}

void ___ZL57sendDifferentialPrivacySignalForNormalizedHighLevelDomain17WBSAutoplaySignalP8NSStringb_block_invoke_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_3(&dword_1A3D90000, v0, v1, "Recording auto-play signal: %{public}@ for high-level domain: %{private}@", v2);
  OUTLINED_FUNCTION_2();
}

void ___ZL57sendDifferentialPrivacySignalForNormalizedHighLevelDomain17WBSAutoplaySignalP8NSStringb_block_invoke_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_3(&dword_1A3D90000, v0, v1, "Discarding auto-play signal %{public}@ from %{private}@ after checking feedback allowlist", v2);
  OUTLINED_FUNCTION_2();
}

void __getSADeviceInfoClass_block_invoke_cold_1(_QWORD *a1)
{
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *SearchAssetsLibrary(void)");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WBSBiomeDonationManager.m"), 52, CFSTR("%s"), *a1);

  __break(1u);
}

void __getSADeviceInfoClass_block_invoke_cold_2()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getSADeviceInfoClass(void)_block_invoke");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("WBSBiomeDonationManager.m"), 53, CFSTR("Unable to find class %s"), "SADeviceInfo");

  __break(1u);
}

void __getSAAssetManagerFactoryClass_block_invoke_cold_1(_QWORD *a1)
{
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *SearchAssetsLibrary(void)");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WBSBrowsingAssistantContentProvider.m"), 28, CFSTR("%s"), *a1);

  __break(1u);
}

void __getSAAssetManagerFactoryClass_block_invoke_cold_2()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getSAAssetManagerFactoryClass(void)_block_invoke");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("WBSBrowsingAssistantContentProvider.m"), 29, CFSTR("Unable to find class %s"), "SAAssetManagerFactory");

  __break(1u);
}

void ___ZL29allProfileDatabaseIdentifiersv_block_invoke_cold_1(void *a1, uint64_t a2, NSObject *a3)
{
  *(_DWORD *)a2 = 138543362;
  *(_QWORD *)(a2 + 4) = a1;
  OUTLINED_FUNCTION_0(&dword_1A3D90000, a3, (uint64_t)a3, "Failed to look up existing profile content blocker stores: %{public}@", (uint8_t *)a2);

  OUTLINED_FUNCTION_2_0();
}

void __getOSLogStoreClass_block_invoke_cold_1(_QWORD *a1)
{
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *OSLogLibrary(void)");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WBSCyclerService.m"), 25, CFSTR("%s"), *a1);

  __break(1u);
}

void __getOSLogStoreClass_block_invoke_cold_2()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getOSLogStoreClass(void)_block_invoke");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("WBSCyclerService.m"), 26, CFSTR("Unable to find class %s"), "OSLogStore");

  __break(1u);
}

void fillDateUsingClassification(uint8_t *a1, _BYTE *a2, NSObject *a3)
{
  *a1 = 0;
  *a2 = 0;
  OUTLINED_FUNCTION_0_6(&dword_1A3D90000, a3, (uint64_t)a3, "Control has mutliple parts, but no formatting. Skipping.", a1);
}

void SafariShared::ReadStreamedObjects(int *a1, uint64_t a2, NSObject *a3)
{
  int v3;

  v3 = *a1;
  *(_DWORD *)a2 = 67109120;
  *(_DWORD *)(a2 + 4) = v3;
  OUTLINED_FUNCTION_1_2(&dword_1A3D90000, a2, a3, "Failed to allocate buffer: %{errno}i", (uint8_t *)a2);
}

void SafariShared::URLCompletionEntryBuilder::validateVisitedCountsIfNeeded(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_3_3(&dword_1A3D90000, a1, a3, "Found data corruption in weekly visit counts", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_5();
}

{
  OUTLINED_FUNCTION_3_3(&dword_1A3D90000, a1, a3, "Found data corruption in daily visit counts", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_5();
}

void byteArrayToInteger(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_3_3(&dword_1A3D90000, a1, a3, "Requested integer from byte array of length > 4 (overflow)", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_5();
}

uint64_t SafariShared::ReaderAvailabilityController::~ReaderAvailabilityController(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  *a1 = 0;
  if (v3)
    std::default_delete<SafariShared::ReaderAvailabilityController::AvailabilityDetectionScheduler>::operator()[abi:sn180100]((uint64_t)a1, v3);

  result = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void SafariShared::ReaderAvailabilityController::doesPageUseSearchEngineOptimizationMetadata()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2_3();
  OUTLINED_FUNCTION_3_3(&dword_1A3D90000, v0, v1, "Error: could not initialize m_originalArticleFinderJSController", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_5();
}

void SafariShared::ReaderAvailabilityController::checkTextSampleAvailabilityIfNeeded()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2_3();
  OUTLINED_FUNCTION_5_0(&dword_1A3D90000, v0, v1, "Translation could not find any text samples. Retrying", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_5();
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2_3();
  OUTLINED_FUNCTION_5_0(&dword_1A3D90000, v0, v1, "Could not inject article finder on page", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_5();
}

void SafariShared::ReaderAvailabilityController::checkAvailabilityIfNeeded(uint8_t *buf, uint64_t a2, os_log_t log)
{
  *(_DWORD *)buf = 134217984;
  *(_QWORD *)(buf + 4) = a2;
  _os_log_debug_impl(&dword_1A3D90000, log, OS_LOG_TYPE_DEBUG, "Reader found %lu text samples for translation", buf, 0xCu);
}

void SafariShared::ReaderJSController::evaluateLocalizedStringsScript(void *a1, uint8_t *buf, os_log_t log)
{
  *(_DWORD *)buf = 138543362;
  *(_QWORD *)(buf + 4) = a1;
  _os_log_error_impl(&dword_1A3D90000, log, OS_LOG_TYPE_ERROR, "Cannot read WBSLocalizedStrings.js with error: %{public}@", buf, 0xCu);

}

void SafariShared::jsLog(void *a1, uint8_t *buf, os_log_t log)
{
  *(_DWORD *)buf = 138412290;
  *(_QWORD *)(buf + 4) = a1;
  _os_log_debug_impl(&dword_1A3D90000, log, OS_LOG_TYPE_DEBUG, "%@", buf, 0xCu);

}

void WBSReloadReadingListWidget_cold_1(void *a1, void *a2)
{
  NSObject *v3;
  void *v4;
  int v5;
  void *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  objc_msgSend(a2, "safari_privacyPreservingDescription");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = 138543362;
  v6 = v4;
  _os_log_error_impl(&dword_1A3D90000, v3, OS_LOG_TYPE_ERROR, "Failed to reload Reading List widget: %{public}@", (uint8_t *)&v5, 0xCu);

}

void __getCHSTimelineControllerClass_block_invoke_cold_1(_QWORD *a1)
{
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *ChronoServicesLibrary(void)");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("WBSReadingListWidgetUtilities.m"), 14, CFSTR("%s"), *a1);

  __break(1u);
}

void __getCHSTimelineControllerClass_block_invoke_cold_2()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getCHSTimelineControllerClass(void)_block_invoke");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("WBSReadingListWidgetUtilities.m"), 15, CFSTR("Unable to find class %s"), "CHSTimelineController");

  __break(1u);
}

void logCompletionMatchToDebugChannel(uint64_t a1, void *a2, uint64_t a3, NSObject *a4)
{
  *(_DWORD *)a3 = 138412546;
  *(_QWORD *)(a3 + 4) = a1;
  *(_WORD *)(a3 + 12) = 2114;
  *(_QWORD *)(a3 + 14) = a2;
  OUTLINED_FUNCTION_7_0(&dword_1A3D90000, "%@: [%{public}@]", (uint8_t *)a3, a4);

}

{
  *(_DWORD *)a3 = 138412547;
  *(_QWORD *)(a3 + 4) = a1;
  *(_WORD *)(a3 + 12) = 2117;
  *(_QWORD *)(a3 + 14) = a2;
  OUTLINED_FUNCTION_7_0(&dword_1A3D90000, "%@: \"%{sensitive}@\"", (uint8_t *)a3, a4);

}

uint64_t BiomeLibrary()
{
  return MEMORY[0x1E0D01E18]();
}

CCCryptorStatus CCCrypt(CCOperation op, CCAlgorithm alg, CCOptions options, const void *key, size_t keyLength, const void *iv, const void *dataIn, size_t dataInLength, void *dataOut, size_t dataOutAvailable, size_t *dataOutMoved)
{
  return MEMORY[0x1E0C80088](*(_QWORD *)&op, *(_QWORD *)&alg, *(_QWORD *)&options, key, keyLength, iv, dataIn, dataInLength);
}

void CCHmac(CCHmacAlgorithm algorithm, const void *key, size_t keyLength, const void *data, size_t dataLength, void *macOut)
{
  MEMORY[0x1E0C801D8](*(_QWORD *)&algorithm, key, keyLength, data, dataLength, macOut);
}

void CCHmacFinal(CCHmacContext *ctx, void *macOut)
{
  MEMORY[0x1E0C801F8](ctx, macOut);
}

void CCHmacInit(CCHmacContext *ctx, CCHmacAlgorithm algorithm, const void *key, size_t keyLength)
{
  MEMORY[0x1E0C80200](ctx, *(_QWORD *)&algorithm, key, keyLength);
}

void CCHmacUpdate(CCHmacContext *ctx, const void *data, size_t dataLength)
{
  MEMORY[0x1E0C80218](ctx, data, dataLength);
}

unsigned __int8 *__cdecl CC_MD5(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x1E0C80308](data, *(_QWORD *)&len, md);
}

unsigned __int8 *__cdecl CC_SHA256(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x1E0C80368](data, *(_QWORD *)&len, md);
}

int CC_SHA512_Final(unsigned __int8 *md, CC_SHA512_CTX *c)
{
  return MEMORY[0x1E0C803B0](md, c);
}

int CC_SHA512_Init(CC_SHA512_CTX *c)
{
  return MEMORY[0x1E0C803B8](c);
}

int CC_SHA512_Update(CC_SHA512_CTX *c, const void *data, CC_LONG len)
{
  return MEMORY[0x1E0C803C0](c, data, *(_QWORD *)&len);
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  CFAbsoluteTime result;

  MEMORY[0x1E0C97C58]();
  return result;
}

CFMutableArrayRef CFArrayCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFArrayRef theArray)
{
  return (CFMutableArrayRef)MEMORY[0x1E0C97D50](allocator, capacity, theArray);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1E0C97D60](theArray);
}

void CFArrayRemoveValueAtIndex(CFMutableArrayRef theArray, CFIndex idx)
{
  MEMORY[0x1E0C97DC0](theArray, idx);
}

CFURLRef CFBundleCopyBundleURL(CFBundleRef bundle)
{
  return (CFURLRef)MEMORY[0x1E0C98000](bundle);
}

CFArrayRef CFBundleCreateBundlesFromDirectory(CFAllocatorRef allocator, CFURLRef directoryURL, CFStringRef bundleType)
{
  return (CFArrayRef)MEMORY[0x1E0C980E0](allocator, directoryURL, bundleType);
}

CFMutableCharacterSetRef CFCharacterSetCreateMutable(CFAllocatorRef alloc)
{
  return (CFMutableCharacterSetRef)MEMORY[0x1E0C982C8](alloc);
}

CFCharacterSetRef CFCharacterSetGetPredefined(CFCharacterSetPredefinedSet theSetIdentifier)
{
  return (CFCharacterSetRef)MEMORY[0x1E0C982F0](theSetIdentifier);
}

Boolean CFCharacterSetIsCharacterMember(CFCharacterSetRef theSet, UniChar theChar)
{
  return MEMORY[0x1E0C98320](theSet, theChar);
}

void CFCharacterSetUnion(CFMutableCharacterSetRef theSet, CFCharacterSetRef theOtherSet)
{
  MEMORY[0x1E0C98348](theSet, theOtherSet);
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x1E0C983A0](allocator, bytes, length);
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x1E0C98620](cf1, cf2);
}

CFHashCode CFHash(CFTypeRef cf)
{
  return MEMORY[0x1E0C98758](cf);
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
  MEMORY[0x1E0C988B0](center, observer, callBack, name, object, suspensionBehavior);
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1E0C988B8]();
}

void CFNotificationCenterPostNotification(CFNotificationCenterRef center, CFNotificationName name, const void *object, CFDictionaryRef userInfo, Boolean deliverImmediately)
{
  MEMORY[0x1E0C988E0](center, name, object, userInfo, deliverImmediately);
}

void CFNotificationCenterRemoveObserver(CFNotificationCenterRef center, const void *observer, CFNotificationName name, const void *object)
{
  MEMORY[0x1E0C98900](center, observer, name, object);
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98A40](key, applicationID);
}

void CFPreferencesSetAppValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID)
{
  MEMORY[0x1E0C98A80](key, value, applicationID);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x1E0C98BC0](cf);
}

void CFRunLoopAddTimer(CFRunLoopRef rl, CFRunLoopTimerRef timer, CFRunLoopMode mode)
{
  MEMORY[0x1E0C98C00](rl, timer, mode);
}

CFRunLoopRef CFRunLoopGetCurrent(void)
{
  return (CFRunLoopRef)MEMORY[0x1E0C98C30]();
}

CFRunLoopTimerRef CFRunLoopTimerCreate(CFAllocatorRef allocator, CFAbsoluteTime fireDate, CFTimeInterval interval, CFOptionFlags flags, CFIndex order, CFRunLoopTimerCallBack callout, CFRunLoopTimerContext *context)
{
  return (CFRunLoopTimerRef)MEMORY[0x1E0C98D08](allocator, flags, order, callout, context, fireDate, interval);
}

CFStringRef CFStringCreateWithBytes(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation)
{
  return (CFStringRef)MEMORY[0x1E0C98FB8](alloc, bytes, numBytes, *(_QWORD *)&encoding, isExternalRepresentation);
}

CFRange CFStringFind(CFStringRef theString, CFStringRef stringToFind, CFStringCompareFlags compareOptions)
{
  CFIndex v3;
  CFIndex v4;
  CFRange result;

  v3 = MEMORY[0x1E0C99050](theString, stringToFind, compareOptions);
  result.length = v4;
  result.location = v3;
  return result;
}

Boolean CFStringFindWithOptions(CFStringRef theString, CFStringRef stringToFind, CFRange rangeToSearch, CFStringCompareFlags searchOptions, CFRange *result)
{
  return MEMORY[0x1E0C99068](theString, stringToFind, rangeToSearch.location, rangeToSearch.length, searchOptions, result);
}

void CFStringFold(CFMutableStringRef theString, CFStringCompareFlags theFlags, CFLocaleRef theLocale)
{
  MEMORY[0x1E0C99078](theString, theFlags, theLocale);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x1E0C99098](theString, buffer, bufferSize, *(_QWORD *)&encoding);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x1E0C990A0](theString, *(_QWORD *)&encoding);
}

UniChar CFStringGetCharacterAtIndex(CFStringRef theString, CFIndex idx)
{
  return MEMORY[0x1E0C990B0](theString, idx);
}

void CFStringGetCharacters(CFStringRef theString, CFRange range, UniChar *buffer)
{
  MEMORY[0x1E0C990C0](theString, range.location, range.length, buffer);
}

const UniChar *__cdecl CFStringGetCharactersPtr(CFStringRef theString)
{
  return (const UniChar *)MEMORY[0x1E0C990C8](theString);
}

CFStringEncoding CFStringGetFastestEncoding(CFStringRef theString)
{
  return MEMORY[0x1E0C990D8](theString);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x1E0C99100](theString);
}

void CFStringNormalize(CFMutableStringRef theString, CFStringNormalizationForm theForm)
{
  MEMORY[0x1E0C991D8](theString, theForm);
}

CFStringRef CFStringTokenizerCopyBestStringLanguage(CFStringRef string, CFRange range)
{
  return (CFStringRef)MEMORY[0x1E0C99210](string, range.location, range.length);
}

CFStringRef CFURLCopyPath(CFURLRef anURL)
{
  return (CFStringRef)MEMORY[0x1E0C99318](anURL);
}

CFURLRef CFURLCreateWithBytes(CFAllocatorRef allocator, const UInt8 *URLBytes, CFIndex length, CFStringEncoding encoding, CFURLRef baseURL)
{
  return (CFURLRef)MEMORY[0x1E0C99418](allocator, URLBytes, length, *(_QWORD *)&encoding, baseURL);
}

void CGImageRelease(CGImageRef image)
{
  MEMORY[0x1E0C9CDA0](image);
}

CGImageRef CGImageRetain(CGImageRef image)
{
  return (CGImageRef)MEMORY[0x1E0C9CDA8](image);
}

CGFloat CGRectGetMaxX(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D588]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinX(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5C0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinY(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5C8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CFTypeRef CTFontDescriptorCopyLocalizedAttribute(CTFontDescriptorRef descriptor, CFStringRef attribute, CFStringRef *language)
{
  return (CFTypeRef)MEMORY[0x1E0CA7AB0](descriptor, attribute, language);
}

CTFontDescriptorRef CTFontDescriptorCreateMatchingFontDescriptor(CTFontDescriptorRef descriptor, CFSetRef mandatoryAttributes)
{
  return (CTFontDescriptorRef)MEMORY[0x1E0CA7AE8](descriptor, mandatoryAttributes);
}

CTFontDescriptorRef CTFontDescriptorCreateWithAttributes(CFDictionaryRef attributes)
{
  return (CTFontDescriptorRef)MEMORY[0x1E0CA7B00](attributes);
}

BOOL CTFontDescriptorMatchFontDescriptorsWithProgressHandler(CFArrayRef descriptors, CFSetRef mandatoryAttributes, CTFontDescriptorProgressHandler progressBlock)
{
  return MEMORY[0x1E0CA7B60](descriptors, mandatoryAttributes, progressBlock);
}

uint64_t CTLineCreateWithString()
{
  return MEMORY[0x1E0CA7E98]();
}

uint64_t CTLineIsRightToLeft()
{
  return MEMORY[0x1E0CA7F30]();
}

JSClassRef JSClassCreate(const JSClassDefinition *definition)
{
  return (JSClassRef)MEMORY[0x1E0CBDDD0](definition);
}

JSGlobalContextRef JSContextGetGlobalContext(JSContextRef ctx)
{
  return (JSGlobalContextRef)MEMORY[0x1E0CBDDD8](ctx);
}

JSObjectRef JSContextGetGlobalObject(JSContextRef ctx)
{
  return (JSObjectRef)MEMORY[0x1E0CBDDE0](ctx);
}

JSContextGroupRef JSContextGetGroup(JSContextRef ctx)
{
  return (JSContextGroupRef)MEMORY[0x1E0CBDDE8](ctx);
}

JSValueRef JSEvaluateScript(JSContextRef ctx, JSStringRef script, JSObjectRef thisObject, JSStringRef sourceURL, int startingLineNumber, JSValueRef *exception)
{
  return (JSValueRef)MEMORY[0x1E0CBDDF8](ctx, script, thisObject, sourceURL, *(_QWORD *)&startingLineNumber, exception);
}

JSGlobalContextRef JSGlobalContextCreateInGroup(JSContextGroupRef group, JSClassRef globalObjectClass)
{
  return (JSGlobalContextRef)MEMORY[0x1E0CBDE10](group, globalObjectClass);
}

void JSGlobalContextRelease(JSGlobalContextRef ctx)
{
  MEMORY[0x1E0CBDE18](ctx);
}

JSGlobalContextRef JSGlobalContextRetain(JSGlobalContextRef ctx)
{
  return (JSGlobalContextRef)MEMORY[0x1E0CBDE20](ctx);
}

JSValueRef JSObjectCallAsFunction(JSContextRef ctx, JSObjectRef object, JSObjectRef thisObject, size_t argumentCount, const JSValueRef arguments[], JSValueRef *exception)
{
  return (JSValueRef)MEMORY[0x1E0CBDE30](ctx, object, thisObject, argumentCount, arguments, exception);
}

JSPropertyNameArrayRef JSObjectCopyPropertyNames(JSContextRef ctx, JSObjectRef object)
{
  return (JSPropertyNameArrayRef)MEMORY[0x1E0CBDE38](ctx, object);
}

BOOL JSObjectDeleteProperty(JSContextRef ctx, JSObjectRef object, JSStringRef propertyName, JSValueRef *exception)
{
  return MEMORY[0x1E0CBDE40](ctx, object, propertyName, exception);
}

void *__cdecl JSObjectGetPrivate(JSObjectRef object)
{
  return (void *)MEMORY[0x1E0CBDE58](object);
}

JSValueRef JSObjectGetProperty(JSContextRef ctx, JSObjectRef object, JSStringRef propertyName, JSValueRef *exception)
{
  return (JSValueRef)MEMORY[0x1E0CBDE60](ctx, object, propertyName, exception);
}

JSValueRef JSObjectGetPropertyAtIndex(JSContextRef ctx, JSObjectRef object, unsigned int propertyIndex, JSValueRef *exception)
{
  return (JSValueRef)MEMORY[0x1E0CBDE68](ctx, object, *(_QWORD *)&propertyIndex, exception);
}

BOOL JSObjectHasProperty(JSContextRef ctx, JSObjectRef object, JSStringRef propertyName)
{
  return MEMORY[0x1E0CBDE98](ctx, object, propertyName);
}

BOOL JSObjectIsFunction(JSContextRef ctx, JSObjectRef object)
{
  return MEMORY[0x1E0CBDEA8](ctx, object);
}

JSObjectRef JSObjectMake(JSContextRef ctx, JSClassRef jsClass, void *data)
{
  return (JSObjectRef)MEMORY[0x1E0CBDEB0](ctx, jsClass, data);
}

JSObjectRef JSObjectMakeArray(JSContextRef ctx, size_t argumentCount, const JSValueRef arguments[], JSValueRef *exception)
{
  return (JSObjectRef)MEMORY[0x1E0CBDEB8](ctx, argumentCount, arguments, exception);
}

JSObjectRef JSObjectMakeError(JSContextRef ctx, size_t argumentCount, const JSValueRef arguments[], JSValueRef *exception)
{
  return (JSObjectRef)MEMORY[0x1E0CBDED0](ctx, argumentCount, arguments, exception);
}

JSObjectRef JSObjectMakeFunctionWithCallback(JSContextRef ctx, JSStringRef name, JSObjectCallAsFunctionCallback callAsFunction)
{
  return (JSObjectRef)MEMORY[0x1E0CBDED8](ctx, name, callAsFunction);
}

BOOL JSObjectSetPrivate(JSObjectRef object, void *data)
{
  return MEMORY[0x1E0CBDF08](object, data);
}

void JSObjectSetProperty(JSContextRef ctx, JSObjectRef object, JSStringRef propertyName, JSValueRef value, JSPropertyAttributes attributes, JSValueRef *exception)
{
  MEMORY[0x1E0CBDF10](ctx, object, propertyName, value, *(_QWORD *)&attributes, exception);
}

size_t JSPropertyNameArrayGetCount(JSPropertyNameArrayRef array)
{
  return MEMORY[0x1E0CBDF48](array);
}

JSStringRef JSPropertyNameArrayGetNameAtIndex(JSPropertyNameArrayRef array, size_t index)
{
  return (JSStringRef)MEMORY[0x1E0CBDF50](array, index);
}

void JSPropertyNameArrayRelease(JSPropertyNameArrayRef array)
{
  MEMORY[0x1E0CBDF58](array);
}

uint64_t JSRemoteInspectorGetInspectionEnabledByDefault()
{
  return MEMORY[0x1E0CBDF60]();
}

uint64_t JSRemoteInspectorGetInspectionFollowsInternalPolicies()
{
  return MEMORY[0x1E0CBDF68]();
}

uint64_t JSRemoteInspectorSetInspectionEnabledByDefault()
{
  return MEMORY[0x1E0CBDF70]();
}

uint64_t JSRemoteInspectorSetInspectionFollowsInternalPolicies()
{
  return MEMORY[0x1E0CBDF78]();
}

uint64_t JSScriptCreateReferencingImmortalASCIIText()
{
  return MEMORY[0x1E0CBDF90]();
}

uint64_t JSScriptEvaluate()
{
  return MEMORY[0x1E0CBDF98]();
}

CFStringRef JSStringCopyCFString(CFAllocatorRef alloc, JSStringRef string)
{
  return (CFStringRef)MEMORY[0x1E0CBDFA0](alloc, string);
}

JSStringRef JSStringCreateWithCFString(CFStringRef string)
{
  return (JSStringRef)MEMORY[0x1E0CBDFA8](string);
}

JSStringRef JSStringCreateWithCharacters(const JSChar *chars, size_t numChars)
{
  return (JSStringRef)MEMORY[0x1E0CBDFB0](chars, numChars);
}

JSStringRef JSStringCreateWithUTF8CString(const char *string)
{
  return (JSStringRef)MEMORY[0x1E0CBDFB8](string);
}

const JSChar *__cdecl JSStringGetCharactersPtr(JSStringRef string)
{
  return (const JSChar *)MEMORY[0x1E0CBDFC0](string);
}

size_t JSStringGetLength(JSStringRef string)
{
  return MEMORY[0x1E0CBDFC8](string);
}

void JSStringRelease(JSStringRef string)
{
  MEMORY[0x1E0CBDFE8](string);
}

JSStringRef JSStringRetain(JSStringRef string)
{
  return (JSStringRef)MEMORY[0x1E0CBDFF0](string);
}

JSStringRef JSValueCreateJSONString(JSContextRef ctx, JSValueRef value, unsigned int indent, JSValueRef *exception)
{
  return (JSStringRef)MEMORY[0x1E0CBDFF8](ctx, value, *(_QWORD *)&indent, exception);
}

BOOL JSValueIsArray(JSContextRef ctx, JSValueRef value)
{
  return MEMORY[0x1E0CBE010](ctx, value);
}

BOOL JSValueIsBoolean(JSContextRef ctx, JSValueRef value)
{
  return MEMORY[0x1E0CBE018](ctx, value);
}

BOOL JSValueIsDate(JSContextRef ctx, JSValueRef value)
{
  return MEMORY[0x1E0CBE020](ctx, value);
}

BOOL JSValueIsNull(JSContextRef ctx, JSValueRef value)
{
  return MEMORY[0x1E0CBE028](ctx, value);
}

BOOL JSValueIsObject(JSContextRef ctx, JSValueRef value)
{
  return MEMORY[0x1E0CBE038](ctx, value);
}

BOOL JSValueIsString(JSContextRef ctx, JSValueRef value)
{
  return MEMORY[0x1E0CBE048](ctx, value);
}

BOOL JSValueIsUndefined(JSContextRef ctx, JSValueRef value)
{
  return MEMORY[0x1E0CBE050](ctx, value);
}

JSValueRef JSValueMakeBoolean(JSContextRef ctx, BOOL BOOLean)
{
  return (JSValueRef)MEMORY[0x1E0CBE058](ctx, BOOLean);
}

JSValueRef JSValueMakeFromJSONString(JSContextRef ctx, JSStringRef string)
{
  return (JSValueRef)MEMORY[0x1E0CBE060](ctx, string);
}

JSValueRef JSValueMakeNull(JSContextRef ctx)
{
  return (JSValueRef)MEMORY[0x1E0CBE068](ctx);
}

JSValueRef JSValueMakeNumber(JSContextRef ctx, double number)
{
  return (JSValueRef)MEMORY[0x1E0CBE070](ctx, number);
}

JSValueRef JSValueMakeString(JSContextRef ctx, JSStringRef string)
{
  return (JSValueRef)MEMORY[0x1E0CBE078](ctx, string);
}

JSValueRef JSValueMakeUndefined(JSContextRef ctx)
{
  return (JSValueRef)MEMORY[0x1E0CBE080](ctx);
}

void JSValueProtect(JSContextRef ctx, JSValueRef value)
{
  MEMORY[0x1E0CBE088](ctx, value);
}

BOOL JSValueToBoolean(JSContextRef ctx, JSValueRef value)
{
  return MEMORY[0x1E0CBE090](ctx, value);
}

double JSValueToNumber(JSContextRef ctx, JSValueRef value, JSValueRef *exception)
{
  double result;

  MEMORY[0x1E0CBE098](ctx, value, exception);
  return result;
}

JSObjectRef JSValueToObject(JSContextRef ctx, JSValueRef value, JSValueRef *exception)
{
  return (JSObjectRef)MEMORY[0x1E0CBE0A0](ctx, value, exception);
}

JSStringRef JSValueToStringCopy(JSContextRef ctx, JSValueRef value, JSValueRef *exception)
{
  return (JSStringRef)MEMORY[0x1E0CBE0A8](ctx, value, exception);
}

void JSValueUnprotect(JSContextRef ctx, JSValueRef value)
{
  MEMORY[0x1E0CBE0B0](ctx, value);
}

uint64_t JSWeakObjectMapCreate()
{
  return MEMORY[0x1E0CBE0C8]();
}

uint64_t JSWeakObjectMapGet()
{
  return MEMORY[0x1E0CBE0D0]();
}

uint64_t JSWeakObjectMapRemove()
{
  return MEMORY[0x1E0CBE0D8]();
}

uint64_t JSWeakObjectMapSet()
{
  return MEMORY[0x1E0CBE0E0]();
}

uint64_t MGCopyAnswer()
{
  return MEMORY[0x1E0DE2B20]();
}

uint64_t MGGetStringAnswer()
{
  return MEMORY[0x1E0DE2B80]();
}

id NSAllocateObject(Class aClass, NSUInteger extraBytes, NSZone *zone)
{
  return (id)MEMORY[0x1E0CB2868](aClass, extraBytes, zone);
}

Class NSClassFromString(NSString *aClassName)
{
  return (Class)MEMORY[0x1E0CB28A0](aClassName);
}

NSString *NSHomeDirectory(void)
{
  return (NSString *)MEMORY[0x1E0CB2C00]();
}

NSRange NSIntersectionRange(NSRange range1, NSRange range2)
{
  NSUInteger v2;
  NSUInteger v3;
  NSRange result;

  v2 = MEMORY[0x1E0CB2C58](range1.location, range1.length, range2.location, range2.length);
  result.length = v3;
  result.location = v2;
  return result;
}

void NSLog(NSString *format, ...)
{
  MEMORY[0x1E0CB2D88](format);
}

SEL NSSelectorFromString(NSString *aSelectorName)
{
  return (SEL)MEMORY[0x1E0CB3190](aSelectorName);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x1E0CB3200](aClass);
}

NSString *NSTemporaryDirectory(void)
{
  return (NSString *)MEMORY[0x1E0CB3250]();
}

uint64_t PNCreateFormattedStringWithCountry()
{
  return MEMORY[0x1E0D17878]();
}

uint64_t SecCertificateIsValid()
{
  return MEMORY[0x1E0CD6068]();
}

uint64_t SecCertificateNotValidAfter()
{
  return MEMORY[0x1E0CD6070]();
}

uint64_t SecCertificateNotValidBefore()
{
  return MEMORY[0x1E0CD6078]();
}

OSStatus SecIdentityCopyCertificate(SecIdentityRef identityRef, SecCertificateRef *certificateRef)
{
  return MEMORY[0x1E0CD6270](identityRef, certificateRef);
}

OSStatus SecItemCopyMatching(CFDictionaryRef query, CFTypeRef *result)
{
  return MEMORY[0x1E0CD6298](query, result);
}

OSStatus SecItemDelete(CFDictionaryRef query)
{
  return MEMORY[0x1E0CD62A0](query);
}

OSStatus SecItemUpdate(CFDictionaryRef query, CFDictionaryRef attributesToUpdate)
{
  return MEMORY[0x1E0CD62D8](query, attributesToUpdate);
}

SecPolicyRef SecPolicyCreateSSL(Boolean server, CFStringRef hostname)
{
  return (SecPolicyRef)MEMORY[0x1E0CD6520](server, hostname);
}

CFArrayRef SecTrustCopyCertificateChain(SecTrustRef trust)
{
  return (CFArrayRef)MEMORY[0x1E0CD6648](trust);
}

CFDataRef SecTrustCopyExceptions(SecTrustRef trust)
{
  return (CFDataRef)MEMORY[0x1E0CD6658](trust);
}

OSStatus SecTrustCreateWithCertificates(CFTypeRef certificates, CFTypeRef policies, SecTrustRef *trust)
{
  return MEMORY[0x1E0CD6698](certificates, policies, trust);
}

OSStatus SecTrustGetTrustResult(SecTrustRef trust, SecTrustResultType *result)
{
  return MEMORY[0x1E0CD66E8](trust, result);
}

BOOL SecTrustSetExceptions(SecTrustRef trust, CFDataRef exceptions)
{
  return MEMORY[0x1E0CD6728](trust, exceptions);
}

uint64_t WBSAllowedCreditCardNumberSeparatorCharacters()
{
  return MEMORY[0x1E0D89D88]();
}

uint64_t WBSAuditTokenHasEntitlement()
{
  return MEMORY[0x1E0D89D90]();
}

uint64_t WBSCreditCardCardholderFieldLabels()
{
  return MEMORY[0x1E0D89DD0]();
}

uint64_t WBSCreditCardCompositeExpirationDateFieldLabels()
{
  return MEMORY[0x1E0D89DD8]();
}

uint64_t WBSCreditCardNumberFieldLabels()
{
  return MEMORY[0x1E0D89DE0]();
}

uint64_t WBSCreditCardSecurityCodeFieldLabels()
{
  return MEMORY[0x1E0D89DE8]();
}

uint64_t WBSCreditCardTypeFieldLabels()
{
  return MEMORY[0x1E0D89DF0]();
}

uint64_t WBSCreditCardTypeFromNumber()
{
  return MEMORY[0x1E0D89DF8]();
}

uint64_t WBSCreditCardTypeFromNumberAllowingPartialMatch()
{
  return MEMORY[0x1E0D89E00]();
}

uint64_t WBSCreditCardTypeLocalizedName()
{
  return MEMORY[0x1E0D89E08]();
}

uint64_t WBSCreditCardTypeLocalizedNameForGeneratingCardNames()
{
  return MEMORY[0x1E0D89E10]();
}

uint64_t WBSCreditCardTypeSynonyms()
{
  return MEMORY[0x1E0D89E18]();
}

uint64_t WBSDispatchGroupNotifyWithTimeout()
{
  return MEMORY[0x1E0D89E30]();
}

uint64_t WBSExpirationDateWithDayMonthYear()
{
  return MEMORY[0x1E0D89E48]();
}

uint64_t WBSGetKeychainData()
{
  return MEMORY[0x1E0D89E50]();
}

uint64_t WBSIsEqual()
{
  return MEMORY[0x1E0D89E58]();
}

uint64_t WBSKeychainItemExists()
{
  return MEMORY[0x1E0D89E68]();
}

uint64_t WBSLocaleForCreditCardExpirationDate()
{
  return MEMORY[0x1E0D89E70]();
}

uint64_t WBSNonCreditCardCardNumberFieldLabels()
{
  return MEMORY[0x1E0D89EA0]();
}

uint64_t WBSNormalizedCreditCardNumber()
{
  return MEMORY[0x1E0D89EA8]();
}

uint64_t WBSPerformBlockOnMainRunLoopWithCommonModes()
{
  return MEMORY[0x1E0D89EF8]();
}

uint64_t WBSReadExactAmountOfBytesFromFileDescriptor()
{
  return MEMORY[0x1E0D89F10]();
}

uint64_t WBSReadExactAmountOfBytesFromFileDescriptorAsNSData()
{
  return MEMORY[0x1E0D89F18]();
}

uint64_t WBSRemoveKeychainPasswordIfExists()
{
  return MEMORY[0x1E0D89F28]();
}

uint64_t WBSRunLoopRunUntilTerminationSignal()
{
  return MEMORY[0x1E0D89F30]();
}

uint64_t WBSSetKeychainData()
{
  return MEMORY[0x1E0D89F90]();
}

uint64_t WBSSetKeychainPassword()
{
  return MEMORY[0x1E0D89F98]();
}

uint64_t WBSSetSignalHandler()
{
  return MEMORY[0x1E0D89FA0]();
}

uint64_t WBSStatusCodeGroupFromStatusCode()
{
  return MEMORY[0x1E0D89FB0]();
}

uint64_t WBSWriteExactAmountOfBytesToFileDescriptor()
{
  return MEMORY[0x1E0D89FE0]();
}

uint64_t WTFLogAlways()
{
  return MEMORY[0x1E0CBE138]();
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x1E0C80948](a1, *(_QWORD *)&a2);
}

uint64_t _CFNetworkSetOverrideSystemProxySettings()
{
  return MEMORY[0x1E0C92F28]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x1E0C80A20](exception_object);
}

uint64_t _WBSLocalizedString()
{
  return MEMORY[0x1E0D89FE8]();
}

uint64_t _WBSRunOnceImpl()
{
  return MEMORY[0x1E0D89FF8]();
}

uint64_t SafariShared::SuddenTerminationDisabler::enableSuddenTermination(SafariShared::SuddenTerminationDisabler *this)
{
  return MEMORY[0x1E0D8A000](this);
}

uint64_t SafariShared::SuddenTerminationDisabler::SuddenTerminationDisabler(SafariShared::SuddenTerminationDisabler *this, NSString *a2)
{
  return MEMORY[0x1E0D8A008](this, a2);
}

uint64_t WTF::fastMalloc(WTF *this)
{
  return MEMORY[0x1E0CBF100](this);
}

uint64_t WTF::URLWithData(WTF *this, NSData *a2, NSURL *a3)
{
  return MEMORY[0x1E0CBF280](this, a2, a3);
}

uint64_t WTF::fastRealloc(WTF *this, void *a2)
{
  return MEMORY[0x1E0CBF290](this, a2);
}

uint64_t WTF::decodeHostName(WTF *this, NSString *a2)
{
  return MEMORY[0x1E0CBF6B0](this, a2);
}

uint64_t WTF::originalURLData(WTF *this, NSURL *a2)
{
  return MEMORY[0x1E0CBF768](this, a2);
}

uint64_t WTF::fastZeroedMalloc(WTF *this)
{
  return MEMORY[0x1E0CBF790](this);
}

uint64_t WTF::isUserVisibleURL(WTF *this, NSString *a2)
{
  return MEMORY[0x1E0CBF798](this, a2);
}

uint64_t WTF::userVisibleString(WTF *this, NSURL *a2)
{
  return MEMORY[0x1E0CBF848](this, a2);
}

uint64_t WTF::initializeMainThread(WTF *this)
{
  return MEMORY[0x1E0CBF980](this);
}

uint64_t WTF::URLWithUserTypedString(WTF *this, NSString *a2, NSURL *a3)
{
  return MEMORY[0x1E0CBFA20](this, a2, a3);
}

uint64_t WTF::fastFree(WTF *this, void *a2)
{
  return MEMORY[0x1E0CC0018](this, a2);
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x1E0DE4248](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x1E0DE4258](this);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x1E0DE43E8](__n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1E0DE4428](this, __s, __n);
}

void std::string::reserve(std::string *this, std::string::size_type __requested_capacity)
{
  MEMORY[0x1E0DE44A8](this, __requested_capacity);
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x1E0DE46B0]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x1E0DE46B8]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x1E0DE4730]();
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x1E0DE47A8]();
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x1E0DE47E0]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x1E0DE47E8]();
}

void std::mutex::lock(std::mutex *this)
{
  MEMORY[0x1E0DE4AA0](this);
}

void std::mutex::unlock(std::mutex *this)
{
  MEMORY[0x1E0DE4AA8](this);
}

std::chrono::steady_clock::time_point std::chrono::steady_clock::now(void)
{
  return (std::chrono::steady_clock::time_point)MEMORY[0x1E0DE4B38]();
}

void std::locale::~locale(std::locale *this)
{
  MEMORY[0x1E0DE4B98](this);
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
  MEMORY[0x1E0DE4C68](this, __sb);
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
  MEMORY[0x1E0DE4C80](this, *(_QWORD *)&__state);
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x1E0DE4D28]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, uint64_t __val)
{
  return (std::string *)MEMORY[0x1E0DE4D78](retstr, __val);
}

void std::terminate(void)
{
  MEMORY[0x1E0DE4E18]();
}

void operator delete(void *__p)
{
  off_1E4B28EC8(__p);
}

uint64_t operator delete()
{
  return off_1E4B28ED0();
}

uint64_t operator new[]()
{
  return off_1E4B28ED8();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_1E4B28EE0(__sz);
}

uint64_t operator new()
{
  return off_1E4B28EE8();
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1E0DE5080](a1);
}

int *__error(void)
{
  return (int *)MEMORY[0x1E0C80AC0]();
}

os_activity_t _os_activity_create(void *dso, const char *description, os_activity_t activity, os_activity_flag_t flags)
{
  return (os_activity_t)MEMORY[0x1E0C80FC0](dso, description, activity, *(_QWORD *)&flags);
}

void _os_activity_initiate(void *dso, const char *description, os_activity_flag_t flags, os_block_t activity_block)
{
  MEMORY[0x1E0C80FD0](dso, description, *(_QWORD *)&flags, activity_block);
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81020](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81038](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81040](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81048](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C810D0](dso, log, type, spid, name, format, buf, *(_QWORD *)&size);
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x1E0DA88F0]();
}

void abort(void)
{
  MEMORY[0x1E0C813A8]();
}

uint32_t arc4random(void)
{
  return MEMORY[0x1E0C81570]();
}

void arc4random_buf(void *__buf, size_t __nbytes)
{
  MEMORY[0x1E0C81580](__buf, __nbytes);
}

uint32_t arc4random_uniform(uint32_t __upper_bound)
{
  return MEMORY[0x1E0C81588](*(_QWORD *)&__upper_bound);
}

void *__cdecl bsearch_b(const void *__key, const void *__base, size_t __nel, size_t __width, void *__compar)
{
  return (void *)MEMORY[0x1E0C81740](__key, __base, __nel, __width, __compar);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

BOOL class_addMethod(Class cls, SEL name, IMP imp, const char *types)
{
  return MEMORY[0x1E0DE7A50](cls, name, imp, types);
}

Method class_getInstanceMethod(Class cls, SEL name)
{
  return (Method)MEMORY[0x1E0DE7AA8](cls, name);
}

Ivar class_getInstanceVariable(Class cls, const char *name)
{
  return (Ivar)MEMORY[0x1E0DE7AB8](cls, name);
}

IMP class_getMethodImplementation(Class cls, SEL name)
{
  return (IMP)MEMORY[0x1E0DE7AC0](cls, name);
}

Class class_getSuperclass(Class cls)
{
  return (Class)MEMORY[0x1E0DE7AD8](cls);
}

IMP class_replaceMethod(Class cls, SEL name, IMP imp, const char *types)
{
  return (IMP)MEMORY[0x1E0DE7AF0](cls, name, imp, types);
}

__uint64_t clock_gettime_nsec_np(clockid_t __clock_id)
{
  return MEMORY[0x1E0C82670](*(_QWORD *)&__clock_id);
}

int close(int a1)
{
  return MEMORY[0x1E0C82688](*(_QWORD *)&a1);
}

uint64_t ct_green_tea_logger_create_static()
{
  return MEMORY[0x1E0DDFE90]();
}

void dispatch_activate(dispatch_object_t object)
{
  MEMORY[0x1E0C82BC0](object);
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82BC8](when, queue, block);
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
  MEMORY[0x1E0C82BE8](queue);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C00](queue, block);
}

void dispatch_barrier_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C28](queue, block);
}

void dispatch_barrier_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C48](queue, block);
}

void dispatch_block_cancel(dispatch_block_t block)
{
  MEMORY[0x1E0C82C58](block);
}

dispatch_block_t dispatch_block_create(dispatch_block_flags_t flags, dispatch_block_t block)
{
  return (dispatch_block_t)MEMORY[0x1E0C82C60](flags, block);
}

dispatch_block_t dispatch_block_create_with_qos_class(dispatch_block_flags_t flags, dispatch_qos_class_t qos_class, int relative_priority, dispatch_block_t block)
{
  return (dispatch_block_t)MEMORY[0x1E0C82C68](flags, *(_QWORD *)&qos_class, *(_QWORD *)&relative_priority, block);
}

intptr_t dispatch_block_testcancel(dispatch_block_t block)
{
  return MEMORY[0x1E0C82C90](block);
}

intptr_t dispatch_block_wait(dispatch_block_t block, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82C98](block, timeout);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1E0C82D00](identifier, flags);
}

void dispatch_group_async(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82D10](group, queue, block);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1E0C82D20]();
}

void dispatch_group_enter(dispatch_group_t group)
{
  MEMORY[0x1E0C82D28](group);
}

void dispatch_group_leave(dispatch_group_t group)
{
  MEMORY[0x1E0C82D30](group);
}

void dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82D38](group, queue, block);
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82D48](group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x1E0C82E08](predicate, block);
}

dispatch_queue_attr_t dispatch_queue_attr_make_initially_inactive(dispatch_queue_attr_t attr)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E20](attr);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E28](attr, frequency);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E38](attr, *(_QWORD *)&qos_class, *(_QWORD *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E48](label, attr);
}

dispatch_queue_t dispatch_queue_create_with_target_V2(const char *label, dispatch_queue_attr_t attr, dispatch_queue_t target)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E50](label, attr, target);
}

dispatch_qos_class_t dispatch_queue_get_qos_class(dispatch_queue_t queue, int *relative_priority_ptr)
{
  return MEMORY[0x1E0C82E60](queue, relative_priority_ptr);
}

void dispatch_resume(dispatch_object_t object)
{
  MEMORY[0x1E0C82EA0](object);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1E0C82EB8](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1E0C82EC8](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82ED8](dsema, timeout);
}

void dispatch_set_target_queue(dispatch_object_t object, dispatch_queue_t queue)
{
  MEMORY[0x1E0C82F08](object, queue);
}

void dispatch_source_cancel(dispatch_source_t source)
{
  MEMORY[0x1E0C82F10](source);
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x1E0C82F20](type, handle, mask, queue);
}

uintptr_t dispatch_source_get_data(dispatch_source_t source)
{
  return MEMORY[0x1E0C82F28](source);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
  MEMORY[0x1E0C82F58](source, handler);
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
  MEMORY[0x1E0C82F78](source, start, interval, leeway);
}

void dispatch_suspend(dispatch_object_t object)
{
  MEMORY[0x1E0C82F88](object);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82F90](queue, block);
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1E0C82FB8](when, delta);
}

double drand48(void)
{
  double result;

  MEMORY[0x1E0C83070]();
  return result;
}

void exit(int a1)
{
  MEMORY[0x1E0C83278](*(_QWORD *)&a1);
}

long double exp2(long double __x)
{
  long double result;

  MEMORY[0x1E0C83288](__x);
  return result;
}

int fcntl(int a1, int a2, ...)
{
  return MEMORY[0x1E0C83300](*(_QWORD *)&a1, *(_QWORD *)&a2);
}

int flock(int a1, int a2)
{
  return MEMORY[0x1E0C83400](*(_QWORD *)&a1, *(_QWORD *)&a2);
}

void free(void *a1)
{
  MEMORY[0x1E0C834A8](a1);
}

uint64_t getCTGreenTeaOsLogHandle()
{
  return MEMORY[0x1E0DDFEA8]();
}

int inet_pton(int a1, const char *a2, void *a3)
{
  return MEMORY[0x1E0C83970](*(_QWORD *)&a1, a2, a3);
}

float logf(float a1)
{
  float result;

  MEMORY[0x1E0C83C00](a1);
  return result;
}

uint64_t lrand48(void)
{
  return MEMORY[0x1E0C83C10]();
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83EF8](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F00](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F10](ptr, size, type_id);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C84088](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1E0C84098](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1E0C840B0](__b, *(_QWORD *)&__c, __len);
}

const char *__cdecl method_getTypeEncoding(Method m)
{
  return (const char *)MEMORY[0x1E0DE7B88](m);
}

int mkfifo(const char *a1, mode_t a2)
{
  return MEMORY[0x1E0C84178](a1, a2);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1E0DE7BA8](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1E0DE7BB8]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7BD0](a1);
}

void objc_autoreleasePoolPop(void *context)
{
  MEMORY[0x1E0DE7BD8](context);
}

void *objc_autoreleasePoolPush(void)
{
  return (void *)MEMORY[0x1E0DE7BE0]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7BE8](a1);
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x1E0DE7BF0](exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1E0DE7BF8]();
}

void objc_copyWeak(id *to, id *from)
{
  MEMORY[0x1E0DE7C38](to, from);
}

void objc_destroyWeak(id *location)
{
  MEMORY[0x1E0DE7C60](location);
}

void objc_end_catch(void)
{
  MEMORY[0x1E0DE7C80]();
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x1E0DE7C90](obj);
}

void objc_exception_rethrow(void)
{
  MEMORY[0x1E0DE7C98]();
}

id objc_getAssociatedObject(id object, const void *key)
{
  return (id)MEMORY[0x1E0DE7CA8](object, key);
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x1E0DE7CB0](name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x1E0DE7CD0](self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x1E0DE7CE0](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1E0DE7D08](location);
}

void objc_moveWeak(id *to, id *from)
{
  MEMORY[0x1E0DE7D18](to, from);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D20](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D30](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1E0DE7D38]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1E0DE7D40]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1E0DE7D48]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1E0DE7D50]();
}

void objc_release(id a1)
{
  MEMORY[0x1E0DE7D78](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1E0DE7E50](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7E58](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E60](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E68](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x1E0DE7E70](a1);
}

void objc_setAssociatedObject(id object, const void *key, id value, void *policy)
{
  MEMORY[0x1E0DE7F40](object, key, value, policy);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7F88](self, _cmd, newValue, offset);
}

void objc_setProperty_atomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7F90](self, _cmd, newValue, offset);
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7FA0](self, _cmd, newValue, offset);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x1E0DE7FB0](location, obj);
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x1E0DE7FB8](location, obj);
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x1E0DE7FC8](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x1E0DE7FD0](obj);
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7FE0](a1);
}

Class object_getClass(id a1)
{
  return (Class)MEMORY[0x1E0DE7FF8](a1);
}

void *__cdecl object_getIndexedIvars(id a1)
{
  return (void *)MEMORY[0x1E0DE8008](a1);
}

void object_setIvar(id obj, Ivar ivar, id value)
{
  MEMORY[0x1E0DE8048](obj, ivar, value);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1E0C84480](a1, *(_QWORD *)&a2);
}

void os_activity_scope_enter(os_activity_t activity, os_activity_scope_state_t state)
{
  MEMORY[0x1E0C84510](activity, state);
}

void os_activity_scope_leave(os_activity_scope_state_t state)
{
  MEMORY[0x1E0C84518](state);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1E0C84728](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1E0C84780](oslog, type);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x1E0C84920](log);
}

uint64_t os_transaction_create()
{
  return MEMORY[0x1E0C84970]();
}

void os_unfair_lock_assert_not_owner(const os_unfair_lock *lock)
{
  MEMORY[0x1E0C84988](lock);
}

void os_unfair_lock_assert_owner(const os_unfair_lock *lock)
{
  MEMORY[0x1E0C84990](lock);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C84998](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C849B0](lock);
}

int pipe(int a1[2])
{
  return MEMORY[0x1E0C84B10](a1);
}

float powf(float a1, float a2)
{
  float result;

  MEMORY[0x1E0C84BC0](a1, a2);
  return result;
}

int printf(const char *a1, ...)
{
  return MEMORY[0x1E0C84BD0](a1);
}

void *__cdecl pthread_getspecific(pthread_key_t a1)
{
  return (void *)MEMORY[0x1E0C84DC0](a1);
}

int pthread_key_create(pthread_key_t *a1, void (__cdecl *a2)(void *))
{
  return MEMORY[0x1E0C84DE0](a1, a2);
}

int pthread_setspecific(pthread_key_t a1, const void *a2)
{
  return MEMORY[0x1E0C84F18](a1, a2);
}

int puts(const char *a1)
{
  return MEMORY[0x1E0C84F60](a1);
}

qos_class_t qos_class_self(void)
{
  return MEMORY[0x1E0C84F80]();
}

int rand(void)
{
  return MEMORY[0x1E0C84FB0]();
}

uint64_t random(void)
{
  return MEMORY[0x1E0C84FC0]();
}

int setenv(const char *__name, const char *__value, int __overwrite)
{
  return MEMORY[0x1E0C85328](__name, __value, *(_QWORD *)&__overwrite);
}

void *__cdecl sqlite3_aggregate_context(sqlite3_context *a1, int nBytes)
{
  return (void *)MEMORY[0x1E0DE8550](a1, *(_QWORD *)&nBytes);
}

int sqlite3_bind_blob64(sqlite3_stmt *a1, int a2, const void *a3, sqlite3_uint64 a4, void (__cdecl *a5)(void *))
{
  return MEMORY[0x1E0DE8588](a1, *(_QWORD *)&a2, a3, a4, a5);
}

int sqlite3_bind_double(sqlite3_stmt *a1, int a2, double a3)
{
  return MEMORY[0x1E0DE8598](a1, *(_QWORD *)&a2, a3);
}

int sqlite3_bind_int(sqlite3_stmt *a1, int a2, int a3)
{
  return MEMORY[0x1E0DE85A0](a1, *(_QWORD *)&a2, *(_QWORD *)&a3);
}

int sqlite3_bind_int64(sqlite3_stmt *a1, int a2, sqlite3_int64 a3)
{
  return MEMORY[0x1E0DE85A8](a1, *(_QWORD *)&a2, a3);
}

int sqlite3_bind_null(sqlite3_stmt *a1, int a2)
{
  return MEMORY[0x1E0DE85B0](a1, *(_QWORD *)&a2);
}

int sqlite3_bind_text(sqlite3_stmt *a1, int a2, const char *a3, int a4, void (__cdecl *a5)(void *))
{
  return MEMORY[0x1E0DE85D8](a1, *(_QWORD *)&a2, a3, *(_QWORD *)&a4, a5);
}

const void *__cdecl sqlite3_column_blob(sqlite3_stmt *a1, int iCol)
{
  return (const void *)MEMORY[0x1E0DE8660](a1, *(_QWORD *)&iCol);
}

int sqlite3_column_bytes(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1E0DE8668](a1, *(_QWORD *)&iCol);
}

double sqlite3_column_double(sqlite3_stmt *a1, int iCol)
{
  double result;

  MEMORY[0x1E0DE8688](a1, *(_QWORD *)&iCol);
  return result;
}

int sqlite3_column_int(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1E0DE8690](a1, *(_QWORD *)&iCol);
}

sqlite3_int64 sqlite3_column_int64(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1E0DE8698](a1, *(_QWORD *)&iCol);
}

const unsigned __int8 *__cdecl sqlite3_column_text(sqlite3_stmt *a1, int iCol)
{
  return (const unsigned __int8 *)MEMORY[0x1E0DE86B8](a1, *(_QWORD *)&iCol);
}

int sqlite3_column_type(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1E0DE86C8](a1, *(_QWORD *)&iCol);
}

int sqlite3_create_function_v2(sqlite3 *db, const char *zFunctionName, int nArg, int eTextRep, void *pApp, void (__cdecl *xFunc)(sqlite3_context *, int, sqlite3_value **), void (__cdecl *xStep)(sqlite3_context *, int, sqlite3_value **), void (__cdecl *xFinal)(sqlite3_context *), void (__cdecl *xDestroy)(void *))
{
  return MEMORY[0x1E0DE8710](db, zFunctionName, *(_QWORD *)&nArg, *(_QWORD *)&eTextRep, pApp, xFunc, xStep, xFinal);
}

int sqlite3_reset(sqlite3_stmt *pStmt)
{
  return MEMORY[0x1E0DE88B0](pStmt);
}

void sqlite3_result_blob(sqlite3_context *a1, const void *a2, int a3, void (__cdecl *a4)(void *))
{
  MEMORY[0x1E0DE88B8](a1, a2, *(_QWORD *)&a3, a4);
}

void sqlite3_result_double(sqlite3_context *a1, double a2)
{
  MEMORY[0x1E0DE88C8](a1, a2);
}

void sqlite3_result_error_nomem(sqlite3_context *a1)
{
  MEMORY[0x1E0DE88E0](a1);
}

void sqlite3_result_int64(sqlite3_context *a1, sqlite3_int64 a2)
{
  MEMORY[0x1E0DE88F8](a1, a2);
}

void sqlite3_result_null(sqlite3_context *a1)
{
  MEMORY[0x1E0DE8900](a1);
}

void sqlite3_result_text(sqlite3_context *a1, const char *a2, int a3, void (__cdecl *a4)(void *))
{
  MEMORY[0x1E0DE8910](a1, a2, *(_QWORD *)&a3, a4);
}

int sqlite3_step(sqlite3_stmt *a1)
{
  return MEMORY[0x1E0DE89A8](a1);
}

void *__cdecl sqlite3_user_data(sqlite3_context *a1)
{
  return (void *)MEMORY[0x1E0DE8A10](a1);
}

const void *__cdecl sqlite3_value_blob(sqlite3_value *a1)
{
  return (const void *)MEMORY[0x1E0DE8A18](a1);
}

int sqlite3_value_bytes(sqlite3_value *a1)
{
  return MEMORY[0x1E0DE8A20](a1);
}

double sqlite3_value_double(sqlite3_value *a1)
{
  double result;

  MEMORY[0x1E0DE8A30](a1);
  return result;
}

int sqlite3_value_int(sqlite3_value *a1)
{
  return MEMORY[0x1E0DE8A48](a1);
}

sqlite3_int64 sqlite3_value_int64(sqlite3_value *a1)
{
  return MEMORY[0x1E0DE8A50](a1);
}

const unsigned __int8 *__cdecl sqlite3_value_text(sqlite3_value *a1)
{
  return (const unsigned __int8 *)MEMORY[0x1E0DE8A60](a1);
}

int sqlite3_value_type(sqlite3_value *a1)
{
  return MEMORY[0x1E0DE8A70](a1);
}

void srand48(uint64_t a1)
{
  MEMORY[0x1E0C85480](a1);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1E0C85520](__s1, __s2);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1E0C85578](__s);
}

int strncasecmp(const char *a1, const char *a2, size_t a3)
{
  return MEMORY[0x1E0C85590](a1, a2, a3);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x1E0C855A8](__s1, __s2, __n);
}

float tanhf(float a1)
{
  float result;

  MEMORY[0x1E0C85800](a1);
  return result;
}

UChar32 u_foldCase(UChar32 c, uint32_t options)
{
  return MEMORY[0x1E0DE5990](*(_QWORD *)&c, *(_QWORD *)&options);
}

int32_t u_memcasecmp(const UChar *s1, const UChar *s2, int32_t length, uint32_t options)
{
  return MEMORY[0x1E0DE5A68](s1, s2, *(_QWORD *)&length, *(_QWORD *)&options);
}

int32_t u_strToLower(UChar *dest, int32_t destCapacity, const UChar *src, int32_t srcLength, const char *locale, UErrorCode *pErrorCode)
{
  return MEMORY[0x1E0DE5AB0](dest, *(_QWORD *)&destCapacity, src, *(_QWORD *)&srcLength, locale, pErrorCode);
}

xpc_activity_state_t xpc_activity_get_state(xpc_activity_t activity)
{
  return MEMORY[0x1E0C85D90](activity);
}

void xpc_activity_register(const char *identifier, xpc_object_t criteria, xpc_activity_handler_t handler)
{
  MEMORY[0x1E0C85D98](identifier, criteria, handler);
}

BOOL xpc_activity_set_state(xpc_activity_t activity, xpc_activity_state_t state)
{
  return MEMORY[0x1E0C85DB8](activity, state);
}

BOOL xpc_activity_should_defer(xpc_activity_t activity)
{
  return MEMORY[0x1E0C85DC8](activity);
}

void xpc_transaction_begin(void)
{
  MEMORY[0x1E0C86768]();
}

void xpc_transaction_end(void)
{
  MEMORY[0x1E0C86770]();
}

