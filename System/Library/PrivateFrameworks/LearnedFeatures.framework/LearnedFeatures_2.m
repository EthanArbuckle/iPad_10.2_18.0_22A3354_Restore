void sub_21097C368(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_21097C3D0(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = off_24CA81D40;
  v2 = (std::__shared_weak_count *)result[3];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_21097C444(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = off_24CA81D40;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BCC6FCLL);
}

void sub_21097C4B8(_DWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  unsigned __int8 v14;
  __int16 v15;
  unint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  _OWORD v23[3];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;

  sub_2109DCC28((uint64_t)v23, a1);
  v19 = v23[0];
  v20 = v23[1];
  v21 = v23[2];
  v3 = v25;
  v22 = v24;
  v4 = v26;
  v5 = v27;
  v17 = v28;
  v18 = v29;
  v6 = operator new();
  *(_OWORD *)(v6 + 8) = v19;
  *(_QWORD *)v6 = &off_24CA81DC8;
  *(_OWORD *)(v6 + 24) = v20;
  *(_OWORD *)(v6 + 40) = v21;
  *(_QWORD *)(v6 + 56) = v22;
  *(_QWORD *)(v6 + 64) = v3;
  *(_QWORD *)(v6 + 72) = v4;
  *(_QWORD *)(v6 + 80) = v5;
  *(_OWORD *)(v6 + 88) = v17;
  *(_QWORD *)(v6 + 104) = v18;
  v7 = (std::__shared_weak_count *)operator new();
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA81F58;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)v6;
  *a2 = v6;
  a2[1] = (uint64_t)v7;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  a2[2] = 0;
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 64))(v23, v6, 8);
  v11 = *(_OWORD *)(*(_QWORD *)&v23[0] + 16);
  v10 = *(_OWORD *)(*(_QWORD *)&v23[0] + 32);
  *(_OWORD *)(a2 + 3) = **(_OWORD **)&v23[0];
  *(_OWORD *)(a2 + 5) = v11;
  *(_OWORD *)(a2 + 7) = v10;
  *(_QWORD *)&v23[0] = 0;
  MEMORY[0x212BCC6FC]();
  a2[9] = a2[3];
  a2[14] = a2[8];
  v12 = *((_OWORD *)a2 + 3);
  *((_OWORD *)a2 + 5) = *((_OWORD *)a2 + 2);
  *((_OWORD *)a2 + 6) = v12;
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 104))(*a2);
  v14 = v13;
  if ((v13 & 0xFFFFFF) <= 0x10000)
    v14 = 0;
  v15 = v13 & 0xFF00;
  if ((v13 & 0xFF0000) == 0)
    v15 = 0;
  *((_WORD *)a2 + 60) = v15 & 0xFF00 | v14;
  do
    v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_21097C6C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  sub_2108A894C(v2);
  sub_2108A894C((uint64_t)va1);
  sub_21097C838((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21097C6FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_21097C838((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21097C710(_Unwind_Exception *exception_object)
{
  void *v1;
  void *v2;

  v2 = v1;
  if (v2)
    free(v2);
  _Unwind_Resume(exception_object);
}

void sub_21097C72C(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BCC6FCLL);
}

uint64_t sub_21097C794()
{
  return 8;
}

uint64_t sub_21097C79C(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_21097C7A4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = 4 * *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_21097C7BC(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

uint64_t *sub_21097C838(uint64_t *a1)
{
  uint64_t v2;
  void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(void **)(v2 + 72);
    if (v3)
      free(v3);
    *(_QWORD *)(v2 + 72) = 0;
    MEMORY[0x212BCC6FC](v2, 0x1091C40A44A61E0);
  }
  return a1;
}

uint64_t sub_21097C88C()
{
  return 8;
}

__int128 *sub_21097C898()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A72438);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A72438))
  {
    v2 = sub_21097C970();
    if (*((char *)v2 + 23) < 0)
    {
      sub_2108B314C(&xmmword_254A72420, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_254A72430 = *((_QWORD *)v2 + 2);
      xmmword_254A72420 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A72420, &dword_21089F000);
    __cxa_guard_release(&qword_254A72438);
  }
  if (byte_254A72437 >= 0)
    return &xmmword_254A72420;
  else
    return (__int128 *)xmmword_254A72420;
}

void sub_21097C958(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A72438);
  _Unwind_Resume(a1);
}

__int128 *sub_21097C970()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A72458);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A72458))
    return &xmmword_254A72440;
  v2 = sub_21097CA4C();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(&xmmword_254A72440, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A72450 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A72440 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A72440, &dword_21089F000);
  __cxa_guard_release(&qword_254A72458);
  return &xmmword_254A72440;
}

void sub_21097CA34(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A72458);
  _Unwind_Resume(a1);
}

std::string *sub_21097CA4C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A72478);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A72478))
    return &stru_254A72460;
  sub_21097CB3C((uint64_t)__p);
  sub_21090B258((char *)__p, &stru_254A72460);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A72460, &dword_21089F000);
  __cxa_guard_release(&qword_254A72478);
  return &stru_254A72460;
}

void sub_21097CAFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A72478);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A72478);
  _Unwind_Resume(a1);
}

void sub_21097CB3C(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A72498);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A72498))
  {
    sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Two32f>]", qword_254A72480);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A72480, &dword_21089F000);
    __cxa_guard_release(&qword_254A72498);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A724B8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A724B8))
  {
    v5 = sub_21090AB9C(qword_254A72480, "<", 0);
    sub_21090AA98(qword_254A72480, 0, v5, qword_254A724A0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A724A0, &dword_21089F000);
    __cxa_guard_release(&qword_254A724B8);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A724D8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A724D8))
  {
    sub_2109ED44C((uint64_t)qword_254A724A0, (uint64_t)&xmmword_254A724C0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A724C0, &dword_21089F000);
    __cxa_guard_release(&qword_254A724D8);
  }
  if (byte_254A724D7 < 0)
  {
    sub_2108B314C((_BYTE *)a1, (void *)xmmword_254A724C0, *((unint64_t *)&xmmword_254A724C0 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A724C0;
    *(_QWORD *)(a1 + 16) = unk_254A724D0;
  }
}

void sub_21097CCD8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A724D8);
  _Unwind_Resume(a1);
}

void sub_21097CCF0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A724B8);
  _Unwind_Resume(a1);
}

void sub_21097CD08(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A72498);
  _Unwind_Resume(a1);
}

void sub_21097CD24(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BCC6FCLL);
}

uint64_t sub_21097CD48(uint64_t result)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *(void **)(v1 + 72);
    if (v2)
      free(v2);
    *(_QWORD *)(v1 + 72) = 0;
    JUMPOUT(0x212BCC6FCLL);
  }
  return result;
}

uint64_t sub_21097CD98(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE8EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE8EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE8EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE8EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_21097CE08(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  v17 = v4;
  v18 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v15 = v4;
    v16 = v5;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  else
  {
    v15 = v4;
    v16 = 0;
  }
  sub_21097CF10(a2, &v15);
  v9 = v16;
  if (v16)
  {
    v10 = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v18;
  if (v18)
  {
    v13 = (unint64_t *)&v18->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_21097CEF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_2108A894C((uint64_t)&a9);
  sub_2108A894C((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t *sub_21097CF10(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  __int16 v18;
  _OWORD *v20;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *a1 = v3;
    a1[1] = (uint64_t)v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *a1 = v3;
    a1[1] = 0;
  }
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 64))(&v20, v3, 8);
  v10 = v20[1];
  v9 = v20[2];
  *((_OWORD *)a1 + 1) = *v20;
  *((_OWORD *)a1 + 2) = v10;
  *((_OWORD *)a1 + 3) = v9;
  v20 = 0;
  MEMORY[0x212BCC6FC]();
  v11 = *a1;
  v12 = (std::__shared_weak_count *)a1[1];
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 104))(v11);
  v17 = v16;
  if ((v16 & 0xFFFFFF) <= 0x10000)
    v17 = 0;
  v18 = v16 & 0xFF00;
  if ((v16 & 0xFF0000) == 0)
    v18 = 0;
  *((_WORD *)a1 + 32) = v18 & 0xFF00 | v17;
  return a1;
}

void sub_21097D060(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108A894C(v1);
  _Unwind_Resume(a1);
}

void sub_21097D074(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  v17 = v4;
  v18 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v15 = v4;
    v16 = v5;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  else
  {
    v15 = v4;
    v16 = 0;
  }
  sub_21097D2F8(a2, &v15);
  v9 = v16;
  if (v16)
  {
    v10 = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v18;
  if (v18)
  {
    v13 = (unint64_t *)&v18->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_21097D160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_2108A894C((uint64_t)&a9);
  sub_2108A894C((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_21097D17C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_21097D1E4(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BCC6FCLL);
}

uint64_t sub_21097D24C()
{
  return 8;
}

uint64_t sub_21097D254(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_21097D25C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 4 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_21097D274(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t *sub_21097D2F8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  __int16 v18;
  _OWORD *v20;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *a1 = v3;
    a1[1] = (uint64_t)v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *a1 = v3;
    a1[1] = 0;
  }
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 72))(&v20, v3, 8);
  v10 = v20[1];
  v9 = v20[2];
  *((_OWORD *)a1 + 1) = *v20;
  *((_OWORD *)a1 + 2) = v10;
  *((_OWORD *)a1 + 3) = v9;
  v20 = 0;
  MEMORY[0x212BCC6FC]();
  v11 = *a1;
  v12 = (std::__shared_weak_count *)a1[1];
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 104))(v11);
  v17 = v16;
  if ((v16 & 0xFFFFFF) <= 0x10000)
    v17 = 0;
  v18 = v16 & 0xFF00;
  if ((v16 & 0xFF0000) == 0)
    v18 = 0;
  *((_WORD *)a1 + 32) = v18 & 0xFF00 | v17;
  return a1;
}

void sub_21097D448(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108A894C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21097D45C(uint64_t result, uint64_t a2, float a3, float a4)
{
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  float *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  int v36;
  int v37;
  float v38;
  float v39;
  float *v40;
  float *v41;
  int v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  float *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  int v61;
  int v62;
  int v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float *v68;
  uint64_t v69;
  float *v70;
  int v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  uint64_t v97;
  uint64_t v98;

  if ((_DWORD)result != 2)
  {
    if ((_DWORD)result != 1)
      return result;
    v7 = *(_QWORD *)(a2 + 8);
    if (!v7)
      goto LABEL_35;
    v8 = *(std::__shared_weak_count **)(a2 + 16);
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      v7 = *(_QWORD *)(a2 + 8);
      v12 = *(std::__shared_weak_count **)(a2 + 16);
      if (v12)
      {
        v13 = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
        do
          v15 = __ldaxr(v13);
        while (__stlxr(v15 - 1, v13));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
    if (*(_BYTE *)(a2 + 73))
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v7 + 96))(&v98, v7, 1);
      if (!*(_DWORD *)(a2 + 32))
        goto LABEL_136;
    }
    else
    {
LABEL_35:
      v98 = 0;
      if (!*(_DWORD *)(a2 + 32))
        goto LABEL_136;
    }
    v25 = *(_DWORD *)(a2 + 36);
    if (v25)
    {
      v26 = *(_DWORD *)(a2 + 40);
      if (v26)
      {
        v27 = *(unsigned int *)(a2 + 48);
        v28 = *(unsigned int *)(a2 + 52);
        v29 = *(float **)(a2 + 24);
        if (*(_BYTE *)(a2 + 72) && v29)
        {
          v30 = *(_QWORD *)(a2 + 8);
          v31 = *(std::__shared_weak_count **)(a2 + 16);
          if (v31)
          {
            v32 = (unint64_t *)&v31->__shared_owners_;
            do
              v33 = __ldxr(v32);
            while (__stxr(v33 + 1, v32));
            do
              v34 = __ldaxr(v32);
            while (__stlxr(v34 - 1, v32));
            if (!v34)
            {
              ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
              std::__shared_weak_count::__release_weak(v31);
            }
          }
          (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v30 + 88))(v30, 1, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
          v29 = *(float **)(a2 + 24);
        }
        v35 = v25 - 1;
        v36 = v26 - 1;
        if (v26 != 1)
        {
          if (v25 == 1)
          {
            do
            {
              v86 = v29[1];
              if ((float)(a3 + -1.0) >= *v29)
                v87 = *v29;
              else
                v87 = a3 + -1.0;
              if (*v29 >= 0.0)
                v88 = v87;
              else
                v88 = 0.0;
              *v29 = v88;
              v89 = 0.0;
              if (v86 >= 0.0)
              {
                v89 = a4 + -1.0;
                if ((float)(a4 + -1.0) >= v86)
                  v89 = v86;
              }
              v29[1] = v89;
              v29 += v28;
              --v36;
            }
            while (v36);
            goto LABEL_128;
          }
          v37 = 0;
          v38 = a3 + -1.0;
          v39 = a4 + -1.0;
          v40 = v29 + 1;
          do
          {
            v41 = v40;
            v42 = v25 - 1;
            do
            {
              v43 = *(v41 - 1);
              if (v38 >= v43)
                v44 = *(v41 - 1);
              else
                v44 = a3 + -1.0;
              if (v43 >= 0.0)
                v45 = v44;
              else
                v45 = 0.0;
              *(v41 - 1) = v45;
              v46 = 0.0;
              if (*v41 >= 0.0)
              {
                v46 = a4 + -1.0;
                if (v39 >= *v41)
                  v46 = *v41;
              }
              *v41 = v46;
              v41 += v27;
              --v42;
            }
            while (v42);
            v47 = *(v41 - 1);
            if (v38 >= v47)
              v48 = *(v41 - 1);
            else
              v48 = a3 + -1.0;
            if (v47 >= 0.0)
              v49 = v48;
            else
              v49 = 0.0;
            *(v41 - 1) = v49;
            v50 = 0.0;
            if (*v41 >= 0.0)
            {
              v50 = a4 + -1.0;
              if (v39 >= *v41)
                v50 = *v41;
            }
            *v41 = v50;
            v29 += v28;
            ++v37;
            v40 += v28;
          }
          while (v37 != v36);
        }
        if (v25 != 1)
        {
          do
          {
            v80 = v29[1];
            if ((float)(a3 + -1.0) >= *v29)
              v81 = *v29;
            else
              v81 = a3 + -1.0;
            if (*v29 >= 0.0)
              v82 = v81;
            else
              v82 = 0.0;
            *v29 = v82;
            v83 = 0.0;
            if (v80 >= 0.0)
            {
              v83 = a4 + -1.0;
              if ((float)(a4 + -1.0) >= v80)
                v83 = v80;
            }
            v29[1] = v83;
            v29 += v27;
            --v35;
          }
          while (v35);
        }
LABEL_128:
        v90 = 0.0;
        v91 = a3 + -1.0;
        v92 = v29[1];
        if ((float)(a3 + -1.0) >= *v29)
          v91 = *v29;
        if (*v29 < 0.0)
          v91 = 0.0;
        *v29 = v91;
        if (v92 >= 0.0)
        {
          v90 = a4 + -1.0;
          if ((float)(a4 + -1.0) >= v92)
            v90 = v92;
        }
        v29[1] = v90;
      }
    }
LABEL_136:
    result = v98;
    v98 = 0;
    if (!result)
      return result;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  v16 = *(_QWORD *)(a2 + 8);
  if (!v16)
    goto LABEL_71;
  v17 = *(std::__shared_weak_count **)(a2 + 16);
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
    do
      v20 = __ldaxr(v18);
    while (__stlxr(v20 - 1, v18));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
    v16 = *(_QWORD *)(a2 + 8);
    v21 = *(std::__shared_weak_count **)(a2 + 16);
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
      do
        v24 = __ldaxr(v22);
      while (__stlxr(v24 - 1, v22));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
  }
  if (*(_BYTE *)(a2 + 73))
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v16 + 96))(&v98, v16, 1);
    if (!*(_DWORD *)(a2 + 32))
      goto LABEL_136;
  }
  else
  {
LABEL_71:
    v98 = 0;
    if (!*(_DWORD *)(a2 + 32))
      goto LABEL_136;
  }
  v51 = *(_DWORD *)(a2 + 36);
  if (!v51)
    goto LABEL_136;
  v52 = *(_DWORD *)(a2 + 40);
  if (!v52)
    goto LABEL_136;
  v54 = *(unsigned int *)(a2 + 48);
  v53 = *(unsigned int *)(a2 + 52);
  v55 = *(float **)(a2 + 24);
  if (*(_BYTE *)(a2 + 72) && v55)
  {
    v56 = *(_QWORD *)(a2 + 8);
    v57 = *(std::__shared_weak_count **)(a2 + 16);
    if (v57)
    {
      v58 = (unint64_t *)&v57->__shared_owners_;
      do
        v59 = __ldxr(v58);
      while (__stxr(v59 + 1, v58));
      do
        v60 = __ldaxr(v58);
      while (__stlxr(v60 - 1, v58));
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
    }
    (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v56 + 88))(v56, 1, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v55 = *(float **)(a2 + 24);
  }
  v61 = v51 - 1;
  v62 = v52 - 1;
  if (v52 == 1)
  {
    v97 = v54;
    v76 = a3 + -1.0;
    v77 = v76 + v76;
    v78 = a4 + -1.0;
    v79 = v78 + v78;
    if (v51 == 1)
      goto LABEL_145;
    goto LABEL_111;
  }
  if (v51 != 1)
  {
    v63 = 0;
    v64 = a3 + -1.0;
    v65 = v64 + v64;
    v66 = a4 + -1.0;
    v67 = v66 + v66;
    v68 = v55 + 1;
    v97 = v54;
    v69 = 4 * v54;
    do
    {
      v70 = v68;
      v71 = v61;
      do
      {
        v72 = fmodf(fabsf(*(v70 - 1)), v64 + v64);
        if (v72 > v64)
          v72 = v65 - v72;
        *(v70 - 1) = v72;
        v73 = fmodf(fabsf(*v70), v66 + v66);
        if (v73 > v66)
          v73 = v67 - v73;
        *v70 = v73;
        v70 = (float *)((char *)v70 + v69);
        --v71;
      }
      while (v71);
      v74 = fmodf(fabsf(*(v70 - 1)), v64 + v64);
      if (v74 > v64)
        v74 = v65 - v74;
      *(v70 - 1) = v74;
      v75 = fmodf(fabsf(*v70), v66 + v66);
      if (v75 > v66)
        v75 = v67 - v75;
      *v70 = v75;
      v55 += v53;
      ++v63;
      v68 += v53;
    }
    while (v63 != v62);
    v76 = a3 + -1.0;
    v77 = v76 + v76;
    v78 = a4 + -1.0;
    v79 = v78 + v78;
    do
    {
LABEL_111:
      v84 = fmodf(fabsf(*v55), v77);
      if (v84 > v76)
        v84 = v77 - v84;
      *v55 = v84;
      v85 = fmodf(fabsf(v55[1]), v79);
      if (v85 > v78)
        v85 = v79 - v85;
      v55[1] = v85;
      v55 += v97;
      --v61;
    }
    while (v61);
    goto LABEL_145;
  }
  v76 = a3 + -1.0;
  v77 = v76 + v76;
  v78 = a4 + -1.0;
  v79 = v78 + v78;
  do
  {
    v93 = fmodf(fabsf(*v55), v76 + v76);
    if (v93 > v76)
      v93 = v77 - v93;
    *v55 = v93;
    v94 = fmodf(fabsf(v55[1]), v78 + v78);
    if (v94 > v78)
      v94 = v79 - v94;
    v55[1] = v94;
    v55 += v53;
    --v62;
  }
  while (v62);
LABEL_145:
  v95 = fmodf(fabsf(*v55), v77);
  if (v95 > v76)
    v95 = v77 - v95;
  *v55 = v95;
  v96 = fmodf(fabsf(v55[1]), v79);
  if (v96 > v78)
    v96 = v79 - v96;
  v55[1] = v96;
  result = v98;
  v98 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_21097DBA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21097DBD0(uint64_t a1, uint64_t a2, uint64_t a3, int a4, float (*a5)(__n128), __n128 a6, __n128 a7)
{
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  BOOL v21;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  _BYTE *v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t result;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  float *v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  _BYTE *v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  int v86;
  uint64_t v87;
  int v88;
  int v89;
  float *v90;
  float *v91;
  int v92;
  _BYTE *v93;
  uint64_t v94;
  unsigned int v95;
  float *v96;
  float v97;
  BOOL v98;
  unsigned int v99;
  float *v100;
  float v101;
  BOOL v102;
  float *v103;
  float v104;
  BOOL v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  unint64_t v123;
  int v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  float *v128;
  uint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  unint64_t v133;
  _BYTE *v134;
  uint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  unint64_t v139;
  int v140;
  uint64_t v141;
  int v142;
  int v143;
  float *v144;
  float *v145;
  int v146;
  _BYTE *v147;
  int v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  float (*v156[2])(__n128);
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  int v160;
  unint64_t v161;
  int v162;
  unint64_t v163;
  _QWORD v164[3];

  if (a4)
  {
    v9 = *(_QWORD *)(a2 + 8);
    if (v9)
    {
      v10 = *(std::__shared_weak_count **)(a2 + 16);
      if (!v10)
        goto LABEL_225;
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
      v9 = *(_QWORD *)(a2 + 8);
      v14 = *(std::__shared_weak_count **)(a2 + 16);
      if (!v14)
        goto LABEL_225;
      v15 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
      do
        v17 = __ldaxr(v15);
      while (__stlxr(v17 - 1, v15));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
        if (*(_BYTE *)(a2 + 73))
        {
LABEL_15:
          (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v9 + 96))(&v159, v9, 0);
          v18 = *(_QWORD *)(a3 + 8);
          if (!v18)
          {
LABEL_104:
            v164[0] = 0;
            if (!*(_DWORD *)(a2 + 32))
              goto LABEL_136;
LABEL_105:
            v70 = *(_DWORD *)(a2 + 36);
            if (v70)
            {
              v71 = *(_DWORD *)(a2 + 40);
              if (v71)
              {
                v72 = *(unsigned int *)(a2 + 48);
                v73 = *(unsigned int *)(a3 + 40);
                v150 = *(unsigned int *)(a2 + 52);
                v152 = *(unsigned int *)(a3 + 44);
                v74 = *(float **)(a2 + 24);
                if (*(_BYTE *)(a2 + 72) && v74)
                {
                  v75 = *(_QWORD *)(a2 + 8);
                  v76 = *(std::__shared_weak_count **)(a2 + 16);
                  if (v76)
                  {
                    v77 = (unint64_t *)&v76->__shared_owners_;
                    do
                      v78 = __ldxr(v77);
                    while (__stxr(v78 + 1, v77));
                    do
                      v79 = __ldaxr(v77);
                    while (__stlxr(v79 - 1, v77));
                    if (!v79)
                    {
                      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                      std::__shared_weak_count::__release_weak(v76);
                    }
                  }
                  (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v75 + 88))(v75, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
                  v74 = *(float **)(a2 + 24);
                }
                v80 = *(_BYTE **)(a3 + 24);
                if (*(_BYTE *)(a3 + 48) && v80)
                {
                  v81 = *(_QWORD *)(a3 + 8);
                  v82 = *(std::__shared_weak_count **)(a3 + 16);
                  if (v82)
                  {
                    v83 = (unint64_t *)&v82->__shared_owners_;
                    do
                      v84 = __ldxr(v83);
                    while (__stxr(v84 + 1, v83));
                    do
                      v85 = __ldaxr(v83);
                    while (__stlxr(v85 - 1, v83));
                    if (!v85)
                    {
                      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                      std::__shared_weak_count::__release_weak(v82);
                    }
                  }
                  (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v81 + 88))(v81, 1, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
                  v80 = *(_BYTE **)(a3 + 24);
                }
                v86 = v70 - 1;
                v87 = 4 * v72;
                v88 = v71 - 1;
                if (v71 != 1)
                {
                  if (v86)
                  {
                    v89 = 0;
                    v90 = v74 + 1;
                    v148 = v88;
                    do
                    {
                      v91 = v90;
                      v92 = v86;
                      v93 = v80;
                      do
                      {
                        *v93 = llroundf(((float (*)(uint64_t, float, float))a5)(a1, *(v91 - 1), *v91));
                        v93 += v73;
                        v91 = (float *)((char *)v91 + v87);
                        --v92;
                      }
                      while (v92);
                      *v93 = llroundf(((float (*)(uint64_t, float, float))a5)(a1, *(v91 - 1), *v91));
                      v74 += v150;
                      v80 += v152;
                      ++v89;
                      v90 += v150;
                    }
                    while (v89 != v148);
                  }
                  else
                  {
                    do
                    {
                      *v80 = llroundf(((float (*)(uint64_t, float, float))a5)(a1, *v74, v74[1]));
                      v80 += v152;
                      v74 += v150;
                      --v88;
                    }
                    while (v88);
                  }
                }
                for (; v86; --v86)
                {
                  *v80 = llroundf(((float (*)(uint64_t, float, float))a5)(a1, *v74, v74[1]));
                  v80 += v73;
                  v74 = (float *)((char *)v74 + v87);
                }
                *v80 = llroundf(((float (*)(uint64_t, float, float))a5)(a1, *v74, v74[1]));
              }
            }
            goto LABEL_136;
          }
LABEL_89:
          v62 = *(std::__shared_weak_count **)(a3 + 16);
          if (!v62)
            goto LABEL_100;
          v63 = (unint64_t *)&v62->__shared_owners_;
          do
            v64 = __ldxr(v63);
          while (__stxr(v64 + 1, v63));
          do
            v65 = __ldaxr(v63);
          while (__stlxr(v65 - 1, v63));
          if (!v65)
          {
            ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
            std::__shared_weak_count::__release_weak(v62);
          }
          v18 = *(_QWORD *)(a3 + 8);
          v66 = *(std::__shared_weak_count **)(a3 + 16);
          if (!v66)
            goto LABEL_100;
          v67 = (unint64_t *)&v66->__shared_owners_;
          do
            v68 = __ldxr(v67);
          while (__stxr(v68 + 1, v67));
          do
            v69 = __ldaxr(v67);
          while (__stlxr(v69 - 1, v67));
          if (!v69)
          {
            ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
            std::__shared_weak_count::__release_weak(v66);
            if (!*(_BYTE *)(a3 + 49))
              goto LABEL_104;
          }
          else
          {
LABEL_100:
            if (!*(_BYTE *)(a3 + 49))
              goto LABEL_104;
          }
          (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v18 + 96))(v164, v18, 1);
          if (!*(_DWORD *)(a2 + 32))
            goto LABEL_136;
          goto LABEL_105;
        }
      }
      else
      {
LABEL_225:
        if (*(_BYTE *)(a2 + 73))
          goto LABEL_15;
      }
    }
    v159 = 0;
    v18 = *(_QWORD *)(a3 + 8);
    if (!v18)
      goto LABEL_104;
    goto LABEL_89;
  }
  v19 = *(_QWORD *)(a2 + 24);
  a7.n128_u32[0] = *(_DWORD *)v19;
  if (*(float *)v19 < 0.0)
    goto LABEL_26;
  v20 = *(float *)(v19 + 4);
  a6.n128_f32[0] = (float)*(unsigned int *)(a1 + 32) + -1.0;
  v21 = v20 < 0.0 || a6.n128_f32[0] < a7.n128_f32[0];
  a7.n128_f32[0] = (float)*(unsigned int *)(a1 + 36) + -1.0;
  if (v21 || a7.n128_f32[0] < v20)
    goto LABEL_26;
  v95 = *(_DWORD *)(a2 + 64) * (*(_DWORD *)(a2 + 56) - 1);
  v96 = (float *)(v19 + 4 * v95);
  if (*v96 < 0.0)
    goto LABEL_26;
  v97 = v96[1];
  v98 = a7.n128_f32[0] < v97 || a6.n128_f32[0] < *v96;
  if (v98
    || v97 < 0.0
    || (v99 = *(_DWORD *)(a2 + 68) * (*(_DWORD *)(a2 + 60) - 1), v100 = (float *)(v19 + 4 * v99), *v100 < 0.0)
    || ((v101 = v100[1], a7.n128_f32[0] >= v101) ? (v102 = a6.n128_f32[0] < *v100) : (v102 = 1),
        v102
     || v101 < 0.0
     || (v103 = (float *)(v19 + 4 * (v99 + v95)), *v103 < 0.0)
     || ((v104 = v103[1], a7.n128_f32[0] >= v104) ? (v105 = a6.n128_f32[0] < *v103) : (v105 = 1), v105 || v104 < 0.0)))
  {
LABEL_26:
    v156[0] = (float (*)(__n128))a1;
    v156[1] = a5;
    v23 = *(_QWORD *)(a2 + 8);
    if (!v23)
      goto LABEL_42;
    v24 = *(std::__shared_weak_count **)(a2 + 16);
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
      do
        v27 = __ldaxr(v25);
      while (__stlxr(v27 - 1, v25));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *, __n128, __n128))v24->__on_zero_shared)(v24, a6, a7);
        std::__shared_weak_count::__release_weak(v24);
      }
      v23 = *(_QWORD *)(a2 + 8);
      v28 = *(std::__shared_weak_count **)(a2 + 16);
      if (v28)
      {
        v29 = (unint64_t *)&v28->__shared_owners_;
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
        do
          v31 = __ldaxr(v29);
        while (__stlxr(v31 - 1, v29));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *, __n128, __n128))v28->__on_zero_shared)(v28, a6, a7);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
    }
    if (*(_BYTE *)(a2 + 73))
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD, __n128, __n128))(*(_QWORD *)v23 + 96))(&v158, v23, 0, a6, a7);
      v32 = *(_QWORD *)(a3 + 8);
      if (!v32)
        goto LABEL_58;
    }
    else
    {
LABEL_42:
      v158 = 0;
      v32 = *(_QWORD *)(a3 + 8);
      if (!v32)
        goto LABEL_58;
    }
    v33 = *(std::__shared_weak_count **)(a3 + 16);
    if (v33)
    {
      v34 = (unint64_t *)&v33->__shared_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
      do
        v36 = __ldaxr(v34);
      while (__stlxr(v36 - 1, v34));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
      v32 = *(_QWORD *)(a3 + 8);
      v37 = *(std::__shared_weak_count **)(a3 + 16);
      if (v37)
      {
        v38 = (unint64_t *)&v37->__shared_owners_;
        do
          v39 = __ldxr(v38);
        while (__stxr(v39 + 1, v38));
        do
          v40 = __ldaxr(v38);
        while (__stlxr(v40 - 1, v38));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
    }
    if (*(_BYTE *)(a3 + 49))
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v32 + 96))(&v157, v32, 1);
      if (!*(_DWORD *)(a2 + 32))
        goto LABEL_83;
      goto LABEL_59;
    }
LABEL_58:
    v157 = 0;
    if (!*(_DWORD *)(a2 + 32))
      goto LABEL_83;
LABEL_59:
    v41 = *(_DWORD *)(a2 + 36);
    if (v41)
    {
      v42 = *(_DWORD *)(a2 + 40);
      if (v42)
      {
        v43 = *(unsigned int *)(a2 + 48);
        v159 = *(unsigned int *)(a2 + 44);
        v160 = v41 - 1;
        v44 = *(unsigned int *)(a3 + 44);
        v161 = v43 | ((unint64_t)*(unsigned int *)(a3 + 40) << 32);
        v162 = v42 - 1;
        v163 = *(unsigned int *)(a2 + 52) | (unint64_t)(v44 << 32);
        v45 = *(_QWORD *)(a2 + 24);
        if (*(_BYTE *)(a2 + 72) && v45)
        {
          v46 = *(_QWORD *)(a2 + 8);
          v47 = *(std::__shared_weak_count **)(a2 + 16);
          if (v47)
          {
            v48 = (unint64_t *)&v47->__shared_owners_;
            do
              v49 = __ldxr(v48);
            while (__stxr(v49 + 1, v48));
            do
              v50 = __ldaxr(v48);
            while (__stlxr(v50 - 1, v48));
            if (!v50)
            {
              ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
              std::__shared_weak_count::__release_weak(v47);
            }
          }
          (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v46 + 88))(v46, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
          v45 = *(_QWORD *)(a2 + 24);
        }
        v51 = *(_BYTE **)(a3 + 24);
        if (*(_BYTE *)(a3 + 48) && v51)
        {
          v52 = *(_QWORD *)(a3 + 8);
          v53 = *(std::__shared_weak_count **)(a3 + 16);
          if (v53)
          {
            v54 = (unint64_t *)&v53->__shared_owners_;
            do
              v55 = __ldxr(v54);
            while (__stxr(v55 + 1, v54));
            do
              v56 = __ldaxr(v54);
            while (__stlxr(v56 - 1, v54));
            if (!v56)
            {
              ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
              std::__shared_weak_count::__release_weak(v53);
            }
          }
          (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v52 + 88))(v52, 1, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
          v51 = *(_BYTE **)(a3 + 24);
        }
        memset(v164, 0, sizeof(v164));
        v57 = v162;
        if (v162)
        {
          v58 = HIDWORD(v163);
          v59 = 4 * v163;
          do
          {
            sub_21097EA5C(&v159, v164, v156, v45, v51, a6);
            v51 += v58;
            v45 += v59;
            --v57;
          }
          while (v57);
        }
        sub_21097EA5C(&v159, v164, v156, v45, v51, a6);
      }
    }
LABEL_83:
    v60 = v157;
    v157 = 0;
    if (v60)
      (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
    result = v158;
    v158 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    return result;
  }
  v106 = *(_QWORD *)(a2 + 8);
  if (!v106)
    goto LABEL_174;
  v107 = *(std::__shared_weak_count **)(a2 + 16);
  if (v107)
  {
    v108 = (unint64_t *)&v107->__shared_owners_;
    do
      v109 = __ldxr(v108);
    while (__stxr(v109 + 1, v108));
    do
      v110 = __ldaxr(v108);
    while (__stlxr(v110 - 1, v108));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v107->__on_zero_shared)(v107, a6);
      std::__shared_weak_count::__release_weak(v107);
    }
    v106 = *(_QWORD *)(a2 + 8);
    v111 = *(std::__shared_weak_count **)(a2 + 16);
    if (v111)
    {
      v112 = (unint64_t *)&v111->__shared_owners_;
      do
        v113 = __ldxr(v112);
      while (__stxr(v113 + 1, v112));
      do
        v114 = __ldaxr(v112);
      while (__stlxr(v114 - 1, v112));
      if (!v114)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v111->__on_zero_shared)(v111, a6);
        std::__shared_weak_count::__release_weak(v111);
      }
    }
  }
  if (*(_BYTE *)(a2 + 73))
    (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD, __n128))(*(_QWORD *)v106 + 96))(&v159, v106, 0, a6);
  else
LABEL_174:
    v159 = 0;
  v115 = *(_QWORD *)(a3 + 8);
  if (!v115)
    goto LABEL_190;
  v116 = *(std::__shared_weak_count **)(a3 + 16);
  if (v116)
  {
    v117 = (unint64_t *)&v116->__shared_owners_;
    do
      v118 = __ldxr(v117);
    while (__stxr(v118 + 1, v117));
    do
      v119 = __ldaxr(v117);
    while (__stlxr(v119 - 1, v117));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
    v115 = *(_QWORD *)(a3 + 8);
    v120 = *(std::__shared_weak_count **)(a3 + 16);
    if (v120)
    {
      v121 = (unint64_t *)&v120->__shared_owners_;
      do
        v122 = __ldxr(v121);
      while (__stxr(v122 + 1, v121));
      do
        v123 = __ldaxr(v121);
      while (__stlxr(v123 - 1, v121));
      if (!v123)
      {
        ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
        std::__shared_weak_count::__release_weak(v120);
      }
    }
  }
  if (*(_BYTE *)(a3 + 49))
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v115 + 96))(v164, v115, 1);
  else
LABEL_190:
    v164[0] = 0;
  if (*(_DWORD *)(a2 + 32))
  {
    v124 = *(_DWORD *)(a2 + 36);
    if (v124)
    {
      v125 = *(_DWORD *)(a2 + 40);
      if (v125)
      {
        v126 = *(unsigned int *)(a2 + 48);
        v127 = *(unsigned int *)(a3 + 40);
        v151 = *(unsigned int *)(a2 + 52);
        v153 = *(unsigned int *)(a3 + 44);
        v128 = *(float **)(a2 + 24);
        if (*(_BYTE *)(a2 + 72) && v128)
        {
          v129 = *(_QWORD *)(a2 + 8);
          v130 = *(std::__shared_weak_count **)(a2 + 16);
          if (v130)
          {
            v131 = (unint64_t *)&v130->__shared_owners_;
            do
              v132 = __ldxr(v131);
            while (__stxr(v132 + 1, v131));
            do
              v133 = __ldaxr(v131);
            while (__stlxr(v133 - 1, v131));
            if (!v133)
            {
              ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
              std::__shared_weak_count::__release_weak(v130);
            }
          }
          (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v129 + 88))(v129, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
          v128 = *(float **)(a2 + 24);
        }
        v134 = *(_BYTE **)(a3 + 24);
        if (*(_BYTE *)(a3 + 48) && v134)
        {
          v135 = *(_QWORD *)(a3 + 8);
          v136 = *(std::__shared_weak_count **)(a3 + 16);
          if (v136)
          {
            v137 = (unint64_t *)&v136->__shared_owners_;
            do
              v138 = __ldxr(v137);
            while (__stxr(v138 + 1, v137));
            do
              v139 = __ldaxr(v137);
            while (__stlxr(v139 - 1, v137));
            if (!v139)
            {
              ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
              std::__shared_weak_count::__release_weak(v136);
            }
          }
          (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v135 + 88))(v135, 1, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
          v134 = *(_BYTE **)(a3 + 24);
        }
        v140 = v124 - 1;
        v141 = 4 * v126;
        v142 = v125 - 1;
        if (v125 != 1)
        {
          if (v140)
          {
            v143 = 0;
            v144 = v128 + 1;
            v149 = v125 - 1;
            do
            {
              v145 = v144;
              v146 = v140;
              v147 = v134;
              do
              {
                *v147 = llroundf(((float (*)(uint64_t, float, float))a5)(a1, *(v145 - 1), *v145));
                v147 += v127;
                v145 = (float *)((char *)v145 + v141);
                --v146;
              }
              while (v146);
              *v147 = llroundf(((float (*)(uint64_t, float, float))a5)(a1, *(v145 - 1), *v145));
              v128 += v151;
              v134 += v153;
              ++v143;
              v144 += v151;
            }
            while (v143 != v149);
          }
          else
          {
            do
            {
              *v134 = llroundf(((float (*)(uint64_t, float, float))a5)(a1, *v128, v128[1]));
              v134 += v153;
              v128 += v151;
              --v142;
            }
            while (v142);
          }
        }
        for (; v140; --v140)
        {
          *v134 = llroundf(((float (*)(uint64_t, float, float))a5)(a1, *v128, v128[1]));
          v134 += v127;
          v128 = (float *)((char *)v128 + v141);
        }
        *v134 = llroundf(((float (*)(uint64_t, float, float))a5)(a1, *v128, v128[1]));
      }
    }
  }
LABEL_136:
  v94 = v164[0];
  v164[0] = 0;
  if (v94)
    (*(void (**)(uint64_t))(*(_QWORD *)v94 + 8))(v94);
  result = v159;
  v159 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_21097E7DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a20)
    (*(void (**)(uint64_t))(*(_QWORD *)a20 + 8))(a20);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21097E884@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  int v3;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  _BOOL8 v19;
  uint64_t v20;
  uint64_t result;
  _DWORD v22[2];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v3 = a2;
  if (a1[2] <= a2
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/PatchCropping/include/LearnedFeatures/PatchCropping/ImagePatches.h", 82, (uint64_t)"i < num_allocated_patches", 25, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
  v6 = a1[4];
  if (v6)
  {
    v7 = (std::__shared_weak_count *)a1[5];
    if (!v7)
      goto LABEL_28;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    v6 = a1[4];
    v11 = (std::__shared_weak_count *)a1[5];
    if (!v11)
      goto LABEL_28;
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    do
      v14 = __ldaxr(v12);
    while (__stlxr(v14 - 1, v12));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if (*((_BYTE *)a1 + 73))
        goto LABEL_16;
    }
    else
    {
LABEL_28:
      if (*((_BYTE *)a1 + 73))
      {
LABEL_16:
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(&v23, v6, 1);
        goto LABEL_19;
      }
    }
  }
  v23 = 0;
LABEL_19:
  v15 = a1[6] + (*((_DWORD *)a1 + 17) * v3);
  v16 = *a1;
  v22[0] = v16;
  v22[1] = v16;
  v25 = v15;
  *a3 = &off_24CA7AAC0;
  v17 = (uint64_t)(a3 + 1);
  v18 = (_DWORD)v16 == 0;
  v19 = (_DWORD)v16 != 0;
  v20 = v16 << 32;
  if (v18)
    v20 = 0;
  v24 = v20 | v19;
  sub_2108FE228(&v25, v22, &v24, v17);
  result = v23;
  v23 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_21097EA38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_21097EA5C(_DWORD *a1, _QWORD *a2, float (**a3)(__n128), uint64_t a4, _BYTE *a5, __n128 a6)
{
  uint64_t v7;
  unsigned int v10;
  unsigned int i;
  float v13;
  BOOL v14;
  float v16;

  v7 = a4;
  *a2 = a4;
  v10 = a1[2];
  if (v10)
  {
    for (i = 0; i < v10; ++i)
    {
      *a2 = v7;
      a2[2] = a5;
      a6.n128_u32[0] = *(_DWORD *)v7;
      if (*(float *)v7 >= 0.0)
      {
        v13 = *(float *)(v7 + 4);
        v14 = v13 < 0.0 || (float)((float)*((unsigned int *)*a3 + 8) + -1.0) < a6.n128_f32[0];
        if (!v14 && (float)((float)*((unsigned int *)*a3 + 9) + -1.0) >= v13)
        {
          *a5 = llroundf(a3[1](a6));
          v10 = a1[2];
        }
      }
      v7 += 4 * a1[3];
      a5 += a1[4];
    }
  }
  *a2 = v7;
  a2[2] = a5;
  a6.n128_u32[0] = *(_DWORD *)v7;
  if (*(float *)v7 >= 0.0)
  {
    v16 = *(float *)(v7 + 4);
    if (v16 >= 0.0
      && (float)((float)*((unsigned int *)*a3 + 8) + -1.0) >= a6.n128_f32[0]
      && (float)((float)*((unsigned int *)*a3 + 9) + -1.0) >= v16)
    {
      *a5 = llroundf(a3[1](a6));
    }
  }
}

uint64_t sub_21097EB9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;
  char v12;
  _BOOL8 v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unsigned __int8 v65;
  __int16 v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  __int128 v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v82;
  uint64_t (**v83)();
  __int128 v84;
  _BYTE v85[40];
  uint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  uint64_t v90;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = &off_24CA7AAC0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 58) = 0u;
  v8 = operator new();
  v9 = *(unsigned __int8 *)(a4 + 1);
  v10 = a2 * a2;
  *(_QWORD *)v8 = &off_24CA820A0;
  v11 = (_QWORD *)(v8 + 8);
  if (!v9)
  {
    v21 = v10 << 32;
    if (!(_DWORD)a3)
      v21 = 0;
    v88 = v10 & 0xFFFFFFFD | (unint64_t)(a3 << 32);
    v89 = (std::__shared_weak_count *)(v21 | ((_DWORD)v10 != 0));
    sub_2108DE9EC((uint64_t)&v83, (uint64_t)&v88);
    v22 = operator new();
    v23 = v22;
    *(_QWORD *)v22 = off_24CA7AED0;
    v24 = *(unsigned int *)&v85[16];
    *(_DWORD *)(v22 + 8) = v84;
    *(_BYTE *)(v22 + 16) = 0;
    *(_DWORD *)(v22 + 40) = -1;
    if ((_DWORD)v24 == -1)
    {
      *(_OWORD *)(v22 + 48) = *(_OWORD *)&v85[24];
      *(_QWORD *)v22 = off_24CA7D688;
      v86 = v22;
    }
    else
    {
      ((void (*)(unint64_t *, uint64_t, char *))off_24CA82188[v24])(&v88, v22 + 16, (char *)&v84 + 8);
      *(_DWORD *)(v23 + 40) = v24;
      v25 = *(unsigned int *)&v85[16];
      *(_OWORD *)(v23 + 48) = *(_OWORD *)&v85[24];
      *(_QWORD *)v23 = off_24CA7D688;
      v86 = v23;
      v83 = (uint64_t (**)())off_24CA7AED0;
      if ((_DWORD)v25 != -1)
        ((void (*)(unint64_t *, char *))off_24CA7C080[v25])(&v88, (char *)&v84 + 8);
    }
    v83 = (uint64_t (**)())v23;
    v36 = (std::__shared_weak_count *)operator new();
    v36->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    v36->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA7C1E8;
    v36->__shared_weak_owners_ = 0;
    v36[1].__vftable = (std::__shared_weak_count_vtbl *)v23;
    v86 = 0;
    v83 = 0;
    *(_QWORD *)&v84 = 0;
    *(_QWORD *)(v8 + 8) = v23;
    *(_QWORD *)(v8 + 16) = v36;
    do
      v38 = __ldxr(p_shared_owners);
    while (__stxr(v38 + 1, p_shared_owners));
    *(_QWORD *)(v8 + 24) = 0;
    (*(void (**)(unint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v23 + 64))(&v88, v23, 1);
    v39 = *(_QWORD *)(v88 + 16);
    *(_OWORD *)(v8 + 32) = *(_OWORD *)v88;
    *(_QWORD *)(v8 + 48) = v39;
    v88 = 0;
    MEMORY[0x212BCC6FC]();
    *(_QWORD *)(v8 + 56) = *(_QWORD *)(v8 + 32);
    *(_OWORD *)(v8 + 64) = *(_OWORD *)(v8 + 40);
    do
      v40 = __ldaxr(p_shared_owners);
    while (__stlxr(v40 - 1, p_shared_owners));
    if (v40)
    {
      v41 = (std::__shared_weak_count *)v84;
      if (!(_QWORD)v84)
        goto LABEL_45;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
      v41 = (std::__shared_weak_count *)v84;
      if (!(_QWORD)v84)
        goto LABEL_45;
    }
    v42 = (unint64_t *)&v41->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
      v34 = v86;
      v86 = 0;
      if (!v34)
        goto LABEL_49;
      goto LABEL_46;
    }
LABEL_45:
    v34 = v86;
    v86 = 0;
    if (!v34)
      goto LABEL_49;
LABEL_46:
    *(_QWORD *)v34 = off_24CA7AED0;
    v35 = *(unsigned int *)(v34 + 40);
    if ((_DWORD)v35 != -1)
LABEL_47:
      ((void (*)(unint64_t *, uint64_t))off_24CA7C080[v35])(&v88, v34 + 16);
LABEL_48:
    *(_DWORD *)(v34 + 40) = -1;
    MEMORY[0x212BCC6FC](v34, 0x10A3C40A1F8E8FFLL);
    goto LABEL_49;
  }
  v12 = *(_BYTE *)a4;
  v13 = (_DWORD)v10 != 0;
  if (v10 <= 0x20)
    v14 = 32;
  else
    v14 = v10;
  v15 = v10 & 0xFFFFFFFD | (unint64_t)(a3 << 32);
  v83 = off_24CA7D688;
  if ((_DWORD)a3)
    v16 = v14;
  else
    v16 = 32;
  v88 = v15;
  v89 = (std::__shared_weak_count *)(v13 | (v16 << 32));
  sub_2108D022C((uint64_t)&v83, 0, 1, (unsigned int *)&v88, v12);
  v83 = off_24CA7D688;
  v17 = operator new();
  v18 = v17;
  *(_QWORD *)v17 = off_24CA7AED0;
  v19 = *(unsigned int *)&v85[16];
  *(_DWORD *)(v17 + 8) = v84;
  *(_BYTE *)(v17 + 16) = 0;
  *(_DWORD *)(v17 + 40) = -1;
  if ((_DWORD)v19 == -1)
  {
    *(_OWORD *)(v17 + 48) = *(_OWORD *)&v85[24];
    *(_QWORD *)v17 = off_24CA7D688;
    v86 = v17;
  }
  else
  {
    ((void (*)(unint64_t *, uint64_t, char *))off_24CA82188[v19])(&v88, v17 + 16, (char *)&v84 + 8);
    *(_DWORD *)(v18 + 40) = v19;
    v20 = *(unsigned int *)&v85[16];
    *(_OWORD *)(v18 + 48) = *(_OWORD *)&v85[24];
    *(_QWORD *)v18 = off_24CA7D688;
    v86 = v18;
    v83 = (uint64_t (**)())off_24CA7AED0;
    if ((_DWORD)v20 != -1)
      ((void (*)(unint64_t *, char *))off_24CA7C080[v20])(&v88, (char *)&v84 + 8);
  }
  v83 = (uint64_t (**)())v18;
  v26 = (std::__shared_weak_count *)operator new();
  v26->__shared_owners_ = 0;
  v27 = (unint64_t *)&v26->__shared_owners_;
  v26->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA7C1E8;
  v26->__shared_weak_owners_ = 0;
  v26[1].__vftable = (std::__shared_weak_count_vtbl *)v18;
  v86 = 0;
  v83 = 0;
  *(_QWORD *)&v84 = 0;
  *(_QWORD *)(v8 + 8) = v18;
  *(_QWORD *)(v8 + 16) = v26;
  do
    v28 = __ldxr(v27);
  while (__stxr(v28 + 1, v27));
  *(_QWORD *)(v8 + 24) = 0;
  (*(void (**)(unint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v18 + 64))(&v88, v18, 1);
  v29 = *(_QWORD *)(v88 + 16);
  *(_OWORD *)(v8 + 32) = *(_OWORD *)v88;
  *(_QWORD *)(v8 + 48) = v29;
  v88 = 0;
  MEMORY[0x212BCC6FC]();
  *(_QWORD *)(v8 + 56) = *(_QWORD *)(v8 + 32);
  *(_OWORD *)(v8 + 64) = *(_OWORD *)(v8 + 40);
  do
    v30 = __ldaxr(v27);
  while (__stlxr(v30 - 1, v27));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
    v31 = (std::__shared_weak_count *)v84;
    if (!(_QWORD)v84)
      goto LABEL_28;
LABEL_25:
    v32 = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
      v34 = v86;
      v86 = 0;
      if (!v34)
        goto LABEL_49;
LABEL_29:
      *(_QWORD *)v34 = off_24CA7AED0;
      v35 = *(unsigned int *)(v34 + 40);
      if ((_DWORD)v35 != -1)
        goto LABEL_47;
      goto LABEL_48;
    }
    goto LABEL_28;
  }
  v31 = (std::__shared_weak_count *)v84;
  if ((_QWORD)v84)
    goto LABEL_25;
LABEL_28:
  v34 = v86;
  v86 = 0;
  if (v34)
    goto LABEL_29;
LABEL_49:
  *(_QWORD *)(a1 + 80) = v8;
  *(_QWORD *)(a1 + 88) = sub_21097F584;
  v45 = *(_QWORD *)(v8 + 8);
  v44 = *(std::__shared_weak_count **)(v8 + 16);
  if (!v44)
    goto LABEL_54;
  v46 = (unint64_t *)&v44->__shared_owners_;
  do
    v47 = __ldxr(v46);
  while (__stxr(v47 + 1, v46));
  do
    v48 = __ldaxr(v46);
  while (__stlxr(v48 - 1, v46));
  if (v48)
  {
LABEL_54:
    if (v45)
      goto LABEL_55;
LABEL_67:
    v82 = 0;
    v83 = &off_24CA7AAC0;
    v58 = *(_QWORD *)(a1 + 80);
    v51 = *(_QWORD *)(v58 + 8);
    v50 = *(std::__shared_weak_count **)(v58 + 16);
    v88 = v51;
    v89 = v50;
    if (v50)
      goto LABEL_56;
LABEL_68:
    v86 = v51;
    v87 = 0;
    v84 = (unint64_t)v51;
    goto LABEL_69;
  }
  ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
  std::__shared_weak_count::__release_weak(v44);
  if (!v45)
    goto LABEL_67;
LABEL_55:
  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*v11 + 96))(&v82, *v11, 1);
  v49 = *(_QWORD *)(a1 + 80);
  v83 = &off_24CA7AAC0;
  v51 = *(_QWORD *)(v49 + 8);
  v50 = *(std::__shared_weak_count **)(v49 + 16);
  v88 = v51;
  v89 = v50;
  if (!v50)
    goto LABEL_68;
LABEL_56:
  v52 = (unint64_t *)&v50->__shared_owners_;
  do
    v53 = __ldxr(v52);
  while (__stxr(v53 + 1, v52));
  v86 = v51;
  v87 = v50;
  do
    v54 = __ldxr(v52);
  while (__stxr(v54 + 1, v52));
  do
    v55 = __ldxr(v52);
  while (__stxr(v55 + 1, v52));
  *(_QWORD *)&v84 = v51;
  *((_QWORD *)&v84 + 1) = v50;
  do
    v56 = __ldxr(v52);
  while (__stxr(v56 + 1, v52));
  do
    v57 = __ldaxr(v52);
  while (__stlxr(v57 - 1, v52));
  if (!v57)
  {
    ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
    std::__shared_weak_count::__release_weak(v50);
  }
LABEL_69:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v51 + 64))(&v90, v51, 1);
  v59 = *(_QWORD *)(v90 + 16);
  *(_OWORD *)v85 = *(_OWORD *)v90;
  *(_QWORD *)&v85[16] = v59;
  v90 = 0;
  MEMORY[0x212BCC6FC]();
  v60 = v84;
  if (*((_QWORD *)&v84 + 1))
  {
    v61 = (unint64_t *)(*((_QWORD *)&v84 + 1) + 8);
    do
      v62 = __ldxr(v61);
    while (__stxr(v62 + 1, v61));
    do
      v63 = __ldaxr(v61);
    while (__stlxr(v63 - 1, v61));
    if (!v63)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v60 + 1) + 16))(*((_QWORD *)&v60 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v60 + 1));
    }
  }
  v64 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v60 + 104))(v60);
  v65 = v64;
  if ((v64 & 0xFFFFFF) <= 0x10000)
    v65 = 0;
  v66 = v64 & 0xFF00;
  if ((v64 & 0xFF0000) == 0)
    v66 = 0;
  *(_WORD *)&v85[24] = v66 & 0xFF00 | v65;
  v67 = v87;
  if (v87)
  {
    v68 = (unint64_t *)&v87->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = v89;
  if (v89)
  {
    v71 = (unint64_t *)&v89->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v73 = v84;
  v84 = 0uLL;
  v74 = *(std::__shared_weak_count **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = v73;
  if (v74)
  {
    v75 = (unint64_t *)&v74->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  *(_OWORD *)(a1 + 48) = *(_OWORD *)v85;
  *(_OWORD *)(a1 + 58) = *(_OWORD *)&v85[10];
  v77 = (std::__shared_weak_count *)*((_QWORD *)&v84 + 1);
  if (*((_QWORD *)&v84 + 1))
  {
    v78 = (unint64_t *)(*((_QWORD *)&v84 + 1) + 8);
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  v80 = v82;
  v82 = 0;
  if (v80)
    (*(void (**)(uint64_t))(*(_QWORD *)v80 + 8))(v80);
  return a1;
}

void sub_21097F44C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  sub_2108A894C(v4);
  do
    v8 = __ldaxr(v6);
  while (__stlxr(v8 - 1, v6));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  sub_2108A894C((uint64_t)va);
  sub_21097F764((uint64_t *)va1);
  MEMORY[0x212BCC6FC](v3, 0x10F0C407947B7F5);
  sub_210974754(v2);
  _Unwind_Resume(a1);
}

void sub_21097F514(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_210974754(v1);
  _Unwind_Resume(a1);
}

void sub_21097F528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  va_list va;
  uint64_t v16;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v14 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  sub_2108A894C(v11);
  sub_2108A894C((uint64_t)va);
  sub_2108A894C((uint64_t)va1);
  if (a2)
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
  v13 = *(_QWORD *)(v10 + 80);
  *(_QWORD *)(v10 + 80) = 0;
  if (v13)
    (*(void (**)(void))(v10 + 88))();
  sub_210974754(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_21097F584(uint64_t result)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  if (result)
  {
    v1 = *(std::__shared_weak_count **)(result + 16);
    if (v1)
    {
      p_shared_owners = (unint64_t *)&v1->__shared_owners_;
      do
        v3 = __ldaxr(p_shared_owners);
      while (__stlxr(v3 - 1, p_shared_owners));
      if (!v3)
      {
        ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
        std::__shared_weak_count::__release_weak(v1);
      }
    }
    JUMPOUT(0x212BCC6FCLL);
  }
  return result;
}

uint64_t sub_21097F5F4(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_21097F65C(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BCC6FCLL);
}

uint64_t sub_21097F6C4()
{
  return 1;
}

uint64_t sub_21097F6CC(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_21097F6D4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 64);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 76);
  return result;
}

uint64_t sub_21097F6E8(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

uint64_t *sub_21097F764(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    *(_QWORD *)v2 = off_24CA7AED0;
    v3 = *(unsigned int *)(v2 + 40);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))off_24CA7C080[v3])(&v5, v2 + 16);
    *(_DWORD *)(v2 + 40) = -1;
    MEMORY[0x212BCC6FC](v2, 0x10A3C40A1F8E8FFLL);
  }
  return a1;
}

uint64_t *sub_21097F7EC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  *a1 = 0;
  a1[1] = a3;
  a1[2] = a4;
  *((_WORD *)a1 + 12) = a5;
  v7 = operator new();
  *(_QWORD *)(v7 + 24) = v7;
  *(_QWORD *)v7 = &off_24CA821B8;
  *(_QWORD *)(v7 + 8) = a1;
  *(_OWORD *)(v7 + 32) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_QWORD *)(v7 + 64) = a2;
  *(_QWORD *)(v7 + 72) = 850045863;
  *(_OWORD *)(v7 + 80) = 0u;
  *(_OWORD *)(v7 + 96) = 0u;
  *(_OWORD *)(v7 + 112) = 0u;
  *(_QWORD *)(v7 + 128) = 0;
  v8 = *a1;
  *a1 = v7;
  if (v8)
  {
    std::mutex::~mutex((std::mutex *)(v8 + 72));
    v9 = sub_21097F9CC((_QWORD *)v8);
    MEMORY[0x212BCC6FC](v9, 0x1020C40A43346C3);
  }
  return a1;
}

void sub_21097F89C(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;
  _QWORD *v4;

  v3 = *v1;
  *v1 = 0;
  if (v3)
  {
    std::mutex::~mutex((std::mutex *)(v3 + 72));
    v4 = sub_21097F9CC((_QWORD *)v3);
    MEMORY[0x212BCC6FC](v4, 0x1020C40A43346C3);
  }
  _Unwind_Resume(exception_object);
}

void sub_21097F8DC()
{
  JUMPOUT(0x212BCC6FCLL);
}

_QWORD *sub_21097F8F0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24CA821B8;
  result[1] = v3;
  return result;
}

uint64_t sub_21097F924(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24CA821B8;
  a2[1] = v2;
  return result;
}

uint64_t sub_21097F940@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21097EB9C(a2, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16), *(_QWORD *)(a1 + 8) + 24);
}

uint64_t sub_21097F954(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d2lf2pc16ImagePatchesPoolIhEC1EmmmNSt3__18optionalIhEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d2lf2pc16ImagePatchesPoolIhEC1EmmmNSt3__18optionalIhEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d2lf2pc16ImagePatchesPoolIhEC1EmmmNSt3__18optionalIhEEEUlvE_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d2lf2pc16ImagePatchesPoolIhEC1EmmmNSt3__18optionalIhEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_21097F9C0()
{
  return &unk_24CA82228;
}

_QWORD *sub_21097F9CC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v2 = a1[4];
  if (v2)
  {
    v3 = a1[5];
    v4 = (void *)a1[4];
    if (v3 != v2)
    {
      do
      {
        v5 = *(_QWORD *)(v3 - 16);
        *(_QWORD *)(v3 - 16) = 0;
        if (v5)
          (*(void (**)(void))(v3 - 8))();
        v6 = *(std::__shared_weak_count **)(v3 - 56);
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v3 -= 96;
      }
      while (v3 != v2);
      v4 = (void *)a1[4];
    }
    a1[5] = v2;
    operator delete(v4);
  }
  v9 = (_QWORD *)a1[3];
  if (v9 == a1)
  {
    v10 = 4;
    v9 = a1;
    goto LABEL_18;
  }
  if (v9)
  {
    v10 = 5;
LABEL_18:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  return a1;
}

void sub_21097FAA8(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  std::runtime_error *exception;
  __int128 v17;
  __int128 v18;
  _BYTE v19[26];
  __int128 v20;
  uint64_t v21;

  v4 = a1[5];
  if (a1[4] == v4)
  {
    v14 = a1[7];
    if (v14 >= a1[8])
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Allocated object exceeds max pool size.");
      __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
    }
    a1[7] = v14 + 1;
    v15 = a1[3];
    if (!v15)
      sub_2108B30F0();
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 48))(v15);
  }
  else
  {
    v20 = *(_OWORD *)(v4 - 96);
    v21 = *(_QWORD *)(v4 - 80);
    v6 = *(_OWORD *)(v4 - 64);
    v5 = *(_OWORD *)(v4 - 48);
    *(_QWORD *)(v4 - 64) = 0;
    *(_QWORD *)(v4 - 56) = 0;
    *(_OWORD *)v19 = v5;
    *(_OWORD *)&v19[10] = *(_OWORD *)(v4 - 38);
    v7 = *(_QWORD *)(v4 - 16);
    v8 = *(_QWORD *)(v4 - 8);
    *(_QWORD *)(v4 - 16) = 0;
    v9 = a1[5];
    v10 = *(_QWORD *)(v9 - 16);
    *(_QWORD *)(v9 - 16) = 0;
    if (v10)
    {
      v17 = v6;
      (*(void (**)(void))(v9 - 8))();
      v6 = v17;
    }
    v11 = *(std::__shared_weak_count **)(v9 - 56);
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        v18 = v6;
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
        v6 = v18;
      }
    }
    a1[5] = v9 - 96;
    *(_OWORD *)a2 = v20;
    *(_QWORD *)(a2 + 16) = v21;
    *(_QWORD *)(a2 + 24) = &off_24CA7AAC0;
    *(_OWORD *)(a2 + 32) = v6;
    *(_OWORD *)(a2 + 48) = *(_OWORD *)v19;
    *(_OWORD *)(a2 + 58) = *(_OWORD *)&v19[10];
    *(_QWORD *)(a2 + 80) = v7;
    *(_QWORD *)(a2 + 88) = v8;
  }
}

void sub_21097FC20(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *sub_21097FC38(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 5);
  v4 = v3 + 1;
  if (v3 + 1 > 0x2AAAAAAAAAAAAAALL)
    sub_2108B327C();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5) >= 0x155555555555555)
    v5 = 0x2AAAAAAAAAAAAAALL;
  else
    v5 = v4;
  if (v5 > 0x2AAAAAAAAAAAAAALL)
    sub_2108B2B1C();
  v7 = 96 * v5;
  v8 = (char *)operator new(96 * v5);
  v9 = &v8[96 * v3];
  *(_OWORD *)v9 = *(_OWORD *)a2;
  v10 = &v8[v7];
  *((_QWORD *)v9 + 2) = *(_QWORD *)(a2 + 16);
  *((_QWORD *)v9 + 3) = &off_24CA7AAC0;
  v11 = *(_OWORD *)(a2 + 32);
  v12 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *((_OWORD *)v9 + 2) = v11;
  *((_OWORD *)v9 + 3) = v12;
  *(_OWORD *)(v9 + 58) = *(_OWORD *)(a2 + 58);
  v13 = *(_QWORD *)(a2 + 80);
  v14 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 80) = 0;
  *((_QWORD *)v9 + 10) = v13;
  *((_QWORD *)v9 + 11) = v14;
  v15 = v9 + 96;
  v16 = (char *)*a1;
  v17 = (char *)a1[1];
  if (v17 == *a1)
  {
    *a1 = v9;
    a1[1] = v15;
    a1[2] = v10;
  }
  else
  {
    v18 = 0;
    do
    {
      v19 = &v9[v18];
      v20 = &v17[v18];
      v21 = *(_QWORD *)&v17[v18 - 80];
      *((_OWORD *)v19 - 6) = *(_OWORD *)&v17[v18 - 96];
      *((_QWORD *)v19 - 10) = v21;
      *((_QWORD *)v19 - 9) = &off_24CA7AAC0;
      *((_OWORD *)v19 - 4) = *(_OWORD *)&v17[v18 - 64];
      *((_QWORD *)v20 - 8) = 0;
      *((_QWORD *)v20 - 7) = 0;
      v22 = *(_OWORD *)&v17[v18 - 48];
      *(_OWORD *)(v19 - 38) = *(_OWORD *)&v17[v18 - 38];
      *((_OWORD *)v19 - 3) = v22;
      v23 = *(_QWORD *)&v17[v18 - 16];
      *((_QWORD *)v20 - 2) = 0;
      *((_QWORD *)v19 - 2) = v23;
      *((_QWORD *)v19 - 1) = *(_QWORD *)&v17[v18 - 8];
      v18 -= 96;
    }
    while (&v17[v18] != v16);
    v17 = (char *)*a1;
    v24 = (char *)a1[1];
    *a1 = &v9[v18];
    a1[1] = v15;
    a1[2] = v10;
    while (v24 != v17)
    {
      v25 = *((_QWORD *)v24 - 2);
      *((_QWORD *)v24 - 2) = 0;
      if (v25)
        (*((void (**)(void))v24 - 1))();
      v26 = (std::__shared_weak_count *)*((_QWORD *)v24 - 7);
      if (v26)
      {
        p_shared_owners = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldaxr(p_shared_owners);
        while (__stlxr(v28 - 1, p_shared_owners));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      v24 -= 96;
    }
  }
  if (v17)
    operator delete(v17);
  return v15;
}

float sub_21097FE18(uint64_t a1, float a2, float a3, double a4, double a5, double a6, float a7)
{
  float v7;
  unsigned int v8;
  unint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;

  v7 = a2 - floorf(a2);
  *(float *)&v8 = a3 - floorf(a3);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = (_BYTE *)(*(_QWORD *)(a1 + 24) + (_DWORD)v9 * a2 + HIDWORD(v9) * a3);
  v11 = &v10[HIDWORD(v9)];
  LOBYTE(a2) = v10[v9];
  LOBYTE(a3) = *v10;
  v12 = (float)LODWORD(a3);
  v13 = (float)LODWORD(a2) - v12;
  LOBYTE(a7) = *v11;
  v14 = (float)LODWORD(a7);
  v15 = (float)((float)(v7 * v13) + v12) + (float)(*(float *)&v8 * (float)(v14 - v12));
  v16 = v7 * *(float *)&v8;
  LOBYTE(v8) = v11[v9];
  return v15 + (float)(v16 * (float)((float)((float)v8 - v14) - v13));
}

float sub_21097FEA0(uint64_t a1, float a2, float a3)
{
  float v3;
  float v4;
  float v5;
  float v6;
  _BOOL4 v7;
  _BOOL4 v8;
  float v10;
  char v11;
  uint64_t v12;
  float v13;
  _BYTE *v14;
  float v15;
  unsigned int v16;
  uint64_t v17;
  _BYTE *v18;
  float v19;
  float v20;
  unint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  float v24;
  float v25;
  unsigned int v26;
  float v27;
  float v28;

  v3 = a2 + 0.5;
  v4 = (float)(int)(float)(a2 + 0.5);
  v5 = (float)(int)(float)(a3 + 0.5);
  v6 = a2 - v4;
  if (v4 > a2)
    v6 = v4 - a2;
  v7 = v4 == a2 || v6 <= 0.000001;
  if (v5 == a3)
  {
    v8 = 1;
  }
  else
  {
    v10 = a3 - v5;
    if (v5 > a3)
      v10 = v5 - a3;
    v8 = v10 <= 0.000001;
    v11 = v10 <= 0.000001 || v7;
    if ((v11 & 1) == 0)
    {
      v19 = a2 - floorf(a2);
      v20 = a3 - floorf(a3);
      v21 = *(_QWORD *)(a1 + 40);
      v22 = (_BYTE *)(*(_QWORD *)(a1 + 24) + (_DWORD)v21 * a2 + HIDWORD(v21) * a3);
      v23 = &v22[HIDWORD(v21)];
      LOBYTE(a2) = v22[v21];
      LOBYTE(a3) = *v22;
      v24 = (float)LODWORD(a3);
      v25 = (float)LODWORD(a2) - v24;
      *(float *)&v26 = (float)(v19 * v25) + v24;
      LOBYTE(v4) = *v23;
      v27 = (float)LODWORD(v4);
      v28 = *(float *)&v26 + (float)(v20 * (float)(v27 - v24));
      LOBYTE(v26) = v23[v21];
      return v28 + (float)((float)(v19 * v20) * (float)((float)((float)v26 - v27) - v25));
    }
    if (v7 && v10 > 0.000001)
    {
      v12 = *(unsigned int *)(a1 + 44);
      v13 = a3 - floorf(a3);
      v14 = (_BYTE *)(*(_QWORD *)(a1 + 24)
                    + *(_DWORD *)(a1 + 40) * (int)(float)(v4 + 0.5)
                    + v12 * a3);
      LOBYTE(a3) = *v14;
      LOBYTE(v3) = v14[v12];
      return (float)(v13 * (float)((float)LODWORD(v3) - (float)LODWORD(a3))) + (float)LODWORD(a3);
    }
  }
  if (v7 || !v8)
  {
    LOBYTE(a2) = *(_BYTE *)(*(_QWORD *)(a1 + 24)
                          + (*(_DWORD *)(a1 + 40) * (int)v3 + *(_DWORD *)(a1 + 44)
                                                                          * (int)(float)(a3 + 0.5)));
    return (float)LODWORD(a2);
  }
  else
  {
    v15 = a2 - floorf(a2);
    *(float *)&v16 = v5 + 0.5;
    v17 = *(unsigned int *)(a1 + 40);
    v18 = (_BYTE *)(*(_QWORD *)(a1 + 24)
                  + v17 * a2
                  + *(_DWORD *)(a1 + 44) * (int)(float)(v5 + 0.5));
    LOBYTE(a2) = *v18;
    LOBYTE(v16) = v18[v17];
    return (float)(v15 * (float)((float)v16 - (float)LODWORD(a2))) + (float)LODWORD(a2);
  }
}

float sub_210980088(uint64_t a1, float a2, float a3)
{
  int v3;
  unsigned int v4;

  v3 = (int)(float)(a2 + 0.5);
  *(float *)&v4 = a3 + 0.5;
  LOBYTE(v4) = *(_BYTE *)(*(_QWORD *)(a1 + 24)
                        + (*(_DWORD *)(a1 + 40) * v3 + *(_DWORD *)(a1 + 44) * (int)(float)(a3 + 0.5)));
  return (float)v4;
}

uint64_t sub_2109800B8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  _QWORD **v10;
  _QWORD *v11;
  std::mutex *v12;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  __int16 v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  char v28;
  __int16 v29;
  uint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  size_t v41;
  int v42;
  int v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  int v49;
  int v50;
  int v51;
  int v52;
  _BYTE *v53;
  char *v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t *v60;
  unint64_t v61;
  uint64_t (**v62)();
  uint64_t v63;
  std::__shared_weak_count *v64;
  size_t __len[2];
  uint64_t v66;
  __int16 v67;
  _QWORD v68[3];
  _QWORD v69[2];
  uint64_t v70;

  v69[0] = a3;
  v69[1] = a4;
  kdebug_trace();
  v68[0] = v69;
  v68[1] = a1;
  v68[2] = a2;
  v9 = *a1;
  v10 = *(_QWORD ***)(*a1 + 96);
  if (v10)
  {
    if (*(_QWORD *)(v9 + 56) < a3)
    {
      if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/PatchCropping/src/PatchCropper.cpp", 160, (uint64_t)"m().config.max_keypoint_size >= key_points.size()", 49, (uint64_t)"key_points size must be equal or less than the specified max size.", 66, (void (*)(void **))sub_2109EDDB4))
      {
        abort();
      }
      v10 = *(_QWORD ***)(*a1 + 96);
    }
    v11 = *v10;
    v12 = (std::mutex *)(*v10 + 9);
    std::mutex::lock(v12);
    sub_21097FAA8(v11, a5);
    std::mutex::unlock(v12);
    if (*(_DWORD *)(*a1 + 4))
      return sub_210980730((uint64_t)v68, (uint64_t *)a5);
    v62 = &off_24CA7AAC0;
    v15 = *(_QWORD *)(a5 + 32);
    v16 = *(std::__shared_weak_count **)(a5 + 40);
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
      v19 = *(_WORD *)(a5 + 72);
      do
        v20 = __ldxr(p_shared_owners);
      while (__stxr(v20 + 1, p_shared_owners));
      *(_OWORD *)__len = *(_OWORD *)(a5 + 48);
      v66 = *(_QWORD *)(a5 + 64);
      do
        v21 = __ldxr(p_shared_owners);
      while (__stxr(v21 + 1, p_shared_owners));
      v63 = v15;
      v64 = v16;
      v67 = v19;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
      do
        v23 = __ldaxr(p_shared_owners);
      while (__stlxr(v23 - 1, p_shared_owners));
      if (v23)
      {
        v24 = *a1;
        if (*(_BYTE *)(*a1 + 9))
          goto LABEL_23;
LABEL_30:
        v25 = 0;
        v26 = v63;
        if (!v63)
          goto LABEL_55;
LABEL_31:
        if (v64)
        {
          v30 = &v64->__shared_owners_;
          do
            v31 = __ldxr((unint64_t *)v30);
          while (__stxr(v31 + 1, (unint64_t *)v30));
          do
            v32 = __ldaxr((unint64_t *)v30);
          while (__stlxr(v32 - 1, (unint64_t *)v30));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
            std::__shared_weak_count::__release_weak(v64);
          }
          v26 = v63;
          v33 = &v64->__shared_owners_;
          do
            v34 = __ldxr((unint64_t *)v33);
          while (__stxr(v34 + 1, (unint64_t *)v33));
          do
            v35 = __ldaxr((unint64_t *)v33);
          while (__stlxr(v35 - 1, (unint64_t *)v33));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
            std::__shared_weak_count::__release_weak(v64);
          }
        }
        if (HIBYTE(v67))
        {
          (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v26 + 96))(&v70, v26, 1);
          v36 = v66;
          if ((_DWORD)v66 != 1)
          {
LABEL_56:
            v43 = __len[1];
            if (LODWORD(__len[1]) && HIDWORD(__len[1]))
            {
              v44 = HIDWORD(v66);
              v45 = (_BYTE *)__len[0];
              if ((_BYTE)v67 && __len[0])
              {
                if (v64)
                {
                  v46 = &v64->__shared_owners_;
                  do
                    v47 = __ldxr((unint64_t *)v46);
                  while (__stxr(v47 + 1, (unint64_t *)v46));
                  do
                    v48 = __ldaxr((unint64_t *)v46);
                  while (__stlxr(v48 - 1, (unint64_t *)v46));
                  if (!v48)
                  {
                    ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
                    std::__shared_weak_count::__release_weak(v64);
                  }
                }
                (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v63 + 88))(v63, 1, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
                v45 = (_BYTE *)__len[0];
              }
              v49 = LODWORD(__len[1]) - 1;
              v50 = HIDWORD(__len[1]) - 1;
              if (HIDWORD(__len[1]) != 1)
              {
                if (LODWORD(__len[1]) == 1)
                {
                  do
                  {
                    *v45 = v25;
                    v45 += v44;
                    --v50;
                  }
                  while (v50);
                }
                else
                {
                  v51 = 0;
                  do
                  {
                    v52 = v43 - 1;
                    v53 = v45;
                    do
                    {
                      *v53 = v25;
                      v53 += v36;
                      --v52;
                    }
                    while (v52);
                    *v53 = v25;
                    v45 += v44;
                    ++v51;
                  }
                  while (v51 != v50);
                }
              }
              for (; v49; --v49)
              {
                *v45 = v25;
                v45 += v36;
              }
              *v45 = v25;
            }
            goto LABEL_93;
          }
LABEL_44:
          if (HIDWORD(v66) == LODWORD(__len[1]))
          {
            v37 = (void *)__len[0];
            if ((_BYTE)v67 && __len[0])
            {
              if (v64)
              {
                v38 = &v64->__shared_owners_;
                do
                  v39 = __ldxr((unint64_t *)v38);
                while (__stxr(v39 + 1, (unint64_t *)v38));
                do
                  v40 = __ldaxr((unint64_t *)v38);
                while (__stlxr(v40 - 1, (unint64_t *)v38));
                if (!v40)
                {
                  ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
                  std::__shared_weak_count::__release_weak(v64);
                }
              }
              (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v63 + 88))(v63, 1, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
              v37 = (void *)__len[0];
            }
            v41 = (HIDWORD(__len[1]) * HIDWORD(v66));
            v42 = v25;
          }
          else
          {
            if (!LODWORD(__len[1]) || !HIDWORD(__len[1]))
              goto LABEL_93;
            v54 = (char *)__len[0];
            if ((_BYTE)v67 && __len[0])
            {
              if (v64)
              {
                v55 = &v64->__shared_owners_;
                do
                  v56 = __ldxr((unint64_t *)v55);
                while (__stxr(v56 + 1, (unint64_t *)v55));
                do
                  v57 = __ldaxr((unint64_t *)v55);
                while (__stlxr(v57 - 1, (unint64_t *)v55));
                if (!v57)
                {
                  ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
                  std::__shared_weak_count::__release_weak(v64);
                }
              }
              (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v63 + 88))(v63, 1, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
              v54 = (char *)__len[0];
            }
            v58 = HIDWORD(__len[1]) - 1;
            if (HIDWORD(__len[1]) != 1)
            {
              do
              {
                memset(v54, v25, LODWORD(__len[1]));
                v54 += HIDWORD(v66);
                --v58;
              }
              while (v58);
            }
            v37 = v54;
            v42 = v25;
            v41 = LODWORD(__len[1]);
          }
          memset(v37, v42, v41);
LABEL_93:
          v59 = v70;
          v70 = 0;
          if (v59)
            (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
          if (v64)
          {
            v60 = &v64->__shared_owners_;
            do
              v61 = __ldaxr((unint64_t *)v60);
            while (__stlxr(v61 - 1, (unint64_t *)v60));
            if (!v61)
            {
              ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
              std::__shared_weak_count::__release_weak(v64);
            }
          }
          return sub_210980730((uint64_t)v68, (uint64_t *)a5);
        }
LABEL_55:
        v70 = 0;
        v36 = v66;
        if ((_DWORD)v66 != 1)
          goto LABEL_56;
        goto LABEL_44;
      }
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
      v24 = *a1;
      if (!*(_BYTE *)(*a1 + 9))
        goto LABEL_30;
    }
    else
    {
      v29 = *(_WORD *)(a5 + 72);
      v63 = *(_QWORD *)(a5 + 32);
      v64 = 0;
      *(_OWORD *)__len = *(_OWORD *)(a5 + 48);
      v66 = *(_QWORD *)(a5 + 64);
      v67 = v29;
      v24 = *a1;
      if (!*(_BYTE *)(*a1 + 9))
        goto LABEL_30;
    }
LABEL_23:
    v25 = *(unsigned __int8 *)(v24 + 8);
    v26 = v63;
    if (!v63)
      goto LABEL_55;
    goto LABEL_31;
  }
  v14 = *(_QWORD *)(v9 + 24);
  if (*(_DWORD *)(v9 + 4))
  {
    LOWORD(v62) = 0;
  }
  else
  {
    v27 = *(unsigned __int8 *)(v9 + 9);
    v28 = *(_BYTE *)(v9 + 8);
    if (!v27)
      v28 = 0;
    LOBYTE(v62) = v28;
    BYTE1(v62) = 1;
  }
  sub_21097EB9C(a5, v14, a3, (uint64_t)&v62);
  return sub_210980730((uint64_t)v68, (uint64_t *)a5);
}

void sub_2109806A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  va_list va;

  va_start(va, a2);
  v5 = *(_QWORD *)(v3 - 72);
  *(_QWORD *)(v3 - 72) = 0;
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    sub_2108C9DAC((uint64_t)va);
    sub_2109747BC(v2);
    _Unwind_Resume(a1);
  }
  sub_2108C9DAC((uint64_t)va);
  sub_2109747BC(v2);
  _Unwind_Resume(a1);
}

void sub_2109806F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2109747BC(v1);
  _Unwind_Resume(a1);
}

void sub_210980704(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2109747BC(v1);
  _Unwind_Resume(a1);
}

void sub_210980718(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_210980730(uint64_t a1, uint64_t *a2)
{
  unint64_t *v4;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  float *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  BOOL v20;
  BOOL v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  int64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  __int128 *v41;
  char *v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  char *v46;
  unint64_t *v47;
  unint64_t *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  unint64_t v61;
  BOOL v62;
  BOOL v63;
  unint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  int64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  __int128 *v83;
  char *v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  char *v88;
  unint64_t *v89;
  unint64_t *v90;
  unint64_t *v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  char *v99;
  char *v100;
  void *v101;
  unint64_t *v102;
  unint64_t *v103;
  unint64_t *v104;
  unint64_t v105;
  uint64_t v107;
  __int128 v108;
  int v109;
  uint64_t v110;
  int v111;
  __int128 v112[2];
  std::__shared_weak_count *v113;
  void *__p;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  int v119;

  v4 = *(unint64_t **)a1;
  v5 = *(uint64_t **)(a1 + 8);
  v6 = **(_QWORD **)a1;
  v7 = v6;
  if (a2[2] < v6)
  {
    if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/PatchCropping/include/LearnedFeatures/PatchCropping/ImagePatches.h", 103, (uint64_t)"_num_used_patches <= num_allocated_patches", 42, (uint64_t)"Number of used patches must be equal or less than the number of pathces.", 72, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
    v4 = *(unint64_t **)a1;
    v7 = **(_QWORD **)a1;
  }
  a2[1] = v6;
  if (!*(_BYTE *)(*v5 + 40) || v7 < *(_QWORD *)(*v5 + 32))
  {
    v8 = *(_QWORD *)(a1 + 16);
    v9 = (float *)v4[1];
    sub_210975EB4((uint64_t)v112, a2);
    sub_2109811DC(v5, v8, v7, v9, (uint64_t *)v112);
    v10 = v113;
    if (v113)
    {
      p_shared_owners = (unint64_t *)&v113->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    return kdebug_trace();
  }
  sub_210978910((uint64_t)a2, (uint64_t)&v117);
  v13 = *(unint64_t **)a1;
  v14 = vcvtps_u32_f32((float)**(unint64_t **)a1 * 0.5);
  __p = operator new(0x10uLL);
  v115 = (char *)__p;
  v116 = (char *)__p + 16;
  if (*v13 >= v14)
    v15 = v14;
  else
    v15 = *v13;
  v16 = *(_QWORD *)(a1 + 16);
  v18 = *(unsigned int *)(v16 + 32);
  v17 = *(_DWORD *)(v16 + 36);
  v20 = v18 == 0;
  v19 = v18 | ((unint64_t)v17 << 32);
  v20 = v20 || v17 == 0;
  v21 = v20 || (_DWORD)v15 == 0;
  if (v21)
    v22 = 0;
  else
    v22 = v19;
  if (v21)
    v23 = 0;
  else
    v23 = v15;
  *(_QWORD *)&v108 = v117;
  *((_QWORD *)&v108 + 1) = v22;
  v109 = v23;
  v110 = v118;
  v111 = v119;
  if (v23 * v119 == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_139;
  }
  sub_210981F48(v112, (uint64_t *)&v108);
  v24 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)&v108 = sub_21095FE2C(*(unint64_t **)a1, 0, v15);
  *((_QWORD *)&v108 + 1) = v25;
  sub_21098191C(&v107, (uint64_t)sub_2109811DC, 0, (uint64_t)v5, v24, &v108, v112);
  v26 = v115;
  if (v115 >= v116)
  {
    v27 = (char *)__p;
    v28 = v115 - (_BYTE *)__p;
    v29 = (v115 - (_BYTE *)__p) >> 3;
    v30 = v29 + 1;
    if ((unint64_t)(v29 + 1) >> 61)
      goto LABEL_138;
    v31 = v116 - (_BYTE *)__p;
    if ((v116 - (_BYTE *)__p) >> 2 > v30)
      v30 = v31 >> 2;
    v32 = (unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v30;
    if (v32)
    {
      if (v32 >> 61)
        goto LABEL_140;
      v33 = (char *)operator new(8 * v32);
    }
    else
    {
      v33 = 0;
    }
    v34 = &v33[8 * v29];
    v35 = &v33[8 * v32];
    *(_QWORD *)v34 = v107;
    v36 = v34 + 8;
    v107 = 0;
    if (v26 == v27)
    {
      __p = &v33[8 * v29];
      v115 = v34 + 8;
      v116 = v35;
    }
    else
    {
      v37 = v26 - v27 - 8;
      if (v37 < 0x78
        || &v33[v28 - (v37 & 0xFFFFFFFFFFFFFFF8) - 8] < v26 && &v26[-(v37 & 0xFFFFFFFFFFFFFFF8) - 8] < v34)
      {
        goto LABEL_143;
      }
      v38 = (v37 >> 3) + 1;
      v39 = 8 * (v38 & 0x3FFFFFFFFFFFFFFCLL);
      v34 -= v39;
      v40 = &v26[-v39];
      v41 = (__int128 *)(v26 - 16);
      v42 = &v33[8 * v29 - 16];
      v43 = v38 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v44 = *v41;
        *((_OWORD *)v42 - 1) = *(v41 - 1);
        *(_OWORD *)v42 = v44;
        *(v41 - 1) = 0uLL;
        *v41 = 0uLL;
        v41 -= 2;
        v42 -= 32;
        v43 -= 4;
      }
      while (v43);
      v26 = v40;
      if (v38 != (v38 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_143:
        do
        {
          v45 = *((_QWORD *)v26 - 1);
          v26 -= 8;
          *((_QWORD *)v34 - 1) = v45;
          v34 -= 8;
          *(_QWORD *)v26 = 0;
        }
        while (v26 != v27);
      }
      v26 = (char *)__p;
      v46 = v115;
      __p = v34;
      v115 = v36;
      v116 = v35;
      while (v46 != v26)
      {
        v48 = (unint64_t *)*((_QWORD *)v46 - 1);
        v46 -= 8;
        v47 = v48;
        if (v48)
        {
          v49 = v47 + 1;
          do
            v50 = __ldaxr(v49);
          while (__stlxr(v50 - 1, v49));
          if (!v50)
            (*(void (**)(unint64_t *))(*v47 + 16))(v47);
        }
      }
    }
    if (v26)
      operator delete(v26);
    v51 = v107;
    v115 = v36;
    if (v107)
    {
      v52 = (unint64_t *)(v107 + 8);
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
        (*(void (**)(uint64_t))(*(_QWORD *)v51 + 16))(v51);
    }
  }
  else
  {
    *(_QWORD *)v115 = v107;
    v115 = v26 + 8;
  }
  v54 = v113;
  if (v113)
  {
    v55 = (unint64_t *)&v113->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  v57 = **(_QWORD **)a1 - v14 >= v14 ? v14 : **(_QWORD **)a1 - v14;
  v58 = *(_QWORD *)(a1 + 16);
  v60 = *(unsigned int *)(v58 + 32);
  v59 = *(_DWORD *)(v58 + 36);
  v20 = v60 == 0;
  v61 = v60 | ((unint64_t)v59 << 32);
  v62 = v20 || v59 == 0;
  v63 = v62 || (_DWORD)v57 == 0;
  v64 = v63 ? 0 : v61;
  v65 = v63 ? 0 : v57;
  *(_QWORD *)&v108 = v117 + (v119 * v14);
  *((_QWORD *)&v108 + 1) = v64;
  v109 = v65;
  v110 = v118;
  v111 = v119;
  if (v65 * v119 == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
LABEL_139:
    abort();
  }
  sub_210981F48(v112, (uint64_t *)&v108);
  v66 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)&v108 = sub_21095FE2C(*(unint64_t **)a1, v14, v57);
  *((_QWORD *)&v108 + 1) = v67;
  sub_21098191C(&v107, (uint64_t)sub_2109811DC, 0, (uint64_t)v5, v66, &v108, v112);
  v68 = v115;
  if (v115 >= v116)
  {
    v69 = (char *)__p;
    v70 = v115 - (_BYTE *)__p;
    v71 = (v115 - (_BYTE *)__p) >> 3;
    v72 = v71 + 1;
    if (!((unint64_t)(v71 + 1) >> 61))
    {
      v73 = v116 - (_BYTE *)__p;
      if ((v116 - (_BYTE *)__p) >> 2 > v72)
        v72 = v73 >> 2;
      if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFF8)
        v74 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v74 = v72;
      if (!v74)
      {
        v75 = 0;
        goto LABEL_97;
      }
      if (!(v74 >> 61))
      {
        v75 = (char *)operator new(8 * v74);
LABEL_97:
        v76 = &v75[8 * v71];
        v77 = &v75[8 * v74];
        *(_QWORD *)v76 = v107;
        v78 = v76 + 8;
        v107 = 0;
        if (v68 == v69)
        {
          __p = &v75[8 * v71];
          v115 = v76 + 8;
          v116 = v77;
        }
        else
        {
          v79 = v68 - v69 - 8;
          if (v79 < 0x78
            || &v75[v70 - (v79 & 0xFFFFFFFFFFFFFFF8) - 8] < v68 && &v68[-(v79 & 0xFFFFFFFFFFFFFFF8) - 8] < v76)
          {
            goto LABEL_144;
          }
          v80 = (v79 >> 3) + 1;
          v81 = 8 * (v80 & 0x3FFFFFFFFFFFFFFCLL);
          v76 -= v81;
          v82 = &v68[-v81];
          v83 = (__int128 *)(v68 - 16);
          v84 = &v75[8 * v71 - 16];
          v85 = v80 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v86 = *v83;
            *((_OWORD *)v84 - 1) = *(v83 - 1);
            *(_OWORD *)v84 = v86;
            *(v83 - 1) = 0uLL;
            *v83 = 0uLL;
            v83 -= 2;
            v84 -= 32;
            v85 -= 4;
          }
          while (v85);
          v68 = v82;
          if (v80 != (v80 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_144:
            do
            {
              v87 = *((_QWORD *)v68 - 1);
              v68 -= 8;
              *((_QWORD *)v76 - 1) = v87;
              v76 -= 8;
              *(_QWORD *)v68 = 0;
            }
            while (v68 != v69);
          }
          v68 = (char *)__p;
          v88 = v115;
          __p = v76;
          v115 = v78;
          v116 = v77;
          while (v88 != v68)
          {
            v90 = (unint64_t *)*((_QWORD *)v88 - 1);
            v88 -= 8;
            v89 = v90;
            if (v90)
            {
              v91 = v89 + 1;
              do
                v92 = __ldaxr(v91);
              while (__stlxr(v92 - 1, v91));
              if (!v92)
                (*(void (**)(unint64_t *))(*v89 + 16))(v89);
            }
          }
        }
        if (v68)
          operator delete(v68);
        v93 = v107;
        v115 = v78;
        if (v107)
        {
          v94 = (unint64_t *)(v107 + 8);
          do
            v95 = __ldaxr(v94);
          while (__stlxr(v95 - 1, v94));
          if (!v95)
            (*(void (**)(uint64_t))(*(_QWORD *)v93 + 16))(v93);
        }
        goto LABEL_120;
      }
LABEL_140:
      sub_2108B2B1C();
    }
LABEL_138:
    sub_2108B327C();
  }
  *(_QWORD *)v115 = v107;
  v115 = v68 + 8;
LABEL_120:
  v96 = v113;
  if (v113)
  {
    v97 = (unint64_t *)&v113->__shared_owners_;
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  v99 = (char *)__p;
  if (__p)
  {
    v100 = v115;
    v101 = __p;
    if (v115 != __p)
    {
      do
      {
        v103 = (unint64_t *)*((_QWORD *)v100 - 1);
        v100 -= 8;
        v102 = v103;
        if (v103)
        {
          v104 = v102 + 1;
          do
            v105 = __ldaxr(v104);
          while (__stlxr(v105 - 1, v104));
          if (!v105)
            (*(void (**)(unint64_t *))(*v102 + 16))(v102);
        }
      }
      while (v100 != v99);
      v101 = __p;
    }
    v115 = v99;
    operator delete(v101);
  }
  return kdebug_trace();
}

void sub_210980EC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  sub_210981850((void **)va);
  _Unwind_Resume(a1);
}

void sub_210980ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  sub_210981850((void **)va);
  _Unwind_Resume(a1);
}

void sub_210980EEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_210974754((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_210980F00(_Unwind_Exception *a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  if (a2)
  {
    v7 = a2 + 1;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      (*(void (**)(unint64_t *))(*a2 + 16))(a2);
      sub_210974754((uint64_t)va);
      sub_210981850((void **)va1);
      _Unwind_Resume(a1);
    }
  }
  sub_210974754((uint64_t)va);
  sub_210981850((void **)va1);
  _Unwind_Resume(a1);
}

uint64_t *sub_210980F7C(uint64_t *a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t **v10;
  uint64_t *v11;
  int v12;
  __int16 v13;
  uint64_t *v14;
  __int16 v15;
  uint64_t *v16;
  uint64_t v17;
  _QWORD *v18;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_OWORD *)(a2 + 16);
  v5 = *(_OWORD *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 48);
  a1[8] = *(_QWORD *)(a2 + 64);
  *((_OWORD *)a1 + 2) = v5;
  *((_OWORD *)a1 + 3) = v6;
  *((_OWORD *)a1 + 1) = v4;
  v7 = (_QWORD *)operator new();
  sub_21097BA70((uint64_t)v7, a1[3]);
  *v7 = &off_24CA81D70;
  v8 = *a1;
  v9 = *((unsigned __int16 *)a1 + 4);
  a1[9] = (uint64_t)v7;
  a1[10] = v8;
  *((_DWORD *)a1 + 22) = v9;
  a1[12] = 0;
  v10 = (uint64_t **)(a1 + 12);
  if (*(_QWORD *)(a2 + 56))
  {
    if (*(_DWORD *)(a2 + 4))
    {
      v11 = (uint64_t *)operator new();
      sub_21097F7EC(v11, *(_QWORD *)(a2 + 64), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 56), 0);
    }
    else
    {
      v12 = *(unsigned __int8 *)(a2 + 9);
      v13 = *(unsigned __int8 *)(a2 + 8);
      v14 = (uint64_t *)operator new();
      v11 = v14;
      v15 = v12 ? v13 : 0;
      sub_21097F7EC(v14, *(_QWORD *)(a2 + 64), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 56), v15 | 0x100);
    }
    v16 = *v10;
    *v10 = v11;
    if (v16)
    {
      v17 = *v16;
      *v16 = 0;
      if (v17)
      {
        std::mutex::~mutex((std::mutex *)(v17 + 72));
        v18 = sub_21097F9CC((_QWORD *)v17);
        MEMORY[0x212BCC6FC](v18, 0x1020C40A43346C3);
      }
      MEMORY[0x212BCC6FC](v16, 0x1020C4094298415);
    }
  }
  return a1;
}

void sub_2109810E8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t **v2;
  uint64_t v3;
  uint64_t v5;

  MEMORY[0x212BCC6FC](v3, 0x1020C4094298415);
  sub_210981160(v2);
  v5 = *(_QWORD *)(v1 + 72);
  *(_QWORD *)(v1 + 72) = 0;
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t **sub_210981160(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
    {
      std::mutex::~mutex((std::mutex *)(v3 + 72));
      v4 = sub_21097F9CC((_QWORD *)v3);
      MEMORY[0x212BCC6FC](v4, 0x1020C40A43346C3);
    }
    MEMORY[0x212BCC6FC](v2, 0x1020C4094298415);
  }
  return a1;
}

uint64_t sub_2109811DC(uint64_t *a1, uint64_t a2, uint64_t a3, float *a4, uint64_t *a5)
{
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  _DWORD *v19;
  BOOL v20;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  float *v25;
  unsigned int v26;
  float v27;
  float v28;
  float v29;
  float v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  __n128 v35;
  BOOL v36;
  unsigned int v38;
  float *v39;
  float v40;
  unsigned int v42;
  float *v43;
  float v44;
  BOOL v45;
  float *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  float v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  __n128 v56;
  __n128 v57;
  int v58;
  float (*v59)(uint64_t, float, float);
  float (*v60)(__n128);
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  float v67;
  BOOL v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  _QWORD v79[2];
  std::__shared_weak_count *v80;
  uint64_t (**v81)();
  uint64_t v82;
  std::__shared_weak_count *v83;
  unsigned __int32 *v84;
  int v85;
  int v86;
  int v87;
  int v88;
  uint64_t (**v89)();
  uint64_t v90;
  std::__shared_weak_count *v91;
  uint64_t (**v92)();
  uint64_t v93;
  std::__shared_weak_count *v94;
  uint64_t v95;

  v10 = *(_QWORD *)(a2 + 8);
  if (!v10)
    goto LABEL_17;
  v11 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v11)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldxr(p_shared_owners);
  while (__stxr(v13 + 1, p_shared_owners));
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
    v10 = *(_QWORD *)(a2 + 8);
    v15 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v15)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    v10 = *(_QWORD *)(a2 + 8);
    v15 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v15)
      goto LABEL_14;
  }
  v16 = (unint64_t *)&v15->__shared_owners_;
  do
    v17 = __ldxr(v16);
  while (__stxr(v17 + 1, v16));
  do
    v18 = __ldaxr(v16);
  while (__stlxr(v18 - 1, v16));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    if (*(_BYTE *)(a2 + 49))
      goto LABEL_15;
    goto LABEL_17;
  }
LABEL_14:
  if (*(_BYTE *)(a2 + 49))
  {
LABEL_15:
    (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v10 + 96))(&v95, v10, 0);
    goto LABEL_18;
  }
LABEL_17:
  v95 = 0;
LABEL_18:
  v19 = (_DWORD *)*a1;
  if (*(_BYTE *)(*a1 + 48))
    v20 = *(_DWORD *)*a1 == 0;
  else
    v20 = 0;
  if (!v20 || (*a5 & 3) != 0)
  {
    v22 = *(_DWORD *)(a2 + 32);
    v23 = *(_DWORD *)(a2 + 36);
    LODWORD(v81) = v19[6];
    HIDWORD(v81) = (_DWORD)v81;
    v89 = &off_24CA81E60;
    sub_21097C4B8(&v81, &v90);
    if (a3)
    {
      v24 = 0;
      v25 = &a4[5 * a3];
      if (v22 <= v23)
        v26 = v23;
      else
        v26 = v22;
      v27 = (float)v26;
      v28 = (float)v23;
      v29 = (float)v22 + -1.0;
      v30 = (float)v23 + -1.0;
      while (1)
      {
        v31 = *(_QWORD *)(*a1 + 72);
        v81 = &off_24CA7D530;
        sub_21097CE08((uint64_t)&v89, &v82);
        (*(void (**)(uint64_t, uint64_t (***)(), float *, uint64_t))(*(_QWORD *)v31 + 16))(v31, &v81, a4, *a1 + 12);
        v32 = v83;
        if (v83)
        {
          v33 = (unint64_t *)&v83->__shared_owners_;
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 - 1, v33));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
        v81 = &off_24CA81FA8;
        sub_21097D074((uint64_t)&v89, &v82);
        v35.n128_u32[0] = *v84;
        v36 = 0;
        if (*(float *)v84 < 0.0 || v29 <= v35.n128_f32[0])
          goto LABEL_56;
        v35.n128_u32[0] = v84[1];
        if (v35.n128_f32[0] < 0.0 || v30 <= v35.n128_f32[0])
          goto LABEL_56;
        v38 = v87 * (v85 - 1);
        v39 = (float *)&v84[v38];
        v35.n128_f32[0] = *v39;
        v36 = 0;
        if (*v39 < 0.0)
          goto LABEL_56;
        v40 = v39[1];
        if (v30 <= v40 || v29 <= v35.n128_f32[0])
          goto LABEL_56;
        if (v40 < 0.0)
          goto LABEL_56;
        v42 = v88 * (v86 - 1);
        v43 = (float *)&v84[v42];
        v35.n128_f32[0] = *v43;
        v36 = 0;
        if (*v43 < 0.0)
          goto LABEL_56;
        v44 = v43[1];
        v45 = v30 <= v44 || v29 <= v35.n128_f32[0];
        if (v45 || v44 < 0.0)
          goto LABEL_56;
        v46 = (float *)&v84[v42 + v38];
        v35.n128_f32[0] = *v46;
        if (*v46 < 0.0)
          break;
        v67 = v46[1];
        v68 = v29 > v35.n128_f32[0];
        if (v67 < 0.0)
          v68 = 0;
        v36 = v30 > v67 && v68;
        v47 = v83;
        if (v83)
          goto LABEL_57;
LABEL_61:
        if (!v36)
        {
          v50 = *(unsigned int *)(*a1 + 4);
          v81 = &off_24CA7D530;
          sub_21097CE08((uint64_t)&v89, &v82);
          v51 = nextafterf(v27, -3.4028e38);
          sub_21097D45C(v50, (uint64_t)&v81, (float)v22 - (float)(v27 - v51), v28 - (float)(v27 - v51));
          v52 = v83;
          if (v83)
          {
            v53 = (unint64_t *)&v83->__shared_owners_;
            do
              v54 = __ldaxr(v53);
            while (__stlxr(v54 - 1, v53));
            if (!v54)
            {
              ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
              std::__shared_weak_count::__release_weak(v52);
            }
          }
        }
        sub_21097E884(a5, v24, v79);
        v55 = *a1;
        v81 = &off_24CA81FA8;
        sub_21097D074((uint64_t)&v89, &v82);
        v58 = *(_DWORD *)(v55 + 80);
        v59 = sub_210980088;
        if (v58 == 1)
          v59 = sub_21097FEA0;
        if (v58)
          v60 = (float (*)(__n128))v59;
        else
          v60 = (float (*)(__n128))sub_21097FE18;
        sub_21097DBD0(a2, (uint64_t)&v81, (uint64_t)v79, *(_DWORD *)(v55 + 84), v60, v56, v57);
        v61 = v83;
        if (!v83)
          goto LABEL_76;
        v62 = (unint64_t *)&v83->__shared_owners_;
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
          v64 = v80;
          if (v80)
          {
LABEL_77:
            v65 = (unint64_t *)&v64->__shared_owners_;
            do
              v66 = __ldaxr(v65);
            while (__stlxr(v66 - 1, v65));
            if (!v66)
            {
              ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
              std::__shared_weak_count::__release_weak(v64);
            }
          }
        }
        else
        {
LABEL_76:
          v64 = v80;
          if (v80)
            goto LABEL_77;
        }
        a4 += 5;
        ++v24;
        if (a4 == v25)
          goto LABEL_98;
      }
      v36 = 0;
LABEL_56:
      v47 = v83;
      if (!v83)
        goto LABEL_61;
LABEL_57:
      v48 = (unint64_t *)&v47->__shared_owners_;
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v47->__on_zero_shared)(v47, v35);
        std::__shared_weak_count::__release_weak(v47);
      }
      goto LABEL_61;
    }
LABEL_98:
    v76 = v91;
    if (!v91)
      goto LABEL_102;
    v77 = (unint64_t *)&v91->__shared_owners_;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
      v73 = 0;
      v74 = v95;
      v95 = 0;
      if (!v74)
        return v73;
    }
    else
    {
LABEL_102:
      v73 = 0;
      v74 = v95;
      v95 = 0;
      if (!v74)
        return v73;
    }
    goto LABEL_96;
  }
  v69 = *((_QWORD *)v19 + 9) + 8;
  v92 = &off_24CA81FA8;
  sub_21097D074(v69, &v93);
  sub_210982694(a2, a3, a4, (int *)a5, (uint64_t)&v92, *(_DWORD *)(*a1 + 4), *(_QWORD *)(*a1 + 12));
  v70 = v94;
  if (v94)
  {
    v71 = (unint64_t *)&v94->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v73 = 1;
  v74 = v95;
  v95 = 0;
  if (v74)
LABEL_96:
    (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
  return v73;
}

void sub_2109817C8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  sub_21097D17C(v1 - 224);
  v3 = *(_QWORD *)(v1 - 144);
  *(_QWORD *)(v1 - 144) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  _Unwind_Resume(a1);
}

void **sub_210981850(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  unint64_t *v5;
  unint64_t *v6;
  unint64_t *v7;
  unint64_t v8;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v6 = (unint64_t *)*((_QWORD *)v3 - 1);
        v3 -= 8;
        v5 = v6;
        if (v6)
        {
          v7 = v5 + 1;
          do
            v8 = __ldaxr(v7);
          while (__stlxr(v8 - 1, v7));
          if (!v8)
            (*(void (**)(unint64_t *))(*v5 + 16))(v5);
        }
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t *sub_2109818D8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = MEMORY[0x212BCC4F8]();
    MEMORY[0x212BCC6FC](v3, 0x20C4093837F09);
  }
  return a1;
}

void sub_21098191C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6, __int128 *a7)
{
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __int16 v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  __int16 v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  std::mutex *v32;
  std::__thread_struct *v33;
  uint64_t v34;
  int v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  _BYTE v44[26];
  __int128 v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  _BYTE v48[26];
  __int128 v49;
  _BYTE v50[18];
  _BYTE v51[18];
  pthread_t v52[2];
  std::__thread_struct *v53;

  v12 = *(_QWORD *)(a5 + 8);
  v13 = *(std::__shared_weak_count **)(a5 + 16);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
    v16 = *(_WORD *)(a5 + 48);
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
    *(_OWORD *)v48 = *(_OWORD *)(a5 + 24);
    *(_QWORD *)&v48[16] = *(_QWORD *)(a5 + 40);
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
    v46 = v12;
    v47 = v13;
    *(_WORD *)&v48[24] = v16;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  else
  {
    v46 = *(_QWORD *)(a5 + 8);
    v47 = 0;
    *(_OWORD *)v48 = *(_OWORD *)(a5 + 24);
    *(_QWORD *)&v48[16] = *(_QWORD *)(a5 + 40);
    *(_WORD *)&v48[24] = *(_WORD *)(a5 + 48);
  }
  v45 = *a6;
  v40 = *a7;
  v41 = *((_QWORD *)a7 + 2);
  v21 = *((_QWORD *)a7 + 4);
  v22 = (std::__shared_weak_count *)*((_QWORD *)a7 + 5);
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
    v25 = *((_WORD *)a7 + 36);
    do
      v26 = __ldxr(v23);
    while (__stxr(v26 + 1, v23));
    *(_OWORD *)v44 = a7[3];
    *(_QWORD *)&v44[16] = *((_QWORD *)a7 + 8);
    do
      v27 = __ldxr(v23);
    while (__stxr(v27 + 1, v23));
    v42 = v21;
    v43 = v22;
    *(_WORD *)&v44[24] = v25;
    do
      v28 = __ldaxr(v23);
    while (__stlxr(v28 - 1, v23));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
    do
      v29 = __ldaxr(v23);
    while (__stlxr(v29 - 1, v23));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  else
  {
    v42 = *((_QWORD *)a7 + 4);
    v43 = 0;
    *(_OWORD *)v44 = a7[3];
    *(_QWORD *)&v44[16] = *((_QWORD *)a7 + 8);
    *(_WORD *)&v44[24] = *((_WORD *)a7 + 36);
  }
  *(_QWORD *)&v49 = a2;
  *((_QWORD *)&v49 + 1) = a3;
  *(_OWORD *)v50 = *(_OWORD *)v48;
  *(_QWORD *)&v50[10] = *(_QWORD *)&v48[10];
  *(_OWORD *)&v51[2] = *(_OWORD *)&v44[10];
  *(_QWORD *)v51 = *(_QWORD *)&v44[8];
  v30 = operator new();
  *(_QWORD *)(v30 + 8) = 0;
  v31 = (unint64_t *)(v30 + 8);
  *(_QWORD *)(v30 + 24) = 850045863;
  v32 = (std::mutex *)(v30 + 24);
  *(_QWORD *)(v30 + 16) = 0;
  *(_OWORD *)(v30 + 32) = 0u;
  *(_OWORD *)(v30 + 48) = 0u;
  *(_OWORD *)(v30 + 64) = 0u;
  *(_QWORD *)(v30 + 80) = 0;
  *(_QWORD *)(v30 + 88) = 1018212795;
  *(_OWORD *)(v30 + 96) = 0u;
  *(_OWORD *)(v30 + 112) = 0u;
  *(_OWORD *)(v30 + 124) = 0u;
  *(_QWORD *)v30 = &off_24CA82260;
  *(_OWORD *)(v30 + 152) = v49;
  *(_QWORD *)(v30 + 168) = a4;
  *(_QWORD *)(v30 + 176) = &off_24CA79B48;
  *(_QWORD *)(v30 + 184) = v46;
  *(_QWORD *)(v30 + 192) = v47;
  *(_OWORD *)(v30 + 210) = *(_OWORD *)&v48[10];
  *(_OWORD *)(v30 + 200) = *(_OWORD *)v50;
  *(_OWORD *)(v30 + 232) = v45;
  *(_OWORD *)(v30 + 248) = v40;
  *(_QWORD *)(v30 + 264) = v41;
  *(_QWORD *)(v30 + 272) = &off_24CA7AAC0;
  *(_QWORD *)(v30 + 280) = v42;
  *(_QWORD *)(v30 + 288) = v43;
  *(_OWORD *)(v30 + 306) = *(_OWORD *)&v51[2];
  *(_OWORD *)(v30 + 296) = *(_OWORD *)v44;
  v33 = (std::__thread_struct *)operator new();
  std::__thread_struct::__thread_struct(v33);
  v53 = v33;
  v34 = operator new();
  v52[1] = (pthread_t)v34;
  v53 = 0;
  *(_QWORD *)v34 = v33;
  *(_OWORD *)(v34 + 8) = xmmword_210A18BD0;
  *(_QWORD *)(v34 + 24) = v30;
  v35 = pthread_create(v52, 0, (void *(__cdecl *)(void *))sub_2109823F4, (void *)v34);
  if (v35)
  {
    std::__throw_system_error(v35, "thread constructor failed");
    __break(1u);
  }
  else
  {
    std::thread::detach((std::thread *)v52);
    std::thread::~thread((std::thread *)v52);
    *a1 = v30;
    std::mutex::lock(v32);
    v36 = *(_DWORD *)(v30 + 136);
    if ((v36 & 2) != 0)
      sub_2109788B4(1u);
    do
      v37 = __ldxr(v31);
    while (__stxr(v37 + 1, v31));
    *(_DWORD *)(v30 + 136) = v36 | 2;
    std::mutex::unlock(v32);
    do
      v38 = __ldaxr(v31);
    while (__stlxr(v38 - 1, v31));
    if (!v38)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 16))(v30);
  }
}

void sub_210981F34(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *sub_210981F48(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _BOOL8 v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  _DWORD v13[2];
  uint64_t v14;
  uint64_t v15;

  v4 = *((unsigned int *)a2 + 2);
  *a1 = v4;
  v5 = *((unsigned int *)a2 + 4);
  a1[1] = v5;
  a1[2] = v5;
  v6 = *a2;
  v7 = *((_DWORD *)a2 + 3) * v4;
  v8 = v7 != 0;
  v10 = v5 == 0;
  v13[0] = v7;
  v13[1] = v5;
  v9 = *((unsigned int *)a2 + 7);
  a1[3] = &off_24CA7AAC0;
  v10 = v10 || v7 == 0;
  v11 = v9 << 32;
  if (v10)
    v11 = 0;
  v14 = v11 | v8;
  v15 = v6;
  sub_2108FE228(&v15, v13, &v14, (uint64_t)(a1 + 4));
  if (*((_DWORD *)a2 + 2) != *((_DWORD *)a2 + 3)
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/PatchCropping/include/LearnedFeatures/PatchCropping/ImagePatches.h", 136, (uint64_t)"view.Shape(0) == view.Shape(1)", 30, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
  return a1;
}

void sub_21098202C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108C9DAC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_210982040(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 136);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(std::__shared_weak_count **)(a1 + 40);
      if (v5)
        goto LABEL_6;
      return a1;
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v5)
    return a1;
LABEL_6:
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_2109820EC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)a1 = &off_24CA82260;
  v2 = *(std::__shared_weak_count **)(a1 + 288);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 192);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 192);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(a1 + 16));
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

void sub_2109821C0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)a1 = &off_24CA82260;
  v2 = *(std::__shared_weak_count **)(a1 + 288);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 192);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 192);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(a1 + 16));
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  JUMPOUT(0x212BCC6FCLL);
}

uint64_t sub_2109822A8(std::__assoc_sub_state *a1)
{
  std::__assoc_sub_state::wait(a1);
  return ((uint64_t (*)(std::__assoc_sub_state *))a1->~__assoc_sub_state_0)(a1);
}

void sub_2109822D8(uint64_t a1)
{
  uint64_t v2;
  uint64_t (*v3)(_QWORD *, uint64_t, _QWORD, _QWORD, uint64_t);
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::exception_ptr v7;

  v2 = *(_QWORD *)(a1 + 160);
  v3 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD, uint64_t))(a1 + 152);
  v4 = (_QWORD *)(*(_QWORD *)(a1 + 168) + (v2 >> 1));
  if ((v2 & 1) != 0)
    v3 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD, uint64_t))(*v4 + v3);
  v5 = v3(v4, a1 + 176, *(_QWORD *)(a1 + 232), *(_QWORD *)(a1 + 240), a1 + 248);
  std::mutex::lock((std::mutex *)(a1 + 24));
  if ((*(_BYTE *)(a1 + 136) & 1) != 0
    || (v7.__ptr_ = 0, v6 = *(_QWORD *)(a1 + 16), std::exception_ptr::~exception_ptr(&v7), v6))
  {
    sub_2109788B4(2u);
  }
  *(_QWORD *)(a1 + 144) = v5;
  *(_DWORD *)(a1 + 136) |= 5u;
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 88));
  std::mutex::unlock((std::mutex *)(a1 + 24));
}

void sub_210982388(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  std::__assoc_sub_state *v16;
  std::mutex *v17;
  std::exception_ptr v19;
  std::exception_ptr v20[8];

  std::mutex::unlock(v17);
  __cxa_begin_catch(a1);
  std::current_exception();
  v19.__ptr_ = v20;
  std::__assoc_sub_state::set_exception(v16, v19);
  std::exception_ptr::~exception_ptr(v20);
  __cxa_end_catch();
}

void sub_2109823D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_2109823F4(uint64_t a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v2;
  const void *v3;
  uint64_t v4;
  void (*v5)(_QWORD *);
  _QWORD *v6;
  const void *v7;
  uint64_t v8;

  v2 = std::__thread_local_data();
  v3 = *(const void **)a1;
  *(_QWORD *)a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(void (**)(_QWORD *))(a1 + 8);
  v6 = (_QWORD *)(*(_QWORD *)(a1 + 24) + (v4 >> 1));
  if ((v4 & 1) != 0)
    v5 = *(void (**)(_QWORD *))(*v6 + v5);
  v5(v6);
  v7 = *(const void **)a1;
  *(_QWORD *)a1 = 0;
  if (v7)
  {
    v8 = MEMORY[0x212BCC4F8]();
    MEMORY[0x212BCC6FC](v8, 0x20C4093837F09);
  }
  MEMORY[0x212BCC6FC](a1, 0xA0C40F20CD8FBLL);
  return 0;
}

void sub_21098248C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_210978E88((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2109824A0(uint64_t result)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  if (result)
  {
    v1 = result;
    v2 = *(uint64_t **)(result + 96);
    *(_QWORD *)(result + 96) = 0;
    if (v2)
    {
      v3 = *v2;
      *v2 = 0;
      if (v3)
      {
        std::mutex::~mutex((std::mutex *)(v3 + 72));
        v4 = sub_21097F9CC((_QWORD *)v3);
        MEMORY[0x212BCC6FC](v4, 0x1020C40A43346C3);
      }
      MEMORY[0x212BCC6FC](v2, 0x1020C4094298415);
    }
    v5 = *(_QWORD *)(v1 + 72);
    *(_QWORD *)(v1 + 72) = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    JUMPOUT(0x212BCC6FCLL);
  }
  return result;
}

BOOL sub_21098254C(unint64_t a1, unint64_t a2, float *a3, uint64_t a4)
{
  float v7;
  float v8;
  __float2 v9;
  float v10;
  float v11;
  float v12;
  _BOOL8 result;
  float v14;
  float v15;
  float v16;
  float v17;
  float v19;
  float v20;
  float v22;
  BOOL v23;
  float v24;
  _BOOL4 v25;

  v7 = 1.0;
  if ((a4 & 0xFF00000000) != 0)
    v7 = *(float *)&a4;
  v8 = v7 * a3[3];
  v9 = __sincosf_stret(a3[2]);
  v10 = *a3;
  v11 = v8 * (float)(v9.__sinval - v9.__cosval);
  v12 = *a3 + v11;
  result = 0;
  if (v12 >= 0.0)
  {
    v14 = (float)a2 + -1.0;
    v15 = a3[1];
    v16 = (float)a1 + -1.0;
    v17 = v8 * (float)((float)-v9.__cosval - v9.__sinval);
    if (v14 > (float)(v15 + v17) && v16 > v12 && (float)(v15 + v17) >= 0.0)
    {
      v19 = v8 * (float)(v9.__cosval + v9.__sinval);
      result = 0;
      if ((float)(v10 + v19) >= 0.0)
      {
        v20 = v15 + v11;
        if (v14 > v20 && v16 > (float)(v10 + v19) && v20 >= 0.0)
        {
          result = 0;
          if ((float)(v10 + v17) >= 0.0)
          {
            v22 = v8 * (float)(v9.__cosval - v9.__sinval);
            v23 = v14 <= (float)(v15 + v22) || v16 <= (float)(v10 + v17);
            if (!v23 && (float)(v15 + v22) >= 0.0)
            {
              v24 = v10 + v22;
              if (v24 >= 0.0)
              {
                v25 = v16 > v24;
                if ((float)(v15 + v19) < 0.0)
                  v25 = 0;
                return v14 > (float)(v15 + v19) && v25;
              }
              else
              {
                return 0;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_210982694(uint64_t a1, uint64_t a2, float *a3, int *a4, uint64_t a5, int a6, uint64_t a7)
{
  uint64_t v9;
  int v13;
  BOOL v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  float v20;
  int32x2_t v21;
  int32x2_t v22;
  unint64_t v23;
  float v24;
  __float2 v25;
  int32x4_t v26;
  int32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  int32x4_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  float *v78;
  unint64_t v79;
  unint64_t v80;
  float v81;
  unsigned int v82;
  uint64_t v83;
  int32x4_t *v84;
  float *v85;
  BOOL *v86;
  int *v87;
  __int128 *v88;
  int32x4_t *v89;
  int32x4_t *v90;
  uint64_t v91;
  BOOL v92;
  int32x4_t v93;
  uint64_t v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  uint64_t v97;
  unsigned int v98;
  unsigned int v99;
  char v100;
  char v101;
  int32x4_t v102;
  int32x4_t v103;
  __int128 v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD v108[2];
  __int128 v109;
  uint64_t v110;

  v9 = (uint64_t)a4;
  v105 = a6;
  v13 = *a4;
  sub_210978910((uint64_t)a4, (uint64_t)&v83);
  sub_210978910(v9, (uint64_t)&v94);
  v16 = (_DWORD)v84 == v13 && HIDWORD(v95) == v13 && *(_DWORD *)(v9 + 8) == (_DWORD)a2 && *(_DWORD *)(a5 + 56) == v13;
  if ((!v16 || *(_DWORD *)(a5 + 60) != HIDWORD(v95))
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/PatchCropping/src/SIMDCropper.cpp", 42, (uint64_t)"IsValidateSIMDCropperInputs( key_points.size(), patches.PatchSize(), {patches.View3D().Shape()[0], patches.View3D().Shape()[1], patches.NumberOfUsedPatches()}, norm.Size())", 172, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
  v17 = *(_DWORD *)(a1 + 32);
  v18 = *(_DWORD *)(a1 + 36);
  if (v17 <= v18)
    v19 = *(_DWORD *)(a1 + 36);
  else
    v19 = *(_DWORD *)(a1 + 32);
  v79 = *(unsigned int *)(a1 + 36);
  v80 = *(unsigned int *)(a1 + 32);
  v20 = (float)v19 - nextafterf((float)v19, -3.4028e38);
  v104 = 0uLL;
  *(float *)v21.i32 = (float)((float)v17 + -1.0) - v20;
  *(float *)v22.i32 = (float)((float)v18 + -1.0) - v20;
  v102 = vdupq_lane_s32(v22, 0);
  v103 = vdupq_lane_s32(v21, 0);
  if (a2)
  {
    v23 = 0;
    v78 = &a3[5 * a2];
    if ((a7 & 0xFF00000000) != 0)
      v24 = *(float *)&a7;
    else
      v24 = 1.0;
    v74 = v9;
    v75 = a7;
    v73 = a1;
    while (1)
    {
      sub_21097E884((uint64_t *)v9, v23, &v94);
      v81 = v24 * a3[3];
      v25 = __sincosf_stret(a3[2]);
      *(float32x2_t *)v26.i8 = vmul_n_f32((float32x2_t)__PAIR64__(LODWORD(v25.__sinval), LODWORD(v25.__cosval)), v81);
      *(float *)v27.i32 = -(float)(v25.__sinval * v81);
      v93 = vzip1q_s32(v26, vzip1q_s32(v27, v26));
      v92 = !sub_21098254C(v80, v79, a3, a7);
      v83 = v9;
      v84 = &v93;
      v85 = a3;
      v86 = &v92;
      v87 = &v105;
      v88 = &v104;
      v89 = &v103;
      v90 = &v102;
      v91 = a1;
      v31 = *(_QWORD *)(a5 + 8);
      if (!v31)
      {
LABEL_40:
        v107 = 0;
        v40 = v95;
        if (!v95)
          goto LABEL_57;
        goto LABEL_41;
      }
      v32 = *(std::__shared_weak_count **)(a5 + 16);
      if (!v32)
        break;
      p_shared_owners = (unint64_t *)&v32->__shared_owners_;
      do
        v34 = __ldxr(p_shared_owners);
      while (__stxr(v34 + 1, p_shared_owners));
      do
        v35 = __ldaxr(p_shared_owners);
      while (__stlxr(v35 - 1, p_shared_owners));
      if (v35)
      {
        v31 = *(_QWORD *)(a5 + 8);
        v36 = *(std::__shared_weak_count **)(a5 + 16);
        if (!v36)
          break;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
        v31 = *(_QWORD *)(a5 + 8);
        v36 = *(std::__shared_weak_count **)(a5 + 16);
        if (!v36)
          break;
      }
      v37 = (unint64_t *)&v36->__shared_owners_;
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 1, v37));
      do
        v39 = __ldaxr(v37);
      while (__stlxr(v39 - 1, v37));
      if (v39)
        break;
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
      if (!*(_BYTE *)(a5 + 73))
        goto LABEL_40;
LABEL_37:
      (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v31 + 96))(&v107, v31, 0);
      v40 = v95;
      if (!v95)
        goto LABEL_57;
LABEL_41:
      v41 = v96;
      if (!v96)
        goto LABEL_53;
      v42 = (unint64_t *)&v96->__shared_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
      do
        v44 = __ldaxr(v42);
      while (__stlxr(v44 - 1, v42));
      if (v44)
      {
        v40 = v95;
        v45 = v96;
        if (!v96)
          goto LABEL_53;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
        v40 = v95;
        v45 = v96;
        if (!v96)
          goto LABEL_53;
      }
      v46 = (unint64_t *)&v45->__shared_owners_;
      do
        v47 = __ldxr(v46);
      while (__stxr(v47 + 1, v46));
      do
        v48 = __ldaxr(v46);
      while (__stlxr(v48 - 1, v46));
      if (v48)
      {
LABEL_53:
        if (v101)
          goto LABEL_54;
        goto LABEL_57;
      }
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
      if (v101)
      {
LABEL_54:
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v40 + 96))(&v106, v40, 1);
        if (*(_DWORD *)(a5 + 32))
          goto LABEL_58;
        goto LABEL_81;
      }
LABEL_57:
      v106 = 0;
      if (*(_DWORD *)(a5 + 32))
      {
LABEL_58:
        if (*(_DWORD *)(a5 + 36))
        {
          v49 = *(_DWORD *)(a5 + 40);
          if (v49)
          {
            v50 = *(unsigned int *)(a5 + 44);
            v51 = *(unsigned int *)(a5 + 48);
            v76 = *(unsigned int *)(a5 + 52);
            v77 = v50;
            v52 = v98;
            v53 = v99;
            v54 = *(_QWORD *)(a5 + 24);
            v82 = v98;
            if (*(_BYTE *)(a5 + 72) && v54)
            {
              v56 = *(_QWORD *)(a5 + 8);
              v55 = *(std::__shared_weak_count **)(a5 + 16);
              if (v55)
              {
                v57 = (unint64_t *)&v55->__shared_owners_;
                do
                  v58 = __ldxr(v57);
                while (__stxr(v58 + 1, v57));
                do
                  v59 = __ldaxr(v57);
                while (__stlxr(v59 - 1, v57));
                if (!v59)
                {
                  ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                  std::__shared_weak_count::__release_weak(v55);
                }
              }
              (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v56 + 88))(v56, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
              v54 = *(_QWORD *)(a5 + 24);
              v52 = v82;
              v50 = v77;
            }
            v60 = v97;
            if (v100 && v97)
            {
              v62 = v95;
              v61 = v96;
              if (v96)
              {
                v63 = (unint64_t *)&v96->__shared_owners_;
                do
                  v64 = __ldxr(v63);
                while (__stxr(v64 + 1, v63));
                do
                  v65 = __ldaxr(v63);
                while (__stlxr(v65 - 1, v63));
                if (!v65)
                {
                  ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                  std::__shared_weak_count::__release_weak(v61);
                }
              }
              (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v62 + 88))(v62, 1, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
              v60 = v97;
              v52 = v82;
              v50 = v77;
            }
            v66 = 0uLL;
            v108[0] = 0;
            v109 = 0u;
            v108[1] = v50 | (v51 << 32);
            LODWORD(v109) = v51;
            v110 = v52;
            v67 = v49 - 1;
            if (v49 != 1)
            {
              do
              {
                v108[0] = v54;
                *((_QWORD *)&v109 + 1) = v60;
                sub_210982CF4((unint64_t)&v83, (uint64_t)v108, (uint64_t)&v109 + 8, v66, v28, v29, v30);
                v60 += v53;
                v54 += 4 * v76;
                --v67;
              }
              while (v67);
            }
            v108[0] = v54;
            *((_QWORD *)&v109 + 1) = v60;
            sub_210982CF4((unint64_t)&v83, (uint64_t)v108, (uint64_t)&v109 + 8, v66, v28, v29, v30);
            v9 = v74;
            a7 = v75;
            a1 = v73;
          }
        }
      }
LABEL_81:
      v68 = v106;
      v106 = 0;
      if (v68)
        (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
      v69 = v107;
      v107 = 0;
      if (v69)
        (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
      v70 = v96;
      if (v96)
      {
        v71 = (unint64_t *)&v96->__shared_owners_;
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
        }
      }
      a3 += 5;
      ++v23;
      if (a3 == v78)
        return;
    }
    if (!*(_BYTE *)(a5 + 73))
      goto LABEL_40;
    goto LABEL_37;
  }
}

void sub_210982C6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;
  uint64_t v34;

  v34 = *(_QWORD *)(v32 - 168);
  *(_QWORD *)(v32 - 168) = 0;
  if (!v34)
  {
    sub_2108C9DAC((uint64_t)&a32);
    _Unwind_Resume(a1);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  sub_2108C9DAC((uint64_t)&a32);
  _Unwind_Resume(a1);
}

unint64_t sub_210982CF4(unint64_t result, uint64_t a2, uint64_t a3, int32x4_t a4, float32x4_t a5, float32x4_t a6, float32x4_t a7)
{
  unint64_t v9;
  unint64_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  uint64_t v18;
  int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint16x4_t v24;
  unsigned int v25;
  float v26;
  unsigned int v27;
  unsigned int v28;
  float v29;
  unsigned int v30;
  unsigned int v31;
  float32x4_t v32;
  uint16x4_t v33;
  unsigned int v34;
  float32x4_t v35;
  int v36;
  unsigned __int8 *v37;
  unsigned int v38;
  unsigned __int8 *v39;
  unsigned int v40;
  unsigned int v41;
  float32x4_t v42;
  unsigned int v43;
  unsigned int v44;
  uint16x4_t v45;
  uint16x4_t v46;
  float32x4_t v47;
  int v48;
  int32x4_t v49;
  int32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x2_t *v53;
  const float *v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  int v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  simd_float4 x;
  simd_float4 v64;
  float32x4_t v65;

  if (**(_QWORD **)result)
  {
    v9 = result;
    v10 = 0;
    v11 = (float32x4_t)vdupq_n_s32(0x3F7FFFFFu);
    v61 = v11;
    do
    {
      v48 = *(_DWORD *)(a2 + 16);
      a4.i64[0] = *(_QWORD *)(*(_QWORD *)a2 + 4 * (v48 * v10));
      a5.i64[0] = *(_QWORD *)(*(_QWORD *)a2 + 4 * ((v10 + 1) * v48));
      a6.i64[0] = *(_QWORD *)(*(_QWORD *)a2 + 4 * ((v10 + 2) * v48));
      a7.i64[0] = *(_QWORD *)(*(_QWORD *)a2 + 4 * ((v10 + 3) * v48));
      v49 = vzip1q_s32(a4, (int32x4_t)a6);
      v50 = vzip1q_s32((int32x4_t)a5, (int32x4_t)a7);
      v51 = (float32x4_t)vzip1q_s32(v49, v50);
      v52 = (float32x4_t)vzip2q_s32(v49, v50);
      v53 = *(float32x2_t **)(v9 + 8);
      v54 = *(const float **)(v9 + 16);
      v55 = vmlaq_lane_f32(vmulq_n_f32(v51, COERCE_FLOAT(*v53)), v52, *v53, 1);
      v56 = vmlaq_lane_f32(vmulq_n_f32(v51, COERCE_FLOAT(*(_QWORD *)&v53[1])), v52, v53[1], 1);
      v57 = vld1q_dup_f32(v54++);
      v15 = vaddq_f32(v55, v57);
      v58 = vld1q_dup_f32(v54);
      v16 = vaddq_f32(v56, v58);
      if (**(_BYTE **)(v9 + 24))
      {
        v59 = **(_DWORD **)(v9 + 32);
        if (v59 == 2)
        {
          v65 = vaddq_f32(*(float32x4_t *)*(_QWORD *)(v9 + 48), *(float32x4_t *)*(_QWORD *)(v9 + 48));
          x = (simd_float4)v16;
          v64 = _simd_fmod_f4((simd_float4)v15, (simd_float4)v65);
          v62 = vaddq_f32(*(float32x4_t *)*(_QWORD *)(v9 + 56), *(float32x4_t *)*(_QWORD *)(v9 + 56));
          v12 = (float32x4_t)_simd_fmod_f4(x, (simd_float4)v62);
          v11 = v61;
          v13 = v12;
          v14 = vsubq_f32(v62, v12);
          v15 = vminnmq_f32((float32x4_t)v64, vsubq_f32(v65, (float32x4_t)v64));
        }
        else
        {
          if (v59 != 1)
            goto LABEL_5;
          v60 = *(float32x4_t *)*(_QWORD *)(v9 + 40);
          v15 = vminnmq_f32(vmaxnmq_f32(v15, v60), *(float32x4_t *)*(_QWORD *)(v9 + 48));
          v14 = *(float32x4_t *)*(_QWORD *)(v9 + 56);
          v13 = vmaxnmq_f32(v16, v60);
        }
        v16 = vminnmq_f32(v13, v14);
      }
LABEL_5:
      v17 = vminnmq_f32(vsubq_f32(v15, vrndmq_f32(v15)), v11);
      v18 = *(_QWORD *)(v9 + 64);
      v20 = *(_DWORD *)(v18 + 40);
      v19 = *(_DWORD *)(v18 + 44);
      v21 = v20 * v15.f32[0];
      v22 = v19 * v16.f32[0];
      v23 = *(_QWORD *)(v18 + 24);
      v24.i32[0] = v15.i32[1];
      LODWORD(v18) = v20 * v15.f32[1];
      v25 = v19 * v16.f32[1];
      v26 = v15.f32[2];
      v27 = v20 * v15.f32[2];
      v28 = v19 * v16.f32[2];
      v29 = v15.f32[3];
      v30 = v20 * v15.f32[3];
      v31 = v19 * v16.f32[3];
      v32 = vminnmq_f32(vsubq_f32(v16, vrndmq_f32(v16)), v11);
      v33.i16[0] = *(unsigned __int8 *)(v23 + v22 + v21);
      v33.i16[1] = *(unsigned __int8 *)(v23 + v25 + v18);
      v33.i16[2] = *(unsigned __int8 *)(v23 + v28 + v27);
      v33.i16[3] = *(unsigned __int8 *)(v23 + v31 + v30);
      v34 = (float)(v15.f32[0] + 1.0);
      v35 = vcvtq_f32_u32(vmovl_u16(v33));
      v36 = v20 * v34;
      v37 = (unsigned __int8 *)(v23 + v22 + v36);
      v38 = v20 * (float)(*(float *)v24.i32 + 1.0);
      v39 = (unsigned __int8 *)(v23 + v25 + v38);
      v40 = v20 * (float)(v26 + 1.0);
      v41 = v20 * (float)(v29 + 1.0);
      v24.i16[0] = *v37;
      v24.i16[1] = *v39;
      v24.i16[2] = *(unsigned __int8 *)(v23 + v28 + v40);
      v24.i16[3] = *(unsigned __int8 *)(v23 + v31 + v41);
      v42 = vcvtq_f32_u32(vmovl_u16(v24));
      result = v19 * (float)(v16.f32[0] + 1.0);
      v43 = v19 * (float)(v16.f32[1] + 1.0);
      LODWORD(v37) = v19 * (float)(v16.f32[2] + 1.0);
      v44 = v19 * (float)(v16.f32[3] + 1.0);
      v45.i16[0] = *(unsigned __int8 *)(v23 + result + v21);
      v45.i16[1] = *(unsigned __int8 *)(v23 + v43 + v18);
      v45.i16[2] = *(unsigned __int8 *)(v23 + v37 + v27);
      v45.i16[3] = *(unsigned __int8 *)(v23 + v44 + v30);
      a7 = vcvtq_f32_u32(vmovl_u16(v45));
      v46.i16[0] = *(unsigned __int8 *)(v23 + (result + v36));
      v46.i16[1] = *(unsigned __int8 *)(v23 + v43 + v38);
      v46.i16[2] = *(unsigned __int8 *)(v23 + v37 + v40);
      v46.i16[3] = *(unsigned __int8 *)(v23 + v44 + v41);
      v47 = vaddq_f32(vaddq_f32(vmulq_f32(v17, vsubq_f32(v42, v35)), v35), vmulq_f32(v32, vsubq_f32(a7, v35)));
      a5 = vmulq_f32(v17, v32);
      a6 = vsubq_f32(vsubq_f32(vcvtq_f32_u32(vmovl_u16(v46)), v42), a7);
      a4 = (int32x4_t)vrndaq_f32(vaddq_f32(v47, vmulq_f32(a5, vaddq_f32(a6, v35))));
      *(_BYTE *)(*(_QWORD *)a3 + (*(_DWORD *)(a3 + 8) * v10)) = (int)*(float *)a4.i32;
      *(_BYTE *)(*(_QWORD *)a3 + (*(_DWORD *)(a3 + 8) * (v10 + 1))) = (int)*(float *)&a4.i32[1];
      *(_BYTE *)(*(_QWORD *)a3 + (*(_DWORD *)(a3 + 8) * (v10 + 2))) = (int)*(float *)&a4.i32[2];
      *(_BYTE *)(*(_QWORD *)a3 + (*(_DWORD *)(a3 + 8) * (v10 + 3))) = (int)*(float *)&a4.i32[3];
      v10 += 4;
    }
    while (v10 < **(_QWORD **)v9);
  }
  return result;
}

uint64_t *sub_2109830E8()
{
  unsigned __int8 v0;
  unsigned __int8 v2;
  size_t v3;
  char *v4;
  __int128 v5;
  uint64_t v6;
  char v7;

  v0 = atomic_load((unsigned __int8 *)&qword_254A75D10);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A75D10))
  {
    v2 = atomic_load((unsigned __int8 *)&qword_254A75D18);
    if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A75D18))
    {
      sub_2109EB38C((uint64_t)&v5);
      if (v7)
      {
        xmmword_254A75D20 = v5;
        unk_254A75D30 = v6;
      }
      else
      {
        byte_254A75D37 = 14;
        strcpy((char *)&xmmword_254A75D20, "com.apple.cv3d");
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A75D20, &dword_21089F000);
      __cxa_guard_release(&qword_254A75D18);
    }
    if (byte_254A75D37 >= 0)
      v3 = byte_254A75D37;
    else
      v3 = *((_QWORD *)&xmmword_254A75D20 + 1);
    if (byte_254A75D37 >= 0)
      v4 = (char *)&xmmword_254A75D20;
    else
      v4 = (char *)xmmword_254A75D20;
    qword_254A75D38 = (uint64_t)os_log_create(v4, "tracing");
    sub_210983334(&qword_254A75D40, v4, v3);
    sub_210983334(qword_254A75D60, "tracing", 7uLL);
    __cxa_atexit((void (*)(void *))sub_2109832C8, &qword_254A75D38, &dword_21089F000);
    __cxa_guard_release(&qword_254A75D10);
  }
  return &qword_254A75D38;
}

void sub_21098324C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A75D18);
  __cxa_guard_abort(&qword_254A75D10);
  _Unwind_Resume(a1);
}

void sub_210983270(_Unwind_Exception *a1)
{
  if (byte_254A75D58 && byte_254A75D57 < 0)
    operator delete((void *)qword_254A75D40);
  if (qword_254A75D38)
    os_release((void *)qword_254A75D38);
  __cxa_guard_abort(&qword_254A75D10);
  _Unwind_Resume(a1);
}

uint64_t sub_2109832C8(uint64_t a1)
{
  void *v2;

  if (*(_BYTE *)(a1 + 64) && *(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(_BYTE *)(a1 + 32) && *(char *)(a1 + 31) < 0)
  {
    operator delete(*(void **)(a1 + 8));
    v2 = *(void **)a1;
    if (!*(_QWORD *)a1)
      return a1;
    goto LABEL_7;
  }
  v2 = *(void **)a1;
  if (*(_QWORD *)a1)
LABEL_7:
    os_release(v2);
  return a1;
}

_QWORD *sub_210983334(_QWORD *__dst, void *__src, size_t __len)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    sub_2108A4B7C();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    v6 = __dst;
    if (!__len)
      goto LABEL_9;
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  *((_BYTE *)__dst + 24) = 1;
  return __dst;
}

_QWORD *sub_2109833E4(_QWORD *a1, uint64_t a2, void *__src, size_t __len, __int128 *a5, __int128 *a6, void *a7, size_t a8, void *__srca, size_t __lena, uint64_t a11, _OWORD *a12)
{
  void *v19;
  _QWORD *v20;
  __int128 v21;
  size_t v22;
  size_t v23;
  _QWORD *v24;
  __int128 v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  size_t v30;
  size_t v31;

  *a1 = a2;
  if (__len > 0x7FFFFFFFFFFFFFF7)
    sub_2108A4B7C();
  if (__len >= 0x17)
  {
    v22 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v22 = __len | 7;
    v23 = v22 + 1;
    v19 = operator new(v22 + 1);
    a1[2] = __len;
    a1[3] = v23 | 0x8000000000000000;
    a1[1] = v19;
  }
  else
  {
    *((_BYTE *)a1 + 31) = __len;
    v19 = a1 + 1;
    if (!__len)
    {
      *((_BYTE *)a1 + 8) = 0;
      *((_BYTE *)a1 + 32) = 0;
      v20 = a1 + 4;
      *((_BYTE *)a1 + 56) = 0;
      if (*((_BYTE *)a5 + 24))
        goto LABEL_5;
LABEL_11:
      *((_BYTE *)a1 + 64) = 0;
      v24 = a1 + 8;
      *((_BYTE *)a1 + 88) = 0;
      if (!*((_BYTE *)a6 + 24))
        goto LABEL_19;
      goto LABEL_15;
    }
  }
  memmove(v19, __src, __len);
  *((_BYTE *)v19 + __len) = 0;
  *((_BYTE *)a1 + 32) = 0;
  v20 = a1 + 4;
  *((_BYTE *)a1 + 56) = 0;
  if (!*((_BYTE *)a5 + 24))
    goto LABEL_11;
LABEL_5:
  if (*((char *)a5 + 23) < 0)
  {
    sub_2108B314C(v20, *(void **)a5, *((_QWORD *)a5 + 1));
  }
  else
  {
    v21 = *a5;
    v20[2] = *((_QWORD *)a5 + 2);
    *(_OWORD *)v20 = v21;
  }
  *((_BYTE *)a1 + 56) = 1;
  *((_BYTE *)a1 + 64) = 0;
  v24 = a1 + 8;
  *((_BYTE *)a1 + 88) = 0;
  if (*((_BYTE *)a6 + 24))
  {
LABEL_15:
    if (*((char *)a6 + 23) < 0)
    {
      sub_2108B314C(v24, *(void **)a6, *((_QWORD *)a6 + 1));
    }
    else
    {
      v25 = *a6;
      v24[2] = *((_QWORD *)a6 + 2);
      *(_OWORD *)v24 = v25;
    }
    *((_BYTE *)a1 + 88) = 1;
  }
LABEL_19:
  if (a8 > 0x7FFFFFFFFFFFFFF7)
    sub_2108A4B7C();
  if (a8 >= 0x17)
  {
    v27 = (a8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a8 | 7) != 0x17)
      v27 = a8 | 7;
    v28 = v27 + 1;
    v26 = operator new(v27 + 1);
    a1[13] = a8;
    a1[14] = v28 | 0x8000000000000000;
    a1[12] = v26;
    goto LABEL_26;
  }
  *((_BYTE *)a1 + 119) = a8;
  v26 = a1 + 12;
  if (a8)
LABEL_26:
    memmove(v26, a7, a8);
  *((_BYTE *)v26 + a8) = 0;
  v29 = a1 + 15;
  if (__lena > 0x7FFFFFFFFFFFFFF7)
    sub_2108A4B7C();
  if (__lena >= 0x17)
  {
    v30 = (__lena & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__lena | 7) != 0x17)
      v30 = __lena | 7;
    v31 = v30 + 1;
    v29 = operator new(v30 + 1);
    a1[16] = __lena;
    a1[17] = v31 | 0x8000000000000000;
    a1[15] = v29;
  }
  else
  {
    *((_BYTE *)a1 + 143) = __lena;
    if (!__lena)
      goto LABEL_35;
  }
  memmove(v29, __srca, __lena);
LABEL_35:
  *((_BYTE *)v29 + __lena) = 0;
  a1[18] = a11;
  *(_OWORD *)(a1 + 19) = *a12;
  return a1;
}

void sub_21098366C(_Unwind_Exception *exception_object)
{
  char *v1;
  void **v2;
  void **v3;
  void **v4;

  if (v1[88] && v1[87] < 0)
    operator delete(*v4);
  if (v1[56] && v1[55] < 0)
    operator delete(*v3);
  if (v1[31] < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_2109836DC(std::mutex *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = *(_QWORD *)this[1].__m_.__opaque;
  if (v2)
  {
    v3 = *(_QWORD *)&this[1].__m_.__opaque[8];
    v4 = *(void **)this[1].__m_.__opaque;
    if (v3 == v2)
    {
LABEL_11:
      *(_QWORD *)&this[1].__m_.__opaque[8] = v2;
      operator delete(v4);
      goto LABEL_12;
    }
    while (1)
    {
      v5 = *(_QWORD **)(v3 - 8);
      if ((_QWORD *)(v3 - 32) == v5)
      {
        v5 = (_QWORD *)(v3 - 32);
        v6 = 4;
      }
      else
      {
        if (!v5)
          goto LABEL_6;
        v6 = 5;
      }
      (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
      v3 -= 40;
      if (v3 == v2)
      {
        v4 = *(void **)this[1].__m_.__opaque;
        goto LABEL_11;
      }
    }
  }
LABEL_12:
  std::mutex::~mutex(this);
}

void sub_210983768(void **a1, __int128 *a2)
{
  unint64_t v4;
  char *v5;
  __int128 v6;
  char *v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;

  v5 = (char *)a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 < v4)
  {
    v6 = *a2;
    *((_DWORD *)v5 + 4) = *((_DWORD *)a2 + 4);
    *(_OWORD *)v5 = v6;
    v7 = v5 + 20;
LABEL_3:
    a1[1] = v7;
    return;
  }
  v8 = (char *)*a1;
  v9 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - (_BYTE *)*a1) >> 2);
  v10 = v9 + 1;
  if (v9 + 1 > 0xCCCCCCCCCCCCCCCLL)
    sub_2108CDFC4();
  v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v4 - (_QWORD)v8) >> 2);
  if (2 * v11 > v10)
    v10 = 2 * v11;
  if (v11 >= 0x666666666666666)
    v12 = 0xCCCCCCCCCCCCCCCLL;
  else
    v12 = v10;
  if (v12)
  {
    if (v12 > 0xCCCCCCCCCCCCCCCLL)
      sub_2108B2B1C();
    v13 = (char *)operator new(20 * v12);
  }
  else
  {
    v13 = 0;
  }
  v14 = &v13[20 * v9];
  *(_OWORD *)v14 = *a2;
  *((_DWORD *)v14 + 4) = *((_DWORD *)a2 + 4);
  v7 = v14 + 20;
  if (v5 != v8)
  {
    do
    {
      v15 = *(_OWORD *)(v5 - 20);
      *((_DWORD *)v14 - 1) = *((_DWORD *)v5 - 1);
      *(_OWORD *)(v14 - 20) = v15;
      v14 -= 20;
      v5 -= 20;
    }
    while (v5 != v8);
    v5 = (char *)*a1;
  }
  *a1 = v14;
  a1[1] = v7;
  a1[2] = &v13[20 * v12];
  if (!v5)
    goto LABEL_3;
  operator delete(v5);
  a1[1] = v7;
}

uint64_t sub_2109838B8(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  int v5;
  unint64_t *v7;
  unint64_t v8;
  unint64_t **v9;

  v7 = &v8;
  v8 = 0;
  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2 == -1)
    sub_2108B9060();
  v9 = &v7;
  ((void (*)(unint64_t ***, uint64_t))off_24CA822B8[v2])(&v9, a1);
  if (v8 <= a2
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/Common/src/FeaturesData.cpp", 129, (uint64_t)"i < Size()", 10, (uint64_t)"Index is larger than descriptors count", 38, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_11;
  }
  v5 = *(_DWORD *)(a1 + 24);
  if (v5)
  {
    if (v5 != 1)
    {
      sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/Common/src/FeaturesData.cpp", 135, (uint64_t)&unk_210A06986, 0, (uint64_t)"Not supported", 13, (void (*)(void **))sub_2109EDDB4);
      abort();
    }
    if (*(_QWORD *)a1
      || !sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A06986, 0, (void (*)(void **))sub_2109EDDB4))
    {
      return 64;
    }
LABEL_11:
    abort();
  }
  return 0;
}

uint64_t sub_2109839FC(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  int v5;
  unint64_t *v7;
  unint64_t v8;
  unint64_t **v9;

  v7 = &v8;
  v8 = 0;
  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2 == -1)
    sub_2108B9060();
  v9 = &v7;
  ((void (*)(unint64_t ***, uint64_t))off_24CA822B8[v2])(&v9, a1);
  if (v8 <= a2
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/Common/src/FeaturesData.cpp", 141, (uint64_t)"i < Size()", 10, (uint64_t)"Index is larger than descriptors count", 38, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_13;
  }
  v5 = *(_DWORD *)(a1 + 24);
  if (v5 != 3)
  {
    if (v5 != 2)
    {
      sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/Common/src/FeaturesData.cpp", 147, (uint64_t)&unk_210A06986, 0, (uint64_t)"Not supported", 13, (void (*)(void **))sub_2109EDDB4);
      abort();
    }
    if (*(_QWORD *)a1
      || !sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A06986, 0, (void (*)(void **))sub_2109EDDB4))
    {
      return 64;
    }
LABEL_13:
    abort();
  }
  if (!*(_QWORD *)a1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A06986, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_13;
  }
  return 128;
}

uint64_t sub_210983B80(char **a1, uint64_t a2)
{
  int v4;
  int v5;
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  _OWORD *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  _OWORD *v25;
  _OWORD *v26;
  char **i;

  v4 = *((_DWORD *)a1 + 10);
  if (v4)
  {
    if (v4 != *(_DWORD *)(a2 + 40) || a1[4] != *(char **)(a2 + 32))
      return 0;
    v5 = *((_DWORD *)a1 + 6);
    switch(v5)
    {
      case 3:
        if (*(_DWORD *)(a2 + 24) == 3)
        {
          v11 = *(_OWORD **)a2;
          v12 = *(_OWORD **)(a2 + 8);
          if (*(_OWORD **)a2 != v12)
          {
            v13 = a1[1];
            do
            {
              v15 = (unint64_t)a1[2];
              if ((unint64_t)v13 < v15)
              {
                memcpy(v13, v11, 0x200uLL);
                v14 = v13 + 512;
              }
              else
              {
                v16 = *a1;
                v17 = (v13 - *a1) >> 9;
                v18 = v17 + 1;
                if ((unint64_t)(v17 + 1) >> 55)
                  sub_2108B327C();
                v19 = v15 - (_QWORD)v16;
                if (v19 >> 8 > v18)
                  v18 = v19 >> 8;
                if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFE00)
                  v20 = 0x7FFFFFFFFFFFFFLL;
                else
                  v20 = v18;
                if (v20)
                {
                  if (v20 >> 55)
                    sub_2108B2B1C();
                  v21 = (char *)operator new(v20 << 9);
                }
                else
                {
                  v21 = 0;
                }
                v22 = &v21[512 * v17];
                memcpy(v22, v11, 0x200uLL);
                v23 = v22;
                if (v13 != v16)
                {
                  do
                  {
                    v13 -= 512;
                    v23 -= 512;
                    memcpy(v23, v13, 0x200uLL);
                  }
                  while (v13 != v16);
                  v13 = *a1;
                }
                v24 = &v21[512 * v20];
                v14 = v22 + 512;
                *a1 = v23;
                a1[1] = v22 + 512;
                a1[2] = v24;
                if (v13)
                  operator delete(v13);
              }
              a1[1] = v14;
              v11 += 32;
              v13 = v14;
            }
            while (v11 != v12);
          }
          return 1;
        }
        break;
      case 2:
        if (*(_DWORD *)(a2 + 24) == 2)
        {
          v25 = *(_OWORD **)a2;
          v26 = *(_OWORD **)(a2 + 8);
          for (i = a1; v25 != v26; v25 += 16)
            sub_210966BC4(&i, v25);
          return 1;
        }
        break;
      case 1:
        if (*(_DWORD *)(a2 + 24) == 1)
        {
          v6 = *(_OWORD **)a2;
          v7 = *(_OWORD **)(a2 + 8);
          for (i = a1; v6 != v7; v6 += 4)
            sub_210966D7C(&i, v6);
          return 1;
        }
        break;
      default:
        sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/Common/src/FeaturesData.cpp", 175, (uint64_t)&unk_210A06986, 0, (uint64_t)"Not supported", 13, (void (*)(void **))sub_2109EDDB4);
        abort();
    }
    sub_2108B9060();
  }
  v9 = *((unsigned int *)a1 + 6);
  v10 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v9 == -1)
  {
    if ((_DWORD)v10 == -1)
      goto LABEL_17;
LABEL_16:
    i = a1;
    ((void (*)(char ***, char **, uint64_t))off_24CA82318[v10])(&i, a1, a2);
    goto LABEL_17;
  }
  if ((_DWORD)v10 != -1)
    goto LABEL_16;
  ((void (*)(char ***, char **))off_24CA822F8[v9])(&i, a1);
  *((_DWORD *)a1 + 6) = -1;
LABEL_17:
  a1[4] = *(char **)(a2 + 32);
  *((_DWORD *)a1 + 10) = *(_DWORD *)(a2 + 40);
  return 1;
}

_QWORD ***sub_210983E54(_QWORD ***result)
{
  ***result = 0;
  return result;
}

_QWORD ***sub_210983E64(_QWORD ***result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  if (*a2 == a2[1])
    v2 = 0;
  ***result = v2;
  return result;
}

_QWORD ***sub_210983E80(_QWORD ***result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  if (*a2 == a2[1])
    v2 = 0;
  ***result = v2;
  return result;
}

_QWORD ***sub_210983E9C(_QWORD ***result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  if (*a2 == a2[1])
    v2 = 0;
  ***result = v2;
  return result;
}

_QWORD ***sub_210983EB8(_QWORD ***result, _QWORD *a2)
{
  ***result = a2[1] - *a2;
  return result;
}

uint64_t ***sub_210983ED0(uint64_t ***result, _QWORD *a2)
{
  ***result = (uint64_t)(a2[1] - *a2) >> 6;
  return result;
}

uint64_t ***sub_210983EEC(uint64_t ***result, _QWORD *a2)
{
  ***result = (uint64_t)(a2[1] - *a2) >> 8;
  return result;
}

uint64_t ***sub_210983F08(uint64_t ***result, _QWORD *a2)
{
  ***result = (uint64_t)(a2[1] - *a2) >> 9;
  return result;
}

BOOL ***sub_210983F24(BOOL ***result, _QWORD *a2)
{
  ***result = *a2 == a2[1];
  return result;
}

BOOL ***sub_210983F40(BOOL ***result, _QWORD *a2)
{
  ***result = *a2 == a2[1];
  return result;
}

BOOL ***sub_210983F5C(BOOL ***result, _QWORD *a2)
{
  ***result = *a2 == a2[1];
  return result;
}

BOOL ***sub_210983F78(BOOL ***result, _QWORD *a2)
{
  ***result = *a2 == a2[1];
  return result;
}

__n128 sub_210983F94(uint64_t *a1, uint64_t a2, __n128 *a3)
{
  uint64_t v4;
  uint64_t v5;
  void *v7;
  __n128 result;
  char v9;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 24);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5)
  {
    ((void (*)(char *, uint64_t))off_24CA822F8[v5])(&v9, v4);
LABEL_7:
    *(_QWORD *)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)(v4 + 16) = 0;
    result = *a3;
    *(__n128 *)v4 = *a3;
    *(_QWORD *)(v4 + 16) = a3[1].n128_u64[0];
    a3->n128_u64[0] = 0;
    a3->n128_u64[1] = 0;
    a3[1].n128_u64[0] = 0;
    *(_DWORD *)(v4 + 24) = 0;
    return result;
  }
  v7 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v7;
    operator delete(v7);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  result = *a3;
  *(__n128 *)a2 = *a3;
  *(_QWORD *)(a2 + 16) = a3[1].n128_u64[0];
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  return result;
}

__n128 sub_21098405C(uint64_t *a1, uint64_t a2, __n128 *a3)
{
  uint64_t v4;
  uint64_t v5;
  void *v7;
  __n128 result;
  char v9;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 24);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 1)
  {
    ((void (*)(char *, uint64_t))off_24CA822F8[v5])(&v9, v4);
LABEL_7:
    *(_QWORD *)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)(v4 + 16) = 0;
    result = *a3;
    *(__n128 *)v4 = *a3;
    *(_QWORD *)(v4 + 16) = a3[1].n128_u64[0];
    a3->n128_u64[0] = 0;
    a3->n128_u64[1] = 0;
    a3[1].n128_u64[0] = 0;
    *(_DWORD *)(v4 + 24) = 1;
    return result;
  }
  v7 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v7;
    operator delete(v7);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  result = *a3;
  *(__n128 *)a2 = *a3;
  *(_QWORD *)(a2 + 16) = a3[1].n128_u64[0];
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  return result;
}

__n128 sub_21098412C(uint64_t *a1, uint64_t a2, __n128 *a3)
{
  uint64_t v4;
  uint64_t v5;
  void *v7;
  __n128 result;
  char v9;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 24);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 2)
  {
    ((void (*)(char *, uint64_t))off_24CA822F8[v5])(&v9, v4);
LABEL_7:
    *(_QWORD *)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)(v4 + 16) = 0;
    result = *a3;
    *(__n128 *)v4 = *a3;
    *(_QWORD *)(v4 + 16) = a3[1].n128_u64[0];
    a3->n128_u64[0] = 0;
    a3->n128_u64[1] = 0;
    a3[1].n128_u64[0] = 0;
    *(_DWORD *)(v4 + 24) = 2;
    return result;
  }
  v7 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v7;
    operator delete(v7);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  result = *a3;
  *(__n128 *)a2 = *a3;
  *(_QWORD *)(a2 + 16) = a3[1].n128_u64[0];
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  return result;
}

__n128 sub_2109841FC(uint64_t *a1, uint64_t a2, __n128 *a3)
{
  uint64_t v4;
  uint64_t v5;
  void *v7;
  __n128 result;
  char v9;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 24);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 3)
  {
    ((void (*)(char *, uint64_t))off_24CA822F8[v5])(&v9, v4);
LABEL_7:
    *(_QWORD *)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)(v4 + 16) = 0;
    result = *a3;
    *(__n128 *)v4 = *a3;
    *(_QWORD *)(v4 + 16) = a3[1].n128_u64[0];
    a3->n128_u64[0] = 0;
    a3->n128_u64[1] = 0;
    a3[1].n128_u64[0] = 0;
    *(_DWORD *)(v4 + 24) = 3;
    return result;
  }
  v7 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v7;
    operator delete(v7);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  result = *a3;
  *(__n128 *)a2 = *a3;
  *(_QWORD *)(a2 + 16) = a3[1].n128_u64[0];
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  return result;
}

void sub_2109842CC(__int128 *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  __int128 *v7;
  __int128 v8;
  __int128 v9;
  _OWORD *v10;
  unint64_t v11;
  char *v12;
  void **v13;
  void **v14;
  int v15;
  uint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint8x8_t v21;
  uint64_t **v22;
  uint64_t *v23;
  char v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const void **v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const void **v35;
  char *v36;
  _QWORD *v37;
  _QWORD *v38;
  __int128 v39;
  float v40;
  unint64_t v41;
  _BOOL8 v42;
  unint64_t v43;
  unint64_t v44;
  size_t prime;
  void *v46;
  void *v47;
  uint64_t v48;
  _QWORD **v49;
  size_t v50;
  size_t v51;
  size_t v52;
  _QWORD *i;
  size_t v54;
  uint64_t v55;
  unint64_t v56;
  uint8x8_t v57;
  uint64_t v58;
  _QWORD *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  size_t v63;
  void *v64;
  void **v65;
  void *v66;
  char *v67;
  void **v68;
  int v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  __int128 *v73;
  char *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  char *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  void **v86;
  void **v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  char *v92;
  void *v93;
  int v94;
  uint64_t v95;
  char *v96;
  unint64_t v97;
  unint64_t v98;
  uint8x8_t v99;
  _QWORD *v100;
  _QWORD *v101;
  unint64_t v102;
  uint64_t v103;
  char *v104;
  float v105;
  void **v106;
  void **v107;
  _BOOL8 v108;
  unint64_t v109;
  unint64_t v110;
  size_t v111;
  void *v112;
  void *v113;
  uint64_t v114;
  _QWORD **v115;
  size_t v116;
  size_t v117;
  size_t v118;
  _QWORD *j;
  size_t v120;
  uint64_t v121;
  unint64_t v122;
  uint8x8_t v123;
  uint64_t v124;
  _QWORD *v125;
  void *v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  size_t v130;
  void *v131;
  char *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  __int128 v136;
  char *v137;
  __int128 v138;
  char *v139;
  unint64_t v140;
  unint64_t v141;
  char *v142;
  char *v143;
  char *v144;
  char *v145;
  uint64_t v146;
  __int128 v147;
  char *v148;
  char *v149;
  void **v150;
  void **v151;
  void **v152;
  void *v153;
  char *v154;
  void *v155;
  void **v156;
  void **v157;
  void *v158;
  int v159;
  uint64_t v160;
  char *v161;
  char *v162;
  unint64_t v163;
  unint64_t v164;
  uint8x8_t v165;
  _QWORD *v166;
  _QWORD *v167;
  unint64_t v168;
  uint64_t v169;
  char *v170;
  _BYTE *v171;
  __int128 v172;
  float v173;
  char **v174;
  char *v175;
  _BOOL8 v176;
  unint64_t v177;
  unint64_t v178;
  size_t v179;
  size_t v180;
  unint64_t v181;
  uint8x8_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  void *v186;
  uint64_t v187;
  uint64_t v188;
  void *v189;
  char *v190;
  void *v191;
  char *v192;
  uint64_t v193;
  unint64_t v194;
  char *v195;
  char *v196;
  __int128 *v197;
  char *v198;
  void *v199[2];
  char v200;
  char v201;
  void *v202;
  char v203;
  void *v204;
  char v205;
  char v206;
  char v207;
  __int128 v208;
  char v209;
  char v210;
  void *v211;
  char v212;
  void *v213;
  char v214;
  char v215;
  char v216;
  __int128 v217;
  char v218;
  char v219;
  void *v220;
  char v221;
  void *v222;
  char v223;
  char v224;
  char v225;
  __int128 __p;
  void *v227[3];
  uint64_t v228;
  _BYTE v229[24];
  uint64_t v230;
  __int128 v231;
  uint64_t v232;
  char v233;
  char v234;
  unint64_t v235;
  __int128 v236;
  unint64_t v237;
  char *v238;
  char v239;
  char *v240;
  __int128 v241;

  if (!a2)
  {
    sub_210986CE8((uint64_t)&v217, "Needs to be initialized with at least one config.");
    v225 = 1;
    sub_2109863B8(0x16u, &v217, (uint64_t)&__p);
    *(_OWORD *)a3 = __p;
    *(_BYTE *)(a3 + 16) = 0;
    *(_BYTE *)(a3 + 112) = 0;
    if (v234)
    {
      *(_BYTE *)(a3 + 40) = 0;
      v69 = v228;
      if ((_BYTE)v228)
      {
        *(_OWORD *)(a3 + 16) = *(_OWORD *)v227;
        *(void **)(a3 + 32) = v227[2];
        memset(v227, 0, sizeof(v227));
        *(_BYTE *)(a3 + 40) = 1;
      }
      *(_BYTE *)(a3 + 48) = 0;
      *(_BYTE *)(a3 + 104) = 0;
      if (v233)
      {
        v70 = v230;
        *(_QWORD *)(a3 + 64) = *(_QWORD *)&v229[16];
        *(_OWORD *)(a3 + 48) = *(_OWORD *)v229;
        *(_QWORD *)v229 = 0;
        *(_QWORD *)&v229[8] = 0;
        *(_QWORD *)(a3 + 72) = v70;
        *(_OWORD *)(a3 + 80) = v231;
        *(_QWORD *)(a3 + 96) = v232;
        *(_QWORD *)&v229[16] = 0;
        v231 = 0uLL;
        v232 = 0;
        *(_BYTE *)(a3 + 104) = 1;
      }
      *(_BYTE *)(a3 + 112) = 1;
      *(_BYTE *)(a3 + 120) = 0;
      if (v69 && SHIBYTE(v227[2]) < 0)
        operator delete(v227[0]);
      if (!v225)
        return;
    }
    else
    {
      *(_BYTE *)(a3 + 120) = 0;
      if (!v225)
        return;
    }
    if (v224)
    {
      if (v223 < 0)
        operator delete(v222);
      if (v221 < 0)
        operator delete(v220);
    }
    if (v219 && v218 < 0)
    {
      v133 = (char *)v217;
      goto LABEL_517;
    }
    return;
  }
  v240 = 0;
  v241 = 0uLL;
  sub_2108B354C(&v240, a2);
  v194 = a2;
  v6 = 5 * a2;
  v197 = &a1[v6];
  v7 = a1;
  do
  {
    if (*((char *)v7 + 23) < 0)
    {
      sub_2108B314C(&__p, *(void **)v7, *((_QWORD *)v7 + 1));
    }
    else
    {
      v9 = *v7;
      v227[0] = *((void **)v7 + 2);
      __p = v9;
    }
    v10 = (_OWORD *)v241;
    if ((unint64_t)v241 < *((_QWORD *)&v241 + 1))
    {
      v8 = __p;
      *(void **)(v241 + 16) = v227[0];
      *v10 = v8;
      *(_QWORD *)&v241 = (char *)v10 + 24;
    }
    else
    {
      *(_QWORD *)&v241 = sub_2108B36E4((void **)&v240, (uint64_t)&__p);
      if (SHIBYTE(v227[0]) < 0)
        operator delete((void *)__p);
    }
    v7 += 5;
    v6 -= 5;
  }
  while (v6 * 16);
  v11 = (unint64_t)v240;
  v235 = (unint64_t)v240;
  v236 = v241;
  __p = 0u;
  *(_OWORD *)v227 = 0u;
  LODWORD(v227[2]) = 1065353216;
  v195 = (char *)v241;
  v193 = a3;
  if (v240 != (char *)v241)
  {
    v192 = v240;
    v12 = v240;
    while (1)
    {
      v15 = v12[23];
      if (v15 >= 0)
        v16 = (uint64_t *)v12;
      else
        v16 = *(uint64_t **)v12;
      if (v15 >= 0)
        v17 = v12[23];
      else
        v17 = *((_QWORD *)v12 + 1);
      v18 = sub_2108B6894((uint64_t)&v240, v16, v17);
      v19 = v18;
      v20 = *((_QWORD *)&__p + 1);
      if (*((_QWORD *)&__p + 1))
      {
        v21 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&__p + 8));
        v21.i16[0] = vaddlv_u8(v21);
        if (v21.u32[0] > 1uLL)
        {
          v11 = v18;
          if (v18 >= *((_QWORD *)&__p + 1))
            v11 = v18 % *((_QWORD *)&__p + 1);
        }
        else
        {
          v11 = (*((_QWORD *)&__p + 1) - 1) & v18;
        }
        v22 = *(uint64_t ***)(__p + 8 * v11);
        if (v22)
        {
          v23 = *v22;
          if (*v22)
          {
            v24 = v12[23];
            if (v24 >= 0)
              v25 = v12[23];
            else
              v25 = *((_QWORD *)v12 + 1);
            if (v24 >= 0)
              v26 = v12;
            else
              v26 = *(char **)v12;
            if (v21.u32[0] < 2uLL)
            {
              while (1)
              {
                v32 = v23[1];
                if (v32 == v19)
                {
                  v33 = *((unsigned __int8 *)v23 + 39);
                  if ((v33 & 0x80u) == 0)
                    v34 = *((unsigned __int8 *)v23 + 39);
                  else
                    v34 = v23[3];
                  if (v34 == v25)
                  {
                    v35 = (const void **)(v23 + 2);
                    if ((v33 & 0x80) != 0)
                    {
                      if (!memcmp(*v35, v26, v23[3]))
                        goto LABEL_16;
                    }
                    else
                    {
                      if (!*((_BYTE *)v23 + 39))
                        goto LABEL_16;
                      v36 = v26;
                      while (*(unsigned __int8 *)v35 == *v36)
                      {
                        v35 = (const void **)((char *)v35 + 1);
                        ++v36;
                        if (!--v33)
                          goto LABEL_16;
                      }
                    }
                  }
                }
                else if ((v32 & (v20 - 1)) != v11)
                {
                  goto LABEL_70;
                }
                v23 = (uint64_t *)*v23;
                if (!v23)
                  goto LABEL_70;
              }
            }
            do
            {
              v27 = v23[1];
              if (v27 == v19)
              {
                v28 = *((unsigned __int8 *)v23 + 39);
                if ((v28 & 0x80u) == 0)
                  v29 = *((unsigned __int8 *)v23 + 39);
                else
                  v29 = v23[3];
                if (v29 == v25)
                {
                  v30 = (const void **)(v23 + 2);
                  if ((v28 & 0x80) != 0)
                  {
                    if (!memcmp(*v30, v26, v23[3]))
                      goto LABEL_16;
                  }
                  else
                  {
                    if (!*((_BYTE *)v23 + 39))
                      goto LABEL_16;
                    v31 = v26;
                    while (*(unsigned __int8 *)v30 == *v31)
                    {
                      v30 = (const void **)((char *)v30 + 1);
                      ++v31;
                      if (!--v28)
                        goto LABEL_16;
                    }
                  }
                }
              }
              else
              {
                if (v27 >= v20)
                  v27 %= v20;
                if (v27 != v11)
                  break;
              }
              v23 = (uint64_t *)*v23;
            }
            while (v23);
          }
        }
      }
LABEL_70:
      v37 = operator new(0x28uLL);
      v240 = (char *)v37;
      *(_QWORD *)&v241 = v227;
      BYTE8(v241) = 0;
      *v37 = 0;
      v37[1] = v19;
      v38 = v37 + 2;
      if (v12[23] < 0)
      {
        sub_2108B314C(v38, *(void **)v12, *((_QWORD *)v12 + 1));
      }
      else
      {
        v39 = *(_OWORD *)v12;
        v38[2] = *((_QWORD *)v12 + 2);
        *(_OWORD *)v38 = v39;
      }
      BYTE8(v241) = 1;
      v40 = (float)((unint64_t)v227[1] + 1);
      if (!v20 || (float)(*(float *)&v227[2] * (float)v20) < v40)
        break;
      v13 = *(void ***)(__p + 8 * v11);
      v14 = (void **)v240;
      if (v13)
        goto LABEL_14;
LABEL_76:
      *v14 = v227[0];
      v227[0] = v240;
      *(_QWORD *)(__p + 8 * v11) = v227;
      if (*(_QWORD *)v240)
      {
        v41 = *(_QWORD *)(*(_QWORD *)v240 + 8);
        if ((v20 & (v20 - 1)) != 0)
        {
          if (v41 >= v20)
            v41 %= v20;
        }
        else
        {
          v41 &= v20 - 1;
        }
        *(_QWORD *)(__p + 8 * v41) = v240;
      }
LABEL_15:
      ++v227[1];
LABEL_16:
      v12 += 24;
      if (v12 == v195)
      {
        v65 = (void **)v227[0];
        v64 = v227[1];
        a3 = v193;
        if (v227[0])
        {
          do
          {
            v68 = (void **)*v65;
            if (*((char *)v65 + 39) < 0)
              operator delete(v65[2]);
            operator delete(v65);
            v65 = v68;
          }
          while (v68);
        }
        v66 = (void *)__p;
        *(_QWORD *)&__p = 0;
        if (v66)
          operator delete(v66);
        v11 = (unint64_t)v192;
        if (!v192)
        {
          v71 = v194;
          goto LABEL_168;
        }
        v67 = v195;
        do
        {
          if (*(v67 - 1) < 0)
            operator delete(*((void **)v67 - 3));
          v67 -= 24;
        }
        while (v67 != v192);
        v71 = v194;
        goto LABEL_166;
      }
    }
    v42 = (v20 & (v20 - 1)) != 0;
    if (v20 < 3)
      v42 = 1;
    v43 = v42 | (2 * v20);
    v44 = vcvtps_u32_f32(v40 / *(float *)&v227[2]);
    if (v43 <= v44)
      prime = v44;
    else
      prime = v43;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v20 = *((_QWORD *)&__p + 1);
    if (prime <= *((_QWORD *)&__p + 1))
    {
      if (prime >= *((_QWORD *)&__p + 1))
        goto LABEL_128;
      v56 = vcvtps_u32_f32((float)(unint64_t)v227[1] / *(float *)&v227[2]);
      if (*((_QWORD *)&__p + 1) < 3uLL
        || (v57 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&__p + 8)), v57.i16[0] = vaddlv_u8(v57), v57.u32[0] > 1uLL))
      {
        v56 = std::__next_prime(v56);
      }
      else
      {
        v58 = 1 << -(char)__clz(v56 - 1);
        if (v56 >= 2)
          v56 = v58;
      }
      if (prime <= v56)
        prime = v56;
      if (prime >= v20)
      {
        v20 = *((_QWORD *)&__p + 1);
        v61 = *((_QWORD *)&__p + 1) - 1;
        if ((*((_QWORD *)&__p + 1) & (*((_QWORD *)&__p + 1) - 1)) != 0)
          goto LABEL_138;
        goto LABEL_13;
      }
      if (!prime)
      {
        v60 = (void *)__p;
        *(_QWORD *)&__p = 0;
        if (v60)
          operator delete(v60);
        v20 = 0;
        *((_QWORD *)&__p + 1) = 0;
        v61 = -1;
        goto LABEL_13;
      }
    }
    if (prime >> 61)
      sub_2108B2B1C();
    v46 = operator new(8 * prime);
    v47 = (void *)__p;
    *(_QWORD *)&__p = v46;
    if (v47)
      operator delete(v47);
    v48 = 0;
    *((_QWORD *)&__p + 1) = prime;
    do
      *(_QWORD *)(__p + 8 * v48++) = 0;
    while (prime != v48);
    v49 = (_QWORD **)v227[0];
    if (!v227[0])
    {
LABEL_137:
      v20 = prime;
      v61 = prime - 1;
      if ((prime & (prime - 1)) != 0)
      {
LABEL_138:
        if (v19 >= v20)
        {
          v11 = v19 % v20;
          v13 = *(void ***)(__p + 8 * (v19 % v20));
          v14 = (void **)v240;
          if (!v13)
            goto LABEL_76;
        }
        else
        {
          v11 = v19;
          v13 = *(void ***)(__p + 8 * v19);
          v14 = (void **)v240;
          if (!v13)
            goto LABEL_76;
        }
LABEL_14:
        *v14 = *v13;
        *v13 = v240;
        goto LABEL_15;
      }
LABEL_13:
      v11 = v61 & v19;
      v13 = *(void ***)(__p + 8 * (v61 & v19));
      v14 = (void **)v240;
      if (v13)
        goto LABEL_14;
      goto LABEL_76;
    }
    v50 = *((_QWORD *)v227[0] + 1);
    v51 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v52 = v50 & v51;
      *(_QWORD *)(__p + 8 * v52) = v227;
      for (i = *v49; *v49; i = *v49)
      {
        v54 = i[1] & v51;
        if (v54 == v52)
        {
          v49 = (_QWORD **)i;
        }
        else if (*(_QWORD *)(__p + 8 * v54))
        {
          *v49 = (_QWORD *)*i;
          v55 = 8 * v54;
          *i = **(_QWORD **)(__p + v55);
          **(_QWORD **)(__p + v55) = i;
        }
        else
        {
          *(_QWORD *)(__p + 8 * v54) = v49;
          v49 = (_QWORD **)i;
          v52 = v54;
        }
      }
      goto LABEL_137;
    }
    if (v50 < prime)
    {
      *(_QWORD *)(__p + 8 * v50) = v227;
      v59 = *v49;
      if (*v49)
        goto LABEL_132;
      goto LABEL_127;
    }
    v50 %= prime;
    *(_QWORD *)(__p + 8 * v50) = v227;
    v59 = *v49;
    if (!*v49)
    {
LABEL_127:
      v20 = prime;
LABEL_128:
      v61 = v20 - 1;
      if ((v20 & (v20 - 1)) != 0)
        goto LABEL_138;
      goto LABEL_13;
    }
    while (1)
    {
LABEL_132:
      v63 = v59[1];
      if (v63 >= prime)
        v63 %= prime;
      if (v63 == v50)
        goto LABEL_131;
      if (*(_QWORD *)(__p + 8 * v63))
      {
        *v49 = (_QWORD *)*v59;
        v62 = 8 * v63;
        *v59 = **(_QWORD **)(__p + v62);
        **(_QWORD **)(__p + v62) = v59;
        v59 = v49;
LABEL_131:
        v49 = (_QWORD **)v59;
        v59 = (_QWORD *)*v59;
        if (!v59)
          goto LABEL_137;
      }
      else
      {
        *(_QWORD *)(__p + 8 * v63) = v49;
        v49 = (_QWORD **)v59;
        v59 = (_QWORD *)*v59;
        v50 = v63;
        if (!v59)
          goto LABEL_137;
      }
    }
  }
  v64 = 0;
  v71 = v194;
  if (v240)
LABEL_166:
    operator delete((void *)v11);
LABEL_168:
  if (v64 == (void *)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v195[-v11] >> 3)))
  {
    v240 = 0;
    v241 = 0uLL;
    if (v71 > 0x492492492492492)
      sub_2108B327C();
    v72 = (uint64_t)&v227[1];
    v240 = (char *)operator new(56 * v71);
    *(_QWORD *)&v241 = v240;
    *((_QWORD *)&v241 + 1) = &v240[56 * v71];
    v73 = a1;
    while (1)
    {
      sub_210965EE8((uint64_t)&__p, (uint64_t)v73 + 24);
      v74 = (char *)v241;
      if ((unint64_t)v241 < *((_QWORD *)&v241 + 1))
      {
        *(_QWORD *)v241 = 0;
        *((_QWORD *)v74 + 1) = 0;
        *((_QWORD *)v74 + 2) = 0;
        *(_OWORD *)v74 = __p;
        *((void **)v74 + 2) = v227[0];
        __p = 0uLL;
        v227[0] = 0;
        v74[24] = 0;
        v74[48] = 0;
        if (v229[0])
        {
          *((_QWORD *)v74 + 3) = 0;
          *((_QWORD *)v74 + 4) = 0;
          *((_QWORD *)v74 + 5) = 0;
          *(_OWORD *)(v74 + 24) = *(_OWORD *)&v227[1];
          *((_QWORD *)v74 + 5) = v228;
          v227[1] = 0;
          v227[2] = 0;
          v228 = 0;
          v74[48] = 1;
        }
        v75 = v74 + 56;
        goto LABEL_196;
      }
      v76 = v240;
      v77 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v241 - (_QWORD)v240) >> 3);
      v78 = v77 + 1;
      if ((unint64_t)(v77 + 1) > 0x492492492492492)
        sub_2108B327C();
      if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*((_QWORD *)&v241 + 1) - (_QWORD)v240) >> 3) > v78)
        v78 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*((_QWORD *)&v241 + 1) - (_QWORD)v240) >> 3);
      v79 = (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)&v241 + 1) - (_QWORD)v240) >> 3)) >= 0x249249249249249
          ? 0x492492492492492
          : v78;
      if (v79)
      {
        if (v79 > 0x492492492492492)
          sub_2108B2B1C();
        v80 = operator new(56 * v79);
      }
      else
      {
        v80 = 0;
      }
      v81 = (char *)&v80[7 * v77];
      *(_OWORD *)v81 = __p;
      *((void **)v81 + 2) = v227[0];
      v227[0] = 0;
      __p = 0uLL;
      v81[24] = 0;
      v81[48] = 0;
      if (v229[0])
      {
        *((_QWORD *)v81 + 5) = 0;
        *(_OWORD *)(v81 + 24) = *(_OWORD *)&v227[1];
        v80[7 * v77 + 5] = v228;
        v227[2] = 0;
        v228 = 0;
        v227[1] = 0;
        v81[48] = 1;
      }
      v75 = v81 + 56;
      if (v74 != v76)
        break;
      v240 = v81;
      *(_QWORD *)&v241 = v81 + 56;
      *((_QWORD *)&v241 + 1) = &v80[7 * v79];
      if (v74)
        goto LABEL_195;
LABEL_196:
      *(_QWORD *)&v241 = v75;
      if (v229[0])
      {
        v86 = (void **)v227[1];
        if (v227[1])
        {
          v87 = (void **)v227[2];
          v88 = v227[1];
          if (v227[2] != v227[1])
          {
            do
            {
              if (*((char *)v87 - 1) < 0)
                operator delete(*(v87 - 3));
              v87 -= 3;
            }
            while (v87 != v86);
            v88 = v227[1];
          }
          v227[2] = v86;
          operator delete(v88);
        }
      }
      if ((_QWORD)__p)
      {
        *((_QWORD *)&__p + 1) = __p;
        operator delete((void *)__p);
      }
      v73 += 5;
      if (v73 == v197)
      {
        v96 = v240;
        v235 = (unint64_t)v240;
        v196 = (char *)v241;
        v236 = v241;
        v241 = 0uLL;
        v240 = 0;
        *(_QWORD *)&__p = &v240;
        sub_210988820((void ***)&__p);
        __p = 0u;
        *(_OWORD *)v227 = 0u;
        LODWORD(v227[2]) = 1065353216;
        if (v96 == v196)
        {
          v131 = 0;
          v132 = v96;
          goto LABEL_349;
        }
        while (2)
        {
          while (1)
          {
            v240 = v96;
            *(_QWORD *)&v241 = v96 + 24;
            v237 = 0;
            sub_210965CC0((uint64_t *)&v237, (uint64_t)&v240);
            v97 = v237;
            v98 = *((_QWORD *)&__p + 1);
            if (!*((_QWORD *)&__p + 1))
              break;
            v99 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&__p + 8));
            v99.i16[0] = vaddlv_u8(v99);
            if (v99.u32[0] > 1uLL)
            {
              v72 = v237;
              if (v237 >= *((_QWORD *)&__p + 1))
                v72 = v237 % *((_QWORD *)&__p + 1);
            }
            else
            {
              v72 = (*((_QWORD *)&__p + 1) - 1) & v237;
            }
            v100 = *(_QWORD **)(__p + 8 * v72);
            if (!v100)
              break;
            v101 = (_QWORD *)*v100;
            if (!*v100)
              break;
            if (v99.u32[0] < 2uLL)
            {
              while (1)
              {
                v103 = v101[1];
                if (v103 == v97)
                {
                  v240 = (char *)(v101 + 2);
                  *(_QWORD *)&v241 = v101 + 5;
                  v237 = (unint64_t)v96;
                  v238 = v96 + 24;
                  if (sub_2109867F8((uint64_t)&v239, (uint64_t)&v240, (uint64_t)&v237))
                    goto LABEL_235;
                }
                else if ((v103 & (v98 - 1)) != v72)
                {
                  goto LABEL_257;
                }
                v101 = (_QWORD *)*v101;
                if (!v101)
                  goto LABEL_257;
              }
            }
            while (1)
            {
              v102 = v101[1];
              if (v102 == v97)
                break;
              if (v102 >= v98)
                v102 %= v98;
              if (v102 != v72)
                goto LABEL_257;
LABEL_246:
              v101 = (_QWORD *)*v101;
              if (!v101)
                goto LABEL_257;
            }
            v240 = (char *)(v101 + 2);
            *(_QWORD *)&v241 = v101 + 5;
            v237 = (unint64_t)v96;
            v238 = v96 + 24;
            if (!sub_2109867F8((uint64_t)&v239, (uint64_t)&v240, (uint64_t)&v237))
              goto LABEL_246;
LABEL_235:
            v96 += 56;
            if (v96 == v196)
              goto LABEL_329;
          }
LABEL_257:
          v104 = (char *)operator new(0x48uLL);
          v240 = v104;
          *(_QWORD *)&v241 = v227;
          BYTE8(v241) = 0;
          *(_QWORD *)v104 = 0;
          *((_QWORD *)v104 + 1) = v97;
          sub_210965EE8((uint64_t)(v104 + 16), (uint64_t)v96);
          BYTE8(v241) = 1;
          v105 = (float)((unint64_t)v227[1] + 1);
          if (v98 && (float)(*(float *)&v227[2] * (float)v98) >= v105)
          {
            v106 = *(void ***)(__p + 8 * v72);
            v107 = (void **)v240;
            if (v106)
              goto LABEL_260;
LABEL_309:
            *v107 = v227[0];
            v227[0] = v240;
            *(_QWORD *)(__p + 8 * v72) = v227;
            if (*(_QWORD *)v240)
            {
              v128 = *(_QWORD *)(*(_QWORD *)v240 + 8);
              if ((v98 & (v98 - 1)) != 0)
              {
                if (v128 >= v98)
                  v128 %= v98;
              }
              else
              {
                v128 &= v98 - 1;
              }
              *(_QWORD *)(__p + 8 * v128) = v240;
            }
LABEL_328:
            ++v227[1];
            v96 += 56;
            if (v96 == v196)
            {
LABEL_329:
              v131 = v227[1];
              v96 = (char *)v235;
              v132 = (char *)v236;
LABEL_349:
              v134 = 0x6DB6DB6DB6DB6DB7 * ((v132 - v96) >> 3);
              sub_21098912C((uint64_t)&__p);
              *(_QWORD *)&__p = &v235;
              sub_210988820((void ***)&__p);
              if (v131 != (void *)v134)
              {
                sub_210986CE8((uint64_t)v199, "Config values can not be repeated.");
                v207 = 1;
                sub_2109863B8(0x16u, (__int128 *)v199, (uint64_t)&__p);
                *(_OWORD *)v193 = __p;
                *(_BYTE *)(v193 + 16) = 0;
                *(_BYTE *)(v193 + 112) = 0;
                if (v234)
                {
                  *(_BYTE *)(v193 + 40) = 0;
                  v159 = v228;
                  if ((_BYTE)v228)
                  {
                    *(_OWORD *)(v193 + 16) = *(_OWORD *)v227;
                    *(void **)(v193 + 32) = v227[2];
                    memset(v227, 0, sizeof(v227));
                    *(_BYTE *)(v193 + 40) = 1;
                  }
                  *(_BYTE *)(v193 + 48) = 0;
                  *(_BYTE *)(v193 + 104) = 0;
                  if (v233)
                  {
                    v160 = v230;
                    *(_QWORD *)(v193 + 64) = *(_QWORD *)&v229[16];
                    *(_OWORD *)(v193 + 48) = *(_OWORD *)v229;
                    *(_QWORD *)v229 = 0;
                    *(_QWORD *)&v229[8] = 0;
                    *(_QWORD *)(v193 + 72) = v160;
                    *(_OWORD *)(v193 + 80) = v231;
                    *(_QWORD *)(v193 + 96) = v232;
                    *(_QWORD *)&v229[16] = 0;
                    v231 = 0uLL;
                    v232 = 0;
                    *(_BYTE *)(v193 + 104) = 1;
                  }
                  *(_BYTE *)(v193 + 112) = 1;
                  *(_BYTE *)(v193 + 120) = 0;
                  if (v159 && SHIBYTE(v227[2]) < 0)
                    operator delete(v227[0]);
                }
                else
                {
                  *(_BYTE *)(v193 + 120) = 0;
                }
                if (v207)
                {
                  if (v206)
                  {
                    if (v205 < 0)
                      operator delete(v204);
                    if (v203 < 0)
                      operator delete(v202);
                  }
                  if (v201 && v200 < 0)
                  {
                    v133 = (char *)v199[0];
LABEL_517:
                    operator delete(v133);
                  }
                }
                return;
              }
              v240 = 0;
              v241 = 0uLL;
              if (v194 > 0x333333333333333)
                sub_2108B327C();
              v240 = (char *)operator new(80 * v194);
              *(_QWORD *)&v241 = v240;
              *((_QWORD *)&v241 + 1) = &v240[80 * v194];
              v135 = (uint64_t)&v229[8];
              while (1)
              {
                sub_210965EE8((uint64_t)&__p, (uint64_t)a1 + 24);
                if (*((char *)a1 + 23) < 0)
                {
                  sub_2108B314C(&v229[8], *(void **)a1, *((_QWORD *)a1 + 1));
                }
                else
                {
                  v136 = *a1;
                  v230 = *((_QWORD *)a1 + 2);
                  *(_OWORD *)&v229[8] = v136;
                }
                v137 = (char *)v241;
                if ((unint64_t)v241 < *((_QWORD *)&v241 + 1))
                {
                  *(_QWORD *)v241 = 0;
                  *((_QWORD *)v137 + 1) = 0;
                  *((_QWORD *)v137 + 2) = 0;
                  *(_OWORD *)v137 = __p;
                  *((void **)v137 + 2) = v227[0];
                  __p = 0uLL;
                  v227[0] = 0;
                  v137[24] = 0;
                  v137[48] = 0;
                  if (v229[0])
                  {
                    *((_QWORD *)v137 + 3) = 0;
                    *((_QWORD *)v137 + 4) = 0;
                    *((_QWORD *)v137 + 5) = 0;
                    *(_OWORD *)(v137 + 24) = *(_OWORD *)&v227[1];
                    *((_QWORD *)v137 + 5) = v228;
                    v227[1] = 0;
                    v227[2] = 0;
                    v228 = 0;
                    v137[48] = 1;
                  }
                  v138 = *(_OWORD *)&v229[8];
                  *((_QWORD *)v137 + 9) = v230;
                  *(_OWORD *)(v137 + 56) = v138;
                  *(_QWORD *)&v229[16] = 0;
                  v230 = 0;
                  *(_QWORD *)&v229[8] = 0;
                  *(_QWORD *)&v241 = v137 + 80;
                  if (!v229[0])
                    goto LABEL_407;
LABEL_399:
                  v156 = (void **)v227[1];
                  if (v227[1])
                  {
                    v157 = (void **)v227[2];
                    v158 = v227[1];
                    if (v227[2] != v227[1])
                    {
                      do
                      {
                        if (*((char *)v157 - 1) < 0)
                          operator delete(*(v157 - 3));
                        v157 -= 3;
                      }
                      while (v157 != v156);
                      v158 = v227[1];
                    }
                    v227[2] = v156;
                    operator delete(v158);
                  }
                  goto LABEL_407;
                }
                v139 = v240;
                v140 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v241 - (_QWORD)v240) >> 4) + 1;
                if (v140 > 0x333333333333333)
                  sub_2108B327C();
                if (0x999999999999999ALL * ((uint64_t)(*((_QWORD *)&v241 + 1) - (_QWORD)v240) >> 4) > v140)
                  v140 = 0x999999999999999ALL * ((uint64_t)(*((_QWORD *)&v241 + 1) - (_QWORD)v240) >> 4);
                v141 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)&v241 + 1) - (_QWORD)v240) >> 4) >= 0x199999999999999
                     ? 0x333333333333333
                     : v140;
                if (v141)
                {
                  if (v141 > 0x333333333333333)
                    sub_2108B2B1C();
                  v142 = (char *)operator new(80 * v141);
                }
                else
                {
                  v142 = 0;
                }
                v143 = &v142[16 * ((v137 - v139) >> 4)];
                *(_OWORD *)v143 = __p;
                *((void **)v143 + 2) = v227[0];
                v227[0] = 0;
                __p = 0uLL;
                v143[24] = 0;
                v143[48] = 0;
                if (v229[0])
                {
                  *(_OWORD *)(v143 + 24) = *(_OWORD *)&v227[1];
                  *((_QWORD *)v143 + 5) = v228;
                  v227[2] = 0;
                  v228 = 0;
                  v227[1] = 0;
                  v143[48] = 1;
                }
                v144 = &v142[16 * ((v137 - v139) >> 4)];
                *(_OWORD *)(v144 + 56) = *(_OWORD *)&v229[8];
                *((_QWORD *)v144 + 9) = v230;
                *(_QWORD *)&v229[16] = 0;
                v230 = 0;
                *(_QWORD *)&v229[8] = 0;
                v145 = v143 + 80;
                if (v137 != v139)
                  break;
                v240 = &v142[16 * ((v137 - v139) >> 4)];
                *(_QWORD *)&v241 = v143 + 80;
                *((_QWORD *)&v241 + 1) = &v142[80 * v141];
                if (v137)
                  goto LABEL_396;
LABEL_397:
                *(_QWORD *)&v241 = v145;
                if (SHIBYTE(v230) < 0)
                {
                  operator delete(*(void **)&v229[8]);
                  if (v229[0])
                    goto LABEL_399;
                }
                else if (v229[0])
                {
                  goto LABEL_399;
                }
LABEL_407:
                if ((_QWORD)__p)
                {
                  *((_QWORD *)&__p + 1) = __p;
                  operator delete((void *)__p);
                }
                a1 += 5;
                if (a1 == v197)
                {
                  v161 = (char *)v241;
                  __p = 0u;
                  *(_OWORD *)v227 = 0u;
                  LODWORD(v227[2]) = 1065353216;
                  v198 = v240;
                  if (v240 == (char *)v241)
                    goto LABEL_487;
                  v162 = v240;
LABEL_424:
                  while (2)
                  {
                    v240 = v162;
                    *(_QWORD *)&v241 = v162 + 24;
                    v235 = 0;
                    sub_210965CC0((uint64_t *)&v235, (uint64_t)&v240);
                    v163 = v235;
                    v164 = *((_QWORD *)&__p + 1);
                    if (*((_QWORD *)&__p + 1))
                    {
                      v165 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&__p + 8));
                      v165.i16[0] = vaddlv_u8(v165);
                      if (v165.u32[0] > 1uLL)
                      {
                        v135 = v235;
                        if (v235 >= *((_QWORD *)&__p + 1))
                          v135 = v235 % *((_QWORD *)&__p + 1);
                      }
                      else
                      {
                        v135 = (*((_QWORD *)&__p + 1) - 1) & v235;
                      }
                      v166 = *(_QWORD **)(__p + 8 * v135);
                      if (v166)
                      {
                        v167 = (_QWORD *)*v166;
                        if (*v166)
                        {
                          if (v165.u32[0] < 2uLL)
                          {
                            while (1)
                            {
                              v169 = v167[1];
                              if (v169 == v163)
                              {
                                v240 = (char *)(v167 + 2);
                                *(_QWORD *)&v241 = v167 + 5;
                                v235 = (unint64_t)v162;
                                *(_QWORD *)&v236 = v162 + 24;
                                if (sub_2109867F8((uint64_t)&v237, (uint64_t)&v240, (uint64_t)&v235))
                                  goto LABEL_423;
                              }
                              else if ((v169 & (v164 - 1)) != v135)
                              {
                                goto LABEL_445;
                              }
                              v167 = (_QWORD *)*v167;
                              if (!v167)
                                goto LABEL_445;
                            }
                          }
                          do
                          {
                            v168 = v167[1];
                            if (v168 == v163)
                            {
                              v240 = (char *)(v167 + 2);
                              *(_QWORD *)&v241 = v167 + 5;
                              v235 = (unint64_t)v162;
                              *(_QWORD *)&v236 = v162 + 24;
                              if (sub_2109867F8((uint64_t)&v237, (uint64_t)&v240, (uint64_t)&v235))
                              {
LABEL_423:
                                v162 += 80;
                                if (v162 != v161)
                                  goto LABEL_424;
LABEL_487:
                                *(_BYTE *)(sub_2109657A8(v193, (uint64_t)&__p) + 120) = 1;
                                sub_21095A1BC((int)&__p, (void **)v227[0]);
                                v186 = (void *)__p;
                                *(_QWORD *)&__p = 0;
                                if (v186)
                                  operator delete(v186);
                                if (v198)
                                {
                                  if (v198 == v161)
                                  {
LABEL_491:
                                    v133 = v198;
                                    goto LABEL_517;
                                  }
                                  while (2)
                                  {
                                    if (*(v161 - 1) < 0)
                                    {
                                      operator delete(*((void **)v161 - 3));
                                      if (!*(v161 - 32))
                                        goto LABEL_505;
                                    }
                                    else if (!*(v161 - 32))
                                    {
                                      goto LABEL_505;
                                    }
                                    v187 = *((_QWORD *)v161 - 7);
                                    if (v187)
                                    {
                                      v188 = *((_QWORD *)v161 - 6);
                                      v189 = (void *)*((_QWORD *)v161 - 7);
                                      if (v188 != v187)
                                      {
                                        do
                                        {
                                          if (*(char *)(v188 - 1) < 0)
                                            operator delete(*(void **)(v188 - 24));
                                          v188 -= 24;
                                        }
                                        while (v188 != v187);
                                        v189 = (void *)*((_QWORD *)v161 - 7);
                                      }
                                      *((_QWORD *)v161 - 6) = v187;
                                      operator delete(v189);
                                    }
LABEL_505:
                                    v190 = v161 - 80;
                                    v191 = (void *)*((_QWORD *)v161 - 10);
                                    if (v191)
                                    {
                                      *((_QWORD *)v161 - 9) = v191;
                                      operator delete(v191);
                                    }
                                    v161 -= 80;
                                    if (v190 == v198)
                                      goto LABEL_491;
                                    continue;
                                  }
                                }
                                return;
                              }
                            }
                            else
                            {
                              if (v168 >= v164)
                                v168 %= v164;
                              if (v168 != v135)
                                break;
                            }
                            v167 = (_QWORD *)*v167;
                          }
                          while (v167);
                        }
                      }
                    }
LABEL_445:
                    v170 = (char *)operator new(0x60uLL);
                    v240 = v170;
                    *(_QWORD *)&v241 = v227;
                    BYTE8(v241) = 0;
                    *(_QWORD *)v170 = 0;
                    *((_QWORD *)v170 + 1) = v163;
                    sub_210965EE8((uint64_t)(v170 + 16), (uint64_t)v162);
                    v171 = v170 + 72;
                    if (v162[79] < 0)
                    {
                      sub_2108B314C(v171, *((void **)v162 + 7), *((_QWORD *)v162 + 8));
                    }
                    else
                    {
                      v172 = *(_OWORD *)(v162 + 56);
                      *((_QWORD *)v170 + 11) = *((_QWORD *)v162 + 9);
                      *(_OWORD *)v171 = v172;
                    }
                    BYTE8(v241) = 1;
                    v173 = (float)((unint64_t)v227[1] + 1);
                    if (v164 && (float)(*(float *)&v227[2] * (float)v164) >= v173)
                    {
                      v174 = *(char ***)(__p + 8 * v135);
                      v175 = v240;
                      if (v174)
                      {
LABEL_451:
                        *(_QWORD *)v175 = *v174;
                        *v174 = v240;
                        goto LABEL_486;
                      }
                    }
                    else
                    {
                      v176 = (v164 & (v164 - 1)) != 0;
                      if (v164 < 3)
                        v176 = 1;
                      v177 = v176 | (2 * v164);
                      v178 = vcvtps_u32_f32(v173 / *(float *)&v227[2]);
                      if (v177 <= v178)
                        v179 = v178;
                      else
                        v179 = v177;
                      if (v179 == 1)
                      {
                        v179 = 2;
                      }
                      else if ((v179 & (v179 - 1)) != 0)
                      {
                        v179 = std::__next_prime(v179);
                      }
                      v180 = *((_QWORD *)&__p + 1);
                      if (v179 > *((_QWORD *)&__p + 1))
                        goto LABEL_462;
                      if (v179 < *((_QWORD *)&__p + 1))
                      {
                        v181 = vcvtps_u32_f32((float)(unint64_t)v227[1] / *(float *)&v227[2]);
                        if (*((_QWORD *)&__p + 1) < 3uLL
                          || (v182 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&__p + 8)),
                              v182.i16[0] = vaddlv_u8(v182),
                              v182.u32[0] > 1uLL))
                        {
                          v181 = std::__next_prime(v181);
                        }
                        else
                        {
                          v183 = 1 << -(char)__clz(v181 - 1);
                          if (v181 >= 2)
                            v181 = v183;
                        }
                        if (v179 <= v181)
                          v179 = v181;
                        if (v179 < v180)
LABEL_462:
                          sub_2108B5C58((uint64_t)&__p, v179);
                      }
                      v164 = *((_QWORD *)&__p + 1);
                      v184 = *((_QWORD *)&__p + 1) - 1;
                      if ((*((_QWORD *)&__p + 1) & (*((_QWORD *)&__p + 1) - 1)) != 0)
                      {
                        if (v163 >= *((_QWORD *)&__p + 1))
                        {
                          v135 = v163 % *((_QWORD *)&__p + 1);
                          v174 = *(char ***)(__p + 8 * (v163 % *((_QWORD *)&__p + 1)));
                          v175 = v240;
                          if (v174)
                            goto LABEL_451;
                        }
                        else
                        {
                          v135 = v163;
                          v174 = *(char ***)(__p + 8 * v163);
                          v175 = v240;
                          if (v174)
                            goto LABEL_451;
                        }
                      }
                      else
                      {
                        v135 = v184 & v163;
                        v174 = *(char ***)(__p + 8 * (v184 & v163));
                        v175 = v240;
                        if (v174)
                          goto LABEL_451;
                      }
                    }
                    *(void **)v175 = v227[0];
                    v227[0] = v240;
                    *(_QWORD *)(__p + 8 * v135) = v227;
                    if (*(_QWORD *)v240)
                    {
                      v185 = *(_QWORD *)(*(_QWORD *)v240 + 8);
                      if ((v164 & (v164 - 1)) != 0)
                      {
                        if (v185 >= v164)
                          v185 %= v164;
                      }
                      else
                      {
                        v185 &= v164 - 1;
                      }
                      *(_QWORD *)(__p + 8 * v185) = v240;
                    }
LABEL_486:
                    ++v227[1];
                    v162 += 80;
                    if (v162 != v161)
                      continue;
                    goto LABEL_487;
                  }
                }
              }
              v146 = 0;
              do
              {
                v148 = &v143[v146];
                v149 = &v137[v146];
                *((_QWORD *)v148 - 9) = 0;
                *((_QWORD *)v148 - 8) = 0;
                *((_OWORD *)v148 - 5) = *(_OWORD *)&v137[v146 - 80];
                *((_QWORD *)v148 - 8) = *(_QWORD *)&v137[v146 - 64];
                *((_QWORD *)v149 - 10) = 0;
                *((_QWORD *)v149 - 9) = 0;
                *((_QWORD *)v149 - 8) = 0;
                *(v148 - 56) = 0;
                *(v148 - 32) = 0;
                if (v137[v146 - 32])
                {
                  *((_QWORD *)v148 - 6) = 0;
                  *((_QWORD *)v148 - 5) = 0;
                  *(_OWORD *)(v148 - 56) = *(_OWORD *)(v149 - 56);
                  *((_QWORD *)v148 - 5) = *((_QWORD *)v149 - 5);
                  *((_QWORD *)v149 - 7) = 0;
                  *((_QWORD *)v149 - 6) = 0;
                  *((_QWORD *)v149 - 5) = 0;
                  *(v148 - 32) = 1;
                }
                v147 = *(_OWORD *)(v149 - 24);
                *((_QWORD *)v148 - 1) = *((_QWORD *)v149 - 1);
                *(_OWORD *)(v148 - 24) = v147;
                *((_QWORD *)v149 - 2) = 0;
                *((_QWORD *)v149 - 1) = 0;
                *((_QWORD *)v149 - 3) = 0;
                v146 -= 80;
              }
              while (&v137[v146] != v139);
              v137 = v240;
              v150 = (void **)v241;
              v240 = &v143[v146];
              *(_QWORD *)&v241 = v143 + 80;
              *((_QWORD *)&v241 + 1) = &v142[80 * v141];
              if (v150 == (void **)v137)
              {
LABEL_395:
                if (!v137)
                  goto LABEL_397;
LABEL_396:
                operator delete(v137);
                goto LABEL_397;
              }
              while (1)
              {
                if (*((char *)v150 - 1) < 0)
                {
                  operator delete(*(v150 - 3));
                  if (*((_BYTE *)v150 - 32))
                  {
LABEL_385:
                    v151 = (void **)*(v150 - 7);
                    if (v151)
                    {
                      v152 = (void **)*(v150 - 6);
                      v153 = *(v150 - 7);
                      if (v152 != v151)
                      {
                        do
                        {
                          if (*((char *)v152 - 1) < 0)
                            operator delete(*(v152 - 3));
                          v152 -= 3;
                        }
                        while (v152 != v151);
                        v153 = *(v150 - 7);
                      }
                      *(v150 - 6) = v151;
                      operator delete(v153);
                    }
                  }
                }
                else if (*((_BYTE *)v150 - 32))
                {
                  goto LABEL_385;
                }
                v154 = (char *)(v150 - 10);
                v155 = *(v150 - 10);
                if (v155)
                {
                  *(v150 - 9) = v155;
                  operator delete(v155);
                }
                v150 -= 10;
                if (v154 == v137)
                  goto LABEL_395;
              }
            }
            continue;
          }
          break;
        }
        v108 = (v98 & (v98 - 1)) != 0;
        if (v98 < 3)
          v108 = 1;
        v109 = v108 | (2 * v98);
        v110 = vcvtps_u32_f32(v105 / *(float *)&v227[2]);
        if (v109 <= v110)
          v111 = v110;
        else
          v111 = v109;
        if (v111 == 1)
        {
          v111 = 2;
        }
        else if ((v111 & (v111 - 1)) != 0)
        {
          v111 = std::__next_prime(v111);
        }
        v98 = *((_QWORD *)&__p + 1);
        if (v111 <= *((_QWORD *)&__p + 1))
        {
          if (v111 >= *((_QWORD *)&__p + 1))
            goto LABEL_307;
          v122 = vcvtps_u32_f32((float)(unint64_t)v227[1] / *(float *)&v227[2]);
          if (*((_QWORD *)&__p + 1) < 3uLL
            || (v123 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&__p + 8)),
                v123.i16[0] = vaddlv_u8(v123),
                v123.u32[0] > 1uLL))
          {
            v122 = std::__next_prime(v122);
          }
          else
          {
            v124 = 1 << -(char)__clz(v122 - 1);
            if (v122 >= 2)
              v122 = v124;
          }
          if (v111 <= v122)
            v111 = v122;
          if (v111 < v98)
          {
            if (v111)
              goto LABEL_271;
            v126 = (void *)__p;
            *(_QWORD *)&__p = 0;
            if (v126)
              operator delete(v126);
            v98 = 0;
            *((_QWORD *)&__p + 1) = 0;
            v127 = -1;
            goto LABEL_308;
          }
          v98 = *((_QWORD *)&__p + 1);
          v127 = *((_QWORD *)&__p + 1) - 1;
          if ((*((_QWORD *)&__p + 1) & (*((_QWORD *)&__p + 1) - 1)) == 0)
            goto LABEL_308;
          goto LABEL_320;
        }
LABEL_271:
        if (v111 >> 61)
          sub_2108B2B1C();
        v112 = operator new(8 * v111);
        v113 = (void *)__p;
        *(_QWORD *)&__p = v112;
        if (v113)
          operator delete(v113);
        v114 = 0;
        *((_QWORD *)&__p + 1) = v111;
        do
          *(_QWORD *)(__p + 8 * v114++) = 0;
        while (v111 != v114);
        v115 = (_QWORD **)v227[0];
        if (!v227[0])
        {
LABEL_319:
          v98 = v111;
          v127 = v111 - 1;
          if ((v111 & (v111 - 1)) == 0)
            goto LABEL_308;
          goto LABEL_320;
        }
        v116 = *((_QWORD *)v227[0] + 1);
        v117 = v111 - 1;
        if ((v111 & (v111 - 1)) == 0)
        {
          v118 = v116 & v117;
          *(_QWORD *)(__p + 8 * v118) = v227;
          for (j = *v115; *v115; j = *v115)
          {
            v120 = j[1] & v117;
            if (v120 == v118)
            {
              v115 = (_QWORD **)j;
            }
            else if (*(_QWORD *)(__p + 8 * v120))
            {
              *v115 = (_QWORD *)*j;
              v121 = 8 * v120;
              *j = **(_QWORD **)(__p + v121);
              **(_QWORD **)(__p + v121) = j;
            }
            else
            {
              *(_QWORD *)(__p + 8 * v120) = v115;
              v115 = (_QWORD **)j;
              v118 = v120;
            }
          }
          goto LABEL_319;
        }
        if (v116 < v111)
        {
          *(_QWORD *)(__p + 8 * v116) = v227;
          v125 = *v115;
          if (*v115)
            goto LABEL_314;
LABEL_306:
          v98 = v111;
LABEL_307:
          v127 = v98 - 1;
          if ((v98 & (v98 - 1)) == 0)
          {
LABEL_308:
            v72 = v127 & v97;
            v106 = *(void ***)(__p + 8 * (v127 & v97));
            v107 = (void **)v240;
            if (!v106)
              goto LABEL_309;
            goto LABEL_260;
          }
LABEL_320:
          if (v97 >= v98)
          {
            v72 = v97 % v98;
            v106 = *(void ***)(__p + 8 * (v97 % v98));
            v107 = (void **)v240;
            if (!v106)
              goto LABEL_309;
          }
          else
          {
            v72 = v97;
            v106 = *(void ***)(__p + 8 * v97);
            v107 = (void **)v240;
            if (!v106)
              goto LABEL_309;
          }
LABEL_260:
          *v107 = *v106;
          *v106 = v240;
          goto LABEL_328;
        }
        v116 %= v111;
        *(_QWORD *)(__p + 8 * v116) = v227;
        v125 = *v115;
        if (!*v115)
          goto LABEL_306;
        while (1)
        {
LABEL_314:
          v130 = v125[1];
          if (v130 >= v111)
            v130 %= v111;
          if (v130 == v116)
            goto LABEL_313;
          if (*(_QWORD *)(__p + 8 * v130))
            break;
          *(_QWORD *)(__p + 8 * v130) = v115;
          v115 = (_QWORD **)v125;
          v125 = (_QWORD *)*v125;
          v116 = v130;
          if (!v125)
            goto LABEL_319;
        }
        *v115 = (_QWORD *)*v125;
        v129 = 8 * v130;
        *v125 = **(_QWORD **)(__p + v129);
        **(_QWORD **)(__p + v129) = v125;
        v125 = v115;
LABEL_313:
        v115 = (_QWORD **)v125;
        v125 = (_QWORD *)*v125;
        if (!v125)
          goto LABEL_319;
        goto LABEL_314;
      }
    }
    v82 = 0;
    do
    {
      v83 = &v81[v82];
      v84 = &v74[v82];
      *((_QWORD *)v83 - 6) = 0;
      *((_QWORD *)v83 - 5) = 0;
      *(_OWORD *)(v83 - 56) = *(_OWORD *)&v74[v82 - 56];
      *((_QWORD *)v83 - 5) = *(_QWORD *)&v74[v82 - 40];
      *((_QWORD *)v84 - 7) = 0;
      *((_QWORD *)v84 - 6) = 0;
      *((_QWORD *)v84 - 5) = 0;
      *(v83 - 32) = 0;
      *(v83 - 8) = 0;
      if (v74[v82 - 8])
      {
        *((_QWORD *)v83 - 3) = 0;
        *((_QWORD *)v83 - 2) = 0;
        *((_OWORD *)v83 - 2) = *((_OWORD *)v84 - 2);
        *((_QWORD *)v83 - 2) = *((_QWORD *)v84 - 2);
        *((_QWORD *)v84 - 4) = 0;
        *((_QWORD *)v84 - 3) = 0;
        *((_QWORD *)v84 - 2) = 0;
        *(v83 - 8) = 1;
      }
      v82 -= 56;
    }
    while (&v74[v82] != v76);
    v74 = v240;
    v85 = (char *)v241;
    v240 = &v81[v82];
    *(_QWORD *)&v241 = v81 + 56;
    *((_QWORD *)&v241 + 1) = &v80[7 * v79];
    if (v85 == v74)
    {
      if (!v74)
        goto LABEL_196;
    }
    else
    {
      do
      {
        if (*(v85 - 8))
        {
          v89 = *((_QWORD *)v85 - 4);
          if (v89)
          {
            v90 = *((_QWORD *)v85 - 3);
            v91 = (void *)*((_QWORD *)v85 - 4);
            if (v90 != v89)
            {
              do
              {
                if (*(char *)(v90 - 1) < 0)
                  operator delete(*(void **)(v90 - 24));
                v90 -= 24;
              }
              while (v90 != v89);
              v91 = (void *)*((_QWORD *)v85 - 4);
            }
            *((_QWORD *)v85 - 3) = v89;
            operator delete(v91);
          }
        }
        v92 = v85 - 56;
        v93 = (void *)*((_QWORD *)v85 - 7);
        if (v93)
        {
          *((_QWORD *)v85 - 6) = v93;
          operator delete(v93);
        }
        v85 -= 56;
      }
      while (v92 != v74);
      if (!v74)
        goto LABEL_196;
    }
LABEL_195:
    operator delete(v74);
    goto LABEL_196;
  }
  sub_210986CE8((uint64_t)&v208, "Config names can not be repeated.");
  v216 = 1;
  sub_2109863B8(0x16u, &v208, (uint64_t)&__p);
  *(_OWORD *)a3 = __p;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  if (v234)
  {
    *(_BYTE *)(a3 + 40) = 0;
    v94 = v228;
    if ((_BYTE)v228)
    {
      *(_OWORD *)(a3 + 16) = *(_OWORD *)v227;
      *(void **)(a3 + 32) = v227[2];
      memset(v227, 0, sizeof(v227));
      *(_BYTE *)(a3 + 40) = 1;
    }
    *(_BYTE *)(a3 + 48) = 0;
    *(_BYTE *)(a3 + 104) = 0;
    if (v233)
    {
      v95 = v230;
      *(_QWORD *)(a3 + 64) = *(_QWORD *)&v229[16];
      *(_OWORD *)(a3 + 48) = *(_OWORD *)v229;
      *(_QWORD *)v229 = 0;
      *(_QWORD *)&v229[8] = 0;
      *(_QWORD *)(a3 + 72) = v95;
      *(_OWORD *)(a3 + 80) = v231;
      *(_QWORD *)(a3 + 96) = v232;
      *(_QWORD *)&v229[16] = 0;
      v231 = 0uLL;
      v232 = 0;
      *(_BYTE *)(a3 + 104) = 1;
    }
    *(_BYTE *)(a3 + 112) = 1;
    *(_BYTE *)(a3 + 120) = 0;
    if (v94 && SHIBYTE(v227[2]) < 0)
      operator delete(v227[0]);
    if (!v216)
      return;
  }
  else
  {
    *(_BYTE *)(a3 + 120) = 0;
    if (!v216)
      return;
  }
  if (v215)
  {
    if (v214 < 0)
      operator delete(v213);
    if (v212 < 0)
      operator delete(v211);
  }
  if (v210 && v209 < 0)
  {
    v133 = (char *)v208;
    goto LABEL_517;
  }
}

void sub_210986040(void *a1)
{
  uint64_t v1;

  sub_2109865BC((void **)(v1 - 120));
  sub_2108ABF6C(a1);
}

void sub_21098626C(void *a1)
{
  uint64_t v1;

  sub_2108A89B4((void **)(v1 - 120));
  sub_2108ABF6C(a1);
}

void sub_210986318(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  uint64_t v60;

  if (a60 < 0)
    operator delete(__p);
  sub_2108A89B4((void **)(v60 - 120));
  sub_2108ABF6C(a1);
}

void sub_2109863B8(unsigned int a1@<W0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  uint64_t v6;
  void *v7[2];
  char v8;
  char v9;
  void *v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  char v15;
  __int128 v16;
  __int128 __p;
  uint64_t v18;
  unsigned __int8 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  char v25;
  char v26;

  sub_210986B00(v7, a2);
  sub_2109869A4((uint64_t)&v16, a1, (__int128 *)v7);
  *(_OWORD *)a3 = v16;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  if (v26)
  {
    *(_BYTE *)(a3 + 40) = 0;
    v5 = v19;
    if (v19)
    {
      *(_OWORD *)(a3 + 16) = __p;
      *(_QWORD *)(a3 + 32) = v18;
      v18 = 0;
      __p = 0uLL;
      *(_BYTE *)(a3 + 40) = 1;
    }
    *(_BYTE *)(a3 + 48) = 0;
    *(_BYTE *)(a3 + 104) = 0;
    if (v25)
    {
      v6 = v22;
      *(_QWORD *)(a3 + 64) = v21;
      *(_OWORD *)(a3 + 48) = v20;
      v20 = 0uLL;
      *(_QWORD *)(a3 + 72) = v6;
      *(_OWORD *)(a3 + 80) = v23;
      *(_QWORD *)(a3 + 96) = v24;
      v21 = 0;
      v23 = 0uLL;
      v24 = 0;
      *(_BYTE *)(a3 + 104) = 1;
    }
    *(_BYTE *)(a3 + 112) = 1;
    if (v5 && SHIBYTE(v18) < 0)
      operator delete((void *)__p);
  }
  if (v15)
  {
    if (!v14)
      goto LABEL_13;
    if (v13 < 0)
    {
      operator delete(v12);
      if ((v11 & 0x80000000) == 0)
      {
LABEL_13:
        if (!v9)
          return;
        goto LABEL_14;
      }
    }
    else if ((v11 & 0x80000000) == 0)
    {
      goto LABEL_13;
    }
    operator delete(v10);
    if (!v9)
      return;
LABEL_14:
    if (v8 < 0)
      operator delete(v7[0]);
  }
}

void sub_21098651C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_210986530((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_210986530(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 96))
    return a1;
  if (*(_BYTE *)(a1 + 88))
  {
    if ((*(char *)(a1 + 87) & 0x80000000) == 0)
    {
      if ((*(char *)(a1 + 55) & 0x80000000) == 0)
        goto LABEL_5;
LABEL_9:
      operator delete(*(void **)(a1 + 32));
      if (!*(_BYTE *)(a1 + 24))
        return a1;
      goto LABEL_6;
    }
    operator delete(*(void **)(a1 + 64));
    if (*(char *)(a1 + 55) < 0)
      goto LABEL_9;
  }
LABEL_5:
  if (!*(_BYTE *)(a1 + 24))
    return a1;
LABEL_6:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)a1);
  return a1;
}

void **sub_2109865BC(void **a1)
{
  void **v2;
  void **v3;
  void *v4;
  void **v5;
  void **v6;
  void *v7;
  void **v8;
  void *v9;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 == v2)
    {
LABEL_20:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      if (*((char *)v3 - 1) < 0)
      {
        operator delete(*(v3 - 3));
        if (*((_BYTE *)v3 - 32))
        {
LABEL_9:
          v5 = (void **)*(v3 - 7);
          if (v5)
          {
            v6 = (void **)*(v3 - 6);
            v7 = *(v3 - 7);
            if (v6 != v5)
            {
              do
              {
                if (*((char *)v6 - 1) < 0)
                  operator delete(*(v6 - 3));
                v6 -= 3;
              }
              while (v6 != v5);
              v7 = *(v3 - 7);
            }
            *(v3 - 6) = v5;
            operator delete(v7);
          }
        }
      }
      else if (*((_BYTE *)v3 - 32))
      {
        goto LABEL_9;
      }
      v8 = v3 - 10;
      v9 = *(v3 - 10);
      if (v9)
      {
        *(v3 - 9) = v9;
        operator delete(v9);
      }
      v3 -= 10;
      if (v8 == v2)
      {
        v4 = *a1;
        goto LABEL_20;
      }
    }
  }
  return a1;
}

double sub_2109866A4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t *i;
  void *v6;
  __n128 v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v11;
  _OWORD *v12;
  void *v13;
  __n128 v14;
  void *__p[2];
  uint64_t v16;

  v4 = *(_QWORD *)(a1 + 24);
  v14 = 0uLL;
  v13 = 0;
  sub_2108B354C((char **)&v13, v4);
  for (i = *(uint64_t **)(a1 + 16); i; i = (uint64_t *)*i)
  {
    if (*((char *)i + 95) < 0)
    {
      sub_2108B314C(__p, (void *)i[9], i[10]);
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)(i + 9);
      v16 = i[11];
    }
    v12 = (_OWORD *)v14.n128_u64[0];
    if (v14.n128_u64[0] < v14.n128_u64[1])
    {
      v11 = *(_OWORD *)__p;
      *(_QWORD *)(v14.n128_u64[0] + 16) = v16;
      *v12 = v11;
      v14.n128_u64[0] = (unint64_t)v12 + 24;
    }
    else
    {
      v14.n128_u64[0] = (unint64_t)sub_2108B36E4(&v13, (uint64_t)__p);
      if (SHIBYTE(v16) < 0)
        operator delete(__p[0]);
    }
  }
  v6 = v13;
  v7 = v14;
  *(__n128 *)(a2 + 8) = v14;
  v8 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7.n128_u64[0] - (_QWORD)v6) >> 3));
  *(_QWORD *)a2 = v6;
  if ((void *)v7.n128_u64[0] == v6)
    v9 = 0;
  else
    v9 = v8;
  return sub_210986E10((uint64_t)v6, (const void **)v7.n128_u64[0], (uint64_t)__p, v9, 1, v7);
}

void sub_2109867A8(_Unwind_Exception *a1)
{
  void **v1;

  sub_2108A89B4(v1);
  _Unwind_Resume(a1);
}

void sub_2109867BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2108A89B4((void **)va);
  _Unwind_Resume(a1);
}

void sub_2109867D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  sub_2108A89B4(&a10);
  _Unwind_Resume(a1);
}

BOOL sub_2109867F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  char *v4;
  _DWORD *v5;
  uint64_t *v6;
  unsigned __int8 ***v7;
  BOOL v8;
  _BOOL8 result;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 **v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;
  uint64_t v18;

  v4 = **(char ***)a2;
  v3 = *(char **)(*(_QWORD *)a2 + 8);
  v5 = **(_DWORD ***)a3;
  if (v3 - v4 != *(_QWORD *)(*(_QWORD *)a3 + 8) - (_QWORD)v5)
    return 0;
  if (v4 != v3)
  {
    while (*(_DWORD *)v4 == *v5
         && *((_DWORD *)v4 + 1) == v5[1]
         && *((_DWORD *)v4 + 2) == v5[2]
         && *((_DWORD *)v4 + 3) == v5[3]
         && *((_DWORD *)v4 + 4) == v5[4])
    {
      v4 += 20;
      v5 += 5;
      if (v4 == v3)
        goto LABEL_9;
    }
    return 0;
  }
LABEL_9:
  v6 = *(uint64_t **)(a2 + 8);
  v7 = *(unsigned __int8 ****)(a3 + 8);
  if (*((_BYTE *)v6 + 24))
    v8 = *((_BYTE *)v7 + 24) == 0;
  else
    v8 = 1;
  if (!v8)
  {
    v11 = *v6;
    v10 = v6[1];
    v12 = *v7;
    if (v10 - *v6 == (char *)v7[1] - (char *)*v7)
    {
      if (v11 == v10)
        return 1;
      while (1)
      {
        v13 = *(unsigned __int8 *)(v11 + 23);
        if ((v13 & 0x80u) == 0)
          v14 = (unsigned __int8 *)*(unsigned __int8 *)(v11 + 23);
        else
          v14 = *(unsigned __int8 **)(v11 + 8);
        v15 = (unsigned __int8 *)*((unsigned __int8 *)v12 + 23);
        v16 = (char)v15;
        if ((char)v15 < 0)
          v15 = v12[1];
        if (v14 != v15)
          break;
        if (v16 >= 0)
          v17 = (unsigned __int8 *)v12;
        else
          v17 = *v12;
        if ((v13 & 0x80) != 0)
        {
          if (memcmp(*(const void **)v11, v17, *(_QWORD *)(v11 + 8)))
            return 0;
        }
        else if (*(_BYTE *)(v11 + 23))
        {
          v18 = 0;
          while (*(unsigned __int8 *)(v11 + v18) == v17[v18])
          {
            if (v13 == ++v18)
              goto LABEL_20;
          }
          return 0;
        }
LABEL_20:
        v11 += 24;
        v12 += 3;
        result = 1;
        if (v11 == v10)
          return result;
      }
    }
    return 0;
  }
  return (*((_BYTE *)v6 + 24) != 0) == (*((_BYTE *)v7 + 24) != 0);
}

uint64_t sub_2109869A4(uint64_t a1, unsigned int a2, __int128 *a3)
{
  const std::error_category *v6;
  uint64_t v7;
  void *__dst[2];
  uint64_t v10;
  char v11;
  void *v12[2];
  uint64_t v13;
  uint64_t v14;
  void *__p[2];
  uint64_t v16;
  char v17;
  char v18;

  v6 = std::generic_category();
  sub_210986B00(__dst, a3);
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  if (!v18)
    return a1;
  *(_BYTE *)(a1 + 40) = 0;
  if (v11)
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)__dst;
    *(_QWORD *)(a1 + 32) = v10;
    __dst[1] = 0;
    v10 = 0;
    __dst[0] = 0;
    *(_BYTE *)(a1 + 40) = 1;
  }
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  if (!v17)
  {
    *(_BYTE *)(a1 + 112) = 1;
    if (!v11)
      return a1;
    goto LABEL_13;
  }
  v7 = v14;
  *(_QWORD *)(a1 + 64) = v13;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)v12;
  v12[0] = 0;
  v12[1] = 0;
  *(_QWORD *)(a1 + 72) = v7;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)__p;
  *(_QWORD *)(a1 + 96) = v16;
  __p[1] = 0;
  v16 = 0;
  v13 = 0;
  __p[0] = 0;
  *(_BYTE *)(a1 + 104) = 1;
  *(_BYTE *)(a1 + 112) = 1;
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v13) & 0x80000000) == 0)
      goto LABEL_7;
LABEL_12:
    operator delete(v12[0]);
    if (!v11)
      return a1;
    goto LABEL_13;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v13) < 0)
    goto LABEL_12;
LABEL_7:
  if (!v11)
    return a1;
LABEL_13:
  if ((SHIBYTE(v10) & 0x80000000) == 0)
    return a1;
  operator delete(__dst[0]);
  return a1;
}

_BYTE *sub_210986B00(_BYTE *__dst, __int128 *a2)
{
  __int128 v4;

  *__dst = 0;
  __dst[96] = 0;
  if (*((_BYTE *)a2 + 96))
  {
    *__dst = 0;
    __dst[24] = 0;
    if (*((_BYTE *)a2 + 24))
    {
      if (*((char *)a2 + 23) < 0)
      {
        sub_2108B314C(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
      }
      else
      {
        v4 = *a2;
        *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
        *(_OWORD *)__dst = v4;
      }
      __dst[24] = 1;
    }
    sub_210986BB8(__dst + 32, a2 + 2);
    __dst[96] = 1;
  }
  return __dst;
}

void sub_210986B88(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
  }
  sub_210986530(v1);
  _Unwind_Resume(a1);
}

char *sub_210986BB8(char *__dst, __int128 *a2)
{
  __int128 v4;
  _BYTE *v5;
  __int128 v6;

  *__dst = 0;
  __dst[56] = 0;
  if (*((_BYTE *)a2 + 56))
  {
    if (*((char *)a2 + 23) < 0)
    {
      sub_2108B314C(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v4 = *a2;
      *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
      *(_OWORD *)__dst = v4;
    }
    *((_QWORD *)__dst + 3) = *((_QWORD *)a2 + 3);
    v5 = __dst + 32;
    if (*((char *)a2 + 55) < 0)
    {
      sub_2108B314C(v5, *((void **)a2 + 4), *((_QWORD *)a2 + 5));
    }
    else
    {
      v6 = a2[2];
      *((_QWORD *)__dst + 6) = *((_QWORD *)a2 + 6);
      *(_OWORD *)v5 = v6;
    }
    __dst[56] = 1;
  }
  return __dst;
}

void sub_210986C50(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
  {
    operator delete(*(void **)v1);
    sub_210986C88(v1);
    _Unwind_Resume(a1);
  }
  sub_210986C88(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_210986C88(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 56))
    return a1;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_210986CE8(uint64_t a1, char *__s)
{
  size_t v4;
  size_t v5;
  __int128 *p_dst;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  __int128 __dst;
  unint64_t v12;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_2108A4B7C();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    p_dst = (__int128 *)operator new(v7 + 1);
    *((_QWORD *)&__dst + 1) = v5;
    v12 = v8 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v5);
    *((_BYTE *)p_dst + v5) = 0;
    if ((SHIBYTE(v12) & 0x80000000) == 0)
      goto LABEL_5;
LABEL_10:
    v9 = (void *)__dst;
    sub_2108B314C((_BYTE *)a1, (void *)__dst, *((unint64_t *)&__dst + 1));
    *(_BYTE *)(a1 + 24) = 1;
    *(_BYTE *)(a1 + 32) = 0;
    *(_BYTE *)(a1 + 88) = 0;
    operator delete(v9);
    return a1;
  }
  HIBYTE(v12) = v4;
  p_dst = &__dst;
  if (v4)
    goto LABEL_9;
  LOBYTE(__dst) = 0;
  if (SHIBYTE(v12) < 0)
    goto LABEL_10;
LABEL_5:
  *(_OWORD *)a1 = __dst;
  *(_QWORD *)(a1 + 16) = v12;
  *(_BYTE *)(a1 + 24) = 1;
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 88) = 0;
  return a1;
}

void sub_210986DFC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double sub_210986E10(uint64_t a1, const void **a2, uint64_t a3, uint64_t a4, char a5, __n128 a6)
{
  unint64_t j;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  __n128 v17;
  int v18;
  const void *v19;
  size_t v20;
  int v21;
  const void *v22;
  size_t v23;
  size_t v24;
  int v25;
  uint64_t v26;
  __n128 v27;
  __n128 *v28;
  size_t v29;
  int v30;
  const void *v31;
  size_t v32;
  size_t v33;
  int v34;
  unint64_t v35;
  const void **v36;
  const void **v37;
  const void **v38;
  const void *v39;
  const void **v40;
  size_t v41;
  size_t v42;
  int v43;
  const void *v44;
  const void **v45;
  size_t v46;
  size_t v47;
  int v48;
  const void **v49;
  __n128 v50;
  __int128 v51;
  __n128 v52;
  __n128 *v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  const void *v57;
  unint64_t v58;
  size_t v59;
  int v60;
  const void **v61;
  const void *v62;
  const void **v63;
  unint64_t v64;
  size_t v65;
  int v66;
  __n128 *v67;
  __n128 v68;
  __n128 v69;
  BOOL v70;
  __n128 v71;
  __n128 *v72;
  size_t v73;
  size_t v74;
  const void **v75;
  const void *v76;
  const void **v77;
  size_t v78;
  size_t v79;
  int v80;
  int v81;
  const void *v82;
  size_t v83;
  size_t v84;
  int v85;
  unint64_t v86;
  uint64_t v87;
  const void *v88;
  size_t v89;
  size_t v90;
  int v91;
  const void **k;
  const void **v93;
  const void **v94;
  size_t v95;
  size_t v96;
  int v97;
  __n128 v98;
  __int128 v99;
  __n128 v100;
  __n128 *v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  const void *v105;
  unint64_t v106;
  size_t v107;
  int v108;
  const void **v109;
  const void *v110;
  const void **v111;
  const void *v112;
  size_t v113;
  int v114;
  __n128 *v115;
  __n128 v116;
  __n128 *v117;
  __n128 *v118;
  __n128 *v119;
  int v120;
  __n128 *v121;
  size_t v122;
  int v123;
  const void *v124;
  size_t v125;
  size_t v126;
  int v127;
  const void *v128;
  uint64_t v129;
  uint64_t v130;
  int64_t v131;
  int64_t v132;
  __n128 *v133;
  int64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  __n128 *v138;
  int v139;
  const void *v140;
  unint64_t v141;
  int v142;
  const void *v143;
  unint64_t v144;
  size_t v145;
  int v146;
  uint64_t v147;
  int v148;
  __n128 *v149;
  size_t v150;
  int v151;
  const void *v152;
  size_t v153;
  size_t v154;
  int v155;
  __n128 v156;
  __n128 v157;
  __n128 *v158;
  size_t v159;
  __n128 v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  const void *v164;
  size_t v165;
  int v166;
  const void *v167;
  size_t v168;
  size_t v169;
  int v170;
  int v171;
  __n128 *v172;
  size_t v173;
  size_t v174;
  int v175;
  BOOL v176;
  __n128 *v177;
  __n128 *v178;
  int v179;
  const void *v180;
  size_t v181;
  int v182;
  __n128 *v183;
  size_t v184;
  size_t v185;
  int v186;
  __n128 v187;
  __n128 *v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  int v192;
  const void *v193;
  unint64_t v194;
  size_t v195;
  int v196;
  int64_t v197;
  unint64_t v198;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  __n128 *v204;
  int v205;
  const void *v206;
  unint64_t v207;
  int v208;
  const void *v209;
  unint64_t v210;
  size_t v211;
  int v212;
  const void *v213;
  uint64_t v214;
  unint64_t v215;
  unint64_t v216;
  uint64_t v217;
  int v218;
  const void *v219;
  size_t v220;
  int v221;
  __n128 *v222;
  size_t v223;
  size_t v224;
  int v225;
  __n128 v226;
  __n128 *v227;
  size_t v228;
  __n128 v229;
  __int128 v230;
  unint64_t v231;
  uint64_t v232;
  int v233;
  const void *v234;
  size_t v235;
  size_t v236;
  int v237;
  const void *v238;
  const void **v239;
  int v240;
  const void *v241;
  size_t v242;
  int v243;
  const void *v244;
  size_t v245;
  size_t v246;
  int v247;
  __n128 v248;
  __n128 *v249;
  size_t v250;
  uint64_t i;
  int v252;
  const void *v253;
  size_t v254;
  size_t v255;
  int v256;
  __n128 v257;
  __n128 v258;
  const void **v261;
  unint64_t v262;
  const void **v263;
  __n128 *__s1a;
  void *__s1b;
  void *__s1c;
  const void **__s2;
  __n128 *__s2a;
  unsigned __int8 __s2b;
  const void **v271;
  const void **v272;
  __n128 v273;
  int64_t v274;
  __n128 v275;
  uint64_t v276;
  uint64_t v277;

  v277 = *MEMORY[0x24BDAC8D0];
LABEL_2:
  __s2 = a2 - 3;
  v271 = a2;
  v261 = a2 - 9;
  v263 = a2 - 6;
  j = a1;
  while (2)
  {
    a1 = j;
    v10 = (uint64_t)a2 - j;
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - j) >> 3);
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return a6.n128_f64[0];
      case 2uLL:
        v119 = (__n128 *)*(a2 - 3);
        v118 = (__n128 *)(a2 - 3);
        v117 = v119;
        v120 = v118[1].n128_i8[7];
        if (v120 >= 0)
          v121 = v118;
        else
          v121 = v117;
        if (v120 >= 0)
          v122 = v118[1].n128_u8[7];
        else
          v122 = v118->n128_u64[1];
        v123 = *(char *)(a1 + 23);
        if (v123 >= 0)
          v124 = (const void *)a1;
        else
          v124 = *(const void **)a1;
        if (v123 >= 0)
          v125 = *(unsigned __int8 *)(a1 + 23);
        else
          v125 = *(_QWORD *)(a1 + 8);
        if (v125 >= v122)
          v126 = v122;
        else
          v126 = v125;
        v127 = memcmp(v121, v124, v126);
        if (v127)
        {
          if ((v127 & 0x80000000) == 0)
            return a6.n128_f64[0];
        }
        else if (v122 >= v125)
        {
          return a6.n128_f64[0];
        }
        v257 = *(__n128 *)a1;
        v274 = *(_QWORD *)(a1 + 16);
        v273 = v257;
        v258 = *v118;
        *(_QWORD *)(a1 + 16) = v118[1].n128_u64[0];
        *(__n128 *)a1 = v258;
        a6 = v273;
        v118[1].n128_u64[0] = v274;
        *v118 = a6;
        return a6.n128_f64[0];
      case 3uLL:
        a6.n128_u64[0] = sub_210987F1C((const void **)a1, (const void **)(a1 + 24), __s2).n128_u64[0];
        return a6.n128_f64[0];
      case 4uLL:
        a6.n128_u64[0] = sub_210988468(a1, (__int128 *)(a1 + 24), (__int128 *)(a1 + 48), __s2).n128_u64[0];
        return a6.n128_f64[0];
      case 5uLL:
        a6.n128_u64[0] = sub_210988610(a1, a1 + 24, a1 + 48, (__int128 *)(a1 + 72), __s2).n128_u64[0];
        return a6.n128_f64[0];
      default:
        if (v10 <= 575)
        {
          if ((a5 & 1) != 0)
          {
            if ((const void **)a1 == a2)
              return a6.n128_f64[0];
            v128 = (const void *)(a1 + 24);
            if ((const void **)(a1 + 24) == a2)
              return a6.n128_f64[0];
            v129 = 0;
            v130 = a1;
            while (1)
            {
              v178 = (__n128 *)v130;
              v130 = (uint64_t)v128;
              v179 = v178[2].n128_i8[15];
              if (v179 >= 0)
                v180 = v128;
              else
                v180 = (const void *)v178[1].n128_u64[1];
              if (v179 >= 0)
                v181 = v178[2].n128_u8[15];
              else
                v181 = v178[2].n128_u64[0];
              v182 = v178[1].n128_i8[7];
              if (v182 >= 0)
                v183 = v178;
              else
                v183 = (__n128 *)v178->n128_u64[0];
              if (v182 >= 0)
                v184 = v178[1].n128_u8[7];
              else
                v184 = v178->n128_u64[1];
              if (v184 >= v181)
                v185 = v181;
              else
                v185 = v184;
              v186 = memcmp(v180, v183, v185);
              if (v186)
              {
                if ((v186 & 0x80000000) == 0)
                  goto LABEL_346;
              }
              else if (v181 >= v184)
              {
                goto LABEL_346;
              }
              v187 = *(__n128 *)v130;
              v274 = *(_QWORD *)(v130 + 16);
              v273 = v187;
              if (v274 >= 0)
                v188 = &v273;
              else
                v188 = (__n128 *)v187.n128_u64[0];
              if (v274 >= 0)
                v189 = HIBYTE(v274);
              else
                v189 = v187.n128_u64[1];
              *(_QWORD *)(v130 + 16) = v178[1].n128_u64[0];
              *(__n128 *)v130 = *v178;
              v178[1].n128_u8[7] = 0;
              v178->n128_u8[0] = 0;
              v177 = (__n128 *)a1;
              if (v178 == (__n128 *)a1)
                goto LABEL_345;
              v190 = v129;
              while (1)
              {
                v191 = a1 + v190;
                v192 = *(char *)(a1 + v190 - 1);
                v193 = v192 >= 0 ? (const void *)(a1 + v190 - 24) : *(const void **)(a1 + v190 - 24);
                v194 = v192 >= 0 ? *(unsigned __int8 *)(a1 + v190 - 1) : *(_QWORD *)(a1 + v190 - 16);
                v195 = v194 >= v189 ? v189 : v194;
                v196 = memcmp(v188, v193, v195);
                if (!v196)
                  break;
                if ((v196 & 0x80000000) == 0)
                {
                  v177 = (__n128 *)(a1 + v190);
                  goto LABEL_344;
                }
LABEL_375:
                v178 = (__n128 *)((char *)v178 - 24);
                *(_OWORD *)v191 = *(_OWORD *)(a1 + v190 - 24);
                *(_QWORD *)(v191 + 16) = *(_QWORD *)(a1 + v190 - 8);
                *(_BYTE *)(v191 - 1) = 0;
                *(_BYTE *)(v191 - 24) = 0;
                v190 -= 24;
                if (!v190)
                {
                  v177 = (__n128 *)a1;
                  goto LABEL_344;
                }
              }
              if (v189 < v194)
                goto LABEL_375;
              v177 = v178;
LABEL_344:
              a2 = v271;
LABEL_345:
              a6 = v273;
              v177[1].n128_u64[0] = v274;
              *v177 = a6;
LABEL_346:
              v128 = (const void *)(v130 + 24);
              v129 += 24;
              if ((const void **)(v130 + 24) == a2)
                return a6.n128_f64[0];
            }
          }
          if ((const void **)a1 == a2)
            return a6.n128_f64[0];
          v238 = (const void *)(a1 + 24);
          if ((const void **)(a1 + 24) == a2)
            return a6.n128_f64[0];
LABEL_468:
          v239 = (const void **)a1;
          a1 = (uint64_t)v238;
          v240 = *((char *)v239 + 47);
          if (v240 >= 0)
            v241 = v238;
          else
            v241 = v239[3];
          if (v240 >= 0)
            v242 = *((unsigned __int8 *)v239 + 47);
          else
            v242 = (size_t)v239[4];
          v243 = *((char *)v239 + 23);
          if (v243 >= 0)
            v244 = v239;
          else
            v244 = *v239;
          if (v243 >= 0)
            v245 = *((unsigned __int8 *)v239 + 23);
          else
            v245 = (size_t)v239[1];
          if (v245 >= v242)
            v246 = v242;
          else
            v246 = v245;
          v247 = memcmp(v241, v244, v246);
          if (v247)
          {
            if ((v247 & 0x80000000) == 0)
              goto LABEL_467;
          }
          else if (v242 >= v245)
          {
            goto LABEL_467;
          }
          v248 = *(__n128 *)a1;
          v274 = *(_QWORD *)(a1 + 16);
          v273 = v248;
          *(_QWORD *)(a1 + 8) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)a1 = 0;
          if (v274 >= 0)
            v249 = &v273;
          else
            v249 = (__n128 *)v273.n128_u64[0];
          if (v274 >= 0)
            v250 = HIBYTE(v274);
          else
            v250 = v273.n128_u64[1];
          for (i = a1; ; i -= 24)
          {
            *(_OWORD *)i = *(_OWORD *)(i - 24);
            *(_QWORD *)(i + 16) = *(_QWORD *)(i - 8);
            *(_BYTE *)(i - 1) = 0;
            *(_BYTE *)(i - 24) = 0;
            v252 = *(char *)(i - 25);
            if (v252 >= 0)
              v253 = (const void *)(i - 48);
            else
              v253 = *(const void **)(i - 48);
            if (v252 >= 0)
              v254 = *(unsigned __int8 *)(i - 25);
            else
              v254 = *(_QWORD *)(i - 40);
            if (v254 >= v250)
              v255 = v250;
            else
              v255 = v254;
            v256 = memcmp(v249, v253, v255);
            if (v256)
            {
              if ((v256 & 0x80000000) == 0)
              {
LABEL_466:
                a6 = v273;
                *(_QWORD *)(i - 8) = v274;
                *(__n128 *)(i - 24) = a6;
LABEL_467:
                v238 = (const void *)(a1 + 24);
                if ((const void **)(a1 + 24) == a2)
                  return a6.n128_f64[0];
                goto LABEL_468;
              }
            }
            else if (v250 >= v254)
            {
              goto LABEL_466;
            }
          }
        }
        if (!a4)
        {
          if ((const void **)a1 == a2)
            return a6.n128_f64[0];
          v131 = (v11 - 2) >> 1;
          v132 = v131;
          v262 = v10;
          while (1)
          {
            v134 = v132;
            if (v131 < v132)
              goto LABEL_260;
            v135 = (2 * v132) | 1;
            v136 = a1 + 24 * v135;
            v137 = 2 * v132 + 2;
            __s1b = (void *)v132;
            if (v137 >= (uint64_t)v11)
              goto LABEL_280;
            v138 = (__n128 *)(v136 + 24);
            v139 = *(char *)(v136 + 23);
            v140 = v139 >= 0 ? (const void *)(a1 + 24 * v135) : *(const void **)v136;
            v141 = v139 >= 0 ? *(unsigned __int8 *)(v136 + 23) : *(_QWORD *)(v136 + 8);
            v142 = *(char *)(v136 + 47);
            v143 = v142 >= 0 ? (const void *)(v136 + 24) : *(const void **)(v136 + 24);
            v144 = v142 >= 0 ? *(unsigned __int8 *)(v136 + 47) : *(_QWORD *)(v136 + 32);
            v145 = v144 >= v141 ? v141 : v144;
            v146 = memcmp(v140, v143, v145);
            if (v146)
              break;
            v176 = v141 >= v144;
            a2 = v271;
            v134 = (int64_t)__s1b;
            if (v176)
              goto LABEL_280;
LABEL_281:
            v147 = a1 + 24 * v134;
            v148 = v138[1].n128_i8[7];
            if (v148 >= 0)
              v149 = v138;
            else
              v149 = (__n128 *)v138->n128_u64[0];
            if (v148 >= 0)
              v150 = v138[1].n128_u8[7];
            else
              v150 = v138->n128_u64[1];
            v151 = *(char *)(v147 + 23);
            if (v151 >= 0)
              v152 = (const void *)(a1 + 24 * v134);
            else
              v152 = *(const void **)v147;
            if (v151 >= 0)
              v153 = *(unsigned __int8 *)(v147 + 23);
            else
              v153 = *(_QWORD *)(v147 + 8);
            if (v153 >= v150)
              v154 = v150;
            else
              v154 = v153;
            v155 = memcmp(v149, v152, v154);
            if (v155)
            {
              v134 = (int64_t)__s1b;
              if ((v155 & 0x80000000) == 0)
                goto LABEL_300;
            }
            else
            {
              v134 = (int64_t)__s1b;
              if (v150 >= v153)
              {
LABEL_300:
                v156 = *(__n128 *)v147;
                v274 = *(_QWORD *)(v147 + 16);
                v273 = v156;
                *(_QWORD *)(v147 + 8) = 0;
                *(_QWORD *)(v147 + 16) = 0;
                *(_QWORD *)v147 = 0;
                v157 = *v138;
                *(_QWORD *)(v147 + 16) = v138[1].n128_u64[0];
                *(__n128 *)v147 = v157;
                v138[1].n128_u8[7] = 0;
                v138->n128_u8[0] = 0;
                if (v131 < v137)
                {
LABEL_258:
                  v133 = v138;
LABEL_259:
                  a6 = v273;
                  v133[1].n128_u64[0] = v274;
                  *v133 = a6;
                  v134 = (int64_t)__s1b;
                  goto LABEL_260;
                }
                v158 = &v273;
                if (v274 < 0)
                  v158 = (__n128 *)v273.n128_u64[0];
                __s2a = v158;
                if (v274 >= 0)
                  v159 = HIBYTE(v274);
                else
                  v159 = v273.n128_u64[1];
                while (2)
                {
                  v161 = (2 * v137) | 1;
                  v162 = a1 + 24 * v161;
                  v137 = 2 * v137 + 2;
                  if (v137 < (uint64_t)v11)
                  {
                    v133 = (__n128 *)(v162 + 24);
                    v163 = *(char *)(v162 + 23);
                    if (v163 >= 0)
                      v164 = (const void *)(a1 + 24 * v161);
                    else
                      v164 = *(const void **)v162;
                    if (v163 >= 0)
                      v165 = *(unsigned __int8 *)(v162 + 23);
                    else
                      v165 = *(_QWORD *)(v162 + 8);
                    v166 = *(char *)(v162 + 47);
                    if (v166 >= 0)
                      v167 = (const void *)(v162 + 24);
                    else
                      v167 = *(const void **)(v162 + 24);
                    if (v166 >= 0)
                      v168 = *(unsigned __int8 *)(v162 + 47);
                    else
                      v168 = *(_QWORD *)(v162 + 32);
                    if (v168 >= v165)
                      v169 = v165;
                    else
                      v169 = v168;
                    v170 = memcmp(v164, v167, v169);
                    if (v170)
                    {
                      a2 = v271;
                      v131 = (v11 - 2) >> 1;
                      if ((v170 & 0x80000000) == 0)
                        break;
LABEL_327:
                      v171 = v133[1].n128_i8[7];
                      if (v171 >= 0)
                        v172 = v133;
                      else
                        v172 = (__n128 *)v133->n128_u64[0];
                      if (v171 >= 0)
                        v173 = v133[1].n128_u8[7];
                      else
                        v173 = v133->n128_u64[1];
                      if (v159 >= v173)
                        v174 = v173;
                      else
                        v174 = v159;
                      v175 = memcmp(v172, __s2a, v174);
                      if (v175)
                      {
                        if (v175 < 0)
                          goto LABEL_258;
                      }
                      else if (v173 < v159)
                      {
                        goto LABEL_258;
                      }
                      v160 = *v133;
                      v138[1].n128_u64[0] = v133[1].n128_u64[0];
                      *v138 = v160;
                      v133[1].n128_u8[7] = 0;
                      v133->n128_u8[0] = 0;
                      v138 = v133;
                      if (v131 < v137)
                        goto LABEL_259;
                      continue;
                    }
                    v176 = v165 >= v168;
                    a2 = v271;
                    v131 = (v11 - 2) >> 1;
                    if (!v176)
                      goto LABEL_327;
                  }
                  break;
                }
                v133 = (__n128 *)(a1 + 24 * v161);
                v137 = v161;
                goto LABEL_327;
              }
            }
LABEL_260:
            v132 = v134 - 1;
            if (!v134)
            {
              v197 = v262 / 0x18;
LABEL_393:
              if (v197 < 2)
                goto LABEL_391;
              v272 = a2;
              v200 = 0;
              __s1c = *(void **)a1;
              v275.n128_u64[0] = *(_QWORD *)(a1 + 8);
              *(unint64_t *)((char *)v275.n128_u64 + 7) = *(_QWORD *)(a1 + 15);
              __s2b = *(_BYTE *)(a1 + 23);
              *(_QWORD *)(a1 + 8) = 0;
              *(_QWORD *)(a1 + 16) = 0;
              *(_QWORD *)a1 = 0;
              v201 = a1;
              while (1)
              {
                v202 = v201 + 24 * v200 + 24;
                v203 = (2 * v200) | 1;
                v200 = 2 * v200 + 2;
                if (v200 >= v197)
                  goto LABEL_414;
                v204 = (__n128 *)(v202 + 24);
                v205 = *(char *)(v202 + 23);
                v206 = v205 >= 0 ? (const void *)v202 : *(const void **)v202;
                v207 = v205 >= 0 ? *(unsigned __int8 *)(v202 + 23) : *(_QWORD *)(v202 + 8);
                v208 = *(char *)(v202 + 47);
                v209 = v208 >= 0 ? (const void *)(v202 + 24) : *(const void **)(v202 + 24);
                v210 = v208 >= 0 ? *(unsigned __int8 *)(v202 + 47) : *(_QWORD *)(v202 + 32);
                v211 = v210 >= v207 ? v207 : v210;
                v212 = memcmp(v206, v209, v211);
                if (!v212)
                  break;
                if ((v212 & 0x80000000) == 0)
                  goto LABEL_414;
LABEL_415:
                if (*(char *)(v201 + 23) < 0)
                  operator delete(*(void **)v201);
                a6 = *v204;
                *(_QWORD *)(v201 + 16) = v204[1].n128_u64[0];
                *(__n128 *)v201 = a6;
                v204[1].n128_u8[7] = 0;
                v204->n128_u8[0] = 0;
                v201 = (uint64_t)v204;
                if (v200 > (uint64_t)((unint64_t)(v197 - 2) >> 1))
                {
                  if (v204 == (__n128 *)(a2 - 3))
                  {
                    v204->n128_u64[0] = (unint64_t)__s1c;
                    v198 = *(unint64_t *)((char *)v275.n128_u64 + 7);
                    v204->n128_u64[1] = v275.n128_u64[0];
                    *(unint64_t *)((char *)&v204->n128_u64[1] + 7) = v198;
                    v204[1].n128_u8[7] = __s2b;
                  }
                  else
                  {
                    a6 = *(__n128 *)(a2 - 3);
                    v204[1].n128_u64[0] = (unint64_t)*(a2 - 1);
                    *v204 = a6;
                    *(a2 - 3) = __s1c;
                    v213 = (const void *)v275.n128_u64[0];
                    *(const void **)((char *)a2 - 9) = *(const void **)((char *)v275.n128_u64 + 7);
                    *(a2 - 2) = v213;
                    *((_BYTE *)a2 - 1) = __s2b;
                    v214 = (uint64_t)&v204[1].n128_i64[1] - a1;
                    if (v214 >= 25)
                    {
                      v215 = v214 / 0x18uLL - 2;
                      v216 = v215 >> 1;
                      v217 = a1 + 24 * (v215 >> 1);
                      v218 = *(char *)(v217 + 23);
                      if (v218 >= 0)
                        v219 = (const void *)(a1 + 24 * (v215 >> 1));
                      else
                        v219 = *(const void **)v217;
                      if (v218 >= 0)
                        v220 = *(unsigned __int8 *)(v217 + 23);
                      else
                        v220 = *(_QWORD *)(v217 + 8);
                      v221 = v204[1].n128_i8[7];
                      if (v221 >= 0)
                        v222 = v204;
                      else
                        v222 = (__n128 *)v204->n128_u64[0];
                      if (v221 >= 0)
                        v223 = v204[1].n128_u8[7];
                      else
                        v223 = v204->n128_u64[1];
                      if (v223 >= v220)
                        v224 = v220;
                      else
                        v224 = v223;
                      v225 = memcmp(v219, v222, v224);
                      if (v225)
                      {
                        if (v225 < 0)
                        {
LABEL_440:
                          v226 = *v204;
                          v274 = v204[1].n128_i64[0];
                          v273 = v226;
                          v204->n128_u64[1] = 0;
                          v204[1].n128_u64[0] = 0;
                          v204->n128_u64[0] = 0;
                          if (v274 >= 0)
                            v227 = &v273;
                          else
                            v227 = (__n128 *)v273.n128_u64[0];
                          if (v274 >= 0)
                            v228 = HIBYTE(v274);
                          else
                            v228 = v273.n128_u64[1];
                          v229 = *(__n128 *)v217;
                          v204[1].n128_u64[0] = *(_QWORD *)(v217 + 16);
                          *v204 = v229;
                          *(_BYTE *)(v217 + 23) = 0;
                          *(_BYTE *)v217 = 0;
                          if (v215 >= 2)
                          {
                            while (1)
                            {
                              v231 = v216 - 1;
                              v216 = (v216 - 1) >> 1;
                              v232 = a1 + 24 * v216;
                              v233 = *(char *)(v232 + 23);
                              if (v233 >= 0)
                                v234 = (const void *)(a1 + 24 * v216);
                              else
                                v234 = *(const void **)v232;
                              if (v233 >= 0)
                                v235 = *(unsigned __int8 *)(v232 + 23);
                              else
                                v235 = *(_QWORD *)(v232 + 8);
                              if (v228 >= v235)
                                v236 = v235;
                              else
                                v236 = v228;
                              v237 = memcmp(v234, v227, v236);
                              if (v237)
                              {
                                if ((v237 & 0x80000000) == 0)
                                  break;
                              }
                              else if (v235 >= v228)
                              {
                                break;
                              }
                              v230 = *(_OWORD *)v232;
                              *(_QWORD *)(v217 + 16) = *(_QWORD *)(v232 + 16);
                              *(_OWORD *)v217 = v230;
                              *(_BYTE *)(v232 + 23) = 0;
                              *(_BYTE *)v232 = 0;
                              v217 = a1 + 24 * v216;
                              if (v231 <= 1)
                                goto LABEL_462;
                            }
                          }
                          v232 = v217;
LABEL_462:
                          a6 = v273;
                          *(_QWORD *)(v232 + 16) = v274;
                          *(__n128 *)v232 = a6;
                          a2 = v272;
                        }
                      }
                      else if (v220 < v223)
                      {
                        goto LABEL_440;
                      }
                    }
                  }
LABEL_391:
                  a2 -= 3;
                  if ((unint64_t)v197-- <= 2)
                    return a6.n128_f64[0];
                  goto LABEL_393;
                }
              }
              if (v207 < v210)
                goto LABEL_415;
LABEL_414:
              v204 = (__n128 *)v202;
              v200 = v203;
              goto LABEL_415;
            }
          }
          a2 = v271;
          v134 = (int64_t)__s1b;
          if (v146 < 0)
            goto LABEL_281;
LABEL_280:
          v138 = (__n128 *)(a1 + 24 * v135);
          v137 = v135;
          goto LABEL_281;
        }
        v12 = v11 >> 1;
        v13 = a1 + 24 * (v11 >> 1);
        if ((unint64_t)v10 < 0xC01)
        {
          sub_210987F1C((const void **)v13, (const void **)a1, __s2);
          --a4;
          if ((a5 & 1) != 0)
            goto LABEL_27;
        }
        else
        {
          sub_210987F1C((const void **)a1, (const void **)v13, __s2);
          v14 = 24 * v12;
          sub_210987F1C((const void **)(a1 + 24), (const void **)(v14 + a1 - 24), v263);
          sub_210987F1C((const void **)(a1 + 48), (const void **)(a1 + 24 + v14), v261);
          sub_210987F1C((const void **)(v14 + a1 - 24), (const void **)v13, (const void **)(a1 + 24 + v14));
          v15 = *(__n128 *)a1;
          v274 = *(_QWORD *)(a1 + 16);
          v273 = v15;
          v16 = *(_QWORD *)(v13 + 16);
          *(_OWORD *)a1 = *(_OWORD *)v13;
          *(_QWORD *)(a1 + 16) = v16;
          v17 = v273;
          *(_QWORD *)(v13 + 16) = v274;
          *(__n128 *)v13 = v17;
          --a4;
          if ((a5 & 1) != 0)
            goto LABEL_27;
        }
        v18 = *(char *)(a1 - 1);
        if (v18 >= 0)
          v19 = (const void *)(a1 - 24);
        else
          v19 = *(const void **)(a1 - 24);
        if (v18 >= 0)
          v20 = *(unsigned __int8 *)(a1 - 1);
        else
          v20 = *(_QWORD *)(a1 - 16);
        v21 = *(char *)(a1 + 23);
        if (v21 >= 0)
          v22 = (const void *)a1;
        else
          v22 = *(const void **)a1;
        if (v21 >= 0)
          v23 = *(unsigned __int8 *)(a1 + 23);
        else
          v23 = *(_QWORD *)(a1 + 8);
        if (v23 >= v20)
          v24 = v20;
        else
          v24 = v23;
        v25 = memcmp(v19, v22, v24);
        if (v25)
        {
          if (v25 < 0)
            goto LABEL_27;
LABEL_124:
          v71 = *(__n128 *)a1;
          v276 = *(_QWORD *)(a1 + 16);
          v275 = v71;
          *(_QWORD *)(a1 + 8) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)a1 = 0;
          if (v276 >= 0)
            v72 = &v275;
          else
            v72 = (__n128 *)v275.n128_u64[0];
          if (v276 >= 0)
            v73 = HIBYTE(v276);
          else
            v73 = v275.n128_u64[1];
          v74 = *((unsigned __int8 *)a2 - 1);
          v75 = (const void **)*(a2 - 3);
          v76 = *(a2 - 2);
          if ((v74 & 0x80u) == 0)
            v77 = __s2;
          else
            v77 = v75;
          if ((v74 & 0x80u) == 0)
            v78 = v74;
          else
            v78 = (size_t)v76;
          if (v78 >= v73)
            v79 = v73;
          else
            v79 = v78;
          __s1a = v72;
          v80 = memcmp(v72, v77, v79);
          if (v80)
          {
            if ((v80 & 0x80000000) == 0)
              goto LABEL_141;
          }
          else if (v73 >= v78)
          {
LABEL_141:
            for (j = a1 + 24; j < (unint64_t)v271; j += 24)
            {
              v81 = *(char *)(j + 23);
              if (v81 >= 0)
                v82 = (const void *)j;
              else
                v82 = *(const void **)j;
              if (v81 >= 0)
                v83 = *(unsigned __int8 *)(j + 23);
              else
                v83 = *(_QWORD *)(j + 8);
              if (v83 >= v73)
                v84 = v73;
              else
                v84 = v83;
              v85 = memcmp(__s1a, v82, v84);
              if (v85)
              {
                if (v85 < 0)
                  goto LABEL_171;
              }
              else if (v73 < v83)
              {
                goto LABEL_171;
              }
            }
            goto LABEL_171;
          }
          v86 = a1 + 24;
          do
          {
            while (1)
            {
              j = v86;
              v87 = *(unsigned __int8 *)(v86 + 23);
              v88 = (v87 & 0x80u) == 0 ? (const void *)j : *(const void **)j;
              v89 = (v87 & 0x80u) == 0 ? v87 : *(_QWORD *)(j + 8);
              v90 = v89 >= v73 ? v73 : v89;
              v91 = memcmp(__s1a, v88, v90);
              v86 = j + 24;
              if (v91)
                break;
              if (v73 < v89)
                goto LABEL_171;
            }
          }
          while ((v91 & 0x80000000) == 0);
LABEL_171:
          k = v271;
          if (j < (unint64_t)v271)
          {
            for (k = __s2; ; v76 = k[1])
            {
              if ((v74 & 0x80u) == 0)
                v94 = k;
              else
                v94 = v75;
              if ((v74 & 0x80u) == 0)
                v95 = v74;
              else
                v95 = (size_t)v76;
              if (v95 >= v73)
                v96 = v73;
              else
                v96 = v95;
              v97 = memcmp(__s1a, v94, v96);
              if (v97)
              {
                if ((v97 & 0x80000000) == 0)
                  break;
              }
              else if (v73 >= v95)
              {
                break;
              }
              v93 = (const void **)*(k - 3);
              k -= 3;
              v75 = v93;
              v74 = *((unsigned __int8 *)k + 23);
            }
          }
LABEL_219:
          while (j < (unint64_t)k)
          {
            v98 = *(__n128 *)j;
            v274 = *(_QWORD *)(j + 16);
            v273 = v98;
            v99 = *(_OWORD *)k;
            *(_QWORD *)(j + 16) = k[2];
            *(_OWORD *)j = v99;
            v100 = v273;
            k[2] = (const void *)v274;
            *(__n128 *)k = v100;
            if (v276 >= 0)
              v101 = &v275;
            else
              v101 = (__n128 *)v275.n128_u64[0];
            if (v276 >= 0)
              v102 = HIBYTE(v276);
            else
              v102 = v275.n128_u64[1];
            v103 = j + 24;
            do
            {
              while (1)
              {
                j = v103;
                v104 = *(unsigned __int8 *)(v103 + 23);
                v105 = (v104 & 0x80u) == 0 ? (const void *)j : *(const void **)j;
                v106 = (v104 & 0x80u) == 0 ? v104 : *(_QWORD *)(j + 8);
                v107 = v106 >= v102 ? v102 : v106;
                v108 = memcmp(v101, v105, v107);
                v103 = j + 24;
                if (v108)
                  break;
                if (v102 < v106)
                  goto LABEL_206;
              }
            }
            while ((v108 & 0x80000000) == 0);
LABEL_206:
            v109 = k - 3;
            do
            {
              while (1)
              {
                k = v109;
                v110 = (const void *)*((unsigned __int8 *)v109 + 23);
                v111 = (char)v110 >= 0 ? k : (const void **)*k;
                v112 = (char)v110 >= 0 ? v110 : k[1];
                v113 = (unint64_t)v112 >= v102 ? v102 : (size_t)v112;
                v114 = memcmp(v101, v111, v113);
                v109 = k - 3;
                if (v114)
                  break;
                if (v102 >= (unint64_t)v112)
                  goto LABEL_219;
              }
            }
            while (v114 < 0);
          }
          v115 = (__n128 *)(j - 24);
          if (j - 24 == a1)
          {
            a2 = v271;
            if (*(char *)(j - 1) < 0)
              operator delete(*(void **)a1);
          }
          else
          {
            a2 = v271;
            if (*(char *)(a1 + 23) < 0)
              operator delete(*(void **)a1);
            v116 = *v115;
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(j - 8);
            *(__n128 *)a1 = v116;
            *(_BYTE *)(j - 1) = 0;
            *(_BYTE *)(j - 24) = 0;
          }
          a5 = 0;
          a6 = v275;
          *(_QWORD *)(j - 8) = v276;
          *v115 = a6;
          continue;
        }
        if (v20 >= v23)
          goto LABEL_124;
LABEL_27:
        v26 = 0;
        v27 = *(__n128 *)a1;
        v276 = *(_QWORD *)(a1 + 16);
        v275 = v27;
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)a1 = 0;
        if (v276 >= 0)
          v28 = &v275;
        else
          v28 = (__n128 *)v275.n128_u64[0];
        if (v276 >= 0)
          v29 = HIBYTE(v276);
        else
          v29 = v275.n128_u64[1];
        while (2)
        {
          v30 = *(char *)(a1 + v26 + 47);
          if (v30 >= 0)
            v31 = (const void *)(a1 + v26 + 24);
          else
            v31 = *(const void **)(a1 + v26 + 24);
          if (v30 >= 0)
            v32 = *(unsigned __int8 *)(a1 + v26 + 47);
          else
            v32 = *(_QWORD *)(a1 + v26 + 32);
          if (v29 >= v32)
            v33 = v32;
          else
            v33 = v29;
          v34 = memcmp(v31, v28, v33);
          if (!v34)
          {
            if (v32 >= v29)
              goto LABEL_46;
LABEL_34:
            v26 += 24;
            continue;
          }
          break;
        }
        if (v34 < 0)
          goto LABEL_34;
LABEL_46:
        v35 = a1 + v26 + 24;
        v36 = __s2;
        if (v26)
        {
          do
          {
            while (1)
            {
              v37 = v36;
              v44 = (const void *)*((unsigned __int8 *)v36 + 23);
              v45 = (char)v44 >= 0 ? v37 : (const void **)*v37;
              v46 = (size_t)((char)v44 >= 0 ? v44 : v37[1]);
              v47 = v29 >= v46 ? v46 : v29;
              v48 = memcmp(v45, v28, v47);
              v36 = v37 - 3;
              if (v48)
                break;
              if (v46 < v29)
                goto LABEL_77;
            }
          }
          while ((v48 & 0x80000000) == 0);
        }
        else
        {
          v37 = v271;
          if (v35 < (unint64_t)v271)
          {
            v38 = __s2;
            do
            {
              while (1)
              {
                v37 = v38;
                v39 = (const void *)*((unsigned __int8 *)v38 + 23);
                v40 = (char)v39 >= 0 ? v37 : (const void **)*v37;
                v41 = (size_t)((char)v39 >= 0 ? v39 : v37[1]);
                v42 = v29 >= v41 ? v41 : v29;
                v43 = memcmp(v40, v28, v42);
                v38 = v37 - 3;
                if (!v43)
                  break;
                if (v35 >= (unint64_t)v37 || v43 < 0)
                  goto LABEL_77;
              }
            }
            while (v35 < (unint64_t)v37 && v41 >= v29);
          }
        }
LABEL_77:
        j = v35;
        if (v35 < (unint64_t)v37)
        {
          v49 = v37;
          do
          {
            v50 = *(__n128 *)j;
            v274 = *(_QWORD *)(j + 16);
            v273 = v50;
            v51 = *(_OWORD *)v49;
            *(_QWORD *)(j + 16) = v49[2];
            *(_OWORD *)j = v51;
            v52 = v273;
            v49[2] = (const void *)v274;
            *(__n128 *)v49 = v52;
            if (v276 >= 0)
              v53 = &v275;
            else
              v53 = (__n128 *)v275.n128_u64[0];
            if (v276 >= 0)
              v54 = HIBYTE(v276);
            else
              v54 = v275.n128_u64[1];
            v55 = j + 24;
            do
            {
              while (1)
              {
                j = v55;
                v56 = *(unsigned __int8 *)(v55 + 23);
                v57 = (v56 & 0x80u) == 0 ? (const void *)j : *(const void **)j;
                v58 = (v56 & 0x80u) == 0 ? v56 : *(_QWORD *)(j + 8);
                v59 = v54 >= v58 ? v58 : v54;
                v60 = memcmp(v57, v53, v59);
                v55 = j + 24;
                if (v60)
                  break;
                if (v58 >= v54)
                  goto LABEL_99;
              }
            }
            while (v60 < 0);
LABEL_99:
            v61 = v49 - 3;
            do
            {
              while (1)
              {
                v49 = v61;
                v62 = (const void *)*((unsigned __int8 *)v61 + 23);
                v63 = (char)v62 >= 0 ? v49 : (const void **)*v49;
                v64 = (unint64_t)((char)v62 >= 0 ? v62 : v49[1]);
                v65 = v54 >= v64 ? v64 : v54;
                v66 = memcmp(v63, v53, v65);
                v61 = v49 - 3;
                if (v66)
                  break;
                if (v64 < v54)
                  goto LABEL_79;
              }
            }
            while ((v66 & 0x80000000) == 0);
LABEL_79:
            ;
          }
          while (j < (unint64_t)v49);
        }
        v67 = (__n128 *)(j - 24);
        if (j - 24 == a1)
        {
          a2 = v271;
          if (*(char *)(j - 1) < 0)
            operator delete(*(void **)a1);
        }
        else
        {
          a2 = v271;
          if (*(char *)(a1 + 23) < 0)
            operator delete(*(void **)a1);
          v68 = *v67;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(j - 8);
          *(__n128 *)a1 = v68;
          *(_BYTE *)(j - 1) = 0;
          *(_BYTE *)(j - 24) = 0;
        }
        v69 = v275;
        *(_QWORD *)(j - 8) = v276;
        *v67 = v69;
        if (v35 < (unint64_t)v37)
        {
LABEL_122:
          sub_210986E10(a1, j - 24, a3, a4, a5 & 1);
          a5 = 0;
          continue;
        }
        v70 = sub_210988184(a1, (const void **)(j - 24));
        if (!sub_210988184(j, a2))
        {
          if (v70)
            continue;
          goto LABEL_122;
        }
        a2 = (const void **)(j - 24);
        if (!v70)
          goto LABEL_2;
        return a6.n128_f64[0];
    }
  }
}

__n128 sub_210987F1C(const void **a1, const void **a2, const void **a3)
{
  int v6;
  const void *v7;
  size_t v8;
  int v9;
  const void *v10;
  size_t v11;
  size_t v12;
  int v13;
  int v14;
  const void *v15;
  size_t v16;
  size_t v17;
  int v18;
  __n128 result;
  int v20;
  const void *v21;
  size_t v22;
  size_t v23;
  int v24;
  const void *v25;
  __n128 v26;
  const void *v27;
  int v28;
  const void *v29;
  size_t v30;
  int v31;
  const void *v32;
  size_t v33;
  size_t v34;
  int v35;
  const void *v36;
  __int128 v37;
  const void *v38;
  int v39;
  const void *v40;
  size_t v41;
  int v42;
  const void *v43;
  size_t v44;
  size_t v45;
  int v46;
  const void *v47;
  const void *v48;
  const void *v49;
  const void *v50;
  const void *v51;

  v6 = *((char *)a2 + 23);
  if (v6 >= 0)
    v7 = a2;
  else
    v7 = *a2;
  if (v6 >= 0)
    v8 = *((unsigned __int8 *)a2 + 23);
  else
    v8 = (size_t)a2[1];
  v9 = *((char *)a1 + 23);
  if (v9 >= 0)
    v10 = a1;
  else
    v10 = *a1;
  if (v9 >= 0)
    v11 = *((unsigned __int8 *)a1 + 23);
  else
    v11 = (size_t)a1[1];
  if (v11 >= v8)
    v12 = v8;
  else
    v12 = v11;
  v13 = memcmp(v7, v10, v12);
  if (!v13)
  {
    if (v8 >= v11)
      goto LABEL_18;
LABEL_31:
    v20 = *((char *)a3 + 23);
    if (v20 >= 0)
      v21 = a3;
    else
      v21 = *a3;
    if (v20 >= 0)
      v22 = *((unsigned __int8 *)a3 + 23);
    else
      v22 = (size_t)a3[1];
    if (v8 >= v22)
      v23 = v22;
    else
      v23 = v8;
    v24 = memcmp(v21, v7, v23);
    if (v24)
    {
      if ((v24 & 0x80000000) == 0)
      {
LABEL_42:
        v25 = a1[2];
        v26 = *(__n128 *)a1;
        v27 = a2[2];
        *(_OWORD *)a1 = *(_OWORD *)a2;
        a1[2] = v27;
        *(__n128 *)a2 = v26;
        a2[2] = v25;
        v28 = *((char *)a3 + 23);
        if (v28 >= 0)
          v29 = a3;
        else
          v29 = *a3;
        if (v28 >= 0)
          v30 = *((unsigned __int8 *)a3 + 23);
        else
          v30 = (size_t)a3[1];
        v31 = *((char *)a2 + 23);
        if (v31 >= 0)
          v32 = a2;
        else
          v32 = *a2;
        if (v31 >= 0)
          v33 = *((unsigned __int8 *)a2 + 23);
        else
          v33 = (size_t)a2[1];
        if (v33 >= v30)
          v34 = v30;
        else
          v34 = v33;
        v35 = memcmp(v29, v32, v34);
        if (v35)
        {
          if ((v35 & 0x80000000) == 0)
            return result;
        }
        else if (v30 >= v33)
        {
          return result;
        }
        v47 = a2[2];
        result = *(__n128 *)a2;
        v49 = a3[2];
        *(_OWORD *)a2 = *(_OWORD *)a3;
        a2[2] = v49;
LABEL_83:
        *(__n128 *)a3 = result;
        a3[2] = v47;
        return result;
      }
    }
    else if (v22 >= v8)
    {
      goto LABEL_42;
    }
    v47 = a1[2];
    result = *(__n128 *)a1;
    v48 = a3[2];
    *(_OWORD *)a1 = *(_OWORD *)a3;
    a1[2] = v48;
    goto LABEL_83;
  }
  if (v13 < 0)
    goto LABEL_31;
LABEL_18:
  v14 = *((char *)a3 + 23);
  if (v14 >= 0)
    v15 = a3;
  else
    v15 = *a3;
  if (v14 >= 0)
    v16 = *((unsigned __int8 *)a3 + 23);
  else
    v16 = (size_t)a3[1];
  if (v8 >= v16)
    v17 = v16;
  else
    v17 = v8;
  v18 = memcmp(v15, v7, v17);
  if (v18)
  {
    if ((v18 & 0x80000000) == 0)
      return result;
  }
  else if (v16 >= v8)
  {
    return result;
  }
  v36 = a2[2];
  v37 = *(_OWORD *)a2;
  v38 = a3[2];
  *(_OWORD *)a2 = *(_OWORD *)a3;
  a2[2] = v38;
  *(_OWORD *)a3 = v37;
  a3[2] = v36;
  v39 = *((char *)a2 + 23);
  if (v39 >= 0)
    v40 = a2;
  else
    v40 = *a2;
  if (v39 >= 0)
    v41 = *((unsigned __int8 *)a2 + 23);
  else
    v41 = (size_t)a2[1];
  v42 = *((char *)a1 + 23);
  if (v42 >= 0)
    v43 = a1;
  else
    v43 = *a1;
  if (v42 >= 0)
    v44 = *((unsigned __int8 *)a1 + 23);
  else
    v44 = (size_t)a1[1];
  if (v44 >= v41)
    v45 = v41;
  else
    v45 = v44;
  v46 = memcmp(v40, v43, v45);
  if (v46)
  {
    if (v46 < 0)
      goto LABEL_85;
  }
  else if (v41 < v44)
  {
LABEL_85:
    v50 = a1[2];
    result = *(__n128 *)a1;
    v51 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = v51;
    *(__n128 *)a2 = result;
    a2[2] = v50;
  }
  return result;
}

BOOL sub_210988184(uint64_t a1, const void **a2)
{
  const void **v2;
  unint64_t v4;
  _BOOL8 result;
  const void **v6;
  int v7;
  const void **v8;
  size_t v9;
  int v10;
  const void *v11;
  size_t v12;
  size_t v13;
  int v14;
  const void **v15;
  const void **v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  __int128 v20;
  int v21;
  const void *v22;
  size_t v23;
  int v24;
  const void *v25;
  size_t v26;
  size_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  __int128 *v32;
  unint64_t v33;
  int v34;
  const void *v35;
  unint64_t v36;
  size_t v37;
  int v38;
  const void *v39;
  __int128 v40;
  const void *v41;
  const void **v42;
  __int128 v43;
  const void *v44;

  v2 = a2;
  v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = a2 - 3;
      v7 = *((char *)a2 - 1);
      if (v7 >= 0)
        v8 = a2 - 3;
      else
        v8 = (const void **)*(a2 - 3);
      if (v7 >= 0)
        v9 = *((unsigned __int8 *)a2 - 1);
      else
        v9 = (size_t)*(a2 - 2);
      v10 = *(char *)(a1 + 23);
      if (v10 >= 0)
        v11 = (const void *)a1;
      else
        v11 = *(const void **)a1;
      if (v10 >= 0)
        v12 = *(unsigned __int8 *)(a1 + 23);
      else
        v12 = *(_QWORD *)(a1 + 8);
      if (v12 >= v9)
        v13 = v9;
      else
        v13 = v12;
      v14 = memcmp(v8, v11, v13);
      if (v14)
      {
        if ((v14 & 0x80000000) == 0)
          return 1;
      }
      else if (v9 >= v12)
      {
        return 1;
      }
      v39 = *(const void **)(a1 + 16);
      v40 = *(_OWORD *)a1;
      v41 = v6[2];
      *(_OWORD *)a1 = *(_OWORD *)v6;
      *(_QWORD *)(a1 + 16) = v41;
      *(_OWORD *)v6 = v40;
      v6[2] = v39;
      return 1;
    case 3uLL:
      sub_210987F1C((const void **)a1, (const void **)(a1 + 24), a2 - 3);
      return 1;
    case 4uLL:
      sub_210988468(a1, (__int128 *)(a1 + 24), (__int128 *)(a1 + 48), a2 - 3);
      return 1;
    case 5uLL:
      sub_210988610(a1, a1 + 24, a1 + 48, (__int128 *)(a1 + 72), a2 - 3);
      return 1;
    default:
      v15 = (const void **)(a1 + 48);
      sub_210987F1C((const void **)a1, (const void **)(a1 + 24), (const void **)(a1 + 48));
      v16 = (const void **)(a1 + 72);
      if ((const void **)(a1 + 72) == v2)
        return 1;
      v17 = 0;
      v18 = 0;
      v42 = v2;
      break;
  }
  while (2)
  {
    v21 = *((char *)v16 + 23);
    if (v21 >= 0)
      v22 = v16;
    else
      v22 = *v16;
    if (v21 >= 0)
      v23 = *((unsigned __int8 *)v16 + 23);
    else
      v23 = (size_t)v16[1];
    v24 = *((char *)v15 + 23);
    if (v24 >= 0)
      v25 = v15;
    else
      v25 = *v15;
    if (v24 >= 0)
      v26 = *((unsigned __int8 *)v15 + 23);
    else
      v26 = (size_t)v15[1];
    if (v26 >= v23)
      v27 = v23;
    else
      v27 = v26;
    v28 = memcmp(v22, v25, v27);
    if (v28)
    {
      if ((v28 & 0x80000000) == 0)
        goto LABEL_25;
    }
    else if (v23 >= v26)
    {
      goto LABEL_25;
    }
    v43 = *(_OWORD *)v16;
    v44 = v16[2];
    *(_OWORD *)v16 = *(_OWORD *)v15;
    v16[2] = v15[2];
    *((_BYTE *)v15 + 23) = 0;
    *(_BYTE *)v15 = 0;
    v19 = a1;
    if (v15 == (const void **)a1)
      goto LABEL_24;
    v29 = v17;
    while (1)
    {
      v30 = a1 + v29;
      v31 = (_OWORD *)(a1 + v29 + 24);
      v32 = SHIBYTE(v44) >= 0 ? &v43 : (__int128 *)v43;
      v33 = SHIBYTE(v44) >= 0 ? HIBYTE(v44) : *((_QWORD *)&v43 + 1);
      v34 = *(char *)(v30 + 47);
      v35 = v34 >= 0 ? (const void *)(a1 + v29 + 24) : *(const void **)(a1 + v29 + 24);
      v36 = v34 >= 0 ? *(unsigned __int8 *)(v30 + 47) : *(_QWORD *)(v30 + 32);
      v37 = v36 >= v33 ? v33 : v36;
      v38 = memcmp(v32, v35, v37);
      if (!v38)
        break;
      if ((v38 & 0x80000000) == 0)
      {
        v19 = (uint64_t)v15;
        goto LABEL_23;
      }
LABEL_48:
      v15 -= 3;
      *(_OWORD *)(v30 + 48) = *v31;
      *(_QWORD *)(v30 + 64) = *(_QWORD *)(a1 + v29 + 40);
      *(_BYTE *)(v30 + 47) = 0;
      *(_BYTE *)v31 = 0;
      v29 -= 24;
      if (v29 == -48)
      {
        v19 = a1;
        goto LABEL_23;
      }
    }
    if (v33 < v36)
      goto LABEL_48;
    v19 = a1 + v29 + 48;
LABEL_23:
    v2 = v42;
LABEL_24:
    v20 = v43;
    *(_QWORD *)(v19 + 16) = v44;
    *(_OWORD *)v19 = v20;
    if (++v18 == 8)
      return v16 + 3 == v2;
LABEL_25:
    v15 = v16;
    v17 += 24;
    v16 += 3;
    if (v16 != v2)
      continue;
    return 1;
  }
}

__n128 sub_210988468(uint64_t a1, __int128 *a2, __int128 *a3, const void **a4)
{
  int v8;
  const void *v9;
  size_t v10;
  int v11;
  const void *v12;
  size_t v13;
  size_t v14;
  int v15;
  __n128 result;
  const void *v17;
  __int128 v18;
  const void *v19;
  int v20;
  const void *v21;
  size_t v22;
  int v23;
  const void *v24;
  size_t v25;
  size_t v26;
  int v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  int v31;
  const void *v32;
  size_t v33;
  int v34;
  const void *v35;
  size_t v36;
  size_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;

  sub_210987F1C((const void **)a1, (const void **)a2, (const void **)a3);
  v8 = *((char *)a4 + 23);
  if (v8 >= 0)
    v9 = a4;
  else
    v9 = *a4;
  if (v8 >= 0)
    v10 = *((unsigned __int8 *)a4 + 23);
  else
    v10 = (size_t)a4[1];
  v11 = *((char *)a3 + 23);
  if (v11 >= 0)
    v12 = a3;
  else
    v12 = *(const void **)a3;
  if (v11 >= 0)
    v13 = *((unsigned __int8 *)a3 + 23);
  else
    v13 = *((_QWORD *)a3 + 1);
  if (v13 >= v10)
    v14 = v10;
  else
    v14 = v13;
  v15 = memcmp(v9, v12, v14);
  if (v15)
  {
    if ((v15 & 0x80000000) == 0)
      return result;
  }
  else if (v10 >= v13)
  {
    return result;
  }
  v17 = (const void *)*((_QWORD *)a3 + 2);
  v18 = *a3;
  v19 = a4[2];
  *a3 = *(_OWORD *)a4;
  *((_QWORD *)a3 + 2) = v19;
  *(_OWORD *)a4 = v18;
  a4[2] = v17;
  v20 = *((char *)a3 + 23);
  if (v20 >= 0)
    v21 = a3;
  else
    v21 = *(const void **)a3;
  if (v20 >= 0)
    v22 = *((unsigned __int8 *)a3 + 23);
  else
    v22 = *((_QWORD *)a3 + 1);
  v23 = *((char *)a2 + 23);
  if (v23 >= 0)
    v24 = a2;
  else
    v24 = *(const void **)a2;
  if (v23 >= 0)
    v25 = *((unsigned __int8 *)a2 + 23);
  else
    v25 = *((_QWORD *)a2 + 1);
  if (v25 >= v22)
    v26 = v22;
  else
    v26 = v25;
  v27 = memcmp(v21, v24, v26);
  if (v27)
  {
    if ((v27 & 0x80000000) == 0)
      return result;
  }
  else if (v22 >= v25)
  {
    return result;
  }
  v28 = *((_QWORD *)a2 + 2);
  v29 = *a2;
  v30 = *((_QWORD *)a3 + 2);
  *a2 = *a3;
  *((_QWORD *)a2 + 2) = v30;
  *a3 = v29;
  *((_QWORD *)a3 + 2) = v28;
  v31 = *((char *)a2 + 23);
  if (v31 >= 0)
    v32 = a2;
  else
    v32 = *(const void **)a2;
  if (v31 >= 0)
    v33 = *((unsigned __int8 *)a2 + 23);
  else
    v33 = *((_QWORD *)a2 + 1);
  v34 = *(char *)(a1 + 23);
  if (v34 >= 0)
    v35 = (const void *)a1;
  else
    v35 = *(const void **)a1;
  if (v34 >= 0)
    v36 = *(unsigned __int8 *)(a1 + 23);
  else
    v36 = *(_QWORD *)(a1 + 8);
  if (v36 >= v33)
    v37 = v33;
  else
    v37 = v36;
  v38 = memcmp(v32, v35, v37);
  if (v38)
  {
    if (v38 < 0)
      goto LABEL_58;
  }
  else if (v33 < v36)
  {
LABEL_58:
    v39 = *(_QWORD *)(a1 + 16);
    result = *(__n128 *)a1;
    v40 = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 16) = v40;
    *a2 = (__int128)result;
    *((_QWORD *)a2 + 2) = v39;
  }
  return result;
}

__n128 sub_210988610(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, const void **a5)
{
  int v10;
  const void *v11;
  size_t v12;
  int v13;
  __int128 *v14;
  size_t v15;
  size_t v16;
  int v17;
  __n128 result;
  const void *v19;
  __int128 v20;
  const void *v21;
  int v22;
  __int128 *v23;
  size_t v24;
  int v25;
  const void *v26;
  size_t v27;
  size_t v28;
  int v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  const void *v34;
  size_t v35;
  int v36;
  const void *v37;
  size_t v38;
  size_t v39;
  int v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  int v44;
  const void *v45;
  size_t v46;
  int v47;
  const void *v48;
  size_t v49;
  size_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;

  sub_210988468(a1, (__int128 *)a2, (__int128 *)a3, (const void **)a4);
  v10 = *((char *)a5 + 23);
  if (v10 >= 0)
    v11 = a5;
  else
    v11 = *a5;
  if (v10 >= 0)
    v12 = *((unsigned __int8 *)a5 + 23);
  else
    v12 = (size_t)a5[1];
  v13 = *((char *)a4 + 23);
  if (v13 >= 0)
    v14 = a4;
  else
    v14 = *(__int128 **)a4;
  if (v13 >= 0)
    v15 = *((unsigned __int8 *)a4 + 23);
  else
    v15 = *((_QWORD *)a4 + 1);
  if (v15 >= v12)
    v16 = v12;
  else
    v16 = v15;
  v17 = memcmp(v11, v14, v16);
  if (v17)
  {
    if ((v17 & 0x80000000) == 0)
      return result;
  }
  else if (v12 >= v15)
  {
    return result;
  }
  v19 = (const void *)*((_QWORD *)a4 + 2);
  v20 = *a4;
  v21 = a5[2];
  *a4 = *(_OWORD *)a5;
  *((_QWORD *)a4 + 2) = v21;
  *(_OWORD *)a5 = v20;
  a5[2] = v19;
  v22 = *((char *)a4 + 23);
  if (v22 >= 0)
    v23 = a4;
  else
    v23 = *(__int128 **)a4;
  if (v22 >= 0)
    v24 = *((unsigned __int8 *)a4 + 23);
  else
    v24 = *((_QWORD *)a4 + 1);
  v25 = *(char *)(a3 + 23);
  if (v25 >= 0)
    v26 = (const void *)a3;
  else
    v26 = *(const void **)a3;
  if (v25 >= 0)
    v27 = *(unsigned __int8 *)(a3 + 23);
  else
    v27 = *(_QWORD *)(a3 + 8);
  if (v27 >= v24)
    v28 = v24;
  else
    v28 = v27;
  v29 = memcmp(v23, v26, v28);
  if (v29)
  {
    if ((v29 & 0x80000000) == 0)
      return result;
  }
  else if (v24 >= v27)
  {
    return result;
  }
  v30 = *(_QWORD *)(a3 + 16);
  v31 = *(_OWORD *)a3;
  v32 = *((_QWORD *)a4 + 2);
  *(_OWORD *)a3 = *a4;
  *(_QWORD *)(a3 + 16) = v32;
  *a4 = v31;
  *((_QWORD *)a4 + 2) = v30;
  v33 = *(char *)(a3 + 23);
  if (v33 >= 0)
    v34 = (const void *)a3;
  else
    v34 = *(const void **)a3;
  if (v33 >= 0)
    v35 = *(unsigned __int8 *)(a3 + 23);
  else
    v35 = *(_QWORD *)(a3 + 8);
  v36 = *(char *)(a2 + 23);
  if (v36 >= 0)
    v37 = (const void *)a2;
  else
    v37 = *(const void **)a2;
  if (v36 >= 0)
    v38 = *(unsigned __int8 *)(a2 + 23);
  else
    v38 = *(_QWORD *)(a2 + 8);
  if (v38 >= v35)
    v39 = v35;
  else
    v39 = v38;
  v40 = memcmp(v34, v37, v39);
  if (v40)
  {
    if ((v40 & 0x80000000) == 0)
      return result;
  }
  else if (v35 >= v38)
  {
    return result;
  }
  v41 = *(_QWORD *)(a2 + 16);
  v42 = *(_OWORD *)a2;
  v43 = *(_QWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_QWORD *)(a2 + 16) = v43;
  *(_OWORD *)a3 = v42;
  *(_QWORD *)(a3 + 16) = v41;
  v44 = *(char *)(a2 + 23);
  if (v44 >= 0)
    v45 = (const void *)a2;
  else
    v45 = *(const void **)a2;
  if (v44 >= 0)
    v46 = *(unsigned __int8 *)(a2 + 23);
  else
    v46 = *(_QWORD *)(a2 + 8);
  v47 = *(char *)(a1 + 23);
  if (v47 >= 0)
    v48 = (const void *)a1;
  else
    v48 = *(const void **)a1;
  if (v47 >= 0)
    v49 = *(unsigned __int8 *)(a1 + 23);
  else
    v49 = *(_QWORD *)(a1 + 8);
  if (v49 >= v46)
    v50 = v46;
  else
    v50 = v49;
  v51 = memcmp(v45, v48, v50);
  if (v51)
  {
    if ((v51 & 0x80000000) == 0)
      return result;
  }
  else if (v46 >= v49)
  {
    return result;
  }
  v52 = *(_QWORD *)(a1 + 16);
  result = *(__n128 *)a1;
  v53 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v53;
  *(__n128 *)a2 = result;
  *(_QWORD *)(a2 + 16) = v52;
  return result;
}

void sub_210988820(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  char *v9;
  void *v10;
  void *v11;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 == v2)
    {
      v1[1] = v2;
      operator delete(v5);
    }
    else
    {
      do
      {
        if (*(v4 - 8))
        {
          v6 = *((_QWORD *)v4 - 4);
          if (v6)
          {
            v7 = *((_QWORD *)v4 - 3);
            v8 = (void *)*((_QWORD *)v4 - 4);
            if (v7 != v6)
            {
              do
              {
                if (*(char *)(v7 - 1) < 0)
                  operator delete(*(void **)(v7 - 24));
                v7 -= 24;
              }
              while (v7 != v6);
              v8 = (void *)*((_QWORD *)v4 - 4);
            }
            *((_QWORD *)v4 - 3) = v6;
            operator delete(v8);
          }
        }
        v9 = v4 - 56;
        v10 = (void *)*((_QWORD *)v4 - 7);
        if (v10)
        {
          *((_QWORD *)v4 - 6) = v10;
          operator delete(v10);
        }
        v4 -= 56;
      }
      while (v9 != v2);
      v11 = **a1;
      v1[1] = v2;
      operator delete(v11);
    }
  }
}

_DWORD *sub_210988914(_DWORD ***a1)
{
  return sub_210988930(**a1, (char *)(*a1)[1]);
}

void sub_210988920(uint64_t a1, uint64_t a2)
{
  sub_210988A20((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

_DWORD *sub_210988930(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24CA82358[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_2108A4B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_210988A20(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_2108A4B7C();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24CA82358[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_2108B9228((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_210988BD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_2108ABF6C(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_210988C18(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_210988D10((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_2108A4B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_210988D08(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_210988D10(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_2108B327C();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_2108B2B1C();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_2108A4B7C();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_210988F0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2108B3680((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_210988F20(_QWORD *a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  char v19;

  v4 = a2 + 24;
  v17 = (_QWORD *)a2;
  v18 = (_QWORD *)(a2 + 24);
  v15 = 0;
  sub_210965CC0((uint64_t *)&v15, (uint64_t)&v17);
  v5 = a1[1];
  if (!v5)
    return 0;
  v6 = v15;
  v7 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    v8 = v15;
    if (v15 >= v5)
      v8 = v15 % v5;
  }
  else
  {
    v8 = (v5 - 1) & v15;
  }
  v9 = *(_QWORD **)(*a1 + 8 * v8);
  if (!v9)
    return 0;
  v10 = (_QWORD *)*v9;
  if (*v9)
  {
    if (v7.u32[0] < 2uLL)
    {
      v11 = v5 - 1;
      while (1)
      {
        v13 = v10[1];
        if (v6 == v13)
        {
          v17 = v10 + 2;
          v18 = v10 + 5;
          v15 = a2;
          v16 = v4;
          if (sub_2109867F8((uint64_t)&v19, (uint64_t)&v17, (uint64_t)&v15))
            return v10;
        }
        else if ((v13 & v11) != v8)
        {
          return 0;
        }
        v10 = (_QWORD *)*v10;
        if (!v10)
          return v10;
      }
    }
    do
    {
      v12 = v10[1];
      if (v6 == v12)
      {
        v17 = v10 + 2;
        v18 = v10 + 5;
        v15 = a2;
        v16 = v4;
        if (sub_2109867F8((uint64_t)&v19, (uint64_t)&v17, (uint64_t)&v15))
          return v10;
      }
      else
      {
        if (v12 >= v5)
          v12 %= v5;
        if (v12 != v8)
          return 0;
      }
      v10 = (_QWORD *)*v10;
    }
    while (v10);
  }
  return v10;
}

uint64_t *sub_210989088(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      if (*(_BYTE *)(v2 + 64))
      {
        v3 = *(_QWORD *)(v2 + 40);
        if (v3)
        {
          v4 = *(_QWORD *)(v2 + 48);
          v5 = *(void **)(v2 + 40);
          if (v4 != v3)
          {
            do
            {
              if (*(char *)(v4 - 1) < 0)
                operator delete(*(void **)(v4 - 24));
              v4 -= 24;
            }
            while (v4 != v3);
            v5 = *(void **)(v2 + 40);
          }
          *(_QWORD *)(v2 + 48) = v3;
          operator delete(v5);
        }
      }
      v6 = *(void **)(v2 + 16);
      if (v6)
      {
        *(_QWORD *)(v2 + 24) = v6;
        operator delete(v6);
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t sub_21098912C(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      if (*((_BYTE *)v2 + 64))
      {
        v6 = v2[5];
        if (v6)
        {
          v7 = v2[6];
          v8 = (void *)v2[5];
          if (v7 != v6)
          {
            do
            {
              if (*(char *)(v7 - 1) < 0)
                operator delete(*(void **)(v7 - 24));
              v7 -= 24;
            }
            while (v7 != v6);
            v8 = (void *)v2[5];
          }
          v2[6] = v6;
          operator delete(v8);
        }
      }
      v9 = (void *)v2[2];
      if (v9)
      {
        v2[3] = v9;
        operator delete(v9);
      }
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void sub_2109891EC(std::string *a1@<X8>)
{
  int v2;
  size_t v3;
  unint64_t v4;
  __int16 *v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  std::runtime_error *exception;
  std::string v10;
  std::string __p;
  std::string v12;
  char v13;
  _QWORD v14[2];
  _QWORD v15[11];
  char v16;
  uint64_t v17;
  _BYTE v18[46];
  __int16 v19;

  sub_210989578((std::string *)&v18[24], 256);
  v2 = SHIBYTE(v19);
  if (v19 >= 0)
    v3 = HIBYTE(v19);
  else
    v3 = *(_QWORD *)&v18[32];
  v4 = v3 + 46;
  if (v3 + 46 >= 0x7FFFFFFFFFFFFFF8)
    sub_2108A4B7C();
  if (v4 <= 0x16)
  {
    qmemcpy(v18, "CV3D_LearnedFeatures_Hardnet_Descriptor_Model/", sizeof(v18));
    v5 = &v19;
LABEL_10:
    if (v2 >= 0)
      v7 = &v18[24];
    else
      v7 = *(_BYTE **)&v18[24];
    memmove(v5, v7, v3);
    goto LABEL_14;
  }
  v6 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v4 | 7) != 0x17)
    v6 = v4 | 7;
  *(_QWORD *)&v18[8] = v3 + 46;
  *(_QWORD *)&v18[16] = (v6 + 1) | 0x8000000000000000;
  *(_QWORD *)v18 = operator new(v6 + 1);
  qmemcpy(*(void **)v18, "CV3D_LearnedFeatures_Hardnet_Descriptor_Model/", 46);
  v5 = (__int16 *)(*(_QWORD *)v18 + 46);
  if (v3)
    goto LABEL_10;
LABEL_14:
  *((_BYTE *)v5 + v3) = 0;
  sub_2108B18D0((uint64_t)v14);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_210A17950;
  strcpy(__p.__r_.__value_.__l.__data_, "com.apple.LearnedFeatures");
  sub_2109E971C((uint64_t)&__p, (std::string::size_type)v18, v15, 1, &v12);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (!v13)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_210989960(v14, &v10);
    sub_2108A5A38("Failed to access model resource path: ", &v10, &__p);
    std::runtime_error::runtime_error(exception, &__p);
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(a1, v12.__r_.__value_.__l.__data_, v12.__r_.__value_.__l.__size_);
    if (v13 && SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v12.__r_.__value_.__l.__data_);
  }
  else
  {
    *a1 = v12;
  }
  v14[0] = *MEMORY[0x24BEDB7F0];
  v8 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v14 + *(_QWORD *)(v14[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v15[0] = v8;
  v15[1] = MEMORY[0x24BEDB848] + 16;
  if (v16 < 0)
    operator delete((void *)v15[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BCC66C](&v17);
  if ((v18[23] & 0x80000000) == 0)
  {
    if ((v2 & 0x80000000) == 0)
      return;
LABEL_28:
    operator delete(*(void **)&v18[24]);
    return;
  }
  operator delete(*(void **)v18);
  if (v2 < 0)
    goto LABEL_28;
}

void sub_210989498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,int a29,__int16 a30,char a31,char a32)
{
  void *v32;
  int v33;
  int v34;
  uint64_t v35;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v33 & 1) == 0)
    {
LABEL_8:
      if (a28)
      {
        if (a27 < 0)
          operator delete(a22);
      }
      sub_2108B1A08((uint64_t)&a30);
      if (*(char *)(v35 - 73) < 0)
      {
        operator delete(*(void **)(v35 - 96));
        if ((v34 & 0x80000000) == 0)
LABEL_13:
          _Unwind_Resume(a1);
      }
      else if ((v34 & 0x80000000) == 0)
      {
        goto LABEL_13;
      }
      operator delete(*(void **)(v35 - 72));
      _Unwind_Resume(a1);
    }
  }
  else if (!v33)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v32);
  goto LABEL_8;
}

void sub_210989578(std::string *a1, int a2)
{
  int64x2_t v3;
  int8x16_t v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  void **v9;
  unint64_t v10;
  void **v11;
  unint64_t v12;
  void **v13;
  std::string::size_type size;
  std::string *v15;
  unint64_t v16;
  void **v17;
  std::string *v18;
  void *__p[2];
  unsigned __int8 v20;
  void *v21[2];
  unsigned __int8 v22;
  void *v23[2];
  unsigned __int8 v24;
  void *v25[2];
  unsigned __int8 v26;
  std::string v27;
  std::string v28;
  uint64_t v29;
  unsigned int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  void **v35;
  void **v36;
  void **v37;
  unint64_t v38;
  void **v39;
  unint64_t v40;
  std::string *v41;
  std::string::size_type v42;
  const char *v43;
  uint64_t v44;
  void **v45;
  unint64_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v33 = 32;
  v34 = a2;
  v31 = 8;
  v32 = 64;
  v29 = 0x700000003;
  v30 = 0;
  sub_210989D60((unsigned int *)&v29, (unsigned int *)&v29 + 1, &v30, &v35);
  sub_2108BA7B4((uint64_t)v35, (uint64_t)v36, "_", 1uLL, &v28, v3, v4);
  v5 = (uint64_t)v35;
  if (v35)
  {
    v6 = (uint64_t)v36;
    v7 = v35;
    if (v36 != v35)
    {
      do
      {
        if (*(char *)(v6 - 1) < 0)
          operator delete(*(void **)(v6 - 24));
        v6 -= 24;
      }
      while (v6 != v5);
      v7 = v35;
    }
    v36 = (void **)v5;
    operator delete(v7);
  }
  sub_210989EE0("p", &v33);
  v8 = v26;
  if ((v26 & 0x80u) == 0)
    v9 = v25;
  else
    v9 = (void **)v25[0];
  if ((v26 & 0x80u) != 0)
    v8 = (uint64_t)v25[1];
  v35 = v9;
  v36 = (void **)v8;
  sub_21098A01C(&v32, (std::string *)"u");
  v10 = v24;
  if ((v24 & 0x80u) == 0)
    v11 = v23;
  else
    v11 = (void **)v23[0];
  if ((v24 & 0x80u) != 0)
    v10 = (unint64_t)v23[1];
  v37 = v11;
  v38 = v10;
  sub_210989EE0("u", &v31);
  v12 = v22;
  if ((v22 & 0x80u) == 0)
    v13 = v21;
  else
    v13 = (void **)v21[0];
  if ((v22 & 0x80u) != 0)
    v12 = (unint64_t)v21[1];
  v39 = v13;
  v40 = v12;
  size = HIBYTE(v28.__r_.__value_.__r.__words[2]);
  v15 = &v28;
  if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
  {
    size = v28.__r_.__value_.__l.__size_;
    v15 = (std::string *)v28.__r_.__value_.__r.__words[0];
  }
  v41 = v15;
  v42 = size;
  v43 = "6aa24xpnhm";
  v44 = 10;
  sub_210989EE0("b", &v34);
  v16 = v20;
  if ((v20 & 0x80u) == 0)
    v17 = __p;
  else
    v17 = (void **)__p[0];
  if ((v20 & 0x80u) != 0)
    v16 = (unint64_t)__p[1];
  v45 = v17;
  v46 = v16;
  sub_2108BBA08((uint64_t)&v35, (uint64_t)&v47, "_", 1uLL, &v27);
  v18 = std::string::append(&v27, ".bundle", 7uLL);
  *a1 = *v18;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v27.__r_.__value_.__l.__data_);
    if (((char)v20 & 0x80000000) == 0)
    {
LABEL_33:
      if (((char)v22 & 0x80000000) == 0)
        goto LABEL_34;
      goto LABEL_40;
    }
  }
  else if (((char)v20 & 0x80000000) == 0)
  {
    goto LABEL_33;
  }
  operator delete(__p[0]);
  if (((char)v22 & 0x80000000) == 0)
  {
LABEL_34:
    if (((char)v24 & 0x80000000) == 0)
      goto LABEL_35;
    goto LABEL_41;
  }
LABEL_40:
  operator delete(v21[0]);
  if (((char)v24 & 0x80000000) == 0)
  {
LABEL_35:
    if (((char)v26 & 0x80000000) == 0)
      goto LABEL_36;
    goto LABEL_42;
  }
LABEL_41:
  operator delete(v23[0]);
  if (((char)v26 & 0x80000000) == 0)
  {
LABEL_36:
    if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_43:
    operator delete(v28.__r_.__value_.__l.__data_);
    return;
  }
LABEL_42:
  operator delete(v25[0]);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_43;
}

void sub_210989858(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (a39 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a21 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  if ((a21 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a27 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a16);
  if ((a27 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a33 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a22);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a45 & 0x80000000) == 0)
LABEL_14:
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a40);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a28);
  if ((a45 & 0x80000000) == 0)
    goto LABEL_14;
  goto LABEL_13;
}

_DWORD *sub_210989960@<X0>(_DWORD *result@<X0>, _BYTE *a2@<X8>)
{
  int v3;
  unint64_t v4;
  unint64_t v5;
  const void *v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;

  v3 = result[30];
  if ((v3 & 0x10) != 0)
  {
    v4 = *((_QWORD *)result + 14);
    v5 = *((_QWORD *)result + 9);
    if (v4 < v5)
    {
      *((_QWORD *)result + 14) = v5;
      v4 = v5;
    }
    v6 = (const void *)*((_QWORD *)result + 8);
    v7 = v4 - (_QWORD)v6;
    if (v4 - (unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_16;
  }
  else
  {
    if ((v3 & 8) == 0)
    {
      a2[23] = 0;
LABEL_4:
      *a2 = 0;
      return result;
    }
    v6 = (const void *)*((_QWORD *)result + 5);
    v7 = *((_QWORD *)result + 7) - (_QWORD)v6;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_16:
      sub_2108A4B7C();
  }
  if (v7 >= 0x17)
  {
    v8 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v8 = v7 | 7;
    v9 = v8 + 1;
    v10 = operator new(v8 + 1);
    *((_QWORD *)a2 + 1) = v7;
    *((_QWORD *)a2 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a2 = v10;
    a2 = v10;
  }
  else
  {
    a2[23] = v7;
    if (!v7)
      goto LABEL_4;
  }
  result = memmove(a2, v6, v7);
  a2[v7] = 0;
  return result;
}

void sub_210989A58(std::string *a1@<X8>)
{
  int v2;
  size_t v3;
  unint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  _BYTE *v7;
  int v8;
  int v9;
  uint64_t v10;
  void *__p;
  __int128 v12;
  std::string v13;
  unsigned __int8 v14;
  _QWORD v15[2];
  _QWORD v16[11];
  char v17;
  uint64_t v18;
  _BYTE v19[49];
  _BYTE v20[7];

  sub_210989578((std::string *)&v19[24], 512);
  v2 = v19[47];
  if (v19[47] >= 0)
    v3 = v19[47];
  else
    v3 = *(_QWORD *)&v19[32];
  v4 = v3 + 49;
  if (v3 + 49 >= 0x7FFFFFFFFFFFFFF8)
    sub_2108A4B7C();
  if (v4 <= 0x16)
  {
    qmemcpy(v19, "CV3D_LearnedFeatures_AtuHardnet_Descriptor_Model/", sizeof(v19));
    v5 = v20;
LABEL_10:
    if (v2 >= 0)
      v7 = &v19[24];
    else
      v7 = *(_BYTE **)&v19[24];
    memmove(v5, v7, v3);
    goto LABEL_14;
  }
  v6 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v4 | 7) != 0x17)
    v6 = v4 | 7;
  *(_QWORD *)&v19[8] = v3 + 49;
  *(_QWORD *)&v19[16] = (v6 + 1) | 0x8000000000000000;
  *(_QWORD *)v19 = operator new(v6 + 1);
  qmemcpy(*(void **)v19, "CV3D_LearnedFeatures_AtuHardnet_Descriptor_Model/", 49);
  v5 = (_BYTE *)(*(_QWORD *)v19 + 49);
  if (v3)
    goto LABEL_10;
LABEL_14:
  v5[v3] = 0;
  sub_2108B18D0((uint64_t)v15);
  __p = operator new(0x20uLL);
  v12 = xmmword_210A17950;
  strcpy((char *)__p, "com.apple.LearnedFeatures");
  sub_2109E971C((uint64_t)&__p, (std::string::size_type)v19, v16, 1, &v13);
  if ((SHIBYTE(v12) & 0x80000000) == 0)
  {
    if (v14)
      goto LABEL_16;
LABEL_19:
    a1->__r_.__value_.__s.__data_[0] = 0;
    a1[1].__r_.__value_.__s.__data_[0] = 0;
    goto LABEL_23;
  }
  operator delete(__p);
  if (!v14)
    goto LABEL_19;
LABEL_16:
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(a1, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
    v8 = v14;
    v9 = SHIBYTE(v13.__r_.__value_.__r.__words[2]);
    a1[1].__r_.__value_.__s.__data_[0] = 1;
    if (v8 && v9 < 0)
      operator delete(v13.__r_.__value_.__l.__data_);
  }
  else
  {
    *a1 = v13;
    a1[1].__r_.__value_.__s.__data_[0] = 1;
  }
LABEL_23:
  v15[0] = *MEMORY[0x24BEDB7F0];
  v10 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v15 + *(_QWORD *)(v15[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v16[0] = v10;
  v16[1] = MEMORY[0x24BEDB848] + 16;
  if (v17 < 0)
    operator delete((void *)v16[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BCC66C](&v18);
  if ((v19[23] & 0x80000000) == 0)
  {
    if ((v2 & 0x80000000) == 0)
      return;
LABEL_29:
    operator delete(*(void **)&v19[24]);
    return;
  }
  operator delete(*(void **)v19);
  if (v2 < 0)
    goto LABEL_29;
}

void sub_210989CDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  int v25;
  uint64_t v26;

  if (a21)
  {
    if (a20 < 0)
      operator delete(__p);
  }
  sub_2108B1A08((uint64_t)&a23);
  if (*(char *)(v26 - 73) < 0)
  {
    operator delete(*(void **)(v26 - 96));
    if ((v25 & 0x80000000) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if ((v25 & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(*(void **)(v26 - 72));
  _Unwind_Resume(a1);
}

void sub_210989D60(unsigned int *a1@<X0>, unsigned int *a2@<X1>, unsigned int *a3@<X2>, _QWORD *a4@<X8>)
{
  void *v7;
  char v8;
  void *v9;
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  sub_21098A198(a1);
  sub_21098A198(a2);
  sub_21098A198(a3);
  sub_2108B9228(a4, (uint64_t)&v7, 3uLL);
  if (v12 < 0)
  {
    operator delete(__p);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v8 & 0x80000000) == 0)
        return;
LABEL_7:
      operator delete(v7);
      return;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v9);
  if (v8 < 0)
    goto LABEL_7;
}

void sub_210989E58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a14 & 0x80000000) == 0)
LABEL_8:
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(a9);
      _Unwind_Resume(exception_object);
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  if ((a14 & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

void sub_210989EB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v9;

  while (1)
  {
    if (*((char *)v9 - 1) < 0)
      operator delete((void *)*(v9 - 3));
    v9 -= 3;
    if (v9 == &a9)
      JUMPOUT(0x210989EACLL);
  }
}

uint64_t sub_210989EE0(char *__s, int *a2)
{
  uint64_t result;
  _DWORD v4[6];
  int v5;
  std::string v6;
  _QWORD v7[5];
  _QWORD *v8;

  v5 = 0;
  sub_21090BD70(v4, __s);
  std::to_string(&v6, *a2);
  v7[0] = v4;
  v7[1] = &v6;
  v7[2] = v4;
  v7[3] = &v6;
  v7[4] = &v6;
  if (v5 == -1)
    sub_2108B9060();
  v8 = v7;
  ((void (*)(_QWORD **, _DWORD *))off_24CA82370[v5])(&v8, v4);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  if (v5 == -1)
    sub_2108B9060();
  v7[0] = &v6;
  result = ((uint64_t (*)(_QWORD *, _DWORD *))off_24CA823A0[v5])(v7, v4);
  if (v5 != -1)
    return ((uint64_t (*)(_QWORD *, _DWORD *))off_24CA82388[v5])(v7, v4);
  return result;
}

void sub_210989FDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2108B9008((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_210989FF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    sub_2108B9008((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x210989FE8);
}

uint64_t sub_21098A01C(int *a1, std::string *a2)
{
  uint64_t result;
  _BYTE v4[24];
  int v5;
  std::string v6;
  std::string **v7;
  std::string *v8;
  std::string *v9;
  _BYTE *v10;
  std::string *v11;
  std::string *v12;

  v5 = 0;
  std::to_string(&v6, *a1);
  v8 = (std::string *)v4;
  v9 = &v6;
  v10 = v4;
  v11 = &v6;
  v12 = &v6;
  v7 = &v8;
  ((void (*)(std::string ***, _BYTE *))sub_2108BA52C)(&v7, v4);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  v8 = (std::string *)v4;
  v9 = a2;
  v10 = v4;
  v11 = a2;
  v12 = a2;
  if (v5 == -1)
    sub_2108B9060();
  v6.__r_.__value_.__r.__words[0] = (std::string::size_type)&v8;
  ((void (*)(std::string *, _BYTE *))off_24CA823B8[v5])(&v6, v4);
  if (v5 == -1)
    sub_2108B9060();
  v8 = &v6;
  result = ((uint64_t (*)(std::string **, _BYTE *))off_24CA823A0[v5])(&v8, v4);
  if (v5 != -1)
    return ((uint64_t (*)(std::string **, _BYTE *))off_24CA82388[v5])(&v8, v4);
  return result;
}

void sub_21098A158(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2108B9008((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21098A174(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    sub_2108B9008((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x21098A164);
}

uint64_t sub_21098A198(unsigned int *a1)
{
  uint64_t result;
  _BYTE v2[24];
  int v3;
  std::string v4;
  _QWORD v5[5];
  _QWORD *v6;

  v3 = 0;
  std::to_string(&v4, *a1);
  v5[0] = v2;
  v5[1] = &v4;
  v5[2] = v2;
  v5[3] = &v4;
  v5[4] = &v4;
  v6 = v5;
  ((void (*)(_QWORD **, _BYTE *))sub_2108BA52C)(&v6, v2);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  if (v3 == -1)
    sub_2108B9060();
  v5[0] = &v4;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24CA823A0[v3])(v5, v2);
  if (v3 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24CA82388[v3])(v5, v2);
  return result;
}

void sub_21098A284(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2108B9008((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21098A29C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  sub_2108B9008((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_21098A2C0(std::string *a1@<X8>)
{
  int64x2_t v2;
  int8x16_t v3;
  void **v4;
  void **v5;
  void *v6;
  std::string::size_type size;
  std::string *v8;
  std::string::size_type v9;
  std::string *v10;
  unint64_t v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  unint64_t v15;
  void **v16;
  std::string *v17;
  int v18;
  size_t v19;
  unint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  std::string *v25;
  std::string *v26;
  std::runtime_error *exception;
  std::string v28;
  char v29;
  std::string v30;
  std::string::value_type __s[8];
  char v32;
  void *v33[2];
  unsigned __int8 v34;
  void *v35[2];
  unsigned __int8 v36;
  std::string v37;
  std::string v38;
  _BYTE v39[40];
  unsigned int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  void *__p;
  void **v46;
  std::string *v47;
  uint64_t v48;
  void **v49;
  unint64_t v50;
  std::string *v51;
  std::string::size_type v52;
  const char *v53;
  uint64_t v54;
  void **v55;
  void *v56;
  _BYTE v57[32];
  _QWORD v58[20];

  v58[19] = *MEMORY[0x24BDAC8D0];
  v43 = 64;
  v44 = 32;
  v41 = 256;
  v42 = 32;
  *(_QWORD *)&v39[32] = 2;
  v40 = 0;
  sub_210989D60((unsigned int *)&v39[32], (unsigned int *)&v39[36], &v40, &__p);
  sub_2108BA7B4((uint64_t)__p, (uint64_t)v46, "_", 1uLL, &v28, v2, v3);
  v4 = (void **)__p;
  if (__p)
  {
    v5 = v46;
    v6 = __p;
    if (v46 != __p)
    {
      do
      {
        if (*((char *)v5 - 1) < 0)
          operator delete(*(v5 - 3));
        v5 -= 3;
      }
      while (v5 != v4);
      v6 = __p;
    }
    v46 = v4;
    operator delete(v6);
  }
  sub_210989EE0("p", &v44);
  size = HIBYTE(v38.__r_.__value_.__r.__words[2]);
  if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = &v38;
  else
    v8 = (std::string *)v38.__r_.__value_.__r.__words[0];
  if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v38.__r_.__value_.__l.__size_;
  __p = v8;
  v46 = (void **)size;
  sub_21098A01C(&v43, (std::string *)"f");
  v9 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
  if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = &v37;
  else
    v10 = (std::string *)v37.__r_.__value_.__r.__words[0];
  if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v9 = v37.__r_.__value_.__l.__size_;
  v47 = v10;
  v48 = v9;
  sub_21098AA30("fp", &v42);
  v11 = v36;
  if ((v36 & 0x80u) == 0)
    v12 = v35;
  else
    v12 = (void **)v35[0];
  if ((v36 & 0x80u) != 0)
    v11 = (unint64_t)v35[1];
  v49 = v12;
  v50 = v11;
  v13 = HIBYTE(v28.__r_.__value_.__r.__words[2]);
  v14 = &v28;
  if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
  {
    v13 = v28.__r_.__value_.__l.__size_;
    v14 = (std::string *)v28.__r_.__value_.__r.__words[0];
  }
  v51 = v14;
  v52 = v13;
  v53 = "aspdesc";
  v54 = 7;
  sub_210989EE0("b", &v41);
  v15 = v34;
  if ((v34 & 0x80u) == 0)
    v16 = v33;
  else
    v16 = (void **)v33[0];
  if ((v34 & 0x80u) != 0)
    v15 = (unint64_t)v33[1];
  v55 = v16;
  v56 = (void *)v15;
  sub_2108BBA08((uint64_t)&__p, (uint64_t)v57, "_", 1uLL, (std::string *)v39);
  v32 = 7;
  strcpy(__s, ".bundle");
  v17 = std::string::append((std::string *)v39, __s, 7uLL);
  v30 = *v17;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  if (v32 < 0)
  {
    operator delete(*(void **)__s);
    if ((v39[23] & 0x80000000) == 0)
    {
LABEL_33:
      if (((char)v34 & 0x80000000) == 0)
        goto LABEL_34;
      goto LABEL_58;
    }
  }
  else if ((v39[23] & 0x80000000) == 0)
  {
    goto LABEL_33;
  }
  operator delete(*(void **)v39);
  if (((char)v34 & 0x80000000) == 0)
  {
LABEL_34:
    if (((char)v36 & 0x80000000) == 0)
      goto LABEL_35;
    goto LABEL_59;
  }
LABEL_58:
  operator delete(v33[0]);
  if (((char)v36 & 0x80000000) == 0)
  {
LABEL_35:
    if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_36;
    goto LABEL_60;
  }
LABEL_59:
  operator delete(v35[0]);
  if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_36:
    if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_37;
LABEL_61:
    operator delete(v38.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_38;
    goto LABEL_62;
  }
LABEL_60:
  operator delete(v37.__r_.__value_.__l.__data_);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_61;
LABEL_37:
  if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_38;
LABEL_62:
  operator delete(v28.__r_.__value_.__l.__data_);
LABEL_38:
  v18 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v19 = HIBYTE(v30.__r_.__value_.__r.__words[2]);
  else
    v19 = v30.__r_.__value_.__l.__size_;
  v20 = v19 + 35;
  if (v19 + 35 >= 0x7FFFFFFFFFFFFFF8)
    sub_2108A4B7C();
  if (v20 <= 0x16)
  {
    qmemcpy(v39, "CV3D_LearnedFeatures_AspDesc_Model/", 35);
    v21 = &v39[35];
LABEL_47:
    if (v18 >= 0)
      v25 = &v30;
    else
      v25 = (std::string *)v30.__r_.__value_.__r.__words[0];
    memmove(v21, v25, v19);
    goto LABEL_51;
  }
  v22 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v20 | 7) != 0x17)
    v22 = v20 | 7;
  v23 = v22 + 1;
  v24 = (char *)operator new(v22 + 1);
  *(_QWORD *)&v39[8] = v19 + 35;
  *(_QWORD *)&v39[16] = v23 | 0x8000000000000000;
  *(_QWORD *)v39 = v24;
  qmemcpy(v24, "CV3D_LearnedFeatures_AspDesc_Model/", 35);
  v21 = v24 + 35;
  if (v19)
    goto LABEL_47;
LABEL_51:
  v21[v19] = 0;
  sub_2108B18D0((uint64_t)&__p);
  v38.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&v38.__r_.__value_.__r.__words[1] = xmmword_210A17950;
  strcpy(v38.__r_.__value_.__l.__data_, "com.apple.LearnedFeatures");
  sub_2109E971C((uint64_t)&v38, (std::string::size_type)v39, &v47, 1, &v28);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (!v29)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_210989960(&__p, &v37);
    sub_2108A5A38("Failed to access model resource path: ", &v37, &v38);
    std::runtime_error::runtime_error(exception, &v38);
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(a1, v28.__r_.__value_.__l.__data_, v28.__r_.__value_.__l.__size_);
    if (v29 && SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v28.__r_.__value_.__l.__data_);
  }
  else
  {
    *a1 = v28;
  }
  __p = (void *)*MEMORY[0x24BEDB7F0];
  v26 = *(std::string **)(MEMORY[0x24BEDB7F0] + 72);
  *(void **)((char *)&__p + *((_QWORD *)__p - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
  v47 = v26;
  v48 = MEMORY[0x24BEDB848] + 16;
  if ((v57[15] & 0x80000000) != 0)
    operator delete(v56);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BCC66C](v58);
  if ((v39[23] & 0x80000000) == 0)
  {
    if ((v18 & 0x80000000) == 0)
      return;
LABEL_72:
    operator delete(v30.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(*(void **)v39);
  if (v18 < 0)
    goto LABEL_72;
}

void sub_21098A848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  void *v60;
  int v61;
  int v62;

  if (a48 < 0)
    operator delete(__p);
  if (a42 < 0)
  {
    operator delete(a37);
    if ((v61 & 1) == 0)
      goto LABEL_8;
  }
  else if (!v61)
  {
LABEL_8:
    if (a15 && a14 < 0)
      operator delete(a9);
    sub_2108B1A08((uint64_t)&a60);
    if (a54 < 0)
      operator delete(a49);
    if (v62 < 0)
      operator delete(a16);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v60);
  goto LABEL_8;
}

uint64_t sub_21098AA30(char *__s, int *a2)
{
  uint64_t result;
  _DWORD v4[6];
  int v5;
  std::string v6;
  _QWORD v7[5];
  _QWORD *v8;

  v5 = 0;
  sub_210988930(v4, __s);
  std::to_string(&v6, *a2);
  v7[0] = v4;
  v7[1] = &v6;
  v7[2] = v4;
  v7[3] = &v6;
  v7[4] = &v6;
  if (v5 == -1)
    sub_2108B9060();
  v8 = v7;
  ((void (*)(_QWORD **, _DWORD *))off_24CA823D0[v5])(&v8, v4);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  if (v5 == -1)
    sub_2108B9060();
  v7[0] = &v6;
  result = ((uint64_t (*)(_QWORD *, _DWORD *))off_24CA82400[v5])(v7, v4);
  if (v5 != -1)
    return ((uint64_t (*)(_QWORD *, _DWORD *))off_24CA823E8[v5])(v7, v4);
  return result;
}

void sub_21098AB2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2108B9008((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21098AB48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    sub_2108B9008((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x21098AB38);
}

void sub_21098AB6C(std::string *a1@<X8>)
{
  int64x2_t v2;
  int8x16_t v3;
  void **v4;
  void **v5;
  void *v6;
  std::string::size_type size;
  std::string *v8;
  std::string::size_type v9;
  std::string *v10;
  unint64_t v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  unint64_t v15;
  void **v16;
  std::string *v17;
  int v18;
  size_t v19;
  unint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  std::string *v25;
  std::string *v26;
  std::runtime_error *exception;
  std::string v28;
  char v29;
  std::string v30;
  void *v31[2];
  unsigned __int8 v32;
  void *v33[2];
  unsigned __int8 v34;
  std::string v35;
  std::string v36;
  _BYTE v37[40];
  unsigned int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  void *__p;
  void **v44;
  std::string *v45;
  uint64_t v46;
  void **v47;
  unint64_t v48;
  std::string *v49;
  std::string::size_type v50;
  const char *v51;
  uint64_t v52;
  void **v53;
  void *v54;
  _BYTE v55[32];
  _QWORD v56[20];

  v56[19] = *MEMORY[0x24BDAC8D0];
  v41 = 128;
  v42 = 32;
  v39 = 256;
  v40 = 32;
  *(_QWORD *)&v37[32] = 2;
  v38 = 0;
  sub_210989D60((unsigned int *)&v37[32], (unsigned int *)&v37[36], &v38, &__p);
  sub_2108BA7B4((uint64_t)__p, (uint64_t)v44, "_", 1uLL, &v28, v2, v3);
  v4 = (void **)__p;
  if (__p)
  {
    v5 = v44;
    v6 = __p;
    if (v44 != __p)
    {
      do
      {
        if (*((char *)v5 - 1) < 0)
          operator delete(*(v5 - 3));
        v5 -= 3;
      }
      while (v5 != v4);
      v6 = __p;
    }
    v44 = v4;
    operator delete(v6);
  }
  sub_210989EE0("p", &v42);
  size = HIBYTE(v36.__r_.__value_.__r.__words[2]);
  if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = &v36;
  else
    v8 = (std::string *)v36.__r_.__value_.__r.__words[0];
  if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v36.__r_.__value_.__l.__size_;
  __p = v8;
  v44 = (void **)size;
  sub_21098A01C(&v41, (std::string *)"f");
  v9 = HIBYTE(v35.__r_.__value_.__r.__words[2]);
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = &v35;
  else
    v10 = (std::string *)v35.__r_.__value_.__r.__words[0];
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v9 = v35.__r_.__value_.__l.__size_;
  v45 = v10;
  v46 = v9;
  sub_21098AA30("fp", &v40);
  v11 = v34;
  if ((v34 & 0x80u) == 0)
    v12 = v33;
  else
    v12 = (void **)v33[0];
  if ((v34 & 0x80u) != 0)
    v11 = (unint64_t)v33[1];
  v47 = v12;
  v48 = v11;
  v13 = HIBYTE(v28.__r_.__value_.__r.__words[2]);
  v14 = &v28;
  if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
  {
    v13 = v28.__r_.__value_.__l.__size_;
    v14 = (std::string *)v28.__r_.__value_.__r.__words[0];
  }
  v49 = v14;
  v50 = v13;
  v51 = "aspctxdesc";
  v52 = 10;
  sub_210989EE0("b", &v39);
  v15 = v32;
  if ((v32 & 0x80u) == 0)
    v16 = v31;
  else
    v16 = (void **)v31[0];
  if ((v32 & 0x80u) != 0)
    v15 = (unint64_t)v31[1];
  v53 = v16;
  v54 = (void *)v15;
  sub_2108BBA08((uint64_t)&__p, (uint64_t)v55, "_", 1uLL, (std::string *)v37);
  v17 = std::string::append((std::string *)v37, ".espresso.net", 0xDuLL);
  v30 = *v17;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  if ((v37[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v37);
    if (((char)v32 & 0x80000000) == 0)
    {
LABEL_33:
      if (((char)v34 & 0x80000000) == 0)
        goto LABEL_34;
      goto LABEL_57;
    }
  }
  else if (((char)v32 & 0x80000000) == 0)
  {
    goto LABEL_33;
  }
  operator delete(v31[0]);
  if (((char)v34 & 0x80000000) == 0)
  {
LABEL_34:
    if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_35;
    goto LABEL_58;
  }
LABEL_57:
  operator delete(v33[0]);
  if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_35:
    if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_36;
LABEL_59:
    operator delete(v36.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_37;
    goto LABEL_60;
  }
LABEL_58:
  operator delete(v35.__r_.__value_.__l.__data_);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_59;
LABEL_36:
  if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_37;
LABEL_60:
  operator delete(v28.__r_.__value_.__l.__data_);
LABEL_37:
  v18 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v19 = HIBYTE(v30.__r_.__value_.__r.__words[2]);
  else
    v19 = v30.__r_.__value_.__l.__size_;
  v20 = v19 + 38;
  if (v19 + 38 >= 0x7FFFFFFFFFFFFFF8)
    sub_2108A4B7C();
  if (v20 <= 0x16)
  {
    qmemcpy(v37, "CV3D_LearnedFeatures_AspCtxDesc_Model/", 38);
    v21 = &v37[38];
LABEL_46:
    if (v18 >= 0)
      v25 = &v30;
    else
      v25 = (std::string *)v30.__r_.__value_.__r.__words[0];
    memmove(v21, v25, v19);
    goto LABEL_50;
  }
  v22 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v20 | 7) != 0x17)
    v22 = v20 | 7;
  v23 = v22 + 1;
  v24 = (char *)operator new(v22 + 1);
  *(_QWORD *)&v37[8] = v19 + 38;
  *(_QWORD *)&v37[16] = v23 | 0x8000000000000000;
  *(_QWORD *)v37 = v24;
  qmemcpy(v24, "CV3D_LearnedFeatures_AspCtxDesc_Model/", 38);
  v21 = v24 + 38;
  if (v19)
    goto LABEL_46;
LABEL_50:
  v21[v19] = 0;
  sub_2108B18D0((uint64_t)&__p);
  v36.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&v36.__r_.__value_.__r.__words[1] = xmmword_210A17950;
  strcpy(v36.__r_.__value_.__l.__data_, "com.apple.LearnedFeatures");
  sub_2109E971C((uint64_t)&v36, (std::string::size_type)v37, &v45, 1, &v28);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  if (!v29)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_210989960(&__p, &v35);
    sub_2108A5A38("Failed to access model resource path: ", &v35, &v36);
    std::runtime_error::runtime_error(exception, &v36);
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(a1, v28.__r_.__value_.__l.__data_, v28.__r_.__value_.__l.__size_);
    if (v29 && SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v28.__r_.__value_.__l.__data_);
  }
  else
  {
    *a1 = v28;
  }
  __p = (void *)*MEMORY[0x24BEDB7F0];
  v26 = *(std::string **)(MEMORY[0x24BEDB7F0] + 72);
  *(void **)((char *)&__p + *((_QWORD *)__p - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
  v45 = v26;
  v46 = MEMORY[0x24BEDB848] + 16;
  if ((v55[15] & 0x80000000) != 0)
    operator delete(v54);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BCC66C](v56);
  if ((v37[23] & 0x80000000) == 0)
  {
    if ((v18 & 0x80000000) == 0)
      return;
LABEL_70:
    operator delete(v30.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(*(void **)v37);
  if (v18 < 0)
    goto LABEL_70;
}

void sub_21098B0B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  void *v55;
  int v56;
  int v57;

  if (a43 < 0)
    operator delete(__p);
  if (a37 < 0)
  {
    operator delete(a32);
    if ((v56 & 1) == 0)
      goto LABEL_8;
  }
  else if (!v56)
  {
LABEL_8:
    if (a15 && a14 < 0)
      operator delete(a9);
    sub_2108B1A08((uint64_t)&a55);
    if (a49 < 0)
      operator delete(a44);
    if (v57 < 0)
      operator delete(a16);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v55);
  goto LABEL_8;
}

uint64_t sub_21098B284(uint64_t a1, uint64_t a2, __int128 *a3, __int128 *a4, _DWORD *a5, uint64_t a6)
{
  __int128 v7;
  __int128 v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int8x8_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  int v21;
  __int16 v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;

  v7 = *a3;
  *(_DWORD *)(a1 + 16) = *((_DWORD *)a3 + 4);
  *(_OWORD *)a1 = v7;
  if (*((_BYTE *)a4 + 20))
  {
    v8 = *a4;
    *(_DWORD *)(a1 + 36) = *((_DWORD *)a4 + 4);
    *(_OWORD *)(a1 + 20) = v8;
  }
  else
  {
    v9 = *(_DWORD *)a3;
    v10 = *((_DWORD *)a3 + 1);
    if (v10)
      v11 = *(_DWORD *)a3;
    else
      v11 = 0;
    *(_DWORD *)(a1 + 20) = *(_DWORD *)a3 != 0;
    *(_DWORD *)(a1 + 24) = v11;
    v12 = v10 * v9;
    v13 = *((_DWORD *)a3 + 2);
    if (v13)
      v14 = v12;
    else
      v14 = 0;
    *(_DWORD *)(a1 + 28) = v14;
    v15.i32[0] = v13 * v12;
    v15.i32[1] = *(_QWORD *)((char *)a3 + 12) * v13 * v12;
    *(int8x8_t *)(a1 + 32) = vbic_s8(v15, (int8x8_t)vceqz_s32(*(int32x2_t *)((char *)a3 + 12)));
  }
  *(_QWORD *)(a1 + 40) = a2;
  *(_DWORD *)(a1 + 48) = *a5;
  *(_BYTE *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  if (*(_BYTE *)(a6 + 56))
  {
    *(_QWORD *)(a1 + 56) = &off_24CA7A158;
    v16 = *(_QWORD *)(a6 + 8);
    v17 = *(std::__shared_weak_count **)(a6 + 16);
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldxr(p_shared_owners);
      while (__stxr(v19 + 1, p_shared_owners));
      v20 = *(_QWORD *)(a6 + 40);
      v21 = *(_DWORD *)(a6 + 48);
      v22 = *(_WORD *)(a6 + 52);
      do
        v23 = __ldxr(p_shared_owners);
      while (__stxr(v23 + 1, p_shared_owners));
    }
    else
    {
      v20 = *(_QWORD *)(a6 + 40);
      v21 = *(_DWORD *)(a6 + 48);
      v22 = *(_WORD *)(a6 + 52);
    }
    *(_QWORD *)(a1 + 64) = v16;
    *(_QWORD *)(a1 + 72) = v17;
    v24 = *(_QWORD *)(a6 + 24);
    *(_DWORD *)(a1 + 88) = *(_DWORD *)(a6 + 32);
    *(_QWORD *)(a1 + 80) = v24;
    *(_QWORD *)(a1 + 96) = v20;
    *(_DWORD *)(a1 + 104) = v21;
    *(_WORD *)(a1 + 108) = v22;
    if (v17)
    {
      v25 = (unint64_t *)&v17->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    *(_BYTE *)(a1 + 112) = 1;
  }
  return a1;
}

uint64_t sub_21098B3F0(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_21098B458(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_21098B4C0(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_21098B528(uint64_t a1, uint64_t a2, __int128 *a3, __int128 *a4, _DWORD *a5, uint64_t a6)
{
  __int128 v7;
  __int128 v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int8x8_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  int v21;
  __int16 v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;

  v7 = *a3;
  *(_DWORD *)(a1 + 16) = *((_DWORD *)a3 + 4);
  *(_OWORD *)a1 = v7;
  if (*((_BYTE *)a4 + 20))
  {
    v8 = *a4;
    *(_DWORD *)(a1 + 36) = *((_DWORD *)a4 + 4);
    *(_OWORD *)(a1 + 20) = v8;
  }
  else
  {
    v9 = *(_DWORD *)a3;
    v10 = *((_DWORD *)a3 + 1);
    if (v10)
      v11 = *(_DWORD *)a3;
    else
      v11 = 0;
    *(_DWORD *)(a1 + 20) = *(_DWORD *)a3 != 0;
    *(_DWORD *)(a1 + 24) = v11;
    v12 = v10 * v9;
    v13 = *((_DWORD *)a3 + 2);
    if (v13)
      v14 = v12;
    else
      v14 = 0;
    *(_DWORD *)(a1 + 28) = v14;
    v15.i32[0] = v13 * v12;
    v15.i32[1] = *(_QWORD *)((char *)a3 + 12) * v13 * v12;
    *(int8x8_t *)(a1 + 32) = vbic_s8(v15, (int8x8_t)vceqz_s32(*(int32x2_t *)((char *)a3 + 12)));
  }
  *(_QWORD *)(a1 + 40) = a2;
  *(_DWORD *)(a1 + 48) = *a5;
  *(_BYTE *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  if (*(_BYTE *)(a6 + 56))
  {
    *(_QWORD *)(a1 + 56) = &off_24CA79890;
    v16 = *(_QWORD *)(a6 + 8);
    v17 = *(std::__shared_weak_count **)(a6 + 16);
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldxr(p_shared_owners);
      while (__stxr(v19 + 1, p_shared_owners));
      v20 = *(_QWORD *)(a6 + 40);
      v21 = *(_DWORD *)(a6 + 48);
      v22 = *(_WORD *)(a6 + 52);
      do
        v23 = __ldxr(p_shared_owners);
      while (__stxr(v23 + 1, p_shared_owners));
    }
    else
    {
      v20 = *(_QWORD *)(a6 + 40);
      v21 = *(_DWORD *)(a6 + 48);
      v22 = *(_WORD *)(a6 + 52);
    }
    *(_QWORD *)(a1 + 64) = v16;
    *(_QWORD *)(a1 + 72) = v17;
    v24 = *(_QWORD *)(a6 + 24);
    *(_DWORD *)(a1 + 88) = *(_DWORD *)(a6 + 32);
    *(_QWORD *)(a1 + 80) = v24;
    *(_QWORD *)(a1 + 96) = v20;
    *(_DWORD *)(a1 + 104) = v21;
    *(_WORD *)(a1 + 108) = v22;
    if (v17)
    {
      v25 = (unint64_t *)&v17->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    *(_BYTE *)(a1 + 112) = 1;
  }
  return a1;
}

uint64_t sub_21098B69C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_21098B704(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_21098B76C(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  char *v16;
  BOOL v17;
  unint64_t v18;
  unint64_t v19;
  BOOL v20;
  unint64_t v21;
  __int128 v22;
  unint64_t *v23;
  unint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  __int16 v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  BOOL v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  BOOL v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  int v48;
  uint64_t v49;
  BOOL v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  unint64_t v57;
  int v58;
  unsigned int v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  BOOL v63;
  BOOL v64;
  unint64_t v65;
  int v66;
  unint64_t v67;
  int v68;
  unint64_t v69;
  unsigned int v70;
  uint64_t v71;
  unint64_t v72;
  BOOL v73;
  uint64_t v74;
  int v75;
  BOOL v76;
  unint64_t v77;
  unint64_t v78;
  int v79;
  uint64_t v80;
  BOOL v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  BOOL v90;
  unint64_t v91;
  unint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t (**v95)();
  __int128 v96;
  uint64_t v97;
  unint64_t v98;
  int v99;
  int v100;
  __int16 v101;
  unint64_t v102;
  __int128 v103;
  unint64_t v104;
  _BYTE v105[12];
  uint64_t v106;

  v106 = *MEMORY[0x24BDAC8D0];
  v8 = *(_DWORD *)(a1 + 48);
  if ((v8 & 0x10) != 0)
  {
    sub_2108C0534(a1, (uint64_t)&v95);
    v15 = v98;
    v16 = (char *)v95 + (v99 * a2 + v100 * a3);
    if (DWORD1(v96))
      v17 = HIDWORD(*(_QWORD *)((char *)&v96 + 4)) == 0;
    else
      v17 = 1;
    if (v17)
      v18 = 0;
    else
      v18 = *(_QWORD *)((char *)&v96 + 4);
    *(_QWORD *)&v103 = v16;
    *((_QWORD *)&v103 + 1) = v18;
    v104 = v98;
    v19 = HIDWORD(v98);
    if (HIDWORD(v18) * HIDWORD(v98) != -1
      || !sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
    {
      switch(*(_DWORD *)(a1 + 48))
      {
        case 0x10:
        case 0x11:
          *(_QWORD *)v105 = v16;
          v95 = &off_24CA79B48;
          if (HIDWORD(v18))
            v20 = (_DWORD)v18 == 0;
          else
            v20 = 1;
          v21 = v15 & 0xFFFFFFFF00000000;
          if (v20)
            v21 = 0;
          v102 = v21 | ((_DWORD)v18 != 0);
          sub_210975C5C(v105, (_DWORD *)&v103 + 2, (uint64_t *)&v102, (uint64_t)&v96);
          *(_QWORD *)a4 = &off_24CA79890;
          v22 = v96;
          if (*((_QWORD *)&v96 + 1))
          {
            v23 = (unint64_t *)(*((_QWORD *)&v96 + 1) + 8);
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
            v25 = v100;
            v27 = v97;
            v26 = v98;
            v28 = v101;
            do
              v29 = __ldxr(v23);
            while (__stxr(v29 + 1, v23));
            do
              v30 = __ldxr(v23);
            while (__stxr(v30 + 1, v23));
          }
          else
          {
            v25 = v100;
            v27 = v97;
            v26 = v98;
            v28 = v101;
          }
          *(_OWORD *)(a4 + 8) = v22;
          *(_QWORD *)(a4 + 24) = v26;
          *(_DWORD *)(a4 + 32) = v25;
          *(_QWORD *)(a4 + 40) = v27;
          *(_DWORD *)(a4 + 48) = 1;
          *(_WORD *)(a4 + 52) = v28;
          if (*((_QWORD *)&v22 + 1))
          {
            v84 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
            do
              v85 = __ldaxr(v84);
            while (__stlxr(v85 - 1, v84));
            if (!v85)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)&v22 + 1) + 16))(*((_QWORD *)&v22 + 1));
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v22 + 1));
            }
            do
              v86 = __ldaxr(v84);
            while (__stlxr(v86 - 1, v84));
            if (!v86)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)&v22 + 1) + 16))(*((_QWORD *)&v22 + 1));
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v22 + 1));
            }
          }
          v87 = (std::__shared_weak_count *)*((_QWORD *)&v96 + 1);
          if (*((_QWORD *)&v96 + 1))
          {
            v88 = (unint64_t *)(*((_QWORD *)&v96 + 1) + 8);
            do
              v89 = __ldaxr(v88);
            while (__stlxr(v89 - 1, v88));
            if (!v89)
            {
              ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
              std::__shared_weak_count::__release_weak(v87);
            }
          }
          return;
        case 0x12:
          if ((_DWORD)v18)
            v44 = HIDWORD(v18) == 0;
          else
            v44 = 1;
          v95 = 0;
          *(_QWORD *)&v96 = 0;
          if (v44)
            v45 = 0;
          else
            v45 = v18;
          *(_DWORD *)v105 = 2;
          *(_QWORD *)&v105[4] = v45;
          v46 = *(_QWORD *)v105;
          v47 = HIDWORD(v45);
          if (v44)
            v48 = 0;
          else
            v48 = v19;
          if (v48 * HIDWORD(v45) == -1
            && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
          {
            abort();
          }
          *(_QWORD *)v105 = v46;
          *(_DWORD *)&v105[8] = v47;
          v49 = *(_QWORD *)&v105[4];
          *(_QWORD *)a4 = &off_24CA79890;
          *(_QWORD *)(a4 + 8) = 0;
          *(_QWORD *)(a4 + 16) = 0;
          *(_QWORD *)(a4 + 24) = v49;
          *(_DWORD *)(a4 + 32) = v48;
          *(_QWORD *)(a4 + 40) = v16;
          v43 = 5;
          goto LABEL_174;
        case 0x14:
          if ((_DWORD)v18)
            v50 = HIDWORD(v18) == 0;
          else
            v50 = 1;
          v95 = 0;
          *(_QWORD *)&v96 = 0;
          if (v50)
            v51 = 0;
          else
            v51 = v18;
          *(_DWORD *)v105 = 4;
          *(_QWORD *)&v105[4] = v51;
          v52 = *(_QWORD *)v105;
          v53 = HIDWORD(v51);
          if (v50)
            v54 = 0;
          else
            v54 = v19;
          if (v54 * HIDWORD(v51) == -1
            && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
          {
            abort();
          }
          *(_QWORD *)v105 = v52;
          *(_DWORD *)&v105[8] = v53;
          v55 = *(_QWORD *)&v105[4];
          *(_QWORD *)a4 = &off_24CA79890;
          *(_QWORD *)(a4 + 8) = 0;
          *(_QWORD *)(a4 + 16) = 0;
          *(_QWORD *)(a4 + 24) = v55;
          *(_DWORD *)(a4 + 32) = v54;
          *(_QWORD *)(a4 + 40) = v16;
          v43 = 25;
          goto LABEL_174;
        case 0x18:
          if ((_DWORD)v18)
            v37 = HIDWORD(v18) == 0;
          else
            v37 = 1;
          v95 = 0;
          *(_QWORD *)&v96 = 0;
          if (v37)
            v38 = 0;
          else
            v38 = v18;
          *(_DWORD *)v105 = 4;
          *(_QWORD *)&v105[4] = v38;
          v39 = *(_QWORD *)v105;
          v40 = HIDWORD(v38);
          if (v37)
            v41 = 0;
          else
            v41 = v19;
          if (v41 * HIDWORD(v38) == -1
            && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
          {
            abort();
          }
          *(_QWORD *)v105 = v39;
          *(_DWORD *)&v105[8] = v40;
          v42 = *(_QWORD *)&v105[4];
          *(_QWORD *)a4 = &off_24CA79890;
          *(_QWORD *)(a4 + 8) = 0;
          *(_QWORD *)(a4 + 16) = 0;
          *(_QWORD *)(a4 + 24) = v42;
          *(_DWORD *)(a4 + 32) = v41;
          *(_QWORD *)(a4 + 40) = v16;
          v43 = 29;
          goto LABEL_174;
        default:
          sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/DataView.cpp", 138, (uint64_t)&unk_210A01421, 0, (uint64_t)"Unsupported image format", 24, (void (*)(void **))sub_2109EDDB4);
          abort();
      }
    }
    abort();
  }
  if ((v8 & 0x20) != 0)
  {
    if (*(_BYTE *)(a1 + 112))
    {
      if (*(_BYTE *)(a1 + 108) && *(_QWORD *)(a1 + 96))
      {
        v31 = *(_QWORD *)(a1 + 64);
        v32 = *(std::__shared_weak_count **)(a1 + 72);
        if (v32)
        {
          p_shared_owners = (unint64_t *)&v32->__shared_owners_;
          do
            v34 = __ldxr(p_shared_owners);
          while (__stxr(v34 + 1, p_shared_owners));
          do
            v35 = __ldaxr(p_shared_owners);
          while (__stlxr(v35 - 1, p_shared_owners));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
        (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v31 + 88))(v31, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      }
      v36 = (uint64_t *)(a1 + 96);
    }
    else
    {
      v36 = (uint64_t *)(a1 + 40);
    }
    v56 = 0;
    v57 = 0;
    v58 = *(_DWORD *)(a1 + 36) >> 1;
    if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*(int32x4_t *)a1))) & 1) == 0 && *(_DWORD *)(a1 + 16))
    {
      v57 = *(_QWORD *)(a1 + 4);
      v56 = *(_DWORD *)(a1 + 16);
    }
    v60 = *(unsigned int *)(a1 + 28);
    v59 = *(_DWORD *)(a1 + 32);
    v61 = *v36;
    if (v56 * v58 != -1
      || !sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
    {
      v62 = v60 >> 1;
      if ((_DWORD)v57)
        v63 = HIDWORD(v57) == 0;
      else
        v63 = 1;
      if (v63)
        v57 = 0;
      if ((_DWORD)v62 * HIDWORD(v57) != -1
        || !sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
      {
        if ((*(_DWORD *)(a1 + 48) & 0xFFFFFFFE) != 0x20)
        {
          sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/DataView.cpp", 148, (uint64_t)&unk_210A01421, 0, (uint64_t)"Unsupported image format", 24, (void (*)(void **))sub_2109EDDB4);
          abort();
        }
        if ((_DWORD)v57)
          v64 = HIDWORD(v57) == 0;
        else
          v64 = 1;
        if (v64)
          v65 = 0;
        else
          v65 = v62 << 32;
        v95 = 0;
        *(_QWORD *)&v96 = 0;
        if (v64)
          v57 = 0;
        if (HIDWORD(v57) * HIDWORD(v65) == -1
          && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
        {
          abort();
        }
        *(_QWORD *)a4 = &off_24CA79890;
        *(_QWORD *)(a4 + 8) = 0;
        *(_QWORD *)(a4 + 16) = 0;
        *(_QWORD *)(a4 + 24) = v57;
        *(_DWORD *)(a4 + 32) = v65 >> 31;
        *(_QWORD *)(a4 + 40) = v61 + 2 * ((v59 >> 1) * a2 + v58 * a3);
        v43 = 3;
        goto LABEL_174;
      }
    }
LABEL_176:
    abort();
  }
  if ((v8 & 0x40) == 0)
  {
    sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/DataView.cpp", 164, (uint64_t)&unk_210A01421, 0, (uint64_t)"Unsupported image format", 24, (void (*)(void **))sub_2109EDDB4);
    abort();
  }
  if (*(_BYTE *)(a1 + 112))
  {
    if (*(_BYTE *)(a1 + 108) && *(_QWORD *)(a1 + 96))
    {
      v9 = *(_QWORD *)(a1 + 64);
      v10 = *(std::__shared_weak_count **)(a1 + 72);
      if (v10)
      {
        v11 = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
        do
          v13 = __ldaxr(v11);
        while (__stlxr(v13 - 1, v11));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v9 + 88))(v9, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    }
    v14 = (uint64_t *)(a1 + 96);
  }
  else
  {
    v14 = (uint64_t *)(a1 + 40);
  }
  v66 = 0;
  v67 = 0;
  v68 = *(_DWORD *)(a1 + 36) >> 2;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*(int32x4_t *)a1))) & 1) == 0 && *(_DWORD *)(a1 + 16))
  {
    v67 = *(_QWORD *)(a1 + 4);
    v66 = *(_DWORD *)(a1 + 16);
  }
  v69 = *(unsigned int *)(a1 + 28);
  v70 = *(_DWORD *)(a1 + 32);
  v71 = *v14;
  if (v66 * v68 == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_176;
  }
  v72 = v69 >> 2;
  if ((_DWORD)v67)
    v73 = HIDWORD(v67) == 0;
  else
    v73 = 1;
  if (v73)
    v67 = 0;
  if ((_DWORD)v72 * HIDWORD(v67) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_176;
  }
  v74 = v71 + 4 * ((v70 >> 2) * a2 + v68 * a3);
  v75 = *(_DWORD *)(a1 + 48);
  if ((v75 - 64) < 2)
  {
    if ((_DWORD)v67)
      v81 = HIDWORD(v67) == 0;
    else
      v81 = 1;
    if (v81)
      v82 = 0;
    else
      v82 = v72 << 32;
    v95 = 0;
    *(_QWORD *)&v96 = 0;
    if (v81)
      v83 = 0;
    else
      v83 = v67;
    if (HIDWORD(v83) * HIDWORD(v82) == -1
      && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
    *(_QWORD *)a4 = &off_24CA79890;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)(a4 + 24) = v83;
    *(_DWORD *)(a4 + 32) = v82 >> 30;
    *(_QWORD *)(a4 + 40) = v74;
    v43 = 4;
  }
  else if (v75 == 68)
  {
    if ((_DWORD)v67)
      v90 = HIDWORD(v67) == 0;
    else
      v90 = 1;
    v95 = 0;
    *(_QWORD *)&v96 = 0;
    if (v90)
      v91 = 0;
    else
      v91 = v67;
    LODWORD(v103) = 4;
    *(_QWORD *)((char *)&v103 + 4) = v91;
    v92 = HIDWORD(v91);
    if (v90)
      v93 = 0;
    else
      v93 = v72;
    if (v93 * HIDWORD(v91) == -1
      && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
    DWORD2(v103) = v92;
    v94 = *(_QWORD *)((char *)&v103 + 4);
    *(_QWORD *)a4 = &off_24CA79890;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)(a4 + 24) = v94;
    *(_DWORD *)(a4 + 32) = 4 * v93;
    *(_QWORD *)(a4 + 40) = v74;
    v43 = 28;
  }
  else
  {
    if (v75 != 72)
    {
      sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/DataView.cpp", 162, (uint64_t)&unk_210A01421, 0, (uint64_t)"Unsupported image format", 24, (void (*)(void **))sub_2109EDDB4);
      abort();
    }
    if ((_DWORD)v67)
      v76 = HIDWORD(v67) == 0;
    else
      v76 = 1;
    v95 = 0;
    *(_QWORD *)&v96 = 0;
    if (v76)
      v77 = 0;
    else
      v77 = v67;
    LODWORD(v103) = 4;
    *(_QWORD *)((char *)&v103 + 4) = v77;
    v78 = HIDWORD(v77);
    if (v76)
      v79 = 0;
    else
      v79 = v72;
    if (v79 * HIDWORD(v77) == -1
      && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
    DWORD2(v103) = v78;
    v80 = *(_QWORD *)((char *)&v103 + 4);
    *(_QWORD *)a4 = &off_24CA79890;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)(a4 + 24) = v80;
    *(_DWORD *)(a4 + 32) = 4 * v79;
    *(_QWORD *)(a4 + 40) = v74;
    v43 = 32;
  }
LABEL_174:
  *(_DWORD *)(a4 + 48) = v43;
  *(_WORD *)(a4 + 52) = 0;
}

void sub_21098C2C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2108A894C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_21098C2D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2108A894C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_21098C2EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2108A894C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_21098C300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2108A894C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_21098C314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2108A894C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_21098C328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2108A894C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_21098C33C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2108A894C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_21098C354(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t (**v22)();
  uint64_t *v23;
  std::__shared_weak_count *v24;

  v1 = *(_QWORD *)(a1 + 40);
  if (v1)
    return v1;
  if (!*(_BYTE *)(a1 + 112)
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/DataView.cpp", 171, (uint64_t)"buffer.image", 12, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_38;
  }
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 56) + 40))(a1 + 56);
  if (v4)
  {
    v23 = 0;
    v24 = 0;
    v22 = &off_24CA84E68;
    (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v3 + 56))(v3, &v22);
    if (v23)
    {
      v6 = *v23;
      v5 = (std::__shared_weak_count *)v23[1];
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      if (v6)
      {
        v1 = sub_2109DF8B4((uint64_t)&v22, 0);
        v22 = &off_24CA84E68;
        v10 = v24;
        if (v24)
        {
          v11 = (unint64_t *)&v24->__shared_owners_;
          do
            v12 = __ldaxr(v11);
          while (__stlxr(v12 - 1, v11));
          if (!v12)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
        }
        return v1;
      }
    }
  }
  else
  {
    v23 = 0;
    v24 = 0;
  }
  v22 = &off_24CA84E68;
  v13 = v24;
  if (!v24)
    goto LABEL_23;
  v14 = (unint64_t *)&v24->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
  {
LABEL_23:
    if (!sub_2109AB1D0(a1 + 56))
      goto LABEL_25;
LABEL_24:
    if (!sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/DataView.cpp", 179, (uint64_t)"!img::HasIOSurface(*buffer.image)", 33, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))goto LABEL_25;
LABEL_38:
    abort();
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  if (sub_2109AB1D0(a1 + 56))
    goto LABEL_24;
LABEL_25:
  if (*(_BYTE *)(a1 + 108) && *(_QWORD *)(a1 + 96))
  {
    v16 = *(_QWORD *)(a1 + 64);
    v17 = *(std::__shared_weak_count **)(a1 + 72);
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
      do
        v20 = __ldaxr(v18);
      while (__stlxr(v20 - 1, v18));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v16 + 88))(v16, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
  }
  return *(_QWORD *)(a1 + 96);
}

void sub_21098C5BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2109DEB5C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21098C5D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2109DEB5C((uint64_t *)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_21098C5E4(_DWORD *result, int a2, int a3, int a4, int a5, int a6)
{
  *result = a2;
  result[1] = a3;
  result[2] = a4;
  result[3] = a5;
  result[4] = a6;
  return result;
}

BOOL sub_21098C5F4(_DWORD *a1)
{
  unsigned int v1;
  unsigned int v2;
  _BOOL4 v4;
  BOOL v5;
  int v6;
  int v7;
  _BOOL8 v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;

  v1 = a1[3];
  v2 = a1[4];
  v4 = v2 < 2 && v1 < 2;
  if (!v4)
  {
    v5 = 0;
    v6 = a1[6];
    if (v6)
      goto LABEL_9;
    return 0;
  }
  v5 = a1[2] < 2u;
  v6 = a1[6];
  if (!v6)
    return 0;
LABEL_9:
  v7 = a1[1];
  v8 = v7 != 0;
  if (!v7)
    v5 = 1;
  if (!v5)
  {
    v9 = a1[7];
    v8 = v9 >= v7 * v6;
    if (v9 < v7 * v6)
      LOBYTE(v4) = 1;
    if (!v4)
    {
      v10 = a1[2] * v9;
      v11 = a1[8];
      v8 = v11 >= v10;
      if (v2 >= 2 && v11 >= v10)
        return a1[9] >= v11 * v1;
    }
  }
  return v8;
}

BOOL sub_21098C69C(_DWORD *a1, int a2)
{
  unsigned int v2;
  unint64_t v3;
  _BOOL8 v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;

  v2 = a1[10];
  if (((v2 >> 1) & 1) + (v2 & 1) + ((v2 >> 2) & 1) + ((v2 >> 3) & 1) > 1
    || ((v2 >> 4) & 1) + ((v2 >> 5) & 1) + ((v2 >> 6) & 1) > 1)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    v3 = 1;
    v4 = 1;
    if (a2 != 16)
      goto LABEL_8;
LABEL_15:
    v7 = 1;
    v8 = 2;
    v9 = (v2 & 0x40) >> 4;
    if ((v2 & 0x40) == 0)
      v9 = 1;
    if ((v2 & 0x20) == 0)
      v8 = v9;
    if ((v2 & 0x10) == 0)
      v7 = v8;
    if (!v4)
      LODWORD(v3) = 1;
    v3 = v7 * (unint64_t)v3;
    v6 = a1 + 6;
    if (v3 == 1)
      return v3 <= *v6;
LABEL_24:
    v10 = a1[4];
    v11 = a1[6] % v3;
    if (v10 > 1 || a1[3] > 1u)
    {
      if (!v11
        && !(a1[7] % v3)
        && !(a1[8] % v3)
        && (v10 < 2 || !(a1[9] % v3)))
      {
        return v3 <= *v6;
      }
    }
    else if (!v11 && (a1[2] <= 1u || !(a1[7] % v3)))
    {
      return v3 <= *v6;
    }
    return 0;
  }
  v3 = 2;
  v4 = (v2 & 0xC) != 0;
  if ((v2 & 2) != 0)
    v4 = 1;
  else
    v3 = 4 * ((v2 & 0xC) != 0);
  if (a2 == 16)
    goto LABEL_15;
LABEL_8:
  if ((v2 & 0x70) != 0)
  {
    v5 = 0;
    if ((v2 & 0x10) != 0 || (v2 & 0x70) != a2)
      return v5;
  }
  if (v4)
  {
    v6 = a1 + 6;
    if (v3 == 1)
      return v3 <= *v6;
    goto LABEL_24;
  }
  v6 = a1 + 6;
  v3 = 1;
  return v3 <= *v6;
}

void sub_21098C830(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BCC6FCLL);
}

uint64_t sub_21098C898()
{
  return 29;
}

uint64_t sub_21098C8A0(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_21098C8A8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_21098C8BC(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_21098C940(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BCC6FCLL);
}

uint64_t sub_21098C9A8()
{
  return 25;
}

uint64_t sub_21098C9B0(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_21098C9B8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_21098C9CC(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_21098CA50(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BCC6FCLL);
}

uint64_t sub_21098CAB8()
{
  return 3;
}

uint64_t sub_21098CAC0(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_21098CAC8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 32);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 44);
  return result;
}

uint64_t sub_21098CAE0(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_21098CB64(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BCC6FCLL);
}

uint64_t sub_21098CBCC()
{
  return 32;
}

uint64_t sub_21098CBD4(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_21098CBDC@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 4 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_21098CBF4(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_21098CC78(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BCC6FCLL);
}

uint64_t sub_21098CCE0()
{
  return 28;
}

uint64_t sub_21098CCE8(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_21098CCF0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 4 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_21098CD08(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_21098CD8C(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  *(_QWORD *)result = off_24CA82900;
  if (*(char *)(result + 31) < 0)
  {
    operator delete(*(void **)(result + 8));
    return v1;
  }
  return result;
}

void sub_21098CDD8(uint64_t a1)
{
  *(_QWORD *)a1 = off_24CA82900;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x212BCC6FCLL);
}

uint64_t sub_21098CE24(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_24CA82960;
  if (*(_BYTE *)(a1 + 152))
  {
    v2 = *(void **)(a1 + 128);
    if (v2)
    {
      *(_QWORD *)(a1 + 136) = v2;
      operator delete(v2);
    }
  }
  *(_QWORD *)a1 = off_24CA82AC0;
  sub_2108B55B4(a1 + 8);
  return a1;
}

void sub_21098CE7C(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_24CA82960;
  if (*(_BYTE *)(a1 + 152))
  {
    v2 = *(void **)(a1 + 128);
    if (v2)
    {
      *(_QWORD *)(a1 + 136) = v2;
      operator delete(v2);
    }
  }
  *(_QWORD *)a1 = off_24CA82AC0;
  sub_2108B55B4(a1 + 8);
  JUMPOUT(0x212BCC6FCLL);
}

uint64_t sub_21098CEE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t result;
  void *__p[3];
  char v13;
  uint64_t v14;
  __int16 v15;
  _BYTE v16[120];
  uint64_t v17;
  uint64_t (**v18)();
  char v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  sub_2108B3FF0((uint64_t)v16, (uint64_t *)(a1 + 8));
  sub_210957BA4((uint64_t)__p, a1 + 128);
  v14 = *(_QWORD *)(a1 + 160);
  v15 = *(_WORD *)(a1 + 168);
  sub_21099774C((uint64_t)v16, (uint64_t)__p, (uint64_t)&v17);
  if (v13 && __p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  sub_2108B55B4((uint64_t)v16);
  v4 = v17;
  v17 = 0;
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = &off_24CA79A00;
  *(_BYTE *)(a2 + 16) = v19;
  v5 = v21;
  *(_QWORD *)(a2 + 24) = v20;
  *(_QWORD *)(a2 + 32) = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = v21;
    v18 = &off_24CA79A00;
    if (v21)
    {
      v9 = (unint64_t *)&v21->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  else
  {
    v18 = &off_24CA79A00;
  }
  result = v17;
  v17 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_21098CFFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a12)
  {
    if (__p)
    {
      operator delete(__p);
      sub_2108B55B4((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  sub_2108B55B4((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_21098D040()
{
  JUMPOUT(0x212BCC6FCLL);
}

uint64_t sub_21098D054(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  *(_QWORD *)a1 = off_24CA82AC0;
  sub_2108B3FF0(a1 + 8, a2);
  *(_QWORD *)a1 = off_24CA829B8;
  sub_210964BC8((_BYTE *)(a1 + 128), a3);
  return a1;
}

void sub_21098D0B0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *v1 = v3;
  sub_2108B55B4(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_21098D0C8(uint64_t a1)
{
  *(_QWORD *)a1 = off_24CA829B8;
  if (*(_BYTE *)(a1 + 200) && *(char *)(a1 + 199) < 0)
  {
    operator delete(*(void **)(a1 + 176));
    if (!*(_BYTE *)(a1 + 152))
      goto LABEL_7;
  }
  else if (!*(_BYTE *)(a1 + 152))
  {
    goto LABEL_7;
  }
  if (*(char *)(a1 + 151) < 0)
    operator delete(*(void **)(a1 + 128));
LABEL_7:
  *(_QWORD *)a1 = off_24CA82AC0;
  sub_2108B55B4(a1 + 8);
  return a1;
}

void sub_21098D144(uint64_t a1)
{
  *(_QWORD *)a1 = off_24CA829B8;
  if (*(_BYTE *)(a1 + 200) && *(char *)(a1 + 199) < 0)
  {
    operator delete(*(void **)(a1 + 176));
    if (!*(_BYTE *)(a1 + 152))
      goto LABEL_7;
  }
  else if (!*(_BYTE *)(a1 + 152))
  {
    goto LABEL_7;
  }
  if (*(char *)(a1 + 151) < 0)
    operator delete(*(void **)(a1 + 128));
LABEL_7:
  *(_QWORD *)a1 = off_24CA82AC0;
  sub_2108B55B4(a1 + 8);
  JUMPOUT(0x212BCC6FCLL);
}

uint64_t sub_21098D1D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t result;
  void *v12[2];
  char v13;
  char v14;
  void *__p;
  char v16;
  char v17;
  _BYTE v18[120];
  uint64_t v19;
  uint64_t (**v20)();
  char v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  sub_2108B3FF0((uint64_t)v18, (uint64_t *)(a1 + 8));
  sub_210964BC8(v12, (__int128 *)(a1 + 128));
  sub_2108A6B04((uint64_t)v18, (uint64_t)v12, (uint64_t)&v19);
  if (v17 && v16 < 0)
    operator delete(__p);
  if (v14 && v13 < 0)
    operator delete(v12[0]);
  sub_2108B55B4((uint64_t)v18);
  v4 = v19;
  v19 = 0;
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = &off_24CA79A00;
  *(_BYTE *)(a2 + 16) = v21;
  v5 = v23;
  *(_QWORD *)(a2 + 24) = v22;
  *(_QWORD *)(a2 + 32) = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = v23;
    v20 = &off_24CA79A00;
    if (v23)
    {
      v9 = (unint64_t *)&v23->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  else
  {
    v20 = &off_24CA79A00;
  }
  result = v19;
  v19 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_21098D2F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_210968528((uint64_t)&a9);
  sub_2108B55B4((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_21098D314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_2108B55B4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21098D328(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v4;
  __int128 v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  __int16 v12;
  unint64_t v13;
  __int128 v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t v19;
  int v20;
  __int16 v21;
  unint64_t v22;
  uint64_t *v23;
  int v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  uint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  int v36;
  int32x4_t v37;
  int v38;
  char v39;
  __int128 v40;
  int v41;
  __int128 v42;
  _BYTE v43[32];
  int v44;
  uint64_t (**v45)();
  uint64_t v46;
  std::__shared_weak_count *v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  __int16 v52;
  char v53;

  v2 = a1;
  v4 = *(_DWORD *)(a1 + 120);
  if (v4 == 2)
  {
    sub_21098D6D0(a2, a1);
  }
  else if (v4 == 1)
  {
    v14 = *(_OWORD *)(a1 + 16);
    v42 = *(_OWORD *)a1;
    *(_OWORD *)v43 = v14;
    *(_OWORD *)&v43[16] = *(_OWORD *)(a1 + 32);
    v44 = *(_DWORD *)(a1 + 48);
    LOBYTE(v45) = 0;
    v53 = 0;
    if (*(_BYTE *)(a1 + 112))
    {
      v45 = &off_24CA79890;
      v15 = *(_QWORD *)(a1 + 64);
      v16 = *(std::__shared_weak_count **)(a1 + 72);
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v18 = __ldxr(p_shared_owners);
        while (__stxr(v18 + 1, p_shared_owners));
        v19 = *(_QWORD *)(a1 + 96);
        v20 = *(_DWORD *)(a1 + 104);
        v21 = *(_WORD *)(a1 + 108);
        do
          v22 = __ldxr(p_shared_owners);
        while (__stxr(v22 + 1, p_shared_owners));
      }
      else
      {
        v19 = *(_QWORD *)(a1 + 96);
        v20 = *(_DWORD *)(a1 + 104);
        v21 = *(_WORD *)(a1 + 108);
      }
      v46 = v15;
      v47 = v16;
      v48 = *(_QWORD *)(a1 + 80);
      v24 = *(_DWORD *)(a1 + 88);
      v23 = &v50;
      v50 = v19;
      v49 = v24;
      v51 = v20;
      v52 = v21;
      if (v16)
      {
        v25 = (unint64_t *)&v16->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *, uint64_t))v16->__on_zero_shared)(v16, a1);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      v53 = 1;
      if ((_BYTE)v52 && v50)
      {
        if (v47)
        {
          v27 = &v47->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
          do
            v29 = __ldaxr((unint64_t *)v27);
          while (__stlxr(v29 - 1, (unint64_t *)v27));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v47->__on_zero_shared)(v47, v2);
            std::__shared_weak_count::__release_weak(v47);
          }
        }
        (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v46 + 88))(v46, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      }
    }
    else
    {
      v23 = (uint64_t *)&v43[24];
    }
    v41 = *(_DWORD *)v43;
    v38 = 4 * *(_DWORD *)&v43[20];
    v39 = 1;
    v30 = *v23;
    v40 = v42;
    v37 = vshlq_n_s32(*(int32x4_t *)&v43[4], 2uLL);
    v36 = v44;
    sub_21098B528(a2, v30, &v40, (__int128 *)v37.i8, &v36, (uint64_t)&v45);
    if (v53)
    {
      v31 = v47;
      if (v47)
      {
        v32 = &v47->__shared_owners_;
        do
          v33 = __ldaxr((unint64_t *)v32);
        while (__stlxr(v33 - 1, (unint64_t *)v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
    }
  }
  else
  {
    if (v4)
    {
      sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Execution.cpp", 104, (uint64_t)&unk_210A01421, 0, (uint64_t)"Not implemented", 15, (void (*)(void **))sub_2109EDDB4);
      abort();
    }
    v5 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *(_OWORD *)(a2 + 16) = v5;
    *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
    *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 48);
    *(_BYTE *)(a2 + 56) = 0;
    *(_BYTE *)(a2 + 112) = 0;
    if (*(_BYTE *)(a1 + 112))
    {
      *(_QWORD *)(a2 + 56) = &off_24CA79890;
      v6 = *(_QWORD *)(a1 + 64);
      v7 = *(std::__shared_weak_count **)(a1 + 72);
      if (v7)
      {
        v8 = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
        v10 = *(_QWORD *)(a1 + 96);
        v11 = *(_DWORD *)(a1 + 104);
        v12 = *(_WORD *)(a1 + 108);
        do
          v13 = __ldxr(v8);
        while (__stxr(v13 + 1, v8));
      }
      else
      {
        v10 = *(_QWORD *)(a1 + 96);
        v11 = *(_DWORD *)(a1 + 104);
        v12 = *(_WORD *)(a1 + 108);
      }
      *(_QWORD *)(a2 + 64) = v6;
      *(_QWORD *)(a2 + 72) = v7;
      *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 80);
      *(_DWORD *)(a2 + 88) = *(_DWORD *)(a1 + 88);
      *(_QWORD *)(a2 + 96) = v10;
      *(_DWORD *)(a2 + 104) = v11;
      *(_WORD *)(a2 + 108) = v12;
      if (v7)
      {
        v34 = (unint64_t *)&v7->__shared_owners_;
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *, uint64_t))v7->__on_zero_shared)(v7, a1);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      *(_BYTE *)(a2 + 112) = 1;
    }
  }
}

void sub_21098D6A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_2108B0424((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21098D6BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_2108B0424((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21098D6D0(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  int v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  uint64_t (**v41)();
  uint64_t v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  __int16 v48;
  char v49;
  uint64_t (**v50)();
  uint64_t v51;
  std::__shared_weak_count *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  char v59;
  int v60;
  __int128 v61;
  int v62;
  char v63;
  int v64;
  uint64_t v65;
  uint64_t v66;

  switch(*(_DWORD *)(a2 + 48))
  {
    case 1:
      v50 = &off_24CA79B48;
      sub_2108B89BC(a2, (uint64_t)&v51);
      sub_210990AE4(a1, (uint64_t)&v50);
      v3 = v52;
      if (!v52)
        return;
      p_shared_owners = (unint64_t *)&v52->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      break;
    case 3:
      v41 = &off_24CA82618;
      sub_210993328(a2, (uint64_t)&v42);
      sub_210990CB0((uint64_t)&v50, (uint64_t)&v41);
      sub_210990E84(a1, (uint64_t)&v50);
      if (v59)
      {
        v6 = v58;
        if (v58)
        {
          v7 = (unint64_t *)&v58->__shared_owners_;
          do
            v8 = __ldaxr(v7);
          while (__stlxr(v8 - 1, v7));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
      }
      v3 = v43;
      if (!v43)
        return;
      v9 = (unint64_t *)&v43->__shared_owners_;
      do
        v5 = __ldaxr(v9);
      while (__stlxr(v5 - 1, v9));
      break;
    case 4:
      v41 = &off_24CA809A8;
      sub_2109938DC(a2, (uint64_t)&v42);
      sub_210990F8C((uint64_t)&v50, (uint64_t)&v41);
      sub_2109918E8(a1, (uint64_t)&v50);
      if (v59)
      {
        v10 = v58;
        if (v58)
        {
          v11 = (unint64_t *)&v58->__shared_owners_;
          do
            v12 = __ldaxr(v11);
          while (__stlxr(v12 - 1, v11));
          if (!v12)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
        }
      }
      v3 = v43;
      if (!v43)
        return;
      v13 = (unint64_t *)&v43->__shared_owners_;
      do
        v5 = __ldaxr(v13);
      while (__stlxr(v5 - 1, v13));
      break;
    case 5:
      v50 = &off_24CA79E68;
      sub_2108BC448(a2, (uint64_t)&v51);
      v14 = v56;
      v64 = 2;
      v65 = v57;
      v66 = 0x100000001;
      *(_QWORD *)&v61 = v55;
      DWORD2(v61) = v56;
      HIDWORD(v61) = v56 * HIDWORD(v57);
      v62 = v56 * HIDWORD(v57);
      v63 = 1;
      v60 = 18;
      v41 = &off_24CA79890;
      v15 = v51;
      v16 = v52;
      if (v52)
      {
        v17 = (unint64_t *)&v52->__shared_owners_;
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
        v19 = v54;
        v14 = v56;
        v20 = v53;
        v21 = (__int16)v58;
        do
          v22 = __ldxr(v17);
        while (__stxr(v22 + 1, v17));
        do
          v23 = __ldxr(v17);
        while (__stxr(v23 + 1, v17));
      }
      else
      {
        v19 = v54;
        v20 = v53;
        v21 = (__int16)v58;
      }
      v42 = v15;
      v43 = v16;
      v44 = v19;
      v45 = v14;
      v46 = v20;
      v47 = 5;
      v48 = v21;
      if (v16)
      {
        v34 = (unint64_t *)&v16->__shared_owners_;
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
        do
          v36 = __ldaxr(v34);
        while (__stlxr(v36 - 1, v34));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      v49 = 1;
      sub_21098B528(a1, 0, (__int128 *)&v64, &v61, &v60, (uint64_t)&v41);
      if (v49)
      {
        v37 = v43;
        if (v43)
        {
          v38 = (unint64_t *)&v43->__shared_owners_;
          do
            v39 = __ldaxr(v38);
          while (__stlxr(v39 - 1, v38));
          if (!v39)
          {
            ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
            std::__shared_weak_count::__release_weak(v37);
          }
        }
      }
      v3 = v52;
      if (!v52)
        return;
      v40 = (unint64_t *)&v52->__shared_owners_;
      do
        v5 = __ldaxr(v40);
      while (__stlxr(v5 - 1, v40));
      break;
    case 0x19:
      v50 = &off_24CA82520;
      sub_210993E90(a2, (uint64_t)&v51);
      sub_210991160(a1, (uint64_t)&v50);
      v3 = v52;
      if (!v52)
        return;
      v24 = (unint64_t *)&v52->__shared_owners_;
      do
        v5 = __ldaxr(v24);
      while (__stlxr(v5 - 1, v24));
      break;
    case 0x1C:
      v41 = &off_24CA82808;
      sub_2109944C4(a2, (uint64_t)&v42);
      sub_210991340((uint64_t)&v50, (uint64_t)&v41);
      sub_2109918E8(a1, (uint64_t)&v50);
      if (v59)
      {
        v25 = v58;
        if (v58)
        {
          v26 = (unint64_t *)&v58->__shared_owners_;
          do
            v27 = __ldaxr(v26);
          while (__stlxr(v27 - 1, v26));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
      }
      v3 = v43;
      if (!v43)
        return;
      v28 = (unint64_t *)&v43->__shared_owners_;
      do
        v5 = __ldaxr(v28);
      while (__stlxr(v5 - 1, v28));
      break;
    case 0x1D:
      v50 = &off_24CA82428;
      sub_210994BF4(a2, (uint64_t)&v51);
      sub_210991524(a1, (uint64_t)&v50);
      v3 = v52;
      if (!v52)
        return;
      v33 = (unint64_t *)&v52->__shared_owners_;
      do
        v5 = __ldaxr(v33);
      while (__stlxr(v5 - 1, v33));
      break;
    case 0x20:
      v41 = &off_24CA82710;
      sub_210995228(a2, (uint64_t)&v42);
      sub_210991704((uint64_t)&v50, (uint64_t)&v41);
      sub_2109918E8(a1, (uint64_t)&v50);
      if (v59)
      {
        v29 = v58;
        if (v58)
        {
          v30 = (unint64_t *)&v58->__shared_owners_;
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
      }
      v3 = v43;
      if (!v43)
        return;
      v32 = (unint64_t *)&v43->__shared_owners_;
      do
        v5 = __ldaxr(v32);
      while (__stlxr(v5 - 1, v32));
      break;
    default:
      sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Execution.cpp", 87, (uint64_t)&unk_210A01421, 0, (uint64_t)"Not implemented", 15, (void (*)(void **))sub_2109EDDB4);
      abort();
  }
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_21098DC74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_2108B1C70((uint64_t)&a9);
  sub_2108BC2C4((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_21098DC90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_21098B3F0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21098DCA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_2108B0424((uint64_t)&a19);
  sub_21098B69C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_21098DCC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21098B69C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_21098DCD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_2108B0424((uint64_t)&a19);
  sub_21098B704((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_21098DCF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21098B704((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_21098DD04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_21098B458((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21098DD18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_2108B0424((uint64_t)&a19);
  sub_210955EB0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_21098DD34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_210955EB0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_21098DD48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_21096D118((uint64_t)&a19);
  sub_21098B4C0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_21098DD64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21098B4C0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_21098DD78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_2108B8838((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_21098DD8C(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  char v5;
  char v6;
  _BYTE v7[120];
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v7[0] = 0;
  v8 = -1;
  v3 = *(unsigned int *)(a2 + 120);
  if ((_DWORD)v3 != -1)
  {
    ((void (*)(char *, _BYTE *, uint64_t))off_24CA82A98[v3])(&v5, v7, a2);
    v8 = v3;
  }
  sub_2109768D4(a1, (uint64_t)v7, 1uLL);
  if (v8 != -1)
    ((void (*)(char *, _BYTE *))off_24CA82A80[v8])(&v6, v7);
  return a1;
}

void sub_21098DE4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28)
{
  if (a2)
    sub_2108ABF6C(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_21098DEA0(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::string::size_type v11;
  uint64_t v12;
  int v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  __int16 v20;
  unint64_t v21;
  BOOL v22;
  _BYTE *v23;
  _QWORD *v24;
  uint64_t v25;
  int v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  __int16 v33;
  unint64_t v34;
  void *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  __int16 v41;
  unint64_t v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  int v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  int v51;
  __int16 v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t *v59;
  int v60;
  unsigned int v61;
  uint64_t v62;
  int v63;
  int *v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  const char *v68;
  const char *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  unsigned int v85;
  const char *v86;
  const char *v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  int v91;
  int v92;
  uint64_t v93;
  char v94;
  unint64_t v95;
  uint64_t v96;
  const char *v97;
  unint64_t *v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  BOOL v102;
  uint64_t v103;
  std::string *v104;
  __int128 v105;
  std::string *v106;
  __int128 v107;
  int v108;
  const std::string::value_type *v109;
  std::string::size_type v110;
  std::string *v111;
  unint64_t v112;
  void *v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  _QWORD *v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  BOOL v124;
  uint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  uint64_t v129;
  int v130;
  __int16 v131;
  unint64_t v132;
  uint64_t (**v133)();
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  uint64_t v137;
  int v138;
  __int16 v139;
  unint64_t v140;
  unint64_t *v141;
  unint64_t v142;
  uint64_t v143;
  std::string *v144;
  __int128 v145;
  std::string *v146;
  __int128 v147;
  int v148;
  const std::string::value_type *v149;
  std::string::size_type v150;
  std::string *v151;
  unint64_t v152;
  void *v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  unint64_t *v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  _QWORD *v168;
  unint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  char v176;
  std::string *v177;
  __int128 v178;
  std::string *v179;
  __int128 v180;
  void **v181;
  std::string::size_type v182;
  std::string *v183;
  __int128 v184;
  std::string *v185;
  __int128 v186;
  void **v187;
  std::string::size_type v188;
  std::string *v189;
  __int128 v190;
  std::string *v191;
  __int128 v192;
  int v193;
  const std::string::value_type *v194;
  std::string::size_type v195;
  std::string *v196;
  unint64_t v197;
  void *v198;
  int v199;
  uint64_t v200;
  uint64_t v201;
  _QWORD *v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  unint64_t *v206;
  _QWORD *v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  std::__shared_weak_count *v214;
  unint64_t *v215;
  unint64_t v216;
  uint64_t v217;
  _QWORD *v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  uint64_t v222;
  _QWORD *v223;
  uint64_t v224;
  char v225;
  unsigned int v226;
  uint64_t v227;
  char v228;
  unint64_t v229;
  unint64_t v230;
  std::string *v231;
  __int128 v232;
  std::string *v233;
  __int128 v234;
  void **v235;
  std::string::size_type v236;
  std::string *v237;
  void *v238;
  unint64_t size;
  int v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  _QWORD *v244;
  _QWORD *v245;
  uint64_t v246;
  uint64_t v247;
  std::string::size_type v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  int v254;
  __int16 v255;
  uint64_t (**v256)();
  std::__shared_weak_count *v257;
  std::__shared_weak_count *v258;
  int v259;
  uint64_t v260;
  int v261;
  __int16 v262;
  char v263;
  int v264;
  void *__p[2];
  unsigned __int8 v266;
  void *v267[2];
  unsigned __int8 v268;
  std::string v269;
  std::string v270;
  std::string v271;
  std::string v272;
  std::string v273;
  _DWORD v274[2];
  unint64_t v275;
  unint64_t v276;
  void *v277[2];
  __int128 v278;
  __int128 v279;
  int v280;
  __int16 v281;
  std::__shared_weak_count *v282;
  std::__shared_weak_count *v283;
  uint64_t v284;
  int v285;
  uint64_t v286;
  int v287;
  __int16 v288;
  unsigned __int8 v289;
  unsigned int v290;
  std::string v291;
  __int128 v292;
  __int128 v293;
  int v294;
  uint64_t (**v295)();
  uint64_t v296;
  std::__shared_weak_count *v297;
  uint64_t v298;
  int v299;
  uint64_t v300;
  int v301;
  __int16 v302;
  char v303;
  _BYTE v304[32];
  __int128 v305;
  int v306;
  uint64_t v307;
  std::__shared_weak_count *v308;
  uint64_t v309;
  int v310;
  uint64_t v311;
  int v312;
  __int16 v313;
  unsigned __int8 v314;
  std::string v315;
  uint64_t v316;
  int v317;
  uint64_t v318;
  int v319;
  __int16 v320;
  std::string v321;
  __int128 v322;
  __int128 v323;
  int v324;
  uint64_t (**v325)();
  std::__shared_weak_count *v326;
  std::__shared_weak_count *v327;
  uint64_t v328;
  int v329;
  uint64_t v330;
  int v331;
  __int16 v332;
  char v333;
  _BYTE v334[56];
  uint64_t (**v335)();
  uint64_t (**v336)();
  std::__shared_weak_count *v337;
  std::__shared_weak_count *v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  int v342;
  __int16 v343;
  char v344;

  v5 = a2[1];
  v247 = (v5 - *a2) >> 7;
  if (v247 != 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 3))
  {
    *(_QWORD *)v304 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 3);
    sub_2108AE440((unint64_t *)v304);
    v231 = std::string::insert(&v291, 0, "Expected ", 9uLL);
    v232 = *(_OWORD *)&v231->__r_.__value_.__l.__data_;
    v321.__r_.__value_.__r.__words[2] = v231->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v321.__r_.__value_.__l.__data_ = v232;
    v231->__r_.__value_.__l.__size_ = 0;
    v231->__r_.__value_.__r.__words[2] = 0;
    v231->__r_.__value_.__r.__words[0] = 0;
    v233 = std::string::append(&v321, " model inputs but received ", 0x1BuLL);
    v234 = *(_OWORD *)&v233->__r_.__value_.__l.__data_;
    *(_QWORD *)&v334[16] = *((_QWORD *)&v233->__r_.__value_.__l + 2);
    *(_OWORD *)v334 = v234;
    v233->__r_.__value_.__l.__size_ = 0;
    v233->__r_.__value_.__r.__words[2] = 0;
    v233->__r_.__value_.__r.__words[0] = 0;
    v315.__r_.__value_.__r.__words[0] = (uint64_t)(a2[1] - *a2) >> 7;
    sub_2108AE440((unint64_t *)&v315);
    if ((SBYTE7(v278) & 0x80u) == 0)
      v235 = v277;
    else
      v235 = (void **)v277[0];
    if ((SBYTE7(v278) & 0x80u) == 0)
      v236 = BYTE7(v278);
    else
      v236 = (std::string::size_type)v277[1];
    v237 = std::string::append((std::string *)v334, (const std::string::value_type *)v235, v236);
    v238 = (void *)v237->__r_.__value_.__r.__words[0];
    size = v237->__r_.__value_.__l.__size_;
    LODWORD(v273.__r_.__value_.__l.__data_) = v237->__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)v273.__r_.__value_.__r.__words + 3) = *(_DWORD *)((char *)&v237->__r_.__value_.__r.__words[2] + 3);
    v240 = SHIBYTE(v237->__r_.__value_.__r.__words[2]);
    v237->__r_.__value_.__l.__size_ = 0;
    v237->__r_.__value_.__r.__words[2] = 0;
    v237->__r_.__value_.__r.__words[0] = 0;
    *(_QWORD *)a3 = &off_24CA79A00;
    *(_BYTE *)(a3 + 8) = 3;
    v241 = operator new();
    v242 = v241;
    if (v240 < 0)
    {
      sub_2108B314C((_BYTE *)v241, v238, size);
    }
    else
    {
      *(_QWORD *)v241 = v238;
      *(_QWORD *)(v241 + 8) = size;
      *(_DWORD *)(v241 + 16) = v273.__r_.__value_.__l.__data_;
      *(_DWORD *)(v241 + 19) = *(_DWORD *)((char *)v273.__r_.__value_.__r.__words + 3);
      *(_BYTE *)(v241 + 23) = v240;
    }
    *(_QWORD *)(a3 + 16) = v242;
    v245 = (_QWORD *)operator new();
    *v245 = &unk_24CA7A1D8;
    v245[1] = 0;
    v245[2] = 0;
    v245[3] = v242;
    *(_QWORD *)(a3 + 24) = v245;
    if (v240 < 0)
    {
      operator delete(v238);
      if ((SBYTE7(v278) & 0x80000000) == 0)
      {
LABEL_407:
        if ((v334[23] & 0x80000000) == 0)
          goto LABEL_408;
        goto LABEL_413;
      }
    }
    else if ((SBYTE7(v278) & 0x80000000) == 0)
    {
      goto LABEL_407;
    }
    operator delete(v277[0]);
    if ((v334[23] & 0x80000000) == 0)
    {
LABEL_408:
      if ((SHIBYTE(v321.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_409;
      goto LABEL_414;
    }
LABEL_413:
    operator delete(*(void **)v334);
    if ((SHIBYTE(v321.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_409:
      if ((SHIBYTE(v291.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
      goto LABEL_415;
    }
LABEL_414:
    operator delete(v321.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v291.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_415:
    operator delete(v291.__r_.__value_.__l.__data_);
    return;
  }
  if (v5 != *a2)
  {
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a1 + 40);
      v8 = *a2 + (v6 << 7);
      v250 = v6;
      LOBYTE(v251) = 0;
      v264 = -1;
      v9 = *(unsigned int *)(v8 + 120);
      if ((_DWORD)v9 != -1)
      {
        ((void (*)(std::string *, __int128 *))off_24CA82A98[v9])(&v321, &v251);
        v264 = v9;
      }
      v10 = v7 + 168 * v6;
      if (!*(_BYTE *)(v10 + 80))
      {
        if (*(_BYTE *)(v7 + 168 * v6 + 120))
          v22 = (_DWORD)v9 == 0;
        else
          v22 = 0;
        if (!v22)
          goto LABEL_200;
        goto LABEL_166;
      }
      v11 = v250;
      LOBYTE(v277[0]) = 0;
      v290 = -1;
      if ((_DWORD)v9 == -1)
      {
LABEL_24:
        *(_QWORD *)a3 = &off_24CA79A00;
        *(_BYTE *)(a3 + 8) = 0;
        v23 = (_BYTE *)operator new();
        v23[23] = 0;
        *v23 = 0;
        *(_QWORD *)(a3 + 16) = v23;
        v24 = (_QWORD *)operator new();
        *v24 = &unk_24CA7A1D8;
        v24[1] = 0;
        v24[2] = 0;
        v24[3] = v23;
        *(_QWORD *)(a3 + 24) = v24;
        v25 = v290;
        if (v290 != -1)
          goto LABEL_155;
        goto LABEL_156;
      }
      ((void (*)(std::string *, void **, __int128 *))off_24CA82A98[v9])(&v321, v277, &v251);
      v12 = v7 + 168 * v6;
      v290 = v9;
      if ((_DWORD)v9 == 2)
      {
        v315.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24CA79890;
        v35 = v277[1];
        v36 = (std::__shared_weak_count *)v278;
        if ((_QWORD)v278)
        {
          v37 = (unint64_t *)(v278 + 8);
          do
            v38 = __ldxr(v37);
          while (__stxr(v38 + 1, v37));
          v39 = *((_QWORD *)&v279 + 1);
          v40 = v280;
          v41 = v281;
          do
            v42 = __ldxr(v37);
          while (__stxr(v42 + 1, v37));
        }
        else
        {
          v39 = *((_QWORD *)&v279 + 1);
          v40 = v280;
          v41 = v281;
        }
        v315.__r_.__value_.__l.__size_ = (std::string::size_type)v35;
        v315.__r_.__value_.__r.__words[2] = (std::string::size_type)v36;
        v316 = *((_QWORD *)&v278 + 1);
        v317 = v279;
        v318 = v39;
        v319 = v40;
        v320 = v41;
        if (v36)
        {
          p_shared_owners = (unint64_t *)&v36->__shared_owners_;
          do
            v44 = __ldaxr(p_shared_owners);
          while (__stlxr(v44 - 1, p_shared_owners));
          if (!v44)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
        sub_21098D6D0((uint64_t)v304, (uint64_t)&v315);
        v291.__r_.__value_.__r.__words[0] = v11;
        *(_OWORD *)&v291.__r_.__value_.__r.__words[1] = *(_OWORD *)v304;
        v292 = *(_OWORD *)&v304[16];
        v293 = v305;
        v294 = v306;
        LOBYTE(v295) = 0;
        v303 = 0;
        v45 = v314;
        if (v314)
        {
          v295 = &off_24CA79890;
          v46 = v307;
          v47 = v308;
          if (v308)
          {
            v48 = (unint64_t *)&v308->__shared_owners_;
            do
              v49 = __ldxr(v48);
            while (__stxr(v49 + 1, v48));
            v50 = v311;
            v51 = v312;
            v52 = v313;
            do
              v53 = __ldxr(v48);
            while (__stxr(v53 + 1, v48));
          }
          else
          {
            v50 = v311;
            v51 = v312;
            v52 = v313;
          }
          v296 = v46;
          v297 = v47;
          v298 = v309;
          v299 = v310;
          v300 = v50;
          v301 = v51;
          v302 = v52;
          if (v47)
          {
            v75 = (unint64_t *)&v47->__shared_owners_;
            do
              v76 = __ldaxr(v75);
            while (__stlxr(v76 - 1, v75));
            if (!v76)
            {
              ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
              std::__shared_weak_count::__release_weak(v47);
            }
          }
          v303 = 1;
        }
        sub_2109919F0(a3, v12, (uint64_t)&v291);
        if (v45)
        {
          v77 = v297;
          if (v297)
          {
            v78 = (unint64_t *)&v297->__shared_owners_;
            do
              v79 = __ldaxr(v78);
            while (__stlxr(v79 - 1, v78));
            if (!v79)
            {
              ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
              std::__shared_weak_count::__release_weak(v77);
            }
          }
        }
        if (v314)
        {
          v80 = v308;
          if (v308)
          {
            v81 = (unint64_t *)&v308->__shared_owners_;
            do
              v82 = __ldaxr(v81);
            while (__stlxr(v82 - 1, v81));
            if (!v82)
            {
              ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
              std::__shared_weak_count::__release_weak(v80);
            }
          }
        }
        v72 = (std::__shared_weak_count *)v315.__r_.__value_.__r.__words[2];
        if (!v315.__r_.__value_.__r.__words[2])
        {
LABEL_154:
          v25 = v290;
          if (v290 == -1)
            goto LABEL_156;
LABEL_155:
          ((void (*)(_BYTE *, void **))off_24CA82A80[v25])(v334, v277);
          goto LABEL_156;
        }
        v83 = (unint64_t *)(v315.__r_.__value_.__r.__words[2] + 8);
        do
          v74 = __ldaxr(v83);
        while (__stlxr(v74 - 1, v83));
        goto LABEL_153;
      }
      if ((_DWORD)v9 == 1)
        break;
      if ((_DWORD)v9)
        goto LABEL_24;
      *(_QWORD *)v334 = v11;
      *(_OWORD *)&v334[8] = *(_OWORD *)v277;
      *(_OWORD *)&v334[24] = v278;
      *(_OWORD *)&v334[40] = v279;
      LODWORD(v335) = v280;
      LOBYTE(v336) = 0;
      v344 = 0;
      v13 = v289;
      if (v289)
      {
        v336 = &off_24CA79890;
        v14 = v282;
        v15 = v283;
        if (v283)
        {
          v16 = (unint64_t *)&v283->__shared_owners_;
          do
            v17 = __ldxr(v16);
          while (__stxr(v17 + 1, v16));
          v18 = v286;
          v19 = v287;
          v20 = v288;
          do
            v21 = __ldxr(v16);
          while (__stxr(v21 + 1, v16));
        }
        else
        {
          v18 = v286;
          v19 = v287;
          v20 = v288;
        }
        v337 = v14;
        v338 = v15;
        v339 = v284;
        LODWORD(v340) = v285;
        v341 = v18;
        v342 = v19;
        v343 = v20;
        if (v15)
        {
          v70 = (unint64_t *)&v15->__shared_owners_;
          do
            v71 = __ldaxr(v70);
          while (__stlxr(v71 - 1, v70));
          if (!v71)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
        v344 = 1;
      }
      sub_2109919F0(a3, v12, (uint64_t)v334);
      if (!v13)
        goto LABEL_154;
      v72 = v338;
      if (!v338)
        goto LABEL_154;
      v73 = (unint64_t *)&v338->__shared_owners_;
      do
        v74 = __ldaxr(v73);
      while (__stlxr(v74 - 1, v73));
LABEL_153:
      if (v74)
        goto LABEL_154;
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
      v25 = v290;
      if (v290 != -1)
        goto LABEL_155;
LABEL_156:
      v290 = -1;
      if (*(_BYTE *)(a3 + 8))
        goto LABEL_357;
      *(_QWORD *)a3 = &off_24CA79A00;
      v99 = *(std::__shared_weak_count **)(a3 + 24);
      if (!v99)
        goto LABEL_421;
      v100 = (unint64_t *)&v99->__shared_owners_;
      do
        v101 = __ldaxr(v100);
      while (__stlxr(v101 - 1, v100));
      if (!v101)
      {
        ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
        std::__shared_weak_count::__release_weak(v99);
        if (*(_BYTE *)(v7 + 168 * v6 + 120))
          v124 = v264 == 0;
        else
          v124 = 0;
        if (!v124)
          goto LABEL_200;
      }
      else
      {
LABEL_421:
        if (*(_BYTE *)(v7 + 168 * v6 + 120))
          v102 = v264 == 0;
        else
          v102 = 0;
        if (!v102)
          goto LABEL_200;
      }
LABEL_166:
      v103 = *(_QWORD *)(v7 + 168 * v6 + 112);
      if (!v103)
        sub_2108B30F0();
      (*(void (**)(_BYTE *__return_ptr, uint64_t, __int128 *))(*(_QWORD *)v103 + 48))(v334, v103, &v251);
      if (v334[8])
      {
        sub_2108AE440(&v250);
        v104 = std::string::insert((std::string *)v304, 0, "Failure verifying model input ", 0x1EuLL);
        v105 = *(_OWORD *)&v104->__r_.__value_.__l.__data_;
        v291.__r_.__value_.__r.__words[2] = v104->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v291.__r_.__value_.__l.__data_ = v105;
        v104->__r_.__value_.__l.__size_ = 0;
        v104->__r_.__value_.__r.__words[2] = 0;
        v104->__r_.__value_.__r.__words[0] = 0;
        v106 = std::string::append(&v291, ": ", 2uLL);
        v107 = *(_OWORD *)&v106->__r_.__value_.__l.__data_;
        v321.__r_.__value_.__r.__words[2] = v106->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v321.__r_.__value_.__l.__data_ = v107;
        v106->__r_.__value_.__l.__size_ = 0;
        v106->__r_.__value_.__r.__words[2] = 0;
        v106->__r_.__value_.__r.__words[0] = 0;
        v108 = *(char *)(*(_QWORD *)&v334[16] + 23);
        if (v108 >= 0)
          v109 = *(const std::string::value_type **)&v334[16];
        else
          v109 = **(const std::string::value_type ***)&v334[16];
        if (v108 >= 0)
          v110 = *(unsigned __int8 *)(*(_QWORD *)&v334[16] + 23);
        else
          v110 = *(_QWORD *)(*(_QWORD *)&v334[16] + 8);
        v111 = std::string::append(&v321, v109, v110);
        v113 = (void *)v111->__r_.__value_.__r.__words[0];
        v112 = v111->__r_.__value_.__l.__size_;
        LODWORD(v315.__r_.__value_.__l.__data_) = v111->__r_.__value_.__r.__words[2];
        *(_DWORD *)((char *)v315.__r_.__value_.__r.__words + 3) = *(_DWORD *)((char *)&v111->__r_.__value_.__r.__words[2]
                                                                            + 3);
        v114 = SHIBYTE(v111->__r_.__value_.__r.__words[2]);
        v111->__r_.__value_.__l.__size_ = 0;
        v111->__r_.__value_.__r.__words[2] = 0;
        v111->__r_.__value_.__r.__words[0] = 0;
        *(_QWORD *)a3 = &off_24CA79A00;
        *(_BYTE *)(a3 + 8) = v334[8];
        v115 = operator new();
        v116 = v115;
        if (v114 < 0)
        {
          sub_2108B314C((_BYTE *)v115, v113, v112);
        }
        else
        {
          *(_QWORD *)v115 = v113;
          *(_QWORD *)(v115 + 8) = v112;
          *(_DWORD *)(v115 + 16) = v315.__r_.__value_.__l.__data_;
          *(_DWORD *)(v115 + 19) = *(_DWORD *)((char *)v315.__r_.__value_.__r.__words + 3);
          *(_BYTE *)(v115 + 23) = v114;
        }
        *(_QWORD *)(a3 + 16) = v116;
        v120 = (_QWORD *)operator new();
        *v120 = &unk_24CA7A1D8;
        v120[1] = 0;
        v120[2] = 0;
        v120[3] = v116;
        *(_QWORD *)(a3 + 24) = v120;
        if (v114 < 0)
        {
          operator delete(v113);
          if (SHIBYTE(v321.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_190;
LABEL_185:
          if ((SHIBYTE(v291.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_186;
LABEL_191:
          operator delete(v291.__r_.__value_.__l.__data_);
          if ((v304[23] & 0x80000000) != 0)
            goto LABEL_192;
LABEL_187:
          *(_QWORD *)v334 = &off_24CA79A00;
          v121 = *(std::__shared_weak_count **)&v334[24];
          if (!*(_QWORD *)&v334[24])
            goto LABEL_357;
        }
        else
        {
          if ((SHIBYTE(v321.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_185;
LABEL_190:
          operator delete(v321.__r_.__value_.__l.__data_);
          if (SHIBYTE(v291.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_191;
LABEL_186:
          if ((v304[23] & 0x80000000) == 0)
            goto LABEL_187;
LABEL_192:
          operator delete(*(void **)v304);
          *(_QWORD *)v334 = &off_24CA79A00;
          v121 = *(std::__shared_weak_count **)&v334[24];
          if (!*(_QWORD *)&v334[24])
            goto LABEL_357;
        }
        v122 = (unint64_t *)&v121->__shared_owners_;
        do
          v123 = __ldaxr(v122);
        while (__stlxr(v123 - 1, v122));
LABEL_316:
        if (!v123)
        {
          ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
          std::__shared_weak_count::__release_weak(v121);
        }
        goto LABEL_357;
      }
      *(_QWORD *)v334 = &off_24CA79A00;
      v117 = *(std::__shared_weak_count **)&v334[24];
      if (*(_QWORD *)&v334[24])
      {
        v118 = (unint64_t *)(*(_QWORD *)&v334[24] + 8);
        do
          v119 = __ldaxr(v118);
        while (__stlxr(v119 - 1, v118));
        if (!v119)
        {
          ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
          std::__shared_weak_count::__release_weak(v117);
          if (!*(_BYTE *)(v7 + 168 * v6 + 160))
            goto LABEL_356;
          goto LABEL_201;
        }
      }
LABEL_200:
      if (!*(_BYTE *)(v7 + 168 * v6 + 160))
        goto LABEL_356;
LABEL_201:
      if (v264)
      {
        if (v264 != 2)
        {
          if (v264 == 1)
          {
            sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Execution.cpp", 286, (uint64_t)&unk_210A01421, 0, (uint64_t)"DataView32f verification not yet implemented", 44, (void (*)(void **))sub_2109EDDB4);
            abort();
          }
          goto LABEL_356;
        }
        *(_QWORD *)v334 = &off_24CA79890;
        v125 = *((_QWORD *)&v251 + 1);
        v126 = (std::__shared_weak_count *)v252;
        if ((_QWORD)v252)
        {
          v127 = (unint64_t *)(v252 + 8);
          do
            v128 = __ldxr(v127);
          while (__stxr(v128 + 1, v127));
          v129 = *((_QWORD *)&v253 + 1);
          v130 = v254;
          v131 = v255;
          do
            v132 = __ldxr(v127);
          while (__stxr(v132 + 1, v127));
        }
        else
        {
          v129 = *((_QWORD *)&v253 + 1);
          v130 = v254;
          v131 = v255;
        }
        *(_QWORD *)&v334[8] = v125;
        *(_QWORD *)&v334[16] = v126;
        *(_QWORD *)&v334[24] = *((_QWORD *)&v252 + 1);
        *(_DWORD *)&v334[32] = v253;
        *(_QWORD *)&v334[40] = v129;
        *(_DWORD *)&v334[48] = v130;
        *(_WORD *)&v334[52] = v131;
        if (v126)
        {
          v141 = (unint64_t *)&v126->__shared_owners_;
          do
            v142 = __ldaxr(v141);
          while (__stlxr(v142 - 1, v141));
          if (!v142)
          {
            ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
            std::__shared_weak_count::__release_weak(v126);
          }
        }
        v143 = *(_QWORD *)(v7 + 168 * v6 + 152);
        if (!v143)
          sub_2108B30F0();
        (*(void (**)(std::string *__return_ptr, uint64_t, _BYTE *))(*(_QWORD *)v143 + 48))(&v321, v143, v334);
        if (!v321.__r_.__value_.__s.__data_[8])
        {
          v321.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24CA79A00;
          v157 = (std::__shared_weak_count *)v322;
          if ((_QWORD)v322)
          {
            v158 = (unint64_t *)(v322 + 8);
            do
              v159 = __ldaxr(v158);
            while (__stlxr(v159 - 1, v158));
            if (!v159)
            {
              ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
              std::__shared_weak_count::__release_weak(v157);
            }
          }
          v160 = *(std::__shared_weak_count **)&v334[16];
          if (*(_QWORD *)&v334[16])
          {
            v161 = (unint64_t *)(*(_QWORD *)&v334[16] + 8);
            do
              v162 = __ldaxr(v161);
            while (__stlxr(v162 - 1, v161));
            if (!v162)
            {
              ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
              std::__shared_weak_count::__release_weak(v160);
            }
          }
          goto LABEL_356;
        }
        sub_2108AE440(&v250);
        v144 = std::string::insert(&v315, 0, "Failure verifying model input ", 0x1EuLL);
        v145 = *(_OWORD *)&v144->__r_.__value_.__l.__data_;
        *(_QWORD *)&v304[16] = *((_QWORD *)&v144->__r_.__value_.__l + 2);
        *(_OWORD *)v304 = v145;
        v144->__r_.__value_.__l.__size_ = 0;
        v144->__r_.__value_.__r.__words[2] = 0;
        v144->__r_.__value_.__r.__words[0] = 0;
        v146 = std::string::append((std::string *)v304, ", image: ", 9uLL);
        v147 = *(_OWORD *)&v146->__r_.__value_.__l.__data_;
        v291.__r_.__value_.__r.__words[2] = v146->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v291.__r_.__value_.__l.__data_ = v147;
        v146->__r_.__value_.__l.__size_ = 0;
        v146->__r_.__value_.__r.__words[2] = 0;
        v146->__r_.__value_.__r.__words[0] = 0;
        v148 = *(char *)(v321.__r_.__value_.__r.__words[2] + 23);
        if (v148 >= 0)
          v149 = (const std::string::value_type *)v321.__r_.__value_.__r.__words[2];
        else
          v149 = *(const std::string::value_type **)v321.__r_.__value_.__r.__words[2];
        if (v148 >= 0)
          v150 = *(unsigned __int8 *)(v321.__r_.__value_.__r.__words[2] + 23);
        else
          v150 = *(_QWORD *)(v321.__r_.__value_.__r.__words[2] + 8);
        v151 = std::string::append(&v291, v149, v150);
        v153 = (void *)v151->__r_.__value_.__r.__words[0];
        v152 = v151->__r_.__value_.__l.__size_;
        LODWORD(v273.__r_.__value_.__l.__data_) = v151->__r_.__value_.__r.__words[2];
        *(_DWORD *)((char *)v273.__r_.__value_.__r.__words + 3) = *(_DWORD *)((char *)&v151->__r_.__value_.__r.__words[2]
                                                                            + 3);
        v154 = SHIBYTE(v151->__r_.__value_.__r.__words[2]);
        v151->__r_.__value_.__l.__size_ = 0;
        v151->__r_.__value_.__r.__words[2] = 0;
        v151->__r_.__value_.__r.__words[0] = 0;
        *(_QWORD *)a3 = &off_24CA79A00;
        *(_BYTE *)(a3 + 8) = v321.__r_.__value_.__s.__data_[8];
        v155 = operator new();
        v156 = v155;
        if (v154 < 0)
        {
          sub_2108B314C((_BYTE *)v155, v153, v152);
        }
        else
        {
          *(_QWORD *)v155 = v153;
          *(_QWORD *)(v155 + 8) = v152;
          *(_DWORD *)(v155 + 16) = v273.__r_.__value_.__l.__data_;
          *(_DWORD *)(v155 + 19) = *(_DWORD *)((char *)v273.__r_.__value_.__r.__words + 3);
          *(_BYTE *)(v155 + 23) = v154;
        }
        *(_QWORD *)(a3 + 16) = v156;
        v202 = (_QWORD *)operator new();
        *v202 = &unk_24CA7A1D8;
        v202[1] = 0;
        v202[2] = 0;
        v202[3] = v156;
        *(_QWORD *)(a3 + 24) = v202;
        if (v154 < 0)
        {
          operator delete(v153);
          if (SHIBYTE(v291.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_306;
LABEL_301:
          if ((v304[23] & 0x80000000) == 0)
            goto LABEL_302;
LABEL_307:
          operator delete(*(void **)v304);
          if (SHIBYTE(v315.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_308;
LABEL_303:
          v321.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24CA79A00;
          v203 = (std::__shared_weak_count *)v322;
          if ((_QWORD)v322)
          {
LABEL_309:
            v204 = (unint64_t *)&v203->__shared_owners_;
            do
              v205 = __ldaxr(v204);
            while (__stlxr(v205 - 1, v204));
            if (!v205)
            {
              ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
              std::__shared_weak_count::__release_weak(v203);
            }
          }
        }
        else
        {
          if ((SHIBYTE(v291.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_301;
LABEL_306:
          operator delete(v291.__r_.__value_.__l.__data_);
          if ((v304[23] & 0x80000000) != 0)
            goto LABEL_307;
LABEL_302:
          if ((SHIBYTE(v315.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_303;
LABEL_308:
          operator delete(v315.__r_.__value_.__l.__data_);
          v321.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24CA79A00;
          v203 = (std::__shared_weak_count *)v322;
          if ((_QWORD)v322)
            goto LABEL_309;
        }
        v121 = *(std::__shared_weak_count **)&v334[16];
        if (!*(_QWORD *)&v334[16])
          goto LABEL_357;
        v206 = (unint64_t *)(*(_QWORD *)&v334[16] + 8);
        do
          v123 = __ldaxr(v206);
        while (__stlxr(v123 - 1, v206));
        goto LABEL_316;
      }
      *(_OWORD *)v334 = v251;
      *(_OWORD *)&v334[16] = v252;
      *(_OWORD *)&v334[32] = v253;
      *(_DWORD *)&v334[48] = v254;
      LOBYTE(v335) = 0;
      LOBYTE(v342) = 0;
      if (v263)
      {
        v335 = &off_24CA79890;
        v133 = v256;
        v134 = v257;
        if (v257)
        {
          v135 = (unint64_t *)&v257->__shared_owners_;
          do
            v136 = __ldxr(v135);
          while (__stxr(v136 + 1, v135));
          v137 = v260;
          v138 = v261;
          v139 = v262;
          do
            v140 = __ldxr(v135);
          while (__stxr(v140 + 1, v135));
        }
        else
        {
          v137 = v260;
          v138 = v261;
          v139 = v262;
        }
        v336 = v133;
        v337 = v134;
        v338 = v258;
        LODWORD(v339) = v259;
        v340 = v137;
        LODWORD(v341) = v138;
        WORD2(v341) = v139;
        if (v134)
        {
          v163 = (unint64_t *)&v134->__shared_owners_;
          do
            v164 = __ldaxr(v163);
          while (__stlxr(v164 - 1, v163));
          if (!v164)
          {
            ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
            std::__shared_weak_count::__release_weak(v134);
          }
        }
        LOBYTE(v342) = 1;
      }
      v165 = *(unsigned int *)&v334[12];
      if (!*(_DWORD *)&v334[12])
      {
        v176 = 1;
        if ((_BYTE)v342)
          goto LABEL_351;
        goto LABEL_355;
      }
      v166 = *(unsigned int *)&v334[16];
      if (!*(_DWORD *)&v334[16])
      {
LABEL_296:
        v176 = 1;
        if ((_BYTE)v342)
          goto LABEL_351;
        goto LABEL_355;
      }
      v167 = 0;
      v168 = (_QWORD *)(v7 + 168 * v6 + 152);
      v276 = 0;
LABEL_256:
      v169 = 0;
      while (1)
      {
        v275 = v169;
        sub_21098B76C((uint64_t)v334, v276, v169, (uint64_t)&v321);
        if (!*v168)
          sub_2108B30F0();
        (*(void (**)(std::string *__return_ptr, _QWORD, std::string *))(*(_QWORD *)*v168 + 48))(&v291, *v168, &v321);
        if (v291.__r_.__value_.__s.__data_[8])
          break;
        v291.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24CA79A00;
        v170 = (std::__shared_weak_count *)v292;
        if (!(_QWORD)v292)
          goto LABEL_264;
        v171 = (unint64_t *)(v292 + 8);
        do
          v172 = __ldaxr(v171);
        while (__stlxr(v172 - 1, v171));
        if (!v172)
        {
          ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
          std::__shared_weak_count::__release_weak(v170);
          v173 = (std::__shared_weak_count *)v321.__r_.__value_.__r.__words[2];
          if (v321.__r_.__value_.__r.__words[2])
          {
LABEL_265:
            v174 = (unint64_t *)&v173->__shared_owners_;
            do
              v175 = __ldaxr(v174);
            while (__stlxr(v175 - 1, v174));
            if (!v175)
            {
              ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
              std::__shared_weak_count::__release_weak(v173);
            }
          }
        }
        else
        {
LABEL_264:
          v173 = (std::__shared_weak_count *)v321.__r_.__value_.__r.__words[2];
          if (v321.__r_.__value_.__r.__words[2])
            goto LABEL_265;
        }
        if (++v169 == v166)
        {
          while (++v167 != v165)
          {
            v166 = *(unsigned int *)&v334[16];
            v276 = v167;
            if (*(_DWORD *)&v334[16])
              goto LABEL_256;
          }
          goto LABEL_296;
        }
      }
      sub_2108AE440(&v250);
      v177 = std::string::insert(&v269, 0, "Failure verifying model input ", 0x1EuLL);
      v178 = *(_OWORD *)&v177->__r_.__value_.__l.__data_;
      v270.__r_.__value_.__r.__words[2] = v177->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v270.__r_.__value_.__l.__data_ = v178;
      v177->__r_.__value_.__l.__size_ = 0;
      v177->__r_.__value_.__r.__words[2] = 0;
      v177->__r_.__value_.__r.__words[0] = 0;
      v179 = std::string::append(&v270, ", image ", 8uLL);
      v180 = *(_OWORD *)&v179->__r_.__value_.__l.__data_;
      v271.__r_.__value_.__r.__words[2] = v179->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v271.__r_.__value_.__l.__data_ = v180;
      v179->__r_.__value_.__l.__size_ = 0;
      v179->__r_.__value_.__r.__words[2] = 0;
      v179->__r_.__value_.__r.__words[0] = 0;
      sub_2108AE440(&v276);
      if ((v268 & 0x80u) == 0)
        v181 = v267;
      else
        v181 = (void **)v267[0];
      if ((v268 & 0x80u) == 0)
        v182 = v268;
      else
        v182 = (std::string::size_type)v267[1];
      v183 = std::string::append(&v271, (const std::string::value_type *)v181, v182);
      v184 = *(_OWORD *)&v183->__r_.__value_.__l.__data_;
      v272.__r_.__value_.__r.__words[2] = v183->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v272.__r_.__value_.__l.__data_ = v184;
      v183->__r_.__value_.__l.__size_ = 0;
      v183->__r_.__value_.__r.__words[2] = 0;
      v183->__r_.__value_.__r.__words[0] = 0;
      v185 = std::string::append(&v272, " of batch ", 0xAuLL);
      v186 = *(_OWORD *)&v185->__r_.__value_.__l.__data_;
      v273.__r_.__value_.__r.__words[2] = v185->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v273.__r_.__value_.__l.__data_ = v186;
      v185->__r_.__value_.__l.__size_ = 0;
      v185->__r_.__value_.__r.__words[2] = 0;
      v185->__r_.__value_.__r.__words[0] = 0;
      sub_2108AE440(&v275);
      if ((v266 & 0x80u) == 0)
        v187 = __p;
      else
        v187 = (void **)__p[0];
      if ((v266 & 0x80u) == 0)
        v188 = v266;
      else
        v188 = (std::string::size_type)__p[1];
      v189 = std::string::append(&v273, (const std::string::value_type *)v187, v188);
      v190 = *(_OWORD *)&v189->__r_.__value_.__l.__data_;
      v315.__r_.__value_.__r.__words[2] = v189->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v315.__r_.__value_.__l.__data_ = v190;
      v189->__r_.__value_.__l.__size_ = 0;
      v189->__r_.__value_.__r.__words[2] = 0;
      v189->__r_.__value_.__r.__words[0] = 0;
      v191 = std::string::append(&v315, ": ", 2uLL);
      v192 = *(_OWORD *)&v191->__r_.__value_.__l.__data_;
      *(_QWORD *)&v304[16] = *((_QWORD *)&v191->__r_.__value_.__l + 2);
      *(_OWORD *)v304 = v192;
      v191->__r_.__value_.__l.__size_ = 0;
      v191->__r_.__value_.__r.__words[2] = 0;
      v191->__r_.__value_.__r.__words[0] = 0;
      v193 = *(char *)(v291.__r_.__value_.__r.__words[2] + 23);
      if (v193 >= 0)
        v194 = (const std::string::value_type *)v291.__r_.__value_.__r.__words[2];
      else
        v194 = *(const std::string::value_type **)v291.__r_.__value_.__r.__words[2];
      if (v193 >= 0)
        v195 = *(unsigned __int8 *)(v291.__r_.__value_.__r.__words[2] + 23);
      else
        v195 = *(_QWORD *)(v291.__r_.__value_.__r.__words[2] + 8);
      v196 = std::string::append((std::string *)v304, v194, v195);
      v198 = (void *)v196->__r_.__value_.__r.__words[0];
      v197 = v196->__r_.__value_.__l.__size_;
      v274[0] = v196->__r_.__value_.__r.__words[2];
      *(_DWORD *)((char *)v274 + 3) = *(_DWORD *)((char *)&v196->__r_.__value_.__r.__words[2] + 3);
      v199 = SHIBYTE(v196->__r_.__value_.__r.__words[2]);
      v196->__r_.__value_.__l.__size_ = 0;
      v196->__r_.__value_.__r.__words[2] = 0;
      v196->__r_.__value_.__r.__words[0] = 0;
      *(_QWORD *)a3 = &off_24CA79A00;
      *(_BYTE *)(a3 + 8) = v291.__r_.__value_.__s.__data_[8];
      v200 = operator new();
      v201 = v200;
      if (v199 < 0)
      {
        sub_2108B314C((_BYTE *)v200, v198, v197);
      }
      else
      {
        *(_QWORD *)v200 = v198;
        *(_QWORD *)(v200 + 8) = v197;
        *(_DWORD *)(v200 + 16) = v274[0];
        *(_DWORD *)(v200 + 19) = *(_DWORD *)((char *)v274 + 3);
        *(_BYTE *)(v200 + 23) = v199;
      }
      *(_QWORD *)(a3 + 16) = v201;
      v207 = (_QWORD *)operator new();
      *v207 = &unk_24CA7A1D8;
      v207[1] = 0;
      v207[2] = 0;
      v207[3] = v201;
      *(_QWORD *)(a3 + 24) = v207;
      if (v199 < 0)
      {
        operator delete(v198);
        if ((v304[23] & 0x80000000) != 0)
          goto LABEL_332;
LABEL_321:
        if ((SHIBYTE(v315.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_322;
LABEL_333:
        operator delete(v315.__r_.__value_.__l.__data_);
        if ((char)v266 < 0)
          goto LABEL_334;
LABEL_323:
        if ((SHIBYTE(v273.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_324;
LABEL_335:
        operator delete(v273.__r_.__value_.__l.__data_);
        if (SHIBYTE(v272.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_336;
LABEL_325:
        if (((char)v268 & 0x80000000) == 0)
          goto LABEL_326;
LABEL_337:
        operator delete(v267[0]);
        if (SHIBYTE(v271.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_338;
LABEL_327:
        if ((SHIBYTE(v270.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_328;
LABEL_339:
        operator delete(v270.__r_.__value_.__l.__data_);
        if (SHIBYTE(v269.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_340;
LABEL_329:
        v291.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24CA79A00;
        v208 = (std::__shared_weak_count *)v292;
        if ((_QWORD)v292)
        {
LABEL_341:
          v209 = (unint64_t *)&v208->__shared_owners_;
          do
            v210 = __ldaxr(v209);
          while (__stlxr(v210 - 1, v209));
          if (!v210)
          {
            ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
            std::__shared_weak_count::__release_weak(v208);
          }
        }
      }
      else
      {
        if ((v304[23] & 0x80000000) == 0)
          goto LABEL_321;
LABEL_332:
        operator delete(*(void **)v304);
        if (SHIBYTE(v315.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_333;
LABEL_322:
        if (((char)v266 & 0x80000000) == 0)
          goto LABEL_323;
LABEL_334:
        operator delete(__p[0]);
        if (SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_335;
LABEL_324:
        if ((SHIBYTE(v272.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_325;
LABEL_336:
        operator delete(v272.__r_.__value_.__l.__data_);
        if ((char)v268 < 0)
          goto LABEL_337;
LABEL_326:
        if ((SHIBYTE(v271.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_327;
LABEL_338:
        operator delete(v271.__r_.__value_.__l.__data_);
        if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_339;
LABEL_328:
        if ((SHIBYTE(v269.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_329;
LABEL_340:
        operator delete(v269.__r_.__value_.__l.__data_);
        v291.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24CA79A00;
        v208 = (std::__shared_weak_count *)v292;
        if ((_QWORD)v292)
          goto LABEL_341;
      }
      v211 = (std::__shared_weak_count *)v321.__r_.__value_.__r.__words[2];
      if (v321.__r_.__value_.__r.__words[2])
      {
        v212 = (unint64_t *)(v321.__r_.__value_.__r.__words[2] + 8);
        do
          v213 = __ldaxr(v212);
        while (__stlxr(v213 - 1, v212));
        if (!v213)
        {
          ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
          std::__shared_weak_count::__release_weak(v211);
        }
      }
      v176 = 0;
      if (!(_BYTE)v342)
        goto LABEL_355;
LABEL_351:
      v214 = v337;
      if (v337)
      {
        v215 = (unint64_t *)&v337->__shared_owners_;
        do
          v216 = __ldaxr(v215);
        while (__stlxr(v216 - 1, v215));
        if (!v216)
        {
          ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
          std::__shared_weak_count::__release_weak(v214);
          if ((v176 & 1) == 0)
            goto LABEL_357;
LABEL_356:
          *(_QWORD *)a3 = &off_24CA79A00;
          *(_BYTE *)(a3 + 8) = 0;
          v217 = operator new();
          v3 &= 0xFFFFFFFFFFFFFF00;
          *(_QWORD *)v217 = v3;
          *(_BYTE *)(v217 + 23) = 0;
          *(_QWORD *)(a3 + 16) = v217;
          v218 = (_QWORD *)operator new();
          *v218 = &unk_24CA7A1D8;
          v218[1] = 0;
          v218[2] = 0;
          v218[3] = v217;
          *(_QWORD *)(a3 + 24) = v218;
          goto LABEL_357;
        }
      }
LABEL_355:
      if ((v176 & 1) != 0)
        goto LABEL_356;
LABEL_357:
      if (v264 != -1)
        ((void (*)(_BYTE *, __int128 *))off_24CA82A80[v264])(v334, &v251);
      v264 = -1;
      if (*(_BYTE *)(a3 + 8))
        return;
      *(_QWORD *)a3 = &off_24CA79A00;
      v219 = *(std::__shared_weak_count **)(a3 + 24);
      if (v219)
      {
        v220 = (unint64_t *)&v219->__shared_owners_;
        do
          v221 = __ldaxr(v220);
        while (__stlxr(v221 - 1, v220));
        if (!v221)
        {
          ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
          std::__shared_weak_count::__release_weak(v219);
        }
      }
      if (++v6 == v247)
        goto LABEL_403;
    }
    v321.__r_.__value_.__r.__words[0] = v11;
    *(_OWORD *)&v321.__r_.__value_.__r.__words[1] = *(_OWORD *)v277;
    v322 = v278;
    v323 = v279;
    v324 = v280;
    LOBYTE(v325) = 0;
    v333 = 0;
    v26 = v289;
    if (v289)
    {
      v325 = &off_24CA79890;
      v27 = v282;
      v28 = v283;
      if (v283)
      {
        v29 = (unint64_t *)&v283->__shared_owners_;
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
        v31 = v286;
        v32 = v287;
        v33 = v288;
        do
          v34 = __ldxr(v29);
        while (__stxr(v34 + 1, v29));
      }
      else
      {
        v31 = v286;
        v32 = v287;
        v33 = v288;
      }
      v326 = v27;
      v327 = v28;
      v328 = v284;
      v329 = v285;
      v330 = v31;
      v331 = v32;
      v332 = v33;
      if (v28)
      {
        v54 = (unint64_t *)&v28->__shared_owners_;
        do
          v55 = __ldaxr(v54);
        while (__stlxr(v55 - 1, v54));
        if (!v55)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      v333 = 1;
    }
    v56 = v7 + 168 * v6;
    v57 = *(unsigned __int8 *)(v56 + 36);
    if (*(_BYTE *)(v56 + 76))
    {
      v58 = v7 + 168 * v6;
      v60 = *(_DWORD *)(v58 + 72);
      v59 = (uint64_t *)(v58 + 72);
      v61 = v322;
      if (v60 != (_DWORD)v322)
      {
        v68 = " is expected to have a batch-size of ";
        v69 = " but has ";
        goto LABEL_148;
      }
    }
    if (*(_BYTE *)(v7 + 168 * v6 + 68))
    {
      v62 = v7 + 168 * v6;
      v63 = *(_DWORD *)(v62 + 64);
      v59 = (uint64_t *)(v62 + 64);
      v61 = HIDWORD(v321.__r_.__value_.__r.__words[2]);
      if (v63 != HIDWORD(v321.__r_.__value_.__r.__words[2]))
      {
        v68 = " is expected to have ";
        v69 = " planes but has ";
        goto LABEL_148;
      }
    }
    v64 = (int *)(v10 + 32);
    v65 = v7 + 168 * v6;
    if (!*(_BYTE *)(v65 + 44))
      goto LABEL_133;
    v59 = (uint64_t *)(v65 + 40);
    if (!v57)
    {
      v61 = 4 * DWORD2(v322);
      if (*(_DWORD *)v59 != 4 * DWORD2(v322))
      {
        v68 = " of unspecified format (assumed to be Gray8) is expected to have ";
        v69 = " color components but has an incompatible pixel byte stride of ";
        goto LABEL_148;
      }
      goto LABEL_133;
    }
    v66 = *v64;
    if ((*v64 & 0xF) != 0 && (v66 & 0x70) != 0)
    {
      if ((v66 & 1) != 0)
      {
        v67 = 1;
        if ((v66 & 0x10) != 0)
          goto LABEL_123;
      }
      else
      {
        if ((v66 & 2) == 0)
        {
          if ((v66 & 0xC) == 0)
          {
            if ((DWORD2(v322) & 0x3FFFFFFF) != 0)
              goto LABEL_373;
            goto LABEL_133;
          }
          v67 = 4;
          if ((v66 & 0x10) != 0)
            goto LABEL_123;
          goto LABEL_118;
        }
        v67 = 2;
        if ((v66 & 0x10) != 0)
        {
LABEL_123:
          if (v67 != (unint64_t)(4 * DWORD2(v322)))
            goto LABEL_371;
          goto LABEL_133;
        }
      }
LABEL_118:
      if ((v66 & 0x20) == 0)
      {
        if ((v66 & 0x40) != 0)
        {
          if (((unint64_t)(v66 & 0x40) >> 4) * v67 == 4 * DWORD2(v322))
            goto LABEL_133;
        }
        else if (!(4 * DWORD2(v322)))
        {
          goto LABEL_133;
        }
LABEL_371:
        if ((v66 & 1) != 0)
        {
          v226 = 1;
          goto LABEL_382;
        }
        if ((v66 & 2) != 0)
        {
          v226 = 2;
          goto LABEL_382;
        }
LABEL_373:
        if ((v66 & 0xC) == 0)
          goto LABEL_389;
        v226 = 4;
LABEL_382:
        if ((v66 & 0x10) != 0)
        {
          LODWORD(v230) = 1;
          goto LABEL_388;
        }
        if ((v66 & 0x20) != 0)
        {
          LODWORD(v230) = 2;
          goto LABEL_388;
        }
        v229 = v66 & 0x40;
        if ((_DWORD)v229)
        {
          v230 = v229 >> 4;
LABEL_388:
          v84 = v230 * (unint64_t)v226;
          v86 = " is expected to have ";
          LOBYTE(v85) = 1;
LABEL_390:
          v87 = " bytes per pixel but has an incompatible pixel byte stride of ";
          goto LABEL_391;
        }
LABEL_389:
        v84 = 0;
        LOBYTE(v85) = 0;
        v86 = " is expected to have ";
        goto LABEL_390;
      }
      if (2 * v67 != 4 * DWORD2(v322))
        goto LABEL_371;
LABEL_133:
      if (*(_BYTE *)(v7 + 168 * v6 + 52)
        && (v88 = v7 + 168 * v6,
            v89 = *(_DWORD *)(v88 + 48),
            v59 = (uint64_t *)(v88 + 48),
            v61 = HIDWORD(v321.__r_.__value_.__r.__words[1]),
            v89 != HIDWORD(v321.__r_.__value_.__r.__words[1])))
      {
        v68 = " is expected to have a width of ";
        v69 = " but has width ";
      }
      else
      {
        if (!*(_BYTE *)(v7 + 168 * v6 + 60)
          || (v90 = v7 + 168 * v6,
              v91 = *(_DWORD *)(v90 + 56),
              v59 = (uint64_t *)(v90 + 56),
              v61 = v321.__r_.__value_.__r.__words[2],
              v91 == LODWORD(v321.__r_.__value_.__r.__words[2])))
        {
          if (!v57)
          {
            *(_QWORD *)a3 = &off_24CA79A00;
            *(_BYTE *)(a3 + 8) = 0;
            v222 = operator new();
            v246 &= 0xFFFFFFFFFFFFFF00;
            *(_QWORD *)v222 = v246;
            *(_BYTE *)(v222 + 23) = 0;
            *(_QWORD *)(a3 + 16) = v222;
            v223 = (_QWORD *)operator new();
            *v223 = &unk_24CA7A1D8;
            v223[1] = 0;
            v223[2] = 0;
            v223[3] = v222;
            *(_QWORD *)(a3 + 24) = v223;
            goto LABEL_149;
          }
          v92 = *v64;
          if ((*v64 & 1) != 0)
          {
            v224 = sub_2109958E8(v64);
            if (!v225)
            {
              LODWORD(v96) = 4 * DWORD2(v322);
              v95 = 1;
              goto LABEL_394;
            }
            v95 = v224;
            v96 = (4 * DWORD2(v322));
            if (v224 != v96)
            {
              goto LABEL_394;
            }
          }
          else if ((v92 & 2) != 0)
          {
            v227 = sub_2109958E8(v64);
            v96 = (4 * DWORD2(v322));
            if (!v228)
            {
              v95 = 2;
              goto LABEL_394;
            }
            v95 = v227;
            if (v227 != v96)
            {
              goto LABEL_394;
            }
          }
          else if ((v92 & 4) != 0)
          {
            v93 = sub_2109958E8(v64);
            v95 = v94 ? v93 : 4;
            v96 = (4 * DWORD2(v322));
            if (v95 != v96)
            {
LABEL_394:
              sub_210992CE4(a3, v321.__r_.__value_.__r.__words[0], v97, v95, v96);
LABEL_149:
              if (!v26)
                goto LABEL_154;
              v72 = v327;
              if (!v327)
                goto LABEL_154;
              v98 = (unint64_t *)&v327->__shared_owners_;
              do
                v74 = __ldaxr(v98);
              while (__stlxr(v74 - 1, v98));
              goto LABEL_153;
            }
          }
          v315.__r_.__value_.__s.__data_[0] = 0;
          v304[23] = 0;
          v304[0] = 0;
          sub_2108C4BA4(a3, &v315, (uint64_t)v304);
          if ((v304[23] & 0x80000000) != 0)
            operator delete(*(void **)v304);
          goto LABEL_149;
        }
        v68 = " is expected to have a height of ";
        v69 = " but has height ";
      }
LABEL_148:
      sub_210991FA0(a3, v321.__r_.__value_.__r.__words[0], v68, *v59, v69, v61);
      goto LABEL_149;
    }
    if ((v66 & 0x10) != 0)
    {
      v86 = " of unspecified pixel structure (assumed to be Gray) is expected to have ";
      v84 = 1;
    }
    else
    {
      if ((v66 & 0x60) == 0)
        goto LABEL_133;
      if ((v66 & 0x20) == 0)
      {
        if (((v66 >> 4) & 4) == 4 * DWORD2(v322))
          goto LABEL_133;
        v84 = (unint64_t)(v66 & 0x40) >> 4;
        v85 = (*v64 & 0x40u) >> 6;
        v86 = " of unspecified pixel structure (assumed to be Gray) is expected to have ";
LABEL_129:
        v87 = " bytes per value but has an incompatible pixel byte stride of ";
LABEL_391:
        sub_21099253C(a3, v321.__r_.__value_.__r.__words[0], v86, *v59, v84, v85, v87, 4 * DWORD2(v322));
        goto LABEL_149;
      }
      v86 = " of unspecified pixel structure (assumed to be Gray) is expected to have ";
      v84 = 2;
    }
    LOBYTE(v85) = 1;
    goto LABEL_129;
  }
LABEL_403:
  *(_QWORD *)a3 = &off_24CA79A00;
  *(_BYTE *)(a3 + 8) = 0;
  v243 = operator new();
  *(_QWORD *)v243 = 0;
  *(_BYTE *)(v243 + 23) = 0;
  *(_QWORD *)(a3 + 16) = v243;
  v244 = (_QWORD *)operator new();
  *v244 = &unk_24CA7A1D8;
  v244[1] = 0;
  v244[2] = 0;
  v244[3] = v243;
  *(_QWORD *)(a3 + 24) = v244;
}

void sub_21098FA6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (SLOBYTE(STACK[0x317]) < 0)
    operator delete((void *)STACK[0x300]);
  sub_210991F30((uint64_t)&STACK[0x3C0]);
  sub_21095F724((uint64_t)&STACK[0x200]);
  sub_2109901A4((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_21098FDF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_210991F30((uint64_t)&STACK[0x280]);
  sub_2108B0424((uint64_t)&STACK[0x300]);
  sub_2108B1CE0((uint64_t)&STACK[0x380]);
  sub_21095F724((uint64_t)&STACK[0x200]);
  sub_2109901A4((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_21098FE30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  sub_210991F30(v29 - 224);
  sub_21095F724((uint64_t)&STACK[0x200]);
  sub_2109901A4((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_21098FE54()
{
  uint64_t v0;

  if (*(char *)(v0 + 23) < 0)
    operator delete(*(void **)v0);
  MEMORY[0x212BCC6FC](v0, 0x1012C40EC159624);
  JUMPOUT(0x21098FE88);
}

void sub_21098FEF4()
{
  if (SLOBYTE(STACK[0x217]) < 0)
    JUMPOUT(0x21098FEC8);
  JUMPOUT(0x21098FE9CLL);
}

void sub_21098FF04()
{
  uint64_t v0;

  if (*(char *)(v0 - 201) < 0)
    JUMPOUT(0x21098FEA4);
  JUMPOUT(0x21098FED8);
}

void sub_21098FF14()
{
  if (SLOBYTE(STACK[0x3D7]) < 0)
    JUMPOUT(0x21098FEE0);
  JUMPOUT(0x21098FEB4);
}

void sub_21098FF24(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x297]) < 0)
    JUMPOUT(0x21098FF30);
  _Unwind_Resume(a1);
}

void sub_21098FF40()
{
  if (SLOBYTE(STACK[0x3D7]) < 0)
    JUMPOUT(0x21098FFF8);
  JUMPOUT(0x21098FFD4);
}

void sub_21098FF50()
{
  if (SLOBYTE(STACK[0x297]) < 0)
    JUMPOUT(0x21098FFDCLL);
  JUMPOUT(0x210990008);
}

void sub_21098FF60()
{
  if ((SLOBYTE(STACK[0x317]) & 0x80000000) == 0)
    JUMPOUT(0x210990018);
  JUMPOUT(0x210990010);
}

void sub_21098FF70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  sub_2108AB288((_QWORD *)(v29 - 224));
  sub_2109901A4((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_21098FF8C()
{
  uint64_t v0;

  if (*(char *)(v0 + 23) < 0)
    operator delete(*(void **)v0);
  MEMORY[0x212BCC6FC](v0, 0x1012C40EC159624);
  JUMPOUT(0x21098FFC0);
}

void sub_210990030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_2109901A4((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_210990044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  if (*(char *)(v29 + 23) < 0)
    operator delete(*(void **)v29);
  MEMORY[0x212BCC6FC](v29, 0x1012C40EC159624);
  sub_2109901A4((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_210990080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_2109901A4((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_210990094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  if (*(char *)(v29 + 23) < 0)
    operator delete(*(void **)v29);
  MEMORY[0x212BCC6FC](v29, 0x1012C40EC159624);
  sub_21095F724((uint64_t)&STACK[0x200]);
  sub_2109901A4((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_2109900D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_21095F724((uint64_t)&STACK[0x200]);
  sub_2109901A4((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_2109900F4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = LODWORD(STACK[0x278]);
  if ((_DWORD)v1 != -1)
    ((void (*)(uint64_t, unint64_t *))off_24CA82A80[v1])(v0 - 224, &STACK[0x200]);
  JUMPOUT(0x210990194);
}

void sub_210990128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_2109901A4((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_21099013C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,int a45)
{
  uint64_t v45;
  uint64_t v46;

  if (a45 != -1)
    ((void (*)(uint64_t, uint64_t))off_24CA82A80[a45])(v46 - 224, v45);
  _Unwind_Resume(a1);
}

void sub_210990174()
{
  JUMPOUT(0x21099017CLL);
}

uint64_t sub_2109901A4(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 128);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24CA82A80[v2])(&v4, a1 + 8);
  *(_DWORD *)(a1 + 128) = -1;
  return a1;
}

_QWORD *sub_2109901FC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  __int128 v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  int v9;
  __int16 v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *result;
  _OWORD v15[3];
  int v16;
  uint64_t (**v17)();
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  __int16 v24;
  char v25;
  int v26;
  char v27;

  v3 = *(_OWORD *)(a1 + 16);
  v15[0] = *(_OWORD *)a1;
  v15[1] = v3;
  v15[2] = *(_OWORD *)(a1 + 32);
  v16 = *(_DWORD *)(a1 + 48);
  LOBYTE(v17) = 0;
  v25 = 0;
  if (*(_BYTE *)(a1 + 112))
  {
    v17 = &off_24CA79890;
    v4 = *(_QWORD *)(a1 + 64);
    v5 = *(std::__shared_weak_count **)(a1 + 72);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v8 = *(_QWORD *)(a1 + 96);
      v9 = *(_DWORD *)(a1 + 104);
      v10 = *(_WORD *)(a1 + 108);
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    else
    {
      v8 = *(_QWORD *)(a1 + 96);
      v9 = *(_DWORD *)(a1 + 104);
      v10 = *(_WORD *)(a1 + 108);
    }
    v18 = v4;
    v19 = v5;
    v20 = *(_QWORD *)(a1 + 80);
    v21 = *(_DWORD *)(a1 + 88);
    v22 = v8;
    v23 = v9;
    v24 = v10;
    if (v5)
    {
      v12 = (unint64_t *)&v5->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v25 = 1;
  }
  v26 = 0;
  result = sub_21098DD8C(a2, (uint64_t)v15);
  if (v26 != -1)
    return (_QWORD *)((uint64_t (*)(char *, _OWORD *))off_24CA82A80[v26])(&v27, v15);
  return result;
}

void sub_210990330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21095F724((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_210990344@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  __int128 v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  int v9;
  __int16 v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *result;
  _OWORD v15[3];
  int v16;
  uint64_t (**v17)();
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  __int16 v24;
  char v25;
  int v26;
  char v27;

  v3 = *(_OWORD *)(a1 + 16);
  v15[0] = *(_OWORD *)a1;
  v15[1] = v3;
  v15[2] = *(_OWORD *)(a1 + 32);
  v16 = *(_DWORD *)(a1 + 48);
  LOBYTE(v17) = 0;
  v25 = 0;
  if (*(_BYTE *)(a1 + 112))
  {
    v17 = &off_24CA79890;
    v4 = *(_QWORD *)(a1 + 64);
    v5 = *(std::__shared_weak_count **)(a1 + 72);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v8 = *(_QWORD *)(a1 + 96);
      v9 = *(_DWORD *)(a1 + 104);
      v10 = *(_WORD *)(a1 + 108);
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    else
    {
      v8 = *(_QWORD *)(a1 + 96);
      v9 = *(_DWORD *)(a1 + 104);
      v10 = *(_WORD *)(a1 + 108);
    }
    v18 = v4;
    v19 = v5;
    v20 = *(_QWORD *)(a1 + 80);
    v21 = *(_DWORD *)(a1 + 88);
    v22 = v8;
    v23 = v9;
    v24 = v10;
    if (v5)
    {
      v12 = (unint64_t *)&v5->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v25 = 1;
  }
  v26 = 1;
  result = sub_21098DD8C(a2, (uint64_t)v15);
  if (v26 != -1)
    return (_QWORD *)((uint64_t (*)(char *, _OWORD *))off_24CA82A80[v26])(&v27, v15);
  return result;
}

void sub_21099047C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21095F724((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_210990490(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  uint64_t (**v37)();
  uint64_t v38;
  std::__shared_weak_count *v39;
  uint64_t (**v40)();
  uint64_t v41;
  std::__shared_weak_count *v42;
  std::__shared_weak_count *v43;
  char v44;
  _BYTE v45[72];
  std::__shared_weak_count *v46;
  char v47;

  switch(*(_DWORD *)(a1 + 48))
  {
    case 1:
      v40 = &off_24CA79B48;
      sub_2108B89BC(a1, (uint64_t)&v41);
      sub_210990AE4((uint64_t)v45, (uint64_t)&v40);
      sub_2109901FC((uint64_t)v45, a2);
      if (v47)
      {
        v3 = v46;
        if (v46)
        {
          p_shared_owners = (unint64_t *)&v46->__shared_owners_;
          do
            v5 = __ldaxr(p_shared_owners);
          while (__stlxr(v5 - 1, p_shared_owners));
          if (!v5)
          {
            ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
            std::__shared_weak_count::__release_weak(v3);
          }
        }
      }
      v6 = v42;
      if (!v42)
        return;
      v7 = (unint64_t *)&v42->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      break;
    case 3:
      v37 = &off_24CA82618;
      sub_210993328(a1, (uint64_t)&v38);
      sub_210990CB0((uint64_t)&v40, (uint64_t)&v37);
      v9 = sub_210990E84((uint64_t)v45, (uint64_t)&v40);
      sub_2109901FC(v9, a2);
      if (v47)
      {
        v10 = v46;
        if (v46)
        {
          v11 = (unint64_t *)&v46->__shared_owners_;
          do
            v12 = __ldaxr(v11);
          while (__stlxr(v12 - 1, v11));
          if (!v12)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
        }
      }
      if (v44)
      {
        v13 = v43;
        if (v43)
        {
          v14 = (unint64_t *)&v43->__shared_owners_;
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 - 1, v14));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
      }
      v6 = v39;
      if (!v39)
        return;
      v16 = (unint64_t *)&v39->__shared_owners_;
      do
        v8 = __ldaxr(v16);
      while (__stlxr(v8 - 1, v16));
      break;
    case 4:
      v40 = &off_24CA809A8;
      sub_2109938DC(a1, (uint64_t)&v41);
      sub_210990F8C((uint64_t)v45, (uint64_t)&v40);
      sub_210990344((uint64_t)v45, a2);
      if (v47)
      {
        v21 = v46;
        if (v46)
        {
          v22 = (unint64_t *)&v46->__shared_owners_;
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      v6 = v42;
      if (!v42)
        return;
      v24 = (unint64_t *)&v42->__shared_owners_;
      do
        v8 = __ldaxr(v24);
      while (__stlxr(v8 - 1, v24));
      break;
    case 0x19:
      v40 = &off_24CA82520;
      sub_210993E90(a1, (uint64_t)&v41);
      sub_210991160((uint64_t)v45, (uint64_t)&v40);
      sub_2109901FC((uint64_t)v45, a2);
      if (v47)
      {
        v25 = v46;
        if (v46)
        {
          v26 = (unint64_t *)&v46->__shared_owners_;
          do
            v27 = __ldaxr(v26);
          while (__stlxr(v27 - 1, v26));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
      }
      v6 = v42;
      if (!v42)
        return;
      v28 = (unint64_t *)&v42->__shared_owners_;
      do
        v8 = __ldaxr(v28);
      while (__stlxr(v8 - 1, v28));
      break;
    case 0x1C:
      v40 = &off_24CA82808;
      sub_2109944C4(a1, (uint64_t)&v41);
      sub_210991340((uint64_t)v45, (uint64_t)&v40);
      sub_210990344((uint64_t)v45, a2);
      if (v47)
      {
        v17 = v46;
        if (v46)
        {
          v18 = (unint64_t *)&v46->__shared_owners_;
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 - 1, v18));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
      }
      v6 = v42;
      if (!v42)
        return;
      v20 = (unint64_t *)&v42->__shared_owners_;
      do
        v8 = __ldaxr(v20);
      while (__stlxr(v8 - 1, v20));
      break;
    case 0x1D:
      v40 = &off_24CA82428;
      sub_210994BF4(a1, (uint64_t)&v41);
      sub_210991524((uint64_t)v45, (uint64_t)&v40);
      sub_2109901FC((uint64_t)v45, a2);
      if (v47)
      {
        v29 = v46;
        if (v46)
        {
          v30 = (unint64_t *)&v46->__shared_owners_;
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
      }
      v6 = v42;
      if (!v42)
        return;
      v32 = (unint64_t *)&v42->__shared_owners_;
      do
        v8 = __ldaxr(v32);
      while (__stlxr(v8 - 1, v32));
      break;
    case 0x20:
      v40 = &off_24CA82710;
      sub_210995228(a1, (uint64_t)&v41);
      sub_210991704((uint64_t)v45, (uint64_t)&v40);
      sub_210990344((uint64_t)v45, a2);
      if (v47)
      {
        v33 = v46;
        if (v46)
        {
          v34 = (unint64_t *)&v46->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
        }
      }
      v6 = v42;
      if (!v42)
        return;
      v36 = (unint64_t *)&v42->__shared_owners_;
      do
        v8 = __ldaxr(v36);
      while (__stlxr(v8 - 1, v36));
      break;
    default:
      sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Execution.cpp", 340, (uint64_t)&unk_210A01421, 0, (uint64_t)"Not implemented", 15, (void (*)(void **))sub_2109EDDB4);
      abort();
  }
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_210990970(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  sub_2108B0424(v2 - 136);
  sub_21096D118((uint64_t)va1);
  sub_21098B4C0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_210990994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  sub_2108B0424(v9 - 136);
  sub_21098B69C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2109909B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_21098B69C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2109909C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  sub_2108B0424(v9 - 136);
  sub_21098B3F0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2109909E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_21098B3F0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2109909F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  sub_2108B0424(v9 - 136);
  sub_21098B458((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_210990A10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_21098B458((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_210990A24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  sub_2108B0424(v9 - 136);
  sub_210955EB0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_210990A40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_210955EB0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_210990A54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  sub_2108B0424(v9 - 136);
  sub_21098B704((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_210990A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_21098B704((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_210990A84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_21096D118((uint64_t)va1);
  sub_21098B4C0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_210990AA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_21098B4C0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_210990AB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  sub_2108B0424(v9 - 136);
  sub_2108B8838((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_210990AD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_2108B8838((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_210990AE4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  __int16 v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD v20[2];
  std::__shared_weak_count *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  __int16 v26;
  char v27;
  int v28;
  __int128 v29;
  int v30;
  char v31;
  int v32;
  uint64_t v33;
  uint64_t v34;

  v3 = *(_QWORD *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 40);
  v5 = HIDWORD(v4);
  v32 = 1;
  v33 = v3;
  v34 = 0x100000001;
  LODWORD(v29) = 1;
  *(_QWORD *)((char *)&v29 + 4) = v4;
  HIDWORD(v29) = HIDWORD(v4) * HIDWORD(v3);
  v30 = HIDWORD(v4) * HIDWORD(v3);
  v31 = 1;
  v28 = 17;
  v20[0] = &off_24CA79890;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(std::__shared_weak_count **)(a2 + 16);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    LODWORD(v5) = *(_DWORD *)(a2 + 44);
    v10 = *(_QWORD *)(a2 + 24);
    v3 = *(_QWORD *)(a2 + 32);
    v11 = *(_WORD *)(a2 + 48);
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  else
  {
    v10 = *(_QWORD *)(a2 + 24);
    v11 = *(_WORD *)(a2 + 48);
  }
  v20[1] = v6;
  v21 = v7;
  v22 = v3;
  v23 = v5;
  v24 = v10;
  v25 = 1;
  v26 = v11;
  if (v7)
  {
    v14 = (unint64_t *)&v7->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v16 = __ldaxr(v14);
    while (__stlxr(v16 - 1, v14));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v27 = 1;
  sub_21098B528(a1, 0, (__int128 *)&v32, &v29, &v28, (uint64_t)v20);
  if (v27)
  {
    v17 = v21;
    if (v21)
    {
      v18 = (unint64_t *)&v21->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
}

void sub_210990C9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2108B1C70((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_210990CB0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  __int16 v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD v20[2];
  std::__shared_weak_count *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  __int16 v26;
  char v27;
  int v28;
  __int128 v29;
  int v30;
  char v31;
  int v32;
  uint64_t v33;
  uint64_t v34;

  v3 = *(_QWORD *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 40);
  v5 = HIDWORD(v4);
  v32 = 1;
  v33 = v3;
  v34 = 0x100000001;
  LODWORD(v29) = 1;
  *(_QWORD *)((char *)&v29 + 4) = v4;
  HIDWORD(v29) = HIDWORD(v4) * HIDWORD(v3);
  v30 = HIDWORD(v4) * HIDWORD(v3);
  v31 = 1;
  v28 = 33;
  v20[0] = &off_24CA79890;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(std::__shared_weak_count **)(a2 + 16);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    LODWORD(v5) = *(_DWORD *)(a2 + 44);
    v10 = *(_QWORD *)(a2 + 24);
    v3 = *(_QWORD *)(a2 + 32);
    v11 = *(_WORD *)(a2 + 48);
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  else
  {
    v10 = *(_QWORD *)(a2 + 24);
    v11 = *(_WORD *)(a2 + 48);
  }
  v20[1] = v6;
  v21 = v7;
  v22 = v3;
  v23 = 2 * v5;
  v24 = v10;
  v25 = 3;
  v26 = v11;
  if (v7)
  {
    v14 = (unint64_t *)&v7->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v16 = __ldaxr(v14);
    while (__stlxr(v16 - 1, v14));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v27 = 1;
  sub_21098B528(a1, 0, (__int128 *)&v32, &v29, &v28, (uint64_t)v20);
  if (v27)
  {
    v17 = v21;
    if (v21)
    {
      v18 = (unint64_t *)&v21->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
}

void sub_210990E70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2108B1C70((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_210990E84(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  BOOL v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  int v14;
  int32x4_t v15;
  int v16;
  char v17;

  if (*(_BYTE *)(a2 + 112))
  {
    v4 = (uint64_t *)(a2 + 96);
    if (*(_BYTE *)(a2 + 108))
      v5 = *(_QWORD *)(a2 + 96) == 0;
    else
      v5 = 1;
    if (!v5)
    {
      v6 = *(_QWORD *)(a2 + 64);
      v7 = *(std::__shared_weak_count **)(a2 + 72);
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v6 + 88))(v6, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    }
  }
  else
  {
    v4 = (uint64_t *)(a2 + 40);
  }
  v11 = *v4;
  v12 = 2 * *(_DWORD *)(a2 + 36);
  v15 = vaddq_s32(*(int32x4_t *)(a2 + 20), *(int32x4_t *)(a2 + 20));
  v16 = v12;
  v17 = 1;
  v14 = *(_DWORD *)(a2 + 48);
  return sub_21098B528(a1, v11, (__int128 *)a2, (__int128 *)v15.i8, &v14, a2 + 56);
}

void sub_210990F8C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  __int16 v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD v20[2];
  std::__shared_weak_count *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  __int16 v26;
  char v27;
  int v28;
  __int128 v29;
  int v30;
  char v31;
  int v32;
  uint64_t v33;
  uint64_t v34;

  v3 = *(_QWORD *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 40);
  v5 = HIDWORD(v4);
  v32 = 1;
  v33 = v3;
  v34 = 0x100000001;
  LODWORD(v29) = 1;
  *(_QWORD *)((char *)&v29 + 4) = v4;
  HIDWORD(v29) = HIDWORD(v4) * HIDWORD(v3);
  v30 = HIDWORD(v4) * HIDWORD(v3);
  v31 = 1;
  v28 = 65;
  v20[0] = &off_24CA79890;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(std::__shared_weak_count **)(a2 + 16);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    LODWORD(v5) = *(_DWORD *)(a2 + 44);
    v10 = *(_QWORD *)(a2 + 24);
    v3 = *(_QWORD *)(a2 + 32);
    v11 = *(_WORD *)(a2 + 48);
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  else
  {
    v10 = *(_QWORD *)(a2 + 24);
    v11 = *(_WORD *)(a2 + 48);
  }
  v20[1] = v6;
  v21 = v7;
  v22 = v3;
  v23 = 4 * v5;
  v24 = v10;
  v25 = 4;
  v26 = v11;
  if (v7)
  {
    v14 = (unint64_t *)&v7->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v16 = __ldaxr(v14);
    while (__stlxr(v16 - 1, v14));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v27 = 1;
  sub_21098B528(a1, 0, (__int128 *)&v32, &v29, &v28, (uint64_t)v20);
  if (v27)
  {
    v17 = v21;
    if (v21)
    {
      v18 = (unint64_t *)&v21->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
}

void sub_21099114C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2108B1C70((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_210991160(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD v20[2];
  std::__shared_weak_count *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  __int16 v26;
  char v27;
  int v28;
  __int128 v29;
  int v30;
  char v31;
  int v32;
  uint64_t v33;
  uint64_t v34;

  v3 = *(_QWORD *)(a2 + 56);
  v4 = *(_DWORD *)(a2 + 52);
  v32 = 4;
  v33 = v3;
  v34 = 0x100000001;
  *(_QWORD *)&v29 = *(_QWORD *)(a2 + 44);
  DWORD2(v29) = v4;
  HIDWORD(v29) = v4 * HIDWORD(v3);
  v30 = v4 * HIDWORD(v3);
  v31 = 1;
  v28 = 20;
  v20[0] = &off_24CA79890;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(std::__shared_weak_count **)(a2 + 16);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = *(_QWORD *)(a2 + 36);
    v4 = *(_DWORD *)(a2 + 52);
    v10 = *(_QWORD *)(a2 + 24);
    v11 = *(_WORD *)(a2 + 72);
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  else
  {
    v9 = *(_QWORD *)(a2 + 36);
    v10 = *(_QWORD *)(a2 + 24);
    v11 = *(_WORD *)(a2 + 72);
  }
  v20[1] = v5;
  v21 = v6;
  v22 = v9;
  v23 = v4;
  v24 = v10;
  v25 = 25;
  v26 = v11;
  if (v6)
  {
    v14 = (unint64_t *)&v6->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    do
      v16 = __ldaxr(v14);
    while (__stlxr(v16 - 1, v14));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v27 = 1;
  sub_21098B528(a1, 0, (__int128 *)&v32, &v29, &v28, (uint64_t)v20);
  if (v27)
  {
    v17 = v21;
    if (v21)
    {
      v18 = (unint64_t *)&v21->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
}

void sub_21099132C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2108B1C70((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_210991340(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD v20[2];
  std::__shared_weak_count *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  __int16 v26;
  char v27;
  int v28;
  __int128 v29;
  int v30;
  char v31;
  int v32;
  uint64_t v33;
  uint64_t v34;

  v3 = *(_QWORD *)(a2 + 56);
  v4 = *(_DWORD *)(a2 + 52);
  v32 = 4;
  v33 = v3;
  v34 = 0x100000001;
  *(_QWORD *)&v29 = *(_QWORD *)(a2 + 44);
  DWORD2(v29) = v4;
  HIDWORD(v29) = v4 * HIDWORD(v3);
  v30 = v4 * HIDWORD(v3);
  v31 = 1;
  v28 = 68;
  v20[0] = &off_24CA79890;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(std::__shared_weak_count **)(a2 + 16);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = *(_QWORD *)(a2 + 36);
    v4 = *(_DWORD *)(a2 + 52);
    v10 = *(_QWORD *)(a2 + 24);
    v11 = *(_WORD *)(a2 + 72);
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  else
  {
    v9 = *(_QWORD *)(a2 + 36);
    v10 = *(_QWORD *)(a2 + 24);
    v11 = *(_WORD *)(a2 + 72);
  }
  v20[1] = v5;
  v21 = v6;
  v22 = v9;
  v23 = 4 * v4;
  v24 = v10;
  v25 = 28;
  v26 = v11;
  if (v6)
  {
    v14 = (unint64_t *)&v6->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    do
      v16 = __ldaxr(v14);
    while (__stlxr(v16 - 1, v14));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v27 = 1;
  sub_21098B528(a1, 0, (__int128 *)&v32, &v29, &v28, (uint64_t)v20);
  if (v27)
  {
    v17 = v21;
    if (v21)
    {
      v18 = (unint64_t *)&v21->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
}

void sub_210991510(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2108B1C70((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_210991524(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD v20[2];
  std::__shared_weak_count *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  __int16 v26;
  char v27;
  int v28;
  __int128 v29;
  int v30;
  char v31;
  int v32;
  uint64_t v33;
  uint64_t v34;

  v3 = *(_QWORD *)(a2 + 56);
  v4 = *(_DWORD *)(a2 + 52);
  v32 = 4;
  v33 = v3;
  v34 = 0x100000001;
  *(_QWORD *)&v29 = *(_QWORD *)(a2 + 44);
  DWORD2(v29) = v4;
  HIDWORD(v29) = v4 * HIDWORD(v3);
  v30 = v4 * HIDWORD(v3);
  v31 = 1;
  v28 = 24;
  v20[0] = &off_24CA79890;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(std::__shared_weak_count **)(a2 + 16);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = *(_QWORD *)(a2 + 36);
    v4 = *(_DWORD *)(a2 + 52);
    v10 = *(_QWORD *)(a2 + 24);
    v11 = *(_WORD *)(a2 + 72);
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  else
  {
    v9 = *(_QWORD *)(a2 + 36);
    v10 = *(_QWORD *)(a2 + 24);
    v11 = *(_WORD *)(a2 + 72);
  }
  v20[1] = v5;
  v21 = v6;
  v22 = v9;
  v23 = v4;
  v24 = v10;
  v25 = 29;
  v26 = v11;
  if (v6)
  {
    v14 = (unint64_t *)&v6->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    do
      v16 = __ldaxr(v14);
    while (__stlxr(v16 - 1, v14));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v27 = 1;
  sub_21098B528(a1, 0, (__int128 *)&v32, &v29, &v28, (uint64_t)v20);
  if (v27)
  {
    v17 = v21;
    if (v21)
    {
      v18 = (unint64_t *)&v21->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
}

void sub_2109916F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2108B1C70((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_210991704(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD v20[2];
  std::__shared_weak_count *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  __int16 v26;
  char v27;
  int v28;
  __int128 v29;
  int v30;
  char v31;
  int v32;
  uint64_t v33;
  uint64_t v34;

  v3 = *(_QWORD *)(a2 + 56);
  v4 = *(_DWORD *)(a2 + 52);
  v32 = 4;
  v33 = v3;
  v34 = 0x100000001;
  *(_QWORD *)&v29 = *(_QWORD *)(a2 + 44);
  DWORD2(v29) = v4;
  HIDWORD(v29) = v4 * HIDWORD(v3);
  v30 = v4 * HIDWORD(v3);
  v31 = 1;
  v28 = 72;
  v20[0] = &off_24CA79890;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(std::__shared_weak_count **)(a2 + 16);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = *(_QWORD *)(a2 + 36);
    v4 = *(_DWORD *)(a2 + 52);
    v10 = *(_QWORD *)(a2 + 24);
    v11 = *(_WORD *)(a2 + 72);
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  else
  {
    v9 = *(_QWORD *)(a2 + 36);
    v10 = *(_QWORD *)(a2 + 24);
    v11 = *(_WORD *)(a2 + 72);
  }
  v20[1] = v5;
  v21 = v6;
  v22 = v9;
  v23 = 4 * v4;
  v24 = v10;
  v25 = 32;
  v26 = v11;
  if (v6)
  {
    v14 = (unint64_t *)&v6->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    do
      v16 = __ldaxr(v14);
    while (__stlxr(v16 - 1, v14));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v27 = 1;
  sub_21098B528(a1, 0, (__int128 *)&v32, &v29, &v28, (uint64_t)v20);
  if (v27)
  {
    v17 = v21;
    if (v21)
    {
      v18 = (unint64_t *)&v21->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
}

void sub_2109918D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2108B1C70((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2109918E8(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  BOOL v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  int v14;
  int32x4_t v15;
  int v16;
  char v17;

  if (*(_BYTE *)(a2 + 112))
  {
    v4 = (uint64_t *)(a2 + 96);
    if (*(_BYTE *)(a2 + 108))
      v5 = *(_QWORD *)(a2 + 96) == 0;
    else
      v5 = 1;
    if (!v5)
    {
      v6 = *(_QWORD *)(a2 + 64);
      v7 = *(std::__shared_weak_count **)(a2 + 72);
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v6 + 88))(v6, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    }
  }
  else
  {
    v4 = (uint64_t *)(a2 + 40);
  }
  v11 = *v4;
  v12 = 4 * *(_DWORD *)(a2 + 36);
  v15 = vshlq_n_s32(*(int32x4_t *)(a2 + 20), 2uLL);
  v16 = v12;
  v17 = 1;
  v14 = *(_DWORD *)(a2 + 48);
  return sub_21098B528(a1, v11, (__int128 *)a2, (__int128 *)v15.i8, &v14, a2 + 56);
}

void sub_2109919F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  int *v6;
  unsigned int v7;
  int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  const char *v16;
  const char *v17;
  unint64_t v18;
  unsigned int v19;
  const char *v20;
  const char *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  const char *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;

  v4 = a1;
  if (*(_BYTE *)(a2 + 76))
  {
    v5 = *(_DWORD *)(a3 + 24);
    if (*(_DWORD *)(a2 + 72) != v5)
    {
      v15 = *(_QWORD *)(a2 + 72);
      v16 = " is expected to have a batch-size of ";
      v17 = " but has ";
      v18 = *(_QWORD *)a3;
      goto LABEL_24;
    }
  }
  if (*(_BYTE *)(a2 + 68))
  {
    v5 = *(_DWORD *)(a3 + 20);
    if (*(_DWORD *)(a2 + 64) != v5)
    {
      v15 = *(_QWORD *)(a2 + 64);
      v16 = " is expected to have ";
      v17 = " planes but has ";
      v18 = *(_QWORD *)a3;
      goto LABEL_24;
    }
  }
  v6 = (int *)(a2 + 32);
  if (!*(_BYTE *)(a2 + 44))
    goto LABEL_50;
  if (!*(_BYTE *)(a2 + 36))
  {
    v5 = *(_DWORD *)(a3 + 32);
    if (*(_DWORD *)(a2 + 40) == v5)
      goto LABEL_50;
    v15 = *(_QWORD *)(a2 + 40);
    v16 = " of unspecified format (assumed to be Gray8) is expected to have ";
    v17 = " color components but has an incompatible pixel byte stride of ";
    a1 = v4;
    v18 = *(_QWORD *)a3;
LABEL_24:
    sub_210991FA0(a1, v18, v16, v15, v17, v5);
    return;
  }
  v7 = *v6;
  if ((*v6 & 0xF) == 0 || (*v6 & 0x70) == 0)
  {
    if ((v7 & 0x10) != 0)
    {
      LODWORD(v10) = *(_DWORD *)(a3 + 32);
      if ((_DWORD)v10 == 1)
        goto LABEL_50;
      v11 = *(_QWORD *)a3;
      v12 = *(_QWORD *)(a2 + 40);
      v13 = 1;
      LOBYTE(v14) = 1;
    }
    else
    {
      if ((v7 & 0x60) == 0)
        goto LABEL_50;
      v9 = (v7 >> 4) & 4;
      if ((v7 & 0x20) != 0)
        v9 = 2;
      LODWORD(v10) = *(_DWORD *)(a3 + 32);
      if (v9 == (_DWORD)v10)
        goto LABEL_50;
      v11 = *(_QWORD *)a3;
      v12 = *(_QWORD *)(a2 + 40);
      if ((v7 & 0x20) != 0)
        v13 = 2;
      else
        v13 = (unint64_t)(v7 & 0x40) >> 4;
      if ((v7 & 0x20) != 0)
        LOBYTE(v14) = 1;
      else
        v14 = (*v6 & 0x40u) >> 6;
    }
    v20 = " of unspecified pixel structure (assumed to be Gray) is expected to have ";
    v21 = " bytes per value but has an incompatible pixel byte stride of ";
    v22 = v4;
    v23 = v11;
LABEL_36:
    sub_21099253C(v22, v23, v20, v12, v13, v14, v21, v10);
    return;
  }
  if ((v7 & 1) != 0)
  {
    v19 = 1;
    if ((v7 & 0x10) == 0)
      goto LABEL_38;
    goto LABEL_43;
  }
  if ((v7 & 2) != 0)
  {
    v19 = 2;
    if ((v7 & 0x10) == 0)
      goto LABEL_38;
LABEL_43:
    v10 = *(unsigned int *)(a3 + 32);
    if (v19 != v10)
      goto LABEL_72;
    goto LABEL_50;
  }
  if ((v7 & 0xC) == 0)
  {
    LODWORD(v10) = *(_DWORD *)(a3 + 32);
    if ((_DWORD)v10)
    {
      v24 = *(_QWORD *)a3;
      v12 = *(_QWORD *)(a2 + 40);
LABEL_74:
      if ((v7 & 0xC) == 0)
        goto LABEL_95;
      v34 = 4;
      if ((v7 & 0x10) != 0)
        goto LABEL_92;
LABEL_85:
      if ((v7 & 0x20) != 0)
      {
        LODWORD(v38) = 2;
        goto LABEL_94;
      }
      v37 = v7 & 0x40;
      if ((_DWORD)v37)
      {
        v38 = v37 >> 4;
LABEL_94:
        v13 = v38 * (unint64_t)v34;
        LOBYTE(v14) = 1;
LABEL_96:
        v20 = " is expected to have ";
        v21 = " bytes per pixel but has an incompatible pixel byte stride of ";
        v22 = v4;
        v23 = v24;
        goto LABEL_36;
      }
LABEL_95:
      v13 = 0;
      LOBYTE(v14) = 0;
      goto LABEL_96;
    }
    goto LABEL_50;
  }
  v19 = 4;
  if ((v7 & 0x10) != 0)
    goto LABEL_43;
LABEL_38:
  if ((v7 & 0x20) != 0)
  {
    v10 = *(unsigned int *)(a3 + 32);
    if (2 * v19 != v10)
    {
LABEL_72:
      v24 = *(_QWORD *)a3;
      v12 = *(_QWORD *)(a2 + 40);
      if ((v7 & 1) != 0)
      {
        v34 = 1;
        if ((v7 & 0x10) == 0)
          goto LABEL_85;
      }
      else
      {
        if ((v7 & 2) == 0)
          goto LABEL_74;
        v34 = 2;
        if ((v7 & 0x10) == 0)
          goto LABEL_85;
      }
LABEL_92:
      LODWORD(v38) = 1;
      goto LABEL_94;
    }
  }
  else if ((v7 & 0x40) != 0)
  {
    v10 = *(unsigned int *)(a3 + 32);
    if (((unint64_t)(v7 & 0x40) >> 4) * v19 != v10)
      goto LABEL_72;
  }
  else
  {
    LODWORD(v10) = *(_DWORD *)(a3 + 32);
    if ((_DWORD)v10)
      goto LABEL_72;
  }
LABEL_50:
  if (*(_BYTE *)(a2 + 52))
  {
    v5 = *(_DWORD *)(a3 + 12);
    if (*(_DWORD *)(a2 + 48) != v5)
    {
      v15 = *(_QWORD *)(a2 + 48);
      v16 = " is expected to have a width of ";
      v17 = " but has width ";
      a1 = v4;
      v18 = *(_QWORD *)a3;
      goto LABEL_24;
    }
  }
  if (*(_BYTE *)(a2 + 60))
  {
    v5 = *(_DWORD *)(a3 + 16);
    if (*(_DWORD *)(a2 + 56) != v5)
    {
      v15 = *(_QWORD *)(a2 + 56);
      v16 = " is expected to have a height of ";
      v17 = " but has height ";
      a1 = v4;
      v18 = *(_QWORD *)a3;
      goto LABEL_24;
    }
  }
  if (!*(_BYTE *)(a2 + 36))
    goto LABEL_89;
  v25 = *v6;
  if ((*v6 & 1) != 0)
  {
    if ((v25 & 0x10) == 0)
    {
      if ((v25 & 0x20) != 0)
      {
        v28 = 2;
        v29 = *(unsigned int *)(a3 + 32);
        if (v29 == 2)
          goto LABEL_89;
LABEL_90:
        v31 = *(_QWORD *)a3;
        v32 = v4;
        goto LABEL_63;
      }
      v33 = v25 & 0x40;
      if ((_DWORD)v33)
      {
        v28 = v33 >> 4;
        v29 = *(unsigned int *)(a3 + 32);
        if (v33 >> 4 == v29)
          goto LABEL_89;
        goto LABEL_90;
      }
    }
    v28 = 1;
    v29 = *(unsigned int *)(a3 + 32);
    if (v29 == 1)
      goto LABEL_89;
    goto LABEL_90;
  }
  if ((v25 & 2) != 0)
  {
    v35 = sub_2109958E8(v6);
    if (v36)
      v28 = v35;
    else
      v28 = 2;
    v29 = *(unsigned int *)(a3 + 32);
    if (v28 != v29)
    {
      v31 = *(_QWORD *)a3;
      v32 = v4;
      goto LABEL_63;
    }
  }
  else if ((v25 & 4) != 0)
  {
    v26 = sub_2109958E8(v6);
    v28 = v27 ? v26 : 4;
    v29 = *(unsigned int *)(a3 + 32);
    if (v28 != v29)
    {
      v31 = *(_QWORD *)a3;
      v32 = v4;
LABEL_63:
      sub_210992CE4(v32, v31, v30, v28, v29);
      return;
    }
  }
LABEL_89:
  *(_QWORD *)v4 = &off_24CA79A00;
  *(_BYTE *)(v4 + 8) = 0;
  v39 = operator new();
  *(_QWORD *)v39 = 0;
  *(_BYTE *)(v39 + 23) = 0;
  *(_QWORD *)(v4 + 16) = v39;
  v40 = (_QWORD *)operator new();
  *v40 = &unk_24CA7A1D8;
  v40[1] = 0;
  v40[2] = 0;
  v40[3] = v39;
  *(_QWORD *)(v4 + 24) = v40;
}

void sub_210991EF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  MEMORY[0x212BCC6FC](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

uint64_t sub_210991F30(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  if (*(_BYTE *)(result + 120))
  {
    v2 = *(std::__shared_weak_count **)(result + 80);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
        return v1;
      }
    }
  }
  return result;
}

void sub_210991FA0(uint64_t a1, unint64_t a2, const char *a3, uint64_t a4, const char *a5, unsigned int a6)
{
  int64x2_t v8;
  int8x16_t v9;
  std::string *v10;
  std::string *v11;
  _QWORD *v12;
  void **v13;
  void **v14;
  void *v15;
  void *v16;
  void **v17;
  std::string v18;
  unsigned int v19;
  const char *v20;
  const char *v21;
  unint64_t v22;
  const char *v23;
  _DWORD v24[6];
  int v25;
  char v26;
  char *v27;
  void *v28[2];
  char v29;
  void *v30;
  char v31;
  void *v32;
  char v33;
  void *v34;
  char v35;
  void *v36;
  char v37;
  void *__p;
  char v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v22 = a2;
  v23 = "Input ";
  v20 = a5;
  v21 = a3;
  v19 = a6;
  v25 = 0;
  sub_2108C6A80(v24, &v23);
  if (v25 == -1)
    sub_2108B9060();
  v27 = &v26;
  ((void (*)(void **__return_ptr, char **, _DWORD *))off_24CA82A68[v25])(v28, &v27, v24);
  if (v25 != -1)
    ((void (*)(char **, _DWORD *))off_24CA82A20[v25])(&v27, v24);
  sub_2108AE440(&v22);
  v25 = 0;
  if (v21)
    sub_2108C6A80(v24, &v21);
  else
    sub_2108B9350(v24, "nullptr");
  if (v25 == -1)
    sub_2108B9060();
  v27 = &v26;
  ((void (*)(void **__return_ptr, char **, _DWORD *))off_24CA82A68[v25])(&v32, &v27, v24);
  if (v25 != -1)
    ((void (*)(char **, _DWORD *))off_24CA82A20[v25])(&v27, v24);
  v25 = 0;
  sub_21099321C((uint64_t)v24, a4, SBYTE4(a4));
  if (v25 == -1)
    sub_2108B9060();
  v27 = &v26;
  ((void (*)(void **__return_ptr, char **, _DWORD *))off_24CA82A68[v25])(&v34, &v27, v24);
  if (v25 != -1)
    ((void (*)(char **, _DWORD *))off_24CA82A20[v25])(&v27, v24);
  v25 = 0;
  if (v20)
    sub_2108C6A80(v24, &v20);
  else
    sub_2108B9350(v24, "nullptr");
  if (v25 == -1)
    sub_2108B9060();
  v27 = &v26;
  ((void (*)(void **__return_ptr, char **, _DWORD *))off_24CA82A68[v25])(&v36, &v27, v24);
  if (v25 != -1)
    ((void (*)(char **, _DWORD *))off_24CA82A20[v25])(&v27, v24);
  sub_21098A198(&v19);
  sub_2108B9228(&v16, (uint64_t)v28, 6uLL);
  if (v39 < 0)
  {
    operator delete(__p);
    if ((v37 & 0x80000000) == 0)
    {
LABEL_21:
      if ((v35 & 0x80000000) == 0)
        goto LABEL_22;
      goto LABEL_29;
    }
  }
  else if ((v37 & 0x80000000) == 0)
  {
    goto LABEL_21;
  }
  operator delete(v36);
  if ((v35 & 0x80000000) == 0)
  {
LABEL_22:
    if ((v33 & 0x80000000) == 0)
      goto LABEL_23;
    goto LABEL_30;
  }
LABEL_29:
  operator delete(v34);
  if ((v33 & 0x80000000) == 0)
  {
LABEL_23:
    if ((v31 & 0x80000000) == 0)
      goto LABEL_24;
LABEL_31:
    operator delete(v30);
    if ((v29 & 0x80000000) == 0)
      goto LABEL_25;
    goto LABEL_32;
  }
LABEL_30:
  operator delete(v32);
  if (v31 < 0)
    goto LABEL_31;
LABEL_24:
  if ((v29 & 0x80000000) == 0)
    goto LABEL_25;
LABEL_32:
  operator delete(v28[0]);
LABEL_25:
  sub_2108BA7B4((uint64_t)v16, (uint64_t)v17, 0, 0, &v18, v8, v9);
  *(_QWORD *)a1 = &off_24CA79A00;
  *(_BYTE *)(a1 + 8) = 3;
  v10 = (std::string *)operator new();
  v11 = v10;
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    sub_2108B314C(v10, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
  else
    *v10 = v18;
  *(_QWORD *)(a1 + 16) = v11;
  v12 = (_QWORD *)operator new();
  *v12 = &unk_24CA7A1D8;
  v12[1] = 0;
  v12[2] = 0;
  v12[3] = v11;
  *(_QWORD *)(a1 + 24) = v12;
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  v13 = (void **)v16;
  if (v16)
  {
    v14 = v17;
    v15 = v16;
    if (v17 != v16)
    {
      do
      {
        if (*((char *)v14 - 1) < 0)
          operator delete(*(v14 - 3));
        v14 -= 3;
      }
      while (v14 != v13);
      v15 = v16;
    }
    v17 = v13;
    operator delete(v15);
  }
}

void sub_2109923AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  MEMORY[0x212BCC6FC](v17, 0x1012C40EC159624);
  if (a17 < 0)
    operator delete(__p);
  sub_2108A89B4((void **)&a9);
  _Unwind_Resume(a1);
}

void sub_21099242C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,void *__p,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  if (a61 < 0)
  {
    operator delete(__p);
    if ((a55 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a49 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((a55 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a50);
  if ((a49 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a43 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a44);
  if ((a43 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a37 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a38);
  if ((a37 & 0x80000000) == 0)
  {
LABEL_6:
    if (a31 < 0)
    {
LABEL_13:
      operator delete(a26);
      _Unwind_Resume(a1);
    }
LABEL_14:
    JUMPOUT(0x210992424);
  }
LABEL_12:
  operator delete(a32);
  if (a31 < 0)
    goto LABEL_13;
  goto LABEL_14;
}

void sub_2109924C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  void **v26;

  sub_2108B9008((uint64_t)&a20);
  while (1)
  {
    if (*((char *)v26 - 1) < 0)
      operator delete(*(v26 - 3));
    v26 -= 3;
    if (v26 == (void **)&a26)
      JUMPOUT(0x210992424);
  }
}

void sub_210992528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_2108B9008((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21099253C(uint64_t a1, unint64_t a2, const char *a3, uint64_t a4, unint64_t a5, char a6, const char *a7, unsigned int a8)
{
  int64x2_t v12;
  int8x16_t v13;
  std::string *v14;
  std::string *v15;
  _QWORD *v16;
  void **v17;
  void **v18;
  void *v19;
  void *v20;
  void **v21;
  std::string v22;
  unsigned int v23;
  const char *v24;
  const char *v25;
  const char *v26;
  unint64_t v27;
  const char *v28;
  _QWORD v29[3];
  int v30;
  std::string v31;
  _QWORD v32[3];
  std::string *v33;
  std::string *v34;
  _QWORD *v35;
  void *v36[2];
  char v37;
  void *v38;
  char v39;
  void *v40;
  char v41;
  void *v42;
  char v43;
  void *v44;
  char v45;
  void *v46;
  char v47;
  void *v48;
  char v49;
  void *__p;
  char v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  v27 = a2;
  v28 = "Input ";
  v25 = " color components with ";
  v26 = a3;
  v24 = a7;
  v23 = a8;
  LODWORD(v33) = 0;
  sub_2108C6A80(v32, &v28);
  if ((_DWORD)v33 == -1)
    sub_2108B9060();
  v29[0] = &v31;
  ((void (*)(void **__return_ptr, _QWORD *, _QWORD *))off_24CA82A68[v33])(v36, v29, v32);
  if ((_DWORD)v33 != -1)
    ((void (*)(_QWORD *, _QWORD *))off_24CA82A20[v33])(v29, v32);
  sub_2108AE440(&v27);
  LODWORD(v33) = 0;
  if (v26)
    sub_2108C6A80(v32, &v26);
  else
    sub_2108B9350(v32, "nullptr");
  if ((_DWORD)v33 == -1)
    sub_2108B9060();
  v29[0] = &v31;
  ((void (*)(void **__return_ptr, _QWORD *, _QWORD *))off_24CA82A68[v33])(&v40, v29, v32);
  if ((_DWORD)v33 != -1)
    ((void (*)(_QWORD *, _QWORD *))off_24CA82A20[v33])(v29, v32);
  LODWORD(v33) = 0;
  sub_21099321C((uint64_t)v32, a4, SBYTE4(a4));
  if ((_DWORD)v33 == -1)
    sub_2108B9060();
  v29[0] = &v31;
  ((void (*)(void **__return_ptr, _QWORD *, _QWORD *))off_24CA82A68[v33])(&v42, v29, v32);
  if ((_DWORD)v33 != -1)
    ((void (*)(_QWORD *, _QWORD *))off_24CA82A20[v33])(v29, v32);
  LODWORD(v33) = 0;
  if (v25)
    sub_2108C6A80(v32, &v25);
  else
    sub_2108B9350(v32, "nullptr");
  if ((_DWORD)v33 == -1)
    sub_2108B9060();
  v29[0] = &v31;
  ((void (*)(void **__return_ptr, _QWORD *, _QWORD *))off_24CA82A68[v33])(&v44, v29, v32);
  if ((_DWORD)v33 != -1)
    ((void (*)(_QWORD *, _QWORD *))off_24CA82A20[v33])(v29, v32);
  v30 = 0;
  if (a6)
  {
    std::to_string(&v31, a5);
    v32[0] = v29;
    v32[1] = &v31;
    v32[2] = v29;
    v33 = &v31;
    v34 = &v31;
    if (v30 == -1)
      sub_2108B9060();
    v35 = v32;
    ((void (*)(_QWORD **, _QWORD *))off_24CA82A50[v30])(&v35, v29);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
  }
  else
  {
    sub_2108B9350(v29, "nullopt");
  }
  if (v30 == -1)
    sub_2108B9060();
  v32[0] = &v31;
  ((void (*)(void **__return_ptr, _QWORD *, _QWORD *))off_24CA82A68[v30])(&v46, v32, v29);
  if (v30 != -1)
    ((void (*)(_QWORD *, _QWORD *))off_24CA82A20[v30])(v32, v29);
  LODWORD(v33) = 0;
  if (v24)
    sub_2108C6A80(v32, &v24);
  else
    sub_2108B9350(v32, "nullptr");
  if ((_DWORD)v33 == -1)
    sub_2108B9060();
  v29[0] = &v31;
  ((void (*)(void **__return_ptr, _QWORD *, _QWORD *))off_24CA82A68[v33])(&v48, v29, v32);
  if ((_DWORD)v33 != -1)
    ((void (*)(_QWORD *, _QWORD *))off_24CA82A20[v33])(v29, v32);
  sub_21098A198(&v23);
  sub_2108B9228(&v20, (uint64_t)v36, 8uLL);
  if (v51 < 0)
  {
    operator delete(__p);
    if ((v49 & 0x80000000) == 0)
    {
LABEL_35:
      if ((v47 & 0x80000000) == 0)
        goto LABEL_36;
      goto LABEL_45;
    }
  }
  else if ((v49 & 0x80000000) == 0)
  {
    goto LABEL_35;
  }
  operator delete(v48);
  if ((v47 & 0x80000000) == 0)
  {
LABEL_36:
    if ((v45 & 0x80000000) == 0)
      goto LABEL_37;
    goto LABEL_46;
  }
LABEL_45:
  operator delete(v46);
  if ((v45 & 0x80000000) == 0)
  {
LABEL_37:
    if ((v43 & 0x80000000) == 0)
      goto LABEL_38;
    goto LABEL_47;
  }
LABEL_46:
  operator delete(v44);
  if ((v43 & 0x80000000) == 0)
  {
LABEL_38:
    if ((v41 & 0x80000000) == 0)
      goto LABEL_39;
    goto LABEL_48;
  }
LABEL_47:
  operator delete(v42);
  if ((v41 & 0x80000000) == 0)
  {
LABEL_39:
    if ((v39 & 0x80000000) == 0)
      goto LABEL_40;
LABEL_49:
    operator delete(v38);
    if ((v37 & 0x80000000) == 0)
      goto LABEL_41;
    goto LABEL_50;
  }
LABEL_48:
  operator delete(v40);
  if (v39 < 0)
    goto LABEL_49;
LABEL_40:
  if ((v37 & 0x80000000) == 0)
    goto LABEL_41;
LABEL_50:
  operator delete(v36[0]);
LABEL_41:
  sub_2108BA7B4((uint64_t)v20, (uint64_t)v21, 0, 0, &v22, v12, v13);
  *(_QWORD *)a1 = &off_24CA79A00;
  *(_BYTE *)(a1 + 8) = 3;
  v14 = (std::string *)operator new();
  v15 = v14;
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    sub_2108B314C(v14, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
  else
    *v14 = v22;
  *(_QWORD *)(a1 + 16) = v15;
  v16 = (_QWORD *)operator new();
  *v16 = &unk_24CA7A1D8;
  v16[1] = 0;
  v16[2] = 0;
  v16[3] = v15;
  *(_QWORD *)(a1 + 24) = v16;
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  v17 = (void **)v20;
  if (v20)
  {
    v18 = v21;
    v19 = v20;
    if (v21 != v20)
    {
      do
      {
        if (*((char *)v18 - 1) < 0)
          operator delete(*(v18 - 3));
        v18 -= 3;
      }
      while (v18 != v17);
      v19 = v20;
    }
    v21 = v17;
    operator delete(v19);
  }
}

void sub_210992AEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  MEMORY[0x212BCC6FC](v17, 0x1012C40EC159624);
  if (a17 < 0)
    operator delete(__p);
  sub_2108A89B4((void **)&a9);
  _Unwind_Resume(a1);
}

void sub_210992B74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  void *a64;
  char a69;
  void *a70;
  char a72;
  void *__p;
  char a74;

  if (a74 < 0)
  {
    operator delete(__p);
    if ((a72 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((a72 & 0x80000000) == 0)
  {
LABEL_3:
    if (a69 < 0)
      goto LABEL_4;
    goto LABEL_12;
  }
  operator delete(a70);
  if (a69 < 0)
  {
LABEL_4:
    operator delete(a64);
    if ((a63 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  if ((a63 & 0x80000000) == 0)
  {
LABEL_5:
    if (a57 < 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  operator delete(a58);
  if (a57 < 0)
  {
LABEL_6:
    operator delete(a52);
    if ((a51 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  if ((a51 & 0x80000000) == 0)
  {
LABEL_7:
    if (a45 < 0)
      goto LABEL_8;
    goto LABEL_16;
  }
LABEL_15:
  operator delete(a46);
  if (a45 < 0)
  {
LABEL_8:
    operator delete(a40);
    if (a39 < 0)
    {
LABEL_17:
      operator delete(a34);
      _Unwind_Resume(a1);
    }
LABEL_18:
    JUMPOUT(0x210992B6CLL);
  }
LABEL_16:
  if (a39 < 0)
    goto LABEL_17;
  goto LABEL_18;
}

void sub_210992C3C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  char *v37;

  sub_2108B9008((uint64_t)&a31);
  while (1)
  {
    if (*(v37 - 1) < 0)
      operator delete(*((void **)v37 - 3));
    v37 -= 24;
    if (v37 == &a37)
      JUMPOUT(0x210992B6CLL);
  }
}

void sub_210992CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  sub_2108B9008((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_210992CE4(uint64_t a1, unint64_t a2, const char *a3, unint64_t a4, unsigned int a5)
{
  int64x2_t v6;
  int8x16_t v7;
  std::string *v8;
  std::string *v9;
  _QWORD *v10;
  void **v11;
  void **v12;
  void *v13;
  void *v14;
  void **v15;
  std::string v16;
  unsigned int v17;
  const char *v18;
  unint64_t v19;
  const char *v20;
  unint64_t v21;
  const char *v22;
  _DWORD v23[6];
  int v24;
  char v25;
  char *v26;
  void *v27[2];
  char v28;
  void *v29;
  char v30;
  void *v31;
  char v32;
  void *v33;
  char v34;
  void *v35;
  char v36;
  void *__p;
  char v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v21 = a2;
  v22 = "Input ";
  v19 = a4;
  v20 = a3;
  v18 = " bytes per pixel but has incompatible pixel byte stride of ";
  v17 = a5;
  v24 = 0;
  sub_2108C6A80(v23, &v22);
  if (v24 == -1)
    sub_2108B9060();
  v26 = &v25;
  ((void (*)(void **__return_ptr, char **, _DWORD *))off_24CA82A68[v24])(v27, &v26, v23);
  if (v24 != -1)
    ((void (*)(char **, _DWORD *))off_24CA82A20[v24])(&v26, v23);
  sub_2108AE440(&v21);
  v24 = 0;
  if (v20)
    sub_2108C6A80(v23, &v20);
  else
    sub_2108B9350(v23, "nullptr");
  if (v24 == -1)
    sub_2108B9060();
  v26 = &v25;
  ((void (*)(void **__return_ptr, char **, _DWORD *))off_24CA82A68[v24])(&v31, &v26, v23);
  if (v24 != -1)
    ((void (*)(char **, _DWORD *))off_24CA82A20[v24])(&v26, v23);
  sub_2108AE440(&v19);
  v24 = 0;
  if (v18)
    sub_2108C6A80(v23, &v18);
  else
    sub_2108B9350(v23, "nullptr");
  if (v24 == -1)
    sub_2108B9060();
  v26 = &v25;
  ((void (*)(void **__return_ptr, char **, _DWORD *))off_24CA82A68[v24])(&v35, &v26, v23);
  if (v24 != -1)
    ((void (*)(char **, _DWORD *))off_24CA82A20[v24])(&v26, v23);
  sub_21098A198(&v17);
  sub_2108B9228(&v14, (uint64_t)v27, 6uLL);
  if (v38 < 0)
  {
    operator delete(__p);
    if ((v36 & 0x80000000) == 0)
    {
LABEL_18:
      if ((v34 & 0x80000000) == 0)
        goto LABEL_19;
      goto LABEL_26;
    }
  }
  else if ((v36 & 0x80000000) == 0)
  {
    goto LABEL_18;
  }
  operator delete(v35);
  if ((v34 & 0x80000000) == 0)
  {
LABEL_19:
    if ((v32 & 0x80000000) == 0)
      goto LABEL_20;
    goto LABEL_27;
  }
LABEL_26:
  operator delete(v33);
  if ((v32 & 0x80000000) == 0)
  {
LABEL_20:
    if ((v30 & 0x80000000) == 0)
      goto LABEL_21;
LABEL_28:
    operator delete(v29);
    if ((v28 & 0x80000000) == 0)
      goto LABEL_22;
    goto LABEL_29;
  }
LABEL_27:
  operator delete(v31);
  if (v30 < 0)
    goto LABEL_28;
LABEL_21:
  if ((v28 & 0x80000000) == 0)
    goto LABEL_22;
LABEL_29:
  operator delete(v27[0]);
LABEL_22:
  sub_2108BA7B4((uint64_t)v14, (uint64_t)v15, 0, 0, &v16, v6, v7);
  *(_QWORD *)a1 = &off_24CA79A00;
  *(_BYTE *)(a1 + 8) = 3;
  v8 = (std::string *)operator new();
  v9 = v8;
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    sub_2108B314C(v8, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
  else
    *v8 = v16;
  *(_QWORD *)(a1 + 16) = v9;
  v10 = (_QWORD *)operator new();
  *v10 = &unk_24CA7A1D8;
  v10[1] = 0;
  v10[2] = 0;
  v10[3] = v9;
  *(_QWORD *)(a1 + 24) = v10;
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  v11 = (void **)v14;
  if (v14)
  {
    v12 = v15;
    v13 = v14;
    if (v15 != v14)
    {
      do
      {
        if (*((char *)v12 - 1) < 0)
          operator delete(*(v12 - 3));
        v12 -= 3;
      }
      while (v12 != v11);
      v13 = v14;
    }
    v15 = v11;
    operator delete(v13);
  }
}

void sub_210993098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;

  MEMORY[0x212BCC6FC](v18, 0x1012C40EC159624);
  if (a18 < 0)
    operator delete(__p);
  sub_2108A89B4(&a10);
  _Unwind_Resume(a1);
}

void sub_210993114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,void *__p,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  if (a63 < 0)
  {
    operator delete(__p);
    if ((a57 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a51 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((a57 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a52);
  if ((a51 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a45 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a46);
  if ((a45 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a39 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a40);
  if ((a39 & 0x80000000) == 0)
  {
LABEL_6:
    if (a33 < 0)
    {
LABEL_13:
      operator delete(a28);
      _Unwind_Resume(a1);
    }
LABEL_14:
    JUMPOUT(0x21099310CLL);
  }
LABEL_12:
  operator delete(a34);
  if (a33 < 0)
    goto LABEL_13;
  goto LABEL_14;
}

void sub_2109931AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  void **v28;

  sub_2108B9008((uint64_t)&a22);
  while (1)
  {
    if (*((char *)v28 - 1) < 0)
      operator delete(*(v28 - 3));
    v28 -= 3;
    if (v28 == (void **)&a28)
      JUMPOUT(0x21099310CLL);
  }
}

void sub_21099321C(uint64_t a1, unsigned int __val, char a3)
{
  uint64_t v4;
  uint64_t v5;
  std::string v6;
  uint64_t *v7;
  uint64_t v8;
  std::string *v9;
  uint64_t v10;
  std::string *v11;
  std::string *v12;

  if (a3)
  {
    std::to_string(&v6, __val);
    v8 = a1;
    v9 = &v6;
    v10 = a1;
    v11 = &v6;
    v12 = &v6;
    v4 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v4 == -1)
      sub_2108B9060();
    v7 = &v8;
    ((void (*)(uint64_t **, uint64_t))off_24CA82A50[v4])(&v7, a1);
    if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v6.__r_.__value_.__l.__data_);
  }
  else
  {
    v8 = a1;
    v9 = (std::string *)"nullopt";
    v10 = a1;
    v11 = (std::string *)"nullopt";
    v12 = (std::string *)"nullopt";
    v5 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v5 == -1)
      sub_2108B9060();
    v6.__r_.__value_.__r.__words[0] = (std::string::size_type)&v8;
    ((void (*)(std::string *, uint64_t))off_24CA82A38[v5])(&v6, a1);
  }
}

void sub_21099330C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_210993328(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  _BOOL8 v12;
  _BOOL4 v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  __int16 v17;
  std::__shared_weak_count *size;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  std::logic_error *exception;
  std::string v23;

  if (*(_DWORD *)(a1 + 48) != 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2109935A8(a1);
    std::logic_error::logic_error(exception, &v23);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24CA79220, MEMORY[0x24BEDAB88]);
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v23.__r_.__value_.__r.__words[0] = v4;
      v23.__r_.__value_.__l.__size_ = (std::string::size_type)v5;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v4;
    }
  }
  else
  {
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = 0uLL;
  }
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_DWORD *)(a1 + 24);
  v12 = v11 != 0;
  v13 = v11 == 0;
  if (!*(_DWORD *)(a1 + 28))
    v13 = 1;
  if (v13)
    v14 = 0;
  else
    v14 = ((unint64_t)*(unsigned int *)(a1 + 32) << 31) & 0x7FFFFFFF00000000;
  if (v13)
    v15 = 0;
  else
    v15 = *(_QWORD *)(a1 + 24);
  if (HIDWORD(v15) * HIDWORD(v14) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
  v16 = v14 | v12;
  v17 = *(_WORD *)(a1 + 52);
  size = (std::__shared_weak_count *)v23.__r_.__value_.__l.__size_;
  if (v23.__r_.__value_.__l.__size_)
  {
    v19 = (unint64_t *)(v23.__r_.__value_.__l.__size_ + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    *(_QWORD *)a2 = v23.__r_.__value_.__r.__words[0];
    *(_QWORD *)(a2 + 8) = size;
    *(_QWORD *)(a2 + 16) = v10;
    *(_QWORD *)(a2 + 24) = v15;
    *(_QWORD *)(a2 + 32) = v16;
    *(_WORD *)(a2 + 40) = v17;
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  else
  {
    *(_OWORD *)a2 = v23.__r_.__value_.__r.__words[0];
    *(_QWORD *)(a2 + 16) = v10;
    *(_QWORD *)(a2 + 24) = v15;
    *(_QWORD *)(a2 + 32) = v16;
    *(_WORD *)(a2 + 40) = v17;
  }
}

void sub_21099355C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_2109935A8(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_210993620();
  v3 = sub_2108BAF94();
  v5 = *(_DWORD *)(a1 + 48);
  return sub_2108B8CB0("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

std::string *sub_210993620()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_254A72558);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A72558))
  {
    sub_2108A5A94(v7, "ConstImageView");
    v2 = sub_2108F2F38();
    sub_210993824((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2108BAD98();
    sub_210993824((uint64_t)v3, (uint64_t)&__p);
    sub_2108B9228(v6, (uint64_t)v9, 2uLL);
    sub_2109ED500((char *)v7, (uint64_t *)v6, &stru_254A72540, v4, v5);
    sub_2108A89B4(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A72540, &dword_21089F000);
          __cxa_guard_release(&qword_254A72558);
          return &stru_254A72540;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_254A72540;
}

void sub_210993770(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_2108A89B4((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_254A72558);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_254A72558);
  _Unwind_Resume(a1);
}

void sub_210993824(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_2108B314C(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_2109ECDA0(&__p, "cv3d::kit::img::", 16, (const std::string::value_type *)&unk_210A01421, 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2109938C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2109938DC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  _BOOL8 v12;
  _BOOL4 v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  __int16 v17;
  std::__shared_weak_count *size;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  std::logic_error *exception;
  std::string v23;

  if (*(_DWORD *)(a1 + 48) != 4)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_210993B5C(a1);
    std::logic_error::logic_error(exception, &v23);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24CA79220, MEMORY[0x24BEDAB88]);
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v23.__r_.__value_.__r.__words[0] = v4;
      v23.__r_.__value_.__l.__size_ = (std::string::size_type)v5;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v4;
    }
  }
  else
  {
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = 0uLL;
  }
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_DWORD *)(a1 + 24);
  v12 = v11 != 0;
  v13 = v11 == 0;
  if (!*(_DWORD *)(a1 + 28))
    v13 = 1;
  if (v13)
    v14 = 0;
  else
    v14 = ((unint64_t)*(unsigned int *)(a1 + 32) << 30) & 0x3FFFFFFF00000000;
  if (v13)
    v15 = 0;
  else
    v15 = *(_QWORD *)(a1 + 24);
  if (HIDWORD(v15) * HIDWORD(v14) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
  v16 = v14 | v12;
  v17 = *(_WORD *)(a1 + 52);
  size = (std::__shared_weak_count *)v23.__r_.__value_.__l.__size_;
  if (v23.__r_.__value_.__l.__size_)
  {
    v19 = (unint64_t *)(v23.__r_.__value_.__l.__size_ + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    *(_QWORD *)a2 = v23.__r_.__value_.__r.__words[0];
    *(_QWORD *)(a2 + 8) = size;
    *(_QWORD *)(a2 + 16) = v10;
    *(_QWORD *)(a2 + 24) = v15;
    *(_QWORD *)(a2 + 32) = v16;
    *(_WORD *)(a2 + 40) = v17;
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  else
  {
    *(_OWORD *)a2 = v23.__r_.__value_.__r.__words[0];
    *(_QWORD *)(a2 + 16) = v10;
    *(_QWORD *)(a2 + 24) = v15;
    *(_QWORD *)(a2 + 32) = v16;
    *(_WORD *)(a2 + 40) = v17;
  }
}

void sub_210993B10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_210993B5C(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_210993BD4();
  v3 = sub_2108BAF94();
  v5 = *(_DWORD *)(a1 + 48);
  return sub_2108B8CB0("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

std::string *sub_210993BD4()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_254A72578);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A72578))
  {
    sub_2108A5A94(v7, "ConstImageView");
    v2 = sub_2108F3030();
    sub_210993DD8((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2108BAD98();
    sub_210993DD8((uint64_t)v3, (uint64_t)&__p);
    sub_2108B9228(v6, (uint64_t)v9, 2uLL);
    sub_2109ED500((char *)v7, (uint64_t *)v6, &stru_254A72560, v4, v5);
    sub_2108A89B4(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A72560, &dword_21089F000);
          __cxa_guard_release(&qword_254A72578);
          return &stru_254A72560;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_254A72560;
}

void sub_210993D24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_2108A89B4((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_254A72578);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_254A72578);
  _Unwind_Resume(a1);
}

void sub_210993DD8(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_2108B314C(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_2109ECDA0(&__p, "cv3d::kit::img::", 16, (const std::string::value_type *)&unk_210A01421, 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_210993E74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_210993E90(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  _BOOL8 v12;
  int v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  __int16 v23;
  std::__shared_weak_count *size;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::logic_error *exception;
  std::string v30;
  _BYTE v31[12];
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 48) != 25)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_210994190(a1);
    std::logic_error::logic_error(exception, &v30);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24CA79220, MEMORY[0x24BEDAB88]);
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v30.__r_.__value_.__r.__words[0] = v4;
      v30.__r_.__value_.__l.__size_ = (std::string::size_type)v5;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *(unint64_t *)(a1 + 8);
    }
  }
  else
  {
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = 0uLL;
  }
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_DWORD *)(a1 + 24);
  v14 = v11 == 0;
  v12 = v11 != 0;
  v13 = v14;
  if (!*(_DWORD *)(a1 + 28))
    v13 = 1;
  v14 = v13 == 0;
  if (v13)
    v15 = 0;
  else
    v15 = (unint64_t)*(unsigned int *)(a1 + 32) << 32;
  v16 = v15 | (4 * v12);
  v17 = *(_QWORD *)(a1 + 24);
  if (!v14)
    v17 = 0;
  *(_DWORD *)v31 = 4;
  *(_QWORD *)&v31[4] = v17;
  v18 = v17;
  v19 = *(_QWORD *)v31;
  v20 = HIDWORD(v17);
  *(_DWORD *)v31 = 1;
  *(_QWORD *)&v31[4] = v16;
  v21 = *(_QWORD *)v31;
  v22 = HIDWORD(v15);
  if (HIDWORD(v17) * HIDWORD(v15) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
  v23 = *(_WORD *)(a1 + 52);
  size = (std::__shared_weak_count *)v30.__r_.__value_.__l.__size_;
  if (v30.__r_.__value_.__l.__size_)
  {
    v25 = (unint64_t *)(v30.__r_.__value_.__l.__size_ + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  *(_QWORD *)a2 = v30.__r_.__value_.__r.__words[0];
  *(_QWORD *)(a2 + 8) = size;
  *(_QWORD *)(a2 + 16) = v10;
  *(_QWORD *)(a2 + 24) = v19;
  *(_DWORD *)(a2 + 32) = v20;
  *(_QWORD *)(a2 + 36) = v21;
  *(_DWORD *)(a2 + 44) = v22;
  *(_QWORD *)(a2 + 48) = v18;
  *(_QWORD *)(a2 + 56) = v16;
  *(_WORD *)(a2 + 64) = v23;
  if (size)
  {
    v27 = (unint64_t *)&size->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_210994144(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_210994190(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_210994208();
  v3 = sub_2108BAF94();
  v5 = *(_DWORD *)(a1 + 48);
  return sub_2108B8CB0("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

std::string *sub_210994208()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_254A72598);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A72598))
  {
    sub_2108A5A94(v7, "ConstImageView");
    v2 = sub_2108F3508();
    sub_21099440C((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2108BAD98();
    sub_21099440C((uint64_t)v3, (uint64_t)&__p);
    sub_2108B9228(v6, (uint64_t)v9, 2uLL);
    sub_2109ED500((char *)v7, (uint64_t *)v6, &stru_254A72580, v4, v5);
    sub_2108A89B4(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A72580, &dword_21089F000);
          __cxa_guard_release(&qword_254A72598);
          return &stru_254A72580;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_254A72580;
}

void sub_210994358(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_2108A89B4((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_254A72598);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_254A72598);
  _Unwind_Resume(a1);
}

void sub_21099440C(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_2108B314C(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_2109ECDA0(&__p, "cv3d::kit::img::", 16, (const std::string::value_type *)&unk_210A01421, 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2109944A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2109944C4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  _BOOL8 v12;
  int v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  __int16 v23;
  std::__shared_weak_count *size;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::logic_error *exception;
  std::string v30;
  _BYTE v31[12];
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 48) != 28)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2109947C8(a1);
    std::logic_error::logic_error(exception, &v30);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24CA79220, MEMORY[0x24BEDAB88]);
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v30.__r_.__value_.__r.__words[0] = v4;
      v30.__r_.__value_.__l.__size_ = (std::string::size_type)v5;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *(unint64_t *)(a1 + 8);
    }
  }
  else
  {
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = 0uLL;
  }
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_DWORD *)(a1 + 24);
  v14 = v11 == 0;
  v12 = v11 != 0;
  v13 = v14;
  if (!*(_DWORD *)(a1 + 28))
    v13 = 1;
  v14 = v13 == 0;
  if (v13)
    v15 = 0;
  else
    v15 = ((unint64_t)*(unsigned int *)(a1 + 32) << 30) & 0x3FFFFFFF00000000;
  v16 = v15 | (4 * v12);
  v17 = *(_QWORD *)(a1 + 24);
  if (!v14)
    v17 = 0;
  *(_DWORD *)v31 = 4;
  *(_QWORD *)&v31[4] = v17;
  v18 = v17;
  v19 = *(_QWORD *)v31;
  v20 = HIDWORD(v17);
  *(_DWORD *)v31 = 1;
  *(_QWORD *)&v31[4] = v16;
  v21 = *(_QWORD *)v31;
  v22 = HIDWORD(v15);
  if (HIDWORD(v17) * HIDWORD(v15) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
  v23 = *(_WORD *)(a1 + 52);
  size = (std::__shared_weak_count *)v30.__r_.__value_.__l.__size_;
  if (v30.__r_.__value_.__l.__size_)
  {
    v25 = (unint64_t *)(v30.__r_.__value_.__l.__size_ + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  *(_QWORD *)a2 = v30.__r_.__value_.__r.__words[0];
  *(_QWORD *)(a2 + 8) = size;
  *(_QWORD *)(a2 + 16) = v10;
  *(_QWORD *)(a2 + 24) = v19;
  *(_DWORD *)(a2 + 32) = v20;
  *(_QWORD *)(a2 + 36) = v21;
  *(_DWORD *)(a2 + 44) = v22;
  *(_QWORD *)(a2 + 48) = v18;
  *(_QWORD *)(a2 + 56) = v16;
  *(_WORD *)(a2 + 64) = v23;
  if (size)
  {
    v27 = (unint64_t *)&size->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_21099477C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_2109947C8(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_210994840();
  v3 = sub_2108BAF94();
  v5 = *(_DWORD *)(a1 + 48);
  return sub_2108B8CB0("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

std::string *sub_210994840()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_254A725B8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A725B8))
  {
    sub_2108A5A94(v7, "ConstImageView");
    v2 = sub_210994AFC();
    sub_210994A44((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2108BAD98();
    sub_210994A44((uint64_t)v3, (uint64_t)&__p);
    sub_2108B9228(v6, (uint64_t)v9, 2uLL);
    sub_2109ED500((char *)v7, (uint64_t *)v6, &stru_254A725A0, v4, v5);
    sub_2108A89B4(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A725A0, &dword_21089F000);
          __cxa_guard_release(&qword_254A725B8);
          return &stru_254A725A0;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_254A725A0;
}

void sub_210994990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_2108A89B4((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_254A725B8);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_254A725B8);
  _Unwind_Resume(a1);
}

void sub_210994A44(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_2108B314C(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_2109ECDA0(&__p, "cv3d::kit::img::", 16, (const std::string::value_type *)&unk_210A01421, 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_210994AE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *sub_210994AFC()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A725D8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A725D8))
    return &stru_254A725C0;
  sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Bgra32f]", __p);
  sub_2109ED678((uint64_t)__p, &stru_254A725C0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A725C0, &dword_21089F000);
  __cxa_guard_release(&qword_254A725D8);
  return &stru_254A725C0;
}

void sub_210994BB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A725D8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A725D8);
  _Unwind_Resume(a1);
}

void sub_210994BF4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  _BOOL8 v12;
  int v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  __int16 v23;
  std::__shared_weak_count *size;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::logic_error *exception;
  std::string v30;
  _BYTE v31[12];
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 48) != 29)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_210994EF4(a1);
    std::logic_error::logic_error(exception, &v30);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24CA79220, MEMORY[0x24BEDAB88]);
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v30.__r_.__value_.__r.__words[0] = v4;
      v30.__r_.__value_.__l.__size_ = (std::string::size_type)v5;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *(unint64_t *)(a1 + 8);
    }
  }
  else
  {
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = 0uLL;
  }
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_DWORD *)(a1 + 24);
  v14 = v11 == 0;
  v12 = v11 != 0;
  v13 = v14;
  if (!*(_DWORD *)(a1 + 28))
    v13 = 1;
  v14 = v13 == 0;
  if (v13)
    v15 = 0;
  else
    v15 = (unint64_t)*(unsigned int *)(a1 + 32) << 32;
  v16 = v15 | (4 * v12);
  v17 = *(_QWORD *)(a1 + 24);
  if (!v14)
    v17 = 0;
  *(_DWORD *)v31 = 4;
  *(_QWORD *)&v31[4] = v17;
  v18 = v17;
  v19 = *(_QWORD *)v31;
  v20 = HIDWORD(v17);
  *(_DWORD *)v31 = 1;
  *(_QWORD *)&v31[4] = v16;
  v21 = *(_QWORD *)v31;
  v22 = HIDWORD(v15);
  if (HIDWORD(v17) * HIDWORD(v15) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
  v23 = *(_WORD *)(a1 + 52);
  size = (std::__shared_weak_count *)v30.__r_.__value_.__l.__size_;
  if (v30.__r_.__value_.__l.__size_)
  {
    v25 = (unint64_t *)(v30.__r_.__value_.__l.__size_ + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  *(_QWORD *)a2 = v30.__r_.__value_.__r.__words[0];
  *(_QWORD *)(a2 + 8) = size;
  *(_QWORD *)(a2 + 16) = v10;
  *(_QWORD *)(a2 + 24) = v19;
  *(_DWORD *)(a2 + 32) = v20;
  *(_QWORD *)(a2 + 36) = v21;
  *(_DWORD *)(a2 + 44) = v22;
  *(_QWORD *)(a2 + 48) = v18;
  *(_QWORD *)(a2 + 56) = v16;
  *(_WORD *)(a2 + 64) = v23;
  if (size)
  {
    v27 = (unint64_t *)&size->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_210994EA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_210994EF4(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_210994F6C();
  v3 = sub_2108BAF94();
  v5 = *(_DWORD *)(a1 + 48);
  return sub_2108B8CB0("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

std::string *sub_210994F6C()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_254A725F8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A725F8))
  {
    sub_2108A5A94(v7, "ConstImageView");
    v2 = sub_2109409D8();
    sub_210995170((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2108BAD98();
    sub_210995170((uint64_t)v3, (uint64_t)&__p);
    sub_2108B9228(v6, (uint64_t)v9, 2uLL);
    sub_2109ED500((char *)v7, (uint64_t *)v6, &stru_254A725E0, v4, v5);
    sub_2108A89B4(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A725E0, &dword_21089F000);
          __cxa_guard_release(&qword_254A725F8);
          return &stru_254A725E0;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_254A725E0;
}

void sub_2109950BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_2108A89B4((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_254A725F8);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_254A725F8);
  _Unwind_Resume(a1);
}

void sub_210995170(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_2108B314C(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_2109ECDA0(&__p, "cv3d::kit::img::", 16, (const std::string::value_type *)&unk_210A01421, 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_21099520C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_210995228(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  _BOOL8 v12;
  int v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  __int16 v23;
  std::__shared_weak_count *size;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::logic_error *exception;
  std::string v30;
  _BYTE v31[12];
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 48) != 32)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21099552C(a1);
    std::logic_error::logic_error(exception, &v30);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24CA79220, MEMORY[0x24BEDAB88]);
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v30.__r_.__value_.__r.__words[0] = v4;
      v30.__r_.__value_.__l.__size_ = (std::string::size_type)v5;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *(unint64_t *)(a1 + 8);
    }
  }
  else
  {
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = 0uLL;
  }
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_DWORD *)(a1 + 24);
  v14 = v11 == 0;
  v12 = v11 != 0;
  v13 = v14;
  if (!*(_DWORD *)(a1 + 28))
    v13 = 1;
  v14 = v13 == 0;
  if (v13)
    v15 = 0;
  else
    v15 = ((unint64_t)*(unsigned int *)(a1 + 32) << 30) & 0x3FFFFFFF00000000;
  v16 = v15 | (4 * v12);
  v17 = *(_QWORD *)(a1 + 24);
  if (!v14)
    v17 = 0;
  *(_DWORD *)v31 = 4;
  *(_QWORD *)&v31[4] = v17;
  v18 = v17;
  v19 = *(_QWORD *)v31;
  v20 = HIDWORD(v17);
  *(_DWORD *)v31 = 1;
  *(_QWORD *)&v31[4] = v16;
  v21 = *(_QWORD *)v31;
  v22 = HIDWORD(v15);
  if (HIDWORD(v17) * HIDWORD(v15) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
  v23 = *(_WORD *)(a1 + 52);
  size = (std::__shared_weak_count *)v30.__r_.__value_.__l.__size_;
  if (v30.__r_.__value_.__l.__size_)
  {
    v25 = (unint64_t *)(v30.__r_.__value_.__l.__size_ + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  *(_QWORD *)a2 = v30.__r_.__value_.__r.__words[0];
  *(_QWORD *)(a2 + 8) = size;
  *(_QWORD *)(a2 + 16) = v10;
  *(_QWORD *)(a2 + 24) = v19;
  *(_DWORD *)(a2 + 32) = v20;
  *(_QWORD *)(a2 + 36) = v21;
  *(_DWORD *)(a2 + 44) = v22;
  *(_QWORD *)(a2 + 48) = v18;
  *(_QWORD *)(a2 + 56) = v16;
  *(_WORD *)(a2 + 64) = v23;
  if (size)
  {
    v27 = (unint64_t *)&size->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_2109954E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_21099552C(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_2109955A4();
  v3 = sub_2108BAF94();
  v5 = *(_DWORD *)(a1 + 48);
  return sub_2108B8CB0("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

std::string *sub_2109955A4()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_254A72618);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A72618))
  {
    sub_2108A5A94(v7, "ConstImageView");
    v2 = sub_2108F36F8();
    sub_2109957A8((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2108BAD98();
    sub_2109957A8((uint64_t)v3, (uint64_t)&__p);
    sub_2108B9228(v6, (uint64_t)v9, 2uLL);
    sub_2109ED500((char *)v7, (uint64_t *)v6, &stru_254A72600, v4, v5);
    sub_2108A89B4(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A72600, &dword_21089F000);
          __cxa_guard_release(&qword_254A72618);
          return &stru_254A72600;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_254A72600;
}

void sub_2109956F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_2108A89B4((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_254A72618);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_254A72618);
  _Unwind_Resume(a1);
}

void sub_2109957A8(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_2108B314C(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_2109ECDA0(&__p, "cv3d::kit::img::", 16, (const std::string::value_type *)&unk_210A01421, 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_210995844(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_210995860(_DWORD *a1)
{
  return ((*a1 >> 1) & 1) + (*a1 & 1) + ((*a1 >> 2) & 1) + ((*a1 >> 3) & 1u) <= 1
      && ((*a1 >> 4) & 1) + ((*a1 >> 5) & 1) + ((*a1 >> 6) & 1u) < 2;
}

uint64_t sub_2109958B0(_DWORD *a1)
{
  if ((*a1 & 1) != 0)
    return 1;
  if ((*a1 & 2) != 0)
    return 2;
  return 4 * ((*a1 & 0xC) != 0);
}

uint64_t sub_2109958E8(int *a1)
{
  int v1;
  unsigned int v2;
  unint64_t v3;

  v1 = *a1;
  if ((*a1 & 1) != 0)
  {
    v2 = 1;
    if ((v1 & 0x10) == 0)
      goto LABEL_7;
    return v2;
  }
  if ((v1 & 2) != 0)
  {
    v2 = 2;
    if ((v1 & 0x10) == 0)
      goto LABEL_7;
    return v2;
  }
  if ((v1 & 0xC) == 0)
    return 0;
  v2 = 4;
  if ((v1 & 0x10) != 0)
    return v2;
LABEL_7:
  if ((v1 & 0x20) != 0)
    return 2 * v2;
  v3 = v1 & 0x40;
  if ((_DWORD)v3)
    return (v3 >> 4) * (unint64_t)v2;
  return 0;
}

_QWORD *sub_21099596C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = off_24CA82AE8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_2109959B4(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  _QWORD *v13;
  _QWORD *v14;
  std::__thread_struct *v15;
  char *v16;
  int v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  void *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  std::future<void> v33;
  void *v34[2];
  uint64_t v35;
  pthread_t v36;
  uint64_t v37;
  _QWORD v38[3];
  _QWORD *v39;
  uint64_t v40;
  _QWORD v41[3];
  _QWORD *v42;
  uint64_t v43;
  _QWORD v44[3];
  _QWORD *v45;
  __int128 __p;
  uint64_t v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v37 = a1;
  v5 = v38;
  v6 = (_QWORD *)a3[3];
  if (!v6)
  {
    v39 = 0;
    v40 = a1;
    v7 = v41;
    goto LABEL_9;
  }
  if (v6 == a3)
  {
    v39 = v38;
    (*(void (**)(_QWORD *, _QWORD *))(*a3 + 24))(a3, v38);
    v6 = v39;
    v40 = v37;
    v7 = v41;
    if (v39)
      goto LABEL_7;
LABEL_9:
    v42 = v6;
    goto LABEL_10;
  }
  v6 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v6 + 16))(v6);
  v39 = v6;
  v40 = a1;
  v7 = v41;
  if (!v6)
    goto LABEL_9;
LABEL_7:
  if (v6 != v38)
  {
    v6 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v6 + 16))(v6);
    goto LABEL_9;
  }
  v42 = v41;
  (*(void (**)(_QWORD *, _QWORD *))(v38[0] + 24))(v38, v41);
LABEL_10:
  sub_210996AA0(v34, a2);
  v43 = v40;
  v8 = &v43;
  v9 = v44;
  if (!v42)
  {
LABEL_13:
    v8[4] = 0;
    goto LABEL_15;
  }
  if (v42 != v41)
  {
    v8 = &v40;
    v45 = v42;
    goto LABEL_13;
  }
  v45 = v44;
  (*(void (**)(_QWORD *, _QWORD *))(v41[0] + 24))(v41, v44);
LABEL_15:
  __p = *(_OWORD *)v34;
  v47 = v35;
  v34[1] = 0;
  v35 = 0;
  v34[0] = 0;
  v10 = operator new();
  v11 = v10;
  *(_QWORD *)(v10 + 8) = 0;
  v12 = (unint64_t *)(v10 + 8);
  *(_QWORD *)v10 = &off_24CA82B80;
  v13 = v45;
  *(_QWORD *)(v10 + 144) = v43;
  *(_QWORD *)(v10 + 16) = 0;
  *(_QWORD *)(v10 + 24) = 850045863;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)(v10 + 64) = 0u;
  *(_QWORD *)(v10 + 80) = 0;
  *(_QWORD *)(v10 + 88) = 1018212795;
  *(_OWORD *)(v10 + 96) = 0u;
  *(_OWORD *)(v10 + 112) = 0u;
  *(_OWORD *)(v10 + 124) = 0u;
  if (!v13)
  {
    v14 = (_QWORD *)(v10 + 176);
    goto LABEL_19;
  }
  if (v13 != v44)
  {
    v14 = &v45;
    *(_QWORD *)(v10 + 176) = v13;
LABEL_19:
    *v14 = 0;
    goto LABEL_21;
  }
  *(_QWORD *)(v10 + 176) = v10 + 152;
  (*(void (**)(_QWORD *))(v44[0] + 24))(v44);
LABEL_21:
  *(_OWORD *)(v11 + 184) = __p;
  *(_QWORD *)(v11 + 200) = v47;
  v47 = 0;
  __p = 0uLL;
  v15 = (std::__thread_struct *)operator new();
  std::__thread_struct::__thread_struct(v15);
  v16 = (char *)operator new();
  *(_QWORD *)v16 = v15;
  *(_OWORD *)(v16 + 8) = xmmword_210A18BD0;
  *((_QWORD *)v16 + 3) = v11;
  v17 = pthread_create(&v36, 0, (void *(__cdecl *)(void *))sub_2109969F4, v16);
  if (v17)
  {
    std::__throw_system_error(v17, "thread constructor failed");
    __break(1u);
    JUMPOUT(0x210995DA8);
  }
  std::thread::detach((std::thread *)&v36);
  std::thread::~thread((std::thread *)&v36);
  std::future<void>::future(&v33, (std::__assoc_sub_state *)v11);
  do
    v18 = __ldaxr(v12);
  while (__stlxr(v18 - 1, v12));
  if (v18)
  {
    v19 = (void *)__p;
    if ((_QWORD)__p)
      goto LABEL_26;
  }
  else
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    v19 = (void *)__p;
    if ((_QWORD)__p)
    {
LABEL_26:
      v20 = *((_QWORD *)&__p + 1);
      v21 = v19;
      if (*((void **)&__p + 1) != v19)
      {
        do
        {
          v22 = (void *)(v20 - 128);
          v23 = *(unsigned int *)(v20 - 8);
          if ((_DWORD)v23 != -1)
            ((void (*)(pthread_t *, uint64_t))off_24CA82BB8[v23])(&v36, v20 - 128);
          *(_DWORD *)(v20 - 8) = -1;
          v20 -= 128;
        }
        while (v22 != v19);
        v21 = (void *)__p;
      }
      *((_QWORD *)&__p + 1) = v19;
      operator delete(v21);
      v24 = v45;
      if (v45 == v44)
        goto LABEL_33;
      goto LABEL_36;
    }
  }
  v24 = v45;
  if (v45 == v44)
  {
LABEL_33:
    v25 = 4;
    goto LABEL_38;
  }
LABEL_36:
  if (!v24)
    goto LABEL_39;
  v25 = 5;
  v9 = v24;
LABEL_38:
  (*(void (**)(_QWORD *))(*v9 + 8 * v25))(v9);
LABEL_39:
  v26 = (char *)v34[0];
  if (v34[0])
  {
    v27 = (char *)v34[1];
    v28 = v34[0];
    if (v34[1] != v34[0])
    {
      do
      {
        v29 = v27 - 128;
        v30 = *((unsigned int *)v27 - 2);
        if ((_DWORD)v30 != -1)
          ((void (*)(pthread_t *, char *))off_24CA82BB8[v30])(&v36, v27 - 128);
        *((_DWORD *)v27 - 2) = -1;
        v27 -= 128;
      }
      while (v29 != v26);
      v28 = v34[0];
    }
    v34[1] = v26;
    operator delete(v28);
  }
  if (v42 == v41)
  {
    v31 = 4;
  }
  else
  {
    if (!v42)
      goto LABEL_54;
    v31 = 5;
    v7 = v42;
  }
  (*(void (**)(_QWORD *))(*v7 + 8 * v31))(v7);
LABEL_54:
  std::future<void>::~future(&v33);
  if (v39 == v38)
  {
    v32 = 4;
  }
  else
  {
    if (!v39)
      return;
    v32 = 5;
    v5 = v39;
  }
  (*(void (**)(_QWORD *))(*v5 + 8 * v32))(v5);
}

void sub_210996354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, uint64_t a10, char *a11, char *a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,_QWORD *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,_QWORD *a30,char *__p,char *a32)
{
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;

  do
    v37 = __ldaxr(v36);
  while (__stlxr(v37 - 1, v36));
  if (!v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 16))(v35);
  v38 = __p;
  if (__p)
  {
    v39 = a32;
    v40 = __p;
    if (a32 != __p)
    {
      do
      {
        v41 = v39 - 128;
        v42 = *((unsigned int *)v39 - 2);
        if ((_DWORD)v42 != -1)
          ((void (*)(char *, char *))off_24CA82BB8[v42])(&a15, v39 - 128);
        *((_DWORD *)v39 - 2) = -1;
        v39 -= 128;
      }
      while (v41 != v38);
      v40 = __p;
    }
    a32 = v38;
    operator delete(v40);
  }
  if (a30 == v34)
  {
    v43 = 4;
  }
  else
  {
    if (!a30)
      goto LABEL_17;
    v43 = 5;
    v34 = a30;
  }
  (*(void (**)(_QWORD *))(*v34 + 8 * v43))(v34);
LABEL_17:
  if (a11)
  {
    v44 = a12;
    v45 = a11;
    if (a12 != a11)
    {
      do
      {
        v46 = v44 - 128;
        v47 = *((unsigned int *)v44 - 2);
        if ((_DWORD)v47 != -1)
          ((void (*)(char *, char *))off_24CA82BB8[v47])(&a15, v44 - 128);
        *((_DWORD *)v44 - 2) = -1;
        v44 -= 128;
      }
      while (v46 != a11);
      v45 = a11;
    }
    operator delete(v45);
  }
  if (a25 == v33)
  {
    v48 = 4;
  }
  else
  {
    if (!a25)
      goto LABEL_30;
    v48 = 5;
    v33 = a25;
  }
  (*(void (**)(_QWORD *))(*v33 + 8 * v48))(v33);
LABEL_30:
  if (a20 == v32)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 32))(v32);
    _Unwind_Resume(a1);
  }
  if (a20)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a20 + 40))(a20);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x210996534);
}

void sub_21099652C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_2108ABF6C(a1);
}

void sub_210996544()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Instance does not support view returns");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_210996580(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_210996594()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Model does not support runtime configurations");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_2109965D0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2109965E4()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Model does not support runtime configurations");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_210996620(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_210996634(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char v9;

  *(_QWORD *)a1 = &off_24CA82B80;
  v2 = *(_QWORD *)(a1 + 184);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 192);
    v4 = *(void **)(a1 + 184);
    if (v3 != v2)
    {
      do
      {
        v5 = v3 - 128;
        v6 = *(unsigned int *)(v3 - 8);
        if ((_DWORD)v6 != -1)
          ((void (*)(char *, uint64_t))off_24CA82BB8[v6])(&v9, v3 - 128);
        *(_DWORD *)(v3 - 8) = -1;
        v3 -= 128;
      }
      while (v5 != v2);
      v4 = *(void **)(a1 + 184);
    }
    *(_QWORD *)(a1 + 192) = v2;
    operator delete(v4);
  }
  v7 = *(_QWORD **)(a1 + 176);
  if (v7 == (_QWORD *)(a1 + 152))
  {
    v8 = 4;
    v7 = (_QWORD *)(a1 + 152);
    goto LABEL_13;
  }
  if (v7)
  {
    v8 = 5;
LABEL_13:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(a1 + 16));
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

void sub_210996744(uint64_t a1)
{
  sub_210996634(a1);
  JUMPOUT(0x212BCC6FCLL);
}

void sub_210996768(std::__assoc_sub_state *a1)
{
  std::__assoc_sub_state::wait(a1);
  std::__assoc_sub_state::__on_zero_shared(a1);
}

void sub_210996790(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  char *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD v12[3];
  std::__shared_weak_count *v13;
  void *__p;
  char *v15;
  char v16;

  (*(void (**)(_QWORD *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 144) + 24))(v12, *(_QWORD *)(a1 + 144), a1 + 184);
  v2 = *(_QWORD *)(a1 + 176);
  if (!v2)
    sub_2108B30F0();
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v2 + 48))(v2, v12);
  if (v16)
  {
    v3 = (char *)__p;
    if (__p)
    {
      v4 = v15;
      v5 = __p;
      if (v15 != __p)
      {
        do
        {
          if (*(v4 - 8))
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 6);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
          }
          v4 -= 120;
        }
        while (v4 != v3);
        v5 = __p;
      }
      v15 = v3;
      operator delete(v5);
    }
  }
  v12[0] = &off_24CA79A00;
  v9 = v13;
  if (v13)
  {
    v10 = (unint64_t *)&v13->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  std::__assoc_sub_state::set_value((std::__assoc_sub_state *)a1);
}

void sub_2109968C8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  std::__assoc_sub_state *v26;
  char *v28;
  char *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  std::exception_ptr v35;
  std::exception_ptr v36[4];
  std::__shared_weak_count *v37;
  char *v38;
  char *v39;
  char v40;

  if (v40 && v38)
  {
    v28 = v39;
    v29 = v38;
    if (v39 != v38)
    {
      do
      {
        if (*(v28 - 8))
        {
          v30 = (std::__shared_weak_count *)*((_QWORD *)v28 - 6);
          if (v30)
          {
            p_shared_owners = (unint64_t *)&v30->__shared_owners_;
            do
              v32 = __ldaxr(p_shared_owners);
            while (__stlxr(v32 - 1, p_shared_owners));
            if (!v32)
            {
              ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
              std::__shared_weak_count::__release_weak(v30);
            }
          }
        }
        v28 -= 120;
      }
      while (v28 != v38);
      v29 = v38;
    }
    v39 = v38;
    operator delete(v29);
  }
  v36[1].__ptr_ = &off_24CA79A00;
  if (v37)
  {
    v33 = &v37->__shared_owners_;
    do
      v34 = __ldaxr((unint64_t *)v33);
    while (__stlxr(v34 - 1, (unint64_t *)v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  v35.__ptr_ = v36;
  std::__assoc_sub_state::set_exception(v26, v35);
  std::exception_ptr::~exception_ptr(v36);
  __cxa_end_catch();
}

void sub_2109969D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_2109969F4(uint64_t a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v2;
  const void *v3;
  void (*v4)(_QWORD *);
  uint64_t v5;
  _QWORD *v6;
  const void *v7;
  uint64_t v8;

  v2 = std::__thread_local_data();
  v3 = *(const void **)a1;
  *(_QWORD *)a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  v4 = *(void (**)(_QWORD *))(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = (_QWORD *)(*(_QWORD *)(a1 + 24) + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(void (**)(_QWORD *))(*v6 + v4);
  v4(v6);
  v7 = *(const void **)a1;
  *(_QWORD *)a1 = 0;
  if (v7)
  {
    v8 = MEMORY[0x212BCC4F8]();
    MEMORY[0x212BCC6FC](v8, 0x20C4093837F09);
  }
  MEMORY[0x212BCC6FC](a1, 0xA0C40F20CD8FBLL);
  return 0;
}

void sub_210996A8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_210978E88((uint64_t **)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_210996AA0(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char v11[3];

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = *a2;
  v4 = a2[1];
  v5 = v4 - *a2;
  if (v4 != *a2)
  {
    if (v5 < 0)
      sub_2108B327C();
    v6 = (char *)operator new(v4 - *a2);
    v7 = 0;
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[128 * (v5 >> 7)];
    do
    {
      v8 = &v6[v7];
      *v8 = 0;
      *((_DWORD *)v8 + 30) = -1;
      v9 = *(unsigned int *)(v3 + v7 + 120);
      if ((_DWORD)v9 != -1)
      {
        ((void (*)(char *, char *))off_24CA82BD0[v9])(v11, &v6[v7]);
        *((_DWORD *)v8 + 30) = v9;
      }
      v7 += 128;
    }
    while (v3 + v7 != v4);
    a1[1] = &v6[v7];
  }
  return a1;
}

void sub_210996B88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11, char a12, char a13, char a14)
{
  void **v14;
  char *v16;
  char *v17;
  void *v18;
  char *v19;
  uint64_t v20;

  v16 = (char *)*v14;
  if (*v14)
  {
    v17 = (char *)v14[1];
    v18 = *v14;
    if (v17 != v16)
    {
      do
      {
        v19 = v17 - 128;
        v20 = *((unsigned int *)v17 - 2);
        if ((_DWORD)v20 != -1)
          ((void (*)(char *, char *))off_24CA82BB8[v20])(&a11, v17 - 128);
        *((_DWORD *)v17 - 2) = -1;
        v17 -= 128;
      }
      while (v19 != v16);
      v18 = *v14;
    }
    v14[1] = v16;
    operator delete(v18);
  }
  _Unwind_Resume(exception_object);
}

void sub_210996C8C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char v9;

  *(_QWORD *)a1 = &off_24CA82BF8;
  v2 = *(_QWORD *)(a1 + 184);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 192);
    v4 = *(void **)(a1 + 184);
    if (v3 != v2)
    {
      do
      {
        v5 = v3 - 128;
        v6 = *(unsigned int *)(v3 - 8);
        if ((_DWORD)v6 != -1)
          ((void (*)(char *, uint64_t))off_24CA82BB8[v6])(&v9, v3 - 128);
        *(_DWORD *)(v3 - 8) = -1;
        v3 -= 128;
      }
      while (v5 != v2);
      v4 = *(void **)(a1 + 184);
    }
    *(_QWORD *)(a1 + 192) = v2;
    operator delete(v4);
  }
  v7 = *(_QWORD **)(a1 + 176);
  if (v7 == (_QWORD *)(a1 + 152))
  {
    v8 = 4;
    v7 = (_QWORD *)(a1 + 152);
    goto LABEL_13;
  }
  if (v7)
  {
    v8 = 5;
LABEL_13:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(a1 + 16));
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

void sub_210996D9C(uint64_t a1)
{
  sub_210996C8C(a1);
  JUMPOUT(0x212BCC6FCLL);
}

void sub_210996DC0(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  char *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD v12[3];
  std::__shared_weak_count *v13;
  void *__p;
  char *v15;
  char v16;

  (*(void (**)(_QWORD *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 144) + 24))(v12, *(_QWORD *)(a1 + 144), a1 + 184);
  v2 = *(_QWORD *)(a1 + 176);
  if (!v2)
    sub_2108B30F0();
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v2 + 48))(v2, v12);
  if (v16)
  {
    v3 = (char *)__p;
    if (__p)
    {
      v4 = v15;
      v5 = __p;
      if (v15 != __p)
      {
        do
        {
          if (*(v4 - 8))
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 6);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
          }
          v4 -= 120;
        }
        while (v4 != v3);
        v5 = __p;
      }
      v15 = v3;
      operator delete(v5);
    }
  }
  v12[0] = &off_24CA79A00;
  v9 = v13;
  if (v13)
  {
    v10 = (unint64_t *)&v13->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  std::__assoc_sub_state::set_value((std::__assoc_sub_state *)a1);
}

void sub_210996EF8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  std::__assoc_sub_state *v26;
  char *v28;
  char *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  std::exception_ptr v35;
  std::exception_ptr v36[4];
  std::__shared_weak_count *v37;
  char *v38;
  char *v39;
  char v40;

  if (v40 && v38)
  {
    v28 = v39;
    v29 = v38;
    if (v39 != v38)
    {
      do
      {
        if (*(v28 - 8))
        {
          v30 = (std::__shared_weak_count *)*((_QWORD *)v28 - 6);
          if (v30)
          {
            p_shared_owners = (unint64_t *)&v30->__shared_owners_;
            do
              v32 = __ldaxr(p_shared_owners);
            while (__stlxr(v32 - 1, p_shared_owners));
            if (!v32)
            {
              ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
              std::__shared_weak_count::__release_weak(v30);
            }
          }
        }
        v28 -= 120;
      }
      while (v28 != v38);
      v29 = v38;
    }
    v39 = v38;
    operator delete(v29);
  }
  v36[1].__ptr_ = &off_24CA79A00;
  if (v37)
  {
    v33 = &v37->__shared_owners_;
    do
      v34 = __ldaxr((unint64_t *)v33);
    while (__stlxr(v34 - 1, (unint64_t *)v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  v35.__ptr_ = v36;
  std::__assoc_sub_state::set_exception(v26, v35);
  std::exception_ptr::~exception_ptr(v36);
  __cxa_end_catch();
}

void sub_210997008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_210997024(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v3)
    return a1;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return a1;
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

BOOL sub_2109970A4(unsigned int a1)
{
  _BOOL8 v2;
  void *__p[2];
  char v5;
  char v6;

  sub_2108A4A34(__p);
  v2 = sub_210997120((uint64_t)__p, a1);
  if (v6 && v5 < 0)
    operator delete(__p[0]);
  return v2;
}

void sub_2109970FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_210997120(uint64_t a1, unsigned int a2)
{
  _BOOL8 v3;
  uint64_t v4;
  void **v5;
  char *v6;
  std::string::size_type v7;
  std::string *p_dst;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  std::string __dst;
  void *__p[2];
  uint64_t v16;

  if (!*(_BYTE *)(a1 + 24))
    return 0;
  if (*(char *)(a1 + 23) < 0)
  {
    sub_2108B314C(__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a1;
    v16 = *(_QWORD *)(a1 + 16);
  }
  if (v16 >= 0)
    v4 = HIBYTE(v16);
  else
    v4 = (uint64_t)__p[1];
  if (v4 >= 1)
  {
    v5 = __p;
    if (v16 < 0)
      v5 = (void **)__p[0];
    if (*(_BYTE *)v5 == 104)
    {
      if (SHIBYTE(v16) < 0)
      {
        if (__p[1])
        {
          v6 = (char *)__p[0] + 1;
          v7 = (std::string::size_type)__p[1] - 1;
          if ((unint64_t)__p[1] - 1 < 0x7FFFFFFFFFFFFFF8)
          {
LABEL_16:
            if (v7 >= 0x17)
            {
              v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v7 | 7) != 0x17)
                v10 = v7 | 7;
              v11 = v10 + 1;
              p_dst = (std::string *)operator new(v10 + 1);
              __dst.__r_.__value_.__l.__size_ = v7;
              __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
            }
            else
            {
              *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v7;
              p_dst = &__dst;
              if (!v7)
              {
LABEL_26:
                p_dst->__r_.__value_.__s.__data_[v7] = 0;
                v12 = std::stoi(&__dst, 0, 10);
                v13 = v12;
                if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                {
                  operator delete(__dst.__r_.__value_.__l.__data_);
                  v3 = v13 >= a2;
                  if ((v16 & 0x8000000000000000) == 0)
                    return v3;
                }
                else
                {
                  v3 = v12 >= a2;
                  if ((v16 & 0x8000000000000000) == 0)
                    return v3;
                }
                goto LABEL_20;
              }
            }
            memmove(p_dst, v6, v7);
            goto LABEL_26;
          }
LABEL_31:
          sub_2108A4B7C();
        }
      }
      else if (HIBYTE(v16))
      {
        v6 = (char *)__p + 1;
        v7 = HIBYTE(v16) - 1;
        if (v7 < 0x7FFFFFFFFFFFFFF8)
          goto LABEL_16;
        goto LABEL_31;
      }
      sub_2108B3068();
    }
  }
  v3 = 0;
  if (v16 < 0)
LABEL_20:
    operator delete(__p[0]);
  return v3;
}

void sub_2109972D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if (a21 < 0)
    {
LABEL_5:
      operator delete(a16);
      _Unwind_Resume(a1);
    }
  }
  else if (a21 < 0)
  {
    goto LABEL_5;
  }
  _Unwind_Resume(a1);
}

void sub_210997320(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  std::string *v6;
  __int128 *v7;
  void *v8;
  int v9;
  __int128 v10;
  std::string v11;
  _OWORD __dst[2];
  unint64_t v13;
  _QWORD v14[3];

  v14[2] = *MEMORY[0x24BDAC8D0];
  v13 = a2;
  v4 = *(_QWORD *)(a1 + 40);
  if (0xCF3CF3CF3CF3CF3DLL * ((*(_QWORD *)(a1 + 48) - v4) >> 3) <= a2)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 24) = 0;
    return;
  }
  sub_2108AE440(&v13);
  v6 = std::string::insert(&v11, 0, "input__", 7uLL);
  v7 = (__int128 *)(v4 + 168 * a2);
  v8 = (void *)v6->__r_.__value_.__r.__words[0];
  v14[0] = v6->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v14 + 7) = *(std::string::size_type *)((char *)&v6->__r_.__value_.__r.__words[1] + 7);
  v9 = SHIBYTE(v6->__r_.__value_.__r.__words[2]);
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (!*((_BYTE *)v7 + 24))
  {
    *(_QWORD *)&__dst[0] = v8;
    *((_QWORD *)&__dst[0] + 1) = v14[0];
    *(_QWORD *)((char *)__dst + 15) = *(_QWORD *)((char *)v14 + 7);
    BYTE7(__dst[1]) = v9;
    *(_OWORD *)a3 = __dst[0];
    *(_QWORD *)(a3 + 16) = *(_QWORD *)&__dst[1];
    memset(__dst, 0, 24);
    *(_BYTE *)(a3 + 24) = 1;
    if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    goto LABEL_13;
  }
  if (*((char *)v7 + 23) < 0)
  {
    sub_2108B314C(__dst, *(void **)v7, *((_QWORD *)v7 + 1));
  }
  else
  {
    v10 = *v7;
    *(_QWORD *)&__dst[1] = *((_QWORD *)v7 + 2);
    __dst[0] = v10;
  }
  *(_OWORD *)a3 = __dst[0];
  *(_QWORD *)(a3 + 16) = *(_QWORD *)&__dst[1];
  memset(__dst, 0, 24);
  *(_BYTE *)(a3 + 24) = 1;
  if ((v9 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_13:
    operator delete(v11.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v8);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_13;
}

void sub_2109974E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (v16 < 0)
    operator delete(v15);
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_21099751C(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  std::string *v6;
  __int128 *v7;
  void *v8;
  int v9;
  __int128 v10;
  std::string v11;
  _OWORD __dst[2];
  unint64_t v13;
  _QWORD v14[3];

  v14[2] = *MEMORY[0x24BDAC8D0];
  v13 = a2;
  v4 = *(_QWORD *)(a1 + 64);
  if (a2 >= (*(_QWORD *)(a1 + 72) - v4) >> 5)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 24) = 0;
    return;
  }
  sub_2108AE440(&v13);
  v6 = std::string::insert(&v11, 0, "output__", 8uLL);
  v7 = (__int128 *)(v4 + 32 * a2);
  v8 = (void *)v6->__r_.__value_.__r.__words[0];
  v14[0] = v6->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v14 + 7) = *(std::string::size_type *)((char *)&v6->__r_.__value_.__r.__words[1] + 7);
  v9 = SHIBYTE(v6->__r_.__value_.__r.__words[2]);
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (!*((_BYTE *)v7 + 24))
  {
    *(_QWORD *)&__dst[0] = v8;
    *((_QWORD *)&__dst[0] + 1) = v14[0];
    *(_QWORD *)((char *)__dst + 15) = *(_QWORD *)((char *)v14 + 7);
    BYTE7(__dst[1]) = v9;
    *(_OWORD *)a3 = __dst[0];
    *(_QWORD *)(a3 + 16) = *(_QWORD *)&__dst[1];
    memset(__dst, 0, 24);
    *(_BYTE *)(a3 + 24) = 1;
    if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    goto LABEL_13;
  }
  if (*((char *)v7 + 23) < 0)
  {
    sub_2108B314C(__dst, *(void **)v7, *((_QWORD *)v7 + 1));
  }
  else
  {
    v10 = *v7;
    *(_QWORD *)&__dst[1] = *((_QWORD *)v7 + 2);
    __dst[0] = v10;
  }
  *(_OWORD *)a3 = __dst[0];
  *(_QWORD *)(a3 + 16) = *(_QWORD *)&__dst[1];
  memset(__dst, 0, 24);
  *(_BYTE *)(a3 + 24) = 1;
  if ((v9 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_13:
    operator delete(v11.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v8);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_13;
}

void sub_2109976C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (v16 < 0)
    operator delete(v15);
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2109976FC()
{
  _QWORD *v0;
  _QWORD *v1;

  v0 = (_QWORD *)std::ostream::operator<<();
  sub_2108CEF94(v0, (uint64_t)".", 1);
  v1 = (_QWORD *)std::ostream::operator<<();
  sub_2108CEF94(v1, (uint64_t)".", 1);
  return std::ostream::operator<<();
}

void sub_21099774C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _OWORD *v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  void *v11;
  uint64_t context;
  int v13;
  uint64_t v14;
  int v15;
  size_t v16;
  _BYTE *v17;
  int v18;
  int v19;
  uint64_t plan;
  uint64_t v21;
  unsigned int v22;
  int v23;
  size_t v24;
  unint64_t v25;
  _BYTE *v26;
  int v27;
  size_t v28;
  unint64_t v29;
  _BYTE *v30;
  unint64_t v31;
  unint64_t v32;
  const void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  std::string *v46;
  __int128 v47;
  std::string *v48;
  __int128 v49;
  const std::string::value_type *v50;
  std::string::size_type v51;
  std::string *v52;
  __int128 v53;
  uint64_t v54;
  const void *v55;
  std::string *v56;
  __int128 v57;
  std::string *v58;
  std::string::size_type size;
  std::string *v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  const void *v65;
  std::string *v66;
  __int128 v67;
  const std::string::value_type *v68;
  std::string::size_type v69;
  std::string *v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  int v87;
  int v88;
  uint64_t v89;
  int v90;
  float v91;
  int v92;
  BOOL v93;
  unsigned int v94;
  std::string *v95;
  __int128 v96;
  std::string *v97;
  __int128 v98;
  const std::string::value_type *v99;
  std::string::size_type v100;
  std::string *v101;
  __int128 v102;
  std::string *v103;
  __int128 v104;
  std::string *v105;
  std::string::size_type v106;
  std::string *v107;
  __int128 v108;
  int v109;
  __int128 v110;
  unint64_t v111;
  unint64_t v112;
  char *v113;
  unint64_t v114;
  unint64_t v115;
  char *v116;
  char *v117;
  char *v118;
  __int128 v119;
  char *v120;
  char *v121;
  char *v122;
  char *v123;
  __int128 v124;
  std::string *v125;
  __int128 v126;
  std::string *v127;
  __int128 v128;
  const std::string::value_type *v129;
  std::string::size_type v130;
  std::string *v131;
  __int128 v132;
  std::string *v133;
  __int128 v134;
  std::string *v135;
  std::string::size_type v136;
  unsigned int v137;
  std::string *v138;
  __int128 v139;
  void *v140;
  std::string *v141;
  __int128 v142;
  std::string *v143;
  __int128 v144;
  const std::string::value_type *v145;
  std::string::size_type v146;
  std::string *v147;
  __int128 v148;
  std::string *v149;
  __int128 v150;
  std::string *v151;
  __int128 v152;
  unsigned int blob_dimensions;
  _QWORD *v154;
  uint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  _BYTE v160[48];
  int v161;
  unint64_t v162;
  std::string v163;
  std::string v164;
  std::string v165;
  __int128 v166;
  std::string v167;
  std::string v168;
  void *v169[2];
  uint64_t v170;
  void *v171;
  char v172;
  _BYTE __p[32];
  _BYTE *v174;
  _QWORD v175[7];
  _QWORD v176[2];
  _BYTE v177[48];
  unint64_t v178;
  _BYTE *v179;
  _QWORD v180[3];
  _QWORD *v181;
  uint64_t v182;

  v182 = *MEMORY[0x24BDAC8D0];
  v6 = (_OWORD *)(a1 + 16);
  if (*(char *)(a1 + 39) < 0)
  {
    sub_2108B314C(v169, *(void **)(a1 + 16), *(_QWORD *)(a1 + 24));
  }
  else
  {
    *(_OWORD *)v169 = *v6;
    v170 = *(_QWORD *)(a1 + 32);
  }
  *(_DWORD *)&__p[24] = 0;
  sub_2108C507C((uint64_t)v180, (uint64_t)__p);
  if (*(_DWORD *)&__p[24] == -1)
    sub_2108B9060();
  v180[0] = &v177[32];
  ((void (*)(void **__return_ptr, _QWORD *, _BYTE *))off_24CA82CD0[*(unsigned int *)&__p[24]])(&v171, v180, __p);
  if (*(_DWORD *)&__p[24] != -1)
    ((void (*)(_QWORD *, _BYTE *))off_24CA82CB8[*(unsigned int *)&__p[24]])(v180, __p);
  v7 = *(unsigned __int8 *)(a2 + 40);
  v9 = *(_DWORD *)(a2 + 32);
  v8 = *(_DWORD *)(a2 + 36);
  v10 = (unsigned __int16)sub_2109EBA94();
  if (v10 <= 0x100)
    LOBYTE(v10) = 0;
  if (v9 <= 1 && (_BYTE)v10 && (v8 < 2 || &__p[4] - __p != 4))
    goto LABEL_31;
  if (v7)
  {
LABEL_16:
    *(_QWORD *)__p = operator new(0x38uLL);
    *(_OWORD *)&__p[8] = xmmword_210A11B80;
    strcpy(*(char **)__p, "Either requested device or storage type not supported");
    sub_21099983C(a3, (const void **)v169, (uint64_t)__p);
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_331;
    v11 = *(void **)__p;
    goto LABEL_111;
  }
  if ((v9 | 2) == 2)
  {
    if (v8 < 2)
      goto LABEL_31;
    if (v8 == 2)
    {
      if (&__p[4] - __p != 8)
        goto LABEL_31;
    }
    else if (&__p[8] - __p != 8)
    {
      goto LABEL_31;
    }
  }
  if (v9 != 3 && v9)
    goto LABEL_16;
  if (v8 >= 2)
  {
    if (v8 == 2)
    {
      if (&__p[4] - __p == 8)
        goto LABEL_16;
    }
    else if (&__p[8] - __p == 8)
    {
      goto LABEL_16;
    }
  }
LABEL_31:
  switch(*(_DWORD *)(a2 + 32))
  {
    case 0:
      context = sub_2109A7C8C(v7 != 0);
      *(_DWORD *)(a2 + 32) = v13;
      if (!context)
        goto LABEL_33;
      goto LABEL_37;
    case 1:
    case 2:
    case 3:
      context = espresso_create_context();
      if (!context)
      {
LABEL_33:
        LODWORD(v181) = 0;
        v14 = operator new();
        *(_QWORD *)(v14 + 272) = 0;
        *(_OWORD *)(v14 + 240) = 0u;
        *(_OWORD *)(v14 + 256) = 0u;
        *(_OWORD *)(v14 + 208) = 0u;
        *(_OWORD *)(v14 + 224) = 0u;
        *(_OWORD *)(v14 + 176) = 0u;
        *(_OWORD *)(v14 + 192) = 0u;
        *(_OWORD *)(v14 + 144) = 0u;
        *(_OWORD *)(v14 + 160) = 0u;
        *(_OWORD *)(v14 + 112) = 0u;
        *(_OWORD *)(v14 + 128) = 0u;
        *(_OWORD *)(v14 + 80) = 0u;
        *(_OWORD *)(v14 + 96) = 0u;
        *(_OWORD *)(v14 + 48) = 0u;
        *(_OWORD *)(v14 + 64) = 0u;
        *(_OWORD *)(v14 + 16) = 0u;
        *(_OWORD *)(v14 + 32) = 0u;
        *(_OWORD *)v14 = 0u;
        sub_2108B18D0(v14);
        *(_QWORD *)__p = v14;
        sub_2108CEF94((_QWORD *)(v14 + 16), (uint64_t)(&off_24CA82910)[2 * *(int *)(a2 + 32)], 3);
        v15 = *(_DWORD *)(v14 + 120);
        if ((v15 & 0x10) != 0)
        {
          v31 = *(_QWORD *)(v14 + 112);
          v32 = *(_QWORD *)(v14 + 72);
          if (v31 < v32)
          {
            *(_QWORD *)(v14 + 112) = v32;
            v31 = v32;
          }
          v33 = *(const void **)(v14 + 64);
          v16 = v31 - (_QWORD)v33;
          if (v31 - (unint64_t)v33 > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_158;
        }
        else
        {
          if ((v15 & 8) == 0)
          {
            v16 = 0;
            HIBYTE(v178) = 0;
            v17 = &v177[32];
            goto LABEL_84;
          }
          v78 = *(_QWORD *)(v14 + 56);
          v33 = *(const void **)(v14 + 40);
          v16 = v78 - (_QWORD)v33;
          if ((unint64_t)(v78 - (_QWORD)v33) > 0x7FFFFFFFFFFFFFF7)
LABEL_158:
            sub_2108A4B7C();
        }
        if (v16 >= 0x17)
        {
          v40 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v16 | 7) != 0x17)
            v40 = v16 | 7;
          v41 = v40 + 1;
          v17 = operator new(v40 + 1);
          *(_QWORD *)&v177[40] = v16;
          v178 = v41 | 0x8000000000000000;
          *(_QWORD *)&v177[32] = v17;
        }
        else
        {
          HIBYTE(v178) = v16;
          v17 = &v177[32];
          if (!v16)
          {
LABEL_84:
            v17[v16] = 0;
            v42 = *(_QWORD *)__p;
            if (*(_QWORD *)__p)
            {
              v43 = MEMORY[0x24BEDB7F0];
              v44 = *MEMORY[0x24BEDB7F0];
              **(_QWORD **)__p = *MEMORY[0x24BEDB7F0];
              v45 = *(_QWORD *)(v43 + 72);
              *(_QWORD *)(v42 + *(_QWORD *)(v44 - 24)) = *(_QWORD *)(v43 + 64);
              *(_QWORD *)(v42 + 24) = MEMORY[0x24BEDB848] + 16;
              *(_QWORD *)(v42 + 16) = v45;
              if (*(char *)(v42 + 111) < 0)
                operator delete(*(void **)(v42 + 88));
              std::streambuf::~streambuf();
              std::iostream::~basic_iostream();
              MEMORY[0x212BCC66C](v42 + 128);
              MEMORY[0x212BCC6FC](v42, 0x10B2C40EED050F3);
            }
            *(_QWORD *)__p = v180;
            *(_QWORD *)&__p[8] = &v177[32];
            *(_QWORD *)&__p[16] = v180;
            *(_QWORD *)&__p[24] = &v177[32];
            v174 = &v177[32];
            if ((_DWORD)v181 == -1)
              sub_2108B9060();
            v165.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
            ((void (*)(std::string *, _QWORD *))off_24CA82CA0[v181])(&v165, v180);
            if (SHIBYTE(v178) < 0)
              operator delete(*(void **)&v177[32]);
            if ((_DWORD)v181 == -1)
              sub_2108B9060();
            *(_QWORD *)__p = &v177[32];
            ((void (*)(std::string *__return_ptr, _BYTE *, _QWORD *))off_24CA82CD0[v181])(&v167, __p, v180);
            if ((_DWORD)v181 != -1)
              ((void (*)(_BYTE *, _QWORD *))off_24CA82CB8[v181])(__p, v180);
            v46 = std::string::insert(&v167, 0, "Could not create espresso context for ", 0x26uLL);
            v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
            v168.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v168.__r_.__value_.__l.__data_ = v47;
            v46->__r_.__value_.__l.__size_ = 0;
            v46->__r_.__value_.__r.__words[2] = 0;
            v46->__r_.__value_.__r.__words[0] = 0;
            v48 = std::string::append(&v168, ": ", 2uLL);
            v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
            *(_QWORD *)&v160[16] = *((_QWORD *)&v48->__r_.__value_.__l + 2);
            *(_OWORD *)v160 = v49;
            v48->__r_.__value_.__l.__size_ = 0;
            v48->__r_.__value_.__r.__words[2] = 0;
            v48->__r_.__value_.__r.__words[0] = 0;
            sub_210999BF4((std::string *)__p, 0);
            if (__p[23] >= 0)
              v50 = __p;
            else
              v50 = *(const std::string::value_type **)__p;
            if (__p[23] >= 0)
              v51 = __p[23];
            else
              v51 = *(_QWORD *)&__p[8];
            v52 = std::string::append((std::string *)v160, v50, v51);
            v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
            *(_QWORD *)&v177[16] = *((_QWORD *)&v52->__r_.__value_.__l + 2);
            *(_OWORD *)v177 = v53;
            v52->__r_.__value_.__l.__size_ = 0;
            v52->__r_.__value_.__r.__words[2] = 0;
            v52->__r_.__value_.__r.__words[0] = 0;
            sub_21099983C(a3, (const void **)v169, (uint64_t)v177);
            if ((v177[23] & 0x80000000) != 0)
            {
              operator delete(*(void **)v177);
              if ((__p[23] & 0x80000000) == 0)
              {
LABEL_102:
                if ((v160[23] & 0x80000000) == 0)
                  goto LABEL_103;
                goto LABEL_108;
              }
            }
            else if ((__p[23] & 0x80000000) == 0)
            {
              goto LABEL_102;
            }
            operator delete(*(void **)__p);
            if ((v160[23] & 0x80000000) == 0)
            {
LABEL_103:
              if ((SHIBYTE(v168.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_104;
              goto LABEL_109;
            }
LABEL_108:
            operator delete(*(void **)v160);
            if ((SHIBYTE(v168.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_104:
              if ((SHIBYTE(v167.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_331;
LABEL_110:
              v11 = (void *)v167.__r_.__value_.__r.__words[0];
LABEL_111:
              operator delete(v11);
              goto LABEL_331;
            }
LABEL_109:
            operator delete(v168.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v167.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_331;
            goto LABEL_110;
          }
        }
        memmove(v17, v33, v16);
        goto LABEL_84;
      }
LABEL_37:
      v180[0] = &off_24CA82F58;
      v180[1] = MEMORY[0x24BE2FB00];
      v180[2] = context;
      v181 = v180;
      v18 = *(_DWORD *)(a2 + 32);
      v19 = *(_DWORD *)(a2 + 36);
      if (!v19)
      {
        v19 = 1;
        if (!v7 && (v18 - 1) >= 2)
        {
          if (v18 != 3)
          {
            sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoUtil.cpp", 62, (uint64_t)&unk_210A07C29, 0, (uint64_t)"Unexpected device type", 22, (void (*)(void **))sub_2109EDDB4);
            abort();
          }
          v19 = 2;
        }
        goto LABEL_45;
      }
      if (v19 == 2 && v18 == 1)
      {
        v19 = 1;
LABEL_45:
        *(_DWORD *)(a2 + 36) = v19;
      }
      if (v19 == 1
        && v18 == 2
        && *(_BYTE *)(a2 + 41)
        && espresso_context_set_low_precision_accumulation()
        && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoModelInstance.cpp", 97, (uint64_t)"ret == ESPRESSO_STATUS_SUCCESS", 30, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
      {
        abort();
      }
      plan = espresso_create_plan();
      v21 = plan;
      if (!plan)
      {
        v27 = *(char *)(a1 + 39);
        if (v27 >= 0)
          v28 = *(unsigned __int8 *)(a1 + 39);
        else
          v28 = *(_QWORD *)(a1 + 24);
        v29 = v28 + 44;
        if (v28 + 44 > 0x7FFFFFFFFFFFFFF7)
          sub_2108A4B7C();
        if (v29 > 0x16)
        {
          v62 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v29 | 7) != 0x17)
            v62 = v29 | 7;
          v63 = v62 + 1;
          v64 = (char *)operator new(v62 + 1);
          *(_QWORD *)&v177[8] = v28 + 44;
          *(_QWORD *)&v177[16] = v63 | 0x8000000000000000;
          *(_QWORD *)v177 = v64;
          qmemcpy(v64, "Could not create espresso plan for model at ", 44);
          v30 = v64 + 44;
          if (!v28)
          {
LABEL_137:
            v30[v28] = 0;
            v66 = std::string::append((std::string *)v177, ": ", 2uLL);
            v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
            v178 = v66->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v177[32] = v67;
            v66->__r_.__value_.__l.__size_ = 0;
            v66->__r_.__value_.__r.__words[2] = 0;
            v66->__r_.__value_.__r.__words[0] = 0;
            sub_210999BF4((std::string *)v160, 0);
            if (v160[23] >= 0)
              v68 = v160;
            else
              v68 = *(const std::string::value_type **)v160;
            if (v160[23] >= 0)
              v69 = v160[23];
            else
              v69 = *(_QWORD *)&v160[8];
            v70 = std::string::append((std::string *)&v177[32], v68, v69);
            v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
            *(_QWORD *)&__p[16] = *((_QWORD *)&v70->__r_.__value_.__l + 2);
            *(_OWORD *)__p = v71;
            v70->__r_.__value_.__l.__size_ = 0;
            v70->__r_.__value_.__r.__words[2] = 0;
            v70->__r_.__value_.__r.__words[0] = 0;
            sub_21099983C(a3, (const void **)v169, (uint64_t)__p);
            if ((__p[23] & 0x80000000) != 0)
            {
              operator delete(*(void **)__p);
              if ((v160[23] & 0x80000000) == 0)
              {
LABEL_145:
                if ((SHIBYTE(v178) & 0x80000000) == 0)
                  goto LABEL_146;
                goto LABEL_165;
              }
            }
            else if ((v160[23] & 0x80000000) == 0)
            {
              goto LABEL_145;
            }
            operator delete(*(void **)v160);
            if ((SHIBYTE(v178) & 0x80000000) == 0)
            {
LABEL_146:
              if ((v177[23] & 0x80000000) == 0)
                goto LABEL_325;
LABEL_166:
              operator delete(*(void **)v177);
              goto LABEL_325;
            }
LABEL_165:
            operator delete(*(void **)&v177[32]);
            if ((v177[23] & 0x80000000) == 0)
              goto LABEL_325;
            goto LABEL_166;
          }
        }
        else
        {
          qmemcpy(v177, "Could not create espresso plan for model at ", 44);
          v30 = &v177[44];
        }
        if (v27 >= 0)
          v65 = v6;
        else
          v65 = *(const void **)v6;
        memmove(v30, v65, v28);
        goto LABEL_137;
      }
      *(_QWORD *)&v177[32] = &off_24CA82F58;
      *(_QWORD *)&v177[40] = MEMORY[0x24BE2FC90];
      v178 = plan;
      v179 = &v177[32];
      v22 = espresso_plan_add_network();
      if (v22)
      {
        v23 = *(char *)(a1 + 39);
        if (v23 >= 0)
          v24 = *(unsigned __int8 *)(a1 + 39);
        else
          v24 = *(_QWORD *)(a1 + 24);
        v25 = v24 + 44;
        if (v24 + 44 > 0x7FFFFFFFFFFFFFF7)
          sub_2108A4B7C();
        if (v25 > 0x16)
        {
          v54 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v25 | 7) != 0x17)
            v54 = v25 | 7;
          *(_QWORD *)&v160[8] = v24 + 44;
          *(_QWORD *)&v160[16] = (v54 + 1) | 0x8000000000000000;
          *(_QWORD *)v160 = operator new(v54 + 1);
          qmemcpy(*(void **)v160, "Could not add espresso network for model at ", 44);
          v26 = (_BYTE *)(*(_QWORD *)v160 + 44);
          if (!v24)
          {
LABEL_119:
            v26[v24] = 0;
            v56 = std::string::append((std::string *)v160, ". ", 2uLL);
            v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
            *(_QWORD *)&v177[16] = *((_QWORD *)&v56->__r_.__value_.__l + 2);
            *(_OWORD *)v177 = v57;
            v56->__r_.__value_.__l.__size_ = 0;
            v56->__r_.__value_.__r.__words[2] = 0;
            v56->__r_.__value_.__r.__words[0] = 0;
            sub_210999BF4(&v168, v22 | 0x100000000);
            if ((v168.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v58 = &v168;
            else
              v58 = (std::string *)v168.__r_.__value_.__r.__words[0];
            if ((v168.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(v168.__r_.__value_.__r.__words[2]);
            else
              size = v168.__r_.__value_.__l.__size_;
            v60 = std::string::append((std::string *)v177, (const std::string::value_type *)v58, size);
            v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
            *(_QWORD *)&__p[16] = *((_QWORD *)&v60->__r_.__value_.__l + 2);
            *(_OWORD *)__p = v61;
            v60->__r_.__value_.__l.__size_ = 0;
            v60->__r_.__value_.__r.__words[2] = 0;
            v60->__r_.__value_.__r.__words[0] = 0;
            sub_21099983C(a3, (const void **)v169, (uint64_t)__p);
            if ((__p[23] & 0x80000000) != 0)
            {
              operator delete(*(void **)__p);
              if ((SHIBYTE(v168.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_127:
                if ((v177[23] & 0x80000000) == 0)
                  goto LABEL_128;
                goto LABEL_161;
              }
            }
            else if ((SHIBYTE(v168.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              goto LABEL_127;
            }
            operator delete(v168.__r_.__value_.__l.__data_);
            if ((v177[23] & 0x80000000) == 0)
            {
LABEL_128:
              if ((v160[23] & 0x80000000) == 0)
                goto LABEL_319;
LABEL_162:
              v79 = *(char **)v160;
              goto LABEL_318;
            }
LABEL_161:
            operator delete(*(void **)v177);
            if ((v160[23] & 0x80000000) == 0)
              goto LABEL_319;
            goto LABEL_162;
          }
        }
        else
        {
          qmemcpy(v160, "Could not add espresso network for model at ", 44);
          v26 = &v160[44];
        }
        if (v23 >= 0)
          v55 = v6;
        else
          v55 = *(const void **)v6;
        memmove(v26, v55, v24);
        goto LABEL_119;
      }
      v35 = *(_QWORD *)(a1 + 40);
      v34 = *(_QWORD *)(a1 + 48);
      if (v34 == v35)
      {
        if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoModelInstance.cpp", 119, (uint64_t)"params.inputs.size() >= 1", 25, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
        {
          goto LABEL_347;
        }
        v35 = *(_QWORD *)(a1 + 40);
        v34 = *(_QWORD *)(a1 + 48);
      }
      v36 = v34 - v35;
      if (v36)
      {
        v37 = 0;
        v38 = v36 / 168;
        while (1)
        {
          *(_QWORD *)&v160[32] = v37;
          sub_210997320(a1, v37, (uint64_t)__p);
          *(_OWORD *)v177 = *(_OWORD *)__p;
          *(_QWORD *)&v177[16] = *(_QWORD *)&__p[16];
          v39 = espresso_network_declare_input();
          if (v39)
            break;
          if ((v177[23] & 0x80000000) != 0)
            operator delete(*(void **)v177);
          if (v38 == ++v37)
            goto LABEL_148;
        }
        sub_2108AE440((unint64_t *)&v160[32]);
        v125 = std::string::insert(&v164, 0, "Unable to declare input #", 0x19uLL);
        v126 = *(_OWORD *)&v125->__r_.__value_.__l.__data_;
        v165.__r_.__value_.__r.__words[2] = v125->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v165.__r_.__value_.__l.__data_ = v126;
        v125->__r_.__value_.__l.__size_ = 0;
        v125->__r_.__value_.__r.__words[2] = 0;
        v125->__r_.__value_.__r.__words[0] = 0;
        v127 = std::string::append(&v165, " with name '", 0xCuLL);
        v128 = *(_OWORD *)&v127->__r_.__value_.__l.__data_;
        v167.__r_.__value_.__r.__words[2] = v127->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v167.__r_.__value_.__l.__data_ = v128;
        v127->__r_.__value_.__l.__size_ = 0;
        v127->__r_.__value_.__r.__words[2] = 0;
        v127->__r_.__value_.__r.__words[0] = 0;
        if (v177[23] >= 0)
          v129 = v177;
        else
          v129 = *(const std::string::value_type **)v177;
        if (v177[23] >= 0)
          v130 = v177[23];
        else
          v130 = *(_QWORD *)&v177[8];
        v131 = std::string::append(&v167, v129, v130);
        v132 = *(_OWORD *)&v131->__r_.__value_.__l.__data_;
        v168.__r_.__value_.__r.__words[2] = v131->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v168.__r_.__value_.__l.__data_ = v132;
        v131->__r_.__value_.__l.__size_ = 0;
        v131->__r_.__value_.__r.__words[2] = 0;
        v131->__r_.__value_.__r.__words[0] = 0;
        v133 = std::string::append(&v168, "'. An input with that name does not exist in the network. ", 0x3AuLL);
        v134 = *(_OWORD *)&v133->__r_.__value_.__l.__data_;
        *(_QWORD *)&v160[16] = *((_QWORD *)&v133->__r_.__value_.__l + 2);
        *(_OWORD *)v160 = v134;
        v133->__r_.__value_.__l.__size_ = 0;
        v133->__r_.__value_.__r.__words[2] = 0;
        v133->__r_.__value_.__r.__words[0] = 0;
        sub_210999BF4(&v163, v39 | 0x100000000);
        if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v135 = &v163;
        else
          v135 = (std::string *)v163.__r_.__value_.__r.__words[0];
        if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v136 = HIBYTE(v163.__r_.__value_.__r.__words[2]);
        else
          v136 = v163.__r_.__value_.__l.__size_;
LABEL_285:
        v151 = std::string::append((std::string *)v160, (const std::string::value_type *)v135, v136);
        v152 = *(_OWORD *)&v151->__r_.__value_.__l.__data_;
        *(_QWORD *)&__p[16] = *((_QWORD *)&v151->__r_.__value_.__l + 2);
        *(_OWORD *)__p = v152;
        v151->__r_.__value_.__l.__size_ = 0;
        v151->__r_.__value_.__r.__words[2] = 0;
        v151->__r_.__value_.__r.__words[0] = 0;
        sub_21099983C(a3, (const void **)v169, (uint64_t)__p);
        if ((__p[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)__p);
          if ((SHIBYTE(v163.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_287:
            if ((v160[23] & 0x80000000) == 0)
              goto LABEL_288;
            goto LABEL_296;
          }
        }
        else if ((SHIBYTE(v163.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_287;
        }
        operator delete(v163.__r_.__value_.__l.__data_);
        if ((v160[23] & 0x80000000) == 0)
        {
LABEL_288:
          if ((SHIBYTE(v168.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_289;
          goto LABEL_297;
        }
LABEL_296:
        operator delete(*(void **)v160);
        if ((SHIBYTE(v168.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_289:
          if ((SHIBYTE(v167.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_290;
          goto LABEL_298;
        }
LABEL_297:
        operator delete(v168.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v167.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_290:
          if ((SHIBYTE(v165.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_291;
          goto LABEL_299;
        }
LABEL_298:
        operator delete(v167.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v165.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_291:
          if ((SHIBYTE(v164.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_292;
          goto LABEL_300;
        }
LABEL_299:
        operator delete(v165.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v164.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_292:
          if ((v177[23] & 0x80000000) == 0)
            goto LABEL_319;
LABEL_301:
          v79 = *(char **)v177;
          goto LABEL_318;
        }
LABEL_300:
        operator delete(v164.__r_.__value_.__l.__data_);
        if ((v177[23] & 0x80000000) == 0)
          goto LABEL_319;
        goto LABEL_301;
      }
LABEL_148:
      v73 = *(_QWORD *)(a1 + 64);
      v72 = *(_QWORD *)(a1 + 72);
      if (v72 == v73)
      {
        if (!sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoModelInstance.cpp", 130, (uint64_t)"params.outputs.size() >= 1", 26, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
        {
          v73 = *(_QWORD *)(a1 + 64);
          v72 = *(_QWORD *)(a1 + 72);
          goto LABEL_151;
        }
LABEL_347:
        abort();
      }
LABEL_151:
      v74 = v72 - v73;
      if (v74)
      {
        v75 = 0;
        v76 = v74 >> 5;
        while (1)
        {
          *(_QWORD *)&v160[32] = v75;
          sub_21099751C(a1, v75, (uint64_t)__p);
          *(_OWORD *)v177 = *(_OWORD *)__p;
          *(_QWORD *)&v177[16] = *(_QWORD *)&__p[16];
          v77 = espresso_network_declare_output();
          if (v77)
            break;
          if ((v177[23] & 0x80000000) != 0)
            operator delete(*(void **)v177);
          if (v76 == ++v75)
            goto LABEL_167;
        }
        sub_2108AE440((unint64_t *)&v160[32]);
        v141 = std::string::insert(&v164, 0, "Unable to declare output #", 0x1AuLL);
        v142 = *(_OWORD *)&v141->__r_.__value_.__l.__data_;
        v165.__r_.__value_.__r.__words[2] = v141->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v165.__r_.__value_.__l.__data_ = v142;
        v141->__r_.__value_.__l.__size_ = 0;
        v141->__r_.__value_.__r.__words[2] = 0;
        v141->__r_.__value_.__r.__words[0] = 0;
        v143 = std::string::append(&v165, " with name '", 0xCuLL);
        v144 = *(_OWORD *)&v143->__r_.__value_.__l.__data_;
        v167.__r_.__value_.__r.__words[2] = v143->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v167.__r_.__value_.__l.__data_ = v144;
        v143->__r_.__value_.__l.__size_ = 0;
        v143->__r_.__value_.__r.__words[2] = 0;
        v143->__r_.__value_.__r.__words[0] = 0;
        if (v177[23] >= 0)
          v145 = v177;
        else
          v145 = *(const std::string::value_type **)v177;
        if (v177[23] >= 0)
          v146 = v177[23];
        else
          v146 = *(_QWORD *)&v177[8];
        v147 = std::string::append(&v167, v145, v146);
        v148 = *(_OWORD *)&v147->__r_.__value_.__l.__data_;
        v168.__r_.__value_.__r.__words[2] = v147->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v168.__r_.__value_.__l.__data_ = v148;
        v147->__r_.__value_.__l.__size_ = 0;
        v147->__r_.__value_.__r.__words[2] = 0;
        v147->__r_.__value_.__r.__words[0] = 0;
        v149 = std::string::append(&v168, "'. An input with that name does not exist in the network. ", 0x3AuLL);
        v150 = *(_OWORD *)&v149->__r_.__value_.__l.__data_;
        *(_QWORD *)&v160[16] = *((_QWORD *)&v149->__r_.__value_.__l + 2);
        *(_OWORD *)v160 = v150;
        v149->__r_.__value_.__l.__size_ = 0;
        v149->__r_.__value_.__r.__words[2] = 0;
        v149->__r_.__value_.__r.__words[0] = 0;
        sub_210999BF4(&v163, v77 | 0x100000000);
        if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v135 = &v163;
        else
          v135 = (std::string *)v163.__r_.__value_.__r.__words[0];
        if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v136 = HIBYTE(v163.__r_.__value_.__r.__words[2]);
        else
          v136 = v163.__r_.__value_.__l.__size_;
        goto LABEL_285;
      }
LABEL_167:
      v158 = (_QWORD *)a3;
      if (*(_BYTE *)(a2 + 24))
      {
        v80 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
        if (v80)
        {
          v81 = 0;
          v82 = 0;
          v83 = 0;
          v84 = 0;
          v159 = 0x6DB6DB6DB6DB6DB7 * (v80 >> 2);
          while (1)
          {
            v162 = v84;
            v85 = *(_QWORD *)a2;
            if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2) <= v84)
              sub_2109A5F28();
            sub_210997320(a1, v84, (uint64_t)__p);
            v86 = (uint64_t *)(v85 + 28 * v84);
            *(_OWORD *)v177 = *(_OWORD *)__p;
            *(_QWORD *)&v177[16] = *(_QWORD *)&__p[16];
            v87 = *((unsigned __int8 *)v86 + 24);
            if (*((_BYTE *)v86 + 12))
              break;
            v92 = *(unsigned __int8 *)(v85 + 28 * v84 + 20);
            if (*(_BYTE *)(v85 + 28 * v84 + 20))
              v93 = 0;
            else
              v93 = v87 == 0;
            if (!v93)
            {
              *(_QWORD *)&v160[32] = 0;
              *(_DWORD *)&v160[40] = 0;
              LOBYTE(v161) = v87;
              if (!v92)
              {
LABEL_180:
                v91 = 1.0;
                goto LABEL_181;
              }
LABEL_174:
              v91 = *(float *)(v85 + 28 * v84 + 16);
LABEL_181:
              *(float *)&v160[44] = v91;
              v94 = espresso_set_image_preprocessing_params();
              if (v94)
              {
                sub_2108AE440(&v162);
                v95 = std::string::insert(&v164, 0, "Unable to set preprocessing parameters to output #", 0x32uLL);
                v96 = *(_OWORD *)&v95->__r_.__value_.__l.__data_;
                v165.__r_.__value_.__r.__words[2] = v95->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v165.__r_.__value_.__l.__data_ = v96;
                v95->__r_.__value_.__l.__size_ = 0;
                v95->__r_.__value_.__r.__words[2] = 0;
                v95->__r_.__value_.__r.__words[0] = 0;
                v97 = std::string::append(&v165, " with name '", 0xCuLL);
                v98 = *(_OWORD *)&v97->__r_.__value_.__l.__data_;
                v167.__r_.__value_.__r.__words[2] = v97->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v167.__r_.__value_.__l.__data_ = v98;
                v97->__r_.__value_.__l.__size_ = 0;
                v97->__r_.__value_.__r.__words[2] = 0;
                v97->__r_.__value_.__r.__words[0] = 0;
                if (v177[23] >= 0)
                  v99 = v177;
                else
                  v99 = *(const std::string::value_type **)v177;
                if (v177[23] >= 0)
                  v100 = v177[23];
                else
                  v100 = *(_QWORD *)&v177[8];
                v101 = std::string::append(&v167, v99, v100);
                v102 = *(_OWORD *)&v101->__r_.__value_.__l.__data_;
                v168.__r_.__value_.__r.__words[2] = v101->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v168.__r_.__value_.__l.__data_ = v102;
                v101->__r_.__value_.__l.__size_ = 0;
                v101->__r_.__value_.__r.__words[2] = 0;
                v101->__r_.__value_.__r.__words[0] = 0;
                v103 = std::string::append(&v168, "'. ", 3uLL);
                v104 = *(_OWORD *)&v103->__r_.__value_.__l.__data_;
                *(_QWORD *)&v160[16] = *((_QWORD *)&v103->__r_.__value_.__l + 2);
                *(_OWORD *)v160 = v104;
                v103->__r_.__value_.__l.__size_ = 0;
                v103->__r_.__value_.__r.__words[2] = 0;
                v103->__r_.__value_.__r.__words[0] = 0;
                sub_210999BF4(&v163, v94 | 0x100000000);
                if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v105 = &v163;
                else
                  v105 = (std::string *)v163.__r_.__value_.__r.__words[0];
                if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v106 = HIBYTE(v163.__r_.__value_.__r.__words[2]);
                else
                  v106 = v163.__r_.__value_.__l.__size_;
                v107 = std::string::append((std::string *)v160, (const std::string::value_type *)v105, v106);
                v108 = *(_OWORD *)&v107->__r_.__value_.__l.__data_;
                *(_QWORD *)&__p[16] = *((_QWORD *)&v107->__r_.__value_.__l + 2);
                *(_OWORD *)__p = v108;
                v107->__r_.__value_.__l.__size_ = 0;
                v107->__r_.__value_.__r.__words[2] = 0;
                v107->__r_.__value_.__r.__words[0] = 0;
                sub_21099983C((uint64_t)v158, (const void **)v169, (uint64_t)__p);
                if ((__p[23] & 0x80000000) != 0)
                {
                  operator delete(*(void **)__p);
                  if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
                    goto LABEL_205;
LABEL_196:
                  if ((v160[23] & 0x80000000) == 0)
                    goto LABEL_197;
LABEL_206:
                  operator delete(*(void **)v160);
                  if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0)
                    goto LABEL_207;
LABEL_198:
                  if ((SHIBYTE(v167.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    goto LABEL_199;
LABEL_208:
                  operator delete(v167.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
                    goto LABEL_209;
LABEL_200:
                  if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0)
LABEL_210:
                    operator delete(v164.__r_.__value_.__l.__data_);
                }
                else
                {
                  if ((SHIBYTE(v163.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    goto LABEL_196;
LABEL_205:
                  operator delete(v163.__r_.__value_.__l.__data_);
                  if ((v160[23] & 0x80000000) != 0)
                    goto LABEL_206;
LABEL_197:
                  if ((SHIBYTE(v168.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    goto LABEL_198;
LABEL_207:
                  operator delete(v168.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0)
                    goto LABEL_208;
LABEL_199:
                  if ((SHIBYTE(v165.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    goto LABEL_200;
LABEL_209:
                  operator delete(v165.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0)
                    goto LABEL_210;
                }
                v109 = 1;
                goto LABEL_250;
              }
              if (v82 < v83)
              {
                v109 = 0;
                v110 = *(_OWORD *)&v160[32];
                *((_DWORD *)v82 + 4) = v161;
                *(_OWORD *)v82 = v110;
                v82[20] = 1;
                v82 += 24;
                goto LABEL_250;
              }
              v111 = 0xAAAAAAAAAAAAAAABLL * ((v82 - v81) >> 3) + 1;
              if (v111 > 0xAAAAAAAAAAAAAAALL)
                sub_2108B327C();
              if (0x5555555555555556 * ((v83 - v81) >> 3) > v111)
                v111 = 0x5555555555555556 * ((v83 - v81) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * ((v83 - v81) >> 3) >= 0x555555555555555)
                v112 = 0xAAAAAAAAAAAAAAALL;
              else
                v112 = v111;
              if (v112)
              {
                if (v112 > 0xAAAAAAAAAAAAAAALL)
                  sub_2108B2B1C();
                v113 = (char *)operator new(24 * v112);
              }
              else
              {
                v113 = 0;
              }
              v117 = &v113[8 * ((v82 - v81) >> 3)];
              *(_OWORD *)v117 = *(_OWORD *)&v160[32];
              *((_DWORD *)v117 + 4) = v161;
              v117[20] = 1;
              if (v82 == v81)
              {
                v120 = &v113[8 * ((v82 - v81) >> 3)];
              }
              else
              {
                v118 = &v113[8 * ((v82 - v81) >> 3)];
                do
                {
                  v119 = *(_OWORD *)(v82 - 24);
                  v120 = v118 - 24;
                  *(_QWORD *)(v118 - 11) = *(_QWORD *)(v82 - 11);
                  *(_OWORD *)(v118 - 24) = v119;
                  v82 -= 24;
                  v118 -= 24;
                }
                while (v82 != v81);
              }
              v121 = &v113[24 * v112];
              v82 = v117 + 24;
              if (v81)
                operator delete(v81);
              v109 = 0;
              goto LABEL_249;
            }
            if (v82 < v83)
            {
              *v82 = 0;
              v82[20] = 0;
              v82 += 24;
              v109 = 19;
              goto LABEL_250;
            }
            v114 = 0xAAAAAAAAAAAAAAABLL * ((v82 - v81) >> 3) + 1;
            if (v114 > 0xAAAAAAAAAAAAAAALL)
              sub_2108B327C();
            if (0x5555555555555556 * ((v83 - v81) >> 3) > v114)
              v114 = 0x5555555555555556 * ((v83 - v81) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((v83 - v81) >> 3) >= 0x555555555555555)
              v115 = 0xAAAAAAAAAAAAAAALL;
            else
              v115 = v114;
            if (v115)
            {
              if (v115 > 0xAAAAAAAAAAAAAAALL)
                sub_2108B2B1C();
              v116 = (char *)operator new(24 * v115);
            }
            else
            {
              v116 = 0;
            }
            v122 = &v116[8 * ((v82 - v81) >> 3)];
            *v122 = 0;
            v122[20] = 0;
            if (v82 == v81)
            {
              v120 = &v116[8 * ((v82 - v81) >> 3)];
            }
            else
            {
              v123 = &v116[8 * ((v82 - v81) >> 3)];
              do
              {
                v124 = *(_OWORD *)(v82 - 24);
                v120 = v123 - 24;
                *(_QWORD *)(v123 - 11) = *(_QWORD *)(v82 - 11);
                *(_OWORD *)(v123 - 24) = v124;
                v82 -= 24;
                v123 -= 24;
              }
              while (v82 != v81);
            }
            v121 = &v116[24 * v115];
            v82 = v122 + 24;
            if (v81)
              operator delete(v81);
            v109 = 19;
LABEL_249:
            v81 = v120;
            v83 = v121;
LABEL_250:
            if ((v177[23] & 0x80000000) != 0)
              operator delete(*(void **)v177);
            if (v109 != 19 && v109)
              goto LABEL_316;
            if (++v84 == v159)
              goto LABEL_268;
          }
          v88 = *((_DWORD *)v86 + 2);
          v89 = *v86;
          v90 = *(unsigned __int8 *)(v85 + 28 * v84 + 20);
          *(_QWORD *)&v160[32] = v89;
          *(_DWORD *)&v160[40] = v88;
          LOBYTE(v161) = v87;
          if (!v90)
            goto LABEL_180;
          goto LABEL_174;
        }
      }
      v81 = 0;
      v82 = 0;
      v83 = 0;
LABEL_268:
      v137 = espresso_plan_build();
      if (v137)
      {
        sub_210999BF4((std::string *)v177, v137 | 0x100000000);
        v138 = std::string::insert((std::string *)v177, 0, "Failed to build plan. ", 0x16uLL);
        v139 = *(_OWORD *)&v138->__r_.__value_.__l.__data_;
        *(_QWORD *)&__p[16] = *((_QWORD *)&v138->__r_.__value_.__l + 2);
        *(_OWORD *)__p = v139;
        v138->__r_.__value_.__l.__size_ = 0;
        v138->__r_.__value_.__r.__words[2] = 0;
        v138->__r_.__value_.__r.__words[0] = 0;
        sub_21099983C((uint64_t)v158, (const void **)v169, (uint64_t)__p);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        if ((v177[23] & 0x80000000) == 0)
          goto LABEL_316;
        v140 = *(void **)v177;
      }
      else
      {
        blob_dimensions = espresso_network_query_blob_dimensions();
        if (blob_dimensions)
        {
          sub_210999BF4((std::string *)v160, blob_dimensions | 0x100000000);
          sub_2108A5A38("Unable to determine network data dimension. ", (std::string *)v160, (std::string *)__p);
          sub_21099983C((uint64_t)v158, (const void **)v169, (uint64_t)__p);
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
          if ((v160[23] & 0x80000000) == 0)
            goto LABEL_316;
          v140 = *(void **)v160;
        }
        else
        {
          sub_210999F5C(&v168, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5);
          sub_21099A028((uint64_t)v160, a1);
          if (v160[8])
          {
            std::operator+<char>();
            sub_21099983C((uint64_t)v158, (const void **)v169, (uint64_t)__p);
            if ((__p[23] & 0x80000000) != 0)
              operator delete(*(void **)__p);
          }
          else
          {
            *(_QWORD *)__p = &unk_24CA79A40;
            *(_QWORD *)&__p[8] = nullsub_3;
            *(_QWORD *)&__p[24] = __p;
            sub_2108AA318(v180, __p);
            sub_2108A6938(__p);
            *(_QWORD *)__p = &unk_24CA79A40;
            *(_QWORD *)&__p[8] = nullsub_3;
            *(_QWORD *)&__p[24] = __p;
            sub_2108AA318(&v177[32], __p);
            sub_2108A6938(__p);
            sub_21099AD04(&v167, (uint64_t *)a1, a2);
            *(_QWORD *)__p = context;
            *(_QWORD *)&__p[8] = v21;
            *(_OWORD *)&__p[16] = v166;
            LODWORD(v174) = *(_DWORD *)(a2 + 32);
            sub_21099ADE4(v175, (uint64_t)&v168);
            v175[3] = v81;
            v175[4] = v82;
            v176[0] = 0;
            v176[1] = 0;
            v175[5] = v83;
            v175[6] = v176;
            sub_21099A834(&v165, (uint64_t *)&v167, (__int128 *)__p);
            sub_21099AE9C((uint64_t)__p);
            sub_2108A894C((uint64_t)&v167);
            *v158 = v165.__r_.__value_.__r.__words[0];
            v167.__r_.__value_.__s.__data_[0] = 0;
            sub_2108A5A94(__p, (char *)&unk_210A01421);
            sub_2108C4BA4((uint64_t)(v158 + 1), &v167, (uint64_t)__p);
            if ((__p[23] & 0x80000000) != 0)
              operator delete(*(void **)__p);
            v81 = 0;
          }
          sub_2108AB288(v160);
          v140 = (void *)v168.__r_.__value_.__r.__words[0];
          if (!v168.__r_.__value_.__r.__words[0])
            goto LABEL_316;
          v168.__r_.__value_.__l.__size_ = v168.__r_.__value_.__r.__words[0];
        }
      }
      operator delete(v140);
LABEL_316:
      if (!v81)
        goto LABEL_319;
      v79 = v81;
LABEL_318:
      operator delete(v79);
LABEL_319:
      if (!v179)
        sub_2108B30F0();
      (*(void (**)(_BYTE *))(*(_QWORD *)v179 + 48))(v179);
      v154 = v179;
      if (v179 == &v177[32])
      {
        v155 = 4;
        v154 = &v177[32];
      }
      else
      {
        if (!v179)
          goto LABEL_325;
        v155 = 5;
      }
      (*(void (**)(void))(*v154 + 8 * v155))();
LABEL_325:
      if (!v181)
        sub_2108B30F0();
      (*(void (**)(_QWORD *))(*v181 + 48))(v181);
      v156 = v181;
      if (v181 == v180)
      {
        v157 = 4;
        v156 = v180;
      }
      else
      {
        if (!v181)
          goto LABEL_331;
        v157 = 5;
      }
      (*(void (**)(void))(*v156 + 8 * v157))();
LABEL_331:
      if ((v172 & 0x80000000) == 0)
      {
        if ((SHIBYTE(v170) & 0x80000000) == 0)
          return;
LABEL_335:
        operator delete(v169[0]);
        return;
      }
      operator delete(v171);
      if (SHIBYTE(v170) < 0)
        goto LABEL_335;
      return;
    default:
      sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoUtil.cpp", 81, (uint64_t)&unk_210A07C29, 0, (uint64_t)"Unexpected device", 17, (void (*)(void **))sub_2109EDDB4);
      abort();
  }
}

void sub_2109990A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  uint64_t v50;
  uint64_t v52;

  if (a50 < 0)
    operator delete(__p);
  v52 = *a9;
  *a9 = 0;
  if (v52)
    (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
  sub_2108AB288(&a11);
  if (a35)
  {
    a36 = (uint64_t)a35;
    operator delete(a35);
  }
  sub_2108A6938((_QWORD *)(v50 - 176));
  sub_2108A6938((_QWORD *)(v50 - 136));
  sub_2108AB3E4((uint64_t)&a39);
  _Unwind_Resume(a1);
}

void sub_210999814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  sub_2108B9008((uint64_t)&a48);
  if (a44 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_21099983C(uint64_t a1, const void **a2, uint64_t a3)
{
  int v3;
  size_t v4;
  unint64_t v5;
  _BYTE *v9;
  uint64_t v10;
  const void *v11;
  std::string *v12;
  __int128 v13;
  const std::string::value_type *v14;
  const void **v15;
  const std::string::value_type *v16;
  int v17;
  const std::string::value_type *v18;
  std::string::size_type v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  __int128 v23;
  int v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  void *v28;
  unint64_t size;
  int v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _BYTE __p[48];
  std::string::size_type v35;
  std::string v36;
  std::string v37;
  _DWORD v38[2];

  v3 = *((char *)a2 + 23);
  if (v3 >= 0)
    v4 = *((unsigned __int8 *)a2 + 23);
  else
    v4 = (size_t)a2[1];
  v5 = v4 + 35;
  if (v4 + 35 >= 0x7FFFFFFFFFFFFFF8)
    sub_2108A4B7C();
  if (v5 <= 0x16)
  {
    v9 = &__p[35];
    qmemcpy(__p, "Error during creation of model at '", 35);
LABEL_10:
    if (v3 >= 0)
      v11 = a2;
    else
      v11 = *a2;
    memmove(v9, v11, v4);
    goto LABEL_14;
  }
  v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17)
    v10 = v5 | 7;
  *(_QWORD *)&__p[8] = v4 + 35;
  *(_QWORD *)&__p[16] = (v10 + 1) | 0x8000000000000000;
  *(_QWORD *)__p = operator new(v10 + 1);
  v9 = (_BYTE *)(*(_QWORD *)__p + 35);
  qmemcpy(*(void **)__p, "Error during creation of model at '", 35);
  if (v4)
    goto LABEL_10;
LABEL_14:
  v9[v4] = 0;
  v12 = std::string::append((std::string *)__p, "', version: ", 0xCuLL);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v35 = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p[32] = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  v16 = (const std::string::value_type *)a2[3];
  v15 = a2 + 3;
  v14 = v16;
  v17 = *((char *)v15 + 23);
  if (v17 >= 0)
    v18 = (const std::string::value_type *)v15;
  else
    v18 = v14;
  if (v17 >= 0)
    v19 = *((unsigned __int8 *)v15 + 23);
  else
    v19 = (std::string::size_type)v15[1];
  v20 = std::string::append((std::string *)&__p[32], v18, v19);
  v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v36.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  v22 = std::string::append(&v36, ". ", 2uLL);
  v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v37.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  v24 = *(char *)(a3 + 23);
  if (v24 >= 0)
    v25 = (const std::string::value_type *)a3;
  else
    v25 = *(const std::string::value_type **)a3;
  if (v24 >= 0)
    v26 = *(unsigned __int8 *)(a3 + 23);
  else
    v26 = *(_QWORD *)(a3 + 8);
  v27 = std::string::append(&v37, v25, v26);
  v28 = (void *)v27->__r_.__value_.__r.__words[0];
  size = v27->__r_.__value_.__l.__size_;
  v38[0] = v27->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v38 + 3) = *(_DWORD *)((char *)&v27->__r_.__value_.__r.__words[2] + 3);
  v30 = SHIBYTE(v27->__r_.__value_.__r.__words[2]);
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v37.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_28:
      if ((SHIBYTE(v35) & 0x80000000) == 0)
        goto LABEL_29;
LABEL_34:
      operator delete(*(void **)&__p[32]);
      if ((__p[23] & 0x80000000) == 0)
        goto LABEL_30;
      goto LABEL_35;
    }
  }
  else if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_28;
  }
  operator delete(v36.__r_.__value_.__l.__data_);
  if (SHIBYTE(v35) < 0)
    goto LABEL_34;
LABEL_29:
  if ((__p[23] & 0x80000000) == 0)
    goto LABEL_30;
LABEL_35:
  operator delete(*(void **)__p);
LABEL_30:
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = &off_24CA79A00;
  *(_BYTE *)(a1 + 16) = 5;
  v31 = operator new();
  v32 = v31;
  if (v30 < 0)
  {
    sub_2108B314C((_BYTE *)v31, v28, size);
  }
  else
  {
    *(_QWORD *)v31 = v28;
    *(_QWORD *)(v31 + 8) = size;
    *(_DWORD *)(v31 + 16) = v38[0];
    *(_DWORD *)(v31 + 19) = *(_DWORD *)((char *)v38 + 3);
    *(_BYTE *)(v31 + 23) = v30;
  }
  *(_QWORD *)(a1 + 24) = v32;
  v33 = (_QWORD *)operator new();
  *v33 = &unk_24CA7A1D8;
  v33[1] = 0;
  v33[2] = 0;
  v33[3] = v32;
  *(_QWORD *)(a1 + 32) = v33;
  if (v30 < 0)
    operator delete(v28);
}

void sub_210999B10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  _QWORD *v35;
  void *v36;
  uint64_t v37;
  int v38;

  MEMORY[0x212BCC6FC](v37, 0x1012C40EC159624);
  *v35 = 0;
  if (v38 < 0)
    operator delete(v36);
  _Unwind_Resume(a1);
}

void sub_210999BF4(std::string *a1, uint64_t a2)
{
  uint64_t v3;
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  void **v10;
  std::string::size_type v11;
  std::string *v12;
  const char *last_error;
  void *__p[2];
  unsigned __int8 v15;
  std::string v16;
  std::string v17;
  std::string v18;
  std::string v19;
  uint64_t v20;
  _DWORD v21[6];
  int v22;
  char v23;
  char *v24;

  v20 = a2;
  v3 = a2 & 0xFF00000000;
  if ((a2 & 0xFF00000000) != 0)
  {
    v22 = 0;
    sub_2109A5C84((uint64_t)v21);
    if (v22 == -1)
      sub_2108B9060();
    __p[0] = &v24;
    ((void (*)(std::string *__return_ptr, void **, _DWORD *))off_24CA82CD0[v22])(&v16, __p, v21);
    if (v22 != -1)
      ((void (*)(void **, _DWORD *))off_24CA82CB8[v22])(__p, v21);
    v4 = std::string::insert(&v16, 0, "Status code: ", 0xDuLL);
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    v6 = std::string::append(&v17, ". ", 2uLL);
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
  }
  else
  {
    *((_BYTE *)&v18.__r_.__value_.__s + 23) = 0;
    v18.__r_.__value_.__s.__data_[0] = 0;
  }
  v8 = std::string::append(&v18, "Last Error: ", 0xCuLL);
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v19.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  last_error = (const char *)espresso_get_last_error();
  v22 = 0;
  if (last_error)
    sub_2108C6A80(v21, &last_error);
  else
    sub_2108B9350(v21, "nullptr");
  if (v22 == -1)
    sub_2108B9060();
  v24 = &v23;
  ((void (*)(void **__return_ptr, char **, _DWORD *))off_24CA82CD0[v22])(__p, &v24, v21);
  if (v22 != -1)
    ((void (*)(char **, _DWORD *))off_24CA82CB8[v22])(&v24, v21);
  if ((v15 & 0x80u) == 0)
    v10 = __p;
  else
    v10 = (void **)__p[0];
  if ((v15 & 0x80u) == 0)
    v11 = v15;
  else
    v11 = (std::string::size_type)__p[1];
  v12 = std::string::append(&v19, (const std::string::value_type *)v10, v11);
  *a1 = *v12;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if ((char)v15 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_21:
      if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_22;
      goto LABEL_26;
    }
  }
  else if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_21;
  }
  operator delete(v19.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_22:
    if (!v3)
      return;
    goto LABEL_27;
  }
LABEL_26:
  operator delete(v18.__r_.__value_.__l.__data_);
  if (!v3)
    return;
LABEL_27:
  if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_31:
    operator delete(v16.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v17.__r_.__value_.__l.__data_);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_31;
}

void sub_210999E80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a28 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_210999F5C(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0x186186186186187)
      sub_2108B327C();
    v4 = (char *)operator new(168 * a2);
    *a1 = v4;
    a1[2] = &v4[168 * a2];
    v5 = 168 * ((168 * a2 - 168) / 0xA8) + 168;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_21099A00C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_21099A028(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  void **v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  void **v27;
  std::string::size_type v28;
  std::string *v29;
  void *v30;
  unint64_t size;
  int v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  const char *last_error;
  void *__p[2];
  unsigned __int8 v38;
  void *v39[2];
  unsigned __int8 v40;
  std::string v41;
  std::string v42;
  std::string v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  _DWORD v49[3];
  __int128 v51;
  uint64_t v52;
  unint64_t v53;
  __int128 v54;
  uint64_t v55;
  int v56;
  char v57;
  char *v58;

  v3 = *(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64);
  if (!v3)
  {
LABEL_7:
    *(_QWORD *)a1 = &off_24CA79A00;
    *(_BYTE *)(a1 + 8) = 0;
    v7 = operator new();
    *(_QWORD *)v7 = 0;
    *(_BYTE *)(v7 + 23) = 0;
    *(_QWORD *)(a1 + 16) = v7;
    v8 = (_QWORD *)operator new();
    *v8 = &unk_24CA7A1D8;
    v8[1] = 0;
    v8[2] = 0;
    v8[3] = v7;
    *(_QWORD *)(a1 + 24) = v8;
    return;
  }
  v5 = 0;
  v6 = v3 >> 5;
  while (1)
  {
    v53 = v5;
    sub_21099751C(a2, v5, (uint64_t)&v54);
    v51 = v54;
    v52 = v55;
    if (espresso_network_bind_buffer())
      break;
    if (SHIBYTE(v52) < 0)
      operator delete((void *)v51);
    if (v6 == ++v5)
      goto LABEL_7;
  }
  sub_2108AE440(&v53);
  v9 = std::string::insert(&v41, 0, "Unable to bind buffer #", 0x17uLL);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v42.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  v11 = std::string::append(&v42, " (named '", 9uLL);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (v52 >= 0)
    v13 = (const std::string::value_type *)&v51;
  else
    v13 = (const std::string::value_type *)v51;
  if (v52 >= 0)
    v14 = HIBYTE(v52);
  else
    v14 = *((_QWORD *)&v51 + 1);
  v15 = std::string::append(&v43, v13, v14);
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  v17 = std::string::append(&v44, "'). ", 4uLL);
  v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  v19 = std::string::append(&v45, "Status code: ", 0xDuLL);
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  v56 = 0;
  sub_2109A5C84((uint64_t)&v54);
  if (v56 == -1)
    sub_2108B9060();
  __p[0] = &v58;
  ((void (*)(void **__return_ptr, void **, __int128 *))off_24CA82CD0[v56])(v39, __p, &v54);
  if (v56 != -1)
    ((void (*)(void **, __int128 *))off_24CA82CB8[v56])(__p, &v54);
  if ((v40 & 0x80u) == 0)
    v21 = v39;
  else
    v21 = (void **)v39[0];
  if ((v40 & 0x80u) == 0)
    v22 = v40;
  else
    v22 = (std::string::size_type)v39[1];
  v23 = std::string::append(&v46, (const std::string::value_type *)v21, v22);
  v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v47.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  v25 = std::string::append(&v47, ". Last Error: ", 0xEuLL);
  v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v48.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  last_error = (const char *)espresso_get_last_error();
  v56 = 0;
  if (last_error)
    sub_2108C6A80(&v54, &last_error);
  else
    sub_2108B9350(&v54, "nullptr");
  if (v56 == -1)
    sub_2108B9060();
  v58 = &v57;
  ((void (*)(void **__return_ptr, char **, __int128 *))off_24CA82CD0[v56])(__p, &v58, &v54);
  if (v56 != -1)
    ((void (*)(char **, __int128 *))off_24CA82CB8[v56])(&v58, &v54);
  if ((v38 & 0x80u) == 0)
    v27 = __p;
  else
    v27 = (void **)__p[0];
  if ((v38 & 0x80u) == 0)
    v28 = v38;
  else
    v28 = (std::string::size_type)__p[1];
  v29 = std::string::append(&v48, (const std::string::value_type *)v27, v28);
  v30 = (void *)v29->__r_.__value_.__r.__words[0];
  size = v29->__r_.__value_.__l.__size_;
  v49[0] = v29->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v49 + 3) = *(_DWORD *)((char *)&v29->__r_.__value_.__r.__words[2] + 3);
  v32 = SHIBYTE(v29->__r_.__value_.__r.__words[2]);
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  *(_QWORD *)a1 = &off_24CA79A00;
  *(_BYTE *)(a1 + 8) = 5;
  v33 = operator new();
  v34 = v33;
  if (v32 < 0)
  {
    sub_2108B314C((_BYTE *)v33, v30, size);
  }
  else
  {
    *(_QWORD *)v33 = v30;
    *(_QWORD *)(v33 + 8) = size;
    *(_DWORD *)(v33 + 16) = v49[0];
    *(_DWORD *)(v33 + 19) = *(_DWORD *)((char *)v49 + 3);
    *(_BYTE *)(v33 + 23) = v32;
  }
  *(_QWORD *)(a1 + 16) = v34;
  v35 = (_QWORD *)operator new();
  *v35 = &unk_24CA7A1D8;
  v35[1] = 0;
  v35[2] = 0;
  v35[3] = v34;
  *(_QWORD *)(a1 + 24) = v35;
  if (v32 < 0)
  {
    operator delete(v30);
    if (((char)v38 & 0x80000000) == 0)
    {
LABEL_40:
      if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_41;
      goto LABEL_53;
    }
  }
  else if (((char)v38 & 0x80000000) == 0)
  {
    goto LABEL_40;
  }
  operator delete(__p[0]);
  if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_41:
    if ((SHIBYTE(v47.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_42;
    goto LABEL_54;
  }
LABEL_53:
  operator delete(v48.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v47.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_42:
    if (((char)v40 & 0x80000000) == 0)
      goto LABEL_43;
    goto LABEL_55;
  }
LABEL_54:
  operator delete(v47.__r_.__value_.__l.__data_);
  if (((char)v40 & 0x80000000) == 0)
  {
LABEL_43:
    if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_44;
    goto LABEL_56;
  }
LABEL_55:
  operator delete(v39[0]);
  if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_44:
    if ((SHIBYTE(v45.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_45;
    goto LABEL_57;
  }
LABEL_56:
  operator delete(v46.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v45.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_45:
    if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_46;
    goto LABEL_58;
  }
LABEL_57:
  operator delete(v45.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_46:
    if ((SHIBYTE(v43.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_47;
    goto LABEL_59;
  }
LABEL_58:
  operator delete(v44.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v43.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_47:
    if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_48;
    goto LABEL_60;
  }
LABEL_59:
  operator delete(v43.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_48:
    if ((SHIBYTE(v41.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_49;
    goto LABEL_61;
  }
LABEL_60:
  operator delete(v42.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v41.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_49:
    if ((SHIBYTE(v52) & 0x80000000) == 0)
      return;
LABEL_62:
    operator delete((void *)v51);
    return;
  }
LABEL_61:
  operator delete(v41.__r_.__value_.__l.__data_);
  if (SHIBYTE(v52) < 0)
    goto LABEL_62;
}

void sub_21099A5C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,uint64_t a62,void *a63)
{
  char a68;
  void *v68;
  uint64_t v69;
  int v70;
  uint64_t v71;

  MEMORY[0x212BCC6FC](v69, 0x1012C40EC159624);
  if (v70 < 0)
  {
    operator delete(v68);
    if ((a15 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((a15 & 0x80000000) == 0)
  {
LABEL_3:
    if (*(char *)(v71 - 185) < 0)
      goto LABEL_4;
    goto LABEL_16;
  }
  operator delete(a10);
  if (*(char *)(v71 - 185) < 0)
  {
LABEL_4:
    operator delete(*(void **)(v71 - 208));
    if ((a68 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  if ((a68 & 0x80000000) == 0)
  {
LABEL_5:
    if (a21 < 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  operator delete(a63);
  if (a21 < 0)
  {
LABEL_6:
    operator delete(__p);
    if ((a61 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  if ((a61 & 0x80000000) == 0)
  {
LABEL_7:
    if (a54 < 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  operator delete(a56);
  if (a54 < 0)
  {
LABEL_8:
    operator delete(a49);
    if ((a47 & 0x80000000) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  if ((a47 & 0x80000000) == 0)
  {
LABEL_9:
    if (a40 < 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  operator delete(a42);
  if (a40 < 0)
  {
LABEL_10:
    operator delete(a35);
    if ((a33 & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_23;
  }
LABEL_22:
  if ((a33 & 0x80000000) == 0)
  {
LABEL_11:
    if (a27 < 0)
      goto LABEL_12;
    goto LABEL_24;
  }
LABEL_23:
  operator delete(a28);
  if (a27 < 0)
  {
LABEL_12:
    operator delete(a22);
    if ((*(char *)(v71 - 137) & 0x80000000) == 0)
LABEL_26:
      _Unwind_Resume(a1);
LABEL_25:
    operator delete(*(void **)(v71 - 160));
    goto LABEL_26;
  }
LABEL_24:
  if ((*(char *)(v71 - 137) & 0x80000000) == 0)
    goto LABEL_26;
  goto LABEL_25;
}

void sub_21099A834(_QWORD *a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  void *v10;
  __int128 v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  int64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  _QWORD **v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  BOOL v26;
  _QWORD *v27;
  uint64_t **v28;
  uint64_t **v29;
  uint64_t *v30;
  unint64_t v31;
  char *v32;
  uint64_t *v33;
  _QWORD *v34;
  __int128 v35;
  __int128 v36;
  _QWORD *v37;
  _QWORD *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD **v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  _QWORD *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  int v52;
  void *v53;
  void *__p;
  _QWORD **v55;
  _QWORD *v56;
  uint64_t v58;
  std::__shared_weak_count *v59;

  v6 = operator new();
  v7 = (_QWORD *)v6;
  v9 = *a2;
  v8 = (std::__shared_weak_count *)a2[1];
  v58 = *a2;
  v59 = v8;
  *a2 = 0;
  a2[1] = 0;
  v50 = *a3;
  v51 = a3[1];
  v52 = *((_DWORD *)a3 + 8);
  v10 = (void *)*((_QWORD *)a3 + 5);
  v53 = v10;
  v11 = a3[3];
  *((_QWORD *)a3 + 5) = 0;
  *((_QWORD *)a3 + 6) = 0;
  v12 = (void *)*((_QWORD *)a3 + 8);
  __p = v12;
  v49 = *(__int128 *)((char *)a3 + 72);
  *((_QWORD *)a3 + 7) = 0;
  *((_QWORD *)a3 + 8) = 0;
  *((_QWORD *)a3 + 9) = 0;
  *((_QWORD *)a3 + 10) = 0;
  v13 = a3 + 6;
  v14 = (_QWORD *)*((_QWORD *)a3 + 12);
  v55 = (_QWORD **)*((_QWORD *)a3 + 11);
  v56 = v14;
  if (*((_QWORD *)a3 + 13))
  {
    v14[2] = &v56;
    *((_QWORD *)a3 + 11) = v13;
    *v13 = 0;
    *((_QWORD *)a3 + 13) = 0;
  }
  else
  {
    v55 = &v56;
  }
  *(_QWORD *)v6 = &off_24CA82C40;
  *(_QWORD *)(v6 + 8) = 0;
  *(_OWORD *)(v6 + 16) = v50;
  *(_OWORD *)(v6 + 32) = v51;
  *(_DWORD *)(v6 + 48) = v52;
  *(_QWORD *)(v6 + 56) = 0;
  *(_QWORD *)(v6 + 64) = 0;
  *(_QWORD *)(v6 + 72) = 0;
  v15 = v11 - (_QWORD)v10;
  if ((void *)v11 != v10)
  {
    if (0xCF3CF3CF3CF3CF3DLL * (v15 >> 3) >= 0x186186186186187)
      sub_2108B327C();
    v16 = (char *)operator new(v11 - (_QWORD)v10);
    v7[7] = v16;
    v17 = &v16[8 * (v15 >> 3)];
    v7[9] = v17;
    memcpy(v16, v10, v15);
    v7[8] = v17;
  }
  v48 = a1;
  v7[10] = 0;
  v7[11] = 0;
  v7[12] = 0;
  v18 = v49 - (_QWORD)v12;
  if ((void *)v49 != v12)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v18 >> 3) >= 0xAAAAAAAAAAAAAABLL)
      sub_2108B327C();
    v19 = (char *)operator new(v49 - (_QWORD)v12);
    v7[10] = v19;
    v20 = &v19[8 * (v18 >> 3)];
    v7[12] = v20;
    memcpy(v19, v12, v18 - 3);
    v7[11] = v20;
  }
  v7[14] = 0;
  v7[15] = 0;
  v7[13] = v7 + 14;
  v21 = v55;
  if (v55 != &v56)
  {
    while (1)
    {
      v22 = v7[14];
      v23 = v7 + 14;
      if ((_QWORD *)v7[13] != v7 + 14)
      {
        v24 = (_QWORD *)v7[14];
        v25 = v7 + 14;
        if (v22)
        {
          do
          {
            v23 = v24;
            v24 = (_QWORD *)v24[1];
          }
          while (v24);
        }
        else
        {
          do
          {
            v23 = (_QWORD *)v25[2];
            v26 = *v23 == (_QWORD)v25;
            v25 = v23;
          }
          while (v26);
        }
        v27 = v21[4];
        if (v23[4] >= (unint64_t)v27)
          break;
      }
      if (v22)
        v28 = (uint64_t **)v23;
      else
        v28 = (uint64_t **)(v7 + 14);
      if (v22)
        v29 = (uint64_t **)(v23 + 1);
      else
        v29 = (uint64_t **)(v7 + 14);
      if (!*v29)
        goto LABEL_34;
LABEL_44:
      v42 = v21[1];
      if (v42)
      {
        do
        {
          v43 = (_QWORD **)v42;
          v42 = (_QWORD *)*v42;
        }
        while (v42);
      }
      else
      {
        do
        {
          v43 = (_QWORD **)v21[2];
          v26 = *v43 == v21;
          v21 = v43;
        }
        while (!v26);
      }
      v21 = v43;
      if (v43 == &v56)
        goto LABEL_50;
    }
    v29 = (uint64_t **)(v7 + 14);
    v28 = (uint64_t **)(v7 + 14);
    if (v22)
    {
      v30 = (uint64_t *)v7[14];
      while (1)
      {
        while (1)
        {
          v28 = (uint64_t **)v30;
          v31 = v30[4];
          if (v31 <= (unint64_t)v27)
            break;
          v30 = *v28;
          v29 = v28;
          if (!*v28)
            goto LABEL_34;
        }
        if (v31 >= (unint64_t)v27)
          goto LABEL_44;
        v30 = v28[1];
        if (!v30)
        {
          v29 = v28 + 1;
          break;
        }
      }
    }
LABEL_34:
    v32 = (char *)operator new(0x78uLL);
    v33 = (uint64_t *)v32;
    v34 = v21[4];
    v32[40] = 0;
    *((_QWORD *)v32 + 4) = v34;
    v32[112] = 0;
    if (*((_BYTE *)v21 + 112))
    {
      v35 = *(_OWORD *)(v21 + 5);
      v36 = *(_OWORD *)(v21 + 7);
      *((_QWORD *)v32 + 9) = v21[9];
      *(_OWORD *)(v32 + 40) = v35;
      *(_OWORD *)(v32 + 56) = v36;
      v32[80] = 0;
      v32[104] = 0;
      if (*((_BYTE *)v21 + 104))
      {
        v38 = v21[11];
        v37 = v21[12];
        *((_QWORD *)v32 + 10) = &off_24CA7D7F8;
        *((_QWORD *)v32 + 11) = v38;
        *((_QWORD *)v32 + 12) = v37;
        if (v37)
        {
          v39 = v37 + 1;
          do
            v40 = __ldxr(v39);
          while (__stxr(v40 + 1, v39));
        }
        v32[104] = 1;
      }
      v32[112] = 1;
    }
    *(_QWORD *)v32 = 0;
    *((_QWORD *)v32 + 1) = 0;
    *((_QWORD *)v32 + 2) = v28;
    *v29 = (uint64_t *)v32;
    v41 = *(_QWORD *)v7[13];
    if (v41)
    {
      v7[13] = v41;
      v33 = *v29;
    }
    sub_210911190((uint64_t *)v7[14], v33);
    ++v7[15];
    goto LABEL_44;
  }
LABEL_50:
  v7[16] = v9;
  v7[17] = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v45 = __ldxr(p_shared_owners);
    while (__stxr(v45 + 1, p_shared_owners));
  }
  *v48 = v7;
  sub_2109A5F3C(v56);
  if (__p)
    operator delete(__p);
  if (v53)
    operator delete(v53);
  if (v8)
  {
    v46 = (unint64_t *)&v8->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_21099AC6C(_Unwind_Exception *a1, uint64_t a2, void **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  _QWORD *v7;
  void **v8;
  uint64_t v9;
  void *v11;
  void *v12;
  uint64_t v13;
  va_list va;

  va_start(va, a7);
  v11 = *v8;
  if (*v8)
  {
    v7[11] = v11;
    operator delete(v11);
  }
  v12 = *a3;
  if (*a3)
  {
    v7[8] = v12;
    operator delete(v12);
  }
  v13 = v7[1];
  *v7 = off_24CA82AE8;
  v7[1] = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  sub_21099AE9C((uint64_t)va);
  sub_2108A894C(v9 - 104);
  MEMORY[0x212BCC6FC](v7, 0x10E1C400ECEF657);
  _Unwind_Resume(a1);
}

uint64_t sub_21099AD04(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t result;

  v6 = operator new(0xC8uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_24CA82FD8;
  v6[3] = off_24CA82AC0;
  sub_2108B3FF0((uint64_t)(v6 + 4), a2);
  v6[3] = &off_24CA82960;
  result = sub_210957BA4((uint64_t)(v6 + 19), a3);
  v6[23] = *(_QWORD *)(a3 + 32);
  *((_WORD *)v6 + 96) = *(_WORD *)(a3 + 40);
  *a1 = v6 + 3;
  a1[1] = v6;
  return result;
}

void sub_21099ADA8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void *v6;

  *v3 = v4;
  sub_2108B55B4(v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v6);
  _Unwind_Resume(a1);
}

void sub_21099ADCC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

_QWORD *sub_21099ADE4(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  int64_t v5;
  char *v6;
  char *v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(const void **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v5 = v3 - *(_QWORD *)a2;
  if (v3 != *(_QWORD *)a2)
  {
    if (0xCF3CF3CF3CF3CF3DLL * (v5 >> 3) >= 0x186186186186187)
      sub_2108B327C();
    v6 = (char *)operator new(v5);
    *a1 = v6;
    a1[1] = v6;
    v7 = &v6[8 * (v5 >> 3)];
    a1[2] = v7;
    memcpy(v6, v4, v5);
    a1[1] = v7;
  }
  return a1;
}

void sub_21099AE80(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21099AE9C(uint64_t a1)
{
  void *v2;
  void *v3;

  sub_2109A5F3C(*(_QWORD **)(a1 + 96));
  v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(_QWORD *)(a1 + 72) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 40);
  if (v3)
  {
    *(_QWORD *)(a1 + 48) = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_21099AEE4(void *lpsrc@<X1>, uint64_t a2@<X0>, uint64_t a3@<X8>)
{
  void *v5;
  uint64_t v6;
  const void *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  const void **v13;
  unsigned __int8 *v14;
  const void **v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  size_t v25;
  unint64_t v26;
  __int16 *v27;
  char *v28;
  _BYTE *v29;
  _QWORD *v30;
  int v31;
  size_t v32;
  unint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  const void *v36;
  std::string *v37;
  void *v38;
  unint64_t size;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  size_t v44;
  unint64_t v45;
  _BYTE *v46;
  int v47;
  size_t v48;
  unint64_t v49;
  _BYTE *v50;
  uint64_t v51;
  const void *v52;
  std::string *v53;
  _QWORD *v54;
  uint64_t v55;
  const void *v56;
  std::string *v57;
  char v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  const void *v63;
  std::string *v64;
  uint64_t v65;
  void *__p[2];
  char v67;
  char v68;
  _BYTE v69[54];
  __int16 v70;
  _BYTE v71[88];
  uint64_t v72;
  uint64_t v73;
  char v74;

  v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24CA82B30, (const struct __class_type_info *)&unk_24CA82978, 0);
  if (!v5)
    goto LABEL_123;
  v6 = (uint64_t)v5;
  v7 = *(const void **)(a2 + 8);
  if (!v7)
    goto LABEL_19;
  v8 = (unsigned __int8 *)__dynamic_cast(v7, (const struct __class_type_info *)&unk_24CA82B30, (const struct __class_type_info *)&unk_24CA82978, 0);
  if (!v8)
LABEL_123:
    __cxa_bad_cast();
  v9 = v8[31];
  if ((v9 & 0x80u) == 0)
    v10 = v8[31];
  else
    v10 = *((_QWORD *)v8 + 2);
  v11 = *(unsigned __int8 *)(v6 + 31);
  v12 = (char)v11;
  if ((v11 & 0x80u) != 0)
    v11 = *(_QWORD *)(v6 + 16);
  if (v10 != v11)
    goto LABEL_19;
  v13 = (const void **)(v8 + 8);
  if (v12 >= 0)
    v14 = (unsigned __int8 *)(v6 + 8);
  else
    v14 = *(unsigned __int8 **)(v6 + 8);
  if ((v9 & 0x80) != 0)
  {
    if (memcmp(*v13, v14, *((_QWORD *)v8 + 2)))
      goto LABEL_19;
LABEL_46:
    v28 = (char *)operator new(0x38uLL);
    strcpy(v28, "The model is already running in this configuration");
    *(_QWORD *)a3 = &off_24CA79A00;
    *(_BYTE *)(a3 + 8) = 0;
    v29 = (_BYTE *)operator new();
    sub_2108B314C(v29, v28, 0x32uLL);
    *(_QWORD *)(a3 + 16) = v29;
    v30 = (_QWORD *)operator new();
    *v30 = &unk_24CA7A1D8;
    v30[1] = 0;
    v30[2] = 0;
    v30[3] = v29;
    *(_QWORD *)(a3 + 24) = v30;
    operator delete(v28);
    return;
  }
  if (!v8[31])
    goto LABEL_46;
  while (*(unsigned __int8 *)v13 == *v14)
  {
    v13 = (const void **)((char *)v13 + 1);
    ++v14;
    if (!--v9)
      goto LABEL_46;
  }
LABEL_19:
  v15 = (const void **)(v6 + 8);
  sub_2108B3FF0((uint64_t)v71, (uint64_t *)(*(_QWORD *)(a2 + 128) + 8));
  if (!v74)
    goto LABEL_71;
  v16 = v72;
  v17 = v73;
  if (v72 != v73)
  {
    v18 = *(_BYTE *)(v6 + 31);
    if (v18 >= 0)
      v19 = *(unsigned __int8 *)(v6 + 31);
    else
      v19 = *(_QWORD *)(v6 + 16);
    if (v18 >= 0)
      v20 = (unsigned __int8 *)(v6 + 8);
    else
      v20 = *(unsigned __int8 **)(v6 + 8);
    while (1)
    {
      v21 = *(unsigned __int8 *)(v16 + 23);
      if ((v21 & 0x80u) == 0)
        v22 = *(unsigned __int8 *)(v16 + 23);
      else
        v22 = *(_QWORD *)(v16 + 8);
      if (v22 == v19)
      {
        if ((v21 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v16, v20, *(_QWORD *)(v16 + 8)))
            break;
        }
        else
        {
          if (!*(_BYTE *)(v16 + 23))
            break;
          v23 = 0;
          while (*(unsigned __int8 *)(v16 + v23) == v20[v23])
          {
            if (v21 == ++v23)
              goto LABEL_38;
          }
        }
      }
      v16 += 24;
      if (v16 == v17)
        goto LABEL_71;
    }
  }
LABEL_38:
  if (v16 == v17)
  {
LABEL_71:
    v47 = *(char *)(v6 + 31);
    if (v47 >= 0)
      v48 = *(unsigned __int8 *)(v6 + 31);
    else
      v48 = *(_QWORD *)(v6 + 16);
    v49 = v48 + 46;
    if (v48 + 46 > 0x7FFFFFFFFFFFFFF7)
      sub_2108A4B7C();
    if (v49 > 0x16)
    {
      v51 = (v49 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v49 | 7) != 0x17)
        v51 = v49 | 7;
      *(_QWORD *)&v69[8] = v48 + 46;
      *(_QWORD *)&v69[16] = (v51 + 1) | 0x8000000000000000;
      *(_QWORD *)v69 = operator new(v51 + 1);
      qmemcpy(*(void **)v69, "Unable to find the name of the configuration '", 46);
      v50 = (_BYTE *)(*(_QWORD *)v69 + 46);
      if (!v48)
      {
LABEL_84:
        v50[v48] = 0;
        v53 = std::string::append((std::string *)v69, "'.", 2uLL);
        v38 = (void *)v53->__r_.__value_.__r.__words[0];
        size = v53->__r_.__value_.__l.__size_;
        LODWORD(__p[0]) = v53->__r_.__value_.__r.__words[2];
        *(_DWORD *)((char *)__p + 3) = *(_DWORD *)((char *)&v53->__r_.__value_.__r.__words[2] + 3);
        v40 = SHIBYTE(v53->__r_.__value_.__r.__words[2]);
        v53->__r_.__value_.__l.__size_ = 0;
        v53->__r_.__value_.__r.__words[2] = 0;
        v53->__r_.__value_.__r.__words[0] = 0;
        *(_QWORD *)a3 = &off_24CA79A00;
        *(_BYTE *)(a3 + 8) = 3;
        v41 = operator new();
        v42 = v41;
        if ((v40 & 0x80000000) == 0)
        {
          *(_QWORD *)v41 = v38;
          *(_QWORD *)(v41 + 8) = size;
          *(_DWORD *)(v41 + 16) = __p[0];
          *(_DWORD *)(v41 + 19) = *(_DWORD *)((char *)__p + 3);
          *(_BYTE *)(v41 + 23) = v40;
          goto LABEL_87;
        }
        goto LABEL_86;
      }
    }
    else
    {
      qmemcpy(v69, "Unable to find the name of the configuration '", 46);
      v50 = &v69[46];
    }
    if (v47 >= 0)
      v52 = v15;
    else
      v52 = *v15;
    memmove(v50, v52, v48);
    goto LABEL_84;
  }
  if (espresso_plan_build_clean())
  {
    v24 = *(char *)(v6 + 31);
    if (v24 >= 0)
      v25 = *(unsigned __int8 *)(v6 + 31);
    else
      v25 = *(_QWORD *)(v6 + 16);
    v26 = v25 + 54;
    if (v25 + 54 > 0x7FFFFFFFFFFFFFF7)
      sub_2108A4B7C();
    if (v26 > 0x16)
    {
      v35 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v26 | 7) != 0x17)
        v35 = v26 | 7;
      *(_QWORD *)&v69[8] = v25 + 54;
      *(_QWORD *)&v69[16] = (v35 + 1) | 0x8000000000000000;
      *(_QWORD *)v69 = operator new(v35 + 1);
      qmemcpy(*(void **)v69, "Unable to build clean the plan for the configuration '", 54);
      v27 = (__int16 *)(*(_QWORD *)v69 + 54);
      if (!v25)
      {
LABEL_61:
        *((_BYTE *)v27 + v25) = 0;
        v37 = std::string::append((std::string *)v69, "'.", 2uLL);
        v38 = (void *)v37->__r_.__value_.__r.__words[0];
        size = v37->__r_.__value_.__l.__size_;
        LODWORD(__p[0]) = v37->__r_.__value_.__r.__words[2];
        *(_DWORD *)((char *)__p + 3) = *(_DWORD *)((char *)&v37->__r_.__value_.__r.__words[2] + 3);
        v40 = SHIBYTE(v37->__r_.__value_.__r.__words[2]);
        v37->__r_.__value_.__l.__size_ = 0;
        v37->__r_.__value_.__r.__words[2] = 0;
        v37->__r_.__value_.__r.__words[0] = 0;
        *(_QWORD *)a3 = &off_24CA79A00;
        *(_BYTE *)(a3 + 8) = 5;
        v41 = operator new();
        v42 = v41;
        if ((v40 & 0x80000000) == 0)
        {
          *(_QWORD *)v41 = v38;
          *(_QWORD *)(v41 + 8) = size;
          *(_DWORD *)(v41 + 16) = __p[0];
          *(_DWORD *)(v41 + 19) = *(_DWORD *)((char *)__p + 3);
          *(_BYTE *)(v41 + 23) = v40;
          goto LABEL_87;
        }
        goto LABEL_86;
      }
    }
    else
    {
      qmemcpy(v69, "Unable to build clean the plan for the configuration '", sizeof(v69));
      v27 = &v70;
    }
    if (v24 >= 0)
      v36 = v15;
    else
      v36 = *v15;
    memmove(v27, v36, v25);
    goto LABEL_61;
  }
  if (espresso_network_select_configuration())
  {
    v31 = *(char *)(v6 + 31);
    if (v31 >= 0)
      v32 = *(unsigned __int8 *)(v6 + 31);
    else
      v32 = *(_QWORD *)(v6 + 16);
    v33 = v32 + 43;
    if (v32 + 43 > 0x7FFFFFFFFFFFFFF7)
      sub_2108A4B7C();
    if (v33 > 0x16)
    {
      v55 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v33 | 7) != 0x17)
        v55 = v33 | 7;
      *(_QWORD *)&v69[8] = v32 + 43;
      *(_QWORD *)&v69[16] = (v55 + 1) | 0x8000000000000000;
      *(_QWORD *)v69 = operator new(v55 + 1);
      qmemcpy(*(void **)v69, "Unable to change network configuration to '", 43);
      v34 = (_BYTE *)(*(_QWORD *)v69 + 43);
      if (!v32)
      {
LABEL_100:
        v34[v32] = 0;
        v57 = std::string::append((std::string *)v69, "'.", 2uLL);
        v38 = (void *)v57->__r_.__value_.__r.__words[0];
        size = v57->__r_.__value_.__l.__size_;
        LODWORD(__p[0]) = v57->__r_.__value_.__r.__words[2];
        *(_DWORD *)((char *)__p + 3) = *(_DWORD *)((char *)&v57->__r_.__value_.__r.__words[2] + 3);
        v40 = SHIBYTE(v57->__r_.__value_.__r.__words[2]);
        v57->__r_.__value_.__l.__size_ = 0;
        v57->__r_.__value_.__r.__words[2] = 0;
        v57->__r_.__value_.__r.__words[0] = 0;
        *(_QWORD *)a3 = &off_24CA79A00;
        *(_BYTE *)(a3 + 8) = 5;
        v41 = operator new();
        v42 = v41;
        if ((v40 & 0x80000000) == 0)
        {
          *(_QWORD *)v41 = v38;
          *(_QWORD *)(v41 + 8) = size;
          *(_DWORD *)(v41 + 16) = __p[0];
          *(_DWORD *)(v41 + 19) = *(_DWORD *)((char *)__p + 3);
          *(_BYTE *)(v41 + 23) = v40;
          goto LABEL_87;
        }
LABEL_86:
        sub_2108B314C((_BYTE *)v41, v38, size);
        goto LABEL_87;
      }
    }
    else
    {
      qmemcpy(v69, "Unable to change network configuration to '", 43);
      v34 = &v69[43];
    }
    if (v31 >= 0)
      v56 = v15;
    else
      v56 = *v15;
    memmove(v34, v56, v32);
    goto LABEL_100;
  }
  if (!espresso_plan_build())
  {
    sub_2109A78CC((uint64_t *)(a2 + 104));
    *(_OWORD *)&v69[32] = *(_OWORD *)(a2 + 32);
    sub_21099A028((uint64_t)v69, (uint64_t)v71);
    v58 = v69[8];
    if (v69[8])
    {
      *(_QWORD *)a3 = &off_24CA79A00;
      *(_BYTE *)(a3 + 8) = v58;
      v59 = *(_QWORD *)&v69[24];
      *(_QWORD *)(a3 + 16) = *(_QWORD *)&v69[16];
      *(_QWORD *)(a3 + 24) = v59;
      if (v59)
      {
        v60 = (unint64_t *)(v59 + 8);
        do
          v61 = __ldxr(v60);
        while (__stxr(v61 + 1, v60));
      }
    }
    else
    {
      sub_21099BA90(__p, v6);
      v65 = *(_QWORD *)(a2 + 8);
      *(void **)(a2 + 8) = __p[0];
      if (v65)
        (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
      v68 = 0;
      sub_2108A5A94(__p, (char *)&unk_210A01421);
      sub_2108C4BA4(a3, &v68, (uint64_t)__p);
      if (v67 < 0)
        operator delete(__p[0]);
    }
    sub_2108AB288(v69);
    goto LABEL_92;
  }
  v43 = *(char *)(v6 + 31);
  if (v43 >= 0)
    v44 = *(unsigned __int8 *)(v6 + 31);
  else
    v44 = *(_QWORD *)(v6 + 16);
  v45 = v44 + 44;
  if (v44 + 44 > 0x7FFFFFFFFFFFFFF7)
    sub_2108A4B7C();
  if (v45 <= 0x16)
  {
    qmemcpy(v69, "Unable to build plan for the configuration '", 44);
    v46 = &v69[44];
LABEL_111:
    if (v43 >= 0)
      v63 = v15;
    else
      v63 = *v15;
    memmove(v46, v63, v44);
    goto LABEL_115;
  }
  v62 = (v45 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v45 | 7) != 0x17)
    v62 = v45 | 7;
  *(_QWORD *)&v69[8] = v44 + 44;
  *(_QWORD *)&v69[16] = (v62 + 1) | 0x8000000000000000;
  *(_QWORD *)v69 = operator new(v62 + 1);
  qmemcpy(*(void **)v69, "Unable to build plan for the configuration '", 44);
  v46 = (_BYTE *)(*(_QWORD *)v69 + 44);
  if (v44)
    goto LABEL_111;
LABEL_115:
  v46[v44] = 0;
  v64 = std::string::append((std::string *)v69, "'.", 2uLL);
  v38 = (void *)v64->__r_.__value_.__r.__words[0];
  size = v64->__r_.__value_.__l.__size_;
  LODWORD(__p[0]) = v64->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)__p + 3) = *(_DWORD *)((char *)&v64->__r_.__value_.__r.__words[2] + 3);
  v40 = SHIBYTE(v64->__r_.__value_.__r.__words[2]);
  v64->__r_.__value_.__l.__size_ = 0;
  v64->__r_.__value_.__r.__words[2] = 0;
  v64->__r_.__value_.__r.__words[0] = 0;
  *(_QWORD *)a3 = &off_24CA79A00;
  *(_BYTE *)(a3 + 8) = 5;
  v41 = operator new();
  v42 = v41;
  if (v40 < 0)
    goto LABEL_86;
  *(_QWORD *)v41 = v38;
  *(_QWORD *)(v41 + 8) = size;
  *(_DWORD *)(v41 + 16) = __p[0];
  *(_DWORD *)(v41 + 19) = *(_DWORD *)((char *)__p + 3);
  *(_BYTE *)(v41 + 23) = v40;
LABEL_87:
  *(_QWORD *)(a3 + 16) = v42;
  v54 = (_QWORD *)operator new();
  *v54 = &unk_24CA7A1D8;
  v54[1] = 0;
  v54[2] = 0;
  v54[3] = v42;
  *(_QWORD *)(a3 + 24) = v54;
  if (v40 < 0)
  {
    operator delete(v38);
    if ((v69[23] & 0x80000000) != 0)
LABEL_91:
      operator delete(*(void **)v69);
  }
  else if ((v69[23] & 0x80000000) != 0)
  {
    goto LABEL_91;
  }
LABEL_92:
  sub_2108B55B4((uint64_t)v71);
}

void sub_21099B8B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_2108AB288(&a16);
    sub_2108B55B4((uint64_t)&a23);
    _Unwind_Resume(a1);
  }
  sub_2108AB288(&a16);
  sub_2108B55B4((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void sub_21099B8FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  void *v23;
  uint64_t v24;
  int v25;

  MEMORY[0x212BCC6FC](v24, 0x1012C40EC159624);
  if (v25 < 0)
    operator delete(v23);
  if (a18 < 0)
  {
    operator delete(__p);
    sub_2108B55B4((uint64_t)&a23);
    _Unwind_Resume(a1);
  }
  sub_2108B55B4((uint64_t)&a23);
  _Unwind_Resume(a1);
}

uint64_t sub_21099BA88(uint64_t a1)
{
  return *(_QWORD *)(a1 + 128);
}

_BYTE *sub_21099BA90(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _BYTE *result;

  v4 = (_QWORD *)operator new();
  *v4 = off_24CA82900;
  result = v4 + 1;
  if (*(char *)(a2 + 31) < 0)
  {
    result = sub_2108B314C(result, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)(a2 + 8);
    v4[3] = *(_QWORD *)(a2 + 24);
  }
  *a1 = v4;
  return result;
}

void sub_21099BB1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BCC6FC](v1, 0x1093C402D7449D9);
  _Unwind_Resume(a1);
}

uint64_t sub_21099BB40(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t sub_21099BB50(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;

  *(_QWORD *)a1 = &off_24CA82C40;
  espresso_plan_destroy();
  espresso_context_destroy();
  v2 = *(_QWORD **)(a1 + 104);
  if (v2 != (_QWORD *)(a1 + 112))
  {
    do
    {
      if (*((_BYTE *)v2 + 112) && *((_BYTE *)v2 + 72))
        free((void *)v2[5]);
      v10 = (_QWORD *)v2[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (_QWORD *)v2[2];
          v12 = *v11 == (_QWORD)v2;
          v2 = v11;
        }
        while (!v12);
      }
      v2 = v11;
    }
    while (v11 != (_QWORD *)(a1 + 112));
  }
  v3 = *(std::__shared_weak_count **)(a1 + 136);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  sub_2109A5F3C(*(_QWORD **)(a1 + 112));
  v6 = *(void **)(a1 + 80);
  if (v6)
  {
    *(_QWORD *)(a1 + 88) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 56);
  if (v7)
  {
    *(_QWORD *)(a1 + 64) = v7;
    operator delete(v7);
  }
  v8 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = off_24CA82AE8;
  *(_QWORD *)(a1 + 8) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return a1;
}

void sub_21099BC80(uint64_t a1)
{
  sub_21099BB50(a1);
  JUMPOUT(0x212BCC6FCLL);
}

void sub_21099BCA4(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count_vtbl *v15;
  std::__shared_weak_count *v16;
  char v17;
  char v18;
  uint64_t v19;
  char *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  char *v25;
  std::__shared_weak_count *v26;
  char v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  int64x2_t *v43;
  int64x2_t *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  BOOL v52;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  char *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  std::string *v69;
  unint64_t size;
  void *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *exception;
  uint64_t v77;
  uint64_t v78;
  int64x2_t v79;
  uint64_t (**v80)();
  char v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  uint64_t (**v84)();
  char v85;
  std::__shared_weak_count_vtbl *v86;
  std::__shared_weak_count *v87;
  char v88;
  __int128 v89;
  unint64_t v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  int v94;
  __int128 v95;
  _OWORD v96[2];
  char v97;
  unsigned int v98;
  std::string v99;
  char v100;
  std::__shared_weak_count *v101;
  char v102;
  __int128 v103;
  int v104;
  char v105;
  __int128 v106;
  int v107;

  v6 = a1[16];
  if (!*(_BYTE *)(v6 + 152))
  {
    v84 = &off_24CA79A00;
    v85 = 0;
    v23 = operator new();
    *(_QWORD *)v23 = 0;
    *(_BYTE *)(v23 + 23) = 0;
    v86 = (std::__shared_weak_count_vtbl *)v23;
    v24 = (std::__shared_weak_count *)operator new();
    v24->__shared_owners_ = 0;
    v24->__shared_weak_owners_ = 0;
LABEL_31:
    v24->__vftable = (std::__shared_weak_count_vtbl *)&unk_24CA7A1D8;
    v24[1].__vftable = (std::__shared_weak_count_vtbl *)v23;
    v87 = v24;
    sub_21099CAF0((uint64_t)&v80, (uint64_t)a1, a2);
    v27 = v81;
    if (v81)
    {
      *(_QWORD *)a3 = &off_24CA79A00;
      *(_BYTE *)(a3 + 8) = v27;
      v28 = v83;
      *(_QWORD *)(a3 + 16) = v82;
      *(_QWORD *)(a3 + 24) = v28;
      if (v28)
      {
        p_shared_owners = (unint64_t *)&v28->__shared_owners_;
        do
          v30 = __ldxr(p_shared_owners);
        while (__stxr(v30 + 1, p_shared_owners));
      }
      *(_BYTE *)(a3 + 32) = 0;
      *(_BYTE *)(a3 + 56) = 0;
      goto LABEL_36;
    }
    if (espresso_plan_execute_sync())
    {
      *(_QWORD *)&v103 = espresso_plan_get_error_info();
      *((_QWORD *)&v103 + 1) = v34;
      DWORD2(v92) = 0;
      if (v34)
        sub_2108C6A80(&v91, (const char **)&v103 + 1);
      else
        sub_2108B9350(&v91, "nullptr");
      if (DWORD2(v92) == -1)
        sub_2108B9060();
      *(_QWORD *)&v89 = &v88;
      ((void (*)(std::string *__return_ptr, __int128 *, __int128 *))off_24CA82CD0[DWORD2(v92)])(&v99, &v89, &v91);
      if (DWORD2(v92) != -1)
        ((void (*)(__int128 *, __int128 *))off_24CA82CB8[DWORD2(v92)])(&v89, &v91);
      v69 = std::string::insert(&v99, 0, "Inference failed with espresso error: ", 0x26uLL);
      v71 = (void *)v69->__r_.__value_.__r.__words[0];
      size = v69->__r_.__value_.__l.__size_;
      LODWORD(v106) = v69->__r_.__value_.__r.__words[2];
      *(_DWORD *)((char *)&v106 + 3) = *(_DWORD *)((char *)&v69->__r_.__value_.__r.__words[2] + 3);
      v72 = SHIBYTE(v69->__r_.__value_.__r.__words[2]);
      v69->__r_.__value_.__l.__size_ = 0;
      v69->__r_.__value_.__r.__words[2] = 0;
      v69->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v99.__r_.__value_.__l.__data_);
      *(_QWORD *)a3 = &off_24CA79A00;
      *(_BYTE *)(a3 + 8) = 6;
      v73 = operator new();
      v74 = v73;
      if (v72 < 0)
      {
        sub_2108B314C((_BYTE *)v73, v71, size);
      }
      else
      {
        *(_QWORD *)v73 = v71;
        *(_QWORD *)(v73 + 8) = size;
        *(_DWORD *)(v73 + 16) = v106;
        *(_DWORD *)(v73 + 19) = *(_DWORD *)((char *)&v106 + 3);
        *(_BYTE *)(v73 + 23) = v72;
      }
      *(_QWORD *)(a3 + 16) = v74;
      v75 = (_QWORD *)operator new();
      *v75 = &unk_24CA7A1D8;
      v75[1] = 0;
      v75[2] = 0;
      v75[3] = v74;
      *(_QWORD *)(a3 + 24) = v75;
      *(_BYTE *)(a3 + 32) = 0;
      *(_BYTE *)(a3 + 56) = 0;
      if (v72 < 0)
        operator delete(v71);
      goto LABEL_36;
    }
    *(_QWORD *)a3 = &off_24CA79A00;
    *(_BYTE *)(a3 + 8) = 0;
    v40 = operator new();
    *(_QWORD *)v40 = 0;
    *(_BYTE *)(v40 + 23) = 0;
    *(_QWORD *)(a3 + 16) = v40;
    v41 = (_QWORD *)operator new();
    *v41 = &unk_24CA7A1D8;
    v41[1] = 0;
    v41[2] = 0;
    v41[3] = v40;
    v78 = a3;
    *(_QWORD *)(a3 + 24) = v41;
    v42 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(a1[8] - a1[7]) >> 3);
    v90 = 0;
    v89 = 0uLL;
    sub_2108B73CC((char **)&v89, v42);
    v43 = (int64x2_t *)a1[7];
    v44 = (int64x2_t *)a1[8];
    if (v43 == v44)
    {
LABEL_91:
      v68 = v90;
      *(_OWORD *)(v78 + 32) = v89;
      *(_QWORD *)(v78 + 48) = v68;
      *(_BYTE *)(v78 + 56) = 1;
LABEL_36:
      v80 = &off_24CA79A00;
      v31 = v83;
      if (v83)
      {
        v32 = (unint64_t *)&v83->__shared_owners_;
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      goto LABEL_49;
    }
    while (1)
    {
      v45 = v43->i64[0];
      v46 = v43[5].u64[0];
      v47 = v43[5].u64[1];
      v49 = v43[6].u64[0];
      v48 = v43[6].u64[1];
      v50 = v43[7].u64[1];
      v79 = v43[8];
      v51 = v43[9].i64[0];
      if (v43[10].i32[0] != 65568
        && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoModelInstance.cpp", 692, (uint64_t)"results.storage_type == ESPRESSO_STORAGE_TYPE_FLOAT32", 53, (uint64_t)"EspressoBufferToConstDataView32f currently expects FLOAT32 storage. Other buffer types not yet implemented.", 107, (void (*)(void **))sub_2109EDDB4))
      {
        abort();
      }
      if (HIDWORD(v50))
        v52 = 0;
      else
        v52 = HIDWORD(v46) == 0;
      if (!v52 || HIDWORD(v47) != 0 || HIDWORD(v49) != 0 || HIDWORD(v48) != 0)
      {
        exception = __cxa_allocate_exception(8uLL);
        *exception = &off_24CA852D8;
        __cxa_throw(exception, (struct type_info *)&unk_24CA852F0, (void (*)(void *))std::exception::~exception);
      }
      *(_QWORD *)&v106 = __PAIR64__(v46, v50);
      *((_QWORD *)&v106 + 1) = __PAIR64__(v49, v47);
      v107 = v48;
      LODWORD(v103) = 1;
      DWORD1(v103) = v50;
      *((int32x2_t *)&v103 + 1) = vmovn_s64(v79);
      v104 = v51;
      v105 = 1;
      v99.__r_.__value_.__s.__data_[0] = 0;
      v100 = 0;
      sub_21098B528((uint64_t)&v91, v45, &v106, &v103, &dword_210A1A170, (uint64_t)&v99);
      if (!v100)
        goto LABEL_79;
      v56 = (std::__shared_weak_count *)v99.__r_.__value_.__r.__words[2];
      if (!v99.__r_.__value_.__r.__words[2])
        goto LABEL_79;
      v57 = (unint64_t *)(v99.__r_.__value_.__r.__words[2] + 8);
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
        v59 = *((_QWORD *)&v89 + 1);
        if (*((_QWORD *)&v89 + 1) < v90)
        {
LABEL_80:
          v60 = v91;
          v61 = v92;
          v62 = v93;
          *(_DWORD *)(v59 + 48) = v94;
          *(_OWORD *)(v59 + 16) = v61;
          *(_OWORD *)(v59 + 32) = v62;
          *(_OWORD *)v59 = v60;
          *(_BYTE *)(v59 + 56) = 0;
          *(_BYTE *)(v59 + 112) = 0;
          if (v97)
          {
            *(_QWORD *)(v59 + 56) = &off_24CA79890;
            *(_OWORD *)(v59 + 64) = v95;
            v95 = 0uLL;
            v63 = *(_OWORD *)((char *)v96 + 14);
            *(_OWORD *)(v59 + 80) = v96[0];
            *(_OWORD *)(v59 + 94) = v63;
            *(_BYTE *)(v59 + 112) = 1;
          }
          v64 = (char *)(v59 + 120);
          goto LABEL_85;
        }
      }
      else
      {
LABEL_79:
        v59 = *((_QWORD *)&v89 + 1);
        if (*((_QWORD *)&v89 + 1) < v90)
          goto LABEL_80;
      }
      v64 = sub_2108B757C((char **)&v89, (uint64_t)&v91);
LABEL_85:
      *((_QWORD *)&v89 + 1) = v64;
      if (v97)
      {
        v65 = (std::__shared_weak_count *)*((_QWORD *)&v95 + 1);
        if (*((_QWORD *)&v95 + 1))
        {
          v66 = (unint64_t *)(*((_QWORD *)&v95 + 1) + 8);
          do
            v67 = __ldaxr(v66);
          while (__stlxr(v67 - 1, v66));
          if (!v67)
          {
            ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
            std::__shared_weak_count::__release_weak(v65);
          }
        }
      }
      v43 = (int64x2_t *)((char *)v43 + 168);
      if (v43 == v44)
        goto LABEL_91;
    }
  }
  v7 = *(_BYTE **)(v6 + 128);
  v8 = *(_BYTE **)(v6 + 136);
  if (0x6DB6DB6DB6DB6DB7 * ((v8 - v7) >> 2) == (uint64_t)(a2[1] - *a2) >> 7)
  {
    v77 = a3;
    if (v7 != v8)
    {
      v9 = 0;
      do
      {
        if (v7[25] && (v7[12] || v7[20] || v7[24]))
        {
          v25 = (char *)operator new(0x50uLL);
          strcpy(v25, "Espresso inputs cannot have pre processing arguments and use direct bind.");
          v84 = &off_24CA79A00;
          v85 = 3;
          v15 = (std::__shared_weak_count_vtbl *)operator new();
          sub_2108B314C(v15, v25, 0x49uLL);
          a3 = v77;
          v86 = v15;
          v26 = (std::__shared_weak_count *)operator new();
          goto LABEL_45;
        }
        v10 = *a2 + (v9 << 7);
        *(_QWORD *)&v91 = v9;
        BYTE8(v91) = 0;
        v98 = -1;
        v11 = *(unsigned int *)(v10 + 120);
        if ((_DWORD)v11 != -1)
        {
          ((void (*)(uint64_t (***)(), char *))off_24CA82F30[v11])(&v80, (char *)&v91 + 8);
          v98 = v11;
        }
        if (v7[25])
        {
          sub_21098D328((uint64_t)&v91 + 8, (uint64_t)&v99);
          if (!v102)
          {
            v20 = (char *)operator new(0x40uLL);
            strcpy(v20, "Use direct bind requires CVPixelBuffer backed image (CVImage).");
            v84 = &off_24CA79A00;
            v85 = 3;
            v15 = (std::__shared_weak_count_vtbl *)operator new();
            sub_2108B314C(v15, v20, 0x3EuLL);
            v86 = v15;
            v16 = (std::__shared_weak_count *)operator new();
            v16->__vftable = (std::__shared_weak_count_vtbl *)&unk_24CA7A1D8;
            v16->__shared_owners_ = 0;
            v16->__shared_weak_owners_ = 0;
            v16[1].__vftable = v15;
            v87 = v16;
            operator delete(v20);
            v18 = 0;
            v17 = 3;
            v19 = v98;
            if (v98 == -1)
              goto LABEL_23;
LABEL_22:
            ((void (*)(std::string *, char *))off_24CA82F18[v19])(&v99, (char *)&v91 + 8);
            goto LABEL_23;
          }
          v12 = v101;
          if (v101)
          {
            v13 = (unint64_t *)&v101->__shared_owners_;
            do
              v14 = __ldaxr(v13);
            while (__stlxr(v14 - 1, v13));
            if (!v14)
            {
              ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
              std::__shared_weak_count::__release_weak(v12);
            }
          }
        }
        v84 = &off_24CA79A00;
        v85 = 0;
        v15 = (std::__shared_weak_count_vtbl *)operator new();
        v15->~__shared_weak_count = 0;
        HIBYTE(v15->__on_zero_shared) = 0;
        v86 = v15;
        v16 = (std::__shared_weak_count *)operator new();
        v17 = 0;
        v16->__shared_owners_ = 0;
        v16->__vftable = (std::__shared_weak_count_vtbl *)&unk_24CA7A1D8;
        v16->__shared_weak_owners_ = 0;
        v16[1].__vftable = v15;
        v18 = 1;
        v87 = v16;
        v19 = v98;
        if (v98 != -1)
          goto LABEL_22;
LABEL_23:
        v98 = -1;
        if ((v18 & 1) == 0)
        {
          a3 = v77;
          goto LABEL_46;
        }
        v84 = &off_24CA79A00;
        v21 = (unint64_t *)&v16->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
        v7 += 28;
        ++v9;
      }
      while (v7 != v8);
    }
    v84 = &off_24CA79A00;
    v85 = 0;
    v23 = operator new();
    *(_QWORD *)v23 = 0;
    *(_BYTE *)(v23 + 23) = 0;
    v86 = (std::__shared_weak_count_vtbl *)v23;
    v24 = (std::__shared_weak_count *)operator new();
    v24->__shared_owners_ = 0;
    v24->__shared_weak_owners_ = 0;
    a3 = v77;
    goto LABEL_31;
  }
  v25 = (char *)operator new(0x38uLL);
  strcpy(v25, "Num of Espresso inputs do not match data inputs.");
  v84 = &off_24CA79A00;
  v85 = 3;
  v15 = (std::__shared_weak_count_vtbl *)operator new();
  sub_2108B314C(v15, v25, 0x30uLL);
  v86 = v15;
  v26 = (std::__shared_weak_count *)operator new();
LABEL_45:
  v16 = v26;
  v26->__vftable = (std::__shared_weak_count_vtbl *)&unk_24CA7A1D8;
  v26->__shared_owners_ = 0;
  v26->__shared_weak_owners_ = 0;
  v26[1].__vftable = v15;
  v87 = v26;
  operator delete(v25);
  v17 = 3;
LABEL_46:
  *(_QWORD *)a3 = &off_24CA79A00;
  *(_BYTE *)(a3 + 8) = v17;
  v35 = (unint64_t *)&v16->__shared_owners_;
  *(_QWORD *)(a3 + 16) = v15;
  *(_QWORD *)(a3 + 24) = v16;
  do
    v36 = __ldxr(v35);
  while (__stxr(v36 + 1, v35));
  *(_BYTE *)(a3 + 32) = 0;
  *(_BYTE *)(a3 + 56) = 0;
LABEL_49:
  v84 = &off_24CA79A00;
  v37 = v87;
  if (v87)
  {
    v38 = (unint64_t *)&v87->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
}

void sub_21099C7B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  uint64_t v9;
  int v10;
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  MEMORY[0x212BCC6FC](v9, 0x1012C40EC159624);
  if (v10 < 0)
  {
    operator delete(v8);
    sub_2108AB288((uint64_t *)va);
    sub_2108AB288(va1);
    _Unwind_Resume(a1);
  }
  sub_2108AB288((uint64_t *)va);
  sub_2108AB288(va1);
  _Unwind_Resume(a1);
}

void sub_21099CAF0(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  unint64_t v4;
  unsigned int v5;
  _BOOL4 v8;
  BOOL v9;
  int v10;
  _BOOL4 v11;
  _BYTE *v12;
  _QWORD *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  int v19;
  __int16 v20;
  unint64_t v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  void *v25;
  unint64_t size;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  __int16 v38;
  unint64_t v39;
  _QWORD *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  int v47;
  std::string *v48;
  unint64_t v49;
  void *v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  int v57;
  __int16 v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  char v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 *v66;
  __int128 v67;
  int v68;
  __int128 *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  int v77;
  __int16 v78;
  unint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  int v83;
  __int16 v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  int v89;
  __int16 v90;
  unint64_t v91;
  char *v92;
  _BYTE *v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  unsigned int v97;
  uint64_t *v98;
  __int128 v99;
  unint64_t *v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  __int128 v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  int v108;
  __int128 v109;
  unint64_t *v110;
  unint64_t v111;
  uint64_t v112;
  int v113;
  __int16 v114;
  unint64_t v115;
  int v116;
  uint64_t **v117;
  uint64_t *v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  uint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  uint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t *v149;
  unint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  unint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  int v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  int v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  unint64_t v174;
  uint64_t **v175;
  __int128 v176;
  unint64_t *v177;
  unint64_t v178;
  uint64_t v179;
  int v180;
  __int16 v181;
  unint64_t v182;
  unint64_t *v183;
  unint64_t v184;
  __int128 v185;
  unint64_t *v186;
  unint64_t v187;
  uint64_t v188;
  int v189;
  __int16 v190;
  unint64_t v191;
  __int128 v192;
  unint64_t *v193;
  unint64_t v194;
  uint64_t v195;
  int v196;
  __int16 v197;
  unint64_t v198;
  unint64_t *v199;
  unint64_t v200;
  char v201;
  uint64_t v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  uint64_t v206;
  int v207;
  __int16 v208;
  unint64_t v209;
  unint64_t *v210;
  unint64_t v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  uint64_t v215;
  int v216;
  __int16 v217;
  unint64_t v218;
  char v219;
  unint64_t *v220;
  unint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  const void *v227;
  int32x4_t v228;
  int v229;
  _DWORD *v230;
  _DWORD *v231;
  int v232;
  int v233;
  int v234;
  uint64_t v235;
  uint64_t v236;
  int v237;
  int v238;
  uint64_t v239;
  uint64_t v240;
  int v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  _DWORD *v248;
  _DWORD *v249;
  _DWORD *v250;
  _DWORD *v251;
  _DWORD *v252;
  _DWORD *v253;
  _DWORD *v254;
  _DWORD *v255;
  int v256;
  _DWORD *v257;
  _DWORD *v258;
  _DWORD *v259;
  _DWORD *v260;
  _DWORD *v261;
  int v262;
  _DWORD *v263;
  _DWORD *v264;
  _DWORD *v265;
  _DWORD *v266;
  _DWORD *v267;
  _DWORD *v268;
  _DWORD *v269;
  _DWORD *v270;
  _DWORD *v271;
  _DWORD *v272;
  _DWORD *v273;
  _DWORD *v274;
  _DWORD *v275;
  _DWORD *v276;
  int v277;
  int v278;
  int v279;
  _DWORD *v280;
  _DWORD *v281;
  _DWORD *v282;
  _DWORD *v283;
  _DWORD *v284;
  _DWORD *v285;
  int v286;
  int v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  _DWORD *v294;
  _DWORD *v295;
  int v296;
  int v297;
  _DWORD *v298;
  _DWORD *v299;
  int v300;
  int v301;
  int v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  _DWORD *v309;
  _DWORD *v310;
  int v311;
  _DWORD *v312;
  _DWORD *v313;
  _DWORD *v314;
  _DWORD *v315;
  _DWORD *v316;
  _DWORD *v317;
  _DWORD *v318;
  _DWORD *v319;
  int v320;
  int v321;
  int v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  _DWORD *v327;
  _DWORD *v328;
  uint64_t v329;
  uint64_t v330;
  int v331;
  _DWORD *v332;
  _DWORD *v333;
  _DWORD *v334;
  _DWORD *v335;
  _DWORD *v336;
  _DWORD *v337;
  _DWORD *v338;
  _DWORD *v339;
  int v340;
  int v341;
  _DWORD *v342;
  _DWORD *v343;
  int v344;
  char *v345;
  char *v346;
  int v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t *v350;
  unint64_t v351;
  unint64_t v352;
  unsigned __int8 *v353;
  uint64_t v354;
  uint64_t *v355;
  int v356;
  std::__shared_weak_count *v357;
  unint64_t *v358;
  unint64_t v359;
  uint64_t *v360;
  uint64_t *v361;
  unint64_t v362;
  uint64_t **v363;
  unint64_t v364;
  char *v365;
  uint64_t v366;
  uint64_t *v367;
  vImage_Buffer *v368;
  int v369;
  uint64_t *v370;
  unint64_t v371;
  uint64_t *v372;
  uint64_t **v373;
  unint64_t v374;
  char *v375;
  uint64_t v376;
  uint64_t *v377;
  _OWORD *v378;
  __int128 v379;
  int v380;
  __int128 v381;
  uint64_t **v382;
  int v383;
  __int128 v384;
  uint64_t **v385;
  unint64_t v386;
  void *v387;
  uint64_t v388;
  uint64_t *v389;
  unint64_t *v390;
  unint64_t v391;
  uint64_t v392;
  int v393;
  __int16 v394;
  unint64_t v395;
  unsigned int v396;
  unint64_t *v397;
  unint64_t v398;
  uint64_t v399;
  int v400;
  __int16 v401;
  unint64_t v402;
  char v403;
  unint64_t *v404;
  unint64_t v405;
  uint64_t v406;
  std::__shared_weak_count *v407;
  unint64_t *v408;
  unint64_t v409;
  unint64_t v410;
  std::__shared_weak_count *v411;
  unint64_t *v412;
  unint64_t v413;
  unint64_t v414;
  __int128 v415;
  unint64_t *v416;
  unint64_t v417;
  uint64_t v418;
  int v419;
  __int16 v420;
  unint64_t v421;
  int32x4_t v422;
  int v423;
  char *v424;
  char *v425;
  size_t v426;
  int v427;
  int v428;
  char *v429;
  char *v430;
  int v431;
  unsigned __int8 v432;
  BOOL v433;
  uint64_t v434;
  uint64_t j;
  unsigned __int8 v436;
  unsigned __int8 v437;
  uint64_t k;
  uint64_t v439;
  unsigned __int8 v440;
  int v441;
  unint64_t *v442;
  unint64_t v443;
  float v444;
  int32x4_t v445;
  int v446;
  _BYTE *v447;
  float *v448;
  int v449;
  int v450;
  float *v451;
  _BYTE *v452;
  int v453;
  uint64_t v454;
  int v455;
  int v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  int v462;
  uint64_t v463;
  uint64_t v464;
  float *v465;
  float *v466;
  float *v467;
  float *v468;
  int v469;
  float *v470;
  float *v471;
  float *v472;
  float *v473;
  float *v474;
  _BYTE *v475;
  int v476;
  float *v477;
  float *v478;
  float *v479;
  float *v480;
  float *v481;
  _BYTE *v482;
  float *v483;
  float *v484;
  int v485;
  _BYTE *v486;
  int v487;
  int v488;
  float *v489;
  float *v490;
  float *v491;
  int v492;
  _BYTE *v493;
  int v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  _BYTE *v500;
  float *v501;
  int v502;
  int v503;
  float *v504;
  int v505;
  _BYTE *v506;
  int v507;
  int v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  float *v513;
  int v514;
  float *v515;
  float *v516;
  _BYTE *v517;
  float *v518;
  float *v519;
  int v520;
  _BYTE *v521;
  int v522;
  float *v523;
  int v524;
  float *v525;
  float *v526;
  _BYTE *v527;
  float *v528;
  float *v529;
  int v530;
  _BYTE *v531;
  int v532;
  int v533;
  uint64_t v534;
  float *v535;
  int v536;
  _BYTE *v537;
  unsigned int v538;
  std::__shared_weak_count *v539;
  unint64_t *v540;
  unint64_t v541;
  unint64_t *v542;
  unint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  char *v547;
  size_t v548;
  uint64_t v549;
  char *v550;
  size_t v551;
  uint64_t v552;
  uint64_t v553;
  size_t v554;
  const void *v555;
  int32x4_t v556;
  int v557;
  int v558;
  int v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  int v564;
  uint64_t v565;
  uint64_t v566;
  _BYTE *v567;
  _BYTE *v568;
  int v569;
  int v570;
  _BYTE *v571;
  _BYTE *v572;
  int v573;
  _BYTE *v574;
  _BYTE *v575;
  int v576;
  int v577;
  _BYTE *v578;
  _BYTE *v579;
  int v580;
  _BYTE *v581;
  _BYTE *v582;
  int v583;
  int v584;
  int v585;
  int v586;
  _BYTE *v587;
  _BYTE *v588;
  int v589;
  int m;
  int v591;
  _BYTE *v592;
  _BYTE *v593;
  int v594;
  int v595;
  int n;
  _BYTE *v597;
  _BYTE *v598;
  int v599;
  int v600;
  _BYTE *v601;
  _BYTE *v602;
  int v603;
  int v604;
  int ii;
  int v606;
  _BYTE *v607;
  _BYTE *v608;
  int v609;
  int v610;
  uint64_t v611;
  uint64_t v612;
  char *v613;
  char *v614;
  int v615;
  int jj;
  _BYTE *v617;
  _BYTE *v618;
  int v619;
  int v620;
  _BYTE *v621;
  _BYTE *v622;
  int v623;
  _BYTE *v624;
  _BYTE *v625;
  int v626;
  int v627;
  int v628;
  int v629;
  _BYTE *v630;
  _BYTE *v631;
  int v632;
  int kk;
  int v634;
  _BYTE *v635;
  _BYTE *v636;
  int v637;
  int v638;
  int v639;
  int v640;
  _BYTE *v641;
  _BYTE *v642;
  int v643;
  _BYTE *v644;
  _BYTE *v645;
  int v646;
  int v647;
  _BYTE *v648;
  _BYTE *v649;
  unint64_t *v650;
  unint64_t v651;
  std::__shared_weak_count *v652;
  unint64_t *v653;
  unint64_t v654;
  uint64_t v655;
  std::__shared_weak_count *v656;
  unint64_t *v657;
  unint64_t v658;
  unint64_t v659;
  unint64_t v660;
  unint64_t v661;
  unint64_t v662;
  unint64_t *v663;
  unint64_t v664;
  uint64_t v665;
  int v666;
  __int16 v667;
  unint64_t v668;
  unint64_t *v669;
  unint64_t v670;
  unint64_t *v671;
  unint64_t v672;
  __int128 v673;
  unint64_t *v674;
  unint64_t v675;
  _BYTE *v676;
  unint64_t *v677;
  unint64_t v678;
  std::__shared_weak_count *v679;
  unint64_t *v680;
  unint64_t v681;
  uint64_t v682;
  std::__shared_weak_count *v683;
  unint64_t *v684;
  unint64_t v685;
  _BYTE *v686;
  std::__shared_weak_count *v687;
  _BYTE *v688;
  std::__shared_weak_count *v689;
  unint64_t *v690;
  unint64_t v691;
  std::__shared_weak_count *v692;
  unint64_t *v693;
  unint64_t v694;
  std::__shared_weak_count *v695;
  unint64_t *v696;
  unint64_t v697;
  std::__shared_weak_count *v698;
  unint64_t *v699;
  unint64_t v700;
  int32x4_t v701;
  int v702;
  char *v703;
  char *v704;
  int v705;
  char *v706;
  int v707;
  char *v708;
  char *v709;
  int v710;
  size_t v711;
  uint64_t v712;
  char *v713;
  unsigned __int8 v714;
  BOOL v715;
  uint64_t i3;
  uint64_t v717;
  unsigned __int8 v718;
  unsigned __int8 v719;
  uint64_t i4;
  uint64_t v721;
  unsigned __int8 v722;
  int v723;
  int v724;
  unsigned __int8 v725;
  BOOL v726;
  uint64_t i5;
  uint64_t v728;
  unsigned __int8 v729;
  int32x4_t v730;
  int v731;
  char *v732;
  char *v733;
  int v734;
  int v735;
  char *v736;
  char *v737;
  unsigned __int8 v738;
  BOOL v739;
  uint64_t v740;
  uint64_t i;
  unsigned __int8 v742;
  int v743;
  char *v744;
  char *v745;
  char *v746;
  char *v747;
  int v748;
  unint64_t *v749;
  unint64_t v750;
  __int128 v751;
  unint64_t *v752;
  unint64_t v753;
  _BYTE *v754;
  int32x4_t v755;
  int v756;
  char *v757;
  char *v758;
  int v759;
  int v760;
  char *v761;
  char *v762;
  unsigned __int8 v763;
  BOOL v764;
  uint64_t v765;
  uint64_t i1;
  unsigned __int8 v767;
  char *v768;
  int v769;
  uint64_t v770;
  uint64_t v771;
  char *v772;
  int v773;
  int v774;
  char *v775;
  char *v776;
  char *v777;
  char *v778;
  unsigned __int8 v779;
  BOOL v780;
  uint64_t v781;
  uint64_t i2;
  unsigned __int8 v783;
  int mm;
  int v785;
  _BYTE *v786;
  _BYTE *v787;
  int nn;
  int v789;
  _BYTE *v790;
  _BYTE *v791;
  unint64_t *v792;
  std::__shared_weak_count *v793;
  unint64_t *v794;
  unint64_t v795;
  std::__shared_weak_count *v796;
  unint64_t *v797;
  unint64_t v798;
  std::__shared_weak_count *v799;
  uint64_t v800;
  unint64_t *v801;
  unint64_t v802;
  __int128 v803;
  unint64_t *v804;
  unint64_t v805;
  unint64_t *v806;
  unint64_t v807;
  unint64_t v808;
  unint64_t v809;
  unint64_t v810;
  unint64_t v811;
  unint64_t v812;
  __CVBuffer *v813;
  std::__shared_weak_count *v814;
  unint64_t *v815;
  unint64_t v816;
  unint64_t v817;
  IOSurfaceRef IOSurface;
  std::__shared_weak_count *v819;
  unint64_t *v820;
  unint64_t v821;
  int v822;
  __int128 v823;
  unint64_t *v824;
  unint64_t v825;
  unint64_t v826;
  unint64_t v827;
  unint64_t v828;
  unint64_t v829;
  int v830;
  char *v831;
  char *v832;
  int v833;
  char *v834;
  size_t v835;
  const void *v836;
  std::__shared_weak_count *v837;
  unint64_t *v838;
  unint64_t v839;
  __int128 v840;
  unint64_t *v841;
  unint64_t v842;
  uint64_t (***v843)();
  std::__shared_weak_count *v844;
  unint64_t *v845;
  unint64_t v846;
  unint64_t *v847;
  unint64_t v848;
  unint64_t v849;
  unint64_t v850;
  unint64_t v851;
  unint64_t v852;
  unint64_t v853;
  __CVBuffer *v854;
  std::__shared_weak_count *v855;
  unint64_t *v856;
  unint64_t v857;
  unint64_t v858;
  IOSurfaceRef v859;
  std::__shared_weak_count *v860;
  unint64_t *v861;
  unint64_t v862;
  int v863;
  void *v864;
  std::__shared_weak_count *v865;
  unint64_t *v866;
  unint64_t v867;
  unint64_t v868;
  unint64_t v869;
  unint64_t v870;
  unint64_t v871;
  char *v872;
  std::__shared_weak_count *v873;
  unint64_t *v874;
  unint64_t v875;
  std::__shared_weak_count *v876;
  unint64_t *v877;
  unint64_t v878;
  std::__shared_weak_count *v879;
  unint64_t *v880;
  unint64_t v881;
  uint64_t v882;
  std::__shared_weak_count *v883;
  unint64_t *v884;
  unint64_t v885;
  unint64_t v886;
  unint64_t v887;
  unint64_t v888;
  unint64_t v889;
  std::__shared_weak_count *v890;
  unint64_t *v891;
  unint64_t v892;
  unint64_t v893;
  unint64_t v894;
  std::__shared_weak_count *v895;
  unint64_t *v896;
  unint64_t v897;
  unint64_t v898;
  unint64_t v899;
  std::__shared_weak_count *v900;
  unint64_t *v901;
  unint64_t v902;
  int v903;
  std::__shared_weak_count *v904;
  unint64_t *v905;
  unint64_t v906;
  std::__shared_weak_count *v907;
  unint64_t *v908;
  unint64_t v909;
  unint64_t *v910;
  void *v911;
  const void *v912;
  uint64_t v913;
  uint64_t v914;
  std::__shared_weak_count *v915;
  unint64_t *v916;
  unint64_t v917;
  std::__shared_weak_count *v918;
  unint64_t *v919;
  unint64_t v920;
  unint64_t *v921;
  unint64_t *v922;
  unint64_t v923;
  std::__shared_weak_count *v924;
  unint64_t *v925;
  unint64_t v926;
  unint64_t v927;
  unint64_t *v928;
  _QWORD *v929;
  char v930;
  std::__shared_weak_count *v931;
  unint64_t *v932;
  unint64_t v933;
  std::__shared_weak_count *v934;
  unint64_t *v935;
  unint64_t v936;
  std::__shared_weak_count *v937;
  unint64_t *v938;
  unint64_t v939;
  std::__shared_weak_count *v940;
  unint64_t *v941;
  unint64_t v942;
  std::__shared_weak_count *v943;
  unint64_t *v944;
  unint64_t v945;
  void *v946;
  std::__shared_weak_count *v947;
  unint64_t *v948;
  unint64_t v949;
  unint64_t v950;
  unint64_t v951;
  unint64_t v952;
  unint64_t v953;
  std::__shared_weak_count *v954;
  unint64_t *v955;
  unint64_t v956;
  unint64_t v957;
  uint64_t v958;
  std::__shared_weak_count *v959;
  unint64_t *v960;
  unint64_t v961;
  unint64_t v962;
  unint64_t v963;
  std::__shared_weak_count *v964;
  unint64_t *v965;
  unint64_t v966;
  int v967;
  std::__shared_weak_count *v968;
  unint64_t *v969;
  unint64_t v970;
  std::__shared_weak_count *v971;
  unint64_t *v972;
  unint64_t v973;
  unint64_t *v974;
  unint64_t v975;
  std::__shared_weak_count *v976;
  unint64_t *v977;
  unint64_t v978;
  uint64_t v979;
  uint64_t v980;
  _QWORD *v981;
  uint64_t v982;
  const char *v983;
  uint64_t v984;
  std::logic_error *exception;
  unsigned __int8 v986;
  std::string *v987;
  uint64_t *v988;
  uint64_t v989;
  std::string::size_type v990;
  std::string *v991;
  uint64_t v992;
  int v993;
  size_t v994;
  unint64_t v995;
  std::logic_error *v996;
  unsigned __int8 v997;
  std::string *v998;
  uint64_t *v999;
  uint64_t v1000;
  std::string::size_type v1001;
  std::string *v1002;
  uint64_t v1003;
  int v1004;
  size_t v1005;
  unint64_t v1006;
  std::__shared_weak_count *v1007;
  unint64_t *v1008;
  unint64_t v1009;
  unint64_t v1010;
  std::__shared_weak_count *v1011;
  unint64_t *v1012;
  unint64_t v1013;
  unint64_t v1014;
  uint64_t v1015;
  uint64_t v1016;
  std::string::size_type v1017;
  std::string *v1018;
  std::__shared_weak_count *v1019;
  unint64_t *v1020;
  unint64_t v1021;
  unint64_t v1022;
  std::__shared_weak_count *v1023;
  unint64_t *v1024;
  unint64_t v1025;
  unint64_t v1026;
  uint64_t v1027;
  uint64_t v1028;
  std::string::size_type v1029;
  std::string *v1030;
  void *v1031;
  void *v1032;
  std::string *v1033;
  uint64_t v1034;
  uint64_t v1035;
  std::string *v1036;
  uint64_t v1037;
  uint64_t v1038;
  std::string *v1039;
  std::string *v1040;
  __int128 v1041;
  __int128 *v1042;
  __int128 v1043;
  __int128 *v1044;
  __int128 v1045;
  int64x2_t v1046;
  int8x16_t v1047;
  std::string::size_type v1048;
  __int128 v1049;
  int64x2_t v1050;
  int8x16_t v1051;
  std::string::size_type v1052;
  std::string::size_type v1053;
  void *v1054;
  std::string::size_type v1055;
  void *v1056;
  uint64_t v1057;
  const char *v1058;
  uint64_t v1059;
  uint64_t **v1060;
  _DWORD *v1061;
  int v1062;
  _DWORD *v1063;
  _DWORD *v1064;
  uint64_t v1065;
  unint64_t v1066;
  uint64_t v1068;
  uint64_t v1069;
  uint64_t v1070;
  int v1071;
  int v1072;
  int v1073;
  uint64_t v1074;
  unint64_t v1076;
  _DWORD *v1077;
  char *v1078;
  uint64_t v1079;
  _DWORD *v1080;
  char *v1081;
  int v1082;
  _DWORD *v1083;
  uint64_t v1084;
  int v1085;
  _DWORD *v1086;
  uint64_t v1087;
  int v1088;
  char *v1089;
  _DWORD *v1090;
  uint64_t v1091;
  float *v1092;
  char *v1093;
  uint64_t v1094;
  _DWORD *v1095;
  int v1096;
  _BYTE *v1097;
  uint64_t v1098;
  uint64_t v1099;
  _DWORD *v1100;
  uint64_t v1101;
  uint64_t v1102;
  uint64_t v1103;
  uint64_t v1104;
  int v1105;
  _DWORD *v1106;
  uint64_t v1107;
  int v1108;
  int v1109;
  int v1110;
  uint64_t v1111;
  int v1113;
  int v1114;
  uint64_t v1115;
  uint64_t v1116;
  int v1117;
  char *v1118;
  uint64_t v1119;
  _DWORD *v1120;
  uint64_t v1121;
  int v1122;
  uint64_t v1123;
  int v1124;
  int v1125;
  int v1126;
  int64x2_t v1127;
  int64x2_t v1128;
  int64x2_t v1129;
  unsigned int v1130;
  __int128 v1131;
  uint64_t v1132;
  int v1133;
  uint64_t v1134;
  int v1135;
  __int16 v1136;
  char v1137;
  int64x2_t width;
  int64x2_t v1139;
  int64x2_t v1140;
  unsigned int v1141;
  __int128 v1142;
  uint64_t v1143;
  int v1144;
  uint64_t v1145;
  int v1146;
  __int16 v1147;
  char v1148;
  uint64_t (**v1149)();
  char v1150;
  _BYTE *v1151;
  std::__shared_weak_count *v1152;
  _BYTE v1153[48];
  unsigned int v1154;
  uint64_t v1155;
  std::__shared_weak_count *v1156;
  uint64_t v1157;
  int v1158;
  uint64_t v1159;
  int v1160;
  __int16 v1161;
  unsigned __int8 v1162;
  unint64_t v1163;
  uint64_t (**v1164)();
  void *v1165;
  std::__shared_weak_count *v1166;
  __int128 v1167;
  uint64_t v1168;
  void *__dst[2];
  _BYTE v1170[24];
  uint64_t v1171;
  char v1172;
  __int128 v1173;
  _BYTE v1174[24];
  uint64_t v1175;
  _BYTE __src[48];
  char v1177;
  char v1178;
  char *v1179;
  _DWORD *v1180;
  uint64_t v1181;
  void **v1182;
  __int128 **v1183;
  unint64_t ***v1184;
  unint64_t **v1185;
  unint64_t *v1186;
  char v1187;
  __int128 *v1188;
  __int128 v1189;
  uint64_t v1190;
  void *__p[2];
  uint64_t v1192;
  unint64_t v1193;
  int64x2_t v1194;
  _BYTE v1195[40];
  _BYTE v1196[24];
  uint64_t v1197;
  int v1198;
  uint64_t v1199;
  int v1200;
  __int16 v1201;
  char v1202;
  int64x2_t v1203;
  _BYTE v1204[40];
  _BYTE v1205[24];
  uint64_t v1206;
  int v1207;
  uint64_t v1208;
  int v1209;
  __int16 v1210;
  char v1211;
  int64x2_t v1212;
  _BYTE v1213[40];
  __int128 v1214;
  std::__shared_weak_count *v1215;
  uint64_t v1216;
  int v1217;
  uint64_t v1218;
  int v1219;
  __int16 v1220;
  char v1221;
  _BYTE pixelBuffer[56];
  __int128 v1223;
  std::__shared_weak_count *v1224;
  uint64_t v1225;
  int v1226;
  uint64_t v1227;
  int v1228;
  __int16 v1229;
  char v1230;
  int64x2_t v1231;
  int64x2_t v1232;
  int64x2_t v1233;
  unsigned int v1234;
  uint64_t (**v1235)();
  __int128 v1236;
  uint64_t v1237;
  int v1238;
  uint64_t v1239;
  int v1240;
  __int16 v1241;
  char v1242;
  int64x2_t v1243;
  int64x2_t v1244;
  int64x2_t v1245;
  unsigned int v1246;
  uint64_t (**v1247)();
  __int128 v1248;
  uint64_t v1249;
  int v1250;
  uint64_t v1251;
  int v1252;
  __int16 v1253;
  char v1254;
  int64x2_t v1255[3];
  unsigned int v1256;
  uint64_t (**v1257)();
  __int128 v1258;
  __int128 v1259;
  uint64_t v1260;
  uint64_t v1261;
  uint64_t v1262;
  uint64_t v1263;
  uint64_t v1264;
  uint64_t v1265;
  uint64_t v1266;
  uint64_t v1267;
  int v1268;
  int64x2_t v1269;
  int64x2_t v1270;
  int64x2_t v1271;
  unsigned int v1272;
  uint64_t (**v1273)();
  __int128 v1274;
  uint64_t v1275;
  int v1276;
  uint64_t v1277;
  int v1278;
  __int16 v1279;
  char v1280;
  int v1281;
  int64x2_t v1282;
  int64x2_t v1283;
  int64x2_t v1284;
  unsigned int v1285;
  uint64_t (**v1286)();
  __int128 v1287;
  uint64_t v1288;
  int v1289;
  uint64_t v1290;
  int v1291;
  __int16 v1292;
  char v1293;
  int v1294;
  _BYTE v1295[25];
  std::string v1296;
  std::string v1297;
  std::string v1298;
  std::string v1299;
  std::string __s;
  _BYTE v1301[80];
  __int128 v1302;
  __int128 v1303;
  __int128 v1304;
  __int128 v1305;
  __int128 v1306;
  uint64_t v1307;
  _BYTE v1308[80];
  __int128 v1309;
  __int128 v1310;
  __int128 v1311;
  __int128 v1312;
  __int128 v1313;
  uint64_t v1314;
  _BYTE v1315[56];
  std::string::size_type v1316;
  int v1317;
  uint64_t v1318;

  v1318 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 128) + 56) - *(_QWORD *)(*(_QWORD *)(a2 + 128) + 48);
  if (!v3)
    goto LABEL_1647;
  v4 = 0;
  v1066 = 0xCF3CF3CF3CF3CF3DLL * (v3 >> 3);
  v1061 = (_DWORD *)(a2 + 48);
  v1060 = (uint64_t **)(a2 + 112);
  v1057 = 98;
  v1058 = "Espresso execution for non-float input for given color format not yet implemented or not supported";
  do
  {
    v1163 = v4;
    sub_21098D328(*a3 + (v4 << 7), (uint64_t)v1153);
    v5 = v1154;
    if (((v1154 >> 1) & 1) + (v1154 & 1) + ((v1154 >> 2) & 1) + ((v1154 >> 3) & 1) > 1
      || ((v1154 >> 4) & 1) + ((v1154 >> 5) & 1) + ((v1154 >> 6) & 1) >= 2)
    {
      if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoModelInstance.cpp", 651, (uint64_t)"input.Format().IsValidFormat()", 30, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
      {
        goto LABEL_1650;
      }
      v5 = v1154;
    }
    *(_OWORD *)&v1308[20] = *(_OWORD *)&v1153[20];
    *(_DWORD *)&v1308[36] = *(_DWORD *)&v1153[36];
    *(_OWORD *)v1308 = *(_OWORD *)v1153;
    *(_DWORD *)&v1308[16] = *(_DWORD *)&v1153[16];
    *(_DWORD *)&v1308[40] = v5;
    v8 = *(_DWORD *)&v1153[16] < 2u && *(_DWORD *)&v1153[12] < 2u;
    if (v8)
    {
      v9 = *(_DWORD *)&v1308[8] < 2u;
      v10 = *(_DWORD *)&v1308[24];
      if (!*(_DWORD *)&v1308[24])
        goto LABEL_32;
    }
    else
    {
      v9 = 0;
      v10 = *(_DWORD *)&v1308[24];
      if (!*(_DWORD *)&v1308[24])
        goto LABEL_32;
    }
    v11 = *(_DWORD *)&v1308[4] == 0;
    if (!*(_DWORD *)&v1308[4])
      v9 = 1;
    if (v9)
      goto LABEL_26;
    v11 = *(_DWORD *)&v1308[28] < (*(_DWORD *)&v1308[4] * v10);
    if (*(_DWORD *)&v1308[28] < (*(_DWORD *)&v1308[4] * v10))
      LOBYTE(v8) = 1;
    if (v8
      || (v11 = *(_DWORD *)&v1308[32] < (*(_DWORD *)&v1308[8] * *(_DWORD *)&v1308[28]),
          *(_DWORD *)&v1153[16] < 2u)
      || *(_DWORD *)&v1308[32] < (*(_DWORD *)&v1308[8] * *(_DWORD *)&v1308[28]))
    {
LABEL_26:
      if (!v11)
        goto LABEL_27;
    }
    else if (*(_DWORD *)&v1308[36] >= (*(_DWORD *)&v1308[32] * *(_DWORD *)&v1153[12]))
    {
LABEL_27:
      if (sub_21098C69C(v1308, 16))
        goto LABEL_33;
    }
LABEL_32:
    if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoModelInstance.cpp", 652, (uint64_t)"ValidViewStructure<uint8_t>(Structure(input))", 45, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
    {
LABEL_1650:
      abort();
    }
LABEL_33:
    v1076 = v4;
    if ((v1154 & 0xF) == 0 || (v1154 & 0x70) == 0)
    {
      sub_2108AE440(&v1163);
      v22 = std::string::insert((std::string *)v1301, 0, "Invalid input: The given view for input ", 0x28uLL);
      v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      *(_QWORD *)&v1308[16] = *((_QWORD *)&v22->__r_.__value_.__l + 2);
      *(_OWORD *)v1308 = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      v24 = std::string::append((std::string *)v1308, " requires both a color format and type definition in its format flags.", 0x46uLL);
      v25 = (void *)v24->__r_.__value_.__r.__words[0];
      size = v24->__r_.__value_.__l.__size_;
      v1255[0].i32[0] = v24->__r_.__value_.__r.__words[2];
      *(__int32 *)((char *)v1255[0].i32 + 3) = *(_DWORD *)((char *)&v24->__r_.__value_.__r.__words[2] + 3);
      v27 = SHIBYTE(v24->__r_.__value_.__r.__words[2]);
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      v24->__r_.__value_.__r.__words[0] = 0;
      *(_QWORD *)a1 = &off_24CA79A00;
      *(_BYTE *)(a1 + 8) = 3;
      v28 = operator new();
      v29 = v28;
      if (v27 < 0)
      {
        sub_2108B314C((_BYTE *)v28, v25, size);
      }
      else
      {
        *(_QWORD *)v28 = v25;
        *(_QWORD *)(v28 + 8) = size;
        *(_DWORD *)(v28 + 16) = v1255[0].i32[0];
        *(_DWORD *)(v28 + 19) = *(__int32 *)((char *)v1255[0].i32 + 3);
        *(_BYTE *)(v28 + 23) = v27;
      }
      *(_QWORD *)(a1 + 16) = v29;
      v40 = (_QWORD *)operator new();
      *v40 = &unk_24CA7A1D8;
      v40[1] = 0;
      v40[2] = 0;
      v40[3] = v29;
      *(_QWORD *)(a1 + 24) = v40;
      if (v27 < 0)
      {
        operator delete(v25);
        if ((v1308[23] & 0x80000000) == 0)
        {
LABEL_60:
          if ((v1301[23] & 0x80000000) == 0)
            goto LABEL_1521;
LABEL_64:
          operator delete(*(void **)v1301);
          goto LABEL_1521;
        }
      }
      else if ((v1308[23] & 0x80000000) == 0)
      {
        goto LABEL_60;
      }
      operator delete(*(void **)v1308);
      if ((v1301[23] & 0x80000000) == 0)
        goto LABEL_1521;
      goto LABEL_64;
    }
    *(_QWORD *)a1 = &off_24CA79A00;
    *(_BYTE *)(a1 + 8) = 0;
    v12 = (_BYTE *)operator new();
    v12[23] = 0;
    *v12 = 0;
    *(_QWORD *)(a1 + 16) = v12;
    v13 = (_QWORD *)operator new();
    *v13 = &unk_24CA7A1D8;
    v13[1] = 0;
    v13[2] = 0;
    v13[3] = v12;
    *(_QWORD *)(a1 + 24) = v13;
    if (*(_QWORD *)&v1153[12] == 0x100000001 && v1154 <= 0x21 && ((1 << v1154) & 0x201160000) != 0)
    {
      width = *(int64x2_t *)v1153;
      v1139 = *(int64x2_t *)&v1153[16];
      v1140 = *(int64x2_t *)&v1153[32];
      v1141 = v1154;
      v1148 = 0;
      if (v1162)
      {
        v14 = v1155;
        v15 = v1156;
        if (v1156)
        {
          p_shared_owners = (unint64_t *)&v1156->__shared_owners_;
          do
            v17 = __ldxr(p_shared_owners);
          while (__stxr(v17 + 1, p_shared_owners));
          v18 = v1159;
          v19 = v1160;
          v20 = v1161;
          do
            v21 = __ldxr(p_shared_owners);
          while (__stxr(v21 + 1, p_shared_owners));
        }
        else
        {
          v18 = v1159;
          v19 = v1160;
          v20 = v1161;
        }
        *(_QWORD *)&v1142 = v14;
        *((_QWORD *)&v1142 + 1) = v15;
        v1143 = v1157;
        v1144 = v1158;
        v1145 = v18;
        v1146 = v19;
        v1147 = v20;
        if (v15)
        {
          v62 = (unint64_t *)&v15->__shared_owners_;
          do
            v63 = __ldaxr(v62);
          while (__stlxr(v63 - 1, v62));
          if (!v63)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
        v1148 = 1;
      }
      v1193 = v1163;
      if (v1139.i32[0] != 1
        && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoModelInstance.cpp", 476, (uint64_t)"input.BatchSize() == 1", 22, (uint64_t)"Espresso execution with non-float input of batch size greater than 1 not yet implemented.", 89, (void (*)(void **))sub_2109EDDB4)|| !*v1061&& sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoModelInstance.cpp", 477, (uint64_t)"device != EspressoDevice::Any", 29, (uint64_t)"Invalid runtime device specified.", 33, (void (*)(void **))sub_2109EDDB4))
      {
        abort();
      }
      if ((v1141 & 1) != 0)
      {
        v64 = 1;
      }
      else if ((v1141 & 2) != 0)
      {
        v64 = 2;
      }
      else
      {
        v64 = 4 * ((v1141 & 0xC) != 0);
      }
      sub_210997320(*(_QWORD *)(a2 + 128) + 8, v1193, (uint64_t)v1308);
      *(_OWORD *)__p = *(_OWORD *)v1308;
      v1192 = *(_QWORD *)&v1308[16];
      v65 = *(_QWORD *)(a2 + 80);
      if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 88) - v65) >> 3) <= v1193)
      {
        v68 = 0;
        LOBYTE(v1189) = 0;
        BYTE4(v1190) = 0;
      }
      else
      {
        v66 = (__int128 *)(v65 + 24 * v1193);
        v67 = *v66;
        v1190 = *((_QWORD *)v66 + 2);
        v1189 = v67;
        v68 = BYTE4(v1190);
      }
      v69 = &v1189;
      if (!v68)
        v69 = 0;
      v1188 = v69;
      v70 = *(_QWORD *)(a2 + 128);
      v1187 = 0;
      if (*(_BYTE *)(v70 + 152))
      {
        v72 = v70 + 128;
        v71 = *(_QWORD *)(v70 + 128);
        if (0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(v72 + 8) - v71) >> 2) > v1193)
        {
          v73 = *(unsigned __int8 *)(v71 + 28 * v1193 + 25);
          v1187 = *(_BYTE *)(v71 + 28 * v1193 + 25);
          if (v68)
          {
            if (v73
              && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoModelInstance.cpp", 499, (uint64_t)"!(needs_pp && use_direct_bind)", 30, (uint64_t)" Espresso inputs can't have pre processing with direct bind.", 60, (void (*)(void **))sub_2109EDDB4))
            {
              abort();
            }
          }
        }
      }
      v1186 = &v1193;
      v1185 = &v1186;
      v1179 = &v1187;
      v1180 = v1061;
      v1181 = a2;
      v1182 = __p;
      v1183 = &v1188;
      v1184 = &v1185;
      if (v64 != 1)
      {
        if (v64 != 2)
        {
          if (v64 != 4)
          {
            v982 = 623;
            goto LABEL_1665;
          }
          if (width.i32[3] != 1)
          {
            v92 = (char *)operator new(0x58uLL);
            strcpy(v92, "Espresso execution with 4 non-float components but multiple channels not supported");
            v1149 = &off_24CA79A00;
            v1150 = 6;
            v93 = (_BYTE *)operator new();
            sub_2108B314C(v93, v92, 0x52uLL);
            v1151 = v93;
            v94 = (std::__shared_weak_count *)operator new();
            v94->__vftable = (std::__shared_weak_count_vtbl *)&unk_24CA7A1D8;
            v94->__shared_owners_ = 0;
            v94->__shared_weak_owners_ = 0;
            v94[1].__vftable = (std::__shared_weak_count_vtbl *)v93;
            v1152 = v94;
            operator delete(v92);
            goto LABEL_952;
          }
          if ((v1141 & 8) == 0)
          {
            if ((v1141 & 4) == 0)
            {
              v982 = 593;
              v983 = "Espresso execution with 4 non-float color components but format other than RGBA/BGRA not yet implem"
                     "ented or not supported";
              v984 = 121;
              goto LABEL_1664;
            }
            v1255[0] = width;
            v1255[1] = v1139;
            v1255[2] = v1140;
            v1256 = v1141;
            LOBYTE(v1257) = 0;
            LOBYTE(v1262) = 0;
            if (!v1148)
              goto LABEL_1414;
            v1257 = &off_24CA79890;
            if (*((_QWORD *)&v1142 + 1))
            {
              v74 = (unint64_t *)(*((_QWORD *)&v1142 + 1) + 8);
              do
                v75 = __ldxr(v74);
              while (__stxr(v75 + 1, v74));
              v76 = v1145;
              v77 = v1146;
              v78 = v1147;
              do
                v79 = __ldxr(v74);
              while (__stxr(v79 + 1, v74));
            }
            else
            {
              v76 = v1145;
              v77 = v1146;
              v78 = v1147;
            }
            v1258 = v1142;
            *(_QWORD *)&v1259 = v1143;
            DWORD2(v1259) = v1144;
            v1260 = v76;
            LODWORD(v1261) = v77;
            WORD2(v1261) = v78;
            if (*((_QWORD *)&v1142 + 1))
            {
              v671 = (unint64_t *)(*((_QWORD *)&v1142 + 1) + 8);
              do
                v672 = __ldaxr(v671);
              while (__stlxr(v672 - 1, v671));
              if (!v672)
              {
                (*(void (**)(_QWORD))(**((_QWORD **)&v1142 + 1) + 16))(*((_QWORD *)&v1142 + 1));
                std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v1142 + 1));
              }
              v77 = v1261;
            }
            LOBYTE(v1262) = 1;
            if (v77 != 25)
            {
              pixelBuffer[0] = 0;
              LOBYTE(v1225) = 0;
              goto LABEL_1388;
            }
            *(_QWORD *)v1301 = &off_24CA82520;
            sub_210993E90((uint64_t)&v1257, (uint64_t)&v1301[8]);
            v673 = *(_OWORD *)&v1301[8];
            *(_QWORD *)v1308 = &off_24CA82520;
            *(_OWORD *)&v1308[8] = *(_OWORD *)&v1301[8];
            *(_OWORD *)&v1301[8] = 0uLL;
            *(_OWORD *)&v1308[24] = *(_OWORD *)&v1301[24];
            *(_OWORD *)&v1308[40] = *(_OWORD *)&v1301[40];
            *(_OWORD *)&v1308[56] = *(_OWORD *)&v1301[56];
            *(_WORD *)&v1308[72] = *(_WORD *)&v1301[72];
            LOBYTE(v1309) = 1;
            if ((_QWORD)v673)
            {
              *(_OWORD *)__src = v673;
              if (*((_QWORD *)&v673 + 1))
              {
                v674 = (unint64_t *)(*((_QWORD *)&v673 + 1) + 8);
                do
                  v675 = __ldxr(v674);
                while (__stxr(v675 + 1, v674));
              }
              if (*(uint64_t (***)())v673 == off_24CA7BAA0)
              {
                *(_OWORD *)v1315 = v673;
                v676 = __src;
              }
              else
              {
                v676 = v1315;
              }
            }
            else
            {
              *(_QWORD *)&__src[8] = 0;
              *(_QWORD *)__src = 0;
              v676 = v1315;
            }
            *(_QWORD *)v676 = 0;
            *((_QWORD *)v676 + 1) = 0;
            v796 = *(std::__shared_weak_count **)&__src[8];
            if (*(_QWORD *)&__src[8])
            {
              v797 = (unint64_t *)(*(_QWORD *)&__src[8] + 8);
              do
                v798 = __ldaxr(v797);
              while (__stlxr(v798 - 1, v797));
              if (!v798)
              {
                ((void (*)(std::__shared_weak_count *))v796->__on_zero_shared)(v796);
                std::__shared_weak_count::__release_weak(v796);
              }
            }
            v800 = *(_QWORD *)v1315;
            v799 = *(std::__shared_weak_count **)&v1315[8];
            if (*(_QWORD *)&v1315[8])
            {
              v801 = (unint64_t *)(*(_QWORD *)&v1315[8] + 8);
              do
                v802 = __ldaxr(v801);
              while (__stlxr(v802 - 1, v801));
              if (!v802)
              {
                ((void (*)(std::__shared_weak_count *))v799->__on_zero_shared)(v799);
                std::__shared_weak_count::__release_weak(v799);
              }
            }
            if (!v800)
            {
              pixelBuffer[0] = 0;
              LOBYTE(v1225) = 0;
              goto LABEL_1382;
            }
            v803 = *(_OWORD *)&v1308[8];
            if (*(_QWORD *)&v1308[16])
            {
              v804 = (unint64_t *)(*(_QWORD *)&v1308[16] + 8);
              do
                v805 = __ldxr(v804);
              while (__stxr(v805 + 1, v804));
            }
            if ((_QWORD)v803 && *(uint64_t (***)())v803 == off_24CA7BAA0)
            {
              if (*((_QWORD *)&v803 + 1))
              {
                v806 = (unint64_t *)(*((_QWORD *)&v803 + 1) + 8);
                do
                  v807 = __ldxr(v806);
                while (__stxr(v807 + 1, v806));
                *(_OWORD *)__src = *(_OWORD *)&v1308[24];
                *(_OWORD *)&__src[16] = *(_OWORD *)&v1308[40];
                *(_OWORD *)&__src[32] = *(_OWORD *)&v1308[56];
                do
                  v808 = __ldxr(v806);
                while (__stxr(v808 + 1, v806));
                do
                  v809 = __ldaxr(v806);
                while (__stlxr(v809 - 1, v806));
                if (!v809)
                {
                  (*(void (**)(_QWORD))(**((_QWORD **)&v803 + 1) + 16))(*((_QWORD *)&v803 + 1));
                  std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v803 + 1));
                }
                do
                  v810 = __ldaxr(v806);
                while (__stlxr(v810 - 1, v806));
                if (!v810)
                {
                  (*(void (**)(_QWORD))(**((_QWORD **)&v803 + 1) + 16))(*((_QWORD *)&v803 + 1));
                  std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v803 + 1));
                }
                *(_QWORD *)v1301 = &off_24CA82D28;
                *(_OWORD *)&v1301[8] = v803;
                *(_OWORD *)&v1301[24] = *(_OWORD *)__src;
                *(_OWORD *)&v1301[40] = *(_OWORD *)&__src[16];
                *(_OWORD *)&v1301[56] = *(_OWORD *)&__src[32];
                v1301[72] = v1177;
                LOBYTE(v1302) = 1;
                do
                  v811 = __ldxr(v806);
                while (__stxr(v811 + 1, v806));
                do
                  v812 = __ldaxr(v806);
                while (__stlxr(v812 - 1, v806));
                if (!v812)
                {
                  (*(void (**)(_QWORD))(**((_QWORD **)&v803 + 1) + 16))(*((_QWORD *)&v803 + 1));
                  std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v803 + 1));
                }
              }
              else
              {
                *(_QWORD *)v1301 = &off_24CA82D28;
                *(_OWORD *)&v1301[8] = (unint64_t)v803;
                v1301[72] = v1177;
                *(_OWORD *)&v1301[24] = *(_OWORD *)&v1308[24];
                *(_OWORD *)&v1301[40] = *(_OWORD *)&v1308[40];
                *(_OWORD *)&v1301[56] = *(_OWORD *)&v1308[56];
                LOBYTE(v1302) = 1;
              }
              sub_2108D45A8(v803, v1315);
              if (*(_QWORD *)&v1315[8])
              {
                v813 = **(__CVBuffer ***)&v1315[8];
                v814 = *(std::__shared_weak_count **)(*(_QWORD *)&v1315[8] + 8);
                if (v814)
                {
                  v815 = (unint64_t *)&v814->__shared_owners_;
                  do
                    v816 = __ldxr(v815);
                  while (__stxr(v816 + 1, v815));
                  do
                    v817 = __ldaxr(v815);
                  while (__stlxr(v817 - 1, v815));
                  if (!v817)
                  {
                    ((void (*)(std::__shared_weak_count *))v814->__on_zero_shared)(v814);
                    std::__shared_weak_count::__release_weak(v814);
                  }
                }
              }
              else
              {
                v813 = 0;
              }
              IOSurface = CVPixelBufferGetIOSurface(v813);
              *(_QWORD *)v1315 = &off_24CA7D7F8;
              v819 = *(std::__shared_weak_count **)&v1315[16];
              if (*(_QWORD *)&v1315[16])
              {
                v820 = (unint64_t *)(*(_QWORD *)&v1315[16] + 8);
                do
                  v821 = __ldaxr(v820);
                while (__stlxr(v821 - 1, v820));
                if (!v821)
                {
                  ((void (*)(std::__shared_weak_count *))v819->__on_zero_shared)(v819);
                  std::__shared_weak_count::__release_weak(v819);
                }
              }
              pixelBuffer[0] = 0;
              LOBYTE(v1225) = 0;
              v822 = v1302;
              if (!IOSurface)
                goto LABEL_1376;
              if ((_BYTE)v1302)
              {
                *(_QWORD *)pixelBuffer = &off_24CA82D28;
                v823 = *(_OWORD *)&v1301[8];
                if (*(_QWORD *)&v1301[16])
                {
                  v824 = (unint64_t *)(*(_QWORD *)&v1301[16] + 8);
                  do
                    v825 = __ldxr(v824);
                  while (__stxr(v825 + 1, v824));
                  do
                    v826 = __ldxr(v824);
                  while (__stxr(v826 + 1, v824));
                  *(_OWORD *)&pixelBuffer[24] = *(_OWORD *)&v1301[24];
                  *(_OWORD *)&pixelBuffer[40] = *(_OWORD *)&v1301[40];
                  v1223 = *(_OWORD *)&v1301[56];
                  do
                    v827 = __ldxr(v824);
                  while (__stxr(v827 + 1, v824));
                  *(_OWORD *)&pixelBuffer[8] = v823;
                  do
                    v828 = __ldaxr(v824);
                  while (__stlxr(v828 - 1, v824));
                  if (!v828)
                  {
                    (*(void (**)(_QWORD))(**((_QWORD **)&v823 + 1) + 16))(*((_QWORD *)&v823 + 1));
                    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v823 + 1));
                  }
                  do
                    v829 = __ldaxr(v824);
                  while (__stlxr(v829 - 1, v824));
                  if (!v829)
                  {
                    (*(void (**)(_QWORD))(**((_QWORD **)&v823 + 1) + 16))(*((_QWORD *)&v823 + 1));
                    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v823 + 1));
                  }
                }
                else
                {
                  *(_QWORD *)&pixelBuffer[8] = *(_QWORD *)&v1301[8];
                  *(_QWORD *)&pixelBuffer[16] = 0;
                  *(_OWORD *)&pixelBuffer[24] = *(_OWORD *)&v1301[24];
                  *(_OWORD *)&pixelBuffer[40] = *(_OWORD *)&v1301[40];
                  v1223 = *(_OWORD *)&v1301[56];
                }
                LOBYTE(v1225) = 1;
                v822 = v1302;
LABEL_1376:
                if (v822)
                {
                  v873 = *(std::__shared_weak_count **)&v1301[16];
                  if (*(_QWORD *)&v1301[16])
                  {
                    v874 = (unint64_t *)(*(_QWORD *)&v1301[16] + 8);
                    do
                      v875 = __ldaxr(v874);
                    while (__stlxr(v875 - 1, v874));
                    if (!v875)
                    {
                      ((void (*)(std::__shared_weak_count *))v873->__on_zero_shared)(v873);
                      std::__shared_weak_count::__release_weak(v873);
                    }
                  }
                }
              }
LABEL_1382:
              if ((_BYTE)v1309)
              {
                v876 = *(std::__shared_weak_count **)&v1308[16];
                if (*(_QWORD *)&v1308[16])
                {
                  v877 = (unint64_t *)(*(_QWORD *)&v1308[16] + 8);
                  do
                    v878 = __ldaxr(v877);
                  while (__stlxr(v878 - 1, v877));
                  if (!v878)
                  {
                    ((void (*)(std::__shared_weak_count *))v876->__on_zero_shared)(v876);
                    std::__shared_weak_count::__release_weak(v876);
                  }
                }
              }
LABEL_1388:
              if ((_BYTE)v1262)
              {
                v879 = (std::__shared_weak_count *)*((_QWORD *)&v1258 + 1);
                if (*((_QWORD *)&v1258 + 1))
                {
                  v880 = (unint64_t *)(*((_QWORD *)&v1258 + 1) + 8);
                  do
                    v881 = __ldaxr(v880);
                  while (__stlxr(v881 - 1, v880));
                  if (!v881)
                  {
                    ((void (*)(std::__shared_weak_count *))v879->__on_zero_shared)(v879);
                    std::__shared_weak_count::__release_weak(v879);
                  }
                }
              }
              if ((_BYTE)v1225)
              {
                v1212.i64[0] = (uint64_t)&off_24CA82D28;
                v882 = *(_QWORD *)&pixelBuffer[8];
                v883 = *(std::__shared_weak_count **)&pixelBuffer[16];
                if (*(_QWORD *)&pixelBuffer[16])
                {
                  v884 = (unint64_t *)(*(_QWORD *)&pixelBuffer[16] + 8);
                  do
                    v885 = __ldxr(v884);
                  while (__stxr(v885 + 1, v884));
                  do
                    v886 = __ldxr(v884);
                  while (__stxr(v886 + 1, v884));
                  *(_OWORD *)&v1213[8] = *(_OWORD *)&pixelBuffer[24];
                  *(_OWORD *)&v1213[24] = *(_OWORD *)&pixelBuffer[40];
                  v1214 = v1223;
                  do
                    v887 = __ldxr(v884);
                  while (__stxr(v887 + 1, v884));
                  v1212.i64[1] = v882;
                  *(_QWORD *)v1213 = v883;
                  do
                    v888 = __ldaxr(v884);
                  while (__stlxr(v888 - 1, v884));
                  if (!v888)
                  {
                    ((void (*)(std::__shared_weak_count *))v883->__on_zero_shared)(v883);
                    std::__shared_weak_count::__release_weak(v883);
                  }
                  do
                    v889 = __ldaxr(v884);
                  while (__stlxr(v889 - 1, v884));
                  if (!v889)
                  {
                    ((void (*)(std::__shared_weak_count *))v883->__on_zero_shared)(v883);
                    std::__shared_weak_count::__release_weak(v883);
                  }
                  v890 = *(std::__shared_weak_count **)v1213;
                  v882 = v1212.i64[1];
                  if (*(_QWORD *)v1213)
                  {
                    v891 = (unint64_t *)(*(_QWORD *)v1213 + 8);
                    do
                      v892 = __ldxr(v891);
                    while (__stxr(v892 + 1, v891));
                    do
                      v893 = __ldaxr(v891);
                    while (__stlxr(v893 - 1, v891));
                    if (!v893)
                    {
                      ((void (*)(std::__shared_weak_count *))v890->__on_zero_shared)(v890);
                      std::__shared_weak_count::__release_weak(v890);
                    }
                  }
                }
                else
                {
                  v1212.i64[1] = *(_QWORD *)&pixelBuffer[8];
                  *(_QWORD *)v1213 = 0;
                  *(_OWORD *)&v1213[8] = *(_OWORD *)&pixelBuffer[24];
                  *(_OWORD *)&v1213[24] = *(_OWORD *)&pixelBuffer[40];
                  v1214 = v1223;
                }
                sub_2108D45A8(v882, v1308);
                if (*(_QWORD *)&v1308[8])
                {
                  v894 = **(_QWORD **)&v1308[8];
                  v895 = *(std::__shared_weak_count **)(*(_QWORD *)&v1308[8] + 8);
                  if (v895)
                  {
                    v896 = (unint64_t *)&v895->__shared_owners_;
                    do
                      v897 = __ldxr(v896);
                    while (__stxr(v897 + 1, v896));
                    *(_QWORD *)v1301 = v894;
                    *(_QWORD *)&v1301[8] = v895;
                    do
                      v898 = __ldxr(v896);
                    while (__stxr(v898 + 1, v896));
                    do
                      v899 = __ldaxr(v896);
                    while (__stlxr(v899 - 1, v896));
                    if (!v899)
                    {
                      ((void (*)(std::__shared_weak_count *))v895->__on_zero_shared)(v895);
                      std::__shared_weak_count::__release_weak(v895);
                    }
                    goto LABEL_1428;
                  }
                }
                else
                {
                  v894 = 0;
                }
                *(_OWORD *)v1301 = v894;
LABEL_1428:
                *(_QWORD *)v1308 = &off_24CA7D7F8;
                v900 = *(std::__shared_weak_count **)&v1308[16];
                if (*(_QWORD *)&v1308[16])
                {
                  v901 = (unint64_t *)(*(_QWORD *)&v1308[16] + 8);
                  do
                    v902 = __ldaxr(v901);
                  while (__stlxr(v902 - 1, v901));
                  if (!v902)
                  {
                    ((void (*)(std::__shared_weak_count *))v900->__on_zero_shared)(v900);
                    std::__shared_weak_count::__release_weak(v900);
                  }
                }
                if (!CVPixelBufferGetIOSurface(*(CVPixelBufferRef *)v1301)
                  && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoModelInstance.cpp", 525, (uint64_t)"CVPixelBufferGetIOSurface(ref)", 30, (uint64_t)"The input buffer is not IOSurface backed", 40, (void (*)(void **))sub_2109EDDB4))
                {
                  abort();
                }
                if (*v1179 && *v1180 == 1)
                  v903 = espresso_network_bind_direct_cvpixelbuffer();
                else
                  v903 = espresso_network_bind_input_cvpixelbuffer();
                sub_2109A63A0((uint64_t)&v1149, v1184, v903);
                v904 = *(std::__shared_weak_count **)&v1301[8];
                if (*(_QWORD *)&v1301[8])
                {
                  v905 = (unint64_t *)(*(_QWORD *)&v1301[8] + 8);
                  do
                    v906 = __ldaxr(v905);
                  while (__stlxr(v906 - 1, v905));
                  if (!v906)
                  {
                    ((void (*)(std::__shared_weak_count *))v904->__on_zero_shared)(v904);
                    std::__shared_weak_count::__release_weak(v904);
                  }
                }
                v907 = *(std::__shared_weak_count **)v1213;
                if (*(_QWORD *)v1213)
                {
                  v908 = (unint64_t *)(*(_QWORD *)v1213 + 8);
                  do
                    v909 = __ldaxr(v908);
                  while (__stlxr(v909 - 1, v908));
                  if (!v909)
                  {
                    ((void (*)(std::__shared_weak_count *))v907->__on_zero_shared)(v907);
                    std::__shared_weak_count::__release_weak(v907);
                  }
                }
                if (!(_BYTE)v1225)
                  goto LABEL_952;
                v151 = *(std::__shared_weak_count **)&pixelBuffer[16];
                if (!*(_QWORD *)&pixelBuffer[16])
                  goto LABEL_952;
                v910 = (unint64_t *)(*(_QWORD *)&pixelBuffer[16] + 8);
                do
                  v153 = __ldaxr(v910);
                while (__stlxr(v153 - 1, v910));
                goto LABEL_262;
              }
LABEL_1414:
              v116 = 25;
              v117 = v1060;
              v118 = *v1060;
              if (!*v1060)
                goto LABEL_305;
LABEL_460:
              v174 = v1193;
              v350 = v118;
              do
              {
                v351 = v350[4];
                if (v1193 >= v351)
                {
                  if (v351 >= v1193)
                  {
                    v382 = v1060;
                    goto LABEL_516;
                  }
                  ++v350;
                }
                v350 = (uint64_t *)*v350;
              }
              while (v350);
              while (1)
              {
                while (1)
                {
                  v117 = (uint64_t **)v118;
                  v352 = v118[4];
                  if (v1193 >= v352)
                    break;
                  v118 = *v117;
                  if (!*v117)
                    goto LABEL_306;
                }
                if (v352 >= v1193)
                  break;
                v118 = v117[1];
                if (!v118)
                {
                  v175 = v117 + 1;
                  goto LABEL_470;
                }
              }
              v353 = (unsigned __int8 *)v117;
LABEL_473:
              v356 = v353[112];
              v353[40] = 0;
              *(_OWORD *)(v353 + 41) = *(_OWORD *)v1308;
              *(_OWORD *)(v353 + 56) = *(_OWORD *)&v1308[15];
              v353[72] = 0;
              if (v356)
              {
                if (v353[104])
                {
                  *((_QWORD *)v353 + 10) = &off_24CA7D7F8;
                  v357 = (std::__shared_weak_count *)*((_QWORD *)v353 + 12);
                  if (v357)
                  {
                    v358 = (unint64_t *)&v357->__shared_owners_;
                    do
                      v359 = __ldaxr(v358);
                    while (__stlxr(v359 - 1, v358));
                    if (!v359)
                    {
                      ((void (*)(std::__shared_weak_count *))v357->__on_zero_shared)(v357);
                      std::__shared_weak_count::__release_weak(v357);
                    }
                  }
                  v353[104] = 0;
                }
              }
              else
              {
                *(_DWORD *)(v353 + 73) = *(_DWORD *)pixelBuffer;
                *((_DWORD *)v353 + 19) = *(_DWORD *)&pixelBuffer[3];
                v353[80] = 0;
                v353[104] = 0;
                v353[112] = 1;
              }
              v360 = (uint64_t *)v1060;
              v361 = *v1060;
              v362 = v1193;
              while (1)
              {
                v363 = (uint64_t **)v360;
                if (!v361)
                  goto LABEL_489;
                while (1)
                {
                  v360 = v361;
                  v364 = v361[4];
                  if (v1193 < v364)
                    break;
                  if (v364 >= v1193)
                  {
                    v365 = (char *)v360;
                    *(_OWORD *)(v360 + 5) = 0u;
                    v368 = (vImage_Buffer *)(v360 + 5);
                    v383 = *((unsigned __int8 *)v360 + 72);
                    *(_OWORD *)(v360 + 7) = 0u;
                    if (!v383)
                      goto LABEL_492;
                    goto LABEL_493;
                  }
                  v361 = (uint64_t *)v360[1];
                  if (!v361)
                  {
                    v363 = (uint64_t **)(v360 + 1);
LABEL_489:
                    v365 = (char *)operator new(0x78uLL);
                    *((_QWORD *)v365 + 4) = v362;
                    v365[40] = 0;
                    v365[112] = 0;
                    *(_QWORD *)v365 = 0;
                    *((_QWORD *)v365 + 1) = 0;
                    *((_QWORD *)v365 + 2) = v360;
                    *v363 = (uint64_t *)v365;
                    v366 = **(_QWORD **)(a2 + 104);
                    v367 = (uint64_t *)v365;
                    if (v366)
                    {
                      *(_QWORD *)(a2 + 104) = v366;
                      v367 = *v363;
                    }
                    sub_210911190(*(uint64_t **)(a2 + 112), v367);
                    ++*(_QWORD *)(a2 + 120);
                    *(_OWORD *)(v365 + 40) = 0u;
                    v368 = (vImage_Buffer *)(v365 + 40);
                    v369 = v365[72];
                    *(_OWORD *)(v365 + 56) = 0u;
                    if (!v369)
LABEL_492:
                      v365[72] = 1;
LABEL_493:
                    vImageBuffer_Init(v368, width.u32[2], width.u32[1], 8 * v64, 0x100u);
                    v370 = *(uint64_t **)(a2 + 112);
                    v371 = v1193;
                    v372 = (uint64_t *)v1060;
LABEL_495:
                    v373 = (uint64_t **)v372;
                    if (!v370)
                      goto LABEL_500;
                    while (1)
                    {
                      v372 = v370;
                      v374 = v370[4];
                      if (v1193 < v374)
                      {
                        v370 = (uint64_t *)*v372;
                        goto LABEL_495;
                      }
                      if (v374 >= v1193)
                        break;
                      v370 = (uint64_t *)v372[1];
                      if (!v370)
                      {
                        v373 = (uint64_t **)(v372 + 1);
LABEL_500:
                        v375 = (char *)operator new(0x78uLL);
                        *((_QWORD *)v375 + 4) = v371;
                        v375[40] = 0;
                        v375[112] = 0;
                        *(_QWORD *)v375 = 0;
                        *((_QWORD *)v375 + 1) = 0;
                        *((_QWORD *)v375 + 2) = v372;
                        *v373 = (uint64_t *)v375;
                        v376 = **(_QWORD **)(a2 + 104);
                        v377 = (uint64_t *)v375;
                        if (v376)
                        {
                          *(_QWORD *)(a2 + 104) = v376;
                          v377 = *v373;
                        }
                        sub_210911190(*(uint64_t **)(a2 + 112), v377);
                        ++*(_QWORD *)(a2 + 120);
                        v378 = v375 + 40;
                        if (v116 != 1)
                        {
LABEL_503:
                          if (v116 != 25)
                          {
                            if (v116 == 29)
                            {
                              v379 = v378[1];
                              *(_OWORD *)pixelBuffer = *v378;
                              *(_OWORD *)&pixelBuffer[16] = v379;
                              v380 = espresso_network_bind_input_vimagebuffer_rgba8();
                              goto LABEL_512;
                            }
                            v982 = 565;
                            v983 = "not supported";
                            v984 = 13;
LABEL_1664:
                            v1057 = v984;
                            v1058 = v983;
LABEL_1665:
                            sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoModelInstance.cpp", v982, (uint64_t)&unk_210A01421, 0, (uint64_t)v1058, v1057, (void (*)(void **))sub_2109EDDB4);
LABEL_1666:
                            abort();
                          }
                          v381 = v378[1];
                          *(_OWORD *)pixelBuffer = *v378;
                          *(_OWORD *)&pixelBuffer[16] = v381;
                          v380 = espresso_network_bind_input_vimagebuffer_bgra8();
LABEL_512:
                          if (v380)
                          {
                            sub_2109A63A0((uint64_t)&v1149, &v1185, v380);
                            goto LABEL_952;
                          }
                          v382 = v1060;
                          v118 = *v1060;
                          v174 = v1193;
LABEL_516:
                          v385 = v382;
                          if (v118)
                          {
                            while (1)
                            {
                              v382 = (uint64_t **)v118;
                              v386 = v118[4];
                              if (v174 < v386)
                              {
                                v118 = *v382;
                                goto LABEL_516;
                              }
                              if (v386 >= v174)
                                break;
                              v118 = v382[1];
                              if (!v118)
                              {
                                v385 = v382 + 1;
                                goto LABEL_521;
                              }
                            }
                            v387 = v382;
                          }
                          else
                          {
LABEL_521:
                            v387 = operator new(0x78uLL);
                            *((_QWORD *)v387 + 4) = v174;
                            *((_BYTE *)v387 + 40) = 0;
                            *((_BYTE *)v387 + 112) = 0;
                            *(_QWORD *)v387 = 0;
                            *((_QWORD *)v387 + 1) = 0;
                            *((_QWORD *)v387 + 2) = v382;
                            *v385 = (uint64_t *)v387;
                            v388 = **(_QWORD **)(a2 + 104);
                            v389 = (uint64_t *)v387;
                            if (v388)
                            {
                              *(_QWORD *)(a2 + 104) = v388;
                              v389 = *v385;
                            }
                            sub_210911190(*(uint64_t **)(a2 + 112), v389);
                            ++*(_QWORD *)(a2 + 120);
                          }
                          *(int64x2_t *)v1301 = width;
                          *(int64x2_t *)&v1301[16] = v1139;
                          *(int64x2_t *)&v1301[32] = v1140;
                          *(_DWORD *)&v1301[48] = v1141;
                          v1301[56] = 0;
                          LOBYTE(v1304) = 0;
                          if (v1148)
                          {
                            *(_QWORD *)&v1301[56] = &off_24CA79890;
                            if (*((_QWORD *)&v1142 + 1))
                            {
                              v397 = (unint64_t *)(*((_QWORD *)&v1142 + 1) + 8);
                              do
                                v398 = __ldxr(v397);
                              while (__stxr(v398 + 1, v397));
                              v399 = v1145;
                              v400 = v1146;
                              v401 = v1147;
                              do
                                v402 = __ldxr(v397);
                              while (__stxr(v402 + 1, v397));
                            }
                            else
                            {
                              v399 = v1145;
                              v400 = v1146;
                              v401 = v1147;
                            }
                            *(_OWORD *)&v1301[64] = v1142;
                            *(_QWORD *)&v1302 = v1143;
                            DWORD2(v1302) = v1144;
                            *(_QWORD *)&v1303 = v399;
                            DWORD2(v1303) = v400;
                            WORD6(v1303) = v401;
                            if (*((_QWORD *)&v1142 + 1))
                            {
                              v404 = (unint64_t *)(*((_QWORD *)&v1142 + 1) + 8);
                              do
                                v405 = __ldaxr(v404);
                              while (__stlxr(v405 - 1, v404));
                              if (!v405)
                              {
                                (*(void (**)(_QWORD))(**((_QWORD **)&v1142 + 1) + 16))(*((_QWORD *)&v1142 + 1));
                                std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v1142 + 1));
                                LOBYTE(v1304) = 1;
                                if (*((_BYTE *)v387 + 72))
                                  goto LABEL_556;
                                goto LABEL_946;
                              }
                            }
                            LOBYTE(v1304) = 1;
                            if (!*((_BYTE *)v387 + 72))
                              goto LABEL_946;
LABEL_556:
                            v406 = *(_QWORD *)&v1301[64];
                            if (!*(_QWORD *)&v1301[64])
                              goto LABEL_571;
                            v407 = *(std::__shared_weak_count **)&v1301[72];
                            if (*(_QWORD *)&v1301[72])
                            {
                              v408 = (unint64_t *)(*(_QWORD *)&v1301[72] + 8);
                              do
                                v409 = __ldxr(v408);
                              while (__stxr(v409 + 1, v408));
                              do
                                v410 = __ldaxr(v408);
                              while (__stlxr(v410 - 1, v408));
                              if (!v410)
                              {
                                ((void (*)(std::__shared_weak_count *))v407->__on_zero_shared)(v407);
                                std::__shared_weak_count::__release_weak(v407);
                              }
                              v411 = *(std::__shared_weak_count **)&v1301[72];
                              v406 = *(_QWORD *)&v1301[64];
                              if (*(_QWORD *)&v1301[72])
                              {
                                v412 = (unint64_t *)(*(_QWORD *)&v1301[72] + 8);
                                do
                                  v413 = __ldxr(v412);
                                while (__stxr(v413 + 1, v412));
                                do
                                  v414 = __ldaxr(v412);
                                while (__stlxr(v414 - 1, v412));
                                if (!v414)
                                {
                                  ((void (*)(std::__shared_weak_count *))v411->__on_zero_shared)(v411);
                                  std::__shared_weak_count::__release_weak(v411);
                                }
                              }
                            }
                            if (BYTE13(v1303))
                              (*(void (**)(_BYTE *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v406 + 96))(v1315, v406, 0);
                            else
LABEL_571:
                              *(_QWORD *)v1315 = 0;
                            *(_OWORD *)v1308 = *(_OWORD *)v1301;
                            *(_OWORD *)&v1308[16] = *(_OWORD *)&v1301[16];
                            *(_OWORD *)&v1308[32] = *(_OWORD *)&v1301[32];
                            *(_DWORD *)&v1308[48] = *(_DWORD *)&v1301[48];
                            v1308[56] = 0;
                            LOBYTE(v1311) = 0;
                            if ((_BYTE)v1304)
                            {
                              *(_QWORD *)&v1308[56] = &off_24CA79890;
                              v415 = *(_OWORD *)&v1301[64];
                              if (*(_QWORD *)&v1301[72])
                              {
                                v416 = (unint64_t *)(*(_QWORD *)&v1301[72] + 8);
                                do
                                  v417 = __ldxr(v416);
                                while (__stxr(v417 + 1, v416));
                                v418 = v1303;
                                v419 = DWORD2(v1303);
                                v420 = WORD6(v1303);
                                do
                                  v421 = __ldxr(v416);
                                while (__stxr(v421 + 1, v416));
                              }
                              else
                              {
                                v418 = v1303;
                                v419 = DWORD2(v1303);
                                v420 = WORD6(v1303);
                              }
                              *(_OWORD *)&v1308[64] = v415;
                              *(_QWORD *)&v1309 = v1302;
                              DWORD2(v1309) = DWORD2(v1302);
                              *(_QWORD *)&v1310 = v418;
                              DWORD2(v1310) = v419;
                              WORD6(v1310) = v420;
                              if (*((_QWORD *)&v415 + 1))
                              {
                                v677 = (unint64_t *)(*((_QWORD *)&v415 + 1) + 8);
                                do
                                  v678 = __ldaxr(v677);
                                while (__stlxr(v678 - 1, v677));
                                if (!v678)
                                {
                                  (*(void (**)(_QWORD))(**((_QWORD **)&v415 + 1) + 16))(*((_QWORD *)&v415 + 1));
                                  std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v415 + 1));
                                }
                              }
                              v403 = 1;
LABEL_936:
                              LOBYTE(v1311) = v403;
                            }
                            sub_2109A98B8((char **)v387 + 5, (uint64_t)v1308);
                            if ((_BYTE)v1311)
                            {
                              v679 = *(std::__shared_weak_count **)&v1308[72];
                              if (*(_QWORD *)&v1308[72])
                              {
                                v680 = (unint64_t *)(*(_QWORD *)&v1308[72] + 8);
                                do
                                  v681 = __ldaxr(v680);
                                while (__stlxr(v681 - 1, v680));
                                if (!v681)
                                {
                                  ((void (*)(std::__shared_weak_count *))v679->__on_zero_shared)(v679);
                                  std::__shared_weak_count::__release_weak(v679);
                                }
                              }
                            }
                            v682 = *(_QWORD *)v1315;
                            *(_QWORD *)v1315 = 0;
                            if (v682)
                              (*(void (**)(uint64_t))(*(_QWORD *)v682 + 8))(v682);
                            if ((_BYTE)v1304)
                            {
LABEL_946:
                              v683 = *(std::__shared_weak_count **)&v1301[72];
                              if (*(_QWORD *)&v1301[72])
                              {
                                v684 = (unint64_t *)(*(_QWORD *)&v1301[72] + 8);
                                do
                                  v685 = __ldaxr(v684);
                                while (__stlxr(v685 - 1, v684));
                                if (!v685)
                                {
                                  ((void (*)(std::__shared_weak_count *))v683->__on_zero_shared)(v683);
                                  std::__shared_weak_count::__release_weak(v683);
                                }
                              }
                            }
                          }
                          else if (*((_BYTE *)v387 + 72))
                          {
                            v403 = 0;
                            *(_QWORD *)v1315 = 0;
                            *(int64x2_t *)v1308 = width;
                            *(int64x2_t *)&v1308[16] = v1139;
                            *(int64x2_t *)&v1308[32] = v1140;
                            *(_DWORD *)&v1308[48] = v1141;
                            v1308[56] = 0;
                            goto LABEL_936;
                          }
                          v1149 = &off_24CA79A00;
                          v1150 = 0;
                          v686 = (_BYTE *)operator new();
                          v686[23] = 0;
                          *v686 = 0;
                          v1151 = v686;
                          v687 = (std::__shared_weak_count *)operator new();
                          v687->__vftable = (std::__shared_weak_count_vtbl *)&unk_24CA7A1D8;
                          v687->__shared_owners_ = 0;
                          v687->__shared_weak_owners_ = 0;
                          v687[1].__vftable = (std::__shared_weak_count_vtbl *)v686;
                          v1152 = v687;
LABEL_952:
                          if (SHIBYTE(v1192) < 0)
                          {
                            operator delete(__p[0]);
                            *(_BYTE *)(a1 + 8) = v1150;
                            v688 = v1151;
                            v689 = v1152;
                            if (v1152)
                              goto LABEL_956;
                          }
                          else
                          {
                            *(_BYTE *)(a1 + 8) = v1150;
                            v688 = v1151;
                            v689 = v1152;
                            if (!v1152)
                              goto LABEL_958;
LABEL_956:
                            v690 = (unint64_t *)&v689->__shared_owners_;
                            do
                              v691 = __ldxr(v690);
                            while (__stxr(v691 + 1, v690));
                          }
LABEL_958:
                          v692 = *(std::__shared_weak_count **)(a1 + 24);
                          *(_QWORD *)(a1 + 16) = v688;
                          *(_QWORD *)(a1 + 24) = v689;
                          if (!v692)
                            goto LABEL_962;
                          v693 = (unint64_t *)&v692->__shared_owners_;
                          do
                            v694 = __ldaxr(v693);
                          while (__stlxr(v694 - 1, v693));
                          if (!v694)
                          {
                            ((void (*)(std::__shared_weak_count *))v692->__on_zero_shared)(v692);
                            std::__shared_weak_count::__release_weak(v692);
                            v1149 = &off_24CA79A00;
                            v695 = v1152;
                            if (v1152)
                            {
LABEL_963:
                              v696 = (unint64_t *)&v695->__shared_owners_;
                              do
                                v697 = __ldaxr(v696);
                              while (__stlxr(v697 - 1, v696));
                              if (!v697)
                              {
                                ((void (*)(std::__shared_weak_count *))v695->__on_zero_shared)(v695);
                                std::__shared_weak_count::__release_weak(v695);
                              }
                            }
                          }
                          else
                          {
LABEL_962:
                            v1149 = &off_24CA79A00;
                            v695 = v1152;
                            if (v1152)
                              goto LABEL_963;
                          }
                          if (v1148)
                          {
                            v698 = (std::__shared_weak_count *)*((_QWORD *)&v1142 + 1);
                            if (*((_QWORD *)&v1142 + 1))
                            {
                              v699 = (unint64_t *)(*((_QWORD *)&v1142 + 1) + 8);
                              do
                                v700 = __ldaxr(v699);
                              while (__stlxr(v700 - 1, v699));
                              goto LABEL_1519;
                            }
                          }
                          goto LABEL_1520;
                        }
LABEL_511:
                        v384 = v378[1];
                        *(_OWORD *)pixelBuffer = *v378;
                        *(_OWORD *)&pixelBuffer[16] = v384;
                        v380 = espresso_network_bind_input_vimagebuffer_planar8();
                        goto LABEL_512;
                      }
                    }
                    v378 = v372 + 5;
                    if (v116 != 1)
                      goto LABEL_503;
                    goto LABEL_511;
                  }
                }
                v361 = (uint64_t *)*v360;
              }
            }
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            v986 = atomic_load((unsigned __int8 *)&qword_254A75D80);
            if ((v986 & 1) != 0 || !__cxa_guard_acquire(&qword_254A75D80))
            {
LABEL_1669:
              v987 = sub_210994208();
              *(_QWORD *)v1315 = "Attempting to create an ";
              *(_QWORD *)&v1315[8] = 24;
              v988 = &qword_254A75D90;
              v989 = byte_254A75DA7;
              if (byte_254A75DA7 < 0)
              {
                v989 = unk_254A75D98;
                v988 = (uint64_t *)qword_254A75D90;
              }
              *(_QWORD *)&v1315[16] = v988;
              *(_QWORD *)&v1315[24] = v989;
              *(_QWORD *)&v1315[32] = " from an ";
              *(_QWORD *)&v1315[40] = 9;
              v990 = HIBYTE(v987->__r_.__value_.__r.__words[2]);
              if ((v990 & 0x80u) == 0)
                v991 = v987;
              else
                v991 = (std::string *)v987->__r_.__value_.__r.__words[0];
              if ((v990 & 0x80u) != 0)
                v990 = v987->__r_.__value_.__l.__size_;
              *(_QWORD *)&v1315[48] = v991;
              v1316 = v990;
              sub_2108BBA08((uint64_t)v1315, (uint64_t)&v1317, 0, 0, &v1299);
              v992 = *(_QWORD *)&v1308[8];
              if (*(_QWORD *)&v1308[8])
              {
                v1007 = *(std::__shared_weak_count **)&v1308[16];
                if (*(_QWORD *)&v1308[16])
                {
                  v1008 = (unint64_t *)(*(_QWORD *)&v1308[16] + 8);
                  do
                    v1009 = __ldxr(v1008);
                  while (__stxr(v1009 + 1, v1008));
                  do
                    v1010 = __ldaxr(v1008);
                  while (__stlxr(v1010 - 1, v1008));
                  if (!v1010)
                  {
                    ((void (*)(std::__shared_weak_count *))v1007->__on_zero_shared)(v1007);
                    std::__shared_weak_count::__release_weak(v1007);
                  }
                  v1011 = *(std::__shared_weak_count **)&v1308[16];
                  v992 = *(_QWORD *)&v1308[8];
                  if (*(_QWORD *)&v1308[16])
                  {
                    v1012 = (unint64_t *)(*(_QWORD *)&v1308[16] + 8);
                    do
                      v1013 = __ldxr(v1012);
                    while (__stxr(v1013 + 1, v1012));
                    do
                      v1014 = __ldaxr(v1012);
                    while (__stlxr(v1014 - 1, v1012));
                    if (!v1014)
                    {
                      ((void (*)(std::__shared_weak_count *))v1011->__on_zero_shared)(v1011);
                      std::__shared_weak_count::__release_weak(v1011);
                    }
                  }
                }
                v1015 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v992 + 80))(v992);
                v1017 = HIBYTE(v1299.__r_.__value_.__r.__words[2]);
                v1018 = &v1299;
                if ((v1299.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                {
                  v1017 = v1299.__r_.__value_.__l.__size_;
                  v1018 = (std::string *)v1299.__r_.__value_.__r.__words[0];
                }
                *(_QWORD *)v1315 = v1018;
                *(_QWORD *)&v1315[8] = v1017;
                *(_QWORD *)&v1315[16] = " but the other image contains an incompatible buffer type ";
                *(_QWORD *)&v1315[24] = 58;
                *(_QWORD *)&v1315[32] = v1015;
                *(_QWORD *)&v1315[40] = v1016;
                sub_2108BBA08((uint64_t)v1315, (uint64_t)&v1315[48], 0, 0, &v1298);
                LOBYTE(v993) = *((_BYTE *)&v1299.__r_.__value_.__s + 23);
LABEL_1748:
                if ((v993 & 0x80) != 0)
                  operator delete(v1299.__r_.__value_.__l.__data_);
                std::logic_error::logic_error(exception, &v1298);
                exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
                __cxa_throw(exception, (struct type_info *)off_24CA79220, MEMORY[0x24BEDAB88]);
              }
              v993 = SHIBYTE(v1299.__r_.__value_.__r.__words[2]);
              if ((v1299.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v994 = HIBYTE(v1299.__r_.__value_.__r.__words[2]);
              else
                v994 = v1299.__r_.__value_.__l.__size_;
              v995 = v994 + 46;
              if (v994 + 46 > 0x7FFFFFFFFFFFFFF7)
                sub_2108A4B7C();
              if (v995 > 0x16)
              {
                v1034 = (v995 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v995 | 7) != 0x17)
                  v1034 = v995 | 7;
                v1035 = v1034 + 1;
                v1031 = operator new(v1034 + 1);
                v1298.__r_.__value_.__r.__words[2] = v1035 | 0x8000000000000000;
                v1298.__r_.__value_.__r.__words[0] = (std::string::size_type)v1031;
                v1298.__r_.__value_.__l.__size_ = v994 + 46;
                if (!v994)
                  goto LABEL_1747;
              }
              else
              {
                memset(&v1298, 0, sizeof(v1298));
                v1031 = &v1298;
                *((_BYTE *)&v1298.__r_.__value_.__s + 23) = v994 + 46;
              }
              if (v993 >= 0)
                v1036 = &v1299;
              else
                v1036 = (std::string *)v1299.__r_.__value_.__r.__words[0];
              memmove(v1031, v1036, v994);
LABEL_1747:
              strcpy((char *)v1031 + v994, " but the other image does not contain a buffer");
              goto LABEL_1748;
            }
            v1295[23] = 14;
            strcpy(v1295, "ConstImageView");
            v1039 = sub_2108F3508();
            if (SHIBYTE(v1039->__r_.__value_.__r.__words[2]) < 0)
            {
              sub_2108B314C(__dst, v1039->__r_.__value_.__l.__data_, v1039->__r_.__value_.__l.__size_);
            }
            else
            {
              v1041 = *(_OWORD *)&v1039->__r_.__value_.__l.__data_;
              *(_QWORD *)v1170 = *((_QWORD *)&v1039->__r_.__value_.__l + 2);
              *(_OWORD *)__dst = v1041;
            }
            sub_2109ECDA0((std::string *)__dst, "cv3d::kit::img::", 16, (const std::string::value_type *)&unk_210A01421, 0, 1, 1, (uint64_t)v1315);
            if ((v1170[7] & 0x80000000) != 0)
              operator delete(__dst[0]);
            v1042 = sub_2108BBE28();
            if (*((char *)v1042 + 23) < 0)
            {
              sub_2108B314C(__dst, *(void **)v1042, *((_QWORD *)v1042 + 1));
            }
            else
            {
              v1045 = *v1042;
              *(_QWORD *)v1170 = *((_QWORD *)v1042 + 2);
              *(_OWORD *)__dst = v1045;
            }
            sub_2109ECDA0((std::string *)__dst, "cv3d::kit::img::", 16, (const std::string::value_type *)&unk_210A01421, 0, 1, 1, (uint64_t)&v1315[24]);
            if ((v1170[7] & 0x80000000) != 0)
              operator delete(__dst[0]);
            sub_2108B9228(&__s, (uint64_t)v1315, 2uLL);
            sub_2109ED500(v1295, (uint64_t *)&__s, (std::string *)&qword_254A75D90, v1046, v1047);
            v1048 = __s.__r_.__value_.__r.__words[0];
            if (__s.__r_.__value_.__r.__words[0])
            {
              v1053 = __s.__r_.__value_.__l.__size_;
              v1054 = (void *)__s.__r_.__value_.__r.__words[0];
              if (__s.__r_.__value_.__l.__size_ != __s.__r_.__value_.__r.__words[0])
              {
                do
                {
                  if (*(char *)(v1053 - 1) < 0)
                    operator delete(*(void **)(v1053 - 24));
                  v1053 -= 24;
                }
                while (v1053 != v1048);
                v1054 = (void *)__s.__r_.__value_.__r.__words[0];
              }
              __s.__r_.__value_.__l.__size_ = v1048;
              operator delete(v1054);
              if ((v1315[47] & 0x80000000) != 0)
              {
LABEL_1776:
                operator delete(*(void **)&v1315[24]);
                if ((v1315[23] & 0x80000000) == 0)
                  goto LABEL_1777;
                goto LABEL_1802;
              }
            }
            else if ((v1315[47] & 0x80000000) != 0)
            {
              goto LABEL_1776;
            }
            if ((v1315[23] & 0x80000000) == 0)
            {
LABEL_1777:
              if ((v1295[23] & 0x80000000) == 0)
              {
LABEL_1779:
                __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A75D90, &dword_21089F000);
                __cxa_guard_release(&qword_254A75D80);
                goto LABEL_1669;
              }
LABEL_1778:
              operator delete(*(void **)v1295);
              goto LABEL_1779;
            }
LABEL_1802:
            operator delete(*(void **)v1315);
            if ((v1295[23] & 0x80000000) == 0)
              goto LABEL_1779;
            goto LABEL_1778;
          }
          v116 = 29;
          v117 = v1060;
          v118 = *v1060;
          if (*v1060)
            goto LABEL_460;
LABEL_305:
          v174 = v1193;
LABEL_306:
          v175 = v117;
LABEL_470:
          v353 = (unsigned __int8 *)operator new(0x78uLL);
          *((_QWORD *)v353 + 4) = v174;
          v353[40] = 0;
          v353[112] = 0;
          *(_QWORD *)v353 = 0;
          *((_QWORD *)v353 + 1) = 0;
          *((_QWORD *)v353 + 2) = v117;
          *v175 = (uint64_t *)v353;
          v354 = **(_QWORD **)(a2 + 104);
          v355 = (uint64_t *)v353;
          if (v354)
          {
            *(_QWORD *)(a2 + 104) = v354;
            v355 = *v175;
          }
          sub_210911190(*(uint64_t **)(a2 + 112), v355);
          ++*(_QWORD *)(a2 + 120);
          goto LABEL_473;
        }
        if (width.i32[3] != 1
          && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoModelInstance.cpp", 614, (uint64_t)"input.Planes() == 1", 19, (uint64_t)"Espresso execution with 1 non-float color component but multiple channels not yet implemented. Use interleaved (RGBA/BGRA) images instead", 137, (void (*)(void **))sub_2109EDDB4))
        {
          goto LABEL_1666;
        }
        v1231 = width;
        v1232 = v1139;
        v1233 = v1140;
        v1234 = v1141;
        LOBYTE(v1235) = 0;
        v1242 = 0;
        if (v1148)
        {
          v1235 = &off_24CA79890;
          if (*((_QWORD *)&v1142 + 1))
          {
            v80 = (unint64_t *)(*((_QWORD *)&v1142 + 1) + 8);
            do
              v81 = __ldxr(v80);
            while (__stxr(v81 + 1, v80));
            v82 = v1145;
            v83 = v1146;
            v84 = v1147;
            do
              v85 = __ldxr(v80);
            while (__stxr(v85 + 1, v80));
          }
          else
          {
            v82 = v1145;
            v83 = v1146;
            v84 = v1147;
          }
          v1236 = v1142;
          v1237 = v1143;
          v1238 = v1144;
          v1239 = v82;
          v1240 = v83;
          v1241 = v84;
          if (*((_QWORD *)&v1142 + 1))
          {
            v119 = (unint64_t *)(*((_QWORD *)&v1142 + 1) + 8);
            do
              v120 = __ldaxr(v119);
            while (__stlxr(v120 - 1, v119));
            if (!v120)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)&v1142 + 1) + 16))(*((_QWORD *)&v1142 + 1));
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v1142 + 1));
            }
          }
          v1242 = 1;
        }
        sub_2108B82CC((uint64_t)&v1231, (uint64_t)v1308);
        if (!v1242)
          goto LABEL_205;
        v121 = (std::__shared_weak_count *)*((_QWORD *)&v1236 + 1);
        if (!*((_QWORD *)&v1236 + 1))
          goto LABEL_205;
        v122 = (unint64_t *)(*((_QWORD *)&v1236 + 1) + 8);
        do
          v123 = __ldaxr(v122);
        while (__stlxr(v123 - 1, v122));
        if (!v123)
        {
          ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
          std::__shared_weak_count::__release_weak(v121);
          if ((_BYTE)v1309)
            goto LABEL_206;
        }
        else
        {
LABEL_205:
          if ((_BYTE)v1309)
          {
LABEL_206:
            v1194.i64[0] = (uint64_t)&off_24CA79F60;
            v125 = *(std::__shared_weak_count **)&v1308[16];
            v124 = *(_QWORD *)&v1308[8];
            if (*(_QWORD *)&v1308[16])
            {
              v126 = (unint64_t *)(*(_QWORD *)&v1308[16] + 8);
              do
                v127 = __ldxr(v126);
              while (__stxr(v127 + 1, v126));
              do
                v128 = __ldxr(v126);
              while (__stxr(v128 + 1, v126));
              *(_OWORD *)&v1195[8] = *(_OWORD *)&v1308[24];
              *(_OWORD *)&v1195[24] = *(_OWORD *)&v1308[40];
              *(_OWORD *)v1196 = *(_OWORD *)&v1308[56];
              do
                v129 = __ldxr(v126);
              while (__stxr(v129 + 1, v126));
              v1194.i64[1] = v124;
              *(_QWORD *)v1195 = v125;
              do
                v130 = __ldaxr(v126);
              while (__stlxr(v130 - 1, v126));
              if (!v130)
              {
                ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
                std::__shared_weak_count::__release_weak(v125);
              }
              do
                v131 = __ldaxr(v126);
              while (__stlxr(v131 - 1, v126));
              if (!v131)
              {
                ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
                std::__shared_weak_count::__release_weak(v125);
              }
              v125 = *(std::__shared_weak_count **)v1195;
            }
            else
            {
              v1194.i64[1] = *(_QWORD *)&v1308[8];
              *(_QWORD *)v1195 = 0;
              *(_OWORD *)&v1195[8] = *(_OWORD *)&v1308[24];
              *(_OWORD *)&v1195[24] = *(_OWORD *)&v1308[40];
              *(_OWORD *)v1196 = *(_OWORD *)&v1308[56];
            }
            sub_2109A60B0((uint64_t)&v1149, (uint64_t)&v1179, v1194.i64[1], v125);
            if (v125)
            {
              v149 = (unint64_t *)&v125->__shared_owners_;
              do
                v150 = __ldaxr(v149);
              while (__stlxr(v150 - 1, v149));
              if (!v150)
              {
                ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
                std::__shared_weak_count::__release_weak(v125);
              }
            }
            if (!(_BYTE)v1309)
              goto LABEL_952;
            v151 = *(std::__shared_weak_count **)&v1308[16];
            if (!*(_QWORD *)&v1308[16])
              goto LABEL_952;
            v152 = (unint64_t *)(*(_QWORD *)&v1308[16] + 8);
            do
              v153 = __ldaxr(v152);
            while (__stlxr(v153 - 1, v152));
LABEL_262:
            if (!v153)
            {
              ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
              std::__shared_weak_count::__release_weak(v151);
            }
            goto LABEL_952;
          }
        }
        v116 = 5;
        v117 = v1060;
        v118 = *v1060;
        if (*v1060)
          goto LABEL_460;
        goto LABEL_305;
      }
      if (width.i32[3] != 1
        && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoModelInstance.cpp", 598, (uint64_t)"input.Planes() == 1", 19, (uint64_t)"Espresso execution with 1 non-float color component but multiple channels not yet implemented. Use interleaved (RGBA/BGRA) images instead", 137, (void (*)(void **))sub_2109EDDB4))
      {
        goto LABEL_1666;
      }
      v1282 = width;
      v1283 = v1139;
      v1284 = v1140;
      v1285 = v1141;
      LOBYTE(v1286) = 0;
      v1293 = 0;
      if (v1148)
      {
        v1286 = &off_24CA79890;
        if (*((_QWORD *)&v1142 + 1))
        {
          v86 = (unint64_t *)(*((_QWORD *)&v1142 + 1) + 8);
          do
            v87 = __ldxr(v86);
          while (__stxr(v87 + 1, v86));
          v88 = v1145;
          v89 = v1146;
          v90 = v1147;
          do
            v91 = __ldxr(v86);
          while (__stxr(v91 + 1, v86));
        }
        else
        {
          v88 = v1145;
          v89 = v1146;
          v90 = v1147;
        }
        v1287 = v1142;
        v1288 = v1143;
        v1289 = v1144;
        v1290 = v88;
        v1291 = v89;
        v1292 = v90;
        if (*((_QWORD *)&v1142 + 1))
        {
          v132 = (unint64_t *)(*((_QWORD *)&v1142 + 1) + 8);
          do
            v133 = __ldaxr(v132);
          while (__stlxr(v133 - 1, v132));
          if (!v133)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v1142 + 1) + 16))(*((_QWORD *)&v1142 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v1142 + 1));
          }
        }
        v1293 = 1;
      }
      sub_2108B7C28((uint64_t)&v1282, (uint64_t)__src);
      if (!v1293)
        goto LABEL_232;
      v134 = (std::__shared_weak_count *)*((_QWORD *)&v1287 + 1);
      if (!*((_QWORD *)&v1287 + 1))
        goto LABEL_232;
      v135 = (unint64_t *)(*((_QWORD *)&v1287 + 1) + 8);
      do
        v136 = __ldaxr(v135);
      while (__stlxr(v136 - 1, v135));
      if (!v136)
      {
        ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
        std::__shared_weak_count::__release_weak(v134);
        if (v1178)
        {
LABEL_233:
          *(_QWORD *)&v1173 = &off_24CA79CF0;
          v137 = *(_QWORD *)&__src[8];
          v138 = *(std::__shared_weak_count **)&__src[16];
          if (*(_QWORD *)&__src[16])
          {
            v139 = (unint64_t *)(*(_QWORD *)&__src[16] + 8);
            do
              v140 = __ldxr(v139);
            while (__stxr(v140 + 1, v139));
            do
              v141 = __ldxr(v139);
            while (__stxr(v141 + 1, v139));
            *(_OWORD *)&v1174[8] = *(_OWORD *)&__src[24];
            v1175 = *(_QWORD *)&__src[40];
            do
              v142 = __ldxr(v139);
            while (__stxr(v142 + 1, v139));
            *((_QWORD *)&v1173 + 1) = v137;
            *(_QWORD *)v1174 = v138;
            do
              v143 = __ldaxr(v139);
            while (__stlxr(v143 - 1, v139));
            if (!v143)
            {
              ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
              std::__shared_weak_count::__release_weak(v138);
            }
            do
              v144 = __ldaxr(v139);
            while (__stlxr(v144 - 1, v139));
            if (!v144)
            {
              ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
              std::__shared_weak_count::__release_weak(v138);
            }
            v145 = *(std::__shared_weak_count **)v1174;
            v137 = *((_QWORD *)&v1173 + 1);
            if (*(_QWORD *)v1174)
            {
              v146 = (unint64_t *)(*(_QWORD *)v1174 + 8);
              do
                v147 = __ldxr(v146);
              while (__stxr(v147 + 1, v146));
              do
                v148 = __ldaxr(v146);
              while (__stlxr(v148 - 1, v146));
              if (!v148)
              {
                ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
                std::__shared_weak_count::__release_weak(v145);
              }
            }
          }
          else
          {
            *((_QWORD *)&v1173 + 1) = *(_QWORD *)&__src[8];
            *(_QWORD *)v1174 = 0;
            *(_OWORD *)&v1174[8] = *(_OWORD *)&__src[24];
            v1175 = *(_QWORD *)&__src[40];
          }
          sub_2108D08F4(v137, v1308);
          if (*(_QWORD *)&v1308[8])
          {
            v154 = **(_QWORD **)&v1308[8];
            v155 = *(std::__shared_weak_count **)(*(_QWORD *)&v1308[8] + 8);
            if (v155)
            {
              v156 = (unint64_t *)&v155->__shared_owners_;
              do
                v157 = __ldxr(v156);
              while (__stxr(v157 + 1, v156));
              *(_QWORD *)v1301 = v154;
              *(_QWORD *)&v1301[8] = v155;
              do
                v158 = __ldxr(v156);
              while (__stxr(v158 + 1, v156));
              do
                v159 = __ldaxr(v156);
              while (__stlxr(v159 - 1, v156));
              if (!v159)
              {
                ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
                std::__shared_weak_count::__release_weak(v155);
              }
              goto LABEL_276;
            }
          }
          else
          {
            v154 = 0;
          }
          *(_OWORD *)v1301 = v154;
LABEL_276:
          *(_QWORD *)v1308 = &off_24CA7D7F8;
          v160 = *(std::__shared_weak_count **)&v1308[16];
          if (*(_QWORD *)&v1308[16])
          {
            v161 = (unint64_t *)(*(_QWORD *)&v1308[16] + 8);
            do
              v162 = __ldaxr(v161);
            while (__stlxr(v162 - 1, v161));
            if (!v162)
            {
              ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
              std::__shared_weak_count::__release_weak(v160);
            }
          }
          if (!CVPixelBufferGetIOSurface(*(CVPixelBufferRef *)v1301)
            && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoModelInstance.cpp", 525, (uint64_t)"CVPixelBufferGetIOSurface(ref)", 30, (uint64_t)"The input buffer is not IOSurface backed", 40, (void (*)(void **))sub_2109EDDB4))
          {
            abort();
          }
          if (*v1179 && *v1180 == 1)
            v163 = espresso_network_bind_direct_cvpixelbuffer();
          else
            v163 = espresso_network_bind_input_cvpixelbuffer();
          sub_2109A63A0((uint64_t)&v1149, v1184, v163);
          v164 = *(std::__shared_weak_count **)&v1301[8];
          if (*(_QWORD *)&v1301[8])
          {
            v165 = (unint64_t *)(*(_QWORD *)&v1301[8] + 8);
            do
              v166 = __ldaxr(v165);
            while (__stlxr(v166 - 1, v165));
            if (!v166)
            {
              ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
              std::__shared_weak_count::__release_weak(v164);
            }
          }
          v167 = *(std::__shared_weak_count **)v1174;
          if (*(_QWORD *)v1174)
          {
            v168 = (unint64_t *)(*(_QWORD *)v1174 + 8);
            do
              v169 = __ldaxr(v168);
            while (__stlxr(v169 - 1, v168));
            if (!v169)
            {
              ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
              std::__shared_weak_count::__release_weak(v167);
            }
          }
          v170 = 1;
          goto LABEL_298;
        }
      }
      else
      {
LABEL_232:
        if (v1178)
          goto LABEL_233;
      }
      v1269 = width;
      v1270 = v1139;
      v1271 = v1140;
      v1272 = v1141;
      LOBYTE(v1273) = 0;
      v1280 = 0;
      if (v1148)
      {
        v1273 = &off_24CA79890;
        if (*((_QWORD *)&v1142 + 1))
        {
          v390 = (unint64_t *)(*((_QWORD *)&v1142 + 1) + 8);
          do
            v391 = __ldxr(v390);
          while (__stxr(v391 + 1, v390));
          v392 = v1145;
          v393 = v1146;
          v394 = v1147;
          do
            v395 = __ldxr(v390);
          while (__stxr(v395 + 1, v390));
        }
        else
        {
          v392 = v1145;
          v393 = v1146;
          v394 = v1147;
        }
        v1274 = v1142;
        v1275 = v1143;
        v1276 = v1144;
        v1277 = v392;
        v1278 = v393;
        v1279 = v394;
        if (*((_QWORD *)&v1142 + 1))
        {
          v650 = (unint64_t *)(*((_QWORD *)&v1142 + 1) + 8);
          do
            v651 = __ldaxr(v650);
          while (__stlxr(v651 - 1, v650));
          if (!v651)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v1142 + 1) + 16))(*((_QWORD *)&v1142 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v1142 + 1));
          }
        }
        v1280 = 1;
      }
      sub_2108B82CC((uint64_t)&v1269, (uint64_t)v1308);
      if (v1280)
      {
        v652 = (std::__shared_weak_count *)*((_QWORD *)&v1274 + 1);
        if (*((_QWORD *)&v1274 + 1))
        {
          v653 = (unint64_t *)(*((_QWORD *)&v1274 + 1) + 8);
          do
            v654 = __ldaxr(v653);
          while (__stlxr(v654 - 1, v653));
          if (!v654)
          {
            ((void (*)(std::__shared_weak_count *))v652->__on_zero_shared)(v652);
            std::__shared_weak_count::__release_weak(v652);
          }
        }
      }
      if ((_BYTE)v1309)
      {
        v1203.i64[0] = (uint64_t)&off_24CA79F60;
        v656 = *(std::__shared_weak_count **)&v1308[16];
        v655 = *(_QWORD *)&v1308[8];
        if (*(_QWORD *)&v1308[16])
        {
          v657 = (unint64_t *)(*(_QWORD *)&v1308[16] + 8);
          do
            v658 = __ldxr(v657);
          while (__stxr(v658 + 1, v657));
          do
            v659 = __ldxr(v657);
          while (__stxr(v659 + 1, v657));
          *(_OWORD *)&v1204[8] = *(_OWORD *)&v1308[24];
          *(_OWORD *)&v1204[24] = *(_OWORD *)&v1308[40];
          *(_OWORD *)v1205 = *(_OWORD *)&v1308[56];
          do
            v660 = __ldxr(v657);
          while (__stxr(v660 + 1, v657));
          v1203.i64[1] = v655;
          *(_QWORD *)v1204 = v656;
          do
            v661 = __ldaxr(v657);
          while (__stlxr(v661 - 1, v657));
          if (!v661)
          {
            ((void (*)(std::__shared_weak_count *))v656->__on_zero_shared)(v656);
            std::__shared_weak_count::__release_weak(v656);
          }
          do
            v662 = __ldaxr(v657);
          while (__stlxr(v662 - 1, v657));
          if (!v662)
          {
            ((void (*)(std::__shared_weak_count *))v656->__on_zero_shared)(v656);
            std::__shared_weak_count::__release_weak(v656);
          }
          v656 = *(std::__shared_weak_count **)v1204;
        }
        else
        {
          v1203.i64[1] = *(_QWORD *)&v1308[8];
          *(_QWORD *)v1204 = 0;
          *(_OWORD *)&v1204[8] = *(_OWORD *)&v1308[24];
          *(_OWORD *)&v1204[24] = *(_OWORD *)&v1308[40];
          *(_OWORD *)v1205 = *(_OWORD *)&v1308[56];
        }
        sub_2109A60B0((uint64_t)&v1149, (uint64_t)&v1179, v1203.i64[1], v656);
        if (v656)
        {
          v669 = (unint64_t *)&v656->__shared_owners_;
          do
            v670 = __ldaxr(v669);
          while (__stlxr(v670 - 1, v669));
          if (!v670)
          {
LABEL_911:
            ((void (*)(std::__shared_weak_count *))v656->__on_zero_shared)(v656);
            std::__shared_weak_count::__release_weak(v656);
          }
        }
LABEL_1630:
        v170 = 1;
        if (!(_BYTE)v1309)
          goto LABEL_298;
        goto LABEL_1631;
      }
      v1243 = width;
      v1244 = v1139;
      v1245 = v1140;
      v1246 = v1141;
      LOBYTE(v1247) = 0;
      v1254 = 0;
      if (!v1148)
        goto LABEL_1590;
      v1247 = &off_24CA79890;
      if (*((_QWORD *)&v1142 + 1))
      {
        v663 = (unint64_t *)(*((_QWORD *)&v1142 + 1) + 8);
        do
          v664 = __ldxr(v663);
        while (__stxr(v664 + 1, v663));
        v665 = v1145;
        v666 = v1146;
        v667 = v1147;
        do
          v668 = __ldxr(v663);
        while (__stxr(v668 + 1, v663));
      }
      else
      {
        v665 = v1145;
        v666 = v1146;
        v667 = v1147;
      }
      v1248 = v1142;
      v1249 = v1143;
      v1250 = v1144;
      v1251 = v665;
      v1252 = v666;
      v1253 = v667;
      if (*((_QWORD *)&v1142 + 1))
      {
        v749 = (unint64_t *)(*((_QWORD *)&v1142 + 1) + 8);
        do
          v750 = __ldaxr(v749);
        while (__stlxr(v750 - 1, v749));
        if (!v750)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v1142 + 1) + 16))(*((_QWORD *)&v1142 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v1142 + 1));
        }
        v666 = v1252;
      }
      v1254 = 1;
      if (v666 != 3)
      {
        LOBYTE(__dst[0]) = 0;
        v1172 = 0;
        goto LABEL_1564;
      }
      *(_QWORD *)v1301 = &off_24CA82618;
      sub_210993328((uint64_t)&v1247, (uint64_t)&v1301[8]);
      v751 = *(_OWORD *)&v1301[8];
      *(_QWORD *)pixelBuffer = &off_24CA82618;
      *(_OWORD *)&pixelBuffer[8] = *(_OWORD *)&v1301[8];
      *(_OWORD *)&v1301[8] = 0uLL;
      *(_OWORD *)&pixelBuffer[24] = *(_OWORD *)&v1301[24];
      *(_OWORD *)&pixelBuffer[34] = *(_OWORD *)&v1301[34];
      LOBYTE(v1223) = 1;
      if ((_QWORD)v751)
      {
        *(_OWORD *)v1295 = v751;
        if (*((_QWORD *)&v751 + 1))
        {
          v752 = (unint64_t *)(*((_QWORD *)&v751 + 1) + 8);
          do
            v753 = __ldxr(v752);
          while (__stxr(v753 + 1, v752));
        }
        if (*(uint64_t (***)())v751 == off_24CA7B6B0)
        {
          *(_OWORD *)v1301 = v751;
          v754 = v1295;
        }
        else
        {
          v754 = v1301;
        }
      }
      else
      {
        *(_QWORD *)&v1295[8] = 0;
        *(_QWORD *)v1295 = 0;
        v754 = v1301;
      }
      *(_QWORD *)v754 = 0;
      *((_QWORD *)v754 + 1) = 0;
      v837 = *(std::__shared_weak_count **)&v1295[8];
      if (*(_QWORD *)&v1295[8])
      {
        v838 = (unint64_t *)(*(_QWORD *)&v1295[8] + 8);
        do
          v839 = __ldaxr(v838);
        while (__stlxr(v839 - 1, v838));
        if (!v839)
        {
          ((void (*)(std::__shared_weak_count *))v837->__on_zero_shared)(v837);
          std::__shared_weak_count::__release_weak(v837);
        }
      }
      v840 = *(_OWORD *)v1301;
      if (*(_QWORD *)&v1301[8])
      {
        v841 = (unint64_t *)(*(_QWORD *)&v1301[8] + 8);
        do
          v842 = __ldaxr(v841);
        while (__stlxr(v842 - 1, v841));
        if (!v842)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v840 + 1) + 16))(*((_QWORD *)&v840 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v840 + 1));
        }
      }
      if (!(_QWORD)v840)
      {
        LOBYTE(__dst[0]) = 0;
        v1172 = 0;
        goto LABEL_1558;
      }
      v843 = *(uint64_t (****)())&pixelBuffer[8];
      v844 = *(std::__shared_weak_count **)&pixelBuffer[16];
      if (*(_QWORD *)&pixelBuffer[16])
      {
        v845 = (unint64_t *)(*(_QWORD *)&pixelBuffer[16] + 8);
        do
          v846 = __ldxr(v845);
        while (__stxr(v846 + 1, v845));
      }
      if (v843 && *v843 == off_24CA7B6B0)
      {
        if (v844)
        {
          v847 = (unint64_t *)&v844->__shared_owners_;
          do
            v848 = __ldxr(v847);
          while (__stxr(v848 + 1, v847));
          *(_OWORD *)v1295 = *(_OWORD *)&pixelBuffer[24];
          *(_QWORD *)&v1295[16] = *(_QWORD *)&pixelBuffer[40];
          do
            v849 = __ldxr(v847);
          while (__stxr(v849 + 1, v847));
          do
            v850 = __ldaxr(v847);
          while (__stlxr(v850 - 1, v847));
          if (!v850)
          {
            ((void (*)(std::__shared_weak_count *))v844->__on_zero_shared)(v844);
            std::__shared_weak_count::__release_weak(v844);
          }
          do
            v851 = __ldaxr(v847);
          while (__stlxr(v851 - 1, v847));
          if (!v851)
          {
            ((void (*)(std::__shared_weak_count *))v844->__on_zero_shared)(v844);
            std::__shared_weak_count::__release_weak(v844);
          }
          *(_QWORD *)v1315 = &off_24CA82E20;
          *(_QWORD *)&v1315[8] = v843;
          *(_QWORD *)&v1315[16] = v844;
          *(_OWORD *)&v1315[24] = *(_OWORD *)v1295;
          *(_OWORD *)&v1315[33] = *(_OWORD *)&v1295[9];
          LOBYTE(v1316) = 1;
          do
            v852 = __ldxr(v847);
          while (__stxr(v852 + 1, v847));
          do
            v853 = __ldaxr(v847);
          while (__stlxr(v853 - 1, v847));
          if (!v853)
          {
            ((void (*)(std::__shared_weak_count *))v844->__on_zero_shared)(v844);
            std::__shared_weak_count::__release_weak(v844);
          }
        }
        else
        {
          *(_OWORD *)v1295 = *(_OWORD *)&pixelBuffer[24];
          *(_QWORD *)&v1295[16] = *(_QWORD *)&pixelBuffer[40];
          *(_QWORD *)v1315 = &off_24CA82E20;
          *(_QWORD *)&v1315[8] = v843;
          *(_QWORD *)&v1315[16] = 0;
          *(_OWORD *)&v1315[24] = *(_OWORD *)&pixelBuffer[24];
          *(_OWORD *)&v1315[33] = *(_OWORD *)&v1295[9];
          LOBYTE(v1316) = 1;
        }
        sub_2108D8F80((uint64_t)v843, v1301);
        if (*(_QWORD *)&v1301[8])
        {
          v854 = **(__CVBuffer ***)&v1301[8];
          v855 = *(std::__shared_weak_count **)(*(_QWORD *)&v1301[8] + 8);
          if (v855)
          {
            v856 = (unint64_t *)&v855->__shared_owners_;
            do
              v857 = __ldxr(v856);
            while (__stxr(v857 + 1, v856));
            do
              v858 = __ldaxr(v856);
            while (__stlxr(v858 - 1, v856));
            if (!v858)
            {
              ((void (*)(std::__shared_weak_count *))v855->__on_zero_shared)(v855);
              std::__shared_weak_count::__release_weak(v855);
            }
          }
        }
        else
        {
          v854 = 0;
        }
        v859 = CVPixelBufferGetIOSurface(v854);
        *(_QWORD *)v1301 = &off_24CA7D7F8;
        v860 = *(std::__shared_weak_count **)&v1301[16];
        if (*(_QWORD *)&v1301[16])
        {
          v861 = (unint64_t *)(*(_QWORD *)&v1301[16] + 8);
          do
            v862 = __ldaxr(v861);
          while (__stlxr(v862 - 1, v861));
          if (!v862)
          {
            ((void (*)(std::__shared_weak_count *))v860->__on_zero_shared)(v860);
            std::__shared_weak_count::__release_weak(v860);
          }
        }
        LOBYTE(__dst[0]) = 0;
        v1172 = 0;
        v863 = v1316;
        if (!v859)
          goto LABEL_1552;
        if ((_BYTE)v1316)
        {
          __dst[0] = &off_24CA82E20;
          v864 = *(void **)&v1315[8];
          v865 = *(std::__shared_weak_count **)&v1315[16];
          if (*(_QWORD *)&v1315[16])
          {
            v866 = (unint64_t *)(*(_QWORD *)&v1315[16] + 8);
            do
              v867 = __ldxr(v866);
            while (__stxr(v867 + 1, v866));
            do
              v868 = __ldxr(v866);
            while (__stxr(v868 + 1, v866));
            *(_OWORD *)&v1170[8] = *(_OWORD *)&v1315[24];
            v1171 = *(_QWORD *)&v1315[40];
            do
              v869 = __ldxr(v866);
            while (__stxr(v869 + 1, v866));
            __dst[1] = v864;
            *(_QWORD *)v1170 = v865;
            do
              v870 = __ldaxr(v866);
            while (__stlxr(v870 - 1, v866));
            if (!v870)
            {
              ((void (*)(std::__shared_weak_count *))v865->__on_zero_shared)(v865);
              std::__shared_weak_count::__release_weak(v865);
            }
            do
              v871 = __ldaxr(v866);
            while (__stlxr(v871 - 1, v866));
            if (!v871)
            {
              ((void (*)(std::__shared_weak_count *))v865->__on_zero_shared)(v865);
              std::__shared_weak_count::__release_weak(v865);
            }
          }
          else
          {
            __dst[1] = *(void **)&v1315[8];
            *(_QWORD *)v1170 = 0;
            *(_OWORD *)&v1170[8] = *(_OWORD *)&v1315[24];
            v1171 = *(_QWORD *)&v1315[40];
          }
          v1172 = 1;
          v863 = v1316;
LABEL_1552:
          if (v863)
          {
            v937 = *(std::__shared_weak_count **)&v1315[16];
            if (*(_QWORD *)&v1315[16])
            {
              v938 = (unint64_t *)(*(_QWORD *)&v1315[16] + 8);
              do
                v939 = __ldaxr(v938);
              while (__stlxr(v939 - 1, v938));
              if (!v939)
              {
                ((void (*)(std::__shared_weak_count *))v937->__on_zero_shared)(v937);
                std::__shared_weak_count::__release_weak(v937);
              }
            }
          }
        }
LABEL_1558:
        if ((_BYTE)v1223)
        {
          v940 = *(std::__shared_weak_count **)&pixelBuffer[16];
          if (*(_QWORD *)&pixelBuffer[16])
          {
            v941 = (unint64_t *)(*(_QWORD *)&pixelBuffer[16] + 8);
            do
              v942 = __ldaxr(v941);
            while (__stlxr(v942 - 1, v941));
            if (!v942)
            {
              ((void (*)(std::__shared_weak_count *))v940->__on_zero_shared)(v940);
              std::__shared_weak_count::__release_weak(v940);
            }
          }
        }
LABEL_1564:
        if (v1254)
        {
          v943 = (std::__shared_weak_count *)*((_QWORD *)&v1248 + 1);
          if (*((_QWORD *)&v1248 + 1))
          {
            v944 = (unint64_t *)(*((_QWORD *)&v1248 + 1) + 8);
            do
              v945 = __ldaxr(v944);
            while (__stlxr(v945 - 1, v944));
            if (!v945)
            {
              ((void (*)(std::__shared_weak_count *))v943->__on_zero_shared)(v943);
              std::__shared_weak_count::__release_weak(v943);
            }
          }
        }
        if (v1172)
        {
          v1164 = &off_24CA82E20;
          v946 = __dst[1];
          v947 = *(std::__shared_weak_count **)v1170;
          if (*(_QWORD *)v1170)
          {
            v948 = (unint64_t *)(*(_QWORD *)v1170 + 8);
            do
              v949 = __ldxr(v948);
            while (__stxr(v949 + 1, v948));
            do
              v950 = __ldxr(v948);
            while (__stxr(v950 + 1, v948));
            v1167 = *(_OWORD *)&v1170[8];
            v1168 = v1171;
            do
              v951 = __ldxr(v948);
            while (__stxr(v951 + 1, v948));
            v1165 = v946;
            v1166 = v947;
            do
              v952 = __ldaxr(v948);
            while (__stlxr(v952 - 1, v948));
            if (!v952)
            {
              ((void (*)(std::__shared_weak_count *))v947->__on_zero_shared)(v947);
              std::__shared_weak_count::__release_weak(v947);
            }
            do
              v953 = __ldaxr(v948);
            while (__stlxr(v953 - 1, v948));
            if (!v953)
            {
              ((void (*)(std::__shared_weak_count *))v947->__on_zero_shared)(v947);
              std::__shared_weak_count::__release_weak(v947);
            }
            v954 = v1166;
            v946 = v1165;
            if (v1166)
            {
              v955 = (unint64_t *)&v1166->__shared_owners_;
              do
                v956 = __ldxr(v955);
              while (__stxr(v956 + 1, v955));
              do
                v957 = __ldaxr(v955);
              while (__stlxr(v957 - 1, v955));
              if (!v957)
              {
                ((void (*)(std::__shared_weak_count *))v954->__on_zero_shared)(v954);
                std::__shared_weak_count::__release_weak(v954);
              }
            }
          }
          else
          {
            v1165 = __dst[1];
            v1166 = 0;
            v1167 = *(_OWORD *)&v1170[8];
            v1168 = v1171;
          }
          sub_2108D8F80((uint64_t)v946, v1301);
          if (*(_QWORD *)&v1301[8])
          {
            v958 = **(_QWORD **)&v1301[8];
            v959 = *(std::__shared_weak_count **)(*(_QWORD *)&v1301[8] + 8);
            if (v959)
            {
              v960 = (unint64_t *)&v959->__shared_owners_;
              do
                v961 = __ldxr(v960);
              while (__stxr(v961 + 1, v960));
              *(_QWORD *)pixelBuffer = v958;
              *(_QWORD *)&pixelBuffer[8] = v959;
              do
                v962 = __ldxr(v960);
              while (__stxr(v962 + 1, v960));
              do
                v963 = __ldaxr(v960);
              while (__stlxr(v963 - 1, v960));
              if (!v963)
              {
                ((void (*)(std::__shared_weak_count *))v959->__on_zero_shared)(v959);
                std::__shared_weak_count::__release_weak(v959);
              }
LABEL_1604:
              *(_QWORD *)v1301 = &off_24CA7D7F8;
              v964 = *(std::__shared_weak_count **)&v1301[16];
              if (*(_QWORD *)&v1301[16])
              {
                v965 = (unint64_t *)(*(_QWORD *)&v1301[16] + 8);
                do
                  v966 = __ldaxr(v965);
                while (__stlxr(v966 - 1, v965));
                if (!v966)
                {
                  ((void (*)(std::__shared_weak_count *))v964->__on_zero_shared)(v964);
                  std::__shared_weak_count::__release_weak(v964);
                }
              }
              if (!CVPixelBufferGetIOSurface(*(CVPixelBufferRef *)pixelBuffer)
                && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoModelInstance.cpp", 525, (uint64_t)"CVPixelBufferGetIOSurface(ref)", 30, (uint64_t)"The input buffer is not IOSurface backed", 40, (void (*)(void **))sub_2109EDDB4))
              {
                abort();
              }
              if (*v1179 && *v1180 == 1)
                v967 = espresso_network_bind_direct_cvpixelbuffer();
              else
                v967 = espresso_network_bind_input_cvpixelbuffer();
              sub_2109A63A0((uint64_t)&v1149, v1184, v967);
              v968 = *(std::__shared_weak_count **)&pixelBuffer[8];
              if (*(_QWORD *)&pixelBuffer[8])
              {
                v969 = (unint64_t *)(*(_QWORD *)&pixelBuffer[8] + 8);
                do
                  v970 = __ldaxr(v969);
                while (__stlxr(v970 - 1, v969));
                if (!v970)
                {
                  ((void (*)(std::__shared_weak_count *))v968->__on_zero_shared)(v968);
                  std::__shared_weak_count::__release_weak(v968);
                }
              }
              v971 = v1166;
              if (v1166)
              {
                v972 = (unint64_t *)&v1166->__shared_owners_;
                do
                  v973 = __ldaxr(v972);
                while (__stlxr(v973 - 1, v972));
                if (!v973)
                {
                  ((void (*)(std::__shared_weak_count *))v971->__on_zero_shared)(v971);
                  std::__shared_weak_count::__release_weak(v971);
                }
              }
              if (v1172)
              {
                v656 = *(std::__shared_weak_count **)v1170;
                if (*(_QWORD *)v1170)
                {
                  v974 = (unint64_t *)(*(_QWORD *)v1170 + 8);
                  do
                    v975 = __ldaxr(v974);
                  while (__stlxr(v975 - 1, v974));
                  if (!v975)
                    goto LABEL_911;
                }
              }
              goto LABEL_1630;
            }
          }
          else
          {
            v958 = 0;
          }
          *(_QWORD *)pixelBuffer = v958;
          *(_QWORD *)&pixelBuffer[8] = 0;
          goto LABEL_1604;
        }
LABEL_1590:
        v170 = 0;
        if (!(_BYTE)v1309)
          goto LABEL_298;
LABEL_1631:
        v976 = *(std::__shared_weak_count **)&v1308[16];
        if (*(_QWORD *)&v1308[16])
        {
          v977 = (unint64_t *)(*(_QWORD *)&v1308[16] + 8);
          do
            v978 = __ldaxr(v977);
          while (__stlxr(v978 - 1, v977));
          if (!v978)
          {
            ((void (*)(std::__shared_weak_count *))v976->__on_zero_shared)(v976);
            std::__shared_weak_count::__release_weak(v976);
          }
        }
        if (!v1178)
          goto LABEL_303;
        v171 = *(std::__shared_weak_count **)&__src[16];
        if (!*(_QWORD *)&__src[16])
          goto LABEL_303;
LABEL_298:
        v172 = (unint64_t *)(*(_QWORD *)&__src[16] + 8);
        do
          v173 = __ldaxr(v172);
        while (__stlxr(v173 - 1, v172));
        if (!v173)
        {
          ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
          std::__shared_weak_count::__release_weak(v171);
          if (v170)
            goto LABEL_952;
        }
        else
        {
LABEL_303:
          if (v170)
            goto LABEL_952;
        }
        v116 = 1;
        v117 = v1060;
        v118 = *v1060;
        if (!*v1060)
          goto LABEL_305;
        goto LABEL_460;
      }
      v996 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      v997 = atomic_load((unsigned __int8 *)&qword_254A75D88);
      if ((v997 & 1) != 0 || !__cxa_guard_acquire(&qword_254A75D88))
      {
LABEL_1683:
        v998 = sub_210993620();
        *(_QWORD *)v1301 = "Attempting to create an ";
        *(_QWORD *)&v1301[8] = 24;
        v999 = &qword_254A75DA8;
        v1000 = byte_254A75DBF;
        if (byte_254A75DBF < 0)
        {
          v1000 = unk_254A75DB0;
          v999 = (uint64_t *)qword_254A75DA8;
        }
        *(_QWORD *)&v1301[16] = v999;
        *(_QWORD *)&v1301[24] = v1000;
        *(_QWORD *)&v1301[32] = " from an ";
        *(_QWORD *)&v1301[40] = 9;
        v1001 = HIBYTE(v998->__r_.__value_.__r.__words[2]);
        if ((v1001 & 0x80u) == 0)
          v1002 = v998;
        else
          v1002 = (std::string *)v998->__r_.__value_.__r.__words[0];
        if ((v1001 & 0x80u) != 0)
          v1001 = v998->__r_.__value_.__l.__size_;
        *(_QWORD *)&v1301[48] = v1002;
        *(_QWORD *)&v1301[56] = v1001;
        sub_2108BBA08((uint64_t)v1301, (uint64_t)&v1301[64], 0, 0, &v1297);
        v1003 = *(_QWORD *)&pixelBuffer[8];
        if (*(_QWORD *)&pixelBuffer[8])
        {
          v1019 = *(std::__shared_weak_count **)&pixelBuffer[16];
          if (*(_QWORD *)&pixelBuffer[16])
          {
            v1020 = (unint64_t *)(*(_QWORD *)&pixelBuffer[16] + 8);
            do
              v1021 = __ldxr(v1020);
            while (__stxr(v1021 + 1, v1020));
            do
              v1022 = __ldaxr(v1020);
            while (__stlxr(v1022 - 1, v1020));
            if (!v1022)
            {
              ((void (*)(std::__shared_weak_count *))v1019->__on_zero_shared)(v1019);
              std::__shared_weak_count::__release_weak(v1019);
            }
            v1023 = *(std::__shared_weak_count **)&pixelBuffer[16];
            v1003 = *(_QWORD *)&pixelBuffer[8];
            if (*(_QWORD *)&pixelBuffer[16])
            {
              v1024 = (unint64_t *)(*(_QWORD *)&pixelBuffer[16] + 8);
              do
                v1025 = __ldxr(v1024);
              while (__stxr(v1025 + 1, v1024));
              do
                v1026 = __ldaxr(v1024);
              while (__stlxr(v1026 - 1, v1024));
              if (!v1026)
              {
                ((void (*)(std::__shared_weak_count *))v1023->__on_zero_shared)(v1023);
                std::__shared_weak_count::__release_weak(v1023);
              }
            }
          }
          v1027 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1003 + 80))(v1003);
          v1029 = HIBYTE(v1297.__r_.__value_.__r.__words[2]);
          v1030 = &v1297;
          if ((v1297.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          {
            v1029 = v1297.__r_.__value_.__l.__size_;
            v1030 = (std::string *)v1297.__r_.__value_.__r.__words[0];
          }
          *(_QWORD *)v1301 = v1030;
          *(_QWORD *)&v1301[8] = v1029;
          *(_QWORD *)&v1301[16] = " but the other image contains an incompatible buffer type ";
          *(_QWORD *)&v1301[24] = 58;
          *(_QWORD *)&v1301[32] = v1027;
          *(_QWORD *)&v1301[40] = v1028;
          sub_2108BBA08((uint64_t)v1301, (uint64_t)&v1301[48], 0, 0, &v1296);
          LOBYTE(v1004) = *((_BYTE *)&v1297.__r_.__value_.__s + 23);
LABEL_1737:
          if ((v1004 & 0x80) != 0)
            operator delete(v1297.__r_.__value_.__l.__data_);
          std::logic_error::logic_error(v996, &v1296);
          v996->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
          __cxa_throw(v996, (struct type_info *)off_24CA79220, MEMORY[0x24BEDAB88]);
        }
        v1004 = SHIBYTE(v1297.__r_.__value_.__r.__words[2]);
        if ((v1297.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v1005 = HIBYTE(v1297.__r_.__value_.__r.__words[2]);
        else
          v1005 = v1297.__r_.__value_.__l.__size_;
        v1006 = v1005 + 46;
        if (v1005 + 46 > 0x7FFFFFFFFFFFFFF7)
          sub_2108A4B7C();
        if (v1006 > 0x16)
        {
          v1037 = (v1006 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v1006 | 7) != 0x17)
            v1037 = v1006 | 7;
          v1038 = v1037 + 1;
          v1032 = operator new(v1037 + 1);
          v1296.__r_.__value_.__r.__words[2] = v1038 | 0x8000000000000000;
          v1296.__r_.__value_.__r.__words[0] = (std::string::size_type)v1032;
          v1296.__r_.__value_.__l.__size_ = v1005 + 46;
          if (!v1005)
            goto LABEL_1736;
        }
        else
        {
          memset(&v1296, 0, sizeof(v1296));
          v1032 = &v1296;
          *((_BYTE *)&v1296.__r_.__value_.__s + 23) = v1005 + 46;
        }
        if (v1004 >= 0)
          v1033 = &v1297;
        else
          v1033 = (std::string *)v1297.__r_.__value_.__r.__words[0];
        memmove(v1032, v1033, v1005);
LABEL_1736:
        strcpy((char *)v1032 + v1005, " but the other image does not contain a buffer");
        goto LABEL_1737;
      }
      *((_BYTE *)&v1299.__r_.__value_.__s + 23) = 14;
      strcpy((char *)&v1299, "ConstImageView");
      v1040 = sub_2108F2F38();
      if (SHIBYTE(v1040->__r_.__value_.__r.__words[2]) < 0)
      {
        sub_2108B314C(&__s, v1040->__r_.__value_.__l.__data_, v1040->__r_.__value_.__l.__size_);
      }
      else
      {
        v1043 = *(_OWORD *)&v1040->__r_.__value_.__l.__data_;
        __s.__r_.__value_.__r.__words[2] = v1040->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__s.__r_.__value_.__l.__data_ = v1043;
      }
      sub_2109ECDA0(&__s, "cv3d::kit::img::", 16, (const std::string::value_type *)&unk_210A01421, 0, 1, 1, (uint64_t)v1301);
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s.__r_.__value_.__l.__data_);
      v1044 = sub_2108BBE28();
      if (*((char *)v1044 + 23) < 0)
      {
        sub_2108B314C(&__s, *(void **)v1044, *((_QWORD *)v1044 + 1));
      }
      else
      {
        v1049 = *v1044;
        __s.__r_.__value_.__r.__words[2] = *((_QWORD *)v1044 + 2);
        *(_OWORD *)&__s.__r_.__value_.__l.__data_ = v1049;
      }
      sub_2109ECDA0(&__s, "cv3d::kit::img::", 16, (const std::string::value_type *)&unk_210A01421, 0, 1, 1, (uint64_t)&v1301[24]);
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s.__r_.__value_.__l.__data_);
      sub_2108B9228(&v1298, (uint64_t)v1301, 2uLL);
      sub_2109ED500((char *)&v1299, (uint64_t *)&v1298, (std::string *)&qword_254A75DA8, v1050, v1051);
      v1052 = v1298.__r_.__value_.__r.__words[0];
      if (v1298.__r_.__value_.__r.__words[0])
      {
        v1055 = v1298.__r_.__value_.__l.__size_;
        v1056 = (void *)v1298.__r_.__value_.__r.__words[0];
        if (v1298.__r_.__value_.__l.__size_ != v1298.__r_.__value_.__r.__words[0])
        {
          do
          {
            if (*(char *)(v1055 - 1) < 0)
              operator delete(*(void **)(v1055 - 24));
            v1055 -= 24;
          }
          while (v1055 != v1052);
          v1056 = (void *)v1298.__r_.__value_.__r.__words[0];
        }
        v1298.__r_.__value_.__l.__size_ = v1052;
        operator delete(v1056);
        if ((v1301[47] & 0x80000000) != 0)
        {
LABEL_1785:
          operator delete(*(void **)&v1301[24]);
          if ((v1301[23] & 0x80000000) == 0)
            goto LABEL_1786;
          goto LABEL_1807;
        }
      }
      else if ((v1301[47] & 0x80000000) != 0)
      {
        goto LABEL_1785;
      }
      if ((v1301[23] & 0x80000000) == 0)
      {
LABEL_1786:
        if ((SHIBYTE(v1299.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_1788:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A75DA8, &dword_21089F000);
          __cxa_guard_release(&qword_254A75D88);
          goto LABEL_1683;
        }
LABEL_1787:
        operator delete(v1299.__r_.__value_.__l.__data_);
        goto LABEL_1788;
      }
LABEL_1807:
      operator delete(*(void **)v1301);
      if ((SHIBYTE(v1299.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_1788;
      goto LABEL_1787;
    }
    v30 = 4;
    if (v1154 != 65)
      v30 = 1;
    if (v30 != *(unsigned int *)&v1153[24])
    {
      sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoModelInstance.cpp", 668, (uint64_t)&unk_210A01421, 0, (uint64_t)"Multiple batch-size is not supported with interleaved format.", 61, (void (*)(void **))sub_2109EDDB4);
      abort();
    }
    v1127 = *(int64x2_t *)v1153;
    v1128 = *(int64x2_t *)&v1153[16];
    v1129 = *(int64x2_t *)&v1153[32];
    v1130 = v1154;
    v1137 = 0;
    v31 = v1162;
    if (v1162)
    {
      v32 = v1155;
      v33 = v1156;
      if (v1156)
      {
        v34 = (unint64_t *)&v1156->__shared_owners_;
        do
          v35 = __ldxr(v34);
        while (__stxr(v35 + 1, v34));
        v36 = v1159;
        v37 = v1160;
        v38 = v1161;
        do
          v39 = __ldxr(v34);
        while (__stxr(v39 + 1, v34));
      }
      else
      {
        v36 = v1159;
        v37 = v1160;
        v38 = v1161;
      }
      *(_QWORD *)&v1131 = v32;
      *((_QWORD *)&v1131 + 1) = v33;
      v1132 = v1157;
      v1133 = v1158;
      v1134 = v36;
      v1135 = v37;
      v1136 = v38;
      if (v33)
      {
        v41 = (unint64_t *)&v33->__shared_owners_;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      v1137 = 1;
    }
    v43 = v1163;
    v1179 = (char *)v1163;
    v44 = *(_QWORD *)(a2 + 128);
    if (*(_BYTE *)(v44 + 152))
    {
      v45 = *(_QWORD *)(v44 + 128);
      if (0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(v44 + 136) - v45) >> 2) > v1163)
      {
        v46 = (_BYTE *)(v45 + 28 * v1163);
        if ((v46[12] || v46[20] | v46[24])
          && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoModelInstance.cpp", 406, (uint64_t)"!einput.rgb_bias && !einput.scale_factor && !einput.use_bgr", 59, (uint64_t)"Preprocessing arguments are not yet supported for generic input tensors", 71, (void (*)(void **))sub_2109EDDB4))
        {
          abort();
        }
      }
    }
    sub_210997320(v44 + 8, v43, (uint64_t)v1301);
    v47 = espresso_network_bind_buffer();
    if (v1301[24] && (v1301[23] & 0x80000000) != 0)
      operator delete(*(void **)v1301);
    if (v47)
    {
      sub_2108AE440((unint64_t *)&v1179);
      v48 = std::string::insert((std::string *)v1301, 0, "Failed to bind buffer created for Espresso Model input ", 0x37uLL);
      v50 = (void *)v48->__r_.__value_.__r.__words[0];
      v49 = v48->__r_.__value_.__l.__size_;
      v1255[0].i32[0] = v48->__r_.__value_.__r.__words[2];
      *(__int32 *)((char *)v1255[0].i32 + 3) = *(_DWORD *)((char *)&v48->__r_.__value_.__r.__words[2] + 3);
      v51 = SHIBYTE(v48->__r_.__value_.__r.__words[2]);
      v48->__r_.__value_.__l.__size_ = 0;
      v48->__r_.__value_.__r.__words[2] = 0;
      v48->__r_.__value_.__r.__words[0] = 0;
      v52 = operator new();
      v53 = v52;
      if (v51 < 0)
      {
        sub_2108B314C((_BYTE *)v52, v50, v49);
      }
      else
      {
        *(_QWORD *)v52 = v50;
        *(_QWORD *)(v52 + 8) = v49;
        *(_DWORD *)(v52 + 16) = v1255[0].i32[0];
        *(_DWORD *)(v52 + 19) = *(__int32 *)((char *)v1255[0].i32 + 3);
        *(_BYTE *)(v52 + 23) = v51;
      }
      v60 = (std::__shared_weak_count *)operator new();
      v60->__vftable = (std::__shared_weak_count_vtbl *)&unk_24CA7A1D8;
      v60->__shared_owners_ = 0;
      v60->__shared_weak_owners_ = 0;
      v60[1].__vftable = (std::__shared_weak_count_vtbl *)v53;
      if (v51 < 0)
      {
        operator delete(v50);
        if ((v1301[23] & 0x80000000) == 0)
          goto LABEL_93;
      }
      else if ((v1301[23] & 0x80000000) == 0)
      {
LABEL_93:
        v61 = 5;
        goto LABEL_1504;
      }
      operator delete(*(void **)v1301);
      goto LABEL_93;
    }
    v1305 = v1312;
    v1306 = v1313;
    v1307 = v1314;
    *(_OWORD *)&v1301[64] = *(_OWORD *)&v1308[64];
    v1302 = v1309;
    v1304 = v1311;
    v1303 = v1310;
    *(_OWORD *)v1301 = *(_OWORD *)v1308;
    *(_OWORD *)&v1301[16] = *(_OWORD *)&v1308[16];
    *(_OWORD *)&v1301[48] = *(_OWORD *)&v1308[48];
    *(_OWORD *)&v1301[32] = *(_OWORD *)&v1308[32];
    sub_2109A582C((uint64_t)&v1282, (int64x2_t *)v1301);
    v1243 = v1127;
    v1244 = v1128;
    v1245 = v1129;
    v1246 = v1130;
    LOBYTE(v1247) = 0;
    v1254 = 0;
    if (v31)
    {
      v1247 = &off_24CA79890;
      if (*((_QWORD *)&v1131 + 1))
      {
        v54 = (unint64_t *)(*((_QWORD *)&v1131 + 1) + 8);
        do
          v55 = __ldxr(v54);
        while (__stxr(v55 + 1, v54));
        v56 = v1134;
        v57 = v1135;
        v58 = v1136;
        do
          v59 = __ldxr(v54);
        while (__stxr(v59 + 1, v54));
      }
      else
      {
        v56 = v1134;
        v57 = v1135;
        v58 = v1136;
      }
      v1248 = v1131;
      v1249 = v1132;
      v1250 = v1133;
      v1251 = v56;
      v1252 = v57;
      v1253 = v58;
      if (*((_QWORD *)&v1131 + 1))
      {
        v95 = (unint64_t *)(*((_QWORD *)&v1131 + 1) + 8);
        do
          v96 = __ldaxr(v95);
        while (__stlxr(v96 - 1, v95));
        if (!v96)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v1131 + 1) + 16))(*((_QWORD *)&v1131 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v1131 + 1));
        }
      }
      v1254 = 1;
    }
    if ((v1246 & 0x40) != 0)
    {
      v97 = 4;
      v1268 = 65568;
      v98 = &v1245.i64[1];
      if (!v31)
        goto LABEL_175;
LABEL_166:
      v98 = &v1251;
      if ((_BYTE)v1253)
      {
        v98 = &v1251;
        if (v1251)
        {
          v99 = v1248;
          if (*((_QWORD *)&v1248 + 1))
          {
            v100 = (unint64_t *)(*((_QWORD *)&v1248 + 1) + 8);
            do
              v101 = __ldxr(v100);
            while (__stxr(v101 + 1, v100));
            do
              v102 = __ldaxr(v100);
            while (__stlxr(v102 - 1, v100));
            if (!v102)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)&v99 + 1) + 16))(*((_QWORD *)&v99 + 1));
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v99 + 1));
            }
          }
          (*(void (**)(_QWORD, _QWORD, const char *))(*(_QWORD *)v99 + 88))(v99, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
          v98 = &v1251;
        }
      }
      goto LABEL_175;
    }
    if ((v1246 & 0x10) == 0)
    {
      sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoModelInstance.cpp", 738, (uint64_t)&unk_210A01421, 0, (uint64_t)"Given format flags not supported as espresso buffer. Must be float32 or uint8", 77, (void (*)(void **))sub_2109EDDB4);
      abort();
    }
    v97 = 1;
    v1268 = 262152;
    v98 = &v1245.i64[1];
    if (v31)
      goto LABEL_166;
LABEL_175:
    v103 = *v98;
    *(_QWORD *)&v104 = v1243.u32[1];
    *((_QWORD *)&v104 + 1) = v1243.u32[2];
    v1259 = v104;
    v1264 = v1244.i32[3] / v97;
    v1265 = v1245.i32[0] / v97;
    v1260 = v1243.u32[3];
    v1261 = v1244.u32[0];
    v1263 = v1244.i32[2] / v97;
    v1262 = 1;
    v1266 = v1245.i32[1] / v97;
    v1267 = v1244.u32[0] * v1266;
    v1255[0] = (int64x2_t)(unint64_t)v103;
    sub_2109A582C((uint64_t)&v1269, v1255);
    if (v1254)
    {
      v105 = (std::__shared_weak_count *)*((_QWORD *)&v1248 + 1);
      if (*((_QWORD *)&v1248 + 1))
      {
        v106 = (unint64_t *)(*((_QWORD *)&v1248 + 1) + 8);
        do
          v107 = __ldaxr(v106);
        while (__stlxr(v107 - 1, v106));
        if (!v107)
        {
          ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
          std::__shared_weak_count::__release_weak(v105);
          v108 = v1281;
          if (v1281 != 1)
            goto LABEL_308;
LABEL_181:
          if (v1294 != 1)
          {
            if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoModelInstance.cpp", 446, (uint64_t)"std::holds_alternative<DataView32f>(buffer_view)", 48, (uint64_t)"Bound espresso buffer is not of storage type float", 50, (void (*)(void **))sub_2109EDDB4))
            {
              abort();
            }
            if (v1281 != 1)
              sub_2108B9060();
          }
          v1231 = v1269;
          v1232 = v1270;
          v1233 = v1271;
          v1234 = v1272;
          LOBYTE(v1235) = 0;
          v1242 = 0;
          if (v1280)
          {
            v1235 = &off_24CA7A158;
            v109 = v1274;
            if (*((_QWORD *)&v1274 + 1))
            {
              v110 = (unint64_t *)(*((_QWORD *)&v1274 + 1) + 8);
              do
                v111 = __ldxr(v110);
              while (__stxr(v111 + 1, v110));
              v112 = v1277;
              v113 = v1278;
              v114 = v1279;
              do
                v115 = __ldxr(v110);
              while (__stxr(v115 + 1, v110));
            }
            else
            {
              v112 = v1277;
              v113 = v1278;
              v114 = v1279;
            }
            v1236 = v109;
            v1237 = v1275;
            v1238 = v1276;
            v1239 = v112;
            v1240 = v113;
            v1241 = v114;
            if (*((_QWORD *)&v109 + 1))
            {
              v199 = (unint64_t *)(*((_QWORD *)&v109 + 1) + 8);
              do
                v200 = __ldaxr(v199);
              while (__stlxr(v200 - 1, v199));
              if (!v200)
              {
                (*(void (**)(_QWORD))(**((_QWORD **)&v109 + 1) + 16))(*((_QWORD *)&v109 + 1));
                std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v109 + 1));
              }
            }
            v1242 = 1;
          }
          if (v1294 != 1)
            sub_2108B9060();
          *(int64x2_t *)pixelBuffer = v1282;
          *(int64x2_t *)&pixelBuffer[16] = v1283;
          *(int64x2_t *)&pixelBuffer[32] = v1284;
          *(_DWORD *)&pixelBuffer[48] = v1285;
          LOBYTE(v1223) = 0;
          v1230 = 0;
          v201 = v1293;
          if (!v1293)
          {
            v1212 = v1282;
            *(int64x2_t *)v1213 = v1283;
            *(int64x2_t *)&v1213[16] = v1284;
            *(_DWORD *)&v1213[32] = v1285;
            LOBYTE(v1214) = 0;
            goto LABEL_375;
          }
          *(_QWORD *)&v1223 = &off_24CA7A158;
          v203 = (std::__shared_weak_count *)*((_QWORD *)&v1287 + 1);
          v202 = v1287;
          if (*((_QWORD *)&v1287 + 1))
          {
            v204 = (unint64_t *)(*((_QWORD *)&v1287 + 1) + 8);
            do
              v205 = __ldxr(v204);
            while (__stxr(v205 + 1, v204));
            v206 = v1290;
            v207 = v1291;
            v208 = v1292;
            do
              v209 = __ldxr(v204);
            while (__stxr(v209 + 1, v204));
          }
          else
          {
            v206 = v1290;
            v207 = v1291;
            v208 = v1292;
          }
          *((_QWORD *)&v1223 + 1) = v202;
          v1224 = v203;
          v1225 = v1288;
          v1226 = v1289;
          v1227 = v206;
          v1228 = v207;
          v1229 = v208;
          if (v203)
          {
            v210 = (unint64_t *)&v203->__shared_owners_;
            do
              v211 = __ldaxr(v210);
            while (__stlxr(v211 - 1, v210));
            if (!v211)
            {
              ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
              std::__shared_weak_count::__release_weak(v203);
            }
            v212 = v1224;
            v202 = *((_QWORD *)&v1223 + 1);
            v1230 = 1;
            v1212 = *(int64x2_t *)pixelBuffer;
            *(_OWORD *)v1213 = *(_OWORD *)&pixelBuffer[16];
            *(_OWORD *)&v1213[16] = *(_OWORD *)&pixelBuffer[32];
            *(_DWORD *)&v1213[32] = *(_DWORD *)&pixelBuffer[48];
            v1221 = 0;
            *(_QWORD *)&v1214 = &off_24CA7A158;
            if (v1224)
            {
              v213 = (unint64_t *)&v1224->__shared_owners_;
              do
                v214 = __ldxr(v213);
              while (__stxr(v214 + 1, v213));
              v215 = v1227;
              v216 = v1228;
              v217 = v1229;
              do
                v218 = __ldxr(v213);
              while (__stxr(v218 + 1, v213));
              v219 = 0;
              goto LABEL_369;
            }
          }
          else
          {
            v1230 = 1;
            v1212 = *(int64x2_t *)pixelBuffer;
            *(_OWORD *)v1213 = *(_OWORD *)&pixelBuffer[16];
            *(_OWORD *)&v1213[16] = *(_OWORD *)&pixelBuffer[32];
            *(_DWORD *)&v1213[32] = *(_DWORD *)&pixelBuffer[48];
            v1221 = 0;
            *(_QWORD *)&v1214 = &off_24CA7A158;
          }
          v212 = 0;
          v215 = v1227;
          v216 = v1228;
          v219 = 1;
          v217 = v1229;
LABEL_369:
          *((_QWORD *)&v1214 + 1) = v202;
          v1215 = v212;
          v1216 = v1225;
          v1217 = v1226;
          v1218 = v215;
          v1219 = v216;
          v1220 = v217;
          if ((v219 & 1) == 0)
          {
            v220 = (unint64_t *)&v212->__shared_owners_;
            do
              v221 = __ldaxr(v220);
            while (__stlxr(v221 - 1, v220));
            if (!v221)
            {
              ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
              std::__shared_weak_count::__release_weak(v212);
            }
          }
          v201 = 1;
LABEL_375:
          v1221 = v201;
          sub_2108C23D4((uint64_t)&v1231, (uint64_t)__src);
          sub_2108C23D4((uint64_t)&v1212, (uint64_t)__dst);
          if (*(_DWORD *)&__src[28] == 1 && *(_DWORD *)&v1170[12] == 1)
          {
            if (*(_DWORD *)&__src[32] != *(_DWORD *)&v1170[16] || *(_DWORD *)&__src[32] != *(_DWORD *)&__src[8])
            {
              v1164 = (uint64_t (**)())*(unsigned int *)&__src[8];
              if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*(int32x4_t *)&__src[8]))) & 1) == 0
                && *(_DWORD *)&__src[24])
              {
                *(_QWORD *)v1315 = 0;
                *(_QWORD *)&v1315[12] = 0x100000001;
                *(_DWORD *)&v1315[8] = *(_DWORD *)&__src[8] - 1;
                *(_DWORD *)&v1315[20] = *(_DWORD *)&__src[12] - 1;
                v1315[24] = __src[32];
                v1315[25] = __src[33];
                v1315[26] = __src[34];
                v1315[27] = __src[35];
                v1315[28] = v1170[16];
                v1315[29] = v1170[17];
                v1315[30] = v1170[18];
                v1315[31] = v1170[19];
                v1315[36] = __src[36];
                v1315[37] = __src[37];
                v1315[38] = __src[38];
                v1315[39] = __src[39];
                v1315[40] = v1170[20];
                v1315[41] = v1170[21];
                v1315[42] = v1170[22];
                v1315[43] = v1170[23];
                *(_DWORD *)&v1315[32] = *(_DWORD *)&__src[16] - 1;
                *(_DWORD *)&v1315[44] = *(_DWORD *)&__src[20] - 1;
                v1315[48] = __src[40];
                v1315[49] = __src[41];
                v1315[50] = __src[42];
                v1315[51] = __src[43];
                v1315[52] = v1171;
                v1315[53] = BYTE1(v1171);
                v1315[54] = BYTE2(v1171);
                v1315[55] = BYTE3(v1171);
                BYTE4(v1316) = __src[44];
                BYTE5(v1316) = __src[45];
                BYTE6(v1316) = __src[46];
                HIBYTE(v1316) = __src[47];
                v1317 = HIDWORD(v1171);
                v345 = *(char **)__src;
                v346 = (char *)__dst[0];
                v1173 = 0u;
                *(_OWORD *)v1174 = 0u;
                v347 = *(_DWORD *)&__src[24] - 1;
                LODWORD(v1316) = *(_DWORD *)&__src[24] - 1;
                if (*(_DWORD *)&__src[24] != 1)
                {
                  v348 = 4 * *(unsigned int *)&__src[44];
                  v349 = 4 * HIDWORD(v1171);
                  do
                  {
                    sub_2109A6834(v1315, (uint64_t)&v1173, (uint64_t *)&v1164, v345, v346);
                    v345 += v348;
                    v346 += v349;
                    --v347;
                  }
                  while (v347);
                }
                sub_2109A6834(v1315, (uint64_t)&v1173, (uint64_t *)&v1164, v345, v346);
              }
              goto LABEL_1481;
            }
            v222 = *(unsigned int *)&v1170[20];
            if (*(_DWORD *)&__src[36] == *(_DWORD *)&v1170[20]
              && *(_DWORD *)&__src[36] == *(_DWORD *)&__src[12] * *(_DWORD *)&__src[32])
            {
              v223 = v1171;
              v224 = *(unsigned int *)&__src[40];
              if (*(_DWORD *)&__src[40] == (_DWORD)v1171
                && *(_DWORD *)&__src[40] == *(_DWORD *)&__src[16] * *(_DWORD *)&__src[36])
              {
                v225 = (*(_DWORD *)&__src[20] * *(_DWORD *)&__src[40]);
                if (*(_DWORD *)&__src[44] == HIDWORD(v1171) && *(_DWORD *)&__src[44] == (_DWORD)v225)
                {
                  v226 = (*(_DWORD *)&__src[24] * *(_DWORD *)&__src[44]);
                  v227 = *(const void **)__src;
                  if (*(_QWORD *)__src || !(_DWORD)v226)
                  {
                    if (!(_DWORD)v226)
                      goto LABEL_1481;
                  }
                  else if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
                  {
                    goto LABEL_1649;
                  }
                  v834 = (char *)__dst[0];
                  v835 = 4 * v226;
                  v836 = v227;
                  goto LABEL_1480;
                }
                if (!*(_DWORD *)&__src[32]
                  || !*(_DWORD *)&__src[12]
                  || !*(_DWORD *)&__src[16]
                  || !*(_DWORD *)&__src[20]
                  || !*(_DWORD *)&__src[24])
                {
                  goto LABEL_1481;
                }
                v768 = (char *)__dst[0];
                v732 = *(char **)__src;
                v426 = 4 * v225;
                v769 = *(_DWORD *)&__src[24] - 1;
                if (*(_DWORD *)&__src[24] != 1)
                {
                  if ((_DWORD)v225)
                  {
                    v770 = 4 * *(unsigned int *)&__src[44];
                    v771 = 4 * HIDWORD(v1171);
                    while (v732
                         || !sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
                    {
                      memmove(v768, v732, 4 * v225);
                      v732 += v770;
                      v768 += v771;
                      if (!--v769)
                        goto LABEL_1358;
                    }
                    goto LABEL_1649;
                  }
                  goto LABEL_1481;
                }
LABEL_1358:
                if (!(_DWORD)v225 || v732)
                {
                  if (!(_DWORD)v225)
                  {
LABEL_1481:
                    if (v1221)
                    {
                      v915 = v1215;
                      if (v1215)
                      {
                        v916 = (unint64_t *)&v1215->__shared_owners_;
                        do
                          v917 = __ldaxr(v916);
                        while (__stlxr(v917 - 1, v916));
                        if (!v917)
                        {
                          ((void (*)(std::__shared_weak_count *))v915->__on_zero_shared)(v915);
                          std::__shared_weak_count::__release_weak(v915);
                        }
                      }
                    }
                    if (v1230)
                    {
                      v918 = v1224;
                      if (v1224)
                      {
                        v919 = (unint64_t *)&v1224->__shared_owners_;
                        do
                          v920 = __ldaxr(v919);
                        while (__stlxr(v920 - 1, v919));
                        if (!v920)
                        {
                          ((void (*)(std::__shared_weak_count *))v918->__on_zero_shared)(v918);
                          std::__shared_weak_count::__release_weak(v918);
                        }
                      }
                    }
                    if (!v1242)
                      goto LABEL_1499;
                    v793 = (std::__shared_weak_count *)*((_QWORD *)&v1236 + 1);
                    if (!*((_QWORD *)&v1236 + 1))
                      goto LABEL_1499;
                    v921 = (unint64_t *)(*((_QWORD *)&v1236 + 1) + 8);
                    do
                      v795 = __ldaxr(v921);
                    while (__stlxr(v795 - 1, v921));
                    goto LABEL_1497;
                  }
                }
                else if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
                {
                  goto LABEL_1649;
                }
                v834 = v768;
LABEL_1479:
                v836 = v732;
                v835 = v426;
LABEL_1480:
                memmove(v834, v836, v835);
                goto LABEL_1481;
              }
              v1094 = (*(_DWORD *)&__src[16] * *(_DWORD *)&__src[36]);
              v730.i64[0] = __PAIR64__(*(unsigned int *)&__src[16], *(unsigned int *)&__src[32]);
              v730.i64[1] = *(_QWORD *)&__src[20];
              if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v730))) & 1) != 0 || !*(_DWORD *)&__src[12])
                goto LABEL_1481;
              v731 = *(_DWORD *)&__src[20] - 1;
              v732 = *(char **)__src;
              v733 = (char *)__dst[0];
              v426 = 4 * v1094;
              v1125 = *(_DWORD *)&__src[24] - 1;
              if (*(_DWORD *)&__src[24] != 1)
              {
                v1104 = HIDWORD(v1171);
                v1099 = *(unsigned int *)&__src[44];
                if (*(_DWORD *)&__src[20] == 1)
                {
                  if ((_DWORD)v1094)
                  {
                    v913 = 4 * *(unsigned int *)&__src[44];
                    v914 = 4 * HIDWORD(v1171);
                    while (v732
                         || !sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
                    {
                      memmove(v733, v732, v426);
                      v732 += v913;
                      v733 += v914;
                      if (!--v1125)
                        goto LABEL_1466;
                    }
                    goto LABEL_1649;
                  }
                }
                else if ((_DWORD)v1094)
                {
                  v734 = 0;
                  while (1)
                  {
                    v1110 = v734;
                    v735 = 0;
                    v736 = v732;
                    v1118 = v733;
                    v737 = v733;
                    do
                    {
                      while (v736)
                      {
                        memmove(v737, v736, v426);
                        v736 += 4 * v224;
                        v737 += 4 * v223;
                        if (++v735 == v731)
                          goto LABEL_1047;
                      }
                      sub_2109EDAB0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4);
                      v738 = atomic_load((unsigned __int8 *)&qword_254A75F38);
                      if ((v738 & 1) == 0 && __cxa_guard_acquire(&qword_254A75F38))
                      {
                        __cxa_atexit((void (*)(void *))sub_2109EDF34, &qword_254A75F00, &dword_21089F000);
                        __cxa_guard_release(&qword_254A75F38);
                      }
                      if (byte_254A75F28)
                        v739 = byte_254A75F30 == 0;
                      else
                        v739 = 0;
                      if (!v739)
                      {
                        v740 = qword_254A75F00;
                        for (i = unk_254A75F08; v740 != i; v740 += 16)
                          (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v740)(*(_QWORD *)(v740 + 8), "ptr != nullptr || size == 0", 27, &unk_210A01421, 0);
                      }
                      v742 = atomic_load((unsigned __int8 *)&qword_254A75F38);
                      if ((v742 & 1) == 0 && __cxa_guard_acquire(&qword_254A75F38))
                      {
                        __cxa_atexit((void (*)(void *))sub_2109EDF34, &qword_254A75F00, &dword_21089F000);
                        __cxa_guard_release(&qword_254A75F38);
                      }
                      if (!byte_254A75F28)
                        goto LABEL_1649;
                      qword_254A75F18(unk_254A75F20, "ptr != nullptr || size == 0", 27, &unk_210A01421, 0);
                      memcpy(v737, 0, v426);
                      v737 += 4 * v223;
                      ++v735;
                      v736 = (char *)(4 * v224);
                    }
                    while (v735 != v731);
                    v736 = (char *)(4 * v224);
                    if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
                    {
                      goto LABEL_1649;
                    }
LABEL_1047:
                    memmove(v737, v736, v426);
                    v732 += 4 * v1099;
                    v733 = &v1118[4 * v1104];
                    v734 = v1110 + 1;
                    if (v1110 + 1 == v1125)
                      goto LABEL_1466;
                  }
                }
                goto LABEL_1481;
              }
LABEL_1466:
              if (v731)
              {
                if ((_DWORD)v1094)
                {
                  while (v732
                       || !sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
                  {
                    memmove(v733, v732, v426);
                    v732 += 4 * v224;
                    v733 += 4 * v223;
                    if (!--v731)
                      goto LABEL_1473;
                  }
                  goto LABEL_1649;
                }
                goto LABEL_1481;
              }
LABEL_1473:
              v830 = v1094;
              if ((_DWORD)v1094 && !v732)
                goto LABEL_1475;
              goto LABEL_1477;
            }
            v1121 = *(unsigned int *)&__src[36];
            v1107 = (*(_DWORD *)&__src[12] * *(_DWORD *)&__src[32]);
            v422.i64[0] = __PAIR64__(*(unsigned int *)&__src[32], *(unsigned int *)&__src[12]);
            v422.i64[1] = *(_QWORD *)&__src[16];
            if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v422))) & 1) != 0 || !*(_DWORD *)&__src[24])
              goto LABEL_1481;
            v423 = *(_DWORD *)&__src[16] - 1;
            v1096 = *(_DWORD *)&__src[20] - 1;
            v1091 = *(unsigned int *)&__src[40];
            v1087 = v1171;
            v424 = *(char **)__src;
            v425 = (char *)__dst[0];
            v426 = 4 * v1107;
            v1101 = 4 * *(unsigned int *)&v1170[20];
            v1071 = *(_DWORD *)&__src[24] - 1;
            v1114 = *(_DWORD *)&__src[16] - 1;
            if (*(_DWORD *)&__src[24] != 1)
            {
              v427 = 0;
              v1069 = HIDWORD(v1171);
              v1065 = *(unsigned int *)&__src[44];
              v1084 = 4 * *(unsigned int *)&__src[36];
              while (1)
              {
                v1073 = v427;
                v1078 = v425;
                v1081 = v424;
                if (v1096)
                {
                  v428 = 0;
                  while (1)
                  {
                    v429 = v425;
                    v430 = v424;
                    if (v423)
                    {
                      if (!(_DWORD)v1107)
                        goto LABEL_590;
                      v431 = 0;
                      v430 = v424;
                      v429 = v425;
                      do
                      {
                        if (!v430)
                        {
                          sub_2109EDAB0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4);
                          v432 = atomic_load((unsigned __int8 *)&qword_254A75F38);
                          if ((v432 & 1) == 0 && __cxa_guard_acquire(&qword_254A75F38))
                          {
                            __cxa_atexit((void (*)(void *))sub_2109EDF34, &qword_254A75F00, &dword_21089F000);
                            __cxa_guard_release(&qword_254A75F38);
                          }
                          if (byte_254A75F28)
                            v433 = byte_254A75F30 == 0;
                          else
                            v433 = 0;
                          if (!v433)
                          {
                            v434 = qword_254A75F00;
                            for (j = unk_254A75F08; v434 != j; v434 += 16)
                              (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v434)(*(_QWORD *)(v434 + 8), "ptr != nullptr || size == 0", 27, &unk_210A01421, 0);
                          }
                          v436 = atomic_load((unsigned __int8 *)&qword_254A75F38);
                          if ((v436 & 1) == 0 && __cxa_guard_acquire(&qword_254A75F38))
                          {
                            __cxa_atexit((void (*)(void *))sub_2109EDF34, &qword_254A75F00, &dword_21089F000);
                            __cxa_guard_release(&qword_254A75F38);
                          }
                          if (!byte_254A75F28)
                            goto LABEL_1649;
                          qword_254A75F18(unk_254A75F20, "ptr != nullptr || size == 0", 27, &unk_210A01421, 0);
                          v423 = v1114;
                        }
                        memmove(v429, v430, v426);
                        v430 += 4 * v1121;
                        v429 += 4 * v222;
                        ++v431;
                      }
                      while (v431 != v423);
                    }
                    if ((_DWORD)v1107 && !v430)
                      break;
                    if ((_DWORD)v1107)
                      goto LABEL_589;
LABEL_590:
                    v424 += 4 * v1091;
                    v425 += 4 * v1087;
                    if (++v428 == v1096)
                      goto LABEL_624;
                  }
                  sub_2109EDAB0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4);
                  v437 = atomic_load((unsigned __int8 *)&qword_254A75F38);
                  if ((v437 & 1) == 0 && __cxa_guard_acquire(&qword_254A75F38))
                  {
                    __cxa_atexit((void (*)(void *))sub_2109EDF34, &qword_254A75F00, &dword_21089F000);
                    __cxa_guard_release(&qword_254A75F38);
                  }
                  if (!byte_254A75F28 || byte_254A75F30)
                  {
                    v439 = qword_254A75F00;
                    for (k = unk_254A75F08; v439 != k; v439 += 16)
                      (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v439)(*(_QWORD *)(v439 + 8), "ptr != nullptr || size == 0", 27, &unk_210A01421, 0);
                  }
                  v440 = atomic_load((unsigned __int8 *)&qword_254A75F38);
                  if ((v440 & 1) == 0 && __cxa_guard_acquire(&qword_254A75F38))
                  {
                    __cxa_atexit((void (*)(void *))sub_2109EDF34, &qword_254A75F00, &dword_21089F000);
                    __cxa_guard_release(&qword_254A75F38);
                  }
                  if (!byte_254A75F28)
                    goto LABEL_1649;
                  qword_254A75F18(unk_254A75F20, "ptr != nullptr || size == 0", 27, &unk_210A01421, 0);
                  v423 = v1114;
LABEL_589:
                  memmove(v429, v430, v426);
                  goto LABEL_590;
                }
LABEL_624:
                if (v423)
                {
                  v441 = v423;
                  if (!(_DWORD)v1107)
                    goto LABEL_585;
                  do
                  {
                    if (!v424
                      && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
                    {
                      goto LABEL_1649;
                    }
                    memmove(v425, v424, v426);
                    v424 += v1084;
                    v425 += v1101;
                    --v441;
                  }
                  while (v441);
                }
                if ((_DWORD)v1107 && !v424)
                  break;
                if ((_DWORD)v1107)
                  goto LABEL_584;
LABEL_585:
                v424 = &v1081[4 * v1065];
                v425 = &v1078[4 * v1069];
                v427 = v1073 + 1;
                v423 = v1114;
                if (v1073 + 1 == v1071)
                  goto LABEL_1068;
              }
              if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
              {
                goto LABEL_1649;
              }
LABEL_584:
              memmove(v425, v424, v426);
              goto LABEL_585;
            }
LABEL_1068:
            if (!v1096)
            {
              v744 = v424;
              v745 = v425;
LABEL_1264:
              v733 = v745;
              if (v1114)
              {
                if ((_DWORD)v1107)
                {
                  v732 = v744;
                  while (v732
                       || !sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
                  {
                    memmove(v733, v732, v426);
                    v732 += 4 * v1121;
                    v733 += v1101;
                    if (!--v1114)
                      goto LABEL_1272;
                  }
                  goto LABEL_1649;
                }
                goto LABEL_1481;
              }
              v732 = v744;
LABEL_1272:
              v830 = v1107;
              if ((_DWORD)v1107 && !v732)
              {
LABEL_1475:
                if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
                {
                  goto LABEL_1649;
                }
LABEL_1478:
                v834 = v733;
                goto LABEL_1479;
              }
LABEL_1477:
              if (!v830)
                goto LABEL_1481;
              goto LABEL_1478;
            }
            v743 = 0;
            v744 = v424;
            v745 = v425;
            while (1)
            {
              v746 = v745;
              v747 = v744;
              if (v1114)
              {
                v748 = v1114;
                if ((_DWORD)v1107)
                {
                  while (v744
                       || !sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
                  {
                    memmove(v745, v744, v426);
                    v744 += 4 * v1121;
                    v745 += v1101;
                    if (!--v748)
                      goto LABEL_1080;
                  }
LABEL_1649:
                  abort();
                }
              }
              else
              {
LABEL_1080:
                if ((_DWORD)v1107 && !v744)
                {
                  if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
                  {
                    goto LABEL_1649;
                  }
LABEL_1071:
                  memmove(v745, v744, v426);
                  goto LABEL_1072;
                }
                if ((_DWORD)v1107)
                  goto LABEL_1071;
              }
LABEL_1072:
              v744 = &v747[4 * v1091];
              v745 = &v746[4 * v1087];
              if (++v743 == v1096)
                goto LABEL_1264;
            }
          }
          v228.i64[0] = __PAIR64__(*(unsigned int *)&__src[16], *(unsigned int *)&__src[8]);
          v228.i64[1] = *(_QWORD *)&__src[20];
          if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v228))) & 1) != 0 || !*(_DWORD *)&__src[12])
            goto LABEL_1481;
          *(_QWORD *)v1315 = 0;
          v1315[12] = __src[28];
          v1315[13] = __src[29];
          v1315[14] = __src[30];
          v1315[15] = __src[31];
          v1315[16] = v1170[12];
          v1315[17] = v1170[13];
          v1315[18] = v1170[14];
          v1315[19] = v1170[15];
          *(_DWORD *)&v1315[8] = *(_DWORD *)&__src[8] - 1;
          *(_DWORD *)&v1315[20] = *(_DWORD *)&__src[12] - 1;
          v1315[24] = __src[32];
          v1315[25] = __src[33];
          v1315[26] = __src[34];
          v1315[27] = __src[35];
          v1315[28] = v1170[16];
          v1315[29] = v1170[17];
          v1315[30] = v1170[18];
          v1315[31] = v1170[19];
          v1315[36] = __src[36];
          v1315[37] = __src[37];
          v1315[38] = __src[38];
          v1315[39] = __src[39];
          v1315[40] = v1170[20];
          v1315[41] = v1170[21];
          v1315[42] = v1170[22];
          v1315[43] = v1170[23];
          v229 = *(_DWORD *)&__src[20] - 1;
          *(_DWORD *)&v1315[32] = *(_DWORD *)&__src[16] - 1;
          *(_DWORD *)&v1315[44] = *(_DWORD *)&__src[20] - 1;
          v1315[48] = __src[40];
          v1315[49] = __src[41];
          v1315[50] = __src[42];
          v1315[51] = __src[43];
          v1315[52] = v1171;
          v1315[53] = BYTE1(v1171);
          v1315[54] = BYTE2(v1171);
          v1315[55] = BYTE3(v1171);
          BYTE4(v1316) = __src[44];
          BYTE5(v1316) = __src[45];
          BYTE6(v1316) = __src[46];
          HIBYTE(v1316) = __src[47];
          v1317 = HIDWORD(v1171);
          v230 = *(_DWORD **)__src;
          v231 = __dst[0];
          LODWORD(v1316) = *(_DWORD *)&__src[24] - 1;
          if (*(_DWORD *)&__src[24] == 1)
          {
LABEL_536:
            if (v229)
            {
              v396 = 0;
              do
              {
                sub_2109A6E1C(v1315, v230, v231);
                v230 += *(unsigned int *)&v1315[48];
                v231 += *(unsigned int *)&v1315[52];
                ++v396;
              }
              while (v396 < *(_DWORD *)&v1315[44]);
            }
            sub_2109A6E1C(v1315, v230, v231);
            goto LABEL_1481;
          }
          v232 = 0;
          while (1)
          {
            v1062 = v232;
            v233 = *(_DWORD *)&v1315[44];
            v1063 = v231;
            v1064 = v230;
            if (*(_DWORD *)&v1315[44])
              break;
LABEL_393:
            sub_2109A6E1C(v1315, v230, v231);
            v230 = &v1064[HIDWORD(v1316)];
            v231 = &v1063[v1317];
            v232 = v1062 + 1;
            if (v1062 + 1 >= v1316)
            {
              v229 = *(_DWORD *)&v1315[44];
              goto LABEL_536;
            }
          }
          v234 = *(_DWORD *)&v1315[32];
          v235 = *(unsigned int *)&v1315[48];
          v236 = *(unsigned int *)&v1315[52];
          v237 = *(_DWORD *)&v1315[20];
          v238 = *(_DWORD *)&v1315[8];
          if (*(_DWORD *)&v1315[32])
          {
            v240 = *(unsigned int *)&v1315[36];
            v239 = *(unsigned int *)&v1315[40];
            if (*(_DWORD *)&v1315[20])
            {
              if (*(_DWORD *)&v1315[8])
              {
                v241 = 0;
                v1070 = *(unsigned int *)&v1315[48];
                v242 = *(unsigned int *)&v1315[36];
                v243 = 4 * *(unsigned int *)&v1315[24];
                v244 = 4 * *(unsigned int *)&v1315[12];
                v1068 = *(unsigned int *)&v1315[52];
                v245 = *(unsigned int *)&v1315[40];
                v246 = *(unsigned int *)&v1315[28];
                v247 = 4 * *(unsigned int *)&v1315[16];
                v248 = &v230[(unint64_t)v243 / 4];
                v249 = &v231[v246];
                v250 = &v230[v242];
                v251 = &v231[v245];
                v252 = &v230[(unint64_t)v243 / 4 + v242];
                v253 = &v231[v246 + v245];
                v254 = &v230[*(unsigned int *)&v1315[36] + (unint64_t)*(unsigned int *)&v1315[24]];
                v255 = &v231[*(unsigned int *)&v1315[40] + (unint64_t)*(unsigned int *)&v1315[28]];
                v1072 = *(_DWORD *)&v1315[44];
                do
                {
                  v1113 = v241;
                  v256 = 0;
                  v1083 = v253;
                  v1086 = v252;
                  v1077 = v255;
                  v1080 = v254;
                  v257 = v252;
                  v1090 = v251;
                  v1095 = v250;
                  v1100 = v249;
                  v1106 = v248;
                  v258 = v249;
                  v259 = v248;
                  v1120 = v231;
                  v260 = v231;
                  v261 = v230;
                  do
                  {
                    v262 = 0;
                    v263 = v250;
                    v264 = v251;
                    v265 = v254;
                    v266 = v257;
                    v267 = v255;
                    v268 = v253;
                    v269 = v258;
                    v270 = v259;
                    v271 = v260;
                    v272 = v261;
                    do
                    {
                      v273 = v270;
                      v274 = v269;
                      v275 = v271;
                      v276 = v272;
                      v277 = v238;
                      do
                      {
                        *v275 = *v276;
                        v276 = (_DWORD *)((char *)v276 + v244);
                        v275 = (_DWORD *)((char *)v275 + v247);
                        --v277;
                      }
                      while (v277);
                      *v275 = *v276;
                      v272 = (_DWORD *)((char *)v272 + v243);
                      v271 = (_DWORD *)((char *)v271 + v246 * 4);
                      ++v262;
                      v270 = &v273[(unint64_t)v243 / 4];
                      v269 = &v274[v246];
                    }
                    while (v262 != v237);
                    v278 = v238;
                    do
                    {
                      *v274 = *v273;
                      v273 = (_DWORD *)((char *)v273 + v244);
                      v274 = (_DWORD *)((char *)v274 + v247);
                      --v278;
                    }
                    while (v278);
                    v261 = (_DWORD *)((char *)v261 + v242 * 4);
                    v260 = (_DWORD *)((char *)v260 + v245 * 4);
                    ++v256;
                    v259 = (_DWORD *)((char *)v259 + v242 * 4);
                    *v274 = *v273;
                    v258 = (_DWORD *)((char *)v258 + v245 * 4);
                    v250 = &v263[v242];
                    v251 = &v264[v245];
                    v254 = &v265[v242];
                    v257 = &v266[v242];
                    v255 = &v267[v245];
                    v253 = &v268[v245];
                  }
                  while (v256 != v234);
                  v279 = 0;
                  do
                  {
                    v280 = v265;
                    v281 = v266;
                    v282 = v267;
                    v283 = v268;
                    v284 = v264;
                    v285 = v263;
                    v286 = v238;
                    do
                    {
                      *v284 = *v285;
                      v285 = (_DWORD *)((char *)v285 + v244);
                      v284 = (_DWORD *)((char *)v284 + v247);
                      --v286;
                    }
                    while (v286);
                    v263 = (_DWORD *)((char *)v263 + v243);
                    v264 = (_DWORD *)((char *)v264 + v246 * 4);
                    ++v279;
                    v265 = (_DWORD *)((char *)v265 + v243);
                    *v284 = *v285;
                    v266 = (_DWORD *)((char *)v266 + v243);
                    v267 = (_DWORD *)((char *)v267 + v246 * 4);
                    v268 = &v283[v246];
                  }
                  while (v279 != v237);
                  v287 = v238;
                  do
                  {
                    v280 = (_DWORD *)((char *)v280 + v244);
                    *v283 = *v281;
                    v281 = (_DWORD *)((char *)v281 + v244);
                    v282 = (_DWORD *)((char *)v282 + v247);
                    v283 = (_DWORD *)((char *)v283 + v247);
                    --v287;
                  }
                  while (v287);
                  v230 = (_DWORD *)((char *)v230 + v1070 * 4);
                  v231 = &v1120[v1068];
                  v241 = v1113 + 1;
                  v248 = &v1106[v1070];
                  *v282 = *v280;
                  v249 = &v1100[v1068];
                  v250 = &v1095[v1070];
                  v251 = &v1090[v1068];
                  v254 = &v1080[v1070];
                  v252 = &v1086[v1070];
                  v255 = &v1077[v1068];
                  v253 = &v1083[v1068];
                }
                while (v1113 + 1 != v1072);
              }
              else
              {
                v322 = 0;
                v323 = 4 * *(unsigned int *)&v1315[48];
                v324 = *(unsigned int *)&v1315[36];
                v325 = 4 * *(unsigned int *)&v1315[24];
                v326 = *(unsigned int *)&v1315[40];
                v327 = &v230[v324];
                v328 = &v231[v326];
                v329 = 4 * *(unsigned int *)&v1315[52];
                v330 = 4 * *(unsigned int *)&v1315[28];
                do
                {
                  v331 = 0;
                  v332 = v328;
                  v333 = v327;
                  v334 = v231;
                  v335 = v230;
                  do
                  {
                    v336 = v333;
                    v337 = v332;
                    v338 = v334;
                    v339 = v335;
                    v340 = v237;
                    do
                    {
                      *v338 = *v339;
                      v339 = (_DWORD *)((char *)v339 + v325);
                      v338 = (_DWORD *)((char *)v338 + v330);
                      --v340;
                    }
                    while (v340);
                    *v338 = *v339;
                    v335 = (_DWORD *)((char *)v335 + v324 * 4);
                    v334 = (_DWORD *)((char *)v334 + v326 * 4);
                    ++v331;
                    v333 = &v336[v324];
                    v332 = &v337[v326];
                  }
                  while (v331 != v234);
                  v341 = v237;
                  do
                  {
                    *v337 = *v336;
                    v336 = (_DWORD *)((char *)v336 + v325);
                    v337 = (_DWORD *)((char *)v337 + v330);
                    --v341;
                  }
                  while (v341);
                  *v337 = *v336;
                  v230 = (_DWORD *)((char *)v230 + v323);
                  v231 = (_DWORD *)((char *)v231 + v329);
                  ++v322;
                  v327 = (_DWORD *)((char *)v327 + v323);
                  v328 = (_DWORD *)((char *)v328 + v329);
                }
                while (v322 != v233);
              }
            }
            else
            {
              v302 = 0;
              if (*(_DWORD *)&v1315[8])
              {
                v303 = 4 * *(unsigned int *)&v1315[48];
                v304 = *(unsigned int *)&v1315[36];
                v305 = 4 * *(unsigned int *)&v1315[12];
                v306 = 4 * *(unsigned int *)&v1315[52];
                v307 = *(unsigned int *)&v1315[40];
                v308 = 4 * *(unsigned int *)&v1315[16];
                v309 = &v230[v304];
                v310 = &v231[v307];
                do
                {
                  v311 = 0;
                  v312 = v310;
                  v313 = v309;
                  v314 = v231;
                  v315 = v230;
                  do
                  {
                    v316 = v313;
                    v317 = v312;
                    v318 = v314;
                    v319 = v315;
                    v320 = v238;
                    do
                    {
                      *v318 = *v319;
                      v319 = (_DWORD *)((char *)v319 + v305);
                      v318 = (_DWORD *)((char *)v318 + v308);
                      --v320;
                    }
                    while (v320);
                    *v318 = *v319;
                    v315 = (_DWORD *)((char *)v315 + v304 * 4);
                    v314 = (_DWORD *)((char *)v314 + v307 * 4);
                    ++v311;
                    v313 = &v316[v304];
                    v312 = &v317[v307];
                  }
                  while (v311 != v234);
                  v321 = v238;
                  do
                  {
                    *v317 = *v316;
                    v316 = (_DWORD *)((char *)v316 + v305);
                    v317 = (_DWORD *)((char *)v317 + v308);
                    --v321;
                  }
                  while (v321);
                  *v317 = *v316;
                  v230 = (_DWORD *)((char *)v230 + v303);
                  v231 = (_DWORD *)((char *)v231 + v306);
                  ++v302;
                  v309 = (_DWORD *)((char *)v309 + v303);
                  v310 = (_DWORD *)((char *)v310 + v306);
                }
                while (v302 != v233);
              }
              else
              {
                do
                {
                  v342 = v231;
                  v343 = v230;
                  v344 = v234;
                  do
                  {
                    *v342 = *v343;
                    v343 += v240;
                    v342 += v239;
                    --v344;
                  }
                  while (v344);
                  *v342 = *v343;
                  v230 += v235;
                  v231 += v236;
                  ++v302;
                }
                while (v302 != v233);
              }
            }
            goto LABEL_393;
          }
          v288 = 4 * *(unsigned int *)&v1315[48];
          v289 = 4 * *(unsigned int *)&v1315[24];
          v290 = 4 * *(unsigned int *)&v1315[12];
          v291 = 4 * *(unsigned int *)&v1315[52];
          v292 = 4 * *(unsigned int *)&v1315[28];
          v293 = 4 * *(unsigned int *)&v1315[16];
          while (1)
          {
            v294 = v231;
            v295 = v230;
            if (!v237)
              goto LABEL_423;
            v294 = v231;
            v295 = v230;
            v296 = v237;
            if (v238)
              break;
            do
            {
              *v294 = *v295;
              v295 = (_DWORD *)((char *)v295 + v289);
              v294 = (_DWORD *)((char *)v294 + v292);
              --v296;
            }
            while (v296);
LABEL_416:
            *v294 = *v295;
            v230 = (_DWORD *)((char *)v230 + v288);
            v231 = (_DWORD *)((char *)v231 + v291);
            if (++v234 == v233)
              goto LABEL_393;
          }
          v297 = 0;
          v294 = v231;
          v295 = v230;
          do
          {
            v298 = v294;
            v299 = v295;
            v300 = v238;
            do
            {
              *v298 = *v299;
              v299 = (_DWORD *)((char *)v299 + v290);
              v298 = (_DWORD *)((char *)v298 + v293);
              --v300;
            }
            while (v300);
            *v298 = *v299;
            v295 = (_DWORD *)((char *)v295 + v289);
            v294 = (_DWORD *)((char *)v294 + v292);
            ++v297;
          }
          while (v297 != v237);
LABEL_423:
          if (v238)
          {
            v301 = v238;
            do
            {
              *v294 = *v295;
              v295 = (_DWORD *)((char *)v295 + v290);
              v294 = (_DWORD *)((char *)v294 + v293);
              --v301;
            }
            while (v301);
          }
          goto LABEL_416;
        }
      }
    }
    v108 = v1281;
    if (v1281 == 1)
      goto LABEL_181;
LABEL_308:
    if (v108)
      sub_2108B9060();
    v1231 = v1269;
    v1232 = v1270;
    v1233 = v1271;
    v1234 = v1272;
    LOBYTE(v1235) = 0;
    v1242 = 0;
    if (v1280)
    {
      v1235 = &off_24CA7A158;
      v176 = v1274;
      if (*((_QWORD *)&v1274 + 1))
      {
        v177 = (unint64_t *)(*((_QWORD *)&v1274 + 1) + 8);
        do
          v178 = __ldxr(v177);
        while (__stxr(v178 + 1, v177));
        v179 = v1277;
        v180 = v1278;
        v181 = v1279;
        do
          v182 = __ldxr(v177);
        while (__stxr(v182 + 1, v177));
      }
      else
      {
        v179 = v1277;
        v180 = v1278;
        v181 = v1279;
      }
      v1236 = v176;
      v1237 = v1275;
      v1238 = v1276;
      v1239 = v179;
      v1240 = v180;
      v1241 = v181;
      if (*((_QWORD *)&v176 + 1))
      {
        v183 = (unint64_t *)(*((_QWORD *)&v176 + 1) + 8);
        do
          v184 = __ldaxr(v183);
        while (__stlxr(v184 - 1, v183));
        if (!v184)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v176 + 1) + 16))(*((_QWORD *)&v176 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v176 + 1));
        }
      }
      v1242 = 1;
    }
    if (v1294 != 1)
    {
      if (v1294)
        sub_2108B9060();
      v1203 = v1282;
      *(int64x2_t *)v1204 = v1283;
      *(int64x2_t *)&v1204[16] = v1284;
      *(_DWORD *)&v1204[32] = v1285;
      v1205[0] = 0;
      v1211 = 0;
      if (v1293)
      {
        *(_QWORD *)v1205 = &off_24CA7A158;
        v185 = v1287;
        if (*((_QWORD *)&v1287 + 1))
        {
          v186 = (unint64_t *)(*((_QWORD *)&v1287 + 1) + 8);
          do
            v187 = __ldxr(v186);
          while (__stxr(v187 + 1, v186));
          v188 = v1290;
          v189 = v1291;
          v190 = v1292;
          do
            v191 = __ldxr(v186);
          while (__stxr(v191 + 1, v186));
        }
        else
        {
          v188 = v1290;
          v189 = v1291;
          v190 = v1292;
        }
        *(_OWORD *)&v1205[8] = v185;
        v1206 = v1288;
        v1207 = v1289;
        v1208 = v188;
        v1209 = v189;
        v1210 = v190;
        if (*((_QWORD *)&v185 + 1))
        {
          v542 = (unint64_t *)(*((_QWORD *)&v185 + 1) + 8);
          do
            v543 = __ldaxr(v542);
          while (__stlxr(v543 - 1, v542));
          if (!v543)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v185 + 1) + 16))(*((_QWORD *)&v185 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v185 + 1));
          }
        }
        v1211 = 1;
      }
      sub_2108C06F4((uint64_t)&v1231, (uint64_t)v1315);
      sub_2108C06F4((uint64_t)&v1203, (uint64_t)__src);
      v544 = *(unsigned int *)&v1315[28];
      v545 = *(unsigned int *)&__src[28];
      if (*(_DWORD *)&v1315[28] != 1 || *(_DWORD *)&__src[28] != 1)
      {
        v556.i64[0] = __PAIR64__(*(unsigned int *)&v1315[16], *(unsigned int *)&v1315[8]);
        v556.i64[1] = *(_QWORD *)&v1315[20];
        if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v556))) & 1) == 0 && *(_DWORD *)&v1315[12])
        {
          v557 = *(_DWORD *)&v1315[8] - 1;
          v558 = *(_DWORD *)&v1315[12] - 1;
          v559 = *(_DWORD *)&v1315[16] - 1;
          v560 = *(unsigned int *)&v1315[32];
          v561 = *(unsigned int *)&v1315[36];
          v562 = *(unsigned int *)&__src[32];
          v563 = *(unsigned int *)&__src[36];
          v564 = *(_DWORD *)&v1315[20] - 1;
          v565 = *(unsigned int *)&v1315[40];
          v566 = *(unsigned int *)&__src[40];
          v567 = *(_BYTE **)v1315;
          v568 = *(_BYTE **)__src;
          v569 = *(_DWORD *)&v1315[24] - 1;
          if (*(_DWORD *)&v1315[24] != 1)
          {
            v570 = 0;
            v1123 = *(unsigned int *)&__src[44];
            v1116 = *(unsigned int *)&v1315[44];
            do
            {
              v571 = v568;
              v572 = v567;
              if (v564)
              {
                v573 = 0;
                v572 = v567;
                v571 = v568;
                do
                {
                  v574 = v572;
                  v575 = v571;
                  if (v559)
                  {
                    if (v558)
                    {
                      v576 = 0;
                      v574 = v572;
                      v575 = v571;
                      do
                      {
                        if (v557)
                        {
                          v577 = 0;
                          v578 = v574;
                          v579 = v575;
                          do
                          {
                            v580 = v557;
                            v581 = v578;
                            v582 = v579;
                            do
                            {
                              *v582 = *v581;
                              v581 += v544;
                              v582 += v545;
                              --v580;
                            }
                            while (v580);
                            *v582 = *v581;
                            v578 += v560;
                            v579 += v562;
                            ++v577;
                          }
                          while (v577 != v558);
                        }
                        else
                        {
                          v583 = v558;
                          v578 = v574;
                          v579 = v575;
                          do
                          {
                            *v579 = *v578;
                            v578 += v560;
                            v579 += v562;
                            --v583;
                          }
                          while (v583);
                        }
                        if (v557)
                        {
                          v584 = v557;
                          do
                          {
                            *v579 = *v578;
                            v578 += v544;
                            v579 += v545;
                            --v584;
                          }
                          while (v584);
                        }
                        *v579 = *v578;
                        v574 += v561;
                        v575 += v563;
                        ++v576;
                      }
                      while (v576 != v559);
                    }
                    else if (v557)
                    {
                      v585 = 0;
                      v574 = v572;
                      v575 = v571;
                      do
                      {
                        v586 = v557;
                        v587 = v574;
                        v588 = v575;
                        do
                        {
                          *v588 = *v587;
                          v587 += v544;
                          v588 += v545;
                          --v586;
                        }
                        while (v586);
                        *v588 = *v587;
                        v574 += v561;
                        v575 += v563;
                        ++v585;
                      }
                      while (v585 != v559);
                    }
                    else
                    {
                      v589 = v559;
                      v574 = v572;
                      v575 = v571;
                      do
                      {
                        *v575 = *v574;
                        v574 += v561;
                        v575 += v563;
                        --v589;
                      }
                      while (v589);
                    }
                  }
                  if (v558)
                  {
                    if (v557)
                    {
                      for (m = 0; m != v558; ++m)
                      {
                        v591 = v557;
                        v592 = v574;
                        v593 = v575;
                        do
                        {
                          *v593 = *v592;
                          v592 += v544;
                          v593 += v545;
                          --v591;
                        }
                        while (v591);
                        *v593 = *v592;
                        v574 += v560;
                        v575 += v562;
                      }
                    }
                    else
                    {
                      v594 = v558;
                      do
                      {
                        *v575 = *v574;
                        v574 += v560;
                        v575 += v562;
                        --v594;
                      }
                      while (v594);
                    }
                  }
                  if (v557)
                  {
                    v595 = v557;
                    do
                    {
                      *v575 = *v574;
                      v574 += v544;
                      v575 += v545;
                      --v595;
                    }
                    while (v595);
                  }
                  *v575 = *v574;
                  v572 += v565;
                  v571 += v566;
                  ++v573;
                }
                while (v573 != v564);
              }
              if (v559)
              {
                for (n = 0; n != v559; ++n)
                {
                  v597 = v572;
                  v598 = v571;
                  if (v558)
                  {
                    if (v557)
                    {
                      v599 = 0;
                      v597 = v572;
                      v598 = v571;
                      do
                      {
                        v600 = v557;
                        v601 = v597;
                        v602 = v598;
                        do
                        {
                          *v602 = *v601;
                          v601 += v544;
                          v602 += v545;
                          --v600;
                        }
                        while (v600);
                        *v602 = *v601;
                        v597 += v560;
                        v598 += v562;
                        ++v599;
                      }
                      while (v599 != v558);
                    }
                    else
                    {
                      v603 = v558;
                      v597 = v572;
                      v598 = v571;
                      do
                      {
                        *v598 = *v597;
                        v597 += v560;
                        v598 += v562;
                        --v603;
                      }
                      while (v603);
                    }
                  }
                  if (v557)
                  {
                    v604 = v557;
                    do
                    {
                      *v598 = *v597;
                      v597 += v544;
                      v598 += v545;
                      --v604;
                    }
                    while (v604);
                  }
                  *v598 = *v597;
                  v572 += v561;
                  v571 += v563;
                }
              }
              if (v558)
              {
                if (v557)
                {
                  for (ii = 0; ii != v558; ++ii)
                  {
                    v606 = v557;
                    v607 = v572;
                    v608 = v571;
                    do
                    {
                      *v608 = *v607;
                      v607 += v544;
                      v608 += v545;
                      --v606;
                    }
                    while (v606);
                    *v608 = *v607;
                    v572 += v560;
                    v571 += v562;
                  }
                }
                else
                {
                  v609 = v558;
                  do
                  {
                    *v571 = *v572;
                    v572 += v560;
                    v571 += v562;
                    --v609;
                  }
                  while (v609);
                }
              }
              if (v557)
              {
                v610 = v557;
                do
                {
                  *v571 = *v572;
                  v572 += v544;
                  v571 += v545;
                  --v610;
                }
                while (v610);
              }
              *v571 = *v572;
              v567 += v1116;
              v568 += v1123;
              ++v570;
            }
            while (v570 != v569);
          }
          if (v564)
          {
            for (jj = 0; jj != v564; ++jj)
            {
              v617 = v567;
              v618 = v568;
              if (v559)
              {
                if (v558)
                {
                  v619 = 0;
                  v617 = v567;
                  v618 = v568;
                  do
                  {
                    if (v557)
                    {
                      v620 = 0;
                      v621 = v617;
                      v622 = v618;
                      do
                      {
                        v623 = v557;
                        v624 = v621;
                        v625 = v622;
                        do
                        {
                          *v625 = *v624;
                          v624 += v544;
                          v625 += v545;
                          --v623;
                        }
                        while (v623);
                        *v625 = *v624;
                        v621 += v560;
                        v622 += v562;
                        ++v620;
                      }
                      while (v620 != v558);
                    }
                    else
                    {
                      v626 = v558;
                      v621 = v617;
                      v622 = v618;
                      do
                      {
                        *v622 = *v621;
                        v621 += v560;
                        v622 += v562;
                        --v626;
                      }
                      while (v626);
                    }
                    if (v557)
                    {
                      v627 = v557;
                      do
                      {
                        *v622 = *v621;
                        v621 += v544;
                        v622 += v545;
                        --v627;
                      }
                      while (v627);
                    }
                    *v622 = *v621;
                    v617 += v561;
                    v618 += v563;
                    ++v619;
                  }
                  while (v619 != v559);
                }
                else if (v557)
                {
                  v628 = 0;
                  v617 = v567;
                  v618 = v568;
                  do
                  {
                    v629 = v557;
                    v630 = v617;
                    v631 = v618;
                    do
                    {
                      *v631 = *v630;
                      v630 += v544;
                      v631 += v545;
                      --v629;
                    }
                    while (v629);
                    *v631 = *v630;
                    v617 += v561;
                    v618 += v563;
                    ++v628;
                  }
                  while (v628 != v559);
                }
                else
                {
                  v632 = v559;
                  v617 = v567;
                  v618 = v568;
                  do
                  {
                    *v618 = *v617;
                    v617 += v561;
                    v618 += v563;
                    --v632;
                  }
                  while (v632);
                }
              }
              if (v558)
              {
                if (v557)
                {
                  for (kk = 0; kk != v558; ++kk)
                  {
                    v634 = v557;
                    v635 = v617;
                    v636 = v618;
                    do
                    {
                      *v636 = *v635;
                      v635 += v544;
                      v636 += v545;
                      --v634;
                    }
                    while (v634);
                    *v636 = *v635;
                    v617 += v560;
                    v618 += v562;
                  }
                }
                else
                {
                  v637 = v558;
                  do
                  {
                    *v618 = *v617;
                    v617 += v560;
                    v618 += v562;
                    --v637;
                  }
                  while (v637);
                }
              }
              if (v557)
              {
                v638 = v557;
                do
                {
                  *v618 = *v617;
                  v617 += v544;
                  v618 += v545;
                  --v638;
                }
                while (v638);
              }
              *v618 = *v617;
              v567 += v565;
              v568 += v566;
            }
          }
          if (v559)
          {
            if (v558)
            {
              v639 = 0;
              if (v557)
              {
                do
                {
                  v640 = 0;
                  v641 = v567;
                  v642 = v568;
                  do
                  {
                    v643 = v557;
                    v644 = v641;
                    v645 = v642;
                    do
                    {
                      *v645 = *v644;
                      v644 += v544;
                      v645 += v545;
                      --v643;
                    }
                    while (v643);
                    *v645 = *v644;
                    v641 += v560;
                    v642 += v562;
                    ++v640;
                  }
                  while (v640 != v558);
                  v646 = v557;
                  do
                  {
                    *v642 = *v641;
                    v641 += v544;
                    v642 += v545;
                    --v646;
                  }
                  while (v646);
                  *v642 = *v641;
                  v567 += v561;
                  v568 += v563;
                  ++v639;
                }
                while (v639 != v559);
              }
              else
              {
                do
                {
                  v647 = v558;
                  v648 = v567;
                  v649 = v568;
                  do
                  {
                    *v649 = *v648;
                    v648 += v560;
                    v649 += v562;
                    --v647;
                  }
                  while (v647);
                  *v649 = *v648;
                  v567 += v561;
                  v568 += v563;
                  ++v639;
                }
                while (v639 != v559);
              }
            }
            else if (v557)
            {
              for (mm = 0; mm != v559; ++mm)
              {
                v785 = v557;
                v786 = v567;
                v787 = v568;
                do
                {
                  *v787 = *v786;
                  v786 += v544;
                  v787 += v545;
                  --v785;
                }
                while (v785);
                *v787 = *v786;
                v567 += v561;
                v568 += v563;
              }
            }
            else
            {
              do
              {
                *v568 = *v567;
                v567 += v561;
                v568 += v563;
                --v559;
              }
              while (v559);
            }
          }
          if (v558)
          {
            if (v557)
            {
              for (nn = 0; nn != v558; ++nn)
              {
                v789 = v557;
                v790 = v567;
                v791 = v568;
                do
                {
                  *v791 = *v790;
                  v790 += v544;
                  v791 += v545;
                  --v789;
                }
                while (v789);
                *v791 = *v790;
                v567 += v560;
                v568 += v562;
              }
            }
            else
            {
              do
              {
                *v568 = *v567;
                v567 += v560;
                v568 += v562;
                --v558;
              }
              while (v558);
            }
          }
          for (; v557; --v557)
          {
            *v568 = *v567;
            v567 += v544;
            v568 += v545;
          }
          *v568 = *v567;
        }
        goto LABEL_1189;
      }
      if (*(_DWORD *)&v1315[32] != *(_DWORD *)&__src[32] || *(_DWORD *)&v1315[32] != *(_DWORD *)&v1315[8])
      {
        *(_QWORD *)&v1173 = *(unsigned int *)&v1315[8];
        if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*(int32x4_t *)&v1315[8]))) & 1) == 0 && *(_DWORD *)&v1315[24])
        {
          *(_QWORD *)pixelBuffer = 0;
          *(_QWORD *)&pixelBuffer[12] = 0x100000001;
          *(_DWORD *)&pixelBuffer[8] = *(_DWORD *)&v1315[8] - 1;
          *(_DWORD *)&pixelBuffer[20] = *(_DWORD *)&v1315[12] - 1;
          pixelBuffer[24] = v1315[32];
          pixelBuffer[25] = v1315[33];
          pixelBuffer[26] = v1315[34];
          pixelBuffer[27] = v1315[35];
          pixelBuffer[28] = __src[32];
          pixelBuffer[29] = __src[33];
          pixelBuffer[30] = __src[34];
          pixelBuffer[31] = __src[35];
          pixelBuffer[36] = v1315[36];
          pixelBuffer[37] = v1315[37];
          pixelBuffer[38] = v1315[38];
          pixelBuffer[39] = v1315[39];
          pixelBuffer[40] = __src[36];
          pixelBuffer[41] = __src[37];
          pixelBuffer[42] = __src[38];
          pixelBuffer[43] = __src[39];
          *(_DWORD *)&pixelBuffer[32] = *(_DWORD *)&v1315[16] - 1;
          *(_DWORD *)&pixelBuffer[44] = *(_DWORD *)&v1315[20] - 1;
          pixelBuffer[48] = v1315[40];
          pixelBuffer[49] = v1315[41];
          pixelBuffer[50] = v1315[42];
          pixelBuffer[51] = v1315[43];
          pixelBuffer[52] = __src[40];
          pixelBuffer[53] = __src[41];
          pixelBuffer[54] = __src[42];
          pixelBuffer[55] = __src[43];
          v611 = *(unsigned int *)&v1315[44];
          v612 = *(unsigned int *)&__src[44];
          *(_QWORD *)((char *)&v1223 + 4) = *(unsigned int *)&v1315[44] | ((unint64_t)*(unsigned int *)&__src[44] << 32);
          v613 = *(char **)v1315;
          v614 = *(char **)__src;
          *(_OWORD *)__dst = 0u;
          *(_OWORD *)v1170 = 0u;
          v615 = *(_DWORD *)&v1315[24] - 1;
          LODWORD(v1223) = *(_DWORD *)&v1315[24] - 1;
          if (*(_DWORD *)&v1315[24] != 1)
          {
            do
            {
              sub_2109A70BC(pixelBuffer, (uint64_t)__dst, (size_t *)&v1173, v613, v614);
              v613 += v611;
              v614 += v612;
              --v615;
            }
            while (v615);
          }
          sub_2109A70BC(pixelBuffer, (uint64_t)__dst, (size_t *)&v1173, v613, v614);
        }
        goto LABEL_1189;
      }
      v546 = *(unsigned int *)&__src[36];
      v547 = (char *)*(unsigned int *)&v1315[36];
      v548 = (*(_DWORD *)&v1315[12] * *(_DWORD *)&v1315[32]);
      if (*(_DWORD *)&v1315[36] == *(_DWORD *)&__src[36] && *(_DWORD *)&v1315[36] == (_DWORD)v548)
      {
        v549 = *(unsigned int *)&__src[40];
        v550 = (char *)*(unsigned int *)&v1315[40];
        v551 = (*(_DWORD *)&v1315[16] * *(_DWORD *)&v1315[36]);
        if (*(_DWORD *)&v1315[40] == *(_DWORD *)&__src[40] && *(_DWORD *)&v1315[40] == (_DWORD)v551)
        {
          v552 = *(unsigned int *)&__src[44];
          v553 = *(unsigned int *)&v1315[44];
          v554 = (*(_DWORD *)&v1315[20] * *(_DWORD *)&v1315[40]);
          if (*(_DWORD *)&v1315[44] == *(_DWORD *)&__src[44] && *(_DWORD *)&v1315[44] == (_DWORD)v554)
          {
            v554 = (*(_DWORD *)&v1315[24] * *(_DWORD *)&v1315[44]);
            v555 = *(const void **)v1315;
            if (*(_QWORD *)v1315 || !(_DWORD)v554)
            {
              if (!(_DWORD)v554)
                goto LABEL_1189;
            }
            else if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
            {
              goto LABEL_1646;
            }
            v911 = *(void **)__src;
            v912 = v555;
            goto LABEL_1638;
          }
          if (!*(_DWORD *)&v1315[32]
            || !*(_DWORD *)&v1315[12]
            || !*(_DWORD *)&v1315[16]
            || !*(_DWORD *)&v1315[20]
            || !*(_DWORD *)&v1315[24])
          {
            goto LABEL_1189;
          }
          v831 = *(char **)__src;
          v832 = *(char **)v1315;
          v833 = *(_DWORD *)&v1315[24] - 1;
          if (*(_DWORD *)&v1315[24] == 1)
          {
LABEL_1544:
            if (!(_DWORD)v554 || v832)
            {
              if (!(_DWORD)v554)
                goto LABEL_1189;
            }
            else if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
            {
              goto LABEL_1646;
            }
            v911 = v831;
            v912 = v832;
LABEL_1638:
            memmove(v911, v912, v554);
            goto LABEL_1189;
          }
          if (!(_DWORD)v554)
            goto LABEL_1189;
          while (v832
               || !sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
          {
            memmove(v831, v832, v554);
            v832 += v553;
            v831 += v552;
            if (!--v833)
              goto LABEL_1544;
          }
LABEL_1646:
          abort();
        }
        v755.i64[0] = __PAIR64__(*(unsigned int *)&v1315[16], *(unsigned int *)&v1315[32]);
        v755.i64[1] = *(_QWORD *)&v1315[20];
        if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v755))) & 1) != 0 || !*(_DWORD *)&v1315[12])
          goto LABEL_1189;
        v756 = *(_DWORD *)&v1315[20] - 1;
        v757 = *(char **)v1315;
        v758 = *(char **)__src;
        v1126 = *(_DWORD *)&v1315[24] - 1;
        if (*(_DWORD *)&v1315[24] != 1)
        {
          v1119 = *(unsigned int *)&__src[44];
          v1111 = *(unsigned int *)&v1315[44];
          if (*(_DWORD *)&v1315[20] != 1)
          {
            if (!(_DWORD)v551)
            {
              v979 = (*(_DWORD *)&v1315[24] - 2) + 1;
              v757 = (char *)(*(_QWORD *)v1315 + v979 * *(unsigned int *)&v1315[44]);
              v758 = (char *)(*(_QWORD *)__src + v979 * *(unsigned int *)&__src[44]);
              goto LABEL_1643;
            }
            v759 = 0;
            while (1)
            {
              v1105 = v759;
              v760 = 0;
              v761 = v757;
              v762 = v758;
              do
              {
                while (v761)
                {
                  memmove(v762, v761, v551);
                  v761 = &v550[(_QWORD)v761];
                  v762 += v549;
                  if (++v760 == v756)
                    goto LABEL_1106;
                }
                sub_2109EDAB0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4);
                v763 = atomic_load((unsigned __int8 *)&qword_254A75F38);
                if ((v763 & 1) == 0 && __cxa_guard_acquire(&qword_254A75F38))
                {
                  __cxa_atexit((void (*)(void *))sub_2109EDF34, &qword_254A75F00, &dword_21089F000);
                  __cxa_guard_release(&qword_254A75F38);
                }
                if (byte_254A75F28)
                  v764 = byte_254A75F30 == 0;
                else
                  v764 = 0;
                if (!v764)
                {
                  v765 = qword_254A75F00;
                  for (i1 = unk_254A75F08; v765 != i1; v765 += 16)
                    (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v765)(*(_QWORD *)(v765 + 8), "ptr != nullptr || size == 0", 27, &unk_210A01421, 0);
                }
                v767 = atomic_load((unsigned __int8 *)&qword_254A75F38);
                if ((v767 & 1) == 0 && __cxa_guard_acquire(&qword_254A75F38))
                {
                  __cxa_atexit((void (*)(void *))sub_2109EDF34, &qword_254A75F00, &dword_21089F000);
                  __cxa_guard_release(&qword_254A75F38);
                }
                if (!byte_254A75F28)
                  goto LABEL_1646;
                qword_254A75F18(unk_254A75F20, "ptr != nullptr || size == 0", 27, &unk_210A01421, 0);
                memcpy(v762, 0, v551);
                v762 += v549;
                ++v760;
                v761 = v550;
              }
              while (v760 != v756);
              v761 = v550;
              if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
              {
                goto LABEL_1646;
              }
LABEL_1106:
              memmove(v762, v761, v551);
              v757 += v1111;
              v758 += v1119;
              v759 = v1105 + 1;
              if (v1105 + 1 == v1126)
                goto LABEL_1290;
            }
          }
          while (!(_DWORD)v551 || v757)
          {
            if ((_DWORD)v551)
              goto LABEL_1128;
LABEL_1129:
            v757 += v1111;
            v758 += v1119;
            if (!--v1126)
              goto LABEL_1290;
          }
          if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
          {
            goto LABEL_1646;
          }
LABEL_1128:
          memmove(v758, v757, v551);
          goto LABEL_1129;
        }
LABEL_1290:
        if (!v756)
        {
LABEL_1291:
          if (!(_DWORD)v551 || v757)
          {
            if (!(_DWORD)v551)
              goto LABEL_1189;
          }
          else if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
          {
            goto LABEL_1646;
          }
          memmove(v758, v757, v551);
          goto LABEL_1189;
        }
LABEL_1643:
        while (!(_DWORD)v551 || v757)
        {
          if ((_DWORD)v551)
            goto LABEL_1641;
LABEL_1642:
          v757 = &v550[(_QWORD)v757];
          v758 += v549;
          if (!--v756)
            goto LABEL_1291;
        }
        if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
        {
          goto LABEL_1646;
        }
LABEL_1641:
        memmove(v758, v757, v551);
        goto LABEL_1642;
      }
      v701.i64[0] = __PAIR64__(*(unsigned int *)&v1315[32], *(unsigned int *)&v1315[12]);
      v701.i64[1] = *(_QWORD *)&v1315[16];
      if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v701))) & 1) != 0 || !*(_DWORD *)&v1315[24])
        goto LABEL_1189;
      v702 = *(_DWORD *)&v1315[16] - 1;
      v1109 = *(_DWORD *)&v1315[20] - 1;
      v1103 = *(unsigned int *)&v1315[40];
      v1098 = *(unsigned int *)&__src[40];
      v703 = *(char **)v1315;
      v704 = *(char **)__src;
      v1082 = *(_DWORD *)&v1315[24] - 1;
      v1124 = *(_DWORD *)&v1315[16] - 1;
      if (*(_DWORD *)&v1315[24] == 1)
      {
LABEL_1146:
        if (v1109)
        {
          v772 = v704;
          if (v702)
          {
            if (!(_DWORD)v548)
              goto LABEL_1189;
            v773 = 0;
            while (1)
            {
              v774 = 0;
              v775 = v703;
              v776 = v703;
              v777 = v772;
              v778 = v772;
              do
              {
                while (v776)
                {
                  memmove(v778, v776, v548);
                  v776 = &v547[(_QWORD)v776];
                  v778 += v546;
                  if (++v774 == v1124)
                    goto LABEL_1150;
                }
                sub_2109EDAB0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4);
                v779 = atomic_load((unsigned __int8 *)&qword_254A75F38);
                if ((v779 & 1) == 0 && __cxa_guard_acquire(&qword_254A75F38))
                {
                  __cxa_atexit((void (*)(void *))sub_2109EDF34, &qword_254A75F00, &dword_21089F000);
                  __cxa_guard_release(&qword_254A75F38);
                }
                if (byte_254A75F28)
                  v780 = byte_254A75F30 == 0;
                else
                  v780 = 0;
                if (!v780)
                {
                  v781 = qword_254A75F00;
                  for (i2 = unk_254A75F08; v781 != i2; v781 += 16)
                    (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v781)(*(_QWORD *)(v781 + 8), "ptr != nullptr || size == 0", 27, &unk_210A01421, 0);
                }
                v783 = atomic_load((unsigned __int8 *)&qword_254A75F38);
                if ((v783 & 1) == 0 && __cxa_guard_acquire(&qword_254A75F38))
                {
                  __cxa_atexit((void (*)(void *))sub_2109EDF34, &qword_254A75F00, &dword_21089F000);
                  __cxa_guard_release(&qword_254A75F38);
                }
                if (!byte_254A75F28)
                  goto LABEL_1646;
                qword_254A75F18(unk_254A75F20, "ptr != nullptr || size == 0", 27, &unk_210A01421, 0);
                memcpy(v778, 0, v548);
                v778 += v546;
                ++v774;
                v776 = v547;
              }
              while (v774 != v1124);
              v776 = v547;
              if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
              {
                goto LABEL_1646;
              }
LABEL_1150:
              memmove(v778, v776, v548);
              v703 = &v775[v1103];
              v772 = &v777[v1098];
              if (++v773 == v1109)
                goto LABEL_1363;
            }
          }
          if ((_DWORD)v548)
          {
            while (v703
                 || !sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
            {
              memmove(v772, v703, v548);
              v703 += v1103;
              v772 += v1098;
              if (!--v1109)
                goto LABEL_1363;
            }
            goto LABEL_1646;
          }
        }
        else
        {
          v772 = v704;
LABEL_1363:
          v872 = v772;
          if (!v1124)
          {
LABEL_1370:
            if (!(_DWORD)v548 || v703)
            {
              if (!(_DWORD)v548)
                goto LABEL_1189;
            }
            else if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
            {
              goto LABEL_1646;
            }
            memmove(v872, v703, v548);
            goto LABEL_1189;
          }
          if ((_DWORD)v548)
          {
            while (v703
                 || !sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
            {
              memmove(v872, v703, v548);
              v703 = &v547[(_QWORD)v703];
              v872 += v546;
              if (!--v1124)
                goto LABEL_1370;
            }
            goto LABEL_1646;
          }
        }
LABEL_1189:
        if (!v1211)
          goto LABEL_1195;
        v539 = *(std::__shared_weak_count **)&v1205[16];
        if (!*(_QWORD *)&v1205[16])
          goto LABEL_1195;
        v792 = (unint64_t *)(*(_QWORD *)&v1205[16] + 8);
        do
          v541 = __ldaxr(v792);
        while (__stlxr(v541 - 1, v792));
        goto LABEL_1193;
      }
      v705 = 0;
      v1079 = *(unsigned int *)&__src[44];
      v1074 = *(unsigned int *)&v1315[44];
      while (1)
      {
        v1085 = v705;
        v1089 = v704;
        v1093 = v703;
        v706 = v703;
        if (v1109)
        {
          v707 = 0;
          v706 = v703;
          while (1)
          {
            v1117 = v707;
            v708 = v704;
            v709 = v706;
            if (v702)
            {
              if ((_DWORD)v548)
              {
                v710 = 0;
                v709 = v706;
                v708 = v704;
                while (1)
                {
                  if (!v709)
                  {
                    sub_2109EDAB0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4);
                    v711 = v548;
                    v712 = v546;
                    v713 = v547;
                    v714 = atomic_load((unsigned __int8 *)&qword_254A75F38);
                    if ((v714 & 1) == 0 && __cxa_guard_acquire(&qword_254A75F38))
                    {
                      __cxa_atexit((void (*)(void *))sub_2109EDF34, &qword_254A75F00, &dword_21089F000);
                      __cxa_guard_release(&qword_254A75F38);
                    }
                    if (byte_254A75F28)
                      v715 = byte_254A75F30 == 0;
                    else
                      v715 = 0;
                    if (!v715)
                    {
                      v717 = qword_254A75F00;
                      for (i3 = unk_254A75F08; v717 != i3; v717 += 16)
                        (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v717)(*(_QWORD *)(v717 + 8), "ptr != nullptr || size == 0", 27, &unk_210A01421, 0);
                    }
                    v718 = atomic_load((unsigned __int8 *)&qword_254A75F38);
                    if ((v718 & 1) == 0 && __cxa_guard_acquire(&qword_254A75F38))
                    {
                      __cxa_atexit((void (*)(void *))sub_2109EDF34, &qword_254A75F00, &dword_21089F000);
                      __cxa_guard_release(&qword_254A75F38);
                    }
                    if (!byte_254A75F28)
                      goto LABEL_1646;
                    v547 = v713;
                    v546 = v712;
                    v548 = v711;
                    qword_254A75F18(unk_254A75F20, "ptr != nullptr || size == 0", 27, &unk_210A01421, 0);
                    v702 = v1124;
                  }
                  memmove(v708, v709, v548);
                  v709 = &v547[(_QWORD)v709];
                  v708 += v546;
                  if (++v710 == v702)
                    goto LABEL_1004;
                }
              }
              goto LABEL_984;
            }
LABEL_1004:
            if ((_DWORD)v548 && !v709)
              break;
            if ((_DWORD)v548)
              goto LABEL_983;
LABEL_984:
            v706 += v1103;
            v704 += v1098;
            v707 = v1117 + 1;
            if (v1117 + 1 == v1109)
              goto LABEL_1018;
          }
          sub_2109EDAB0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4);
          v719 = atomic_load((unsigned __int8 *)&qword_254A75F38);
          if ((v719 & 1) == 0 && __cxa_guard_acquire(&qword_254A75F38))
          {
            __cxa_atexit((void (*)(void *))sub_2109EDF34, &qword_254A75F00, &dword_21089F000);
            __cxa_guard_release(&qword_254A75F38);
          }
          if (!byte_254A75F28 || byte_254A75F30)
          {
            v721 = qword_254A75F00;
            for (i4 = unk_254A75F08; v721 != i4; v721 += 16)
              (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v721)(*(_QWORD *)(v721 + 8), "ptr != nullptr || size == 0", 27, &unk_210A01421, 0);
          }
          v722 = atomic_load((unsigned __int8 *)&qword_254A75F38);
          if ((v722 & 1) == 0 && __cxa_guard_acquire(&qword_254A75F38))
          {
            __cxa_atexit((void (*)(void *))sub_2109EDF34, &qword_254A75F00, &dword_21089F000);
            __cxa_guard_release(&qword_254A75F38);
          }
          if (!byte_254A75F28)
            goto LABEL_1646;
          qword_254A75F18(unk_254A75F20, "ptr != nullptr || size == 0", 27, &unk_210A01421, 0);
          v702 = v1124;
LABEL_983:
          memmove(v708, v709, v548);
          goto LABEL_984;
        }
LABEL_1018:
        if (v702)
        {
          if ((_DWORD)v548)
          {
            v723 = 0;
            v724 = v1124;
            while (1)
            {
              if (!v706)
              {
                sub_2109EDAB0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4);
                v725 = atomic_load((unsigned __int8 *)&qword_254A75F38);
                if ((v725 & 1) == 0 && __cxa_guard_acquire(&qword_254A75F38))
                {
                  __cxa_atexit((void (*)(void *))sub_2109EDF34, &qword_254A75F00, &dword_21089F000);
                  __cxa_guard_release(&qword_254A75F38);
                }
                if (byte_254A75F28)
                  v726 = byte_254A75F30 == 0;
                else
                  v726 = 0;
                if (!v726)
                {
                  v728 = qword_254A75F00;
                  for (i5 = unk_254A75F08; v728 != i5; v728 += 16)
                    (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v728)(*(_QWORD *)(v728 + 8), "ptr != nullptr || size == 0", 27, &unk_210A01421, 0);
                }
                v729 = atomic_load((unsigned __int8 *)&qword_254A75F38);
                if ((v729 & 1) == 0 && __cxa_guard_acquire(&qword_254A75F38))
                {
                  __cxa_atexit((void (*)(void *))sub_2109EDF34, &qword_254A75F00, &dword_21089F000);
                  __cxa_guard_release(&qword_254A75F38);
                }
                if (!byte_254A75F28)
                  goto LABEL_1646;
                qword_254A75F18(unk_254A75F20, "ptr != nullptr || size == 0", 27, &unk_210A01421, 0);
                v724 = v1124;
              }
              memmove(v704, v706, v548);
              v706 = &v547[(_QWORD)v706];
              v704 += v546;
              if (++v723 == v724)
                goto LABEL_1037;
            }
          }
          goto LABEL_979;
        }
LABEL_1037:
        if ((_DWORD)v548 && !v706)
          break;
        if ((_DWORD)v548)
          goto LABEL_978;
LABEL_979:
        v703 = &v1093[v1074];
        v704 = &v1089[v1079];
        v705 = v1085 + 1;
        v702 = v1124;
        if (v1085 + 1 == v1082)
          goto LABEL_1146;
      }
      if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
      {
        goto LABEL_1646;
      }
LABEL_978:
      memmove(v704, v706, v548);
      goto LABEL_979;
    }
    v1194 = v1282;
    *(int64x2_t *)v1195 = v1283;
    *(int64x2_t *)&v1195[16] = v1284;
    *(_DWORD *)&v1195[32] = v1285;
    v1196[0] = 0;
    v1202 = 0;
    if (v1293)
    {
      *(_QWORD *)v1196 = &off_24CA7A158;
      v192 = v1287;
      if (*((_QWORD *)&v1287 + 1))
      {
        v193 = (unint64_t *)(*((_QWORD *)&v1287 + 1) + 8);
        do
          v194 = __ldxr(v193);
        while (__stxr(v194 + 1, v193));
        v195 = v1290;
        v196 = v1291;
        v197 = v1292;
        do
          v198 = __ldxr(v193);
        while (__stxr(v198 + 1, v193));
      }
      else
      {
        v195 = v1290;
        v196 = v1291;
        v197 = v1292;
      }
      *(_OWORD *)&v1196[8] = v192;
      v1197 = v1288;
      v1198 = v1289;
      v1199 = v195;
      v1200 = v196;
      v1201 = v197;
      if (*((_QWORD *)&v192 + 1))
      {
        v442 = (unint64_t *)(*((_QWORD *)&v192 + 1) + 8);
        do
          v443 = __ldaxr(v442);
        while (__stlxr(v443 - 1, v442));
        if (!v443)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v192 + 1) + 16))(*((_QWORD *)&v192 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v192 + 1));
        }
      }
      v1202 = 1;
    }
    sub_2108C06F4((uint64_t)&v1231, (uint64_t)v1315);
    sub_2108C23D4((uint64_t)&v1194, (uint64_t)__src);
    v444 = *(float *)&v1315[20];
    v445.i64[0] = __PAIR64__(*(unsigned int *)&v1315[16], *(unsigned int *)&v1315[8]);
    v445.i64[1] = *(_QWORD *)&v1315[20];
    if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v445))) & 1) == 0 && *(_DWORD *)&v1315[12])
    {
      pixelBuffer[12] = v1315[28];
      pixelBuffer[13] = v1315[29];
      pixelBuffer[14] = v1315[30];
      pixelBuffer[15] = v1315[31];
      pixelBuffer[16] = __src[28];
      pixelBuffer[17] = __src[29];
      pixelBuffer[18] = __src[30];
      pixelBuffer[19] = __src[31];
      *(_DWORD *)&pixelBuffer[8] = *(_DWORD *)&v1315[8] - 1;
      *(_DWORD *)&pixelBuffer[20] = *(_DWORD *)&v1315[12] - 1;
      pixelBuffer[24] = v1315[32];
      pixelBuffer[25] = v1315[33];
      pixelBuffer[26] = v1315[34];
      pixelBuffer[27] = v1315[35];
      pixelBuffer[28] = __src[32];
      pixelBuffer[29] = __src[33];
      pixelBuffer[30] = __src[34];
      pixelBuffer[31] = __src[35];
      *(_QWORD *)pixelBuffer = 0;
      pixelBuffer[36] = v1315[36];
      pixelBuffer[37] = v1315[37];
      pixelBuffer[38] = v1315[38];
      pixelBuffer[39] = v1315[39];
      pixelBuffer[40] = __src[36];
      pixelBuffer[41] = __src[37];
      pixelBuffer[42] = __src[38];
      pixelBuffer[43] = __src[39];
      v446 = *(_DWORD *)&v1315[20] - 1;
      *(_DWORD *)&pixelBuffer[32] = *(_DWORD *)&v1315[16] - 1;
      *(_DWORD *)&pixelBuffer[44] = *(_DWORD *)&v1315[20] - 1;
      pixelBuffer[48] = v1315[40];
      pixelBuffer[49] = v1315[41];
      pixelBuffer[50] = v1315[42];
      pixelBuffer[51] = v1315[43];
      pixelBuffer[52] = __src[40];
      pixelBuffer[53] = __src[41];
      pixelBuffer[54] = __src[42];
      pixelBuffer[55] = __src[43];
      *(_QWORD *)((char *)&v1223 + 4) = *(unsigned int *)&v1315[44] | ((unint64_t)*(unsigned int *)&__src[44] << 32);
      v447 = *(_BYTE **)v1315;
      v448 = *(float **)__src;
      LODWORD(v1223) = *(_DWORD *)&v1315[24] - 1;
      if (*(_DWORD *)&v1315[24] == 1)
      {
LABEL_707:
        if (v446)
        {
          v538 = 0;
          do
          {
            v444 = sub_2108C2594(pixelBuffer, v447, v448, v444);
            v447 += *(unsigned int *)&pixelBuffer[48];
            v448 += *(unsigned int *)&pixelBuffer[52];
            ++v538;
          }
          while (v538 < *(_DWORD *)&pixelBuffer[44]);
        }
        sub_2108C2594(pixelBuffer, v447, v448, v444);
        goto LABEL_711;
      }
      v449 = 0;
      while (2)
      {
        v1088 = v449;
        v450 = *(_DWORD *)&pixelBuffer[44];
        v1092 = v448;
        v1097 = v447;
        v451 = v448;
        v452 = v447;
        if (!*(_DWORD *)&pixelBuffer[44])
        {
LABEL_646:
          v444 = sub_2108C2594(pixelBuffer, v452, v451, v444);
          v447 = &v1097[DWORD1(v1223)];
          v448 = &v1092[DWORD2(v1223)];
          v449 = v1088 + 1;
          if (v1088 + 1 >= v1223)
          {
            v446 = *(_DWORD *)&pixelBuffer[44];
            goto LABEL_707;
          }
          continue;
        }
        break;
      }
      v453 = *(_DWORD *)&pixelBuffer[32];
      v454 = *(unsigned int *)&pixelBuffer[48];
      v455 = *(_DWORD *)&pixelBuffer[20];
      v456 = *(_DWORD *)&pixelBuffer[8];
      if (*(_DWORD *)&pixelBuffer[32])
      {
        v457 = *(unsigned int *)&pixelBuffer[36];
        v458 = *(unsigned int *)&pixelBuffer[40];
        v452 = v1097;
        if (*(_DWORD *)&pixelBuffer[20])
        {
          v1115 = 4 * *(unsigned int *)&pixelBuffer[52];
          v459 = *(unsigned int *)&pixelBuffer[24];
          v460 = *(unsigned int *)&pixelBuffer[40];
          v461 = 4 * *(unsigned int *)&pixelBuffer[28];
          v462 = 0;
          if (*(_DWORD *)&pixelBuffer[8])
          {
            v463 = *(unsigned int *)&pixelBuffer[12];
            v464 = 4 * *(unsigned int *)&pixelBuffer[16];
            v465 = &v448[(unint64_t)v461 / 4];
            v466 = &v448[v460];
            v467 = &v448[*(unsigned int *)&pixelBuffer[40] + (unint64_t)*(unsigned int *)&pixelBuffer[28]];
            v468 = &v448[(unint64_t)v461 / 4 + v460];
            v451 = v448;
            v1108 = *(_DWORD *)&pixelBuffer[44];
            v1102 = *(unsigned int *)&pixelBuffer[48];
            do
            {
              v1122 = v462;
              v469 = 0;
              v470 = v468;
              v471 = v467;
              v472 = v466;
              v473 = v465;
              v474 = v451;
              v475 = v452;
              do
              {
                v476 = 0;
                v477 = v472;
                v478 = v471;
                v479 = v470;
                v480 = v473;
                v481 = v474;
                v482 = v475;
                do
                {
                  v483 = v480;
                  v484 = v481;
                  v485 = v456;
                  v486 = v482;
                  do
                  {
                    LOBYTE(v444) = *v486;
                    v444 = (float)LODWORD(v444);
                    *v484 = v444;
                    v486 += v463;
                    v484 = (float *)((char *)v484 + v464);
                    --v485;
                  }
                  while (v485);
                  LOBYTE(v444) = *v486;
                  v444 = (float)LODWORD(v444);
                  *v484 = v444;
                  v482 += v459;
                  v481 = (float *)((char *)v481 + v461);
                  ++v476;
                  v480 = &v483[(unint64_t)v461 / 4];
                }
                while (v476 != v455);
                v487 = v456;
                do
                {
                  LOBYTE(v444) = *v482;
                  v444 = (float)LODWORD(v444);
                  *v483 = v444;
                  v482 += v463;
                  v483 = (float *)((char *)v483 + v464);
                  --v487;
                }
                while (v487);
                LOBYTE(v444) = *v482;
                v475 += v457;
                v474 = (float *)((char *)v474 + v460 * 4);
                ++v469;
                v473 = (float *)((char *)v473 + v460 * 4);
                v444 = (float)LODWORD(v444);
                *v483 = v444;
                v472 = &v477[v460];
                v471 = &v478[v460];
                v470 = &v479[v460];
              }
              while (v469 != v453);
              v488 = 0;
              do
              {
                v489 = v478;
                v490 = v479;
                v491 = v477;
                v492 = v456;
                v493 = v475;
                do
                {
                  LOBYTE(v444) = *v493;
                  v444 = (float)LODWORD(v444);
                  *v491 = v444;
                  v493 += v463;
                  v491 = (float *)((char *)v491 + v464);
                  --v492;
                }
                while (v492);
                LOBYTE(v444) = *v493;
                v444 = (float)LODWORD(v444);
                *v491 = v444;
                v475 += v459;
                v477 = (float *)((char *)v477 + v461);
                ++v488;
                v478 = (float *)((char *)v478 + v461);
                v479 = (float *)((char *)v479 + v461);
              }
              while (v488 != v455);
              v494 = v456;
              do
              {
                LOBYTE(v444) = *v475;
                v444 = (float)LODWORD(v444);
                *v490 = v444;
                v475 += v463;
                v489 = (float *)((char *)v489 + v464);
                v490 = (float *)((char *)v490 + v464);
                --v494;
              }
              while (v494);
              LOBYTE(v444) = *v475;
              v452 += v1102;
              v451 = (float *)((char *)v451 + v1115);
              v462 = v1122 + 1;
              v465 = (float *)((char *)v465 + v1115);
              v444 = (float)LODWORD(v444);
              *v489 = v444;
              v466 = (float *)((char *)v466 + v1115);
              v467 = (float *)((char *)v467 + v1115);
              v468 = (float *)((char *)v468 + v1115);
            }
            while (v1122 + 1 != v1108);
          }
          else
          {
            v523 = &v448[v460];
            v451 = v448;
            do
            {
              v524 = 0;
              v525 = v523;
              v526 = v451;
              v527 = v452;
              do
              {
                v528 = v525;
                v529 = v526;
                v530 = v455;
                v531 = v527;
                do
                {
                  LOBYTE(v444) = *v531;
                  v444 = (float)LODWORD(v444);
                  *v529 = v444;
                  v531 += v459;
                  v529 = (float *)((char *)v529 + v461);
                  --v530;
                }
                while (v530);
                LOBYTE(v444) = *v531;
                v444 = (float)LODWORD(v444);
                *v529 = v444;
                v527 += v457;
                v526 = (float *)((char *)v526 + v460 * 4);
                ++v524;
                v525 = &v528[v460];
              }
              while (v524 != v453);
              v532 = v455;
              do
              {
                LOBYTE(v444) = *v527;
                v444 = (float)LODWORD(v444);
                *v528 = v444;
                v527 += v459;
                v528 = (float *)((char *)v528 + v461);
                --v532;
              }
              while (v532);
              LOBYTE(v444) = *v527;
              v444 = (float)LODWORD(v444);
              *v528 = v444;
              v452 += v454;
              v451 = (float *)((char *)v451 + v1115);
              ++v462;
              v523 = (float *)((char *)v523 + v1115);
            }
            while (v462 != v450);
          }
        }
        else if (*(_DWORD *)&pixelBuffer[8])
        {
          v508 = 0;
          v509 = 4 * *(unsigned int *)&pixelBuffer[52];
          v510 = *(unsigned int *)&pixelBuffer[40];
          v511 = *(unsigned int *)&pixelBuffer[12];
          v512 = 4 * *(unsigned int *)&pixelBuffer[16];
          v513 = &v448[v510];
          v451 = v448;
          do
          {
            v514 = 0;
            v515 = v513;
            v516 = v451;
            v517 = v452;
            do
            {
              v518 = v515;
              v519 = v516;
              v520 = v456;
              v521 = v517;
              do
              {
                LOBYTE(v444) = *v521;
                v444 = (float)LODWORD(v444);
                *v519 = v444;
                v521 += v511;
                v519 = (float *)((char *)v519 + v512);
                --v520;
              }
              while (v520);
              LOBYTE(v444) = *v521;
              v444 = (float)LODWORD(v444);
              *v519 = v444;
              v517 += v457;
              v516 = (float *)((char *)v516 + v510 * 4);
              ++v514;
              v515 = &v518[v510];
            }
            while (v514 != v453);
            v522 = v456;
            do
            {
              LOBYTE(v444) = *v517;
              v444 = (float)LODWORD(v444);
              *v518 = v444;
              v517 += v511;
              v518 = (float *)((char *)v518 + v512);
              --v522;
            }
            while (v522);
            LOBYTE(v444) = *v517;
            v444 = (float)LODWORD(v444);
            *v518 = v444;
            v452 += v454;
            v451 = (float *)((char *)v451 + v509);
            ++v508;
            v513 = (float *)((char *)v513 + v509);
          }
          while (v508 != v450);
        }
        else
        {
          v533 = 0;
          v534 = 4 * *(unsigned int *)&pixelBuffer[52];
          v451 = v448;
          do
          {
            v535 = v451;
            v536 = v453;
            v537 = v452;
            do
            {
              LOBYTE(v444) = *v537;
              v444 = (float)LODWORD(v444);
              *v535 = v444;
              v537 += v457;
              v535 += v458;
              --v536;
            }
            while (v536);
            LOBYTE(v444) = *v537;
            v444 = (float)LODWORD(v444);
            *v535 = v444;
            v452 += v454;
            v451 = (float *)((char *)v451 + v534);
            ++v533;
          }
          while (v533 != v450);
        }
        goto LABEL_646;
      }
      v495 = *(unsigned int *)&pixelBuffer[24];
      v496 = 4 * *(unsigned int *)&pixelBuffer[52];
      v497 = *(unsigned int *)&pixelBuffer[12];
      v498 = 4 * *(unsigned int *)&pixelBuffer[28];
      v499 = 4 * *(unsigned int *)&pixelBuffer[16];
      v451 = v448;
      v452 = v1097;
      while (2)
      {
        v500 = v452;
        v501 = v451;
        if (v455)
        {
          v501 = v451;
          v502 = v455;
          v500 = v452;
          if (v456)
          {
            v503 = 0;
            v501 = v451;
            v500 = v452;
            do
            {
              v504 = v501;
              v505 = v456;
              v506 = v500;
              do
              {
                LOBYTE(v444) = *v506;
                v444 = (float)LODWORD(v444);
                *v504 = v444;
                v506 += v497;
                v504 = (float *)((char *)v504 + v499);
                --v505;
              }
              while (v505);
              LOBYTE(v444) = *v506;
              v444 = (float)LODWORD(v444);
              *v504 = v444;
              v500 += v495;
              v501 = (float *)((char *)v501 + v498);
              ++v503;
            }
            while (v503 != v455);
            goto LABEL_676;
          }
          do
          {
            LOBYTE(v444) = *v500;
            v444 = (float)LODWORD(v444);
            *v501 = v444;
            v500 += v495;
            v501 = (float *)((char *)v501 + v498);
            --v502;
          }
          while (v502);
        }
        else
        {
LABEL_676:
          if (v456)
          {
            v507 = v456;
            do
            {
              LOBYTE(v444) = *v500;
              v444 = (float)LODWORD(v444);
              *v501 = v444;
              v500 += v497;
              v501 = (float *)((char *)v501 + v499);
              --v507;
            }
            while (v507);
          }
        }
        LOBYTE(v444) = *v500;
        v444 = (float)LODWORD(v444);
        *v501 = v444;
        v452 += v454;
        v451 = (float *)((char *)v451 + v496);
        if (++v453 == v450)
          goto LABEL_646;
        continue;
      }
    }
LABEL_711:
    if (!v1202)
      goto LABEL_1195;
    v539 = *(std::__shared_weak_count **)&v1196[16];
    if (!*(_QWORD *)&v1196[16])
      goto LABEL_1195;
    v540 = (unint64_t *)(*(_QWORD *)&v1196[16] + 8);
    do
      v541 = __ldaxr(v540);
    while (__stlxr(v541 - 1, v540));
LABEL_1193:
    if (!v541)
    {
      ((void (*)(std::__shared_weak_count *))v539->__on_zero_shared)(v539);
      std::__shared_weak_count::__release_weak(v539);
    }
LABEL_1195:
    if (v1242)
    {
      v793 = (std::__shared_weak_count *)*((_QWORD *)&v1236 + 1);
      if (*((_QWORD *)&v1236 + 1))
      {
        v794 = (unint64_t *)(*((_QWORD *)&v1236 + 1) + 8);
        do
          v795 = __ldaxr(v794);
        while (__stlxr(v795 - 1, v794));
LABEL_1497:
        if (!v795)
        {
          ((void (*)(std::__shared_weak_count *))v793->__on_zero_shared)(v793);
          std::__shared_weak_count::__release_weak(v793);
        }
      }
    }
LABEL_1499:
    v53 = operator new();
    v1059 &= 0xFFFFFFFFFFFFFF00;
    *(_QWORD *)v53 = v1059;
    *(_BYTE *)(v53 + 23) = 0;
    v60 = (std::__shared_weak_count *)operator new();
    v60->__vftable = (std::__shared_weak_count_vtbl *)&unk_24CA7A1D8;
    v60->__shared_owners_ = 0;
    v60->__shared_weak_owners_ = 0;
    v60[1].__vftable = (std::__shared_weak_count_vtbl *)v53;
    if (v1281 != -1)
      ((void (*)(int64x2_t *, int64x2_t *))off_24CA82F08[v1281])(&v1231, &v1269);
    if (v1294 != -1)
      ((void (*)(int64x2_t *, int64x2_t *))off_24CA82F08[v1294])(&v1269, &v1282);
    v61 = 0;
LABEL_1504:
    *(_BYTE *)(a1 + 8) = v61;
    v922 = (unint64_t *)&v60->__shared_owners_;
    do
      v923 = __ldxr(v922);
    while (__stxr(v923 + 1, v922));
    v924 = *(std::__shared_weak_count **)(a1 + 24);
    *(_QWORD *)(a1 + 16) = v53;
    *(_QWORD *)(a1 + 24) = v60;
    if (v924)
    {
      v925 = (unint64_t *)&v924->__shared_owners_;
      do
        v926 = __ldaxr(v925);
      while (__stlxr(v926 - 1, v925));
      if (!v926)
      {
        ((void (*)(std::__shared_weak_count *))v924->__on_zero_shared)(v924);
        std::__shared_weak_count::__release_weak(v924);
      }
    }
    do
      v927 = __ldaxr(v922);
    while (__stlxr(v927 - 1, v922));
    if (v927)
    {
      if (!v1137)
        goto LABEL_1520;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
      if (!v1137)
        goto LABEL_1520;
    }
    v698 = (std::__shared_weak_count *)*((_QWORD *)&v1131 + 1);
    if (!*((_QWORD *)&v1131 + 1))
      goto LABEL_1520;
    v928 = (unint64_t *)(*((_QWORD *)&v1131 + 1) + 8);
    do
      v700 = __ldaxr(v928);
    while (__stlxr(v700 - 1, v928));
LABEL_1519:
    if (!v700)
    {
      ((void (*)(std::__shared_weak_count *))v698->__on_zero_shared)(v698);
      std::__shared_weak_count::__release_weak(v698);
      v929 = (_QWORD *)a1;
      if (*(_BYTE *)(a1 + 8))
      {
LABEL_1521:
        v930 = 0;
        if (!v1162)
          goto LABEL_1533;
        goto LABEL_1522;
      }
    }
    else
    {
LABEL_1520:
      v929 = (_QWORD *)a1;
      if (*(_BYTE *)(a1 + 8))
        goto LABEL_1521;
    }
    *v929 = &off_24CA79A00;
    v934 = (std::__shared_weak_count *)v929[3];
    if (!v934)
      goto LABEL_1532;
    v935 = (unint64_t *)&v934->__shared_owners_;
    do
      v936 = __ldaxr(v935);
    while (__stlxr(v936 - 1, v935));
    if (!v936)
    {
      ((void (*)(std::__shared_weak_count *))v934->__on_zero_shared)(v934);
      std::__shared_weak_count::__release_weak(v934);
      v930 = 1;
      if (!v1162)
        goto LABEL_1533;
    }
    else
    {
LABEL_1532:
      v930 = 1;
      if (!v1162)
        goto LABEL_1533;
    }
LABEL_1522:
    v931 = v1156;
    if (v1156)
    {
      v932 = (unint64_t *)&v1156->__shared_owners_;
      do
        v933 = __ldaxr(v932);
      while (__stlxr(v933 - 1, v932));
      if (!v933)
      {
        ((void (*)(std::__shared_weak_count *))v931->__on_zero_shared)(v931);
        std::__shared_weak_count::__release_weak(v931);
      }
    }
LABEL_1533:
    if ((v930 & 1) == 0)
      return;
    v4 = v1076 + 1;
  }
  while (v1076 + 1 != v1066);
LABEL_1647:
  *(_QWORD *)a1 = &off_24CA79A00;
  *(_BYTE *)(a1 + 8) = 0;
  v980 = operator new();
  *(_QWORD *)v980 = 0;
  *(_BYTE *)(v980 + 23) = 0;
  *(_QWORD *)(a1 + 16) = v980;
  v981 = (_QWORD *)operator new();
  *v981 = &unk_24CA7A1D8;
  v981[1] = 0;
  v981[2] = 0;
  v981[3] = v980;
  *(_QWORD *)(a1 + 24) = v981;
}

void sub_2109A4B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _QWORD *a66;
  void *v66;
  std::__shared_weak_count *v67;
  unint64_t v69;
  unint64_t v70;
  void *v71;
  unint64_t *p_shared_owners;
  unint64_t v73;

  v69 = STACK[0xA00];
  if (STACK[0xA00])
  {
    v70 = STACK[0xA08];
    v71 = (void *)STACK[0xA00];
    if (STACK[0xA08] != v69)
    {
      do
      {
        if (*(char *)(v70 - 1) < 0)
          operator delete(*(void **)(v70 - 24));
        v70 -= 24;
      }
      while (v70 != v69);
      v71 = (void *)STACK[0xA00];
    }
    STACK[0xA08] = v69;
    operator delete(v71);
  }
  if (SLOBYTE(STACK[0xA7F]) < 0)
    operator delete((void *)STACK[0xA68]);
  if (SLOBYTE(STACK[0xA67]) < 0)
    operator delete((void *)STACK[0xA50]);
  if (SLOBYTE(STACK[0xA2F]) < 0)
    operator delete((void *)STACK[0xA18]);
  __cxa_guard_abort(&qword_254A75D88);
  __cxa_free_exception(v66);
  if (v67)
  {
    p_shared_owners = (unint64_t *)&v67->__shared_owners_;
    do
      v73 = __ldaxr(p_shared_owners);
    while (__stlxr(v73 - 1, p_shared_owners));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  sub_2108C918C((uint64_t)&STACK[0x680]);
  sub_2108B0424((uint64_t)&STACK[0x780]);
  sub_2108B8630((uint64_t)&STACK[0xB00]);
  sub_2108B8264((uint64_t)&STACK[0x430]);
  if (SLOBYTE(STACK[0x4F7]) < 0)
    operator delete((void *)STACK[0x4E0]);
  sub_2108B0424((uint64_t)&STACK[0x260]);
  sub_2108AB288(a66);
  sub_2108B0424((uint64_t)&STACK[0x2F8]);
  _Unwind_Resume(a1);
}

void sub_2109A53D0(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  char v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  __int16 v22;
  unint64_t v23;
  int v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  char *v29;
  unint64_t v30;
  char *v31;
  char *v32;
  void *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t (**v40)();
  char v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  void *__p;
  char *v45;
  char v46;
  __int128 v47;
  unint64_t v48;
  _OWORD v49[3];
  int v50;
  uint64_t (**v51)();
  uint64_t v52;
  std::__shared_weak_count *v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  __int16 v58;
  char v59;
  int v60;
  _BYTE v61[9];

  sub_21099BCA4(a1, a2, (uint64_t)&v40);
  v4 = v41;
  if (v41 || !v46)
  {
    *(_QWORD *)a3 = &off_24CA79A00;
    *(_BYTE *)(a3 + 8) = v4;
    v5 = v43;
    *(_QWORD *)(a3 + 16) = v42;
    *(_QWORD *)(a3 + 24) = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    *(_BYTE *)(a3 + 32) = 0;
    *(_BYTE *)(a3 + 56) = 0;
    if (v46)
      goto LABEL_37;
  }
  else
  {
    *(_QWORD *)a3 = &off_24CA79A00;
    *(_BYTE *)(a3 + 8) = 0;
    v8 = v43;
    *(_QWORD *)(a3 + 16) = v42;
    *(_QWORD *)(a3 + 24) = v8;
    if (v8)
    {
      v9 = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
      if (!v46)
        sub_2108B1AA4();
    }
    v48 = 0;
    v47 = 0uLL;
    sub_2108B78D8((char **)&v47, 0xEEEEEEEEEEEEEEEFLL * ((v45 - (_BYTE *)__p) >> 3));
    v11 = (char *)__p;
    v12 = v45;
    if (__p != v45)
    {
      do
      {
        v13 = *(_OWORD *)v11;
        v14 = *((_OWORD *)v11 + 1);
        v15 = *((_OWORD *)v11 + 2);
        v50 = *((_DWORD *)v11 + 12);
        v49[1] = v14;
        v49[2] = v15;
        v49[0] = v13;
        LOBYTE(v51) = 0;
        v59 = 0;
        if (v11[112])
        {
          v51 = &off_24CA79890;
          v16 = *((_QWORD *)v11 + 8);
          v17 = (std::__shared_weak_count *)*((_QWORD *)v11 + 9);
          if (v17)
          {
            v18 = (unint64_t *)&v17->__shared_owners_;
            do
              v19 = __ldxr(v18);
            while (__stxr(v19 + 1, v18));
            v20 = *((_QWORD *)v11 + 12);
            v21 = *((_DWORD *)v11 + 26);
            v22 = *((_WORD *)v11 + 54);
            do
              v23 = __ldxr(v18);
            while (__stxr(v23 + 1, v18));
          }
          else
          {
            v20 = *((_QWORD *)v11 + 12);
            v21 = *((_DWORD *)v11 + 26);
            v22 = *((_WORD *)v11 + 54);
          }
          v52 = v16;
          v53 = v17;
          v24 = *((_DWORD *)v11 + 22);
          v54 = *((_QWORD *)v11 + 10);
          v55 = v24;
          v56 = v20;
          v57 = v21;
          v58 = v22;
          if (v17)
          {
            v25 = (unint64_t *)&v17->__shared_owners_;
            do
              v26 = __ldaxr(v25);
            while (__stlxr(v26 - 1, v25));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
              std::__shared_weak_count::__release_weak(v17);
            }
          }
          v59 = 1;
        }
        v60 = 2;
        v27 = *((_QWORD *)&v47 + 1);
        if (*((_QWORD *)&v47 + 1) >= v48)
        {
          v29 = sub_2108B7A40((char **)&v47, (uint64_t)v49);
        }
        else
        {
          **((_BYTE **)&v47 + 1) = 0;
          *(_DWORD *)(v27 + 120) = -1;
          v28 = v60;
          if (v60 != -1)
          {
            ((void (*)(_BYTE *, uint64_t, _OWORD *))off_24CA82D00[v60])(v61, v27, v49);
            *(_DWORD *)(v27 + 120) = v28;
          }
          v29 = (char *)(v27 + 128);
        }
        *((_QWORD *)&v47 + 1) = v29;
        if (v60 != -1)
          ((void (*)(_BYTE *, _OWORD *))off_24CA82CE8[v60])(v61, v49);
        v11 += 120;
      }
      while (v11 != v12);
    }
    v30 = v48;
    *(_OWORD *)(a3 + 32) = v47;
    *(_QWORD *)(a3 + 48) = v30;
    *(_BYTE *)(a3 + 56) = 1;
    if (v46)
    {
LABEL_37:
      v31 = (char *)__p;
      if (__p)
      {
        v32 = v45;
        v33 = __p;
        if (v45 != __p)
        {
          do
          {
            if (*(v32 - 8))
            {
              v34 = (std::__shared_weak_count *)*((_QWORD *)v32 - 6);
              if (v34)
              {
                v35 = (unint64_t *)&v34->__shared_owners_;
                do
                  v36 = __ldaxr(v35);
                while (__stlxr(v36 - 1, v35));
                if (!v36)
                {
                  ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
                  std::__shared_weak_count::__release_weak(v34);
                }
              }
            }
            v32 -= 120;
          }
          while (v32 != v31);
          v33 = __p;
        }
        v45 = v31;
        operator delete(v33);
      }
    }
  }
  v40 = &off_24CA79A00;
  v37 = v43;
  if (v43)
  {
    v38 = (unint64_t *)&v43->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
}

void sub_2109A5738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;

  sub_2108AB288(v9);
  sub_2108B77C8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2109A5754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _QWORD *v17;

  sub_2108AE34C(&a17);
  sub_2108AB288(v17);
  sub_2108B77C8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2109A57A8()
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "Async execution not implemented");
  __cxa_throw(exception, MEMORY[0x24BEDB720], MEMORY[0x24BEDAAC0]);
}

void sub_2109A57E4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL sub_2109A57F8(uint64_t a1)
{
  return *(_DWORD *)(a1 + 16) == 1 && *(_DWORD *)(a1 + 12) == 1;
}

BOOL sub_2109A580C(uint64_t a1)
{
  uint64_t v1;

  v1 = 4;
  if (*(_DWORD *)(a1 + 48) != 65)
    v1 = 1;
  return v1 == *(unsigned int *)(a1 + 24);
}

void sub_2109A582C(uint64_t a1, int64x2_t *a2)
{
  __int32 v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int64x2_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int64x2_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _QWORD *exception;
  _QWORD *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  int v38;
  __int128 v39;
  _OWORD v40[2];
  char v41;
  _OWORD v42[3];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  unsigned int v48;
  _BYTE v49[16];
  std::__shared_weak_count *v50;
  char v51;
  __int128 v52;
  int v53;
  char v54;
  __int128 v55;
  int v56;

  v47 = 0;
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  memset(v42, 0, sizeof(v42));
  LODWORD(v43) = 16;
  v48 = 0;
  v3 = a2[10].i32[0];
  if (v3 != 262152)
  {
    if (v3 != 65568)
    {
      sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoModelInstance.cpp", 723, (uint64_t)&unk_210A01421, 0, (uint64_t)"EspressoBufferToConstDataView32f requires FLOAT32 or UINT8 storage", 66, (void (*)(void **))sub_2109EDDB4);
      abort();
    }
    v4 = a2[7].u64[1];
    if (HIDWORD(v4)
      || (v5 = a2[5].u64[0], HIDWORD(v5))
      || (v6 = a2[5].u64[1], HIDWORD(v6))
      || (v7 = a2[6].u64[0], HIDWORD(v7))
      || (v8 = a2[6].u64[1], HIDWORD(v8)))
    {
      exception = __cxa_allocate_exception(8uLL);
      *exception = &off_24CA852D8;
      __cxa_throw(exception, (struct type_info *)&unk_24CA852F0, (void (*)(void *))std::exception::~exception);
    }
    v9 = a2->i64[0];
    v10 = a2[8];
    v11 = a2[9].i64[0];
    *(_QWORD *)&v55 = __PAIR64__(v5, v4);
    *((_QWORD *)&v55 + 1) = __PAIR64__(v7, v6);
    v56 = v8;
    LODWORD(v52) = 1;
    DWORD1(v52) = v4;
    *((int32x2_t *)&v52 + 1) = vmovn_s64(v10);
    v53 = v11;
    v54 = 1;
    v49[0] = 0;
    v51 = 0;
    sub_21098B284((uint64_t)&v35, v9, &v55, &v52, &dword_210A1A16C, (uint64_t)v49);
    if (v51)
    {
      v12 = v50;
      if (v50)
      {
        p_shared_owners = (unint64_t *)&v50->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
    v15 = v36;
    *(_OWORD *)a1 = v35;
    *(_OWORD *)(a1 + 16) = v15;
    *(_OWORD *)(a1 + 32) = v37;
    *(_DWORD *)(a1 + 48) = v38;
    *(_BYTE *)(a1 + 56) = 0;
    *(_BYTE *)(a1 + 112) = 0;
    if (v41)
    {
      *(_QWORD *)(a1 + 56) = &off_24CA7A158;
      v16 = v39;
      v17 = v40[0];
      v39 = 0uLL;
      *(_OWORD *)(a1 + 64) = v16;
      *(_OWORD *)(a1 + 80) = v17;
      *(_OWORD *)(a1 + 94) = *(_OWORD *)((char *)v40 + 14);
      *(_BYTE *)(a1 + 112) = 1;
    }
    *(_DWORD *)(a1 + 120) = 1;
    v18 = v48;
    if (v48 == -1)
      return;
LABEL_32:
    ((void (*)(__int128 *, _OWORD *))off_24CA82F08[v18])(&v35, v42);
    return;
  }
  v19 = a2[7].u64[1];
  if (HIDWORD(v19)
    || (v20 = a2[5].u64[0], HIDWORD(v20))
    || (v21 = a2[5].u64[1], HIDWORD(v21))
    || (v22 = a2[6].u64[0], HIDWORD(v22))
    || (v23 = a2[6].u64[1], HIDWORD(v23)))
  {
    v34 = __cxa_allocate_exception(8uLL);
    *v34 = &off_24CA852D8;
    __cxa_throw(v34, (struct type_info *)&unk_24CA852F0, (void (*)(void *))std::exception::~exception);
  }
  v24 = a2->i64[0];
  v25 = a2[8];
  v26 = a2[9].i64[0];
  *(_QWORD *)&v55 = __PAIR64__(v20, v19);
  *((_QWORD *)&v55 + 1) = __PAIR64__(v22, v21);
  v56 = v23;
  LODWORD(v52) = 1;
  DWORD1(v52) = v19;
  *((int32x2_t *)&v52 + 1) = vmovn_s64(v25);
  v53 = v26;
  v54 = 1;
  v49[0] = 0;
  v51 = 0;
  sub_21098B284((uint64_t)&v35, v24, &v55, &v52, &dword_210A1A174, (uint64_t)v49);
  if (v51)
  {
    v27 = v50;
    if (v50)
    {
      v28 = (unint64_t *)&v50->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
  }
  v30 = v36;
  *(_OWORD *)a1 = v35;
  *(_OWORD *)(a1 + 16) = v30;
  *(_OWORD *)(a1 + 32) = v37;
  *(_DWORD *)(a1 + 48) = v38;
  *(_BYTE *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  if (v41)
  {
    *(_QWORD *)(a1 + 56) = &off_24CA7A158;
    v31 = v39;
    v32 = v40[0];
    v39 = 0uLL;
    *(_OWORD *)(a1 + 64) = v31;
    *(_OWORD *)(a1 + 80) = v32;
    *(_OWORD *)(a1 + 94) = *(_OWORD *)((char *)v40 + 14);
    *(_BYTE *)(a1 + 112) = 1;
  }
  *(_DWORD *)(a1 + 120) = 0;
  v18 = v48;
  if (v48 != -1)
    goto LABEL_32;
}

void sub_2109A5BCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  sub_2108B1C70(v17 - 144);
  sub_2109A5C2C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2109A5BEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_2109A5C2C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2109A5C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_2109A5C2C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2109A5C18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_2109A5C2C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2109A5C2C(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 120);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24CA82F08[v2])(&v4, a1);
  *(_DWORD *)(a1 + 120) = -1;
  return a1;
}

void sub_2109A5C84(uint64_t a1)
{
  uint64_t v2;
  int v3;
  size_t v4;
  void **v5;
  unint64_t v6;
  unint64_t v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *__dst[2];
  unint64_t v17;
  _QWORD v18[5];
  _QWORD *v19;

  v2 = operator new();
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_OWORD *)(v2 + 192) = 0u;
  *(_OWORD *)(v2 + 208) = 0u;
  *(_OWORD *)(v2 + 224) = 0u;
  *(_OWORD *)(v2 + 240) = 0u;
  *(_OWORD *)(v2 + 256) = 0u;
  *(_QWORD *)(v2 + 272) = 0;
  sub_2108B18D0(v2);
  v18[0] = v2;
  std::ostream::operator<<();
  v3 = *(_DWORD *)(v2 + 120);
  if ((v3 & 0x10) != 0)
  {
    v6 = *(_QWORD *)(v2 + 112);
    v7 = *(_QWORD *)(v2 + 72);
    if (v6 < v7)
    {
      *(_QWORD *)(v2 + 112) = v7;
      v6 = v7;
    }
    v8 = *(const void **)(v2 + 64);
    v4 = v6 - (_QWORD)v8;
    if (v6 - (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v3 & 8) == 0)
    {
      v4 = 0;
      HIBYTE(v17) = 0;
      v5 = __dst;
      goto LABEL_14;
    }
    v8 = *(const void **)(v2 + 40);
    v4 = *(_QWORD *)(v2 + 56) - (_QWORD)v8;
    if (v4 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_2108A4B7C();
  }
  if (v4 >= 0x17)
  {
    v9 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v9 = v4 | 7;
    v10 = v9 + 1;
    v5 = (void **)operator new(v9 + 1);
    __dst[1] = (void *)v4;
    v17 = v10 | 0x8000000000000000;
    __dst[0] = v5;
    goto LABEL_13;
  }
  HIBYTE(v17) = v4;
  v5 = __dst;
  if (v4)
LABEL_13:
    memmove(v5, v8, v4);
LABEL_14:
  *((_BYTE *)v5 + v4) = 0;
  v11 = v18[0];
  if (v18[0])
  {
    v12 = MEMORY[0x24BEDB7F0];
    v13 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v18[0] = *MEMORY[0x24BEDB7F0];
    v14 = *(_QWORD *)(v12 + 72);
    *(_QWORD *)(v11 + *(_QWORD *)(v13 - 24)) = *(_QWORD *)(v12 + 64);
    *(_QWORD *)(v11 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v11 + 16) = v14;
    if (*(char *)(v11 + 111) < 0)
      operator delete(*(void **)(v11 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BCC66C](v11 + 128);
    MEMORY[0x212BCC6FC](v11, 0x10B2C40EED050F3);
  }
  v18[0] = a1;
  v18[1] = __dst;
  v18[2] = a1;
  v18[3] = __dst;
  v18[4] = __dst;
  v15 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v15 == -1)
    sub_2108B9060();
  v19 = v18;
  ((void (*)(_QWORD **, uint64_t))off_24CA82CA0[v15])(&v19, a1);
  if (SHIBYTE(v17) < 0)
    operator delete(__dst[0]);
}

void sub_2109A5ED4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BCC6FC](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_2109A5EF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2109A5F14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_2109ED024((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2109A5F28()
{
  sub_2108B307C("vector");
}

void sub_2109A5F3C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (a1)
  {
    sub_2109A5F3C(*a1);
    sub_2109A5F3C(a1[1]);
    if (!*((_BYTE *)a1 + 112))
      goto LABEL_8;
    if (!*((_BYTE *)a1 + 104))
      goto LABEL_8;
    a1[10] = &off_24CA7D7F8;
    v2 = (std::__shared_weak_count *)a1[12];
    if (!v2)
      goto LABEL_8;
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      operator delete(a1);
    }
    else
    {
LABEL_8:
      operator delete(a1);
    }
  }
}

uint64_t sub_2109A5FD8(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_2109A6040(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  if (*(_BYTE *)(result + 80))
  {
    v2 = *(std::__shared_weak_count **)(result + 16);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
        return v1;
      }
    }
  }
  return result;
}

void sub_2109A60B0(uint64_t a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4)
{
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  __CVBuffer **v11;
  __CVBuffer *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  int v21;
  unint64_t *v22;
  unint64_t v23;
  __CVBuffer *pixelBuffer;
  std::__shared_weak_count *v25;
  uint64_t (**v26)();
  __CVBuffer **v27;
  std::__shared_weak_count *v28;

  if (!a4)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&a4->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (v10)
  {
LABEL_6:
    sub_2108D1B50(a3, &v26);
    v11 = v27;
    if (v27)
      goto LABEL_7;
LABEL_16:
    v12 = 0;
    goto LABEL_17;
  }
  ((void (*)(std::__shared_weak_count *))a4->__on_zero_shared)(a4);
  std::__shared_weak_count::__release_weak(a4);
  sub_2108D1B50(a3, &v26);
  v11 = v27;
  if (!v27)
    goto LABEL_16;
LABEL_7:
  v12 = *v11;
  v13 = (std::__shared_weak_count *)v11[1];
  if (!v13)
  {
LABEL_17:
    pixelBuffer = v12;
    v25 = 0;
    goto LABEL_18;
  }
  v14 = (unint64_t *)&v13->__shared_owners_;
  do
    v15 = __ldxr(v14);
  while (__stxr(v15 + 1, v14));
  pixelBuffer = v12;
  v25 = v13;
  do
    v16 = __ldxr(v14);
  while (__stxr(v16 + 1, v14));
  do
    v17 = __ldaxr(v14);
  while (__stlxr(v17 - 1, v14));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
LABEL_18:
  v26 = &off_24CA7D7F8;
  v18 = v28;
  if (v28)
  {
    v19 = (unint64_t *)&v28->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (!CVPixelBufferGetIOSurface(pixelBuffer)
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoModelInstance.cpp", 525, (uint64_t)"CVPixelBufferGetIOSurface(ref)", 30, (uint64_t)"The input buffer is not IOSurface backed", 40, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
  if (**(_BYTE **)a2 && **(_DWORD **)(a2 + 8) == 1)
    v21 = espresso_network_bind_direct_cvpixelbuffer();
  else
    v21 = espresso_network_bind_input_cvpixelbuffer();
  sub_2109A63A0(a1, *(unint64_t ****)(a2 + 40), v21);
  if (v25)
  {
    v22 = (unint64_t *)&v25->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
}

void sub_2109A6310(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2108A894C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2109A6324(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2108A894C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2109A6338(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2109A63A0(uint64_t a1, unint64_t ***a2, int a3)
{
  std::string *v4;
  void *v5;
  unint64_t size;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _QWORD *v11;
  _QWORD *v12;
  std::string __p;
  _DWORD v14[2];

  if (a3)
  {
    sub_2108AE440(**a2);
    v4 = std::string::insert(&__p, 0, "Failed to bind buffer created for Espresso Model input ", 0x37uLL);
    v5 = (void *)v4->__r_.__value_.__r.__words[0];
    size = v4->__r_.__value_.__l.__size_;
    v14[0] = v4->__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)v14 + 3) = *(_DWORD *)((char *)&v4->__r_.__value_.__r.__words[2] + 3);
    v7 = SHIBYTE(v4->__r_.__value_.__r.__words[2]);
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    *(_QWORD *)a1 = &off_24CA79A00;
    *(_BYTE *)(a1 + 8) = 5;
    v8 = operator new();
    v9 = v8;
    if (v7 < 0)
    {
      sub_2108B314C((_BYTE *)v8, v5, size);
    }
    else
    {
      *(_QWORD *)v8 = v5;
      *(_QWORD *)(v8 + 8) = size;
      *(_DWORD *)(v8 + 16) = v14[0];
      *(_DWORD *)(v8 + 19) = *(_DWORD *)((char *)v14 + 3);
      *(_BYTE *)(v8 + 23) = v7;
    }
    *(_QWORD *)(a1 + 16) = v9;
    v12 = (_QWORD *)operator new();
    *v12 = &unk_24CA7A1D8;
    v12[1] = 0;
    v12[2] = 0;
    v12[3] = v9;
    *(_QWORD *)(a1 + 24) = v12;
    if (v7 < 0)
    {
      operator delete(v5);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_11:
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      goto LABEL_11;
    }
  }
  else
  {
    *(_QWORD *)a1 = &off_24CA79A00;
    *(_BYTE *)(a1 + 8) = 0;
    v10 = (_BYTE *)operator new();
    v10[23] = 0;
    *v10 = 0;
    *(_QWORD *)(a1 + 16) = v10;
    v11 = (_QWORD *)operator new();
    *v11 = &unk_24CA7A1D8;
    v11[1] = 0;
    v11[2] = 0;
    v11[3] = v10;
    *(_QWORD *)(a1 + 24) = v11;
  }
}

void sub_2109A655C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  uint64_t v15;
  int v16;

  MEMORY[0x212BCC6FC](v15, 0x1012C40EC159624);
  if (v16 < 0)
  {
    operator delete(v14);
    if ((a14 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_2109A6610(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BCC6FCLL);
}

uint64_t sub_2109A6678()
{
  return 25;
}

uint64_t sub_2109A6680(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_2109A6688@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_2109A669C(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_2109A6720(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BCC6FCLL);
}

uint64_t sub_2109A6788()
{
  return 3;
}

uint64_t sub_2109A6790(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_2109A6798@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 32);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 44);
  return result;
}

uint64_t sub_2109A67B0(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

_DWORD *sub_2109A6834(_DWORD *a1, uint64_t a2, uint64_t *a3, char *__src, char *__dst)
{
  int v9;
  char *v10;
  uint64_t *v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  char *v17;
  uint64_t v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, const char *, uint64_t, void *, _QWORD);
  uint64_t v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, const char *, uint64_t, void *, _QWORD);
  unsigned int v32;
  uint64_t *v33;
  int v35;
  char *v36;
  char *v37;
  int v38;
  char *v39;
  char *v40;

  if (a1[11])
  {
    v9 = 0;
    while (1)
    {
      v35 = v9;
      v36 = __src;
      v37 = __dst;
      v10 = __src;
      v11 = a3;
      if (a1[8])
        break;
LABEL_3:
      sub_2109A6CA0(a1, a2, v11, v10, __dst);
      __src = &v36[4 * a1[12]];
      __dst = &v37[4 * a1[13]];
      v9 = v35 + 1;
      if ((v35 + 1) >= a1[11])
        goto LABEL_44;
    }
    v12 = 0;
    v10 = v36;
    while (1)
    {
      v38 = v12;
      v13 = a1[3];
      v14 = a1[4];
      *(_QWORD *)a2 = v10;
      *(_DWORD *)(a2 + 8) = v13;
      *(_QWORD *)(a2 + 16) = __dst;
      *(_DWORD *)(a2 + 24) = v14;
      v15 = a1[5];
      v39 = v10;
      v40 = __dst;
      if (v15)
      {
        v16 = 0;
        while (1)
        {
          *(_QWORD *)a2 = v10;
          *(_QWORD *)(a2 + 16) = __dst;
          v18 = *v11;
          if (!v10)
          {
            if (v18)
              break;
          }
          v17 = __dst;
          if (v18)
            goto LABEL_12;
LABEL_13:
          v10 += 4 * a1[6];
          __dst += 4 * a1[7];
          if (++v16 >= v15)
            goto LABEL_29;
        }
        sub_2109EDAB0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4);
        v19 = atomic_load((unsigned __int8 *)&qword_254A75F38);
        if ((v19 & 1) == 0 && __cxa_guard_acquire(&qword_254A75F38))
        {
          __cxa_atexit((void (*)(void *))sub_2109EDF34, &qword_254A75F00, &dword_21089F000);
          __cxa_guard_release(&qword_254A75F38);
        }
        if (!byte_254A75F28 || byte_254A75F30)
        {
          v21 = qword_254A75F00;
          v22 = unk_254A75F08;
          while (v21 != v22)
          {
            v24 = *(void (**)(uint64_t, const char *, uint64_t, void *, _QWORD))v21;
            v23 = *(_QWORD *)(v21 + 8);
            v21 += 16;
            v24(v23, "ptr != nullptr || size == 0", 27, &unk_210A01421, 0);
          }
        }
        v20 = atomic_load((unsigned __int8 *)&qword_254A75F38);
        if ((v20 & 1) == 0 && __cxa_guard_acquire(&qword_254A75F38))
        {
          __cxa_atexit((void (*)(void *))sub_2109EDF34, &qword_254A75F00, &dword_21089F000);
          __cxa_guard_release(&qword_254A75F38);
        }
        v11 = a3;
        if (!byte_254A75F28)
          goto LABEL_50;
        qword_254A75F18(unk_254A75F20, "ptr != nullptr || size == 0", 27, &unk_210A01421, 0);
        v17 = *(char **)(a2 + 16);
LABEL_12:
        memmove(v17, v10, 4 * v18);
        v15 = a1[5];
        goto LABEL_13;
      }
LABEL_29:
      *(_QWORD *)a2 = v10;
      *(_QWORD *)(a2 + 16) = __dst;
      v25 = *v11;
      if (!v10)
      {
        if (v25)
          break;
      }
      if (v25)
        goto LABEL_7;
LABEL_8:
      v10 = &v39[4 * a1[9]];
      __dst = &v40[4 * a1[10]];
      v12 = v38 + 1;
      if ((v38 + 1) >= a1[8])
        goto LABEL_3;
    }
    sub_2109EDAB0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4);
    v26 = atomic_load((unsigned __int8 *)&qword_254A75F38);
    if ((v26 & 1) == 0 && __cxa_guard_acquire(&qword_254A75F38))
    {
      __cxa_atexit((void (*)(void *))sub_2109EDF34, &qword_254A75F00, &dword_21089F000);
      __cxa_guard_release(&qword_254A75F38);
    }
    if (!byte_254A75F28 || byte_254A75F30)
    {
      v29 = qword_254A75F00;
      v28 = unk_254A75F08;
      while (v29 != v28)
      {
        v31 = *(void (**)(uint64_t, const char *, uint64_t, void *, _QWORD))v29;
        v30 = *(_QWORD *)(v29 + 8);
        v29 += 16;
        v31(v30, "ptr != nullptr || size == 0", 27, &unk_210A01421, 0);
      }
    }
    v27 = atomic_load((unsigned __int8 *)&qword_254A75F38);
    if ((v27 & 1) == 0 && __cxa_guard_acquire(&qword_254A75F38))
    {
      __cxa_atexit((void (*)(void *))sub_2109EDF34, &qword_254A75F00, &dword_21089F000);
      __cxa_guard_release(&qword_254A75F38);
    }
    if (!byte_254A75F28)
LABEL_50:
      abort();
    qword_254A75F18(unk_254A75F20, "ptr != nullptr || size == 0", 27, &unk_210A01421, 0);
    __dst = *(char **)(a2 + 16);
LABEL_7:
    memmove(__dst, v10, 4 * v25);
    goto LABEL_8;
  }
LABEL_44:
  if (a1[8])
  {
    v32 = 0;
    v33 = a3;
    do
    {
      sub_2109A6CA0(a1, a2, a3, __src, __dst);
      __src += 4 * a1[9];
      __dst += 4 * a1[10];
      ++v32;
    }
    while (v32 < a1[8]);
  }
  else
  {
    v33 = a3;
  }
  return sub_2109A6CA0(a1, a2, v33, __src, __dst);
}

_DWORD *sub_2109A6CA0(_DWORD *result, uint64_t a2, uint64_t *a3, char *__src, char *__dst)
{
  char *v5;
  char *v6;
  int v9;
  int v10;
  unsigned int v11;
  _DWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  v5 = __dst;
  v6 = __src;
  v9 = result[3];
  v10 = result[4];
  *(_QWORD *)a2 = __src;
  *(_DWORD *)(a2 + 8) = v9;
  *(_QWORD *)(a2 + 16) = __dst;
  *(_DWORD *)(a2 + 24) = v10;
  v11 = result[5];
  if (v11)
  {
    v12 = result;
    v13 = 0;
    while (1)
    {
      *(_QWORD *)a2 = v6;
      *(_QWORD *)(a2 + 16) = v5;
      v14 = *a3;
      if (!v6)
      {
        if (v14)
          break;
      }
      result = v5;
      if (v14)
        goto LABEL_4;
LABEL_5:
      v6 += 4 * v12[6];
      v5 += 4 * v12[7];
      if (++v13 >= v11)
        goto LABEL_10;
    }
    if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
    {
      goto LABEL_17;
    }
    result = *(_DWORD **)(a2 + 16);
LABEL_4:
    result = memmove(result, v6, 4 * v14);
    v11 = v12[5];
    goto LABEL_5;
  }
LABEL_10:
  *(_QWORD *)a2 = v6;
  *(_QWORD *)(a2 + 16) = v5;
  v15 = *a3;
  if (!v6 && v15)
  {
    if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
    {
LABEL_17:
      abort();
    }
    v5 = *(char **)(a2 + 16);
    return memmove(v5, v6, 4 * v15);
  }
  if (v15)
    return memmove(v5, v6, 4 * v15);
  return result;
}

float sub_2109A6E1C(_DWORD *a1, _DWORD *a2, _DWORD *a3)
{
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  int v19;
  _DWORD *v20;
  _DWORD *v21;
  _DWORD *v22;
  _DWORD *v23;
  _DWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  _DWORD *v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  _DWORD *v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  _DWORD *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  _DWORD *v48;
  _DWORD *v49;
  int v50;
  float result;

  v3 = a1[8];
  v4 = a1[5];
  if (v3)
  {
    v5 = a1[2];
    v6 = a1[9];
    v7 = a1[10];
    if (v4)
    {
      v8 = a1[6];
      v9 = a1[7];
      if (!v5)
      {
        do
        {
          v48 = a3;
          v49 = a2;
          v50 = v4;
          do
          {
            *v48 = *v49;
            v49 += v8;
            v48 += v9;
            --v50;
          }
          while (v50);
          *v48 = *v49;
          a2 += v6;
          a3 += v7;
          ++v5;
        }
        while (v5 != v3);
        goto LABEL_32;
      }
      v10 = 0;
      v11 = 4 * v6;
      v12 = v8;
      v13 = 4 * a1[3];
      v14 = 4 * v7;
      v15 = v9;
      v16 = 4 * a1[4];
      v17 = &a2[v12];
      v18 = &a3[v15];
      do
      {
        v19 = 0;
        v20 = v18;
        v21 = v17;
        v22 = a3;
        v23 = a2;
        do
        {
          v24 = v21;
          v25 = v20;
          v26 = v22;
          v27 = v23;
          v28 = v5;
          do
          {
            *v26 = *v27;
            v27 = (_DWORD *)((char *)v27 + v13);
            v26 = (_DWORD *)((char *)v26 + v16);
            --v28;
          }
          while (v28);
          *v26 = *v27;
          v23 = (_DWORD *)((char *)v23 + v12 * 4);
          v22 = (_DWORD *)((char *)v22 + v15 * 4);
          ++v19;
          v21 = &v24[v12];
          v20 = &v25[v15];
        }
        while (v19 != v4);
        v29 = v5;
        do
        {
          *v25 = *v24;
          v24 = (_DWORD *)((char *)v24 + v13);
          v25 = (_DWORD *)((char *)v25 + v16);
          --v29;
        }
        while (v29);
        *v25 = *v24;
        a2 = (_DWORD *)((char *)a2 + v11);
        a3 = (_DWORD *)((char *)a3 + v14);
        ++v10;
        v17 = (_DWORD *)((char *)v17 + v11);
        v18 = (_DWORD *)((char *)v18 + v14);
      }
      while (v10 != v3);
LABEL_14:
      v8 = a1[6];
      v9 = a1[7];
      if (v5)
      {
        v30 = 0;
        v31 = 4 * v8;
        v32 = 4 * a1[3];
        v33 = 4 * v9;
        v34 = 4 * a1[4];
        do
        {
          v35 = a3;
          v36 = a2;
          v37 = v5;
          do
          {
            *v35 = *v36;
            v36 = (_DWORD *)((char *)v36 + v32);
            v35 = (_DWORD *)((char *)v35 + v34);
            --v37;
          }
          while (v37);
          *v35 = *v36;
          a2 = (_DWORD *)((char *)a2 + v31);
          a3 = (_DWORD *)((char *)a3 + v33);
          ++v30;
        }
        while (v30 != v4);
        goto LABEL_25;
      }
      do
      {
LABEL_32:
        *a3 = *a2;
        a2 += v8;
        a3 += v9;
        --v4;
      }
      while (v4);
      goto LABEL_35;
    }
    if (!v5)
    {
      do
      {
        *a3 = *a2;
        a2 += v6;
        a3 += v7;
        --v3;
      }
      while (v3);
      goto LABEL_35;
    }
    v38 = 0;
    v39 = 4 * v6;
    v40 = 4 * a1[3];
    v41 = 4 * v7;
    v42 = 4 * a1[4];
    do
    {
      v43 = a3;
      v44 = a2;
      v45 = v5;
      do
      {
        *v43 = *v44;
        v44 = (_DWORD *)((char *)v44 + v40);
        v43 = (_DWORD *)((char *)v43 + v42);
        --v45;
      }
      while (v45);
      *v43 = *v44;
      a2 = (_DWORD *)((char *)a2 + v39);
      a3 = (_DWORD *)((char *)a3 + v41);
      ++v38;
    }
    while (v38 != v3);
  }
  else
  {
    v5 = a1[2];
    if (v4)
      goto LABEL_14;
  }
LABEL_25:
  if (v5)
  {
    v46 = 4 * a1[3];
    v47 = 4 * a1[4];
    do
    {
      *a3 = *a2;
      a2 = (_DWORD *)((char *)a2 + v46);
      a3 = (_DWORD *)((char *)a3 + v47);
      --v5;
    }
    while (v5);
  }
LABEL_35:
  result = *(float *)a2;
  *a3 = *a2;
  return result;
}

_DWORD *sub_2109A70BC(_DWORD *a1, uint64_t a2, size_t *a3, char *__src, char *__dst)
{
  _DWORD *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  char *v16;
  size_t v17;
  uint64_t v18;
  size_t *v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, const char *, uint64_t, void *, _QWORD);
  size_t v26;
  unsigned __int8 v27;
  unsigned __int8 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, const char *, uint64_t, void *, _QWORD);
  unsigned int v33;
  int v35;
  char *v36;
  char *v37;
  int v38;
  char *v39;
  char *v40;

  v9 = a1;
  if (a1[11])
  {
    v10 = 0;
    while (1)
    {
      v35 = v10;
      v36 = __src;
      v37 = __dst;
      if (v9[8])
        break;
LABEL_3:
      sub_2109A7550(v9, a2, a3, __src, __dst);
      __src = &v36[v9[12]];
      __dst = &v37[v9[13]];
      v10 = v35 + 1;
      if ((v35 + 1) >= v9[11])
        goto LABEL_44;
    }
    v11 = 0;
    while (1)
    {
      v38 = v11;
      v12 = v9[3];
      v13 = v9[4];
      *(_QWORD *)a2 = __src;
      *(_DWORD *)(a2 + 8) = v12;
      *(_QWORD *)(a2 + 16) = __dst;
      *(_DWORD *)(a2 + 24) = v13;
      v14 = v9[5];
      v39 = __src;
      v40 = __dst;
      if (v14)
      {
        v15 = 0;
        while (1)
        {
          *(_QWORD *)a2 = __src;
          *(_QWORD *)(a2 + 16) = __dst;
          v17 = *a3;
          if (!__src)
          {
            if (v17)
              break;
          }
          v16 = __dst;
          if (v17)
            goto LABEL_12;
LABEL_13:
          __src += v9[6];
          __dst += v9[7];
          if (++v15 >= v14)
            goto LABEL_29;
        }
        v18 = a2;
        v19 = a3;
        sub_2109EDAB0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4);
        v20 = atomic_load((unsigned __int8 *)&qword_254A75F38);
        if ((v20 & 1) == 0 && __cxa_guard_acquire(&qword_254A75F38))
        {
          __cxa_atexit((void (*)(void *))sub_2109EDF34, &qword_254A75F00, &dword_21089F000);
          __cxa_guard_release(&qword_254A75F38);
        }
        if (!byte_254A75F28 || byte_254A75F30)
        {
          v23 = qword_254A75F00;
          v22 = unk_254A75F08;
          while (v23 != v22)
          {
            v25 = *(void (**)(uint64_t, const char *, uint64_t, void *, _QWORD))v23;
            v24 = *(_QWORD *)(v23 + 8);
            v23 += 16;
            v25(v24, "ptr != nullptr || size == 0", 27, &unk_210A01421, 0);
          }
        }
        v21 = atomic_load((unsigned __int8 *)&qword_254A75F38);
        if ((v21 & 1) == 0 && __cxa_guard_acquire(&qword_254A75F38))
        {
          __cxa_atexit((void (*)(void *))sub_2109EDF34, &qword_254A75F00, &dword_21089F000);
          __cxa_guard_release(&qword_254A75F38);
        }
        if (!byte_254A75F28)
          goto LABEL_48;
        a3 = v19;
        qword_254A75F18(unk_254A75F20, "ptr != nullptr || size == 0", 27, &unk_210A01421, 0);
        a2 = v18;
        v16 = *(char **)(v18 + 16);
        v9 = a1;
LABEL_12:
        memmove(v16, __src, v17);
        v14 = v9[5];
        goto LABEL_13;
      }
LABEL_29:
      *(_QWORD *)a2 = __src;
      *(_QWORD *)(a2 + 16) = __dst;
      v26 = *a3;
      if (!__src)
      {
        if (v26)
          break;
      }
      if (v26)
        goto LABEL_7;
LABEL_8:
      __src = &v39[v9[9]];
      __dst = &v40[v9[10]];
      v11 = v38 + 1;
      if ((v38 + 1) >= v9[8])
        goto LABEL_3;
    }
    sub_2109EDAB0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4);
    v27 = atomic_load((unsigned __int8 *)&qword_254A75F38);
    if ((v27 & 1) == 0 && __cxa_guard_acquire(&qword_254A75F38))
    {
      __cxa_atexit((void (*)(void *))sub_2109EDF34, &qword_254A75F00, &dword_21089F000);
      __cxa_guard_release(&qword_254A75F38);
    }
    if (!byte_254A75F28 || byte_254A75F30)
    {
      v29 = qword_254A75F00;
      v30 = unk_254A75F08;
      while (v29 != v30)
      {
        v32 = *(void (**)(uint64_t, const char *, uint64_t, void *, _QWORD))v29;
        v31 = *(_QWORD *)(v29 + 8);
        v29 += 16;
        v32(v31, "ptr != nullptr || size == 0", 27, &unk_210A01421, 0);
      }
    }
    v28 = atomic_load((unsigned __int8 *)&qword_254A75F38);
    if ((v28 & 1) == 0 && __cxa_guard_acquire(&qword_254A75F38))
    {
      __cxa_atexit((void (*)(void *))sub_2109EDF34, &qword_254A75F00, &dword_21089F000);
      __cxa_guard_release(&qword_254A75F38);
    }
    if (!byte_254A75F28)
LABEL_48:
      abort();
    qword_254A75F18(unk_254A75F20, "ptr != nullptr || size == 0", 27, &unk_210A01421, 0);
    __dst = *(char **)(a2 + 16);
LABEL_7:
    memmove(__dst, __src, v26);
    goto LABEL_8;
  }
LABEL_44:
  if (v9[8])
  {
    v33 = 0;
    do
    {
      sub_2109A7550(v9, a2, a3, __src, __dst);
      __src += v9[9];
      __dst += v9[10];
      ++v33;
    }
    while (v33 < v9[8]);
  }
  return sub_2109A7550(v9, a2, a3, __src, __dst);
}

_DWORD *sub_2109A7550(_DWORD *result, uint64_t a2, size_t *a3, char *__src, char *__dst)
{
  char *v5;
  char *v6;
  int v9;
  int v10;
  unsigned int v11;
  _DWORD *v12;
  int v13;
  size_t v14;
  size_t v15;

  v5 = __dst;
  v6 = __src;
  v9 = result[3];
  v10 = result[4];
  *(_QWORD *)a2 = __src;
  *(_DWORD *)(a2 + 8) = v9;
  *(_QWORD *)(a2 + 16) = __dst;
  *(_DWORD *)(a2 + 24) = v10;
  v11 = result[5];
  if (v11)
  {
    v12 = result;
    v13 = 0;
    while (1)
    {
      *(_QWORD *)a2 = v6;
      *(_QWORD *)(a2 + 16) = v5;
      v14 = *a3;
      if (!v6)
      {
        if (v14)
          break;
      }
      result = v5;
      if (v14)
        goto LABEL_4;
LABEL_5:
      v6 += v12[6];
      v5 += v12[7];
      if (++v13 >= v11)
        goto LABEL_10;
    }
    if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
    {
      goto LABEL_17;
    }
    result = *(_DWORD **)(a2 + 16);
LABEL_4:
    result = memmove(result, v6, v14);
    v11 = v12[5];
    goto LABEL_5;
  }
LABEL_10:
  *(_QWORD *)a2 = v6;
  *(_QWORD *)(a2 + 16) = v5;
  v15 = *a3;
  if (!v6 && v15)
  {
    if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
    {
LABEL_17:
      abort();
    }
    v5 = *(char **)(a2 + 16);
    return memmove(v5, v6, v15);
  }
  if (v15)
    return memmove(v5, v6, v15);
  return result;
}

void sub_2109A76CC(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (*(_BYTE *)(a2 + 112))
  {
    v2 = *(std::__shared_weak_count **)(a2 + 72);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
}

void sub_2109A772C(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (*(_BYTE *)(a2 + 112))
  {
    v2 = *(std::__shared_weak_count **)(a2 + 72);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
}

void sub_2109A7790()
{
  JUMPOUT(0x212BCC6FCLL);
}

__n128 sub_2109A77A4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24CA82F58;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_2109A77DC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24CA82F58;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_2109A77FC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_2109A7804(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF24espresso_return_status_tPvEJRS6_EEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF24espresso_return_status_tPvEJRS6_EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF24espresso_return_status_tPvEJRS6_EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF24espresso_return_status_tPvEJRS6_EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2109A7870()
{
  return &unk_24CA82FB8;
}

void sub_2109A787C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA82FD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2109A788C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA82FD8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BCC6FCLL);
}

uint64_t sub_2109A78BC(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_2109A78CC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *i;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;

  if (a1[2])
  {
    v1 = *a1;
    v2 = a1[1];
    *a1 = (uint64_t)(a1 + 1);
    *(_QWORD *)(v2 + 16) = 0;
    a1[2] = 0;
    a1[1] = 0;
    i = *(_QWORD *)(v1 + 8) ? *(_QWORD **)(v1 + 8) : (_QWORD *)v1;
    if (i)
    {
      v4 = (_QWORD *)i[2];
      if (v4)
      {
        v5 = (_QWORD *)*v4;
        if ((_QWORD *)*v4 == i)
        {
          *v4 = 0;
          while (1)
          {
            v7 = (_QWORD *)v4[1];
            if (!v7)
              break;
            do
            {
              v4 = v7;
              v7 = (_QWORD *)*v7;
            }
            while (v7);
          }
        }
        else
        {
          for (v4[1] = 0; v5; v5 = (_QWORD *)v4[1])
          {
            do
            {
              v4 = v5;
              v5 = (_QWORD *)*v5;
            }
            while (v5);
          }
        }
        sub_2109A5F3C(i);
        v6 = (_QWORD *)v4[2];
        for (i = v4; v6; v6 = (_QWORD *)v6[2])
          i = v6;
      }
      sub_2109A5F3C(i);
    }
  }
}

void sub_2109A798C(char a1@<W0>, void **a2@<X8>)
{
  unsigned int v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  int64_t v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  int v24;
  _DWORD *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  __int128 *v39;
  uint64_t v40;
  __int128 v41;
  int v42;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = (unsigned __int16)sub_2109EBA94();
  if (v4 <= 0x100)
    LOBYTE(v4) = 0;
  if ((_BYTE)v4)
  {
    v5 = (char *)operator new(4uLL);
    *(_DWORD *)v5 = 1;
    v6 = v5 + 4;
    a2[1] = v5 + 4;
    a2[2] = v5 + 4;
    *a2 = v5;
    if ((a1 & 1) != 0)
    {
LABEL_5:
      v7 = v6;
      goto LABEL_28;
    }
  }
  else
  {
    v5 = 0;
    v6 = 0;
    if ((a1 & 1) != 0)
      goto LABEL_5;
  }
  v8 = v6 - v5;
  v9 = (v6 - v5) >> 2;
  v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 62)
    sub_2108B327C();
  if (v8 >> 1 > v10)
    v10 = v8 >> 1;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
    v11 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v11 = v10;
  if (v11)
  {
    if (v11 >> 62)
      sub_2108B2B1C();
    v12 = (char *)operator new(4 * v11);
  }
  else
  {
    v12 = 0;
  }
  v13 = &v12[4 * v9];
  v14 = &v12[4 * v11];
  *(_DWORD *)v13 = 2;
  v7 = v13 + 4;
  v15 = v13;
  v16 = v6 - v5;
  if (v6 != v5)
  {
    if ((unint64_t)(v16 - 4) < 0x1C)
    {
      v17 = v6;
      v15 = &v12[4 * v9];
      do
      {
LABEL_23:
        v24 = *((_DWORD *)v17 - 1);
        v17 -= 4;
        *((_DWORD *)v15 - 1) = v24;
        v15 -= 4;
      }
      while (v17 != v5);
      goto LABEL_24;
    }
    v18 = ((unint64_t)(v16 - 4) >> 2) + 1;
    v19 = 4 * (v18 & 0x7FFFFFFFFFFFFFF8);
    v17 = &v6[-v19];
    v15 = &v13[-v19];
    v20 = &v12[4 * v9 - 16];
    v21 = (__int128 *)(v6 - 16);
    v22 = v18 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 8;
    }
    while (v22);
    if (v18 != (v18 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_23;
  }
LABEL_24:
  *a2 = v15;
  a2[1] = v7;
  a2[2] = v14;
  if (v5)
  {
    operator delete(v5);
    v14 = (char *)a2[2];
  }
  a2[1] = v7;
  v6 = v14;
  if (v7 < v14)
  {
    *((_DWORD *)v13 + 1) = 3;
    v25 = v13 + 8;
    goto LABEL_49;
  }
LABEL_28:
  v26 = (char *)*a2;
  v27 = v7 - (_BYTE *)*a2;
  v28 = v27 >> 2;
  v29 = (v27 >> 2) + 1;
  if (v29 >> 62)
    sub_2108B327C();
  if ((v6 - v26) >> 1 > v29)
    v29 = (v6 - v26) >> 1;
  if ((unint64_t)(v6 - v26) >= 0x7FFFFFFFFFFFFFFCLL)
    v30 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v30 = v29;
  if (v30)
  {
    if (v30 >> 62)
      sub_2108B2B1C();
    v31 = (char *)operator new(4 * v30);
  }
  else
  {
    v31 = 0;
  }
  v32 = &v31[4 * v28];
  v33 = &v31[4 * v30];
  *(_DWORD *)v32 = 3;
  v25 = v32 + 4;
  if (v7 == v26)
    goto LABEL_47;
  v34 = v7 - v26 - 4;
  if (v34 < 0x2C)
  {
    v35 = v7;
    goto LABEL_46;
  }
  if ((unint64_t)(v7 - v31 - v27) < 0x20)
  {
    v35 = v7;
    do
    {
LABEL_46:
      v42 = *((_DWORD *)v35 - 1);
      v35 -= 4;
      *((_DWORD *)v32 - 1) = v42;
      v32 -= 4;
    }
    while (v35 != v26);
    goto LABEL_47;
  }
  v36 = (v34 >> 2) + 1;
  v37 = 4 * (v36 & 0x7FFFFFFFFFFFFFF8);
  v35 = &v7[-v37];
  v32 -= v37;
  v38 = &v31[4 * v28 - 16];
  v39 = (__int128 *)(v7 - 16);
  v40 = v36 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v41 = *v39;
    *((_OWORD *)v38 - 1) = *(v39 - 1);
    *(_OWORD *)v38 = v41;
    v38 -= 32;
    v39 -= 2;
    v40 -= 8;
  }
  while (v40);
  if (v36 != (v36 & 0x7FFFFFFFFFFFFFF8))
    goto LABEL_46;
LABEL_47:
  *a2 = v32;
  a2[1] = v25;
  a2[2] = v33;
  if (v26)
    operator delete(v26);
LABEL_49:
  a2[1] = v25;
}

void sub_2109A7C6C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;

  if (v2)
  {
    *(_QWORD *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2109A7C8C(char a1)
{
  int *v1;
  int *v2;
  int *v3;
  int v4;
  uint64_t context;
  int *v7;
  int *v8;

  sub_2109A798C(a1, (void **)&v7);
  v1 = v7;
  v2 = v8;
  if (v7 == v8)
  {
    context = 0;
    if (!v7)
      return context;
    goto LABEL_9;
  }
  v3 = v7;
  do
  {
    v4 = *v3;
    if (*v3 != 1 && v4 != 3 && v4 != 2)
    {
      sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoUtil.cpp", 81, (uint64_t)&unk_210A07C29, 0, (uint64_t)"Unexpected device", 17, (void (*)(void **))sub_2109EDDB4);
      abort();
    }
    context = espresso_create_context();
    if (context)
      break;
    ++v3;
  }
  while (v3 != v2);
  if (v1)
LABEL_9:
    operator delete(v1);
  return context;
}

void sub_2109A7D8C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2109A7DA8(uint64_t result, uint64_t a2)
{
  const char *v2;
  size_t v3;
  std::string::size_type v4;
  std::string *p_dst;
  uint64_t v6;
  uint64_t v7;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  const char *last_error_message;
  size_t v13;
  size_t v14;
  void *p_p;
  uint64_t v16;
  uint64_t v17;
  const std::string::value_type *v18;
  std::string::size_type v19;
  std::string *v20;
  __int128 v21;
  __int128 *v22;
  uint64_t v23;
  void *__p;
  size_t v25;
  int64_t v26;
  std::string __dst;
  std::string v28;
  std::string v29;
  __int128 v30;
  int64_t v31;
  uint64_t v32;

  *(_OWORD *)result = 0u;
  *(_OWORD *)(result + 16) = 0u;
  *(_DWORD *)(result + 32) = 1065353216;
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 56) = 0u;
  *(_OWORD *)(result + 72) = 0u;
  if (a2)
  {
    v32 = 0;
    e5rt_execution_stream_operation_create_precompiled_compute_operation_with_options();
    v2 = (const char *)MEMORY[0x212BCC8C4]();
    v3 = strlen(v2);
    if (v3 > 0x7FFFFFFFFFFFFFF7)
      sub_2108A4B7C();
    v4 = v3;
    if (v3 >= 0x17)
    {
      v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v6 = v3 | 7;
      v7 = v6 + 1;
      p_dst = (std::string *)operator new(v6 + 1);
      __dst.__r_.__value_.__l.__size_ = v4;
      __dst.__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v3;
      p_dst = &__dst;
      if (!v3)
      {
LABEL_13:
        p_dst->__r_.__value_.__s.__data_[v4] = 0;
        v8 = std::string::insert(&__dst, 0, "EspressoStreamPool: Failed to create e5rt stream operation with options.  Return code: ", 0x57uLL);
        v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
        v28.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v9;
        v8->__r_.__value_.__l.__size_ = 0;
        v8->__r_.__value_.__r.__words[2] = 0;
        v8->__r_.__value_.__r.__words[0] = 0;
        v10 = std::string::append(&v28, ". Last error message: ", 0x16uLL);
        v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
        v29.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v11;
        v10->__r_.__value_.__l.__size_ = 0;
        v10->__r_.__value_.__r.__words[2] = 0;
        v10->__r_.__value_.__r.__words[0] = 0;
        last_error_message = (const char *)e5rt_get_last_error_message();
        v13 = strlen(last_error_message);
        if (v13 > 0x7FFFFFFFFFFFFFF7)
          sub_2108A4B7C();
        v14 = v13;
        if (v13 >= 0x17)
        {
          v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v13 | 7) != 0x17)
            v16 = v13 | 7;
          v17 = v16 + 1;
          p_p = operator new(v16 + 1);
          v25 = v14;
          v26 = v17 | 0x8000000000000000;
          __p = p_p;
        }
        else
        {
          HIBYTE(v26) = v13;
          p_p = &__p;
          if (!v13)
          {
LABEL_22:
            *((_BYTE *)p_p + v14) = 0;
            if (v26 >= 0)
              v18 = (const std::string::value_type *)&__p;
            else
              v18 = (const std::string::value_type *)__p;
            if (v26 >= 0)
              v19 = HIBYTE(v26);
            else
              v19 = v25;
            v20 = std::string::append(&v29, v18, v19);
            v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
            v31 = v20->__r_.__value_.__r.__words[2];
            v30 = v21;
            v20->__r_.__value_.__l.__size_ = 0;
            v20->__r_.__value_.__r.__words[2] = 0;
            v20->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v26) < 0)
            {
              operator delete(__p);
              if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_30:
                if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_31;
                goto LABEL_42;
              }
            }
            else if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              goto LABEL_30;
            }
            operator delete(v29.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_31:
              if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_33;
              goto LABEL_32;
            }
LABEL_42:
            operator delete(v28.__r_.__value_.__l.__data_);
            if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_33:
              if (v31 >= 0)
                v22 = &v30;
              else
                v22 = (__int128 *)v30;
              if (v31 >= 0)
                v23 = HIBYTE(v31);
              else
                v23 = *((_QWORD *)&v30 + 1);
              sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoV2StreamPool.cpp", 76, (uint64_t)&unk_210A01421, 0, (uint64_t)v22, v23, (void (*)(void **))sub_2109EDDB4);
              abort();
            }
LABEL_32:
            operator delete(__dst.__r_.__value_.__l.__data_);
            goto LABEL_33;
          }
        }
        memmove(p_p, last_error_message, v14);
        goto LABEL_22;
      }
    }
    memmove(p_dst, v2, v4);
    goto LABEL_13;
  }
  return result;
}

void sub_2109A8684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD **a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  void **v37;
  uint64_t v38;
  _QWORD *v40;
  _QWORD *v41;
  void *v42;

  if (*(char *)(v38 - 105) < 0)
    operator delete(*(void **)(v38 - 128));
  sub_2109A8CE0(a11);
  v40 = *a10;
  if (*a10)
  {
    do
    {
      v41 = (_QWORD *)*v40;
      operator delete(v40);
      v40 = v41;
    }
    while (v41);
  }
  v42 = *v37;
  *v37 = 0;
  if (v42)
    operator delete(v42);
  _Unwind_Resume(a1);
}

uint64_t sub_2109A87CC(uint64_t a1)
{
  _QWORD *i;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;

  for (i = *(_QWORD **)(a1 + 16); i; i = (_QWORD *)*i)
  {
    if (i[2])
      e5rt_execution_stream_release();
    if (i[4])
      e5rt_execution_stream_operation_release();
  }
  sub_2109A8CE0(a1 + 40);
  v3 = *(_QWORD **)(a1 + 16);
  if (v3)
  {
    do
    {
      v4 = (_QWORD *)*v3;
      operator delete(v3);
      v3 = v4;
    }
    while (v4);
  }
  v5 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v5)
    operator delete(v5);
  return a1;
}

unint64_t sub_2109A8860(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  _QWORD **v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t prime;
  unint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;

  v2 = *(_QWORD *)(a1 + 80);
  if (!v2)
    return 0;
  v5 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 72);
  v7 = *(_QWORD *)(*(_QWORD *)(v5 + (((unint64_t)(v6 + v2 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                 + 8 * ((v6 + v2 - 1) & 0x1FF));
  if (v4 == v5)
    v8 = 0;
  else
    v8 = ((v4 - v5) << 6) - 1;
  *(_QWORD *)(a1 + 80) = v2 - 1;
  if ((unint64_t)(v8 - (v2 + v6) + 1) >= 0x400)
  {
    operator delete(*(void **)(v4 - 8));
    *(_QWORD *)(a1 + 56) -= 8;
  }
  v9 = 0x9DDFEA08EB382D69 * (((8 * v7) + 8) ^ HIDWORD(v7));
  v10 = 0x9DDFEA08EB382D69 * (HIDWORD(v7) ^ (v9 >> 47) ^ v9);
  v11 = 0x9DDFEA08EB382D69 * (v10 ^ (v10 >> 47));
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v1 = 0x9DDFEA08EB382D69 * (v10 ^ (v10 >> 47));
      if (v11 >= v12)
        v1 = v11 % v12;
    }
    else
    {
      v1 = (v12 - 1) & v11;
    }
    v15 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v1);
    if (v15)
    {
      v16 = *v15;
      if (*v15)
      {
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v18 = v16[1];
            if (v18 == v11)
            {
              if (v16[2] == v7)
                goto LABEL_68;
            }
            else if ((v18 & (v12 - 1)) != v1)
            {
              goto LABEL_29;
            }
            v16 = (_QWORD *)*v16;
            if (!v16)
              goto LABEL_29;
          }
        }
        do
        {
          v17 = v16[1];
          if (v17 == v11)
          {
            if (v16[2] == v7)
              goto LABEL_68;
          }
          else
          {
            if (v17 >= v12)
              v17 %= v12;
            if (v17 != v1)
              break;
          }
          v16 = (_QWORD *)*v16;
        }
        while (v16);
      }
    }
  }
LABEL_29:
  v16 = operator new(0x28uLL);
  *v16 = 0;
  v16[1] = v11;
  v16[2] = v7;
  v16[3] = 1;
  v16[4] = 0;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v12 || (float)(v20 * (float)v12) < v19)
  {
    v21 = 1;
    if (v12 >= 3)
      v21 = (v12 & (v12 - 1)) != 0;
    v22 = v21 | (2 * v12);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      prime = v23;
    else
      prime = v22;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v12 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v12)
      goto LABEL_41;
    if (prime < v12)
    {
      v25 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v12 < 3 || (v26 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
      {
        v25 = std::__next_prime(v25);
      }
      else
      {
        v27 = 1 << -(char)__clz(v25 - 1);
        if (v25 >= 2)
          v25 = v27;
      }
      if (prime <= v25)
        prime = v25;
      if (prime < v12)
LABEL_41:
        sub_2108B5C58(a1, prime);
    }
    v12 = *(_QWORD *)(a1 + 8);
    v28 = v12 - 1;
    if ((v12 & (v12 - 1)) == 0)
    {
      v1 = v28 & v11;
      v29 = *(_QWORD *)a1;
      v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v28 & v11));
      if (!v30)
        goto LABEL_60;
LABEL_58:
      *v16 = *v30;
      goto LABEL_66;
    }
    if (v11 >= v12)
    {
      v1 = v11 % v12;
      v29 = *(_QWORD *)a1;
      v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v11 % v12));
      if (v30)
        goto LABEL_58;
      goto LABEL_60;
    }
    v1 = v11;
  }
  v29 = *(_QWORD *)a1;
  v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v1);
  if (v30)
    goto LABEL_58;
LABEL_60:
  *v16 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v16;
  *(_QWORD *)(v29 + 8 * v1) = a1 + 16;
  if (!*v16)
    goto LABEL_67;
  v31 = *(_QWORD *)(*v16 + 8);
  if ((v12 & (v12 - 1)) != 0)
  {
    if (v31 >= v12)
      v31 %= v12;
  }
  else
  {
    v31 &= v12 - 1;
  }
  v30 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
LABEL_66:
  *v30 = v16;
LABEL_67:
  ++*(_QWORD *)(a1 + 24);
LABEL_68:
  *((_BYTE *)v16 + 24) = 0;
  sub_2109A946C((_QWORD *)a1, v7);
  return v7;
}

void sub_2109A8C10(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2109A8C24(_QWORD *a1, unint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v4 = sub_2109A946C(a1, a2);
  if (v4)
  {
    v5 = v4;
    if (!*((_BYTE *)v4 + 24))
    {
      e5rt_execution_stream_reset();
      v6 = a1[7];
      v7 = a1[6];
      if (v6 == v7)
        v8 = 0;
      else
        v8 = ((v6 - v7) << 6) - 1;
      v9 = a1[10];
      v10 = v9 + a1[9];
      if (v8 == v10)
      {
        sub_2109A8DA4(a1 + 5);
        v7 = a1[6];
        v9 = a1[10];
        v10 = a1[9] + v9;
      }
      *(_QWORD *)(*(_QWORD *)(v7 + ((v10 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v10 & 0x1FF)) = a2;
      a1[10] = v9 + 1;
      *((_BYTE *)v5 + 24) = 1;
    }
  }
}

uint64_t sub_2109A8CE0(uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 256;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 512;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_2109A8DA4(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  void *v29;
  void *v30;
  char *v31;
  char *v32;
  unint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  BOOL v43;
  int64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  unint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  unint64_t v56;
  int64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 *v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  __int128 *v79;
  _OWORD *v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  int64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  __int128 *v95;
  _OWORD *v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  int64_t v106;
  unint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  __int128 *v113;
  _OWORD *v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    a1[4] = v4;
    v6 = (_QWORD *)a1[1];
    v5 = (char *)a1[2];
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    a1[1] = v6 + 1;
    if (v5 != (char *)a1[3])
    {
LABEL_92:
      *(_QWORD *)v5 = v8;
      goto LABEL_93;
    }
    v9 = (char *)*a1;
    if ((unint64_t)v7 > *a1)
    {
      v10 = (uint64_t)&v7[-*a1] >> 3;
      if (v10 >= -1)
        v11 = v10 + 1;
      else
        v11 = v10 + 2;
      v12 = v11 >> 1;
      v13 = -v12;
      v14 = &v7[-8 * v12];
      v15 = v5 - v7;
      if (v5 != v7)
      {
        memmove(&v7[-8 * v12], v7, v5 - v7);
        v7 = (char *)a1[1];
      }
      v5 = &v14[v15];
      v16 = &v7[8 * v13];
      goto LABEL_11;
    }
    v38 = (v5 - v9) >> 2;
    if (v5 == v9)
      v38 = 1;
    if (v38 >> 61)
      goto LABEL_109;
    v39 = v38 >> 2;
    v40 = 8 * v38;
    v41 = (char *)operator new(8 * v38);
    v42 = &v41[8 * v39];
    v44 = v5 - v7;
    v43 = v5 == v7;
    v5 = v42;
    if (!v43)
    {
      v5 = &v42[v44 & 0xFFFFFFFFFFFFFFF8];
      v45 = v44 - 8;
      if ((unint64_t)(v44 - 8) >= 0x38)
      {
        v92 = &v41[8 * v39];
        v46 = v92;
        if ((unint64_t)(v92 - v7) >= 0x20)
        {
          v93 = (v45 >> 3) + 1;
          v94 = 8 * (v93 & 0x3FFFFFFFFFFFFFFCLL);
          v46 = &v42[v94];
          v7 += v94;
          v95 = (__int128 *)(v6 + 3);
          v96 = v92 + 16;
          v97 = v93 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v98 = *v95;
            *(v96 - 1) = *(v95 - 1);
            *v96 = v98;
            v95 += 2;
            v96 += 2;
            v97 -= 4;
          }
          while (v97);
          if (v93 == (v93 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_89;
        }
      }
      else
      {
        v46 = &v41[8 * v39];
      }
      do
      {
        v99 = *(_QWORD *)v7;
        v7 += 8;
        *(_QWORD *)v46 = v99;
        v46 += 8;
      }
      while (v46 != v5);
    }
LABEL_89:
    *a1 = v41;
    a1[1] = v42;
    a1[2] = v5;
    a1[3] = &v41[v40];
    if (!v9)
      goto LABEL_92;
    v100 = v9;
LABEL_91:
    operator delete(v100);
    v5 = (char *)a1[2];
    goto LABEL_92;
  }
  v18 = (char *)a1[2];
  v17 = (char *)a1[3];
  v20 = (char *)*a1;
  v19 = (char *)a1[1];
  v21 = v18 - v19;
  v22 = (v18 - v19) >> 3;
  v23 = (uint64_t)&v17[-*a1];
  if (v22 < (unint64_t)(v23 >> 3))
  {
    v24 = operator new(0x1000uLL);
    v25 = v24;
    if (v17 != v18)
    {
      *(_QWORD *)v18 = v24;
LABEL_93:
      a1[2] += 8;
      return;
    }
    if (v19 == v20)
    {
      v69 = (v17 - v19) >> 2;
      if (v18 == v19)
        v69 = 1;
      if (v69 >> 61)
        goto LABEL_109;
      v70 = (v69 + 3) >> 2;
      v71 = 8 * v69;
      v72 = (char *)operator new(8 * v69);
      v47 = &v72[8 * v70];
      v73 = v47;
      if (v18 != v19)
      {
        v73 = &v47[8 * v22];
        v74 = &v72[8 * v70];
        v75 = v19;
        if ((unint64_t)(v21 - 8) < 0x38)
          goto LABEL_113;
        v76 = &v72[8 * v70];
        v74 = v76;
        v75 = v19;
        if ((unint64_t)(v76 - v19) < 0x20)
          goto LABEL_113;
        v77 = ((unint64_t)(v21 - 8) >> 3) + 1;
        v78 = 8 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
        v74 = &v47[v78];
        v75 = &v19[v78];
        v79 = (__int128 *)(v19 + 16);
        v80 = v76 + 16;
        v81 = v77 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v82 = *v79;
          *(v80 - 1) = *(v79 - 1);
          *v80 = v82;
          v79 += 2;
          v80 += 2;
          v81 -= 4;
        }
        while (v81);
        if (v77 != (v77 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_113:
          do
          {
            v83 = *(_QWORD *)v75;
            v75 += 8;
            *(_QWORD *)v74 = v83;
            v74 += 8;
          }
          while (v74 != v73);
        }
      }
      *a1 = v72;
      a1[1] = v47;
      a1[2] = v73;
      a1[3] = &v72[v71];
      if (v19)
      {
        operator delete(v19);
        v47 = (char *)a1[1];
      }
    }
    else
    {
      v47 = v19;
    }
    *((_QWORD *)v47 - 1) = v25;
    v84 = (char *)a1[1];
    v5 = (char *)a1[2];
    a1[1] = v84 - 8;
    v8 = *((_QWORD *)v84 - 1);
    a1[1] = v84;
    if (v5 != (char *)a1[3])
      goto LABEL_92;
    v85 = (char *)*a1;
    if ((unint64_t)v84 > *a1)
    {
      v86 = (uint64_t)&v84[-*a1] >> 3;
      if (v86 >= -1)
        v87 = v86 + 1;
      else
        v87 = v86 + 2;
      v88 = v87 >> 1;
      v89 = -v88;
      v90 = &v84[-8 * v88];
      v91 = v5 - v84;
      if (v5 != v84)
      {
        memmove(&v84[-8 * v88], v84, v5 - v84);
        v84 = (char *)a1[1];
      }
      v5 = &v90[v91];
      v16 = &v84[8 * v89];
LABEL_11:
      a1[1] = v16;
      a1[2] = v5;
      goto LABEL_92;
    }
    v101 = (v5 - v85) >> 2;
    if (v5 == v85)
      v101 = 1;
    if (!(v101 >> 61))
    {
      v102 = v101 >> 2;
      v103 = 8 * v101;
      v104 = (char *)operator new(8 * v101);
      v105 = &v104[8 * v102];
      v106 = v5 - v84;
      v43 = v5 == v84;
      v5 = v105;
      if (!v43)
      {
        v5 = &v105[v106 & 0xFFFFFFFFFFFFFFF8];
        v107 = v106 - 8;
        if ((unint64_t)(v106 - 8) >= 0x38)
        {
          v109 = &v104[8 * v102];
          v108 = v109;
          if ((unint64_t)(v109 - v84) >= 0x20)
          {
            v110 = (v107 >> 3) + 1;
            v111 = 8 * (v110 & 0x3FFFFFFFFFFFFFFCLL);
            v108 = &v105[v111];
            v112 = &v84[v111];
            v113 = (__int128 *)(v84 + 16);
            v114 = v109 + 16;
            v115 = v110 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v116 = *v113;
              *(v114 - 1) = *(v113 - 1);
              *v114 = v116;
              v113 += 2;
              v114 += 2;
              v115 -= 4;
            }
            while (v115);
            v84 = v112;
            if (v110 == (v110 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_106;
          }
        }
        else
        {
          v108 = &v104[8 * v102];
        }
        do
        {
          v117 = *(_QWORD *)v84;
          v84 += 8;
          *(_QWORD *)v108 = v117;
          v108 += 8;
        }
        while (v108 != v5);
      }
LABEL_106:
      *a1 = v104;
      a1[1] = v105;
      a1[2] = v5;
      a1[3] = &v104[v103];
      if (!v85)
        goto LABEL_92;
      v100 = v85;
      goto LABEL_91;
    }
LABEL_109:
    sub_2108B2B1C();
  }
  v26 = v23 >> 2;
  if (v17 == v20)
    v27 = 1;
  else
    v27 = v26;
  if (v27 >> 61)
    goto LABEL_109;
  v28 = (char *)operator new(8 * v27);
  v29 = operator new(0x1000uLL);
  v30 = v29;
  v31 = &v28[8 * v22];
  v32 = &v28[8 * v27];
  if (v22 == v27)
  {
    if (v21 < 1)
    {
      if (v18 == v19)
        v48 = 1;
      else
        v48 = v21 >> 2;
      if (v48 >> 61)
        sub_2108B2B1C();
      v31 = (char *)operator new(8 * v48);
      v32 = &v31[8 * v48];
      operator delete(v28);
      v49 = (char *)a1[1];
      v18 = (char *)a1[2];
      v28 = v31;
      *(_QWORD *)v31 = v30;
      v34 = v31 + 8;
      if (v18 == v49)
        goto LABEL_25;
      do
      {
LABEL_44:
        if (v31 == v28)
        {
          if (v34 >= v32)
          {
            if (v32 == v31)
              v54 = 1;
            else
              v54 = (v32 - v31) >> 2;
            if (v54 >> 61)
              sub_2108B2B1C();
            v55 = (char *)operator new(8 * v54);
            v28 = v55;
            v56 = (v54 + 3) >> 2;
            v50 = &v55[8 * v56];
            v36 = v50;
            v57 = v34 - v31;
            if (v34 != v31)
            {
              v36 = &v50[v57 & 0xFFFFFFFFFFFFFFF8];
              v58 = v57 - 8;
              v59 = &v55[8 * v56];
              v60 = v31;
              if (v58 < 0x38)
                goto LABEL_114;
              v61 = 8 * v56;
              v59 = &v55[8 * v56];
              v60 = v31;
              if ((unint64_t)(v59 - v31) < 0x20)
                goto LABEL_114;
              v62 = (v58 >> 3) + 1;
              v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
              v59 = &v50[v63];
              v60 = &v31[v63];
              v64 = (__int128 *)(v31 + 16);
              v65 = &v55[v61 + 16];
              v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v67 = *v64;
                *((_OWORD *)v65 - 1) = *(v64 - 1);
                *(_OWORD *)v65 = v67;
                v64 += 2;
                v65 += 32;
                v66 -= 4;
              }
              while (v66);
              if (v62 != (v62 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_114:
                do
                {
                  v68 = *(_QWORD *)v60;
                  v60 += 8;
                  *(_QWORD *)v59 = v68;
                  v59 += 8;
                }
                while (v59 != v36);
              }
            }
            v32 = &v55[8 * v54];
            operator delete(v31);
          }
          else
          {
            v52 = (v32 - v34) >> 3;
            if (v52 >= -1)
              v53 = v52 + 1;
            else
              v53 = v52 + 2;
            v36 = &v34[8 * (v53 >> 1)];
            v50 = &v31[8 * (v53 >> 1)];
            if (v34 == v31)
            {
              v28 = v34;
            }
            else
            {
              memmove(&v31[8 * (v53 >> 1)], v31, v34 - v31);
              v28 = v31;
            }
          }
        }
        else
        {
          v50 = v31;
          v36 = v34;
        }
        v51 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *((_QWORD *)v50 - 1) = v51;
        v35 = v50 - 8;
        v34 = v36;
        v31 = v35;
      }
      while (v18 != (char *)a1[1]);
      goto LABEL_26;
    }
    v33 = v22 + 2;
    if (v22 >= -1)
      v33 = v22 + 1;
    v31 -= 8 * (v33 >> 1);
  }
  *(_QWORD *)v31 = v29;
  v34 = v31 + 8;
  if (v18 != v19)
    goto LABEL_44;
LABEL_25:
  v35 = v31;
  v36 = v34;
LABEL_26:
  v37 = (char *)*a1;
  *a1 = v28;
  a1[1] = v35;
  a1[2] = v36;
  a1[3] = v32;
  if (v37)
    operator delete(v37);
}

void sub_2109A940C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2109A9428(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2109A943C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2109A9454(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_2109A946C(_QWORD *a1, unint64_t a2)
{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v4 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v3 >> 47) ^ v3);
  v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v5;
    if (v5 >= *(_QWORD *)&v2)
      v7 = v5 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = (*(_QWORD *)&v2 - 1) & v5;
  }
  v8 = *(_QWORD **)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  result = (_QWORD *)*v8;
  if (*v8)
  {
    if (v6.u32[0] < 2uLL)
    {
      v10 = *(_QWORD *)&v2 - 1;
      while (1)
      {
        v12 = result[1];
        if (v12 == v5)
        {
          if (result[2] == a2)
            return result;
        }
        else if ((v12 & v10) != v7)
        {
          return 0;
        }
        result = (_QWORD *)*result;
        if (!result)
          return result;
      }
    }
    do
    {
      v11 = result[1];
      if (v11 == v5)
      {
        if (result[2] == a2)
          return result;
      }
      else
      {
        if (v11 >= *(_QWORD *)&v2)
          v11 %= *(_QWORD *)&v2;
        if (v11 != v7)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

void sub_2109A957C(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  char v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t (**v18)();
  char v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  sub_21098DEA0(v10 + 8, a2, (uint64_t)&v18);
  v11 = v19;
  if (v19)
  {
    *(_QWORD *)a5 = &off_24CA79A00;
    *(_BYTE *)(a5 + 8) = v11;
    v12 = v21;
    *(_QWORD *)(a5 + 16) = v20;
    *(_QWORD *)(a5 + 24) = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    *(_BYTE *)(a5 + 32) = 0;
    *(_BYTE *)(a5 + 56) = 0;
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, a2, a3, a4);
  }
  v18 = &off_24CA79A00;
  v15 = v21;
  if (v21)
  {
    v16 = (unint64_t *)&v21->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_2109A9694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2108AB288(&a9);
  _Unwind_Resume(a1);
}

void sub_2109A96A8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  char *v9;
  char *v10;
  void *v11;
  char *v12;
  uint64_t v13;
  void *__p;
  char *v15;
  char v16;

  sub_210990490(a2, &__p);
  sub_2109A957C(a1, &__p, a3, a4, a5);
  v9 = (char *)__p;
  if (__p)
  {
    v10 = v15;
    v11 = __p;
    if (v15 != __p)
    {
      do
      {
        v12 = v10 - 128;
        v13 = *((unsigned int *)v10 - 2);
        if ((_DWORD)v13 != -1)
          ((void (*)(char *, char *))off_24CA83018[v13])(&v16, v10 - 128);
        *((_DWORD *)v10 - 2) = -1;
        v10 -= 128;
      }
      while (v12 != v9);
      v11 = __p;
    }
    v15 = v9;
    operator delete(v11);
  }
}

void sub_2109A9774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_21095F86C(&a9);
  _Unwind_Resume(a1);
}

void sub_2109A978C(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  char v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t (**v18)();
  char v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  sub_21098DEA0(v10 + 8, a2, (uint64_t)&v18);
  v11 = v19;
  if (v19)
  {
    *(_QWORD *)a5 = &off_24CA79A00;
    *(_BYTE *)(a5 + 8) = v11;
    v12 = v21;
    *(_QWORD *)(a5 + 16) = v20;
    *(_QWORD *)(a5 + 24) = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    *(_BYTE *)(a5 + 32) = 0;
    *(_BYTE *)(a5 + 56) = 0;
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, a2, a3, a4);
  }
  v18 = &off_24CA79A00;
  v15 = v21;
  if (v21)
  {
    v16 = (unint64_t *)&v21->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_2109A98A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2108AB288(&a9);
  _Unwind_Resume(a1);
}

void *sub_2109A98B8(char **a1, uint64_t a2)
{
  char *v3;
  int v4;
  int v5;
  void *result;
  size_t v7;
  __int32 v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int v12;
  int v13;
  char *v14;
  __int32 v15;
  char *v16;
  __int32 v17;
  int v18;
  __int32 v19;
  char *v20;
  int v21;
  __int32 v22;
  char *v23;
  __int32 v24;
  int i;
  __int32 v26;
  char *v27;
  int v28;
  char *v29;
  uint64_t v30;
  int v31;
  __int32 v32;
  void *__src;
  int32x4_t v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;

  v3 = *a1;
  v4 = *(_DWORD *)(a2 + 24);
  v5 = *(_DWORD *)(a2 + 4);
  result = (void *)sub_2108C0534(a2, (uint64_t)&__src);
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v34))) & 1) == 0 && v35)
  {
    v7 = (v5 * v4);
    v8 = v34.i32[2] - 1;
    v9 = v36;
    v10 = v37;
    v11 = (char *)__src;
    v31 = v35 - 1;
    v32 = v34.i32[3] - 1;
    if (v35 != 1)
    {
      v30 = v38;
      if (v34.i32[3] == 1)
      {
        if (v34.i32[2] == 1)
        {
          if (!(_DWORD)v7)
            return result;
          do
          {
            result = memmove(v3, v11, v7);
            v3 = &a1[3][(_QWORD)v3];
            v11 += v30;
            --v31;
          }
          while (v31);
        }
        else
        {
          if (!(_DWORD)v7)
            return result;
          v18 = 0;
          do
          {
            v19 = v8;
            v20 = v11;
            do
            {
              memmove(v3, v20, v7);
              v3 = &a1[3][(_QWORD)v3];
              v20 += v9;
              --v19;
            }
            while (v19);
            result = memmove(v3, v20, v7);
            v3 = &a1[3][(_QWORD)v3];
            v11 += v30;
            ++v18;
          }
          while (v18 != v31);
        }
      }
      else if (v34.i32[2] == 1)
      {
        if (!(_DWORD)v7)
          return result;
        v21 = 0;
        do
        {
          v22 = v32;
          v23 = v11;
          do
          {
            memmove(v3, v23, v7);
            v3 = &a1[3][(_QWORD)v3];
            v23 += v10;
            --v22;
          }
          while (v22);
          result = memmove(v3, v23, v7);
          v3 = &a1[3][(_QWORD)v3];
          v11 += v30;
          ++v21;
        }
        while (v21 != v31);
      }
      else
      {
        if (!(_DWORD)v7)
          return result;
        v12 = 0;
        do
        {
          v28 = v12;
          v13 = 0;
          v29 = v11;
          v14 = v11;
          do
          {
            v15 = v8;
            v16 = v14;
            do
            {
              memmove(v3, v16, v7);
              v3 = &a1[3][(_QWORD)v3];
              v16 += v9;
              --v15;
            }
            while (v15);
            memmove(v3, v16, v7);
            v3 = &a1[3][(_QWORD)v3];
            v14 += v10;
            ++v13;
          }
          while (v13 != v32);
          v17 = v8;
          do
          {
            memmove(v3, v14, v7);
            v3 = &a1[3][(_QWORD)v3];
            v14 += v9;
            --v17;
          }
          while (v17);
          result = memmove(v3, v14, v7);
          v3 = &a1[3][(_QWORD)v3];
          v11 = &v29[v30];
          v12 = v28 + 1;
        }
        while (v28 + 1 != v31);
      }
    }
    v24 = v32;
    if (v32)
    {
      if (v8)
      {
        if (!(_DWORD)v7)
          return result;
        for (i = 0; i != v32; ++i)
        {
          v26 = v8;
          v27 = v11;
          do
          {
            memmove(v3, v27, v7);
            v3 = &a1[3][(_QWORD)v3];
            v27 += v9;
            --v26;
          }
          while (v26);
          result = memmove(v3, v27, v7);
          v3 = &a1[3][(_QWORD)v3];
          v11 += v10;
        }
      }
      else
      {
        if (!(_DWORD)v7)
          return result;
        do
        {
          result = memmove(v3, v11, v7);
          v3 = &a1[3][(_QWORD)v3];
          v11 += v10;
          --v24;
        }
        while (v24);
      }
    }
    if (v8)
    {
      if (!(_DWORD)v7)
        return result;
      do
      {
        result = memmove(v3, v11, v7);
        v3 = &a1[3][(_QWORD)v3];
        v11 += v9;
        --v8;
      }
      while (v8);
    }
    if ((_DWORD)v7)
      return memmove(v3, v11, v7);
  }
  return result;
}

std::string *sub_2109A9C1C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A72638);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A72638))
    return &stru_254A72620;
  sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Two16u]", __p);
  sub_2109ED678((uint64_t)__p, &stru_254A72620);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A72620, &dword_21089F000);
  __cxa_guard_release(&qword_254A72638);
  return &stru_254A72620;
}

void sub_2109A9CD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A72638);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A72638);
  _Unwind_Resume(a1);
}

std::string *sub_2109A9D14()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A72658);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A72658))
    return &stru_254A72640;
  sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Three8u]", __p);
  sub_2109ED678((uint64_t)__p, &stru_254A72640);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A72640, &dword_21089F000);
  __cxa_guard_release(&qword_254A72658);
  return &stru_254A72640;
}

void sub_2109A9DCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A72658);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A72658);
  _Unwind_Resume(a1);
}

std::string *sub_2109A9E0C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A72678);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A72678))
    return &stru_254A72660;
  sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Three16u]", __p);
  sub_2109ED678((uint64_t)__p, &stru_254A72660);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A72660, &dword_21089F000);
  __cxa_guard_release(&qword_254A72678);
  return &stru_254A72660;
}

void sub_2109A9EC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A72678);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A72678);
  _Unwind_Resume(a1);
}

std::string *sub_2109A9F04()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A72698);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A72698))
    return &stru_254A72680;
  sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Three16f]", __p);
  sub_2109ED678((uint64_t)__p, &stru_254A72680);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A72680, &dword_21089F000);
  __cxa_guard_release(&qword_254A72698);
  return &stru_254A72680;
}

void sub_2109A9FBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A72698);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A72698);
  _Unwind_Resume(a1);
}

std::string *sub_2109A9FFC()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A726B8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A726B8))
    return &stru_254A726A0;
  sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Three32f]", __p);
  sub_2109ED678((uint64_t)__p, &stru_254A726A0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A726A0, &dword_21089F000);
  __cxa_guard_release(&qword_254A726B8);
  return &stru_254A726A0;
}

void sub_2109AA0B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A726B8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A726B8);
  _Unwind_Resume(a1);
}

std::string *sub_2109AA0F4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A726D8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A726D8))
    return &stru_254A726C0;
  sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Four8u]", __p);
  sub_2109ED678((uint64_t)__p, &stru_254A726C0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A726C0, &dword_21089F000);
  __cxa_guard_release(&qword_254A726D8);
  return &stru_254A726C0;
}

void sub_2109AA1AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A726D8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A726D8);
  _Unwind_Resume(a1);
}

std::string *sub_2109AA1EC()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A726F8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A726F8))
    return &stru_254A726E0;
  sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Four16u]", __p);
  sub_2109ED678((uint64_t)__p, &stru_254A726E0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A726E0, &dword_21089F000);
  __cxa_guard_release(&qword_254A726F8);
  return &stru_254A726E0;
}

void sub_2109AA2A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A726F8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A726F8);
  _Unwind_Resume(a1);
}

std::string *sub_2109AA2E4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A72718);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A72718))
    return &stru_254A72700;
  sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Four16f]", __p);
  sub_2109ED678((uint64_t)__p, &stru_254A72700);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A72700, &dword_21089F000);
  __cxa_guard_release(&qword_254A72718);
  return &stru_254A72700;
}

void sub_2109AA39C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A72718);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A72718);
  _Unwind_Resume(a1);
}

std::string *sub_2109AA3DC()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A72738);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A72738))
    return &stru_254A72720;
  sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Four32f]", __p);
  sub_2109ED678((uint64_t)__p, &stru_254A72720);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A72720, &dword_21089F000);
  __cxa_guard_release(&qword_254A72738);
  return &stru_254A72720;
}

void sub_2109AA494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A72738);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A72738);
  _Unwind_Resume(a1);
}

std::string *sub_2109AA4D4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A72758);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A72758))
    return &stru_254A72740;
  sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Bgr16u]", __p);
  sub_2109ED678((uint64_t)__p, &stru_254A72740);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A72740, &dword_21089F000);
  __cxa_guard_release(&qword_254A72758);
  return &stru_254A72740;
}

void sub_2109AA58C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A72758);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A72758);
  _Unwind_Resume(a1);
}

std::string *sub_2109AA5CC()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A72778);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A72778))
    return &stru_254A72760;
  sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Bgr16f]", __p);
  sub_2109ED678((uint64_t)__p, &stru_254A72760);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A72760, &dword_21089F000);
  __cxa_guard_release(&qword_254A72778);
  return &stru_254A72760;
}

void sub_2109AA684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A72778);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A72778);
  _Unwind_Resume(a1);
}

std::string *sub_2109AA6C4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A72798);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A72798))
    return &stru_254A72780;
  sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Bgr32f]", __p);
  sub_2109ED678((uint64_t)__p, &stru_254A72780);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A72780, &dword_21089F000);
  __cxa_guard_release(&qword_254A72798);
  return &stru_254A72780;
}

void sub_2109AA77C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A72798);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A72798);
  _Unwind_Resume(a1);
}

std::string *sub_2109AA7BC()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A727B8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A727B8))
    return &stru_254A727A0;
  sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Rgb16f]", __p);
  sub_2109ED678((uint64_t)__p, &stru_254A727A0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A727A0, &dword_21089F000);
  __cxa_guard_release(&qword_254A727B8);
  return &stru_254A727A0;
}

void sub_2109AA874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A727B8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A727B8);
  _Unwind_Resume(a1);
}

std::string *sub_2109AA8B4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A727D8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A727D8))
    return &stru_254A727C0;
  sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Rgb32f]", __p);
  sub_2109ED678((uint64_t)__p, &stru_254A727C0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A727C0, &dword_21089F000);
  __cxa_guard_release(&qword_254A727D8);
  return &stru_254A727C0;
}

void sub_2109AA96C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A727D8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A727D8);
  _Unwind_Resume(a1);
}

std::string *sub_2109AA9AC()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A727F8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A727F8))
    return &stru_254A727E0;
  sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Bgra16u]", __p);
  sub_2109ED678((uint64_t)__p, &stru_254A727E0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A727E0, &dword_21089F000);
  __cxa_guard_release(&qword_254A727F8);
  return &stru_254A727E0;
}

void sub_2109AAA64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A727F8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A727F8);
  _Unwind_Resume(a1);
}

std::string *sub_2109AAAA4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A72818);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A72818))
    return &stru_254A72800;
  sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Bgra16f]", __p);
  sub_2109ED678((uint64_t)__p, &stru_254A72800);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A72800, &dword_21089F000);
  __cxa_guard_release(&qword_254A72818);
  return &stru_254A72800;
}

void sub_2109AAB5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A72818);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A72818);
  _Unwind_Resume(a1);
}

std::string *sub_2109AAB9C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A72838);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A72838))
    return &stru_254A72820;
  sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Rgba16u]", __p);
  sub_2109ED678((uint64_t)__p, &stru_254A72820);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A72820, &dword_21089F000);
  __cxa_guard_release(&qword_254A72838);
  return &stru_254A72820;
}

void sub_2109AAC54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A72838);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A72838);
  _Unwind_Resume(a1);
}

std::string *sub_2109AAC94()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A72858);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A72858))
    return &stru_254A72840;
  sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Abgr16u]", __p);
  sub_2109ED678((uint64_t)__p, &stru_254A72840);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A72840, &dword_21089F000);
  __cxa_guard_release(&qword_254A72858);
  return &stru_254A72840;
}

void sub_2109AAD4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A72858);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A72858);
  _Unwind_Resume(a1);
}

std::string *sub_2109AAD8C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A72878);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A72878))
    return &stru_254A72860;
  sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Abgr16f]", __p);
  sub_2109ED678((uint64_t)__p, &stru_254A72860);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A72860, &dword_21089F000);
  __cxa_guard_release(&qword_254A72878);
  return &stru_254A72860;
}

void sub_2109AAE44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A72878);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A72878);
  _Unwind_Resume(a1);
}

std::string *sub_2109AAE84()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A72898);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A72898))
    return &stru_254A72880;
  sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Abgr32f]", __p);
  sub_2109ED678((uint64_t)__p, &stru_254A72880);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A72880, &dword_21089F000);
  __cxa_guard_release(&qword_254A72898);
  return &stru_254A72880;
}

void sub_2109AAF3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A72898);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A72898);
  _Unwind_Resume(a1);
}

std::string *sub_2109AAF7C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A728B8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A728B8))
    return &stru_254A728A0;
  sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Argb16f]", __p);
  sub_2109ED678((uint64_t)__p, &stru_254A728A0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A728A0, &dword_21089F000);
  __cxa_guard_release(&qword_254A728B8);
  return &stru_254A728A0;
}

void sub_2109AB034(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A728B8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A728B8);
  _Unwind_Resume(a1);
}

std::string *sub_2109AB074()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A728D8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A728D8))
    return &stru_254A728C0;
  sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Argb32f]", __p);
  sub_2109ED678((uint64_t)__p, &stru_254A728C0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A728C0, &dword_21089F000);
  __cxa_guard_release(&qword_254A728D8);
  return &stru_254A728C0;
}

void sub_2109AB12C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A728D8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A728D8);
  _Unwind_Resume(a1);
}

_QWORD *sub_2109AB16C(_QWORD *a1, unsigned int *a2)
{
  uint64_t v2;
  char **v3;
  const char *v4;
  uint64_t v5;

  v2 = *a2;
  if (v2 >= 0x29)
  {
    sub_2108CEF94(a1, (uint64_t)"Invalid Format (", 16);
    a1 = (_QWORD *)std::ostream::operator<<();
    v4 = ")";
    v5 = 1;
  }
  else
  {
    v3 = &(&off_24CA83030)[2 * v2];
    v4 = *v3;
    v5 = (uint64_t)v3[1];
  }
  return sub_2108CEF94(a1, (uint64_t)v4, v5);
}

BOOL sub_2109AB1D0(uint64_t a1)
{
  uint64_t v1;
  char v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t (**v12)();
  uint64_t *v13;
  std::__shared_weak_count *v14;

  v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!v2)
  {
    v4 = 0;
    v13 = 0;
    v14 = 0;
    goto LABEL_11;
  }
  v13 = 0;
  v14 = 0;
  v12 = &off_24CA84E68;
  (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v1 + 56))(v1, &v12);
  if (!v13)
  {
    v4 = 0;
    v12 = &off_24CA84E68;
    v8 = v14;
    if (!v14)
      return v4 != 0;
    goto LABEL_12;
  }
  v4 = *v13;
  v3 = (std::__shared_weak_count *)v13[1];
  if (!v3)
    goto LABEL_11;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v6 = __ldxr(p_shared_owners);
  while (__stxr(v6 + 1, p_shared_owners));
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (v7)
  {
LABEL_11:
    v12 = &off_24CA84E68;
    v8 = v14;
    if (!v14)
      return v4 != 0;
    goto LABEL_12;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  v12 = &off_24CA84E68;
  v8 = v14;
  if (!v14)
    return v4 != 0;
LABEL_12:
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  return v4 != 0;
}

void sub_2109AB2EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2109DEB5C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2109AB300@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  char v4;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = &off_24CA84E68;
  if (v4)
    return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)result + 56))(result, a2);
  return result;
}

void sub_2109AB36C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_2109DEB5C(v1);
  _Unwind_Resume(a1);
}

void sub_2109AB384()
{
  JUMPOUT(0x212BCC6FCLL);
}

uint64_t sub_2109AB398()
{
  return 1;
}

__int128 *sub_2109AB3A4()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A728F8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A728F8))
  {
    v2 = sub_2109AB47C();
    if (*((char *)v2 + 23) < 0)
    {
      sub_2108B314C(&xmmword_254A728E0, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_254A728F0 = *((_QWORD *)v2 + 2);
      xmmword_254A728E0 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A728E0, &dword_21089F000);
    __cxa_guard_release(&qword_254A728F8);
  }
  if (byte_254A728F7 >= 0)
    return &xmmword_254A728E0;
  else
    return (__int128 *)xmmword_254A728E0;
}

void sub_2109AB464(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A728F8);
  _Unwind_Resume(a1);
}

__int128 *sub_2109AB47C()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A72918);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A72918))
    return &xmmword_254A72900;
  v2 = sub_2109AB558();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(&xmmword_254A72900, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A72910 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A72900 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A72900, &dword_21089F000);
  __cxa_guard_release(&qword_254A72918);
  return &xmmword_254A72900;
}

void sub_2109AB540(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A72918);
  _Unwind_Resume(a1);
}

std::string *sub_2109AB558()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A72938);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A72938))
    return &stru_254A72920;
  sub_2109AB648((uint64_t)__p);
  sub_21090A970((char *)__p, &stru_254A72920);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A72920, &dword_21089F000);
  __cxa_guard_release(&qword_254A72938);
  return &stru_254A72920;
}

void sub_2109AB608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A72938);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A72938);
  _Unwind_Resume(a1);
}

void sub_2109AB648(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A72958);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A72958))
  {
    sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Gray8u>]", qword_254A72940);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A72940, &dword_21089F000);
    __cxa_guard_release(&qword_254A72958);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A72978);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A72978))
  {
    v5 = sub_21090AB9C(qword_254A72940, "<", 0);
    sub_21090AA98(qword_254A72940, 0, v5, qword_254A72960);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A72960, &dword_21089F000);
    __cxa_guard_release(&qword_254A72978);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A72998);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A72998))
  {
    sub_2109ED44C((uint64_t)qword_254A72960, (uint64_t)&xmmword_254A72980);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A72980, &dword_21089F000);
    __cxa_guard_release(&qword_254A72998);
  }
  if (byte_254A72997 < 0)
  {
    sub_2108B314C((_BYTE *)a1, (void *)xmmword_254A72980, *((unint64_t *)&xmmword_254A72980 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A72980;
    *(_QWORD *)(a1 + 16) = unk_254A72990;
  }
}

void sub_2109AB7E4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A72998);
  _Unwind_Resume(a1);
}

void sub_2109AB7FC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A72978);
  _Unwind_Resume(a1);
}

void sub_2109AB814(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A72958);
  _Unwind_Resume(a1);
}

void sub_2109AB830()
{
  JUMPOUT(0x212BCC6FCLL);
}

uint64_t sub_2109AB844()
{
  return 2;
}

__int128 *sub_2109AB850()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A729B8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A729B8))
  {
    v2 = sub_2109AB928();
    if (*((char *)v2 + 23) < 0)
    {
      sub_2108B314C(&xmmword_254A729A0, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_254A729B0 = *((_QWORD *)v2 + 2);
      xmmword_254A729A0 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A729A0, &dword_21089F000);
    __cxa_guard_release(&qword_254A729B8);
  }
  if (byte_254A729B7 >= 0)
    return &xmmword_254A729A0;
  else
    return (__int128 *)xmmword_254A729A0;
}

void sub_2109AB910(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A729B8);
  _Unwind_Resume(a1);
}

__int128 *sub_2109AB928()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A729D8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A729D8))
    return &xmmword_254A729C0;
  v2 = sub_2109ABA04();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(&xmmword_254A729C0, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A729D0 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A729C0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A729C0, &dword_21089F000);
  __cxa_guard_release(&qword_254A729D8);
  return &xmmword_254A729C0;
}

void sub_2109AB9EC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A729D8);
  _Unwind_Resume(a1);
}

std::string *sub_2109ABA04()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A729F8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A729F8))
    return &stru_254A729E0;
  sub_2109ABAF4((uint64_t)__p);
  sub_21090AC90((char *)__p, &stru_254A729E0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A729E0, &dword_21089F000);
  __cxa_guard_release(&qword_254A729F8);
  return &stru_254A729E0;
}

void sub_2109ABAB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A729F8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A729F8);
  _Unwind_Resume(a1);
}

void sub_2109ABAF4(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A72A18);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A72A18))
  {
    sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Gray16u>]", qword_254A72A00);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A72A00, &dword_21089F000);
    __cxa_guard_release(&qword_254A72A18);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A72A38);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A72A38))
  {
    v5 = sub_21090AB9C(qword_254A72A00, "<", 0);
    sub_21090AA98(qword_254A72A00, 0, v5, qword_254A72A20);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A72A20, &dword_21089F000);
    __cxa_guard_release(&qword_254A72A38);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A72A58);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A72A58))
  {
    sub_2109ED44C((uint64_t)qword_254A72A20, (uint64_t)&xmmword_254A72A40);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A72A40, &dword_21089F000);
    __cxa_guard_release(&qword_254A72A58);
  }
  if (byte_254A72A57 < 0)
  {
    sub_2108B314C((_BYTE *)a1, (void *)xmmword_254A72A40, *((unint64_t *)&xmmword_254A72A40 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A72A40;
    *(_QWORD *)(a1 + 16) = unk_254A72A50;
  }
}

void sub_2109ABC90(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A72A58);
  _Unwind_Resume(a1);
}

void sub_2109ABCA8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A72A38);
  _Unwind_Resume(a1);
}

void sub_2109ABCC0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A72A18);
  _Unwind_Resume(a1);
}

uint64_t sub_2109ABCD8()
{
  return 3;
}

__int128 *sub_2109ABCE4()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A72A78);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A72A78))
  {
    v2 = sub_2109ABDBC();
    if (*((char *)v2 + 23) < 0)
    {
      sub_2108B314C(&xmmword_254A72A60, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_254A72A70 = *((_QWORD *)v2 + 2);
      xmmword_254A72A60 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A72A60, &dword_21089F000);
    __cxa_guard_release(&qword_254A72A78);
  }
  if (byte_254A72A77 >= 0)
    return &xmmword_254A72A60;
  else
    return (__int128 *)xmmword_254A72A60;
}

void sub_2109ABDA4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A72A78);
  _Unwind_Resume(a1);
}

__int128 *sub_2109ABDBC()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A72A98);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A72A98))
    return &xmmword_254A72A80;
  v2 = sub_2109ABE98();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(&xmmword_254A72A80, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A72A90 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A72A80 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A72A80, &dword_21089F000);
  __cxa_guard_release(&qword_254A72A98);
  return &xmmword_254A72A80;
}

void sub_2109ABE80(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A72A98);
  _Unwind_Resume(a1);
}

std::string *sub_2109ABE98()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A72AB8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A72AB8))
    return &stru_254A72AA0;
  sub_2109ABF88((uint64_t)__p);
  sub_21090ADB8((char *)__p, &stru_254A72AA0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A72AA0, &dword_21089F000);
  __cxa_guard_release(&qword_254A72AB8);
  return &stru_254A72AA0;
}

void sub_2109ABF48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A72AB8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A72AB8);
  _Unwind_Resume(a1);
}

void sub_2109ABF88(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A72AD8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A72AD8))
  {
    sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Gray16f>]", qword_254A72AC0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A72AC0, &dword_21089F000);
    __cxa_guard_release(&qword_254A72AD8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A72AF8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A72AF8))
  {
    v5 = sub_21090AB9C(qword_254A72AC0, "<", 0);
    sub_21090AA98(qword_254A72AC0, 0, v5, qword_254A72AE0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A72AE0, &dword_21089F000);
    __cxa_guard_release(&qword_254A72AF8);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A72B18);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A72B18))
  {
    sub_2109ED44C((uint64_t)qword_254A72AE0, (uint64_t)&xmmword_254A72B00);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A72B00, &dword_21089F000);
    __cxa_guard_release(&qword_254A72B18);
  }
  if (byte_254A72B17 < 0)
  {
    sub_2108B314C((_BYTE *)a1, (void *)xmmword_254A72B00, *((unint64_t *)&xmmword_254A72B00 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A72B00;
    *(_QWORD *)(a1 + 16) = unk_254A72B10;
  }
}

void sub_2109AC124(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A72B18);
  _Unwind_Resume(a1);
}

void sub_2109AC13C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A72AF8);
  _Unwind_Resume(a1);
}

void sub_2109AC154(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A72AD8);
  _Unwind_Resume(a1);
}

void sub_2109AC170()
{
  JUMPOUT(0x212BCC6FCLL);
}

uint64_t sub_2109AC184()
{
  return 5;
}

__int128 *sub_2109AC190()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A72B38);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A72B38))
  {
    v2 = sub_2109AC268();
    if (*((char *)v2 + 23) < 0)
    {
      sub_2108B314C(&xmmword_254A72B20, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_254A72B30 = *((_QWORD *)v2 + 2);
      xmmword_254A72B20 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A72B20, &dword_21089F000);
    __cxa_guard_release(&qword_254A72B38);
  }
  if (byte_254A72B37 >= 0)
    return &xmmword_254A72B20;
  else
    return (__int128 *)xmmword_254A72B20;
}

void sub_2109AC250(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A72B38);
  _Unwind_Resume(a1);
}

__int128 *sub_2109AC268()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A72B58);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A72B58))
    return &xmmword_254A72B40;
  v2 = sub_2109AC344();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(&xmmword_254A72B40, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A72B50 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A72B40 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A72B40, &dword_21089F000);
  __cxa_guard_release(&qword_254A72B58);
  return &xmmword_254A72B40;
}

void sub_2109AC32C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A72B58);
  _Unwind_Resume(a1);
}

std::string *sub_2109AC344()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A72B78);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A72B78))
    return &stru_254A72B60;
  sub_2109AC434((uint64_t)__p);
  sub_21090B008((char *)__p, &stru_254A72B60);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A72B60, &dword_21089F000);
  __cxa_guard_release(&qword_254A72B78);
  return &stru_254A72B60;
}

void sub_2109AC3F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A72B78);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A72B78);
  _Unwind_Resume(a1);
}

void sub_2109AC434(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A72B98);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A72B98))
  {
    sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Two8u>]", qword_254A72B80);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A72B80, &dword_21089F000);
    __cxa_guard_release(&qword_254A72B98);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A72BB8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A72BB8))
  {
    v5 = sub_21090AB9C(qword_254A72B80, "<", 0);
    sub_21090AA98(qword_254A72B80, 0, v5, qword_254A72BA0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A72BA0, &dword_21089F000);
    __cxa_guard_release(&qword_254A72BB8);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A72BD8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A72BD8))
  {
    sub_2109ED44C((uint64_t)qword_254A72BA0, (uint64_t)&xmmword_254A72BC0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A72BC0, &dword_21089F000);
    __cxa_guard_release(&qword_254A72BD8);
  }
  if (byte_254A72BD7 < 0)
  {
    sub_2108B314C((_BYTE *)a1, (void *)xmmword_254A72BC0, *((unint64_t *)&xmmword_254A72BC0 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A72BC0;
    *(_QWORD *)(a1 + 16) = unk_254A72BD0;
  }
}

void sub_2109AC5D0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A72BD8);
  _Unwind_Resume(a1);
}

void sub_2109AC5E8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A72BB8);
  _Unwind_Resume(a1);
}

void sub_2109AC600(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A72B98);
  _Unwind_Resume(a1);
}

uint64_t sub_2109AC618()
{
  return 6;
}

__int128 *sub_2109AC624()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A72BF8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A72BF8))
  {
    v2 = sub_2109AC6FC();
    if (*((char *)v2 + 23) < 0)
    {
      sub_2108B314C(&xmmword_254A72BE0, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_254A72BF0 = *((_QWORD *)v2 + 2);
      xmmword_254A72BE0 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A72BE0, &dword_21089F000);
    __cxa_guard_release(&qword_254A72BF8);
  }
  if (byte_254A72BF7 >= 0)
    return &xmmword_254A72BE0;
  else
    return (__int128 *)xmmword_254A72BE0;
}

void sub_2109AC6E4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A72BF8);
  _Unwind_Resume(a1);
}

__int128 *sub_2109AC6FC()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A72C18);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A72C18))
    return &xmmword_254A72C00;
  v2 = sub_2109AC7D8();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(&xmmword_254A72C00, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A72C10 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A72C00 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A72C00, &dword_21089F000);
  __cxa_guard_release(&qword_254A72C18);
  return &xmmword_254A72C00;
}

void sub_2109AC7C0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A72C18);
  _Unwind_Resume(a1);
}

std::string *sub_2109AC7D8()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A72C38);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A72C38))
    return &stru_254A72C20;
  sub_2109AC9F0((uint64_t)__p);
  sub_2109AC8C8((char *)__p, &stru_254A72C20);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A72C20, &dword_21089F000);
  __cxa_guard_release(&qword_254A72C38);
  return &stru_254A72C20;
}

void sub_2109AC888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A72C38);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A72C38);
  _Unwind_Resume(a1);
}

void sub_2109AC8C8(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2109A9C1C();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_2108B9228(&__p, (uint64_t)__dst, 1uLL);
  sub_2109ED500(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_2109AC9C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_2108A89B4(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_2109AC9F0(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A72C58);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A72C58))
  {
    sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Two16u>]", qword_254A72C40);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A72C40, &dword_21089F000);
    __cxa_guard_release(&qword_254A72C58);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A72C78);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A72C78))
  {
    v5 = sub_21090AB9C(qword_254A72C40, "<", 0);
    sub_21090AA98(qword_254A72C40, 0, v5, qword_254A72C60);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A72C60, &dword_21089F000);
    __cxa_guard_release(&qword_254A72C78);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A72C98);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A72C98))
  {
    sub_2109ED44C((uint64_t)qword_254A72C60, (uint64_t)&xmmword_254A72C80);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A72C80, &dword_21089F000);
    __cxa_guard_release(&qword_254A72C98);
  }
  if (byte_254A72C97 < 0)
  {
    sub_2108B314C((_BYTE *)a1, (void *)xmmword_254A72C80, *((unint64_t *)&xmmword_254A72C80 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A72C80;
    *(_QWORD *)(a1 + 16) = unk_254A72C90;
  }
}

void sub_2109ACB8C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A72C98);
  _Unwind_Resume(a1);
}

void sub_2109ACBA4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A72C78);
  _Unwind_Resume(a1);
}

void sub_2109ACBBC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A72C58);
  _Unwind_Resume(a1);
}

uint64_t sub_2109ACBD4()
{
  return 7;
}

__int128 *sub_2109ACBE0()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A72CB8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A72CB8))
  {
    v2 = sub_2109ACCB8();
    if (*((char *)v2 + 23) < 0)
    {
      sub_2108B314C(&xmmword_254A72CA0, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_254A72CB0 = *((_QWORD *)v2 + 2);
      xmmword_254A72CA0 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A72CA0, &dword_21089F000);
    __cxa_guard_release(&qword_254A72CB8);
  }
  if (byte_254A72CB7 >= 0)
    return &xmmword_254A72CA0;
  else
    return (__int128 *)xmmword_254A72CA0;
}

void sub_2109ACCA0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A72CB8);
  _Unwind_Resume(a1);
}

__int128 *sub_2109ACCB8()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A72CD8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A72CD8))
    return &xmmword_254A72CC0;
  v2 = sub_2109ACD94();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(&xmmword_254A72CC0, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A72CD0 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A72CC0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A72CC0, &dword_21089F000);
  __cxa_guard_release(&qword_254A72CD8);
  return &xmmword_254A72CC0;
}

void sub_2109ACD7C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A72CD8);
  _Unwind_Resume(a1);
}

std::string *sub_2109ACD94()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A72CF8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A72CF8))
    return &stru_254A72CE0;
  sub_2109ACE84((uint64_t)__p);
  sub_21090B130((char *)__p, &stru_254A72CE0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A72CE0, &dword_21089F000);
  __cxa_guard_release(&qword_254A72CF8);
  return &stru_254A72CE0;
}

void sub_2109ACE44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A72CF8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A72CF8);
  _Unwind_Resume(a1);
}

void sub_2109ACE84(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A72D18);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A72D18))
  {
    sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Two16f>]", qword_254A72D00);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A72D00, &dword_21089F000);
    __cxa_guard_release(&qword_254A72D18);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A72D38);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A72D38))
  {
    v5 = sub_21090AB9C(qword_254A72D00, "<", 0);
    sub_21090AA98(qword_254A72D00, 0, v5, qword_254A72D20);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A72D20, &dword_21089F000);
    __cxa_guard_release(&qword_254A72D38);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A72D58);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A72D58))
  {
    sub_2109ED44C((uint64_t)qword_254A72D20, (uint64_t)&xmmword_254A72D40);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A72D40, &dword_21089F000);
    __cxa_guard_release(&qword_254A72D58);
  }
  if (byte_254A72D57 < 0)
  {
    sub_2108B314C((_BYTE *)a1, (void *)xmmword_254A72D40, *((unint64_t *)&xmmword_254A72D40 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A72D40;
    *(_QWORD *)(a1 + 16) = unk_254A72D50;
  }
}

void sub_2109AD020(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A72D58);
  _Unwind_Resume(a1);
}

void sub_2109AD038(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A72D38);
  _Unwind_Resume(a1);
}

void sub_2109AD050(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A72D18);
  _Unwind_Resume(a1);
}

void sub_2109AD06C()
{
  JUMPOUT(0x212BCC6FCLL);
}

uint64_t sub_2109AD080()
{
  return 9;
}

__int128 *sub_2109AD08C()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A72D78);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A72D78))
  {
    v2 = sub_2109AD164();
    if (*((char *)v2 + 23) < 0)
    {
      sub_2108B314C(&xmmword_254A72D60, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_254A72D70 = *((_QWORD *)v2 + 2);
      xmmword_254A72D60 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A72D60, &dword_21089F000);
    __cxa_guard_release(&qword_254A72D78);
  }
  if (byte_254A72D77 >= 0)
    return &xmmword_254A72D60;
  else
    return (__int128 *)xmmword_254A72D60;
}

void sub_2109AD14C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A72D78);
  _Unwind_Resume(a1);
}

__int128 *sub_2109AD164()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A72D98);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A72D98))
    return &xmmword_254A72D80;
  v2 = sub_2109AD240();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(&xmmword_254A72D80, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A72D90 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A72D80 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A72D80, &dword_21089F000);
  __cxa_guard_release(&qword_254A72D98);
  return &xmmword_254A72D80;
}

void sub_2109AD228(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A72D98);
  _Unwind_Resume(a1);
}

std::string *sub_2109AD240()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A72DB8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A72DB8))
    return &stru_254A72DA0;
  sub_2109AD458((uint64_t)__p);
  sub_2109AD330((char *)__p, &stru_254A72DA0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A72DA0, &dword_21089F000);
  __cxa_guard_release(&qword_254A72DB8);
  return &stru_254A72DA0;
}

void sub_2109AD2F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A72DB8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A72DB8);
  _Unwind_Resume(a1);
}

void sub_2109AD330(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2109A9D14();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_2108B9228(&__p, (uint64_t)__dst, 1uLL);
  sub_2109ED500(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_2109AD42C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_2108A89B4(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_2109AD458(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A72DD8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A72DD8))
  {
    sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Three8u>]", qword_254A72DC0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A72DC0, &dword_21089F000);
    __cxa_guard_release(&qword_254A72DD8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A72DF8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A72DF8))
  {
    v5 = sub_21090AB9C(qword_254A72DC0, "<", 0);
    sub_21090AA98(qword_254A72DC0, 0, v5, qword_254A72DE0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A72DE0, &dword_21089F000);
    __cxa_guard_release(&qword_254A72DF8);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A72E18);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A72E18))
  {
    sub_2109ED44C((uint64_t)qword_254A72DE0, (uint64_t)&xmmword_254A72E00);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A72E00, &dword_21089F000);
    __cxa_guard_release(&qword_254A72E18);
  }
  if (byte_254A72E17 < 0)
  {
    sub_2108B314C((_BYTE *)a1, (void *)xmmword_254A72E00, *((unint64_t *)&xmmword_254A72E00 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A72E00;
    *(_QWORD *)(a1 + 16) = unk_254A72E10;
  }
}

void sub_2109AD5F4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A72E18);
  _Unwind_Resume(a1);
}

void sub_2109AD60C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A72DF8);
  _Unwind_Resume(a1);
}

void sub_2109AD624(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A72DD8);
  _Unwind_Resume(a1);
}

uint64_t sub_2109AD63C()
{
  return 10;
}

__int128 *sub_2109AD648()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A72E38);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A72E38))
  {
    v2 = sub_2109AD720();
    if (*((char *)v2 + 23) < 0)
    {
      sub_2108B314C(&xmmword_254A72E20, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_254A72E30 = *((_QWORD *)v2 + 2);
      xmmword_254A72E20 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A72E20, &dword_21089F000);
    __cxa_guard_release(&qword_254A72E38);
  }
  if (byte_254A72E37 >= 0)
    return &xmmword_254A72E20;
  else
    return (__int128 *)xmmword_254A72E20;
}

void sub_2109AD708(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A72E38);
  _Unwind_Resume(a1);
}

__int128 *sub_2109AD720()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A72E58);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A72E58))
    return &xmmword_254A72E40;
  v2 = sub_2109AD7FC();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(&xmmword_254A72E40, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A72E50 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A72E40 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A72E40, &dword_21089F000);
  __cxa_guard_release(&qword_254A72E58);
  return &xmmword_254A72E40;
}

void sub_2109AD7E4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A72E58);
  _Unwind_Resume(a1);
}

std::string *sub_2109AD7FC()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A72E78);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A72E78))
    return &stru_254A72E60;
  sub_2109ADA14((uint64_t)__p);
  sub_2109AD8EC((char *)__p, &stru_254A72E60);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A72E60, &dword_21089F000);
  __cxa_guard_release(&qword_254A72E78);
  return &stru_254A72E60;
}

void sub_2109AD8AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A72E78);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A72E78);
  _Unwind_Resume(a1);
}

void sub_2109AD8EC(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2109A9E0C();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_2108B9228(&__p, (uint64_t)__dst, 1uLL);
  sub_2109ED500(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_2109AD9E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_2108A89B4(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_2109ADA14(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A72E98);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A72E98))
  {
    sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Three16u>]", qword_254A72E80);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A72E80, &dword_21089F000);
    __cxa_guard_release(&qword_254A72E98);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A72EB8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A72EB8))
  {
    v5 = sub_21090AB9C(qword_254A72E80, "<", 0);
    sub_21090AA98(qword_254A72E80, 0, v5, qword_254A72EA0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A72EA0, &dword_21089F000);
    __cxa_guard_release(&qword_254A72EB8);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A72ED8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A72ED8))
  {
    sub_2109ED44C((uint64_t)qword_254A72EA0, (uint64_t)&xmmword_254A72EC0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A72EC0, &dword_21089F000);
    __cxa_guard_release(&qword_254A72ED8);
  }
  if (byte_254A72ED7 < 0)
  {
    sub_2108B314C((_BYTE *)a1, (void *)xmmword_254A72EC0, *((unint64_t *)&xmmword_254A72EC0 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A72EC0;
    *(_QWORD *)(a1 + 16) = unk_254A72ED0;
  }
}

void sub_2109ADBB0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A72ED8);
  _Unwind_Resume(a1);
}

void sub_2109ADBC8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A72EB8);
  _Unwind_Resume(a1);
}

void sub_2109ADBE0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A72E98);
  _Unwind_Resume(a1);
}

uint64_t sub_2109ADBF8()
{
  return 11;
}

__int128 *sub_2109ADC04()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A72EF8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A72EF8))
  {
    v2 = sub_2109ADCDC();
    if (*((char *)v2 + 23) < 0)
    {
      sub_2108B314C(&xmmword_254A72EE0, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_254A72EF0 = *((_QWORD *)v2 + 2);
      xmmword_254A72EE0 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A72EE0, &dword_21089F000);
    __cxa_guard_release(&qword_254A72EF8);
  }
  if (byte_254A72EF7 >= 0)
    return &xmmword_254A72EE0;
  else
    return (__int128 *)xmmword_254A72EE0;
}

void sub_2109ADCC4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A72EF8);
  _Unwind_Resume(a1);
}

__int128 *sub_2109ADCDC()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A72F18);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A72F18))
    return &xmmword_254A72F00;
  v2 = sub_2109ADDB8();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(&xmmword_254A72F00, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A72F10 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A72F00 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A72F00, &dword_21089F000);
  __cxa_guard_release(&qword_254A72F18);
  return &xmmword_254A72F00;
}

void sub_2109ADDA0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A72F18);
  _Unwind_Resume(a1);
}

std::string *sub_2109ADDB8()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A72F38);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A72F38))
    return &stru_254A72F20;
  sub_2109ADFD0((uint64_t)__p);
  sub_2109ADEA8((char *)__p, &stru_254A72F20);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A72F20, &dword_21089F000);
  __cxa_guard_release(&qword_254A72F38);
  return &stru_254A72F20;
}

void sub_2109ADE68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A72F38);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A72F38);
  _Unwind_Resume(a1);
}

void sub_2109ADEA8(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2109A9F04();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_2108B9228(&__p, (uint64_t)__dst, 1uLL);
  sub_2109ED500(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_2109ADFA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_2108A89B4(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_2109ADFD0(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A72F58);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A72F58))
  {
    sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Three16f>]", qword_254A72F40);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A72F40, &dword_21089F000);
    __cxa_guard_release(&qword_254A72F58);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A72F78);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A72F78))
  {
    v5 = sub_21090AB9C(qword_254A72F40, "<", 0);
    sub_21090AA98(qword_254A72F40, 0, v5, qword_254A72F60);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A72F60, &dword_21089F000);
    __cxa_guard_release(&qword_254A72F78);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A72F98);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A72F98))
  {
    sub_2109ED44C((uint64_t)qword_254A72F60, (uint64_t)&xmmword_254A72F80);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A72F80, &dword_21089F000);
    __cxa_guard_release(&qword_254A72F98);
  }
  if (byte_254A72F97 < 0)
  {
    sub_2108B314C((_BYTE *)a1, (void *)xmmword_254A72F80, *((unint64_t *)&xmmword_254A72F80 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A72F80;
    *(_QWORD *)(a1 + 16) = unk_254A72F90;
  }
}

void sub_2109AE16C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A72F98);
  _Unwind_Resume(a1);
}

void sub_2109AE184(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A72F78);
  _Unwind_Resume(a1);
}

void sub_2109AE19C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A72F58);
  _Unwind_Resume(a1);
}

uint64_t sub_2109AE1B4()
{
  return 12;
}

__int128 *sub_2109AE1C0()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A72FB8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A72FB8))
  {
    v2 = sub_2109AE298();
    if (*((char *)v2 + 23) < 0)
    {
      sub_2108B314C(&xmmword_254A72FA0, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_254A72FB0 = *((_QWORD *)v2 + 2);
      xmmword_254A72FA0 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A72FA0, &dword_21089F000);
    __cxa_guard_release(&qword_254A72FB8);
  }
  if (byte_254A72FB7 >= 0)
    return &xmmword_254A72FA0;
  else
    return (__int128 *)xmmword_254A72FA0;
}

void sub_2109AE280(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A72FB8);
  _Unwind_Resume(a1);
}

__int128 *sub_2109AE298()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A72FD8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A72FD8))
    return &xmmword_254A72FC0;
  v2 = sub_2109AE374();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(&xmmword_254A72FC0, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A72FD0 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A72FC0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A72FC0, &dword_21089F000);
  __cxa_guard_release(&qword_254A72FD8);
  return &xmmword_254A72FC0;
}

void sub_2109AE35C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A72FD8);
  _Unwind_Resume(a1);
}

std::string *sub_2109AE374()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A72FF8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A72FF8))
    return &stru_254A72FE0;
  sub_2109AE58C((uint64_t)__p);
  sub_2109AE464((char *)__p, &stru_254A72FE0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A72FE0, &dword_21089F000);
  __cxa_guard_release(&qword_254A72FF8);
  return &stru_254A72FE0;
}

void sub_2109AE424(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A72FF8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A72FF8);
  _Unwind_Resume(a1);
}

void sub_2109AE464(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2109A9FFC();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_2108B9228(&__p, (uint64_t)__dst, 1uLL);
  sub_2109ED500(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_2109AE560(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_2108A89B4(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_2109AE58C(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A73018);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A73018))
  {
    sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Three32f>]", qword_254A73000);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A73000, &dword_21089F000);
    __cxa_guard_release(&qword_254A73018);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A73038);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A73038))
  {
    v5 = sub_21090AB9C(qword_254A73000, "<", 0);
    sub_21090AA98(qword_254A73000, 0, v5, qword_254A73020);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A73020, &dword_21089F000);
    __cxa_guard_release(&qword_254A73038);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A73058);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A73058))
  {
    sub_2109ED44C((uint64_t)qword_254A73020, (uint64_t)&xmmword_254A73040);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A73040, &dword_21089F000);
    __cxa_guard_release(&qword_254A73058);
  }
  if (byte_254A73057 < 0)
  {
    sub_2108B314C((_BYTE *)a1, (void *)xmmword_254A73040, *((unint64_t *)&xmmword_254A73040 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A73040;
    *(_QWORD *)(a1 + 16) = unk_254A73050;
  }
}

void sub_2109AE728(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A73058);
  _Unwind_Resume(a1);
}

void sub_2109AE740(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A73038);
  _Unwind_Resume(a1);
}

void sub_2109AE758(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A73018);
  _Unwind_Resume(a1);
}

void sub_2109AE774()
{
  JUMPOUT(0x212BCC6FCLL);
}

uint64_t sub_2109AE788()
{
  return 13;
}

__int128 *sub_2109AE794()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A73078);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A73078))
  {
    v2 = sub_2109AE86C();
    if (*((char *)v2 + 23) < 0)
    {
      sub_2108B314C(&xmmword_254A73060, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_254A73070 = *((_QWORD *)v2 + 2);
      xmmword_254A73060 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A73060, &dword_21089F000);
    __cxa_guard_release(&qword_254A73078);
  }
  if (byte_254A73077 >= 0)
    return &xmmword_254A73060;
  else
    return (__int128 *)xmmword_254A73060;
}

void sub_2109AE854(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A73078);
  _Unwind_Resume(a1);
}

__int128 *sub_2109AE86C()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A73098);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A73098))
    return &xmmword_254A73080;
  v2 = sub_2109AE948();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(&xmmword_254A73080, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A73090 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A73080 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A73080, &dword_21089F000);
  __cxa_guard_release(&qword_254A73098);
  return &xmmword_254A73080;
}

void sub_2109AE930(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A73098);
  _Unwind_Resume(a1);
}

std::string *sub_2109AE948()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A730B8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A730B8))
    return &stru_254A730A0;
  sub_2109AEB60((uint64_t)__p);
  sub_2109AEA38((char *)__p, &stru_254A730A0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A730A0, &dword_21089F000);
  __cxa_guard_release(&qword_254A730B8);
  return &stru_254A730A0;
}

void sub_2109AE9F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A730B8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A730B8);
  _Unwind_Resume(a1);
}

void sub_2109AEA38(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2109AA0F4();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_2108B9228(&__p, (uint64_t)__dst, 1uLL);
  sub_2109ED500(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_2109AEB34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_2108A89B4(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_2109AEB60(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A730D8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A730D8))
  {
    sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Four8u>]", qword_254A730C0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A730C0, &dword_21089F000);
    __cxa_guard_release(&qword_254A730D8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A730F8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A730F8))
  {
    v5 = sub_21090AB9C(qword_254A730C0, "<", 0);
    sub_21090AA98(qword_254A730C0, 0, v5, qword_254A730E0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A730E0, &dword_21089F000);
    __cxa_guard_release(&qword_254A730F8);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A73118);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A73118))
  {
    sub_2109ED44C((uint64_t)qword_254A730E0, (uint64_t)&xmmword_254A73100);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A73100, &dword_21089F000);
    __cxa_guard_release(&qword_254A73118);
  }
  if (byte_254A73117 < 0)
  {
    sub_2108B314C((_BYTE *)a1, (void *)xmmword_254A73100, *((unint64_t *)&xmmword_254A73100 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A73100;
    *(_QWORD *)(a1 + 16) = unk_254A73110;
  }
}

void sub_2109AECFC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A73118);
  _Unwind_Resume(a1);
}

void sub_2109AED14(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A730F8);
  _Unwind_Resume(a1);
}

void sub_2109AED2C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A730D8);
  _Unwind_Resume(a1);
}

uint64_t sub_2109AED44()
{
  return 14;
}

__int128 *sub_2109AED50()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A73138);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A73138))
  {
    v2 = sub_2109AEE28();
    if (*((char *)v2 + 23) < 0)
    {
      sub_2108B314C(&xmmword_254A73120, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_254A73130 = *((_QWORD *)v2 + 2);
      xmmword_254A73120 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A73120, &dword_21089F000);
    __cxa_guard_release(&qword_254A73138);
  }
  if (byte_254A73137 >= 0)
    return &xmmword_254A73120;
  else
    return (__int128 *)xmmword_254A73120;
}

void sub_2109AEE10(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A73138);
  _Unwind_Resume(a1);
}

__int128 *sub_2109AEE28()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A73158);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A73158))
    return &xmmword_254A73140;
  v2 = sub_2109AEF04();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(&xmmword_254A73140, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A73150 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A73140 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A73140, &dword_21089F000);
  __cxa_guard_release(&qword_254A73158);
  return &xmmword_254A73140;
}

void sub_2109AEEEC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A73158);
  _Unwind_Resume(a1);
}

std::string *sub_2109AEF04()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A73178);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A73178))
    return &stru_254A73160;
  sub_2109AF11C((uint64_t)__p);
  sub_2109AEFF4((char *)__p, &stru_254A73160);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A73160, &dword_21089F000);
  __cxa_guard_release(&qword_254A73178);
  return &stru_254A73160;
}

void sub_2109AEFB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A73178);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A73178);
  _Unwind_Resume(a1);
}

void sub_2109AEFF4(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2109AA1EC();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_2108B9228(&__p, (uint64_t)__dst, 1uLL);
  sub_2109ED500(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_2109AF0F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_2108A89B4(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_2109AF11C(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A73198);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A73198))
  {
    sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Four16u>]", qword_254A73180);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A73180, &dword_21089F000);
    __cxa_guard_release(&qword_254A73198);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A731B8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A731B8))
  {
    v5 = sub_21090AB9C(qword_254A73180, "<", 0);
    sub_21090AA98(qword_254A73180, 0, v5, qword_254A731A0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A731A0, &dword_21089F000);
    __cxa_guard_release(&qword_254A731B8);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A731D8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A731D8))
  {
    sub_2109ED44C((uint64_t)qword_254A731A0, (uint64_t)&xmmword_254A731C0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A731C0, &dword_21089F000);
    __cxa_guard_release(&qword_254A731D8);
  }
  if (byte_254A731D7 < 0)
  {
    sub_2108B314C((_BYTE *)a1, (void *)xmmword_254A731C0, *((unint64_t *)&xmmword_254A731C0 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A731C0;
    *(_QWORD *)(a1 + 16) = unk_254A731D0;
  }
}

void sub_2109AF2B8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A731D8);
  _Unwind_Resume(a1);
}

void sub_2109AF2D0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A731B8);
  _Unwind_Resume(a1);
}

void sub_2109AF2E8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A73198);
  _Unwind_Resume(a1);
}

uint64_t sub_2109AF300()
{
  return 15;
}

__int128 *sub_2109AF30C()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A731F8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A731F8))
  {
    v2 = sub_2109AF3E4();
    if (*((char *)v2 + 23) < 0)
    {
      sub_2108B314C(&xmmword_254A731E0, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_254A731F0 = *((_QWORD *)v2 + 2);
      xmmword_254A731E0 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A731E0, &dword_21089F000);
    __cxa_guard_release(&qword_254A731F8);
  }
  if (byte_254A731F7 >= 0)
    return &xmmword_254A731E0;
  else
    return (__int128 *)xmmword_254A731E0;
}

void sub_2109AF3CC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A731F8);
  _Unwind_Resume(a1);
}

__int128 *sub_2109AF3E4()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A73218);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A73218))
    return &xmmword_254A73200;
  v2 = sub_2109AF4C0();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(&xmmword_254A73200, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A73210 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A73200 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A73200, &dword_21089F000);
  __cxa_guard_release(&qword_254A73218);
  return &xmmword_254A73200;
}

void sub_2109AF4A8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A73218);
  _Unwind_Resume(a1);
}

std::string *sub_2109AF4C0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A73238);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A73238))
    return &stru_254A73220;
  sub_2109AF6D8((uint64_t)__p);
  sub_2109AF5B0((char *)__p, &stru_254A73220);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A73220, &dword_21089F000);
  __cxa_guard_release(&qword_254A73238);
  return &stru_254A73220;
}

void sub_2109AF570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A73238);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A73238);
  _Unwind_Resume(a1);
}

void sub_2109AF5B0(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2109AA2E4();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_2108B9228(&__p, (uint64_t)__dst, 1uLL);
  sub_2109ED500(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_2109AF6AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_2108A89B4(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_2109AF6D8(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A73258);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A73258))
  {
    sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Four16f>]", qword_254A73240);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A73240, &dword_21089F000);
    __cxa_guard_release(&qword_254A73258);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A73278);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A73278))
  {
    v5 = sub_21090AB9C(qword_254A73240, "<", 0);
    sub_21090AA98(qword_254A73240, 0, v5, qword_254A73260);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A73260, &dword_21089F000);
    __cxa_guard_release(&qword_254A73278);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A73298);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A73298))
  {
    sub_2109ED44C((uint64_t)qword_254A73260, (uint64_t)&xmmword_254A73280);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A73280, &dword_21089F000);
    __cxa_guard_release(&qword_254A73298);
  }
  if (byte_254A73297 < 0)
  {
    sub_2108B314C((_BYTE *)a1, (void *)xmmword_254A73280, *((unint64_t *)&xmmword_254A73280 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A73280;
    *(_QWORD *)(a1 + 16) = unk_254A73290;
  }
}

void sub_2109AF874(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A73298);
  _Unwind_Resume(a1);
}

void sub_2109AF88C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A73278);
  _Unwind_Resume(a1);
}

void sub_2109AF8A4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A73258);
  _Unwind_Resume(a1);
}

uint64_t sub_2109AF8BC()
{
  return 16;
}

__int128 *sub_2109AF8C8()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A732B8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A732B8))
  {
    v2 = sub_2109AF9A0();
    if (*((char *)v2 + 23) < 0)
    {
      sub_2108B314C(&xmmword_254A732A0, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_254A732B0 = *((_QWORD *)v2 + 2);
      xmmword_254A732A0 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A732A0, &dword_21089F000);
    __cxa_guard_release(&qword_254A732B8);
  }
  if (byte_254A732B7 >= 0)
    return &xmmword_254A732A0;
  else
    return (__int128 *)xmmword_254A732A0;
}

void sub_2109AF988(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A732B8);
  _Unwind_Resume(a1);
}

__int128 *sub_2109AF9A0()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A732D8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A732D8))
    return &xmmword_254A732C0;
  v2 = sub_2109AFA7C();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(&xmmword_254A732C0, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A732D0 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A732C0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A732C0, &dword_21089F000);
  __cxa_guard_release(&qword_254A732D8);
  return &xmmword_254A732C0;
}

void sub_2109AFA64(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A732D8);
  _Unwind_Resume(a1);
}

std::string *sub_2109AFA7C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A732F8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A732F8))
    return &stru_254A732E0;
  sub_2109AFC94((uint64_t)__p);
  sub_2109AFB6C((char *)__p, &stru_254A732E0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A732E0, &dword_21089F000);
  __cxa_guard_release(&qword_254A732F8);
  return &stru_254A732E0;
}

void sub_2109AFB2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A732F8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A732F8);
  _Unwind_Resume(a1);
}

void sub_2109AFB6C(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2109AA3DC();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_2108B9228(&__p, (uint64_t)__dst, 1uLL);
  sub_2109ED500(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_2109AFC68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_2108A89B4(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_2109AFC94(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A73318);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A73318))
  {
    sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Four32f>]", qword_254A73300);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A73300, &dword_21089F000);
    __cxa_guard_release(&qword_254A73318);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A73338);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A73338))
  {
    v5 = sub_21090AB9C(qword_254A73300, "<", 0);
    sub_21090AA98(qword_254A73300, 0, v5, qword_254A73320);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A73320, &dword_21089F000);
    __cxa_guard_release(&qword_254A73338);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A73358);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A73358))
  {
    sub_2109ED44C((uint64_t)qword_254A73320, (uint64_t)&xmmword_254A73340);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A73340, &dword_21089F000);
    __cxa_guard_release(&qword_254A73358);
  }
  if (byte_254A73357 < 0)
  {
    sub_2108B314C((_BYTE *)a1, (void *)xmmword_254A73340, *((unint64_t *)&xmmword_254A73340 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A73340;
    *(_QWORD *)(a1 + 16) = unk_254A73350;
  }
}

void sub_2109AFE30(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A73358);
  _Unwind_Resume(a1);
}

void sub_2109AFE48(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A73338);
  _Unwind_Resume(a1);
}

void sub_2109AFE60(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A73318);
  _Unwind_Resume(a1);
}

void sub_2109AFE7C()
{
  JUMPOUT(0x212BCC6FCLL);
}

uint64_t sub_2109AFE90()
{
  return 17;
}

__int128 *sub_2109AFE9C()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A73378);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A73378))
  {
    v2 = sub_2109AFF74();
    if (*((char *)v2 + 23) < 0)
    {
      sub_2108B314C(&xmmword_254A73360, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_254A73370 = *((_QWORD *)v2 + 2);
      xmmword_254A73360 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A73360, &dword_21089F000);
    __cxa_guard_release(&qword_254A73378);
  }
  if (byte_254A73377 >= 0)
    return &xmmword_254A73360;
  else
    return (__int128 *)xmmword_254A73360;
}

void sub_2109AFF5C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A73378);
  _Unwind_Resume(a1);
}

__int128 *sub_2109AFF74()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A73398);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A73398))
    return &xmmword_254A73380;
  v2 = sub_2109B0050();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(&xmmword_254A73380, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A73390 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A73380 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A73380, &dword_21089F000);
  __cxa_guard_release(&qword_254A73398);
  return &xmmword_254A73380;
}

void sub_2109B0038(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A73398);
  _Unwind_Resume(a1);
}

std::string *sub_2109B0050()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A733B8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A733B8))
    return &stru_254A733A0;
  sub_2109B0140((uint64_t)__p);
  sub_2109526EC((char *)__p, &stru_254A733A0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A733A0, &dword_21089F000);
  __cxa_guard_release(&qword_254A733B8);
  return &stru_254A733A0;
}

void sub_2109B0100(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A733B8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A733B8);
  _Unwind_Resume(a1);
}

void sub_2109B0140(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A733D8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A733D8))
  {
    sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Bgr8u>]", qword_254A733C0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A733C0, &dword_21089F000);
    __cxa_guard_release(&qword_254A733D8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A733F8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A733F8))
  {
    v5 = sub_21090AB9C(qword_254A733C0, "<", 0);
    sub_21090AA98(qword_254A733C0, 0, v5, qword_254A733E0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A733E0, &dword_21089F000);
    __cxa_guard_release(&qword_254A733F8);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A73418);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A73418))
  {
    sub_2109ED44C((uint64_t)qword_254A733E0, (uint64_t)&xmmword_254A73400);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A73400, &dword_21089F000);
    __cxa_guard_release(&qword_254A73418);
  }
  if (byte_254A73417 < 0)
  {
    sub_2108B314C((_BYTE *)a1, (void *)xmmword_254A73400, *((unint64_t *)&xmmword_254A73400 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A73400;
    *(_QWORD *)(a1 + 16) = unk_254A73410;
  }
}

void sub_2109B02DC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A73418);
  _Unwind_Resume(a1);
}

void sub_2109B02F4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A733F8);
  _Unwind_Resume(a1);
}

void sub_2109B030C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A733D8);
  _Unwind_Resume(a1);
}

uint64_t sub_2109B0324()
{
  return 18;
}

__int128 *sub_2109B0330()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A73438);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A73438))
  {
    v2 = sub_2109B0408();
    if (*((char *)v2 + 23) < 0)
    {
      sub_2108B314C(&xmmword_254A73420, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_254A73430 = *((_QWORD *)v2 + 2);
      xmmword_254A73420 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A73420, &dword_21089F000);
    __cxa_guard_release(&qword_254A73438);
  }
  if (byte_254A73437 >= 0)
    return &xmmword_254A73420;
  else
    return (__int128 *)xmmword_254A73420;
}

void sub_2109B03F0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A73438);
  _Unwind_Resume(a1);
}

__int128 *sub_2109B0408()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A73458);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A73458))
    return &xmmword_254A73440;
  v2 = sub_2109B04E4();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(&xmmword_254A73440, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A73450 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A73440 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A73440, &dword_21089F000);
  __cxa_guard_release(&qword_254A73458);
  return &xmmword_254A73440;
}

void sub_2109B04CC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A73458);
  _Unwind_Resume(a1);
}

std::string *sub_2109B04E4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A73478);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A73478))
    return &stru_254A73460;
  sub_2109B06FC((uint64_t)__p);
  sub_2109B05D4((char *)__p, &stru_254A73460);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A73460, &dword_21089F000);
  __cxa_guard_release(&qword_254A73478);
  return &stru_254A73460;
}

void sub_2109B0594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A73478);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A73478);
  _Unwind_Resume(a1);
}

void sub_2109B05D4(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2109AA4D4();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_2108B9228(&__p, (uint64_t)__dst, 1uLL);
  sub_2109ED500(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_2109B06D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_2108A89B4(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_2109B06FC(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A73498);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A73498))
  {
    sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Bgr16u>]", qword_254A73480);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A73480, &dword_21089F000);
    __cxa_guard_release(&qword_254A73498);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A734B8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A734B8))
  {
    v5 = sub_21090AB9C(qword_254A73480, "<", 0);
    sub_21090AA98(qword_254A73480, 0, v5, qword_254A734A0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A734A0, &dword_21089F000);
    __cxa_guard_release(&qword_254A734B8);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A734D8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A734D8))
  {
    sub_2109ED44C((uint64_t)qword_254A734A0, (uint64_t)&xmmword_254A734C0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A734C0, &dword_21089F000);
    __cxa_guard_release(&qword_254A734D8);
  }
  if (byte_254A734D7 < 0)
  {
    sub_2108B314C((_BYTE *)a1, (void *)xmmword_254A734C0, *((unint64_t *)&xmmword_254A734C0 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A734C0;
    *(_QWORD *)(a1 + 16) = unk_254A734D0;
  }
}

void sub_2109B0898(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A734D8);
  _Unwind_Resume(a1);
}

void sub_2109B08B0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A734B8);
  _Unwind_Resume(a1);
}

void sub_2109B08C8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A73498);
  _Unwind_Resume(a1);
}

uint64_t sub_2109B08E0()
{
  return 19;
}

__int128 *sub_2109B08EC()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A734F8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A734F8))
  {
    v2 = sub_2109B09C4();
    if (*((char *)v2 + 23) < 0)
    {
      sub_2108B314C(&xmmword_254A734E0, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_254A734F0 = *((_QWORD *)v2 + 2);
      xmmword_254A734E0 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A734E0, &dword_21089F000);
    __cxa_guard_release(&qword_254A734F8);
  }
  if (byte_254A734F7 >= 0)
    return &xmmword_254A734E0;
  else
    return (__int128 *)xmmword_254A734E0;
}

void sub_2109B09AC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A734F8);
  _Unwind_Resume(a1);
}

__int128 *sub_2109B09C4()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A73518);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A73518))
    return &xmmword_254A73500;
  v2 = sub_2109B0AA0();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(&xmmword_254A73500, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A73510 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A73500 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A73500, &dword_21089F000);
  __cxa_guard_release(&qword_254A73518);
  return &xmmword_254A73500;
}

void sub_2109B0A88(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A73518);
  _Unwind_Resume(a1);
}

std::string *sub_2109B0AA0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A73538);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A73538))
    return &stru_254A73520;
  sub_2109B0CB8((uint64_t)__p);
  sub_2109B0B90((char *)__p, &stru_254A73520);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A73520, &dword_21089F000);
  __cxa_guard_release(&qword_254A73538);
  return &stru_254A73520;
}

void sub_2109B0B50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A73538);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A73538);
  _Unwind_Resume(a1);
}

void sub_2109B0B90(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2109AA5CC();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_2108B9228(&__p, (uint64_t)__dst, 1uLL);
  sub_2109ED500(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_2109B0C8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_2108A89B4(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_2109B0CB8(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A73558);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A73558))
  {
    sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Bgr16f>]", qword_254A73540);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A73540, &dword_21089F000);
    __cxa_guard_release(&qword_254A73558);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A73578);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A73578))
  {
    v5 = sub_21090AB9C(qword_254A73540, "<", 0);
    sub_21090AA98(qword_254A73540, 0, v5, qword_254A73560);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A73560, &dword_21089F000);
    __cxa_guard_release(&qword_254A73578);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A73598);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A73598))
  {
    sub_2109ED44C((uint64_t)qword_254A73560, (uint64_t)&xmmword_254A73580);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A73580, &dword_21089F000);
    __cxa_guard_release(&qword_254A73598);
  }
  if (byte_254A73597 < 0)
  {
    sub_2108B314C((_BYTE *)a1, (void *)xmmword_254A73580, *((unint64_t *)&xmmword_254A73580 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A73580;
    *(_QWORD *)(a1 + 16) = unk_254A73590;
  }
}

void sub_2109B0E54(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A73598);
  _Unwind_Resume(a1);
}

void sub_2109B0E6C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A73578);
  _Unwind_Resume(a1);
}

void sub_2109B0E84(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A73558);
  _Unwind_Resume(a1);
}

uint64_t sub_2109B0E9C()
{
  return 20;
}

__int128 *sub_2109B0EA8()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A735B8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A735B8))
  {
    v2 = sub_2109B0F80();
    if (*((char *)v2 + 23) < 0)
    {
      sub_2108B314C(&xmmword_254A735A0, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_254A735B0 = *((_QWORD *)v2 + 2);
      xmmword_254A735A0 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A735A0, &dword_21089F000);
    __cxa_guard_release(&qword_254A735B8);
  }
  if (byte_254A735B7 >= 0)
    return &xmmword_254A735A0;
  else
    return (__int128 *)xmmword_254A735A0;
}

void sub_2109B0F68(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A735B8);
  _Unwind_Resume(a1);
}

__int128 *sub_2109B0F80()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A735D8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A735D8))
    return &xmmword_254A735C0;
  v2 = sub_2109B105C();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(&xmmword_254A735C0, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A735D0 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A735C0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A735C0, &dword_21089F000);
  __cxa_guard_release(&qword_254A735D8);
  return &xmmword_254A735C0;
}

void sub_2109B1044(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A735D8);
  _Unwind_Resume(a1);
}

std::string *sub_2109B105C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A735F8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A735F8))
    return &stru_254A735E0;
  sub_2109B1274((uint64_t)__p);
  sub_2109B114C((char *)__p, &stru_254A735E0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A735E0, &dword_21089F000);
  __cxa_guard_release(&qword_254A735F8);
  return &stru_254A735E0;
}

void sub_2109B110C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A735F8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A735F8);
  _Unwind_Resume(a1);
}

void sub_2109B114C(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2109AA6C4();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_2108B9228(&__p, (uint64_t)__dst, 1uLL);
  sub_2109ED500(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_2109B1248(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_2108A89B4(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_2109B1274(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A73618);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A73618))
  {
    sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Bgr32f>]", qword_254A73600);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A73600, &dword_21089F000);
    __cxa_guard_release(&qword_254A73618);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A73638);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A73638))
  {
    v5 = sub_21090AB9C(qword_254A73600, "<", 0);
    sub_21090AA98(qword_254A73600, 0, v5, qword_254A73620);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A73620, &dword_21089F000);
    __cxa_guard_release(&qword_254A73638);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A73658);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A73658))
  {
    sub_2109ED44C((uint64_t)qword_254A73620, (uint64_t)&xmmword_254A73640);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A73640, &dword_21089F000);
    __cxa_guard_release(&qword_254A73658);
  }
  if (byte_254A73657 < 0)
  {
    sub_2108B314C((_BYTE *)a1, (void *)xmmword_254A73640, *((unint64_t *)&xmmword_254A73640 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A73640;
    *(_QWORD *)(a1 + 16) = unk_254A73650;
  }
}

void sub_2109B1410(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A73658);
  _Unwind_Resume(a1);
}

void sub_2109B1428(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A73638);
  _Unwind_Resume(a1);
}

void sub_2109B1440(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A73618);
  _Unwind_Resume(a1);
}

void sub_2109B145C()
{
  JUMPOUT(0x212BCC6FCLL);
}

uint64_t sub_2109B1470()
{
  return 21;
}

__int128 *sub_2109B147C()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A73678);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A73678))
  {
    v2 = sub_2109B1554();
    if (*((char *)v2 + 23) < 0)
    {
      sub_2108B314C(&xmmword_254A73660, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_254A73670 = *((_QWORD *)v2 + 2);
      xmmword_254A73660 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A73660, &dword_21089F000);
    __cxa_guard_release(&qword_254A73678);
  }
  if (byte_254A73677 >= 0)
    return &xmmword_254A73660;
  else
    return (__int128 *)xmmword_254A73660;
}

void sub_2109B153C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A73678);
  _Unwind_Resume(a1);
}

__int128 *sub_2109B1554()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A73698);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A73698))
    return &xmmword_254A73680;
  v2 = sub_2109B1630();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(&xmmword_254A73680, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A73690 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A73680 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A73680, &dword_21089F000);
  __cxa_guard_release(&qword_254A73698);
  return &xmmword_254A73680;
}

void sub_2109B1618(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A73698);
  _Unwind_Resume(a1);
}

std::string *sub_2109B1630()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A736B8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A736B8))
    return &stru_254A736A0;
  sub_2109B1720((uint64_t)__p);
  sub_21090B380((char *)__p, &stru_254A736A0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A736A0, &dword_21089F000);
  __cxa_guard_release(&qword_254A736B8);
  return &stru_254A736A0;
}

void sub_2109B16E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A736B8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A736B8);
  _Unwind_Resume(a1);
}

void sub_2109B1720(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A736D8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A736D8))
  {
    sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Rgb8u>]", qword_254A736C0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A736C0, &dword_21089F000);
    __cxa_guard_release(&qword_254A736D8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A736F8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A736F8))
  {
    v5 = sub_21090AB9C(qword_254A736C0, "<", 0);
    sub_21090AA98(qword_254A736C0, 0, v5, qword_254A736E0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A736E0, &dword_21089F000);
    __cxa_guard_release(&qword_254A736F8);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A73718);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A73718))
  {
    sub_2109ED44C((uint64_t)qword_254A736E0, (uint64_t)&xmmword_254A73700);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A73700, &dword_21089F000);
    __cxa_guard_release(&qword_254A73718);
  }
  if (byte_254A73717 < 0)
  {
    sub_2108B314C((_BYTE *)a1, (void *)xmmword_254A73700, *((unint64_t *)&xmmword_254A73700 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A73700;
    *(_QWORD *)(a1 + 16) = unk_254A73710;
  }
}

void sub_2109B18BC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A73718);
  _Unwind_Resume(a1);
}

void sub_2109B18D4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A736F8);
  _Unwind_Resume(a1);
}

void sub_2109B18EC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A736D8);
  _Unwind_Resume(a1);
}

uint64_t sub_2109B1904()
{
  return 22;
}

__int128 *sub_2109B1910()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A73738);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A73738))
  {
    v2 = sub_2109B19E8();
    if (*((char *)v2 + 23) < 0)
    {
      sub_2108B314C(&xmmword_254A73720, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_254A73730 = *((_QWORD *)v2 + 2);
      xmmword_254A73720 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A73720, &dword_21089F000);
    __cxa_guard_release(&qword_254A73738);
  }
  if (byte_254A73737 >= 0)
    return &xmmword_254A73720;
  else
    return (__int128 *)xmmword_254A73720;
}

void sub_2109B19D0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A73738);
  _Unwind_Resume(a1);
}

__int128 *sub_2109B19E8()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A73758);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A73758))
    return &xmmword_254A73740;
  v2 = sub_2109B1AC4();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(&xmmword_254A73740, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A73750 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A73740 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A73740, &dword_21089F000);
  __cxa_guard_release(&qword_254A73758);
  return &xmmword_254A73740;
}

void sub_2109B1AAC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A73758);
  _Unwind_Resume(a1);
}

std::string *sub_2109B1AC4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A73778);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A73778))
    return &stru_254A73760;
  sub_2109B1BB4((uint64_t)__p);
  sub_21090B4A8((char *)__p, &stru_254A73760);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A73760, &dword_21089F000);
  __cxa_guard_release(&qword_254A73778);
  return &stru_254A73760;
}

void sub_2109B1B74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A73778);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A73778);
  _Unwind_Resume(a1);
}

void sub_2109B1BB4(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A73798);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A73798))
  {
    sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Rgb16u>]", qword_254A73780);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A73780, &dword_21089F000);
    __cxa_guard_release(&qword_254A73798);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A737B8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A737B8))
  {
    v5 = sub_21090AB9C(qword_254A73780, "<", 0);
    sub_21090AA98(qword_254A73780, 0, v5, qword_254A737A0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A737A0, &dword_21089F000);
    __cxa_guard_release(&qword_254A737B8);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A737D8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A737D8))
  {
    sub_2109ED44C((uint64_t)qword_254A737A0, (uint64_t)&xmmword_254A737C0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A737C0, &dword_21089F000);
    __cxa_guard_release(&qword_254A737D8);
  }
  if (byte_254A737D7 < 0)
  {
    sub_2108B314C((_BYTE *)a1, (void *)xmmword_254A737C0, *((unint64_t *)&xmmword_254A737C0 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A737C0;
    *(_QWORD *)(a1 + 16) = unk_254A737D0;
  }
}

void sub_2109B1D50(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A737D8);
  _Unwind_Resume(a1);
}

void sub_2109B1D68(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A737B8);
  _Unwind_Resume(a1);
}

void sub_2109B1D80(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A73798);
  _Unwind_Resume(a1);
}

uint64_t sub_2109B1D98()
{
  return 23;
}

__int128 *sub_2109B1DA4()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A737F8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A737F8))
  {
    v2 = sub_2109B1E7C();
    if (*((char *)v2 + 23) < 0)
    {
      sub_2108B314C(&xmmword_254A737E0, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_254A737F0 = *((_QWORD *)v2 + 2);
      xmmword_254A737E0 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A737E0, &dword_21089F000);
    __cxa_guard_release(&qword_254A737F8);
  }
  if (byte_254A737F7 >= 0)
    return &xmmword_254A737E0;
  else
    return (__int128 *)xmmword_254A737E0;
}

void sub_2109B1E64(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A737F8);
  _Unwind_Resume(a1);
}

__int128 *sub_2109B1E7C()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A73818);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A73818))
    return &xmmword_254A73800;
  v2 = sub_2109B1F58();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(&xmmword_254A73800, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A73810 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A73800 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A73800, &dword_21089F000);
  __cxa_guard_release(&qword_254A73818);
  return &xmmword_254A73800;
}

void sub_2109B1F40(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A73818);
  _Unwind_Resume(a1);
}

std::string *sub_2109B1F58()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A73838);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A73838))
    return &stru_254A73820;
  sub_2109B2170((uint64_t)__p);
  sub_2109B2048((char *)__p, &stru_254A73820);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A73820, &dword_21089F000);
  __cxa_guard_release(&qword_254A73838);
  return &stru_254A73820;
}

void sub_2109B2008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A73838);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A73838);
  _Unwind_Resume(a1);
}

void sub_2109B2048(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2109AA7BC();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_2108B9228(&__p, (uint64_t)__dst, 1uLL);
  sub_2109ED500(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_2109B2144(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_2108A89B4(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_2109B2170(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A73858);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A73858))
  {
    sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Rgb16f>]", qword_254A73840);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A73840, &dword_21089F000);
    __cxa_guard_release(&qword_254A73858);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A73878);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A73878))
  {
    v5 = sub_21090AB9C(qword_254A73840, "<", 0);
    sub_21090AA98(qword_254A73840, 0, v5, qword_254A73860);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A73860, &dword_21089F000);
    __cxa_guard_release(&qword_254A73878);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A73898);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A73898))
  {
    sub_2109ED44C((uint64_t)qword_254A73860, (uint64_t)&xmmword_254A73880);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A73880, &dword_21089F000);
    __cxa_guard_release(&qword_254A73898);
  }
  if (byte_254A73897 < 0)
  {
    sub_2108B314C((_BYTE *)a1, (void *)xmmword_254A73880, *((unint64_t *)&xmmword_254A73880 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A73880;
    *(_QWORD *)(a1 + 16) = unk_254A73890;
  }
}

void sub_2109B230C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A73898);
  _Unwind_Resume(a1);
}

void sub_2109B2324(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A73878);
  _Unwind_Resume(a1);
}

void sub_2109B233C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A73858);
  _Unwind_Resume(a1);
}

uint64_t sub_2109B2354()
{
  return 24;
}

__int128 *sub_2109B2360()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A738B8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A738B8))
  {
    v2 = sub_2109B2438();
    if (*((char *)v2 + 23) < 0)
    {
      sub_2108B314C(&xmmword_254A738A0, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_254A738B0 = *((_QWORD *)v2 + 2);
      xmmword_254A738A0 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A738A0, &dword_21089F000);
    __cxa_guard_release(&qword_254A738B8);
  }
  if (byte_254A738B7 >= 0)
    return &xmmword_254A738A0;
  else
    return (__int128 *)xmmword_254A738A0;
}

void sub_2109B2420(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A738B8);
  _Unwind_Resume(a1);
}

__int128 *sub_2109B2438()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A738D8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A738D8))
    return &xmmword_254A738C0;
  v2 = sub_2109B2514();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(&xmmword_254A738C0, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A738D0 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A738C0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A738C0, &dword_21089F000);
  __cxa_guard_release(&qword_254A738D8);
  return &xmmword_254A738C0;
}

void sub_2109B24FC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A738D8);
  _Unwind_Resume(a1);
}

std::string *sub_2109B2514()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A738F8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A738F8))
    return &stru_254A738E0;
  sub_2109B272C((uint64_t)__p);
  sub_2109B2604((char *)__p, &stru_254A738E0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A738E0, &dword_21089F000);
  __cxa_guard_release(&qword_254A738F8);
  return &stru_254A738E0;
}

void sub_2109B25C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A738F8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A738F8);
  _Unwind_Resume(a1);
}

void sub_2109B2604(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2109AA8B4();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_2108B9228(&__p, (uint64_t)__dst, 1uLL);
  sub_2109ED500(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_2109B2700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_2108A89B4(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_2109B272C(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A73918);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A73918))
  {
    sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Rgb32f>]", qword_254A73900);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A73900, &dword_21089F000);
    __cxa_guard_release(&qword_254A73918);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A73938);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A73938))
  {
    v5 = sub_21090AB9C(qword_254A73900, "<", 0);
    sub_21090AA98(qword_254A73900, 0, v5, qword_254A73920);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A73920, &dword_21089F000);
    __cxa_guard_release(&qword_254A73938);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A73958);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A73958))
  {
    sub_2109ED44C((uint64_t)qword_254A73920, (uint64_t)&xmmword_254A73940);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A73940, &dword_21089F000);
    __cxa_guard_release(&qword_254A73958);
  }
  if (byte_254A73957 < 0)
  {
    sub_2108B314C((_BYTE *)a1, (void *)xmmword_254A73940, *((unint64_t *)&xmmword_254A73940 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A73940;
    *(_QWORD *)(a1 + 16) = unk_254A73950;
  }
}

void sub_2109B28C8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A73958);
  _Unwind_Resume(a1);
}

void sub_2109B28E0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A73938);
  _Unwind_Resume(a1);
}

void sub_2109B28F8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A73918);
  _Unwind_Resume(a1);
}

void sub_2109B2914()
{
  JUMPOUT(0x212BCC6FCLL);
}

uint64_t sub_2109B2928()
{
  return 25;
}

__int128 *sub_2109B2934()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A73978);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A73978))
  {
    v2 = sub_2109B2A0C();
    if (*((char *)v2 + 23) < 0)
    {
      sub_2108B314C(&xmmword_254A73960, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_254A73970 = *((_QWORD *)v2 + 2);
      xmmword_254A73960 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A73960, &dword_21089F000);
    __cxa_guard_release(&qword_254A73978);
  }
  if (byte_254A73977 >= 0)
    return &xmmword_254A73960;
  else
    return (__int128 *)xmmword_254A73960;
}

void sub_2109B29F4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A73978);
  _Unwind_Resume(a1);
}

__int128 *sub_2109B2A0C()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A73998);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A73998))
    return &xmmword_254A73980;
  v2 = sub_2109B2AE8();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(&xmmword_254A73980, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A73990 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A73980 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A73980, &dword_21089F000);
  __cxa_guard_release(&qword_254A73998);
  return &xmmword_254A73980;
}

void sub_2109B2AD0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A73998);
  _Unwind_Resume(a1);
}

std::string *sub_2109B2AE8()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A739B8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A739B8))
    return &stru_254A739A0;
  sub_2109B2BD8((uint64_t)__p);
  sub_21090B5D0((char *)__p, &stru_254A739A0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A739A0, &dword_21089F000);
  __cxa_guard_release(&qword_254A739B8);
  return &stru_254A739A0;
}

void sub_2109B2B98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A739B8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A739B8);
  _Unwind_Resume(a1);
}

void sub_2109B2BD8(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A739D8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A739D8))
  {
    sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Bgra8u>]", qword_254A739C0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A739C0, &dword_21089F000);
    __cxa_guard_release(&qword_254A739D8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A739F8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A739F8))
  {
    v5 = sub_21090AB9C(qword_254A739C0, "<", 0);
    sub_21090AA98(qword_254A739C0, 0, v5, qword_254A739E0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A739E0, &dword_21089F000);
    __cxa_guard_release(&qword_254A739F8);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A73A18);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A73A18))
  {
    sub_2109ED44C((uint64_t)qword_254A739E0, (uint64_t)&xmmword_254A73A00);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A73A00, &dword_21089F000);
    __cxa_guard_release(&qword_254A73A18);
  }
  if (byte_254A73A17 < 0)
  {
    sub_2108B314C((_BYTE *)a1, (void *)xmmword_254A73A00, *((unint64_t *)&xmmword_254A73A00 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A73A00;
    *(_QWORD *)(a1 + 16) = unk_254A73A10;
  }
}

void sub_2109B2D74(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A73A18);
  _Unwind_Resume(a1);
}

void sub_2109B2D8C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A739F8);
  _Unwind_Resume(a1);
}

void sub_2109B2DA4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A739D8);
  _Unwind_Resume(a1);
}

uint64_t sub_2109B2DBC()
{
  return 26;
}

__int128 *sub_2109B2DC8()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A73A38);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A73A38))
  {
    v2 = sub_2109B2EA0();
    if (*((char *)v2 + 23) < 0)
    {
      sub_2108B314C(&xmmword_254A73A20, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_254A73A30 = *((_QWORD *)v2 + 2);
      xmmword_254A73A20 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A73A20, &dword_21089F000);
    __cxa_guard_release(&qword_254A73A38);
  }
  if (byte_254A73A37 >= 0)
    return &xmmword_254A73A20;
  else
    return (__int128 *)xmmword_254A73A20;
}

void sub_2109B2E88(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A73A38);
  _Unwind_Resume(a1);
}

__int128 *sub_2109B2EA0()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A73A58);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A73A58))
    return &xmmword_254A73A40;
  v2 = sub_2109B2F7C();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(&xmmword_254A73A40, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A73A50 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A73A40 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A73A40, &dword_21089F000);
  __cxa_guard_release(&qword_254A73A58);
  return &xmmword_254A73A40;
}

void sub_2109B2F64(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A73A58);
  _Unwind_Resume(a1);
}

std::string *sub_2109B2F7C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A73A78);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A73A78))
    return &stru_254A73A60;
  sub_2109B3194((uint64_t)__p);
  sub_2109B306C((char *)__p, &stru_254A73A60);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A73A60, &dword_21089F000);
  __cxa_guard_release(&qword_254A73A78);
  return &stru_254A73A60;
}

void sub_2109B302C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A73A78);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A73A78);
  _Unwind_Resume(a1);
}

void sub_2109B306C(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2109AA9AC();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_2108B9228(&__p, (uint64_t)__dst, 1uLL);
  sub_2109ED500(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_2109B3168(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_2108A89B4(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_2109B3194(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A73A98);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A73A98))
  {
    sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Bgra16u>]", qword_254A73A80);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A73A80, &dword_21089F000);
    __cxa_guard_release(&qword_254A73A98);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A73AB8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A73AB8))
  {
    v5 = sub_21090AB9C(qword_254A73A80, "<", 0);
    sub_21090AA98(qword_254A73A80, 0, v5, qword_254A73AA0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A73AA0, &dword_21089F000);
    __cxa_guard_release(&qword_254A73AB8);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A73AD8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A73AD8))
  {
    sub_2109ED44C((uint64_t)qword_254A73AA0, (uint64_t)&xmmword_254A73AC0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A73AC0, &dword_21089F000);
    __cxa_guard_release(&qword_254A73AD8);
  }
  if (byte_254A73AD7 < 0)
  {
    sub_2108B314C((_BYTE *)a1, (void *)xmmword_254A73AC0, *((unint64_t *)&xmmword_254A73AC0 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A73AC0;
    *(_QWORD *)(a1 + 16) = unk_254A73AD0;
  }
}

void sub_2109B3330(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A73AD8);
  _Unwind_Resume(a1);
}

void sub_2109B3348(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A73AB8);
  _Unwind_Resume(a1);
}

void sub_2109B3360(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A73A98);
  _Unwind_Resume(a1);
}

uint64_t sub_2109B3378()
{
  return 27;
}

__int128 *sub_2109B3384()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A73AF8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A73AF8))
  {
    v2 = sub_2109B345C();
    if (*((char *)v2 + 23) < 0)
    {
      sub_2108B314C(&xmmword_254A73AE0, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_254A73AF0 = *((_QWORD *)v2 + 2);
      xmmword_254A73AE0 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A73AE0, &dword_21089F000);
    __cxa_guard_release(&qword_254A73AF8);
  }
  if (byte_254A73AF7 >= 0)
    return &xmmword_254A73AE0;
  else
    return (__int128 *)xmmword_254A73AE0;
}

void sub_2109B3444(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A73AF8);
  _Unwind_Resume(a1);
}

__int128 *sub_2109B345C()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A73B18);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A73B18))
    return &xmmword_254A73B00;
  v2 = sub_2109B3538();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(&xmmword_254A73B00, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A73B10 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A73B00 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A73B00, &dword_21089F000);
  __cxa_guard_release(&qword_254A73B18);
  return &xmmword_254A73B00;
}

void sub_2109B3520(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A73B18);
  _Unwind_Resume(a1);
}

std::string *sub_2109B3538()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A73B38);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A73B38))
    return &stru_254A73B20;
  sub_2109B3750((uint64_t)__p);
  sub_2109B3628((char *)__p, &stru_254A73B20);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A73B20, &dword_21089F000);
  __cxa_guard_release(&qword_254A73B38);
  return &stru_254A73B20;
}

void sub_2109B35E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A73B38);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A73B38);
  _Unwind_Resume(a1);
}

void sub_2109B3628(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2109AAAA4();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_2108B9228(&__p, (uint64_t)__dst, 1uLL);
  sub_2109ED500(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_2109B3724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_2108A89B4(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_2109B3750(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A73B58);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A73B58))
  {
    sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Bgra16f>]", qword_254A73B40);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A73B40, &dword_21089F000);
    __cxa_guard_release(&qword_254A73B58);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A73B78);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A73B78))
  {
    v5 = sub_21090AB9C(qword_254A73B40, "<", 0);
    sub_21090AA98(qword_254A73B40, 0, v5, qword_254A73B60);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A73B60, &dword_21089F000);
    __cxa_guard_release(&qword_254A73B78);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A73B98);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A73B98))
  {
    sub_2109ED44C((uint64_t)qword_254A73B60, (uint64_t)&xmmword_254A73B80);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A73B80, &dword_21089F000);
    __cxa_guard_release(&qword_254A73B98);
  }
  if (byte_254A73B97 < 0)
  {
    sub_2108B314C((_BYTE *)a1, (void *)xmmword_254A73B80, *((unint64_t *)&xmmword_254A73B80 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A73B80;
    *(_QWORD *)(a1 + 16) = unk_254A73B90;
  }
}

void sub_2109B38EC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A73B98);
  _Unwind_Resume(a1);
}

void sub_2109B3904(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A73B78);
  _Unwind_Resume(a1);
}

void sub_2109B391C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A73B58);
  _Unwind_Resume(a1);
}

uint64_t sub_2109B3934()
{
  return 28;
}

__int128 *sub_2109B3940()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A73BB8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A73BB8))
  {
    v2 = sub_2109B3A18();
    if (*((char *)v2 + 23) < 0)
    {
      sub_2108B314C(&xmmword_254A73BA0, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_254A73BB0 = *((_QWORD *)v2 + 2);
      xmmword_254A73BA0 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A73BA0, &dword_21089F000);
    __cxa_guard_release(&qword_254A73BB8);
  }
  if (byte_254A73BB7 >= 0)
    return &xmmword_254A73BA0;
  else
    return (__int128 *)xmmword_254A73BA0;
}

void sub_2109B3A00(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A73BB8);
  _Unwind_Resume(a1);
}

__int128 *sub_2109B3A18()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A73BD8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A73BD8))
    return &xmmword_254A73BC0;
  v2 = sub_2109B3AF4();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(&xmmword_254A73BC0, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A73BD0 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A73BC0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A73BC0, &dword_21089F000);
  __cxa_guard_release(&qword_254A73BD8);
  return &xmmword_254A73BC0;
}

void sub_2109B3ADC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A73BD8);
  _Unwind_Resume(a1);
}

std::string *sub_2109B3AF4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A73BF8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A73BF8))
    return &stru_254A73BE0;
  sub_2109B3D0C((uint64_t)__p);
  sub_2109B3BE4((char *)__p, &stru_254A73BE0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A73BE0, &dword_21089F000);
  __cxa_guard_release(&qword_254A73BF8);
  return &stru_254A73BE0;
}

void sub_2109B3BA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A73BF8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A73BF8);
  _Unwind_Resume(a1);
}

void sub_2109B3BE4(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_210994AFC();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_2108B9228(&__p, (uint64_t)__dst, 1uLL);
  sub_2109ED500(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_2109B3CE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_2108A89B4(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_2109B3D0C(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A73C18);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A73C18))
  {
    sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Bgra32f>]", qword_254A73C00);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A73C00, &dword_21089F000);
    __cxa_guard_release(&qword_254A73C18);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A73C38);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A73C38))
  {
    v5 = sub_21090AB9C(qword_254A73C00, "<", 0);
    sub_21090AA98(qword_254A73C00, 0, v5, qword_254A73C20);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A73C20, &dword_21089F000);
    __cxa_guard_release(&qword_254A73C38);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A73C58);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A73C58))
  {
    sub_2109ED44C((uint64_t)qword_254A73C20, (uint64_t)&xmmword_254A73C40);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A73C40, &dword_21089F000);
    __cxa_guard_release(&qword_254A73C58);
  }
  if (byte_254A73C57 < 0)
  {
    sub_2108B314C((_BYTE *)a1, (void *)xmmword_254A73C40, *((unint64_t *)&xmmword_254A73C40 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A73C40;
    *(_QWORD *)(a1 + 16) = unk_254A73C50;
  }
}

void sub_2109B3EA8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A73C58);
  _Unwind_Resume(a1);
}

void sub_2109B3EC0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A73C38);
  _Unwind_Resume(a1);
}

void sub_2109B3ED8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A73C18);
  _Unwind_Resume(a1);
}

void sub_2109B3EF4()
{
  JUMPOUT(0x212BCC6FCLL);
}

uint64_t sub_2109B3F08()
{
  return 29;
}

__int128 *sub_2109B3F14()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A73C78);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A73C78))
  {
    v2 = sub_2109B3FEC();
    if (*((char *)v2 + 23) < 0)
    {
      sub_2108B314C(&xmmword_254A73C60, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_254A73C70 = *((_QWORD *)v2 + 2);
      xmmword_254A73C60 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A73C60, &dword_21089F000);
    __cxa_guard_release(&qword_254A73C78);
  }
  if (byte_254A73C77 >= 0)
    return &xmmword_254A73C60;
  else
    return (__int128 *)xmmword_254A73C60;
}

void sub_2109B3FD4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A73C78);
  _Unwind_Resume(a1);
}

__int128 *sub_2109B3FEC()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A73C98);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A73C98))
    return &xmmword_254A73C80;
  v2 = sub_2109B40C8();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(&xmmword_254A73C80, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A73C90 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A73C80 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A73C80, &dword_21089F000);
  __cxa_guard_release(&qword_254A73C98);
  return &xmmword_254A73C80;
}

void sub_2109B40B0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A73C98);
  _Unwind_Resume(a1);
}

std::string *sub_2109B40C8()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A73CB8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A73CB8))
    return &stru_254A73CA0;
  sub_2109B41B8((uint64_t)__p);
  sub_210952814((char *)__p, &stru_254A73CA0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A73CA0, &dword_21089F000);
  __cxa_guard_release(&qword_254A73CB8);
  return &stru_254A73CA0;
}

void sub_2109B4178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A73CB8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A73CB8);
  _Unwind_Resume(a1);
}

void sub_2109B41B8(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A73CD8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A73CD8))
  {
    sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Rgba8u>]", qword_254A73CC0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A73CC0, &dword_21089F000);
    __cxa_guard_release(&qword_254A73CD8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A73CF8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A73CF8))
  {
    v5 = sub_21090AB9C(qword_254A73CC0, "<", 0);
    sub_21090AA98(qword_254A73CC0, 0, v5, qword_254A73CE0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A73CE0, &dword_21089F000);
    __cxa_guard_release(&qword_254A73CF8);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A73D18);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A73D18))
  {
    sub_2109ED44C((uint64_t)qword_254A73CE0, (uint64_t)&xmmword_254A73D00);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A73D00, &dword_21089F000);
    __cxa_guard_release(&qword_254A73D18);
  }
  if (byte_254A73D17 < 0)
  {
    sub_2108B314C((_BYTE *)a1, (void *)xmmword_254A73D00, *((unint64_t *)&xmmword_254A73D00 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A73D00;
    *(_QWORD *)(a1 + 16) = unk_254A73D10;
  }
}

void sub_2109B4354(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A73D18);
  _Unwind_Resume(a1);
}

void sub_2109B436C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A73CF8);
  _Unwind_Resume(a1);
}

void sub_2109B4384(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A73CD8);
  _Unwind_Resume(a1);
}

uint64_t sub_2109B439C()
{
  return 30;
}

__int128 *sub_2109B43A8()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A73D38);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A73D38))
  {
    v2 = sub_2109B4480();
    if (*((char *)v2 + 23) < 0)
    {
      sub_2108B314C(&xmmword_254A73D20, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_254A73D30 = *((_QWORD *)v2 + 2);
      xmmword_254A73D20 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A73D20, &dword_21089F000);
    __cxa_guard_release(&qword_254A73D38);
  }
  if (byte_254A73D37 >= 0)
    return &xmmword_254A73D20;
  else
    return (__int128 *)xmmword_254A73D20;
}

void sub_2109B4468(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A73D38);
  _Unwind_Resume(a1);
}

__int128 *sub_2109B4480()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A73D58);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A73D58))
    return &xmmword_254A73D40;
  v2 = sub_2109B455C();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(&xmmword_254A73D40, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A73D50 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A73D40 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A73D40, &dword_21089F000);
  __cxa_guard_release(&qword_254A73D58);
  return &xmmword_254A73D40;
}

void sub_2109B4544(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A73D58);
  _Unwind_Resume(a1);
}

std::string *sub_2109B455C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A73D78);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A73D78))
    return &stru_254A73D60;
  sub_2109B4774((uint64_t)__p);
  sub_2109B464C((char *)__p, &stru_254A73D60);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A73D60, &dword_21089F000);
  __cxa_guard_release(&qword_254A73D78);
  return &stru_254A73D60;
}

void sub_2109B460C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A73D78);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A73D78);
  _Unwind_Resume(a1);
}

void sub_2109B464C(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2109AAB9C();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_2108B9228(&__p, (uint64_t)__dst, 1uLL);
  sub_2109ED500(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_2109B4748(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_2108A89B4(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_2109B4774(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A73D98);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A73D98))
  {
    sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Rgba16u>]", qword_254A73D80);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A73D80, &dword_21089F000);
    __cxa_guard_release(&qword_254A73D98);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A73DB8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A73DB8))
  {
    v5 = sub_21090AB9C(qword_254A73D80, "<", 0);
    sub_21090AA98(qword_254A73D80, 0, v5, qword_254A73DA0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A73DA0, &dword_21089F000);
    __cxa_guard_release(&qword_254A73DB8);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A73DD8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A73DD8))
  {
    sub_2109ED44C((uint64_t)qword_254A73DA0, (uint64_t)&xmmword_254A73DC0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A73DC0, &dword_21089F000);
    __cxa_guard_release(&qword_254A73DD8);
  }
  if (byte_254A73DD7 < 0)
  {
    sub_2108B314C((_BYTE *)a1, (void *)xmmword_254A73DC0, *((unint64_t *)&xmmword_254A73DC0 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A73DC0;
    *(_QWORD *)(a1 + 16) = unk_254A73DD0;
  }
}

void sub_2109B4910(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A73DD8);
  _Unwind_Resume(a1);
}

void sub_2109B4928(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A73DB8);
  _Unwind_Resume(a1);
}

void sub_2109B4940(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A73D98);
  _Unwind_Resume(a1);
}

uint64_t sub_2109B4958()
{
  return 31;
}

__int128 *sub_2109B4964()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A73DF8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A73DF8))
  {
    v2 = sub_2109B4A3C();
    if (*((char *)v2 + 23) < 0)
    {
      sub_2108B314C(&xmmword_254A73DE0, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_254A73DF0 = *((_QWORD *)v2 + 2);
      xmmword_254A73DE0 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A73DE0, &dword_21089F000);
    __cxa_guard_release(&qword_254A73DF8);
  }
  if (byte_254A73DF7 >= 0)
    return &xmmword_254A73DE0;
  else
    return (__int128 *)xmmword_254A73DE0;
}

void sub_2109B4A24(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A73DF8);
  _Unwind_Resume(a1);
}

__int128 *sub_2109B4A3C()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A73E18);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A73E18))
    return &xmmword_254A73E00;
  v2 = sub_2109B4B18();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(&xmmword_254A73E00, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A73E10 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A73E00 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A73E00, &dword_21089F000);
  __cxa_guard_release(&qword_254A73E18);
  return &xmmword_254A73E00;
}

void sub_2109B4B00(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A73E18);
  _Unwind_Resume(a1);
}

std::string *sub_2109B4B18()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A73E38);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A73E38))
    return &stru_254A73E20;
  sub_2109B4C08((uint64_t)__p);
  sub_21090B6F8((char *)__p, &stru_254A73E20);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A73E20, &dword_21089F000);
  __cxa_guard_release(&qword_254A73E38);
  return &stru_254A73E20;
}

void sub_2109B4BC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A73E38);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A73E38);
  _Unwind_Resume(a1);
}

void sub_2109B4C08(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A73E58);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A73E58))
  {
    sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Rgba16f>]", qword_254A73E40);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A73E40, &dword_21089F000);
    __cxa_guard_release(&qword_254A73E58);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A73E78);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A73E78))
  {
    v5 = sub_21090AB9C(qword_254A73E40, "<", 0);
    sub_21090AA98(qword_254A73E40, 0, v5, qword_254A73E60);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A73E60, &dword_21089F000);
    __cxa_guard_release(&qword_254A73E78);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A73E98);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A73E98))
  {
    sub_2109ED44C((uint64_t)qword_254A73E60, (uint64_t)&xmmword_254A73E80);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A73E80, &dword_21089F000);
    __cxa_guard_release(&qword_254A73E98);
  }
  if (byte_254A73E97 < 0)
  {
    sub_2108B314C((_BYTE *)a1, (void *)xmmword_254A73E80, *((unint64_t *)&xmmword_254A73E80 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A73E80;
    *(_QWORD *)(a1 + 16) = unk_254A73E90;
  }
}

void sub_2109B4DA4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A73E98);
  _Unwind_Resume(a1);
}

void sub_2109B4DBC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A73E78);
  _Unwind_Resume(a1);
}

void sub_2109B4DD4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A73E58);
  _Unwind_Resume(a1);
}

uint64_t sub_2109B4DEC()
{
  return 32;
}

__int128 *sub_2109B4DF8()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A73EB8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A73EB8))
  {
    v2 = sub_2109B4ED0();
    if (*((char *)v2 + 23) < 0)
    {
      sub_2108B314C(&xmmword_254A73EA0, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_254A73EB0 = *((_QWORD *)v2 + 2);
      xmmword_254A73EA0 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A73EA0, &dword_21089F000);
    __cxa_guard_release(&qword_254A73EB8);
  }
  if (byte_254A73EB7 >= 0)
    return &xmmword_254A73EA0;
  else
    return (__int128 *)xmmword_254A73EA0;
}

void sub_2109B4EB8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A73EB8);
  _Unwind_Resume(a1);
}

__int128 *sub_2109B4ED0()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A73ED8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A73ED8))
    return &xmmword_254A73EC0;
  v2 = sub_2109B4FAC();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(&xmmword_254A73EC0, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A73ED0 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A73EC0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A73EC0, &dword_21089F000);
  __cxa_guard_release(&qword_254A73ED8);
  return &xmmword_254A73EC0;
}

void sub_2109B4F94(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A73ED8);
  _Unwind_Resume(a1);
}

std::string *sub_2109B4FAC()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A73EF8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A73EF8))
    return &stru_254A73EE0;
  sub_2109B509C((uint64_t)__p);
  sub_21090B820((char *)__p, &stru_254A73EE0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A73EE0, &dword_21089F000);
  __cxa_guard_release(&qword_254A73EF8);
  return &stru_254A73EE0;
}

void sub_2109B505C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A73EF8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A73EF8);
  _Unwind_Resume(a1);
}

void sub_2109B509C(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A73F18);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A73F18))
  {
    sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Rgba32f>]", qword_254A73F00);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A73F00, &dword_21089F000);
    __cxa_guard_release(&qword_254A73F18);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A73F38);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A73F38))
  {
    v5 = sub_21090AB9C(qword_254A73F00, "<", 0);
    sub_21090AA98(qword_254A73F00, 0, v5, qword_254A73F20);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A73F20, &dword_21089F000);
    __cxa_guard_release(&qword_254A73F38);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A73F58);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A73F58))
  {
    sub_2109ED44C((uint64_t)qword_254A73F20, (uint64_t)&xmmword_254A73F40);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A73F40, &dword_21089F000);
    __cxa_guard_release(&qword_254A73F58);
  }
  if (byte_254A73F57 < 0)
  {
    sub_2108B314C((_BYTE *)a1, (void *)xmmword_254A73F40, *((unint64_t *)&xmmword_254A73F40 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A73F40;
    *(_QWORD *)(a1 + 16) = unk_254A73F50;
  }
}

void sub_2109B5238(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A73F58);
  _Unwind_Resume(a1);
}

void sub_2109B5250(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A73F38);
  _Unwind_Resume(a1);
}

void sub_2109B5268(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A73F18);
  _Unwind_Resume(a1);
}

void sub_2109B5284()
{
  JUMPOUT(0x212BCC6FCLL);
}

uint64_t sub_2109B5298()
{
  return 33;
}

__int128 *sub_2109B52A4()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A73F78);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A73F78))
  {
    v2 = sub_2109B537C();
    if (*((char *)v2 + 23) < 0)
    {
      sub_2108B314C(&xmmword_254A73F60, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_254A73F70 = *((_QWORD *)v2 + 2);
      xmmword_254A73F60 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A73F60, &dword_21089F000);
    __cxa_guard_release(&qword_254A73F78);
  }
  if (byte_254A73F77 >= 0)
    return &xmmword_254A73F60;
  else
    return (__int128 *)xmmword_254A73F60;
}

void sub_2109B5364(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A73F78);
  _Unwind_Resume(a1);
}

__int128 *sub_2109B537C()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A73F98);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A73F98))
    return &xmmword_254A73F80;
  v2 = sub_2109B5458();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(&xmmword_254A73F80, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A73F90 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A73F80 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A73F80, &dword_21089F000);
  __cxa_guard_release(&qword_254A73F98);
  return &xmmword_254A73F80;
}

void sub_2109B5440(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A73F98);
  _Unwind_Resume(a1);
}

std::string *sub_2109B5458()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A73FB8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A73FB8))
    return &stru_254A73FA0;
  sub_2109B5548((uint64_t)__p);
  sub_21095293C((char *)__p, &stru_254A73FA0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A73FA0, &dword_21089F000);
  __cxa_guard_release(&qword_254A73FB8);
  return &stru_254A73FA0;
}

void sub_2109B5508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A73FB8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A73FB8);
  _Unwind_Resume(a1);
}

void sub_2109B5548(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A73FD8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A73FD8))
  {
    sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Abgr8u>]", qword_254A73FC0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A73FC0, &dword_21089F000);
    __cxa_guard_release(&qword_254A73FD8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A73FF8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A73FF8))
  {
    v5 = sub_21090AB9C(qword_254A73FC0, "<", 0);
    sub_21090AA98(qword_254A73FC0, 0, v5, qword_254A73FE0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A73FE0, &dword_21089F000);
    __cxa_guard_release(&qword_254A73FF8);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A74018);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A74018))
  {
    sub_2109ED44C((uint64_t)qword_254A73FE0, (uint64_t)&xmmword_254A74000);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A74000, &dword_21089F000);
    __cxa_guard_release(&qword_254A74018);
  }
  if (byte_254A74017 < 0)
  {
    sub_2108B314C((_BYTE *)a1, (void *)xmmword_254A74000, *((unint64_t *)&xmmword_254A74000 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A74000;
    *(_QWORD *)(a1 + 16) = unk_254A74010;
  }
}

void sub_2109B56E4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A74018);
  _Unwind_Resume(a1);
}

void sub_2109B56FC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A73FF8);
  _Unwind_Resume(a1);
}

void sub_2109B5714(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A73FD8);
  _Unwind_Resume(a1);
}

uint64_t sub_2109B572C()
{
  return 34;
}

__int128 *sub_2109B5738()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A74038);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A74038))
  {
    v2 = sub_2109B5810();
    if (*((char *)v2 + 23) < 0)
    {
      sub_2108B314C(&xmmword_254A74020, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_254A74030 = *((_QWORD *)v2 + 2);
      xmmword_254A74020 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A74020, &dword_21089F000);
    __cxa_guard_release(&qword_254A74038);
  }
  if (byte_254A74037 >= 0)
    return &xmmword_254A74020;
  else
    return (__int128 *)xmmword_254A74020;
}

void sub_2109B57F8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A74038);
  _Unwind_Resume(a1);
}

__int128 *sub_2109B5810()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A74058);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A74058))
    return &xmmword_254A74040;
  v2 = sub_2109B58EC();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(&xmmword_254A74040, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A74050 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A74040 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A74040, &dword_21089F000);
  __cxa_guard_release(&qword_254A74058);
  return &xmmword_254A74040;
}

void sub_2109B58D4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A74058);
  _Unwind_Resume(a1);
}

std::string *sub_2109B58EC()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A74078);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A74078))
    return &stru_254A74060;
  sub_2109B5B04((uint64_t)__p);
  sub_2109B59DC((char *)__p, &stru_254A74060);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A74060, &dword_21089F000);
  __cxa_guard_release(&qword_254A74078);
  return &stru_254A74060;
}

void sub_2109B599C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A74078);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A74078);
  _Unwind_Resume(a1);
}

void sub_2109B59DC(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2109AAC94();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_2108B9228(&__p, (uint64_t)__dst, 1uLL);
  sub_2109ED500(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_2109B5AD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_2108A89B4(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_2109B5B04(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A74098);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A74098))
  {
    sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Abgr16u>]", qword_254A74080);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A74080, &dword_21089F000);
    __cxa_guard_release(&qword_254A74098);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A740B8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A740B8))
  {
    v5 = sub_21090AB9C(qword_254A74080, "<", 0);
    sub_21090AA98(qword_254A74080, 0, v5, qword_254A740A0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A740A0, &dword_21089F000);
    __cxa_guard_release(&qword_254A740B8);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A740D8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A740D8))
  {
    sub_2109ED44C((uint64_t)qword_254A740A0, (uint64_t)&xmmword_254A740C0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A740C0, &dword_21089F000);
    __cxa_guard_release(&qword_254A740D8);
  }
  if (byte_254A740D7 < 0)
  {
    sub_2108B314C((_BYTE *)a1, (void *)xmmword_254A740C0, *((unint64_t *)&xmmword_254A740C0 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A740C0;
    *(_QWORD *)(a1 + 16) = unk_254A740D0;
  }
}

void sub_2109B5CA0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A740D8);
  _Unwind_Resume(a1);
}

void sub_2109B5CB8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A740B8);
  _Unwind_Resume(a1);
}

void sub_2109B5CD0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A74098);
  _Unwind_Resume(a1);
}

uint64_t sub_2109B5CE8()
{
  return 35;
}

__int128 *sub_2109B5CF4()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A740F8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A740F8))
  {
    v2 = sub_2109B5DCC();
    if (*((char *)v2 + 23) < 0)
    {
      sub_2108B314C(&xmmword_254A740E0, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_254A740F0 = *((_QWORD *)v2 + 2);
      xmmword_254A740E0 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A740E0, &dword_21089F000);
    __cxa_guard_release(&qword_254A740F8);
  }
  if (byte_254A740F7 >= 0)
    return &xmmword_254A740E0;
  else
    return (__int128 *)xmmword_254A740E0;
}

void sub_2109B5DB4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A740F8);
  _Unwind_Resume(a1);
}

__int128 *sub_2109B5DCC()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A74118);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A74118))
    return &xmmword_254A74100;
  v2 = sub_2109B5EA8();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(&xmmword_254A74100, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A74110 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A74100 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A74100, &dword_21089F000);
  __cxa_guard_release(&qword_254A74118);
  return &xmmword_254A74100;
}

void sub_2109B5E90(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A74118);
  _Unwind_Resume(a1);
}

std::string *sub_2109B5EA8()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A74138);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A74138))
    return &stru_254A74120;
  sub_2109B60C0((uint64_t)__p);
  sub_2109B5F98((char *)__p, &stru_254A74120);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A74120, &dword_21089F000);
  __cxa_guard_release(&qword_254A74138);
  return &stru_254A74120;
}

void sub_2109B5F58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A74138);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A74138);
  _Unwind_Resume(a1);
}

void sub_2109B5F98(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2109AAD8C();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_2108B9228(&__p, (uint64_t)__dst, 1uLL);
  sub_2109ED500(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_2109B6094(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_2108A89B4(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_2109B60C0(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A74158);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A74158))
  {
    sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Abgr16f>]", qword_254A74140);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A74140, &dword_21089F000);
    __cxa_guard_release(&qword_254A74158);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A74178);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A74178))
  {
    v5 = sub_21090AB9C(qword_254A74140, "<", 0);
    sub_21090AA98(qword_254A74140, 0, v5, qword_254A74160);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A74160, &dword_21089F000);
    __cxa_guard_release(&qword_254A74178);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A74198);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A74198))
  {
    sub_2109ED44C((uint64_t)qword_254A74160, (uint64_t)&xmmword_254A74180);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A74180, &dword_21089F000);
    __cxa_guard_release(&qword_254A74198);
  }
  if (byte_254A74197 < 0)
  {
    sub_2108B314C((_BYTE *)a1, (void *)xmmword_254A74180, *((unint64_t *)&xmmword_254A74180 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A74180;
    *(_QWORD *)(a1 + 16) = unk_254A74190;
  }
}

void sub_2109B625C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A74198);
  _Unwind_Resume(a1);
}

void sub_2109B6274(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A74178);
  _Unwind_Resume(a1);
}

void sub_2109B628C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A74158);
  _Unwind_Resume(a1);
}

uint64_t sub_2109B62A4()
{
  return 36;
}

__int128 *sub_2109B62B0()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A741B8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A741B8))
  {
    v2 = sub_2109B6388();
    if (*((char *)v2 + 23) < 0)
    {
      sub_2108B314C(&xmmword_254A741A0, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_254A741B0 = *((_QWORD *)v2 + 2);
      xmmword_254A741A0 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A741A0, &dword_21089F000);
    __cxa_guard_release(&qword_254A741B8);
  }
  if (byte_254A741B7 >= 0)
    return &xmmword_254A741A0;
  else
    return (__int128 *)xmmword_254A741A0;
}

void sub_2109B6370(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A741B8);
  _Unwind_Resume(a1);
}

__int128 *sub_2109B6388()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A741D8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A741D8))
    return &xmmword_254A741C0;
  v2 = sub_2109B6464();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(&xmmword_254A741C0, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A741D0 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A741C0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A741C0, &dword_21089F000);
  __cxa_guard_release(&qword_254A741D8);
  return &xmmword_254A741C0;
}

void sub_2109B644C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A741D8);
  _Unwind_Resume(a1);
}

std::string *sub_2109B6464()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A741F8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A741F8))
    return &stru_254A741E0;
  sub_2109B667C((uint64_t)__p);
  sub_2109B6554((char *)__p, &stru_254A741E0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A741E0, &dword_21089F000);
  __cxa_guard_release(&qword_254A741F8);
  return &stru_254A741E0;
}

void sub_2109B6514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A741F8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A741F8);
  _Unwind_Resume(a1);
}

void sub_2109B6554(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2109AAE84();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_2108B9228(&__p, (uint64_t)__dst, 1uLL);
  sub_2109ED500(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_2109B6650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_2108A89B4(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_2109B667C(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A74218);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A74218))
  {
    sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Abgr32f>]", qword_254A74200);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A74200, &dword_21089F000);
    __cxa_guard_release(&qword_254A74218);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A74238);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A74238))
  {
    v5 = sub_21090AB9C(qword_254A74200, "<", 0);
    sub_21090AA98(qword_254A74200, 0, v5, qword_254A74220);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A74220, &dword_21089F000);
    __cxa_guard_release(&qword_254A74238);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A74258);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A74258))
  {
    sub_2109ED44C((uint64_t)qword_254A74220, (uint64_t)&xmmword_254A74240);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A74240, &dword_21089F000);
    __cxa_guard_release(&qword_254A74258);
  }
  if (byte_254A74257 < 0)
  {
    sub_2108B314C((_BYTE *)a1, (void *)xmmword_254A74240, *((unint64_t *)&xmmword_254A74240 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A74240;
    *(_QWORD *)(a1 + 16) = unk_254A74250;
  }
}

void sub_2109B6818(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A74258);
  _Unwind_Resume(a1);
}

void sub_2109B6830(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A74238);
  _Unwind_Resume(a1);
}

void sub_2109B6848(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A74218);
  _Unwind_Resume(a1);
}

void sub_2109B6864()
{
  JUMPOUT(0x212BCC6FCLL);
}

uint64_t sub_2109B6878()
{
  return 37;
}

__int128 *sub_2109B6884()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A74278);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A74278))
  {
    v2 = sub_2109B695C();
    if (*((char *)v2 + 23) < 0)
    {
      sub_2108B314C(&xmmword_254A74260, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_254A74270 = *((_QWORD *)v2 + 2);
      xmmword_254A74260 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A74260, &dword_21089F000);
    __cxa_guard_release(&qword_254A74278);
  }
  if (byte_254A74277 >= 0)
    return &xmmword_254A74260;
  else
    return (__int128 *)xmmword_254A74260;
}

void sub_2109B6944(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A74278);
  _Unwind_Resume(a1);
}

__int128 *sub_2109B695C()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A74298);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A74298))
    return &xmmword_254A74280;
  v2 = sub_2109B6A38();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(&xmmword_254A74280, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A74290 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A74280 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A74280, &dword_21089F000);
  __cxa_guard_release(&qword_254A74298);
  return &xmmword_254A74280;
}

void sub_2109B6A20(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A74298);
  _Unwind_Resume(a1);
}

std::string *sub_2109B6A38()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A742B8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A742B8))
    return &stru_254A742A0;
  sub_2109B6B28((uint64_t)__p);
  sub_21090B948((char *)__p, &stru_254A742A0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A742A0, &dword_21089F000);
  __cxa_guard_release(&qword_254A742B8);
  return &stru_254A742A0;
}

void sub_2109B6AE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A742B8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A742B8);
  _Unwind_Resume(a1);
}

void sub_2109B6B28(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A742D8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A742D8))
  {
    sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Argb8u>]", qword_254A742C0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A742C0, &dword_21089F000);
    __cxa_guard_release(&qword_254A742D8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A742F8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A742F8))
  {
    v5 = sub_21090AB9C(qword_254A742C0, "<", 0);
    sub_21090AA98(qword_254A742C0, 0, v5, qword_254A742E0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A742E0, &dword_21089F000);
    __cxa_guard_release(&qword_254A742F8);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A74318);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A74318))
  {
    sub_2109ED44C((uint64_t)qword_254A742E0, (uint64_t)&xmmword_254A74300);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A74300, &dword_21089F000);
    __cxa_guard_release(&qword_254A74318);
  }
  if (byte_254A74317 < 0)
  {
    sub_2108B314C((_BYTE *)a1, (void *)xmmword_254A74300, *((unint64_t *)&xmmword_254A74300 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A74300;
    *(_QWORD *)(a1 + 16) = unk_254A74310;
  }
}

void sub_2109B6CC4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A74318);
  _Unwind_Resume(a1);
}

void sub_2109B6CDC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A742F8);
  _Unwind_Resume(a1);
}

void sub_2109B6CF4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A742D8);
  _Unwind_Resume(a1);
}

uint64_t sub_2109B6D0C()
{
  return 38;
}

__int128 *sub_2109B6D18()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A74338);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A74338))
  {
    v2 = sub_2109B6DF0();
    if (*((char *)v2 + 23) < 0)
    {
      sub_2108B314C(&xmmword_254A74320, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_254A74330 = *((_QWORD *)v2 + 2);
      xmmword_254A74320 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A74320, &dword_21089F000);
    __cxa_guard_release(&qword_254A74338);
  }
  if (byte_254A74337 >= 0)
    return &xmmword_254A74320;
  else
    return (__int128 *)xmmword_254A74320;
}

void sub_2109B6DD8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A74338);
  _Unwind_Resume(a1);
}

__int128 *sub_2109B6DF0()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A74358);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A74358))
    return &xmmword_254A74340;
  v2 = sub_2109B6ECC();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(&xmmword_254A74340, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A74350 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A74340 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A74340, &dword_21089F000);
  __cxa_guard_release(&qword_254A74358);
  return &xmmword_254A74340;
}

void sub_2109B6EB4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A74358);
  _Unwind_Resume(a1);
}

std::string *sub_2109B6ECC()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A74378);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A74378))
    return &stru_254A74360;
  sub_2109B6FBC((uint64_t)__p);
  sub_21090BA70((char *)__p, &stru_254A74360);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A74360, &dword_21089F000);
  __cxa_guard_release(&qword_254A74378);
  return &stru_254A74360;
}

void sub_2109B6F7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A74378);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A74378);
  _Unwind_Resume(a1);
}

void sub_2109B6FBC(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A74398);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A74398))
  {
    sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Argb16u>]", qword_254A74380);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A74380, &dword_21089F000);
    __cxa_guard_release(&qword_254A74398);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A743B8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A743B8))
  {
    v5 = sub_21090AB9C(qword_254A74380, "<", 0);
    sub_21090AA98(qword_254A74380, 0, v5, qword_254A743A0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A743A0, &dword_21089F000);
    __cxa_guard_release(&qword_254A743B8);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A743D8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A743D8))
  {
    sub_2109ED44C((uint64_t)qword_254A743A0, (uint64_t)&xmmword_254A743C0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A743C0, &dword_21089F000);
    __cxa_guard_release(&qword_254A743D8);
  }
  if (byte_254A743D7 < 0)
  {
    sub_2108B314C((_BYTE *)a1, (void *)xmmword_254A743C0, *((unint64_t *)&xmmword_254A743C0 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A743C0;
    *(_QWORD *)(a1 + 16) = unk_254A743D0;
  }
}

void sub_2109B7158(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A743D8);
  _Unwind_Resume(a1);
}

void sub_2109B7170(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A743B8);
  _Unwind_Resume(a1);
}

void sub_2109B7188(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A74398);
  _Unwind_Resume(a1);
}

uint64_t sub_2109B71A0()
{
  return 39;
}

__int128 *sub_2109B71AC()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A743F8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A743F8))
  {
    v2 = sub_2109B7284();
    if (*((char *)v2 + 23) < 0)
    {
      sub_2108B314C(&xmmword_254A743E0, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_254A743F0 = *((_QWORD *)v2 + 2);
      xmmword_254A743E0 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A743E0, &dword_21089F000);
    __cxa_guard_release(&qword_254A743F8);
  }
  if (byte_254A743F7 >= 0)
    return &xmmword_254A743E0;
  else
    return (__int128 *)xmmword_254A743E0;
}

void sub_2109B726C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A743F8);
  _Unwind_Resume(a1);
}

__int128 *sub_2109B7284()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A74418);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A74418))
    return &xmmword_254A74400;
  v2 = sub_2109B7360();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(&xmmword_254A74400, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A74410 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A74400 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A74400, &dword_21089F000);
  __cxa_guard_release(&qword_254A74418);
  return &xmmword_254A74400;
}

void sub_2109B7348(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A74418);
  _Unwind_Resume(a1);
}

std::string *sub_2109B7360()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A74438);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A74438))
    return &stru_254A74420;
  sub_2109B7578((uint64_t)__p);
  sub_2109B7450((char *)__p, &stru_254A74420);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A74420, &dword_21089F000);
  __cxa_guard_release(&qword_254A74438);
  return &stru_254A74420;
}

void sub_2109B7410(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A74438);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A74438);
  _Unwind_Resume(a1);
}

void sub_2109B7450(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2109AAF7C();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_2108B9228(&__p, (uint64_t)__dst, 1uLL);
  sub_2109ED500(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_2109B754C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_2108A89B4(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_2109B7578(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A74458);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A74458))
  {
    sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Argb16f>]", qword_254A74440);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A74440, &dword_21089F000);
    __cxa_guard_release(&qword_254A74458);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A74478);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A74478))
  {
    v5 = sub_21090AB9C(qword_254A74440, "<", 0);
    sub_21090AA98(qword_254A74440, 0, v5, qword_254A74460);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A74460, &dword_21089F000);
    __cxa_guard_release(&qword_254A74478);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A74498);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A74498))
  {
    sub_2109ED44C((uint64_t)qword_254A74460, (uint64_t)&xmmword_254A74480);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A74480, &dword_21089F000);
    __cxa_guard_release(&qword_254A74498);
  }
  if (byte_254A74497 < 0)
  {
    sub_2108B314C((_BYTE *)a1, (void *)xmmword_254A74480, *((unint64_t *)&xmmword_254A74480 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A74480;
    *(_QWORD *)(a1 + 16) = unk_254A74490;
  }
}

void sub_2109B7714(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A74498);
  _Unwind_Resume(a1);
}

void sub_2109B772C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A74478);
  _Unwind_Resume(a1);
}

void sub_2109B7744(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A74458);
  _Unwind_Resume(a1);
}

uint64_t sub_2109B775C()
{
  return 40;
}

__int128 *sub_2109B7768()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A744B8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A744B8))
  {
    v2 = sub_2109B7840();
    if (*((char *)v2 + 23) < 0)
    {
      sub_2108B314C(&xmmword_254A744A0, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_254A744B0 = *((_QWORD *)v2 + 2);
      xmmword_254A744A0 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A744A0, &dword_21089F000);
    __cxa_guard_release(&qword_254A744B8);
  }
  if (byte_254A744B7 >= 0)
    return &xmmword_254A744A0;
  else
    return (__int128 *)xmmword_254A744A0;
}

void sub_2109B7828(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A744B8);
  _Unwind_Resume(a1);
}

__int128 *sub_2109B7840()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A744D8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A744D8))
    return &xmmword_254A744C0;
  v2 = sub_2109B791C();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(&xmmword_254A744C0, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A744D0 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A744C0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A744C0, &dword_21089F000);
  __cxa_guard_release(&qword_254A744D8);
  return &xmmword_254A744C0;
}

void sub_2109B7904(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A744D8);
  _Unwind_Resume(a1);
}

std::string *sub_2109B791C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A744F8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A744F8))
    return &stru_254A744E0;
  sub_2109B7B34((uint64_t)__p);
  sub_2109B7A0C((char *)__p, &stru_254A744E0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A744E0, &dword_21089F000);
  __cxa_guard_release(&qword_254A744F8);
  return &stru_254A744E0;
}

void sub_2109B79CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A744F8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A744F8);
  _Unwind_Resume(a1);
}

void sub_2109B7A0C(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2109AB074();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_2108B9228(&__p, (uint64_t)__dst, 1uLL);
  sub_2109ED500(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_2109B7B08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_2108A89B4(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_2109B7B34(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A74518);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A74518))
  {
    sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Argb32f>]", qword_254A74500);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A74500, &dword_21089F000);
    __cxa_guard_release(&qword_254A74518);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A74538);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A74538))
  {
    v5 = sub_21090AB9C(qword_254A74500, "<", 0);
    sub_21090AA98(qword_254A74500, 0, v5, qword_254A74520);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A74520, &dword_21089F000);
    __cxa_guard_release(&qword_254A74538);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A74558);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A74558))
  {
    sub_2109ED44C((uint64_t)qword_254A74520, (uint64_t)&xmmword_254A74540);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A74540, &dword_21089F000);
    __cxa_guard_release(&qword_254A74558);
  }
  if (byte_254A74557 < 0)
  {
    sub_2108B314C((_BYTE *)a1, (void *)xmmword_254A74540, *((unint64_t *)&xmmword_254A74540 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A74540;
    *(_QWORD *)(a1 + 16) = unk_254A74550;
  }
}

void sub_2109B7CD0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A74558);
  _Unwind_Resume(a1);
}

void sub_2109B7CE8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A74538);
  _Unwind_Resume(a1);
}

void sub_2109B7D00(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A74518);
  _Unwind_Resume(a1);
}

void sub_2109B7D18(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

uint64_t sub_2109B7D74(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 48) = 0;
  return a1;
}

void sub_2109B7DA4(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 48) = 0;
  JUMPOUT(0x212BCC6FCLL);
}

_UNKNOWN **sub_2109B7DE4()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A75DC0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A75DC0))
    return &off_253ED6E50;
  __cxa_guard_release(&qword_254A75DC0);
  return &off_253ED6E50;
}

uint64_t sub_2109B7E38@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24CA832E0;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 20) = *(_OWORD *)(a1 + 20);
  result = sub_2109CD9C0(v4 + 40, a1 + 40);
  *a2 = v4;
  return result;
}

void sub_2109B7EA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BCC6FC](v1, 0x1091C406A8758A4);
  _Unwind_Resume(a1);
}

void sub_2109B7ECC(uint64_t a1, void *lpsrc)
{
  char *v4;
  _OWORD *v5;
  unsigned int *v6;
  _BYTE *v7;
  size_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  BOOL v13;
  __int128 v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  _BYTE *v24;
  int v25;
  int i;
  uint64_t v27;
  int v28;
  char *v29;
  int v30;
  uint64_t v31;
  void *v32;
  const void *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[3];
  size_t v37[2];
  _BYTE v38[28];
  _QWORD v39[3];
  __int128 v40;

  v4 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24CA84C98, (const struct __class_type_info *)&unk_24CA845D0, 0);
  if (v4)
  {
    v5 = (_OWORD *)(a1 + 8);
    v6 = (unsigned int *)(v4 + 8);
    v7 = *(_BYTE **)(a1 + 48);
    if (v7
      && (v8 = *v6, (_DWORD)v8 == *(_DWORD *)v5)
      && (v9 = *((_DWORD *)v4 + 3), v9 == *(_DWORD *)(a1 + 12))
      && (v10 = *((unsigned int *)v4 + 4), (_DWORD)v10 == *(_DWORD *)(a1 + 16))
      && (v11 = *((unsigned int *)v4 + 5), (_DWORD)v11 == *(_DWORD *)(a1 + 20)))
    {
      if ((_DWORD)v10 == 1)
      {
        if ((_DWORD)v11 == (_DWORD)v8)
        {
          v8 = (v9 * v8);
          v12 = (const void *)*((_QWORD *)v4 + 6);
          if ((_DWORD)v8)
            v13 = v12 == 0;
          else
            v13 = 0;
          if (!v13)
          {
            if (!(_DWORD)v8)
              return;
            goto LABEL_47;
          }
          if (!sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
          {
            v7 = *(_BYTE **)(a1 + 48);
LABEL_47:
            v32 = v7;
            v33 = v12;
LABEL_52:
            memmove(v32, v33, v8);
            return;
          }
LABEL_61:
          abort();
        }
        if ((_DWORD)v8 && v9)
        {
          v29 = (char *)*((_QWORD *)v4 + 6);
          v30 = v9 - 1;
          if (v9 != 1)
          {
            v31 = 0;
            do
            {
              if (!&v29[v31]
                && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
              {
                goto LABEL_61;
              }
              memmove(&v7[v31], &v29[v31], v8);
              v31 += v11;
              --v30;
            }
            while (v30);
            v29 += v31;
            v7 += v31;
          }
          if (v29
            || !sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
          {
            v32 = v7;
            v33 = v29;
            goto LABEL_52;
          }
          goto LABEL_61;
        }
      }
      else if ((_DWORD)v8 && v9)
      {
        v23 = v8 - 1;
        v24 = (_BYTE *)*((_QWORD *)v4 + 6);
        v25 = v9 - 1;
        if (v25)
        {
          if ((_DWORD)v8 == 1)
          {
            v34 = 0;
            do
            {
              v7[v34] = v24[v34];
              v34 += v11;
              --v25;
            }
            while (v25);
            v24 += v34;
            v7 += v34;
          }
          else
          {
            for (i = 0; i != v25; ++i)
            {
              v27 = 0;
              v28 = v8 - 1;
              do
              {
                v7[v27] = v24[v27];
                v27 += v10;
                --v28;
              }
              while (v28);
              v7[v27] = v24[v27];
              v24 += v11;
              v7 += v11;
            }
          }
        }
        if ((_DWORD)v8 != 1)
        {
          v35 = 0;
          do
          {
            v7[v35] = v24[v35];
            v35 += v10;
            --v23;
          }
          while (v23);
          v24 += v35;
          v7 += v35;
        }
        *v7 = *v24;
      }
    }
    else
    {
      v14 = *(_OWORD *)v6;
      *(_OWORD *)&v38[12] = *(_OWORD *)(v4 + 20);
      *(_OWORD *)v38 = v14;
      sub_2109CD9C0((uint64_t)v39, (uint64_t)(v4 + 40));
      *v5 = *(_OWORD *)v38;
      *(_OWORD *)(a1 + 20) = *(_OWORD *)&v38[12];
      *(_OWORD *)(a1 + 64) = v40;
      *(_QWORD *)(a1 + 40) = v39[0];
      v15 = *(void **)(a1 + 48);
      if (v15)
        free(v15);
      v16 = v39[2];
      *(_QWORD *)(a1 + 48) = v39[1];
      *(_QWORD *)(a1 + 56) = v16;
    }
  }
  else
  {
    (*(void (**)(_QWORD *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(v36, lpsrc, 1);
    v17 = *(_QWORD *)(v36[0] + 16);
    *(_OWORD *)v38 = *(_OWORD *)v36[0];
    *(_QWORD *)&v38[16] = v17;
    v36[0] = 0;
    MEMORY[0x212BCC6FC]();
    v18 = *(_QWORD *)(a1 + 48);
    if (*(_DWORD *)(a1 + 12))
      v19 = *(_DWORD *)(a1 + 8) == 0;
    else
      v19 = 1;
    v20 = *(_QWORD *)(a1 + 8);
    v21 = *(_QWORD *)(a1 + 16);
    if (v19)
      v22 = 0;
    else
      v22 = v20;
    if (HIDWORD(v22) * HIDWORD(v21) == -1
      && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
    {
      goto LABEL_61;
    }
    v36[0] = v18;
    v36[1] = v22;
    v36[2] = v21;
    v37[0] = (size_t)v38;
    v37[1] = (size_t)v36;
    sub_2108FE614(v37);
  }
}

uint64_t sub_2109B82AC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

_QWORD *sub_2109B82B4@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *result;

  if (a2 != 1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4)|| ((v5 = *(_QWORD *)(a1 + 48), *(_DWORD *)(a1 + 12)) ? (v6 = *(_DWORD *)(a1 + 8) == 0) : (v6 = 1), (v7 = *(_QWORD *)(a1 + 8), v8 = *(_QWORD *)(a1 + 16), !v6) ? (v9 = v7) : (v9 = 0), HIDWORD(v9) * HIDWORD(v8) == -1&& sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4)))
  {
    abort();
  }
  result = (_QWORD *)operator new();
  *result = v5;
  result[1] = v9;
  result[2] = v8;
  *a3 = result;
  return result;
}

_QWORD *sub_2109B83A0@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *result;

  if (a2 != 1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4)|| ((v5 = *(_QWORD *)(a1 + 48), *(_DWORD *)(a1 + 12)) ? (v6 = *(_DWORD *)(a1 + 8) == 0) : (v6 = 1), (v7 = *(_QWORD *)(a1 + 8), v8 = *(_QWORD *)(a1 + 16), !v6) ? (v9 = v7) : (v9 = 0), HIDWORD(v9) * HIDWORD(v8) == -1&& sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4)))
  {
    abort();
  }
  result = (_QWORD *)operator new();
  *result = v5;
  result[1] = v9;
  result[2] = v8;
  *a3 = result;
  return result;
}

uint64_t sub_2109B848C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 48) = 0;
  return a1;
}

void sub_2109B84BC(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 48) = 0;
  JUMPOUT(0x212BCC6FCLL);
}

_UNKNOWN **sub_2109B84FC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A75DC0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A75DC0))
    return &off_253ED6E50;
  __cxa_guard_release(&qword_254A75DC0);
  return &off_253ED6E50;
}

uint64_t sub_2109B8550@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24CA83360;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 20) = *(_OWORD *)(a1 + 20);
  result = sub_2109CDD2C(v4 + 40, a1 + 40);
  *a2 = v4;
  return result;
}

void sub_2109B85C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BCC6FC](v1, 0x1091C406A8758A4);
  _Unwind_Resume(a1);
}

void sub_2109B85E4(uint64_t a1, void *lpsrc)
{
  char *v4;
  _OWORD *v5;
  unsigned int *v6;
  _WORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  BOOL v14;
  __int128 v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  _WORD *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  size_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  _BYTE v40[28];
  _QWORD v41[3];
  __int128 v42;

  v4 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24CA84C98, (const struct __class_type_info *)&unk_24CA845E8, 0);
  if (!v4)
  {
    (*(void (**)(_QWORD *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(v39, lpsrc, 2);
    v18 = *(_QWORD *)(v39[0] + 16);
    *(_OWORD *)v40 = *(_OWORD *)v39[0];
    *(_QWORD *)&v40[16] = v18;
    v39[0] = 0;
    MEMORY[0x212BCC6FC]();
    v19 = *(_QWORD *)(a1 + 48);
    if (*(_DWORD *)(a1 + 12))
      v20 = *(_DWORD *)(a1 + 8) == 0;
    else
      v20 = 1;
    v21 = *(_QWORD *)(a1 + 8);
    v22 = *(_QWORD *)(a1 + 16);
    if (v20)
      v23 = 0;
    else
      v23 = v21;
    if (HIDWORD(v23) * HIDWORD(v22) == -1
      && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
    {
      goto LABEL_59;
    }
    v39[0] = v19;
    v39[1] = v23;
    v39[2] = v22;
    sub_2108FFBBC((uint64_t *)v40, (uint64_t)v39);
    return;
  }
  v5 = (_OWORD *)(a1 + 8);
  v6 = (unsigned int *)(v4 + 8);
  v7 = *(_WORD **)(a1 + 48);
  if (!v7
    || (v8 = *v6, (_DWORD)v8 != *(_DWORD *)v5)
    || (v9 = *((_DWORD *)v4 + 3), v9 != *(_DWORD *)(a1 + 12))
    || (v10 = *((unsigned int *)v4 + 4), (_DWORD)v10 != *(_DWORD *)(a1 + 16))
    || (v11 = *((unsigned int *)v4 + 5), (_DWORD)v11 != *(_DWORD *)(a1 + 20)))
  {
    v15 = *(_OWORD *)v6;
    *(_OWORD *)&v40[12] = *(_OWORD *)(v4 + 20);
    *(_OWORD *)v40 = v15;
    sub_2109CDD2C((uint64_t)v41, (uint64_t)(v4 + 40));
    *v5 = *(_OWORD *)v40;
    *(_OWORD *)(a1 + 20) = *(_OWORD *)&v40[12];
    *(_OWORD *)(a1 + 64) = v42;
    *(_QWORD *)(a1 + 40) = v41[0];
    v16 = *(void **)(a1 + 48);
    if (v16)
      free(v16);
    v17 = v41[2];
    *(_QWORD *)(a1 + 48) = v41[1];
    *(_QWORD *)(a1 + 56) = v17;
    return;
  }
  if ((_DWORD)v10 != 1)
  {
    if (!(_DWORD)v8 || !v9)
      return;
    v24 = v8 - 1;
    v25 = (_WORD *)*((_QWORD *)v4 + 6);
    v26 = v9 - 1;
    if (v26)
    {
      if (!v24)
      {
        v38 = 0;
        do
        {
          v7[v38] = v25[v38];
          v38 += v11;
          --v26;
        }
        while (v26);
        v25 = (_WORD *)((char *)v25 + v38 * 2);
        v7 = (_WORD *)((char *)v7 + v38 * 2);
LABEL_58:
        *v7 = *v25;
        return;
      }
      v27 = 0;
      v28 = 2 * v11;
      do
      {
        v29 = 0;
        v30 = v24;
        do
        {
          v7[v29] = v25[v29];
          v29 += v10;
          --v30;
        }
        while (v30);
        v7[v29] = v25[v29];
        v25 = (_WORD *)((char *)v25 + v28);
        v7 = (_WORD *)((char *)v7 + v28);
        ++v27;
      }
      while (v27 != v26);
    }
    if (v24)
    {
      v31 = 0;
      v32 = 2 * v10;
      do
      {
        *(_WORD *)((char *)v7 + v31) = *(_WORD *)((char *)v25 + v31);
        v31 += v32;
        --v24;
      }
      while (v24);
      v25 = (_WORD *)((char *)v25 + v31);
      v7 = (_WORD *)((char *)v7 + v31);
    }
    goto LABEL_58;
  }
  if ((_DWORD)v11 == (_DWORD)v8)
  {
    v12 = (v9 * v8);
    v13 = (const void *)*((_QWORD *)v4 + 6);
    if ((_DWORD)v12)
      v14 = v13 == 0;
    else
      v14 = 0;
    if (!v14)
    {
      if (!(_DWORD)v12)
        return;
LABEL_50:
      memmove(v7, v13, 2 * v12);
      return;
    }
    if (!sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
    {
      v7 = *(_WORD **)(a1 + 48);
      goto LABEL_50;
    }
LABEL_59:
    abort();
  }
  if ((_DWORD)v8 && v9)
  {
    v33 = (char *)*((_QWORD *)v4 + 6);
    v34 = 2 * v8;
    v35 = v9 - 1;
    if (v9 != 1)
    {
      v36 = 0;
      v37 = 2 * v11;
      do
      {
        if (!&v33[v36]
          && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
        {
          goto LABEL_59;
        }
        memmove((char *)v7 + v36, &v33[v36], v34);
        v36 += v37;
        --v35;
      }
      while (v35);
      v33 += v36;
      v7 = (_WORD *)((char *)v7 + v36);
    }
    if (v33
      || !sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
    {
      memmove(v7, v33, v34);
      return;
    }
    goto LABEL_59;
  }
}

uint64_t sub_2109B89D8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

_QWORD *sub_2109B89E0@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *result;

  if (a2 != 2
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4)|| ((v5 = *(_QWORD *)(a1 + 48), *(_DWORD *)(a1 + 12)) ? (v6 = *(_DWORD *)(a1 + 8) == 0) : (v6 = 1), (v7 = *(_QWORD *)(a1 + 8), v8 = *(_QWORD *)(a1 + 16), !v6) ? (v9 = v7) : (v9 = 0), HIDWORD(v9) * HIDWORD(v8) == -1&& sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4)))
  {
    abort();
  }
  result = (_QWORD *)operator new();
  *result = v5;
  result[1] = v9;
  result[2] = v8;
  *a3 = result;
  return result;
}

_QWORD *sub_2109B8ACC@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *result;

  if (a2 != 2
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4)|| ((v5 = *(_QWORD *)(a1 + 48), *(_DWORD *)(a1 + 12)) ? (v6 = *(_DWORD *)(a1 + 8) == 0) : (v6 = 1), (v7 = *(_QWORD *)(a1 + 8), v8 = *(_QWORD *)(a1 + 16), !v6) ? (v9 = v7) : (v9 = 0), HIDWORD(v9) * HIDWORD(v8) == -1&& sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4)))
  {
    abort();
  }
  result = (_QWORD *)operator new();
  *result = v5;
  result[1] = v9;
  result[2] = v8;
  *a3 = result;
  return result;
}

uint64_t sub_2109B8BB8(uint64_t a1)
{
  void *v2;
  BOOL v3;
  int v4;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 68) || *(_DWORD *)(a1 + 64) == 0;
    v4 = v3 ? 0 : *(_DWORD *)(a1 + 68);
    if (v4 * (*(_QWORD *)(a1 + 72) >> 33) != -1)
      goto LABEL_11;
    if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
    v2 = *(void **)(a1 + 48);
    if (v2)
LABEL_11:
      free(v2);
  }
  *(_QWORD *)(a1 + 48) = 0;
  return a1;
}

void sub_2109B8C54(uint64_t a1)
{
  void *v2;
  BOOL v3;
  int v4;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 68) || *(_DWORD *)(a1 + 64) == 0;
    v4 = v3 ? 0 : *(_DWORD *)(a1 + 68);
    if (v4 * (*(_QWORD *)(a1 + 72) >> 33) != -1)
      goto LABEL_11;
    if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
    v2 = *(void **)(a1 + 48);
    if (v2)
LABEL_11:
      free(v2);
  }
  *(_QWORD *)(a1 + 48) = 0;
  JUMPOUT(0x212BCC6FCLL);
}

_UNKNOWN **sub_2109B8D00()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A75DC0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A75DC0))
    return &off_253ED6E50;
  __cxa_guard_release(&qword_254A75DC0);
  return &off_253ED6E50;
}

uint64_t sub_2109B8D54@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24CA833E0;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 20) = *(_OWORD *)(a1 + 20);
  result = sub_2109CE15C(v4 + 40, a1 + 40);
  *a2 = v4;
  return result;
}

void sub_2109B8DC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BCC6FC](v1, 0x1091C406A8758A4);
  _Unwind_Resume(a1);
}

__int16 sub_2109B8DE8@<H0>(uint64_t a1@<X0>, void *lpsrc@<X1>)
{
  char *v4;
  __int128 v5;
  _OWORD *v6;
  unsigned int *v7;
  _WORD *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  __int128 v16;
  void *v17;
  BOOL v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  _WORD *v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _WORD *v41;
  uint64_t v42;
  _WORD *v43;
  __int16 *v44;
  uint64_t v45;
  unint64_t v46;
  _OWORD *v47;
  __int128 v48;
  __int16 v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  _WORD *v53;
  __int16 *v54;
  __int128 *v55;
  _OWORD *v56;
  unint64_t v57;
  __int128 v58;
  __int16 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  _WORD *v66;
  __int16 *v67;
  __int128 *v68;
  _OWORD *v69;
  unint64_t v70;
  __int128 v71;
  __int16 v72;
  uint64_t v74;
  _QWORD v75[3];
  uint64_t v76[2];
  _BYTE v77[28];
  _QWORD v78[3];
  __int128 v79;

  v4 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24CA84C98, (const struct __class_type_info *)&unk_24CA84600, 0);
  if (!v4)
  {
    (*(void (**)(_QWORD *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(v75, lpsrc, 3);
    v20 = *(_QWORD *)(v75[0] + 16);
    *(_OWORD *)v77 = *(_OWORD *)v75[0];
    *(_QWORD *)&v77[16] = v20;
    v75[0] = 0;
    MEMORY[0x212BCC6FC]();
    v21 = *(_QWORD *)(a1 + 48);
    if (*(_DWORD *)(a1 + 12))
      v22 = *(_DWORD *)(a1 + 8) == 0;
    else
      v22 = 1;
    v23 = *(_QWORD *)(a1 + 8);
    v24 = *(_QWORD *)(a1 + 16);
    if (v22)
      v25 = 0;
    else
      v25 = v23;
    if (HIDWORD(v25) * HIDWORD(v24) != -1
      || !sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
    {
      v75[0] = v21;
      v75[1] = v25;
      v75[2] = v24;
      v76[0] = (uint64_t)v77;
      v76[1] = (uint64_t)v75;
      LOWORD(v5) = sub_2109014B4(v76);
      return v5;
    }
    goto LABEL_93;
  }
  v6 = (_OWORD *)(a1 + 8);
  v7 = (unsigned int *)(v4 + 8);
  v8 = *(_WORD **)(a1 + 48);
  if (!v8
    || (v9 = *v7, (_DWORD)v9 != *(_DWORD *)v6)
    || (v10 = *((_DWORD *)v4 + 3), v10 != *(_DWORD *)(a1 + 12))
    || (v11 = *((unsigned int *)v4 + 4), (_DWORD)v11 != *(_DWORD *)(a1 + 16))
    || (v12 = *((unsigned int *)v4 + 5), (_DWORD)v12 != *(_DWORD *)(a1 + 20)))
  {
    v16 = *(_OWORD *)v7;
    *(_OWORD *)&v77[12] = *(_OWORD *)(v4 + 20);
    *(_OWORD *)v77 = v16;
    sub_2109CE15C((uint64_t)v78, (uint64_t)(v4 + 40));
    *v6 = *(_OWORD *)v77;
    *(_OWORD *)(a1 + 20) = *(_OWORD *)&v77[12];
    LOWORD(v5) = v79;
    *(_OWORD *)(a1 + 64) = v79;
    v17 = *(void **)(a1 + 48);
    if (v17)
    {
      if (*(_DWORD *)(a1 + 68))
        v18 = *(_DWORD *)(a1 + 64) == 0;
      else
        v18 = 1;
      if (v18)
        v19 = 0;
      else
        v19 = *(_DWORD *)(a1 + 68);
      if (v19 * (*(_QWORD *)(a1 + 72) >> 33) == -1)
      {
        if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
        {
          abort();
        }
        v17 = *(void **)(a1 + 48);
        *(_QWORD *)(a1 + 40) = v78[0];
        if (!v17)
          goto LABEL_37;
      }
      else
      {
        *(_QWORD *)(a1 + 40) = v78[0];
      }
      free(v17);
    }
    else
    {
      *(_QWORD *)(a1 + 40) = v78[0];
    }
LABEL_37:
    v26 = v78[2];
    *(_QWORD *)(a1 + 48) = v78[1];
    *(_QWORD *)(a1 + 56) = v26;
    return v5;
  }
  if ((_DWORD)v11 != 1)
  {
    if ((_DWORD)v9 && v10)
    {
      v27 = v9 - 1;
      v28 = (_WORD *)*((_QWORD *)v4 + 6);
      v29 = 2 * v11;
      v30 = v10 - 1;
      if (v30)
      {
        if ((_DWORD)v9 == 1)
        {
          v60 = 0;
          v61 = 2 * v12;
          do
          {
            *(_WORD *)((char *)v8 + v60) = *(_WORD *)((char *)v28 + v60);
            v60 += v61;
            --v30;
          }
          while (v30);
          v28 = (_WORD *)((char *)v28 + v60);
          v8 = (_WORD *)((char *)v8 + v60);
        }
        else
        {
          v31 = 0;
          v32 = 2 * v12;
          do
          {
            v33 = 0;
            v34 = v9 - 1;
            do
            {
              *(_WORD *)((char *)v8 + v33) = *(_WORD *)((char *)v28 + v33);
              v33 += v29;
              --v34;
            }
            while (v34);
            *(_WORD *)((char *)v8 + v33) = *(_WORD *)((char *)v28 + v33);
            v28 = (_WORD *)((char *)v28 + v32);
            v8 = (_WORD *)((char *)v8 + v32);
            ++v31;
          }
          while (v31 != v30);
        }
      }
      if ((_DWORD)v9 != 1)
      {
        v62 = 0;
        do
        {
          *(_WORD *)((char *)v8 + v62) = *(_WORD *)((char *)v28 + v62);
          v62 += v29;
          --v27;
        }
        while (v27);
        v28 = (_WORD *)((char *)v28 + v62);
        v8 = (_WORD *)((char *)v8 + v62);
      }
      LOWORD(v5) = *v28;
      *v8 = *v28;
    }
    return v5;
  }
  if ((_DWORD)v12 != (_DWORD)v9)
  {
    if (!(_DWORD)v9 || !v10)
      return v5;
    v35 = *((_QWORD *)v4 + 6);
    v36 = v10 - 1;
    if (v10 == 1)
    {
      v41 = *(_WORD **)(a1 + 48);
      v42 = *((_QWORD *)v4 + 6);
LABEL_82:
      if (v42
        || !sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
      {
        v63 = (v9 - 1) & 0x7FFFFFFFFFFFFFFFLL;
        if (v63 < 0xF || (unint64_t)v41 - v42 < 0x20)
        {
          v66 = v41;
          v67 = (__int16 *)v42;
        }
        else
        {
          v64 = v63 + 1;
          v65 = (v63 + 1) & 0xFFFFFFFFFFFFFFF0;
          v66 = &v41[v65];
          v67 = (__int16 *)(v42 + 2 * v65);
          v68 = (__int128 *)(v42 + 16);
          v69 = v41 + 8;
          v70 = v65;
          do
          {
            v5 = *(v68 - 1);
            v71 = *v68;
            *(v69 - 1) = v5;
            *v69 = v71;
            v68 += 2;
            v69 += 2;
            v70 -= 16;
          }
          while (v70);
          if (v64 == v65)
            return v5;
        }
        do
        {
          v72 = *v67++;
          LOWORD(v5) = v72;
          *v66++ = v72;
        }
        while (v67 != (__int16 *)(v42 + 2 * v9));
        return v5;
      }
    }
    else
    {
      v37 = 0;
      v38 = 2 * v12;
      v39 = (v9 - 1) & 0x7FFFFFFFFFFFFFFFLL;
      v40 = (v39 + 1) & 0xFFFFFFFFFFFFFFF0;
      v74 = v40;
      v41 = v8;
      v42 = *((_QWORD *)v4 + 6);
      while (v42
           || !sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
      {
        v43 = v41;
        v44 = (__int16 *)v42;
        if (v39 < 0xF)
          goto LABEL_98;
        v43 = v41;
        v44 = (__int16 *)v42;
        if ((unint64_t)v8 + v38 * v37 - v38 * v37 - v35 < 0x20)
          goto LABEL_98;
        v45 = 0;
        v43 = &v41[v74];
        v44 = (__int16 *)(v42 + v74 * 2);
        v46 = (v39 + 1) & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v47 = &v41[v45];
          v48 = *(_OWORD *)(v42 + v45 * 2 + 16);
          *v47 = *(_OWORD *)(v42 + v45 * 2);
          v47[1] = v48;
          v45 += 16;
          v46 -= 16;
        }
        while (v46);
        if (v39 + 1 != v40)
        {
LABEL_98:
          do
          {
            v49 = *v44++;
            *v43++ = v49;
          }
          while (v44 != (__int16 *)(v42 + 2 * v9));
        }
        v42 += v38;
        v41 = (_WORD *)((char *)v41 + v38);
        if ((_DWORD)++v37 == v36)
          goto LABEL_82;
      }
    }
    goto LABEL_93;
  }
  v13 = (v10 * v9);
  v14 = *((_QWORD *)v4 + 6);
  if ((_DWORD)v13)
    v15 = v14 == 0;
  else
    v15 = 0;
  if (!v15)
  {
    if (!(_DWORD)v13)
      return v5;
    goto LABEL_64;
  }
  if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
LABEL_93:
    abort();
  }
  v8 = *(_WORD **)(a1 + 48);
LABEL_64:
  v50 = (v13 - 1) & 0x7FFFFFFFFFFFFFFFLL;
  if (v50 < 0xF || (unint64_t)v8 - v14 < 0x20)
  {
    v53 = v8;
    v54 = (__int16 *)v14;
    do
    {
LABEL_71:
      v59 = *v54++;
      LOWORD(v5) = v59;
      *v53++ = v59;
    }
    while (v54 != (__int16 *)(v14 + 2 * v13));
    return v5;
  }
  v51 = v50 + 1;
  v52 = (v50 + 1) & 0xFFFFFFFFFFFFFFF0;
  v53 = &v8[v52];
  v54 = (__int16 *)(v14 + 2 * v52);
  v55 = (__int128 *)(v14 + 16);
  v56 = v8 + 8;
  v57 = v52;
  do
  {
    v5 = *(v55 - 1);
    v58 = *v55;
    *(v56 - 1) = v5;
    *v56 = v58;
    v55 += 2;
    v56 += 2;
    v57 -= 16;
  }
  while (v57);
  if (v51 != v52)
    goto LABEL_71;
  return v5;
}

void sub_2109B93A8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,int a25,uint64_t a26)
{
  __break(1u);
  JUMPOUT(0x2109B9418);
}

uint64_t sub_2109B9430(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

_QWORD *sub_2109B9438@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *result;

  if (a2 != 3
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4)|| ((v5 = *(_QWORD *)(a1 + 48), *(_DWORD *)(a1 + 12)) ? (v6 = *(_DWORD *)(a1 + 8) == 0) : (v6 = 1), (v7 = *(_QWORD *)(a1 + 8), v8 = *(_QWORD *)(a1 + 16), !v6) ? (v9 = v7) : (v9 = 0), HIDWORD(v9) * HIDWORD(v8) == -1&& sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4)))
  {
    abort();
  }
  result = (_QWORD *)operator new();
  *result = v5;
  result[1] = v9;
  result[2] = v8;
  *a3 = result;
  return result;
}

_QWORD *sub_2109B9524@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *result;

  if (a2 != 3
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4)|| ((v5 = *(_QWORD *)(a1 + 48), *(_DWORD *)(a1 + 12)) ? (v6 = *(_DWORD *)(a1 + 8) == 0) : (v6 = 1), (v7 = *(_QWORD *)(a1 + 8), v8 = *(_QWORD *)(a1 + 16), !v6) ? (v9 = v7) : (v9 = 0), HIDWORD(v9) * HIDWORD(v8) == -1&& sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4)))
  {
    abort();
  }
  result = (_QWORD *)operator new();
  *result = v5;
  result[1] = v9;
  result[2] = v8;
  *a3 = result;
  return result;
}

uint64_t sub_2109B9610(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 48) = 0;
  return a1;
}

void sub_2109B9640(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 48) = 0;
  JUMPOUT(0x212BCC6FCLL);
}

_UNKNOWN **sub_2109B9680()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A75DC0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A75DC0))
    return &off_253ED6E50;
  __cxa_guard_release(&qword_254A75DC0);
  return &off_253ED6E50;
}

uint64_t sub_2109B96D4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24CA80730;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 20) = *(_OWORD *)(a1 + 20);
  result = sub_2109CE394(v4 + 40, a1 + 40);
  *a2 = v4;
  return result;
}

void sub_2109B9744(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BCC6FC](v1, 0x1091C406A8758A4);
  _Unwind_Resume(a1);
}

void sub_2109B9768(uint64_t a1, void *lpsrc)
{
  char *v4;
  _OWORD *v5;
  unsigned int *v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  BOOL v14;
  __int128 v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  _DWORD *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  size_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  _BYTE v40[28];
  _QWORD v41[3];
  __int128 v42;

  v4 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24CA84C98, (const struct __class_type_info *)&unk_24CA807A0, 0);
  if (!v4)
  {
    (*(void (**)(_QWORD *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(v39, lpsrc, 4);
    v18 = *(_QWORD *)(v39[0] + 16);
    *(_OWORD *)v40 = *(_OWORD *)v39[0];
    *(_QWORD *)&v40[16] = v18;
    v39[0] = 0;
    MEMORY[0x212BCC6FC]();
    v19 = *(_QWORD *)(a1 + 48);
    if (*(_DWORD *)(a1 + 12))
      v20 = *(_DWORD *)(a1 + 8) == 0;
    else
      v20 = 1;
    v21 = *(_QWORD *)(a1 + 8);
    v22 = *(_QWORD *)(a1 + 16);
    if (v20)
      v23 = 0;
    else
      v23 = v21;
    if (HIDWORD(v23) * HIDWORD(v22) == -1
      && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
    {
      goto LABEL_59;
    }
    v39[0] = v19;
    v39[1] = v23;
    v39[2] = v22;
    sub_2109030FC((uint64_t)v40, (uint64_t)v39);
    return;
  }
  v5 = (_OWORD *)(a1 + 8);
  v6 = (unsigned int *)(v4 + 8);
  v7 = *(_DWORD **)(a1 + 48);
  if (!v7
    || (v8 = *v6, (_DWORD)v8 != *(_DWORD *)v5)
    || (v9 = *((_DWORD *)v4 + 3), v9 != *(_DWORD *)(a1 + 12))
    || (v10 = *((unsigned int *)v4 + 4), (_DWORD)v10 != *(_DWORD *)(a1 + 16))
    || (v11 = *((unsigned int *)v4 + 5), (_DWORD)v11 != *(_DWORD *)(a1 + 20)))
  {
    v15 = *(_OWORD *)v6;
    *(_OWORD *)&v40[12] = *(_OWORD *)(v4 + 20);
    *(_OWORD *)v40 = v15;
    sub_2109CE394((uint64_t)v41, (uint64_t)(v4 + 40));
    *v5 = *(_OWORD *)v40;
    *(_OWORD *)(a1 + 20) = *(_OWORD *)&v40[12];
    *(_OWORD *)(a1 + 64) = v42;
    *(_QWORD *)(a1 + 40) = v41[0];
    v16 = *(void **)(a1 + 48);
    if (v16)
      free(v16);
    v17 = v41[2];
    *(_QWORD *)(a1 + 48) = v41[1];
    *(_QWORD *)(a1 + 56) = v17;
    return;
  }
  if ((_DWORD)v10 != 1)
  {
    if (!(_DWORD)v8 || !v9)
      return;
    v24 = v8 - 1;
    v25 = (_DWORD *)*((_QWORD *)v4 + 6);
    v26 = v9 - 1;
    if (v26)
    {
      if (!v24)
      {
        v38 = 0;
        do
        {
          v7[v38] = v25[v38];
          v38 += v11;
          --v26;
        }
        while (v26);
        v25 = (_DWORD *)((char *)v25 + v38 * 4);
        v7 = (_DWORD *)((char *)v7 + v38 * 4);
LABEL_58:
        *v7 = *v25;
        return;
      }
      v27 = 0;
      v28 = 4 * v11;
      do
      {
        v29 = 0;
        v30 = v24;
        do
        {
          v7[v29] = v25[v29];
          v29 += v10;
          --v30;
        }
        while (v30);
        v7[v29] = v25[v29];
        v25 = (_DWORD *)((char *)v25 + v28);
        v7 = (_DWORD *)((char *)v7 + v28);
        ++v27;
      }
      while (v27 != v26);
    }
    if (v24)
    {
      v31 = 0;
      v32 = 4 * v10;
      do
      {
        *(_DWORD *)((char *)v7 + v31) = *(_DWORD *)((char *)v25 + v31);
        v31 += v32;
        --v24;
      }
      while (v24);
      v25 = (_DWORD *)((char *)v25 + v31);
      v7 = (_DWORD *)((char *)v7 + v31);
    }
    goto LABEL_58;
  }
  if ((_DWORD)v11 == (_DWORD)v8)
  {
    v12 = (v9 * v8);
    v13 = (const void *)*((_QWORD *)v4 + 6);
    if ((_DWORD)v12)
      v14 = v13 == 0;
    else
      v14 = 0;
    if (!v14)
    {
      if (!(_DWORD)v12)
        return;
LABEL_50:
      memmove(v7, v13, 4 * v12);
      return;
    }
    if (!sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
    {
      v7 = *(_DWORD **)(a1 + 48);
      goto LABEL_50;
    }
LABEL_59:
    abort();
  }
  if ((_DWORD)v8 && v9)
  {
    v33 = (char *)*((_QWORD *)v4 + 6);
    v34 = 4 * v8;
    v35 = v9 - 1;
    if (v9 != 1)
    {
      v36 = 0;
      v37 = 4 * v11;
      do
      {
        if (!&v33[v36]
          && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
        {
          goto LABEL_59;
        }
        memmove((char *)v7 + v36, &v33[v36], v34);
        v36 += v37;
        --v35;
      }
      while (v35);
      v33 += v36;
      v7 = (_DWORD *)((char *)v7 + v36);
    }
    if (v33
      || !sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
    {
      memmove(v7, v33, v34);
      return;
    }
    goto LABEL_59;
  }
}

uint64_t sub_2109B9B5C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

_QWORD *sub_2109B9B64@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *result;

  if (a2 != 4
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4)|| ((v5 = *(_QWORD *)(a1 + 48), *(_DWORD *)(a1 + 12)) ? (v6 = *(_DWORD *)(a1 + 8) == 0) : (v6 = 1), (v7 = *(_QWORD *)(a1 + 8), v8 = *(_QWORD *)(a1 + 16), !v6) ? (v9 = v7) : (v9 = 0), HIDWORD(v9) * HIDWORD(v8) == -1&& sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4)))
  {
    abort();
  }
  result = (_QWORD *)operator new();
  *result = v5;
  result[1] = v9;
  result[2] = v8;
  *a3 = result;
  return result;
}

_QWORD *sub_2109B9C50@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *result;

  if (a2 != 4
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4)|| ((v5 = *(_QWORD *)(a1 + 48), *(_DWORD *)(a1 + 12)) ? (v6 = *(_DWORD *)(a1 + 8) == 0) : (v6 = 1), (v7 = *(_QWORD *)(a1 + 8), v8 = *(_QWORD *)(a1 + 16), !v6) ? (v9 = v7) : (v9 = 0), HIDWORD(v9) * HIDWORD(v8) == -1&& sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4)))
  {
    abort();
  }
  result = (_QWORD *)operator new();
  *result = v5;
  result[1] = v9;
  result[2] = v8;
  *a3 = result;
  return result;
}

uint64_t sub_2109B9D3C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_2109B9D6C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  JUMPOUT(0x212BCC6FCLL);
}

_UNKNOWN **sub_2109B9DAC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A75DC0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A75DC0))
    return &off_253ED6E50;
  __cxa_guard_release(&qword_254A75DC0);
  return &off_253ED6E50;
}

uint64_t sub_2109B9E00@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24CA83460;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a1 + 56);
  result = sub_2109CE728(v4 + 64, a1 + 64);
  *a2 = v4;
  return result;
}

void sub_2109B9E80(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BCC6FC](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

void sub_2109B9EA4(uint64_t a1, void *lpsrc)
{
  char *v4;
  _BYTE *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  void *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  _BYTE *v33;
  _BYTE *v34;
  _BYTE *v35;
  _BYTE *v36;
  int v37;
  char *v38;
  size_t v39;
  int v41;
  int v42;
  BOOL v43;
  int v45;
  char *v46;
  int v47;
  int v48;
  char *v49;
  char *v50;
  size_t v51;
  unsigned __int8 v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, const char *, uint64_t, void *, _QWORD);
  unsigned __int8 v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  size_t v62;
  char *v63;
  BOOL v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  char *v70;
  int v71;
  uint64_t v72;
  size_t v73[2];
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  _QWORD v78[3];
  __int128 v79;
  uint64_t v80;
  __int128 v81;
  int v82;
  uint64_t v83;
  int v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;

  v87 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24CA84C98, (const struct __class_type_info *)&unk_24CA84618, 0);
  if (v4)
  {
    v5 = *(_BYTE **)(a1 + 72);
    if (!v5 || *(_QWORD *)(v4 + 12) != *(_QWORD *)(a1 + 12) || *((_QWORD *)v4 + 3) != *(_QWORD *)(a1 + 24))
    {
      v6 = *(_OWORD *)(v4 + 8);
      v7 = *(_OWORD *)(v4 + 24);
      v8 = *(_OWORD *)(v4 + 40);
      v77 = *((_QWORD *)v4 + 7);
      v75 = v7;
      v76 = v8;
      v74 = v6;
      sub_2109CE728((uint64_t)v78, (uint64_t)(v4 + 64));
      v9 = v75;
      *(_OWORD *)(a1 + 8) = v74;
      *(_OWORD *)(a1 + 24) = v9;
      *(_OWORD *)(a1 + 40) = v76;
      *(_QWORD *)(a1 + 56) = v77;
      *(_OWORD *)(a1 + 88) = v79;
      *(_QWORD *)(a1 + 104) = v80;
      *(_QWORD *)(a1 + 64) = v78[0];
      v10 = *(void **)(a1 + 72);
      if (v10)
        free(v10);
      v11 = v78[2];
      *(_QWORD *)(a1 + 72) = v78[1];
      *(_QWORD *)(a1 + 80) = v11;
      return;
    }
    if (*((_DWORD *)v4 + 5) != 1 || *(_DWORD *)(a1 + 20) != 1)
    {
      if (*((_DWORD *)v4 + 2))
      {
        v23 = *((_DWORD *)v4 + 3);
        if (v23)
        {
          v24 = *((_DWORD *)v4 + 4);
          if (v24)
          {
            v25 = v23 - 1;
            v26 = *((unsigned int *)v4 + 6);
            v27 = *(unsigned int *)(a1 + 24);
            v28 = (_BYTE *)*((_QWORD *)v4 + 9);
            v29 = v24 - 1;
            if (v29)
            {
              v30 = *(unsigned int *)(a1 + 28);
              v31 = *((unsigned int *)v4 + 7);
              if (v25)
              {
                v32 = 0;
                v33 = v28 + 1;
                v34 = v5 + 1;
                do
                {
                  v35 = v34;
                  v36 = v33;
                  v37 = v25;
                  do
                  {
                    *(v35 - 1) = *(v36 - 1);
                    *v35 = *v36;
                    v36 += v26;
                    v35 += v27;
                    --v37;
                  }
                  while (v37);
                  *(v35 - 1) = *(v36 - 1);
                  *v35 = *v36;
                  v28 += v31;
                  v5 += v30;
                  ++v32;
                  v33 += v31;
                  v34 += v30;
                }
                while (v32 != v29);
              }
              else
              {
                do
                {
                  *v5 = *v28;
                  v5[1] = v28[1];
                  v28 += v31;
                  v5 += v30;
                  --v29;
                }
                while (v29);
              }
            }
            for (; v25; --v25)
            {
              *v5 = *v28;
              v5[1] = v28[1];
              v28 += v26;
              v5 += v27;
            }
            *v5 = *v28;
            v5[1] = v28[1];
          }
        }
      }
      return;
    }
    v38 = (char *)*((unsigned int *)v4 + 6);
    v39 = *((unsigned int *)v4 + 2);
    v72 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v38 != (_DWORD)v72 || (_DWORD)v38 != (_DWORD)v39)
    {
      v42 = *((_DWORD *)v4 + 3);
      v41 = *((_DWORD *)v4 + 4);
      if ((_DWORD)v39)
        v43 = v42 == 0;
      else
        v43 = 1;
      if (v43 || v41 == 0)
        return;
      v45 = v42 - 1;
      v46 = (char *)*((_QWORD *)v4 + 9);
      v71 = v41 - 1;
      if (v41 == 1)
      {
LABEL_98:
        if (v45)
        {
          while (v46
               || !sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
          {
            memmove(v5, v46, v39);
            v46 = &v38[(_QWORD)v46];
            v5 += v72;
            if (!--v45)
              goto LABEL_104;
          }
        }
        else
        {
LABEL_104:
          if (v46
            || !sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
          {
            memmove(v5, v46, v39);
            return;
          }
        }
      }
      else
      {
        v68 = *(unsigned int *)(a1 + 28);
        v67 = *((unsigned int *)v4 + 7);
        if (v42 == 1)
        {
          while (v46
               || !sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
          {
            memmove(v5, v46, v39);
            v46 += v67;
            v5 += v68;
            if (!--v71)
              goto LABEL_98;
          }
        }
        else
        {
          v47 = 0;
          while (1)
          {
            v69 = v47;
            v48 = 0;
            v70 = v46;
            v49 = v5;
            do
            {
              while (v46)
              {
                memmove(v49, v46, v39);
                v46 = &v38[(_QWORD)v46];
                v49 += v72;
                if (++v48 == v45)
                  goto LABEL_50;
              }
              v50 = v38;
              v51 = v39;
              sub_2109EDAB0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4);
              v52 = atomic_load((unsigned __int8 *)&qword_254A75F38);
              if ((v52 & 1) == 0 && __cxa_guard_acquire(&qword_254A75F38))
              {
                __cxa_atexit((void (*)(void *))sub_2109EDF34, &qword_254A75F00, &dword_21089F000);
                __cxa_guard_release(&qword_254A75F38);
              }
              if (byte_254A75F28)
                v53 = byte_254A75F30 == 0;
              else
                v53 = 0;
              if (!v53)
              {
                v55 = qword_254A75F00;
                v54 = unk_254A75F08;
                while (v55 != v54)
                {
                  v57 = *(void (**)(uint64_t, const char *, uint64_t, void *, _QWORD))v55;
                  v56 = *(_QWORD *)(v55 + 8);
                  v55 += 16;
                  v57(v56, "ptr != nullptr || size == 0", 27, &unk_210A01421, 0);
                }
              }
              v58 = atomic_load((unsigned __int8 *)&qword_254A75F38);
              if ((v58 & 1) == 0 && __cxa_guard_acquire(&qword_254A75F38))
              {
                __cxa_atexit((void (*)(void *))sub_2109EDF34, &qword_254A75F00, &dword_21089F000);
                __cxa_guard_release(&qword_254A75F38);
              }
              if (!byte_254A75F28)
                goto LABEL_103;
              v39 = v51;
              qword_254A75F18(unk_254A75F20, "ptr != nullptr || size == 0", 27, &unk_210A01421, 0);
              memcpy(v49, 0, v51);
              v49 += v72;
              ++v48;
              v38 = v50;
              v46 = v50;
            }
            while (v48 != v45);
            v46 = v50;
            if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
            {
              break;
            }
LABEL_50:
            memmove(v49, v46, v39);
            v46 = &v70[v67];
            v5 += v68;
            v47 = v69 + 1;
            if (v69 + 1 == v71)
              goto LABEL_98;
          }
        }
      }
LABEL_103:
      abort();
    }
    v59 = *((unsigned int *)v4 + 7);
    v60 = *(unsigned int *)(a1 + 28);
    v61 = *((_DWORD *)v4 + 3);
    v62 = (v61 * (_DWORD)v38);
    if ((_DWORD)v59 == (_DWORD)v60 && (_DWORD)v59 == (_DWORD)v62)
    {
      v62 = (*((_DWORD *)v4 + 4) * v59);
      v63 = (char *)*((_QWORD *)v4 + 9);
      if ((_DWORD)v62)
        v64 = v63 == 0;
      else
        v64 = 0;
      if (!v64)
      {
LABEL_75:
        if (!(_DWORD)v62)
          return;
        goto LABEL_92;
      }
      if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
      {
        goto LABEL_103;
      }
      v5 = *(_BYTE **)(a1 + 72);
    }
    else
    {
      if (!(_DWORD)v38)
        return;
      if (!v61)
        return;
      v65 = *((_DWORD *)v4 + 4);
      if (!v65)
        return;
      v63 = (char *)*((_QWORD *)v4 + 9);
      v66 = v65 - 1;
      if (v65 != 1)
      {
        if (!(_DWORD)v62)
          return;
        while (v63
             || !sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
        {
          memmove(v5, v63, v62);
          v63 += v59;
          v5 += v60;
          if (!--v66)
            goto LABEL_89;
        }
        goto LABEL_103;
      }
LABEL_89:
      if (!(_DWORD)v62 || v63)
        goto LABEL_75;
      if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
      {
        goto LABEL_103;
      }
    }
LABEL_92:
    memmove(v5, v63, v62);
    return;
  }
  (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v81, lpsrc, 5);
  v13 = *(_OWORD *)(v81 + 16);
  v12 = *(_OWORD *)(v81 + 32);
  v74 = *(_OWORD *)v81;
  v75 = v13;
  v76 = v12;
  *(_QWORD *)&v81 = 0;
  MEMORY[0x212BCC6FC]();
  v14 = *(_QWORD *)(a1 + 72);
  if (*(_DWORD *)(a1 + 36))
    v15 = *(_DWORD *)(a1 + 32) == 0;
  else
    v15 = 1;
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  if (v15)
    v16 = 0;
  *(_QWORD *)((char *)&v81 + 4) = v16;
  v18 = v16;
  LODWORD(v81) = 2;
  v19 = v81;
  v20 = HIDWORD(v16);
  LODWORD(v81) = 1;
  *(_QWORD *)((char *)&v81 + 4) = v17;
  v21 = v81;
  if (HIDWORD(v17) * HIDWORD(v16) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
  *(_QWORD *)&v81 = v14;
  *((_QWORD *)&v81 + 1) = v19;
  v82 = v20;
  v83 = v21;
  v84 = HIDWORD(v17);
  v85 = v18;
  v86 = v17;
  v73[0] = (size_t)&v74;
  v73[1] = (size_t)&v81;
  sub_2108FEAD0(v73);
}

uint64_t sub_2109BA778(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_2109BA780@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 5
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 2;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_2109BA8F8@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 5
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 2;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_2109BAA70(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_2109BAAA0(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  JUMPOUT(0x212BCC6FCLL);
}

_UNKNOWN **sub_2109BAAE0()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A75DC0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A75DC0))
    return &off_253ED6E50;
  __cxa_guard_release(&qword_254A75DC0);
  return &off_253ED6E50;
}

uint64_t sub_2109BAB34@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24CA834E0;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a1 + 56);
  result = sub_2109CF018(v4 + 64, a1 + 64);
  *a2 = v4;
  return result;
}

void sub_2109BABB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BCC6FC](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

void sub_2109BABD8(uint64_t a1, void *lpsrc)
{
  char *v4;
  _WORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  void *v10;
  uint64_t v11;
  _WORD *v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  _WORD *v18;
  BOOL v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BOOL4 v24;
  unint64_t v25;
  uint64_t v26;
  int v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  int v32;
  int v33;
  _WORD *v34;
  _WORD *v35;
  _WORD *v36;
  _WORD *v37;
  int v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  char *v43;
  char *v44;
  _WORD *v45;
  unsigned __int8 v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int8 v50;
  _BOOL4 v51;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  _WORD *v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  _WORD *v63;
  _WORD *v64;
  _WORD *v65;
  _WORD *v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v73;
  int v74;
  int v75;
  char *v76;
  size_t v77;
  int v78;
  unsigned __int8 *v79;
  char *v80;
  int v81;
  char *v82;
  uint64_t v83;
  size_t v84;
  unsigned __int8 *v85;
  unsigned __int8 v86;
  BOOL v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void (*v91)(uint64_t, const char *, uint64_t, void *, _QWORD);
  unsigned __int8 v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  const void *v98;
  BOOL v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  char *v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  char *v111;
  _BOOL4 v112;
  _BOOL4 v113;
  void *v114;
  size_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _WORD *v119;
  int v120;
  int v121;
  int v122;
  char *v123;
  int v124;
  int64_t __src;
  char *__srca;
  uint64_t __len;
  size_t __lena;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  uint64_t v132;
  _QWORD v133[3];
  __int128 v134;
  uint64_t v135;
  uint64_t v136;

  v136 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24CA84C98, (const struct __class_type_info *)&unk_24CA84630, 0);
  if (v4)
  {
    v5 = *(_WORD **)(a1 + 72);
    if (!v5 || *(_QWORD *)(v4 + 12) != *(_QWORD *)(a1 + 12) || *((_QWORD *)v4 + 3) != *(_QWORD *)(a1 + 24))
    {
      v6 = *(_OWORD *)(v4 + 8);
      v7 = *(_OWORD *)(v4 + 24);
      v8 = *(_OWORD *)(v4 + 40);
      v132 = *((_QWORD *)v4 + 7);
      v130 = v7;
      v131 = v8;
      v129 = v6;
      sub_2109CF018((uint64_t)v133, (uint64_t)(v4 + 64));
      v9 = v130;
      *(_OWORD *)(a1 + 8) = v129;
      *(_OWORD *)(a1 + 24) = v9;
      *(_OWORD *)(a1 + 40) = v131;
      *(_QWORD *)(a1 + 56) = v132;
      *(_OWORD *)(a1 + 88) = v134;
      *(_QWORD *)(a1 + 104) = v135;
      *(_QWORD *)(a1 + 64) = v133[0];
      v10 = *(void **)(a1 + 72);
      if (v10)
        free(v10);
      v11 = v133[2];
      *(_QWORD *)(a1 + 72) = v133[1];
      *(_QWORD *)(a1 + 80) = v11;
      return;
    }
    if (*((_DWORD *)v4 + 5) != 1 || *(_DWORD *)(a1 + 20) != 1)
    {
      if (!*((_DWORD *)v4 + 2))
        return;
      v53 = *((_DWORD *)v4 + 3);
      if (!v53)
        return;
      v54 = *((_DWORD *)v4 + 4);
      if (!v54)
        return;
      v55 = v53 - 1;
      v56 = *((unsigned int *)v4 + 6);
      v57 = *(unsigned int *)(a1 + 24);
      v58 = (_WORD *)*((_QWORD *)v4 + 9);
      v59 = v54 - 1;
      if (v59)
      {
        v60 = *(unsigned int *)(a1 + 28);
        v61 = *((unsigned int *)v4 + 7);
        if (!v55)
        {
          do
          {
            *v5 = *v58;
            v5[1] = v58[1];
            v58 += v61;
            v5 += v60;
            --v59;
          }
          while (v59);
LABEL_171:
          *v5 = *v58;
          v5[1] = v58[1];
          return;
        }
        v62 = 0;
        v63 = v58 + 1;
        v64 = v5 + 1;
        do
        {
          v65 = v64;
          v66 = v63;
          v67 = v55;
          do
          {
            *(v65 - 1) = *(v66 - 1);
            *v65 = *v66;
            v66 += v56;
            v65 += v57;
            --v67;
          }
          while (v67);
          *(v65 - 1) = *(v66 - 1);
          *v65 = *v66;
          v58 += v61;
          v5 += v60;
          ++v62;
          v63 += v61;
          v64 += v60;
        }
        while (v62 != v59);
      }
      for (; v55; --v55)
      {
        *v5 = *v58;
        v5[1] = v58[1];
        v58 += v56;
        v5 += v57;
      }
      goto LABEL_171;
    }
    v69 = *((unsigned int *)v4 + 6);
    v70 = *(unsigned int *)(a1 + 24);
    v71 = *((unsigned int *)v4 + 2);
    if ((_DWORD)v69 == (_DWORD)v70 && (_DWORD)v69 == (_DWORD)v71)
    {
      v93 = *((unsigned int *)v4 + 7);
      v94 = *(unsigned int *)(a1 + 28);
      v95 = *((_DWORD *)v4 + 3);
      v96 = (v95 * v69);
      if ((_DWORD)v93 == (_DWORD)v94 && (_DWORD)v93 == (_DWORD)v96)
      {
        v97 = (*((_DWORD *)v4 + 4) * v93);
        v98 = (const void *)*((_QWORD *)v4 + 9);
        if ((_DWORD)v97)
          v99 = v98 == 0;
        else
          v99 = 0;
        if (v99)
        {
          if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
          {
            goto LABEL_186;
          }
          v5 = *(_WORD **)(a1 + 72);
        }
        else if (!(_DWORD)v97)
        {
          return;
        }
        memmove(v5, v98, 2 * v97);
        return;
      }
      if (!(_DWORD)v69)
        return;
      if (!v95)
        return;
      v102 = *((_DWORD *)v4 + 4);
      if (!v102)
        return;
      v103 = (char *)*((_QWORD *)v4 + 9);
      v104 = v102 - 1;
      if (v102 != 1)
      {
        if (!(_DWORD)v96)
          return;
        v105 = 2 * v93;
        v106 = 2 * v94;
        while (v103
             || !sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
        {
          memmove(v5, v103, 2 * v96);
          v103 += v105;
          v5 = (_WORD *)((char *)v5 + v106);
          if (!--v104)
            goto LABEL_172;
        }
LABEL_186:
        abort();
      }
LABEL_172:
      if (!(_DWORD)v96 || v103)
      {
        if (!(_DWORD)v96)
          return;
      }
      else if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
      {
        goto LABEL_186;
      }
      v114 = v5;
      v76 = v103;
      v115 = 2 * v96;
    }
    else
    {
      if (!(_DWORD)v71)
        return;
      v73 = *((_DWORD *)v4 + 3);
      if (!v73)
        return;
      v74 = *((_DWORD *)v4 + 4);
      if (!v74)
        return;
      v75 = v73 - 1;
      v76 = (char *)*((_QWORD *)v4 + 9);
      v77 = 2 * v71;
      v124 = v74 - 1;
      __lena = *((unsigned int *)v4 + 6);
      if (v74 != 1)
      {
        if (v73 == 1)
        {
          v107 = 2 * *((unsigned int *)v4 + 7);
          v108 = 2 * *(unsigned int *)(a1 + 28);
          while (1)
          {
            v109 = v76;
            if (!v76
              && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
            {
              break;
            }
            memmove(v5, v109, v77);
            v76 = &v109[v107];
            v5 = (_WORD *)((char *)v5 + v108);
            if (!--v124)
              goto LABEL_181;
          }
        }
        else
        {
          v78 = 0;
          v79 = (unsigned __int8 *)&qword_254A75F38;
          __srca = (char *)(2 * v69);
          v116 = *((unsigned int *)v4 + 7);
          v118 = *(unsigned int *)(a1 + 28);
          while (1)
          {
            v121 = v78;
            v81 = 0;
            v123 = v76;
            v80 = v76;
            v119 = v5;
            v82 = (char *)v5;
            do
            {
              while (v80)
              {
                memmove(v82, v80, v77);
                v80 += 2 * __lena;
                v82 += 2 * v70;
                if (++v81 == v75)
                  goto LABEL_106;
              }
              v83 = v70;
              v84 = v77;
              sub_2109EDAB0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4);
              v85 = v79;
              v86 = atomic_load(v79);
              if ((v86 & 1) == 0 && __cxa_guard_acquire((__guard *)v79))
              {
                __cxa_atexit((void (*)(void *))sub_2109EDF34, &qword_254A75F00, &dword_21089F000);
                __cxa_guard_release((__guard *)v79);
              }
              if (byte_254A75F28)
                v87 = byte_254A75F30 == 0;
              else
                v87 = 0;
              if (!v87)
              {
                v88 = qword_254A75F00;
                v89 = unk_254A75F08;
                while (v88 != v89)
                {
                  v91 = *(void (**)(uint64_t, const char *, uint64_t, void *, _QWORD))v88;
                  v90 = *(_QWORD *)(v88 + 8);
                  v88 += 16;
                  v91(v90, "ptr != nullptr || size == 0", 27, &unk_210A01421, 0);
                }
              }
              v79 = v85;
              v92 = atomic_load(v85);
              if ((v92 & 1) == 0 && __cxa_guard_acquire((__guard *)v85))
              {
                __cxa_atexit((void (*)(void *))sub_2109EDF34, &qword_254A75F00, &dword_21089F000);
                __cxa_guard_release((__guard *)v85);
              }
              if (!byte_254A75F28)
                goto LABEL_186;
              v77 = v84;
              qword_254A75F18(unk_254A75F20, "ptr != nullptr || size == 0", 27, &unk_210A01421, 0);
              memcpy(v82, 0, v84);
              v70 = v83;
              v82 += 2 * v83;
              ++v81;
              v80 = __srca;
            }
            while (v81 != v75);
            v80 = __srca;
            if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
            {
              break;
            }
LABEL_106:
            memmove(v82, v80, v77);
            v76 = &v123[2 * v116];
            v5 = &v119[v118];
            v78 = v121 + 1;
            if (v121 + 1 == v124)
              goto LABEL_181;
          }
        }
        goto LABEL_186;
      }
LABEL_181:
      if (v75)
      {
        v110 = 2 * v70;
        do
        {
          if (!v76)
          {
            v112 = sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4);
            v76 = 0;
            if (v112)
              goto LABEL_186;
          }
          v111 = v76;
          memmove(v5, v76, v77);
          v76 = &v111[2 * __lena];
          v5 = (_WORD *)((char *)v5 + v110);
        }
        while (--v75);
      }
      if (!v76)
      {
        v113 = sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4);
        v76 = 0;
        if (v113)
          goto LABEL_186;
      }
      v114 = v5;
      v115 = v77;
    }
    memmove(v114, v76, v115);
    return;
  }
  (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v129, lpsrc, 6);
  v12 = *(_WORD **)v129;
  v14 = *(unsigned int *)(v129 + 8);
  v13 = *(_DWORD *)(v129 + 12);
  v15 = *(_DWORD *)(v129 + 16);
  v16 = *(_DWORD *)(v129 + 20);
  v17 = *(unsigned int *)(v129 + 28);
  __src = *(unsigned int *)(v129 + 24);
  *(_QWORD *)&v129 = 0;
  MEMORY[0x212BCC6FC]();
  v18 = *(_WORD **)(a1 + 72);
  if (*(_DWORD *)(a1 + 36))
    v19 = *(_DWORD *)(a1 + 32) == 0;
  else
    v19 = 1;
  v20 = *(_QWORD *)(a1 + 32);
  if (v19)
    HIDWORD(v20) = 0;
  LODWORD(v129) = 1;
  *(_QWORD *)((char *)&v129 + 4) = *(_QWORD *)(a1 + 40);
  v21 = v129;
  v22 = HIDWORD(*(_QWORD *)((char *)&v129 + 4));
  if (DWORD2(v129) * HIDWORD(v20) == -1)
  {
    v23 = HIDWORD(*(_QWORD *)((char *)&v129 + 4));
    v24 = sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4);
    v22 = v23;
    if (v24)
      abort();
  }
  if (v16 != 1 || v21 != 1)
  {
    if (!(_DWORD)v14 || !v13 || !v15)
      return;
    v30 = v13 - 1;
    v31 = HIDWORD(v21);
    v32 = v15 - 1;
    if (v15 != 1)
    {
      if (v13 == 1)
      {
        do
        {
          *v18 = *v12;
          v18[1] = v12[1];
          v12 += v17;
          v18 += v22;
          --v32;
        }
        while (v32);
LABEL_128:
        *v18 = *v12;
        v18[1] = v12[1];
        return;
      }
      v33 = 0;
      v34 = v12 + 1;
      v35 = v18 + 1;
      do
      {
        v36 = v35;
        v37 = v34;
        v38 = v13 - 1;
        do
        {
          *(v36 - 1) = *(v37 - 1);
          *v36 = *v37;
          v37 += __src;
          v36 += v31;
          --v38;
        }
        while (v38);
        *(v36 - 1) = *(v37 - 1);
        *v36 = *v37;
        v12 += v17;
        v18 += v22;
        ++v33;
        v34 += v17;
        v35 += v22;
      }
      while (v33 != v32);
    }
    if (v13 != 1)
    {
      v39 = 2 * v31;
      do
      {
        *v18 = *v12;
        v18[1] = v12[1];
        v12 += __src;
        v18 = (_WORD *)((char *)v18 + v39);
        --v30;
      }
      while (v30);
    }
    goto LABEL_128;
  }
  v25 = HIDWORD(v21);
  if ((_DWORD)__src == (_DWORD)v14 && (_DWORD)__src == HIDWORD(v21))
  {
    v26 = (v13 * v14);
    if ((_DWORD)v17 == (_DWORD)v26 && (_DWORD)v17 == (_DWORD)v22)
    {
      v68 = (v17 * v15);
      if (v12 || !(_DWORD)v68)
      {
        if (!(_DWORD)v68)
          return;
      }
      else if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
      {
        abort();
      }
      memmove(v18, v12, 2 * v68);
      return;
    }
    if ((_DWORD)v14 && v13 && v15)
    {
      v28 = v15 - 1;
      if (v28)
      {
        if (!(_DWORD)v26)
          return;
        v29 = 2 * v22;
        do
        {
          if (!v12
            && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
          {
            abort();
          }
          memmove(v18, v12, 2 * v26);
          v12 += v17;
          v18 = (_WORD *)((char *)v18 + v29);
          --v28;
        }
        while (v28);
      }
      if (!(_DWORD)v26 || v12)
      {
        if (!(_DWORD)v26)
          return;
      }
      else if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
      {
        abort();
      }
      memmove(v18, v12, 2 * v26);
    }
  }
  else if ((_DWORD)v14 && v13 && v15)
  {
    v40 = v13 - 1;
    __len = 2 * v14;
    v122 = v15 - 1;
    if (v15 != 1)
    {
      v117 = v22;
      if (v13 == 1)
      {
        v100 = 2 * v22;
        while (v12
             || !sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
        {
          memmove(v18, v12, __len);
          v12 += v17;
          v18 = (_WORD *)((char *)v18 + v100);
          if (!--v122)
            goto LABEL_146;
        }
      }
      else
      {
        v41 = 0;
        while (1)
        {
          v120 = v41;
          v42 = 0;
          v43 = (char *)v12;
          v44 = (char *)v18;
          do
          {
            while (v43)
            {
              memmove(v44, v43, __len);
              v43 += 2 * __src;
              v44 += 2 * v25;
              if (++v42 == v40)
                goto LABEL_53;
            }
            v45 = v18;
            sub_2109EDAB0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4);
            v46 = atomic_load((unsigned __int8 *)&qword_254A75F38);
            if ((v46 & 1) == 0 && __cxa_guard_acquire(&qword_254A75F38))
            {
              __cxa_atexit((void (*)(void *))sub_2109EDF34, &qword_254A75F00, &dword_21089F000);
              __cxa_guard_release(&qword_254A75F38);
            }
            if (byte_254A75F28)
              v47 = byte_254A75F30 == 0;
            else
              v47 = 0;
            if (!v47)
            {
              v48 = qword_254A75F00;
              v49 = unk_254A75F08;
              while (v48 != v49)
              {
                (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v48)(*(_QWORD *)(v48 + 8), "ptr != nullptr || size == 0", 27, &unk_210A01421, 0);
                v48 += 16;
              }
            }
            v50 = atomic_load((unsigned __int8 *)&qword_254A75F38);
            if ((v50 & 1) == 0 && __cxa_guard_acquire(&qword_254A75F38))
            {
              __cxa_atexit((void (*)(void *))sub_2109EDF34, &qword_254A75F00, &dword_21089F000);
              __cxa_guard_release(&qword_254A75F38);
            }
            if (!byte_254A75F28)
              abort();
            qword_254A75F18(unk_254A75F20, "ptr != nullptr || size == 0", 27, &unk_210A01421, 0);
            memcpy(v44, 0, __len);
            v44 += 2 * v25;
            ++v42;
            v43 = (char *)(2 * __src);
            v18 = v45;
          }
          while (v42 != v40);
          v51 = sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4);
          v43 = (char *)(2 * __src);
          v18 = v45;
          if (v51)
            break;
LABEL_53:
          memmove(v44, v43, __len);
          v12 += v17;
          v18 += v117;
          v41 = v120 + 1;
          if (v120 + 1 == v122)
            goto LABEL_146;
        }
      }
      abort();
    }
LABEL_146:
    if (v40)
    {
      v101 = 2 * v25;
      do
      {
        if (!v12
          && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
        {
          abort();
        }
        memmove(v18, v12, __len);
        v12 += __src;
        v18 = (_WORD *)((char *)v18 + v101);
        --v40;
      }
      while (v40);
    }
    if (!v12
      && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
    memmove(v18, v12, __len);
  }
}

uint64_t sub_2109BBB24(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_2109BBB2C@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 6
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 2;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_2109BBCA4@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 6
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 2;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_2109BBE1C(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1)
      goto LABEL_14;
    if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
    v2 = *(void **)(a1 + 72);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

uint64_t sub_2109BBEC0(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1)
      goto LABEL_14;
    if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
    v2 = *(void **)(a1 + 72);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_2109BBF64(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1)
      goto LABEL_14;
    if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
    v2 = *(void **)(a1 + 72);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 72) = 0;
  JUMPOUT(0x212BCC6FCLL);
}

_UNKNOWN **sub_2109BC018()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A75DC0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A75DC0))
    return &off_253ED6E50;
  __cxa_guard_release(&qword_254A75DC0);
  return &off_253ED6E50;
}

uint64_t sub_2109BC06C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24CA83560;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a1 + 56);
  result = sub_2109CFA20(v4 + 64, a1 + 64);
  *a2 = v4;
  return result;
}

void sub_2109BC0EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BCC6FC](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

__int16 sub_2109BC110@<H0>(uint64_t a1@<X0>, void *lpsrc@<X1>)
{
  char *v4;
  __int128 v5;
  _WORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  void *v11;
  BOOL v12;
  int v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  BOOL v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v27;
  int v28;
  int v29;
  _WORD *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  _WORD *v37;
  _WORD *v38;
  _WORD *v39;
  _WORD *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v46;
  int v47;
  BOOL v48;
  int v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  _WORD *v57;
  _WORD *v58;
  uint64_t v59;
  uint64_t v60;
  _BOOL4 v61;
  _WORD *v62;
  __int16 *v63;
  uint64_t v64;
  unint64_t v65;
  _OWORD *v66;
  __int128 v67;
  __int16 v68;
  _BOOL4 v69;
  _WORD *v70;
  __int16 *v71;
  __int128 *v72;
  _OWORD *v73;
  unint64_t v74;
  __int128 v75;
  __int16 v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  BOOL v83;
  int v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  _WORD *v92;
  uint64_t v93;
  uint64_t v94;
  _BOOL4 v95;
  _WORD *v96;
  __int16 *v97;
  uint64_t v98;
  unint64_t v99;
  _OWORD *v100;
  __int128 v101;
  __int16 v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  _WORD *v106;
  __int16 *v107;
  __int128 *v108;
  _OWORD *v109;
  unint64_t v110;
  __int128 v111;
  uint64_t v112;
  uint64_t v113;
  __int16 v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  _WORD *v120;
  uint64_t v121;
  _BOOL4 v122;
  _WORD *v123;
  __int16 *v124;
  uint64_t v125;
  unint64_t v126;
  _OWORD *v127;
  __int128 v128;
  __int16 v129;
  _BOOL4 v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  _WORD *v134;
  __int16 *v135;
  __int128 *v136;
  _OWORD *v137;
  unint64_t v138;
  __int128 v139;
  __int16 v140;
  _BOOL4 v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  _WORD *v145;
  __int16 *v146;
  __int128 *v147;
  _OWORD *v148;
  unint64_t v149;
  __int128 v150;
  __int16 v151;
  uint64_t v153;
  uint64_t v154;
  _WORD *v155;
  _WORD *v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165[2];
  __int128 v166;
  __int128 v167;
  __int128 v168;
  uint64_t v169;
  _QWORD v170[3];
  __int128 v171;
  uint64_t v172;
  __int128 v173;
  int v174;
  uint64_t v175;
  int v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;

  v179 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24CA84C98, (const struct __class_type_info *)&unk_24CA84648, 0);
  if (v4)
  {
    v6 = *(_WORD **)(a1 + 72);
    if (!v6 || *(_QWORD *)(v4 + 12) != *(_QWORD *)(a1 + 12) || *((_QWORD *)v4 + 3) != *(_QWORD *)(a1 + 24))
    {
      v7 = *(_OWORD *)(v4 + 8);
      v8 = *(_OWORD *)(v4 + 24);
      v9 = *(_OWORD *)(v4 + 40);
      v169 = *((_QWORD *)v4 + 7);
      v167 = v8;
      v168 = v9;
      v166 = v7;
      sub_2109CFA20((uint64_t)v170, (uint64_t)(v4 + 64));
      v10 = v167;
      *(_OWORD *)(a1 + 8) = v166;
      *(_OWORD *)(a1 + 24) = v10;
      *(_OWORD *)(a1 + 40) = v168;
      *(_QWORD *)(a1 + 56) = v169;
      LOWORD(v5) = v171;
      *(_OWORD *)(a1 + 88) = v171;
      *(_QWORD *)(a1 + 104) = v172;
      v11 = *(void **)(a1 + 72);
      if (v11)
      {
        if (*(_DWORD *)(a1 + 96))
          v12 = *(_DWORD *)(a1 + 92) == 0;
        else
          v12 = 1;
        if (v12 || *(_DWORD *)(a1 + 88) == 0)
          v14 = 0;
        else
          v14 = *(_DWORD *)(a1 + 96);
        if (v14 * (*(_DWORD *)(a1 + 108) >> 1) == -1)
        {
          if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
          {
            abort();
          }
          v11 = *(void **)(a1 + 72);
          *(_QWORD *)(a1 + 64) = v170[0];
          if (!v11)
            goto LABEL_29;
        }
        else
        {
          *(_QWORD *)(a1 + 64) = v170[0];
        }
        free(v11);
      }
      else
      {
        *(_QWORD *)(a1 + 64) = v170[0];
      }
LABEL_29:
      v25 = v170[2];
      *(_QWORD *)(a1 + 72) = v170[1];
      *(_QWORD *)(a1 + 80) = v25;
      return v5;
    }
    if (*((_DWORD *)v4 + 5) != 1 || *(_DWORD *)(a1 + 20) != 1)
    {
      if (*((_DWORD *)v4 + 2))
      {
        v27 = *((_DWORD *)v4 + 3);
        if (v27)
        {
          v28 = *((_DWORD *)v4 + 4);
          if (v28)
          {
            v29 = v27 - 1;
            v30 = (_WORD *)*((_QWORD *)v4 + 9);
            v31 = 2 * *((unsigned int *)v4 + 6);
            v32 = 2 * *(unsigned int *)(a1 + 24);
            v33 = v28 - 1;
            if (v33)
            {
              v34 = *(unsigned int *)(a1 + 28);
              v35 = *((unsigned int *)v4 + 7);
              if (v29)
              {
                v36 = 0;
                v37 = v30 + 1;
                v38 = v6 + 1;
                do
                {
                  v39 = v38;
                  v40 = v37;
                  v41 = v29;
                  do
                  {
                    *(v39 - 1) = *(v40 - 1);
                    *v39 = *v40;
                    v40 = (_WORD *)((char *)v40 + v31);
                    v39 = (_WORD *)((char *)v39 + v32);
                    --v41;
                  }
                  while (v41);
                  *(v39 - 1) = *(v40 - 1);
                  *v39 = *v40;
                  v30 += v35;
                  v6 += v34;
                  ++v36;
                  v37 += v35;
                  v38 += v34;
                }
                while (v36 != v33);
              }
              else
              {
                v112 = 2 * v35;
                v113 = 2 * v34;
                do
                {
                  *v6 = *v30;
                  v6[1] = v30[1];
                  v30 = (_WORD *)((char *)v30 + v112);
                  v6 = (_WORD *)((char *)v6 + v113);
                  --v33;
                }
                while (v33);
              }
            }
            for (; v29; --v29)
            {
              *v6 = *v30;
              v6[1] = v30[1];
              v30 = (_WORD *)((char *)v30 + v31);
              v6 = (_WORD *)((char *)v6 + v32);
            }
            *v6 = *v30;
            LOWORD(v5) = v30[1];
            v6[1] = v5;
          }
        }
      }
      return v5;
    }
    v42 = *((unsigned int *)v4 + 6);
    v43 = *(unsigned int *)(a1 + 24);
    v44 = *((unsigned int *)v4 + 2);
    if ((_DWORD)v42 != (_DWORD)v43 || (_DWORD)v42 != (_DWORD)v44)
    {
      v47 = *((_DWORD *)v4 + 3);
      v46 = *((_DWORD *)v4 + 4);
      if ((_DWORD)v44)
        v48 = v47 == 0;
      else
        v48 = 1;
      if (v48 || v46 == 0)
        return v5;
      v50 = v47 - 1;
      v51 = *((_QWORD *)v4 + 9);
      v52 = 2 * v43;
      v157 = v46 - 1;
      v162 = *((unsigned int *)v4 + 2);
      v161 = v47 - 1;
      v153 = *((unsigned int *)v4 + 6);
      if (v46 == 1)
      {
        v57 = *(_WORD **)(a1 + 72);
LABEL_123:
        if (v50)
        {
          v115 = 0;
          v116 = 2 * v153;
          v117 = (v44 - 1) & 0x7FFFFFFFFFFFFFFFLL;
          v118 = (v117 + 1) & 0xFFFFFFFFFFFFFFF0;
          v119 = v118;
          v120 = v57;
          v121 = v51;
          while (1)
          {
            if (!v51)
            {
              v122 = sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4);
              v50 = v161;
              v44 = v162;
              if (v122)
                goto LABEL_151;
            }
            v123 = v120;
            v124 = (__int16 *)v51;
            if (v117 < 0xF)
              goto LABEL_167;
            v123 = v120;
            v124 = (__int16 *)v51;
            if ((unint64_t)v57 + v52 * v115 - v121 - v116 * v115 < 0x20)
              goto LABEL_167;
            v125 = 0;
            v123 = &v120[v119];
            v124 = (__int16 *)(v51 + v119 * 2);
            v126 = (v117 + 1) & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v127 = &v120[v125];
              v128 = *(_OWORD *)(v51 + v125 * 2 + 16);
              *v127 = *(_OWORD *)(v51 + v125 * 2);
              v127[1] = v128;
              v125 += 16;
              v126 -= 16;
            }
            while (v126);
            if (v117 + 1 != v118)
            {
LABEL_167:
              do
              {
                v129 = *v124++;
                *v123++ = v129;
              }
              while (v124 != (__int16 *)(v51 + 2 * v44));
            }
            v51 += v116;
            v120 = (_WORD *)((char *)v120 + v52);
            if ((_DWORD)++v115 == v50)
              goto LABEL_136;
          }
        }
        v120 = v57;
LABEL_136:
        if (!v51)
        {
          v130 = sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4);
          v44 = v162;
          if (v130)
LABEL_151:
            abort();
        }
        v131 = (v44 - 1) & 0x7FFFFFFFFFFFFFFFLL;
        if (v131 < 0xF || (unint64_t)v120 - v51 < 0x20)
        {
          v134 = v120;
          v135 = (__int16 *)v51;
        }
        else
        {
          v132 = v131 + 1;
          v133 = (v131 + 1) & 0xFFFFFFFFFFFFFFF0;
          v134 = &v120[v133];
          v135 = (__int16 *)(v51 + 2 * v133);
          v136 = (__int128 *)(v51 + 16);
          v137 = v120 + 8;
          v138 = v133;
          do
          {
            v5 = *(v136 - 1);
            v139 = *v136;
            *(v137 - 1) = v5;
            *v137 = v139;
            v136 += 2;
            v137 += 2;
            v138 -= 16;
          }
          while (v138);
          if (v132 == v133)
            return v5;
        }
        do
        {
          v140 = *v135++;
          LOWORD(v5) = v140;
          *v134++ = v140;
        }
        while (v135 != (__int16 *)(v51 + 2 * v44));
        return v5;
      }
      v160 = 0;
      v53 = (v44 - 1) & 0x7FFFFFFFFFFFFFFFLL;
      v158 = 2 * *((unsigned int *)v4 + 7);
      v159 = 2 * *(unsigned int *)(a1 + 28);
      v54 = 2 * v42;
      v164 = v53 + 1;
      v55 = (v53 + 1) & 0xFFFFFFFFFFFFFFF0;
      v56 = v55;
      v154 = *((_QWORD *)v4 + 9);
      v155 = v6;
      v57 = v6;
      while (1)
      {
        v58 = v57;
        v59 = v51;
        if (v50)
        {
          v60 = 0;
          v58 = v57;
          v59 = v51;
          do
          {
            if (!v59)
            {
              v61 = sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4);
              v50 = v161;
              v44 = v162;
              if (v61)
                goto LABEL_151;
            }
            v62 = v58;
            v63 = (__int16 *)v59;
            if (v53 < 0xF)
              goto LABEL_168;
            v62 = v58;
            v63 = (__int16 *)v59;
            if ((unint64_t)v155 + v159 * v160 + v52 * v60 - v154 - v158 * v160 - v54 * v60 < 0x20)
              goto LABEL_168;
            v64 = 0;
            v62 = &v58[v56];
            v63 = (__int16 *)(v59 + v56 * 2);
            v65 = (v53 + 1) & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v66 = &v58[v64];
              v67 = *(_OWORD *)(v59 + v64 * 2 + 16);
              *v66 = *(_OWORD *)(v59 + v64 * 2);
              v66[1] = v67;
              v64 += 16;
              v65 -= 16;
            }
            while (v65);
            if (v164 != v55)
            {
LABEL_168:
              do
              {
                v68 = *v63++;
                *v62++ = v68;
              }
              while (v63 != (__int16 *)(v59 + 2 * v44));
            }
            v59 += v54;
            v58 = (_WORD *)((char *)v58 + v52);
          }
          while ((_DWORD)++v60 != v50);
        }
        if (!v59)
        {
          v69 = sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4);
          v50 = v161;
          v44 = v162;
          if (v69)
            goto LABEL_151;
        }
        if (v53 < 0xF || (unint64_t)v58 - v59 < 0x20)
        {
          v70 = v58;
          v71 = (__int16 *)v59;
        }
        else
        {
          v70 = &v58[v56];
          v71 = (__int16 *)(v59 + v56 * 2);
          v72 = (__int128 *)(v59 + 16);
          v73 = v58 + 8;
          v74 = (v53 + 1) & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v75 = *v72;
            *(v73 - 1) = *(v72 - 1);
            *v73 = v75;
            v72 += 2;
            v73 += 2;
            v74 -= 16;
          }
          while (v74);
          if (v164 == v55)
            goto LABEL_58;
        }
        do
        {
          v76 = *v71++;
          *v70++ = v76;
        }
        while (v71 != (__int16 *)(v59 + 2 * v44));
LABEL_58:
        v51 += v158;
        v57 = (_WORD *)((char *)v57 + v159);
        if ((_DWORD)++v160 == v157)
          goto LABEL_123;
      }
    }
    v77 = *((unsigned int *)v4 + 7);
    v78 = *(unsigned int *)(a1 + 28);
    v79 = *((_DWORD *)v4 + 3);
    v80 = (v79 * v42);
    if ((_DWORD)v77 == (_DWORD)v78 && (_DWORD)v77 == (_DWORD)v80)
    {
      v81 = (*((_DWORD *)v4 + 4) * v77);
      v82 = *((_QWORD *)v4 + 9);
      if ((_DWORD)v81)
        v83 = v82 == 0;
      else
        v83 = 0;
      if (v83)
      {
        if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
        {
          goto LABEL_151;
        }
        v6 = *(_WORD **)(a1 + 72);
      }
      else if (!(_DWORD)v81)
      {
        return v5;
      }
      v103 = (v81 - 1) & 0x7FFFFFFFFFFFFFFFLL;
      if (v103 < 0xF || (unint64_t)v6 - v82 < 0x20)
      {
        v106 = v6;
        v107 = (__int16 *)v82;
      }
      else
      {
        v104 = v103 + 1;
        v105 = (v103 + 1) & 0xFFFFFFFFFFFFFFF0;
        v106 = &v6[v105];
        v107 = (__int16 *)(v82 + 2 * v105);
        v108 = (__int128 *)(v82 + 16);
        v109 = v6 + 8;
        v110 = v105;
        do
        {
          v5 = *(v108 - 1);
          v111 = *v108;
          *(v109 - 1) = v5;
          *v109 = v111;
          v108 += 2;
          v109 += 2;
          v110 -= 16;
        }
        while (v110);
        if (v104 == v105)
          return v5;
      }
      do
      {
        v114 = *v107++;
        LOWORD(v5) = v114;
        *v106++ = v114;
      }
      while (v107 != (__int16 *)(v82 + 2 * v81));
      return v5;
    }
    if ((_DWORD)v42)
    {
      if (v79)
      {
        v84 = *((_DWORD *)v4 + 4);
        if (v84)
        {
          v85 = *((_QWORD *)v4 + 9);
          v86 = v84 - 1;
          v163 = v80;
          if (v84 == 1)
          {
            v92 = *(_WORD **)(a1 + 72);
            v94 = *((_QWORD *)v4 + 9);
          }
          else
          {
            if (!(_DWORD)v80)
              return v5;
            v87 = 0;
            v88 = 2 * v78;
            v89 = 2 * v77;
            v90 = (v80 - 1) & 0x7FFFFFFFFFFFFFFFLL;
            v91 = (v90 + 1) & 0xFFFFFFFFFFFFFFF0;
            v92 = v6;
            v93 = v91;
            v156 = v6;
            v94 = *((_QWORD *)v4 + 9);
            do
            {
              if (!v94)
              {
                v95 = sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4);
                v80 = v163;
                if (v95)
                  goto LABEL_151;
              }
              v96 = v92;
              v97 = (__int16 *)v94;
              if (v90 < 0xF)
                goto LABEL_169;
              v96 = v92;
              v97 = (__int16 *)v94;
              if ((unint64_t)v156 + v88 * v87 - v85 - v89 * v87 < 0x20)
                goto LABEL_169;
              v98 = 0;
              v96 = &v92[v93];
              v97 = (__int16 *)(v94 + v93 * 2);
              v99 = (v90 + 1) & 0xFFFFFFFFFFFFFFF0;
              do
              {
                v100 = &v92[v98];
                v5 = *(_OWORD *)(v94 + v98 * 2);
                v101 = *(_OWORD *)(v94 + v98 * 2 + 16);
                *v100 = v5;
                v100[1] = v101;
                v98 += 16;
                v99 -= 16;
              }
              while (v99);
              if (v90 + 1 != v91)
              {
LABEL_169:
                do
                {
                  v102 = *v97++;
                  LOWORD(v5) = v102;
                  *v96++ = v102;
                }
                while (v97 != (__int16 *)(v94 + 2 * v80));
              }
              v94 += v89;
              v92 = (_WORD *)((char *)v92 + v88);
              ++v87;
            }
            while ((_DWORD)v87 != v86);
          }
          if (!(_DWORD)v80 || v94)
          {
            if (!(_DWORD)v80)
              return v5;
          }
          else
          {
            v141 = sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4);
            v80 = v163;
            if (v141)
              goto LABEL_151;
          }
          v142 = (v80 - 1) & 0x7FFFFFFFFFFFFFFFLL;
          if (v142 < 0xF || (unint64_t)v92 - v94 < 0x20)
          {
            v145 = v92;
            v146 = (__int16 *)v94;
          }
          else
          {
            v143 = v142 + 1;
            v144 = (v142 + 1) & 0xFFFFFFFFFFFFFFF0;
            v145 = &v92[v144];
            v146 = (__int16 *)(v94 + 2 * v144);
            v147 = (__int128 *)(v94 + 16);
            v148 = v92 + 8;
            v149 = v144;
            do
            {
              v5 = *(v147 - 1);
              v150 = *v147;
              *(v148 - 1) = v5;
              *v148 = v150;
              v147 += 2;
              v148 += 2;
              v149 -= 16;
            }
            while (v149);
            if (v143 == v144)
              return v5;
          }
          do
          {
            v151 = *v146++;
            LOWORD(v5) = v151;
            *v145++ = v151;
          }
          while (v146 != (__int16 *)(v94 + 2 * v80));
        }
      }
    }
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v173, lpsrc, 7);
    v16 = *(_OWORD *)(v173 + 16);
    v15 = *(_OWORD *)(v173 + 32);
    v166 = *(_OWORD *)v173;
    v167 = v16;
    v168 = v15;
    *(_QWORD *)&v173 = 0;
    MEMORY[0x212BCC6FC]();
    v17 = *(_QWORD *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36))
      v18 = *(_DWORD *)(a1 + 32) == 0;
    else
      v18 = 1;
    v19 = *(_QWORD *)(a1 + 32);
    v20 = *(_QWORD *)(a1 + 40);
    if (v18)
      v19 = 0;
    *(_QWORD *)((char *)&v173 + 4) = v19;
    v21 = v19;
    LODWORD(v173) = 2;
    v22 = v173;
    v23 = HIDWORD(v19);
    LODWORD(v173) = 1;
    *(_QWORD *)((char *)&v173 + 4) = v20;
    v24 = v173;
    if (HIDWORD(v20) * HIDWORD(v19) == -1
      && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
    *(_QWORD *)&v173 = v17;
    *((_QWORD *)&v173 + 1) = v22;
    v174 = v23;
    v175 = v24;
    v176 = HIDWORD(v20);
    v177 = v21;
    v178 = v20;
    v165[0] = (uint64_t)&v166;
    v165[1] = (uint64_t)&v173;
    LOWORD(v5) = sub_210901EE4(v165);
  }
  return v5;
}

void sub_2109BCC2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,int a34,int a35,int a36,int a37,unsigned int a38)
{
  void *v39;
  int v40;
  BOOL v41;

  v39 = a31;
  if (a31)
  {
    v40 = a35;
    if (a35)
      v41 = a34 == 0;
    else
      v41 = 1;
    if (v41 || a33 == 0)
      v40 = 0;
    if (v40 * (a38 >> 1) == -1)
    {
      if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
      {
        abort();
      }
      v39 = a31;
    }
    free(v39);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_2109BCCB4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_2108ABF6C(a1);
  _Unwind_Resume(a1);
}

uint64_t sub_2109BCCD0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_2109BCCD8@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 7
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 2;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_2109BCE50@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 7
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 2;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_2109BCFC8(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_2109BCFF8(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  JUMPOUT(0x212BCC6FCLL);
}

_UNKNOWN **sub_2109BD038()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A75DC0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A75DC0))
    return &off_253ED6E50;
  __cxa_guard_release(&qword_254A75DC0);
  return &off_253ED6E50;
}

uint64_t sub_2109BD08C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24CA81DC8;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a1 + 56);
  result = sub_2109CFE3C(v4 + 64, a1 + 64);
  *a2 = v4;
  return result;
}

void sub_2109BD10C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BCC6FC](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

void sub_2109BD130(uint64_t a1, void *lpsrc)
{
  char *v4;
  _DWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  void *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  _DWORD *v33;
  _DWORD *v34;
  _DWORD *v35;
  _DWORD *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v42;
  int v43;
  int v44;
  char *v45;
  size_t v46;
  int v47;
  unsigned __int8 *v48;
  char *v49;
  int v50;
  char *v51;
  uint64_t v52;
  size_t v53;
  unsigned __int8 *v54;
  unsigned __int8 v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t, const char *, uint64_t, void *, _QWORD);
  unsigned __int8 v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  const void *v67;
  BOOL v68;
  int v69;
  char *v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  _BOOL4 v79;
  _BOOL4 v80;
  void *v81;
  size_t v82;
  uint64_t v83;
  uint64_t v84;
  _DWORD *v85;
  int v86;
  char *v87;
  int v88;
  char *__src;
  uint64_t v90;
  uint64_t v91[2];
  __int128 v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  _QWORD v96[3];
  __int128 v97;
  uint64_t v98;
  __int128 v99;
  int v100;
  uint64_t v101;
  int v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;

  v105 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24CA84C98, (const struct __class_type_info *)&unk_24CA81E38, 0);
  if (v4)
  {
    v5 = *(_DWORD **)(a1 + 72);
    if (!v5 || *(_QWORD *)(v4 + 12) != *(_QWORD *)(a1 + 12) || *((_QWORD *)v4 + 3) != *(_QWORD *)(a1 + 24))
    {
      v6 = *(_OWORD *)(v4 + 8);
      v7 = *(_OWORD *)(v4 + 24);
      v8 = *(_OWORD *)(v4 + 40);
      v95 = *((_QWORD *)v4 + 7);
      v93 = v7;
      v94 = v8;
      v92 = v6;
      sub_2109CFE3C((uint64_t)v96, (uint64_t)(v4 + 64));
      v9 = v93;
      *(_OWORD *)(a1 + 8) = v92;
      *(_OWORD *)(a1 + 24) = v9;
      *(_OWORD *)(a1 + 40) = v94;
      *(_QWORD *)(a1 + 56) = v95;
      *(_OWORD *)(a1 + 88) = v97;
      *(_QWORD *)(a1 + 104) = v98;
      *(_QWORD *)(a1 + 64) = v96[0];
      v10 = *(void **)(a1 + 72);
      if (v10)
        free(v10);
      v11 = v96[2];
      *(_QWORD *)(a1 + 72) = v96[1];
      *(_QWORD *)(a1 + 80) = v11;
      return;
    }
    if (*((_DWORD *)v4 + 5) != 1 || *(_DWORD *)(a1 + 20) != 1)
    {
      if (!*((_DWORD *)v4 + 2))
        return;
      v23 = *((_DWORD *)v4 + 3);
      if (!v23)
        return;
      v24 = *((_DWORD *)v4 + 4);
      if (!v24)
        return;
      v25 = v23 - 1;
      v26 = *((unsigned int *)v4 + 6);
      v27 = *(unsigned int *)(a1 + 24);
      v28 = (_DWORD *)*((_QWORD *)v4 + 9);
      v29 = v24 - 1;
      if (v29)
      {
        v30 = *(unsigned int *)(a1 + 28);
        v31 = *((unsigned int *)v4 + 7);
        if (!v25)
        {
          do
          {
            *v5 = *v28;
            v5[1] = v28[1];
            v28 += v31;
            v5 += v30;
            --v29;
          }
          while (v29);
LABEL_85:
          *v5 = *v28;
          v5[1] = v28[1];
          return;
        }
        v32 = 0;
        v33 = v28 + 1;
        v34 = v5 + 1;
        do
        {
          v35 = v34;
          v36 = v33;
          v37 = v25;
          do
          {
            *(v35 - 1) = *(v36 - 1);
            *v35 = *v36;
            v36 += v26;
            v35 += v27;
            --v37;
          }
          while (v37);
          *(v35 - 1) = *(v36 - 1);
          *v35 = *v36;
          v28 += v31;
          v5 += v30;
          ++v32;
          v33 += v31;
          v34 += v30;
        }
        while (v32 != v29);
      }
      for (; v25; --v25)
      {
        *v5 = *v28;
        v5[1] = v28[1];
        v28 += v26;
        v5 += v27;
      }
      goto LABEL_85;
    }
    v38 = *((unsigned int *)v4 + 6);
    v39 = *(unsigned int *)(a1 + 24);
    v40 = *((unsigned int *)v4 + 2);
    if ((_DWORD)v38 == (_DWORD)v39 && (_DWORD)v38 == (_DWORD)v40)
    {
      v62 = *((unsigned int *)v4 + 7);
      v63 = *(unsigned int *)(a1 + 28);
      v64 = *((_DWORD *)v4 + 3);
      v65 = (v64 * v38);
      if ((_DWORD)v62 == (_DWORD)v63 && (_DWORD)v62 == (_DWORD)v65)
      {
        v66 = (*((_DWORD *)v4 + 4) * v62);
        v67 = (const void *)*((_QWORD *)v4 + 9);
        if ((_DWORD)v66)
          v68 = v67 == 0;
        else
          v68 = 0;
        if (v68)
        {
          if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
          {
            goto LABEL_100;
          }
          v5 = *(_DWORD **)(a1 + 72);
        }
        else if (!(_DWORD)v66)
        {
          return;
        }
        memmove(v5, v67, 4 * v66);
        return;
      }
      if (!(_DWORD)v38)
        return;
      if (!v64)
        return;
      v69 = *((_DWORD *)v4 + 4);
      if (!v69)
        return;
      v70 = (char *)*((_QWORD *)v4 + 9);
      v71 = v69 - 1;
      if (v69 != 1)
      {
        if (!(_DWORD)v65)
          return;
        v72 = 4 * v62;
        v73 = 4 * v63;
        while (v70
             || !sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
        {
          memmove(v5, v70, 4 * v65);
          v70 += v72;
          v5 = (_DWORD *)((char *)v5 + v73);
          if (!--v71)
            goto LABEL_86;
        }
LABEL_100:
        abort();
      }
LABEL_86:
      if (!(_DWORD)v65 || v70)
      {
        if (!(_DWORD)v65)
          return;
      }
      else if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
      {
        goto LABEL_100;
      }
      v81 = v5;
      v45 = v70;
      v82 = 4 * v65;
    }
    else
    {
      if (!(_DWORD)v40)
        return;
      v42 = *((_DWORD *)v4 + 3);
      if (!v42)
        return;
      v43 = *((_DWORD *)v4 + 4);
      if (!v43)
        return;
      v44 = v42 - 1;
      v45 = (char *)*((_QWORD *)v4 + 9);
      v46 = 4 * v40;
      v88 = v43 - 1;
      v90 = *((unsigned int *)v4 + 6);
      if (v43 != 1)
      {
        if (v42 == 1)
        {
          v74 = 4 * *((unsigned int *)v4 + 7);
          v75 = 4 * *(unsigned int *)(a1 + 28);
          while (1)
          {
            v76 = v45;
            if (!v45
              && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
            {
              break;
            }
            memmove(v5, v76, v46);
            v45 = &v76[v74];
            v5 = (_DWORD *)((char *)v5 + v75);
            if (!--v88)
              goto LABEL_95;
          }
        }
        else
        {
          v47 = 0;
          v48 = (unsigned __int8 *)&qword_254A75F38;
          __src = (char *)(4 * v38);
          v83 = *((unsigned int *)v4 + 7);
          v84 = *(unsigned int *)(a1 + 28);
          while (1)
          {
            v86 = v47;
            v50 = 0;
            v87 = v45;
            v49 = v45;
            v85 = v5;
            v51 = (char *)v5;
            do
            {
              while (v49)
              {
                memmove(v51, v49, v46);
                v49 += 4 * v90;
                v51 += 4 * v39;
                if (++v50 == v44)
                  goto LABEL_44;
              }
              v52 = v39;
              v53 = v46;
              sub_2109EDAB0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4);
              v54 = v48;
              v55 = atomic_load(v48);
              if ((v55 & 1) == 0 && __cxa_guard_acquire((__guard *)v48))
              {
                __cxa_atexit((void (*)(void *))sub_2109EDF34, &qword_254A75F00, &dword_21089F000);
                __cxa_guard_release((__guard *)v48);
              }
              if (byte_254A75F28)
                v56 = byte_254A75F30 == 0;
              else
                v56 = 0;
              if (!v56)
              {
                v57 = qword_254A75F00;
                v58 = unk_254A75F08;
                while (v57 != v58)
                {
                  v60 = *(void (**)(uint64_t, const char *, uint64_t, void *, _QWORD))v57;
                  v59 = *(_QWORD *)(v57 + 8);
                  v57 += 16;
                  v60(v59, "ptr != nullptr || size == 0", 27, &unk_210A01421, 0);
                }
              }
              v48 = v54;
              v61 = atomic_load(v54);
              if ((v61 & 1) == 0 && __cxa_guard_acquire((__guard *)v54))
              {
                __cxa_atexit((void (*)(void *))sub_2109EDF34, &qword_254A75F00, &dword_21089F000);
                __cxa_guard_release((__guard *)v54);
              }
              if (!byte_254A75F28)
                goto LABEL_100;
              v46 = v53;
              qword_254A75F18(unk_254A75F20, "ptr != nullptr || size == 0", 27, &unk_210A01421, 0);
              memcpy(v51, 0, v53);
              v39 = v52;
              v51 += 4 * v52;
              ++v50;
              v49 = __src;
            }
            while (v50 != v44);
            v49 = __src;
            if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
            {
              break;
            }
LABEL_44:
            memmove(v51, v49, v46);
            v45 = &v87[4 * v83];
            v5 = &v85[v84];
            v47 = v86 + 1;
            if (v86 + 1 == v88)
              goto LABEL_95;
          }
        }
        goto LABEL_100;
      }
LABEL_95:
      if (v44)
      {
        v77 = 4 * v39;
        do
        {
          if (!v45)
          {
            v79 = sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4);
            v45 = 0;
            if (v79)
              goto LABEL_100;
          }
          v78 = v45;
          memmove(v5, v45, v46);
          v45 = &v78[4 * v90];
          v5 = (_DWORD *)((char *)v5 + v77);
        }
        while (--v44);
      }
      if (!v45)
      {
        v80 = sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4);
        v45 = 0;
        if (v80)
          goto LABEL_100;
      }
      v81 = v5;
      v82 = v46;
    }
    memmove(v81, v45, v82);
    return;
  }
  (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v99, lpsrc, 8);
  v13 = *(_OWORD *)(v99 + 16);
  v12 = *(_OWORD *)(v99 + 32);
  v92 = *(_OWORD *)v99;
  v93 = v13;
  v94 = v12;
  *(_QWORD *)&v99 = 0;
  MEMORY[0x212BCC6FC]();
  v14 = *(_QWORD *)(a1 + 72);
  if (*(_DWORD *)(a1 + 36))
    v15 = *(_DWORD *)(a1 + 32) == 0;
  else
    v15 = 1;
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  if (v15)
    v16 = 0;
  *(_QWORD *)((char *)&v99 + 4) = v16;
  v18 = v16;
  LODWORD(v99) = 2;
  v19 = v99;
  v20 = HIDWORD(v16);
  LODWORD(v99) = 1;
  *(_QWORD *)((char *)&v99 + 4) = v17;
  v21 = v99;
  if (HIDWORD(v17) * HIDWORD(v16) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
  *(_QWORD *)&v99 = v14;
  *((_QWORD *)&v99 + 1) = v19;
  v100 = v20;
  v101 = v21;
  v102 = HIDWORD(v17);
  v103 = v18;
  v104 = v17;
  v91[0] = (uint64_t)&v92;
  v91[1] = (uint64_t)&v99;
  sub_210903C68(v91);
}

uint64_t sub_2109BDA68(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_2109BDA70@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 8
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 2;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_2109BDBE8@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 8
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 2;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_2109BDD60(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_2109BDD90(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  JUMPOUT(0x212BCC6FCLL);
}

_UNKNOWN **sub_2109BDDD0()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A75DC0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A75DC0))
    return &off_253ED6E50;
  __cxa_guard_release(&qword_254A75DC0);
  return &off_253ED6E50;
}

uint64_t sub_2109BDE24@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24CA835E0;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a1 + 56);
  result = sub_2109CE728(v4 + 64, a1 + 64);
  *a2 = v4;
  return result;
}

void sub_2109BDEA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BCC6FC](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

uint64_t sub_2109BDEC8(uint64_t a1, void *lpsrc)
{
  unsigned int *v4;
  uint64_t result;
  __int128 v6;
  __int128 v7;
  _BYTE *v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  _BYTE *v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  _BYTE *v25;
  _BYTE *v26;
  int v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  size_t v31[2];
  __int128 v32;
  int v33;
  unint64_t v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24CA84C98, (const struct __class_type_info *)&unk_24CA84660, 0);
  if (v4)
    return sub_2109D7AD4(a1 + 8, v4 + 2);
  (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v32, lpsrc, 9);
  v7 = *(_OWORD *)(v32 + 16);
  v6 = *(_OWORD *)(v32 + 32);
  v28 = *(_OWORD *)v32;
  v29 = v7;
  v30 = v6;
  *(_QWORD *)&v32 = 0;
  result = MEMORY[0x212BCC6FC]();
  v8 = *(_BYTE **)(a1 + 72);
  if (*(_DWORD *)(a1 + 36))
    v9 = *(_DWORD *)(a1 + 32) == 0;
  else
    v9 = 1;
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  if (v9)
    v10 = 0;
  LODWORD(v32) = 3;
  *(_QWORD *)((char *)&v32 + 4) = v10;
  v12 = v10;
  v13 = v32;
  v14 = HIDWORD(v10);
  LODWORD(v32) = 1;
  *(_QWORD *)((char *)&v32 + 4) = v11;
  v15 = v32;
  v16 = HIDWORD(v11);
  if (HIDWORD(v11) * HIDWORD(v10) == -1)
  {
    result = sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4);
    if ((_DWORD)result)
      abort();
  }
  *(_QWORD *)&v32 = v8;
  *((_QWORD *)&v32 + 1) = v13;
  v33 = v14;
  v34 = v15;
  v35 = HIDWORD(v11);
  v36 = v12;
  v37 = v11;
  v31[0] = (size_t)&v28;
  v31[1] = (size_t)&v32;
  if ((_DWORD)v15 == 1 && DWORD1(v29) == 1)
    return (uint64_t)sub_2108FEBEC(v31);
  if (DWORD2(v28) && HIDWORD(v28) && (_DWORD)v29)
  {
    v17 = HIDWORD(v15);
    v18 = HIDWORD(v28) - 1;
    v19 = DWORD2(v29);
    v20 = (_BYTE *)v28;
    v21 = v29 - 1;
    if ((_DWORD)v29 != 1)
    {
      v22 = HIDWORD(v29);
      if (HIDWORD(v28) == 1)
      {
        do
        {
          *v8 = *v20;
          v8[1] = v20[1];
          v8[2] = v20[2];
          v20 += v22;
          v8 += v16;
          --v21;
        }
        while (v21);
      }
      else
      {
        v23 = 0;
        v24 = (uint64_t)(v8 + 2);
        v25 = (_BYTE *)(v28 + 2);
        do
        {
          v26 = v25;
          result = v24;
          v27 = v18;
          do
          {
            *(_BYTE *)(result - 2) = *(v26 - 2);
            *(_BYTE *)(result - 1) = *(v26 - 1);
            *(_BYTE *)result = *v26;
            result += v17;
            v26 += v19;
            --v27;
          }
          while (v27);
          *(_BYTE *)(result - 2) = *(v26 - 2);
          *(_BYTE *)(result - 1) = *(v26 - 1);
          *(_BYTE *)result = *v26;
          v20 += v22;
          v8 += v16;
          ++v23;
          v24 += v16;
          v25 += v22;
        }
        while (v23 != v21);
      }
    }
    for (; v18; --v18)
    {
      *v8 = *v20;
      v8[1] = v20[1];
      v8[2] = v20[2];
      v20 += v19;
      v8 += v17;
    }
    *v8 = *v20;
    v8[1] = v20[1];
    v8[2] = v20[2];
  }
  return result;
}

uint64_t sub_2109BE1D8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_2109BE1E0@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 9
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 3;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_2109BE358@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 9
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 3;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_2109BE4D0(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_2109BE500(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  JUMPOUT(0x212BCC6FCLL);
}

_UNKNOWN **sub_2109BE540()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A75DC0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A75DC0))
    return &off_253ED6E50;
  __cxa_guard_release(&qword_254A75DC0);
  return &off_253ED6E50;
}

uint64_t sub_2109BE594@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24CA83660;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a1 + 56);
  result = sub_2109CF018(v4 + 64, a1 + 64);
  *a2 = v4;
  return result;
}

void sub_2109BE614(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BCC6FC](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

uint64_t sub_2109BE638(uint64_t a1, void *lpsrc)
{
  unsigned int *v4;
  uint64_t result;
  __int128 v6;
  __int128 v7;
  _WORD *v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  _WORD *v20;
  int v21;
  uint64_t v22;
  int v23;
  _WORD *v24;
  _WORD *v25;
  _WORD *v26;
  int v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32[2];
  __int128 v33;
  int v34;
  unint64_t v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24CA84C98, (const struct __class_type_info *)&unk_24CA84678, 0);
  if (v4)
    return sub_2109D8218(a1 + 8, v4 + 2);
  (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v33, lpsrc, 10);
  v7 = *(_OWORD *)(v33 + 16);
  v6 = *(_OWORD *)(v33 + 32);
  v29 = *(_OWORD *)v33;
  v30 = v7;
  v31 = v6;
  *(_QWORD *)&v33 = 0;
  result = MEMORY[0x212BCC6FC]();
  v8 = *(_WORD **)(a1 + 72);
  if (*(_DWORD *)(a1 + 36))
    v9 = *(_DWORD *)(a1 + 32) == 0;
  else
    v9 = 1;
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  if (v9)
    v10 = 0;
  LODWORD(v33) = 3;
  *(_QWORD *)((char *)&v33 + 4) = v10;
  v12 = v10;
  v13 = v33;
  v14 = HIDWORD(v10);
  LODWORD(v33) = 1;
  *(_QWORD *)((char *)&v33 + 4) = v11;
  v15 = v33;
  v16 = HIDWORD(v11);
  if (HIDWORD(v11) * HIDWORD(v10) == -1)
  {
    result = sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4);
    if ((_DWORD)result)
      abort();
  }
  *(_QWORD *)&v33 = v8;
  *((_QWORD *)&v33 + 1) = v13;
  v34 = v14;
  v35 = v15;
  v36 = HIDWORD(v11);
  v37 = v12;
  v38 = v11;
  v32[0] = (uint64_t)&v29;
  v32[1] = (uint64_t)&v33;
  if ((_DWORD)v15 == 1 && DWORD1(v30) == 1)
    return (uint64_t)sub_2109005E8(v32);
  if (DWORD2(v29) && HIDWORD(v29) && (_DWORD)v30)
  {
    v17 = HIDWORD(v15);
    v18 = HIDWORD(v29) - 1;
    v19 = DWORD2(v30);
    v20 = (_WORD *)v29;
    v21 = v30 - 1;
    if ((_DWORD)v30 != 1)
    {
      v22 = HIDWORD(v30);
      if (HIDWORD(v29) == 1)
      {
        do
        {
          *v8 = *v20;
          v8[1] = v20[1];
          v8[2] = v20[2];
          v20 += v22;
          v8 += v16;
          --v21;
        }
        while (v21);
LABEL_27:
        *v8 = *v20;
        v8[1] = v20[1];
        v8[2] = v20[2];
        return result;
      }
      v23 = 0;
      v24 = v8 + 2;
      result = v29 + 4;
      do
      {
        v25 = (_WORD *)result;
        v26 = v24;
        v27 = v18;
        do
        {
          *(v26 - 2) = *(v25 - 2);
          *(v26 - 1) = *(v25 - 1);
          *v26 = *v25;
          v26 += v17;
          v25 += v19;
          --v27;
        }
        while (v27);
        *(v26 - 2) = *(v25 - 2);
        *(v26 - 1) = *(v25 - 1);
        *v26 = *v25;
        v20 += v22;
        v8 += v16;
        ++v23;
        v24 += v16;
        result += 2 * v22;
      }
      while (v23 != v21);
    }
    if (v18)
    {
      v28 = 2 * v17;
      do
      {
        *v8 = *v20;
        v8[1] = v20[1];
        v8[2] = v20[2];
        v20 += v19;
        v8 = (_WORD *)((char *)v8 + v28);
        --v18;
      }
      while (v18);
    }
    goto LABEL_27;
  }
  return result;
}

uint64_t sub_2109BE968(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_2109BE970@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 10
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 3;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_2109BEAE8@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 10
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 3;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_2109BEC60(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1)
      goto LABEL_14;
    if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
    v2 = *(void **)(a1 + 72);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

uint64_t sub_2109BED04(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 64);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 88) || *(_DWORD *)(a1 + 84) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 80) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 88);
    if (v5 * (*(_DWORD *)(a1 + 100) >> 1) != -1)
      goto LABEL_14;
    if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
    v2 = *(void **)(a1 + 64);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 64) = 0;
  return a1;
}

uint64_t sub_2109BEDA8(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1)
      goto LABEL_14;
    if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
    v2 = *(void **)(a1 + 72);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_2109BEE4C(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1)
      goto LABEL_14;
    if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
    v2 = *(void **)(a1 + 72);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 72) = 0;
  JUMPOUT(0x212BCC6FCLL);
}

_UNKNOWN **sub_2109BEF00()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A75DC0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A75DC0))
    return &off_253ED6E50;
  __cxa_guard_release(&qword_254A75DC0);
  return &off_253ED6E50;
}

uint64_t sub_2109BEF54@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24CA836E0;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a1 + 56);
  result = sub_2109CFA20(v4 + 64, a1 + 64);
  *a2 = v4;
  return result;
}

void sub_2109BEFD4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BCC6FC](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

double sub_2109BEFF8(uint64_t a1, void *lpsrc)
{
  unsigned int *v4;
  double result;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _OWORD v20[3];
  __int128 v21;
  int v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24CA84C98, (const struct __class_type_info *)&unk_24CA84690, 0);
  if (v4)
  {
    sub_2109D898C(a1 + 8, v4 + 2);
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v21, lpsrc, 11);
    v6 = v21;
    v7 = *(_OWORD *)(v21 + 16);
    v20[0] = *(_OWORD *)v21;
    v20[1] = v7;
    v20[2] = *(_OWORD *)(v21 + 32);
    *(_QWORD *)&v21 = 0;
    MEMORY[0x212BCC6FC](v6, 0xC400A2AC0F1, v8, v9, v10, v11);
    v12 = *(_QWORD *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36))
      v13 = *(_DWORD *)(a1 + 32) == 0;
    else
      v13 = 1;
    v14 = *(_QWORD *)(a1 + 32);
    v15 = *(_QWORD *)(a1 + 40);
    if (v13)
      v14 = 0;
    LODWORD(v21) = 3;
    *(_QWORD *)((char *)&v21 + 4) = v14;
    v16 = v14;
    v17 = v21;
    v18 = HIDWORD(v14);
    LODWORD(v21) = 1;
    *(_QWORD *)((char *)&v21 + 4) = v15;
    v19 = v21;
    if (HIDWORD(v15) * HIDWORD(v14) == -1
      && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
    *(_QWORD *)&v21 = v12;
    *((_QWORD *)&v21 + 1) = v17;
    v22 = v18;
    v23 = v19;
    v24 = HIDWORD(v15);
    v25 = v16;
    v26 = v15;
    *(_QWORD *)&result = sub_2109D9394((uint64_t)v20, (uint64_t)&v21);
  }
  return result;
}

uint64_t sub_2109BF1CC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_2109BF1D4@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 11
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 3;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_2109BF34C@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 11
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 3;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_2109BF4C4(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_2109BF4F4(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  JUMPOUT(0x212BCC6FCLL);
}

_UNKNOWN **sub_2109BF534()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A75DC0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A75DC0))
    return &off_253ED6E50;
  __cxa_guard_release(&qword_254A75DC0);
  return &off_253ED6E50;
}

uint64_t sub_2109BF588@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24CA83760;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a1 + 56);
  result = sub_2109CFE3C(v4 + 64, a1 + 64);
  *a2 = v4;
  return result;
}

void sub_2109BF608(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BCC6FC](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

float sub_2109BF62C(uint64_t a1, void *lpsrc)
{
  unsigned int *v4;
  float result;
  __int128 v6;
  float *v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  float *v19;
  int v20;
  uint64_t v21;
  int v22;
  _DWORD *v23;
  _DWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  int v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  int v33;
  unint64_t v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24CA84C98, (const struct __class_type_info *)&unk_24CA846A8, 0);
  if (v4)
  {
    sub_2109D9C64(a1 + 8, v4 + 2);
    return result;
  }
  (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v32, lpsrc, 12);
  v6 = *(_OWORD *)(v32 + 16);
  v29 = *(_OWORD *)v32;
  v30 = v6;
  v31 = *(_OWORD *)(v32 + 32);
  *(_QWORD *)&v32 = 0;
  MEMORY[0x212BCC6FC]();
  v7 = *(float **)(a1 + 72);
  if (*(_DWORD *)(a1 + 36))
    v8 = *(_DWORD *)(a1 + 32) == 0;
  else
    v8 = 1;
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  if (v8)
    v9 = 0;
  LODWORD(v32) = 3;
  *(_QWORD *)((char *)&v32 + 4) = v9;
  v11 = v9;
  v12 = v32;
  v13 = HIDWORD(v9);
  LODWORD(v32) = 1;
  *(_QWORD *)((char *)&v32 + 4) = v10;
  v14 = v32;
  v15 = HIDWORD(v10);
  if (HIDWORD(v10) * HIDWORD(v9) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
  *(_QWORD *)&v32 = v7;
  *((_QWORD *)&v32 + 1) = v12;
  v33 = v13;
  v34 = v14;
  v35 = HIDWORD(v10);
  v36 = v11;
  v37 = v10;
  if ((_DWORD)v14 == 1 && DWORD1(v30) == 1)
  {
    sub_2109DA3D8(&v29, (char **)&v32);
    return result;
  }
  if (DWORD2(v29) && HIDWORD(v29) && (_DWORD)v30)
  {
    v16 = HIDWORD(v14);
    v17 = HIDWORD(v29) - 1;
    v18 = DWORD2(v30);
    v19 = (float *)v29;
    v20 = v30 - 1;
    if ((_DWORD)v30 != 1)
    {
      v21 = HIDWORD(v30);
      if (HIDWORD(v29) == 1)
      {
        do
        {
          *v7 = *v19;
          v7[1] = v19[1];
          v7[2] = v19[2];
          v19 += v21;
          v7 += v15;
          --v20;
        }
        while (v20);
LABEL_27:
        *v7 = *v19;
        v7[1] = v19[1];
        result = v19[2];
        v7[2] = result;
        return result;
      }
      v22 = 0;
      v23 = v7 + 2;
      v24 = (_DWORD *)(v29 + 8);
      do
      {
        v25 = v24;
        v26 = v23;
        v27 = v17;
        do
        {
          *(v26 - 2) = *(v25 - 2);
          *(v26 - 1) = *(v25 - 1);
          *v26 = *v25;
          v26 += v16;
          v25 += v18;
          --v27;
        }
        while (v27);
        *(v26 - 2) = *(v25 - 2);
        *(v26 - 1) = *(v25 - 1);
        *v26 = *v25;
        v19 += v21;
        v7 += v15;
        ++v22;
        v23 += v15;
        v24 += v21;
      }
      while (v22 != v20);
    }
    if (v17)
    {
      v28 = 4 * v16;
      do
      {
        *v7 = *v19;
        v7[1] = v19[1];
        v7[2] = v19[2];
        v19 += v18;
        v7 = (float *)((char *)v7 + v28);
        --v17;
      }
      while (v17);
    }
    goto LABEL_27;
  }
  return result;
}

uint64_t sub_2109BF954(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_2109BF95C@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 12
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 3;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_2109BFAD4@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 12
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 3;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_2109BFC4C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_2109BFC7C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  JUMPOUT(0x212BCC6FCLL);
}

_UNKNOWN **sub_2109BFCBC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A75DC0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A75DC0))
    return &off_253ED6E50;
  __cxa_guard_release(&qword_254A75DC0);
  return &off_253ED6E50;
}

uint64_t sub_2109BFD10@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24CA837E0;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a1 + 56);
  result = sub_2109CE728(v4 + 64, a1 + 64);
  *a2 = v4;
  return result;
}

void sub_2109BFD90(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BCC6FC](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

void sub_2109BFDB4(uint64_t a1, void *lpsrc)
{
  unsigned int *v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  size_t v19[2];
  char v20;
  char *v21;
  __int128 v22;
  int v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24CA84C98, (const struct __class_type_info *)&unk_24CA846C0, 0);
  if (v4)
  {
    sub_2109DA998(a1 + 8, v4 + 2);
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v22, lpsrc, 13);
    v5 = v22;
    v7 = *(_OWORD *)(v22 + 16);
    v6 = *(_OWORD *)(v22 + 32);
    v16 = *(_OWORD *)v22;
    v17 = v7;
    v18 = v6;
    *(_QWORD *)&v22 = 0;
    MEMORY[0x212BCC6FC](v5);
    v8 = *(_QWORD *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36))
      v9 = *(_DWORD *)(a1 + 32) == 0;
    else
      v9 = 1;
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(_QWORD *)(a1 + 40);
    if (v9)
      v10 = 0;
    LODWORD(v22) = 4;
    *(_QWORD *)((char *)&v22 + 4) = v10;
    v12 = v10;
    v13 = v22;
    v14 = HIDWORD(v10);
    LODWORD(v22) = 1;
    *(_QWORD *)((char *)&v22 + 4) = v11;
    v15 = v22;
    if (HIDWORD(v11) * HIDWORD(v10) == -1
      && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
    *(_QWORD *)&v22 = v8;
    *((_QWORD *)&v22 + 1) = v13;
    v23 = v14;
    v24 = v15;
    v25 = HIDWORD(v11);
    v26 = v12;
    v27 = v11;
    v19[0] = (size_t)&v16;
    v19[1] = (size_t)&v22;
    if ((_DWORD)v15 == 1 && DWORD1(v17) == 1)
    {
      sub_2108FEBEC(v19);
    }
    else
    {
      v20 = 0;
      if (DWORD2(v16) && HIDWORD(v16))
      {
        if ((_DWORD)v17)
        {
          v21 = &v20;
          sub_2108FF6CC((uint64_t)&v21, (uint64_t)&v16, (uint64_t)&v22);
        }
      }
    }
  }
}

uint64_t sub_2109BFFDC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_2109BFFE4@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 13
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_2109C015C@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 13
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_2109C02D4(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_2109C0304(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  JUMPOUT(0x212BCC6FCLL);
}

_UNKNOWN **sub_2109C0344()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A75DC0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A75DC0))
    return &off_253ED6E50;
  __cxa_guard_release(&qword_254A75DC0);
  return &off_253ED6E50;
}

uint64_t sub_2109C0398@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24CA83860;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a1 + 56);
  result = sub_2109CF018(v4 + 64, a1 + 64);
  *a2 = v4;
  return result;
}

void sub_2109C0418(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BCC6FC](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

void sub_2109C043C(uint64_t a1, void *lpsrc)
{
  unsigned int *v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19[2];
  char v20;
  char *v21;
  __int128 v22;
  int v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24CA84C98, (const struct __class_type_info *)&unk_24CA846D8, 0);
  if (v4)
  {
    sub_2109DB104(a1 + 8, v4 + 2);
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v22, lpsrc, 14);
    v5 = v22;
    v7 = *(_OWORD *)(v22 + 16);
    v6 = *(_OWORD *)(v22 + 32);
    v16 = *(_OWORD *)v22;
    v17 = v7;
    v18 = v6;
    *(_QWORD *)&v22 = 0;
    MEMORY[0x212BCC6FC](v5);
    v8 = *(_QWORD *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36))
      v9 = *(_DWORD *)(a1 + 32) == 0;
    else
      v9 = 1;
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(_QWORD *)(a1 + 40);
    if (v9)
      v10 = 0;
    LODWORD(v22) = 4;
    *(_QWORD *)((char *)&v22 + 4) = v10;
    v12 = v10;
    v13 = v22;
    v14 = HIDWORD(v10);
    LODWORD(v22) = 1;
    *(_QWORD *)((char *)&v22 + 4) = v11;
    v15 = v22;
    if (HIDWORD(v11) * HIDWORD(v10) == -1
      && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
    *(_QWORD *)&v22 = v8;
    *((_QWORD *)&v22 + 1) = v13;
    v23 = v14;
    v24 = v15;
    v25 = HIDWORD(v11);
    v26 = v12;
    v27 = v11;
    v19[0] = (uint64_t)&v16;
    v19[1] = (uint64_t)&v22;
    if ((_DWORD)v15 == 1 && DWORD1(v17) == 1)
    {
      sub_2109005E8(v19);
    }
    else
    {
      v20 = 0;
      if (DWORD2(v16) && HIDWORD(v16))
      {
        if ((_DWORD)v17)
        {
          v21 = &v20;
          sub_210900F9C((uint64_t)&v21, (uint64_t)&v16, (uint64_t)&v22);
        }
      }
    }
  }
}

uint64_t sub_2109C0664(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_2109C066C@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 14
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_2109C07E4@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 14
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_2109C095C(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1)
      goto LABEL_14;
    if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
    v2 = *(void **)(a1 + 72);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

uint64_t sub_2109C0A00(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 64);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 88) || *(_DWORD *)(a1 + 84) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 80) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 88);
    if (v5 * (*(_DWORD *)(a1 + 100) >> 1) != -1)
      goto LABEL_14;
    if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
    v2 = *(void **)(a1 + 64);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 64) = 0;
  return a1;
}

uint64_t sub_2109C0AA4(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1)
      goto LABEL_14;
    if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
    v2 = *(void **)(a1 + 72);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_2109C0B48(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1)
      goto LABEL_14;
    if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
    v2 = *(void **)(a1 + 72);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 72) = 0;
  JUMPOUT(0x212BCC6FCLL);
}

_UNKNOWN **sub_2109C0BFC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A75DC0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A75DC0))
    return &off_253ED6E50;
  __cxa_guard_release(&qword_254A75DC0);
  return &off_253ED6E50;
}

uint64_t sub_2109C0C50@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24CA838E0;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a1 + 56);
  result = sub_2109CFA20(v4 + 64, a1 + 64);
  *a2 = v4;
  return result;
}

void sub_2109C0CD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BCC6FC](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

double sub_2109C0CF4(uint64_t a1, void *lpsrc)
{
  unsigned int *v4;
  double result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _OWORD v21[3];
  _QWORD v22[2];
  __int128 v23;
  int v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24CA84C98, (const struct __class_type_info *)&unk_24CA846F0, 0);
  if (v4)
  {
    sub_2109DB8A0(a1 + 8, v4 + 2);
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v23, lpsrc, 15);
    v6 = v23;
    v8 = *(_OWORD *)(v23 + 16);
    v7 = *(_OWORD *)(v23 + 32);
    v21[0] = *(_OWORD *)v23;
    v21[1] = v8;
    v21[2] = v7;
    *(_QWORD *)&v23 = 0;
    MEMORY[0x212BCC6FC](v6, 0xC400A2AC0F1, v9, v10, v11, v12);
    v13 = *(_QWORD *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36))
      v14 = *(_DWORD *)(a1 + 32) == 0;
    else
      v14 = 1;
    v15 = *(_QWORD *)(a1 + 32);
    v16 = *(_QWORD *)(a1 + 40);
    if (v14)
      v15 = 0;
    LODWORD(v23) = 4;
    *(_QWORD *)((char *)&v23 + 4) = v15;
    v17 = v15;
    v18 = v23;
    v19 = HIDWORD(v15);
    LODWORD(v23) = 1;
    *(_QWORD *)((char *)&v23 + 4) = v16;
    v20 = v23;
    if (HIDWORD(v16) * HIDWORD(v15) == -1
      && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
    *(_QWORD *)&v23 = v13;
    *((_QWORD *)&v23 + 1) = v18;
    v24 = v19;
    v25 = v20;
    v26 = HIDWORD(v16);
    v27 = v17;
    v28 = v16;
    v22[0] = v21;
    v22[1] = &v23;
    return sub_210902AF8(v22);
  }
  return result;
}

uint64_t sub_2109C0ED0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_2109C0ED8@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 15
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_2109C1050@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 15
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_2109C11C8(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_2109C11F8(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  JUMPOUT(0x212BCC6FCLL);
}

_UNKNOWN **sub_2109C1238()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A75DC0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A75DC0))
    return &off_253ED6E50;
  __cxa_guard_release(&qword_254A75DC0);
  return &off_253ED6E50;
}

uint64_t sub_2109C128C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24CA83960;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a1 + 56);
  result = sub_2109CFE3C(v4 + 64, a1 + 64);
  *a2 = v4;
  return result;
}

void sub_2109C130C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BCC6FC](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

float sub_2109C1330(uint64_t a1, void *lpsrc)
{
  unsigned int *v4;
  float result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20[2];
  char v21;
  char *v22;
  __int128 v23;
  int v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24CA84C98, (const struct __class_type_info *)&unk_24CA84708, 0);
  if (v4)
  {
    sub_2109DC2D0(a1 + 8, v4 + 2);
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v23, lpsrc, 16);
    v6 = v23;
    v8 = *(_OWORD *)(v23 + 16);
    v7 = *(_OWORD *)(v23 + 32);
    v17 = *(_OWORD *)v23;
    v18 = v8;
    v19 = v7;
    *(_QWORD *)&v23 = 0;
    MEMORY[0x212BCC6FC](v6);
    v9 = *(_QWORD *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36))
      v10 = *(_DWORD *)(a1 + 32) == 0;
    else
      v10 = 1;
    v11 = *(_QWORD *)(a1 + 32);
    v12 = *(_QWORD *)(a1 + 40);
    if (v10)
      v11 = 0;
    LODWORD(v23) = 4;
    *(_QWORD *)((char *)&v23 + 4) = v11;
    v13 = v11;
    v14 = v23;
    v15 = HIDWORD(v11);
    LODWORD(v23) = 1;
    *(_QWORD *)((char *)&v23 + 4) = v12;
    v16 = v23;
    if (HIDWORD(v12) * HIDWORD(v11) == -1
      && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
    *(_QWORD *)&v23 = v9;
    *((_QWORD *)&v23 + 1) = v14;
    v24 = v15;
    v25 = v16;
    v26 = HIDWORD(v12);
    v27 = v13;
    v28 = v12;
    v20[0] = (uint64_t)&v17;
    v20[1] = (uint64_t)&v23;
    if ((_DWORD)v16 == 1 && DWORD1(v18) == 1)
    {
      sub_210903DA4(v20);
    }
    else
    {
      v21 = 0;
      if (DWORD2(v17) && HIDWORD(v17))
      {
        if ((_DWORD)v18)
        {
          v22 = &v21;
          return sub_210904698((uint64_t)&v22, (uint64_t)&v17, (uint64_t)&v23);
        }
      }
    }
  }
  return result;
}

uint64_t sub_2109C1558(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_2109C1560@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 16
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_2109C16D8@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 16
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_2109C1850(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_2109C1880(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  JUMPOUT(0x212BCC6FCLL);
}

_UNKNOWN **sub_2109C18C0()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A75DC0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A75DC0))
    return &off_253ED6E50;
  __cxa_guard_release(&qword_254A75DC0);
  return &off_253ED6E50;
}

uint64_t sub_2109C1914@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24CA839E0;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a1 + 56);
  result = sub_2109CE728(v4 + 64, a1 + 64);
  *a2 = v4;
  return result;
}

void sub_2109C1994(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BCC6FC](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

uint64_t sub_2109C19B8(uint64_t a1, void *lpsrc)
{
  unsigned int *v4;
  uint64_t result;
  __int128 v6;
  __int128 v7;
  _BYTE *v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  _BYTE *v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  _BYTE *v25;
  _BYTE *v26;
  int v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  size_t v31[2];
  __int128 v32;
  int v33;
  unint64_t v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24CA84C98, (const struct __class_type_info *)&unk_24CA84720, 0);
  if (v4)
    return sub_2109D7AD4(a1 + 8, v4 + 2);
  (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v32, lpsrc, 17);
  v7 = *(_OWORD *)(v32 + 16);
  v6 = *(_OWORD *)(v32 + 32);
  v28 = *(_OWORD *)v32;
  v29 = v7;
  v30 = v6;
  *(_QWORD *)&v32 = 0;
  result = MEMORY[0x212BCC6FC]();
  v8 = *(_BYTE **)(a1 + 72);
  if (*(_DWORD *)(a1 + 36))
    v9 = *(_DWORD *)(a1 + 32) == 0;
  else
    v9 = 1;
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  if (v9)
    v10 = 0;
  LODWORD(v32) = 3;
  *(_QWORD *)((char *)&v32 + 4) = v10;
  v12 = v10;
  v13 = v32;
  v14 = HIDWORD(v10);
  LODWORD(v32) = 1;
  *(_QWORD *)((char *)&v32 + 4) = v11;
  v15 = v32;
  v16 = HIDWORD(v11);
  if (HIDWORD(v11) * HIDWORD(v10) == -1)
  {
    result = sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4);
    if ((_DWORD)result)
      abort();
  }
  *(_QWORD *)&v32 = v8;
  *((_QWORD *)&v32 + 1) = v13;
  v33 = v14;
  v34 = v15;
  v35 = HIDWORD(v11);
  v36 = v12;
  v37 = v11;
  v31[0] = (size_t)&v28;
  v31[1] = (size_t)&v32;
  if ((_DWORD)v15 == 1 && DWORD1(v29) == 1)
    return (uint64_t)sub_2108FEBEC(v31);
  if (DWORD2(v28) && HIDWORD(v28) && (_DWORD)v29)
  {
    v17 = HIDWORD(v15);
    v18 = HIDWORD(v28) - 1;
    v19 = DWORD2(v29);
    v20 = (_BYTE *)v28;
    v21 = v29 - 1;
    if ((_DWORD)v29 != 1)
    {
      v22 = HIDWORD(v29);
      if (HIDWORD(v28) == 1)
      {
        do
        {
          *v8 = *v20;
          v8[1] = v20[1];
          v8[2] = v20[2];
          v20 += v22;
          v8 += v16;
          --v21;
        }
        while (v21);
      }
      else
      {
        v23 = 0;
        v24 = (uint64_t)(v8 + 2);
        v25 = (_BYTE *)(v28 + 2);
        do
        {
          v26 = v25;
          result = v24;
          v27 = v18;
          do
          {
            *(_BYTE *)(result - 2) = *(v26 - 2);
            *(_BYTE *)(result - 1) = *(v26 - 1);
            *(_BYTE *)result = *v26;
            result += v17;
            v26 += v19;
            --v27;
          }
          while (v27);
          *(_BYTE *)(result - 2) = *(v26 - 2);
          *(_BYTE *)(result - 1) = *(v26 - 1);
          *(_BYTE *)result = *v26;
          v20 += v22;
          v8 += v16;
          ++v23;
          v24 += v16;
          v25 += v22;
        }
        while (v23 != v21);
      }
    }
    for (; v18; --v18)
    {
      *v8 = *v20;
      v8[1] = v20[1];
      v8[2] = v20[2];
      v20 += v19;
      v8 += v17;
    }
    *v8 = *v20;
    v8[1] = v20[1];
    v8[2] = v20[2];
  }
  return result;
}

uint64_t sub_2109C1CC8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_2109C1CD0@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 17
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 3;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_2109C1E48@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 17
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 3;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_2109C1FC0(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_2109C1FF0(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  JUMPOUT(0x212BCC6FCLL);
}

_UNKNOWN **sub_2109C2030()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A75DC0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A75DC0))
    return &off_253ED6E50;
  __cxa_guard_release(&qword_254A75DC0);
  return &off_253ED6E50;
}

uint64_t sub_2109C2084@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24CA83A60;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a1 + 56);
  result = sub_2109CF018(v4 + 64, a1 + 64);
  *a2 = v4;
  return result;
}

void sub_2109C2104(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BCC6FC](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

uint64_t sub_2109C2128(uint64_t a1, void *lpsrc)
{
  unsigned int *v4;
  uint64_t result;
  __int128 v6;
  __int128 v7;
  _WORD *v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  _WORD *v20;
  int v21;
  uint64_t v22;
  int v23;
  _WORD *v24;
  _WORD *v25;
  _WORD *v26;
  int v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32[2];
  __int128 v33;
  int v34;
  unint64_t v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24CA84C98, (const struct __class_type_info *)&unk_24CA84738, 0);
  if (v4)
    return sub_2109D8218(a1 + 8, v4 + 2);
  (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v33, lpsrc, 18);
  v7 = *(_OWORD *)(v33 + 16);
  v6 = *(_OWORD *)(v33 + 32);
  v29 = *(_OWORD *)v33;
  v30 = v7;
  v31 = v6;
  *(_QWORD *)&v33 = 0;
  result = MEMORY[0x212BCC6FC]();
  v8 = *(_WORD **)(a1 + 72);
  if (*(_DWORD *)(a1 + 36))
    v9 = *(_DWORD *)(a1 + 32) == 0;
  else
    v9 = 1;
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  if (v9)
    v10 = 0;
  LODWORD(v33) = 3;
  *(_QWORD *)((char *)&v33 + 4) = v10;
  v12 = v10;
  v13 = v33;
  v14 = HIDWORD(v10);
  LODWORD(v33) = 1;
  *(_QWORD *)((char *)&v33 + 4) = v11;
  v15 = v33;
  v16 = HIDWORD(v11);
  if (HIDWORD(v11) * HIDWORD(v10) == -1)
  {
    result = sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4);
    if ((_DWORD)result)
      abort();
  }
  *(_QWORD *)&v33 = v8;
  *((_QWORD *)&v33 + 1) = v13;
  v34 = v14;
  v35 = v15;
  v36 = HIDWORD(v11);
  v37 = v12;
  v38 = v11;
  v32[0] = (uint64_t)&v29;
  v32[1] = (uint64_t)&v33;
  if ((_DWORD)v15 == 1 && DWORD1(v30) == 1)
    return (uint64_t)sub_2109005E8(v32);
  if (DWORD2(v29) && HIDWORD(v29) && (_DWORD)v30)
  {
    v17 = HIDWORD(v15);
    v18 = HIDWORD(v29) - 1;
    v19 = DWORD2(v30);
    v20 = (_WORD *)v29;
    v21 = v30 - 1;
    if ((_DWORD)v30 != 1)
    {
      v22 = HIDWORD(v30);
      if (HIDWORD(v29) == 1)
      {
        do
        {
          *v8 = *v20;
          v8[1] = v20[1];
          v8[2] = v20[2];
          v20 += v22;
          v8 += v16;
          --v21;
        }
        while (v21);
LABEL_27:
        *v8 = *v20;
        v8[1] = v20[1];
        v8[2] = v20[2];
        return result;
      }
      v23 = 0;
      v24 = v8 + 2;
      result = v29 + 4;
      do
      {
        v25 = (_WORD *)result;
        v26 = v24;
        v27 = v18;
        do
        {
          *(v26 - 2) = *(v25 - 2);
          *(v26 - 1) = *(v25 - 1);
          *v26 = *v25;
          v26 += v17;
          v25 += v19;
          --v27;
        }
        while (v27);
        *(v26 - 2) = *(v25 - 2);
        *(v26 - 1) = *(v25 - 1);
        *v26 = *v25;
        v20 += v22;
        v8 += v16;
        ++v23;
        v24 += v16;
        result += 2 * v22;
      }
      while (v23 != v21);
    }
    if (v18)
    {
      v28 = 2 * v17;
      do
      {
        *v8 = *v20;
        v8[1] = v20[1];
        v8[2] = v20[2];
        v20 += v19;
        v8 = (_WORD *)((char *)v8 + v28);
        --v18;
      }
      while (v18);
    }
    goto LABEL_27;
  }
  return result;
}

uint64_t sub_2109C2458(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_2109C2460@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 18
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 3;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_2109C25D8@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 18
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 3;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_2109C2750(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1)
      goto LABEL_14;
    if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
    v2 = *(void **)(a1 + 72);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

uint64_t sub_2109C27F4(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1)
      goto LABEL_14;
    if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
    v2 = *(void **)(a1 + 72);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_2109C2898(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1)
      goto LABEL_14;
    if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
    v2 = *(void **)(a1 + 72);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 72) = 0;
  JUMPOUT(0x212BCC6FCLL);
}

_UNKNOWN **sub_2109C294C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A75DC0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A75DC0))
    return &off_253ED6E50;
  __cxa_guard_release(&qword_254A75DC0);
  return &off_253ED6E50;
}

uint64_t sub_2109C29A0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24CA83AE0;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a1 + 56);
  result = sub_2109CFA20(v4 + 64, a1 + 64);
  *a2 = v4;
  return result;
}

void sub_2109C2A20(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BCC6FC](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

double sub_2109C2A44(uint64_t a1, void *lpsrc)
{
  unsigned int *v4;
  double result;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _OWORD v20[3];
  __int128 v21;
  int v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24CA84C98, (const struct __class_type_info *)&unk_24CA84750, 0);
  if (v4)
  {
    sub_2109D898C(a1 + 8, v4 + 2);
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v21, lpsrc, 19);
    v6 = v21;
    v7 = *(_OWORD *)(v21 + 16);
    v20[0] = *(_OWORD *)v21;
    v20[1] = v7;
    v20[2] = *(_OWORD *)(v21 + 32);
    *(_QWORD *)&v21 = 0;
    MEMORY[0x212BCC6FC](v6, 0xC400A2AC0F1, v8, v9, v10, v11);
    v12 = *(_QWORD *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36))
      v13 = *(_DWORD *)(a1 + 32) == 0;
    else
      v13 = 1;
    v14 = *(_QWORD *)(a1 + 32);
    v15 = *(_QWORD *)(a1 + 40);
    if (v13)
      v14 = 0;
    LODWORD(v21) = 3;
    *(_QWORD *)((char *)&v21 + 4) = v14;
    v16 = v14;
    v17 = v21;
    v18 = HIDWORD(v14);
    LODWORD(v21) = 1;
    *(_QWORD *)((char *)&v21 + 4) = v15;
    v19 = v21;
    if (HIDWORD(v15) * HIDWORD(v14) == -1
      && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
    *(_QWORD *)&v21 = v12;
    *((_QWORD *)&v21 + 1) = v17;
    v22 = v18;
    v23 = v19;
    v24 = HIDWORD(v15);
    v25 = v16;
    v26 = v15;
    *(_QWORD *)&result = sub_2109D9394((uint64_t)v20, (uint64_t)&v21);
  }
  return result;
}

uint64_t sub_2109C2C18(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_2109C2C20@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 19
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 3;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_2109C2D98@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 19
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 3;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_2109C2F10(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_2109C2F40(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  JUMPOUT(0x212BCC6FCLL);
}

_UNKNOWN **sub_2109C2F80()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A75DC0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A75DC0))
    return &off_253ED6E50;
  __cxa_guard_release(&qword_254A75DC0);
  return &off_253ED6E50;
}

uint64_t sub_2109C2FD4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24CA83B60;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a1 + 56);
  result = sub_2109CFE3C(v4 + 64, a1 + 64);
  *a2 = v4;
  return result;
}

void sub_2109C3054(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BCC6FC](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

float sub_2109C3078(uint64_t a1, void *lpsrc)
{
  unsigned int *v4;
  float result;
  __int128 v6;
  float *v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  float *v19;
  int v20;
  uint64_t v21;
  int v22;
  _DWORD *v23;
  _DWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  int v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  int v33;
  unint64_t v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24CA84C98, (const struct __class_type_info *)&unk_24CA84768, 0);
  if (v4)
  {
    sub_2109D9C64(a1 + 8, v4 + 2);
    return result;
  }
  (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v32, lpsrc, 20);
  v6 = *(_OWORD *)(v32 + 16);
  v29 = *(_OWORD *)v32;
  v30 = v6;
  v31 = *(_OWORD *)(v32 + 32);
  *(_QWORD *)&v32 = 0;
  MEMORY[0x212BCC6FC]();
  v7 = *(float **)(a1 + 72);
  if (*(_DWORD *)(a1 + 36))
    v8 = *(_DWORD *)(a1 + 32) == 0;
  else
    v8 = 1;
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  if (v8)
    v9 = 0;
  LODWORD(v32) = 3;
  *(_QWORD *)((char *)&v32 + 4) = v9;
  v11 = v9;
  v12 = v32;
  v13 = HIDWORD(v9);
  LODWORD(v32) = 1;
  *(_QWORD *)((char *)&v32 + 4) = v10;
  v14 = v32;
  v15 = HIDWORD(v10);
  if (HIDWORD(v10) * HIDWORD(v9) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
  *(_QWORD *)&v32 = v7;
  *((_QWORD *)&v32 + 1) = v12;
  v33 = v13;
  v34 = v14;
  v35 = HIDWORD(v10);
  v36 = v11;
  v37 = v10;
  if ((_DWORD)v14 == 1 && DWORD1(v30) == 1)
  {
    sub_2109DA3D8(&v29, (char **)&v32);
    return result;
  }
  if (DWORD2(v29) && HIDWORD(v29) && (_DWORD)v30)
  {
    v16 = HIDWORD(v14);
    v17 = HIDWORD(v29) - 1;
    v18 = DWORD2(v30);
    v19 = (float *)v29;
    v20 = v30 - 1;
    if ((_DWORD)v30 != 1)
    {
      v21 = HIDWORD(v30);
      if (HIDWORD(v29) == 1)
      {
        do
        {
          *v7 = *v19;
          v7[1] = v19[1];
          v7[2] = v19[2];
          v19 += v21;
          v7 += v15;
          --v20;
        }
        while (v20);
LABEL_27:
        *v7 = *v19;
        v7[1] = v19[1];
        result = v19[2];
        v7[2] = result;
        return result;
      }
      v22 = 0;
      v23 = v7 + 2;
      v24 = (_DWORD *)(v29 + 8);
      do
      {
        v25 = v24;
        v26 = v23;
        v27 = v17;
        do
        {
          *(v26 - 2) = *(v25 - 2);
          *(v26 - 1) = *(v25 - 1);
          *v26 = *v25;
          v26 += v16;
          v25 += v18;
          --v27;
        }
        while (v27);
        *(v26 - 2) = *(v25 - 2);
        *(v26 - 1) = *(v25 - 1);
        *v26 = *v25;
        v19 += v21;
        v7 += v15;
        ++v22;
        v23 += v15;
        v24 += v21;
      }
      while (v22 != v20);
    }
    if (v17)
    {
      v28 = 4 * v16;
      do
      {
        *v7 = *v19;
        v7[1] = v19[1];
        v7[2] = v19[2];
        v19 += v18;
        v7 = (float *)((char *)v7 + v28);
        --v17;
      }
      while (v17);
    }
    goto LABEL_27;
  }
  return result;
}

uint64_t sub_2109C33A0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_2109C33A8@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 20
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 3;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_2109C3520@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 20
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 3;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_2109C3698(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_2109C36C8(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  JUMPOUT(0x212BCC6FCLL);
}

_UNKNOWN **sub_2109C3708()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A75DC0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A75DC0))
    return &off_253ED6E50;
  __cxa_guard_release(&qword_254A75DC0);
  return &off_253ED6E50;
}

uint64_t sub_2109C375C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24CA83BE0;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a1 + 56);
  result = sub_2109CE728(v4 + 64, a1 + 64);
  *a2 = v4;
  return result;
}

void sub_2109C37DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BCC6FC](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

uint64_t sub_2109C3800(uint64_t a1, void *lpsrc)
{
  unsigned int *v4;
  uint64_t result;
  __int128 v6;
  __int128 v7;
  _BYTE *v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  _BYTE *v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  _BYTE *v25;
  _BYTE *v26;
  int v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  size_t v31[2];
  __int128 v32;
  int v33;
  unint64_t v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24CA84C98, (const struct __class_type_info *)&unk_24CA84780, 0);
  if (v4)
    return sub_2109D7AD4(a1 + 8, v4 + 2);
  (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v32, lpsrc, 21);
  v7 = *(_OWORD *)(v32 + 16);
  v6 = *(_OWORD *)(v32 + 32);
  v28 = *(_OWORD *)v32;
  v29 = v7;
  v30 = v6;
  *(_QWORD *)&v32 = 0;
  result = MEMORY[0x212BCC6FC]();
  v8 = *(_BYTE **)(a1 + 72);
  if (*(_DWORD *)(a1 + 36))
    v9 = *(_DWORD *)(a1 + 32) == 0;
  else
    v9 = 1;
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  if (v9)
    v10 = 0;
  LODWORD(v32) = 3;
  *(_QWORD *)((char *)&v32 + 4) = v10;
  v12 = v10;
  v13 = v32;
  v14 = HIDWORD(v10);
  LODWORD(v32) = 1;
  *(_QWORD *)((char *)&v32 + 4) = v11;
  v15 = v32;
  v16 = HIDWORD(v11);
  if (HIDWORD(v11) * HIDWORD(v10) == -1)
  {
    result = sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4);
    if ((_DWORD)result)
      abort();
  }
  *(_QWORD *)&v32 = v8;
  *((_QWORD *)&v32 + 1) = v13;
  v33 = v14;
  v34 = v15;
  v35 = HIDWORD(v11);
  v36 = v12;
  v37 = v11;
  v31[0] = (size_t)&v28;
  v31[1] = (size_t)&v32;
  if ((_DWORD)v15 == 1 && DWORD1(v29) == 1)
    return (uint64_t)sub_2108FEBEC(v31);
  if (DWORD2(v28) && HIDWORD(v28) && (_DWORD)v29)
  {
    v17 = HIDWORD(v15);
    v18 = HIDWORD(v28) - 1;
    v19 = DWORD2(v29);
    v20 = (_BYTE *)v28;
    v21 = v29 - 1;
    if ((_DWORD)v29 != 1)
    {
      v22 = HIDWORD(v29);
      if (HIDWORD(v28) == 1)
      {
        do
        {
          *v8 = *v20;
          v8[1] = v20[1];
          v8[2] = v20[2];
          v20 += v22;
          v8 += v16;
          --v21;
        }
        while (v21);
      }
      else
      {
        v23 = 0;
        v24 = (uint64_t)(v8 + 2);
        v25 = (_BYTE *)(v28 + 2);
        do
        {
          v26 = v25;
          result = v24;
          v27 = v18;
          do
          {
            *(_BYTE *)(result - 2) = *(v26 - 2);
            *(_BYTE *)(result - 1) = *(v26 - 1);
            *(_BYTE *)result = *v26;
            result += v17;
            v26 += v19;
            --v27;
          }
          while (v27);
          *(_BYTE *)(result - 2) = *(v26 - 2);
          *(_BYTE *)(result - 1) = *(v26 - 1);
          *(_BYTE *)result = *v26;
          v20 += v22;
          v8 += v16;
          ++v23;
          v24 += v16;
          v25 += v22;
        }
        while (v23 != v21);
      }
    }
    for (; v18; --v18)
    {
      *v8 = *v20;
      v8[1] = v20[1];
      v8[2] = v20[2];
      v20 += v19;
      v8 += v17;
    }
    *v8 = *v20;
    v8[1] = v20[1];
    v8[2] = v20[2];
  }
  return result;
}

uint64_t sub_2109C3B10(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_2109C3B18@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 21
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 3;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_2109C3C90@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 21
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 3;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_2109C3E08(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_2109C3E38(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  JUMPOUT(0x212BCC6FCLL);
}

_UNKNOWN **sub_2109C3E78()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A75DC0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A75DC0))
    return &off_253ED6E50;
  __cxa_guard_release(&qword_254A75DC0);
  return &off_253ED6E50;
}

uint64_t sub_2109C3ECC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24CA83C60;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a1 + 56);
  result = sub_2109CF018(v4 + 64, a1 + 64);
  *a2 = v4;
  return result;
}

void sub_2109C3F4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BCC6FC](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

uint64_t sub_2109C3F70(uint64_t a1, void *lpsrc)
{
  unsigned int *v4;
  uint64_t result;
  __int128 v6;
  __int128 v7;
  _WORD *v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  _WORD *v20;
  int v21;
  uint64_t v22;
  int v23;
  _WORD *v24;
  _WORD *v25;
  _WORD *v26;
  int v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32[2];
  __int128 v33;
  int v34;
  unint64_t v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24CA84C98, (const struct __class_type_info *)&unk_24CA84798, 0);
  if (v4)
    return sub_2109D8218(a1 + 8, v4 + 2);
  (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v33, lpsrc, 22);
  v7 = *(_OWORD *)(v33 + 16);
  v6 = *(_OWORD *)(v33 + 32);
  v29 = *(_OWORD *)v33;
  v30 = v7;
  v31 = v6;
  *(_QWORD *)&v33 = 0;
  result = MEMORY[0x212BCC6FC]();
  v8 = *(_WORD **)(a1 + 72);
  if (*(_DWORD *)(a1 + 36))
    v9 = *(_DWORD *)(a1 + 32) == 0;
  else
    v9 = 1;
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  if (v9)
    v10 = 0;
  LODWORD(v33) = 3;
  *(_QWORD *)((char *)&v33 + 4) = v10;
  v12 = v10;
  v13 = v33;
  v14 = HIDWORD(v10);
  LODWORD(v33) = 1;
  *(_QWORD *)((char *)&v33 + 4) = v11;
  v15 = v33;
  v16 = HIDWORD(v11);
  if (HIDWORD(v11) * HIDWORD(v10) == -1)
  {
    result = sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4);
    if ((_DWORD)result)
      abort();
  }
  *(_QWORD *)&v33 = v8;
  *((_QWORD *)&v33 + 1) = v13;
  v34 = v14;
  v35 = v15;
  v36 = HIDWORD(v11);
  v37 = v12;
  v38 = v11;
  v32[0] = (uint64_t)&v29;
  v32[1] = (uint64_t)&v33;
  if ((_DWORD)v15 == 1 && DWORD1(v30) == 1)
    return (uint64_t)sub_2109005E8(v32);
  if (DWORD2(v29) && HIDWORD(v29) && (_DWORD)v30)
  {
    v17 = HIDWORD(v15);
    v18 = HIDWORD(v29) - 1;
    v19 = DWORD2(v30);
    v20 = (_WORD *)v29;
    v21 = v30 - 1;
    if ((_DWORD)v30 != 1)
    {
      v22 = HIDWORD(v30);
      if (HIDWORD(v29) == 1)
      {
        do
        {
          *v8 = *v20;
          v8[1] = v20[1];
          v8[2] = v20[2];
          v20 += v22;
          v8 += v16;
          --v21;
        }
        while (v21);
LABEL_27:
        *v8 = *v20;
        v8[1] = v20[1];
        v8[2] = v20[2];
        return result;
      }
      v23 = 0;
      v24 = v8 + 2;
      result = v29 + 4;
      do
      {
        v25 = (_WORD *)result;
        v26 = v24;
        v27 = v18;
        do
        {
          *(v26 - 2) = *(v25 - 2);
          *(v26 - 1) = *(v25 - 1);
          *v26 = *v25;
          v26 += v17;
          v25 += v19;
          --v27;
        }
        while (v27);
        *(v26 - 2) = *(v25 - 2);
        *(v26 - 1) = *(v25 - 1);
        *v26 = *v25;
        v20 += v22;
        v8 += v16;
        ++v23;
        v24 += v16;
        result += 2 * v22;
      }
      while (v23 != v21);
    }
    if (v18)
    {
      v28 = 2 * v17;
      do
      {
        *v8 = *v20;
        v8[1] = v20[1];
        v8[2] = v20[2];
        v20 += v19;
        v8 = (_WORD *)((char *)v8 + v28);
        --v18;
      }
      while (v18);
    }
    goto LABEL_27;
  }
  return result;
}

uint64_t sub_2109C42A0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_2109C42A8@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 22
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 3;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_2109C4420@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 22
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 3;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_2109C4598(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1)
      goto LABEL_14;
    if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
    v2 = *(void **)(a1 + 72);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

uint64_t sub_2109C463C(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1)
      goto LABEL_14;
    if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
    v2 = *(void **)(a1 + 72);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_2109C46E0(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1)
      goto LABEL_14;
    if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
    v2 = *(void **)(a1 + 72);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 72) = 0;
  JUMPOUT(0x212BCC6FCLL);
}

_UNKNOWN **sub_2109C4794()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A75DC0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A75DC0))
    return &off_253ED6E50;
  __cxa_guard_release(&qword_254A75DC0);
  return &off_253ED6E50;
}

uint64_t sub_2109C47E8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24CA83CE0;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a1 + 56);
  result = sub_2109CFA20(v4 + 64, a1 + 64);
  *a2 = v4;
  return result;
}

void sub_2109C4868(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BCC6FC](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

double sub_2109C488C(uint64_t a1, void *lpsrc)
{
  unsigned int *v4;
  double result;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _OWORD v20[3];
  __int128 v21;
  int v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24CA84C98, (const struct __class_type_info *)&unk_24CA847B0, 0);
  if (v4)
  {
    sub_2109D898C(a1 + 8, v4 + 2);
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v21, lpsrc, 23);
    v6 = v21;
    v7 = *(_OWORD *)(v21 + 16);
    v20[0] = *(_OWORD *)v21;
    v20[1] = v7;
    v20[2] = *(_OWORD *)(v21 + 32);
    *(_QWORD *)&v21 = 0;
    MEMORY[0x212BCC6FC](v6, 0xC400A2AC0F1, v8, v9, v10, v11);
    v12 = *(_QWORD *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36))
      v13 = *(_DWORD *)(a1 + 32) == 0;
    else
      v13 = 1;
    v14 = *(_QWORD *)(a1 + 32);
    v15 = *(_QWORD *)(a1 + 40);
    if (v13)
      v14 = 0;
    LODWORD(v21) = 3;
    *(_QWORD *)((char *)&v21 + 4) = v14;
    v16 = v14;
    v17 = v21;
    v18 = HIDWORD(v14);
    LODWORD(v21) = 1;
    *(_QWORD *)((char *)&v21 + 4) = v15;
    v19 = v21;
    if (HIDWORD(v15) * HIDWORD(v14) == -1
      && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
    *(_QWORD *)&v21 = v12;
    *((_QWORD *)&v21 + 1) = v17;
    v22 = v18;
    v23 = v19;
    v24 = HIDWORD(v15);
    v25 = v16;
    v26 = v15;
    *(_QWORD *)&result = sub_2109D9394((uint64_t)v20, (uint64_t)&v21);
  }
  return result;
}

uint64_t sub_2109C4A60(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_2109C4A68@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 23
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 3;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_2109C4BE0@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 23
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 3;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_2109C4D58(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_2109C4D88(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  JUMPOUT(0x212BCC6FCLL);
}

_UNKNOWN **sub_2109C4DC8()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A75DC0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A75DC0))
    return &off_253ED6E50;
  __cxa_guard_release(&qword_254A75DC0);
  return &off_253ED6E50;
}

uint64_t sub_2109C4E1C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24CA83D60;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a1 + 56);
  result = sub_2109CFE3C(v4 + 64, a1 + 64);
  *a2 = v4;
  return result;
}

void sub_2109C4E9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BCC6FC](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

float sub_2109C4EC0(uint64_t a1, void *lpsrc)
{
  unsigned int *v4;
  float result;
  __int128 v6;
  float *v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  float *v19;
  int v20;
  uint64_t v21;
  int v22;
  _DWORD *v23;
  _DWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  int v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  int v33;
  unint64_t v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24CA84C98, (const struct __class_type_info *)&unk_24CA847C8, 0);
  if (v4)
  {
    sub_2109D9C64(a1 + 8, v4 + 2);
    return result;
  }
  (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v32, lpsrc, 24);
  v6 = *(_OWORD *)(v32 + 16);
  v29 = *(_OWORD *)v32;
  v30 = v6;
  v31 = *(_OWORD *)(v32 + 32);
  *(_QWORD *)&v32 = 0;
  MEMORY[0x212BCC6FC]();
  v7 = *(float **)(a1 + 72);
  if (*(_DWORD *)(a1 + 36))
    v8 = *(_DWORD *)(a1 + 32) == 0;
  else
    v8 = 1;
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  if (v8)
    v9 = 0;
  LODWORD(v32) = 3;
  *(_QWORD *)((char *)&v32 + 4) = v9;
  v11 = v9;
  v12 = v32;
  v13 = HIDWORD(v9);
  LODWORD(v32) = 1;
  *(_QWORD *)((char *)&v32 + 4) = v10;
  v14 = v32;
  v15 = HIDWORD(v10);
  if (HIDWORD(v10) * HIDWORD(v9) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
  *(_QWORD *)&v32 = v7;
  *((_QWORD *)&v32 + 1) = v12;
  v33 = v13;
  v34 = v14;
  v35 = HIDWORD(v10);
  v36 = v11;
  v37 = v10;
  if ((_DWORD)v14 == 1 && DWORD1(v30) == 1)
  {
    sub_2109DA3D8(&v29, (char **)&v32);
    return result;
  }
  if (DWORD2(v29) && HIDWORD(v29) && (_DWORD)v30)
  {
    v16 = HIDWORD(v14);
    v17 = HIDWORD(v29) - 1;
    v18 = DWORD2(v30);
    v19 = (float *)v29;
    v20 = v30 - 1;
    if ((_DWORD)v30 != 1)
    {
      v21 = HIDWORD(v30);
      if (HIDWORD(v29) == 1)
      {
        do
        {
          *v7 = *v19;
          v7[1] = v19[1];
          v7[2] = v19[2];
          v19 += v21;
          v7 += v15;
          --v20;
        }
        while (v20);
LABEL_27:
        *v7 = *v19;
        v7[1] = v19[1];
        result = v19[2];
        v7[2] = result;
        return result;
      }
      v22 = 0;
      v23 = v7 + 2;
      v24 = (_DWORD *)(v29 + 8);
      do
      {
        v25 = v24;
        v26 = v23;
        v27 = v17;
        do
        {
          *(v26 - 2) = *(v25 - 2);
          *(v26 - 1) = *(v25 - 1);
          *v26 = *v25;
          v26 += v16;
          v25 += v18;
          --v27;
        }
        while (v27);
        *(v26 - 2) = *(v25 - 2);
        *(v26 - 1) = *(v25 - 1);
        *v26 = *v25;
        v19 += v21;
        v7 += v15;
        ++v22;
        v23 += v15;
        v24 += v21;
      }
      while (v22 != v20);
    }
    if (v17)
    {
      v28 = 4 * v16;
      do
      {
        *v7 = *v19;
        v7[1] = v19[1];
        v7[2] = v19[2];
        v19 += v18;
        v7 = (float *)((char *)v7 + v28);
        --v17;
      }
      while (v17);
    }
    goto LABEL_27;
  }
  return result;
}

uint64_t sub_2109C51E8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_2109C51F0@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 24
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 3;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_2109C5368@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 24
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 3;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_2109C54E0(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_2109C5510(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  JUMPOUT(0x212BCC6FCLL);
}

_UNKNOWN **sub_2109C5550()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A75DC0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A75DC0))
    return &off_253ED6E50;
  __cxa_guard_release(&qword_254A75DC0);
  return &off_253ED6E50;
}

uint64_t sub_2109C55A4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24CA83DE0;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a1 + 56);
  result = sub_2109CE728(v4 + 64, a1 + 64);
  *a2 = v4;
  return result;
}

void sub_2109C5624(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BCC6FC](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

void sub_2109C5648(uint64_t a1, void *lpsrc)
{
  unsigned int *v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  size_t v19[2];
  char v20;
  char *v21;
  __int128 v22;
  int v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24CA84C98, (const struct __class_type_info *)&unk_24CA847E0, 0);
  if (v4)
  {
    sub_2109DA998(a1 + 8, v4 + 2);
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v22, lpsrc, 25);
    v5 = v22;
    v7 = *(_OWORD *)(v22 + 16);
    v6 = *(_OWORD *)(v22 + 32);
    v16 = *(_OWORD *)v22;
    v17 = v7;
    v18 = v6;
    *(_QWORD *)&v22 = 0;
    MEMORY[0x212BCC6FC](v5);
    v8 = *(_QWORD *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36))
      v9 = *(_DWORD *)(a1 + 32) == 0;
    else
      v9 = 1;
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(_QWORD *)(a1 + 40);
    if (v9)
      v10 = 0;
    LODWORD(v22) = 4;
    *(_QWORD *)((char *)&v22 + 4) = v10;
    v12 = v10;
    v13 = v22;
    v14 = HIDWORD(v10);
    LODWORD(v22) = 1;
    *(_QWORD *)((char *)&v22 + 4) = v11;
    v15 = v22;
    if (HIDWORD(v11) * HIDWORD(v10) == -1
      && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
    *(_QWORD *)&v22 = v8;
    *((_QWORD *)&v22 + 1) = v13;
    v23 = v14;
    v24 = v15;
    v25 = HIDWORD(v11);
    v26 = v12;
    v27 = v11;
    v19[0] = (size_t)&v16;
    v19[1] = (size_t)&v22;
    if ((_DWORD)v15 == 1 && DWORD1(v17) == 1)
    {
      sub_2108FEBEC(v19);
    }
    else
    {
      v20 = 0;
      if (DWORD2(v16) && HIDWORD(v16))
      {
        if ((_DWORD)v17)
        {
          v21 = &v20;
          sub_2108FF6CC((uint64_t)&v21, (uint64_t)&v16, (uint64_t)&v22);
        }
      }
    }
  }
}

uint64_t sub_2109C5870(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_2109C5878@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 25
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_2109C59F0@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 25
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_2109C5B68(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_2109C5B98(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  JUMPOUT(0x212BCC6FCLL);
}

_UNKNOWN **sub_2109C5BD8()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A75DC0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A75DC0))
    return &off_253ED6E50;
  __cxa_guard_release(&qword_254A75DC0);
  return &off_253ED6E50;
}

uint64_t sub_2109C5C2C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24CA83E60;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a1 + 56);
  result = sub_2109CF018(v4 + 64, a1 + 64);
  *a2 = v4;
  return result;
}

void sub_2109C5CAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BCC6FC](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

void sub_2109C5CD0(uint64_t a1, void *lpsrc)
{
  unsigned int *v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19[2];
  char v20;
  char *v21;
  __int128 v22;
  int v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24CA84C98, (const struct __class_type_info *)&unk_24CA847F8, 0);
  if (v4)
  {
    sub_2109DB104(a1 + 8, v4 + 2);
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v22, lpsrc, 26);
    v5 = v22;
    v7 = *(_OWORD *)(v22 + 16);
    v6 = *(_OWORD *)(v22 + 32);
    v16 = *(_OWORD *)v22;
    v17 = v7;
    v18 = v6;
    *(_QWORD *)&v22 = 0;
    MEMORY[0x212BCC6FC](v5);
    v8 = *(_QWORD *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36))
      v9 = *(_DWORD *)(a1 + 32) == 0;
    else
      v9 = 1;
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(_QWORD *)(a1 + 40);
    if (v9)
      v10 = 0;
    LODWORD(v22) = 4;
    *(_QWORD *)((char *)&v22 + 4) = v10;
    v12 = v10;
    v13 = v22;
    v14 = HIDWORD(v10);
    LODWORD(v22) = 1;
    *(_QWORD *)((char *)&v22 + 4) = v11;
    v15 = v22;
    if (HIDWORD(v11) * HIDWORD(v10) == -1
      && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
    *(_QWORD *)&v22 = v8;
    *((_QWORD *)&v22 + 1) = v13;
    v23 = v14;
    v24 = v15;
    v25 = HIDWORD(v11);
    v26 = v12;
    v27 = v11;
    v19[0] = (uint64_t)&v16;
    v19[1] = (uint64_t)&v22;
    if ((_DWORD)v15 == 1 && DWORD1(v17) == 1)
    {
      sub_2109005E8(v19);
    }
    else
    {
      v20 = 0;
      if (DWORD2(v16) && HIDWORD(v16))
      {
        if ((_DWORD)v17)
        {
          v21 = &v20;
          sub_210900F9C((uint64_t)&v21, (uint64_t)&v16, (uint64_t)&v22);
        }
      }
    }
  }
}

uint64_t sub_2109C5EF8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_2109C5F00@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 26
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_2109C6078@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 26
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_2109C61F0(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1)
      goto LABEL_14;
    if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
    v2 = *(void **)(a1 + 72);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

uint64_t sub_2109C6294(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1)
      goto LABEL_14;
    if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
    v2 = *(void **)(a1 + 72);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_2109C6338(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1)
      goto LABEL_14;
    if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
    v2 = *(void **)(a1 + 72);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 72) = 0;
  JUMPOUT(0x212BCC6FCLL);
}

_UNKNOWN **sub_2109C63EC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A75DC0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A75DC0))
    return &off_253ED6E50;
  __cxa_guard_release(&qword_254A75DC0);
  return &off_253ED6E50;
}

uint64_t sub_2109C6440@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24CA83EE0;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a1 + 56);
  result = sub_2109CFA20(v4 + 64, a1 + 64);
  *a2 = v4;
  return result;
}

void sub_2109C64C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BCC6FC](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

double sub_2109C64E4(uint64_t a1, void *lpsrc)
{
  unsigned int *v4;
  double result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _OWORD v21[3];
  _QWORD v22[2];
  __int128 v23;
  int v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24CA84C98, (const struct __class_type_info *)&unk_24CA84810, 0);
  if (v4)
  {
    sub_2109DB8A0(a1 + 8, v4 + 2);
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v23, lpsrc, 27);
    v6 = v23;
    v8 = *(_OWORD *)(v23 + 16);
    v7 = *(_OWORD *)(v23 + 32);
    v21[0] = *(_OWORD *)v23;
    v21[1] = v8;
    v21[2] = v7;
    *(_QWORD *)&v23 = 0;
    MEMORY[0x212BCC6FC](v6, 0xC400A2AC0F1, v9, v10, v11, v12);
    v13 = *(_QWORD *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36))
      v14 = *(_DWORD *)(a1 + 32) == 0;
    else
      v14 = 1;
    v15 = *(_QWORD *)(a1 + 32);
    v16 = *(_QWORD *)(a1 + 40);
    if (v14)
      v15 = 0;
    LODWORD(v23) = 4;
    *(_QWORD *)((char *)&v23 + 4) = v15;
    v17 = v15;
    v18 = v23;
    v19 = HIDWORD(v15);
    LODWORD(v23) = 1;
    *(_QWORD *)((char *)&v23 + 4) = v16;
    v20 = v23;
    if (HIDWORD(v16) * HIDWORD(v15) == -1
      && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
    *(_QWORD *)&v23 = v13;
    *((_QWORD *)&v23 + 1) = v18;
    v24 = v19;
    v25 = v20;
    v26 = HIDWORD(v16);
    v27 = v17;
    v28 = v16;
    v22[0] = v21;
    v22[1] = &v23;
    return sub_210902AF8(v22);
  }
  return result;
}

uint64_t sub_2109C66C0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_2109C66C8@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 27
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_2109C6840@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 27
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_2109C69B8(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_2109C69E8(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  JUMPOUT(0x212BCC6FCLL);
}

_UNKNOWN **sub_2109C6A28()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A75DC0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A75DC0))
    return &off_253ED6E50;
  __cxa_guard_release(&qword_254A75DC0);
  return &off_253ED6E50;
}

uint64_t sub_2109C6A7C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24CA83F60;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a1 + 56);
  result = sub_2109CFE3C(v4 + 64, a1 + 64);
  *a2 = v4;
  return result;
}

void sub_2109C6AFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BCC6FC](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

float sub_2109C6B20(uint64_t a1, void *lpsrc)
{
  unsigned int *v4;
  float result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20[2];
  char v21;
  char *v22;
  __int128 v23;
  int v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24CA84C98, (const struct __class_type_info *)&unk_24CA84828, 0);
  if (v4)
  {
    sub_2109DC2D0(a1 + 8, v4 + 2);
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v23, lpsrc, 28);
    v6 = v23;
    v8 = *(_OWORD *)(v23 + 16);
    v7 = *(_OWORD *)(v23 + 32);
    v17 = *(_OWORD *)v23;
    v18 = v8;
    v19 = v7;
    *(_QWORD *)&v23 = 0;
    MEMORY[0x212BCC6FC](v6);
    v9 = *(_QWORD *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36))
      v10 = *(_DWORD *)(a1 + 32) == 0;
    else
      v10 = 1;
    v11 = *(_QWORD *)(a1 + 32);
    v12 = *(_QWORD *)(a1 + 40);
    if (v10)
      v11 = 0;
    LODWORD(v23) = 4;
    *(_QWORD *)((char *)&v23 + 4) = v11;
    v13 = v11;
    v14 = v23;
    v15 = HIDWORD(v11);
    LODWORD(v23) = 1;
    *(_QWORD *)((char *)&v23 + 4) = v12;
    v16 = v23;
    if (HIDWORD(v12) * HIDWORD(v11) == -1
      && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
    *(_QWORD *)&v23 = v9;
    *((_QWORD *)&v23 + 1) = v14;
    v24 = v15;
    v25 = v16;
    v26 = HIDWORD(v12);
    v27 = v13;
    v28 = v12;
    v20[0] = (uint64_t)&v17;
    v20[1] = (uint64_t)&v23;
    if ((_DWORD)v16 == 1 && DWORD1(v18) == 1)
    {
      sub_210903DA4(v20);
    }
    else
    {
      v21 = 0;
      if (DWORD2(v17) && HIDWORD(v17))
      {
        if ((_DWORD)v18)
        {
          v22 = &v21;
          return sub_210904698((uint64_t)&v22, (uint64_t)&v17, (uint64_t)&v23);
        }
      }
    }
  }
  return result;
}

uint64_t sub_2109C6D48(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_2109C6D50@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 28
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_2109C6EC8@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 28
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_2109C7040(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_2109C7070(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  JUMPOUT(0x212BCC6FCLL);
}

_UNKNOWN **sub_2109C70B0()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A75DC0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A75DC0))
    return &off_253ED6E50;
  __cxa_guard_release(&qword_254A75DC0);
  return &off_253ED6E50;
}

uint64_t sub_2109C7104@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24CA83FE0;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a1 + 56);
  result = sub_2109CE728(v4 + 64, a1 + 64);
  *a2 = v4;
  return result;
}

void sub_2109C7184(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BCC6FC](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

void sub_2109C71A8(uint64_t a1, void *lpsrc)
{
  unsigned int *v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  size_t v19[2];
  char v20;
  char *v21;
  __int128 v22;
  int v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24CA84C98, (const struct __class_type_info *)&unk_24CA84840, 0);
  if (v4)
  {
    sub_2109DA998(a1 + 8, v4 + 2);
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v22, lpsrc, 29);
    v5 = v22;
    v7 = *(_OWORD *)(v22 + 16);
    v6 = *(_OWORD *)(v22 + 32);
    v16 = *(_OWORD *)v22;
    v17 = v7;
    v18 = v6;
    *(_QWORD *)&v22 = 0;
    MEMORY[0x212BCC6FC](v5);
    v8 = *(_QWORD *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36))
      v9 = *(_DWORD *)(a1 + 32) == 0;
    else
      v9 = 1;
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(_QWORD *)(a1 + 40);
    if (v9)
      v10 = 0;
    LODWORD(v22) = 4;
    *(_QWORD *)((char *)&v22 + 4) = v10;
    v12 = v10;
    v13 = v22;
    v14 = HIDWORD(v10);
    LODWORD(v22) = 1;
    *(_QWORD *)((char *)&v22 + 4) = v11;
    v15 = v22;
    if (HIDWORD(v11) * HIDWORD(v10) == -1
      && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
    *(_QWORD *)&v22 = v8;
    *((_QWORD *)&v22 + 1) = v13;
    v23 = v14;
    v24 = v15;
    v25 = HIDWORD(v11);
    v26 = v12;
    v27 = v11;
    v19[0] = (size_t)&v16;
    v19[1] = (size_t)&v22;
    if ((_DWORD)v15 == 1 && DWORD1(v17) == 1)
    {
      sub_2108FEBEC(v19);
    }
    else
    {
      v20 = 0;
      if (DWORD2(v16) && HIDWORD(v16))
      {
        if ((_DWORD)v17)
        {
          v21 = &v20;
          sub_2108FF6CC((uint64_t)&v21, (uint64_t)&v16, (uint64_t)&v22);
        }
      }
    }
  }
}

uint64_t sub_2109C73D0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_2109C73D8@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 29
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_2109C7550@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 29
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_2109C76C8(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_2109C76F8(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  JUMPOUT(0x212BCC6FCLL);
}

_UNKNOWN **sub_2109C7738()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A75DC0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A75DC0))
    return &off_253ED6E50;
  __cxa_guard_release(&qword_254A75DC0);
  return &off_253ED6E50;
}

uint64_t sub_2109C778C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24CA84060;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a1 + 56);
  result = sub_2109CF018(v4 + 64, a1 + 64);
  *a2 = v4;
  return result;
}

void sub_2109C780C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BCC6FC](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

void sub_2109C7830(uint64_t a1, void *lpsrc)
{
  unsigned int *v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19[2];
  char v20;
  char *v21;
  __int128 v22;
  int v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24CA84C98, (const struct __class_type_info *)&unk_24CA84858, 0);
  if (v4)
  {
    sub_2109DB104(a1 + 8, v4 + 2);
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v22, lpsrc, 30);
    v5 = v22;
    v7 = *(_OWORD *)(v22 + 16);
    v6 = *(_OWORD *)(v22 + 32);
    v16 = *(_OWORD *)v22;
    v17 = v7;
    v18 = v6;
    *(_QWORD *)&v22 = 0;
    MEMORY[0x212BCC6FC](v5);
    v8 = *(_QWORD *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36))
      v9 = *(_DWORD *)(a1 + 32) == 0;
    else
      v9 = 1;
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(_QWORD *)(a1 + 40);
    if (v9)
      v10 = 0;
    LODWORD(v22) = 4;
    *(_QWORD *)((char *)&v22 + 4) = v10;
    v12 = v10;
    v13 = v22;
    v14 = HIDWORD(v10);
    LODWORD(v22) = 1;
    *(_QWORD *)((char *)&v22 + 4) = v11;
    v15 = v22;
    if (HIDWORD(v11) * HIDWORD(v10) == -1
      && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
    *(_QWORD *)&v22 = v8;
    *((_QWORD *)&v22 + 1) = v13;
    v23 = v14;
    v24 = v15;
    v25 = HIDWORD(v11);
    v26 = v12;
    v27 = v11;
    v19[0] = (uint64_t)&v16;
    v19[1] = (uint64_t)&v22;
    if ((_DWORD)v15 == 1 && DWORD1(v17) == 1)
    {
      sub_2109005E8(v19);
    }
    else
    {
      v20 = 0;
      if (DWORD2(v16) && HIDWORD(v16))
      {
        if ((_DWORD)v17)
        {
          v21 = &v20;
          sub_210900F9C((uint64_t)&v21, (uint64_t)&v16, (uint64_t)&v22);
        }
      }
    }
  }
}

uint64_t sub_2109C7A58(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_2109C7A60@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 30
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_2109C7BD8@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 30
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_2109C7D50(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1)
      goto LABEL_14;
    if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
    v2 = *(void **)(a1 + 72);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

uint64_t sub_2109C7DF4(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1)
      goto LABEL_14;
    if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
    v2 = *(void **)(a1 + 72);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_2109C7E98(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1)
      goto LABEL_14;
    if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
    v2 = *(void **)(a1 + 72);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 72) = 0;
  JUMPOUT(0x212BCC6FCLL);
}

_UNKNOWN **sub_2109C7F4C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A75DC0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A75DC0))
    return &off_253ED6E50;
  __cxa_guard_release(&qword_254A75DC0);
  return &off_253ED6E50;
}

uint64_t sub_2109C7FA0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24CA840E0;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a1 + 56);
  result = sub_2109CFA20(v4 + 64, a1 + 64);
  *a2 = v4;
  return result;
}

void sub_2109C8020(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BCC6FC](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

double sub_2109C8044(uint64_t a1, void *lpsrc)
{
  unsigned int *v4;
  double result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _OWORD v21[3];
  _QWORD v22[2];
  __int128 v23;
  int v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24CA84C98, (const struct __class_type_info *)&unk_24CA84870, 0);
  if (v4)
  {
    sub_2109DB8A0(a1 + 8, v4 + 2);
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v23, lpsrc, 31);
    v6 = v23;
    v8 = *(_OWORD *)(v23 + 16);
    v7 = *(_OWORD *)(v23 + 32);
    v21[0] = *(_OWORD *)v23;
    v21[1] = v8;
    v21[2] = v7;
    *(_QWORD *)&v23 = 0;
    MEMORY[0x212BCC6FC](v6, 0xC400A2AC0F1, v9, v10, v11, v12);
    v13 = *(_QWORD *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36))
      v14 = *(_DWORD *)(a1 + 32) == 0;
    else
      v14 = 1;
    v15 = *(_QWORD *)(a1 + 32);
    v16 = *(_QWORD *)(a1 + 40);
    if (v14)
      v15 = 0;
    LODWORD(v23) = 4;
    *(_QWORD *)((char *)&v23 + 4) = v15;
    v17 = v15;
    v18 = v23;
    v19 = HIDWORD(v15);
    LODWORD(v23) = 1;
    *(_QWORD *)((char *)&v23 + 4) = v16;
    v20 = v23;
    if (HIDWORD(v16) * HIDWORD(v15) == -1
      && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
    *(_QWORD *)&v23 = v13;
    *((_QWORD *)&v23 + 1) = v18;
    v24 = v19;
    v25 = v20;
    v26 = HIDWORD(v16);
    v27 = v17;
    v28 = v16;
    v22[0] = v21;
    v22[1] = &v23;
    return sub_210902AF8(v22);
  }
  return result;
}

uint64_t sub_2109C8220(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_2109C8228@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 31
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_2109C83A0@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 31
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_2109C8518(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_2109C8548(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  JUMPOUT(0x212BCC6FCLL);
}

_UNKNOWN **sub_2109C8588()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A75DC0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A75DC0))
    return &off_253ED6E50;
  __cxa_guard_release(&qword_254A75DC0);
  return &off_253ED6E50;
}

uint64_t sub_2109C85DC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24CA84160;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a1 + 56);
  result = sub_2109CFE3C(v4 + 64, a1 + 64);
  *a2 = v4;
  return result;
}

void sub_2109C865C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BCC6FC](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

float sub_2109C8680(uint64_t a1, void *lpsrc)
{
  unsigned int *v4;
  float result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20[2];
  char v21;
  char *v22;
  __int128 v23;
  int v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24CA84C98, (const struct __class_type_info *)&unk_24CA84888, 0);
  if (v4)
  {
    sub_2109DC2D0(a1 + 8, v4 + 2);
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v23, lpsrc, 32);
    v6 = v23;
    v8 = *(_OWORD *)(v23 + 16);
    v7 = *(_OWORD *)(v23 + 32);
    v17 = *(_OWORD *)v23;
    v18 = v8;
    v19 = v7;
    *(_QWORD *)&v23 = 0;
    MEMORY[0x212BCC6FC](v6);
    v9 = *(_QWORD *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36))
      v10 = *(_DWORD *)(a1 + 32) == 0;
    else
      v10 = 1;
    v11 = *(_QWORD *)(a1 + 32);
    v12 = *(_QWORD *)(a1 + 40);
    if (v10)
      v11 = 0;
    LODWORD(v23) = 4;
    *(_QWORD *)((char *)&v23 + 4) = v11;
    v13 = v11;
    v14 = v23;
    v15 = HIDWORD(v11);
    LODWORD(v23) = 1;
    *(_QWORD *)((char *)&v23 + 4) = v12;
    v16 = v23;
    if (HIDWORD(v12) * HIDWORD(v11) == -1
      && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
    *(_QWORD *)&v23 = v9;
    *((_QWORD *)&v23 + 1) = v14;
    v24 = v15;
    v25 = v16;
    v26 = HIDWORD(v12);
    v27 = v13;
    v28 = v12;
    v20[0] = (uint64_t)&v17;
    v20[1] = (uint64_t)&v23;
    if ((_DWORD)v16 == 1 && DWORD1(v18) == 1)
    {
      sub_210903DA4(v20);
    }
    else
    {
      v21 = 0;
      if (DWORD2(v17) && HIDWORD(v17))
      {
        if ((_DWORD)v18)
        {
          v22 = &v21;
          return sub_210904698((uint64_t)&v22, (uint64_t)&v17, (uint64_t)&v23);
        }
      }
    }
  }
  return result;
}

uint64_t sub_2109C88A8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_2109C88B0@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 32
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_2109C8A28@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 32
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_2109C8BA0(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_2109C8BD0(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  JUMPOUT(0x212BCC6FCLL);
}

_UNKNOWN **sub_2109C8C10()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A75DC0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A75DC0))
    return &off_253ED6E50;
  __cxa_guard_release(&qword_254A75DC0);
  return &off_253ED6E50;
}

uint64_t sub_2109C8C64@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24CA841E0;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a1 + 56);
  result = sub_2109CE728(v4 + 64, a1 + 64);
  *a2 = v4;
  return result;
}

void sub_2109C8CE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BCC6FC](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

void sub_2109C8D08(uint64_t a1, void *lpsrc)
{
  unsigned int *v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  size_t v19[2];
  char v20;
  char *v21;
  __int128 v22;
  int v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24CA84C98, (const struct __class_type_info *)&unk_24CA848A0, 0);
  if (v4)
  {
    sub_2109DA998(a1 + 8, v4 + 2);
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v22, lpsrc, 33);
    v5 = v22;
    v7 = *(_OWORD *)(v22 + 16);
    v6 = *(_OWORD *)(v22 + 32);
    v16 = *(_OWORD *)v22;
    v17 = v7;
    v18 = v6;
    *(_QWORD *)&v22 = 0;
    MEMORY[0x212BCC6FC](v5);
    v8 = *(_QWORD *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36))
      v9 = *(_DWORD *)(a1 + 32) == 0;
    else
      v9 = 1;
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(_QWORD *)(a1 + 40);
    if (v9)
      v10 = 0;
    LODWORD(v22) = 4;
    *(_QWORD *)((char *)&v22 + 4) = v10;
    v12 = v10;
    v13 = v22;
    v14 = HIDWORD(v10);
    LODWORD(v22) = 1;
    *(_QWORD *)((char *)&v22 + 4) = v11;
    v15 = v22;
    if (HIDWORD(v11) * HIDWORD(v10) == -1
      && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
    *(_QWORD *)&v22 = v8;
    *((_QWORD *)&v22 + 1) = v13;
    v23 = v14;
    v24 = v15;
    v25 = HIDWORD(v11);
    v26 = v12;
    v27 = v11;
    v19[0] = (size_t)&v16;
    v19[1] = (size_t)&v22;
    if ((_DWORD)v15 == 1 && DWORD1(v17) == 1)
    {
      sub_2108FEBEC(v19);
    }
    else
    {
      v20 = 0;
      if (DWORD2(v16) && HIDWORD(v16))
      {
        if ((_DWORD)v17)
        {
          v21 = &v20;
          sub_2108FF6CC((uint64_t)&v21, (uint64_t)&v16, (uint64_t)&v22);
        }
      }
    }
  }
}

uint64_t sub_2109C8F30(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_2109C8F38@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 33
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_2109C90B0@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 33
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_2109C9228(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_2109C9258(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  JUMPOUT(0x212BCC6FCLL);
}

_UNKNOWN **sub_2109C9298()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A75DC0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A75DC0))
    return &off_253ED6E50;
  __cxa_guard_release(&qword_254A75DC0);
  return &off_253ED6E50;
}

uint64_t sub_2109C92EC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24CA84260;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a1 + 56);
  result = sub_2109CF018(v4 + 64, a1 + 64);
  *a2 = v4;
  return result;
}

void sub_2109C936C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BCC6FC](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

void sub_2109C9390(uint64_t a1, void *lpsrc)
{
  unsigned int *v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19[2];
  char v20;
  char *v21;
  __int128 v22;
  int v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24CA84C98, (const struct __class_type_info *)&unk_24CA848B8, 0);
  if (v4)
  {
    sub_2109DB104(a1 + 8, v4 + 2);
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v22, lpsrc, 34);
    v5 = v22;
    v7 = *(_OWORD *)(v22 + 16);
    v6 = *(_OWORD *)(v22 + 32);
    v16 = *(_OWORD *)v22;
    v17 = v7;
    v18 = v6;
    *(_QWORD *)&v22 = 0;
    MEMORY[0x212BCC6FC](v5);
    v8 = *(_QWORD *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36))
      v9 = *(_DWORD *)(a1 + 32) == 0;
    else
      v9 = 1;
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(_QWORD *)(a1 + 40);
    if (v9)
      v10 = 0;
    LODWORD(v22) = 4;
    *(_QWORD *)((char *)&v22 + 4) = v10;
    v12 = v10;
    v13 = v22;
    v14 = HIDWORD(v10);
    LODWORD(v22) = 1;
    *(_QWORD *)((char *)&v22 + 4) = v11;
    v15 = v22;
    if (HIDWORD(v11) * HIDWORD(v10) == -1
      && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
    *(_QWORD *)&v22 = v8;
    *((_QWORD *)&v22 + 1) = v13;
    v23 = v14;
    v24 = v15;
    v25 = HIDWORD(v11);
    v26 = v12;
    v27 = v11;
    v19[0] = (uint64_t)&v16;
    v19[1] = (uint64_t)&v22;
    if ((_DWORD)v15 == 1 && DWORD1(v17) == 1)
    {
      sub_2109005E8(v19);
    }
    else
    {
      v20 = 0;
      if (DWORD2(v16) && HIDWORD(v16))
      {
        if ((_DWORD)v17)
        {
          v21 = &v20;
          sub_210900F9C((uint64_t)&v21, (uint64_t)&v16, (uint64_t)&v22);
        }
      }
    }
  }
}

uint64_t sub_2109C95B8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_2109C95C0@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 34
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_2109C9738@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 34
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_2109C98B0(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1)
      goto LABEL_14;
    if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
    v2 = *(void **)(a1 + 72);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

uint64_t sub_2109C9954(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1)
      goto LABEL_14;
    if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
    v2 = *(void **)(a1 + 72);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_2109C99F8(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1)
      goto LABEL_14;
    if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
    v2 = *(void **)(a1 + 72);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 72) = 0;
  JUMPOUT(0x212BCC6FCLL);
}

_UNKNOWN **sub_2109C9AAC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A75DC0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A75DC0))
    return &off_253ED6E50;
  __cxa_guard_release(&qword_254A75DC0);
  return &off_253ED6E50;
}

uint64_t sub_2109C9B00@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24CA842E0;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a1 + 56);
  result = sub_2109CFA20(v4 + 64, a1 + 64);
  *a2 = v4;
  return result;
}

void sub_2109C9B80(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BCC6FC](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

double sub_2109C9BA4(uint64_t a1, void *lpsrc)
{
  unsigned int *v4;
  double result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _OWORD v21[3];
  _QWORD v22[2];
  __int128 v23;
  int v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24CA84C98, (const struct __class_type_info *)&unk_24CA848D0, 0);
  if (v4)
  {
    sub_2109DB8A0(a1 + 8, v4 + 2);
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v23, lpsrc, 35);
    v6 = v23;
    v8 = *(_OWORD *)(v23 + 16);
    v7 = *(_OWORD *)(v23 + 32);
    v21[0] = *(_OWORD *)v23;
    v21[1] = v8;
    v21[2] = v7;
    *(_QWORD *)&v23 = 0;
    MEMORY[0x212BCC6FC](v6, 0xC400A2AC0F1, v9, v10, v11, v12);
    v13 = *(_QWORD *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36))
      v14 = *(_DWORD *)(a1 + 32) == 0;
    else
      v14 = 1;
    v15 = *(_QWORD *)(a1 + 32);
    v16 = *(_QWORD *)(a1 + 40);
    if (v14)
      v15 = 0;
    LODWORD(v23) = 4;
    *(_QWORD *)((char *)&v23 + 4) = v15;
    v17 = v15;
    v18 = v23;
    v19 = HIDWORD(v15);
    LODWORD(v23) = 1;
    *(_QWORD *)((char *)&v23 + 4) = v16;
    v20 = v23;
    if (HIDWORD(v16) * HIDWORD(v15) == -1
      && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
    *(_QWORD *)&v23 = v13;
    *((_QWORD *)&v23 + 1) = v18;
    v24 = v19;
    v25 = v20;
    v26 = HIDWORD(v16);
    v27 = v17;
    v28 = v16;
    v22[0] = v21;
    v22[1] = &v23;
    return sub_210902AF8(v22);
  }
  return result;
}

uint64_t sub_2109C9D80(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_2109C9D88@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 35
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_2109C9F00@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 35
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_2109CA078(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_2109CA0A8(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  JUMPOUT(0x212BCC6FCLL);
}

_UNKNOWN **sub_2109CA0E8()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A75DC0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A75DC0))
    return &off_253ED6E50;
  __cxa_guard_release(&qword_254A75DC0);
  return &off_253ED6E50;
}

uint64_t sub_2109CA13C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24CA84360;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a1 + 56);
  result = sub_2109CFE3C(v4 + 64, a1 + 64);
  *a2 = v4;
  return result;
}

void sub_2109CA1BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BCC6FC](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

float sub_2109CA1E0(uint64_t a1, void *lpsrc)
{
  unsigned int *v4;
  float result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20[2];
  char v21;
  char *v22;
  __int128 v23;
  int v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24CA84C98, (const struct __class_type_info *)&unk_24CA848E8, 0);
  if (v4)
  {
    sub_2109DC2D0(a1 + 8, v4 + 2);
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v23, lpsrc, 36);
    v6 = v23;
    v8 = *(_OWORD *)(v23 + 16);
    v7 = *(_OWORD *)(v23 + 32);
    v17 = *(_OWORD *)v23;
    v18 = v8;
    v19 = v7;
    *(_QWORD *)&v23 = 0;
    MEMORY[0x212BCC6FC](v6);
    v9 = *(_QWORD *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36))
      v10 = *(_DWORD *)(a1 + 32) == 0;
    else
      v10 = 1;
    v11 = *(_QWORD *)(a1 + 32);
    v12 = *(_QWORD *)(a1 + 40);
    if (v10)
      v11 = 0;
    LODWORD(v23) = 4;
    *(_QWORD *)((char *)&v23 + 4) = v11;
    v13 = v11;
    v14 = v23;
    v15 = HIDWORD(v11);
    LODWORD(v23) = 1;
    *(_QWORD *)((char *)&v23 + 4) = v12;
    v16 = v23;
    if (HIDWORD(v12) * HIDWORD(v11) == -1
      && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
    *(_QWORD *)&v23 = v9;
    *((_QWORD *)&v23 + 1) = v14;
    v24 = v15;
    v25 = v16;
    v26 = HIDWORD(v12);
    v27 = v13;
    v28 = v12;
    v20[0] = (uint64_t)&v17;
    v20[1] = (uint64_t)&v23;
    if ((_DWORD)v16 == 1 && DWORD1(v18) == 1)
    {
      sub_210903DA4(v20);
    }
    else
    {
      v21 = 0;
      if (DWORD2(v17) && HIDWORD(v17))
      {
        if ((_DWORD)v18)
        {
          v22 = &v21;
          return sub_210904698((uint64_t)&v22, (uint64_t)&v17, (uint64_t)&v23);
        }
      }
    }
  }
  return result;
}

uint64_t sub_2109CA408(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_2109CA410@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 36
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_2109CA588@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 36
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_2109CA700(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_2109CA730(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  JUMPOUT(0x212BCC6FCLL);
}

_UNKNOWN **sub_2109CA770()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A75DC0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A75DC0))
    return &off_253ED6E50;
  __cxa_guard_release(&qword_254A75DC0);
  return &off_253ED6E50;
}

uint64_t sub_2109CA7C4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24CA843E0;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a1 + 56);
  result = sub_2109CE728(v4 + 64, a1 + 64);
  *a2 = v4;
  return result;
}

void sub_2109CA844(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BCC6FC](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

void sub_2109CA868(uint64_t a1, void *lpsrc)
{
  unsigned int *v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  size_t v19[2];
  char v20;
  char *v21;
  __int128 v22;
  int v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24CA84C98, (const struct __class_type_info *)&unk_24CA84900, 0);
  if (v4)
  {
    sub_2109DA998(a1 + 8, v4 + 2);
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v22, lpsrc, 37);
    v5 = v22;
    v7 = *(_OWORD *)(v22 + 16);
    v6 = *(_OWORD *)(v22 + 32);
    v16 = *(_OWORD *)v22;
    v17 = v7;
    v18 = v6;
    *(_QWORD *)&v22 = 0;
    MEMORY[0x212BCC6FC](v5);
    v8 = *(_QWORD *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36))
      v9 = *(_DWORD *)(a1 + 32) == 0;
    else
      v9 = 1;
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(_QWORD *)(a1 + 40);
    if (v9)
      v10 = 0;
    LODWORD(v22) = 4;
    *(_QWORD *)((char *)&v22 + 4) = v10;
    v12 = v10;
    v13 = v22;
    v14 = HIDWORD(v10);
    LODWORD(v22) = 1;
    *(_QWORD *)((char *)&v22 + 4) = v11;
    v15 = v22;
    if (HIDWORD(v11) * HIDWORD(v10) == -1
      && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
    *(_QWORD *)&v22 = v8;
    *((_QWORD *)&v22 + 1) = v13;
    v23 = v14;
    v24 = v15;
    v25 = HIDWORD(v11);
    v26 = v12;
    v27 = v11;
    v19[0] = (size_t)&v16;
    v19[1] = (size_t)&v22;
    if ((_DWORD)v15 == 1 && DWORD1(v17) == 1)
    {
      sub_2108FEBEC(v19);
    }
    else
    {
      v20 = 0;
      if (DWORD2(v16) && HIDWORD(v16))
      {
        if ((_DWORD)v17)
        {
          v21 = &v20;
          sub_2108FF6CC((uint64_t)&v21, (uint64_t)&v16, (uint64_t)&v22);
        }
      }
    }
  }
}

uint64_t sub_2109CAA90(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_2109CAA98@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 37
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_2109CAC10@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 37
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_2109CAD88(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_2109CADB8(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  JUMPOUT(0x212BCC6FCLL);
}

_UNKNOWN **sub_2109CADF8()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A75DC0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A75DC0))
    return &off_253ED6E50;
  __cxa_guard_release(&qword_254A75DC0);
  return &off_253ED6E50;
}

uint64_t sub_2109CAE4C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24CA84460;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a1 + 56);
  result = sub_2109CF018(v4 + 64, a1 + 64);
  *a2 = v4;
  return result;
}

void sub_2109CAECC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BCC6FC](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

void sub_2109CAEF0(uint64_t a1, void *lpsrc)
{
  unsigned int *v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19[2];
  char v20;
  char *v21;
  __int128 v22;
  int v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24CA84C98, (const struct __class_type_info *)&unk_24CA84918, 0);
  if (v4)
  {
    sub_2109DB104(a1 + 8, v4 + 2);
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v22, lpsrc, 38);
    v5 = v22;
    v7 = *(_OWORD *)(v22 + 16);
    v6 = *(_OWORD *)(v22 + 32);
    v16 = *(_OWORD *)v22;
    v17 = v7;
    v18 = v6;
    *(_QWORD *)&v22 = 0;
    MEMORY[0x212BCC6FC](v5);
    v8 = *(_QWORD *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36))
      v9 = *(_DWORD *)(a1 + 32) == 0;
    else
      v9 = 1;
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(_QWORD *)(a1 + 40);
    if (v9)
      v10 = 0;
    LODWORD(v22) = 4;
    *(_QWORD *)((char *)&v22 + 4) = v10;
    v12 = v10;
    v13 = v22;
    v14 = HIDWORD(v10);
    LODWORD(v22) = 1;
    *(_QWORD *)((char *)&v22 + 4) = v11;
    v15 = v22;
    if (HIDWORD(v11) * HIDWORD(v10) == -1
      && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
    *(_QWORD *)&v22 = v8;
    *((_QWORD *)&v22 + 1) = v13;
    v23 = v14;
    v24 = v15;
    v25 = HIDWORD(v11);
    v26 = v12;
    v27 = v11;
    v19[0] = (uint64_t)&v16;
    v19[1] = (uint64_t)&v22;
    if ((_DWORD)v15 == 1 && DWORD1(v17) == 1)
    {
      sub_2109005E8(v19);
    }
    else
    {
      v20 = 0;
      if (DWORD2(v16) && HIDWORD(v16))
      {
        if ((_DWORD)v17)
        {
          v21 = &v20;
          sub_210900F9C((uint64_t)&v21, (uint64_t)&v16, (uint64_t)&v22);
        }
      }
    }
  }
}

uint64_t sub_2109CB118(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_2109CB120@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 38
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_2109CB298@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 38
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_2109CB410(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1)
      goto LABEL_14;
    if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
    v2 = *(void **)(a1 + 72);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

uint64_t sub_2109CB4B4(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1)
      goto LABEL_14;
    if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
    v2 = *(void **)(a1 + 72);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_2109CB558(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1)
      goto LABEL_14;
    if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
    v2 = *(void **)(a1 + 72);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 72) = 0;
  JUMPOUT(0x212BCC6FCLL);
}

_UNKNOWN **sub_2109CB60C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A75DC0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A75DC0))
    return &off_253ED6E50;
  __cxa_guard_release(&qword_254A75DC0);
  return &off_253ED6E50;
}

uint64_t sub_2109CB660@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24CA844E0;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a1 + 56);
  result = sub_2109CFA20(v4 + 64, a1 + 64);
  *a2 = v4;
  return result;
}

void sub_2109CB6E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BCC6FC](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

double sub_2109CB704(uint64_t a1, void *lpsrc)
{
  unsigned int *v4;
  double result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _OWORD v21[3];
  _QWORD v22[2];
  __int128 v23;
  int v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24CA84C98, (const struct __class_type_info *)&unk_24CA84930, 0);
  if (v4)
  {
    sub_2109DB8A0(a1 + 8, v4 + 2);
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v23, lpsrc, 39);
    v6 = v23;
    v8 = *(_OWORD *)(v23 + 16);
    v7 = *(_OWORD *)(v23 + 32);
    v21[0] = *(_OWORD *)v23;
    v21[1] = v8;
    v21[2] = v7;
    *(_QWORD *)&v23 = 0;
    MEMORY[0x212BCC6FC](v6, 0xC400A2AC0F1, v9, v10, v11, v12);
    v13 = *(_QWORD *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36))
      v14 = *(_DWORD *)(a1 + 32) == 0;
    else
      v14 = 1;
    v15 = *(_QWORD *)(a1 + 32);
    v16 = *(_QWORD *)(a1 + 40);
    if (v14)
      v15 = 0;
    LODWORD(v23) = 4;
    *(_QWORD *)((char *)&v23 + 4) = v15;
    v17 = v15;
    v18 = v23;
    v19 = HIDWORD(v15);
    LODWORD(v23) = 1;
    *(_QWORD *)((char *)&v23 + 4) = v16;
    v20 = v23;
    if (HIDWORD(v16) * HIDWORD(v15) == -1
      && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
    *(_QWORD *)&v23 = v13;
    *((_QWORD *)&v23 + 1) = v18;
    v24 = v19;
    v25 = v20;
    v26 = HIDWORD(v16);
    v27 = v17;
    v28 = v16;
    v22[0] = v21;
    v22[1] = &v23;
    return sub_210902AF8(v22);
  }
  return result;
}

uint64_t sub_2109CB8E0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_2109CB8E8@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 39
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_2109CBA60@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 39
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_2109CBBD8(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_2109CBC08(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  JUMPOUT(0x212BCC6FCLL);
}

_UNKNOWN **sub_2109CBC48()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A75DC0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A75DC0))
    return &off_253ED6E50;
  __cxa_guard_release(&qword_254A75DC0);
  return &off_253ED6E50;
}

uint64_t sub_2109CBC9C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24CA84560;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a1 + 56);
  result = sub_2109CFE3C(v4 + 64, a1 + 64);
  *a2 = v4;
  return result;
}

void sub_2109CBD1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BCC6FC](v1, 0x1091C40A44A61E0);
  _Unwind_Resume(a1);
}

float sub_2109CBD40(uint64_t a1, void *lpsrc)
{
  unsigned int *v4;
  float result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20[2];
  char v21;
  char *v22;
  __int128 v23;
  int v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24CA84C98, (const struct __class_type_info *)&unk_24CA84948, 0);
  if (v4)
  {
    sub_2109DC2D0(a1 + 8, v4 + 2);
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v23, lpsrc, 40);
    v6 = v23;
    v8 = *(_OWORD *)(v23 + 16);
    v7 = *(_OWORD *)(v23 + 32);
    v17 = *(_OWORD *)v23;
    v18 = v8;
    v19 = v7;
    *(_QWORD *)&v23 = 0;
    MEMORY[0x212BCC6FC](v6);
    v9 = *(_QWORD *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36))
      v10 = *(_DWORD *)(a1 + 32) == 0;
    else
      v10 = 1;
    v11 = *(_QWORD *)(a1 + 32);
    v12 = *(_QWORD *)(a1 + 40);
    if (v10)
      v11 = 0;
    LODWORD(v23) = 4;
    *(_QWORD *)((char *)&v23 + 4) = v11;
    v13 = v11;
    v14 = v23;
    v15 = HIDWORD(v11);
    LODWORD(v23) = 1;
    *(_QWORD *)((char *)&v23 + 4) = v12;
    v16 = v23;
    if (HIDWORD(v12) * HIDWORD(v11) == -1
      && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
    *(_QWORD *)&v23 = v9;
    *((_QWORD *)&v23 + 1) = v14;
    v24 = v15;
    v25 = v16;
    v26 = HIDWORD(v12);
    v27 = v13;
    v28 = v12;
    v20[0] = (uint64_t)&v17;
    v20[1] = (uint64_t)&v23;
    if ((_DWORD)v16 == 1 && DWORD1(v18) == 1)
    {
      sub_210903DA4(v20);
    }
    else
    {
      v21 = 0;
      if (DWORD2(v17) && HIDWORD(v17))
      {
        if ((_DWORD)v18)
        {
          v22 = &v21;
          return sub_210904698((uint64_t)&v22, (uint64_t)&v17, (uint64_t)&v23);
        }
      }
    }
  }
  return result;
}

uint64_t sub_2109CBF68(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_2109CBF70@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 40
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

uint64_t sub_2109CC0E8@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 40
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
LABEL_11:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v5;
  *(_QWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 20) = v14;
  *(_DWORD *)(result + 28) = HIDWORD(v8);
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = v8;
  *a3 = result;
  return result;
}

void sub_2109CC260(_DWORD *a1@<X1>, void **a2@<X2>, uint64_t a3@<X8>)
{
  BOOL v4;
  unint64_t v5;
  unint64_t v6;
  void *v7;
  _BOOL4 v8;
  void *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  int v19;
  void *v20;
  int v21;
  void *v22;
  void *memptr[3];
  void **v24[2];

  if (a1[1])
    v4 = *a1 == 0;
  else
    v4 = 1;
  if (v4)
    v5 = 0;
  else
    v5 = *(_QWORD *)a1;
  v6 = v5 << 32;
  if (!HIDWORD(v5))
    v6 = 0;
  v7 = (void *)(v6 | (v5 != 0));
  if ((_DWORD)v5)
    v8 = HIDWORD(v5) == 0;
  else
    v8 = 1;
  if (v8)
    v9 = 0;
  else
    v9 = (void *)v5;
  v10 = HIDWORD(v6);
  v11 = HIDWORD(v6) - 1;
  v12 = (HIDWORD(v9) * v10);
  if ((v10 & v11) != 0)
    v13 = 0;
  else
    v13 = v11;
  v14 = v13 | (v13 >> 1) | ((v13 | (v13 >> 1)) >> 2);
  v15 = v14 | (v14 >> 4) | ((v14 | (v14 >> 4)) >> 8);
  v16 = v15 | (v15 >> 16) | ((v15 | (v15 >> 16)) >> 32);
  if (v16 + 1 > 8)
    v17 = v16 + 1;
  else
    v17 = 8;
  if ((_DWORD)v12)
  {
    memptr[0] = 0;
    v19 = malloc_type_posix_memalign(memptr, v17, (HIDWORD(v9) * v10), 0x1F88E90uLL);
    if (v19)
      sub_2109E756C(v19, v17, (HIDWORD(v9) * v10));
    v20 = memptr[0];
    if (memptr[0])
    {
      if ((_DWORD)v9)
        v21 = v8;
      else
        v21 = 1;
      if (v21)
        v22 = 0;
      else
        v22 = v9;
      memptr[1] = v22;
      memptr[2] = v7;
      if (HIDWORD(v22) * (_DWORD)v10 == -1
        && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
      {
        abort();
      }
      v24[0] = memptr;
      v24[1] = a2;
      sub_2108FE49C(v24);
    }
  }
  else
  {
    v20 = 0;
  }
  *(_QWORD *)a3 = &off_24CA832E0;
  *(_QWORD *)(a3 + 8) = v5;
  *(_QWORD *)(a3 + 16) = v7;
  *(_BYTE *)(a3 + 24) = 0;
  *(_BYTE *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = v12;
  *(_QWORD *)(a3 + 48) = v20;
  *(_QWORD *)(a3 + 56) = v17;
  *(_QWORD *)(a3 + 64) = v9;
  *(_QWORD *)(a3 + 72) = v7;
}

void sub_2109CC400(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

void sub_2109CC414(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  size_t v13;
  int v14;
  void *v15;
  uint64_t v16;
  void *memptr;

  if (a1[1])
    v3 = *a1 == 0;
  else
    v3 = 1;
  if (v3)
    v4 = 0;
  else
    v4 = *(_QWORD *)a1;
  if (HIDWORD(v4))
    v5 = v4 << 32;
  else
    v5 = 0;
  if ((_DWORD)v4)
    v6 = HIDWORD(v4) == 0;
  else
    v6 = 1;
  if (v6)
    v7 = 0;
  else
    v7 = v4;
  v8 = (HIDWORD(v7) * HIDWORD(v5));
  if ((HIDWORD(v5) & (HIDWORD(v5) - 1)) != 0)
    v9 = 0;
  else
    v9 = HIDWORD(v5) - 1;
  v10 = v9 | (v9 >> 1) | ((v9 | (v9 >> 1)) >> 2);
  v11 = v10 | (v10 >> 4) | ((v10 | (v10 >> 4)) >> 8);
  v12 = v11 | (v11 >> 16) | ((v11 | (v11 >> 16)) >> 32);
  if (v12 + 1 > 8)
    v13 = v12 + 1;
  else
    v13 = 8;
  if ((_DWORD)v8)
  {
    memptr = 0;
    v14 = malloc_type_posix_memalign(&memptr, v13, (HIDWORD(v7) * HIDWORD(v5)), 0x1F88E90uLL);
    if (v14)
      sub_2109E756C(v14, v13, (HIDWORD(v7) * HIDWORD(v5)));
    v15 = memptr;
  }
  else
  {
    v15 = 0;
  }
  *(_QWORD *)a2 = &off_24CA832E0;
  *(_QWORD *)(a2 + 8) = v4;
  v16 = v5 | (v4 != 0);
  *(_QWORD *)(a2 + 16) = v16;
  *(_BYTE *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = v8;
  *(_QWORD *)(a2 + 48) = v15;
  *(_QWORD *)(a2 + 56) = v13;
  *(_QWORD *)(a2 + 64) = v7;
  *(_QWORD *)(a2 + 72) = v16;
}

void sub_2109CC52C(_DWORD *a1@<X1>, _WORD *a2@<X2>, uint64_t a3@<X8>)
{
  BOOL v5;
  unint64_t v6;
  unint64_t v7;
  _BOOL8 v8;
  unint64_t v9;
  _BOOL4 v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  int v18;
  _WORD *v19;
  uint64_t v20;
  int v21;
  void *v22;
  int v23;
  _WORD *v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  _WORD *v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  void *memptr[3];
  _QWORD v35[2];

  if (a1[1])
    v5 = *a1 == 0;
  else
    v5 = 1;
  if (v5)
    v6 = 0;
  else
    v6 = *(_QWORD *)a1;
  v7 = v6 << 32;
  if (!HIDWORD(v6))
    v7 = 0;
  v8 = v6 != 0;
  v9 = v7 | v8;
  if ((_DWORD)v6)
    v10 = HIDWORD(v6) == 0;
  else
    v10 = 1;
  if (v10)
    v11 = 0;
  else
    v11 = (void *)v6;
  v12 = (HIDWORD(v11) * HIDWORD(v7));
  if (((v7 >> 31) & ((v7 >> 31) - 1)) != 0)
    v13 = 1;
  else
    v13 = (v7 >> 31) - 1;
  v14 = v13 | (v13 >> 1) | ((v13 | (v13 >> 1)) >> 2);
  v15 = v14 | (v14 >> 4) | ((v14 | (v14 >> 4)) >> 8);
  v16 = v15 | (v15 >> 16) | ((v15 | (v15 >> 16)) >> 32);
  if (v16 + 1 > 8)
    v17 = v16 + 1;
  else
    v17 = 8;
  v32 = v17;
  v33 = 2 * v12;
  if ((_DWORD)v12)
  {
    memptr[0] = 0;
    v18 = malloc_type_posix_memalign(memptr, v17, 2 * v12, 0x1F88E90uLL);
    if (v18)
      sub_2109E756C(v18, v32, v33);
    v19 = memptr[0];
    v20 = 2 * v9;
    if (memptr[0])
    {
      if ((_DWORD)v11)
        v21 = v10;
      else
        v21 = 1;
      if (v21)
        v22 = 0;
      else
        v22 = v11;
      memptr[1] = v22;
      memptr[2] = (void *)(v9 & 0x7FFFFFFF00000001);
      if (HIDWORD(v22) * ((v9 >> 31) >> 1) == -1
        && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
      {
        abort();
      }
      v35[0] = memptr;
      v35[1] = a2;
      if ((_DWORD)v6)
      {
        sub_2108FF81C((uint64_t)v35);
LABEL_49:
        v20 = 2 * v9;
        goto LABEL_50;
      }
      if (!(_DWORD)v22 || !HIDWORD(v22))
        goto LABEL_49;
      v23 = (_DWORD)v22 - 1;
      v24 = v19;
      v25 = HIDWORD(v22) - 1;
      if (HIDWORD(v22) != 1)
      {
        v26 = HIDWORD(v9) & 0x7FFFFFFF;
        if ((_DWORD)v22 == 1)
        {
          v31 = 2 * v26;
          v24 = v19;
          do
          {
            *v24 = *a2;
            v24 = (_WORD *)((char *)v24 + v31);
            --v25;
          }
          while (v25);
LABEL_48:
          *v24 = *a2;
          goto LABEL_49;
        }
        v27 = 0;
        v28 = 2 * v26;
        v24 = v19;
        do
        {
          v29 = v24;
          v30 = (_DWORD)v22 - 1;
          do
          {
            *v29 = *a2;
            v29 += v8;
            --v30;
          }
          while (v30);
          *v29 = *a2;
          v24 = (_WORD *)((char *)v24 + v28);
          ++v27;
        }
        while (v27 != v25);
      }
      if ((_DWORD)v22 != 1)
      {
        do
        {
          *v24 = *a2;
          v24 += v8;
          --v23;
        }
        while (v23);
      }
      goto LABEL_48;
    }
  }
  else
  {
    v19 = 0;
    v20 = 2 * v9;
  }
LABEL_50:
  *(_QWORD *)a3 = &off_24CA83360;
  *(_QWORD *)(a3 + 8) = v6;
  *(_QWORD *)(a3 + 16) = v9;
  *(_BYTE *)(a3 + 24) = 0;
  *(_DWORD *)(a3 + 25) = memptr[0];
  *(_DWORD *)(a3 + 28) = *(_DWORD *)((char *)memptr + 3);
  *(_BYTE *)(a3 + 32) = 0;
  *(_WORD *)(a3 + 33) = v35[0];
  *(_BYTE *)(a3 + 35) = BYTE2(v35[0]);
  *(_QWORD *)(a3 + 40) = v33;
  *(_QWORD *)(a3 + 48) = v19;
  *(_QWORD *)(a3 + 56) = v32;
  *(_QWORD *)(a3 + 64) = v11;
  *(_QWORD *)(a3 + 72) = v20;
}

void sub_2109CC7C0(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

void sub_2109CC7D4(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  size_t v13;
  unint64_t v14;
  int v15;
  void *v16;
  uint64_t v17;
  void *memptr;

  if (a1[1])
    v3 = *a1 == 0;
  else
    v3 = 1;
  if (v3)
    v4 = 0;
  else
    v4 = *(_QWORD *)a1;
  if (HIDWORD(v4))
    v5 = v4 << 32;
  else
    v5 = 0;
  if ((_DWORD)v4)
    v6 = HIDWORD(v4) == 0;
  else
    v6 = 1;
  if (v6)
    v7 = 0;
  else
    v7 = v4;
  v8 = HIDWORD(v7) * (v5 >> 31);
  if (((v5 >> 31) & ((v5 >> 31) - 1)) != 0)
    v9 = 1;
  else
    v9 = (v5 >> 31) - 1;
  v10 = v9 | (v9 >> 1) | ((v9 | (v9 >> 1)) >> 2);
  v11 = v10 | (v10 >> 4) | ((v10 | (v10 >> 4)) >> 8);
  v12 = v11 | (v11 >> 16) | ((v11 | (v11 >> 16)) >> 32);
  if (v12 + 1 > 8)
    v13 = v12 + 1;
  else
    v13 = 8;
  v14 = v8 & 0x1FFFFFFFELL;
  if ((v8 & 0x1FFFFFFFELL) != 0)
  {
    memptr = 0;
    v15 = malloc_type_posix_memalign(&memptr, v13, v8 & 0x1FFFFFFFELL, 0x1F88E90uLL);
    if (v15)
      sub_2109E756C(v15, v13, v14);
    v16 = memptr;
  }
  else
  {
    v16 = 0;
  }
  *(_QWORD *)a2 = &off_24CA83360;
  *(_QWORD *)(a2 + 8) = v4;
  v17 = v5 | (v4 != 0);
  *(_QWORD *)(a2 + 16) = v17;
  *(_BYTE *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = v14;
  *(_QWORD *)(a2 + 48) = v16;
  *(_QWORD *)(a2 + 56) = v13;
  *(_QWORD *)(a2 + 64) = v7;
  *(_QWORD *)(a2 + 72) = 2 * v17;
}

void sub_2109CC8F4(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  size_t v13;
  unint64_t v14;
  int v15;
  void *v16;
  uint64_t v17;
  void *memptr;

  if (a1[1])
    v3 = *a1 == 0;
  else
    v3 = 1;
  if (v3)
    v4 = 0;
  else
    v4 = *(_QWORD *)a1;
  if (HIDWORD(v4))
    v5 = v4 << 32;
  else
    v5 = 0;
  if ((_DWORD)v4)
    v6 = HIDWORD(v4) == 0;
  else
    v6 = 1;
  if (v6)
    v7 = 0;
  else
    v7 = v4;
  v8 = HIDWORD(v7) * (v5 >> 30);
  v9 = 3;
  if (((v5 >> 30) & ((v5 >> 30) - 1)) == 0)
    v9 = (v5 >> 30) - 1;
  v10 = v9 | (v9 >> 1) | ((v9 | (v9 >> 1)) >> 2);
  v11 = v10 | (v10 >> 4) | ((v10 | (v10 >> 4)) >> 8);
  v12 = v11 | (v11 >> 16) | ((v11 | (v11 >> 16)) >> 32);
  if (v12 + 1 > 8)
    v13 = v12 + 1;
  else
    v13 = 8;
  v14 = v8 & 0x3FFFFFFFCLL;
  if ((v8 & 0x3FFFFFFFCLL) != 0)
  {
    memptr = 0;
    v15 = malloc_type_posix_memalign(&memptr, v13, v8 & 0x3FFFFFFFCLL, 0x1F88E90uLL);
    if (v15)
      sub_2109E756C(v15, v13, v14);
    v16 = memptr;
  }
  else
  {
    v16 = 0;
  }
  *(_QWORD *)a2 = &off_24CA80730;
  *(_QWORD *)(a2 + 8) = v4;
  v17 = v5 | (v4 != 0);
  *(_QWORD *)(a2 + 16) = v17;
  *(_BYTE *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = v14;
  *(_QWORD *)(a2 + 48) = v16;
  *(_QWORD *)(a2 + 56) = v13;
  *(_QWORD *)(a2 + 64) = v7;
  *(_QWORD *)(a2 + 72) = 4 * v17;
}

void sub_2109CCA18(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  _BYTE memptr[12];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (a1[1])
    v3 = *a1 == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)a1;
  if (v3)
    v4 = 0;
  *(_DWORD *)memptr = 2;
  *(_QWORD *)&memptr[4] = v4;
  v5 = v4;
  v6 = 2 * ((_DWORD)v4 != 0);
  v7 = v6 * v4;
  if (HIDWORD(v5))
    v8 = v7;
  else
    v8 = 0;
  v9 = v6 & 0x1FFFFFFFFLL | ((unint64_t)(v8 >> 1) << 33);
  v10 = __PAIR64__(*(unsigned int *)&memptr[4], 2);
  *(_DWORD *)memptr = 1;
  *(_QWORD *)&memptr[4] = v9;
  v11 = *(_QWORD *)memptr;
  if (__PAIR64__(v5, 2) >> 32)
    v12 = HIDWORD(v5) == 0;
  else
    v12 = 1;
  v13 = v12;
  if (v12)
    v14 = 0;
  else
    v14 = HIDWORD(v5);
  v15 = v8 - 1;
  v16 = (v14 * v8);
  if ((v8 & (v8 - 1)) != 0)
    v15 = 0;
  v17 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  v18 = v17 | (v17 >> 4) | ((v17 | (v17 >> 4)) >> 8);
  v19 = v18 | (v18 >> 16) | ((v18 | (v18 >> 16)) >> 32);
  if (v19 + 1 > 8)
    v20 = v19 + 1;
  else
    v20 = 8;
  if ((_DWORD)v16)
  {
    v24 = v13;
    *(_QWORD *)memptr = 0;
    v21 = malloc_type_posix_memalign((void **)memptr, v20, (v14 * v8), 0x1F88E90uLL);
    if (v21)
      sub_2109E756C(v21, v20, (v14 * v8));
    v22 = *(_QWORD *)memptr;
    v13 = v24;
  }
  else
  {
    v22 = 0;
  }
  *(_QWORD *)a2 = &off_24CA83460;
  *(_QWORD *)(a2 + 8) = v10;
  if (v13)
    v23 = 0;
  else
    v23 = v10;
  *(_DWORD *)(a2 + 16) = HIDWORD(v5);
  *(_QWORD *)(a2 + 20) = v11;
  *(_DWORD *)(a2 + 28) = v8;
  *(_QWORD *)(a2 + 32) = v5;
  *(_QWORD *)(a2 + 40) = v9;
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 60) = 0;
  *(_QWORD *)(a2 + 64) = v16;
  *(_QWORD *)(a2 + 72) = v22;
  *(_QWORD *)(a2 + 80) = v20;
  *(_QWORD *)(a2 + 88) = v23;
  *(_DWORD *)(a2 + 96) = v14;
  *(_QWORD *)(a2 + 100) = v11;
  *(_DWORD *)(a2 + 108) = v8;
}

void sub_2109CCBD8(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  _BYTE memptr[12];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (a1[1])
    v3 = *a1 == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)a1;
  if (v3)
    v4 = 0;
  *(_DWORD *)memptr = 3;
  *(_QWORD *)&memptr[4] = v4;
  v5 = v4;
  if ((_DWORD)v4)
    v6 = 3;
  else
    v6 = 0;
  v7 = HIDWORD(*(_QWORD *)&memptr[4]);
  if (HIDWORD(*(_QWORD *)&memptr[4]))
    v8 = (v6 * *(_DWORD *)&memptr[4]);
  else
    v8 = 0;
  v9 = v6 | (v8 << 32);
  v10 = __PAIR64__(*(unsigned int *)&memptr[4], 3);
  *(_DWORD *)memptr = 1;
  *(_QWORD *)&memptr[4] = v9;
  v11 = *(_QWORD *)memptr;
  if (__PAIR64__(v5, 3) >> 32)
    v12 = (_DWORD)v7 == 0;
  else
    v12 = 1;
  v13 = v12;
  if (v12)
    v14 = 0;
  else
    v14 = v7;
  v15 = v8 - 1;
  v16 = (v14 * v8);
  if ((v8 & (v8 - 1)) != 0)
    v15 = 0;
  v17 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  v18 = v17 | (v17 >> 4) | ((v17 | (v17 >> 4)) >> 8);
  v19 = v18 | (v18 >> 16) | ((v18 | (v18 >> 16)) >> 32);
  if (v19 + 1 > 8)
    v20 = v19 + 1;
  else
    v20 = 8;
  if ((_DWORD)v16)
  {
    v24 = v13;
    *(_QWORD *)memptr = 0;
    v21 = malloc_type_posix_memalign((void **)memptr, v20, (v14 * v8), 0x1F88E90uLL);
    if (v21)
      sub_2109E756C(v21, v20, (v14 * v8));
    v22 = *(_QWORD *)memptr;
    v13 = v24;
  }
  else
  {
    v22 = 0;
  }
  *(_QWORD *)a2 = &off_24CA835E0;
  *(_QWORD *)(a2 + 8) = v10;
  if (v13)
    v23 = 0;
  else
    v23 = v10;
  *(_DWORD *)(a2 + 16) = v7;
  *(_QWORD *)(a2 + 20) = v11;
  *(_DWORD *)(a2 + 28) = v8;
  *(_QWORD *)(a2 + 32) = v5;
  *(_QWORD *)(a2 + 40) = v9;
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 60) = 0;
  *(_QWORD *)(a2 + 64) = v16;
  *(_QWORD *)(a2 + 72) = v22;
  *(_QWORD *)(a2 + 80) = v20;
  *(_QWORD *)(a2 + 88) = v23;
  *(_DWORD *)(a2 + 96) = v14;
  *(_QWORD *)(a2 + 100) = v11;
  *(_DWORD *)(a2 + 108) = v8;
}

void sub_2109CCD90(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  _BYTE memptr[12];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (a1[1])
    v3 = *a1 == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)a1;
  if (v3)
    v4 = 0;
  *(_DWORD *)memptr = 4;
  *(_QWORD *)&memptr[4] = v4;
  v5 = v4;
  v6 = 4 * ((_DWORD)v4 != 0);
  v7 = v6 * v4;
  if (HIDWORD(v5))
    v8 = v7;
  else
    v8 = 0;
  v9 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v8 >> 2) << 34);
  v10 = __PAIR64__(*(unsigned int *)&memptr[4], 4);
  *(_DWORD *)memptr = 1;
  *(_QWORD *)&memptr[4] = v9;
  v11 = *(_QWORD *)memptr;
  if (__PAIR64__(v5, 4) >> 32)
    v12 = HIDWORD(v5) == 0;
  else
    v12 = 1;
  v13 = v12;
  if (v12)
    v14 = 0;
  else
    v14 = HIDWORD(v5);
  v15 = v8 - 1;
  v16 = (v14 * v8);
  if ((v8 & (v8 - 1)) != 0)
    v15 = 0;
  v17 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  v18 = v17 | (v17 >> 4) | ((v17 | (v17 >> 4)) >> 8);
  v19 = v18 | (v18 >> 16) | ((v18 | (v18 >> 16)) >> 32);
  if (v19 + 1 > 8)
    v20 = v19 + 1;
  else
    v20 = 8;
  if ((_DWORD)v16)
  {
    v24 = v13;
    *(_QWORD *)memptr = 0;
    v21 = malloc_type_posix_memalign((void **)memptr, v20, (v14 * v8), 0x1F88E90uLL);
    if (v21)
      sub_2109E756C(v21, v20, (v14 * v8));
    v22 = *(_QWORD *)memptr;
    v13 = v24;
  }
  else
  {
    v22 = 0;
  }
  *(_QWORD *)a2 = &off_24CA837E0;
  *(_QWORD *)(a2 + 8) = v10;
  if (v13)
    v23 = 0;
  else
    v23 = v10;
  *(_DWORD *)(a2 + 16) = HIDWORD(v5);
  *(_QWORD *)(a2 + 20) = v11;
  *(_DWORD *)(a2 + 28) = v8;
  *(_QWORD *)(a2 + 32) = v5;
  *(_QWORD *)(a2 + 40) = v9;
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 60) = 0;
  *(_QWORD *)(a2 + 64) = v16;
  *(_QWORD *)(a2 + 72) = v22;
  *(_QWORD *)(a2 + 80) = v20;
  *(_QWORD *)(a2 + 88) = v23;
  *(_DWORD *)(a2 + 96) = v14;
  *(_QWORD *)(a2 + 100) = v11;
  *(_DWORD *)(a2 + 108) = v8;
}

void sub_2109CCF50(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  _BYTE memptr[12];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (a1[1])
    v3 = *a1 == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)a1;
  if (v3)
    v4 = 0;
  *(_DWORD *)memptr = 3;
  *(_QWORD *)&memptr[4] = v4;
  v5 = v4;
  if ((_DWORD)v4)
    v6 = 3;
  else
    v6 = 0;
  v7 = HIDWORD(*(_QWORD *)&memptr[4]);
  if (HIDWORD(*(_QWORD *)&memptr[4]))
    v8 = (v6 * *(_DWORD *)&memptr[4]);
  else
    v8 = 0;
  v9 = v6 | (v8 << 32);
  v10 = __PAIR64__(*(unsigned int *)&memptr[4], 3);
  *(_DWORD *)memptr = 1;
  *(_QWORD *)&memptr[4] = v9;
  v11 = *(_QWORD *)memptr;
  if (__PAIR64__(v5, 3) >> 32)
    v12 = (_DWORD)v7 == 0;
  else
    v12 = 1;
  v13 = v12;
  if (v12)
    v14 = 0;
  else
    v14 = v7;
  v15 = v8 - 1;
  v16 = (v14 * v8);
  if ((v8 & (v8 - 1)) != 0)
    v15 = 0;
  v17 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  v18 = v17 | (v17 >> 4) | ((v17 | (v17 >> 4)) >> 8);
  v19 = v18 | (v18 >> 16) | ((v18 | (v18 >> 16)) >> 32);
  if (v19 + 1 > 8)
    v20 = v19 + 1;
  else
    v20 = 8;
  if ((_DWORD)v16)
  {
    v24 = v13;
    *(_QWORD *)memptr = 0;
    v21 = malloc_type_posix_memalign((void **)memptr, v20, (v14 * v8), 0x1F88E90uLL);
    if (v21)
      sub_2109E756C(v21, v20, (v14 * v8));
    v22 = *(_QWORD *)memptr;
    v13 = v24;
  }
  else
  {
    v22 = 0;
  }
  *(_QWORD *)a2 = &off_24CA839E0;
  *(_QWORD *)(a2 + 8) = v10;
  if (v13)
    v23 = 0;
  else
    v23 = v10;
  *(_DWORD *)(a2 + 16) = v7;
  *(_QWORD *)(a2 + 20) = v11;
  *(_DWORD *)(a2 + 28) = v8;
  *(_QWORD *)(a2 + 32) = v5;
  *(_QWORD *)(a2 + 40) = v9;
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 60) = 0;
  *(_QWORD *)(a2 + 64) = v16;
  *(_QWORD *)(a2 + 72) = v22;
  *(_QWORD *)(a2 + 80) = v20;
  *(_QWORD *)(a2 + 88) = v23;
  *(_DWORD *)(a2 + 96) = v14;
  *(_QWORD *)(a2 + 100) = v11;
  *(_DWORD *)(a2 + 108) = v8;
}

void sub_2109CD108(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  _BYTE memptr[12];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (a1[1])
    v3 = *a1 == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)a1;
  if (v3)
    v4 = 0;
  *(_DWORD *)memptr = 3;
  *(_QWORD *)&memptr[4] = v4;
  v5 = v4;
  if ((_DWORD)v4)
    v6 = 3;
  else
    v6 = 0;
  v7 = HIDWORD(*(_QWORD *)&memptr[4]);
  if (HIDWORD(*(_QWORD *)&memptr[4]))
    v8 = (v6 * *(_DWORD *)&memptr[4]);
  else
    v8 = 0;
  v9 = v6 | (v8 << 32);
  v10 = __PAIR64__(*(unsigned int *)&memptr[4], 3);
  *(_DWORD *)memptr = 1;
  *(_QWORD *)&memptr[4] = v9;
  v11 = *(_QWORD *)memptr;
  if (__PAIR64__(v5, 3) >> 32)
    v12 = (_DWORD)v7 == 0;
  else
    v12 = 1;
  v13 = v12;
  if (v12)
    v14 = 0;
  else
    v14 = v7;
  v15 = v8 - 1;
  v16 = (v14 * v8);
  if ((v8 & (v8 - 1)) != 0)
    v15 = 0;
  v17 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  v18 = v17 | (v17 >> 4) | ((v17 | (v17 >> 4)) >> 8);
  v19 = v18 | (v18 >> 16) | ((v18 | (v18 >> 16)) >> 32);
  if (v19 + 1 > 8)
    v20 = v19 + 1;
  else
    v20 = 8;
  if ((_DWORD)v16)
  {
    v24 = v13;
    *(_QWORD *)memptr = 0;
    v21 = malloc_type_posix_memalign((void **)memptr, v20, (v14 * v8), 0x1F88E90uLL);
    if (v21)
      sub_2109E756C(v21, v20, (v14 * v8));
    v22 = *(_QWORD *)memptr;
    v13 = v24;
  }
  else
  {
    v22 = 0;
  }
  *(_QWORD *)a2 = &off_24CA83BE0;
  *(_QWORD *)(a2 + 8) = v10;
  if (v13)
    v23 = 0;
  else
    v23 = v10;
  *(_DWORD *)(a2 + 16) = v7;
  *(_QWORD *)(a2 + 20) = v11;
  *(_DWORD *)(a2 + 28) = v8;
  *(_QWORD *)(a2 + 32) = v5;
  *(_QWORD *)(a2 + 40) = v9;
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 60) = 0;
  *(_QWORD *)(a2 + 64) = v16;
  *(_QWORD *)(a2 + 72) = v22;
  *(_QWORD *)(a2 + 80) = v20;
  *(_QWORD *)(a2 + 88) = v23;
  *(_DWORD *)(a2 + 96) = v14;
  *(_QWORD *)(a2 + 100) = v11;
  *(_DWORD *)(a2 + 108) = v8;
}

void sub_2109CD2C0(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  _BYTE memptr[12];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (a1[1])
    v3 = *a1 == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)a1;
  if (v3)
    v4 = 0;
  *(_DWORD *)memptr = 4;
  *(_QWORD *)&memptr[4] = v4;
  v5 = v4;
  v6 = 4 * ((_DWORD)v4 != 0);
  v7 = v6 * v4;
  if (HIDWORD(v5))
    v8 = v7;
  else
    v8 = 0;
  v9 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v8 >> 2) << 34);
  v10 = __PAIR64__(*(unsigned int *)&memptr[4], 4);
  *(_DWORD *)memptr = 1;
  *(_QWORD *)&memptr[4] = v9;
  v11 = *(_QWORD *)memptr;
  if (__PAIR64__(v5, 4) >> 32)
    v12 = HIDWORD(v5) == 0;
  else
    v12 = 1;
  v13 = v12;
  if (v12)
    v14 = 0;
  else
    v14 = HIDWORD(v5);
  v15 = v8 - 1;
  v16 = (v14 * v8);
  if ((v8 & (v8 - 1)) != 0)
    v15 = 0;
  v17 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  v18 = v17 | (v17 >> 4) | ((v17 | (v17 >> 4)) >> 8);
  v19 = v18 | (v18 >> 16) | ((v18 | (v18 >> 16)) >> 32);
  if (v19 + 1 > 8)
    v20 = v19 + 1;
  else
    v20 = 8;
  if ((_DWORD)v16)
  {
    v24 = v13;
    *(_QWORD *)memptr = 0;
    v21 = malloc_type_posix_memalign((void **)memptr, v20, (v14 * v8), 0x1F88E90uLL);
    if (v21)
      sub_2109E756C(v21, v20, (v14 * v8));
    v22 = *(_QWORD *)memptr;
    v13 = v24;
  }
  else
  {
    v22 = 0;
  }
  *(_QWORD *)a2 = &off_24CA83DE0;
  *(_QWORD *)(a2 + 8) = v10;
  if (v13)
    v23 = 0;
  else
    v23 = v10;
  *(_DWORD *)(a2 + 16) = HIDWORD(v5);
  *(_QWORD *)(a2 + 20) = v11;
  *(_DWORD *)(a2 + 28) = v8;
  *(_QWORD *)(a2 + 32) = v5;
  *(_QWORD *)(a2 + 40) = v9;
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 60) = 0;
  *(_QWORD *)(a2 + 64) = v16;
  *(_QWORD *)(a2 + 72) = v22;
  *(_QWORD *)(a2 + 80) = v20;
  *(_QWORD *)(a2 + 88) = v23;
  *(_DWORD *)(a2 + 96) = v14;
  *(_QWORD *)(a2 + 100) = v11;
  *(_DWORD *)(a2 + 108) = v8;
}

void sub_2109CD480(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  _BYTE memptr[12];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (a1[1])
    v3 = *a1 == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)a1;
  if (v3)
    v4 = 0;
  *(_DWORD *)memptr = 4;
  *(_QWORD *)&memptr[4] = v4;
  v5 = v4;
  v6 = 4 * ((_DWORD)v4 != 0);
  v7 = v6 * v4;
  if (HIDWORD(v5))
    v8 = v7;
  else
    v8 = 0;
  v9 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v8 >> 2) << 34);
  v10 = __PAIR64__(*(unsigned int *)&memptr[4], 4);
  *(_DWORD *)memptr = 1;
  *(_QWORD *)&memptr[4] = v9;
  v11 = *(_QWORD *)memptr;
  if (__PAIR64__(v5, 4) >> 32)
    v12 = HIDWORD(v5) == 0;
  else
    v12 = 1;
  v13 = v12;
  if (v12)
    v14 = 0;
  else
    v14 = HIDWORD(v5);
  v15 = v8 - 1;
  v16 = (v14 * v8);
  if ((v8 & (v8 - 1)) != 0)
    v15 = 0;
  v17 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  v18 = v17 | (v17 >> 4) | ((v17 | (v17 >> 4)) >> 8);
  v19 = v18 | (v18 >> 16) | ((v18 | (v18 >> 16)) >> 32);
  if (v19 + 1 > 8)
    v20 = v19 + 1;
  else
    v20 = 8;
  if ((_DWORD)v16)
  {
    v24 = v13;
    *(_QWORD *)memptr = 0;
    v21 = malloc_type_posix_memalign((void **)memptr, v20, (v14 * v8), 0x1F88E90uLL);
    if (v21)
      sub_2109E756C(v21, v20, (v14 * v8));
    v22 = *(_QWORD *)memptr;
    v13 = v24;
  }
  else
  {
    v22 = 0;
  }
  *(_QWORD *)a2 = &off_24CA83FE0;
  *(_QWORD *)(a2 + 8) = v10;
  if (v13)
    v23 = 0;
  else
    v23 = v10;
  *(_DWORD *)(a2 + 16) = HIDWORD(v5);
  *(_QWORD *)(a2 + 20) = v11;
  *(_DWORD *)(a2 + 28) = v8;
  *(_QWORD *)(a2 + 32) = v5;
  *(_QWORD *)(a2 + 40) = v9;
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 60) = 0;
  *(_QWORD *)(a2 + 64) = v16;
  *(_QWORD *)(a2 + 72) = v22;
  *(_QWORD *)(a2 + 80) = v20;
  *(_QWORD *)(a2 + 88) = v23;
  *(_DWORD *)(a2 + 96) = v14;
  *(_QWORD *)(a2 + 100) = v11;
  *(_DWORD *)(a2 + 108) = v8;
}

void sub_2109CD640(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  _BYTE memptr[12];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (a1[1])
    v3 = *a1 == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)a1;
  if (v3)
    v4 = 0;
  *(_DWORD *)memptr = 4;
  *(_QWORD *)&memptr[4] = v4;
  v5 = v4;
  v6 = 4 * ((_DWORD)v4 != 0);
  v7 = v6 * v4;
  if (HIDWORD(v5))
    v8 = v7;
  else
    v8 = 0;
  v9 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v8 >> 2) << 34);
  v10 = __PAIR64__(*(unsigned int *)&memptr[4], 4);
  *(_DWORD *)memptr = 1;
  *(_QWORD *)&memptr[4] = v9;
  v11 = *(_QWORD *)memptr;
  if (__PAIR64__(v5, 4) >> 32)
    v12 = HIDWORD(v5) == 0;
  else
    v12 = 1;
  v13 = v12;
  if (v12)
    v14 = 0;
  else
    v14 = HIDWORD(v5);
  v15 = v8 - 1;
  v16 = (v14 * v8);
  if ((v8 & (v8 - 1)) != 0)
    v15 = 0;
  v17 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  v18 = v17 | (v17 >> 4) | ((v17 | (v17 >> 4)) >> 8);
  v19 = v18 | (v18 >> 16) | ((v18 | (v18 >> 16)) >> 32);
  if (v19 + 1 > 8)
    v20 = v19 + 1;
  else
    v20 = 8;
  if ((_DWORD)v16)
  {
    v24 = v13;
    *(_QWORD *)memptr = 0;
    v21 = malloc_type_posix_memalign((void **)memptr, v20, (v14 * v8), 0x1F88E90uLL);
    if (v21)
      sub_2109E756C(v21, v20, (v14 * v8));
    v22 = *(_QWORD *)memptr;
    v13 = v24;
  }
  else
  {
    v22 = 0;
  }
  *(_QWORD *)a2 = &off_24CA841E0;
  *(_QWORD *)(a2 + 8) = v10;
  if (v13)
    v23 = 0;
  else
    v23 = v10;
  *(_DWORD *)(a2 + 16) = HIDWORD(v5);
  *(_QWORD *)(a2 + 20) = v11;
  *(_DWORD *)(a2 + 28) = v8;
  *(_QWORD *)(a2 + 32) = v5;
  *(_QWORD *)(a2 + 40) = v9;
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 60) = 0;
  *(_QWORD *)(a2 + 64) = v16;
  *(_QWORD *)(a2 + 72) = v22;
  *(_QWORD *)(a2 + 80) = v20;
  *(_QWORD *)(a2 + 88) = v23;
  *(_DWORD *)(a2 + 96) = v14;
  *(_QWORD *)(a2 + 100) = v11;
  *(_DWORD *)(a2 + 108) = v8;
}

void sub_2109CD800(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  _BYTE memptr[12];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (a1[1])
    v3 = *a1 == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)a1;
  if (v3)
    v4 = 0;
  *(_DWORD *)memptr = 4;
  *(_QWORD *)&memptr[4] = v4;
  v5 = v4;
  v6 = 4 * ((_DWORD)v4 != 0);
  v7 = v6 * v4;
  if (HIDWORD(v5))
    v8 = v7;
  else
    v8 = 0;
  v9 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v8 >> 2) << 34);
  v10 = __PAIR64__(*(unsigned int *)&memptr[4], 4);
  *(_DWORD *)memptr = 1;
  *(_QWORD *)&memptr[4] = v9;
  v11 = *(_QWORD *)memptr;
  if (__PAIR64__(v5, 4) >> 32)
    v12 = HIDWORD(v5) == 0;
  else
    v12 = 1;
  v13 = v12;
  if (v12)
    v14 = 0;
  else
    v14 = HIDWORD(v5);
  v15 = v8 - 1;
  v16 = (v14 * v8);
  if ((v8 & (v8 - 1)) != 0)
    v15 = 0;
  v17 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  v18 = v17 | (v17 >> 4) | ((v17 | (v17 >> 4)) >> 8);
  v19 = v18 | (v18 >> 16) | ((v18 | (v18 >> 16)) >> 32);
  if (v19 + 1 > 8)
    v20 = v19 + 1;
  else
    v20 = 8;
  if ((_DWORD)v16)
  {
    v24 = v13;
    *(_QWORD *)memptr = 0;
    v21 = malloc_type_posix_memalign((void **)memptr, v20, (v14 * v8), 0x1F88E90uLL);
    if (v21)
      sub_2109E756C(v21, v20, (v14 * v8));
    v22 = *(_QWORD *)memptr;
    v13 = v24;
  }
  else
  {
    v22 = 0;
  }
  *(_QWORD *)a2 = &off_24CA843E0;
  *(_QWORD *)(a2 + 8) = v10;
  if (v13)
    v23 = 0;
  else
    v23 = v10;
  *(_DWORD *)(a2 + 16) = HIDWORD(v5);
  *(_QWORD *)(a2 + 20) = v11;
  *(_DWORD *)(a2 + 28) = v8;
  *(_QWORD *)(a2 + 32) = v5;
  *(_QWORD *)(a2 + 40) = v9;
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 60) = 0;
  *(_QWORD *)(a2 + 64) = v16;
  *(_QWORD *)(a2 + 72) = v22;
  *(_QWORD *)(a2 + 80) = v20;
  *(_QWORD *)(a2 + 88) = v23;
  *(_DWORD *)(a2 + 96) = v14;
  *(_QWORD *)(a2 + 100) = v11;
  *(_DWORD *)(a2 + 108) = v8;
}

uint64_t sub_2109CD9C0(uint64_t a1, uint64_t a2)
{
  size_t v4;
  size_t v5;
  int v6;
  _BYTE *v7;
  BOOL v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  _BYTE *v13;
  unint64_t v14;
  BOOL v15;
  int v16;
  unint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  _BYTE *v22;
  _BYTE *v23;
  int v24;
  void *v25;
  const void *v26;
  size_t v27;
  int __len;
  void *memptr;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v5;
  if (v4)
  {
    memptr = 0;
    v6 = malloc_type_posix_memalign(&memptr, v5, v4, 0x1F88E90uLL);
    if (v6)
      sub_2109E756C(v6, *(_QWORD *)(a1 + 16), v4);
    *(_QWORD *)(a1 + 8) = memptr;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v7 = *(_BYTE **)(a2 + 8);
  if (*(_DWORD *)(a2 + 28))
    v8 = *(_DWORD *)(a2 + 24) == 0;
  else
    v8 = 1;
  v9 = *(_QWORD *)(a2 + 32);
  if (v8)
    v10 = 0;
  else
    v10 = *(_QWORD *)(a2 + 24);
  v11 = HIDWORD(v9);
  __len = HIDWORD(v10) * HIDWORD(v9);
  if (HIDWORD(v10) * HIDWORD(v9) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_50;
  }
  if ((_DWORD)v10)
    v12 = HIDWORD(v10) == 0;
  else
    v12 = 1;
  if (v12)
    return a1;
  v13 = *(_BYTE **)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 32);
  v15 = !*(_DWORD *)(a1 + 28) || *(_DWORD *)(a1 + 24) == 0;
  v16 = v15 ? 0 : *(_DWORD *)(a1 + 28);
  v17 = HIDWORD(v14);
  if (v16 * HIDWORD(v14) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
LABEL_50:
    abort();
  }
  if (v9 != 1 || v14 != 1)
  {
    if ((_DWORD)v10)
    {
      v18 = v10 - 1;
      v19 = HIDWORD(v10) - 1;
      if (HIDWORD(v10) != 1)
      {
        if ((_DWORD)v10 == 1)
        {
          do
          {
            *v13 = *v7;
            v7 += v11;
            v13 += v17;
            --v19;
          }
          while (v19);
        }
        else
        {
          v20 = 0;
          do
          {
            v21 = v10 - 1;
            v22 = v7;
            v23 = v13;
            do
            {
              *v23 = *v22;
              v22 += v9;
              v23 += v14;
              --v21;
            }
            while (v21);
            *v23 = *v22;
            v7 += v11;
            v13 += v17;
            ++v20;
          }
          while (v20 != v19);
        }
      }
      if ((_DWORD)v10 != 1)
      {
        do
        {
          *v13 = *v7;
          v7 += v9;
          v13 += v14;
          --v18;
        }
        while (v18);
      }
      *v13 = *v7;
    }
    return a1;
  }
  if (HIDWORD(v9) != HIDWORD(v14) || HIDWORD(v9) != (_DWORD)v10)
  {
    if (!(_DWORD)v10)
      return a1;
    v24 = HIDWORD(v10) - 1;
    if (HIDWORD(v10) == 1)
    {
LABEL_51:
      if (v7
        || !sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
      {
        v25 = v13;
        v26 = v7;
        v27 = v10;
LABEL_56:
        memmove(v25, v26, v27);
        return a1;
      }
    }
    else
    {
      while (v7
           || !sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
      {
        memmove(v13, v7, v10);
        v7 += v11;
        v13 += v17;
        if (!--v24)
          goto LABEL_51;
      }
    }
    goto LABEL_50;
  }
  if (!v7 && __len)
  {
    if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
    {
      goto LABEL_50;
    }
    goto LABEL_55;
  }
  if (__len)
  {
LABEL_55:
    v25 = v13;
    v26 = v7;
    v27 = (HIDWORD(v10) * HIDWORD(v9));
    goto LABEL_56;
  }
  return a1;
}

void sub_2109CDD0C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
    free(v3);
  *(_QWORD *)(v1 + 8) = 0;
  _Unwind_Resume(exception_object);
}

uint64_t sub_2109CDD2C(uint64_t a1, uint64_t a2)
{
  size_t v4;
  size_t v5;
  int v6;
  _WORD *v7;
  BOOL v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  _WORD *v14;
  unint64_t v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  _WORD *v23;
  _WORD *v24;
  int v25;
  size_t v26;
  int v27;
  uint64_t v28;
  unint64_t v30;
  void *memptr;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v5;
  if (v4)
  {
    memptr = 0;
    v6 = malloc_type_posix_memalign(&memptr, v5, v4, 0x1F88E90uLL);
    if (v6)
      sub_2109E756C(v6, *(_QWORD *)(a1 + 16), v4);
    *(_QWORD *)(a1 + 8) = memptr;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v7 = *(_WORD **)(a2 + 8);
  if (*(_DWORD *)(a2 + 28))
    v8 = *(_DWORD *)(a2 + 24) == 0;
  else
    v8 = 1;
  v9 = *(_QWORD *)(a2 + 32);
  if (v8)
    v10 = 0;
  else
    v10 = *(_QWORD *)(a2 + 24);
  v11 = v9 >> 33;
  v12 = HIDWORD(v10) * (v9 >> 33);
  if ((_DWORD)v12 == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_48;
  }
  if ((_DWORD)v10)
    v13 = HIDWORD(v10) == 0;
  else
    v13 = 1;
  if (v13)
    return a1;
  v14 = *(_WORD **)(a1 + 8);
  v15 = *(_QWORD *)(a1 + 32);
  v16 = !*(_DWORD *)(a1 + 28) || *(_DWORD *)(a1 + 24) == 0;
  v17 = v16 ? 0 : *(_DWORD *)(a1 + 28);
  v30 = v15 >> 33;
  if (v17 * (v15 >> 33) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
LABEL_48:
    abort();
  }
  v18 = v9 & 0xFFFFFFFE;
  v19 = v15 & 0xFFFFFFFE;
  if (v18 != 2 || v19 != 2)
  {
    if (!(_DWORD)v10)
      return a1;
    v20 = v10 - 1;
    v21 = HIDWORD(v10) - 1;
    if (HIDWORD(v10) != 1)
    {
      if ((_DWORD)v10 == 1)
      {
        do
        {
          *v14 = *v7;
          v7 += v11;
          v14 += v30;
          --v21;
        }
        while (v21);
LABEL_55:
        *v14 = *v7;
        return a1;
      }
      v22 = 0;
      do
      {
        v23 = v14;
        v24 = v7;
        v25 = v10 - 1;
        do
        {
          *v23 = *v24;
          v24 = (_WORD *)((char *)v24 + v18);
          v23 = (_WORD *)((char *)v23 + v19);
          --v25;
        }
        while (v25);
        *v23 = *v24;
        v7 += v11;
        v14 += v30;
        ++v22;
      }
      while (v22 != v21);
    }
    if ((_DWORD)v10 != 1)
    {
      do
      {
        *v14 = *v7;
        v7 = (_WORD *)((char *)v7 + v18);
        v14 = (_WORD *)((char *)v14 + v19);
        --v20;
      }
      while (v20);
    }
    goto LABEL_55;
  }
  if ((_DWORD)v11 != (_DWORD)v10 || (_DWORD)v11 != (_DWORD)v30)
  {
    if (!(_DWORD)v10)
      return a1;
    v26 = 2 * v10;
    v27 = HIDWORD(v10) - 1;
    if (HIDWORD(v10) == 1)
    {
LABEL_49:
      if (v7
        || !sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
      {
        memmove(v14, v7, v26);
        return a1;
      }
    }
    else
    {
      v28 = 2 * v11;
      while (v7
           || !sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
      {
        memmove(v14, v7, v26);
        v7 = (_WORD *)((char *)v7 + v28);
        v14 += v30;
        if (!--v27)
          goto LABEL_49;
      }
    }
    goto LABEL_48;
  }
  if (!v7 && (_DWORD)v12)
  {
    if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
    {
      goto LABEL_48;
    }
    goto LABEL_53;
  }
  if ((_DWORD)v12)
LABEL_53:
    memmove(v14, v7, 2 * v12);
  return a1;
}

void sub_2109CE0A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
    free(v3);
  *(_QWORD *)(v1 + 8) = 0;
  _Unwind_Resume(exception_object);
}

uint64_t sub_2109CE0C0(uint64_t a1)
{
  void *v2;
  BOOL v3;
  int v4;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 28) || *(_DWORD *)(a1 + 24) == 0;
    v4 = v3 ? 0 : *(_DWORD *)(a1 + 28);
    if (v4 * (*(_QWORD *)(a1 + 32) >> 33) != -1)
      goto LABEL_11;
    if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
    v2 = *(void **)(a1 + 8);
    if (v2)
LABEL_11:
      free(v2);
  }
  *(_QWORD *)(a1 + 8) = 0;
  return a1;
}

uint64_t sub_2109CE15C(uint64_t a1, uint64_t a2)
{
  size_t v4;
  size_t v5;
  int v6;
  _WORD *v7;
  BOOL v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  _WORD *v13;
  unint64_t v14;
  BOOL v15;
  int v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  _WORD *v23;
  _WORD *v24;
  int v25;
  void *memptr;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v5;
  if (v4)
  {
    memptr = 0;
    v6 = malloc_type_posix_memalign(&memptr, v5, v4, 0x1F88E90uLL);
    if (v6)
      sub_2109E756C(v6, *(_QWORD *)(a1 + 16), v4);
    *(_QWORD *)(a1 + 8) = memptr;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v7 = *(_WORD **)(a2 + 8);
  if (*(_DWORD *)(a2 + 28))
    v8 = *(_DWORD *)(a2 + 24) == 0;
  else
    v8 = 1;
  v9 = *(_QWORD *)(a2 + 32);
  if (v8)
    v10 = 0;
  else
    v10 = *(_QWORD *)(a2 + 24);
  v11 = v9 >> 33;
  if (HIDWORD(v10) * (v9 >> 33) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_37;
  }
  if ((_DWORD)v10)
    v12 = HIDWORD(v10) == 0;
  else
    v12 = 1;
  if (v12)
    return a1;
  v13 = *(_WORD **)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 32);
  v15 = !*(_DWORD *)(a1 + 28) || *(_DWORD *)(a1 + 24) == 0;
  v16 = v15 ? 0 : *(_DWORD *)(a1 + 28);
  v17 = v14 >> 33;
  if (v16 * (v14 >> 33) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
LABEL_37:
    abort();
  }
  v18 = v10 - 1;
  v19 = 2 * (v9 >> 1);
  v20 = 2 * (v14 >> 1);
  v21 = HIDWORD(v10) - 1;
  if (HIDWORD(v10) != 1)
  {
    if ((_DWORD)v10 == 1)
    {
      do
      {
        *v13 = *v7;
        v7 += v11;
        v13 += v17;
        --v21;
      }
      while (v21);
    }
    else
    {
      v22 = 0;
      do
      {
        v23 = v13;
        v24 = v7;
        v25 = v10 - 1;
        do
        {
          *v23 = *v24;
          v24 = (_WORD *)((char *)v24 + v19);
          v23 = (_WORD *)((char *)v23 + v20);
          --v25;
        }
        while (v25);
        *v23 = *v24;
        v7 += v11;
        v13 += v17;
        ++v22;
      }
      while (v22 != v21);
    }
  }
  if ((_DWORD)v10 != 1)
  {
    do
    {
      *v13 = *v7;
      v7 = (_WORD *)((char *)v7 + v19);
      v13 = (_WORD *)((char *)v13 + v20);
      --v18;
    }
    while (v18);
  }
  *v13 = *v7;
  return a1;
}

void sub_2109CE378(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
    free(v3);
  *(_QWORD *)(v1 + 8) = 0;
  _Unwind_Resume(exception_object);
}

uint64_t sub_2109CE394(uint64_t a1, uint64_t a2)
{
  size_t v4;
  size_t v5;
  int v6;
  _DWORD *v7;
  BOOL v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  _DWORD *v14;
  unint64_t v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  _DWORD *v23;
  _DWORD *v24;
  int v25;
  size_t v26;
  int v27;
  uint64_t v28;
  unint64_t v30;
  void *memptr;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v5;
  if (v4)
  {
    memptr = 0;
    v6 = malloc_type_posix_memalign(&memptr, v5, v4, 0x1F88E90uLL);
    if (v6)
      sub_2109E756C(v6, *(_QWORD *)(a1 + 16), v4);
    *(_QWORD *)(a1 + 8) = memptr;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v7 = *(_DWORD **)(a2 + 8);
  if (*(_DWORD *)(a2 + 28))
    v8 = *(_DWORD *)(a2 + 24) == 0;
  else
    v8 = 1;
  v9 = *(_QWORD *)(a2 + 32);
  if (v8)
    v10 = 0;
  else
    v10 = *(_QWORD *)(a2 + 24);
  v11 = v9 >> 34;
  v12 = HIDWORD(v10) * (v9 >> 34);
  if ((_DWORD)v12 == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_48;
  }
  if ((_DWORD)v10)
    v13 = HIDWORD(v10) == 0;
  else
    v13 = 1;
  if (v13)
    return a1;
  v14 = *(_DWORD **)(a1 + 8);
  v15 = *(_QWORD *)(a1 + 32);
  v16 = !*(_DWORD *)(a1 + 28) || *(_DWORD *)(a1 + 24) == 0;
  v17 = v16 ? 0 : *(_DWORD *)(a1 + 28);
  v30 = v15 >> 34;
  if (v17 * (v15 >> 34) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
LABEL_48:
    abort();
  }
  v18 = v9 & 0xFFFFFFFC;
  v19 = v15 & 0xFFFFFFFC;
  if (v18 != 4 || v19 != 4)
  {
    if (!(_DWORD)v10)
      return a1;
    v20 = v10 - 1;
    v21 = HIDWORD(v10) - 1;
    if (HIDWORD(v10) != 1)
    {
      if ((_DWORD)v10 == 1)
      {
        do
        {
          *v14 = *v7;
          v7 += v11;
          v14 += v30;
          --v21;
        }
        while (v21);
LABEL_55:
        *v14 = *v7;
        return a1;
      }
      v22 = 0;
      do
      {
        v23 = v14;
        v24 = v7;
        v25 = v10 - 1;
        do
        {
          *v23 = *v24;
          v24 = (_DWORD *)((char *)v24 + v18);
          v23 = (_DWORD *)((char *)v23 + v19);
          --v25;
        }
        while (v25);
        *v23 = *v24;
        v7 += v11;
        v14 += v30;
        ++v22;
      }
      while (v22 != v21);
    }
    if ((_DWORD)v10 != 1)
    {
      do
      {
        *v14 = *v7;
        v7 = (_DWORD *)((char *)v7 + v18);
        v14 = (_DWORD *)((char *)v14 + v19);
        --v20;
      }
      while (v20);
    }
    goto LABEL_55;
  }
  if ((_DWORD)v11 != (_DWORD)v10 || (_DWORD)v11 != (_DWORD)v30)
  {
    if (!(_DWORD)v10)
      return a1;
    v26 = 4 * v10;
    v27 = HIDWORD(v10) - 1;
    if (HIDWORD(v10) == 1)
    {
LABEL_49:
      if (v7
        || !sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
      {
        memmove(v14, v7, v26);
        return a1;
      }
    }
    else
    {
      v28 = 4 * v11;
      while (v7
           || !sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
      {
        memmove(v14, v7, v26);
        v7 = (_DWORD *)((char *)v7 + v28);
        v14 += v30;
        if (!--v27)
          goto LABEL_49;
      }
    }
    goto LABEL_48;
  }
  if (!v7 && (_DWORD)v12)
  {
    if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
    {
      goto LABEL_48;
    }
    goto LABEL_53;
  }
  if ((_DWORD)v12)
LABEL_53:
    memmove(v14, v7, 4 * v12);
  return a1;
}

void sub_2109CE708(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
    free(v3);
  *(_QWORD *)(v1 + 8) = 0;
  _Unwind_Resume(exception_object);
}

uint64_t sub_2109CE728(uint64_t a1, uint64_t a2)
{
  size_t v4;
  size_t v5;
  int v6;
  __int128 v7;
  _BYTE *v8;
  unint64_t v9;
  BOOL v10;
  BOOL v11;
  int v12;
  unint64_t v13;
  int v14;
  size_t v15;
  _BOOL4 v16;
  _BYTE *v17;
  unint64_t v18;
  BOOL v19;
  int v21;
  _BYTE *v22;
  unint64_t v23;
  size_t v24;
  int v26;
  int v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  int v32;
  int v33;
  _BYTE *v34;
  _BYTE *v35;
  int v36;
  _BYTE *v37;
  _BYTE *v38;
  int v39;
  int v40;
  _BYTE *v41;
  _BYTE *v42;
  int v43;
  int v44;
  int v45;
  char *v46;
  unint64_t v47;
  unsigned __int8 v48;
  BOOL v49;
  uint64_t v50;
  uint64_t i;
  unsigned __int8 v52;
  int v53;
  int v54;
  _BYTE *v55;
  _BYTE *v56;
  int v57;
  int v58;
  _BYTE *v59;
  _BYTE *v60;
  void *v61;
  const void *v62;
  size_t v63;
  char *v64;
  int v66;
  _BYTE *v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *memptr;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v5;
  if (v4)
  {
    memptr = 0;
    v6 = malloc_type_posix_memalign(&memptr, v5, v4, 0x1F88E90uLL);
    if (v6)
      sub_2109E756C(v6, *(_QWORD *)(a1 + 16), v4);
    *(_QWORD *)(a1 + 8) = memptr;
  }
  v7 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v69 = a1;
  *(_OWORD *)(a1 + 24) = v7;
  v8 = *(_BYTE **)(a2 + 8);
  v9 = *(_QWORD *)(a2 + 36);
  if (*(_DWORD *)(a2 + 24))
    v10 = *(_DWORD *)(a2 + 28) == 0;
  else
    v10 = 1;
  v11 = v10 || *(_DWORD *)(a2 + 32) == 0;
  v12 = v11;
  if (v11)
    v13 = 0;
  else
    v13 = *(_QWORD *)(a2 + 24);
  if (v11)
    v14 = 0;
  else
    v14 = *(_DWORD *)(a2 + 32);
  v71 = *(unsigned int *)(a2 + 44);
  v15 = (v14 * *(_DWORD *)(a2 + 44));
  if ((_DWORD)v15 == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_130;
  }
  v16 = HIDWORD(v13) == 0;
  if (!(_DWORD)v13)
    v16 = 1;
  if (((v12 | v16) & 1) != 0)
    return v69;
  v17 = *(_BYTE **)(v69 + 8);
  v18 = *(_QWORD *)(v69 + 36);
  if (*(_DWORD *)(v69 + 32))
    v19 = *(_DWORD *)(v69 + 28) == 0;
  else
    v19 = 1;
  if (v19 || *(_DWORD *)(v69 + 24) == 0)
    v21 = 0;
  else
    v21 = *(_DWORD *)(v69 + 32);
  v70 = *(unsigned int *)(v69 + 44);
  if (v21 * *(_DWORD *)(v69 + 44) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_130;
  }
  if (v9 != 1 || v18 != 1)
  {
    if ((_DWORD)v13)
    {
      v27 = v13 - 1;
      v28 = HIDWORD(v13) - 1;
      v29 = HIDWORD(v9);
      v30 = HIDWORD(v18);
      v31 = v14 - 1;
      if (v14 != 1)
      {
        if (HIDWORD(v13) == 1)
        {
          if ((_DWORD)v13 == 1)
          {
            do
            {
              *v17 = *v8;
              v8 += v71;
              v17 += v70;
              --v31;
            }
            while (v31);
          }
          else
          {
            v53 = 0;
            do
            {
              v54 = v13 - 1;
              v55 = v8;
              v56 = v17;
              do
              {
                *v56 = *v55;
                v55 += v9;
                v56 += v18;
                --v54;
              }
              while (v54);
              *v56 = *v55;
              v8 += v71;
              v17 += v70;
              ++v53;
            }
            while (v53 != v31);
          }
        }
        else
        {
          v32 = 0;
          if ((_DWORD)v13 == 1)
          {
            do
            {
              v40 = HIDWORD(v13) - 1;
              v41 = v8;
              v42 = v17;
              do
              {
                *v42 = *v41;
                v41 += v29;
                v42 += v30;
                --v40;
              }
              while (v40);
              *v42 = *v41;
              v8 += v71;
              v17 += v70;
              ++v32;
            }
            while (v32 != v31);
          }
          else
          {
            do
            {
              v33 = 0;
              v34 = v8;
              v35 = v17;
              do
              {
                v36 = v13 - 1;
                v37 = v34;
                v38 = v35;
                do
                {
                  *v38 = *v37;
                  v37 += v9;
                  v38 += v18;
                  --v36;
                }
                while (v36);
                *v38 = *v37;
                v34 += v29;
                v35 += v30;
                ++v33;
              }
              while (v33 != v28);
              v39 = v13 - 1;
              do
              {
                *v35 = *v34;
                v34 += v9;
                v35 += v18;
                --v39;
              }
              while (v39);
              *v35 = *v34;
              v8 += v71;
              v17 += v70;
              ++v32;
            }
            while (v32 != v31);
          }
        }
      }
      if (HIDWORD(v13) != 1)
      {
        if ((_DWORD)v13 == 1)
        {
          do
          {
            *v17 = *v8;
            v8 += v29;
            v17 += v30;
            --v28;
          }
          while (v28);
        }
        else
        {
          v57 = 0;
          do
          {
            v58 = v13 - 1;
            v59 = v8;
            v60 = v17;
            do
            {
              *v60 = *v59;
              v59 += v9;
              v60 += v18;
              --v58;
            }
            while (v58);
            *v60 = *v59;
            v8 += v29;
            v17 += v30;
            ++v57;
          }
          while (v57 != v28);
        }
      }
      if ((_DWORD)v13 != 1)
      {
        do
        {
          *v17 = *v8;
          v8 += v9;
          v17 += v18;
          --v27;
        }
        while (v27);
      }
      *v17 = *v8;
    }
    return v69;
  }
  v22 = (_BYTE *)HIDWORD(v9);
  v23 = HIDWORD(v18);
  if (HIDWORD(v9) != (_DWORD)v23 || HIDWORD(v9) != (_DWORD)v13)
  {
    if (!(_DWORD)v13)
      return v69;
    v43 = HIDWORD(v13) - 1;
    v68 = v14 - 1;
    if (v14 == 1)
    {
LABEL_125:
      v64 = v8;
      if (HIDWORD(v13) == 1)
      {
LABEL_131:
        if (!v64
          && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
        {
          goto LABEL_130;
        }
        v61 = v17;
        v62 = v64;
        v63 = v13;
        goto LABEL_136;
      }
      while (v64
           || !sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
      {
        memmove(v17, v64, v13);
        v64 = &v22[(_QWORD)v64];
        v17 += v23;
        if (!--v43)
          goto LABEL_131;
      }
    }
    else if (HIDWORD(v13) == 1)
    {
      while (v8
           || !sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
      {
        memmove(v17, v8, v13);
        v8 += v71;
        v17 += v70;
        if (!--v68)
          goto LABEL_125;
      }
    }
    else
    {
      v44 = 0;
      while (1)
      {
        v66 = v44;
        v45 = 0;
        v67 = v8;
        v46 = v17;
        do
        {
          while (v8)
          {
            memmove(v46, v8, v13);
            v8 = &v22[(_QWORD)v8];
            v46 += v23;
            if (++v45 == v43)
              goto LABEL_71;
          }
          sub_2109EDAB0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4);
          v8 = v22;
          v47 = v23;
          v48 = atomic_load((unsigned __int8 *)&qword_254A75F38);
          if ((v48 & 1) == 0 && __cxa_guard_acquire(&qword_254A75F38))
          {
            __cxa_atexit((void (*)(void *))sub_2109EDF34, &qword_254A75F00, &dword_21089F000);
            __cxa_guard_release(&qword_254A75F38);
          }
          if (byte_254A75F28)
            v49 = byte_254A75F30 == 0;
          else
            v49 = 0;
          if (!v49)
          {
            v50 = qword_254A75F00;
            for (i = unk_254A75F08; v50 != i; v50 += 16)
              (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v50)(*(_QWORD *)(v50 + 8), "ptr != nullptr || size == 0", 27, &unk_210A01421, 0);
          }
          v52 = atomic_load((unsigned __int8 *)&qword_254A75F38);
          if ((v52 & 1) == 0 && __cxa_guard_acquire(&qword_254A75F38))
          {
            __cxa_atexit((void (*)(void *))sub_2109EDF34, &qword_254A75F00, &dword_21089F000);
            __cxa_guard_release(&qword_254A75F38);
          }
          if (!byte_254A75F28)
            goto LABEL_130;
          v23 = v47;
          v22 = v8;
          qword_254A75F18(unk_254A75F20, "ptr != nullptr || size == 0", 27, &unk_210A01421, 0);
          memcpy(v46, 0, v13);
          v46 += v23;
          ++v45;
        }
        while (v45 != v43);
        if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
        {
          break;
        }
LABEL_71:
        memmove(v46, v8, v13);
        v8 = &v67[v71];
        v17 += v70;
        v44 = v66 + 1;
        if (v66 + 1 == v68)
          goto LABEL_125;
      }
    }
LABEL_130:
    abort();
  }
  v24 = (HIDWORD(v13) * v13);
  if ((_DWORD)v71 == (_DWORD)v24 && (_DWORD)v71 == (_DWORD)v70)
  {
    if (v8 || !(_DWORD)v15)
    {
      if (!(_DWORD)v15)
        return v69;
    }
    else if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
    {
      goto LABEL_130;
    }
    v61 = v17;
    v62 = v8;
    v63 = v15;
LABEL_136:
    memmove(v61, v62, v63);
    return v69;
  }
  if (!(_DWORD)v13)
    return v69;
  v26 = v14 - 1;
  if (v14 == 1)
  {
LABEL_116:
    if (!(_DWORD)v24 || v8)
    {
      if (!(_DWORD)v24)
        return v69;
    }
    else if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
    {
      goto LABEL_130;
    }
    v61 = v17;
    v62 = v8;
    v63 = (HIDWORD(v13) * v13);
    goto LABEL_136;
  }
  if ((_DWORD)v24)
  {
    while (v8
         || !sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
    {
      memmove(v17, v8, v24);
      v8 += v71;
      v17 += v70;
      if (!--v26)
        goto LABEL_116;
    }
    goto LABEL_130;
  }
  return v69;
}

void sub_2109CEFE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v13;

  v13 = *(void **)(a12 + 8);
  if (v13)
    free(v13);
  *(_QWORD *)(a12 + 8) = 0;
  _Unwind_Resume(exception_object);
}

uint64_t sub_2109CF018(uint64_t a1, uint64_t a2)
{
  size_t v4;
  size_t v5;
  int v6;
  __int128 v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  BOOL v12;
  char v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  BOOL v17;
  char v18;
  _WORD *v19;
  unint64_t v20;
  unint64_t v21;
  BOOL v22;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  _WORD *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  _WORD *v46;
  int v47;
  _WORD *v48;
  char *v49;
  _WORD *v50;
  _WORD *v51;
  _WORD *v52;
  _WORD *v53;
  _WORD *v54;
  _WORD *v55;
  int v56;
  int v57;
  int v58;
  size_t v59;
  int v60;
  int v61;
  char *v62;
  char *v63;
  unint64_t v64;
  unsigned __int8 v65;
  BOOL v66;
  uint64_t v67;
  uint64_t i;
  unsigned __int8 v69;
  BOOL v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  _WORD *v74;
  _WORD *v75;
  int v76;
  int v77;
  uint64_t v78;
  _WORD *v79;
  _WORD *v80;
  int v81;
  int v82;
  _WORD *v83;
  _WORD *v84;
  int v85;
  uint64_t v86;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  char *v92;
  int v93;
  unint64_t v94;
  uint64_t v95;
  void *memptr;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v5;
  if (v4)
  {
    memptr = 0;
    v6 = malloc_type_posix_memalign(&memptr, v5, v4, 0x1F88E90uLL);
    if (v6)
      sub_2109E756C(v6, *(_QWORD *)(a1 + 16), v4);
    *(_QWORD *)(a1 + 8) = memptr;
  }
  v7 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v90 = a1;
  *(_OWORD *)(a1 + 24) = v7;
  v8 = *(char **)(a2 + 8);
  v9 = *(_QWORD *)(a2 + 36);
  v10 = (unint64_t)*(unsigned int *)(a2 + 44) >> 1;
  if (*(_DWORD *)(a2 + 24))
    v11 = *(_DWORD *)(a2 + 28) == 0;
  else
    v11 = 1;
  v12 = v11 || *(_DWORD *)(a2 + 32) == 0;
  v13 = v12;
  if (v12)
    v14 = 0;
  else
    v14 = *(_QWORD *)(a2 + 24);
  if (v12)
    v15 = 0;
  else
    v15 = *(_DWORD *)(a2 + 32);
  v16 = (v15 * v10);
  if ((_DWORD)v16 == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_131;
  }
  if ((_DWORD)v14)
    v17 = HIDWORD(v14) == 0;
  else
    v17 = 1;
  if (v17)
    v18 = 1;
  else
    v18 = v13;
  if ((v18 & 1) != 0)
    return v90;
  v19 = *(_WORD **)(v90 + 8);
  v20 = *(_QWORD *)(v90 + 36);
  v21 = (unint64_t)*(unsigned int *)(v90 + 44) >> 1;
  if (*(_DWORD *)(v90 + 32))
    v22 = *(_DWORD *)(v90 + 28) == 0;
  else
    v22 = 1;
  if (v22 || *(_DWORD *)(v90 + 24) == 0)
    v24 = 0;
  else
    v24 = *(_DWORD *)(v90 + 32);
  if (v24 * (_DWORD)v21 == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_131;
  }
  v25 = v9 & 0xFFFFFFFE;
  v26 = v20 & 0xFFFFFFFE;
  if (v25 != 2 || v26 != 2)
  {
    v33 = v14 - 1;
    v34 = HIDWORD(v14) - 1;
    v35 = v9 >> 33;
    v36 = v20 >> 33;
    v37 = v15 - 1;
    if (v15 == 1)
    {
      v39 = v8;
      if (HIDWORD(v14) == 1)
        goto LABEL_106;
    }
    else
    {
      v38 = v10;
      v39 = v8;
      if (HIDWORD(v14) == 1)
      {
        if ((_DWORD)v14 != 1)
        {
          v77 = 0;
          v78 = 2 * v38;
          do
          {
            v79 = v19;
            v80 = v39;
            v81 = v14 - 1;
            do
            {
              *v79 = *v80;
              v80 = (_WORD *)((char *)v80 + v25);
              v79 = (_WORD *)((char *)v79 + v26);
              --v81;
            }
            while (v81);
            *v79 = *v80;
            v39 = (_WORD *)((char *)v39 + v78);
            v19 += v21;
            ++v77;
          }
          while (v77 != v37);
LABEL_106:
          while (v33)
          {
            *v19 = *v39;
            v39 = (_WORD *)((char *)v39 + v25);
            v19 = (_WORD *)((char *)v19 + v26);
            --v33;
          }
          goto LABEL_138;
        }
        do
        {
          *v19 = *v39;
          v39 += v38;
          v19 += v21;
          --v37;
        }
        while (v37);
LABEL_138:
        *v19 = *v39;
        return v90;
      }
      if ((_DWORD)v14 == 1)
      {
        v82 = 0;
        do
        {
          v83 = v19;
          v84 = v39;
          v85 = HIDWORD(v14) - 1;
          do
          {
            *v83 = *v84;
            v84 += v35;
            v83 += v36;
            --v85;
          }
          while (v85);
          *v83 = *v84;
          v39 += v38;
          v19 += v21;
          ++v82;
        }
        while (v82 != v37);
        do
        {
LABEL_117:
          *v19 = *v39;
          v39 += v35;
          v19 += v36;
          --v34;
        }
        while (v34);
        goto LABEL_138;
      }
      v40 = 0;
      v41 = v38;
      v42 = v35;
      v43 = 2 * v21;
      v44 = v36;
      v45 = &v8[2 * v35];
      v46 = &v19[v36];
      do
      {
        v47 = 0;
        v48 = v46;
        v49 = v45;
        v50 = v19;
        v51 = v39;
        do
        {
          v52 = v49;
          v53 = v48;
          v54 = v50;
          v55 = v39;
          v56 = v33;
          do
          {
            *v54 = *v55;
            v55 = (_WORD *)((char *)v55 + v25);
            v54 = (_WORD *)((char *)v54 + v26);
            --v56;
          }
          while (v56);
          *v54 = *v55;
          v39 = (_WORD *)((char *)v39 + v42 * 2);
          v50 = (_WORD *)((char *)v50 + v44 * 2);
          ++v47;
          v49 = (char *)&v52[v42];
          v48 = &v53[v44];
        }
        while (v47 != v34);
        v57 = v33;
        do
        {
          *v53 = *v52;
          v52 = (_WORD *)((char *)v52 + v25);
          v53 = (_WORD *)((char *)v53 + v26);
          --v57;
        }
        while (v57);
        *v53 = *v52;
        v39 = &v51[v41];
        v19 = (_WORD *)((char *)v19 + v43);
        ++v40;
        v45 += v41 * 2;
        v46 = (_WORD *)((char *)v46 + v43);
      }
      while (v40 != v37);
    }
    if (v33)
    {
      v71 = 0;
      v72 = 2 * v35;
      v73 = 2 * v36;
      do
      {
        v74 = v19;
        v75 = v39;
        v76 = v33;
        do
        {
          *v74 = *v75;
          v75 = (_WORD *)((char *)v75 + v25);
          v74 = (_WORD *)((char *)v74 + v26);
          --v76;
        }
        while (v76);
        *v74 = *v75;
        v39 = (_WORD *)((char *)v39 + v72);
        v19 = (_WORD *)((char *)v19 + v73);
        ++v71;
      }
      while (v71 != v34);
      goto LABEL_106;
    }
    goto LABEL_117;
  }
  v27 = v9 >> 33;
  v28 = v20 >> 33;
  if (v9 >> 33 != (_DWORD)v14 || (_DWORD)v27 != (_DWORD)v28)
  {
    v58 = HIDWORD(v14) - 1;
    v59 = 2 * v14;
    v94 = v27;
    v95 = 2 * v27;
    v93 = v15 - 1;
    if (v15 == 1)
    {
LABEL_126:
      if (HIDWORD(v14) == 1)
      {
LABEL_132:
        if (!v8
          && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
        {
          goto LABEL_131;
        }
        memmove(v19, v8, v59);
        return v90;
      }
      v86 = 2 * v28;
      while (v8
           || !sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
      {
        memmove(v19, v8, v59);
        v8 += v95;
        v19 = (_WORD *)((char *)v19 + v86);
        if (!--v58)
          goto LABEL_132;
      }
    }
    else if (HIDWORD(v14) == 1)
    {
      while (v8
           || !sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
      {
        memmove(v19, v8, v59);
        v8 += 2 * v10;
        v19 += v21;
        if (!--v93)
          goto LABEL_126;
      }
    }
    else
    {
      v60 = 0;
      v88 = v10;
      v89 = v21;
      while (1)
      {
        v91 = v60;
        v61 = 0;
        v92 = v8;
        v62 = v8;
        v63 = (char *)v19;
        v64 = v94;
        do
        {
          while (v62)
          {
            memmove(v63, v62, v59);
            v62 += 2 * v64;
            v63 += 2 * v28;
            if (++v61 == v58)
              goto LABEL_69;
          }
          sub_2109EDAB0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4);
          v65 = atomic_load((unsigned __int8 *)&qword_254A75F38);
          if ((v65 & 1) == 0 && __cxa_guard_acquire(&qword_254A75F38))
          {
            __cxa_atexit((void (*)(void *))sub_2109EDF34, &qword_254A75F00, &dword_21089F000);
            __cxa_guard_release(&qword_254A75F38);
          }
          if (byte_254A75F28)
            v66 = byte_254A75F30 == 0;
          else
            v66 = 0;
          if (!v66)
          {
            v67 = qword_254A75F00;
            for (i = unk_254A75F08; v67 != i; v67 += 16)
              (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v67)(*(_QWORD *)(v67 + 8), "ptr != nullptr || size == 0", 27, &unk_210A01421, 0);
          }
          v69 = atomic_load((unsigned __int8 *)&qword_254A75F38);
          if ((v69 & 1) == 0 && __cxa_guard_acquire(&qword_254A75F38))
          {
            __cxa_atexit((void (*)(void *))sub_2109EDF34, &qword_254A75F00, &dword_21089F000);
            __cxa_guard_release(&qword_254A75F38);
          }
          v64 = v94;
          if (!byte_254A75F28)
            goto LABEL_131;
          qword_254A75F18(unk_254A75F20, "ptr != nullptr || size == 0", 27, &unk_210A01421, 0);
          memcpy(v63, 0, v59);
          v63 += 2 * v28;
          ++v61;
          v62 = (char *)v95;
        }
        while (v61 != v58);
        v70 = sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4);
        v62 = (char *)v95;
        if (v70)
          break;
LABEL_69:
        memmove(v63, v62, v59);
        v8 = &v92[2 * v88];
        v19 += v89;
        v60 = v91 + 1;
        if (v91 + 1 == v93)
          goto LABEL_126;
      }
    }
LABEL_131:
    abort();
  }
  v29 = (HIDWORD(v14) * v14);
  if ((_DWORD)v10 == (_DWORD)v29 && (_DWORD)v10 == (_DWORD)v21)
  {
    if (v8 || !(_DWORD)v16)
    {
      if (!(_DWORD)v16)
        return v90;
    }
    else if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
    {
      goto LABEL_131;
    }
    memmove(v19, v8, 2 * v16);
    return v90;
  }
  v31 = v15 - 1;
  if (v15 == 1)
  {
LABEL_109:
    if (!(_DWORD)v29 || v8)
    {
      if (!(_DWORD)v29)
        return v90;
    }
    else if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
    {
      goto LABEL_131;
    }
    memmove(v19, v8, 2 * v29);
    return v90;
  }
  if ((_DWORD)v29)
  {
    v32 = 2 * v21;
    while (v8
         || !sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
    {
      memmove(v19, v8, 2 * v29);
      v8 += 2 * v10;
      v19 = (_WORD *)((char *)v19 + v32);
      if (!--v31)
        goto LABEL_109;
    }
    goto LABEL_131;
  }
  return v90;
}

void sub_2109CF944(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v13;

  v13 = *(void **)(a12 + 8);
  if (v13)
    free(v13);
  *(_QWORD *)(a12 + 8) = 0;
  _Unwind_Resume(exception_object);
}

uint64_t sub_2109CF97C(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 32) || *(_DWORD *)(a1 + 28) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 24) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 32);
    if (v5 * (*(_DWORD *)(a1 + 44) >> 1) != -1)
      goto LABEL_14;
    if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
    v2 = *(void **)(a1 + 8);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 8) = 0;
  return a1;
}

uint64_t sub_2109CFA20(uint64_t a1, uint64_t a2)
{
  size_t v4;
  size_t v5;
  int v6;
  __int128 v7;
  _WORD *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  BOOL v12;
  char v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  char v17;
  _WORD *v18;
  unint64_t v19;
  unint64_t v20;
  BOOL v21;
  BOOL v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _WORD *v37;
  _WORD *v38;
  uint64_t v39;
  int v40;
  _WORD *v41;
  _WORD *v42;
  _WORD *v43;
  _WORD *v44;
  _WORD *v45;
  _WORD *v46;
  _WORD *v47;
  _WORD *v48;
  int v49;
  int v50;
  int v51;
  _WORD *v52;
  _WORD *v53;
  int v54;
  int v55;
  _WORD *v56;
  _WORD *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  _WORD *v61;
  _WORD *v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *memptr;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v5;
  if (v4)
  {
    memptr = 0;
    v6 = malloc_type_posix_memalign(&memptr, v5, v4, 0x1F88E90uLL);
    if (v6)
      sub_2109E756C(v6, *(_QWORD *)(a1 + 16), v4);
    *(_QWORD *)(a1 + 8) = memptr;
  }
  v7 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v7;
  v8 = *(_WORD **)(a2 + 8);
  v9 = *(_QWORD *)(a2 + 36);
  v10 = (unint64_t)*(unsigned int *)(a2 + 44) >> 1;
  if (*(_DWORD *)(a2 + 24))
    v11 = *(_DWORD *)(a2 + 28) == 0;
  else
    v11 = 1;
  v12 = v11 || *(_DWORD *)(a2 + 32) == 0;
  v13 = v12;
  if (v12)
    v14 = 0;
  else
    v14 = *(_QWORD *)(a2 + 24);
  if (v12)
    v15 = 0;
  else
    v15 = *(_DWORD *)(a2 + 32);
  if (v15 * (_DWORD)v10 == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_77;
  }
  if ((_DWORD)v14)
    v16 = HIDWORD(v14) == 0;
  else
    v16 = 1;
  if (v16)
    v17 = 1;
  else
    v17 = v13;
  if ((v17 & 1) != 0)
    return a1;
  v18 = *(_WORD **)(a1 + 8);
  v19 = *(_QWORD *)(a1 + 36);
  v20 = (unint64_t)*(unsigned int *)(a1 + 44) >> 1;
  v21 = !*(_DWORD *)(a1 + 32) || *(_DWORD *)(a1 + 28) == 0;
  v22 = v21 || *(_DWORD *)(a1 + 24) == 0;
  v23 = v22 ? 0 : *(_DWORD *)(a1 + 32);
  if (v23 * (_DWORD)v20 == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
LABEL_77:
    abort();
  }
  v24 = v9 >> 1;
  v25 = v14 - 1;
  v26 = v19 >> 1;
  v27 = HIDWORD(v14) - 1;
  v28 = v9 >> 33;
  v29 = v19 >> 33;
  v30 = v15 - 1;
  if (v15 != 1)
  {
    if (HIDWORD(v14) == 1)
    {
      if ((_DWORD)v14 == 1)
      {
        do
        {
          *v18 = *v8;
          v8 += v10;
          v18 += v20;
          --v30;
        }
        while (v30);
      }
      else
      {
        v51 = 0;
        do
        {
          v52 = v18;
          v53 = v8;
          v54 = v14 - 1;
          do
          {
            *v52 = *v53;
            v53 += v24;
            v52 += v26;
            --v54;
          }
          while (v54);
          *v52 = *v53;
          v8 += v10;
          v18 += v20;
          ++v51;
        }
        while (v51 != v30);
      }
    }
    else
    {
      v31 = 0;
      v32 = 2 * v10;
      v33 = v28;
      if ((_DWORD)v14 == 1)
      {
        do
        {
          v55 = HIDWORD(v14) - 1;
          v56 = v18;
          v57 = v8;
          do
          {
            *v56 = *v57;
            v57 = (_WORD *)((char *)v57 + v33 * 2);
            v56 += v29;
            --v55;
          }
          while (v55);
          *v56 = *v57;
          v8 = (_WORD *)((char *)v8 + v32);
          v18 += v20;
          ++v31;
        }
        while (v31 != v30);
      }
      else
      {
        v34 = 2 * v24;
        v35 = 2 * v20;
        v36 = v29;
        v37 = &v8[v33];
        v38 = &v18[v29];
        v39 = 2 * v26;
        do
        {
          v40 = 0;
          v41 = v38;
          v42 = v37;
          v43 = v18;
          v44 = v8;
          do
          {
            v45 = v42;
            v46 = v41;
            v47 = v43;
            v48 = v44;
            v49 = v25;
            do
            {
              *v47 = *v48;
              v48 = (_WORD *)((char *)v48 + v34);
              v47 = (_WORD *)((char *)v47 + v39);
              --v49;
            }
            while (v49);
            *v47 = *v48;
            v44 = (_WORD *)((char *)v44 + v33 * 2);
            v43 = (_WORD *)((char *)v43 + v36 * 2);
            ++v40;
            v42 = &v45[v33];
            v41 = &v46[v36];
          }
          while (v40 != v27);
          v50 = v25;
          do
          {
            *v46 = *v45;
            v45 = (_WORD *)((char *)v45 + v34);
            v46 = (_WORD *)((char *)v46 + v39);
            --v50;
          }
          while (v50);
          *v46 = *v45;
          v8 = (_WORD *)((char *)v8 + v32);
          v18 = (_WORD *)((char *)v18 + v35);
          ++v31;
          v37 = (_WORD *)((char *)v37 + v32);
          v38 = (_WORD *)((char *)v38 + v35);
        }
        while (v31 != v30);
      }
    }
  }
  if (v27)
  {
    if (v25)
    {
      v58 = 0;
      v59 = 2 * v28;
      v60 = 2 * v29;
      do
      {
        v61 = v18;
        v62 = v8;
        v63 = v25;
        do
        {
          *v61 = *v62;
          v62 += v24;
          v61 += v26;
          --v63;
        }
        while (v63);
        *v61 = *v62;
        v8 = (_WORD *)((char *)v8 + v59);
        v18 = (_WORD *)((char *)v18 + v60);
        ++v58;
      }
      while (v58 != v27);
    }
    else
    {
      v64 = 2 * v28;
      v65 = 2 * v29;
      do
      {
        *v18 = *v8;
        v8 = (_WORD *)((char *)v8 + v64);
        v18 = (_WORD *)((char *)v18 + v65);
        --v27;
      }
      while (v27);
    }
  }
  if (v25)
  {
    v66 = 2 * v24;
    v67 = 2 * v26;
    do
    {
      *v18 = *v8;
      v8 = (_WORD *)((char *)v8 + v66);
      v18 = (_WORD *)((char *)v18 + v67);
      --v25;
    }
    while (v25);
  }
  *v18 = *v8;
  return a1;
}

void sub_2109CFE20(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
    free(v3);
  *(_QWORD *)(v1 + 8) = 0;
  _Unwind_Resume(exception_object);
}

uint64_t sub_2109CFE3C(uint64_t a1, uint64_t a2)
{
  size_t v4;
  size_t v5;
  int v6;
  __int128 v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  BOOL v12;
  char v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  BOOL v17;
  char v18;
  _DWORD *v19;
  unint64_t v20;
  unint64_t v21;
  BOOL v22;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  _DWORD *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  _DWORD *v46;
  int v47;
  _DWORD *v48;
  char *v49;
  _DWORD *v50;
  _DWORD *v51;
  _DWORD *v52;
  _DWORD *v53;
  _DWORD *v54;
  _DWORD *v55;
  int v56;
  int v57;
  int v58;
  size_t v59;
  int v60;
  int v61;
  char *v62;
  char *v63;
  unint64_t v64;
  unsigned __int8 v65;
  BOOL v66;
  uint64_t v67;
  uint64_t i;
  unsigned __int8 v69;
  BOOL v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  _DWORD *v74;
  _DWORD *v75;
  int v76;
  int v77;
  uint64_t v78;
  _DWORD *v79;
  _DWORD *v80;
  int v81;
  int v82;
  _DWORD *v83;
  _DWORD *v84;
  int v85;
  uint64_t v86;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  char *v92;
  int v93;
  unint64_t v94;
  uint64_t v95;
  void *memptr;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v5;
  if (v4)
  {
    memptr = 0;
    v6 = malloc_type_posix_memalign(&memptr, v5, v4, 0x1F88E90uLL);
    if (v6)
      sub_2109E756C(v6, *(_QWORD *)(a1 + 16), v4);
    *(_QWORD *)(a1 + 8) = memptr;
  }
  v7 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v90 = a1;
  *(_OWORD *)(a1 + 24) = v7;
  v8 = *(char **)(a2 + 8);
  v9 = *(_QWORD *)(a2 + 36);
  v10 = (unint64_t)*(unsigned int *)(a2 + 44) >> 2;
  if (*(_DWORD *)(a2 + 24))
    v11 = *(_DWORD *)(a2 + 28) == 0;
  else
    v11 = 1;
  v12 = v11 || *(_DWORD *)(a2 + 32) == 0;
  v13 = v12;
  if (v12)
    v14 = 0;
  else
    v14 = *(_QWORD *)(a2 + 24);
  if (v12)
    v15 = 0;
  else
    v15 = *(_DWORD *)(a2 + 32);
  v16 = (v15 * v10);
  if ((_DWORD)v16 == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_131;
  }
  if ((_DWORD)v14)
    v17 = HIDWORD(v14) == 0;
  else
    v17 = 1;
  if (v17)
    v18 = 1;
  else
    v18 = v13;
  if ((v18 & 1) != 0)
    return v90;
  v19 = *(_DWORD **)(v90 + 8);
  v20 = *(_QWORD *)(v90 + 36);
  v21 = (unint64_t)*(unsigned int *)(v90 + 44) >> 2;
  if (*(_DWORD *)(v90 + 32))
    v22 = *(_DWORD *)(v90 + 28) == 0;
  else
    v22 = 1;
  if (v22 || *(_DWORD *)(v90 + 24) == 0)
    v24 = 0;
  else
    v24 = *(_DWORD *)(v90 + 32);
  if (v24 * (_DWORD)v21 == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_131;
  }
  v25 = v9 & 0xFFFFFFFC;
  v26 = v20 & 0xFFFFFFFC;
  if (v25 != 4 || v26 != 4)
  {
    v33 = v14 - 1;
    v34 = HIDWORD(v14) - 1;
    v35 = v9 >> 34;
    v36 = v20 >> 34;
    v37 = v15 - 1;
    if (v15 == 1)
    {
      v39 = v8;
      if (HIDWORD(v14) == 1)
        goto LABEL_106;
    }
    else
    {
      v38 = v10;
      v39 = v8;
      if (HIDWORD(v14) == 1)
      {
        if ((_DWORD)v14 != 1)
        {
          v77 = 0;
          v78 = 4 * v38;
          do
          {
            v79 = v19;
            v80 = v39;
            v81 = v14 - 1;
            do
            {
              *v79 = *v80;
              v80 = (_DWORD *)((char *)v80 + v25);
              v79 = (_DWORD *)((char *)v79 + v26);
              --v81;
            }
            while (v81);
            *v79 = *v80;
            v39 = (_DWORD *)((char *)v39 + v78);
            v19 += v21;
            ++v77;
          }
          while (v77 != v37);
LABEL_106:
          if ((_DWORD)v14 != 1)
          {
            do
            {
              *v19 = *v39;
              v39 = (_DWORD *)((char *)v39 + v25);
              v19 = (_DWORD *)((char *)v19 + v26);
              --v33;
            }
            while (v33);
          }
          goto LABEL_138;
        }
        do
        {
          *v19 = *v39;
          v39 += v38;
          v19 += v21;
          --v37;
        }
        while (v37);
LABEL_138:
        *v19 = *v39;
        return v90;
      }
      if ((_DWORD)v14 == 1)
      {
        v82 = 0;
        do
        {
          v83 = v19;
          v84 = v39;
          v85 = HIDWORD(v14) - 1;
          do
          {
            *v83 = *v84;
            v84 += v35;
            v83 += v36;
            --v85;
          }
          while (v85);
          *v83 = *v84;
          v39 += v38;
          v19 += v21;
          ++v82;
        }
        while (v82 != v37);
        do
        {
LABEL_117:
          *v19 = *v39;
          v39 += v35;
          v19 += v36;
          --v34;
        }
        while (v34);
        goto LABEL_138;
      }
      v40 = 0;
      v41 = v38;
      v42 = v35;
      v43 = 4 * v21;
      v44 = v36;
      v45 = &v8[4 * v35];
      v46 = &v19[v36];
      do
      {
        v47 = 0;
        v48 = v46;
        v49 = v45;
        v50 = v19;
        v51 = v39;
        do
        {
          v52 = v49;
          v53 = v48;
          v54 = v50;
          v55 = v39;
          v56 = v14 - 1;
          do
          {
            *v54 = *v55;
            v55 = (_DWORD *)((char *)v55 + v25);
            v54 = (_DWORD *)((char *)v54 + v26);
            --v56;
          }
          while (v56);
          *v54 = *v55;
          v39 = (_DWORD *)((char *)v39 + v42 * 4);
          v50 = (_DWORD *)((char *)v50 + v44 * 4);
          ++v47;
          v49 = (char *)&v52[v42];
          v48 = &v53[v44];
        }
        while (v47 != v34);
        v57 = v14 - 1;
        do
        {
          *v53 = *v52;
          v52 = (_DWORD *)((char *)v52 + v25);
          v53 = (_DWORD *)((char *)v53 + v26);
          --v57;
        }
        while (v57);
        *v53 = *v52;
        v39 = &v51[v41];
        v19 = (_DWORD *)((char *)v19 + v43);
        ++v40;
        v45 += v41 * 4;
        v46 = (_DWORD *)((char *)v46 + v43);
      }
      while (v40 != v37);
    }
    if ((_DWORD)v14 != 1)
    {
      v71 = 0;
      v72 = 4 * v35;
      v73 = 4 * v36;
      do
      {
        v74 = v19;
        v75 = v39;
        v76 = v14 - 1;
        do
        {
          *v74 = *v75;
          v75 = (_DWORD *)((char *)v75 + v25);
          v74 = (_DWORD *)((char *)v74 + v26);
          --v76;
        }
        while (v76);
        *v74 = *v75;
        v39 = (_DWORD *)((char *)v39 + v72);
        v19 = (_DWORD *)((char *)v19 + v73);
        ++v71;
      }
      while (v71 != v34);
      goto LABEL_106;
    }
    goto LABEL_117;
  }
  v27 = v9 >> 34;
  v28 = v20 >> 34;
  if (v9 >> 34 != (_DWORD)v14 || (_DWORD)v27 != (_DWORD)v28)
  {
    v58 = HIDWORD(v14) - 1;
    v59 = 4 * v14;
    v94 = v27;
    v95 = 4 * v27;
    v93 = v15 - 1;
    if (v15 == 1)
    {
LABEL_126:
      if (HIDWORD(v14) == 1)
      {
LABEL_132:
        if (!v8
          && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
        {
          goto LABEL_131;
        }
        memmove(v19, v8, v59);
        return v90;
      }
      v86 = 4 * v28;
      while (v8
           || !sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
      {
        memmove(v19, v8, v59);
        v8 += v95;
        v19 = (_DWORD *)((char *)v19 + v86);
        if (!--v58)
          goto LABEL_132;
      }
    }
    else if (HIDWORD(v14) == 1)
    {
      while (v8
           || !sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
      {
        memmove(v19, v8, v59);
        v8 += 4 * v10;
        v19 += v21;
        if (!--v93)
          goto LABEL_126;
      }
    }
    else
    {
      v60 = 0;
      v88 = v10;
      v89 = v21;
      while (1)
      {
        v91 = v60;
        v61 = 0;
        v92 = v8;
        v62 = v8;
        v63 = (char *)v19;
        v64 = v94;
        do
        {
          while (v62)
          {
            memmove(v63, v62, v59);
            v62 += 4 * v64;
            v63 += 4 * v28;
            if (++v61 == v58)
              goto LABEL_69;
          }
          sub_2109EDAB0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4);
          v65 = atomic_load((unsigned __int8 *)&qword_254A75F38);
          if ((v65 & 1) == 0 && __cxa_guard_acquire(&qword_254A75F38))
          {
            __cxa_atexit((void (*)(void *))sub_2109EDF34, &qword_254A75F00, &dword_21089F000);
            __cxa_guard_release(&qword_254A75F38);
          }
          if (byte_254A75F28)
            v66 = byte_254A75F30 == 0;
          else
            v66 = 0;
          if (!v66)
          {
            v67 = qword_254A75F00;
            for (i = unk_254A75F08; v67 != i; v67 += 16)
              (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v67)(*(_QWORD *)(v67 + 8), "ptr != nullptr || size == 0", 27, &unk_210A01421, 0);
          }
          v69 = atomic_load((unsigned __int8 *)&qword_254A75F38);
          if ((v69 & 1) == 0 && __cxa_guard_acquire(&qword_254A75F38))
          {
            __cxa_atexit((void (*)(void *))sub_2109EDF34, &qword_254A75F00, &dword_21089F000);
            __cxa_guard_release(&qword_254A75F38);
          }
          v64 = v94;
          if (!byte_254A75F28)
            goto LABEL_131;
          qword_254A75F18(unk_254A75F20, "ptr != nullptr || size == 0", 27, &unk_210A01421, 0);
          memcpy(v63, 0, v59);
          v63 += 4 * v28;
          ++v61;
          v62 = (char *)v95;
        }
        while (v61 != v58);
        v70 = sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4);
        v62 = (char *)v95;
        if (v70)
          break;
LABEL_69:
        memmove(v63, v62, v59);
        v8 = &v92[4 * v88];
        v19 += v89;
        v60 = v91 + 1;
        if (v91 + 1 == v93)
          goto LABEL_126;
      }
    }
LABEL_131:
    abort();
  }
  v29 = (HIDWORD(v14) * v14);
  if ((_DWORD)v10 == (_DWORD)v29 && (_DWORD)v10 == (_DWORD)v21)
  {
    if (v8 || !(_DWORD)v16)
    {
      if (!(_DWORD)v16)
        return v90;
    }
    else if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
    {
      goto LABEL_131;
    }
    memmove(v19, v8, 4 * v16);
    return v90;
  }
  v31 = v15 - 1;
  if (v15 == 1)
  {
LABEL_109:
    if (!(_DWORD)v29 || v8)
    {
      if (!(_DWORD)v29)
        return v90;
    }
    else if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
    {
      goto LABEL_131;
    }
    memmove(v19, v8, 4 * v29);
    return v90;
  }
  if ((_DWORD)v29)
  {
    v32 = 4 * v21;
    while (v8
         || !sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
    {
      memmove(v19, v8, 4 * v29);
      v8 += 4 * v10;
      v19 = (_DWORD *)((char *)v19 + v32);
      if (!--v31)
        goto LABEL_109;
    }
    goto LABEL_131;
  }
  return v90;
}

void sub_2109D0768(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v13;

  v13 = *(void **)(a12 + 8);
  if (v13)
    free(v13);
  *(_QWORD *)(a12 + 8) = 0;
  _Unwind_Resume(exception_object);
}

void sub_2109D07A4()
{
  JUMPOUT(0x212BCC6FCLL);
}

void sub_2109D07B8(int a1@<W1>, uint64_t a2@<X8>)
{
  sub_2109D2534(a2, a1);
}

void sub_2109D07E0(uint64_t a1, int a2)
{
  __asm { BR              X11 }
}

uint64_t sub_2109D083C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t result;
  int v3;
  uint64_t (**v4)();
  _BYTE v5[56];
  uint64_t v6;
  __int128 v7;

  v4 = &off_24CA84A20;
  sub_2109CC414(&v3, (uint64_t)v5);
  result = operator new();
  *(_QWORD *)result = &off_24CA832E0;
  *(_OWORD *)(result + 8) = *(_OWORD *)&v5[8];
  *(_OWORD *)(result + 20) = *(_OWORD *)(v1 + 20);
  *(_OWORD *)(result + 40) = *(_OWORD *)(v1 + 40);
  *(_QWORD *)(result + 56) = v6;
  *(_OWORD *)(result + 64) = v7;
  *v0 = result;
  return result;
}

void sub_2109D1FB4()
{
  sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/include/Kit/Image/FormatAlgorithm.h", 523, (uint64_t)&unk_210A01421, 0, (uint64_t)"Runtime format not in given Formats list", 40, (void (*)(void **))sub_2109EDDB4);
  abort();
}

void sub_2109D1FE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33)
{
  if (a33)
  {
    free(a33);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_2109D2534(uint64_t a1, int a2)
{
  __asm { BR              X11 }
}

uint64_t sub_2109D2588()
{
  _DWORD *v0;
  uint64_t *v1;
  uint64_t result;
  void *v3;
  uint64_t v4;
  _BYTE v5[28];
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t (**v9)();

  v9 = &off_24CA84A20;
  LOBYTE(v3) = 0;
  sub_2109CC260(v0, &v3, (uint64_t)&v4);
  result = operator new();
  *(_QWORD *)result = &off_24CA832E0;
  *(_OWORD *)(result + 8) = *(_OWORD *)v5;
  *(_OWORD *)(result + 20) = *(_OWORD *)&v5[12];
  *(_OWORD *)(result + 40) = v6;
  *(_QWORD *)(result + 56) = v7;
  *(_OWORD *)(result + 64) = v8;
  *v1 = result;
  return result;
}

void sub_2109D56DC()
{
  sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/include/Kit/Image/FormatAlgorithm.h", 523, (uint64_t)&unk_210A01421, 0, (uint64_t)"Runtime format not in given Formats list", 40, (void (*)(void **))sub_2109EDDB4);
  abort();
}

void sub_2109D5710(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  void *v23;

  if (v23)
  {
    free(v23);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

unint64_t *sub_2109D5890(unint64_t *a1, _DWORD *a2, unint64_t *a3, char a4, _WORD *a5, char a6, uint64_t a7)
{
  unint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  int v20;
  _WORD *v21;
  unint64_t v22;
  BOOL v23;
  unint64_t v24;
  unsigned int v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  _WORD *v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  _WORD *v38;
  int v39;
  void *memptr;

  if (a4)
  {
    v11 = *a3;
    v12 = a2[1];
  }
  else
  {
    LODWORD(v13) = *a2;
    v12 = a2[1];
    if (v12)
      v13 = v13;
    else
      v13 = 0;
    v11 = (*a2 != 0) | (unint64_t)(v13 << 32);
  }
  v14 = v12 * HIDWORD(v11);
  v15 = 2 * v14;
  v16 = (a7 - 1) | ((unint64_t)(a7 - 1) >> 1) | (((a7 - 1) | ((unint64_t)(a7 - 1) >> 1)) >> 2);
  v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
  v18 = v17 | (v17 >> 16) | ((v17 | (v17 >> 16)) >> 32);
  if (v18 + 1 > 8)
    v19 = v18 + 1;
  else
    v19 = 8;
  *a1 = v15;
  a1[1] = 0;
  a1[2] = v19;
  if (v14)
  {
    memptr = 0;
    v20 = malloc_type_posix_memalign(&memptr, v19, 2 * v14, 0x1F88E90uLL);
    if (v20)
      sub_2109E756C(v20, a1[2], v15);
    v21 = memptr;
    a1[1] = (unint64_t)memptr;
    v22 = *(_QWORD *)a2;
    a1[3] = *(_QWORD *)a2;
    a1[4] = (2 * v11) & 0xFFFFFFFEFFFFFFFELL;
    if (v21)
    {
      if ((_DWORD)v22)
        v23 = HIDWORD(v22) == 0;
      else
        v23 = 1;
      if (v23)
        v24 = 0;
      else
        v24 = v22;
      v25 = HIDWORD(v24) * ((v11 >> 31) >> 1);
      if (a6)
      {
        if (v25 == -1
          && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
        {
          abort();
        }
        if ((_DWORD)v24 && HIDWORD(v24))
        {
          v26 = v24 - 1;
          v27 = HIDWORD(v24) - 1;
          if (HIDWORD(v24) != 1)
          {
            v28 = HIDWORD(v11) & 0x7FFFFFFF;
            if ((_DWORD)v24 == 1)
            {
              do
              {
                *v21 = *a5;
                v21 += v28;
                --v27;
              }
              while (v27);
            }
            else
            {
              v29 = 0;
              v30 = 2 * v28;
              do
              {
                v31 = v21;
                v32 = v24 - 1;
                do
                {
                  *v31 = *a5;
                  v31 += v11 & 0x7FFFFFFF;
                  --v32;
                }
                while (v32);
                *v31 = *a5;
                v21 = (_WORD *)((char *)v21 + v30);
                ++v29;
              }
              while (v29 != v27);
            }
          }
          if ((_DWORD)v24 != 1)
          {
            do
            {
              *v21 = *a5;
              v21 += v11 & 0x7FFFFFFF;
              --v26;
            }
            while (v26);
          }
          *v21 = *a5;
        }
      }
      else
      {
        if (v25 == -1
          && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
        {
          abort();
        }
        if ((_DWORD)v24 && HIDWORD(v24))
        {
          v33 = v24 - 1;
          v34 = HIDWORD(v24) - 1;
          if (HIDWORD(v24) != 1)
          {
            v35 = HIDWORD(v11) & 0x7FFFFFFF;
            if ((_DWORD)v24 == 1)
            {
              do
              {
                *v21 = 0;
                v21 += v35;
                --v34;
              }
              while (v34);
            }
            else
            {
              v36 = 0;
              v37 = 2 * v35;
              do
              {
                v38 = v21;
                v39 = v24 - 1;
                do
                {
                  *v38 = 0;
                  v38 += v11 & 0x7FFFFFFF;
                  --v39;
                }
                while (v39);
                *v38 = 0;
                v21 = (_WORD *)((char *)v21 + v37);
                ++v36;
              }
              while (v36 != v34);
            }
          }
          if ((_DWORD)v24 != 1)
          {
            do
            {
              *v21 = 0;
              v21 += v11 & 0x7FFFFFFF;
              --v33;
            }
            while (v33);
          }
          *v21 = 0;
        }
      }
    }
  }
  else
  {
    a1[3] = *(_QWORD *)a2;
    a1[4] = (2 * v11) & 0xFFFFFFFEFFFFFFFELL;
  }
  return a1;
}

void sub_2109D5B84(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2109CE0C0(v1);
  _Unwind_Resume(a1);
}

void sub_2109D5B98(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2109CE0C0(v1);
  _Unwind_Resume(a1);
}

unint64_t *sub_2109D5BAC(unint64_t *a1, _DWORD *a2, unint64_t *a3, char a4, _DWORD *a5, char a6, uint64_t a7)
{
  unint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  int v20;
  _DWORD *v21;
  unint64_t v22;
  BOOL v23;
  void *v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  _DWORD *v31;
  int v32;
  uint64_t v33;
  void *memptr[3];
  _QWORD v36[2];

  if (a4)
  {
    v11 = *a3;
    v12 = a2[1];
  }
  else
  {
    LODWORD(v13) = *a2;
    v12 = a2[1];
    if (v12)
      v13 = v13;
    else
      v13 = 0;
    v11 = (*a2 != 0) | (unint64_t)(v13 << 32);
  }
  v14 = v12 * HIDWORD(v11);
  v15 = 4 * v14;
  v16 = (a7 - 1) | ((unint64_t)(a7 - 1) >> 1) | (((a7 - 1) | ((unint64_t)(a7 - 1) >> 1)) >> 2);
  v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
  v18 = v17 | (v17 >> 16) | ((v17 | (v17 >> 16)) >> 32);
  if (v18 + 1 > 8)
    v19 = v18 + 1;
  else
    v19 = 8;
  *a1 = v15;
  a1[1] = 0;
  a1[2] = v19;
  if (v14)
  {
    memptr[0] = 0;
    v20 = malloc_type_posix_memalign(memptr, v19, 4 * v14, 0x1F88E90uLL);
    if (v20)
      sub_2109E756C(v20, a1[2], v15);
    v21 = memptr[0];
    a1[1] = (unint64_t)memptr[0];
    v22 = *(_QWORD *)a2;
    a1[3] = *(_QWORD *)a2;
    a1[4] = (4 * v11) & 0xFFFFFFFCFFFFFFFCLL;
    if (v21 && a6)
    {
      if ((_DWORD)v22)
        v23 = HIDWORD(v22) == 0;
      else
        v23 = 1;
      if (v23)
        v24 = 0;
      else
        v24 = (void *)v22;
      memptr[0] = v21;
      memptr[1] = v24;
      memptr[2] = (void *)(v11 & 0x3FFFFFFF3FFFFFFFLL);
      if (HIDWORD(v24) * ((v11 >> 30) >> 2) == -1
        && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
      {
        abort();
      }
      v36[0] = memptr;
      v36[1] = a5;
      v25 = v11 & 0x3FFFFFFF;
      if (v25 == 1)
      {
        sub_210902D18((uint64_t)v36);
        return a1;
      }
      if ((_DWORD)v24 && HIDWORD(v24))
      {
        v26 = (_DWORD)v24 - 1;
        v27 = HIDWORD(v24) - 1;
        if (HIDWORD(v24) != 1)
        {
          v28 = HIDWORD(v11) & 0x3FFFFFFF;
          if ((_DWORD)v24 == 1)
          {
            do
            {
              *v21 = *a5;
              v21 += v28;
              --v27;
            }
            while (v27);
LABEL_39:
            *v21 = *a5;
            return a1;
          }
          v29 = 0;
          v30 = 4 * v28;
          do
          {
            v31 = v21;
            v32 = (_DWORD)v24 - 1;
            do
            {
              *v31 = *a5;
              v31 += v25;
              --v32;
            }
            while (v32);
            *v31 = *a5;
            v21 = (_DWORD *)((char *)v21 + v30);
            ++v29;
          }
          while (v29 != v27);
        }
        if ((_DWORD)v24 != 1)
        {
          v33 = 4 * v25;
          do
          {
            *v21 = *a5;
            v21 = (_DWORD *)((char *)v21 + v33);
            --v26;
          }
          while (v26);
        }
        goto LABEL_39;
      }
    }
  }
  else
  {
    a1[3] = *(_QWORD *)a2;
    a1[4] = (4 * v11) & 0xFFFFFFFCFFFFFFFCLL;
  }
  return a1;
}

void sub_2109D5DF0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
    free(v3);
  *(_QWORD *)(v1 + 8) = 0;
  _Unwind_Resume(exception_object);
}

size_t *sub_2109D5E0C(size_t *a1, unsigned int *a2, uint64_t a3, char a4, _BYTE *a5, char a6, uint64_t a7)
{
  size_t *v10;
  size_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  size_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  int v23;
  _BYTE *v24;
  size_t v25;
  BOOL v26;
  BOOL v27;
  char v28;
  size_t v29;
  int v30;
  size_t v31;
  size_t v32;
  BOOL v33;
  char v34;
  int v35;
  int v36;
  size_t v37;
  int v38;
  int v39;
  int v40;
  _BYTE *v41;
  int v42;
  _BYTE *v43;
  int v44;
  int v45;
  _BYTE *v46;
  size_t v47;
  BOOL v48;
  char v49;
  int v50;
  int v51;
  uint64_t v52;
  int v53;
  int v54;
  char *v55;
  BOOL v56;
  char v57;
  int i;
  int v59;
  int v60;
  _BYTE *v61;
  int v62;
  int v63;
  _BYTE *v64;
  size_t *v66;
  void *memptr;

  v10 = a1;
  if (a4)
  {
    v11 = *(_QWORD *)a3;
    v12 = *(_DWORD *)(a3 + 8);
    v13 = a2[2];
  }
  else
  {
    v14 = *a2;
    v15 = a2[1];
    if (v15)
      v16 = v14;
    else
      v16 = 0;
    v17 = v15 * v14;
    v13 = a2[2];
    if (v13)
      v12 = v17;
    else
      v12 = 0;
    v11 = (*a2 != 0) | (unint64_t)(v16 << 32);
  }
  v18 = v12 * v13;
  v19 = (a7 - 1) | ((unint64_t)(a7 - 1) >> 1) | (((a7 - 1) | ((unint64_t)(a7 - 1) >> 1)) >> 2);
  v20 = v19 | (v19 >> 4) | ((v19 | (v19 >> 4)) >> 8);
  v21 = v20 | (v20 >> 16) | ((v20 | (v20 >> 16)) >> 32);
  if (v21 + 1 > 8)
    v22 = v21 + 1;
  else
    v22 = 8;
  *a1 = v18;
  a1[1] = 0;
  a1[2] = v22;
  if ((_DWORD)v18)
  {
    memptr = 0;
    v23 = malloc_type_posix_memalign(&memptr, v22, v18, 0x1F88E90uLL);
    if (v23)
      sub_2109E756C(v23, v10[2], v18);
    v24 = memptr;
    v10[1] = (size_t)memptr;
  }
  else
  {
    v24 = 0;
  }
  v25 = *(_QWORD *)a2;
  *((_DWORD *)v10 + 8) = a2[2];
  v10[3] = v25;
  *(size_t *)((char *)v10 + 36) = v11;
  *((_DWORD *)v10 + 11) = v12;
  if (v24 && a6)
  {
    if (*((_DWORD *)v10 + 6))
      v26 = *((_DWORD *)v10 + 7) == 0;
    else
      v26 = 1;
    v27 = v26 || *((_DWORD *)v10 + 8) == 0;
    v28 = v27;
    if (v27)
      v29 = 0;
    else
      v29 = v10[3];
    if (v27)
      v30 = 0;
    else
      v30 = *((_DWORD *)v10 + 8);
    if (v30 * v12 == -1
      && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
    if (v11 == 1)
    {
      v31 = HIDWORD(v11);
      if ((_DWORD)v29 * (_DWORD)v11 == HIDWORD(v11))
      {
        v32 = (HIDWORD(v29) * v29);
        if (v12 == HIDWORD(v29) * HIDWORD(v11))
        {
          memset(v24, *a5, (v32 * v30));
          return v10;
        }
        if ((_DWORD)v29)
          v56 = HIDWORD(v29) == 0;
        else
          v56 = 1;
        if (v56)
          v57 = 1;
        else
          v57 = v28;
        if ((v57 & 1) == 0)
        {
          for (i = v30 - 1; i; --i)
          {
            memset(v24, *a5, (HIDWORD(v29) * v29));
            v24 += v12;
          }
LABEL_93:
          memset(v24, *a5, v32);
        }
      }
      else
      {
        v47 = HIDWORD(v29);
        if ((_DWORD)v29)
          v48 = HIDWORD(v29) == 0;
        else
          v48 = 1;
        if (v48)
          v49 = 1;
        else
          v49 = v28;
        if ((v49 & 1) == 0)
        {
          v32 = v29;
          v50 = HIDWORD(v29) - 1;
          v51 = v30 - 1;
          v66 = v10;
          if (v30 != 1)
          {
            v52 = v12;
            if ((_DWORD)v47 == 1)
            {
              do
              {
                memset(v24, *a5, v32);
                v24 += v12;
                --v51;
              }
              while (v51);
            }
            else
            {
              v53 = 0;
              do
              {
                v54 = HIDWORD(v29) - 1;
                v55 = v24;
                do
                {
                  memset(v55, *a5, v32);
                  v55 += v31;
                  --v54;
                }
                while (v54);
                memset(v55, *a5, v32);
                v24 += v52;
                ++v53;
              }
              while (v53 != v51);
            }
          }
          if (HIDWORD(v29) == 1)
          {
            v10 = v66;
          }
          else
          {
            v10 = v66;
            do
            {
              memset(v24, *a5, v32);
              v24 += v31;
              --v50;
            }
            while (v50);
          }
          goto LABEL_93;
        }
      }
    }
    else
    {
      if (HIDWORD(v29))
        v33 = (_DWORD)v29 == 0;
      else
        v33 = 1;
      if (v33)
        v34 = 1;
      else
        v34 = v28;
      if ((v34 & 1) == 0 && (_DWORD)v29)
      {
        v35 = v29 - 1;
        v36 = HIDWORD(v29) - 1;
        v37 = HIDWORD(v11);
        v38 = v30 - 1;
        if (v30 != 1)
        {
          if (HIDWORD(v29) == 1)
          {
            if ((_DWORD)v29 == 1)
            {
              do
              {
                *v24 = *a5;
                v24 += v12;
                --v38;
              }
              while (v38);
            }
            else
            {
              v59 = 0;
              do
              {
                v60 = v29 - 1;
                v61 = v24;
                do
                {
                  *v61 = *a5;
                  v61 += v11;
                  --v60;
                }
                while (v60);
                *v61 = *a5;
                v24 += v12;
                ++v59;
              }
              while (v59 != v38);
            }
          }
          else
          {
            v39 = 0;
            if ((_DWORD)v29 == 1)
            {
              do
              {
                v45 = HIDWORD(v29) - 1;
                v46 = v24;
                do
                {
                  *v46 = *a5;
                  v46 += v37;
                  --v45;
                }
                while (v45);
                *v46 = *a5;
                v24 += v12;
                ++v39;
              }
              while (v39 != v38);
            }
            else
            {
              do
              {
                v40 = 0;
                v41 = v24;
                do
                {
                  v42 = v29 - 1;
                  v43 = v41;
                  do
                  {
                    *v43 = *a5;
                    v43 += v11;
                    --v42;
                  }
                  while (v42);
                  *v43 = *a5;
                  v41 += v37;
                  ++v40;
                }
                while (v40 != v36);
                v44 = v29 - 1;
                do
                {
                  *v41 = *a5;
                  v41 += v11;
                  --v44;
                }
                while (v44);
                *v41 = *a5;
                v24 += v12;
                ++v39;
              }
              while (v39 != v38);
            }
          }
        }
        if (HIDWORD(v29) != 1)
        {
          if ((_DWORD)v29 == 1)
          {
            do
            {
              *v24 = *a5;
              v24 += v37;
              --v36;
            }
            while (v36);
          }
          else
          {
            v62 = 0;
            do
            {
              v63 = v29 - 1;
              v64 = v24;
              do
              {
                *v64 = *a5;
                v64 += v11;
                --v63;
              }
              while (v63);
              *v64 = *a5;
              v24 += v37;
              ++v62;
            }
            while (v62 != v36);
          }
        }
        if ((_DWORD)v29 != 1)
        {
          do
          {
            *v24 = *a5;
            v24 += v11;
            --v35;
          }
          while (v35);
        }
        *v24 = *a5;
      }
    }
  }
  return v10;
}

void sub_2109D62AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
    free(v3);
  *(_QWORD *)(v1 + 8) = 0;
  _Unwind_Resume(exception_object);
}

uint64_t sub_2109D62CC(uint64_t a1, unsigned int *a2, uint64_t *a3, char a4, const __int16 *a5, char a6, uint64_t a7)
{
  unint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  int v24;
  __int16 *v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  BOOL v29;
  char v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int16 *v37;
  uint64_t v38;
  unint64_t v39;
  BOOL v40;
  char v41;
  int v42;
  int v43;
  unint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int16 *v50;
  int v51;
  __int16 *v52;
  __int16 *v53;
  __int16 *v54;
  __int16 *v55;
  int v56;
  int v57;
  int v58;
  uint64_t v59;
  __int16 *v60;
  int v61;
  BOOL v62;
  char v63;
  int v64;
  uint64_t v65;
  BOOL v66;
  char v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  __int16 *v71;
  unint64_t v72;
  __int16 *v73;
  uint64_t v74;
  uint64_t v75;
  int16x8_t v76;
  int16x8_t *v77;
  unint64_t v78;
  int v79;
  __int16 *v80;
  int v81;
  uint64_t v82;
  __int16 *v83;
  int v84;
  unint64_t v85;
  __int16 *v86;
  unint64_t v87;
  int16x8_t v89;
  int16x8_t *v90;
  uint64_t v91;
  int16x8_t v92;
  int16x8_t *v93;
  unint64_t v94;
  uint64_t v95;
  char v96;
  _QWORD v97[3];
  void *memptr;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  _QWORD v104[2];

  if (a4)
  {
    v11 = *a3;
    v12 = *((_DWORD *)a3 + 2);
    v13 = a2[2];
  }
  else
  {
    v14 = *a2;
    v15 = a2[1];
    if (v15)
      v16 = v14;
    else
      v16 = 0;
    v17 = v15 * v14;
    v13 = a2[2];
    if (v13)
      v12 = v17;
    else
      v12 = 0;
    v11 = (*a2 != 0) | (unint64_t)(v16 << 32);
  }
  v18 = v12 * v13;
  v19 = 2 * v18;
  v20 = (a7 - 1) | ((unint64_t)(a7 - 1) >> 1) | (((a7 - 1) | ((unint64_t)(a7 - 1) >> 1)) >> 2);
  v21 = v20 | (v20 >> 4) | ((v20 | (v20 >> 4)) >> 8);
  v22 = v21 | (v21 >> 16) | ((v21 | (v21 >> 16)) >> 32);
  if (v22 + 1 > 8)
    v23 = v22 + 1;
  else
    v23 = 8;
  *(_QWORD *)a1 = v19;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v23;
  if (v18)
  {
    memptr = 0;
    v24 = malloc_type_posix_memalign(&memptr, v23, 2 * v18, 0x1F88E90uLL);
    if (v24)
      sub_2109E756C(v24, *(_QWORD *)(a1 + 16), v19);
    v25 = (__int16 *)memptr;
    *(_QWORD *)(a1 + 8) = memptr;
  }
  else
  {
    v25 = 0;
  }
  v26 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 32) = a2[2];
  *(_QWORD *)(a1 + 24) = v26;
  *(_QWORD *)(a1 + 36) = (2 * v11) & 0xFFFFFFFEFFFFFFFELL;
  *(_DWORD *)(a1 + 44) = 2 * v12;
  if (!v25 || !a6)
    return a1;
  v27 = v12 & 0x7FFFFFFF;
  if (*(_DWORD *)(a1 + 24))
    v28 = *(_DWORD *)(a1 + 28) == 0;
  else
    v28 = 1;
  v29 = v28 || *(_DWORD *)(a1 + 32) == 0;
  v30 = v29;
  if (v29)
    v31 = 0;
  else
    v31 = *(_QWORD *)(a1 + 24);
  if (v29)
    v32 = 0;
  else
    v32 = *(_DWORD *)(a1 + 32);
  v33 = (v32 * v27);
  if ((_DWORD)v33 == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_142;
  }
  v34 = v11 & 0x7FFFFFFF7FFFFFFFLL;
  v35 = v11 & 0x7FFFFFFF;
  if (v35 != 1)
  {
    if ((_DWORD)v31)
      v40 = HIDWORD(v31) == 0;
    else
      v40 = 1;
    if (v40)
      v41 = 1;
    else
      v41 = v30;
    if ((v41 & 1) != 0)
      return a1;
    v42 = v31 - 1;
    v43 = HIDWORD(v31) - 1;
    v44 = HIDWORD(v34);
    v45 = v32 - 1;
    if (v32 != 1)
    {
      if (HIDWORD(v31) == 1)
      {
        if ((_DWORD)v31 != 1)
        {
          v79 = 0;
          do
          {
            v80 = v25;
            v81 = v31 - 1;
            do
            {
              *v80 = *a5;
              v80 += v35;
              --v81;
            }
            while (v81);
            *v80 = *a5;
            v25 += v27;
            ++v79;
          }
          while (v79 != v45);
LABEL_110:
          if ((_DWORD)v31 != 1)
          {
            v82 = 2 * v35;
            do
            {
              *v25 = *a5;
              v25 = (__int16 *)((char *)v25 + v82);
              --v42;
            }
            while (v42);
          }
          goto LABEL_131;
        }
        do
        {
          *v25 = *a5;
          v25 += v27;
          --v45;
        }
        while (v45);
LABEL_131:
        *v25 = *a5;
        return a1;
      }
      if ((_DWORD)v31 == 1)
      {
        do
        {
          v83 = v25;
          v84 = HIDWORD(v31) - 1;
          do
          {
            *v83 = *a5;
            v83 += v44;
            --v84;
          }
          while (v84);
          *v83 = *a5;
          v25 += v27;
          ++v42;
        }
        while (v42 != v45);
        do
        {
LABEL_117:
          *v25 = *a5;
          v25 += v44;
          --v43;
        }
        while (v43);
        goto LABEL_131;
      }
      v46 = 0;
      v47 = 2 * v27;
      v48 = v44;
      v49 = 2 * v35;
      v50 = &v25[v44];
      do
      {
        v51 = 0;
        v52 = v50;
        v53 = v25;
        do
        {
          v54 = v52;
          v55 = v53;
          v56 = v31 - 1;
          do
          {
            *v55 = *a5;
            v55 = (__int16 *)((char *)v55 + v49);
            --v56;
          }
          while (v56);
          *v55 = *a5;
          v53 = (__int16 *)((char *)v53 + v48 * 2);
          ++v51;
          v52 = &v54[v48];
        }
        while (v51 != v43);
        v57 = v31 - 1;
        do
        {
          *v54 = *a5;
          v54 = (__int16 *)((char *)v54 + v49);
          --v57;
        }
        while (v57);
        *v54 = *a5;
        v25 = (__int16 *)((char *)v25 + v47);
        ++v46;
        v50 = (__int16 *)((char *)v50 + v47);
      }
      while (v46 != v45);
    }
    if (HIDWORD(v31) == 1)
      goto LABEL_110;
    if ((_DWORD)v31 != 1)
    {
      v58 = 0;
      v59 = 2 * v44;
      do
      {
        v60 = v25;
        v61 = v31 - 1;
        do
        {
          *v60 = *a5;
          v60 += v35;
          --v61;
        }
        while (v61);
        *v60 = *a5;
        v25 = (__int16 *)((char *)v25 + v59);
        ++v58;
      }
      while (v58 != v43);
      goto LABEL_110;
    }
    goto LABEL_117;
  }
  if (HIDWORD(v34) != (_DWORD)v31)
  {
    v96 = 0;
    v95 = v31;
    v97[0] = &v96;
    v97[1] = &v95;
    v97[2] = a5;
    if ((_DWORD)v31)
      v62 = HIDWORD(v31) == 0;
    else
      v62 = 1;
    if (v62)
      v63 = 1;
    else
      v63 = v30;
    if ((v63 & 1) == 0)
    {
      LODWORD(memptr) = 0;
      HIDWORD(memptr) = v31 - 1;
      v99 = 1;
      v100 = HIDWORD(v31) - 1;
      v104[0] = 0;
      v104[1] = 0;
      v64 = v32 - 1;
      v101 = (v11 & 0x7FFFFFFF7FFFFFFFLL) >> 32;
      v102 = v32 - 1;
      v103 = v27;
      if (v32 != 1)
      {
        v65 = 2 * v27;
        do
        {
          sub_2109D69B8((uint64_t)&memptr, (uint64_t)v104, (uint64_t)v97, (unint64_t)v25);
          v25 = (__int16 *)((char *)v25 + v65);
          --v64;
        }
        while (v64);
      }
      sub_2109D69B8((uint64_t)&memptr, (uint64_t)v104, (uint64_t)v97, (unint64_t)v25);
    }
    return a1;
  }
  v36 = (HIDWORD(v31) * v31);
  if ((_DWORD)v27 != (_DWORD)v36)
  {
    if ((_DWORD)v31)
      v66 = HIDWORD(v31) == 0;
    else
      v66 = 1;
    if (v66)
      v67 = 1;
    else
      v67 = v30;
    if ((v67 & 1) != 0)
      return a1;
    v68 = v32 - 1;
    if (v32 == 1)
    {
      if (!(_DWORD)v36)
        return a1;
    }
    else
    {
      if (!(_DWORD)v36)
        return a1;
      v69 = 0;
      v70 = 2 * v27;
      v71 = v25;
      do
      {
        v72 = (unint64_t)v71;
        if (!v71
          && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
        {
          goto LABEL_142;
        }
        v73 = (__int16 *)v72;
        v74 = v36;
        if (v36 < 0x10)
          goto LABEL_102;
        if (v72 < (unint64_t)(a5 + 1))
        {
          v73 = (__int16 *)v72;
          v74 = v36;
          if ((__int16 *)((char *)&v25[v36] + v70 * v69) > a5)
            goto LABEL_102;
        }
        v75 = 0;
        v73 = (__int16 *)(v72 + 2 * (v36 & 0xFFFFFFF0));
        v76 = vld1q_dup_s16(a5);
        do
        {
          v77 = (int16x8_t *)(v72 + v75);
          *v77 = v76;
          v77[1] = v76;
          v75 += 32;
        }
        while (((2 * v36) & 0x1FFFFFFE0) != v75);
        v74 = v36 & 0xF;
        if ((v36 & 0xFFFFFFF0) != v36)
        {
LABEL_102:
          v78 = v74 + 1;
          do
          {
            *v73++ = *a5;
            --v78;
          }
          while (v78 > 1);
        }
        v71 = (__int16 *)(v72 + v70);
        ++v69;
      }
      while ((_DWORD)v69 != v68);
      v25 = (__int16 *)(v72 + v70);
      if (!v72)
      {
        if (!sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
        {
          v25 = 0;
          goto LABEL_123;
        }
LABEL_142:
        abort();
      }
    }
LABEL_123:
    v85 = v36 - ((_DWORD)v36 != 0) + 1;
    if (v85 >= 0x10 && (v25 >= a5 + 1 || &v25[v36] <= a5))
    {
      v86 = &v25[v85 & 0xFFFFFFFFFFFFFFF0];
      v36 -= v85 & 0xFFFFFFFFFFFFFFF0;
      v92 = vld1q_dup_s16(a5);
      v93 = (int16x8_t *)(v25 + 8);
      v94 = v85 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v93[-1] = v92;
        *v93 = v92;
        v93 += 2;
        v94 -= 16;
      }
      while (v94);
      if (v85 == (v85 & 0xFFFFFFFFFFFFFFF0))
        return a1;
    }
    else
    {
      v86 = v25;
    }
    v87 = v36 + 1;
    do
    {
      *v86++ = *a5;
      --v87;
    }
    while (v87 > 1);
    return a1;
  }
  if (!(_DWORD)v33)
    return a1;
  if (v33 < 0x10 || v25 < a5 + 1 && &v25[v33] > a5)
  {
    v37 = v25;
    v38 = (v32 * v27);
LABEL_44:
    v39 = v38 + 1;
    do
    {
      *v37++ = *a5;
      --v39;
    }
    while (v39 > 1);
    return a1;
  }
  v37 = &v25[v33 & 0xFFFFFFF0];
  v38 = ((_BYTE)v32 * (_BYTE)v27) & 0xF;
  v89 = vld1q_dup_s16(a5);
  v90 = (int16x8_t *)(v25 + 8);
  v91 = v33 & 0xFFFFFFF0;
  do
  {
    v90[-1] = v89;
    *v90 = v89;
    v90 += 2;
    v91 -= 16;
  }
  while (v91);
  if ((v33 & 0xFFFFFFF0) != v33)
    goto LABEL_44;
  return a1;
}

void sub_2109D6994(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
    free(v3);
  *(_QWORD *)(v1 + 8) = 0;
  _Unwind_Resume(exception_object);
}

uint64_t sub_2109D69B8(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  int v7;
  uint64_t v8;
  unsigned int i;
  const __int16 *v10;
  uint64_t v11;
  __int16 *v12;
  BOOL v13;
  int16x8_t v14;
  int16x8_t *v15;
  unint64_t v16;
  BOOL v17;
  unint64_t v18;
  uint64_t *v19;
  const __int16 *v20;
  uint64_t v21;
  BOOL v22;
  __int16 *v23;
  uint64_t v24;
  int16x8_t v25;
  int16x8_t *v26;
  unint64_t v27;
  unint64_t v28;

  v4 = a4;
  v7 = *(_DWORD *)(result + 8);
  *(_QWORD *)a2 = a4;
  *(_DWORD *)(a2 + 8) = v7;
  if (*(_DWORD *)(result + 12))
  {
    v8 = result;
    for (i = 0; i < *(_DWORD *)(v8 + 12); ++i)
    {
      *(_QWORD *)a2 = v4;
      v10 = *(const __int16 **)(a3 + 16);
      v11 = **(_QWORD **)(a3 + 8);
      if (!v4)
      {
        if (v11)
        {
          result = sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4);
          if ((_DWORD)result)
            goto LABEL_39;
        }
      }
      if (v11 >= 1)
      {
        if ((unint64_t)v11 >= 0x10)
        {
          v13 = v4 >= (unint64_t)(v10 + 1) || (unint64_t)v10 >= v4 + 2 * v11;
          v12 = (__int16 *)v4;
          if (v13)
          {
            v12 = (__int16 *)(v4 + 2 * (v11 & 0xFFFFFFFFFFFFFFF0));
            v14 = vld1q_dup_s16(v10);
            v15 = (int16x8_t *)(v4 + 16);
            v16 = v11 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v15[-1] = v14;
              *v15 = v14;
              v15 += 2;
              v16 -= 16;
            }
            while (v16);
            v17 = v11 == (v11 & 0x7FFFFFFFFFFFFFF0);
            v11 &= 0xFu;
            if (v17)
              goto LABEL_3;
          }
        }
        else
        {
          v12 = (__int16 *)v4;
        }
        v18 = v11 + 1;
        do
        {
          *v12++ = *v10;
          --v18;
        }
        while (v18 > 1);
      }
LABEL_3:
      v4 += 2 * *(unsigned int *)(v8 + 16);
    }
  }
  *(_QWORD *)a2 = v4;
  v19 = *(uint64_t **)(a3 + 8);
  v20 = *(const __int16 **)(a3 + 16);
  v21 = *v19;
  if (!v4)
  {
    if (v21)
    {
      result = sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4);
      if ((_DWORD)result)
LABEL_39:
        abort();
    }
  }
  if (v21 >= 1)
  {
    if ((unint64_t)v21 < 0x10
      || (v4 < (unint64_t)(v20 + 1) ? (v22 = (unint64_t)v20 >= v4 + 2 * v21) : (v22 = 1), !v22))
    {
      v23 = (__int16 *)v4;
      v24 = v21;
LABEL_36:
      v28 = v24 + 1;
      do
      {
        *v23++ = *v20;
        --v28;
      }
      while (v28 > 1);
      return result;
    }
    v23 = (__int16 *)(v4 + 2 * (v21 & 0xFFFFFFFFFFFFFFF0));
    v24 = v21 & 0xF;
    v25 = vld1q_dup_s16(v20);
    v26 = (int16x8_t *)(v4 + 16);
    v27 = v21 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v26[-1] = v25;
      *v26 = v25;
      v26 += 2;
      v27 -= 16;
    }
    while (v27);
    if (v21 != (v21 & 0x7FFFFFFFFFFFFFF0))
      goto LABEL_36;
  }
  return result;
}

uint64_t sub_2109D6BC8(uint64_t a1, unsigned int *a2, uint64_t *a3, char a4, _WORD *a5, char a6, uint64_t a7)
{
  unint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  int v24;
  _WORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  BOOL v29;
  BOOL v30;
  char v31;
  unint64_t v32;
  int v33;
  int v34;
  BOOL v35;
  char v36;
  int v37;
  int v38;
  unint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _WORD *v46;
  int v47;
  _WORD *v48;
  _WORD *v49;
  _WORD *v50;
  _WORD *v51;
  int v52;
  int v53;
  int v54;
  _WORD *v55;
  BOOL v56;
  char v57;
  int v58;
  int v59;
  unint64_t v60;
  int v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _WORD *v67;
  int v68;
  _WORD *v69;
  _WORD *v70;
  _WORD *v71;
  _WORD *v72;
  int v73;
  int v74;
  int v75;
  _WORD *v76;
  int v77;
  uint64_t v78;
  _WORD *v79;
  int v80;
  int v81;
  uint64_t v82;
  _WORD *v83;
  int v84;
  int v85;
  uint64_t v86;
  _WORD *v87;
  int v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  _WORD *v92;
  int v93;
  uint64_t v94;
  void *memptr;

  if (a4)
  {
    v11 = *a3;
    v12 = *((_DWORD *)a3 + 2);
    v13 = a2[2];
  }
  else
  {
    v14 = *a2;
    v15 = a2[1];
    if (v15)
      v16 = v14;
    else
      v16 = 0;
    v17 = v15 * v14;
    v13 = a2[2];
    if (v13)
      v12 = v17;
    else
      v12 = 0;
    v11 = (*a2 != 0) | (unint64_t)(v16 << 32);
  }
  v18 = v12 * v13;
  v19 = 2 * v18;
  v20 = (a7 - 1) | ((unint64_t)(a7 - 1) >> 1) | (((a7 - 1) | ((unint64_t)(a7 - 1) >> 1)) >> 2);
  v21 = v20 | (v20 >> 4) | ((v20 | (v20 >> 4)) >> 8);
  v22 = v21 | (v21 >> 16) | ((v21 | (v21 >> 16)) >> 32);
  if (v22 + 1 > 8)
    v23 = v22 + 1;
  else
    v23 = 8;
  *(_QWORD *)a1 = v19;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v23;
  if (v18)
  {
    memptr = 0;
    v24 = malloc_type_posix_memalign(&memptr, v23, 2 * v18, 0x1F88E90uLL);
    if (v24)
      sub_2109E756C(v24, *(_QWORD *)(a1 + 16), v19);
    v25 = memptr;
    *(_QWORD *)(a1 + 8) = memptr;
  }
  else
  {
    v25 = 0;
  }
  v26 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 32) = a2[2];
  *(_QWORD *)(a1 + 24) = v26;
  *(_QWORD *)(a1 + 36) = (2 * v11) & 0xFFFFFFFEFFFFFFFELL;
  *(_DWORD *)(a1 + 44) = 2 * v12;
  if (v25)
  {
    v27 = v12 & 0x7FFFFFFF;
    v28 = v11 & 0x7FFFFFFF7FFFFFFFLL;
    if (*(_DWORD *)(a1 + 24))
      v29 = *(_DWORD *)(a1 + 28) == 0;
    else
      v29 = 1;
    v30 = v29 || *(_DWORD *)(a1 + 32) == 0;
    v31 = v30;
    if (v30)
      v32 = 0;
    else
      v32 = *(_QWORD *)(a1 + 24);
    if (v30)
      v33 = 0;
    else
      v33 = *(_DWORD *)(a1 + 32);
    v34 = v33 * v27;
    if (a6)
    {
      if (v34 == -1
        && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
      {
        abort();
      }
      if (HIDWORD(v32))
        v35 = (_DWORD)v32 == 0;
      else
        v35 = 1;
      if (v35)
        v36 = 1;
      else
        v36 = v31;
      if ((v36 & 1) == 0 && (_DWORD)v32)
      {
        v37 = v32 - 1;
        v38 = HIDWORD(v32) - 1;
        v39 = HIDWORD(v28);
        v40 = v33 - 1;
        if (v33 != 1)
        {
          v41 = v11 & 0x7FFFFFFF;
          if (HIDWORD(v32) == 1)
          {
            if ((_DWORD)v32 == 1)
            {
              do
              {
                *v25 = *a5;
                v25 += v27;
                --v40;
              }
              while (v40);
            }
            else
            {
              v77 = 0;
              v78 = 2 * v41;
              do
              {
                v79 = v25;
                v80 = v32 - 1;
                do
                {
                  *v79 = *a5;
                  v79 = (_WORD *)((char *)v79 + v78);
                  --v80;
                }
                while (v80);
                *v79 = *a5;
                v25 += v27;
                ++v77;
              }
              while (v77 != v40);
            }
          }
          else
          {
            v42 = 0;
            v43 = 2 * v27;
            v44 = v39;
            if ((_DWORD)v32 == 1)
            {
              do
              {
                v54 = HIDWORD(v32) - 1;
                v55 = v25;
                do
                {
                  *v55 = *a5;
                  v55 = (_WORD *)((char *)v55 + v44 * 2);
                  --v54;
                }
                while (v54);
                *v55 = *a5;
                v25 = (_WORD *)((char *)v25 + v43);
                ++v42;
              }
              while (v42 != v40);
            }
            else
            {
              v45 = 2 * v41;
              v46 = &v25[v44];
              do
              {
                v47 = 0;
                v48 = v46;
                v49 = v25;
                do
                {
                  v50 = v48;
                  v51 = v49;
                  v52 = v32 - 1;
                  do
                  {
                    *v51 = *a5;
                    v51 = (_WORD *)((char *)v51 + v45);
                    --v52;
                  }
                  while (v52);
                  *v51 = *a5;
                  v49 = (_WORD *)((char *)v49 + v44 * 2);
                  ++v47;
                  v48 = &v50[v44];
                }
                while (v47 != v38);
                v53 = v32 - 1;
                do
                {
                  *v50 = *a5;
                  v50 = (_WORD *)((char *)v50 + v45);
                  --v53;
                }
                while (v53);
                *v50 = *a5;
                v25 = (_WORD *)((char *)v25 + v43);
                ++v42;
                v46 = (_WORD *)((char *)v46 + v43);
              }
              while (v42 != v40);
            }
          }
        }
        if (HIDWORD(v32) != 1)
        {
          if ((_DWORD)v32 == 1)
          {
            v89 = 2 * v39;
            do
            {
              *v25 = *a5;
              v25 = (_WORD *)((char *)v25 + v89);
              --v38;
            }
            while (v38);
          }
          else
          {
            v85 = 0;
            v86 = 2 * v39;
            do
            {
              v87 = v25;
              v88 = v32 - 1;
              do
              {
                *v87 = *a5;
                v87 += v11 & 0x7FFFFFFF;
                --v88;
              }
              while (v88);
              *v87 = *a5;
              v25 = (_WORD *)((char *)v25 + v86);
              ++v85;
            }
            while (v85 != v38);
          }
        }
        if ((_DWORD)v32 != 1)
        {
          do
          {
            *v25 = *a5;
            v25 += v11 & 0x7FFFFFFF;
            --v37;
          }
          while (v37);
        }
        *v25 = *a5;
      }
    }
    else
    {
      if (v34 == -1
        && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
      {
        abort();
      }
      if (HIDWORD(v32))
        v56 = (_DWORD)v32 == 0;
      else
        v56 = 1;
      if (v56)
        v57 = 1;
      else
        v57 = v31;
      if ((v57 & 1) == 0 && (_DWORD)v32)
      {
        v58 = v32 - 1;
        v59 = HIDWORD(v32) - 1;
        v60 = HIDWORD(v28);
        v61 = v33 - 1;
        if (v33 != 1)
        {
          v62 = v11 & 0x7FFFFFFF;
          if (HIDWORD(v32) == 1)
          {
            if ((_DWORD)v32 == 1)
            {
              do
              {
                *v25 = 0;
                v25 += v27;
                --v61;
              }
              while (v61);
            }
            else
            {
              v81 = 0;
              v82 = 2 * v62;
              do
              {
                v83 = v25;
                v84 = v32 - 1;
                do
                {
                  *v83 = 0;
                  v83 = (_WORD *)((char *)v83 + v82);
                  --v84;
                }
                while (v84);
                *v83 = 0;
                v25 += v27;
                ++v81;
              }
              while (v81 != v61);
            }
          }
          else
          {
            v63 = 0;
            v64 = 2 * v27;
            v65 = v60;
            if ((_DWORD)v32 == 1)
            {
              do
              {
                v75 = HIDWORD(v32) - 1;
                v76 = v25;
                do
                {
                  *v76 = 0;
                  v76 = (_WORD *)((char *)v76 + v65 * 2);
                  --v75;
                }
                while (v75);
                *v76 = 0;
                v25 = (_WORD *)((char *)v25 + v64);
                ++v63;
              }
              while (v63 != v61);
            }
            else
            {
              v66 = 2 * v62;
              v67 = &v25[v65];
              do
              {
                v68 = 0;
                v69 = v67;
                v70 = v25;
                do
                {
                  v71 = v69;
                  v72 = v70;
                  v73 = v32 - 1;
                  do
                  {
                    *v72 = 0;
                    v72 = (_WORD *)((char *)v72 + v66);
                    --v73;
                  }
                  while (v73);
                  *v72 = 0;
                  v70 = (_WORD *)((char *)v70 + v65 * 2);
                  ++v68;
                  v69 = &v71[v65];
                }
                while (v68 != v59);
                v74 = v32 - 1;
                do
                {
                  *v71 = 0;
                  v71 = (_WORD *)((char *)v71 + v66);
                  --v74;
                }
                while (v74);
                *v71 = 0;
                v25 = (_WORD *)((char *)v25 + v64);
                ++v63;
                v67 = (_WORD *)((char *)v67 + v64);
              }
              while (v63 != v61);
            }
          }
        }
        if (HIDWORD(v32) != 1)
        {
          if ((_DWORD)v32 == 1)
          {
            v94 = 2 * v60;
            do
            {
              *v25 = 0;
              v25 = (_WORD *)((char *)v25 + v94);
              --v59;
            }
            while (v59);
          }
          else
          {
            v90 = 0;
            v91 = 2 * v60;
            do
            {
              v92 = v25;
              v93 = v32 - 1;
              do
              {
                *v92 = 0;
                v92 += v11 & 0x7FFFFFFF;
                --v93;
              }
              while (v93);
              *v92 = 0;
              v25 = (_WORD *)((char *)v25 + v91);
              ++v90;
            }
            while (v90 != v59);
          }
        }
        if ((_DWORD)v32 != 1)
        {
          do
          {
            *v25 = 0;
            v25 += v11 & 0x7FFFFFFF;
            --v58;
          }
          while (v58);
        }
        *v25 = 0;
      }
    }
  }
  return a1;
}

void sub_2109D716C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2109CF97C(v1);
  _Unwind_Resume(a1);
}

void sub_2109D7180(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2109CF97C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2109D7194(uint64_t a1, unsigned int *a2, uint64_t *a3, char a4, const float *a5, char a6, uint64_t a7)
{
  unint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  int v24;
  float32x4_t *v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  BOOL v29;
  char v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float32x4_t *v37;
  uint64_t v38;
  unint64_t v39;
  BOOL v40;
  char v41;
  int v42;
  int v43;
  unint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int32 *v50;
  int v51;
  __int32 *v52;
  float32x4_t *v53;
  __int32 *v54;
  float32x4_t *v55;
  int v56;
  int v57;
  int v58;
  uint64_t v59;
  float32x4_t *v60;
  int v61;
  BOOL v62;
  char v63;
  int v64;
  uint64_t v65;
  BOOL v66;
  char v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  float32x4_t *v71;
  unint64_t v72;
  _DWORD *v73;
  uint64_t v74;
  uint64_t v75;
  float32x4_t v76;
  float32x4_t *v77;
  unint64_t v78;
  int v79;
  float32x4_t *v80;
  int v81;
  uint64_t v82;
  float32x4_t *v83;
  int v84;
  unint64_t v85;
  float32x4_t *v86;
  unint64_t v87;
  float32x4_t v89;
  float32x4_t *v90;
  uint64_t v91;
  float32x4_t v92;
  float32x4_t *v93;
  unint64_t v94;
  uint64_t v95;
  char v96;
  _QWORD v97[3];
  void *memptr;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  _QWORD v104[2];

  if (a4)
  {
    v11 = *a3;
    v12 = *((_DWORD *)a3 + 2);
    v13 = a2[2];
  }
  else
  {
    v14 = *a2;
    v15 = a2[1];
    if (v15)
      v16 = v14;
    else
      v16 = 0;
    v17 = v15 * v14;
    v13 = a2[2];
    if (v13)
      v12 = v17;
    else
      v12 = 0;
    v11 = (*a2 != 0) | (unint64_t)(v16 << 32);
  }
  v18 = v12 * v13;
  v19 = 4 * v18;
  v20 = (a7 - 1) | ((unint64_t)(a7 - 1) >> 1) | (((a7 - 1) | ((unint64_t)(a7 - 1) >> 1)) >> 2);
  v21 = v20 | (v20 >> 4) | ((v20 | (v20 >> 4)) >> 8);
  v22 = v21 | (v21 >> 16) | ((v21 | (v21 >> 16)) >> 32);
  if (v22 + 1 > 8)
    v23 = v22 + 1;
  else
    v23 = 8;
  *(_QWORD *)a1 = v19;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v23;
  if (v18)
  {
    memptr = 0;
    v24 = malloc_type_posix_memalign(&memptr, v23, 4 * v18, 0x1F88E90uLL);
    if (v24)
      sub_2109E756C(v24, *(_QWORD *)(a1 + 16), v19);
    v25 = (float32x4_t *)memptr;
    *(_QWORD *)(a1 + 8) = memptr;
  }
  else
  {
    v25 = 0;
  }
  v26 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 32) = a2[2];
  *(_QWORD *)(a1 + 24) = v26;
  *(_QWORD *)(a1 + 36) = (4 * v11) & 0xFFFFFFFCFFFFFFFCLL;
  *(_DWORD *)(a1 + 44) = 4 * v12;
  if (!v25 || !a6)
    return a1;
  v27 = v12 & 0x3FFFFFFF;
  if (*(_DWORD *)(a1 + 24))
    v28 = *(_DWORD *)(a1 + 28) == 0;
  else
    v28 = 1;
  v29 = v28 || *(_DWORD *)(a1 + 32) == 0;
  v30 = v29;
  if (v29)
    v31 = 0;
  else
    v31 = *(_QWORD *)(a1 + 24);
  if (v29)
    v32 = 0;
  else
    v32 = *(_DWORD *)(a1 + 32);
  v33 = (v32 * v27);
  if ((_DWORD)v33 == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_142;
  }
  v34 = v11 & 0x3FFFFFFF3FFFFFFFLL;
  v35 = v11 & 0x3FFFFFFF;
  if (v35 != 1)
  {
    if ((_DWORD)v31)
      v40 = HIDWORD(v31) == 0;
    else
      v40 = 1;
    if (v40)
      v41 = 1;
    else
      v41 = v30;
    if ((v41 & 1) != 0)
      return a1;
    v42 = v31 - 1;
    v43 = HIDWORD(v31) - 1;
    v44 = HIDWORD(v34);
    v45 = v32 - 1;
    if (v32 != 1)
    {
      if (HIDWORD(v31) == 1)
      {
        if ((_DWORD)v31 != 1)
        {
          v79 = 0;
          do
          {
            v80 = v25;
            v81 = v31 - 1;
            do
            {
              v80->f32[0] = *a5;
              v80 = (float32x4_t *)((char *)v80 + 4 * v35);
              --v81;
            }
            while (v81);
            v80->f32[0] = *a5;
            v25 = (float32x4_t *)((char *)v25 + 4 * v27);
            ++v79;
          }
          while (v79 != v45);
LABEL_110:
          if ((_DWORD)v31 != 1)
          {
            v82 = 4 * v35;
            do
            {
              v25->f32[0] = *a5;
              v25 = (float32x4_t *)((char *)v25 + v82);
              --v42;
            }
            while (v42);
          }
          goto LABEL_131;
        }
        do
        {
          v25->f32[0] = *a5;
          v25 = (float32x4_t *)((char *)v25 + 4 * v27);
          --v45;
        }
        while (v45);
LABEL_131:
        v25->f32[0] = *a5;
        return a1;
      }
      if ((_DWORD)v31 == 1)
      {
        do
        {
          v83 = v25;
          v84 = HIDWORD(v31) - 1;
          do
          {
            v83->f32[0] = *a5;
            v83 = (float32x4_t *)((char *)v83 + 4 * v44);
            --v84;
          }
          while (v84);
          v83->f32[0] = *a5;
          v25 = (float32x4_t *)((char *)v25 + 4 * v27);
          ++v42;
        }
        while (v42 != v45);
        do
        {
LABEL_117:
          v25->f32[0] = *a5;
          v25 = (float32x4_t *)((char *)v25 + 4 * v44);
          --v43;
        }
        while (v43);
        goto LABEL_131;
      }
      v46 = 0;
      v47 = 4 * v27;
      v48 = v44;
      v49 = 4 * v35;
      v50 = &v25->i32[v44];
      do
      {
        v51 = 0;
        v52 = v50;
        v53 = v25;
        do
        {
          v54 = v52;
          v55 = v53;
          v56 = v31 - 1;
          do
          {
            v55->f32[0] = *a5;
            v55 = (float32x4_t *)((char *)v55 + v49);
            --v56;
          }
          while (v56);
          v55->f32[0] = *a5;
          v53 = (float32x4_t *)((char *)v53 + v48 * 4);
          ++v51;
          v52 = &v54[v48];
        }
        while (v51 != v43);
        v57 = v31 - 1;
        do
        {
          *v54 = *(_DWORD *)a5;
          v54 = (__int32 *)((char *)v54 + v49);
          --v57;
        }
        while (v57);
        *v54 = *(_DWORD *)a5;
        v25 = (float32x4_t *)((char *)v25 + v47);
        ++v46;
        v50 = (__int32 *)((char *)v50 + v47);
      }
      while (v46 != v45);
    }
    if (HIDWORD(v31) == 1)
      goto LABEL_110;
    if ((_DWORD)v31 != 1)
    {
      v58 = 0;
      v59 = 4 * v44;
      do
      {
        v60 = v25;
        v61 = v31 - 1;
        do
        {
          v60->f32[0] = *a5;
          v60 = (float32x4_t *)((char *)v60 + 4 * v35);
          --v61;
        }
        while (v61);
        v60->f32[0] = *a5;
        v25 = (float32x4_t *)((char *)v25 + v59);
        ++v58;
      }
      while (v58 != v43);
      goto LABEL_110;
    }
    goto LABEL_117;
  }
  if (HIDWORD(v34) != (_DWORD)v31)
  {
    v96 = 0;
    v95 = v31;
    v97[0] = &v96;
    v97[1] = &v95;
    v97[2] = a5;
    if ((_DWORD)v31)
      v62 = HIDWORD(v31) == 0;
    else
      v62 = 1;
    if (v62)
      v63 = 1;
    else
      v63 = v30;
    if ((v63 & 1) == 0)
    {
      LODWORD(memptr) = 0;
      HIDWORD(memptr) = v31 - 1;
      v99 = 1;
      v100 = HIDWORD(v31) - 1;
      v104[0] = 0;
      v104[1] = 0;
      v64 = v32 - 1;
      v101 = (v11 & 0x3FFFFFFF3FFFFFFFLL) >> 32;
      v102 = v32 - 1;
      v103 = v27;
      if (v32 != 1)
      {
        v65 = 4 * v27;
        do
        {
          sub_2109D7880((uint64_t)&memptr, (uint64_t)v104, (uint64_t)v97, (unint64_t)v25);
          v25 = (float32x4_t *)((char *)v25 + v65);
          --v64;
        }
        while (v64);
      }
      sub_2109D7880((uint64_t)&memptr, (uint64_t)v104, (uint64_t)v97, (unint64_t)v25);
    }
    return a1;
  }
  v36 = (HIDWORD(v31) * v31);
  if ((_DWORD)v27 != (_DWORD)v36)
  {
    if ((_DWORD)v31)
      v66 = HIDWORD(v31) == 0;
    else
      v66 = 1;
    if (v66)
      v67 = 1;
    else
      v67 = v30;
    if ((v67 & 1) != 0)
      return a1;
    v68 = v32 - 1;
    if (v32 == 1)
    {
      if (!(_DWORD)v36)
        return a1;
    }
    else
    {
      if (!(_DWORD)v36)
        return a1;
      v69 = 0;
      v70 = 4 * v27;
      v71 = v25;
      do
      {
        v72 = (unint64_t)v71;
        if (!v71
          && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
        {
          goto LABEL_142;
        }
        v73 = (_DWORD *)v72;
        v74 = v36;
        if (v36 < 8)
          goto LABEL_102;
        if (v72 < (unint64_t)(a5 + 1))
        {
          v73 = (_DWORD *)v72;
          v74 = v36;
          if ((char *)&v25->f32[v36] + v70 * v69 > (char *)a5)
            goto LABEL_102;
        }
        v75 = 0;
        v73 = (_DWORD *)(v72 + 4 * (v36 & 0xFFFFFFF8));
        v76 = vld1q_dup_f32(a5);
        do
        {
          v77 = (float32x4_t *)(v72 + v75);
          *v77 = v76;
          v77[1] = v76;
          v75 += 32;
        }
        while (((4 * v36) & 0x3FFFFFFE0) != v75);
        v74 = v36 & 7;
        if ((v36 & 0xFFFFFFF8) != v36)
        {
LABEL_102:
          v78 = v74 + 1;
          do
          {
            *v73++ = *(_DWORD *)a5;
            --v78;
          }
          while (v78 > 1);
        }
        v71 = (float32x4_t *)(v72 + v70);
        ++v69;
      }
      while ((_DWORD)v69 != v68);
      v25 = (float32x4_t *)(v72 + v70);
      if (!v72)
      {
        if (!sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
        {
          v25 = 0;
          goto LABEL_123;
        }
LABEL_142:
        abort();
      }
    }
LABEL_123:
    v85 = v36 - ((_DWORD)v36 != 0) + 1;
    if (v85 >= 0x10 && (v25 >= (float32x4_t *)(a5 + 1) || &v25->f32[v36] <= a5))
    {
      v86 = (float32x4_t *)((char *)v25 + 4 * (v85 & 0xFFFFFFFFFFFFFFF8));
      v36 -= v85 & 0xFFFFFFFFFFFFFFF8;
      v92 = vld1q_dup_f32(a5);
      v93 = v25 + 1;
      v94 = v85 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v93[-1] = v92;
        *v93 = v92;
        v93 += 2;
        v94 -= 8;
      }
      while (v94);
      if (v85 == (v85 & 0xFFFFFFFFFFFFFFF8))
        return a1;
    }
    else
    {
      v86 = v25;
    }
    v87 = v36 + 1;
    do
    {
      v86->f32[0] = *a5;
      v86 = (float32x4_t *)((char *)v86 + 4);
      --v87;
    }
    while (v87 > 1);
    return a1;
  }
  if (!(_DWORD)v33)
    return a1;
  if (v33 < 8 || v25 < (float32x4_t *)(a5 + 1) && &v25->f32[v33] > a5)
  {
    v37 = v25;
    v38 = (v32 * v27);
LABEL_44:
    v39 = v38 + 1;
    do
    {
      v37->f32[0] = *a5;
      v37 = (float32x4_t *)((char *)v37 + 4);
      --v39;
    }
    while (v39 > 1);
    return a1;
  }
  v37 = (float32x4_t *)((char *)v25 + 4 * (v33 & 0xFFFFFFF8));
  v38 = ((_BYTE)v32 * (_BYTE)v27) & 7;
  v89 = vld1q_dup_f32(a5);
  v90 = v25 + 1;
  v91 = v33 & 0xFFFFFFF8;
  do
  {
    v90[-1] = v89;
    *v90 = v89;
    v90 += 2;
    v91 -= 8;
  }
  while (v91);
  if ((v33 & 0xFFFFFFF8) != v33)
    goto LABEL_44;
  return a1;
}

void sub_2109D785C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
    free(v3);
  *(_QWORD *)(v1 + 8) = 0;
  _Unwind_Resume(exception_object);
}

uint64_t sub_2109D7880(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  int v7;
  uint64_t v8;
  unsigned int i;
  const float *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  unint64_t v16;
  float32x4_t v17;
  float32x4_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  const float *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  unint64_t v28;
  float32x4_t v29;
  float32x4_t *v30;
  unint64_t v31;

  v4 = a4;
  v7 = *(_DWORD *)(result + 8);
  *(_QWORD *)a2 = a4;
  *(_DWORD *)(a2 + 8) = v7;
  if (*(_DWORD *)(result + 12))
  {
    v8 = result;
    for (i = 0; i < *(_DWORD *)(v8 + 12); ++i)
    {
      *(_QWORD *)a2 = v4;
      v10 = *(const float **)(a3 + 16);
      v11 = **(_QWORD **)(a3 + 8);
      if (!v4)
      {
        if (v11)
        {
          result = sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4);
          if ((_DWORD)result)
            goto LABEL_37;
        }
      }
      if (v11 >= 1)
      {
        v12 = v11 & 0x3FFFFFFFFFFFFFFFLL;
        v13 = (v11 & 0x3FFFFFFFFFFFFFFFLL) - ((v11 & 0x3FFFFFFFFFFFFFFFLL) != 0) + 1;
        if (v13 >= 0x10)
        {
          v15 = -4;
          if (!v12)
            v15 = 0;
          if (v4 >= (unint64_t)(v10 + 1)
            || (v16 = v4 + v15 + 4 * v11 + 4, v14 = (_DWORD *)v4, (unint64_t)v10 >= v16))
          {
            v14 = (_DWORD *)(v4 + 4 * (v13 & 0xFFFFFFFFFFFFFFF8));
            v12 -= v13 & 0xFFFFFFFFFFFFFFF8;
            v17 = vld1q_dup_f32(v10);
            v18 = (float32x4_t *)(v4 + 16);
            v19 = v13 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              v18[-1] = v17;
              *v18 = v17;
              v18 += 2;
              v19 -= 8;
            }
            while (v19);
            if (v13 == (v13 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_3;
          }
        }
        else
        {
          v14 = (_DWORD *)v4;
        }
        v20 = v12 + 1;
        do
        {
          *v14++ = *(_DWORD *)v10;
          --v20;
        }
        while (v20 > 1);
      }
LABEL_3:
      v4 += 4 * *(unsigned int *)(v8 + 16);
    }
  }
  *(_QWORD *)a2 = v4;
  v21 = *(uint64_t **)(a3 + 8);
  v22 = *(const float **)(a3 + 16);
  v23 = *v21;
  if (!v4)
  {
    if (v23)
    {
      result = sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4);
      if ((_DWORD)result)
LABEL_37:
        abort();
    }
  }
  if (v23 >= 1)
  {
    v24 = v23 & 0x3FFFFFFFFFFFFFFFLL;
    v25 = (v23 & 0x3FFFFFFFFFFFFFFFLL) - ((v23 & 0x3FFFFFFFFFFFFFFFLL) != 0) + 1;
    if (v25 < 0x10)
      goto LABEL_29;
    v26 = 4 * v23;
    if (!v24)
      v26 = 4;
    if (v4 < (unint64_t)(v22 + 1) && (unint64_t)v22 < v4 + v26)
    {
LABEL_29:
      v27 = (_DWORD *)v4;
LABEL_30:
      v28 = v24 + 1;
      do
      {
        *v27++ = *(_DWORD *)v22;
        --v28;
      }
      while (v28 > 1);
      return result;
    }
    v27 = (_DWORD *)(v4 + 4 * (v25 & 0xFFFFFFFFFFFFFFF8));
    v24 -= v25 & 0xFFFFFFFFFFFFFFF8;
    v29 = vld1q_dup_f32(v22);
    v30 = (float32x4_t *)(v4 + 16);
    v31 = v25 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v30[-1] = v29;
      *v30 = v29;
      v30 += 2;
      v31 -= 8;
    }
    while (v31);
    if (v25 != (v25 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_30;
  }
  return result;
}

uint64_t sub_2109D7AD4(uint64_t a1, unsigned int *a2)
{
  _BYTE *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _BYTE *v19;
  _BYTE *v20;
  _BYTE *v21;
  _BYTE *v22;
  unsigned int v23;
  char *v24;
  size_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  size_t v29;
  char *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  char *v34;
  int v35;
  char *v36;
  int v37;
  char *v38;
  size_t v39;
  unsigned __int8 v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, const char *, uint64_t, void *, _QWORD);
  unsigned __int8 v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  char *v52;
  unsigned int v53;
  char *v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  _QWORD v60[3];
  __int128 v61;
  uint64_t v62;

  v3 = *(_BYTE **)(a1 + 64);
  if (!v3 || *(_QWORD *)(a2 + 1) != *(_QWORD *)(a1 + 4) || *((_QWORD *)a2 + 2) != *(_QWORD *)(a1 + 16))
  {
    v56 = *(_OWORD *)a2;
    v57 = *((_OWORD *)a2 + 1);
    v58 = *((_OWORD *)a2 + 2);
    v59 = *((_QWORD *)a2 + 6);
    sub_2109CE728((uint64_t)v60, (uint64_t)(a2 + 14));
    *(_OWORD *)a1 = v56;
    *(_OWORD *)(a1 + 16) = v57;
    *(_OWORD *)(a1 + 32) = v58;
    *(_OWORD *)(a1 + 80) = v61;
    *(_QWORD *)(a1 + 96) = v62;
    v4 = v60[0];
    *(_QWORD *)(a1 + 48) = v59;
    *(_QWORD *)(a1 + 56) = v4;
    v5 = *(void **)(a1 + 64);
    if (v5)
      free(v5);
    v6 = v60[2];
    *(_QWORD *)(a1 + 64) = v60[1];
    *(_QWORD *)(a1 + 72) = v6;
    return a1;
  }
  if (a2[3] == 1 && *(_DWORD *)(a1 + 12) == 1)
  {
    v24 = (char *)a2[4];
    v25 = *a2;
    v54 = v24;
    v55 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v24 != (_DWORD)v55 || (_DWORD)v24 != (_DWORD)v25)
    {
      if (!(_DWORD)v25)
        return a1;
      v31 = a2[1];
      if (!v31)
        return a1;
      v32 = a2[2];
      if (!v32)
        return a1;
      v33 = v31 - 1;
      v34 = (char *)*((_QWORD *)a2 + 8);
      v53 = v32 - 1;
      if (v32 == 1)
      {
LABEL_81:
        if (v33)
        {
          while (v34
               || !sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
          {
            memmove(v3, v34, v25);
            v34 = &v24[(_QWORD)v34];
            v3 += v55;
            if (!--v33)
              goto LABEL_87;
          }
        }
        else
        {
LABEL_87:
          if (v34
            || !sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
          {
            memmove(v3, v34, v25);
            return a1;
          }
        }
      }
      else
      {
        v50 = *(unsigned int *)(a1 + 20);
        v49 = a2[5];
        if (v31 == 1)
        {
          while (v34
               || !sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
          {
            memmove(v3, v34, v25);
            v34 += v49;
            v3 += v50;
            if (!--v53)
              goto LABEL_81;
          }
        }
        else
        {
          v35 = 0;
          while (1)
          {
            v51 = v35;
            v36 = v34;
            v37 = 0;
            v52 = v36;
            v38 = v3;
            do
            {
              while (v36)
              {
                memmove(v38, v36, v25);
                v36 = &v24[(_QWORD)v36];
                v38 += v55;
                if (++v37 == v33)
                  goto LABEL_41;
              }
              v39 = v25;
              sub_2109EDAB0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4);
              v40 = atomic_load((unsigned __int8 *)&qword_254A75F38);
              if ((v40 & 1) == 0 && __cxa_guard_acquire(&qword_254A75F38))
              {
                __cxa_atexit((void (*)(void *))sub_2109EDF34, &qword_254A75F00, &dword_21089F000);
                __cxa_guard_release(&qword_254A75F38);
              }
              if (byte_254A75F28)
                v41 = byte_254A75F30 == 0;
              else
                v41 = 0;
              if (!v41)
              {
                v42 = qword_254A75F00;
                v43 = unk_254A75F08;
                while (v42 != v43)
                {
                  v45 = *(void (**)(uint64_t, const char *, uint64_t, void *, _QWORD))v42;
                  v44 = *(_QWORD *)(v42 + 8);
                  v42 += 16;
                  v45(v44, "ptr != nullptr || size == 0", 27, &unk_210A01421, 0);
                }
              }
              v46 = atomic_load((unsigned __int8 *)&qword_254A75F38);
              if ((v46 & 1) == 0 && __cxa_guard_acquire(&qword_254A75F38))
              {
                __cxa_atexit((void (*)(void *))sub_2109EDF34, &qword_254A75F00, &dword_21089F000);
                __cxa_guard_release(&qword_254A75F38);
              }
              if (!byte_254A75F28)
                goto LABEL_90;
              v25 = v39;
              qword_254A75F18(unk_254A75F20, "ptr != nullptr || size == 0", 27, &unk_210A01421, 0);
              memcpy(v38, 0, v39);
              v24 = v54;
              v38 += v55;
              ++v37;
              v36 = v54;
            }
            while (v37 != v33);
            v36 = v54;
            if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
            {
              break;
            }
LABEL_41:
            memmove(v38, v36, v25);
            v34 = &v52[v49];
            v3 += v50;
            v35 = v51 + 1;
            if (v51 + 1 == v53)
              goto LABEL_81;
          }
        }
      }
      goto LABEL_90;
    }
    v26 = a2[5];
    v27 = *(unsigned int *)(a1 + 20);
    v28 = a2[1];
    v29 = v28 * a2[4];
    if ((_DWORD)v26 == (_DWORD)v27 && (_DWORD)v26 == (_DWORD)v29)
    {
      v29 = v26 * a2[2];
      v30 = (char *)*((_QWORD *)a2 + 8);
      if ((_DWORD)v29 && !v30)
      {
        if (!sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
        {
          v3 = *(_BYTE **)(a1 + 64);
          goto LABEL_75;
        }
LABEL_90:
        abort();
      }
    }
    else
    {
      if (!(_DWORD)v54)
        return a1;
      if (!v28)
        return a1;
      v47 = a2[2];
      if (!v47)
        return a1;
      v30 = (char *)*((_QWORD *)a2 + 8);
      v48 = v47 - 1;
      if (v47 != 1)
      {
        if (!(_DWORD)v29)
          return a1;
        while (v30
             || !sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
        {
          memmove(v3, v30, v29);
          v30 += v26;
          v3 += v27;
          if (!--v48)
            goto LABEL_70;
        }
        goto LABEL_90;
      }
LABEL_70:
      if ((_DWORD)v29 && !v30)
      {
        if (!sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))goto LABEL_75;
        goto LABEL_90;
      }
    }
    if (!(_DWORD)v29)
      return a1;
LABEL_75:
    memmove(v3, v30, v29);
    return a1;
  }
  if (*a2)
  {
    v9 = a2[1];
    if (v9)
    {
      v10 = a2[2];
      if (v10)
      {
        v11 = v9 - 1;
        v12 = a2[4];
        v13 = *(unsigned int *)(a1 + 16);
        v14 = (_BYTE *)*((_QWORD *)a2 + 8);
        v15 = v10 - 1;
        if (v15)
        {
          v16 = *(unsigned int *)(a1 + 20);
          v17 = a2[5];
          if (v11)
          {
            v18 = 0;
            v19 = v3 + 2;
            v20 = v14 + 2;
            do
            {
              v21 = v20;
              v22 = v19;
              v23 = v11;
              do
              {
                *(v22 - 2) = *(v21 - 2);
                *(v22 - 1) = *(v21 - 1);
                *v22 = *v21;
                v22 += v13;
                v21 += v12;
                --v23;
              }
              while (v23);
              *(v22 - 2) = *(v21 - 2);
              *(v22 - 1) = *(v21 - 1);
              *v22 = *v21;
              v14 += v17;
              v3 += v16;
              ++v18;
              v19 += v16;
              v20 += v17;
            }
            while (v18 != v15);
          }
          else
          {
            do
            {
              *v3 = *v14;
              v3[1] = v14[1];
              v3[2] = v14[2];
              v14 += v17;
              v3 += v16;
              --v15;
            }
            while (v15);
          }
        }
        for (; v11; --v11)
        {
          *v3 = *v14;
          v3[1] = v14[1];
          v3[2] = v14[2];
          v14 += v12;
          v3 += v13;
        }
        *v3 = *v14;
        v3[1] = v14[1];
        v3[2] = v14[2];
      }
    }
  }
  return a1;
}

uint64_t sub_2109D8218(uint64_t a1, unsigned int *a2)
{
  _WORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  _WORD *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _WORD *v19;
  _WORD *v20;
  _WORD *v21;
  _WORD *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  const void *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  char *v36;
  int v37;
  int v38;
  char *v39;
  unsigned __int8 v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, const char *, uint64_t, void *, _QWORD);
  unsigned __int8 v46;
  unsigned int v47;
  char *v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  char *v58;
  unsigned int v59;
  char *__src;
  uint64_t v61;
  uint64_t __len;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  _QWORD v67[3];
  __int128 v68;
  uint64_t v69;

  v3 = *(_WORD **)(a1 + 64);
  if (v3 && *(_QWORD *)(a2 + 1) == *(_QWORD *)(a1 + 4) && *((_QWORD *)a2 + 2) == *(_QWORD *)(a1 + 16))
  {
    if (a2[3] != 1 || *(_DWORD *)(a1 + 12) != 1)
    {
      if (!*a2)
        return a1;
      v9 = a2[1];
      if (!v9)
        return a1;
      v10 = a2[2];
      if (!v10)
        return a1;
      v11 = v9 - 1;
      v12 = a2[4];
      v13 = *(unsigned int *)(a1 + 16);
      v14 = (_WORD *)*((_QWORD *)a2 + 8);
      v15 = v10 - 1;
      if (v15)
      {
        v16 = *(unsigned int *)(a1 + 20);
        v17 = a2[5];
        if (!v11)
        {
          do
          {
            *v3 = *v14;
            v3[1] = v14[1];
            v3[2] = v14[2];
            v14 += v17;
            v3 += v16;
            --v15;
          }
          while (v15);
LABEL_71:
          *v3 = *v14;
          v3[1] = v14[1];
          v3[2] = v14[2];
          return a1;
        }
        v18 = 0;
        v19 = v3 + 2;
        v20 = v14 + 2;
        do
        {
          v21 = v20;
          v22 = v19;
          v23 = v11;
          do
          {
            *(v22 - 2) = *(v21 - 2);
            *(v22 - 1) = *(v21 - 1);
            *v22 = *v21;
            v22 += v13;
            v21 += v12;
            --v23;
          }
          while (v23);
          *(v22 - 2) = *(v21 - 2);
          *(v22 - 1) = *(v21 - 1);
          *v22 = *v21;
          v14 += v17;
          v3 += v16;
          ++v18;
          v19 += v16;
          v20 += v17;
        }
        while (v18 != v15);
      }
      for (; v11; --v11)
      {
        *v3 = *v14;
        v3[1] = v14[1];
        v3[2] = v14[2];
        v14 += v12;
        v3 += v13;
      }
      goto LABEL_71;
    }
    v24 = a2[4];
    v25 = *(unsigned int *)(a1 + 16);
    v26 = *a2;
    if ((_DWORD)v24 == (_DWORD)v25 && (_DWORD)v24 == (_DWORD)v26)
    {
      v27 = a2[5];
      v28 = *(unsigned int *)(a1 + 20);
      v29 = a2[1];
      v30 = v29 * v24;
      if ((_DWORD)v27 == (_DWORD)v28 && (_DWORD)v27 == (_DWORD)v30)
      {
        v31 = v27 * a2[2];
        v32 = (const void *)*((_QWORD *)a2 + 8);
        if (!(_DWORD)v31 || v32)
        {
          if (!(_DWORD)v31)
            return a1;
LABEL_69:
          memmove(v3, v32, 2 * v31);
          return a1;
        }
        if (!sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
        {
          v3 = *(_WORD **)(a1 + 64);
          goto LABEL_69;
        }
      }
      else
      {
        if (!(_DWORD)v24)
          return a1;
        if (!v29)
          return a1;
        v47 = a2[2];
        if (!v47)
          return a1;
        v48 = (char *)*((_QWORD *)a2 + 8);
        v49 = v47 - 1;
        if (v47 == 1)
        {
LABEL_72:
          if (!(_DWORD)v30 || v48)
          {
            if (!(_DWORD)v30)
              return a1;
          }
          else if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
          {
            goto LABEL_92;
          }
          memmove(v3, v48, 2 * v30);
          return a1;
        }
        if (!(_DWORD)v30)
          return a1;
        v50 = 2 * v27;
        v51 = 2 * v28;
        while (v48
             || !sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
        {
          memmove(v3, v48, 2 * v30);
          v48 += v50;
          v3 = (_WORD *)((char *)v3 + v51);
          if (!--v49)
            goto LABEL_72;
        }
      }
    }
    else
    {
      if (!(_DWORD)v26)
        return a1;
      v33 = a2[1];
      if (!v33)
        return a1;
      v34 = a2[2];
      if (!v34)
        return a1;
      v35 = v33 - 1;
      v36 = (char *)*((_QWORD *)a2 + 8);
      v61 = a2[4];
      __len = 2 * v26;
      v59 = v34 - 1;
      if (v34 == 1)
      {
LABEL_81:
        if (v35)
        {
          v54 = 2 * v25;
          while (v36
               || !sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
          {
            memmove(v3, v36, __len);
            v36 += 2 * v61;
            v3 = (_WORD *)((char *)v3 + v54);
            if (!--v35)
              goto LABEL_87;
          }
        }
        else
        {
LABEL_87:
          if (v36
            || !sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
          {
            memmove(v3, v36, __len);
            return a1;
          }
        }
      }
      else if (v33 == 1)
      {
        v52 = 2 * a2[5];
        v53 = 2 * *(unsigned int *)(a1 + 20);
        while (v36
             || !sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
        {
          memmove(v3, v36, __len);
          v36 += v52;
          v3 = (_WORD *)((char *)v3 + v53);
          if (!--v59)
            goto LABEL_81;
        }
      }
      else
      {
        v37 = 0;
        __src = (char *)(2 * v24);
        v55 = a2[5];
        v56 = *(unsigned int *)(a1 + 20);
        while (1)
        {
          v57 = v37;
          v38 = 0;
          v58 = v36;
          v39 = (char *)v3;
          do
          {
            while (v36)
            {
              memmove(v39, v36, __len);
              v36 += 2 * v61;
              v39 += 2 * v25;
              if (++v38 == v35)
                goto LABEL_39;
            }
            sub_2109EDAB0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4);
            v40 = atomic_load((unsigned __int8 *)&qword_254A75F38);
            if ((v40 & 1) == 0 && __cxa_guard_acquire(&qword_254A75F38))
            {
              __cxa_atexit((void (*)(void *))sub_2109EDF34, &qword_254A75F00, &dword_21089F000);
              __cxa_guard_release(&qword_254A75F38);
            }
            if (byte_254A75F28)
              v41 = byte_254A75F30 == 0;
            else
              v41 = 0;
            if (!v41)
            {
              v42 = qword_254A75F00;
              v43 = unk_254A75F08;
              while (v42 != v43)
              {
                v45 = *(void (**)(uint64_t, const char *, uint64_t, void *, _QWORD))v42;
                v44 = *(_QWORD *)(v42 + 8);
                v42 += 16;
                v45(v44, "ptr != nullptr || size == 0", 27, &unk_210A01421, 0);
              }
            }
            v46 = atomic_load((unsigned __int8 *)&qword_254A75F38);
            if ((v46 & 1) == 0 && __cxa_guard_acquire(&qword_254A75F38))
            {
              __cxa_atexit((void (*)(void *))sub_2109EDF34, &qword_254A75F00, &dword_21089F000);
              __cxa_guard_release(&qword_254A75F38);
            }
            if (!byte_254A75F28)
              goto LABEL_92;
            qword_254A75F18(unk_254A75F20, "ptr != nullptr || size == 0", 27, &unk_210A01421, 0);
            memcpy(v39, 0, __len);
            v39 += 2 * v25;
            ++v38;
            v36 = __src;
          }
          while (v38 != v35);
          v36 = __src;
          if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
          {
            break;
          }
LABEL_39:
          memmove(v39, v36, __len);
          v36 = &v58[2 * v55];
          v3 += v56;
          v37 = v57 + 1;
          if (v57 + 1 == v59)
            goto LABEL_81;
        }
      }
    }
LABEL_92:
    abort();
  }
  v63 = *(_OWORD *)a2;
  v64 = *((_OWORD *)a2 + 1);
  v65 = *((_OWORD *)a2 + 2);
  v66 = *((_QWORD *)a2 + 6);
  sub_2109CF018((uint64_t)v67, (uint64_t)(a2 + 14));
  *(_OWORD *)a1 = v63;
  *(_OWORD *)(a1 + 16) = v64;
  *(_OWORD *)(a1 + 32) = v65;
  *(_OWORD *)(a1 + 80) = v68;
  *(_QWORD *)(a1 + 96) = v69;
  v4 = v67[0];
  *(_QWORD *)(a1 + 48) = v66;
  *(_QWORD *)(a1 + 56) = v4;
  v5 = *(void **)(a1 + 64);
  if (v5)
    free(v5);
  v6 = v67[2];
  *(_QWORD *)(a1 + 64) = v67[1];
  *(_QWORD *)(a1 + 72) = v6;
  return a1;
}

uint64_t sub_2109D898C(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  _WORD *v3;
  void *v4;
  BOOL v5;
  int v7;
  uint64_t v8;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  _WORD *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _WORD *v21;
  _WORD *v22;
  _WORD *v23;
  _WORD *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BOOL4 v48;
  _WORD *v49;
  __int16 *v50;
  uint64_t v51;
  unint64_t v52;
  _OWORD *v53;
  __int128 v54;
  __int16 v55;
  _BOOL4 v56;
  _WORD *v57;
  __int16 *v58;
  __int128 *v59;
  _OWORD *v60;
  unint64_t v61;
  __int128 v62;
  __int16 v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _BOOL4 v75;
  _WORD *v76;
  __int16 *v77;
  uint64_t v78;
  unint64_t v79;
  _OWORD *v80;
  __int128 v81;
  __int16 v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  _WORD *v86;
  __int16 *v87;
  __int128 *v88;
  _OWORD *v89;
  unint64_t v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  __int16 v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _BOOL4 v102;
  _WORD *v103;
  __int16 *v104;
  uint64_t v105;
  unint64_t v106;
  _OWORD *v107;
  __int128 v108;
  __int16 v109;
  _BOOL4 v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  _WORD *v114;
  __int16 *v115;
  __int128 *v116;
  _OWORD *v117;
  unint64_t v118;
  __int128 v119;
  __int16 v120;
  _BOOL4 v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  _WORD *v125;
  __int16 *v126;
  __int128 *v127;
  _OWORD *v128;
  unint64_t v129;
  __int128 v130;
  __int16 v131;
  uint64_t v132;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unsigned int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unsigned int v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  uint64_t v150;
  _QWORD v151[3];
  __int128 v152;
  uint64_t v153;

  v2 = a1;
  v3 = *(_WORD **)(a1 + 64);
  if (!v3 || *(_QWORD *)(a2 + 1) != *(_QWORD *)(a1 + 4) || *((_QWORD *)a2 + 2) != *(_QWORD *)(a1 + 16))
  {
    v147 = *(_OWORD *)a2;
    v148 = *((_OWORD *)a2 + 1);
    v149 = *((_OWORD *)a2 + 2);
    v150 = *((_QWORD *)a2 + 6);
    sub_2109CFA20((uint64_t)v151, (uint64_t)(a2 + 14));
    *(_OWORD *)v2 = v147;
    *(_OWORD *)(v2 + 16) = v148;
    *(_OWORD *)(v2 + 32) = v149;
    *(_QWORD *)(v2 + 48) = v150;
    *(_OWORD *)(v2 + 80) = v152;
    *(_QWORD *)(v2 + 96) = v153;
    v4 = *(void **)(v2 + 64);
    if (v4)
    {
      if (*(_DWORD *)(v2 + 88))
        v5 = *(_DWORD *)(v2 + 84) == 0;
      else
        v5 = 1;
      if (v5 || *(_DWORD *)(v2 + 80) == 0)
        v7 = 0;
      else
        v7 = *(_DWORD *)(v2 + 88);
      if (v7 * (*(_DWORD *)(v2 + 100) >> 1) == -1)
      {
        if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
        {
          abort();
        }
        v4 = *(void **)(v2 + 64);
        *(_QWORD *)(v2 + 56) = v151[0];
        if (!v4)
          goto LABEL_20;
      }
      else
      {
        *(_QWORD *)(v2 + 56) = v151[0];
      }
      free(v4);
    }
    else
    {
      *(_QWORD *)(v2 + 56) = v151[0];
    }
LABEL_20:
    v8 = v151[2];
    *(_QWORD *)(v2 + 64) = v151[1];
    *(_QWORD *)(v2 + 72) = v8;
    return v2;
  }
  if (a2[3] != 1 || *(_DWORD *)(a1 + 12) != 1)
  {
    if (*a2)
    {
      v11 = a2[1];
      if (v11)
      {
        v12 = a2[2];
        if (v12)
        {
          v13 = v11 - 1;
          v14 = (_WORD *)*((_QWORD *)a2 + 8);
          v15 = 2 * a2[4];
          v16 = 2 * *(unsigned int *)(a1 + 16);
          v17 = v12 - 1;
          if (v17)
          {
            v18 = *(unsigned int *)(a1 + 20);
            v19 = a2[5];
            if (v13)
            {
              v20 = 0;
              v21 = v3 + 2;
              v22 = v14 + 2;
              do
              {
                v23 = v22;
                v24 = v21;
                v25 = v13;
                do
                {
                  *(v24 - 2) = *(v23 - 2);
                  *(v24 - 1) = *(v23 - 1);
                  *v24 = *v23;
                  v24 = (_WORD *)((char *)v24 + v16);
                  v23 = (_WORD *)((char *)v23 + v15);
                  --v25;
                }
                while (v25);
                *(v24 - 2) = *(v23 - 2);
                *(v24 - 1) = *(v23 - 1);
                *v24 = *v23;
                v14 += v19;
                v3 += v18;
                ++v20;
                v21 += v18;
                v22 += v19;
              }
              while (v20 != v17);
            }
            else
            {
              v92 = 2 * v19;
              v93 = 2 * v18;
              do
              {
                *v3 = *v14;
                v3[1] = v14[1];
                v3[2] = v14[2];
                v14 = (_WORD *)((char *)v14 + v92);
                v3 = (_WORD *)((char *)v3 + v93);
                --v17;
              }
              while (v17);
            }
          }
          for (; v13; --v13)
          {
            *v3 = *v14;
            v3[1] = v14[1];
            v3[2] = v14[2];
            v14 = (_WORD *)((char *)v14 + v15);
            v3 = (_WORD *)((char *)v3 + v16);
          }
          *v3 = *v14;
          v3[1] = v14[1];
          v3[2] = v14[2];
        }
      }
    }
    return v2;
  }
  v26 = a2[4];
  v27 = *(unsigned int *)(a1 + 16);
  v28 = *a2;
  if ((_DWORD)v26 != (_DWORD)v27 || (_DWORD)v26 != (_DWORD)v28)
  {
    if (!(_DWORD)v28)
      return v2;
    v35 = a2[1];
    if (!v35)
      return v2;
    v36 = a2[2];
    if (!v36)
      return v2;
    v37 = v35 - 1;
    v38 = *((_QWORD *)a2 + 8);
    v39 = 2 * v27;
    v138 = v36 - 1;
    v144 = *a2;
    v143 = v35 - 1;
    v132 = a2[4];
    if (v36 == 1)
    {
      v44 = *(_QWORD *)(a1 + 64);
LABEL_105:
      if (v37)
      {
        v95 = 0;
        v96 = 2 * v132;
        v97 = (v28 - 1) & 0x7FFFFFFFFFFFFFFFLL;
        v98 = (v97 + 1) & 0xFFFFFFFFFFFFFFF0;
        v99 = 2 * v98;
        v100 = v44;
        v101 = v38;
        while (1)
        {
          if (!v101)
          {
            v102 = sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4);
            v37 = v143;
            v28 = v144;
            if (v102)
              goto LABEL_133;
          }
          v103 = (_WORD *)v100;
          v104 = (__int16 *)v101;
          if (v97 < 0xF)
            goto LABEL_147;
          v103 = (_WORD *)v100;
          v104 = (__int16 *)v101;
          if ((unint64_t)(v44 + v39 * v95 - (v38 + v96 * v95)) < 0x20)
            goto LABEL_147;
          v105 = 0;
          v103 = (_WORD *)(v100 + v99);
          v104 = (__int16 *)(v101 + v99);
          v106 = (v97 + 1) & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v107 = (_OWORD *)(v100 + v105);
            v108 = *(_OWORD *)(v101 + v105 + 16);
            *v107 = *(_OWORD *)(v101 + v105);
            v107[1] = v108;
            v105 += 32;
            v106 -= 16;
          }
          while (v106);
          if (v97 + 1 != v98)
          {
LABEL_147:
            do
            {
              v109 = *v104++;
              *v103++ = v109;
            }
            while (v104 != (__int16 *)(v101 + 2 * v28));
          }
          v101 += v96;
          v100 += v39;
          if ((_DWORD)++v95 == v37)
            goto LABEL_118;
        }
      }
      v100 = v44;
      v101 = v38;
LABEL_118:
      if (!v101)
      {
        v110 = sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4);
        v28 = v144;
        if (v110)
LABEL_133:
          abort();
      }
      v111 = (v28 - 1) & 0x7FFFFFFFFFFFFFFFLL;
      v2 = a1;
      if (v111 < 0xF || (unint64_t)(v100 - v101) < 0x20)
      {
        v114 = (_WORD *)v100;
        v115 = (__int16 *)v101;
      }
      else
      {
        v112 = v111 + 1;
        v113 = (v111 + 1) & 0xFFFFFFFFFFFFFFF0;
        v114 = (_WORD *)(v100 + 2 * v113);
        v115 = (__int16 *)(v101 + 2 * v113);
        v116 = (__int128 *)(v101 + 16);
        v117 = (_OWORD *)(v100 + 16);
        v118 = v113;
        do
        {
          v119 = *v116;
          *(v117 - 1) = *(v116 - 1);
          *v117 = v119;
          v116 += 2;
          v117 += 2;
          v118 -= 16;
        }
        while (v118);
        if (v112 == v113)
          return v2;
      }
      do
      {
        v120 = *v115++;
        *v114++ = v120;
      }
      while (v115 != (__int16 *)(v101 + 2 * v28));
      return v2;
    }
    v142 = 0;
    v40 = (v28 - 1) & 0x7FFFFFFFFFFFFFFFLL;
    v139 = 2 * a2[5];
    v140 = 2 * *(unsigned int *)(a1 + 20);
    v41 = 2 * v26;
    v146 = v40 + 1;
    v42 = (v40 + 1) & 0xFFFFFFFFFFFFFFF0;
    v43 = 2 * v42;
    v135 = *((_QWORD *)a2 + 8);
    v136 = *(_QWORD *)(a1 + 64);
    v44 = v136;
    while (1)
    {
      v141 = v38;
      v45 = v44;
      v46 = v38;
      if (v37)
      {
        v47 = 0;
        v45 = v44;
        v46 = v141;
        do
        {
          if (!v46)
          {
            v48 = sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4);
            v37 = v143;
            v28 = v144;
            if (v48)
              goto LABEL_133;
          }
          v49 = (_WORD *)v45;
          v50 = (__int16 *)v46;
          if (v40 < 0xF)
            goto LABEL_148;
          v49 = (_WORD *)v45;
          v50 = (__int16 *)v46;
          if ((unint64_t)(v136 + v140 * v142 + v39 * v47 - (v135 + v139 * v142 + v41 * v47)) < 0x20)
            goto LABEL_148;
          v51 = 0;
          v49 = (_WORD *)(v45 + v43);
          v50 = (__int16 *)(v46 + v43);
          v52 = (v40 + 1) & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v53 = (_OWORD *)(v45 + v51);
            v54 = *(_OWORD *)(v46 + v51 + 16);
            *v53 = *(_OWORD *)(v46 + v51);
            v53[1] = v54;
            v51 += 32;
            v52 -= 16;
          }
          while (v52);
          if (v146 != v42)
          {
LABEL_148:
            do
            {
              v55 = *v50++;
              *v49++ = v55;
            }
            while (v50 != (__int16 *)(v46 + 2 * v28));
          }
          v46 += v41;
          v45 += v39;
        }
        while ((_DWORD)++v47 != v37);
      }
      if (!v46)
      {
        v56 = sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4);
        v37 = v143;
        v28 = v144;
        if (v56)
          goto LABEL_133;
      }
      if (v40 < 0xF || (unint64_t)(v45 - v46) < 0x20)
      {
        v57 = (_WORD *)v45;
        v58 = (__int16 *)v46;
      }
      else
      {
        v57 = (_WORD *)(v45 + v43);
        v58 = (__int16 *)(v46 + v43);
        v59 = (__int128 *)(v46 + 16);
        v60 = (_OWORD *)(v45 + 16);
        v61 = (v40 + 1) & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v62 = *v59;
          *(v60 - 1) = *(v59 - 1);
          *v60 = v62;
          v59 += 2;
          v60 += 2;
          v61 -= 16;
        }
        while (v61);
        if (v146 == v42)
          goto LABEL_49;
      }
      do
      {
        v63 = *v58++;
        *v57++ = v63;
      }
      while (v58 != (__int16 *)(v46 + 2 * v28));
LABEL_49:
      v38 = v141 + v139;
      v44 += v140;
      if ((_DWORD)++v142 == v138)
        goto LABEL_105;
    }
  }
  v29 = a2[5];
  v30 = *(unsigned int *)(a1 + 20);
  v31 = a2[1];
  v32 = v31 * v26;
  if ((_DWORD)v29 == (_DWORD)v30 && (_DWORD)v29 == (_DWORD)v32)
  {
    v33 = a2[2] * v29;
    v34 = *((_QWORD *)a2 + 8);
    if (!(_DWORD)v33 || v34)
    {
      if (!(_DWORD)v33)
        return v2;
    }
    else
    {
      if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
      {
        goto LABEL_133;
      }
      v3 = *(_WORD **)(v2 + 64);
    }
    v83 = (v33 - 1) & 0x7FFFFFFFFFFFFFFFLL;
    if (v83 < 0xF || (unint64_t)v3 - v34 < 0x20)
    {
      v86 = v3;
      v87 = (__int16 *)v34;
    }
    else
    {
      v84 = v83 + 1;
      v85 = (v83 + 1) & 0xFFFFFFFFFFFFFFF0;
      v86 = &v3[v85];
      v87 = (__int16 *)(v34 + 2 * v85);
      v88 = (__int128 *)(v34 + 16);
      v89 = v3 + 8;
      v90 = v85;
      do
      {
        v91 = *v88;
        *(v89 - 1) = *(v88 - 1);
        *v89 = v91;
        v88 += 2;
        v89 += 2;
        v90 -= 16;
      }
      while (v90);
      if (v84 == v85)
        return v2;
    }
    do
    {
      v94 = *v87++;
      *v86++ = v94;
    }
    while (v87 != (__int16 *)(v34 + 2 * v33));
    return v2;
  }
  if ((_DWORD)v26)
  {
    if (v31)
    {
      v64 = a2[2];
      if (v64)
      {
        v65 = *((_QWORD *)a2 + 8);
        v66 = v64 - 1;
        v145 = v32;
        if (v64 == 1)
        {
          v134 = a1;
          v70 = *(_QWORD *)(a1 + 64);
          v74 = *((_QWORD *)a2 + 8);
LABEL_130:
          if (!(_DWORD)v32 || v74)
          {
            v2 = v134;
            if (!(_DWORD)v32)
              return v2;
          }
          else
          {
            v121 = sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4);
            v32 = v145;
            v2 = v134;
            if (v121)
              goto LABEL_133;
          }
          v122 = (v32 - 1) & 0x7FFFFFFFFFFFFFFFLL;
          if (v122 < 0xF || (unint64_t)(v70 - v74) < 0x20)
          {
            v125 = (_WORD *)v70;
            v126 = (__int16 *)v74;
          }
          else
          {
            v123 = v122 + 1;
            v124 = (v122 + 1) & 0xFFFFFFFFFFFFFFF0;
            v125 = (_WORD *)(v70 + 2 * v124);
            v126 = (__int16 *)(v74 + 2 * v124);
            v127 = (__int128 *)(v74 + 16);
            v128 = (_OWORD *)(v70 + 16);
            v129 = v124;
            do
            {
              v130 = *v127;
              *(v128 - 1) = *(v127 - 1);
              *v128 = v130;
              v127 += 2;
              v128 += 2;
              v129 -= 16;
            }
            while (v129);
            if (v123 == v124)
              return v2;
          }
          do
          {
            v131 = *v126++;
            *v125++ = v131;
          }
          while (v126 != (__int16 *)(v74 + 2 * v32));
          return v2;
        }
        if ((_DWORD)v32)
        {
          v134 = a1;
          v67 = 0;
          v68 = 2 * v30;
          v69 = 2 * v29;
          v70 = *(_QWORD *)(a1 + 64);
          v71 = (v32 - 1) & 0x7FFFFFFFFFFFFFFFLL;
          v72 = (v71 + 1) & 0xFFFFFFFFFFFFFFF0;
          v73 = 2 * v72;
          v137 = v70;
          v74 = *((_QWORD *)a2 + 8);
          while (1)
          {
            if (!v74)
            {
              v75 = sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4);
              v32 = v145;
              if (v75)
                goto LABEL_133;
            }
            v76 = (_WORD *)v70;
            v77 = (__int16 *)v74;
            if (v71 < 0xF)
              goto LABEL_149;
            v76 = (_WORD *)v70;
            v77 = (__int16 *)v74;
            if ((unint64_t)(v137 + v68 * v67 - (v65 + v69 * v67)) < 0x20)
              goto LABEL_149;
            v78 = 0;
            v76 = (_WORD *)(v70 + v73);
            v77 = (__int16 *)(v74 + v73);
            v79 = (v71 + 1) & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v80 = (_OWORD *)(v70 + v78);
              v81 = *(_OWORD *)(v74 + v78 + 16);
              *v80 = *(_OWORD *)(v74 + v78);
              v80[1] = v81;
              v78 += 32;
              v79 -= 16;
            }
            while (v79);
            if (v71 + 1 != v72)
            {
LABEL_149:
              do
              {
                v82 = *v77++;
                *v76++ = v82;
              }
              while (v77 != (__int16 *)(v74 + 2 * v32));
            }
            v74 += v69;
            v70 += v68;
            if ((_DWORD)++v67 == v66)
              goto LABEL_130;
          }
        }
      }
    }
  }
  return v2;
}

void sub_2109D9380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_2109BED04((uint64_t)va);
  _Unwind_Resume(a1);
}

__int16 sub_2109D9394@<H0>(uint64_t a1@<X0>, uint64_t a2@<X1>)
{
  int v4;
  int v5;
  BOOL v6;
  int v8;
  _WORD *v9;
  _WORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _WORD *v17;
  _WORD *v18;
  _WORD *v19;
  _WORD *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _WORD *v30;
  BOOL v31;
  int v32;
  int v33;
  int v34;
  _WORD *v35;
  _WORD *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _WORD *v43;
  _WORD *v44;
  uint64_t v45;
  _BOOL4 v46;
  _WORD *v47;
  __int16 *v48;
  uint64_t v49;
  unint64_t v50;
  _OWORD *v51;
  __int128 v52;
  __int16 v53;
  _BOOL4 v54;
  _WORD *v55;
  __int16 *v56;
  __int128 *v57;
  _OWORD *v58;
  unint64_t v59;
  __int128 v60;
  __int16 v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  _WORD *v67;
  _WORD *v68;
  _BOOL4 v69;
  _WORD *v70;
  __int16 *v71;
  uint64_t v72;
  unint64_t v73;
  _OWORD *v74;
  __int128 v75;
  __int16 v76;
  _BOOL4 v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  _WORD *v81;
  __int16 *v82;
  __int128 *v83;
  _OWORD *v84;
  unint64_t v85;
  __int128 v86;
  __int128 v87;
  __int16 v88;
  int v89;
  _WORD *v90;
  _WORD *v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  _WORD *v98;
  _WORD *v99;
  _BOOL4 v100;
  _WORD *v101;
  __int16 *v102;
  uint64_t v103;
  unint64_t v104;
  _OWORD *v105;
  __int128 v106;
  __int16 v107;
  uint64_t v108;
  uint64_t v109;
  _WORD *v110;
  unint64_t v111;
  __int16 *v112;
  unint64_t v113;
  unint64_t v114;
  _WORD *v115;
  __int128 *v116;
  _OWORD *v117;
  unint64_t v118;
  __int128 v119;
  __int16 v120;
  _BOOL4 v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  _WORD *v125;
  __int16 *v126;
  __int128 *v127;
  _OWORD *v128;
  unint64_t v129;
  __int128 v130;
  __int16 v131;
  uint64_t v133;
  _WORD *v134;
  _WORD *v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  _WORD *v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;

  if (*(_DWORD *)(a1 + 20) != 1 || *(_DWORD *)(a2 + 20) != 1)
  {
    v4 = *(_DWORD *)(a1 + 12);
    v5 = *(_DWORD *)(a1 + 16);
    if (*(_DWORD *)(a1 + 8))
      v6 = v4 == 0;
    else
      v6 = 1;
    if (!v6 && v5 != 0)
    {
      v8 = v4 - 1;
      v9 = *(_WORD **)a1;
      v10 = *(_WORD **)a2;
      v11 = 2 * *(unsigned int *)(a1 + 24);
      v12 = 2 * *(unsigned int *)(a2 + 24);
      v13 = v5 - 1;
      if (v13)
      {
        v14 = *(unsigned int *)(a2 + 28);
        v15 = *(unsigned int *)(a1 + 28);
        if (v8)
        {
          v16 = 0;
          v17 = v10 + 2;
          v18 = v9 + 2;
          do
          {
            v19 = v18;
            v20 = v17;
            v21 = v8;
            do
            {
              *(v20 - 2) = *(v19 - 2);
              *(v20 - 1) = *(v19 - 1);
              *v20 = *v19;
              v20 = (_WORD *)((char *)v20 + v12);
              v19 = (_WORD *)((char *)v19 + v11);
              --v21;
            }
            while (v21);
            *(v20 - 2) = *(v19 - 2);
            *(v20 - 1) = *(v19 - 1);
            *v20 = *v19;
            v9 += v15;
            v10 += v14;
            ++v16;
            v17 += v14;
            v18 += v15;
          }
          while (v16 != v13);
        }
        else
        {
          v108 = 2 * v15;
          v109 = 2 * v14;
          do
          {
            *v10 = *v9;
            v10[1] = v9[1];
            v10[2] = v9[2];
            v9 = (_WORD *)((char *)v9 + v108);
            v10 = (_WORD *)((char *)v10 + v109);
            --v13;
          }
          while (v13);
        }
      }
      for (; v8; --v8)
      {
        *v10 = *v9;
        v10[1] = v9[1];
        v10[2] = v9[2];
        v9 = (_WORD *)((char *)v9 + v11);
        v10 = (_WORD *)((char *)v10 + v12);
      }
      *v10 = *v9;
      v10[1] = v9[1];
      LOWORD(v86) = v9[2];
      v10[2] = v86;
    }
    return v86;
  }
  v22 = *(unsigned int *)(a1 + 24);
  v23 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v22 != (_DWORD)v23)
  {
    v24 = *(_DWORD *)(a1 + 8);
LABEL_30:
    if (!v24)
      return v86;
    v32 = *(_DWORD *)(a1 + 12);
    if (!v32)
      return v86;
    v33 = *(_DWORD *)(a1 + 16);
    if (!v33)
      return v86;
    v34 = v32 - 1;
    v35 = *(_WORD **)a1;
    v36 = *(_WORD **)a2;
    v37 = 2 * v23;
    v38 = v24;
    v136 = v33 - 1;
    v143 = v24;
    v141 = v32 - 1;
    v133 = *(unsigned int *)(a1 + 24);
    if (v33 == 1)
    {
LABEL_59:
      if (v34)
      {
        v62 = 0;
        v63 = 2 * v133;
        v64 = (v38 - 1) & 0x7FFFFFFFFFFFFFFFLL;
        v65 = (v64 + 1) & 0xFFFFFFFFFFFFFFF0;
        v66 = v65;
        v67 = v36;
        v68 = v35;
        while (1)
        {
          if (!v68)
          {
            v69 = sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4);
            v34 = v141;
            v38 = v143;
            if (v69)
              goto LABEL_119;
          }
          v70 = v67;
          v71 = v68;
          if (v64 < 0xF)
            goto LABEL_132;
          v70 = v67;
          v71 = v68;
          if ((unint64_t)((char *)v36 + v37 * v62 - ((char *)v35 + v63 * v62)) < 0x20)
            goto LABEL_132;
          v72 = 0;
          v70 = &v67[v66];
          v71 = &v68[v66];
          v73 = (v64 + 1) & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v74 = &v67[v72];
            v75 = *(_OWORD *)&v68[v72 + 8];
            *v74 = *(_OWORD *)&v68[v72];
            v74[1] = v75;
            v72 += 16;
            v73 -= 16;
          }
          while (v73);
          if (v64 + 1 != v65)
          {
LABEL_132:
            do
            {
              v76 = *v71++;
              *v70++ = v76;
            }
            while (v71 != &v68[v38]);
          }
          v68 = (_WORD *)((char *)v68 + v63);
          v67 = (_WORD *)((char *)v67 + v37);
          if ((_DWORD)++v62 == v34)
            goto LABEL_72;
        }
      }
      v67 = v36;
      v68 = v35;
LABEL_72:
      if (!v68)
      {
        v77 = sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4);
        v38 = v143;
        if (v77)
LABEL_119:
          abort();
      }
      v78 = (v38 - 1) & 0x7FFFFFFFFFFFFFFFLL;
      if (v78 < 0xF || (unint64_t)((char *)v67 - (char *)v68) < 0x20)
      {
        v81 = v67;
        v82 = v68;
      }
      else
      {
        v79 = v78 + 1;
        v80 = (v78 + 1) & 0xFFFFFFFFFFFFFFF0;
        v81 = &v67[v80];
        v82 = &v68[v80];
        v83 = (__int128 *)(v68 + 8);
        v84 = v67 + 8;
        v85 = v80;
        do
        {
          v86 = *(v83 - 1);
          v87 = *v83;
          *(v84 - 1) = v86;
          *v84 = v87;
          v83 += 2;
          v84 += 2;
          v85 -= 16;
        }
        while (v85);
        if (v79 == v80)
          return v86;
      }
      do
      {
        v88 = *v82++;
        LOWORD(v86) = v88;
        *v81++ = v88;
      }
      while (v82 != &v68[v38]);
      return v86;
    }
    v140 = 0;
    v39 = (v24 - 1) & 0x7FFFFFFFFFFFFFFFLL;
    v137 = 2 * *(unsigned int *)(a1 + 28);
    v138 = 2 * *(unsigned int *)(a2 + 28);
    v40 = 2 * v22;
    v145 = v39 + 1;
    v41 = (v39 + 1) & 0xFFFFFFFFFFFFFFF0;
    v42 = v41;
    v134 = *(_WORD **)a2;
    v135 = *(_WORD **)a1;
    while (1)
    {
      v139 = v36;
      v43 = v36;
      v44 = v35;
      if (v34)
      {
        v45 = 0;
        v43 = v139;
        v44 = v35;
        do
        {
          if (!v44)
          {
            v46 = sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4);
            v34 = v141;
            v38 = v143;
            if (v46)
              goto LABEL_119;
          }
          v47 = v43;
          v48 = v44;
          if (v39 < 0xF)
            goto LABEL_133;
          v47 = v43;
          v48 = v44;
          if ((unint64_t)((char *)v134 + v138 * v140 + v37 * v45 - ((char *)v135 + v137 * v140 + v40 * v45)) < 0x20)
            goto LABEL_133;
          v49 = 0;
          v47 = &v43[v42];
          v48 = &v44[v42];
          v50 = (v39 + 1) & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v51 = &v43[v49];
            v52 = *(_OWORD *)&v44[v49 + 8];
            *v51 = *(_OWORD *)&v44[v49];
            v51[1] = v52;
            v49 += 16;
            v50 -= 16;
          }
          while (v50);
          if (v145 != v41)
          {
LABEL_133:
            do
            {
              v53 = *v48++;
              *v47++ = v53;
            }
            while (v48 != &v44[v38]);
          }
          v44 = (_WORD *)((char *)v44 + v40);
          v43 = (_WORD *)((char *)v43 + v37);
        }
        while ((_DWORD)++v45 != v34);
      }
      if (!v44)
      {
        v54 = sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4);
        v34 = v141;
        v38 = v143;
        if (v54)
          goto LABEL_119;
      }
      if (v39 < 0xF || (unint64_t)((char *)v43 - (char *)v44) < 0x20)
      {
        v55 = v43;
        v56 = v44;
      }
      else
      {
        v55 = &v43[v42];
        v56 = &v44[v42];
        v57 = (__int128 *)(v44 + 8);
        v58 = v43 + 8;
        v59 = (v39 + 1) & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v60 = *v57;
          *(v58 - 1) = *(v57 - 1);
          *v58 = v60;
          v57 += 2;
          v58 += 2;
          v59 -= 16;
        }
        while (v59);
        if (v145 == v41)
          goto LABEL_35;
      }
      do
      {
        v61 = *v56++;
        *v55++ = v61;
      }
      while (v56 != &v44[v38]);
LABEL_35:
      v35 = (_WORD *)((char *)v35 + v137);
      v36 = &v139[(unint64_t)v138 / 2];
      if ((_DWORD)++v140 == v136)
        goto LABEL_59;
    }
  }
  v24 = *(_DWORD *)(a1 + 8);
  if ((_DWORD)v22 != v24)
    goto LABEL_30;
  v25 = *(unsigned int *)(a1 + 28);
  v26 = *(unsigned int *)(a2 + 28);
  v27 = *(_DWORD *)(a1 + 12);
  v28 = (v27 * v22);
  if ((_DWORD)v25 == (_DWORD)v26 && (_DWORD)v25 == (_DWORD)v28)
  {
    v29 = (v25 * *(_DWORD *)(a1 + 16));
    v30 = *(_WORD **)a1;
    if ((_DWORD)v29)
      v31 = v30 == 0;
    else
      v31 = 0;
    if (v31)
    {
      if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
      {
        goto LABEL_119;
      }
    }
    else if (!(_DWORD)v29)
    {
      return v86;
    }
    v110 = *(_WORD **)a2;
    v111 = (v29 - 1) & 0x7FFFFFFFFFFFFFFFLL;
    if (v111 < 0xF)
    {
      v112 = v30;
    }
    else
    {
      v112 = v30;
      if ((unint64_t)((char *)v110 - (char *)v30) >= 0x20)
      {
        v113 = v111 + 1;
        v114 = v113 & 0xFFFFFFFFFFFFFFF0;
        v115 = &v110[v114];
        v112 = &v30[v114];
        v116 = (__int128 *)(v30 + 8);
        v117 = v110 + 8;
        v118 = v113 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v86 = *(v116 - 1);
          v119 = *v116;
          *(v117 - 1) = v86;
          *v117 = v119;
          v116 += 2;
          v117 += 2;
          v118 -= 16;
        }
        while (v118);
        v110 = v115;
        if (v113 == (v113 & 0xFFFFFFFFFFFFFFF0))
          return v86;
      }
    }
    do
    {
      v120 = *v112++;
      LOWORD(v86) = v120;
      *v110++ = v120;
    }
    while (v112 != &v30[v29]);
    return v86;
  }
  if ((_DWORD)v22)
  {
    if (v27)
    {
      v89 = *(_DWORD *)(a1 + 16);
      if (v89)
      {
        v90 = *(_WORD **)a1;
        v91 = *(_WORD **)a2;
        v92 = v89 - 1;
        v142 = v28;
        if (v89 == 1)
        {
          v98 = *(_WORD **)a2;
          v99 = *(_WORD **)a1;
LABEL_116:
          if (!(_DWORD)v28 || v99)
          {
            if (!(_DWORD)v28)
              return v86;
          }
          else
          {
            v121 = sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4);
            v28 = v142;
            if (v121)
              goto LABEL_119;
          }
          v122 = (v28 - 1) & 0x7FFFFFFFFFFFFFFFLL;
          if (v122 < 0xF || (unint64_t)((char *)v98 - (char *)v99) < 0x20)
          {
            v125 = v98;
            v126 = v99;
          }
          else
          {
            v123 = v122 + 1;
            v124 = (v122 + 1) & 0xFFFFFFFFFFFFFFF0;
            v125 = &v98[v124];
            v126 = &v99[v124];
            v127 = (__int128 *)(v99 + 8);
            v128 = v98 + 8;
            v129 = v124;
            do
            {
              v86 = *(v127 - 1);
              v130 = *v127;
              *(v128 - 1) = v86;
              *v128 = v130;
              v127 += 2;
              v128 += 2;
              v129 -= 16;
            }
            while (v129);
            if (v123 == v124)
              return v86;
          }
          do
          {
            v131 = *v126++;
            LOWORD(v86) = v131;
            *v125++ = v131;
          }
          while (v126 != &v99[v28]);
          return v86;
        }
        if ((_DWORD)v28)
        {
          v93 = 0;
          v94 = 2 * v26;
          v95 = 2 * v25;
          v96 = (v28 - 1) & 0x7FFFFFFFFFFFFFFFLL;
          v97 = (v96 + 1) & 0xFFFFFFFFFFFFFFF0;
          v144 = v97;
          v98 = *(_WORD **)a2;
          v99 = *(_WORD **)a1;
          while (1)
          {
            if (!v99)
            {
              v100 = sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4);
              v28 = v142;
              if (v100)
                goto LABEL_119;
            }
            v101 = v98;
            v102 = v99;
            if (v96 < 0xF)
              goto LABEL_134;
            v101 = v98;
            v102 = v99;
            if ((unint64_t)((char *)v91 + v94 * v93 - ((char *)v90 + v95 * v93)) < 0x20)
              goto LABEL_134;
            v103 = 0;
            v101 = &v98[v144];
            v102 = &v99[v144];
            v104 = (v96 + 1) & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v105 = &v98[v103];
              v86 = *(_OWORD *)&v99[v103];
              v106 = *(_OWORD *)&v99[v103 + 8];
              *v105 = v86;
              v105[1] = v106;
              v103 += 16;
              v104 -= 16;
            }
            while (v104);
            if (v96 + 1 != v97)
            {
LABEL_134:
              do
              {
                v107 = *v102++;
                LOWORD(v86) = v107;
                *v101++ = v107;
              }
              while (v102 != &v99[v28]);
            }
            v99 = (_WORD *)((char *)v99 + v95);
            v98 = (_WORD *)((char *)v98 + v94);
            if ((_DWORD)++v93 == v92)
              goto LABEL_116;
          }
        }
      }
    }
  }
  return v86;
}

uint64_t sub_2109D9C64(uint64_t a1, unsigned int *a2)
{
  _DWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  _DWORD *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  const void *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  char *v36;
  int v37;
  int v38;
  char *v39;
  unsigned __int8 v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, const char *, uint64_t, void *, _QWORD);
  unsigned __int8 v46;
  unsigned int v47;
  char *v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  char *v58;
  unsigned int v59;
  char *__src;
  uint64_t v61;
  uint64_t __len;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  _QWORD v67[3];
  __int128 v68;
  uint64_t v69;

  v3 = *(_DWORD **)(a1 + 64);
  if (v3 && *(_QWORD *)(a2 + 1) == *(_QWORD *)(a1 + 4) && *((_QWORD *)a2 + 2) == *(_QWORD *)(a1 + 16))
  {
    if (a2[3] != 1 || *(_DWORD *)(a1 + 12) != 1)
    {
      if (!*a2)
        return a1;
      v9 = a2[1];
      if (!v9)
        return a1;
      v10 = a2[2];
      if (!v10)
        return a1;
      v11 = v9 - 1;
      v12 = a2[4];
      v13 = *(unsigned int *)(a1 + 16);
      v14 = (_DWORD *)*((_QWORD *)a2 + 8);
      v15 = v10 - 1;
      if (v15)
      {
        v16 = *(unsigned int *)(a1 + 20);
        v17 = a2[5];
        if (!v11)
        {
          do
          {
            *v3 = *v14;
            v3[1] = v14[1];
            v3[2] = v14[2];
            v14 += v17;
            v3 += v16;
            --v15;
          }
          while (v15);
LABEL_71:
          *v3 = *v14;
          v3[1] = v14[1];
          v3[2] = v14[2];
          return a1;
        }
        v18 = 0;
        v19 = v3 + 2;
        v20 = v14 + 2;
        do
        {
          v21 = v20;
          v22 = v19;
          v23 = v11;
          do
          {
            *(v22 - 2) = *(v21 - 2);
            *(v22 - 1) = *(v21 - 1);
            *v22 = *v21;
            v22 += v13;
            v21 += v12;
            --v23;
          }
          while (v23);
          *(v22 - 2) = *(v21 - 2);
          *(v22 - 1) = *(v21 - 1);
          *v22 = *v21;
          v14 += v17;
          v3 += v16;
          ++v18;
          v19 += v16;
          v20 += v17;
        }
        while (v18 != v15);
      }
      for (; v11; --v11)
      {
        *v3 = *v14;
        v3[1] = v14[1];
        v3[2] = v14[2];
        v14 += v12;
        v3 += v13;
      }
      goto LABEL_71;
    }
    v24 = a2[4];
    v25 = *(unsigned int *)(a1 + 16);
    v26 = *a2;
    if ((_DWORD)v24 == (_DWORD)v25 && (_DWORD)v24 == (_DWORD)v26)
    {
      v27 = a2[5];
      v28 = *(unsigned int *)(a1 + 20);
      v29 = a2[1];
      v30 = v29 * v24;
      if ((_DWORD)v27 == (_DWORD)v28 && (_DWORD)v27 == (_DWORD)v30)
      {
        v31 = v27 * a2[2];
        v32 = (const void *)*((_QWORD *)a2 + 8);
        if (!(_DWORD)v31 || v32)
        {
          if (!(_DWORD)v31)
            return a1;
LABEL_69:
          memmove(v3, v32, 4 * v31);
          return a1;
        }
        if (!sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
        {
          v3 = *(_DWORD **)(a1 + 64);
          goto LABEL_69;
        }
      }
      else
      {
        if (!(_DWORD)v24)
          return a1;
        if (!v29)
          return a1;
        v47 = a2[2];
        if (!v47)
          return a1;
        v48 = (char *)*((_QWORD *)a2 + 8);
        v49 = v47 - 1;
        if (v47 == 1)
        {
LABEL_72:
          if (!(_DWORD)v30 || v48)
          {
            if (!(_DWORD)v30)
              return a1;
          }
          else if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
          {
            goto LABEL_92;
          }
          memmove(v3, v48, 4 * v30);
          return a1;
        }
        if (!(_DWORD)v30)
          return a1;
        v50 = 4 * v27;
        v51 = 4 * v28;
        while (v48
             || !sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
        {
          memmove(v3, v48, 4 * v30);
          v48 += v50;
          v3 = (_DWORD *)((char *)v3 + v51);
          if (!--v49)
            goto LABEL_72;
        }
      }
    }
    else
    {
      if (!(_DWORD)v26)
        return a1;
      v33 = a2[1];
      if (!v33)
        return a1;
      v34 = a2[2];
      if (!v34)
        return a1;
      v35 = v33 - 1;
      v36 = (char *)*((_QWORD *)a2 + 8);
      v61 = a2[4];
      __len = 4 * v26;
      v59 = v34 - 1;
      if (v34 == 1)
      {
LABEL_81:
        if (v35)
        {
          v54 = 4 * v25;
          while (v36
               || !sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
          {
            memmove(v3, v36, __len);
            v36 += 4 * v61;
            v3 = (_DWORD *)((char *)v3 + v54);
            if (!--v35)
              goto LABEL_87;
          }
        }
        else
        {
LABEL_87:
          if (v36
            || !sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
          {
            memmove(v3, v36, __len);
            return a1;
          }
        }
      }
      else if (v33 == 1)
      {
        v52 = 4 * a2[5];
        v53 = 4 * *(unsigned int *)(a1 + 20);
        while (v36
             || !sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
        {
          memmove(v3, v36, __len);
          v36 += v52;
          v3 = (_DWORD *)((char *)v3 + v53);
          if (!--v59)
            goto LABEL_81;
        }
      }
      else
      {
        v37 = 0;
        __src = (char *)(4 * v24);
        v55 = a2[5];
        v56 = *(unsigned int *)(a1 + 20);
        while (1)
        {
          v57 = v37;
          v38 = 0;
          v58 = v36;
          v39 = (char *)v3;
          do
          {
            while (v36)
            {
              memmove(v39, v36, __len);
              v36 += 4 * v61;
              v39 += 4 * v25;
              if (++v38 == v35)
                goto LABEL_39;
            }
            sub_2109EDAB0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4);
            v40 = atomic_load((unsigned __int8 *)&qword_254A75F38);
            if ((v40 & 1) == 0 && __cxa_guard_acquire(&qword_254A75F38))
            {
              __cxa_atexit((void (*)(void *))sub_2109EDF34, &qword_254A75F00, &dword_21089F000);
              __cxa_guard_release(&qword_254A75F38);
            }
            if (byte_254A75F28)
              v41 = byte_254A75F30 == 0;
            else
              v41 = 0;
            if (!v41)
            {
              v42 = qword_254A75F00;
              v43 = unk_254A75F08;
              while (v42 != v43)
              {
                v45 = *(void (**)(uint64_t, const char *, uint64_t, void *, _QWORD))v42;
                v44 = *(_QWORD *)(v42 + 8);
                v42 += 16;
                v45(v44, "ptr != nullptr || size == 0", 27, &unk_210A01421, 0);
              }
            }
            v46 = atomic_load((unsigned __int8 *)&qword_254A75F38);
            if ((v46 & 1) == 0 && __cxa_guard_acquire(&qword_254A75F38))
            {
              __cxa_atexit((void (*)(void *))sub_2109EDF34, &qword_254A75F00, &dword_21089F000);
              __cxa_guard_release(&qword_254A75F38);
            }
            if (!byte_254A75F28)
              goto LABEL_92;
            qword_254A75F18(unk_254A75F20, "ptr != nullptr || size == 0", 27, &unk_210A01421, 0);
            memcpy(v39, 0, __len);
            v39 += 4 * v25;
            ++v38;
            v36 = __src;
          }
          while (v38 != v35);
          v36 = __src;
          if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
          {
            break;
          }
LABEL_39:
          memmove(v39, v36, __len);
          v36 = &v58[4 * v55];
          v3 += v56;
          v37 = v57 + 1;
          if (v57 + 1 == v59)
            goto LABEL_81;
        }
      }
    }
LABEL_92:
    abort();
  }
  v63 = *(_OWORD *)a2;
  v64 = *((_OWORD *)a2 + 1);
  v65 = *((_OWORD *)a2 + 2);
  v66 = *((_QWORD *)a2 + 6);
  sub_2109CFE3C((uint64_t)v67, (uint64_t)(a2 + 14));
  *(_OWORD *)a1 = v63;
  *(_OWORD *)(a1 + 16) = v64;
  *(_OWORD *)(a1 + 32) = v65;
  *(_OWORD *)(a1 + 80) = v68;
  *(_QWORD *)(a1 + 96) = v69;
  v4 = v67[0];
  *(_QWORD *)(a1 + 48) = v66;
  *(_QWORD *)(a1 + 56) = v4;
  v5 = *(void **)(a1 + 64);
  if (v5)
    free(v5);
  v6 = v67[2];
  *(_QWORD *)(a1 + 64) = v67[1];
  *(_QWORD *)(a1 + 72) = v6;
  return a1;
}

_DWORD *sub_2109DA3D8(_DWORD *result, char **__len)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v11;
  char *v12;
  uint64_t v13;
  char *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  BOOL v20;
  int v22;
  char *v23;
  char *v24;
  size_t v25;
  int v26;
  uint64_t v27;
  int v28;
  char *v29;
  unsigned __int8 v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, const char *, uint64_t, void *, _QWORD);
  unsigned __int8 v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  const void *v41;
  size_t v42;
  uint64_t v43;
  const void *v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  char *v51;
  char *v52;
  int v53;
  char *__src;

  v3 = result[6];
  v4 = *((unsigned int *)__len + 6);
  if ((_DWORD)v3 != (_DWORD)v4)
  {
    v5 = result[2];
LABEL_18:
    v19 = result[3];
    v18 = result[4];
    if (v5)
      v20 = v19 == 0;
    else
      v20 = 1;
    if (v20 || v18 == 0)
      return result;
    v22 = v19 - 1;
    v23 = *(char **)result;
    v24 = *__len;
    v25 = 4 * v5;
    v53 = v18 - 1;
    if (v18 == 1)
    {
      v27 = result[6];
LABEL_51:
      if (v22)
      {
        v37 = 4 * v27;
        v38 = 4 * v4;
        v39 = v23;
        while (v39
             || !sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
        {
          memmove(v24, v39, v25);
          v39 += v37;
          v24 += v38;
          if (!--v22)
            goto LABEL_58;
        }
      }
      else
      {
        v39 = v23;
LABEL_58:
        if (v39
          || !sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
        {
          v40 = v24;
          v41 = v39;
          v42 = v25;
          return memmove(v40, v41, v42);
        }
      }
    }
    else if (v19 == 1)
    {
      v27 = result[6];
      v46 = 4 * result[7];
      v47 = 4 * *((unsigned int *)__len + 7);
      while (v23
           || !sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
      {
        memmove(v24, v23, v25);
        v23 += v46;
        v24 += v47;
        if (!--v53)
          goto LABEL_51;
      }
    }
    else
    {
      v26 = 0;
      v27 = result[6];
      __src = (char *)(4 * v3);
      v48 = result[7];
      v49 = *((unsigned int *)__len + 7);
      while (1)
      {
        v50 = v26;
        v28 = 0;
        v51 = v23;
        v52 = v24;
        v29 = v24;
        do
        {
          while (v23)
          {
            memmove(v29, v23, v25);
            v23 += 4 * v27;
            v29 += 4 * v4;
            if (++v28 == v22)
              goto LABEL_31;
          }
          sub_2109EDAB0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4);
          v30 = atomic_load((unsigned __int8 *)&qword_254A75F38);
          if ((v30 & 1) == 0 && __cxa_guard_acquire(&qword_254A75F38))
          {
            __cxa_atexit((void (*)(void *))sub_2109EDF34, &qword_254A75F00, &dword_21089F000);
            __cxa_guard_release(&qword_254A75F38);
          }
          if (byte_254A75F28)
            v31 = byte_254A75F30 == 0;
          else
            v31 = 0;
          if (!v31)
          {
            v32 = qword_254A75F00;
            v33 = unk_254A75F08;
            while (v32 != v33)
            {
              v35 = *(void (**)(uint64_t, const char *, uint64_t, void *, _QWORD))v32;
              v34 = *(_QWORD *)(v32 + 8);
              v32 += 16;
              v35(v34, "ptr != nullptr || size == 0", 27, &unk_210A01421, 0);
            }
          }
          v36 = atomic_load((unsigned __int8 *)&qword_254A75F38);
          if ((v36 & 1) == 0 && __cxa_guard_acquire(&qword_254A75F38))
          {
            __cxa_atexit((void (*)(void *))sub_2109EDF34, &qword_254A75F00, &dword_21089F000);
            __cxa_guard_release(&qword_254A75F38);
          }
          if (!byte_254A75F28)
            goto LABEL_77;
          qword_254A75F18(unk_254A75F20, "ptr != nullptr || size == 0", 27, &unk_210A01421, 0);
          memcpy(v29, 0, v25);
          v29 += 4 * v4;
          ++v28;
          v23 = __src;
        }
        while (v28 != v22);
        v23 = __src;
        if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
        {
          break;
        }
LABEL_31:
        memmove(v29, v23, v25);
        v23 = &v51[4 * v48];
        v24 = &v52[4 * v49];
        v26 = v50 + 1;
        if (v50 + 1 == v53)
          goto LABEL_51;
      }
    }
LABEL_77:
    abort();
  }
  v5 = result[2];
  if ((_DWORD)v3 != result[5] * v5)
    goto LABEL_18;
  v6 = result[7];
  v7 = *((unsigned int *)__len + 7);
  v8 = result[3];
  v9 = v8 * v3;
  if ((_DWORD)v6 == (_DWORD)v7 && (_DWORD)v6 == v9)
  {
    v43 = v8 * v5 * result[4];
    v44 = *(const void **)result;
    if ((_DWORD)v43)
      v45 = v44 == 0;
    else
      v45 = 0;
    if (v45)
    {
      if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
      {
        goto LABEL_77;
      }
    }
    else if (!(_DWORD)v43)
    {
      return result;
    }
    v40 = *__len;
    v42 = 4 * v43;
    v41 = v44;
    return memmove(v40, v41, v42);
  }
  if (!v5)
    return result;
  if (!v8)
    return result;
  v11 = result[4];
  if (!v11)
    return result;
  v12 = *__len;
  v13 = v8 * v5;
  v14 = *(char **)result;
  v15 = v11 - 1;
  if (v11 == 1)
  {
LABEL_74:
    if (!(_DWORD)v13 || v14)
    {
      if (!(_DWORD)v13)
        return result;
    }
    else if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
    {
      goto LABEL_77;
    }
    v40 = v12;
    v41 = v14;
    v42 = 4 * v13;
    return memmove(v40, v41, v42);
  }
  if ((_DWORD)v13)
  {
    v16 = 4 * v6;
    v17 = 4 * v7;
    while (v14
         || !sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
    {
      result = memmove(v12, v14, 4 * v13);
      v14 += v16;
      v12 += v17;
      if (!--v15)
        goto LABEL_74;
    }
    goto LABEL_77;
  }
  return result;
}

uint64_t sub_2109DA998(uint64_t a1, unsigned int *a2)
{
  _BYTE *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _BYTE *v19;
  _BYTE *v20;
  _BYTE *v21;
  _BYTE *v22;
  unsigned int v23;
  char *v24;
  size_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  size_t v29;
  char *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  char *v34;
  int v35;
  char *v36;
  int v37;
  char *v38;
  size_t v39;
  unsigned __int8 v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, const char *, uint64_t, void *, _QWORD);
  unsigned __int8 v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  char *v52;
  unsigned int v53;
  char *v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  _QWORD v60[3];
  __int128 v61;
  uint64_t v62;

  v3 = *(_BYTE **)(a1 + 64);
  if (!v3 || *(_QWORD *)(a2 + 1) != *(_QWORD *)(a1 + 4) || *((_QWORD *)a2 + 2) != *(_QWORD *)(a1 + 16))
  {
    v56 = *(_OWORD *)a2;
    v57 = *((_OWORD *)a2 + 1);
    v58 = *((_OWORD *)a2 + 2);
    v59 = *((_QWORD *)a2 + 6);
    sub_2109CE728((uint64_t)v60, (uint64_t)(a2 + 14));
    *(_OWORD *)a1 = v56;
    *(_OWORD *)(a1 + 16) = v57;
    *(_OWORD *)(a1 + 32) = v58;
    *(_OWORD *)(a1 + 80) = v61;
    *(_QWORD *)(a1 + 96) = v62;
    v4 = v60[0];
    *(_QWORD *)(a1 + 48) = v59;
    *(_QWORD *)(a1 + 56) = v4;
    v5 = *(void **)(a1 + 64);
    if (v5)
      free(v5);
    v6 = v60[2];
    *(_QWORD *)(a1 + 64) = v60[1];
    *(_QWORD *)(a1 + 72) = v6;
    return a1;
  }
  if (a2[3] == 1 && *(_DWORD *)(a1 + 12) == 1)
  {
    v24 = (char *)a2[4];
    v25 = *a2;
    v54 = v24;
    v55 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v24 != (_DWORD)v55 || (_DWORD)v24 != (_DWORD)v25)
    {
      if (!(_DWORD)v25)
        return a1;
      v31 = a2[1];
      if (!v31)
        return a1;
      v32 = a2[2];
      if (!v32)
        return a1;
      v33 = v31 - 1;
      v34 = (char *)*((_QWORD *)a2 + 8);
      v53 = v32 - 1;
      if (v32 == 1)
      {
LABEL_81:
        if (v33)
        {
          while (v34
               || !sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
          {
            memmove(v3, v34, v25);
            v34 = &v24[(_QWORD)v34];
            v3 += v55;
            if (!--v33)
              goto LABEL_87;
          }
        }
        else
        {
LABEL_87:
          if (v34
            || !sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
          {
            memmove(v3, v34, v25);
            return a1;
          }
        }
      }
      else
      {
        v50 = *(unsigned int *)(a1 + 20);
        v49 = a2[5];
        if (v31 == 1)
        {
          while (v34
               || !sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
          {
            memmove(v3, v34, v25);
            v34 += v49;
            v3 += v50;
            if (!--v53)
              goto LABEL_81;
          }
        }
        else
        {
          v35 = 0;
          while (1)
          {
            v51 = v35;
            v36 = v34;
            v37 = 0;
            v52 = v36;
            v38 = v3;
            do
            {
              while (v36)
              {
                memmove(v38, v36, v25);
                v36 = &v24[(_QWORD)v36];
                v38 += v55;
                if (++v37 == v33)
                  goto LABEL_41;
              }
              v39 = v25;
              sub_2109EDAB0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4);
              v40 = atomic_load((unsigned __int8 *)&qword_254A75F38);
              if ((v40 & 1) == 0 && __cxa_guard_acquire(&qword_254A75F38))
              {
                __cxa_atexit((void (*)(void *))sub_2109EDF34, &qword_254A75F00, &dword_21089F000);
                __cxa_guard_release(&qword_254A75F38);
              }
              if (byte_254A75F28)
                v41 = byte_254A75F30 == 0;
              else
                v41 = 0;
              if (!v41)
              {
                v42 = qword_254A75F00;
                v43 = unk_254A75F08;
                while (v42 != v43)
                {
                  v45 = *(void (**)(uint64_t, const char *, uint64_t, void *, _QWORD))v42;
                  v44 = *(_QWORD *)(v42 + 8);
                  v42 += 16;
                  v45(v44, "ptr != nullptr || size == 0", 27, &unk_210A01421, 0);
                }
              }
              v46 = atomic_load((unsigned __int8 *)&qword_254A75F38);
              if ((v46 & 1) == 0 && __cxa_guard_acquire(&qword_254A75F38))
              {
                __cxa_atexit((void (*)(void *))sub_2109EDF34, &qword_254A75F00, &dword_21089F000);
                __cxa_guard_release(&qword_254A75F38);
              }
              if (!byte_254A75F28)
                goto LABEL_90;
              v25 = v39;
              qword_254A75F18(unk_254A75F20, "ptr != nullptr || size == 0", 27, &unk_210A01421, 0);
              memcpy(v38, 0, v39);
              v24 = v54;
              v38 += v55;
              ++v37;
              v36 = v54;
            }
            while (v37 != v33);
            v36 = v54;
            if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
            {
              break;
            }
LABEL_41:
            memmove(v38, v36, v25);
            v34 = &v52[v49];
            v3 += v50;
            v35 = v51 + 1;
            if (v51 + 1 == v53)
              goto LABEL_81;
          }
        }
      }
      goto LABEL_90;
    }
    v26 = a2[5];
    v27 = *(unsigned int *)(a1 + 20);
    v28 = a2[1];
    v29 = v28 * a2[4];
    if ((_DWORD)v26 == (_DWORD)v27 && (_DWORD)v26 == (_DWORD)v29)
    {
      v29 = v26 * a2[2];
      v30 = (char *)*((_QWORD *)a2 + 8);
      if ((_DWORD)v29 && !v30)
      {
        if (!sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
        {
          v3 = *(_BYTE **)(a1 + 64);
          goto LABEL_75;
        }
LABEL_90:
        abort();
      }
    }
    else
    {
      if (!(_DWORD)v54)
        return a1;
      if (!v28)
        return a1;
      v47 = a2[2];
      if (!v47)
        return a1;
      v30 = (char *)*((_QWORD *)a2 + 8);
      v48 = v47 - 1;
      if (v47 != 1)
      {
        if (!(_DWORD)v29)
          return a1;
        while (v30
             || !sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
        {
          memmove(v3, v30, v29);
          v30 += v26;
          v3 += v27;
          if (!--v48)
            goto LABEL_70;
        }
        goto LABEL_90;
      }
LABEL_70:
      if ((_DWORD)v29 && !v30)
      {
        if (!sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))goto LABEL_75;
        goto LABEL_90;
      }
    }
    if (!(_DWORD)v29)
      return a1;
LABEL_75:
    memmove(v3, v30, v29);
    return a1;
  }
  if (*a2)
  {
    v9 = a2[1];
    if (v9)
    {
      v10 = a2[2];
      if (v10)
      {
        v11 = v9 - 1;
        v12 = a2[4];
        v13 = *(unsigned int *)(a1 + 16);
        v14 = (_BYTE *)*((_QWORD *)a2 + 8);
        v15 = v10 - 1;
        if (v15)
        {
          v16 = *(unsigned int *)(a1 + 20);
          v17 = a2[5];
          if (v11)
          {
            v18 = 0;
            v19 = v3 + 3;
            v20 = v14 + 1;
            do
            {
              v21 = v20;
              v22 = v19;
              v23 = v11;
              do
              {
                *(v22 - 3) = *(v21 - 1);
                *(v22 - 2) = *v21;
                *(v22 - 1) = v21[1];
                *v22 = v21[2];
                v22 += v13;
                v21 += v12;
                --v23;
              }
              while (v23);
              *(v22 - 3) = *(v21 - 1);
              *(v22 - 2) = *v21;
              *(v22 - 1) = v21[1];
              *v22 = v21[2];
              v14 += v17;
              v3 += v16;
              ++v18;
              v19 += v16;
              v20 += v17;
            }
            while (v18 != v15);
          }
          else
          {
            do
            {
              *v3 = *v14;
              v3[1] = v14[1];
              v3[2] = v14[2];
              v3[3] = v14[3];
              v14 += v17;
              v3 += v16;
              --v15;
            }
            while (v15);
          }
        }
        for (; v11; --v11)
        {
          *v3 = *v14;
          v3[1] = v14[1];
          v3[2] = v14[2];
          v3[3] = v14[3];
          v14 += v12;
          v3 += v13;
        }
        *v3 = *v14;
        v3[1] = v14[1];
        v3[2] = v14[2];
        v3[3] = v14[3];
      }
    }
  }
  return a1;
}

uint64_t sub_2109DB104(uint64_t a1, unsigned int *a2)
{
  _WORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  _WORD *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _WORD *v19;
  _WORD *v20;
  _WORD *v21;
  _WORD *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  const void *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  char *v36;
  int v37;
  int v38;
  char *v39;
  unsigned __int8 v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, const char *, uint64_t, void *, _QWORD);
  unsigned __int8 v46;
  unsigned int v47;
  char *v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  char *v58;
  unsigned int v59;
  char *__src;
  uint64_t v61;
  uint64_t __len;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  _QWORD v67[3];
  __int128 v68;
  uint64_t v69;

  v3 = *(_WORD **)(a1 + 64);
  if (v3 && *(_QWORD *)(a2 + 1) == *(_QWORD *)(a1 + 4) && *((_QWORD *)a2 + 2) == *(_QWORD *)(a1 + 16))
  {
    if (a2[3] != 1 || *(_DWORD *)(a1 + 12) != 1)
    {
      if (!*a2)
        return a1;
      v9 = a2[1];
      if (!v9)
        return a1;
      v10 = a2[2];
      if (!v10)
        return a1;
      v11 = v9 - 1;
      v12 = a2[4];
      v13 = *(unsigned int *)(a1 + 16);
      v14 = (_WORD *)*((_QWORD *)a2 + 8);
      v15 = v10 - 1;
      if (v15)
      {
        v16 = *(unsigned int *)(a1 + 20);
        v17 = a2[5];
        if (!v11)
        {
          do
          {
            *v3 = *v14;
            v3[1] = v14[1];
            v3[2] = v14[2];
            v3[3] = v14[3];
            v14 += v17;
            v3 += v16;
            --v15;
          }
          while (v15);
LABEL_71:
          *v3 = *v14;
          v3[1] = v14[1];
          v3[2] = v14[2];
          v3[3] = v14[3];
          return a1;
        }
        v18 = 0;
        v19 = v3 + 2;
        v20 = v14 + 2;
        do
        {
          v21 = v20;
          v22 = v19;
          v23 = v11;
          do
          {
            *(v22 - 2) = *(v21 - 2);
            *(v22 - 1) = *(v21 - 1);
            *v22 = *v21;
            v22[1] = v21[1];
            v22 += v13;
            v21 += v12;
            --v23;
          }
          while (v23);
          *(v22 - 2) = *(v21 - 2);
          *(v22 - 1) = *(v21 - 1);
          *v22 = *v21;
          v22[1] = v21[1];
          v14 += v17;
          v3 += v16;
          ++v18;
          v19 += v16;
          v20 += v17;
        }
        while (v18 != v15);
      }
      for (; v11; --v11)
      {
        *v3 = *v14;
        v3[1] = v14[1];
        v3[2] = v14[2];
        v3[3] = v14[3];
        v14 += v12;
        v3 += v13;
      }
      goto LABEL_71;
    }
    v24 = a2[4];
    v25 = *(unsigned int *)(a1 + 16);
    v26 = *a2;
    if ((_DWORD)v24 == (_DWORD)v25 && (_DWORD)v24 == (_DWORD)v26)
    {
      v27 = a2[5];
      v28 = *(unsigned int *)(a1 + 20);
      v29 = a2[1];
      v30 = v29 * v24;
      if ((_DWORD)v27 == (_DWORD)v28 && (_DWORD)v27 == (_DWORD)v30)
      {
        v31 = v27 * a2[2];
        v32 = (const void *)*((_QWORD *)a2 + 8);
        if (!(_DWORD)v31 || v32)
        {
          if (!(_DWORD)v31)
            return a1;
LABEL_69:
          memmove(v3, v32, 2 * v31);
          return a1;
        }
        if (!sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
        {
          v3 = *(_WORD **)(a1 + 64);
          goto LABEL_69;
        }
      }
      else
      {
        if (!(_DWORD)v24)
          return a1;
        if (!v29)
          return a1;
        v47 = a2[2];
        if (!v47)
          return a1;
        v48 = (char *)*((_QWORD *)a2 + 8);
        v49 = v47 - 1;
        if (v47 == 1)
        {
LABEL_72:
          if (!(_DWORD)v30 || v48)
          {
            if (!(_DWORD)v30)
              return a1;
          }
          else if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
          {
            goto LABEL_92;
          }
          memmove(v3, v48, 2 * v30);
          return a1;
        }
        if (!(_DWORD)v30)
          return a1;
        v50 = 2 * v27;
        v51 = 2 * v28;
        while (v48
             || !sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
        {
          memmove(v3, v48, 2 * v30);
          v48 += v50;
          v3 = (_WORD *)((char *)v3 + v51);
          if (!--v49)
            goto LABEL_72;
        }
      }
    }
    else
    {
      if (!(_DWORD)v26)
        return a1;
      v33 = a2[1];
      if (!v33)
        return a1;
      v34 = a2[2];
      if (!v34)
        return a1;
      v35 = v33 - 1;
      v36 = (char *)*((_QWORD *)a2 + 8);
      v61 = a2[4];
      __len = 2 * v26;
      v59 = v34 - 1;
      if (v34 == 1)
      {
LABEL_81:
        if (v35)
        {
          v54 = 2 * v25;
          while (v36
               || !sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
          {
            memmove(v3, v36, __len);
            v36 += 2 * v61;
            v3 = (_WORD *)((char *)v3 + v54);
            if (!--v35)
              goto LABEL_87;
          }
        }
        else
        {
LABEL_87:
          if (v36
            || !sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
          {
            memmove(v3, v36, __len);
            return a1;
          }
        }
      }
      else if (v33 == 1)
      {
        v52 = 2 * a2[5];
        v53 = 2 * *(unsigned int *)(a1 + 20);
        while (v36
             || !sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
        {
          memmove(v3, v36, __len);
          v36 += v52;
          v3 = (_WORD *)((char *)v3 + v53);
          if (!--v59)
            goto LABEL_81;
        }
      }
      else
      {
        v37 = 0;
        __src = (char *)(2 * v24);
        v55 = a2[5];
        v56 = *(unsigned int *)(a1 + 20);
        while (1)
        {
          v57 = v37;
          v38 = 0;
          v58 = v36;
          v39 = (char *)v3;
          do
          {
            while (v36)
            {
              memmove(v39, v36, __len);
              v36 += 2 * v61;
              v39 += 2 * v25;
              if (++v38 == v35)
                goto LABEL_39;
            }
            sub_2109EDAB0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4);
            v40 = atomic_load((unsigned __int8 *)&qword_254A75F38);
            if ((v40 & 1) == 0 && __cxa_guard_acquire(&qword_254A75F38))
            {
              __cxa_atexit((void (*)(void *))sub_2109EDF34, &qword_254A75F00, &dword_21089F000);
              __cxa_guard_release(&qword_254A75F38);
            }
            if (byte_254A75F28)
              v41 = byte_254A75F30 == 0;
            else
              v41 = 0;
            if (!v41)
            {
              v42 = qword_254A75F00;
              v43 = unk_254A75F08;
              while (v42 != v43)
              {
                v45 = *(void (**)(uint64_t, const char *, uint64_t, void *, _QWORD))v42;
                v44 = *(_QWORD *)(v42 + 8);
                v42 += 16;
                v45(v44, "ptr != nullptr || size == 0", 27, &unk_210A01421, 0);
              }
            }
            v46 = atomic_load((unsigned __int8 *)&qword_254A75F38);
            if ((v46 & 1) == 0 && __cxa_guard_acquire(&qword_254A75F38))
            {
              __cxa_atexit((void (*)(void *))sub_2109EDF34, &qword_254A75F00, &dword_21089F000);
              __cxa_guard_release(&qword_254A75F38);
            }
            if (!byte_254A75F28)
              goto LABEL_92;
            qword_254A75F18(unk_254A75F20, "ptr != nullptr || size == 0", 27, &unk_210A01421, 0);
            memcpy(v39, 0, __len);
            v39 += 2 * v25;
            ++v38;
            v36 = __src;
          }
          while (v38 != v35);
          v36 = __src;
          if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
          {
            break;
          }
LABEL_39:
          memmove(v39, v36, __len);
          v36 = &v58[2 * v55];
          v3 += v56;
          v37 = v57 + 1;
          if (v57 + 1 == v59)
            goto LABEL_81;
        }
      }
    }
LABEL_92:
    abort();
  }
  v63 = *(_OWORD *)a2;
  v64 = *((_OWORD *)a2 + 1);
  v65 = *((_OWORD *)a2 + 2);
  v66 = *((_QWORD *)a2 + 6);
  sub_2109CF018((uint64_t)v67, (uint64_t)(a2 + 14));
  *(_OWORD *)a1 = v63;
  *(_OWORD *)(a1 + 16) = v64;
  *(_OWORD *)(a1 + 32) = v65;
  *(_OWORD *)(a1 + 80) = v68;
  *(_QWORD *)(a1 + 96) = v69;
  v4 = v67[0];
  *(_QWORD *)(a1 + 48) = v66;
  *(_QWORD *)(a1 + 56) = v4;
  v5 = *(void **)(a1 + 64);
  if (v5)
    free(v5);
  v6 = v67[2];
  *(_QWORD *)(a1 + 64) = v67[1];
  *(_QWORD *)(a1 + 72) = v6;
  return a1;
}

uint64_t sub_2109DB8A0(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  _WORD *v3;
  void *v4;
  BOOL v5;
  int v7;
  uint64_t v8;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  _WORD *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _WORD *v21;
  _WORD *v22;
  _WORD *v23;
  _WORD *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BOOL4 v48;
  _WORD *v49;
  __int16 *v50;
  uint64_t v51;
  unint64_t v52;
  _OWORD *v53;
  __int128 v54;
  __int16 v55;
  _BOOL4 v56;
  _WORD *v57;
  __int16 *v58;
  __int128 *v59;
  _OWORD *v60;
  unint64_t v61;
  __int128 v62;
  __int16 v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _BOOL4 v75;
  _WORD *v76;
  __int16 *v77;
  uint64_t v78;
  unint64_t v79;
  _OWORD *v80;
  __int128 v81;
  __int16 v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  _WORD *v86;
  __int16 *v87;
  __int128 *v88;
  _OWORD *v89;
  unint64_t v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  __int16 v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _BOOL4 v102;
  _WORD *v103;
  __int16 *v104;
  uint64_t v105;
  unint64_t v106;
  _OWORD *v107;
  __int128 v108;
  __int16 v109;
  _BOOL4 v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  _WORD *v114;
  __int16 *v115;
  __int128 *v116;
  _OWORD *v117;
  unint64_t v118;
  __int128 v119;
  __int16 v120;
  _BOOL4 v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  _WORD *v125;
  __int16 *v126;
  __int128 *v127;
  _OWORD *v128;
  unint64_t v129;
  __int128 v130;
  __int16 v131;
  uint64_t v132;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unsigned int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unsigned int v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  uint64_t v150;
  _QWORD v151[3];
  __int128 v152;
  uint64_t v153;

  v2 = a1;
  v3 = *(_WORD **)(a1 + 64);
  if (!v3 || *(_QWORD *)(a2 + 1) != *(_QWORD *)(a1 + 4) || *((_QWORD *)a2 + 2) != *(_QWORD *)(a1 + 16))
  {
    v147 = *(_OWORD *)a2;
    v148 = *((_OWORD *)a2 + 1);
    v149 = *((_OWORD *)a2 + 2);
    v150 = *((_QWORD *)a2 + 6);
    sub_2109CFA20((uint64_t)v151, (uint64_t)(a2 + 14));
    *(_OWORD *)v2 = v147;
    *(_OWORD *)(v2 + 16) = v148;
    *(_OWORD *)(v2 + 32) = v149;
    *(_QWORD *)(v2 + 48) = v150;
    *(_OWORD *)(v2 + 80) = v152;
    *(_QWORD *)(v2 + 96) = v153;
    v4 = *(void **)(v2 + 64);
    if (v4)
    {
      if (*(_DWORD *)(v2 + 88))
        v5 = *(_DWORD *)(v2 + 84) == 0;
      else
        v5 = 1;
      if (v5 || *(_DWORD *)(v2 + 80) == 0)
        v7 = 0;
      else
        v7 = *(_DWORD *)(v2 + 88);
      if (v7 * (*(_DWORD *)(v2 + 100) >> 1) == -1)
      {
        if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
        {
          abort();
        }
        v4 = *(void **)(v2 + 64);
        *(_QWORD *)(v2 + 56) = v151[0];
        if (!v4)
          goto LABEL_20;
      }
      else
      {
        *(_QWORD *)(v2 + 56) = v151[0];
      }
      free(v4);
    }
    else
    {
      *(_QWORD *)(v2 + 56) = v151[0];
    }
LABEL_20:
    v8 = v151[2];
    *(_QWORD *)(v2 + 64) = v151[1];
    *(_QWORD *)(v2 + 72) = v8;
    return v2;
  }
  if (a2[3] != 1 || *(_DWORD *)(a1 + 12) != 1)
  {
    if (*a2)
    {
      v11 = a2[1];
      if (v11)
      {
        v12 = a2[2];
        if (v12)
        {
          v13 = v11 - 1;
          v14 = (_WORD *)*((_QWORD *)a2 + 8);
          v15 = 2 * a2[4];
          v16 = 2 * *(unsigned int *)(a1 + 16);
          v17 = v12 - 1;
          if (v17)
          {
            v18 = *(unsigned int *)(a1 + 20);
            v19 = a2[5];
            if (v13)
            {
              v20 = 0;
              v21 = v3 + 2;
              v22 = v14 + 2;
              do
              {
                v23 = v22;
                v24 = v21;
                v25 = v13;
                do
                {
                  *(v24 - 2) = *(v23 - 2);
                  *(v24 - 1) = *(v23 - 1);
                  *v24 = *v23;
                  v24[1] = v23[1];
                  v24 = (_WORD *)((char *)v24 + v16);
                  v23 = (_WORD *)((char *)v23 + v15);
                  --v25;
                }
                while (v25);
                *(v24 - 2) = *(v23 - 2);
                *(v24 - 1) = *(v23 - 1);
                *v24 = *v23;
                v24[1] = v23[1];
                v14 += v19;
                v3 += v18;
                ++v20;
                v21 += v18;
                v22 += v19;
              }
              while (v20 != v17);
            }
            else
            {
              v92 = 2 * v19;
              v93 = 2 * v18;
              do
              {
                *v3 = *v14;
                v3[1] = v14[1];
                v3[2] = v14[2];
                v3[3] = v14[3];
                v14 = (_WORD *)((char *)v14 + v92);
                v3 = (_WORD *)((char *)v3 + v93);
                --v17;
              }
              while (v17);
            }
          }
          for (; v13; --v13)
          {
            *v3 = *v14;
            v3[1] = v14[1];
            v3[2] = v14[2];
            v3[3] = v14[3];
            v14 = (_WORD *)((char *)v14 + v15);
            v3 = (_WORD *)((char *)v3 + v16);
          }
          *v3 = *v14;
          v3[1] = v14[1];
          v3[2] = v14[2];
          v3[3] = v14[3];
        }
      }
    }
    return v2;
  }
  v26 = a2[4];
  v27 = *(unsigned int *)(a1 + 16);
  v28 = *a2;
  if ((_DWORD)v26 != (_DWORD)v27 || (_DWORD)v26 != (_DWORD)v28)
  {
    if (!(_DWORD)v28)
      return v2;
    v35 = a2[1];
    if (!v35)
      return v2;
    v36 = a2[2];
    if (!v36)
      return v2;
    v37 = v35 - 1;
    v38 = *((_QWORD *)a2 + 8);
    v39 = 2 * v27;
    v138 = v36 - 1;
    v144 = *a2;
    v143 = v35 - 1;
    v132 = a2[4];
    if (v36 == 1)
    {
      v44 = *(_QWORD *)(a1 + 64);
LABEL_105:
      if (v37)
      {
        v95 = 0;
        v96 = 2 * v132;
        v97 = (v28 - 1) & 0x7FFFFFFFFFFFFFFFLL;
        v98 = (v97 + 1) & 0xFFFFFFFFFFFFFFF0;
        v99 = 2 * v98;
        v100 = v44;
        v101 = v38;
        while (1)
        {
          if (!v101)
          {
            v102 = sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4);
            v37 = v143;
            v28 = v144;
            if (v102)
              goto LABEL_133;
          }
          v103 = (_WORD *)v100;
          v104 = (__int16 *)v101;
          if (v97 < 0xF)
            goto LABEL_147;
          v103 = (_WORD *)v100;
          v104 = (__int16 *)v101;
          if ((unint64_t)(v44 + v39 * v95 - (v38 + v96 * v95)) < 0x20)
            goto LABEL_147;
          v105 = 0;
          v103 = (_WORD *)(v100 + v99);
          v104 = (__int16 *)(v101 + v99);
          v106 = (v97 + 1) & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v107 = (_OWORD *)(v100 + v105);
            v108 = *(_OWORD *)(v101 + v105 + 16);
            *v107 = *(_OWORD *)(v101 + v105);
            v107[1] = v108;
            v105 += 32;
            v106 -= 16;
          }
          while (v106);
          if (v97 + 1 != v98)
          {
LABEL_147:
            do
            {
              v109 = *v104++;
              *v103++ = v109;
            }
            while (v104 != (__int16 *)(v101 + 2 * v28));
          }
          v101 += v96;
          v100 += v39;
          if ((_DWORD)++v95 == v37)
            goto LABEL_118;
        }
      }
      v100 = v44;
      v101 = v38;
LABEL_118:
      if (!v101)
      {
        v110 = sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4);
        v28 = v144;
        if (v110)
LABEL_133:
          abort();
      }
      v111 = (v28 - 1) & 0x7FFFFFFFFFFFFFFFLL;
      v2 = a1;
      if (v111 < 0xF || (unint64_t)(v100 - v101) < 0x20)
      {
        v114 = (_WORD *)v100;
        v115 = (__int16 *)v101;
      }
      else
      {
        v112 = v111 + 1;
        v113 = (v111 + 1) & 0xFFFFFFFFFFFFFFF0;
        v114 = (_WORD *)(v100 + 2 * v113);
        v115 = (__int16 *)(v101 + 2 * v113);
        v116 = (__int128 *)(v101 + 16);
        v117 = (_OWORD *)(v100 + 16);
        v118 = v113;
        do
        {
          v119 = *v116;
          *(v117 - 1) = *(v116 - 1);
          *v117 = v119;
          v116 += 2;
          v117 += 2;
          v118 -= 16;
        }
        while (v118);
        if (v112 == v113)
          return v2;
      }
      do
      {
        v120 = *v115++;
        *v114++ = v120;
      }
      while (v115 != (__int16 *)(v101 + 2 * v28));
      return v2;
    }
    v142 = 0;
    v40 = (v28 - 1) & 0x7FFFFFFFFFFFFFFFLL;
    v139 = 2 * a2[5];
    v140 = 2 * *(unsigned int *)(a1 + 20);
    v41 = 2 * v26;
    v146 = v40 + 1;
    v42 = (v40 + 1) & 0xFFFFFFFFFFFFFFF0;
    v43 = 2 * v42;
    v135 = *((_QWORD *)a2 + 8);
    v136 = *(_QWORD *)(a1 + 64);
    v44 = v136;
    while (1)
    {
      v141 = v38;
      v45 = v44;
      v46 = v38;
      if (v37)
      {
        v47 = 0;
        v45 = v44;
        v46 = v141;
        do
        {
          if (!v46)
          {
            v48 = sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4);
            v37 = v143;
            v28 = v144;
            if (v48)
              goto LABEL_133;
          }
          v49 = (_WORD *)v45;
          v50 = (__int16 *)v46;
          if (v40 < 0xF)
            goto LABEL_148;
          v49 = (_WORD *)v45;
          v50 = (__int16 *)v46;
          if ((unint64_t)(v136 + v140 * v142 + v39 * v47 - (v135 + v139 * v142 + v41 * v47)) < 0x20)
            goto LABEL_148;
          v51 = 0;
          v49 = (_WORD *)(v45 + v43);
          v50 = (__int16 *)(v46 + v43);
          v52 = (v40 + 1) & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v53 = (_OWORD *)(v45 + v51);
            v54 = *(_OWORD *)(v46 + v51 + 16);
            *v53 = *(_OWORD *)(v46 + v51);
            v53[1] = v54;
            v51 += 32;
            v52 -= 16;
          }
          while (v52);
          if (v146 != v42)
          {
LABEL_148:
            do
            {
              v55 = *v50++;
              *v49++ = v55;
            }
            while (v50 != (__int16 *)(v46 + 2 * v28));
          }
          v46 += v41;
          v45 += v39;
        }
        while ((_DWORD)++v47 != v37);
      }
      if (!v46)
      {
        v56 = sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4);
        v37 = v143;
        v28 = v144;
        if (v56)
          goto LABEL_133;
      }
      if (v40 < 0xF || (unint64_t)(v45 - v46) < 0x20)
      {
        v57 = (_WORD *)v45;
        v58 = (__int16 *)v46;
      }
      else
      {
        v57 = (_WORD *)(v45 + v43);
        v58 = (__int16 *)(v46 + v43);
        v59 = (__int128 *)(v46 + 16);
        v60 = (_OWORD *)(v45 + 16);
        v61 = (v40 + 1) & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v62 = *v59;
          *(v60 - 1) = *(v59 - 1);
          *v60 = v62;
          v59 += 2;
          v60 += 2;
          v61 -= 16;
        }
        while (v61);
        if (v146 == v42)
          goto LABEL_49;
      }
      do
      {
        v63 = *v58++;
        *v57++ = v63;
      }
      while (v58 != (__int16 *)(v46 + 2 * v28));
LABEL_49:
      v38 = v141 + v139;
      v44 += v140;
      if ((_DWORD)++v142 == v138)
        goto LABEL_105;
    }
  }
  v29 = a2[5];
  v30 = *(unsigned int *)(a1 + 20);
  v31 = a2[1];
  v32 = v31 * v26;
  if ((_DWORD)v29 == (_DWORD)v30 && (_DWORD)v29 == (_DWORD)v32)
  {
    v33 = a2[2] * v29;
    v34 = *((_QWORD *)a2 + 8);
    if (!(_DWORD)v33 || v34)
    {
      if (!(_DWORD)v33)
        return v2;
    }
    else
    {
      if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
      {
        goto LABEL_133;
      }
      v3 = *(_WORD **)(v2 + 64);
    }
    v83 = (v33 - 1) & 0x7FFFFFFFFFFFFFFFLL;
    if (v83 < 0xF || (unint64_t)v3 - v34 < 0x20)
    {
      v86 = v3;
      v87 = (__int16 *)v34;
    }
    else
    {
      v84 = v83 + 1;
      v85 = (v83 + 1) & 0xFFFFFFFFFFFFFFF0;
      v86 = &v3[v85];
      v87 = (__int16 *)(v34 + 2 * v85);
      v88 = (__int128 *)(v34 + 16);
      v89 = v3 + 8;
      v90 = v85;
      do
      {
        v91 = *v88;
        *(v89 - 1) = *(v88 - 1);
        *v89 = v91;
        v88 += 2;
        v89 += 2;
        v90 -= 16;
      }
      while (v90);
      if (v84 == v85)
        return v2;
    }
    do
    {
      v94 = *v87++;
      *v86++ = v94;
    }
    while (v87 != (__int16 *)(v34 + 2 * v33));
    return v2;
  }
  if ((_DWORD)v26)
  {
    if (v31)
    {
      v64 = a2[2];
      if (v64)
      {
        v65 = *((_QWORD *)a2 + 8);
        v66 = v64 - 1;
        v145 = v32;
        if (v64 == 1)
        {
          v134 = a1;
          v70 = *(_QWORD *)(a1 + 64);
          v74 = *((_QWORD *)a2 + 8);
LABEL_130:
          if (!(_DWORD)v32 || v74)
          {
            v2 = v134;
            if (!(_DWORD)v32)
              return v2;
          }
          else
          {
            v121 = sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4);
            v32 = v145;
            v2 = v134;
            if (v121)
              goto LABEL_133;
          }
          v122 = (v32 - 1) & 0x7FFFFFFFFFFFFFFFLL;
          if (v122 < 0xF || (unint64_t)(v70 - v74) < 0x20)
          {
            v125 = (_WORD *)v70;
            v126 = (__int16 *)v74;
          }
          else
          {
            v123 = v122 + 1;
            v124 = (v122 + 1) & 0xFFFFFFFFFFFFFFF0;
            v125 = (_WORD *)(v70 + 2 * v124);
            v126 = (__int16 *)(v74 + 2 * v124);
            v127 = (__int128 *)(v74 + 16);
            v128 = (_OWORD *)(v70 + 16);
            v129 = v124;
            do
            {
              v130 = *v127;
              *(v128 - 1) = *(v127 - 1);
              *v128 = v130;
              v127 += 2;
              v128 += 2;
              v129 -= 16;
            }
            while (v129);
            if (v123 == v124)
              return v2;
          }
          do
          {
            v131 = *v126++;
            *v125++ = v131;
          }
          while (v126 != (__int16 *)(v74 + 2 * v32));
          return v2;
        }
        if ((_DWORD)v32)
        {
          v134 = a1;
          v67 = 0;
          v68 = 2 * v30;
          v69 = 2 * v29;
          v70 = *(_QWORD *)(a1 + 64);
          v71 = (v32 - 1) & 0x7FFFFFFFFFFFFFFFLL;
          v72 = (v71 + 1) & 0xFFFFFFFFFFFFFFF0;
          v73 = 2 * v72;
          v137 = v70;
          v74 = *((_QWORD *)a2 + 8);
          while (1)
          {
            if (!v74)
            {
              v75 = sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4);
              v32 = v145;
              if (v75)
                goto LABEL_133;
            }
            v76 = (_WORD *)v70;
            v77 = (__int16 *)v74;
            if (v71 < 0xF)
              goto LABEL_149;
            v76 = (_WORD *)v70;
            v77 = (__int16 *)v74;
            if ((unint64_t)(v137 + v68 * v67 - (v65 + v69 * v67)) < 0x20)
              goto LABEL_149;
            v78 = 0;
            v76 = (_WORD *)(v70 + v73);
            v77 = (__int16 *)(v74 + v73);
            v79 = (v71 + 1) & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v80 = (_OWORD *)(v70 + v78);
              v81 = *(_OWORD *)(v74 + v78 + 16);
              *v80 = *(_OWORD *)(v74 + v78);
              v80[1] = v81;
              v78 += 32;
              v79 -= 16;
            }
            while (v79);
            if (v71 + 1 != v72)
            {
LABEL_149:
              do
              {
                v82 = *v77++;
                *v76++ = v82;
              }
              while (v77 != (__int16 *)(v74 + 2 * v32));
            }
            v74 += v69;
            v70 += v68;
            if ((_DWORD)++v67 == v66)
              goto LABEL_130;
          }
        }
      }
    }
  }
  return v2;
}

void sub_2109DC2BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_2109C0A00((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2109DC2D0(uint64_t a1, unsigned int *a2)
{
  _DWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  _DWORD *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  const void *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  char *v36;
  int v37;
  int v38;
  char *v39;
  unsigned __int8 v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, const char *, uint64_t, void *, _QWORD);
  unsigned __int8 v46;
  unsigned int v47;
  char *v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  char *v58;
  unsigned int v59;
  char *__src;
  uint64_t v61;
  uint64_t __len;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  _QWORD v67[3];
  __int128 v68;
  uint64_t v69;

  v3 = *(_DWORD **)(a1 + 64);
  if (v3 && *(_QWORD *)(a2 + 1) == *(_QWORD *)(a1 + 4) && *((_QWORD *)a2 + 2) == *(_QWORD *)(a1 + 16))
  {
    if (a2[3] != 1 || *(_DWORD *)(a1 + 12) != 1)
    {
      if (!*a2)
        return a1;
      v9 = a2[1];
      if (!v9)
        return a1;
      v10 = a2[2];
      if (!v10)
        return a1;
      v11 = v9 - 1;
      v12 = a2[4];
      v13 = *(unsigned int *)(a1 + 16);
      v14 = (_DWORD *)*((_QWORD *)a2 + 8);
      v15 = v10 - 1;
      if (v15)
      {
        v16 = *(unsigned int *)(a1 + 20);
        v17 = a2[5];
        if (!v11)
        {
          do
          {
            *v3 = *v14;
            v3[1] = v14[1];
            v3[2] = v14[2];
            v3[3] = v14[3];
            v14 += v17;
            v3 += v16;
            --v15;
          }
          while (v15);
LABEL_71:
          *v3 = *v14;
          v3[1] = v14[1];
          v3[2] = v14[2];
          v3[3] = v14[3];
          return a1;
        }
        v18 = 0;
        v19 = v3 + 2;
        v20 = v14 + 2;
        do
        {
          v21 = v20;
          v22 = v19;
          v23 = v11;
          do
          {
            *(v22 - 2) = *(v21 - 2);
            *(v22 - 1) = *(v21 - 1);
            *v22 = *v21;
            v22[1] = v21[1];
            v22 += v13;
            v21 += v12;
            --v23;
          }
          while (v23);
          *(v22 - 2) = *(v21 - 2);
          *(v22 - 1) = *(v21 - 1);
          *v22 = *v21;
          v22[1] = v21[1];
          v14 += v17;
          v3 += v16;
          ++v18;
          v19 += v16;
          v20 += v17;
        }
        while (v18 != v15);
      }
      for (; v11; --v11)
      {
        *v3 = *v14;
        v3[1] = v14[1];
        v3[2] = v14[2];
        v3[3] = v14[3];
        v14 += v12;
        v3 += v13;
      }
      goto LABEL_71;
    }
    v24 = a2[4];
    v25 = *(unsigned int *)(a1 + 16);
    v26 = *a2;
    if ((_DWORD)v24 == (_DWORD)v25 && (_DWORD)v24 == (_DWORD)v26)
    {
      v27 = a2[5];
      v28 = *(unsigned int *)(a1 + 20);
      v29 = a2[1];
      v30 = v29 * v24;
      if ((_DWORD)v27 == (_DWORD)v28 && (_DWORD)v27 == (_DWORD)v30)
      {
        v31 = v27 * a2[2];
        v32 = (const void *)*((_QWORD *)a2 + 8);
        if (!(_DWORD)v31 || v32)
        {
          if (!(_DWORD)v31)
            return a1;
LABEL_69:
          memmove(v3, v32, 4 * v31);
          return a1;
        }
        if (!sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
        {
          v3 = *(_DWORD **)(a1 + 64);
          goto LABEL_69;
        }
      }
      else
      {
        if (!(_DWORD)v24)
          return a1;
        if (!v29)
          return a1;
        v47 = a2[2];
        if (!v47)
          return a1;
        v48 = (char *)*((_QWORD *)a2 + 8);
        v49 = v47 - 1;
        if (v47 == 1)
        {
LABEL_72:
          if (!(_DWORD)v30 || v48)
          {
            if (!(_DWORD)v30)
              return a1;
          }
          else if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
          {
            goto LABEL_92;
          }
          memmove(v3, v48, 4 * v30);
          return a1;
        }
        if (!(_DWORD)v30)
          return a1;
        v50 = 4 * v27;
        v51 = 4 * v28;
        while (v48
             || !sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
        {
          memmove(v3, v48, 4 * v30);
          v48 += v50;
          v3 = (_DWORD *)((char *)v3 + v51);
          if (!--v49)
            goto LABEL_72;
        }
      }
    }
    else
    {
      if (!(_DWORD)v26)
        return a1;
      v33 = a2[1];
      if (!v33)
        return a1;
      v34 = a2[2];
      if (!v34)
        return a1;
      v35 = v33 - 1;
      v36 = (char *)*((_QWORD *)a2 + 8);
      v61 = a2[4];
      __len = 4 * v26;
      v59 = v34 - 1;
      if (v34 == 1)
      {
LABEL_81:
        if (v35)
        {
          v54 = 4 * v25;
          while (v36
               || !sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
          {
            memmove(v3, v36, __len);
            v36 += 4 * v61;
            v3 = (_DWORD *)((char *)v3 + v54);
            if (!--v35)
              goto LABEL_87;
          }
        }
        else
        {
LABEL_87:
          if (v36
            || !sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
          {
            memmove(v3, v36, __len);
            return a1;
          }
        }
      }
      else if (v33 == 1)
      {
        v52 = 4 * a2[5];
        v53 = 4 * *(unsigned int *)(a1 + 20);
        while (v36
             || !sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
        {
          memmove(v3, v36, __len);
          v36 += v52;
          v3 = (_DWORD *)((char *)v3 + v53);
          if (!--v59)
            goto LABEL_81;
        }
      }
      else
      {
        v37 = 0;
        __src = (char *)(4 * v24);
        v55 = a2[5];
        v56 = *(unsigned int *)(a1 + 20);
        while (1)
        {
          v57 = v37;
          v38 = 0;
          v58 = v36;
          v39 = (char *)v3;
          do
          {
            while (v36)
            {
              memmove(v39, v36, __len);
              v36 += 4 * v61;
              v39 += 4 * v25;
              if (++v38 == v35)
                goto LABEL_39;
            }
            sub_2109EDAB0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4);
            v40 = atomic_load((unsigned __int8 *)&qword_254A75F38);
            if ((v40 & 1) == 0 && __cxa_guard_acquire(&qword_254A75F38))
            {
              __cxa_atexit((void (*)(void *))sub_2109EDF34, &qword_254A75F00, &dword_21089F000);
              __cxa_guard_release(&qword_254A75F38);
            }
            if (byte_254A75F28)
              v41 = byte_254A75F30 == 0;
            else
              v41 = 0;
            if (!v41)
            {
              v42 = qword_254A75F00;
              v43 = unk_254A75F08;
              while (v42 != v43)
              {
                v45 = *(void (**)(uint64_t, const char *, uint64_t, void *, _QWORD))v42;
                v44 = *(_QWORD *)(v42 + 8);
                v42 += 16;
                v45(v44, "ptr != nullptr || size == 0", 27, &unk_210A01421, 0);
              }
            }
            v46 = atomic_load((unsigned __int8 *)&qword_254A75F38);
            if ((v46 & 1) == 0 && __cxa_guard_acquire(&qword_254A75F38))
            {
              __cxa_atexit((void (*)(void *))sub_2109EDF34, &qword_254A75F00, &dword_21089F000);
              __cxa_guard_release(&qword_254A75F38);
            }
            if (!byte_254A75F28)
              goto LABEL_92;
            qword_254A75F18(unk_254A75F20, "ptr != nullptr || size == 0", 27, &unk_210A01421, 0);
            memcpy(v39, 0, __len);
            v39 += 4 * v25;
            ++v38;
            v36 = __src;
          }
          while (v38 != v35);
          v36 = __src;
          if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
          {
            break;
          }
LABEL_39:
          memmove(v39, v36, __len);
          v36 = &v58[4 * v55];
          v3 += v56;
          v37 = v57 + 1;
          if (v57 + 1 == v59)
            goto LABEL_81;
        }
      }
    }
LABEL_92:
    abort();
  }
  v63 = *(_OWORD *)a2;
  v64 = *((_OWORD *)a2 + 1);
  v65 = *((_OWORD *)a2 + 2);
  v66 = *((_QWORD *)a2 + 6);
  sub_2109CFE3C((uint64_t)v67, (uint64_t)(a2 + 14));
  *(_OWORD *)a1 = v63;
  *(_OWORD *)(a1 + 16) = v64;
  *(_OWORD *)(a1 + 32) = v65;
  *(_OWORD *)(a1 + 80) = v68;
  *(_QWORD *)(a1 + 96) = v69;
  v4 = v67[0];
  *(_QWORD *)(a1 + 48) = v66;
  *(_QWORD *)(a1 + 56) = v4;
  v5 = *(void **)(a1 + 64);
  if (v5)
    free(v5);
  v6 = v67[2];
  *(_QWORD *)(a1 + 64) = v67[1];
  *(_QWORD *)(a1 + 72) = v6;
  return a1;
}

uint64_t sub_2109DCA6C(uint64_t a1, _DWORD *a2)
{
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  BOOL v11;
  int v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  int v20;
  unint64_t v21;
  _BYTE memptr[12];
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  if (a2[1])
    v3 = *a2 == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)a2;
  if (v3)
    v4 = 0;
  *(_DWORD *)memptr = 2;
  *(_QWORD *)&memptr[4] = v4;
  v5 = 2 * ((_DWORD)v4 != 0);
  if (HIDWORD(v4))
    v6 = (v5 * *(_DWORD *)&memptr[4]);
  else
    v6 = 0;
  v7 = v5 & 0x1FFFFFFFFLL | ((unint64_t)(v6 >> 1) << 33);
  v8 = __PAIR64__(*(unsigned int *)&memptr[4], 2);
  *(_DWORD *)memptr = 1;
  *(_QWORD *)&memptr[4] = v7;
  v9 = *(_QWORD *)memptr;
  *(_QWORD *)a1 = v8;
  *(_DWORD *)(a1 + 8) = HIDWORD(v4);
  *(_QWORD *)(a1 + 12) = v9;
  *(_DWORD *)(a1 + 20) = v6;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 52) = 0;
  if (HIDWORD(v8))
    v10 = (_DWORD)v8 == 0;
  else
    v10 = 1;
  v11 = v10 || HIDWORD(v4) == 0;
  v12 = v11;
  if (v11)
    v13 = 0;
  else
    v13 = HIDWORD(v4);
  v14 = 2 * v6;
  if ((v14 & (v14 - 1)) != 0)
    v15 = 1;
  else
    v15 = v14 - 1;
  v16 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
  v18 = v17 | (v17 >> 16) | ((v17 | (v17 >> 16)) >> 32);
  if (v18 + 1 > 8)
    v19 = v18 + 1;
  else
    v19 = 8;
  *(_QWORD *)(a1 + 56) = 2 * (v13 * v6);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = v19;
  if (v13 * (_DWORD)v6)
  {
    *(_QWORD *)memptr = 0;
    v20 = malloc_type_posix_memalign((void **)memptr, v19, 2 * (v13 * v6), 0x1F88E90uLL);
    if (v20)
      sub_2109E756C(v20, *(_QWORD *)(a1 + 72), 2 * (v13 * v6));
    *(_QWORD *)(a1 + 64) = *(_QWORD *)memptr;
  }
  if (v12)
    v21 = 0;
  else
    v21 = v8;
  *(_QWORD *)(a1 + 80) = v21;
  *(_DWORD *)(a1 + 88) = v13;
  *(_QWORD *)(a1 + 92) = (2 * v9) & 0xFFFFFFFEFFFFFFFELL;
  *(_DWORD *)(a1 + 100) = 2 * v6;
  return a1;
}

uint64_t sub_2109DCC28(uint64_t a1, _DWORD *a2)
{
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  BOOL v11;
  int v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  int v21;
  unint64_t v22;
  _BYTE memptr[12];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if (a2[1])
    v3 = *a2 == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)a2;
  if (v3)
    v4 = 0;
  *(_DWORD *)memptr = 2;
  *(_QWORD *)&memptr[4] = v4;
  v5 = 2 * ((_DWORD)v4 != 0);
  if (HIDWORD(v4))
    v6 = (v5 * *(_DWORD *)&memptr[4]);
  else
    v6 = 0;
  v7 = v5 & 0x1FFFFFFFFLL | ((unint64_t)(v6 >> 1) << 33);
  v8 = __PAIR64__(*(unsigned int *)&memptr[4], 2);
  *(_DWORD *)memptr = 1;
  *(_QWORD *)&memptr[4] = v7;
  v9 = *(_QWORD *)memptr;
  *(_QWORD *)a1 = v8;
  *(_DWORD *)(a1 + 8) = HIDWORD(v4);
  *(_QWORD *)(a1 + 12) = v9;
  *(_DWORD *)(a1 + 20) = v6;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 52) = 0;
  if (HIDWORD(v8))
    v10 = (_DWORD)v8 == 0;
  else
    v10 = 1;
  v11 = v10 || HIDWORD(v4) == 0;
  v12 = v11;
  if (v11)
    v13 = 0;
  else
    v13 = HIDWORD(v4);
  v14 = 4 * v6;
  v15 = v14 - 1;
  v3 = (v14 & (v14 - 1)) == 0;
  v16 = 3;
  if (v3)
    v16 = v15;
  v17 = v16 | (v16 >> 1) | ((v16 | (v16 >> 1)) >> 2);
  v18 = v17 | (v17 >> 4) | ((v17 | (v17 >> 4)) >> 8);
  v19 = v18 | (v18 >> 16) | ((v18 | (v18 >> 16)) >> 32);
  if (v19 + 1 > 8)
    v20 = v19 + 1;
  else
    v20 = 8;
  *(_QWORD *)(a1 + 56) = 4 * (v13 * v6);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = v20;
  if (v13 * (_DWORD)v6)
  {
    *(_QWORD *)memptr = 0;
    v21 = malloc_type_posix_memalign((void **)memptr, v20, 4 * (v13 * v6), 0x1F88E90uLL);
    if (v21)
      sub_2109E756C(v21, *(_QWORD *)(a1 + 72), 4 * (v13 * v6));
    *(_QWORD *)(a1 + 64) = *(_QWORD *)memptr;
  }
  if (v12)
    v22 = 0;
  else
    v22 = v8;
  *(_QWORD *)(a1 + 80) = v22;
  *(_DWORD *)(a1 + 88) = v13;
  *(_QWORD *)(a1 + 92) = (4 * v9) & 0xFFFFFFFCFFFFFFFCLL;
  *(_DWORD *)(a1 + 100) = 4 * v6;
  return a1;
}

uint64_t sub_2109DCDE8(uint64_t a1, _DWORD *a2)
{
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  BOOL v12;
  int v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  int v21;
  unint64_t v22;
  _BYTE memptr[12];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if (a2[1])
    v3 = *a2 == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)a2;
  if (v3)
    v4 = 0;
  *(_DWORD *)memptr = 3;
  *(_QWORD *)&memptr[4] = v4;
  if ((_DWORD)v4)
    v5 = 3;
  else
    v5 = 0;
  v6 = HIDWORD(*(_QWORD *)&memptr[4]);
  if (HIDWORD(*(_QWORD *)&memptr[4]))
    v7 = (v5 * *(_DWORD *)&memptr[4]);
  else
    v7 = 0;
  v8 = v5 | (v7 << 32);
  v9 = __PAIR64__(*(unsigned int *)&memptr[4], 3);
  *(_DWORD *)memptr = 1;
  *(_QWORD *)&memptr[4] = v8;
  v10 = *(_QWORD *)memptr;
  *(_QWORD *)a1 = v9;
  *(_DWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 12) = v10;
  *(_DWORD *)(a1 + 20) = v7;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v8;
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 52) = 0;
  if (HIDWORD(v9))
    v11 = (_DWORD)v9 == 0;
  else
    v11 = 1;
  v12 = v11 || (_DWORD)v6 == 0;
  v13 = v12;
  if (v12)
    v14 = 0;
  else
    v14 = v6;
  v15 = 2 * v7;
  if ((v15 & (v15 - 1)) != 0)
    v16 = 1;
  else
    v16 = v15 - 1;
  v17 = v16 | (v16 >> 1) | ((v16 | (v16 >> 1)) >> 2);
  v18 = v17 | (v17 >> 4) | ((v17 | (v17 >> 4)) >> 8);
  v19 = v18 | (v18 >> 16) | ((v18 | (v18 >> 16)) >> 32);
  if (v19 + 1 > 8)
    v20 = v19 + 1;
  else
    v20 = 8;
  *(_QWORD *)(a1 + 56) = 2 * (v14 * v7);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = v20;
  if (v14 * (_DWORD)v7)
  {
    *(_QWORD *)memptr = 0;
    v21 = malloc_type_posix_memalign((void **)memptr, v20, 2 * (v14 * v7), 0x1F88E90uLL);
    if (v21)
      sub_2109E756C(v21, *(_QWORD *)(a1 + 72), 2 * (v14 * v7));
    *(_QWORD *)(a1 + 64) = *(_QWORD *)memptr;
  }
  if (v13)
    v22 = 0;
  else
    v22 = v9;
  *(_QWORD *)(a1 + 80) = v22;
  *(_DWORD *)(a1 + 88) = v14;
  *(_QWORD *)(a1 + 92) = (2 * v10) & 0xFFFFFFFEFFFFFFFELL;
  *(_DWORD *)(a1 + 100) = 2 * v7;
  return a1;
}

uint64_t sub_2109DCF9C(uint64_t a1, _DWORD *a2)
{
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  BOOL v12;
  int v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  int v21;
  unint64_t v22;
  _BYTE memptr[12];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if (a2[1])
    v3 = *a2 == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)a2;
  if (v3)
    v4 = 0;
  *(_DWORD *)memptr = 3;
  *(_QWORD *)&memptr[4] = v4;
  if ((_DWORD)v4)
    v5 = 3;
  else
    v5 = 0;
  v6 = HIDWORD(*(_QWORD *)&memptr[4]);
  if (HIDWORD(*(_QWORD *)&memptr[4]))
    v7 = (v5 * *(_DWORD *)&memptr[4]);
  else
    v7 = 0;
  v8 = v5 | (v7 << 32);
  v9 = __PAIR64__(*(unsigned int *)&memptr[4], 3);
  *(_DWORD *)memptr = 1;
  *(_QWORD *)&memptr[4] = v8;
  v10 = *(_QWORD *)memptr;
  *(_QWORD *)a1 = __PAIR64__(v4, 3);
  *(_DWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 12) = v10;
  *(_DWORD *)(a1 + 20) = v7;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v8;
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 52) = 0;
  if (__PAIR64__(v4, 3) >> 32)
    v11 = (_DWORD)v9 == 0;
  else
    v11 = 1;
  v12 = v11 || (_DWORD)v6 == 0;
  v13 = v12;
  if (v12)
    v14 = 0;
  else
    v14 = v6;
  v15 = 4 * v7;
  if ((v15 & (v15 - 1)) != 0)
    v16 = 3;
  else
    v16 = v15 - 1;
  v17 = v16 | (v16 >> 1) | ((v16 | (v16 >> 1)) >> 2);
  v18 = v17 | (v17 >> 4) | ((v17 | (v17 >> 4)) >> 8);
  v19 = v18 | (v18 >> 16) | ((v18 | (v18 >> 16)) >> 32);
  if (v19 + 1 > 8)
    v20 = v19 + 1;
  else
    v20 = 8;
  *(_QWORD *)(a1 + 56) = 4 * (v14 * v7);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = v20;
  if (v14 * (_DWORD)v7)
  {
    *(_QWORD *)memptr = 0;
    v21 = malloc_type_posix_memalign((void **)memptr, v20, 4 * (v14 * v7), 0x1F88E90uLL);
    if (v21)
      sub_2109E756C(v21, *(_QWORD *)(a1 + 72), 4 * (v14 * v7));
    *(_QWORD *)(a1 + 64) = *(_QWORD *)memptr;
  }
  if (v13)
    v22 = 0;
  else
    v22 = v9;
  *(_QWORD *)(a1 + 80) = v22;
  *(_DWORD *)(a1 + 88) = v14;
  *(_QWORD *)(a1 + 92) = (4 * v10) & 0xFFFFFFFCFFFFFFFCLL;
  *(_DWORD *)(a1 + 100) = 4 * v7;
  return a1;
}

uint64_t sub_2109DD150(uint64_t a1, _DWORD *a2)
{
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  BOOL v11;
  int v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  int v20;
  unint64_t v21;
  _BYTE memptr[12];
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  if (a2[1])
    v3 = *a2 == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)a2;
  if (v3)
    v4 = 0;
  *(_DWORD *)memptr = 4;
  *(_QWORD *)&memptr[4] = v4;
  v5 = 4 * ((_DWORD)v4 != 0);
  if (HIDWORD(v4))
    v6 = (v5 * *(_DWORD *)&memptr[4]);
  else
    v6 = 0;
  v7 = v5 & 0x3FFFFFFFFLL | ((unint64_t)(v6 >> 2) << 34);
  v8 = __PAIR64__(*(unsigned int *)&memptr[4], 4);
  *(_DWORD *)memptr = 1;
  *(_QWORD *)&memptr[4] = v7;
  v9 = *(_QWORD *)memptr;
  *(_QWORD *)a1 = v8;
  *(_DWORD *)(a1 + 8) = HIDWORD(v4);
  *(_QWORD *)(a1 + 12) = v9;
  *(_DWORD *)(a1 + 20) = v6;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 52) = 0;
  if (HIDWORD(v8))
    v10 = (_DWORD)v8 == 0;
  else
    v10 = 1;
  v11 = v10 || HIDWORD(v4) == 0;
  v12 = v11;
  if (v11)
    v13 = 0;
  else
    v13 = HIDWORD(v4);
  v14 = 2 * v6;
  if ((v14 & (v14 - 1)) != 0)
    v15 = 1;
  else
    v15 = v14 - 1;
  v16 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
  v18 = v17 | (v17 >> 16) | ((v17 | (v17 >> 16)) >> 32);
  if (v18 + 1 > 8)
    v19 = v18 + 1;
  else
    v19 = 8;
  *(_QWORD *)(a1 + 56) = 2 * (v13 * v6);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = v19;
  if (v13 * (_DWORD)v6)
  {
    *(_QWORD *)memptr = 0;
    v20 = malloc_type_posix_memalign((void **)memptr, v19, 2 * (v13 * v6), 0x1F88E90uLL);
    if (v20)
      sub_2109E756C(v20, *(_QWORD *)(a1 + 72), 2 * (v13 * v6));
    *(_QWORD *)(a1 + 64) = *(_QWORD *)memptr;
  }
  if (v12)
    v21 = 0;
  else
    v21 = v8;
  *(_QWORD *)(a1 + 80) = v21;
  *(_DWORD *)(a1 + 88) = v13;
  *(_QWORD *)(a1 + 92) = (2 * v9) & 0xFFFFFFFEFFFFFFFELL;
  *(_DWORD *)(a1 + 100) = 2 * v6;
  return a1;
}

uint64_t sub_2109DD30C(uint64_t a1, _DWORD *a2)
{
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  BOOL v11;
  int v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  int v21;
  unint64_t v22;
  _BYTE memptr[12];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if (a2[1])
    v3 = *a2 == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)a2;
  if (v3)
    v4 = 0;
  *(_DWORD *)memptr = 4;
  *(_QWORD *)&memptr[4] = v4;
  v5 = 4 * ((_DWORD)v4 != 0);
  if (HIDWORD(v4))
    v6 = (v5 * *(_DWORD *)&memptr[4]);
  else
    v6 = 0;
  v7 = v5 & 0x3FFFFFFFFLL | ((unint64_t)(v6 >> 2) << 34);
  v8 = __PAIR64__(*(unsigned int *)&memptr[4], 4);
  *(_DWORD *)memptr = 1;
  *(_QWORD *)&memptr[4] = v7;
  v9 = *(_QWORD *)memptr;
  *(_QWORD *)a1 = v8;
  *(_DWORD *)(a1 + 8) = HIDWORD(v4);
  *(_QWORD *)(a1 + 12) = v9;
  *(_DWORD *)(a1 + 20) = v6;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 52) = 0;
  if (HIDWORD(v8))
    v10 = (_DWORD)v8 == 0;
  else
    v10 = 1;
  v11 = v10 || HIDWORD(v4) == 0;
  v12 = v11;
  if (v11)
    v13 = 0;
  else
    v13 = HIDWORD(v4);
  v14 = 4 * v6;
  v15 = v14 - 1;
  v3 = (v14 & (v14 - 1)) == 0;
  v16 = 3;
  if (v3)
    v16 = v15;
  v17 = v16 | (v16 >> 1) | ((v16 | (v16 >> 1)) >> 2);
  v18 = v17 | (v17 >> 4) | ((v17 | (v17 >> 4)) >> 8);
  v19 = v18 | (v18 >> 16) | ((v18 | (v18 >> 16)) >> 32);
  if (v19 + 1 > 8)
    v20 = v19 + 1;
  else
    v20 = 8;
  *(_QWORD *)(a1 + 56) = 4 * (v13 * v6);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = v20;
  if (v13 * (_DWORD)v6)
  {
    *(_QWORD *)memptr = 0;
    v21 = malloc_type_posix_memalign((void **)memptr, v20, 4 * (v13 * v6), 0x1F88E90uLL);
    if (v21)
      sub_2109E756C(v21, *(_QWORD *)(a1 + 72), 4 * (v13 * v6));
    *(_QWORD *)(a1 + 64) = *(_QWORD *)memptr;
  }
  if (v12)
    v22 = 0;
  else
    v22 = v8;
  *(_QWORD *)(a1 + 80) = v22;
  *(_DWORD *)(a1 + 88) = v13;
  *(_QWORD *)(a1 + 92) = (4 * v9) & 0xFFFFFFFCFFFFFFFCLL;
  *(_DWORD *)(a1 + 100) = 4 * v6;
  return a1;
}

uint64_t sub_2109DD4CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v12;
  int __dst;

  memcpy(&v12, (const void *)(a3 + 4 * a2 - 8), sizeof(v12));
  *(_QWORD *)a1 = v12;
  memcpy(&__dst, (const void *)(a5 + 4 * a4 - 4), sizeof(__dst));
  *(_DWORD *)(a1 + 8) = __dst * a6;
  if (a2 != a4
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/src/Size.cpp", 37, (uint64_t)"shape.size() == value_stride.size()", 35, (uint64_t)&unk_210A09D67, 0, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
  return a1;
}

_QWORD *sub_2109DD590(_QWORD *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;

  v3 = *(uint64_t **)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  *a1 = &off_24CA84E68;
  a1[1] = v3;
  a1[2] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v3 = (uint64_t *)a1[1];
  }
  *a1 = &off_24CA84D00;
  if (v3)
  {
    v8 = *v3;
    v7 = (std::__shared_weak_count *)v3[1];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          return a1;
        goto LABEL_12;
      }
    }
    if (v8)
LABEL_12:
      sub_2109E4220(a1[1]);
  }
  return a1;
}

void sub_2109DD654(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *v1 = v2;
  v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2109DD69C(_QWORD *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;

  v3 = *(uint64_t **)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  *a1 = &off_24CA84E68;
  a1[1] = v3;
  a1[2] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v3 = (uint64_t *)a1[1];
  }
  *a1 = &off_24CA84D00;
  if (v3)
  {
    v8 = *v3;
    v7 = (std::__shared_weak_count *)v3[1];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          return a1;
        goto LABEL_12;
      }
    }
    if (v8)
LABEL_12:
      sub_2109E4220(a1[1]);
  }
  return a1;
}

void sub_2109DD760(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *v1 = v2;
  v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2109DD7A8(_QWORD *a1)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = (uint64_t *)a1[1];
  if (v2)
  {
    v4 = *v2;
    v3 = (std::__shared_weak_count *)v2[1];
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
        if (!v4)
          goto LABEL_9;
        goto LABEL_8;
      }
    }
    if (v4)
LABEL_8:
      sub_2109E43F4(a1[1]);
  }
LABEL_9:
  *a1 = &off_24CA84E68;
  v8 = (std::__shared_weak_count *)a1[2];
  if (!v8)
    return a1;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
    return a1;
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void sub_2109DD894(_QWORD *a1)
{
  sub_2109DD7A8(a1);
  JUMPOUT(0x212BCC6FCLL);
}

uint64_t sub_2109DD8B8(uint64_t a1, unsigned int a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t **v14;
  uint64_t *v15;

  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v6)
        goto LABEL_9;
    }
  }
  if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurface/src/IOSurfaceRef.cpp", 249, (uint64_t)"IsValid()", 9, (uint64_t)&unk_210A09DDD, 0, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
LABEL_9:
  v10 = *(_QWORD *)(a1 + 8);
  v13 = v10;
  v11 = atomic_load((unint64_t *)(v10 + 104));
  if (v11 != -1)
  {
    v15 = &v13;
    v14 = &v15;
    std::__call_once((std::once_flag::_State_type *)(v10 + 104), &v14, (void (__cdecl *)(void *))sub_2109E026C);
  }
  return *(_QWORD *)(*(_QWORD *)(v10 + 112) + 8 * a2);
}

_QWORD *sub_2109DD9BC(_QWORD *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;

  v3 = *(uint64_t **)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  *a1 = &off_24CA84E68;
  a1[1] = v3;
  a1[2] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v3 = (uint64_t *)a1[1];
  }
  *a1 = &off_24CA84D20;
  if (v3)
  {
    v8 = *v3;
    v7 = (std::__shared_weak_count *)v3[1];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          return a1;
        goto LABEL_12;
      }
    }
    if (v8)
LABEL_12:
      sub_2109E430C(a1[1]);
  }
  return a1;
}

void sub_2109DDA80(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *v1 = v2;
  v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2109DDAC8(_QWORD *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;

  v3 = *(uint64_t **)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  *a1 = &off_24CA84E68;
  a1[1] = v3;
  a1[2] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v3 = (uint64_t *)a1[1];
  }
  *a1 = &off_24CA84D20;
  if (v3)
  {
    v8 = *v3;
    v7 = (std::__shared_weak_count *)v3[1];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          return a1;
        goto LABEL_12;
      }
    }
    if (v8)
LABEL_12:
      sub_2109E430C(a1[1]);
  }
  return a1;
}

void sub_2109DDB8C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *v1 = v2;
  v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2109DDBD4(_QWORD *a1)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = (uint64_t *)a1[1];
  if (v2)
  {
    v4 = *v2;
    v3 = (std::__shared_weak_count *)v2[1];
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
        if (!v4)
          goto LABEL_9;
        goto LABEL_8;
      }
    }
    if (v4)
LABEL_8:
      sub_2109E44E0(a1[1]);
  }
LABEL_9:
  *a1 = &off_24CA84E68;
  v8 = (std::__shared_weak_count *)a1[2];
  if (!v8)
    return a1;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
    return a1;
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void sub_2109DDCC0(_QWORD *a1)
{
  sub_2109DDBD4(a1);
  JUMPOUT(0x212BCC6FCLL);
}

__IOSurface *sub_2109DDCE4@<X0>(IOSurfaceRef *a1@<X0>, _QWORD *a2@<X8>)
{
  __IOSurface *result;
  size_t PlaneCount;
  unint64_t v6;
  char *v7;
  size_t v8;

  result = *a1;
  if (result)
  {
    PlaneCount = IOSurfaceGetPlaneCount(result);
    if (PlaneCount <= 1)
      v6 = 1;
    else
      v6 = PlaneCount;
    a2[1] = 0;
    a2[2] = 0;
    *a2 = 0;
    if (v6 >> 61)
      sub_2108B327C();
    v7 = (char *)operator new(8 * v6);
    *a2 = v7;
    a2[2] = &v7[8 * v6];
    bzero(v7, 8 * v6);
    v8 = 0;
    a2[1] = &v7[8 * v6];
    do
    {
      result = (__IOSurface *)IOSurfaceGetBaseAddressOfPlane(*a1, v8);
      *(_QWORD *)&v7[8 * v8++] = result;
    }
    while (v6 != v8);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  return result;
}

void sub_2109DDDAC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2109DDDD4(_QWORD *a1, std::__shared_weak_count_vtbl *cf, int a3, int a4)
{
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count_vtbl *v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count_vtbl *v31;
  std::__shared_weak_count *v32;

  if (a3)
  {
    sub_21090E264(&v31, cf);
    v7 = v32;
    v29 = v31;
    v30 = v32;
    if (!v32)
      goto LABEL_12;
  }
  else
  {
    v31 = cf;
    v7 = (std::__shared_weak_count *)operator new();
    v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA7D9B8;
    v7->__shared_owners_ = 0;
    v7->__shared_weak_owners_ = 0;
    v7[1].__vftable = cf;
    v32 = v7;
    v29 = cf;
    v30 = v7;
  }
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  v10 = v32;
  if (v32)
  {
    v11 = (unint64_t *)&v32->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
LABEL_12:
  if (v30)
  {
    v13 = (unint64_t *)&v30->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  *a1 = &off_24CA84E68;
  v15 = (char *)operator new(0xA0uLL);
  v16 = v15;
  *((_QWORD *)v15 + 1) = 0;
  *((_QWORD *)v15 + 2) = 0;
  *(_QWORD *)v15 = &off_24CA84D88;
  v17 = v15 + 24;
  if (v30)
  {
    v18 = (unint64_t *)&v30->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
    *((_QWORD *)v15 + 3) = v29;
    *((_QWORD *)v15 + 4) = v30;
    do
      v20 = __ldxr(v18);
    while (__stxr(v20 + 1, v18));
  }
  else
  {
    *((_QWORD *)v15 + 3) = v29;
    *((_QWORD *)v15 + 4) = 0;
  }
  *((_DWORD *)v15 + 10) = a4;
  *((_DWORD *)v15 + 11) = 0;
  *((_QWORD *)v15 + 6) = a4 == 1;
  *((_QWORD *)v15 + 7) = a4 == 2;
  *((_QWORD *)v15 + 8) = 850045863;
  v21 = 0uLL;
  *(_OWORD *)(v15 + 72) = 0u;
  *(_OWORD *)(v15 + 88) = 0u;
  *(_OWORD *)(v15 + 104) = 0u;
  *((_QWORD *)v15 + 15) = 0;
  if (v30)
  {
    v22 = (unint64_t *)&v30->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
      v21 = 0uLL;
    }
  }
  *((_OWORD *)v16 + 8) = v21;
  *((_OWORD *)v16 + 9) = v21;
  a1[1] = v17;
  a1[2] = v16;
  if (v30)
  {
    v24 = (unint64_t *)&v30->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  if (v30)
  {
    v26 = (unint64_t *)&v30->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  return a1;
}

void sub_2109DE01C(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_2109DE034(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_2109DE048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_2108A894C((uint64_t)&a11);
  sub_2108A894C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2109DE064(unsigned int *a1@<X0>, int a2@<W1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  std::__shared_weak_count_vtbl *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t (****v22)();
  int v23;
  size_t v24;
  __int128 *p_dst;
  const void **v26;
  uint64_t (***v27)();
  uint64_t (***v28)();
  const void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (****v32)();
  uint64_t v33;
  uint64_t v34;
  uint64_t (***v35)();
  int v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  void *v44[2];
  uint64_t v45;
  void *v46[2];
  uint64_t v47;
  char v48;
  void *v49;
  char v50;
  void *v51;
  char v52;
  char v53;
  char v54;
  uint64_t (**v55)();
  __int128 v56;
  __int128 v57;
  __int128 v58;
  unint64_t v59;
  char v60;
  void *v61;
  char v62;
  void *v63;
  char v64;
  char v65;
  char v66;
  __int128 properties;
  __int128 __p;
  uint64_t v69;
  unsigned __int8 v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  char v76;
  char v77;
  unsigned int v78;
  char v79;
  char v80;
  _DWORD v81[6];
  int v82;
  __int128 __dst;
  unint64_t v84;
  uint64_t (***v85)();
  const char *v86;
  _DWORD *v87;
  const char *v88;
  const char *v89;
  uint64_t (****v90)();

  v78 = a2;
  if (a1[1] * *a1)
  {
    sub_2109E0D94(a1, a2, a3, 0, 0, (uint64_t)&properties);
    v57 = properties;
    sub_21090D0F4(&properties, (uint64_t)&v57);
    v6 = (std::__shared_weak_count_vtbl *)IOSurfaceCreate((CFDictionaryRef)properties);
    sub_2109DDDD4(&v55, v6, 0, 0);
    v7 = (std::__shared_weak_count *)*((_QWORD *)&properties + 1);
    if (!*((_QWORD *)&properties + 1))
      goto LABEL_6;
    v8 = (unint64_t *)(*((_QWORD *)&properties + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      v10 = (uint64_t *)v56;
      if (!(_QWORD)v56)
        goto LABEL_45;
    }
    else
    {
LABEL_6:
      v10 = (uint64_t *)v56;
      if (!(_QWORD)v56)
        goto LABEL_45;
    }
    v12 = *v10;
    v11 = (std::__shared_weak_count *)v10[1];
    if (!v11)
      goto LABEL_12;
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if (v12)
        goto LABEL_13;
    }
    else
    {
LABEL_12:
      if (v12)
      {
LABEL_13:
        *(_QWORD *)a4 = &off_24CA84E68;
        *(_OWORD *)(a4 + 8) = v56;
        *(_BYTE *)(a4 + 120) = 1;
LABEL_106:
        v41 = (std::__shared_weak_count *)*((_QWORD *)&v57 + 1);
        if (*((_QWORD *)&v57 + 1))
        {
          v42 = (unint64_t *)(*((_QWORD *)&v57 + 1) + 8);
          do
            v43 = __ldaxr(v42);
          while (__stlxr(v43 - 1, v42));
          if (!v43)
          {
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v41);
          }
        }
        return;
      }
    }
LABEL_45:
    v82 = 0;
    sub_21094BD18(v81, "Failed to create IOSurface for format ");
    sub_2108FCB84((uint64_t)&v80, (uint64_t)v81, &v78);
    v85 = (uint64_t (***)())v81;
    v86 = " and size ";
    v87 = v81;
    v88 = " and size ";
    v89 = " and size ";
    if (v82 == -1)
      sub_2108B9060();
    *(_QWORD *)&__dst = &v85;
    ((void (*)(__int128 *, _DWORD *))off_24CA84E28[v82])(&__dst, v81);
    sub_210911A04((uint64_t)&v79, (uint64_t)v81, a1);
    v85 = (uint64_t (***)())v81;
    v86 = ", used properties:\n";
    v87 = v81;
    v88 = ", used properties:\n";
    v89 = ", used properties:\n";
    if (v82 == -1)
      sub_2108B9060();
    *(_QWORD *)&__dst = &v85;
    ((void (*)(__int128 *, _DWORD *))off_24CA84E40[v82])(&__dst, v81);
    v18 = operator new();
    *(_QWORD *)(v18 + 272) = 0;
    *(_OWORD *)(v18 + 240) = 0u;
    *(_OWORD *)(v18 + 256) = 0u;
    *(_OWORD *)(v18 + 208) = 0u;
    *(_OWORD *)(v18 + 224) = 0u;
    *(_OWORD *)(v18 + 176) = 0u;
    *(_OWORD *)(v18 + 192) = 0u;
    *(_OWORD *)(v18 + 144) = 0u;
    *(_OWORD *)(v18 + 160) = 0u;
    *(_OWORD *)(v18 + 112) = 0u;
    *(_OWORD *)(v18 + 128) = 0u;
    *(_OWORD *)(v18 + 80) = 0u;
    *(_OWORD *)(v18 + 96) = 0u;
    *(_OWORD *)(v18 + 48) = 0u;
    *(_OWORD *)(v18 + 64) = 0u;
    *(_OWORD *)(v18 + 16) = 0u;
    *(_OWORD *)(v18 + 32) = 0u;
    *(_OWORD *)v18 = 0u;
    sub_2108B18D0(v18);
    v90 = (uint64_t (****)())v18;
    sub_21090D0F4(&v85, (uint64_t)&v57);
    sub_2109E5D3C((_QWORD *)(v18 + 16), v85);
    v19 = (std::__shared_weak_count *)v86;
    if (!v86)
      goto LABEL_51;
    v20 = (unint64_t *)(v86 + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
      v22 = v90;
      v23 = *((_DWORD *)v90 + 30);
      if ((v23 & 0x10) == 0)
        goto LABEL_52;
    }
    else
    {
LABEL_51:
      v22 = v90;
      v23 = *((_DWORD *)v90 + 30);
      if ((v23 & 0x10) == 0)
      {
LABEL_52:
        if ((v23 & 8) == 0)
        {
          v24 = 0;
          HIBYTE(v84) = 0;
          p_dst = &__dst;
          goto LABEL_67;
        }
        v26 = (const void **)(v22 + 5);
        v27 = v22[7];
LABEL_59:
        v29 = *v26;
        v24 = (char *)v27 - (_BYTE *)*v26;
        if (v24 >= 0x7FFFFFFFFFFFFFF8)
          sub_2108A4B7C();
        if (v24 >= 0x17)
        {
          v30 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v24 | 7) != 0x17)
            v30 = v24 | 7;
          v31 = v30 + 1;
          p_dst = (__int128 *)operator new(v30 + 1);
          *((_QWORD *)&__dst + 1) = v24;
          v84 = v31 | 0x8000000000000000;
          *(_QWORD *)&__dst = p_dst;
        }
        else
        {
          HIBYTE(v84) = (_BYTE)v27 - *(_BYTE *)v26;
          p_dst = &__dst;
          if (!v24)
          {
LABEL_67:
            *((_BYTE *)p_dst + v24) = 0;
            v32 = v90;
            if (v90)
            {
              v33 = MEMORY[0x24BEDB7F0];
              v34 = *MEMORY[0x24BEDB7F0];
              *v90 = (uint64_t (***)())*MEMORY[0x24BEDB7F0];
              v35 = *(uint64_t (****)())(v33 + 72);
              *(uint64_t (****)())((char *)v32 + *(_QWORD *)(v34 - 24)) = *(uint64_t (****)())(v33 + 64);
              v32[3] = (uint64_t (***)())(MEMORY[0x24BEDB848] + 16);
              v32[2] = v35;
              if (*((char *)v32 + 111) < 0)
                operator delete(v32[11]);
              std::streambuf::~streambuf();
              std::iostream::~basic_iostream();
              MEMORY[0x212BCC66C](v32 + 16);
              MEMORY[0x212BCC6FC](v32, 0x10B2C40EED050F3);
            }
            v85 = (uint64_t (***)())v81;
            v86 = (const char *)&__dst;
            v87 = v81;
            v88 = (const char *)&__dst;
            v89 = (const char *)&__dst;
            if (v82 == -1)
              sub_2108B9060();
            v90 = &v85;
            ((void (*)(uint64_t (*****)(), _DWORD *))off_24CA84DC8[v82])(&v90, v81);
            if (SHIBYTE(v84) < 0)
              operator delete((void *)__dst);
            if (v82 == -1)
              sub_2108B9060();
            v85 = (uint64_t (***)())&__dst;
            ((void (*)(void **__return_ptr, uint64_t (****)(), _DWORD *))off_24CA84DF8[v82])(v44, &v85, v81);
            if (v82 != -1)
              ((void (*)(uint64_t (****)(), _DWORD *))off_24CA84DE0[v82])(&v85, v81);
            if (SHIBYTE(v45) < 0)
            {
              sub_2108B314C(v46, v44[0], (unint64_t)v44[1]);
            }
            else
            {
              *(_OWORD *)v46 = *(_OWORD *)v44;
              v47 = v45;
            }
            v48 = 1;
            LOBYTE(v49) = 0;
            v53 = 0;
            v54 = 1;
            sub_2109863B8(0x22u, (__int128 *)v46, (uint64_t)&properties);
            *(_OWORD *)a4 = properties;
            *(_BYTE *)(a4 + 16) = 0;
            *(_BYTE *)(a4 + 112) = 0;
            if (v77)
            {
              *(_BYTE *)(a4 + 40) = 0;
              v36 = v70;
              if (v70)
              {
                *(_OWORD *)(a4 + 16) = __p;
                *(_QWORD *)(a4 + 32) = v69;
                v69 = 0;
                __p = 0uLL;
                *(_BYTE *)(a4 + 40) = 1;
              }
              *(_BYTE *)(a4 + 48) = 0;
              *(_BYTE *)(a4 + 104) = 0;
              if (v76)
              {
                v37 = v73;
                *(_QWORD *)(a4 + 64) = v72;
                *(_OWORD *)(a4 + 48) = v71;
                v71 = 0uLL;
                *(_QWORD *)(a4 + 72) = v37;
                *(_OWORD *)(a4 + 80) = v74;
                *(_QWORD *)(a4 + 96) = v75;
                v72 = 0;
                v74 = 0uLL;
                v75 = 0;
                *(_BYTE *)(a4 + 104) = 1;
              }
              *(_BYTE *)(a4 + 112) = 1;
              *(_BYTE *)(a4 + 120) = 0;
              if (v36 && SHIBYTE(v69) < 0)
                operator delete((void *)__p);
              if (!v54)
                goto LABEL_99;
            }
            else
            {
              *(_BYTE *)(a4 + 120) = 0;
              if (!v54)
              {
LABEL_99:
                if (SHIBYTE(v45) < 0)
                  operator delete(v44[0]);
                v38 = (std::__shared_weak_count *)*((_QWORD *)&v56 + 1);
                v55 = &off_24CA84E68;
                if (*((_QWORD *)&v56 + 1))
                {
                  v39 = (unint64_t *)(*((_QWORD *)&v56 + 1) + 8);
                  do
                    v40 = __ldaxr(v39);
                  while (__stlxr(v40 - 1, v39));
                  if (!v40)
                  {
                    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
                    std::__shared_weak_count::__release_weak(v38);
                  }
                }
                goto LABEL_106;
              }
            }
            if (v53)
            {
              if (v52 < 0)
                operator delete(v51);
              if (v50 < 0)
                operator delete(v49);
            }
            if (v48 && SHIBYTE(v47) < 0)
              operator delete(v46[0]);
            goto LABEL_99;
          }
        }
        memmove(p_dst, v29, v24);
        goto LABEL_67;
      }
    }
    v27 = v22[14];
    v28 = v22[9];
    if (v27 < v28)
    {
      v22[14] = v28;
      v27 = v28;
    }
    v26 = (const void **)(v22 + 8);
    goto LABEL_59;
  }
  HIBYTE(v81[5]) = 21;
  strcpy((char *)v81, "given IOSurface size ");
  v82 = 1;
  sub_210911A04((uint64_t)v44, (uint64_t)v81, a1);
  v85 = (uint64_t (***)())v81;
  v86 = " is invalid, must be non-zero";
  v87 = v81;
  v88 = " is invalid, must be non-zero";
  v89 = " is invalid, must be non-zero";
  if (v82 == -1)
    sub_2108B9060();
  v55 = (uint64_t (**)())&v85;
  ((void (*)(uint64_t (***)(), _DWORD *))off_24CA84E10[v82])(&v55, v81);
  if (v82 == -1)
    sub_2108B9060();
  v85 = &v55;
  ((void (*)(__int128 *__return_ptr, uint64_t (****)(), _DWORD *))off_24CA84DF8[v82])(&__dst, &v85, v81);
  if (v82 != -1)
    ((void (*)(uint64_t (****)(), _DWORD *))off_24CA84DE0[v82])(&v85, v81);
  if (SHIBYTE(v84) < 0)
  {
    sub_2108B314C(&v58, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v58 = __dst;
    v59 = v84;
  }
  v60 = 1;
  LOBYTE(v61) = 0;
  v65 = 0;
  v66 = 1;
  sub_2109863B8(0x16u, &v58, (uint64_t)&properties);
  *(_OWORD *)a4 = properties;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 112) = 0;
  if (v77)
  {
    *(_BYTE *)(a4 + 40) = 0;
    v16 = v70;
    if (v70)
    {
      *(_OWORD *)(a4 + 16) = __p;
      *(_QWORD *)(a4 + 32) = v69;
      v69 = 0;
      __p = 0uLL;
      *(_BYTE *)(a4 + 40) = 1;
    }
    *(_BYTE *)(a4 + 48) = 0;
    *(_BYTE *)(a4 + 104) = 0;
    if (v76)
    {
      v17 = v73;
      *(_QWORD *)(a4 + 64) = v72;
      *(_OWORD *)(a4 + 48) = v71;
      v71 = 0uLL;
      *(_QWORD *)(a4 + 72) = v17;
      *(_OWORD *)(a4 + 80) = v74;
      *(_QWORD *)(a4 + 96) = v75;
      v72 = 0;
      v74 = 0uLL;
      v75 = 0;
      *(_BYTE *)(a4 + 104) = 1;
    }
    *(_BYTE *)(a4 + 112) = 1;
    *(_BYTE *)(a4 + 120) = 0;
    if (v16 && SHIBYTE(v69) < 0)
      operator delete((void *)__p);
    if (!v66)
      goto LABEL_42;
    goto LABEL_34;
  }
  *(_BYTE *)(a4 + 120) = 0;
  if (v66)
  {
LABEL_34:
    if (v65)
    {
      if (v64 < 0)
        operator delete(v63);
      if (v62 < 0)
        operator delete(v61);
    }
    if (v60 && SHIBYTE(v59) < 0)
      operator delete((void *)v58);
  }
LABEL_42:
  if (SHIBYTE(v84) < 0)
    operator delete((void *)__dst);
}

void sub_2109DE974(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,char a34)
{
  uint64_t v34;

  if (*(char *)(v34 - 113) < 0)
  {
    operator delete(*(void **)(v34 - 136));
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_2109DEAA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  sub_2108A894C((uint64_t)&a45);
  JUMPOUT(0x2109DEA98);
}

uint64_t sub_2109DEAB8(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 120))
  {
    (**(void (***)(uint64_t))a1)(a1);
    return a1;
  }
  if (!*(_BYTE *)(a1 + 112))
    return a1;
  if (!*(_BYTE *)(a1 + 104))
    goto LABEL_8;
  if ((*(char *)(a1 + 103) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_8;
LABEL_12:
    operator delete(*(void **)(a1 + 48));
    if (!*(_BYTE *)(a1 + 40))
      return a1;
    goto LABEL_9;
  }
  operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_12;
LABEL_8:
  if (!*(_BYTE *)(a1 + 40))
    return a1;
LABEL_9:
  if ((*(char *)(a1 + 39) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)(a1 + 16));
  return a1;
}

_QWORD *sub_2109DEB5C(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24CA84E68;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2109DEBD0(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24CA84E68;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BCC6FCLL);
}

size_t sub_2109DEC44(uint64_t a1)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __IOSurface *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v2 = *(uint64_t **)(a1 + 8);
  if (v2)
  {
    v4 = *v2;
    v3 = (std::__shared_weak_count *)v2[1];
    if (!v3)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      if (v4)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v4)
        goto LABEL_9;
    }
  }
  if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurface/src/IOSurfaceRef.cpp", 131, (uint64_t)"IsValid()", 9, (uint64_t)&unk_210A09DDD, 0, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
LABEL_9:
  v8 = *(_QWORD *)(a1 + 8);
  if (!v8)
    return IOSurfaceGetPlaneCount(0);
  v9 = *(__IOSurface **)v8;
  v10 = *(std::__shared_weak_count **)(v8 + 8);
  if (!v10)
    return IOSurfaceGetPlaneCount(v9);
  v11 = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
  do
    v13 = __ldaxr(v11);
  while (__stlxr(v13 - 1, v11));
  if (v13)
    return IOSurfaceGetPlaneCount(v9);
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  return IOSurfaceGetPlaneCount(v9);
}

size_t sub_2109DED7C(uint64_t a1)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __IOSurface *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v2 = *(uint64_t **)(a1 + 8);
  if (v2)
  {
    v4 = *v2;
    v3 = (std::__shared_weak_count *)v2[1];
    if (!v3)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      if (v4)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v4)
        goto LABEL_9;
    }
  }
  if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurface/src/IOSurfaceRef.cpp", 147, (uint64_t)"IsValid()", 9, (uint64_t)&unk_210A09DDD, 0, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
LABEL_9:
  v8 = *(_QWORD *)(a1 + 8);
  if (!v8)
    return IOSurfaceGetWidth(0);
  v9 = *(__IOSurface **)v8;
  v10 = *(std::__shared_weak_count **)(v8 + 8);
  if (!v10)
    return IOSurfaceGetWidth(v9);
  v11 = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
  do
    v13 = __ldaxr(v11);
  while (__stlxr(v13 - 1, v11));
  if (v13)
    return IOSurfaceGetWidth(v9);
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  return IOSurfaceGetWidth(v9);
}

size_t sub_2109DEEB4(uint64_t a1, size_t planeIndex)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __IOSurface *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;

  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v6)
        goto LABEL_9;
    }
  }
  if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurface/src/IOSurfaceRef.cpp", 152, (uint64_t)"IsValid()", 9, (uint64_t)&unk_210A09DDD, 0, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
LABEL_9:
  v10 = *(_QWORD *)(a1 + 8);
  if (!v10)
    return IOSurfaceGetWidthOfPlane(0, planeIndex);
  v11 = *(__IOSurface **)v10;
  v12 = *(std::__shared_weak_count **)(v10 + 8);
  if (!v12)
    return IOSurfaceGetWidthOfPlane(v11, planeIndex);
  v13 = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldxr(v13);
  while (__stxr(v14 + 1, v13));
  do
    v15 = __ldaxr(v13);
  while (__stlxr(v15 - 1, v13));
  if (v15)
    return IOSurfaceGetWidthOfPlane(v11, planeIndex);
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  return IOSurfaceGetWidthOfPlane(v11, planeIndex);
}

size_t sub_2109DEFFC(uint64_t a1)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __IOSurface *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v2 = *(uint64_t **)(a1 + 8);
  if (v2)
  {
    v4 = *v2;
    v3 = (std::__shared_weak_count *)v2[1];
    if (!v3)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      if (v4)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v4)
        goto LABEL_9;
    }
  }
  if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurface/src/IOSurfaceRef.cpp", 157, (uint64_t)"IsValid()", 9, (uint64_t)&unk_210A09DDD, 0, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
LABEL_9:
  v8 = *(_QWORD *)(a1 + 8);
  if (!v8)
    return IOSurfaceGetHeight(0);
  v9 = *(__IOSurface **)v8;
  v10 = *(std::__shared_weak_count **)(v8 + 8);
  if (!v10)
    return IOSurfaceGetHeight(v9);
  v11 = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
  do
    v13 = __ldaxr(v11);
  while (__stlxr(v13 - 1, v11));
  if (v13)
    return IOSurfaceGetHeight(v9);
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  return IOSurfaceGetHeight(v9);
}

size_t sub_2109DF134(uint64_t a1, size_t planeIndex)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __IOSurface *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;

  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v6)
        goto LABEL_9;
    }
  }
  if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurface/src/IOSurfaceRef.cpp", 162, (uint64_t)"IsValid()", 9, (uint64_t)&unk_210A09DDD, 0, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
LABEL_9:
  v10 = *(_QWORD *)(a1 + 8);
  if (!v10)
    return IOSurfaceGetHeightOfPlane(0, planeIndex);
  v11 = *(__IOSurface **)v10;
  v12 = *(std::__shared_weak_count **)(v10 + 8);
  if (!v12)
    return IOSurfaceGetHeightOfPlane(v11, planeIndex);
  v13 = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldxr(v13);
  while (__stxr(v14 + 1, v13));
  do
    v15 = __ldaxr(v13);
  while (__stlxr(v15 - 1, v13));
  if (v15)
    return IOSurfaceGetHeightOfPlane(v11, planeIndex);
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  return IOSurfaceGetHeightOfPlane(v11, planeIndex);
}

size_t sub_2109DF27C(uint64_t a1)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __IOSurface *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v2 = *(uint64_t **)(a1 + 8);
  if (v2)
  {
    v4 = *v2;
    v3 = (std::__shared_weak_count *)v2[1];
    if (!v3)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      if (v4)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v4)
        goto LABEL_9;
    }
  }
  if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurface/src/IOSurfaceRef.cpp", 192, (uint64_t)"IsValid()", 9, (uint64_t)&unk_210A09DDD, 0, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
LABEL_9:
  v8 = *(_QWORD *)(a1 + 8);
  if (!v8)
    return IOSurfaceGetBytesPerElement(0);
  v9 = *(__IOSurface **)v8;
  v10 = *(std::__shared_weak_count **)(v8 + 8);
  if (!v10)
    return IOSurfaceGetBytesPerElement(v9);
  v11 = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
  do
    v13 = __ldaxr(v11);
  while (__stlxr(v13 - 1, v11));
  if (v13)
    return IOSurfaceGetBytesPerElement(v9);
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  return IOSurfaceGetBytesPerElement(v9);
}

size_t sub_2109DF3B4(uint64_t a1, size_t planeIndex)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __IOSurface *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;

  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v6)
        goto LABEL_9;
    }
  }
  if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurface/src/IOSurfaceRef.cpp", 197, (uint64_t)"IsValid()", 9, (uint64_t)&unk_210A09DDD, 0, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
LABEL_9:
  v10 = *(_QWORD *)(a1 + 8);
  if (!v10)
    return IOSurfaceGetBytesPerElementOfPlane(0, planeIndex);
  v11 = *(__IOSurface **)v10;
  v12 = *(std::__shared_weak_count **)(v10 + 8);
  if (!v12)
    return IOSurfaceGetBytesPerElementOfPlane(v11, planeIndex);
  v13 = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldxr(v13);
  while (__stxr(v14 + 1, v13));
  do
    v15 = __ldaxr(v13);
  while (__stlxr(v15 - 1, v13));
  if (v15)
    return IOSurfaceGetBytesPerElementOfPlane(v11, planeIndex);
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  return IOSurfaceGetBytesPerElementOfPlane(v11, planeIndex);
}

size_t sub_2109DF4FC(uint64_t a1)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __IOSurface *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v2 = *(uint64_t **)(a1 + 8);
  if (v2)
  {
    v4 = *v2;
    v3 = (std::__shared_weak_count *)v2[1];
    if (!v3)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      if (v4)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v4)
        goto LABEL_9;
    }
  }
  if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurface/src/IOSurfaceRef.cpp", 202, (uint64_t)"IsValid()", 9, (uint64_t)&unk_210A09DDD, 0, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
LABEL_9:
  v8 = *(_QWORD *)(a1 + 8);
  if (!v8)
    return IOSurfaceGetBytesPerRow(0);
  v9 = *(__IOSurface **)v8;
  v10 = *(std::__shared_weak_count **)(v8 + 8);
  if (!v10)
    return IOSurfaceGetBytesPerRow(v9);
  v11 = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
  do
    v13 = __ldaxr(v11);
  while (__stlxr(v13 - 1, v11));
  if (v13)
    return IOSurfaceGetBytesPerRow(v9);
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  return IOSurfaceGetBytesPerRow(v9);
}

size_t sub_2109DF634(uint64_t a1, size_t planeIndex)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __IOSurface *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;

  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v6)
        goto LABEL_9;
    }
  }
  if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurface/src/IOSurfaceRef.cpp", 207, (uint64_t)"IsValid()", 9, (uint64_t)&unk_210A09DDD, 0, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
LABEL_9:
  v10 = *(_QWORD *)(a1 + 8);
  if (!v10)
    return IOSurfaceGetBytesPerRowOfPlane(0, planeIndex);
  v11 = *(__IOSurface **)v10;
  v12 = *(std::__shared_weak_count **)(v10 + 8);
  if (!v12)
    return IOSurfaceGetBytesPerRowOfPlane(v11, planeIndex);
  v13 = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldxr(v13);
  while (__stxr(v14 + 1, v13));
  do
    v15 = __ldaxr(v13);
  while (__stlxr(v15 - 1, v13));
  if (v15)
    return IOSurfaceGetBytesPerRowOfPlane(v11, planeIndex);
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  return IOSurfaceGetBytesPerRowOfPlane(v11, planeIndex);
}

uint64_t sub_2109DF77C(uint64_t a1)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __IOSurface *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v2 = *(uint64_t **)(a1 + 8);
  if (v2)
  {
    v4 = *v2;
    v3 = (std::__shared_weak_count *)v2[1];
    if (!v3)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      if (v4)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v4)
        goto LABEL_9;
    }
  }
  if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurface/src/IOSurfaceRef.cpp", 212, (uint64_t)"IsValid()", 9, (uint64_t)&unk_210A09DDD, 0, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
LABEL_9:
  v8 = *(_QWORD *)(a1 + 8);
  if (!v8)
    return IOSurfaceGetPixelFormat(0);
  v9 = *(__IOSurface **)v8;
  v10 = *(std::__shared_weak_count **)(v8 + 8);
  if (!v10)
    return IOSurfaceGetPixelFormat(v9);
  v11 = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
  do
    v13 = __ldaxr(v11);
  while (__stlxr(v13 - 1, v11));
  if (v13)
    return IOSurfaceGetPixelFormat(v9);
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  return IOSurfaceGetPixelFormat(v9);
}

uint64_t sub_2109DF8B4(uint64_t a1, unsigned int a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t **v14;
  uint64_t *v15;

  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v6)
        goto LABEL_9;
    }
  }
  if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurface/src/IOSurfaceRef.cpp", 243, (uint64_t)"IsValid()", 9, (uint64_t)&unk_210A09DDD, 0, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
LABEL_9:
  v10 = *(_QWORD *)(a1 + 8);
  v13 = v10;
  v11 = atomic_load((unint64_t *)(v10 + 104));
  if (v11 != -1)
  {
    v15 = &v13;
    v14 = &v15;
    std::__call_once((std::once_flag::_State_type *)(v10 + 104), &v14, (void (__cdecl *)(void *))sub_2109E026C);
  }
  return *(_QWORD *)(*(_QWORD *)(v10 + 112) + 8 * a2);
}

void sub_2109DF9B8(uint64_t a1@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  unsigned int v19;
  int v20;
  BOOL v22;
  char v23;
  const void *v24;
  size_t v25;
  void *v26;
  const void *v27;
  void *v28;
  const void *v29;
  std::__shared_weak_count *v30;
  CFMutableDictionaryRef v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  void *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  void *v43;
  const void *v44;
  void *v45;
  const void *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  int v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  std::__shared_weak_count_vtbl *ChildSurface;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  const char *v63;
  unsigned int v64;
  CFMutableDictionaryRef theDict[3];
  void *value;
  char *v67[2];
  __int128 v68;

  v6 = *(uint64_t **)(a1 + 8);
  if (v6)
  {
    v8 = *v6;
    v7 = (std::__shared_weak_count *)v6[1];
    if (!v7)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if (v8)
      {
LABEL_8:
        if (sub_2109DEC44(a1) > a2)
          goto LABEL_12;
      }
    }
    else
    {
LABEL_7:
      if (v8)
        goto LABEL_8;
    }
  }
  if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurface/src/IOSurfaceRef.cpp", 299, (uint64_t)"IsValid() && plane_index < NumPlanes()", 38, (uint64_t)&unk_210A09DDD, 0, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
LABEL_12:
  v67[0] = 0;
  v67[1] = 0;
  value = v67;
  sub_2109E55E0(&value, (CFMutableDictionaryRef *)&v68);
  *(_OWORD *)theDict = v68;
  sub_2109E5580((uint64_t)&value, v67[0]);
  v12 = *(uint64_t **)(a1 + 8);
  if (v12)
  {
    v14 = *v12;
    v13 = (std::__shared_weak_count *)v12[1];
    if (!v13)
      goto LABEL_18;
    v15 = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
      if (v14)
        goto LABEL_20;
    }
    else
    {
LABEL_18:
      if (v14)
        goto LABEL_20;
    }
  }
  if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurface/src/IOSurfaceRef.cpp", 218, (uint64_t)"IsValid()", 9, (uint64_t)&unk_210A09DDD, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_91;
  }
LABEL_20:
  v18 = sub_2109DF77C(a1);
  v19 = sub_2108FDFEC(v18);
  if (v19 <= a2
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurface/src/IOSurfaceRef.cpp", 223, (uint64_t)"plane_index < num_planes", 24, (uint64_t)"Plane index can't be more than total number of planes", 53, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_91;
  }
  if (v19 != 1)
  {
    if (v19 != 2)
    {
LABEL_89:
      v62 = 234;
      v63 = "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/IOSurface/src/IOSurfaceRef.cpp";
LABEL_90:
      sub_2109ED958(v63, v62, (uint64_t)&unk_210A09DDD, 0, (uint64_t)"not yet implemented", 19, (void (*)(void **))sub_2109EDDB4);
      goto LABEL_91;
    }
    if (sub_2108FDFEC(v18) != 1)
    {
      v22 = (v18 & 0xFFFFFFEF) == 0x34323066 || (v18 & 0xFFFFFFEF) == 875836518;
      if (a2 || !v22)
      {
        v23 = !v22;
        if (a2 != 1)
          v23 = 1;
        if ((v23 & 1) != 0)
        {
          v62 = 443;
          v63 = "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/PixelFormat/include/Kit/Pixe"
                "lFormat/Properties.h";
          goto LABEL_90;
        }
        v20 = 2;
      }
      else
      {
        v20 = 1;
      }
      goto LABEL_43;
    }
    if (!a2
      || !sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/PixelFormat/include/Kit/PixelFormat/Properties.h", 429, (uint64_t)"index == 0", 10, (uint64_t)&unk_210A09DDD, 0, (void (*)(void **))sub_2109EDDB4))
    {
      v20 = sub_21090FC84(v18);
LABEL_43:
      if (!sub_21091139C(v18))
      {
        if (v20 == 1)
        {
          v18 = 1278226488;
          goto LABEL_48;
        }
        if (v20 == 2)
        {
          v18 = 843264056;
          goto LABEL_48;
        }
      }
      goto LABEL_89;
    }
LABEL_91:
    abort();
  }
LABEL_48:
  v24 = (const void *)*MEMORY[0x24BDD8EF8];
  LODWORD(value) = v18;
  sub_21090D568((uint64_t)theDict, v24, (unsigned int *)&value);
  v25 = a2;
  v26 = (void *)sub_2109DEEB4(a1, a2);
  v27 = (const void *)*MEMORY[0x24BDD8FD0];
  value = v26;
  sub_21090D6D4((uint64_t)theDict, v27, (uint64_t *)&value);
  v28 = (void *)sub_2109DF134(a1, a2);
  v29 = (const void *)*MEMORY[0x24BDD8EB0];
  value = v28;
  sub_21090D6D4((uint64_t)theDict, v29, (uint64_t *)&value);
  LODWORD(v68) = 0x4000;
  v31 = theDict[0];
  v30 = (std::__shared_weak_count *)theDict[1];
  if (!theDict[1])
    goto LABEL_53;
  v32 = (unint64_t *)((char *)theDict[1] + 8);
  do
    v33 = __ldxr(v32);
  while (__stxr(v33 + 1, v32));
  do
    v34 = __ldaxr(v32);
  while (__stlxr(v34 - 1, v32));
  if (!v34)
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
    if (!v31)
      goto LABEL_67;
  }
  else
  {
LABEL_53:
    if (!v31)
      goto LABEL_67;
  }
  sub_2109E4914((int *)&v68, (CFNumberRef *)&value);
  v36 = value;
  v35 = (std::__shared_weak_count *)v67[0];
  if (v67[0])
  {
    v37 = (unint64_t *)(v67[0] + 8);
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
    do
      v39 = __ldaxr(v37);
    while (__stlxr(v39 - 1, v37));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
      if (!v36)
        goto LABEL_61;
      goto LABEL_60;
    }
  }
  if (v36)
LABEL_60:
    CFDictionarySetValue(theDict[0], (const void *)*MEMORY[0x24BDC56C8], value);
LABEL_61:
  v40 = (std::__shared_weak_count *)v67[0];
  if (v67[0])
  {
    v41 = (unint64_t *)(v67[0] + 8);
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
LABEL_67:
  v43 = (void *)sub_2109DF634(a1, a2);
  v44 = (const void *)*MEMORY[0x24BDD8E38];
  value = v43;
  sub_21090D6D4((uint64_t)theDict, v44, (uint64_t *)&value);
  v45 = (void *)sub_2109DF3B4(a1, a2);
  v46 = (const void *)*MEMORY[0x24BDD8E30];
  value = v45;
  sub_21090D6D4((uint64_t)theDict, v46, (uint64_t *)&value);
  value = 0;
  v47 = *(_QWORD *)(a1 + 8);
  if (v47)
  {
    v48 = *(std::__shared_weak_count **)(v47 + 8);
    if (v48)
    {
      v49 = (unint64_t *)&v48->__shared_owners_;
      do
        v50 = __ldxr(v49);
      while (__stxr(v50 + 1, v49));
      do
        v51 = __ldaxr(v49);
      while (__stlxr(v51 - 1, v49));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
  }
  value = (void *)IOSurfaceGetOffsetOfPlane();
  sub_21090D6D4((uint64_t)theDict, (const void *)*MEMORY[0x24BDD8EE8], (uint64_t *)&value);
  v52 = sub_2109DF134(a1, a2);
  v64 = sub_2109DF634(a1, v25) * v52;
  sub_2109E0108((uint64_t)theDict, (const void *)*MEMORY[0x24BDD8E18], &v64);
  v53 = *(_QWORD *)(a1 + 8);
  if (v53)
  {
    v54 = *(std::__shared_weak_count **)(v53 + 8);
    if (v54)
    {
      v55 = (unint64_t *)&v54->__shared_owners_;
      do
        v56 = __ldxr(v55);
      while (__stxr(v56 + 1, v55));
      do
        v57 = __ldaxr(v55);
      while (__stlxr(v57 - 1, v55));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
  }
  ChildSurface = (std::__shared_weak_count_vtbl *)IOSurfaceCreateChildSurface();
  sub_2109DDDD4(a3, ChildSurface, 0, 0);
  v59 = (std::__shared_weak_count *)theDict[1];
  if (theDict[1])
  {
    v60 = (unint64_t *)((char *)theDict[1] + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
}

void sub_2109E0020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_2108A894C((uint64_t)va1);
  sub_2108A894C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2109E003C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2108A894C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2109E0050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, char *a15)
{
  sub_2109E5580((uint64_t)&a14, a15);
  _Unwind_Resume(a1);
}

void sub_2109E0068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2108A894C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2109E007C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2108A894C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2109E0090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2108A894C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2109E00A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2108A894C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2109E00B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2108A894C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2109E00CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2108A894C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2109E00E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2108A894C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2109E00F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2108A894C((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_2109E0108(uint64_t a1, const void *a2, unsigned int *a3)
{
  std::__shared_weak_count *v6;
  CFMutableDictionaryRef v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  _BOOL8 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  void *value;
  std::__shared_weak_count *v22;

  v7 = *(CFMutableDictionaryRef *)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      if (v7)
        goto LABEL_7;
      return 0;
    }
  }
  if (!v7)
    return 0;
LABEL_7:
  sub_2109E4A18(a3, (CFNumberRef *)&value);
  v12 = value;
  v11 = v22;
  if (v22)
  {
    v13 = (unint64_t *)&v22->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      v16 = v12 != 0;
      if (!v12)
        goto LABEL_14;
      goto LABEL_13;
    }
  }
  v16 = v12 != 0;
  if (v12)
LABEL_13:
    CFDictionarySetValue(*(CFMutableDictionaryRef *)a1, a2, value);
LABEL_14:
  v17 = v22;
  if (v22)
  {
    v18 = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return v16;
}

void sub_2109E0258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2108A894C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

double sub_2109E026C(uint64_t ***a1)
{
  uint64_t v1;
  void *v2;
  double result;
  __int128 v4;
  uint64_t v5;

  v1 = ***a1;
  sub_2109DDCE4((IOSurfaceRef *)v1, &v4);
  v2 = *(void **)(v1 + 112);
  if (v2)
  {
    *(_QWORD *)(v1 + 120) = v2;
    operator delete(v2);
  }
  result = *(double *)&v4;
  *(_OWORD *)(v1 + 112) = v4;
  *(_QWORD *)(v1 + 128) = v5;
  return result;
}

void sub_2109E02C4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA84D88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2109E02D4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA84D88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BCC6FCLL);
}

void sub_2109E0304(uint64_t a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(void **)(a1 + 136);
  if (v2)
  {
    *(_QWORD *)(a1 + 144) = v2;
    operator delete(v2);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 64));
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

size_t sub_2109E037C(_QWORD **a1)
{
  _DWORD *v1;
  const char *v2;
  uint64_t v3;
  size_t result;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v1 = (_DWORD *)**a1;
  v2 = (const char *)(*a1)[1];
  v3 = v1[6];
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, _DWORD *))off_24CA84DE0[v3])(&v9, v1);
  v1[6] = -1;
  result = strlen(v2);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    sub_2108A4B7C();
  v5 = result;
  if (result >= 0x17)
  {
    v7 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v7 = result | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    *((_QWORD *)v1 + 1) = v5;
    *((_QWORD *)v1 + 2) = v8 | 0x8000000000000000;
    *(_QWORD *)v1 = v6;
  }
  else
  {
    *((_BYTE *)v1 + 23) = result;
    v6 = v1;
    if (!result)
      goto LABEL_11;
  }
  result = (size_t)memmove(v6, v2, v5);
LABEL_11:
  *((_BYTE *)v6 + v5) = 0;
  v1[6] = 1;
  return result;
}

void sub_2109E0468(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char v5;
  void *v6;
  const char *v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14;
  _BYTE v15[15];
  char v16;
  void *__p[2];
  unint64_t v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)((char *)v19 + 7) = *(_QWORD *)(a2 + 15);
  v4 = *(void **)a2;
  v19[0] = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v14 = v4;
  *(_QWORD *)v15 = v19[0];
  *(_QWORD *)&v15[7] = *(_QWORD *)((char *)v19 + 7);
  v16 = v5;
  memset(v19, 0, 15);
  v6 = __p;
  v7 = *(const char **)(v2 + 24);
  v8 = strlen(v7);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    sub_2108A4B7C();
  v9 = (void *)v8;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    v6 = operator new(v11 + 1);
    __p[1] = v9;
    v18 = v12 | 0x8000000000000000;
    __p[0] = v6;
LABEL_9:
    memmove(v6, v7, (size_t)v9);
    *((_BYTE *)v9 + (_QWORD)v6) = 0;
    v10 = *(unsigned int *)(v3 + 24);
    if ((_DWORD)v10 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v18) = v8;
  if (v8)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v10 = *(unsigned int *)(v3 + 24);
  if ((_DWORD)v10 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24CA84DE0[v10])(&v13, v3);
LABEL_11:
  *(_DWORD *)(v3 + 24) = -1;
  sub_2108B9228((_QWORD *)v3, (uint64_t)&v14, 2uLL);
  *(_DWORD *)(v3 + 24) = 2;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((v16 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v14);
    return;
  }
  operator delete(__p[0]);
  if (v16 < 0)
    goto LABEL_15;
}

void sub_2109E0620(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_2108ABF6C(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2109E0664(uint64_t a1, void **a2)
{
  const void *v3;
  _BYTE *v4;
  _QWORD *v5;
  size_t v6;
  size_t v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  size_t v18;
  size_t v19;
  void *v20;
  char *v21;
  void **v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  void **v27;

  v3 = *(const void **)(*(_QWORD *)a1 + 32);
  v5 = a2[1];
  v4 = a2[2];
  if (v5 < (_QWORD *)v4)
  {
    v6 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
    if (v6 > 0x7FFFFFFFFFFFFFF7)
      sub_2108A4B7C();
    v7 = v6;
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v8 = operator new(v14 + 1);
      v5[1] = v7;
      v5[2] = v15 | 0x8000000000000000;
      *v5 = v8;
    }
    else
    {
      *((_BYTE *)v5 + 23) = v6;
      v8 = v5;
      if (!v6)
        goto LABEL_19;
    }
    memmove(v8, v3, v7);
LABEL_19:
    *((_BYTE *)v8 + v7) = 0;
    v16 = (char *)(v5 + 3);
    a2[1] = v5 + 3;
    goto LABEL_39;
  }
  v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (_BYTE *)*a2) >> 3);
  if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_2108B327C();
  v10 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a2) >> 3);
  v11 = 2 * v10;
  if (2 * v10 <= v9 + 1)
    v11 = v9 + 1;
  if (v10 >= 0x555555555555555)
    v12 = 0xAAAAAAAAAAAAAAALL;
  else
    v12 = v11;
  if (v12)
  {
    if (v12 > 0xAAAAAAAAAAAAAAALL)
      sub_2108B2B1C();
    v13 = (char *)operator new(24 * v12);
  }
  else
  {
    v13 = 0;
  }
  v17 = &v13[24 * v9];
  v18 = strlen((const char *)v3);
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    sub_2108A4B7C();
  v19 = v18;
  if (v18 >= 0x17)
  {
    v24 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v24 = v18 | 7;
    v25 = v24 + 1;
    v20 = operator new(v24 + 1);
    *((_QWORD *)v17 + 1) = v19;
    *((_QWORD *)v17 + 2) = v25 | 0x8000000000000000;
    *(_QWORD *)v17 = v20;
  }
  else
  {
    v17[23] = v18;
    v20 = v17;
    if (!v18)
    {
      v21 = &v13[24 * v12];
      *v17 = 0;
      v16 = v17 + 24;
      v22 = (void **)*a2;
      v23 = (void **)a2[1];
      if (v23 == *a2)
        goto LABEL_36;
      do
      {
LABEL_30:
        v26 = *(_OWORD *)(v23 - 3);
        *((_QWORD *)v17 - 1) = *(v23 - 1);
        *(_OWORD *)(v17 - 24) = v26;
        v17 -= 24;
        *(v23 - 2) = 0;
        *(v23 - 1) = 0;
        *(v23 - 3) = 0;
        v23 -= 3;
      }
      while (v23 != v22);
      v23 = (void **)*a2;
      v27 = (void **)a2[1];
      *a2 = v17;
      a2[1] = v16;
      a2[2] = v21;
      while (v27 != v23)
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      goto LABEL_37;
    }
  }
  memmove(v20, v3, v19);
  v21 = &v13[24 * v12];
  *((_BYTE *)v20 + v19) = 0;
  v16 = v17 + 24;
  v22 = (void **)*a2;
  v23 = (void **)a2[1];
  if (v23 != *a2)
    goto LABEL_30;
LABEL_36:
  *a2 = v17;
  a2[1] = v16;
  a2[2] = v21;
LABEL_37:
  if (v23)
    operator delete(v23);
LABEL_39:
  a2[1] = v16;
}

void sub_2109E08F4(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_2109E090C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_2109E0914(int a1, unsigned int a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  unsigned __int8 v20;
  uint64_t v21;
  BOOL v22;
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;

  if (a1 <= 1278226487)
  {
    if (a1 > 875704421)
    {
      if (a1 > 875836533)
      {
        if (a1 != 875836534)
        {
          v2 = 1094862674;
          v3 = 0x4000000004;
          if (a2 >= 2)
            v4 = 0;
          else
            v4 = 0x4000000004;
          v5 = v4 & 0x4000000000;
          v6 = 1111970369;
          goto LABEL_72;
        }
      }
      else if (a1 != 875704422 && a1 != 875704438 && a1 != 875836518)
      {
        return 0;
      }
      v37 = xmmword_210A1C9C0;
      if (a2 <= 2)
        return *((_QWORD *)&v37 + a2);
      else
        return 0;
    }
    if (a1 <= 843264055)
    {
      if (a1 == 24)
      {
        v35 = 0xC000000003;
        if (a2 >= 2)
          v35 = 0;
        return v35 & 0xC0000000FFLL;
      }
      else
      {
        v7 = 0x4000000004;
        if (a2 >= 2)
          v7 = 0;
        v8 = 0xC000000003;
        if (a2 >= 2)
          v8 = 0;
        if (a1 == 842285639)
          v9 = v8;
        else
          v9 = 0;
        if (a1 == 842285639)
          v10 = v8 & 0xC000000000;
        else
          v10 = 0;
        if (a1 == 32)
        {
          v11 = v7 & 0x4000000000;
        }
        else
        {
          LOBYTE(v7) = v9;
          v11 = v10;
        }
        return v11 | v7;
      }
    }
    if (a1 != 843264056)
    {
      v13 = 843264102;
      v14 = 0x8000000008;
      if (a2 >= 2)
        v14 = 0;
      v15 = v14 & 0x8000000000;
      v16 = 843264104;
      v17 = 0x4000000004;
      if (a2 >= 2)
        v17 = 0;
      v18 = v17 & 0x4000000000;
      goto LABEL_54;
    }
LABEL_101:
    v34 = 0x4000000002;
    goto LABEL_107;
  }
  if (a1 <= 1647392358)
  {
    if (a1 > 1380401728)
    {
      if (a1 == 1380401729)
      {
        v36 = 0x4000000004;
        if (a2 >= 2)
          v36 = 0;
        return v36 & 0x40000000FFLL;
      }
      v13 = 1380410945;
      v14 = 0x10000000010;
      if (a2 >= 2)
        v14 = 0;
      v15 = v14 & 0x10000000000;
      v16 = 1380411457;
      goto LABEL_51;
    }
    if (a1 != 1278226488)
    {
      v2 = 1278226534;
      if (a2 >= 2)
        v4 = 0;
      else
        v4 = 0x4000000004;
      v5 = v4 & 0x4000000000;
      v6 = 1278226536;
      v3 = 0x4000000002;
      goto LABEL_72;
    }
    v34 = 0x4000000001;
LABEL_107:
    if (a2 >= 2)
      v34 = 0;
    return v34 & 0x40000000FFLL;
  }
  if (a1 <= 1717855599)
  {
    if (a1 != 1647392359)
    {
      v13 = 1647589490;
      v14 = 0xC000000006;
      if (a2 >= 2)
        v14 = 0;
      v15 = v14 & 0xC000000000;
      v16 = 1647719521;
LABEL_51:
      v17 = 0x8000000008;
      if (a2 >= 2)
        v17 = 0;
      v18 = v17 & 0x8000000000;
LABEL_54:
      v19 = a1 == v16;
      if (a1 == v16)
        v20 = v17;
      else
        v20 = 0;
      if (v19)
        v21 = v18;
      else
        v21 = 0;
      v22 = a1 == v13;
      if (a1 == v13)
        v23 = v14;
      else
        v23 = v20;
      if (v22)
        v24 = v15;
      else
        v24 = v21;
      return v24 | v23;
    }
    goto LABEL_101;
  }
  if (a1 <= 1751410031)
  {
    v2 = 1717855600;
    v3 = 0x4000000004;
    if (a2 >= 2)
      v4 = 0;
    else
      v4 = 0x4000000004;
    v5 = v4 & 0x4000000000;
    v6 = 1717856627;
LABEL_72:
    if (a2 >= 2)
      v3 = 0;
    if (a1 == v6)
    {
      v25 = v3 & 0x4000000000;
    }
    else
    {
      LOBYTE(v3) = 0;
      v25 = 0;
    }
    v26 = a1 == v2;
    if (a1 == v2)
      v27 = v4;
    else
      v27 = v3;
    if (v26)
      v28 = v5;
    else
      v28 = v25;
    return v28 | v27;
  }
  v29 = 0x4000000002;
  if (a2 >= 2)
    v30 = 0;
  else
    v30 = 0x4000000002;
  if (a2 >= 2)
    v29 = 0;
  if (a1 == 1751411059)
  {
    v31 = v29 & 0x4000000000;
  }
  else
  {
    LOBYTE(v29) = 0;
    v31 = 0;
  }
  if (a1 == 1751410032)
    v32 = v30;
  else
    v32 = v29;
  if (a1 == 1751410032)
    v33 = v30 & 0x4000000000;
  else
    v33 = v31;
  return v33 | v32;
}

void sub_2109E0D94(unsigned int *a1@<X0>, int a2@<W1>, uint64_t *a3@<X2>, unsigned int a4@<W3>, unsigned __int8 a5@<W4>, uint64_t a6@<X8>)
{
  std::__shared_weak_count *v12;
  CFMutableDictionaryRef v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  std::__shared_weak_count *size;
  unint64_t *v22;
  unint64_t v23;
  int v24;
  int v25;
  unsigned __int8 v26;
  const void *v27;
  const void *v28;
  const void *v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  unsigned __int8 v37;
  const void *v38;
  const void *v39;
  const void *v40;
  unsigned __int8 v41;
  const void *v42;
  const void *v43;
  const void *v44;
  unsigned __int8 v45;
  const void *v46;
  const void *v47;
  const void *v48;
  const void **v49;
  unsigned int v50;
  int v51;
  unsigned __int8 v52;
  unsigned int v53;
  std::string::size_type v54;
  unsigned int v55;
  int v56;
  unsigned __int8 v57;
  unsigned int v58;
  std::string::size_type v59;
  unsigned int v60;
  int v61;
  unsigned __int8 v62;
  unint64_t v63;
  unsigned int v64;
  int v65;
  unsigned __int8 v66;
  unint64_t v67;
  unsigned int v68;
  _QWORD *v69;
  char *v70;
  char *v71;
  void *v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unsigned int v88;
  _QWORD *v89;
  char *v90;
  char *v91;
  void *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t *v105;
  unsigned int v106;
  _QWORD *v107;
  char *v108;
  char *v109;
  void *v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  unint64_t *v123;
  unsigned int v124;
  _QWORD *v125;
  char *v126;
  char *v127;
  void *v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  unint64_t *v141;
  uint64_t v142;
  char v143;
  uint64_t v144;
  char v145;
  uint64_t v146;
  char v147;
  uint64_t v148;
  char v149;
  uint64_t v150;
  char v151;
  uint64_t v152;
  char v153;
  uint64_t v154;
  char v155;
  uint64_t v156;
  char v157;
  std::logic_error *exception;
  void *__p[2];
  _QWORD *v160;
  __int128 v161;
  __int128 v162;
  void **v163;
  char v164;
  std::string value;
  std::__shared_weak_count *v166;
  uint64_t v167;

  v167 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)&value.__r_.__value_.__r.__words[1] = 0uLL;
  value.__r_.__value_.__r.__words[0] = (std::string::size_type)&value.__r_.__value_.__l.__size_;
  sub_2109E55E0(&value, (CFMutableDictionaryRef *)__p);
  *(_OWORD *)a6 = *(_OWORD *)__p;
  sub_2109E5580((uint64_t)&value, (char *)value.__r_.__value_.__l.__size_);
  v13 = *(CFMutableDictionaryRef *)a6;
  v12 = *(std::__shared_weak_count **)(a6 + 8);
  if (!v12)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v15 = __ldxr(p_shared_owners);
  while (__stxr(v15 + 1, p_shared_owners));
  do
    v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    if (!v13)
      goto LABEL_20;
  }
  else
  {
LABEL_6:
    if (!v13)
      goto LABEL_20;
  }
  LODWORD(__p[0]) = a2;
  sub_2109E4A18((unsigned int *)__p, (CFNumberRef *)&value);
  v17 = *(_OWORD *)&value.__r_.__value_.__l.__data_;
  if (value.__r_.__value_.__l.__size_)
  {
    v18 = (unint64_t *)(value.__r_.__value_.__l.__size_ + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
    do
      v20 = __ldaxr(v18);
    while (__stlxr(v20 - 1, v18));
    if (!v20)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v17 + 1) + 16))(*((_QWORD *)&v17 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v17 + 1));
      if (!(_QWORD)v17)
        goto LABEL_14;
      goto LABEL_13;
    }
  }
  if ((_QWORD)v17)
LABEL_13:
    CFDictionarySetValue(*(CFMutableDictionaryRef *)a6, (const void *)*MEMORY[0x24BDD8EF8], value.__r_.__value_.__l.__data_);
LABEL_14:
  size = (std::__shared_weak_count *)value.__r_.__value_.__l.__size_;
  if (value.__r_.__value_.__l.__size_)
  {
    v22 = (unint64_t *)(value.__r_.__value_.__l.__size_ + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
LABEL_20:
  value.__r_.__value_.__r.__words[0] = *a1;
  sub_21090D6D4(a6, (const void *)*MEMORY[0x24BDD8FD0], (uint64_t *)&value);
  value.__r_.__value_.__r.__words[0] = a1[1];
  sub_21090D6D4(a6, (const void *)*MEMORY[0x24BDD8EB0], (uint64_t *)&value);
  sub_2109E2C00(a3, &value);
  sub_2109E3CE4(a6, (uint64_t)&value);
  v24 = a5;
  if (SHIBYTE(value.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(value.__r_.__value_.__l.__data_);
    if (a2 > 1278226487)
      goto LABEL_22;
  }
  else if (a2 > 1278226487)
  {
LABEL_22:
    if (a2 > 1647392358)
    {
      if (a2 <= 1717855599)
      {
        if (a2 == 1647392359 || a2 == 1647589490)
          goto LABEL_60;
        v25 = 1647719521;
      }
      else
      {
        if (a2 <= 1751410031)
        {
          if (a2 != 1717855600)
          {
            v25 = 1717856627;
            goto LABEL_59;
          }
LABEL_60:
          v32 = sub_2109E0914(a2, 0);
          if (!v33)
            sub_2108B1AA4();
          v34 = v32;
          value.__r_.__value_.__r.__words[0] = v32;
          sub_21090D6D4(a6, (const void *)*MEMORY[0x24BDD8E30], (uint64_t *)&value);
          if (a5)
          {
            value.__r_.__value_.__r.__words[0] = a4;
            sub_21090D6D4(a6, (const void *)*MEMORY[0x24BDD8E38], (uint64_t *)&value);
          }
          else
          {
            v35 = *a1 * v34;
            if (v35 % HIDWORD(v34))
              v36 = v35 / HIDWORD(v34) + 1;
            else
              v36 = v35 / HIDWORD(v34);
            value.__r_.__value_.__r.__words[0] = (v36 * HIDWORD(v34));
            sub_21090D6D4(a6, (const void *)*MEMORY[0x24BDD8E38], (uint64_t *)&value);
          }
          return;
        }
        if (a2 == 1751410032)
          goto LABEL_60;
        v25 = 1751411059;
      }
LABEL_59:
      if (a2 == v25)
        goto LABEL_60;
LABEL_267:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_2109E3480((uint64_t)&value, a2);
      std::logic_error::logic_error(exception, &value);
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
      __cxa_throw(exception, (struct type_info *)off_24CA79220, MEMORY[0x24BEDAB88]);
    }
    if (a2 > 1380401728)
    {
      if (a2 == 1380401729 || a2 == 1380410945)
        goto LABEL_60;
      v25 = 1380411457;
      goto LABEL_59;
    }
    v30 = -1278226488;
LABEL_45:
    v31 = a2 + v30;
    if (v31 <= 0x30 && ((1 << v31) & 0x1400000000001) != 0)
      goto LABEL_60;
    goto LABEL_267;
  }
  if (a2 <= 875704421)
  {
    if (a2 <= 843264055)
    {
      if (a2 == 24 || a2 == 32)
        goto LABEL_60;
      v25 = 842285639;
      goto LABEL_59;
    }
    v30 = -843264056;
    goto LABEL_45;
  }
  if (a2 > 875836533)
  {
    if (a2 != 875836534)
    {
      if (a2 == 1094862674)
        goto LABEL_60;
      v25 = 1111970369;
      goto LABEL_59;
    }
    v45 = atomic_load((unsigned __int8 *)&qword_254A75E18);
    if ((v45 & 1) == 0 && __cxa_guard_acquire(&qword_254A75E18))
    {
      v146 = sub_2109E0914(875836534, 0);
      if (!v147)
        sub_2108B1AA4();
      qword_254A75E10 = v146;
      __cxa_guard_release(&qword_254A75E18);
    }
    *(_OWORD *)&value.__r_.__value_.__r.__words[1] = 0uLL;
    value.__r_.__value_.__r.__words[0] = (std::string::size_type)&value.__r_.__value_.__l.__size_;
    sub_2109E55E0(&value, (CFMutableDictionaryRef *)__p);
    v162 = *(_OWORD *)__p;
    sub_2109E5580((uint64_t)&value, (char *)value.__r_.__value_.__l.__size_);
    value.__r_.__value_.__r.__words[0] = *a1;
    v46 = (const void *)*MEMORY[0x24BDD8FA8];
    sub_21090D6D4((uint64_t)&v162, (const void *)*MEMORY[0x24BDD8FA8], (uint64_t *)&value);
    value.__r_.__value_.__r.__words[0] = a1[1];
    v47 = (const void *)*MEMORY[0x24BDD8F70];
    sub_21090D6D4((uint64_t)&v162, (const void *)*MEMORY[0x24BDD8F70], (uint64_t *)&value);
    value.__r_.__value_.__r.__words[0] = qword_254A75E10;
    v48 = (const void *)*MEMORY[0x24BDD8F10];
    sub_21090D6D4((uint64_t)&v162, (const void *)*MEMORY[0x24BDD8F10], (uint64_t *)&value);
    v49 = (const void **)MEMORY[0x24BDD8F18];
    if (v24)
    {
      value.__r_.__value_.__r.__words[0] = a4;
      sub_21090D6D4((uint64_t)&v162, (const void *)*MEMORY[0x24BDD8F18], (uint64_t *)&value);
    }
    else
    {
      v60 = qword_254A75E10 * *a1;
      if (v60 % HIDWORD(qword_254A75E10))
        v61 = v60 / HIDWORD(qword_254A75E10) + 1;
      else
        v61 = v60 / HIDWORD(qword_254A75E10);
      value.__r_.__value_.__r.__words[0] = (v61 * HIDWORD(qword_254A75E10));
      sub_21090D6D4((uint64_t)&v162, (const void *)*MEMORY[0x24BDD8F18], (uint64_t *)&value);
    }
    v62 = atomic_load((unsigned __int8 *)&qword_254A75E28);
    if ((v62 & 1) == 0 && __cxa_guard_acquire(&qword_254A75E28))
    {
      v154 = sub_2109E0914(875836534, 1u);
      if (!v155)
        sub_2108B1AA4();
      qword_254A75E20 = v154;
      __cxa_guard_release(&qword_254A75E28);
    }
    *(_OWORD *)&value.__r_.__value_.__r.__words[1] = 0uLL;
    value.__r_.__value_.__r.__words[0] = (std::string::size_type)&value.__r_.__value_.__l.__size_;
    sub_2109E55E0(&value, (CFMutableDictionaryRef *)__p);
    v161 = *(_OWORD *)__p;
    sub_2109E5580((uint64_t)&value, (char *)value.__r_.__value_.__l.__size_);
    v63 = *(_QWORD *)a1;
    value.__r_.__value_.__r.__words[0] = v63;
    sub_21090D6D4((uint64_t)&v161, v46, (uint64_t *)&value);
    value.__r_.__value_.__r.__words[0] = HIDWORD(v63);
    sub_21090D6D4((uint64_t)&v161, v47, (uint64_t *)&value);
    value.__r_.__value_.__r.__words[0] = qword_254A75E20;
    sub_21090D6D4((uint64_t)&v161, v48, (uint64_t *)&value);
    if (v24)
    {
      value.__r_.__value_.__r.__words[0] = a4;
      sub_21090D6D4((uint64_t)&v161, *v49, (uint64_t *)&value);
    }
    else
    {
      if ((qword_254A75E20 * v63) % HIDWORD(qword_254A75E20))
        v106 = (qword_254A75E20 * v63) / HIDWORD(qword_254A75E20) + 1;
      else
        v106 = (qword_254A75E20 * v63) / HIDWORD(qword_254A75E20);
      value.__r_.__value_.__r.__words[0] = v106 * HIDWORD(qword_254A75E20);
      sub_21090D6D4((uint64_t)&v161, *v49, (uint64_t *)&value);
    }
    sub_21090CEA0(&value, (uint64_t)&v162);
    sub_21090CEA0(&value.__r_.__value_.__r.__words[2], (uint64_t)&v161);
    __p[0] = 0;
    __p[1] = 0;
    v160 = 0;
    v163 = __p;
    v164 = 0;
    v107 = operator new(0x20uLL);
    __p[0] = v107;
    __p[1] = v107;
    v160 = v107 + 4;
    sub_21090CEA0(v107, (uint64_t)&value);
    sub_21090CEA0(v107 + 2, (uint64_t)&value.__r_.__value_.__r.__words[2]);
    __p[1] = v107 + 4;
    sub_2109E3E3C(a6, (const void *)*MEMORY[0x24BDD8F88], (uint64_t *)__p);
    v108 = (char *)__p[0];
    if (__p[0])
    {
      v109 = (char *)__p[1];
      v110 = __p[0];
      if (__p[1] != __p[0])
      {
        do
        {
          v111 = (std::__shared_weak_count *)*((_QWORD *)v109 - 1);
          if (v111)
          {
            v112 = (unint64_t *)&v111->__shared_owners_;
            do
              v113 = __ldaxr(v112);
            while (__stlxr(v113 - 1, v112));
            if (!v113)
            {
              ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
              std::__shared_weak_count::__release_weak(v111);
            }
          }
          v109 -= 16;
        }
        while (v109 != v108);
        v110 = __p[0];
      }
      __p[1] = v108;
      operator delete(v110);
    }
    v114 = v166;
    if (v166)
    {
      v115 = (unint64_t *)&v166->__shared_owners_;
      do
        v116 = __ldaxr(v115);
      while (__stlxr(v116 - 1, v115));
      if (!v116)
      {
        ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
        std::__shared_weak_count::__release_weak(v114);
      }
    }
    v117 = (std::__shared_weak_count *)value.__r_.__value_.__l.__size_;
    if (value.__r_.__value_.__l.__size_)
    {
      v118 = (unint64_t *)(value.__r_.__value_.__l.__size_ + 8);
      do
        v119 = __ldaxr(v118);
      while (__stlxr(v119 - 1, v118));
      if (!v119)
      {
        ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
        std::__shared_weak_count::__release_weak(v117);
      }
    }
    v120 = (std::__shared_weak_count *)*((_QWORD *)&v161 + 1);
    if (*((_QWORD *)&v161 + 1))
    {
      v121 = (unint64_t *)(*((_QWORD *)&v161 + 1) + 8);
      do
        v122 = __ldaxr(v121);
      while (__stlxr(v122 - 1, v121));
      if (!v122)
      {
        ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
        std::__shared_weak_count::__release_weak(v120);
      }
    }
    v85 = (std::__shared_weak_count *)*((_QWORD *)&v162 + 1);
    if (!*((_QWORD *)&v162 + 1))
      return;
    v123 = (unint64_t *)(*((_QWORD *)&v162 + 1) + 8);
    do
      v87 = __ldaxr(v123);
    while (__stlxr(v87 - 1, v123));
LABEL_240:
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
    return;
  }
  if (a2 == 875704422)
  {
    v41 = atomic_load((unsigned __int8 *)&qword_254A75DF8);
    if ((v41 & 1) == 0 && __cxa_guard_acquire(&qword_254A75DF8))
    {
      v144 = sub_2109E0914(875704422, 0);
      if (!v145)
        sub_2108B1AA4();
      qword_254A75DF0 = v144;
      __cxa_guard_release(&qword_254A75DF8);
    }
    *(_OWORD *)&value.__r_.__value_.__r.__words[1] = 0uLL;
    value.__r_.__value_.__r.__words[0] = (std::string::size_type)&value.__r_.__value_.__l.__size_;
    sub_2109E55E0(&value, (CFMutableDictionaryRef *)__p);
    v162 = *(_OWORD *)__p;
    sub_2109E5580((uint64_t)&value, (char *)value.__r_.__value_.__l.__size_);
    value.__r_.__value_.__r.__words[0] = *a1;
    v42 = (const void *)*MEMORY[0x24BDD8FA8];
    sub_21090D6D4((uint64_t)&v162, (const void *)*MEMORY[0x24BDD8FA8], (uint64_t *)&value);
    value.__r_.__value_.__r.__words[0] = a1[1];
    v43 = (const void *)*MEMORY[0x24BDD8F70];
    sub_21090D6D4((uint64_t)&v162, (const void *)*MEMORY[0x24BDD8F70], (uint64_t *)&value);
    value.__r_.__value_.__r.__words[0] = qword_254A75DF0;
    v44 = (const void *)*MEMORY[0x24BDD8F10];
    sub_21090D6D4((uint64_t)&v162, (const void *)*MEMORY[0x24BDD8F10], (uint64_t *)&value);
    if (v24)
    {
      value.__r_.__value_.__r.__words[0] = a4;
      sub_21090D6D4((uint64_t)&v162, (const void *)*MEMORY[0x24BDD8F18], (uint64_t *)&value);
    }
    else
    {
      v55 = qword_254A75DF0 * *a1;
      if (v55 % HIDWORD(qword_254A75DF0))
        v56 = v55 / HIDWORD(qword_254A75DF0) + 1;
      else
        v56 = v55 / HIDWORD(qword_254A75DF0);
      value.__r_.__value_.__r.__words[0] = (v56 * HIDWORD(qword_254A75DF0));
      sub_21090D6D4((uint64_t)&v162, (const void *)*MEMORY[0x24BDD8F18], (uint64_t *)&value);
    }
    v57 = atomic_load((unsigned __int8 *)&qword_254A75E08);
    if ((v57 & 1) == 0 && __cxa_guard_acquire(&qword_254A75E08))
    {
      v152 = sub_2109E0914(875704422, 1u);
      if (!v153)
        sub_2108B1AA4();
      qword_254A75E00 = v152;
      __cxa_guard_release(&qword_254A75E08);
    }
    *(_OWORD *)&value.__r_.__value_.__r.__words[1] = 0uLL;
    value.__r_.__value_.__r.__words[0] = (std::string::size_type)&value.__r_.__value_.__l.__size_;
    sub_2109E55E0(&value, (CFMutableDictionaryRef *)__p);
    v161 = *(_OWORD *)__p;
    sub_2109E5580((uint64_t)&value, (char *)value.__r_.__value_.__l.__size_);
    v58 = a1[1];
    v59 = (*a1 & 1) + (*a1 >> 1);
    value.__r_.__value_.__r.__words[0] = v59;
    sub_21090D6D4((uint64_t)&v161, v42, (uint64_t *)&value);
    value.__r_.__value_.__r.__words[0] = (v58 & 1) + (v58 >> 1);
    sub_21090D6D4((uint64_t)&v161, v43, (uint64_t *)&value);
    value.__r_.__value_.__r.__words[0] = qword_254A75E00;
    sub_21090D6D4((uint64_t)&v161, v44, (uint64_t *)&value);
    if (v24)
    {
      value.__r_.__value_.__r.__words[0] = a4;
      sub_21090D6D4((uint64_t)&v161, (const void *)*MEMORY[0x24BDD8F18], (uint64_t *)&value);
    }
    else
    {
      if ((qword_254A75E00 * v59) % HIDWORD(qword_254A75E00))
        v88 = (qword_254A75E00 * v59) / HIDWORD(qword_254A75E00) + 1;
      else
        v88 = (qword_254A75E00 * v59) / HIDWORD(qword_254A75E00);
      value.__r_.__value_.__r.__words[0] = v88 * HIDWORD(qword_254A75E00);
      sub_21090D6D4((uint64_t)&v161, (const void *)*MEMORY[0x24BDD8F18], (uint64_t *)&value);
    }
    sub_21090CEA0(&value, (uint64_t)&v162);
    sub_21090CEA0(&value.__r_.__value_.__r.__words[2], (uint64_t)&v161);
    __p[0] = 0;
    __p[1] = 0;
    v160 = 0;
    v163 = __p;
    v164 = 0;
    v89 = operator new(0x20uLL);
    __p[0] = v89;
    __p[1] = v89;
    v160 = v89 + 4;
    sub_21090CEA0(v89, (uint64_t)&value);
    sub_21090CEA0(v89 + 2, (uint64_t)&value.__r_.__value_.__r.__words[2]);
    __p[1] = v89 + 4;
    sub_2109E3E3C(a6, (const void *)*MEMORY[0x24BDD8F88], (uint64_t *)__p);
    v90 = (char *)__p[0];
    if (__p[0])
    {
      v91 = (char *)__p[1];
      v92 = __p[0];
      if (__p[1] != __p[0])
      {
        do
        {
          v93 = (std::__shared_weak_count *)*((_QWORD *)v91 - 1);
          if (v93)
          {
            v94 = (unint64_t *)&v93->__shared_owners_;
            do
              v95 = __ldaxr(v94);
            while (__stlxr(v95 - 1, v94));
            if (!v95)
            {
              ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
              std::__shared_weak_count::__release_weak(v93);
            }
          }
          v91 -= 16;
        }
        while (v91 != v90);
        v92 = __p[0];
      }
      __p[1] = v90;
      operator delete(v92);
    }
    v96 = v166;
    if (v166)
    {
      v97 = (unint64_t *)&v166->__shared_owners_;
      do
        v98 = __ldaxr(v97);
      while (__stlxr(v98 - 1, v97));
      if (!v98)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
    v99 = (std::__shared_weak_count *)value.__r_.__value_.__l.__size_;
    if (value.__r_.__value_.__l.__size_)
    {
      v100 = (unint64_t *)(value.__r_.__value_.__l.__size_ + 8);
      do
        v101 = __ldaxr(v100);
      while (__stlxr(v101 - 1, v100));
      if (!v101)
      {
        ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
        std::__shared_weak_count::__release_weak(v99);
      }
    }
    v102 = (std::__shared_weak_count *)*((_QWORD *)&v161 + 1);
    if (*((_QWORD *)&v161 + 1))
    {
      v103 = (unint64_t *)(*((_QWORD *)&v161 + 1) + 8);
      do
        v104 = __ldaxr(v103);
      while (__stlxr(v104 - 1, v103));
      if (!v104)
      {
        ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
        std::__shared_weak_count::__release_weak(v102);
      }
    }
    v85 = (std::__shared_weak_count *)*((_QWORD *)&v162 + 1);
    if (!*((_QWORD *)&v162 + 1))
      return;
    v105 = (unint64_t *)(*((_QWORD *)&v162 + 1) + 8);
    do
      v87 = __ldaxr(v105);
    while (__stlxr(v87 - 1, v105));
    goto LABEL_240;
  }
  if (a2 == 875704438)
  {
    v37 = atomic_load((unsigned __int8 *)&qword_254A75DD8);
    if ((v37 & 1) == 0 && __cxa_guard_acquire(&qword_254A75DD8))
    {
      v142 = sub_2109E0914(875704438, 0);
      if (!v143)
        sub_2108B1AA4();
      qword_254A75DD0 = v142;
      __cxa_guard_release(&qword_254A75DD8);
    }
    *(_OWORD *)&value.__r_.__value_.__r.__words[1] = 0uLL;
    value.__r_.__value_.__r.__words[0] = (std::string::size_type)&value.__r_.__value_.__l.__size_;
    sub_2109E55E0(&value, (CFMutableDictionaryRef *)__p);
    v162 = *(_OWORD *)__p;
    sub_2109E5580((uint64_t)&value, (char *)value.__r_.__value_.__l.__size_);
    value.__r_.__value_.__r.__words[0] = *a1;
    v38 = (const void *)*MEMORY[0x24BDD8FA8];
    sub_21090D6D4((uint64_t)&v162, (const void *)*MEMORY[0x24BDD8FA8], (uint64_t *)&value);
    value.__r_.__value_.__r.__words[0] = a1[1];
    v39 = (const void *)*MEMORY[0x24BDD8F70];
    sub_21090D6D4((uint64_t)&v162, (const void *)*MEMORY[0x24BDD8F70], (uint64_t *)&value);
    value.__r_.__value_.__r.__words[0] = qword_254A75DD0;
    v40 = (const void *)*MEMORY[0x24BDD8F10];
    sub_21090D6D4((uint64_t)&v162, (const void *)*MEMORY[0x24BDD8F10], (uint64_t *)&value);
    if (v24)
    {
      value.__r_.__value_.__r.__words[0] = a4;
      sub_21090D6D4((uint64_t)&v162, (const void *)*MEMORY[0x24BDD8F18], (uint64_t *)&value);
    }
    else
    {
      v50 = qword_254A75DD0 * *a1;
      if (v50 % HIDWORD(qword_254A75DD0))
        v51 = v50 / HIDWORD(qword_254A75DD0) + 1;
      else
        v51 = v50 / HIDWORD(qword_254A75DD0);
      value.__r_.__value_.__r.__words[0] = (v51 * HIDWORD(qword_254A75DD0));
      sub_21090D6D4((uint64_t)&v162, (const void *)*MEMORY[0x24BDD8F18], (uint64_t *)&value);
    }
    v52 = atomic_load((unsigned __int8 *)&qword_254A75DE8);
    if ((v52 & 1) == 0 && __cxa_guard_acquire(&qword_254A75DE8))
    {
      v150 = sub_2109E0914(875704438, 1u);
      if (!v151)
        sub_2108B1AA4();
      qword_254A75DE0 = v150;
      __cxa_guard_release(&qword_254A75DE8);
    }
    *(_OWORD *)&value.__r_.__value_.__r.__words[1] = 0uLL;
    value.__r_.__value_.__r.__words[0] = (std::string::size_type)&value.__r_.__value_.__l.__size_;
    sub_2109E55E0(&value, (CFMutableDictionaryRef *)__p);
    v161 = *(_OWORD *)__p;
    sub_2109E5580((uint64_t)&value, (char *)value.__r_.__value_.__l.__size_);
    v53 = a1[1];
    v54 = (*a1 & 1) + (*a1 >> 1);
    value.__r_.__value_.__r.__words[0] = v54;
    sub_21090D6D4((uint64_t)&v161, v38, (uint64_t *)&value);
    value.__r_.__value_.__r.__words[0] = (v53 & 1) + (v53 >> 1);
    sub_21090D6D4((uint64_t)&v161, v39, (uint64_t *)&value);
    value.__r_.__value_.__r.__words[0] = qword_254A75DE0;
    sub_21090D6D4((uint64_t)&v161, v40, (uint64_t *)&value);
    if (v24)
    {
      value.__r_.__value_.__r.__words[0] = a4;
      sub_21090D6D4((uint64_t)&v161, (const void *)*MEMORY[0x24BDD8F18], (uint64_t *)&value);
    }
    else
    {
      if ((qword_254A75DE0 * v54) % HIDWORD(qword_254A75DE0))
        v68 = (qword_254A75DE0 * v54) / HIDWORD(qword_254A75DE0) + 1;
      else
        v68 = (qword_254A75DE0 * v54) / HIDWORD(qword_254A75DE0);
      value.__r_.__value_.__r.__words[0] = v68 * HIDWORD(qword_254A75DE0);
      sub_21090D6D4((uint64_t)&v161, (const void *)*MEMORY[0x24BDD8F18], (uint64_t *)&value);
    }
    sub_21090CEA0(&value, (uint64_t)&v162);
    sub_21090CEA0(&value.__r_.__value_.__r.__words[2], (uint64_t)&v161);
    __p[0] = 0;
    __p[1] = 0;
    v160 = 0;
    v163 = __p;
    v164 = 0;
    v69 = operator new(0x20uLL);
    __p[0] = v69;
    __p[1] = v69;
    v160 = v69 + 4;
    sub_21090CEA0(v69, (uint64_t)&value);
    sub_21090CEA0(v69 + 2, (uint64_t)&value.__r_.__value_.__r.__words[2]);
    __p[1] = v69 + 4;
    sub_2109E3E3C(a6, (const void *)*MEMORY[0x24BDD8F88], (uint64_t *)__p);
    v70 = (char *)__p[0];
    if (__p[0])
    {
      v71 = (char *)__p[1];
      v72 = __p[0];
      if (__p[1] != __p[0])
      {
        do
        {
          v73 = (std::__shared_weak_count *)*((_QWORD *)v71 - 1);
          if (v73)
          {
            v74 = (unint64_t *)&v73->__shared_owners_;
            do
              v75 = __ldaxr(v74);
            while (__stlxr(v75 - 1, v74));
            if (!v75)
            {
              ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
              std::__shared_weak_count::__release_weak(v73);
            }
          }
          v71 -= 16;
        }
        while (v71 != v70);
        v72 = __p[0];
      }
      __p[1] = v70;
      operator delete(v72);
    }
    v76 = v166;
    if (v166)
    {
      v77 = (unint64_t *)&v166->__shared_owners_;
      do
        v78 = __ldaxr(v77);
      while (__stlxr(v78 - 1, v77));
      if (!v78)
      {
        ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
        std::__shared_weak_count::__release_weak(v76);
      }
    }
    v79 = (std::__shared_weak_count *)value.__r_.__value_.__l.__size_;
    if (value.__r_.__value_.__l.__size_)
    {
      v80 = (unint64_t *)(value.__r_.__value_.__l.__size_ + 8);
      do
        v81 = __ldaxr(v80);
      while (__stlxr(v81 - 1, v80));
      if (!v81)
      {
        ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
        std::__shared_weak_count::__release_weak(v79);
      }
    }
    v82 = (std::__shared_weak_count *)*((_QWORD *)&v161 + 1);
    if (*((_QWORD *)&v161 + 1))
    {
      v83 = (unint64_t *)(*((_QWORD *)&v161 + 1) + 8);
      do
        v84 = __ldaxr(v83);
      while (__stlxr(v84 - 1, v83));
      if (!v84)
      {
        ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
        std::__shared_weak_count::__release_weak(v82);
      }
    }
    v85 = (std::__shared_weak_count *)*((_QWORD *)&v162 + 1);
    if (!*((_QWORD *)&v162 + 1))
      return;
    v86 = (unint64_t *)(*((_QWORD *)&v162 + 1) + 8);
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    goto LABEL_240;
  }
  if (a2 != 875836518)
    goto LABEL_267;
  v26 = atomic_load((unsigned __int8 *)&qword_254A75E38);
  if ((v26 & 1) == 0 && __cxa_guard_acquire(&qword_254A75E38))
  {
    v148 = sub_2109E0914(875836518, 0);
    if (!v149)
      sub_2108B1AA4();
    qword_254A75E30 = v148;
    __cxa_guard_release(&qword_254A75E38);
  }
  *(_OWORD *)&value.__r_.__value_.__r.__words[1] = 0uLL;
  value.__r_.__value_.__r.__words[0] = (std::string::size_type)&value.__r_.__value_.__l.__size_;
  sub_2109E55E0(&value, (CFMutableDictionaryRef *)__p);
  v162 = *(_OWORD *)__p;
  sub_2109E5580((uint64_t)&value, (char *)value.__r_.__value_.__l.__size_);
  value.__r_.__value_.__r.__words[0] = *a1;
  v27 = (const void *)*MEMORY[0x24BDD8FA8];
  sub_21090D6D4((uint64_t)&v162, (const void *)*MEMORY[0x24BDD8FA8], (uint64_t *)&value);
  value.__r_.__value_.__r.__words[0] = a1[1];
  v28 = (const void *)*MEMORY[0x24BDD8F70];
  sub_21090D6D4((uint64_t)&v162, (const void *)*MEMORY[0x24BDD8F70], (uint64_t *)&value);
  value.__r_.__value_.__r.__words[0] = qword_254A75E30;
  v29 = (const void *)*MEMORY[0x24BDD8F10];
  sub_21090D6D4((uint64_t)&v162, (const void *)*MEMORY[0x24BDD8F10], (uint64_t *)&value);
  if (v24)
  {
    value.__r_.__value_.__r.__words[0] = a4;
    sub_21090D6D4((uint64_t)&v162, (const void *)*MEMORY[0x24BDD8F18], (uint64_t *)&value);
  }
  else
  {
    v64 = qword_254A75E30 * *a1;
    if (v64 % HIDWORD(qword_254A75E30))
      v65 = v64 / HIDWORD(qword_254A75E30) + 1;
    else
      v65 = v64 / HIDWORD(qword_254A75E30);
    value.__r_.__value_.__r.__words[0] = (v65 * HIDWORD(qword_254A75E30));
    sub_21090D6D4((uint64_t)&v162, (const void *)*MEMORY[0x24BDD8F18], (uint64_t *)&value);
  }
  v66 = atomic_load((unsigned __int8 *)&qword_254A75E48);
  if ((v66 & 1) == 0 && __cxa_guard_acquire(&qword_254A75E48))
  {
    v156 = sub_2109E0914(875836518, 1u);
    if (!v157)
      sub_2108B1AA4();
    qword_254A75E40 = v156;
    __cxa_guard_release(&qword_254A75E48);
  }
  *(_OWORD *)&value.__r_.__value_.__r.__words[1] = 0uLL;
  value.__r_.__value_.__r.__words[0] = (std::string::size_type)&value.__r_.__value_.__l.__size_;
  sub_2109E55E0(&value, (CFMutableDictionaryRef *)__p);
  v161 = *(_OWORD *)__p;
  sub_2109E5580((uint64_t)&value, (char *)value.__r_.__value_.__l.__size_);
  v67 = *(_QWORD *)a1;
  value.__r_.__value_.__r.__words[0] = v67;
  sub_21090D6D4((uint64_t)&v161, v27, (uint64_t *)&value);
  value.__r_.__value_.__r.__words[0] = HIDWORD(v67);
  sub_21090D6D4((uint64_t)&v161, v28, (uint64_t *)&value);
  value.__r_.__value_.__r.__words[0] = qword_254A75E40;
  sub_21090D6D4((uint64_t)&v161, v29, (uint64_t *)&value);
  if (v24)
  {
    value.__r_.__value_.__r.__words[0] = a4;
    sub_21090D6D4((uint64_t)&v161, (const void *)*MEMORY[0x24BDD8F18], (uint64_t *)&value);
  }
  else
  {
    if ((qword_254A75E40 * v67) % HIDWORD(qword_254A75E40))
      v124 = (qword_254A75E40 * v67) / HIDWORD(qword_254A75E40) + 1;
    else
      v124 = (qword_254A75E40 * v67) / HIDWORD(qword_254A75E40);
    value.__r_.__value_.__r.__words[0] = v124 * HIDWORD(qword_254A75E40);
    sub_21090D6D4((uint64_t)&v161, (const void *)*MEMORY[0x24BDD8F18], (uint64_t *)&value);
  }
  sub_21090CEA0(&value, (uint64_t)&v162);
  sub_21090CEA0(&value.__r_.__value_.__r.__words[2], (uint64_t)&v161);
  __p[0] = 0;
  __p[1] = 0;
  v160 = 0;
  v163 = __p;
  v164 = 0;
  v125 = operator new(0x20uLL);
  __p[0] = v125;
  __p[1] = v125;
  v160 = v125 + 4;
  sub_21090CEA0(v125, (uint64_t)&value);
  sub_21090CEA0(v125 + 2, (uint64_t)&value.__r_.__value_.__r.__words[2]);
  __p[1] = v125 + 4;
  sub_2109E3E3C(a6, (const void *)*MEMORY[0x24BDD8F88], (uint64_t *)__p);
  v126 = (char *)__p[0];
  if (__p[0])
  {
    v127 = (char *)__p[1];
    v128 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        v129 = (std::__shared_weak_count *)*((_QWORD *)v127 - 1);
        if (v129)
        {
          v130 = (unint64_t *)&v129->__shared_owners_;
          do
            v131 = __ldaxr(v130);
          while (__stlxr(v131 - 1, v130));
          if (!v131)
          {
            ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
            std::__shared_weak_count::__release_weak(v129);
          }
        }
        v127 -= 16;
      }
      while (v127 != v126);
      v128 = __p[0];
    }
    __p[1] = v126;
    operator delete(v128);
  }
  v132 = v166;
  if (v166)
  {
    v133 = (unint64_t *)&v166->__shared_owners_;
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }
  v135 = (std::__shared_weak_count *)value.__r_.__value_.__l.__size_;
  if (value.__r_.__value_.__l.__size_)
  {
    v136 = (unint64_t *)(value.__r_.__value_.__l.__size_ + 8);
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
      std::__shared_weak_count::__release_weak(v135);
    }
  }
  v138 = (std::__shared_weak_count *)*((_QWORD *)&v161 + 1);
  if (*((_QWORD *)&v161 + 1))
  {
    v139 = (unint64_t *)(*((_QWORD *)&v161 + 1) + 8);
    do
      v140 = __ldaxr(v139);
    while (__stlxr(v140 - 1, v139));
    if (!v140)
    {
      ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
      std::__shared_weak_count::__release_weak(v138);
    }
  }
  v85 = (std::__shared_weak_count *)*((_QWORD *)&v162 + 1);
  if (*((_QWORD *)&v162 + 1))
  {
    v141 = (unint64_t *)(*((_QWORD *)&v162 + 1) + 8);
    do
      v87 = __ldaxr(v141);
    while (__stlxr(v87 - 1, v141));
    goto LABEL_240;
  }
}

void sub_2109E2400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  __cxa_guard_abort(&qword_254A75E48);
  sub_2108A894C((uint64_t)va);
  sub_2108A894C(v7);
  _Unwind_Resume(a1);
}

void sub_2109E2428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  __cxa_guard_abort(&qword_254A75E28);
  sub_2108A894C((uint64_t)va);
  sub_2108A894C(v7);
  _Unwind_Resume(a1);
}

void sub_2109E2450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  __cxa_guard_abort(&qword_254A75E08);
  sub_2108A894C((uint64_t)va);
  sub_2108A894C(v7);
  _Unwind_Resume(a1);
}

void sub_2109E2478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  __cxa_guard_abort(&qword_254A75DE8);
  sub_2108A894C((uint64_t)va);
  sub_2108A894C(v7);
  _Unwind_Resume(a1);
}

void sub_2109E24A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  __cxa_guard_abort(&qword_254A75E38);
  sub_2108A894C(v1);
  _Unwind_Resume(a1);
}

void sub_2109E24C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  __cxa_guard_abort(&qword_254A75E18);
  sub_2108A894C(v1);
  _Unwind_Resume(a1);
}

void sub_2109E24E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  __cxa_guard_abort(&qword_254A75DF8);
  sub_2108A894C(v1);
  _Unwind_Resume(a1);
}

void sub_2109E2500(_Unwind_Exception *a1)
{
  uint64_t v1;

  __cxa_guard_abort(&qword_254A75DD8);
  sub_2108A894C(v1);
  _Unwind_Resume(a1);
}

void sub_2109E2520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  sub_2108A894C((uint64_t)&a13);
  sub_2108A894C((uint64_t)&a15);
  sub_2108A894C(v25);
  _Unwind_Resume(a1);
}

void sub_2109E27C4()
{
  JUMPOUT(0x2109E279CLL);
}

void sub_2109E27CC()
{
  JUMPOUT(0x2109E279CLL);
}

void sub_2109E27D4()
{
  JUMPOUT(0x2109E279CLL);
}

void sub_2109E27DC()
{
  JUMPOUT(0x2109E279CLL);
}

void sub_2109E27E4()
{
  JUMPOUT(0x2109E27A4);
}

void sub_2109E27EC()
{
  JUMPOUT(0x2109E27A4);
}

void sub_2109E27F4()
{
  JUMPOUT(0x2109E27A4);
}

void sub_2109E27FC()
{
  JUMPOUT(0x2109E27A4);
}

void sub_2109E2804()
{
  JUMPOUT(0x2109E27A4);
}

void sub_2109E280C()
{
  JUMPOUT(0x2109E27A4);
}

void sub_2109E2814()
{
  JUMPOUT(0x2109E27A4);
}

void sub_2109E281C()
{
  JUMPOUT(0x2109E27A4);
}

void sub_2109E2824()
{
  JUMPOUT(0x2109E27A4);
}

void sub_2109E282C()
{
  JUMPOUT(0x2109E27A4);
}

void sub_2109E2834()
{
  JUMPOUT(0x2109E27A4);
}

void sub_2109E283C()
{
  JUMPOUT(0x2109E27A4);
}

void sub_2109E2844()
{
  JUMPOUT(0x2109E27A4);
}

void sub_2109E284C()
{
  JUMPOUT(0x2109E27A4);
}

void sub_2109E2854()
{
  JUMPOUT(0x2109E27A4);
}

void sub_2109E285C()
{
  JUMPOUT(0x2109E27A4);
}

void sub_2109E2864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,char *a21)
{
  uint64_t v21;

  sub_2109E5580((uint64_t)&a20, a21);
  sub_2108A894C((uint64_t)&a15);
  sub_2108A894C(v21);
  _Unwind_Resume(a1);
}

void sub_2109E2898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  sub_2108A894C((uint64_t)va);
  sub_2108A894C(v7);
  _Unwind_Resume(a1);
}

void sub_2109E28B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  sub_2108A894C((uint64_t)va);
  sub_2108A894C(v7);
  _Unwind_Resume(a1);
}

void sub_2109E28D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  sub_2108A894C((uint64_t)va);
  sub_2108A894C(v7);
  _Unwind_Resume(a1);
}

void sub_2109E28EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  sub_2108A894C((uint64_t)va);
  sub_2108A894C(v7);
  _Unwind_Resume(a1);
}

void sub_2109E2908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  sub_2108A894C((uint64_t)va);
  sub_2108A894C(v7);
  _Unwind_Resume(a1);
}

void sub_2109E2924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  sub_2108A894C((uint64_t)va);
  sub_2108A894C(v7);
  _Unwind_Resume(a1);
}

void sub_2109E2940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  sub_2108A894C((uint64_t)va);
  sub_2108A894C(v7);
  _Unwind_Resume(a1);
}

void sub_2109E295C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  sub_2108A894C((uint64_t)va);
  sub_2108A894C(v7);
  _Unwind_Resume(a1);
}

void sub_2109E2978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  sub_2108A894C((uint64_t)va);
  sub_2108A894C(v7);
  _Unwind_Resume(a1);
}

void sub_2109E2994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  sub_2108A894C((uint64_t)va);
  sub_2108A894C(v7);
  _Unwind_Resume(a1);
}

void sub_2109E29B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  sub_2108A894C((uint64_t)va);
  sub_2108A894C(v7);
  _Unwind_Resume(a1);
}

void sub_2109E29CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  sub_2108A894C((uint64_t)va);
  sub_2108A894C(v7);
  _Unwind_Resume(a1);
}

void sub_2109E29E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,char *a21)
{
  uint64_t v21;

  sub_2109E5580((uint64_t)&a20, a21);
  sub_2108A894C(v21);
  _Unwind_Resume(a1);
}

void sub_2109E2A14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v12;
  va_list va;

  va_start(va, a12);
  sub_2108A894C((uint64_t)va);
  sub_2108A894C(v12);
  _Unwind_Resume(a1);
}

void sub_2109E2A30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  if (a25 < 0)
  {
    operator delete(__p);
    sub_2108A894C(v25);
    _Unwind_Resume(a1);
  }
  sub_2108A894C(v25);
  _Unwind_Resume(a1);
}

void sub_2109E2A54(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108A894C(v1);
  _Unwind_Resume(a1);
}

void sub_2109E2A68(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108A894C(v1);
  _Unwind_Resume(a1);
}

void sub_2109E2A7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,char *a21)
{
  sub_2109E5580((uint64_t)&a20, a21);
  _Unwind_Resume(a1);
}

void sub_2109E2A94(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108A894C(v1);
  _Unwind_Resume(a1);
}

void sub_2109E2ABC(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::__shared_weak_count *v4;
  CFDictionaryRef v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  void *value;

  v5 = *(CFDictionaryRef *)a1;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v4)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (!v5)
      goto LABEL_10;
  }
  else
  {
LABEL_6:
    if (!v5)
      goto LABEL_10;
  }
  value = 0;
  if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)a1, CFSTR("IOSurfaceName"), (const void **)&value))
  {
    sub_2109E4D2C((CFIndex)value, a2);
    return;
  }
LABEL_10:
  a2->__r_.__value_.__s.__data_[0] = 0;
  a2[1].__r_.__value_.__s.__data_[0] = 0;
}

uint64_t sub_2109E2B80(uint64_t a1, uint64_t *a2)
{
  std::string __p;

  sub_2109E2C00(a2, &__p);
  sub_2109E3CE4(a1, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return a1;
}

void sub_2109E2BE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2109E2C00(uint64_t *a1@<X0>, std::string *a2@<X8>)
{
  unsigned __int8 v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  _QWORD v9[8];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v4 = atomic_load((unsigned __int8 *)&qword_254A75DC8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A75DC8))
  {
    sub_2109E2D40();
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A75E50, &dword_21089F000);
    __cxa_guard_release(&qword_254A75DC8);
  }
  v5 = byte_254A75E50;
  v6 = byte_254A75E50[23];
  if (byte_254A75E50[23] < 0)
  {
    v6 = *(_QWORD *)&byte_254A75E50[8];
    v5 = *(char **)byte_254A75E50;
  }
  v9[0] = v5;
  v9[1] = v6;
  v9[2] = "; ";
  v9[3] = 2;
  v7 = *((unsigned __int8 *)a1 + 23);
  if ((v7 & 0x80u) == 0)
    v8 = a1;
  else
    v8 = (uint64_t *)*a1;
  if ((v7 & 0x80u) != 0)
    v7 = a1[1];
  v9[4] = v8;
  v9[5] = v7;
  v9[6] = "; X/X";
  v9[7] = 5;
  sub_2108BBA08((uint64_t)v9, (uint64_t)&v10, 0, 0, a2);
}

void sub_2109E2D24(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A75DC8);
  _Unwind_Resume(a1);
}

void sub_2109E2D40()
{
  __int128 v0;
  unint64_t *v1;
  unint64_t v2;
  unint64_t v3;
  std::__shared_weak_count_vtbl *v4;
  std::__fs::filesystem::path::__string_view v5;
  std::__fs::filesystem::path *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v7;
  std::basic_string_view<_CharT, _Traits>::size_type v8;
  std::__shared_weak_count *size;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  CFBundleRef MainBundle;
  std::string::size_type v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  std::__shared_weak_count_vtbl *v26;
  std::__fs::filesystem::path::__string_view v27;
  std::__fs::filesystem::path *v28;
  std::basic_string_view<_CharT, _Traits>::size_type v29;
  std::basic_string_view<_CharT, _Traits>::size_type v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__fs::filesystem::path::__string_view v37;
  std::string::size_type v38;
  std::__fs::filesystem::path *v39;
  std::string::size_type v40;
  std::__fs::filesystem::path *p_bundle;
  std::__fs::filesystem::path bundle;
  __int128 v43;
  std::__fs::filesystem::path v44;
  std::__fs::filesystem::path __p;
  std::__fs::filesystem::path __dst;
  std::__fs::filesystem::path v47;
  uint64_t v48;
  std::__fs::filesystem::path *v49;
  std::string::size_type v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  sub_2109E46D0((uint64_t)&bundle);
  v0 = *(_OWORD *)&bundle.__pn_.__r_.__value_.__l.__data_;
  if (!bundle.__pn_.__r_.__value_.__l.__size_)
    goto LABEL_6;
  v1 = (unint64_t *)(bundle.__pn_.__r_.__value_.__l.__size_ + 8);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  do
    v3 = __ldaxr(v1);
  while (__stlxr(v3 - 1, v1));
  if (!v3)
  {
    (*(void (**)(_QWORD))(**((_QWORD **)&v0 + 1) + 16))(*((_QWORD *)&v0 + 1));
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v0 + 1));
    if ((_QWORD)v0)
      goto LABEL_10;
  }
  else
  {
LABEL_6:
    if ((_QWORD)v0)
      goto LABEL_10;
  }
  if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Foundation/src/BundleRef.cpp", 54, (uint64_t)"IsValid()", 9, (uint64_t)&unk_210A09F61, 0, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
LABEL_10:
  v4 = (std::__shared_weak_count_vtbl *)CFBundleCopyExecutableURL((CFBundleRef)bundle.__pn_.__r_.__value_.__l.__data_);
  sub_2109E5FF0((std::__shared_weak_count_vtbl **)&v44, v4, 0);
  sub_2109E6498((uint64_t)&v44, (uint64_t)&v47);
  v5 = std::__fs::filesystem::path::__filename(&v47);
  if (v5.__size_ > 0x7FFFFFFFFFFFFFF7)
    sub_2108A4B7C();
  if (v5.__size_ >= 0x17)
  {
    v7 = (v5.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5.__size_ | 7) != 0x17)
      v7 = v5.__size_ | 7;
    v8 = v7 + 1;
    p_dst = (std::__fs::filesystem::path *)operator new(v7 + 1);
    __dst.__pn_.__r_.__value_.__l.__size_ = v5.__size_;
    __dst.__pn_.__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    __dst.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((_BYTE *)&__dst.__pn_.__r_.__value_.__s + 23) = v5.__size_;
    p_dst = &__dst;
    if (!v5.__size_)
      goto LABEL_18;
  }
  memmove(p_dst, v5.__data_, v5.__size_);
LABEL_18:
  p_dst->__pn_.__r_.__value_.__s.__data_[v5.__size_] = 0;
  __p = __dst;
  if ((_BYTE)v48 && SHIBYTE(v47.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__pn_.__r_.__value_.__l.__data_);
  size = (std::__shared_weak_count *)v44.__pn_.__r_.__value_.__l.__size_;
  if (v44.__pn_.__r_.__value_.__l.__size_)
  {
    v10 = (unint64_t *)(v44.__pn_.__r_.__value_.__l.__size_ + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v12 = (std::__shared_weak_count *)bundle.__pn_.__r_.__value_.__l.__size_;
  if (bundle.__pn_.__r_.__value_.__l.__size_)
  {
    v13 = (unint64_t *)(bundle.__pn_.__r_.__value_.__l.__size_ + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  MainBundle = CFBundleGetMainBundle();
  sub_2109E47D0(&__dst, MainBundle);
  v16 = __dst.__pn_.__r_.__value_.__r.__words[0];
  v43 = *(_OWORD *)&__dst.__pn_.__r_.__value_.__l.__data_;
  if (!__dst.__pn_.__r_.__value_.__l.__size_)
    goto LABEL_44;
  v17 = (unint64_t *)(__dst.__pn_.__r_.__value_.__l.__size_ + 8);
  do
    v18 = __ldxr(v17);
  while (__stxr(v18 + 1, v17));
  v19 = (std::__shared_weak_count *)__dst.__pn_.__r_.__value_.__l.__size_;
  if (__dst.__pn_.__r_.__value_.__l.__size_)
  {
    v20 = (unint64_t *)(__dst.__pn_.__r_.__value_.__l.__size_ + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = (std::__shared_weak_count *)*((_QWORD *)&v43 + 1);
  v16 = v43;
  if (!*((_QWORD *)&v43 + 1))
    goto LABEL_44;
  v23 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
  do
    v24 = __ldxr(v23);
  while (__stxr(v24 + 1, v23));
  do
    v25 = __ldaxr(v23);
  while (__stlxr(v25 - 1, v23));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
    if (v16)
      goto LABEL_46;
  }
  else
  {
LABEL_44:
    if (v16)
      goto LABEL_46;
  }
  if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Foundation/src/BundleRef.cpp", 54, (uint64_t)"IsValid()", 9, (uint64_t)&unk_210A09F61, 0, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
LABEL_46:
  v26 = (std::__shared_weak_count_vtbl *)CFBundleCopyExecutableURL((CFBundleRef)v43);
  sub_2109E5FF0((std::__shared_weak_count_vtbl **)&bundle, v26, 0);
  sub_2109E6498((uint64_t)&bundle, (uint64_t)&v47);
  v27 = std::__fs::filesystem::path::__filename(&v47);
  if (v27.__size_ > 0x7FFFFFFFFFFFFFF7)
    sub_2108A4B7C();
  if (v27.__size_ >= 0x17)
  {
    v29 = (v27.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27.__size_ | 7) != 0x17)
      v29 = v27.__size_ | 7;
    v30 = v29 + 1;
    v28 = (std::__fs::filesystem::path *)operator new(v29 + 1);
    __dst.__pn_.__r_.__value_.__l.__size_ = v27.__size_;
    __dst.__pn_.__r_.__value_.__r.__words[2] = v30 | 0x8000000000000000;
    __dst.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
  }
  else
  {
    *((_BYTE *)&__dst.__pn_.__r_.__value_.__s + 23) = v27.__size_;
    v28 = &__dst;
    if (!v27.__size_)
      goto LABEL_54;
  }
  memmove(v28, v27.__data_, v27.__size_);
LABEL_54:
  v28->__pn_.__r_.__value_.__s.__data_[v27.__size_] = 0;
  v44 = __dst;
  if ((_BYTE)v48 && SHIBYTE(v47.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__pn_.__r_.__value_.__l.__data_);
  v31 = (std::__shared_weak_count *)bundle.__pn_.__r_.__value_.__l.__size_;
  if (bundle.__pn_.__r_.__value_.__l.__size_)
  {
    v32 = (unint64_t *)(bundle.__pn_.__r_.__value_.__l.__size_ + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = (std::__shared_weak_count *)*((_QWORD *)&v43 + 1);
  if (*((_QWORD *)&v43 + 1))
  {
    v35 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  if ((__p.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v37.__data_ = (const std::string_view::value_type *)&__p;
  else
    v37.__data_ = (const std::string_view::value_type *)__p.__pn_.__r_.__value_.__r.__words[0];
  if ((__p.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v37.__size_ = HIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]);
  else
    v37.__size_ = __p.__pn_.__r_.__value_.__l.__size_;
  if (std::__fs::filesystem::path::__compare(&v44, v37))
  {
    if (SHIBYTE(v44.__pn_.__r_.__value_.__r.__words[2]) < 0)
      sub_2108B314C(&__dst, v44.__pn_.__r_.__value_.__l.__data_, v44.__pn_.__r_.__value_.__l.__size_);
    else
      __dst = v44;
    if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
      sub_2108B314C(&bundle, __p.__pn_.__r_.__value_.__l.__data_, __p.__pn_.__r_.__value_.__l.__size_);
    else
      bundle = __p;
    v38 = HIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]);
    v39 = &__dst;
    if ((__dst.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    {
      v38 = __dst.__pn_.__r_.__value_.__l.__size_;
      v39 = (std::__fs::filesystem::path *)__dst.__pn_.__r_.__value_.__r.__words[0];
    }
    v47.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
    v47.__pn_.__r_.__value_.__l.__size_ = v38;
    v47.__pn_.__r_.__value_.__r.__words[2] = (std::string::size_type)"/";
    v48 = 1;
    v40 = HIBYTE(bundle.__pn_.__r_.__value_.__r.__words[2]);
    p_bundle = &bundle;
    if ((bundle.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    {
      v40 = bundle.__pn_.__r_.__value_.__l.__size_;
      p_bundle = (std::__fs::filesystem::path *)bundle.__pn_.__r_.__value_.__r.__words[0];
    }
    v49 = p_bundle;
    v50 = v40;
    sub_2108BBA08((uint64_t)&v47, (uint64_t)&v51, 0, 0, (std::string *)byte_254A75E50);
    if (SHIBYTE(bundle.__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(bundle.__pn_.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_94;
    }
    else if ((SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_94;
    }
    operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
  }
  else if (SHIBYTE(v44.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(byte_254A75E50, v44.__pn_.__r_.__value_.__l.__data_, v44.__pn_.__r_.__value_.__l.__size_);
  }
  else
  {
    *(std::__fs::filesystem::path *)byte_254A75E50 = v44;
  }
LABEL_94:
  if ((SHIBYTE(v44.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_98:
    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v44.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_98;
}

void sub_2109E3334(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a23 < 0)
  {
    operator delete(__p);
    if (a30 < 0)
      goto LABEL_6;
  }
  else if (a30 < 0)
  {
LABEL_6:
    operator delete(a25);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_2109E346C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2108A894C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2109E3480(uint64_t a1, int a2)
{
  uint64_t result;
  char *v4;
  __int128 v5;
  int v6;
  std::string v7;
  _QWORD v8[5];
  _QWORD *v9;

  v4 = (char *)operator new(0x20uLL);
  v5 = xmmword_210A0ABB0;
  strcpy(v4, "Unsupported pixel format value ");
  v6 = 1;
  std::to_string(&v7, a2);
  v8[0] = &v4;
  v8[1] = &v7;
  v8[2] = &v4;
  v8[3] = &v7;
  v8[4] = &v7;
  v9 = v8;
  sub_2108BA5A4((uint64_t)&v9, (uint64_t)&v4);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (v6 == -1)
    sub_2108B9060();
  v8[0] = &v7;
  result = ((uint64_t (*)(_QWORD *, char **))off_24CA84EA8[v6])(v8, &v4);
  if (v6 != -1)
    return ((uint64_t (*)(_QWORD *, char **))off_24CA84E78[v6])(v8, &v4);
  return result;
}

void sub_2109E35B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2108B9008((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2109E35D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    sub_2108B9008((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x2109E35C4);
}

void sub_2109E35F8(char *a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  _OWORD *v24;
  __int128 *v25;
  unint64_t v26;
  __int128 v27;
  char v28;
  char *v29;
  void *__p[2];
  char v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v10 = a1;
    v11 = 0;
    *(_QWORD *)a6 = 0;
    *(_QWORD *)(a6 + 8) = 0;
    *(_QWORD *)(a6 + 16) = 0;
    v29 = a1;
    __p[0] = a1;
    v12 = &a1[a2];
    while (1)
    {
      v15 = v12;
      if (v10 != v12)
      {
        if (a4)
        {
          v15 = v10;
LABEL_10:
          v16 = a4;
          v17 = a3;
          while (*v17 != *v15)
          {
            ++v17;
            if (!--v16)
            {
              if (++v15 != v12)
                goto LABEL_10;
              goto LABEL_14;
            }
          }
        }
        else
        {
LABEL_14:
          v15 = v12;
        }
      }
      v29 = v15;
      if (a5 != 1 && v15 == v10)
        goto LABEL_6;
      if ((unint64_t)v11 >= *(_QWORD *)(a6 + 16))
      {
        v11 = sub_2109E3894((void **)a6, (uint64_t *)__p, &v29);
        goto LABEL_5;
      }
      v18 = v15 - v10;
      if ((unint64_t)(v15 - v10) >= 0x7FFFFFFFFFFFFFF8)
        sub_2108A4B7C();
      if (v18 > 0x16)
      {
        v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v18 | 7) != 0x17)
          v21 = v18 | 7;
        v22 = v21 + 1;
        v19 = (char *)operator new(v21 + 1);
        *((_QWORD *)v11 + 1) = v18;
        *((_QWORD *)v11 + 2) = v22 | 0x8000000000000000;
        *(_QWORD *)v11 = v19;
        v20 = v15 - v10;
        if (v15 == v10)
        {
LABEL_3:
          v13 = v19;
          goto LABEL_4;
        }
      }
      else
      {
        v11[23] = v18;
        v19 = v11;
        v20 = v15 - v10;
        if (v15 == v10)
          goto LABEL_3;
      }
      if (v20 < 0x20 || (unint64_t)(v19 - v10) < 0x20)
      {
        v23 = v10;
        v13 = v19;
      }
      else
      {
        v23 = &v10[v20 & 0xFFFFFFFFFFFFFFE0];
        v13 = &v19[v20 & 0xFFFFFFFFFFFFFFE0];
        v24 = v19 + 16;
        v25 = (__int128 *)(v10 + 16);
        v26 = v20 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v27 = *v25;
          *(v24 - 1) = *(v25 - 1);
          *v24 = v27;
          v24 += 2;
          v25 += 2;
          v26 -= 32;
        }
        while (v26);
        if (v20 == (v20 & 0xFFFFFFFFFFFFFFE0))
          goto LABEL_4;
      }
      do
      {
        v28 = *v23++;
        *v13++ = v28;
      }
      while (v23 != v15);
LABEL_4:
      *v13 = 0;
      v11 += 24;
      *(_QWORD *)(a6 + 8) = v11;
LABEL_5:
      *(_QWORD *)(a6 + 8) = v11;
      v10 = v29;
LABEL_6:
      __p[0] = v10 + 1;
      if (v10++ == v12)
        return;
    }
  }
  if (a5)
  {
    v31 = 0;
    LOBYTE(__p[0]) = 0;
    sub_2108B9228((_QWORD *)a6, (uint64_t)__p, 1uLL);
    if (v31 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_QWORD *)a6 = 0;
    *(_QWORD *)(a6 + 8) = 0;
    *(_QWORD *)(a6 + 16) = 0;
  }
}

void sub_2109E3854(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

char *sub_2109E3894(void **a1, uint64_t *a2, char **a3)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  char *v14;
  char *v15;
  _OWORD *v16;
  __int128 *v17;
  unint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char v23;
  char *v24;
  void *v25;
  void **v26;
  void **v27;
  __int128 v28;
  void **v29;
  char *v31;
  char *v32;
  char *v33;

  v4 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_2108B327C();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v5)
    v5 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v5;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      sub_2108B2B1C();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v4];
  v31 = v10;
  v32 = v10;
  v33 = &v9[24 * v8];
  v11 = *a2;
  v12 = *a3;
  v13 = (unint64_t)&(*a3)[-v11];
  if (v13 >= 0x7FFFFFFFFFFFFFF8)
    sub_2108A4B7C();
  if (v13 <= 0x16)
  {
    v10[23] = v13;
    if ((char *)v11 != v12)
      goto LABEL_14;
LABEL_23:
    v15 = v10;
    goto LABEL_26;
  }
  v20 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v13 | 7) != 0x17)
    v20 = v13 | 7;
  v21 = v20 + 1;
  v22 = (char *)operator new(v20 + 1);
  *((_QWORD *)v10 + 1) = v13;
  *((_QWORD *)v10 + 2) = v21 | 0x8000000000000000;
  *(_QWORD *)v10 = v22;
  v10 = v22;
  if ((char *)v11 == v12)
    goto LABEL_23;
LABEL_14:
  if (v13 < 0x20 || (unint64_t)&v10[-v11] < 0x20)
  {
    v14 = (char *)v11;
    v15 = v10;
    do
    {
LABEL_25:
      v23 = *v14++;
      *v15++ = v23;
    }
    while (v14 != v12);
    goto LABEL_26;
  }
  v14 = (char *)(v11 + (v13 & 0xFFFFFFFFFFFFFFE0));
  v15 = &v10[v13 & 0xFFFFFFFFFFFFFFE0];
  v16 = v10 + 16;
  v17 = (__int128 *)(v11 + 16);
  v18 = v13 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    v19 = *v17;
    *(v16 - 1) = *(v17 - 1);
    *v16 = v19;
    v16 += 2;
    v17 += 2;
    v18 -= 32;
  }
  while (v18);
  if (v13 != (v13 & 0x7FFFFFFFFFFFFFE0))
    goto LABEL_25;
LABEL_26:
  *v15 = 0;
  v24 = v31;
  v25 = v32 + 24;
  v26 = (void **)*a1;
  v27 = (void **)a1[1];
  if (v27 == *a1)
  {
    *a1 = v31;
    a1[1] = v25;
    a1[2] = v33;
  }
  else
  {
    do
    {
      v28 = *(_OWORD *)(v27 - 3);
      *((_QWORD *)v24 - 1) = *(v27 - 1);
      *(_OWORD *)(v24 - 24) = v28;
      v24 -= 24;
      *(v27 - 2) = 0;
      *(v27 - 1) = 0;
      *(v27 - 3) = 0;
      v27 -= 3;
    }
    while (v27 != v26);
    v27 = (void **)*a1;
    v29 = (void **)a1[1];
    *a1 = v24;
    a1[1] = v25;
    a1[2] = v33;
    while (v29 != v27)
    {
      if (*((char *)v29 - 1) < 0)
        operator delete(*(v29 - 3));
      v29 -= 3;
    }
  }
  if (v27)
    operator delete(v27);
  return v32 + 24;
}

void sub_2109E3AE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2108B3680((uint64_t)va);
  _Unwind_Resume(a1);
}

void **sub_2109E3AF8(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 1);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void ***sub_2109E3B90(void ***result)
{
  void ***v1;
  void **v2;
  char *v3;
  char *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (char *)**result;
    if (v3)
    {
      v4 = (char *)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {
          v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
          if (v6)
          {
            p_shared_owners = (unint64_t *)&v6->__shared_owners_;
            do
              v8 = __ldaxr(p_shared_owners);
            while (__stlxr(v8 - 1, p_shared_owners));
            if (!v8)
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
          }
          v4 -= 16;
        }
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

_QWORD *sub_2109E3C58(_QWORD *a1, CFTypeRef cf)
{
  _QWORD *v4;

  if (cf)
    CFRetain(cf);
  *a1 = cf;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24CA7D768;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = cf;
  a1[1] = v4;
  return a1;
}

void sub_2109E3CB8(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_2109E3CD0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_2109E3CE4(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  CFMutableDictionaryRef v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  void *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  void *value;
  std::__shared_weak_count *v18;

  v5 = *(CFMutableDictionaryRef *)a1;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v4)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (!v5)
      return;
  }
  else
  {
LABEL_6:
    if (!v5)
      return;
  }
  sub_2109E4C20(a2, (CFStringRef *)&value);
  v10 = value;
  v9 = v18;
  if (!v18)
    goto LABEL_12;
  v11 = (unint64_t *)&v18->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
  do
    v13 = __ldaxr(v11);
  while (__stlxr(v13 - 1, v11));
  if (v13)
  {
LABEL_12:
    if (!v10)
      goto LABEL_14;
    goto LABEL_13;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (v10)
LABEL_13:
    CFDictionarySetValue(*(CFMutableDictionaryRef *)a1, CFSTR("IOSurfaceName"), value);
LABEL_14:
  v14 = v18;
  if (v18)
  {
    v15 = (unint64_t *)&v18->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_2109E3E28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2108A894C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2109E3E3C(uint64_t a1, const void *a2, uint64_t *a3)
{
  std::__shared_weak_count *v6;
  CFMutableDictionaryRef v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count_vtbl *Mutable;
  std::__shared_weak_count *v12;
  CFMutableArrayRef v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  const void *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  void *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  void *value[2];
  CFMutableArrayRef theArray[2];
  const void *v46;
  std::__shared_weak_count *v47;

  v7 = *(CFMutableDictionaryRef *)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v6)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v7)
      return;
  }
  else
  {
LABEL_6:
    if (!v7)
      return;
  }
  Mutable = (std::__shared_weak_count_vtbl *)CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  sub_2109E4FF8((std::__shared_weak_count_vtbl **)theArray, Mutable, 0);
  v13 = theArray[0];
  v12 = (std::__shared_weak_count *)theArray[1];
  if (theArray[1])
  {
    v14 = (unint64_t *)((char *)theArray[1] + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    do
      v16 = __ldaxr(v14);
    while (__stlxr(v16 - 1, v14));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
      if (v13)
        goto LABEL_13;
LABEL_45:
      v32 = value;
      goto LABEL_46;
    }
  }
  if (!v13)
    goto LABEL_45;
LABEL_13:
  v17 = *a3;
  v18 = a3[1];
  if (*a3 != v18)
  {
    do
    {
      sub_21090D0F4(&v46, v17);
      v20 = v46;
      v19 = v47;
      if (!v47)
      {
LABEL_30:
        if (v20)
          goto LABEL_31;
        goto LABEL_34;
      }
      v21 = (unint64_t *)&v47->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
      do
        v23 = __ldxr(v21);
      while (__stxr(v23 + 1, v21));
      do
        v24 = __ldaxr(v21);
      while (__stlxr(v24 - 1, v21));
      if (v24)
      {
        v25 = v47;
        if (!v47)
          goto LABEL_27;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
        v25 = v47;
        if (!v47)
          goto LABEL_27;
      }
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
      do
LABEL_27:
        v28 = __ldxr(v21);
      while (__stxr(v28 + 1, v21));
      do
        v29 = __ldaxr(v21);
      while (__stlxr(v29 - 1, v21));
      if (v29)
        goto LABEL_30;
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
      if (v20)
      {
LABEL_31:
        CFArrayAppendValue(theArray[0], v20);
        if (v19)
          goto LABEL_35;
        goto LABEL_39;
      }
LABEL_34:
      value[0] = 0;
      value[1] = 0;
      if (v19)
      {
LABEL_35:
        v30 = (unint64_t *)&v19->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
LABEL_39:
      if (!v20)
        goto LABEL_47;
      v17 += 16;
    }
    while (v17 != v18);
  }
  *(_OWORD *)value = *(_OWORD *)theArray;
  v32 = theArray;
LABEL_46:
  *v32 = 0;
  v32[1] = 0;
LABEL_47:
  v33 = (std::__shared_weak_count *)theArray[1];
  if (theArray[1])
  {
    v34 = (unint64_t *)((char *)theArray[1] + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v37 = value[0];
  v36 = (std::__shared_weak_count *)value[1];
  if (!value[1])
    goto LABEL_57;
  v38 = (unint64_t *)((char *)value[1] + 8);
  do
    v39 = __ldxr(v38);
  while (__stxr(v39 + 1, v38));
  do
    v40 = __ldaxr(v38);
  while (__stlxr(v40 - 1, v38));
  if (v40)
  {
LABEL_57:
    if (!v37)
      goto LABEL_59;
    goto LABEL_58;
  }
  ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
  std::__shared_weak_count::__release_weak(v36);
  if (v37)
LABEL_58:
    CFDictionarySetValue(*(CFMutableDictionaryRef *)a1, a2, value[0]);
LABEL_59:
  v41 = (std::__shared_weak_count *)value[1];
  if (value[1])
  {
    v42 = (unint64_t *)((char *)value[1] + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
}

void sub_2109E4190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2108A894C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2109E41A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;

  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (a12)
  {
    v16 = (unint64_t *)&a12->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_2109E4220(uint64_t a1)
{
  std::mutex *v2;
  uint64_t v3;
  IOSurfaceLockOptions v4;
  IOSurfaceLockOptions v5;

  v2 = (std::mutex *)(a1 + 40);
  std::mutex::lock((std::mutex *)(a1 + 40));
  v3 = *(_QWORD *)(a1 + 24) + 1;
  *(_QWORD *)(a1 + 24) = v3;
  v4 = *(_DWORD *)(a1 + 16);
  if (v4)
  {
    if (v4 == 1)
    {
      if (v3 && !*(_QWORD *)(a1 + 32))
        goto LABEL_5;
    }
    else if (v4 != 2 || *(_QWORD *)(a1 + 32))
    {
      goto LABEL_5;
    }
    IOSurfaceUnlock(*(IOSurfaceRef *)a1, v4, (uint32_t *)(a1 + 20));
    *(_DWORD *)(a1 + 16) = 0;
  }
  if (*(_QWORD *)(a1 + 32))
  {
    v5 = 2;
LABEL_14:
    IOSurfaceLock(*(IOSurfaceRef *)a1, v5, (uint32_t *)(a1 + 20));
    *(_DWORD *)(a1 + 16) = v5;
    std::mutex::unlock(v2);
    return;
  }
  if (*(_QWORD *)(a1 + 24))
  {
    v5 = 1;
    goto LABEL_14;
  }
LABEL_5:
  std::mutex::unlock(v2);
}

void sub_2109E42E4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_2109E42F8(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_2109E430C(uint64_t a1)
{
  std::mutex *v2;
  uint64_t v3;
  IOSurfaceLockOptions v4;
  IOSurfaceLockOptions v6;

  v2 = (std::mutex *)(a1 + 40);
  std::mutex::lock((std::mutex *)(a1 + 40));
  v3 = *(_QWORD *)(a1 + 32) + 1;
  *(_QWORD *)(a1 + 32) = v3;
  v4 = *(_DWORD *)(a1 + 16);
  if (v4)
  {
    if (v4 == 1)
    {
      if (*(_QWORD *)(a1 + 24) && !v3)
        goto LABEL_7;
    }
    else if (v4 != 2 || v3 != 0)
    {
      goto LABEL_7;
    }
    IOSurfaceUnlock(*(IOSurfaceRef *)a1, v4, (uint32_t *)(a1 + 20));
    *(_DWORD *)(a1 + 16) = 0;
    v3 = *(_QWORD *)(a1 + 32);
  }
  if (v3)
  {
    v6 = 2;
LABEL_16:
    IOSurfaceLock(*(IOSurfaceRef *)a1, v6, (uint32_t *)(a1 + 20));
    *(_DWORD *)(a1 + 16) = v6;
    std::mutex::unlock(v2);
    return;
  }
  if (*(_QWORD *)(a1 + 24))
  {
    v6 = 1;
    goto LABEL_16;
  }
LABEL_7:
  std::mutex::unlock(v2);
}

void sub_2109E43CC(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_2109E43E0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_2109E43F4(uint64_t a1)
{
  std::mutex *v2;
  uint64_t v3;
  IOSurfaceLockOptions v4;
  IOSurfaceLockOptions v5;

  v2 = (std::mutex *)(a1 + 40);
  std::mutex::lock((std::mutex *)(a1 + 40));
  v3 = *(_QWORD *)(a1 + 24) - 1;
  *(_QWORD *)(a1 + 24) = v3;
  v4 = *(_DWORD *)(a1 + 16);
  if (v4)
  {
    if (v4 == 1)
    {
      if (v3 && !*(_QWORD *)(a1 + 32))
        goto LABEL_5;
    }
    else if (v4 != 2 || *(_QWORD *)(a1 + 32))
    {
      goto LABEL_5;
    }
    IOSurfaceUnlock(*(IOSurfaceRef *)a1, v4, (uint32_t *)(a1 + 20));
    *(_DWORD *)(a1 + 16) = 0;
  }
  if (*(_QWORD *)(a1 + 32))
  {
    v5 = 2;
LABEL_14:
    IOSurfaceLock(*(IOSurfaceRef *)a1, v5, (uint32_t *)(a1 + 20));
    *(_DWORD *)(a1 + 16) = v5;
    std::mutex::unlock(v2);
    return;
  }
  if (*(_QWORD *)(a1 + 24))
  {
    v5 = 1;
    goto LABEL_14;
  }
LABEL_5:
  std::mutex::unlock(v2);
}

void sub_2109E44B8(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_2109E44CC(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_2109E44E0(uint64_t a1)
{
  std::mutex *v2;
  uint64_t v3;
  IOSurfaceLockOptions v4;
  IOSurfaceLockOptions v6;

  v2 = (std::mutex *)(a1 + 40);
  std::mutex::lock((std::mutex *)(a1 + 40));
  v3 = *(_QWORD *)(a1 + 32) - 1;
  *(_QWORD *)(a1 + 32) = v3;
  v4 = *(_DWORD *)(a1 + 16);
  if (v4)
  {
    if (v4 == 1)
    {
      if (*(_QWORD *)(a1 + 24) && !v3)
        goto LABEL_7;
    }
    else if (v4 != 2 || v3 != 0)
    {
      goto LABEL_7;
    }
    IOSurfaceUnlock(*(IOSurfaceRef *)a1, v4, (uint32_t *)(a1 + 20));
    *(_DWORD *)(a1 + 16) = 0;
    v3 = *(_QWORD *)(a1 + 32);
  }
  if (v3)
  {
    v6 = 2;
LABEL_16:
    IOSurfaceLock(*(IOSurfaceRef *)a1, v6, (uint32_t *)(a1 + 20));
    *(_DWORD *)(a1 + 16) = v6;
    std::mutex::unlock(v2);
    return;
  }
  if (*(_QWORD *)(a1 + 24))
  {
    v6 = 1;
    goto LABEL_16;
  }
LABEL_7:
  std::mutex::unlock(v2);
}

void sub_2109E45A0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_2109E45B4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

std::__shared_weak_count_vtbl **sub_2109E45C8(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *cf, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  std::__shared_weak_count *v13;

  if (a3)
  {
    sub_2109E47D0(&v12, cf);
    v5 = v13;
    *a1 = v12;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
    if (!v5)
      return a1;
  }
  else
  {
    v12 = cf;
    v5 = (std::__shared_weak_count *)operator new();
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA84ED0;
    v5->__shared_owners_ = 0;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = cf;
    v13 = v5;
    *a1 = cf;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  v9 = v13;
  if (!v13)
    return a1;
  v10 = (unint64_t *)&v13->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
    return a1;
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  return a1;
}

void sub_2109E46A4(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_2109E46BC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_2109E46D0(uint64_t a1@<X8>)
{
  std::__shared_weak_count_vtbl *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  CFURLRef bundleURL;
  std::__shared_weak_count *v7;
  void *__p[2];
  char v9;
  char v10;

  sub_2109E9F50((uint64_t)__p);
  if (v10)
  {
    sub_2109E60F8(&bundleURL, (uint64_t)__p, 1u);
    v2 = (std::__shared_weak_count_vtbl *)CFBundleCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], bundleURL);
    sub_2109E45C8((std::__shared_weak_count_vtbl **)a1, v2, 0);
    v3 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    if (v10)
    {
      if (v9 < 0)
        operator delete(__p[0]);
    }
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void sub_2109E479C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a17)
  {
    if (a16 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2109E47D0(_QWORD *a1, CFTypeRef cf)
{
  _QWORD *v4;

  if (cf)
    CFRetain(cf);
  *a1 = cf;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24CA84ED0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = cf;
  a1[1] = v4;
  return a1;
}

void sub_2109E4830(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_2109E4848(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_2109E4860(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BCC6FCLL);
}

void sub_2109E4884(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    CFRelease(v1);
}

uint64_t sub_2109E48A4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIP10__CFBundleEC1ES4_EUlS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIP10__CFBundleEC1ES4_EUlS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIP10__CFBundleEC1ES4_EUlS4_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIP10__CFBundleEC1ES4_EUlS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_2109E4914(int *a1@<X0>, CFNumberRef *a2@<X8>)
{
  CFNumberRef v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t valuePtr;

  valuePtr = *a1;
  v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberNSIntegerType, &valuePtr);
  v4 = (std::__shared_weak_count *)operator new();
  v5 = v4;
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA84F20;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  *a2 = v3;
  a2[1] = (CFNumberRef)v4;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_2109E49EC(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_2109E4A04(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_2109E4A18(unsigned int *a1@<X0>, CFNumberRef *a2@<X8>)
{
  CFNumberRef v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t valuePtr;

  valuePtr = *a1;
  v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberNSIntegerType, &valuePtr);
  v4 = (std::__shared_weak_count *)operator new();
  v5 = v4;
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA84F20;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  *a2 = v3;
  a2[1] = (CFNumberRef)v4;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_2109E4AF0(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_2109E4B08(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_2109E4B1C(uint64_t *a1@<X0>, CFNumberRef *a2@<X8>)
{
  CFNumberRef v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t valuePtr;

  valuePtr = *a1;
  v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberNSIntegerType, &valuePtr);
  v4 = (std::__shared_weak_count *)operator new();
  v5 = v4;
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA84F20;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  *a2 = v3;
  a2[1] = (CFNumberRef)v4;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_2109E4BF4(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_2109E4C0C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_2109E4C20(uint64_t a1@<X0>, CFStringRef *a2@<X8>)
{
  int v3;
  const UInt8 *v4;
  CFIndex v5;
  CFStringRef v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;

  v3 = *(char *)(a1 + 23);
  if (v3 >= 0)
    v4 = (const UInt8 *)a1;
  else
    v4 = *(const UInt8 **)a1;
  if (v3 >= 0)
    v5 = *(unsigned __int8 *)(a1 + 23);
  else
    v5 = *(_QWORD *)(a1 + 8);
  v6 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x24BDBD240], v4, v5, 0x8000100u, 0);
  v7 = (std::__shared_weak_count *)operator new();
  v8 = v7;
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA84F70;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)v6;
  *a2 = v6;
  a2[1] = (CFStringRef)v7;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void sub_2109E4D00(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_2109E4D18(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

CFIndex sub_2109E4D2C@<X0>(CFIndex result@<X0>, std::string *a2@<X8>)
{
  const __CFString *v3;
  CFTypeID TypeID;
  CFIndex v5;
  CFIndex v6;
  std::string *v7;
  std::string v8;
  CFIndex usedBufLen;
  CFRange v10;
  CFRange v11;

  if (!result)
    goto LABEL_9;
  v3 = (const __CFString *)result;
  TypeID = CFStringGetTypeID();
  result = CFGetTypeID(v3);
  if (result != TypeID)
    goto LABEL_9;
  result = CFStringGetLength(v3);
  if (result)
  {
    v5 = result;
    usedBufLen = 0;
    v10.location = 0;
    v10.length = result;
    result = CFStringGetBytes(v3, v10, 0x8000100u, 0, 0, 0, 0, &usedBufLen);
    if (result > 0)
    {
      memset(&v8, 0, sizeof(v8));
      if (usedBufLen)
      {
        std::string::append(&v8, usedBufLen, 0);
        v6 = usedBufLen;
        if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v7 = &v8;
        else
          v7 = (std::string *)v8.__r_.__value_.__r.__words[0];
      }
      else
      {
        v6 = 0;
        v7 = &v8;
      }
      v11.location = 0;
      v11.length = v5;
      result = CFStringGetBytes(v3, v11, 0x8000100u, 0, 0, (UInt8 *)v7, v6, 0);
      *a2 = v8;
      goto LABEL_13;
    }
LABEL_9:
    a2->__r_.__value_.__s.__data_[0] = 0;
    a2[1].__r_.__value_.__s.__data_[0] = 0;
    return result;
  }
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
LABEL_13:
  a2[1].__r_.__value_.__s.__data_[0] = 1;
  return result;
}

void sub_2109E4E6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2109E4E8C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BCC6FCLL);
}

void sub_2109E4EB0(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    CFRelease(v1);
}

uint64_t sub_2109E4ED0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIPK10__CFNumberEC1ES5_EUlS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIPK10__CFNumberEC1ES5_EUlS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIPK10__CFNumberEC1ES5_EUlS5_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIPK10__CFNumberEC1ES5_EUlS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_2109E4F44(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BCC6FCLL);
}

void sub_2109E4F68(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    CFRelease(v1);
}

uint64_t sub_2109E4F88(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIPK10__CFStringEC1ES5_EUlS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIPK10__CFStringEC1ES5_EUlS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIPK10__CFStringEC1ES5_EUlS5_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIPK10__CFStringEC1ES5_EUlS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

std::__shared_weak_count_vtbl **sub_2109E4FF8(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *cf, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  std::__shared_weak_count *v13;

  if (a3)
  {
    sub_2109E5208(&v12, cf);
    v5 = v13;
    *a1 = v12;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
    if (!v5)
      return a1;
  }
  else
  {
    v12 = cf;
    v5 = (std::__shared_weak_count *)operator new();
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA84FC0;
    v5->__shared_owners_ = 0;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = cf;
    v13 = v5;
    *a1 = cf;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  v9 = v13;
  if (!v13)
    return a1;
  v10 = (unint64_t *)&v13->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
    return a1;
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  return a1;
}

void sub_2109E50D4(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_2109E50EC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

std::__shared_weak_count_vtbl **sub_2109E5100(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *cf, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  std::__shared_weak_count *v13;

  if (a3)
  {
    sub_21090CFB0(&v12, cf);
    v5 = v13;
    *a1 = v12;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
    if (!v5)
      return a1;
  }
  else
  {
    v12 = cf;
    v5 = (std::__shared_weak_count *)operator new();
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA7D718;
    v5->__shared_owners_ = 0;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = cf;
    v13 = v5;
    *a1 = cf;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  v9 = v13;
  if (!v13)
    return a1;
  v10 = (unint64_t *)&v13->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
    return a1;
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  return a1;
}

void sub_2109E51DC(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_2109E51F4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *sub_2109E5208(_QWORD *a1, CFTypeRef cf)
{
  _QWORD *v4;

  if (cf)
    CFRetain(cf);
  *a1 = cf;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24CA84FC0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = cf;
  a1[1] = v4;
  return a1;
}

void sub_2109E5268(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_2109E5280(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_2109E5298(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BCC6FCLL);
}

void sub_2109E52BC(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    CFRelease(v1);
}

uint64_t sub_2109E52DC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIP9__CFArrayEC1ES4_EUlS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIP9__CFArrayEC1ES4_EUlS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIP9__CFArrayEC1ES4_EUlS4_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIP9__CFArrayEC1ES4_EUlS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

BOOL sub_2109E5350(CFTypeRef *a1, uint64_t a2)
{
  return CFGetTypeID(*a1) == a2;
}

std::__shared_weak_count_vtbl **sub_2109E537C(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *a2, int a3)
{
  std::__shared_weak_count_vtbl *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count_vtbl *v14;
  std::__shared_weak_count *v15;

  sub_2109E545C(&v14, a2, a3);
  v4 = v14;
  v5 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    *a1 = v4;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    *a1 = v14;
    a1[1] = 0;
  }
  v10 = v15;
  if (!v15)
    return a1;
  v11 = (unint64_t *)&v15->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (v12)
    return a1;
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  return a1;
}

std::__shared_weak_count_vtbl **sub_2109E545C(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *cf, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  std::__shared_weak_count *v13;

  if (a3)
  {
    sub_2109E3C58(&v12, cf);
    v5 = v13;
    *a1 = v12;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
    if (!v5)
      return a1;
  }
  else
  {
    v12 = cf;
    v5 = (std::__shared_weak_count *)operator new();
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA7D768;
    v5->__shared_owners_ = 0;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = cf;
    v13 = v5;
    *a1 = cf;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  v9 = v13;
  if (!v13)
    return a1;
  v10 = (unint64_t *)&v13->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
    return a1;
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  return a1;
}

void sub_2109E5538(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_2109E5550(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

BOOL sub_2109E5564(const __CFDictionary *a1, const void *a2, const void **a3)
{
  return CFDictionaryGetValueIfPresent(a1, a2, a3) != 0;
}

void sub_2109E5580(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_2109E5580(a1, *(_QWORD *)a2);
    sub_2109E5580(a1, *((_QWORD *)a2 + 1));
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

void sub_2109E55E0(_QWORD *a1@<X0>, CFMutableDictionaryRef *a2@<X8>)
{
  std::__shared_weak_count_vtbl *Mutable;
  std::__shared_weak_count *v5;
  CFMutableDictionaryRef v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  int *v10;
  int *v11;
  int *v12;
  std::__shared_weak_count *v13;
  void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  void *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  int *v29;
  int *v30;
  BOOL v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  CFMutableDictionaryRef v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  std::logic_error *exception;
  CFTypeRef cf[2];
  void *value;
  std::__shared_weak_count *v59;
  void *key;
  std::__shared_weak_count *v61;
  CFMutableDictionaryRef theDict[2];

  Mutable = (std::__shared_weak_count_vtbl *)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  sub_2109E5100((std::__shared_weak_count_vtbl **)theDict, Mutable, 0);
  v6 = theDict[0];
  v5 = (std::__shared_weak_count *)theDict[1];
  if (!theDict[1])
    goto LABEL_6;
  v7 = (unint64_t *)((char *)theDict[1] + 8);
  do
    v8 = __ldxr(v7);
  while (__stxr(v8 + 1, v7));
  do
    v9 = __ldaxr(v7);
  while (__stlxr(v9 - 1, v7));
  if (v9)
  {
LABEL_6:
    if (v6)
      goto LABEL_7;
LABEL_41:
    *(_OWORD *)cf = 0uLL;
    goto LABEL_53;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  if (!v6)
    goto LABEL_41;
LABEL_7:
  v12 = (int *)*a1;
  v10 = (int *)(a1 + 1);
  v11 = v12;
  if (v12 == v10)
  {
LABEL_8:
    *(_OWORD *)cf = *(_OWORD *)theDict;
    theDict[0] = 0;
    theDict[1] = 0;
    goto LABEL_53;
  }
  while (1)
  {
    sub_2109E4C20((uint64_t)(v11 + 8), (CFStringRef *)&key);
    sub_2109E4914(v11 + 14, (CFNumberRef *)&value);
    v14 = key;
    v13 = v61;
    if (v61)
    {
      p_shared_owners = (unint64_t *)&v61->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v18 = v59;
    if (!v14)
      break;
    v19 = value;
    if (v59)
    {
      v20 = (unint64_t *)&v59->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
      do
        v22 = __ldaxr(v20);
      while (__stlxr(v22 - 1, v20));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    if (!v19)
    {
      v18 = v59;
      break;
    }
    CFDictionarySetValue(theDict[0], key, value);
    v23 = v59;
    if (!v59)
      goto LABEL_28;
    v24 = (unint64_t *)&v59->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
      v26 = v61;
      if (v61)
      {
LABEL_29:
        v27 = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
    }
    else
    {
LABEL_28:
      v26 = v61;
      if (v61)
        goto LABEL_29;
    }
    v29 = (int *)*((_QWORD *)v11 + 1);
    if (v29)
    {
      do
      {
        v30 = v29;
        v29 = *(int **)v29;
      }
      while (v29);
    }
    else
    {
      do
      {
        v30 = (int *)*((_QWORD *)v11 + 2);
        v31 = *(_QWORD *)v30 == (_QWORD)v11;
        v11 = v30;
      }
      while (!v31);
    }
    v11 = v30;
    if (v30 == v10)
      goto LABEL_8;
  }
  *(_OWORD *)cf = 0uLL;
  if (v18)
  {
    v32 = (unint64_t *)&v18->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v34 = v61;
  if (v61)
  {
    v35 = (unint64_t *)&v61->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
LABEL_53:
  v37 = (std::__shared_weak_count *)theDict[1];
  if (theDict[1])
  {
    v38 = (unint64_t *)((char *)theDict[1] + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  if (cf[1])
  {
    v40 = (unint64_t *)((char *)cf[1] + 8);
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
    do
      v42 = __ldaxr(v40);
    while (__stlxr(v42 - 1, v40));
    if (!v42)
    {
      (*(void (**)(CFTypeRef))(*(_QWORD *)cf[1] + 16))(cf[1]);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)cf[1]);
    }
  }
  if (!cf[0])
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Given map is not compatible with this dictionary type");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24CA79220, MEMORY[0x24BEDAB88]);
  }
  sub_21090CFB0(theDict, cf[0]);
  v44 = theDict[0];
  v43 = (std::__shared_weak_count *)theDict[1];
  if (theDict[1])
  {
    v45 = (unint64_t *)((char *)theDict[1] + 8);
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 1, v45));
    v47 = (std::__shared_weak_count *)theDict[1];
    if (theDict[1])
    {
      v48 = (unint64_t *)((char *)theDict[1] + 8);
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    do
      v50 = __ldxr(v45);
    while (__stxr(v50 + 1, v45));
    *a2 = v44;
    a2[1] = (CFMutableDictionaryRef)v43;
    do
      v51 = __ldxr(v45);
    while (__stxr(v51 + 1, v45));
    do
      v52 = __ldaxr(v45);
    while (__stlxr(v52 - 1, v45));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
    do
      v53 = __ldaxr(v45);
    while (__stlxr(v53 - 1, v45));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  else
  {
    *a2 = theDict[0];
    a2[1] = 0;
  }
  if (cf[1])
  {
    v54 = (unint64_t *)((char *)cf[1] + 8);
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      (*(void (**)(CFTypeRef))(*(_QWORD *)cf[1] + 16))(cf[1]);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)cf[1]);
    }
  }
}

void sub_2109E5AAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  __cxa_free_exception(v9);
  sub_2108A894C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2109E5AC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2108A894C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2109E5ADC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16)
{
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;

  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  if (a14)
  {
    v19 = (unint64_t *)&a14->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
      std::__shared_weak_count::__release_weak(a14);
    }
  }
  if (a16)
  {
    v21 = (unint64_t *)&a16->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))a16->__on_zero_shared)(a16);
      std::__shared_weak_count::__release_weak(a16);
    }
  }
  _Unwind_Resume(exception_object);
}

std::__shared_weak_count_vtbl **sub_2109E5BA8(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *cf, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  std::__shared_weak_count *v13;

  if (a3)
  {
    sub_2109E5CB0(&v12, cf);
    v5 = v13;
    *a1 = v12;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
    if (!v5)
      return a1;
  }
  else
  {
    v12 = cf;
    v5 = (std::__shared_weak_count *)operator new();
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA84F70;
    v5->__shared_owners_ = 0;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = cf;
    v13 = v5;
    *a1 = cf;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  v9 = v13;
  if (!v13)
    return a1;
  v10 = (unint64_t *)&v13->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
    return a1;
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  return a1;
}

void sub_2109E5C84(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_2109E5C9C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *sub_2109E5CB0(_QWORD *a1, CFTypeRef cf)
{
  _QWORD *v4;

  if (cf)
    CFRetain(cf);
  *a1 = cf;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24CA84F70;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = cf;
  a1[1] = v4;
  return a1;
}

void sub_2109E5D10(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_2109E5D28(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *sub_2109E5D3C(_QWORD *a1, CFTypeRef cf)
{
  __CFString *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v8;
  unint64_t v9;
  void *v11;
  uint64_t v12;
  void *v13;
  std::__shared_weak_count *v14;
  unsigned __int8 v15;
  std::string __p;
  int v17;
  char v18;
  char *v19;

  if (cf)
  {
    v3 = (__CFString *)CFCopyDescription(cf);
    v13 = v3;
    v4 = (std::__shared_weak_count *)operator new();
    v4->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA84F70;
    v4->__shared_weak_owners_ = 0;
    v4[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
    v14 = v4;
    sub_2109E4D2C((CFIndex)v3, &__p);
    if (!(_BYTE)v17
      && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Foundation/src/Ref.cpp", 37, (uint64_t)"maybe_string", 12, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v8 = sub_2108CEF94(a1, (uint64_t)p_p, size);
    if ((_BYTE)v17 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (v9)
      return v8;
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    return v8;
  }
  else
  {
    v17 = 0;
    sub_2108B9350(&__p, "nullptr");
    if (v17 == -1)
      sub_2108B9060();
    v19 = &v18;
    ((void (*)(void **__return_ptr, char **, std::string *))off_24CA85018[v17])(&v13, &v19, &__p);
    if (v17 != -1)
      ((void (*)(char **, std::string *))off_24CA85000[v17])(&v19, &__p);
    if ((v15 & 0x80u) == 0)
      v11 = &v13;
    else
      v11 = v13;
    if ((v15 & 0x80u) == 0)
      v12 = v15;
    else
      v12 = (uint64_t)v14;
    v8 = sub_2108CEF94(a1, (uint64_t)v11, v12);
    if (((char)v15 & 0x80000000) == 0)
      return v8;
    operator delete(v13);
    return v8;
  }
}

void sub_2109E5F50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_2109E5F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_2108B9008((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2109E5F80(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  sub_2108A894C((uint64_t)va);
  JUMPOUT(0x2109E5FE8);
}

void sub_2109E5F88(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_2109E5FA0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_2109E5FB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_2108B9008((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2109E5FC4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a19 && a18 < 0)
    operator delete(__p);
  sub_2108A894C((uint64_t)&a10);
  JUMPOUT(0x2109E5FE8);
}

std::__shared_weak_count_vtbl **sub_2109E5FF0(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *cf, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  std::__shared_weak_count *v13;

  if (a3)
  {
    sub_2109E66AC(&v12, cf);
    v5 = v13;
    *a1 = v12;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
    if (!v5)
      return a1;
  }
  else
  {
    v12 = cf;
    v5 = (std::__shared_weak_count *)operator new();
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA85040;
    v5->__shared_owners_ = 0;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = cf;
    v13 = v5;
    *a1 = cf;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  v9 = v13;
  if (!v13)
    return a1;
  v10 = (unint64_t *)&v13->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
    return a1;
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  return a1;
}

void sub_2109E60CC(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_2109E60E4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

CFURLRef *sub_2109E60F8(CFURLRef *a1, uint64_t a2, Boolean a3)
{
  CFURLRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  void *__p[2];
  uint64_t v16;
  CFStringRef filePath;
  std::__shared_weak_count *v18;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_2108B314C(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v16 = *(_QWORD *)(a2 + 16);
  }
  sub_2109E4C20((uint64_t)__p, &filePath);
  v5 = CFURLCreateWithFileSystemPath((CFAllocatorRef)*MEMORY[0x24BDBD240], filePath, kCFURLPOSIXPathStyle, a3);
  v6 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      if ((SHIBYTE(v16) & 0x80000000) == 0)
        goto LABEL_10;
      goto LABEL_9;
    }
  }
  if (SHIBYTE(v16) < 0)
LABEL_9:
    operator delete(__p[0]);
LABEL_10:
  v9 = (std::__shared_weak_count *)operator new();
  v10 = v9;
  v9->__shared_owners_ = 0;
  v11 = (unint64_t *)&v9->__shared_owners_;
  v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA85040;
  v9->__shared_weak_owners_ = 0;
  v9[1].__vftable = (std::__shared_weak_count_vtbl *)v5;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
  do
    v13 = __ldaxr(v11);
  while (__stlxr(v13 - 1, v11));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v10);
  }
  *a1 = v5;
  a1[1] = (CFURLRef)v10;
  return a1;
}

void sub_2109E624C(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_2109E6264(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_2109E62D0(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::__shared_weak_count *v4;
  CFURLRef v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count_vtbl *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  std::string __p;
  char v16;

  v5 = *(CFURLRef *)a1;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v4)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (v5)
      goto LABEL_10;
  }
  else
  {
LABEL_6:
    if (v5)
      goto LABEL_10;
  }
  if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Foundation/src/URLRef.cpp", 58, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
LABEL_10:
  v9 = (std::__shared_weak_count_vtbl *)CFURLCopyScheme(*(CFURLRef *)a1);
  sub_2109E5BA8(&v13, v9, 0);
  sub_2109E4D2C((CFIndex)v13, &__p);
  v10 = v14;
  if (!v14)
    goto LABEL_14;
  v11 = (unint64_t *)&v14->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (v12)
  {
LABEL_14:
    if (v16)
      goto LABEL_15;
LABEL_19:
    *((_BYTE *)&a2->__r_.__value_.__s + 23) = 0;
    a2->__r_.__value_.__s.__data_[0] = 0;
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!v16)
    goto LABEL_19;
LABEL_15:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(a2, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    if (v16)
    {
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *a2 = __p;
  }
}

void sub_2109E6460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a17)
  {
    if (a16 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2109E6484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2108A894C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2109E6498(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  CFURLRef v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::string::size_type size;
  std::string *p_p;
  BOOL v11;
  std::__shared_weak_count_vtbl *v12;
  std::string::size_type v13;
  char v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count_vtbl *v19;
  std::__shared_weak_count *v20;
  std::string __p;
  _QWORD v22[3];

  v22[2] = *MEMORY[0x24BDAC8D0];
  v5 = *(CFURLRef *)a1;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v4)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (v5)
      goto LABEL_10;
  }
  else
  {
LABEL_6:
    if (v5)
      goto LABEL_10;
  }
  if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Foundation/src/URLRef.cpp", 64, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
LABEL_10:
  sub_2109E62D0(a1, &__p);
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (size == 4)
  {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    v11 = LODWORD(p_p->__r_.__value_.__l.__data_) == 1701603686;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
LABEL_24:
      operator delete(__p.__r_.__value_.__l.__data_);
      if (!v11)
        goto LABEL_25;
      goto LABEL_19;
    }
  }
  else
  {
    v11 = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_24;
  }
  if (!v11)
  {
LABEL_25:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
    return;
  }
LABEL_19:
  v12 = (std::__shared_weak_count_vtbl *)CFURLCopyFileSystemPath(*(CFURLRef *)a1, kCFURLPOSIXPathStyle);
  sub_2109E5BA8(&v19, v12, 0);
  sub_2109E4D2C((CFIndex)v19, &__p);
  v22[0] = __p.__r_.__value_.__l.__size_;
  v13 = __p.__r_.__value_.__r.__words[0];
  *(_QWORD *)((char *)v22 + 7) = *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7);
  v14 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  memset(&__p, 0, sizeof(__p));
  v15 = v22[0];
  *(_QWORD *)a2 = v13;
  *(_QWORD *)(a2 + 8) = v15;
  *(_QWORD *)(a2 + 15) = *(_QWORD *)((char *)v22 + 7);
  *(_BYTE *)(a2 + 23) = v14;
  v22[0] = 0;
  *(_QWORD *)((char *)v22 + 7) = 0;
  *(_BYTE *)(a2 + 24) = 1;
  v16 = v20;
  if (v20)
  {
    v17 = (unint64_t *)&v20->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_2109E6694(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2108A894C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_2109E66AC(_QWORD *a1, CFTypeRef cf)
{
  _QWORD *v4;

  if (cf)
    CFRetain(cf);
  *a1 = cf;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24CA85040;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = cf;
  a1[1] = v4;
  return a1;
}

void sub_2109E670C(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_2109E6724(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_2109E673C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BCC6FCLL);
}

void sub_2109E6760(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    CFRelease(v1);
}

uint64_t sub_2109E6780(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIPK7__CFURLEC1ES5_EUlS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIPK7__CFURLEC1ES5_EUlS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIPK7__CFURLEC1ES5_EUlS5_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIPK7__CFURLEC1ES5_EUlS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

_QWORD *sub_2109E67F0(_QWORD *a1, unsigned int *a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t *v6;
  unsigned int v7;
  BOOL v8;
  uint64_t *v9;
  _QWORD *v10;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *result;
  _QWORD *v16;
  std::string __p;
  unsigned int v18;
  uint64_t v19;

  sub_2109E6968();
  v4 = qword_254A75E90;
  if (!qword_254A75E90)
    goto LABEL_12;
  v5 = *a2;
  v6 = &qword_254A75E90;
  do
  {
    v7 = *(_DWORD *)(v4 + 32);
    v8 = v7 >= v5;
    if (v7 >= v5)
      v9 = (uint64_t *)v4;
    else
      v9 = (uint64_t *)(v4 + 8);
    if (v8)
      v6 = (uint64_t *)v4;
    v4 = *v9;
  }
  while (*v9);
  if (v6 != &qword_254A75E90 && v5 >= *((_DWORD *)v6 + 8))
  {
    sub_2109E6968();
    return sub_2108CEF94(a1, v6[5], v6[6]);
  }
  else
  {
LABEL_12:
    sub_2109E6968();
    v18 = *a2;
    v10 = sub_2108CEF94(a1, (uint64_t)"Unknown pixel format '", 22);
    sub_2109E7420((uint64_t)&v19, (uint64_t)&v18, 0, 0, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v13 = sub_2108CEF94(v10, (uint64_t)p_p, size);
    sub_2108CEF94(v13, (uint64_t)"' (=", 4);
    v14 = (_QWORD *)std::ostream::operator<<();
    result = sub_2108CEF94(v14, (uint64_t)")", 1);
    v16 = result;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      return v16;
    }
  }
  return result;
}

void sub_2109E694C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2109E6968()
{
  unsigned __int8 v0;
  uint64_t v1[3];
  int v2;
  const char *v3;
  uint64_t v4;
  int v5;
  const char *v6;
  uint64_t v7;
  int v8;
  const char *v9;
  uint64_t v10;
  int v11;
  const char *v12;
  uint64_t v13;
  int v14;
  const char *v15;
  uint64_t v16;
  int v17;
  const char *v18;
  uint64_t v19;
  int v20;
  const char *v21;
  uint64_t v22;
  int v23;
  const char *v24;
  uint64_t v25;
  int v26;
  const char *v27;
  uint64_t v28;
  int v29;
  const char *v30;
  uint64_t v31;
  int v32;
  const char *v33;
  uint64_t v34;
  int v35;
  const char *v36;
  uint64_t v37;
  int v38;
  const char *v39;
  uint64_t v40;
  int v41;
  const char *v42;
  uint64_t v43;
  int v44;
  const char *v45;
  uint64_t v46;
  int v47;
  const char *v48;
  uint64_t v49;
  int v50;
  const char *v51;
  uint64_t v52;
  int v53;
  const char *v54;
  uint64_t v55;
  int v56;
  const char *v57;
  uint64_t v58;
  int v59;
  const char *v60;
  uint64_t v61;
  int v62;
  const char *v63;
  uint64_t v64;
  int v65;
  const char *v66;
  uint64_t v67;
  int v68;
  const char *v69;
  uint64_t v70;
  int v71;
  const char *v72;
  uint64_t v73;
  int v74;
  const char *v75;
  uint64_t v76;
  int v77;
  const char *v78;
  uint64_t v79;
  int v80;
  const char *v81;
  uint64_t v82;
  int v83;
  const char *v84;
  uint64_t v85;
  int v86;
  const char *v87;
  uint64_t v88;
  int v89;
  const char *v90;
  uint64_t v91;
  int v92;
  const char *v93;
  uint64_t v94;
  int v95;
  const char *v96;
  uint64_t v97;
  int v98;
  const char *v99;
  uint64_t v100;
  int v101;
  const char *v102;
  uint64_t v103;
  int v104;
  const char *v105;
  uint64_t v106;
  int v107;
  const char *v108;
  uint64_t v109;
  int v110;
  const char *v111;
  uint64_t v112;
  int v113;
  const char *v114;
  uint64_t v115;
  int v116;
  const char *v117;
  uint64_t v118;
  int v119;
  const char *v120;
  uint64_t v121;
  int v122;
  const char *v123;
  uint64_t v124;
  int v125;
  const char *v126;
  uint64_t v127;
  int v128;
  const char *v129;
  uint64_t v130;
  int v131;
  const char *v132;
  uint64_t v133;
  int v134;
  const char *v135;
  uint64_t v136;
  int v137;
  const char *v138;
  uint64_t v139;
  int v140;
  const char *v141;
  uint64_t v142;
  int v143;
  const char *v144;
  uint64_t v145;
  int v146;
  const char *v147;
  uint64_t v148;
  int v149;
  const char *v150;
  uint64_t v151;
  int v152;
  const char *v153;
  uint64_t v154;
  int v155;
  const char *v156;
  uint64_t v157;
  int v158;
  const char *v159;
  uint64_t v160;
  int v161;
  const char *v162;
  uint64_t v163;
  int v164;
  const char *v165;
  uint64_t v166;
  int v167;
  const char *v168;
  uint64_t v169;
  int v170;
  const char *v171;
  uint64_t v172;
  int v173;
  const char *v174;
  uint64_t v175;
  int v176;
  const char *v177;
  uint64_t v178;
  int v179;
  const char *v180;
  uint64_t v181;
  int v182;
  const char *v183;
  uint64_t v184;
  int v185;
  const char *v186;
  uint64_t v187;
  int v188;
  const char *v189;
  uint64_t v190;
  int v191;
  const char *v192;
  uint64_t v193;
  int v194;
  const char *v195;
  uint64_t v196;
  int v197;
  const char *v198;
  uint64_t v199;
  int v200;
  const char *v201;
  uint64_t v202;
  int v203;
  const char *v204;
  uint64_t v205;
  int v206;
  const char *v207;
  uint64_t v208;
  int v209;
  const char *v210;
  uint64_t v211;
  int v212;
  const char *v213;
  uint64_t v214;
  int v215;
  const char *v216;
  uint64_t v217;
  int v218;
  const char *v219;
  uint64_t v220;
  int v221;
  const char *v222;
  uint64_t v223;
  int v224;
  const char *v225;
  uint64_t v226;
  int v227;
  const char *v228;
  uint64_t v229;
  int v230;
  const char *v231;
  uint64_t v232;
  int v233;
  const char *v234;
  uint64_t v235;
  int v236;
  const char *v237;
  uint64_t v238;
  uint64_t v239;

  v239 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_254A75E68);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A75E68))
    {
      LODWORD(v1[0]) = 1278226488;
      v1[1] = (uint64_t)"OneComponent8";
      v1[2] = 13;
      v2 = 24;
      v3 = "24RGB";
      v4 = 5;
      v5 = 32;
      v6 = "32ARGB";
      v7 = 6;
      v8 = 1111970369;
      v9 = "32BGRA";
      v10 = 6;
      v11 = 1647719521;
      v12 = "64ARGB";
      v13 = 6;
      v14 = 1647589490;
      v15 = "48RGB";
      v16 = 5;
      v17 = 1647392359;
      v18 = "16Gray";
      v19 = 6;
      v20 = 875704438;
      v21 = "420YpCbCr8BiPlanarVideoRange";
      v22 = 28;
      v23 = 875704422;
      v24 = "420YpCbCr8BiPlanarFullRange";
      v25 = 27;
      v26 = 875836534;
      v27 = "444YpCbCr8BiPlanarVideoRange";
      v28 = 28;
      v29 = 875836518;
      v30 = "444YpCbCr8BiPlanarFullRange";
      v31 = 27;
      v32 = 843264056;
      v33 = "TwoComponent8";
      v34 = 13;
      v35 = 1278226536;
      v36 = "OneComponent16Half";
      v37 = 18;
      v38 = 1278226534;
      v39 = "OneComponent32Float";
      v40 = 19;
      v41 = 843264104;
      v42 = "TwoComponent16Half";
      v43 = 18;
      v44 = 843264102;
      v45 = "TwoComponent32Float";
      v46 = 19;
      v47 = 1380411457;
      v48 = "64RGBAHalf";
      v49 = 10;
      v50 = 1380410945;
      v51 = "128RGBAFloat";
      v52 = 12;
      v53 = 1751411059;
      v54 = "DisparityFloat16";
      v55 = 16;
      v56 = 1717856627;
      v57 = "DisparityFloat32";
      v58 = 16;
      v59 = 1751410032;
      v60 = "DepthFloat16";
      v61 = 12;
      v62 = 1717855600;
      v63 = "DepthFloat32";
      v64 = 12;
      v65 = 842285639;
      v66 = "24BGR";
      v67 = 5;
      v68 = 1380401729;
      v69 = "32RGBA";
      v70 = 6;
      v71 = 1094862674;
      v72 = "32ABGR";
      v73 = 6;
      v74 = 1278226742;
      v75 = "OneComponent16";
      v76 = 14;
      v77 = 843264310;
      v78 = "TwoComponent16";
      v79 = 14;
      v80 = 1;
      v81 = "1Monochrome";
      v82 = 11;
      v83 = 2;
      v84 = "2Indexed";
      v85 = 8;
      v86 = 4;
      v87 = "4Indexed";
      v88 = 8;
      v89 = 8;
      v90 = "8Indexed";
      v91 = 8;
      v92 = 33;
      v93 = "1IndexedGray_WhiteIsZero";
      v94 = 24;
      v95 = 34;
      v96 = "2IndexedGray_WhiteIsZero";
      v97 = 24;
      v98 = 36;
      v99 = "4IndexedGray_WhiteIsZero";
      v100 = 24;
      v101 = 40;
      v102 = "8IndexedGray_WhiteIsZero";
      v103 = 24;
      v104 = 16;
      v105 = "16BE555";
      v106 = 7;
      v107 = 1278555445;
      v108 = "16LE555";
      v109 = 7;
      v110 = 892679473;
      v111 = "16LE5551";
      v112 = 8;
      v113 = 1110783541;
      v114 = "16BE565";
      v115 = 7;
      v116 = 1278555701;
      v117 = "16LE565";
      v118 = 7;
      v119 = 1815491698;
      v120 = "64RGBALE";
      v121 = 8;
      v122 = 1647522401;
      v123 = "32AlphaGray";
      v124 = 11;
      v125 = 1378955371;
      v126 = "30RGB";
      v127 = 5;
      v128 = 846624121;
      v129 = "422YpCbCr8";
      v130 = 10;
      v131 = 1983131704;
      v132 = "4444YpCbCrA8";
      v133 = 12;
      v134 = 1916022840;
      v135 = "4444YpCbCrA8R";
      v136 = 13;
      v137 = 2033463352;
      v138 = "4444AYpCbCr8";
      v139 = 12;
      v140 = 2033463606;
      v141 = "4444AYpCbCr16";
      v142 = 13;
      v143 = 1983066168;
      v144 = "444YpCbCr8";
      v145 = 10;
      v146 = 1983000886;
      v147 = "422YpCbCr16";
      v148 = 11;
      v149 = 1983000880;
      v150 = "422YpCbCr10";
      v151 = 11;
      v152 = 1983131952;
      v153 = "444YpCbCr10";
      v154 = 11;
      v155 = 2033463856;
      v156 = "420YpCbCr8Planar";
      v157 = 16;
      v158 = 1714696752;
      v159 = "420YpCbCr8PlanarFullRange";
      v160 = 25;
      v161 = 1630697081;
      v162 = "422YpCbCr_4A_8BiPlanar";
      v163 = 22;
      v164 = 875704950;
      v165 = "422YpCbCr8BiPlanarVideoRange";
      v166 = 28;
      v167 = 875704934;
      v168 = "422YpCbCr8BiPlanarFullRange";
      v169 = 27;
      v170 = 2037741171;
      v171 = "422YpCbCr8_yuvs";
      v172 = 15;
      v173 = 2037741158;
      v174 = "422YpCbCr8FullRange";
      v175 = 19;
      v176 = 1999843442;
      v177 = "30RGBLEPackedWideGamut";
      v178 = 22;
      v179 = 1815162994;
      v180 = "ARGB2101010LEPacked";
      v181 = 19;
      v182 = 1999908961;
      v183 = "40ARGBLEWideGamut";
      v184 = 17;
      v185 = 1999908973;
      v186 = "40ARGBLEWideGamutPremultiplied";
      v187 = 30;
      v188 = 1278226736;
      v189 = "OneComponent10";
      v190 = 14;
      v191 = 1278226738;
      v192 = "OneComponent12";
      v193 = 14;
      v194 = 1735549492;
      v195 = "14Bayer_GRBG";
      v196 = 12;
      v197 = 1919379252;
      v198 = "14Bayer_RGGB";
      v199 = 12;
      v200 = 1650943796;
      v201 = "14Bayer_BGGR";
      v202 = 12;
      v203 = 1734505012;
      v204 = "14Bayer_GBRG";
      v205 = 12;
      v206 = 1751411059;
      v207 = "DisparityFloat16";
      v208 = 16;
      v209 = 1717856627;
      v210 = "DisparityFloat32";
      v211 = 16;
      v212 = 2016686640;
      v213 = "420YpCbCr10BiPlanarVideoRange";
      v214 = 29;
      v215 = 2016686642;
      v216 = "422YpCbCr10BiPlanarVideoRange";
      v217 = 29;
      v218 = 2016687156;
      v219 = "444YpCbCr10BiPlanarVideoRange";
      v220 = 29;
      v221 = 2019963440;
      v222 = "420YpCbCr10BiPlanarFullRange";
      v223 = 28;
      v224 = 2019963442;
      v225 = "422YpCbCr10BiPlanarFullRange";
      v226 = 28;
      v227 = 2019963956;
      v228 = "444YpCbCr10BiPlanarFullRange";
      v229 = 28;
      v230 = 1982882104;
      v231 = "420YpCbCr8VideoRange_8A_TriPlanar";
      v232 = 33;
      v233 = 1651519798;
      v234 = "16VersatileBayer";
      v235 = 16;
      v236 = 1651521076;
      v237 = "64RGBA_DownscaledProResRAW";
      v238 = 26;
      sub_2109E7254(v1, 80);
      __cxa_atexit((void (*)(void *))sub_2109E722C, &qword_254A75E88, &dword_21089F000);
      __cxa_guard_release(&qword_254A75E68);
    }
  }
}

void sub_2109E7214(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A75E68);
  _Unwind_Resume(a1);
}

uint64_t sub_2109E722C(uint64_t a1)
{
  sub_2109E73E8(*(_QWORD **)(a1 + 8));
  return a1;
}

uint64_t *sub_2109E7254(uint64_t *result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  BOOL v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned int v12;
  _QWORD *v13;
  __int128 v14;

  qword_254A75E98 = 0;
  qword_254A75E90 = 0;
  qword_254A75E88 = (uint64_t)&qword_254A75E90;
  if (a2)
  {
    v2 = result;
    v3 = 0;
    v4 = &result[3 * a2];
LABEL_6:
    v6 = &qword_254A75E90;
LABEL_10:
    if (v3)
    {
      v10 = v6 + 1;
      if (v6[1])
        goto LABEL_24;
    }
    else
    {
LABEL_20:
      v10 = &qword_254A75E90;
      v6 = &qword_254A75E90;
    }
LABEL_21:
    v13 = operator new(0x38uLL);
    v14 = *(_OWORD *)v2;
    v13[6] = v2[2];
    *((_OWORD *)v13 + 2) = v14;
    *v13 = 0;
    v13[1] = 0;
    v13[2] = v6;
    *v10 = (uint64_t)v13;
    if (*(_QWORD *)qword_254A75E88)
    {
      qword_254A75E88 = *(_QWORD *)qword_254A75E88;
      v13 = (_QWORD *)*v10;
    }
    result = sub_210911190((uint64_t *)qword_254A75E90, v13);
    ++qword_254A75E98;
LABEL_24:
    while (1)
    {
      v2 += 3;
      if (v2 == v4)
        break;
      v3 = qword_254A75E90;
      if ((uint64_t *)qword_254A75E88 == &qword_254A75E90)
        goto LABEL_6;
      v5 = qword_254A75E90;
      if (qword_254A75E90)
      {
        do
        {
          v6 = (uint64_t *)v5;
          v5 = *(_QWORD *)(v5 + 8);
        }
        while (v5);
      }
      else
      {
        v7 = &qword_254A75E90;
        do
        {
          v6 = (uint64_t *)v7[2];
          v8 = *v6 == (_QWORD)v7;
          v7 = v6;
        }
        while (v8);
      }
      v9 = *(_DWORD *)v2;
      if (*((_DWORD *)v6 + 8) < *(_DWORD *)v2)
        goto LABEL_10;
      if (!qword_254A75E90)
        goto LABEL_20;
      v11 = qword_254A75E90;
      while (1)
      {
        while (1)
        {
          v6 = (uint64_t *)v11;
          v12 = *(_DWORD *)(v11 + 32);
          if (v12 <= v9)
            break;
          v11 = *v6;
          v10 = v6;
          if (!*v6)
            goto LABEL_21;
        }
        if (v12 >= v9)
          break;
        v11 = v6[1];
        if (!v11)
        {
          v10 = v6 + 1;
          goto LABEL_21;
        }
      }
    }
  }
  return result;
}

void sub_2109E73D4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_2109E73E8(v1);
  _Unwind_Resume(a1);
}

void sub_2109E73E8(_QWORD *a1)
{
  if (a1)
  {
    sub_2109E73E8(*a1);
    sub_2109E73E8(a1[1]);
    operator delete(a1);
  }
}

void sub_2109E7420(uint64_t a1@<X0>, uint64_t a2@<X2>, const std::string::value_type *a3@<X4>, std::string::size_type a4@<X5>, std::string *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  std::string::value_type __s[8];
  char v17;

  v10 = a1 - a2;
  if (a1 == a2)
    v11 = 0;
  else
    v11 = a1 - a2;
  if (v10 <= 1)
    v12 = 1;
  else
    v12 = a1 - a2;
  a5->__r_.__value_.__r.__words[0] = 0;
  a5->__r_.__value_.__l.__size_ = 0;
  a5->__r_.__value_.__r.__words[2] = 0;
  std::string::reserve(a5, v11 + (v12 - 1) * a4);
  if (v10 >= 1)
  {
    v14 = *(unsigned __int8 *)(a1 - 1);
    v13 = a1 - 1;
    *(_QWORD *)__s = v14;
    v17 = 1;
    std::string::append(a5, __s, 1uLL);
    if (v17 < 0)
    {
      operator delete(*(void **)__s);
      if ((unint64_t)v10 < 2)
        return;
    }
    else if ((unint64_t)v10 < 2)
    {
      return;
    }
    while (v13 != a2)
    {
      std::string::append(a5, a3, a4);
      v15 = *(unsigned __int8 *)--v13;
      *(_QWORD *)__s = v15;
      v17 = 1;
      std::string::append(a5, __s, 1uLL);
      if (v17 < 0)
        operator delete(*(void **)__s);
    }
  }
}

void sub_2109E7530(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

void sub_2109E756C(int a1, unint64_t a2, unint64_t a3)
{
  const char *v3;
  std::string *v4;
  std::string::size_type size;
  const char *v6;
  std::string v7;
  unint64_t v8;
  unint64_t v9;
  int v10;

  v10 = a1;
  v9 = a2;
  v8 = a3;
  v3 = " (ENOMEM)";
  if (a1 != 12)
    v3 = (const char *)&unk_210A0A619;
  v6 = v3;
  sub_2109E7638("posix_memalign failed to allocate ", &v9, (std::string *)" bytes with alignment ", &v8, (std::string *)": error code ", &v10, (std::string *)&v6);
  if ((v7.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v4 = &v7;
  else
    v4 = (std::string *)v7.__r_.__value_.__r.__words[0];
  if ((v7.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v7.__r_.__value_.__r.__words[2]);
  else
    size = v7.__r_.__value_.__l.__size_;
  sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/src/ArrayBuffer.cpp", 37, (uint64_t)&unk_210A0A619, 0, (uint64_t)v4, size, (void (*)(void **))sub_2109EDDB4);
  std::string::~string(&v7);
  abort();
}

void sub_2109E761C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2109E7638(const char *a1, unint64_t *a2, std::string *a3, unint64_t *a4, std::string *a5, int *a6, std::string *a7)
{
  size_t v14;
  size_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  _QWORD __dst[2];
  unint64_t v21;
  int v22;
  std::string v23;
  std::string **v24;
  std::string *v25;
  std::string *v26;
  _QWORD *v27;
  std::string *v28;
  std::string *v29;

  v22 = -1;
  v14 = strlen(a1);
  if (v14 >= 0x7FFFFFFFFFFFFFF8)
    sub_2108A4B7C();
  v15 = v14;
  if (v14 >= 0x17)
  {
    v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v17 = v14 | 7;
    v18 = v17 + 1;
    v16 = operator new(v17 + 1);
    __dst[1] = v15;
    v21 = v18 | 0x8000000000000000;
    __dst[0] = v16;
    goto LABEL_8;
  }
  HIBYTE(v21) = v14;
  v16 = __dst;
  if (v14)
LABEL_8:
    memcpy(v16, a1, v15);
  *((_BYTE *)v16 + v15) = 0;
  v22 = 1;
  std::to_string(&v23, *a2);
  v25 = (std::string *)__dst;
  v26 = &v23;
  v27 = __dst;
  v28 = &v23;
  v29 = &v23;
  if (v22 == -1)
    sub_2108B9060();
  v24 = &v25;
  ((void (*)(std::string ***, _QWORD *))off_24CA850C0[v22])(&v24, __dst);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  v25 = (std::string *)__dst;
  v26 = a3;
  v27 = __dst;
  v28 = a3;
  v29 = a3;
  if (v22 == -1)
    sub_2108B9060();
  v23.__r_.__value_.__r.__words[0] = (std::string::size_type)&v25;
  ((void (*)(std::string *, _QWORD *))off_24CA850D8[v22])(&v23, __dst);
  std::to_string(&v23, *a4);
  v25 = (std::string *)__dst;
  v26 = &v23;
  v27 = __dst;
  v28 = &v23;
  v29 = &v23;
  if (v22 == -1)
    sub_2108B9060();
  v24 = &v25;
  ((void (*)(std::string ***, _QWORD *))off_24CA850C0[v22])(&v24, __dst);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  v25 = (std::string *)__dst;
  v26 = a5;
  v27 = __dst;
  v28 = a5;
  v29 = a5;
  if (v22 == -1)
    sub_2108B9060();
  v23.__r_.__value_.__r.__words[0] = (std::string::size_type)&v25;
  ((void (*)(std::string *, _QWORD *))off_24CA850F0[v22])(&v23, __dst);
  std::to_string(&v23, *a6);
  v25 = (std::string *)__dst;
  v26 = &v23;
  v27 = __dst;
  v28 = &v23;
  v29 = &v23;
  if (v22 == -1)
    sub_2108B9060();
  v24 = &v25;
  ((void (*)(std::string ***, _QWORD *))off_24CA850C0[v22])(&v24, __dst);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v23.__r_.__value_.__l.__data_);
    if (a7->__r_.__value_.__r.__words[0])
    {
LABEL_20:
      v25 = (std::string *)__dst;
      v26 = a7;
      v27 = __dst;
      v28 = a7;
      v29 = a7;
      if (v22 != -1)
      {
        v23.__r_.__value_.__r.__words[0] = (std::string::size_type)&v25;
        ((void (*)(std::string *, _QWORD *))off_24CA85108[v22])(&v23, __dst);
        goto LABEL_25;
      }
LABEL_35:
      sub_2108B9060();
    }
  }
  else if (a7->__r_.__value_.__r.__words[0])
  {
    goto LABEL_20;
  }
  v25 = (std::string *)__dst;
  v26 = (std::string *)"nullptr";
  v27 = __dst;
  v28 = (std::string *)"nullptr";
  v29 = (std::string *)"nullptr";
  if (v22 == -1)
    goto LABEL_35;
  v23.__r_.__value_.__r.__words[0] = (std::string::size_type)&v25;
  ((void (*)(std::string *, _QWORD *))off_24CA850A8[v22])(&v23, __dst);
LABEL_25:
  if (v22 == -1)
    sub_2108B9060();
  v25 = &v23;
  result = ((uint64_t (*)(std::string **, _QWORD *))off_24CA85120[v22])(&v25, __dst);
  if (v22 != -1)
    return ((uint64_t (*)(std::string **, _QWORD *))off_24CA85090[v22])(&v25, __dst);
  return result;
}

void sub_2109E79C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  sub_2108B9008((uint64_t)&a10);
  _Unwind_Resume(a1);
}

size_t sub_2109E7A20(_QWORD **a1)
{
  _DWORD *v1;
  const char *v2;
  uint64_t v3;
  size_t result;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v1 = (_DWORD *)**a1;
  v2 = (const char *)(*a1)[1];
  v3 = v1[6];
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, _DWORD *))off_24CA85090[v3])(&v9, v1);
  v1[6] = -1;
  result = strlen(v2);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    sub_2108A4B7C();
  v5 = result;
  if (result >= 0x17)
  {
    v7 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v7 = result | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    *((_QWORD *)v1 + 1) = v5;
    *((_QWORD *)v1 + 2) = v8 | 0x8000000000000000;
    *(_QWORD *)v1 = v6;
  }
  else
  {
    *((_BYTE *)v1 + 23) = result;
    v6 = v1;
    if (!result)
      goto LABEL_11;
  }
  result = (size_t)memmove(v6, v2, v5);
LABEL_11:
  *((_BYTE *)v6 + v5) = 0;
  v1[6] = 1;
  return result;
}

void sub_2109E7B0C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char v5;
  void *v6;
  const char *v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14;
  _BYTE v15[15];
  char v16;
  void *__p[2];
  unint64_t v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)((char *)v19 + 7) = *(_QWORD *)(a2 + 15);
  v4 = *(void **)a2;
  v19[0] = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v14 = v4;
  *(_QWORD *)v15 = v19[0];
  *(_QWORD *)&v15[7] = *(_QWORD *)((char *)v19 + 7);
  v16 = v5;
  memset(v19, 0, 15);
  v6 = __p;
  v7 = *(const char **)(v2 + 24);
  v8 = strlen(v7);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    sub_2108A4B7C();
  v9 = (void *)v8;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    v6 = operator new(v11 + 1);
    __p[1] = v9;
    v18 = v12 | 0x8000000000000000;
    __p[0] = v6;
LABEL_9:
    memmove(v6, v7, (size_t)v9);
    *((_BYTE *)v9 + (_QWORD)v6) = 0;
    v10 = *(unsigned int *)(v3 + 24);
    if ((_DWORD)v10 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v18) = v8;
  if (v8)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v10 = *(unsigned int *)(v3 + 24);
  if ((_DWORD)v10 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24CA85090[v10])(&v13, v3);
LABEL_11:
  *(_DWORD *)(v3 + 24) = -1;
  sub_2108B9228((_QWORD *)v3, (uint64_t)&v14, 2uLL);
  *(_DWORD *)(v3 + 24) = 2;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((v16 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v14);
    return;
  }
  operator delete(__p[0]);
  if (v16 < 0)
    goto LABEL_15;
}

void sub_2109E7CC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_2108ABF6C(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2109E7D08(uint64_t a1, void **a2)
{
  const void *v3;
  _BYTE *v4;
  _QWORD *v5;
  size_t v6;
  size_t v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  size_t v18;
  size_t v19;
  void *v20;
  char *v21;
  void **v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  void **v27;

  v3 = *(const void **)(*(_QWORD *)a1 + 32);
  v5 = a2[1];
  v4 = a2[2];
  if (v5 < (_QWORD *)v4)
  {
    v6 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
    if (v6 > 0x7FFFFFFFFFFFFFF7)
      sub_2108A4B7C();
    v7 = v6;
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v8 = operator new(v14 + 1);
      v5[1] = v7;
      v5[2] = v15 | 0x8000000000000000;
      *v5 = v8;
    }
    else
    {
      *((_BYTE *)v5 + 23) = v6;
      v8 = v5;
      if (!v6)
        goto LABEL_19;
    }
    memmove(v8, v3, v7);
LABEL_19:
    *((_BYTE *)v8 + v7) = 0;
    v16 = (char *)(v5 + 3);
    a2[1] = v5 + 3;
    goto LABEL_39;
  }
  v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (_BYTE *)*a2) >> 3);
  if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_2108B327C();
  v10 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a2) >> 3);
  v11 = 2 * v10;
  if (2 * v10 <= v9 + 1)
    v11 = v9 + 1;
  if (v10 >= 0x555555555555555)
    v12 = 0xAAAAAAAAAAAAAAALL;
  else
    v12 = v11;
  if (v12)
  {
    if (v12 > 0xAAAAAAAAAAAAAAALL)
      sub_2108B2B1C();
    v13 = (char *)operator new(24 * v12);
  }
  else
  {
    v13 = 0;
  }
  v17 = &v13[24 * v9];
  v18 = strlen((const char *)v3);
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    sub_2108A4B7C();
  v19 = v18;
  if (v18 >= 0x17)
  {
    v24 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v24 = v18 | 7;
    v25 = v24 + 1;
    v20 = operator new(v24 + 1);
    *((_QWORD *)v17 + 1) = v19;
    *((_QWORD *)v17 + 2) = v25 | 0x8000000000000000;
    *(_QWORD *)v17 = v20;
  }
  else
  {
    v17[23] = v18;
    v20 = v17;
    if (!v18)
    {
      v21 = &v13[24 * v12];
      *v17 = 0;
      v16 = v17 + 24;
      v22 = (void **)*a2;
      v23 = (void **)a2[1];
      if (v23 == *a2)
        goto LABEL_36;
      do
      {
LABEL_30:
        v26 = *(_OWORD *)(v23 - 3);
        *((_QWORD *)v17 - 1) = *(v23 - 1);
        *(_OWORD *)(v17 - 24) = v26;
        v17 -= 24;
        *(v23 - 2) = 0;
        *(v23 - 1) = 0;
        *(v23 - 3) = 0;
        v23 -= 3;
      }
      while (v23 != v22);
      v23 = (void **)*a2;
      v27 = (void **)a2[1];
      *a2 = v17;
      a2[1] = v16;
      a2[2] = v21;
      while (v27 != v23)
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      goto LABEL_37;
    }
  }
  memmove(v20, v3, v19);
  v21 = &v13[24 * v12];
  *((_BYTE *)v20 + v19) = 0;
  v16 = v17 + 24;
  v22 = (void **)*a2;
  v23 = (void **)a2[1];
  if (v23 != *a2)
    goto LABEL_30;
LABEL_36:
  *a2 = v17;
  a2[1] = v16;
  a2[2] = v21;
LABEL_37:
  if (v23)
    operator delete(v23);
LABEL_39:
  a2[1] = v16;
}

void sub_2109E7F98(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_2109E7FB0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

_DWORD *sub_2109E7FB8(_DWORD ***a1)
{
  return sub_2108C6A80(**a1, (const char **)(*a1)[1]);
}

void sub_2109E7FC4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char v5;
  void *v6;
  const char *v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14;
  _BYTE v15[15];
  char v16;
  void *__p[2];
  unint64_t v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)((char *)v19 + 7) = *(_QWORD *)(a2 + 15);
  v4 = *(void **)a2;
  v19[0] = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v14 = v4;
  *(_QWORD *)v15 = v19[0];
  *(_QWORD *)&v15[7] = *(_QWORD *)((char *)v19 + 7);
  v16 = v5;
  memset(v19, 0, 15);
  v6 = __p;
  v7 = **(const char ***)(v2 + 24);
  v8 = strlen(v7);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    sub_2108A4B7C();
  v9 = (void *)v8;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    v6 = operator new(v11 + 1);
    __p[1] = v9;
    v18 = v12 | 0x8000000000000000;
    __p[0] = v6;
LABEL_9:
    memmove(v6, v7, (size_t)v9);
    *((_BYTE *)v9 + (_QWORD)v6) = 0;
    v10 = *(unsigned int *)(v3 + 24);
    if ((_DWORD)v10 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v18) = v8;
  if (v8)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v10 = *(unsigned int *)(v3 + 24);
  if ((_DWORD)v10 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24CA85090[v10])(&v13, v3);
LABEL_11:
  *(_DWORD *)(v3 + 24) = -1;
  sub_2108B9228((_QWORD *)v3, (uint64_t)&v14, 2uLL);
  *(_DWORD *)(v3 + 24) = 2;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((v16 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v14);
    return;
  }
  operator delete(__p[0]);
  if (v16 < 0)
    goto LABEL_15;
}

void sub_2109E8180(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_2108ABF6C(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2109E81C4(uint64_t a1, void **a2)
{
  const char **v3;
  _BYTE *v4;
  _QWORD *v5;
  const char *v6;
  size_t v7;
  size_t v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  size_t v19;
  size_t v20;
  void *v21;
  char *v22;
  void **v23;
  void **v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  void **v28;

  v3 = *(const char ***)(*(_QWORD *)a1 + 32);
  v5 = a2[1];
  v4 = a2[2];
  v6 = *v3;
  if (v5 < (_QWORD *)v4)
  {
    v7 = strlen(*v3);
    if (v7 > 0x7FFFFFFFFFFFFFF7)
      sub_2108A4B7C();
    v8 = v7;
    if (v7 >= 0x17)
    {
      v15 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17)
        v15 = v7 | 7;
      v16 = v15 + 1;
      v9 = operator new(v15 + 1);
      v5[1] = v8;
      v5[2] = v16 | 0x8000000000000000;
      *v5 = v9;
    }
    else
    {
      *((_BYTE *)v5 + 23) = v7;
      v9 = v5;
      if (!v7)
        goto LABEL_19;
    }
    memmove(v9, v6, v8);
LABEL_19:
    *((_BYTE *)v9 + v8) = 0;
    v17 = (char *)(v5 + 3);
    a2[1] = v5 + 3;
    goto LABEL_39;
  }
  v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (_BYTE *)*a2) >> 3);
  if (v10 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_2108B327C();
  v11 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a2) >> 3);
  v12 = 2 * v11;
  if (2 * v11 <= v10 + 1)
    v12 = v10 + 1;
  if (v11 >= 0x555555555555555)
    v13 = 0xAAAAAAAAAAAAAAALL;
  else
    v13 = v12;
  if (v13)
  {
    if (v13 > 0xAAAAAAAAAAAAAAALL)
      sub_2108B2B1C();
    v14 = (char *)operator new(24 * v13);
  }
  else
  {
    v14 = 0;
  }
  v18 = &v14[24 * v10];
  v19 = strlen(v6);
  if (v19 > 0x7FFFFFFFFFFFFFF7)
    sub_2108A4B7C();
  v20 = v19;
  if (v19 >= 0x17)
  {
    v25 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17)
      v25 = v19 | 7;
    v26 = v25 + 1;
    v21 = operator new(v25 + 1);
    *((_QWORD *)v18 + 1) = v20;
    *((_QWORD *)v18 + 2) = v26 | 0x8000000000000000;
    *(_QWORD *)v18 = v21;
  }
  else
  {
    v18[23] = v19;
    v21 = v18;
    if (!v19)
    {
      v22 = &v14[24 * v13];
      *v18 = 0;
      v17 = v18 + 24;
      v23 = (void **)*a2;
      v24 = (void **)a2[1];
      if (v24 == *a2)
        goto LABEL_36;
      do
      {
LABEL_30:
        v27 = *(_OWORD *)(v24 - 3);
        *((_QWORD *)v18 - 1) = *(v24 - 1);
        *(_OWORD *)(v18 - 24) = v27;
        v18 -= 24;
        *(v24 - 2) = 0;
        *(v24 - 1) = 0;
        *(v24 - 3) = 0;
        v24 -= 3;
      }
      while (v24 != v23);
      v24 = (void **)*a2;
      v28 = (void **)a2[1];
      *a2 = v18;
      a2[1] = v17;
      a2[2] = v22;
      while (v28 != v24)
      {
        if (*((char *)v28 - 1) < 0)
          operator delete(*(v28 - 3));
        v28 -= 3;
      }
      goto LABEL_37;
    }
  }
  memmove(v21, v6, v20);
  v22 = &v14[24 * v13];
  *((_BYTE *)v21 + v20) = 0;
  v17 = v18 + 24;
  v23 = (void **)*a2;
  v24 = (void **)a2[1];
  if (v24 != *a2)
    goto LABEL_30;
LABEL_36:
  *a2 = v18;
  a2[1] = v17;
  a2[2] = v22;
LABEL_37:
  if (v24)
    operator delete(v24);
LABEL_39:
  a2[1] = v17;
}

void sub_2109E8458(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_2109E8470(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_2109E8478(std::string *a1@<X8>)
{
  int64x2_t v2;
  int8x16_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  void **v10;
  std::string::size_type size;
  std::string *v12;
  std::string *v13;
  int v14;
  size_t v15;
  unint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  std::string *v21;
  const char *v22;
  std::runtime_error *exception;
  std::string v24;
  char v25;
  std::string v26;
  void *v27[2];
  unsigned __int8 v28;
  void *v29;
  __int128 v30;
  _BYTE v31[56];
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  void **v37;
  unint64_t v38;
  const char *v39;
  uint64_t v40;
  std::string *v41;
  void *v42;
  _BYTE v43[32];
  _QWORD v44[20];

  v44[19] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v31[40] = 0x4000000001;
  *(_QWORD *)&v31[24] = 4;
  *(_DWORD *)&v31[32] = 0;
  sub_210989D60((unsigned int *)&v31[24], (unsigned int *)&v31[28], (unsigned int *)&v31[32], &v31[48]);
  sub_2108BA7B4(*(uint64_t *)&v31[48], v32, "_", 1uLL, &v24, v2, v3);
  v4 = *(_QWORD *)&v31[48];
  if (*(_QWORD *)&v31[48])
  {
    v5 = v32;
    v6 = *(void **)&v31[48];
    if (v32 != *(_QWORD *)&v31[48])
    {
      do
      {
        if (*(char *)(v5 - 1) < 0)
          operator delete(*(void **)(v5 - 24));
        v5 -= 24;
      }
      while (v5 != v4);
      v6 = *(void **)&v31[48];
    }
    v32 = v4;
    operator delete(v6);
  }
  *(_QWORD *)&v31[48] = "densefeat";
  v32 = 9;
  v33 = "maps";
  v34 = 4;
  sub_210989EE0("b", (int *)&v31[40]);
  v7 = HIBYTE(v30);
  if (v30 >= 0)
    v8 = &v29;
  else
    v8 = v29;
  if (v30 < 0)
    v7 = v30;
  v35 = v8;
  v36 = v7;
  sub_210989EE0("d", (int *)&v31[44]);
  v9 = v28;
  if ((v28 & 0x80u) == 0)
    v10 = v27;
  else
    v10 = (void **)v27[0];
  if ((v28 & 0x80u) != 0)
    v9 = (unint64_t)v27[1];
  v37 = v10;
  v38 = v9;
  v39 = "quant";
  v40 = 5;
  size = HIBYTE(v24.__r_.__value_.__r.__words[2]);
  v12 = &v24;
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
  {
    size = v24.__r_.__value_.__l.__size_;
    v12 = (std::string *)v24.__r_.__value_.__r.__words[0];
  }
  v41 = v12;
  v42 = (void *)size;
  sub_2108BBA08((uint64_t)&v31[48], (uint64_t)v43, "_", 1uLL, (std::string *)v31);
  v13 = std::string::append((std::string *)v31, ".mlmodelc/model.espresso.net", 0x1CuLL);
  v26 = *v13;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if ((v31[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v31);
    if (((char)v28 & 0x80000000) == 0)
    {
LABEL_23:
      if ((SHIBYTE(v30) & 0x80000000) == 0)
        goto LABEL_24;
LABEL_45:
      operator delete(v29);
      if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_25;
      goto LABEL_46;
    }
  }
  else if (((char)v28 & 0x80000000) == 0)
  {
    goto LABEL_23;
  }
  operator delete(v27[0]);
  if (SHIBYTE(v30) < 0)
    goto LABEL_45;
LABEL_24:
  if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_25;
LABEL_46:
  operator delete(v24.__r_.__value_.__l.__data_);
LABEL_25:
  v14 = SHIBYTE(v26.__r_.__value_.__r.__words[2]);
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = HIBYTE(v26.__r_.__value_.__r.__words[2]);
  else
    v15 = v26.__r_.__value_.__l.__size_;
  v16 = v15 + 49;
  if (v15 + 49 >= 0x7FFFFFFFFFFFFFF8)
    sub_2108A4B7C();
  if (v16 <= 0x16)
  {
    qmemcpy(v31, "CV3D_LearnedFeatures_DenseFeatNet_EndToEnd_Model/", 49);
    v17 = &v31[49];
LABEL_34:
    if (v14 >= 0)
      v21 = &v26;
    else
      v21 = (std::string *)v26.__r_.__value_.__r.__words[0];
    memmove(v17, v21, v15);
    goto LABEL_38;
  }
  v18 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v16 | 7) != 0x17)
    v18 = v16 | 7;
  v19 = v18 + 1;
  v20 = (char *)operator new(v18 + 1);
  *(_QWORD *)&v31[8] = v15 + 49;
  *(_QWORD *)&v31[16] = v19 | 0x8000000000000000;
  *(_QWORD *)v31 = v20;
  qmemcpy(v20, "CV3D_LearnedFeatures_DenseFeatNet_EndToEnd_Model/", 49);
  v17 = v20 + 49;
  if (v15)
    goto LABEL_34;
LABEL_38:
  v17[v15] = 0;
  sub_2108B18D0((uint64_t)&v31[48]);
  v29 = operator new(0x20uLL);
  v30 = xmmword_210A17950;
  strcpy((char *)v29, "com.apple.LearnedFeatures");
  sub_2109E971C((uint64_t)&v29, (std::string::size_type)v31, &v33, 1, &v24);
  if (SHIBYTE(v30) < 0)
    operator delete(v29);
  if (!v25)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to access model resource path");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(a1, v24.__r_.__value_.__l.__data_, v24.__r_.__value_.__l.__size_);
    if (v25 && SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
  }
  else
  {
    *a1 = v24;
  }
  *(_QWORD *)&v31[48] = *MEMORY[0x24BEDB7F0];
  v22 = *(const char **)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)&v31[*(_QWORD *)(*(_QWORD *)&v31[48] - 24) + 48] = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v33 = v22;
  v34 = MEMORY[0x24BEDB848] + 16;
  if ((v43[15] & 0x80000000) != 0)
    operator delete(v42);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BCC66C](v44);
  if ((v31[23] & 0x80000000) == 0)
  {
    if ((v14 & 0x80000000) == 0)
      return;
LABEL_56:
    operator delete(v26.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(*(void **)v31);
  if (v14 < 0)
    goto LABEL_56;
}

void sub_2109E891C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  void *v41;
  int v42;

  __cxa_free_exception(v41);
  if (a15 && a14 < 0)
    operator delete(__p);
  sub_2108B1A08((uint64_t)&a41);
  if (a37 < 0)
    operator delete(a32);
  if (v42 < 0)
    operator delete(a16);
  _Unwind_Resume(a1);
}

void sub_2109E8A50(std::string *a1@<X8>)
{
  char *v2;
  uint64_t v3;
  std::runtime_error *exception;
  std::string v5;
  std::string __p;
  std::string v7;
  char v8;
  _QWORD v9[2];
  _QWORD v10[11];
  char v11;
  uint64_t v12;
  char *v13;
  __int128 v14;

  v2 = (char *)operator new(0x70uLL);
  v14 = xmmword_210A1CCD0;
  strcpy(v2, "CV3D_LearnedFeatures_BinaryDenseFeatNet_EndToEnd_Model/train_desc_binary-38tburr39x_412080/model.espresso.net");
  v13 = v2;
  sub_2108B18D0((uint64_t)v9);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_210A17950;
  strcpy(__p.__r_.__value_.__l.__data_, "com.apple.LearnedFeatures");
  sub_2109E971C((uint64_t)&__p, (std::string::size_type)&v13, v10, 1, &v7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (!v8)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_210989960(v9, &v5);
    sub_2108A5A38("Failed to access model resource path: ", &v5, &__p);
    std::runtime_error::runtime_error(exception, &__p);
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(a1, v7.__r_.__value_.__l.__data_, v7.__r_.__value_.__l.__size_);
    if (v8 && SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v7.__r_.__value_.__l.__data_);
  }
  else
  {
    *a1 = v7;
  }
  v9[0] = *MEMORY[0x24BEDB7F0];
  v3 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v9 + *(_QWORD *)(v9[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v10[0] = v3;
  v10[1] = MEMORY[0x24BEDB848] + 16;
  if (v11 < 0)
    operator delete((void *)v10[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BCC66C](&v12);
  if (SHIBYTE(v14) < 0)
    operator delete(v13);
}

void sub_2109E8C6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,int a28,__int16 a29,char a30,char a31)
{
  void *v31;
  int v32;
  uint64_t v33;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v32 & 1) == 0)
      goto LABEL_8;
  }
  else if (!v32)
  {
LABEL_8:
    if (a27 && a26 < 0)
      operator delete(a21);
    sub_2108B1A08((uint64_t)&a29);
    if (*(char *)(v33 - 33) < 0)
      operator delete(*(void **)(v33 - 56));
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v31);
  goto LABEL_8;
}

void sub_2109E8D28(std::string *a1@<X8>)
{
  char *v2;
  uint64_t v3;
  std::runtime_error *exception;
  void *__p;
  __int128 v6;
  std::string v7;
  char v8;
  _QWORD v9[2];
  _QWORD v10[11];
  char v11;
  uint64_t v12;
  char *v13;
  __int128 v14;

  v2 = (char *)operator new(0x68uLL);
  v14 = xmmword_210A1CCE0;
  strcpy(v2, "CV3D_LearnedFeatures_FloatDenseFeatNet_EndToEnd_Model/train_desc-kgeymr4m7f_206040/model.espresso.net");
  v13 = v2;
  sub_2108B18D0((uint64_t)v9);
  __p = operator new(0x20uLL);
  v6 = xmmword_210A17950;
  strcpy((char *)__p, "com.apple.LearnedFeatures");
  sub_2109E971C((uint64_t)&__p, (std::string::size_type)&v13, v10, 1, &v7);
  if (SHIBYTE(v6) < 0)
    operator delete(__p);
  if (!v8)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to access model resource path");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(a1, v7.__r_.__value_.__l.__data_, v7.__r_.__value_.__l.__size_);
    if (v8 && SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v7.__r_.__value_.__l.__data_);
  }
  else
  {
    *a1 = v7;
  }
  v9[0] = *MEMORY[0x24BEDB7F0];
  v3 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v9 + *(_QWORD *)(v9[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v10[0] = v3;
  v10[1] = MEMORY[0x24BEDB848] + 16;
  if (v11 < 0)
    operator delete((void *)v10[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BCC66C](&v12);
  if (SHIBYTE(v14) < 0)
    operator delete(v13);
}

void sub_2109E8F14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,int a23,__int16 a24,char a25,char a26)
{
  void *v26;
  uint64_t v27;

  __cxa_free_exception(v26);
  if (a22 && a21 < 0)
    operator delete(__p);
  sub_2108B1A08((uint64_t)&a24);
  if (*(char *)(v27 - 33) < 0)
    operator delete(*(void **)(v27 - 56));
  _Unwind_Resume(a1);
}

void sub_2109E8F84(std::string *a1@<X8>)
{
  char *v2;
  uint64_t v3;
  std::runtime_error *exception;
  std::string v5;
  std::string __p;
  std::string v7;
  char v8;
  _QWORD v9[2];
  _QWORD v10[11];
  char v11;
  uint64_t v12;
  char *v13;
  __int128 v14;

  v2 = (char *)operator new(0x60uLL);
  v14 = xmmword_210A1CCF0;
  strcpy(v2, "CV3D_LearnedFeatures_GlobalFeat_EndToEnd_Model/i_128f_u8_3_7_0_a3p73mmcsz_b1/model.espresso.net");
  v13 = v2;
  sub_2108B18D0((uint64_t)v9);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_210A17950;
  strcpy(__p.__r_.__value_.__l.__data_, "com.apple.LearnedFeatures");
  sub_2109E971C((uint64_t)&__p, (std::string::size_type)&v13, v10, 1, &v7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (!v8)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_210989960(v9, &v5);
    sub_2108A5A38("Failed to access model resource path: ", &v5, &__p);
    std::runtime_error::runtime_error(exception, &__p);
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(a1, v7.__r_.__value_.__l.__data_, v7.__r_.__value_.__l.__size_);
    if (v8 && SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v7.__r_.__value_.__l.__data_);
  }
  else
  {
    *a1 = v7;
  }
  v9[0] = *MEMORY[0x24BEDB7F0];
  v3 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v9 + *(_QWORD *)(v9[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v10[0] = v3;
  v10[1] = MEMORY[0x24BEDB848] + 16;
  if (v11 < 0)
    operator delete((void *)v10[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BCC66C](&v12);
  if (SHIBYTE(v14) < 0)
    operator delete(v13);
}

void sub_2109E9190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,int a28,__int16 a29,char a30,char a31)
{
  void *v31;
  int v32;
  uint64_t v33;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v32 & 1) == 0)
      goto LABEL_8;
  }
  else if (!v32)
  {
LABEL_8:
    if (a27 && a26 < 0)
      operator delete(a21);
    sub_2108B1A08((uint64_t)&a29);
    if (*(char *)(v33 - 33) < 0)
      operator delete(*(void **)(v33 - 56));
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v31);
  goto LABEL_8;
}

void sub_2109E924C(int a1@<W0>, std::string *a2@<X8>)
{
  const char *v3;
  size_t v4;
  int v5;
  size_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  void **v10;
  int v11;
  size_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  std::runtime_error *exception;
  std::string v19;
  std::string __p;
  std::string v21;
  char v22;
  _QWORD v23[2];
  _QWORD v24[11];
  char v25;
  uint64_t v26;
  void *v27[13];
  uint64_t v28;

  if (a1)
    v3 = ".bundle";
  else
    v3 = ".espresso.net";
  if (a1)
    v4 = 7;
  else
    v4 = 13;
  HIBYTE(v27[9]) = v4;
  memcpy(&v27[7], v3, v4);
  *((_BYTE *)&v27[7] + v4) = 0;
  v5 = SHIBYTE(v27[9]);
  if (SHIBYTE(v27[9]) >= 0)
    v6 = HIBYTE(v27[9]);
  else
    v6 = (size_t)v27[8];
  v7 = v6 + 72;
  if (v6 + 72 > 0x7FFFFFFFFFFFFFF7)
    sub_2108A4B7C();
  if (v7 <= 0x16)
  {
    qmemcpy(&v27[4], "p32_64u_u8_3_7_0_6aa24xpnhm_b1024_gf_i_128f_u8_3_7_0_a3p73mmcsz_b1/model", 72);
    v8 = (char *)&v28;
LABEL_16:
    if (v5 >= 0)
      v10 = &v27[7];
    else
      v10 = (void **)v27[7];
    memmove(v8, v10, v6);
    goto LABEL_20;
  }
  v9 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v7 | 7) != 0x17)
    v9 = v7 | 7;
  v27[5] = (void *)(v6 + 72);
  v27[6] = (void *)((v9 + 1) | 0x8000000000000000);
  v27[4] = operator new(v9 + 1);
  qmemcpy(v27[4], "p32_64u_u8_3_7_0_6aa24xpnhm_b1024_gf_i_128f_u8_3_7_0_a3p73mmcsz_b1/model", 72);
  v8 = (char *)v27[4] + 72;
  if (v6)
    goto LABEL_16;
LABEL_20:
  v8[v6] = 0;
  v11 = SHIBYTE(v27[6]);
  if (SHIBYTE(v27[6]) >= 0)
    v12 = HIBYTE(v27[6]);
  else
    v12 = (size_t)v27[5];
  v13 = v12 + 57;
  if (v12 + 57 > 0x7FFFFFFFFFFFFFF7)
    sub_2108A4B7C();
  if (v13 <= 0x16)
  {
    qmemcpy(v27, "CV3D_LearnedFeatures_ATUHardNetGlobalFeat_EndToEnd_Model/", 57);
    v14 = (char *)&v27[7] + 1;
LABEL_29:
    if (v11 >= 0)
      v16 = &v27[4];
    else
      v16 = (void **)v27[4];
    memmove(v14, v16, v12);
    goto LABEL_33;
  }
  v15 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v13 | 7) != 0x17)
    v15 = v13 | 7;
  v27[1] = (void *)(v12 + 57);
  v27[2] = (void *)((v15 + 1) | 0x8000000000000000);
  v27[0] = operator new(v15 + 1);
  qmemcpy(v27[0], "CV3D_LearnedFeatures_ATUHardNetGlobalFeat_EndToEnd_Model/", 57);
  v14 = (char *)v27[0] + 57;
  if (v12)
    goto LABEL_29;
LABEL_33:
  v14[v12] = 0;
  sub_2108B18D0((uint64_t)v23);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_210A17950;
  strcpy(__p.__r_.__value_.__l.__data_, "com.apple.LearnedFeatures");
  sub_2109E971C((uint64_t)&__p, (std::string::size_type)v27, v24, 1, &v21);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (!v22)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_210989960(v23, &v19);
    sub_2108A5A38("Failed to access model resource path: ", &v19, &__p);
    std::runtime_error::runtime_error(exception, &__p);
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(a2, v21.__r_.__value_.__l.__data_, v21.__r_.__value_.__l.__size_);
    if (v22 && SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v21.__r_.__value_.__l.__data_);
  }
  else
  {
    *a2 = v21;
  }
  v23[0] = *MEMORY[0x24BEDB7F0];
  v17 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v23 + *(_QWORD *)(v23[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v24[0] = v17;
  v24[1] = MEMORY[0x24BEDB848] + 16;
  if (v25 < 0)
    operator delete((void *)v24[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BCC66C](&v26);
  if (SHIBYTE(v27[2]) < 0)
  {
    operator delete(v27[0]);
    if ((v11 & 0x80000000) == 0)
    {
LABEL_45:
      if ((v5 & 0x80000000) == 0)
        return;
LABEL_49:
      operator delete(v27[7]);
      return;
    }
  }
  else if ((v11 & 0x80000000) == 0)
  {
    goto LABEL_45;
  }
  operator delete(v27[4]);
  if (v5 < 0)
    goto LABEL_49;
}

void sub_2109E9620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,int a29,__int16 a30,char a31,char a32)
{
  void *v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v33 & 1) == 0)
    {
LABEL_8:
      if (a28)
      {
        if (a27 < 0)
          operator delete(a22);
      }
      sub_2108B1A08((uint64_t)&a30);
      if (*(char *)(v36 - 137) < 0)
      {
        operator delete(*(void **)(v36 - 160));
        if ((v35 & 0x80000000) == 0)
        {
LABEL_13:
          if ((v34 & 0x80000000) == 0)
            goto LABEL_14;
          goto LABEL_17;
        }
      }
      else if ((v35 & 0x80000000) == 0)
      {
        goto LABEL_13;
      }
      operator delete(*(void **)(v36 - 128));
      if ((v34 & 0x80000000) == 0)
LABEL_14:
        _Unwind_Resume(a1);
LABEL_17:
      operator delete(*(void **)(v36 - 104));
      _Unwind_Resume(a1);
    }
  }
  else if (!v33)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v32);
  goto LABEL_8;
}

void sub_2109E971C(uint64_t a1@<X0>, std::string::size_type a2@<X1>, _QWORD *a3@<X2>, char a4@<W3>, std::string *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  const char *v14;
  size_t v15;
  size_t v16;
  void **p_dst;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  const std::locale::facet *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  size_t v28;
  unint64_t v29;
  std::string *p_p;
  uint64_t v31;
  uint64_t v32;
  void **v33;
  std::string::size_type v34;
  void **v35;
  uint64_t v36;
  std::string::size_type v37;
  std::string::size_type size;
  std::string *v39;
  unsigned __int8 v40;
  int v41;
  _QWORD *v42;
  std::string *v43;
  std::string::size_type v44;
  _QWORD *v45;
  void **__dst;
  size_t v47;
  int64_t v48;
  std::string __p;
  uint64_t v50;
  std::__fs::filesystem::path v51;
  uint64_t v52;
  _QWORD v53[2];

  v53[1] = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a1 + 23) >= 0)
    v10 = a1;
  else
    v10 = *(_QWORD *)a1;
  v11 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v10);
  v12 = (void *)objc_msgSend(MEMORY[0x24BDD1488], "bundleWithIdentifier:", v11);
  if (!v12)
  {
    if (a4)
    {
      v18 = sub_2108CEF94(a3, (uint64_t)"Could not find bundle '", 23);
      v19 = *(char *)(a1 + 23);
      if (v19 >= 0)
        v20 = a1;
      else
        v20 = *(_QWORD *)a1;
      if (v19 >= 0)
        v21 = *(unsigned __int8 *)(a1 + 23);
      else
        v21 = *(_QWORD *)(a1 + 8);
      v22 = sub_2108CEF94(v18, v20, v21);
      v23 = sub_2108CEF94(v22, (uint64_t)"'.", 2);
      std::ios_base::getloc((const std::ios_base *)((char *)v23 + *(_QWORD *)(*v23 - 24)));
      v24 = std::locale::use_facet((const std::locale *)&v51, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10);
      std::locale::~locale((std::locale *)&v51);
      std::ostream::put();
      std::ostream::flush();
    }
    a5->__r_.__value_.__s.__data_[0] = 0;
    a5[1].__r_.__value_.__s.__data_[0] = 0;
    return;
  }
  v13 = (void *)objc_msgSend(v12, "resourcePath");
  if (!v13
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Resource/src/Resource.cpp", 125, (uint64_t)"resources_path", 14, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
  v14 = (const char *)objc_msgSend(v13, "UTF8String");
  v15 = strlen(v14);
  if (v15 > 0x7FFFFFFFFFFFFFF7)
    sub_2108A4B7C();
  v16 = v15;
  if (v15 >= 0x17)
  {
    v25 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v25 = v15 | 7;
    v26 = v25 + 1;
    p_dst = (void **)operator new(v25 + 1);
    v47 = v16;
    v48 = v26 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_23;
  }
  HIBYTE(v48) = v15;
  p_dst = (void **)&__dst;
  if (v15)
LABEL_23:
    memmove(p_dst, v14, v16);
  *((_BYTE *)p_dst + v16) = 0;
  v27 = SHIBYTE(v48);
  if (v48 >= 0)
    v28 = HIBYTE(v48);
  else
    v28 = v47;
  v29 = v28 + 10;
  if (v28 + 10 > 0x7FFFFFFFFFFFFFF7)
    sub_2108A4B7C();
  if (v29 >= 0x17)
  {
    v31 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v29 | 7) != 0x17)
      v31 = v29 | 7;
    v32 = v31 + 1;
    p_p = (std::string *)operator new(v31 + 1);
    __p.__r_.__value_.__l.__size_ = v28 + 10;
    __p.__r_.__value_.__r.__words[2] = v32 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
  }
  else
  {
    memset(&__p, 0, sizeof(__p));
    p_p = &__p;
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = v28 + 10;
    if (!v28)
      goto LABEL_38;
  }
  if (v27 >= 0)
    v33 = (void **)&__dst;
  else
    v33 = __dst;
  memmove(p_p, v33, v28);
LABEL_38:
  strcpy((char *)p_p + v28, "/.disabled");
  v51.__pn_ = __p;
  std::__fs::filesystem::__status(&v51, 0);
  if (SHIBYTE(v51.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__pn_.__r_.__value_.__l.__data_);
  v34 = HIBYTE(v48);
  v35 = (void **)&__dst;
  if (v48 < 0)
  {
    v35 = __dst;
    v34 = v47;
  }
  v51.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v35;
  v51.__pn_.__r_.__value_.__l.__size_ = v34;
  v36 = *(unsigned __int8 *)(a2 + 23);
  if ((v36 & 0x80u) == 0)
    v37 = a2;
  else
    v37 = *(_QWORD *)a2;
  if ((v36 & 0x80u) != 0)
    v36 = *(_QWORD *)(a2 + 8);
  v51.__pn_.__r_.__value_.__r.__words[2] = v37;
  v52 = v36;
  sub_2108BBA08((uint64_t)&v51, (uint64_t)v53, "/", 1uLL, &__p);
  memset(&v51, 0, sizeof(v51));
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v39 = &__p;
  else
    v39 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  sub_2109E9C4C((unint64_t)&v51, (char *)v39, (char *)v39 + size);
  std::__fs::filesystem::__status(&v51, 0);
  v40 = v50;
  if (SHIBYTE(v51.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v51.__pn_.__r_.__value_.__l.__data_);
    v41 = v40;
    if (!v40)
      goto LABEL_57;
  }
  else
  {
    v41 = v50;
    if (!(_BYTE)v50)
      goto LABEL_57;
  }
  if (v41 != 255)
  {
    *a5 = __p;
    a5[1].__r_.__value_.__s.__data_[0] = 1;
    if (SHIBYTE(v48) < 0)
      goto LABEL_69;
    return;
  }
LABEL_57:
  if (a4)
  {
    v42 = sub_2108CEF94(a3, (uint64_t)"Resource at '", 13);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v43 = &__p;
    else
      v43 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v44 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v44 = __p.__r_.__value_.__l.__size_;
    v45 = sub_2108CEF94(v42, (uint64_t)v43, v44);
    sub_2108CEF94(v45, (uint64_t)"' does not exist.", 17);
  }
  a5->__r_.__value_.__s.__data_[0] = 0;
  a5[1].__r_.__value_.__s.__data_[0] = 0;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v48) & 0x80000000) == 0)
      return;
LABEL_69:
    operator delete(__dst);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v48) < 0)
    goto LABEL_69;
}

void sub_2109E9BCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::locale a17)
{
  std::locale::~locale(&a17);
  _Unwind_Resume(a1);
}

void sub_2109E9BE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

unint64_t sub_2109E9C4C(unint64_t a1, char *__src, char *a3)
{
  int v6;
  size_t v7;
  size_t v8;
  unint64_t v9;
  unint64_t v10;
  _BYTE *v11;
  unint64_t v12;
  void **p_dst;
  size_t v14;
  _BYTE *v15;
  _BYTE *v16;
  _BYTE *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  _OWORD *v23;
  __int128 *v24;
  unint64_t v25;
  __int128 v26;
  char v27;
  size_t v28;
  unint64_t v30;
  uint64_t v31;
  void **__dst;
  size_t v33;
  int64_t v34;

  v6 = *(char *)(a1 + 23);
  v7 = a3 - __src;
  if (v6 < 0)
  {
    if (a3 == __src)
      return a1;
    v8 = *(_QWORD *)(a1 + 8);
    v12 = *(_QWORD *)(a1 + 16);
    v9 = (v12 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    v11 = *(_BYTE **)a1;
    v10 = HIBYTE(v12);
    if (*(_QWORD *)a1 > (unint64_t)__src)
      goto LABEL_11;
  }
  else
  {
    if (a3 == __src)
      return a1;
    v8 = *(unsigned __int8 *)(a1 + 23);
    v9 = 22;
    LOBYTE(v10) = *(_BYTE *)(a1 + 23);
    v11 = (_BYTE *)a1;
    if (a1 > (unint64_t)__src)
    {
LABEL_11:
      if (v9 - v8 >= v7)
      {
        v16 = (_BYTE *)a1;
        if ((v10 & 0x80) != 0)
        {
          v16 = *(_BYTE **)a1;
          v17 = (_BYTE *)(*(_QWORD *)a1 + v8);
          if (v7 >= 0x20)
            goto LABEL_36;
        }
        else
        {
          v17 = (_BYTE *)(a1 + v8);
          if (v7 >= 0x20)
            goto LABEL_36;
        }
        goto LABEL_23;
      }
      v14 = 0x7FFFFFFFFFFFFFF7;
      if (0x7FFFFFFFFFFFFFF7 - v9 < v8 + v7 - v9)
        sub_2108A4B7C();
      v15 = (_BYTE *)a1;
      if (v6 < 0)
      {
        v15 = *(_BYTE **)a1;
        if (v9 > 0x3FFFFFFFFFFFFFF2)
        {
LABEL_15:
          v16 = operator new(0x7FFFFFFFFFFFFFF7uLL);
          if (!v8)
            goto LABEL_17;
          goto LABEL_16;
        }
      }
      else if (v9 > 0x3FFFFFFFFFFFFFF2)
      {
        goto LABEL_15;
      }
      v30 = 2 * v9;
      if (v8 + v7 > 2 * v9)
        v30 = v8 + v7;
      v31 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v30 | 7) != 0x17)
        v31 = v30 | 7;
      if (v30 >= 0x17)
        v14 = v31 + 1;
      else
        v14 = 23;
      v16 = operator new(v14);
      if (!v8)
      {
LABEL_17:
        if (v9 != 22)
          operator delete(v15);
        *(_QWORD *)(a1 + 8) = v8;
        *(_QWORD *)(a1 + 16) = v14 | 0x8000000000000000;
        *(_QWORD *)a1 = v16;
        v17 = &v16[v8];
        if (v7 >= 0x20)
        {
LABEL_36:
          if ((unint64_t)(&v16[v8] - __src) >= 0x20)
          {
            v18 = &__src[v7 & 0xFFFFFFFFFFFFFFE0];
            v17 += v7 & 0xFFFFFFFFFFFFFFE0;
            v23 = &v16[v8 + 16];
            v24 = (__int128 *)(__src + 16);
            v25 = v7 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v26 = *v24;
              *(v23 - 1) = *(v24 - 1);
              *v23 = v26;
              v23 += 2;
              v24 += 2;
              v25 -= 32;
            }
            while (v25);
            if (v7 == (v7 & 0xFFFFFFFFFFFFFFE0))
              goto LABEL_42;
          }
          else
          {
            v18 = __src;
          }
          do
          {
LABEL_41:
            v27 = *v18++;
            *v17++ = v27;
          }
          while (v18 != a3);
LABEL_42:
          *v17 = 0;
          v28 = v8 + v7;
          if (*(char *)(a1 + 23) < 0)
            *(_QWORD *)(a1 + 8) = v28;
          else
            *(_BYTE *)(a1 + 23) = v28 & 0x7F;
          return a1;
        }
LABEL_23:
        v18 = __src;
        goto LABEL_41;
      }
LABEL_16:
      memmove(v16, v15, v8);
      goto LABEL_17;
    }
  }
  if (&v11[v8 + 1] <= __src)
    goto LABEL_11;
  if (v7 > 0x7FFFFFFFFFFFFFF7)
    sub_2108A4B7C();
  if (v7 > 0x16)
  {
    v19 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v19 = v7 | 7;
    v20 = v19 + 1;
    p_dst = (void **)operator new(v19 + 1);
    v33 = v7;
    v34 = v20 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v34) = (_BYTE)a3 - (_BYTE)__src;
    p_dst = (void **)&__dst;
  }
  memcpy(p_dst, __src, v7);
  *((_BYTE *)p_dst + v7) = 0;
  if (v34 >= 0)
    v21 = (const std::string::value_type *)&__dst;
  else
    v21 = (const std::string::value_type *)__dst;
  if (v34 >= 0)
    v22 = HIBYTE(v34);
  else
    v22 = v33;
  std::string::append((std::string *)a1, v21, v22);
  if (SHIBYTE(v34) < 0)
    operator delete(__dst);
  return a1;
}

void sub_2109E9F34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2109E9F50(uint64_t a1@<X8>)
{
  unsigned __int8 v2;

  v2 = atomic_load((unsigned __int8 *)&qword_254A75EC0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A75EC0))
  {
    sub_2109EA060(&sub_2109E9F50, (uint64_t)&xmmword_254A75EA0);
    __cxa_atexit((void (*)(void *))sub_2109EAFFC, &xmmword_254A75EA0, &dword_21089F000);
    __cxa_guard_release(&qword_254A75EC0);
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (byte_254A75EB8)
  {
    if (byte_254A75EB7 < 0)
    {
      sub_2108B314C((_BYTE *)a1, (void *)xmmword_254A75EA0, *((unint64_t *)&xmmword_254A75EA0 + 1));
    }
    else
    {
      *(_OWORD *)a1 = xmmword_254A75EA0;
      *(_QWORD *)(a1 + 16) = unk_254A75EB0;
    }
    *(_BYTE *)(a1 + 24) = 1;
  }
}

void sub_2109EA024(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A75EC0);
  _Unwind_Resume(a1);
}

void sub_2109EA03C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_2109EA060(const void *a1@<X0>, uint64_t a2@<X8>)
{
  char *v3;
  std::__fs::filesystem::path::__string_view v5;
  char *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v7;
  std::basic_string_view<_CharT, _Traits>::size_type v8;
  std::__fs::filesystem::path::__string_view v9;
  char *v10;
  std::basic_string_view<_CharT, _Traits>::size_type v11;
  std::basic_string_view<_CharT, _Traits>::size_type v12;
  std::__fs::filesystem::path::__string_view v13;
  int v14;
  std::__fs::filesystem::path::__string_view v15;
  char *v16;
  std::basic_string_view<_CharT, _Traits>::size_type v17;
  std::basic_string_view<_CharT, _Traits>::size_type v18;
  std::__fs::filesystem::path::__string_view v19;
  char *v20;
  std::basic_string_view<_CharT, _Traits>::size_type v21;
  std::basic_string_view<_CharT, _Traits>::size_type v22;
  std::__fs::filesystem::path::__string_view v23;
  int v24;
  int v25;
  std::__fs::filesystem::path::__string_view v26;
  char *v27;
  std::basic_string_view<_CharT, _Traits>::size_type v28;
  std::basic_string_view<_CharT, _Traits>::size_type v29;
  std::__fs::filesystem::path::__string_view v30;
  char *v31;
  std::basic_string_view<_CharT, _Traits>::size_type v32;
  std::basic_string_view<_CharT, _Traits>::size_type v33;
  std::__fs::filesystem::path::__string_view v34;
  int v35;
  __int16 v36;
  size_t data_low;
  char *v38;
  char *v39;
  int v41;
  std::__fs::filesystem::path::__string_view v42;
  char *v43;
  std::basic_string_view<_CharT, _Traits>::size_type v44;
  std::basic_string_view<_CharT, _Traits>::size_type v45;
  char *dli_fname;
  int dli_sname_high;
  std::__fs::filesystem::path::__string_view v48;
  char data;
  _BYTE *v50;
  std::basic_string_view<_CharT, _Traits>::size_type v51;
  std::basic_string_view<_CharT, _Traits>::size_type v52;
  std::__fs::filesystem::path::__string_view v53;
  std::__fs::filesystem::path::__string_view v54;
  _BYTE *v55;
  _BOOL4 v56;
  int dli_saddr_low;
  int v58;
  char *v59;
  std::basic_string_view<_CharT, _Traits>::size_type v60;
  std::basic_string_view<_CharT, _Traits>::size_type v61;
  std::__fs::filesystem::path::__string_view v62;
  int v63;
  int v64;
  char *v65;
  std::__fs::filesystem::path::__string_view v67;
  char *v68;
  std::basic_string_view<_CharT, _Traits>::size_type v69;
  std::basic_string_view<_CharT, _Traits>::size_type v70;
  void *dli_fbase;
  uint64_t v72;
  __int16 v73;
  std::__fs::filesystem::path __p;
  unsigned __int8 v75;
  std::__fs::filesystem::path v76;
  unsigned __int8 v77;
  std::__fs::filesystem::path v78;
  char v79;
  std::__fs::filesystem::path v80;
  std::__fs::filesystem::path v81;
  std::__fs::filesystem::path v82;
  _DWORD v83[2];
  std::__fs::filesystem::path v84;
  _BYTE v85[15];
  char v86;
  Dl_info __dst;
  uint64_t v88;

  v88 = *MEMORY[0x24BDAC8D0];
  if (!dladdr(a1, &__dst))
    goto LABEL_10;
  memset(&__p, 0, sizeof(__p));
  v3 = (char *)(__dst.dli_fname - 1);
  while (*++v3)
    ;
  sub_2109E9C4C((unint64_t)&__p, (char *)__dst.dli_fname, v3);
  std::__fs::filesystem::__weakly_canonical(&v76, &__p, 0);
  v78 = v76;
  memset(&v76, 0, sizeof(v76));
  v79 = 1;
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
    if (!v79)
    {
LABEL_10:
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 24) = 0;
      return;
    }
  }
  v5 = std::__fs::filesystem::path::__parent_path(&v78);
  if (v5.__size_ > 0x7FFFFFFFFFFFFFF7)
    sub_2108A4B7C();
  if (v5.__size_ >= 0x17)
  {
    v7 = (v5.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5.__size_ | 7) != 0x17)
      v7 = v5.__size_ | 7;
    v8 = v7 + 1;
    p_dst = (char *)operator new(v7 + 1);
    __dst.dli_fbase = (void *)v5.__size_;
    __dst.dli_sname = (const char *)(v8 | 0x8000000000000000);
    __dst.dli_fname = p_dst;
    goto LABEL_14;
  }
  HIBYTE(__dst.dli_sname) = v5.__size_;
  p_dst = (char *)&__dst;
  if (v5.__size_)
LABEL_14:
    memmove(p_dst, v5.__data_, v5.__size_);
  p_dst[v5.__size_] = 0;
  *(_OWORD *)&__p.__pn_.__r_.__value_.__l.__data_ = *(_OWORD *)&__dst.dli_fname;
  __p.__pn_.__r_.__value_.__r.__words[2] = (std::string::size_type)__dst.dli_sname;
  v9 = std::__fs::filesystem::path::__extension(&__p);
  if (v9.__size_ > 0x7FFFFFFFFFFFFFF7)
    sub_2108A4B7C();
  if (v9.__size_ >= 0x17)
  {
    v11 = (v9.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9.__size_ | 7) != 0x17)
      v11 = v9.__size_ | 7;
    v12 = v11 + 1;
    v10 = (char *)operator new(v11 + 1);
    __dst.dli_fbase = (void *)v9.__size_;
    __dst.dli_sname = (const char *)(v12 | 0x8000000000000000);
    __dst.dli_fname = v10;
    goto LABEL_22;
  }
  HIBYTE(__dst.dli_sname) = v9.__size_;
  v10 = (char *)&__dst;
  if (v9.__size_)
LABEL_22:
    memmove(v10, v9.__data_, v9.__size_);
  v10[v9.__size_] = 0;
  *(_OWORD *)&v84.__pn_.__r_.__value_.__l.__data_ = *(_OWORD *)&__dst.dli_fname;
  v84.__pn_.__r_.__value_.__r.__words[2] = (std::string::size_type)__dst.dli_sname;
  memset(&__dst, 0, 24);
  sub_2109E9C4C((unint64_t)&__dst, ".framework", "");
  if (SHIBYTE(__dst.dli_sname) >= 0)
    v13.__data_ = (const std::string_view::value_type *)&__dst;
  else
    v13.__data_ = __dst.dli_fname;
  if (SHIBYTE(__dst.dli_sname) >= 0)
    v13.__size_ = HIBYTE(__dst.dli_sname);
  else
    v13.__size_ = (std::basic_string_view<_CharT, _Traits>::size_type)__dst.dli_fbase;
  v14 = std::__fs::filesystem::path::__compare(&v84, v13);
  if (SHIBYTE(__dst.dli_sname) < 0)
  {
    operator delete((void *)__dst.dli_fname);
    if ((SHIBYTE(v84.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_31:
      if (v14)
        goto LABEL_32;
LABEL_38:
      v76 = __p;
      v77 = 1;
      goto LABEL_92;
    }
  }
  else if ((SHIBYTE(v84.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_31;
  }
  operator delete(v84.__pn_.__r_.__value_.__l.__data_);
  if (!v14)
    goto LABEL_38;
LABEL_32:
  v15 = std::__fs::filesystem::path::__parent_path(&__p);
  if (v15.__size_ > 0x7FFFFFFFFFFFFFF7)
    sub_2108A4B7C();
  if (v15.__size_ >= 0x17)
  {
    v17 = (v15.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15.__size_ | 7) != 0x17)
      v17 = v15.__size_ | 7;
    v18 = v17 + 1;
    v16 = (char *)operator new(v17 + 1);
    __dst.dli_fbase = (void *)v15.__size_;
    __dst.dli_sname = (const char *)(v18 | 0x8000000000000000);
    __dst.dli_fname = v16;
    goto LABEL_42;
  }
  HIBYTE(__dst.dli_sname) = v15.__size_;
  v16 = (char *)&__dst;
  if (v15.__size_)
LABEL_42:
    memmove(v16, v15.__data_, v15.__size_);
  v16[v15.__size_] = 0;
  *(_OWORD *)&v84.__pn_.__r_.__value_.__l.__data_ = *(_OWORD *)&__dst.dli_fname;
  v84.__pn_.__r_.__value_.__r.__words[2] = (std::string::size_type)__dst.dli_sname;
  v19 = std::__fs::filesystem::path::__filename(&v84);
  if (v19.__size_ > 0x7FFFFFFFFFFFFFF7)
    sub_2108A4B7C();
  if (v19.__size_ >= 0x17)
  {
    v21 = (v19.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19.__size_ | 7) != 0x17)
      v21 = v19.__size_ | 7;
    v22 = v21 + 1;
    v20 = (char *)operator new(v21 + 1);
    __dst.dli_fbase = (void *)v19.__size_;
    __dst.dli_sname = (const char *)(v22 | 0x8000000000000000);
    __dst.dli_fname = v20;
    goto LABEL_50;
  }
  HIBYTE(__dst.dli_sname) = v19.__size_;
  v20 = (char *)&__dst;
  if (v19.__size_)
LABEL_50:
    memmove(v20, v19.__data_, v19.__size_);
  v20[v19.__size_] = 0;
  *(_OWORD *)&v82.__pn_.__r_.__value_.__l.__data_ = *(_OWORD *)&__dst.dli_fname;
  v82.__pn_.__r_.__value_.__r.__words[2] = (std::string::size_type)__dst.dli_sname;
  memset(&__dst, 0, 24);
  sub_2109E9C4C((unint64_t)&__dst, "Versions", "");
  if (SHIBYTE(__dst.dli_sname) >= 0)
    v23.__data_ = (const std::string_view::value_type *)&__dst;
  else
    v23.__data_ = __dst.dli_fname;
  if (SHIBYTE(__dst.dli_sname) >= 0)
    v23.__size_ = HIBYTE(__dst.dli_sname);
  else
    v23.__size_ = (std::basic_string_view<_CharT, _Traits>::size_type)__dst.dli_fbase;
  v24 = std::__fs::filesystem::path::__compare(&v82, v23);
  v25 = v24;
  if (SHIBYTE(__dst.dli_sname) < 0)
  {
    operator delete((void *)__dst.dli_fname);
    if (v25)
      goto LABEL_88;
  }
  else if (v24)
  {
    goto LABEL_88;
  }
  v26 = std::__fs::filesystem::path::__parent_path(&v84);
  if (v26.__size_ > 0x7FFFFFFFFFFFFFF7)
    sub_2108A4B7C();
  if (v26.__size_ >= 0x17)
  {
    v28 = (v26.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26.__size_ | 7) != 0x17)
      v28 = v26.__size_ | 7;
    v29 = v28 + 1;
    v27 = (char *)operator new(v28 + 1);
    __dst.dli_fbase = (void *)v26.__size_;
    __dst.dli_sname = (const char *)(v29 | 0x8000000000000000);
    __dst.dli_fname = v27;
    goto LABEL_68;
  }
  HIBYTE(__dst.dli_sname) = v26.__size_;
  v27 = (char *)&__dst;
  if (v26.__size_)
LABEL_68:
    memmove(v27, v26.__data_, v26.__size_);
  v27[v26.__size_] = 0;
  *(_OWORD *)&v81.__pn_.__r_.__value_.__l.__data_ = *(_OWORD *)&__dst.dli_fname;
  v81.__pn_.__r_.__value_.__r.__words[2] = (std::string::size_type)__dst.dli_sname;
  v30 = std::__fs::filesystem::path::__extension(&v81);
  if (v30.__size_ > 0x7FFFFFFFFFFFFFF7)
    sub_2108A4B7C();
  if (v30.__size_ >= 0x17)
  {
    v32 = (v30.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v30.__size_ | 7) != 0x17)
      v32 = v30.__size_ | 7;
    v33 = v32 + 1;
    v31 = (char *)operator new(v32 + 1);
    __dst.dli_fbase = (void *)v30.__size_;
    __dst.dli_sname = (const char *)(v33 | 0x8000000000000000);
    __dst.dli_fname = v31;
    goto LABEL_76;
  }
  HIBYTE(__dst.dli_sname) = v30.__size_;
  v31 = (char *)&__dst;
  if (v30.__size_)
LABEL_76:
    memmove(v31, v30.__data_, v30.__size_);
  v31[v30.__size_] = 0;
  *(_OWORD *)&v80.__pn_.__r_.__value_.__l.__data_ = *(_OWORD *)&__dst.dli_fname;
  v80.__pn_.__r_.__value_.__r.__words[2] = (std::string::size_type)__dst.dli_sname;
  memset(&__dst, 0, 24);
  sub_2109E9C4C((unint64_t)&__dst, ".framework", "");
  if (SHIBYTE(__dst.dli_sname) >= 0)
    v34.__data_ = (const std::string_view::value_type *)&__dst;
  else
    v34.__data_ = __dst.dli_fname;
  if (SHIBYTE(__dst.dli_sname) >= 0)
    v34.__size_ = HIBYTE(__dst.dli_sname);
  else
    v34.__size_ = (std::basic_string_view<_CharT, _Traits>::size_type)__dst.dli_fbase;
  v35 = std::__fs::filesystem::path::__compare(&v80, v34);
  if (SHIBYTE(__dst.dli_sname) < 0)
  {
    operator delete((void *)__dst.dli_fname);
    if ((SHIBYTE(v80.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_85:
      if (v35)
        goto LABEL_86;
      goto LABEL_100;
    }
  }
  else if ((SHIBYTE(v80.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_85;
  }
  operator delete(v80.__pn_.__r_.__value_.__l.__data_);
  if (v35)
  {
LABEL_86:
    if (SHIBYTE(v81.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v81.__pn_.__r_.__value_.__l.__data_);
LABEL_88:
    v76.__pn_.__r_.__value_.__s.__data_[0] = 0;
    v77 = 0;
    if ((SHIBYTE(v82.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_89;
    goto LABEL_101;
  }
LABEL_100:
  v76 = v81;
  v77 = 1;
  if ((SHIBYTE(v82.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_89:
    if ((SHIBYTE(v84.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_90;
    goto LABEL_102;
  }
LABEL_101:
  operator delete(v82.__pn_.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v84.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_90:
    if ((SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_91;
    goto LABEL_103;
  }
LABEL_102:
  operator delete(v84.__pn_.__r_.__value_.__l.__data_);
  if ((SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_91:
    if (!v77)
      goto LABEL_104;
    goto LABEL_92;
  }
LABEL_103:
  operator delete(__p.__pn_.__r_.__value_.__l.__data_);
  if (!v77)
    goto LABEL_104;
LABEL_92:
  std::__fs::filesystem::__status(&v76, 0);
  if (!LOBYTE(__dst.dli_fname)
    || LOBYTE(__dst.dli_fname) == 255
    || (std::__fs::filesystem::__status(&v76, 0),
        v36 = WORD2(__dst.dli_fname),
        std::__fs::filesystem::__status(&v76, 0),
        LOBYTE(__dst.dli_fname) != 2)
    || (v36 & 0x100) == 0)
  {
LABEL_104:
    LODWORD(v82.__pn_.__r_.__value_.__l.__data_) = 1026;
    if (!_NSGetExecutablePath((char *)&__dst, (uint32_t *)&v82))
    {
      memset(&v84, 0, sizeof(v84));
      v39 = &v86;
      while (*++v39)
        ;
      sub_2109E9C4C((unint64_t)&v84, (char *)&__dst, v39);
      __p = v84;
      v75 = 1;
      goto LABEL_115;
    }
    data_low = LODWORD(v82.__pn_.__r_.__value_.__l.__data_);
    if (LODWORD(v82.__pn_.__r_.__value_.__l.__data_))
    {
      v38 = (char *)operator new(LODWORD(v82.__pn_.__r_.__value_.__l.__data_));
      bzero(v38, data_low);
    }
    else
    {
      v38 = 0;
    }
    if (_NSGetExecutablePath(v38, (uint32_t *)&v82))
    {
      v41 = 0;
      __p.__pn_.__r_.__value_.__s.__data_[0] = 0;
      v75 = 0;
      if (!v38)
        goto LABEL_114;
    }
    else
    {
      memset(&v84, 0, sizeof(v84));
      v65 = v38 - 1;
      while (*++v65)
        ;
      sub_2109E9C4C((unint64_t)&v84, v38, v65);
      __p = v84;
      v41 = 1;
      v75 = 1;
      if (!v38)
      {
LABEL_114:
        if (!v41)
        {
          *(_BYTE *)a2 = 0;
          *(_BYTE *)(a2 + 24) = 0;
          goto LABEL_209;
        }
LABEL_115:
        v42 = std::__fs::filesystem::path::__parent_path(&__p);
        if (v42.__size_ > 0x7FFFFFFFFFFFFFF7)
          sub_2108A4B7C();
        if (v42.__size_ >= 0x17)
        {
          v44 = (v42.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v42.__size_ | 7) != 0x17)
            v44 = v42.__size_ | 7;
          v45 = v44 + 1;
          v43 = (char *)operator new(v44 + 1);
          __dst.dli_fbase = (void *)v42.__size_;
          __dst.dli_sname = (const char *)(v45 | 0x8000000000000000);
          __dst.dli_fname = v43;
        }
        else
        {
          HIBYTE(__dst.dli_sname) = v42.__size_;
          v43 = (char *)&__dst;
          if (!v42.__size_)
          {
LABEL_123:
            v43[v42.__size_] = 0;
            dli_fname = (char *)__dst.dli_fname;
            v83[0] = __dst.dli_sname;
            *(_DWORD *)((char *)v83 + 3) = *(_DWORD *)((char *)&__dst.dli_sname + 3);
            dli_sname_high = SHIBYTE(__dst.dli_sname);
            LOBYTE(__dst.dli_fname) = 0;
            LOBYTE(__dst.dli_saddr) = 0;
            if (SHIBYTE(__dst.dli_sname) < 0)
            {
              sub_2108B314C(&__dst, dli_fname, (unint64_t)__dst.dli_fbase);
            }
            else
            {
              __dst.dli_fname = dli_fname;
              LODWORD(__dst.dli_sname) = v83[0];
              *(_DWORD *)((char *)&__dst.dli_sname + 3) = *(_DWORD *)((char *)v83 + 3);
            }
            LOBYTE(__dst.dli_saddr) = 1;
            v48 = std::__fs::filesystem::path::__extension((const std::__fs::filesystem::path *)&__dst);
            if (v48.__size_ > 0x7FFFFFFFFFFFFFF7)
              sub_2108A4B7C();
            data = (char)v48.__data_;
            if (v48.__size_ >= 0x17)
            {
              v51 = (v48.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v48.__size_ | 7) != 0x17)
                v51 = v48.__size_ | 7;
              v52 = v51 + 1;
              v50 = operator new(v51 + 1);
              v84.__pn_.__r_.__value_.__l.__size_ = v48.__size_;
              v84.__pn_.__r_.__value_.__r.__words[2] = v52 | 0x8000000000000000;
              v84.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v50;
            }
            else
            {
              *((_BYTE *)&v84.__pn_.__r_.__value_.__s + 23) = v48.__size_;
              v50 = &v84;
              if (!v48.__size_)
              {
LABEL_134:
                v50[v48.__size_] = 0;
                v82 = v84;
                memset(&v81, 0, sizeof(v81));
                sub_2109E9C4C((unint64_t)&v81, ".app", "");
                if ((v81.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v53.__data_ = (const std::string_view::value_type *)&v81;
                else
                  v53.__data_ = (const std::string_view::value_type *)v81.__pn_.__r_.__value_.__r.__words[0];
                if ((v81.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v53.__size_ = HIBYTE(v81.__pn_.__r_.__value_.__r.__words[2]);
                else
                  v53.__size_ = v81.__pn_.__r_.__value_.__l.__size_;
                if (!std::__fs::filesystem::path::__compare(&v82, v53))
                {
                  v56 = 1;
                  if ((SHIBYTE(v81.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    goto LABEL_164;
                  goto LABEL_146;
                }
                v54 = std::__fs::filesystem::path::__extension((const std::__fs::filesystem::path *)&__dst);
                if (v54.__size_ > 0x7FFFFFFFFFFFFFF7)
                  sub_2108A4B7C();
                data = (char)v54.__data_;
                if (v54.__size_ >= 0x17)
                {
                  v60 = (v54.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v54.__size_ | 7) != 0x17)
                    v60 = v54.__size_ | 7;
                  v61 = v60 + 1;
                  v55 = operator new(v60 + 1);
                  v84.__pn_.__r_.__value_.__l.__size_ = v54.__size_;
                  v84.__pn_.__r_.__value_.__r.__words[2] = v61 | 0x8000000000000000;
                  v84.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v55;
                }
                else
                {
                  *((_BYTE *)&v84.__pn_.__r_.__value_.__s + 23) = v54.__size_;
                  v55 = &v84;
                  if (!v54.__size_)
                  {
LABEL_155:
                    v55[v54.__size_] = 0;
                    v80 = v84;
                    memset(&v84, 0, sizeof(v84));
                    sub_2109E9C4C((unint64_t)&v84, ".bundle", "");
                    if ((v84.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v62.__data_ = (const std::string_view::value_type *)&v84;
                    else
                      v62.__data_ = (const std::string_view::value_type *)v84.__pn_.__r_.__value_.__r.__words[0];
                    if ((v84.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v62.__size_ = HIBYTE(v84.__pn_.__r_.__value_.__r.__words[2]);
                    else
                      v62.__size_ = v84.__pn_.__r_.__value_.__l.__size_;
                    v56 = std::__fs::filesystem::path::__compare(&v80, v62) == 0;
                    if (SHIBYTE(v84.__pn_.__r_.__value_.__r.__words[2]) < 0)
                    {
                      operator delete(v84.__pn_.__r_.__value_.__l.__data_);
                      if ((SHIBYTE(v80.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      {
LABEL_163:
                        if ((SHIBYTE(v81.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                          goto LABEL_164;
                        goto LABEL_146;
                      }
                    }
                    else if ((SHIBYTE(v80.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    {
                      goto LABEL_163;
                    }
                    operator delete(v80.__pn_.__r_.__value_.__l.__data_);
                    if ((SHIBYTE(v81.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    {
LABEL_164:
                      if ((SHIBYTE(v82.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      {
LABEL_165:
                        dli_saddr_low = LOBYTE(__dst.dli_saddr);
                        if (v56)
                        {
LABEL_166:
                          if (dli_saddr_low)
                          {
                            v59 = (char *)__dst.dli_fname;
                            *(_QWORD *)v85 = __dst.dli_fbase;
                            *(_QWORD *)&v85[7] = *(void **)((char *)&__dst.dli_fbase + 7);
                            v58 = 1;
                            data = HIBYTE(__dst.dli_sname);
LABEL_168:
                            if ((dli_sname_high & 0x80000000) == 0)
                              goto LABEL_169;
                            goto LABEL_176;
                          }
                          goto LABEL_174;
                        }
LABEL_148:
                        v58 = 0;
                        v59 = 0;
                        if (!dli_saddr_low)
                          goto LABEL_175;
                        if ((SHIBYTE(__dst.dli_sname) & 0x80000000) == 0)
                          goto LABEL_168;
                        operator delete((void *)__dst.dli_fname);
LABEL_174:
                        v59 = 0;
                        v58 = 0;
LABEL_175:
                        if ((dli_sname_high & 0x80000000) == 0)
                        {
LABEL_169:
                          v63 = v77;
                          if (v77 == v58)
                            goto LABEL_170;
                          goto LABEL_177;
                        }
LABEL_176:
                        operator delete(dli_fname);
                        v63 = v77;
                        if (v77 == v58)
                        {
LABEL_170:
                          if (v63)
                          {
                            if (SHIBYTE(v76.__pn_.__r_.__value_.__r.__words[2]) < 0)
                              operator delete(v76.__pn_.__r_.__value_.__l.__data_);
                            v76.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v59;
                            v76.__pn_.__r_.__value_.__l.__size_ = *(_QWORD *)v85;
                            *(std::string::size_type *)((char *)&v76.__pn_.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)&v85[7];
                            *((_BYTE *)&v76.__pn_.__r_.__value_.__s + 23) = data;
                            goto LABEL_186;
                          }
LABEL_181:
                          if (data < 0)
                            v64 = v58;
                          else
                            v64 = 0;
                          if (v64 == 1)
                            operator delete(v59);
LABEL_186:
                          if (!v77)
                            goto LABEL_199;
                          goto LABEL_197;
                        }
LABEL_177:
                        if (!v63)
                        {
                          v76.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v59;
                          v76.__pn_.__r_.__value_.__l.__size_ = *(_QWORD *)v85;
                          *(std::string::size_type *)((char *)&v76.__pn_.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)&v85[7];
                          *((_BYTE *)&v76.__pn_.__r_.__value_.__s + 23) = data;
                          v77 = 1;
LABEL_197:
                          std::__fs::filesystem::__status(&v76, 0);
                          if (LOBYTE(__dst.dli_fname))
                          {
                            if (LOBYTE(__dst.dli_fname) != 255)
                            {
                              std::__fs::filesystem::__status(&v76, 0);
                              v73 = WORD2(__dst.dli_fname);
                              std::__fs::filesystem::__status(&v76, 0);
                              if (LOBYTE(__dst.dli_fname) == 2 && (v73 & 0x100) != 0)
                              {
                                *(_BYTE *)a2 = 0;
                                *(_BYTE *)(a2 + 24) = 0;
                                if (!v77)
                                {
LABEL_209:
                                  if (v75 && SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
                                    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
                                  if (v77 && SHIBYTE(v76.__pn_.__r_.__value_.__r.__words[2]) < 0)
                                    operator delete(v76.__pn_.__r_.__value_.__l.__data_);
                                  goto LABEL_215;
                                }
                                *(std::__fs::filesystem::path *)a2 = v76;
                                memset(&v76, 0, sizeof(v76));
LABEL_208:
                                *(_BYTE *)(a2 + 24) = 1;
                                goto LABEL_209;
                              }
                            }
                          }
LABEL_199:
                          v67 = std::__fs::filesystem::path::__parent_path(&__p);
                          if (v67.__size_ > 0x7FFFFFFFFFFFFFF7)
                            sub_2108A4B7C();
                          if (v67.__size_ >= 0x17)
                          {
                            v69 = (v67.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
                            if ((v67.__size_ | 7) != 0x17)
                              v69 = v67.__size_ | 7;
                            v70 = v69 + 1;
                            v68 = (char *)operator new(v69 + 1);
                            __dst.dli_fbase = (void *)v67.__size_;
                            __dst.dli_sname = (const char *)(v70 | 0x8000000000000000);
                            __dst.dli_fname = v68;
                          }
                          else
                          {
                            HIBYTE(__dst.dli_sname) = v67.__size_;
                            v68 = (char *)&__dst;
                            if (!v67.__size_)
                              goto LABEL_207;
                          }
                          memmove(v68, v67.__data_, v67.__size_);
LABEL_207:
                          v68[v67.__size_] = 0;
                          dli_fbase = __dst.dli_fbase;
                          v72 = *(uint64_t *)((char *)&__dst.dli_fbase + 7);
                          *(_QWORD *)a2 = __dst.dli_fname;
                          *(_QWORD *)(a2 + 8) = dli_fbase;
                          *(_QWORD *)(a2 + 15) = v72;
                          *(_BYTE *)(a2 + 23) = HIBYTE(__dst.dli_sname);
                          goto LABEL_208;
                        }
                        if (SHIBYTE(v76.__pn_.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v76.__pn_.__r_.__value_.__l.__data_);
                        v77 = 0;
                        goto LABEL_181;
                      }
LABEL_147:
                      operator delete(v82.__pn_.__r_.__value_.__l.__data_);
                      dli_saddr_low = LOBYTE(__dst.dli_saddr);
                      if (v56)
                        goto LABEL_166;
                      goto LABEL_148;
                    }
LABEL_146:
                    operator delete(v81.__pn_.__r_.__value_.__l.__data_);
                    if ((SHIBYTE(v82.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      goto LABEL_165;
                    goto LABEL_147;
                  }
                }
                memmove(v55, v54.__data_, v54.__size_);
                goto LABEL_155;
              }
            }
            memmove(v50, v48.__data_, v48.__size_);
            goto LABEL_134;
          }
        }
        memmove(v43, v42.__data_, v42.__size_);
        goto LABEL_123;
      }
    }
    operator delete(v38);
    v41 = v75;
    goto LABEL_114;
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 24) = 0;
  if (v77)
  {
    *(std::__fs::filesystem::path *)a2 = v76;
    *(_BYTE *)(a2 + 24) = 1;
  }
LABEL_215:
  if (v79)
  {
    if (SHIBYTE(v78.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v78.__pn_.__r_.__value_.__l.__data_);
  }
}

void sub_2109EAD7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, _Unwind_Exception *exception_object, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  void *v44;

  if (a44 < 0)
    operator delete(__p);
  if (v44)
    operator delete(v44);
  if (a19 && a18 < 0)
    operator delete(exception_object);
  if (a26)
  {
    if (a25 < 0)
    {
      operator delete(a20);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2109EAFFC(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(_BYTE *)(result + 24))
  {
    if (*(char *)(result + 23) < 0)
    {
      operator delete(*(void **)result);
      return v1;
    }
  }
  return result;
}

void sub_2109EB044(std::string *a1, uint64_t a2)
{
  void **v4;
  const __CFAllocator *v5;
  CFIndex v6;
  const __CFString *v7;
  CFURLRef v8;
  CFBundleRef v9;
  const __CFString *ValueForInfoDictionaryKey;
  const __CFString *v11;
  void *__p[2];
  uint64_t v13;
  void *__dst[2];
  uint64_t v15;
  const __CFString *v16;

  if (!*(_BYTE *)(a2 + 24))
  {
    a1->__r_.__value_.__s.__data_[0] = 0;
    a1[1].__r_.__value_.__s.__data_[0] = 0;
    return;
  }
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    v15 = *(_QWORD *)(a2 + 16);
    *(_OWORD *)__dst = *(_OWORD *)a2;
    if (v15 >= 0)
      v4 = __dst;
    else
      v4 = (void **)__dst[0];
LABEL_10:
    *(_OWORD *)__p = *(_OWORD *)a2;
    v13 = *(_QWORD *)(a2 + 16);
    goto LABEL_11;
  }
  v4 = __dst;
  sub_2108B314C(__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
  if (v15 < 0)
    v4 = (void **)__dst[0];
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
    goto LABEL_10;
  sub_2108B314C(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
LABEL_11:
  v5 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  if (v13 >= 0)
    v6 = HIBYTE(v13);
  else
    v6 = (CFIndex)__p[1];
  v7 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x24BDBD240], (const UInt8 *)v4, v6, 0x8000100u, 0);
  v16 = v7;
  if ((SHIBYTE(v13) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v15) & 0x80000000) == 0)
      goto LABEL_16;
LABEL_19:
    operator delete(__dst[0]);
    if (!v7)
      goto LABEL_20;
    goto LABEL_21;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v15) < 0)
    goto LABEL_19;
LABEL_16:
  if (!v7)
  {
LABEL_20:
    if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Apple/src/BundlePath.cpp", 66, (uint64_t)"cf_path_str", 11, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
  }
LABEL_21:
  v8 = CFURLCreateWithFileSystemPath(v5, v7, kCFURLPOSIXPathStyle, 1u);
  __dst[0] = v8;
  if (!v8
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Apple/src/BundlePath.cpp", 70, (uint64_t)"cf_path_url", 11, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
  v9 = CFBundleCreate(v5, v8);
  __p[0] = v9;
  if (!v9
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Apple/src/BundlePath.cpp", 73, (uint64_t)"cf_current_bundle", 17, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
  ValueForInfoDictionaryKey = (const __CFString *)CFBundleGetValueForInfoDictionaryKey(v9, (CFStringRef)*MEMORY[0x24BDBD288]);
  v11 = ValueForInfoDictionaryKey;
  if (ValueForInfoDictionaryKey)
    CFRetain(ValueForInfoDictionaryKey);
  sub_2109EBD44(v11, a1);
  if (v11)
    CFRelease(v11);
  __p[0] = 0;
  if (v9)
    CFRelease(v9);
  __dst[0] = 0;
  if (v8)
    CFRelease(v8);
  v16 = 0;
  if (v7)
    CFRelease(v7);
}

void sub_2109EB2F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_2109EB38C(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  char v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A75EE8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A75EE8))
  {
    sub_2109E9F50((uint64_t)__p);
    sub_2109EB044((std::string *)&xmmword_254A75EC8, (uint64_t)__p);
    if (v5 && v4 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))sub_2109EB4F0, &xmmword_254A75EC8, &dword_21089F000);
    __cxa_guard_release(&qword_254A75EE8);
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (byte_254A75EE0)
  {
    if (byte_254A75EDF < 0)
    {
      sub_2108B314C((_BYTE *)a1, (void *)xmmword_254A75EC8, *((unint64_t *)&xmmword_254A75EC8 + 1));
    }
    else
    {
      *(_OWORD *)a1 = xmmword_254A75EC8;
      *(_QWORD *)(a1 + 16) = unk_254A75ED8;
    }
    *(_BYTE *)(a1 + 24) = 1;
  }
}

void sub_2109EB484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0)
    {
      operator delete(__p);
      __cxa_guard_abort(&qword_254A75EE8);
      _Unwind_Resume(a1);
    }
  }
  __cxa_guard_abort(&qword_254A75EE8);
  _Unwind_Resume(a1);
}

void sub_2109EB4CC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2109EB4F0(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(_BYTE *)(result + 24))
  {
    if (*(char *)(result + 23) < 0)
    {
      operator delete(*(void **)result);
      return v1;
    }
  }
  return result;
}

const void **sub_2109EB538(const void **a1)
{
  const void *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
    CFRelease(v2);
  return a1;
}

const void **sub_2109EB56C(const void **a1)
{
  const void *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
    CFRelease(v2);
  return a1;
}

const void **sub_2109EB5A0(const void **a1)
{
  const void *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
    CFRelease(v2);
  return a1;
}

void sub_2109EB5D8()
{
  JUMPOUT(0x212BCC6FCLL);
}

void sub_2109EB5EC(std::string *a1@<X8>)
{
  const __CFString *v2;
  const __CFString *v3;

  v2 = (const __CFString *)MGGetStringAnswer();
  if (v2)
  {
    v3 = v2;
    sub_2109EBD44(v2, a1);
    CFRelease(v3);
  }
  else
  {
    a1->__r_.__value_.__s.__data_[0] = 0;
    a1[1].__r_.__value_.__s.__data_[0] = 0;
  }
}

void sub_2109EB644(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_2109EB65C(std::string *a1@<X8>)
{
  const __CFString *v2;
  const __CFString *v3;

  v2 = (const __CFString *)MGGetStringAnswer();
  if (v2)
  {
    v3 = v2;
    sub_2109EBD44(v2, a1);
    CFRelease(v3);
  }
  else
  {
    a1->__r_.__value_.__s.__data_[0] = 0;
    a1[1].__r_.__value_.__s.__data_[0] = 0;
  }
}

void sub_2109EB6B4(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_2109EB6CC(std::string *a1@<X8>)
{
  const __CFString *v2;
  const __CFString *v3;

  v2 = (const __CFString *)MGGetStringAnswer();
  if (v2)
  {
    v3 = v2;
    sub_2109EBD44(v2, a1);
    CFRelease(v3);
  }
  else
  {
    a1->__r_.__value_.__s.__data_[0] = 0;
    a1[1].__r_.__value_.__s.__data_[0] = 0;
  }
}

void sub_2109EB724(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_2109EB73C(std::string *a1@<X8>)
{
  const __CFString *v2;
  const __CFString *v3;

  v2 = (const __CFString *)MGGetStringAnswer();
  if (v2)
  {
    v3 = v2;
    sub_2109EBD44(v2, a1);
    CFRelease(v3);
  }
  else
  {
    a1->__r_.__value_.__s.__data_[0] = 0;
    a1[1].__r_.__value_.__s.__data_[0] = 0;
  }
}

void sub_2109EB794(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_2109EB7AC(std::string *a1@<X8>)
{
  const __CFString *v2;
  const __CFString *v3;

  v2 = (const __CFString *)MGGetStringAnswer();
  if (v2)
  {
    v3 = v2;
    sub_2109EBD44(v2, a1);
    CFRelease(v3);
  }
  else
  {
    a1->__r_.__value_.__s.__data_[0] = 0;
    a1[1].__r_.__value_.__s.__data_[0] = 0;
  }
}

void sub_2109EB804(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_2109EB81C(std::string *a1@<X8>)
{
  const __CFString *v2;
  const __CFString *v3;

  v2 = (const __CFString *)MGGetStringAnswer();
  if (v2)
  {
    v3 = v2;
    sub_2109EBD44(v2, a1);
    CFRelease(v3);
  }
  else
  {
    a1->__r_.__value_.__s.__data_[0] = 0;
    a1[1].__r_.__value_.__s.__data_[0] = 0;
  }
}

void sub_2109EB874(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_2109EB88C(uint64_t a1@<X8>)
{
  const __CFString *v2;
  const __CFString *v3;
  std::string::value_type v4;
  std::string::size_type v5;
  __int16 v6;
  char v7;
  std::string v8;
  std::string::value_type v9;
  const __CFString *v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (const __CFString *)MGGetStringAnswer();
  v10 = v2;
  if (!v2)
  {
    v4 = 0;
    goto LABEL_5;
  }
  v3 = v2;
  sub_2109EBD44(v2, &v8);
  CFRelease(v3);
  v4 = v9;
  if (!v9)
  {
LABEL_5:
    v7 = 10;
    v6 = 28271;
    v5 = 0x69746375646F7250;
    goto LABEL_6;
  }
  v5 = v8.__r_.__value_.__r.__words[0];
  v6 = v8.__r_.__value_.__r.__words[1];
  v4 = v8.__r_.__value_.__s.__data_[10];
  v10 = *(const __CFString **)((char *)&v8.__r_.__value_.__r.__words[1] + 3);
  v11 = *(_DWORD *)((char *)&v8.__r_.__value_.__r.__words[2] + 3);
  v7 = HIBYTE(v8.__r_.__value_.__r.__words[2]);
LABEL_6:
  *(_QWORD *)a1 = v5;
  *(_WORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 10) = v4;
  *(_QWORD *)(a1 + 11) = v10;
  *(_DWORD *)(a1 + 19) = v11;
  *(_BYTE *)(a1 + 23) = v7;
  *(_BYTE *)(a1 + 24) = 1;
}

void sub_2109EB974(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a2)
    sub_2108ABF6C(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2109EB998()
{
  return MGGetSInt64Answer();
}

uint64_t sub_2109EB9BC()
{
  const void *v0;
  const void *v1;

  v0 = (const void *)MGCopyAnswer();
  if (!v0)
    return 0;
  v1 = v0;
  CFRelease(v0);
  return (v1 == (const void *)*MEMORY[0x24BDBD270]) | 0x100u;
}

uint64_t sub_2109EBA28()
{
  const void *v0;
  const void *v1;

  v0 = (const void *)MGCopyAnswer();
  if (!v0)
    return 0;
  v1 = v0;
  CFRelease(v0);
  return (v1 == (const void *)*MEMORY[0x24BDBD270]) | 0x100u;
}

uint64_t sub_2109EBA94()
{
  const void *v0;
  const void *v1;

  v0 = (const void *)MGCopyAnswer();
  if (!v0)
    return 0;
  v1 = v0;
  CFRelease(v0);
  return (v1 == (const void *)*MEMORY[0x24BDBD270]) | 0x100u;
}

uint64_t sub_2109EBB00()
{
  return MGGetSInt32Answer() | 0x100000000;
}

void sub_2109EBB28(std::string *a1@<X8>)
{
  const __CFString *v2;
  const __CFString *v3;

  v2 = (const __CFString *)MGGetStringAnswer();
  if (v2)
  {
    v3 = v2;
    sub_2109EBD44(v2, a1);
    CFRelease(v3);
  }
  else
  {
    a1->__r_.__value_.__s.__data_[0] = 0;
    a1[1].__r_.__value_.__s.__data_[0] = 0;
  }
}

void sub_2109EBB80(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_2109EBB98(uint64_t a1@<X8>)
{
  const __CFString *v2;
  const __CFString *v3;
  std::string *p_p;
  std::string::size_type size;
  __int128 v6;
  uint64_t v7;
  std::string __p;
  char v9;

  v2 = (const __CFString *)MGGetStringAnswer();
  *(_QWORD *)&v6 = v2;
  if (v2 && (v3 = v2, sub_2109EBD44(v2, &__p), CFRelease(v3), v9))
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    sub_2109E35F8((char *)p_p, size, ":", 1, 0, (uint64_t)&v6);
    *(_OWORD *)a1 = v6;
    *(_QWORD *)(a1 + 16) = v7;
    *(_BYTE *)(a1 + 24) = 1;
    if (v9)
    {
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 0;
  }
}

void sub_2109EBC68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a19)
  {
    if (a18 < 0)
    {
      operator delete(__p);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2109EBCA4()
{
  const void *v0;
  const void *v1;

  v0 = (const void *)MGCopyAnswer();
  if (!v0)
    return 0;
  v1 = v0;
  CFRelease(v0);
  return (v1 == (const void *)*MEMORY[0x24BDBD270]) | 0x100u;
}

BOOL sub_2109EBD10(uint64_t a1)
{
  unsigned int v1;

  v1 = (*(unsigned __int16 (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
  if (v1 <= 0x100)
    LOBYTE(v1) = 0;
  return v1 != 0;
}

const __CFString *sub_2109EBD44@<X0>(const __CFString *result@<X0>, std::string *a2@<X8>)
{
  const __CFString *v3;
  CFIndex v4;
  CFIndex v5;
  std::string *v6;
  std::string v7;
  CFIndex usedBufLen;
  CFRange v9;
  CFRange v10;

  if (!result)
    goto LABEL_8;
  v3 = result;
  result = (const __CFString *)CFStringGetLength(result);
  if (result)
  {
    v4 = (CFIndex)result;
    usedBufLen = 0;
    v9.location = 0;
    v9.length = (CFIndex)result;
    result = (const __CFString *)CFStringGetBytes(v3, v9, 0x8000100u, 0, 0, 0, 0, &usedBufLen);
    if ((uint64_t)result > 0)
    {
      memset(&v7, 0, sizeof(v7));
      if (usedBufLen)
      {
        std::string::append(&v7, usedBufLen, 0);
        v5 = usedBufLen;
        if ((v7.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v6 = &v7;
        else
          v6 = (std::string *)v7.__r_.__value_.__r.__words[0];
      }
      else
      {
        v5 = 0;
        v6 = &v7;
      }
      v10.location = 0;
      v10.length = v4;
      result = (const __CFString *)CFStringGetBytes(v3, v10, 0x8000100u, 0, 0, (UInt8 *)v6, v5, 0);
      *a2 = v7;
      goto LABEL_12;
    }
LABEL_8:
    a2->__r_.__value_.__s.__data_[0] = 0;
    a2[1].__r_.__value_.__s.__data_[0] = 0;
    return result;
  }
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
LABEL_12:
  a2[1].__r_.__value_.__s.__data_[0] = 1;
  return result;
}

void sub_2109EBE68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2109EBE84(uint64_t a1, _OWORD *a2)
{
  std::string v5;

  sub_2109EBF28((uint64_t)a2, &v5);
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v5);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  *(_QWORD *)a1 = off_24CA85208;
  *(_OWORD *)(a1 + 16) = *a2;
  sub_210986B00((_BYTE *)(a1 + 32), a2 + 1);
  return a1;
}

void sub_2109EBEF8(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

void sub_2109EBF0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2109EBF28(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  const char *v4;
  void **v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  std::string *v13;
  std::string::size_type size;
  int v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  void **p_dst;
  unint64_t v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  std::string::size_type v24;
  const char *v25;
  const char *v26;
  void **__dst;
  const char *v28;
  int64_t v29;
  void *v30[2];
  unsigned __int8 v31;
  std::string v32;
  uint64_t v33;
  const void *v34;
  uint64_t v35;
  const void *v36;
  unint64_t v37;
  void *__p;
  char v39;
  unint64_t v40;
  int v41;
  uint64_t v42;
  std::string v43;
  const char *v44[4];
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a1 + 112))
  {
    v44[0] = (const char *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
    LODWORD(v43.__r_.__value_.__l.__data_) = *(_DWORD *)a1;
    std::error_condition::message(&v32, (const std::error_condition *)a1);
    sub_2109ECA30((uint64_t)a2, v44, (int *)&v43, &v32);
    if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    v9 = (void *)v32.__r_.__value_.__r.__words[0];
    goto LABEL_61;
  }
  v43.__r_.__value_.__r.__words[0] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
  LODWORD(__dst) = *(_DWORD *)a1;
  std::error_condition::message(&v32, (const std::error_condition *)a1);
  sub_2109ECA30((uint64_t)v30, (const char **)&v43.__r_.__value_.__l.__data_, (int *)&__dst, &v32);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  v4 = (const char *)v31;
  v5 = v30;
  if ((v31 & 0x80u) != 0)
  {
    v5 = (void **)v30[0];
    v4 = (const char *)v30[1];
  }
  v44[0] = (const char *)v5;
  v44[1] = v4;
  sub_2108B18D0((uint64_t)&v32);
  if (*(_BYTE *)(a1 + 40))
  {
    sub_2108CEF94(&v32.__r_.__value_.__r.__words[2], (uint64_t)"detail", 6);
    sub_2108CEF94(&v32.__r_.__value_.__r.__words[2], (uint64_t)": ", 2);
    v6 = *(char *)(a1 + 39);
    if (v6 >= 0)
      v7 = a1 + 16;
    else
      v7 = *(_QWORD *)(a1 + 16);
    if (v6 >= 0)
      v8 = *(unsigned __int8 *)(a1 + 39);
    else
      v8 = *(_QWORD *)(a1 + 24);
    sub_2108CEF94(&v32.__r_.__value_.__r.__words[2], v7, v8);
    if (!*(_BYTE *)(a1 + 104))
      goto LABEL_39;
    sub_2108CEF94(&v32.__r_.__value_.__r.__words[2], (uint64_t)", ", 2);
  }
  else if (!*(_BYTE *)(a1 + 104))
  {
    goto LABEL_39;
  }
  sub_2108CEF94(&v32.__r_.__value_.__r.__words[2], (uint64_t)"location", 8);
  sub_2108CEF94(&v32.__r_.__value_.__r.__words[2], (uint64_t)": ", 2);
  sub_2108CEF94(&v32.__r_.__value_.__r.__words[2], (uint64_t)"{", 1);
  v10 = *(char *)(a1 + 71);
  if (v10 >= 0)
    v11 = a1 + 48;
  else
    v11 = *(_QWORD *)(a1 + 48);
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(a1 + 71);
  else
    v12 = *(_QWORD *)(a1 + 56);
  sub_2108CEF94(&v32.__r_.__value_.__r.__words[2], v11, v12);
  sub_2108CEF94(&v32.__r_.__value_.__r.__words[2], (uint64_t)",", 1);
  std::to_string(&v43, *(_QWORD *)(a1 + 72));
  if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = &v43;
  else
    v13 = (std::string *)v43.__r_.__value_.__r.__words[0];
  if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v43.__r_.__value_.__r.__words[2]);
  else
    size = v43.__r_.__value_.__l.__size_;
  sub_2108CEF94(&v32.__r_.__value_.__r.__words[2], (uint64_t)v13, size);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  sub_2108CEF94(&v32.__r_.__value_.__r.__words[2], (uint64_t)",", 1);
  v15 = *(char *)(a1 + 103);
  if (v15 >= 0)
    v16 = a1 + 80;
  else
    v16 = *(_QWORD *)(a1 + 80);
  if (v15 >= 0)
    v17 = *(unsigned __int8 *)(a1 + 103);
  else
    v17 = *(_QWORD *)(a1 + 88);
  sub_2108CEF94(&v32.__r_.__value_.__r.__words[2], v16, v17);
  sub_2108CEF94(&v32.__r_.__value_.__r.__words[2], (uint64_t)"}", 1);
LABEL_39:
  if ((v41 & 0x10) != 0)
  {
    v20 = v40;
    if (v40 < v37)
    {
      v40 = v37;
      v20 = v37;
    }
    v21 = v36;
    v18 = v20 - (_QWORD)v36;
    if (v20 - (unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_64;
  }
  else
  {
    if ((v41 & 8) == 0)
    {
      v18 = 0;
      HIBYTE(v29) = 0;
      p_dst = (void **)&__dst;
      goto LABEL_52;
    }
    v21 = v34;
    v18 = v35 - (_QWORD)v34;
    if ((unint64_t)(v35 - (_QWORD)v34) >= 0x7FFFFFFFFFFFFFF8)
LABEL_64:
      sub_2108A4B7C();
  }
  if (v18 >= 0x17)
  {
    v22 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v22 = v18 | 7;
    v23 = v22 + 1;
    p_dst = (void **)operator new(v22 + 1);
    v28 = (const char *)v18;
    v29 = v23 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v29) = v18;
    p_dst = (void **)&__dst;
    if (!v18)
      goto LABEL_52;
  }
  memmove(p_dst, v21, v18);
LABEL_52:
  *((_BYTE *)p_dst + v18) = 0;
  v32.__r_.__value_.__r.__words[0] = *MEMORY[0x24BEDB7F0];
  v24 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(std::string::size_type *)((char *)v32.__r_.__value_.__r.__words + *(_QWORD *)(v32.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v32.__r_.__value_.__r.__words[2] = v24;
  v33 = MEMORY[0x24BEDB848] + 16;
  if (v39 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BCC66C](&v42);
  v25 = (const char *)HIBYTE(v29);
  v26 = (const char *)&__dst;
  if (v29 < 0)
  {
    v26 = (const char *)__dst;
    v25 = v28;
  }
  v44[2] = v26;
  v44[3] = v25;
  sub_2108BBA08((uint64_t)v44, (uint64_t)&v45, "; ", 2uLL, a2);
  if (SHIBYTE(v29) < 0)
  {
    operator delete(__dst);
    if (((char)v31 & 0x80000000) == 0)
      return;
  }
  else if (((char)v31 & 0x80000000) == 0)
  {
    return;
  }
  v9 = v30[0];
LABEL_61:
  operator delete(v9);
}

void sub_2109EC378(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_2109EC3FC(std::runtime_error *this)
{
  if (!LOBYTE(this[8].__vftable))
    goto LABEL_7;
  if (!LOBYTE(this[7].__imp_.__imp_))
    goto LABEL_5;
  if (SHIBYTE(this[7].__vftable) < 0)
  {
    operator delete(this[6].__vftable);
    if (SHIBYTE(this[5].__vftable) < 0)
      goto LABEL_10;
LABEL_5:
    if (!LOBYTE(this[3].__imp_.__imp_))
      goto LABEL_7;
    goto LABEL_6;
  }
  if ((SHIBYTE(this[5].__vftable) & 0x80000000) == 0)
    goto LABEL_5;
LABEL_10:
  operator delete(this[4].__vftable);
  if (!LOBYTE(this[3].__imp_.__imp_))
    goto LABEL_7;
LABEL_6:
  if (SHIBYTE(this[3].__vftable) < 0)
  {
    operator delete(this[2].__vftable);
    std::runtime_error::~runtime_error(this);
    return;
  }
LABEL_7:
  std::runtime_error::~runtime_error(this);
}

void sub_2109EC488(std::runtime_error *this)
{
  if (!LOBYTE(this[8].__vftable))
    goto LABEL_10;
  if (!LOBYTE(this[7].__imp_.__imp_))
    goto LABEL_5;
  if (SHIBYTE(this[7].__vftable) < 0)
  {
    operator delete(this[6].__vftable);
    if ((SHIBYTE(this[5].__vftable) & 0x80000000) == 0)
    {
LABEL_5:
      if (!LOBYTE(this[3].__imp_.__imp_))
        goto LABEL_10;
      goto LABEL_6;
    }
  }
  else if ((SHIBYTE(this[5].__vftable) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(this[4].__vftable);
  if (!LOBYTE(this[3].__imp_.__imp_))
    goto LABEL_10;
LABEL_6:
  if (SHIBYTE(this[3].__vftable) < 0)
    operator delete(this[2].__vftable);
LABEL_10:
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x212BCC6FCLL);
}

void sub_2109EC518(uint64_t a1)
{
  unsigned __int8 v2;
  int v3;
  std::logic_error *v4;
  std::runtime_error *v5;
  void *v6;
  std::logic_error *v7;
  std::logic_error *exception;

  v2 = atomic_load((unsigned __int8 *)&qword_254A75EF8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A75EF8))
  {
    qword_254A75EF0 = (uint64_t)std::generic_category();
    __cxa_guard_release(&qword_254A75EF8);
  }
  if (*(_QWORD *)(a1 + 8) == qword_254A75EF0)
  {
    v3 = *(_DWORD *)a1;
    if (*(int *)a1 > 33)
    {
      if (v3 == 34)
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_2109EC888(exception, a1);
        __cxa_throw(exception, (struct type_info *)off_24CA79208, MEMORY[0x24BEDAB00]);
      }
      if (v3 == 84)
      {
        v5 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        sub_2109EC95C(v5, a1);
        __cxa_throw(v5, (struct type_info *)off_24CA79218, MEMORY[0x24BEDAB78]);
      }
    }
    else
    {
      if (v3 == 22)
      {
        v7 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_2109EC6E0(v7, a1);
        __cxa_throw(v7, (struct type_info *)off_24CA79220, MEMORY[0x24BEDAB88]);
      }
      if (v3 == 33)
      {
        v4 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_2109EC7B4(v4, a1);
        __cxa_throw(v4, (struct type_info *)off_24CA791F8, MEMORY[0x24BEDAAE0]);
      }
    }
  }
  v6 = __cxa_allocate_exception(0x88uLL);
  sub_2109EC3F8(v6, a1);
  __cxa_throw(v6, (struct type_info *)&unk_24CA85220, (void (*)(void *))sub_2109EC3FC);
}

void sub_2109EC67C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2109EC690(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2109EC6A4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2109EC6B8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2109EC6CC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2109EC6E0(std::logic_error *this, uint64_t a2)
{
  __int128 *v3;
  std::string v4;

  if (*(_BYTE *)(a2 + 112))
    v3 = (__int128 *)(a2 + 16);
  else
    v3 = (__int128 *)&unk_210A1CD48;
  if (*((_BYTE *)v3 + 24))
  {
    sub_2109ECC78(v3);
    std::logic_error::logic_error(this, &v4);
    this->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v4.__r_.__value_.__l.__data_);
  }
  else
  {
    std::logic_error::logic_error(this, (const char *)&unk_210A0AB0B);
    this->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  }
}

void sub_2109EC798(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2109EC7B4(std::logic_error *this, uint64_t a2)
{
  __int128 *v3;
  std::string v4;

  if (*(_BYTE *)(a2 + 112))
    v3 = (__int128 *)(a2 + 16);
  else
    v3 = (__int128 *)&unk_210A1CD48;
  if (*((_BYTE *)v3 + 24))
  {
    sub_2109ECC78(v3);
    std::logic_error::logic_error(this, &v4);
    this->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B0] + 16);
    if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v4.__r_.__value_.__l.__data_);
  }
  else
  {
    std::logic_error::logic_error(this, (const char *)&unk_210A0AB0B);
    this->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B0] + 16);
  }
}

void sub_2109EC86C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2109EC888(std::logic_error *this, uint64_t a2)
{
  __int128 *v3;
  std::string v4;

  if (*(_BYTE *)(a2 + 112))
    v3 = (__int128 *)(a2 + 16);
  else
    v3 = (__int128 *)&unk_210A1CD48;
  if (*((_BYTE *)v3 + 24))
  {
    sub_2109ECC78(v3);
    std::logic_error::logic_error(this, &v4);
    this->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v4.__r_.__value_.__l.__data_);
  }
  else
  {
    std::logic_error::logic_error(this, (const char *)&unk_210A0AB0B);
    this->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
  }
}

void sub_2109EC940(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2109EC95C(std::runtime_error *this, uint64_t a2)
{
  __int128 *v3;
  std::string v4;

  if (*(_BYTE *)(a2 + 112))
    v3 = (__int128 *)(a2 + 16);
  else
    v3 = (__int128 *)&unk_210A1CD48;
  if (*((_BYTE *)v3 + 24))
  {
    sub_2109ECC78(v3);
    std::runtime_error::runtime_error(this, &v4);
    this->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x24BEDB8C8] + 16);
    if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v4.__r_.__value_.__l.__data_);
  }
  else
  {
    std::runtime_error::runtime_error(this, (const char *)&unk_210A0AB0B);
    this->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x24BEDB8C8] + 16);
  }
}

void sub_2109ECA14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2109ECA30(uint64_t a1, const char **a2, int *a3, std::string *a4)
{
  uint64_t result;
  _DWORD v7[6];
  int v8;
  std::string v9;
  std::string **v10;
  std::string *v11;
  std::string *v12;
  _DWORD *v13;
  std::string *v14;
  std::string *v15;

  v8 = 0;
  if (*a2)
    sub_2108C6A80(v7, a2);
  else
    sub_2108B9350(v7, "nullptr");
  v11 = (std::string *)v7;
  v12 = (std::string *)" error ";
  v13 = v7;
  v14 = (std::string *)" error ";
  v15 = (std::string *)" error ";
  if (v8 == -1)
    sub_2108B9060();
  v9.__r_.__value_.__r.__words[0] = (std::string::size_type)&v11;
  ((void (*)(std::string *, _DWORD *))off_24CA85250[v8])(&v9, v7);
  std::to_string(&v9, *a3);
  v11 = (std::string *)v7;
  v12 = &v9;
  v13 = v7;
  v14 = &v9;
  v15 = &v9;
  if (v8 == -1)
    sub_2108B9060();
  v10 = &v11;
  ((void (*)(std::string ***, _DWORD *))off_24CA85268[v8])(&v10, v7);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  v11 = (std::string *)v7;
  v12 = (std::string *)": ";
  v13 = v7;
  v14 = (std::string *)": ";
  v15 = (std::string *)": ";
  if (v8 == -1)
    sub_2108B9060();
  v9.__r_.__value_.__r.__words[0] = (std::string::size_type)&v11;
  ((void (*)(std::string *, _DWORD *))off_24CA85280[v8])(&v9, v7);
  v11 = (std::string *)v7;
  v12 = a4;
  v13 = v7;
  v14 = a4;
  v15 = a4;
  if (v8 == -1)
    sub_2108B9060();
  v9.__r_.__value_.__r.__words[0] = (std::string::size_type)&v11;
  ((void (*)(std::string *, _DWORD *))off_24CA85298[v8])(&v9, v7);
  if (v8 == -1)
    sub_2108B9060();
  v11 = &v9;
  result = ((uint64_t (*)(std::string **, _DWORD *))off_24CA852B0[v8])(&v11, v7);
  if (v8 != -1)
    return ((uint64_t (*)(std::string **, _DWORD *))off_24CA85238[v8])(&v11, v7);
  return result;
}

void sub_2109ECC2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  sub_2108B9008((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_2109ECC78(__int128 *a1)
{
  int v1;
  uint64_t result;
  __int128 v3;
  uint64_t v4;
  int v5;
  char v6;
  char *v7;

  v5 = 0;
  if (*((_BYTE *)a1 + 24))
  {
    v5 = -1;
    if (*((char *)a1 + 23) < 0)
    {
      sub_2108B314C(&v3, *(void **)a1, *((_QWORD *)a1 + 1));
    }
    else
    {
      v3 = *a1;
      v4 = *((_QWORD *)a1 + 2);
    }
    v1 = 1;
    v5 = 1;
  }
  else
  {
    sub_2108B9350(&v3, "nullopt");
    v1 = v5;
    if (v5 == -1)
      sub_2108B9060();
  }
  v7 = &v6;
  result = ((uint64_t (*)(char **, __int128 *))off_24CA852B0[v1])(&v7, &v3);
  if (v5 != -1)
    return ((uint64_t (*)(char **, __int128 *))off_24CA85238[v5])(&v7, &v3);
  return result;
}

void sub_2109ECD4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2108B9008((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2109ECD64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2108B9008((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2109ECD7C(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x212BCC6FCLL);
}

__n128 sub_2109ECDA0@<Q0>(std::string *__s@<X0>, char *a2@<X1>, int64_t a3@<X2>, const std::string::value_type *a4@<X3>, std::string::size_type a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X8>)
{
  int64_t size;
  BOOL v15;
  uint64_t v16;
  std::string *v17;
  BOOL v18;
  uint64_t v19;
  char *v20;
  int v21;
  std::string *v22;
  int64_t v23;
  char *v24;
  char *v25;
  __n128 result;
  std::string::size_type v27;
  std::string::size_type v28;
  std::string *v29;
  std::string::size_type v30;
  char *v31;
  char *v32;
  int64_t v33;
  int v34;
  int64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;

  if (SHIBYTE(__s->__r_.__value_.__r.__words[2]) < 0)
  {
    size = __s->__r_.__value_.__l.__size_;
    if (size)
      v18 = a3 == 0;
    else
      v18 = 1;
    if (v18)
      goto LABEL_24;
    v19 = a7 ? a6 : -1;
    v38 = v19;
    v17 = (std::string *)__s->__r_.__value_.__r.__words[0];
    if (size < a3)
      goto LABEL_24;
  }
  else
  {
    size = HIBYTE(__s->__r_.__value_.__r.__words[2]);
    if (*((_BYTE *)&__s->__r_.__value_.__s + 23))
      v15 = a3 == 0;
    else
      v15 = 1;
    if (v15)
      goto LABEL_24;
    v16 = a7 ? a6 : -1;
    v38 = v16;
    v17 = __s;
    if (size < a3)
      goto LABEL_24;
  }
  v20 = (char *)v17 + size;
  v21 = *a2;
  v22 = v17;
  do
  {
    v23 = size - a3;
    if (v23 == -1)
      break;
    v24 = (char *)memchr(v22, v21, v23 + 1);
    if (!v24)
      break;
    v25 = v24;
    if (!memcmp(v24, a2, a3))
    {
      if (v38)
      {
        if (v25 != v20)
        {
          v27 = v25 - (char *)v17;
          if (v25 - (char *)v17 != -1)
          {
LABEL_28:
            std::string::replace(__s, v27, a3, a4, a5);
            if (SHIBYTE(__s->__r_.__value_.__r.__words[2]) < 0)
            {
              v29 = (std::string *)__s->__r_.__value_.__r.__words[0];
              v28 = __s->__r_.__value_.__l.__size_;
            }
            else
            {
              v28 = HIBYTE(__s->__r_.__value_.__r.__words[2]);
              v29 = __s;
            }
            v30 = v27 + a5;
            if (v28 >= v27 + a5)
            {
              v31 = (char *)v29 + v30;
              v32 = (char *)v29 + v28;
              v33 = v28 - v30;
              if (v33 >= a3)
              {
                --v38;
                v34 = *a2;
                while (1)
                {
                  v35 = v33 - a3;
                  if (v35 == -1)
                    break;
                  v36 = (char *)memchr(v31, v34, v35 + 1);
                  if (!v36)
                    break;
                  v37 = v36;
                  if (!memcmp(v36, a2, a3))
                  {
                    if (v38)
                    {
                      if (v37 != v32)
                      {
                        v27 = v37 - (char *)v29;
                        if (v37 - (char *)v29 != -1)
                          goto LABEL_28;
                      }
                    }
                    goto LABEL_24;
                  }
                  v31 = v37 + 1;
                  v33 = v32 - (v37 + 1);
                  if (v33 < a3)
                    goto LABEL_24;
                }
              }
            }
          }
        }
      }
      break;
    }
    v22 = (std::string *)(v25 + 1);
    size = v20 - (v25 + 1);
  }
  while (size >= a3);
LABEL_24:
  result = *(__n128 *)&__s->__r_.__value_.__l.__data_;
  *(_OWORD *)a8 = *(_OWORD *)&__s->__r_.__value_.__l.__data_;
  *(_QWORD *)(a8 + 16) = *((_QWORD *)&__s->__r_.__value_.__l + 2);
  __s->__r_.__value_.__l.__size_ = 0;
  __s->__r_.__value_.__r.__words[2] = 0;
  __s->__r_.__value_.__r.__words[0] = 0;
  return result;
}

uint64_t *sub_2109ECF90(uint64_t *a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_OWORD *)(v2 + 192) = 0u;
  *(_OWORD *)(v2 + 208) = 0u;
  *(_OWORD *)(v2 + 224) = 0u;
  *(_OWORD *)(v2 + 240) = 0u;
  *(_OWORD *)(v2 + 256) = 0u;
  *(_QWORD *)(v2 + 272) = 0;
  sub_2108B18D0(v2);
  *a1 = v2;
  return a1;
}

void sub_2109ED000(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BCC6FC](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

uint64_t *sub_2109ED024(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = MEMORY[0x24BEDB7F0];
    v4 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v2 = *MEMORY[0x24BEDB7F0];
    v5 = *(_QWORD *)(v3 + 72);
    *(_QWORD *)(v2 + *(_QWORD *)(v4 - 24)) = *(_QWORD *)(v3 + 64);
    *(_QWORD *)(v2 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v2 + 16) = v5;
    if (*(char *)(v2 + 111) < 0)
      operator delete(*(void **)(v2 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BCC66C](v2 + 128);
    MEMORY[0x212BCC6FC](v2, 0x10B2C40EED050F3);
  }
  return a1;
}

uint64_t sub_2109ED0D0(_QWORD *a1)
{
  return *a1 + 16;
}

void *sub_2109ED0DC@<X0>(void *result@<X0>, _BYTE *a2@<X8>)
{
  _QWORD *v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  const void *v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;

  v3 = *(_QWORD **)result;
  v4 = *(_DWORD *)(*(_QWORD *)result + 120);
  if ((v4 & 0x10) != 0)
  {
    v5 = v3[14];
    v6 = v3[9];
    if (v5 < v6)
    {
      v3[14] = v6;
      v5 = v6;
    }
    v7 = (const void *)v3[8];
    v8 = v5 - (_QWORD)v7;
    if (v5 - (unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_16;
  }
  else
  {
    if ((v4 & 8) == 0)
    {
      a2[23] = 0;
LABEL_4:
      *a2 = 0;
      return result;
    }
    v7 = (const void *)v3[5];
    v8 = v3[7] - (_QWORD)v7;
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
LABEL_16:
      sub_2108A4B7C();
  }
  if (v8 >= 0x17)
  {
    v9 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v9 = v8 | 7;
    v10 = v9 + 1;
    v11 = operator new(v9 + 1);
    *((_QWORD *)a2 + 1) = v8;
    *((_QWORD *)a2 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)a2 = v11;
    a2 = v11;
  }
  else
  {
    a2[23] = v8;
    if (!v8)
      goto LABEL_4;
  }
  result = memmove(a2, v7, v8);
  a2[v8] = 0;
  return result;
}

size_t sub_2109ED1D8@<X0>(char *a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  char *v5;
  size_t result;
  size_t v7;
  char *v8;
  char *v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  size_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;

  v4 = strstr(a1, "T = ");
  if (v4)
  {
    v5 = v4;
    result = strlen(v4);
    v7 = result - 5;
    if (result - 5 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (v7 >= 0x17)
      {
        v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v7 | 7) != 0x17)
          v11 = v7 | 7;
        v12 = v11 + 1;
        v13 = operator new(v11 + 1);
        a2[1] = v7;
        a2[2] = v12 | 0x8000000000000000;
        *a2 = v13;
        a2 = v13;
      }
      else
      {
        *((_BYTE *)a2 + 23) = v7;
        if (result == 5)
          goto LABEL_15;
      }
      result = (size_t)memmove(a2, v5 + 4, v7);
LABEL_15:
      *((_BYTE *)a2 + v7) = 0;
      return result;
    }
LABEL_40:
    sub_2108A4B7C();
  }
  v8 = strstr(a1, "= ");
  if (v8)
  {
    v9 = v8;
    result = strlen(v8);
    v10 = result - 3;
    if (result - 3 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_40;
    if (v10 >= 0x17)
    {
      v17 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17)
        v17 = v10 | 7;
      v18 = v17 + 1;
      v19 = operator new(v17 + 1);
      a2[1] = v10;
      a2[2] = v18 | 0x8000000000000000;
      *a2 = v19;
      a2 = v19;
    }
    else
    {
      *((_BYTE *)a2 + 23) = v10;
      if (result == 3)
        goto LABEL_25;
    }
    result = (size_t)memmove(a2, v9 + 2, v10);
LABEL_25:
    *((_BYTE *)a2 + v10) = 0;
    return result;
  }
  v14 = strchr(a1, 61);
  if (v14)
  {
    v15 = v14;
    result = strlen(v14);
    v16 = result - 2;
    if (result - 2 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_40;
    if (v16 >= 0x17)
    {
      v21 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v16 | 7) != 0x17)
        v21 = v16 | 7;
      v22 = v21 + 1;
      v23 = operator new(v21 + 1);
      a2[1] = v16;
      a2[2] = v22 | 0x8000000000000000;
      *a2 = v23;
      a2 = v23;
    }
    else
    {
      *((_BYTE *)a2 + 23) = v16;
      if (result == 2)
        goto LABEL_34;
    }
    result = (size_t)memmove(a2, v15 + 1, v16);
LABEL_34:
    *((_BYTE *)a2 + v16) = 0;
    return result;
  }
  result = strlen(a1);
  if (result > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_40;
  v20 = result;
  if (result >= 0x17)
  {
    v24 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v24 = result | 7;
    v25 = v24 + 1;
    v26 = operator new(v24 + 1);
    a2[1] = v20;
    a2[2] = v25 | 0x8000000000000000;
    *a2 = v26;
    a2 = v26;
  }
  else
  {
    *((_BYTE *)a2 + 23) = result;
    if (!result)
      goto LABEL_39;
  }
  result = (size_t)memcpy(a2, a1, v20);
LABEL_39:
  *((_BYTE *)a2 + v20) = 0;
  return result;
}

void sub_2109ED44C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_2108B314C(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_2109ECDA0(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2109ED4E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2109ED500(char *a1@<X0>, uint64_t *a2@<X1>, std::string *a3@<X8>, int64x2_t a4@<Q3>, int8x16_t a5@<Q5>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::string::size_type size;
  std::string *p_p;
  std::string __p;
  _QWORD v14[8];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v7 = *a2;
  v8 = a2[1];
  if (v7 == v8)
  {
    if (a1[23] < 0)
    {
      sub_2108B314C(a3, *(void **)a1, *((_QWORD *)a1 + 1));
    }
    else
    {
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a3->__r_.__value_.__r.__words[2] = *((_QWORD *)a1 + 2);
    }
  }
  else
  {
    v9 = a1[23];
    v10 = *((_QWORD *)a1 + 1);
    if ((v9 & 0x80u) != 0)
    {
      a1 = *(char **)a1;
      v9 = v10;
    }
    v14[0] = a1;
    v14[1] = v9;
    v14[2] = "<";
    v14[3] = 1;
    sub_2108BA7B4(v7, v8, ",", 1uLL, &__p, a4, a5);
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __p.__r_.__value_.__l.__size_;
    v14[4] = p_p;
    v14[5] = size;
    v14[6] = ">";
    v14[7] = 1;
    sub_2108BBA08((uint64_t)v14, (uint64_t)&v15, 0, 0, a3);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_2109ED650(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_2109ED678(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  int v3;
  _BYTE *v4;
  uint64_t v5;
  char v6;
  int v7;
  int v8;
  int v9;
  char v10;
  uint64_t v11;
  BOOL v12;
  unsigned int v13;
  std::string *v14;
  std::string::size_type size;
  std::string *v16;
  int v17;
  std::string *v18;
  std::string::size_type v19;
  std::string *v20;
  std::string *v21;
  std::string v22;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  memset(&v22, 0, sizeof(v22));
  v3 = *(char *)(a1 + 23);
  if (v3 >= 0)
    v4 = (_BYTE *)a1;
  else
    v4 = *(_BYTE **)a1;
  if (v3 >= 0)
    v5 = *(unsigned __int8 *)(a1 + 23);
  else
    v5 = *(_QWORD *)(a1 + 8);
  if (v5)
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 1;
    v11 = MEMORY[0x24BDAC740];
    while (1)
    {
      v13 = (char)*v4;
      if ((v13 & 0x80000000) == 0 && (*(_DWORD *)(v11 + 4 * v13 + 60) & 0x400) != 0)
        break;
      if (v13 == 76)
      {
        if (!v6)
          goto LABEL_49;
        std::string::push_back(&v22, 76);
        if (v8)
        {
          if (v7)
          {
            if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v14 = &v22;
            else
              v14 = (std::string *)v22.__r_.__value_.__r.__words[0];
            if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(v22.__r_.__value_.__r.__words[2]);
            else
              size = v22.__r_.__value_.__l.__size_;
            goto LABEL_34;
          }
          v8 = 1;
          v7 = 1;
          v6 = 1;
        }
        else
        {
          v8 = 1;
          v6 = 1;
        }
      }
      else
      {
        if (*v4 != 85)
        {
          if ((v13 & 0x80000000) != 0)
            v17 = __maskrune((char)*v4, 0x500uLL);
          else
            v17 = *(_DWORD *)(v11 + 4 * v13 + 60) & 0x500;
          if (v17)
          {
            if (v6)
            {
              if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v18 = &v22;
              else
                v18 = (std::string *)v22.__r_.__value_.__r.__words[0];
              if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v19 = HIBYTE(v22.__r_.__value_.__r.__words[2]);
              else
                v19 = v22.__r_.__value_.__l.__size_;
              std::string::append(a2, (const std::string::value_type *)v18, v19);
              if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
              {
                v22.__r_.__value_.__l.__size_ = 0;
                v20 = (std::string *)v22.__r_.__value_.__r.__words[0];
              }
              else
              {
                *((_BYTE *)&v22.__r_.__value_.__s + 23) = 0;
                v20 = &v22;
              }
              v9 = 0;
              v8 = 0;
              v7 = 0;
              v6 = 0;
              v10 = 0;
              v20->__r_.__value_.__s.__data_[0] = 0;
            }
            else
            {
LABEL_49:
              v6 = 0;
              v10 = 0;
            }
          }
          else
          {
            if (v6)
            {
              if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
              {
                v22.__r_.__value_.__l.__size_ = 0;
                v21 = (std::string *)v22.__r_.__value_.__r.__words[0];
              }
              else
              {
                *((_BYTE *)&v22.__r_.__value_.__s + 23) = 0;
                v21 = &v22;
              }
              v9 = 0;
              v8 = 0;
              v7 = 0;
              v6 = 0;
              v21->__r_.__value_.__s.__data_[0] = 0;
            }
            else
            {
              v6 = 0;
            }
            v10 = 1;
          }
LABEL_11:
          std::string::push_back(a2, v13);
          goto LABEL_12;
        }
        if (!v6)
          goto LABEL_49;
        std::string::push_back(&v22, 85);
        if (v9)
        {
          if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v14 = &v22;
          else
            v14 = (std::string *)v22.__r_.__value_.__r.__words[0];
          if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v22.__r_.__value_.__r.__words[2]);
          else
            size = v22.__r_.__value_.__l.__size_;
LABEL_34:
          std::string::append(a2, (const std::string::value_type *)v14, size);
          if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
          {
            v22.__r_.__value_.__l.__size_ = 0;
            v16 = (std::string *)v22.__r_.__value_.__r.__words[0];
          }
          else
          {
            *((_BYTE *)&v22.__r_.__value_.__s + 23) = 0;
            v16 = &v22;
          }
          v9 = 0;
          v8 = 0;
          v7 = 0;
          v6 = 0;
          v16->__r_.__value_.__s.__data_[0] = 0;
          goto LABEL_12;
        }
        v9 = 1;
        v6 = 1;
      }
LABEL_12:
      ++v4;
      if (!--v5)
      {
        if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v22.__r_.__value_.__l.__data_);
        return;
      }
    }
    v12 = (v10 & 1) == 0;
    v10 = 0;
    if (!v12)
      v6 = 1;
    goto LABEL_11;
  }
}

void sub_2109ED91C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v15 + 23) & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v15 + 23) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

BOOL sub_2109ED958(const char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(void **))
{
  unsigned __int8 v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  unsigned __int8 v17;
  int v18;

  sub_2109EDAB0(a1, a2, a3, a4, a5, a6, a7);
  v11 = atomic_load((unsigned __int8 *)&qword_254A75F38);
  if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A75F38))
  {
    __cxa_atexit((void (*)(void *))sub_2109EDF34, &qword_254A75F00, &dword_21089F000);
    __cxa_guard_release(&qword_254A75F38);
  }
  if (byte_254A75F28)
    v12 = byte_254A75F30 == 0;
  else
    v12 = 0;
  if (!v12)
  {
    v13 = qword_254A75F00;
    v14 = unk_254A75F08;
    while (v13 != v14)
    {
      v16 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v13;
      v15 = *(_QWORD *)(v13 + 8);
      v13 += 16;
      v16(v15, a3, a4, a5, a6);
    }
  }
  v17 = atomic_load((unsigned __int8 *)&qword_254A75F38);
  if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_254A75F38))
  {
    __cxa_atexit((void (*)(void *))sub_2109EDF34, &qword_254A75F00, &dword_21089F000);
    __cxa_guard_release(&qword_254A75F38);
  }
  v18 = byte_254A75F28;
  if (byte_254A75F28)
    qword_254A75F18(unk_254A75F20, a3, a4, a5, a6);
  return v18 == 0;
}

void sub_2109EDAB0(const char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(void **))
{
  unsigned __int8 v13;
  const char *v14;
  uint64_t v15;
  size_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  size_t v20;
  void *v21;
  unint64_t v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;
  void *v28[2];
  int64_t v29;
  _QWORD v30[2];
  _QWORD v31[3];
  const void *v32;
  uint64_t v33;
  const void *v34;
  unint64_t v35;
  void *__p;
  char v37;
  unint64_t v38;
  int v39;
  uint64_t v40;

  v13 = atomic_load((unsigned __int8 *)&qword_254A75F38);
  if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_254A75F38))
  {
    __cxa_atexit((void (*)(void *))sub_2109EDF34, &qword_254A75F00, &dword_21089F000);
    __cxa_guard_release(&qword_254A75F38);
  }
  if (!byte_254A75F28)
  {
    sub_2108B18D0((uint64_t)v30);
    if (a4)
      v14 = "Assert: ";
    else
      v14 = "Abort: ";
    if (a4)
      v15 = 8;
    else
      v15 = 7;
    sub_2108CEF94(v31, (uint64_t)v14, v15);
    v16 = strlen(a1);
    v17 = sub_2108CEF94(v31, (uint64_t)a1, v16);
    sub_2108CEF94(v17, (uint64_t)":", 1);
    std::ostream::operator<<();
    if (a4)
    {
      v18 = sub_2108CEF94(v31, (uint64_t)" : ", 3);
      sub_2108CEF94(v18, a3, a4);
    }
    if (a6)
    {
      v19 = sub_2108CEF94(v31, (uint64_t)" : ", 3);
      sub_2108CEF94(v19, a5, a6);
    }
    sub_2108CEF94(v31, (uint64_t)"\n", 1);
    if ((v39 & 0x10) != 0)
    {
      v22 = v38;
      if (v38 < v35)
      {
        v38 = v35;
        v22 = v35;
      }
      v23 = v34;
      v20 = v22 - (_QWORD)v34;
      if (v22 - (unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
        goto LABEL_35;
    }
    else
    {
      if ((v39 & 8) == 0)
      {
        v20 = 0;
        HIBYTE(v29) = 0;
        v21 = v28;
        goto LABEL_26;
      }
      v23 = v32;
      v20 = v33 - (_QWORD)v32;
      if ((unint64_t)(v33 - (_QWORD)v32) >= 0x7FFFFFFFFFFFFFF8)
LABEL_35:
        sub_2108A4B7C();
    }
    if (v20 >= 0x17)
    {
      v24 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v20 | 7) != 0x17)
        v24 = v20 | 7;
      v25 = v24 + 1;
      v21 = operator new(v24 + 1);
      v28[1] = (void *)v20;
      v29 = v25 | 0x8000000000000000;
      v28[0] = v21;
    }
    else
    {
      HIBYTE(v29) = v20;
      v21 = v28;
      if (!v20)
        goto LABEL_26;
    }
    memmove(v21, v23, v20);
LABEL_26:
    *((_BYTE *)v21 + v20) = 0;
    v30[0] = *MEMORY[0x24BEDB7F0];
    v26 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    *(_QWORD *)((char *)v30 + *(_QWORD *)(v30[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
    v31[0] = v26;
    v31[1] = MEMORY[0x24BEDB848] + 16;
    if (v37 < 0)
      operator delete(__p);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BCC66C](&v40);
    if (v29 >= 0)
      v27 = v28;
    else
      v27 = (void **)v28[0];
    a7(v27);
    if (SHIBYTE(v29) < 0)
      operator delete(v28[0]);
  }
}

void sub_2109EDD84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2109EDDB4(char *__s)
{
  unsigned __int8 v2;
  size_t v3;
  uint64_t *v4;
  unsigned __int8 v5;
  NSObject *v6;
  int v8;
  char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_254A75F40);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A75F40))
  {
    __cxa_atexit((void (*)(void *))sub_2109EDF64, &off_253ED6E58, &dword_21089F000);
    __cxa_guard_release(&qword_254A75F40);
  }
  v3 = strlen(__s);
  sub_2109EE00C((void **)&qword_253ED6E60, __s, v3);
  if (byte_253ED6E77 >= 0)
    v4 = &qword_253ED6E60;
  else
    v4 = (uint64_t *)qword_253ED6E60;
  qword_254A74568 = (uint64_t)v4;
  v5 = atomic_load((unsigned __int8 *)&qword_254A75E78);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_254A75E78))
  {
    qword_254A75E70 = (uint64_t)os_log_create("cv3d", (const char *)&unk_210A01421);
    __cxa_guard_release(&qword_254A75E78);
  }
  v6 = qword_254A75E70;
  if (os_log_type_enabled((os_log_t)qword_254A75E70, OS_LOG_TYPE_FAULT))
  {
    v8 = 136315138;
    v9 = __s;
    _os_log_impl(&dword_21089F000, v6, OS_LOG_TYPE_FAULT, "%s", (uint8_t *)&v8, 0xCu);
  }
  return fputs(__s, (FILE *)*MEMORY[0x24BDAC8D8]);
}

uint64_t sub_2109EDF34(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_2109EDF64(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  *(_QWORD *)result = off_24CA85318;
  qword_254A74568 = 0;
  if (*(char *)(result + 31) < 0)
  {
    operator delete(*(void **)(result + 8));
    return v1;
  }
  return result;
}

void sub_2109EDFB8(uint64_t a1)
{
  *(_QWORD *)a1 = off_24CA85318;
  qword_254A74568 = 0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x212BCC6FCLL);
}

void **sub_2109EE00C(void **__dst, void *__src, size_t __len)
{
  unint64_t v6;
  void *v7;
  unint64_t v8;
  void *v9;
  unint64_t v10;
  size_t v11;
  unint64_t v12;
  uint64_t v13;

  LODWORD(v6) = *((char *)__dst + 23);
  if ((v6 & 0x80000000) != 0)
  {
    v10 = (unint64_t)__dst[2];
    v8 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (__len > v8)
    {
      v11 = 0x7FFFFFFFFFFFFFF7;
      if (0x7FFFFFFFFFFFFFF7 - (v10 & 0x7FFFFFFFFFFFFFFFLL) >= __len - v8)
      {
        v9 = *__dst;
        if (v8 > 0x3FFFFFFFFFFFFFF2)
        {
LABEL_15:
          v7 = operator new(v11);
          memcpy(v7, __src, __len);
          if (v8 != 22)
            operator delete(v9);
          __dst[2] = (void *)(v11 | 0x8000000000000000);
          *__dst = v7;
LABEL_23:
          __dst[1] = (void *)__len;
          goto LABEL_24;
        }
LABEL_8:
        v12 = 2 * v8;
        if (__len > 2 * v8)
          v12 = __len;
        v13 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17)
          v13 = v12 | 7;
        if (v12 >= 0x17)
          v11 = v13 + 1;
        else
          v11 = 23;
        goto LABEL_15;
      }
LABEL_25:
      sub_2108A4B7C();
    }
    v6 = HIBYTE(v10);
    v7 = *__dst;
  }
  else
  {
    v7 = __dst;
    if (__len > 0x16)
    {
      if (__len - 0x7FFFFFFFFFFFFFF7 >= 0x800000000000001FLL)
      {
        v8 = 22;
        v9 = __dst;
        goto LABEL_8;
      }
      goto LABEL_25;
    }
  }
  if (__len)
  {
    memmove(v7, __src, __len);
    LOBYTE(v6) = *((_BYTE *)__dst + 23);
  }
  if ((v6 & 0x80) != 0)
    goto LABEL_23;
  *((_BYTE *)__dst + 23) = __len & 0x7F;
LABEL_24:
  *((_BYTE *)v7 + __len) = 0;
  return __dst;
}

void sub_2109EE168()
{
  sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 101, (uint64_t)&unk_210A01421, 0, (uint64_t)"Datatype not supported", 22, (void (*)(void **))sub_2109EDDB4);
  abort();
}

void sub_2109EE1A4(uint64_t a1, std::__shared_weak_count **a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  nullsub_51(a1);
  v5 = *a2;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  nullsub_51(a3);
  sub_2108C7654();
}

void sub_2109EE204(void **a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  uint64_t v4;
  void **v5;
  void *v6;

  v3 = (void **)*a1;
  if (*a1)
  {
    sub_2108C7648();
    v5 = *(void ***)(v4 + 96);
    v6 = v3;
    if (v5 != v3)
    {
      do
      {
        if (*((char *)v5 - 1) < 0)
          operator delete(*(v5 - 3));
        v5 -= 3;
      }
      while (v5 != v3);
      v6 = *v2;
    }
    *(_QWORD *)(v1 + 96) = v3;
    sub_2108C7630(v6);
  }
}

void sub_2109EE26C()
{
  uint64_t v0;
  _QWORD *v1;
  void **v2;
  void **v3;
  void *v4;
  void *v5;
  void *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  sub_2108C7648();
  v4 = *v3;
  v6 = v5;
  if (v4 != v5)
  {
    v7 = v2;
    v8 = (uint64_t)v4 - 80;
    while (1)
    {
      if (!*(_BYTE *)(v8 + 72))
        goto LABEL_9;
      v9 = *(_QWORD **)(v8 + 64);
      if ((_QWORD *)(v8 + 40) == v9)
      {
        v9 = (_QWORD *)(v8 + 40);
        v10 = 4;
      }
      else
      {
        if (!v9)
          goto LABEL_9;
        v10 = 5;
      }
      sub_2108C763C(v9, v10);
LABEL_9:
      if (!*(_BYTE *)(v8 + 32))
        goto LABEL_15;
      v11 = *(_QWORD **)(v8 + 24);
      if ((_QWORD *)v8 == v11)
      {
        v11 = (_QWORD *)v8;
        v12 = 4;
      }
      else
      {
        if (!v11)
          goto LABEL_15;
        v12 = 5;
      }
      sub_2108C763C(v11, v12);
LABEL_15:
      if (*(_BYTE *)(v8 - 64) && *(char *)(v8 - 65) < 0)
        operator delete(*(void **)(v8 - 88));
      v13 = v8 - 88;
      v8 -= 168;
      if (v13 == v0)
      {
        v6 = *v7;
        break;
      }
    }
  }
  *v1 = v0;
  sub_2108C7630(v6);
}

void sub_2109EE32C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = a1 - 80;
  do
  {
    if (!*(_BYTE *)(v3 + 72))
      goto LABEL_8;
    v4 = *(_QWORD **)(v3 + 64);
    if ((_QWORD *)(v3 + 40) == v4)
    {
      v4 = (_QWORD *)(v3 + 40);
      v5 = 4;
    }
    else
    {
      if (!v4)
        goto LABEL_8;
      v5 = 5;
    }
    sub_2108C763C(v4, v5);
LABEL_8:
    if (*(_BYTE *)(v3 + 32))
    {
      v6 = *(_QWORD **)(v3 + 24);
      if ((_QWORD *)v3 == v6)
      {
        v6 = (_QWORD *)v3;
        v7 = 4;
        goto LABEL_13;
      }
      if (v6)
      {
        v7 = 5;
LABEL_13:
        sub_2108C763C(v6, v7);
      }
    }
    if (*(_BYTE *)(v3 - 64) && *(char *)(v3 - 65) < 0)
      operator delete(*(void **)(v3 - 88));
    v8 = v3 - 88;
    v3 -= 168;
  }
  while (v8 != a2);
  sub_2108C7654();
}

uint64_t sub_2109EE3CC(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 152);
  if (v2 == a2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  if (v2)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 152) + 40))(*(_QWORD *)(result + 152));
  return result;
}

void sub_2109EE400()
{
  void **v0;
  void ***v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void *v6;
  void **v7;

  sub_2108C7648();
  v4 = (void **)*v3;
  v6 = v5;
  if (v4 != v5)
  {
    v7 = v2;
    do
    {
      if (*((_BYTE *)v4 - 8) && *((char *)v4 - 9) < 0)
        operator delete(*(v4 - 4));
      v4 -= 4;
    }
    while (v4 != v0);
    v6 = *v7;
  }
  *v1 = v0;
  sub_2108C7630(v6);
}

void sub_2109EE45C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a1 != a2)
  {
    sub_2108C7648();
    do
    {
      if (*(_BYTE *)(v3 - 8))
      {
        if (*(char *)(v3 - 9) < 0)
          operator delete(*(void **)(v3 - 32));
      }
      v3 -= 32;
    }
    while (v3 != v2);
  }
}

void sub_2109EE4A4(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void sub_2109EE4B8(void **__p)
{
  void **v2;

  do
  {
    v2 = (void **)*__p;
    if (*((char *)__p + 39) < 0)
      operator delete(__p[2]);
    operator delete(__p);
    __p = v2;
  }
  while (v2);
  sub_2108C7654();
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
  MEMORY[0x24BDBB7C8](theArray, value);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x24BDBB808](allocator, capacity, callBacks);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x24BDBB850]();
}

CFURLRef CFBundleCopyExecutableURL(CFBundleRef bundle)
{
  return (CFURLRef)MEMORY[0x24BDBBA40](bundle);
}

CFBundleRef CFBundleCreate(CFAllocatorRef allocator, CFURLRef bundleURL)
{
  return (CFBundleRef)MEMORY[0x24BDBBA98](allocator, bundleURL);
}

CFBundleRef CFBundleGetMainBundle(void)
{
  return (CFBundleRef)MEMORY[0x24BDBBAD8]();
}

CFTypeRef CFBundleGetValueForInfoDictionaryKey(CFBundleRef bundle, CFStringRef key)
{
  return (CFTypeRef)MEMORY[0x24BDBBAE0](bundle, key);
}

CFStringRef CFCopyDescription(CFTypeRef cf)
{
  return (CFStringRef)MEMORY[0x24BDBBC58](cf);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x24BDBBDF0](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x24BDBBE18]();
}

Boolean CFDictionaryGetValueIfPresent(CFDictionaryRef theDict, const void *key, const void **value)
{
  return MEMORY[0x24BDBBE38](theDict, key, value);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x24BDBBE60](theDict, key, value);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x24BDBBEF8](cf);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x24BDBC0A0](allocator, theType, valuePtr);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x24BDBC298](cf);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x24BDBC2A8](cf);
}

CFStringRef CFStringCreateWithBytes(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation)
{
  return (CFStringRef)MEMORY[0x24BDBC558](alloc, bytes, numBytes, *(_QWORD *)&encoding, isExternalRepresentation);
}

CFIndex CFStringGetBytes(CFStringRef theString, CFRange range, CFStringEncoding encoding, UInt8 lossByte, Boolean isExternalRepresentation, UInt8 *buffer, CFIndex maxBufLen, CFIndex *usedBufLen)
{
  return MEMORY[0x24BDBC5F8](theString, range.location, range.length, *(_QWORD *)&encoding, lossByte, isExternalRepresentation, buffer, maxBufLen);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x24BDBC658](theString);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x24BDBC698]();
}

CFStringRef CFURLCopyFileSystemPath(CFURLRef anURL, CFURLPathStyle pathStyle)
{
  return (CFStringRef)MEMORY[0x24BDBC798](anURL, pathStyle);
}

CFStringRef CFURLCopyScheme(CFURLRef anURL)
{
  return (CFStringRef)MEMORY[0x24BDBC7D8](anURL);
}

CFURLRef CFURLCreateWithFileSystemPath(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x24BDBC858](allocator, filePath, pathStyle, isDirectory);
}

CVReturn CVPixelBufferCreate(CFAllocatorRef allocator, size_t width, size_t height, OSType pixelFormatType, CFDictionaryRef pixelBufferAttributes, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x24BDC5248](allocator, width, height, *(_QWORD *)&pixelFormatType, pixelBufferAttributes, pixelBufferOut);
}

void *__cdecl CVPixelBufferGetBaseAddressOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return (void *)MEMORY[0x24BDC5288](pixelBuffer, planeIndex);
}

size_t CVPixelBufferGetBytesPerRow(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x24BDC5290](pixelBuffer);
}

size_t CVPixelBufferGetBytesPerRowOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x24BDC5298](pixelBuffer, planeIndex);
}

size_t CVPixelBufferGetHeight(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x24BDC52B0](pixelBuffer);
}

size_t CVPixelBufferGetHeightOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x24BDC52B8](pixelBuffer, planeIndex);
}

IOSurfaceRef CVPixelBufferGetIOSurface(CVPixelBufferRef pixelBuffer)
{
  return (IOSurfaceRef)MEMORY[0x24BDC52C0](pixelBuffer);
}

OSType CVPixelBufferGetPixelFormatType(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x24BDC52D0](pixelBuffer);
}

size_t CVPixelBufferGetPlaneCount(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x24BDC52D8](pixelBuffer);
}

size_t CVPixelBufferGetWidth(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x24BDC52E8](pixelBuffer);
}

size_t CVPixelBufferGetWidthOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x24BDC52F0](pixelBuffer, planeIndex);
}

Boolean CVPixelBufferIsPlanar(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x24BDC52F8](pixelBuffer);
}

CVReturn CVPixelBufferLockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags lockFlags)
{
  return MEMORY[0x24BDC5308](pixelBuffer, lockFlags);
}

CVReturn CVPixelBufferUnlockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags unlockFlags)
{
  return MEMORY[0x24BDC53B0](pixelBuffer, unlockFlags);
}

IOSurfaceRef IOSurfaceCreate(CFDictionaryRef properties)
{
  return (IOSurfaceRef)MEMORY[0x24BDD8B50](properties);
}

uint64_t IOSurfaceCreateChildSurface()
{
  return MEMORY[0x24BDD8B58]();
}

void *__cdecl IOSurfaceGetBaseAddressOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return (void *)MEMORY[0x24BDD8BA8](buffer, planeIndex);
}

size_t IOSurfaceGetBytesPerElement(IOSurfaceRef buffer)
{
  return MEMORY[0x24BDD8BC0](buffer);
}

size_t IOSurfaceGetBytesPerElementOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return MEMORY[0x24BDD8BC8](buffer, planeIndex);
}

size_t IOSurfaceGetBytesPerRow(IOSurfaceRef buffer)
{
  return MEMORY[0x24BDD8BD0](buffer);
}

size_t IOSurfaceGetBytesPerRowOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return MEMORY[0x24BDD8BE0](buffer, planeIndex);
}

size_t IOSurfaceGetHeight(IOSurfaceRef buffer)
{
  return MEMORY[0x24BDD8C48](buffer);
}

size_t IOSurfaceGetHeightOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return MEMORY[0x24BDD8C58](buffer, planeIndex);
}

uint64_t IOSurfaceGetOffsetOfPlane()
{
  return MEMORY[0x24BDD8C78]();
}

OSType IOSurfaceGetPixelFormat(IOSurfaceRef buffer)
{
  return MEMORY[0x24BDD8C80](buffer);
}

size_t IOSurfaceGetPlaneCount(IOSurfaceRef buffer)
{
  return MEMORY[0x24BDD8C88](buffer);
}

size_t IOSurfaceGetWidth(IOSurfaceRef buffer)
{
  return MEMORY[0x24BDD8CD0](buffer);
}

size_t IOSurfaceGetWidthOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return MEMORY[0x24BDD8CE0](buffer, planeIndex);
}

kern_return_t IOSurfaceLock(IOSurfaceRef buffer, IOSurfaceLockOptions options, uint32_t *seed)
{
  return MEMORY[0x24BDD8D08](buffer, *(_QWORD *)&options, seed);
}

kern_return_t IOSurfaceUnlock(IOSurfaceRef buffer, IOSurfaceLockOptions options, uint32_t *seed)
{
  return MEMORY[0x24BDD8DD0](buffer, *(_QWORD *)&options, seed);
}

uint64_t MGCopyAnswer()
{
  return MEMORY[0x24BED8448]();
}

uint64_t MGGetSInt32Answer()
{
  return MEMORY[0x24BED8490]();
}

uint64_t MGGetSInt64Answer()
{
  return MEMORY[0x24BED84A0]();
}

uint64_t MGGetStringAnswer()
{
  return MEMORY[0x24BED84B0]();
}

int _NSGetExecutablePath(char *buf, uint32_t *bufsize)
{
  return MEMORY[0x24BDAC770](buf, bufsize);
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x24BDAC780](exception_object);
}

std::string *__cdecl std::error_condition::message(std::string *__return_ptr retstr, const std::error_condition *this)
{
  return (std::string *)MEMORY[0x24BEDA9E8](retstr, this);
}

std::__fs::filesystem::path::__string_view std::__fs::filesystem::path::__filename(const std::__fs::filesystem::path *this)
{
  const std::string_view::value_type *v1;
  std::basic_string_view<_CharT, _Traits>::size_type v2;
  std::__fs::filesystem::path::__string_view result;

  v1 = (const std::string_view::value_type *)MEMORY[0x24BEDAA00](this);
  result.__size_ = v2;
  result.__data_ = v1;
  return result;
}

std::__fs::filesystem::path::__string_view std::__fs::filesystem::path::__extension(const std::__fs::filesystem::path *this)
{
  const std::string_view::value_type *v1;
  std::basic_string_view<_CharT, _Traits>::size_type v2;
  std::__fs::filesystem::path::__string_view result;

  v1 = (const std::string_view::value_type *)MEMORY[0x24BEDAA08](this);
  result.__size_ = v2;
  result.__data_ = v1;
  return result;
}

std::__fs::filesystem::path::__string_view std::__fs::filesystem::path::__parent_path(const std::__fs::filesystem::path *this)
{
  const std::string_view::value_type *v1;
  std::basic_string_view<_CharT, _Traits>::size_type v2;
  std::__fs::filesystem::path::__string_view result;

  v1 = (const std::string_view::value_type *)MEMORY[0x24BEDAA10](this);
  result.__size_ = v2;
  result.__data_ = v1;
  return result;
}

int std::__fs::filesystem::path::__compare(const std::__fs::filesystem::path *this, std::__fs::filesystem::path::__string_view a2)
{
  return MEMORY[0x24BEDAA48](this, a2.__data_, a2.__size_);
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x24BEDAA60](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x24BEDAA70](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x24BEDAA90](this, a2);
}

{
  return (std::logic_error *)MEMORY[0x24BEDAAA8](this, a2);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const std::string *a2)
{
  return (std::logic_error *)MEMORY[0x24BEDAAB0](this, a2);
}

std::exception_ptr *__cdecl std::exception_ptr::exception_ptr(std::exception_ptr *this, const std::exception_ptr *a2)
{
  return (std::exception_ptr *)MEMORY[0x24BEDAB18](this, a2);
}

void std::exception_ptr::~exception_ptr(std::exception_ptr *this)
{
  MEMORY[0x24BEDAB20](this);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  return (std::runtime_error *)MEMORY[0x24BEDAB30](this, a2);
}

{
  return (std::runtime_error *)MEMORY[0x24BEDAB48](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::string *a2)
{
  return (std::runtime_error *)MEMORY[0x24BEDAB38](this, a2);
}

{
  return (std::runtime_error *)MEMORY[0x24BEDAB50](this, a2);
}

void std::runtime_error::~runtime_error(std::runtime_error *this)
{
  MEMORY[0x24BEDAB68](this);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x24BEDABB0](this);
}

void std::__call_once(std::once_flag::_State_type *a1, void *a2, void (__cdecl *a3)(void *))
{
  MEMORY[0x24BEDABC0](a1, a2, a3);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x24BEDABE8](__n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x24BEDAC40](this, __s, __n);
}

std::string *__cdecl std::string::append(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
  return (std::string *)MEMORY[0x24BEDAC50](this, __n, __c);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x24BEDAC88](this, __pos, __s, __n);
}

std::string *__cdecl std::string::replace(std::string *this, std::string::size_type __pos, std::string::size_type __n1, const std::string::value_type *__s, std::string::size_type __n2)
{
  return (std::string *)MEMORY[0x24BEDACA8](this, __pos, __n1, __s, __n2);
}

void std::string::reserve(std::string *this, std::string::size_type __requested_capacity)
{
  MEMORY[0x24BEDACB8](this, __requested_capacity);
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
  MEMORY[0x24BEDACC8](this, __c);
}

void std::string::~string(std::string *this)
{
  MEMORY[0x24BEDACF0](this);
}

std::future_error *__cdecl std::future_error::future_error(std::future_error *this, std::error_code __ec)
{
  return (std::future_error *)MEMORY[0x24BEDAD78](this, *(_QWORD *)&__ec.__val_, __ec.__cat_);
}

uint64_t std::ostream::put()
{
  return MEMORY[0x24BEDAEE0]();
}

uint64_t std::ostream::flush()
{
  return MEMORY[0x24BEDAEE8]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x24BEDAEF8]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x24BEDAF00]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x24BEDAF18]();
}

{
  return MEMORY[0x24BEDAF48]();
}

{
  return MEMORY[0x24BEDAF50]();
}

{
  return MEMORY[0x24BEDAF60]();
}

void std::__shared_count::~__shared_count(std::__shared_count *this)
{
  MEMORY[0x24BEDAFF8](this);
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x24BEDB010]();
}

std::__thread_struct *__cdecl std::__thread_struct::__thread_struct(std::__thread_struct *this)
{
  return (std::__thread_struct *)MEMORY[0x24BEDB038](this);
}

void std::__thread_struct::~__thread_struct(std::__thread_struct *this)
{
  MEMORY[0x24BEDB040](this);
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x24BEDB048]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x24BEDB050]();
}

const std::error_category *std::future_category(void)
{
  return (const std::error_category *)MEMORY[0x24BEDB080]();
}

const std::error_category *std::generic_category(void)
{
  return (const std::error_category *)MEMORY[0x24BEDB0B8]();
}

void std::__assoc_sub_state::__sub_wait(std::__assoc_sub_state *this, std::unique_lock<std::mutex> *__lk)
{
  MEMORY[0x24BEDB0C0](this, __lk);
}

void std::__assoc_sub_state::set_exception(std::__assoc_sub_state *this, std::exception_ptr __p)
{
  MEMORY[0x24BEDB0C8](this, __p.__ptr_);
}

void std::__assoc_sub_state::__on_zero_shared(std::__assoc_sub_state *this)
{
  MEMORY[0x24BEDB0D0](this);
}

void std::__assoc_sub_state::wait(std::__assoc_sub_state *this)
{
  MEMORY[0x24BEDB0D8](this);
}

void std::__assoc_sub_state::set_value(std::__assoc_sub_state *this)
{
  MEMORY[0x24BEDB0E0](this);
}

void std::condition_variable::notify_all(std::condition_variable *this)
{
  MEMORY[0x24BEDB0F8](this);
}

void std::condition_variable::~condition_variable(std::condition_variable *this)
{
  MEMORY[0x24BEDB118](this);
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
  MEMORY[0x24BEDB180](this);
}

std::__shared_weak_count *__cdecl std::__shared_weak_count::lock(std::__shared_weak_count *this)
{
  return (std::__shared_weak_count *)MEMORY[0x24BEDB188](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
  MEMORY[0x24BEDB190](this);
}

std::__thread_specific_ptr<std::__thread_struct> *std::__thread_local_data(void)
{
  return (std::__thread_specific_ptr<std::__thread_struct> *)MEMORY[0x24BEDB198]();
}

void std::__throw_system_error(int __ev, const char *__what_arg)
{
  MEMORY[0x24BEDB1B0](*(_QWORD *)&__ev, __what_arg);
}

std::__fs::filesystem::path *__cdecl std::__fs::filesystem::__weakly_canonical(std::__fs::filesystem::path *__return_ptr retstr, const std::__fs::filesystem::path *__p, std::error_code *__ec)
{
  return (std::__fs::filesystem::path *)MEMORY[0x24BEDB298](retstr, __p, __ec);
}

std::__fs::filesystem::file_status std::__fs::filesystem::__status(const std::__fs::filesystem::path *a1, std::error_code *__ec)
{
  return (std::__fs::filesystem::file_status)MEMORY[0x24BEDB308](a1, __ec);
}

int std::stoi(const std::string *__str, size_t *__idx, int __base)
{
  return MEMORY[0x24BEDB330](__str, __idx, *(_QWORD *)&__base);
}

void std::mutex::lock(std::mutex *this)
{
  MEMORY[0x24BEDB368](this);
}

void std::mutex::unlock(std::mutex *this)
{
  MEMORY[0x24BEDB370](this);
}

void std::mutex::~mutex(std::mutex *this)
{
  MEMORY[0x24BEDB380](this);
}

std::future<void> *__cdecl std::future<void>::future(std::future<void> *this, std::__assoc_sub_state *__state)
{
  return (std::future<void> *)MEMORY[0x24BEDB408](this, __state);
}

void std::future<void>::~future(std::future<void> *this)
{
  MEMORY[0x24BEDB410](this);
}

void std::locale::~locale(std::locale *this)
{
  MEMORY[0x24BEDB448](this);
}

void std::thread::detach(std::thread *this)
{
  MEMORY[0x24BEDB470](this);
}

void std::thread::~thread(std::thread *this)
{
  MEMORY[0x24BEDB478](this);
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
  MEMORY[0x24BEDB500](this);
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
  MEMORY[0x24BEDB518](this, __sb);
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
  MEMORY[0x24BEDB530](this, *(_QWORD *)&__state);
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x24BEDB5E8]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, int __val)
{
  return (std::string *)MEMORY[0x24BEDB608](retstr, *(_QWORD *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unsigned int __val)
{
  return (std::string *)MEMORY[0x24BEDB610](retstr, *(_QWORD *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unint64_t __val)
{
  return (std::string *)MEMORY[0x24BEDB620](retstr, __val);
}

uint64_t std::operator+<char>()
{
  return MEMORY[0x24BEDB638]();
}

void std::exception::~exception(std::exception *this)
{
  MEMORY[0x24BEDB688](this);
}

std::exception_ptr std::current_exception(void)
{
  return (std::exception_ptr)MEMORY[0x24BEDB6A0]();
}

void std::rethrow_exception(std::exception_ptr a1)
{
  MEMORY[0x24BEDB6A8](a1.__ptr_);
}

void std::terminate(void)
{
  MEMORY[0x24BEDB6C0]();
}

uint64_t operator delete[]()
{
  return off_24CA79298();
}

void operator delete(void *__p)
{
  off_24CA792A0(__p);
}

void operator delete(void *__p, const std::nothrow_t *a2)
{
  off_24CA792A8(__p, a2);
}

uint64_t operator delete()
{
  return off_24CA792B0();
}

uint64_t operator new[]()
{
  return off_24CA792B8();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_24CA792C0(__sz);
}

void *__cdecl operator new(size_t __sz, const std::nothrow_t *a2)
{
  return (void *)off_24CA792C8(__sz, a2);
}

uint64_t operator new()
{
  return off_24CA792D0();
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x24BEDB8F8](thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x24BDAC7B0](lpfunc, obj, lpdso_handle);
}

void __cxa_bad_cast(void)
{
  MEMORY[0x24BEDB900]();
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x24BEDB910](a1);
}

void __cxa_end_catch(void)
{
  MEMORY[0x24BEDB928]();
}

void __cxa_free_exception(void *a1)
{
  MEMORY[0x24BEDB930](a1);
}

void __cxa_guard_abort(__guard *a1)
{
  MEMORY[0x24BEDB940](a1);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x24BEDB948](a1);
}

void __cxa_guard_release(__guard *a1)
{
  MEMORY[0x24BEDB950](a1);
}

void __cxa_rethrow(void)
{
  MEMORY[0x24BEDB958]();
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x24BEDB960](a1, lptinfo, a3);
}

void *__dynamic_cast(const void *lpsrc, const struct __class_type_info *lpstype, const struct __class_type_info *lpdtype, ptrdiff_t s2d)
{
  return (void *)MEMORY[0x24BEDB968](lpsrc, lpstype, lpdtype, s2d);
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x24BDAC838](*(_QWORD *)&a1, a2);
}

__float2 __sincosf_stret(float a1)
{
  float v1;
  float v2;
  __float2 result;

  MEMORY[0x24BDAC898](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB90](dso, log, type, format, buf, *(_QWORD *)&size);
}

uint64_t _os_log_send_and_compose_impl()
{
  return MEMORY[0x24BDACBA8]();
}

uint64_t _os_signpost_emit_unreliably_with_name_impl()
{
  return MEMORY[0x24BDACC08]();
}

simd_float4 _simd_fmod_f4(simd_float4 x, simd_float4 y)
{
  simd_float4 result;

  MEMORY[0x24BDACD68]((__n128)x, (__n128)y);
  return result;
}

void abort(void)
{
  MEMORY[0x24BDAD008]();
}

float atan2f(float a1, float a2)
{
  float result;

  MEMORY[0x24BDAD228](a1, a2);
  return result;
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

int dladdr(const void *a1, Dl_info *a2)
{
  return MEMORY[0x24BDAE058](a1, a2);
}

uint64_t e5rt_buffer_object_alloc()
{
  return MEMORY[0x24BE2F6E8]();
}

uint64_t e5rt_buffer_object_get_data_ptr()
{
  return MEMORY[0x24BE2F700]();
}

uint64_t e5rt_buffer_object_release()
{
  return MEMORY[0x24BE2F720]();
}

uint64_t e5rt_e5_compiler_compile()
{
  return MEMORY[0x24BE2F738]();
}

uint64_t e5rt_e5_compiler_config_options_create()
{
  return MEMORY[0x24BE2F740]();
}

uint64_t e5rt_e5_compiler_config_options_set_cache_bundle_location()
{
  return MEMORY[0x24BE2F750]();
}

uint64_t e5rt_e5_compiler_create()
{
  return MEMORY[0x24BE2F758]();
}

uint64_t e5rt_e5_compiler_create_with_config()
{
  return MEMORY[0x24BE2F760]();
}

uint64_t e5rt_e5_compiler_is_new_compile_required()
{
  return MEMORY[0x24BE2F768]();
}

uint64_t e5rt_e5_compiler_options_create()
{
  return MEMORY[0x24BE2F770]();
}

uint64_t e5rt_error_code_get_string()
{
  return MEMORY[0x24BE2F798]();
}

uint64_t e5rt_execution_stream_create()
{
  return MEMORY[0x24BE2F7A0]();
}

uint64_t e5rt_execution_stream_encode_operation()
{
  return MEMORY[0x24BE2F7B0]();
}

uint64_t e5rt_execution_stream_execute_sync()
{
  return MEMORY[0x24BE2F7C0]();
}

uint64_t e5rt_execution_stream_operation_create_precompiled_compute_operation_with_options()
{
  return MEMORY[0x24BE2F7E0]();
}

uint64_t e5rt_execution_stream_operation_get_input_names()
{
  return MEMORY[0x24BE2F7F0]();
}

uint64_t e5rt_execution_stream_operation_get_num_inputs()
{
  return MEMORY[0x24BE2F800]();
}

uint64_t e5rt_execution_stream_operation_get_num_outputs()
{
  return MEMORY[0x24BE2F808]();
}

uint64_t e5rt_execution_stream_operation_get_output_names()
{
  return MEMORY[0x24BE2F820]();
}

uint64_t e5rt_execution_stream_operation_prepare_op_for_encode()
{
  return MEMORY[0x24BE2F828]();
}

uint64_t e5rt_execution_stream_operation_release()
{
  return MEMORY[0x24BE2F830]();
}

uint64_t e5rt_execution_stream_operation_retain_input_port()
{
  return MEMORY[0x24BE2F840]();
}

uint64_t e5rt_execution_stream_operation_retain_output_port()
{
  return MEMORY[0x24BE2F850]();
}

uint64_t e5rt_execution_stream_prewire_in_use_allocations()
{
  return MEMORY[0x24BE2F860]();
}

uint64_t e5rt_execution_stream_release()
{
  return MEMORY[0x24BE2F870]();
}

uint64_t e5rt_execution_stream_reset()
{
  return MEMORY[0x24BE2F888]();
}

uint64_t e5rt_get_last_error_message()
{
  return MEMORY[0x24BE2F8A0]();
}

uint64_t e5rt_io_port_bind_buffer_object()
{
  return MEMORY[0x24BE2F8A8]();
}

uint64_t e5rt_io_port_bind_surface_object()
{
  return MEMORY[0x24BE2F8C0]();
}

uint64_t e5rt_io_port_release()
{
  return MEMORY[0x24BE2F8E8]();
}

uint64_t e5rt_io_port_retain_tensor_desc()
{
  return MEMORY[0x24BE2F908]();
}

uint64_t e5rt_precompiled_compute_op_create_options_create_with_program_function()
{
  return MEMORY[0x24BE2F910]();
}

uint64_t e5rt_precompiled_compute_op_create_options_set_allocate_intermediate_buffers()
{
  return MEMORY[0x24BE2F920]();
}

uint64_t e5rt_program_library_create()
{
  return MEMORY[0x24BE2F958]();
}

uint64_t e5rt_program_library_get_function_metadata()
{
  return MEMORY[0x24BE2F970]();
}

uint64_t e5rt_program_library_get_function_names()
{
  return MEMORY[0x24BE2F978]();
}

uint64_t e5rt_program_library_get_num_functions()
{
  return MEMORY[0x24BE2F980]();
}

uint64_t e5rt_program_library_retain_program_function()
{
  return MEMORY[0x24BE2F9A0]();
}

uint64_t e5rt_surface_object_create_from_iosurface()
{
  return MEMORY[0x24BE2FA08]();
}

uint64_t e5rt_tensor_desc_create()
{
  return MEMORY[0x24BE2FA30]();
}

uint64_t e5rt_tensor_desc_dtype_create()
{
  return MEMORY[0x24BE2FA38]();
}

uint64_t e5rt_tensor_desc_dtype_get_component_dtype()
{
  return MEMORY[0x24BE2FA40]();
}

uint64_t e5rt_tensor_desc_dtype_get_component_size()
{
  return MEMORY[0x24BE2FA50]();
}

uint64_t e5rt_tensor_desc_dtype_get_element_size()
{
  return MEMORY[0x24BE2FA58]();
}

uint64_t e5rt_tensor_desc_dtype_get_num_components()
{
  return MEMORY[0x24BE2FA60]();
}

uint64_t e5rt_tensor_desc_get_shape()
{
  return MEMORY[0x24BE2FA88]();
}

uint64_t e5rt_tensor_desc_get_size()
{
  return MEMORY[0x24BE2FA90]();
}

uint64_t e5rt_tensor_desc_get_strides()
{
  return MEMORY[0x24BE2FA98]();
}

uint64_t e5rt_tensor_desc_release()
{
  return MEMORY[0x24BE2FAA8]();
}

uint64_t e5rt_tensor_desc_retain_dtype()
{
  return MEMORY[0x24BE2FAB8]();
}

uint64_t e5rt_tensor_utils_cast_from_fp16_to_fp32()
{
  return MEMORY[0x24BE2FAC0]();
}

uint64_t e5rt_tensor_utils_dequantize_from_u8_to_fp32()
{
  return MEMORY[0x24BE2FAD8]();
}

uint64_t espresso_context_destroy()
{
  return MEMORY[0x24BE2FB00]();
}

uint64_t espresso_context_set_low_precision_accumulation()
{
  return MEMORY[0x24BE2FB10]();
}

uint64_t espresso_create_context()
{
  return MEMORY[0x24BE2FB18]();
}

uint64_t espresso_create_plan()
{
  return MEMORY[0x24BE2FB38]();
}

uint64_t espresso_get_last_error()
{
  return MEMORY[0x24BE2FB60]();
}

uint64_t espresso_network_bind_buffer()
{
  return MEMORY[0x24BE2FB88]();
}

uint64_t espresso_network_bind_direct_cvpixelbuffer()
{
  return MEMORY[0x24BE2FBA8]();
}

uint64_t espresso_network_bind_input_cvpixelbuffer()
{
  return MEMORY[0x24BE2FBB8]();
}

uint64_t espresso_network_bind_input_vimagebuffer_bgra8()
{
  return MEMORY[0x24BE2FBD0]();
}

uint64_t espresso_network_bind_input_vimagebuffer_planar8()
{
  return MEMORY[0x24BE2FBE8]();
}

uint64_t espresso_network_bind_input_vimagebuffer_rgba8()
{
  return MEMORY[0x24BE2FBF8]();
}

uint64_t espresso_network_declare_input()
{
  return MEMORY[0x24BE2FC10]();
}

uint64_t espresso_network_declare_output()
{
  return MEMORY[0x24BE2FC18]();
}

uint64_t espresso_network_query_blob_dimensions()
{
  return MEMORY[0x24BE2FC38]();
}

uint64_t espresso_network_select_configuration()
{
  return MEMORY[0x24BE2FC50]();
}

uint64_t espresso_plan_add_network()
{
  return MEMORY[0x24BE2FC70]();
}

uint64_t espresso_plan_build()
{
  return MEMORY[0x24BE2FC80]();
}

uint64_t espresso_plan_build_clean()
{
  return MEMORY[0x24BE2FC88]();
}

uint64_t espresso_plan_destroy()
{
  return MEMORY[0x24BE2FC90]();
}

uint64_t espresso_plan_execute_sync()
{
  return MEMORY[0x24BE2FCA0]();
}

uint64_t espresso_plan_get_error_info()
{
  return MEMORY[0x24BE2FCB0]();
}

uint64_t espresso_set_image_preprocessing_params()
{
  return MEMORY[0x24BE2FCE0]();
}

float expf(float a1)
{
  float result;

  MEMORY[0x24BDAE288](a1);
  return result;
}

float fmodf(float a1, float a2)
{
  float result;

  MEMORY[0x24BDAE3F8](a1, a2);
  return result;
}

int fputs(const char *a1, FILE *a2)
{
  return MEMORY[0x24BDAE440](a1, a2);
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

uint64_t kdebug_trace()
{
  return MEMORY[0x24BDAE958]();
}

int malloc_type_posix_memalign(void **memptr, size_t alignment, size_t size, malloc_type_id_t type_id)
{
  return MEMORY[0x24BDAED80](memptr, alignment, size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE70](__s, *(_QWORD *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x24BDAEE78](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x24BDAEEA8](__b, *(_QWORD *)&__c, __len);
}

float nextafterf(float a1, float a2)
{
  float result;

  MEMORY[0x24BDAF118](a1, a2);
  return result;
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x24BEDCFE8]();
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x24BEDD2A8](a1);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x24BDAF368](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x24BDAF398](oslog, type);
}

void os_release(void *object)
{
  MEMORY[0x24BDAF3F0](object);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x24BDAF400](log);
}

int pthread_create(pthread_t *a1, const pthread_attr_t *a2, void *(__cdecl *a3)(void *), void *a4)
{
  return MEMORY[0x24BDAF818](a1, a2, a3, a4);
}

int pthread_setspecific(pthread_key_t a1, const void *a2)
{
  return MEMORY[0x24BDAF9A8](a1, a2);
}

int pthread_threadid_np(pthread_t a1, __uint64_t *a2)
{
  return MEMORY[0x24BDAF9C8](a1, a2);
}

char *__cdecl strchr(char *__s, int __c)
{
  return (char *)MEMORY[0x24BDAFEE8](__s, *(_QWORD *)&__c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x24BDAFEF0](__s1, __s2);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x24BDAFF40](__s);
}

char *__cdecl strstr(char *__s1, const char *__s2)
{
  return (char *)MEMORY[0x24BDAFFC8](__s1, __s2);
}

int timespec_get(timespec *ts, int base)
{
  return MEMORY[0x24BDB0258](ts, *(_QWORD *)&base);
}

vImage_Error vImageBuffer_Init(vImage_Buffer *buf, vImagePixelCount height, vImagePixelCount width, uint32_t pixelBits, vImage_Flags flags)
{
  return MEMORY[0x24BDB3BC8](buf, height, width, *(_QWORD *)&pixelBits, *(_QWORD *)&flags);
}

