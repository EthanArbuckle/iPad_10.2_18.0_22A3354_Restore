void sub_2108A4A34(_BYTE *a1@<X8>)
{
  BOOL v2;
  id v3;
  const char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v10 = &unk_24CA85158;
  v2 = sub_2109EBD10((uint64_t)&v10);
  nullsub_66(&v10);
  if (!v2)
  {
    *a1 = 0;
    a1[24] = 0;
    return;
  }
  objc_msgSend(MEMORY[0x24BE086D0], "aneSubType");
  v3 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v4 = (const char *)objc_msgSend(v3, "UTF8String");
  v5 = strlen(v4);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_2108A4B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    a1[23] = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v4, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[24] = 1;

}

void sub_2108A4B58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nullsub_66(va);
  _Unwind_Resume(a1);
}

void sub_2108A4B6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2108A4B7C()
{
  sub_2108A4B90("basic_string");
}

void sub_2108A4B90(const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_2108A4BE0(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_24CA79200, MEMORY[0x24BEDAAF0]);
}

void sub_2108A4BCC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_2108A4BE0(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B8] + 16);
  return result;
}

double sub_2108A4C04@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, int *a3@<X2>, int a4@<W3>, int a5@<W4>, uint64_t a6@<X8>)
{
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  double result;
  _QWORD *exception;
  __int128 v24;
  int v25;
  __int128 v26;
  int v27;

  v12 = 1;
  sub_21098C5E4(&v26, 1, 1, 1, 1, 1);
  if (a1 == 1)
  {
    if (!HIDWORD(*a2))
    {
      sub_21098C5E4(&v24, a4, *a2, 1, 1, 1);
      v26 = v24;
      v27 = v25;
      if (!HIDWORD(*a2))
      {
        v13 = *a3;
        v14 = *a3 * *a2;
        v12 = a5;
        v15 = v14;
        v16 = v14;
        goto LABEL_16;
      }
    }
    goto LABEL_17;
  }
  if (a1 == 2)
  {
    v20 = a2[1];
    if (!HIDWORD(v20) && !HIDWORD(*a2))
    {
      sub_21098C5E4(&v24, a4, v20, *a2, 1, 1);
      v26 = v24;
      v27 = v25;
      v21 = a2[1];
      if (!HIDWORD(v21))
      {
        v14 = *a3;
        v15 = *a3 * v21;
        v13 = a3[2];
        v12 = a5;
        v16 = v15;
        goto LABEL_16;
      }
    }
    goto LABEL_17;
  }
  v13 = 1;
  v14 = 1;
  v15 = 1;
  v16 = 1;
  if (a1 == 4)
  {
    v17 = a2[3];
    if (!HIDWORD(v17))
    {
      v18 = a2[2];
      if (!HIDWORD(v18))
      {
        v19 = a2[1];
        if (!HIDWORD(v19) && !HIDWORD(*a2))
        {
          sub_21098C5E4(&v24, a4, v17, v18, v19, *a2);
          v26 = v24;
          v27 = v25;
          v13 = a3[6];
          v14 = a3[4];
          v15 = a3[2];
          v16 = *a3;
          v12 = a5;
          goto LABEL_16;
        }
      }
    }
LABEL_17:
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CA852D8;
    __cxa_throw(exception, (struct type_info *)&unk_24CA852F0, (void (*)(void *))std::exception::~exception);
  }
LABEL_16:
  result = *(double *)&v26;
  *(_OWORD *)a6 = v26;
  *(_DWORD *)(a6 + 16) = v27;
  *(_DWORD *)(a6 + 20) = v12;
  *(_DWORD *)(a6 + 24) = v13;
  *(_DWORD *)(a6 + 28) = v14;
  *(_DWORD *)(a6 + 32) = v15;
  *(_DWORD *)(a6 + 36) = v16;
  return result;
}

double sub_2108A4DF8@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _DWORD *a3@<X2>, int a4@<W3>, unsigned int a5@<W4>, uint64_t a6@<X8>)
{
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  double result;
  _QWORD *exception;
  __int128 v25;
  int v26;
  __int128 v27;
  int v28;

  v12 = 1;
  sub_21098C5E4(&v27, 1, 1, 1, 1, 1);
  if (a1 == 1)
  {
    if (!HIDWORD(*a2))
    {
      sub_21098C5E4(&v25, a4, *a2, 1, 1, 1);
      v27 = v25;
      v28 = v26;
      if (!HIDWORD(*a2))
      {
        v12 = a5 >> 1;
        v13 = *a3 >> 1;
        v14 = (*a3 * *a2) >> 1;
        v15 = v14;
        v16 = v14;
        goto LABEL_16;
      }
    }
    goto LABEL_17;
  }
  if (a1 == 2)
  {
    v20 = a2[1];
    if (!HIDWORD(v20) && !HIDWORD(*a2))
    {
      sub_21098C5E4(&v25, a4, v20, *a2, 1, 1);
      v27 = v25;
      v28 = v26;
      v21 = a2[1];
      if (!HIDWORD(v21))
      {
        v22 = *a3 * v21;
        v12 = a5 >> 1;
        v13 = a3[2] >> 1;
        v14 = *a3 >> 1;
        v15 = v22 >> 1;
        v16 = v15;
        goto LABEL_16;
      }
    }
    goto LABEL_17;
  }
  v13 = 1;
  v14 = 1;
  v15 = 1;
  v16 = 1;
  if (a1 == 4)
  {
    v17 = a2[3];
    if (!HIDWORD(v17))
    {
      v18 = a2[2];
      if (!HIDWORD(v18))
      {
        v19 = a2[1];
        if (!HIDWORD(v19) && !HIDWORD(*a2))
        {
          sub_21098C5E4(&v25, a4, v17, v18, v19, *a2);
          v27 = v25;
          v28 = v26;
          v12 = a5 >> 1;
          v13 = a3[6] >> 1;
          v14 = a3[4] >> 1;
          v15 = a3[2] >> 1;
          v16 = *a3 >> 1;
          goto LABEL_16;
        }
      }
    }
LABEL_17:
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CA852D8;
    __cxa_throw(exception, (struct type_info *)&unk_24CA852F0, (void (*)(void *))std::exception::~exception);
  }
LABEL_16:
  result = *(double *)&v27;
  *(_OWORD *)a6 = v27;
  *(_DWORD *)(a6 + 16) = v28;
  *(_DWORD *)(a6 + 20) = v12;
  *(_DWORD *)(a6 + 24) = v13;
  *(_DWORD *)(a6 + 28) = v14;
  *(_DWORD *)(a6 + 32) = v15;
  *(_DWORD *)(a6 + 36) = v16;
  return result;
}

double sub_2108A5010@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _DWORD *a3@<X2>, int a4@<W3>, unsigned int a5@<W4>, uint64_t a6@<X8>)
{
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  double result;
  _QWORD *exception;
  __int128 v25;
  int v26;
  __int128 v27;
  int v28;

  v12 = 1;
  sub_21098C5E4(&v27, 1, 1, 1, 1, 1);
  if (a1 == 1)
  {
    if (!HIDWORD(*a2))
    {
      sub_21098C5E4(&v25, a4, *a2, 1, 1, 1);
      v27 = v25;
      v28 = v26;
      if (!HIDWORD(*a2))
      {
        v12 = a5 >> 2;
        v13 = *a3 >> 2;
        v14 = (*a3 * *a2) >> 2;
        v15 = v14;
        v16 = v14;
        goto LABEL_16;
      }
    }
    goto LABEL_17;
  }
  if (a1 == 2)
  {
    v20 = a2[1];
    if (!HIDWORD(v20) && !HIDWORD(*a2))
    {
      sub_21098C5E4(&v25, a4, v20, *a2, 1, 1);
      v27 = v25;
      v28 = v26;
      v21 = a2[1];
      if (!HIDWORD(v21))
      {
        v22 = *a3 * v21;
        v12 = a5 >> 2;
        v13 = a3[2] >> 2;
        v14 = *a3 >> 2;
        v15 = v22 >> 2;
        v16 = v15;
        goto LABEL_16;
      }
    }
    goto LABEL_17;
  }
  v13 = 1;
  v14 = 1;
  v15 = 1;
  v16 = 1;
  if (a1 == 4)
  {
    v17 = a2[3];
    if (!HIDWORD(v17))
    {
      v18 = a2[2];
      if (!HIDWORD(v18))
      {
        v19 = a2[1];
        if (!HIDWORD(v19) && !HIDWORD(*a2))
        {
          sub_21098C5E4(&v25, a4, v17, v18, v19, *a2);
          v27 = v25;
          v28 = v26;
          v12 = a5 >> 2;
          v13 = a3[6] >> 2;
          v14 = a3[4] >> 2;
          v15 = a3[2] >> 2;
          v16 = *a3 >> 2;
          goto LABEL_16;
        }
      }
    }
LABEL_17:
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CA852D8;
    __cxa_throw(exception, (struct type_info *)&unk_24CA852F0, (void (*)(void *))std::exception::~exception);
  }
LABEL_16:
  result = *(double *)&v27;
  *(_OWORD *)a6 = v27;
  *(_DWORD *)(a6 + 16) = v28;
  *(_DWORD *)(a6 + 20) = v12;
  *(_DWORD *)(a6 + 24) = v13;
  *(_DWORD *)(a6 + 28) = v14;
  *(_DWORD *)(a6 + 32) = v15;
  *(_DWORD *)(a6 + 36) = v16;
  return result;
}

uint64_t sub_2108A5228@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;
  unint64_t *v12;
  __int128 v13;
  unint64_t *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  int v18;
  uint64_t (**v19)();
  __int128 v20;
  _OWORD v21[2];
  char v22;
  int v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  int v27;
  uint64_t v28;
  __int128 v29;
  _BYTE v30[30];
  char v31;

  v2 = result;
  v4 = result + 24;
  if (*(_BYTE *)(result + 152))
  {
    *(_BYTE *)a2 = 0;
    *(_DWORD *)(a2 + 120) = -1;
    v5 = *(unsigned int *)(result + 144);
    if ((_DWORD)v5 == -1)
      return result;
    result = ((uint64_t (*)(__int128 *, uint64_t, uint64_t))off_24CA79868[v5])(&v24, a2, v4);
    goto LABEL_29;
  }
  v6 = *(_DWORD *)result;
  if (*(_DWORD *)result == 2)
  {
    sub_2108B2734((_DWORD *)result, (uint64_t)&v24);
    v15 = v24;
    v16 = v25;
    v17 = v26;
    v18 = v27;
    LOBYTE(v19) = 0;
    v22 = 0;
    if (!v31)
    {
      v23 = 2;
      goto LABEL_24;
    }
    v19 = &off_24CA79890;
    v11 = v29;
    v29 = 0uLL;
    v20 = v11;
    v21[0] = *(_OWORD *)v30;
    *(_OWORD *)((char *)v21 + 14) = *(_OWORD *)&v30[14];
    v22 = 1;
    v23 = 2;
    nullsub_51(v30);
    v8 = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
    if (!*((_QWORD *)&v29 + 1))
      goto LABEL_23;
    v12 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
    do
      v10 = __ldaxr(v12);
    while (__stlxr(v10 - 1, v12));
    goto LABEL_21;
  }
  if (v6 == 1)
  {
    sub_2108B243C((_DWORD *)result, (uint64_t)&v24);
    v15 = v24;
    v16 = v25;
    v17 = v26;
    v18 = v27;
    LOBYTE(v19) = 0;
    v22 = 0;
    if (!v31)
    {
      v23 = 1;
      goto LABEL_24;
    }
    v19 = &off_24CA79890;
    v13 = v29;
    v29 = 0uLL;
    v20 = v13;
    v21[0] = *(_OWORD *)v30;
    *(_OWORD *)((char *)v21 + 14) = *(_OWORD *)&v30[14];
    v22 = 1;
    v23 = 1;
    nullsub_51(v30);
    v8 = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
    if (!*((_QWORD *)&v29 + 1))
      goto LABEL_23;
    v14 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
    do
      v10 = __ldaxr(v14);
    while (__stlxr(v10 - 1, v14));
LABEL_21:
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
    goto LABEL_23;
  }
  if (v6)
    sub_2109EE168();
  sub_2108B2148((_DWORD *)result, (uint64_t)&v24);
  v15 = v24;
  v16 = v25;
  v17 = v26;
  v18 = v27;
  LOBYTE(v19) = 0;
  v22 = 0;
  if (v31)
  {
    v19 = &off_24CA79890;
    v7 = v29;
    v29 = 0uLL;
    v20 = v7;
    v21[0] = *(_OWORD *)v30;
    *(_OWORD *)((char *)v21 + 14) = *(_OWORD *)&v30[14];
    v22 = 1;
    v23 = 0;
    nullsub_51(v30);
    v8 = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
    if (*((_QWORD *)&v29 + 1))
    {
      v9 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      goto LABEL_21;
    }
LABEL_23:
    nullsub_51(&v28);
    goto LABEL_24;
  }
  v23 = 0;
LABEL_24:
  result = sub_2108A55B8(v4, (uint64_t)&v15);
  if (v23 != -1)
    result = ((uint64_t (*)(__int128 *, __int128 *))off_24CA79850[v23])(&v24, &v15);
  if (!*(_BYTE *)(v2 + 152))
    sub_2108B1AA4();
  *(_BYTE *)a2 = 0;
  *(_DWORD *)(a2 + 120) = -1;
  v5 = *(unsigned int *)(v2 + 144);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(__int128 *, uint64_t, uint64_t))off_24CA79868[v5])(&v24, a2, v4);
LABEL_29:
    *(_DWORD *)(a2 + 120) = v5;
  }
  return result;
}

void sub_2108A5534(_Unwind_Exception *exception_object, ...)
{
  uint64_t v1;
  uint64_t v3;
  va_list va;

  va_start(va, exception_object);
  v3 = *(unsigned int *)(v1 + 120);
  if ((_DWORD)v3 != -1)
    ((void (*)(uint64_t *, uint64_t))off_24CA79850[v3])((uint64_t *)va, v1);
  *(_DWORD *)(v1 + 120) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t sub_2108A55B8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;

  if (*(_BYTE *)(a1 + 128))
  {
    v3 = *(unsigned int *)(a1 + 120);
    v4 = *(unsigned int *)(a2 + 120);
    if ((_DWORD)v3 == -1)
    {
      if ((_DWORD)v4 == -1)
        return a1;
    }
    else if ((_DWORD)v4 == -1)
    {
      ((void (*)(char *, uint64_t, uint64_t))off_24CA79850[v3])(&v8, a1, a2);
      *(_DWORD *)(a1 + 120) = -1;
      return a1;
    }
    v7 = a1;
    ((void (*)(uint64_t *, uint64_t, uint64_t))off_24CA79980[v4])(&v7, a1, a2);
    return a1;
  }
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 120) = -1;
  v6 = *(unsigned int *)(a2 + 120);
  if ((_DWORD)v6 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))off_24CA79998[v6])(&v9, a1, a2);
    *(_DWORD *)(a1 + 120) = v6;
  }
  *(_BYTE *)(a1 + 128) = 1;
  return a1;
}

uint64_t sub_2108A56A8(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 120);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24CA79850[v2])(&v4, a1);
  *(_DWORD *)(a1 + 120) = -1;
  return a1;
}

void sub_2108A5700(std::string *a1@<X8>)
{
  const char *v2;
  size_t v3;
  std::string::size_type v4;
  std::string *p_dst;
  uint64_t v6;
  uint64_t v7;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  const char *last_error_message;
  size_t v13;
  size_t v14;
  void *p_p;
  uint64_t v16;
  uint64_t v17;
  const std::string::value_type *v18;
  std::string::size_type v19;
  std::string *v20;
  void *__p;
  size_t v22;
  int64_t v23;
  std::string __dst;
  std::string v25;
  std::string v26;

  v2 = (const char *)MEMORY[0x212BCC8C4]();
  v3 = strlen(v2);
  if (v3 > 0x7FFFFFFFFFFFFFF7)
    sub_2108A4B7C();
  v4 = v3;
  if (v3 >= 0x17)
  {
    v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v6 = v3 | 7;
    v7 = v6 + 1;
    p_dst = (std::string *)operator new(v6 + 1);
    __dst.__r_.__value_.__l.__size_ = v4;
    __dst.__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v3;
  p_dst = &__dst;
  if (v3)
LABEL_8:
    memmove(p_dst, v2, v4);
  p_dst->__r_.__value_.__s.__data_[v4] = 0;
  v8 = std::string::insert(&__dst, 0, "Status code: ", 0xDuLL);
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v10 = std::string::append(&v25, ". Last Error: ", 0xEuLL);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v26.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  last_error_message = (const char *)e5rt_get_last_error_message();
  v13 = strlen(last_error_message);
  if (v13 > 0x7FFFFFFFFFFFFFF7)
    sub_2108A4B7C();
  v14 = v13;
  if (v13 >= 0x17)
  {
    v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v16 = v13 | 7;
    v17 = v16 + 1;
    p_p = operator new(v16 + 1);
    v22 = v14;
    v23 = v17 | 0x8000000000000000;
    __p = p_p;
    goto LABEL_16;
  }
  HIBYTE(v23) = v13;
  p_p = &__p;
  if (v13)
LABEL_16:
    memmove(p_p, last_error_message, v14);
  *((_BYTE *)p_p + v14) = 0;
  if (v23 >= 0)
    v18 = (const std::string::value_type *)&__p;
  else
    v18 = (const std::string::value_type *)__p;
  if (v23 >= 0)
    v19 = HIBYTE(v23);
  else
    v19 = v22;
  v20 = std::string::append(&v26, v18, v19);
  *a1 = *v20;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v23) < 0)
  {
    operator delete(__p);
    if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_25:
      if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_26;
      goto LABEL_30;
    }
  }
  else if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_25;
  }
  operator delete(v26.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_26:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_31:
    operator delete(__dst.__r_.__value_.__l.__data_);
    return;
  }
LABEL_30:
  operator delete(v25.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_31;
}

void sub_2108A5940(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a26 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a20 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_9;
  }
LABEL_8:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0)
LABEL_5:
    _Unwind_Resume(exception_object);
LABEL_9:
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

__n128 sub_2108A59DC@<Q0>(char *__s@<X1>, std::string *a2@<X0>, std::string *a3@<X8>)
{
  size_t v6;
  __n128 *v7;
  __n128 result;

  v6 = strlen(__s);
  v7 = (__n128 *)std::string::append(a2, __s, v6);
  result = *v7;
  *a3 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

__n128 sub_2108A5A38@<Q0>(const char *a1@<X0>, std::string *a2@<X1>, std::string *a3@<X8>)
{
  size_t v6;
  __n128 *v7;
  __n128 result;

  v6 = strlen(a1);
  v7 = (__n128 *)std::string::insert(a2, 0, a1, v6);
  result = *v7;
  *a3 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

_QWORD *sub_2108A5A94(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_2108A4B7C();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void sub_2108A5B44(const void **a1@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int v6;
  size_t v7;
  unint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  const void *v13;
  std::string *v14;
  __int128 v15;
  void **v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  void *v20;
  std::string v21;
  void *__p[2];
  int64_t v23;
  uint64_t v24;
  _BYTE v25[80];
  std::string::size_type v26;

  v24 = 0;
  if (!e5rt_program_library_create())
  {
    *(_QWORD *)a2 = v24;
    *(_BYTE *)(a2 + 8) = 0;
    v25[32] = 0;
    HIBYTE(v26) = 0;
    v25[64] = 0;
    sub_2108C4BA4(a2 + 16, &v25[32], (uint64_t)&v25[64]);
    if (SHIBYTE(v26) < 0)
    {
      v20 = *(void **)&v25[64];
      goto LABEL_35;
    }
    return;
  }
  sub_2108A5700(&v21);
  v4 = std::string::insert(&v21, 0, "Unable to create program library: ", 0x22uLL);
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v23 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  v6 = *((char *)a1 + 23);
  if (v6 >= 0)
    v7 = *((unsigned __int8 *)a1 + 23);
  else
    v7 = (size_t)a1[1];
  v8 = v7 + 72;
  if (v7 + 72 >= 0x7FFFFFFFFFFFFFF8)
    sub_2108A4B7C();
  if (v8 <= 0x16)
  {
    v9 = &v25[72];
    qmemcpy(v25, "Error during creation of program library model with bundle expected at '", 72);
LABEL_13:
    if (v6 >= 0)
      v13 = a1;
    else
      v13 = *a1;
    memmove(v9, v13, v7);
    goto LABEL_17;
  }
  v10 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v8 | 7) != 0x17)
    v10 = v8 | 7;
  v11 = v10 + 1;
  v12 = (char *)operator new(v10 + 1);
  *(_QWORD *)&v25[8] = v7 + 72;
  *(_QWORD *)&v25[16] = v11 | 0x8000000000000000;
  *(_QWORD *)v25 = v12;
  v9 = v12 + 72;
  qmemcpy(v12, "Error during creation of program library model with bundle expected at '", 72);
  if (v7)
    goto LABEL_13;
LABEL_17:
  v9[v7] = 0;
  v14 = std::string::append((std::string *)v25, ". ", 2uLL);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  *(_QWORD *)&v25[48] = *((_QWORD *)&v14->__r_.__value_.__l + 2);
  *(_OWORD *)&v25[32] = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (v23 >= 0)
    v16 = __p;
  else
    v16 = (void **)__p[0];
  if (v23 >= 0)
    v17 = HIBYTE(v23);
  else
    v17 = (std::string::size_type)__p[1];
  v18 = std::string::append((std::string *)&v25[32], (const std::string::value_type *)v16, v17);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v26 = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25[64] = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if ((v25[55] & 0x80000000) != 0)
  {
    operator delete(*(void **)&v25[32]);
    if ((v25[23] & 0x80000000) == 0)
      goto LABEL_25;
  }
  else if ((v25[23] & 0x80000000) == 0)
  {
    goto LABEL_25;
  }
  operator delete(*(void **)v25);
LABEL_25:
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 0;
  v25[32] = 5;
  sub_2108C4BA4(a2 + 16, &v25[32], (uint64_t)&v25[64]);
  if (SHIBYTE(v26) < 0)
  {
    operator delete(*(void **)&v25[64]);
    if ((SHIBYTE(v23) & 0x80000000) == 0)
    {
LABEL_27:
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_33;
      return;
    }
  }
  else if ((SHIBYTE(v23) & 0x80000000) == 0)
  {
    goto LABEL_27;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_33:
    v20 = (void *)v21.__r_.__value_.__r.__words[0];
LABEL_35:
    operator delete(v20);
  }
}

void sub_2108A5DF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  if (*(char *)(v35 - 57) < 0)
    operator delete(*(void **)(v35 - 80));
  _Unwind_Resume(exception_object);
}

void sub_2108A5E80(const void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  int v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  void *v21;
  char v22;
  __int128 *v23;
  __int128 *v24;
  uint64_t v25;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  __int128 v31;
  void *v32;
  std::string *v33;
  uint64_t v34;
  __int128 *v35;
  uint64_t v36;
  char v37;
  std::string v38;
  std::string v39;
  std::string v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  std::string v44;
  std::string *v45;
  __int128 v46;
  uint64_t *v47;
  __int128 *v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  if (!sub_2109970A4(0xDu)
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 143, (uint64_t)"IsNonBundleSupported()", 22, (uint64_t)"Hardware not supported", 22, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
  v42 = 0;
  v43 = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    v41 = 0;
    if (e5rt_e5_compiler_config_options_create())
    {
      sub_2108A5700(&v44);
      v6 = std::string::insert(&v44, 0, "Unable to create compiler config: ", 0x22uLL);
      v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
      v47 = (uint64_t *)v6->__r_.__value_.__r.__words[2];
      v46 = v7;
      v6->__r_.__value_.__l.__size_ = 0;
      v6->__r_.__value_.__r.__words[2] = 0;
      v6->__r_.__value_.__r.__words[0] = 0;
      sub_2108A671C(a3, a1, (uint64_t)&v46);
      goto LABEL_8;
    }
    *(_QWORD *)&v46 = &off_24CA7A228;
    *((_QWORD *)&v46 + 1) = MEMORY[0x24BE2F748];
    v47 = &v41;
    v48 = &v46;
    if (!*(_BYTE *)(a2 + 24))
      sub_2108B1AA4();
    if (!e5rt_e5_compiler_config_options_set_cache_bundle_location())
    {
      if (!e5rt_e5_compiler_create_with_config())
      {
        v22 = 1;
        v23 = v48;
        if (v48)
        {
LABEL_37:
          (*(void (**)(__int128 *))(*(_QWORD *)v23 + 48))(v23);
          v24 = v48;
          if (v48 == &v46)
          {
            v25 = 4;
            v24 = &v46;
          }
          else
          {
            if (!v48)
              goto LABEL_42;
            v25 = 5;
          }
          (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
LABEL_42:
          if ((v22 & 1) == 0)
            return;
          goto LABEL_43;
        }
LABEL_73:
        sub_2108B30F0();
      }
      sub_2108A5700(&v40);
      v19 = std::string::insert(&v40, 0, "Unable to create compiler with config: ", 0x27uLL);
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v44.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      sub_2108A671C(a3, a1, (uint64_t)&v44);
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v44.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_36:
        v22 = 0;
        v23 = v48;
        if (v48)
          goto LABEL_37;
        goto LABEL_73;
      }
      v21 = (void *)v40.__r_.__value_.__r.__words[0];
LABEL_35:
      operator delete(v21);
      goto LABEL_36;
    }
    sub_2108A5700(&v38);
    v10 = std::string::insert(&v38, 0, "Unable to set config options to cache bundle location : ", 0x38uLL);
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v39.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    v12 = std::string::append(&v39, " cache location : ", 0x12uLL);
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v40.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    v14 = *(char *)(a2 + 23);
    if (v14 >= 0)
      v15 = (const std::string::value_type *)a2;
    else
      v15 = *(const std::string::value_type **)a2;
    if (v14 >= 0)
      v16 = *(unsigned __int8 *)(a2 + 23);
    else
      v16 = *(_QWORD *)(a2 + 8);
    v17 = std::string::append(&v40, v15, v16);
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v44.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    sub_2108A671C(a3, a1, (uint64_t)&v44);
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v44.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_21:
        if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_22;
        goto LABEL_33;
      }
    }
    else if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_21;
    }
    operator delete(v40.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_22:
      if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_36;
LABEL_34:
      v21 = (void *)v38.__r_.__value_.__r.__words[0];
      goto LABEL_35;
    }
LABEL_33:
    operator delete(v39.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_36;
    goto LABEL_34;
  }
  if (e5rt_e5_compiler_create())
  {
    sub_2108A5700(&v44);
    v8 = std::string::insert(&v44, 0, "Unable to create compiler: ", 0x1BuLL);
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v47 = (uint64_t *)v8->__r_.__value_.__r.__words[2];
    v46 = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    sub_2108A671C(a3, a1, (uint64_t)&v46);
LABEL_8:
    if (SHIBYTE(v47) < 0)
    {
      operator delete((void *)v46);
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      {
LABEL_25:
        operator delete(v44.__r_.__value_.__l.__data_);
        return;
      }
    }
    else if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    {
      goto LABEL_25;
    }
    return;
  }
LABEL_43:
  if (!v42
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 184, (uint64_t)"compiler", 8, (uint64_t)"Compiler must be created before this", 36, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
  *(_QWORD *)&v46 = &off_24CA7A2A8;
  *((_QWORD *)&v46 + 1) = MEMORY[0x24BE2F790];
  v47 = &v42;
  v48 = &v46;
  v38.__r_.__value_.__r.__words[0] = 0;
  if (e5rt_e5_compiler_options_create())
  {
    sub_2108A5700(&v40);
    v26 = std::string::insert(&v40, 0, "Unable to create compiler options: ", 0x23uLL);
    v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v44.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    sub_2108A671C(a3, a1, (uint64_t)&v44);
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v44.__r_.__value_.__l.__data_);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v40.__r_.__value_.__l.__data_);
    goto LABEL_65;
  }
  v44.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24CA7A328;
  v44.__r_.__value_.__l.__size_ = MEMORY[0x24BE2F778];
  v44.__r_.__value_.__r.__words[2] = (std::string::size_type)&v38;
  v45 = &v44;
  LOBYTE(v41) = 0;
  if (e5rt_e5_compiler_is_new_compile_required())
  {
    sub_2108A5700(&v39);
    v28 = std::string::insert(&v39, 0, "Unable to check if new compile required: ", 0x29uLL);
    v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v40.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    sub_2108A671C(a3, a1, (uint64_t)&v40);
    goto LABEL_54;
  }
  if (e5rt_e5_compiler_compile())
  {
    sub_2108A5700(&v39);
    v30 = std::string::insert(&v39, 0, "Unable to create program library: ", 0x22uLL);
    v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v40.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    sub_2108A671C(a3, a1, (uint64_t)&v40);
LABEL_54:
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v40.__r_.__value_.__l.__data_);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    {
      v32 = (void *)v39.__r_.__value_.__r.__words[0];
LABEL_58:
      operator delete(v32);
      goto LABEL_59;
    }
    goto LABEL_59;
  }
  v37 = v41;
  *(_QWORD *)a3 = v43;
  *(_BYTE *)(a3 + 8) = v37;
  v39.__r_.__value_.__s.__data_[0] = 0;
  sub_2108A5A94(&v40, (char *)&unk_210A01421);
  sub_2108C4BA4(a3 + 16, &v39, (uint64_t)&v40);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
  {
    v32 = (void *)v40.__r_.__value_.__r.__words[0];
    goto LABEL_58;
  }
LABEL_59:
  if (!v45)
    sub_2108B30F0();
  (*(void (**)(std::string *))(v45->__r_.__value_.__r.__words[0] + 48))(v45);
  v33 = v45;
  if (v45 == &v44)
  {
    v34 = 4;
    v33 = &v44;
    goto LABEL_64;
  }
  if (v45)
  {
    v34 = 5;
LABEL_64:
    (*(void (**)(void))(v33->__r_.__value_.__r.__words[0] + 8 * v34))();
  }
LABEL_65:
  if (!v48)
    sub_2108B30F0();
  (*(void (**)(__int128 *))(*(_QWORD *)v48 + 48))(v48);
  v35 = v48;
  if (v48 == &v46)
  {
    v36 = 4;
    v35 = &v46;
  }
  else
  {
    if (!v48)
      return;
    v36 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v35 + 8 * v36))();
}

void sub_2108A6514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;

  if (a25 < 0)
  {
    operator delete(__p);
    sub_2108A6938(&a29);
    sub_2108A6938((_QWORD *)(v34 - 80));
    _Unwind_Resume(a1);
  }
  sub_2108A6938(&a29);
  sub_2108A6938((_QWORD *)(v34 - 80));
  _Unwind_Resume(a1);
}

void sub_2108A65C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;

  if (a37 < 0)
  {
    operator delete(__p);
    if (a28 < 0)
    {
LABEL_5:
      operator delete(a23);
      if (a21 < 0)
      {
LABEL_8:
        operator delete(a16);
        if ((a15 & 0x80000000) == 0)
LABEL_12:
          JUMPOUT(0x2108A6700);
LABEL_11:
        operator delete(a10);
        sub_2108A6938((_QWORD *)(v37 - 80));
        _Unwind_Resume(a1);
      }
LABEL_10:
      if ((a15 & 0x80000000) == 0)
        goto LABEL_12;
      goto LABEL_11;
    }
  }
  else if (a28 < 0)
  {
    goto LABEL_5;
  }
  if (a21 < 0)
    goto LABEL_8;
  goto LABEL_10;
}

void sub_2108A66A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a2)
    sub_2108ABF6C(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2108A66FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108A6938((_QWORD *)(v1 - 80));
  _Unwind_Resume(a1);
}

void sub_2108A671C(uint64_t a1, const void **a2, uint64_t a3)
{
  int v3;
  size_t v4;
  unint64_t v5;
  _BYTE *v9;
  uint64_t v10;
  const void *v11;
  std::string *v12;
  __int128 v13;
  int v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  _BYTE v19[80];
  std::string::size_type v20;

  v3 = *((char *)a2 + 23);
  if (v3 >= 0)
    v4 = *((unsigned __int8 *)a2 + 23);
  else
    v4 = (size_t)a2[1];
  v5 = v4 + 73;
  if (v4 + 73 >= 0x7FFFFFFFFFFFFFF8)
    sub_2108A4B7C();
  if (v5 <= 0x16)
  {
    v9 = &v19[73];
    qmemcpy(v19, "Error during creation of program library model with non-bundle format at'", 73);
LABEL_10:
    if (v3 >= 0)
      v11 = a2;
    else
      v11 = *a2;
    memmove(v9, v11, v4);
    goto LABEL_14;
  }
  v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17)
    v10 = v5 | 7;
  *(_QWORD *)&v19[8] = v4 + 73;
  *(_QWORD *)&v19[16] = (v10 + 1) | 0x8000000000000000;
  *(_QWORD *)v19 = operator new(v10 + 1);
  v9 = (_BYTE *)(*(_QWORD *)v19 + 73);
  qmemcpy(*(void **)v19, "Error during creation of program library model with non-bundle format at'", 73);
  if (v4)
    goto LABEL_10;
LABEL_14:
  v9[v4] = 0;
  v12 = std::string::append((std::string *)v19, ". ", 2uLL);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  *(_QWORD *)&v19[48] = *((_QWORD *)&v12->__r_.__value_.__l + 2);
  *(_OWORD *)&v19[32] = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  v14 = *(char *)(a3 + 23);
  if (v14 >= 0)
    v15 = (const std::string::value_type *)a3;
  else
    v15 = *(const std::string::value_type **)a3;
  if (v14 >= 0)
    v16 = *(unsigned __int8 *)(a3 + 23);
  else
    v16 = *(_QWORD *)(a3 + 8);
  v17 = std::string::append((std::string *)&v19[32], v15, v16);
  v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v20 = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19[64] = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  if ((v19[55] & 0x80000000) != 0)
  {
    operator delete(*(void **)&v19[32]);
    if ((v19[23] & 0x80000000) == 0)
      goto LABEL_22;
  }
  else if ((v19[23] & 0x80000000) == 0)
  {
    goto LABEL_22;
  }
  operator delete(*(void **)v19);
LABEL_22:
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  v19[32] = 5;
  sub_2108C4BA4(a1 + 16, &v19[32], (uint64_t)&v19[64]);
  if (SHIBYTE(v20) < 0)
    operator delete(*(void **)&v19[64]);
}

void sub_2108A68F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2108A6938(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = a1[3];
  if (!v2)
    sub_2108B30F0();
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
  v3 = (_QWORD *)a1[3];
  if (v3 == a1)
  {
    v4 = 4;
    v3 = a1;
    goto LABEL_6;
  }
  if (v3)
  {
    v4 = 5;
LABEL_6:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

BOOL sub_2108A69A4(uint64_t *a1)
{
  int v1;
  BOOL v2;
  unint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  size_t v11;
  void **p_dst;
  uint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  size_t v16;
  void **v17;
  int v18;
  int v19;
  void **__dst;
  size_t v23;
  int64_t v24;

  v1 = *((char *)a1 + 23);
  v2 = v1 < 0;
  v4 = (uint64_t *)*a1;
  v3 = a1[1];
  if (v1 >= 0)
    v5 = a1;
  else
    v5 = (uint64_t *)*a1;
  v6 = *((unsigned __int8 *)a1 + 23);
  if (v2)
    v7 = a1[1];
  else
    v7 = *((unsigned __int8 *)a1 + 23);
  v8 = (uint64_t)v5 - 1;
  do
  {
    v9 = v7;
    if (!v7)
      break;
    v10 = *(unsigned __int8 *)(v8 + v7--);
  }
  while (v10 != 46);
  if ((v6 & 0x80) == 0)
  {
    v3 = *((unsigned __int8 *)a1 + 23);
    v4 = a1;
    if (v9 <= v6)
      goto LABEL_12;
LABEL_35:
    sub_2108B3068();
  }
  if (v3 < v9)
    goto LABEL_35;
LABEL_12:
  v11 = v3 - v9;
  if (v3 - v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_2108A4B7C();
  if (v11 >= 0x17)
  {
    v13 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v13 = v11 | 7;
    v14 = v13 + 1;
    p_dst = (void **)operator new(v13 + 1);
    v23 = v11;
    v24 = v14 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_19;
  }
  HIBYTE(v24) = v3 - v9;
  p_dst = (void **)&__dst;
  if (v3 != v9)
LABEL_19:
    memmove(p_dst, (char *)v4 + v9, v11);
  v15 = 0;
  *((_BYTE *)p_dst + v11) = 0;
  v16 = HIBYTE(v24);
  if (v24 < 0)
    v16 = v23;
  if (v16 == 6)
  {
    v17 = __dst;
    if (v24 >= 0)
      v17 = (void **)&__dst;
    v18 = *(_DWORD *)v17;
    v19 = *((unsigned __int16 *)v17 + 2);
    v15 = v18 == 1684960610 && v19 == 25964;
  }
  if (SHIBYTE(v24) < 0)
    operator delete(__dst);
  return v15;
}

void sub_2108A6B04(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  const void **v5;
  char v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[2];
  uint64_t (**v18)();
  char v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  void *__dst[2];
  uint64_t v23;
  void *v24;
  char v25;
  char *__p;
  void *__p_8[2];
  uint64_t v28;
  std::string v29;
  _QWORD v30[3];
  _QWORD *v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v5 = (const void **)(a1 + 16);
  if (*(char *)(a1 + 39) < 0)
  {
    sub_2108B314C(__dst, *(void **)(a1 + 16), *(_QWORD *)(a1 + 24));
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)v5;
    v23 = *(_QWORD *)(a1 + 32);
  }
  LODWORD(v28) = 0;
  sub_2108C507C((uint64_t)&v29, (uint64_t)&__p);
  if ((_DWORD)v28 == -1)
    sub_2108B9060();
  v29.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
  ((void (*)(void **__return_ptr, std::string *, char **))off_24CA79CC8[v28])(&v24, &v29, &__p);
  if ((_DWORD)v28 != -1)
    ((void (*)(std::string *, char **))off_24CA79C50[v28])(&v29, &__p);
  if (sub_2108A69A4((uint64_t *)v5))
    sub_2108A5B44(v5, (uint64_t)v17);
  else
    sub_2108A5E80(v5, a2 + 48, (uint64_t)v17);
  v6 = v19;
  if (!v19)
  {
    v16 = v17[0];
    if (!v17[0]
      && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 243, (uint64_t)"espresso_library", 16, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
    v30[0] = &off_24CA7A3A8;
    v30[1] = MEMORY[0x24BE2F998];
    v30[2] = &v16;
    v31 = v30;
    v15 = 0;
    e5rt_program_library_get_num_functions();
    __p = (char *)operator new(0x38uLL);
    *(_OWORD *)__p_8 = xmmword_210A0AB60;
    strcpy(__p, "Expect alteast one function for a model but got 0");
    sub_2108A85E8((_QWORD *)a3, (const void **)__dst, (uint64_t)&__p);
    if (SHIBYTE(__p_8[1]) < 0)
      operator delete(__p);
    if (!v31)
      sub_2108B30F0();
    (*(void (**)(_QWORD *))(*v31 + 48))(v31);
    v10 = v31;
    if (v31 == v30)
    {
      v11 = 4;
      v10 = v30;
    }
    else
    {
      if (!v31)
        goto LABEL_25;
      v11 = 5;
    }
    (*(void (**)(void))(*v10 + 8 * v11))();
    goto LABEL_25;
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = &off_24CA79A00;
  *(_BYTE *)(a3 + 16) = v6;
  v7 = v21;
  *(_QWORD *)(a3 + 24) = v20;
  *(_QWORD *)(a3 + 32) = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
LABEL_25:
  v18 = &off_24CA79A00;
  v12 = v21;
  if (!v21)
    goto LABEL_29;
  v13 = (unint64_t *)&v21->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    nullsub_51(&v18);
    if ((v25 & 0x80000000) == 0)
    {
LABEL_30:
      if ((SHIBYTE(v23) & 0x80000000) == 0)
        return;
LABEL_34:
      operator delete(__dst[0]);
      return;
    }
  }
  else
  {
LABEL_29:
    nullsub_51(&v18);
    if ((v25 & 0x80000000) == 0)
      goto LABEL_30;
  }
  operator delete(v24);
  if (SHIBYTE(v23) < 0)
    goto LABEL_34;
}

void sub_2108A7F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  void *a67;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v70;

  if (a22 < 0)
    operator delete(__p);
  v70 = *v67;
  *v67 = 0;
  if (v70)
    (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
  sub_2108AB288(&a67);
  if (a24)
    (*(void (**)(uint64_t))(*(_QWORD *)a24 + 8))(a24);
  sub_2108AB288((_QWORD *)(v68 - 208));
  sub_2108AA67C(&a25);
  sub_2108AA67C(&a28);
  sub_2108AB288((_QWORD *)(v68 - 176));
  sub_2108A6938(&STACK[0x250]);
  if (a37 < 0)
    operator delete(a32);
  if (a38)
    operator delete(a38);
  sub_2108AB2FC((uint64_t)&a41);
  sub_2108AA7B8((uint64_t)&a47);
  sub_2108A6938((_QWORD *)(v68 - 136));
  sub_2108AB36C((uint64_t)&a55);
  sub_2108AB3E4((uint64_t)&a61);
  _Unwind_Resume(a1);
}

void sub_2108A85E8(_QWORD *a1, const void **a2, uint64_t a3)
{
  int v3;
  size_t v4;
  unint64_t v5;
  _BYTE *v9;
  uint64_t v10;
  const void *v11;
  std::string *v12;
  __int128 v13;
  const std::string::value_type *v14;
  const void **v15;
  const std::string::value_type *v16;
  int v17;
  const std::string::value_type *v18;
  std::string::size_type v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  __int128 v23;
  int v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  _BYTE __p[48];
  std::string::size_type v30;
  std::string v31;
  std::string v32;
  __int128 v33;
  std::string::size_type v34;

  v3 = *((char *)a2 + 23);
  if (v3 >= 0)
    v4 = *((unsigned __int8 *)a2 + 23);
  else
    v4 = (size_t)a2[1];
  v5 = v4 + 35;
  if (v4 + 35 >= 0x7FFFFFFFFFFFFFF8)
    sub_2108A4B7C();
  if (v5 <= 0x16)
  {
    v9 = &__p[35];
    qmemcpy(__p, "Error during creation of model at '", 35);
LABEL_10:
    if (v3 >= 0)
      v11 = a2;
    else
      v11 = *a2;
    memmove(v9, v11, v4);
    goto LABEL_14;
  }
  v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17)
    v10 = v5 | 7;
  *(_QWORD *)&__p[8] = v4 + 35;
  *(_QWORD *)&__p[16] = (v10 + 1) | 0x8000000000000000;
  *(_QWORD *)__p = operator new(v10 + 1);
  v9 = (_BYTE *)(*(_QWORD *)__p + 35);
  qmemcpy(*(void **)__p, "Error during creation of model at '", 35);
  if (v4)
    goto LABEL_10;
LABEL_14:
  v9[v4] = 0;
  v12 = std::string::append((std::string *)__p, "', version: ", 0xCuLL);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v30 = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p[32] = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  v16 = (const std::string::value_type *)a2[3];
  v15 = a2 + 3;
  v14 = v16;
  v17 = *((char *)v15 + 23);
  if (v17 >= 0)
    v18 = (const std::string::value_type *)v15;
  else
    v18 = v14;
  if (v17 >= 0)
    v19 = *((unsigned __int8 *)v15 + 23);
  else
    v19 = (std::string::size_type)v15[1];
  v20 = std::string::append((std::string *)&__p[32], v18, v19);
  v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  v22 = std::string::append(&v31, ". ", 2uLL);
  v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v32.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  v24 = *(char *)(a3 + 23);
  if (v24 >= 0)
    v25 = (const std::string::value_type *)a3;
  else
    v25 = *(const std::string::value_type **)a3;
  if (v24 >= 0)
    v26 = *(unsigned __int8 *)(a3 + 23);
  else
    v26 = *(_QWORD *)(a3 + 8);
  v27 = std::string::append(&v32, v25, v26);
  v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v34 = v27->__r_.__value_.__r.__words[2];
  v33 = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v32.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_28:
      if ((SHIBYTE(v30) & 0x80000000) == 0)
        goto LABEL_29;
LABEL_35:
      operator delete(*(void **)&__p[32]);
      if ((__p[23] & 0x80000000) == 0)
        goto LABEL_30;
      goto LABEL_36;
    }
  }
  else if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_28;
  }
  operator delete(v31.__r_.__value_.__l.__data_);
  if (SHIBYTE(v30) < 0)
    goto LABEL_35;
LABEL_29:
  if ((__p[23] & 0x80000000) == 0)
    goto LABEL_30;
LABEL_36:
  operator delete(*(void **)__p);
LABEL_30:
  *a1 = 0;
  v32.__r_.__value_.__s.__data_[0] = 5;
  sub_2108C4BA4((uint64_t)(a1 + 1), &v32, (uint64_t)&v33);
  if (SHIBYTE(v34) < 0)
    operator delete((void *)v33);
}

void sub_2108A8840(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t *v35;
  uint64_t v36;
  uint64_t v38;

  v38 = *v35;
  *v35 = 0;
  if (v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  if (*(char *)(v36 - 73) < 0)
    operator delete(*(void **)(v36 - 96));
  _Unwind_Resume(exception_object);
}

uint64_t sub_2108A8904(uint64_t a1)
{
  sub_2108B3438(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_2108A894C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void **sub_2108A89B4(void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 1) < 0)
          operator delete(*(v3 - 3));
        v3 -= 3;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_2108A8A24(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  const char **v13;
  int v14;
  size_t v15;
  unint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  __int128 *v21;
  std::string *v22;
  __int128 v23;
  std::string *p_p;
  std::string::size_type size;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  uint64_t v29;
  __int128 v30;
  std::string *v31;
  std::string::size_type v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  const char **v42;
  int v43;
  size_t v44;
  unint64_t v45;
  __int16 *v46;
  uint64_t v47;
  uint64_t v48;
  __int16 *v49;
  __int128 *v50;
  std::string *v51;
  __int128 v52;
  std::string *v53;
  std::string::size_type v54;
  std::string *v55;
  __int128 v56;
  std::string *v57;
  uint64_t v58;
  __int128 v59;
  std::string *v60;
  std::string::size_type v61;
  _QWORD *v62;
  std::string __p;
  _BYTE v65[30];
  __int16 v66;
  std::string v67;
  std::string v68;
  std::string v69;
  unint64_t v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  _BYTE v74[24];
  _BYTE *v75;
  uint64_t v76;

  v76 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v72 = 0;
  v69.__r_.__value_.__r.__words[0] = 0;
  e5rt_execution_stream_operation_get_num_inputs();
  e5rt_execution_stream_operation_get_num_outputs();
  v3 = 0;
  v5 = a1[5];
  v4 = a1[6];
  if (0xCF3CF3CF3CF3CF3DLL * ((v4 - v5) >> 3) || v69.__r_.__value_.__r.__words[0] != (uint64_t)(a1[9] - a1[8]) >> 5)
  {
    *(_QWORD *)v74 = operator new(0x28uLL);
    *(_OWORD *)&v74[8] = xmmword_210A0AB70;
    strcpy(*(char **)v74, "Input/output port counts doesn't match.");
    v68.__r_.__value_.__s.__data_[0] = 3;
    sub_2108C4BA4(a2, &v68, (uint64_t)v74);
    goto LABEL_6;
  }
  if (v4 != v5)
  {
    v62 = a1;
LABEL_11:
    v8 = 0;
    while (1)
    {
      sub_210997320((uint64_t)a1, v8, (uint64_t)v74);
      v72 = *(_OWORD *)v74;
      v73 = *(_QWORD *)&v74[16];
      v71 = 0;
      v9 = e5rt_execution_stream_operation_retain_input_port();
      if (v9)
        break;
      *(_QWORD *)v74 = &off_24CA7A648;
      *(_QWORD *)&v74[8] = MEMORY[0x24BE2F8E8];
      *(_QWORD *)&v74[16] = &v71;
      v75 = v74;
      e5rt_io_port_release();
      if (v75 == v74)
      {
        (*(void (**)(void))(*(_QWORD *)v74 + 32))();
        if ((SHIBYTE(v73) & 0x80000000) == 0)
          goto LABEL_58;
LABEL_57:
        operator delete((void *)v72);
        goto LABEL_58;
      }
      if (v75)
      {
        (*(void (**)(void))(*(_QWORD *)v75 + 40))();
        if (SHIBYTE(v73) < 0)
          goto LABEL_57;
        goto LABEL_58;
      }
LABEL_56:
      if (SHIBYTE(v73) < 0)
        goto LABEL_57;
LABEL_58:
      if (v9)
        return;
      if (v3 == ++v8)
        goto LABEL_69;
    }
    v70 = 0;
    e5rt_execution_stream_operation_get_num_inputs();
    v10 = v70;
    memset(v74, 0, sizeof(v74));
    if (v70)
    {
      if (v70 >> 61)
        sub_2108B327C();
      v11 = 8 * v70;
      v12 = (char *)operator new(8 * v70);
      *(_QWORD *)v74 = v12;
      *(_QWORD *)&v74[16] = &v12[8 * v10];
      bzero(v12, 8 * v10);
      v13 = (const char **)&v12[v11];
      *(_QWORD *)&v74[8] = &v12[v11];
    }
    else
    {
      v13 = 0;
      v12 = 0;
    }
    e5rt_execution_stream_operation_get_input_names();
    v14 = SHIBYTE(v73);
    if (v73 >= 0)
      v15 = HIBYTE(v73);
    else
      v15 = *((_QWORD *)&v72 + 1);
    v16 = v15 + 29;
    if (v15 + 29 > 0x7FFFFFFFFFFFFFF7)
      sub_2108A4B7C();
    if (v16 > 0x16)
    {
      v18 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v16 | 7) != 0x17)
        v18 = v16 | 7;
      v19 = v18 + 1;
      v20 = (char *)operator new(v18 + 1);
      *(_QWORD *)&v65[8] = v15 + 29;
      *(_QWORD *)&v65[16] = v19 | 0x8000000000000000;
      *(_QWORD *)v65 = v20;
      qmemcpy(v20, "Unable to retain input port: ", 29);
      v17 = v20 + 29;
      if (!v15)
      {
LABEL_34:
        v17[v15] = 0;
        v22 = std::string::append((std::string *)v65, ". Error: ", 9uLL);
        v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        v67.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        sub_2108AB750(&__p, v9 | 0x100000000);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          size = __p.__r_.__value_.__l.__size_;
        v26 = std::string::append(&v67, (const std::string::value_type *)p_p, size);
        v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
        v68.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v27;
        v26->__r_.__value_.__l.__size_ = 0;
        v26->__r_.__value_.__r.__words[2] = 0;
        v26->__r_.__value_.__r.__words[0] = 0;
        v28 = std::string::append(&v68, ". Available ports are: ", 0x17uLL);
        v30 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
        v69.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v30;
        v28->__r_.__value_.__l.__size_ = 0;
        v28->__r_.__value_.__r.__words[2] = 0;
        v28->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v68.__r_.__value_.__l.__data_);
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_42:
            if ((SHIBYTE(v67.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_43;
            goto LABEL_63;
          }
        }
        else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_42;
        }
        operator delete(__p.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v67.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_43:
          if ((v65[23] & 0x80000000) == 0)
            goto LABEL_44;
LABEL_64:
          operator delete(*(void **)v65);
LABEL_44:
          sub_2108C6760((const char **)v12, v29, v13, ", ", 2uLL, &v68);
          if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v31 = &v68;
          else
            v31 = (std::string *)v68.__r_.__value_.__r.__words[0];
          if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v32 = HIBYTE(v68.__r_.__value_.__r.__words[2]);
          else
            v32 = v68.__r_.__value_.__l.__size_;
          std::string::append(&v69, (const std::string::value_type *)v31, v32);
          if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v68.__r_.__value_.__l.__data_);
          v68.__r_.__value_.__s.__data_[0] = 3;
          sub_2108C4BA4(a2, &v68, (uint64_t)&v69);
          if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v69.__r_.__value_.__l.__data_);
            if (!v12)
              goto LABEL_55;
          }
          else if (!v12)
          {
LABEL_55:
            a1 = v62;
            goto LABEL_56;
          }
          operator delete(v12);
          goto LABEL_55;
        }
LABEL_63:
        operator delete(v67.__r_.__value_.__l.__data_);
        if ((v65[23] & 0x80000000) == 0)
          goto LABEL_44;
        goto LABEL_64;
      }
    }
    else
    {
      qmemcpy(v65, "Unable to retain input port: ", 29);
      v17 = &v65[29];
    }
    if (v14 >= 0)
      v21 = &v72;
    else
      v21 = (__int128 *)v72;
    memmove(v17, v21, v15);
    goto LABEL_34;
  }
  if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 505, (uint64_t)"params.inputs.size() >= 1", 25, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
  v7 = a1[5];
  v6 = a1[6];
  v3 = 0xCF3CF3CF3CF3CF3DLL * ((v6 - v7) >> 3);
  v62 = a1;
  if (v6 != v7)
    goto LABEL_11;
LABEL_69:
  v34 = a1[8];
  v33 = a1[9];
  if (v33 == v34)
  {
    if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 529, (uint64_t)"params.outputs.size() >= 1", 26, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
    v35 = a1[9] - a1[8];
    if (!v35)
      goto LABEL_131;
    goto LABEL_74;
  }
  v35 = v33 - v34;
  if (v35)
  {
LABEL_74:
    v36 = 0;
    v37 = v35 >> 5;
    while (1)
    {
      sub_21099751C((uint64_t)a1, v36, (uint64_t)v74);
      v72 = *(_OWORD *)v74;
      v73 = *(_QWORD *)&v74[16];
      v71 = 0;
      v38 = e5rt_execution_stream_operation_retain_output_port();
      if (v38)
        break;
      *(_QWORD *)v74 = &off_24CA7A648;
      *(_QWORD *)&v74[8] = MEMORY[0x24BE2F8E8];
      *(_QWORD *)&v74[16] = &v71;
      v75 = v74;
      e5rt_io_port_release();
      if (v75 == v74)
      {
        (*(void (**)(void))(*(_QWORD *)v74 + 32))();
        if ((SHIBYTE(v73) & 0x80000000) == 0)
          goto LABEL_122;
LABEL_121:
        operator delete((void *)v72);
        goto LABEL_122;
      }
      if (v75)
      {
        (*(void (**)(void))(*(_QWORD *)v75 + 40))();
        if (SHIBYTE(v73) < 0)
          goto LABEL_121;
        goto LABEL_122;
      }
LABEL_120:
      if (SHIBYTE(v73) < 0)
        goto LABEL_121;
LABEL_122:
      if (v38)
        return;
      if (v37 == ++v36)
        goto LABEL_131;
    }
    v70 = 0;
    e5rt_execution_stream_operation_get_num_outputs();
    v39 = v70;
    memset(v74, 0, sizeof(v74));
    if (v70)
    {
      if (v70 >> 61)
        sub_2108B327C();
      v40 = 8 * v70;
      v41 = (char *)operator new(8 * v70);
      *(_QWORD *)v74 = v41;
      *(_QWORD *)&v74[16] = &v41[8 * v39];
      bzero(v41, 8 * v39);
      v42 = (const char **)&v41[v40];
      *(_QWORD *)&v74[8] = &v41[v40];
    }
    else
    {
      v42 = 0;
      v41 = 0;
    }
    e5rt_execution_stream_operation_get_output_names();
    v43 = SHIBYTE(v73);
    if (v73 >= 0)
      v44 = HIBYTE(v73);
    else
      v44 = *((_QWORD *)&v72 + 1);
    v45 = v44 + 30;
    if (v44 + 30 > 0x7FFFFFFFFFFFFFF7)
      sub_2108A4B7C();
    if (v45 > 0x16)
    {
      v47 = (v45 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v45 | 7) != 0x17)
        v47 = v45 | 7;
      v48 = v47 + 1;
      v49 = (__int16 *)operator new(v47 + 1);
      *(_QWORD *)&v65[8] = v44 + 30;
      *(_QWORD *)&v65[16] = v48 | 0x8000000000000000;
      *(_QWORD *)v65 = v49;
      qmemcpy(v49, "Unable to retain output port: ", 30);
      v46 = v49 + 15;
      if (!v44)
      {
LABEL_97:
        *((_BYTE *)v46 + v44) = 0;
        v51 = std::string::append((std::string *)v65, ". Error: ", 9uLL);
        v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
        v67.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v52;
        v51->__r_.__value_.__l.__size_ = 0;
        v51->__r_.__value_.__r.__words[2] = 0;
        v51->__r_.__value_.__r.__words[0] = 0;
        sub_2108AB750(&__p, v38 | 0x100000000);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v53 = &__p;
        else
          v53 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v54 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v54 = __p.__r_.__value_.__l.__size_;
        v55 = std::string::append(&v67, (const std::string::value_type *)v53, v54);
        v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
        v68.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v56;
        v55->__r_.__value_.__l.__size_ = 0;
        v55->__r_.__value_.__r.__words[2] = 0;
        v55->__r_.__value_.__r.__words[0] = 0;
        v57 = std::string::append(&v68, ". Available ports are: ", 0x17uLL);
        v59 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
        v69.__r_.__value_.__r.__words[2] = v57->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v59;
        v57->__r_.__value_.__l.__size_ = 0;
        v57->__r_.__value_.__r.__words[2] = 0;
        v57->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v68.__r_.__value_.__l.__data_);
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_105:
            if ((SHIBYTE(v67.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_106;
            goto LABEL_127;
          }
        }
        else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_105;
        }
        operator delete(__p.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v67.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_106:
          if ((v65[23] & 0x80000000) == 0)
          {
LABEL_107:
            sub_2108C6760((const char **)v41, v58, v42, ", ", 2uLL, &v68);
            if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v60 = &v68;
            else
              v60 = (std::string *)v68.__r_.__value_.__r.__words[0];
            if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v61 = HIBYTE(v68.__r_.__value_.__r.__words[2]);
            else
              v61 = v68.__r_.__value_.__l.__size_;
            std::string::append(&v69, (const std::string::value_type *)v60, v61);
            if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v68.__r_.__value_.__l.__data_);
            v68.__r_.__value_.__s.__data_[0] = 3;
            sub_2108C4BA4(a2, &v68, (uint64_t)&v69);
            if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v69.__r_.__value_.__l.__data_);
            if (v41)
              operator delete(v41);
            a1 = v62;
            goto LABEL_120;
          }
LABEL_128:
          operator delete(*(void **)v65);
          goto LABEL_107;
        }
LABEL_127:
        operator delete(v67.__r_.__value_.__l.__data_);
        if ((v65[23] & 0x80000000) == 0)
          goto LABEL_107;
        goto LABEL_128;
      }
    }
    else
    {
      qmemcpy(v65, "Unable to retain output port: ", sizeof(v65));
      v46 = &v66;
    }
    if (v43 >= 0)
      v50 = &v72;
    else
      v50 = (__int128 *)v72;
    memmove(v46, v50, v44);
    goto LABEL_97;
  }
LABEL_131:
  LOBYTE(v72) = 0;
  v74[23] = 0;
  v74[0] = 0;
  sub_2108C4BA4(a2, &v72, (uint64_t)v74);
LABEL_6:
  if ((v74[23] & 0x80000000) != 0)
    operator delete(*(void **)v74);
}

void sub_2108A9400(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  uint64_t v44;

  if (*(char *)(v44 - 113) < 0)
  {
    operator delete(*(void **)(v44 - 136));
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

char **sub_2108A95EC(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0x19999999999999ALL)
      sub_2108B327C();
    v4 = (char *)operator new(160 * a2);
    *a1 = v4;
    a1[1] = v4;
    v5 = &v4[160 * a2];
    a1[2] = v5;
    do
    {
      *(_OWORD *)v4 = 0uLL;
      *((_OWORD *)v4 + 1) = 0uLL;
      *((_OWORD *)v4 + 8) = 0uLL;
      *((_OWORD *)v4 + 9) = 0uLL;
      *((_OWORD *)v4 + 6) = 0uLL;
      *((_OWORD *)v4 + 7) = 0uLL;
      *((_OWORD *)v4 + 4) = 0uLL;
      *((_OWORD *)v4 + 5) = 0uLL;
      *((_OWORD *)v4 + 2) = 0uLL;
      *((_OWORD *)v4 + 3) = 0uLL;
      *(_DWORD *)v4 = 3;
      *((_QWORD *)v4 + 1) = 0;
      *((_QWORD *)v4 + 2) = 0;
      v4[24] = 0;
      v4 += 160;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_2108A96A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  void **v13;
  _DWORD *v15;
  _DWORD *v16;
  void *v17;
  uint64_t v18;

  v15 = *v13;
  if (*v13)
  {
    v16 = v13[1];
    v17 = *v13;
    if (v16 != v15)
    {
      do
      {
        if (*((_BYTE *)v16 - 8))
        {
          v18 = *(v16 - 4);
          if ((_DWORD)v18 != -1)
            ((void (*)(char *, _DWORD *))off_24CA79850[v18])(&a13, v16 - 34);
          *(v16 - 4) = -1;
        }
        v16 -= 40;
      }
      while (v16 != v15);
      v17 = *v13;
    }
    v13[1] = v15;
    operator delete(v17);
  }
  _Unwind_Resume(exception_object);
}

void sub_2108A9724(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  const void **v5;
  const void **v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  unsigned int v18;
  int v19;
  int v20;
  size_t v21;
  unint64_t v22;
  _BYTE *v23;
  int v24;
  size_t v25;
  unint64_t v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int *v35;
  const void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  const void *v41;
  std::string *v42;
  __int128 v43;
  void **v44;
  std::string::size_type v45;
  std::string *v46;
  __int128 v47;
  int v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  _QWORD *v65;
  uint64_t v66;
  _BYTE __p[44];
  int v70;
  int v71;
  char v72;
  void *v73[2];
  unsigned __int8 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  unint64_t v83;
  _QWORD v84[3];
  _QWORD *v85;
  _BYTE v86[48];
  void **v87;
  _BYTE *v88;
  uint64_t v89;

  v89 = *MEMORY[0x24BDAC8D0];
  v6 = *(const void ***)(a1 + 64);
  v5 = *(const void ***)(a1 + 72);
  if (v6 != v5)
  {
    v9 = 0;
    while (1)
    {
      v75 = 0;
      e5rt_execution_stream_operation_retain_output_port();
      v84[0] = &off_24CA7A648;
      v84[1] = MEMORY[0x24BE2F8E8];
      v84[2] = &v75;
      v85 = v84;
      if (!a2)
        goto LABEL_20;
      v10 = *a3;
      v11 = *a3 + 160 * v9;
      if (!*(_QWORD *)(v11 + 8))
        break;
      e5rt_tensor_desc_release();
      if (*(_QWORD *)(v10 + 160 * v9 + 16))
        goto LABEL_8;
LABEL_9:
      *(_QWORD *)(v11 + 8) = 0;
      *(_QWORD *)(v11 + 16) = 0;
      *(_DWORD *)v11 = 3;
      v12 = v10 + 160 * v9;
      v14 = *(unsigned __int8 *)(v12 + 152);
      v13 = (_BYTE *)(v12 + 152);
      if (v14)
      {
        v15 = v10 + 160 * v9;
        v18 = *(_DWORD *)(v15 + 144);
        v17 = (_DWORD *)(v15 + 144);
        v16 = v18;
        if (v18 != -1)
          ((void (*)(_BYTE *, _BYTE *))off_24CA79850[v16])(__p, v13 - 128);
        *v17 = -1;
        *v13 = 0;
      }
LABEL_13:
      e5rt_io_port_retain_tensor_desc();
      v83 = 0;
      e5rt_tensor_desc_get_size();
      sub_2108B04A0();
      *(_DWORD *)(*a3 + 160 * v9) = v19;
      if (e5rt_buffer_object_alloc())
      {
        LOBYTE(v82) = 5;
        v20 = *((char *)v6 + 23);
        if (v20 >= 0)
          v21 = *((unsigned __int8 *)v6 + 23);
        else
          v21 = (size_t)v6[1];
        v22 = v21 + 41;
        if (v21 + 41 > 0x7FFFFFFFFFFFFFF7)
          sub_2108A4B7C();
        if (v22 <= 0x16)
        {
          qmemcpy(v86, "Unable to create buffer for output port: ", 41);
          v23 = &v86[41];
          goto LABEL_45;
        }
        v38 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v22 | 7) != 0x17)
          v38 = v22 | 7;
        v39 = v38 + 1;
        v40 = (char *)operator new(v38 + 1);
        *(_QWORD *)&v86[8] = v21 + 41;
        *(_QWORD *)&v86[16] = v39 | 0x8000000000000000;
        *(_QWORD *)v86 = v40;
        qmemcpy(v40, "Unable to create buffer for output port: ", 41);
        v23 = v40 + 41;
        if (v21)
        {
LABEL_45:
          if (v20 >= 0)
            v41 = v6;
          else
            v41 = *v6;
          memmove(v23, v41, v21);
        }
        v23[v21] = 0;
        v42 = std::string::append((std::string *)v86, " of size ", 9uLL);
        v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
        v87 = (void **)v42->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v86[32] = v43;
        v42->__r_.__value_.__l.__size_ = 0;
        v42->__r_.__value_.__r.__words[2] = 0;
        v42->__r_.__value_.__r.__words[0] = 0;
        sub_2108AE440(&v83);
        if ((v74 & 0x80u) == 0)
          v44 = v73;
        else
          v44 = (void **)v73[0];
        if ((v74 & 0x80u) == 0)
          v45 = v74;
        else
          v45 = (std::string::size_type)v73[1];
        v46 = std::string::append((std::string *)&v86[32], (const std::string::value_type *)v44, v45);
        v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
        *(_QWORD *)&__p[16] = *((_QWORD *)&v46->__r_.__value_.__l + 2);
        *(_OWORD *)__p = v47;
        v46->__r_.__value_.__l.__size_ = 0;
        v46->__r_.__value_.__r.__words[2] = 0;
        v46->__r_.__value_.__r.__words[0] = 0;
        sub_2108C4BA4(a5, &v82, (uint64_t)__p);
        if ((__p[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)__p);
          if ((char)v74 < 0)
            goto LABEL_61;
LABEL_57:
          if ((SHIBYTE(v87) & 0x80000000) == 0)
            goto LABEL_58;
LABEL_62:
          operator delete(*(void **)&v86[32]);
          if ((v86[23] & 0x80000000) == 0)
            goto LABEL_65;
        }
        else
        {
          if (((char)v74 & 0x80000000) == 0)
            goto LABEL_57;
LABEL_61:
          operator delete(v73[0]);
          if (SHIBYTE(v87) < 0)
            goto LABEL_62;
LABEL_58:
          if ((v86[23] & 0x80000000) == 0)
            goto LABEL_65;
        }
        v37 = *(void **)v86;
LABEL_64:
        operator delete(v37);
        goto LABEL_65;
      }
LABEL_20:
      if (e5rt_io_port_bind_buffer_object())
      {
        v86[32] = 5;
        v24 = *((char *)v6 + 23);
        if (v24 >= 0)
          v25 = *((unsigned __int8 *)v6 + 23);
        else
          v25 = (size_t)v6[1];
        v26 = v25 + 44;
        if (v25 + 44 > 0x7FFFFFFFFFFFFFF7)
          sub_2108A4B7C();
        if (v26 <= 0x16)
        {
          qmemcpy(__p, "Unable to bind output buffer to output port ", sizeof(__p));
          v27 = &v70;
          goto LABEL_36;
        }
        v33 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v26 | 7) != 0x17)
          v33 = v26 | 7;
        v34 = v33 + 1;
        v35 = (int *)operator new(v33 + 1);
        *(_QWORD *)&__p[8] = v25 + 44;
        *(_QWORD *)&__p[16] = v34 | 0x8000000000000000;
        *(_QWORD *)__p = v35;
        qmemcpy(v35, "Unable to bind output buffer to output port ", 44);
        v27 = v35 + 11;
        if (v25)
        {
LABEL_36:
          if (v24 >= 0)
            v36 = v6;
          else
            v36 = *v6;
          memmove(v27, v36, v25);
        }
        *((_BYTE *)v27 + v25) = 0;
        sub_2108C4BA4(a5, &v86[32], (uint64_t)__p);
        if ((__p[23] & 0x80000000) != 0)
        {
          v37 = *(void **)__p;
          goto LABEL_64;
        }
LABEL_65:
        v48 = 0;
        v49 = v85;
        if (!v85)
          goto LABEL_120;
        goto LABEL_107;
      }
      if (a2)
      {
        v28 = *a3;
        v29 = *a3 + 160 * v9;
        if (*(_DWORD *)v29 == 2)
        {
          v30 = *(_OWORD *)v29;
          *(_QWORD *)&__p[16] = *(_QWORD *)(v29 + 16);
          *(_OWORD *)__p = v30;
          v31 = v28 + 160 * v9;
          __p[24] = 0;
          v72 = 0;
          if (*(_BYTE *)(v31 + 152))
          {
            v71 = -1;
            v32 = *(unsigned int *)(v28 + 160 * v9 + 144);
            if ((_DWORD)v32 != -1)
            {
              ((void (*)(_BYTE *, _BYTE *, uint64_t))off_24CA79868[v32])(v86, &__p[24], v31 + 24);
              v71 = v32;
            }
            v72 = 1;
          }
          goto LABEL_103;
        }
        v73[0] = 0;
        e5rt_tensor_desc_retain_dtype();
        *(_QWORD *)&v86[32] = &off_24CA79900;
        *(_QWORD *)&v86[40] = MEMORY[0x24BE2FA68];
        v87 = v73;
        v88 = &v86[32];
        v82 = 0;
        v83 = 0;
        e5rt_tensor_desc_get_shape();
        v81 = 0;
        e5rt_tensor_desc_dtype_get_num_components();
        v80 = 0;
        if (v81 != 1 && v81 != 4 && v81 != 2)
        {
          sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 1045, (uint64_t)&unk_210A01421, 0, (uint64_t)"Number of components not supported yet", 38, (void (*)(void **))sub_2109EDDB4);
          abort();
        }
        if (e5rt_tensor_desc_dtype_create()
          && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 1077, (uint64_t)"ret == E5RT_ERROR_CODE_OK", 25, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
        {
          abort();
        }
        *(_QWORD *)v86 = &off_24CA79900;
        *(_QWORD *)&v86[8] = MEMORY[0x24BE2FA68];
        *(_QWORD *)&v86[16] = &v80;
        *(_QWORD *)&v86[24] = v86;
        v79 = 0;
        if (e5rt_tensor_desc_create()
          && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 1084, (uint64_t)"ret_tensor == E5RT_ERROR_CODE_OK", 32, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
        {
          abort();
        }
        v78 = 0;
        v77 = 0;
        e5rt_tensor_desc_get_size();
        e5rt_tensor_desc_get_size();
        if (*(_DWORD *)v29 == 1)
        {
          if (v83)
          {
            if (v83 == 4 && (*(_BYTE *)(v82 + 24) & 0x1F) == 0)
            {
              if (2 * v77 != v78)
                goto LABEL_88;
            }
            else
            {
              if (v83 < 2)
              {
                v50 = 0;
                v51 = 1;
                goto LABEL_85;
              }
              v50 = v83 & 0xFFFFFFFFFFFFFFFELL;
              v52 = (_QWORD *)(v82 + 8);
              v53 = v83 & 0xFFFFFFFFFFFFFFFELL;
              v54 = 1;
              v55 = 1;
              do
              {
                v54 *= *(v52 - 1);
                v55 *= *v52;
                v52 += 2;
                v53 -= 2;
              }
              while (v53);
              v51 = v55 * v54;
              if (v83 != v50)
              {
LABEL_85:
                v56 = v83 - v50;
                v57 = (uint64_t *)(v82 + 8 * v50);
                do
                {
                  v58 = *v57++;
                  v51 *= v58;
                  --v56;
                }
                while (v56);
              }
              if (4 * v51 != v78)
              {
LABEL_88:
                if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 1092, (uint64_t)"detail::IsValidShape(input_rank, input_shape, input_tensor_size, output_tensor_size)", 84, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
                {
                  abort();
                }
              }
            }
          }
          else if (v78 != 4)
          {
            goto LABEL_88;
          }
        }
        v76 = 0;
        if (e5rt_buffer_object_alloc()
          && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 1099, (uint64_t)"mem_ret == E5RT_ERROR_CODE_OK", 29, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
        {
          abort();
        }
        *(_DWORD *)__p = 2;
        *(_QWORD *)&__p[8] = v79;
        *(_QWORD *)&__p[16] = v76;
        __p[24] = 0;
        v72 = 0;
        if (!*(_QWORD *)&v86[24])
          sub_2108B30F0();
        (*(void (**)(_QWORD))(**(_QWORD **)&v86[24] + 48))(*(_QWORD *)&v86[24]);
        v59 = *(_QWORD **)&v86[24];
        if (*(_BYTE **)&v86[24] == v86)
        {
          v59 = v86;
          v60 = 4;
LABEL_96:
          (*(void (**)(void))(*v59 + 8 * v60))();
        }
        else if (*(_QWORD *)&v86[24])
        {
          v60 = 5;
          goto LABEL_96;
        }
        if (!v88)
          sub_2108B30F0();
        (*(void (**)(_BYTE *))(*(_QWORD *)v88 + 48))(v88);
        v61 = v88;
        if (v88 == &v86[32])
        {
          v61 = &v86[32];
          v62 = 4;
LABEL_102:
          (*(void (**)(void))(*v61 + 8 * v62))();
        }
        else if (v88)
        {
          v62 = 5;
          goto LABEL_102;
        }
LABEL_103:
        v63 = *a4 + 160 * v9;
        v64 = *(_OWORD *)__p;
        *(_QWORD *)(v63 + 16) = *(_QWORD *)&__p[16];
        *(_OWORD *)v63 = v64;
        sub_2108C4A68(v63 + 24, (uint64_t)&__p[24]);
        if (v72 && v71 != -1)
          ((void (*)(_BYTE *, _BYTE *))off_24CA79850[v71])(&v86[32], &__p[24]);
      }
      v48 = 1;
      v49 = v85;
      if (!v85)
LABEL_120:
        sub_2108B30F0();
LABEL_107:
      (*(void (**)(_QWORD *))(*v49 + 48))(v49);
      v65 = v85;
      if (v85 == v84)
      {
        v65 = v84;
        v66 = 4;
        goto LABEL_111;
      }
      if (v85)
      {
        v66 = 5;
LABEL_111:
        (*(void (**)(void))(*v65 + 8 * v66))();
      }
      if (!v48)
        return;
      v6 += 4;
      ++v9;
      if (v6 == v5)
        goto LABEL_117;
    }
    if (!*(_QWORD *)(v10 + 160 * v9 + 16))
      goto LABEL_13;
LABEL_8:
    e5rt_buffer_object_release();
    goto LABEL_9;
  }
LABEL_117:
  v86[32] = 0;
  __p[23] = 0;
  __p[0] = 0;
  sub_2108C4BA4(a5, &v86[32], (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
}

void sub_2108AA0DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36)
{
  uint64_t v36;

  sub_2108A6938((_QWORD *)(v36 - 160));
  sub_2108A6938((_QWORD *)(v36 - 128));
  sub_2108A6938((_QWORD *)(v36 - 192));
  _Unwind_Resume(a1);
}

void sub_2108AA218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  uint64_t v43;

  if (a20 < 0)
  {
    operator delete(__p);
    if (a43 < 0)
    {
LABEL_5:
      operator delete(a38);
      if (*(char *)(v43 - 105) < 0)
      {
LABEL_8:
        operator delete(*(void **)(v43 - 128));
        if ((*(char *)(v43 - 137) & 0x80000000) == 0)
LABEL_12:
          JUMPOUT(0x2108AA308);
LABEL_11:
        operator delete(*(void **)(v43 - 160));
        sub_2108A6938((_QWORD *)(v43 - 192));
        _Unwind_Resume(a1);
      }
LABEL_10:
      if ((*(char *)(v43 - 137) & 0x80000000) == 0)
        goto LABEL_12;
      goto LABEL_11;
    }
  }
  else if (a43 < 0)
  {
    goto LABEL_5;
  }
  if (*(char *)(v43 - 105) < 0)
    goto LABEL_8;
  goto LABEL_10;
}

void sub_2108AA2BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (a20 < 0)
  {
    operator delete(__p);
    sub_2108A6938((_QWORD *)(v20 - 192));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x2108AA308);
}

void sub_2108AA2F4(void *a1, int a2)
{
  if (a2)
    sub_2108ABF6C(a1);
  JUMPOUT(0x2108AA310);
}

void sub_2108AA304(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108A6938((_QWORD *)(v1 - 192));
  _Unwind_Resume(a1);
}

_QWORD *sub_2108AA318(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v4 = (_QWORD *)a2[3];
  if (v4)
  {
    if (v4 == a2)
    {
      v11 = v10;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v10);
    }
    else
    {
      v11 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 16))(v4);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_2108B3950(v10, a1);
  v5 = v11;
  if (v11 == v10)
  {
    v6 = 4;
    v5 = v10;
  }
  else
  {
    if (!v11)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v10[0] = &unk_24CA79A40;
  v10[1] = nullsub_3;
  v11 = v10;
  sub_2108B3950(v10, a2);
  v7 = v11;
  if (v11 == v10)
  {
    v8 = 4;
    v7 = v10;
    goto LABEL_15;
  }
  if (v11)
  {
    v8 = 5;
LABEL_15:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return a1;
}

void sub_2108AA458(_QWORD *a1)
{
  void **v2;
  uint64_t v3;
  uint64_t i;
  void **v5;

  if (a1[3])
  {
    v2 = (void **)a1[2];
    if (v2)
    {
      do
      {
        v5 = (void **)*v2;
        sub_2108B3438((uint64_t)(v2 + 5));
        if (*((char *)v2 + 39) < 0)
          operator delete(v2[2]);
        operator delete(v2);
        v2 = v5;
      }
      while (v5);
    }
    a1[2] = 0;
    v3 = a1[1];
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(*a1 + 8 * i) = 0;
    }
    a1[3] = 0;
  }
}

void sub_2108AA4E4(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;

  v6 = (_QWORD *)operator new();
  v8 = *a1;
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = 0;
  a1[1] = 0;
  *v6 = &off_24CA797F0;
  v6[1] = 0;
  sub_2108B59B8((uint64_t)(v6 + 2), a2);
  v6[24] = v8;
  v6[25] = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    *a3 = v6;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  else
  {
    *a3 = v6;
  }
}

void sub_2108AA5D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;

  sub_21099596C(v9);
  sub_2108A894C((uint64_t)&a9);
  MEMORY[0x212BCC6FC](v9, 0x10E1C40C03DF36ALL);
  _Unwind_Resume(a1);
}

uint64_t sub_2108AA60C@<X0>(uint64_t *a1@<X0>, __int128 *a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v6;
  uint64_t result;

  v6 = operator new(0xE8uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_24CA7A5F8;
  result = sub_21098D054((uint64_t)(v6 + 3), a1, a2);
  *a3 = result;
  a3[1] = (uint64_t)v6;
  return result;
}

void sub_2108AA664(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void **sub_2108AA67C(void **a1)
{
  _DWORD *v2;
  _DWORD *v3;
  void *v4;
  uint64_t v5;
  char v7;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((_BYTE *)v3 - 8))
        {
          v5 = *(v3 - 4);
          if ((_DWORD)v5 != -1)
            ((void (*)(char *, _DWORD *))off_24CA79850[v5])(&v7, v3 - 34);
          *(v3 - 4) = -1;
        }
        v3 -= 40;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_2108AA724(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  char v7;

  v2 = *(_QWORD **)(a1 + 16);
  while (v2)
  {
    v3 = v2;
    v2 = (_QWORD *)*v2;
    if (*((_BYTE *)v3 + 176))
    {
      v4 = *((unsigned int *)v3 + 42);
      if ((_DWORD)v4 != -1)
        ((void (*)(char *, _QWORD *))off_24CA79850[v4])(&v7, v3 + 6);
    }
    operator delete(v3);
  }
  v5 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v5)
    operator delete(v5);
  return a1;
}

uint64_t sub_2108AA7B8(uint64_t a1)
{
  void **v2;
  void *v3;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void sub_2108AA820(void *lpsrc@<X1>, _QWORD *a2@<X0>, uint64_t a3@<X8>)
{
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  const void *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  const void **v13;
  unsigned __int8 *v14;
  __int128 *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  char v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  const void **v29;
  int v30;
  size_t v31;
  unint64_t v32;
  _BYTE *v33;
  const char *last_error_message;
  size_t v35;
  std::string::size_type v36;
  std::string *v37;
  int v38;
  size_t v39;
  unint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  __int128 *v43;
  std::string *v44;
  __int128 v45;
  uint64_t v46;
  const void *v47;
  void *v48;
  _QWORD *v49;
  _BYTE *v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  std::string *v54;
  __int128 v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  __int128 *v63;
  __int128 *v64;
  void *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  std::string v71;
  char v72;
  _BYTE v73[80];
  void *v74;
  __int128 *v75;
  void *v76[2];
  std::string::size_type v77;
  std::__shared_weak_count *v78;
  void *__p;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;

  v5 = (unsigned __int8 *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24CA82B30, (const struct __class_type_info *)&unk_24CA82978, 0);
  if (!v5)
    goto LABEL_141;
  v6 = v5;
  v7 = (const void *)a2[1];
  if (!v7)
    goto LABEL_19;
  v8 = (unsigned __int8 *)__dynamic_cast(v7, (const struct __class_type_info *)&unk_24CA82B30, (const struct __class_type_info *)&unk_24CA82978, 0);
  if (!v8)
LABEL_141:
    __cxa_bad_cast();
  v9 = v8[31];
  if ((v9 & 0x80u) == 0)
    v10 = v8[31];
  else
    v10 = *((_QWORD *)v8 + 2);
  v11 = v6[31];
  v12 = (char)v11;
  if ((v11 & 0x80u) != 0)
    v11 = *((_QWORD *)v6 + 2);
  if (v10 != v11)
    goto LABEL_19;
  v13 = (const void **)(v8 + 8);
  if (v12 >= 0)
    v14 = v6 + 8;
  else
    v14 = (unsigned __int8 *)*((_QWORD *)v6 + 1);
  if ((v9 & 0x80) != 0)
  {
    if (memcmp(*v13, v14, *((_QWORD *)v8 + 2)))
      goto LABEL_19;
  }
  else if (v8[31])
  {
    while (*(unsigned __int8 *)v13 == *v14)
    {
      v13 = (const void **)((char *)v13 + 1);
      ++v14;
      if (!--v9)
        goto LABEL_47;
    }
LABEL_19:
    v15 = (__int128 *)(v6 + 8);
    sub_2108B3FF0((uint64_t)&__p, (uint64_t *)(a2[24] + 8));
    if (v85)
    {
      v16 = v83;
      v17 = v84;
      if (v83 != v84)
      {
        v18 = v6[31];
        if ((v18 & 0x80u) == 0)
          v19 = v6[31];
        else
          v19 = *((_QWORD *)v6 + 2);
        if ((v18 & 0x80u) == 0)
          v20 = v6 + 8;
        else
          v20 = (unsigned __int8 *)*((_QWORD *)v6 + 1);
        while (1)
        {
          v21 = *(unsigned __int8 *)(v16 + 23);
          if ((v21 & 0x80u) == 0)
            v22 = *(unsigned __int8 *)(v16 + 23);
          else
            v22 = *(_QWORD *)(v16 + 8);
          if (v22 == v19)
          {
            if ((v21 & 0x80) != 0)
            {
              if (!memcmp(*(const void **)v16, v20, *(_QWORD *)(v16 + 8)))
                break;
            }
            else
            {
              if (!*(_BYTE *)(v16 + 23))
                break;
              v23 = 0;
              while (*(unsigned __int8 *)(v16 + v23) == v20[v23])
              {
                if (v21 == ++v23)
                  goto LABEL_38;
              }
            }
          }
          v16 += 24;
          if (v16 == v17)
            goto LABEL_61;
        }
      }
LABEL_38:
      if (v16 != v17)
      {
        v24 = sub_2108C5E44(a2 + 2, (uint64_t)(v6 + 8));
        if (!v24)
          sub_2108B307C("unordered_map::at: key not found");
        if (!v24[5]
          && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 439, (uint64_t)"espresso_stream_op != nullptr", 29, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
        {
          abort();
        }
        sub_2108A8A24(&__p, (uint64_t)v76);
        v25 = (char)v76[1];
        if (LOBYTE(v76[1]))
        {
          *(_QWORD *)a3 = &off_24CA79A00;
          *(_BYTE *)(a3 + 8) = v25;
          v26 = v78;
          *(_QWORD *)(a3 + 16) = v77;
          *(_QWORD *)(a3 + 24) = v26;
          if (v26)
          {
            p_shared_owners = (unint64_t *)&v26->__shared_owners_;
            do
              v28 = __ldxr(p_shared_owners);
            while (__stxr(v28 + 1, p_shared_owners));
          }
LABEL_129:
          v76[0] = &off_24CA79A00;
          v67 = v78;
          if (v78)
          {
            v68 = (unint64_t *)&v78->__shared_owners_;
            do
              v69 = __ldaxr(v68);
            while (__stlxr(v69 - 1, v68));
            if (!v69)
            {
              ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
              std::__shared_weak_count::__release_weak(v67);
            }
          }
          nullsub_51(v76);
          goto LABEL_135;
        }
        sub_2108AB444(a2);
        sub_2108A95EC((char **)&v74, (v82 - v81) >> 5);
        sub_2108A95EC((char **)&v73[64], (v82 - v81) >> 5);
        sub_2108A9724((uint64_t)&__p, 1, (uint64_t *)&v74, &v73[64], (uint64_t)&v73[32]);
        if (v73[40])
        {
          v71.__r_.__value_.__s.__data_[0] = 5;
          v29 = *(const void ***)&v73[48];
          v30 = *(char *)(*(_QWORD *)&v73[48] + 23);
          if (v30 >= 0)
            v31 = *(unsigned __int8 *)(*(_QWORD *)&v73[48] + 23);
          else
            v31 = *(_QWORD *)(*(_QWORD *)&v73[48] + 8);
          v32 = v31 + 53;
          if (v31 + 53 > 0x7FFFFFFFFFFFFFF7)
            sub_2108A4B7C();
          if (v32 > 0x16)
          {
            v46 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v32 | 7) != 0x17)
              v46 = v32 | 7;
            *(_QWORD *)&v73[8] = v31 + 53;
            *(_QWORD *)&v73[16] = (v46 + 1) | 0x8000000000000000;
            *(_QWORD *)v73 = operator new(v46 + 1);
            qmemcpy(*(void **)v73, "Unable to bind output buffers in this configuration: ", 53);
            v33 = (_BYTE *)(*(_QWORD *)v73 + 53);
            if (!v31)
              goto LABEL_86;
          }
          else
          {
            qmemcpy(v73, "Unable to bind output buffers in this configuration: ", 53);
            v33 = &v73[53];
          }
          if (v30 >= 0)
            v47 = v29;
          else
            v47 = *v29;
          memmove(v33, v47, v31);
LABEL_86:
          v33[v31] = 0;
          sub_2108C4BA4(a3, &v71, (uint64_t)v73);
LABEL_87:
          if ((v73[23] & 0x80000000) == 0)
            goto LABEL_104;
          v48 = *(void **)v73;
LABEL_103:
          operator delete(v48);
LABEL_104:
          *(_QWORD *)&v73[32] = &off_24CA79A00;
          v56 = *(std::__shared_weak_count **)&v73[56];
          if (*(_QWORD *)&v73[56])
          {
            v57 = (unint64_t *)(*(_QWORD *)&v73[56] + 8);
            do
              v58 = __ldaxr(v57);
            while (__stlxr(v58 - 1, v57));
            if (!v58)
            {
              ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
              std::__shared_weak_count::__release_weak(v56);
            }
          }
          nullsub_51(&v73[32]);
          v59 = *(_QWORD *)&v73[64];
          if (*(_QWORD *)&v73[64])
          {
            v60 = *(_QWORD *)&v73[72];
            v61 = *(void **)&v73[64];
            if (*(_QWORD *)&v73[72] != *(_QWORD *)&v73[64])
            {
              do
              {
                if (*(_BYTE *)(v60 - 8))
                {
                  v62 = *(unsigned int *)(v60 - 16);
                  if ((_DWORD)v62 != -1)
                    ((void (*)(_BYTE *, uint64_t))off_24CA79850[v62])(&v73[32], v60 - 136);
                  *(_DWORD *)(v60 - 16) = -1;
                }
                v60 -= 160;
              }
              while (v60 != v59);
              v61 = *(void **)&v73[64];
            }
            *(_QWORD *)&v73[72] = v59;
            operator delete(v61);
          }
          v63 = (__int128 *)v74;
          if (v74)
          {
            v64 = v75;
            v65 = v74;
            if (v75 != v74)
            {
              do
              {
                if (*((_BYTE *)v64 - 8))
                {
                  v66 = *((unsigned int *)v64 - 4);
                  if ((_DWORD)v66 != -1)
                    ((void (*)(_BYTE *, char *))off_24CA79850[v66])(&v73[32], (char *)v64 - 136);
                  *((_DWORD *)v64 - 4) = -1;
                }
                v64 -= 10;
              }
              while (v64 != v63);
              v65 = v74;
            }
            v75 = v63;
            operator delete(v65);
          }
          goto LABEL_129;
        }
        if (!e5rt_execution_stream_operation_prepare_op_for_encode())
        {
          if (a2 + 13 != &v74)
            sub_2108B48DC(a2 + 13, (__int128 *)v74, v75, 0xCCCCCCCCCCCCCCCDLL * (((char *)v75 - (_BYTE *)v74) >> 5));
          if (a2 + 16 != (_QWORD *)&v73[64])
            sub_2108B48DC(a2 + 16, *(__int128 **)&v73[64], *(__int128 **)&v73[72], 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)&v73[72] - *(_QWORD *)&v73[64]) >> 5));
          v49 = (_QWORD *)operator new();
          *v49 = off_24CA82900;
          v50 = v49 + 1;
          if ((char)v6[31] < 0)
          {
            sub_2108B314C(v50, *((void **)v6 + 1), *((_QWORD *)v6 + 2));
          }
          else
          {
            v51 = *v15;
            v49[3] = *((_QWORD *)v6 + 3);
            *(_OWORD *)v50 = v51;
          }
          v70 = a2[1];
          a2[1] = v49;
          if (v70)
            (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
          v71.__r_.__value_.__s.__data_[0] = 0;
          v73[23] = 0;
          v73[0] = 0;
          sub_2108C4BA4(a3, &v71, (uint64_t)v73);
          goto LABEL_87;
        }
        v72 = 6;
        last_error_message = (const char *)e5rt_get_last_error_message();
        v35 = strlen(last_error_message);
        if (v35 > 0x7FFFFFFFFFFFFFF7)
          sub_2108A4B7C();
        v36 = v35;
        if (v35 >= 0x17)
        {
          v52 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v35 | 7) != 0x17)
            v52 = v35 | 7;
          v53 = v52 + 1;
          v37 = (std::string *)operator new(v52 + 1);
          v71.__r_.__value_.__l.__size_ = v36;
          v71.__r_.__value_.__r.__words[2] = v53 | 0x8000000000000000;
          v71.__r_.__value_.__r.__words[0] = (std::string::size_type)v37;
        }
        else
        {
          *((_BYTE *)&v71.__r_.__value_.__s + 23) = v35;
          v37 = &v71;
          if (!v35)
            goto LABEL_99;
        }
        memmove(v37, last_error_message, v36);
LABEL_99:
        v37->__r_.__value_.__s.__data_[v36] = 0;
        v54 = std::string::insert(&v71, 0, " Unable to load this espresso function for execution: ", 0x36uLL);
        v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
        *(_QWORD *)&v73[16] = *((_QWORD *)&v54->__r_.__value_.__l + 2);
        *(_OWORD *)v73 = v55;
        v54->__r_.__value_.__l.__size_ = 0;
        v54->__r_.__value_.__r.__words[2] = 0;
        v54->__r_.__value_.__r.__words[0] = 0;
        sub_2108C4BA4(a3, &v72, (uint64_t)v73);
        if ((v73[23] & 0x80000000) != 0)
          operator delete(*(void **)v73);
        if ((SHIBYTE(v71.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_104;
        v48 = (void *)v71.__r_.__value_.__r.__words[0];
        goto LABEL_103;
      }
    }
LABEL_61:
    LOBYTE(v74) = 3;
    v38 = (char)v6[31];
    if (v38 >= 0)
      v39 = v6[31];
    else
      v39 = *((_QWORD *)v6 + 2);
    v40 = v39 + 46;
    if (v39 + 46 > 0x7FFFFFFFFFFFFFF7)
      sub_2108A4B7C();
    if (v40 > 0x16)
    {
      v42 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v40 | 7) != 0x17)
        v42 = v40 | 7;
      *(_QWORD *)&v73[40] = v39 + 46;
      *(_QWORD *)&v73[48] = (v42 + 1) | 0x8000000000000000;
      *(_QWORD *)&v73[32] = operator new(v42 + 1);
      qmemcpy(*(void **)&v73[32], "Unable to find the name of the configuration '", 46);
      v41 = (_BYTE *)(*(_QWORD *)&v73[32] + 46);
      if (!v39)
      {
LABEL_74:
        v41[v39] = 0;
        v44 = std::string::append((std::string *)&v73[32], "'.", 2uLL);
        v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
        v77 = v44->__r_.__value_.__r.__words[2];
        *(_OWORD *)v76 = v45;
        v44->__r_.__value_.__l.__size_ = 0;
        v44->__r_.__value_.__r.__words[2] = 0;
        v44->__r_.__value_.__r.__words[0] = 0;
        sub_2108C4BA4(a3, &v74, (uint64_t)v76);
        if (SHIBYTE(v77) < 0)
        {
          operator delete(v76[0]);
          if ((v73[55] & 0x80000000) != 0)
LABEL_78:
            operator delete(*(void **)&v73[32]);
        }
        else if ((v73[55] & 0x80000000) != 0)
        {
          goto LABEL_78;
        }
LABEL_135:
        sub_2108B55B4((uint64_t)&__p);
        return;
      }
    }
    else
    {
      qmemcpy(&v73[32], "Unable to find the name of the configuration '", 46);
      v41 = &v73[78];
    }
    if (v38 >= 0)
      v43 = v15;
    else
      v43 = *(__int128 **)v15;
    memmove(v41, v43, v39);
    goto LABEL_74;
  }
LABEL_47:
  LOBYTE(v76[0]) = 0;
  __p = operator new(0x38uLL);
  v80 = xmmword_210A0AB80;
  strcpy((char *)__p, "The model is already running in this configuration.");
  sub_2108C4BA4(a3, v76, (uint64_t)&__p);
  if (SHIBYTE(v80) < 0)
    operator delete(__p);
}

void sub_2108AB0E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  uint64_t v49;
  uint64_t v51;

  v51 = nullsub_51(v49);
  MEMORY[0x212BCC6FC](v51, 0x1093C402D7449D9);
  sub_2108AB288(&a23);
  sub_2108AA67C(&a30);
  sub_2108AA67C(&a33);
  sub_2108AB288(&a36);
  sub_2108B55B4((uint64_t)&a44);
  _Unwind_Resume(a1);
}

_QWORD *sub_2108AB210(_QWORD *a1, __int128 *a2)
{
  _QWORD *v3;
  __int128 v4;

  *a1 = off_24CA82900;
  v3 = a1 + 1;
  if (*((char *)a2 + 23) < 0)
  {
    sub_2108B314C(v3, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    v3[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)v3 = v4;
  }
  return a1;
}

void sub_2108AB274(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_51(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2108AB288(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24CA79A00;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  return nullsub_51();
}

uint64_t sub_2108AB2FC(uint64_t a1)
{
  void **v2;
  void *v3;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (void **)*v2;
      sub_2108B3438((uint64_t)(v2 + 5));
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t sub_2108AB36C(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)(a1 + 16) = &off_24CA79A00;
  v2 = a1 + 16;
  v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  nullsub_51(v2);
  return a1;
}

uint64_t sub_2108AB3E4(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_2108AB43C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 192);
}

void sub_2108AB444(_QWORD *a1)
{
  uint64_t *i;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t j;
  _QWORD *k;
  uint64_t *m;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;

  for (i = (uint64_t *)a1[10]; i; i = (uint64_t *)*i)
  {
    if (i[4])
      e5rt_tensor_desc_release();
    if (i[5])
      e5rt_buffer_object_release();
    i[4] = 0;
    i[5] = 0;
    *((_DWORD *)i + 6) = 3;
    if (*((_BYTE *)i + 176))
    {
      v3 = *((unsigned int *)i + 42);
      if ((_DWORD)v3 != -1)
        ((void (*)(char *, uint64_t *))off_24CA79850[v3])(&v23, i + 6);
      *((_DWORD *)i + 42) = -1;
      *((_BYTE *)i + 176) = 0;
    }
  }
  if (a1[11])
  {
    v4 = (_QWORD *)a1[10];
    while (v4)
    {
      v5 = v4;
      v4 = (_QWORD *)*v4;
      if (*((_BYTE *)v5 + 176))
      {
        v6 = *((unsigned int *)v5 + 42);
        if ((_DWORD)v6 != -1)
          ((void (*)(char *, _QWORD *))off_24CA79850[v6])(&v22, v5 + 6);
      }
      operator delete(v5);
    }
    a1[10] = 0;
    v7 = a1[9];
    if (v7)
    {
      for (j = 0; j != v7; ++j)
        *(_QWORD *)(a1[8] + 8 * j) = 0;
    }
    a1[11] = 0;
  }
  for (k = (_QWORD *)a1[21]; k; k = (_QWORD *)*k)
  {
    for (m = (uint64_t *)k[12]; m; m = (uint64_t *)*m)
    {
      if (m[4])
        e5rt_tensor_desc_release();
      if (m[5])
        e5rt_buffer_object_release();
      m[4] = 0;
      m[5] = 0;
      *((_DWORD *)m + 6) = 3;
      if (*((_BYTE *)m + 176))
      {
        v11 = *((unsigned int *)m + 42);
        if ((_DWORD)v11 != -1)
          ((void (*)(char *, uint64_t *))off_24CA79850[v11])(&v24, m + 6);
        *((_DWORD *)m + 42) = -1;
        *((_BYTE *)m + 176) = 0;
      }
    }
  }
  v12 = a1[13];
  v13 = a1[14];
  v14 = a1[16];
  v15 = a1[17];
  if (v12 != v13 || v14 != v15)
  {
    v17 = 0;
    do
    {
      if (*(_DWORD *)(v12 + v17) != 2)
      {
        if (*(_QWORD *)(v14 + v17 + 8))
          e5rt_tensor_desc_release();
        if (*(_QWORD *)(v14 + v17 + 16))
          e5rt_buffer_object_release();
        *(_QWORD *)(v14 + v17 + 8) = 0;
        *(_QWORD *)(v14 + v17 + 16) = 0;
        v18 = v14 + v17;
        *(_DWORD *)(v14 + v17) = 3;
        if (*(_BYTE *)(v14 + v17 + 152))
        {
          v19 = *(unsigned int *)(v18 + 144);
          if ((_DWORD)v19 != -1)
            ((void (*)(char *, uint64_t))off_24CA79850[v19])(&v25, v18 + 24);
          *(_DWORD *)(v18 + 144) = -1;
          *(_BYTE *)(v18 + 152) = 0;
        }
      }
      if (*(_QWORD *)(v12 + v17 + 8))
        e5rt_tensor_desc_release();
      if (*(_QWORD *)(v12 + v17 + 16))
        e5rt_buffer_object_release();
      *(_QWORD *)(v12 + v17 + 8) = 0;
      *(_QWORD *)(v12 + v17 + 16) = 0;
      v20 = v12 + v17;
      *(_DWORD *)(v12 + v17) = 3;
      if (*(_BYTE *)(v12 + v17 + 152))
      {
        v21 = *(unsigned int *)(v20 + 144);
        if ((_DWORD)v21 != -1)
          ((void (*)(char *, uint64_t))off_24CA79850[v21])(&v26, v20 + 24);
        *(_DWORD *)(v20 + 144) = -1;
        *(_BYTE *)(v20 + 152) = 0;
      }
      v17 += 160;
    }
    while (v17 + v12 != v13 || v17 + v14 != v15);
  }
}

uint64_t sub_2108AB740(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

void sub_2108AB750(std::string *a1, uint64_t a2)
{
  uint64_t v3;
  const char *v4;
  size_t v5;
  std::string::size_type v6;
  std::string *p_dst;
  uint64_t v8;
  uint64_t v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  const char *last_error_message;
  size_t v17;
  size_t v18;
  void *p_p;
  uint64_t v20;
  uint64_t v21;
  const std::string::value_type *v22;
  std::string::size_type v23;
  std::string *v24;
  void *__p;
  size_t v26;
  int64_t v27;
  std::string __dst;
  std::string v29;
  std::string v30;
  std::string v31;

  v3 = a2 & 0xFF00000000;
  if ((a2 & 0xFF00000000) == 0)
  {
    *((_BYTE *)&v30.__r_.__value_.__s + 23) = 0;
    v30.__r_.__value_.__s.__data_[0] = 0;
    goto LABEL_12;
  }
  v4 = (const char *)MEMORY[0x212BCC8C4](a2);
  v5 = strlen(v4);
  if (v5 > 0x7FFFFFFFFFFFFFF7)
    sub_2108A4B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    p_dst = (std::string *)operator new(v8 + 1);
    __dst.__r_.__value_.__l.__size_ = v6;
    __dst.__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v5;
    p_dst = &__dst;
    if (!v5)
      goto LABEL_11;
  }
  memmove(p_dst, v4, v6);
LABEL_11:
  p_dst->__r_.__value_.__s.__data_[v6] = 0;
  v10 = std::string::insert(&__dst, 0, "Status code: ", 0xDuLL);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v12 = std::string::append(&v29, ". ", 2uLL);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
LABEL_12:
  v14 = std::string::append(&v30, "Last Error: ", 0xCuLL);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  last_error_message = (const char *)e5rt_get_last_error_message();
  v17 = strlen(last_error_message);
  if (v17 > 0x7FFFFFFFFFFFFFF7)
    sub_2108A4B7C();
  v18 = v17;
  if (v17 >= 0x17)
  {
    v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17)
      v20 = v17 | 7;
    v21 = v20 + 1;
    p_p = operator new(v20 + 1);
    v26 = v18;
    v27 = v21 | 0x8000000000000000;
    __p = p_p;
    goto LABEL_19;
  }
  HIBYTE(v27) = v17;
  p_p = &__p;
  if (v17)
LABEL_19:
    memmove(p_p, last_error_message, v18);
  *((_BYTE *)p_p + v18) = 0;
  if (v27 >= 0)
    v22 = (const std::string::value_type *)&__p;
  else
    v22 = (const std::string::value_type *)__p;
  if (v27 >= 0)
    v23 = HIBYTE(v27);
  else
    v23 = v26;
  v24 = std::string::append(&v31, v22, v23);
  *a1 = *v24;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v27) < 0)
  {
    operator delete(__p);
    if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_28:
      if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_29;
      goto LABEL_33;
    }
  }
  else if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_28;
  }
  operator delete(v31.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_29:
    if (!v3)
      return;
    goto LABEL_34;
  }
LABEL_33:
  operator delete(v30.__r_.__value_.__l.__data_);
  if (!v3)
    return;
LABEL_34:
  if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_38:
    operator delete(__dst.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v29.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_38;
}

void sub_2108AB9E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a26 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2108ABA8C@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _BYTE v13[8];
  std::__shared_weak_count *v14;
  char v15;
  std::__shared_weak_count_vtbl *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count_vtbl *v18;
  uint64_t v19;
  _QWORD v20[3];
  _QWORD *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v19 = 0;
  result = (_QWORD *)e5rt_program_library_create();
  if ((_DWORD)result)
  {
    *a1 = 0;
    a1[1] = 0;
    return result;
  }
  v20[0] = &off_24CA7A3A8;
  v20[1] = MEMORY[0x24BE2F998];
  v20[2] = &v19;
  v21 = v20;
  v18 = 0;
  if (e5rt_program_library_get_function_metadata())
  {
    *a1 = 0;
    a1[1] = 0;
    goto LABEL_5;
  }
  sub_2109E537C(&v16, v18, 0);
  sub_2108ABCE8((uint64_t)&v16, CFSTR("Ops"), (uint64_t)v13);
  if (v15)
  {
    sub_2108B5764(a1, (uint64_t)v13);
    if (!v15)
      goto LABEL_21;
LABEL_16:
    v7 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    goto LABEL_21;
  }
  *a1 = 0;
  a1[1] = 0;
  if (v15)
    goto LABEL_16;
LABEL_21:
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
LABEL_5:
  if (!v21)
    sub_2108B30F0();
  (*(void (**)(_QWORD *))(*v21 + 48))(v21);
  result = v21;
  if (v21 == v20)
  {
    v6 = 4;
    result = v20;
  }
  else
  {
    if (!v21)
      return result;
    v6 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*result + 8 * v6))(result, v3, v4, v5);
}

void sub_2108ABC68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16)
{
  uint64_t v16;

  sub_2108A894C((uint64_t)&a11);
  sub_2108A894C((uint64_t)&a9);
  sub_2108ABE3C((uint64_t)&a13);
  sub_2108A894C((uint64_t)&a16);
  sub_2108A6938((_QWORD *)(v16 - 56));
  _Unwind_Resume(a1);
}

void sub_2108ABCA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108A6938((_QWORD *)(v1 - 56));
  _Unwind_Resume(a1);
}

void sub_2108ABCB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108A6938((_QWORD *)(v1 - 56));
  _Unwind_Resume(a1);
}

void sub_2108ABCCC(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_2108ABF6C(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2108ABCE8(uint64_t a1@<X0>, const void *a2@<X1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v6;
  const __CFDictionary *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  CFTypeID TypeID;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  const void *v19;
  CFTypeRef cf;
  uint64_t v21;
  std::__shared_weak_count *v22;

  v7 = *(const __CFDictionary **)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      if (v7)
        goto LABEL_7;
LABEL_21:
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 16) = 0;
      return;
    }
  }
  if (!v7)
    goto LABEL_21;
LABEL_7:
  v19 = 0;
  if (!a2)
    goto LABEL_21;
  if (!sub_2109E5564(*(const __CFDictionary **)a1, a2, &v19))
    goto LABEL_21;
  cf = v19;
  if (!v19)
    goto LABEL_21;
  TypeID = j__CFArrayGetTypeID();
  if (!sub_2109E5350(&cf, TypeID))
    goto LABEL_21;
  sub_2108B5874(&v21, cf);
  v13 = v21;
  v12 = v22;
  if (v22)
  {
    v14 = (unint64_t *)&v22->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    v16 = v22;
    if (v22)
    {
      v17 = (unint64_t *)&v22->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  *(_QWORD *)a3 = v13;
  *(_QWORD *)(a3 + 8) = v12;
  *(_BYTE *)(a3 + 16) = 1;
}

uint64_t sub_2108ABE3C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  if (*(_BYTE *)(result + 16))
  {
    v2 = *(std::__shared_weak_count **)(result + 8);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
        return v1;
      }
    }
  }
  return result;
}

_QWORD *sub_2108ABEAC(_QWORD *a1)
{
  _QWORD *i;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *a1 = &off_24CA797F0;
  for (i = (_QWORD *)a1[4]; i; i = (_QWORD *)*i)
  {
    if (i[5])
      e5rt_execution_stream_operation_release();
  }
  if (a1[7])
    e5rt_execution_stream_release();
  sub_2108AB444(a1);
  v3 = (std::__shared_weak_count *)a1[25];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  sub_2108B3E00((uint64_t)(a1 + 2));
  return sub_21099596C(a1);
}

void sub_2108ABF6C(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

void sub_2108ABF80(_QWORD *a1)
{
  sub_2108ABEAC(a1);
  JUMPOUT(0x212BCC6FCLL);
}

uint64_t sub_2108ABFA4(uint64_t a1)
{
  const void *v2;
  void *v3;
  uint64_t *v4;

  v2 = *(const void **)(a1 + 8);
  if (!v2)
  {
    if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 657, (uint64_t)"m_configuration != nullptr", 26, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
    v2 = *(const void **)(a1 + 8);
  }
  v3 = __dynamic_cast(v2, (const struct __class_type_info *)&unk_24CA82B30, (const struct __class_type_info *)&unk_24CA82978, 0);
  if (!v3)
    __cxa_bad_cast();
  v4 = sub_2108C5E44((_QWORD *)(a1 + 16), (uint64_t)v3 + 8);
  if (!v4)
    sub_2108B307C("unordered_map::at: key not found");
  return v4[5];
}

void sub_2108AC048(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  const char *v5;
  size_t v6;
  std::string::size_type v7;
  std::string *p_dst;
  int v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  __int128 v24;
  const char *last_error_message;
  size_t v26;
  size_t v27;
  void *p_p;
  uint64_t v29;
  uint64_t v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  unint64_t *v35;
  unint64_t v36;
  const char *v37;
  size_t v38;
  std::string::size_type v39;
  std::string *v40;
  const char *v41;
  size_t v42;
  std::string::size_type v43;
  std::string *v44;
  uint64_t v45;
  uint64_t v46;
  std::string *v47;
  __int128 v48;
  std::string *v49;
  __int128 v50;
  const char *v51;
  size_t v52;
  size_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  const std::string::value_type *v57;
  std::string::size_type v58;
  std::string *v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  std::string *v63;
  __int128 v64;
  std::string *v65;
  __int128 v66;
  const char *v67;
  size_t v68;
  size_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  const std::string::value_type *v73;
  std::string::size_type v74;
  std::string *v75;
  __int128 v76;
  void *__p;
  size_t v78;
  int64_t v79;
  std::string __dst;
  std::string v81;
  std::string v82;
  __int128 v83;
  std::string::size_type v84;
  std::__shared_weak_count *v85;
  unsigned __int8 v86;

  if (!a1[22])
  {
    sub_2108AD2A0((uint64_t)a1, a2, (uint64_t)&v83);
    v9 = BYTE8(v83);
    if (BYTE8(v83))
    {
      *(_QWORD *)a3 = &off_24CA79A00;
      *(_BYTE *)(a3 + 8) = v9;
      v10 = v85;
      *(_QWORD *)(a3 + 16) = v84;
      *(_QWORD *)(a3 + 24) = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
      }
      v13 = 0;
      *(_BYTE *)(a3 + 32) = 0;
      *(_BYTE *)(a3 + 56) = 0;
      *(_QWORD *)&v83 = &off_24CA79A00;
      v14 = v85;
      if (!v85)
        goto LABEL_50;
    }
    else
    {
      v13 = sub_2108ABFA4((uint64_t)a1);
      *(_QWORD *)&v83 = &off_24CA79A00;
      v14 = v85;
      if (!v85)
        goto LABEL_50;
    }
    v35 = (unint64_t *)&v14->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      nullsub_51(&v83);
      if (v9)
        return;
LABEL_51:
      if (!v13 || !e5rt_execution_stream_encode_operation())
      {
LABEL_3:
        if (e5rt_execution_stream_execute_sync())
        {
          v5 = (const char *)MEMORY[0x212BCC8C4]();
          v6 = strlen(v5);
          if (v6 <= 0x7FFFFFFFFFFFFFF7)
          {
            v7 = v6;
            if (v6 >= 0x17)
            {
              v19 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v6 | 7) != 0x17)
                v19 = v6 | 7;
              v20 = v19 + 1;
              p_dst = (std::string *)operator new(v19 + 1);
              __dst.__r_.__value_.__l.__size_ = v7;
              __dst.__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
            }
            else
            {
              *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v6;
              p_dst = &__dst;
              if (!v6)
              {
LABEL_25:
                p_dst->__r_.__value_.__s.__data_[v7] = 0;
                v21 = std::string::insert(&__dst, 0, "Execution stream execute failed.  Return code: ", 0x2FuLL);
                v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
                v81.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v22;
                v21->__r_.__value_.__l.__size_ = 0;
                v21->__r_.__value_.__r.__words[2] = 0;
                v21->__r_.__value_.__r.__words[0] = 0;
                v23 = std::string::append(&v81, ". Last error message: ", 0x16uLL);
                v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
                v82.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v24;
                v23->__r_.__value_.__l.__size_ = 0;
                v23->__r_.__value_.__r.__words[2] = 0;
                v23->__r_.__value_.__r.__words[0] = 0;
                last_error_message = (const char *)e5rt_get_last_error_message();
                v26 = strlen(last_error_message);
                if (v26 > 0x7FFFFFFFFFFFFFF7)
                  sub_2108A4B7C();
                v27 = v26;
                if (v26 >= 0x17)
                {
                  v29 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v26 | 7) != 0x17)
                    v29 = v26 | 7;
                  v30 = v29 + 1;
                  p_p = operator new(v29 + 1);
                  v78 = v27;
                  v79 = v30 | 0x8000000000000000;
                  __p = p_p;
                }
                else
                {
                  HIBYTE(v79) = v26;
                  p_p = &__p;
                  if (!v26)
                  {
LABEL_33:
                    *((_BYTE *)p_p + v27) = 0;
                    if (v79 >= 0)
                      v31 = (const std::string::value_type *)&__p;
                    else
                      v31 = (const std::string::value_type *)__p;
                    if (v79 >= 0)
                      v32 = HIBYTE(v79);
                    else
                      v32 = v78;
                    v33 = std::string::append(&v82, v31, v32);
                    v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
                    v84 = v33->__r_.__value_.__r.__words[2];
                    v83 = v34;
                    v33->__r_.__value_.__l.__size_ = 0;
                    v33->__r_.__value_.__r.__words[2] = 0;
                    v33->__r_.__value_.__r.__words[0] = 0;
                    if (SHIBYTE(v79) < 0)
                    {
                      operator delete(__p);
                      if ((SHIBYTE(v82.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      {
LABEL_41:
                        if ((SHIBYTE(v81.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                          goto LABEL_42;
                        goto LABEL_59;
                      }
                    }
                    else if ((SHIBYTE(v82.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    {
                      goto LABEL_41;
                    }
                    operator delete(v82.__r_.__value_.__l.__data_);
                    if ((SHIBYTE(v81.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    {
LABEL_42:
                      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      {
LABEL_43:
                        v82.__r_.__value_.__s.__data_[0] = 6;
                        sub_2108C4BA4(a3, &v82, (uint64_t)&v83);
LABEL_44:
                        *(_BYTE *)(a3 + 32) = 0;
                        *(_BYTE *)(a3 + 56) = 0;
                        if (SHIBYTE(v84) < 0)
                          operator delete((void *)v83);
                        return;
                      }
LABEL_123:
                      operator delete(__dst.__r_.__value_.__l.__data_);
                      goto LABEL_43;
                    }
LABEL_59:
                    operator delete(v81.__r_.__value_.__l.__data_);
                    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      goto LABEL_43;
                    goto LABEL_123;
                  }
                }
                memmove(p_p, last_error_message, v27);
                goto LABEL_33;
              }
            }
            memmove(p_dst, v5, v7);
            goto LABEL_25;
          }
LABEL_124:
          sub_2108A4B7C();
        }
        if (a1[22] || !e5rt_execution_stream_reset())
        {
          v82.__r_.__value_.__s.__data_[0] = 0;
          HIBYTE(v84) = 0;
          LOBYTE(v83) = 0;
          sub_2108C4BA4(a3, &v82, (uint64_t)&v83);
          goto LABEL_44;
        }
        v41 = (const char *)MEMORY[0x212BCC8C4]();
        v42 = strlen(v41);
        if (v42 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_124;
        v43 = v42;
        if (v42 >= 0x17)
        {
          v61 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v42 | 7) != 0x17)
            v61 = v42 | 7;
          v62 = v61 + 1;
          v44 = (std::string *)operator new(v61 + 1);
          __dst.__r_.__value_.__l.__size_ = v43;
          __dst.__r_.__value_.__r.__words[2] = v62 | 0x8000000000000000;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v44;
        }
        else
        {
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v42;
          v44 = &__dst;
          if (!v42)
          {
LABEL_97:
            v44->__r_.__value_.__s.__data_[v43] = 0;
            v63 = std::string::insert(&__dst, 0, "Execution stream reset failed.  Return code: ", 0x2DuLL);
            v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
            v81.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v64;
            v63->__r_.__value_.__l.__size_ = 0;
            v63->__r_.__value_.__r.__words[2] = 0;
            v63->__r_.__value_.__r.__words[0] = 0;
            v65 = std::string::append(&v81, ". Last error message: ", 0x16uLL);
            v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
            v82.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v66;
            v65->__r_.__value_.__l.__size_ = 0;
            v65->__r_.__value_.__r.__words[2] = 0;
            v65->__r_.__value_.__r.__words[0] = 0;
            v67 = (const char *)e5rt_get_last_error_message();
            v68 = strlen(v67);
            if (v68 > 0x7FFFFFFFFFFFFFF7)
              sub_2108A4B7C();
            v69 = v68;
            if (v68 >= 0x17)
            {
              v71 = (v68 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v68 | 7) != 0x17)
                v71 = v68 | 7;
              v72 = v71 + 1;
              v70 = operator new(v71 + 1);
              v78 = v69;
              v79 = v72 | 0x8000000000000000;
              __p = v70;
            }
            else
            {
              HIBYTE(v79) = v68;
              v70 = &__p;
              if (!v68)
              {
LABEL_105:
                *((_BYTE *)v70 + v69) = 0;
                if (v79 >= 0)
                  v73 = (const std::string::value_type *)&__p;
                else
                  v73 = (const std::string::value_type *)__p;
                if (v79 >= 0)
                  v74 = HIBYTE(v79);
                else
                  v74 = v78;
                v75 = std::string::append(&v82, v73, v74);
                v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
                v84 = v75->__r_.__value_.__r.__words[2];
                v83 = v76;
                v75->__r_.__value_.__l.__size_ = 0;
                v75->__r_.__value_.__r.__words[2] = 0;
                v75->__r_.__value_.__r.__words[0] = 0;
                if (SHIBYTE(v79) < 0)
                {
                  operator delete(__p);
                  if ((SHIBYTE(v82.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  {
LABEL_113:
                    if ((SHIBYTE(v81.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      goto LABEL_114;
                    goto LABEL_122;
                  }
                }
                else if ((SHIBYTE(v82.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
                  goto LABEL_113;
                }
                operator delete(v82.__r_.__value_.__l.__data_);
                if ((SHIBYTE(v81.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_114:
                  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    goto LABEL_43;
                  goto LABEL_123;
                }
LABEL_122:
                operator delete(v81.__r_.__value_.__l.__data_);
                if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_43;
                goto LABEL_123;
              }
            }
            memmove(v70, v67, v69);
            goto LABEL_105;
          }
        }
        memmove(v44, v41, v43);
        goto LABEL_97;
      }
      v37 = (const char *)MEMORY[0x212BCC8C4]();
      v38 = strlen(v37);
      if (v38 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_124;
      v39 = v38;
      if (v38 >= 0x17)
      {
        v45 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v38 | 7) != 0x17)
          v45 = v38 | 7;
        v46 = v45 + 1;
        v40 = (std::string *)operator new(v45 + 1);
        __dst.__r_.__value_.__l.__size_ = v39;
        __dst.__r_.__value_.__r.__words[2] = v46 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v40;
      }
      else
      {
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v38;
        v40 = &__dst;
        if (!v38)
        {
LABEL_74:
          v40->__r_.__value_.__s.__data_[v39] = 0;
          v47 = std::string::insert(&__dst, 0, "Execution stream encode workload failed.  Return code: ", 0x37uLL);
          v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
          v81.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v48;
          v47->__r_.__value_.__l.__size_ = 0;
          v47->__r_.__value_.__r.__words[2] = 0;
          v47->__r_.__value_.__r.__words[0] = 0;
          v49 = std::string::append(&v81, ". Last error message: ", 0x16uLL);
          v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
          v82.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v50;
          v49->__r_.__value_.__l.__size_ = 0;
          v49->__r_.__value_.__r.__words[2] = 0;
          v49->__r_.__value_.__r.__words[0] = 0;
          v51 = (const char *)e5rt_get_last_error_message();
          v52 = strlen(v51);
          if (v52 > 0x7FFFFFFFFFFFFFF7)
            sub_2108A4B7C();
          v53 = v52;
          if (v52 >= 0x17)
          {
            v55 = (v52 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v52 | 7) != 0x17)
              v55 = v52 | 7;
            v56 = v55 + 1;
            v54 = operator new(v55 + 1);
            v78 = v53;
            v79 = v56 | 0x8000000000000000;
            __p = v54;
          }
          else
          {
            HIBYTE(v79) = v52;
            v54 = &__p;
            if (!v52)
            {
LABEL_82:
              *((_BYTE *)v54 + v53) = 0;
              if (v79 >= 0)
                v57 = (const std::string::value_type *)&__p;
              else
                v57 = (const std::string::value_type *)__p;
              if (v79 >= 0)
                v58 = HIBYTE(v79);
              else
                v58 = v78;
              v59 = std::string::append(&v82, v57, v58);
              v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
              v84 = v59->__r_.__value_.__r.__words[2];
              v83 = v60;
              v59->__r_.__value_.__l.__size_ = 0;
              v59->__r_.__value_.__r.__words[2] = 0;
              v59->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(v79) < 0)
              {
                operator delete(__p);
                if ((SHIBYTE(v82.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_90:
                  if ((SHIBYTE(v81.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    goto LABEL_91;
                  goto LABEL_118;
                }
              }
              else if ((SHIBYTE(v82.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
                goto LABEL_90;
              }
              operator delete(v82.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v81.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_91:
                if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_43;
                goto LABEL_123;
              }
LABEL_118:
              operator delete(v81.__r_.__value_.__l.__data_);
              if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_43;
              goto LABEL_123;
            }
          }
          memmove(v54, v51, v53);
          goto LABEL_82;
        }
      }
      memmove(v40, v37, v39);
      goto LABEL_74;
    }
LABEL_50:
    nullsub_51(&v83);
    if (v9)
      return;
    goto LABEL_51;
  }
  sub_2108AC9DC(a1, a2, (uint64_t)&v83);
  if (v86)
    goto LABEL_3;
  *(_QWORD *)a3 = &off_24CA79A00;
  *(_BYTE *)(a3 + 8) = BYTE8(v83);
  v15 = v85;
  *(_QWORD *)(a3 + 16) = v84;
  *(_QWORD *)(a3 + 24) = v15;
  if (!v15)
  {
    *(_BYTE *)(a3 + 32) = 0;
    *(_BYTE *)(a3 + 56) = 0;
LABEL_62:
    (*(void (**)(__int128 *))v83)(&v83);
    return;
  }
  v16 = (unint64_t *)&v15->__shared_owners_;
  do
    v17 = __ldxr(v16);
  while (__stxr(v17 + 1, v16));
  v18 = v86;
  *(_BYTE *)(a3 + 32) = 0;
  *(_BYTE *)(a3 + 56) = 0;
  if (!v18)
    goto LABEL_62;
}

void sub_2108AC89C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (*(char *)(v33 - 73) < 0)
  {
    operator delete(*(void **)(v33 - 96));
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_2108AC9DC(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  const void *v6;
  void *v7;
  uint64_t *v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  BOOL v18;
  BOOL v19;
  int8x8_t v20;
  uint8x8_t v21;
  unint64_t v22;
  int **v23;
  int *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  uint64_t v32;
  int v33;
  __int16 v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  char v48;
  __int128 v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char v54;
  __int128 v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  char v63;
  __int128 v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t *v69;
  uint64_t *v70;
  _QWORD *v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  int v75;
  _QWORD v76[2];
  std::__shared_weak_count *v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  int v81;
  __int16 v82;
  char v83;
  void *v84;
  __int128 v85;
  std::__shared_weak_count *v86;
  int v87;
  __int128 __p;
  __int128 v89;
  __int128 v90;
  int v91;
  _QWORD v92[2];
  std::__shared_weak_count *v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  int v97;
  __int16 v98;
  char v99;

  v6 = (const void *)a1[1];
  if (!v6)
  {
    if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 1501, (uint64_t)"m_configuration != nullptr", 26, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
    v6 = (const void *)a1[1];
  }
  v7 = __dynamic_cast(v6, (const struct __class_type_info *)&unk_24CA82B30, (const struct __class_type_info *)&unk_24CA82978, 0);
  if (!v7)
    __cxa_bad_cast();
  v8 = sub_2108C71D8(a1 + 19, (uint64_t)v7 + 8);
  if (!v8)
    sub_2108B307C("unordered_map::at: key not found");
  v9 = v8;
  v10 = v8 + 5;
  v11 = v8[15];
  sub_2108B165C(a2, &__p);
  v12 = sub_2108C7404(v10, (uint64_t)&__p);
  v13 = v12;
  if (SBYTE7(v89) < 0)
  {
    operator delete((void *)__p);
    v71 = v9 + 10;
    if (v13)
      goto LABEL_8;
LABEL_73:
    if (v9[8] < (unint64_t)v9[17])
    {
      sub_2108B06AC(a1, a2, v71, (uint64_t)v10, v11, (uint64_t)&__p);
      if ((_BYTE)v90)
      {
        v47 = __p;
LABEL_86:
        *(_QWORD *)a3 = v47;
        *(_BYTE *)(a3 + 32) = 1;
        return;
      }
      v63 = BYTE8(__p);
      BYTE8(v72) = BYTE8(__p);
      v64 = v89;
      v73 = v89;
      if (*((_QWORD *)&v89 + 1))
      {
        v65 = (unint64_t *)(*((_QWORD *)&v89 + 1) + 8);
        do
          v66 = __ldxr(v65);
        while (__stxr(v66 + 1, v65));
        *(_QWORD *)a3 = &off_24CA79A00;
        *(_BYTE *)(a3 + 8) = v63;
        *(_OWORD *)(a3 + 16) = v64;
        do
          v67 = __ldxr(v65);
        while (__stxr(v67 + 1, v65));
        *(_BYTE *)(a3 + 32) = 0;
        *(_QWORD *)&v72 = &off_24CA79A00;
        do
          v68 = __ldaxr(v65);
        while (__stlxr(v68 - 1, v65));
        if (!v68)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v64 + 1) + 16))(*((_QWORD *)&v64 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v64 + 1));
        }
      }
      else
      {
        *(_QWORD *)a3 = &off_24CA79A00;
        *(_BYTE *)(a3 + 8) = v63;
        *(_OWORD *)(a3 + 16) = v64;
        *(_BYTE *)(a3 + 32) = 0;
        *(_QWORD *)&v72 = &off_24CA79A00;
      }
      nullsub_51(&v72);
      if (!(_BYTE)v90)
        (*(void (**)(__int128 *))__p)(&__p);
      return;
    }
    LOBYTE(v87) = 7;
    v84 = operator new(0x28uLL);
    v85 = xmmword_210A0ABA0;
    strcpy((char *)v84, "Prewire pool limit size reached.");
    sub_2108C4BA4((uint64_t)&v72, &v87, (uint64_t)&v84);
    v54 = BYTE8(v72);
    BYTE8(__p) = BYTE8(v72);
    v55 = v73;
    v89 = v73;
    if (*((_QWORD *)&v73 + 1))
    {
      v56 = (unint64_t *)(*((_QWORD *)&v73 + 1) + 8);
      do
        v57 = __ldxr(v56);
      while (__stxr(v57 + 1, v56));
      *(_QWORD *)a3 = &off_24CA79A00;
      *(_BYTE *)(a3 + 8) = v54;
      *(_OWORD *)(a3 + 16) = v55;
      do
        v58 = __ldxr(v56);
      while (__stxr(v58 + 1, v56));
      *(_BYTE *)(a3 + 32) = 0;
      *(_QWORD *)&__p = &off_24CA79A00;
      do
        v59 = __ldaxr(v56);
      while (__stlxr(v59 - 1, v56));
      if (!v59)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v55 + 1) + 16))(*((_QWORD *)&v55 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v55 + 1));
      }
    }
    else
    {
      *(_QWORD *)a3 = &off_24CA79A00;
      *(_BYTE *)(a3 + 8) = v54;
      *(_OWORD *)(a3 + 16) = v55;
      *(_BYTE *)(a3 + 32) = 0;
      *(_QWORD *)&__p = &off_24CA79A00;
    }
    nullsub_51(&__p);
    *(_QWORD *)&v72 = &off_24CA79A00;
    v60 = (std::__shared_weak_count *)*((_QWORD *)&v73 + 1);
    if (!*((_QWORD *)&v73 + 1))
      goto LABEL_115;
    v69 = (unint64_t *)(*((_QWORD *)&v73 + 1) + 8);
    do
      v62 = __ldaxr(v69);
    while (__stlxr(v62 - 1, v69));
    goto LABEL_114;
  }
  v71 = v9 + 10;
  if (!v12)
    goto LABEL_73;
LABEL_8:
  v70 = v13;
  v14 = a2[1];
  v15 = (v14 - *a2) >> 7;
  if (v15 == 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(_QWORD *)(a1[24] + 56) - *(_QWORD *)(a1[24] + 48)) >> 3))
  {
    if (v14 != *a2)
    {
      v16 = 0;
      do
      {
        sub_21098D328(*a2 + (v16 << 7), (uint64_t)&__p);
        v87 = v91;
        v17 = sub_2109958E8(&v87);
        v18 = sub_2109A57F8((uint64_t)&__p);
        v19 = (unint64_t)(v17 - 1) < 2 && v18;
        if (!v19 && sub_2109A580C((uint64_t)&__p))
        {
          v20 = (int8x8_t)v9[11];
          if (v20)
          {
            v21 = (uint8x8_t)vcnt_s8(v20);
            v21.i16[0] = vaddlv_u8(v21);
            if (v21.u32[0] > 1uLL)
            {
              v22 = v16;
              if (v16 >= *(_QWORD *)&v20)
                v22 = v16 % *(_QWORD *)&v20;
            }
            else
            {
              v22 = (*(_QWORD *)&v20 - 1) & v16;
            }
            v23 = *(int ***)(*v71 + 8 * v22);
            if (v23)
            {
              v24 = *v23;
              if (*v23)
              {
                if (v21.u32[0] < 2uLL)
                {
                  v25 = *(_QWORD *)&v20 - 1;
                  while (1)
                  {
                    v27 = *((_QWORD *)v24 + 1);
                    if (v27 == v16)
                    {
                      if (*((_QWORD *)v24 + 2) == v16)
                        goto LABEL_40;
                    }
                    else if ((v27 & v25) != v22)
                    {
                      goto LABEL_38;
                    }
                    v24 = *(int **)v24;
                    if (!v24)
                      goto LABEL_38;
                  }
                }
                do
                {
                  v26 = *((_QWORD *)v24 + 1);
                  if (v26 == v16)
                  {
                    if (*((_QWORD *)v24 + 2) == v16)
                      goto LABEL_40;
                  }
                  else
                  {
                    if (v26 >= *(_QWORD *)&v20)
                      v26 %= *(_QWORD *)&v20;
                    if (v26 != v22)
                      break;
                  }
                  v24 = *(int **)v24;
                }
                while (v24);
              }
            }
          }
LABEL_38:
          {
            abort();
          }
          v24 = 0;
LABEL_40:
          v72 = __p;
          v73 = v89;
          v74 = v90;
          v75 = v91;
          LOBYTE(v76[0]) = 0;
          v83 = 0;
          if (v99)
          {
            v76[0] = &off_24CA79890;
            v28 = v92[1];
            v29 = v93;
            if (v93)
            {
              p_shared_owners = (unint64_t *)&v93->__shared_owners_;
              do
                v31 = __ldxr(p_shared_owners);
              while (__stxr(v31 + 1, p_shared_owners));
              v32 = v96;
              v33 = v97;
              v34 = v98;
              do
                v35 = __ldxr(p_shared_owners);
              while (__stxr(v35 + 1, p_shared_owners));
            }
            else
            {
              v32 = v96;
              v33 = v97;
              v34 = v98;
            }
            v76[1] = v28;
            v77 = v29;
            v78 = v94;
            v79 = v95;
            v80 = v32;
            v81 = v33;
            v82 = v34;
            if (v29)
            {
              v36 = (unint64_t *)&v29->__shared_owners_;
              do
                v37 = __ldaxr(v36);
              while (__stlxr(v37 - 1, v36));
              if (!v37)
              {
                ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
                std::__shared_weak_count::__release_weak(v29);
              }
            }
            v83 = 1;
          }
          sub_2108BD4F0((uint64_t)&v84, (uint64_t)&v72, v24 + 6);
          v84 = &off_24CA79A00;
          v38 = v86;
          if (v86)
          {
            v39 = (unint64_t *)&v86->__shared_owners_;
            do
              v40 = __ldaxr(v39);
            while (__stlxr(v40 - 1, v39));
            if (!v40)
            {
              ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
              std::__shared_weak_count::__release_weak(v38);
            }
          }
          nullsub_51(&v84);
          if (v83)
          {
            nullsub_51(&v78);
            v41 = v77;
            if (v77)
            {
              v42 = (unint64_t *)&v77->__shared_owners_;
              do
                v43 = __ldaxr(v42);
              while (__stlxr(v43 - 1, v42));
              if (!v43)
              {
                ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
                std::__shared_weak_count::__release_weak(v41);
              }
            }
            nullsub_51(v76);
          }
        }
        if (v99)
        {
          nullsub_51(&v94);
          v44 = v93;
          if (v93)
          {
            v45 = (unint64_t *)&v93->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          nullsub_51(v92);
        }
        ++v16;
      }
      while (v16 != v15);
    }
    v47 = v70[5];
    goto LABEL_86;
  }
  LOBYTE(v87) = 6;
  v84 = operator new(0x30uLL);
  v85 = xmmword_210A0AB90;
  strcpy((char *)v84, "Input size provided is different from config.");
  sub_2108C4BA4((uint64_t)&v72, &v87, (uint64_t)&v84);
  v48 = BYTE8(v72);
  BYTE8(__p) = BYTE8(v72);
  v49 = v73;
  v89 = v73;
  if (*((_QWORD *)&v73 + 1))
  {
    v50 = (unint64_t *)(*((_QWORD *)&v73 + 1) + 8);
    do
      v51 = __ldxr(v50);
    while (__stxr(v51 + 1, v50));
    *(_QWORD *)a3 = &off_24CA79A00;
    *(_BYTE *)(a3 + 8) = v48;
    *(_OWORD *)(a3 + 16) = v49;
    do
      v52 = __ldxr(v50);
    while (__stxr(v52 + 1, v50));
    *(_BYTE *)(a3 + 32) = 0;
    *(_QWORD *)&__p = &off_24CA79A00;
    do
      v53 = __ldaxr(v50);
    while (__stlxr(v53 - 1, v50));
    if (!v53)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v49 + 1) + 16))(*((_QWORD *)&v49 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v49 + 1));
    }
  }
  else
  {
    *(_QWORD *)a3 = &off_24CA79A00;
    *(_BYTE *)(a3 + 8) = v48;
    *(_OWORD *)(a3 + 16) = v49;
    *(_BYTE *)(a3 + 32) = 0;
    *(_QWORD *)&__p = &off_24CA79A00;
  }
  nullsub_51(&__p);
  *(_QWORD *)&v72 = &off_24CA79A00;
  v60 = (std::__shared_weak_count *)*((_QWORD *)&v73 + 1);
  if (!*((_QWORD *)&v73 + 1))
    goto LABEL_115;
  v61 = (unint64_t *)(*((_QWORD *)&v73 + 1) + 8);
  do
    v62 = __ldaxr(v61);
  while (__stlxr(v62 - 1, v61));
LABEL_114:
  if (!v62)
  {
    ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
    std::__shared_weak_count::__release_weak(v60);
    nullsub_51(&v72);
    if (SHIBYTE(v85) < 0)
      goto LABEL_116;
    return;
  }
LABEL_115:
  nullsub_51(&v72);
  if (SHIBYTE(v85) < 0)
LABEL_116:
    operator delete(v84);
}

void sub_2108AD234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a34 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_2108AD2A0(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  _BYTE *v12;
  _QWORD *v13;
  _BOOL4 v14;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  __int128 v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  __int16 v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  char v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  _QWORD *v60;
  _OWORD v61[3];
  int v62;
  _QWORD v63[2];
  std::__shared_weak_count *v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  int v68;
  __int16 v69;
  char v70;
  std::string v71;
  std::string v72;
  char v73;
  void *__p[2];
  _BYTE v75[20];
  int v76;
  int v77;
  __int128 v78;
  _BYTE v79[32];
  int v80;
  _QWORD v81[2];
  std::__shared_weak_count *v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  int v86;
  __int16 v87;
  char v88;
  unint64_t v89;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 192) + 56) - *(_QWORD *)(*(_QWORD *)(a1 + 192) + 48);
  if (v4)
  {
    v7 = 0;
    v8 = 0xCF3CF3CF3CF3CF3DLL * (v4 >> 3);
    v60 = (_QWORD *)(a1 + 64);
    do
    {
      v89 = v7;
      sub_21098D328(*a2 + (v7 << 7), (uint64_t)&v78);
      LODWORD(__p[0]) = v80;
      if (!sub_210995860(__p)
        && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 1305, (uint64_t)"input.Format().IsValidFormat()", 30, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4)|| ((*(_OWORD *)&v75[4] = *(_OWORD *)&v79[4], v76 = *(_DWORD *)&v79[20], *(_OWORD *)__p = v78, *(_DWORD *)v75 = *(_DWORD *)v79, v77 = v80, !sub_21098C5F4(__p))|| !sub_21098C69C(__p, 16))&& sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 1306, (uint64_t)"ValidViewStructure<uint8_t>(Structure(input))", 45,
             (uint64_t)&unk_210A01421,
             0,
             (void (*)(void **))sub_2109EDDB4))
      {
        abort();
      }
      LODWORD(__p[0]) = v80;
      v9 = sub_2109958E8((int *)__p);
      if (!v10)
      {
        v73 = 3;
        sub_2108AE440(&v89);
        v26 = std::string::insert(&v71, 0, "Invalid input: The given view for input ", 0x28uLL);
        v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
        v72.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v27;
        v26->__r_.__value_.__l.__size_ = 0;
        v26->__r_.__value_.__r.__words[2] = 0;
        v26->__r_.__value_.__r.__words[0] = 0;
        v28 = std::string::append(&v72, " requires both a color format and type definition in its format flags.", 0x46uLL);
        v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
        *(_QWORD *)v75 = *((_QWORD *)&v28->__r_.__value_.__l + 2);
        *(_OWORD *)__p = v29;
        v28->__r_.__value_.__l.__size_ = 0;
        v28->__r_.__value_.__r.__words[2] = 0;
        v28->__r_.__value_.__r.__words[0] = 0;
        sub_2108C4BA4(a3, &v73, (uint64_t)__p);
        if ((v75[7] & 0x80000000) != 0)
        {
          operator delete(__p[0]);
          if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_38;
LABEL_27:
          if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
LABEL_39:
            operator delete(v71.__r_.__value_.__l.__data_);
        }
        else
        {
          if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_27;
LABEL_38:
          operator delete(v72.__r_.__value_.__l.__data_);
          if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_39;
        }
LABEL_70:
        v53 = 0;
        if (v88)
          goto LABEL_77;
        goto LABEL_83;
      }
      v11 = v9;
      *(_QWORD *)a3 = &off_24CA79A00;
      *(_BYTE *)(a3 + 8) = 0;
      v12 = (_BYTE *)operator new();
      v12[23] = 0;
      *v12 = 0;
      *(_QWORD *)(a3 + 16) = v12;
      v13 = (_QWORD *)operator new();
      *v13 = &unk_24CA7A1D8;
      v13[1] = 0;
      v13[2] = 0;
      v13[3] = v12;
      *(_QWORD *)(a3 + 24) = v13;
      v14 = sub_2109A57F8((uint64_t)&v78);
      if ((unint64_t)(v11 - 1) < 2 && v14)
      {
        sub_2108AE568((uint64_t)__p, a1, (uint64_t)&v78, v89);
        *(_BYTE *)(a3 + 8) = __p[1];
        v17 = *(_QWORD *)v75;
        v16 = *(_QWORD *)&v75[8];
        if (*(_QWORD *)&v75[8])
        {
          v18 = (unint64_t *)(*(_QWORD *)&v75[8] + 8);
          do
            v19 = __ldxr(v18);
          while (__stxr(v19 + 1, v18));
        }
        v20 = *(std::__shared_weak_count **)(a3 + 24);
        *(_QWORD *)(a3 + 16) = v17;
        *(_QWORD *)(a3 + 24) = v16;
        if (!v20)
          goto LABEL_20;
        p_shared_owners = (unint64_t *)&v20->__shared_owners_;
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
          __p[0] = &off_24CA79A00;
          v23 = *(std::__shared_weak_count **)&v75[8];
          if (*(_QWORD *)&v75[8])
          {
LABEL_21:
            v24 = (unint64_t *)&v23->__shared_owners_;
            do
              v25 = __ldaxr(v24);
            while (__stlxr(v25 - 1, v24));
            if (!v25)
            {
              ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
              std::__shared_weak_count::__release_weak(v23);
            }
          }
        }
        else
        {
LABEL_20:
          __p[0] = &off_24CA79A00;
          v23 = *(std::__shared_weak_count **)&v75[8];
          if (*(_QWORD *)&v75[8])
            goto LABEL_21;
        }
        nullsub_51(__p);
        goto LABEL_69;
      }
      if (!sub_2109A580C((uint64_t)&v78))
      {
        sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 1323, (uint64_t)&unk_210A01421, 0, (uint64_t)"Only single Grayscale input image or single two component input image is supported.", 83, (void (*)(void **))sub_2109EDDB4);
        abort();
      }
      v61[0] = v78;
      v61[1] = *(_OWORD *)v79;
      v61[2] = *(_OWORD *)&v79[16];
      v62 = v80;
      LOBYTE(v63[0]) = 0;
      v70 = 0;
      if (v88)
      {
        v63[0] = &off_24CA79890;
        v30 = v81[1];
        v31 = v82;
        if (v82)
        {
          v32 = (unint64_t *)&v82->__shared_owners_;
          do
            v33 = __ldxr(v32);
          while (__stxr(v33 + 1, v32));
          v34 = v85;
          v35 = v86;
          v36 = v87;
          do
            v37 = __ldxr(v32);
          while (__stxr(v37 + 1, v32));
        }
        else
        {
          v34 = v85;
          v35 = v86;
          v36 = v87;
        }
        v63[1] = v30;
        v64 = v31;
        v65 = v83;
        v66 = v84;
        v67 = v34;
        v68 = v35;
        v69 = v36;
        if (v31)
        {
          v38 = (unint64_t *)&v31->__shared_owners_;
          do
            v39 = __ldaxr(v38);
          while (__stlxr(v39 - 1, v38));
          if (!v39)
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }
        v70 = 1;
      }
      sub_2108AEF84((uint64_t)__p, a1, v60, (uint64_t)v61, v89);
      *(_BYTE *)(a3 + 8) = __p[1];
      v41 = *(_QWORD *)v75;
      v40 = *(_QWORD *)&v75[8];
      if (*(_QWORD *)&v75[8])
      {
        v42 = (unint64_t *)(*(_QWORD *)&v75[8] + 8);
        do
          v43 = __ldxr(v42);
        while (__stxr(v43 + 1, v42));
      }
      v44 = *(std::__shared_weak_count **)(a3 + 24);
      *(_QWORD *)(a3 + 16) = v41;
      *(_QWORD *)(a3 + 24) = v40;
      if (!v44)
        goto LABEL_56;
      v45 = (unint64_t *)&v44->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
        __p[0] = &off_24CA79A00;
        v47 = *(std::__shared_weak_count **)&v75[8];
        if (*(_QWORD *)&v75[8])
        {
LABEL_57:
          v48 = (unint64_t *)&v47->__shared_owners_;
          do
            v49 = __ldaxr(v48);
          while (__stlxr(v49 - 1, v48));
          if (!v49)
          {
            ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
            std::__shared_weak_count::__release_weak(v47);
          }
        }
      }
      else
      {
LABEL_56:
        __p[0] = &off_24CA79A00;
        v47 = *(std::__shared_weak_count **)&v75[8];
        if (*(_QWORD *)&v75[8])
          goto LABEL_57;
      }
      nullsub_51(__p);
      if (v70)
      {
        nullsub_51(&v65);
        v50 = v64;
        if (v64)
        {
          v51 = (unint64_t *)&v64->__shared_owners_;
          do
            v52 = __ldaxr(v51);
          while (__stlxr(v52 - 1, v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
            std::__shared_weak_count::__release_weak(v50);
          }
        }
        nullsub_51(v63);
      }
LABEL_69:
      if (*(_BYTE *)(a3 + 8))
        goto LABEL_70;
      *(_QWORD *)a3 = &off_24CA79A00;
      v54 = *(std::__shared_weak_count **)(a3 + 24);
      if (!v54)
        goto LABEL_76;
      v55 = (unint64_t *)&v54->__shared_owners_;
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
        nullsub_51(a3);
        v53 = 1;
        if (v88)
        {
LABEL_77:
          nullsub_51(&v83);
          v57 = v82;
          if (v82)
          {
            v58 = (unint64_t *)&v82->__shared_owners_;
            do
              v59 = __ldaxr(v58);
            while (__stlxr(v59 - 1, v58));
            if (!v59)
            {
              ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
              std::__shared_weak_count::__release_weak(v57);
            }
          }
          nullsub_51(v81);
        }
      }
      else
      {
LABEL_76:
        nullsub_51(a3);
        v53 = 1;
        if (v88)
          goto LABEL_77;
      }
LABEL_83:
      if ((v53 & 1) == 0)
        return;
      ++v7;
    }
    while (v7 != v8);
  }
  LOBYTE(__p[0]) = 0;
  v79[7] = 0;
  LOBYTE(v78) = 0;
  sub_2108C4BA4(a3, __p, (uint64_t)&v78);
  if ((v79[7] & 0x80000000) != 0)
    operator delete((void *)v78);
}

void sub_2108AD9E0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 193) < 0)
    operator delete(*(void **)(v1 - 216));
  _Unwind_Resume(exception_object);
}

void sub_2108AD9FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  _QWORD *v48;
  uint64_t v49;

  sub_2108AB288(v48);
  sub_2108B0424(v49 - 216);
  _Unwind_Resume(a1);
}

void sub_2108ADB3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108B0424(v1 - 216);
  _Unwind_Resume(a1);
}

void sub_2108ADB50(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108B0424(v1 - 216);
  _Unwind_Resume(a1);
}

void sub_2108ADB64(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108B0424(v1 - 216);
  _Unwind_Resume(a1);
}

void sub_2108ADB78(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108B0424(v1 - 216);
  _Unwind_Resume(a1);
}

void sub_2108ADB8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108B0424(v1 - 216);
  _Unwind_Resume(a1);
}

uint64_t sub_2108ADBA0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  char v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  char v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unint64_t v23;
  _DWORD *v24;
  _DWORD *i;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  char *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  void *v40;
  char v41;
  char v42;
  uint64_t (**v43)();
  char v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  char v47[8];
  char v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  char v53;
  __int128 v54;
  unint64_t v55;
  _BYTE __p[32];
  __int128 v57;
  int v58;
  uint64_t v59;
  __int128 v60;
  _OWORD v61[2];
  char v62;

  sub_2108AC048(a1, a2, (uint64_t)v47);
  v5 = v48;
  if (v48)
  {
    *(_QWORD *)a3 = &off_24CA79A00;
    *(_BYTE *)(a3 + 8) = v5;
    v6 = v50;
    *(_QWORD *)(a3 + 16) = v49;
    *(_QWORD *)(a3 + 24) = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    *(_BYTE *)(a3 + 32) = 0;
    *(_BYTE *)(a3 + 56) = 0;
    if (v53)
    {
      *(_OWORD *)(a3 + 32) = v51;
      *(_QWORD *)(a3 + 48) = v52;
      v52 = 0;
      v51 = 0uLL;
      *(_BYTE *)(a3 + 56) = 1;
    }
    return sub_2108B77C8((uint64_t)v47);
  }
  v9 = a1[13];
  v10 = a1[14];
  v11 = a1[16];
  v12 = a1[17];
  v13 = v9 == v10 && v11 == v12;
  if (v13)
  {
LABEL_20:
    LOBYTE(v54) = 0;
    __p[23] = 0;
    __p[0] = 0;
    sub_2108C4BA4((uint64_t)&v43, &v54, (uint64_t)__p);
    goto LABEL_21;
  }
  v14 = v11 + 160;
  v15 = v9 + 160;
  while (1)
  {
    v16 = v14;
    v17 = *(_DWORD *)(v15 - 160);
    if (!v17)
      break;
    if (v17 == 1 && e5rt_tensor_utils_cast_from_fp16_to_fp32())
    {
      LOBYTE(v54) = 6;
      *(_QWORD *)__p = operator new(0x38uLL);
      *(_OWORD *)&__p[8] = xmmword_210A0AB80;
      strcpy(*(char **)__p, "Unable to convert Float16 to Float32 output buffer.");
      sub_2108C4BA4((uint64_t)&v43, &v54, (uint64_t)__p);
      goto LABEL_21;
    }
LABEL_17:
    v14 = v16 + 160;
    v18 = v15 + 160;
    v13 = v15 == v10;
    v15 += 160;
    if (v13)
    {
      v15 = v18;
      if (v16 == v12)
        goto LABEL_20;
    }
  }
  if (!e5rt_tensor_utils_dequantize_from_u8_to_fp32())
    goto LABEL_17;
  LOBYTE(v54) = 6;
  *(_QWORD *)__p = operator new(0x38uLL);
  *(_OWORD *)&__p[8] = xmmword_210A0AB60;
  strcpy(*(char **)__p, "Unable to convert Uint8 to Float32 output buffer.");
  sub_2108C4BA4((uint64_t)&v43, &v54, (uint64_t)__p);
LABEL_21:
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    v19 = v44;
    if (!v44)
      goto LABEL_28;
LABEL_23:
    *(_QWORD *)a3 = &off_24CA79A00;
    *(_BYTE *)(a3 + 8) = v19;
    v20 = v46;
    *(_QWORD *)(a3 + 16) = v45;
    *(_QWORD *)(a3 + 24) = v20;
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldxr(p_shared_owners);
      while (__stxr(v22 + 1, p_shared_owners));
    }
    *(_BYTE *)(a3 + 32) = 0;
    *(_BYTE *)(a3 + 56) = 0;
  }
  else
  {
    v19 = v44;
    if (v44)
      goto LABEL_23;
LABEL_28:
    v42 = 0;
    v41 = 0;
    LOBYTE(v40) = 0;
    sub_2108C4BA4(a3, &v42, (uint64_t)&v40);
    v23 = 0xCCCCCCCCCCCCCCCDLL * ((a1[17] - a1[16]) >> 5);
    v55 = 0;
    v54 = 0uLL;
    sub_2108B73CC((char **)&v54, v23);
    v24 = (_DWORD *)a1[16];
    for (i = (_DWORD *)a1[17]; v24 != i; v24 += 40)
    {
      sub_2108B2734(v24, (uint64_t)__p);
      v26 = *((_QWORD *)&v54 + 1);
      if (*((_QWORD *)&v54 + 1) >= v55)
      {
        v31 = sub_2108B757C((char **)&v54, (uint64_t)__p);
      }
      else
      {
        v27 = *(_OWORD *)__p;
        v28 = *(_OWORD *)&__p[16];
        v29 = v57;
        *(_DWORD *)(*((_QWORD *)&v54 + 1) + 48) = v58;
        *(_OWORD *)(v26 + 16) = v28;
        *(_OWORD *)(v26 + 32) = v29;
        *(_OWORD *)v26 = v27;
        *(_BYTE *)(v26 + 56) = 0;
        *(_BYTE *)(v26 + 112) = 0;
        if (v62)
        {
          *(_QWORD *)(v26 + 56) = &off_24CA79890;
          *(_OWORD *)(v26 + 64) = v60;
          v60 = 0uLL;
          v30 = *(_OWORD *)((char *)v61 + 14);
          *(_OWORD *)(v26 + 80) = v61[0];
          *(_OWORD *)(v26 + 94) = v30;
          *(_BYTE *)(v26 + 112) = 1;
        }
        v31 = (char *)(v26 + 120);
      }
      *((_QWORD *)&v54 + 1) = v31;
      if (v62)
      {
        nullsub_51(v61);
        v32 = (std::__shared_weak_count *)*((_QWORD *)&v60 + 1);
        if (*((_QWORD *)&v60 + 1))
        {
          v33 = (unint64_t *)(*((_QWORD *)&v60 + 1) + 8);
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 - 1, v33));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
        nullsub_51(&v59);
      }
    }
    v35 = v55;
    *(_OWORD *)(a3 + 32) = v54;
    *(_QWORD *)(a3 + 48) = v35;
    *(_BYTE *)(a3 + 56) = 1;
    if (v41 < 0)
      operator delete(v40);
  }
  v43 = &off_24CA79A00;
  v36 = v46;
  if (v46)
  {
    v37 = (unint64_t *)&v46->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  nullsub_51(&v43);
  return sub_2108B77C8((uint64_t)v47);
}

void sub_2108ADFC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  if (a36 < 0)
  {
    operator delete(__p);
    sub_2108B77C8((uint64_t)&a20);
    _Unwind_Resume(a1);
  }
  sub_2108B77C8((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void **sub_2108AE078(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*(v3 - 8))
        {
          nullsub_51(v3 - 40);
          v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 6);
          if (v5)
          {
            p_shared_owners = (unint64_t *)&v5->__shared_owners_;
            do
              v7 = __ldaxr(p_shared_owners);
            while (__stlxr(v7 - 1, p_shared_owners));
            if (!v7)
            {
              ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
              std::__shared_weak_count::__release_weak(v5);
            }
          }
          nullsub_51(v3 - 64);
        }
        v3 -= 120;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_2108AE128@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  char v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  int v13;
  char *v14;
  unint64_t v15;
  void *__p;
  char v18;
  char v19;
  _BYTE v20[8];
  char v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  unint64_t v25;
  _BYTE v26[120];
  int v27;
  char v28;

  sub_2108AC048(a1, a2, (uint64_t)v20);
  v5 = v21;
  if (v21)
  {
    *(_QWORD *)a3 = &off_24CA79A00;
    *(_BYTE *)(a3 + 8) = v5;
    v6 = v23;
    *(_QWORD *)(a3 + 16) = v22;
    *(_QWORD *)(a3 + 24) = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    *(_BYTE *)(a3 + 32) = 0;
    *(_BYTE *)(a3 + 56) = 0;
  }
  else
  {
    v19 = 0;
    v18 = 0;
    LOBYTE(__p) = 0;
    sub_2108C4BA4(a3, &v19, (uint64_t)&__p);
    v9 = 0xCCCCCCCCCCCCCCCDLL * ((a1[14] - a1[13]) >> 5);
    v25 = 0;
    v24 = 0uLL;
    sub_2108B78D8((char **)&v24, v9);
    v10 = a1[13];
    for (i = a1[14]; v10 != i; v10 += 160)
    {
      sub_2108A5228(v10, (uint64_t)v26);
      v12 = *((_QWORD *)&v24 + 1);
      if (*((_QWORD *)&v24 + 1) >= v25)
      {
        v14 = sub_2108B7A40((char **)&v24, (uint64_t)v26);
      }
      else
      {
        **((_BYTE **)&v24 + 1) = 0;
        *(_DWORD *)(v12 + 120) = -1;
        v13 = v27;
        if (v27 != -1)
        {
          ((void (*)(char *, uint64_t, _BYTE *))off_24CA79998[v27])(&v28, v12, v26);
          *(_DWORD *)(v12 + 120) = v13;
        }
        v14 = (char *)(v12 + 128);
      }
      *((_QWORD *)&v24 + 1) = v14;
      if (v27 != -1)
        ((void (*)(char *, _BYTE *))off_24CA79850[v27])(&v28, v26);
    }
    v15 = v25;
    *(_OWORD *)(a3 + 32) = v24;
    *(_QWORD *)(a3 + 48) = v15;
    *(_BYTE *)(a3 + 56) = 1;
    if (v18 < 0)
      operator delete(__p);
  }
  return sub_2108B77C8((uint64_t)v20);
}

void sub_2108AE2DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,int a42)
{
  _QWORD *v42;

  sub_2108AE34C(&a24);
  sub_2108AB288(v42);
  if (a14 < 0)
    operator delete(__p);
  sub_2108B77C8((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void **sub_2108AE34C(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  uint64_t v6;
  char v8;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = v3 - 128;
        v6 = *((unsigned int *)v3 - 2);
        if ((_DWORD)v6 != -1)
          ((void (*)(char *, char *))off_24CA79850[v6])(&v8, v3 - 128);
        *((_DWORD *)v3 - 2) = -1;
        v3 -= 128;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_2108AE3F0()
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "Async execution not implemented");
  __cxa_throw(exception, MEMORY[0x24BEDB720], MEMORY[0x24BEDAAC0]);
}

void sub_2108AE42C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2108AE440(unint64_t *a1)
{
  uint64_t result;
  _BYTE v2[24];
  int v3;
  std::string v4;
  _QWORD v5[5];
  _QWORD *v6;

  v3 = 0;
  std::to_string(&v4, *a1);
  v5[0] = v2;
  v5[1] = &v4;
  v5[2] = v2;
  v5[3] = &v4;
  v5[4] = &v4;
  v6 = v5;
  ((void (*)(_QWORD **, _BYTE *))sub_2108BA52C)(&v6, v2);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  if (v3 == -1)
    sub_2108B9060();
  v5[0] = &v4;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24CA79CC8[v3])(v5, v2);
  if (v3 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24CA79C50[v3])(v5, v2);
  return result;
}

void sub_2108AE52C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2108B9008((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2108AE544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  sub_2108B9008((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_2108AE568(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  __int128 v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  __int16 v18;
  unint64_t v19;
  __int128 v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  uint64_t v25;
  int v26;
  __int16 v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  _OWORD v78[3];
  int v79;
  _QWORD v80[2];
  std::__shared_weak_count *v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  int v85;
  __int16 v86;
  char v87;
  _BYTE __p[48];
  char v89;
  char v90;
  CVPixelBufferRef pixelBuffer;
  std::__shared_weak_count *v92;
  _OWORD v93[3];
  int v94;
  _QWORD v95[2];
  std::__shared_weak_count *v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  int v100;
  __int16 v101;
  char v102;
  uint64_t *v103;
  uint64_t v104;
  __int128 v105;
  uint64_t v106;
  char *v107;
  __int128 v108;
  __CVBuffer *v109;
  std::__shared_weak_count *v110;
  _QWORD v111[3];
  _QWORD *v112;
  uint64_t v113;

  v113 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)(a2 + 192);
  *(_DWORD *)__p = *(_DWORD *)(a3 + 48);
  v9 = sub_2109958B0(__p);
  sub_210997320(v8 + 8, a4, (uint64_t)__p);
  v105 = *(_OWORD *)__p;
  v106 = *(_QWORD *)&__p[16];
  sub_2108ABFA4(a2);
  v104 = 0;
  if (e5rt_execution_stream_operation_retain_input_port())
    v10 = 1;
  else
    v10 = v104 == 0;
  if (v10)
  {
    LOBYTE(v111[0]) = 5;
    *(_QWORD *)__p = operator new(0x20uLL);
    *(_OWORD *)&__p[8] = xmmword_210A0ABC0;
    strcpy(*(char **)__p, "Unable to retain input port.");
    sub_2108C4BA4(a1, v111, (uint64_t)__p);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    goto LABEL_122;
  }
  v111[0] = &off_24CA7A648;
  v111[1] = MEMORY[0x24BE2F8E8];
  v111[2] = &v104;
  v112 = v111;
  v103 = &v104;
  if (v9 == 2)
  {
    v20 = *(_OWORD *)(a3 + 16);
    v78[0] = *(_OWORD *)a3;
    v78[1] = v20;
    v78[2] = *(_OWORD *)(a3 + 32);
    v79 = *(_DWORD *)(a3 + 48);
    LOBYTE(v80[0]) = 0;
    v87 = 0;
    if (*(_BYTE *)(a3 + 112))
    {
      v80[0] = &off_24CA79890;
      v21 = *(_QWORD *)(a3 + 64);
      v22 = *(std::__shared_weak_count **)(a3 + 72);
      if (v22)
      {
        p_shared_owners = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldxr(p_shared_owners);
        while (__stxr(v24 + 1, p_shared_owners));
        v25 = *(_QWORD *)(a3 + 96);
        v26 = *(_DWORD *)(a3 + 104);
        v27 = *(_WORD *)(a3 + 108);
        do
          v28 = __ldxr(p_shared_owners);
        while (__stxr(v28 + 1, p_shared_owners));
      }
      else
      {
        v25 = *(_QWORD *)(a3 + 96);
        v26 = *(_DWORD *)(a3 + 104);
        v27 = *(_WORD *)(a3 + 108);
      }
      v80[1] = v21;
      v81 = v22;
      v82 = *(_QWORD *)(a3 + 80);
      v83 = *(_DWORD *)(a3 + 88);
      v84 = v25;
      v85 = v26;
      v86 = v27;
      if (v22)
      {
        v29 = (unint64_t *)&v22->__shared_owners_;
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      v87 = 1;
    }
    sub_2108B82CC((uint64_t)v78, (uint64_t)__p);
    if (v87)
    {
      nullsub_51(&v82);
      v31 = v81;
      if (v81)
      {
        v32 = (unint64_t *)&v81->__shared_owners_;
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      nullsub_51(v80);
    }
    if (v90)
    {
      v34 = *(_QWORD *)&__p[8];
      v35 = *(std::__shared_weak_count **)&__p[16];
      if (*(_QWORD *)&__p[16])
      {
        v36 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
        do
          v37 = __ldxr(v36);
        while (__stxr(v37 + 1, v36));
        do
          v38 = __ldaxr(v36);
        while (__stlxr(v38 - 1, v36));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      sub_2108D1B50(v34, &v107);
      sub_21090F304((uint64_t)&v107, &v109);
      pixelBuffer = v109;
      v92 = v110;
      if (v110)
      {
        v39 = (unint64_t *)&v110->__shared_owners_;
        do
          v40 = __ldxr(v39);
        while (__stxr(v40 + 1, v39));
        v41 = v110;
        if (v110)
        {
          v42 = (unint64_t *)&v110->__shared_owners_;
          do
            v43 = __ldaxr(v42);
          while (__stlxr(v43 - 1, v42));
          if (!v43)
          {
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v41);
          }
        }
      }
      sub_21090E6B4(&v107);
      CVPixelBufferGetIOSurface(pixelBuffer);
      sub_2108B7F6C(a1);
      v44 = v92;
      if (v92)
      {
        v45 = (unint64_t *)&v92->__shared_owners_;
        do
          v46 = __ldaxr(v45);
        while (__stlxr(v46 - 1, v45));
        if (!v46)
        {
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v44);
        }
      }
    }
    else if (*(_BYTE *)(a3 + 112) && sub_2109AB1D0(a3 + 56))
    {
      if (!*(_BYTE *)(a3 + 112))
        sub_2108B1AA4();
      sub_2109AB300(a3 + 56, &v107);
      sub_21090E930((uint64_t)&v107);
      sub_2108B7F6C(a1);
      sub_2109DEB5C(&v107);
    }
    else
    {
      LOBYTE(v109) = 5;
      v107 = (char *)operator new(0x20uLL);
      v108 = xmmword_210A0ABB0;
      strcpy(v107, "Buffer is not IOSurface backed.");
      sub_2108C4BA4(a1, &v109, (uint64_t)&v107);
      if (SHIBYTE(v108) < 0)
        operator delete(v107);
    }
    if (!v90)
      goto LABEL_116;
    v47 = *(std::__shared_weak_count **)&__p[16];
    if (!*(_QWORD *)&__p[16])
      goto LABEL_115;
    v48 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    goto LABEL_113;
  }
  if (v9 != 1)
  {
    sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 1177, (uint64_t)&unk_210A01421, 0, (uint64_t)"Only Grayscale or two component image direct binding supported now.", 67, (void (*)(void **))sub_2109EDDB4);
    abort();
  }
  v11 = *(_OWORD *)(a3 + 16);
  v93[0] = *(_OWORD *)a3;
  v93[1] = v11;
  v93[2] = *(_OWORD *)(a3 + 32);
  v94 = *(_DWORD *)(a3 + 48);
  LOBYTE(v95[0]) = 0;
  v102 = 0;
  if (*(_BYTE *)(a3 + 112))
  {
    v95[0] = &off_24CA79890;
    v12 = *(_QWORD *)(a3 + 64);
    v13 = *(std::__shared_weak_count **)(a3 + 72);
    if (v13)
    {
      v14 = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
      v16 = *(_QWORD *)(a3 + 96);
      v17 = *(_DWORD *)(a3 + 104);
      v18 = *(_WORD *)(a3 + 108);
      do
        v19 = __ldxr(v14);
      while (__stxr(v19 + 1, v14));
    }
    else
    {
      v16 = *(_QWORD *)(a3 + 96);
      v17 = *(_DWORD *)(a3 + 104);
      v18 = *(_WORD *)(a3 + 108);
    }
    v95[1] = v12;
    v96 = v13;
    v97 = *(_QWORD *)(a3 + 80);
    v98 = *(_DWORD *)(a3 + 88);
    v99 = v16;
    v100 = v17;
    v101 = v18;
    if (v13)
    {
      v50 = (unint64_t *)&v13->__shared_owners_;
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v102 = 1;
  }
  sub_2108B7C28((uint64_t)v93, (uint64_t)__p);
  if (v102)
  {
    nullsub_51(&v97);
    v52 = v96;
    if (v96)
    {
      v53 = (unint64_t *)&v96->__shared_owners_;
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    nullsub_51(v95);
  }
  if (v89)
  {
    v55 = *(_QWORD *)&__p[8];
    v56 = *(std::__shared_weak_count **)&__p[16];
    if (*(_QWORD *)&__p[16])
    {
      v57 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
      do
        v58 = __ldxr(v57);
      while (__stxr(v58 + 1, v57));
      do
        v59 = __ldaxr(v57);
      while (__stlxr(v59 - 1, v57));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
    sub_2108D08F4(v55, &v107);
    sub_21090F304((uint64_t)&v107, &v109);
    pixelBuffer = v109;
    v92 = v110;
    if (v110)
    {
      v60 = (unint64_t *)&v110->__shared_owners_;
      do
        v61 = __ldxr(v60);
      while (__stxr(v61 + 1, v60));
      v62 = v110;
      if (v110)
      {
        v63 = (unint64_t *)&v110->__shared_owners_;
        do
          v64 = __ldaxr(v63);
        while (__stlxr(v64 - 1, v63));
        if (!v64)
        {
          ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
          std::__shared_weak_count::__release_weak(v62);
        }
      }
    }
    sub_21090E6B4(&v107);
    CVPixelBufferGetIOSurface(pixelBuffer);
    sub_2108B7F6C(a1);
    v65 = v92;
    if (v92)
    {
      v66 = (unint64_t *)&v92->__shared_owners_;
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
        std::__shared_weak_count::__release_weak(v65);
      }
    }
  }
  else if (*(_BYTE *)(a3 + 112) && sub_2109AB1D0(a3 + 56))
  {
    if (!*(_BYTE *)(a3 + 112))
      sub_2108B1AA4();
    sub_2109AB300(a3 + 56, &v107);
    sub_21090E930((uint64_t)&v107);
    sub_2108B7F6C(a1);
    sub_2109DEB5C(&v107);
  }
  else
  {
    LOBYTE(v109) = 5;
    v107 = (char *)operator new(0x20uLL);
    v108 = xmmword_210A0ABB0;
    strcpy(v107, "Buffer is not IOSurface backed.");
    sub_2108C4BA4(a1, &v109, (uint64_t)&v107);
    if (SHIBYTE(v108) < 0)
      operator delete(v107);
  }
  if (!v89)
    goto LABEL_116;
  v47 = *(std::__shared_weak_count **)&__p[16];
  if (*(_QWORD *)&__p[16])
  {
    v68 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
    do
      v49 = __ldaxr(v68);
    while (__stlxr(v49 - 1, v68));
LABEL_113:
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
LABEL_115:
  nullsub_51(__p);
LABEL_116:
  if (!v112)
    sub_2108B30F0();
  (*(void (**)(_QWORD *))(*v112 + 48))(v112);
  v76 = v112;
  if (v112 == v111)
  {
    v77 = 4;
    v76 = v111;
  }
  else
  {
    if (!v112)
      goto LABEL_122;
    v77 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*v76 + 8 * v77))(v76, v69, v70, v71, v72, v73, v74, v75, *(_QWORD *)&v78[0]);
LABEL_122:
  if (SHIBYTE(v106) < 0)
    operator delete((void *)v105);
}

void sub_2108AEE20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,char a40)
{
  uint64_t v40;

  sub_2109DEB5C((_QWORD *)(v40 - 160));
  sub_2108B8264((uint64_t)&__p);
  sub_2108A6938((_QWORD *)(v40 - 120));
  if (*(char *)(v40 - 169) < 0)
  {
    operator delete(*(void **)(v40 - 192));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_2108AEF84(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, unint64_t a5)
{
  int8x8_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint64_t **v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  BOOL v18;
  char v19;
  __int128 v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  size_t v26;
  unint64_t v27;
  _BYTE *v28;
  int v29;
  size_t v30;
  unint64_t v31;
  _BYTE *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  size_t v38;
  unint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  void **v44;
  char v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  void **v53;
  std::string *v54;
  __int128 v55;
  void **v56;
  std::string::size_type v57;
  std::string *v58;
  __int128 v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  __int128 *v73;
  uint64_t v74;
  uint64_t v75;
  void **v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  __int128 *v88;
  uint64_t v89;
  __int128 *v90;
  uint64_t v91;
  __int128 *v92;
  uint64_t v93;
  __int128 *v94;
  uint64_t v95;
  __int128 *v96;
  uint64_t v97;
  int v98;
  char *v99;
  int v100;
  _QWORD *v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t (***v105)();
  uint64_t v106;
  int v107;
  __int128 v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *p_shared_owners;
  unint64_t v112;
  uint64_t v113;
  int v114;
  __int16 v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  _OWORD v125[3];
  int v126;
  _QWORD v127[2];
  std::__shared_weak_count *v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  int v132;
  __int16 v133;
  char v134;
  __int128 v135;
  _OWORD v136[8];
  int v137;
  char v138;
  char v139;
  void *__p[2];
  unsigned __int8 v141;
  _BYTE v142[88];
  uint64_t v143;
  void *v144[2];
  uint64_t v145;
  unint64_t v146;
  __int128 v147;
  _OWORD v148[8];
  int v149;
  char v150;
  __int128 v151;
  __int128 v152;
  _BYTE v153[72];
  uint64_t (**v154)();
  uint64_t (*v155)(void);
  __int128 v156;
  uint64_t v157;

  v157 = *MEMORY[0x24BDAC8D0];
  v146 = a5;
  v9 = (int8x8_t)a3[1];
  if (!*(_QWORD *)&v9)
    goto LABEL_21;
  v10 = (uint8x8_t)vcnt_s8(v9);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] > 1uLL)
  {
    v11 = a5;
    if (*(_QWORD *)&v9 <= a5)
      v11 = a5 % *(_QWORD *)&v9;
  }
  else
  {
    v11 = (*(_QWORD *)&v9 - 1) & a5;
  }
  v12 = *(uint64_t ***)(*a3 + 8 * v11);
  if (!v12)
  {
LABEL_21:
    v13 = 0;
    goto LABEL_22;
  }
  v13 = *v12;
  if (!*v12)
  {
LABEL_22:
    v17 = 1;
    goto LABEL_23;
  }
  if (v10.u32[0] < 2uLL)
  {
    v14 = *(_QWORD *)&v9 - 1;
    while (1)
    {
      v16 = v13[1];
      if (v16 == a5)
      {
        if (v13[2] == a5)
          goto LABEL_117;
      }
      else if ((v16 & v14) != v11)
      {
        goto LABEL_21;
      }
      v13 = (uint64_t *)*v13;
      if (!v13)
        goto LABEL_22;
    }
  }
  while (1)
  {
    v15 = v13[1];
    if (v15 == a5)
      break;
    if (v15 >= *(_QWORD *)&v9)
      v15 %= *(_QWORD *)&v9;
    if (v15 != v11)
      goto LABEL_21;
LABEL_11:
    v13 = (uint64_t *)*v13;
    if (!v13)
      goto LABEL_22;
  }
  if (v13[2] != a5)
    goto LABEL_11;
LABEL_117:
  if (!*(_QWORD *)(a2 + 176))
  {
    v135 = *(_OWORD *)(v13 + 3);
    *(_QWORD *)&v136[0] = v13[5];
    BYTE8(v136[0]) = 0;
    v138 = 0;
    if (*((_BYTE *)v13 + 176))
    {
      v137 = -1;
      v84 = *((unsigned int *)v13 + 42);
      if ((_DWORD)v84 != -1)
      {
        ((void (*)(uint64_t (***)(), char *, uint64_t *))off_24CA79868[v84])(&v154, (char *)v136 + 8, v13 + 6);
        v137 = v84;
      }
      v138 = 1;
    }
    v139 = 1;
LABEL_235:
    v147 = v135;
    *(_QWORD *)&v148[0] = *(_QWORD *)&v136[0];
    BYTE8(v148[0]) = 0;
    v150 = 0;
    if (v138)
    {
      v149 = -1;
      v107 = v137;
      if (v137 != -1)
      {
        ((void (*)(_BYTE *, char *, char *))off_24CA79868[v137])(&v153[40], (char *)v148 + 8, (char *)v136 + 8);
        v149 = v107;
      }
      v150 = 1;
    }
    v108 = *(_OWORD *)(a4 + 16);
    v125[0] = *(_OWORD *)a4;
    v125[1] = v108;
    v125[2] = *(_OWORD *)(a4 + 32);
    v126 = *(_DWORD *)(a4 + 48);
    LOBYTE(v127[0]) = 0;
    v134 = 0;
    if (*(_BYTE *)(a4 + 112))
    {
      v127[0] = &off_24CA79890;
      v109 = *(_QWORD *)(a4 + 64);
      v110 = *(std::__shared_weak_count **)(a4 + 72);
      if (v110)
      {
        p_shared_owners = (unint64_t *)&v110->__shared_owners_;
        do
          v112 = __ldxr(p_shared_owners);
        while (__stxr(v112 + 1, p_shared_owners));
        v113 = *(_QWORD *)(a4 + 96);
        v114 = *(_DWORD *)(a4 + 104);
        v115 = *(_WORD *)(a4 + 108);
        do
          v116 = __ldxr(p_shared_owners);
        while (__stxr(v116 + 1, p_shared_owners));
      }
      else
      {
        v113 = *(_QWORD *)(a4 + 96);
        v114 = *(_DWORD *)(a4 + 104);
        v115 = *(_WORD *)(a4 + 108);
      }
      v127[1] = v109;
      v128 = v110;
      v129 = *(_QWORD *)(a4 + 80);
      v130 = *(_DWORD *)(a4 + 88);
      v131 = v113;
      v132 = v114;
      v133 = v115;
      if (v110)
      {
        v120 = (unint64_t *)&v110->__shared_owners_;
        do
          v121 = __ldaxr(v120);
        while (__stlxr(v121 - 1, v120));
        if (!v121)
        {
          ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
          std::__shared_weak_count::__release_weak(v110);
        }
      }
      v134 = 1;
    }
    sub_2108BD4F0(a1, (uint64_t)v125, (int *)&v147);
    if (v134)
    {
      nullsub_51(&v129);
      v122 = v128;
      if (v128)
      {
        v123 = (unint64_t *)&v128->__shared_owners_;
        do
          v124 = __ldaxr(v123);
        while (__stlxr(v124 - 1, v123));
        if (!v124)
        {
          ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
          std::__shared_weak_count::__release_weak(v122);
        }
      }
      nullsub_51(v127);
    }
    if (v150 && v149 != -1)
      ((void (*)(uint64_t (***)(), char *))off_24CA79850[v149])(&v154, (char *)v148 + 8);
    goto LABEL_268;
  }
  v17 = 0;
LABEL_23:
  sub_210997320(*(_QWORD *)(a2 + 192) + 8, a5, (uint64_t)&v147);
  *(_OWORD *)v144 = v147;
  v145 = *(_QWORD *)&v148[0];
  sub_2108ABFA4(a2);
  v143 = 0;
  if (e5rt_execution_stream_operation_retain_input_port())
    v18 = 1;
  else
    v18 = v143 == 0;
  if (v18)
  {
    v153[0] = 5;
    *(_QWORD *)&v153[40] = operator new(0x20uLL);
    *(_OWORD *)&v153[48] = xmmword_210A0ABC0;
    strcpy(*(char **)&v153[40], "Unable to retain input port.");
    sub_2108C4BA4((uint64_t)&v154, v153, (uint64_t)&v153[40]);
    v19 = (char)v155;
    BYTE8(v147) = (_BYTE)v155;
    v20 = v156;
    v148[0] = v156;
    if (*((_QWORD *)&v156 + 1))
    {
      v21 = (unint64_t *)(*((_QWORD *)&v156 + 1) + 8);
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
      *(_QWORD *)&v135 = &off_24CA79A00;
      BYTE8(v135) = v19;
      v136[0] = v20;
      do
        v23 = __ldxr(v21);
      while (__stxr(v23 + 1, v21));
      v139 = 0;
      *(_QWORD *)&v147 = &off_24CA79A00;
      do
        v24 = __ldaxr(v21);
      while (__stlxr(v24 - 1, v21));
      if (!v24)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v20 + 1) + 16))(*((_QWORD *)&v20 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v20 + 1));
      }
    }
    else
    {
      *(_QWORD *)&v135 = &off_24CA79A00;
      BYTE8(v135) = (_BYTE)v155;
      v136[0] = (unint64_t)v156;
      v139 = 0;
      *(_QWORD *)&v147 = &off_24CA79A00;
    }
    nullsub_51(&v147);
    v154 = &off_24CA79A00;
    v33 = (std::__shared_weak_count *)*((_QWORD *)&v156 + 1);
    if (!*((_QWORD *)&v156 + 1))
      goto LABEL_59;
    v34 = (unint64_t *)(*((_QWORD *)&v156 + 1) + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
      nullsub_51(&v154);
      if ((v153[63] & 0x80000000) == 0)
        goto LABEL_233;
    }
    else
    {
LABEL_59:
      nullsub_51(&v154);
      if ((v153[63] & 0x80000000) == 0)
        goto LABEL_233;
    }
    operator delete(*(void **)&v153[40]);
    goto LABEL_233;
  }
  v154 = &off_24CA7A648;
  v155 = MEMORY[0x24BE2F8E8];
  *(_QWORD *)&v156 = &v143;
  *((_QWORD *)&v156 + 1) = &v154;
  if ((v17 & 1) == 0)
  {
    if (!v13[5]
      && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 1220, (uint64_t)"buffer_itr->second.buffer_obj", 29, (uint64_t)"GetAllocatedBufferForGenericTensor: Allocated buffer has null buffer_obj", 72, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
    if (!e5rt_io_port_bind_buffer_object())
    {
      v135 = *(_OWORD *)(v13 + 3);
      *(_QWORD *)&v136[0] = v13[5];
      BYTE8(v136[0]) = 0;
      v138 = 0;
      if (*((_BYTE *)v13 + 176))
      {
        v137 = -1;
        v36 = *((unsigned int *)v13 + 42);
        if ((_DWORD)v36 != -1)
        {
          ((void (*)(_BYTE *, char *, uint64_t *))off_24CA79868[v36])(&v153[40], (char *)v136 + 8, v13 + 6);
          v137 = v36;
        }
        v138 = 1;
      }
      v139 = 1;
      goto LABEL_227;
    }
    LOBYTE(v151) = 5;
    v29 = SHIBYTE(v145);
    if (v145 >= 0)
      v30 = HIBYTE(v145);
    else
      v30 = (size_t)v144[1];
    v31 = v30 + 50;
    if (v30 + 50 > 0x7FFFFFFFFFFFFFF7)
      sub_2108A4B7C();
    if (v31 > 0x16)
    {
      v41 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v31 | 7) != 0x17)
        v41 = v31 | 7;
      v42 = v41 + 1;
      v43 = (char *)operator new(v41 + 1);
      *(_QWORD *)&v153[8] = v30 + 50;
      *(_QWORD *)&v153[16] = v42 | 0x8000000000000000;
      *(_QWORD *)v153 = v43;
      qmemcpy(v43, "Unable to bind generic input buffer to input port ", 50);
      v32 = v43 + 50;
      if (!v30)
        goto LABEL_84;
    }
    else
    {
      qmemcpy(v153, "Unable to bind generic input buffer to input port ", 50);
      v32 = &v153[50];
    }
    if (v29 >= 0)
      v44 = v144;
    else
      v44 = (void **)v144[0];
    memmove(v32, v44, v30);
LABEL_84:
    v32[v30] = 0;
    sub_2108C4BA4((uint64_t)&v153[40], &v151, (uint64_t)v153);
    v45 = v153[48];
    BYTE8(v147) = v153[48];
    v46 = *(_QWORD *)&v153[56];
    v47 = *(std::__shared_weak_count **)&v153[64];
    v148[0] = *(_OWORD *)&v153[56];
    if (*(_QWORD *)&v153[64])
    {
      v48 = (unint64_t *)(*(_QWORD *)&v153[64] + 8);
      do
        v49 = __ldxr(v48);
      while (__stxr(v49 + 1, v48));
      *(_QWORD *)&v135 = &off_24CA79A00;
      BYTE8(v135) = v45;
      *(_QWORD *)&v136[0] = v46;
      *((_QWORD *)&v136[0] + 1) = v47;
      do
        v50 = __ldxr(v48);
      while (__stxr(v50 + 1, v48));
      v139 = 0;
      *(_QWORD *)&v147 = &off_24CA79A00;
      do
        v51 = __ldaxr(v48);
      while (__stlxr(v51 - 1, v48));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    else
    {
      *(_QWORD *)&v135 = &off_24CA79A00;
      BYTE8(v135) = v153[48];
      v136[0] = *(unint64_t *)&v153[56];
      v139 = 0;
      *(_QWORD *)&v147 = &off_24CA79A00;
    }
    nullsub_51(&v147);
    *(_QWORD *)&v153[40] = &off_24CA79A00;
    v67 = *(std::__shared_weak_count **)&v153[64];
    if (*(_QWORD *)&v153[64])
    {
      v68 = (unint64_t *)(*(_QWORD *)&v153[64] + 8);
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
      }
    }
    nullsub_51(&v153[40]);
    if ((v153[23] & 0x80000000) != 0)
      operator delete(*(void **)v153);
    goto LABEL_227;
  }
  e5rt_io_port_retain_tensor_desc();
  *(_QWORD *)&v153[40] = &off_24CA7A058;
  *(_QWORD *)&v153[48] = MEMORY[0x24BE2FAA8];
  *(_QWORD *)&v153[56] = &v142[80];
  *(_QWORD *)&v153[64] = &v153[40];
  memset(&v142[64], 0, 24);
  e5rt_tensor_desc_get_size();
  if (e5rt_buffer_object_alloc())
  {
    v142[63] = 5;
    v25 = SHIBYTE(v145);
    if (v145 >= 0)
      v26 = HIBYTE(v145);
    else
      v26 = (size_t)v144[1];
    v27 = v26 + 40;
    if (v26 + 40 > 0x7FFFFFFFFFFFFFF7)
      sub_2108A4B7C();
    if (v27 <= 0x16)
    {
      qmemcpy(v142, "Unable to create buffer for input port: ", 40);
      v28 = &v142[40];
      goto LABEL_96;
    }
    v52 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17)
      v52 = v27 | 7;
    *(_QWORD *)&v142[8] = v26 + 40;
    *(_QWORD *)&v142[16] = (v52 + 1) | 0x8000000000000000;
    *(_QWORD *)v142 = operator new(v52 + 1);
    qmemcpy(*(void **)v142, "Unable to create buffer for input port: ", 40);
    v28 = (_BYTE *)(*(_QWORD *)v142 + 40);
    if (v26)
    {
LABEL_96:
      if (v25 >= 0)
        v53 = v144;
      else
        v53 = (void **)v144[0];
      memmove(v28, v53, v26);
    }
    v28[v26] = 0;
    v54 = std::string::append((std::string *)v142, " of size ", 9uLL);
    v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    *(_QWORD *)&v142[48] = *((_QWORD *)&v54->__r_.__value_.__l + 2);
    *(_OWORD *)&v142[32] = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    sub_2108AE440((unint64_t *)&v142[64]);
    if ((v141 & 0x80u) == 0)
      v56 = __p;
    else
      v56 = (void **)__p[0];
    if ((v141 & 0x80u) == 0)
      v57 = v141;
    else
      v57 = (std::string::size_type)__p[1];
    v58 = std::string::append((std::string *)&v142[32], (const std::string::value_type *)v56, v57);
    v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
    *(_QWORD *)&v152 = *((_QWORD *)&v58->__r_.__value_.__l + 2);
    v151 = v59;
    v58->__r_.__value_.__l.__size_ = 0;
    v58->__r_.__value_.__r.__words[2] = 0;
    v58->__r_.__value_.__r.__words[0] = 0;
    sub_2108C4BA4((uint64_t)v153, &v142[63], (uint64_t)&v151);
    BYTE8(v147) = v153[8];
    v148[0] = *(_OWORD *)&v153[16];
    if (*(_QWORD *)&v153[24])
    {
      v60 = (unint64_t *)(*(_QWORD *)&v153[24] + 8);
      do
        v61 = __ldxr(v60);
      while (__stxr(v61 + 1, v60));
      *(_QWORD *)&v135 = &off_24CA79A00;
      BYTE8(v135) = BYTE8(v147);
      v136[0] = v148[0];
      if (*((_QWORD *)&v148[0] + 1))
      {
        v62 = (unint64_t *)(*((_QWORD *)&v148[0] + 1) + 8);
        do
          v63 = __ldxr(v62);
        while (__stxr(v63 + 1, v62));
        v64 = (std::__shared_weak_count *)*((_QWORD *)&v148[0] + 1);
        v139 = 0;
        *(_QWORD *)&v147 = &off_24CA79A00;
        if (*((_QWORD *)&v148[0] + 1))
        {
          v65 = (unint64_t *)(*((_QWORD *)&v148[0] + 1) + 8);
          do
            v66 = __ldaxr(v65);
          while (__stlxr(v66 - 1, v65));
          if (!v66)
          {
            ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
            std::__shared_weak_count::__release_weak(v64);
          }
        }
LABEL_129:
        nullsub_51(&v147);
        *(_QWORD *)v153 = &off_24CA79A00;
        v70 = *(std::__shared_weak_count **)&v153[24];
        if (*(_QWORD *)&v153[24])
        {
          v71 = (unint64_t *)(*(_QWORD *)&v153[24] + 8);
          do
            v72 = __ldaxr(v71);
          while (__stlxr(v72 - 1, v71));
          if (!v72)
          {
            ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
            std::__shared_weak_count::__release_weak(v70);
          }
        }
        nullsub_51(v153);
        if (SBYTE7(v152) < 0)
        {
          operator delete((void *)v151);
          if ((char)v141 < 0)
            goto LABEL_140;
LABEL_136:
          if ((v142[55] & 0x80000000) == 0)
            goto LABEL_137;
LABEL_141:
          operator delete(*(void **)&v142[32]);
          if ((v142[23] & 0x80000000) != 0)
LABEL_142:
            operator delete(*(void **)v142);
        }
        else
        {
          if (((char)v141 & 0x80000000) == 0)
            goto LABEL_136;
LABEL_140:
          operator delete(__p[0]);
          if ((v142[55] & 0x80000000) != 0)
            goto LABEL_141;
LABEL_137:
          if ((v142[23] & 0x80000000) != 0)
            goto LABEL_142;
        }
        goto LABEL_221;
      }
    }
    else
    {
      *(_QWORD *)&v135 = &off_24CA79A00;
      BYTE8(v135) = v153[8];
      v136[0] = *(unint64_t *)&v153[16];
    }
    v139 = 0;
    *(_QWORD *)&v147 = &off_24CA79A00;
    goto LABEL_129;
  }
  *(_QWORD *)v153 = &off_24CA7A0D8;
  *(_QWORD *)&v153[8] = MEMORY[0x24BE2F720];
  *(_QWORD *)&v153[16] = &v142[72];
  *(_QWORD *)&v153[24] = v153;
  if (e5rt_io_port_bind_buffer_object())
  {
    if (*(_QWORD *)&v142[72])
      e5rt_buffer_object_release();
    v142[0] = 5;
    v37 = SHIBYTE(v145);
    if (v145 >= 0)
      v38 = HIBYTE(v145);
    else
      v38 = (size_t)v144[1];
    v39 = v38 + 50;
    if (v38 + 50 > 0x7FFFFFFFFFFFFFF7)
      sub_2108A4B7C();
    if (v39 <= 0x16)
    {
      qmemcpy(&v142[32], "Unable to bind generic input buffer to input port ", 50);
      v40 = &v142[82];
      goto LABEL_149;
    }
    v75 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v39 | 7) != 0x17)
      v75 = v39 | 7;
    *(_QWORD *)&v142[40] = v38 + 50;
    *(_QWORD *)&v142[48] = (v75 + 1) | 0x8000000000000000;
    *(_QWORD *)&v142[32] = operator new(v75 + 1);
    qmemcpy(*(void **)&v142[32], "Unable to bind generic input buffer to input port ", 50);
    v40 = (_BYTE *)(*(_QWORD *)&v142[32] + 50);
    if (v38)
    {
LABEL_149:
      if (v37 >= 0)
        v76 = v144;
      else
        v76 = (void **)v144[0];
      memmove(v40, v76, v38);
    }
    v40[v38] = 0;
    sub_2108C4BA4((uint64_t)&v151, v142, (uint64_t)&v142[32]);
    BYTE8(v147) = BYTE8(v151);
    v148[0] = v152;
    if (*((_QWORD *)&v152 + 1))
    {
      v77 = (unint64_t *)(*((_QWORD *)&v152 + 1) + 8);
      do
        v78 = __ldxr(v77);
      while (__stxr(v78 + 1, v77));
      *(_QWORD *)&v135 = &off_24CA79A00;
      BYTE8(v135) = BYTE8(v147);
      v136[0] = v148[0];
      if (*((_QWORD *)&v148[0] + 1))
      {
        v79 = (unint64_t *)(*((_QWORD *)&v148[0] + 1) + 8);
        do
          v80 = __ldxr(v79);
        while (__stxr(v80 + 1, v79));
        v81 = (std::__shared_weak_count *)*((_QWORD *)&v148[0] + 1);
        v139 = 0;
        *(_QWORD *)&v147 = &off_24CA79A00;
        if (*((_QWORD *)&v148[0] + 1))
        {
          v82 = (unint64_t *)(*((_QWORD *)&v148[0] + 1) + 8);
          do
            v83 = __ldaxr(v82);
          while (__stlxr(v83 - 1, v82));
          if (!v83)
          {
            ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
            std::__shared_weak_count::__release_weak(v81);
          }
        }
LABEL_171:
        nullsub_51(&v147);
        *(_QWORD *)&v151 = &off_24CA79A00;
        v85 = (std::__shared_weak_count *)*((_QWORD *)&v152 + 1);
        if (*((_QWORD *)&v152 + 1))
        {
          v86 = (unint64_t *)(*((_QWORD *)&v152 + 1) + 8);
          do
            v87 = __ldaxr(v86);
          while (__stlxr(v87 - 1, v86));
          if (!v87)
          {
            ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
            std::__shared_weak_count::__release_weak(v85);
          }
        }
        nullsub_51(&v151);
        if ((v142[55] & 0x80000000) != 0)
          operator delete(*(void **)&v142[32]);
        goto LABEL_215;
      }
    }
    else
    {
      *(_QWORD *)&v135 = &off_24CA79A00;
      BYTE8(v135) = BYTE8(v151);
      v136[0] = (unint64_t)v152;
    }
    v139 = 0;
    *(_QWORD *)&v147 = &off_24CA79A00;
    goto LABEL_171;
  }
  *(_QWORD *)&v151 = &unk_24CA79A40;
  *((_QWORD *)&v151 + 1) = nullsub_3;
  *((_QWORD *)&v152 + 1) = &v151;
  *((_QWORD *)&v148[0] + 1) = &v147;
  *(_QWORD *)&v147 = &unk_24CA79A40;
  *((_QWORD *)&v147 + 1) = nullsub_3;
  sub_2108B3950(&v147, &v153[40]);
  v73 = (__int128 *)*((_QWORD *)&v148[0] + 1);
  if (*((__int128 **)&v148[0] + 1) == &v147)
  {
    v74 = 4;
    v73 = &v147;
LABEL_179:
    (*(void (**)(void))(*(_QWORD *)v73 + 8 * v74))();
  }
  else if (*((_QWORD *)&v148[0] + 1))
  {
    v74 = 5;
    goto LABEL_179;
  }
  *(_QWORD *)&v147 = &unk_24CA79A40;
  *((_QWORD *)&v147 + 1) = nullsub_3;
  *((_QWORD *)&v148[0] + 1) = &v147;
  sub_2108B3950(&v147, &v151);
  v88 = (__int128 *)*((_QWORD *)&v148[0] + 1);
  if (*((__int128 **)&v148[0] + 1) == &v147)
  {
    v89 = 4;
    v88 = &v147;
LABEL_184:
    (*(void (**)(void))(*(_QWORD *)v88 + 8 * v89))();
  }
  else if (*((_QWORD *)&v148[0] + 1))
  {
    v89 = 5;
    goto LABEL_184;
  }
  if (!*((_QWORD *)&v152 + 1))
    sub_2108B30F0();
  (*(void (**)(_QWORD))(**((_QWORD **)&v152 + 1) + 48))(*((_QWORD *)&v152 + 1));
  v90 = (__int128 *)*((_QWORD *)&v152 + 1);
  if (*((__int128 **)&v152 + 1) == &v151)
  {
    v91 = 4;
    v90 = &v151;
LABEL_190:
    (*(void (**)(void))(*(_QWORD *)v90 + 8 * v91))();
  }
  else if (*((_QWORD *)&v152 + 1))
  {
    v91 = 5;
    goto LABEL_190;
  }
  *(_QWORD *)&v151 = &unk_24CA79A40;
  *((_QWORD *)&v151 + 1) = nullsub_3;
  *((_QWORD *)&v152 + 1) = &v151;
  *((_QWORD *)&v148[0] + 1) = &v147;
  *(_QWORD *)&v147 = &unk_24CA79A40;
  *((_QWORD *)&v147 + 1) = nullsub_3;
  sub_2108B3950(&v147, v153);
  v92 = (__int128 *)*((_QWORD *)&v148[0] + 1);
  if (*((__int128 **)&v148[0] + 1) == &v147)
  {
    v93 = 4;
    v92 = &v147;
LABEL_195:
    (*(void (**)(void))(*(_QWORD *)v92 + 8 * v93))();
  }
  else if (*((_QWORD *)&v148[0] + 1))
  {
    v93 = 5;
    goto LABEL_195;
  }
  *(_QWORD *)&v147 = &unk_24CA79A40;
  *((_QWORD *)&v147 + 1) = nullsub_3;
  *((_QWORD *)&v148[0] + 1) = &v147;
  sub_2108B3950(&v147, &v151);
  v94 = (__int128 *)*((_QWORD *)&v148[0] + 1);
  if (*((__int128 **)&v148[0] + 1) == &v147)
  {
    v95 = 4;
    v94 = &v147;
LABEL_200:
    (*(void (**)(void))(*(_QWORD *)v94 + 8 * v95))();
  }
  else if (*((_QWORD *)&v148[0] + 1))
  {
    v95 = 5;
    goto LABEL_200;
  }
  if (!*((_QWORD *)&v152 + 1))
    sub_2108B30F0();
  (*(void (**)(_QWORD))(**((_QWORD **)&v152 + 1) + 48))(*((_QWORD *)&v152 + 1));
  v96 = (__int128 *)*((_QWORD *)&v152 + 1);
  if (*((__int128 **)&v152 + 1) == &v151)
  {
    v97 = 4;
    v96 = &v151;
LABEL_206:
    (*(void (**)(void))(*(_QWORD *)v96 + 8 * v97))();
  }
  else if (*((_QWORD *)&v152 + 1))
  {
    v97 = 5;
    goto LABEL_206;
  }
  sub_2108B04A0();
  LODWORD(v147) = v98;
  *((_QWORD *)&v147 + 1) = *(_QWORD *)&v142[80];
  *(_QWORD *)&v148[0] = *(_QWORD *)&v142[72];
  BYTE8(v148[0]) = 0;
  v150 = 0;
  *(_QWORD *)&v151 = &v146;
  v99 = sub_2108BF820((uint64_t)a3, &v146, (uint64_t)&unk_210A0AD25, (_QWORD **)&v151);
  *(_OWORD *)(v99 + 24) = v147;
  *((_QWORD *)v99 + 5) = *(_QWORD *)&v148[0];
  sub_2108B4B7C((uint64_t)(v99 + 48), (uint64_t)v148 + 8);
  v135 = v147;
  *(_QWORD *)&v136[0] = *(_QWORD *)&v148[0];
  BYTE8(v136[0]) = 0;
  v138 = 0;
  if (v150)
  {
    v137 = -1;
    v100 = v149;
    if (v149 != -1)
    {
      ((void (*)(__int128 *, char *, char *))off_24CA79998[v149])(&v151, (char *)v136 + 8, (char *)v148 + 8);
      v137 = v100;
      v138 = 1;
      v139 = 1;
      if (v150 && v149 != -1)
        ((void (*)(__int128 *, char *))off_24CA79850[v149])(&v151, (char *)v148 + 8);
      goto LABEL_215;
    }
    v138 = 1;
  }
  v139 = 1;
LABEL_215:
  if (!*(_QWORD *)&v153[24])
    sub_2108B30F0();
  (*(void (**)(_QWORD))(**(_QWORD **)&v153[24] + 48))(*(_QWORD *)&v153[24]);
  v101 = *(_QWORD **)&v153[24];
  if (*(_BYTE **)&v153[24] == v153)
  {
    v102 = 4;
    v101 = v153;
  }
  else
  {
    if (!*(_QWORD *)&v153[24])
      goto LABEL_221;
    v102 = 5;
  }
  (*(void (**)(void))(*v101 + 8 * v102))();
LABEL_221:
  if (!*(_QWORD *)&v153[64])
    sub_2108B30F0();
  (*(void (**)(_QWORD))(**(_QWORD **)&v153[64] + 48))(*(_QWORD *)&v153[64]);
  v103 = *(_QWORD **)&v153[64];
  if (*(_BYTE **)&v153[64] == &v153[40])
  {
    v104 = 4;
    v103 = &v153[40];
LABEL_226:
    (*(void (**)(void))(*v103 + 8 * v104))();
  }
  else if (*(_QWORD *)&v153[64])
  {
    v104 = 5;
    goto LABEL_226;
  }
LABEL_227:
  if (!*((_QWORD *)&v156 + 1))
    sub_2108B30F0();
  (*(void (**)(_QWORD))(**((_QWORD **)&v156 + 1) + 48))(*((_QWORD *)&v156 + 1));
  v105 = (uint64_t (***)())*((_QWORD *)&v156 + 1);
  if (*((uint64_t (****)())&v156 + 1) == &v154)
  {
    v106 = 4;
    v105 = &v154;
LABEL_232:
    (*v105)[v106]();
  }
  else if (*((_QWORD *)&v156 + 1))
  {
    v106 = 5;
    goto LABEL_232;
  }
LABEL_233:
  if (SHIBYTE(v145) < 0)
  {
    operator delete(v144[0]);
    if (!v139)
      goto LABEL_247;
    goto LABEL_235;
  }
  if (v139)
    goto LABEL_235;
LABEL_247:
  *(_QWORD *)a1 = &off_24CA79A00;
  *(_BYTE *)(a1 + 8) = BYTE8(v135);
  v117 = *((_QWORD *)&v136[0] + 1);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)&v136[0];
  *(_QWORD *)(a1 + 24) = v117;
  if (v117)
  {
    v118 = (unint64_t *)(v117 + 8);
    do
      v119 = __ldxr(v118);
    while (__stxr(v119 + 1, v118));
  }
LABEL_268:
  if (v139)
  {
    if (v138)
    {
      if (v137 != -1)
        ((void (*)(__int128 *, char *))off_24CA79850[v137])(&v147, (char *)v136 + 8);
    }
  }
  else
  {
    (*(void (**)(__int128 *))v135)(&v135);
  }
}

void sub_2108B01D0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_2108ABF6C(a1);
  _Unwind_Resume(a1);
}

uint64_t sub_2108B0424(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (*(_BYTE *)(a1 + 112))
  {
    nullsub_51(a1 + 80);
    v2 = *(std::__shared_weak_count **)(a1 + 72);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    nullsub_51(a1 + 56);
  }
  return a1;
}

void sub_2108B04A0()
{
  uint64_t v0;
  _QWORD v1[5];

  v1[4] = *MEMORY[0x24BDAC8D0];
  v0 = 0;
  e5rt_tensor_desc_retain_dtype();
  v1[0] = &off_24CA79900;
  v1[1] = MEMORY[0x24BE2FA68];
  v1[2] = &v0;
  v1[3] = v1;
  e5rt_tensor_desc_dtype_get_component_size();
  e5rt_tensor_desc_dtype_get_component_dtype();
  sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 1024, (uint64_t)&unk_210A01421, 0, (uint64_t)"Conversions not supported yet", 29, (void (*)(void **))sub_2109EDDB4);
  abort();
}

void sub_2108B0608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_2108A6938((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2108B0620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_2108A6938((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2108B0634(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_2108ABF6C(exception_object);
}

uint64_t sub_2108B064C(uint64_t a1)
{
  uint64_t v2;
  char v4;

  if (*(_BYTE *)(a1 + 152))
  {
    v2 = *(unsigned int *)(a1 + 144);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_24CA79850[v2])(&v4, a1 + 24);
    *(_DWORD *)(a1 + 144) = -1;
  }
  return a1;
}

_QWORD *sub_2108B06AC@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  const void **v19;
  int v20;
  size_t v21;
  unint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  _BYTE *v28;
  _QWORD *v29;
  _BOOL4 v30;
  __int128 v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::string *v41;
  __int128 v42;
  std::string *v43;
  __int128 v44;
  char v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  char v49;
  __int128 v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *p_shared_owners;
  unint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  int v61;
  __int16 v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  int v67;
  unint64_t *v68;
  unint64_t v69;
  __int128 v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  char v82;
  uint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  char v86;
  __int128 v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  const void *v100;
  char v101;
  __int128 v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  __int128 *v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t *v112;
  unint64_t v113;
  __int128 *v114;
  uint64_t v115;
  void **v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  char v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  _QWORD *result;
  uint64_t v125;
  unint64_t v126;
  _OWORD v128[3];
  int v129;
  _QWORD v130[2];
  std::__shared_weak_count *v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  int v135;
  __int16 v136;
  char v137;
  std::string v138;
  std::string v139;
  void *__p[2];
  std::string::size_type v141;
  char v142;
  _BYTE v143[72];
  std::__shared_weak_count *v144;
  void *v145[2];
  _BYTE v146[20];
  int v147;
  int v148;
  __int128 v149;
  _BYTE v150[32];
  int v151;
  _QWORD v152[2];
  std::__shared_weak_count *v153;
  uint64_t v154;
  int v155;
  uint64_t v156;
  int v157;
  __int16 v158;
  char v159;
  _QWORD v160[3];
  _QWORD *v161;
  uint64_t v162;

  v162 = *MEMORY[0x24BDAC8D0];
  v11 = a1[24];
  v13 = *(_QWORD *)(v11 + 48);
  v12 = *(_QWORD *)(v11 + 56);
  v14 = 0xCF3CF3CF3CF3CF3DLL * ((v12 - v13) >> 3);
  if (v14 != (uint64_t)(a2[1] - *a2) >> 7
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 1431, (uint64_t)"num_inputs == data.inputs.size()", 32, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4)|| ((v16 = sub_2109A8860(a5), v17 = v15, !v16) || !v15)&& sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 1437, (uint64_t)"stream != nullptr && stream_op != nullptr", 41, (uint64_t)"Invalid e5rt objects from pool.", 31, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
  v18 = operator new(0x20uLL);
  *v18 = &off_24CA7A6C8;
  v18[1] = sub_2108B1654;
  v18[2] = a5;
  v18[3] = v16;
  v161 = v18;
  sub_2108A9724(a1[24] + 8, 0, a1 + 13, a1 + 16, (uint64_t)&v143[48]);
  if (!v143[56])
  {
    v126 = v16;
    if (v12 != v13)
    {
      v24 = 0;
      while (1)
      {
        *(_QWORD *)&v143[40] = v24;
        sub_21098D328(*a2 + (v24 << 7), (uint64_t)&v149);
        LODWORD(v145[0]) = v151;
        if (!sub_210995860(v145)
          && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 1457, (uint64_t)"input.Format().IsValidFormat()", 30, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4)|| ((*(_OWORD *)&v146[4] = *(_OWORD *)&v150[4], v147 = *(_DWORD *)&v150[20], *(_OWORD *)v145 = v149, *(_DWORD *)v146 = *(_DWORD *)v150, v148 = v151, !sub_21098C5F4(v145))|| !sub_21098C69C(v145, 16))&& sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 1458, (uint64_t)"ValidViewStructure<uint8_t>(Structure(input))", 45,
               (uint64_t)&unk_210A01421,
               0,
               (void (*)(void **))sub_2109EDDB4))
        {
          abort();
        }
        LODWORD(v145[0]) = v151;
        v25 = sub_2109958E8((int *)v145);
        if (!v26)
        {
          v142 = 3;
          sub_2108AE440((unint64_t *)&v143[40]);
          v41 = std::string::insert(&v138, 0, "Invalid input: The given view for input ", 0x28uLL);
          v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
          v139.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v139.__r_.__value_.__l.__data_ = v42;
          v41->__r_.__value_.__l.__size_ = 0;
          v41->__r_.__value_.__r.__words[2] = 0;
          v41->__r_.__value_.__r.__words[0] = 0;
          v43 = std::string::append(&v139, " requires both a color format and type definition in its format flags.", 0x46uLL);
          v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
          v141 = v43->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = v44;
          v43->__r_.__value_.__l.__size_ = 0;
          v43->__r_.__value_.__r.__words[2] = 0;
          v43->__r_.__value_.__r.__words[0] = 0;
          sub_2108C4BA4((uint64_t)v143, &v142, (uint64_t)__p);
          v45 = v143[8];
          LOBYTE(v145[1]) = v143[8];
          v46 = *(_QWORD *)&v143[16];
          *(_OWORD *)v146 = *(_OWORD *)&v143[16];
          if (*(_QWORD *)&v143[24])
          {
            v47 = (unint64_t *)(*(_QWORD *)&v143[24] + 8);
            do
              v48 = __ldxr(v47);
            while (__stxr(v48 + 1, v47));
            v49 = (char)v145[1];
            v50 = *(_OWORD *)v146;
            *(_QWORD *)a6 = &off_24CA79A00;
            *(_BYTE *)(a6 + 8) = v49;
            *(_OWORD *)(a6 + 16) = v50;
            if (*((_QWORD *)&v50 + 1))
            {
              v51 = (unint64_t *)(*((_QWORD *)&v50 + 1) + 8);
              do
                v52 = __ldxr(v51);
              while (__stxr(v52 + 1, v51));
              v53 = *(std::__shared_weak_count **)&v146[8];
              *(_BYTE *)(a6 + 32) = 0;
              v145[0] = &off_24CA79A00;
              if (v53)
              {
                p_shared_owners = (unint64_t *)&v53->__shared_owners_;
                do
                  v55 = __ldaxr(p_shared_owners);
                while (__stlxr(v55 - 1, p_shared_owners));
                if (!v55)
                {
                  ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
                  std::__shared_weak_count::__release_weak(v53);
                }
              }
LABEL_60:
              nullsub_51(v145);
              *(_QWORD *)v143 = &off_24CA79A00;
              v64 = *(std::__shared_weak_count **)&v143[24];
              if (!*(_QWORD *)&v143[24])
                goto LABEL_64;
              v65 = (unint64_t *)(*(_QWORD *)&v143[24] + 8);
              do
                v66 = __ldaxr(v65);
              while (__stlxr(v66 - 1, v65));
              if (!v66)
              {
                ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
                std::__shared_weak_count::__release_weak(v64);
                nullsub_51(v143);
                if (SHIBYTE(v141) < 0)
                  goto LABEL_70;
LABEL_65:
                if ((SHIBYTE(v139.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_66;
LABEL_71:
                operator delete(v139.__r_.__value_.__l.__data_);
                if ((SHIBYTE(v138.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_67:
                  v67 = 1;
                  if (v159)
                    goto LABEL_122;
                  goto LABEL_128;
                }
              }
              else
              {
LABEL_64:
                nullsub_51(v143);
                if ((SHIBYTE(v141) & 0x80000000) == 0)
                  goto LABEL_65;
LABEL_70:
                operator delete(__p[0]);
                if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
                  goto LABEL_71;
LABEL_66:
                if ((SHIBYTE(v138.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_67;
              }
              operator delete(v138.__r_.__value_.__l.__data_);
              v67 = 1;
              if (v159)
                goto LABEL_122;
              goto LABEL_128;
            }
          }
          else
          {
            *(_QWORD *)a6 = &off_24CA79A00;
            *(_BYTE *)(a6 + 8) = v45;
            *(_QWORD *)(a6 + 16) = v46;
            *(_QWORD *)(a6 + 24) = 0;
          }
          *(_BYTE *)(a6 + 32) = 0;
          v145[0] = &off_24CA79A00;
          goto LABEL_60;
        }
        v27 = v25;
        v145[0] = &off_24CA79A00;
        LOBYTE(v145[1]) = 0;
        v28 = (_BYTE *)operator new();
        v28[23] = 0;
        *v28 = 0;
        *(_QWORD *)v146 = v28;
        v29 = (_QWORD *)operator new();
        *v29 = &unk_24CA7A1D8;
        v29[1] = 0;
        v29[2] = 0;
        v29[3] = v28;
        *(_QWORD *)&v146[8] = v29;
        v30 = sub_2109A57F8((uint64_t)&v149);
        if ((unint64_t)(v27 - 1) < 2 && v30)
        {
          sub_2108AE568((uint64_t)v143, (uint64_t)a1, (uint64_t)&v149, *(unint64_t *)&v143[40]);
          LOBYTE(v145[1]) = v143[8];
          v32 = *(_OWORD *)&v143[16];
          if (*(_QWORD *)&v143[24])
          {
            v33 = (unint64_t *)(*(_QWORD *)&v143[24] + 8);
            do
              v34 = __ldxr(v33);
            while (__stxr(v34 + 1, v33));
          }
          v35 = *(std::__shared_weak_count **)&v146[8];
          *(_OWORD *)v146 = v32;
          if (v35)
          {
            v36 = (unint64_t *)&v35->__shared_owners_;
            do
              v37 = __ldaxr(v36);
            while (__stlxr(v37 - 1, v36));
            if (!v37)
            {
              ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
              std::__shared_weak_count::__release_weak(v35);
            }
          }
          *(_QWORD *)v143 = &off_24CA79A00;
          v38 = *(std::__shared_weak_count **)&v143[24];
          if (*(_QWORD *)&v143[24])
          {
            v39 = (unint64_t *)(*(_QWORD *)&v143[24] + 8);
            do
              v40 = __ldaxr(v39);
            while (__stlxr(v40 - 1, v39));
            if (!v40)
            {
              ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
              std::__shared_weak_count::__release_weak(v38);
            }
          }
          nullsub_51(v143);
        }
        else
        {
          if (!sub_2109A580C((uint64_t)&v149))
          {
            sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 1478, (uint64_t)&unk_210A01421, 0, (uint64_t)"Only single Grayscale input image or single two component input image is supported.", 83, (void (*)(void **))sub_2109EDDB4);
            abort();
          }
          v128[0] = v149;
          v128[1] = *(_OWORD *)v150;
          v128[2] = *(_OWORD *)&v150[16];
          v129 = v151;
          LOBYTE(v130[0]) = 0;
          v137 = 0;
          if (v159)
          {
            v130[0] = &off_24CA79890;
            v56 = v152[1];
            v57 = v153;
            if (v153)
            {
              v58 = (unint64_t *)&v153->__shared_owners_;
              do
                v59 = __ldxr(v58);
              while (__stxr(v59 + 1, v58));
              v60 = v156;
              v61 = v157;
              v62 = v158;
              do
                v63 = __ldxr(v58);
              while (__stxr(v63 + 1, v58));
            }
            else
            {
              v60 = v156;
              v61 = v157;
              v62 = v158;
            }
            v130[1] = v56;
            v131 = v57;
            v132 = v154;
            v133 = v155;
            v134 = v60;
            v135 = v61;
            v136 = v62;
            if (v57)
            {
              v68 = (unint64_t *)&v57->__shared_owners_;
              do
                v69 = __ldaxr(v68);
              while (__stlxr(v69 - 1, v68));
              if (!v69)
              {
                ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                std::__shared_weak_count::__release_weak(v57);
              }
            }
            v137 = 1;
          }
          sub_2108AEF84((uint64_t)v143, (uint64_t)a1, a3, (uint64_t)v128, *(unint64_t *)&v143[40]);
          LOBYTE(v145[1]) = v143[8];
          v70 = *(_OWORD *)&v143[16];
          if (*(_QWORD *)&v143[24])
          {
            v71 = (unint64_t *)(*(_QWORD *)&v143[24] + 8);
            do
              v72 = __ldxr(v71);
            while (__stxr(v72 + 1, v71));
          }
          v73 = *(std::__shared_weak_count **)&v146[8];
          *(_OWORD *)v146 = v70;
          if (v73)
          {
            v74 = (unint64_t *)&v73->__shared_owners_;
            do
              v75 = __ldaxr(v74);
            while (__stlxr(v75 - 1, v74));
            if (!v75)
            {
              ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
              std::__shared_weak_count::__release_weak(v73);
            }
          }
          *(_QWORD *)v143 = &off_24CA79A00;
          v76 = *(std::__shared_weak_count **)&v143[24];
          if (*(_QWORD *)&v143[24])
          {
            v77 = (unint64_t *)(*(_QWORD *)&v143[24] + 8);
            do
              v78 = __ldaxr(v77);
            while (__stlxr(v78 - 1, v77));
            if (!v78)
            {
              ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
              std::__shared_weak_count::__release_weak(v76);
            }
          }
          nullsub_51(v143);
          if (v137)
          {
            nullsub_51(&v132);
            v79 = v131;
            if (v131)
            {
              v80 = (unint64_t *)&v131->__shared_owners_;
              do
                v81 = __ldaxr(v80);
              while (__stlxr(v81 - 1, v80));
              if (!v81)
              {
                ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                std::__shared_weak_count::__release_weak(v79);
              }
            }
            nullsub_51(v130);
          }
        }
        v82 = (char)v145[1];
        if (!LOBYTE(v145[1]))
        {
          v67 = 0;
          v145[0] = &off_24CA79A00;
          v93 = *(std::__shared_weak_count **)&v146[8];
          if (!*(_QWORD *)&v146[8])
            goto LABEL_121;
          goto LABEL_118;
        }
        v143[8] = v145[1];
        v83 = *(_QWORD *)v146;
        *(_OWORD *)&v143[16] = *(_OWORD *)v146;
        if (!*(_QWORD *)&v146[8])
          break;
        v84 = (unint64_t *)(*(_QWORD *)&v146[8] + 8);
        do
          v85 = __ldxr(v84);
        while (__stxr(v85 + 1, v84));
        v86 = v143[8];
        v87 = *(_OWORD *)&v143[16];
        *(_QWORD *)a6 = &off_24CA79A00;
        *(_BYTE *)(a6 + 8) = v86;
        *(_OWORD *)(a6 + 16) = v87;
        if (!*((_QWORD *)&v87 + 1))
          goto LABEL_116;
        v88 = (unint64_t *)(*((_QWORD *)&v87 + 1) + 8);
        do
          v89 = __ldxr(v88);
        while (__stxr(v89 + 1, v88));
        v90 = *(std::__shared_weak_count **)&v143[24];
        *(_BYTE *)(a6 + 32) = 0;
        *(_QWORD *)v143 = &off_24CA79A00;
        if (v90)
        {
          v91 = (unint64_t *)&v90->__shared_owners_;
          do
            v92 = __ldaxr(v91);
          while (__stlxr(v92 - 1, v91));
          if (!v92)
          {
            ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
            std::__shared_weak_count::__release_weak(v90);
          }
        }
LABEL_117:
        nullsub_51(v143);
        v67 = 1;
        v145[0] = &off_24CA79A00;
        v93 = *(std::__shared_weak_count **)&v146[8];
        if (!*(_QWORD *)&v146[8])
          goto LABEL_121;
LABEL_118:
        v94 = (unint64_t *)&v93->__shared_owners_;
        do
          v95 = __ldaxr(v94);
        while (__stlxr(v95 - 1, v94));
        if (v95)
        {
LABEL_121:
          nullsub_51(v145);
          if (v159)
            goto LABEL_122;
          goto LABEL_128;
        }
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
        nullsub_51(v145);
        if (v159)
        {
LABEL_122:
          nullsub_51(&v154);
          v96 = v153;
          if (v153)
          {
            v97 = (unint64_t *)&v153->__shared_owners_;
            do
              v98 = __ldaxr(v97);
            while (__stlxr(v98 - 1, v97));
            if (!v98)
            {
              ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
              std::__shared_weak_count::__release_weak(v96);
            }
          }
          nullsub_51(v152);
        }
LABEL_128:
        if (v67)
          goto LABEL_183;
        if (++v24 == v14)
          goto LABEL_151;
      }
      *(_QWORD *)a6 = &off_24CA79A00;
      *(_BYTE *)(a6 + 8) = v82;
      *(_QWORD *)(a6 + 16) = v83;
      *(_QWORD *)(a6 + 24) = 0;
LABEL_116:
      *(_BYTE *)(a6 + 32) = 0;
      *(_QWORD *)v143 = &off_24CA79A00;
      goto LABEL_117;
    }
LABEL_151:
    v145[0] = &unk_24CA79A40;
    v145[1] = nullsub_3;
    *(_QWORD *)&v146[8] = v145;
    *(_QWORD *)&v150[8] = &v149;
    *(_QWORD *)&v149 = &unk_24CA79A40;
    *((_QWORD *)&v149 + 1) = nullsub_3;
    sub_2108B3950(&v149, v160);
    v108 = *(__int128 **)&v150[8];
    if (*(__int128 **)&v150[8] == &v149)
    {
      v111 = 4;
      v108 = &v149;
      v110 = a4;
      v109 = v126;
    }
    else
    {
      v110 = a4;
      v109 = v126;
      if (!*(_QWORD *)&v150[8])
        goto LABEL_164;
      v111 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v108 + 8 * v111))();
LABEL_164:
    *(_QWORD *)&v149 = &unk_24CA79A40;
    *((_QWORD *)&v149 + 1) = nullsub_3;
    *(_QWORD *)&v150[8] = &v149;
    sub_2108B3950(&v149, v145);
    v114 = *(__int128 **)&v150[8];
    if (*(__int128 **)&v150[8] == &v149)
    {
      v115 = 4;
      v114 = &v149;
    }
    else
    {
      if (!*(_QWORD *)&v150[8])
        goto LABEL_169;
      v115 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v114 + 8 * v115))();
LABEL_169:
    if (!*(_QWORD *)&v146[8])
      sub_2108B30F0();
    (*(void (**)(_QWORD))(**(_QWORD **)&v146[8] + 48))(*(_QWORD *)&v146[8]);
    v116 = *(void ***)&v146[8];
    if (*(void ***)&v146[8] == v145)
    {
      v117 = 4;
      v116 = v145;
    }
    else
    {
      if (!*(_QWORD *)&v146[8])
        goto LABEL_175;
      v117 = 5;
    }
    (*((void (**)(void))*v116 + v117))();
LABEL_175:
    e5rt_execution_stream_encode_operation();
    e5rt_execution_stream_prewire_in_use_allocations();
    sub_2108B165C(a2, v145);
    v149 = *(_OWORD *)v145;
    v118 = *(_QWORD *)v146;
    v145[1] = 0;
    *(_QWORD *)v146 = 0;
    v145[0] = 0;
    *(_QWORD *)v150 = v118;
    *(_QWORD *)&v150[8] = v109;
    *(_QWORD *)&v150[16] = v17;
    sub_2108C6D68(v110, (uint64_t)&v149, (uint64_t)&v149);
    v120 = v119;
    if ((v150[7] & 0x80000000) != 0)
    {
      operator delete((void *)v149);
      if ((v146[7] & 0x80000000) == 0)
      {
LABEL_177:
        if ((v120 & 1) != 0)
          goto LABEL_182;
        goto LABEL_181;
      }
    }
    else if ((v146[7] & 0x80000000) == 0)
    {
      goto LABEL_177;
    }
    operator delete(v145[0]);
    if ((v120 & 1) != 0)
    {
LABEL_182:
      *(_QWORD *)a6 = v109;
      *(_BYTE *)(a6 + 32) = 1;
      goto LABEL_183;
    }
LABEL_181:
    if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 1495, (uint64_t)"output.second", 13, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
    goto LABEL_182;
  }
  LOBYTE(__p[0]) = 5;
  v19 = *(const void ***)&v143[64];
  v20 = *(char *)(*(_QWORD *)&v143[64] + 23);
  if (v20 >= 0)
    v21 = *(unsigned __int8 *)(*(_QWORD *)&v143[64] + 23);
  else
    v21 = *(_QWORD *)(*(_QWORD *)&v143[64] + 8);
  v22 = v21 + 66;
  if (v21 + 66 >= 0x7FFFFFFFFFFFFFF8)
    sub_2108A4B7C();
  if (v22 <= 0x16)
  {
    qmemcpy(v143, "Unable to bind output buffers for pre-wire in this configuration: ", 66);
    v23 = &v143[66];
LABEL_136:
    if (v20 >= 0)
      v100 = v19;
    else
      v100 = *v19;
    memmove(v23, v100, v21);
    goto LABEL_140;
  }
  v99 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v22 | 7) != 0x17)
    v99 = v22 | 7;
  *(_QWORD *)&v143[8] = v21 + 66;
  *(_QWORD *)&v143[16] = (v99 + 1) | 0x8000000000000000;
  *(_QWORD *)v143 = operator new(v99 + 1);
  qmemcpy(*(void **)v143, "Unable to bind output buffers for pre-wire in this configuration: ", 66);
  v23 = (_BYTE *)(*(_QWORD *)v143 + 66);
  if (v21)
    goto LABEL_136;
LABEL_140:
  v23[v21] = 0;
  sub_2108C4BA4((uint64_t)v145, __p, (uint64_t)v143);
  v101 = (char)v145[1];
  BYTE8(v149) = v145[1];
  v102 = *(_OWORD *)v146;
  *(_OWORD *)v150 = *(_OWORD *)v146;
  if (*(_QWORD *)&v146[8])
  {
    v103 = (unint64_t *)(*(_QWORD *)&v146[8] + 8);
    do
      v104 = __ldxr(v103);
    while (__stxr(v104 + 1, v103));
    *(_QWORD *)a6 = &off_24CA79A00;
    *(_BYTE *)(a6 + 8) = v101;
    *(_OWORD *)(a6 + 16) = v102;
    do
      v105 = __ldxr(v103);
    while (__stxr(v105 + 1, v103));
    *(_BYTE *)(a6 + 32) = 0;
    *(_QWORD *)&v149 = &off_24CA79A00;
    do
      v106 = __ldaxr(v103);
    while (__stlxr(v106 - 1, v103));
    if (!v106)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v102 + 1) + 16))(*((_QWORD *)&v102 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v102 + 1));
    }
    nullsub_51(&v149);
    v145[0] = &off_24CA79A00;
    v107 = *(std::__shared_weak_count **)&v146[8];
    if (!*(_QWORD *)&v146[8])
      goto LABEL_158;
  }
  else
  {
    *(_QWORD *)a6 = &off_24CA79A00;
    *(_BYTE *)(a6 + 8) = v101;
    *(_QWORD *)(a6 + 16) = v102;
    *(_QWORD *)(a6 + 24) = 0;
    *(_BYTE *)(a6 + 32) = 0;
    *(_QWORD *)&v149 = &off_24CA79A00;
    nullsub_51(&v149);
    v145[0] = &off_24CA79A00;
    v107 = *(std::__shared_weak_count **)&v146[8];
    if (!*(_QWORD *)&v146[8])
      goto LABEL_158;
  }
  v112 = (unint64_t *)&v107->__shared_owners_;
  do
    v113 = __ldaxr(v112);
  while (__stlxr(v113 - 1, v112));
  if (!v113)
  {
    ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
    std::__shared_weak_count::__release_weak(v107);
    nullsub_51(v145);
    if ((v143[23] & 0x80000000) == 0)
      goto LABEL_183;
    goto LABEL_159;
  }
LABEL_158:
  nullsub_51(v145);
  if ((v143[23] & 0x80000000) != 0)
LABEL_159:
    operator delete(*(void **)v143);
LABEL_183:
  *(_QWORD *)&v143[48] = &off_24CA79A00;
  v121 = v144;
  if (v144)
  {
    v122 = (unint64_t *)&v144->__shared_owners_;
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
  nullsub_51(&v143[48]);
  if (!v161)
    sub_2108B30F0();
  (*(void (**)(_QWORD *))(*v161 + 48))(v161);
  result = v161;
  if (v161 == v160)
  {
    v125 = 4;
    result = v160;
  }
  else
  {
    if (!v161)
      return result;
    v125 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v125))();
}

void sub_2108B14D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  uint64_t v51;

  sub_2108AB288(&a51);
  sub_2108A6938((_QWORD *)(v51 - 128));
  _Unwind_Resume(a1);
}

void sub_2108B1654(_QWORD *a1, unint64_t *a2)
{
  sub_2109A8C24(a1, *a2);
}

uint64_t sub_2108B165C@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  _BYTE v18[56];
  uint64_t v19;
  std::__shared_weak_count *v20;
  _BYTE v21[40];
  _QWORD v22[5];
  const void *v23;
  uint64_t v24;
  const void *v25;
  unint64_t v26;
  void *__p;
  char v28;
  unint64_t v29;
  int v30;
  uint64_t v31;

  sub_2108B18D0((uint64_t)v22);
  v4 = a1[1] - *a1;
  if (v4)
  {
    v5 = 0;
    v6 = v4 >> 7;
    do
    {
      sub_21098D328(*a1 + (v5 << 7), (uint64_t)v18);
      if (sub_2109A57F8((uint64_t)v18))
      {
        sub_21098C354((uint64_t)v18);
        std::ostream::operator<<();
        std::ostream::operator<<();
      }
      if (v21[32])
      {
        nullsub_51(v21);
        v7 = v20;
        if (v20)
        {
          p_shared_owners = (unint64_t *)&v20->__shared_owners_;
          do
            v9 = __ldaxr(p_shared_owners);
          while (__stlxr(v9 - 1, p_shared_owners));
          if (!v9)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
        nullsub_51(&v19);
      }
      ++v5;
    }
    while (v5 != v6);
  }
  if ((v30 & 0x10) != 0)
  {
    v11 = v29;
    if (v29 < v26)
    {
      v29 = v26;
      v11 = v26;
    }
    v12 = v25;
    v10 = v11 - (_QWORD)v25;
    if (v11 - (unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_30;
  }
  else
  {
    if ((v30 & 8) == 0)
    {
      v10 = 0;
      a2[23] = 0;
      goto LABEL_26;
    }
    v12 = v23;
    v10 = v24 - (_QWORD)v23;
    if ((unint64_t)(v24 - (_QWORD)v23) >= 0x7FFFFFFFFFFFFFF8)
LABEL_30:
      sub_2108A4B7C();
  }
  if (v10 >= 0x17)
  {
    v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v13 = v10 | 7;
    v14 = v13 + 1;
    v15 = operator new(v13 + 1);
    *((_QWORD *)a2 + 1) = v10;
    *((_QWORD *)a2 + 2) = v14 | 0x8000000000000000;
    *(_QWORD *)a2 = v15;
    a2 = v15;
    goto LABEL_25;
  }
  a2[23] = v10;
  if (v10)
LABEL_25:
    memmove(a2, v12, v10);
LABEL_26:
  a2[v10] = 0;
  v22[0] = *MEMORY[0x24BEDB7F0];
  v16 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v22 + *(_QWORD *)(v22[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v22[2] = v16;
  v22[3] = MEMORY[0x24BEDB848] + 16;
  if (v28 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x212BCC66C](&v31);
}

void sub_2108B189C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  sub_2108B1A08((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2108B18B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  sub_2108B0424((uint64_t)&a9);
  sub_2108B1A08((uint64_t)&a24);
  _Unwind_Resume(a1);
}

uint64_t sub_2108B18D0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x24BEDB858];
  v3 = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = a1 + 16;
  v5 = (_QWORD *)MEMORY[0x24BEDB7F0];
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 16);
  v7 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_2108B19D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x212BCC66C](v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2108B1A08(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x24BEDB7F0];
  v3 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB7F0];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BCC66C](a1 + 128);
  return a1;
}

uint64_t sub_2108B1A90(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, a2, 0, 0);
}

void sub_2108B1AA4()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x24BEDB8E0] + 16;
  __cxa_throw(exception, MEMORY[0x24BEDB740], MEMORY[0x24BEDABA8]);
}

void sub_2108B1AD8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  if (*(_BYTE *)(a2 + 112))
  {
    v3 = a2 + 56;
    nullsub_51(a2 + 80);
    v4 = *(std::__shared_weak_count **)(a2 + 72);
    if (!v4)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      nullsub_51(v3);
    }
    else
    {
LABEL_6:
      nullsub_51(v3);
    }
  }
}

void sub_2108B1B60(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  if (*(_BYTE *)(a2 + 112))
  {
    v3 = a2 + 56;
    nullsub_51(a2 + 80);
    v4 = *(std::__shared_weak_count **)(a2 + 72);
    if (!v4)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      nullsub_51(v3);
    }
    else
    {
LABEL_6:
      nullsub_51(v3);
    }
  }
}

void sub_2108B1BE8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  if (*(_BYTE *)(a2 + 112))
  {
    v3 = a2 + 56;
    nullsub_51(a2 + 80);
    v4 = *(std::__shared_weak_count **)(a2 + 72);
    if (!v4)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      nullsub_51(v3);
    }
    else
    {
LABEL_6:
      nullsub_51(v3);
    }
  }
}

uint64_t sub_2108B1C70(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (*(_BYTE *)(a1 + 56))
  {
    nullsub_51(a1 + 24);
    v2 = *(std::__shared_weak_count **)(a1 + 16);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    nullsub_51(a1);
  }
  return a1;
}

uint64_t sub_2108B1CE0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  nullsub_51(a1 + 24);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return nullsub_51(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_51(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_51(a1);
}

void sub_2108B1D50(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  int v12;
  __int16 v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;

  v3 = *a3;
  v4 = a3[1];
  v5 = a3[2];
  *(_DWORD *)(a2 + 48) = *((_DWORD *)a3 + 12);
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = v5;
  *(_OWORD *)a2 = v3;
  *(_BYTE *)(a2 + 56) = 0;
  *(_BYTE *)(a2 + 112) = 0;
  if (*((_BYTE *)a3 + 112))
  {
    *(_QWORD *)(a2 + 56) = &off_24CA79890;
    v7 = *((_QWORD *)a3 + 8);
    v8 = (std::__shared_weak_count *)*((_QWORD *)a3 + 9);
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      v11 = *((_QWORD *)a3 + 12);
      v12 = *((_DWORD *)a3 + 26);
      v13 = *((_WORD *)a3 + 54);
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    else
    {
      v11 = *((_QWORD *)a3 + 12);
      v12 = *((_DWORD *)a3 + 26);
      v13 = *((_WORD *)a3 + 54);
    }
    *(_QWORD *)(a2 + 64) = v7;
    *(_QWORD *)(a2 + 72) = v8;
    v15 = *((_QWORD *)a3 + 10);
    *(_DWORD *)(a2 + 88) = *((_DWORD *)a3 + 22);
    *(_QWORD *)(a2 + 80) = v15;
    *(_QWORD *)(a2 + 96) = v11;
    *(_DWORD *)(a2 + 104) = v12;
    *(_WORD *)(a2 + 108) = v13;
    if (v8)
    {
      v16 = (unint64_t *)&v8->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    *(_BYTE *)(a2 + 112) = 1;
  }
}

void sub_2108B1E44(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  int v12;
  __int16 v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;

  v3 = *a3;
  v4 = a3[1];
  v5 = a3[2];
  *(_DWORD *)(a2 + 48) = *((_DWORD *)a3 + 12);
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = v5;
  *(_OWORD *)a2 = v3;
  *(_BYTE *)(a2 + 56) = 0;
  *(_BYTE *)(a2 + 112) = 0;
  if (*((_BYTE *)a3 + 112))
  {
    *(_QWORD *)(a2 + 56) = &off_24CA79890;
    v7 = *((_QWORD *)a3 + 8);
    v8 = (std::__shared_weak_count *)*((_QWORD *)a3 + 9);
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      v11 = *((_QWORD *)a3 + 12);
      v12 = *((_DWORD *)a3 + 26);
      v13 = *((_WORD *)a3 + 54);
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    else
    {
      v11 = *((_QWORD *)a3 + 12);
      v12 = *((_DWORD *)a3 + 26);
      v13 = *((_WORD *)a3 + 54);
    }
    *(_QWORD *)(a2 + 64) = v7;
    *(_QWORD *)(a2 + 72) = v8;
    v15 = *((_QWORD *)a3 + 10);
    *(_DWORD *)(a2 + 88) = *((_DWORD *)a3 + 22);
    *(_QWORD *)(a2 + 80) = v15;
    *(_QWORD *)(a2 + 96) = v11;
    *(_DWORD *)(a2 + 104) = v12;
    *(_WORD *)(a2 + 108) = v13;
    if (v8)
    {
      v16 = (unint64_t *)&v8->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    *(_BYTE *)(a2 + 112) = 1;
  }
}

void sub_2108B1F38(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  int v12;
  __int16 v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;

  v3 = *a3;
  v4 = a3[1];
  v5 = a3[2];
  *(_DWORD *)(a2 + 48) = *((_DWORD *)a3 + 12);
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = v5;
  *(_OWORD *)a2 = v3;
  *(_BYTE *)(a2 + 56) = 0;
  *(_BYTE *)(a2 + 112) = 0;
  if (*((_BYTE *)a3 + 112))
  {
    *(_QWORD *)(a2 + 56) = &off_24CA79890;
    v7 = *((_QWORD *)a3 + 8);
    v8 = (std::__shared_weak_count *)*((_QWORD *)a3 + 9);
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      v11 = *((_QWORD *)a3 + 12);
      v12 = *((_DWORD *)a3 + 26);
      v13 = *((_WORD *)a3 + 54);
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    else
    {
      v11 = *((_QWORD *)a3 + 12);
      v12 = *((_DWORD *)a3 + 26);
      v13 = *((_WORD *)a3 + 54);
    }
    *(_QWORD *)(a2 + 64) = v7;
    *(_QWORD *)(a2 + 72) = v8;
    v15 = *((_QWORD *)a3 + 10);
    *(_DWORD *)(a2 + 88) = *((_DWORD *)a3 + 22);
    *(_QWORD *)(a2 + 80) = v15;
    *(_QWORD *)(a2 + 96) = v11;
    *(_DWORD *)(a2 + 104) = v12;
    *(_WORD *)(a2 + 108) = v13;
    if (v8)
    {
      v16 = (unint64_t *)&v8->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    *(_BYTE *)(a2 + 112) = 1;
  }
}

void sub_2108B202C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  nullsub_51(a1 + 24);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_51(a1);
  JUMPOUT(0x212BCC6FCLL);
}

uint64_t sub_2108B20A0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t sub_2108B20A8(uint64_t a1)
{
  return a1 + 24;
}

uint64_t sub_2108B20B0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 24);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 32);
  return result;
}

uint64_t sub_2108B20C4(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

_QWORD *sub_2108B2148@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *result;
  uint64_t v7;
  _BYTE v8[16];
  std::__shared_weak_count *v9;
  uint64_t v10;
  char v11;
  __int128 v12;
  int v13;
  char v14;
  _BYTE v15[20];
  __int128 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  int *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[3];
  _QWORD *v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  if (*a1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 57, (uint64_t)"((std::is_same_v<UT, uint8_t> && data_type == BufferDataType::Uint8) || (std::is_same_v<UT, half> && data_type == BufferDataType::Float16) || (std::is_same_v<UT, float> && data_type == BufferDataType::Float32))", 210, (uint64_t)"Buffer type mismatch", 20, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
  v25 = 0;
  if (e5rt_buffer_object_get_data_ptr()
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 60, (uint64_t)"ret == E5RT_ERROR_CODE_OK", 25, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
  v23 = 0;
  v24 = 0;
  e5rt_tensor_desc_get_shape();
  v22 = 0;
  e5rt_tensor_desc_get_strides();
  v21 = 0;
  e5rt_tensor_desc_retain_dtype();
  v26[0] = &off_24CA79900;
  v26[1] = MEMORY[0x24BE2FA68];
  v26[2] = &v21;
  v27 = v26;
  v20 = 0;
  e5rt_tensor_desc_dtype_get_num_components();
  v19 = 0;
  e5rt_tensor_desc_dtype_get_element_size();
  v18 = 0;
  e5rt_tensor_desc_dtype_get_component_size();
  sub_2108A4C04(v24, v23, v22, 0, 0, (uint64_t)v15);
  v12 = v16;
  v13 = v17;
  v14 = 1;
  v8[0] = 0;
  v11 = 0;
  sub_21098B694(a2, v25, v15, &v12, &unk_210A1A178, v8);
  if (v11)
  {
    nullsub_51(&v10);
    v3 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    nullsub_51(v8);
  }
  if (!v27)
    sub_2108B30F0();
  (*(void (**)(_QWORD *))(*v27 + 48))(v27);
  result = v27;
  if (v27 == v26)
  {
    v7 = 4;
    result = v26;
  }
  else
  {
    if (!v27)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

void sub_2108B23B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_2108B1C70((uint64_t)&a9);
  sub_2108A6938((_QWORD *)(v9 - 72));
  _Unwind_Resume(a1);
}

void sub_2108B23D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108A6938((_QWORD *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_2108B23E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108A6938((_QWORD *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_2108B23F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108A6938((_QWORD *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_2108B240C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108A6938((_QWORD *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_2108B2420(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_2108ABF6C(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2108B243C@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *result;
  uint64_t v7;
  _BYTE v8[16];
  std::__shared_weak_count *v9;
  uint64_t v10;
  char v11;
  __int128 v12;
  int v13;
  char v14;
  _BYTE v15[20];
  __int128 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _DWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[3];
  _QWORD *v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  if (*a1 != 1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 57, (uint64_t)"((std::is_same_v<UT, uint8_t> && data_type == BufferDataType::Uint8) || (std::is_same_v<UT, half> && data_type == BufferDataType::Float16) || (std::is_same_v<UT, float> && data_type == BufferDataType::Float32))", 210, (uint64_t)"Buffer type mismatch", 20, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
  v25 = 0;
  if (e5rt_buffer_object_get_data_ptr()
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 60, (uint64_t)"ret == E5RT_ERROR_CODE_OK", 25, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
  v23 = 0;
  v24 = 0;
  e5rt_tensor_desc_get_shape();
  v22 = 0;
  e5rt_tensor_desc_get_strides();
  v21 = 0;
  e5rt_tensor_desc_retain_dtype();
  v26[0] = &off_24CA79900;
  v26[1] = MEMORY[0x24BE2FA68];
  v26[2] = &v21;
  v27 = v26;
  v20 = 0;
  e5rt_tensor_desc_dtype_get_num_components();
  v19 = 0;
  e5rt_tensor_desc_dtype_get_element_size();
  v18 = 0;
  e5rt_tensor_desc_dtype_get_component_size();
  sub_2108A4DF8(v24, v23, v22, 0, 0, (uint64_t)v15);
  v12 = v16;
  v13 = v17;
  v14 = 1;
  v8[0] = 0;
  v11 = 0;
  sub_21098B694(a2, v25, v15, &v12, &unk_210A1A180, v8);
  if (v11)
  {
    nullsub_51(&v10);
    v3 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    nullsub_51(v8);
  }
  if (!v27)
    sub_2108B30F0();
  (*(void (**)(_QWORD *))(*v27 + 48))(v27);
  result = v27;
  if (v27 == v26)
  {
    v7 = 4;
    result = v26;
  }
  else
  {
    if (!v27)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

void sub_2108B26AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_2108B1C70((uint64_t)&a9);
  sub_2108A6938((_QWORD *)(v9 - 72));
  _Unwind_Resume(a1);
}

void sub_2108B26C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108A6938((_QWORD *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_2108B26DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108A6938((_QWORD *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_2108B26F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108A6938((_QWORD *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_2108B2704(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108A6938((_QWORD *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_2108B2718(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_2108ABF6C(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2108B2734@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *result;
  uint64_t v7;
  _BYTE v8[16];
  std::__shared_weak_count *v9;
  uint64_t v10;
  char v11;
  __int128 v12;
  int v13;
  char v14;
  _BYTE v15[20];
  __int128 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _DWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[3];
  _QWORD *v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  if (*a1 != 2
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 57, (uint64_t)"((std::is_same_v<UT, uint8_t> && data_type == BufferDataType::Uint8) || (std::is_same_v<UT, half> && data_type == BufferDataType::Float16) || (std::is_same_v<UT, float> && data_type == BufferDataType::Float32))", 210, (uint64_t)"Buffer type mismatch", 20, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
  v25 = 0;
  if (e5rt_buffer_object_get_data_ptr()
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 60, (uint64_t)"ret == E5RT_ERROR_CODE_OK", 25, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
  v23 = 0;
  v24 = 0;
  e5rt_tensor_desc_get_shape();
  v22 = 0;
  e5rt_tensor_desc_get_strides();
  v21 = 0;
  e5rt_tensor_desc_retain_dtype();
  v26[0] = &off_24CA79900;
  v26[1] = MEMORY[0x24BE2FA68];
  v26[2] = &v21;
  v27 = v26;
  v20 = 0;
  e5rt_tensor_desc_dtype_get_num_components();
  v19 = 0;
  e5rt_tensor_desc_dtype_get_element_size();
  v18 = 0;
  e5rt_tensor_desc_dtype_get_component_size();
  sub_2108A5010(v24, v23, v22, 0, 0, (uint64_t)v15);
  v12 = v16;
  v13 = v17;
  v14 = 1;
  v8[0] = 0;
  v11 = 0;
  sub_21098B694(a2, v25, v15, &v12, &unk_210A1A170, v8);
  if (v11)
  {
    nullsub_51(&v10);
    v3 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    nullsub_51(v8);
  }
  if (!v27)
    sub_2108B30F0();
  (*(void (**)(_QWORD *))(*v27 + 48))(v27);
  result = v27;
  if (v27 == v26)
  {
    v7 = 4;
    result = v26;
  }
  else
  {
    if (!v27)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

void sub_2108B29A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_2108B1C70((uint64_t)&a9);
  sub_2108A6938((_QWORD *)(v9 - 72));
  _Unwind_Resume(a1);
}

void sub_2108B29C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108A6938((_QWORD *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_2108B29D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108A6938((_QWORD *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_2108B29E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108A6938((_QWORD *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_2108B29FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108A6938((_QWORD *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_2108B2A10(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_2108ABF6C(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2108B2A30()
{
  JUMPOUT(0x212BCC6FCLL);
}

__n128 sub_2108B2A44(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24CA79900;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_2108B2A7C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24CA79900;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_2108B2A9C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_2108B2AA4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP22e5rt_tensor_desc_dtypeEJS8_EEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP22e5rt_tensor_desc_dtypeEJS8_EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP22e5rt_tensor_desc_dtypeEJS8_EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP22e5rt_tensor_desc_dtypeEJS8_EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2108B2B10()
{
  return &unk_24CA79970;
}

void sub_2108B2B1C()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x24BEDB748], MEMORY[0x24BEDABB8]);
}

void sub_2108B2B44(uint64_t *a1, uint64_t a2, __int128 *a3)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  char v13;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 120);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      v6 = *a3;
      v7 = a3[1];
      v8 = a3[2];
      *(_DWORD *)(a2 + 48) = *((_DWORD *)a3 + 12);
      *(_OWORD *)(a2 + 16) = v7;
      *(_OWORD *)(a2 + 32) = v8;
      *(_OWORD *)a2 = v6;
      sub_2108B2E24(a2 + 56, (uint64_t)a3 + 56);
      return;
    }
    ((void (*)(char *, uint64_t))off_24CA79850[v5])(&v13, v4);
  }
  *(_DWORD *)(v4 + 120) = -1;
  v9 = *a3;
  v10 = a3[1];
  v11 = a3[2];
  *(_DWORD *)(v4 + 48) = *((_DWORD *)a3 + 12);
  *(_OWORD *)(v4 + 16) = v10;
  *(_OWORD *)(v4 + 32) = v11;
  *(_OWORD *)v4 = v9;
  *(_BYTE *)(v4 + 56) = 0;
  *(_BYTE *)(v4 + 112) = 0;
  if (*((_BYTE *)a3 + 112))
  {
    *(_QWORD *)(v4 + 56) = &off_24CA79890;
    *(_OWORD *)(v4 + 64) = a3[4];
    *((_QWORD *)a3 + 8) = 0;
    *((_QWORD *)a3 + 9) = 0;
    v12 = a3[5];
    *(_OWORD *)(v4 + 94) = *(__int128 *)((char *)a3 + 94);
    *(_OWORD *)(v4 + 80) = v12;
    *(_BYTE *)(v4 + 112) = 1;
  }
  *(_DWORD *)(v4 + 120) = 0;
}

void sub_2108B2C34(uint64_t *a1, uint64_t a2, __int128 *a3)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  char v13;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 120);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      v6 = *a3;
      v7 = a3[1];
      v8 = a3[2];
      *(_DWORD *)(a2 + 48) = *((_DWORD *)a3 + 12);
      *(_OWORD *)(a2 + 16) = v7;
      *(_OWORD *)(a2 + 32) = v8;
      *(_OWORD *)a2 = v6;
      sub_2108B2E24(a2 + 56, (uint64_t)a3 + 56);
      return;
    }
    ((void (*)(char *, uint64_t))off_24CA79850[v5])(&v13, v4);
  }
  *(_DWORD *)(v4 + 120) = -1;
  v9 = *a3;
  v10 = a3[1];
  v11 = a3[2];
  *(_DWORD *)(v4 + 48) = *((_DWORD *)a3 + 12);
  *(_OWORD *)(v4 + 16) = v10;
  *(_OWORD *)(v4 + 32) = v11;
  *(_OWORD *)v4 = v9;
  *(_BYTE *)(v4 + 56) = 0;
  *(_BYTE *)(v4 + 112) = 0;
  if (*((_BYTE *)a3 + 112))
  {
    *(_QWORD *)(v4 + 56) = &off_24CA79890;
    *(_OWORD *)(v4 + 64) = a3[4];
    *((_QWORD *)a3 + 8) = 0;
    *((_QWORD *)a3 + 9) = 0;
    v12 = a3[5];
    *(_OWORD *)(v4 + 94) = *(__int128 *)((char *)a3 + 94);
    *(_OWORD *)(v4 + 80) = v12;
    *(_BYTE *)(v4 + 112) = 1;
  }
  *(_DWORD *)(v4 + 120) = 1;
}

void sub_2108B2D2C(uint64_t *a1, uint64_t a2, __int128 *a3)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  char v13;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 120);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 2)
    {
      v6 = *a3;
      v7 = a3[1];
      v8 = a3[2];
      *(_DWORD *)(a2 + 48) = *((_DWORD *)a3 + 12);
      *(_OWORD *)(a2 + 16) = v7;
      *(_OWORD *)(a2 + 32) = v8;
      *(_OWORD *)a2 = v6;
      sub_2108B2E24(a2 + 56, (uint64_t)a3 + 56);
      return;
    }
    ((void (*)(char *, uint64_t))off_24CA79850[v5])(&v13, v4);
  }
  *(_DWORD *)(v4 + 120) = -1;
  v9 = *a3;
  v10 = a3[1];
  v11 = a3[2];
  *(_DWORD *)(v4 + 48) = *((_DWORD *)a3 + 12);
  *(_OWORD *)(v4 + 16) = v10;
  *(_OWORD *)(v4 + 32) = v11;
  *(_OWORD *)v4 = v9;
  *(_BYTE *)(v4 + 56) = 0;
  *(_BYTE *)(v4 + 112) = 0;
  if (*((_BYTE *)a3 + 112))
  {
    *(_QWORD *)(v4 + 56) = &off_24CA79890;
    *(_OWORD *)(v4 + 64) = a3[4];
    *((_QWORD *)a3 + 8) = 0;
    *((_QWORD *)a3 + 9) = 0;
    v12 = a3[5];
    *(_OWORD *)(v4 + 94) = *(__int128 *)((char *)a3 + 94);
    *(_OWORD *)(v4 + 80) = v12;
    *(_BYTE *)(v4 + 112) = 1;
  }
  *(_DWORD *)(v4 + 120) = 2;
}

__n128 sub_2108B2E24(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __n128 result;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  if (*(unsigned __int8 *)(a1 + 56) == *(unsigned __int8 *)(a2 + 56))
  {
    if (*(_BYTE *)(a1 + 56))
    {
      v4 = *(_OWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      v5 = *(std::__shared_weak_count **)(a1 + 16);
      *(_OWORD *)(a1 + 8) = v4;
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      result = *(__n128 *)(a2 + 24);
      *(_OWORD *)(a1 + 38) = *(_OWORD *)(a2 + 38);
      *(__n128 *)(a1 + 24) = result;
    }
  }
  else if (*(_BYTE *)(a1 + 56))
  {
    nullsub_51(a1 + 24);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    nullsub_51(a1);
    *(_BYTE *)(a1 + 56) = 0;
  }
  else
  {
    *(_QWORD *)a1 = &off_24CA79890;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    result = *(__n128 *)(a2 + 24);
    *(_OWORD *)(a1 + 38) = *(_OWORD *)(a2 + 38);
    *(__n128 *)(a1 + 24) = result;
    *(_BYTE *)(a1 + 56) = 1;
  }
  return result;
}

__n128 sub_2108B2F54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;
  __int128 v5;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  v5 = *(_OWORD *)(a3 + 32);
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a3 + 48);
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = v5;
  *(__n128 *)a2 = result;
  *(_BYTE *)(a2 + 56) = 0;
  *(_BYTE *)(a2 + 112) = 0;
  if (*(_BYTE *)(a3 + 112))
  {
    *(_QWORD *)(a2 + 56) = &off_24CA79890;
    *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
    *(_QWORD *)(a3 + 64) = 0;
    *(_QWORD *)(a3 + 72) = 0;
    result = *(__n128 *)(a3 + 80);
    *(_OWORD *)(a2 + 94) = *(_OWORD *)(a3 + 94);
    *(__n128 *)(a2 + 80) = result;
    *(_BYTE *)(a2 + 112) = 1;
  }
  return result;
}

__n128 sub_2108B2FB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;
  __int128 v5;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  v5 = *(_OWORD *)(a3 + 32);
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a3 + 48);
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = v5;
  *(__n128 *)a2 = result;
  *(_BYTE *)(a2 + 56) = 0;
  *(_BYTE *)(a2 + 112) = 0;
  if (*(_BYTE *)(a3 + 112))
  {
    *(_QWORD *)(a2 + 56) = &off_24CA79890;
    *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
    *(_QWORD *)(a3 + 64) = 0;
    *(_QWORD *)(a3 + 72) = 0;
    result = *(__n128 *)(a3 + 80);
    *(_OWORD *)(a2 + 94) = *(_OWORD *)(a3 + 94);
    *(__n128 *)(a2 + 80) = result;
    *(_BYTE *)(a2 + 112) = 1;
  }
  return result;
}

__n128 sub_2108B300C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;
  __int128 v5;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  v5 = *(_OWORD *)(a3 + 32);
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a3 + 48);
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = v5;
  *(__n128 *)a2 = result;
  *(_BYTE *)(a2 + 56) = 0;
  *(_BYTE *)(a2 + 112) = 0;
  if (*(_BYTE *)(a3 + 112))
  {
    *(_QWORD *)(a2 + 56) = &off_24CA79890;
    *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
    *(_QWORD *)(a3 + 64) = 0;
    *(_QWORD *)(a3 + 72) = 0;
    result = *(__n128 *)(a3 + 80);
    *(_OWORD *)(a2 + 94) = *(_OWORD *)(a3 + 94);
    *(__n128 *)(a2 + 80) = result;
    *(_BYTE *)(a2 + 112) = 1;
  }
  return result;
}

void sub_2108B3068()
{
  sub_2108B307C("basic_string");
}

void sub_2108B307C(const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_2108B30CC(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_24CA79208, MEMORY[0x24BEDAB00]);
}

void sub_2108B30B8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_2108B30CC(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
  return result;
}

void sub_2108B30F0()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = &unk_24CA799D8;
  __cxa_throw(exception, (struct type_info *)&unk_24CA799B0, (void (*)(void *))std::exception::~exception);
}

void sub_2108B3128(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x212BCC6FCLL);
}

void *sub_2108B314C(_BYTE *__dst, void *__src, unint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8)
      sub_2108A4B7C();
    v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v6 = a3 | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000;
    *v5 = v8;
    v5 = v8;
  }
  else
  {
    __dst[23] = a3;
  }
  return memmove(v5, __src, a3 + 1);
}

void sub_2108B31D8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24CA79A00;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_51(a1);
  JUMPOUT(0x212BCC6FCLL);
}

_QWORD *sub_2108B3250@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  __int128 *v2;
  __int128 v3;

  v2 = (__int128 *)result[2];
  if (*((char *)v2 + 23) < 0)
    return sub_2108B314C((_BYTE *)a2, *(void **)v2, *((_QWORD *)v2 + 1));
  v3 = *v2;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)v2 + 2);
  *(_OWORD *)a2 = v3;
  return result;
}

void sub_2108B327C()
{
  sub_2108A4B90("vector");
}

uint64_t sub_2108B3290(uint64_t a1, const char **a2, uint64_t *a3)
{
  const char *v5;
  size_t v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;

  v5 = *a2;
  v6 = strlen(*a2);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    sub_2108A4B7C();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    v8 = operator new(v9 + 1);
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v10 | 0x8000000000000000;
    *(_QWORD *)a1 = v8;
    goto LABEL_8;
  }
  *(_BYTE *)(a1 + 23) = v6;
  v8 = (void *)a1;
  if (v6)
LABEL_8:
    memmove(v8, v5, v7);
  *((_BYTE *)v8 + v7) = 0;
  v11 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 24) = v11;
  *(_QWORD *)(a1 + 32) = a3[1];
  a3[1] = 0;
  v12 = a3[2];
  *(_QWORD *)(a1 + 40) = v12;
  v13 = a3[3];
  *(_QWORD *)(a1 + 48) = v13;
  *(_DWORD *)(a1 + 56) = *((_DWORD *)a3 + 8);
  if (v13)
  {
    v14 = *(_QWORD *)(v12 + 8);
    v15 = *(_QWORD *)(a1 + 32);
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v14 >= v15)
        v14 %= v15;
    }
    else
    {
      v14 &= v15 - 1;
    }
    *(_QWORD *)(v11 + 8 * v14) = a1 + 40;
    a3[2] = 0;
    a3[3] = 0;
  }
  v16 = a3[5];
  a3[5] = 0;
  *(_QWORD *)(a1 + 64) = v16;
  *(_QWORD *)(a1 + 72) = a3[6];
  a3[6] = 0;
  v17 = a3[7];
  *(_QWORD *)(a1 + 80) = v17;
  v18 = a3[8];
  *(_QWORD *)(a1 + 88) = v18;
  *(_DWORD *)(a1 + 96) = *((_DWORD *)a3 + 18);
  if (v18)
  {
    v19 = *(_QWORD *)(v17 + 8);
    v20 = *(_QWORD *)(a1 + 72);
    if ((v20 & (v20 - 1)) != 0)
    {
      if (v19 >= v20)
        v19 %= v20;
    }
    else
    {
      v19 &= v20 - 1;
    }
    *(_QWORD *)(v16 + 8 * v19) = a1 + 80;
    a3[7] = 0;
    a3[8] = 0;
  }
  *(_OWORD *)(a1 + 104) = *((_OWORD *)a3 + 5);
  a3[10] = 0;
  a3[11] = 0;
  *(_QWORD *)(a1 + 120) = a3[12];
  return a1;
}

uint64_t sub_2108B3438(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  void **v9;
  void *v10;
  void **v12;
  char v13;

  v2 = *(std::__shared_weak_count **)(a1 + 88);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(_QWORD **)(a1 + 56);
    if (!v5)
      goto LABEL_12;
  }
  else
  {
LABEL_5:
    v5 = *(_QWORD **)(a1 + 56);
    if (!v5)
      goto LABEL_12;
  }
  do
  {
    v6 = v5;
    v5 = (_QWORD *)*v5;
    if (*((_BYTE *)v6 + 176))
    {
      v7 = *((unsigned int *)v6 + 42);
      if ((_DWORD)v7 != -1)
        ((void (*)(char *, _QWORD *))off_24CA79850[v7])(&v13, v6 + 6);
    }
    operator delete(v6);
  }
  while (v5);
LABEL_12:
  v8 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v8)
    operator delete(v8);
  v9 = *(void ***)(a1 + 16);
  if (v9)
  {
    do
    {
      v12 = (void **)*v9;
      if (*((char *)v9 + 39) < 0)
        operator delete(v9[2]);
      operator delete(v9);
      v9 = v12;
    }
    while (v12);
  }
  v10 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v10)
    operator delete(v10);
  return a1;
}

void sub_2108B354C(char **a1, unint64_t a2)
{
  char *v2;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  char *v11;

  v2 = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_2108B327C();
    v4 = a1[1];
    v5 = 24 * a2;
    v6 = (char *)operator new(24 * a2);
    v7 = &v6[v5];
    v8 = &v6[24 * ((v4 - v2) / 24)];
    if (v4 == v2)
    {
      *a1 = v8;
      a1[1] = v8;
      a1[2] = v7;
      if (v2)
LABEL_13:
        operator delete(v2);
    }
    else
    {
      v9 = &v6[24 * ((v4 - v2) / 24)];
      do
      {
        v10 = *(_OWORD *)(v4 - 24);
        *((_QWORD *)v9 - 1) = *((_QWORD *)v4 - 1);
        *(_OWORD *)(v9 - 24) = v10;
        v9 -= 24;
        *((_QWORD *)v4 - 2) = 0;
        *((_QWORD *)v4 - 1) = 0;
        *((_QWORD *)v4 - 3) = 0;
        v4 -= 24;
      }
      while (v4 != v2);
      v11 = *a1;
      v2 = a1[1];
      *a1 = v9;
      a1[1] = v8;
      a1[2] = v7;
      if (v2 != v11)
      {
        do
        {
          if (*(v2 - 1) < 0)
            operator delete(*((void **)v2 - 3));
          v2 -= 24;
        }
        while (v2 != v11);
        v2 = v11;
      }
      if (v2)
        goto LABEL_13;
    }
  }
}

uint64_t sub_2108B3680(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v5;

  v3 = *(void ***)(a1 + 8);
  v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v5 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

char *sub_2108B36E4(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;
  char *v14;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_2108B327C();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_2108B2B1C();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v9 = &v7[24 * v6];
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v10 = v8 + 24;
  v11 = (char *)*a1;
  v12 = (char *)a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    if (!v12)
      return v10;
    goto LABEL_20;
  }
  do
  {
    v13 = *(_OWORD *)(v12 - 24);
    *((_QWORD *)v8 - 1) = *((_QWORD *)v12 - 1);
    *(_OWORD *)(v8 - 24) = v13;
    v8 -= 24;
    *((_QWORD *)v12 - 2) = 0;
    *((_QWORD *)v12 - 1) = 0;
    *((_QWORD *)v12 - 3) = 0;
    v12 -= 24;
  }
  while (v12 != v11);
  v14 = (char *)*a1;
  v12 = (char *)a1[1];
  *a1 = v8;
  a1[1] = v10;
  a1[2] = v9;
  if (v12 != v14)
  {
    do
    {
      if (*(v12 - 1) < 0)
        operator delete(*((void **)v12 - 3));
      v12 -= 24;
    }
    while (v12 != v14);
    v12 = v14;
  }
  if (v12)
LABEL_20:
    operator delete(v12);
  return v10;
}

void sub_2108B3854()
{
  JUMPOUT(0x212BCC6FCLL);
}

_QWORD *sub_2108B3868(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_24CA79A40;
  result[1] = v3;
  return result;
}

uint64_t sub_2108B38A0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_24CA79A40;
  a2[1] = v2;
  return result;
}

uint64_t sub_2108B38C0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 8))();
}

uint64_t sub_2108B38C8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000210A0AE10)
    return a1 + 8;
  if (((v3 & 0x8000000210A0AE10 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000210A0AE10))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000210A0AE10 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *sub_2108B3944()
{
  return &unk_24CA79AB0;
}

_QWORD *sub_2108B3950(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_2108B3AE4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_2108ABF6C(a1);
}

_QWORD *sub_2108B3AF0(_QWORD *a1, __int128 **a2)
{
  uint64_t v3;
  __int128 *v4;
  __int128 *v5;
  int64_t v6;
  unint64_t v7;
  char *v8;

  a1[2] = 0;
  v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  v4 = *a2;
  v5 = a2[1];
  v6 = (char *)v5 - (char *)*a2;
  if (v5 != *a2)
  {
    v7 = 0xCCCCCCCCCCCCCCCDLL * (v6 >> 5);
    if (v7 >= 0x19999999999999ALL)
      sub_2108B327C();
    v8 = (char *)operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[160 * v7];
    a1[1] = sub_2108B3C28(v3, v4, v5, (uint64_t)v8);
  }
  return a1;
}

void sub_2108B3BA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  void **v13;
  void *v14;
  _DWORD *v16;
  _DWORD *v17;
  void *v18;
  uint64_t v19;

  v13[1] = v14;
  v16 = *v13;
  if (*v13)
  {
    v17 = v13[1];
    v18 = *v13;
    if (v17 != v16)
    {
      do
      {
        if (*((_BYTE *)v17 - 8))
        {
          v19 = *(v17 - 4);
          if ((_DWORD)v19 != -1)
            ((void (*)(char *, _DWORD *))off_24CA79850[v19])(&a13, v17 - 34);
          *(v17 - 4) = -1;
        }
        v17 -= 40;
      }
      while (v17 != v16);
      v18 = *v13;
    }
    v13[1] = v16;
    operator delete(v18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2108B3C28(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v4;
  __int128 *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  _BYTE v12[2];

  v4 = a4;
  v11 = a4;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      v7 = *v6;
      *(_QWORD *)(v4 + 16) = *((_QWORD *)v6 + 2);
      *(_OWORD *)v4 = v7;
      *(_BYTE *)(v4 + 24) = 0;
      *(_BYTE *)(v4 + 152) = 0;
      if (*((_BYTE *)v6 + 152))
      {
        *(_BYTE *)(v4 + 24) = 0;
        *(_DWORD *)(v4 + 144) = -1;
        v8 = *((unsigned int *)v6 + 36);
        v9 = v4;
        if ((_DWORD)v8 != -1)
        {
          ((void (*)(_BYTE *, uint64_t, char *))off_24CA79868[v8])(v12, v4 + 24, (char *)v6 + 24);
          *(_DWORD *)(v4 + 144) = v8;
          v9 = v11;
        }
        *(_BYTE *)(v4 + 152) = 1;
        v4 = v9;
      }
      v4 += 160;
      v11 = v4;
      v6 += 10;
    }
    while (v6 != a3);
  }
  return v4;
}

void sub_2108B3D1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v22 = *(unsigned int *)(v19 + 144);
  if ((_DWORD)v22 != -1)
    ((void (*)(char *, uint64_t))off_24CA79850[v22])(&a19, v20);
  *(_DWORD *)(v19 + 144) = -1;
  sub_2108B3D60((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_2108B3D60(uint64_t a1)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  char v8;

  if (!*(_BYTE *)(a1 + 24))
  {
    v4 = *(uint64_t **)(a1 + 8);
    v3 = *(uint64_t **)(a1 + 16);
    v5 = *v3;
    for (i = *v4; v5 != i; v5 -= 160)
    {
      if (*(_BYTE *)(v5 - 8))
      {
        v7 = *(unsigned int *)(v5 - 16);
        if ((_DWORD)v7 != -1)
          ((void (*)(char *, uint64_t))off_24CA79850[v7])(&v8, v5 - 136);
        *(_DWORD *)(v5 - 16) = -1;
      }
    }
  }
  return a1;
}

uint64_t sub_2108B3E00(uint64_t a1)
{
  void **v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  void **v15;
  void *v16;
  void **v18;
  _QWORD *v19;
  uint64_t v20;
  char v21;
  char v22;
  char v23;

  v2 = *(void ***)(a1 + 152);
  if (v2)
  {
    do
    {
      v7 = (void **)*v2;
      sub_2108B3438((uint64_t)(v2 + 5));
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v7;
    }
    while (v7);
  }
  v3 = *(void **)(a1 + 136);
  *(_QWORD *)(a1 + 136) = 0;
  if (v3)
    operator delete(v3);
  v4 = *(_QWORD *)(a1 + 112);
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 120);
    v6 = *(void **)(a1 + 112);
    if (v5 != v4)
    {
      do
      {
        if (*(_BYTE *)(v5 - 8))
        {
          v8 = *(unsigned int *)(v5 - 16);
          if ((_DWORD)v8 != -1)
            ((void (*)(char *, uint64_t))off_24CA79850[v8])(&v21, v5 - 136);
          *(_DWORD *)(v5 - 16) = -1;
        }
        v5 -= 160;
      }
      while (v5 != v4);
      v6 = *(void **)(a1 + 112);
    }
    *(_QWORD *)(a1 + 120) = v4;
    operator delete(v6);
  }
  v9 = *(_QWORD *)(a1 + 88);
  if (v9)
  {
    v10 = *(_QWORD *)(a1 + 96);
    v11 = *(void **)(a1 + 88);
    if (v10 != v9)
    {
      do
      {
        if (*(_BYTE *)(v10 - 8))
        {
          v12 = *(unsigned int *)(v10 - 16);
          if ((_DWORD)v12 != -1)
            ((void (*)(char *, uint64_t))off_24CA79850[v12])(&v22, v10 - 136);
          *(_DWORD *)(v10 - 16) = -1;
        }
        v10 -= 160;
      }
      while (v10 != v9);
      v11 = *(void **)(a1 + 88);
    }
    *(_QWORD *)(a1 + 96) = v9;
    operator delete(v11);
  }
  v13 = *(_QWORD **)(a1 + 64);
  while (v13)
  {
    v19 = v13;
    v13 = (_QWORD *)*v13;
    if (*((_BYTE *)v19 + 176))
    {
      v20 = *((unsigned int *)v19 + 42);
      if ((_DWORD)v20 != -1)
        ((void (*)(char *, _QWORD *))off_24CA79850[v20])(&v23, v19 + 6);
    }
    operator delete(v19);
  }
  v14 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v14)
    operator delete(v14);
  v15 = *(void ***)(a1 + 16);
  if (v15)
  {
    do
    {
      v18 = (void **)*v15;
      if (*((char *)v15 + 39) < 0)
        operator delete(v15[2]);
      operator delete(v15);
      v15 = v18;
    }
    while (v18);
  }
  v16 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v16)
    operator delete(v16);
  return a1;
}

uint64_t sub_2108B3FF0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  __int128 v5;
  char *v6;

  v4 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)a1 = v4;
  if (*((char *)a2 + 39) < 0)
  {
    sub_2108B314C((_BYTE *)(a1 + 16), (void *)a2[2], a2[3]);
  }
  else
  {
    v5 = *((_OWORD *)a2 + 1);
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_OWORD *)(a1 + 16) = v5;
  }
  sub_2108B4278(a1 + 40, a2 + 5);
  sub_2108B458C((_QWORD *)(a1 + 64), a2 + 8);
  *(_BYTE *)(a1 + 88) = 0;
  v6 = (char *)(a1 + 88);
  *(_BYTE *)(a1 + 112) = 0;
  if (*((_BYTE *)a2 + 112))
  {
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    sub_2108B4718(v6, a2[11], a2[12], 0xAAAAAAAAAAAAAAABLL * ((a2[12] - a2[11]) >> 3));
    *(_BYTE *)(a1 + 112) = 1;
  }
  return a1;
}

void sub_2108B40C4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;

  if (*(_BYTE *)(v1 + 112))
    sub_2109EE204((void **)(v1 + 88));
  sub_2108B4114(v4);
  sub_2108B418C(v3);
  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(a1);
}

void **sub_2108B4114(void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((_BYTE *)v3 - 8) && *((char *)v3 - 9) < 0)
          operator delete(*(v3 - 4));
        v3 -= 4;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void **sub_2108B418C(void **a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v2 = *a1;
  if (!*a1)
    return a1;
  v3 = a1[1];
  v4 = *a1;
  if (v3 == v2)
    goto LABEL_21;
  v5 = (uint64_t)v3 - 80;
  do
  {
    if (!*(_BYTE *)(v5 + 72))
      goto LABEL_11;
    v7 = *(_QWORD **)(v5 + 64);
    if ((_QWORD *)(v5 + 40) == v7)
    {
      v7 = (_QWORD *)(v5 + 40);
      v8 = 4;
    }
    else
    {
      if (!v7)
        goto LABEL_11;
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_11:
    if (*(_BYTE *)(v5 + 32))
    {
      v9 = *(_QWORD **)(v5 + 24);
      if ((_QWORD *)v5 == v9)
      {
        v9 = (_QWORD *)v5;
        v10 = 4;
        goto LABEL_16;
      }
      if (v9)
      {
        v10 = 5;
LABEL_16:
        (*(void (**)(void))(*v9 + 8 * v10))();
      }
    }
    if (*(_BYTE *)(v5 - 64) && *(char *)(v5 - 65) < 0)
      operator delete(*(void **)(v5 - 88));
    v6 = (void *)(v5 - 88);
    v5 -= 168;
  }
  while (v6 != v2);
  v4 = *a1;
LABEL_21:
  a1[1] = v2;
  operator delete(v4);
  return a1;
}

uint64_t sub_2108B4278(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  unint64_t v6;
  char *v7;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v3 = *a2;
  v4 = a2[1];
  v5 = v4 - *a2;
  if (v4 != *a2)
  {
    v6 = 0xCF3CF3CF3CF3CF3DLL * (v5 >> 3);
    if (v6 >= 0x186186186186187)
      sub_2108B327C();
    v7 = (char *)operator new(v5);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = &v7[168 * v6];
    sub_2108B4338((char *)a1, v3, v4);
  }
  return a1;
}

void sub_2108B4318(_Unwind_Exception *exception_object)
{
  _QWORD *v1;

  if (*v1)
    sub_2109EE26C();
  _Unwind_Resume(exception_object);
}

char *sub_2108B4338(char *result, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v7;

  v3 = result;
  v4 = *((_QWORD *)result + 1);
  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      result = sub_2108B43C0((char *)(v4 + v7), (__int128 *)(a2 + v7));
      v7 += 168;
    }
    while (a2 + v7 != a3);
    v4 += v7;
  }
  *((_QWORD *)v3 + 1) = v4;
  return result;
}

void sub_2108B43A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (v3)
    sub_2109EE32C(v2 + v3, v2);
  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

char *sub_2108B43C0(char *__dst, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  int v8;
  uint64_t v9;
  uint64_t v10;

  *__dst = 0;
  __dst[24] = 0;
  if (*((_BYTE *)a2 + 24))
  {
    if (*((char *)a2 + 23) < 0)
    {
      sub_2108B314C(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v4 = *a2;
      *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
      *(_OWORD *)__dst = v4;
    }
    __dst[24] = 1;
  }
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = *((_DWORD *)a2 + 20);
  __dst[88] = 0;
  *((_DWORD *)__dst + 20) = v8;
  *((_OWORD *)__dst + 4) = v7;
  *((_OWORD *)__dst + 3) = v6;
  *((_OWORD *)__dst + 2) = v5;
  __dst[120] = 0;
  if (*((_BYTE *)a2 + 120))
  {
    v9 = *((_QWORD *)a2 + 14);
    if (v9)
    {
      if ((__int128 *)v9 == (__int128 *)((char *)a2 + 88))
      {
        *((_QWORD *)__dst + 14) = __dst + 88;
        (*(void (**)(_QWORD, char *))(**((_QWORD **)a2 + 14) + 24))(*((_QWORD *)a2 + 14), __dst + 88);
        goto LABEL_12;
      }
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    }
    *((_QWORD *)__dst + 14) = v9;
LABEL_12:
    __dst[120] = 1;
  }
  __dst[128] = 0;
  __dst[160] = 0;
  if (*((_BYTE *)a2 + 160))
  {
    v10 = *((_QWORD *)a2 + 19);
    if (v10)
    {
      if ((__int128 *)v10 == a2 + 8)
      {
        *((_QWORD *)__dst + 19) = __dst + 128;
        (*(void (**)(_QWORD))(**((_QWORD **)a2 + 19) + 24))(*((_QWORD *)a2 + 19));
        goto LABEL_19;
      }
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    }
    *((_QWORD *)__dst + 19) = v10;
LABEL_19:
    __dst[160] = 1;
  }
  return __dst;
}

void sub_2108B44FC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2108B458C(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;

  a1[2] = 0;
  v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  v4 = *a2;
  v5 = a2[1];
  v6 = v5 - *a2;
  if (v5 != *a2)
  {
    if (v6 < 0)
      sub_2108B327C();
    v7 = (char *)operator new(v5 - *a2);
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[32 * (v6 >> 5)];
    a1[1] = sub_2108B4644(v3, v4, v5, (uint64_t)v7);
  }
  return a1;
}

void sub_2108B4618(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;

  v1[1] = v2;
  if (*v1)
    sub_2109EE400();
  _Unwind_Resume(exception_object);
}

uint64_t sub_2108B4644(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 *v10;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      v9 = a4 + v7;
      v10 = (__int128 *)(a2 + v7);
      *(_BYTE *)v9 = 0;
      *(_BYTE *)(v9 + 24) = 0;
      if (*(_BYTE *)(a2 + v7 + 24))
      {
        if (*((char *)v10 + 23) < 0)
        {
          sub_2108B314C((_BYTE *)(a4 + v7), *(void **)(a2 + v7), *(_QWORD *)(a2 + v7 + 8));
        }
        else
        {
          v8 = *v10;
          *(_QWORD *)(v9 + 16) = *((_QWORD *)v10 + 2);
          *(_OWORD *)v9 = v8;
        }
        *(_BYTE *)(v9 + 24) = 1;
      }
      v7 += 32;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_2108B46EC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  if (*(_BYTE *)(v1 + v2 + 24))
    sub_2109EE4A4(v1 + v2);
  sub_2109EE45C(v1 + v2, v1);
  _Unwind_Resume(a1);
}

char *sub_2108B4718(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  if (a4)
  {
    v5 = result;
    if (a4 >= 0xAAAAAAAAAAAAAABLL)
      sub_2108B327C();
    result = (char *)operator new(24 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = &result[24 * a4];
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        result = &v8[v9];
        v10 = a2 + v9;
        if (*(char *)(a2 + v9 + 23) < 0)
        {
          result = (char *)sub_2108B314C(result, *(void **)v10, *(_QWORD *)(v10 + 8));
        }
        else
        {
          *(_OWORD *)result = *(_OWORD *)v10;
          *((_QWORD *)result + 2) = *(_QWORD *)(v10 + 16);
        }
        v9 += 24;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_2108B47F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_2108B4848(&a9);
  _Unwind_Resume(a1);
}

void sub_2108B480C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  for (; v11; v11 -= 24)
  {
    if (*(char *)(v10 + v11 - 1) < 0)
      operator delete(*(void **)(v10 + v11 - 24));
  }
  *(_QWORD *)(v9 + 8) = v10;
  sub_2108B4848(&a9);
  _Unwind_Resume(a1);
}

void ***sub_2108B4848(void ***result)
{
  void ***v1;
  void **v2;
  void **v3;
  void **v4;
  void *v5;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (void **)**result;
    if (v3)
    {
      v4 = (void **)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {
          if (*((char *)v4 - 1) < 0)
            operator delete(*(v4 - 3));
          v4 -= 3;
        }
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t *sub_2108B48DC(uint64_t *result, __int128 *a2, __int128 *a3, size_t __sz)
{
  __int128 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 *v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char v25;
  char v26;

  v6 = a2;
  v7 = (uint64_t)result;
  v9 = (uint64_t)(result + 2);
  v8 = result[2];
  v10 = *result;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - *result) >> 5) < __sz)
  {
    if (v10)
    {
      v11 = result[1];
      v12 = (void *)*result;
      if (v11 != v10)
      {
        do
        {
          if (*(_BYTE *)(v11 - 8))
          {
            v13 = *(unsigned int *)(v11 - 16);
            if ((_DWORD)v13 != -1)
              ((void (*)(char *, uint64_t))off_24CA79850[v13])(&v26, v11 - 136);
            *(_DWORD *)(v11 - 16) = -1;
          }
          v11 -= 160;
        }
        while (v11 != v10);
        v12 = *(void **)v7;
      }
      *(_QWORD *)(v7 + 8) = v10;
      operator delete(v12);
      v8 = 0;
      *(_QWORD *)v7 = 0;
      *(_QWORD *)(v7 + 8) = 0;
      *(_QWORD *)(v7 + 16) = 0;
    }
    if (__sz > 0x199999999999999)
      goto LABEL_40;
    v19 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 5);
    v20 = 2 * v19;
    if (2 * v19 <= __sz)
      v20 = __sz;
    v21 = v19 >= 0xCCCCCCCCCCCCCCLL ? 0x199999999999999 : v20;
    if (v21 > 0x199999999999999)
LABEL_40:
      sub_2108B327C();
    v22 = 160 * v21;
    v23 = (char *)operator new(160 * v21);
    *(_QWORD *)v7 = v23;
    *(_QWORD *)(v7 + 8) = v23;
    *(_QWORD *)(v7 + 16) = &v23[v22];
    result = (uint64_t *)sub_2108B3C28(v9, v6, a3, (uint64_t)v23);
LABEL_30:
    *(_QWORD *)(v7 + 8) = result;
    return result;
  }
  v14 = result[1];
  if (0xCCCCCCCCCCCCCCCDLL * ((v14 - v10) >> 5) < __sz)
  {
    v15 = &a2[2 * ((v14 - v10) >> 5)];
    if (v14 != v10)
    {
      do
      {
        v16 = *v6;
        *(_QWORD *)(v10 + 16) = *((_QWORD *)v6 + 2);
        *(_OWORD *)v10 = v16;
        sub_2108B4B7C(v10 + 24, (uint64_t)v6 + 24);
        v6 += 10;
        v10 += 160;
      }
      while (v6 != v15);
      v10 = *(_QWORD *)(v7 + 8);
    }
    result = (uint64_t *)sub_2108B3C28(v9, v15, a3, v10);
    goto LABEL_30;
  }
  if (a2 != a3)
  {
    v17 = *result;
    do
    {
      v18 = *v6;
      *(_QWORD *)(v10 + 16) = *((_QWORD *)v6 + 2);
      *(_OWORD *)v10 = v18;
      result = (uint64_t *)sub_2108B4B7C(v10 + 24, (uint64_t)v6 + 24);
      v17 += 160;
      v6 += 10;
      v10 += 160;
    }
    while (v6 != a3);
    v14 = *(_QWORD *)(v7 + 8);
    if (v14 == v17)
      goto LABEL_38;
    do
    {
LABEL_35:
      if (*(_BYTE *)(v14 - 8))
      {
        v24 = *(unsigned int *)(v14 - 16);
        if ((_DWORD)v24 != -1)
          result = (uint64_t *)((uint64_t (*)(char *, uint64_t))off_24CA79850[v24])(&v25, v14 - 136);
        *(_DWORD *)(v14 - 16) = -1;
      }
      v14 -= 160;
    }
    while (v14 != v17);
    goto LABEL_38;
  }
  v17 = *result;
  if (v14 != v10)
    goto LABEL_35;
LABEL_38:
  *(_QWORD *)(v7 + 8) = v17;
  return result;
}

void sub_2108B4B64(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_2108B4B6C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_2108B4B7C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  _BYTE v10[2];

  v2 = result;
  if (*(unsigned __int8 *)(result + 128) == *(unsigned __int8 *)(a2 + 128))
  {
    if (!*(_BYTE *)(result + 128))
      return result;
    v3 = *(unsigned int *)(result + 120);
    v4 = *(unsigned int *)(a2 + 120);
    if ((_DWORD)v3 != -1)
    {
      if ((_DWORD)v4 == -1)
      {
        result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_24CA79850[v3])(&v8, result, a2);
        *(_DWORD *)(v2 + 120) = -1;
        return result;
      }
LABEL_15:
      v7 = result;
      return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_24CA79AD0[v4])(&v7, result, a2);
    }
    if ((_DWORD)v4 != -1)
      goto LABEL_15;
  }
  else if (*(_BYTE *)(result + 128))
  {
    v5 = *(unsigned int *)(result + 120);
    if ((_DWORD)v5 != -1)
      result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_24CA79850[v5])(&v9, result, a2);
    *(_DWORD *)(v2 + 120) = -1;
    *(_BYTE *)(v2 + 128) = 0;
  }
  else
  {
    *(_BYTE *)result = 0;
    *(_DWORD *)(result + 120) = -1;
    v6 = *(unsigned int *)(a2 + 120);
    if ((_DWORD)v6 != -1)
    {
      result = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))off_24CA79868[v6])(v10, result, a2);
      *(_DWORD *)(v2 + 120) = v6;
    }
    *(_BYTE *)(v2 + 128) = 1;
  }
  return result;
}

void sub_2108B4CB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  v15 = *(unsigned int *)(v13 + 120);
  if ((_DWORD)v15 != -1)
    ((void (*)(char *, uint64_t))off_24CA79850[v15])(&a13, v13);
  *(_DWORD *)(v13 + 120) = -1;
  _Unwind_Resume(exception_object);
}

__n128 sub_2108B4CF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7[2];

  if (*(_DWORD *)(*(_QWORD *)a1 + 120))
  {
    v7[0] = *(_QWORD *)a1;
    v7[1] = a3;
    sub_2108B4E14(v7);
  }
  else
  {
    v4 = *(_OWORD *)a3;
    v5 = *(_OWORD *)(a3 + 16);
    v6 = *(_OWORD *)(a3 + 32);
    *(_DWORD *)(a2 + 48) = *(_DWORD *)(a3 + 48);
    *(_OWORD *)(a2 + 16) = v5;
    *(_OWORD *)(a2 + 32) = v6;
    *(_OWORD *)a2 = v4;
    sub_2108B4FFC(a2 + 56, a3 + 56);
  }
  return result;
}

void sub_2108B4D54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6[2];

  if (*(_DWORD *)(*(_QWORD *)a1 + 120) == 1)
  {
    v3 = *(_OWORD *)a3;
    v4 = *(_OWORD *)(a3 + 16);
    v5 = *(_OWORD *)(a3 + 32);
    *(_DWORD *)(a2 + 48) = *(_DWORD *)(a3 + 48);
    *(_OWORD *)(a2 + 16) = v4;
    *(_OWORD *)(a2 + 32) = v5;
    *(_OWORD *)a2 = v3;
    sub_2108B4FFC(a2 + 56, a3 + 56);
  }
  else
  {
    v6[0] = *(_QWORD *)a1;
    v6[1] = a3;
    sub_2108B51D8(v6);
  }
}

void sub_2108B4DB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6[2];

  if (*(_DWORD *)(*(_QWORD *)a1 + 120) == 2)
  {
    v3 = *(_OWORD *)a3;
    v4 = *(_OWORD *)(a3 + 16);
    v5 = *(_OWORD *)(a3 + 32);
    *(_DWORD *)(a2 + 48) = *(_DWORD *)(a3 + 48);
    *(_OWORD *)(a2 + 16) = v4;
    *(_OWORD *)(a2 + 32) = v5;
    *(_OWORD *)a2 = v3;
    sub_2108B4FFC(a2 + 56, a3 + 56);
  }
  else
  {
    v6[0] = *(_QWORD *)a1;
    v6[1] = a3;
    sub_2108B53C4(v6);
  }
}

void sub_2108B4E14(uint64_t *a1)
{
  __int128 *v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  int v9;
  __int16 v10;
  unint64_t v11;
  int v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  int v22;
  uint64_t (**v23)();
  __int128 v24;
  _BYTE v25[30];
  char v26;
  char v27;

  v2 = *a1;
  v1 = (__int128 *)a1[1];
  v22 = *((_DWORD *)v1 + 12);
  v20 = v1[1];
  v21 = v1[2];
  v19 = *v1;
  LOBYTE(v23) = 0;
  v26 = 0;
  v3 = *((unsigned __int8 *)v1 + 112);
  if (*((_BYTE *)v1 + 112))
  {
    v23 = &off_24CA79890;
    v4 = *((_QWORD *)v1 + 8);
    v5 = (std::__shared_weak_count *)*((_QWORD *)v1 + 9);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v8 = *((_QWORD *)v1 + 12);
      v9 = *((_DWORD *)v1 + 26);
      v10 = *((_WORD *)v1 + 54);
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    else
    {
      v8 = *((_QWORD *)v1 + 12);
      v9 = *((_DWORD *)v1 + 26);
      v10 = *((_WORD *)v1 + 54);
    }
    *(_QWORD *)&v24 = v4;
    *((_QWORD *)&v24 + 1) = v5;
    v12 = *((_DWORD *)v1 + 22);
    *(_QWORD *)v25 = *((_QWORD *)v1 + 10);
    *(_DWORD *)&v25[8] = v12;
    *(_QWORD *)&v25[16] = v8;
    *(_DWORD *)&v25[24] = v9;
    *(_WORD *)&v25[28] = v10;
    if (v5)
    {
      v13 = (unint64_t *)&v5->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v26 = 1;
  }
  v15 = *(unsigned int *)(v2 + 120);
  if ((_DWORD)v15 != -1)
    ((void (*)(char *, uint64_t))off_24CA79850[v15])(&v27, v2);
  *(_DWORD *)(v2 + 48) = v22;
  *(_OWORD *)(v2 + 16) = v20;
  *(_OWORD *)(v2 + 32) = v21;
  *(_OWORD *)v2 = v19;
  *(_BYTE *)(v2 + 56) = 0;
  *(_BYTE *)(v2 + 112) = 0;
  if (v3)
  {
    *(_QWORD *)(v2 + 56) = &off_24CA79890;
    *(_OWORD *)(v2 + 64) = v24;
    v24 = 0uLL;
    v16 = *(_OWORD *)&v25[14];
    *(_OWORD *)(v2 + 80) = *(_OWORD *)v25;
    *(_OWORD *)(v2 + 94) = v16;
    *(_BYTE *)(v2 + 112) = 1;
    *(_DWORD *)(v2 + 120) = 0;
    nullsub_51(v25);
    if (*((_QWORD *)&v24 + 1))
    {
      v17 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v24 + 1) + 16))(*((_QWORD *)&v24 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v24 + 1));
      }
    }
    nullsub_51(&v23);
  }
  else
  {
    *(_DWORD *)(v2 + 120) = 0;
  }
}

void sub_2108B4FFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  __int16 v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;

  if (*(unsigned __int8 *)(a1 + 56) == *(unsigned __int8 *)(a2 + 56))
  {
    if (*(_BYTE *)(a1 + 56))
    {
      v5 = *(_QWORD *)(a2 + 8);
      v4 = *(_QWORD *)(a2 + 16);
      if (v4)
      {
        v6 = (unint64_t *)(v4 + 8);
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      v8 = *(std::__shared_weak_count **)(a1 + 16);
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v4;
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v11 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 38) = *(_OWORD *)(a2 + 38);
      *(_OWORD *)(a1 + 24) = v11;
    }
  }
  else if (*(_BYTE *)(a1 + 56))
  {
    nullsub_51(a1 + 24);
    v12 = *(std::__shared_weak_count **)(a1 + 16);
    if (v12)
    {
      v13 = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    nullsub_51(a1);
    *(_BYTE *)(a1 + 56) = 0;
  }
  else
  {
    *(_QWORD *)a1 = &off_24CA79890;
    v15 = *(_QWORD *)(a2 + 8);
    v16 = *(std::__shared_weak_count **)(a2 + 16);
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
      v19 = *(_QWORD *)(a2 + 40);
      v20 = *(_DWORD *)(a2 + 48);
      v21 = *(_WORD *)(a2 + 52);
      do
        v22 = __ldxr(v17);
      while (__stxr(v22 + 1, v17));
    }
    else
    {
      v19 = *(_QWORD *)(a2 + 40);
      v20 = *(_DWORD *)(a2 + 48);
      v21 = *(_WORD *)(a2 + 52);
    }
    *(_QWORD *)(a1 + 8) = v15;
    *(_QWORD *)(a1 + 16) = v16;
    v23 = *(_QWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = v23;
    *(_QWORD *)(a1 + 40) = v19;
    *(_DWORD *)(a1 + 48) = v20;
    *(_WORD *)(a1 + 52) = v21;
    if (!v16)
      goto LABEL_31;
    v24 = (unint64_t *)&v16->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
      *(_BYTE *)(a1 + 56) = 1;
    }
    else
    {
LABEL_31:
      *(_BYTE *)(a1 + 56) = 1;
    }
  }
}

void sub_2108B51D8(uint64_t *a1)
{
  __int128 *v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  int v9;
  __int16 v10;
  unint64_t v11;
  int v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  int v22;
  uint64_t (**v23)();
  __int128 v24;
  _BYTE v25[30];
  char v26;
  char v27;

  v2 = *a1;
  v1 = (__int128 *)a1[1];
  v22 = *((_DWORD *)v1 + 12);
  v20 = v1[1];
  v21 = v1[2];
  v19 = *v1;
  LOBYTE(v23) = 0;
  v26 = 0;
  v3 = *((unsigned __int8 *)v1 + 112);
  if (*((_BYTE *)v1 + 112))
  {
    v23 = &off_24CA79890;
    v4 = *((_QWORD *)v1 + 8);
    v5 = (std::__shared_weak_count *)*((_QWORD *)v1 + 9);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v8 = *((_QWORD *)v1 + 12);
      v9 = *((_DWORD *)v1 + 26);
      v10 = *((_WORD *)v1 + 54);
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    else
    {
      v8 = *((_QWORD *)v1 + 12);
      v9 = *((_DWORD *)v1 + 26);
      v10 = *((_WORD *)v1 + 54);
    }
    *(_QWORD *)&v24 = v4;
    *((_QWORD *)&v24 + 1) = v5;
    v12 = *((_DWORD *)v1 + 22);
    *(_QWORD *)v25 = *((_QWORD *)v1 + 10);
    *(_DWORD *)&v25[8] = v12;
    *(_QWORD *)&v25[16] = v8;
    *(_DWORD *)&v25[24] = v9;
    *(_WORD *)&v25[28] = v10;
    if (v5)
    {
      v13 = (unint64_t *)&v5->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v26 = 1;
  }
  v15 = *(unsigned int *)(v2 + 120);
  if ((_DWORD)v15 != -1)
    ((void (*)(char *, uint64_t))off_24CA79850[v15])(&v27, v2);
  *(_DWORD *)(v2 + 48) = v22;
  *(_OWORD *)(v2 + 16) = v20;
  *(_OWORD *)(v2 + 32) = v21;
  *(_OWORD *)v2 = v19;
  *(_BYTE *)(v2 + 56) = 0;
  *(_BYTE *)(v2 + 112) = 0;
  if (v3)
  {
    *(_QWORD *)(v2 + 56) = &off_24CA79890;
    *(_OWORD *)(v2 + 64) = v24;
    v24 = 0uLL;
    v16 = *(_OWORD *)&v25[14];
    *(_OWORD *)(v2 + 80) = *(_OWORD *)v25;
    *(_OWORD *)(v2 + 94) = v16;
    *(_BYTE *)(v2 + 112) = 1;
    *(_DWORD *)(v2 + 120) = 1;
    nullsub_51(v25);
    if (*((_QWORD *)&v24 + 1))
    {
      v17 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v24 + 1) + 16))(*((_QWORD *)&v24 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v24 + 1));
      }
    }
    nullsub_51(&v23);
  }
  else
  {
    *(_DWORD *)(v2 + 120) = 1;
  }
}

void sub_2108B53C4(uint64_t *a1)
{
  __int128 *v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  int v9;
  __int16 v10;
  unint64_t v11;
  int v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  int v22;
  uint64_t (**v23)();
  __int128 v24;
  _BYTE v25[30];
  char v26;
  char v27;

  v2 = *a1;
  v1 = (__int128 *)a1[1];
  v22 = *((_DWORD *)v1 + 12);
  v20 = v1[1];
  v21 = v1[2];
  v19 = *v1;
  LOBYTE(v23) = 0;
  v26 = 0;
  v3 = *((unsigned __int8 *)v1 + 112);
  if (*((_BYTE *)v1 + 112))
  {
    v23 = &off_24CA79890;
    v4 = *((_QWORD *)v1 + 8);
    v5 = (std::__shared_weak_count *)*((_QWORD *)v1 + 9);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v8 = *((_QWORD *)v1 + 12);
      v9 = *((_DWORD *)v1 + 26);
      v10 = *((_WORD *)v1 + 54);
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    else
    {
      v8 = *((_QWORD *)v1 + 12);
      v9 = *((_DWORD *)v1 + 26);
      v10 = *((_WORD *)v1 + 54);
    }
    *(_QWORD *)&v24 = v4;
    *((_QWORD *)&v24 + 1) = v5;
    v12 = *((_DWORD *)v1 + 22);
    *(_QWORD *)v25 = *((_QWORD *)v1 + 10);
    *(_DWORD *)&v25[8] = v12;
    *(_QWORD *)&v25[16] = v8;
    *(_DWORD *)&v25[24] = v9;
    *(_WORD *)&v25[28] = v10;
    if (v5)
    {
      v13 = (unint64_t *)&v5->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v26 = 1;
  }
  v15 = *(unsigned int *)(v2 + 120);
  if ((_DWORD)v15 != -1)
    ((void (*)(char *, uint64_t))off_24CA79850[v15])(&v27, v2);
  *(_DWORD *)(v2 + 48) = v22;
  *(_OWORD *)(v2 + 16) = v20;
  *(_OWORD *)(v2 + 32) = v21;
  *(_OWORD *)v2 = v19;
  *(_BYTE *)(v2 + 56) = 0;
  *(_BYTE *)(v2 + 112) = 0;
  if (v3)
  {
    *(_QWORD *)(v2 + 56) = &off_24CA79890;
    *(_OWORD *)(v2 + 64) = v24;
    v24 = 0uLL;
    v16 = *(_OWORD *)&v25[14];
    *(_OWORD *)(v2 + 80) = *(_OWORD *)v25;
    *(_OWORD *)(v2 + 94) = v16;
    *(_BYTE *)(v2 + 112) = 1;
    *(_DWORD *)(v2 + 120) = 2;
    nullsub_51(v25);
    if (*((_QWORD *)&v24 + 1))
    {
      v17 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v24 + 1) + 16))(*((_QWORD *)&v24 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v24 + 1));
      }
    }
    nullsub_51(&v23);
  }
  else
  {
    *(_DWORD *)(v2 + 120) = 2;
  }
}

uint64_t sub_2108B55B4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;

  if (*(_BYTE *)(a1 + 112))
  {
    v2 = *(_QWORD *)(a1 + 88);
    if (v2)
    {
      v3 = *(_QWORD *)(a1 + 96);
      v4 = *(void **)(a1 + 88);
      if (v3 != v2)
      {
        do
        {
          if (*(char *)(v3 - 1) < 0)
            operator delete(*(void **)(v3 - 24));
          v3 -= 24;
        }
        while (v3 != v2);
        v4 = *(void **)(a1 + 88);
      }
      *(_QWORD *)(a1 + 96) = v2;
      operator delete(v4);
    }
  }
  v5 = *(_QWORD *)(a1 + 64);
  if (v5)
  {
    v6 = *(_QWORD *)(a1 + 72);
    v7 = *(void **)(a1 + 64);
    if (v6 != v5)
    {
      do
      {
        if (*(_BYTE *)(v6 - 8) && *(char *)(v6 - 9) < 0)
          operator delete(*(void **)(v6 - 32));
        v6 -= 32;
      }
      while (v6 != v5);
      v7 = *(void **)(a1 + 64);
    }
    *(_QWORD *)(a1 + 72) = v5;
    operator delete(v7);
  }
  v8 = *(_QWORD *)(a1 + 40);
  if (!v8)
    goto LABEL_40;
  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(void **)(a1 + 40);
  if (v9 == v8)
    goto LABEL_39;
  v11 = v9 - 80;
  do
  {
    if (!*(_BYTE *)(v11 + 72))
      goto LABEL_29;
    v13 = *(_QWORD **)(v11 + 64);
    if ((_QWORD *)(v11 + 40) == v13)
    {
      v13 = (_QWORD *)(v11 + 40);
      v14 = 4;
    }
    else
    {
      if (!v13)
        goto LABEL_29;
      v14 = 5;
    }
    (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_29:
    if (*(_BYTE *)(v11 + 32))
    {
      v15 = *(_QWORD **)(v11 + 24);
      if ((_QWORD *)v11 == v15)
      {
        v15 = (_QWORD *)v11;
        v16 = 4;
        goto LABEL_34;
      }
      if (v15)
      {
        v16 = 5;
LABEL_34:
        (*(void (**)(void))(*v15 + 8 * v16))();
      }
    }
    if (*(_BYTE *)(v11 - 64) && *(char *)(v11 - 65) < 0)
      operator delete(*(void **)(v11 - 88));
    v12 = v11 - 88;
    v11 -= 168;
  }
  while (v12 != v8);
  v10 = *(void **)(a1 + 40);
LABEL_39:
  *(_QWORD *)(a1 + 48) = v8;
  operator delete(v10);
LABEL_40:
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

_QWORD *sub_2108B5764(_QWORD *a1, uint64_t a2)
{
  const void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  v4 = *(const void **)a2;
  v5 = *(std::__shared_weak_count **)(a2 + 8);
  v17 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_2108B5874(&v18, v4);
  v8 = v19;
  *a1 = v18;
  a1[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v11 = v19;
    if (v19)
    {
      v12 = (unint64_t *)&v19->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  if (!v17)
    return a1;
  v14 = (unint64_t *)&v17->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
    return a1;
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  return a1;
}

void sub_2108B5860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2108A894C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_2108B5874(_QWORD *a1, CFTypeRef cf)
{
  _QWORD *v4;

  if (cf)
    j__CFRetain(cf);
  *a1 = cf;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24CA79AF8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = cf;
  a1[1] = v4;
  return a1;
}

void sub_2108B58D4(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    j__CFRelease(v1);
  __cxa_rethrow();
}

void sub_2108B58EC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_2108B5904(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BCC6FCLL);
}

void sub_2108B5928(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    j__CFRelease(v1);
}

uint64_t sub_2108B5948(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIPK9__CFArrayEC1ES5_EUlS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIPK9__CFArrayEC1ES5_EUlS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIPK9__CFArrayEC1ES5_EUlS5_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIPK9__CFArrayEC1ES5_EUlS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_2108B59B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2108C61B0(a1, a2);
  *(_QWORD *)(v4 + 40) = *(_QWORD *)(a2 + 40);
  sub_2108B5A84(v4 + 48, a2 + 48);
  sub_2108B3AF0((_QWORD *)(a1 + 88), (__int128 **)(a2 + 88));
  sub_2108B3AF0((_QWORD *)(a1 + 112), (__int128 **)(a2 + 112));
  sub_2108B62B0(a1 + 136, a2 + 136);
  return a1;
}

void sub_2108B5A34(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void **v4;

  sub_2108AA67C(v4);
  sub_2108AA67C(v3);
  sub_2108AA724(v2);
  sub_2108AA7B8(v1);
  _Unwind_Resume(a1);
}

void sub_2108B5A70(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108AA7B8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2108B5A84(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_2108B5C58(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    sub_2108B5E04(a1, i + 2, (uint64_t)(i + 2));
  return a1;
}

void sub_2108B5B9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108B5BC4(v1);
  _Unwind_Resume(a1);
}

void sub_2108B5BB0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108B5BC4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2108B5BC4(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  char v7;

  v2 = *(_QWORD **)(a1 + 16);
  while (v2)
  {
    v3 = v2;
    v2 = (_QWORD *)*v2;
    if (*((_BYTE *)v3 + 176))
    {
      v4 = *((unsigned int *)v3 + 42);
      if ((_DWORD)v4 != -1)
        ((void (*)(char *, _QWORD *))off_24CA79850[v4])(&v7, v3 + 6);
    }
    operator delete(v3);
  }
  v5 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v5)
    operator delete(v5);
  return a1;
}

void sub_2108B5C58(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;

  if (!a2)
  {
    v15 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v15)
      operator delete(v15);
    *(_QWORD *)(a1 + 8) = 0;
    return;
  }
  if (a2 >> 61)
    sub_2108B2B1C();
  v4 = operator new(8 * a2);
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v6 = 0;
  *(_QWORD *)(a1 + 8) = a2;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
  while (a2 != v6);
  v8 = a1 + 16;
  v7 = *(_QWORD **)(a1 + 16);
  if (v7)
  {
    v9 = v7[1];
    v10 = a2 - 1;
    if ((a2 & (a2 - 1)) == 0)
    {
      v11 = v9 & v10;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = v8;
      while (1)
      {
        v12 = (_QWORD *)*v7;
        if (!*v7)
          break;
        v13 = v12[1] & v10;
        if (v13 == v11)
        {
          v7 = (_QWORD *)*v7;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v13))
        {
          *v7 = *v12;
          v14 = 8 * v13;
          *v12 = **(_QWORD **)(*(_QWORD *)a1 + v14);
          **(_QWORD **)(*(_QWORD *)a1 + v14) = v12;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = v7;
          v7 = v12;
          v11 = v13;
        }
      }
      return;
    }
    if (v9 >= a2)
      v9 %= a2;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = v8;
    v16 = (_QWORD *)*v7;
    if (*v7)
    {
      while (1)
      {
        v18 = v16[1];
        if (v18 >= a2)
          v18 %= a2;
        if (v18 == v9)
          goto LABEL_25;
        if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v18))
        {
          *v7 = *v16;
          v17 = 8 * v18;
          *v16 = **(_QWORD **)(*(_QWORD *)a1 + v17);
          **(_QWORD **)(*(_QWORD *)a1 + v17) = v16;
          v16 = v7;
LABEL_25:
          v7 = v16;
          v16 = (_QWORD *)*v16;
          if (!v16)
            return;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v18) = v7;
          v7 = v16;
          v16 = (_QWORD *)*v16;
          v9 = v18;
          if (!v16)
            return;
        }
      }
    }
  }
}

_QWORD *sub_2108B5E04(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  _QWORD *v8;
  _QWORD *result;
  unint64_t v10;
  uint64_t v11;
  float v12;
  float v13;
  _QWORD *v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  int8x8_t v19;
  unint64_t v20;
  uint8x8_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;

  v5 = *a2;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v5 >= v6)
        v3 = v5 % v6;
    }
    else
    {
      v3 = (v6 - 1) & v5;
    }
    v8 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v8)
    {
      result = (_QWORD *)*v8;
      if (*v8)
      {
        if (v7.u32[0] < 2uLL)
        {
          while (1)
          {
            v11 = result[1];
            if (v11 == v5)
            {
              if (result[2] == v5)
                return result;
            }
            else if ((v11 & (v6 - 1)) != v3)
            {
              goto LABEL_23;
            }
            result = (_QWORD *)*result;
            if (!result)
              goto LABEL_23;
          }
        }
        do
        {
          v10 = result[1];
          if (v10 == v5)
          {
            if (result[2] == v5)
              return result;
          }
          else
          {
            if (v10 >= v6)
              v10 %= v6;
            if (v10 != v3)
              break;
          }
          result = (_QWORD *)*result;
        }
        while (result);
      }
    }
  }
LABEL_23:
  sub_2108B612C(a1, *a2, a3, (uint64_t)&v25);
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v6 || (float)(v13 * (float)v6) < v12)
  {
    v15 = 1;
    if (v6 >= 3)
      v15 = (v6 & (v6 - 1)) != 0;
    v16 = v15 | (2 * v6);
    v17 = vcvtps_u32_f32(v12 / v13);
    if (v16 <= v17)
      prime = v17;
    else
      prime = v16;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v19 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v19)
      goto LABEL_37;
    if (prime < *(_QWORD *)&v19)
    {
      v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v19 < 3uLL || (v21 = (uint8x8_t)vcnt_s8(v19), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        v20 = std::__next_prime(v20);
      }
      else
      {
        v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2)
          v20 = v22;
      }
      if (prime <= v20)
        prime = v20;
      if (prime < *(_QWORD *)&v19)
LABEL_37:
        sub_2108B5C58(a1, prime);
    }
    v6 = *(_QWORD *)(a1 + 8);
    v23 = v6 - 1;
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v5 >= v6)
      {
        v3 = v5 % v6;
        v14 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v5 % v6));
        if (v14)
          goto LABEL_26;
      }
      else
      {
        v3 = v5;
        v14 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
        if (v14)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = v23 & v5;
      v14 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v23 & v5));
      if (v14)
        goto LABEL_26;
    }
LABEL_50:
    *v25 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*v25)
    {
      v24 = *(_QWORD *)(*v25 + 8);
      if ((v6 & (v6 - 1)) != 0)
      {
        if (v24 >= v6)
          v24 %= v6;
      }
      else
      {
        v24 &= v6 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v25;
    }
    goto LABEL_61;
  }
  v14 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (!v14)
    goto LABEL_50;
LABEL_26:
  *v25 = *v14;
  *v14 = v25;
LABEL_61:
  result = v25;
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_2108B6118(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2108B623C((uint64_t *)va);
  _Unwind_Resume(a1);
}

char *sub_2108B612C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *result;
  char *v9;
  uint64_t v10;
  _BYTE v11[2];

  v7 = a1 + 16;
  result = (char *)operator new(0xB8uLL);
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)result = 0;
  *((_QWORD *)result + 1) = a2;
  *((_QWORD *)result + 2) = *(_QWORD *)a3;
  *(_OWORD *)(result + 24) = *(_OWORD *)(a3 + 8);
  *((_QWORD *)result + 5) = *(_QWORD *)(a3 + 24);
  result[48] = 0;
  result[176] = 0;
  if (*(_BYTE *)(a3 + 160))
  {
    v9 = result;
    result[48] = 0;
    *((_DWORD *)result + 42) = -1;
    v10 = *(unsigned int *)(a3 + 152);
    if ((_DWORD)v10 != -1)
    {
      result = (char *)((uint64_t (*)(_BYTE *, char *, uint64_t))off_24CA79868[v10])(v11, result + 48, a3 + 32);
      *((_DWORD *)v9 + 42) = v10;
    }
    v9[176] = 1;
  }
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_2108B61F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v17 = *(unsigned int *)(v14 + 168);
  if ((_DWORD)v17 != -1)
    ((void (*)(char *, uint64_t))off_24CA79850[v17])(&a13, v15);
  *(_DWORD *)(v14 + 168) = -1;
  sub_2108B623C(v13);
  _Unwind_Resume(a1);
}

uint64_t *sub_2108B623C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      if (*(_BYTE *)(v2 + 176))
      {
        v3 = *(unsigned int *)(v2 + 168);
        if ((_DWORD)v3 != -1)
          ((void (*)(char *, uint64_t))off_24CA79850[v3])(&v5, v2 + 48);
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t sub_2108B62B0(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  __int128 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_2108B5C58(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(__int128 **)(a2 + 16); i; i = *(__int128 **)i)
    sub_2108B63F0(a1, (uint64_t)(i + 1), i + 1);
  return a1;
}

void sub_2108B63C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108AB2FC(v1);
  _Unwind_Resume(a1);
}

void sub_2108B63DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108AB2FC(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_2108B63F0(uint64_t a1, uint64_t a2, __int128 *a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  float v26;
  float v27;
  _QWORD *v28;
  _QWORD *v29;
  _BOOL8 v30;
  unint64_t v31;
  unint64_t v32;
  size_t prime;
  int8x8_t v34;
  unint64_t v35;
  uint8x8_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD v41[2];
  char v42;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = sub_2108B6894((uint64_t)v41, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v21 = v14[1];
            if (v21 == v10)
            {
              v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0)
                v23 = *((unsigned __int8 *)v14 + 39);
              else
                v23 = v14[3];
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3]))
                    return v14;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return v14;
                  v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24)
                      return v14;
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v10)
          {
            v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v14 + 39);
            else
              v19 = v14[3];
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3]))
                  return v14;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return v14;
                v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  v25 = operator new(0x90uLL);
  v41[0] = v25;
  v41[1] = a1 + 16;
  v42 = 0;
  *v25 = 0;
  v25[1] = v10;
  sub_2108B6CE0(v25 + 2, a3);
  v42 = 1;
  v26 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v27 = *(float *)(a1 + 32);
  if (!v11 || (float)(v27 * (float)v11) < v26)
  {
    v30 = 1;
    if (v11 >= 3)
      v30 = (v11 & (v11 - 1)) != 0;
    v31 = v30 | (2 * v11);
    v32 = vcvtps_u32_f32(v26 / v27);
    if (v31 <= v32)
      prime = v32;
    else
      prime = v31;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v34 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v34)
      goto LABEL_65;
    if (prime < *(_QWORD *)&v34)
    {
      v35 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v34 < 3uLL || (v36 = (uint8x8_t)vcnt_s8(v34), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
      {
        v35 = std::__next_prime(v35);
      }
      else
      {
        v37 = 1 << -(char)__clz(v35 - 1);
        if (v35 >= 2)
          v35 = v37;
      }
      if (prime <= v35)
        prime = v35;
      if (prime < *(_QWORD *)&v34)
LABEL_65:
        sub_2108B5C58(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v38 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v3 = v10 % v11;
        v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        v29 = (_QWORD *)v41[0];
        if (v28)
          goto LABEL_54;
      }
      else
      {
        v3 = v10;
        v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        v29 = (_QWORD *)v41[0];
        if (v28)
          goto LABEL_54;
      }
    }
    else
    {
      v3 = v38 & v10;
      v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v38 & v10));
      v29 = (_QWORD *)v41[0];
      if (v28)
        goto LABEL_54;
    }
LABEL_78:
    *v29 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v41[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v41[0])
    {
      v39 = *(_QWORD *)(*(_QWORD *)v41[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v39 >= v11)
          v39 %= v11;
      }
      else
      {
        v39 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v39) = v41[0];
    }
    goto LABEL_89;
  }
  v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v29 = (_QWORD *)v41[0];
  if (!v28)
    goto LABEL_78;
LABEL_54:
  *v29 = *v28;
  *v28 = v41[0];
LABEL_89:
  v14 = (uint64_t *)v41[0];
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_2108B6814(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2108B6840((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2108B6828(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2108B6840((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_2108B6840(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      sub_2108B3438(v2 + 40);
      if (*(char *)(v2 + 39) < 0)
        operator delete(*(void **)(v2 + 16));
    }
    operator delete((void *)v2);
  }
  return a1;
}

unint64_t sub_2108B6894(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;

  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      v23 = *(uint64_t *)((char *)a2 + a3 - 48);
      v24 = *(uint64_t *)((char *)a2 + a3 - 40);
      v25 = *(uint64_t *)((char *)a2 + a3 - 24);
      v27 = *(uint64_t *)((char *)a2 + a3 - 64);
      v26 = *(uint64_t *)((char *)a2 + a3 - 56);
      v28 = *(uint64_t *)((char *)a2 + a3 - 16);
      v29 = *(uint64_t *)((char *)a2 + a3 - 8);
      v30 = v26 + v28;
      v31 = 0x9DDFEA08EB382D69
          * (v25 ^ ((0x9DDFEA08EB382D69 * (v25 ^ (v23 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v25 ^ (v23 + a3))));
      v32 = 0x9DDFEA08EB382D69 * (v31 ^ (v31 >> 47));
      v33 = v27 + a3 + v26 + v23;
      v34 = v33 + v24;
      v35 = __ROR8__(v33, 44) + v27 + a3 + __ROR8__(v24 + v27 + a3 - 0x622015F714C7D297 * (v31 ^ (v31 >> 47)), 21);
      v36 = v26 + v28 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      v37 = v36 + v25 + v28;
      v38 = __ROR8__(v37, 44);
      v39 = v37 + v29;
      v40 = v38 + v36 + __ROR8__(v36 + v24 + v29, 21);
      v42 = *a2;
      v41 = a2 + 4;
      v43 = v42 - 0x4B6D499041670D8DLL * v24;
      v44 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v45 = *(v41 - 3);
        v46 = v43 + v34 + v30 + v45;
        v47 = v41[2];
        v48 = v41[3];
        v49 = v41[1];
        v30 = v49 + v34 - 0x4B6D499041670D8DLL * __ROR8__(v30 + v35 + v47, 42);
        v50 = v32 + v39;
        v51 = *(v41 - 2);
        v52 = *(v41 - 1);
        v53 = *(v41 - 4) - 0x4B6D499041670D8DLL * v35;
        v54 = v53 + v39 + v52;
        v55 = v53 + v45 + v51;
        v34 = v55 + v52;
        v56 = __ROR8__(v55, 44) + v53;
        v57 = (0xB492B66FBE98F273 * __ROR8__(v46, 37)) ^ v40;
        v43 = 0xB492B66FBE98F273 * __ROR8__(v50, 33);
        v35 = v56 + __ROR8__(v54 + v57, 21);
        v58 = v43 + v40 + *v41;
        v39 = v58 + v49 + v47 + v48;
        v40 = __ROR8__(v58 + v49 + v47, 44) + v58 + __ROR8__(v30 + v51 + v58 + v48, 21);
        v41 += 8;
        v32 = v57;
        v44 += 64;
      }
      while (v44);
      v59 = v43
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v40 ^ ((0x9DDFEA08EB382D69 * (v40 ^ v35)) >> 47) ^ (0x9DDFEA08EB382D69 * (v40 ^ v35)))) ^ ((0x9DDFEA08EB382D69 * (v40 ^ ((0x9DDFEA08EB382D69 * (v40 ^ v35)) >> 47) ^ (0x9DDFEA08EB382D69 * (v40 ^ v35)))) >> 47));
      v60 = 0x9DDFEA08EB382D69
          * (v59 ^ (v57
                  - 0x4B6D499041670D8DLL * (v30 ^ (v30 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v39 ^ ((0x9DDFEA08EB382D69 * (v39 ^ v34)) >> 47) ^ (0x9DDFEA08EB382D69 * (v39 ^ v34)))) ^ ((0x9DDFEA08EB382D69 * (v39 ^ ((0x9DDFEA08EB382D69 * (v39 ^ v34)) >> 47) ^ (0x9DDFEA08EB382D69 * (v39 ^ v34)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v59 ^ (v60 >> 47) ^ v60)) ^ ((0x9DDFEA08EB382D69 * (v59 ^ (v60 >> 47) ^ v60)) >> 47));
    }
    else
    {
      v6 = *(uint64_t *)((char *)a2 + a3 - 16);
      v7 = *a2 - 0x3C5A37A36834CED9 * (v6 + a3);
      v9 = a2[2];
      v8 = a2[3];
      v10 = __ROR8__(v7 + v8, 52);
      v11 = v7 + a2[1];
      v12 = __ROR8__(v11, 7);
      v13 = v11 + v9;
      v14 = *(uint64_t *)((char *)a2 + a3 - 32) + v9;
      v15 = v12 + __ROR8__(*a2 - 0x3C5A37A36834CED9 * (v6 + a3), 37) + v10 + __ROR8__(v13, 31);
      v16 = *(uint64_t *)((char *)a2 + a3 - 24) + v14 + v6;
      v17 = 0xC3A5C85C97CB3127 * (v16 + *(uint64_t *)((char *)a2 + a3 - 8) + v8 + v15)
          - 0x651E95C4D06FBFB1
          * (v13
           + v8
           + __ROR8__(v14, 37)
           + __ROR8__(*(uint64_t *)((char *)a2 + a3 - 24) + v14, 7)
           + __ROR8__(*(uint64_t *)((char *)a2 + a3 - 8) + v8 + v14, 52)
           + __ROR8__(v16, 31));
      return 0x9AE16A3B2F90404FLL
           * ((v15 - 0x3C5A37A36834CED9 * (v17 ^ (v17 >> 47))) ^ ((v15 - 0x3C5A37A36834CED9 * (v17 ^ (v17 >> 47))) >> 47));
    }
  }
  else if (a3 > 0x10)
  {
    v18 = a2[1];
    v19 = 0xB492B66FBE98F273 * *a2;
    v20 = __ROR8__(0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a2 + a3 - 8), 30) + __ROR8__(v19 - v18, 43);
    v21 = v19 + a3 + __ROR8__(v18 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a2 + a3 - 8);
    v22 = 0x9DDFEA08EB382D69 * ((v20 - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)a2 + a3 - 16)) ^ v21);
    return 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v21 ^ (v22 >> 47) ^ v22)) ^ ((0x9DDFEA08EB382D69 * (v21 ^ (v22 >> 47) ^ v22)) >> 47));
  }
  else if (a3 < 9)
  {
    if (a3 < 4)
    {
      result = 0x9AE16A3B2F90404FLL;
      if (a3)
      {
        v63 = (0xC949D7C7509E6557 * (a3 + 4 * *((unsigned __int8 *)a2 + a3 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                       * (*(unsigned __int8 *)a2 | ((unint64_t)*((unsigned __int8 *)a2 + (a3 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v63 ^ (v63 >> 47));
      }
    }
    else
    {
      v61 = *(unsigned int *)((char *)a2 + a3 - 4);
      v62 = 0x9DDFEA08EB382D69 * (((8 * *(_DWORD *)a2) + a3) ^ v61);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v61 ^ (v62 >> 47) ^ v62)) ^ ((0x9DDFEA08EB382D69 * (v61 ^ (v62 >> 47) ^ v62)) >> 47));
    }
  }
  else
  {
    v3 = *(uint64_t *)((char *)a2 + a3 - 8);
    v4 = __ROR8__(v3 + a3, a3);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *a2)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *a2)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *a2)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *a2)))) >> 47))) ^ v3;
  }
  return result;
}

_QWORD *sub_2108B6CE0(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  if (*((char *)a2 + 23) < 0)
  {
    sub_2108B314C(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  sub_2108B6DD0((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  sub_2108B5A84((uint64_t)(__dst + 8), (uint64_t)(a2 + 4));
  v5 = *((_QWORD *)a2 + 14);
  __dst[13] = *((_QWORD *)a2 + 13);
  __dst[14] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  __dst[15] = *((_QWORD *)a2 + 15);
  return __dst;
}

void sub_2108B6D78(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v4;
  void *v5;

  v4 = *(void ***)(v1 + 40);
  if (v4)
    sub_2109EE4B8(v4);
  v5 = *v2;
  *v2 = 0;
  if (v5)
  {
    operator delete(v5);
    if ((*(char *)(v1 + 23) & 0x80000000) == 0)
LABEL_5:
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v1 + 23) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2108B6DD0(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_2108B5C58(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    sub_2108B6F10(a1, (uint64_t)(i + 2), (uint64_t)(i + 2));
  return a1;
}

void sub_2108B6EE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108AA7B8(v1);
  _Unwind_Resume(a1);
}

void sub_2108B6EFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108AA7B8(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_2108B6F10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _BYTE *v26;
  float v27;
  float v28;
  _QWORD *v29;
  _QWORD *v30;
  _BOOL8 v31;
  unint64_t v32;
  unint64_t v33;
  size_t prime;
  int8x8_t v35;
  unint64_t v36;
  uint8x8_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD v42[2];
  char v43;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = sub_2108B6894((uint64_t)v42, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v21 = v14[1];
            if (v21 == v10)
            {
              v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0)
                v23 = *((unsigned __int8 *)v14 + 39);
              else
                v23 = v14[3];
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3]))
                    return v14;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return v14;
                  v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24)
                      return v14;
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v10)
          {
            v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v14 + 39);
            else
              v19 = v14[3];
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3]))
                  return v14;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return v14;
                v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  v25 = (char *)operator new(0x38uLL);
  v42[0] = v25;
  v42[1] = a1 + 16;
  v43 = 0;
  *(_QWORD *)v25 = 0;
  *((_QWORD *)v25 + 1) = v10;
  v26 = v25 + 16;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_2108B314C(v26, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)v26 = *(_OWORD *)a3;
    *((_QWORD *)v25 + 4) = *(_QWORD *)(a3 + 16);
  }
  *(_OWORD *)(v25 + 40) = *(_OWORD *)(a3 + 24);
  v43 = 1;
  v27 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v28 = *(float *)(a1 + 32);
  if (!v11 || (float)(v28 * (float)v11) < v27)
  {
    v31 = 1;
    if (v11 >= 3)
      v31 = (v11 & (v11 - 1)) != 0;
    v32 = v31 | (2 * v11);
    v33 = vcvtps_u32_f32(v27 / v28);
    if (v32 <= v33)
      prime = v33;
    else
      prime = v32;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v35 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v35)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v35)
    {
      v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v35 < 3uLL || (v37 = (uint8x8_t)vcnt_s8(v35), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        v36 = std::__next_prime(v36);
      }
      else
      {
        v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2)
          v36 = v38;
      }
      if (prime <= v36)
        prime = v36;
      if (prime < *(_QWORD *)&v35)
LABEL_68:
        sub_2108B5C58(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v39 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v3 = v10 % v11;
        v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        v30 = (_QWORD *)v42[0];
        if (v29)
          goto LABEL_57;
      }
      else
      {
        v3 = v10;
        v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        v30 = (_QWORD *)v42[0];
        if (v29)
          goto LABEL_57;
      }
    }
    else
    {
      v3 = v39 & v10;
      v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v39 & v10));
      v30 = (_QWORD *)v42[0];
      if (v29)
        goto LABEL_57;
    }
LABEL_81:
    *v30 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v42[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v42[0])
    {
      v40 = *(_QWORD *)(*(_QWORD *)v42[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v40 >= v11)
          v40 %= v11;
      }
      else
      {
        v40 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v40) = v42[0];
    }
    goto LABEL_92;
  }
  v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v30 = (_QWORD *)v42[0];
  if (!v29)
    goto LABEL_81;
LABEL_57:
  *v30 = *v29;
  *v29 = v42[0];
LABEL_92:
  v14 = (uint64_t *)v42[0];
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_2108B7354(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2108B7380((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2108B7368(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2108B7380((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_2108B7380(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16) && *(char *)(v2 + 39) < 0)
      operator delete(*(void **)(v2 + 16));
    operator delete((void *)v2);
  }
  return a1;
}

void sub_2108B73CC(char **a1, unint64_t a2)
{
  char *v2;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  char *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;

  v2 = *a1;
  if (0xEEEEEEEEEEEEEEEFLL * ((a1[2] - *a1) >> 3) < a2)
  {
    if (a2 >= 0x222222222222223)
      sub_2108B327C();
    v4 = a1[1];
    v5 = 120 * a2;
    v6 = (char *)operator new(120 * a2);
    v7 = &v6[v5];
    v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *a1 = v8;
      a1[1] = v8;
      a1[2] = v7;
      if (v2)
LABEL_20:
        operator delete(v2);
    }
    else
    {
      v9 = 0;
      do
      {
        v10 = &v8[v9];
        v11 = &v4[v9];
        v12 = *(_OWORD *)&v4[v9 - 120];
        v13 = *(_OWORD *)&v4[v9 - 104];
        v14 = *(_OWORD *)&v4[v9 - 88];
        *((_DWORD *)v10 - 18) = *(_DWORD *)&v4[v9 - 72];
        *(_OWORD *)(v10 - 88) = v14;
        *(_OWORD *)(v10 - 104) = v13;
        *(_OWORD *)(v10 - 120) = v12;
        *(v10 - 64) = 0;
        *(v10 - 8) = 0;
        if (v4[v9 - 8])
        {
          *((_QWORD *)v10 - 8) = &off_24CA79890;
          *(_OWORD *)(v10 - 56) = *(_OWORD *)(v11 - 56);
          *((_QWORD *)v11 - 7) = 0;
          *((_QWORD *)v11 - 6) = 0;
          v15 = *(_OWORD *)(v11 - 40);
          *(_OWORD *)(v10 - 26) = *(_OWORD *)(v11 - 26);
          *(_OWORD *)(v10 - 40) = v15;
          *(v10 - 8) = 1;
        }
        v9 -= 120;
      }
      while (&v4[v9] != v2);
      v16 = *a1;
      v2 = a1[1];
      *a1 = &v8[v9];
      a1[1] = v8;
      a1[2] = v7;
      if (v2 != v16)
      {
        do
        {
          if (*(v2 - 8))
          {
            nullsub_51(v2 - 40);
            v17 = (std::__shared_weak_count *)*((_QWORD *)v2 - 6);
            if (v17)
            {
              p_shared_owners = (unint64_t *)&v17->__shared_owners_;
              do
                v19 = __ldaxr(p_shared_owners);
              while (__stlxr(v19 - 1, p_shared_owners));
              if (!v19)
              {
                ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
                std::__shared_weak_count::__release_weak(v17);
              }
            }
            nullsub_51(v2 - 64);
          }
          v2 -= 120;
        }
        while (v2 != v16);
        v2 = v16;
      }
      if (v2)
        goto LABEL_20;
    }
  }
}

char *sub_2108B757C(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  char *v10;
  __int128 v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  char *v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;

  v3 = *a1;
  v4 = a1[1];
  v5 = 0xEEEEEEEEEEEEEEEFLL * ((v4 - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0x222222222222222)
    sub_2108B327C();
  if (0xDDDDDDDDDDDDDDDELL * ((a1[2] - v3) >> 3) > v6)
    v6 = 0xDDDDDDDDDDDDDDDELL * ((a1[2] - v3) >> 3);
  if (0xEEEEEEEEEEEEEEEFLL * ((a1[2] - v3) >> 3) >= 0x111111111111111)
    v8 = 0x222222222222222;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0x222222222222222)
      sub_2108B2B1C();
    v9 = (char *)operator new(120 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[120 * v5];
  v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v10 = *(_OWORD *)a2;
  *((_OWORD *)v10 + 1) = v11;
  *((_OWORD *)v10 + 2) = *(_OWORD *)(a2 + 32);
  *((_DWORD *)v10 + 12) = *(_DWORD *)(a2 + 48);
  v10[56] = 0;
  v10[112] = 0;
  if (*(_BYTE *)(a2 + 112))
  {
    *((_QWORD *)v10 + 7) = &off_24CA79890;
    v12 = &v9[120 * v5];
    v13 = *(_OWORD *)(a2 + 64);
    v14 = *(_OWORD *)(a2 + 80);
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)(a2 + 72) = 0;
    *((_OWORD *)v12 + 4) = v13;
    *((_OWORD *)v12 + 5) = v14;
    *(_OWORD *)(v12 + 94) = *(_OWORD *)(a2 + 94);
    v10[112] = 1;
    v3 = *a1;
    v4 = a1[1];
  }
  v15 = &v9[120 * v8];
  v16 = v10 + 120;
  if (v4 == v3)
  {
    *a1 = v10;
    a1[1] = v16;
    a1[2] = v15;
    if (!v3)
      return v16;
    goto LABEL_30;
  }
  v17 = 0;
  do
  {
    v18 = &v10[v17];
    v19 = &v4[v17];
    v20 = *(_OWORD *)&v4[v17 - 120];
    v21 = *(_OWORD *)&v4[v17 - 104];
    v22 = *(_OWORD *)&v4[v17 - 88];
    *((_DWORD *)v18 - 18) = *(_DWORD *)&v4[v17 - 72];
    *(_OWORD *)(v18 - 88) = v22;
    *(_OWORD *)(v18 - 104) = v21;
    *(_OWORD *)(v18 - 120) = v20;
    *(v18 - 64) = 0;
    *(v18 - 8) = 0;
    if (v4[v17 - 8])
    {
      *((_QWORD *)v18 - 8) = &off_24CA79890;
      *(_OWORD *)(v18 - 56) = *(_OWORD *)(v19 - 56);
      *((_QWORD *)v19 - 7) = 0;
      *((_QWORD *)v19 - 6) = 0;
      v23 = *(_OWORD *)(v19 - 40);
      *(_OWORD *)(v18 - 26) = *(_OWORD *)(v19 - 26);
      *(_OWORD *)(v18 - 40) = v23;
      *(v18 - 8) = 1;
    }
    v17 -= 120;
  }
  while (&v4[v17] != v3);
  v24 = *a1;
  v3 = a1[1];
  *a1 = &v10[v17];
  a1[1] = v16;
  a1[2] = v15;
  if (v3 != v24)
  {
    do
    {
      if (*(v3 - 8))
      {
        nullsub_51(v3 - 40);
        v25 = (std::__shared_weak_count *)*((_QWORD *)v3 - 6);
        if (v25)
        {
          p_shared_owners = (unint64_t *)&v25->__shared_owners_;
          do
            v27 = __ldaxr(p_shared_owners);
          while (__stlxr(v27 - 1, p_shared_owners));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        nullsub_51(v3 - 64);
      }
      v3 -= 120;
    }
    while (v3 != v24);
    v3 = v24;
  }
  if (v3)
LABEL_30:
    operator delete(v3);
  return v16;
}

uint64_t sub_2108B77C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  if (*(_BYTE *)(a1 + 56))
  {
    v2 = *(_QWORD *)(a1 + 32);
    if (v2)
    {
      v3 = *(_QWORD *)(a1 + 40);
      v4 = *(void **)(a1 + 32);
      if (v3 != v2)
      {
        do
        {
          if (*(_BYTE *)(v3 - 8))
          {
            nullsub_51(v3 - 40);
            v5 = *(std::__shared_weak_count **)(v3 - 48);
            if (v5)
            {
              p_shared_owners = (unint64_t *)&v5->__shared_owners_;
              do
                v7 = __ldaxr(p_shared_owners);
              while (__stlxr(v7 - 1, p_shared_owners));
              if (!v7)
              {
                ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
                std::__shared_weak_count::__release_weak(v5);
              }
            }
            nullsub_51(v3 - 64);
          }
          v3 -= 120;
        }
        while (v3 != v2);
        v4 = *(void **)(a1 + 32);
      }
      *(_QWORD *)(a1 + 40) = v2;
      operator delete(v4);
    }
  }
  *(_QWORD *)a1 = &off_24CA79A00;
  v8 = *(std::__shared_weak_count **)(a1 + 24);
  if (!v8)
    return nullsub_51(a1);
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
    return nullsub_51(a1);
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  return nullsub_51(a1);
}

void sub_2108B78D8(char **a1, unint64_t a2)
{
  char *v2;
  char *v4;
  unint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char v14;
  char v15;

  v2 = *a1;
  if (a2 > (a1[2] - *a1) >> 7)
  {
    if (a2 >> 57)
      sub_2108B327C();
    v4 = a1[1];
    v5 = a2 << 7;
    v6 = (char *)operator new(a2 << 7);
    v7 = &v6[v5];
    v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *a1 = v8;
      a1[1] = v8;
      a1[2] = v7;
      if (v2)
LABEL_15:
        operator delete(v2);
    }
    else
    {
      v9 = 0;
      do
      {
        v8[v9 - 128] = 0;
        *(_DWORD *)&v8[v9 - 8] = -1;
        v10 = *(unsigned int *)&v4[v9 - 8];
        if ((_DWORD)v10 != -1)
        {
          ((void (*)(char *, char *, char *))off_24CA79998[v10])(&v14, &v8[v9 - 128], &v4[v9 - 128]);
          *(_DWORD *)&v8[v9 - 8] = v10;
        }
        v9 -= 128;
      }
      while (&v4[v9] != v2);
      v11 = *a1;
      v2 = a1[1];
      *a1 = &v8[v9];
      a1[1] = v8;
      a1[2] = v7;
      if (v2 != v11)
      {
        do
        {
          v12 = v2 - 128;
          v13 = *((unsigned int *)v2 - 2);
          if ((_DWORD)v13 != -1)
            ((void (*)(char *, char *))off_24CA79850[v13])(&v15, v2 - 128);
          *((_DWORD *)v2 - 2) = -1;
          v2 -= 128;
        }
        while (v12 != v11);
        v2 = v11;
      }
      if (v2)
        goto LABEL_15;
    }
  }
}

char *sub_2108B7A40(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char v21;
  char v22;
  char v23;

  v3 = *a1;
  v4 = a1[1];
  v5 = (v4 - *a1) >> 7;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 57)
    sub_2108B327C();
  v8 = a1[2] - v3;
  if (v8 >> 6 > v6)
    v6 = v8 >> 6;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFF80)
    v9 = 0x1FFFFFFFFFFFFFFLL;
  else
    v9 = v6;
  if (v9)
  {
    if (v9 >> 57)
      sub_2108B2B1C();
    v10 = (char *)operator new(v9 << 7);
  }
  else
  {
    v10 = 0;
  }
  v11 = &v10[128 * v5];
  *v11 = 0;
  *((_DWORD *)v11 + 30) = -1;
  v12 = *(unsigned int *)(a2 + 120);
  if ((_DWORD)v12 != -1)
  {
    ((void (*)(char *, char *, uint64_t))off_24CA79998[v12])(&v21, v11, a2);
    *((_DWORD *)v11 + 30) = v12;
    v3 = *a1;
    v4 = a1[1];
  }
  v13 = &v10[128 * v9];
  v14 = v11 + 128;
  if (v4 == v3)
  {
    *a1 = v11;
    a1[1] = v14;
    a1[2] = v13;
    if (!v3)
      return v14;
    goto LABEL_25;
  }
  v15 = 0;
  do
  {
    v11[v15 - 128] = 0;
    *(_DWORD *)&v11[v15 - 8] = -1;
    v16 = *(unsigned int *)&v4[v15 - 8];
    if ((_DWORD)v16 != -1)
    {
      ((void (*)(char *, char *, char *))off_24CA79998[v16])(&v22, &v11[v15 - 128], &v4[v15 - 128]);
      *(_DWORD *)&v11[v15 - 8] = v16;
    }
    v15 -= 128;
  }
  while (&v4[v15] != v3);
  v17 = *a1;
  v3 = a1[1];
  v14 = v11 + 128;
  *a1 = &v11[v15];
  a1[1] = v11 + 128;
  a1[2] = v13;
  if (v3 != v17)
  {
    do
    {
      v18 = v3 - 128;
      v19 = *((unsigned int *)v3 - 2);
      if ((_DWORD)v19 != -1)
        ((void (*)(char *, char *))off_24CA79850[v19])(&v23, v3 - 128);
      *((_DWORD *)v3 - 2) = -1;
      v3 -= 128;
    }
    while (v18 != v17);
    v3 = v17;
  }
  if (v3)
LABEL_25:
    operator delete(v3);
  return v14;
}

void sub_2108B7C28(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  __CVBuffer *v7;
  IOSurfaceRef IOSurface;
  __int128 v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD v22[3];
  uint64_t (**v23)();
  __int128 v24;
  _BYTE v25[26];
  char v26;
  uint64_t (**v27)();
  __int128 v28;
  _OWORD v29[2];
  char v30;

  if (!*(_BYTE *)(a1 + 112))
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 56) = 0;
    return;
  }
  if (*(_DWORD *)(a1 + 104) != 1)
  {
    LOBYTE(v27) = 0;
    v30 = 0;
    goto LABEL_29;
  }
  v23 = &off_24CA79B48;
  sub_2108B89BC(a1 + 56, (uint64_t)&v24);
  v27 = &off_24CA79B48;
  v28 = v24;
  v24 = 0uLL;
  v29[0] = *(_OWORD *)v25;
  *(_OWORD *)((char *)v29 + 10) = *(_OWORD *)&v25[10];
  v30 = 1;
  nullsub_51(&v23);
  if (!v30)
  {
LABEL_29:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 56) = 0;
    goto LABEL_30;
  }
  sub_2108B8698((uint64_t)&v27, (uint64_t)&v23);
  if (v26)
  {
    v3 = v24;
    if (*((_QWORD *)&v24 + 1))
    {
      v4 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
      do
        v5 = __ldxr(v4);
      while (__stxr(v5 + 1, v4));
      do
        v6 = __ldaxr(v4);
      while (__stlxr(v6 - 1, v4));
      if (!v6)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v3 + 1) + 16))(*((_QWORD *)&v3 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v3 + 1));
      }
    }
    sub_2108D08F4(v3, v22);
    v7 = (__CVBuffer *)sub_21090E930((uint64_t)v22);
    IOSurface = CVPixelBufferGetIOSurface(v7);
    sub_21090E6B4(v22);
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 56) = 0;
    if (IOSurface)
    {
      if (!v26)
        goto LABEL_30;
      *(_QWORD *)a2 = &off_24CA79CF0;
      v9 = v24;
      if (*((_QWORD *)&v24 + 1))
      {
        v10 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
        do
          v12 = __ldxr(v10);
        while (__stxr(v12 + 1, v10));
        *(_OWORD *)(a2 + 24) = *(_OWORD *)v25;
        *(_QWORD *)(a2 + 40) = *(_QWORD *)&v25[16];
        do
          v13 = __ldxr(v10);
        while (__stxr(v13 + 1, v10));
        *(_OWORD *)(a2 + 8) = v9;
        do
          v14 = __ldaxr(v10);
        while (__stlxr(v14 - 1, v10));
        if (!v14)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v9 + 1) + 16))(*((_QWORD *)&v9 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v9 + 1));
        }
        do
          v15 = __ldaxr(v10);
        while (__stlxr(v15 - 1, v10));
        if (!v15)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v9 + 1) + 16))(*((_QWORD *)&v9 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v9 + 1));
        }
      }
      else
      {
        *(_OWORD *)(a2 + 8) = (unint64_t)v24;
        *(_OWORD *)(a2 + 24) = *(_OWORD *)v25;
        *(_QWORD *)(a2 + 40) = *(_QWORD *)&v25[16];
      }
      *(_BYTE *)(a2 + 56) = 1;
      if (!v26)
        goto LABEL_30;
      goto LABEL_42;
    }
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 56) = 0;
  }
  if (v26)
  {
LABEL_42:
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
    if (*((_QWORD *)&v24 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    nullsub_51(&v23);
  }
LABEL_30:
  if (v30)
  {
    v16 = (std::__shared_weak_count *)*((_QWORD *)&v28 + 1);
    if (*((_QWORD *)&v28 + 1))
    {
      v17 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    nullsub_51(&v27);
  }
}

void sub_2108B7F04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  sub_2108B8264((uint64_t)va);
  sub_2108B8264((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_2108B7F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_2108B8264((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2108B7F34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  sub_21090E6B4((uint64_t *)va);
  sub_2108B8264((uint64_t)va1);
  sub_2108B8264((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_2108B7F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  nullsub_51(va);
  _Unwind_Resume(a1);
}

void sub_2108B7F6C(uint64_t a1)
{
  void *__p[5];
  void *v3;
  __int128 v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  __p[4] = 0;
  e5rt_surface_object_create_from_iosurface();
  LOBYTE(__p[0]) = 5;
  v3 = operator new(0x30uLL);
  v4 = xmmword_210A0ABE0;
  strcpy((char *)v3, "Unable to create surface object from IOSurface");
  sub_2108C4BA4(a1, __p, (uint64_t)&v3);
  if (SHIBYTE(v4) < 0)
    operator delete(v3);
}

void sub_2108B8198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  va_list va;

  va_start(va, a8);
  v10 = v9;
  v12 = v10;
  if (*(char *)(v10 + 23) < 0)
    operator delete(*(void **)v10);
  MEMORY[0x212BCC6FC](v12, 0x1012C40EC159624);
  nullsub_51(v8);
  sub_2108A6938((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2108B81F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a16 < 0)
  {
    operator delete(__p);
    sub_2108A6938(&a19);
    _Unwind_Resume(a1);
  }
  sub_2108A6938(&a19);
  _Unwind_Resume(a1);
}

void sub_2108B8248(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_2108ABF6C(a1);
  _Unwind_Resume(a1);
}

uint64_t sub_2108B8264(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (*(_BYTE *)(a1 + 56))
  {
    v2 = *(std::__shared_weak_count **)(a1 + 16);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    nullsub_51(a1);
  }
  return a1;
}

void sub_2108B82CC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  __CVBuffer *v7;
  IOSurfaceRef IOSurface;
  __int128 v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD v23[3];
  uint64_t (**v24)();
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int16 v29;
  char v30;
  uint64_t (**v31)();
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int16 v36;
  char v37;

  if (!*(_BYTE *)(a1 + 112))
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 80) = 0;
    return;
  }
  if (*(_DWORD *)(a1 + 104) != 5)
  {
    LOBYTE(v31) = 0;
    v37 = 0;
    goto LABEL_29;
  }
  v24 = &off_24CA79E68;
  sub_2108BC448(a1 + 56, (uint64_t)&v25);
  v31 = &off_24CA79E68;
  v32 = v25;
  v25 = 0uLL;
  v33 = v26;
  v34 = v27;
  v35 = v28;
  v36 = v29;
  v37 = 1;
  nullsub_51(&v24);
  if (!v37)
  {
LABEL_29:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 80) = 0;
    goto LABEL_30;
  }
  sub_2108BC114((uint64_t)&v31, (uint64_t)&v24);
  if (v30)
  {
    v3 = v25;
    if (*((_QWORD *)&v25 + 1))
    {
      v4 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
      do
        v5 = __ldxr(v4);
      while (__stxr(v5 + 1, v4));
      do
        v6 = __ldaxr(v4);
      while (__stlxr(v6 - 1, v4));
      if (!v6)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v3 + 1) + 16))(*((_QWORD *)&v3 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v3 + 1));
      }
    }
    sub_2108D1B50(v3, v23);
    v7 = (__CVBuffer *)sub_21090E930((uint64_t)v23);
    IOSurface = CVPixelBufferGetIOSurface(v7);
    sub_21090E6B4(v23);
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 80) = 0;
    if (IOSurface)
    {
      if (!v30)
        goto LABEL_30;
      *(_QWORD *)a2 = &off_24CA79F60;
      v9 = v25;
      if (*((_QWORD *)&v25 + 1))
      {
        v10 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
        do
          v12 = __ldxr(v10);
        while (__stxr(v12 + 1, v10));
        v13 = v27;
        *(_OWORD *)(a2 + 24) = v26;
        *(_OWORD *)(a2 + 40) = v13;
        *(_OWORD *)(a2 + 56) = v28;
        do
          v14 = __ldxr(v10);
        while (__stxr(v14 + 1, v10));
        *(_OWORD *)(a2 + 8) = v9;
        do
          v15 = __ldaxr(v10);
        while (__stlxr(v15 - 1, v10));
        if (!v15)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v9 + 1) + 16))(*((_QWORD *)&v9 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v9 + 1));
        }
        do
          v16 = __ldaxr(v10);
        while (__stlxr(v16 - 1, v10));
        if (!v16)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v9 + 1) + 16))(*((_QWORD *)&v9 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v9 + 1));
        }
      }
      else
      {
        *(_OWORD *)(a2 + 8) = (unint64_t)v25;
        *(_OWORD *)(a2 + 24) = v26;
        *(_OWORD *)(a2 + 40) = v27;
        *(_OWORD *)(a2 + 56) = v28;
      }
      *(_BYTE *)(a2 + 80) = 1;
      if (!v30)
        goto LABEL_30;
      goto LABEL_42;
    }
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 80) = 0;
  }
  if (v30)
  {
LABEL_42:
    v20 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
    if (*((_QWORD *)&v25 + 1))
    {
      v21 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    nullsub_51(&v24);
  }
LABEL_30:
  if (v37)
  {
    v17 = (std::__shared_weak_count *)*((_QWORD *)&v32 + 1);
    if (*((_QWORD *)&v32 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    nullsub_51(&v31);
  }
}

void sub_2108B85C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  sub_2108B8630((uint64_t)va);
  sub_2108B8630((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_2108B85E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  sub_2108B8630((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2108B85F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  sub_21090E6B4((uint64_t *)va);
  sub_2108B8630((uint64_t)va1);
  sub_2108B8630((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_2108B861C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  nullsub_51(va);
  _Unwind_Resume(a1);
}

uint64_t sub_2108B8630(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (*(_BYTE *)(a1 + 80))
  {
    v2 = *(std::__shared_weak_count **)(a1 + 16);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    nullsub_51(a1);
  }
  return a1;
}

void sub_2108B8698(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (***v4)();
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t (**v12)();
  __int128 v13;
  _OWORD v14[2];
  uint64_t v15;
  std::__shared_weak_count *v16;

  v4 = *(uint64_t (****)())(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    v15 = *(_QWORD *)(a1 + 8);
    v16 = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    if (*v4 == off_24CA7D688)
    {
      v12 = (uint64_t (**)())v4;
      *(_QWORD *)&v13 = v5;
      v15 = 0;
      v16 = 0;
    }
    else
    {
      v12 = 0;
      *(_QWORD *)&v13 = 0;
      if (v16)
      {
        v8 = &v16->__shared_owners_;
        do
          v9 = __ldaxr((unint64_t *)v8);
        while (__stlxr(v9 - 1, (unint64_t *)v8));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
    }
  }
  else
  {
    v15 = 0;
    v16 = 0;
    v12 = 0;
    *(_QWORD *)&v13 = 0;
  }
  if (!(_QWORD)v13)
    goto LABEL_18;
  v10 = (unint64_t *)(v13 + 8);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    (*(void (**)(_QWORD))(*(_QWORD *)v13 + 16))(v13);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v13);
    if (v12)
      goto LABEL_19;
  }
  else
  {
LABEL_18:
    if (v12)
    {
LABEL_19:
      v12 = &off_24CA79CF0;
      sub_2108BB4CC(a1, (uint64_t)&v13);
      *(_QWORD *)a2 = &off_24CA79CF0;
      *(_OWORD *)(a2 + 8) = v13;
      v13 = 0uLL;
      *(_OWORD *)(a2 + 24) = v14[0];
      *(_OWORD *)(a2 + 33) = *(_OWORD *)((char *)v14 + 9);
      *(_BYTE *)(a2 + 56) = 1;
      nullsub_51(&v12);
      return;
    }
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 56) = 0;
}

void sub_2108B8824(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nullsub_51(va);
  _Unwind_Resume(a1);
}

uint64_t sub_2108B8838(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return nullsub_51(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_51(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_51(a1);
}

void sub_2108B88A0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_51(a1);
  JUMPOUT(0x212BCC6FCLL);
}

uint64_t sub_2108B890C()
{
  return 1;
}

uint64_t sub_2108B8914(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_2108B891C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2109DD4CC(a2, 2, a1 + 32, 2, a1 + 40, 1);
}

uint64_t sub_2108B8938(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_2108B89BC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  _BOOL8 v12;
  _BOOL4 v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  __int16 v17;
  std::__shared_weak_count *size;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  std::logic_error *exception;
  std::string v23;

  if (*(_DWORD *)(a1 + 48) != 1)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2108B8C38(a1);
    std::logic_error::logic_error(exception, &v23);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24CA79220, MEMORY[0x24BEDAB88]);
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v23.__r_.__value_.__r.__words[0] = v4;
      v23.__r_.__value_.__l.__size_ = (std::string::size_type)v5;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v4;
    }
  }
  else
  {
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = 0uLL;
  }
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_DWORD *)(a1 + 24);
  v12 = v11 != 0;
  v13 = v11 == 0;
  if (!*(_DWORD *)(a1 + 28))
    v13 = 1;
  if (v13)
    v14 = 0;
  else
    v14 = (unint64_t)*(unsigned int *)(a1 + 32) << 32;
  if (v13)
    v15 = 0;
  else
    v15 = *(_QWORD *)(a1 + 24);
  if (HIDWORD(v15) * HIDWORD(v14) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
  v16 = v14 | v12;
  v17 = *(_WORD *)(a1 + 52);
  size = (std::__shared_weak_count *)v23.__r_.__value_.__l.__size_;
  if (v23.__r_.__value_.__l.__size_)
  {
    v19 = (unint64_t *)(v23.__r_.__value_.__l.__size_ + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    *(_QWORD *)a2 = v23.__r_.__value_.__r.__words[0];
    *(_QWORD *)(a2 + 8) = size;
    *(_QWORD *)(a2 + 16) = v10;
    *(_QWORD *)(a2 + 24) = v15;
    *(_QWORD *)(a2 + 32) = v16;
    *(_WORD *)(a2 + 40) = v17;
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  else
  {
    *(_OWORD *)a2 = v23.__r_.__value_.__r.__words[0];
    *(_QWORD *)(a2 + 16) = v10;
    *(_QWORD *)(a2 + 24) = v15;
    *(_QWORD *)(a2 + 32) = v16;
    *(_WORD *)(a2 + 40) = v17;
  }
}

void sub_2108B8BEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_2108B8C38(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_2108BA9E4();
  v3 = sub_2108BAF94();
  v5 = *(_DWORD *)(a1 + 48);
  return sub_2108B8CB0("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

uint64_t sub_2108B8CB0(char *__s, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int *a6)
{
  uint64_t result;
  _DWORD v12[6];
  int v13;
  _QWORD **v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v13 = 0;
  sub_2108B9098(v12, __s);
  v14 = (_QWORD **)v12;
  v15 = a2;
  v16 = v12;
  v17 = a2;
  v18 = a2;
  if (v13 == -1)
    sub_2108B9060();
  v19 = &v14;
  ((void (*)(_QWORD **, _DWORD *))off_24CA79C68[v13])(&v19, v12);
  v14 = (_QWORD **)v12;
  v15 = a3;
  v16 = v12;
  v17 = a3;
  v18 = a3;
  if (v13 == -1)
    sub_2108B9060();
  v19 = &v14;
  ((void (*)(_QWORD **, _DWORD *))off_24CA79C80[v13])(&v19, v12);
  v14 = (_QWORD **)v12;
  v15 = a4;
  v16 = v12;
  v17 = a4;
  v18 = a4;
  if (v13 == -1)
    sub_2108B9060();
  v19 = &v14;
  ((void (*)(_QWORD **, _DWORD *))off_24CA79C68[v13])(&v19, v12);
  v14 = (_QWORD **)v12;
  v15 = a5;
  v16 = v12;
  v17 = a5;
  v18 = a5;
  if (v13 == -1)
    sub_2108B9060();
  v19 = &v14;
  ((void (*)(_QWORD **, _DWORD *))off_24CA79C98[v13])(&v19, v12);
  sub_2108B8F14((uint64_t)&v14, (uint64_t)v12, a6);
  if (v13 == -1)
    sub_2108B9060();
  v14 = &v19;
  result = ((uint64_t (*)(_QWORD ***, _DWORD *))off_24CA79CC8[v13])(&v14, v12);
  if (v13 != -1)
    return ((uint64_t (*)(_QWORD ***, _DWORD *))off_24CA79C50[v13])(&v14, v12);
  return result;
}

void sub_2108B8E88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2108B9008((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2108B8E9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2108B9008((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2108B8EB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2108B9008((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2108B8EC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2108B9008((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2108B8ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2108B9008((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2108B8EEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2108B9008((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2108B8F00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2108B9008((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2108B8F14(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  _QWORD *v5;
  uint64_t v6;
  void *__p[2];
  char v8;
  uint64_t v9[5];
  uint64_t *v10;

  sub_2109ECF90(v9);
  v5 = (_QWORD *)sub_2109ED0D0(v9);
  sub_2109AB16C(v5, a3);
  sub_2109ED0DC(v9, __p);
  sub_2109ED024(v9);
  v9[0] = a2;
  v9[1] = (uint64_t)__p;
  v9[2] = a2;
  v9[3] = (uint64_t)__p;
  v9[4] = (uint64_t)__p;
  v6 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v6 == -1)
    sub_2108B9060();
  v10 = v9;
  ((void (*)(uint64_t **, uint64_t))off_24CA79CB0[v6])(&v10, a2);
  if (v8 < 0)
    operator delete(__p[0]);
}

void sub_2108B8FD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2108B9008(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24CA79C50[v2])(&v4, a1);
  *(_DWORD *)(a1 + 24) = -1;
  return a1;
}

void sub_2108B9060()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x24BEDB8D8] + 16;
  __cxa_throw(exception, MEMORY[0x24BEDB738], (void (*)(void *))std::exception::~exception);
}

_DWORD *sub_2108B9098(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24CA79C50[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_2108A4B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_2108B918C(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void sub_2108B91A0(uint64_t a1, void **a2)
{
  void **v2;
  void **v4;
  void *v5;
  void *v6;

  v2 = (void **)*a2;
  if (*a2)
  {
    v4 = (void **)a2[1];
    v5 = *a2;
    if (v4 == v2)
    {
      a2[1] = v2;
      operator delete(v5);
    }
    else
    {
      do
      {
        if (*((char *)v4 - 1) < 0)
          operator delete(*(v4 - 3));
        v4 -= 3;
      }
      while (v4 != v2);
      v6 = *a2;
      a2[1] = v2;
      operator delete(v6);
    }
  }
}

_QWORD *sub_2108B9228(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  __int128 v8;
  char *v9;
  __int128 *v10;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >= 0xAAAAAAAAAAAAAABLL)
      sub_2108B327C();
    v5 = 24 * a3;
    v6 = (char *)operator new(24 * a3);
    v7 = 0;
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v5];
    do
    {
      v9 = &v6[v7];
      v10 = (__int128 *)(a2 + v7);
      if (*(char *)(a2 + v7 + 23) < 0)
      {
        sub_2108B314C(v9, *(void **)v10, *((_QWORD *)v10 + 1));
      }
      else
      {
        v8 = *v10;
        *((_QWORD *)v9 + 2) = *((_QWORD *)v10 + 2);
        *(_OWORD *)v9 = v8;
      }
      v7 += 24;
    }
    while (v5 != v7);
    a1[1] = &v6[v7];
  }
  return a1;
}

void sub_2108B9300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_2108B4848(&a9);
  _Unwind_Resume(a1);
}

void sub_2108B9314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  for (; v11; v11 -= 24)
  {
    if (*(char *)(v10 + v11 - 1) < 0)
      operator delete(*(void **)(v10 + v11 - 24));
  }
  *(_QWORD *)(v9 + 8) = v10;
  sub_2108B4848(&a9);
  _Unwind_Resume(a1);
}

_DWORD *sub_2108B9350(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24CA79C50[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_2108A4B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

uint64_t **sub_2108B9440(uint64_t **result)
{
  uint64_t v1;
  __int128 *v2;
  uint64_t v3;
  __int128 v4;
  char v5;

  v1 = **result;
  v2 = (__int128 *)(*result)[1];
  v3 = *(unsigned int *)(v1 + 24);
  if ((_DWORD)v3 != -1)
    result = (uint64_t **)((uint64_t (*)(char *, uint64_t))off_24CA79C50[v3])(&v5, v1);
  *(_DWORD *)(v1 + 24) = -1;
  if (*((char *)v2 + 23) < 0)
  {
    result = (uint64_t **)sub_2108B314C((_BYTE *)v1, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v4 = *v2;
    *(_QWORD *)(v1 + 16) = *((_QWORD *)v2 + 2);
    *(_OWORD *)v1 = v4;
  }
  *(_DWORD *)(v1 + 24) = 1;
  return result;
}

void sub_2108B94DC(uint64_t a1, uint64_t a2)
{
  sub_2108B9584((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

char *sub_2108B94E8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  __int128 v5;
  char *result;

  v3 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v4 = *(_QWORD *)(a2 + 8);
  if (v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_2108B9708((char **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
  }
  else
  {
    if (*(char *)(v3 + 23) < 0)
    {
      sub_2108B314C(*(_BYTE **)(a2 + 8), *(void **)v3, *(_QWORD *)(v3 + 8));
    }
    else
    {
      v5 = *(_OWORD *)v3;
      *(_QWORD *)(v4 + 16) = *(_QWORD *)(v3 + 16);
      *(_OWORD *)v4 = v5;
    }
    result = (char *)(v4 + 24);
    *(_QWORD *)(a2 + 8) = v4 + 24;
    *(_QWORD *)(a2 + 8) = v4 + 24;
  }
  return result;
}

void sub_2108B957C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_2108B9584(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  __int128 *v5;
  __int128 v6;
  uint64_t v7;
  char v8;
  void *v9;
  _BYTE v10[15];
  char v11;
  __int128 __p;
  uint64_t v13;
  _QWORD v14[3];

  v14[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v14 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v14[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v9 = v3;
  *(_QWORD *)v10 = v14[0];
  *(_QWORD *)&v10[7] = *(_QWORD *)((char *)v14 + 7);
  v11 = v4;
  memset(v14, 0, 15);
  v5 = (__int128 *)a1[1];
  if (*((char *)v5 + 23) < 0)
  {
    sub_2108B314C(&__p, *(void **)v5, *((_QWORD *)v5 + 1));
  }
  else
  {
    v6 = *v5;
    v13 = *((_QWORD *)v5 + 2);
    __p = v6;
  }
  v7 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v7 != -1)
    ((void (*)(char *, uint64_t))off_24CA79C50[v7])(&v8, v2);
  *(_DWORD *)(v2 + 24) = -1;
  sub_2108B9228((_QWORD *)v2, (uint64_t)&v9, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v13) & 0x80000000) == 0)
  {
    if ((v11 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v9);
    return;
  }
  operator delete((void *)__p);
  if (v11 < 0)
    goto LABEL_10;
}

void sub_2108B96C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_2108B9708(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  __int128 v12;
  char *v13;
  void **v14;
  char *v16;
  char *v17;
  char *v18;

  v3 = *a1;
  v4 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_2108B327C();
  if (0x5555555555555556 * ((a1[2] - v3) >> 3) > v6)
    v6 = 0x5555555555555556 * ((a1[2] - v3) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      sub_2108B2B1C();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v5];
  v16 = v10;
  v17 = v10;
  v18 = &v9[24 * v8];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_2108B314C(v10, *(void **)a2, *(_QWORD *)(a2 + 8));
    v3 = *a1;
    v4 = a1[1];
    v10 = v16;
    v11 = v17 + 24;
    if (v4 == *a1)
    {
LABEL_17:
      v13 = v3;
      goto LABEL_18;
    }
  }
  else
  {
    *(_OWORD *)v10 = *(_OWORD *)a2;
    *((_QWORD *)v10 + 2) = *(_QWORD *)(a2 + 16);
    v11 = v10 + 24;
    if (v4 == v3)
      goto LABEL_17;
  }
  do
  {
    v12 = *(_OWORD *)(v4 - 24);
    *((_QWORD *)v10 - 1) = *((_QWORD *)v4 - 1);
    *(_OWORD *)(v10 - 24) = v12;
    v10 -= 24;
    *((_QWORD *)v4 - 2) = 0;
    *((_QWORD *)v4 - 1) = 0;
    *((_QWORD *)v4 - 3) = 0;
    v4 -= 24;
  }
  while (v4 != v3);
  v13 = *a1;
  v3 = a1[1];
LABEL_18:
  *a1 = v10;
  a1[1] = v11;
  a1[2] = v18;
  if (v3 != v13)
  {
    v14 = (void **)(v3 - 24);
    do
    {
      if (*((char *)v14 + 23) < 0)
        operator delete(*v14);
      v14 -= 3;
    }
    while (v14 + 3 != (void **)v13);
    v3 = v13;
  }
  if (v3)
    operator delete(v3);
  return v11;
}

void sub_2108B98C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2108B3680((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_2108B98DC(_DWORD ***a1)
{
  return sub_2108B98F8(**a1, (char *)(*a1)[1]);
}

void sub_2108B98E8(uint64_t a1, uint64_t a2)
{
  sub_2108B99E8((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

_DWORD *sub_2108B98F8(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24CA79C50[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_2108A4B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_2108B99E8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_2108A4B7C();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24CA79C50[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_2108B9228((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_2108B9B9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_2108ABF6C(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_2108B9BE0(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_2108B9CD8((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_2108A4B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_2108B9CD0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_2108B9CD8(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  char *v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_2108B327C();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_2108B2B1C();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_2108A4B7C();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (char *)*a1;
      v14 = (char *)a1[1];
      if (v14 == *a1)
        goto LABEL_23;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (char *)*a1;
  v14 = (char *)a1[1];
  if (v14 == *a1)
  {
LABEL_23:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_28;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 24);
    *((_QWORD *)v11 - 1) = *((_QWORD *)v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *((_QWORD *)v14 - 2) = 0;
    *((_QWORD *)v14 - 1) = 0;
    *((_QWORD *)v14 - 3) = 0;
    v14 -= 24;
  }
  while (v14 != v13);
  v19 = (char *)*a1;
  v14 = (char *)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  if (v14 != v19)
  {
    do
    {
      if (*(v14 - 1) < 0)
        operator delete(*((void **)v14 - 3));
      v14 -= 24;
    }
    while (v14 != v19);
    v14 = v19;
  }
LABEL_28:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_2108B9EF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2108B3680((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_2108B9F04(_DWORD ***a1)
{
  return sub_2108B9F20(**a1, (char *)(*a1)[1]);
}

void sub_2108B9F10(uint64_t a1, uint64_t a2)
{
  sub_2108BA010((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

_DWORD *sub_2108B9F20(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24CA79C50[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_2108A4B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_2108BA010(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_2108A4B7C();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24CA79C50[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_2108B9228((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_2108BA1C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_2108ABF6C(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_2108BA208(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_2108BA300((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_2108A4B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_2108BA2F8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_2108BA300(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  char *v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_2108B327C();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_2108B2B1C();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_2108A4B7C();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (char *)*a1;
      v14 = (char *)a1[1];
      if (v14 == *a1)
        goto LABEL_23;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (char *)*a1;
  v14 = (char *)a1[1];
  if (v14 == *a1)
  {
LABEL_23:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_28;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 24);
    *((_QWORD *)v11 - 1) = *((_QWORD *)v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *((_QWORD *)v14 - 2) = 0;
    *((_QWORD *)v14 - 1) = 0;
    *((_QWORD *)v14 - 3) = 0;
    v14 -= 24;
  }
  while (v14 != v13);
  v19 = (char *)*a1;
  v14 = (char *)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  if (v14 != v19)
  {
    do
    {
      if (*(v14 - 1) < 0)
        operator delete(*((void **)v14 - 3));
      v14 -= 24;
    }
    while (v14 != v19);
    v14 = v19;
  }
LABEL_28:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_2108BA518(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2108B3680((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_2108BA52C(__n128 ***a1)
{
  __n128 *v1;
  __n128 *v2;
  uint64_t v3;
  __n128 result;
  char v5;

  v1 = **a1;
  v2 = (*a1)[1];
  v3 = v1[1].n128_u32[2];
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, __n128 *))off_24CA79C50[v3])(&v5, v1);
  v1[1].n128_u32[2] = -1;
  result = *v2;
  v1[1].n128_u64[0] = v2[1].n128_u64[0];
  *v1 = result;
  v2->n128_u64[1] = 0;
  v2[1].n128_u64[0] = 0;
  v2->n128_u64[0] = 0;
  v1[1].n128_u32[2] = 1;
  return result;
}

void sub_2108BA5A4(uint64_t a1, uint64_t a2)
{
  sub_2108BA618((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

char *sub_2108BA5B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  __int128 v5;
  char *result;

  v3 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v4 = *(_QWORD *)(a2 + 8);
  if (v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_2108B36E4((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
  }
  else
  {
    v5 = *(_OWORD *)v3;
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(v3 + 16);
    *(_OWORD *)v4 = v5;
    *(_QWORD *)(v3 + 8) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)v3 = 0;
    result = (char *)(v4 + 24);
    *(_QWORD *)(a2 + 8) = v4 + 24;
  }
  return result;
}

void sub_2108BA618(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  void *v9;
  _BYTE v10[15];
  char v11;
  void *__p[2];
  uint64_t v13;
  _QWORD v14[3];

  v14[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v14 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v14[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v9 = v3;
  *(_QWORD *)v10 = v14[0];
  *(_QWORD *)&v10[7] = *(_QWORD *)((char *)v14 + 7);
  v11 = v4;
  memset(v14, 0, 15);
  v5 = a1[1];
  v6 = *(_QWORD *)(v5 + 16);
  *(_OWORD *)__p = *(_OWORD *)v5;
  v13 = v6;
  *(_QWORD *)v5 = 0;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  v7 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v7 != -1)
    ((void (*)(char *, uint64_t))off_24CA79C50[v7])(&v8, v2);
  *(_DWORD *)(v2 + 24) = -1;
  sub_2108B9228((_QWORD *)v2, (uint64_t)&v9, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v13) & 0x80000000) == 0)
  {
    if ((v11 & 0x80000000) == 0)
      return;
LABEL_7:
    operator delete(v9);
    return;
  }
  operator delete(__p[0]);
  if (v11 < 0)
    goto LABEL_7;
}

void sub_2108BA740(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_2108ABF6C(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2108BA77C(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

__n128 sub_2108BA788@<Q0>(__n128 *a1@<X1>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  a1->n128_u64[0] = 0;
  return result;
}

void sub_2108BA7A4(uint64_t *a1@<X1>, std::string *a2@<X8>, int64x2_t a3@<Q3>, int8x16_t a4@<Q5>)
{
  sub_2108BA7B4(*a1, a1[1], 0, 0, a2, a3, a4);
}

void sub_2108BA7B4(uint64_t a1@<X0>, uint64_t a2@<X1>, const std::string::value_type *a3@<X2>, std::string::size_type a4@<X3>, std::string *a5@<X8>, int64x2_t a6@<Q3>, int8x16_t a7@<Q5>)
{
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned __int8 *v21;
  int64x2_t v22;
  int8x16_t v23;
  int64x2_t v24;
  const double *v25;
  const double *v26;
  unsigned __int128 v27;
  unsigned __int128 v28;
  int32x2_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int32x2_t v32;
  int8x16_t v33;
  int8x16_t v34;
  uint64_t v35;
  int v36;
  const std::string::value_type *v37;
  std::string::size_type v38;
  uint64_t i;
  int v40;
  const std::string::value_type *v41;
  std::string::size_type v42;

  v12 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  if (v12 <= 1)
    v13 = 1;
  else
    v13 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  v14 = (v13 - 1) * a4;
  v15 = a2 - a1;
  if (a2 == a1)
  {
    v16 = 0;
  }
  else
  {
    if ((unint64_t)(v15 - 24) >= 0x60)
    {
      v18 = (v15 - 24) / 0x18uLL + 1;
      v19 = v18 & 3;
      if ((v18 & 3) == 0)
        v19 = 4;
      v20 = v18 - v19;
      v17 = a1 + 24 * v20;
      v21 = (unsigned __int8 *)(a1 + 47);
      v22 = 0uLL;
      v23.i64[0] = 255;
      v23.i64[1] = 255;
      v24 = 0uLL;
      do
      {
        a6.i8[0] = *(v21 - 24);
        a6.i8[4] = *v21;
        a7.i8[0] = v21[24];
        a7.i8[4] = v21[48];
        v25 = (const double *)(v21 - 39);
        v26 = (const double *)(v21 + 9);
        v27 = (unsigned __int128)vld3q_f64(v25);
        v28 = (unsigned __int128)vld3q_f64(v26);
        v29 = vcltz_s32(vshr_n_s32(vshl_n_s32(*(int32x2_t *)a6.i8, 0x18uLL), 0x18uLL));
        v30.i64[0] = v29.i32[0];
        v30.i64[1] = v29.i32[1];
        v31 = v30;
        v32 = vcltz_s32(vshr_n_s32(vshl_n_s32(*(int32x2_t *)a7.i8, 0x18uLL), 0x18uLL));
        v30.i64[0] = v32.i32[0];
        v30.i64[1] = v32.i32[1];
        v33 = v30;
        v30.i64[0] = a6.u32[0];
        v30.i64[1] = a6.u32[1];
        v34 = vbicq_s8(v30, v31);
        v30.i64[0] = a7.u32[0];
        v30.i64[1] = a7.u32[1];
        a6 = (int64x2_t)vorrq_s8(vandq_s8((int8x16_t)v27, v31), vandq_s8(v34, v23));
        a7 = vandq_s8((int8x16_t)v28, v33);
        v22 = vaddq_s64(a6, v22);
        v24 = vaddq_s64((int64x2_t)vorrq_s8(a7, vandq_s8(vbicq_s8(v30, v33), v23)), v24);
        v21 += 96;
        v20 -= 4;
      }
      while (v20);
      v16 = vaddvq_s64(vaddq_s64(v24, v22));
    }
    else
    {
      v16 = 0;
      v17 = a1;
    }
    do
    {
      v35 = *(unsigned __int8 *)(v17 + 23);
      if ((v35 & 0x80u) != 0)
        v35 = *(_QWORD *)(v17 + 8);
      v16 += v35;
      v17 += 24;
    }
    while (v17 != a2);
  }
  a5->__r_.__value_.__r.__words[0] = 0;
  a5->__r_.__value_.__l.__size_ = 0;
  a5->__r_.__value_.__r.__words[2] = 0;
  std::string::reserve(a5, v16 + v14);
  if (v15 >= 1)
  {
    v36 = *(char *)(a1 + 23);
    v37 = v36 >= 0 ? (const std::string::value_type *)a1 : *(const std::string::value_type **)a1;
    v38 = v36 >= 0 ? *(unsigned __int8 *)(a1 + 23) : *(_QWORD *)(a1 + 8);
    std::string::append(a5, v37, v38);
    if ((unint64_t)v12 >= 2)
    {
      for (i = a1 + 24; i != a2; i += 24)
      {
        std::string::append(a5, a3, a4);
        v40 = *(char *)(i + 23);
        if (v40 >= 0)
          v41 = (const std::string::value_type *)i;
        else
          v41 = *(const std::string::value_type **)i;
        if (v40 >= 0)
          v42 = *(unsigned __int8 *)(i + 23);
        else
          v42 = *(_QWORD *)(i + 8);
        std::string::append(a5, v41, v42);
      }
    }
  }
}

void sub_2108BA9C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *sub_2108BA9E4()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_254A71EB8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A71EB8))
  {
    sub_2108A5A94(v7, "ConstImageView");
    v2 = sub_2108BACA0();
    sub_2108BABE8((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2108BAD98();
    sub_2108BABE8((uint64_t)v3, (uint64_t)&__p);
    sub_2108B9228(v6, (uint64_t)v9, 2uLL);
    sub_2109ED500((char *)v7, (uint64_t *)v6, &stru_254A71EA0, v4, v5);
    sub_2108A89B4(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A71EA0, &dword_21089F000);
          __cxa_guard_release(&qword_254A71EB8);
          return &stru_254A71EA0;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_254A71EA0;
}

void sub_2108BAB34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_2108A89B4((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_254A71EB8);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_254A71EB8);
  _Unwind_Resume(a1);
}

void sub_2108BABE8(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_2108B314C(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_2109ECDA0(&__p, "cv3d::kit::img::", 16, (const std::string::value_type *)&unk_210A01421, 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2108BAC84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *sub_2108BACA0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A71ED8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A71ED8))
    return &stru_254A71EC0;
  sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Gray8u]", __p);
  sub_2109ED678((uint64_t)__p, &stru_254A71EC0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A71EC0, &dword_21089F000);
  __cxa_guard_release(&qword_254A71ED8);
  return &stru_254A71EC0;
}

void sub_2108BAD58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A71ED8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A71ED8);
  _Unwind_Resume(a1);
}

__int128 *sub_2108BAD98()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A71EF8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A71EF8))
    return &xmmword_254A71EE0;
  v2 = (char *)sub_2108BAE74();
  if (v2[23] < 0)
  {
    sub_2108B314C(&xmmword_254A71EE0, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_254A71EF0 = *((_QWORD *)v2 + 2);
    xmmword_254A71EE0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A71EE0, &dword_21089F000);
  __cxa_guard_release(&qword_254A71EF8);
  return &xmmword_254A71EE0;
}

void sub_2108BAE5C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A71EF8);
  _Unwind_Resume(a1);
}

void *sub_2108BAE74()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A71F18);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A71F18))
  {
    sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::DynamicBuffer]", qword_254A71F00);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A71F00, &dword_21089F000);
    __cxa_guard_release(&qword_254A71F18);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A71F38);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_254A71F38))
    return &unk_254A71F20;
  sub_2109ED44C((uint64_t)qword_254A71F00, (uint64_t)&unk_254A71F20);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_254A71F20, &dword_21089F000);
  __cxa_guard_release(&qword_254A71F38);
  return &unk_254A71F20;
}

void sub_2108BAF64(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A71F38);
  _Unwind_Resume(a1);
}

void sub_2108BAF7C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A71F18);
  _Unwind_Resume(a1);
}

std::string *sub_2108BAF94()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_254A71F58);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A71F58))
  {
    sub_2108A5A94(v7, "ConstImageView");
    v2 = sub_2108BB250();
    sub_2108BB198((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2108BAD98();
    sub_2108BB198((uint64_t)v3, (uint64_t)&__p);
    sub_2108B9228(v6, (uint64_t)v9, 2uLL);
    sub_2109ED500((char *)v7, (uint64_t *)v6, &stru_254A71F40, v4, v5);
    sub_2108A89B4(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A71F40, &dword_21089F000);
          __cxa_guard_release(&qword_254A71F58);
          return &stru_254A71F40;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_254A71F40;
}

void sub_2108BB0E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_2108A89B4((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_254A71F58);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_254A71F58);
  _Unwind_Resume(a1);
}

void sub_2108BB198(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_2108B314C(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_2109ECDA0(&__p, "cv3d::kit::img::", 16, (const std::string::value_type *)&unk_210A01421, 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2108BB234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *sub_2108BB250()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A71F78);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A71F78))
    return &stru_254A71F60;
  sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Dynamic]", __p);
  sub_2109ED678((uint64_t)__p, &stru_254A71F60);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A71F60, &dword_21089F000);
  __cxa_guard_release(&qword_254A71F78);
  return &stru_254A71F60;
}

void sub_2108BB308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A71F78);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A71F78);
  _Unwind_Resume(a1);
}

uint64_t sub_2108BB348(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return nullsub_51(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_51(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_51(a1);
}

void sub_2108BB3B0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_51(a1);
  JUMPOUT(0x212BCC6FCLL);
}

uint64_t sub_2108BB41C()
{
  return 1;
}

uint64_t sub_2108BB424(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_2108BB42C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2109DD4CC(a2, 2, a1 + 32, 2, a1 + 40, 1);
}

uint64_t sub_2108BB448(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_2108BB4CC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t (***v7)();
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t (***v21)();
  std::__shared_weak_count *v22;

  v4 = *(std::__shared_weak_count **)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 8);
  v18 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  sub_2108BB614(a1, (uint64_t)&v17, &v21);
  v19 = *(_OWORD *)(a1 + 24);
  v20 = *(_QWORD *)(a1 + 40);
  v7 = v21;
  v8 = v22;
  if (v22)
  {
    v9 = (unint64_t *)&v22->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v11 = v22;
    *(_QWORD *)a2 = v7;
    *(_QWORD *)(a2 + 8) = v8;
    *(_OWORD *)(a2 + 16) = v19;
    *(_QWORD *)(a2 + 32) = v20;
    if (v11)
    {
      v12 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  else
  {
    *(_QWORD *)a2 = v21;
    *(_QWORD *)(a2 + 8) = 0;
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 24);
    *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 40);
  }
  v14 = v18;
  if (v18)
  {
    v15 = (unint64_t *)&v18->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_2108BB600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2108A894C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2108BB614@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t (****a3)()@<X8>)
{
  uint64_t v3;
  uint64_t (***v4)();
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::logic_error *exception;
  std::string v9;

  v3 = result;
  v4 = *(uint64_t (****)())a2;
  if (!*(_QWORD *)a2 || *v4 != off_24CA7D688)
  {
    *a3 = 0;
    a3[1] = 0;
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2108BB720(v3, &v9);
    std::logic_error::logic_error(exception, &v9);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24CA79220, MEMORY[0x24BEDAB88]);
  }
  v5 = *(_QWORD *)(a2 + 8);
  *a3 = v4;
  a3[1] = (uint64_t (***)())v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

void sub_2108BB6E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      sub_2108A894C(a9);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

double sub_2108BB720@<D0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  std::string *v5;
  std::string::size_type size;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::string::size_type v21;
  std::string *p_p;
  double result;
  int v24;
  size_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  std::string *v30;
  std::string __p;
  const char *v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  _QWORD v38[2];
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2108BBB6C();
  v5 = sub_2108BA9E4();
  v32 = "Attempting to create an ";
  v33 = 24;
  size = HIBYTE(v4->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0)
    v7 = v4;
  else
    v7 = (std::string *)v4->__r_.__value_.__r.__words[0];
  if ((size & 0x80u) != 0)
    size = v4->__r_.__value_.__l.__size_;
  v34 = (const char *)v7;
  v35 = size;
  v36 = " from an ";
  v37 = 9;
  v8 = HIBYTE(v5->__r_.__value_.__r.__words[2]);
  if ((v8 & 0x80u) == 0)
    v9 = v5;
  else
    v9 = (std::string *)v5->__r_.__value_.__r.__words[0];
  if ((v8 & 0x80u) != 0)
    v8 = v5->__r_.__value_.__l.__size_;
  v38[0] = v9;
  v38[1] = v8;
  sub_2108BBA08((uint64_t)&v32, (uint64_t)&v39, 0, 0, &__p);
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = *(std::__shared_weak_count **)(a1 + 16);
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      v10 = *(_QWORD *)(a1 + 8);
      v15 = *(std::__shared_weak_count **)(a1 + 16);
      if (v15)
      {
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
        do
          v18 = __ldaxr(v16);
        while (__stlxr(v18 - 1, v16));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
    }
    v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 80))(v10);
    v21 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    {
      v21 = __p.__r_.__value_.__l.__size_;
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    v32 = (const char *)p_p;
    v33 = v21;
    v34 = " but the other image contains an incompatible buffer type ";
    v35 = 58;
    v36 = (const char *)v19;
    v37 = v20;
    sub_2108BBA08((uint64_t)&v32, (uint64_t)v38, 0, 0, a2);
    if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
      goto LABEL_27;
    return result;
  }
  v24 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v25 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v25 = __p.__r_.__value_.__l.__size_;
  v26 = v25 + 46;
  if (v25 + 46 >= 0x7FFFFFFFFFFFFFF8)
    sub_2108A4B7C();
  if (v26 <= 0x16)
  {
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    a2->__r_.__value_.__r.__words[0] = 0;
    v27 = (char *)a2;
    *((_BYTE *)&a2->__r_.__value_.__s + 23) = v26;
LABEL_38:
    if (v24 >= 0)
      v30 = &__p;
    else
      v30 = (std::string *)__p.__r_.__value_.__r.__words[0];
    memmove(a2, v30, v25);
    goto LABEL_42;
  }
  v28 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v26 | 7) != 0x17)
    v28 = v26 | 7;
  v29 = v28 + 1;
  v27 = (char *)operator new(v28 + 1);
  a2->__r_.__value_.__l.__size_ = v26;
  a2->__r_.__value_.__r.__words[2] = v29 | 0x8000000000000000;
  a2->__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
  a2 = (std::string *)v27;
  if (v25)
    goto LABEL_38;
LABEL_42:
  strcpy(&v27[v25], " but the other image does not contain a buffer");
  result = *(double *)"contain a buffer";
  if ((v24 & 0x80) != 0)
LABEL_27:
    operator delete(__p.__r_.__value_.__l.__data_);
  return result;
}

void sub_2108BB9DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_2108BBA08(uint64_t a1@<X0>, uint64_t a2@<X1>, const std::string::value_type *a3@<X2>, std::string::size_type a4@<X3>, std::string *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  const double *v18;
  int64x2_t v19;
  int64x2_t v20;
  const double *v21;
  unsigned __int128 v22;
  unsigned __int128 v23;
  uint64_t i;
  const std::string::value_type *v25;
  std::string::size_type v26;

  v10 = (a2 - a1) >> 4;
  if (v10 <= 1)
    v10 = 1;
  v11 = (v10 - 1) * a4;
  v12 = a2 - a1;
  if (a2 == a1)
  {
    v13 = 0;
  }
  else
  {
    if ((unint64_t)(v12 - 16) >= 0x40)
    {
      v15 = ((unint64_t)(v12 - 16) >> 4) + 1;
      v16 = v15 & 3;
      if ((v15 & 3) == 0)
        v16 = 4;
      v17 = v15 - v16;
      v14 = a1 + 16 * v17;
      v18 = (const double *)(a1 + 40);
      v19 = 0uLL;
      v20 = 0uLL;
      do
      {
        v21 = v18 - 4;
        v22 = (unsigned __int128)vld2q_f64(v21);
        v23 = (unsigned __int128)vld2q_f64(v18);
        v19 = vaddq_s64((int64x2_t)v22, v19);
        v20 = vaddq_s64((int64x2_t)v23, v20);
        v18 += 8;
        v17 -= 4;
      }
      while (v17);
      v13 = vaddvq_s64(vaddq_s64(v20, v19));
    }
    else
    {
      v13 = 0;
      v14 = a1;
    }
    do
    {
      v13 += *(_QWORD *)(v14 + 8);
      v14 += 16;
    }
    while (v14 != a2);
  }
  a5->__r_.__value_.__r.__words[0] = 0;
  a5->__r_.__value_.__l.__size_ = 0;
  a5->__r_.__value_.__r.__words[2] = 0;
  std::string::reserve(a5, v13 + v11);
  if (v12 >= 1)
  {
    std::string::append(a5, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
    if ((unint64_t)v12 >= 0x20)
    {
      for (i = a1 + 16; i != a2; i += 16)
      {
        std::string::append(a5, a3, a4);
        v25 = *(const std::string::value_type **)i;
        v26 = *(_QWORD *)(i + 8);
        std::string::append(a5, v25, v26);
      }
    }
  }
}

void sub_2108BBB48(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *sub_2108BBB6C()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_254A71F98);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A71F98))
  {
    sub_2108A5A94(v7, "ConstImageView");
    v2 = sub_2108BACA0();
    sub_2108BBD70((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2108BBE28();
    sub_2108BBD70((uint64_t)v3, (uint64_t)&__p);
    sub_2108B9228(v6, (uint64_t)v9, 2uLL);
    sub_2109ED500((char *)v7, (uint64_t *)v6, &stru_254A71F80, v4, v5);
    sub_2108A89B4(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A71F80, &dword_21089F000);
          __cxa_guard_release(&qword_254A71F98);
          return &stru_254A71F80;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_254A71F80;
}

void sub_2108BBCBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_2108A89B4((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_254A71F98);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_254A71F98);
  _Unwind_Resume(a1);
}

void sub_2108BBD70(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_2108B314C(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_2109ECDA0(&__p, "cv3d::kit::img::", 16, (const std::string::value_type *)&unk_210A01421, 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2108BBE0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__int128 *sub_2108BBE28()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A71FB8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A71FB8))
    return &xmmword_254A71FA0;
  v2 = (char *)sub_2108BBF04();
  if (v2[23] < 0)
  {
    sub_2108B314C(&xmmword_254A71FA0, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_254A71FB0 = *((_QWORD *)v2 + 2);
    xmmword_254A71FA0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A71FA0, &dword_21089F000);
  __cxa_guard_release(&qword_254A71FB8);
  return &xmmword_254A71FA0;
}

void sub_2108BBEEC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A71FB8);
  _Unwind_Resume(a1);
}

void *sub_2108BBF04()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A71FD8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A71FD8))
  {
    sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cv::CVBuffer]", qword_254A71FC0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A71FC0, &dword_21089F000);
    __cxa_guard_release(&qword_254A71FD8);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A71FF8);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_254A71FF8))
    return &unk_254A71FE0;
  sub_2109ED44C((uint64_t)qword_254A71FC0, (uint64_t)&unk_254A71FE0);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_254A71FE0, &dword_21089F000);
  __cxa_guard_release(&qword_254A71FF8);
  return &unk_254A71FE0;
}

void sub_2108BBFF4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A71FF8);
  _Unwind_Resume(a1);
}

void sub_2108BC00C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A71FD8);
  _Unwind_Resume(a1);
}

void sub_2108BC028()
{
  JUMPOUT(0x212BCC6FCLL);
}

__n128 sub_2108BC03C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24CA79DE8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_2108BC074(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24CA79DE8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_2108BC094(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_2108BC09C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP19e5rt_surface_objectEJS8_EEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP19e5rt_surface_objectEJS8_EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP19e5rt_surface_objectEJS8_EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP19e5rt_surface_objectEJS8_EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2108BC108()
{
  return &unk_24CA79E48;
}

void sub_2108BC114(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (***v4)();
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t (**v12)();
  _OWORD v13[4];
  char v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  v4 = *(uint64_t (****)())(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    v15 = *(_QWORD *)(a1 + 8);
    v16 = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    if (*v4 == off_24CA7B7D0)
    {
      v12 = (uint64_t (**)())v4;
      *(_QWORD *)&v13[0] = v5;
      v15 = 0;
      v16 = 0;
    }
    else
    {
      v12 = 0;
      *(_QWORD *)&v13[0] = 0;
      if (v16)
      {
        v8 = &v16->__shared_owners_;
        do
          v9 = __ldaxr((unint64_t *)v8);
        while (__stlxr(v9 - 1, (unint64_t *)v8));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
    }
  }
  else
  {
    v15 = 0;
    v16 = 0;
    v12 = 0;
    *(_QWORD *)&v13[0] = 0;
  }
  if (!*(_QWORD *)&v13[0])
    goto LABEL_18;
  v10 = (unint64_t *)(*(_QWORD *)&v13[0] + 8);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)&v13[0] + 16))(*(_QWORD *)&v13[0]);
    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v13[0]);
    if (v12)
      goto LABEL_19;
  }
  else
  {
LABEL_18:
    if (v12)
    {
LABEL_19:
      v12 = &off_24CA79F60;
      sub_2108BCCF8(a1, (uint64_t)v13);
      *(_QWORD *)a2 = &off_24CA79F60;
      *(_OWORD *)(a2 + 8) = v13[0];
      v13[0] = 0uLL;
      *(_OWORD *)(a2 + 24) = v13[1];
      *(_OWORD *)(a2 + 40) = v13[2];
      *(_OWORD *)(a2 + 56) = v13[3];
      *(_BYTE *)(a2 + 72) = v14;
      *(_BYTE *)(a2 + 80) = 1;
      nullsub_51(&v12);
      return;
    }
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 80) = 0;
}

void sub_2108BC2B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_51(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2108BC2C4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return nullsub_51(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_51(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_51(a1);
}

void sub_2108BC32C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_51(a1);
  JUMPOUT(0x212BCC6FCLL);
}

uint64_t sub_2108BC398()
{
  return 5;
}

uint64_t sub_2108BC3A0(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_2108BC3A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2109DD4CC(a2, 3, a1 + 32, 3, a1 + 44, 1);
}

uint64_t sub_2108BC3C4(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_2108BC448(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  _BOOL8 v12;
  int v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  __int16 v23;
  std::__shared_weak_count *size;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::logic_error *exception;
  std::string v30;
  _BYTE v31[12];
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 48) != 5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2108BC748(a1);
    std::logic_error::logic_error(exception, &v30);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24CA79220, MEMORY[0x24BEDAB88]);
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v30.__r_.__value_.__r.__words[0] = v4;
      v30.__r_.__value_.__l.__size_ = (std::string::size_type)v5;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *(unint64_t *)(a1 + 8);
    }
  }
  else
  {
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = 0uLL;
  }
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_DWORD *)(a1 + 24);
  v14 = v11 == 0;
  v12 = v11 != 0;
  v13 = v14;
  if (!*(_DWORD *)(a1 + 28))
    v13 = 1;
  v14 = v13 == 0;
  if (v13)
    v15 = 0;
  else
    v15 = (unint64_t)*(unsigned int *)(a1 + 32) << 32;
  v16 = v15 | (2 * v12);
  v17 = *(_QWORD *)(a1 + 24);
  if (!v14)
    v17 = 0;
  *(_DWORD *)v31 = 2;
  *(_QWORD *)&v31[4] = v17;
  v18 = v17;
  v19 = *(_QWORD *)v31;
  v20 = HIDWORD(v17);
  *(_DWORD *)v31 = 1;
  *(_QWORD *)&v31[4] = v16;
  v21 = *(_QWORD *)v31;
  v22 = HIDWORD(v15);
  if (HIDWORD(v17) * HIDWORD(v15) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
  v23 = *(_WORD *)(a1 + 52);
  size = (std::__shared_weak_count *)v30.__r_.__value_.__l.__size_;
  if (v30.__r_.__value_.__l.__size_)
  {
    v25 = (unint64_t *)(v30.__r_.__value_.__l.__size_ + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  *(_QWORD *)a2 = v30.__r_.__value_.__r.__words[0];
  *(_QWORD *)(a2 + 8) = size;
  *(_QWORD *)(a2 + 16) = v10;
  *(_QWORD *)(a2 + 24) = v19;
  *(_DWORD *)(a2 + 32) = v20;
  *(_QWORD *)(a2 + 36) = v21;
  *(_DWORD *)(a2 + 44) = v22;
  *(_QWORD *)(a2 + 48) = v18;
  *(_QWORD *)(a2 + 56) = v16;
  *(_WORD *)(a2 + 64) = v23;
  if (size)
  {
    v27 = (unint64_t *)&size->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_2108BC6FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_2108BC748(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_2108BC7C0();
  v3 = sub_2108BAF94();
  v5 = *(_DWORD *)(a1 + 48);
  return sub_2108B8CB0("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

std::string *sub_2108BC7C0()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_254A72018);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A72018))
  {
    sub_2108A5A94(v7, "ConstImageView");
    v2 = sub_2108BCA7C();
    sub_2108BC9C4((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2108BAD98();
    sub_2108BC9C4((uint64_t)v3, (uint64_t)&__p);
    sub_2108B9228(v6, (uint64_t)v9, 2uLL);
    sub_2109ED500((char *)v7, (uint64_t *)v6, &stru_254A72000, v4, v5);
    sub_2108A89B4(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A72000, &dword_21089F000);
          __cxa_guard_release(&qword_254A72018);
          return &stru_254A72000;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_254A72000;
}

void sub_2108BC910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_2108A89B4((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_254A72018);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_254A72018);
  _Unwind_Resume(a1);
}

void sub_2108BC9C4(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_2108B314C(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_2109ECDA0(&__p, "cv3d::kit::img::", 16, (const std::string::value_type *)&unk_210A01421, 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2108BCA60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *sub_2108BCA7C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A72038);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A72038))
    return &stru_254A72020;
  sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Two8u]", __p);
  sub_2109ED678((uint64_t)__p, &stru_254A72020);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A72020, &dword_21089F000);
  __cxa_guard_release(&qword_254A72038);
  return &stru_254A72020;
}

void sub_2108BCB34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A72038);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A72038);
  _Unwind_Resume(a1);
}

uint64_t sub_2108BCB74(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return nullsub_51(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_51(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_51(a1);
}

void sub_2108BCBDC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_51(a1);
  JUMPOUT(0x212BCC6FCLL);
}

uint64_t sub_2108BCC48()
{
  return 5;
}

uint64_t sub_2108BCC50(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_2108BCC58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2109DD4CC(a2, 3, a1 + 32, 3, a1 + 44, 1);
}

uint64_t sub_2108BCC74(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_2108BCCF8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;
  uint64_t (***v8)();
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  __int128 v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t (***v25)();
  std::__shared_weak_count *v26;

  v4 = *(std::__shared_weak_count **)(a1 + 16);
  v20 = *(_QWORD *)(a1 + 8);
  v21 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  sub_2108BCE40(a1, (uint64_t)&v20, &v25);
  v7 = *(_OWORD *)(a1 + 40);
  v22 = *(_OWORD *)(a1 + 24);
  v23 = v7;
  v24 = *(_OWORD *)(a1 + 56);
  v8 = v25;
  v9 = v26;
  if (v26)
  {
    v10 = (unint64_t *)&v26->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v12 = v26;
    *(_QWORD *)a2 = v8;
    *(_QWORD *)(a2 + 8) = v9;
    v13 = v23;
    *(_OWORD *)(a2 + 16) = v22;
    *(_OWORD *)(a2 + 32) = v13;
    *(_OWORD *)(a2 + 48) = v24;
    if (v12)
    {
      v14 = (unint64_t *)&v12->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  else
  {
    *(_QWORD *)a2 = v25;
    *(_QWORD *)(a2 + 8) = 0;
    v16 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a2 + 32) = v16;
    *(_OWORD *)(a2 + 48) = *(_OWORD *)(a1 + 56);
  }
  v17 = v21;
  if (v21)
  {
    v18 = (unint64_t *)&v21->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_2108BCE2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2108A894C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2108BCE40@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t (****a3)()@<X8>)
{
  uint64_t v3;
  uint64_t (***v4)();
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::logic_error *exception;
  std::string v9;

  v3 = result;
  v4 = *(uint64_t (****)())a2;
  if (!*(_QWORD *)a2 || *v4 != off_24CA7B7D0)
  {
    *a3 = 0;
    a3[1] = 0;
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2108BCF4C(v3, &v9);
    std::logic_error::logic_error(exception, &v9);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24CA79220, MEMORY[0x24BEDAB88]);
  }
  v5 = *(_QWORD *)(a2 + 8);
  *a3 = v4;
  a3[1] = (uint64_t (***)())v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

void sub_2108BCF0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      sub_2108A894C(a9);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

double sub_2108BCF4C@<D0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  std::string *v5;
  std::string::size_type size;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::string::size_type v21;
  std::string *p_p;
  double result;
  int v24;
  size_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  std::string *v30;
  std::string __p;
  const char *v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  _QWORD v38[2];
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2108BD234();
  v5 = sub_2108BC7C0();
  v32 = "Attempting to create an ";
  v33 = 24;
  size = HIBYTE(v4->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0)
    v7 = v4;
  else
    v7 = (std::string *)v4->__r_.__value_.__r.__words[0];
  if ((size & 0x80u) != 0)
    size = v4->__r_.__value_.__l.__size_;
  v34 = (const char *)v7;
  v35 = size;
  v36 = " from an ";
  v37 = 9;
  v8 = HIBYTE(v5->__r_.__value_.__r.__words[2]);
  if ((v8 & 0x80u) == 0)
    v9 = v5;
  else
    v9 = (std::string *)v5->__r_.__value_.__r.__words[0];
  if ((v8 & 0x80u) != 0)
    v8 = v5->__r_.__value_.__l.__size_;
  v38[0] = v9;
  v38[1] = v8;
  sub_2108BBA08((uint64_t)&v32, (uint64_t)&v39, 0, 0, &__p);
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = *(std::__shared_weak_count **)(a1 + 16);
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      v10 = *(_QWORD *)(a1 + 8);
      v15 = *(std::__shared_weak_count **)(a1 + 16);
      if (v15)
      {
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
        do
          v18 = __ldaxr(v16);
        while (__stlxr(v18 - 1, v16));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
    }
    v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 80))(v10);
    v21 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    {
      v21 = __p.__r_.__value_.__l.__size_;
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    v32 = (const char *)p_p;
    v33 = v21;
    v34 = " but the other image contains an incompatible buffer type ";
    v35 = 58;
    v36 = (const char *)v19;
    v37 = v20;
    sub_2108BBA08((uint64_t)&v32, (uint64_t)v38, 0, 0, a2);
    if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
      goto LABEL_27;
    return result;
  }
  v24 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v25 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v25 = __p.__r_.__value_.__l.__size_;
  v26 = v25 + 46;
  if (v25 + 46 >= 0x7FFFFFFFFFFFFFF8)
    sub_2108A4B7C();
  if (v26 <= 0x16)
  {
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    a2->__r_.__value_.__r.__words[0] = 0;
    v27 = (char *)a2;
    *((_BYTE *)&a2->__r_.__value_.__s + 23) = v26;
LABEL_38:
    if (v24 >= 0)
      v30 = &__p;
    else
      v30 = (std::string *)__p.__r_.__value_.__r.__words[0];
    memmove(a2, v30, v25);
    goto LABEL_42;
  }
  v28 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v26 | 7) != 0x17)
    v28 = v26 | 7;
  v29 = v28 + 1;
  v27 = (char *)operator new(v28 + 1);
  a2->__r_.__value_.__l.__size_ = v26;
  a2->__r_.__value_.__r.__words[2] = v29 | 0x8000000000000000;
  a2->__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
  a2 = (std::string *)v27;
  if (v25)
    goto LABEL_38;
LABEL_42:
  strcpy(&v27[v25], " but the other image does not contain a buffer");
  result = *(double *)"contain a buffer";
  if ((v24 & 0x80) != 0)
LABEL_27:
    operator delete(__p.__r_.__value_.__l.__data_);
  return result;
}

void sub_2108BD208(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_2108BD234()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_254A72058);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A72058))
  {
    sub_2108A5A94(v7, "ConstImageView");
    v2 = sub_2108BCA7C();
    sub_2108BD438((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2108BBE28();
    sub_2108BD438((uint64_t)v3, (uint64_t)&__p);
    sub_2108B9228(v6, (uint64_t)v9, 2uLL);
    sub_2109ED500((char *)v7, (uint64_t *)v6, &stru_254A72040, v4, v5);
    sub_2108A89B4(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A72040, &dword_21089F000);
          __cxa_guard_release(&qword_254A72058);
          return &stru_254A72040;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_254A72040;
}

void sub_2108BD384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_2108A89B4((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_254A72058);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_254A72058);
  _Unwind_Resume(a1);
}

void sub_2108BD438(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_2108B314C(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_2109ECDA0(&__p, "cv3d::kit::img::", 16, (const std::string::value_type *)&unk_210A01421, 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2108BD4D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2108BD4F0(uint64_t a1, uint64_t a2, int *a3)
{
  int v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  __int16 v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  __int128 v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  __int16 v39;
  unint64_t v40;
  __int128 v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  __int16 v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  int v50;
  __int128 v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  int v55;
  __int16 v56;
  unint64_t v57;
  __int128 v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  int v62;
  __int16 v63;
  unint64_t v64;
  __int128 v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  int v69;
  __int16 v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  int v74;
  __int128 v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  int v79;
  __int16 v80;
  unint64_t v81;
  __int128 v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  int v86;
  __int16 v87;
  unint64_t v88;
  __int128 v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  int v93;
  __int16 v94;
  unint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  int32x4_t v99;
  unsigned int v100;
  _BYTE *v101;
  uint32x4_t *v102;
  unsigned int v103;
  uint32x4_t *v104;
  _BYTE *v105;
  unsigned int v106;
  _BYTE *v111;
  uint32x4_t *v112;
  unsigned int v113;
  _BYTE *v114;
  uint32x4_t *v115;
  unsigned int v116;
  __int32 v117;
  uint32x4_t *v118;
  _BYTE *v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int v122;
  unsigned int i;
  uint32x4_t *v124;
  _BYTE *v125;
  unsigned int v126;
  unsigned int v127;
  unsigned int v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  unint64_t *v135;
  unint64_t v136;
  float v137;
  int32x4_t v138;
  unsigned int v139;
  _BYTE *v140;
  float *v141;
  int v142;
  unsigned int v143;
  float *v144;
  _BYTE *v145;
  unsigned int v146;
  uint64_t v147;
  unsigned int v148;
  __int32 v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  float *v158;
  float *v159;
  float *v160;
  float *v161;
  int v162;
  float *v163;
  float *v164;
  float *v165;
  float *v166;
  float *v167;
  _BYTE *v168;
  int v169;
  float *v170;
  float *v171;
  float *v172;
  float *v173;
  float *v174;
  _BYTE *v175;
  float *v176;
  float *v177;
  int v178;
  _BYTE *v179;
  int v180;
  int v181;
  float *v182;
  float *v183;
  float *v184;
  int v185;
  _BYTE *v186;
  int v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  _BYTE *v193;
  float *v194;
  unsigned int v195;
  int v196;
  float *v197;
  int v198;
  _BYTE *v199;
  int v200;
  int v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  float *v206;
  int v207;
  float *v208;
  float *v209;
  _BYTE *v210;
  float *v211;
  float *v212;
  int v213;
  _BYTE *v214;
  int v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  float *v219;
  int v220;
  float *v221;
  float *v222;
  _BYTE *v223;
  float *v224;
  float *v225;
  unsigned int v226;
  _BYTE *v227;
  unsigned int v228;
  int v229;
  uint64_t v230;
  float *v231;
  unsigned int v232;
  _BYTE *v233;
  unsigned int v234;
  std::__shared_weak_count *v235;
  unint64_t *v236;
  unint64_t v237;
  unint64_t *v238;
  unint64_t *v239;
  unint64_t v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  unint64_t *v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  unint64_t *v248;
  unint64_t v249;
  int32x4_t v250;
  unsigned int v251;
  int *v252;
  uint32x4_t *v253;
  unsigned int v254;
  uint32x4_t *v255;
  int *v256;
  unsigned int v257;
  int *v259;
  uint32x4_t *v260;
  unsigned int v261;
  int *v263;
  uint32x4_t *v264;
  unsigned int v265;
  __int32 v267;
  uint32x4_t *v268;
  int *v269;
  uint64_t v270;
  uint64_t v271;
  unsigned int v273;
  unsigned int j;
  uint32x4_t *v277;
  int *v278;
  unsigned int v279;
  unsigned int v281;
  unsigned int v283;
  std::__shared_weak_count *v284;
  unint64_t *v285;
  unint64_t v286;
  std::__shared_weak_count *v287;
  unint64_t *v288;
  unint64_t v289;
  unint64_t *v290;
  unint64_t v291;
  std::__shared_weak_count *v292;
  unint64_t *v293;
  unint64_t v294;
  unint64_t *v295;
  unint64_t *v296;
  unint64_t v297;
  int32x4_t v298;
  uint64_t v299;
  uint64_t v300;
  float *v301;
  uint32x4_t *v302;
  int v303;
  uint64_t v304;
  std::__shared_weak_count *v305;
  unint64_t *v306;
  unint64_t v307;
  unint64_t *v308;
  unint64_t *v309;
  uint64_t v310;
  uint64_t v311;
  int v312;
  float *v313;
  _BYTE *v314;
  uint64_t v315;
  uint64_t v316;
  unsigned int v317;
  int v318;
  uint32x4_t v319;
  __int128 v320;
  __int128 v321;
  int v322;
  uint64_t (**v323)();
  __int128 v324;
  uint64_t v325;
  int v326;
  uint64_t v327;
  int v328;
  __int16 v329;
  char v330;
  uint32x4_t v331;
  __int128 v332;
  __int128 v333;
  int v334;
  uint64_t (**v335)();
  __int128 v336;
  _BYTE v337[30];
  char v338;
  unsigned int v339;
  void *__p[2];
  _OWORD v341[3];
  __int128 v342;
  __int128 v343;
  __int128 v344;
  uint64_t v345;
  unsigned int v346;
  uint32x4_t v347;
  __int128 v348;
  __int128 v349;
  int v350;
  uint64_t (**v351)();
  __int128 v352;
  _BYTE v353[30];
  char v354;
  uint32x4_t *v355;
  _QWORD *v356;
  unsigned int v357;
  unsigned int v358;
  unsigned int v359;
  unsigned int v360;
  unsigned int v361;
  uint32x4_t v362;
  unsigned int v363;
  unsigned int v364;
  unint64_t v365;
  unsigned int v366;
  unint64_t v367;
  unsigned int v368;
  unint64_t v369;
  unsigned int v370;
  unint64_t v371;
  _BYTE *v372;
  unsigned int v373;
  int v374;
  unsigned int v375;
  uint64_t v376;
  __int8 v377;
  __int8 v378;
  __int8 v379;
  __int8 v380;
  unsigned int v381;
  unsigned int v382;
  unsigned int v383;
  unsigned int v384;

  v345 = 0;
  v343 = 0u;
  v344 = 0u;
  v342 = 0u;
  memset(v341, 0, sizeof(v341));
  *(_OWORD *)__p = 0u;
  sub_21098C5E4(__p, 0, 0, 0, 0, 0);
  memset((char *)v341 + 4, 0, 24);
  *(_QWORD *)((char *)&v341[1] + 12) = 0x1000000000;
  BYTE8(v341[2]) = 0;
  LOBYTE(v345) = 0;
  v346 = 0;
  v6 = *(_DWORD *)(a2 + 48);
  if ((~v6 & 0x11) != 0)
  {
    if ((~v6 & 0x41) != 0)
    {
      sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 808, (uint64_t)&unk_210A01421, 0, (uint64_t)"Only Gray8u and Gray32f input tensors supported", 47, (void (*)(void **))sub_2109EDDB4);
      abort();
    }
    if (*(_BYTE *)(a2 + 112))
    {
      v17 = (uint64_t *)(a2 + 96);
      if (*(_BYTE *)(a2 + 108) && *(_QWORD *)(a2 + 96))
      {
        v18 = a1;
        v19 = *(_QWORD *)(a2 + 64);
        v20 = *(std::__shared_weak_count **)(a2 + 72);
        if (v20)
        {
          p_shared_owners = (unint64_t *)&v20->__shared_owners_;
          do
            v22 = __ldxr(p_shared_owners);
          while (__stxr(v22 + 1, p_shared_owners));
          do
            v23 = __ldaxr(p_shared_owners);
          while (__stlxr(v23 - 1, p_shared_owners));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
        (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v19 + 88))(v19, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
        v6 = *(_DWORD *)(a2 + 48);
        a1 = v18;
      }
    }
    else
    {
      v17 = (uint64_t *)(a2 + 40);
    }
    v24 = *v17;
    v362 = *(uint32x4_t *)a2;
    v363 = *(_DWORD *)(a2 + 16);
    v25 = *(_DWORD *)(a2 + 36) >> 2;
    v319 = vshrq_n_u32(*(uint32x4_t *)(a2 + 20), 2uLL);
    LODWORD(v320) = v25;
    BYTE4(v320) = 1;
    LODWORD(v372) = v6;
    sub_21098B694(&v347, v24, &v362, &v319, &v372, a2 + 56);
    v331 = v347;
    v332 = v348;
    v333 = v349;
    v334 = v350;
    LOBYTE(v335) = 0;
    v338 = 0;
    if (v354)
    {
      v26 = a1;
      v335 = &off_24CA79890;
      v27 = v352;
      v352 = 0uLL;
      v336 = v27;
      *(_OWORD *)v337 = *(_OWORD *)v353;
      *(_OWORD *)&v337[14] = *(_OWORD *)&v353[14];
      v338 = 1;
      v339 = 1;
      nullsub_51(v353);
      v28 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
      if (*((_QWORD *)&v352 + 1))
      {
        v29 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      nullsub_51(&v351);
      a1 = v26;
      v31 = v346;
      if (v346 != -1)
        goto LABEL_39;
    }
    else
    {
      v339 = 1;
      v31 = v346;
      if (v346 != -1)
LABEL_39:
        ((void (*)(uint32x4_t *, void **))off_24CA7A1B8[v31])(&v347, __p);
    }
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 16);
    v331 = *(uint32x4_t *)a2;
    v332 = v7;
    v333 = *(_OWORD *)(a2 + 32);
    v334 = *(_DWORD *)(a2 + 48);
    LOBYTE(v335) = 0;
    v338 = 0;
    if (*(_BYTE *)(a2 + 112))
    {
      v8 = a1;
      v335 = &off_24CA79890;
      v9 = *(_QWORD *)(a2 + 64);
      v10 = *(std::__shared_weak_count **)(a2 + 72);
      if (v10)
      {
        v11 = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
        v13 = *(_QWORD *)(a2 + 96);
        v14 = *(_DWORD *)(a2 + 104);
        v15 = *(_WORD *)(a2 + 108);
        do
          v16 = __ldxr(v11);
        while (__stxr(v16 + 1, v11));
      }
      else
      {
        v13 = *(_QWORD *)(a2 + 96);
        v14 = *(_DWORD *)(a2 + 104);
        v15 = *(_WORD *)(a2 + 108);
      }
      *(_QWORD *)&v336 = v9;
      *((_QWORD *)&v336 + 1) = v10;
      *(_QWORD *)v337 = *(_QWORD *)(a2 + 80);
      *(_DWORD *)&v337[8] = *(_DWORD *)(a2 + 88);
      *(_QWORD *)&v337[16] = v13;
      *(_DWORD *)&v337[24] = v14;
      *(_WORD *)&v337[28] = v15;
      if (v10)
      {
        v32 = (unint64_t *)&v10->__shared_owners_;
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      v338 = 1;
      a1 = v8;
    }
    v339 = 0;
    v31 = v346;
    if (v346 != -1)
      goto LABEL_39;
  }
  if (v339 != 1)
  {
    if (v339)
      goto LABEL_402;
    v319 = v331;
    v320 = v332;
    v321 = v333;
    v322 = v334;
    LOBYTE(v323) = 0;
    v330 = 0;
    if (v338)
    {
      v323 = &off_24CA79890;
      v34 = v336;
      if (*((_QWORD *)&v336 + 1))
      {
        v35 = (unint64_t *)(*((_QWORD *)&v336 + 1) + 8);
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
        v37 = *(_QWORD *)&v337[16];
        v38 = *(_DWORD *)&v337[24];
        v39 = *(_WORD *)&v337[28];
        do
          v40 = __ldxr(v35);
        while (__stxr(v40 + 1, v35));
      }
      else
      {
        v37 = *(_QWORD *)&v337[16];
        v38 = *(_DWORD *)&v337[24];
        v39 = *(_WORD *)&v337[28];
      }
      v324 = v34;
      v325 = *(_QWORD *)v337;
      v326 = *(_DWORD *)&v337[8];
      v327 = v37;
      v328 = v38;
      v329 = v39;
      if (*((_QWORD *)&v34 + 1))
      {
        v48 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 - 1, v48));
        if (!v49)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v34 + 1) + 16))(*((_QWORD *)&v34 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v34 + 1));
        }
      }
      v330 = 1;
    }
    v50 = *a3;
    if (*a3 != 2)
    {
      if (v50 == 1)
      {
        sub_2108BFED4(a3, (uint64_t)__p);
        v347 = *(uint32x4_t *)__p;
        v348 = v341[0];
        v349 = v341[1];
        v350 = v341[2];
        LOBYTE(v351) = 0;
        v354 = 0;
        if ((_BYTE)v345)
        {
          v351 = &off_24CA7A158;
          v58 = v342;
          if (*((_QWORD *)&v342 + 1))
          {
            v59 = (unint64_t *)(*((_QWORD *)&v342 + 1) + 8);
            do
              v60 = __ldxr(v59);
            while (__stxr(v60 + 1, v59));
            v61 = v344;
            v62 = DWORD2(v344);
            v63 = WORD6(v344);
            do
              v64 = __ldxr(v59);
            while (__stxr(v64 + 1, v59));
          }
          else
          {
            v61 = v344;
            v62 = DWORD2(v344);
            v63 = WORD6(v344);
          }
          v352 = v58;
          *(_QWORD *)v353 = v343;
          *(_DWORD *)&v353[8] = DWORD2(v343);
          *(_QWORD *)&v353[16] = v61;
          *(_DWORD *)&v353[24] = v62;
          *(_WORD *)&v353[28] = v63;
          if (*((_QWORD *)&v58 + 1))
          {
            v96 = (unint64_t *)(*((_QWORD *)&v58 + 1) + 8);
            do
              v97 = __ldaxr(v96);
            while (__stlxr(v97 - 1, v96));
            if (!v97)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)&v58 + 1) + 16))(*((_QWORD *)&v58 + 1));
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v58 + 1));
            }
          }
          v354 = 1;
        }
        sub_2108C0534((uint64_t)&v319, (uint64_t)&v372);
        sub_2108C2030((uint64_t)&v347, (uint64_t)&v355);
        _S0 = *(float *)&v376;
        v99.i64[0] = __PAIR64__(v375, v373);
        v99.i64[1] = v376;
        if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v99))) & 1) == 0 && v374)
        {
          v362.i8[12] = v377;
          v362.i8[13] = v378;
          v362.i8[14] = v379;
          v362.i8[15] = v380;
          v363 = v357;
          v362.i32[2] = v373 - 1;
          v364 = v374 - 1;
          v365 = v381 | ((unint64_t)v358 << 32);
          v362.i64[0] = 0;
          v367 = v382 | ((unint64_t)v359 << 32);
          v100 = v376 - 1;
          v366 = v375 - 1;
          v368 = v376 - 1;
          v369 = v383 | ((unint64_t)v360 << 32);
          v371 = v384 | ((unint64_t)v361 << 32);
          v101 = v372;
          v102 = v355;
          v370 = HIDWORD(v376) - 1;
          if (HIDWORD(v376) != 1)
          {
            v103 = 0;
            do
            {
              v104 = v102;
              v105 = v101;
              if (v368)
              {
                v106 = 0;
                v105 = v101;
                v104 = v102;
                do
                {
                  v111 = v105;
                  v112 = v104;
                  if (v366)
                  {
                    v113 = 0;
                    v111 = v105;
                    v112 = v104;
                    do
                    {
                      v114 = v111;
                      v115 = v112;
                      if (v364)
                      {
                        v116 = 0;
                        v114 = v111;
                        v115 = v112;
                        do
                        {
                          v117 = v362.i32[2];
                          v118 = v115;
                          v119 = v114;
                          if (v362.i32[2])
                          {
                            v120 = v362.u32[3];
                            v121 = 2 * v363;
                            v118 = v115;
                            v119 = v114;
                            do
                            {
                              LOBYTE(_S0) = *v119;
                              _S0 = (float)LODWORD(_S0);
                              __asm { FCVT            H0, S0 }
                              v118->i16[0] = LOWORD(_S0);
                              v119 += v120;
                              v118 = (uint32x4_t *)((char *)v118 + v121);
                              --v117;
                            }
                            while (v117);
                          }
                          LOBYTE(_S0) = *v119;
                          _S0 = (float)LODWORD(_S0);
                          __asm { FCVT            H0, S0 }
                          v118->i16[0] = LOWORD(_S0);
                          v114 += v365;
                          v115 = (uint32x4_t *)((char *)v115 + 2 * HIDWORD(v365));
                          ++v116;
                        }
                        while (v116 < v364);
                      }
                      if (v362.i32[2])
                      {
                        v122 = 0;
                        do
                        {
                          LOBYTE(_S0) = *v114;
                          _S0 = (float)LODWORD(_S0);
                          __asm { FCVT            H0, S0 }
                          v115->i16[0] = LOWORD(_S0);
                          v114 += v362.i32[3];
                          v115 = (uint32x4_t *)((char *)v115 + 2 * v363);
                          ++v122;
                        }
                        while (v122 < v362.i32[2]);
                      }
                      LOBYTE(_S0) = *v114;
                      _S0 = (float)LODWORD(_S0);
                      __asm { FCVT            H0, S0 }
                      v115->i16[0] = LOWORD(_S0);
                      v111 += v367;
                      v112 = (uint32x4_t *)((char *)v112 + 2 * HIDWORD(v367));
                      ++v113;
                    }
                    while (v113 < v366);
                  }
                  if (v364)
                  {
                    for (i = 0; i < v364; ++i)
                    {
                      v124 = v112;
                      v125 = v111;
                      if (v362.i32[2])
                      {
                        v126 = 0;
                        v125 = v111;
                        v124 = v112;
                        do
                        {
                          LOBYTE(_S0) = *v125;
                          _S0 = (float)LODWORD(_S0);
                          __asm { FCVT            H0, S0 }
                          v124->i16[0] = LOWORD(_S0);
                          v125 += v362.i32[3];
                          v124 = (uint32x4_t *)((char *)v124 + 2 * v363);
                          ++v126;
                        }
                        while (v126 < v362.i32[2]);
                      }
                      LOBYTE(_S0) = *v125;
                      _S0 = (float)LODWORD(_S0);
                      __asm { FCVT            H0, S0 }
                      v124->i16[0] = LOWORD(_S0);
                      v111 += v365;
                      v112 = (uint32x4_t *)((char *)v112 + 2 * HIDWORD(v365));
                    }
                  }
                  if (v362.i32[2])
                  {
                    v127 = 0;
                    do
                    {
                      LOBYTE(_S0) = *v111;
                      _S0 = (float)LODWORD(_S0);
                      __asm { FCVT            H0, S0 }
                      v112->i16[0] = LOWORD(_S0);
                      v111 += v362.i32[3];
                      v112 = (uint32x4_t *)((char *)v112 + 2 * v363);
                      ++v127;
                    }
                    while (v127 < v362.i32[2]);
                  }
                  LOBYTE(_S0) = *v111;
                  _S0 = (float)LODWORD(_S0);
                  __asm { FCVT            H0, S0 }
                  v112->i16[0] = LOWORD(_S0);
                  v105 += v369;
                  v104 = (uint32x4_t *)((char *)v104 + 2 * HIDWORD(v369));
                  ++v106;
                }
                while (v106 < v368);
              }
              LODWORD(_S0) = sub_2108C21F0(&v362, v105, v104, _S0);
              v101 += v371;
              v102 = (uint32x4_t *)((char *)v102 + 2 * HIDWORD(v371));
              ++v103;
            }
            while (v103 < v370);
            v100 = v368;
          }
          if (v100)
          {
            v128 = 0;
            do
            {
              LODWORD(_S0) = sub_2108C21F0(&v362, v101, v102, _S0);
              v101 += v369;
              v102 = (uint32x4_t *)((char *)v102 + 2 * HIDWORD(v369));
              ++v128;
            }
            while (v128 < v368);
          }
          sub_2108C21F0(&v362, v101, v102, _S0);
        }
        if (v354)
        {
          nullsub_51(v353);
          v129 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
          if (*((_QWORD *)&v352 + 1))
          {
            v130 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
            do
              v131 = __ldaxr(v130);
            while (__stlxr(v131 - 1, v130));
            if (!v131)
            {
              ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
              std::__shared_weak_count::__release_weak(v129);
            }
          }
          nullsub_51(&v351);
        }
        if (!(_BYTE)v345)
          goto LABEL_287;
        nullsub_51(&v343);
        v132 = (std::__shared_weak_count *)*((_QWORD *)&v342 + 1);
        if (!*((_QWORD *)&v342 + 1))
          goto LABEL_286;
        v133 = (unint64_t *)(*((_QWORD *)&v342 + 1) + 8);
        do
          v134 = __ldaxr(v133);
        while (__stlxr(v134 - 1, v133));
      }
      else
      {
        if (v50)
        {
          sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 848, (uint64_t)&unk_210A01421, 0, (uint64_t)"Copy not supported yet.", 23, (void (*)(void **))sub_2109EDDB4);
          abort();
        }
        sub_2108BFBE0(a3, (uint64_t)__p);
        v347 = *(uint32x4_t *)__p;
        v348 = v341[0];
        v349 = v341[1];
        v350 = v341[2];
        LOBYTE(v351) = 0;
        v354 = 0;
        if ((_BYTE)v345)
        {
          v351 = &off_24CA7A158;
          v51 = v342;
          if (*((_QWORD *)&v342 + 1))
          {
            v52 = (unint64_t *)(*((_QWORD *)&v342 + 1) + 8);
            do
              v53 = __ldxr(v52);
            while (__stxr(v53 + 1, v52));
            v54 = v344;
            v55 = DWORD2(v344);
            v56 = WORD6(v344);
            do
              v57 = __ldxr(v52);
            while (__stxr(v57 + 1, v52));
          }
          else
          {
            v54 = v344;
            v55 = DWORD2(v344);
            v56 = WORD6(v344);
          }
          v352 = v51;
          *(_QWORD *)v353 = v343;
          *(_DWORD *)&v353[8] = DWORD2(v343);
          *(_QWORD *)&v353[16] = v54;
          *(_DWORD *)&v353[24] = v55;
          *(_WORD *)&v353[28] = v56;
          if (*((_QWORD *)&v51 + 1))
          {
            v239 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
            do
              v240 = __ldaxr(v239);
            while (__stlxr(v240 - 1, v239));
            if (!v240)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)&v51 + 1) + 16))(*((_QWORD *)&v51 + 1));
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v51 + 1));
            }
          }
          v354 = 1;
        }
        sub_2108C0534((uint64_t)&v319, (uint64_t)&v362);
        sub_2108C06F4((uint64_t)&v347, (uint64_t)&v372);
        v355 = &v362;
        v356 = &v372;
        sub_2108C08B4((size_t *)&v355);
        if (v354)
        {
          nullsub_51(v353);
          v241 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
          if (*((_QWORD *)&v352 + 1))
          {
            v242 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
            do
              v243 = __ldaxr(v242);
            while (__stlxr(v243 - 1, v242));
            if (!v243)
            {
              ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
              std::__shared_weak_count::__release_weak(v241);
            }
          }
          nullsub_51(&v351);
        }
        if (!(_BYTE)v345)
          goto LABEL_287;
        nullsub_51(&v343);
        v132 = (std::__shared_weak_count *)*((_QWORD *)&v342 + 1);
        if (!*((_QWORD *)&v342 + 1))
        {
LABEL_286:
          nullsub_51((char *)&v341[2] + 8);
LABEL_287:
          if (!v330)
            goto LABEL_402;
          nullsub_51(&v325);
          v245 = (std::__shared_weak_count *)*((_QWORD *)&v324 + 1);
          if (!*((_QWORD *)&v324 + 1))
            goto LABEL_401;
          v246 = (unint64_t *)(*((_QWORD *)&v324 + 1) + 8);
          do
            v247 = __ldaxr(v246);
          while (__stlxr(v247 - 1, v246));
          goto LABEL_399;
        }
        v244 = (unint64_t *)(*((_QWORD *)&v342 + 1) + 8);
        do
          v134 = __ldaxr(v244);
        while (__stlxr(v134 - 1, v244));
      }
LABEL_284:
      if (!v134)
      {
        ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
        std::__shared_weak_count::__release_weak(v132);
      }
      goto LABEL_286;
    }
    sub_2108C01CC(a3, (uint64_t)__p);
    v347 = *(uint32x4_t *)__p;
    v348 = v341[0];
    v349 = v341[1];
    v350 = v341[2];
    LOBYTE(v351) = 0;
    v354 = 0;
    if ((_BYTE)v345)
    {
      v351 = &off_24CA7A158;
      v65 = v342;
      if (*((_QWORD *)&v342 + 1))
      {
        v66 = (unint64_t *)(*((_QWORD *)&v342 + 1) + 8);
        do
          v67 = __ldxr(v66);
        while (__stxr(v67 + 1, v66));
        v68 = v344;
        v69 = DWORD2(v344);
        v70 = WORD6(v344);
        do
          v71 = __ldxr(v66);
        while (__stxr(v71 + 1, v66));
      }
      else
      {
        v68 = v344;
        v69 = DWORD2(v344);
        v70 = WORD6(v344);
      }
      v352 = v65;
      *(_QWORD *)v353 = v343;
      *(_DWORD *)&v353[8] = DWORD2(v343);
      *(_QWORD *)&v353[16] = v68;
      *(_DWORD *)&v353[24] = v69;
      *(_WORD *)&v353[28] = v70;
      if (*((_QWORD *)&v65 + 1))
      {
        v135 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
        do
          v136 = __ldaxr(v135);
        while (__stlxr(v136 - 1, v135));
        if (!v136)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v65 + 1) + 16))(*((_QWORD *)&v65 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v65 + 1));
        }
      }
      v354 = 1;
    }
    sub_2108C0534((uint64_t)&v319, (uint64_t)&v372);
    sub_2108C23D4((uint64_t)&v347, (uint64_t)&v355);
    v137 = *(float *)&v376;
    v138.i64[0] = __PAIR64__(v375, v373);
    v138.i64[1] = v376;
    if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v138))) & 1) != 0 || !v374)
    {
LABEL_254:
      if (v354)
      {
        nullsub_51(v353);
        v235 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
        if (*((_QWORD *)&v352 + 1))
        {
          v236 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
          do
            v237 = __ldaxr(v236);
          while (__stlxr(v237 - 1, v236));
          if (!v237)
          {
            ((void (*)(std::__shared_weak_count *))v235->__on_zero_shared)(v235);
            std::__shared_weak_count::__release_weak(v235);
          }
        }
        nullsub_51(&v351);
      }
      if (!(_BYTE)v345)
        goto LABEL_287;
      nullsub_51(&v343);
      v132 = (std::__shared_weak_count *)*((_QWORD *)&v342 + 1);
      if (!*((_QWORD *)&v342 + 1))
        goto LABEL_286;
      v238 = (unint64_t *)(*((_QWORD *)&v342 + 1) + 8);
      do
        v134 = __ldaxr(v238);
      while (__stlxr(v134 - 1, v238));
      goto LABEL_284;
    }
    v362.i8[12] = v377;
    v362.i8[13] = v378;
    v362.i8[14] = v379;
    v362.i8[15] = v380;
    v363 = v357;
    v362.i32[2] = v373 - 1;
    v364 = v374 - 1;
    v365 = v381 | ((unint64_t)v358 << 32);
    v362.i64[0] = 0;
    v367 = v382 | ((unint64_t)v359 << 32);
    v139 = v376 - 1;
    v366 = v375 - 1;
    v368 = v376 - 1;
    v369 = v383 | ((unint64_t)v360 << 32);
    v371 = v384 | ((unint64_t)v361 << 32);
    v140 = v372;
    v141 = (float *)v355;
    v370 = HIDWORD(v376) - 1;
    if (HIDWORD(v376) == 1)
    {
LABEL_250:
      if (v139)
      {
        v234 = 0;
        do
        {
          v137 = sub_2108C2594(&v362, v140, v141, v137);
          v140 += v369;
          v141 += HIDWORD(v369);
          ++v234;
        }
        while (v234 < v368);
      }
      sub_2108C2594(&v362, v140, v141, v137);
      goto LABEL_254;
    }
    v311 = a1;
    v142 = 0;
    while (1)
    {
      v312 = v142;
      v143 = v368;
      v313 = v141;
      v314 = v140;
      v144 = v141;
      v145 = v140;
      if (v368)
        break;
LABEL_189:
      v137 = sub_2108C2594(&v362, v145, v144, v137);
      v140 = &v314[v371];
      v141 = &v313[HIDWORD(v371)];
      v142 = v312 + 1;
      if (v312 + 1 >= v370)
      {
        v139 = v368;
        a1 = v311;
        goto LABEL_250;
      }
    }
    v146 = v366;
    v147 = v369;
    v148 = v364;
    v149 = v362.i32[2];
    if (v366)
    {
      v151 = v367;
      v150 = HIDWORD(v367);
      v145 = v314;
      if (v364)
      {
        v152 = v365;
        v153 = 0;
        if (v362.i32[2])
        {
          v315 = 4 * HIDWORD(v369);
          v316 = v369;
          v154 = v362.u32[3];
          v155 = HIDWORD(v367);
          v156 = 4 * HIDWORD(v365);
          v157 = 4 * v363;
          v158 = &v141[(unint64_t)v156 / 4];
          v159 = &v141[v155];
          v160 = &v141[HIDWORD(v367) + (unint64_t)HIDWORD(v365)];
          v161 = &v141[(unint64_t)v156 / 4 + v155];
          v144 = v141;
          v317 = v368;
          do
          {
            v318 = v153;
            v162 = 0;
            v163 = v161;
            v164 = v160;
            v165 = v159;
            v166 = v158;
            v167 = v144;
            v168 = v145;
            do
            {
              v169 = 0;
              v170 = v165;
              v171 = v164;
              v172 = v163;
              v173 = v166;
              v174 = v167;
              v175 = v168;
              do
              {
                v176 = v173;
                v177 = v174;
                v178 = v149;
                v179 = v175;
                do
                {
                  LOBYTE(v137) = *v179;
                  v137 = (float)LODWORD(v137);
                  *v177 = v137;
                  v179 += v154;
                  v177 = (float *)((char *)v177 + v157);
                  --v178;
                }
                while (v178);
                LOBYTE(v137) = *v179;
                v137 = (float)LODWORD(v137);
                *v177 = v137;
                v175 += v152;
                v174 = (float *)((char *)v174 + v156);
                ++v169;
                v173 = &v176[(unint64_t)v156 / 4];
              }
              while (v169 != v148);
              v180 = v149;
              do
              {
                LOBYTE(v137) = *v175;
                v137 = (float)LODWORD(v137);
                *v176 = v137;
                v175 += v154;
                v176 = (float *)((char *)v176 + v157);
                --v180;
              }
              while (v180);
              LOBYTE(v137) = *v175;
              v168 += v151;
              v167 = (float *)((char *)v167 + v155 * 4);
              ++v162;
              v166 = (float *)((char *)v166 + v155 * 4);
              v137 = (float)LODWORD(v137);
              *v176 = v137;
              v165 = &v170[v155];
              v164 = &v171[v155];
              v163 = &v172[v155];
            }
            while (v162 != v146);
            v181 = 0;
            do
            {
              v182 = v171;
              v183 = v172;
              v184 = v170;
              v185 = v149;
              v186 = v168;
              do
              {
                LOBYTE(v137) = *v186;
                v137 = (float)LODWORD(v137);
                *v184 = v137;
                v186 += v154;
                v184 = (float *)((char *)v184 + v157);
                --v185;
              }
              while (v185);
              LOBYTE(v137) = *v186;
              v137 = (float)LODWORD(v137);
              *v184 = v137;
              v168 += v152;
              v170 = (float *)((char *)v170 + v156);
              ++v181;
              v171 = (float *)((char *)v171 + v156);
              v172 = (float *)((char *)v172 + v156);
            }
            while (v181 != v148);
            v187 = v149;
            do
            {
              LOBYTE(v137) = *v168;
              v137 = (float)LODWORD(v137);
              *v183 = v137;
              v168 += v154;
              v182 = (float *)((char *)v182 + v157);
              v183 = (float *)((char *)v183 + v157);
              --v187;
            }
            while (v187);
            LOBYTE(v137) = *v168;
            v145 += v316;
            v144 = (float *)((char *)v144 + v315);
            v153 = v318 + 1;
            v158 = (float *)((char *)v158 + v315);
            v137 = (float)LODWORD(v137);
            *v182 = v137;
            v159 = (float *)((char *)v159 + v315);
            v160 = (float *)((char *)v160 + v315);
            v161 = (float *)((char *)v161 + v315);
          }
          while (v318 + 1 != v317);
        }
        else
        {
          v216 = 4 * HIDWORD(v369);
          v217 = HIDWORD(v367);
          v218 = 4 * HIDWORD(v365);
          v219 = &v141[v217];
          v144 = v141;
          do
          {
            v220 = 0;
            v221 = v219;
            v222 = v144;
            v223 = v145;
            do
            {
              v224 = v221;
              v225 = v222;
              v226 = v148;
              v227 = v223;
              do
              {
                LOBYTE(v137) = *v227;
                v137 = (float)LODWORD(v137);
                *v225 = v137;
                v227 += v152;
                v225 = (float *)((char *)v225 + v218);
                --v226;
              }
              while (v226);
              LOBYTE(v137) = *v227;
              v137 = (float)LODWORD(v137);
              *v225 = v137;
              v223 += v151;
              v222 = (float *)((char *)v222 + v217 * 4);
              ++v220;
              v221 = &v224[v217];
            }
            while (v220 != v146);
            v228 = v148;
            do
            {
              LOBYTE(v137) = *v223;
              v137 = (float)LODWORD(v137);
              *v224 = v137;
              v223 += v152;
              v224 = (float *)((char *)v224 + v218);
              --v228;
            }
            while (v228);
            LOBYTE(v137) = *v223;
            v137 = (float)LODWORD(v137);
            *v224 = v137;
            v145 += v147;
            v144 = (float *)((char *)v144 + v216);
            ++v153;
            v219 = (float *)((char *)v219 + v216);
          }
          while (v153 != v143);
        }
      }
      else if (v362.i32[2])
      {
        v201 = 0;
        v202 = 4 * HIDWORD(v369);
        v203 = HIDWORD(v367);
        v204 = v362.u32[3];
        v205 = 4 * v363;
        v206 = &v141[v203];
        v144 = v141;
        do
        {
          v207 = 0;
          v208 = v206;
          v209 = v144;
          v210 = v145;
          do
          {
            v211 = v208;
            v212 = v209;
            v213 = v149;
            v214 = v210;
            do
            {
              LOBYTE(v137) = *v214;
              v137 = (float)LODWORD(v137);
              *v212 = v137;
              v214 += v204;
              v212 = (float *)((char *)v212 + v205);
              --v213;
            }
            while (v213);
            LOBYTE(v137) = *v214;
            v137 = (float)LODWORD(v137);
            *v212 = v137;
            v210 += v151;
            v209 = (float *)((char *)v209 + v203 * 4);
            ++v207;
            v208 = &v211[v203];
          }
          while (v207 != v146);
          v215 = v149;
          do
          {
            LOBYTE(v137) = *v210;
            v137 = (float)LODWORD(v137);
            *v211 = v137;
            v210 += v204;
            v211 = (float *)((char *)v211 + v205);
            --v215;
          }
          while (v215);
          LOBYTE(v137) = *v210;
          v137 = (float)LODWORD(v137);
          *v211 = v137;
          v145 += v147;
          v144 = (float *)((char *)v144 + v202);
          ++v201;
          v206 = (float *)((char *)v206 + v202);
        }
        while (v201 != v143);
      }
      else
      {
        v229 = 0;
        v230 = 4 * HIDWORD(v369);
        v144 = v141;
        do
        {
          v231 = v144;
          v232 = v146;
          v233 = v145;
          do
          {
            LOBYTE(v137) = *v233;
            v137 = (float)LODWORD(v137);
            *v231 = v137;
            v233 += v151;
            v231 += v150;
            --v232;
          }
          while (v232);
          LOBYTE(v137) = *v233;
          v137 = (float)LODWORD(v137);
          *v231 = v137;
          v145 += v147;
          v144 = (float *)((char *)v144 + v230);
          ++v229;
        }
        while (v229 != v143);
      }
      goto LABEL_189;
    }
    v188 = v365;
    v189 = 4 * HIDWORD(v369);
    v190 = v362.u32[3];
    v191 = 4 * HIDWORD(v365);
    v192 = 4 * v363;
    v144 = v141;
    v145 = v314;
    while (1)
    {
      v193 = v145;
      v194 = v144;
      if (!v148)
        goto LABEL_219;
      v194 = v144;
      v195 = v148;
      v193 = v145;
      if (v149)
        break;
      do
      {
        LOBYTE(v137) = *v193;
        v137 = (float)LODWORD(v137);
        *v194 = v137;
        v193 += v188;
        v194 = (float *)((char *)v194 + v191);
        --v195;
      }
      while (v195);
LABEL_212:
      LOBYTE(v137) = *v193;
      v137 = (float)LODWORD(v137);
      *v194 = v137;
      v145 += v147;
      v144 = (float *)((char *)v144 + v189);
      if (++v146 == v143)
        goto LABEL_189;
    }
    v196 = 0;
    v194 = v144;
    v193 = v145;
    do
    {
      v197 = v194;
      v198 = v149;
      v199 = v193;
      do
      {
        LOBYTE(v137) = *v199;
        v137 = (float)LODWORD(v137);
        *v197 = v137;
        v199 += v190;
        v197 = (float *)((char *)v197 + v192);
        --v198;
      }
      while (v198);
      LOBYTE(v137) = *v199;
      v137 = (float)LODWORD(v137);
      *v197 = v137;
      v193 += v188;
      v194 = (float *)((char *)v194 + v191);
      ++v196;
    }
    while (v196 != v148);
LABEL_219:
    if (v149)
    {
      v200 = v149;
      do
      {
        LOBYTE(v137) = *v193;
        v137 = (float)LODWORD(v137);
        *v194 = v137;
        v193 += v190;
        v194 = (float *)((char *)v194 + v192);
        --v200;
      }
      while (v200);
    }
    goto LABEL_212;
  }
  v319 = v331;
  v320 = v332;
  v321 = v333;
  v322 = v334;
  LOBYTE(v323) = 0;
  v330 = 0;
  if (v338)
  {
    v323 = &off_24CA79890;
    v41 = v336;
    if (*((_QWORD *)&v336 + 1))
    {
      v42 = (unint64_t *)(*((_QWORD *)&v336 + 1) + 8);
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
      v44 = *(_QWORD *)&v337[16];
      v45 = *(_DWORD *)&v337[24];
      v46 = *(_WORD *)&v337[28];
      do
        v47 = __ldxr(v42);
      while (__stxr(v47 + 1, v42));
    }
    else
    {
      v44 = *(_QWORD *)&v337[16];
      v45 = *(_DWORD *)&v337[24];
      v46 = *(_WORD *)&v337[28];
    }
    v324 = v41;
    v325 = *(_QWORD *)v337;
    v326 = *(_DWORD *)&v337[8];
    v327 = v44;
    v328 = v45;
    v329 = v46;
    if (*((_QWORD *)&v41 + 1))
    {
      v72 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      if (!v73)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v41 + 1) + 16))(*((_QWORD *)&v41 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v41 + 1));
      }
    }
    v330 = 1;
  }
  v74 = *a3;
  if (*a3)
  {
    if (v74 != 2)
      goto LABEL_96;
LABEL_107:
    sub_2108C01CC(a3, (uint64_t)__p);
    v347 = *(uint32x4_t *)__p;
    v348 = v341[0];
    v349 = v341[1];
    v350 = v341[2];
    LOBYTE(v351) = 0;
    v354 = 0;
    if ((_BYTE)v345)
    {
      v351 = &off_24CA7A158;
      v82 = v342;
      if (*((_QWORD *)&v342 + 1))
      {
        v83 = (unint64_t *)(*((_QWORD *)&v342 + 1) + 8);
        do
          v84 = __ldxr(v83);
        while (__stxr(v84 + 1, v83));
        v85 = v344;
        v86 = DWORD2(v344);
        v87 = WORD6(v344);
        do
          v88 = __ldxr(v83);
        while (__stxr(v88 + 1, v83));
      }
      else
      {
        v85 = v344;
        v86 = DWORD2(v344);
        v87 = WORD6(v344);
      }
      v352 = v82;
      *(_QWORD *)v353 = v343;
      *(_DWORD *)&v353[8] = DWORD2(v343);
      *(_QWORD *)&v353[16] = v85;
      *(_DWORD *)&v353[24] = v86;
      *(_WORD *)&v353[28] = v87;
      if (*((_QWORD *)&v82 + 1))
      {
        v290 = (unint64_t *)(*((_QWORD *)&v82 + 1) + 8);
        do
          v291 = __ldaxr(v290);
        while (__stlxr(v291 - 1, v290));
        if (!v291)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v82 + 1) + 16))(*((_QWORD *)&v82 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v82 + 1));
        }
      }
      v354 = 1;
    }
    sub_2108C2820((uint64_t)&v319, (uint64_t)&v362);
    sub_2108C23D4((uint64_t)&v347, (uint64_t)&v372);
    v355 = &v362;
    v356 = &v372;
    sub_2108C2E1C((uint64_t *)&v355);
    if (v354)
    {
      nullsub_51(v353);
      v292 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
      if (*((_QWORD *)&v352 + 1))
      {
        v293 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
        do
          v294 = __ldaxr(v293);
        while (__stlxr(v294 - 1, v293));
        if (!v294)
        {
          ((void (*)(std::__shared_weak_count *))v292->__on_zero_shared)(v292);
          std::__shared_weak_count::__release_weak(v292);
        }
      }
      nullsub_51(&v351);
    }
    if (!(_BYTE)v345)
      goto LABEL_395;
    nullsub_51(&v343);
    v287 = (std::__shared_weak_count *)*((_QWORD *)&v342 + 1);
    if (!*((_QWORD *)&v342 + 1))
      goto LABEL_394;
    v295 = (unint64_t *)(*((_QWORD *)&v342 + 1) + 8);
    do
      v289 = __ldaxr(v295);
    while (__stlxr(v289 - 1, v295));
LABEL_392:
    if (!v289)
    {
      ((void (*)(std::__shared_weak_count *))v287->__on_zero_shared)(v287);
      std::__shared_weak_count::__release_weak(v287);
    }
    goto LABEL_394;
  }
  if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 861, (uint64_t)"buffer.data_type != BufferDataType::Uint8", 41, (uint64_t)"Copy from float to uint8 buffer is not allowed", 46, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_411;
  }
  v74 = *a3;
  if (*a3 == 2)
    goto LABEL_107;
LABEL_96:
  if (v74 == 1)
  {
    sub_2108BFED4(a3, (uint64_t)__p);
    v347 = *(uint32x4_t *)__p;
    v348 = v341[0];
    v349 = v341[1];
    v350 = v341[2];
    LOBYTE(v351) = 0;
    v354 = 0;
    if ((_BYTE)v345)
    {
      v351 = &off_24CA7A158;
      v89 = v342;
      if (*((_QWORD *)&v342 + 1))
      {
        v90 = (unint64_t *)(*((_QWORD *)&v342 + 1) + 8);
        do
          v91 = __ldxr(v90);
        while (__stxr(v91 + 1, v90));
        v92 = v344;
        v93 = DWORD2(v344);
        v94 = WORD6(v344);
        do
          v95 = __ldxr(v90);
        while (__stxr(v95 + 1, v90));
      }
      else
      {
        v92 = v344;
        v93 = DWORD2(v344);
        v94 = WORD6(v344);
      }
      v352 = v89;
      *(_QWORD *)v353 = v343;
      *(_DWORD *)&v353[8] = DWORD2(v343);
      *(_QWORD *)&v353[16] = v92;
      *(_DWORD *)&v353[24] = v93;
      *(_WORD *)&v353[28] = v94;
      if (*((_QWORD *)&v89 + 1))
      {
        v248 = (unint64_t *)(*((_QWORD *)&v89 + 1) + 8);
        do
          v249 = __ldaxr(v248);
        while (__stlxr(v249 - 1, v248));
        if (!v249)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v89 + 1) + 16))(*((_QWORD *)&v89 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v89 + 1));
        }
      }
      v354 = 1;
    }
    sub_2108C2820((uint64_t)&v319, (uint64_t)&v372);
    sub_2108C2030((uint64_t)&v347, (uint64_t)&v355);
    v250.i64[0] = __PAIR64__(v375, v373);
    v250.i64[1] = v376;
    if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v250))) & 1) == 0 && v374)
    {
      v362.i8[12] = v377;
      v362.i8[13] = v378;
      v362.i8[14] = v379;
      v362.i8[15] = v380;
      v363 = v357;
      v362.i32[2] = v373 - 1;
      v364 = v374 - 1;
      v365 = v381 | ((unint64_t)v358 << 32);
      v362.i64[0] = 0;
      v367 = v382 | ((unint64_t)v359 << 32);
      v251 = v376 - 1;
      v366 = v375 - 1;
      v368 = v376 - 1;
      v369 = v383 | ((unint64_t)v360 << 32);
      v371 = v384 | ((unint64_t)v361 << 32);
      v252 = (int *)v372;
      v253 = v355;
      v370 = HIDWORD(v376) - 1;
      if (HIDWORD(v376) != 1)
      {
        v254 = 0;
        do
        {
          v255 = v253;
          v256 = v252;
          if (v368)
          {
            v257 = 0;
            v256 = v252;
            v255 = v253;
            do
            {
              v259 = v256;
              v260 = v255;
              if (v366)
              {
                v261 = 0;
                v259 = v256;
                v260 = v255;
                do
                {
                  v263 = v259;
                  v264 = v260;
                  if (v364)
                  {
                    v265 = 0;
                    v263 = v259;
                    v264 = v260;
                    do
                    {
                      v267 = v362.i32[2];
                      v268 = v264;
                      v269 = v263;
                      if (v362.i32[2])
                      {
                        v270 = 4 * v362.u32[3];
                        v271 = 2 * v363;
                        v268 = v264;
                        v269 = v263;
                        do
                        {
                          _S0 = *v269;
                          __asm { FCVT            H0, S0 }
                          v268->i16[0] = _S0;
                          v269 = (int *)((char *)v269 + v270);
                          v268 = (uint32x4_t *)((char *)v268 + v271);
                          --v267;
                        }
                        while (v267);
                      }
                      _S0 = *v269;
                      __asm { FCVT            H0, S0 }
                      v268->i16[0] = _S0;
                      v263 += v365;
                      v264 = (uint32x4_t *)((char *)v264 + 2 * HIDWORD(v365));
                      ++v265;
                    }
                    while (v265 < v364);
                  }
                  if (v362.i32[2])
                  {
                    v273 = 0;
                    do
                    {
                      _S0 = *v263;
                      __asm { FCVT            H0, S0 }
                      v264->i16[0] = _S0;
                      v263 += v362.u32[3];
                      v264 = (uint32x4_t *)((char *)v264 + 2 * v363);
                      ++v273;
                    }
                    while (v273 < v362.i32[2]);
                  }
                  _S0 = *v263;
                  __asm { FCVT            H0, S0 }
                  v264->i16[0] = _S0;
                  v259 += v367;
                  v260 = (uint32x4_t *)((char *)v260 + 2 * HIDWORD(v367));
                  ++v261;
                }
                while (v261 < v366);
              }
              if (v364)
              {
                for (j = 0; j < v364; ++j)
                {
                  v277 = v260;
                  v278 = v259;
                  if (v362.i32[2])
                  {
                    v279 = 0;
                    v278 = v259;
                    v277 = v260;
                    do
                    {
                      _S0 = *v278;
                      __asm { FCVT            H0, S0 }
                      v277->i16[0] = _S0;
                      v278 += v362.u32[3];
                      v277 = (uint32x4_t *)((char *)v277 + 2 * v363);
                      ++v279;
                    }
                    while (v279 < v362.i32[2]);
                  }
                  _S0 = *v278;
                  __asm { FCVT            H0, S0 }
                  v277->i16[0] = _S0;
                  v259 += v365;
                  v260 = (uint32x4_t *)((char *)v260 + 2 * HIDWORD(v365));
                }
              }
              if (v362.i32[2])
              {
                v281 = 0;
                do
                {
                  _S0 = *v259;
                  __asm { FCVT            H0, S0 }
                  v260->i16[0] = _S0;
                  v259 += v362.u32[3];
                  v260 = (uint32x4_t *)((char *)v260 + 2 * v363);
                  ++v281;
                }
                while (v281 < v362.i32[2]);
              }
              _S0 = *v259;
              __asm { FCVT            H0, S0 }
              v260->i16[0] = _S0;
              v256 += v369;
              v255 = (uint32x4_t *)((char *)v255 + 2 * HIDWORD(v369));
              ++v257;
            }
            while (v257 < v368);
          }
          sub_2108C2C58(&v362, v256, v255);
          v252 += v371;
          v253 = (uint32x4_t *)((char *)v253 + 2 * HIDWORD(v371));
          ++v254;
        }
        while (v254 < v370);
        v251 = v368;
      }
      if (v251)
      {
        v283 = 0;
        do
        {
          sub_2108C2C58(&v362, v252, v253);
          v252 += v369;
          v253 = (uint32x4_t *)((char *)v253 + 2 * HIDWORD(v369));
          ++v283;
        }
        while (v283 < v368);
      }
      sub_2108C2C58(&v362, v252, v253);
    }
    if (v354)
    {
      nullsub_51(v353);
      v284 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
      if (*((_QWORD *)&v352 + 1))
      {
        v285 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
        do
          v286 = __ldaxr(v285);
        while (__stlxr(v286 - 1, v285));
        if (!v286)
        {
          ((void (*)(std::__shared_weak_count *))v284->__on_zero_shared)(v284);
          std::__shared_weak_count::__release_weak(v284);
        }
      }
      nullsub_51(&v351);
    }
    if (!(_BYTE)v345)
      goto LABEL_395;
    nullsub_51(&v343);
    v287 = (std::__shared_weak_count *)*((_QWORD *)&v342 + 1);
    if (!*((_QWORD *)&v342 + 1))
      goto LABEL_394;
    v288 = (unint64_t *)(*((_QWORD *)&v342 + 1) + 8);
    do
      v289 = __ldaxr(v288);
    while (__stlxr(v289 - 1, v288));
    goto LABEL_392;
  }
  if (v74)
  {
    sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 848, (uint64_t)&unk_210A01421, 0, (uint64_t)"Copy not supported yet.", 23, (void (*)(void **))sub_2109EDDB4);
LABEL_411:
    abort();
  }
  sub_2108BFBE0(a3, (uint64_t)__p);
  v347 = *(uint32x4_t *)__p;
  v348 = v341[0];
  v349 = v341[1];
  v350 = v341[2];
  LOBYTE(v351) = 0;
  v354 = 0;
  if ((_BYTE)v345)
  {
    v351 = &off_24CA7A158;
    v75 = v342;
    if (*((_QWORD *)&v342 + 1))
    {
      v76 = (unint64_t *)(*((_QWORD *)&v342 + 1) + 8);
      do
        v77 = __ldxr(v76);
      while (__stxr(v77 + 1, v76));
      v78 = v344;
      v79 = DWORD2(v344);
      v80 = WORD6(v344);
      do
        v81 = __ldxr(v76);
      while (__stxr(v81 + 1, v76));
    }
    else
    {
      v78 = v344;
      v79 = DWORD2(v344);
      v80 = WORD6(v344);
    }
    v352 = v75;
    *(_QWORD *)v353 = v343;
    *(_DWORD *)&v353[8] = DWORD2(v343);
    *(_QWORD *)&v353[16] = v78;
    *(_DWORD *)&v353[24] = v79;
    *(_WORD *)&v353[28] = v80;
    if (*((_QWORD *)&v75 + 1))
    {
      v296 = (unint64_t *)(*((_QWORD *)&v75 + 1) + 8);
      do
        v297 = __ldaxr(v296);
      while (__stlxr(v297 - 1, v296));
      if (!v297)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v75 + 1) + 16))(*((_QWORD *)&v75 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v75 + 1));
      }
    }
    v354 = 1;
  }
  sub_2108C2820((uint64_t)&v319, (uint64_t)&v372);
  sub_2108C06F4((uint64_t)&v347, (uint64_t)&v355);
  v298.i64[0] = __PAIR64__(v375, v373);
  v298.i64[1] = v376;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v298))) & 1) == 0 && v374)
  {
    v299 = a1;
    v362.i8[12] = v377;
    v362.i8[13] = v378;
    v362.i8[14] = v379;
    v362.i8[15] = v380;
    v363 = v357;
    v362.i32[2] = v373 - 1;
    v364 = v374 - 1;
    v365 = v381 | ((unint64_t)v358 << 32);
    v362.i64[0] = 0;
    v367 = v382 | ((unint64_t)v359 << 32);
    v366 = v375 - 1;
    v368 = v376 - 1;
    v369 = v383 | ((unint64_t)v360 << 32);
    v300 = v361;
    v371 = v384 | ((unint64_t)v361 << 32);
    v301 = (float *)v372;
    v302 = v355;
    v303 = HIDWORD(v376) - 1;
    v370 = HIDWORD(v376) - 1;
    if (HIDWORD(v376) != 1)
    {
      v304 = 4 * v384;
      do
      {
        sub_2108C29E0(&v362, v301, v302);
        v302 = (uint32x4_t *)((char *)v302 + v300);
        v301 = (float *)((char *)v301 + v304);
        --v303;
      }
      while (v303);
    }
    sub_2108C29E0(&v362, v301, v302);
    a1 = v299;
  }
  if (v354)
  {
    nullsub_51(v353);
    v305 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
    if (*((_QWORD *)&v352 + 1))
    {
      v306 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
      do
        v307 = __ldaxr(v306);
      while (__stlxr(v307 - 1, v306));
      if (!v307)
      {
        ((void (*)(std::__shared_weak_count *))v305->__on_zero_shared)(v305);
        std::__shared_weak_count::__release_weak(v305);
      }
    }
    nullsub_51(&v351);
  }
  if ((_BYTE)v345)
  {
    nullsub_51(&v343);
    v287 = (std::__shared_weak_count *)*((_QWORD *)&v342 + 1);
    if (*((_QWORD *)&v342 + 1))
    {
      v308 = (unint64_t *)(*((_QWORD *)&v342 + 1) + 8);
      do
        v289 = __ldaxr(v308);
      while (__stlxr(v289 - 1, v308));
      goto LABEL_392;
    }
LABEL_394:
    nullsub_51((char *)&v341[2] + 8);
  }
LABEL_395:
  if (!v330)
    goto LABEL_402;
  nullsub_51(&v325);
  v245 = (std::__shared_weak_count *)*((_QWORD *)&v324 + 1);
  if (*((_QWORD *)&v324 + 1))
  {
    v309 = (unint64_t *)(*((_QWORD *)&v324 + 1) + 8);
    do
      v247 = __ldaxr(v309);
    while (__stlxr(v247 - 1, v309));
LABEL_399:
    if (!v247)
    {
      ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
      std::__shared_weak_count::__release_weak(v245);
    }
  }
LABEL_401:
  nullsub_51(&v323);
LABEL_402:
  v347.i8[0] = 0;
  BYTE7(v341[0]) = 0;
  LOBYTE(__p[0]) = 0;
  sub_2108C4BA4(a1, &v347, (uint64_t)__p);
  if (SBYTE7(v341[0]) < 0)
  {
    operator delete(__p[0]);
    v310 = v339;
    if (v339 == -1)
      return;
  }
  else
  {
    v310 = v339;
    if (v339 == -1)
      return;
  }
  ((void (*)(void **, uint32x4_t *))off_24CA7A1B8[v310])(__p, &v331);
}

void sub_2108BF40C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_2108BFB88((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_2108BF420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;

  sub_2108B0424((uint64_t)&a65);
  sub_2108B0424((uint64_t)&a49);
  sub_2108B0424((uint64_t)&a17);
  sub_2108BFB88((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_2108BF44C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;

  sub_2108B0424((uint64_t)&a65);
  sub_2108B0424((uint64_t)&a49);
  sub_2108B0424((uint64_t)&a17);
  sub_2108BFB88((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_2108BF478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;

  sub_2108B0424((uint64_t)&a65);
  sub_2108B0424((uint64_t)&a49);
  sub_2108B0424((uint64_t)&a17);
  sub_2108BFB88((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_2108BF4A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;

  sub_2108B0424((uint64_t)&a65);
  sub_2108B0424((uint64_t)&a49);
  sub_2108B0424((uint64_t)&a17);
  sub_2108BFB88((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_2108BF4D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;

  sub_2108B0424((uint64_t)&a65);
  sub_2108B0424((uint64_t)&a49);
  sub_2108B0424((uint64_t)&a17);
  sub_2108BFB88((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_2108BF4FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;

  sub_2108B0424((uint64_t)&a65);
  sub_2108B0424((uint64_t)&a49);
  sub_2108B0424((uint64_t)&a17);
  sub_2108BFB88((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_2108BF528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  sub_2108B0424((uint64_t)&a17);
  sub_2108BFB88((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_2108BF544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_2108BFB88((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_2108BF558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_2108BFB88((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_2108BF574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  sub_2108B0424((uint64_t)&a17);
  sub_2108BFB88((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_2108BF590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (a54 < 0)
    operator delete(__p);
  sub_2108BFB88((uint64_t)&a33);
  _Unwind_Resume(a1);
}

uint64_t sub_2108BF5B4(uint64_t a1)
{
  uint64_t v2;
  char v4;

  if (*(_BYTE *)(a1 + 160))
  {
    if (*(_BYTE *)(a1 + 152))
    {
      v2 = *(unsigned int *)(a1 + 144);
      if ((_DWORD)v2 != -1)
        ((void (*)(char *, uint64_t))off_24CA79850[v2])(&v4, a1 + 24);
      *(_DWORD *)(a1 + 144) = -1;
    }
    return a1;
  }
  else
  {
    (**(void (***)(uint64_t))a1)(a1);
    return a1;
  }
}

void sub_2108BF644()
{
  JUMPOUT(0x212BCC6FCLL);
}

__n128 sub_2108BF658(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24CA7A058;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_2108BF690(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24CA7A058;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_2108BF6B0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_2108BF6B8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP16e5rt_tensor_descEJS8_EEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP16e5rt_tensor_descEJS8_EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP16e5rt_tensor_descEJS8_EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP16e5rt_tensor_descEJS8_EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2108BF724()
{
  return &unk_24CA7A0B8;
}

void sub_2108BF734()
{
  JUMPOUT(0x212BCC6FCLL);
}

__n128 sub_2108BF748(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24CA7A0D8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_2108BF780(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24CA7A0D8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_2108BF7A0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_2108BF7A8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP18e5rt_buffer_objectEJS8_EEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP18e5rt_buffer_objectEJS8_EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP18e5rt_buffer_objectEJS8_EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP18e5rt_buffer_objectEJS8_EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2108BF814()
{
  return &unk_24CA7A138;
}

char *sub_2108BF820(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  uint64_t v17;
  _QWORD *v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (char *)*v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = *((_QWORD *)v11 + 1);
            if (v13 == v7)
            {
              if (*((_QWORD *)v11 + 2) == v7)
                return v11;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v11 = *(char **)v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = *((_QWORD *)v11 + 1);
          if (v12 == v7)
          {
            if (*((_QWORD *)v11 + 2) == v7)
              return v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = *(char **)v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  v14 = (_QWORD *)(a1 + 16);
  v11 = (char *)operator new(0xB8uLL);
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = v7;
  *((_QWORD *)v11 + 2) = **a4;
  *(_OWORD *)(v11 + 24) = 0u;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 136) = 0u;
  *(_OWORD *)(v11 + 120) = 0u;
  *(_OWORD *)(v11 + 104) = 0u;
  *(_OWORD *)(v11 + 88) = 0u;
  *(_OWORD *)(v11 + 72) = 0u;
  *(_OWORD *)(v11 + 56) = 0u;
  *((_DWORD *)v11 + 6) = 3;
  *((_QWORD *)v11 + 4) = 0;
  *((_QWORD *)v11 + 5) = 0;
  v11[48] = 0;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v8 && (float)(v16 * (float)v8) >= v15)
  {
    v17 = *(_QWORD *)a1;
    v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v18)
    {
LABEL_26:
      *(_QWORD *)v11 = *v18;
LABEL_61:
      *v18 = v11;
      goto LABEL_62;
    }
  }
  else
  {
    v19 = 1;
    if (v8 >= 3)
      v19 = (v8 & (v8 - 1)) != 0;
    v20 = v19 | (2 * v8);
    v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21)
      prime = v21;
    else
      prime = v20;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_37;
    if (prime < v8)
    {
      v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v24 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        v23 = std::__next_prime(v23);
      }
      else
      {
        v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2)
          v23 = v25;
      }
      if (prime <= v23)
        prime = v23;
      if (prime < v8)
LABEL_37:
        sub_2108B5C58(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    v26 = v8 - 1;
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
      {
        v4 = v7 % v8;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v7 % v8));
        if (v18)
          goto LABEL_26;
      }
      else
      {
        v4 = v7;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
        if (v18)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v26 & v7;
      v17 = *(_QWORD *)a1;
      v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v26 & v7));
      if (v18)
        goto LABEL_26;
    }
  }
  *(_QWORD *)v11 = *v14;
  *v14 = v11;
  *(_QWORD *)(v17 + 8 * v4) = v14;
  if (*(_QWORD *)v11)
  {
    v27 = *(_QWORD *)(*(_QWORD *)v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v27 >= v8)
        v27 %= v8;
    }
    else
    {
      v27 &= v8 - 1;
    }
    v18 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_2108BFB74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2108B623C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2108BFB88(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 120);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24CA7A1B8[v2])(&v4, a1);
  *(_DWORD *)(a1 + 120) = -1;
  return a1;
}

_QWORD *sub_2108BFBE0@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *result;
  uint64_t v7;
  _BYTE v8[16];
  std::__shared_weak_count *v9;
  uint64_t v10;
  char v11;
  __int128 v12;
  int v13;
  char v14;
  _BYTE v15[20];
  __int128 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  int *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[3];
  _QWORD *v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  if (*a1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 57, (uint64_t)"((std::is_same_v<UT, uint8_t> && data_type == BufferDataType::Uint8) || (std::is_same_v<UT, half> && data_type == BufferDataType::Float16) || (std::is_same_v<UT, float> && data_type == BufferDataType::Float32))", 210, (uint64_t)"Buffer type mismatch", 20, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
  v25 = 0;
  if (e5rt_buffer_object_get_data_ptr()
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 60, (uint64_t)"ret == E5RT_ERROR_CODE_OK", 25, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
  v23 = 0;
  v24 = 0;
  e5rt_tensor_desc_get_shape();
  v22 = 0;
  e5rt_tensor_desc_get_strides();
  v21 = 0;
  e5rt_tensor_desc_retain_dtype();
  v26[0] = &off_24CA79900;
  v26[1] = MEMORY[0x24BE2FA68];
  v26[2] = &v21;
  v27 = v26;
  v20 = 0;
  e5rt_tensor_desc_dtype_get_num_components();
  v19 = 0;
  e5rt_tensor_desc_dtype_get_element_size();
  v18 = 0;
  e5rt_tensor_desc_dtype_get_component_size();
  sub_2108A4C04(v24, v23, v22, 0, 0, (uint64_t)v15);
  v12 = v16;
  v13 = v17;
  v14 = 1;
  v8[0] = 0;
  v11 = 0;
  sub_21098B698(a2, v25, v15, &v12, &unk_210A1A174, v8);
  if (v11)
  {
    nullsub_51(&v10);
    v3 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    nullsub_51(v8);
  }
  if (!v27)
    sub_2108B30F0();
  (*(void (**)(_QWORD *))(*v27 + 48))(v27);
  result = v27;
  if (v27 == v26)
  {
    v7 = 4;
    result = v26;
  }
  else
  {
    if (!v27)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

void sub_2108BFE4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_2108B1C70((uint64_t)&a9);
  sub_2108A6938((_QWORD *)(v9 - 72));
  _Unwind_Resume(a1);
}

void sub_2108BFE68(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108A6938((_QWORD *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_2108BFE7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108A6938((_QWORD *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_2108BFE90(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108A6938((_QWORD *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_2108BFEA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108A6938((_QWORD *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_2108BFEB8(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_2108ABF6C(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2108BFED4@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *result;
  uint64_t v7;
  _BYTE v8[16];
  std::__shared_weak_count *v9;
  uint64_t v10;
  char v11;
  __int128 v12;
  int v13;
  char v14;
  _DWORD v15[10];
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _DWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[3];
  _QWORD *v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (*a1 != 1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 57, (uint64_t)"((std::is_same_v<UT, uint8_t> && data_type == BufferDataType::Uint8) || (std::is_same_v<UT, half> && data_type == BufferDataType::Float16) || (std::is_same_v<UT, float> && data_type == BufferDataType::Float32))", 210, (uint64_t)"Buffer type mismatch", 20, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
  v23 = 0;
  if (e5rt_buffer_object_get_data_ptr()
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 60, (uint64_t)"ret == E5RT_ERROR_CODE_OK", 25, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
  v21 = 0;
  v22 = 0;
  e5rt_tensor_desc_get_shape();
  v20 = 0;
  e5rt_tensor_desc_get_strides();
  v19 = 0;
  e5rt_tensor_desc_retain_dtype();
  v24[0] = &off_24CA79900;
  v24[1] = MEMORY[0x24BE2FA68];
  v24[2] = &v19;
  v25 = v24;
  v18 = 0;
  e5rt_tensor_desc_dtype_get_num_components();
  v17 = 0;
  e5rt_tensor_desc_dtype_get_element_size();
  v16 = 0;
  e5rt_tensor_desc_dtype_get_component_size();
  sub_2108A4DF8(v22, v21, v20, 0, 0, (uint64_t)v15);
  v12 = *(_OWORD *)&v15[5];
  v13 = v15[9];
  v14 = 1;
  v8[0] = 0;
  v11 = 0;
  sub_21098B284(a2, v23, (__int128 *)v15, &v12, dword_210A0BBB4, (uint64_t)v8);
  if (v11)
  {
    nullsub_51(&v10);
    v3 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    nullsub_51(v8);
  }
  if (!v25)
    sub_2108B30F0();
  (*(void (**)(_QWORD *))(*v25 + 48))(v25);
  result = v25;
  if (v25 == v24)
  {
    v7 = 4;
    result = v24;
  }
  else
  {
    if (!v25)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

void sub_2108C0144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_2108B1C70((uint64_t)&a9);
  sub_2108A6938((_QWORD *)(v9 - 72));
  _Unwind_Resume(a1);
}

void sub_2108C0160(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108A6938((_QWORD *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_2108C0174(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108A6938((_QWORD *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_2108C0188(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108A6938((_QWORD *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_2108C019C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108A6938((_QWORD *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_2108C01B0(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_2108ABF6C(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2108C01CC@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *result;
  uint64_t v7;
  _BYTE v8[16];
  std::__shared_weak_count *v9;
  uint64_t v10;
  char v11;
  __int128 v12;
  int v13;
  char v14;
  _BYTE v15[20];
  __int128 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _DWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[3];
  _QWORD *v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  if (*a1 != 2
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 57, (uint64_t)"((std::is_same_v<UT, uint8_t> && data_type == BufferDataType::Uint8) || (std::is_same_v<UT, half> && data_type == BufferDataType::Float16) || (std::is_same_v<UT, float> && data_type == BufferDataType::Float32))", 210, (uint64_t)"Buffer type mismatch", 20, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
  v25 = 0;
  if (e5rt_buffer_object_get_data_ptr()
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 60, (uint64_t)"ret == E5RT_ERROR_CODE_OK", 25, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
  v23 = 0;
  v24 = 0;
  e5rt_tensor_desc_get_shape();
  v22 = 0;
  e5rt_tensor_desc_get_strides();
  v21 = 0;
  e5rt_tensor_desc_retain_dtype();
  v26[0] = &off_24CA79900;
  v26[1] = MEMORY[0x24BE2FA68];
  v26[2] = &v21;
  v27 = v26;
  v20 = 0;
  e5rt_tensor_desc_dtype_get_num_components();
  v19 = 0;
  e5rt_tensor_desc_dtype_get_element_size();
  v18 = 0;
  e5rt_tensor_desc_dtype_get_component_size();
  sub_2108A5010(v24, v23, v22, 0, 0, (uint64_t)v15);
  v12 = v16;
  v13 = v17;
  v14 = 1;
  v8[0] = 0;
  v11 = 0;
  sub_21098B698(a2, v25, v15, &v12, &unk_210A1A16C, v8);
  if (v11)
  {
    nullsub_51(&v10);
    v3 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    nullsub_51(v8);
  }
  if (!v27)
    sub_2108B30F0();
  (*(void (**)(_QWORD *))(*v27 + 48))(v27);
  result = v27;
  if (v27 == v26)
  {
    v7 = 4;
    result = v26;
  }
  else
  {
    if (!v27)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

void sub_2108C043C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_2108B1C70((uint64_t)&a9);
  sub_2108A6938((_QWORD *)(v9 - 72));
  _Unwind_Resume(a1);
}

void sub_2108C0458(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108A6938((_QWORD *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_2108C046C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108A6938((_QWORD *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_2108C0480(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108A6938((_QWORD *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_2108C0494(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108A6938((_QWORD *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_2108C04A8(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_2108ABF6C(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2108C04C4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  nullsub_51(a1 + 24);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return nullsub_51(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_51(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_51(a1);
}

uint64_t sub_2108C0534@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  int v12;
  int32x4_t v13;

  v2 = result;
  if ((*(_BYTE *)(result + 48) & 0x10) == 0)
  {
    result = sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/include/Kit/ML/DataView.h", 730, (uint64_t)"format.Contains(FormatFlags::UINT8)", 35, (uint64_t)"The DataView does not contain uint8 data", 40, (void (*)(void **))sub_2109EDDB4);
    if ((_DWORD)result)
      goto LABEL_22;
  }
  if (*(_BYTE *)(v2 + 112))
  {
    if (*(_BYTE *)(v2 + 108) && *(_QWORD *)(v2 + 96))
    {
      v4 = *(_QWORD *)(v2 + 64);
      v5 = *(std::__shared_weak_count **)(v2 + 72);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      result = (*(uint64_t (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v4 + 88))(v4, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    }
    v9 = (uint64_t *)(v2 + 96);
  }
  else
  {
    v9 = (uint64_t *)(v2 + 40);
  }
  v10 = *v9;
  v11 = *(_DWORD *)(v2 + 36);
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*(int32x4_t *)v2))) & 1) != 0 || (v12 = *(_DWORD *)(v2 + 16)) == 0)
  {
    v12 = 0;
    v13 = 0uLL;
  }
  else
  {
    v13 = *(int32x4_t *)v2;
  }
  *(_OWORD *)(a2 + 28) = *(_OWORD *)(v2 + 20);
  *(_QWORD *)a2 = v10;
  *(int32x4_t *)(a2 + 8) = v13;
  *(_DWORD *)(a2 + 24) = v12;
  *(_DWORD *)(a2 + 44) = v11;
  if (v12 * v11 == -1)
  {
    result = sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4);
    if ((_DWORD)result)
LABEL_22:
      abort();
  }
  return result;
}

uint64_t sub_2108C06F4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  int v12;
  int32x4_t v13;

  v2 = result;
  if ((*(_BYTE *)(result + 48) & 0x10) == 0)
  {
    result = sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/include/Kit/ML/DataView.h", 730, (uint64_t)"format.Contains(FormatFlags::UINT8)", 35, (uint64_t)"The DataView does not contain uint8 data", 40, (void (*)(void **))sub_2109EDDB4);
    if ((_DWORD)result)
      goto LABEL_22;
  }
  if (*(_BYTE *)(v2 + 112))
  {
    if (*(_BYTE *)(v2 + 108) && *(_QWORD *)(v2 + 96))
    {
      v4 = *(_QWORD *)(v2 + 64);
      v5 = *(std::__shared_weak_count **)(v2 + 72);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v4 + 88))(v4, 1, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    }
    v9 = (uint64_t *)(v2 + 96);
  }
  else
  {
    v9 = (uint64_t *)(v2 + 40);
  }
  v10 = *v9;
  v11 = *(_DWORD *)(v2 + 36);
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*(int32x4_t *)v2))) & 1) != 0 || (v12 = *(_DWORD *)(v2 + 16)) == 0)
  {
    v12 = 0;
    v13 = 0uLL;
  }
  else
  {
    v13 = *(int32x4_t *)v2;
  }
  *(_OWORD *)(a2 + 28) = *(_OWORD *)(v2 + 20);
  *(_QWORD *)a2 = v10;
  *(int32x4_t *)(a2 + 8) = v13;
  *(_DWORD *)(a2 + 24) = v12;
  *(_DWORD *)(a2 + 44) = v11;
  if (v12 * v11 == -1)
  {
    result = sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4);
    if ((_DWORD)result)
LABEL_22:
      abort();
  }
  return result;
}

size_t *sub_2108C08B4(size_t *result)
{
  uint64_t v1;
  uint64_t v2;
  int v4;
  unsigned int v5;
  BOOL v6;
  size_t v10;
  int var1;

  v1 = *result;
  v2 = result[1];
  if (*(_DWORD *)(*result + 28) == 1 && *(_DWORD *)(v2 + 28) == 1)
  {
    v4 = *(_DWORD *)(v1 + 32);
    if (v4 == *(_DWORD *)(v2 + 32))
    {
      v5 = *(_DWORD *)(v1 + 8);
      if (v4 == v5)
        return sub_2108C0978(result);
    }
    else
    {
      v5 = *(_DWORD *)(v1 + 8);
    }
    v10 = v5;
    if (v5)
      v6 = *(_DWORD *)(v1 + 12) == 0;
    else
      v6 = 1;
    if (!v6 && *(_DWORD *)(v1 + 16) != 0 && *(_DWORD *)(v1 + 20) != 0 && *(_DWORD *)(v1 + 24) != 0)
      return sub_2108C14D4(&v10, v1, v2);
  }
  else
  {
    LOBYTE(var1) = 0;
    if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*(int32x4_t *)(v1 + 8)))) & 1) == 0)
    {
      if (*(_DWORD *)(v1 + 24))
        return (size_t *)sub_2108C19D4(&var1, v1, v2);
    }
  }
  return result;
}

size_t *sub_2108C0978(size_t *result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  unsigned int v4;
  int v5;
  int v6;
  unsigned int v7;
  int32x4_t v8;
  int v9;
  BOOL v10;
  size_t v14;

  v1 = *result;
  v2 = result[1];
  v3 = *(_DWORD *)(*result + 36);
  v4 = *(_DWORD *)(*result + 12);
  if (v3 == *(_DWORD *)(v2 + 36) && v3 == *(_DWORD *)(v1 + 32) * v4)
  {
    v5 = *(_DWORD *)(v1 + 40);
    if (v5 == *(_DWORD *)(v2 + 40))
    {
      v6 = *(_DWORD *)(v1 + 16);
      if (v5 == v6 * v3)
        return sub_2108C0A68(result);
    }
    else
    {
      v6 = *(_DWORD *)(v1 + 16);
    }
    v9 = *(_DWORD *)(v1 + 8);
    v14 = v9 * v6 * v4;
    if (v9)
      v10 = v4 == 0;
    else
      v10 = 1;
    if (!v10 && v6 != 0 && *(_DWORD *)(v1 + 20) != 0 && *(_DWORD *)(v1 + 24) != 0)
      return sub_2108C0D00(&v14, (char **)v1, (char **)v2);
  }
  else
  {
    v7 = *(_DWORD *)(v1 + 8);
    v14 = v4 * v7;
    v8.i64[0] = __PAIR64__(v4, v7);
    v8.i64[1] = *(_QWORD *)(v1 + 16);
    if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v8))) & 1) == 0 && *(_DWORD *)(v1 + 24))
      return (size_t *)sub_2108C1020((unsigned int *)&v14, v1, v2);
  }
  return result;
}

size_t *sub_2108C0A68(size_t *result)
{
  size_t v1;
  size_t v2;
  int v3;
  unsigned int v4;
  size_t v5;
  char *v6;
  BOOL v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int32x4_t v11;
  size_t v12;

  v1 = *result;
  v2 = result[1];
  v3 = *(_DWORD *)(*result + 44);
  v4 = *(_DWORD *)(*result + 20);
  if (v3 == *(_DWORD *)(v2 + 44) && v3 == *(_DWORD *)(v1 + 40) * v4)
  {
    v5 = *(_DWORD *)(v1 + 12) * *(_DWORD *)(v1 + 8) * *(_DWORD *)(v1 + 16) * v4 * *(_DWORD *)(v1 + 24);
    v6 = *(char **)v1;
    if ((_DWORD)v5)
      v7 = v6 == 0;
    else
      v7 = 0;
    if (v7)
    {
      if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
      {
        abort();
      }
    }
    else if (!(_DWORD)v5)
    {
      return result;
    }
    return (size_t *)memmove(*(void **)v2, v6, v5);
  }
  v8 = *(_DWORD *)(v1 + 8);
  v9 = *(_DWORD *)(v1 + 12);
  v10 = *(_DWORD *)(v1 + 16);
  v12 = v9 * v8 * v10 * v4;
  v11.i64[0] = __PAIR64__(v9, v8);
  v11.i64[1] = __PAIR64__(v4, v10);
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v11))) & 1) == 0 && *(_DWORD *)(v1 + 24))
    return sub_2108C0BA4(&v12, (char **)v1, (char **)v2);
  return result;
}

size_t *sub_2108C0BA4(size_t *result, char **a2, char **a3)
{
  int v3;
  size_t *v4;
  char *v5;
  char *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  size_t v11;

  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*(int32x4_t *)(a2 + 1)))) & 1) == 0)
  {
    v3 = *((_DWORD *)a2 + 6);
    if (v3)
    {
      v4 = result;
      v5 = *a2;
      v6 = *a3;
      v7 = v3 - 1;
      if (v3 != 1)
      {
        v8 = *((unsigned int *)a3 + 11);
        v9 = *((unsigned int *)a2 + 11);
        do
        {
          v10 = *v4;
          if (!v5 && v10)
          {
            if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
            {
              goto LABEL_15;
            }
          }
          else if (!v10)
          {
            goto LABEL_7;
          }
          result = (size_t *)memmove(v6, v5, v10);
LABEL_7:
          v5 += v9;
          v6 += v8;
          --v7;
        }
        while (v7);
      }
      v11 = *v4;
      if (v5 || !v11)
      {
        if (!v11)
          return result;
      }
      else if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
      {
LABEL_15:
        abort();
      }
      return (size_t *)memmove(v6, v5, v11);
    }
  }
  return result;
}

size_t *sub_2108C0D00(size_t *result, char **a2, char **a3)
{
  int32x4_t v3;
  int v4;
  size_t *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int v10;
  int v11;
  char *v12;
  char *v13;
  char *v14;
  size_t v15;
  size_t v16;
  size_t v17;
  int i;
  size_t v19;
  size_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;

  v3 = *(int32x4_t *)(a2 + 1);
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v3))) & 1) == 0)
  {
    v4 = *((_DWORD *)a2 + 6);
    if (v4)
    {
      v5 = result;
      v6 = *((unsigned int *)a2 + 10);
      v7 = *((unsigned int *)a3 + 10);
      v8 = *a2;
      v9 = *a3;
      v25 = v4 - 1;
      v21 = v3.i32[3] - 1;
      if (v4 != 1)
      {
        v23 = *((unsigned int *)a3 + 11);
        v22 = *((unsigned int *)a2 + 11);
        if (v3.i32[3] != 1)
        {
          v10 = 0;
          while (1)
          {
            v24 = v10;
            v11 = v21;
            v12 = v8;
            v13 = v9;
            do
            {
              v14 = v12;
              v15 = *v5;
              if (!v14 && v15)
              {
                if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
                {
                  goto LABEL_41;
                }
LABEL_11:
                result = (size_t *)memmove(v13, v14, v15);
                goto LABEL_12;
              }
              if (v15)
                goto LABEL_11;
LABEL_12:
              v12 = &v14[v6];
              v13 += v7;
              --v11;
            }
            while (v11);
            v16 = *v5;
            if (!v14 && v16)
            {
              if (!sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
              {
LABEL_7:
                result = (size_t *)memmove(v13, &v14[v6], v16);
                goto LABEL_8;
              }
LABEL_41:
              abort();
            }
            if (v16)
              goto LABEL_7;
LABEL_8:
            v8 += v22;
            v9 += v23;
            v10 = v24 + 1;
            if (v24 + 1 == v25)
              goto LABEL_29;
          }
        }
        do
        {
          v17 = *v5;
          if (!v8 && v17)
          {
            if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
            {
              goto LABEL_41;
            }
          }
          else if (!v17)
          {
            goto LABEL_24;
          }
          result = (size_t *)memmove(v9, v8, v17);
LABEL_24:
          v8 += v22;
          v9 += v23;
          --v25;
        }
        while (v25);
      }
LABEL_29:
      for (i = v21; i; --i)
      {
        v19 = *v5;
        if (!v8 && v19)
        {
          if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
          {
            goto LABEL_41;
          }
        }
        else if (!v19)
        {
          goto LABEL_33;
        }
        result = (size_t *)memmove(v9, v8, v19);
LABEL_33:
        v8 += v6;
        v9 += v7;
      }
      v20 = *v5;
      if (v8 || !v20)
      {
        if (!v20)
          return result;
      }
      else if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
      {
        goto LABEL_41;
      }
      return (size_t *)memmove(v9, v8, v20);
    }
  }
  return result;
}

unsigned int *sub_2108C1020(unsigned int *result, uint64_t a2, uint64_t a3)
{
  __int32 v3;
  uint64_t v4;
  int32x4_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unsigned int *v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  __int32 v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  _OWORD v24[2];

  v3 = *(_DWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 20);
  v5.i32[0] = *(_DWORD *)(a2 + 8);
  v5.i32[1] = v3;
  v5.i64[1] = v4;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v5))) & 1) == 0)
  {
    v6 = *(_DWORD *)(a2 + 12);
    if (v6)
    {
      v14 = *(_DWORD *)(a2 + 8) - 1;
      v7 = *(unsigned int *)(a2 + 32);
      v8 = *(unsigned int *)(a3 + 32);
      v15 = *(unsigned int *)(a2 + 28) | ((unint64_t)*(unsigned int *)(a3 + 28) << 32);
      v13 = 0;
      v16 = v6 - 1;
      v17 = v7 | (v8 << 32);
      v18 = v3 - 1;
      v9 = *(unsigned int *)(a2 + 40);
      v10 = *(unsigned int *)(a3 + 40);
      v19 = *(unsigned int *)(a2 + 36) | ((unint64_t)*(unsigned int *)(a3 + 36) << 32);
      v20 = v4 - 1;
      v21 = v9 | (v10 << 32);
      v22 = HIDWORD(v4) - 1;
      v23 = *(unsigned int *)(a2 + 44) | ((unint64_t)*(unsigned int *)(a3 + 44) << 32);
      v11 = *(char **)a2;
      v12 = *(unsigned int **)a3;
      memset(v24, 0, sizeof(v24));
      return sub_2108C1104((unsigned int *)&v13, (uint64_t)v24, (size_t *)result, v11, v12);
    }
  }
  return result;
}

unsigned int *sub_2108C1104(unsigned int *a1, uint64_t a2, size_t *a3, char *__src, unsigned int *__dst)
{
  int v10;
  char *v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int *v16;
  char *v17;
  int v18;
  unsigned int *v19;
  size_t v20;
  size_t v21;
  unsigned int v22;
  int v24;
  char *v25;
  unsigned int *v26;

  if (a1[14])
  {
    v10 = 0;
    while (1)
    {
      v24 = v10;
      v25 = __src;
      v26 = __dst;
      v11 = __src;
      if (a1[11])
        break;
LABEL_3:
      sub_2108C1354(a1, (char **)a2, a3, v11, __dst);
      __src = &v25[a1[15]];
      __dst = (unsigned int *)((char *)v26 + a1[16]);
      v10 = v24 + 1;
      if (v24 + 1 >= a1[14])
        goto LABEL_22;
    }
    v12 = 0;
    v11 = __src;
    while (1)
    {
      v13 = a1[3] | ((unint64_t)a1[6] << 32);
      v14 = a1[4] | ((unint64_t)a1[7] << 32);
      *(_QWORD *)a2 = v11;
      *(_QWORD *)(a2 + 8) = v13;
      *(_QWORD *)(a2 + 16) = __dst;
      *(_QWORD *)(a2 + 24) = v14;
      v15 = a1[8];
      v16 = __dst;
      v17 = v11;
      if (v15)
      {
        v18 = 0;
        v17 = v11;
        v16 = __dst;
        while (1)
        {
          *(_QWORD *)a2 = v17;
          *(_QWORD *)(a2 + 16) = v16;
          v20 = *a3;
          if (!v17)
          {
            if (v20)
              break;
          }
          v19 = v16;
          if (v20)
            goto LABEL_12;
LABEL_13:
          v17 += a1[9];
          v16 = (unsigned int *)((char *)v16 + a1[10]);
          if (++v18 >= v15)
            goto LABEL_18;
        }
        if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
        {
          goto LABEL_26;
        }
        v19 = *(unsigned int **)(a2 + 16);
LABEL_12:
        memmove(v19, v17, v20);
        v15 = a1[8];
        goto LABEL_13;
      }
LABEL_18:
      *(_QWORD *)a2 = v17;
      *(_QWORD *)(a2 + 16) = v16;
      v21 = *a3;
      if (!v17)
      {
        if (v21)
          break;
      }
      if (v21)
        goto LABEL_7;
LABEL_8:
      v11 += a1[12];
      __dst = (unsigned int *)((char *)__dst + a1[13]);
      if (++v12 >= a1[11])
        goto LABEL_3;
    }
    if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
    {
LABEL_26:
      abort();
    }
    v16 = *(unsigned int **)(a2 + 16);
LABEL_7:
    memmove(v16, v17, v21);
    goto LABEL_8;
  }
LABEL_22:
  if (a1[11])
  {
    v22 = 0;
    do
    {
      sub_2108C1354(a1, (char **)a2, a3, __src, __dst);
      __src += a1[12];
      __dst = (unsigned int *)((char *)__dst + a1[13]);
      ++v22;
    }
    while (v22 < a1[11]);
  }
  return sub_2108C1354(a1, (char **)a2, a3, __src, __dst);
}

unsigned int *sub_2108C1354(unsigned int *result, char **a2, size_t *a3, char *__src, unsigned int *__dst)
{
  unsigned int *v5;
  char *v6;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int *v12;
  int v13;
  size_t v14;
  size_t v15;

  v5 = __dst;
  v6 = __src;
  v9 = result[3] | ((unint64_t)result[6] << 32);
  v10 = result[4] | ((unint64_t)result[7] << 32);
  *a2 = __src;
  a2[1] = (char *)v9;
  a2[2] = (char *)__dst;
  a2[3] = (char *)v10;
  v11 = result[8];
  if (v11)
  {
    v12 = result;
    v13 = 0;
    while (1)
    {
      *a2 = v6;
      a2[2] = (char *)v5;
      v14 = *a3;
      if (!v6)
      {
        if (v14)
          break;
      }
      result = v5;
      if (v14)
        goto LABEL_4;
LABEL_5:
      v6 += v12[9];
      v5 = (unsigned int *)((char *)v5 + v12[10]);
      if (++v13 >= v11)
        goto LABEL_10;
    }
    if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
    {
      goto LABEL_17;
    }
    result = (unsigned int *)a2[2];
LABEL_4:
    result = (unsigned int *)memmove(result, v6, v14);
    v11 = v12[8];
    goto LABEL_5;
  }
LABEL_10:
  *a2 = v6;
  a2[2] = (char *)v5;
  v15 = *a3;
  if (!v6 && v15)
  {
    if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
    {
LABEL_17:
      abort();
    }
    v5 = (unsigned int *)a2[2];
    return (unsigned int *)memmove(v5, v6, v15);
  }
  if (v15)
    return (unsigned int *)memmove(v5, v6, v15);
  return result;
}

size_t *sub_2108C14D4(size_t *result, uint64_t a2, uint64_t a3)
{
  __int32 v3;
  uint64_t v4;
  int32x4_t v5;
  int v6;
  size_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  __int32 v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t v25;
  _OWORD v26[2];

  v3 = *(_DWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 20);
  v5.i32[0] = *(_DWORD *)(a2 + 8);
  v5.i32[1] = v3;
  v5.i64[1] = v4;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v5))) & 1) == 0)
  {
    v6 = *(_DWORD *)(a2 + 12);
    if (v6)
    {
      v7 = result;
      v16 = *(_DWORD *)(a2 + 8) - 1;
      v8 = *(unsigned int *)(a2 + 32);
      v9 = *(unsigned int *)(a3 + 32);
      v17 = *(unsigned int *)(a2 + 28) | ((unint64_t)*(unsigned int *)(a3 + 28) << 32);
      v15 = 0;
      v18 = v6 - 1;
      v19 = v8 | (v9 << 32);
      v20 = v3 - 1;
      v10 = *(unsigned int *)(a2 + 40);
      v11 = *(unsigned int *)(a3 + 40);
      v21 = *(unsigned int *)(a2 + 36) | ((unint64_t)*(unsigned int *)(a3 + 36) << 32);
      v22 = v4 - 1;
      v23 = v10 | (v11 << 32);
      v25 = *(unsigned int *)(a2 + 44) | ((unint64_t)*(unsigned int *)(a3 + 44) << 32);
      v12 = *(char **)a2;
      v13 = *(char **)a3;
      memset(v26, 0, sizeof(v26));
      v24 = HIDWORD(v4) - 1;
      if (HIDWORD(v4) != 1)
      {
        v14 = 0;
        do
        {
          sub_2108C160C(&v15, (uint64_t)v26, v7, v12, v13);
          v12 += v25;
          v13 += HIDWORD(v25);
          ++v14;
        }
        while (v14 < v24);
      }
      return (size_t *)sub_2108C160C(&v15, (uint64_t)v26, v7, v12, v13);
    }
  }
  return result;
}

_DWORD *sub_2108C160C(_DWORD *a1, uint64_t a2, size_t *a3, char *__src, char *__dst)
{
  int v10;
  char *v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  char *v16;
  char *v17;
  int v18;
  char *v19;
  size_t v20;
  size_t v21;
  unsigned int v22;
  int v24;
  char *v25;
  char *v26;

  if (a1[11])
  {
    v10 = 0;
    while (1)
    {
      v24 = v10;
      v25 = __src;
      v26 = __dst;
      v11 = __src;
      if (a1[8])
        break;
LABEL_3:
      sub_2108C1858(a1, a2, a3, v11, __dst);
      __src = &v25[a1[12]];
      __dst = &v26[a1[13]];
      v10 = v24 + 1;
      if ((v24 + 1) >= a1[11])
        goto LABEL_22;
    }
    v12 = 0;
    v11 = __src;
    while (1)
    {
      v13 = a1[3];
      v14 = a1[4];
      *(_QWORD *)a2 = v11;
      *(_DWORD *)(a2 + 8) = v13;
      *(_QWORD *)(a2 + 16) = __dst;
      *(_DWORD *)(a2 + 24) = v14;
      v15 = a1[5];
      v16 = __dst;
      v17 = v11;
      if (v15)
      {
        v18 = 0;
        v17 = v11;
        v16 = __dst;
        while (1)
        {
          *(_QWORD *)a2 = v17;
          *(_QWORD *)(a2 + 16) = v16;
          v20 = *a3;
          if (!v17)
          {
            if (v20)
              break;
          }
          v19 = v16;
          if (v20)
            goto LABEL_12;
LABEL_13:
          v17 += a1[6];
          v16 += a1[7];
          if (++v18 >= v15)
            goto LABEL_18;
        }
        if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
        {
          goto LABEL_26;
        }
        v19 = *(char **)(a2 + 16);
LABEL_12:
        memmove(v19, v17, v20);
        v15 = a1[5];
        goto LABEL_13;
      }
LABEL_18:
      *(_QWORD *)a2 = v17;
      *(_QWORD *)(a2 + 16) = v16;
      v21 = *a3;
      if (!v17)
      {
        if (v21)
          break;
      }
      if (v21)
        goto LABEL_7;
LABEL_8:
      v11 += a1[9];
      __dst += a1[10];
      if (++v12 >= a1[8])
        goto LABEL_3;
    }
    if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
    {
LABEL_26:
      abort();
    }
    v16 = *(char **)(a2 + 16);
LABEL_7:
    memmove(v16, v17, v21);
    goto LABEL_8;
  }
LABEL_22:
  if (a1[8])
  {
    v22 = 0;
    do
    {
      sub_2108C1858(a1, a2, a3, __src, __dst);
      __src += a1[9];
      __dst += a1[10];
      ++v22;
    }
    while (v22 < a1[8]);
  }
  return sub_2108C1858(a1, a2, a3, __src, __dst);
}

_DWORD *sub_2108C1858(_DWORD *result, uint64_t a2, size_t *a3, char *__src, char *__dst)
{
  char *v5;
  char *v6;
  int v9;
  int v10;
  unsigned int v11;
  _DWORD *v12;
  int v13;
  size_t v14;
  size_t v15;

  v5 = __dst;
  v6 = __src;
  v9 = result[3];
  v10 = result[4];
  *(_QWORD *)a2 = __src;
  *(_DWORD *)(a2 + 8) = v9;
  *(_QWORD *)(a2 + 16) = __dst;
  *(_DWORD *)(a2 + 24) = v10;
  v11 = result[5];
  if (v11)
  {
    v12 = result;
    v13 = 0;
    while (1)
    {
      *(_QWORD *)a2 = v6;
      *(_QWORD *)(a2 + 16) = v5;
      v14 = *a3;
      if (!v6)
      {
        if (v14)
          break;
      }
      result = v5;
      if (v14)
        goto LABEL_4;
LABEL_5:
      v6 += v12[6];
      v5 += v12[7];
      if (++v13 >= v11)
        goto LABEL_10;
    }
    if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
    {
      goto LABEL_17;
    }
    result = *(_DWORD **)(a2 + 16);
LABEL_4:
    result = memmove(result, v6, v14);
    v11 = v12[5];
    goto LABEL_5;
  }
LABEL_10:
  *(_QWORD *)a2 = v6;
  *(_QWORD *)(a2 + 16) = v5;
  v15 = *a3;
  if (!v6 && v15)
  {
    if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
    {
LABEL_17:
      abort();
    }
    v5 = *(char **)(a2 + 16);
    return memmove(v5, v6, v15);
  }
  if (v15)
    return memmove(v5, v6, v15);
  return result;
}

_DWORD *sub_2108C19D4(_DWORD *result, uint64_t a2, uint64_t a3)
{
  __int32 v3;
  uint64_t v4;
  int32x4_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  __int32 v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  char v24;

  v3 = *(_DWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 20);
  v5.i32[0] = *(_DWORD *)(a2 + 8);
  v5.i32[1] = v3;
  v5.i64[1] = v4;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v5))) & 1) == 0)
  {
    v6 = *(_DWORD *)(a2 + 12);
    if (v6)
    {
      v14 = *(_DWORD *)(a2 + 8) - 1;
      v7 = *(unsigned int *)(a2 + 32);
      v8 = *(unsigned int *)(a3 + 32);
      v15 = *(unsigned int *)(a2 + 28) | ((unint64_t)*(unsigned int *)(a3 + 28) << 32);
      v13 = 0;
      v16 = v6 - 1;
      v17 = v7 | (v8 << 32);
      v18 = v3 - 1;
      v9 = *(unsigned int *)(a2 + 40);
      v10 = *(unsigned int *)(a3 + 40);
      v19 = *(unsigned int *)(a2 + 36) | ((unint64_t)*(unsigned int *)(a3 + 36) << 32);
      v20 = v4 - 1;
      v21 = v9 | (v10 << 32);
      v22 = HIDWORD(v4) - 1;
      v23 = *(unsigned int *)(a2 + 44) | ((unint64_t)*(unsigned int *)(a3 + 44) << 32);
      v11 = *(_BYTE **)a2;
      v12 = *(_BYTE **)a3;
      v24 = 0;
      return sub_2108C1AB4(&v13, (uint64_t)&v24, (uint64_t)result, v11, v12);
    }
  }
  return result;
}

_DWORD *sub_2108C1AB4(_DWORD *a1, uint64_t a2, uint64_t a3, _BYTE *a4, _BYTE *a5)
{
  unsigned int v10;
  _BYTE *v11;
  _BYTE *v12;
  unsigned int v13;
  _BYTE *v14;
  _BYTE *v15;
  unsigned int v16;
  _BYTE *v17;
  _BYTE *v18;
  unsigned int v19;
  _BYTE *v20;
  _BYTE *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  _BYTE *v25;
  _BYTE *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;

  if (a1[14])
  {
    v10 = 0;
    do
    {
      v11 = a5;
      v12 = a4;
      if (a1[11])
      {
        v13 = 0;
        v12 = a4;
        v11 = a5;
        do
        {
          v14 = v12;
          v15 = v11;
          if (a1[8])
          {
            v16 = 0;
            v14 = v12;
            v15 = v11;
            do
            {
              v17 = v14;
              v18 = v15;
              if (a1[5])
              {
                v19 = 0;
                v17 = v14;
                v18 = v15;
                do
                {
                  v20 = v18;
                  v21 = v17;
                  if (a1[2])
                  {
                    v22 = 0;
                    v21 = v17;
                    v20 = v18;
                    do
                    {
                      *v20 = *v21;
                      v21 += a1[3];
                      v20 += a1[4];
                      ++v22;
                    }
                    while (v22 < a1[2]);
                  }
                  *v20 = *v21;
                  v17 += a1[6];
                  v18 += a1[7];
                  ++v19;
                }
                while (v19 < a1[5]);
              }
              if (a1[2])
              {
                v23 = 0;
                do
                {
                  *v18 = *v17;
                  v17 += a1[3];
                  v18 += a1[4];
                  ++v23;
                }
                while (v23 < a1[2]);
              }
              *v18 = *v17;
              v14 += a1[9];
              v15 += a1[10];
              ++v16;
            }
            while (v16 < a1[8]);
          }
          if (a1[5])
          {
            v24 = 0;
            do
            {
              v25 = v15;
              v26 = v14;
              if (a1[2])
              {
                v27 = 0;
                v26 = v14;
                v25 = v15;
                do
                {
                  *v25 = *v26;
                  v26 += a1[3];
                  v25 += a1[4];
                  ++v27;
                }
                while (v27 < a1[2]);
              }
              *v25 = *v26;
              v14 += a1[6];
              v15 += a1[7];
              ++v24;
            }
            while (v24 < a1[5]);
          }
          if (a1[2])
          {
            v28 = 0;
            do
            {
              *v15 = *v14;
              v14 += a1[3];
              v15 += a1[4];
              ++v28;
            }
            while (v28 < a1[2]);
          }
          *v15 = *v14;
          v12 += a1[12];
          v11 += a1[13];
          ++v13;
        }
        while (v13 < a1[11]);
      }
      sub_2108C1D70(a1, a2, a3, v12, v11);
      a4 += a1[15];
      a5 += a1[16];
      ++v10;
    }
    while (v10 < a1[14]);
  }
  if (a1[11])
  {
    v29 = 0;
    do
    {
      sub_2108C1D70(a1, a2, a3, a4, a5);
      a4 += a1[12];
      a5 += a1[13];
      ++v29;
    }
    while (v29 < a1[11]);
  }
  return sub_2108C1D70(a1, a2, a3, a4, a5);
}

_DWORD *sub_2108C1D70(_DWORD *result, uint64_t a2, uint64_t a3, _BYTE *a4, _BYTE *a5)
{
  unsigned int v5;
  _BYTE *v6;
  _BYTE *v7;
  unsigned int v8;
  _BYTE *v9;
  _BYTE *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  _BYTE *v14;
  _BYTE *v15;
  unsigned int v16;
  unsigned int v17;

  if (result[8])
  {
    v5 = 0;
    do
    {
      v6 = a4;
      v7 = a5;
      if (result[5])
      {
        v8 = 0;
        v6 = a4;
        v7 = a5;
        do
        {
          v9 = v7;
          v10 = v6;
          if (result[2])
          {
            v11 = 0;
            v10 = v6;
            v9 = v7;
            do
            {
              *v9 = *v10;
              v10 += result[3];
              v9 += result[4];
              ++v11;
            }
            while (v11 < result[2]);
          }
          *v9 = *v10;
          v6 += result[6];
          v7 += result[7];
          ++v8;
        }
        while (v8 < result[5]);
      }
      if (result[2])
      {
        v12 = 0;
        do
        {
          *v7 = *v6;
          v6 += result[3];
          v7 += result[4];
          ++v12;
        }
        while (v12 < result[2]);
      }
      *v7 = *v6;
      a4 += result[9];
      a5 += result[10];
      ++v5;
    }
    while (v5 < result[8]);
  }
  if (result[5])
  {
    v13 = 0;
    do
    {
      v14 = a5;
      v15 = a4;
      if (result[2])
      {
        v16 = 0;
        v15 = a4;
        v14 = a5;
        do
        {
          *v14 = *v15;
          v15 += result[3];
          v14 += result[4];
          ++v16;
        }
        while (v16 < result[2]);
      }
      *v14 = *v15;
      a4 += result[6];
      a5 += result[7];
      ++v13;
    }
    while (v13 < result[5]);
  }
  if (result[2])
  {
    v17 = 0;
    do
    {
      *a5 = *a4;
      a4 += result[3];
      a5 += result[4];
      ++v17;
    }
    while (v17 < result[2]);
  }
  *a5 = *a4;
  return result;
}

void sub_2108C1F14(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  nullsub_51(a1 + 24);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_51(a1);
  JUMPOUT(0x212BCC6FCLL);
}

uint64_t sub_2108C1F88(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t sub_2108C1F90(uint64_t a1)
{
  return a1 + 24;
}

uint64_t sub_2108C1F98@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 24);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 32);
  return result;
}

uint64_t sub_2108C1FAC(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_2108C2030@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  int v12;
  int32x4_t v13;

  v2 = result;
  if ((*(_BYTE *)(result + 48) & 0x20) == 0)
  {
    result = sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/include/Kit/ML/DataView.h", 727, (uint64_t)"format.Contains(FormatFlags::FLOAT16)", 37, (uint64_t)"The DataView does not contain half data", 39, (void (*)(void **))sub_2109EDDB4);
    if ((_DWORD)result)
      goto LABEL_22;
  }
  if (*(_BYTE *)(v2 + 112))
  {
    if (*(_BYTE *)(v2 + 108) && *(_QWORD *)(v2 + 96))
    {
      v4 = *(_QWORD *)(v2 + 64);
      v5 = *(std::__shared_weak_count **)(v2 + 72);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v4 + 88))(v4, 1, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    }
    v9 = (uint64_t *)(v2 + 96);
  }
  else
  {
    v9 = (uint64_t *)(v2 + 40);
  }
  v10 = *v9;
  v11 = *(_DWORD *)(v2 + 36);
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*(int32x4_t *)v2))) & 1) != 0 || (v12 = *(_DWORD *)(v2 + 16)) == 0)
  {
    v12 = 0;
    v13 = 0uLL;
  }
  else
  {
    v13 = *(int32x4_t *)v2;
  }
  *(_OWORD *)(a2 + 28) = *(_OWORD *)(v2 + 20);
  *(_QWORD *)a2 = v10;
  *(int32x4_t *)(a2 + 8) = v13;
  *(_DWORD *)(a2 + 24) = v12;
  *(_DWORD *)(a2 + 44) = v11;
  if (v12 * v11 == -1)
  {
    result = sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4);
    if ((_DWORD)result)
LABEL_22:
      abort();
  }
  return result;
}

__int16 sub_2108C21F0@<H0>(_DWORD *a1@<X0>, _BYTE *a2@<X1>, _WORD *a3@<X2>, float _S0@<S0>)
{
  unsigned int v4;
  _BYTE *v9;
  _WORD *v10;
  unsigned int v11;
  _WORD *v12;
  _BYTE *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  _WORD *v17;
  _BYTE *v18;
  unsigned int v19;
  unsigned int v20;
  __int16 result;

  if (a1[8])
  {
    v4 = 0;
    do
    {
      v9 = a2;
      v10 = a3;
      if (a1[5])
      {
        v11 = 0;
        v9 = a2;
        v10 = a3;
        do
        {
          v12 = v10;
          v13 = v9;
          if (a1[2])
          {
            v14 = 0;
            v13 = v9;
            v12 = v10;
            do
            {
              LOBYTE(_S0) = *v13;
              _S0 = (float)LODWORD(_S0);
              __asm { FCVT            H0, S0 }
              *v12 = LOWORD(_S0);
              v13 += a1[3];
              v12 += a1[4];
              ++v14;
            }
            while (v14 < a1[2]);
          }
          LOBYTE(_S0) = *v13;
          _S0 = (float)LODWORD(_S0);
          __asm { FCVT            H0, S0 }
          *v12 = LOWORD(_S0);
          v9 += a1[6];
          v10 += a1[7];
          ++v11;
        }
        while (v11 < a1[5]);
      }
      if (a1[2])
      {
        v15 = 0;
        do
        {
          LOBYTE(_S0) = *v9;
          _S0 = (float)LODWORD(_S0);
          __asm { FCVT            H0, S0 }
          *v10 = LOWORD(_S0);
          v9 += a1[3];
          v10 += a1[4];
          ++v15;
        }
        while (v15 < a1[2]);
      }
      LOBYTE(_S0) = *v9;
      _S0 = (float)LODWORD(_S0);
      __asm { FCVT            H0, S0 }
      *v10 = LOWORD(_S0);
      a2 += a1[9];
      a3 += a1[10];
      ++v4;
    }
    while (v4 < a1[8]);
  }
  if (a1[5])
  {
    v16 = 0;
    do
    {
      v17 = a3;
      v18 = a2;
      if (a1[2])
      {
        v19 = 0;
        v18 = a2;
        v17 = a3;
        do
        {
          LOBYTE(_S0) = *v18;
          _S0 = (float)LODWORD(_S0);
          __asm { FCVT            H0, S0 }
          *v17 = LOWORD(_S0);
          v18 += a1[3];
          v17 += a1[4];
          ++v19;
        }
        while (v19 < a1[2]);
      }
      LOBYTE(_S0) = *v18;
      _S0 = (float)LODWORD(_S0);
      __asm { FCVT            H0, S0 }
      *v17 = LOWORD(_S0);
      a2 += a1[6];
      a3 += a1[7];
      ++v16;
    }
    while (v16 < a1[5]);
  }
  if (a1[2])
  {
    v20 = 0;
    do
    {
      LOBYTE(_S0) = *a2;
      _S0 = (float)LODWORD(_S0);
      __asm { FCVT            H0, S0 }
      *a3 = LOWORD(_S0);
      a2 += a1[3];
      a3 += a1[4];
      ++v20;
    }
    while (v20 < a1[2]);
  }
  LOBYTE(_S0) = *a2;
  _S0 = (float)LODWORD(_S0);
  __asm { FCVT            H0, S0 }
  *a3 = result;
  return result;
}

uint64_t sub_2108C23D4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  int v12;
  int32x4_t v13;

  v2 = result;
  if ((*(_BYTE *)(result + 48) & 0x40) == 0)
  {
    result = sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/include/Kit/ML/DataView.h", 724, (uint64_t)"format.Contains(FormatFlags::FLOAT32)", 37, (uint64_t)"The DataView does not contain float data", 40, (void (*)(void **))sub_2109EDDB4);
    if ((_DWORD)result)
      goto LABEL_22;
  }
  if (*(_BYTE *)(v2 + 112))
  {
    if (*(_BYTE *)(v2 + 108) && *(_QWORD *)(v2 + 96))
    {
      v4 = *(_QWORD *)(v2 + 64);
      v5 = *(std::__shared_weak_count **)(v2 + 72);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v4 + 88))(v4, 1, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    }
    v9 = (uint64_t *)(v2 + 96);
  }
  else
  {
    v9 = (uint64_t *)(v2 + 40);
  }
  v10 = *v9;
  v11 = *(_DWORD *)(v2 + 36);
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*(int32x4_t *)v2))) & 1) != 0 || (v12 = *(_DWORD *)(v2 + 16)) == 0)
  {
    v12 = 0;
    v13 = 0uLL;
  }
  else
  {
    v13 = *(int32x4_t *)v2;
  }
  *(_OWORD *)(a2 + 28) = *(_OWORD *)(v2 + 20);
  *(_QWORD *)a2 = v10;
  *(int32x4_t *)(a2 + 8) = v13;
  *(_DWORD *)(a2 + 24) = v12;
  *(_DWORD *)(a2 + 44) = v11;
  if (v12 * v11 == -1)
  {
    result = sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4);
    if ((_DWORD)result)
LABEL_22:
      abort();
  }
  return result;
}

float sub_2108C2594(_DWORD *a1, _BYTE *a2, float *a3, float a4)
{
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float *v16;
  int v17;
  float *v18;
  float *v19;
  _BYTE *v20;
  float *v21;
  float *v22;
  int v23;
  _BYTE *v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float *v30;
  int v31;
  _BYTE *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float *v37;
  int v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  float *v43;
  int v44;
  _BYTE *v45;
  float result;

  v4 = a1[8];
  v5 = a1[5];
  if (v4)
  {
    v6 = a1[2];
    v7 = a1[9];
    v8 = a1[10];
    if (v5)
    {
      v9 = a1[6];
      v10 = a1[7];
      if (!v6)
      {
        v42 = 4 * v8;
        do
        {
          v43 = a3;
          v44 = v5;
          v45 = a2;
          do
          {
            LOBYTE(a4) = *v45;
            a4 = (float)LODWORD(a4);
            *v43 = a4;
            v45 += v9;
            v43 += v10;
            --v44;
          }
          while (v44);
          LOBYTE(a4) = *v45;
          a4 = (float)LODWORD(a4);
          *v43 = a4;
          a2 += v7;
          a3 = (float *)((char *)a3 + v42);
          ++v6;
        }
        while (v6 != v4);
        goto LABEL_33;
      }
      v11 = 0;
      v12 = a1[3];
      v13 = 4 * v8;
      v14 = v10;
      v15 = 4 * a1[4];
      v16 = &a3[v14];
      do
      {
        v17 = 0;
        v18 = v16;
        v19 = a3;
        v20 = a2;
        do
        {
          v21 = v18;
          v22 = v19;
          v23 = v6;
          v24 = v20;
          do
          {
            LOBYTE(a4) = *v24;
            a4 = (float)LODWORD(a4);
            *v22 = a4;
            v24 += v12;
            v22 = (float *)((char *)v22 + v15);
            --v23;
          }
          while (v23);
          LOBYTE(a4) = *v24;
          a4 = (float)LODWORD(a4);
          *v22 = a4;
          v20 += v9;
          v19 = (float *)((char *)v19 + v14 * 4);
          ++v17;
          v18 = &v21[v14];
        }
        while (v17 != v5);
        v25 = v6;
        do
        {
          LOBYTE(a4) = *v20;
          a4 = (float)LODWORD(a4);
          *v21 = a4;
          v20 += v12;
          v21 = (float *)((char *)v21 + v15);
          --v25;
        }
        while (v25);
        LOBYTE(a4) = *v20;
        a4 = (float)LODWORD(a4);
        *v21 = a4;
        a2 += v7;
        a3 = (float *)((char *)a3 + v13);
        ++v11;
        v16 = (float *)((char *)v16 + v13);
      }
      while (v11 != v4);
LABEL_14:
      v9 = a1[6];
      v10 = a1[7];
      if (v6)
      {
        v26 = 0;
        v27 = a1[3];
        v28 = 4 * v10;
        v29 = 4 * a1[4];
        do
        {
          v30 = a3;
          v31 = v6;
          v32 = a2;
          do
          {
            LOBYTE(a4) = *v32;
            a4 = (float)LODWORD(a4);
            *v30 = a4;
            v32 += v27;
            v30 = (float *)((char *)v30 + v29);
            --v31;
          }
          while (v31);
          LOBYTE(a4) = *v32;
          a4 = (float)LODWORD(a4);
          *v30 = a4;
          a2 += v9;
          a3 = (float *)((char *)a3 + v28);
          ++v26;
        }
        while (v26 != v5);
        goto LABEL_25;
      }
      do
      {
LABEL_33:
        LOBYTE(a4) = *a2;
        a4 = (float)LODWORD(a4);
        *a3 = a4;
        a2 += v9;
        a3 += v10;
        --v5;
      }
      while (v5);
      goto LABEL_36;
    }
    if (!v6)
    {
      do
      {
        LOBYTE(a4) = *a2;
        a4 = (float)LODWORD(a4);
        *a3 = a4;
        a2 += v7;
        a3 += v8;
        --v4;
      }
      while (v4);
      goto LABEL_36;
    }
    v33 = 0;
    v34 = a1[3];
    v35 = 4 * v8;
    v36 = 4 * a1[4];
    do
    {
      v37 = a3;
      v38 = v6;
      v39 = a2;
      do
      {
        LOBYTE(a4) = *v39;
        a4 = (float)LODWORD(a4);
        *v37 = a4;
        v39 += v34;
        v37 = (float *)((char *)v37 + v36);
        --v38;
      }
      while (v38);
      LOBYTE(a4) = *v39;
      a4 = (float)LODWORD(a4);
      *v37 = a4;
      a2 += v7;
      a3 = (float *)((char *)a3 + v35);
      ++v33;
    }
    while (v33 != v4);
  }
  else
  {
    v6 = a1[2];
    if (v5)
      goto LABEL_14;
  }
LABEL_25:
  if (v6)
  {
    v40 = a1[3];
    v41 = 4 * a1[4];
    do
    {
      LOBYTE(a4) = *a2;
      a4 = (float)LODWORD(a4);
      *a3 = a4;
      a2 += v40;
      a3 = (float *)((char *)a3 + v41);
      --v6;
    }
    while (v6);
  }
LABEL_36:
  LOBYTE(a4) = *a2;
  result = (float)LODWORD(a4);
  *a3 = result;
  return result;
}

uint64_t sub_2108C2820@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  int v12;
  int32x4_t v13;

  v2 = result;
  if ((*(_BYTE *)(result + 48) & 0x40) == 0)
  {
    result = sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/ML/include/Kit/ML/DataView.h", 724, (uint64_t)"format.Contains(FormatFlags::FLOAT32)", 37, (uint64_t)"The DataView does not contain float data", 40, (void (*)(void **))sub_2109EDDB4);
    if ((_DWORD)result)
      goto LABEL_22;
  }
  if (*(_BYTE *)(v2 + 112))
  {
    if (*(_BYTE *)(v2 + 108) && *(_QWORD *)(v2 + 96))
    {
      v4 = *(_QWORD *)(v2 + 64);
      v5 = *(std::__shared_weak_count **)(v2 + 72);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      result = (*(uint64_t (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v4 + 88))(v4, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    }
    v9 = (uint64_t *)(v2 + 96);
  }
  else
  {
    v9 = (uint64_t *)(v2 + 40);
  }
  v10 = *v9;
  v11 = *(_DWORD *)(v2 + 36);
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*(int32x4_t *)v2))) & 1) != 0 || (v12 = *(_DWORD *)(v2 + 16)) == 0)
  {
    v12 = 0;
    v13 = 0uLL;
  }
  else
  {
    v13 = *(int32x4_t *)v2;
  }
  *(_OWORD *)(a2 + 28) = *(_OWORD *)(v2 + 20);
  *(_QWORD *)a2 = v10;
  *(int32x4_t *)(a2 + 8) = v13;
  *(_DWORD *)(a2 + 24) = v12;
  *(_DWORD *)(a2 + 44) = v11;
  if (v12 * v11 == -1)
  {
    result = sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4);
    if ((_DWORD)result)
LABEL_22:
      abort();
  }
  return result;
}

float sub_2108C29E0(_DWORD *a1, float *a2, _BYTE *a3)
{
  unsigned int v6;
  _BYTE *v7;
  float *v8;
  unsigned int v9;
  float *v10;
  _BYTE *v11;
  unsigned int v12;
  _BYTE *v13;
  float *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;

  if (a1[11])
  {
    v6 = 0;
    do
    {
      v7 = a3;
      v8 = a2;
      if (a1[8])
      {
        v9 = 0;
        v8 = a2;
        v7 = a3;
        do
        {
          v10 = v8;
          v11 = v7;
          if (a1[5])
          {
            v12 = 0;
            v10 = v8;
            v11 = v7;
            do
            {
              v13 = v11;
              v14 = v10;
              if (a1[2])
              {
                v15 = 0;
                v14 = v10;
                v13 = v11;
                do
                {
                  *v13 = (int)*v14;
                  v14 += a1[3];
                  v13 += a1[4];
                  ++v15;
                }
                while (v15 < a1[2]);
              }
              *v13 = (int)*v14;
              v10 += a1[6];
              v11 += a1[7];
              ++v12;
            }
            while (v12 < a1[5]);
          }
          if (a1[2])
          {
            v16 = 0;
            do
            {
              *v11 = (int)*v10;
              v10 += a1[3];
              v11 += a1[4];
              ++v16;
            }
            while (v16 < a1[2]);
          }
          *v11 = (int)*v10;
          v8 += a1[9];
          v7 += a1[10];
          ++v9;
        }
        while (v9 < a1[8]);
      }
      sub_2108C2B94(a1, v8, v7);
      a2 += a1[12];
      a3 += a1[13];
      ++v6;
    }
    while (v6 < a1[11]);
  }
  if (a1[8])
  {
    v17 = 0;
    do
    {
      sub_2108C2B94(a1, a2, a3);
      a2 += a1[9];
      a3 += a1[10];
      ++v17;
    }
    while (v17 < a1[8]);
  }
  return sub_2108C2B94(a1, a2, a3);
}

float sub_2108C2B94(_DWORD *a1, float *a2, _BYTE *a3)
{
  unsigned int v3;
  _BYTE *v4;
  float *v5;
  unsigned int v6;
  unsigned int v7;
  float result;

  if (a1[5])
  {
    v3 = 0;
    do
    {
      v4 = a3;
      v5 = a2;
      if (a1[2])
      {
        v6 = 0;
        v5 = a2;
        v4 = a3;
        do
        {
          *v4 = (int)*v5;
          v5 += a1[3];
          v4 += a1[4];
          ++v6;
        }
        while (v6 < a1[2]);
      }
      *v4 = (int)*v5;
      a2 += a1[6];
      a3 += a1[7];
      ++v3;
    }
    while (v3 < a1[5]);
  }
  if (a1[2])
  {
    v7 = 0;
    do
    {
      *a3 = (int)*a2;
      a2 += a1[3];
      a3 += a1[4];
      ++v7;
    }
    while (v7 < a1[2]);
  }
  result = *a2;
  *a3 = (int)*a2;
  return result;
}

__int16 sub_2108C2C58@<H0>(_DWORD *a1@<X0>, int *a2@<X1>, _WORD *a3@<X2>)
{
  unsigned int v3;
  int *v9;
  _WORD *v10;
  unsigned int v11;
  _WORD *v13;
  int *v14;
  unsigned int v15;
  unsigned int v17;
  unsigned int v19;
  _WORD *v21;
  int *v22;
  unsigned int v23;
  unsigned int v25;
  __int16 result;

  if (a1[8])
  {
    v3 = 0;
    do
    {
      v9 = a2;
      v10 = a3;
      if (a1[5])
      {
        v11 = 0;
        v9 = a2;
        v10 = a3;
        do
        {
          v13 = v10;
          v14 = v9;
          if (a1[2])
          {
            v15 = 0;
            v14 = v9;
            v13 = v10;
            do
            {
              _S0 = *v14;
              __asm { FCVT            H0, S0 }
              *v13 = _S0;
              v14 += a1[3];
              v13 += a1[4];
              ++v15;
            }
            while (v15 < a1[2]);
          }
          _S0 = *v14;
          __asm { FCVT            H0, S0 }
          *v13 = _S0;
          v9 += a1[6];
          v10 += a1[7];
          ++v11;
        }
        while (v11 < a1[5]);
      }
      if (a1[2])
      {
        v17 = 0;
        do
        {
          _S0 = *v9;
          __asm { FCVT            H0, S0 }
          *v10 = _S0;
          v9 += a1[3];
          v10 += a1[4];
          ++v17;
        }
        while (v17 < a1[2]);
      }
      _S0 = *v9;
      __asm { FCVT            H0, S0 }
      *v10 = _S0;
      a2 += a1[9];
      a3 += a1[10];
      ++v3;
    }
    while (v3 < a1[8]);
  }
  if (a1[5])
  {
    v19 = 0;
    do
    {
      v21 = a3;
      v22 = a2;
      if (a1[2])
      {
        v23 = 0;
        v22 = a2;
        v21 = a3;
        do
        {
          _S0 = *v22;
          __asm { FCVT            H0, S0 }
          *v21 = _S0;
          v22 += a1[3];
          v21 += a1[4];
          ++v23;
        }
        while (v23 < a1[2]);
      }
      _S0 = *v22;
      __asm { FCVT            H0, S0 }
      *v21 = _S0;
      a2 += a1[6];
      a3 += a1[7];
      ++v19;
    }
    while (v19 < a1[5]);
  }
  if (a1[2])
  {
    v25 = 0;
    do
    {
      _S0 = *a2;
      __asm { FCVT            H0, S0 }
      *a3 = _S0;
      a2 += a1[3];
      a3 += a1[4];
      ++v25;
    }
    while (v25 < a1[2]);
  }
  _S0 = *a2;
  __asm { FCVT            H0, S0 }
  *a3 = result;
  return result;
}

void sub_2108C2E1C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v4;
  unsigned int v5;
  BOOL v6;
  uint64_t v10;
  char v11;

  v1 = *a1;
  v2 = a1[1];
  if (*(_DWORD *)(*a1 + 28) == 1 && *(_DWORD *)(v2 + 28) == 1)
  {
    v4 = *(_DWORD *)(v1 + 32);
    if (v4 == *(_DWORD *)(v2 + 32))
    {
      v5 = *(_DWORD *)(v1 + 8);
      if (v4 == v5)
      {
        sub_2108C2EE0(a1);
        return;
      }
    }
    else
    {
      v5 = *(_DWORD *)(v1 + 8);
    }
    v10 = v5;
    if (v5)
      v6 = *(_DWORD *)(v1 + 12) == 0;
    else
      v6 = 1;
    if (!v6 && *(_DWORD *)(v1 + 16) != 0 && *(_DWORD *)(v1 + 20) != 0 && *(_DWORD *)(v1 + 24) != 0)
      sub_2108C3A48(&v10, v1, v2);
  }
  else
  {
    v11 = 0;
    if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*(int32x4_t *)(v1 + 8)))) & 1) == 0)
    {
      if (*(_DWORD *)(v1 + 24))
        sub_2108C3F48((uint64_t)&v11, v1, v2);
    }
  }
}

uint64_t *sub_2108C2EE0(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  unsigned int v4;
  int v5;
  int v6;
  unsigned int v7;
  int32x4_t v8;
  int v9;
  BOOL v10;
  uint64_t v14;

  v1 = *result;
  v2 = result[1];
  v3 = *(_DWORD *)(*result + 36);
  v4 = *(_DWORD *)(*result + 12);
  if (v3 == *(_DWORD *)(v2 + 36) && v3 == *(_DWORD *)(v1 + 32) * v4)
  {
    v5 = *(_DWORD *)(v1 + 40);
    if (v5 == *(_DWORD *)(v2 + 40))
    {
      v6 = *(_DWORD *)(v1 + 16);
      if (v5 == v6 * v3)
        return sub_2108C2FD0(result);
    }
    else
    {
      v6 = *(_DWORD *)(v1 + 16);
    }
    v9 = *(_DWORD *)(v1 + 8);
    v14 = v9 * v6 * v4;
    if (v9)
      v10 = v4 == 0;
    else
      v10 = 1;
    if (!v10 && v6 != 0 && *(_DWORD *)(v1 + 20) != 0 && *(_DWORD *)(v1 + 24) != 0)
      return sub_2108C3270(&v14, (char **)v1, (char **)v2);
  }
  else
  {
    v7 = *(_DWORD *)(v1 + 8);
    v14 = v4 * v7;
    v8.i64[0] = __PAIR64__(v4, v7);
    v8.i64[1] = *(_QWORD *)(v1 + 16);
    if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v8))) & 1) == 0 && *(_DWORD *)(v1 + 24))
      return sub_2108C3594(&v14, v1, v2);
  }
  return result;
}

uint64_t *sub_2108C2FD0(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  unsigned int v4;
  uint64_t v5;
  char *v6;
  BOOL v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int32x4_t v11;
  uint64_t v12;

  v1 = *result;
  v2 = result[1];
  v3 = *(_DWORD *)(*result + 44);
  v4 = *(_DWORD *)(*result + 20);
  if (v3 == *(_DWORD *)(v2 + 44) && v3 == *(_DWORD *)(v1 + 40) * v4)
  {
    v5 = *(_DWORD *)(v1 + 12) * *(_DWORD *)(v1 + 8) * *(_DWORD *)(v1 + 16) * v4 * *(_DWORD *)(v1 + 24);
    v6 = *(char **)v1;
    if ((_DWORD)v5)
      v7 = v6 == 0;
    else
      v7 = 0;
    if (v7)
    {
      if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
      {
        abort();
      }
    }
    else if (!(_DWORD)v5)
    {
      return result;
    }
    return (uint64_t *)memmove(*(void **)v2, v6, 4 * v5);
  }
  v8 = *(_DWORD *)(v1 + 8);
  v9 = *(_DWORD *)(v1 + 12);
  v10 = *(_DWORD *)(v1 + 16);
  v12 = v9 * v8 * v10 * v4;
  v11.i64[0] = __PAIR64__(v9, v8);
  v11.i64[1] = __PAIR64__(v4, v10);
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v11))) & 1) == 0 && *(_DWORD *)(v1 + 24))
    return sub_2108C310C(&v12, (char **)v1, (char **)v2);
  return result;
}

uint64_t *sub_2108C310C(uint64_t *result, char **a2, char **a3)
{
  int v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*(int32x4_t *)(a2 + 1)))) & 1) == 0)
  {
    v3 = *((_DWORD *)a2 + 6);
    if (v3)
    {
      v4 = result;
      v5 = *a2;
      v6 = *a3;
      v7 = v3 - 1;
      if (v3 != 1)
      {
        v8 = 4 * *((unsigned int *)a2 + 11);
        v9 = 4 * *((unsigned int *)a3 + 11);
        do
        {
          v10 = *v4;
          if (!v5 && v10)
          {
            if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
            {
              goto LABEL_15;
            }
          }
          else if (!v10)
          {
            goto LABEL_7;
          }
          result = (uint64_t *)memmove(v6, v5, 4 * v10);
LABEL_7:
          v5 += v8;
          v6 += v9;
          --v7;
        }
        while (v7);
      }
      v11 = *v4;
      if (v5 || !v11)
      {
        if (!v11)
          return result;
      }
      else if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
      {
LABEL_15:
        abort();
      }
      return (uint64_t *)memmove(v6, v5, 4 * v11);
    }
  }
  return result;
}

uint64_t *sub_2108C3270(uint64_t *result, char **a2, char **a3)
{
  int32x4_t v3;
  int v4;
  uint64_t *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char *v13;
  char *v14;
  int v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int i;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;

  v3 = *(int32x4_t *)(a2 + 1);
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v3))) & 1) == 0)
  {
    v4 = *((_DWORD *)a2 + 6);
    if (v4)
    {
      v5 = result;
      v6 = *a2;
      v7 = *a3;
      v8 = 4 * *((unsigned int *)a2 + 10);
      v9 = 4 * *((unsigned int *)a3 + 10);
      v29 = v4 - 1;
      v27 = v3.i32[3] - 1;
      if (v4 != 1)
      {
        v10 = *((unsigned int *)a3 + 11);
        v11 = *((unsigned int *)a2 + 11);
        if (v3.i32[3] != 1)
        {
          v12 = 0;
          v25 = 4 * v10;
          v26 = 4 * v11;
          while (1)
          {
            v28 = v12;
            v13 = v7;
            v14 = v6;
            v15 = v27;
            do
            {
              v16 = v14;
              v17 = *v5;
              if (!v16 && v17)
              {
                if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
                {
                  goto LABEL_41;
                }
LABEL_11:
                result = (uint64_t *)memmove(v13, v16, 4 * v17);
                goto LABEL_12;
              }
              if (v17)
                goto LABEL_11;
LABEL_12:
              v14 = &v16[v8];
              v13 += v9;
              --v15;
            }
            while (v15);
            v18 = *v5;
            if (!v16 && v18)
            {
              if (!sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
              {
LABEL_7:
                result = (uint64_t *)memmove(v13, &v16[v8], 4 * v18);
                goto LABEL_8;
              }
LABEL_41:
              abort();
            }
            if (v18)
              goto LABEL_7;
LABEL_8:
            v6 += v26;
            v7 += v25;
            v12 = v28 + 1;
            if (v28 + 1 == v29)
              goto LABEL_29;
          }
        }
        v19 = 4 * v11;
        v20 = 4 * v10;
        do
        {
          v21 = *v5;
          if (!v6 && v21)
          {
            if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
            {
              goto LABEL_41;
            }
          }
          else if (!v21)
          {
            goto LABEL_24;
          }
          result = (uint64_t *)memmove(v7, v6, 4 * v21);
LABEL_24:
          v6 += v19;
          v7 += v20;
          --v29;
        }
        while (v29);
      }
LABEL_29:
      for (i = v27; i; --i)
      {
        v23 = *v5;
        if (!v6 && v23)
        {
          if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
          {
            goto LABEL_41;
          }
        }
        else if (!v23)
        {
          goto LABEL_33;
        }
        result = (uint64_t *)memmove(v7, v6, 4 * v23);
LABEL_33:
        v6 += v8;
        v7 += v9;
      }
      v24 = *v5;
      if (v6 || !v24)
      {
        if (!v24)
          return result;
      }
      else if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
      {
        goto LABEL_41;
      }
      return (uint64_t *)memmove(v7, v6, 4 * v24);
    }
  }
  return result;
}

uint64_t *sub_2108C3594(uint64_t *result, uint64_t a2, uint64_t a3)
{
  __int32 v3;
  uint64_t v4;
  int32x4_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unsigned int *v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  __int32 v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  _OWORD v24[2];

  v3 = *(_DWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 20);
  v5.i32[0] = *(_DWORD *)(a2 + 8);
  v5.i32[1] = v3;
  v5.i64[1] = v4;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v5))) & 1) == 0)
  {
    v6 = *(_DWORD *)(a2 + 12);
    if (v6)
    {
      v14 = *(_DWORD *)(a2 + 8) - 1;
      v7 = *(unsigned int *)(a2 + 32);
      v8 = *(unsigned int *)(a3 + 32);
      v15 = *(unsigned int *)(a2 + 28) | ((unint64_t)*(unsigned int *)(a3 + 28) << 32);
      v13 = 0;
      v16 = v6 - 1;
      v17 = v7 | (v8 << 32);
      v18 = v3 - 1;
      v9 = *(unsigned int *)(a2 + 40);
      v10 = *(unsigned int *)(a3 + 40);
      v19 = *(unsigned int *)(a2 + 36) | ((unint64_t)*(unsigned int *)(a3 + 36) << 32);
      v20 = v4 - 1;
      v21 = v9 | (v10 << 32);
      v22 = HIDWORD(v4) - 1;
      v23 = *(unsigned int *)(a2 + 44) | ((unint64_t)*(unsigned int *)(a3 + 44) << 32);
      v11 = *(char **)a2;
      v12 = *(unsigned int **)a3;
      memset(v24, 0, sizeof(v24));
      return (uint64_t *)sub_2108C3678((unsigned int *)&v13, (uint64_t)v24, result, v11, v12);
    }
  }
  return result;
}

unsigned int *sub_2108C3678(unsigned int *a1, uint64_t a2, uint64_t *a3, char *__src, unsigned int *__dst)
{
  int v10;
  char *v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int *v16;
  char *v17;
  int v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  int v24;
  char *v25;
  unsigned int *v26;

  if (a1[14])
  {
    v10 = 0;
    while (1)
    {
      v24 = v10;
      v25 = __src;
      v26 = __dst;
      v11 = __src;
      if (a1[11])
        break;
LABEL_3:
      sub_2108C38C8(a1, (char **)a2, a3, v11, __dst);
      __src = &v25[4 * a1[15]];
      __dst = &v26[a1[16]];
      v10 = v24 + 1;
      if (v24 + 1 >= a1[14])
        goto LABEL_22;
    }
    v12 = 0;
    v11 = v25;
    while (1)
    {
      v13 = a1[3] | ((unint64_t)a1[6] << 32);
      v14 = a1[4] | ((unint64_t)a1[7] << 32);
      *(_QWORD *)a2 = v11;
      *(_QWORD *)(a2 + 8) = v13;
      *(_QWORD *)(a2 + 16) = __dst;
      *(_QWORD *)(a2 + 24) = v14;
      v15 = a1[8];
      v16 = __dst;
      v17 = v11;
      if (v15)
      {
        v18 = 0;
        v17 = v11;
        v16 = __dst;
        while (1)
        {
          *(_QWORD *)a2 = v17;
          *(_QWORD *)(a2 + 16) = v16;
          v20 = *a3;
          if (!v17)
          {
            if (v20)
              break;
          }
          v19 = v16;
          if (v20)
            goto LABEL_12;
LABEL_13:
          v17 += 4 * a1[9];
          v16 += a1[10];
          if (++v18 >= v15)
            goto LABEL_18;
        }
        if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
        {
          goto LABEL_26;
        }
        v19 = *(unsigned int **)(a2 + 16);
LABEL_12:
        memmove(v19, v17, 4 * v20);
        v15 = a1[8];
        goto LABEL_13;
      }
LABEL_18:
      *(_QWORD *)a2 = v17;
      *(_QWORD *)(a2 + 16) = v16;
      v21 = *a3;
      if (!v17)
      {
        if (v21)
          break;
      }
      if (v21)
        goto LABEL_7;
LABEL_8:
      v11 += 4 * a1[12];
      __dst += a1[13];
      if (++v12 >= a1[11])
        goto LABEL_3;
    }
    if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
    {
LABEL_26:
      abort();
    }
    v16 = *(unsigned int **)(a2 + 16);
LABEL_7:
    memmove(v16, v17, 4 * v21);
    goto LABEL_8;
  }
LABEL_22:
  if (a1[11])
  {
    v22 = 0;
    do
    {
      sub_2108C38C8(a1, (char **)a2, a3, __src, __dst);
      __src += 4 * a1[12];
      __dst += a1[13];
      ++v22;
    }
    while (v22 < a1[11]);
  }
  return sub_2108C38C8(a1, (char **)a2, a3, __src, __dst);
}

unsigned int *sub_2108C38C8(unsigned int *result, char **a2, uint64_t *a3, char *__src, unsigned int *__dst)
{
  unsigned int *v5;
  char *v6;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  v5 = __dst;
  v6 = __src;
  v9 = result[3] | ((unint64_t)result[6] << 32);
  v10 = result[4] | ((unint64_t)result[7] << 32);
  *a2 = __src;
  a2[1] = (char *)v9;
  a2[2] = (char *)__dst;
  a2[3] = (char *)v10;
  v11 = result[8];
  if (v11)
  {
    v12 = result;
    v13 = 0;
    while (1)
    {
      *a2 = v6;
      a2[2] = (char *)v5;
      v14 = *a3;
      if (!v6)
      {
        if (v14)
          break;
      }
      result = v5;
      if (v14)
        goto LABEL_4;
LABEL_5:
      v6 += 4 * v12[9];
      v5 += v12[10];
      if (++v13 >= v11)
        goto LABEL_10;
    }
    if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
    {
      goto LABEL_17;
    }
    result = (unsigned int *)a2[2];
LABEL_4:
    result = (unsigned int *)memmove(result, v6, 4 * v14);
    v11 = v12[8];
    goto LABEL_5;
  }
LABEL_10:
  *a2 = v6;
  a2[2] = (char *)v5;
  v15 = *a3;
  if (!v6 && v15)
  {
    if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
    {
LABEL_17:
      abort();
    }
    v5 = (unsigned int *)a2[2];
    return (unsigned int *)memmove(v5, v6, 4 * v15);
  }
  if (v15)
    return (unsigned int *)memmove(v5, v6, 4 * v15);
  return result;
}

uint64_t *sub_2108C3A48(uint64_t *result, uint64_t a2, uint64_t a3)
{
  __int32 v3;
  uint64_t v4;
  int32x4_t v5;
  int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  __int32 v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t v25;
  _OWORD v26[2];

  v3 = *(_DWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 20);
  v5.i32[0] = *(_DWORD *)(a2 + 8);
  v5.i32[1] = v3;
  v5.i64[1] = v4;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v5))) & 1) == 0)
  {
    v6 = *(_DWORD *)(a2 + 12);
    if (v6)
    {
      v7 = result;
      v16 = *(_DWORD *)(a2 + 8) - 1;
      v8 = *(unsigned int *)(a2 + 32);
      v9 = *(unsigned int *)(a3 + 32);
      v17 = *(unsigned int *)(a2 + 28) | ((unint64_t)*(unsigned int *)(a3 + 28) << 32);
      v15 = 0;
      v18 = v6 - 1;
      v19 = v8 | (v9 << 32);
      v20 = v3 - 1;
      v10 = *(unsigned int *)(a2 + 40);
      v11 = *(unsigned int *)(a3 + 40);
      v21 = *(unsigned int *)(a2 + 36) | ((unint64_t)*(unsigned int *)(a3 + 36) << 32);
      v22 = v4 - 1;
      v23 = v10 | (v11 << 32);
      v25 = *(unsigned int *)(a2 + 44) | ((unint64_t)*(unsigned int *)(a3 + 44) << 32);
      v12 = *(char **)a2;
      v13 = *(char **)a3;
      memset(v26, 0, sizeof(v26));
      v24 = HIDWORD(v4) - 1;
      if (HIDWORD(v4) != 1)
      {
        v14 = 0;
        do
        {
          sub_2108C3B80(&v15, (uint64_t)v26, v7, v12, v13);
          v12 += 4 * v25;
          v13 += 4 * HIDWORD(v25);
          ++v14;
        }
        while (v14 < v24);
      }
      return (uint64_t *)sub_2108C3B80(&v15, (uint64_t)v26, v7, v12, v13);
    }
  }
  return result;
}

_DWORD *sub_2108C3B80(_DWORD *a1, uint64_t a2, uint64_t *a3, char *__src, char *__dst)
{
  int v10;
  char *v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  char *v16;
  char *v17;
  int v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  int v24;
  char *v25;
  char *v26;

  if (a1[11])
  {
    v10 = 0;
    while (1)
    {
      v24 = v10;
      v25 = __src;
      v26 = __dst;
      v11 = __src;
      if (a1[8])
        break;
LABEL_3:
      sub_2108C3DCC(a1, a2, a3, v11, __dst);
      __src = &v25[4 * a1[12]];
      __dst = &v26[4 * a1[13]];
      v10 = v24 + 1;
      if ((v24 + 1) >= a1[11])
        goto LABEL_22;
    }
    v12 = 0;
    v11 = v25;
    while (1)
    {
      v13 = a1[3];
      v14 = a1[4];
      *(_QWORD *)a2 = v11;
      *(_DWORD *)(a2 + 8) = v13;
      *(_QWORD *)(a2 + 16) = __dst;
      *(_DWORD *)(a2 + 24) = v14;
      v15 = a1[5];
      v16 = __dst;
      v17 = v11;
      if (v15)
      {
        v18 = 0;
        v17 = v11;
        v16 = __dst;
        while (1)
        {
          *(_QWORD *)a2 = v17;
          *(_QWORD *)(a2 + 16) = v16;
          v20 = *a3;
          if (!v17)
          {
            if (v20)
              break;
          }
          v19 = v16;
          if (v20)
            goto LABEL_12;
LABEL_13:
          v17 += 4 * a1[6];
          v16 += 4 * a1[7];
          if (++v18 >= v15)
            goto LABEL_18;
        }
        if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
        {
          goto LABEL_26;
        }
        v19 = *(char **)(a2 + 16);
LABEL_12:
        memmove(v19, v17, 4 * v20);
        v15 = a1[5];
        goto LABEL_13;
      }
LABEL_18:
      *(_QWORD *)a2 = v17;
      *(_QWORD *)(a2 + 16) = v16;
      v21 = *a3;
      if (!v17)
      {
        if (v21)
          break;
      }
      if (v21)
        goto LABEL_7;
LABEL_8:
      v11 += 4 * a1[9];
      __dst += 4 * a1[10];
      if (++v12 >= a1[8])
        goto LABEL_3;
    }
    if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
    {
LABEL_26:
      abort();
    }
    v16 = *(char **)(a2 + 16);
LABEL_7:
    memmove(v16, v17, 4 * v21);
    goto LABEL_8;
  }
LABEL_22:
  if (a1[8])
  {
    v22 = 0;
    do
    {
      sub_2108C3DCC(a1, a2, a3, __src, __dst);
      __src += 4 * a1[9];
      __dst += 4 * a1[10];
      ++v22;
    }
    while (v22 < a1[8]);
  }
  return sub_2108C3DCC(a1, a2, a3, __src, __dst);
}

_DWORD *sub_2108C3DCC(_DWORD *result, uint64_t a2, uint64_t *a3, char *__src, char *__dst)
{
  char *v5;
  char *v6;
  int v9;
  int v10;
  unsigned int v11;
  _DWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  v5 = __dst;
  v6 = __src;
  v9 = result[3];
  v10 = result[4];
  *(_QWORD *)a2 = __src;
  *(_DWORD *)(a2 + 8) = v9;
  *(_QWORD *)(a2 + 16) = __dst;
  *(_DWORD *)(a2 + 24) = v10;
  v11 = result[5];
  if (v11)
  {
    v12 = result;
    v13 = 0;
    while (1)
    {
      *(_QWORD *)a2 = v6;
      *(_QWORD *)(a2 + 16) = v5;
      v14 = *a3;
      if (!v6)
      {
        if (v14)
          break;
      }
      result = v5;
      if (v14)
        goto LABEL_4;
LABEL_5:
      v6 += 4 * v12[6];
      v5 += 4 * v12[7];
      if (++v13 >= v11)
        goto LABEL_10;
    }
    if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
    {
      goto LABEL_17;
    }
    result = *(_DWORD **)(a2 + 16);
LABEL_4:
    result = memmove(result, v6, 4 * v14);
    v11 = v12[5];
    goto LABEL_5;
  }
LABEL_10:
  *(_QWORD *)a2 = v6;
  *(_QWORD *)(a2 + 16) = v5;
  v15 = *a3;
  if (!v6 && v15)
  {
    if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
    {
LABEL_17:
      abort();
    }
    v5 = *(char **)(a2 + 16);
    return memmove(v5, v6, 4 * v15);
  }
  if (v15)
    return memmove(v5, v6, 4 * v15);
  return result;
}

float sub_2108C3F48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int32 v3;
  uint64_t v4;
  int32x4_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v14;
  int v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  __int32 v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  char v25;

  v3 = *(_DWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 20);
  v5.i32[0] = *(_DWORD *)(a2 + 8);
  v5.i32[1] = v3;
  v5.i64[1] = v4;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v5))) & 1) == 0)
  {
    v6 = *(_DWORD *)(a2 + 12);
    if (v6)
    {
      v15 = *(_DWORD *)(a2 + 8) - 1;
      v7 = *(unsigned int *)(a2 + 32);
      v8 = *(unsigned int *)(a3 + 32);
      v16 = *(unsigned int *)(a2 + 28) | ((unint64_t)*(unsigned int *)(a3 + 28) << 32);
      v14 = 0;
      v17 = v6 - 1;
      v18 = v7 | (v8 << 32);
      v19 = v3 - 1;
      v9 = *(unsigned int *)(a2 + 40);
      v10 = *(unsigned int *)(a3 + 40);
      v20 = *(unsigned int *)(a2 + 36) | ((unint64_t)*(unsigned int *)(a3 + 36) << 32);
      v21 = v4 - 1;
      v22 = v9 | (v10 << 32);
      v23 = HIDWORD(v4) - 1;
      v24 = *(unsigned int *)(a2 + 44) | ((unint64_t)*(unsigned int *)(a3 + 44) << 32);
      v11 = *(_DWORD **)a2;
      v12 = *(_DWORD **)a3;
      v25 = 0;
      *(float *)&v4 = sub_2108C4028(&v14, (uint64_t)&v25, a1, v11, v12);
    }
  }
  return *(float *)&v4;
}

float sub_2108C4028(_DWORD *a1, uint64_t a2, uint64_t a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  _DWORD *v29;
  _DWORD *v30;
  _DWORD *v31;
  int *v32;
  _DWORD *v33;
  _DWORD *v34;
  _DWORD *v35;
  int v36;
  _DWORD *v37;
  _DWORD *v38;
  _DWORD *v39;
  _DWORD *v40;
  int v41;
  _DWORD *v42;
  _DWORD *v43;
  int *v44;
  _DWORD *v45;
  _DWORD *v46;
  _DWORD *v47;
  _DWORD *v48;
  _DWORD *v49;
  _DWORD *v50;
  _DWORD *v51;
  _DWORD *v52;
  _DWORD *v53;
  _DWORD *v54;
  _DWORD *v55;
  int v56;
  int v57;
  int v58;
  int *v59;
  _DWORD *v60;
  _DWORD *v61;
  _DWORD *v62;
  _DWORD *v63;
  _DWORD *v64;
  int v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  _DWORD *v70;
  _DWORD *v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  _DWORD *v77;
  _DWORD *v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  int v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _DWORD *v92;
  _DWORD *v93;
  int v94;
  _DWORD *v95;
  _DWORD *v96;
  _DWORD *v97;
  _DWORD *v98;
  _DWORD *v99;
  _DWORD *v100;
  _DWORD *v101;
  _DWORD *v102;
  int v103;
  int v104;
  int v105;
  _DWORD *v106;
  _DWORD *v107;
  int v108;
  _DWORD *v109;
  _DWORD *v110;
  _DWORD *v111;
  _DWORD *v112;
  _DWORD *v113;
  _DWORD *v114;
  _DWORD *v115;
  _DWORD *v116;
  int v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  _DWORD *v121;
  _DWORD *v122;
  int v123;
  unsigned int v124;
  int v128;
  _DWORD *v129;
  _DWORD *v130;
  int v132;
  uint64_t v133;
  uint64_t v134;
  _DWORD *v135;
  _DWORD *v136;
  _DWORD *v137;
  int *v138;
  _DWORD *v139;
  _DWORD *v140;
  _DWORD *v141;
  _DWORD *v142;
  int v143;
  _DWORD *v144;

  v7 = a3;
  v8 = a2;
  v9 = a1;
  if (a1[14])
  {
    v10 = 0;
    while (1)
    {
      v128 = v10;
      v11 = v9[11];
      v129 = a4;
      v130 = a5;
      if (v11)
        break;
LABEL_3:
      v8 = a2;
      v7 = a3;
      sub_2108C46B4(v9, a2, a3, a4, a5);
      a4 = &v129[v9[15]];
      a5 = &v130[v9[16]];
      v10 = v128 + 1;
      if ((v128 + 1) >= v9[14])
        goto LABEL_64;
    }
    v12 = v9[8];
    v13 = v9[5];
    v14 = v9[12];
    v15 = v9[13];
    v16 = v9[2];
    if (v12)
    {
      v18 = v9[9];
      v17 = v9[10];
      if (v13)
      {
        v134 = v14;
        v19 = v9[6];
        v20 = v9[7];
        v21 = v18;
        v22 = 4 * v19;
        v133 = v15;
        v23 = v17;
        v24 = 4 * v20;
        if (v16)
        {
          v25 = 0;
          v26 = 4 * v9[3];
          v27 = 4 * v9[4];
          v28 = &a4[(unint64_t)v22 / 4];
          v29 = &a5[(unint64_t)v24 / 4];
          v30 = &a4[v21];
          v31 = &a5[v23];
          v32 = &a4[v18 + v19];
          v33 = &a4[(unint64_t)v22 / 4 + v21];
          v34 = &a5[v17 + v20];
          v35 = &a5[(unint64_t)v24 / 4 + v23];
          v132 = v9[11];
          do
          {
            v143 = v25;
            v36 = 0;
            v135 = v35;
            v136 = v34;
            v137 = v33;
            v138 = v32;
            v37 = v33;
            v139 = v31;
            v140 = v30;
            v38 = v31;
            v141 = v29;
            v142 = v28;
            v144 = a5;
            v39 = a5;
            v40 = a4;
            do
            {
              v41 = 0;
              v42 = v30;
              v43 = v38;
              v44 = v32;
              v45 = v37;
              v46 = v34;
              v47 = v35;
              v48 = v29;
              v49 = v28;
              v50 = v39;
              v51 = v40;
              do
              {
                v52 = v49;
                v53 = v48;
                v54 = v50;
                v55 = v51;
                v56 = v16;
                do
                {
                  *v54 = *v55;
                  v55 = (_DWORD *)((char *)v55 + v26);
                  v54 = (_DWORD *)((char *)v54 + v27);
                  --v56;
                }
                while (v56);
                *v54 = *v55;
                v51 = (_DWORD *)((char *)v51 + v22);
                v50 = (_DWORD *)((char *)v50 + v24);
                ++v41;
                v49 = &v52[(unint64_t)v22 / 4];
                v48 = &v53[(unint64_t)v24 / 4];
              }
              while (v41 != v13);
              v57 = v16;
              do
              {
                *v53 = *v52;
                v52 = (_DWORD *)((char *)v52 + v26);
                v53 = (_DWORD *)((char *)v53 + v27);
                --v57;
              }
              while (v57);
              v40 = (_DWORD *)((char *)v40 + v21 * 4);
              v39 = (_DWORD *)((char *)v39 + v23 * 4);
              ++v36;
              v28 = (_DWORD *)((char *)v28 + v21 * 4);
              *v53 = *v52;
              v29 = (_DWORD *)((char *)v29 + v23 * 4);
              v30 = &v42[v21];
              v38 = &v43[v23];
              v32 = &v44[v21];
              v37 = &v45[v21];
              v34 = &v46[v23];
              v35 = &v47[v23];
            }
            while (v36 != v12);
            v58 = 0;
            v9 = a1;
            do
            {
              v59 = v44;
              v60 = v45;
              v61 = v46;
              v62 = v47;
              v63 = v43;
              v64 = v42;
              v65 = v16;
              do
              {
                *v63 = *v64;
                v64 = (_DWORD *)((char *)v64 + v26);
                v63 = (_DWORD *)((char *)v63 + v27);
                --v65;
              }
              while (v65);
              v42 = (_DWORD *)((char *)v42 + v22);
              v43 = (_DWORD *)((char *)v43 + v24);
              ++v58;
              v44 = (int *)((char *)v44 + v22);
              *v63 = *v64;
              v45 = (_DWORD *)((char *)v45 + v22);
              v46 = &v61[(unint64_t)v24 / 4];
              v47 = (_DWORD *)((char *)v47 + v24);
            }
            while (v58 != v13);
            v66 = v16;
            do
            {
              v59 = (int *)((char *)v59 + v26);
              *v62 = *v60;
              v60 = (_DWORD *)((char *)v60 + v26);
              v61 = (_DWORD *)((char *)v61 + v27);
              v62 = (_DWORD *)((char *)v62 + v27);
              --v66;
            }
            while (v66);
            a4 = (_DWORD *)((char *)a4 + v134 * 4);
            a5 = &v144[v133];
            v67 = *v59;
            v25 = v143 + 1;
            v28 = &v142[v134];
            *v61 = v67;
            v29 = &v141[v133];
            v30 = &v140[v134];
            v31 = &v139[v133];
            v32 = &v138[v134];
            v33 = &v137[v134];
            v34 = &v136[v133];
            v35 = &v135[v133];
          }
          while (v143 + 1 != v132);
        }
        else
        {
          v105 = 0;
          v106 = &a4[v21];
          v107 = &a5[v23];
          do
          {
            v108 = 0;
            v109 = v107;
            v110 = v106;
            v111 = a5;
            v112 = a4;
            do
            {
              v113 = v110;
              v114 = v109;
              v115 = v111;
              v116 = v112;
              v117 = v13;
              do
              {
                *v115 = *v116;
                v116 = (_DWORD *)((char *)v116 + v22);
                v115 = (_DWORD *)((char *)v115 + v24);
                --v117;
              }
              while (v117);
              *v115 = *v116;
              v112 = (_DWORD *)((char *)v112 + v21 * 4);
              v111 = (_DWORD *)((char *)v111 + v23 * 4);
              ++v108;
              v110 = &v113[v21];
              v109 = &v114[v23];
            }
            while (v108 != v12);
            v118 = v13;
            do
            {
              *v114 = *v113;
              v113 = (_DWORD *)((char *)v113 + v22);
              v114 = (_DWORD *)((char *)v114 + v24);
              --v118;
            }
            while (v118);
            *v114 = *v113;
            a4 = (_DWORD *)((char *)a4 + v134 * 4);
            a5 = (_DWORD *)((char *)a5 + v133 * 4);
            ++v105;
            v106 = (_DWORD *)((char *)v106 + v134 * 4);
            v107 = (_DWORD *)((char *)v107 + v133 * 4);
          }
          while (v105 != v11);
        }
      }
      else
      {
        v85 = 0;
        if (v16)
        {
          v86 = 4 * v14;
          v87 = v18;
          v88 = 4 * v9[3];
          v89 = 4 * v15;
          v90 = v17;
          v91 = 4 * v9[4];
          v92 = &a4[v18];
          v93 = &a5[v90];
          do
          {
            v94 = 0;
            v95 = v93;
            v96 = v92;
            v97 = a5;
            v98 = a4;
            do
            {
              v99 = v96;
              v100 = v95;
              v101 = v97;
              v102 = v98;
              v103 = v16;
              do
              {
                *v101 = *v102;
                v102 = (_DWORD *)((char *)v102 + v88);
                v101 = (_DWORD *)((char *)v101 + v91);
                --v103;
              }
              while (v103);
              *v101 = *v102;
              v98 = (_DWORD *)((char *)v98 + v87 * 4);
              v97 = (_DWORD *)((char *)v97 + v90 * 4);
              ++v94;
              v96 = &v99[v87];
              v95 = &v100[v90];
            }
            while (v94 != v12);
            v104 = v16;
            do
            {
              *v100 = *v99;
              v99 = (_DWORD *)((char *)v99 + v88);
              v100 = (_DWORD *)((char *)v100 + v91);
              --v104;
            }
            while (v104);
            *v100 = *v99;
            a4 = (_DWORD *)((char *)a4 + v86);
            a5 = (_DWORD *)((char *)a5 + v89);
            ++v85;
            v92 = (_DWORD *)((char *)v92 + v86);
            v93 = (_DWORD *)((char *)v93 + v89);
          }
          while (v85 != v11);
        }
        else
        {
          v119 = 4 * v18;
          v120 = 4 * v15;
          do
          {
            v121 = a5;
            v122 = a4;
            v123 = v12;
            do
            {
              *v121 = *v122;
              v122 = (_DWORD *)((char *)v122 + v119);
              v121 += v17;
              --v123;
            }
            while (v123);
            *v121 = *v122;
            a4 += v14;
            a5 = (_DWORD *)((char *)a5 + v120);
            ++v85;
          }
          while (v85 != v11);
        }
      }
      goto LABEL_3;
    }
    v68 = 4 * v14;
    v69 = 4 * v15;
    while (1)
    {
      v70 = a5;
      v71 = a4;
      if (!v13)
        goto LABEL_33;
      v73 = v9[6];
      v72 = v9[7];
      if (v16)
        break;
      v83 = 4 * v73;
      v70 = a5;
      v71 = a4;
      v84 = v13;
      do
      {
        *v70 = *v71;
        v71 = (_DWORD *)((char *)v71 + v83);
        v70 += v72;
        --v84;
      }
      while (v84);
LABEL_26:
      *v70 = *v71;
      a4 = (_DWORD *)((char *)a4 + v68);
      a5 = (_DWORD *)((char *)a5 + v69);
      if (++v12 == v11)
        goto LABEL_3;
    }
    v74 = 0;
    v75 = 4 * v9[3];
    v76 = 4 * v9[4];
    v70 = a5;
    v71 = a4;
    do
    {
      v77 = v70;
      v78 = v71;
      v79 = v16;
      do
      {
        *v77 = *v78;
        v78 = (_DWORD *)((char *)v78 + v75);
        v77 = (_DWORD *)((char *)v77 + v76);
        --v79;
      }
      while (v79);
      *v77 = *v78;
      v71 += v73;
      v70 += v72;
      ++v74;
    }
    while (v74 != v13);
LABEL_33:
    if (v16)
    {
      v80 = v9[3];
      v81 = 4 * v9[4];
      v82 = v16;
      do
      {
        *v70 = *v71;
        v71 += v80;
        v70 = (_DWORD *)((char *)v70 + v81);
        --v82;
      }
      while (v82);
    }
    goto LABEL_26;
  }
LABEL_64:
  if (v9[11])
  {
    v124 = 0;
    do
    {
      sub_2108C46B4(v9, v8, v7, a4, a5);
      a4 += v9[12];
      a5 += v9[13];
      ++v124;
    }
    while (v124 < v9[11]);
  }
  return sub_2108C46B4(v9, v8, v7, a4, a5);
}

float sub_2108C46B4(_DWORD *a1, uint64_t a2, uint64_t a3, _DWORD *a4, _DWORD *a5)
{
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  int v21;
  _DWORD *v22;
  _DWORD *v23;
  _DWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  _DWORD *v27;
  _DWORD *v28;
  _DWORD *v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  _DWORD *v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _DWORD *v47;
  _DWORD *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _DWORD *v56;
  _DWORD *v57;
  int v58;
  float result;

  v5 = a1[8];
  v6 = a1[5];
  if (v5)
  {
    v7 = a1[2];
    v8 = a1[9];
    v9 = a1[10];
    if (v6)
    {
      v10 = a1[6];
      v11 = a1[7];
      if (!v7)
      {
        v52 = 4 * v8;
        v53 = 4 * v10;
        v54 = 4 * v9;
        v55 = 4 * v11;
        do
        {
          v56 = a5;
          v57 = a4;
          v58 = v6;
          do
          {
            *v56 = *v57;
            v57 = (_DWORD *)((char *)v57 + v53);
            v56 = (_DWORD *)((char *)v56 + v55);
            --v58;
          }
          while (v58);
          *v56 = *v57;
          a4 = (_DWORD *)((char *)a4 + v52);
          a5 = (_DWORD *)((char *)a5 + v54);
          ++v7;
        }
        while (v7 != v5);
        v32 = a1[6];
        v33 = a1[7];
        goto LABEL_34;
      }
      v12 = 0;
      v13 = 4 * v8;
      v14 = v10;
      v15 = 4 * a1[3];
      v16 = 4 * v9;
      v17 = v11;
      v18 = 4 * a1[4];
      v19 = &a4[v14];
      v20 = &a5[v17];
      do
      {
        v21 = 0;
        v22 = v20;
        v23 = v19;
        v24 = a5;
        v25 = a4;
        do
        {
          v26 = v23;
          v27 = v22;
          v28 = v24;
          v29 = v25;
          v30 = v7;
          do
          {
            *v28 = *v29;
            v29 = (_DWORD *)((char *)v29 + v15);
            v28 = (_DWORD *)((char *)v28 + v18);
            --v30;
          }
          while (v30);
          *v28 = *v29;
          v25 = (_DWORD *)((char *)v25 + v14 * 4);
          v24 = (_DWORD *)((char *)v24 + v17 * 4);
          ++v21;
          v23 = &v26[v14];
          v22 = &v27[v17];
        }
        while (v21 != v6);
        v31 = v7;
        do
        {
          *v27 = *v26;
          v26 = (_DWORD *)((char *)v26 + v15);
          v27 = (_DWORD *)((char *)v27 + v18);
          --v31;
        }
        while (v31);
        *v27 = *v26;
        a4 = (_DWORD *)((char *)a4 + v13);
        a5 = (_DWORD *)((char *)a5 + v16);
        ++v12;
        v19 = (_DWORD *)((char *)v19 + v13);
        v20 = (_DWORD *)((char *)v20 + v16);
      }
      while (v12 != v5);
LABEL_14:
      v32 = a1[6];
      v33 = a1[7];
      if (v7)
      {
        v34 = 0;
        v35 = 4 * v32;
        v36 = 4 * a1[3];
        v37 = 4 * v33;
        v38 = 4 * a1[4];
        do
        {
          v39 = a5;
          v40 = a4;
          v41 = v7;
          do
          {
            *v39 = *v40;
            v40 = (_DWORD *)((char *)v40 + v36);
            v39 = (_DWORD *)((char *)v39 + v38);
            --v41;
          }
          while (v41);
          *v39 = *v40;
          a4 = (_DWORD *)((char *)a4 + v35);
          a5 = (_DWORD *)((char *)a5 + v37);
          ++v34;
        }
        while (v34 != v6);
        goto LABEL_25;
      }
      do
      {
LABEL_34:
        *a5 = *a4;
        a4 += v32;
        a5 += v33;
        --v6;
      }
      while (v6);
      goto LABEL_37;
    }
    if (!v7)
    {
      do
      {
        *a5 = *a4;
        a4 += v8;
        a5 += v9;
        --v5;
      }
      while (v5);
      goto LABEL_37;
    }
    v42 = 0;
    v43 = 4 * v8;
    v44 = 4 * a1[3];
    v45 = 4 * v9;
    v46 = 4 * a1[4];
    do
    {
      v47 = a5;
      v48 = a4;
      v49 = v7;
      do
      {
        *v47 = *v48;
        v48 = (_DWORD *)((char *)v48 + v44);
        v47 = (_DWORD *)((char *)v47 + v46);
        --v49;
      }
      while (v49);
      *v47 = *v48;
      a4 = (_DWORD *)((char *)a4 + v43);
      a5 = (_DWORD *)((char *)a5 + v45);
      ++v42;
    }
    while (v42 != v5);
  }
  else
  {
    v7 = a1[2];
    if (v6)
      goto LABEL_14;
  }
LABEL_25:
  if (v7)
  {
    v50 = 4 * a1[3];
    v51 = 4 * a1[4];
    do
    {
      *a5 = *a4;
      a4 = (_DWORD *)((char *)a4 + v50);
      a5 = (_DWORD *)((char *)a5 + v51);
      --v7;
    }
    while (v7);
  }
LABEL_37:
  result = *(float *)a4;
  *a5 = *a4;
  return result;
}

void sub_2108C4958(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  if (*(_BYTE *)(a2 + 112))
  {
    v3 = a2 + 56;
    nullsub_51(a2 + 80);
    v4 = *(std::__shared_weak_count **)(a2 + 72);
    if (!v4)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      nullsub_51(v3);
    }
    else
    {
LABEL_6:
      nullsub_51(v3);
    }
  }
}

void sub_2108C49E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  if (*(_BYTE *)(a2 + 112))
  {
    v3 = a2 + 56;
    nullsub_51(a2 + 80);
    v4 = *(std::__shared_weak_count **)(a2 + 72);
    if (!v4)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      nullsub_51(v3);
    }
    else
    {
LABEL_6:
      nullsub_51(v3);
    }
  }
}

uint64_t sub_2108C4A68(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;

  v2 = result;
  if (*(unsigned __int8 *)(result + 128) == *(unsigned __int8 *)(a2 + 128))
  {
    if (!*(_BYTE *)(result + 128))
      return result;
    v3 = *(unsigned int *)(result + 120);
    v4 = *(unsigned int *)(a2 + 120);
    if ((_DWORD)v3 != -1)
    {
      if ((_DWORD)v4 == -1)
      {
        result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_24CA79850[v3])(&v8, result, a2);
        *(_DWORD *)(v2 + 120) = -1;
        return result;
      }
LABEL_15:
      v7 = result;
      return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_24CA79980[v4])(&v7, result, a2);
    }
    if ((_DWORD)v4 != -1)
      goto LABEL_15;
  }
  else if (*(_BYTE *)(result + 128))
  {
    v5 = *(unsigned int *)(result + 120);
    if ((_DWORD)v5 != -1)
      result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_24CA79850[v5])(&v9, result, a2);
    *(_DWORD *)(v2 + 120) = -1;
    *(_BYTE *)(v2 + 128) = 0;
  }
  else
  {
    *(_BYTE *)result = 0;
    *(_DWORD *)(result + 120) = -1;
    v6 = *(unsigned int *)(a2 + 120);
    if ((_DWORD)v6 != -1)
    {
      result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_24CA79998[v6])(&v10, result, a2);
      *(_DWORD *)(v2 + 120) = v6;
    }
    *(_BYTE *)(v2 + 128) = 1;
  }
  return result;
}

uint64_t sub_2108C4BA4(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  *(_QWORD *)a1 = &off_24CA79A00;
  *(_BYTE *)(a1 + 8) = *a2;
  v5 = operator new();
  v6 = v5;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_2108B314C((_BYTE *)v5, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)v5 = *(_OWORD *)a3;
    *(_QWORD *)(v5 + 16) = *(_QWORD *)(a3 + 16);
  }
  *(_QWORD *)(a1 + 16) = v6;
  v7 = (_QWORD *)operator new();
  *v7 = &unk_24CA7A1D8;
  v7[1] = 0;
  v7[2] = 0;
  v7[3] = v6;
  *(_QWORD *)(a1 + 24) = v7;
  return a1;
}

void sub_2108C4C5C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x212BCC6FC](v2, 0x1012C40EC159624);
  nullsub_51(v1);
  _Unwind_Resume(a1);
}

void sub_2108C4CA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_51(v1);
  _Unwind_Resume(a1);
}

void sub_2108C4CB8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BCC6FCLL);
}

uint64_t sub_2108C4CDC(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    JUMPOUT(0x212BCC6FCLL);
  }
  return result;
}

uint64_t sub_2108C4D2C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000210A0BC59)
    return a1 + 24;
  if (((v3 & 0x8000000210A0BC59 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000210A0BC59))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000210A0BC59 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void sub_2108C4DB0()
{
  JUMPOUT(0x212BCC6FCLL);
}

__n128 sub_2108C4DC4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24CA7A228;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_2108C4DFC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24CA7A228;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_2108C4E1C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_2108C4E24(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP31e5rt_e5_compiler_config_optionsEJS8_EEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP31e5rt_e5_compiler_"
                                "config_optionsEJS8_EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP31e5rt_e5_compiler_config_optionsEJS8_EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP31e5rt_e5_compiler_config_optionsEJS8_EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2108C4E90()
{
  return &unk_24CA7A288;
}

void sub_2108C4EA0()
{
  JUMPOUT(0x212BCC6FCLL);
}

__n128 sub_2108C4EB4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24CA7A2A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_2108C4EEC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24CA7A2A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_2108C4F0C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_2108C4F14(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP16e5rt_e5_compilerEJS8_EEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP16e5rt_e5_compilerEJS8_EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP16e5rt_e5_compilerEJS8_EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP16e5rt_e5_compilerEJS8_EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2108C4F80()
{
  return &unk_24CA7A308;
}

void sub_2108C4F90()
{
  JUMPOUT(0x212BCC6FCLL);
}

__n128 sub_2108C4FA4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24CA7A328;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_2108C4FDC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24CA7A328;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_2108C4FFC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_2108C5004(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP24e5rt_e5_compiler_optionsEJS8_EEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP24e5rt_e5_compiler_"
                                "optionsEJS8_EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP24e5rt_e5_compiler_optionsEJS8_EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP24e5rt_e5_compiler_optionsEJS8_EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2108C5070()
{
  return &unk_24CA7A388;
}

void sub_2108C507C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *__p[2];
  char v5;
  uint64_t v6[5];
  uint64_t *v7;

  sub_2109ECF90(v6);
  sub_2109ED0D0(v6);
  sub_2109976FC();
  sub_2109ED0DC(v6, __p);
  sub_2109ED024(v6);
  v6[0] = a2;
  v6[1] = (uint64_t)__p;
  v6[2] = a2;
  v6[3] = (uint64_t)__p;
  v6[4] = (uint64_t)__p;
  v3 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 == -1)
    sub_2108B9060();
  v7 = v6;
  ((void (*)(uint64_t **, uint64_t))off_24CA79CB0[v3])(&v7, a2);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_2108C5140(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_2108C5174()
{
  JUMPOUT(0x212BCC6FCLL);
}

__n128 sub_2108C5188(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24CA7A3A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_2108C51C0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24CA7A3A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_2108C51E0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_2108C51E8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP20e5rt_program_libraryEJS8_EEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP20e5rt_program_libraryEJS8_EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP20e5rt_program_libraryEJS8_EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP20e5rt_program_libraryEJS8_EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2108C5254()
{
  return &unk_24CA7A408;
}

void sub_2108C5264()
{
  JUMPOUT(0x212BCC6FCLL);
}

__n128 sub_2108C5278(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24CA7A428;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_2108C52B0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24CA7A428;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_2108C52D0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_2108C52D8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP21e5rt_program_functionEJS8_EEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP21e5rt_program_functionEJS8_EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP21e5rt_program_functionEJS8_EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP21e5rt_program_functionEJS8_EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2108C5344()
{
  return &unk_24CA7A488;
}

void sub_2108C5354()
{
  JUMPOUT(0x212BCC6FCLL);
}

__n128 sub_2108C5368(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24CA7A4A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_2108C53A0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24CA7A4A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_2108C53C0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_2108C53C8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP42e5rt_precompiled_compute_op_"
                     "create_optionsEJS8_EEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP42e5rt_precompiled_"
                                "compute_op_create_optionsEJS8_EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP42e5rt_precompiled_compute_op_create_optionsEJS8_EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP42e5rt_precompiled_compute_op_create_optionsEJS8_EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2108C5434()
{
  return &unk_24CA7A508;
}

unsigned __int8 *sub_2108C5440(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _BYTE *v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  void **v14;
  unsigned __int8 *v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  __int128 *v27;
  __int128 v28;
  float v29;
  float v30;
  uint64_t v31;
  _QWORD *v32;
  _BOOL8 v33;
  unint64_t v34;
  unint64_t v35;
  size_t prime;
  int8x8_t v37;
  unint64_t v38;
  uint8x8_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD v44[2];
  char v45;

  v6 = (_BYTE *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v9 = v8;
  }
  v10 = sub_2108B6894((uint64_t)v44, (uint64_t *)a2, v9);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = (unsigned __int8 *)*v14;
      if (*v14)
      {
        v16 = v6[23];
        if (v16 >= 0)
          v17 = v6[23];
        else
          v17 = *((_QWORD *)v6 + 1);
        if (v16 < 0)
          v6 = *(_BYTE **)v6;
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v22 = *((_QWORD *)v15 + 1);
            if (v22 == v11)
            {
              v23 = v15[39];
              if ((v23 & 0x80u) == 0)
                v24 = v15[39];
              else
                v24 = *((_QWORD *)v15 + 3);
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp(*((const void **)v15 + 2), v6, *((_QWORD *)v15 + 3)))
                    return v15;
                }
                else
                {
                  if (!v15[39])
                    return v15;
                  v25 = 0;
                  while (v15[v25 + 16] == v6[v25])
                  {
                    if (v23 == ++v25)
                      return v15;
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            v15 = *(unsigned __int8 **)v15;
            if (!v15)
              goto LABEL_51;
          }
        }
        do
        {
          v18 = *((_QWORD *)v15 + 1);
          if (v18 == v11)
          {
            v19 = v15[39];
            if ((v19 & 0x80u) == 0)
              v20 = v15[39];
            else
              v20 = *((_QWORD *)v15 + 3);
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v15 + 2), v6, *((_QWORD *)v15 + 3)))
                  return v15;
              }
              else
              {
                if (!v15[39])
                  return v15;
                v21 = 0;
                while (v15[v21 + 16] == v6[v21])
                {
                  if (v19 == ++v21)
                    return v15;
                }
              }
            }
          }
          else
          {
            if (v18 >= v12)
              v18 %= v12;
            if (v18 != v4)
              break;
          }
          v15 = *(unsigned __int8 **)v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  v26 = (_QWORD *)(a1 + 16);
  v15 = (unsigned __int8 *)operator new(0x30uLL);
  v44[0] = v15;
  v44[1] = a1 + 16;
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = v11;
  v27 = *a4;
  v28 = **a4;
  *((_QWORD *)v15 + 4) = *((_QWORD *)*a4 + 2);
  *((_OWORD *)v15 + 1) = v28;
  *((_QWORD *)v27 + 1) = 0;
  *((_QWORD *)v27 + 2) = 0;
  *(_QWORD *)v27 = 0;
  *((_QWORD *)v15 + 5) = 0;
  v45 = 1;
  v29 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v30 = *(float *)(a1 + 32);
  if (v12 && (float)(v30 * (float)v12) >= v29)
  {
    v31 = *(_QWORD *)a1;
    v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v32)
    {
LABEL_54:
      *(_QWORD *)v15 = *v32;
LABEL_89:
      *v32 = v15;
      goto LABEL_90;
    }
  }
  else
  {
    v33 = 1;
    if (v12 >= 3)
      v33 = (v12 & (v12 - 1)) != 0;
    v34 = v33 | (2 * v12);
    v35 = vcvtps_u32_f32(v29 / v30);
    if (v34 <= v35)
      prime = v35;
    else
      prime = v34;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v37 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v37)
      goto LABEL_65;
    if (prime < *(_QWORD *)&v37)
    {
      v38 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v37 < 3uLL || (v39 = (uint8x8_t)vcnt_s8(v37), v39.i16[0] = vaddlv_u8(v39), v39.u32[0] > 1uLL))
      {
        v38 = std::__next_prime(v38);
      }
      else
      {
        v40 = 1 << -(char)__clz(v38 - 1);
        if (v38 >= 2)
          v38 = v40;
      }
      if (prime <= v38)
        prime = v38;
      if (prime < *(_QWORD *)&v37)
LABEL_65:
        sub_2108B5C58(a1, prime);
    }
    v12 = *(_QWORD *)(a1 + 8);
    v41 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        v4 = v11 % v12;
        v31 = *(_QWORD *)a1;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v11 % v12));
        if (v32)
          goto LABEL_54;
      }
      else
      {
        v4 = v11;
        v31 = *(_QWORD *)a1;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v11);
        if (v32)
          goto LABEL_54;
      }
    }
    else
    {
      v4 = v41 & v11;
      v31 = *(_QWORD *)a1;
      v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v41 & v11));
      if (v32)
        goto LABEL_54;
    }
  }
  *(_QWORD *)v15 = *v26;
  *v26 = v15;
  *(_QWORD *)(v31 + 8 * v4) = v26;
  if (*(_QWORD *)v15)
  {
    v42 = *(_QWORD *)(*(_QWORD *)v15 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v42 >= v12)
        v42 %= v12;
    }
    else
    {
      v42 &= v12 - 1;
    }
    v32 = (_QWORD *)(*(_QWORD *)a1 + 8 * v42);
    goto LABEL_89;
  }
LABEL_90:
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_2108C5850(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2108B7380((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2108C5868(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA7A528;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2108C5878(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA7A528;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BCC6FCLL);
}

uint64_t sub_2108C58A8(uint64_t a1)
{
  return sub_2109A87CC(a1 + 24);
}

uint64_t *sub_2108C58B4(uint64_t a1, uint64_t a2, __int128 *a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  float v26;
  float v27;
  _QWORD *v28;
  _QWORD *v29;
  _BOOL8 v30;
  unint64_t v31;
  unint64_t v32;
  size_t prime;
  int8x8_t v34;
  unint64_t v35;
  uint8x8_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD v41[2];
  char v42;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = sub_2108B6894((uint64_t)v41, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v21 = v14[1];
            if (v21 == v10)
            {
              v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0)
                v23 = *((unsigned __int8 *)v14 + 39);
              else
                v23 = v14[3];
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3]))
                    return v14;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return v14;
                  v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24)
                      return v14;
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v10)
          {
            v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v14 + 39);
            else
              v19 = v14[3];
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3]))
                  return v14;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return v14;
                v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  v25 = operator new(0x90uLL);
  v41[0] = v25;
  v41[1] = a1 + 16;
  v42 = 0;
  *(_QWORD *)v25 = 0;
  *((_QWORD *)v25 + 1) = v10;
  sub_2108C5D04((char *)v25 + 16, a3);
  v42 = 1;
  v26 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v27 = *(float *)(a1 + 32);
  if (!v11 || (float)(v27 * (float)v11) < v26)
  {
    v30 = 1;
    if (v11 >= 3)
      v30 = (v11 & (v11 - 1)) != 0;
    v31 = v30 | (2 * v11);
    v32 = vcvtps_u32_f32(v26 / v27);
    if (v31 <= v32)
      prime = v32;
    else
      prime = v31;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v34 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v34)
      goto LABEL_65;
    if (prime < *(_QWORD *)&v34)
    {
      v35 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v34 < 3uLL || (v36 = (uint8x8_t)vcnt_s8(v34), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
      {
        v35 = std::__next_prime(v35);
      }
      else
      {
        v37 = 1 << -(char)__clz(v35 - 1);
        if (v35 >= 2)
          v35 = v37;
      }
      if (prime <= v35)
        prime = v35;
      if (prime < *(_QWORD *)&v34)
LABEL_65:
        sub_2108B5C58(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v38 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v3 = v10 % v11;
        v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        v29 = (_QWORD *)v41[0];
        if (v28)
          goto LABEL_54;
      }
      else
      {
        v3 = v10;
        v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        v29 = (_QWORD *)v41[0];
        if (v28)
          goto LABEL_54;
      }
    }
    else
    {
      v3 = v38 & v10;
      v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v38 & v10));
      v29 = (_QWORD *)v41[0];
      if (v28)
        goto LABEL_54;
    }
LABEL_78:
    *v29 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v41[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v41[0])
    {
      v39 = *(_QWORD *)(*(_QWORD *)v41[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v39 >= v11)
          v39 %= v11;
      }
      else
      {
        v39 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v39) = v41[0];
    }
    goto LABEL_89;
  }
  v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v29 = (_QWORD *)v41[0];
  if (!v28)
    goto LABEL_78;
LABEL_54:
  *v29 = *v28;
  *v28 = v41[0];
LABEL_89:
  v14 = (uint64_t *)v41[0];
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_2108C5CD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2108B6840((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2108C5CEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2108B6840((uint64_t *)va);
  _Unwind_Resume(a1);
}

char *sub_2108C5D04(char *__dst, __int128 *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  if (*((char *)a2 + 23) < 0)
  {
    sub_2108B314C(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  v5 = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = 0;
  *((_QWORD *)__dst + 3) = v5;
  *((_QWORD *)__dst + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = 0;
  v6 = *((_QWORD *)a2 + 5);
  *((_QWORD *)__dst + 5) = v6;
  v7 = *((_QWORD *)a2 + 6);
  *((_QWORD *)__dst + 6) = v7;
  *((_DWORD *)__dst + 14) = *((_DWORD *)a2 + 14);
  if (v7)
  {
    v8 = *(_QWORD *)(v6 + 8);
    v9 = *((_QWORD *)__dst + 4);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v8 %= v9;
    }
    else
    {
      v8 &= v9 - 1;
    }
    *(_QWORD *)(v5 + 8 * v8) = __dst + 40;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 6) = 0;
  }
  v10 = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = 0;
  *((_QWORD *)__dst + 8) = v10;
  *((_QWORD *)__dst + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = 0;
  v11 = *((_QWORD *)a2 + 10);
  *((_QWORD *)__dst + 10) = v11;
  v12 = *((_QWORD *)a2 + 11);
  *((_QWORD *)__dst + 11) = v12;
  *((_DWORD *)__dst + 24) = *((_DWORD *)a2 + 24);
  if (v12)
  {
    v13 = *(_QWORD *)(v11 + 8);
    v14 = *((_QWORD *)__dst + 9);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v13 >= v14)
        v13 %= v14;
    }
    else
    {
      v13 &= v14 - 1;
    }
    *(_QWORD *)(v10 + 8 * v13) = __dst + 80;
    *((_QWORD *)a2 + 10) = 0;
    *((_QWORD *)a2 + 11) = 0;
  }
  *(_OWORD *)(__dst + 104) = *(__int128 *)((char *)a2 + 104);
  *((_QWORD *)a2 + 13) = 0;
  *((_QWORD *)a2 + 14) = 0;
  *((_QWORD *)__dst + 15) = *((_QWORD *)a2 + 15);
  return __dst;
}

uint64_t *sub_2108C5E44(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = sub_2108B6894((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = v2[23];
      if (v14 >= 0)
        v15 = v2[23];
      else
        v15 = *((_QWORD *)v2 + 1);
      if (v14 < 0)
        v2 = *(_BYTE **)v2;
      if (v9.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v21 = v13[1];
          if (v21 == v8)
          {
            v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0)
              v23 = *((unsigned __int8 *)v13 + 39);
            else
              v23 = v13[3];
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24)
                    return v13;
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
      while (1)
      {
        v17 = v13[1];
        if (v17 == v8)
        {
          v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = *((unsigned __int8 *)v13 + 39);
          else
            v19 = v13[3];
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3]))
                return v13;
            }
            else
            {
              if (!*((_BYTE *)v13 + 39))
                return v13;
              v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20)
                  return v13;
              }
            }
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v7)
            v17 %= *(_QWORD *)&v7;
          if (v17 != v10)
            return 0;
        }
        result = 0;
        v13 = (uint64_t *)*v13;
        if (!v13)
          return result;
      }
    }
  }
  return 0;
}

void sub_2108C6074()
{
  JUMPOUT(0x212BCC6FCLL);
}

__n128 sub_2108C6088(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24CA7A578;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_2108C60C0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24CA7A578;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_2108C60E0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_2108C60E8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP21e5rt_execution_streamEJS8_EEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP21e5rt_execution_streamEJS8_EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP21e5rt_execution_streamEJS8_EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP21e5rt_execution_streamEJS8_EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2108C6154()
{
  return &unk_24CA7A5D8;
}

void sub_2108C6160(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA7A5F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2108C6170(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA7A5F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BCC6FCLL);
}

uint64_t sub_2108C61A0(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_2108C61B0(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_2108B5C58(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    sub_2108C62F0(a1, (uint64_t)(i + 2), (uint64_t)(i + 2));
  return a1;
}

void sub_2108C62C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108AA7B8(v1);
  _Unwind_Resume(a1);
}

void sub_2108C62DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108AA7B8(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_2108C62F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _BYTE *v26;
  float v27;
  float v28;
  _QWORD *v29;
  _QWORD *v30;
  _BOOL8 v31;
  unint64_t v32;
  unint64_t v33;
  size_t prime;
  int8x8_t v35;
  unint64_t v36;
  uint8x8_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD v42[2];
  char v43;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = sub_2108B6894((uint64_t)v42, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v21 = v14[1];
            if (v21 == v10)
            {
              v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0)
                v23 = *((unsigned __int8 *)v14 + 39);
              else
                v23 = v14[3];
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3]))
                    return v14;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return v14;
                  v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24)
                      return v14;
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v10)
          {
            v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v14 + 39);
            else
              v19 = v14[3];
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3]))
                  return v14;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return v14;
                v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  v25 = operator new(0x30uLL);
  v42[0] = v25;
  v42[1] = a1 + 16;
  v43 = 0;
  *v25 = 0;
  v25[1] = v10;
  v26 = v25 + 2;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_2108B314C(v26, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)v26 = *(_OWORD *)a3;
    v25[4] = *(_QWORD *)(a3 + 16);
  }
  v25[5] = *(_QWORD *)(a3 + 24);
  v43 = 1;
  v27 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v28 = *(float *)(a1 + 32);
  if (!v11 || (float)(v28 * (float)v11) < v27)
  {
    v31 = 1;
    if (v11 >= 3)
      v31 = (v11 & (v11 - 1)) != 0;
    v32 = v31 | (2 * v11);
    v33 = vcvtps_u32_f32(v27 / v28);
    if (v32 <= v33)
      prime = v33;
    else
      prime = v32;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v35 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v35)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v35)
    {
      v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v35 < 3uLL || (v37 = (uint8x8_t)vcnt_s8(v35), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        v36 = std::__next_prime(v36);
      }
      else
      {
        v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2)
          v36 = v38;
      }
      if (prime <= v36)
        prime = v36;
      if (prime < *(_QWORD *)&v35)
LABEL_68:
        sub_2108B5C58(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v39 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v3 = v10 % v11;
        v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        v30 = (_QWORD *)v42[0];
        if (v29)
          goto LABEL_57;
      }
      else
      {
        v3 = v10;
        v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        v30 = (_QWORD *)v42[0];
        if (v29)
          goto LABEL_57;
      }
    }
    else
    {
      v3 = v39 & v10;
      v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v39 & v10));
      v30 = (_QWORD *)v42[0];
      if (v29)
        goto LABEL_57;
    }
LABEL_81:
    *v30 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v42[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v42[0])
    {
      v40 = *(_QWORD *)(*(_QWORD *)v42[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v40 >= v11)
          v40 %= v11;
      }
      else
      {
        v40 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v40) = v42[0];
    }
    goto LABEL_92;
  }
  v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v30 = (_QWORD *)v42[0];
  if (!v29)
    goto LABEL_81;
LABEL_57:
  *v30 = *v29;
  *v29 = v42[0];
LABEL_92:
  v14 = (uint64_t *)v42[0];
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_2108C6734(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2108B7380((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2108C6748(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2108B7380((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2108C6760(const char **a1@<X0>, uint64_t a2@<X1>, const char **a3@<X2>, const std::string::value_type *a4@<X4>, std::string::size_type a5@<X5>, std::string *a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  std::string::size_type v13;
  uint64_t v14;
  const char **v15;
  std::string::size_type v16;
  const std::string::value_type *p_p;
  std::string::size_type v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  int64_t v22;
  __int128 i;
  void *__p;
  std::string::size_type v25;
  unsigned __int8 v26;
  __int128 v27;

  v11 = a1 - a3;
  if (v11 >= -1)
    v12 = -1;
  else
    v12 = a1 - a3;
  v13 = a5 * ~v12;
  *(_QWORD *)&v27 = a1;
  *((_QWORD *)&v27 + 1) = a2;
  v22 = (char *)a1 - (char *)a3;
  v14 = 0;
  if (a1 != a3)
  {
    v15 = a1;
    do
    {
      sub_2108C699C((uint64_t)&v27 + 8, v15);
      if ((v26 & 0x80u) == 0)
        v16 = v26;
      else
        v16 = v25;
      if ((char)v26 < 0)
        operator delete(__p);
      v14 += v16;
      v15 = (const char **)(v27 + 8);
      *(_QWORD *)&v27 = v15;
    }
    while (v15 != a3);
  }
  a6->__r_.__value_.__r.__words[0] = 0;
  a6->__r_.__value_.__l.__size_ = 0;
  a6->__r_.__value_.__r.__words[2] = 0;
  std::string::reserve(a6, v14 + v13);
  *(_QWORD *)&v27 = a1;
  *((_QWORD *)&v27 + 1) = a2;
  if (v22 < 0)
  {
    sub_2108C699C((uint64_t)&v27 + 8, a1);
    if ((v26 & 0x80u) == 0)
      p_p = (const std::string::value_type *)&__p;
    else
      p_p = (const std::string::value_type *)__p;
    if ((v26 & 0x80u) == 0)
      v18 = v26;
    else
      v18 = v25;
    std::string::append(a6, p_p, v18);
    if ((char)v26 < 0)
    {
      operator delete(__p);
      if ((unint64_t)(v11 + 1) < 2)
        return;
    }
    else if ((unint64_t)(v11 + 1) < 2)
    {
      return;
    }
    *(_QWORD *)&v27 = v27 + 8;
    for (i = v27; (const char **)i != a3; *(_QWORD *)&i = i + 8)
    {
      std::string::append(a6, a4, a5);
      sub_2108C699C((uint64_t)&i + 8, (const char **)i);
      if ((v26 & 0x80u) == 0)
        v19 = (const std::string::value_type *)&__p;
      else
        v19 = (const std::string::value_type *)__p;
      if ((v26 & 0x80u) == 0)
        v20 = v26;
      else
        v20 = v25;
      std::string::append(a6, v19, v20);
      if ((char)v26 < 0)
        operator delete(__p);
    }
  }
}

void sub_2108C6958(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;

  if (a19 < 0)
    operator delete(__p);
  if (*(char *)(v19 + 23) < 0)
    operator delete(*(void **)v19);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2108C699C(uint64_t a1, const char **a2)
{
  uint64_t result;
  _DWORD v3[6];
  int v4;
  char v5;
  _QWORD v6[2];

  v4 = 0;
  if (*a2)
    sub_2108C6A80(v3, a2);
  else
    sub_2108B9350(v3, "nullptr");
  if (v4 == -1)
    sub_2108B9060();
  v6[0] = &v5;
  result = ((uint64_t (*)(_QWORD *, _DWORD *))off_24CA79CC8[v4])(v6, v3);
  if (v4 != -1)
    return ((uint64_t (*)(_QWORD *, _DWORD *))off_24CA79C50[v4])(v6, v3);
  return result;
}

void sub_2108C6A48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13)
{
  uint64_t v13;

  if (a13 != -1)
    ((void (*)(uint64_t, char *))off_24CA79C50[a13])(v13 - 17, &a10);
  _Unwind_Resume(exception_object);
}

_DWORD *sub_2108C6A80(_DWORD *a1, const char **a2)
{
  uint64_t v4;
  const char *v5;
  size_t v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  char v12;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24CA79C50[v4])(&v12, a1);
  a1[6] = -1;
  v5 = *a2;
  v6 = strlen(*a2);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    sub_2108A4B7C();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    v8 = operator new(v9 + 1);
    *((_QWORD *)a1 + 1) = v7;
    *((_QWORD *)a1 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)a1 = v8;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v6;
    v8 = a1;
    if (!v6)
      goto LABEL_11;
  }
  memmove(v8, v5, v7);
LABEL_11:
  *((_BYTE *)v8 + v7) = 0;
  a1[6] = 1;
  return a1;
}

void sub_2108C6B78()
{
  JUMPOUT(0x212BCC6FCLL);
}

__n128 sub_2108C6B8C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24CA7A648;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_2108C6BC4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24CA7A648;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_2108C6BE4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_2108C6BEC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP12e5rt_io_portEJS8_EEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP12e5rt_io_portEJS8_EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP12e5rt_io_portEJS8_EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF17e5rt_error_code_tPP12e5rt_io_portEJS8_EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2108C6C58()
{
  return &unk_24CA7A6A8;
}

void sub_2108C6C68()
{
  JUMPOUT(0x212BCC6FCLL);
}

__n128 sub_2108C6C7C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24CA7A6C8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_2108C6CBC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24CA7A6C8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_2108C6CE4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 8))(*(_QWORD *)(a1 + 16), a1 + 24);
}

uint64_t sub_2108C6CF0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPFvPNS_3kit2ml20EspressoV2StreamPoolERP21e5rt_executi"
                     "on_streamEJS8_SB_EEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPFvPNS_3kit2ml20EspressoV2StreamPoolERP21e"
                                "5rt_execution_streamEJS8_SB_EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPFvPNS_3kit2ml20EspressoV2StreamPoolERP21e5rt_execution_streamEJS8_SB_EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPFvPNS_3kit2ml20EspressoV2StreamPoolERP21e5rt_execution_streamEJS8_SB_EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2108C6D5C()
{
  return &unk_24CA7A728;
}

uint64_t *sub_2108C6D68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _BYTE *v26;
  float v27;
  float v28;
  _QWORD *v29;
  _QWORD *v30;
  _BOOL8 v31;
  unint64_t v32;
  unint64_t v33;
  size_t prime;
  int8x8_t v35;
  unint64_t v36;
  uint8x8_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD v42[2];
  char v43;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = sub_2108B6894((uint64_t)v42, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v21 = v14[1];
            if (v21 == v10)
            {
              v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0)
                v23 = *((unsigned __int8 *)v14 + 39);
              else
                v23 = v14[3];
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3]))
                    return v14;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return v14;
                  v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24)
                      return v14;
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v10)
          {
            v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v14 + 39);
            else
              v19 = v14[3];
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3]))
                  return v14;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return v14;
                v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  v25 = (char *)operator new(0x38uLL);
  v42[0] = v25;
  v42[1] = a1 + 16;
  v43 = 0;
  *(_QWORD *)v25 = 0;
  *((_QWORD *)v25 + 1) = v10;
  v26 = v25 + 16;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_2108B314C(v26, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)v26 = *(_OWORD *)a3;
    *((_QWORD *)v25 + 4) = *(_QWORD *)(a3 + 16);
  }
  *(_OWORD *)(v25 + 40) = *(_OWORD *)(a3 + 24);
  v43 = 1;
  v27 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v28 = *(float *)(a1 + 32);
  if (!v11 || (float)(v28 * (float)v11) < v27)
  {
    v31 = 1;
    if (v11 >= 3)
      v31 = (v11 & (v11 - 1)) != 0;
    v32 = v31 | (2 * v11);
    v33 = vcvtps_u32_f32(v27 / v28);
    if (v32 <= v33)
      prime = v33;
    else
      prime = v32;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v35 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v35)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v35)
    {
      v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v35 < 3uLL || (v37 = (uint8x8_t)vcnt_s8(v35), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        v36 = std::__next_prime(v36);
      }
      else
      {
        v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2)
          v36 = v38;
      }
      if (prime <= v36)
        prime = v36;
      if (prime < *(_QWORD *)&v35)
LABEL_68:
        sub_2108B5C58(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v39 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v3 = v10 % v11;
        v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        v30 = (_QWORD *)v42[0];
        if (v29)
          goto LABEL_57;
      }
      else
      {
        v3 = v10;
        v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        v30 = (_QWORD *)v42[0];
        if (v29)
          goto LABEL_57;
      }
    }
    else
    {
      v3 = v39 & v10;
      v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v39 & v10));
      v30 = (_QWORD *)v42[0];
      if (v29)
        goto LABEL_57;
    }
LABEL_81:
    *v30 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v42[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v42[0])
    {
      v40 = *(_QWORD *)(*(_QWORD *)v42[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v40 >= v11)
          v40 %= v11;
      }
      else
      {
        v40 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v40) = v42[0];
    }
    goto LABEL_92;
  }
  v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v30 = (_QWORD *)v42[0];
  if (!v29)
    goto LABEL_81;
LABEL_57:
  *v30 = *v29;
  *v29 = v42[0];
LABEL_92:
  v14 = (uint64_t *)v42[0];
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_2108C71AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2108B7380((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2108C71C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2108B7380((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_2108C71D8(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = sub_2108B6894((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = v2[23];
      if (v14 >= 0)
        v15 = v2[23];
      else
        v15 = *((_QWORD *)v2 + 1);
      if (v14 < 0)
        v2 = *(_BYTE **)v2;
      if (v9.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v21 = v13[1];
          if (v21 == v8)
          {
            v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0)
              v23 = *((unsigned __int8 *)v13 + 39);
            else
              v23 = v13[3];
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24)
                    return v13;
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
      while (1)
      {
        v17 = v13[1];
        if (v17 == v8)
        {
          v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = *((unsigned __int8 *)v13 + 39);
          else
            v19 = v13[3];
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3]))
                return v13;
            }
            else
            {
              if (!*((_BYTE *)v13 + 39))
                return v13;
              v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20)
                  return v13;
              }
            }
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v7)
            v17 %= *(_QWORD *)&v7;
          if (v17 != v10)
            return 0;
        }
        result = 0;
        v13 = (uint64_t *)*v13;
        if (!v13)
          return result;
      }
    }
  }
  return 0;
}

uint64_t *sub_2108C7404(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = sub_2108B6894((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = v2[23];
      if (v14 >= 0)
        v15 = v2[23];
      else
        v15 = *((_QWORD *)v2 + 1);
      if (v14 < 0)
        v2 = *(_BYTE **)v2;
      if (v9.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v21 = v13[1];
          if (v21 == v8)
          {
            v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0)
              v23 = *((unsigned __int8 *)v13 + 39);
            else
              v23 = v13[3];
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24)
                    return v13;
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
      while (1)
      {
        v17 = v13[1];
        if (v17 == v8)
        {
          v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = *((unsigned __int8 *)v13 + 39);
          else
            v19 = v13[3];
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3]))
                return v13;
            }
            else
            {
              if (!*((_BYTE *)v13 + 39))
                return v13;
              v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20)
                  return v13;
              }
            }
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v7)
            v17 %= *(_QWORD *)&v7;
          if (v17 != v10)
            return 0;
        }
        result = 0;
        v13 = (uint64_t *)*v13;
        if (!v13)
          return result;
      }
    }
  }
  return 0;
}

void sub_2108C7630(void *__p)
{
  operator delete(__p);
}

uint64_t sub_2108C763C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(void))(*a1 + 8 * a2))();
}

uint64_t LFDescriptorProgramMetadata(int a1, _QWORD *a2)
{
  CFTypeRef v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  CFTypeRef cf;
  std::__shared_weak_count *v9;

  if (!a2)
    return 3;
  switch(a1)
  {
    case 0:
    case 3:
      goto LABEL_7;
    case 1:
      sub_210977B8C(0, &cf);
      v3 = cf;
      if (!cf)
        break;
      goto LABEL_11;
    case 2:
      sub_210977B8C(1, &cf);
      v3 = cf;
      if (!cf)
        break;
      goto LABEL_11;
    case 4:
      sub_210959E28(4, &cf);
      v3 = cf;
      if (cf)
LABEL_11:
        CFRetain(v3);
      break;
    default:
      if ((a1 - 101) >= 4)
      {
        sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/LearnedFeatures/include_private/LearnedFeatures/private/LearnedFeaturesConversion.h", 69, (uint64_t)&unk_210A01421, 0, (uint64_t)"Feature type not implemented.", 29, (void (*)(void **))sub_2109EDDB4);
        abort();
      }
LABEL_7:
      v3 = 0;
      cf = 0;
      v9 = 0;
      break;
  }
  *a2 = v3;
  v5 = v9;
  if (!v9)
    return 0;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (v7)
    return 0;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return 0;
}

void sub_2108C77A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2108A894C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *LFV2KeypointsCreate()
{
  _QWORD *v0;
  _QWORD *v1;

  v0 = operator new(0x20uLL, MEMORY[0x24BEDB6B8]);
  if (v0)
  {
    v1 = operator new(0x30uLL);
    v1[1] = 0;
    v1[2] = 0;
    *v1 = &off_24CA7ADF0;
    v1[4] = 0;
    v1[5] = 0;
    v1[3] = 0;
    v0[1] = v1 + 3;
    v0[2] = v1;
    *((_DWORD *)v0 + 6) = 1;
    *v0 = &off_24CA7ACC0;
  }
  return v0;
}

uint64_t sub_2108C782C(void *a1)
{
  uint64_t v1;

  MEMORY[0x212BCC6F0](v1, MEMORY[0x24BEDB6B8]);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  return 0;
}

void LFV2KeypointsAppend(uint64_t a1, float a2, float a3, float a4, float a5, float a6)
{
  __int128 v6;
  float v7;

  *(_QWORD *)&v6 = __PAIR64__(LODWORD(a3), LODWORD(a2));
  *((_QWORD *)&v6 + 1) = __PAIR64__(LODWORD(a5), LODWORD(a4));
  v7 = a6;
  sub_210983768(*(void ***)(a1 + 8), &v6);
}

uint64_t LFV2KeypointsRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 24);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

uint64_t LFV2KeypointsRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 24);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

unint64_t LFV2KeypointsGetSize(uint64_t a1)
{
  return 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) - **(_QWORD **)(a1 + 8)) >> 2);
}

uint64_t LFV2KeypointsGetData(uint64_t a1)
{
  return **(_QWORD **)(a1 + 8);
}

_QWORD *LFV2DescriptorsCreate(int a1, uint64_t a2, size_t __sz, _QWORD *a4)
{
  _QWORD *v4;
  size_t v5;
  int v6;
  size_t v7;
  char *v8;
  char *v9;
  size_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  int v18;
  uint64_t v19;
  _QWORD *v20;
  char *v22;
  char *v23;
  size_t v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v4 = a4;
  if (!a4)
    return v4;
  v5 = __sz;
  v6 = a1 == 1;
  if (a1 == 2)
    v6 = 2;
  if (v6)
  {
    if (v6 != 2)
    {
      if (a2 == 64)
      {
        v28 = 0;
        v29 = 0;
        v30 = 0;
        if (__sz)
        {
          if (__sz >> 58)
            sub_2108B327C();
          v7 = __sz << 6;
          v8 = (char *)operator new(__sz << 6);
          v5 = (size_t)&v8[64 * v5];
          bzero(v8, v7);
          v9 = &v8[v7];
        }
        else
        {
          v9 = 0;
          v7 = 0;
          v8 = 0;
        }
        memcpy(v8, v4, v7);
        v22 = v8;
        v23 = v9;
        v24 = v5;
        v18 = 1;
        goto LABEL_31;
      }
      return 0;
    }
    if (a2 != 128 && a2 != 64)
      return 0;
    if (a2 == 64)
    {
      v28 = 0;
      v29 = 0;
      v30 = 0;
      if (__sz)
      {
        if (HIBYTE(__sz))
          sub_2108B327C();
        v15 = __sz << 8;
        v16 = (char *)operator new(__sz << 8);
        v5 = (size_t)&v16[256 * v5];
        bzero(v16, v15);
        v17 = &v16[v15];
      }
      else
      {
        v17 = 0;
        v15 = 0;
        v16 = 0;
      }
      memcpy(v16, v4, v15);
      v22 = v16;
      v23 = v17;
      v24 = v5;
      v18 = 2;
LABEL_31:
      v25 = v18;
      v26 = 64;
      v27 = v18;
      v4 = operator new(0x20uLL, MEMORY[0x24BEDB6B8]);
      if (!v4)
      {
LABEL_32:
        v19 = v25;
LABEL_36:
        ((void (*)(uint64_t *, char **))off_24CA7A738[v19])(&v28, &v22);
        return v4;
      }
      goto LABEL_35;
    }
    v28 = 0;
    v29 = 0;
    v30 = 0;
    if (__sz)
    {
      if (__sz >> 55)
        sub_2108B327C();
      v10 = __sz << 9;
      v11 = (char *)operator new(__sz << 9);
      v5 = (size_t)&v11[512 * v5];
      bzero(v11, v10);
      v12 = &v11[v10];
    }
    else
    {
      v12 = 0;
      v10 = 0;
      v11 = 0;
    }
    memcpy(v11, v4, v10);
    v22 = v11;
    v23 = v12;
    v24 = v5;
    v18 = 3;
    v25 = 3;
    v26 = 128;
    v27 = 2;
    v4 = operator new(0x20uLL, MEMORY[0x24BEDB6B8]);
    if (!v4)
      goto LABEL_32;
  }
  else
  {
    if (a2)
      return 0;
    v28 = 0;
    v29 = 0;
    v30 = 0;
    if (__sz)
    {
      if ((__sz & 0x8000000000000000) != 0)
        sub_2108B327C();
      v13 = (char *)operator new(__sz);
      v14 = &v13[v5];
      bzero(v13, v5);
    }
    else
    {
      v14 = 0;
      v13 = 0;
    }
    memcpy(0, v4, v5);
    v18 = 0;
    v22 = v13;
    v23 = v14;
    v24 = (size_t)v14;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v4 = operator new(0x20uLL, MEMORY[0x24BEDB6B8]);
    if (!v4)
      goto LABEL_32;
  }
LABEL_35:
  v20 = operator new(0x48uLL);
  v20[1] = 0;
  v20[2] = 0;
  *v20 = &off_24CA7AE40;
  *((_BYTE *)v20 + 24) = 0;
  *((_DWORD *)v20 + 12) = -1;
  ((void (*)(uint64_t *, _QWORD *, char **))off_24CA7AEA0[v18])(&v28, v20 + 3, &v22);
  *((_DWORD *)v20 + 12) = v18;
  v20[7] = v26;
  *((_DWORD *)v20 + 16) = v27;
  v4[1] = v20 + 3;
  v4[2] = v20;
  *((_DWORD *)v4 + 6) = 1;
  *v4 = &off_24CA7AD30;
  v19 = v25;
  if (v25 != -1)
    goto LABEL_36;
  return v4;
}

void sub_2108C7C9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2108C7CCC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13)
{
  uint64_t v13;

  MEMORY[0x212BCC6F0](v13, MEMORY[0x24BEDB6B8]);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  if (a13 != -1)
    JUMPOUT(0x2108C7C04);
  JUMPOUT(0x2108C7C1CLL);
}

uint64_t LFV2DescriptorsRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 24);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

uint64_t LFV2DescriptorsRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 24);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t LFV2DescriptorsGetType(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 40);
  if (v1 == 2)
    return 2;
  else
    return v1 == 1;
}

uint64_t LFV2DescriptorsGetData(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t **v6;

  v1 = *(_QWORD *)(a1 + 8);
  v4 = &v5;
  v5 = 0;
  v2 = *(unsigned int *)(v1 + 24);
  if ((_DWORD)v2 == -1)
    sub_2108B9060();
  v6 = &v4;
  ((void (*)(uint64_t ***))off_24CA82298[v2])(&v6);
  return v5;
}

uint64_t LFV2DescriptorsGetSize(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t **v6;

  v1 = *(_QWORD *)(a1 + 8);
  v4 = &v5;
  v5 = 0;
  v2 = *(unsigned int *)(v1 + 24);
  if ((_DWORD)v2 == -1)
    sub_2108B9060();
  v6 = &v4;
  ((void (*)(uint64_t ***))off_24CA822B8[v2])(&v6);
  return v5;
}

uint64_t LFV2DescriptorsGetDimension(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32);
}

uint64_t LFV2FeaturesRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 56);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  return result;
}

uint64_t LFV2FeaturesRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = (unsigned int *)(result + 56);
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

_QWORD *LFV2FeaturesGetKeypoints(_QWORD *a1)
{
  _QWORD *result;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;

  if (a1[8])
    return (_QWORD *)a1[8];
  v4 = a1[1];
  v3 = (std::__shared_weak_count *)a1[2];
  if (!v3)
  {
    result = operator new(0x20uLL, MEMORY[0x24BEDB6B8]);
    if (!result)
    {
      a1[8] = 0;
      return 0;
    }
LABEL_12:
    result[1] = v4;
    result[2] = v3;
    *((_DWORD *)result + 6) = 1;
    *result = &off_24CA7ACC0;
    a1[8] = result;
    return result;
  }
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v6 = __ldxr(p_shared_owners);
  while (__stxr(v6 + 1, p_shared_owners));
  result = operator new(0x20uLL, MEMORY[0x24BEDB6B8]);
  if (result)
    goto LABEL_12;
  a1[8] = 0;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (v7)
    return (_QWORD *)a1[8];
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return (_QWORD *)a1[8];
}

_QWORD *LFV2FeaturesGetLocalDescriptors(_QWORD *a1)
{
  _QWORD *result;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;

  if (a1[9])
    return (_QWORD *)a1[9];
  v4 = a1[3];
  v3 = (std::__shared_weak_count *)a1[4];
  if (!v3)
  {
    result = operator new(0x20uLL, MEMORY[0x24BEDB6B8]);
    if (!result)
    {
      a1[9] = 0;
      return 0;
    }
LABEL_12:
    result[1] = v4;
    result[2] = v3;
    *((_DWORD *)result + 6) = 1;
    *result = &off_24CA7AD30;
    a1[9] = result;
    return result;
  }
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v6 = __ldxr(p_shared_owners);
  while (__stxr(v6 + 1, p_shared_owners));
  result = operator new(0x20uLL, MEMORY[0x24BEDB6B8]);
  if (result)
    goto LABEL_12;
  a1[9] = 0;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (v7)
    return (_QWORD *)a1[9];
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return (_QWORD *)a1[9];
}

_QWORD *LFV2FeaturesGetGlobalDescriptors(_QWORD *a1)
{
  _QWORD *result;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;

  if (a1[10])
    return (_QWORD *)a1[10];
  v4 = a1[5];
  v3 = (std::__shared_weak_count *)a1[6];
  if (!v3)
  {
    result = operator new(0x20uLL, MEMORY[0x24BEDB6B8]);
    if (!result)
    {
      a1[10] = 0;
      return 0;
    }
LABEL_12:
    result[1] = v4;
    result[2] = v3;
    *((_DWORD *)result + 6) = 1;
    *result = &off_24CA7AD30;
    a1[10] = result;
    return result;
  }
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v6 = __ldxr(p_shared_owners);
  while (__stxr(v6 + 1, p_shared_owners));
  result = operator new(0x20uLL, MEMORY[0x24BEDB6B8]);
  if (result)
    goto LABEL_12;
  a1[10] = 0;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (v7)
    return (_QWORD *)a1[10];
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return (_QWORD *)a1[10];
}

uint64_t LFV2HandleCreate(_QWORD *a1, unsigned int a2, int a3)
{
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  unsigned int v9;

  if (a2 >= 4)
  {
    switch(a2)
    {
      case 'e':
        a2 = 4;
        break;
      case 'f':
        a2 = 7;
        break;
      case 'g':
        a2 = 5;
        break;
      case 'h':
        a2 = 6;
        break;
      default:
        if (a2 != 4)
        {
          sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/LearnedFeatures/include_private/LearnedFeatures/private/LearnedFeaturesConversion.h", 69, (uint64_t)&unk_210A01421, 0, (uint64_t)"Feature type not implemented.", 29, (void (*)(void **))sub_2109EDDB4);
          abort();
        }
        a2 = 8;
        break;
    }
  }
  v9 = a2;
  v5 = operator new(0x20uLL, MEMORY[0x24BEDB6B8]);
  v6 = v5;
  if (v5)
  {
    if ((a3 - 1) >= 3)
      v7 = 0;
    else
      v7 = a3;
    sub_2108CE148(v5 + 1, &v9, v7);
    *((_DWORD *)v6 + 6) = 1;
    *v6 = &off_24CA7AC80;
  }
  *a1 = v6;
  return 4 * (v6 == 0);
}

void sub_2108C826C(void *a1)
{
  uint64_t v1;

  MEMORY[0x212BCC6F0](v1, MEMORY[0x24BEDB6B8]);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x2108C8214);
}

uint64_t LFV2HandleSupported()
{
  return 1;
}

uint64_t LFV2DescriptorModelVersion(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t result;

  if (!a1)
    return 2;
  if (!a2)
    return 3;
  v3 = sub_2108CE378((uint64_t **)(a1 + 8));
  v5 = v3;
  if ((v4 & 0xFF00000000) != 0)
  {
    result = 0;
    *(_QWORD *)a2 = v5;
    *(_DWORD *)(a2 + 8) = v4;
  }
  else if ((v3 - 1) >= 4)
  {
    return 6;
  }
  else
  {
    return *(unsigned int *)&asc_210A0D1F0[4 * (int)v3 - 4];
  }
  return result;
}

uint64_t LFV2ComputeDescriptors(uint64_t a1, std::__shared_weak_count_vtbl *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  char *v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _DWORD v22[4];
  std::__shared_weak_count *v23;
  char v24;
  char v25;
  _QWORD v26[2];
  std::__shared_weak_count *v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  unsigned __int8 v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (!a1)
    return 2;
  v4 = 3;
  if (a2 && a3)
  {
    sub_21090E2F0(v26, a2, 1, 0);
    sub_2108C8634((uint64_t)v26, (uint64_t)v22);
    v26[0] = &off_24CA7D7F8;
    v8 = v27;
    if (!v27)
      goto LABEL_8;
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      if (v24)
      {
LABEL_9:
        sub_2108CE49C((uint64_t **)(a1 + 8), (uint64_t)v22, *(_QWORD **)(a3 + 8), (uint64_t)v26);
        if (!v31)
        {
          if ((LODWORD(v26[0]) - 1) >= 4)
          {
            v4 = 6;
            if (!v24)
              return v4;
          }
          else
          {
            v4 = *(unsigned int *)&asc_210A0D1F0[4 * LODWORD(v26[0]) - 4];
            if (!v24)
              return v4;
          }
          goto LABEL_27;
        }
        v11 = operator new(0x20uLL, MEMORY[0x24BEDB6B8]);
        if (v11)
        {
          v12 = v11;
          v13 = operator new(0x48uLL);
          v13[1] = 0;
          v13[2] = 0;
          *v13 = &off_24CA7AE40;
          *((_BYTE *)v13 + 24) = 0;
          v14 = (char *)(v13 + 3);
          *((_DWORD *)v13 + 12) = -1;
          v15 = v28;
          if (v28 != -1)
          {
            ((void (*)(char *, char *, _QWORD *))off_24CA7AEA0[v28])(&v25, v14, v26);
            *((_DWORD *)v13 + 12) = v15;
          }
          v13[7] = v29;
          *((_DWORD *)v13 + 16) = v30;
          v12[1] = v14;
          v12[2] = v13;
          *((_DWORD *)v12 + 6) = 1;
          *v12 = &off_24CA7AD30;
          v16 = v31;
          *a4 = v12;
          if (!v16 || (v17 = v28, v28 == -1))
          {
LABEL_24:
            v4 = 0;
            if (!v24)
              return v4;
LABEL_27:
            v18 = v23;
            if (v23)
            {
              v19 = (unint64_t *)&v23->__shared_owners_;
              do
                v20 = __ldaxr(v19);
              while (__stlxr(v20 - 1, v19));
              if (!v20)
              {
                ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
                std::__shared_weak_count::__release_weak(v18);
              }
            }
            return v4;
          }
        }
        else
        {
          *a4 = 0;
          v17 = v28;
          if (v28 == -1)
            goto LABEL_24;
        }
        ((void (*)(char *, _QWORD *))off_24CA7A738[v17])(&v25, v26);
        goto LABEL_24;
      }
    }
    else
    {
LABEL_8:
      if (v24)
        goto LABEL_9;
    }
    return v22[0];
  }
  return v4;
}

void sub_2108C85A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a2)
    sub_2108ABF6C(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2108C8634(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  _QWORD *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  _QWORD *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  int v67;
  std::__shared_weak_count *v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  uint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  __int16 v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  uint64_t v115;
  unint64_t *v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t *v119;
  _QWORD v120[2];
  std::__shared_weak_count *v121;
  __int128 v122;
  std::__shared_weak_count *v123;
  uint64_t v124;
  __int128 v125;
  __int16 v126;
  _QWORD v127[2];
  std::__shared_weak_count *v128;
  __int128 v129;
  uint64_t (**v130)();
  uint64_t *v131;
  std::__shared_weak_count *v132;
  _QWORD v133[2];
  std::__shared_weak_count *v134;
  uint64_t (**v135)();
  _QWORD *v136;
  std::__shared_weak_count *v137;
  uint64_t (**v138)();
  _QWORD *v139;
  std::__shared_weak_count *v140;
  uint64_t v141;
  __int128 v142;

  v3 = *(_QWORD **)(a1 + 8);
  v4 = *(std::__shared_weak_count **)(a1 + 16);
  v136 = v3;
  v137 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v135 = &off_24CA7D7B8;
  if (!v3)
    goto LABEL_97;
  v8 = *v3;
  v7 = (std::__shared_weak_count *)v3[1];
  if (!v7)
    goto LABEL_10;
  v9 = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 + 1, v9));
  do
    v11 = __ldaxr(v9);
  while (__stlxr(v11 - 1, v9));
  if (v11)
  {
LABEL_10:
    v12 = v136;
    if (!v8)
      goto LABEL_12;
    goto LABEL_11;
  }
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  v12 = v136;
  if (v8)
LABEL_11:
    sub_210912CA0((uint64_t)v12);
LABEL_12:
  if (!v12)
    goto LABEL_97;
  v13 = (std::__shared_weak_count *)v12[1];
  if (!v13)
    goto LABEL_18;
  v14 = (unint64_t *)&v13->__shared_owners_;
  do
    v15 = __ldxr(v14);
  while (__stxr(v15 + 1, v14));
  do
    v16 = __ldaxr(v14);
  while (__stlxr(v16 - 1, v14));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    v17 = v136;
    if (!v136)
      goto LABEL_97;
  }
  else
  {
LABEL_18:
    v17 = v136;
    if (!v136)
      goto LABEL_97;
  }
  v19 = *v17;
  v18 = (std::__shared_weak_count *)v17[1];
  if (v18)
  {
    v20 = (unint64_t *)&v18->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      if (v19)
        goto LABEL_25;
LABEL_97:
      v67 = 3;
      goto LABEL_98;
    }
  }
  if (!v19)
    goto LABEL_97;
LABEL_25:
  v23 = sub_21090D838((uint64_t)&v135);
  if (v23 != 875704422 && v23 != 875704438)
  {
    if (v23 == 1278226488)
    {
      v133[0] = &off_24CA7D7F8;
      v133[1] = v136;
      v134 = v137;
      if (v137)
      {
        v24 = (unint64_t *)&v137->__shared_owners_;
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      sub_2108C99B4((uint64_t)v133, &v138);
      v27 = v139;
      v26 = v140;
      if (v140)
      {
        v28 = (unint64_t *)&v140->__shared_owners_;
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
        do
          v30 = __ldxr(v28);
        while (__stxr(v30 + 1, v28));
        v31 = v141;
        v122 = v142;
        do
          v32 = __ldxr(v28);
        while (__stxr(v32 + 1, v28));
        do
          v33 = __ldaxr(v28);
        while (__stlxr(v33 - 1, v28));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
        do
          v34 = __ldaxr(v28);
        while (__stlxr(v34 - 1, v28));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      else
      {
        v31 = v141;
        v122 = v142;
      }
      *(_QWORD *)a2 = &off_24CA79B48;
      *(_QWORD *)(a2 + 8) = v27;
      *(_QWORD *)(a2 + 16) = v26;
      *(_QWORD *)(a2 + 24) = v31;
      *(_OWORD *)(a2 + 32) = v122;
      *(_WORD *)(a2 + 48) = 256;
      *(_BYTE *)(a2 + 56) = 1;
      v100 = v140;
      if (v140)
      {
        v101 = (unint64_t *)&v140->__shared_owners_;
        do
          v102 = __ldaxr(v101);
        while (__stlxr(v102 - 1, v101));
        if (!v102)
        {
          ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
          std::__shared_weak_count::__release_weak(v100);
        }
      }
      v133[0] = &off_24CA7D7F8;
      v103 = v134;
      if (v134)
      {
        v104 = (unint64_t *)&v134->__shared_owners_;
        do
          v105 = __ldaxr(v104);
        while (__stlxr(v105 - 1, v104));
        goto LABEL_190;
      }
      goto LABEL_99;
    }
    v67 = 5;
LABEL_98:
    *(_DWORD *)a2 = v67;
    *(_BYTE *)(a2 + 56) = 0;
    goto LABEL_99;
  }
  sub_21090F1D8((uint64_t)&v135, &v138);
  v35 = v139;
  v131 = v139;
  v132 = v140;
  if (v140)
  {
    v36 = (unint64_t *)&v140->__shared_owners_;
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
    v35 = v131;
  }
  v130 = &off_24CA84D00;
  if (v35)
  {
    v39 = *v35;
    v38 = (std::__shared_weak_count *)v35[1];
    if (v38)
    {
      v40 = (unint64_t *)&v38->__shared_owners_;
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
      do
        v42 = __ldaxr(v40);
      while (__stlxr(v42 - 1, v40));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    if (v39)
      sub_2109E4220((uint64_t)v131);
  }
  v138 = &off_24CA84E68;
  v43 = v140;
  if (v140)
  {
    v44 = (unint64_t *)&v140->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  if (v131)
  {
    v47 = *v131;
    v46 = (std::__shared_weak_count *)v131[1];
    if (v46)
    {
      v48 = (unint64_t *)&v46->__shared_owners_;
      do
        v49 = __ldxr(v48);
      while (__stxr(v49 + 1, v48));
      do
        v50 = __ldaxr(v48);
      while (__stlxr(v50 - 1, v48));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    if (v47)
    {
      sub_2109DF9B8((uint64_t)&v130, 0, &v122);
      if (*((_QWORD *)&v122 + 1))
      {
        v52 = **((_QWORD **)&v122 + 1);
        v51 = *(std::__shared_weak_count **)(*((_QWORD *)&v122 + 1) + 8);
        if (v51)
        {
          v53 = (unint64_t *)&v51->__shared_owners_;
          do
            v54 = __ldxr(v53);
          while (__stxr(v54 + 1, v53));
          do
            v55 = __ldaxr(v53);
          while (__stlxr(v55 - 1, v53));
          if (!v55)
          {
            ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
            std::__shared_weak_count::__release_weak(v51);
          }
        }
        if (v52)
        {
          v127[0] = &off_24CA84E68;
          v127[1] = *((_QWORD *)&v122 + 1);
          v128 = v123;
          if (v123)
          {
            v56 = (unint64_t *)&v123->__shared_owners_;
            do
              v57 = __ldxr(v56);
            while (__stxr(v57 + 1, v56));
          }
          sub_2108C9C18((uint64_t)v127, &v138);
          v59 = v139;
          v58 = v140;
          if (v140)
          {
            v60 = (unint64_t *)&v140->__shared_owners_;
            do
              v61 = __ldxr(v60);
            while (__stxr(v61 + 1, v60));
            do
              v62 = __ldxr(v60);
            while (__stxr(v62 + 1, v60));
            v63 = v141;
            v129 = v142;
            do
              v64 = __ldxr(v60);
            while (__stxr(v64 + 1, v60));
            do
              v65 = __ldaxr(v60);
            while (__stlxr(v65 - 1, v60));
            if (!v65)
            {
              ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
              std::__shared_weak_count::__release_weak(v58);
            }
            do
              v66 = __ldaxr(v60);
            while (__stlxr(v66 - 1, v60));
            if (!v66)
            {
              ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
              std::__shared_weak_count::__release_weak(v58);
            }
          }
          else
          {
            v63 = v141;
            v129 = v142;
          }
          *(_QWORD *)a2 = &off_24CA79B48;
          *(_QWORD *)(a2 + 8) = v59;
          *(_QWORD *)(a2 + 16) = v58;
          *(_QWORD *)(a2 + 24) = v63;
          *(_OWORD *)(a2 + 32) = v129;
          *(_WORD *)(a2 + 48) = 256;
          *(_BYTE *)(a2 + 56) = 1;
          v138 = &off_24CA7A958;
          v106 = v140;
          if (v140)
          {
            v107 = (unint64_t *)&v140->__shared_owners_;
            do
              v108 = __ldaxr(v107);
            while (__stlxr(v108 - 1, v107));
            if (!v108)
            {
              ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
              std::__shared_weak_count::__release_weak(v106);
            }
          }
          v127[0] = &off_24CA84E68;
          v109 = v128;
          if (v128)
          {
            v110 = (unint64_t *)&v128->__shared_owners_;
            do
              v111 = __ldaxr(v110);
            while (__stlxr(v111 - 1, v110));
            if (!v111)
            {
              ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
              std::__shared_weak_count::__release_weak(v109);
            }
          }
          *(_QWORD *)&v122 = &off_24CA84E68;
          v97 = v123;
          if (!v123)
            goto LABEL_178;
          v112 = (unint64_t *)&v123->__shared_owners_;
          do
            v113 = __ldaxr(v112);
          while (__stlxr(v113 - 1, v112));
          if (v113)
            goto LABEL_178;
LABEL_152:
          ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
          std::__shared_weak_count::__release_weak(v97);
          goto LABEL_178;
        }
      }
      *(_QWORD *)&v122 = &off_24CA84E68;
      v76 = v123;
      if (v123)
      {
        v77 = (unint64_t *)&v123->__shared_owners_;
        do
          v78 = __ldaxr(v77);
        while (__stlxr(v78 - 1, v77));
        if (!v78)
        {
          ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
          std::__shared_weak_count::__release_weak(v76);
        }
      }
    }
  }
  v120[0] = &off_24CA7D7F8;
  v120[1] = v136;
  v121 = v137;
  if (v137)
  {
    v79 = (unint64_t *)&v137->__shared_owners_;
    do
      v80 = __ldxr(v79);
    while (__stxr(v80 + 1, v79));
  }
  sub_2108F43D4((uint64_t)v120, 0, (uint64_t)&v138);
  *(_QWORD *)&v122 = &off_24CA7AAC0;
  sub_2108CAAE4((uint64_t)&v138, (uint64_t)&v122 + 8);
  v81 = v140;
  if (v140)
  {
    v82 = (unint64_t *)&v140->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  v85 = *((_QWORD *)&v122 + 1);
  v84 = v123;
  if (v123)
  {
    v86 = (unint64_t *)&v123->__shared_owners_;
    do
      v87 = __ldxr(v86);
    while (__stxr(v87 + 1, v86));
    v88 = v126;
    do
      v89 = __ldxr(v86);
    while (__stxr(v89 + 1, v86));
    v90 = v124;
    v129 = v125;
    do
      v91 = __ldxr(v86);
    while (__stxr(v91 + 1, v86));
    do
      v92 = __ldaxr(v86);
    while (__stlxr(v92 - 1, v86));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
    do
      v93 = __ldaxr(v86);
    while (__stlxr(v93 - 1, v86));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  else
  {
    v88 = v126;
    v90 = v124;
    v129 = v125;
  }
  *(_QWORD *)a2 = &off_24CA79B48;
  *(_QWORD *)(a2 + 8) = v85;
  *(_QWORD *)(a2 + 16) = v84;
  *(_QWORD *)(a2 + 24) = v90;
  *(_OWORD *)(a2 + 32) = v129;
  *(_WORD *)(a2 + 48) = v88;
  *(_BYTE *)(a2 + 56) = 1;
  v94 = v123;
  if (v123)
  {
    v95 = (unint64_t *)&v123->__shared_owners_;
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  v120[0] = &off_24CA7D7F8;
  v97 = v121;
  if (v121)
  {
    v98 = (unint64_t *)&v121->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
      goto LABEL_152;
  }
LABEL_178:
  if (v131)
  {
    v115 = *v131;
    v114 = (std::__shared_weak_count *)v131[1];
    if (v114)
    {
      v116 = (unint64_t *)&v114->__shared_owners_;
      do
        v117 = __ldxr(v116);
      while (__stxr(v117 + 1, v116));
      do
        v118 = __ldaxr(v116);
      while (__stlxr(v118 - 1, v116));
      if (!v118)
      {
        ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
        std::__shared_weak_count::__release_weak(v114);
      }
    }
    if (v115)
      sub_2109E43F4((uint64_t)v131);
  }
  v130 = &off_24CA84E68;
  v103 = v132;
  if (v132)
  {
    v119 = (unint64_t *)&v132->__shared_owners_;
    do
      v105 = __ldaxr(v119);
    while (__stlxr(v105 - 1, v119));
LABEL_190:
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
LABEL_99:
  if (!v136)
    goto LABEL_107;
  v69 = *v136;
  v68 = (std::__shared_weak_count *)v136[1];
  if (!v68)
    goto LABEL_105;
  v70 = (unint64_t *)&v68->__shared_owners_;
  do
    v71 = __ldxr(v70);
  while (__stxr(v71 + 1, v70));
  do
    v72 = __ldaxr(v70);
  while (__stlxr(v72 - 1, v70));
  if (v72)
  {
LABEL_105:
    if (!v69)
      goto LABEL_107;
    goto LABEL_106;
  }
  ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
  std::__shared_weak_count::__release_weak(v68);
  if (v69)
LABEL_106:
    sub_210912E7C((uint64_t)v136);
LABEL_107:
  v135 = &off_24CA7D7F8;
  v73 = v137;
  if (v137)
  {
    v74 = (unint64_t *)&v137->__shared_owners_;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
}

void sub_2108C9014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va2;

  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v15 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  sub_2109DEB5C((uint64_t *)va1);
  sub_2109DEB5C((uint64_t *)va);
  sub_2109DD7A8((uint64_t *)va2);
  sub_21090DE2C((_QWORD *)(v5 - 160));
  _Unwind_Resume(a1);
}

void sub_2108C9044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  sub_2109DD7A8((uint64_t *)va);
  sub_21090DE2C((_QWORD *)(v17 - 160));
  _Unwind_Resume(a1);
}

void sub_2108C9060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::__shared_weak_count *a27)
{
  uint64_t v27;
  unint64_t *p_shared_owners;
  unint64_t v30;

  if (a27)
  {
    p_shared_owners = (unint64_t *)&a27->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))a27->__on_zero_shared)(a27);
      std::__shared_weak_count::__release_weak(a27);
    }
  }
  sub_2109DEB5C((_QWORD *)(v27 - 136));
  sub_21090DE2C((_QWORD *)(v27 - 160));
  _Unwind_Resume(a1);
}

void sub_2108C90C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  uint64_t v28;

  sub_21090E6B4(&a28);
  sub_21090DE2C((_QWORD *)(v28 - 160));
  _Unwind_Resume(a1);
}

void sub_2108C90DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  sub_2108C04C4(v2 - 136);
  sub_21090E6B4((uint64_t *)va);
  sub_2109DD7A8((uint64_t *)va1);
  sub_21090DE2C((_QWORD *)(v2 - 160));
  _Unwind_Resume(a1);
}

void sub_2108C9110(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_21090DE2C((_QWORD *)(v1 - 160));
  _Unwind_Resume(a1);
}

void sub_2108C9124(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_21090DE2C((_QWORD *)(v1 - 160));
  _Unwind_Resume(a1);
}

void sub_2108C913C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)(v1 - 160) = &off_24CA7D7F8;
  v3 = *(std::__shared_weak_count **)(v1 - 144);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2108C918C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  if (*(_BYTE *)(result + 56))
  {
    v2 = *(std::__shared_weak_count **)(result + 16);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
        return v1;
      }
    }
  }
  return result;
}

uint64_t LFV2DetectAndComputeFeatures(uint64_t a1, std::__shared_weak_count_vtbl *a2, _QWORD *a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 __p;
  std::__shared_weak_count *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned __int8 v23;
  _DWORD v24[4];
  std::__shared_weak_count *v25;
  char v26;
  char v27;

  if (!a1)
    return 2;
  sub_21090E2F0(&__p, a2, 1, 0);
  sub_2108C8634((uint64_t)&__p, (uint64_t)v24);
  *(_QWORD *)&__p = &off_24CA7D7F8;
  v5 = v18;
  if (!v18)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v18->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (v7)
  {
LABEL_6:
    if (v26)
      goto LABEL_7;
    return v24[0];
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  if (!v26)
    return v24[0];
LABEL_7:
  sub_2108CE740((uint64_t ***)(a1 + 8), (uint64_t)v24, (uint64_t)&__p);
  if (!v23)
  {
    if ((__p - 1) >= 4)
    {
      v13 = 6;
      if (!v26)
        return v13;
      goto LABEL_28;
    }
    v13 = *(unsigned int *)&asc_210A0D1F0[4 * (int)__p - 4];
    if (v26)
      goto LABEL_28;
    return v13;
  }
  v8 = operator new(0x58uLL, MEMORY[0x24BEDB6B8]);
  if (v8)
  {
    v9 = v8;
    sub_2108CF2F4(v8 + 1, &__p);
    *((_DWORD *)v9 + 14) = 1;
    *v9 = &off_24CA7ACA0;
    v9[9] = 0;
    v9[10] = 0;
    v9[8] = 0;
    v10 = v23;
    *a3 = v9;
    if (!v10)
      goto LABEL_27;
    v11 = v22;
    if (v22 == -1)
      goto LABEL_20;
  }
  else
  {
    *a3 = 0;
    v11 = v22;
    if (v22 == -1)
      goto LABEL_20;
  }
  ((void (*)(char *, uint64_t *))off_24CA7A738[v11])(&v27, &v21);
LABEL_20:
  v22 = -1;
  if (v20 != -1)
    ((void (*)(char *, uint64_t *))off_24CA7A738[v20])(&v27, &v19);
  v20 = -1;
  if (!(_QWORD)__p)
  {
LABEL_27:
    v13 = 0;
    if (v26)
      goto LABEL_28;
    return v13;
  }
  *((_QWORD *)&__p + 1) = __p;
  operator delete((void *)__p);
  v13 = 0;
  if (!v26)
    return v13;
LABEL_28:
  v14 = v25;
  if (!v25)
    return v13;
  v15 = (unint64_t *)&v25->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (v16)
    return v13;
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  return v13;
}

void sub_2108C949C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108C918C(v1 - 104);
  _Unwind_Resume(a1);
}

void sub_2108C94B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_21090E6B4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2108C94C4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char v6;
  char v7;

  if (*(_BYTE *)(a1 + 120))
  {
    v2 = *(unsigned int *)(a1 + 96);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_24CA7A738[v2])(&v6, a1 + 72);
    *(_DWORD *)(a1 + 96) = -1;
    v3 = *(unsigned int *)(a1 + 48);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))off_24CA7A738[v3])(&v7, a1 + 24);
    *(_DWORD *)(a1 + 48) = -1;
    v4 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v4;
      operator delete(v4);
    }
  }
  return a1;
}

uint64_t LFV2ComputeLocalGlobalDescriptors(uint64_t a1, CVPixelBufferRef pixelBuffer, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 __p;
  std::__shared_weak_count *v19;
  _BYTE v20[24];
  int v21;
  uint64_t v22;
  int v23;
  char v24;
  _DWORD v25[4];
  std::__shared_weak_count *v26;
  char v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t **v30;

  if (!a1)
    return 2;
  v5 = 3;
  if (pixelBuffer && a3 && *(_QWORD *)(*(_QWORD *)(a3 + 8) + 8) != **(_QWORD **)(a3 + 8))
  {
    CVPixelBufferGetWidth(pixelBuffer);
    CVPixelBufferGetHeight(pixelBuffer);
    kdebug_trace();
    sub_21090E2F0(&__p, (std::__shared_weak_count_vtbl *)pixelBuffer, 1, 0);
    sub_2108C8634((uint64_t)&__p, (uint64_t)v25);
    *(_QWORD *)&__p = &off_24CA7D7F8;
    v9 = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    if (v27)
    {
      kdebug_trace();
      sub_2108CEAF0((uint64_t **)(a1 + 8), (uint64_t)v25, *(_QWORD **)(a3 + 8), (uint64_t)&__p);
      CVPixelBufferGetWidth(pixelBuffer);
      CVPixelBufferGetHeight(pixelBuffer);
      kdebug_trace();
      if (v24)
      {
        v28 = &v29;
        v29 = 0;
        if (v21 == -1)
          sub_2108B9060();
        v30 = &v28;
        ((void (*)(uint64_t ***, _BYTE *))off_24CA822B8[v21])(&v30, v20);
        v12 = operator new(0x58uLL, MEMORY[0x24BEDB6B8]);
        v13 = v12;
        if (v12)
        {
          sub_2108CF2F4(v12 + 1, &__p);
          *((_DWORD *)v13 + 14) = 1;
          *v13 = &off_24CA7ACA0;
          v13[9] = 0;
          v13[10] = 0;
          v13[8] = 0;
        }
        *a4 = v13;
        kdebug_trace();
        if (v24)
        {
          if (v23 != -1)
            ((void (*)(uint64_t ***, uint64_t *))off_24CA7A738[v23])(&v30, &v22);
          v23 = -1;
          if (v21 != -1)
            ((void (*)(uint64_t ***, _BYTE *))off_24CA7A738[v21])(&v30, v20);
          v21 = -1;
          if ((_QWORD)__p)
          {
            *((_QWORD *)&__p + 1) = __p;
            operator delete((void *)__p);
          }
        }
        v5 = 0;
      }
      else if ((__p - 1) >= 4)
      {
        v5 = 6;
      }
      else
      {
        v5 = *(unsigned int *)&asc_210A0D1F0[4 * (int)__p - 4];
      }
      if (v27)
      {
        v15 = v26;
        if (v26)
        {
          v16 = (unint64_t *)&v26->__shared_owners_;
          do
            v17 = __ldaxr(v16);
          while (__stlxr(v17 - 1, v16));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
      }
    }
    else
    {
      return v25[0];
    }
  }
  return v5;
}

void sub_2108C9874(void *a1)
{
  uint64_t v1;

  MEMORY[0x212BCC6F0](v1, MEMORY[0x24BEDB6B8]);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x2108C9744);
}

void sub_2108C98A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  sub_2108C94C4((uint64_t)&a10);
  sub_2108C918C((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_2108C98E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_21090E6B4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t LFV2HandleRelease(unsigned int *a1)
{
  unsigned int *v1;
  unsigned int v2;

  if (!a1)
    return 2;
  v1 = a1 + 6;
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (v2 == 1)
    (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 8))(a1);
  return 0;
}

uint64_t LFV2DescriptorSetPSHandle(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) = a2;
  return 0;
}

uint64_t LFV2DescriptorResetPSHandle(uint64_t a1)
{
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) = 0;
  return 0;
}

void sub_2108C9964(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v2;
    operator delete(v2);
  }
}

void sub_2108C9978(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v2;
    operator delete(v2);
  }
}

void sub_2108C998C(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v2;
    operator delete(v2);
  }
}

void sub_2108C99A0(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v2;
    operator delete(v2);
  }
}

void sub_2108C99B4(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  int v8;
  __int16 v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD v22[2];
  std::__shared_weak_count *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  __int16 v28;
  uint64_t (**v29)();
  uint64_t v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  __int16 v36;

  sub_2108F3AC0(a1, (uint64_t)&v29);
  v22[0] = &off_24CA7A158;
  v3 = v30;
  v4 = v31;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v7 = v34;
    v8 = v35;
    v9 = v36;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  else
  {
    v7 = v34;
    v8 = v35;
    v9 = v36;
  }
  v22[1] = v3;
  v23 = v4;
  v24 = v32;
  v25 = v33;
  v26 = v7;
  v27 = v8;
  v28 = v9;
  if (v4)
  {
    v11 = (unint64_t *)&v4->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v29 = &off_24CA7AA50;
  v13 = v31;
  if (v31)
  {
    v14 = (unint64_t *)&v31->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v29 = &off_24CA7AAC0;
  sub_2108CAAE4((uint64_t)v22, (uint64_t)&v30);
  *a2 = &off_24CA7A768;
  sub_2108C9F24((uint64_t)&v29, (uint64_t)(a2 + 1));
  v16 = v31;
  if (v31)
  {
    v17 = (unint64_t *)&v31->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = v23;
  if (v23)
  {
    v20 = (unint64_t *)&v23->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_2108C9B80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  sub_2108C9DAC((uint64_t)&a16);
  sub_2108C04C4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2108C9B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2108C04C4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2108C9BB0(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2108C9C18(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t (**v9)();
  uint64_t v10;
  std::__shared_weak_count *v11;
  _QWORD v12[2];
  std::__shared_weak_count *v13;

  sub_210940CA8(a1, (uint64_t)v12);
  v9 = &off_24CA7A860;
  sub_2108CC05C((uint64_t)v12, (uint64_t)&v10);
  *a2 = &off_24CA7A958;
  sub_2108CB290((uint64_t)&v9, (uint64_t)(a2 + 1));
  v9 = &off_24CA7A860;
  v3 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v12[0] = &off_24CA7AA50;
  v6 = v13;
  if (v13)
  {
    v7 = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_2108C9D08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  sub_2108CB094(&a9);
  sub_2108CB108(&a16);
  _Unwind_Resume(a1);
}

void sub_2108C9D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_2108CB108((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_2108C9D38(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24CA7A958;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_2108C9DAC(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2108C9E14(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BCC6FCLL);
}

uint64_t sub_2108C9E7C()
{
  return 1;
}

uint64_t sub_2108C9E84(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_2108C9E8C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 32);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 44);
  return result;
}

uint64_t sub_2108C9EA0(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_2108C9F24(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t (***v7)();
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t (***v21)();
  std::__shared_weak_count *v22;

  v4 = *(std::__shared_weak_count **)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 8);
  v18 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  sub_2108CA06C(a1, (uint64_t)&v17, &v21);
  v19 = *(_OWORD *)(a1 + 24);
  v20 = *(_QWORD *)(a1 + 40);
  v7 = v21;
  v8 = v22;
  if (v22)
  {
    v9 = (unint64_t *)&v22->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v11 = v22;
    *(_QWORD *)a2 = v7;
    *(_QWORD *)(a2 + 8) = v8;
    *(_OWORD *)(a2 + 16) = v19;
    *(_QWORD *)(a2 + 32) = v20;
    if (v11)
    {
      v12 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  else
  {
    *(_QWORD *)a2 = v21;
    *(_QWORD *)(a2 + 8) = 0;
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 24);
    *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 40);
  }
  v14 = v18;
  if (v18)
  {
    v15 = (unint64_t *)&v18->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_2108CA058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2108A894C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2108CA06C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t (****a3)()@<X8>)
{
  uint64_t v3;
  uint64_t (***v4)();
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::logic_error *exception;
  std::string v9;

  v3 = result;
  v4 = *(uint64_t (****)())a2;
  if (!*(_QWORD *)a2 || *v4 != off_24CA7D688)
  {
    *a3 = 0;
    a3[1] = 0;
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2108CA174(v3, &v9);
    std::logic_error::logic_error(exception, &v9);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24CA79220, MEMORY[0x24BEDAB88]);
  }
  v5 = *(_QWORD *)(a2 + 8);
  *a3 = v4;
  a3[1] = (uint64_t (***)())v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

void sub_2108CA134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      sub_2108A894C(a9);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

double sub_2108CA174@<D0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  std::string *v5;
  std::string::size_type size;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::string::size_type v21;
  std::string *p_p;
  double result;
  int v24;
  size_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  std::string *v30;
  std::string __p;
  const char *v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  _QWORD v38[2];
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2108CA45C();
  v5 = sub_2108CA718();
  v32 = "Attempting to create an ";
  v33 = 24;
  size = HIBYTE(v4->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0)
    v7 = v4;
  else
    v7 = (std::string *)v4->__r_.__value_.__r.__words[0];
  if ((size & 0x80u) != 0)
    size = v4->__r_.__value_.__l.__size_;
  v34 = (const char *)v7;
  v35 = size;
  v36 = " from an ";
  v37 = 9;
  v8 = HIBYTE(v5->__r_.__value_.__r.__words[2]);
  if ((v8 & 0x80u) == 0)
    v9 = v5;
  else
    v9 = (std::string *)v5->__r_.__value_.__r.__words[0];
  if ((v8 & 0x80u) != 0)
    v8 = v5->__r_.__value_.__l.__size_;
  v38[0] = v9;
  v38[1] = v8;
  sub_2108BBA08((uint64_t)&v32, (uint64_t)&v39, 0, 0, &__p);
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = *(std::__shared_weak_count **)(a1 + 16);
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      v10 = *(_QWORD *)(a1 + 8);
      v15 = *(std::__shared_weak_count **)(a1 + 16);
      if (v15)
      {
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
        do
          v18 = __ldaxr(v16);
        while (__stlxr(v18 - 1, v16));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
    }
    v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 80))(v10);
    v21 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    {
      v21 = __p.__r_.__value_.__l.__size_;
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    v32 = (const char *)p_p;
    v33 = v21;
    v34 = " but the other image contains an incompatible buffer type ";
    v35 = 58;
    v36 = (const char *)v19;
    v37 = v20;
    sub_2108BBA08((uint64_t)&v32, (uint64_t)v38, 0, 0, a2);
    if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
      goto LABEL_27;
    return result;
  }
  v24 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v25 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v25 = __p.__r_.__value_.__l.__size_;
  v26 = v25 + 46;
  if (v25 + 46 >= 0x7FFFFFFFFFFFFFF8)
    sub_2108A4B7C();
  if (v26 <= 0x16)
  {
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    a2->__r_.__value_.__r.__words[0] = 0;
    v27 = (char *)a2;
    *((_BYTE *)&a2->__r_.__value_.__s + 23) = v26;
LABEL_38:
    if (v24 >= 0)
      v30 = &__p;
    else
      v30 = (std::string *)__p.__r_.__value_.__r.__words[0];
    memmove(a2, v30, v25);
    goto LABEL_42;
  }
  v28 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v26 | 7) != 0x17)
    v28 = v26 | 7;
  v29 = v28 + 1;
  v27 = (char *)operator new(v28 + 1);
  a2->__r_.__value_.__l.__size_ = v26;
  a2->__r_.__value_.__r.__words[2] = v29 | 0x8000000000000000;
  a2->__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
  a2 = (std::string *)v27;
  if (v25)
    goto LABEL_38;
LABEL_42:
  strcpy(&v27[v25], " but the other image does not contain a buffer");
  result = *(double *)"contain a buffer";
  if ((v24 & 0x80) != 0)
LABEL_27:
    operator delete(__p.__r_.__value_.__l.__data_);
  return result;
}

void sub_2108CA430(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_2108CA45C()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_254A72078);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A72078))
  {
    sub_2108A5A94(v7, "ImageView");
    v2 = sub_2108BACA0();
    sub_2108CA660((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2108BBE28();
    sub_2108CA660((uint64_t)v3, (uint64_t)&__p);
    sub_2108B9228(v6, (uint64_t)v9, 2uLL);
    sub_2109ED500((char *)v7, (uint64_t *)v6, &stru_254A72060, v4, v5);
    sub_2108A89B4(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A72060, &dword_21089F000);
          __cxa_guard_release(&qword_254A72078);
          return &stru_254A72060;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_254A72060;
}

void sub_2108CA5AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_2108A89B4((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_254A72078);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_254A72078);
  _Unwind_Resume(a1);
}

void sub_2108CA660(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_2108B314C(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_2109ECDA0(&__p, "cv3d::kit::img::", 16, (const std::string::value_type *)&unk_210A01421, 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2108CA6FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *sub_2108CA718()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_254A72098);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A72098))
  {
    sub_2108A5A94(v7, "ImageView");
    v2 = sub_2108BACA0();
    sub_2108CA91C((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2108BAD98();
    sub_2108CA91C((uint64_t)v3, (uint64_t)&__p);
    sub_2108B9228(v6, (uint64_t)v9, 2uLL);
    sub_2109ED500((char *)v7, (uint64_t *)v6, &stru_254A72080, v4, v5);
    sub_2108A89B4(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A72080, &dword_21089F000);
          __cxa_guard_release(&qword_254A72098);
          return &stru_254A72080;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_254A72080;
}

void sub_2108CA868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_2108A89B4((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_254A72098);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_254A72098);
  _Unwind_Resume(a1);
}

void sub_2108CA91C(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_2108B314C(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_2109ECDA0(&__p, "cv3d::kit::img::", 16, (const std::string::value_type *)&unk_210A01421, 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2108CA9B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2108CA9D4(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BCC6FCLL);
}

uint64_t sub_2108CAA3C()
{
  return 1;
}

uint64_t sub_2108CAA44(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_2108CAA4C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 32);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 44);
  return result;
}

uint64_t sub_2108CAA60(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_2108CAAE4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  _BOOL8 v12;
  _BOOL4 v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  __int16 v17;
  std::__shared_weak_count *size;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  std::logic_error *exception;
  std::string v23;

  if (*(_DWORD *)(a1 + 48) != 1)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2108CAD60(a1);
    std::logic_error::logic_error(exception, &v23);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24CA79220, MEMORY[0x24BEDAB88]);
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v23.__r_.__value_.__r.__words[0] = v4;
      v23.__r_.__value_.__l.__size_ = (std::string::size_type)v5;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v4;
    }
  }
  else
  {
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = 0uLL;
  }
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_DWORD *)(a1 + 24);
  v12 = v11 != 0;
  v13 = v11 == 0;
  if (!*(_DWORD *)(a1 + 28))
    v13 = 1;
  if (v13)
    v14 = 0;
  else
    v14 = (unint64_t)*(unsigned int *)(a1 + 32) << 32;
  if (v13)
    v15 = 0;
  else
    v15 = *(_QWORD *)(a1 + 24);
  if (HIDWORD(v15) * HIDWORD(v14) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
  v16 = v14 | v12;
  v17 = *(_WORD *)(a1 + 52);
  size = (std::__shared_weak_count *)v23.__r_.__value_.__l.__size_;
  if (v23.__r_.__value_.__l.__size_)
  {
    v19 = (unint64_t *)(v23.__r_.__value_.__l.__size_ + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    *(_QWORD *)a2 = v23.__r_.__value_.__r.__words[0];
    *(_QWORD *)(a2 + 8) = size;
    *(_QWORD *)(a2 + 16) = v10;
    *(_QWORD *)(a2 + 24) = v15;
    *(_QWORD *)(a2 + 32) = v16;
    *(_WORD *)(a2 + 40) = v17;
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  else
  {
    *(_OWORD *)a2 = v23.__r_.__value_.__r.__words[0];
    *(_QWORD *)(a2 + 16) = v10;
    *(_QWORD *)(a2 + 24) = v15;
    *(_QWORD *)(a2 + 32) = v16;
    *(_WORD *)(a2 + 40) = v17;
  }
}

void sub_2108CAD14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_2108CAD60(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_2108CA718();
  v3 = sub_2108CADD8();
  v5 = *(_DWORD *)(a1 + 48);
  return sub_2108B8CB0("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

std::string *sub_2108CADD8()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_254A720B8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A720B8))
  {
    sub_2108A5A94(v7, "ImageView");
    v2 = sub_2108BB250();
    sub_2108CAFDC((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2108BAD98();
    sub_2108CAFDC((uint64_t)v3, (uint64_t)&__p);
    sub_2108B9228(v6, (uint64_t)v9, 2uLL);
    sub_2109ED500((char *)v7, (uint64_t *)v6, &stru_254A720A0, v4, v5);
    sub_2108A89B4(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A720A0, &dword_21089F000);
          __cxa_guard_release(&qword_254A720B8);
          return &stru_254A720A0;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_254A720A0;
}

void sub_2108CAF28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_2108A89B4((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_254A720B8);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_254A720B8);
  _Unwind_Resume(a1);
}

void sub_2108CAFDC(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_2108B314C(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_2109ECDA0(&__p, "cv3d::kit::img::", 16, (const std::string::value_type *)&unk_210A01421, 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2108CB078(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2108CB094(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24CA7A860;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

_QWORD *sub_2108CB108(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24CA7AA50;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2108CB17C(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24CA7A958;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BCC6FCLL);
}

uint64_t sub_2108CB1F0()
{
  return 1;
}

uint64_t sub_2108CB1F8(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_2108CB200@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 32);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 44);
  return result;
}

uint64_t sub_2108CB214(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_2108CB290(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t (***v7)();
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t (***v21)();
  std::__shared_weak_count *v22;

  v4 = *(std::__shared_weak_count **)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 8);
  v18 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  sub_2108CB3D8(a1, (uint64_t)&v17, &v21);
  v19 = *(_OWORD *)(a1 + 24);
  v20 = *(_QWORD *)(a1 + 40);
  v7 = v21;
  v8 = v22;
  if (v22)
  {
    v9 = (unint64_t *)&v22->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v11 = v22;
    *(_QWORD *)a2 = v7;
    *(_QWORD *)(a2 + 8) = v8;
    *(_OWORD *)(a2 + 16) = v19;
    *(_QWORD *)(a2 + 32) = v20;
    if (v11)
    {
      v12 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  else
  {
    *(_QWORD *)a2 = v21;
    *(_QWORD *)(a2 + 8) = 0;
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 24);
    *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 40);
  }
  v14 = v18;
  if (v18)
  {
    v15 = (unint64_t *)&v18->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_2108CB3C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2108A894C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2108CB3D8@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t (****a3)()@<X8>)
{
  uint64_t v3;
  uint64_t (***v4)();
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::logic_error *exception;
  std::string v9;

  v3 = result;
  v4 = *(uint64_t (****)())a2;
  if (!*(_QWORD *)a2 || *v4 != off_24CA80380)
  {
    *a3 = 0;
    a3[1] = 0;
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2108CB4E0(v3, &v9);
    std::logic_error::logic_error(exception, &v9);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24CA79220, MEMORY[0x24BEDAB88]);
  }
  v5 = *(_QWORD *)(a2 + 8);
  *a3 = v4;
  a3[1] = (uint64_t (***)())v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

void sub_2108CB4A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      sub_2108A894C(a9);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

double sub_2108CB4E0@<D0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  std::string *v5;
  std::string::size_type size;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::string::size_type v21;
  std::string *p_p;
  double result;
  int v24;
  size_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  std::string *v30;
  std::string __p;
  const char *v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  _QWORD v38[2];
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2108CB7D4();
  v5 = sub_2108CBC8C();
  v32 = "Attempting to create an ";
  v33 = 24;
  size = HIBYTE(v4->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0)
    v7 = v4;
  else
    v7 = (std::string *)v4->__r_.__value_.__r.__words[0];
  if ((size & 0x80u) != 0)
    size = v4->__r_.__value_.__l.__size_;
  v34 = (const char *)v7;
  v35 = size;
  v36 = " from an ";
  v37 = 9;
  v8 = HIBYTE(v5->__r_.__value_.__r.__words[2]);
  if ((v8 & 0x80u) == 0)
    v9 = v5;
  else
    v9 = (std::string *)v5->__r_.__value_.__r.__words[0];
  if ((v8 & 0x80u) != 0)
    v8 = v5->__r_.__value_.__l.__size_;
  v38[0] = v9;
  v38[1] = v8;
  sub_2108BBA08((uint64_t)&v32, (uint64_t)&v39, 0, 0, &__p);
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(std::__shared_weak_count **)(a1 + 16);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (v14)
    {
      if (!v10)
        goto LABEL_32;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if (!v10)
        goto LABEL_32;
    }
    v10 = *(_QWORD *)(a1 + 8);
    v15 = *(std::__shared_weak_count **)(a1 + 16);
    if (v15)
    {
      v16 = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      do
        v18 = __ldaxr(v16);
      while (__stlxr(v18 - 1, v16));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
LABEL_27:
    v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 80))(v10);
    v21 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    {
      v21 = __p.__r_.__value_.__l.__size_;
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    v32 = (const char *)p_p;
    v33 = v21;
    v34 = " but the other image contains an incompatible buffer type ";
    v35 = 58;
    v36 = (const char *)v19;
    v37 = v20;
    sub_2108BBA08((uint64_t)&v32, (uint64_t)v38, 0, 0, a2);
    if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
      goto LABEL_30;
    return result;
  }
  if (v10)
    goto LABEL_27;
LABEL_32:
  v24 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v25 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v25 = __p.__r_.__value_.__l.__size_;
  v26 = v25 + 46;
  if (v25 + 46 >= 0x7FFFFFFFFFFFFFF8)
    sub_2108A4B7C();
  if (v26 <= 0x16)
  {
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    a2->__r_.__value_.__r.__words[0] = 0;
    v27 = (char *)a2;
    *((_BYTE *)&a2->__r_.__value_.__s + 23) = v26;
LABEL_41:
    if (v24 >= 0)
      v30 = &__p;
    else
      v30 = (std::string *)__p.__r_.__value_.__r.__words[0];
    memmove(a2, v30, v25);
    goto LABEL_45;
  }
  v28 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v26 | 7) != 0x17)
    v28 = v26 | 7;
  v29 = v28 + 1;
  v27 = (char *)operator new(v28 + 1);
  a2->__r_.__value_.__l.__size_ = v26;
  a2->__r_.__value_.__r.__words[2] = v29 | 0x8000000000000000;
  a2->__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
  a2 = (std::string *)v27;
  if (v25)
    goto LABEL_41;
LABEL_45:
  strcpy(&v27[v25], " but the other image does not contain a buffer");
  result = *(double *)"contain a buffer";
  if ((v24 & 0x80) != 0)
LABEL_30:
    operator delete(__p.__r_.__value_.__l.__data_);
  return result;
}

void sub_2108CB7A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_2108CB7D4()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_254A720D8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A720D8))
  {
    sub_2108A5A94(v7, "SharedImage");
    v2 = sub_2108BACA0();
    sub_2108CB9D8((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2108CBA90();
    sub_2108CB9D8((uint64_t)v3, (uint64_t)&__p);
    sub_2108B9228(v6, (uint64_t)v9, 2uLL);
    sub_2109ED500((char *)v7, (uint64_t *)v6, &stru_254A720C0, v4, v5);
    sub_2108A89B4(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A720C0, &dword_21089F000);
          __cxa_guard_release(&qword_254A720D8);
          return &stru_254A720C0;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_254A720C0;
}

void sub_2108CB924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_2108A89B4((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_254A720D8);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_254A720D8);
  _Unwind_Resume(a1);
}

void sub_2108CB9D8(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_2108B314C(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_2109ECDA0(&__p, "cv3d::kit::img::", 16, (const std::string::value_type *)&unk_210A01421, 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2108CBA74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__int128 *sub_2108CBA90()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A720F8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A720F8))
    return &xmmword_254A720E0;
  v2 = (char *)sub_2108CBB6C();
  if (v2[23] < 0)
  {
    sub_2108B314C(&xmmword_254A720E0, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_254A720F0 = *((_QWORD *)v2 + 2);
    xmmword_254A720E0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A720E0, &dword_21089F000);
  __cxa_guard_release(&qword_254A720F8);
  return &xmmword_254A720E0;
}

void sub_2108CBB54(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A720F8);
  _Unwind_Resume(a1);
}

void *sub_2108CBB6C()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A72118);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A72118))
  {
    sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::iosimg::IOSurfaceBuffer]", qword_254A72100);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A72100, &dword_21089F000);
    __cxa_guard_release(&qword_254A72118);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A72138);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_254A72138))
    return &unk_254A72120;
  sub_2109ED44C((uint64_t)qword_254A72100, (uint64_t)&unk_254A72120);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_254A72120, &dword_21089F000);
  __cxa_guard_release(&qword_254A72138);
  return &unk_254A72120;
}

void sub_2108CBC5C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A72138);
  _Unwind_Resume(a1);
}

void sub_2108CBC74(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A72118);
  _Unwind_Resume(a1);
}

std::string *sub_2108CBC8C()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_254A72158);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A72158))
  {
    sub_2108A5A94(v7, "SharedImage");
    v2 = sub_2108BACA0();
    sub_2108CBE90((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2108BAD98();
    sub_2108CBE90((uint64_t)v3, (uint64_t)&__p);
    sub_2108B9228(v6, (uint64_t)v9, 2uLL);
    sub_2109ED500((char *)v7, (uint64_t *)v6, &stru_254A72140, v4, v5);
    sub_2108A89B4(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A72140, &dword_21089F000);
          __cxa_guard_release(&qword_254A72158);
          return &stru_254A72140;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_254A72140;
}

void sub_2108CBDDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_2108A89B4((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_254A72158);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_254A72158);
  _Unwind_Resume(a1);
}

void sub_2108CBE90(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_2108B314C(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_2109ECDA0(&__p, "cv3d::kit::img::", 16, (const std::string::value_type *)&unk_210A01421, 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2108CBF2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2108CBF48(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24CA7A860;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BCC6FCLL);
}

uint64_t sub_2108CBFBC()
{
  return 1;
}

uint64_t sub_2108CBFC4(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_2108CBFCC@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 32);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 44);
  return result;
}

uint64_t sub_2108CBFE0(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_2108CC05C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  _BOOL8 v12;
  _BOOL4 v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  __int16 v17;
  std::__shared_weak_count *size;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  std::logic_error *exception;
  std::string v23;

  if (*(_DWORD *)(a1 + 48) != 1)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2108CC2D8(a1);
    std::logic_error::logic_error(exception, &v23);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24CA79220, MEMORY[0x24BEDAB88]);
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v23.__r_.__value_.__r.__words[0] = v4;
      v23.__r_.__value_.__l.__size_ = (std::string::size_type)v5;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v4;
    }
  }
  else
  {
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = 0uLL;
  }
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_DWORD *)(a1 + 24);
  v12 = v11 != 0;
  v13 = v11 == 0;
  if (!*(_DWORD *)(a1 + 28))
    v13 = 1;
  if (v13)
    v14 = 0;
  else
    v14 = (unint64_t)*(unsigned int *)(a1 + 32) << 32;
  if (v13)
    v15 = 0;
  else
    v15 = *(_QWORD *)(a1 + 24);
  if (HIDWORD(v15) * HIDWORD(v14) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
  v16 = v14 | v12;
  v17 = *(_WORD *)(a1 + 52);
  size = (std::__shared_weak_count *)v23.__r_.__value_.__l.__size_;
  if (v23.__r_.__value_.__l.__size_)
  {
    v19 = (unint64_t *)(v23.__r_.__value_.__l.__size_ + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    *(_QWORD *)a2 = v23.__r_.__value_.__r.__words[0];
    *(_QWORD *)(a2 + 8) = size;
    *(_QWORD *)(a2 + 16) = v10;
    *(_QWORD *)(a2 + 24) = v15;
    *(_QWORD *)(a2 + 32) = v16;
    *(_WORD *)(a2 + 40) = v17;
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  else
  {
    *(_OWORD *)a2 = v23.__r_.__value_.__r.__words[0];
    *(_QWORD *)(a2 + 16) = v10;
    *(_QWORD *)(a2 + 24) = v15;
    *(_QWORD *)(a2 + 32) = v16;
    *(_WORD *)(a2 + 40) = v17;
  }
}

void sub_2108CC28C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_2108CC2D8(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_2108CBC8C();
  v3 = sub_2108CC358();
  v5 = *(_DWORD *)(a1 + 48);
  return sub_2108B8CB0("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

uint64_t sub_2108CC350(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

std::string *sub_2108CC358()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_254A72178);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A72178))
  {
    sub_2108A5A94(v7, "SharedImage");
    v2 = sub_2108BB250();
    sub_2108CC55C((uint64_t)v2, (uint64_t)v9);
    v3 = sub_2108BAD98();
    sub_2108CC55C((uint64_t)v3, (uint64_t)&__p);
    sub_2108B9228(v6, (uint64_t)v9, 2uLL);
    sub_2109ED500((char *)v7, (uint64_t *)v6, &stru_254A72160, v4, v5);
    sub_2108A89B4(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A72160, &dword_21089F000);
          __cxa_guard_release(&qword_254A72178);
          return &stru_254A72160;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_254A72160;
}

void sub_2108CC4A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_2108A89B4((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_254A72178);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_254A72178);
  _Unwind_Resume(a1);
}

void sub_2108CC55C(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_2108B314C(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_2109ECDA0(&__p, "cv3d::kit::img::", 16, (const std::string::value_type *)&unk_210A01421, 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2108CC5F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2108CC614(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24CA7AA50;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BCC6FCLL);
}

uint64_t sub_2108CC688(uint64_t a1)
{
  return a1 + 24;
}

uint64_t sub_2108CC690@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 24);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 32);
  return result;
}

uint64_t sub_2108CC6A4(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

uint64_t LFHandleCreate(_QWORD *a1, unsigned int a2)
{
  return LFHandleCreateOnDevice(a1, a2, 0);
}

uint64_t LFHandleCreateOnDevice(_QWORD *a1, unsigned int a2, int a3)
{
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  uint64_t result;
  unsigned int v9;

  if (a2 >= 4)
  {
    switch(a2)
    {
      case 'e':
        a2 = 4;
        break;
      case 'f':
        a2 = 7;
        break;
      case 'g':
        a2 = 5;
        break;
      case 'h':
        a2 = 6;
        break;
      default:
        if (a2 != 4)
        {
          sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/LearnedFeatures/include_private/LearnedFeatures/private/LearnedFeaturesConversion.h", 69, (uint64_t)&unk_210A01421, 0, (uint64_t)"Feature type not implemented.", 29, (void (*)(void **))sub_2109EDDB4);
          abort();
        }
        a2 = 8;
        break;
    }
  }
  v9 = a2;
  v5 = operator new(0x10uLL, MEMORY[0x24BEDB6B8]);
  v6 = v5;
  if (v5)
  {
    if ((a3 - 1) >= 3)
      v7 = 0;
    else
      v7 = a3;
    sub_2108CE260(v5, &v9, v7);
    result = 0;
    *a1 = v6;
  }
  else
  {
    result = 4;
    *a1 = 0;
  }
  return result;
}

void sub_2108CC83C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BCC6F0](v1, MEMORY[0x24BEDB6B8]);
  _Unwind_Resume(a1);
}

uint64_t LFDetectorModelVersion(uint64_t ***a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  if (!a1)
    return 2;
  if (!a2)
    return 3;
  if (!sub_210953C18(**a1))
    return 7;
  v4 = sub_210952A64(*a1);
  if ((v5 & 0xFF00000000) == 0)
    return 9;
  v6 = v4;
  result = 0;
  *(_QWORD *)a2 = v6;
  *(_DWORD *)(a2 + 8) = v5;
  return result;
}

uint64_t LFDescriptorModelVersion(uint64_t **a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t result;

  if (!a1)
    return 2;
  if (!a2)
    return 3;
  v3 = sub_2108CE378(a1);
  v5 = v3;
  if ((v4 & 0xFF00000000) != 0)
  {
    result = 0;
    *(_QWORD *)a2 = v5;
    *(_DWORD *)(a2 + 8) = v4;
  }
  else if ((v3 - 1) >= 4)
  {
    return 6;
  }
  else
  {
    return *(unsigned int *)&asc_210A0D1F0[4 * (int)v3 - 4];
  }
  return result;
}

uint64_t LFDetectKeypoints(uint64_t ***a1, std::__shared_weak_count_vtbl *a2, uint64_t **a3)
{
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  int v16;
  __int128 v17;
  uint64_t *v18;
  uint64_t v19;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _DWORD v24[4];
  std::__shared_weak_count *v25;
  uint64_t v26;
  char v27;
  _QWORD v28[2];
  std::__shared_weak_count *v29;

  if (!a1)
    return 2;
  v5 = sub_21090E2F0(v28, a2, 1, 0);
  sub_2108C8634((uint64_t)v5, (uint64_t)v24);
  v28[0] = &off_24CA7D7F8;
  v6 = v29;
  if (!v29)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v29->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
LABEL_6:
    if (v27)
      goto LABEL_7;
    return v24[0];
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  if (!v27)
    return v24[0];
LABEL_7:
  if (!sub_210953C18(**a1))
  {
    v19 = 7;
    if (!v27)
      return v19;
    goto LABEL_23;
  }
  if (sub_210953D4C(*a1, (uint64_t)&v26))
  {
    sub_210952D6C(*a1, (uint64_t)v24, (uint64_t)(*a1)[2], v28);
    v9 = (_BYTE *)v28[0];
    v10 = (_BYTE *)v28[1];
    v11 = (uint64_t *)operator new();
    *v11 = 0;
    v11[1] = 0;
    *a3 = v11;
    if (v9 == v10)
    {
      *v11 = 0;
      v11[1] = 0;
      if (v9)
LABEL_13:
        operator delete(v9);
    }
    else
    {
      v12 = 0xCCCCCCCCCCCCCCCDLL * ((v10 - v9) >> 2);
      is_mul_ok(v12, 0x14uLL);
      v13 = operator new[]();
      v14 = v13;
      v15 = v9;
      do
      {
        v16 = v15[4];
        v17 = *(_OWORD *)v15;
        v15 += 5;
        *(_OWORD *)v14 = v17;
        *(_DWORD *)(v14 + 16) = v16;
        v14 += 20;
      }
      while (v15 != (_DWORD *)v10);
      v18 = *a3;
      *v18 = v13;
      v18[1] = v12;
      if (v9)
        goto LABEL_13;
    }
    v19 = 0;
    if (!v27)
      return v19;
    goto LABEL_23;
  }
  v19 = 6;
  if (!v27)
    return v19;
LABEL_23:
  v21 = v25;
  if (!v25)
    return v19;
  v22 = (unint64_t *)&v25->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (v23)
    return v19;
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  return v19;
}

void sub_2108CCBA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  void *v10;

  if (v10)
  {
    operator delete(v10);
    sub_2108C918C((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  sub_2108C918C((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t LFComputeDescriptors(uint64_t **a1, std::__shared_weak_count_vtbl *a2, uint64_t *a3, uint64_t **a4)
{
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v14;
  size_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  void *__p[2];
  std::__shared_weak_count *v26;
  _DWORD v27[4];
  std::__shared_weak_count *v28;
  char v29;
  char **v30;
  __int128 v31;
  std::__shared_weak_count *v32;
  int v33;
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  if (!a1)
    return 2;
  if (!a3 || !*a3)
    return 3;
  sub_21090E2F0(&v31, a2, 1, 0);
  sub_2108C8634((uint64_t)&v31, (uint64_t)v27);
  *(_QWORD *)&v31 = &off_24CA7D7F8;
  v7 = v32;
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if (v29)
        goto LABEL_9;
      return v27[0];
    }
  }
  if (!v29)
    return v27[0];
LABEL_9:
  v11 = *a3;
  v10 = a3[1];
  if (!v11 && v10)
  {
    if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
    v31 = 0uLL;
    v32 = 0;
    goto LABEL_17;
  }
  v31 = 0uLL;
  v32 = 0;
  if (v10)
  {
LABEL_17:
    if (v10 >= 0xCCCCCCCCCCCCCCDLL)
      sub_2108CDFC4();
    v14 = 20 * v10;
    *(_QWORD *)&v31 = operator new(v14);
    *((_QWORD *)&v31 + 1) = v31;
    v32 = (std::__shared_weak_count *)(v31 + v14);
    v15 = v11 + v14;
    v30 = (char **)&v31;
    do
    {
      *(_OWORD *)__p = *(_OWORD *)v11;
      LODWORD(v26) = *(_DWORD *)(v11 + 16);
      sub_2108CDFD8(&v30, (__int128 *)__p);
      v11 += 20;
    }
    while (v11 != v15);
    v16 = v31;
    v17 = v32;
    goto LABEL_21;
  }
  v17 = 0;
  v16 = 0uLL;
LABEL_21:
  *(_OWORD *)__p = v16;
  v26 = v17;
  sub_2108CE49C(a1, (uint64_t)v27, __p, (uint64_t)&v31);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v34)
  {
    v18 = (uint64_t *)operator new();
    *v18 = 0;
    v18[1] = 0;
    *a4 = v18;
    v19 = sub_2108CCF78((uint64_t)&v31);
    v20 = *a4;
    *v20 = v19;
    v20[1] = v21;
    if (v34 && v33 != -1)
      ((void (*)(void **, __int128 *))off_24CA7ABA8[v33])(__p, &v31);
    v12 = 0;
  }
  else if ((v31 - 1) >= 4)
  {
    v12 = 6;
  }
  else
  {
    v12 = *(unsigned int *)&asc_210A0D1F0[4 * (int)v31 - 4];
  }
  if (v29)
  {
    v22 = v28;
    if (v28)
    {
      v23 = (unint64_t *)&v28->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
  }
  return v12;
}

void sub_2108CCEC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a2)
    sub_2108ABF6C(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2108CCF50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  if (__p)
  {
    a22 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_2108C918C((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_2108CCF78(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  size_t v8;
  float32x4_t *v9;
  int v10;
  unint64_t v11;
  float32x4_t v12;
  unint64_t v13;
  const void *v14;
  unsigned __int8 *v15;
  float *v16;
  unsigned __int8 *v17;
  BOOL v18;
  unint64_t v19;
  unint64_t v20;
  float32x4_t *v21;
  int8x16_t *v22;
  int8x16_t v23;
  __int32 *v24;
  float32x4_t *v25;
  unint64_t v26;
  __int32 v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  float32x4_t *v33;
  char *v34;
  _QWORD *v35;
  __int8 *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;

  LOBYTE(v37) = 1;
  v38 = (unint64_t)&v37;
  v1 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v1 == -1)
    goto LABEL_41;
  v39 = &v38;
  ((void (*)(unint64_t **, uint64_t))off_24CA822D8[v1])(&v39, a1);
  if ((_BYTE)v37 || !*(_DWORD *)(a1 + 40))
    return 0;
  v37 = &v38;
  v38 = 0;
  v4 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v4 == -1)
LABEL_41:
    sub_2108B9060();
  v39 = (unint64_t *)&v37;
  ((void (*)(unint64_t **, uint64_t))off_24CA822B8[v4])(&v39, a1);
  v5 = v38;
  v6 = *(_QWORD *)(a1 + 32);
  v7 = v6 * v38;
  v8 = 4 * v6 * v38;
  v9 = (float32x4_t *)operator new[]();
  v10 = *(_DWORD *)(a1 + 40);
  if (v10 == 2)
  {
    sub_2109839FC(a1, 0);
    memcpy(v9, v14, v8);
    goto LABEL_32;
  }
  if (v10 != 1)
  {
    sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/LearnedFeatures/LearnedFeatures/include_private/LearnedFeatures/private/LearnedFeaturesConversion.h", 278, (uint64_t)&unk_210A01421, 0, (uint64_t)"ConvertDescriptors not implemented.", 35, (void (*)(void **))sub_2109EDDB4);
    abort();
  }
  sub_2109838B8(a1, 0);
  v13 = v11;
  if (!v7 || v11)
  {
    if (!v7)
      goto LABEL_32;
  }
  else if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
  v15 = (unsigned __int8 *)(v13 + v7);
  v16 = (float *)v9;
  v17 = (unsigned __int8 *)v13;
  if (v7 < 4)
    goto LABEL_31;
  v18 = v9 < (float32x4_t *)v15 && (unint64_t)v9->u64 + 4 * v7 > v13;
  v16 = (float *)v9;
  v17 = (unsigned __int8 *)v13;
  if (v18)
    goto LABEL_31;
  if (v7 < 0x10)
  {
    v19 = 0;
    goto LABEL_26;
  }
  v19 = v7 & 0xFFFFFFFFFFFFFFF0;
  v12.i32[1] = -243;
  v20 = v7 & 0xFFFFFFFFFFFFFFF0;
  v21 = v9;
  v22 = (int8x16_t *)v13;
  do
  {
    v23 = *v22++;
    v21[2] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v23, (int8x16_t)xmmword_210A0D240));
    v21[3] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v23, (int8x16_t)xmmword_210A0D230));
    *v21 = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v23, (int8x16_t)xmmword_210A0D260));
    v21[1] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v23, (int8x16_t)xmmword_210A0D250));
    v21 += 4;
    v20 -= 16;
  }
  while (v20);
  if (v7 != v19)
  {
    if ((v7 & 0xC) == 0)
    {
      v17 = (unsigned __int8 *)(v13 + v19);
      v16 = &v9->f32[v19];
      goto LABEL_31;
    }
LABEL_26:
    v16 = &v9->f32[v7 & 0xFFFFFFFFFFFFFFFCLL];
    v17 = (unsigned __int8 *)(v13 + (v7 & 0xFFFFFFFFFFFFFFFCLL));
    v24 = (__int32 *)(v13 + v19);
    v25 = (float32x4_t *)((char *)v9 + 4 * v19);
    v26 = v19 - (v7 & 0xFFFFFFFFFFFFFFFCLL);
    do
    {
      v27 = *v24++;
      v12.i32[0] = v27;
      v12 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v12.f32)));
      *v25++ = v12;
      v26 += 4;
    }
    while (v26);
    if (v7 == (v7 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_32;
    do
    {
LABEL_31:
      v28 = *v17++;
      *v16++ = (float)v28;
    }
    while (v17 != v15);
  }
LABEL_32:
  result = operator new[]();
  if (!v5)
    return result;
  v29 = 4 * v6;
  if (v5 == 1)
  {
    v30 = 0;
LABEL_38:
    v34 = (char *)(v5 - v30);
    v35 = (_QWORD *)(result + 16 * v30 + 8);
    v36 = &v9->i8[4 * v30 * v6];
    do
    {
      *(v35 - 1) = v36;
      *v35 = v6;
      v35 += 2;
      v36 += v29;
      --v34;
    }
    while (v34);
    return result;
  }
  v30 = v5 & 0xFFFFFFFFFFFFFFFELL;
  v31 = (_QWORD *)(result + 16);
  v32 = v5 & 0xFFFFFFFFFFFFFFFELL;
  v33 = v9;
  do
  {
    *(v31 - 2) = v33;
    *(v31 - 1) = v6;
    *v31 = (char *)v33 + v29;
    v31[1] = v6;
    v31 += 4;
    v33 = (float32x4_t *)((char *)v33 + 8 * v6);
    v32 -= 2;
  }
  while (v32);
  if (v5 != v30)
    goto LABEL_38;
  return result;
}

uint64_t sub_2108CD2D0(uint64_t a1)
{
  uint64_t v2;
  char v4;

  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_24CA7ABA8[v2])(&v4, a1);
    *(_DWORD *)(a1 + 24) = -1;
  }
  return a1;
}

uint64_t LFDetectAndComputeFeatures(uint64_t ***a1, std::__shared_weak_count_vtbl *a2, _QWORD *a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  uint64_t v10;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _OWORD v15[3];
  void *__p[2];
  std::__shared_weak_count *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  char v22;
  _DWORD v23[4];
  std::__shared_weak_count *v24;
  char v25;

  if (!a1)
    return 2;
  sub_21090E2F0(__p, a2, 1, 0);
  sub_2108C8634((uint64_t)__p, (uint64_t)v23);
  __p[0] = &off_24CA7D7F8;
  v5 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v25)
        goto LABEL_7;
      return v23[0];
    }
  }
  if (!v25)
    return v23[0];
LABEL_7:
  sub_2108CE740(a1, (uint64_t)v23, (uint64_t)__p);
  if (v22)
  {
    v8 = (_OWORD *)operator new();
    v8[1] = 0u;
    v8[2] = 0u;
    *v8 = 0u;
    *a3 = v8;
    sub_2108CD5D4((uint64_t)v15, (__int128 **)__p);
    v9 = (_OWORD *)*a3;
    *v9 = v15[0];
    v9[1] = v15[1];
    v9[2] = v15[2];
    if (!v22)
      goto LABEL_17;
    if (v21 != -1)
      ((void (*)(_OWORD *, uint64_t *))off_24CA7ABA8[v21])(v15, &v20);
    v21 = -1;
    if (v19 != -1)
      ((void (*)(_OWORD *, uint64_t *))off_24CA7ABA8[v19])(v15, &v18);
    v19 = -1;
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
      v10 = 0;
      if (!v25)
        return v10;
    }
    else
    {
LABEL_17:
      v10 = 0;
      if (!v25)
        return v10;
    }
  }
  else if ((LODWORD(__p[0]) - 1) >= 4)
  {
    v10 = 6;
    if (!v25)
      return v10;
  }
  else
  {
    v10 = *(unsigned int *)&asc_210A0D1F0[4 * LODWORD(__p[0]) - 4];
    if (!v25)
      return v10;
  }
  v12 = v24;
  if (!v24)
    return v10;
  v13 = (unint64_t *)&v24->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (v14)
    return v10;
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  return v10;
}

void sub_2108CD58C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  sub_2108C94C4((uint64_t)va);
  sub_2108C918C(v7 - 96);
  _Unwind_Resume(a1);
}

void sub_2108CD5AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108C918C(v1 - 96);
  _Unwind_Resume(a1);
}

void sub_2108CD5C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_21090E6B4((uint64_t *)va);
  _Unwind_Resume(a1);
}

unint64_t sub_2108CD5D4(uint64_t a1, __int128 **a2)
{
  __int128 *v4;
  uint64_t v5;
  __int128 *v6;
  __int128 *v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  __int128 *v16;
  float32x4_t *v17;
  int v18;
  unint64_t v19;
  float32x4_t v20;
  unsigned __int8 *v21;
  float *v22;
  unsigned __int8 *v23;
  unint64_t v24;
  const void *v25;
  unint64_t v26;
  float32x4_t *v27;
  int8x16_t *v28;
  int8x16_t v29;
  __int32 *v30;
  float32x4_t *v31;
  unint64_t v32;
  __int32 v33;
  unsigned int v34;
  char *v35;
  char v36;
  char **v37;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v4 = a2[1];
  if (*a2 != v4)
  {
    is_mul_ok(0xCCCCCCCCCCCCCCCDLL * (((char *)v4 - (char *)*a2) >> 2), 0x14uLL);
    v5 = operator new[]();
    v7 = *a2;
    v6 = a2[1];
    v8 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v6 - (char *)*a2) >> 2);
    if (v6 != *a2)
    {
      v9 = v5;
      do
      {
        v10 = *((_DWORD *)v7 + 4);
        v11 = *v7;
        v7 = (__int128 *)((char *)v7 + 20);
        *(_OWORD *)v9 = v11;
        *(_DWORD *)(v9 + 16) = v10;
        v9 += 20;
      }
      while (v7 != v6);
    }
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v8;
  }
  v36 = 1;
  v35 = &v36;
  v12 = *((unsigned int *)a2 + 12);
  if ((_DWORD)v12 == -1)
    goto LABEL_31;
  v37 = &v35;
  ((void (*)(char ***, __int128 **))off_24CA822D8[v12])(&v37, a2 + 3);
  if (!v36)
  {
    *(_QWORD *)(a1 + 16) = sub_2108CCF78((uint64_t)(a2 + 3));
    *(_QWORD *)(a1 + 24) = v13;
  }
  v36 = 1;
  v35 = &v36;
  v14 = *((unsigned int *)a2 + 24);
  if ((_DWORD)v14 == -1)
LABEL_31:
    sub_2108B9060();
  v37 = &v35;
  result = ((uint64_t (*)(char ***, __int128 **))off_24CA822D8[v14])(&v37, a2 + 9);
  if (!v36)
  {
    v16 = a2[13];
    result = operator new[]();
    v17 = (float32x4_t *)result;
    v18 = *((_DWORD *)a2 + 28);
    if (v18 == 2)
    {
      sub_2109839FC((uint64_t)(a2 + 9), 0);
      result = (unint64_t)memcpy(v17, v25, 4 * (_QWORD)a2[13]);
LABEL_30:
      *(_QWORD *)(a1 + 32) = v17;
      *(_QWORD *)(a1 + 40) = v16;
      return result;
    }
    if (v18 != 1)
      goto LABEL_30;
    result = sub_2109838B8((uint64_t)(a2 + 9), 0);
    if (!result)
      goto LABEL_30;
    v21 = (unsigned __int8 *)(v19 + result);
    v22 = (float *)v17;
    v23 = (unsigned __int8 *)v19;
    if (result >= 4)
    {
      if (v17 >= (float32x4_t *)v21
        || (v22 = (float *)v17, v23 = (unsigned __int8 *)v19, (unint64_t)v17->u64 + 4 * result <= v19))
      {
        if (result < 0x10)
        {
          v24 = 0;
          goto LABEL_24;
        }
        v24 = result & 0xFFFFFFFFFFFFFFF0;
        v20.i32[1] = -243;
        v26 = result & 0xFFFFFFFFFFFFFFF0;
        v27 = v17;
        v28 = (int8x16_t *)v19;
        do
        {
          v29 = *v28++;
          v27[2] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v29, (int8x16_t)xmmword_210A0D240));
          v27[3] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v29, (int8x16_t)xmmword_210A0D230));
          *v27 = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v29, (int8x16_t)xmmword_210A0D260));
          v27[1] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v29, (int8x16_t)xmmword_210A0D250));
          v27 += 4;
          v26 -= 16;
        }
        while (v26);
        if (result == v24)
          goto LABEL_30;
        if ((result & 0xC) != 0)
        {
LABEL_24:
          v22 = &v17->f32[result & 0xFFFFFFFFFFFFFFFCLL];
          v23 = (unsigned __int8 *)(v19 + (result & 0xFFFFFFFFFFFFFFFCLL));
          v30 = (__int32 *)(v19 + v24);
          v31 = (float32x4_t *)((char *)v17 + 4 * v24);
          v32 = v24 - (result & 0xFFFFFFFFFFFFFFFCLL);
          do
          {
            v33 = *v30++;
            v20.i32[0] = v33;
            v20 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v20.f32)));
            *v31++ = v20;
            v32 += 4;
          }
          while (v32);
          if (result == (result & 0xFFFFFFFFFFFFFFFCLL))
            goto LABEL_30;
          goto LABEL_29;
        }
        v23 = (unsigned __int8 *)(v19 + v24);
        v22 = &v17->f32[v24];
      }
    }
    do
    {
LABEL_29:
      v34 = *v23++;
      *v22++ = (float)v34;
    }
    while (v23 != v21);
    goto LABEL_30;
  }
  return result;
}

uint64_t LFComputeLocalGlobalDescriptors(uint64_t **a1, CVPixelBufferRef pixelBuffer, uint64_t *a3, _QWORD *a4)
{
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v15;
  size_t v16;
  _OWORD *v17;
  _OWORD *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  __int128 v22;
  void *__p[2];
  __int128 v24;
  __int128 v25;
  void *v26[2];
  std::__shared_weak_count *v27;
  _BYTE v28[24];
  int v29;
  uint64_t v30;
  int v31;
  char v32;
  _DWORD v33[4];
  std::__shared_weak_count *v34;
  char v35;
  char ***v36;
  char **v37;

  if (!a1)
    return 2;
  if (!a3 || !*a3)
    return 3;
  CVPixelBufferGetWidth(pixelBuffer);
  CVPixelBufferGetHeight(pixelBuffer);
  kdebug_trace();
  sub_21090E2F0(v26, (std::__shared_weak_count_vtbl *)pixelBuffer, 1, 0);
  sub_2108C8634((uint64_t)v26, (uint64_t)v33);
  v26[0] = &off_24CA7D7F8;
  v8 = v27;
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      if (v35)
        goto LABEL_9;
      return v33[0];
    }
  }
  if (!v35)
    return v33[0];
LABEL_9:
  v12 = *a3;
  v11 = a3[1];
  if (!v12 && v11)
  {
    if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A01421, 0, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
    v26[0] = 0;
    v26[1] = 0;
    v27 = 0;
    goto LABEL_17;
  }
  v26[0] = 0;
  v26[1] = 0;
  v27 = 0;
  if (v11)
  {
LABEL_17:
    if (v11 >= 0xCCCCCCCCCCCCCCDLL)
      sub_2108CDFC4();
    v15 = 20 * v11;
    v26[0] = operator new(v15);
    v26[1] = v26[0];
    v27 = (std::__shared_weak_count *)((char *)v26[0] + v15);
    v16 = v12 + v15;
    v37 = (char **)v26;
    do
    {
      *(_OWORD *)__p = *(_OWORD *)v12;
      LODWORD(v24) = *(_DWORD *)(v12 + 16);
      sub_2108CDFD8(&v37, (__int128 *)__p);
      v12 += 20;
    }
    while (v12 != v16);
    v22 = *(_OWORD *)v26;
    v11 = (unint64_t)v27;
    goto LABEL_21;
  }
  v22 = 0u;
LABEL_21:
  kdebug_trace();
  *(_OWORD *)__p = v22;
  *(_QWORD *)&v24 = v11;
  sub_2108CEAF0(a1, (uint64_t)v33, __p, (uint64_t)v26);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  CVPixelBufferGetWidth(pixelBuffer);
  CVPixelBufferGetHeight(pixelBuffer);
  kdebug_trace();
  if (v32)
  {
    v17 = (_OWORD *)operator new();
    v17[1] = 0u;
    v17[2] = 0u;
    *v17 = 0u;
    *a4 = v17;
    sub_2108CD5D4((uint64_t)__p, (__int128 **)v26);
    v18 = (_OWORD *)*a4;
    *v18 = *(_OWORD *)__p;
    v18[1] = v24;
    v18[2] = v25;
    v36 = &v37;
    v37 = 0;
    if (v29 == -1)
      sub_2108B9060();
    __p[0] = &v36;
    ((void (*)(void **, _BYTE *))off_24CA822B8[v29])(__p, v28);
    kdebug_trace();
    if (v32)
    {
      if (v31 != -1)
        ((void (*)(void **, uint64_t *))off_24CA7ABA8[v31])(__p, &v30);
      v31 = -1;
      if (v29 != -1)
        ((void (*)(void **, _BYTE *))off_24CA7ABA8[v29])(__p, v28);
      v29 = -1;
      if (v26[0])
      {
        v26[1] = v26[0];
        operator delete(v26[0]);
      }
    }
    v13 = 0;
  }
  else if ((LODWORD(v26[0]) - 1) >= 4)
  {
    v13 = 6;
  }
  else
  {
    v13 = *(unsigned int *)&asc_210A0D1F0[4 * LODWORD(v26[0]) - 4];
  }
  if (v35)
  {
    v19 = v34;
    if (v34)
    {
      v20 = (unint64_t *)&v34->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
  return v13;
}

void sub_2108CDCD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v17;

  sub_2108C94C4((uint64_t)&a17);
  sub_2108C918C(v17 - 128);
  _Unwind_Resume(a1);
}

void sub_2108CDD40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_21090E6B4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2108CDD58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  uint64_t v18;

  if (__p)
    operator delete(__p);
  sub_2108C918C(v18 - 128);
  _Unwind_Resume(a1);
}

_QWORD *LFKeypointsRelease(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;

  if (result)
  {
    v1 = result;
    v2 = *result;
    if (v2)
    {
      MEMORY[0x212BCC6D8](v2, 0x1000C80A86A77D5);
      *v1 = 0;
      v1[1] = 0;
    }
    JUMPOUT(0x212BCC6FCLL);
  }
  return result;
}

_QWORD *LFDescriptorsRelease(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;

  if (result)
  {
    v1 = result;
    v2 = (_QWORD *)*result;
    if (v2)
    {
      if (!*v2 || (MEMORY[0x212BCC6D8](*v2, 0x1000C8052888210), *v1))
        MEMORY[0x212BCC6D8]();
      *v1 = 0;
      v1[1] = 0;
    }
    JUMPOUT(0x212BCC6FCLL);
  }
  return result;
}

_QWORD *LFFeaturesRelease(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  if (result)
  {
    v1 = result;
    v2 = *result;
    if (v2)
    {
      MEMORY[0x212BCC6D8](v2, 0x1000C80A86A77D5);
      *v1 = 0;
      v1[1] = 0;
    }
    v4 = v1 + 2;
    v3 = (_QWORD *)v1[2];
    if (v3)
    {
      if (!*v3 || (MEMORY[0x212BCC6D8](*v3, 0x1000C8052888210), *v4))
        MEMORY[0x212BCC6D8]();
      *v4 = 0;
      v1[3] = 0;
    }
    v5 = v1[4];
    if (v5)
      MEMORY[0x212BCC6D8](v5, 0x1000C8052888210);
    v1[4] = 0;
    v1[5] = 0;
    JUMPOUT(0x212BCC6FCLL);
  }
  return result;
}

uint64_t LFHandleRelease(uint64_t *a1)
{
  uint64_t v2;

  if (!a1)
    return 2;
  v2 = *a1;
  *a1 = 0;
  if (v2)
    ((void (*)(void))a1[1])();
  MEMORY[0x212BCC6FC](a1, 0xA0C40AFF93C70);
  return 0;
}

uint64_t LFDetectorSetPSHandle(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)a1 + 16) = a2;
  return 0;
}

uint64_t LFDetectorResetPSHandle(uint64_t a1)
{
  *(_QWORD *)(*(_QWORD *)a1 + 16) = 0;
  return 0;
}

uint64_t LFDescriptorSetPSHandle(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)a1 + 24) = a2;
  return 0;
}

uint64_t LFDescriptorResetPSHandle(uint64_t a1)
{
  *(_QWORD *)(*(_QWORD *)a1 + 24) = 0;
  return 0;
}

void sub_2108CDFC4()
{
  sub_2108A4B90("vector");
}

char ***sub_2108CDFD8(char ***a1, __int128 *a2)
{
  char **v4;
  unint64_t v5;
  char *v6;
  __int128 v7;
  char *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;

  v4 = *a1;
  v6 = (*a1)[1];
  v5 = (unint64_t)(*a1)[2];
  if ((unint64_t)v6 >= v5)
  {
    v9 = *v4;
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((v6 - *v4) >> 2);
    v11 = v10 + 1;
    if (v10 + 1 > 0xCCCCCCCCCCCCCCCLL)
      sub_2108CDFC4();
    v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - (_QWORD)v9) >> 2);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x666666666666666)
      v13 = 0xCCCCCCCCCCCCCCCLL;
    else
      v13 = v11;
    if (v13)
    {
      if (v13 > 0xCCCCCCCCCCCCCCCLL)
        sub_2108B2B1C();
      v14 = (char *)operator new(20 * v13);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[20 * v10];
    *(_OWORD *)v15 = *a2;
    *((_DWORD *)v15 + 4) = *((_DWORD *)a2 + 4);
    v8 = v15 + 20;
    if (v6 != v9)
    {
      do
      {
        v16 = *(_OWORD *)(v6 - 20);
        *((_DWORD *)v15 - 1) = *((_DWORD *)v6 - 1);
        *(_OWORD *)(v15 - 20) = v16;
        v15 -= 20;
        v6 -= 20;
      }
      while (v6 != v9);
      v6 = *v4;
    }
    *v4 = v15;
    v4[1] = v8;
    v4[2] = &v14[20 * v13];
    if (v6)
      operator delete(v6);
  }
  else
  {
    v7 = *a2;
    *((_DWORD *)v6 + 4) = *((_DWORD *)a2 + 4);
    *(_OWORD *)v6 = v7;
    v8 = v6 + 20;
  }
  v4[1] = v8;
  return a1;
}

double LearnedFeaturesGetVersion@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 0x1300000007;
  *(_QWORD *)a1 = 0x1300000007;
  *(_DWORD *)(a1 + 8) = 58;
  *(_QWORD *)(a1 + 16) = &unk_210A01421;
  return result;
}

_QWORD *sub_2108CE148(_QWORD *a1, _DWORD *a2, int a3)
{
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v12;
  int v13;

  v5 = *a2 - 1;
  if (v5 > 7)
  {
    v7 = 0;
    v8 = 0;
  }
  else
  {
    v6 = 8 * v5;
    v7 = dword_210A0D378[v5];
    v8 = *(_QWORD *)((char *)&unk_210A0D338 + v6) | *(_QWORD *)((char *)&unk_210A0D2F8 + v6);
  }
  v12 = v8;
  v13 = v7;
  v9 = (_QWORD *)operator new();
  sub_2109545B0(v9, (int *)&v12, a3);
  v10 = (_QWORD *)operator new();
  *v10 = v9;
  v10[1] = sub_21095497C;
  v10[2] = 0;
  v10[3] = 0;
  *a1 = v10;
  a1[1] = sub_2108CF29C;
  return a1;
}

void sub_2108CE228(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_21095497C(v1);
  _Unwind_Resume(a1);
}

void sub_2108CE23C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BCC6FC](v1, 0x20C40A759441BLL);
  _Unwind_Resume(a1);
}

_QWORD *sub_2108CE260(_QWORD *a1, _DWORD *a2, int a3)
{
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v12;
  int v13;

  v5 = *a2 - 1;
  if (v5 > 7)
  {
    v7 = 0;
    v8 = 0;
  }
  else
  {
    v6 = 8 * v5;
    v7 = dword_210A0D378[v5];
    v8 = *(_QWORD *)((char *)&unk_210A0D338 + v6) | *(_QWORD *)((char *)&unk_210A0D2F8 + v6);
  }
  v12 = v8;
  v13 = v7;
  v9 = (_QWORD *)operator new();
  sub_2109545B0(v9, (int *)&v12, a3);
  v10 = (_QWORD *)operator new();
  *v10 = v9;
  v10[1] = sub_21095497C;
  v10[2] = 0;
  v10[3] = 0;
  *a1 = v10;
  a1[1] = sub_2108CF29C;
  return a1;
}

void sub_2108CE340(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_21095497C(v1);
  _Unwind_Resume(a1);
}

void sub_2108CE354(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BCC6FC](v1, 0x20C40A759441BLL);
  _Unwind_Resume(a1);
}

unint64_t sub_2108CE378(uint64_t **a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = (_QWORD *)**a1;
  v4 = v2[2];
  v3 = (std::__shared_weak_count *)v2[3];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v8 = v2[4];
  v7 = (std::__shared_weak_count *)v2[5];
  if (!v7)
    goto LABEL_9;
  v9 = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 + 1, v9));
  do
    v11 = __ldaxr(v9);
  while (__stlxr(v11 - 1, v9));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (!v3)
      goto LABEL_15;
  }
  else
  {
LABEL_9:
    if (!v3)
      goto LABEL_15;
  }
  v12 = (unint64_t *)&v3->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_15:
  v14 = v4 | v8;
  if (v4 | v8)
  {
    v15 = sub_210952BDC(*a1);
    v17 = v15;
    if ((v16 & 0xFF00000000) != 0)
    {
      v14 = v15 & 0xFFFFFFFF00000000;
    }
    else
    {
      v17 = 3;
      v14 = 0;
    }
  }
  else
  {
    v17 = 2;
  }
  return v14 | v17;
}

void sub_2108CE49C(uint64_t **a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  _BYTE v22[24];
  unsigned int v23;
  uint64_t v24;
  int v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t **v28;

  v8 = (_QWORD *)**a1;
  v10 = v8[2];
  v9 = (std::__shared_weak_count *)v8[3];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v14 = v8[4];
  v13 = (std::__shared_weak_count *)v8[5];
  if (v13)
  {
    v15 = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (!v9)
    goto LABEL_31;
  v18 = (unint64_t *)&v9->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_31:
    if (v10 | v14)
      goto LABEL_15;
LABEL_24:
    *(_DWORD *)a4 = 2;
    *(_BYTE *)(a4 + 48) = 0;
    return;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!(v10 | v14))
    goto LABEL_24;
LABEL_15:
  if ((sub_210953EF0(*a1, a2 + 32) & 1) == 0)
  {
    *(_DWORD *)a4 = 0;
    *(_BYTE *)(a4 + 48) = 0;
    return;
  }
  sub_210952FE0(*a1, a2, (uint64_t)a3, (*a1)[3], (uint64_t)v22);
  v26 = &v27;
  v27 = 0;
  if (v23 == -1)
    sub_2108B9060();
  v28 = &v26;
  ((void (*)(uint64_t ***, _BYTE *))off_24CA822B8[v23])(&v28, v22);
  if (v27 != 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a3[1] - *a3) >> 2))
  {
    *(_DWORD *)a4 = 4;
    *(_BYTE *)(a4 + 48) = 0;
    v21 = v23;
    if (v23 == -1)
      return;
    goto LABEL_26;
  }
  *(_BYTE *)a4 = 0;
  *(_DWORD *)(a4 + 24) = -1;
  v20 = v23;
  if (v23 != -1)
  {
    ((void (*)(uint64_t ***, uint64_t, _BYTE *))off_24CA7AC50[v23])(&v28, a4, v22);
    *(_DWORD *)(a4 + 24) = v20;
  }
  *(_QWORD *)(a4 + 32) = v24;
  *(_DWORD *)(a4 + 40) = v25;
  *(_BYTE *)(a4 + 48) = 1;
  v21 = v23;
  if (v23 != -1)
LABEL_26:
    ((void (*)(uint64_t ***, _BYTE *))off_24CA7AC30[v21])(&v28, v22);
}

void sub_2108CE6D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2108CE6E8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2108CE6E8(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24CA7AC30[v2])(&v4, a1);
  *(_DWORD *)(a1 + 24) = -1;
  return a1;
}

void sub_2108CE740(uint64_t ***a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  _BYTE *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  void *__p;
  _BYTE *v25;
  uint64_t v26;
  _BYTE v27[24];
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t **v37;

  if ((sub_210953C18(**a1) & 1) == 0)
  {
    v23 = 1;
LABEL_31:
    *(_DWORD *)a3 = v23;
    goto LABEL_32;
  }
  v6 = **a1;
  v8 = v6[2];
  v7 = (std::__shared_weak_count *)v6[3];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v12 = v6[4];
  v11 = (std::__shared_weak_count *)v6[5];
  if (!v11)
    goto LABEL_10;
  v13 = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldxr(v13);
  while (__stxr(v14 + 1, v13));
  do
    v15 = __ldaxr(v13);
  while (__stlxr(v15 - 1, v13));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    if (!v7)
      goto LABEL_14;
  }
  else
  {
LABEL_10:
    if (!v7)
      goto LABEL_14;
  }
  v16 = (unint64_t *)&v7->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v8 | v12)
      goto LABEL_15;
    goto LABEL_30;
  }
LABEL_14:
  if (!(v8 | v12))
  {
LABEL_30:
    v23 = 2;
    goto LABEL_31;
  }
LABEL_15:
  if ((sub_210953D4C(*a1, a2 + 32) & 1) == 0 || (sub_210953EF0((uint64_t *)*a1, a2 + 32) & 1) == 0)
  {
    *(_DWORD *)a3 = 0;
LABEL_32:
    *(_BYTE *)(a3 + 120) = 0;
    return;
  }
  sub_2109532B8(*a1, a2, (uint64_t)(*a1)[2], (uint64_t)(*a1)[3], (uint64_t)&__p);
  v35 = &v36;
  v36 = 0;
  if (v28 == -1)
    sub_2108B9060();
  v37 = &v35;
  ((void (*)(uint64_t ***, _BYTE *))off_24CA822B8[v28])(&v37, v27);
  v18 = v25;
  if (v36 == 0xCCCCCCCCCCCCCCCDLL * ((v25 - (_BYTE *)__p) >> 2))
  {
    *(_QWORD *)a3 = __p;
    *(_QWORD *)(a3 + 8) = v18;
    *(_QWORD *)(a3 + 16) = v26;
    v25 = 0;
    v26 = 0;
    __p = 0;
    *(_BYTE *)(a3 + 24) = 0;
    *(_DWORD *)(a3 + 48) = -1;
    v19 = v28;
    if (v28 != -1)
    {
      ((void (*)(uint64_t ***, uint64_t, _BYTE *))off_24CA7AC50[v28])(&v37, a3 + 24, v27);
      *(_DWORD *)(a3 + 48) = v19;
    }
    v20 = v29;
    *(_BYTE *)(a3 + 72) = 0;
    *(_QWORD *)(a3 + 56) = v20;
    v21 = v32;
    *(_DWORD *)(a3 + 64) = v30;
    *(_DWORD *)(a3 + 96) = -1;
    if ((_DWORD)v21 != -1)
    {
      ((void (*)(uint64_t ***))off_24CA7AC50[v21])(&v37);
      *(_DWORD *)(a3 + 96) = v21;
    }
    *(_QWORD *)(a3 + 104) = v33;
    *(_DWORD *)(a3 + 112) = v34;
    *(_BYTE *)(a3 + 120) = 1;
    v22 = v32;
    if (v32 == -1)
      goto LABEL_36;
    goto LABEL_35;
  }
  *(_DWORD *)a3 = 4;
  *(_BYTE *)(a3 + 120) = 0;
  v22 = v32;
  if (v32 != -1)
LABEL_35:
    ((void (*)(uint64_t ***, uint64_t *))off_24CA7AC30[v22])(&v37, &v31);
LABEL_36:
  v32 = -1;
  if (v28 != -1)
    ((void (*)(uint64_t ***, _BYTE *))off_24CA7AC30[v28])(&v37, v27);
  v28 = -1;
  if (__p)
  {
    v25 = __p;
    operator delete(__p);
  }
}

void sub_2108CEA48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2108CEA5C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2108CEA5C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char v6;
  char v7;

  v2 = *(unsigned int *)(a1 + 96);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24CA7AC30[v2])(&v6, a1 + 72);
  *(_DWORD *)(a1 + 96) = -1;
  v3 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))off_24CA7AC30[v3])(&v7, a1 + 24);
  *(_DWORD *)(a1 + 48) = -1;
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_2108CEAF0(uint64_t **a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  char v25;
  char v26;
  unint64_t *v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *__p[2];
  uint64_t v34;
  _BYTE v35[24];
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  int v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t **v45;

  v8 = (_QWORD *)**a1;
  v10 = v8[2];
  v9 = (std::__shared_weak_count *)v8[3];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v14 = v8[4];
  v13 = (std::__shared_weak_count *)v8[5];
  if (!v13)
    goto LABEL_9;
  v15 = (unint64_t *)&v13->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if (!v9)
      goto LABEL_13;
  }
  else
  {
LABEL_9:
    if (!v9)
      goto LABEL_13;
  }
  v18 = (unint64_t *)&v9->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_13:
    if (v10 | v14)
      goto LABEL_14;
LABEL_35:
    *(_DWORD *)a4 = 2;
LABEL_44:
    *(_BYTE *)(a4 + 120) = 0;
    return;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!(v10 | v14))
    goto LABEL_35;
LABEL_14:
  if ((sub_210953EF0(*a1, a2 + 32) & 1) == 0)
    goto LABEL_43;
  v20 = **a1;
  v21 = *(_QWORD *)(v20 + 32);
  if (!v21)
    goto LABEL_43;
  v22 = *(std::__shared_weak_count **)(v20 + 40);
  __p[0] = *(void **)(v20 + 32);
  __p[1] = v22;
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  v25 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 24))(v21, a2 + 32);
  v26 = v25;
  if (!v22)
    goto LABEL_23;
  v27 = (unint64_t *)&v22->__shared_owners_;
  do
    v28 = __ldaxr(v27);
  while (__stlxr(v28 - 1, v27));
  if (v28)
  {
LABEL_23:
    if ((v25 & 1) != 0)
      goto LABEL_24;
    goto LABEL_43;
  }
  ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
  std::__shared_weak_count::__release_weak(v22);
  if ((v26 & 1) == 0)
  {
LABEL_43:
    *(_DWORD *)a4 = 0;
    goto LABEL_44;
  }
LABEL_24:
  sub_2109537F4((uint64_t **)*a1, a2, (uint64_t)a3, (*a1)[3], (uint64_t)__p);
  v43 = &v44;
  v44 = 0;
  if (v36 == -1)
    sub_2108B9060();
  v45 = &v43;
  ((void (*)(uint64_t ***, _BYTE *))off_24CA822B8[v36])(&v45, v35);
  if (v44 == 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a3[1] - *a3) >> 2))
  {
    *(_OWORD *)a4 = *(_OWORD *)__p;
    *(_QWORD *)(a4 + 16) = v34;
    __p[1] = 0;
    v34 = 0;
    __p[0] = 0;
    *(_BYTE *)(a4 + 24) = 0;
    *(_DWORD *)(a4 + 48) = -1;
    v29 = v36;
    if (v36 != -1)
    {
      ((void (*)(uint64_t ***, uint64_t, _BYTE *))off_24CA7AC50[v36])(&v45, a4 + 24, v35);
      *(_DWORD *)(a4 + 48) = v29;
    }
    v30 = v37;
    *(_BYTE *)(a4 + 72) = 0;
    *(_QWORD *)(a4 + 56) = v30;
    v31 = v40;
    *(_DWORD *)(a4 + 64) = v38;
    *(_DWORD *)(a4 + 96) = -1;
    if ((_DWORD)v31 != -1)
    {
      ((void (*)(uint64_t ***))off_24CA7AC50[v31])(&v45);
      *(_DWORD *)(a4 + 96) = v31;
    }
    *(_QWORD *)(a4 + 104) = v41;
    *(_DWORD *)(a4 + 112) = v42;
    *(_BYTE *)(a4 + 120) = 1;
    v32 = v40;
    if (v40 == -1)
      goto LABEL_38;
    goto LABEL_37;
  }
  *(_DWORD *)a4 = 4;
  *(_BYTE *)(a4 + 120) = 0;
  v32 = v40;
  if (v40 != -1)
LABEL_37:
    ((void (*)(uint64_t ***, uint64_t *))off_24CA7AC30[v32])(&v45, &v39);
LABEL_38:
  v40 = -1;
  if (v36 != -1)
    ((void (*)(uint64_t ***, _BYTE *))off_24CA7AC30[v36])(&v45, v35);
  v36 = -1;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_2108CEE5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2108CEA5C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2108CEE70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2108A894C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2108CEE84(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    (*(void (**)(void))(a1 + 16))();
  return a1;
}

void sub_2108CEEBC(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    (*(void (**)(void))(a1 + 16))();
  JUMPOUT(0x212BCC6FCLL);
}

__n128 sub_2108CEF04(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  result = *a3;
  *a2 = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  return result;
}

__n128 sub_2108CEF28(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  result = *a3;
  *a2 = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  return result;
}

__n128 sub_2108CEF4C(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  result = *a3;
  *a2 = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  return result;
}

__n128 sub_2108CEF70(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  result = *a3;
  *a2 = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  return result;
}

_QWORD *sub_2108CEF94(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _BYTE v13[16];
  std::locale v14;

  MEMORY[0x212BCC48C](v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, MEMORY[0x24BEDB350]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!sub_2108CF0F8(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x212BCC498](v13);
  return a1;
}

void sub_2108CF09C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  MEMORY[0x212BCC498](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x2108CF07CLL);
}

void sub_2108CF0E4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_2108CF0F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  size_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *__b[2];
  int64_t v22;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if ((uint64_t)v12 >= 1)
    {
      if (v12 >= 0x7FFFFFFFFFFFFFF8)
        sub_2108A4B7C();
      if (v12 >= 0x17)
      {
        v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17)
          v14 = v12 | 7;
        v15 = v14 + 1;
        v13 = (void **)operator new(v14 + 1);
        __b[1] = (void *)v12;
        v22 = v15 | 0x8000000000000000;
        __b[0] = v13;
      }
      else
      {
        HIBYTE(v22) = v12;
        v13 = __b;
      }
      memset(v13, __c, v12);
      *((_BYTE *)v13 + v12) = 0;
      if (v22 >= 0)
        v16 = __b;
      else
        v16 = (void **)__b[0];
      v17 = (*(uint64_t (**)(uint64_t, void **, size_t))(*(_QWORD *)v6 + 96))(v6, v16, v12);
      v18 = v17;
      if (SHIBYTE(v22) < 0)
      {
        operator delete(__b[0]);
        if (v18 != v12)
          return 0;
      }
      else if (v17 != v12)
      {
        return 0;
      }
    }
    v19 = a4 - a3;
    if (v19 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v19) == v19)
    {
      *(_QWORD *)(a5 + 24) = 0;
      return v6;
    }
    return 0;
  }
  return v6;
}

void sub_2108CF280(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2108CF29C(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;

  if (result)
  {
    v1 = result;
    v2 = *result;
    *v1 = 0;
    if (v2)
      ((void (*)(void))v1[1])();
    JUMPOUT(0x212BCC6FCLL);
  }
  return result;
}

_QWORD *sub_2108CF2F4(_QWORD *a1, __int128 *a2)
{
  char *v4;
  __int128 v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  char *v10;
  uint64_t v11;
  char v13;
  char v14;

  v4 = (char *)operator new(0x30uLL);
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &off_24CA7ADF0;
  v5 = *a2;
  *((_QWORD *)v4 + 5) = *((_QWORD *)a2 + 2);
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  a1[1] = v4;
  *(_OWORD *)(v4 + 24) = v5;
  *((_QWORD *)a2 + 2) = 0;
  *a1 = v4 + 24;
  v6 = operator new(0x48uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_24CA7AE40;
  *((_BYTE *)v6 + 24) = 0;
  v7 = (char *)(v6 + 3);
  *((_DWORD *)v6 + 12) = -1;
  v8 = *((unsigned int *)a2 + 12);
  if ((_DWORD)v8 != -1)
  {
    ((void (*)(char *, char *, char *))off_24CA7AEA0[v8])(&v13, v7, (char *)a2 + 24);
    *((_DWORD *)v6 + 12) = v8;
  }
  v6[7] = *((_QWORD *)a2 + 7);
  *((_DWORD *)v6 + 16) = *((_DWORD *)a2 + 16);
  a1[2] = v7;
  a1[3] = v6;
  v9 = operator new(0x48uLL);
  v9[1] = 0;
  v9[2] = 0;
  *v9 = &off_24CA7AE40;
  *((_BYTE *)v9 + 24) = 0;
  v10 = (char *)(v9 + 3);
  *((_DWORD *)v9 + 12) = -1;
  v11 = *((unsigned int *)a2 + 24);
  if ((_DWORD)v11 != -1)
  {
    ((void (*)(char *, char *, char *))off_24CA7AEA0[v11])(&v14, v10, (char *)a2 + 72);
    *((_DWORD *)v9 + 12) = v11;
  }
  v9[7] = *((_QWORD *)a2 + 13);
  *((_DWORD *)v9 + 16) = *((_DWORD *)a2 + 28);
  a1[4] = v10;
  a1[5] = v9;
  return a1;
}

void sub_2108CF444(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_2108A894C(v2);
  sub_2108A894C(v1);
  _Unwind_Resume(a1);
}

void sub_2108CF460(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108A894C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2108CF474(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2108CF4DC(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BCC6FCLL);
}

uint64_t sub_2108CF544(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2108CF5AC(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BCC6FCLL);
}

_QWORD *sub_2108CF614(_QWORD *a1)
{
  unsigned int *v2;
  _QWORD *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;

  *a1 = &off_24CA7ACA0;
  v3 = a1 + 8;
  v2 = (unsigned int *)a1[8];
  if (v2)
  {
    v4 = v2 + 6;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  v7 = (unsigned int *)a1[9];
  if (v7)
  {
    v8 = v7 + 6;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
  }
  v11 = (unsigned int *)a1[10];
  if (v11)
  {
    v12 = v11 + 6;
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
      (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 8))(v11);
  }
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  v15 = (std::__shared_weak_count *)a1[6];
  if (!v15)
    goto LABEL_20;
  p_shared_owners = (unint64_t *)&v15->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    v18 = (std::__shared_weak_count *)a1[4];
    if (!v18)
      goto LABEL_26;
  }
  else
  {
LABEL_20:
    v18 = (std::__shared_weak_count *)a1[4];
    if (!v18)
      goto LABEL_26;
  }
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
LABEL_26:
  v21 = (std::__shared_weak_count *)a1[2];
  if (!v21)
    return a1;
  v22 = (unint64_t *)&v21->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (v23)
    return a1;
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_2108CF798(_QWORD *a1)
{
  sub_2108CF614(a1);
  JUMPOUT(0x212BCC6FCLL);
}

void sub_2108CF7BC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA7ADF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2108CF7CC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA7ADF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BCC6FCLL);
}

void sub_2108CF7FC(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void sub_2108CF818(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA7AE40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2108CF828(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA7AE40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BCC6FCLL);
}

uint64_t sub_2108CF858(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = result;
  v2 = *(unsigned int *)(result + 48);
  if ((_DWORD)v2 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_24CA7AE80[v2])(&v3, result + 24);
  *(_DWORD *)(v1 + 48) = -1;
  return result;
}

void sub_2108CF8B0(int a1@<W0>, int a2@<W1>, unsigned int *a3@<X2>, uint64_t a4@<X8>)
{
  BOOL v6;
  unsigned int v8;
  std::__shared_weak_count *v9;
  __int128 v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  void *__p;
  __int128 v33;
  uint64_t (**v34)();
  __int128 v35;

  if (*a3)
    v6 = a3[1] == 0;
  else
    v6 = 1;
  if (v6)
  {
    if (a1 == 3)
    {
      *(_QWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 24) = 3;
    }
    else
    {
      *(_QWORD *)(a4 + 8) = 0;
      *(_QWORD *)(a4 + 16) = 0;
      *(_QWORD *)a4 = &off_24CA7D7F8;
      *(_DWORD *)(a4 + 24) = 0;
    }
  }
  else
  {
    if ((a2 - 1) > 0x25)
      v8 = 0;
    else
      v8 = dword_210A1198C[a2 - 1] | dword_210A118F4[a2 - 1];
    __p = operator new(0x70uLL);
    v33 = xmmword_210A0D5C0;
    strcpy((char *)__p, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp:51");
    sub_21090E728((uint64_t)&v34, a3, v8, (uint64_t *)&__p, 0);
    if (SHIBYTE(v33) < 0)
      operator delete(__p);
    switch(a1)
    {
      case 1:
        v10 = v35;
        if (*((_QWORD *)&v35 + 1))
        {
          v11 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
          do
            v12 = __ldxr(v11);
          while (__stxr(v12 + 1, v11));
        }
        if ((_QWORD)v10)
        {
          v14 = *(_QWORD *)v10;
          v13 = *(std::__shared_weak_count **)(v10 + 8);
          if (v13)
          {
            p_shared_owners = (unint64_t *)&v13->__shared_owners_;
            do
              v16 = __ldxr(p_shared_owners);
            while (__stxr(v16 + 1, p_shared_owners));
            do
              v17 = __ldaxr(p_shared_owners);
            while (__stlxr(v17 - 1, p_shared_owners));
            if (!v17)
            {
              ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
              std::__shared_weak_count::__release_weak(v13);
            }
          }
          if (v14)
            sub_210912CA0(v10);
        }
        *(_OWORD *)(a4 + 8) = v10;
        *(_QWORD *)a4 = &off_24CA7D7B8;
        *(_DWORD *)(a4 + 24) = 1;
        v34 = &off_24CA7D7F8;
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
        if (*((_QWORD *)&v35 + 1))
          goto LABEL_51;
        break;
      case 2:
        v18 = v35;
        if (*((_QWORD *)&v35 + 1))
        {
          v19 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
          do
            v20 = __ldxr(v19);
          while (__stxr(v20 + 1, v19));
        }
        if ((_QWORD)v18)
        {
          v22 = *(_QWORD *)v18;
          v21 = *(std::__shared_weak_count **)(v18 + 8);
          if (v21)
          {
            v23 = (unint64_t *)&v21->__shared_owners_;
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
            do
              v25 = __ldaxr(v23);
            while (__stlxr(v25 - 1, v23));
            if (!v25)
            {
              ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
              std::__shared_weak_count::__release_weak(v21);
            }
          }
          if (v22)
            sub_210912D90(v18);
        }
        *(_OWORD *)(a4 + 8) = v18;
        *(_QWORD *)a4 = &off_24CA7D7D8;
        *(_DWORD *)(a4 + 24) = 2;
        v34 = &off_24CA7D7F8;
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
        if (*((_QWORD *)&v35 + 1))
          goto LABEL_51;
        break;
      case 3:
        v26 = v35;
        if (*((_QWORD *)&v35 + 1))
        {
          v27 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 16);
          do
            v28 = __ldxr(v27);
          while (__stxr(v28 + 1, v27));
          do
            v29 = __ldxr(v27);
          while (__stxr(v29 + 1, v27));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v26 + 1));
        }
        *(_OWORD *)a4 = v26;
        *(_DWORD *)(a4 + 24) = 3;
        v34 = &off_24CA7D7F8;
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
        if (*((_QWORD *)&v35 + 1))
          goto LABEL_51;
        break;
      default:
        *(_QWORD *)a4 = &off_24CA7D7F8;
        *(_OWORD *)(a4 + 8) = v35;
        v35 = 0uLL;
        *(_DWORD *)(a4 + 24) = 0;
        v34 = &off_24CA7D7F8;
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
        if (*((_QWORD *)&v35 + 1))
        {
LABEL_51:
          v30 = (unint64_t *)&v9->__shared_owners_;
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
        break;
    }
  }
}

void sub_2108CFC10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v7;
  va_list va;

  va_start(va, a4);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  sub_21090E6B4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2108CFC78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2108CFC94(int a1, uint64_t a2, double a3)
{
  uint64_t *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t result;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (**v27)();
  uint64_t *v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  __int128 v31;

  switch(a1)
  {
    case 0:
      if (*(_DWORD *)(a2 + 24))
        goto LABEL_40;
      v3 = *(uint64_t **)(a2 + 8);
      v4 = *(std::__shared_weak_count **)(a2 + 16);
      v28 = v3;
      v29 = v4;
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v6 = __ldxr(p_shared_owners);
        while (__stxr(v6 + 1, p_shared_owners));
      }
      v27 = &off_24CA7D7B8;
      if (v3)
      {
        v8 = *v3;
        v7 = (std::__shared_weak_count *)v3[1];
        if (v7)
        {
          v9 = (unint64_t *)&v7->__shared_owners_;
          do
            v10 = __ldxr(v9);
          while (__stxr(v10 + 1, v9));
          do
            v11 = __ldaxr(v9);
          while (__stlxr(v11 - 1, v9));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
        if (v8)
          sub_210912CA0((uint64_t)v28);
      }
      sub_2108CFF78(&v30, (uint64_t)&v27);
      v12 = v31;
      if (v28)
      {
        v14 = *v28;
        v13 = (std::__shared_weak_count *)v28[1];
        if (v13)
        {
          v15 = (unint64_t *)&v13->__shared_owners_;
          do
            v16 = __ldxr(v15);
          while (__stxr(v16 + 1, v15));
          do
            v17 = __ldaxr(v15);
          while (__stlxr(v17 - 1, v15));
          if (!v17)
          {
            v24 = v12;
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
            v12 = v24;
          }
        }
        if (v14)
        {
          v25 = v12;
          sub_210912E7C((uint64_t)v28);
          v12 = v25;
        }
      }
      v27 = &off_24CA7D7F8;
      v18 = v29;
      if (!v29)
        goto LABEL_28;
      v19 = (unint64_t *)&v29->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (v20)
        goto LABEL_28;
      goto LABEL_39;
    case 1:
      if (*(_DWORD *)(a2 + 24) != 1)
        goto LABEL_40;
      goto LABEL_33;
    case 2:
      if (*(_DWORD *)(a2 + 24) != 2)
        goto LABEL_40;
LABEL_33:
      sub_2108CFF78(&v30, a2);
      result = v31;
      break;
    case 3:
      if (*(_DWORD *)(a2 + 24) != 3)
LABEL_40:
        sub_2108B9060();
      sub_2108D00D4((uint64_t *)a2, &v27);
      sub_2108CFF78(&v30, (uint64_t)&v27);
      v12 = v31;
      v27 = &off_24CA7D7F8;
      v18 = v29;
      if (!v29)
        goto LABEL_28;
      v22 = (unint64_t *)&v29->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (v23)
      {
LABEL_28:
        result = v12;
      }
      else
      {
LABEL_39:
        v26 = v12;
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
        result = v26;
      }
      break;
    default:
      result = *(_QWORD *)&a3;
      break;
  }
  return result;
}

void sub_2108CFF50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_21090E6B4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2108CFF64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_21090DE2C((uint64_t *)va);
  _Unwind_Resume(a1);
}

size_t sub_2108CFF78(uint64_t *a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  size_t result;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;

  v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v6)
        goto LABEL_9;
    }
  }
  if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h", 733, (uint64_t)"IsValid()", 9, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_20;
  }
LABEL_9:
  v10 = sub_21090DA90(a2, 0);
  v11 = sub_21090EB64(a2);
  v12 = sub_21090EC9C(a2);
  result = sub_21090EDD4(a2);
  v14 = v11;
  v15 = v11 | ((unint64_t)v12 << 32);
  if (v12)
    v16 = v14 == 0;
  else
    v16 = 1;
  if (v16)
    v17 = 0;
  else
    v17 = v15;
  *a1 = v10;
  a1[1] = v17;
  a1[2] = (result << 32) | 1;
  if (HIDWORD(v17) * (_DWORD)result == -1)
  {
    result = sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4);
    if ((_DWORD)result)
LABEL_20:
      abort();
  }
  return result;
}

void sub_2108D00D4(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;

  v4 = (std::__shared_weak_count *)a1[1];
  if (v4 && (v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    v6 = v5;
    v7 = *a1;
    *a2 = &off_24CA7D7F8;
    if (v7)
    {
      a2[1] = v7;
      a2[2] = v5;
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    else
    {
      a2[1] = 0;
      a2[2] = 0;
    }
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    a2[1] = 0;
    a2[2] = 0;
    *a2 = &off_24CA7D7F8;
  }
  v12 = (uint64_t *)a2[1];
  if (!v12)
    goto LABEL_21;
  v14 = *v12;
  v13 = (std::__shared_weak_count *)v12[1];
  if (v13)
  {
    v15 = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (!v14)
  {
LABEL_21:
    sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 218, (uint64_t)&unk_210A02D2A, 0, (uint64_t)"Attempt to access an expired PixelBuffer. Note that an image buffer  created by an ImageView does not keep the buffer alive.", 124, (void (*)(void **))sub_2109EDDB4);
    abort();
  }
}

void sub_2108D0218(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_21090E6B4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2108D022C(uint64_t a1, int a2, int a3, unsigned int *a4, char a5)
{
  uint64_t v8;
  double v9;
  BOOL v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  char v21;
  uint64_t v22[3];
  uint64_t (**v23)();
  uint64_t *v24;
  std::__shared_weak_count *v25;
  void **v26[2];

  v21 = a5;
  *(_QWORD *)a1 = off_24CA7AED0;
  *(_DWORD *)(a1 + 8) = a2;
  v8 = a1 + 16;
  sub_2108CF8B0(a2, a3, a4, a1 + 16);
  if (*a4)
    v10 = a4[1] == 0;
  else
    v10 = 1;
  if (v10)
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)a4;
  }
  else
  {
    *(_QWORD *)(a1 + 48) = sub_2108CFC94(a2, v8, v9);
    *(_QWORD *)(a1 + 56) = v11;
  }
  if ((sub_2108D0A78(a1) & 1) != 0)
    return a1;
  sub_2108D0C58(a1, &v23);
  sub_2108D0D4C(a1, v22);
  v26[0] = (void **)v22;
  v26[1] = (void **)&v21;
  sub_2108FE49C(v26);
  if (!v24)
    goto LABEL_16;
  v13 = *v24;
  v12 = (std::__shared_weak_count *)v24[1];
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
      if (!v13)
        goto LABEL_16;
      goto LABEL_15;
    }
  }
  if (v13)
LABEL_15:
    sub_210912F6C((uint64_t)v24);
LABEL_16:
  v23 = &off_24CA7D7F8;
  v17 = v25;
  if (!v25)
    return a1;
  v18 = (unint64_t *)&v25->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
    return a1;
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  return a1;
}

void sub_2108D03BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108D0464(v1);
  _Unwind_Resume(a1);
}

void sub_2108D03D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  sub_21090E154((uint64_t *)va);
  sub_2108D0400(v6);
  _Unwind_Resume(a1);
}

void sub_2108D03EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108D0400(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2108D0400(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24CA7AED0;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24CA7C080[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t sub_2108D0464(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24CA7C080[v2])(&v4, a1);
  *(_DWORD *)(a1 + 24) = -1;
  return a1;
}

uint64_t sub_2108D04BC(uint64_t a1, unsigned int *a2, __int128 *a3)
{
  uint64_t v6;
  double v7;
  BOOL v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v19;
  uint64_t v20;
  uint64_t v21[3];
  uint64_t (**v22)();
  uint64_t *v23;
  std::__shared_weak_count *v24;
  size_t v25[2];

  *(_QWORD *)a1 = off_24CA7AED0;
  *(_DWORD *)(a1 + 8) = 0;
  v6 = a1 + 16;
  sub_2108CF8B0(0, 1, a2, a1 + 16);
  if (*a2)
    v8 = a2[1] == 0;
  else
    v8 = 1;
  if (v8)
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)a2;
  }
  else
  {
    *(_QWORD *)(a1 + 48) = sub_2108CFC94(0, v6, v7);
    *(_QWORD *)(a1 + 56) = v9;
  }
  v19 = *a3;
  v20 = *((_QWORD *)a3 + 2);
  if ((sub_2108D0A78(a1) & 1) != 0)
    return a1;
  sub_2108D0C58(a1, &v22);
  sub_2108D0D4C(a1, v21);
  v25[0] = (size_t)&v19;
  v25[1] = (size_t)v21;
  sub_2108FE614(v25);
  if (!v23)
    goto LABEL_16;
  v11 = *v23;
  v10 = (std::__shared_weak_count *)v23[1];
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      if (!v11)
        goto LABEL_16;
      goto LABEL_15;
    }
  }
  if (v11)
LABEL_15:
    sub_210912F6C((uint64_t)v23);
LABEL_16:
  v22 = &off_24CA7D7F8;
  v15 = v24;
  if (!v24)
    return a1;
  v16 = (unint64_t *)&v24->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (v17)
    return a1;
  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
  std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_2108D0658(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108D0464(v1);
  _Unwind_Resume(a1);
}

void sub_2108D066C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  sub_21090E154((uint64_t *)va);
  sub_2108D0400(v8);
  _Unwind_Resume(a1);
}

void sub_2108D0688(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108D0400(v1);
  _Unwind_Resume(a1);
}

void sub_2108D06A4(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t (**v34)();
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t (**v37)();
  __int128 v38;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v5 = *(_QWORD *)(a1 + 24);
      v4 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24CA7D7F8;
      v35 = v5;
      v36 = v4;
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      break;
    case 1:
      v13 = *(_QWORD *)(a1 + 24);
      v12 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24CA7D7F8;
      v35 = v13;
      v36 = v12;
      if (v12)
      {
        v14 = (unint64_t *)&v12->__shared_owners_;
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      break;
    case 2:
      v9 = *(_QWORD *)(a1 + 24);
      v8 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24CA7D7F8;
      v35 = v9;
      v36 = v8;
      if (v8)
      {
        v10 = (unint64_t *)&v8->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      break;
    case 3:
      v16 = *(std::__shared_weak_count **)(a1 + 24);
      if (v16 && (v17 = std::__shared_weak_count::lock(v16)) != 0)
      {
        v18 = v17;
        v19 = *(_QWORD *)(a1 + 16);
        v34 = &off_24CA7D7F8;
        if (v19)
        {
          v35 = v19;
          v36 = v17;
          v20 = (unint64_t *)&v17->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
        else
        {
          v35 = 0;
          v36 = 0;
        }
        v22 = (unint64_t *)&v17->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      else
      {
        v35 = 0;
        v36 = 0;
        v34 = &off_24CA7D7F8;
      }
      break;
    default:
      sub_2108B9060();
  }
  sub_21090F1D8((uint64_t)&v34, &v37);
  v24 = v38;
  v38 = 0uLL;
  v25 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v24;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v37 = &off_24CA84E68;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
  if (*((_QWORD *)&v38 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v34 = &off_24CA7D7F8;
  v31 = v36;
  if (v36)
  {
    v32 = (unint64_t *)&v36->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_2108D08E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21090E6B4(&a9);
  _Unwind_Resume(a1);
}

void sub_2108D08F4(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v5 = *(_QWORD *)(a1 + 24);
      v4 = *(_QWORD *)(a1 + 32);
      *a2 = &off_24CA7D7F8;
      a2[1] = v5;
      a2[2] = v4;
      if (v4)
      {
        v6 = (unint64_t *)(v4 + 8);
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      break;
    case 1:
      v13 = *(_QWORD *)(a1 + 24);
      v12 = *(_QWORD *)(a1 + 32);
      *a2 = &off_24CA7D7F8;
      a2[1] = v13;
      a2[2] = v12;
      if (v12)
      {
        v14 = (unint64_t *)(v12 + 8);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      break;
    case 2:
      v9 = *(_QWORD *)(a1 + 24);
      v8 = *(_QWORD *)(a1 + 32);
      *a2 = &off_24CA7D7F8;
      a2[1] = v9;
      a2[2] = v8;
      if (v8)
      {
        v10 = (unint64_t *)(v8 + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      break;
    case 3:
      v16 = *(std::__shared_weak_count **)(a1 + 24);
      if (v16 && (v17 = std::__shared_weak_count::lock(v16)) != 0)
      {
        v18 = v17;
        v19 = *(_QWORD *)(a1 + 16);
        *a2 = &off_24CA7D7F8;
        if (v19)
        {
          a2[1] = v19;
          a2[2] = v17;
          p_shared_owners = (unint64_t *)&v17->__shared_owners_;
          do
            v21 = __ldxr(p_shared_owners);
          while (__stxr(v21 + 1, p_shared_owners));
        }
        else
        {
          a2[1] = 0;
          a2[2] = 0;
        }
        v22 = (unint64_t *)&v17->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      else
      {
        a2[1] = 0;
        a2[2] = 0;
        *a2 = &off_24CA7D7F8;
      }
      break;
    default:
      sub_2108B9060();
  }
}

uint64_t sub_2108D0A78(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        p_shared_owners = (unint64_t *)&v2->__shared_owners_;
        do
          v5 = __ldxr(p_shared_owners);
        while (__stxr(v5 + 1, p_shared_owners));
      }
      goto LABEL_28;
    case 1:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        v8 = (unint64_t *)&v2->__shared_owners_;
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      goto LABEL_28;
    case 2:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        v6 = (unint64_t *)&v2->__shared_owners_;
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      goto LABEL_28;
    case 3:
      v10 = *(std::__shared_weak_count **)(a1 + 24);
      if (!v10)
      {
        v15 = 0;
        return v15 == 0;
      }
      v11 = std::__shared_weak_count::lock(v10);
      if (!v11)
        return 1;
      v12 = v11;
      v3 = *(uint64_t **)(a1 + 16);
      if (v3)
      {
        v13 = (unint64_t *)&v11->__shared_owners_;
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
        v2 = v11;
      }
      else
      {
        v2 = 0;
      }
      v17 = (unint64_t *)&v11->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v12);
      }
LABEL_28:
      if (v3)
      {
        v15 = *v3;
        v19 = (std::__shared_weak_count *)v3[1];
        if (v19)
        {
          v20 = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
          do
            v22 = __ldaxr(v20);
          while (__stlxr(v22 - 1, v20));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
      }
      else
      {
        v15 = 0;
      }
      if (!v2)
        return v15 == 0;
      v23 = (unint64_t *)&v2->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (v24)
        return v15 == 0;
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v15 == 0;
    default:
      sub_2108B9060();
  }
}

void sub_2108D0C58(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  unsigned int v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD v8[2];
  std::__shared_weak_count *v9;

  v3 = a1 + 16;
  v4 = *(_DWORD *)(a1 + 40);
  if (v4 == 2)
  {
    sub_21090E048(a2, v3);
  }
  else if (v4 > 1)
  {
    if (v4 != 3)
      sub_2108B9060();
    sub_2108D00D4((uint64_t *)(a1 + 16), v8);
    sub_21090DF3C(a2, (uint64_t)v8);
    v8[0] = &off_24CA7D7F8;
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  else
  {
    sub_21090DF3C(a2, v3);
  }
}

void sub_2108D0D38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_21090E6B4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2108D0D4C(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t (**v30)();
  uint64_t v31;
  std::__shared_weak_count *v32;

  if (sub_2108D0A78(a1))
  {
    if (*(_DWORD *)(a1 + 52))
      v4 = *(_DWORD *)(a1 + 48) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a1 + 48);
    if (v4)
      v5 = 0;
    v6 = 0x100000000;
    if (v5 > 0x100000000)
      v6 = v5;
    *a2 = 0;
    a2[1] = v5;
    a2[2] = ((_DWORD)v5 != 0) | (unint64_t)(v6 << 32);
    if (HIDWORD(v5) * (_DWORD)v6 == -1
      && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
  }
  else
  {
    switch(*(_DWORD *)(a1 + 40))
    {
      case 0:
        v8 = *(_QWORD *)(a1 + 24);
        v7 = *(std::__shared_weak_count **)(a1 + 32);
        v30 = &off_24CA7D7F8;
        v31 = v8;
        v32 = v7;
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v10 = __ldxr(p_shared_owners);
          while (__stxr(v10 + 1, p_shared_owners));
        }
        break;
      case 1:
        v16 = *(_QWORD *)(a1 + 24);
        v15 = *(std::__shared_weak_count **)(a1 + 32);
        v30 = &off_24CA7D7F8;
        v31 = v16;
        v32 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 2:
        v12 = *(_QWORD *)(a1 + 24);
        v11 = *(std::__shared_weak_count **)(a1 + 32);
        v30 = &off_24CA7D7F8;
        v31 = v12;
        v32 = v11;
        if (v11)
        {
          v13 = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
        }
        break;
      case 3:
        v19 = *(std::__shared_weak_count **)(a1 + 24);
        if (v19 && (v20 = std::__shared_weak_count::lock(v19)) != 0)
        {
          v21 = v20;
          v22 = *(_QWORD *)(a1 + 16);
          v30 = &off_24CA7D7F8;
          if (v22)
          {
            v31 = v22;
            v32 = v20;
            v23 = (unint64_t *)&v20->__shared_owners_;
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
          }
          else
          {
            v31 = 0;
            v32 = 0;
          }
          v25 = (unint64_t *)&v20->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        else
        {
          v31 = 0;
          v32 = 0;
          v30 = &off_24CA7D7F8;
        }
        break;
      default:
        sub_2108B9060();
    }
    sub_2108CFF78(a2, (uint64_t)&v30);
    v30 = &off_24CA7D7F8;
    v27 = v32;
    if (v32)
    {
      v28 = (unint64_t *)&v32->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
  }
}

void sub_2108D0F84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_21090E6B4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2108D0F98(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[2];
  std::__shared_weak_count *v10;

  v4 = (uint64_t *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 40);
  switch(v5)
  {
    case 2:
      goto LABEL_4;
    case 1:
      sub_21090DD20(a1, (uint64_t)v4);
      break;
    case 0:
LABEL_4:
      sub_21090DC14(a1, (uint64_t)v4);
      return;
    case 3:
      sub_2108D00D4(v4, v9);
      sub_21090DC14(a1, (uint64_t)v9);
      v9[0] = &off_24CA7D7F8;
      v6 = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      break;
    default:
      sub_2108B9060();
  }
}

void sub_2108D107C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_21090E6B4((uint64_t *)va);
  _Unwind_Resume(a1);
}

double sub_2108D1090(uint64_t a1, uint64_t a2)
{
  unsigned int *v3;
  BOOL v4;
  double result;
  void *__p;
  __int128 v7;
  _BYTE v8[8];
  __int128 v9;

  v3 = (unsigned int *)(a2 + 24);
  if (*(_DWORD *)(a2 + 24))
    v4 = *(_DWORD *)(a2 + 28) == 0;
  else
    v4 = 1;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = &off_24CA7D7F8;
    *(_DWORD *)(a1 + 24) = 0;
  }
  else
  {
    __p = operator new(0x70uLL);
    v7 = xmmword_210A0D5C0;
    strcpy((char *)__p, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp:51");
    sub_21090E728((uint64_t)v8, v3, 0x32433038u, (uint64_t *)&__p, 0);
    if (SHIBYTE(v7) < 0)
      operator delete(__p);
    *(_QWORD *)a1 = &off_24CA7D7F8;
    result = *(double *)&v9;
    *(_OWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 24) = 0;
  }
  return result;
}

void sub_2108D1174(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2108D1190(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t (**v21)();
  uint64_t *v22;
  std::__shared_weak_count *v23;
  char v24[8];
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  if (*(_DWORD *)(a2 + 24))
    sub_2108B9060();
  v3 = *(uint64_t **)(a2 + 8);
  v4 = *(std::__shared_weak_count **)(a2 + 16);
  v22 = v3;
  v23 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v21 = &off_24CA7D7B8;
  if (v3)
  {
    v8 = *v3;
    v7 = (std::__shared_weak_count *)v3[1];
    if (!v7)
      goto LABEL_11;
    v9 = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    do
      v11 = __ldaxr(v9);
    while (__stlxr(v11 - 1, v9));
    if (v11)
    {
LABEL_11:
      if (!v8)
        goto LABEL_13;
      goto LABEL_12;
    }
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v8)
LABEL_12:
      sub_210912CA0((uint64_t)v22);
  }
LABEL_13:
  sub_2108D1394((uint64_t)v24, (uint64_t)&v21);
  v12 = v26;
  *(_OWORD *)a1 = v25;
  *(_OWORD *)(a1 + 16) = v12;
  *(_QWORD *)(a1 + 32) = v27;
  if (!v22)
    goto LABEL_21;
  v14 = *v22;
  v13 = (std::__shared_weak_count *)v22[1];
  if (!v13)
    goto LABEL_19;
  v15 = (unint64_t *)&v13->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (v17)
  {
LABEL_19:
    if (!v14)
      goto LABEL_21;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  if (v14)
LABEL_20:
    sub_210912E7C((uint64_t)v22);
LABEL_21:
  v21 = &off_24CA7D7F8;
  v18 = v23;
  if (v23)
  {
    v19 = (unint64_t *)&v23->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_2108D1380(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_21090DE2C((uint64_t *)va);
  _Unwind_Resume(a1);
}

size_t sub_2108D1394(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  size_t result;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  uint64_t v18;

  v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v6)
        goto LABEL_9;
    }
  }
  if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h", 733, (uint64_t)"IsValid()", 9, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_20;
  }
LABEL_9:
  v10 = sub_21090DA90(a2, 0);
  v11 = sub_21090EB64(a2);
  v12 = sub_21090EC9C(a2);
  result = sub_21090EDD4(a2);
  v14 = v11;
  v15 = v11 | ((unint64_t)v12 << 32);
  if (v12)
    v16 = v14 == 0;
  else
    v16 = 1;
  if (v16)
    v17 = 0;
  else
    v17 = v15;
  HIDWORD(v18) = v17;
  LODWORD(v18) = 2;
  *(_QWORD *)a1 = v10;
  *(_QWORD *)(a1 + 8) = v18;
  *(_DWORD *)(a1 + 16) = HIDWORD(v17);
  *(_QWORD *)(a1 + 20) = 0x200000001;
  *(_DWORD *)(a1 + 28) = result;
  *(_QWORD *)(a1 + 32) = v17;
  *(_QWORD *)(a1 + 40) = (result << 32) | 2;
  if (HIDWORD(v17) * (_DWORD)result == -1)
  {
    result = sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4);
    if ((_DWORD)result)
LABEL_20:
      abort();
  }
  return result;
}

void sub_2108D1568(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;

  v3 = (std::__shared_weak_count *)a2[1];
  if (v3 && (v5 = std::__shared_weak_count::lock(v3)) != 0)
  {
    v6 = v5;
    v7 = *a2;
    *a1 = &off_24CA7D7F8;
    if (v7)
    {
      a1[1] = v7;
      a1[2] = v5;
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    else
    {
      a1[1] = 0;
      a1[2] = 0;
    }
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    a1[1] = 0;
    a1[2] = 0;
    *a1 = &off_24CA7D7F8;
  }
  v12 = (uint64_t *)a1[1];
  if (!v12)
    goto LABEL_21;
  v14 = *v12;
  v13 = (std::__shared_weak_count *)v12[1];
  if (v13)
  {
    v15 = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (!v14)
  {
LABEL_21:
    sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 218, (uint64_t)&unk_210A02D2A, 0, (uint64_t)"Attempt to access an expired PixelBuffer. Note that an image buffer  created by an ImageView does not keep the buffer alive.", 124, (void (*)(void **))sub_2109EDDB4);
    abort();
  }
}

void sub_2108D16AC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_21090E6B4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2108D16C0(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24CA7AF60;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24CA7C080[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t sub_2108D1724(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v6;
  _OWORD *v7;
  BOOL v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _OWORD v21[3];
  _BYTE v22[48];
  uint64_t (**v23)();
  uint64_t *v24;
  std::__shared_weak_count *v25;
  size_t v26[2];

  *(_QWORD *)a1 = off_24CA7AF60;
  *(_DWORD *)(a1 + 8) = 0;
  v6 = a1 + 16;
  sub_2108D1090(a1 + 16, a2);
  v7 = (_OWORD *)(a1 + 48);
  if (*(_DWORD *)(a2 + 24))
    v8 = *(_DWORD *)(a2 + 28) == 0;
  else
    v8 = 1;
  if (v8)
  {
    v9 = *(_OWORD *)a2;
    v10 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 32);
    *v7 = v9;
    *(_OWORD *)(a1 + 64) = v10;
  }
  else
  {
    sub_2108D1190((uint64_t)v7, v6);
  }
  v11 = a3[1];
  v21[0] = *a3;
  v21[1] = v11;
  v21[2] = a3[2];
  if ((sub_2108D1CD4(a1) & 1) != 0)
    return a1;
  sub_2108D1EB4(&v23, a1);
  sub_2108D1FA8((uint64_t)v22, a1);
  v26[0] = (size_t)v21;
  v26[1] = (size_t)v22;
  sub_2108FEAD0(v26);
  if (!v24)
    goto LABEL_16;
  v13 = *v24;
  v12 = (std::__shared_weak_count *)v24[1];
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
      if (!v13)
        goto LABEL_16;
      goto LABEL_15;
    }
  }
  if (v13)
LABEL_15:
    sub_210912F6C((uint64_t)v24);
LABEL_16:
  v23 = &off_24CA7D7F8;
  v17 = v25;
  if (!v25)
    return a1;
  v18 = (unint64_t *)&v25->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
    return a1;
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  return a1;
}

void sub_2108D18B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108D0464(v1);
  _Unwind_Resume(a1);
}

void sub_2108D18C8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_21090E154((_QWORD *)(v2 - 72));
  sub_2108D16C0(v1);
  _Unwind_Resume(a1);
}

void sub_2108D18E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108D16C0(v1);
  _Unwind_Resume(a1);
}

void sub_2108D1900(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t (**v34)();
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t (**v37)();
  __int128 v38;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v5 = *(_QWORD *)(a1 + 24);
      v4 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24CA7D7F8;
      v35 = v5;
      v36 = v4;
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      break;
    case 1:
      v13 = *(_QWORD *)(a1 + 24);
      v12 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24CA7D7F8;
      v35 = v13;
      v36 = v12;
      if (v12)
      {
        v14 = (unint64_t *)&v12->__shared_owners_;
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      break;
    case 2:
      v9 = *(_QWORD *)(a1 + 24);
      v8 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24CA7D7F8;
      v35 = v9;
      v36 = v8;
      if (v8)
      {
        v10 = (unint64_t *)&v8->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      break;
    case 3:
      v16 = *(std::__shared_weak_count **)(a1 + 24);
      if (v16 && (v17 = std::__shared_weak_count::lock(v16)) != 0)
      {
        v18 = v17;
        v19 = *(_QWORD *)(a1 + 16);
        v34 = &off_24CA7D7F8;
        if (v19)
        {
          v35 = v19;
          v36 = v17;
          v20 = (unint64_t *)&v17->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
        else
        {
          v35 = 0;
          v36 = 0;
        }
        v22 = (unint64_t *)&v17->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      else
      {
        v35 = 0;
        v36 = 0;
        v34 = &off_24CA7D7F8;
      }
      break;
    default:
      sub_2108B9060();
  }
  sub_21090F1D8((uint64_t)&v34, &v37);
  v24 = v38;
  v38 = 0uLL;
  v25 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v24;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v37 = &off_24CA84E68;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
  if (*((_QWORD *)&v38 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v34 = &off_24CA7D7F8;
  v31 = v36;
  if (v36)
  {
    v32 = (unint64_t *)&v36->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_2108D1B3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21090E6B4(&a9);
  _Unwind_Resume(a1);
}

void sub_2108D1B50(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v5 = *(_QWORD *)(a1 + 24);
      v4 = *(_QWORD *)(a1 + 32);
      *a2 = &off_24CA7D7F8;
      a2[1] = v5;
      a2[2] = v4;
      if (v4)
      {
        v6 = (unint64_t *)(v4 + 8);
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      break;
    case 1:
      v13 = *(_QWORD *)(a1 + 24);
      v12 = *(_QWORD *)(a1 + 32);
      *a2 = &off_24CA7D7F8;
      a2[1] = v13;
      a2[2] = v12;
      if (v12)
      {
        v14 = (unint64_t *)(v12 + 8);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      break;
    case 2:
      v9 = *(_QWORD *)(a1 + 24);
      v8 = *(_QWORD *)(a1 + 32);
      *a2 = &off_24CA7D7F8;
      a2[1] = v9;
      a2[2] = v8;
      if (v8)
      {
        v10 = (unint64_t *)(v8 + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      break;
    case 3:
      v16 = *(std::__shared_weak_count **)(a1 + 24);
      if (v16 && (v17 = std::__shared_weak_count::lock(v16)) != 0)
      {
        v18 = v17;
        v19 = *(_QWORD *)(a1 + 16);
        *a2 = &off_24CA7D7F8;
        if (v19)
        {
          a2[1] = v19;
          a2[2] = v17;
          p_shared_owners = (unint64_t *)&v17->__shared_owners_;
          do
            v21 = __ldxr(p_shared_owners);
          while (__stxr(v21 + 1, p_shared_owners));
        }
        else
        {
          a2[1] = 0;
          a2[2] = 0;
        }
        v22 = (unint64_t *)&v17->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      else
      {
        a2[1] = 0;
        a2[2] = 0;
        *a2 = &off_24CA7D7F8;
      }
      break;
    default:
      sub_2108B9060();
  }
}

uint64_t sub_2108D1CD4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        p_shared_owners = (unint64_t *)&v2->__shared_owners_;
        do
          v5 = __ldxr(p_shared_owners);
        while (__stxr(v5 + 1, p_shared_owners));
      }
      goto LABEL_28;
    case 1:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        v8 = (unint64_t *)&v2->__shared_owners_;
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      goto LABEL_28;
    case 2:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        v6 = (unint64_t *)&v2->__shared_owners_;
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      goto LABEL_28;
    case 3:
      v10 = *(std::__shared_weak_count **)(a1 + 24);
      if (!v10)
      {
        v15 = 0;
        return v15 == 0;
      }
      v11 = std::__shared_weak_count::lock(v10);
      if (!v11)
        return 1;
      v12 = v11;
      v3 = *(uint64_t **)(a1 + 16);
      if (v3)
      {
        v13 = (unint64_t *)&v11->__shared_owners_;
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
        v2 = v11;
      }
      else
      {
        v2 = 0;
      }
      v17 = (unint64_t *)&v11->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v12);
      }
LABEL_28:
      if (v3)
      {
        v15 = *v3;
        v19 = (std::__shared_weak_count *)v3[1];
        if (v19)
        {
          v20 = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
          do
            v22 = __ldaxr(v20);
          while (__stlxr(v22 - 1, v20));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
      }
      else
      {
        v15 = 0;
      }
      if (!v2)
        return v15 == 0;
      v23 = (unint64_t *)&v2->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (v24)
        return v15 == 0;
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v15 == 0;
    default:
      sub_2108B9060();
  }
}

void sub_2108D1EB4(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  unsigned int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[2];
  std::__shared_weak_count *v10;

  v4 = (uint64_t *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 40);
  if (v5 == 2)
  {
    sub_21090E048(a1, (uint64_t)v4);
  }
  else if (v5 > 1)
  {
    if (v5 != 3)
      sub_2108B9060();
    sub_2108D1568(v9, v4);
    sub_21090DF3C(a1, (uint64_t)v9);
    v9[0] = &off_24CA7D7F8;
    v6 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  else
  {
    sub_21090DF3C(a1, (uint64_t)v4);
  }
}

void sub_2108D1F94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_21090E6B4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2108D1FA8(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if (sub_2108D1CD4(a2))
  {
    if (*(_DWORD *)(a2 + 76))
      v4 = *(_DWORD *)(a2 + 72) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 72);
    if (v4)
      v5 = 0;
    LODWORD(v34) = 2;
    *(_QWORD *)((char *)&v34 + 4) = v5;
    v6 = 2 * ((_DWORD)v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5))
      v7 = v7;
    else
      v7 = 0;
    v8 = v6 & 0x1FFFFFFFFLL | ((unint64_t)(v7 >> 1) << 33);
    v9 = __PAIR64__(DWORD1(v34), 2);
    LODWORD(v34) = 1;
    *(_QWORD *)((char *)&v34 + 4) = v8;
    v10 = v34;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(_QWORD *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(_QWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24CA7D7F8;
        *((_QWORD *)&v34 + 1) = v12;
        v35 = v11;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        break;
      case 1:
        v20 = *(_QWORD *)(a2 + 24);
        v19 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24CA7D7F8;
        *((_QWORD *)&v34 + 1) = v20;
        v35 = v19;
        if (v19)
        {
          v21 = (unint64_t *)&v19->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        break;
      case 2:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24CA7D7F8;
        *((_QWORD *)&v34 + 1) = v16;
        v35 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 3:
        v23 = *(std::__shared_weak_count **)(a2 + 24);
        if (v23 && (v24 = std::__shared_weak_count::lock(v23)) != 0)
        {
          v25 = v24;
          v26 = *(_QWORD *)(a2 + 16);
          *(_QWORD *)&v34 = &off_24CA7D7F8;
          if (v26)
          {
            *((_QWORD *)&v34 + 1) = v26;
            v35 = v24;
            v27 = (unint64_t *)&v24->__shared_owners_;
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          else
          {
            *((_QWORD *)&v34 + 1) = 0;
            v35 = 0;
          }
          v29 = (unint64_t *)&v24->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        else
        {
          *((_QWORD *)&v34 + 1) = 0;
          v35 = 0;
          *(_QWORD *)&v34 = &off_24CA7D7F8;
        }
        break;
      default:
        sub_2108B9060();
    }
    sub_2108D1394(a1, (uint64_t)&v34);
    *(_QWORD *)&v34 = &off_24CA7D7F8;
    v31 = v35;
    if (v35)
    {
      v32 = (unint64_t *)&v35->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
}

void sub_2108D220C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21090E6B4(&a9);
  _Unwind_Resume(a1);
}

void sub_2108D2220(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[2];
  std::__shared_weak_count *v10;

  v4 = (uint64_t *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 40);
  switch(v5)
  {
    case 2:
      goto LABEL_4;
    case 1:
      sub_21090DD20(a1, (uint64_t)v4);
      break;
    case 0:
LABEL_4:
      sub_21090DC14(a1, (uint64_t)v4);
      return;
    case 3:
      sub_2108D1568(v9, v4);
      sub_21090DC14(a1, (uint64_t)v9);
      v9[0] = &off_24CA7D7F8;
      v6 = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      break;
    default:
      sub_2108B9060();
  }
}

void sub_2108D2300(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_21090E6B4((uint64_t *)va);
  _Unwind_Resume(a1);
}

double sub_2108D2314(uint64_t a1, uint64_t a2)
{
  unsigned int *v3;
  BOOL v4;
  double result;
  void *__p;
  __int128 v7;
  _BYTE v8[8];
  __int128 v9;

  v3 = (unsigned int *)(a2 + 24);
  if (*(_DWORD *)(a2 + 24))
    v4 = *(_DWORD *)(a2 + 28) == 0;
  else
    v4 = 1;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = &off_24CA7D7F8;
    *(_DWORD *)(a1 + 24) = 0;
  }
  else
  {
    __p = operator new(0x70uLL);
    v7 = xmmword_210A0D5C0;
    strcpy((char *)__p, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp:51");
    sub_21090E728((uint64_t)v8, v3, 0x18u, (uint64_t *)&__p, 0);
    if (SHIBYTE(v7) < 0)
      operator delete(__p);
    *(_QWORD *)a1 = &off_24CA7D7F8;
    result = *(double *)&v9;
    *(_OWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 24) = 0;
  }
  return result;
}

void sub_2108D23F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2108D2410(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t (**v21)();
  uint64_t *v22;
  std::__shared_weak_count *v23;
  char v24[8];
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  if (*(_DWORD *)(a2 + 24))
    sub_2108B9060();
  v3 = *(uint64_t **)(a2 + 8);
  v4 = *(std::__shared_weak_count **)(a2 + 16);
  v22 = v3;
  v23 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v21 = &off_24CA7D7B8;
  if (v3)
  {
    v8 = *v3;
    v7 = (std::__shared_weak_count *)v3[1];
    if (!v7)
      goto LABEL_11;
    v9 = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    do
      v11 = __ldaxr(v9);
    while (__stlxr(v11 - 1, v9));
    if (v11)
    {
LABEL_11:
      if (!v8)
        goto LABEL_13;
      goto LABEL_12;
    }
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v8)
LABEL_12:
      sub_210912CA0((uint64_t)v22);
  }
LABEL_13:
  sub_2108D2614((uint64_t)v24, (uint64_t)&v21);
  v12 = v26;
  *(_OWORD *)a1 = v25;
  *(_OWORD *)(a1 + 16) = v12;
  *(_QWORD *)(a1 + 32) = v27;
  if (!v22)
    goto LABEL_21;
  v14 = *v22;
  v13 = (std::__shared_weak_count *)v22[1];
  if (!v13)
    goto LABEL_19;
  v15 = (unint64_t *)&v13->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (v17)
  {
LABEL_19:
    if (!v14)
      goto LABEL_21;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  if (v14)
LABEL_20:
    sub_210912E7C((uint64_t)v22);
LABEL_21:
  v21 = &off_24CA7D7F8;
  v18 = v23;
  if (v23)
  {
    v19 = (unint64_t *)&v23->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_2108D2600(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_21090DE2C((uint64_t *)va);
  _Unwind_Resume(a1);
}

size_t sub_2108D2614(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  size_t result;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  uint64_t v18;

  v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v6)
        goto LABEL_9;
    }
  }
  if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h", 733, (uint64_t)"IsValid()", 9, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_20;
  }
LABEL_9:
  v10 = sub_21090DA90(a2, 0);
  v11 = sub_21090EB64(a2);
  v12 = sub_21090EC9C(a2);
  result = sub_21090EDD4(a2);
  v14 = v11;
  v15 = v11 | ((unint64_t)v12 << 32);
  if (v12)
    v16 = v14 == 0;
  else
    v16 = 1;
  if (v16)
    v17 = 0;
  else
    v17 = v15;
  HIDWORD(v18) = v17;
  LODWORD(v18) = 3;
  *(_QWORD *)a1 = v10;
  *(_QWORD *)(a1 + 8) = v18;
  *(_DWORD *)(a1 + 16) = HIDWORD(v17);
  *(_QWORD *)(a1 + 20) = 0x300000001;
  *(_DWORD *)(a1 + 28) = result;
  *(_QWORD *)(a1 + 32) = v17;
  *(_QWORD *)(a1 + 40) = (result << 32) | 3;
  if (HIDWORD(v17) * (_DWORD)result == -1)
  {
    result = sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4);
    if ((_DWORD)result)
LABEL_20:
      abort();
  }
  return result;
}

void sub_2108D27E8(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;

  v3 = (std::__shared_weak_count *)a2[1];
  if (v3 && (v5 = std::__shared_weak_count::lock(v3)) != 0)
  {
    v6 = v5;
    v7 = *a2;
    *a1 = &off_24CA7D7F8;
    if (v7)
    {
      a1[1] = v7;
      a1[2] = v5;
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    else
    {
      a1[1] = 0;
      a1[2] = 0;
    }
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    a1[1] = 0;
    a1[2] = 0;
    *a1 = &off_24CA7D7F8;
  }
  v12 = (uint64_t *)a1[1];
  if (!v12)
    goto LABEL_21;
  v14 = *v12;
  v13 = (std::__shared_weak_count *)v12[1];
  if (v13)
  {
    v15 = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (!v14)
  {
LABEL_21:
    sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 218, (uint64_t)&unk_210A02D2A, 0, (uint64_t)"Attempt to access an expired PixelBuffer. Note that an image buffer  created by an ImageView does not keep the buffer alive.", 124, (void (*)(void **))sub_2109EDDB4);
    abort();
  }
}

void sub_2108D292C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_21090E6B4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2108D2940(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24CA7AFF0;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24CA7C080[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t sub_2108D29A4(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v6;
  _OWORD *v7;
  BOOL v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  _BYTE *v24;
  int v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _QWORD v38[2];
  int v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t (**v42)();
  uint64_t *v43;
  std::__shared_weak_count *v44;
  size_t v45[2];

  *(_QWORD *)a1 = off_24CA7AFF0;
  *(_DWORD *)(a1 + 8) = 0;
  v6 = a1 + 16;
  sub_2108D2314(a1 + 16, a2);
  v7 = (_OWORD *)(a1 + 48);
  if (*(_DWORD *)(a2 + 24))
    v8 = *(_DWORD *)(a2 + 28) == 0;
  else
    v8 = 1;
  if (v8)
  {
    v9 = *(_OWORD *)a2;
    v10 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 32);
    *v7 = v9;
    *(_OWORD *)(a1 + 64) = v10;
  }
  else
  {
    sub_2108D2410((uint64_t)v7, v6);
  }
  v11 = a3[1];
  v35 = *a3;
  v36 = v11;
  v37 = a3[2];
  if ((sub_2108D2F10(a1) & 1) != 0)
    return a1;
  sub_2108D30F0(&v42, a1);
  sub_2108D31E4((uint64_t)v38, a1);
  v45[0] = (size_t)&v35;
  v45[1] = (size_t)v38;
  if (DWORD1(v36) == 1 && v39 == 1)
  {
    sub_2108FEBEC(v45);
  }
  else if (DWORD2(v35) && HIDWORD(v35) && (_DWORD)v36)
  {
    v12 = HIDWORD(v35) - 1;
    v13 = DWORD2(v36);
    v14 = v40;
    v15 = (_BYTE *)v35;
    v16 = (_BYTE *)v38[0];
    v17 = v36 - 1;
    if ((_DWORD)v36 != 1)
    {
      v18 = v41;
      v19 = HIDWORD(v36);
      if (HIDWORD(v35) == 1)
      {
        do
        {
          *v16 = *v15;
          v16[1] = v15[1];
          v16[2] = v15[2];
          v15 += v19;
          v16 += v18;
          --v17;
        }
        while (v17);
      }
      else
      {
        v20 = 0;
        v21 = v38[0] + 2;
        v22 = (_BYTE *)(v35 + 2);
        do
        {
          v23 = v22;
          v24 = (_BYTE *)v21;
          v25 = v12;
          do
          {
            *(v24 - 2) = *(v23 - 2);
            *(v24 - 1) = *(v23 - 1);
            *v24 = *v23;
            v24 += v14;
            v23 += v13;
            --v25;
          }
          while (v25);
          *(v24 - 2) = *(v23 - 2);
          *(v24 - 1) = *(v23 - 1);
          *v24 = *v23;
          v15 += v19;
          v16 += v18;
          ++v20;
          v21 += v18;
          v22 += v19;
        }
        while (v20 != v17);
      }
    }
    for (; v12; --v12)
    {
      *v16 = *v15;
      v16[1] = v15[1];
      v16[2] = v15[2];
      v15 += v13;
      v16 += v14;
    }
    *v16 = *v15;
    v16[1] = v15[1];
    v16[2] = v15[2];
  }
  if (!v43)
    goto LABEL_33;
  v27 = *v43;
  v26 = (std::__shared_weak_count *)v43[1];
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v29 = __ldxr(p_shared_owners);
    while (__stxr(v29 + 1, p_shared_owners));
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
      if (!v27)
        goto LABEL_33;
      goto LABEL_32;
    }
  }
  if (v27)
LABEL_32:
    sub_210912F6C((uint64_t)v43);
LABEL_33:
  v42 = &off_24CA7D7F8;
  v31 = v44;
  if (!v44)
    return a1;
  v32 = (unint64_t *)&v44->__shared_owners_;
  do
    v33 = __ldaxr(v32);
  while (__stlxr(v33 - 1, v32));
  if (v33)
    return a1;
  ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
  std::__shared_weak_count::__release_weak(v31);
  return a1;
}

void sub_2108D2C74(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108D0464(v1);
  _Unwind_Resume(a1);
}

void sub_2108D2C88(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_21090E154((_QWORD *)(v2 - 72));
  sub_2108D2940(v1);
  _Unwind_Resume(a1);
}

void sub_2108D2CA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108D2940(v1);
  _Unwind_Resume(a1);
}

void sub_2108D2CC0(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t (**v34)();
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t (**v37)();
  __int128 v38;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v5 = *(_QWORD *)(a1 + 24);
      v4 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24CA7D7F8;
      v35 = v5;
      v36 = v4;
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      break;
    case 1:
      v13 = *(_QWORD *)(a1 + 24);
      v12 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24CA7D7F8;
      v35 = v13;
      v36 = v12;
      if (v12)
      {
        v14 = (unint64_t *)&v12->__shared_owners_;
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      break;
    case 2:
      v9 = *(_QWORD *)(a1 + 24);
      v8 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24CA7D7F8;
      v35 = v9;
      v36 = v8;
      if (v8)
      {
        v10 = (unint64_t *)&v8->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      break;
    case 3:
      v16 = *(std::__shared_weak_count **)(a1 + 24);
      if (v16 && (v17 = std::__shared_weak_count::lock(v16)) != 0)
      {
        v18 = v17;
        v19 = *(_QWORD *)(a1 + 16);
        v34 = &off_24CA7D7F8;
        if (v19)
        {
          v35 = v19;
          v36 = v17;
          v20 = (unint64_t *)&v17->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
        else
        {
          v35 = 0;
          v36 = 0;
        }
        v22 = (unint64_t *)&v17->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      else
      {
        v35 = 0;
        v36 = 0;
        v34 = &off_24CA7D7F8;
      }
      break;
    default:
      sub_2108B9060();
  }
  sub_21090F1D8((uint64_t)&v34, &v37);
  v24 = v38;
  v38 = 0uLL;
  v25 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v24;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v37 = &off_24CA84E68;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
  if (*((_QWORD *)&v38 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v34 = &off_24CA7D7F8;
  v31 = v36;
  if (v36)
  {
    v32 = (unint64_t *)&v36->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_2108D2EFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21090E6B4(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2108D2F10(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        p_shared_owners = (unint64_t *)&v2->__shared_owners_;
        do
          v5 = __ldxr(p_shared_owners);
        while (__stxr(v5 + 1, p_shared_owners));
      }
      goto LABEL_28;
    case 1:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        v8 = (unint64_t *)&v2->__shared_owners_;
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      goto LABEL_28;
    case 2:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        v6 = (unint64_t *)&v2->__shared_owners_;
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      goto LABEL_28;
    case 3:
      v10 = *(std::__shared_weak_count **)(a1 + 24);
      if (!v10)
      {
        v15 = 0;
        return v15 == 0;
      }
      v11 = std::__shared_weak_count::lock(v10);
      if (!v11)
        return 1;
      v12 = v11;
      v3 = *(uint64_t **)(a1 + 16);
      if (v3)
      {
        v13 = (unint64_t *)&v11->__shared_owners_;
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
        v2 = v11;
      }
      else
      {
        v2 = 0;
      }
      v17 = (unint64_t *)&v11->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v12);
      }
LABEL_28:
      if (v3)
      {
        v15 = *v3;
        v19 = (std::__shared_weak_count *)v3[1];
        if (v19)
        {
          v20 = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
          do
            v22 = __ldaxr(v20);
          while (__stlxr(v22 - 1, v20));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
      }
      else
      {
        v15 = 0;
      }
      if (!v2)
        return v15 == 0;
      v23 = (unint64_t *)&v2->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (v24)
        return v15 == 0;
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v15 == 0;
    default:
      sub_2108B9060();
  }
}

void sub_2108D30F0(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  unsigned int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[2];
  std::__shared_weak_count *v10;

  v4 = (uint64_t *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 40);
  if (v5 == 2)
  {
    sub_21090E048(a1, (uint64_t)v4);
  }
  else if (v5 > 1)
  {
    if (v5 != 3)
      sub_2108B9060();
    sub_2108D27E8(v9, v4);
    sub_21090DF3C(a1, (uint64_t)v9);
    v9[0] = &off_24CA7D7F8;
    v6 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  else
  {
    sub_21090DF3C(a1, (uint64_t)v4);
  }
}

void sub_2108D31D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_21090E6B4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2108D31E4(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t (**v27)();
  uint64_t v28;
  std::__shared_weak_count *v29;

  if (sub_2108D2F10(a2))
  {
    sub_2108FF3F8(a1, 0, (_DWORD *)(a2 + 72));
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v5 = *(_QWORD *)(a2 + 24);
        v4 = *(std::__shared_weak_count **)(a2 + 32);
        v27 = &off_24CA7D7F8;
        v28 = v5;
        v29 = v4;
        if (v4)
        {
          p_shared_owners = (unint64_t *)&v4->__shared_owners_;
          do
            v7 = __ldxr(p_shared_owners);
          while (__stxr(v7 + 1, p_shared_owners));
        }
        break;
      case 1:
        v13 = *(_QWORD *)(a2 + 24);
        v12 = *(std::__shared_weak_count **)(a2 + 32);
        v27 = &off_24CA7D7F8;
        v28 = v13;
        v29 = v12;
        if (v12)
        {
          v14 = (unint64_t *)&v12->__shared_owners_;
          do
            v15 = __ldxr(v14);
          while (__stxr(v15 + 1, v14));
        }
        break;
      case 2:
        v9 = *(_QWORD *)(a2 + 24);
        v8 = *(std::__shared_weak_count **)(a2 + 32);
        v27 = &off_24CA7D7F8;
        v28 = v9;
        v29 = v8;
        if (v8)
        {
          v10 = (unint64_t *)&v8->__shared_owners_;
          do
            v11 = __ldxr(v10);
          while (__stxr(v11 + 1, v10));
        }
        break;
      case 3:
        v16 = *(std::__shared_weak_count **)(a2 + 24);
        if (v16 && (v17 = std::__shared_weak_count::lock(v16)) != 0)
        {
          v18 = v17;
          v19 = *(_QWORD *)(a2 + 16);
          v27 = &off_24CA7D7F8;
          if (v19)
          {
            v28 = v19;
            v29 = v17;
            v20 = (unint64_t *)&v17->__shared_owners_;
            do
              v21 = __ldxr(v20);
            while (__stxr(v21 + 1, v20));
          }
          else
          {
            v28 = 0;
            v29 = 0;
          }
          v22 = (unint64_t *)&v17->__shared_owners_;
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
        else
        {
          v28 = 0;
          v29 = 0;
          v27 = &off_24CA7D7F8;
        }
        break;
      default:
        sub_2108B9060();
    }
    sub_2108D2614(a1, (uint64_t)&v27);
    v27 = &off_24CA7D7F8;
    v24 = v29;
    if (v29)
    {
      v25 = (unint64_t *)&v29->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
}

void sub_2108D33C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_21090E6B4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2108D33D4(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[2];
  std::__shared_weak_count *v10;

  v4 = (uint64_t *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 40);
  switch(v5)
  {
    case 2:
      goto LABEL_4;
    case 1:
      sub_21090DD20(a1, (uint64_t)v4);
      break;
    case 0:
LABEL_4:
      sub_21090DC14(a1, (uint64_t)v4);
      return;
    case 3:
      sub_2108D27E8(v9, v4);
      sub_21090DC14(a1, (uint64_t)v9);
      v9[0] = &off_24CA7D7F8;
      v6 = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      break;
    default:
      sub_2108B9060();
  }
}

void sub_2108D34B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_21090E6B4((uint64_t *)va);
  _Unwind_Resume(a1);
}

double sub_2108D34C8(uint64_t a1, int a2, uint64_t a3)
{
  unsigned int *v4;
  BOOL v5;
  unsigned int v6;
  double result;
  void *__p;
  __int128 v9;
  _BYTE v10[8];
  __int128 v11;

  v4 = (unsigned int *)(a3 + 24);
  if (*(_DWORD *)(a3 + 24))
    v5 = *(_DWORD *)(a3 + 28) == 0;
  else
    v5 = 1;
  if (v5)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = &off_24CA7D7F8;
    *(_DWORD *)(a1 + 24) = 0;
  }
  else
  {
    if ((a2 - 25) > 0xC)
      v6 = 0;
    else
      v6 = dword_210A118C0[a2 - 25] | dword_210A1188C[a2 - 25];
    __p = operator new(0x70uLL);
    v9 = xmmword_210A0D5C0;
    strcpy((char *)__p, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp:51");
    sub_21090E728((uint64_t)v10, v4, v6, (uint64_t *)&__p, 0);
    if (SHIBYTE(v9) < 0)
      operator delete(__p);
    *(_QWORD *)a1 = &off_24CA7D7F8;
    result = *(double *)&v11;
    *(_OWORD *)(a1 + 8) = v11;
    *(_DWORD *)(a1 + 24) = 0;
  }
  return result;
}

void sub_2108D35E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2108D3604(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t (**v21)();
  uint64_t *v22;
  std::__shared_weak_count *v23;
  char v24[8];
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  if (*(_DWORD *)(a2 + 24))
    sub_2108B9060();
  v3 = *(uint64_t **)(a2 + 8);
  v4 = *(std::__shared_weak_count **)(a2 + 16);
  v22 = v3;
  v23 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v21 = &off_24CA7D7B8;
  if (v3)
  {
    v8 = *v3;
    v7 = (std::__shared_weak_count *)v3[1];
    if (!v7)
      goto LABEL_11;
    v9 = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    do
      v11 = __ldaxr(v9);
    while (__stlxr(v11 - 1, v9));
    if (v11)
    {
LABEL_11:
      if (!v8)
        goto LABEL_13;
      goto LABEL_12;
    }
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v8)
LABEL_12:
      sub_210912CA0((uint64_t)v22);
  }
LABEL_13:
  sub_2108D3808((uint64_t)v24, (uint64_t)&v21);
  v12 = v26;
  *(_OWORD *)a1 = v25;
  *(_OWORD *)(a1 + 16) = v12;
  *(_QWORD *)(a1 + 32) = v27;
  if (!v22)
    goto LABEL_21;
  v14 = *v22;
  v13 = (std::__shared_weak_count *)v22[1];
  if (!v13)
    goto LABEL_19;
  v15 = (unint64_t *)&v13->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (v17)
  {
LABEL_19:
    if (!v14)
      goto LABEL_21;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  if (v14)
LABEL_20:
    sub_210912E7C((uint64_t)v22);
LABEL_21:
  v21 = &off_24CA7D7F8;
  v18 = v23;
  if (v23)
  {
    v19 = (unint64_t *)&v23->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_2108D37F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_21090DE2C((uint64_t *)va);
  _Unwind_Resume(a1);
}

size_t sub_2108D3808(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  size_t result;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  uint64_t v18;

  v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v6)
        goto LABEL_9;
    }
  }
  if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h", 733, (uint64_t)"IsValid()", 9, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_20;
  }
LABEL_9:
  v10 = sub_21090DA90(a2, 0);
  v11 = sub_21090EB64(a2);
  v12 = sub_21090EC9C(a2);
  result = sub_21090EDD4(a2);
  v14 = v11;
  v15 = v11 | ((unint64_t)v12 << 32);
  if (v12)
    v16 = v14 == 0;
  else
    v16 = 1;
  if (v16)
    v17 = 0;
  else
    v17 = v15;
  HIDWORD(v18) = v17;
  LODWORD(v18) = 4;
  *(_QWORD *)a1 = v10;
  *(_QWORD *)(a1 + 8) = v18;
  *(_DWORD *)(a1 + 16) = HIDWORD(v17);
  *(_QWORD *)(a1 + 20) = 0x400000001;
  *(_DWORD *)(a1 + 28) = result;
  *(_QWORD *)(a1 + 32) = v17;
  *(_QWORD *)(a1 + 40) = (result << 32) | 4;
  if (HIDWORD(v17) * (_DWORD)result == -1)
  {
    result = sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4);
    if ((_DWORD)result)
LABEL_20:
      abort();
  }
  return result;
}

void sub_2108D39DC(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;

  v3 = (std::__shared_weak_count *)a2[1];
  if (v3 && (v5 = std::__shared_weak_count::lock(v3)) != 0)
  {
    v6 = v5;
    v7 = *a2;
    *a1 = &off_24CA7D7F8;
    if (v7)
    {
      a1[1] = v7;
      a1[2] = v5;
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    else
    {
      a1[1] = 0;
      a1[2] = 0;
    }
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    a1[1] = 0;
    a1[2] = 0;
    *a1 = &off_24CA7D7F8;
  }
  v12 = (uint64_t *)a1[1];
  if (!v12)
    goto LABEL_21;
  v14 = *v12;
  v13 = (std::__shared_weak_count *)v12[1];
  if (v13)
  {
    v15 = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (!v14)
  {
LABEL_21:
    sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 218, (uint64_t)&unk_210A02D2A, 0, (uint64_t)"Attempt to access an expired PixelBuffer. Note that an image buffer  created by an ImageView does not keep the buffer alive.", 124, (void (*)(void **))sub_2109EDDB4);
    abort();
  }
}

void sub_2108D3B20(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_21090E6B4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2108D3B34(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  _OWORD *v6;
  BOOL v7;
  __int128 v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  char v19;
  _BYTE *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t (**v27)();
  uint64_t *v28;
  std::__shared_weak_count *v29;
  _QWORD v30[2];
  char *v31;
  char **v32;
  _DWORD v33[7];
  _QWORD v34[2];

  v19 = 0;
  *(_QWORD *)a1 = off_24CA7B080;
  *(_DWORD *)(a1 + 8) = 0;
  v5 = a1 + 16;
  sub_2108D34C8(a1 + 16, a2, a3);
  v6 = (_OWORD *)(a1 + 48);
  if (*(_DWORD *)(a3 + 24))
    v7 = *(_DWORD *)(a3 + 28) == 0;
  else
    v7 = 1;
  if (v7)
  {
    v8 = *(_OWORD *)a3;
    v9 = *(_OWORD *)(a3 + 16);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a3 + 32);
    *v6 = v8;
    *(_OWORD *)(a1 + 64) = v9;
  }
  else
  {
    sub_2108D3604((uint64_t)v6, v5);
  }
  if ((sub_2108D472C(a1) & 1) != 0)
    return a1;
  sub_2108D490C(&v27, a1);
  sub_2108D4A00((uint64_t)&v20, a1);
  v30[0] = &v20;
  v30[1] = &v19;
  if (v24 == 1)
  {
    sub_2108FE924(v30);
  }
  else
  {
    v31 = &v19;
    if (v21 && v22 && v23)
    {
      v32 = &v31;
      v33[0] = 0;
      v33[1] = v21 - 1;
      v33[2] = v24;
      v33[3] = v22 - 1;
      v33[4] = v25;
      v33[5] = v23 - 1;
      v33[6] = v26;
      v34[1] = 0;
      v34[0] = 0;
      sub_2108FF510(v33, (uint64_t)v34, &v32, v20);
    }
  }
  if (!v28)
    goto LABEL_22;
  v11 = *v28;
  v10 = (std::__shared_weak_count *)v28[1];
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      if (!v11)
        goto LABEL_22;
      goto LABEL_21;
    }
  }
  if (v11)
LABEL_21:
    sub_210912F6C((uint64_t)v28);
LABEL_22:
  v27 = &off_24CA7D7F8;
  v15 = v29;
  if (!v29)
    return a1;
  v16 = (unint64_t *)&v29->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (v17)
    return a1;
  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
  std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_2108D3D28(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1;
  sub_2108D0464(v2);
  _Unwind_Resume(a1);
}

void sub_2108D3D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  sub_21090E154((uint64_t *)va);
  sub_2108D3D70(v8);
  _Unwind_Resume(a1);
}

void sub_2108D3D5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108D3D70(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2108D3D70(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24CA7B080;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24CA7C080[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t sub_2108D3DD4(uint64_t a1, int a2, uint64_t a3, __int128 *a4)
{
  uint64_t v7;
  _OWORD *v8;
  BOOL v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[20];
  int v26;
  uint64_t (**v27)();
  uint64_t *v28;
  std::__shared_weak_count *v29;
  size_t v30[2];
  char v31;
  char *v32;

  *(_QWORD *)a1 = off_24CA7B080;
  *(_DWORD *)(a1 + 8) = 0;
  v7 = a1 + 16;
  sub_2108D34C8(a1 + 16, a2, a3);
  v8 = (_OWORD *)(a1 + 48);
  if (*(_DWORD *)(a3 + 24))
    v9 = *(_DWORD *)(a3 + 28) == 0;
  else
    v9 = 1;
  if (v9)
  {
    v10 = *(_OWORD *)a3;
    v11 = *(_OWORD *)(a3 + 16);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a3 + 32);
    *v8 = v10;
    *(_OWORD *)(a1 + 64) = v11;
  }
  else
  {
    sub_2108D3604((uint64_t)v8, v7);
  }
  v12 = a4[1];
  v22 = *a4;
  v23 = v12;
  v24 = a4[2];
  if ((sub_2108D472C(a1) & 1) != 0)
    return a1;
  sub_2108D490C(&v27, a1);
  sub_2108D4A00((uint64_t)v25, a1);
  v30[0] = (size_t)&v22;
  v30[1] = (size_t)v25;
  if (DWORD1(v23) == 1 && v26 == 1)
  {
    sub_2108FEBEC(v30);
  }
  else
  {
    v31 = 0;
    if (DWORD2(v22) && HIDWORD(v22) && (_DWORD)v23)
    {
      v32 = &v31;
      sub_2108FF6CC((uint64_t)&v32, (uint64_t)&v22, (uint64_t)v25);
    }
  }
  if (!v28)
    goto LABEL_23;
  v14 = *v28;
  v13 = (std::__shared_weak_count *)v28[1];
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
      if (!v14)
        goto LABEL_23;
      goto LABEL_22;
    }
  }
  if (v14)
LABEL_22:
    sub_210912F6C((uint64_t)v28);
LABEL_23:
  v27 = &off_24CA7D7F8;
  v18 = v29;
  if (!v29)
    return a1;
  v19 = (unint64_t *)&v29->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
    return a1;
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  return a1;
}

void sub_2108D3FB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108D0464(v1);
  _Unwind_Resume(a1);
}

void sub_2108D3FC8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_21090E154((_QWORD *)(v2 - 88));
  sub_2108D3D70(v1);
  _Unwind_Resume(a1);
}

void sub_2108D3FE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108D3D70(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2108D3FF8(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  size_t v23;
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v37;

  *(_QWORD *)a1 = off_24CA7B080;
  v4 = *(uint64_t **)(a2 + 8);
  if (!v4)
    goto LABEL_12;
  v6 = *v4;
  v5 = (std::__shared_weak_count *)v4[1];
  if (!v5)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
  {
LABEL_7:
    v4 = *(uint64_t **)(a2 + 8);
    if (v6)
      goto LABEL_8;
LABEL_12:
    v11 = 0;
    goto LABEL_13;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  v4 = *(uint64_t **)(a2 + 8);
  if (!v6)
    goto LABEL_12;
LABEL_8:
  v10 = *((_DWORD *)v4 + 4);
  if (v10 == 2)
    v11 = 2;
  else
    v11 = v10 == 1;
LABEL_13:
  *(_QWORD *)(a1 + 16) = &off_24CA7D7F8;
  *(_DWORD *)(a1 + 8) = v11;
  *(_QWORD *)(a1 + 24) = v4;
  v12 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  *(_DWORD *)(a1 + 40) = 0;
  v15 = *(uint64_t **)(a2 + 8);
  if (v15)
  {
    v17 = *v15;
    v16 = (std::__shared_weak_count *)v15[1];
    if (!v16)
      goto LABEL_22;
    v18 = (unint64_t *)&v16->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
    do
      v20 = __ldaxr(v18);
    while (__stlxr(v20 - 1, v18));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
      if (v17)
        goto LABEL_24;
    }
    else
    {
LABEL_22:
      if (v17)
        goto LABEL_24;
    }
  }
  if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h", 677, (uint64_t)"IsValid()", 9, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_49;
  }
LABEL_24:
  v21 = sub_21090EB64(a2);
  v22 = sub_21090EC9C(a2);
  v23 = sub_21090EDD4(a2);
  v24 = v21 | ((unint64_t)v22 << 32);
  LODWORD(v37) = 4;
  HIDWORD(v37) = v24;
  *(_QWORD *)(a1 + 48) = v37;
  *(_DWORD *)(a1 + 56) = v22;
  *(_QWORD *)(a1 + 60) = 0x400000001;
  *(_DWORD *)(a1 + 68) = v23;
  *(_QWORD *)(a1 + 72) = v24;
  *(_QWORD *)(a1 + 80) = (v23 << 32) | 4;
  v25 = *(_QWORD *)(a2 + 8);
  if (!v25)
  {
    v32 = 0;
    goto LABEL_39;
  }
  v26 = *(std::__shared_weak_count **)(v25 + 8);
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
    do
      v29 = __ldaxr(v27);
    while (__stlxr(v29 - 1, v27));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
      v30 = *(uint64_t **)(a2 + 8);
      if (v30)
        goto LABEL_31;
LABEL_45:
      v32 = 0;
      if (!*(_DWORD *)(a1 + 72))
        goto LABEL_46;
LABEL_40:
      if ((v32 == 0) == (*(_DWORD *)(a1 + 76) == 0))
        return a1;
LABEL_47:
      if (!sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 109, (uint64_t)"(buffer == nullptr) == extent.IsEmpty()", 39, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))return a1;
LABEL_49:
      abort();
    }
  }
  v30 = *(uint64_t **)(a2 + 8);
  if (!v30)
    goto LABEL_45;
LABEL_31:
  v32 = *v30;
  v31 = (std::__shared_weak_count *)v30[1];
  if (!v31)
    goto LABEL_39;
  v33 = (unint64_t *)&v31->__shared_owners_;
  do
    v34 = __ldxr(v33);
  while (__stxr(v34 + 1, v33));
  do
    v35 = __ldaxr(v33);
  while (__stlxr(v35 - 1, v33));
  if (v35)
  {
LABEL_39:
    if (!*(_DWORD *)(a1 + 72))
      goto LABEL_46;
    goto LABEL_40;
  }
  ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
  std::__shared_weak_count::__release_weak(v31);
  if (*(_DWORD *)(a1 + 72))
    goto LABEL_40;
LABEL_46:
  if (v32)
    goto LABEL_47;
  return a1;
}

void sub_2108D433C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108D0464(v1);
  _Unwind_Resume(a1);
}

void sub_2108D4358(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t (**v34)();
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t (**v37)();
  __int128 v38;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v5 = *(_QWORD *)(a1 + 24);
      v4 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24CA7D7F8;
      v35 = v5;
      v36 = v4;
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      break;
    case 1:
      v13 = *(_QWORD *)(a1 + 24);
      v12 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24CA7D7F8;
      v35 = v13;
      v36 = v12;
      if (v12)
      {
        v14 = (unint64_t *)&v12->__shared_owners_;
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      break;
    case 2:
      v9 = *(_QWORD *)(a1 + 24);
      v8 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24CA7D7F8;
      v35 = v9;
      v36 = v8;
      if (v8)
      {
        v10 = (unint64_t *)&v8->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      break;
    case 3:
      v16 = *(std::__shared_weak_count **)(a1 + 24);
      if (v16 && (v17 = std::__shared_weak_count::lock(v16)) != 0)
      {
        v18 = v17;
        v19 = *(_QWORD *)(a1 + 16);
        v34 = &off_24CA7D7F8;
        if (v19)
        {
          v35 = v19;
          v36 = v17;
          v20 = (unint64_t *)&v17->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
        else
        {
          v35 = 0;
          v36 = 0;
        }
        v22 = (unint64_t *)&v17->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      else
      {
        v35 = 0;
        v36 = 0;
        v34 = &off_24CA7D7F8;
      }
      break;
    default:
      sub_2108B9060();
  }
  sub_21090F1D8((uint64_t)&v34, &v37);
  v24 = v38;
  v38 = 0uLL;
  v25 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v24;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v37 = &off_24CA84E68;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
  if (*((_QWORD *)&v38 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v34 = &off_24CA7D7F8;
  v31 = v36;
  if (v36)
  {
    v32 = (unint64_t *)&v36->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_2108D4594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21090E6B4(&a9);
  _Unwind_Resume(a1);
}

void sub_2108D45A8(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v5 = *(_QWORD *)(a1 + 24);
      v4 = *(_QWORD *)(a1 + 32);
      *a2 = &off_24CA7D7F8;
      a2[1] = v5;
      a2[2] = v4;
      if (v4)
      {
        v6 = (unint64_t *)(v4 + 8);
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      break;
    case 1:
      v13 = *(_QWORD *)(a1 + 24);
      v12 = *(_QWORD *)(a1 + 32);
      *a2 = &off_24CA7D7F8;
      a2[1] = v13;
      a2[2] = v12;
      if (v12)
      {
        v14 = (unint64_t *)(v12 + 8);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      break;
    case 2:
      v9 = *(_QWORD *)(a1 + 24);
      v8 = *(_QWORD *)(a1 + 32);
      *a2 = &off_24CA7D7F8;
      a2[1] = v9;
      a2[2] = v8;
      if (v8)
      {
        v10 = (unint64_t *)(v8 + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      break;
    case 3:
      v16 = *(std::__shared_weak_count **)(a1 + 24);
      if (v16 && (v17 = std::__shared_weak_count::lock(v16)) != 0)
      {
        v18 = v17;
        v19 = *(_QWORD *)(a1 + 16);
        *a2 = &off_24CA7D7F8;
        if (v19)
        {
          a2[1] = v19;
          a2[2] = v17;
          p_shared_owners = (unint64_t *)&v17->__shared_owners_;
          do
            v21 = __ldxr(p_shared_owners);
          while (__stxr(v21 + 1, p_shared_owners));
        }
        else
        {
          a2[1] = 0;
          a2[2] = 0;
        }
        v22 = (unint64_t *)&v17->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      else
      {
        a2[1] = 0;
        a2[2] = 0;
        *a2 = &off_24CA7D7F8;
      }
      break;
    default:
      sub_2108B9060();
  }
}

uint64_t sub_2108D472C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        p_shared_owners = (unint64_t *)&v2->__shared_owners_;
        do
          v5 = __ldxr(p_shared_owners);
        while (__stxr(v5 + 1, p_shared_owners));
      }
      goto LABEL_28;
    case 1:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        v8 = (unint64_t *)&v2->__shared_owners_;
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      goto LABEL_28;
    case 2:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        v6 = (unint64_t *)&v2->__shared_owners_;
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      goto LABEL_28;
    case 3:
      v10 = *(std::__shared_weak_count **)(a1 + 24);
      if (!v10)
      {
        v15 = 0;
        return v15 == 0;
      }
      v11 = std::__shared_weak_count::lock(v10);
      if (!v11)
        return 1;
      v12 = v11;
      v3 = *(uint64_t **)(a1 + 16);
      if (v3)
      {
        v13 = (unint64_t *)&v11->__shared_owners_;
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
        v2 = v11;
      }
      else
      {
        v2 = 0;
      }
      v17 = (unint64_t *)&v11->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v12);
      }
LABEL_28:
      if (v3)
      {
        v15 = *v3;
        v19 = (std::__shared_weak_count *)v3[1];
        if (v19)
        {
          v20 = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
          do
            v22 = __ldaxr(v20);
          while (__stlxr(v22 - 1, v20));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
      }
      else
      {
        v15 = 0;
      }
      if (!v2)
        return v15 == 0;
      v23 = (unint64_t *)&v2->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (v24)
        return v15 == 0;
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v15 == 0;
    default:
      sub_2108B9060();
  }
}

void sub_2108D490C(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  unsigned int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[2];
  std::__shared_weak_count *v10;

  v4 = (uint64_t *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 40);
  if (v5 == 2)
  {
    sub_21090E048(a1, (uint64_t)v4);
  }
  else if (v5 > 1)
  {
    if (v5 != 3)
      sub_2108B9060();
    sub_2108D39DC(v9, v4);
    sub_21090DF3C(a1, (uint64_t)v9);
    v9[0] = &off_24CA7D7F8;
    v6 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  else
  {
    sub_21090DF3C(a1, (uint64_t)v4);
  }
}

void sub_2108D49EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_21090E6B4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2108D4A00(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if (sub_2108D472C(a2))
  {
    if (*(_DWORD *)(a2 + 76))
      v4 = *(_DWORD *)(a2 + 72) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 72);
    if (v4)
      v5 = 0;
    LODWORD(v34) = 4;
    *(_QWORD *)((char *)&v34 + 4) = v5;
    v6 = 4 * ((_DWORD)v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5))
      v7 = v7;
    else
      v7 = 0;
    v8 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
    v9 = __PAIR64__(DWORD1(v34), 4);
    LODWORD(v34) = 1;
    *(_QWORD *)((char *)&v34 + 4) = v8;
    v10 = v34;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(_QWORD *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(_QWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24CA7D7F8;
        *((_QWORD *)&v34 + 1) = v12;
        v35 = v11;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        break;
      case 1:
        v20 = *(_QWORD *)(a2 + 24);
        v19 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24CA7D7F8;
        *((_QWORD *)&v34 + 1) = v20;
        v35 = v19;
        if (v19)
        {
          v21 = (unint64_t *)&v19->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        break;
      case 2:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24CA7D7F8;
        *((_QWORD *)&v34 + 1) = v16;
        v35 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 3:
        v23 = *(std::__shared_weak_count **)(a2 + 24);
        if (v23 && (v24 = std::__shared_weak_count::lock(v23)) != 0)
        {
          v25 = v24;
          v26 = *(_QWORD *)(a2 + 16);
          *(_QWORD *)&v34 = &off_24CA7D7F8;
          if (v26)
          {
            *((_QWORD *)&v34 + 1) = v26;
            v35 = v24;
            v27 = (unint64_t *)&v24->__shared_owners_;
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          else
          {
            *((_QWORD *)&v34 + 1) = 0;
            v35 = 0;
          }
          v29 = (unint64_t *)&v24->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        else
        {
          *((_QWORD *)&v34 + 1) = 0;
          v35 = 0;
          *(_QWORD *)&v34 = &off_24CA7D7F8;
        }
        break;
      default:
        sub_2108B9060();
    }
    sub_2108D3808(a1, (uint64_t)&v34);
    *(_QWORD *)&v34 = &off_24CA7D7F8;
    v31 = v35;
    if (v35)
    {
      v32 = (unint64_t *)&v35->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
}

void sub_2108D4C64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21090E6B4(&a9);
  _Unwind_Resume(a1);
}

void sub_2108D4C78(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[2];
  std::__shared_weak_count *v10;

  v4 = (uint64_t *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 40);
  switch(v5)
  {
    case 2:
      goto LABEL_4;
    case 1:
      sub_21090DD20(a1, (uint64_t)v4);
      break;
    case 0:
LABEL_4:
      sub_21090DC14(a1, (uint64_t)v4);
      return;
    case 3:
      sub_2108D39DC(v9, v4);
      sub_21090DC14(a1, (uint64_t)v9);
      v9[0] = &off_24CA7D7F8;
      v6 = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      break;
    default:
      sub_2108B9060();
  }
}

void sub_2108D4D58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_21090E6B4((uint64_t *)va);
  _Unwind_Resume(a1);
}

double sub_2108D4D6C(uint64_t a1, unsigned int *a2)
{
  BOOL v3;
  double result;
  void *__p;
  __int128 v7;
  _BYTE v8[8];
  __int128 v9;

  if (*a2)
    v3 = a2[1] == 0;
  else
    v3 = 1;
  if (v3)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = &off_24CA7D7F8;
    *(_DWORD *)(a1 + 24) = 0;
  }
  else
  {
    __p = operator new(0x70uLL);
    v7 = xmmword_210A0D5C0;
    strcpy((char *)__p, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp:51");
    sub_21090E728((uint64_t)v8, a2, 0x62313667u, (uint64_t *)&__p, 0);
    if (SHIBYTE(v7) < 0)
      operator delete(__p);
    *(_QWORD *)a1 = &off_24CA7D7F8;
    result = *(double *)&v9;
    *(_OWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 24) = 0;
  }
  return result;
}

void sub_2108D4E50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2108D4E6C(uint64_t a1)
{
  uint64_t *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t (**v20)();
  uint64_t *v21;
  std::__shared_weak_count *v22;
  uint64_t v23[2];

  if (*(_DWORD *)(a1 + 24))
    sub_2108B9060();
  v1 = *(uint64_t **)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  v21 = v1;
  v22 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v20 = &off_24CA7D7B8;
  if (v1)
  {
    v6 = *v1;
    v5 = (std::__shared_weak_count *)v1[1];
    if (!v5)
      goto LABEL_11;
    v7 = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    do
      v9 = __ldaxr(v7);
    while (__stlxr(v9 - 1, v7));
    if (v9)
    {
LABEL_11:
      if (!v6)
        goto LABEL_13;
      goto LABEL_12;
    }
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (v6)
LABEL_12:
      sub_210912CA0((uint64_t)v21);
  }
LABEL_13:
  sub_2108D5054(v23, (uint64_t)&v20);
  v10 = v23[1];
  if (v21)
  {
    v12 = *v21;
    v11 = (std::__shared_weak_count *)v21[1];
    if (v11)
    {
      v13 = (unint64_t *)&v11->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
      do
        v15 = __ldaxr(v13);
      while (__stlxr(v15 - 1, v13));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
        if (!v12)
          goto LABEL_21;
        goto LABEL_20;
      }
    }
    if (v12)
LABEL_20:
      sub_210912E7C((uint64_t)v21);
  }
LABEL_21:
  v20 = &off_24CA7D7F8;
  v16 = v22;
  if (v22)
  {
    v17 = (unint64_t *)&v22->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  return v10;
}

void sub_2108D5040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21090DE2C(&a9);
  _Unwind_Resume(a1);
}

size_t sub_2108D5054(uint64_t *a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  size_t result;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;

  v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v6)
        goto LABEL_9;
    }
  }
  if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h", 733, (uint64_t)"IsValid()", 9, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_20;
  }
LABEL_9:
  v10 = sub_21090DA90(a2, 0);
  v11 = sub_21090EB64(a2);
  v12 = sub_21090EC9C(a2);
  result = sub_21090EDD4(a2);
  v14 = v11;
  v15 = v11 | ((unint64_t)v12 << 32);
  if (v12)
    v16 = v14 == 0;
  else
    v16 = 1;
  if (v16)
    v17 = 0;
  else
    v17 = v15;
  *a1 = v10;
  a1[1] = v17;
  a1[2] = ((unint64_t)(result >> 1) << 32) | 1;
  if (HIDWORD(v17) * (result >> 1) == -1)
  {
    result = sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4);
    if ((_DWORD)result)
LABEL_20:
      abort();
  }
  return result;
}

void sub_2108D51B4(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;

  v3 = (std::__shared_weak_count *)a2[1];
  if (v3 && (v5 = std::__shared_weak_count::lock(v3)) != 0)
  {
    v6 = v5;
    v7 = *a2;
    *a1 = &off_24CA7D7F8;
    if (v7)
    {
      a1[1] = v7;
      a1[2] = v5;
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    else
    {
      a1[1] = 0;
      a1[2] = 0;
    }
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    a1[1] = 0;
    a1[2] = 0;
    *a1 = &off_24CA7D7F8;
  }
  v12 = (uint64_t *)a1[1];
  if (!v12)
    goto LABEL_21;
  v14 = *v12;
  v13 = (std::__shared_weak_count *)v12[1];
  if (v13)
  {
    v15 = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (!v14)
  {
LABEL_21:
    sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 218, (uint64_t)&unk_210A02D2A, 0, (uint64_t)"Attempt to access an expired PixelBuffer. Note that an image buffer  created by an ImageView does not keep the buffer alive.", 124, (void (*)(void **))sub_2109EDDB4);
    abort();
  }
}

void sub_2108D52F8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_21090E6B4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2108D530C(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24CA7B110;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24CA7C080[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t sub_2108D5370(uint64_t a1, unsigned int *a2, __int128 *a3)
{
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v18;
  uint64_t v19;
  uint64_t v20[3];
  uint64_t (**v21)();
  uint64_t *v22;
  std::__shared_weak_count *v23;

  *(_QWORD *)a1 = off_24CA7B110;
  *(_DWORD *)(a1 + 8) = 0;
  v6 = a1 + 16;
  sub_2108D4D6C(a1 + 16, a2);
  if (*a2)
    v7 = a2[1] == 0;
  else
    v7 = 1;
  if (v7)
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)a2;
  }
  else
  {
    *(_QWORD *)(a1 + 48) = sub_2108D4E6C(v6);
    *(_QWORD *)(a1 + 56) = v8;
  }
  v18 = *a3;
  v19 = *((_QWORD *)a3 + 2);
  if ((sub_2108D5790(a1) & 1) != 0)
    return a1;
  sub_2108D5970(&v21, a1);
  sub_2108D5A64(v20, a1);
  sub_2108FFBBC((uint64_t *)&v18, (uint64_t)v20);
  if (!v22)
    goto LABEL_16;
  v10 = *v22;
  v9 = (std::__shared_weak_count *)v22[1];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      if (!v10)
        goto LABEL_16;
      goto LABEL_15;
    }
  }
  if (v10)
LABEL_15:
    sub_210912F6C((uint64_t)v22);
LABEL_16:
  v21 = &off_24CA7D7F8;
  v14 = v23;
  if (!v23)
    return a1;
  v15 = (unint64_t *)&v23->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (v16)
    return a1;
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  return a1;
}

void sub_2108D54F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108D0464(v1);
  _Unwind_Resume(a1);
}

void sub_2108D5508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  sub_21090E154((uint64_t *)va);
  sub_2108D530C(v8);
  _Unwind_Resume(a1);
}

void sub_2108D5524(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108D530C(v1);
  _Unwind_Resume(a1);
}

void sub_2108D5540(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t (**v34)();
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t (**v37)();
  __int128 v38;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v5 = *(_QWORD *)(a1 + 24);
      v4 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24CA7D7F8;
      v35 = v5;
      v36 = v4;
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      break;
    case 1:
      v13 = *(_QWORD *)(a1 + 24);
      v12 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24CA7D7F8;
      v35 = v13;
      v36 = v12;
      if (v12)
      {
        v14 = (unint64_t *)&v12->__shared_owners_;
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      break;
    case 2:
      v9 = *(_QWORD *)(a1 + 24);
      v8 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24CA7D7F8;
      v35 = v9;
      v36 = v8;
      if (v8)
      {
        v10 = (unint64_t *)&v8->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      break;
    case 3:
      v16 = *(std::__shared_weak_count **)(a1 + 24);
      if (v16 && (v17 = std::__shared_weak_count::lock(v16)) != 0)
      {
        v18 = v17;
        v19 = *(_QWORD *)(a1 + 16);
        v34 = &off_24CA7D7F8;
        if (v19)
        {
          v35 = v19;
          v36 = v17;
          v20 = (unint64_t *)&v17->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
        else
        {
          v35 = 0;
          v36 = 0;
        }
        v22 = (unint64_t *)&v17->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      else
      {
        v35 = 0;
        v36 = 0;
        v34 = &off_24CA7D7F8;
      }
      break;
    default:
      sub_2108B9060();
  }
  sub_21090F1D8((uint64_t)&v34, &v37);
  v24 = v38;
  v38 = 0uLL;
  v25 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v24;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v37 = &off_24CA84E68;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
  if (*((_QWORD *)&v38 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v34 = &off_24CA7D7F8;
  v31 = v36;
  if (v36)
  {
    v32 = (unint64_t *)&v36->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_2108D577C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21090E6B4(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2108D5790(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        p_shared_owners = (unint64_t *)&v2->__shared_owners_;
        do
          v5 = __ldxr(p_shared_owners);
        while (__stxr(v5 + 1, p_shared_owners));
      }
      goto LABEL_28;
    case 1:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        v8 = (unint64_t *)&v2->__shared_owners_;
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      goto LABEL_28;
    case 2:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        v6 = (unint64_t *)&v2->__shared_owners_;
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      goto LABEL_28;
    case 3:
      v10 = *(std::__shared_weak_count **)(a1 + 24);
      if (!v10)
      {
        v15 = 0;
        return v15 == 0;
      }
      v11 = std::__shared_weak_count::lock(v10);
      if (!v11)
        return 1;
      v12 = v11;
      v3 = *(uint64_t **)(a1 + 16);
      if (v3)
      {
        v13 = (unint64_t *)&v11->__shared_owners_;
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
        v2 = v11;
      }
      else
      {
        v2 = 0;
      }
      v17 = (unint64_t *)&v11->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v12);
      }
LABEL_28:
      if (v3)
      {
        v15 = *v3;
        v19 = (std::__shared_weak_count *)v3[1];
        if (v19)
        {
          v20 = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
          do
            v22 = __ldaxr(v20);
          while (__stlxr(v22 - 1, v20));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
      }
      else
      {
        v15 = 0;
      }
      if (!v2)
        return v15 == 0;
      v23 = (unint64_t *)&v2->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (v24)
        return v15 == 0;
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v15 == 0;
    default:
      sub_2108B9060();
  }
}

void sub_2108D5970(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  unsigned int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[2];
  std::__shared_weak_count *v10;

  v4 = (uint64_t *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 40);
  if (v5 == 2)
  {
    sub_21090E048(a1, (uint64_t)v4);
  }
  else if (v5 > 1)
  {
    if (v5 != 3)
      sub_2108B9060();
    sub_2108D51B4(v9, v4);
    sub_21090DF3C(a1, (uint64_t)v9);
    v9[0] = &off_24CA7D7F8;
    v6 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  else
  {
    sub_21090DF3C(a1, (uint64_t)v4);
  }
}

void sub_2108D5A50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_21090E6B4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2108D5A64(uint64_t *a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t (**v30)();
  uint64_t v31;
  std::__shared_weak_count *v32;

  if (sub_2108D5790(a2))
  {
    if (*(_DWORD *)(a2 + 52))
      v4 = *(_DWORD *)(a2 + 48) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 48);
    if (v4)
      v5 = 0;
    v6 = 0x100000000;
    if (v5 > 0x100000000)
      v6 = v5;
    *a1 = 0;
    a1[1] = v5;
    a1[2] = ((_DWORD)v5 != 0) | (unint64_t)(v6 << 32);
    if (HIDWORD(v5) * (_DWORD)v6 == -1
      && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v8 = *(_QWORD *)(a2 + 24);
        v7 = *(std::__shared_weak_count **)(a2 + 32);
        v30 = &off_24CA7D7F8;
        v31 = v8;
        v32 = v7;
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v10 = __ldxr(p_shared_owners);
          while (__stxr(v10 + 1, p_shared_owners));
        }
        break;
      case 1:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        v30 = &off_24CA7D7F8;
        v31 = v16;
        v32 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 2:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        v30 = &off_24CA7D7F8;
        v31 = v12;
        v32 = v11;
        if (v11)
        {
          v13 = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
        }
        break;
      case 3:
        v19 = *(std::__shared_weak_count **)(a2 + 24);
        if (v19 && (v20 = std::__shared_weak_count::lock(v19)) != 0)
        {
          v21 = v20;
          v22 = *(_QWORD *)(a2 + 16);
          v30 = &off_24CA7D7F8;
          if (v22)
          {
            v31 = v22;
            v32 = v20;
            v23 = (unint64_t *)&v20->__shared_owners_;
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
          }
          else
          {
            v31 = 0;
            v32 = 0;
          }
          v25 = (unint64_t *)&v20->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        else
        {
          v31 = 0;
          v32 = 0;
          v30 = &off_24CA7D7F8;
        }
        break;
      default:
        sub_2108B9060();
    }
    sub_2108D5054(a1, (uint64_t)&v30);
    v30 = &off_24CA7D7F8;
    v27 = v32;
    if (v32)
    {
      v28 = (unint64_t *)&v32->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
  }
}

void sub_2108D5CA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_21090E6B4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2108D5CB4(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[2];
  std::__shared_weak_count *v10;

  v4 = (uint64_t *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 40);
  switch(v5)
  {
    case 2:
      goto LABEL_4;
    case 1:
      sub_21090DD20(a1, (uint64_t)v4);
      break;
    case 0:
LABEL_4:
      sub_21090DC14(a1, (uint64_t)v4);
      return;
    case 3:
      sub_2108D51B4(v9, v4);
      sub_21090DC14(a1, (uint64_t)v9);
      v9[0] = &off_24CA7D7F8;
      v6 = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      break;
    default:
      sub_2108B9060();
  }
}

void sub_2108D5D94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_21090E6B4((uint64_t *)va);
  _Unwind_Resume(a1);
}

double sub_2108D5DA8(uint64_t a1, uint64_t a2)
{
  unsigned int *v3;
  BOOL v4;
  double result;
  void *__p;
  __int128 v7;
  _BYTE v8[8];
  __int128 v9;

  v3 = (unsigned int *)(a2 + 24);
  if (*(_DWORD *)(a2 + 24))
    v4 = *(_DWORD *)(a2 + 28) == 0;
  else
    v4 = 1;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = &off_24CA7D7F8;
    *(_DWORD *)(a1 + 24) = 0;
  }
  else
  {
    __p = operator new(0x70uLL);
    v7 = xmmword_210A0D5C0;
    strcpy((char *)__p, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp:51");
    sub_21090E728((uint64_t)v8, v3, 0x62343872u, (uint64_t *)&__p, 0);
    if (SHIBYTE(v7) < 0)
      operator delete(__p);
    *(_QWORD *)a1 = &off_24CA7D7F8;
    result = *(double *)&v9;
    *(_OWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 24) = 0;
  }
  return result;
}

void sub_2108D5E8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2108D5EA8(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t (**v21)();
  uint64_t *v22;
  std::__shared_weak_count *v23;
  char v24[8];
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  if (*(_DWORD *)(a2 + 24))
    sub_2108B9060();
  v3 = *(uint64_t **)(a2 + 8);
  v4 = *(std::__shared_weak_count **)(a2 + 16);
  v22 = v3;
  v23 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v21 = &off_24CA7D7B8;
  if (v3)
  {
    v8 = *v3;
    v7 = (std::__shared_weak_count *)v3[1];
    if (!v7)
      goto LABEL_11;
    v9 = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    do
      v11 = __ldaxr(v9);
    while (__stlxr(v11 - 1, v9));
    if (v11)
    {
LABEL_11:
      if (!v8)
        goto LABEL_13;
      goto LABEL_12;
    }
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v8)
LABEL_12:
      sub_210912CA0((uint64_t)v22);
  }
LABEL_13:
  sub_2108D60AC((uint64_t)v24, (uint64_t)&v21);
  v12 = v26;
  *(_OWORD *)a1 = v25;
  *(_OWORD *)(a1 + 16) = v12;
  *(_QWORD *)(a1 + 32) = v27;
  if (!v22)
    goto LABEL_21;
  v14 = *v22;
  v13 = (std::__shared_weak_count *)v22[1];
  if (!v13)
    goto LABEL_19;
  v15 = (unint64_t *)&v13->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (v17)
  {
LABEL_19:
    if (!v14)
      goto LABEL_21;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  if (v14)
LABEL_20:
    sub_210912E7C((uint64_t)v22);
LABEL_21:
  v21 = &off_24CA7D7F8;
  v18 = v23;
  if (v23)
  {
    v19 = (unint64_t *)&v23->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_2108D6098(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_21090DE2C((uint64_t *)va);
  _Unwind_Resume(a1);
}

size_t sub_2108D60AC(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  size_t result;
  size_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  unint64_t v18;
  uint64_t v19;

  v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v6)
        goto LABEL_9;
    }
  }
  if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h", 733, (uint64_t)"IsValid()", 9, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_20;
  }
LABEL_9:
  v10 = sub_21090DA90(a2, 0);
  v11 = sub_21090EB64(a2);
  v12 = sub_21090EC9C(a2);
  result = sub_21090EDD4(a2);
  v14 = result >> 1;
  v15 = v11;
  v16 = v11 | ((unint64_t)v12 << 32);
  if (v12)
    v17 = v15 == 0;
  else
    v17 = 1;
  if (v17)
    v18 = 0;
  else
    v18 = v16;
  HIDWORD(v19) = v18;
  LODWORD(v19) = 3;
  *(_QWORD *)a1 = v10;
  *(_QWORD *)(a1 + 8) = v19;
  *(_DWORD *)(a1 + 16) = HIDWORD(v18);
  *(_QWORD *)(a1 + 20) = 0x300000001;
  *(_DWORD *)(a1 + 28) = v14;
  *(_QWORD *)(a1 + 32) = v18;
  *(_QWORD *)(a1 + 40) = ((unint64_t)(result >> 1) << 32) | 3;
  if (HIDWORD(v18) * (_DWORD)v14 == -1)
  {
    result = sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4);
    if ((_DWORD)result)
LABEL_20:
      abort();
  }
  return result;
}

void sub_2108D6288(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;

  v3 = (std::__shared_weak_count *)a2[1];
  if (v3 && (v5 = std::__shared_weak_count::lock(v3)) != 0)
  {
    v6 = v5;
    v7 = *a2;
    *a1 = &off_24CA7D7F8;
    if (v7)
    {
      a1[1] = v7;
      a1[2] = v5;
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    else
    {
      a1[1] = 0;
      a1[2] = 0;
    }
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    a1[1] = 0;
    a1[2] = 0;
    *a1 = &off_24CA7D7F8;
  }
  v12 = (uint64_t *)a1[1];
  if (!v12)
    goto LABEL_21;
  v14 = *v12;
  v13 = (std::__shared_weak_count *)v12[1];
  if (v13)
  {
    v15 = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (!v14)
  {
LABEL_21:
    sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 218, (uint64_t)&unk_210A02D2A, 0, (uint64_t)"Attempt to access an expired PixelBuffer. Note that an image buffer  created by an ImageView does not keep the buffer alive.", 124, (void (*)(void **))sub_2109EDDB4);
    abort();
  }
}

void sub_2108D63CC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_21090E6B4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2108D63E0(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24CA7B1A0;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24CA7C080[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t sub_2108D6444(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v6;
  _OWORD *v7;
  BOOL v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _WORD *v15;
  _WORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  _WORD *v22;
  uint64_t v23;
  uint64_t v24;
  _WORD *v25;
  _WORD *v26;
  int v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _QWORD v40[2];
  int v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t (**v44)();
  uint64_t *v45;
  std::__shared_weak_count *v46;
  uint64_t v47[2];

  *(_QWORD *)a1 = off_24CA7B1A0;
  *(_DWORD *)(a1 + 8) = 0;
  v6 = a1 + 16;
  sub_2108D5DA8(a1 + 16, a2);
  v7 = (_OWORD *)(a1 + 48);
  if (*(_DWORD *)(a2 + 24))
    v8 = *(_DWORD *)(a2 + 28) == 0;
  else
    v8 = 1;
  if (v8)
  {
    v9 = *(_OWORD *)a2;
    v10 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 32);
    *v7 = v9;
    *(_OWORD *)(a1 + 64) = v10;
  }
  else
  {
    sub_2108D5EA8((uint64_t)v7, v6);
  }
  v11 = a3[1];
  v37 = *a3;
  v38 = v11;
  v39 = a3[2];
  if ((sub_2108D69D0(a1) & 1) != 0)
    return a1;
  sub_2108D6BB0(&v44, a1);
  sub_2108D6CA4((uint64_t)v40, a1);
  v47[0] = (uint64_t)&v37;
  v47[1] = (uint64_t)v40;
  if (DWORD1(v38) == 1 && v41 == 1)
  {
    sub_2109005E8(v47);
    goto LABEL_25;
  }
  if (DWORD2(v37) && HIDWORD(v37) && (_DWORD)v38)
  {
    v12 = HIDWORD(v37) - 1;
    v13 = DWORD2(v38);
    v14 = v42;
    v15 = (_WORD *)v37;
    v16 = (_WORD *)v40[0];
    v17 = v38 - 1;
    if ((_DWORD)v38 != 1)
    {
      v18 = v43;
      v19 = HIDWORD(v38);
      if (HIDWORD(v37) == 1)
      {
        do
        {
          *v16 = *v15;
          v16[1] = v15[1];
          v16[2] = v15[2];
          v15 += v19;
          v16 += v18;
          --v17;
        }
        while (v17);
LABEL_24:
        *v16 = *v15;
        v16[1] = v15[1];
        v16[2] = v15[2];
        goto LABEL_25;
      }
      v20 = 0;
      v21 = v40[0] + 4;
      v22 = (_WORD *)(v37 + 4);
      v23 = 2 * HIDWORD(v38);
      v24 = 2 * DWORD2(v38);
      do
      {
        v25 = v22;
        v26 = (_WORD *)v21;
        v27 = v12;
        do
        {
          *(v26 - 2) = *(v25 - 2);
          *(v26 - 1) = *(v25 - 1);
          *v26 = *v25;
          v26 += v14;
          v25 = (_WORD *)((char *)v25 + v24);
          --v27;
        }
        while (v27);
        *(v26 - 2) = *(v25 - 2);
        *(v26 - 1) = *(v25 - 1);
        *v26 = *v25;
        v15 += v19;
        v16 += v18;
        ++v20;
        v21 += 2 * v18;
        v22 = (_WORD *)((char *)v22 + v23);
      }
      while (v20 != v17);
    }
    for (; v12; --v12)
    {
      *v16 = *v15;
      v16[1] = v15[1];
      v16[2] = v15[2];
      v15 += v13;
      v16 += v14;
    }
    goto LABEL_24;
  }
LABEL_25:
  if (v45)
  {
    v29 = *v45;
    v28 = (std::__shared_weak_count *)v45[1];
    if (v28)
    {
      p_shared_owners = (unint64_t *)&v28->__shared_owners_;
      do
        v31 = __ldxr(p_shared_owners);
      while (__stxr(v31 + 1, p_shared_owners));
      do
        v32 = __ldaxr(p_shared_owners);
      while (__stlxr(v32 - 1, p_shared_owners));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
        if (!v29)
          goto LABEL_33;
        goto LABEL_32;
      }
    }
    if (v29)
LABEL_32:
      sub_210912F6C((uint64_t)v45);
  }
LABEL_33:
  v44 = &off_24CA7D7F8;
  v33 = v46;
  if (!v46)
    return a1;
  v34 = (unint64_t *)&v46->__shared_owners_;
  do
    v35 = __ldaxr(v34);
  while (__stlxr(v35 - 1, v34));
  if (v35)
    return a1;
  ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
  std::__shared_weak_count::__release_weak(v33);
  return a1;
}

void sub_2108D6734(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108D0464(v1);
  _Unwind_Resume(a1);
}

void sub_2108D6748(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_21090E154((_QWORD *)(v2 - 72));
  sub_2108D63E0(v1);
  _Unwind_Resume(a1);
}

void sub_2108D6764(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108D63E0(v1);
  _Unwind_Resume(a1);
}

void sub_2108D6780(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t (**v34)();
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t (**v37)();
  __int128 v38;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v5 = *(_QWORD *)(a1 + 24);
      v4 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24CA7D7F8;
      v35 = v5;
      v36 = v4;
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      break;
    case 1:
      v13 = *(_QWORD *)(a1 + 24);
      v12 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24CA7D7F8;
      v35 = v13;
      v36 = v12;
      if (v12)
      {
        v14 = (unint64_t *)&v12->__shared_owners_;
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      break;
    case 2:
      v9 = *(_QWORD *)(a1 + 24);
      v8 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24CA7D7F8;
      v35 = v9;
      v36 = v8;
      if (v8)
      {
        v10 = (unint64_t *)&v8->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      break;
    case 3:
      v16 = *(std::__shared_weak_count **)(a1 + 24);
      if (v16 && (v17 = std::__shared_weak_count::lock(v16)) != 0)
      {
        v18 = v17;
        v19 = *(_QWORD *)(a1 + 16);
        v34 = &off_24CA7D7F8;
        if (v19)
        {
          v35 = v19;
          v36 = v17;
          v20 = (unint64_t *)&v17->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
        else
        {
          v35 = 0;
          v36 = 0;
        }
        v22 = (unint64_t *)&v17->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      else
      {
        v35 = 0;
        v36 = 0;
        v34 = &off_24CA7D7F8;
      }
      break;
    default:
      sub_2108B9060();
  }
  sub_21090F1D8((uint64_t)&v34, &v37);
  v24 = v38;
  v38 = 0uLL;
  v25 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v24;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v37 = &off_24CA84E68;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
  if (*((_QWORD *)&v38 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v34 = &off_24CA7D7F8;
  v31 = v36;
  if (v36)
  {
    v32 = (unint64_t *)&v36->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_2108D69BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21090E6B4(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2108D69D0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        p_shared_owners = (unint64_t *)&v2->__shared_owners_;
        do
          v5 = __ldxr(p_shared_owners);
        while (__stxr(v5 + 1, p_shared_owners));
      }
      goto LABEL_28;
    case 1:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        v8 = (unint64_t *)&v2->__shared_owners_;
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      goto LABEL_28;
    case 2:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        v6 = (unint64_t *)&v2->__shared_owners_;
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      goto LABEL_28;
    case 3:
      v10 = *(std::__shared_weak_count **)(a1 + 24);
      if (!v10)
      {
        v15 = 0;
        return v15 == 0;
      }
      v11 = std::__shared_weak_count::lock(v10);
      if (!v11)
        return 1;
      v12 = v11;
      v3 = *(uint64_t **)(a1 + 16);
      if (v3)
      {
        v13 = (unint64_t *)&v11->__shared_owners_;
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
        v2 = v11;
      }
      else
      {
        v2 = 0;
      }
      v17 = (unint64_t *)&v11->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v12);
      }
LABEL_28:
      if (v3)
      {
        v15 = *v3;
        v19 = (std::__shared_weak_count *)v3[1];
        if (v19)
        {
          v20 = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
          do
            v22 = __ldaxr(v20);
          while (__stlxr(v22 - 1, v20));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
      }
      else
      {
        v15 = 0;
      }
      if (!v2)
        return v15 == 0;
      v23 = (unint64_t *)&v2->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (v24)
        return v15 == 0;
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v15 == 0;
    default:
      sub_2108B9060();
  }
}

void sub_2108D6BB0(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  unsigned int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[2];
  std::__shared_weak_count *v10;

  v4 = (uint64_t *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 40);
  if (v5 == 2)
  {
    sub_21090E048(a1, (uint64_t)v4);
  }
  else if (v5 > 1)
  {
    if (v5 != 3)
      sub_2108B9060();
    sub_2108D6288(v9, v4);
    sub_21090DF3C(a1, (uint64_t)v9);
    v9[0] = &off_24CA7D7F8;
    v6 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  else
  {
    sub_21090DF3C(a1, (uint64_t)v4);
  }
}

void sub_2108D6C90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_21090E6B4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2108D6CA4(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t (**v27)();
  uint64_t v28;
  std::__shared_weak_count *v29;

  if (sub_2108D69D0(a2))
  {
    sub_2108FF3F8(a1, 0, (_DWORD *)(a2 + 72));
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v5 = *(_QWORD *)(a2 + 24);
        v4 = *(std::__shared_weak_count **)(a2 + 32);
        v27 = &off_24CA7D7F8;
        v28 = v5;
        v29 = v4;
        if (v4)
        {
          p_shared_owners = (unint64_t *)&v4->__shared_owners_;
          do
            v7 = __ldxr(p_shared_owners);
          while (__stxr(v7 + 1, p_shared_owners));
        }
        break;
      case 1:
        v13 = *(_QWORD *)(a2 + 24);
        v12 = *(std::__shared_weak_count **)(a2 + 32);
        v27 = &off_24CA7D7F8;
        v28 = v13;
        v29 = v12;
        if (v12)
        {
          v14 = (unint64_t *)&v12->__shared_owners_;
          do
            v15 = __ldxr(v14);
          while (__stxr(v15 + 1, v14));
        }
        break;
      case 2:
        v9 = *(_QWORD *)(a2 + 24);
        v8 = *(std::__shared_weak_count **)(a2 + 32);
        v27 = &off_24CA7D7F8;
        v28 = v9;
        v29 = v8;
        if (v8)
        {
          v10 = (unint64_t *)&v8->__shared_owners_;
          do
            v11 = __ldxr(v10);
          while (__stxr(v11 + 1, v10));
        }
        break;
      case 3:
        v16 = *(std::__shared_weak_count **)(a2 + 24);
        if (v16 && (v17 = std::__shared_weak_count::lock(v16)) != 0)
        {
          v18 = v17;
          v19 = *(_QWORD *)(a2 + 16);
          v27 = &off_24CA7D7F8;
          if (v19)
          {
            v28 = v19;
            v29 = v17;
            v20 = (unint64_t *)&v17->__shared_owners_;
            do
              v21 = __ldxr(v20);
            while (__stxr(v21 + 1, v20));
          }
          else
          {
            v28 = 0;
            v29 = 0;
          }
          v22 = (unint64_t *)&v17->__shared_owners_;
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
        else
        {
          v28 = 0;
          v29 = 0;
          v27 = &off_24CA7D7F8;
        }
        break;
      default:
        sub_2108B9060();
    }
    sub_2108D60AC(a1, (uint64_t)&v27);
    v27 = &off_24CA7D7F8;
    v24 = v29;
    if (v29)
    {
      v25 = (unint64_t *)&v29->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
}

void sub_2108D6E80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_21090E6B4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2108D6E94(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[2];
  std::__shared_weak_count *v10;

  v4 = (uint64_t *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 40);
  switch(v5)
  {
    case 2:
      goto LABEL_4;
    case 1:
      sub_21090DD20(a1, (uint64_t)v4);
      break;
    case 0:
LABEL_4:
      sub_21090DC14(a1, (uint64_t)v4);
      return;
    case 3:
      sub_2108D6288(v9, v4);
      sub_21090DC14(a1, (uint64_t)v9);
      v9[0] = &off_24CA7D7F8;
      v6 = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      break;
    default:
      sub_2108B9060();
  }
}

void sub_2108D6F74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_21090E6B4((uint64_t *)va);
  _Unwind_Resume(a1);
}

double sub_2108D6F88(uint64_t a1, uint64_t a2)
{
  unsigned int *v3;
  BOOL v4;
  double result;
  void *__p;
  __int128 v7;
  _BYTE v8[8];
  __int128 v9;

  v3 = (unsigned int *)(a2 + 24);
  if (*(_DWORD *)(a2 + 24))
    v4 = *(_DWORD *)(a2 + 28) == 0;
  else
    v4 = 1;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = &off_24CA7D7F8;
    *(_DWORD *)(a1 + 24) = 0;
  }
  else
  {
    __p = operator new(0x70uLL);
    v7 = xmmword_210A0D5C0;
    strcpy((char *)__p, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp:51");
    sub_21090E728((uint64_t)v8, v3, 0x62363461u, (uint64_t *)&__p, 0);
    if (SHIBYTE(v7) < 0)
      operator delete(__p);
    *(_QWORD *)a1 = &off_24CA7D7F8;
    result = *(double *)&v9;
    *(_OWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 24) = 0;
  }
  return result;
}

void sub_2108D706C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2108D7088(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t (**v21)();
  uint64_t *v22;
  std::__shared_weak_count *v23;
  char v24[8];
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  if (*(_DWORD *)(a2 + 24))
    sub_2108B9060();
  v3 = *(uint64_t **)(a2 + 8);
  v4 = *(std::__shared_weak_count **)(a2 + 16);
  v22 = v3;
  v23 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v21 = &off_24CA7D7B8;
  if (v3)
  {
    v8 = *v3;
    v7 = (std::__shared_weak_count *)v3[1];
    if (!v7)
      goto LABEL_11;
    v9 = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    do
      v11 = __ldaxr(v9);
    while (__stlxr(v11 - 1, v9));
    if (v11)
    {
LABEL_11:
      if (!v8)
        goto LABEL_13;
      goto LABEL_12;
    }
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v8)
LABEL_12:
      sub_210912CA0((uint64_t)v22);
  }
LABEL_13:
  sub_2108D728C((uint64_t)v24, (uint64_t)&v21);
  v12 = v26;
  *(_OWORD *)a1 = v25;
  *(_OWORD *)(a1 + 16) = v12;
  *(_QWORD *)(a1 + 32) = v27;
  if (!v22)
    goto LABEL_21;
  v14 = *v22;
  v13 = (std::__shared_weak_count *)v22[1];
  if (!v13)
    goto LABEL_19;
  v15 = (unint64_t *)&v13->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (v17)
  {
LABEL_19:
    if (!v14)
      goto LABEL_21;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  if (v14)
LABEL_20:
    sub_210912E7C((uint64_t)v22);
LABEL_21:
  v21 = &off_24CA7D7F8;
  v18 = v23;
  if (v23)
  {
    v19 = (unint64_t *)&v23->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_2108D7278(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_21090DE2C((uint64_t *)va);
  _Unwind_Resume(a1);
}

size_t sub_2108D728C(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  size_t result;
  size_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  unint64_t v18;
  uint64_t v19;

  v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v6)
        goto LABEL_9;
    }
  }
  if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h", 733, (uint64_t)"IsValid()", 9, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_20;
  }
LABEL_9:
  v10 = sub_21090DA90(a2, 0);
  v11 = sub_21090EB64(a2);
  v12 = sub_21090EC9C(a2);
  result = sub_21090EDD4(a2);
  v14 = result >> 1;
  v15 = v11;
  v16 = v11 | ((unint64_t)v12 << 32);
  if (v12)
    v17 = v15 == 0;
  else
    v17 = 1;
  if (v17)
    v18 = 0;
  else
    v18 = v16;
  HIDWORD(v19) = v18;
  LODWORD(v19) = 4;
  *(_QWORD *)a1 = v10;
  *(_QWORD *)(a1 + 8) = v19;
  *(_DWORD *)(a1 + 16) = HIDWORD(v18);
  *(_QWORD *)(a1 + 20) = 0x400000001;
  *(_DWORD *)(a1 + 28) = v14;
  *(_QWORD *)(a1 + 32) = v18;
  *(_QWORD *)(a1 + 40) = ((unint64_t)(result >> 1) << 32) | 4;
  if (HIDWORD(v18) * (_DWORD)v14 == -1)
  {
    result = sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4);
    if ((_DWORD)result)
LABEL_20:
      abort();
  }
  return result;
}

void sub_2108D7468(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;

  v3 = (std::__shared_weak_count *)a2[1];
  if (v3 && (v5 = std::__shared_weak_count::lock(v3)) != 0)
  {
    v6 = v5;
    v7 = *a2;
    *a1 = &off_24CA7D7F8;
    if (v7)
    {
      a1[1] = v7;
      a1[2] = v5;
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    else
    {
      a1[1] = 0;
      a1[2] = 0;
    }
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    a1[1] = 0;
    a1[2] = 0;
    *a1 = &off_24CA7D7F8;
  }
  v12 = (uint64_t *)a1[1];
  if (!v12)
    goto LABEL_21;
  v14 = *v12;
  v13 = (std::__shared_weak_count *)v12[1];
  if (v13)
  {
    v15 = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (!v14)
  {
LABEL_21:
    sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 218, (uint64_t)&unk_210A02D2A, 0, (uint64_t)"Attempt to access an expired PixelBuffer. Note that an image buffer  created by an ImageView does not keep the buffer alive.", 124, (void (*)(void **))sub_2109EDDB4);
    abort();
  }
}

void sub_2108D75AC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_21090E6B4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2108D75C0(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24CA7B230;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24CA7C080[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t sub_2108D7624(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v6;
  _OWORD *v7;
  BOOL v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[20];
  int v25;
  uint64_t (**v26)();
  uint64_t *v27;
  std::__shared_weak_count *v28;
  uint64_t v29[2];
  char v30;
  char *v31;

  *(_QWORD *)a1 = off_24CA7B230;
  *(_DWORD *)(a1 + 8) = 0;
  v6 = a1 + 16;
  sub_2108D6F88(a1 + 16, a2);
  v7 = (_OWORD *)(a1 + 48);
  if (*(_DWORD *)(a2 + 24))
    v8 = *(_DWORD *)(a2 + 28) == 0;
  else
    v8 = 1;
  if (v8)
  {
    v9 = *(_OWORD *)a2;
    v10 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 32);
    *v7 = v9;
    *(_OWORD *)(a1 + 64) = v10;
  }
  else
  {
    sub_2108D7088((uint64_t)v7, v6);
  }
  v11 = a3[1];
  v21 = *a3;
  v22 = v11;
  v23 = a3[2];
  if ((sub_2108D7AA0(a1) & 1) != 0)
    return a1;
  sub_2108D7C80(&v26, a1);
  sub_2108D7D74((uint64_t)v24, a1);
  v29[0] = (uint64_t)&v21;
  v29[1] = (uint64_t)v24;
  if (DWORD1(v22) == 1 && v25 == 1)
  {
    sub_2109005E8(v29);
  }
  else
  {
    v30 = 0;
    if (DWORD2(v21) && HIDWORD(v21) && (_DWORD)v22)
    {
      v31 = &v30;
      sub_210900F9C((uint64_t)&v31, (uint64_t)&v21, (uint64_t)v24);
    }
  }
  if (!v27)
    goto LABEL_23;
  v13 = *v27;
  v12 = (std::__shared_weak_count *)v27[1];
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
      if (!v13)
        goto LABEL_23;
      goto LABEL_22;
    }
  }
  if (v13)
LABEL_22:
    sub_210912F6C((uint64_t)v27);
LABEL_23:
  v26 = &off_24CA7D7F8;
  v17 = v28;
  if (!v28)
    return a1;
  v18 = (unint64_t *)&v28->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
    return a1;
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  return a1;
}

void sub_2108D7804(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108D0464(v1);
  _Unwind_Resume(a1);
}

void sub_2108D7818(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_21090E154((_QWORD *)(v2 - 88));
  sub_2108D75C0(v1);
  _Unwind_Resume(a1);
}

void sub_2108D7834(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108D75C0(v1);
  _Unwind_Resume(a1);
}

void sub_2108D7850(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t (**v34)();
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t (**v37)();
  __int128 v38;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v5 = *(_QWORD *)(a1 + 24);
      v4 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24CA7D7F8;
      v35 = v5;
      v36 = v4;
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      break;
    case 1:
      v13 = *(_QWORD *)(a1 + 24);
      v12 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24CA7D7F8;
      v35 = v13;
      v36 = v12;
      if (v12)
      {
        v14 = (unint64_t *)&v12->__shared_owners_;
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      break;
    case 2:
      v9 = *(_QWORD *)(a1 + 24);
      v8 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24CA7D7F8;
      v35 = v9;
      v36 = v8;
      if (v8)
      {
        v10 = (unint64_t *)&v8->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      break;
    case 3:
      v16 = *(std::__shared_weak_count **)(a1 + 24);
      if (v16 && (v17 = std::__shared_weak_count::lock(v16)) != 0)
      {
        v18 = v17;
        v19 = *(_QWORD *)(a1 + 16);
        v34 = &off_24CA7D7F8;
        if (v19)
        {
          v35 = v19;
          v36 = v17;
          v20 = (unint64_t *)&v17->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
        else
        {
          v35 = 0;
          v36 = 0;
        }
        v22 = (unint64_t *)&v17->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      else
      {
        v35 = 0;
        v36 = 0;
        v34 = &off_24CA7D7F8;
      }
      break;
    default:
      sub_2108B9060();
  }
  sub_21090F1D8((uint64_t)&v34, &v37);
  v24 = v38;
  v38 = 0uLL;
  v25 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v24;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v37 = &off_24CA84E68;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
  if (*((_QWORD *)&v38 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v34 = &off_24CA7D7F8;
  v31 = v36;
  if (v36)
  {
    v32 = (unint64_t *)&v36->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_2108D7A8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21090E6B4(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2108D7AA0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        p_shared_owners = (unint64_t *)&v2->__shared_owners_;
        do
          v5 = __ldxr(p_shared_owners);
        while (__stxr(v5 + 1, p_shared_owners));
      }
      goto LABEL_28;
    case 1:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        v8 = (unint64_t *)&v2->__shared_owners_;
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      goto LABEL_28;
    case 2:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        v6 = (unint64_t *)&v2->__shared_owners_;
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      goto LABEL_28;
    case 3:
      v10 = *(std::__shared_weak_count **)(a1 + 24);
      if (!v10)
      {
        v15 = 0;
        return v15 == 0;
      }
      v11 = std::__shared_weak_count::lock(v10);
      if (!v11)
        return 1;
      v12 = v11;
      v3 = *(uint64_t **)(a1 + 16);
      if (v3)
      {
        v13 = (unint64_t *)&v11->__shared_owners_;
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
        v2 = v11;
      }
      else
      {
        v2 = 0;
      }
      v17 = (unint64_t *)&v11->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v12);
      }
LABEL_28:
      if (v3)
      {
        v15 = *v3;
        v19 = (std::__shared_weak_count *)v3[1];
        if (v19)
        {
          v20 = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
          do
            v22 = __ldaxr(v20);
          while (__stlxr(v22 - 1, v20));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
      }
      else
      {
        v15 = 0;
      }
      if (!v2)
        return v15 == 0;
      v23 = (unint64_t *)&v2->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (v24)
        return v15 == 0;
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v15 == 0;
    default:
      sub_2108B9060();
  }
}

void sub_2108D7C80(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  unsigned int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[2];
  std::__shared_weak_count *v10;

  v4 = (uint64_t *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 40);
  if (v5 == 2)
  {
    sub_21090E048(a1, (uint64_t)v4);
  }
  else if (v5 > 1)
  {
    if (v5 != 3)
      sub_2108B9060();
    sub_2108D7468(v9, v4);
    sub_21090DF3C(a1, (uint64_t)v9);
    v9[0] = &off_24CA7D7F8;
    v6 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  else
  {
    sub_21090DF3C(a1, (uint64_t)v4);
  }
}

void sub_2108D7D60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_21090E6B4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2108D7D74(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if (sub_2108D7AA0(a2))
  {
    if (*(_DWORD *)(a2 + 76))
      v4 = *(_DWORD *)(a2 + 72) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 72);
    if (v4)
      v5 = 0;
    LODWORD(v34) = 4;
    *(_QWORD *)((char *)&v34 + 4) = v5;
    v6 = 4 * ((_DWORD)v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5))
      v7 = v7;
    else
      v7 = 0;
    v8 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
    v9 = __PAIR64__(DWORD1(v34), 4);
    LODWORD(v34) = 1;
    *(_QWORD *)((char *)&v34 + 4) = v8;
    v10 = v34;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(_QWORD *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(_QWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24CA7D7F8;
        *((_QWORD *)&v34 + 1) = v12;
        v35 = v11;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        break;
      case 1:
        v20 = *(_QWORD *)(a2 + 24);
        v19 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24CA7D7F8;
        *((_QWORD *)&v34 + 1) = v20;
        v35 = v19;
        if (v19)
        {
          v21 = (unint64_t *)&v19->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        break;
      case 2:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24CA7D7F8;
        *((_QWORD *)&v34 + 1) = v16;
        v35 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 3:
        v23 = *(std::__shared_weak_count **)(a2 + 24);
        if (v23 && (v24 = std::__shared_weak_count::lock(v23)) != 0)
        {
          v25 = v24;
          v26 = *(_QWORD *)(a2 + 16);
          *(_QWORD *)&v34 = &off_24CA7D7F8;
          if (v26)
          {
            *((_QWORD *)&v34 + 1) = v26;
            v35 = v24;
            v27 = (unint64_t *)&v24->__shared_owners_;
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          else
          {
            *((_QWORD *)&v34 + 1) = 0;
            v35 = 0;
          }
          v29 = (unint64_t *)&v24->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        else
        {
          *((_QWORD *)&v34 + 1) = 0;
          v35 = 0;
          *(_QWORD *)&v34 = &off_24CA7D7F8;
        }
        break;
      default:
        sub_2108B9060();
    }
    sub_2108D728C(a1, (uint64_t)&v34);
    *(_QWORD *)&v34 = &off_24CA7D7F8;
    v31 = v35;
    if (v35)
    {
      v32 = (unint64_t *)&v35->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
}

void sub_2108D7FD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21090E6B4(&a9);
  _Unwind_Resume(a1);
}

void sub_2108D7FEC(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[2];
  std::__shared_weak_count *v10;

  v4 = (uint64_t *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 40);
  switch(v5)
  {
    case 2:
      goto LABEL_4;
    case 1:
      sub_21090DD20(a1, (uint64_t)v4);
      break;
    case 0:
LABEL_4:
      sub_21090DC14(a1, (uint64_t)v4);
      return;
    case 3:
      sub_2108D7468(v9, v4);
      sub_21090DC14(a1, (uint64_t)v9);
      v9[0] = &off_24CA7D7F8;
      v6 = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      break;
    default:
      sub_2108B9060();
  }
}

void sub_2108D80CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_21090E6B4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2108D80E0(int a1@<W0>, int a2@<W1>, unsigned int *a3@<X2>, uint64_t a4@<X8>)
{
  BOOL v6;
  unsigned int v8;
  std::__shared_weak_count *v9;
  __int128 v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  void *__p;
  __int128 v33;
  uint64_t (**v34)();
  __int128 v35;

  if (*a3)
    v6 = a3[1] == 0;
  else
    v6 = 1;
  if (v6)
  {
    if (a1 == 3)
    {
      *(_QWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 24) = 3;
    }
    else
    {
      *(_QWORD *)(a4 + 8) = 0;
      *(_QWORD *)(a4 + 16) = 0;
      *(_QWORD *)a4 = &off_24CA7D7F8;
      *(_DWORD *)(a4 + 24) = 0;
    }
  }
  else
  {
    if ((a2 - 1) > 0x25)
      v8 = 0;
    else
      v8 = dword_210A1198C[a2 - 1] | dword_210A118F4[a2 - 1];
    __p = operator new(0x70uLL);
    v33 = xmmword_210A0D5C0;
    strcpy((char *)__p, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp:51");
    sub_21090E728((uint64_t)&v34, a3, v8, (uint64_t *)&__p, 0);
    if (SHIBYTE(v33) < 0)
      operator delete(__p);
    switch(a1)
    {
      case 1:
        v10 = v35;
        if (*((_QWORD *)&v35 + 1))
        {
          v11 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
          do
            v12 = __ldxr(v11);
          while (__stxr(v12 + 1, v11));
        }
        if ((_QWORD)v10)
        {
          v14 = *(_QWORD *)v10;
          v13 = *(std::__shared_weak_count **)(v10 + 8);
          if (v13)
          {
            p_shared_owners = (unint64_t *)&v13->__shared_owners_;
            do
              v16 = __ldxr(p_shared_owners);
            while (__stxr(v16 + 1, p_shared_owners));
            do
              v17 = __ldaxr(p_shared_owners);
            while (__stlxr(v17 - 1, p_shared_owners));
            if (!v17)
            {
              ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
              std::__shared_weak_count::__release_weak(v13);
            }
          }
          if (v14)
            sub_210912CA0(v10);
        }
        *(_OWORD *)(a4 + 8) = v10;
        *(_QWORD *)a4 = &off_24CA7D7B8;
        *(_DWORD *)(a4 + 24) = 1;
        v34 = &off_24CA7D7F8;
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
        if (*((_QWORD *)&v35 + 1))
          goto LABEL_51;
        break;
      case 2:
        v18 = v35;
        if (*((_QWORD *)&v35 + 1))
        {
          v19 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
          do
            v20 = __ldxr(v19);
          while (__stxr(v20 + 1, v19));
        }
        if ((_QWORD)v18)
        {
          v22 = *(_QWORD *)v18;
          v21 = *(std::__shared_weak_count **)(v18 + 8);
          if (v21)
          {
            v23 = (unint64_t *)&v21->__shared_owners_;
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
            do
              v25 = __ldaxr(v23);
            while (__stlxr(v25 - 1, v23));
            if (!v25)
            {
              ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
              std::__shared_weak_count::__release_weak(v21);
            }
          }
          if (v22)
            sub_210912D90(v18);
        }
        *(_OWORD *)(a4 + 8) = v18;
        *(_QWORD *)a4 = &off_24CA7D7D8;
        *(_DWORD *)(a4 + 24) = 2;
        v34 = &off_24CA7D7F8;
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
        if (*((_QWORD *)&v35 + 1))
          goto LABEL_51;
        break;
      case 3:
        v26 = v35;
        if (*((_QWORD *)&v35 + 1))
        {
          v27 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 16);
          do
            v28 = __ldxr(v27);
          while (__stxr(v28 + 1, v27));
          do
            v29 = __ldxr(v27);
          while (__stxr(v29 + 1, v27));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v26 + 1));
        }
        *(_OWORD *)a4 = v26;
        *(_DWORD *)(a4 + 24) = 3;
        v34 = &off_24CA7D7F8;
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
        if (*((_QWORD *)&v35 + 1))
          goto LABEL_51;
        break;
      default:
        *(_QWORD *)a4 = &off_24CA7D7F8;
        *(_OWORD *)(a4 + 8) = v35;
        v35 = 0uLL;
        *(_DWORD *)(a4 + 24) = 0;
        v34 = &off_24CA7D7F8;
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
        if (*((_QWORD *)&v35 + 1))
        {
LABEL_51:
          v30 = (unint64_t *)&v9->__shared_owners_;
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
        break;
    }
  }
}

void sub_2108D8440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v7;
  va_list va;

  va_start(va, a4);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  sub_21090E6B4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2108D84A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2108D84C4(int a1, uint64_t a2, double a3)
{
  uint64_t *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t result;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (**v27)();
  uint64_t *v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  __int128 v31;

  switch(a1)
  {
    case 0:
      if (*(_DWORD *)(a2 + 24))
        goto LABEL_40;
      v3 = *(uint64_t **)(a2 + 8);
      v4 = *(std::__shared_weak_count **)(a2 + 16);
      v28 = v3;
      v29 = v4;
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v6 = __ldxr(p_shared_owners);
        while (__stxr(v6 + 1, p_shared_owners));
      }
      v27 = &off_24CA7D7B8;
      if (v3)
      {
        v8 = *v3;
        v7 = (std::__shared_weak_count *)v3[1];
        if (v7)
        {
          v9 = (unint64_t *)&v7->__shared_owners_;
          do
            v10 = __ldxr(v9);
          while (__stxr(v10 + 1, v9));
          do
            v11 = __ldaxr(v9);
          while (__stlxr(v11 - 1, v9));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
        if (v8)
          sub_210912CA0((uint64_t)v28);
      }
      sub_2108D5054(&v30, (uint64_t)&v27);
      v12 = v31;
      if (v28)
      {
        v14 = *v28;
        v13 = (std::__shared_weak_count *)v28[1];
        if (v13)
        {
          v15 = (unint64_t *)&v13->__shared_owners_;
          do
            v16 = __ldxr(v15);
          while (__stxr(v16 + 1, v15));
          do
            v17 = __ldaxr(v15);
          while (__stlxr(v17 - 1, v15));
          if (!v17)
          {
            v24 = v12;
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
            v12 = v24;
          }
        }
        if (v14)
        {
          v25 = v12;
          sub_210912E7C((uint64_t)v28);
          v12 = v25;
        }
      }
      v27 = &off_24CA7D7F8;
      v18 = v29;
      if (!v29)
        goto LABEL_28;
      v19 = (unint64_t *)&v29->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (v20)
        goto LABEL_28;
      goto LABEL_39;
    case 1:
      if (*(_DWORD *)(a2 + 24) != 1)
        goto LABEL_40;
      goto LABEL_33;
    case 2:
      if (*(_DWORD *)(a2 + 24) != 2)
        goto LABEL_40;
LABEL_33:
      sub_2108D5054(&v30, a2);
      result = v31;
      break;
    case 3:
      if (*(_DWORD *)(a2 + 24) != 3)
LABEL_40:
        sub_2108B9060();
      sub_2108D87A4(&v27, (uint64_t *)a2);
      sub_2108D5054(&v30, (uint64_t)&v27);
      v12 = v31;
      v27 = &off_24CA7D7F8;
      v18 = v29;
      if (!v29)
        goto LABEL_28;
      v22 = (unint64_t *)&v29->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (v23)
      {
LABEL_28:
        result = v12;
      }
      else
      {
LABEL_39:
        v26 = v12;
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
        result = v26;
      }
      break;
    default:
      result = *(_QWORD *)&a3;
      break;
  }
  return result;
}

void sub_2108D877C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_21090E6B4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2108D8790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_21090DE2C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2108D87A4(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;

  v3 = (std::__shared_weak_count *)a2[1];
  if (v3 && (v5 = std::__shared_weak_count::lock(v3)) != 0)
  {
    v6 = v5;
    v7 = *a2;
    *a1 = &off_24CA7D7F8;
    if (v7)
    {
      a1[1] = v7;
      a1[2] = v5;
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    else
    {
      a1[1] = 0;
      a1[2] = 0;
    }
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    a1[1] = 0;
    a1[2] = 0;
    *a1 = &off_24CA7D7F8;
  }
  v12 = (uint64_t *)a1[1];
  if (!v12)
    goto LABEL_21;
  v14 = *v12;
  v13 = (std::__shared_weak_count *)v12[1];
  if (v13)
  {
    v15 = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (!v14)
  {
LABEL_21:
    sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 218, (uint64_t)&unk_210A02D2A, 0, (uint64_t)"Attempt to access an expired PixelBuffer. Note that an image buffer  created by an ImageView does not keep the buffer alive.", 124, (void (*)(void **))sub_2109EDDB4);
    abort();
  }
}

void sub_2108D88E8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_21090E6B4(v1);
  _Unwind_Resume(a1);
}

void sub_2108D88FC(uint64_t a1, _WORD *a2)
{
  __n128 v4;
  int v5;
  _WORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  _WORD *v12;
  int v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _WORD *v22;
  int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t (**v27)();
  uint64_t *v28;
  std::__shared_weak_count *v29;
  _QWORD v30[2];

  if ((sub_2108D9104(a1) & 1) != 0)
    return;
  sub_2108D92E4(&v27, a1);
  sub_2108D93D8((uint64_t *)&v22, a1);
  v30[0] = &v22;
  v30[1] = a2;
  if (v25 == 1)
  {
    sub_210901114(v30, v4);
  }
  else if (v23 && v24)
  {
    v5 = v23 - 1;
    v6 = v22;
    v7 = 2 * v25;
    v8 = v24 - 1;
    if (v24 != 1)
    {
      v9 = v26;
      if (v23 == 1)
      {
        do
        {
          *v6 = *a2;
          v6 += v9;
          --v8;
        }
        while (v8);
      }
      else
      {
        v10 = 0;
        v11 = 2 * v26;
        do
        {
          v12 = v6;
          v13 = v5;
          do
          {
            *v12 = *a2;
            v12 = (_WORD *)((char *)v12 + v7);
            --v13;
          }
          while (v13);
          *v12 = *a2;
          v6 = (_WORD *)((char *)v6 + v11);
          ++v10;
        }
        while (v10 != v8);
      }
    }
    for (; v5; --v5)
    {
      *v6 = *a2;
      v6 = (_WORD *)((char *)v6 + v7);
    }
    *v6 = *a2;
  }
  if (v28)
  {
    v15 = *v28;
    v14 = (std::__shared_weak_count *)v28[1];
    if (!v14)
      goto LABEL_23;
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (v18)
    {
LABEL_23:
      if (!v15)
        goto LABEL_25;
      goto LABEL_24;
    }
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if (v15)
LABEL_24:
      sub_210912F6C((uint64_t)v28);
  }
LABEL_25:
  v27 = &off_24CA7D7F8;
  v19 = v29;
  if (v29)
  {
    v20 = (unint64_t *)&v29->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_2108D8AD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_21090E154((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2108D8AE4(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24CA7B2C0;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24CA7C080[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t sub_2108D8B48(uint64_t a1, unsigned int *a2, __int128 *a3)
{
  uint64_t v6;
  double v7;
  BOOL v8;
  uint64_t v9;
  __n128 v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v20;
  uint64_t v21;
  uint64_t v22[3];
  uint64_t (**v23)();
  uint64_t *v24;
  std::__shared_weak_count *v25;
  uint64_t v26[2];

  *(_QWORD *)a1 = off_24CA7B2C0;
  *(_DWORD *)(a1 + 8) = 0;
  v6 = a1 + 16;
  sub_2108D80E0(0, 3, a2, a1 + 16);
  if (*a2)
    v8 = a2[1] == 0;
  else
    v8 = 1;
  if (v8)
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)a2;
  }
  else
  {
    *(_QWORD *)(a1 + 48) = sub_2108D84C4(0, v6, v7);
    *(_QWORD *)(a1 + 56) = v9;
  }
  v20 = *a3;
  v21 = *((_QWORD *)a3 + 2);
  if ((sub_2108D9104(a1) & 1) != 0)
    return a1;
  sub_2108D92E4(&v23, a1);
  sub_2108D93D8(v22, a1);
  v26[0] = (uint64_t)&v20;
  v26[1] = (uint64_t)v22;
  v10.n128_u64[0] = sub_2109014B4(v26);
  if (!v24)
    goto LABEL_16;
  v12 = *v24;
  v11 = (std::__shared_weak_count *)v24[1];
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v11->__on_zero_shared)(v11, v10);
      std::__shared_weak_count::__release_weak(v11);
      if (!v12)
        goto LABEL_16;
      goto LABEL_15;
    }
  }
  if (v12)
LABEL_15:
    sub_210912F6C((uint64_t)v24);
LABEL_16:
  v23 = &off_24CA7D7F8;
  v16 = v25;
  if (!v25)
    return a1;
  v17 = (unint64_t *)&v25->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (v18)
    return a1;
  ((void (*)(std::__shared_weak_count *, __n128))v16->__on_zero_shared)(v16, v10);
  std::__shared_weak_count::__release_weak(v16);
  return a1;
}

void sub_2108D8CE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108D0464(v1);
  _Unwind_Resume(a1);
}

void sub_2108D8CF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  sub_21090E154((uint64_t *)va);
  sub_2108D8AE4(v8);
  _Unwind_Resume(a1);
}

void sub_2108D8D14(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108D8AE4(v1);
  _Unwind_Resume(a1);
}

void sub_2108D8D30(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t (**v34)();
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t (**v37)();
  __int128 v38;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v5 = *(_QWORD *)(a1 + 24);
      v4 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24CA7D7F8;
      v35 = v5;
      v36 = v4;
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      break;
    case 1:
      v13 = *(_QWORD *)(a1 + 24);
      v12 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24CA7D7F8;
      v35 = v13;
      v36 = v12;
      if (v12)
      {
        v14 = (unint64_t *)&v12->__shared_owners_;
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      break;
    case 2:
      v9 = *(_QWORD *)(a1 + 24);
      v8 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24CA7D7F8;
      v35 = v9;
      v36 = v8;
      if (v8)
      {
        v10 = (unint64_t *)&v8->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      break;
    case 3:
      v16 = *(std::__shared_weak_count **)(a1 + 24);
      if (v16 && (v17 = std::__shared_weak_count::lock(v16)) != 0)
      {
        v18 = v17;
        v19 = *(_QWORD *)(a1 + 16);
        v34 = &off_24CA7D7F8;
        if (v19)
        {
          v35 = v19;
          v36 = v17;
          v20 = (unint64_t *)&v17->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
        else
        {
          v35 = 0;
          v36 = 0;
        }
        v22 = (unint64_t *)&v17->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      else
      {
        v35 = 0;
        v36 = 0;
        v34 = &off_24CA7D7F8;
      }
      break;
    default:
      sub_2108B9060();
  }
  sub_21090F1D8((uint64_t)&v34, &v37);
  v24 = v38;
  v38 = 0uLL;
  v25 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v24;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v37 = &off_24CA84E68;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
  if (*((_QWORD *)&v38 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v34 = &off_24CA7D7F8;
  v31 = v36;
  if (v36)
  {
    v32 = (unint64_t *)&v36->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_2108D8F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21090E6B4(&a9);
  _Unwind_Resume(a1);
}

void sub_2108D8F80(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v5 = *(_QWORD *)(a1 + 24);
      v4 = *(_QWORD *)(a1 + 32);
      *a2 = &off_24CA7D7F8;
      a2[1] = v5;
      a2[2] = v4;
      if (v4)
      {
        v6 = (unint64_t *)(v4 + 8);
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      break;
    case 1:
      v13 = *(_QWORD *)(a1 + 24);
      v12 = *(_QWORD *)(a1 + 32);
      *a2 = &off_24CA7D7F8;
      a2[1] = v13;
      a2[2] = v12;
      if (v12)
      {
        v14 = (unint64_t *)(v12 + 8);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      break;
    case 2:
      v9 = *(_QWORD *)(a1 + 24);
      v8 = *(_QWORD *)(a1 + 32);
      *a2 = &off_24CA7D7F8;
      a2[1] = v9;
      a2[2] = v8;
      if (v8)
      {
        v10 = (unint64_t *)(v8 + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      break;
    case 3:
      v16 = *(std::__shared_weak_count **)(a1 + 24);
      if (v16 && (v17 = std::__shared_weak_count::lock(v16)) != 0)
      {
        v18 = v17;
        v19 = *(_QWORD *)(a1 + 16);
        *a2 = &off_24CA7D7F8;
        if (v19)
        {
          a2[1] = v19;
          a2[2] = v17;
          p_shared_owners = (unint64_t *)&v17->__shared_owners_;
          do
            v21 = __ldxr(p_shared_owners);
          while (__stxr(v21 + 1, p_shared_owners));
        }
        else
        {
          a2[1] = 0;
          a2[2] = 0;
        }
        v22 = (unint64_t *)&v17->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      else
      {
        a2[1] = 0;
        a2[2] = 0;
        *a2 = &off_24CA7D7F8;
      }
      break;
    default:
      sub_2108B9060();
  }
}

uint64_t sub_2108D9104(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        p_shared_owners = (unint64_t *)&v2->__shared_owners_;
        do
          v5 = __ldxr(p_shared_owners);
        while (__stxr(v5 + 1, p_shared_owners));
      }
      goto LABEL_28;
    case 1:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        v8 = (unint64_t *)&v2->__shared_owners_;
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      goto LABEL_28;
    case 2:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        v6 = (unint64_t *)&v2->__shared_owners_;
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      goto LABEL_28;
    case 3:
      v10 = *(std::__shared_weak_count **)(a1 + 24);
      if (!v10)
      {
        v15 = 0;
        return v15 == 0;
      }
      v11 = std::__shared_weak_count::lock(v10);
      if (!v11)
        return 1;
      v12 = v11;
      v3 = *(uint64_t **)(a1 + 16);
      if (v3)
      {
        v13 = (unint64_t *)&v11->__shared_owners_;
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
        v2 = v11;
      }
      else
      {
        v2 = 0;
      }
      v17 = (unint64_t *)&v11->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v12);
      }
LABEL_28:
      if (v3)
      {
        v15 = *v3;
        v19 = (std::__shared_weak_count *)v3[1];
        if (v19)
        {
          v20 = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
          do
            v22 = __ldaxr(v20);
          while (__stlxr(v22 - 1, v20));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
      }
      else
      {
        v15 = 0;
      }
      if (!v2)
        return v15 == 0;
      v23 = (unint64_t *)&v2->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (v24)
        return v15 == 0;
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v15 == 0;
    default:
      sub_2108B9060();
  }
}

void sub_2108D92E4(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  unsigned int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[2];
  std::__shared_weak_count *v10;

  v4 = (uint64_t *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 40);
  if (v5 == 2)
  {
    sub_21090E048(a1, (uint64_t)v4);
  }
  else if (v5 > 1)
  {
    if (v5 != 3)
      sub_2108B9060();
    sub_2108D87A4(v9, v4);
    sub_21090DF3C(a1, (uint64_t)v9);
    v9[0] = &off_24CA7D7F8;
    v6 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  else
  {
    sub_21090DF3C(a1, (uint64_t)v4);
  }
}

void sub_2108D93C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_21090E6B4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2108D93D8(uint64_t *a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t (**v30)();
  uint64_t v31;
  std::__shared_weak_count *v32;

  if (sub_2108D9104(a2))
  {
    if (*(_DWORD *)(a2 + 52))
      v4 = *(_DWORD *)(a2 + 48) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 48);
    if (v4)
      v5 = 0;
    v6 = 0x100000000;
    if (v5 > 0x100000000)
      v6 = v5;
    *a1 = 0;
    a1[1] = v5;
    a1[2] = ((_DWORD)v5 != 0) | (unint64_t)(v6 << 32);
    if (HIDWORD(v5) * (_DWORD)v6 == -1
      && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v8 = *(_QWORD *)(a2 + 24);
        v7 = *(std::__shared_weak_count **)(a2 + 32);
        v30 = &off_24CA7D7F8;
        v31 = v8;
        v32 = v7;
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v10 = __ldxr(p_shared_owners);
          while (__stxr(v10 + 1, p_shared_owners));
        }
        break;
      case 1:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        v30 = &off_24CA7D7F8;
        v31 = v16;
        v32 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 2:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        v30 = &off_24CA7D7F8;
        v31 = v12;
        v32 = v11;
        if (v11)
        {
          v13 = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
        }
        break;
      case 3:
        v19 = *(std::__shared_weak_count **)(a2 + 24);
        if (v19 && (v20 = std::__shared_weak_count::lock(v19)) != 0)
        {
          v21 = v20;
          v22 = *(_QWORD *)(a2 + 16);
          v30 = &off_24CA7D7F8;
          if (v22)
          {
            v31 = v22;
            v32 = v20;
            v23 = (unint64_t *)&v20->__shared_owners_;
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
          }
          else
          {
            v31 = 0;
            v32 = 0;
          }
          v25 = (unint64_t *)&v20->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        else
        {
          v31 = 0;
          v32 = 0;
          v30 = &off_24CA7D7F8;
        }
        break;
      default:
        sub_2108B9060();
    }
    sub_2108D5054(a1, (uint64_t)&v30);
    v30 = &off_24CA7D7F8;
    v27 = v32;
    if (v32)
    {
      v28 = (unint64_t *)&v32->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
  }
}

void sub_2108D9614(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_21090E6B4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2108D9628(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[2];
  std::__shared_weak_count *v10;

  v4 = (uint64_t *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 40);
  switch(v5)
  {
    case 2:
      goto LABEL_4;
    case 1:
      sub_21090DD20(a1, (uint64_t)v4);
      break;
    case 0:
LABEL_4:
      sub_21090DC14(a1, (uint64_t)v4);
      return;
    case 3:
      sub_2108D87A4(v9, v4);
      sub_21090DC14(a1, (uint64_t)v9);
      v9[0] = &off_24CA7D7F8;
      v6 = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      break;
    default:
      sub_2108B9060();
  }
}

void sub_2108D9708(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_21090E6B4((uint64_t *)va);
  _Unwind_Resume(a1);
}

double sub_2108D971C(uint64_t a1, uint64_t a2)
{
  unsigned int *v3;
  BOOL v4;
  double result;
  void *__p;
  __int128 v7;
  _BYTE v8[8];
  __int128 v9;

  v3 = (unsigned int *)(a2 + 24);
  if (*(_DWORD *)(a2 + 24))
    v4 = *(_DWORD *)(a2 + 28) == 0;
  else
    v4 = 1;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = &off_24CA7D7F8;
    *(_DWORD *)(a1 + 24) = 0;
  }
  else
  {
    __p = operator new(0x70uLL);
    v7 = xmmword_210A0D5C0;
    strcpy((char *)__p, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp:51");
    sub_21090E728((uint64_t)v8, v3, 0x32433068u, (uint64_t *)&__p, 0);
    if (SHIBYTE(v7) < 0)
      operator delete(__p);
    *(_QWORD *)a1 = &off_24CA7D7F8;
    result = *(double *)&v9;
    *(_OWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 24) = 0;
  }
  return result;
}

void sub_2108D9800(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2108D981C(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t (**v21)();
  uint64_t *v22;
  std::__shared_weak_count *v23;
  char v24[8];
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  if (*(_DWORD *)(a2 + 24))
    sub_2108B9060();
  v3 = *(uint64_t **)(a2 + 8);
  v4 = *(std::__shared_weak_count **)(a2 + 16);
  v22 = v3;
  v23 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v21 = &off_24CA7D7B8;
  if (v3)
  {
    v8 = *v3;
    v7 = (std::__shared_weak_count *)v3[1];
    if (!v7)
      goto LABEL_11;
    v9 = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    do
      v11 = __ldaxr(v9);
    while (__stlxr(v11 - 1, v9));
    if (v11)
    {
LABEL_11:
      if (!v8)
        goto LABEL_13;
      goto LABEL_12;
    }
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v8)
LABEL_12:
      sub_210912CA0((uint64_t)v22);
  }
LABEL_13:
  sub_2108D9A20((uint64_t)v24, (uint64_t)&v21);
  v12 = v26;
  *(_OWORD *)a1 = v25;
  *(_OWORD *)(a1 + 16) = v12;
  *(_QWORD *)(a1 + 32) = v27;
  if (!v22)
    goto LABEL_21;
  v14 = *v22;
  v13 = (std::__shared_weak_count *)v22[1];
  if (!v13)
    goto LABEL_19;
  v15 = (unint64_t *)&v13->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (v17)
  {
LABEL_19:
    if (!v14)
      goto LABEL_21;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  if (v14)
LABEL_20:
    sub_210912E7C((uint64_t)v22);
LABEL_21:
  v21 = &off_24CA7D7F8;
  v18 = v23;
  if (v23)
  {
    v19 = (unint64_t *)&v23->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_2108D9A0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_21090DE2C((uint64_t *)va);
  _Unwind_Resume(a1);
}

size_t sub_2108D9A20(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  size_t result;
  size_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  unint64_t v18;
  uint64_t v19;

  v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v6)
        goto LABEL_9;
    }
  }
  if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h", 733, (uint64_t)"IsValid()", 9, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_20;
  }
LABEL_9:
  v10 = sub_21090DA90(a2, 0);
  v11 = sub_21090EB64(a2);
  v12 = sub_21090EC9C(a2);
  result = sub_21090EDD4(a2);
  v14 = result >> 1;
  v15 = v11;
  v16 = v11 | ((unint64_t)v12 << 32);
  if (v12)
    v17 = v15 == 0;
  else
    v17 = 1;
  if (v17)
    v18 = 0;
  else
    v18 = v16;
  HIDWORD(v19) = v18;
  LODWORD(v19) = 2;
  *(_QWORD *)a1 = v10;
  *(_QWORD *)(a1 + 8) = v19;
  *(_DWORD *)(a1 + 16) = HIDWORD(v18);
  *(_QWORD *)(a1 + 20) = 0x200000001;
  *(_DWORD *)(a1 + 28) = v14;
  *(_QWORD *)(a1 + 32) = v18;
  *(_QWORD *)(a1 + 40) = ((unint64_t)(result >> 1) << 32) | 2;
  if (HIDWORD(v18) * (_DWORD)v14 == -1)
  {
    result = sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4);
    if ((_DWORD)result)
LABEL_20:
      abort();
  }
  return result;
}

void sub_2108D9BFC(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;

  v3 = (std::__shared_weak_count *)a2[1];
  if (v3 && (v5 = std::__shared_weak_count::lock(v3)) != 0)
  {
    v6 = v5;
    v7 = *a2;
    *a1 = &off_24CA7D7F8;
    if (v7)
    {
      a1[1] = v7;
      a1[2] = v5;
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    else
    {
      a1[1] = 0;
      a1[2] = 0;
    }
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    a1[1] = 0;
    a1[2] = 0;
    *a1 = &off_24CA7D7F8;
  }
  v12 = (uint64_t *)a1[1];
  if (!v12)
    goto LABEL_21;
  v14 = *v12;
  v13 = (std::__shared_weak_count *)v12[1];
  if (v13)
  {
    v15 = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (!v14)
  {
LABEL_21:
    sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 218, (uint64_t)&unk_210A02D2A, 0, (uint64_t)"Attempt to access an expired PixelBuffer. Note that an image buffer  created by an ImageView does not keep the buffer alive.", 124, (void (*)(void **))sub_2109EDDB4);
    abort();
  }
}

void sub_2108D9D40(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_21090E6B4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2108D9D54(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24CA7B350;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24CA7C080[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t sub_2108D9DB8(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v6;
  _OWORD *v7;
  BOOL v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __n128 v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _OWORD v22[3];
  _BYTE v23[48];
  uint64_t (**v24)();
  uint64_t *v25;
  std::__shared_weak_count *v26;
  uint64_t v27[2];

  *(_QWORD *)a1 = off_24CA7B350;
  *(_DWORD *)(a1 + 8) = 0;
  v6 = a1 + 16;
  sub_2108D971C(a1 + 16, a2);
  v7 = (_OWORD *)(a1 + 48);
  if (*(_DWORD *)(a2 + 24))
    v8 = *(_DWORD *)(a2 + 28) == 0;
  else
    v8 = 1;
  if (v8)
  {
    v9 = *(_OWORD *)a2;
    v10 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 32);
    *v7 = v9;
    *(_OWORD *)(a1 + 64) = v10;
  }
  else
  {
    sub_2108D981C((uint64_t)v7, v6);
  }
  v11 = a3[1];
  v22[0] = *a3;
  v22[1] = v11;
  v22[2] = a3[2];
  if ((sub_2108DA1E4(a1) & 1) != 0)
    return a1;
  sub_2108DA3C4(&v24, a1);
  sub_2108DA4B8((uint64_t)v23, a1);
  v27[0] = (uint64_t)v22;
  v27[1] = (uint64_t)v23;
  v12.n128_u64[0] = sub_210901EE4(v27);
  if (!v25)
    goto LABEL_16;
  v14 = *v25;
  v13 = (std::__shared_weak_count *)v25[1];
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v13->__on_zero_shared)(v13, v12);
      std::__shared_weak_count::__release_weak(v13);
      if (!v14)
        goto LABEL_16;
      goto LABEL_15;
    }
  }
  if (v14)
LABEL_15:
    sub_210912F6C((uint64_t)v25);
LABEL_16:
  v24 = &off_24CA7D7F8;
  v18 = v26;
  if (!v26)
    return a1;
  v19 = (unint64_t *)&v26->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
    return a1;
  ((void (*)(std::__shared_weak_count *, __n128))v18->__on_zero_shared)(v18, v12);
  std::__shared_weak_count::__release_weak(v18);
  return a1;
}

void sub_2108D9F48(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108D0464(v1);
  _Unwind_Resume(a1);
}

void sub_2108D9F5C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_21090E154((_QWORD *)(v2 - 72));
  sub_2108D9D54(v1);
  _Unwind_Resume(a1);
}

void sub_2108D9F78(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108D9D54(v1);
  _Unwind_Resume(a1);
}

void sub_2108D9F94(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t (**v34)();
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t (**v37)();
  __int128 v38;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v5 = *(_QWORD *)(a1 + 24);
      v4 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24CA7D7F8;
      v35 = v5;
      v36 = v4;
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      break;
    case 1:
      v13 = *(_QWORD *)(a1 + 24);
      v12 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24CA7D7F8;
      v35 = v13;
      v36 = v12;
      if (v12)
      {
        v14 = (unint64_t *)&v12->__shared_owners_;
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      break;
    case 2:
      v9 = *(_QWORD *)(a1 + 24);
      v8 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24CA7D7F8;
      v35 = v9;
      v36 = v8;
      if (v8)
      {
        v10 = (unint64_t *)&v8->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      break;
    case 3:
      v16 = *(std::__shared_weak_count **)(a1 + 24);
      if (v16 && (v17 = std::__shared_weak_count::lock(v16)) != 0)
      {
        v18 = v17;
        v19 = *(_QWORD *)(a1 + 16);
        v34 = &off_24CA7D7F8;
        if (v19)
        {
          v35 = v19;
          v36 = v17;
          v20 = (unint64_t *)&v17->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
        else
        {
          v35 = 0;
          v36 = 0;
        }
        v22 = (unint64_t *)&v17->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      else
      {
        v35 = 0;
        v36 = 0;
        v34 = &off_24CA7D7F8;
      }
      break;
    default:
      sub_2108B9060();
  }
  sub_21090F1D8((uint64_t)&v34, &v37);
  v24 = v38;
  v38 = 0uLL;
  v25 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v24;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v37 = &off_24CA84E68;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
  if (*((_QWORD *)&v38 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v34 = &off_24CA7D7F8;
  v31 = v36;
  if (v36)
  {
    v32 = (unint64_t *)&v36->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_2108DA1D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21090E6B4(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2108DA1E4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        p_shared_owners = (unint64_t *)&v2->__shared_owners_;
        do
          v5 = __ldxr(p_shared_owners);
        while (__stxr(v5 + 1, p_shared_owners));
      }
      goto LABEL_28;
    case 1:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        v8 = (unint64_t *)&v2->__shared_owners_;
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      goto LABEL_28;
    case 2:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        v6 = (unint64_t *)&v2->__shared_owners_;
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      goto LABEL_28;
    case 3:
      v10 = *(std::__shared_weak_count **)(a1 + 24);
      if (!v10)
      {
        v15 = 0;
        return v15 == 0;
      }
      v11 = std::__shared_weak_count::lock(v10);
      if (!v11)
        return 1;
      v12 = v11;
      v3 = *(uint64_t **)(a1 + 16);
      if (v3)
      {
        v13 = (unint64_t *)&v11->__shared_owners_;
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
        v2 = v11;
      }
      else
      {
        v2 = 0;
      }
      v17 = (unint64_t *)&v11->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v12);
      }
LABEL_28:
      if (v3)
      {
        v15 = *v3;
        v19 = (std::__shared_weak_count *)v3[1];
        if (v19)
        {
          v20 = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
          do
            v22 = __ldaxr(v20);
          while (__stlxr(v22 - 1, v20));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
      }
      else
      {
        v15 = 0;
      }
      if (!v2)
        return v15 == 0;
      v23 = (unint64_t *)&v2->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (v24)
        return v15 == 0;
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v15 == 0;
    default:
      sub_2108B9060();
  }
}

void sub_2108DA3C4(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  unsigned int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[2];
  std::__shared_weak_count *v10;

  v4 = (uint64_t *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 40);
  if (v5 == 2)
  {
    sub_21090E048(a1, (uint64_t)v4);
  }
  else if (v5 > 1)
  {
    if (v5 != 3)
      sub_2108B9060();
    sub_2108D9BFC(v9, v4);
    sub_21090DF3C(a1, (uint64_t)v9);
    v9[0] = &off_24CA7D7F8;
    v6 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  else
  {
    sub_21090DF3C(a1, (uint64_t)v4);
  }
}

void sub_2108DA4A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_21090E6B4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2108DA4B8(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if (sub_2108DA1E4(a2))
  {
    if (*(_DWORD *)(a2 + 76))
      v4 = *(_DWORD *)(a2 + 72) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 72);
    if (v4)
      v5 = 0;
    LODWORD(v34) = 2;
    *(_QWORD *)((char *)&v34 + 4) = v5;
    v6 = 2 * ((_DWORD)v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5))
      v7 = v7;
    else
      v7 = 0;
    v8 = v6 & 0x1FFFFFFFFLL | ((unint64_t)(v7 >> 1) << 33);
    v9 = __PAIR64__(DWORD1(v34), 2);
    LODWORD(v34) = 1;
    *(_QWORD *)((char *)&v34 + 4) = v8;
    v10 = v34;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(_QWORD *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(_QWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24CA7D7F8;
        *((_QWORD *)&v34 + 1) = v12;
        v35 = v11;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        break;
      case 1:
        v20 = *(_QWORD *)(a2 + 24);
        v19 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24CA7D7F8;
        *((_QWORD *)&v34 + 1) = v20;
        v35 = v19;
        if (v19)
        {
          v21 = (unint64_t *)&v19->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        break;
      case 2:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24CA7D7F8;
        *((_QWORD *)&v34 + 1) = v16;
        v35 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 3:
        v23 = *(std::__shared_weak_count **)(a2 + 24);
        if (v23 && (v24 = std::__shared_weak_count::lock(v23)) != 0)
        {
          v25 = v24;
          v26 = *(_QWORD *)(a2 + 16);
          *(_QWORD *)&v34 = &off_24CA7D7F8;
          if (v26)
          {
            *((_QWORD *)&v34 + 1) = v26;
            v35 = v24;
            v27 = (unint64_t *)&v24->__shared_owners_;
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          else
          {
            *((_QWORD *)&v34 + 1) = 0;
            v35 = 0;
          }
          v29 = (unint64_t *)&v24->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        else
        {
          *((_QWORD *)&v34 + 1) = 0;
          v35 = 0;
          *(_QWORD *)&v34 = &off_24CA7D7F8;
        }
        break;
      default:
        sub_2108B9060();
    }
    sub_2108D9A20(a1, (uint64_t)&v34);
    *(_QWORD *)&v34 = &off_24CA7D7F8;
    v31 = v35;
    if (v35)
    {
      v32 = (unint64_t *)&v35->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
}

void sub_2108DA71C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21090E6B4(&a9);
  _Unwind_Resume(a1);
}

void sub_2108DA730(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[2];
  std::__shared_weak_count *v10;

  v4 = (uint64_t *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 40);
  switch(v5)
  {
    case 2:
      goto LABEL_4;
    case 1:
      sub_21090DD20(a1, (uint64_t)v4);
      break;
    case 0:
LABEL_4:
      sub_21090DC14(a1, (uint64_t)v4);
      return;
    case 3:
      sub_2108D9BFC(v9, v4);
      sub_21090DC14(a1, (uint64_t)v9);
      v9[0] = &off_24CA7D7F8;
      v6 = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      break;
    default:
      sub_2108B9060();
  }
}

void sub_2108DA810(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_21090E6B4((uint64_t *)va);
  _Unwind_Resume(a1);
}

double sub_2108DA824(uint64_t a1, uint64_t a2)
{
  unsigned int *v3;
  BOOL v4;
  double result;
  void *__p;
  __int128 v7;
  _BYTE v8[8];
  __int128 v9;

  v3 = (unsigned int *)(a2 + 24);
  if (*(_DWORD *)(a2 + 24))
    v4 = *(_DWORD *)(a2 + 28) == 0;
  else
    v4 = 1;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = &off_24CA7D7F8;
    *(_DWORD *)(a1 + 24) = 0;
  }
  else
  {
    __p = operator new(0x70uLL);
    v7 = xmmword_210A0D5C0;
    strcpy((char *)__p, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp:51");
    sub_21090E728((uint64_t)v8, v3, 0x52476841u, (uint64_t *)&__p, 0);
    if (SHIBYTE(v7) < 0)
      operator delete(__p);
    *(_QWORD *)a1 = &off_24CA7D7F8;
    result = *(double *)&v9;
    *(_OWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 24) = 0;
  }
  return result;
}

void sub_2108DA908(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2108DA924(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t (**v21)();
  uint64_t *v22;
  std::__shared_weak_count *v23;
  char v24[8];
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  if (*(_DWORD *)(a2 + 24))
    sub_2108B9060();
  v3 = *(uint64_t **)(a2 + 8);
  v4 = *(std::__shared_weak_count **)(a2 + 16);
  v22 = v3;
  v23 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v21 = &off_24CA7D7B8;
  if (v3)
  {
    v8 = *v3;
    v7 = (std::__shared_weak_count *)v3[1];
    if (!v7)
      goto LABEL_11;
    v9 = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    do
      v11 = __ldaxr(v9);
    while (__stlxr(v11 - 1, v9));
    if (v11)
    {
LABEL_11:
      if (!v8)
        goto LABEL_13;
      goto LABEL_12;
    }
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v8)
LABEL_12:
      sub_210912CA0((uint64_t)v22);
  }
LABEL_13:
  sub_2108D728C((uint64_t)v24, (uint64_t)&v21);
  v12 = v26;
  *(_OWORD *)a1 = v25;
  *(_OWORD *)(a1 + 16) = v12;
  *(_QWORD *)(a1 + 32) = v27;
  if (!v22)
    goto LABEL_21;
  v14 = *v22;
  v13 = (std::__shared_weak_count *)v22[1];
  if (!v13)
    goto LABEL_19;
  v15 = (unint64_t *)&v13->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (v17)
  {
LABEL_19:
    if (!v14)
      goto LABEL_21;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  if (v14)
LABEL_20:
    sub_210912E7C((uint64_t)v22);
LABEL_21:
  v21 = &off_24CA7D7F8;
  v18 = v23;
  if (v23)
  {
    v19 = (unint64_t *)&v23->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_2108DAB14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_21090DE2C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2108DAB28(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;

  v3 = (std::__shared_weak_count *)a2[1];
  if (v3 && (v5 = std::__shared_weak_count::lock(v3)) != 0)
  {
    v6 = v5;
    v7 = *a2;
    *a1 = &off_24CA7D7F8;
    if (v7)
    {
      a1[1] = v7;
      a1[2] = v5;
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    else
    {
      a1[1] = 0;
      a1[2] = 0;
    }
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    a1[1] = 0;
    a1[2] = 0;
    *a1 = &off_24CA7D7F8;
  }
  v12 = (uint64_t *)a1[1];
  if (!v12)
    goto LABEL_21;
  v14 = *v12;
  v13 = (std::__shared_weak_count *)v12[1];
  if (v13)
  {
    v15 = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (!v14)
  {
LABEL_21:
    sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 218, (uint64_t)&unk_210A02D2A, 0, (uint64_t)"Attempt to access an expired PixelBuffer. Note that an image buffer  created by an ImageView does not keep the buffer alive.", 124, (void (*)(void **))sub_2109EDDB4);
    abort();
  }
}

void sub_2108DAC6C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_21090E6B4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2108DAC80(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24CA7B3E0;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24CA7C080[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t sub_2108DACE4(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v6;
  _OWORD *v7;
  BOOL v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __n128 v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _OWORD v22[3];
  _BYTE v23[48];
  uint64_t (**v24)();
  uint64_t *v25;
  std::__shared_weak_count *v26;
  _QWORD v27[2];

  *(_QWORD *)a1 = off_24CA7B3E0;
  *(_DWORD *)(a1 + 8) = 0;
  v6 = a1 + 16;
  sub_2108DA824(a1 + 16, a2);
  v7 = (_OWORD *)(a1 + 48);
  if (*(_DWORD *)(a2 + 24))
    v8 = *(_DWORD *)(a2 + 28) == 0;
  else
    v8 = 1;
  if (v8)
  {
    v9 = *(_OWORD *)a2;
    v10 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 32);
    *v7 = v9;
    *(_OWORD *)(a1 + 64) = v10;
  }
  else
  {
    sub_2108DA924((uint64_t)v7, v6);
  }
  v11 = a3[1];
  v22[0] = *a3;
  v22[1] = v11;
  v22[2] = a3[2];
  if ((sub_2108DB110(a1) & 1) != 0)
    return a1;
  sub_2108DB2F0(&v24, a1);
  sub_2108DB3E4((uint64_t)v23, a1);
  v27[0] = v22;
  v27[1] = v23;
  v12.n128_f64[0] = sub_210902AF8(v27);
  if (!v25)
    goto LABEL_16;
  v14 = *v25;
  v13 = (std::__shared_weak_count *)v25[1];
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v13->__on_zero_shared)(v13, v12);
      std::__shared_weak_count::__release_weak(v13);
      if (!v14)
        goto LABEL_16;
      goto LABEL_15;
    }
  }
  if (v14)
LABEL_15:
    sub_210912F6C((uint64_t)v25);
LABEL_16:
  v24 = &off_24CA7D7F8;
  v18 = v26;
  if (!v26)
    return a1;
  v19 = (unint64_t *)&v26->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
    return a1;
  ((void (*)(std::__shared_weak_count *, __n128))v18->__on_zero_shared)(v18, v12);
  std::__shared_weak_count::__release_weak(v18);
  return a1;
}

void sub_2108DAE74(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108D0464(v1);
  _Unwind_Resume(a1);
}

void sub_2108DAE88(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_21090E154((_QWORD *)(v2 - 72));
  sub_2108DAC80(v1);
  _Unwind_Resume(a1);
}

void sub_2108DAEA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108DAC80(v1);
  _Unwind_Resume(a1);
}

void sub_2108DAEC0(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t (**v34)();
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t (**v37)();
  __int128 v38;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v5 = *(_QWORD *)(a1 + 24);
      v4 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24CA7D7F8;
      v35 = v5;
      v36 = v4;
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      break;
    case 1:
      v13 = *(_QWORD *)(a1 + 24);
      v12 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24CA7D7F8;
      v35 = v13;
      v36 = v12;
      if (v12)
      {
        v14 = (unint64_t *)&v12->__shared_owners_;
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      break;
    case 2:
      v9 = *(_QWORD *)(a1 + 24);
      v8 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24CA7D7F8;
      v35 = v9;
      v36 = v8;
      if (v8)
      {
        v10 = (unint64_t *)&v8->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      break;
    case 3:
      v16 = *(std::__shared_weak_count **)(a1 + 24);
      if (v16 && (v17 = std::__shared_weak_count::lock(v16)) != 0)
      {
        v18 = v17;
        v19 = *(_QWORD *)(a1 + 16);
        v34 = &off_24CA7D7F8;
        if (v19)
        {
          v35 = v19;
          v36 = v17;
          v20 = (unint64_t *)&v17->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
        else
        {
          v35 = 0;
          v36 = 0;
        }
        v22 = (unint64_t *)&v17->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      else
      {
        v35 = 0;
        v36 = 0;
        v34 = &off_24CA7D7F8;
      }
      break;
    default:
      sub_2108B9060();
  }
  sub_21090F1D8((uint64_t)&v34, &v37);
  v24 = v38;
  v38 = 0uLL;
  v25 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v24;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v37 = &off_24CA84E68;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
  if (*((_QWORD *)&v38 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v34 = &off_24CA7D7F8;
  v31 = v36;
  if (v36)
  {
    v32 = (unint64_t *)&v36->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_2108DB0FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21090E6B4(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2108DB110(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        p_shared_owners = (unint64_t *)&v2->__shared_owners_;
        do
          v5 = __ldxr(p_shared_owners);
        while (__stxr(v5 + 1, p_shared_owners));
      }
      goto LABEL_28;
    case 1:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        v8 = (unint64_t *)&v2->__shared_owners_;
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      goto LABEL_28;
    case 2:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        v6 = (unint64_t *)&v2->__shared_owners_;
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      goto LABEL_28;
    case 3:
      v10 = *(std::__shared_weak_count **)(a1 + 24);
      if (!v10)
      {
        v15 = 0;
        return v15 == 0;
      }
      v11 = std::__shared_weak_count::lock(v10);
      if (!v11)
        return 1;
      v12 = v11;
      v3 = *(uint64_t **)(a1 + 16);
      if (v3)
      {
        v13 = (unint64_t *)&v11->__shared_owners_;
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
        v2 = v11;
      }
      else
      {
        v2 = 0;
      }
      v17 = (unint64_t *)&v11->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v12);
      }
LABEL_28:
      if (v3)
      {
        v15 = *v3;
        v19 = (std::__shared_weak_count *)v3[1];
        if (v19)
        {
          v20 = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
          do
            v22 = __ldaxr(v20);
          while (__stlxr(v22 - 1, v20));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
      }
      else
      {
        v15 = 0;
      }
      if (!v2)
        return v15 == 0;
      v23 = (unint64_t *)&v2->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (v24)
        return v15 == 0;
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v15 == 0;
    default:
      sub_2108B9060();
  }
}

void sub_2108DB2F0(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  unsigned int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[2];
  std::__shared_weak_count *v10;

  v4 = (uint64_t *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 40);
  if (v5 == 2)
  {
    sub_21090E048(a1, (uint64_t)v4);
  }
  else if (v5 > 1)
  {
    if (v5 != 3)
      sub_2108B9060();
    sub_2108DAB28(v9, v4);
    sub_21090DF3C(a1, (uint64_t)v9);
    v9[0] = &off_24CA7D7F8;
    v6 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  else
  {
    sub_21090DF3C(a1, (uint64_t)v4);
  }
}

void sub_2108DB3D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_21090E6B4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2108DB3E4(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if (sub_2108DB110(a2))
  {
    if (*(_DWORD *)(a2 + 76))
      v4 = *(_DWORD *)(a2 + 72) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 72);
    if (v4)
      v5 = 0;
    LODWORD(v34) = 4;
    *(_QWORD *)((char *)&v34 + 4) = v5;
    v6 = 4 * ((_DWORD)v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5))
      v7 = v7;
    else
      v7 = 0;
    v8 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
    v9 = __PAIR64__(DWORD1(v34), 4);
    LODWORD(v34) = 1;
    *(_QWORD *)((char *)&v34 + 4) = v8;
    v10 = v34;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(_QWORD *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(_QWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24CA7D7F8;
        *((_QWORD *)&v34 + 1) = v12;
        v35 = v11;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        break;
      case 1:
        v20 = *(_QWORD *)(a2 + 24);
        v19 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24CA7D7F8;
        *((_QWORD *)&v34 + 1) = v20;
        v35 = v19;
        if (v19)
        {
          v21 = (unint64_t *)&v19->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        break;
      case 2:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24CA7D7F8;
        *((_QWORD *)&v34 + 1) = v16;
        v35 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 3:
        v23 = *(std::__shared_weak_count **)(a2 + 24);
        if (v23 && (v24 = std::__shared_weak_count::lock(v23)) != 0)
        {
          v25 = v24;
          v26 = *(_QWORD *)(a2 + 16);
          *(_QWORD *)&v34 = &off_24CA7D7F8;
          if (v26)
          {
            *((_QWORD *)&v34 + 1) = v26;
            v35 = v24;
            v27 = (unint64_t *)&v24->__shared_owners_;
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          else
          {
            *((_QWORD *)&v34 + 1) = 0;
            v35 = 0;
          }
          v29 = (unint64_t *)&v24->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        else
        {
          *((_QWORD *)&v34 + 1) = 0;
          v35 = 0;
          *(_QWORD *)&v34 = &off_24CA7D7F8;
        }
        break;
      default:
        sub_2108B9060();
    }
    sub_2108D728C(a1, (uint64_t)&v34);
    *(_QWORD *)&v34 = &off_24CA7D7F8;
    v31 = v35;
    if (v35)
    {
      v32 = (unint64_t *)&v35->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
}

void sub_2108DB648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21090E6B4(&a9);
  _Unwind_Resume(a1);
}

void sub_2108DB65C(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[2];
  std::__shared_weak_count *v10;

  v4 = (uint64_t *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 40);
  switch(v5)
  {
    case 2:
      goto LABEL_4;
    case 1:
      sub_21090DD20(a1, (uint64_t)v4);
      break;
    case 0:
LABEL_4:
      sub_21090DC14(a1, (uint64_t)v4);
      return;
    case 3:
      sub_2108DAB28(v9, v4);
      sub_21090DC14(a1, (uint64_t)v9);
      v9[0] = &off_24CA7D7F8;
      v6 = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      break;
    default:
      sub_2108B9060();
  }
}

void sub_2108DB73C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_21090E6B4((uint64_t *)va);
  _Unwind_Resume(a1);
}

double sub_2108DB750(uint64_t a1, unsigned int *a2)
{
  BOOL v3;
  double result;
  void *__p;
  __int128 v7;
  _BYTE v8[8];
  __int128 v9;

  if (*a2)
    v3 = a2[1] == 0;
  else
    v3 = 1;
  if (v3)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = &off_24CA7D7F8;
    *(_DWORD *)(a1 + 24) = 0;
  }
  else
  {
    __p = operator new(0x70uLL);
    v7 = xmmword_210A0D5C0;
    strcpy((char *)__p, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp:51");
    sub_21090E728((uint64_t)v8, a2, 0x4C303066u, (uint64_t *)&__p, 0);
    if (SHIBYTE(v7) < 0)
      operator delete(__p);
    *(_QWORD *)a1 = &off_24CA7D7F8;
    result = *(double *)&v9;
    *(_OWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 24) = 0;
  }
  return result;
}

void sub_2108DB834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2108DB850(uint64_t a1)
{
  uint64_t *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t (**v20)();
  uint64_t *v21;
  std::__shared_weak_count *v22;
  uint64_t v23[2];

  if (*(_DWORD *)(a1 + 24))
    sub_2108B9060();
  v1 = *(uint64_t **)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  v21 = v1;
  v22 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v20 = &off_24CA7D7B8;
  if (v1)
  {
    v6 = *v1;
    v5 = (std::__shared_weak_count *)v1[1];
    if (!v5)
      goto LABEL_11;
    v7 = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    do
      v9 = __ldaxr(v7);
    while (__stlxr(v9 - 1, v7));
    if (v9)
    {
LABEL_11:
      if (!v6)
        goto LABEL_13;
      goto LABEL_12;
    }
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (v6)
LABEL_12:
      sub_210912CA0((uint64_t)v21);
  }
LABEL_13:
  sub_2108DBA38(v23, (uint64_t)&v20);
  v10 = v23[1];
  if (v21)
  {
    v12 = *v21;
    v11 = (std::__shared_weak_count *)v21[1];
    if (v11)
    {
      v13 = (unint64_t *)&v11->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
      do
        v15 = __ldaxr(v13);
      while (__stlxr(v15 - 1, v13));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
        if (!v12)
          goto LABEL_21;
        goto LABEL_20;
      }
    }
    if (v12)
LABEL_20:
      sub_210912E7C((uint64_t)v21);
  }
LABEL_21:
  v20 = &off_24CA7D7F8;
  v16 = v22;
  if (v22)
  {
    v17 = (unint64_t *)&v22->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  return v10;
}

void sub_2108DBA24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21090DE2C(&a9);
  _Unwind_Resume(a1);
}

size_t sub_2108DBA38(uint64_t *a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  size_t result;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;

  v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v6)
        goto LABEL_9;
    }
  }
  if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h", 733, (uint64_t)"IsValid()", 9, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_20;
  }
LABEL_9:
  v10 = sub_21090DA90(a2, 0);
  v11 = sub_21090EB64(a2);
  v12 = sub_21090EC9C(a2);
  result = sub_21090EDD4(a2);
  v14 = v11;
  v15 = v11 | ((unint64_t)v12 << 32);
  if (v12)
    v16 = v14 == 0;
  else
    v16 = 1;
  if (v16)
    v17 = 0;
  else
    v17 = v15;
  *a1 = v10;
  a1[1] = v17;
  a1[2] = ((unint64_t)(result >> 2) << 32) | 1;
  if (HIDWORD(v17) * (result >> 2) == -1)
  {
    result = sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4);
    if ((_DWORD)result)
LABEL_20:
      abort();
  }
  return result;
}

void sub_2108DBB98(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;

  v3 = (std::__shared_weak_count *)a2[1];
  if (v3 && (v5 = std::__shared_weak_count::lock(v3)) != 0)
  {
    v6 = v5;
    v7 = *a2;
    *a1 = &off_24CA7D7F8;
    if (v7)
    {
      a1[1] = v7;
      a1[2] = v5;
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    else
    {
      a1[1] = 0;
      a1[2] = 0;
    }
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    a1[1] = 0;
    a1[2] = 0;
    *a1 = &off_24CA7D7F8;
  }
  v12 = (uint64_t *)a1[1];
  if (!v12)
    goto LABEL_21;
  v14 = *v12;
  v13 = (std::__shared_weak_count *)v12[1];
  if (v13)
  {
    v15 = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (!v14)
  {
LABEL_21:
    sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 218, (uint64_t)&unk_210A02D2A, 0, (uint64_t)"Attempt to access an expired PixelBuffer. Note that an image buffer  created by an ImageView does not keep the buffer alive.", 124, (void (*)(void **))sub_2109EDDB4);
    abort();
  }
}

void sub_2108DBCDC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_21090E6B4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2108DBCF0(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24CA7B470;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24CA7C080[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t sub_2108DBD54(uint64_t a1, unsigned int *a2, __int128 *a3)
{
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  __n128 v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v19;
  uint64_t v20;
  uint64_t v21[3];
  uint64_t (**v22)();
  uint64_t *v23;
  std::__shared_weak_count *v24;

  *(_QWORD *)a1 = off_24CA7B470;
  *(_DWORD *)(a1 + 8) = 0;
  v6 = a1 + 16;
  sub_2108DB750(a1 + 16, a2);
  if (*a2)
    v7 = a2[1] == 0;
  else
    v7 = 1;
  if (v7)
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)a2;
  }
  else
  {
    *(_QWORD *)(a1 + 48) = sub_2108DB850(v6);
    *(_QWORD *)(a1 + 56) = v8;
  }
  v19 = *a3;
  v20 = *((_QWORD *)a3 + 2);
  if ((sub_2108DC174(a1) & 1) != 0)
    return a1;
  sub_2108DC354(&v22, a1);
  sub_2108DC448(v21, a1);
  v9.n128_f32[0] = sub_2109030FC((uint64_t)&v19, (uint64_t)v21);
  if (!v23)
    goto LABEL_16;
  v11 = *v23;
  v10 = (std::__shared_weak_count *)v23[1];
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v10->__on_zero_shared)(v10, v9);
      std::__shared_weak_count::__release_weak(v10);
      if (!v11)
        goto LABEL_16;
      goto LABEL_15;
    }
  }
  if (v11)
LABEL_15:
    sub_210912F6C((uint64_t)v23);
LABEL_16:
  v22 = &off_24CA7D7F8;
  v15 = v24;
  if (!v24)
    return a1;
  v16 = (unint64_t *)&v24->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (v17)
    return a1;
  ((void (*)(std::__shared_weak_count *, __n128))v15->__on_zero_shared)(v15, v9);
  std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_2108DBED8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108D0464(v1);
  _Unwind_Resume(a1);
}

void sub_2108DBEEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  sub_21090E154((uint64_t *)va);
  sub_2108DBCF0(v8);
  _Unwind_Resume(a1);
}

void sub_2108DBF08(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108DBCF0(v1);
  _Unwind_Resume(a1);
}

void sub_2108DBF24(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t (**v34)();
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t (**v37)();
  __int128 v38;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v5 = *(_QWORD *)(a1 + 24);
      v4 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24CA7D7F8;
      v35 = v5;
      v36 = v4;
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      break;
    case 1:
      v13 = *(_QWORD *)(a1 + 24);
      v12 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24CA7D7F8;
      v35 = v13;
      v36 = v12;
      if (v12)
      {
        v14 = (unint64_t *)&v12->__shared_owners_;
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      break;
    case 2:
      v9 = *(_QWORD *)(a1 + 24);
      v8 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24CA7D7F8;
      v35 = v9;
      v36 = v8;
      if (v8)
      {
        v10 = (unint64_t *)&v8->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      break;
    case 3:
      v16 = *(std::__shared_weak_count **)(a1 + 24);
      if (v16 && (v17 = std::__shared_weak_count::lock(v16)) != 0)
      {
        v18 = v17;
        v19 = *(_QWORD *)(a1 + 16);
        v34 = &off_24CA7D7F8;
        if (v19)
        {
          v35 = v19;
          v36 = v17;
          v20 = (unint64_t *)&v17->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
        else
        {
          v35 = 0;
          v36 = 0;
        }
        v22 = (unint64_t *)&v17->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      else
      {
        v35 = 0;
        v36 = 0;
        v34 = &off_24CA7D7F8;
      }
      break;
    default:
      sub_2108B9060();
  }
  sub_21090F1D8((uint64_t)&v34, &v37);
  v24 = v38;
  v38 = 0uLL;
  v25 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v24;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v37 = &off_24CA84E68;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
  if (*((_QWORD *)&v38 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v34 = &off_24CA7D7F8;
  v31 = v36;
  if (v36)
  {
    v32 = (unint64_t *)&v36->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_2108DC160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21090E6B4(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2108DC174(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        p_shared_owners = (unint64_t *)&v2->__shared_owners_;
        do
          v5 = __ldxr(p_shared_owners);
        while (__stxr(v5 + 1, p_shared_owners));
      }
      goto LABEL_28;
    case 1:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        v8 = (unint64_t *)&v2->__shared_owners_;
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      goto LABEL_28;
    case 2:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        v6 = (unint64_t *)&v2->__shared_owners_;
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      goto LABEL_28;
    case 3:
      v10 = *(std::__shared_weak_count **)(a1 + 24);
      if (!v10)
      {
        v15 = 0;
        return v15 == 0;
      }
      v11 = std::__shared_weak_count::lock(v10);
      if (!v11)
        return 1;
      v12 = v11;
      v3 = *(uint64_t **)(a1 + 16);
      if (v3)
      {
        v13 = (unint64_t *)&v11->__shared_owners_;
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
        v2 = v11;
      }
      else
      {
        v2 = 0;
      }
      v17 = (unint64_t *)&v11->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v12);
      }
LABEL_28:
      if (v3)
      {
        v15 = *v3;
        v19 = (std::__shared_weak_count *)v3[1];
        if (v19)
        {
          v20 = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
          do
            v22 = __ldaxr(v20);
          while (__stlxr(v22 - 1, v20));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
      }
      else
      {
        v15 = 0;
      }
      if (!v2)
        return v15 == 0;
      v23 = (unint64_t *)&v2->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (v24)
        return v15 == 0;
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v15 == 0;
    default:
      sub_2108B9060();
  }
}

void sub_2108DC354(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  unsigned int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[2];
  std::__shared_weak_count *v10;

  v4 = (uint64_t *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 40);
  if (v5 == 2)
  {
    sub_21090E048(a1, (uint64_t)v4);
  }
  else if (v5 > 1)
  {
    if (v5 != 3)
      sub_2108B9060();
    sub_2108DBB98(v9, v4);
    sub_21090DF3C(a1, (uint64_t)v9);
    v9[0] = &off_24CA7D7F8;
    v6 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  else
  {
    sub_21090DF3C(a1, (uint64_t)v4);
  }
}

void sub_2108DC434(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_21090E6B4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2108DC448(uint64_t *a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t (**v30)();
  uint64_t v31;
  std::__shared_weak_count *v32;

  if (sub_2108DC174(a2))
  {
    if (*(_DWORD *)(a2 + 52))
      v4 = *(_DWORD *)(a2 + 48) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 48);
    if (v4)
      v5 = 0;
    v6 = 0x100000000;
    if (v5 > 0x100000000)
      v6 = v5;
    *a1 = 0;
    a1[1] = v5;
    a1[2] = ((_DWORD)v5 != 0) | (unint64_t)(v6 << 32);
    if (HIDWORD(v5) * (_DWORD)v6 == -1
      && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v8 = *(_QWORD *)(a2 + 24);
        v7 = *(std::__shared_weak_count **)(a2 + 32);
        v30 = &off_24CA7D7F8;
        v31 = v8;
        v32 = v7;
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v10 = __ldxr(p_shared_owners);
          while (__stxr(v10 + 1, p_shared_owners));
        }
        break;
      case 1:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        v30 = &off_24CA7D7F8;
        v31 = v16;
        v32 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 2:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        v30 = &off_24CA7D7F8;
        v31 = v12;
        v32 = v11;
        if (v11)
        {
          v13 = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
        }
        break;
      case 3:
        v19 = *(std::__shared_weak_count **)(a2 + 24);
        if (v19 && (v20 = std::__shared_weak_count::lock(v19)) != 0)
        {
          v21 = v20;
          v22 = *(_QWORD *)(a2 + 16);
          v30 = &off_24CA7D7F8;
          if (v22)
          {
            v31 = v22;
            v32 = v20;
            v23 = (unint64_t *)&v20->__shared_owners_;
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
          }
          else
          {
            v31 = 0;
            v32 = 0;
          }
          v25 = (unint64_t *)&v20->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        else
        {
          v31 = 0;
          v32 = 0;
          v30 = &off_24CA7D7F8;
        }
        break;
      default:
        sub_2108B9060();
    }
    sub_2108DBA38(a1, (uint64_t)&v30);
    v30 = &off_24CA7D7F8;
    v27 = v32;
    if (v32)
    {
      v28 = (unint64_t *)&v32->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
  }
}

void sub_2108DC684(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_21090E6B4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2108DC698(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[2];
  std::__shared_weak_count *v10;

  v4 = (uint64_t *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 40);
  switch(v5)
  {
    case 2:
      goto LABEL_4;
    case 1:
      sub_21090DD20(a1, (uint64_t)v4);
      break;
    case 0:
LABEL_4:
      sub_21090DC14(a1, (uint64_t)v4);
      return;
    case 3:
      sub_2108DBB98(v9, v4);
      sub_21090DC14(a1, (uint64_t)v9);
      v9[0] = &off_24CA7D7F8;
      v6 = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      break;
    default:
      sub_2108B9060();
  }
}

void sub_2108DC778(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_21090E6B4((uint64_t *)va);
  _Unwind_Resume(a1);
}

double sub_2108DC78C(uint64_t a1, uint64_t a2)
{
  unsigned int *v3;
  BOOL v4;
  double result;
  void *__p;
  __int128 v7;
  _BYTE v8[8];
  __int128 v9;

  v3 = (unsigned int *)(a2 + 24);
  if (*(_DWORD *)(a2 + 24))
    v4 = *(_DWORD *)(a2 + 28) == 0;
  else
    v4 = 1;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = &off_24CA7D7F8;
    *(_DWORD *)(a1 + 24) = 0;
  }
  else
  {
    __p = operator new(0x70uLL);
    v7 = xmmword_210A0D5C0;
    strcpy((char *)__p, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp:51");
    sub_21090E728((uint64_t)v8, v3, 0x32433066u, (uint64_t *)&__p, 0);
    if (SHIBYTE(v7) < 0)
      operator delete(__p);
    *(_QWORD *)a1 = &off_24CA7D7F8;
    result = *(double *)&v9;
    *(_OWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 24) = 0;
  }
  return result;
}

void sub_2108DC870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2108DC88C(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t (**v21)();
  uint64_t *v22;
  std::__shared_weak_count *v23;
  char v24[8];
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  if (*(_DWORD *)(a2 + 24))
    sub_2108B9060();
  v3 = *(uint64_t **)(a2 + 8);
  v4 = *(std::__shared_weak_count **)(a2 + 16);
  v22 = v3;
  v23 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v21 = &off_24CA7D7B8;
  if (v3)
  {
    v8 = *v3;
    v7 = (std::__shared_weak_count *)v3[1];
    if (!v7)
      goto LABEL_11;
    v9 = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    do
      v11 = __ldaxr(v9);
    while (__stlxr(v11 - 1, v9));
    if (v11)
    {
LABEL_11:
      if (!v8)
        goto LABEL_13;
      goto LABEL_12;
    }
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v8)
LABEL_12:
      sub_210912CA0((uint64_t)v22);
  }
LABEL_13:
  sub_2108DCA90((uint64_t)v24, (uint64_t)&v21);
  v12 = v26;
  *(_OWORD *)a1 = v25;
  *(_OWORD *)(a1 + 16) = v12;
  *(_QWORD *)(a1 + 32) = v27;
  if (!v22)
    goto LABEL_21;
  v14 = *v22;
  v13 = (std::__shared_weak_count *)v22[1];
  if (!v13)
    goto LABEL_19;
  v15 = (unint64_t *)&v13->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (v17)
  {
LABEL_19:
    if (!v14)
      goto LABEL_21;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  if (v14)
LABEL_20:
    sub_210912E7C((uint64_t)v22);
LABEL_21:
  v21 = &off_24CA7D7F8;
  v18 = v23;
  if (v23)
  {
    v19 = (unint64_t *)&v23->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_2108DCA7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_21090DE2C((uint64_t *)va);
  _Unwind_Resume(a1);
}

size_t sub_2108DCA90(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  size_t result;
  size_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  unint64_t v18;
  uint64_t v19;

  v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v6)
        goto LABEL_9;
    }
  }
  if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h", 733, (uint64_t)"IsValid()", 9, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_20;
  }
LABEL_9:
  v10 = sub_21090DA90(a2, 0);
  v11 = sub_21090EB64(a2);
  v12 = sub_21090EC9C(a2);
  result = sub_21090EDD4(a2);
  v14 = result >> 2;
  v15 = v11;
  v16 = v11 | ((unint64_t)v12 << 32);
  if (v12)
    v17 = v15 == 0;
  else
    v17 = 1;
  if (v17)
    v18 = 0;
  else
    v18 = v16;
  HIDWORD(v19) = v18;
  LODWORD(v19) = 2;
  *(_QWORD *)a1 = v10;
  *(_QWORD *)(a1 + 8) = v19;
  *(_DWORD *)(a1 + 16) = HIDWORD(v18);
  *(_QWORD *)(a1 + 20) = 0x200000001;
  *(_DWORD *)(a1 + 28) = v14;
  *(_QWORD *)(a1 + 32) = v18;
  *(_QWORD *)(a1 + 40) = ((unint64_t)(result >> 2) << 32) | 2;
  if (HIDWORD(v18) * (_DWORD)v14 == -1)
  {
    result = sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4);
    if ((_DWORD)result)
LABEL_20:
      abort();
  }
  return result;
}

void sub_2108DCC6C(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;

  v3 = (std::__shared_weak_count *)a2[1];
  if (v3 && (v5 = std::__shared_weak_count::lock(v3)) != 0)
  {
    v6 = v5;
    v7 = *a2;
    *a1 = &off_24CA7D7F8;
    if (v7)
    {
      a1[1] = v7;
      a1[2] = v5;
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    else
    {
      a1[1] = 0;
      a1[2] = 0;
    }
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    a1[1] = 0;
    a1[2] = 0;
    *a1 = &off_24CA7D7F8;
  }
  v12 = (uint64_t *)a1[1];
  if (!v12)
    goto LABEL_21;
  v14 = *v12;
  v13 = (std::__shared_weak_count *)v12[1];
  if (v13)
  {
    v15 = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (!v14)
  {
LABEL_21:
    sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 218, (uint64_t)&unk_210A02D2A, 0, (uint64_t)"Attempt to access an expired PixelBuffer. Note that an image buffer  created by an ImageView does not keep the buffer alive.", 124, (void (*)(void **))sub_2109EDDB4);
    abort();
  }
}

void sub_2108DCDB0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_21090E6B4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2108DCDC4(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24CA7B500;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24CA7C080[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t sub_2108DCE28(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v6;
  _OWORD *v7;
  BOOL v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __n128 v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _OWORD v22[3];
  _BYTE v23[48];
  uint64_t (**v24)();
  uint64_t *v25;
  std::__shared_weak_count *v26;
  uint64_t v27[2];

  *(_QWORD *)a1 = off_24CA7B500;
  *(_DWORD *)(a1 + 8) = 0;
  v6 = a1 + 16;
  sub_2108DC78C(a1 + 16, a2);
  v7 = (_OWORD *)(a1 + 48);
  if (*(_DWORD *)(a2 + 24))
    v8 = *(_DWORD *)(a2 + 28) == 0;
  else
    v8 = 1;
  if (v8)
  {
    v9 = *(_OWORD *)a2;
    v10 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 32);
    *v7 = v9;
    *(_OWORD *)(a1 + 64) = v10;
  }
  else
  {
    sub_2108DC88C((uint64_t)v7, v6);
  }
  v11 = a3[1];
  v22[0] = *a3;
  v22[1] = v11;
  v22[2] = a3[2];
  if ((sub_2108DD254(a1) & 1) != 0)
    return a1;
  sub_2108DD434(&v24, a1);
  sub_2108DD528((uint64_t)v23, a1);
  v27[0] = (uint64_t)v22;
  v27[1] = (uint64_t)v23;
  v12.n128_f32[0] = sub_210903C68(v27);
  if (!v25)
    goto LABEL_16;
  v14 = *v25;
  v13 = (std::__shared_weak_count *)v25[1];
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v13->__on_zero_shared)(v13, v12);
      std::__shared_weak_count::__release_weak(v13);
      if (!v14)
        goto LABEL_16;
      goto LABEL_15;
    }
  }
  if (v14)
LABEL_15:
    sub_210912F6C((uint64_t)v25);
LABEL_16:
  v24 = &off_24CA7D7F8;
  v18 = v26;
  if (!v26)
    return a1;
  v19 = (unint64_t *)&v26->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
    return a1;
  ((void (*)(std::__shared_weak_count *, __n128))v18->__on_zero_shared)(v18, v12);
  std::__shared_weak_count::__release_weak(v18);
  return a1;
}

void sub_2108DCFB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108D0464(v1);
  _Unwind_Resume(a1);
}

void sub_2108DCFCC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_21090E154((_QWORD *)(v2 - 72));
  sub_2108DCDC4(v1);
  _Unwind_Resume(a1);
}

void sub_2108DCFE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108DCDC4(v1);
  _Unwind_Resume(a1);
}

void sub_2108DD004(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t (**v34)();
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t (**v37)();
  __int128 v38;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v5 = *(_QWORD *)(a1 + 24);
      v4 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24CA7D7F8;
      v35 = v5;
      v36 = v4;
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      break;
    case 1:
      v13 = *(_QWORD *)(a1 + 24);
      v12 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24CA7D7F8;
      v35 = v13;
      v36 = v12;
      if (v12)
      {
        v14 = (unint64_t *)&v12->__shared_owners_;
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      break;
    case 2:
      v9 = *(_QWORD *)(a1 + 24);
      v8 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24CA7D7F8;
      v35 = v9;
      v36 = v8;
      if (v8)
      {
        v10 = (unint64_t *)&v8->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      break;
    case 3:
      v16 = *(std::__shared_weak_count **)(a1 + 24);
      if (v16 && (v17 = std::__shared_weak_count::lock(v16)) != 0)
      {
        v18 = v17;
        v19 = *(_QWORD *)(a1 + 16);
        v34 = &off_24CA7D7F8;
        if (v19)
        {
          v35 = v19;
          v36 = v17;
          v20 = (unint64_t *)&v17->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
        else
        {
          v35 = 0;
          v36 = 0;
        }
        v22 = (unint64_t *)&v17->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      else
      {
        v35 = 0;
        v36 = 0;
        v34 = &off_24CA7D7F8;
      }
      break;
    default:
      sub_2108B9060();
  }
  sub_21090F1D8((uint64_t)&v34, &v37);
  v24 = v38;
  v38 = 0uLL;
  v25 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v24;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v37 = &off_24CA84E68;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
  if (*((_QWORD *)&v38 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v34 = &off_24CA7D7F8;
  v31 = v36;
  if (v36)
  {
    v32 = (unint64_t *)&v36->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_2108DD240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21090E6B4(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2108DD254(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        p_shared_owners = (unint64_t *)&v2->__shared_owners_;
        do
          v5 = __ldxr(p_shared_owners);
        while (__stxr(v5 + 1, p_shared_owners));
      }
      goto LABEL_28;
    case 1:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        v8 = (unint64_t *)&v2->__shared_owners_;
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      goto LABEL_28;
    case 2:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        v6 = (unint64_t *)&v2->__shared_owners_;
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      goto LABEL_28;
    case 3:
      v10 = *(std::__shared_weak_count **)(a1 + 24);
      if (!v10)
      {
        v15 = 0;
        return v15 == 0;
      }
      v11 = std::__shared_weak_count::lock(v10);
      if (!v11)
        return 1;
      v12 = v11;
      v3 = *(uint64_t **)(a1 + 16);
      if (v3)
      {
        v13 = (unint64_t *)&v11->__shared_owners_;
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
        v2 = v11;
      }
      else
      {
        v2 = 0;
      }
      v17 = (unint64_t *)&v11->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v12);
      }
LABEL_28:
      if (v3)
      {
        v15 = *v3;
        v19 = (std::__shared_weak_count *)v3[1];
        if (v19)
        {
          v20 = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
          do
            v22 = __ldaxr(v20);
          while (__stlxr(v22 - 1, v20));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
      }
      else
      {
        v15 = 0;
      }
      if (!v2)
        return v15 == 0;
      v23 = (unint64_t *)&v2->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (v24)
        return v15 == 0;
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v15 == 0;
    default:
      sub_2108B9060();
  }
}

void sub_2108DD434(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  unsigned int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[2];
  std::__shared_weak_count *v10;

  v4 = (uint64_t *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 40);
  if (v5 == 2)
  {
    sub_21090E048(a1, (uint64_t)v4);
  }
  else if (v5 > 1)
  {
    if (v5 != 3)
      sub_2108B9060();
    sub_2108DCC6C(v9, v4);
    sub_21090DF3C(a1, (uint64_t)v9);
    v9[0] = &off_24CA7D7F8;
    v6 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  else
  {
    sub_21090DF3C(a1, (uint64_t)v4);
  }
}

void sub_2108DD514(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_21090E6B4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2108DD528(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if (sub_2108DD254(a2))
  {
    if (*(_DWORD *)(a2 + 76))
      v4 = *(_DWORD *)(a2 + 72) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 72);
    if (v4)
      v5 = 0;
    LODWORD(v34) = 2;
    *(_QWORD *)((char *)&v34 + 4) = v5;
    v6 = 2 * ((_DWORD)v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5))
      v7 = v7;
    else
      v7 = 0;
    v8 = v6 & 0x1FFFFFFFFLL | ((unint64_t)(v7 >> 1) << 33);
    v9 = __PAIR64__(DWORD1(v34), 2);
    LODWORD(v34) = 1;
    *(_QWORD *)((char *)&v34 + 4) = v8;
    v10 = v34;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(_QWORD *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(_QWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24CA7D7F8;
        *((_QWORD *)&v34 + 1) = v12;
        v35 = v11;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        break;
      case 1:
        v20 = *(_QWORD *)(a2 + 24);
        v19 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24CA7D7F8;
        *((_QWORD *)&v34 + 1) = v20;
        v35 = v19;
        if (v19)
        {
          v21 = (unint64_t *)&v19->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        break;
      case 2:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24CA7D7F8;
        *((_QWORD *)&v34 + 1) = v16;
        v35 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 3:
        v23 = *(std::__shared_weak_count **)(a2 + 24);
        if (v23 && (v24 = std::__shared_weak_count::lock(v23)) != 0)
        {
          v25 = v24;
          v26 = *(_QWORD *)(a2 + 16);
          *(_QWORD *)&v34 = &off_24CA7D7F8;
          if (v26)
          {
            *((_QWORD *)&v34 + 1) = v26;
            v35 = v24;
            v27 = (unint64_t *)&v24->__shared_owners_;
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          else
          {
            *((_QWORD *)&v34 + 1) = 0;
            v35 = 0;
          }
          v29 = (unint64_t *)&v24->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        else
        {
          *((_QWORD *)&v34 + 1) = 0;
          v35 = 0;
          *(_QWORD *)&v34 = &off_24CA7D7F8;
        }
        break;
      default:
        sub_2108B9060();
    }
    sub_2108DCA90(a1, (uint64_t)&v34);
    *(_QWORD *)&v34 = &off_24CA7D7F8;
    v31 = v35;
    if (v35)
    {
      v32 = (unint64_t *)&v35->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
}

void sub_2108DD78C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21090E6B4(&a9);
  _Unwind_Resume(a1);
}

void sub_2108DD7A0(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[2];
  std::__shared_weak_count *v10;

  v4 = (uint64_t *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 40);
  switch(v5)
  {
    case 2:
      goto LABEL_4;
    case 1:
      sub_21090DD20(a1, (uint64_t)v4);
      break;
    case 0:
LABEL_4:
      sub_21090DC14(a1, (uint64_t)v4);
      return;
    case 3:
      sub_2108DCC6C(v9, v4);
      sub_21090DC14(a1, (uint64_t)v9);
      v9[0] = &off_24CA7D7F8;
      v6 = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      break;
    default:
      sub_2108B9060();
  }
}

void sub_2108DD880(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_21090E6B4((uint64_t *)va);
  _Unwind_Resume(a1);
}

double sub_2108DD894(uint64_t a1, uint64_t a2)
{
  unsigned int *v3;
  BOOL v4;
  double result;
  void *__p;
  __int128 v7;
  _BYTE v8[8];
  __int128 v9;

  v3 = (unsigned int *)(a2 + 24);
  if (*(_DWORD *)(a2 + 24))
    v4 = *(_DWORD *)(a2 + 28) == 0;
  else
    v4 = 1;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = &off_24CA7D7F8;
    *(_DWORD *)(a1 + 24) = 0;
  }
  else
  {
    __p = operator new(0x70uLL);
    v7 = xmmword_210A0D5C0;
    strcpy((char *)__p, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp:51");
    sub_21090E728((uint64_t)v8, v3, 0x52476641u, (uint64_t *)&__p, 0);
    if (SHIBYTE(v7) < 0)
      operator delete(__p);
    *(_QWORD *)a1 = &off_24CA7D7F8;
    result = *(double *)&v9;
    *(_OWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 24) = 0;
  }
  return result;
}

void sub_2108DD978(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2108DD994(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t (**v21)();
  uint64_t *v22;
  std::__shared_weak_count *v23;
  char v24[8];
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  if (*(_DWORD *)(a2 + 24))
    sub_2108B9060();
  v3 = *(uint64_t **)(a2 + 8);
  v4 = *(std::__shared_weak_count **)(a2 + 16);
  v22 = v3;
  v23 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v21 = &off_24CA7D7B8;
  if (v3)
  {
    v8 = *v3;
    v7 = (std::__shared_weak_count *)v3[1];
    if (!v7)
      goto LABEL_11;
    v9 = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    do
      v11 = __ldaxr(v9);
    while (__stlxr(v11 - 1, v9));
    if (v11)
    {
LABEL_11:
      if (!v8)
        goto LABEL_13;
      goto LABEL_12;
    }
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v8)
LABEL_12:
      sub_210912CA0((uint64_t)v22);
  }
LABEL_13:
  sub_2108DDB98((uint64_t)v24, (uint64_t)&v21);
  v12 = v26;
  *(_OWORD *)a1 = v25;
  *(_OWORD *)(a1 + 16) = v12;
  *(_QWORD *)(a1 + 32) = v27;
  if (!v22)
    goto LABEL_21;
  v14 = *v22;
  v13 = (std::__shared_weak_count *)v22[1];
  if (!v13)
    goto LABEL_19;
  v15 = (unint64_t *)&v13->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (v17)
  {
LABEL_19:
    if (!v14)
      goto LABEL_21;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  if (v14)
LABEL_20:
    sub_210912E7C((uint64_t)v22);
LABEL_21:
  v21 = &off_24CA7D7F8;
  v18 = v23;
  if (v23)
  {
    v19 = (unint64_t *)&v23->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_2108DDB84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_21090DE2C((uint64_t *)va);
  _Unwind_Resume(a1);
}

size_t sub_2108DDB98(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  size_t result;
  size_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  unint64_t v18;
  uint64_t v19;

  v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v6)
        goto LABEL_9;
    }
  }
  if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h", 733, (uint64_t)"IsValid()", 9, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_20;
  }
LABEL_9:
  v10 = sub_21090DA90(a2, 0);
  v11 = sub_21090EB64(a2);
  v12 = sub_21090EC9C(a2);
  result = sub_21090EDD4(a2);
  v14 = result >> 2;
  v15 = v11;
  v16 = v11 | ((unint64_t)v12 << 32);
  if (v12)
    v17 = v15 == 0;
  else
    v17 = 1;
  if (v17)
    v18 = 0;
  else
    v18 = v16;
  HIDWORD(v19) = v18;
  LODWORD(v19) = 4;
  *(_QWORD *)a1 = v10;
  *(_QWORD *)(a1 + 8) = v19;
  *(_DWORD *)(a1 + 16) = HIDWORD(v18);
  *(_QWORD *)(a1 + 20) = 0x400000001;
  *(_DWORD *)(a1 + 28) = v14;
  *(_QWORD *)(a1 + 32) = v18;
  *(_QWORD *)(a1 + 40) = ((unint64_t)(result >> 2) << 32) | 4;
  if (HIDWORD(v18) * (_DWORD)v14 == -1)
  {
    result = sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4);
    if ((_DWORD)result)
LABEL_20:
      abort();
  }
  return result;
}

void sub_2108DDD74(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;

  v3 = (std::__shared_weak_count *)a2[1];
  if (v3 && (v5 = std::__shared_weak_count::lock(v3)) != 0)
  {
    v6 = v5;
    v7 = *a2;
    *a1 = &off_24CA7D7F8;
    if (v7)
    {
      a1[1] = v7;
      a1[2] = v5;
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    else
    {
      a1[1] = 0;
      a1[2] = 0;
    }
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    a1[1] = 0;
    a1[2] = 0;
    *a1 = &off_24CA7D7F8;
  }
  v12 = (uint64_t *)a1[1];
  if (!v12)
    goto LABEL_21;
  v14 = *v12;
  v13 = (std::__shared_weak_count *)v12[1];
  if (v13)
  {
    v15 = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (!v14)
  {
LABEL_21:
    sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 218, (uint64_t)&unk_210A02D2A, 0, (uint64_t)"Attempt to access an expired PixelBuffer. Note that an image buffer  created by an ImageView does not keep the buffer alive.", 124, (void (*)(void **))sub_2109EDDB4);
    abort();
  }
}

void sub_2108DDEB8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_21090E6B4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2108DDECC(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24CA7B590;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24CA7C080[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t sub_2108DDF30(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v6;
  _OWORD *v7;
  BOOL v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __n128 v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[20];
  int v26;
  uint64_t (**v27)();
  uint64_t *v28;
  std::__shared_weak_count *v29;
  uint64_t v30[2];
  char v31;
  char *v32;

  *(_QWORD *)a1 = off_24CA7B590;
  *(_DWORD *)(a1 + 8) = 0;
  v6 = a1 + 16;
  sub_2108DD894(a1 + 16, a2);
  v7 = (_OWORD *)(a1 + 48);
  if (*(_DWORD *)(a2 + 24))
    v8 = *(_DWORD *)(a2 + 28) == 0;
  else
    v8 = 1;
  if (v8)
  {
    v9 = *(_OWORD *)a2;
    v10 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 32);
    *v7 = v9;
    *(_OWORD *)(a1 + 64) = v10;
  }
  else
  {
    sub_2108DD994((uint64_t)v7, v6);
  }
  v11 = a3[1];
  v22 = *a3;
  v23 = v11;
  v24 = a3[2];
  if ((sub_2108DE3AC(a1) & 1) != 0)
    return a1;
  sub_2108DE58C(&v27, a1);
  sub_2108DE680((uint64_t)v25, a1);
  v30[0] = (uint64_t)&v22;
  v30[1] = (uint64_t)v25;
  if (DWORD1(v23) == 1 && v26 == 1)
  {
    sub_210903DA4(v30);
  }
  else
  {
    v31 = 0;
    if (DWORD2(v22) && HIDWORD(v22) && (_DWORD)v23)
    {
      v32 = &v31;
      v12.n128_f32[0] = sub_210904698((uint64_t)&v32, (uint64_t)&v22, (uint64_t)v25);
    }
  }
  if (!v28)
    goto LABEL_23;
  v14 = *v28;
  v13 = (std::__shared_weak_count *)v28[1];
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v13->__on_zero_shared)(v13, v12);
      std::__shared_weak_count::__release_weak(v13);
      if (!v14)
        goto LABEL_23;
      goto LABEL_22;
    }
  }
  if (v14)
LABEL_22:
    sub_210912F6C((uint64_t)v28);
LABEL_23:
  v27 = &off_24CA7D7F8;
  v18 = v29;
  if (!v29)
    return a1;
  v19 = (unint64_t *)&v29->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
    return a1;
  ((void (*)(std::__shared_weak_count *, __n128))v18->__on_zero_shared)(v18, v12);
  std::__shared_weak_count::__release_weak(v18);
  return a1;
}

void sub_2108DE110(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108D0464(v1);
  _Unwind_Resume(a1);
}

void sub_2108DE124(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_21090E154((_QWORD *)(v2 - 88));
  sub_2108DDECC(v1);
  _Unwind_Resume(a1);
}

void sub_2108DE140(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108DDECC(v1);
  _Unwind_Resume(a1);
}

void sub_2108DE15C(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t (**v34)();
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t (**v37)();
  __int128 v38;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v5 = *(_QWORD *)(a1 + 24);
      v4 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24CA7D7F8;
      v35 = v5;
      v36 = v4;
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      break;
    case 1:
      v13 = *(_QWORD *)(a1 + 24);
      v12 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24CA7D7F8;
      v35 = v13;
      v36 = v12;
      if (v12)
      {
        v14 = (unint64_t *)&v12->__shared_owners_;
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      break;
    case 2:
      v9 = *(_QWORD *)(a1 + 24);
      v8 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24CA7D7F8;
      v35 = v9;
      v36 = v8;
      if (v8)
      {
        v10 = (unint64_t *)&v8->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      break;
    case 3:
      v16 = *(std::__shared_weak_count **)(a1 + 24);
      if (v16 && (v17 = std::__shared_weak_count::lock(v16)) != 0)
      {
        v18 = v17;
        v19 = *(_QWORD *)(a1 + 16);
        v34 = &off_24CA7D7F8;
        if (v19)
        {
          v35 = v19;
          v36 = v17;
          v20 = (unint64_t *)&v17->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
        else
        {
          v35 = 0;
          v36 = 0;
        }
        v22 = (unint64_t *)&v17->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      else
      {
        v35 = 0;
        v36 = 0;
        v34 = &off_24CA7D7F8;
      }
      break;
    default:
      sub_2108B9060();
  }
  sub_21090F1D8((uint64_t)&v34, &v37);
  v24 = v38;
  v38 = 0uLL;
  v25 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v24;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v37 = &off_24CA84E68;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
  if (*((_QWORD *)&v38 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v34 = &off_24CA7D7F8;
  v31 = v36;
  if (v36)
  {
    v32 = (unint64_t *)&v36->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_2108DE398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21090E6B4(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2108DE3AC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        p_shared_owners = (unint64_t *)&v2->__shared_owners_;
        do
          v5 = __ldxr(p_shared_owners);
        while (__stxr(v5 + 1, p_shared_owners));
      }
      goto LABEL_28;
    case 1:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        v8 = (unint64_t *)&v2->__shared_owners_;
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      goto LABEL_28;
    case 2:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        v6 = (unint64_t *)&v2->__shared_owners_;
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      goto LABEL_28;
    case 3:
      v10 = *(std::__shared_weak_count **)(a1 + 24);
      if (!v10)
      {
        v15 = 0;
        return v15 == 0;
      }
      v11 = std::__shared_weak_count::lock(v10);
      if (!v11)
        return 1;
      v12 = v11;
      v3 = *(uint64_t **)(a1 + 16);
      if (v3)
      {
        v13 = (unint64_t *)&v11->__shared_owners_;
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
        v2 = v11;
      }
      else
      {
        v2 = 0;
      }
      v17 = (unint64_t *)&v11->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v12);
      }
LABEL_28:
      if (v3)
      {
        v15 = *v3;
        v19 = (std::__shared_weak_count *)v3[1];
        if (v19)
        {
          v20 = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
          do
            v22 = __ldaxr(v20);
          while (__stlxr(v22 - 1, v20));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
      }
      else
      {
        v15 = 0;
      }
      if (!v2)
        return v15 == 0;
      v23 = (unint64_t *)&v2->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (v24)
        return v15 == 0;
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v15 == 0;
    default:
      sub_2108B9060();
  }
}

void sub_2108DE58C(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  unsigned int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[2];
  std::__shared_weak_count *v10;

  v4 = (uint64_t *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 40);
  if (v5 == 2)
  {
    sub_21090E048(a1, (uint64_t)v4);
  }
  else if (v5 > 1)
  {
    if (v5 != 3)
      sub_2108B9060();
    sub_2108DDD74(v9, v4);
    sub_21090DF3C(a1, (uint64_t)v9);
    v9[0] = &off_24CA7D7F8;
    v6 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  else
  {
    sub_21090DF3C(a1, (uint64_t)v4);
  }
}

void sub_2108DE66C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_21090E6B4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2108DE680(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if (sub_2108DE3AC(a2))
  {
    if (*(_DWORD *)(a2 + 76))
      v4 = *(_DWORD *)(a2 + 72) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 72);
    if (v4)
      v5 = 0;
    LODWORD(v34) = 4;
    *(_QWORD *)((char *)&v34 + 4) = v5;
    v6 = 4 * ((_DWORD)v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5))
      v7 = v7;
    else
      v7 = 0;
    v8 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
    v9 = __PAIR64__(DWORD1(v34), 4);
    LODWORD(v34) = 1;
    *(_QWORD *)((char *)&v34 + 4) = v8;
    v10 = v34;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(_QWORD *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(_QWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24CA7D7F8;
        *((_QWORD *)&v34 + 1) = v12;
        v35 = v11;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        break;
      case 1:
        v20 = *(_QWORD *)(a2 + 24);
        v19 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24CA7D7F8;
        *((_QWORD *)&v34 + 1) = v20;
        v35 = v19;
        if (v19)
        {
          v21 = (unint64_t *)&v19->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        break;
      case 2:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24CA7D7F8;
        *((_QWORD *)&v34 + 1) = v16;
        v35 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 3:
        v23 = *(std::__shared_weak_count **)(a2 + 24);
        if (v23 && (v24 = std::__shared_weak_count::lock(v23)) != 0)
        {
          v25 = v24;
          v26 = *(_QWORD *)(a2 + 16);
          *(_QWORD *)&v34 = &off_24CA7D7F8;
          if (v26)
          {
            *((_QWORD *)&v34 + 1) = v26;
            v35 = v24;
            v27 = (unint64_t *)&v24->__shared_owners_;
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          else
          {
            *((_QWORD *)&v34 + 1) = 0;
            v35 = 0;
          }
          v29 = (unint64_t *)&v24->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        else
        {
          *((_QWORD *)&v34 + 1) = 0;
          v35 = 0;
          *(_QWORD *)&v34 = &off_24CA7D7F8;
        }
        break;
      default:
        sub_2108B9060();
    }
    sub_2108DDB98(a1, (uint64_t)&v34);
    *(_QWORD *)&v34 = &off_24CA7D7F8;
    v31 = v35;
    if (v35)
    {
      v32 = (unint64_t *)&v35->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
}

void sub_2108DE8E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21090E6B4(&a9);
  _Unwind_Resume(a1);
}

void sub_2108DE8F8(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[2];
  std::__shared_weak_count *v10;

  v4 = (uint64_t *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 40);
  switch(v5)
  {
    case 2:
      goto LABEL_4;
    case 1:
      sub_21090DD20(a1, (uint64_t)v4);
      break;
    case 0:
LABEL_4:
      sub_21090DC14(a1, (uint64_t)v4);
      return;
    case 3:
      sub_2108DDD74(v9, v4);
      sub_21090DC14(a1, (uint64_t)v9);
      v9[0] = &off_24CA7D7F8;
      v6 = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      break;
    default:
      sub_2108B9060();
  }
}

void sub_2108DE9D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_21090E6B4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2108DE9EC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t (**v28)();
  uint64_t *v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  __int128 v32;

  *(_QWORD *)a1 = off_24CA7D688;
  v3 = *(unsigned int *)(a2 + 8);
  LODWORD(v4) = *(_DWORD *)(a2 + 12);
  if (v4 <= 0x20)
    v4 = 32;
  else
    v4 = v4;
  *(_QWORD *)&v27 = *(_QWORD *)a2;
  *((_QWORD *)&v27 + 1) = v3 | (v4 << 32);
  *(_QWORD *)a1 = off_24CA7AED0;
  *(_DWORD *)(a1 + 8) = 0;
  sub_2108CF8B0(0, 1, (unsigned int *)&v27, a1 + 16);
  if (!(_DWORD)v27 || !DWORD1(v27))
  {
    v14 = v27;
    goto LABEL_32;
  }
  if (*(_DWORD *)(a1 + 40))
    sub_2108B9060();
  v5 = *(uint64_t **)(a1 + 24);
  v6 = *(std::__shared_weak_count **)(a1 + 32);
  v29 = v5;
  v30 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v28 = &off_24CA7D7B8;
  if (v5)
  {
    v10 = *v5;
    v9 = (std::__shared_weak_count *)v5[1];
    if (!v9)
      goto LABEL_16;
    v11 = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (v13)
    {
LABEL_16:
      if (!v10)
        goto LABEL_18;
      goto LABEL_17;
    }
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if (v10)
LABEL_17:
      sub_210912CA0((uint64_t)v29);
  }
LABEL_18:
  sub_2108CFF78(&v31, (uint64_t)&v28);
  v14 = v32;
  if (v29)
  {
    v16 = *v29;
    v15 = (std::__shared_weak_count *)v29[1];
    if (v15)
    {
      v17 = (unint64_t *)&v15->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
      do
        v19 = __ldaxr(v17);
      while (__stlxr(v19 - 1, v17));
      if (!v19)
      {
        v26 = v14;
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
        v14 = v26;
        if (!v16)
          goto LABEL_26;
        goto LABEL_25;
      }
    }
    if (v16)
    {
LABEL_25:
      v24 = v14;
      sub_210912E7C((uint64_t)v29);
      v14 = v24;
    }
  }
LABEL_26:
  v28 = &off_24CA7D7F8;
  v20 = v30;
  if (v30)
  {
    v21 = (unint64_t *)&v30->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      v25 = v14;
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
      v14 = v25;
    }
  }
LABEL_32:
  *(_OWORD *)(a1 + 48) = v14;
  *(_QWORD *)a1 = off_24CA7D688;
  return a1;
}

void sub_2108DEC08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t (**a18)(), uint64_t a19, std::__shared_weak_count *a20)
{
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  uint64_t v26;

  a18 = &off_24CA7D7F8;
  v23 = a20;
  if (a20)
  {
    p_shared_owners = (unint64_t *)&a20->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = *(unsigned int *)(v20 + 40);
  if ((_DWORD)v26 != -1)
    ((void (*)(char *, uint64_t))off_24CA7C080[v26])(&a17, v21);
  *(_DWORD *)(v20 + 40) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t sub_2108DECA0(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24CA7AED0;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24CA7C080[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_2108DED04(uint64_t *a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t (**v30)();
  uint64_t v31;
  std::__shared_weak_count *v32;

  if (sub_2108D0A78(a2))
  {
    if (*(_DWORD *)(a2 + 52))
      v4 = *(_DWORD *)(a2 + 48) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 48);
    if (v4)
      v5 = 0;
    v6 = 0x100000000;
    if (v5 > 0x100000000)
      v6 = v5;
    *a1 = 0;
    a1[1] = v5;
    a1[2] = ((_DWORD)v5 != 0) | (unint64_t)(v6 << 32);
    if (HIDWORD(v5) * (_DWORD)v6 == -1
      && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v8 = *(_QWORD *)(a2 + 24);
        v7 = *(std::__shared_weak_count **)(a2 + 32);
        v30 = &off_24CA7D7F8;
        v31 = v8;
        v32 = v7;
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v10 = __ldxr(p_shared_owners);
          while (__stxr(v10 + 1, p_shared_owners));
        }
        break;
      case 1:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        v30 = &off_24CA7D7F8;
        v31 = v16;
        v32 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 2:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        v30 = &off_24CA7D7F8;
        v31 = v12;
        v32 = v11;
        if (v11)
        {
          v13 = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
        }
        break;
      case 3:
        v19 = *(std::__shared_weak_count **)(a2 + 24);
        if (v19 && (v20 = std::__shared_weak_count::lock(v19)) != 0)
        {
          v21 = v20;
          v22 = *(_QWORD *)(a2 + 16);
          v30 = &off_24CA7D7F8;
          if (v22)
          {
            v31 = v22;
            v32 = v20;
            v23 = (unint64_t *)&v20->__shared_owners_;
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
          }
          else
          {
            v31 = 0;
            v32 = 0;
          }
          v25 = (unint64_t *)&v20->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        else
        {
          v31 = 0;
          v32 = 0;
          v30 = &off_24CA7D7F8;
        }
        break;
      default:
        sub_2108B9060();
    }
    sub_2108CFF78(a1, (uint64_t)&v30);
    v30 = &off_24CA7D7F8;
    v27 = v32;
    if (v32)
    {
      v28 = (unint64_t *)&v32->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
  }
}

void sub_2108DEF40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_21090E6B4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2108DEF54(_QWORD *a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t (**v32)();
  uint64_t v33;
  std::__shared_weak_count *v34;

  if (sub_2108D0A78(a2))
  {
    if (*(_DWORD *)(a2 + 52))
      v4 = *(_DWORD *)(a2 + 48) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 48);
    if (v4)
      v5 = 0;
    v6 = 0x100000000;
    if (v5 > 0x100000000)
      v6 = v5;
    *a1 = 0;
    a1[1] = v5;
    a1[2] = ((_DWORD)v5 != 0) | (unint64_t)(v6 << 32);
    if (HIDWORD(v5) * (_DWORD)v6 == -1
      && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v8 = *(_QWORD *)(a2 + 24);
        v7 = *(std::__shared_weak_count **)(a2 + 32);
        v32 = &off_24CA7D7F8;
        v33 = v8;
        v34 = v7;
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v10 = __ldxr(p_shared_owners);
          while (__stxr(v10 + 1, p_shared_owners));
        }
        break;
      case 1:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        v32 = &off_24CA7D7F8;
        v33 = v16;
        v34 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 2:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        v32 = &off_24CA7D7F8;
        v33 = v12;
        v34 = v11;
        if (v11)
        {
          v13 = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
        }
        break;
      case 3:
        v19 = *(std::__shared_weak_count **)(a2 + 24);
        if (v19 && (v20 = std::__shared_weak_count::lock(v19)) != 0)
        {
          v21 = v20;
          v22 = *(_QWORD *)(a2 + 16);
          v32 = &off_24CA7D7F8;
          if (v22)
          {
            v33 = v22;
            v34 = v20;
            v23 = (unint64_t *)&v20->__shared_owners_;
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
          }
          else
          {
            v33 = 0;
            v34 = 0;
          }
          v25 = (unint64_t *)&v20->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        else
        {
          v33 = 0;
          v34 = 0;
          v32 = &off_24CA7D7F8;
        }
        break;
      default:
        sub_2108B9060();
    }
    sub_2108CFF78(&v30, (uint64_t)&v32);
    *a1 = v30;
    *(_OWORD *)(a1 + 1) = v31;
    v32 = &off_24CA7D7F8;
    v27 = v34;
    if (v34)
    {
      v28 = (unint64_t *)&v34->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
  }
}

void sub_2108DF1A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_21090E6B4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2108DF1B4()
{
  return 1;
}

_UNKNOWN **sub_2108DF1BC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A745A0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A745A0))
    return &off_253ED6E40;
  __cxa_guard_release(&qword_254A745A0);
  return &off_253ED6E40;
}

void sub_2108DF210(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  _QWORD v17[2];
  unsigned int v18;
  unsigned int v19;
  uint64_t (**v20)();
  uint64_t *v21;
  std::__shared_weak_count *v22;
  __int128 v23;
  uint64_t v24;
  _QWORD v25[2];

  sub_2108D0F98(&v20, a1);
  sub_2108DEF54(v17, a1);
  sub_2108DEF54(&v15, a1);
  v4 = (_QWORD *)operator new();
  v5 = v4;
  v23 = v15;
  v24 = v16;
  *v4 = off_24CA7D688;
  if (v19 <= 0x20)
    v6 = 32;
  else
    v6 = v19;
  v25[0] = v17[1];
  v25[1] = v18 | (unint64_t)(v6 << 32);
  sub_2108D04BC((uint64_t)v4, (unsigned int *)v25, &v23);
  *v5 = off_24CA7D688;
  *a2 = v5;
  if (v21)
  {
    v8 = *v21;
    v7 = (std::__shared_weak_count *)v21[1];
    if (!v7)
      goto LABEL_10;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (v11)
    {
LABEL_10:
      if (!v8)
        goto LABEL_12;
      goto LABEL_11;
    }
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v8)
LABEL_11:
      sub_210912E7C((uint64_t)v21);
  }
LABEL_12:
  v20 = &off_24CA7D7F8;
  v12 = v22;
  if (v22)
  {
    v13 = (unint64_t *)&v22->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_2108DF38C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  MEMORY[0x212BCC6FC](v8, 0x10A3C40A1F8E8FFLL);
  sub_21090DE2C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2108DF3B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_21090DE2C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2108DF3CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_21090DE2C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2108DF3E0(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_2108D0F98(a2, a1);
}

double sub_2108DF3EC(uint64_t a1, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double result;
  uint64_t v21;
  __int128 v22;
  _QWORD v23[3];
  unsigned int v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t (**v28)();
  __int128 *v29;
  std::__shared_weak_count *v30;
  __int128 v31;
  uint64_t v32;
  _QWORD v33[2];

  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24CA84C98, (const struct __class_type_info *)&unk_24CA7BF20, 0);
  if (!v4)
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v31, lpsrc, 1);
    v17 = v31;
    v18 = *(_QWORD *)(v31 + 16);
    v22 = *(_OWORD *)v31;
    v23[0] = v18;
    *(_QWORD *)&v31 = 0;
    MEMORY[0x212BCC6FC](v17, 0xC400A2AC0F1, v19);
    sub_2108DED04((uint64_t *)&v31, a1);
    v28 = (uint64_t (**)())&v22;
    v29 = &v31;
    sub_2108FE614((size_t *)&v28);
    return result;
  }
  v5 = (uint64_t)v4;
  sub_2108D0F98(&v28, (uint64_t)v4);
  sub_2108DEF54(&v26, v5);
  v31 = v26;
  v32 = v27;
  if (HIDWORD(v27) <= 0x20)
    v6 = 32;
  else
    v6 = HIDWORD(v27);
  *(_QWORD *)&v22 = off_24CA7D688;
  v33[0] = *((_QWORD *)&v26 + 1);
  v33[1] = v27 | (unint64_t)(v6 << 32);
  sub_2108D04BC((uint64_t)&v22, (unsigned int *)v33, &v31);
  *(_QWORD *)&v22 = off_24CA7D688;
  if (v29)
  {
    v8 = *(_QWORD *)v29;
    v7 = (std::__shared_weak_count *)*((_QWORD *)v29 + 1);
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          goto LABEL_13;
        goto LABEL_12;
      }
    }
    if (v8)
LABEL_12:
      sub_210912E7C((uint64_t)v29);
  }
LABEL_13:
  v28 = &off_24CA7D7F8;
  v12 = v30;
  if (v30)
  {
    v13 = (unint64_t *)&v30->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v24;
  *(_DWORD *)(a1 + 8) = DWORD2(v22);
  v16 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v16 == -1)
  {
    if ((_DWORD)v15 == -1)
    {
      result = *(double *)&v25;
      *(_OWORD *)(a1 + 48) = v25;
      return result;
    }
  }
  else if ((_DWORD)v15 == -1)
  {
    ((void (*)(__int128 *, uint64_t))off_24CA7C080[v16])(&v31, a1 + 16);
    *(_DWORD *)(a1 + 40) = -1;
    goto LABEL_25;
  }
  *(_QWORD *)&v31 = a1 + 16;
  ((void (*)(__int128 *))off_24CA7C0C0[v15])(&v31);
LABEL_25:
  v21 = v24;
  result = *(double *)&v25;
  *(_OWORD *)(a1 + 48) = v25;
  *(_QWORD *)&v22 = off_24CA7AED0;
  if ((_DWORD)v21 != -1)
    ((void (*)(__int128 *, _QWORD *))off_24CA7C080[v21])(&v31, v23);
  return result;
}

void sub_2108DF67C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;

  if (a14 != -1)
    ((void (*)(uint64_t *, uint64_t))off_24CA7C080[a14])(&a20, v22);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2108DF768(uint64_t a1)
{
  uint64_t v2[3];

  sub_2108DED04(v2, a1);
  return v2[0];
}

double sub_2108DF790@<D0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  double result;
  __int128 v7;
  uint64_t v8;

  if (a2 != 1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 325, (uint64_t)"F == format", 11, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
  sub_2108DED04((uint64_t *)&v7, a1);
  v5 = operator new();
  result = *(double *)&v7;
  *(_OWORD *)v5 = v7;
  *(_QWORD *)(v5 + 16) = v8;
  *a3 = v5;
  return result;
}

double sub_2108DF830@<D0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  double result;
  __int128 v7;
  uint64_t v8;

  if (a2 != 1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 331, (uint64_t)"F == format", 11, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
  sub_2108DEF54(&v7, a1);
  v5 = operator new();
  result = *(double *)&v7;
  *(_OWORD *)v5 = v7;
  *(_QWORD *)(v5 + 16) = v8;
  *a3 = v5;
  return result;
}

__int128 *sub_2108DF8D0()
{
  unsigned __int8 v0;
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  size_t v6;
  uint64_t *v7;
  _BYTE *v8;
  size_t v9;
  uint64_t *v10;
  _BYTE *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  void *v17[2];
  uint64_t v18;
  std::string __p;

  v0 = atomic_load((unsigned __int8 *)&qword_254A745A8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A745A8))
    goto LABEL_2;
  v2 = atomic_load((unsigned __int8 *)&qword_254A745B0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A745B0))
  {
    v3 = atomic_load((unsigned __int8 *)&qword_254A745B8);
    if ((v3 & 1) != 0 || !__cxa_guard_acquire(&qword_254A745B8))
    {
LABEL_13:
      if (byte_254A7488F < 0)
      {
        sub_2108B314C(&xmmword_254A74860, (void *)qword_254A74878, unk_254A74880);
      }
      else
      {
        xmmword_254A74860 = *(_OWORD *)&qword_254A74878;
        unk_254A74870 = unk_254A74888;
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A74860, &dword_21089F000);
      __cxa_guard_release(&qword_254A745B0);
      goto LABEL_7;
    }
    v4 = atomic_load((unsigned __int8 *)&qword_254A745C0);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A745C0))
    {
      sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cv::CVImageBuffer<img::Format::Gray8u>]", &qword_254A74890);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A74890, &dword_21089F000);
      __cxa_guard_release(&qword_254A745C0);
    }
    v5 = atomic_load((unsigned __int8 *)&qword_254A745C8);
    if ((v5 & 1) != 0 || !__cxa_guard_acquire(&qword_254A745C8))
    {
LABEL_49:
      v16 = atomic_load((unsigned __int8 *)&qword_254A745D0);
      if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_254A745D0))
      {
        if (byte_254A748A8[23] < 0)
          sub_2108B314C(&__p, *(void **)byte_254A748A8, *(unint64_t *)&byte_254A748A8[8]);
        else
          __p = *(std::string *)byte_254A748A8;
        sub_2109ECDA0(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_254A748C0);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A748C0, &dword_21089F000);
        __cxa_guard_release(&qword_254A745D0);
      }
      if (byte_254A748D7 < 0)
      {
        sub_2108B314C(v17, (void *)xmmword_254A748C0, *((unint64_t *)&xmmword_254A748C0 + 1));
      }
      else
      {
        *(_OWORD *)v17 = xmmword_254A748C0;
        v18 = unk_254A748D0;
      }
      sub_21090A970((char *)v17, (std::string *)&qword_254A74878);
      if (SHIBYTE(v18) < 0)
        operator delete(v17[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A74878, &dword_21089F000);
      __cxa_guard_release(&qword_254A745B8);
      goto LABEL_13;
    }
    if (byte_254A748A7 >= 0)
      v6 = byte_254A748A7;
    else
      v6 = unk_254A74898;
    if (byte_254A748A7 >= 0)
      v7 = &qword_254A74890;
    else
      v7 = (uint64_t *)qword_254A74890;
    v8 = (char *)v7 + v6;
    if ((uint64_t)v6 >= 1)
    {
      v9 = v6;
      v10 = v7;
      do
      {
        v11 = memchr(v10, 60, v9);
        if (!v11)
          break;
        if (*v11 == 60)
          goto LABEL_35;
        v10 = (uint64_t *)(v11 + 1);
        v9 = v8 - (_BYTE *)v10;
      }
      while (v8 - (_BYTE *)v10 > 0);
    }
    v11 = (char *)v7 + v6;
LABEL_35:
    v12 = v11 - (_BYTE *)v7;
    if (v11 == v8)
      v12 = -1;
    if (v6 >= v12)
      v6 = v12;
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      sub_2108A4B7C();
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v13 = (char *)operator new(v14 + 1);
      *(_QWORD *)&byte_254A748A8[8] = v6;
      *(_QWORD *)&byte_254A748A8[16] = v15 | 0x8000000000000000;
      *(_QWORD *)byte_254A748A8 = v13;
    }
    else
    {
      v13 = byte_254A748A8;
      byte_254A748A8[23] = v6;
      if (!v6)
        goto LABEL_48;
    }
    memmove(v13, v7, v6);
LABEL_48:
    v13[v6] = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A748A8, &dword_21089F000);
    __cxa_guard_release(&qword_254A745C8);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_254A74877 < 0)
  {
    sub_2108B314C(&xmmword_254A74848, (void *)xmmword_254A74860, *((unint64_t *)&xmmword_254A74860 + 1));
  }
  else
  {
    xmmword_254A74848 = xmmword_254A74860;
    unk_254A74858 = unk_254A74870;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A74848, &dword_21089F000);
  __cxa_guard_release(&qword_254A745A8);
LABEL_2:
  if (byte_254A7485F >= 0)
    return &xmmword_254A74848;
  else
    return (__int128 *)xmmword_254A74848;
}

void sub_2108DFD24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_254A745B8);
  __cxa_guard_abort(&qword_254A745B0);
  __cxa_guard_abort(&qword_254A745A8);
  _Unwind_Resume(a1);
}

void sub_2108DFDC0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A745A8);
  _Unwind_Resume(a1);
}

void sub_2108DFDD8()
{
  sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 343, (uint64_t)&unk_210A02D2A, 0, (uint64_t)"Access notification must only be done in debug.", 47, (void (*)(void **))sub_2109EDDB4);
  abort();
}

void sub_2108DFE14(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t (**v39)();
  __int128 v40;
  uint64_t (**v41)();
  __int128 v42;

  if (a2)
  {
    sub_2108D0C58(a1, &v39);
    v4 = (_QWORD *)operator new();
    v42 = v40;
    v40 = 0uLL;
    v41 = &off_24CA7D7D8;
    *v4 = &off_24CA7BD90;
    sub_21090E048(v4 + 1, (uint64_t)&v41);
    if ((_QWORD)v42)
    {
      v6 = *(_QWORD *)v42;
      v5 = *(std::__shared_weak_count **)(v42 + 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
          if (!v6)
            goto LABEL_10;
          goto LABEL_9;
        }
      }
      if (v6)
LABEL_9:
        sub_210912F6C(v42);
    }
LABEL_10:
    v41 = &off_24CA7D7F8;
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
    if (!*((_QWORD *)&v42 + 1))
      goto LABEL_14;
    v11 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      *a3 = v4;
      v13 = (uint64_t *)v40;
      if (!(_QWORD)v40)
        goto LABEL_22;
    }
    else
    {
LABEL_14:
      *a3 = v4;
      v13 = (uint64_t *)v40;
      if (!(_QWORD)v40)
        goto LABEL_22;
    }
    v15 = *v13;
    v14 = (std::__shared_weak_count *)v13[1];
    if (v14)
    {
      v16 = (unint64_t *)&v14->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      do
        v18 = __ldaxr(v16);
      while (__stlxr(v18 - 1, v16));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
        if (!v15)
          goto LABEL_22;
        goto LABEL_21;
      }
    }
    if (v15)
LABEL_21:
      sub_210912F6C(v40);
LABEL_22:
    v39 = &off_24CA7D7F8;
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
    if (!*((_QWORD *)&v40 + 1))
      return;
    v20 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (v21)
      return;
LABEL_51:
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    return;
  }
  sub_2108D0F98(&v39, a1);
  v22 = (_QWORD *)operator new();
  v42 = v40;
  v40 = 0uLL;
  v41 = &off_24CA7D7B8;
  *v22 = &off_24CA7BD70;
  sub_21090DD20(v22 + 1, (uint64_t)&v41);
  if ((_QWORD)v42)
  {
    v24 = *(_QWORD *)v42;
    v23 = *(std::__shared_weak_count **)(v42 + 8);
    if (v23)
    {
      v25 = (unint64_t *)&v23->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
      do
        v27 = __ldaxr(v25);
      while (__stlxr(v27 - 1, v25));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
        if (!v24)
          goto LABEL_35;
        goto LABEL_34;
      }
    }
    if (v24)
LABEL_34:
      sub_210912E7C(v42);
  }
LABEL_35:
  v41 = &off_24CA7D7F8;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
  if (!*((_QWORD *)&v42 + 1))
    goto LABEL_39;
  v29 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
    *a3 = v22;
    v31 = (uint64_t *)v40;
    if (!(_QWORD)v40)
      goto LABEL_47;
  }
  else
  {
LABEL_39:
    *a3 = v22;
    v31 = (uint64_t *)v40;
    if (!(_QWORD)v40)
      goto LABEL_47;
  }
  v33 = *v31;
  v32 = (std::__shared_weak_count *)v31[1];
  if (v32)
  {
    v34 = (unint64_t *)&v32->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
    do
      v36 = __ldaxr(v34);
    while (__stlxr(v36 - 1, v34));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
      if (!v33)
        goto LABEL_47;
      goto LABEL_46;
    }
  }
  if (v33)
LABEL_46:
    sub_210912E7C(v40);
LABEL_47:
  v39 = &off_24CA7D7F8;
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v37 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
      goto LABEL_51;
  }
}

void sub_2108E01B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_21090DE2C(&a12);
  MEMORY[0x212BCC6FC](v12, 0xA1C40711E6FFCLL);
  sub_21090DE2C(&a9);
  _Unwind_Resume(a1);
}

void sub_2108E01E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21090DE2C(&a9);
  _Unwind_Resume(a1);
}

void sub_2108E01FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_21090E154(&a12);
  MEMORY[0x212BCC6FC](v12, 0xA1C40711E6FFCLL);
  sub_21090E154(&a9);
  _Unwind_Resume(a1);
}

void sub_2108E0230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21090E154(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2108E0244()
{
  return 65792;
}

uint64_t sub_2108E0254(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24CA7B110;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24CA7C080[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_2108E02B8(uint64_t *a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t (**v30)();
  uint64_t v31;
  std::__shared_weak_count *v32;

  if (sub_2108D5790(a2))
  {
    if (*(_DWORD *)(a2 + 52))
      v4 = *(_DWORD *)(a2 + 48) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 48);
    if (v4)
      v5 = 0;
    v6 = 0x100000000;
    if (v5 > 0x100000000)
      v6 = v5;
    *a1 = 0;
    a1[1] = v5;
    a1[2] = ((_DWORD)v5 != 0) | (unint64_t)(v6 << 32);
    if (HIDWORD(v5) * (_DWORD)v6 == -1
      && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v8 = *(_QWORD *)(a2 + 24);
        v7 = *(std::__shared_weak_count **)(a2 + 32);
        v30 = &off_24CA7D7F8;
        v31 = v8;
        v32 = v7;
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v10 = __ldxr(p_shared_owners);
          while (__stxr(v10 + 1, p_shared_owners));
        }
        break;
      case 1:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        v30 = &off_24CA7D7F8;
        v31 = v16;
        v32 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 2:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        v30 = &off_24CA7D7F8;
        v31 = v12;
        v32 = v11;
        if (v11)
        {
          v13 = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
        }
        break;
      case 3:
        v19 = *(std::__shared_weak_count **)(a2 + 24);
        if (v19 && (v20 = std::__shared_weak_count::lock(v19)) != 0)
        {
          v21 = v20;
          v22 = *(_QWORD *)(a2 + 16);
          v30 = &off_24CA7D7F8;
          if (v22)
          {
            v31 = v22;
            v32 = v20;
            v23 = (unint64_t *)&v20->__shared_owners_;
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
          }
          else
          {
            v31 = 0;
            v32 = 0;
          }
          v25 = (unint64_t *)&v20->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        else
        {
          v31 = 0;
          v32 = 0;
          v30 = &off_24CA7D7F8;
        }
        break;
      default:
        sub_2108B9060();
    }
    sub_2108D5054(a1, (uint64_t)&v30);
    v30 = &off_24CA7D7F8;
    v27 = v32;
    if (v32)
    {
      v28 = (unint64_t *)&v32->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
  }
}

void sub_2108E04F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_21090E6B4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2108E0508(_QWORD *a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t (**v32)();
  uint64_t v33;
  std::__shared_weak_count *v34;

  if (sub_2108D5790(a2))
  {
    if (*(_DWORD *)(a2 + 52))
      v4 = *(_DWORD *)(a2 + 48) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 48);
    if (v4)
      v5 = 0;
    v6 = 0x100000000;
    if (v5 > 0x100000000)
      v6 = v5;
    *a1 = 0;
    a1[1] = v5;
    a1[2] = ((_DWORD)v5 != 0) | (unint64_t)(v6 << 32);
    if (HIDWORD(v5) * (_DWORD)v6 == -1
      && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v8 = *(_QWORD *)(a2 + 24);
        v7 = *(std::__shared_weak_count **)(a2 + 32);
        v32 = &off_24CA7D7F8;
        v33 = v8;
        v34 = v7;
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v10 = __ldxr(p_shared_owners);
          while (__stxr(v10 + 1, p_shared_owners));
        }
        break;
      case 1:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        v32 = &off_24CA7D7F8;
        v33 = v16;
        v34 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 2:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        v32 = &off_24CA7D7F8;
        v33 = v12;
        v34 = v11;
        if (v11)
        {
          v13 = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
        }
        break;
      case 3:
        v19 = *(std::__shared_weak_count **)(a2 + 24);
        if (v19 && (v20 = std::__shared_weak_count::lock(v19)) != 0)
        {
          v21 = v20;
          v22 = *(_QWORD *)(a2 + 16);
          v32 = &off_24CA7D7F8;
          if (v22)
          {
            v33 = v22;
            v34 = v20;
            v23 = (unint64_t *)&v20->__shared_owners_;
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
          }
          else
          {
            v33 = 0;
            v34 = 0;
          }
          v25 = (unint64_t *)&v20->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        else
        {
          v33 = 0;
          v34 = 0;
          v32 = &off_24CA7D7F8;
        }
        break;
      default:
        sub_2108B9060();
    }
    sub_2108D5054(&v30, (uint64_t)&v32);
    *a1 = v30;
    *(_OWORD *)(a1 + 1) = v31;
    v32 = &off_24CA7D7F8;
    v27 = v34;
    if (v34)
    {
      v28 = (unint64_t *)&v34->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
  }
}

void sub_2108E0754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_21090E6B4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2108E0768()
{
  return 2;
}

_UNKNOWN **sub_2108E0770()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A745A0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A745A0))
    return &off_253ED6E40;
  __cxa_guard_release(&qword_254A745A0);
  return &off_253ED6E40;
}

void sub_2108E07C4(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  _QWORD v17[2];
  unsigned int v18;
  unsigned int v19;
  uint64_t (**v20)();
  uint64_t *v21;
  std::__shared_weak_count *v22;
  __int128 v23;
  uint64_t v24;
  _QWORD v25[2];

  sub_2108D5CB4(&v20, a1);
  sub_2108E0508(v17, a1);
  sub_2108E0508(&v15, a1);
  v4 = (_QWORD *)operator new();
  v5 = v4;
  v23 = v15;
  v24 = v16;
  *v4 = off_24CA7B620;
  if (v19 <= 0x10)
    v6 = 16;
  else
    v6 = v19;
  v25[0] = v17[1];
  v25[1] = v18 | (unint64_t)(v6 << 32);
  sub_2108D5370((uint64_t)v4, (unsigned int *)v25, &v23);
  *v5 = off_24CA7B620;
  *a2 = v5;
  if (v21)
  {
    v8 = *v21;
    v7 = (std::__shared_weak_count *)v21[1];
    if (!v7)
      goto LABEL_10;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (v11)
    {
LABEL_10:
      if (!v8)
        goto LABEL_12;
      goto LABEL_11;
    }
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v8)
LABEL_11:
      sub_210912E7C((uint64_t)v21);
  }
LABEL_12:
  v20 = &off_24CA7D7F8;
  v12 = v22;
  if (v22)
  {
    v13 = (unint64_t *)&v22->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_2108E0940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  MEMORY[0x212BCC6FC](v8, 0x10A3C40A1F8E8FFLL);
  sub_21090DE2C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2108E096C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_21090DE2C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2108E0980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_21090DE2C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2108E0994(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_2108D5CB4(a2, a1);
}

double sub_2108E09A0(uint64_t a1, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double result;
  uint64_t v21;
  __int128 v22;
  _QWORD v23[3];
  unsigned int v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t (**v28)();
  uint64_t *v29;
  std::__shared_weak_count *v30;
  __int128 v31;
  uint64_t v32;
  _QWORD v33[2];

  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24CA84C98, (const struct __class_type_info *)&unk_24CA7BF38, 0);
  if (!v4)
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v31, lpsrc, 2);
    v17 = v31;
    v18 = *(_QWORD *)(v31 + 16);
    v22 = *(_OWORD *)v31;
    v23[0] = v18;
    *(_QWORD *)&v31 = 0;
    MEMORY[0x212BCC6FC](v17, 0xC400A2AC0F1, v19);
    sub_2108E02B8((uint64_t *)&v31, a1);
    sub_2108FFBBC((uint64_t *)&v22, (uint64_t)&v31);
    return result;
  }
  v5 = (uint64_t)v4;
  sub_2108D5CB4(&v28, (uint64_t)v4);
  sub_2108E0508(&v26, v5);
  v31 = v26;
  v32 = v27;
  if (HIDWORD(v27) <= 0x10)
    v6 = 16;
  else
    v6 = HIDWORD(v27);
  *(_QWORD *)&v22 = off_24CA7B620;
  v33[0] = *((_QWORD *)&v26 + 1);
  v33[1] = v27 | (unint64_t)(v6 << 32);
  sub_2108D5370((uint64_t)&v22, (unsigned int *)v33, &v31);
  *(_QWORD *)&v22 = off_24CA7B620;
  if (v29)
  {
    v8 = *v29;
    v7 = (std::__shared_weak_count *)v29[1];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          goto LABEL_13;
        goto LABEL_12;
      }
    }
    if (v8)
LABEL_12:
      sub_210912E7C((uint64_t)v29);
  }
LABEL_13:
  v28 = &off_24CA7D7F8;
  v12 = v30;
  if (v30)
  {
    v13 = (unint64_t *)&v30->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v24;
  *(_DWORD *)(a1 + 8) = DWORD2(v22);
  v16 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v16 == -1)
  {
    if ((_DWORD)v15 == -1)
    {
      result = *(double *)&v25;
      *(_OWORD *)(a1 + 48) = v25;
      return result;
    }
  }
  else if ((_DWORD)v15 == -1)
  {
    ((void (*)(__int128 *, uint64_t))off_24CA7C080[v16])(&v31, a1 + 16);
    *(_DWORD *)(a1 + 40) = -1;
    goto LABEL_25;
  }
  *(_QWORD *)&v31 = a1 + 16;
  ((void (*)(__int128 *))off_24CA7C0C0[v15])(&v31);
LABEL_25:
  v21 = v24;
  result = *(double *)&v25;
  *(_OWORD *)(a1 + 48) = v25;
  *(_QWORD *)&v22 = off_24CA7B110;
  if ((_DWORD)v21 != -1)
    ((void (*)(__int128 *, _QWORD *))off_24CA7C080[v21])(&v31, v23);
  return result;
}

void sub_2108E0C28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;

  if (a14 != -1)
    ((void (*)(uint64_t *, uint64_t))off_24CA7C080[a14])(&a20, v22);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2108E0D14(uint64_t a1)
{
  uint64_t v2[3];

  sub_2108E02B8(v2, a1);
  return v2[0];
}

double sub_2108E0D3C@<D0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  double result;
  __int128 v7;
  uint64_t v8;

  if (a2 != 2
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 325, (uint64_t)"F == format", 11, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
  sub_2108E02B8((uint64_t *)&v7, a1);
  v5 = operator new();
  result = *(double *)&v7;
  *(_OWORD *)v5 = v7;
  *(_QWORD *)(v5 + 16) = v8;
  *a3 = v5;
  return result;
}

double sub_2108E0DDC@<D0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  double result;
  __int128 v7;
  uint64_t v8;

  if (a2 != 2
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 331, (uint64_t)"F == format", 11, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
  sub_2108E0508(&v7, a1);
  v5 = operator new();
  result = *(double *)&v7;
  *(_OWORD *)v5 = v7;
  *(_QWORD *)(v5 + 16) = v8;
  *a3 = v5;
  return result;
}

__int128 *sub_2108E0E7C()
{
  unsigned __int8 v0;
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  size_t v6;
  uint64_t *v7;
  _BYTE *v8;
  size_t v9;
  uint64_t *v10;
  _BYTE *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  void *v17[2];
  uint64_t v18;
  std::string __p;

  v0 = atomic_load((unsigned __int8 *)&qword_254A745D8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A745D8))
    goto LABEL_2;
  v2 = atomic_load((unsigned __int8 *)&qword_254A745E0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A745E0))
  {
    v3 = atomic_load((unsigned __int8 *)&qword_254A745E8);
    if ((v3 & 1) != 0 || !__cxa_guard_acquire(&qword_254A745E8))
    {
LABEL_13:
      if (byte_254A7491F < 0)
      {
        sub_2108B314C(&xmmword_254A748F0, (void *)qword_254A74908, unk_254A74910);
      }
      else
      {
        xmmword_254A748F0 = *(_OWORD *)&qword_254A74908;
        unk_254A74900 = unk_254A74918;
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A748F0, &dword_21089F000);
      __cxa_guard_release(&qword_254A745E0);
      goto LABEL_7;
    }
    v4 = atomic_load((unsigned __int8 *)&qword_254A745F0);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A745F0))
    {
      sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cv::CVImageBuffer<img::Format::Gray16u>]", &qword_254A74920);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A74920, &dword_21089F000);
      __cxa_guard_release(&qword_254A745F0);
    }
    v5 = atomic_load((unsigned __int8 *)&qword_254A745F8);
    if ((v5 & 1) != 0 || !__cxa_guard_acquire(&qword_254A745F8))
    {
LABEL_49:
      v16 = atomic_load((unsigned __int8 *)&qword_254A74600);
      if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_254A74600))
      {
        if (byte_254A74938[23] < 0)
          sub_2108B314C(&__p, *(void **)byte_254A74938, *(unint64_t *)&byte_254A74938[8]);
        else
          __p = *(std::string *)byte_254A74938;
        sub_2109ECDA0(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_254A74950);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A74950, &dword_21089F000);
        __cxa_guard_release(&qword_254A74600);
      }
      if (byte_254A74967 < 0)
      {
        sub_2108B314C(v17, (void *)xmmword_254A74950, *((unint64_t *)&xmmword_254A74950 + 1));
      }
      else
      {
        *(_OWORD *)v17 = xmmword_254A74950;
        v18 = unk_254A74960;
      }
      sub_21090AC90((char *)v17, (std::string *)&qword_254A74908);
      if (SHIBYTE(v18) < 0)
        operator delete(v17[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A74908, &dword_21089F000);
      __cxa_guard_release(&qword_254A745E8);
      goto LABEL_13;
    }
    if (byte_254A74937 >= 0)
      v6 = byte_254A74937;
    else
      v6 = unk_254A74928;
    if (byte_254A74937 >= 0)
      v7 = &qword_254A74920;
    else
      v7 = (uint64_t *)qword_254A74920;
    v8 = (char *)v7 + v6;
    if ((uint64_t)v6 >= 1)
    {
      v9 = v6;
      v10 = v7;
      do
      {
        v11 = memchr(v10, 60, v9);
        if (!v11)
          break;
        if (*v11 == 60)
          goto LABEL_35;
        v10 = (uint64_t *)(v11 + 1);
        v9 = v8 - (_BYTE *)v10;
      }
      while (v8 - (_BYTE *)v10 > 0);
    }
    v11 = (char *)v7 + v6;
LABEL_35:
    v12 = v11 - (_BYTE *)v7;
    if (v11 == v8)
      v12 = -1;
    if (v6 >= v12)
      v6 = v12;
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      sub_2108A4B7C();
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v13 = (char *)operator new(v14 + 1);
      *(_QWORD *)&byte_254A74938[8] = v6;
      *(_QWORD *)&byte_254A74938[16] = v15 | 0x8000000000000000;
      *(_QWORD *)byte_254A74938 = v13;
    }
    else
    {
      v13 = byte_254A74938;
      byte_254A74938[23] = v6;
      if (!v6)
        goto LABEL_48;
    }
    memmove(v13, v7, v6);
LABEL_48:
    v13[v6] = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A74938, &dword_21089F000);
    __cxa_guard_release(&qword_254A745F8);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_254A74907 < 0)
  {
    sub_2108B314C(&xmmword_254A748D8, (void *)xmmword_254A748F0, *((unint64_t *)&xmmword_254A748F0 + 1));
  }
  else
  {
    xmmword_254A748D8 = xmmword_254A748F0;
    unk_254A748E8 = unk_254A74900;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A748D8, &dword_21089F000);
  __cxa_guard_release(&qword_254A745D8);
LABEL_2:
  if (byte_254A748EF >= 0)
    return &xmmword_254A748D8;
  else
    return (__int128 *)xmmword_254A748D8;
}

void sub_2108E12D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_254A745E8);
  __cxa_guard_abort(&qword_254A745E0);
  __cxa_guard_abort(&qword_254A745D8);
  _Unwind_Resume(a1);
}

void sub_2108E136C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A745D8);
  _Unwind_Resume(a1);
}

void sub_2108E1384()
{
  sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 343, (uint64_t)&unk_210A02D2A, 0, (uint64_t)"Access notification must only be done in debug.", 47, (void (*)(void **))sub_2109EDDB4);
  abort();
}

void sub_2108E13C0(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t (**v39)();
  __int128 v40;
  uint64_t (**v41)();
  __int128 v42;

  if (a2)
  {
    sub_2108D5970(&v39, a1);
    v4 = (_QWORD *)operator new();
    v42 = v40;
    v40 = 0uLL;
    v41 = &off_24CA7D7D8;
    *v4 = &off_24CA7BD90;
    sub_21090E048(v4 + 1, (uint64_t)&v41);
    if ((_QWORD)v42)
    {
      v6 = *(_QWORD *)v42;
      v5 = *(std::__shared_weak_count **)(v42 + 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
          if (!v6)
            goto LABEL_10;
          goto LABEL_9;
        }
      }
      if (v6)
LABEL_9:
        sub_210912F6C(v42);
    }
LABEL_10:
    v41 = &off_24CA7D7F8;
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
    if (!*((_QWORD *)&v42 + 1))
      goto LABEL_14;
    v11 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      *a3 = v4;
      v13 = (uint64_t *)v40;
      if (!(_QWORD)v40)
        goto LABEL_22;
    }
    else
    {
LABEL_14:
      *a3 = v4;
      v13 = (uint64_t *)v40;
      if (!(_QWORD)v40)
        goto LABEL_22;
    }
    v15 = *v13;
    v14 = (std::__shared_weak_count *)v13[1];
    if (v14)
    {
      v16 = (unint64_t *)&v14->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      do
        v18 = __ldaxr(v16);
      while (__stlxr(v18 - 1, v16));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
        if (!v15)
          goto LABEL_22;
        goto LABEL_21;
      }
    }
    if (v15)
LABEL_21:
      sub_210912F6C(v40);
LABEL_22:
    v39 = &off_24CA7D7F8;
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
    if (!*((_QWORD *)&v40 + 1))
      return;
    v20 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (v21)
      return;
LABEL_51:
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    return;
  }
  sub_2108D5CB4(&v39, a1);
  v22 = (_QWORD *)operator new();
  v42 = v40;
  v40 = 0uLL;
  v41 = &off_24CA7D7B8;
  *v22 = &off_24CA7BD70;
  sub_21090DD20(v22 + 1, (uint64_t)&v41);
  if ((_QWORD)v42)
  {
    v24 = *(_QWORD *)v42;
    v23 = *(std::__shared_weak_count **)(v42 + 8);
    if (v23)
    {
      v25 = (unint64_t *)&v23->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
      do
        v27 = __ldaxr(v25);
      while (__stlxr(v27 - 1, v25));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
        if (!v24)
          goto LABEL_35;
        goto LABEL_34;
      }
    }
    if (v24)
LABEL_34:
      sub_210912E7C(v42);
  }
LABEL_35:
  v41 = &off_24CA7D7F8;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
  if (!*((_QWORD *)&v42 + 1))
    goto LABEL_39;
  v29 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
    *a3 = v22;
    v31 = (uint64_t *)v40;
    if (!(_QWORD)v40)
      goto LABEL_47;
  }
  else
  {
LABEL_39:
    *a3 = v22;
    v31 = (uint64_t *)v40;
    if (!(_QWORD)v40)
      goto LABEL_47;
  }
  v33 = *v31;
  v32 = (std::__shared_weak_count *)v31[1];
  if (v32)
  {
    v34 = (unint64_t *)&v32->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
    do
      v36 = __ldaxr(v34);
    while (__stlxr(v36 - 1, v34));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
      if (!v33)
        goto LABEL_47;
      goto LABEL_46;
    }
  }
  if (v33)
LABEL_46:
    sub_210912E7C(v40);
LABEL_47:
  v39 = &off_24CA7D7F8;
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v37 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
      goto LABEL_51;
  }
}

void sub_2108E175C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_21090DE2C(&a12);
  MEMORY[0x212BCC6FC](v12, 0xA1C40711E6FFCLL);
  sub_21090DE2C(&a9);
  _Unwind_Resume(a1);
}

void sub_2108E1790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21090DE2C(&a9);
  _Unwind_Resume(a1);
}

void sub_2108E17A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_21090E154(&a12);
  MEMORY[0x212BCC6FC](v12, 0xA1C40711E6FFCLL);
  sub_21090E154(&a9);
  _Unwind_Resume(a1);
}

void sub_2108E17D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21090E154(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2108E17EC()
{
  return 65792;
}

void sub_2108E17F8(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_2108D5970(a2, a1);
}

uint64_t sub_2108E1804(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24CA7B2C0;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24CA7C080[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_2108E1868(uint64_t *a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t (**v30)();
  uint64_t v31;
  std::__shared_weak_count *v32;

  if (sub_2108D9104(a2))
  {
    if (*(_DWORD *)(a2 + 52))
      v4 = *(_DWORD *)(a2 + 48) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 48);
    if (v4)
      v5 = 0;
    v6 = 0x100000000;
    if (v5 > 0x100000000)
      v6 = v5;
    *a1 = 0;
    a1[1] = v5;
    a1[2] = ((_DWORD)v5 != 0) | (unint64_t)(v6 << 32);
    if (HIDWORD(v5) * (_DWORD)v6 == -1
      && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v8 = *(_QWORD *)(a2 + 24);
        v7 = *(std::__shared_weak_count **)(a2 + 32);
        v30 = &off_24CA7D7F8;
        v31 = v8;
        v32 = v7;
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v10 = __ldxr(p_shared_owners);
          while (__stxr(v10 + 1, p_shared_owners));
        }
        break;
      case 1:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        v30 = &off_24CA7D7F8;
        v31 = v16;
        v32 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 2:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        v30 = &off_24CA7D7F8;
        v31 = v12;
        v32 = v11;
        if (v11)
        {
          v13 = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
        }
        break;
      case 3:
        v19 = *(std::__shared_weak_count **)(a2 + 24);
        if (v19 && (v20 = std::__shared_weak_count::lock(v19)) != 0)
        {
          v21 = v20;
          v22 = *(_QWORD *)(a2 + 16);
          v30 = &off_24CA7D7F8;
          if (v22)
          {
            v31 = v22;
            v32 = v20;
            v23 = (unint64_t *)&v20->__shared_owners_;
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
          }
          else
          {
            v31 = 0;
            v32 = 0;
          }
          v25 = (unint64_t *)&v20->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        else
        {
          v31 = 0;
          v32 = 0;
          v30 = &off_24CA7D7F8;
        }
        break;
      default:
        sub_2108B9060();
    }
    sub_2108D5054(a1, (uint64_t)&v30);
    v30 = &off_24CA7D7F8;
    v27 = v32;
    if (v32)
    {
      v28 = (unint64_t *)&v32->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
  }
}

void sub_2108E1AA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_21090E6B4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2108E1AB8(_QWORD *a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t (**v32)();
  uint64_t v33;
  std::__shared_weak_count *v34;

  if (sub_2108D9104(a2))
  {
    if (*(_DWORD *)(a2 + 52))
      v4 = *(_DWORD *)(a2 + 48) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 48);
    if (v4)
      v5 = 0;
    v6 = 0x100000000;
    if (v5 > 0x100000000)
      v6 = v5;
    *a1 = 0;
    a1[1] = v5;
    a1[2] = ((_DWORD)v5 != 0) | (unint64_t)(v6 << 32);
    if (HIDWORD(v5) * (_DWORD)v6 == -1
      && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v8 = *(_QWORD *)(a2 + 24);
        v7 = *(std::__shared_weak_count **)(a2 + 32);
        v32 = &off_24CA7D7F8;
        v33 = v8;
        v34 = v7;
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v10 = __ldxr(p_shared_owners);
          while (__stxr(v10 + 1, p_shared_owners));
        }
        break;
      case 1:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        v32 = &off_24CA7D7F8;
        v33 = v16;
        v34 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 2:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        v32 = &off_24CA7D7F8;
        v33 = v12;
        v34 = v11;
        if (v11)
        {
          v13 = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
        }
        break;
      case 3:
        v19 = *(std::__shared_weak_count **)(a2 + 24);
        if (v19 && (v20 = std::__shared_weak_count::lock(v19)) != 0)
        {
          v21 = v20;
          v22 = *(_QWORD *)(a2 + 16);
          v32 = &off_24CA7D7F8;
          if (v22)
          {
            v33 = v22;
            v34 = v20;
            v23 = (unint64_t *)&v20->__shared_owners_;
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
          }
          else
          {
            v33 = 0;
            v34 = 0;
          }
          v25 = (unint64_t *)&v20->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        else
        {
          v33 = 0;
          v34 = 0;
          v32 = &off_24CA7D7F8;
        }
        break;
      default:
        sub_2108B9060();
    }
    sub_2108D5054(&v30, (uint64_t)&v32);
    *a1 = v30;
    *(_OWORD *)(a1 + 1) = v31;
    v32 = &off_24CA7D7F8;
    v27 = v34;
    if (v34)
    {
      v28 = (unint64_t *)&v34->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
  }
}

void sub_2108E1D04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_21090E6B4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2108E1D18()
{
  return 3;
}

_UNKNOWN **sub_2108E1D20()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A745A0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A745A0))
    return &off_253ED6E40;
  __cxa_guard_release(&qword_254A745A0);
  return &off_253ED6E40;
}

void sub_2108E1D74(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  _QWORD v17[2];
  unsigned int v18;
  unsigned int v19;
  uint64_t (**v20)();
  uint64_t *v21;
  std::__shared_weak_count *v22;
  __int128 v23;
  uint64_t v24;
  _QWORD v25[2];

  sub_2108D9628(&v20, a1);
  sub_2108E1AB8(v17, a1);
  sub_2108E1AB8(&v15, a1);
  v4 = (_QWORD *)operator new();
  v5 = v4;
  v23 = v15;
  v24 = v16;
  *v4 = off_24CA7B6B0;
  if (v19 <= 0x10)
    v6 = 16;
  else
    v6 = v19;
  v25[0] = v17[1];
  v25[1] = v18 | (unint64_t)(v6 << 32);
  sub_2108D8B48((uint64_t)v4, (unsigned int *)v25, &v23);
  *v5 = off_24CA7B6B0;
  *a2 = v5;
  if (v21)
  {
    v8 = *v21;
    v7 = (std::__shared_weak_count *)v21[1];
    if (!v7)
      goto LABEL_10;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (v11)
    {
LABEL_10:
      if (!v8)
        goto LABEL_12;
      goto LABEL_11;
    }
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v8)
LABEL_11:
      sub_210912E7C((uint64_t)v21);
  }
LABEL_12:
  v20 = &off_24CA7D7F8;
  v12 = v22;
  if (v22)
  {
    v13 = (unint64_t *)&v22->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_2108E1EF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  MEMORY[0x212BCC6FC](v8, 0x10A3C40A1F8E8FFLL);
  sub_21090DE2C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2108E1F1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_21090DE2C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2108E1F30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_21090DE2C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2108E1F44(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_2108D9628(a2, a1);
}

double sub_2108E1F50(uint64_t a1, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double result;
  uint64_t v21;
  __int128 v22;
  _QWORD v23[3];
  unsigned int v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t (**v28)();
  __int128 *v29;
  std::__shared_weak_count *v30;
  __int128 v31;
  uint64_t v32;
  _QWORD v33[2];

  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24CA84C98, (const struct __class_type_info *)&unk_24CA7BF50, 0);
  if (!v4)
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v31, lpsrc, 3);
    v17 = v31;
    v18 = *(_QWORD *)(v31 + 16);
    v22 = *(_OWORD *)v31;
    v23[0] = v18;
    *(_QWORD *)&v31 = 0;
    MEMORY[0x212BCC6FC](v17, 0xC400A2AC0F1, v19);
    sub_2108E1868((uint64_t *)&v31, a1);
    v28 = (uint64_t (**)())&v22;
    v29 = &v31;
    *(_QWORD *)&result = sub_2109014B4((uint64_t *)&v28);
    return result;
  }
  v5 = (uint64_t)v4;
  sub_2108D9628(&v28, (uint64_t)v4);
  sub_2108E1AB8(&v26, v5);
  v31 = v26;
  v32 = v27;
  if (HIDWORD(v27) <= 0x10)
    v6 = 16;
  else
    v6 = HIDWORD(v27);
  *(_QWORD *)&v22 = off_24CA7B6B0;
  v33[0] = *((_QWORD *)&v26 + 1);
  v33[1] = v27 | (unint64_t)(v6 << 32);
  sub_2108D8B48((uint64_t)&v22, (unsigned int *)v33, &v31);
  *(_QWORD *)&v22 = off_24CA7B6B0;
  if (v29)
  {
    v8 = *(_QWORD *)v29;
    v7 = (std::__shared_weak_count *)*((_QWORD *)v29 + 1);
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          goto LABEL_13;
        goto LABEL_12;
      }
    }
    if (v8)
LABEL_12:
      sub_210912E7C((uint64_t)v29);
  }
LABEL_13:
  v28 = &off_24CA7D7F8;
  v12 = v30;
  if (v30)
  {
    v13 = (unint64_t *)&v30->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v24;
  *(_DWORD *)(a1 + 8) = DWORD2(v22);
  v16 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v16 == -1)
  {
    if ((_DWORD)v15 == -1)
    {
      result = *(double *)&v25;
      *(_OWORD *)(a1 + 48) = v25;
      return result;
    }
  }
  else if ((_DWORD)v15 == -1)
  {
    ((void (*)(__int128 *, uint64_t))off_24CA7C080[v16])(&v31, a1 + 16);
    *(_DWORD *)(a1 + 40) = -1;
    goto LABEL_25;
  }
  *(_QWORD *)&v31 = a1 + 16;
  ((void (*)(__int128 *))off_24CA7C0C0[v15])(&v31);
LABEL_25:
  v21 = v24;
  result = *(double *)&v25;
  *(_OWORD *)(a1 + 48) = v25;
  *(_QWORD *)&v22 = off_24CA7B2C0;
  if ((_DWORD)v21 != -1)
    ((void (*)(__int128 *, _QWORD *))off_24CA7C080[v21])(&v31, v23);
  return result;
}

void sub_2108E21E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;

  if (a14 != -1)
    ((void (*)(uint64_t *, uint64_t))off_24CA7C080[a14])(&a20, v22);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2108E22CC(uint64_t a1)
{
  uint64_t v2[3];

  sub_2108E1868(v2, a1);
  return v2[0];
}

double sub_2108E22F4@<D0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  double result;
  __int128 v7;
  uint64_t v8;

  if (a2 != 3
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 325, (uint64_t)"F == format", 11, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
  sub_2108E1868((uint64_t *)&v7, a1);
  v5 = operator new();
  result = *(double *)&v7;
  *(_OWORD *)v5 = v7;
  *(_QWORD *)(v5 + 16) = v8;
  *a3 = v5;
  return result;
}

double sub_2108E2394@<D0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  double result;
  __int128 v7;
  uint64_t v8;

  if (a2 != 3
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 331, (uint64_t)"F == format", 11, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
  sub_2108E1AB8(&v7, a1);
  v5 = operator new();
  result = *(double *)&v7;
  *(_OWORD *)v5 = v7;
  *(_QWORD *)(v5 + 16) = v8;
  *a3 = v5;
  return result;
}

__int128 *sub_2108E2434()
{
  unsigned __int8 v0;
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  size_t v6;
  uint64_t *v7;
  _BYTE *v8;
  size_t v9;
  uint64_t *v10;
  _BYTE *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  void *v17[2];
  uint64_t v18;
  std::string __p;

  v0 = atomic_load((unsigned __int8 *)&qword_254A74608);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A74608))
    goto LABEL_2;
  v2 = atomic_load((unsigned __int8 *)&qword_254A74610);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A74610))
  {
    v3 = atomic_load((unsigned __int8 *)&qword_254A74618);
    if ((v3 & 1) != 0 || !__cxa_guard_acquire(&qword_254A74618))
    {
LABEL_13:
      if (byte_254A749AF < 0)
      {
        sub_2108B314C(&xmmword_254A74980, (void *)qword_254A74998, unk_254A749A0);
      }
      else
      {
        xmmword_254A74980 = *(_OWORD *)&qword_254A74998;
        unk_254A74990 = unk_254A749A8;
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A74980, &dword_21089F000);
      __cxa_guard_release(&qword_254A74610);
      goto LABEL_7;
    }
    v4 = atomic_load((unsigned __int8 *)&qword_254A74620);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A74620))
    {
      sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cv::CVImageBuffer<img::Format::Gray16f>]", &qword_254A749B0);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A749B0, &dword_21089F000);
      __cxa_guard_release(&qword_254A74620);
    }
    v5 = atomic_load((unsigned __int8 *)&qword_254A74628);
    if ((v5 & 1) != 0 || !__cxa_guard_acquire(&qword_254A74628))
    {
LABEL_49:
      v16 = atomic_load((unsigned __int8 *)&qword_254A74630);
      if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_254A74630))
      {
        if (byte_254A749C8[23] < 0)
          sub_2108B314C(&__p, *(void **)byte_254A749C8, *(unint64_t *)&byte_254A749C8[8]);
        else
          __p = *(std::string *)byte_254A749C8;
        sub_2109ECDA0(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_254A749E0);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A749E0, &dword_21089F000);
        __cxa_guard_release(&qword_254A74630);
      }
      if (byte_254A749F7 < 0)
      {
        sub_2108B314C(v17, (void *)xmmword_254A749E0, *((unint64_t *)&xmmword_254A749E0 + 1));
      }
      else
      {
        *(_OWORD *)v17 = xmmword_254A749E0;
        v18 = unk_254A749F0;
      }
      sub_21090ADB8((char *)v17, (std::string *)&qword_254A74998);
      if (SHIBYTE(v18) < 0)
        operator delete(v17[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A74998, &dword_21089F000);
      __cxa_guard_release(&qword_254A74618);
      goto LABEL_13;
    }
    if (byte_254A749C7 >= 0)
      v6 = byte_254A749C7;
    else
      v6 = unk_254A749B8;
    if (byte_254A749C7 >= 0)
      v7 = &qword_254A749B0;
    else
      v7 = (uint64_t *)qword_254A749B0;
    v8 = (char *)v7 + v6;
    if ((uint64_t)v6 >= 1)
    {
      v9 = v6;
      v10 = v7;
      do
      {
        v11 = memchr(v10, 60, v9);
        if (!v11)
          break;
        if (*v11 == 60)
          goto LABEL_35;
        v10 = (uint64_t *)(v11 + 1);
        v9 = v8 - (_BYTE *)v10;
      }
      while (v8 - (_BYTE *)v10 > 0);
    }
    v11 = (char *)v7 + v6;
LABEL_35:
    v12 = v11 - (_BYTE *)v7;
    if (v11 == v8)
      v12 = -1;
    if (v6 >= v12)
      v6 = v12;
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      sub_2108A4B7C();
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v13 = (char *)operator new(v14 + 1);
      *(_QWORD *)&byte_254A749C8[8] = v6;
      *(_QWORD *)&byte_254A749C8[16] = v15 | 0x8000000000000000;
      *(_QWORD *)byte_254A749C8 = v13;
    }
    else
    {
      v13 = byte_254A749C8;
      byte_254A749C8[23] = v6;
      if (!v6)
        goto LABEL_48;
    }
    memmove(v13, v7, v6);
LABEL_48:
    v13[v6] = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A749C8, &dword_21089F000);
    __cxa_guard_release(&qword_254A74628);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_254A74997 < 0)
  {
    sub_2108B314C(&xmmword_254A74968, (void *)xmmword_254A74980, *((unint64_t *)&xmmword_254A74980 + 1));
  }
  else
  {
    xmmword_254A74968 = xmmword_254A74980;
    unk_254A74978 = unk_254A74990;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A74968, &dword_21089F000);
  __cxa_guard_release(&qword_254A74608);
LABEL_2:
  if (byte_254A7497F >= 0)
    return &xmmword_254A74968;
  else
    return (__int128 *)xmmword_254A74968;
}

void sub_2108E2888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_254A74618);
  __cxa_guard_abort(&qword_254A74610);
  __cxa_guard_abort(&qword_254A74608);
  _Unwind_Resume(a1);
}

void sub_2108E2924(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A74608);
  _Unwind_Resume(a1);
}

void sub_2108E293C()
{
  sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 343, (uint64_t)&unk_210A02D2A, 0, (uint64_t)"Access notification must only be done in debug.", 47, (void (*)(void **))sub_2109EDDB4);
  abort();
}

void sub_2108E2978(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t (**v39)();
  __int128 v40;
  uint64_t (**v41)();
  __int128 v42;

  if (a2)
  {
    sub_2108D92E4(&v39, a1);
    v4 = (_QWORD *)operator new();
    v42 = v40;
    v40 = 0uLL;
    v41 = &off_24CA7D7D8;
    *v4 = &off_24CA7BD90;
    sub_21090E048(v4 + 1, (uint64_t)&v41);
    if ((_QWORD)v42)
    {
      v6 = *(_QWORD *)v42;
      v5 = *(std::__shared_weak_count **)(v42 + 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
          if (!v6)
            goto LABEL_10;
          goto LABEL_9;
        }
      }
      if (v6)
LABEL_9:
        sub_210912F6C(v42);
    }
LABEL_10:
    v41 = &off_24CA7D7F8;
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
    if (!*((_QWORD *)&v42 + 1))
      goto LABEL_14;
    v11 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      *a3 = v4;
      v13 = (uint64_t *)v40;
      if (!(_QWORD)v40)
        goto LABEL_22;
    }
    else
    {
LABEL_14:
      *a3 = v4;
      v13 = (uint64_t *)v40;
      if (!(_QWORD)v40)
        goto LABEL_22;
    }
    v15 = *v13;
    v14 = (std::__shared_weak_count *)v13[1];
    if (v14)
    {
      v16 = (unint64_t *)&v14->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      do
        v18 = __ldaxr(v16);
      while (__stlxr(v18 - 1, v16));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
        if (!v15)
          goto LABEL_22;
        goto LABEL_21;
      }
    }
    if (v15)
LABEL_21:
      sub_210912F6C(v40);
LABEL_22:
    v39 = &off_24CA7D7F8;
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
    if (!*((_QWORD *)&v40 + 1))
      return;
    v20 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (v21)
      return;
LABEL_51:
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    return;
  }
  sub_2108D9628(&v39, a1);
  v22 = (_QWORD *)operator new();
  v42 = v40;
  v40 = 0uLL;
  v41 = &off_24CA7D7B8;
  *v22 = &off_24CA7BD70;
  sub_21090DD20(v22 + 1, (uint64_t)&v41);
  if ((_QWORD)v42)
  {
    v24 = *(_QWORD *)v42;
    v23 = *(std::__shared_weak_count **)(v42 + 8);
    if (v23)
    {
      v25 = (unint64_t *)&v23->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
      do
        v27 = __ldaxr(v25);
      while (__stlxr(v27 - 1, v25));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
        if (!v24)
          goto LABEL_35;
        goto LABEL_34;
      }
    }
    if (v24)
LABEL_34:
      sub_210912E7C(v42);
  }
LABEL_35:
  v41 = &off_24CA7D7F8;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
  if (!*((_QWORD *)&v42 + 1))
    goto LABEL_39;
  v29 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
    *a3 = v22;
    v31 = (uint64_t *)v40;
    if (!(_QWORD)v40)
      goto LABEL_47;
  }
  else
  {
LABEL_39:
    *a3 = v22;
    v31 = (uint64_t *)v40;
    if (!(_QWORD)v40)
      goto LABEL_47;
  }
  v33 = *v31;
  v32 = (std::__shared_weak_count *)v31[1];
  if (v32)
  {
    v34 = (unint64_t *)&v32->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
    do
      v36 = __ldaxr(v34);
    while (__stlxr(v36 - 1, v34));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
      if (!v33)
        goto LABEL_47;
      goto LABEL_46;
    }
  }
  if (v33)
LABEL_46:
    sub_210912E7C(v40);
LABEL_47:
  v39 = &off_24CA7D7F8;
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v37 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
      goto LABEL_51;
  }
}

void sub_2108E2D14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_21090DE2C(&a12);
  MEMORY[0x212BCC6FC](v12, 0xA1C40711E6FFCLL);
  sub_21090DE2C(&a9);
  _Unwind_Resume(a1);
}

void sub_2108E2D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21090DE2C(&a9);
  _Unwind_Resume(a1);
}

void sub_2108E2D5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_21090E154(&a12);
  MEMORY[0x212BCC6FC](v12, 0xA1C40711E6FFCLL);
  sub_21090E154(&a9);
  _Unwind_Resume(a1);
}

void sub_2108E2D90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21090E154(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2108E2DA4()
{
  return 65792;
}

void sub_2108E2DB0(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_2108D92E4(a2, a1);
}

uint64_t sub_2108E2DBC(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24CA7B470;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24CA7C080[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_2108E2E20(uint64_t *a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t (**v30)();
  uint64_t v31;
  std::__shared_weak_count *v32;

  if (sub_2108DC174(a2))
  {
    if (*(_DWORD *)(a2 + 52))
      v4 = *(_DWORD *)(a2 + 48) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 48);
    if (v4)
      v5 = 0;
    v6 = 0x100000000;
    if (v5 > 0x100000000)
      v6 = v5;
    *a1 = 0;
    a1[1] = v5;
    a1[2] = ((_DWORD)v5 != 0) | (unint64_t)(v6 << 32);
    if (HIDWORD(v5) * (_DWORD)v6 == -1
      && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v8 = *(_QWORD *)(a2 + 24);
        v7 = *(std::__shared_weak_count **)(a2 + 32);
        v30 = &off_24CA7D7F8;
        v31 = v8;
        v32 = v7;
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v10 = __ldxr(p_shared_owners);
          while (__stxr(v10 + 1, p_shared_owners));
        }
        break;
      case 1:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        v30 = &off_24CA7D7F8;
        v31 = v16;
        v32 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 2:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        v30 = &off_24CA7D7F8;
        v31 = v12;
        v32 = v11;
        if (v11)
        {
          v13 = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
        }
        break;
      case 3:
        v19 = *(std::__shared_weak_count **)(a2 + 24);
        if (v19 && (v20 = std::__shared_weak_count::lock(v19)) != 0)
        {
          v21 = v20;
          v22 = *(_QWORD *)(a2 + 16);
          v30 = &off_24CA7D7F8;
          if (v22)
          {
            v31 = v22;
            v32 = v20;
            v23 = (unint64_t *)&v20->__shared_owners_;
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
          }
          else
          {
            v31 = 0;
            v32 = 0;
          }
          v25 = (unint64_t *)&v20->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        else
        {
          v31 = 0;
          v32 = 0;
          v30 = &off_24CA7D7F8;
        }
        break;
      default:
        sub_2108B9060();
    }
    sub_2108DBA38(a1, (uint64_t)&v30);
    v30 = &off_24CA7D7F8;
    v27 = v32;
    if (v32)
    {
      v28 = (unint64_t *)&v32->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
  }
}

void sub_2108E305C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_21090E6B4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2108E3070(_QWORD *a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t (**v32)();
  uint64_t v33;
  std::__shared_weak_count *v34;

  if (sub_2108DC174(a2))
  {
    if (*(_DWORD *)(a2 + 52))
      v4 = *(_DWORD *)(a2 + 48) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 48);
    if (v4)
      v5 = 0;
    v6 = 0x100000000;
    if (v5 > 0x100000000)
      v6 = v5;
    *a1 = 0;
    a1[1] = v5;
    a1[2] = ((_DWORD)v5 != 0) | (unint64_t)(v6 << 32);
    if (HIDWORD(v5) * (_DWORD)v6 == -1
      && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
    {
      abort();
    }
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v8 = *(_QWORD *)(a2 + 24);
        v7 = *(std::__shared_weak_count **)(a2 + 32);
        v32 = &off_24CA7D7F8;
        v33 = v8;
        v34 = v7;
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v10 = __ldxr(p_shared_owners);
          while (__stxr(v10 + 1, p_shared_owners));
        }
        break;
      case 1:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        v32 = &off_24CA7D7F8;
        v33 = v16;
        v34 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 2:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        v32 = &off_24CA7D7F8;
        v33 = v12;
        v34 = v11;
        if (v11)
        {
          v13 = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
        }
        break;
      case 3:
        v19 = *(std::__shared_weak_count **)(a2 + 24);
        if (v19 && (v20 = std::__shared_weak_count::lock(v19)) != 0)
        {
          v21 = v20;
          v22 = *(_QWORD *)(a2 + 16);
          v32 = &off_24CA7D7F8;
          if (v22)
          {
            v33 = v22;
            v34 = v20;
            v23 = (unint64_t *)&v20->__shared_owners_;
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
          }
          else
          {
            v33 = 0;
            v34 = 0;
          }
          v25 = (unint64_t *)&v20->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        else
        {
          v33 = 0;
          v34 = 0;
          v32 = &off_24CA7D7F8;
        }
        break;
      default:
        sub_2108B9060();
    }
    sub_2108DBA38(&v30, (uint64_t)&v32);
    *a1 = v30;
    *(_OWORD *)(a1 + 1) = v31;
    v32 = &off_24CA7D7F8;
    v27 = v34;
    if (v34)
    {
      v28 = (unint64_t *)&v34->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
  }
}

void sub_2108E32BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_21090E6B4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2108E32D0()
{
  return 4;
}

_UNKNOWN **sub_2108E32D8()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A745A0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A745A0))
    return &off_253ED6E40;
  __cxa_guard_release(&qword_254A745A0);
  return &off_253ED6E40;
}

void sub_2108E332C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  _QWORD v17[2];
  unsigned int v18;
  unsigned int v19;
  uint64_t (**v20)();
  uint64_t *v21;
  std::__shared_weak_count *v22;
  __int128 v23;
  uint64_t v24;
  _QWORD v25[2];

  sub_2108DC698(&v20, a1);
  sub_2108E3070(v17, a1);
  sub_2108E3070(&v15, a1);
  v4 = (_QWORD *)operator new();
  v5 = v4;
  v23 = v15;
  v24 = v16;
  *v4 = off_24CA7B740;
  if (v19 <= 8)
    v6 = 8;
  else
    v6 = v19;
  v25[0] = v17[1];
  v25[1] = v18 | (unint64_t)(v6 << 32);
  sub_2108DBD54((uint64_t)v4, (unsigned int *)v25, &v23);
  *v5 = off_24CA7B740;
  *a2 = v5;
  if (v21)
  {
    v8 = *v21;
    v7 = (std::__shared_weak_count *)v21[1];
    if (!v7)
      goto LABEL_10;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (v11)
    {
LABEL_10:
      if (!v8)
        goto LABEL_12;
      goto LABEL_11;
    }
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v8)
LABEL_11:
      sub_210912E7C((uint64_t)v21);
  }
LABEL_12:
  v20 = &off_24CA7D7F8;
  v12 = v22;
  if (v22)
  {
    v13 = (unint64_t *)&v22->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_2108E34A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  MEMORY[0x212BCC6FC](v8, 0x10A3C40A1F8E8FFLL);
  sub_21090DE2C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2108E34D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_21090DE2C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2108E34E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_21090DE2C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2108E34FC(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_2108DC698(a2, a1);
}

double sub_2108E3508(uint64_t a1, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double result;
  uint64_t v21;
  __int128 v22;
  _QWORD v23[3];
  unsigned int v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t (**v28)();
  uint64_t *v29;
  std::__shared_weak_count *v30;
  __int128 v31;
  uint64_t v32;
  _QWORD v33[2];

  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24CA84C98, (const struct __class_type_info *)&unk_24CA7BF68, 0);
  if (!v4)
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v31, lpsrc, 4);
    v17 = v31;
    v18 = *(_QWORD *)(v31 + 16);
    v22 = *(_OWORD *)v31;
    v23[0] = v18;
    *(_QWORD *)&v31 = 0;
    MEMORY[0x212BCC6FC](v17, 0xC400A2AC0F1, v19);
    sub_2108E2E20((uint64_t *)&v31, a1);
    *(float *)&result = sub_2109030FC((uint64_t)&v22, (uint64_t)&v31);
    return result;
  }
  v5 = (uint64_t)v4;
  sub_2108DC698(&v28, (uint64_t)v4);
  sub_2108E3070(&v26, v5);
  v31 = v26;
  v32 = v27;
  if (HIDWORD(v27) <= 8)
    v6 = 8;
  else
    v6 = HIDWORD(v27);
  *(_QWORD *)&v22 = off_24CA7B740;
  v33[0] = *((_QWORD *)&v26 + 1);
  v33[1] = v27 | (unint64_t)(v6 << 32);
  sub_2108DBD54((uint64_t)&v22, (unsigned int *)v33, &v31);
  *(_QWORD *)&v22 = off_24CA7B740;
  if (v29)
  {
    v8 = *v29;
    v7 = (std::__shared_weak_count *)v29[1];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          goto LABEL_13;
        goto LABEL_12;
      }
    }
    if (v8)
LABEL_12:
      sub_210912E7C((uint64_t)v29);
  }
LABEL_13:
  v28 = &off_24CA7D7F8;
  v12 = v30;
  if (v30)
  {
    v13 = (unint64_t *)&v30->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v24;
  *(_DWORD *)(a1 + 8) = DWORD2(v22);
  v16 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v16 == -1)
  {
    if ((_DWORD)v15 == -1)
    {
      result = *(double *)&v25;
      *(_OWORD *)(a1 + 48) = v25;
      return result;
    }
  }
  else if ((_DWORD)v15 == -1)
  {
    ((void (*)(__int128 *, uint64_t))off_24CA7C080[v16])(&v31, a1 + 16);
    *(_DWORD *)(a1 + 40) = -1;
    goto LABEL_25;
  }
  *(_QWORD *)&v31 = a1 + 16;
  ((void (*)(__int128 *))off_24CA7C0C0[v15])(&v31);
LABEL_25:
  v21 = v24;
  result = *(double *)&v25;
  *(_OWORD *)(a1 + 48) = v25;
  *(_QWORD *)&v22 = off_24CA7B470;
  if ((_DWORD)v21 != -1)
    ((void (*)(__int128 *, _QWORD *))off_24CA7C080[v21])(&v31, v23);
  return result;
}

void sub_2108E3790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;

  if (a14 != -1)
    ((void (*)(uint64_t *, uint64_t))off_24CA7C080[a14])(&a20, v22);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2108E387C(uint64_t a1)
{
  uint64_t v2[3];

  sub_2108E2E20(v2, a1);
  return v2[0];
}

double sub_2108E38A4@<D0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  double result;
  __int128 v7;
  uint64_t v8;

  if (a2 != 4
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 325, (uint64_t)"F == format", 11, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
  sub_2108E2E20((uint64_t *)&v7, a1);
  v5 = operator new();
  result = *(double *)&v7;
  *(_OWORD *)v5 = v7;
  *(_QWORD *)(v5 + 16) = v8;
  *a3 = v5;
  return result;
}

double sub_2108E3944@<D0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  double result;
  __int128 v7;
  uint64_t v8;

  if (a2 != 4
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 331, (uint64_t)"F == format", 11, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
  sub_2108E3070(&v7, a1);
  v5 = operator new();
  result = *(double *)&v7;
  *(_OWORD *)v5 = v7;
  *(_QWORD *)(v5 + 16) = v8;
  *a3 = v5;
  return result;
}

__int128 *sub_2108E39E4()
{
  unsigned __int8 v0;
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  size_t v6;
  uint64_t *v7;
  _BYTE *v8;
  size_t v9;
  uint64_t *v10;
  _BYTE *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  void *v17[2];
  uint64_t v18;
  std::string __p;

  v0 = atomic_load((unsigned __int8 *)&qword_254A74638);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A74638))
    goto LABEL_2;
  v2 = atomic_load((unsigned __int8 *)&qword_254A74640);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A74640))
  {
    v3 = atomic_load((unsigned __int8 *)&qword_254A74648);
    if ((v3 & 1) != 0 || !__cxa_guard_acquire(&qword_254A74648))
    {
LABEL_13:
      if (byte_254A74A3F < 0)
      {
        sub_2108B314C(&xmmword_254A74A10, (void *)qword_254A74A28, unk_254A74A30);
      }
      else
      {
        xmmword_254A74A10 = *(_OWORD *)&qword_254A74A28;
        unk_254A74A20 = unk_254A74A38;
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A74A10, &dword_21089F000);
      __cxa_guard_release(&qword_254A74640);
      goto LABEL_7;
    }
    v4 = atomic_load((unsigned __int8 *)&qword_254A74650);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A74650))
    {
      sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cv::CVImageBuffer<img::Format::Gray32f>]", &qword_254A74A40);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A74A40, &dword_21089F000);
      __cxa_guard_release(&qword_254A74650);
    }
    v5 = atomic_load((unsigned __int8 *)&qword_254A74658);
    if ((v5 & 1) != 0 || !__cxa_guard_acquire(&qword_254A74658))
    {
LABEL_49:
      v16 = atomic_load((unsigned __int8 *)&qword_254A74660);
      if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_254A74660))
      {
        if (byte_254A74A58[23] < 0)
          sub_2108B314C(&__p, *(void **)byte_254A74A58, *(unint64_t *)&byte_254A74A58[8]);
        else
          __p = *(std::string *)byte_254A74A58;
        sub_2109ECDA0(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_254A74A70);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A74A70, &dword_21089F000);
        __cxa_guard_release(&qword_254A74660);
      }
      if (byte_254A74A87 < 0)
      {
        sub_2108B314C(v17, (void *)xmmword_254A74A70, *((unint64_t *)&xmmword_254A74A70 + 1));
      }
      else
      {
        *(_OWORD *)v17 = xmmword_254A74A70;
        v18 = unk_254A74A80;
      }
      sub_21090AEE0((char *)v17, (std::string *)&qword_254A74A28);
      if (SHIBYTE(v18) < 0)
        operator delete(v17[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A74A28, &dword_21089F000);
      __cxa_guard_release(&qword_254A74648);
      goto LABEL_13;
    }
    if (byte_254A74A57 >= 0)
      v6 = byte_254A74A57;
    else
      v6 = unk_254A74A48;
    if (byte_254A74A57 >= 0)
      v7 = &qword_254A74A40;
    else
      v7 = (uint64_t *)qword_254A74A40;
    v8 = (char *)v7 + v6;
    if ((uint64_t)v6 >= 1)
    {
      v9 = v6;
      v10 = v7;
      do
      {
        v11 = memchr(v10, 60, v9);
        if (!v11)
          break;
        if (*v11 == 60)
          goto LABEL_35;
        v10 = (uint64_t *)(v11 + 1);
        v9 = v8 - (_BYTE *)v10;
      }
      while (v8 - (_BYTE *)v10 > 0);
    }
    v11 = (char *)v7 + v6;
LABEL_35:
    v12 = v11 - (_BYTE *)v7;
    if (v11 == v8)
      v12 = -1;
    if (v6 >= v12)
      v6 = v12;
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      sub_2108A4B7C();
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v13 = (char *)operator new(v14 + 1);
      *(_QWORD *)&byte_254A74A58[8] = v6;
      *(_QWORD *)&byte_254A74A58[16] = v15 | 0x8000000000000000;
      *(_QWORD *)byte_254A74A58 = v13;
    }
    else
    {
      v13 = byte_254A74A58;
      byte_254A74A58[23] = v6;
      if (!v6)
        goto LABEL_48;
    }
    memmove(v13, v7, v6);
LABEL_48:
    v13[v6] = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A74A58, &dword_21089F000);
    __cxa_guard_release(&qword_254A74658);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_254A74A27 < 0)
  {
    sub_2108B314C(&xmmword_254A749F8, (void *)xmmword_254A74A10, *((unint64_t *)&xmmword_254A74A10 + 1));
  }
  else
  {
    xmmword_254A749F8 = xmmword_254A74A10;
    unk_254A74A08 = unk_254A74A20;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A749F8, &dword_21089F000);
  __cxa_guard_release(&qword_254A74638);
LABEL_2:
  if (byte_254A74A0F >= 0)
    return &xmmword_254A749F8;
  else
    return (__int128 *)xmmword_254A749F8;
}

void sub_2108E3E38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_254A74648);
  __cxa_guard_abort(&qword_254A74640);
  __cxa_guard_abort(&qword_254A74638);
  _Unwind_Resume(a1);
}

void sub_2108E3ED4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A74638);
  _Unwind_Resume(a1);
}

void sub_2108E3EEC()
{
  sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 343, (uint64_t)&unk_210A02D2A, 0, (uint64_t)"Access notification must only be done in debug.", 47, (void (*)(void **))sub_2109EDDB4);
  abort();
}

void sub_2108E3F28(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t (**v39)();
  __int128 v40;
  uint64_t (**v41)();
  __int128 v42;

  if (a2)
  {
    sub_2108DC354(&v39, a1);
    v4 = (_QWORD *)operator new();
    v42 = v40;
    v40 = 0uLL;
    v41 = &off_24CA7D7D8;
    *v4 = &off_24CA7BD90;
    sub_21090E048(v4 + 1, (uint64_t)&v41);
    if ((_QWORD)v42)
    {
      v6 = *(_QWORD *)v42;
      v5 = *(std::__shared_weak_count **)(v42 + 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
          if (!v6)
            goto LABEL_10;
          goto LABEL_9;
        }
      }
      if (v6)
LABEL_9:
        sub_210912F6C(v42);
    }
LABEL_10:
    v41 = &off_24CA7D7F8;
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
    if (!*((_QWORD *)&v42 + 1))
      goto LABEL_14;
    v11 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      *a3 = v4;
      v13 = (uint64_t *)v40;
      if (!(_QWORD)v40)
        goto LABEL_22;
    }
    else
    {
LABEL_14:
      *a3 = v4;
      v13 = (uint64_t *)v40;
      if (!(_QWORD)v40)
        goto LABEL_22;
    }
    v15 = *v13;
    v14 = (std::__shared_weak_count *)v13[1];
    if (v14)
    {
      v16 = (unint64_t *)&v14->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      do
        v18 = __ldaxr(v16);
      while (__stlxr(v18 - 1, v16));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
        if (!v15)
          goto LABEL_22;
        goto LABEL_21;
      }
    }
    if (v15)
LABEL_21:
      sub_210912F6C(v40);
LABEL_22:
    v39 = &off_24CA7D7F8;
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
    if (!*((_QWORD *)&v40 + 1))
      return;
    v20 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (v21)
      return;
LABEL_51:
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    return;
  }
  sub_2108DC698(&v39, a1);
  v22 = (_QWORD *)operator new();
  v42 = v40;
  v40 = 0uLL;
  v41 = &off_24CA7D7B8;
  *v22 = &off_24CA7BD70;
  sub_21090DD20(v22 + 1, (uint64_t)&v41);
  if ((_QWORD)v42)
  {
    v24 = *(_QWORD *)v42;
    v23 = *(std::__shared_weak_count **)(v42 + 8);
    if (v23)
    {
      v25 = (unint64_t *)&v23->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
      do
        v27 = __ldaxr(v25);
      while (__stlxr(v27 - 1, v25));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
        if (!v24)
          goto LABEL_35;
        goto LABEL_34;
      }
    }
    if (v24)
LABEL_34:
      sub_210912E7C(v42);
  }
LABEL_35:
  v41 = &off_24CA7D7F8;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
  if (!*((_QWORD *)&v42 + 1))
    goto LABEL_39;
  v29 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
    *a3 = v22;
    v31 = (uint64_t *)v40;
    if (!(_QWORD)v40)
      goto LABEL_47;
  }
  else
  {
LABEL_39:
    *a3 = v22;
    v31 = (uint64_t *)v40;
    if (!(_QWORD)v40)
      goto LABEL_47;
  }
  v33 = *v31;
  v32 = (std::__shared_weak_count *)v31[1];
  if (v32)
  {
    v34 = (unint64_t *)&v32->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
    do
      v36 = __ldaxr(v34);
    while (__stlxr(v36 - 1, v34));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
      if (!v33)
        goto LABEL_47;
      goto LABEL_46;
    }
  }
  if (v33)
LABEL_46:
    sub_210912E7C(v40);
LABEL_47:
  v39 = &off_24CA7D7F8;
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v37 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
      goto LABEL_51;
  }
}

void sub_2108E42C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_21090DE2C(&a12);
  MEMORY[0x212BCC6FC](v12, 0xA1C40711E6FFCLL);
  sub_21090DE2C(&a9);
  _Unwind_Resume(a1);
}

void sub_2108E42F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21090DE2C(&a9);
  _Unwind_Resume(a1);
}

void sub_2108E430C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_21090E154(&a12);
  MEMORY[0x212BCC6FC](v12, 0xA1C40711E6FFCLL);
  sub_21090E154(&a9);
  _Unwind_Resume(a1);
}

void sub_2108E4340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21090E154(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2108E4354()
{
  return 65792;
}

void sub_2108E4360(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_2108DC354(a2, a1);
}

uint64_t sub_2108E436C(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24CA7AF60;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24CA7C080[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_2108E43D0(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if (sub_2108D1CD4(a2))
  {
    if (*(_DWORD *)(a2 + 76))
      v4 = *(_DWORD *)(a2 + 72) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 72);
    if (v4)
      v5 = 0;
    LODWORD(v34) = 2;
    *(_QWORD *)((char *)&v34 + 4) = v5;
    v6 = 2 * ((_DWORD)v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5))
      v7 = v7;
    else
      v7 = 0;
    v8 = v6 & 0x1FFFFFFFFLL | ((unint64_t)(v7 >> 1) << 33);
    v9 = __PAIR64__(DWORD1(v34), 2);
    LODWORD(v34) = 1;
    *(_QWORD *)((char *)&v34 + 4) = v8;
    v10 = v34;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(_QWORD *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(_QWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24CA7D7F8;
        *((_QWORD *)&v34 + 1) = v12;
        v35 = v11;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        break;
      case 1:
        v20 = *(_QWORD *)(a2 + 24);
        v19 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24CA7D7F8;
        *((_QWORD *)&v34 + 1) = v20;
        v35 = v19;
        if (v19)
        {
          v21 = (unint64_t *)&v19->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        break;
      case 2:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24CA7D7F8;
        *((_QWORD *)&v34 + 1) = v16;
        v35 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 3:
        v23 = *(std::__shared_weak_count **)(a2 + 24);
        if (v23 && (v24 = std::__shared_weak_count::lock(v23)) != 0)
        {
          v25 = v24;
          v26 = *(_QWORD *)(a2 + 16);
          *(_QWORD *)&v34 = &off_24CA7D7F8;
          if (v26)
          {
            *((_QWORD *)&v34 + 1) = v26;
            v35 = v24;
            v27 = (unint64_t *)&v24->__shared_owners_;
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          else
          {
            *((_QWORD *)&v34 + 1) = 0;
            v35 = 0;
          }
          v29 = (unint64_t *)&v24->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        else
        {
          *((_QWORD *)&v34 + 1) = 0;
          v35 = 0;
          *(_QWORD *)&v34 = &off_24CA7D7F8;
        }
        break;
      default:
        sub_2108B9060();
    }
    sub_2108D1394(a1, (uint64_t)&v34);
    *(_QWORD *)&v34 = &off_24CA7D7F8;
    v31 = v35;
    if (v35)
    {
      v32 = (unint64_t *)&v35->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
}

void sub_2108E4634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21090E6B4(&a9);
  _Unwind_Resume(a1);
}

void sub_2108E4648(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t (**v34)();
  uint64_t v35;
  std::__shared_weak_count *v36;
  _BYTE v37[24];
  __int128 v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  if (sub_2108D1CD4(a2))
  {
    if (*(_DWORD *)(a2 + 76))
      v4 = *(_DWORD *)(a2 + 72) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 72);
    if (v4)
      v5 = 0;
    *(_DWORD *)v37 = 2;
    *(_QWORD *)&v37[4] = v5;
    v6 = 2 * ((_DWORD)v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5))
      v7 = v7;
    else
      v7 = 0;
    v8 = v6 & 0x1FFFFFFFFLL | ((unint64_t)(v7 >> 1) << 33);
    v9 = __PAIR64__(*(unsigned int *)&v37[4], 2);
    *(_DWORD *)v37 = 1;
    *(_QWORD *)&v37[4] = v8;
    v10 = *(_QWORD *)v37;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(_QWORD *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(_QWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        v34 = &off_24CA7D7F8;
        v35 = v12;
        v36 = v11;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        break;
      case 1:
        v20 = *(_QWORD *)(a2 + 24);
        v19 = *(std::__shared_weak_count **)(a2 + 32);
        v34 = &off_24CA7D7F8;
        v35 = v20;
        v36 = v19;
        if (v19)
        {
          v21 = (unint64_t *)&v19->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        break;
      case 2:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        v34 = &off_24CA7D7F8;
        v35 = v16;
        v36 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 3:
        v23 = *(std::__shared_weak_count **)(a2 + 24);
        if (v23 && (v24 = std::__shared_weak_count::lock(v23)) != 0)
        {
          v25 = v24;
          v26 = *(_QWORD *)(a2 + 16);
          v34 = &off_24CA7D7F8;
          if (v26)
          {
            v35 = v26;
            v36 = v24;
            v27 = (unint64_t *)&v24->__shared_owners_;
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          else
          {
            v35 = 0;
            v36 = 0;
          }
          v29 = (unint64_t *)&v24->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        else
        {
          v35 = 0;
          v36 = 0;
          v34 = &off_24CA7D7F8;
        }
        break;
      default:
        sub_2108B9060();
    }
    sub_2108D1394((uint64_t)v37, (uint64_t)&v34);
    *(_QWORD *)a1 = *(_QWORD *)v37;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)&v37[8];
    *(_OWORD *)(a1 + 24) = v38;
    *(_QWORD *)(a1 + 40) = v39;
    v34 = &off_24CA7D7F8;
    v31 = v36;
    if (v36)
    {
      v32 = (unint64_t *)&v36->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
}

void sub_2108E48CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21090E6B4(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2108E48E0()
{
  return 5;
}

_UNKNOWN **sub_2108E48E8()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A745A0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A745A0))
    return &off_253ED6E40;
  __cxa_guard_release(&qword_254A745A0);
  return &off_253ED6E40;
}

void sub_2108E493C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _OWORD v15[3];
  _BYTE v16[32];
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t (**v20)();
  uint64_t *v21;
  std::__shared_weak_count *v22;
  _OWORD v23[3];
  _DWORD v24[3];
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[3];

  v29[2] = *MEMORY[0x24BDAC8D0];
  sub_2108D2220(&v20, a1);
  sub_2108E4648((uint64_t)v16, a1);
  sub_2108E4648((uint64_t)v15, a1);
  v4 = (_QWORD *)operator new();
  v5 = v4;
  v23[0] = v15[0];
  v23[1] = v15[1];
  v23[2] = v15[2];
  *v4 = off_24CA7B7D0;
  if (v19 <= 0x20)
    v6 = 32;
  else
    v6 = v19;
  *(_QWORD *)&v24[1] = v17;
  v24[0] = 2;
  LODWORD(v29[0]) = 1;
  *(_QWORD *)((char *)v29 + 4) = v18 | (unint64_t)(v6 << 32);
  v25 = v29[0];
  v26 = v6;
  v27 = v17;
  v28 = *(_QWORD *)((char *)v29 + 4);
  sub_2108D1724((uint64_t)v4, (uint64_t)v24, v23);
  *v5 = off_24CA7B7D0;
  *a2 = v5;
  if (v21)
  {
    v8 = *v21;
    v7 = (std::__shared_weak_count *)v21[1];
    if (!v7)
      goto LABEL_10;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (v11)
    {
LABEL_10:
      if (!v8)
        goto LABEL_12;
      goto LABEL_11;
    }
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v8)
LABEL_11:
      sub_210912E7C((uint64_t)v21);
  }
LABEL_12:
  v20 = &off_24CA7D7F8;
  v12 = v22;
  if (v22)
  {
    v13 = (unint64_t *)&v22->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_2108E4B08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a2)
    sub_2108ABF6C(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2108E4B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_21090DE2C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2108E4B78(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_2108D2220(a2, a1);
}

double sub_2108E4B84(uint64_t a1, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double result;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  _OWORD v34[2];
  __int128 v35;
  uint64_t (**v36)();
  uint64_t *v37;
  std::__shared_weak_count *v38;
  _OWORD v39[3];
  _DWORD v40[3];
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[3];

  v45[2] = *MEMORY[0x24BDAC8D0];
  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24CA84C98, (const struct __class_type_info *)&unk_24CA7BF80, 0);
  if (!v4)
  {
    (*(void (**)(_OWORD *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(v39, lpsrc, 5);
    v17 = *(_QWORD *)&v39[0];
    v19 = *(_OWORD *)(*(_QWORD *)&v39[0] + 16);
    v18 = *(_OWORD *)(*(_QWORD *)&v39[0] + 32);
    v28 = **(_OWORD **)&v39[0];
    v29 = v19;
    v30 = v18;
    *(_QWORD *)&v39[0] = 0;
    MEMORY[0x212BCC6FC](v17, 0xC400A2AC0F1, v20, v21, v22, v23);
    sub_2108E43D0((uint64_t)v39, a1);
    *(_QWORD *)&v34[0] = &v28;
    *((_QWORD *)&v34[0] + 1) = v39;
    sub_2108FEAD0((size_t *)v34);
    return result;
  }
  v5 = (uint64_t)v4;
  sub_2108D2220(&v36, (uint64_t)v4);
  sub_2108E4648((uint64_t)v34, v5);
  v39[0] = v34[0];
  v39[1] = v34[1];
  v39[2] = v35;
  *(_QWORD *)&v28 = off_24CA7B7D0;
  if (HIDWORD(v35) <= 0x20)
    v6 = 32;
  else
    v6 = HIDWORD(v35);
  *(_QWORD *)&v40[1] = v35;
  v40[0] = 2;
  LODWORD(v45[0]) = 1;
  *(_QWORD *)((char *)v45 + 4) = DWORD2(v35) | (unint64_t)(v6 << 32);
  v41 = v45[0];
  v42 = v6;
  v43 = v35;
  v44 = *(_QWORD *)((char *)v45 + 4);
  sub_2108D1724((uint64_t)&v28, (uint64_t)v40, v39);
  *(_QWORD *)&v28 = off_24CA7B7D0;
  if (v37)
  {
    v8 = *v37;
    v7 = (std::__shared_weak_count *)v37[1];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          goto LABEL_13;
        goto LABEL_12;
      }
    }
    if (v8)
LABEL_12:
      sub_210912E7C((uint64_t)v37);
  }
LABEL_13:
  v36 = &off_24CA7D7F8;
  v12 = v38;
  if (v38)
  {
    v13 = (unint64_t *)&v38->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = DWORD2(v30);
  *(_DWORD *)(a1 + 8) = DWORD2(v28);
  v16 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v16 == -1)
  {
    if ((_DWORD)v15 == -1)
    {
      result = *(double *)&v31;
      v27 = v32;
      *(_OWORD *)(a1 + 48) = v31;
      *(_OWORD *)(a1 + 64) = v27;
      *(_QWORD *)(a1 + 80) = v33;
      return result;
    }
  }
  else if ((_DWORD)v15 == -1)
  {
    ((void (*)(_OWORD *, uint64_t))off_24CA7C080[v16])(v39, a1 + 16);
    *(_DWORD *)(a1 + 40) = -1;
    goto LABEL_24;
  }
  *(_QWORD *)&v39[0] = a1 + 16;
  ((void (*)(_OWORD *))off_24CA7C0C0[v15])(v39);
LABEL_24:
  v25 = DWORD2(v30);
  result = *(double *)&v31;
  v26 = v32;
  *(_OWORD *)(a1 + 48) = v31;
  *(_OWORD *)(a1 + 64) = v26;
  *(_QWORD *)(a1 + 80) = v33;
  *(_QWORD *)&v28 = off_24CA7AF60;
  if ((_DWORD)v25 != -1)
    ((void (*)(_OWORD *, __int128 *))off_24CA7C080[v25])(v39, &v29);
  return result;
}

void sub_2108E4E88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (a2)
    sub_2108ABF6C(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2108E4F98(uint64_t a1)
{
  _QWORD v2[6];

  sub_2108E43D0((uint64_t)v2, a1);
  return v2[0];
}

double sub_2108E4FC0@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 5
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 325, (uint64_t)"F == format", 11, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
  sub_2108E43D0((uint64_t)v8, a1);
  v5 = (_OWORD *)operator new();
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

double sub_2108E5060@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 5
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 331, (uint64_t)"F == format", 11, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
  sub_2108E4648((uint64_t)v8, a1);
  v5 = (_OWORD *)operator new();
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

__int128 *sub_2108E5100()
{
  unsigned __int8 v0;
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  size_t v6;
  uint64_t *v7;
  _BYTE *v8;
  size_t v9;
  uint64_t *v10;
  _BYTE *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  void *v17[2];
  uint64_t v18;
  std::string __p;

  v0 = atomic_load((unsigned __int8 *)&qword_254A74668);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A74668))
    goto LABEL_2;
  v2 = atomic_load((unsigned __int8 *)&qword_254A74670);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A74670))
  {
    v3 = atomic_load((unsigned __int8 *)&qword_254A74678);
    if ((v3 & 1) != 0 || !__cxa_guard_acquire(&qword_254A74678))
    {
LABEL_13:
      if (byte_254A74ACF < 0)
      {
        sub_2108B314C(&xmmword_254A74AA0, (void *)qword_254A74AB8, unk_254A74AC0);
      }
      else
      {
        xmmword_254A74AA0 = *(_OWORD *)&qword_254A74AB8;
        unk_254A74AB0 = unk_254A74AC8;
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A74AA0, &dword_21089F000);
      __cxa_guard_release(&qword_254A74670);
      goto LABEL_7;
    }
    v4 = atomic_load((unsigned __int8 *)&qword_254A74680);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A74680))
    {
      sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cv::CVImageBuffer<img::Format::Two8u>]", &qword_254A74AD0);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A74AD0, &dword_21089F000);
      __cxa_guard_release(&qword_254A74680);
    }
    v5 = atomic_load((unsigned __int8 *)&qword_254A74688);
    if ((v5 & 1) != 0 || !__cxa_guard_acquire(&qword_254A74688))
    {
LABEL_49:
      v16 = atomic_load((unsigned __int8 *)&qword_254A74690);
      if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_254A74690))
      {
        if (byte_254A74AE8[23] < 0)
          sub_2108B314C(&__p, *(void **)byte_254A74AE8, *(unint64_t *)&byte_254A74AE8[8]);
        else
          __p = *(std::string *)byte_254A74AE8;
        sub_2109ECDA0(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_254A74B00);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A74B00, &dword_21089F000);
        __cxa_guard_release(&qword_254A74690);
      }
      if (byte_254A74B17 < 0)
      {
        sub_2108B314C(v17, (void *)xmmword_254A74B00, *((unint64_t *)&xmmword_254A74B00 + 1));
      }
      else
      {
        *(_OWORD *)v17 = xmmword_254A74B00;
        v18 = unk_254A74B10;
      }
      sub_21090B008((char *)v17, (std::string *)&qword_254A74AB8);
      if (SHIBYTE(v18) < 0)
        operator delete(v17[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A74AB8, &dword_21089F000);
      __cxa_guard_release(&qword_254A74678);
      goto LABEL_13;
    }
    if (byte_254A74AE7 >= 0)
      v6 = byte_254A74AE7;
    else
      v6 = unk_254A74AD8;
    if (byte_254A74AE7 >= 0)
      v7 = &qword_254A74AD0;
    else
      v7 = (uint64_t *)qword_254A74AD0;
    v8 = (char *)v7 + v6;
    if ((uint64_t)v6 >= 1)
    {
      v9 = v6;
      v10 = v7;
      do
      {
        v11 = memchr(v10, 60, v9);
        if (!v11)
          break;
        if (*v11 == 60)
          goto LABEL_35;
        v10 = (uint64_t *)(v11 + 1);
        v9 = v8 - (_BYTE *)v10;
      }
      while (v8 - (_BYTE *)v10 > 0);
    }
    v11 = (char *)v7 + v6;
LABEL_35:
    v12 = v11 - (_BYTE *)v7;
    if (v11 == v8)
      v12 = -1;
    if (v6 >= v12)
      v6 = v12;
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      sub_2108A4B7C();
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v13 = (char *)operator new(v14 + 1);
      *(_QWORD *)&byte_254A74AE8[8] = v6;
      *(_QWORD *)&byte_254A74AE8[16] = v15 | 0x8000000000000000;
      *(_QWORD *)byte_254A74AE8 = v13;
    }
    else
    {
      v13 = byte_254A74AE8;
      byte_254A74AE8[23] = v6;
      if (!v6)
        goto LABEL_48;
    }
    memmove(v13, v7, v6);
LABEL_48:
    v13[v6] = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A74AE8, &dword_21089F000);
    __cxa_guard_release(&qword_254A74688);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_254A74AB7 < 0)
  {
    sub_2108B314C(&xmmword_254A74A88, (void *)xmmword_254A74AA0, *((unint64_t *)&xmmword_254A74AA0 + 1));
  }
  else
  {
    xmmword_254A74A88 = xmmword_254A74AA0;
    unk_254A74A98 = unk_254A74AB0;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A74A88, &dword_21089F000);
  __cxa_guard_release(&qword_254A74668);
LABEL_2:
  if (byte_254A74A9F >= 0)
    return &xmmword_254A74A88;
  else
    return (__int128 *)xmmword_254A74A88;
}

void sub_2108E5554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_254A74678);
  __cxa_guard_abort(&qword_254A74670);
  __cxa_guard_abort(&qword_254A74668);
  _Unwind_Resume(a1);
}

void sub_2108E55F0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A74668);
  _Unwind_Resume(a1);
}

void sub_2108E5608()
{
  sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 343, (uint64_t)&unk_210A02D2A, 0, (uint64_t)"Access notification must only be done in debug.", 47, (void (*)(void **))sub_2109EDDB4);
  abort();
}

void sub_2108E5644(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t (**v39)();
  __int128 v40;
  uint64_t (**v41)();
  __int128 v42;

  if (a2)
  {
    sub_2108D1EB4(&v39, a1);
    v4 = (_QWORD *)operator new();
    v42 = v40;
    v40 = 0uLL;
    v41 = &off_24CA7D7D8;
    *v4 = &off_24CA7BD90;
    sub_21090E048(v4 + 1, (uint64_t)&v41);
    if ((_QWORD)v42)
    {
      v6 = *(_QWORD *)v42;
      v5 = *(std::__shared_weak_count **)(v42 + 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
          if (!v6)
            goto LABEL_10;
          goto LABEL_9;
        }
      }
      if (v6)
LABEL_9:
        sub_210912F6C(v42);
    }
LABEL_10:
    v41 = &off_24CA7D7F8;
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
    if (!*((_QWORD *)&v42 + 1))
      goto LABEL_14;
    v11 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      *a3 = v4;
      v13 = (uint64_t *)v40;
      if (!(_QWORD)v40)
        goto LABEL_22;
    }
    else
    {
LABEL_14:
      *a3 = v4;
      v13 = (uint64_t *)v40;
      if (!(_QWORD)v40)
        goto LABEL_22;
    }
    v15 = *v13;
    v14 = (std::__shared_weak_count *)v13[1];
    if (v14)
    {
      v16 = (unint64_t *)&v14->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      do
        v18 = __ldaxr(v16);
      while (__stlxr(v18 - 1, v16));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
        if (!v15)
          goto LABEL_22;
        goto LABEL_21;
      }
    }
    if (v15)
LABEL_21:
      sub_210912F6C(v40);
LABEL_22:
    v39 = &off_24CA7D7F8;
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
    if (!*((_QWORD *)&v40 + 1))
      return;
    v20 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (v21)
      return;
LABEL_51:
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    return;
  }
  sub_2108D2220(&v39, a1);
  v22 = (_QWORD *)operator new();
  v42 = v40;
  v40 = 0uLL;
  v41 = &off_24CA7D7B8;
  *v22 = &off_24CA7BD70;
  sub_21090DD20(v22 + 1, (uint64_t)&v41);
  if ((_QWORD)v42)
  {
    v24 = *(_QWORD *)v42;
    v23 = *(std::__shared_weak_count **)(v42 + 8);
    if (v23)
    {
      v25 = (unint64_t *)&v23->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
      do
        v27 = __ldaxr(v25);
      while (__stlxr(v27 - 1, v25));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
        if (!v24)
          goto LABEL_35;
        goto LABEL_34;
      }
    }
    if (v24)
LABEL_34:
      sub_210912E7C(v42);
  }
LABEL_35:
  v41 = &off_24CA7D7F8;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
  if (!*((_QWORD *)&v42 + 1))
    goto LABEL_39;
  v29 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
    *a3 = v22;
    v31 = (uint64_t *)v40;
    if (!(_QWORD)v40)
      goto LABEL_47;
  }
  else
  {
LABEL_39:
    *a3 = v22;
    v31 = (uint64_t *)v40;
    if (!(_QWORD)v40)
      goto LABEL_47;
  }
  v33 = *v31;
  v32 = (std::__shared_weak_count *)v31[1];
  if (v32)
  {
    v34 = (unint64_t *)&v32->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
    do
      v36 = __ldaxr(v34);
    while (__stlxr(v36 - 1, v34));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
      if (!v33)
        goto LABEL_47;
      goto LABEL_46;
    }
  }
  if (v33)
LABEL_46:
    sub_210912E7C(v40);
LABEL_47:
  v39 = &off_24CA7D7F8;
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v37 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
      goto LABEL_51;
  }
}

void sub_2108E59E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_21090DE2C(&a12);
  MEMORY[0x212BCC6FC](v12, 0xA1C40711E6FFCLL);
  sub_21090DE2C(&a9);
  _Unwind_Resume(a1);
}

void sub_2108E5A14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21090DE2C(&a9);
  _Unwind_Resume(a1);
}

void sub_2108E5A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_21090E154(&a12);
  MEMORY[0x212BCC6FC](v12, 0xA1C40711E6FFCLL);
  sub_21090E154(&a9);
  _Unwind_Resume(a1);
}

void sub_2108E5A5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21090E154(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2108E5A70()
{
  return 65792;
}

void sub_2108E5A7C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_2108D1EB4(a2, a1);
}

uint64_t sub_2108E5A88(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24CA7B350;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24CA7C080[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_2108E5AEC(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if (sub_2108DA1E4(a2))
  {
    if (*(_DWORD *)(a2 + 76))
      v4 = *(_DWORD *)(a2 + 72) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 72);
    if (v4)
      v5 = 0;
    LODWORD(v34) = 2;
    *(_QWORD *)((char *)&v34 + 4) = v5;
    v6 = 2 * ((_DWORD)v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5))
      v7 = v7;
    else
      v7 = 0;
    v8 = v6 & 0x1FFFFFFFFLL | ((unint64_t)(v7 >> 1) << 33);
    v9 = __PAIR64__(DWORD1(v34), 2);
    LODWORD(v34) = 1;
    *(_QWORD *)((char *)&v34 + 4) = v8;
    v10 = v34;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(_QWORD *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(_QWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24CA7D7F8;
        *((_QWORD *)&v34 + 1) = v12;
        v35 = v11;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        break;
      case 1:
        v20 = *(_QWORD *)(a2 + 24);
        v19 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24CA7D7F8;
        *((_QWORD *)&v34 + 1) = v20;
        v35 = v19;
        if (v19)
        {
          v21 = (unint64_t *)&v19->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        break;
      case 2:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24CA7D7F8;
        *((_QWORD *)&v34 + 1) = v16;
        v35 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 3:
        v23 = *(std::__shared_weak_count **)(a2 + 24);
        if (v23 && (v24 = std::__shared_weak_count::lock(v23)) != 0)
        {
          v25 = v24;
          v26 = *(_QWORD *)(a2 + 16);
          *(_QWORD *)&v34 = &off_24CA7D7F8;
          if (v26)
          {
            *((_QWORD *)&v34 + 1) = v26;
            v35 = v24;
            v27 = (unint64_t *)&v24->__shared_owners_;
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          else
          {
            *((_QWORD *)&v34 + 1) = 0;
            v35 = 0;
          }
          v29 = (unint64_t *)&v24->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        else
        {
          *((_QWORD *)&v34 + 1) = 0;
          v35 = 0;
          *(_QWORD *)&v34 = &off_24CA7D7F8;
        }
        break;
      default:
        sub_2108B9060();
    }
    sub_2108D9A20(a1, (uint64_t)&v34);
    *(_QWORD *)&v34 = &off_24CA7D7F8;
    v31 = v35;
    if (v35)
    {
      v32 = (unint64_t *)&v35->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
}

void sub_2108E5D50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21090E6B4(&a9);
  _Unwind_Resume(a1);
}

void sub_2108E5D64(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t (**v34)();
  uint64_t v35;
  std::__shared_weak_count *v36;
  _BYTE v37[24];
  __int128 v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  if (sub_2108DA1E4(a2))
  {
    if (*(_DWORD *)(a2 + 76))
      v4 = *(_DWORD *)(a2 + 72) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 72);
    if (v4)
      v5 = 0;
    *(_DWORD *)v37 = 2;
    *(_QWORD *)&v37[4] = v5;
    v6 = 2 * ((_DWORD)v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5))
      v7 = v7;
    else
      v7 = 0;
    v8 = v6 & 0x1FFFFFFFFLL | ((unint64_t)(v7 >> 1) << 33);
    v9 = __PAIR64__(*(unsigned int *)&v37[4], 2);
    *(_DWORD *)v37 = 1;
    *(_QWORD *)&v37[4] = v8;
    v10 = *(_QWORD *)v37;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(_QWORD *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(_QWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        v34 = &off_24CA7D7F8;
        v35 = v12;
        v36 = v11;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        break;
      case 1:
        v20 = *(_QWORD *)(a2 + 24);
        v19 = *(std::__shared_weak_count **)(a2 + 32);
        v34 = &off_24CA7D7F8;
        v35 = v20;
        v36 = v19;
        if (v19)
        {
          v21 = (unint64_t *)&v19->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        break;
      case 2:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        v34 = &off_24CA7D7F8;
        v35 = v16;
        v36 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 3:
        v23 = *(std::__shared_weak_count **)(a2 + 24);
        if (v23 && (v24 = std::__shared_weak_count::lock(v23)) != 0)
        {
          v25 = v24;
          v26 = *(_QWORD *)(a2 + 16);
          v34 = &off_24CA7D7F8;
          if (v26)
          {
            v35 = v26;
            v36 = v24;
            v27 = (unint64_t *)&v24->__shared_owners_;
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          else
          {
            v35 = 0;
            v36 = 0;
          }
          v29 = (unint64_t *)&v24->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        else
        {
          v35 = 0;
          v36 = 0;
          v34 = &off_24CA7D7F8;
        }
        break;
      default:
        sub_2108B9060();
    }
    sub_2108D9A20((uint64_t)v37, (uint64_t)&v34);
    *(_QWORD *)a1 = *(_QWORD *)v37;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)&v37[8];
    *(_OWORD *)(a1 + 24) = v38;
    *(_QWORD *)(a1 + 40) = v39;
    v34 = &off_24CA7D7F8;
    v31 = v36;
    if (v36)
    {
      v32 = (unint64_t *)&v36->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
}

void sub_2108E5FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21090E6B4(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2108E5FFC()
{
  return 7;
}

_UNKNOWN **sub_2108E6004()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A745A0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A745A0))
    return &off_253ED6E40;
  __cxa_guard_release(&qword_254A745A0);
  return &off_253ED6E40;
}

void sub_2108E6058(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _OWORD v15[3];
  _BYTE v16[32];
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t (**v20)();
  uint64_t *v21;
  std::__shared_weak_count *v22;
  _OWORD v23[3];
  _DWORD v24[3];
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[3];

  v29[2] = *MEMORY[0x24BDAC8D0];
  sub_2108DA730(&v20, a1);
  sub_2108E5D64((uint64_t)v16, a1);
  sub_2108E5D64((uint64_t)v15, a1);
  v4 = (_QWORD *)operator new();
  v5 = v4;
  v23[0] = v15[0];
  v23[1] = v15[1];
  v23[2] = v15[2];
  *v4 = off_24CA7B860;
  if (v19 <= 0x10)
    v6 = 16;
  else
    v6 = v19;
  *(_QWORD *)&v24[1] = v17;
  v24[0] = 2;
  LODWORD(v29[0]) = 1;
  *(_QWORD *)((char *)v29 + 4) = v18 | (unint64_t)(v6 << 32);
  v25 = v29[0];
  v26 = v6;
  v27 = v17;
  v28 = *(_QWORD *)((char *)v29 + 4);
  sub_2108D9DB8((uint64_t)v4, (uint64_t)v24, v23);
  *v5 = off_24CA7B860;
  *a2 = v5;
  if (v21)
  {
    v8 = *v21;
    v7 = (std::__shared_weak_count *)v21[1];
    if (!v7)
      goto LABEL_10;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (v11)
    {
LABEL_10:
      if (!v8)
        goto LABEL_12;
      goto LABEL_11;
    }
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v8)
LABEL_11:
      sub_210912E7C((uint64_t)v21);
  }
LABEL_12:
  v20 = &off_24CA7D7F8;
  v12 = v22;
  if (v22)
  {
    v13 = (unint64_t *)&v22->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_2108E6224(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a2)
    sub_2108ABF6C(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2108E6280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_21090DE2C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2108E6294(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_2108DA730(a2, a1);
}

double sub_2108E62A0(uint64_t a1, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double result;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  _OWORD v34[2];
  __int128 v35;
  uint64_t (**v36)();
  uint64_t *v37;
  std::__shared_weak_count *v38;
  _OWORD v39[3];
  _DWORD v40[3];
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[3];

  v45[2] = *MEMORY[0x24BDAC8D0];
  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24CA84C98, (const struct __class_type_info *)&unk_24CA7BF98, 0);
  if (!v4)
  {
    (*(void (**)(_OWORD *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(v39, lpsrc, 7);
    v17 = *(_QWORD *)&v39[0];
    v19 = *(_OWORD *)(*(_QWORD *)&v39[0] + 16);
    v18 = *(_OWORD *)(*(_QWORD *)&v39[0] + 32);
    v28 = **(_OWORD **)&v39[0];
    v29 = v19;
    v30 = v18;
    *(_QWORD *)&v39[0] = 0;
    MEMORY[0x212BCC6FC](v17, 0xC400A2AC0F1, v20, v21, v22, v23);
    sub_2108E5AEC((uint64_t)v39, a1);
    *(_QWORD *)&v34[0] = &v28;
    *((_QWORD *)&v34[0] + 1) = v39;
    *(_QWORD *)&result = sub_210901EE4((uint64_t *)v34);
    return result;
  }
  v5 = (uint64_t)v4;
  sub_2108DA730(&v36, (uint64_t)v4);
  sub_2108E5D64((uint64_t)v34, v5);
  v39[0] = v34[0];
  v39[1] = v34[1];
  v39[2] = v35;
  *(_QWORD *)&v28 = off_24CA7B860;
  if (HIDWORD(v35) <= 0x10)
    v6 = 16;
  else
    v6 = HIDWORD(v35);
  *(_QWORD *)&v40[1] = v35;
  v40[0] = 2;
  LODWORD(v45[0]) = 1;
  *(_QWORD *)((char *)v45 + 4) = DWORD2(v35) | (unint64_t)(v6 << 32);
  v41 = v45[0];
  v42 = v6;
  v43 = v35;
  v44 = *(_QWORD *)((char *)v45 + 4);
  sub_2108D9DB8((uint64_t)&v28, (uint64_t)v40, v39);
  *(_QWORD *)&v28 = off_24CA7B860;
  if (v37)
  {
    v8 = *v37;
    v7 = (std::__shared_weak_count *)v37[1];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          goto LABEL_13;
        goto LABEL_12;
      }
    }
    if (v8)
LABEL_12:
      sub_210912E7C((uint64_t)v37);
  }
LABEL_13:
  v36 = &off_24CA7D7F8;
  v12 = v38;
  if (v38)
  {
    v13 = (unint64_t *)&v38->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = DWORD2(v30);
  *(_DWORD *)(a1 + 8) = DWORD2(v28);
  v16 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v16 == -1)
  {
    if ((_DWORD)v15 == -1)
    {
      result = *(double *)&v31;
      v27 = v32;
      *(_OWORD *)(a1 + 48) = v31;
      *(_OWORD *)(a1 + 64) = v27;
      *(_QWORD *)(a1 + 80) = v33;
      return result;
    }
  }
  else if ((_DWORD)v15 == -1)
  {
    ((void (*)(_OWORD *, uint64_t))off_24CA7C080[v16])(v39, a1 + 16);
    *(_DWORD *)(a1 + 40) = -1;
    goto LABEL_24;
  }
  *(_QWORD *)&v39[0] = a1 + 16;
  ((void (*)(_OWORD *))off_24CA7C0C0[v15])(v39);
LABEL_24:
  v25 = DWORD2(v30);
  result = *(double *)&v31;
  v26 = v32;
  *(_OWORD *)(a1 + 48) = v31;
  *(_OWORD *)(a1 + 64) = v26;
  *(_QWORD *)(a1 + 80) = v33;
  *(_QWORD *)&v28 = off_24CA7B350;
  if ((_DWORD)v25 != -1)
    ((void (*)(_OWORD *, __int128 *))off_24CA7C080[v25])(v39, &v29);
  return result;
}

void sub_2108E65A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (a2)
    sub_2108ABF6C(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2108E66B4(uint64_t a1)
{
  _QWORD v2[6];

  sub_2108E5AEC((uint64_t)v2, a1);
  return v2[0];
}

double sub_2108E66DC@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 7
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 325, (uint64_t)"F == format", 11, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
  sub_2108E5AEC((uint64_t)v8, a1);
  v5 = (_OWORD *)operator new();
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

double sub_2108E677C@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 7
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 331, (uint64_t)"F == format", 11, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
  sub_2108E5D64((uint64_t)v8, a1);
  v5 = (_OWORD *)operator new();
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

__int128 *sub_2108E681C()
{
  unsigned __int8 v0;
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  size_t v6;
  uint64_t *v7;
  _BYTE *v8;
  size_t v9;
  uint64_t *v10;
  _BYTE *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  void *v17[2];
  uint64_t v18;
  std::string __p;

  v0 = atomic_load((unsigned __int8 *)&qword_254A74698);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A74698))
    goto LABEL_2;
  v2 = atomic_load((unsigned __int8 *)&qword_254A746A0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A746A0))
  {
    v3 = atomic_load((unsigned __int8 *)&qword_254A746A8);
    if ((v3 & 1) != 0 || !__cxa_guard_acquire(&qword_254A746A8))
    {
LABEL_13:
      if (byte_254A74B5F < 0)
      {
        sub_2108B314C(&xmmword_254A74B30, (void *)qword_254A74B48, unk_254A74B50);
      }
      else
      {
        xmmword_254A74B30 = *(_OWORD *)&qword_254A74B48;
        unk_254A74B40 = unk_254A74B58;
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A74B30, &dword_21089F000);
      __cxa_guard_release(&qword_254A746A0);
      goto LABEL_7;
    }
    v4 = atomic_load((unsigned __int8 *)&qword_254A746B0);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A746B0))
    {
      sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cv::CVImageBuffer<img::Format::Two16f>]", &qword_254A74B60);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A74B60, &dword_21089F000);
      __cxa_guard_release(&qword_254A746B0);
    }
    v5 = atomic_load((unsigned __int8 *)&qword_254A746B8);
    if ((v5 & 1) != 0 || !__cxa_guard_acquire(&qword_254A746B8))
    {
LABEL_49:
      v16 = atomic_load((unsigned __int8 *)&qword_254A746C0);
      if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_254A746C0))
      {
        if (byte_254A74B78[23] < 0)
          sub_2108B314C(&__p, *(void **)byte_254A74B78, *(unint64_t *)&byte_254A74B78[8]);
        else
          __p = *(std::string *)byte_254A74B78;
        sub_2109ECDA0(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_254A74B90);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A74B90, &dword_21089F000);
        __cxa_guard_release(&qword_254A746C0);
      }
      if (byte_254A74BA7 < 0)
      {
        sub_2108B314C(v17, (void *)xmmword_254A74B90, *((unint64_t *)&xmmword_254A74B90 + 1));
      }
      else
      {
        *(_OWORD *)v17 = xmmword_254A74B90;
        v18 = unk_254A74BA0;
      }
      sub_21090B130((char *)v17, (std::string *)&qword_254A74B48);
      if (SHIBYTE(v18) < 0)
        operator delete(v17[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A74B48, &dword_21089F000);
      __cxa_guard_release(&qword_254A746A8);
      goto LABEL_13;
    }
    if (byte_254A74B77 >= 0)
      v6 = byte_254A74B77;
    else
      v6 = unk_254A74B68;
    if (byte_254A74B77 >= 0)
      v7 = &qword_254A74B60;
    else
      v7 = (uint64_t *)qword_254A74B60;
    v8 = (char *)v7 + v6;
    if ((uint64_t)v6 >= 1)
    {
      v9 = v6;
      v10 = v7;
      do
      {
        v11 = memchr(v10, 60, v9);
        if (!v11)
          break;
        if (*v11 == 60)
          goto LABEL_35;
        v10 = (uint64_t *)(v11 + 1);
        v9 = v8 - (_BYTE *)v10;
      }
      while (v8 - (_BYTE *)v10 > 0);
    }
    v11 = (char *)v7 + v6;
LABEL_35:
    v12 = v11 - (_BYTE *)v7;
    if (v11 == v8)
      v12 = -1;
    if (v6 >= v12)
      v6 = v12;
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      sub_2108A4B7C();
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v13 = (char *)operator new(v14 + 1);
      *(_QWORD *)&byte_254A74B78[8] = v6;
      *(_QWORD *)&byte_254A74B78[16] = v15 | 0x8000000000000000;
      *(_QWORD *)byte_254A74B78 = v13;
    }
    else
    {
      v13 = byte_254A74B78;
      byte_254A74B78[23] = v6;
      if (!v6)
        goto LABEL_48;
    }
    memmove(v13, v7, v6);
LABEL_48:
    v13[v6] = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A74B78, &dword_21089F000);
    __cxa_guard_release(&qword_254A746B8);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_254A74B47 < 0)
  {
    sub_2108B314C(&xmmword_254A74B18, (void *)xmmword_254A74B30, *((unint64_t *)&xmmword_254A74B30 + 1));
  }
  else
  {
    xmmword_254A74B18 = xmmword_254A74B30;
    unk_254A74B28 = unk_254A74B40;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A74B18, &dword_21089F000);
  __cxa_guard_release(&qword_254A74698);
LABEL_2:
  if (byte_254A74B2F >= 0)
    return &xmmword_254A74B18;
  else
    return (__int128 *)xmmword_254A74B18;
}

void sub_2108E6C70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_254A746A8);
  __cxa_guard_abort(&qword_254A746A0);
  __cxa_guard_abort(&qword_254A74698);
  _Unwind_Resume(a1);
}

void sub_2108E6D0C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A74698);
  _Unwind_Resume(a1);
}

void sub_2108E6D24()
{
  sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 343, (uint64_t)&unk_210A02D2A, 0, (uint64_t)"Access notification must only be done in debug.", 47, (void (*)(void **))sub_2109EDDB4);
  abort();
}

void sub_2108E6D60(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t (**v39)();
  __int128 v40;
  uint64_t (**v41)();
  __int128 v42;

  if (a2)
  {
    sub_2108DA3C4(&v39, a1);
    v4 = (_QWORD *)operator new();
    v42 = v40;
    v40 = 0uLL;
    v41 = &off_24CA7D7D8;
    *v4 = &off_24CA7BD90;
    sub_21090E048(v4 + 1, (uint64_t)&v41);
    if ((_QWORD)v42)
    {
      v6 = *(_QWORD *)v42;
      v5 = *(std::__shared_weak_count **)(v42 + 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
          if (!v6)
            goto LABEL_10;
          goto LABEL_9;
        }
      }
      if (v6)
LABEL_9:
        sub_210912F6C(v42);
    }
LABEL_10:
    v41 = &off_24CA7D7F8;
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
    if (!*((_QWORD *)&v42 + 1))
      goto LABEL_14;
    v11 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      *a3 = v4;
      v13 = (uint64_t *)v40;
      if (!(_QWORD)v40)
        goto LABEL_22;
    }
    else
    {
LABEL_14:
      *a3 = v4;
      v13 = (uint64_t *)v40;
      if (!(_QWORD)v40)
        goto LABEL_22;
    }
    v15 = *v13;
    v14 = (std::__shared_weak_count *)v13[1];
    if (v14)
    {
      v16 = (unint64_t *)&v14->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      do
        v18 = __ldaxr(v16);
      while (__stlxr(v18 - 1, v16));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
        if (!v15)
          goto LABEL_22;
        goto LABEL_21;
      }
    }
    if (v15)
LABEL_21:
      sub_210912F6C(v40);
LABEL_22:
    v39 = &off_24CA7D7F8;
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
    if (!*((_QWORD *)&v40 + 1))
      return;
    v20 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (v21)
      return;
LABEL_51:
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    return;
  }
  sub_2108DA730(&v39, a1);
  v22 = (_QWORD *)operator new();
  v42 = v40;
  v40 = 0uLL;
  v41 = &off_24CA7D7B8;
  *v22 = &off_24CA7BD70;
  sub_21090DD20(v22 + 1, (uint64_t)&v41);
  if ((_QWORD)v42)
  {
    v24 = *(_QWORD *)v42;
    v23 = *(std::__shared_weak_count **)(v42 + 8);
    if (v23)
    {
      v25 = (unint64_t *)&v23->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
      do
        v27 = __ldaxr(v25);
      while (__stlxr(v27 - 1, v25));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
        if (!v24)
          goto LABEL_35;
        goto LABEL_34;
      }
    }
    if (v24)
LABEL_34:
      sub_210912E7C(v42);
  }
LABEL_35:
  v41 = &off_24CA7D7F8;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
  if (!*((_QWORD *)&v42 + 1))
    goto LABEL_39;
  v29 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
    *a3 = v22;
    v31 = (uint64_t *)v40;
    if (!(_QWORD)v40)
      goto LABEL_47;
  }
  else
  {
LABEL_39:
    *a3 = v22;
    v31 = (uint64_t *)v40;
    if (!(_QWORD)v40)
      goto LABEL_47;
  }
  v33 = *v31;
  v32 = (std::__shared_weak_count *)v31[1];
  if (v32)
  {
    v34 = (unint64_t *)&v32->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
    do
      v36 = __ldaxr(v34);
    while (__stlxr(v36 - 1, v34));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
      if (!v33)
        goto LABEL_47;
      goto LABEL_46;
    }
  }
  if (v33)
LABEL_46:
    sub_210912E7C(v40);
LABEL_47:
  v39 = &off_24CA7D7F8;
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v37 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
      goto LABEL_51;
  }
}

void sub_2108E70FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_21090DE2C(&a12);
  MEMORY[0x212BCC6FC](v12, 0xA1C40711E6FFCLL);
  sub_21090DE2C(&a9);
  _Unwind_Resume(a1);
}

void sub_2108E7130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21090DE2C(&a9);
  _Unwind_Resume(a1);
}

void sub_2108E7144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_21090E154(&a12);
  MEMORY[0x212BCC6FC](v12, 0xA1C40711E6FFCLL);
  sub_21090E154(&a9);
  _Unwind_Resume(a1);
}

void sub_2108E7178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21090E154(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2108E718C()
{
  return 65792;
}

void sub_2108E7198(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_2108DA3C4(a2, a1);
}

uint64_t sub_2108E71A4(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24CA7B500;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24CA7C080[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_2108E7208(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if (sub_2108DD254(a2))
  {
    if (*(_DWORD *)(a2 + 76))
      v4 = *(_DWORD *)(a2 + 72) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 72);
    if (v4)
      v5 = 0;
    LODWORD(v34) = 2;
    *(_QWORD *)((char *)&v34 + 4) = v5;
    v6 = 2 * ((_DWORD)v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5))
      v7 = v7;
    else
      v7 = 0;
    v8 = v6 & 0x1FFFFFFFFLL | ((unint64_t)(v7 >> 1) << 33);
    v9 = __PAIR64__(DWORD1(v34), 2);
    LODWORD(v34) = 1;
    *(_QWORD *)((char *)&v34 + 4) = v8;
    v10 = v34;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(_QWORD *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(_QWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24CA7D7F8;
        *((_QWORD *)&v34 + 1) = v12;
        v35 = v11;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        break;
      case 1:
        v20 = *(_QWORD *)(a2 + 24);
        v19 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24CA7D7F8;
        *((_QWORD *)&v34 + 1) = v20;
        v35 = v19;
        if (v19)
        {
          v21 = (unint64_t *)&v19->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        break;
      case 2:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24CA7D7F8;
        *((_QWORD *)&v34 + 1) = v16;
        v35 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 3:
        v23 = *(std::__shared_weak_count **)(a2 + 24);
        if (v23 && (v24 = std::__shared_weak_count::lock(v23)) != 0)
        {
          v25 = v24;
          v26 = *(_QWORD *)(a2 + 16);
          *(_QWORD *)&v34 = &off_24CA7D7F8;
          if (v26)
          {
            *((_QWORD *)&v34 + 1) = v26;
            v35 = v24;
            v27 = (unint64_t *)&v24->__shared_owners_;
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          else
          {
            *((_QWORD *)&v34 + 1) = 0;
            v35 = 0;
          }
          v29 = (unint64_t *)&v24->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        else
        {
          *((_QWORD *)&v34 + 1) = 0;
          v35 = 0;
          *(_QWORD *)&v34 = &off_24CA7D7F8;
        }
        break;
      default:
        sub_2108B9060();
    }
    sub_2108DCA90(a1, (uint64_t)&v34);
    *(_QWORD *)&v34 = &off_24CA7D7F8;
    v31 = v35;
    if (v35)
    {
      v32 = (unint64_t *)&v35->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
}

void sub_2108E746C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21090E6B4(&a9);
  _Unwind_Resume(a1);
}

void sub_2108E7480(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t (**v34)();
  uint64_t v35;
  std::__shared_weak_count *v36;
  _BYTE v37[24];
  __int128 v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  if (sub_2108DD254(a2))
  {
    if (*(_DWORD *)(a2 + 76))
      v4 = *(_DWORD *)(a2 + 72) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 72);
    if (v4)
      v5 = 0;
    *(_DWORD *)v37 = 2;
    *(_QWORD *)&v37[4] = v5;
    v6 = 2 * ((_DWORD)v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5))
      v7 = v7;
    else
      v7 = 0;
    v8 = v6 & 0x1FFFFFFFFLL | ((unint64_t)(v7 >> 1) << 33);
    v9 = __PAIR64__(*(unsigned int *)&v37[4], 2);
    *(_DWORD *)v37 = 1;
    *(_QWORD *)&v37[4] = v8;
    v10 = *(_QWORD *)v37;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(_QWORD *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(_QWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        v34 = &off_24CA7D7F8;
        v35 = v12;
        v36 = v11;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        break;
      case 1:
        v20 = *(_QWORD *)(a2 + 24);
        v19 = *(std::__shared_weak_count **)(a2 + 32);
        v34 = &off_24CA7D7F8;
        v35 = v20;
        v36 = v19;
        if (v19)
        {
          v21 = (unint64_t *)&v19->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        break;
      case 2:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        v34 = &off_24CA7D7F8;
        v35 = v16;
        v36 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 3:
        v23 = *(std::__shared_weak_count **)(a2 + 24);
        if (v23 && (v24 = std::__shared_weak_count::lock(v23)) != 0)
        {
          v25 = v24;
          v26 = *(_QWORD *)(a2 + 16);
          v34 = &off_24CA7D7F8;
          if (v26)
          {
            v35 = v26;
            v36 = v24;
            v27 = (unint64_t *)&v24->__shared_owners_;
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          else
          {
            v35 = 0;
            v36 = 0;
          }
          v29 = (unint64_t *)&v24->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        else
        {
          v35 = 0;
          v36 = 0;
          v34 = &off_24CA7D7F8;
        }
        break;
      default:
        sub_2108B9060();
    }
    sub_2108DCA90((uint64_t)v37, (uint64_t)&v34);
    *(_QWORD *)a1 = *(_QWORD *)v37;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)&v37[8];
    *(_OWORD *)(a1 + 24) = v38;
    *(_QWORD *)(a1 + 40) = v39;
    v34 = &off_24CA7D7F8;
    v31 = v36;
    if (v36)
    {
      v32 = (unint64_t *)&v36->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
}

void sub_2108E7704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21090E6B4(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2108E7718()
{
  return 8;
}

_UNKNOWN **sub_2108E7720()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A745A0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A745A0))
    return &off_253ED6E40;
  __cxa_guard_release(&qword_254A745A0);
  return &off_253ED6E40;
}

void sub_2108E7774(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _OWORD v15[3];
  _BYTE v16[32];
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t (**v20)();
  uint64_t *v21;
  std::__shared_weak_count *v22;
  _OWORD v23[3];
  _DWORD v24[3];
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[3];

  v29[2] = *MEMORY[0x24BDAC8D0];
  sub_2108DD7A0(&v20, a1);
  sub_2108E7480((uint64_t)v16, a1);
  sub_2108E7480((uint64_t)v15, a1);
  v4 = (_QWORD *)operator new();
  v5 = v4;
  v23[0] = v15[0];
  v23[1] = v15[1];
  v23[2] = v15[2];
  *v4 = off_24CA7B8F0;
  if (v19 <= 8)
    v6 = 8;
  else
    v6 = v19;
  *(_QWORD *)&v24[1] = v17;
  v24[0] = 2;
  LODWORD(v29[0]) = 1;
  *(_QWORD *)((char *)v29 + 4) = v18 | (unint64_t)(v6 << 32);
  v25 = v29[0];
  v26 = v6;
  v27 = v17;
  v28 = *(_QWORD *)((char *)v29 + 4);
  sub_2108DCE28((uint64_t)v4, (uint64_t)v24, v23);
  *v5 = off_24CA7B8F0;
  *a2 = v5;
  if (v21)
  {
    v8 = *v21;
    v7 = (std::__shared_weak_count *)v21[1];
    if (!v7)
      goto LABEL_10;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (v11)
    {
LABEL_10:
      if (!v8)
        goto LABEL_12;
      goto LABEL_11;
    }
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v8)
LABEL_11:
      sub_210912E7C((uint64_t)v21);
  }
LABEL_12:
  v20 = &off_24CA7D7F8;
  v12 = v22;
  if (v22)
  {
    v13 = (unint64_t *)&v22->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_2108E7940(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a2)
    sub_2108ABF6C(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2108E799C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_21090DE2C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2108E79B0(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_2108DD7A0(a2, a1);
}

double sub_2108E79BC(uint64_t a1, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double result;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  _OWORD v34[2];
  __int128 v35;
  uint64_t (**v36)();
  uint64_t *v37;
  std::__shared_weak_count *v38;
  _OWORD v39[3];
  _DWORD v40[3];
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[3];

  v45[2] = *MEMORY[0x24BDAC8D0];
  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24CA84C98, (const struct __class_type_info *)&unk_24CA7BFB0, 0);
  if (!v4)
  {
    (*(void (**)(_OWORD *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(v39, lpsrc, 8);
    v17 = *(_QWORD *)&v39[0];
    v19 = *(_OWORD *)(*(_QWORD *)&v39[0] + 16);
    v18 = *(_OWORD *)(*(_QWORD *)&v39[0] + 32);
    v28 = **(_OWORD **)&v39[0];
    v29 = v19;
    v30 = v18;
    *(_QWORD *)&v39[0] = 0;
    MEMORY[0x212BCC6FC](v17, 0xC400A2AC0F1, v20, v21, v22, v23);
    sub_2108E7208((uint64_t)v39, a1);
    *(_QWORD *)&v34[0] = &v28;
    *((_QWORD *)&v34[0] + 1) = v39;
    *(float *)&result = sub_210903C68((uint64_t *)v34);
    return result;
  }
  v5 = (uint64_t)v4;
  sub_2108DD7A0(&v36, (uint64_t)v4);
  sub_2108E7480((uint64_t)v34, v5);
  v39[0] = v34[0];
  v39[1] = v34[1];
  v39[2] = v35;
  *(_QWORD *)&v28 = off_24CA7B8F0;
  if (HIDWORD(v35) <= 8)
    v6 = 8;
  else
    v6 = HIDWORD(v35);
  *(_QWORD *)&v40[1] = v35;
  v40[0] = 2;
  LODWORD(v45[0]) = 1;
  *(_QWORD *)((char *)v45 + 4) = DWORD2(v35) | (unint64_t)(v6 << 32);
  v41 = v45[0];
  v42 = v6;
  v43 = v35;
  v44 = *(_QWORD *)((char *)v45 + 4);
  sub_2108DCE28((uint64_t)&v28, (uint64_t)v40, v39);
  *(_QWORD *)&v28 = off_24CA7B8F0;
  if (v37)
  {
    v8 = *v37;
    v7 = (std::__shared_weak_count *)v37[1];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          goto LABEL_13;
        goto LABEL_12;
      }
    }
    if (v8)
LABEL_12:
      sub_210912E7C((uint64_t)v37);
  }
LABEL_13:
  v36 = &off_24CA7D7F8;
  v12 = v38;
  if (v38)
  {
    v13 = (unint64_t *)&v38->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = DWORD2(v30);
  *(_DWORD *)(a1 + 8) = DWORD2(v28);
  v16 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v16 == -1)
  {
    if ((_DWORD)v15 == -1)
    {
      result = *(double *)&v31;
      v27 = v32;
      *(_OWORD *)(a1 + 48) = v31;
      *(_OWORD *)(a1 + 64) = v27;
      *(_QWORD *)(a1 + 80) = v33;
      return result;
    }
  }
  else if ((_DWORD)v15 == -1)
  {
    ((void (*)(_OWORD *, uint64_t))off_24CA7C080[v16])(v39, a1 + 16);
    *(_DWORD *)(a1 + 40) = -1;
    goto LABEL_24;
  }
  *(_QWORD *)&v39[0] = a1 + 16;
  ((void (*)(_OWORD *))off_24CA7C0C0[v15])(v39);
LABEL_24:
  v25 = DWORD2(v30);
  result = *(double *)&v31;
  v26 = v32;
  *(_OWORD *)(a1 + 48) = v31;
  *(_OWORD *)(a1 + 64) = v26;
  *(_QWORD *)(a1 + 80) = v33;
  *(_QWORD *)&v28 = off_24CA7B500;
  if ((_DWORD)v25 != -1)
    ((void (*)(_OWORD *, __int128 *))off_24CA7C080[v25])(v39, &v29);
  return result;
}

void sub_2108E7CC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (a2)
    sub_2108ABF6C(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2108E7DD0(uint64_t a1)
{
  _QWORD v2[6];

  sub_2108E7208((uint64_t)v2, a1);
  return v2[0];
}

double sub_2108E7DF8@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 8
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 325, (uint64_t)"F == format", 11, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
  sub_2108E7208((uint64_t)v8, a1);
  v5 = (_OWORD *)operator new();
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

double sub_2108E7E98@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 8
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 331, (uint64_t)"F == format", 11, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
  sub_2108E7480((uint64_t)v8, a1);
  v5 = (_OWORD *)operator new();
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

__int128 *sub_2108E7F38()
{
  unsigned __int8 v0;
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  size_t v6;
  uint64_t *v7;
  _BYTE *v8;
  size_t v9;
  uint64_t *v10;
  _BYTE *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  void *v17[2];
  uint64_t v18;
  std::string __p;

  v0 = atomic_load((unsigned __int8 *)&qword_254A746C8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A746C8))
    goto LABEL_2;
  v2 = atomic_load((unsigned __int8 *)&qword_254A746D0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A746D0))
  {
    v3 = atomic_load((unsigned __int8 *)&qword_254A746D8);
    if ((v3 & 1) != 0 || !__cxa_guard_acquire(&qword_254A746D8))
    {
LABEL_13:
      if (byte_254A74BEF < 0)
      {
        sub_2108B314C(&xmmword_254A74BC0, (void *)qword_254A74BD8, unk_254A74BE0);
      }
      else
      {
        xmmword_254A74BC0 = *(_OWORD *)&qword_254A74BD8;
        unk_254A74BD0 = unk_254A74BE8;
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A74BC0, &dword_21089F000);
      __cxa_guard_release(&qword_254A746D0);
      goto LABEL_7;
    }
    v4 = atomic_load((unsigned __int8 *)&qword_254A746E0);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A746E0))
    {
      sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cv::CVImageBuffer<img::Format::Two32f>]", &qword_254A74BF0);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A74BF0, &dword_21089F000);
      __cxa_guard_release(&qword_254A746E0);
    }
    v5 = atomic_load((unsigned __int8 *)&qword_254A746E8);
    if ((v5 & 1) != 0 || !__cxa_guard_acquire(&qword_254A746E8))
    {
LABEL_49:
      v16 = atomic_load((unsigned __int8 *)&qword_254A746F0);
      if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_254A746F0))
      {
        if (byte_254A74C08[23] < 0)
          sub_2108B314C(&__p, *(void **)byte_254A74C08, *(unint64_t *)&byte_254A74C08[8]);
        else
          __p = *(std::string *)byte_254A74C08;
        sub_2109ECDA0(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_254A74C20);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A74C20, &dword_21089F000);
        __cxa_guard_release(&qword_254A746F0);
      }
      if (byte_254A74C37 < 0)
      {
        sub_2108B314C(v17, (void *)xmmword_254A74C20, *((unint64_t *)&xmmword_254A74C20 + 1));
      }
      else
      {
        *(_OWORD *)v17 = xmmword_254A74C20;
        v18 = unk_254A74C30;
      }
      sub_21090B258((char *)v17, (std::string *)&qword_254A74BD8);
      if (SHIBYTE(v18) < 0)
        operator delete(v17[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A74BD8, &dword_21089F000);
      __cxa_guard_release(&qword_254A746D8);
      goto LABEL_13;
    }
    if (byte_254A74C07 >= 0)
      v6 = byte_254A74C07;
    else
      v6 = unk_254A74BF8;
    if (byte_254A74C07 >= 0)
      v7 = &qword_254A74BF0;
    else
      v7 = (uint64_t *)qword_254A74BF0;
    v8 = (char *)v7 + v6;
    if ((uint64_t)v6 >= 1)
    {
      v9 = v6;
      v10 = v7;
      do
      {
        v11 = memchr(v10, 60, v9);
        if (!v11)
          break;
        if (*v11 == 60)
          goto LABEL_35;
        v10 = (uint64_t *)(v11 + 1);
        v9 = v8 - (_BYTE *)v10;
      }
      while (v8 - (_BYTE *)v10 > 0);
    }
    v11 = (char *)v7 + v6;
LABEL_35:
    v12 = v11 - (_BYTE *)v7;
    if (v11 == v8)
      v12 = -1;
    if (v6 >= v12)
      v6 = v12;
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      sub_2108A4B7C();
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v13 = (char *)operator new(v14 + 1);
      *(_QWORD *)&byte_254A74C08[8] = v6;
      *(_QWORD *)&byte_254A74C08[16] = v15 | 0x8000000000000000;
      *(_QWORD *)byte_254A74C08 = v13;
    }
    else
    {
      v13 = byte_254A74C08;
      byte_254A74C08[23] = v6;
      if (!v6)
        goto LABEL_48;
    }
    memmove(v13, v7, v6);
LABEL_48:
    v13[v6] = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A74C08, &dword_21089F000);
    __cxa_guard_release(&qword_254A746E8);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_254A74BD7 < 0)
  {
    sub_2108B314C(&xmmword_254A74BA8, (void *)xmmword_254A74BC0, *((unint64_t *)&xmmword_254A74BC0 + 1));
  }
  else
  {
    xmmword_254A74BA8 = xmmword_254A74BC0;
    unk_254A74BB8 = unk_254A74BD0;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A74BA8, &dword_21089F000);
  __cxa_guard_release(&qword_254A746C8);
LABEL_2:
  if (byte_254A74BBF >= 0)
    return &xmmword_254A74BA8;
  else
    return (__int128 *)xmmword_254A74BA8;
}

void sub_2108E838C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_254A746D8);
  __cxa_guard_abort(&qword_254A746D0);
  __cxa_guard_abort(&qword_254A746C8);
  _Unwind_Resume(a1);
}

void sub_2108E8428(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A746C8);
  _Unwind_Resume(a1);
}

void sub_2108E8440()
{
  sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 343, (uint64_t)&unk_210A02D2A, 0, (uint64_t)"Access notification must only be done in debug.", 47, (void (*)(void **))sub_2109EDDB4);
  abort();
}

void sub_2108E847C(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t (**v39)();
  __int128 v40;
  uint64_t (**v41)();
  __int128 v42;

  if (a2)
  {
    sub_2108DD434(&v39, a1);
    v4 = (_QWORD *)operator new();
    v42 = v40;
    v40 = 0uLL;
    v41 = &off_24CA7D7D8;
    *v4 = &off_24CA7BD90;
    sub_21090E048(v4 + 1, (uint64_t)&v41);
    if ((_QWORD)v42)
    {
      v6 = *(_QWORD *)v42;
      v5 = *(std::__shared_weak_count **)(v42 + 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
          if (!v6)
            goto LABEL_10;
          goto LABEL_9;
        }
      }
      if (v6)
LABEL_9:
        sub_210912F6C(v42);
    }
LABEL_10:
    v41 = &off_24CA7D7F8;
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
    if (!*((_QWORD *)&v42 + 1))
      goto LABEL_14;
    v11 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      *a3 = v4;
      v13 = (uint64_t *)v40;
      if (!(_QWORD)v40)
        goto LABEL_22;
    }
    else
    {
LABEL_14:
      *a3 = v4;
      v13 = (uint64_t *)v40;
      if (!(_QWORD)v40)
        goto LABEL_22;
    }
    v15 = *v13;
    v14 = (std::__shared_weak_count *)v13[1];
    if (v14)
    {
      v16 = (unint64_t *)&v14->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      do
        v18 = __ldaxr(v16);
      while (__stlxr(v18 - 1, v16));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
        if (!v15)
          goto LABEL_22;
        goto LABEL_21;
      }
    }
    if (v15)
LABEL_21:
      sub_210912F6C(v40);
LABEL_22:
    v39 = &off_24CA7D7F8;
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
    if (!*((_QWORD *)&v40 + 1))
      return;
    v20 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (v21)
      return;
LABEL_51:
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    return;
  }
  sub_2108DD7A0(&v39, a1);
  v22 = (_QWORD *)operator new();
  v42 = v40;
  v40 = 0uLL;
  v41 = &off_24CA7D7B8;
  *v22 = &off_24CA7BD70;
  sub_21090DD20(v22 + 1, (uint64_t)&v41);
  if ((_QWORD)v42)
  {
    v24 = *(_QWORD *)v42;
    v23 = *(std::__shared_weak_count **)(v42 + 8);
    if (v23)
    {
      v25 = (unint64_t *)&v23->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
      do
        v27 = __ldaxr(v25);
      while (__stlxr(v27 - 1, v25));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
        if (!v24)
          goto LABEL_35;
        goto LABEL_34;
      }
    }
    if (v24)
LABEL_34:
      sub_210912E7C(v42);
  }
LABEL_35:
  v41 = &off_24CA7D7F8;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
  if (!*((_QWORD *)&v42 + 1))
    goto LABEL_39;
  v29 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
    *a3 = v22;
    v31 = (uint64_t *)v40;
    if (!(_QWORD)v40)
      goto LABEL_47;
  }
  else
  {
LABEL_39:
    *a3 = v22;
    v31 = (uint64_t *)v40;
    if (!(_QWORD)v40)
      goto LABEL_47;
  }
  v33 = *v31;
  v32 = (std::__shared_weak_count *)v31[1];
  if (v32)
  {
    v34 = (unint64_t *)&v32->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
    do
      v36 = __ldaxr(v34);
    while (__stlxr(v36 - 1, v34));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
      if (!v33)
        goto LABEL_47;
      goto LABEL_46;
    }
  }
  if (v33)
LABEL_46:
    sub_210912E7C(v40);
LABEL_47:
  v39 = &off_24CA7D7F8;
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v37 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
      goto LABEL_51;
  }
}

void sub_2108E8818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_21090DE2C(&a12);
  MEMORY[0x212BCC6FC](v12, 0xA1C40711E6FFCLL);
  sub_21090DE2C(&a9);
  _Unwind_Resume(a1);
}

void sub_2108E884C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21090DE2C(&a9);
  _Unwind_Resume(a1);
}

void sub_2108E8860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_21090E154(&a12);
  MEMORY[0x212BCC6FC](v12, 0xA1C40711E6FFCLL);
  sub_21090E154(&a9);
  _Unwind_Resume(a1);
}

void sub_2108E8894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21090E154(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2108E88A8()
{
  return 65792;
}

void sub_2108E88B4(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_2108DD434(a2, a1);
}

uint64_t sub_2108E88C0(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24CA7AFF0;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24CA7C080[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_2108E8924(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t (**v27)();
  uint64_t v28;
  std::__shared_weak_count *v29;

  if (sub_2108D2F10(a2))
  {
    sub_2108FF3F8(a1, 0, (_DWORD *)(a2 + 72));
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v5 = *(_QWORD *)(a2 + 24);
        v4 = *(std::__shared_weak_count **)(a2 + 32);
        v27 = &off_24CA7D7F8;
        v28 = v5;
        v29 = v4;
        if (v4)
        {
          p_shared_owners = (unint64_t *)&v4->__shared_owners_;
          do
            v7 = __ldxr(p_shared_owners);
          while (__stxr(v7 + 1, p_shared_owners));
        }
        break;
      case 1:
        v13 = *(_QWORD *)(a2 + 24);
        v12 = *(std::__shared_weak_count **)(a2 + 32);
        v27 = &off_24CA7D7F8;
        v28 = v13;
        v29 = v12;
        if (v12)
        {
          v14 = (unint64_t *)&v12->__shared_owners_;
          do
            v15 = __ldxr(v14);
          while (__stxr(v15 + 1, v14));
        }
        break;
      case 2:
        v9 = *(_QWORD *)(a2 + 24);
        v8 = *(std::__shared_weak_count **)(a2 + 32);
        v27 = &off_24CA7D7F8;
        v28 = v9;
        v29 = v8;
        if (v8)
        {
          v10 = (unint64_t *)&v8->__shared_owners_;
          do
            v11 = __ldxr(v10);
          while (__stxr(v11 + 1, v10));
        }
        break;
      case 3:
        v16 = *(std::__shared_weak_count **)(a2 + 24);
        if (v16 && (v17 = std::__shared_weak_count::lock(v16)) != 0)
        {
          v18 = v17;
          v19 = *(_QWORD *)(a2 + 16);
          v27 = &off_24CA7D7F8;
          if (v19)
          {
            v28 = v19;
            v29 = v17;
            v20 = (unint64_t *)&v17->__shared_owners_;
            do
              v21 = __ldxr(v20);
            while (__stxr(v21 + 1, v20));
          }
          else
          {
            v28 = 0;
            v29 = 0;
          }
          v22 = (unint64_t *)&v17->__shared_owners_;
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
        else
        {
          v28 = 0;
          v29 = 0;
          v27 = &off_24CA7D7F8;
        }
        break;
      default:
        sub_2108B9060();
    }
    sub_2108D2614(a1, (uint64_t)&v27);
    v27 = &off_24CA7D7F8;
    v24 = v29;
    if (v29)
    {
      v25 = (unint64_t *)&v29->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
}

void sub_2108E8B00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_21090E6B4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2108E8B14(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t (**v31)();
  uint64_t v32;
  std::__shared_weak_count *v33;

  if (sub_2108D2F10(a2))
  {
    sub_2108FF3F8(a1, 0, (_DWORD *)(a2 + 72));
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v5 = *(_QWORD *)(a2 + 24);
        v4 = *(std::__shared_weak_count **)(a2 + 32);
        v31 = &off_24CA7D7F8;
        v32 = v5;
        v33 = v4;
        if (v4)
        {
          p_shared_owners = (unint64_t *)&v4->__shared_owners_;
          do
            v7 = __ldxr(p_shared_owners);
          while (__stxr(v7 + 1, p_shared_owners));
        }
        break;
      case 1:
        v13 = *(_QWORD *)(a2 + 24);
        v12 = *(std::__shared_weak_count **)(a2 + 32);
        v31 = &off_24CA7D7F8;
        v32 = v13;
        v33 = v12;
        if (v12)
        {
          v14 = (unint64_t *)&v12->__shared_owners_;
          do
            v15 = __ldxr(v14);
          while (__stxr(v15 + 1, v14));
        }
        break;
      case 2:
        v9 = *(_QWORD *)(a2 + 24);
        v8 = *(std::__shared_weak_count **)(a2 + 32);
        v31 = &off_24CA7D7F8;
        v32 = v9;
        v33 = v8;
        if (v8)
        {
          v10 = (unint64_t *)&v8->__shared_owners_;
          do
            v11 = __ldxr(v10);
          while (__stxr(v11 + 1, v10));
        }
        break;
      case 3:
        v16 = *(std::__shared_weak_count **)(a2 + 24);
        if (v16 && (v17 = std::__shared_weak_count::lock(v16)) != 0)
        {
          v18 = v17;
          v19 = *(_QWORD *)(a2 + 16);
          v31 = &off_24CA7D7F8;
          if (v19)
          {
            v32 = v19;
            v33 = v17;
            v20 = (unint64_t *)&v17->__shared_owners_;
            do
              v21 = __ldxr(v20);
            while (__stxr(v21 + 1, v20));
          }
          else
          {
            v32 = 0;
            v33 = 0;
          }
          v22 = (unint64_t *)&v17->__shared_owners_;
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
        else
        {
          v32 = 0;
          v33 = 0;
          v31 = &off_24CA7D7F8;
        }
        break;
      default:
        sub_2108B9060();
    }
    sub_2108D2614((uint64_t)&v27, (uint64_t)&v31);
    *(_QWORD *)a1 = v27;
    *(_OWORD *)(a1 + 8) = v28;
    *(_OWORD *)(a1 + 24) = v29;
    *(_QWORD *)(a1 + 40) = v30;
    v31 = &off_24CA7D7F8;
    v24 = v33;
    if (v33)
    {
      v25 = (unint64_t *)&v33->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
}

void sub_2108E8D10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_21090E6B4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2108E8D24()
{
  return 21;
}

_UNKNOWN **sub_2108E8D2C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A745A0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A745A0))
    return &off_253ED6E40;
  __cxa_guard_release(&qword_254A745A0);
  return &off_253ED6E40;
}

void sub_2108E8D80(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _OWORD v15[3];
  _BYTE v16[32];
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t (**v20)();
  uint64_t *v21;
  std::__shared_weak_count *v22;
  __int128 v23[3];
  _DWORD v24[3];
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[3];

  v29[2] = *MEMORY[0x24BDAC8D0];
  sub_2108D33D4(&v20, a1);
  sub_2108E8B14((uint64_t)v16, a1);
  sub_2108E8B14((uint64_t)v15, a1);
  v4 = (_QWORD *)operator new();
  v5 = v4;
  v23[0] = v15[0];
  v23[1] = v15[1];
  v23[2] = v15[2];
  *v4 = off_24CA7B980;
  if (v19 <= 0x20)
    v6 = 32;
  else
    v6 = v19;
  *(_QWORD *)&v24[1] = v17;
  v24[0] = 3;
  LODWORD(v29[0]) = 1;
  *(_QWORD *)((char *)v29 + 4) = v18 | (unint64_t)(v6 << 32);
  v25 = v29[0];
  v26 = v6;
  v27 = v17;
  v28 = *(_QWORD *)((char *)v29 + 4);
  sub_2108D29A4((uint64_t)v4, (uint64_t)v24, v23);
  *v5 = off_24CA7B980;
  *a2 = v5;
  if (v21)
  {
    v8 = *v21;
    v7 = (std::__shared_weak_count *)v21[1];
    if (!v7)
      goto LABEL_10;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (v11)
    {
LABEL_10:
      if (!v8)
        goto LABEL_12;
      goto LABEL_11;
    }
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v8)
LABEL_11:
      sub_210912E7C((uint64_t)v21);
  }
LABEL_12:
  v20 = &off_24CA7D7F8;
  v12 = v22;
  if (v22)
  {
    v13 = (unint64_t *)&v22->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_2108E8F4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a2)
    sub_2108ABF6C(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2108E8FA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_21090DE2C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2108E8FBC(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_2108D33D4(a2, a1);
}

double sub_2108E8FC8(uint64_t a1, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  double result;
  uint64_t v20;
  __int128 v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  _BYTE *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  _BYTE *v31;
  _BYTE *v32;
  _BYTE *v33;
  _BYTE *v34;
  int v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  _OWORD v43[2];
  __int128 v44;
  uint64_t (**v45)();
  uint64_t *v46;
  std::__shared_weak_count *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _DWORD v51[3];
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD v56[3];

  v56[2] = *MEMORY[0x24BDAC8D0];
  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24CA84C98, (const struct __class_type_info *)&unk_24CA7BFC8, 0);
  if (v4)
  {
    v5 = (uint64_t)v4;
    sub_2108D33D4(&v45, (uint64_t)v4);
    sub_2108E8B14((uint64_t)v43, v5);
    v48 = v43[0];
    v49 = v43[1];
    v50 = v44;
    *(_QWORD *)&v37 = off_24CA7B980;
    if (HIDWORD(v44) <= 0x20)
      v6 = 32;
    else
      v6 = HIDWORD(v44);
    *(_QWORD *)&v51[1] = v44;
    v51[0] = 3;
    LODWORD(v56[0]) = 1;
    *(_QWORD *)((char *)v56 + 4) = DWORD2(v44) | (unint64_t)(v6 << 32);
    v52 = v56[0];
    v53 = v6;
    v54 = v44;
    v55 = *(_QWORD *)((char *)v56 + 4);
    sub_2108D29A4((uint64_t)&v37, (uint64_t)v51, &v48);
    *(_QWORD *)&v37 = off_24CA7B980;
    if (!v46)
      goto LABEL_13;
    v8 = *v46;
    v7 = (std::__shared_weak_count *)v46[1];
    if (!v7)
      goto LABEL_11;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if (!v8)
        goto LABEL_13;
    }
    else
    {
LABEL_11:
      if (!v8)
      {
LABEL_13:
        v45 = &off_24CA7D7F8;
        v12 = v47;
        if (v47)
        {
          v13 = (unint64_t *)&v47->__shared_owners_;
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        v15 = DWORD2(v39);
        *(_DWORD *)(a1 + 8) = DWORD2(v37);
        v16 = *(unsigned int *)(a1 + 40);
        if ((_DWORD)v16 == -1)
        {
          if ((_DWORD)v15 == -1)
          {
            result = *(double *)&v40;
            v36 = v41;
            *(_OWORD *)(a1 + 48) = v40;
            *(_OWORD *)(a1 + 64) = v36;
            *(_QWORD *)(a1 + 80) = v42;
            return result;
          }
        }
        else if ((_DWORD)v15 == -1)
        {
          ((void (*)(__int128 *, uint64_t))off_24CA7C080[v16])(&v48, a1 + 16);
          *(_DWORD *)(a1 + 40) = -1;
          goto LABEL_26;
        }
        *(_QWORD *)&v48 = a1 + 16;
        ((void (*)(__int128 *))off_24CA7C0C0[v15])(&v48);
LABEL_26:
        v20 = DWORD2(v39);
        result = *(double *)&v40;
        v21 = v41;
        *(_OWORD *)(a1 + 48) = v40;
        *(_OWORD *)(a1 + 64) = v21;
        *(_QWORD *)(a1 + 80) = v42;
        *(_QWORD *)&v37 = off_24CA7AFF0;
        if ((_DWORD)v20 != -1)
          ((void (*)(__int128 *, __int128 *))off_24CA7C080[v20])(&v48, &v38);
        return result;
      }
    }
    sub_210912E7C((uint64_t)v46);
    goto LABEL_13;
  }
  (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v48, lpsrc, 21);
  v18 = *(_OWORD *)(v48 + 16);
  v17 = *(_OWORD *)(v48 + 32);
  v37 = *(_OWORD *)v48;
  v38 = v18;
  v39 = v17;
  *(_QWORD *)&v48 = 0;
  MEMORY[0x212BCC6FC]();
  sub_2108E8924((uint64_t)&v48, a1);
  *(_QWORD *)&v43[0] = &v37;
  *((_QWORD *)&v43[0] + 1) = &v48;
  if (DWORD1(v38) == 1 && DWORD1(v49) == 1)
  {
    sub_2108FEBEC((size_t *)v43);
  }
  else if (DWORD2(v37) && HIDWORD(v37) && (_DWORD)v38)
  {
    v22 = HIDWORD(v37) - 1;
    v23 = DWORD2(v38);
    v24 = DWORD2(v49);
    v25 = (_BYTE *)v37;
    v26 = (_BYTE *)v48;
    v27 = v38 - 1;
    if ((_DWORD)v38 != 1)
    {
      v28 = HIDWORD(v49);
      v29 = HIDWORD(v38);
      if (HIDWORD(v37) == 1)
      {
        do
        {
          *v26 = *v25;
          v26[1] = v25[1];
          v26[2] = v25[2];
          v25 += v29;
          v26 += v28;
          --v27;
        }
        while (v27);
      }
      else
      {
        v30 = 0;
        v31 = (_BYTE *)(v48 + 2);
        v32 = (_BYTE *)(v37 + 2);
        do
        {
          v33 = v32;
          v34 = v31;
          v35 = v22;
          do
          {
            *(v34 - 2) = *(v33 - 2);
            *(v34 - 1) = *(v33 - 1);
            *v34 = *v33;
            v34 += v24;
            v33 += v23;
            --v35;
          }
          while (v35);
          *(v34 - 2) = *(v33 - 2);
          *(v34 - 1) = *(v33 - 1);
          *v34 = *v33;
          v25 += v29;
          v26 += v28;
          ++v30;
          v31 += v28;
          v32 += v29;
        }
        while (v30 != v27);
      }
    }
    for (; v22; --v22)
    {
      *v26 = *v25;
      v26[1] = v25[1];
      v26[2] = v25[2];
      v25 += v23;
      v26 += v24;
    }
    *v26 = *v25;
    v26[1] = v25[1];
    v26[2] = v25[2];
  }
  return result;
}

void sub_2108E93F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (a2)
    sub_2108ABF6C(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2108E9508(uint64_t a1)
{
  _QWORD v2[6];

  sub_2108E8924((uint64_t)v2, a1);
  return v2[0];
}

double sub_2108E9530@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 21
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 325, (uint64_t)"F == format", 11, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
  sub_2108E8924((uint64_t)v8, a1);
  v5 = (_OWORD *)operator new();
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

double sub_2108E95D0@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 21
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 331, (uint64_t)"F == format", 11, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
  sub_2108E8B14((uint64_t)v8, a1);
  v5 = (_OWORD *)operator new();
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

__int128 *sub_2108E9670()
{
  unsigned __int8 v0;
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  size_t v6;
  uint64_t *v7;
  _BYTE *v8;
  size_t v9;
  uint64_t *v10;
  _BYTE *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  void *v17[2];
  uint64_t v18;
  std::string __p;

  v0 = atomic_load((unsigned __int8 *)&qword_254A746F8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A746F8))
    goto LABEL_2;
  v2 = atomic_load((unsigned __int8 *)&qword_254A74700);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A74700))
  {
    v3 = atomic_load((unsigned __int8 *)&qword_254A74708);
    if ((v3 & 1) != 0 || !__cxa_guard_acquire(&qword_254A74708))
    {
LABEL_13:
      if (byte_254A74C7F < 0)
      {
        sub_2108B314C(&xmmword_254A74C50, (void *)qword_254A74C68, unk_254A74C70);
      }
      else
      {
        xmmword_254A74C50 = *(_OWORD *)&qword_254A74C68;
        unk_254A74C60 = unk_254A74C78;
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A74C50, &dword_21089F000);
      __cxa_guard_release(&qword_254A74700);
      goto LABEL_7;
    }
    v4 = atomic_load((unsigned __int8 *)&qword_254A74710);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A74710))
    {
      sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cv::CVImageBuffer<img::Format::Rgb8u>]", &qword_254A74C80);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A74C80, &dword_21089F000);
      __cxa_guard_release(&qword_254A74710);
    }
    v5 = atomic_load((unsigned __int8 *)&qword_254A74718);
    if ((v5 & 1) != 0 || !__cxa_guard_acquire(&qword_254A74718))
    {
LABEL_49:
      v16 = atomic_load((unsigned __int8 *)&qword_254A74720);
      if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_254A74720))
      {
        if (byte_254A74C98[23] < 0)
          sub_2108B314C(&__p, *(void **)byte_254A74C98, *(unint64_t *)&byte_254A74C98[8]);
        else
          __p = *(std::string *)byte_254A74C98;
        sub_2109ECDA0(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_254A74CB0);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A74CB0, &dword_21089F000);
        __cxa_guard_release(&qword_254A74720);
      }
      if (byte_254A74CC7 < 0)
      {
        sub_2108B314C(v17, (void *)xmmword_254A74CB0, *((unint64_t *)&xmmword_254A74CB0 + 1));
      }
      else
      {
        *(_OWORD *)v17 = xmmword_254A74CB0;
        v18 = unk_254A74CC0;
      }
      sub_21090B380((char *)v17, (std::string *)&qword_254A74C68);
      if (SHIBYTE(v18) < 0)
        operator delete(v17[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A74C68, &dword_21089F000);
      __cxa_guard_release(&qword_254A74708);
      goto LABEL_13;
    }
    if (byte_254A74C97 >= 0)
      v6 = byte_254A74C97;
    else
      v6 = unk_254A74C88;
    if (byte_254A74C97 >= 0)
      v7 = &qword_254A74C80;
    else
      v7 = (uint64_t *)qword_254A74C80;
    v8 = (char *)v7 + v6;
    if ((uint64_t)v6 >= 1)
    {
      v9 = v6;
      v10 = v7;
      do
      {
        v11 = memchr(v10, 60, v9);
        if (!v11)
          break;
        if (*v11 == 60)
          goto LABEL_35;
        v10 = (uint64_t *)(v11 + 1);
        v9 = v8 - (_BYTE *)v10;
      }
      while (v8 - (_BYTE *)v10 > 0);
    }
    v11 = (char *)v7 + v6;
LABEL_35:
    v12 = v11 - (_BYTE *)v7;
    if (v11 == v8)
      v12 = -1;
    if (v6 >= v12)
      v6 = v12;
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      sub_2108A4B7C();
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v13 = (char *)operator new(v14 + 1);
      *(_QWORD *)&byte_254A74C98[8] = v6;
      *(_QWORD *)&byte_254A74C98[16] = v15 | 0x8000000000000000;
      *(_QWORD *)byte_254A74C98 = v13;
    }
    else
    {
      v13 = byte_254A74C98;
      byte_254A74C98[23] = v6;
      if (!v6)
        goto LABEL_48;
    }
    memmove(v13, v7, v6);
LABEL_48:
    v13[v6] = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A74C98, &dword_21089F000);
    __cxa_guard_release(&qword_254A74718);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_254A74C67 < 0)
  {
    sub_2108B314C(&xmmword_254A74C38, (void *)xmmword_254A74C50, *((unint64_t *)&xmmword_254A74C50 + 1));
  }
  else
  {
    xmmword_254A74C38 = xmmword_254A74C50;
    unk_254A74C48 = unk_254A74C60;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A74C38, &dword_21089F000);
  __cxa_guard_release(&qword_254A746F8);
LABEL_2:
  if (byte_254A74C4F >= 0)
    return &xmmword_254A74C38;
  else
    return (__int128 *)xmmword_254A74C38;
}

void sub_2108E9AC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_254A74708);
  __cxa_guard_abort(&qword_254A74700);
  __cxa_guard_abort(&qword_254A746F8);
  _Unwind_Resume(a1);
}

void sub_2108E9B60(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A746F8);
  _Unwind_Resume(a1);
}

void sub_2108E9B78()
{
  sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 343, (uint64_t)&unk_210A02D2A, 0, (uint64_t)"Access notification must only be done in debug.", 47, (void (*)(void **))sub_2109EDDB4);
  abort();
}

void sub_2108E9BB4(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t (**v39)();
  __int128 v40;
  uint64_t (**v41)();
  __int128 v42;

  if (a2)
  {
    sub_2108D30F0(&v39, a1);
    v4 = (_QWORD *)operator new();
    v42 = v40;
    v40 = 0uLL;
    v41 = &off_24CA7D7D8;
    *v4 = &off_24CA7BD90;
    sub_21090E048(v4 + 1, (uint64_t)&v41);
    if ((_QWORD)v42)
    {
      v6 = *(_QWORD *)v42;
      v5 = *(std::__shared_weak_count **)(v42 + 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
          if (!v6)
            goto LABEL_10;
          goto LABEL_9;
        }
      }
      if (v6)
LABEL_9:
        sub_210912F6C(v42);
    }
LABEL_10:
    v41 = &off_24CA7D7F8;
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
    if (!*((_QWORD *)&v42 + 1))
      goto LABEL_14;
    v11 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      *a3 = v4;
      v13 = (uint64_t *)v40;
      if (!(_QWORD)v40)
        goto LABEL_22;
    }
    else
    {
LABEL_14:
      *a3 = v4;
      v13 = (uint64_t *)v40;
      if (!(_QWORD)v40)
        goto LABEL_22;
    }
    v15 = *v13;
    v14 = (std::__shared_weak_count *)v13[1];
    if (v14)
    {
      v16 = (unint64_t *)&v14->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      do
        v18 = __ldaxr(v16);
      while (__stlxr(v18 - 1, v16));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
        if (!v15)
          goto LABEL_22;
        goto LABEL_21;
      }
    }
    if (v15)
LABEL_21:
      sub_210912F6C(v40);
LABEL_22:
    v39 = &off_24CA7D7F8;
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
    if (!*((_QWORD *)&v40 + 1))
      return;
    v20 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (v21)
      return;
LABEL_51:
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    return;
  }
  sub_2108D33D4(&v39, a1);
  v22 = (_QWORD *)operator new();
  v42 = v40;
  v40 = 0uLL;
  v41 = &off_24CA7D7B8;
  *v22 = &off_24CA7BD70;
  sub_21090DD20(v22 + 1, (uint64_t)&v41);
  if ((_QWORD)v42)
  {
    v24 = *(_QWORD *)v42;
    v23 = *(std::__shared_weak_count **)(v42 + 8);
    if (v23)
    {
      v25 = (unint64_t *)&v23->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
      do
        v27 = __ldaxr(v25);
      while (__stlxr(v27 - 1, v25));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
        if (!v24)
          goto LABEL_35;
        goto LABEL_34;
      }
    }
    if (v24)
LABEL_34:
      sub_210912E7C(v42);
  }
LABEL_35:
  v41 = &off_24CA7D7F8;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
  if (!*((_QWORD *)&v42 + 1))
    goto LABEL_39;
  v29 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
    *a3 = v22;
    v31 = (uint64_t *)v40;
    if (!(_QWORD)v40)
      goto LABEL_47;
  }
  else
  {
LABEL_39:
    *a3 = v22;
    v31 = (uint64_t *)v40;
    if (!(_QWORD)v40)
      goto LABEL_47;
  }
  v33 = *v31;
  v32 = (std::__shared_weak_count *)v31[1];
  if (v32)
  {
    v34 = (unint64_t *)&v32->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
    do
      v36 = __ldaxr(v34);
    while (__stlxr(v36 - 1, v34));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
      if (!v33)
        goto LABEL_47;
      goto LABEL_46;
    }
  }
  if (v33)
LABEL_46:
    sub_210912E7C(v40);
LABEL_47:
  v39 = &off_24CA7D7F8;
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v37 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
      goto LABEL_51;
  }
}

void sub_2108E9F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_21090DE2C(&a12);
  MEMORY[0x212BCC6FC](v12, 0xA1C40711E6FFCLL);
  sub_21090DE2C(&a9);
  _Unwind_Resume(a1);
}

void sub_2108E9F84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21090DE2C(&a9);
  _Unwind_Resume(a1);
}

void sub_2108E9F98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_21090E154(&a12);
  MEMORY[0x212BCC6FC](v12, 0xA1C40711E6FFCLL);
  sub_21090E154(&a9);
  _Unwind_Resume(a1);
}

void sub_2108E9FCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21090E154(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2108E9FE0()
{
  return 65792;
}

void sub_2108E9FEC(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_2108D30F0(a2, a1);
}

uint64_t sub_2108E9FF8(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24CA7B1A0;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24CA7C080[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_2108EA05C(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t (**v27)();
  uint64_t v28;
  std::__shared_weak_count *v29;

  if (sub_2108D69D0(a2))
  {
    sub_2108FF3F8(a1, 0, (_DWORD *)(a2 + 72));
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v5 = *(_QWORD *)(a2 + 24);
        v4 = *(std::__shared_weak_count **)(a2 + 32);
        v27 = &off_24CA7D7F8;
        v28 = v5;
        v29 = v4;
        if (v4)
        {
          p_shared_owners = (unint64_t *)&v4->__shared_owners_;
          do
            v7 = __ldxr(p_shared_owners);
          while (__stxr(v7 + 1, p_shared_owners));
        }
        break;
      case 1:
        v13 = *(_QWORD *)(a2 + 24);
        v12 = *(std::__shared_weak_count **)(a2 + 32);
        v27 = &off_24CA7D7F8;
        v28 = v13;
        v29 = v12;
        if (v12)
        {
          v14 = (unint64_t *)&v12->__shared_owners_;
          do
            v15 = __ldxr(v14);
          while (__stxr(v15 + 1, v14));
        }
        break;
      case 2:
        v9 = *(_QWORD *)(a2 + 24);
        v8 = *(std::__shared_weak_count **)(a2 + 32);
        v27 = &off_24CA7D7F8;
        v28 = v9;
        v29 = v8;
        if (v8)
        {
          v10 = (unint64_t *)&v8->__shared_owners_;
          do
            v11 = __ldxr(v10);
          while (__stxr(v11 + 1, v10));
        }
        break;
      case 3:
        v16 = *(std::__shared_weak_count **)(a2 + 24);
        if (v16 && (v17 = std::__shared_weak_count::lock(v16)) != 0)
        {
          v18 = v17;
          v19 = *(_QWORD *)(a2 + 16);
          v27 = &off_24CA7D7F8;
          if (v19)
          {
            v28 = v19;
            v29 = v17;
            v20 = (unint64_t *)&v17->__shared_owners_;
            do
              v21 = __ldxr(v20);
            while (__stxr(v21 + 1, v20));
          }
          else
          {
            v28 = 0;
            v29 = 0;
          }
          v22 = (unint64_t *)&v17->__shared_owners_;
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
        else
        {
          v28 = 0;
          v29 = 0;
          v27 = &off_24CA7D7F8;
        }
        break;
      default:
        sub_2108B9060();
    }
    sub_2108D60AC(a1, (uint64_t)&v27);
    v27 = &off_24CA7D7F8;
    v24 = v29;
    if (v29)
    {
      v25 = (unint64_t *)&v29->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
}

void sub_2108EA238(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_21090E6B4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2108EA24C(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t (**v31)();
  uint64_t v32;
  std::__shared_weak_count *v33;

  if (sub_2108D69D0(a2))
  {
    sub_2108FF3F8(a1, 0, (_DWORD *)(a2 + 72));
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v5 = *(_QWORD *)(a2 + 24);
        v4 = *(std::__shared_weak_count **)(a2 + 32);
        v31 = &off_24CA7D7F8;
        v32 = v5;
        v33 = v4;
        if (v4)
        {
          p_shared_owners = (unint64_t *)&v4->__shared_owners_;
          do
            v7 = __ldxr(p_shared_owners);
          while (__stxr(v7 + 1, p_shared_owners));
        }
        break;
      case 1:
        v13 = *(_QWORD *)(a2 + 24);
        v12 = *(std::__shared_weak_count **)(a2 + 32);
        v31 = &off_24CA7D7F8;
        v32 = v13;
        v33 = v12;
        if (v12)
        {
          v14 = (unint64_t *)&v12->__shared_owners_;
          do
            v15 = __ldxr(v14);
          while (__stxr(v15 + 1, v14));
        }
        break;
      case 2:
        v9 = *(_QWORD *)(a2 + 24);
        v8 = *(std::__shared_weak_count **)(a2 + 32);
        v31 = &off_24CA7D7F8;
        v32 = v9;
        v33 = v8;
        if (v8)
        {
          v10 = (unint64_t *)&v8->__shared_owners_;
          do
            v11 = __ldxr(v10);
          while (__stxr(v11 + 1, v10));
        }
        break;
      case 3:
        v16 = *(std::__shared_weak_count **)(a2 + 24);
        if (v16 && (v17 = std::__shared_weak_count::lock(v16)) != 0)
        {
          v18 = v17;
          v19 = *(_QWORD *)(a2 + 16);
          v31 = &off_24CA7D7F8;
          if (v19)
          {
            v32 = v19;
            v33 = v17;
            v20 = (unint64_t *)&v17->__shared_owners_;
            do
              v21 = __ldxr(v20);
            while (__stxr(v21 + 1, v20));
          }
          else
          {
            v32 = 0;
            v33 = 0;
          }
          v22 = (unint64_t *)&v17->__shared_owners_;
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
        else
        {
          v32 = 0;
          v33 = 0;
          v31 = &off_24CA7D7F8;
        }
        break;
      default:
        sub_2108B9060();
    }
    sub_2108D60AC((uint64_t)&v27, (uint64_t)&v31);
    *(_QWORD *)a1 = v27;
    *(_OWORD *)(a1 + 8) = v28;
    *(_OWORD *)(a1 + 24) = v29;
    *(_QWORD *)(a1 + 40) = v30;
    v31 = &off_24CA7D7F8;
    v24 = v33;
    if (v33)
    {
      v25 = (unint64_t *)&v33->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
}

void sub_2108EA448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_21090E6B4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2108EA45C()
{
  return 22;
}

_UNKNOWN **sub_2108EA464()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A745A0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A745A0))
    return &off_253ED6E40;
  __cxa_guard_release(&qword_254A745A0);
  return &off_253ED6E40;
}

void sub_2108EA4B8(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _OWORD v15[3];
  _BYTE v16[32];
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t (**v20)();
  uint64_t *v21;
  std::__shared_weak_count *v22;
  __int128 v23[3];
  _DWORD v24[3];
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[3];

  v29[2] = *MEMORY[0x24BDAC8D0];
  sub_2108D6E94(&v20, a1);
  sub_2108EA24C((uint64_t)v16, a1);
  sub_2108EA24C((uint64_t)v15, a1);
  v4 = (_QWORD *)operator new();
  v5 = v4;
  v23[0] = v15[0];
  v23[1] = v15[1];
  v23[2] = v15[2];
  *v4 = off_24CA7BA10;
  if (v19 <= 0x10)
    v6 = 16;
  else
    v6 = v19;
  *(_QWORD *)&v24[1] = v17;
  v24[0] = 3;
  LODWORD(v29[0]) = 1;
  *(_QWORD *)((char *)v29 + 4) = v18 | (unint64_t)(v6 << 32);
  v25 = v29[0];
  v26 = v6;
  v27 = v17;
  v28 = *(_QWORD *)((char *)v29 + 4);
  sub_2108D6444((uint64_t)v4, (uint64_t)v24, v23);
  *v5 = off_24CA7BA10;
  *a2 = v5;
  if (v21)
  {
    v8 = *v21;
    v7 = (std::__shared_weak_count *)v21[1];
    if (!v7)
      goto LABEL_10;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (v11)
    {
LABEL_10:
      if (!v8)
        goto LABEL_12;
      goto LABEL_11;
    }
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v8)
LABEL_11:
      sub_210912E7C((uint64_t)v21);
  }
LABEL_12:
  v20 = &off_24CA7D7F8;
  v12 = v22;
  if (v22)
  {
    v13 = (unint64_t *)&v22->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_2108EA684(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a2)
    sub_2108ABF6C(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2108EA6E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_21090DE2C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2108EA6F4(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_2108D6E94(a2, a1);
}

void sub_2108EA700(uint64_t a1, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _WORD *v24;
  _WORD *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  _WORD *v31;
  _WORD *v32;
  _WORD *v33;
  _WORD *v34;
  int v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  _OWORD v43[2];
  __int128 v44;
  uint64_t (**v45)();
  uint64_t *v46;
  std::__shared_weak_count *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _DWORD v51[3];
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD v56[3];

  v56[2] = *MEMORY[0x24BDAC8D0];
  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24CA84C98, (const struct __class_type_info *)&unk_24CA7BFE0, 0);
  if (v4)
  {
    v5 = (uint64_t)v4;
    sub_2108D6E94(&v45, (uint64_t)v4);
    sub_2108EA24C((uint64_t)v43, v5);
    v48 = v43[0];
    v49 = v43[1];
    v50 = v44;
    *(_QWORD *)&v37 = off_24CA7BA10;
    if (HIDWORD(v44) <= 0x10)
      v6 = 16;
    else
      v6 = HIDWORD(v44);
    *(_QWORD *)&v51[1] = v44;
    v51[0] = 3;
    LODWORD(v56[0]) = 1;
    *(_QWORD *)((char *)v56 + 4) = DWORD2(v44) | (unint64_t)(v6 << 32);
    v52 = v56[0];
    v53 = v6;
    v54 = v44;
    v55 = *(_QWORD *)((char *)v56 + 4);
    sub_2108D6444((uint64_t)&v37, (uint64_t)v51, &v48);
    *(_QWORD *)&v37 = off_24CA7BA10;
    if (!v46)
      goto LABEL_13;
    v8 = *v46;
    v7 = (std::__shared_weak_count *)v46[1];
    if (!v7)
      goto LABEL_11;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if (!v8)
        goto LABEL_13;
    }
    else
    {
LABEL_11:
      if (!v8)
      {
LABEL_13:
        v45 = &off_24CA7D7F8;
        v12 = v47;
        if (v47)
        {
          v13 = (unint64_t *)&v47->__shared_owners_;
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        v15 = DWORD2(v39);
        *(_DWORD *)(a1 + 8) = DWORD2(v37);
        v16 = *(unsigned int *)(a1 + 40);
        if ((_DWORD)v16 == -1)
        {
          if ((_DWORD)v15 == -1)
          {
            v36 = v41;
            *(_OWORD *)(a1 + 48) = v40;
            *(_OWORD *)(a1 + 64) = v36;
            *(_QWORD *)(a1 + 80) = v42;
            return;
          }
        }
        else if ((_DWORD)v15 == -1)
        {
          ((void (*)(__int128 *, uint64_t))off_24CA7C080[v16])(&v48, a1 + 16);
          *(_DWORD *)(a1 + 40) = -1;
          goto LABEL_26;
        }
        *(_QWORD *)&v48 = a1 + 16;
        ((void (*)(__int128 *))off_24CA7C0C0[v15])(&v48);
LABEL_26:
        v19 = DWORD2(v39);
        v20 = v41;
        *(_OWORD *)(a1 + 48) = v40;
        *(_OWORD *)(a1 + 64) = v20;
        *(_QWORD *)(a1 + 80) = v42;
        *(_QWORD *)&v37 = off_24CA7B1A0;
        if ((_DWORD)v19 != -1)
          ((void (*)(__int128 *, __int128 *))off_24CA7C080[v19])(&v48, &v38);
        return;
      }
    }
    sub_210912E7C((uint64_t)v46);
    goto LABEL_13;
  }
  (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v48, lpsrc, 22);
  v18 = *(_OWORD *)(v48 + 16);
  v17 = *(_OWORD *)(v48 + 32);
  v37 = *(_OWORD *)v48;
  v38 = v18;
  v39 = v17;
  *(_QWORD *)&v48 = 0;
  MEMORY[0x212BCC6FC]();
  sub_2108EA05C((uint64_t)&v48, a1);
  *(_QWORD *)&v43[0] = &v37;
  *((_QWORD *)&v43[0] + 1) = &v48;
  if (DWORD1(v38) == 1 && DWORD1(v49) == 1)
  {
    sub_2109005E8((uint64_t *)v43);
    return;
  }
  if (DWORD2(v37) && HIDWORD(v37) && (_DWORD)v38)
  {
    v21 = HIDWORD(v37) - 1;
    v22 = DWORD2(v38);
    v23 = DWORD2(v49);
    v24 = (_WORD *)v37;
    v25 = (_WORD *)v48;
    v26 = v38 - 1;
    if ((_DWORD)v38 != 1)
    {
      v27 = HIDWORD(v49);
      v28 = HIDWORD(v38);
      if (HIDWORD(v37) == 1)
      {
        do
        {
          *v25 = *v24;
          v25[1] = v24[1];
          v25[2] = v24[2];
          v24 += v28;
          v25 += v27;
          --v26;
        }
        while (v26);
LABEL_44:
        *v25 = *v24;
        v25[1] = v24[1];
        v25[2] = v24[2];
        return;
      }
      v29 = 0;
      v30 = 2 * DWORD2(v49);
      v31 = (_WORD *)(v48 + 4);
      v32 = (_WORD *)(v37 + 4);
      do
      {
        v33 = v32;
        v34 = v31;
        v35 = v21;
        do
        {
          *(v34 - 2) = *(v33 - 2);
          *(v34 - 1) = *(v33 - 1);
          *v34 = *v33;
          v34 = (_WORD *)((char *)v34 + v30);
          v33 += v22;
          --v35;
        }
        while (v35);
        *(v34 - 2) = *(v33 - 2);
        *(v34 - 1) = *(v33 - 1);
        *v34 = *v33;
        v24 += v28;
        v25 += v27;
        ++v29;
        v31 += v27;
        v32 += v28;
      }
      while (v29 != v26);
    }
    for (; v21; --v21)
    {
      *v25 = *v24;
      v25[1] = v24[1];
      v25[2] = v24[2];
      v24 += v22;
      v25 += v23;
    }
    goto LABEL_44;
  }
}

void sub_2108EAB50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (a2)
    sub_2108ABF6C(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2108EAC60(uint64_t a1)
{
  _QWORD v2[6];

  sub_2108EA05C((uint64_t)v2, a1);
  return v2[0];
}

double sub_2108EAC88@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 22
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 325, (uint64_t)"F == format", 11, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
  sub_2108EA05C((uint64_t)v8, a1);
  v5 = (_OWORD *)operator new();
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

double sub_2108EAD28@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 22
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 331, (uint64_t)"F == format", 11, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
  sub_2108EA24C((uint64_t)v8, a1);
  v5 = (_OWORD *)operator new();
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

__int128 *sub_2108EADC8()
{
  unsigned __int8 v0;
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  size_t v6;
  uint64_t *v7;
  _BYTE *v8;
  size_t v9;
  uint64_t *v10;
  _BYTE *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  void *v17[2];
  uint64_t v18;
  std::string __p;

  v0 = atomic_load((unsigned __int8 *)&qword_254A74728);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A74728))
    goto LABEL_2;
  v2 = atomic_load((unsigned __int8 *)&qword_254A74730);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A74730))
  {
    v3 = atomic_load((unsigned __int8 *)&qword_254A74738);
    if ((v3 & 1) != 0 || !__cxa_guard_acquire(&qword_254A74738))
    {
LABEL_13:
      if (byte_254A74D0F < 0)
      {
        sub_2108B314C(&xmmword_254A74CE0, (void *)qword_254A74CF8, unk_254A74D00);
      }
      else
      {
        xmmword_254A74CE0 = *(_OWORD *)&qword_254A74CF8;
        unk_254A74CF0 = unk_254A74D08;
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A74CE0, &dword_21089F000);
      __cxa_guard_release(&qword_254A74730);
      goto LABEL_7;
    }
    v4 = atomic_load((unsigned __int8 *)&qword_254A74740);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A74740))
    {
      sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cv::CVImageBuffer<img::Format::Rgb16u>]", &qword_254A74D10);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A74D10, &dword_21089F000);
      __cxa_guard_release(&qword_254A74740);
    }
    v5 = atomic_load((unsigned __int8 *)&qword_254A74748);
    if ((v5 & 1) != 0 || !__cxa_guard_acquire(&qword_254A74748))
    {
LABEL_49:
      v16 = atomic_load((unsigned __int8 *)&qword_254A74750);
      if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_254A74750))
      {
        if (byte_254A74D28[23] < 0)
          sub_2108B314C(&__p, *(void **)byte_254A74D28, *(unint64_t *)&byte_254A74D28[8]);
        else
          __p = *(std::string *)byte_254A74D28;
        sub_2109ECDA0(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_254A74D40);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A74D40, &dword_21089F000);
        __cxa_guard_release(&qword_254A74750);
      }
      if (byte_254A74D57 < 0)
      {
        sub_2108B314C(v17, (void *)xmmword_254A74D40, *((unint64_t *)&xmmword_254A74D40 + 1));
      }
      else
      {
        *(_OWORD *)v17 = xmmword_254A74D40;
        v18 = unk_254A74D50;
      }
      sub_21090B4A8((char *)v17, (std::string *)&qword_254A74CF8);
      if (SHIBYTE(v18) < 0)
        operator delete(v17[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A74CF8, &dword_21089F000);
      __cxa_guard_release(&qword_254A74738);
      goto LABEL_13;
    }
    if (byte_254A74D27 >= 0)
      v6 = byte_254A74D27;
    else
      v6 = unk_254A74D18;
    if (byte_254A74D27 >= 0)
      v7 = &qword_254A74D10;
    else
      v7 = (uint64_t *)qword_254A74D10;
    v8 = (char *)v7 + v6;
    if ((uint64_t)v6 >= 1)
    {
      v9 = v6;
      v10 = v7;
      do
      {
        v11 = memchr(v10, 60, v9);
        if (!v11)
          break;
        if (*v11 == 60)
          goto LABEL_35;
        v10 = (uint64_t *)(v11 + 1);
        v9 = v8 - (_BYTE *)v10;
      }
      while (v8 - (_BYTE *)v10 > 0);
    }
    v11 = (char *)v7 + v6;
LABEL_35:
    v12 = v11 - (_BYTE *)v7;
    if (v11 == v8)
      v12 = -1;
    if (v6 >= v12)
      v6 = v12;
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      sub_2108A4B7C();
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v13 = (char *)operator new(v14 + 1);
      *(_QWORD *)&byte_254A74D28[8] = v6;
      *(_QWORD *)&byte_254A74D28[16] = v15 | 0x8000000000000000;
      *(_QWORD *)byte_254A74D28 = v13;
    }
    else
    {
      v13 = byte_254A74D28;
      byte_254A74D28[23] = v6;
      if (!v6)
        goto LABEL_48;
    }
    memmove(v13, v7, v6);
LABEL_48:
    v13[v6] = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A74D28, &dword_21089F000);
    __cxa_guard_release(&qword_254A74748);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_254A74CF7 < 0)
  {
    sub_2108B314C(&xmmword_254A74CC8, (void *)xmmword_254A74CE0, *((unint64_t *)&xmmword_254A74CE0 + 1));
  }
  else
  {
    xmmword_254A74CC8 = xmmword_254A74CE0;
    unk_254A74CD8 = unk_254A74CF0;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A74CC8, &dword_21089F000);
  __cxa_guard_release(&qword_254A74728);
LABEL_2:
  if (byte_254A74CDF >= 0)
    return &xmmword_254A74CC8;
  else
    return (__int128 *)xmmword_254A74CC8;
}

void sub_2108EB21C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_254A74738);
  __cxa_guard_abort(&qword_254A74730);
  __cxa_guard_abort(&qword_254A74728);
  _Unwind_Resume(a1);
}

void sub_2108EB2B8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A74728);
  _Unwind_Resume(a1);
}

void sub_2108EB2D0()
{
  sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 343, (uint64_t)&unk_210A02D2A, 0, (uint64_t)"Access notification must only be done in debug.", 47, (void (*)(void **))sub_2109EDDB4);
  abort();
}

void sub_2108EB30C(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t (**v39)();
  __int128 v40;
  uint64_t (**v41)();
  __int128 v42;

  if (a2)
  {
    sub_2108D6BB0(&v39, a1);
    v4 = (_QWORD *)operator new();
    v42 = v40;
    v40 = 0uLL;
    v41 = &off_24CA7D7D8;
    *v4 = &off_24CA7BD90;
    sub_21090E048(v4 + 1, (uint64_t)&v41);
    if ((_QWORD)v42)
    {
      v6 = *(_QWORD *)v42;
      v5 = *(std::__shared_weak_count **)(v42 + 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
          if (!v6)
            goto LABEL_10;
          goto LABEL_9;
        }
      }
      if (v6)
LABEL_9:
        sub_210912F6C(v42);
    }
LABEL_10:
    v41 = &off_24CA7D7F8;
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
    if (!*((_QWORD *)&v42 + 1))
      goto LABEL_14;
    v11 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      *a3 = v4;
      v13 = (uint64_t *)v40;
      if (!(_QWORD)v40)
        goto LABEL_22;
    }
    else
    {
LABEL_14:
      *a3 = v4;
      v13 = (uint64_t *)v40;
      if (!(_QWORD)v40)
        goto LABEL_22;
    }
    v15 = *v13;
    v14 = (std::__shared_weak_count *)v13[1];
    if (v14)
    {
      v16 = (unint64_t *)&v14->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      do
        v18 = __ldaxr(v16);
      while (__stlxr(v18 - 1, v16));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
        if (!v15)
          goto LABEL_22;
        goto LABEL_21;
      }
    }
    if (v15)
LABEL_21:
      sub_210912F6C(v40);
LABEL_22:
    v39 = &off_24CA7D7F8;
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
    if (!*((_QWORD *)&v40 + 1))
      return;
    v20 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (v21)
      return;
LABEL_51:
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    return;
  }
  sub_2108D6E94(&v39, a1);
  v22 = (_QWORD *)operator new();
  v42 = v40;
  v40 = 0uLL;
  v41 = &off_24CA7D7B8;
  *v22 = &off_24CA7BD70;
  sub_21090DD20(v22 + 1, (uint64_t)&v41);
  if ((_QWORD)v42)
  {
    v24 = *(_QWORD *)v42;
    v23 = *(std::__shared_weak_count **)(v42 + 8);
    if (v23)
    {
      v25 = (unint64_t *)&v23->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
      do
        v27 = __ldaxr(v25);
      while (__stlxr(v27 - 1, v25));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
        if (!v24)
          goto LABEL_35;
        goto LABEL_34;
      }
    }
    if (v24)
LABEL_34:
      sub_210912E7C(v42);
  }
LABEL_35:
  v41 = &off_24CA7D7F8;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
  if (!*((_QWORD *)&v42 + 1))
    goto LABEL_39;
  v29 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
    *a3 = v22;
    v31 = (uint64_t *)v40;
    if (!(_QWORD)v40)
      goto LABEL_47;
  }
  else
  {
LABEL_39:
    *a3 = v22;
    v31 = (uint64_t *)v40;
    if (!(_QWORD)v40)
      goto LABEL_47;
  }
  v33 = *v31;
  v32 = (std::__shared_weak_count *)v31[1];
  if (v32)
  {
    v34 = (unint64_t *)&v32->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
    do
      v36 = __ldaxr(v34);
    while (__stlxr(v36 - 1, v34));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
      if (!v33)
        goto LABEL_47;
      goto LABEL_46;
    }
  }
  if (v33)
LABEL_46:
    sub_210912E7C(v40);
LABEL_47:
  v39 = &off_24CA7D7F8;
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v37 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
      goto LABEL_51;
  }
}

void sub_2108EB6A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_21090DE2C(&a12);
  MEMORY[0x212BCC6FC](v12, 0xA1C40711E6FFCLL);
  sub_21090DE2C(&a9);
  _Unwind_Resume(a1);
}

void sub_2108EB6DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21090DE2C(&a9);
  _Unwind_Resume(a1);
}

void sub_2108EB6F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_21090E154(&a12);
  MEMORY[0x212BCC6FC](v12, 0xA1C40711E6FFCLL);
  sub_21090E154(&a9);
  _Unwind_Resume(a1);
}

void sub_2108EB724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21090E154(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2108EB738()
{
  return 65792;
}

void sub_2108EB744(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_2108D6BB0(a2, a1);
}

uint64_t sub_2108EB750(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24CA7B080;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24CA7C080[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_2108EB7B4(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if (sub_2108D472C(a2))
  {
    if (*(_DWORD *)(a2 + 76))
      v4 = *(_DWORD *)(a2 + 72) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 72);
    if (v4)
      v5 = 0;
    LODWORD(v34) = 4;
    *(_QWORD *)((char *)&v34 + 4) = v5;
    v6 = 4 * ((_DWORD)v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5))
      v7 = v7;
    else
      v7 = 0;
    v8 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
    v9 = __PAIR64__(DWORD1(v34), 4);
    LODWORD(v34) = 1;
    *(_QWORD *)((char *)&v34 + 4) = v8;
    v10 = v34;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(_QWORD *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(_QWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24CA7D7F8;
        *((_QWORD *)&v34 + 1) = v12;
        v35 = v11;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        break;
      case 1:
        v20 = *(_QWORD *)(a2 + 24);
        v19 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24CA7D7F8;
        *((_QWORD *)&v34 + 1) = v20;
        v35 = v19;
        if (v19)
        {
          v21 = (unint64_t *)&v19->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        break;
      case 2:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24CA7D7F8;
        *((_QWORD *)&v34 + 1) = v16;
        v35 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 3:
        v23 = *(std::__shared_weak_count **)(a2 + 24);
        if (v23 && (v24 = std::__shared_weak_count::lock(v23)) != 0)
        {
          v25 = v24;
          v26 = *(_QWORD *)(a2 + 16);
          *(_QWORD *)&v34 = &off_24CA7D7F8;
          if (v26)
          {
            *((_QWORD *)&v34 + 1) = v26;
            v35 = v24;
            v27 = (unint64_t *)&v24->__shared_owners_;
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          else
          {
            *((_QWORD *)&v34 + 1) = 0;
            v35 = 0;
          }
          v29 = (unint64_t *)&v24->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        else
        {
          *((_QWORD *)&v34 + 1) = 0;
          v35 = 0;
          *(_QWORD *)&v34 = &off_24CA7D7F8;
        }
        break;
      default:
        sub_2108B9060();
    }
    sub_2108D3808(a1, (uint64_t)&v34);
    *(_QWORD *)&v34 = &off_24CA7D7F8;
    v31 = v35;
    if (v35)
    {
      v32 = (unint64_t *)&v35->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
}

void sub_2108EBA18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21090E6B4(&a9);
  _Unwind_Resume(a1);
}

void sub_2108EBA2C(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t (**v34)();
  uint64_t v35;
  std::__shared_weak_count *v36;
  _BYTE v37[24];
  __int128 v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  if (sub_2108D472C(a2))
  {
    if (*(_DWORD *)(a2 + 76))
      v4 = *(_DWORD *)(a2 + 72) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 72);
    if (v4)
      v5 = 0;
    *(_DWORD *)v37 = 4;
    *(_QWORD *)&v37[4] = v5;
    v6 = 4 * ((_DWORD)v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5))
      v7 = v7;
    else
      v7 = 0;
    v8 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
    v9 = __PAIR64__(*(unsigned int *)&v37[4], 4);
    *(_DWORD *)v37 = 1;
    *(_QWORD *)&v37[4] = v8;
    v10 = *(_QWORD *)v37;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(_QWORD *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(_QWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        v34 = &off_24CA7D7F8;
        v35 = v12;
        v36 = v11;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        break;
      case 1:
        v20 = *(_QWORD *)(a2 + 24);
        v19 = *(std::__shared_weak_count **)(a2 + 32);
        v34 = &off_24CA7D7F8;
        v35 = v20;
        v36 = v19;
        if (v19)
        {
          v21 = (unint64_t *)&v19->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        break;
      case 2:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        v34 = &off_24CA7D7F8;
        v35 = v16;
        v36 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 3:
        v23 = *(std::__shared_weak_count **)(a2 + 24);
        if (v23 && (v24 = std::__shared_weak_count::lock(v23)) != 0)
        {
          v25 = v24;
          v26 = *(_QWORD *)(a2 + 16);
          v34 = &off_24CA7D7F8;
          if (v26)
          {
            v35 = v26;
            v36 = v24;
            v27 = (unint64_t *)&v24->__shared_owners_;
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          else
          {
            v35 = 0;
            v36 = 0;
          }
          v29 = (unint64_t *)&v24->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        else
        {
          v35 = 0;
          v36 = 0;
          v34 = &off_24CA7D7F8;
        }
        break;
      default:
        sub_2108B9060();
    }
    sub_2108D3808((uint64_t)v37, (uint64_t)&v34);
    *(_QWORD *)a1 = *(_QWORD *)v37;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)&v37[8];
    *(_OWORD *)(a1 + 24) = v38;
    *(_QWORD *)(a1 + 40) = v39;
    v34 = &off_24CA7D7F8;
    v31 = v36;
    if (v36)
    {
      v32 = (unint64_t *)&v36->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
}

void sub_2108EBCB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21090E6B4(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2108EBCC4()
{
  return 25;
}

_UNKNOWN **sub_2108EBCCC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A745A0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A745A0))
    return &off_253ED6E40;
  __cxa_guard_release(&qword_254A745A0);
  return &off_253ED6E40;
}

void sub_2108EBD20(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _OWORD v15[3];
  _BYTE v16[32];
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t (**v20)();
  uint64_t *v21;
  std::__shared_weak_count *v22;
  __int128 v23[3];
  _DWORD v24[3];
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[3];

  v29[2] = *MEMORY[0x24BDAC8D0];
  sub_2108D4C78(&v20, a1);
  sub_2108EBA2C((uint64_t)v16, a1);
  sub_2108EBA2C((uint64_t)v15, a1);
  v4 = (_QWORD *)operator new();
  v5 = v4;
  v23[0] = v15[0];
  v23[1] = v15[1];
  v23[2] = v15[2];
  *v4 = off_24CA7BAA0;
  if (v19 <= 0x20)
    v6 = 32;
  else
    v6 = v19;
  *(_QWORD *)&v24[1] = v17;
  v24[0] = 4;
  LODWORD(v29[0]) = 1;
  *(_QWORD *)((char *)v29 + 4) = v18 | (unint64_t)(v6 << 32);
  v25 = v29[0];
  v26 = v6;
  v27 = v17;
  v28 = *(_QWORD *)((char *)v29 + 4);
  sub_2108D3DD4((uint64_t)v4, 25, (uint64_t)v24, v23);
  *v5 = off_24CA7BAA0;
  *a2 = v5;
  if (v21)
  {
    v8 = *v21;
    v7 = (std::__shared_weak_count *)v21[1];
    if (!v7)
      goto LABEL_10;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (v11)
    {
LABEL_10:
      if (!v8)
        goto LABEL_12;
      goto LABEL_11;
    }
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v8)
LABEL_11:
      sub_210912E7C((uint64_t)v21);
  }
LABEL_12:
  v20 = &off_24CA7D7F8;
  v12 = v22;
  if (v22)
  {
    v13 = (unint64_t *)&v22->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_2108EBEF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a2)
    sub_2108ABF6C(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2108EBF4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_21090DE2C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2108EBF60(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_2108D4C78(a2, a1);
}

double sub_2108EBF6C(uint64_t a1, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  double result;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  _OWORD v30[2];
  __int128 v31;
  uint64_t (**v32)();
  uint64_t *v33;
  std::__shared_weak_count *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _DWORD v38[6];
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[3];

  v41[2] = *MEMORY[0x24BDAC8D0];
  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24CA84C98, (const struct __class_type_info *)&unk_24CA7BFF8, 0);
  if (v4)
  {
    v5 = (uint64_t)v4;
    sub_2108D4C78(&v32, (uint64_t)v4);
    sub_2108EBA2C((uint64_t)v30, v5);
    v35 = v30[0];
    v36 = v30[1];
    v37 = v31;
    *(_QWORD *)&v24 = off_24CA7BAA0;
    if (HIDWORD(v31) <= 0x20)
      v6 = 32;
    else
      v6 = HIDWORD(v31);
    *(_QWORD *)&v38[1] = v31;
    v38[0] = 4;
    LODWORD(v41[0]) = 1;
    *(_QWORD *)((char *)v41 + 4) = DWORD2(v31) | (unint64_t)(v6 << 32);
    *(_QWORD *)&v38[3] = v41[0];
    v38[5] = v6;
    v39 = v31;
    v40 = *(_QWORD *)((char *)v41 + 4);
    sub_2108D3DD4((uint64_t)&v24, 25, (uint64_t)v38, &v35);
    *(_QWORD *)&v24 = off_24CA7BAA0;
    if (!v33)
      goto LABEL_13;
    v8 = *v33;
    v7 = (std::__shared_weak_count *)v33[1];
    if (!v7)
      goto LABEL_11;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if (!v8)
        goto LABEL_13;
    }
    else
    {
LABEL_11:
      if (!v8)
      {
LABEL_13:
        v32 = &off_24CA7D7F8;
        v12 = v34;
        if (v34)
        {
          v13 = (unint64_t *)&v34->__shared_owners_;
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        v15 = DWORD2(v26);
        *(_DWORD *)(a1 + 8) = DWORD2(v24);
        v16 = *(unsigned int *)(a1 + 40);
        if ((_DWORD)v16 == -1)
        {
          if ((_DWORD)v15 == -1)
          {
            result = *(double *)&v27;
            v23 = v28;
            *(_OWORD *)(a1 + 48) = v27;
            *(_OWORD *)(a1 + 64) = v23;
            *(_QWORD *)(a1 + 80) = v29;
            return result;
          }
        }
        else if ((_DWORD)v15 == -1)
        {
          ((void (*)(__int128 *, uint64_t))off_24CA7C080[v16])(&v35, a1 + 16);
          *(_DWORD *)(a1 + 40) = -1;
          goto LABEL_26;
        }
        *(_QWORD *)&v35 = a1 + 16;
        ((void (*)(__int128 *))off_24CA7C0C0[v15])(&v35);
LABEL_26:
        v21 = DWORD2(v26);
        result = *(double *)&v27;
        v22 = v28;
        *(_OWORD *)(a1 + 48) = v27;
        *(_OWORD *)(a1 + 64) = v22;
        *(_QWORD *)(a1 + 80) = v29;
        *(_QWORD *)&v24 = off_24CA7B080;
        if ((_DWORD)v21 != -1)
          ((void (*)(__int128 *, __int128 *))off_24CA7C080[v21])(&v35, &v25);
        return result;
      }
    }
    sub_210912E7C((uint64_t)v33);
    goto LABEL_13;
  }
  (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v35, lpsrc, 25);
  v17 = v35;
  v19 = *(_OWORD *)(v35 + 16);
  v18 = *(_OWORD *)(v35 + 32);
  v24 = *(_OWORD *)v35;
  v25 = v19;
  v26 = v18;
  *(_QWORD *)&v35 = 0;
  MEMORY[0x212BCC6FC](v17);
  sub_2108EB7B4((uint64_t)&v35, a1);
  *(_QWORD *)&v30[0] = &v24;
  *((_QWORD *)&v30[0] + 1) = &v35;
  if (DWORD1(v25) == 1 && DWORD1(v36) == 1)
  {
    sub_2108FEBEC((size_t *)v30);
  }
  else
  {
    LOBYTE(v32) = 0;
    if (DWORD2(v24) && HIDWORD(v24) && (_DWORD)v25)
    {
      *(_QWORD *)v38 = &v32;
      sub_2108FF6CC((uint64_t)v38, (uint64_t)&v24, (uint64_t)&v35);
    }
  }
  return result;
}

void sub_2108EC2B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (a2)
    sub_2108ABF6C(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2108EC3C0(uint64_t a1)
{
  _QWORD v2[6];

  sub_2108EB7B4((uint64_t)v2, a1);
  return v2[0];
}

double sub_2108EC3E8@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 25
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 325, (uint64_t)"F == format", 11, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
  sub_2108EB7B4((uint64_t)v8, a1);
  v5 = (_OWORD *)operator new();
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

double sub_2108EC488@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 25
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 331, (uint64_t)"F == format", 11, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
  sub_2108EBA2C((uint64_t)v8, a1);
  v5 = (_OWORD *)operator new();
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

__int128 *sub_2108EC528()
{
  unsigned __int8 v0;
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  size_t v6;
  uint64_t *v7;
  _BYTE *v8;
  size_t v9;
  uint64_t *v10;
  _BYTE *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  void *v17[2];
  uint64_t v18;
  std::string __p;

  v0 = atomic_load((unsigned __int8 *)&qword_254A74758);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A74758))
    goto LABEL_2;
  v2 = atomic_load((unsigned __int8 *)&qword_254A74760);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A74760))
  {
    v3 = atomic_load((unsigned __int8 *)&qword_254A74768);
    if ((v3 & 1) != 0 || !__cxa_guard_acquire(&qword_254A74768))
    {
LABEL_13:
      if (byte_254A74D9F < 0)
      {
        sub_2108B314C(&xmmword_254A74D70, (void *)qword_254A74D88, unk_254A74D90);
      }
      else
      {
        xmmword_254A74D70 = *(_OWORD *)&qword_254A74D88;
        unk_254A74D80 = unk_254A74D98;
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A74D70, &dword_21089F000);
      __cxa_guard_release(&qword_254A74760);
      goto LABEL_7;
    }
    v4 = atomic_load((unsigned __int8 *)&qword_254A74770);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A74770))
    {
      sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cv::CVImageBuffer<img::Format::Bgra8u>]", &qword_254A74DA0);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A74DA0, &dword_21089F000);
      __cxa_guard_release(&qword_254A74770);
    }
    v5 = atomic_load((unsigned __int8 *)&qword_254A74778);
    if ((v5 & 1) != 0 || !__cxa_guard_acquire(&qword_254A74778))
    {
LABEL_49:
      v16 = atomic_load((unsigned __int8 *)&qword_254A74780);
      if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_254A74780))
      {
        if (byte_254A74DB8[23] < 0)
          sub_2108B314C(&__p, *(void **)byte_254A74DB8, *(unint64_t *)&byte_254A74DB8[8]);
        else
          __p = *(std::string *)byte_254A74DB8;
        sub_2109ECDA0(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_254A74DD0);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A74DD0, &dword_21089F000);
        __cxa_guard_release(&qword_254A74780);
      }
      if (byte_254A74DE7 < 0)
      {
        sub_2108B314C(v17, (void *)xmmword_254A74DD0, *((unint64_t *)&xmmword_254A74DD0 + 1));
      }
      else
      {
        *(_OWORD *)v17 = xmmword_254A74DD0;
        v18 = unk_254A74DE0;
      }
      sub_21090B5D0((char *)v17, (std::string *)&qword_254A74D88);
      if (SHIBYTE(v18) < 0)
        operator delete(v17[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A74D88, &dword_21089F000);
      __cxa_guard_release(&qword_254A74768);
      goto LABEL_13;
    }
    if (byte_254A74DB7 >= 0)
      v6 = byte_254A74DB7;
    else
      v6 = unk_254A74DA8;
    if (byte_254A74DB7 >= 0)
      v7 = &qword_254A74DA0;
    else
      v7 = (uint64_t *)qword_254A74DA0;
    v8 = (char *)v7 + v6;
    if ((uint64_t)v6 >= 1)
    {
      v9 = v6;
      v10 = v7;
      do
      {
        v11 = memchr(v10, 60, v9);
        if (!v11)
          break;
        if (*v11 == 60)
          goto LABEL_35;
        v10 = (uint64_t *)(v11 + 1);
        v9 = v8 - (_BYTE *)v10;
      }
      while (v8 - (_BYTE *)v10 > 0);
    }
    v11 = (char *)v7 + v6;
LABEL_35:
    v12 = v11 - (_BYTE *)v7;
    if (v11 == v8)
      v12 = -1;
    if (v6 >= v12)
      v6 = v12;
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      sub_2108A4B7C();
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v13 = (char *)operator new(v14 + 1);
      *(_QWORD *)&byte_254A74DB8[8] = v6;
      *(_QWORD *)&byte_254A74DB8[16] = v15 | 0x8000000000000000;
      *(_QWORD *)byte_254A74DB8 = v13;
    }
    else
    {
      v13 = byte_254A74DB8;
      byte_254A74DB8[23] = v6;
      if (!v6)
        goto LABEL_48;
    }
    memmove(v13, v7, v6);
LABEL_48:
    v13[v6] = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A74DB8, &dword_21089F000);
    __cxa_guard_release(&qword_254A74778);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_254A74D87 < 0)
  {
    sub_2108B314C(&xmmword_254A74D58, (void *)xmmword_254A74D70, *((unint64_t *)&xmmword_254A74D70 + 1));
  }
  else
  {
    xmmword_254A74D58 = xmmword_254A74D70;
    unk_254A74D68 = unk_254A74D80;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A74D58, &dword_21089F000);
  __cxa_guard_release(&qword_254A74758);
LABEL_2:
  if (byte_254A74D6F >= 0)
    return &xmmword_254A74D58;
  else
    return (__int128 *)xmmword_254A74D58;
}

void sub_2108EC97C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_254A74768);
  __cxa_guard_abort(&qword_254A74760);
  __cxa_guard_abort(&qword_254A74758);
  _Unwind_Resume(a1);
}

void sub_2108ECA18(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A74758);
  _Unwind_Resume(a1);
}

void sub_2108ECA30()
{
  sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 343, (uint64_t)&unk_210A02D2A, 0, (uint64_t)"Access notification must only be done in debug.", 47, (void (*)(void **))sub_2109EDDB4);
  abort();
}

void sub_2108ECA6C(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t (**v39)();
  __int128 v40;
  uint64_t (**v41)();
  __int128 v42;

  if (a2)
  {
    sub_2108D490C(&v39, a1);
    v4 = (_QWORD *)operator new();
    v42 = v40;
    v40 = 0uLL;
    v41 = &off_24CA7D7D8;
    *v4 = &off_24CA7BD90;
    sub_21090E048(v4 + 1, (uint64_t)&v41);
    if ((_QWORD)v42)
    {
      v6 = *(_QWORD *)v42;
      v5 = *(std::__shared_weak_count **)(v42 + 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
          if (!v6)
            goto LABEL_10;
          goto LABEL_9;
        }
      }
      if (v6)
LABEL_9:
        sub_210912F6C(v42);
    }
LABEL_10:
    v41 = &off_24CA7D7F8;
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
    if (!*((_QWORD *)&v42 + 1))
      goto LABEL_14;
    v11 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      *a3 = v4;
      v13 = (uint64_t *)v40;
      if (!(_QWORD)v40)
        goto LABEL_22;
    }
    else
    {
LABEL_14:
      *a3 = v4;
      v13 = (uint64_t *)v40;
      if (!(_QWORD)v40)
        goto LABEL_22;
    }
    v15 = *v13;
    v14 = (std::__shared_weak_count *)v13[1];
    if (v14)
    {
      v16 = (unint64_t *)&v14->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      do
        v18 = __ldaxr(v16);
      while (__stlxr(v18 - 1, v16));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
        if (!v15)
          goto LABEL_22;
        goto LABEL_21;
      }
    }
    if (v15)
LABEL_21:
      sub_210912F6C(v40);
LABEL_22:
    v39 = &off_24CA7D7F8;
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
    if (!*((_QWORD *)&v40 + 1))
      return;
    v20 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (v21)
      return;
LABEL_51:
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    return;
  }
  sub_2108D4C78(&v39, a1);
  v22 = (_QWORD *)operator new();
  v42 = v40;
  v40 = 0uLL;
  v41 = &off_24CA7D7B8;
  *v22 = &off_24CA7BD70;
  sub_21090DD20(v22 + 1, (uint64_t)&v41);
  if ((_QWORD)v42)
  {
    v24 = *(_QWORD *)v42;
    v23 = *(std::__shared_weak_count **)(v42 + 8);
    if (v23)
    {
      v25 = (unint64_t *)&v23->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
      do
        v27 = __ldaxr(v25);
      while (__stlxr(v27 - 1, v25));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
        if (!v24)
          goto LABEL_35;
        goto LABEL_34;
      }
    }
    if (v24)
LABEL_34:
      sub_210912E7C(v42);
  }
LABEL_35:
  v41 = &off_24CA7D7F8;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
  if (!*((_QWORD *)&v42 + 1))
    goto LABEL_39;
  v29 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
    *a3 = v22;
    v31 = (uint64_t *)v40;
    if (!(_QWORD)v40)
      goto LABEL_47;
  }
  else
  {
LABEL_39:
    *a3 = v22;
    v31 = (uint64_t *)v40;
    if (!(_QWORD)v40)
      goto LABEL_47;
  }
  v33 = *v31;
  v32 = (std::__shared_weak_count *)v31[1];
  if (v32)
  {
    v34 = (unint64_t *)&v32->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
    do
      v36 = __ldaxr(v34);
    while (__stlxr(v36 - 1, v34));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
      if (!v33)
        goto LABEL_47;
      goto LABEL_46;
    }
  }
  if (v33)
LABEL_46:
    sub_210912E7C(v40);
LABEL_47:
  v39 = &off_24CA7D7F8;
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v37 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
      goto LABEL_51;
  }
}

void sub_2108ECE08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_21090DE2C(&a12);
  MEMORY[0x212BCC6FC](v12, 0xA1C40711E6FFCLL);
  sub_21090DE2C(&a9);
  _Unwind_Resume(a1);
}

void sub_2108ECE3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21090DE2C(&a9);
  _Unwind_Resume(a1);
}

void sub_2108ECE50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_21090E154(&a12);
  MEMORY[0x212BCC6FC](v12, 0xA1C40711E6FFCLL);
  sub_21090E154(&a9);
  _Unwind_Resume(a1);
}

void sub_2108ECE84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21090E154(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2108ECE98()
{
  return 65792;
}

void sub_2108ECEA4(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_2108D490C(a2, a1);
}

uint64_t sub_2108ECEB0(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24CA7B3E0;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24CA7C080[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_2108ECF14(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if (sub_2108DB110(a2))
  {
    if (*(_DWORD *)(a2 + 76))
      v4 = *(_DWORD *)(a2 + 72) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 72);
    if (v4)
      v5 = 0;
    LODWORD(v34) = 4;
    *(_QWORD *)((char *)&v34 + 4) = v5;
    v6 = 4 * ((_DWORD)v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5))
      v7 = v7;
    else
      v7 = 0;
    v8 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
    v9 = __PAIR64__(DWORD1(v34), 4);
    LODWORD(v34) = 1;
    *(_QWORD *)((char *)&v34 + 4) = v8;
    v10 = v34;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(_QWORD *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(_QWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24CA7D7F8;
        *((_QWORD *)&v34 + 1) = v12;
        v35 = v11;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        break;
      case 1:
        v20 = *(_QWORD *)(a2 + 24);
        v19 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24CA7D7F8;
        *((_QWORD *)&v34 + 1) = v20;
        v35 = v19;
        if (v19)
        {
          v21 = (unint64_t *)&v19->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        break;
      case 2:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24CA7D7F8;
        *((_QWORD *)&v34 + 1) = v16;
        v35 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 3:
        v23 = *(std::__shared_weak_count **)(a2 + 24);
        if (v23 && (v24 = std::__shared_weak_count::lock(v23)) != 0)
        {
          v25 = v24;
          v26 = *(_QWORD *)(a2 + 16);
          *(_QWORD *)&v34 = &off_24CA7D7F8;
          if (v26)
          {
            *((_QWORD *)&v34 + 1) = v26;
            v35 = v24;
            v27 = (unint64_t *)&v24->__shared_owners_;
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          else
          {
            *((_QWORD *)&v34 + 1) = 0;
            v35 = 0;
          }
          v29 = (unint64_t *)&v24->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        else
        {
          *((_QWORD *)&v34 + 1) = 0;
          v35 = 0;
          *(_QWORD *)&v34 = &off_24CA7D7F8;
        }
        break;
      default:
        sub_2108B9060();
    }
    sub_2108D728C(a1, (uint64_t)&v34);
    *(_QWORD *)&v34 = &off_24CA7D7F8;
    v31 = v35;
    if (v35)
    {
      v32 = (unint64_t *)&v35->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
}

void sub_2108ED178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21090E6B4(&a9);
  _Unwind_Resume(a1);
}

void sub_2108ED18C(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t (**v34)();
  uint64_t v35;
  std::__shared_weak_count *v36;
  _BYTE v37[24];
  __int128 v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  if (sub_2108DB110(a2))
  {
    if (*(_DWORD *)(a2 + 76))
      v4 = *(_DWORD *)(a2 + 72) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 72);
    if (v4)
      v5 = 0;
    *(_DWORD *)v37 = 4;
    *(_QWORD *)&v37[4] = v5;
    v6 = 4 * ((_DWORD)v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5))
      v7 = v7;
    else
      v7 = 0;
    v8 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
    v9 = __PAIR64__(*(unsigned int *)&v37[4], 4);
    *(_DWORD *)v37 = 1;
    *(_QWORD *)&v37[4] = v8;
    v10 = *(_QWORD *)v37;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(_QWORD *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(_QWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        v34 = &off_24CA7D7F8;
        v35 = v12;
        v36 = v11;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        break;
      case 1:
        v20 = *(_QWORD *)(a2 + 24);
        v19 = *(std::__shared_weak_count **)(a2 + 32);
        v34 = &off_24CA7D7F8;
        v35 = v20;
        v36 = v19;
        if (v19)
        {
          v21 = (unint64_t *)&v19->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        break;
      case 2:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        v34 = &off_24CA7D7F8;
        v35 = v16;
        v36 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 3:
        v23 = *(std::__shared_weak_count **)(a2 + 24);
        if (v23 && (v24 = std::__shared_weak_count::lock(v23)) != 0)
        {
          v25 = v24;
          v26 = *(_QWORD *)(a2 + 16);
          v34 = &off_24CA7D7F8;
          if (v26)
          {
            v35 = v26;
            v36 = v24;
            v27 = (unint64_t *)&v24->__shared_owners_;
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          else
          {
            v35 = 0;
            v36 = 0;
          }
          v29 = (unint64_t *)&v24->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        else
        {
          v35 = 0;
          v36 = 0;
          v34 = &off_24CA7D7F8;
        }
        break;
      default:
        sub_2108B9060();
    }
    sub_2108D728C((uint64_t)v37, (uint64_t)&v34);
    *(_QWORD *)a1 = *(_QWORD *)v37;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)&v37[8];
    *(_OWORD *)(a1 + 24) = v38;
    *(_QWORD *)(a1 + 40) = v39;
    v34 = &off_24CA7D7F8;
    v31 = v36;
    if (v36)
    {
      v32 = (unint64_t *)&v36->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
}

void sub_2108ED410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21090E6B4(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2108ED424()
{
  return 31;
}

_UNKNOWN **sub_2108ED42C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A745A0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A745A0))
    return &off_253ED6E40;
  __cxa_guard_release(&qword_254A745A0);
  return &off_253ED6E40;
}

void sub_2108ED480(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _OWORD v15[3];
  _BYTE v16[32];
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t (**v20)();
  uint64_t *v21;
  std::__shared_weak_count *v22;
  _OWORD v23[3];
  _DWORD v24[3];
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[3];

  v29[2] = *MEMORY[0x24BDAC8D0];
  sub_2108DB65C(&v20, a1);
  sub_2108ED18C((uint64_t)v16, a1);
  sub_2108ED18C((uint64_t)v15, a1);
  v4 = (_QWORD *)operator new();
  v5 = v4;
  v23[0] = v15[0];
  v23[1] = v15[1];
  v23[2] = v15[2];
  *v4 = off_24CA7BB30;
  if (v19 <= 0x10)
    v6 = 16;
  else
    v6 = v19;
  *(_QWORD *)&v24[1] = v17;
  v24[0] = 4;
  LODWORD(v29[0]) = 1;
  *(_QWORD *)((char *)v29 + 4) = v18 | (unint64_t)(v6 << 32);
  v25 = v29[0];
  v26 = v6;
  v27 = v17;
  v28 = *(_QWORD *)((char *)v29 + 4);
  sub_2108DACE4((uint64_t)v4, (uint64_t)v24, v23);
  *v5 = off_24CA7BB30;
  *a2 = v5;
  if (v21)
  {
    v8 = *v21;
    v7 = (std::__shared_weak_count *)v21[1];
    if (!v7)
      goto LABEL_10;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (v11)
    {
LABEL_10:
      if (!v8)
        goto LABEL_12;
      goto LABEL_11;
    }
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v8)
LABEL_11:
      sub_210912E7C((uint64_t)v21);
  }
LABEL_12:
  v20 = &off_24CA7D7F8;
  v12 = v22;
  if (v22)
  {
    v13 = (unint64_t *)&v22->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_2108ED64C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a2)
    sub_2108ABF6C(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2108ED6A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_21090DE2C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2108ED6BC(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_2108DB65C(a2, a1);
}

double sub_2108ED6C8(uint64_t a1, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double result;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  _OWORD v34[2];
  __int128 v35;
  uint64_t (**v36)();
  uint64_t *v37;
  std::__shared_weak_count *v38;
  _OWORD v39[3];
  _DWORD v40[3];
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[3];

  v45[2] = *MEMORY[0x24BDAC8D0];
  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24CA84C98, (const struct __class_type_info *)&unk_24CA7C010, 0);
  if (!v4)
  {
    (*(void (**)(_OWORD *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(v39, lpsrc, 31);
    v17 = *(_QWORD *)&v39[0];
    v19 = *(_OWORD *)(*(_QWORD *)&v39[0] + 16);
    v18 = *(_OWORD *)(*(_QWORD *)&v39[0] + 32);
    v28 = **(_OWORD **)&v39[0];
    v29 = v19;
    v30 = v18;
    *(_QWORD *)&v39[0] = 0;
    MEMORY[0x212BCC6FC](v17, 0xC400A2AC0F1, v20, v21, v22, v23);
    sub_2108ECF14((uint64_t)v39, a1);
    *(_QWORD *)&v34[0] = &v28;
    *((_QWORD *)&v34[0] + 1) = v39;
    return sub_210902AF8(v34);
  }
  v5 = (uint64_t)v4;
  sub_2108DB65C(&v36, (uint64_t)v4);
  sub_2108ED18C((uint64_t)v34, v5);
  v39[0] = v34[0];
  v39[1] = v34[1];
  v39[2] = v35;
  *(_QWORD *)&v28 = off_24CA7BB30;
  if (HIDWORD(v35) <= 0x10)
    v6 = 16;
  else
    v6 = HIDWORD(v35);
  *(_QWORD *)&v40[1] = v35;
  v40[0] = 4;
  LODWORD(v45[0]) = 1;
  *(_QWORD *)((char *)v45 + 4) = DWORD2(v35) | (unint64_t)(v6 << 32);
  v41 = v45[0];
  v42 = v6;
  v43 = v35;
  v44 = *(_QWORD *)((char *)v45 + 4);
  sub_2108DACE4((uint64_t)&v28, (uint64_t)v40, v39);
  *(_QWORD *)&v28 = off_24CA7BB30;
  if (v37)
  {
    v8 = *v37;
    v7 = (std::__shared_weak_count *)v37[1];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          goto LABEL_13;
        goto LABEL_12;
      }
    }
    if (v8)
LABEL_12:
      sub_210912E7C((uint64_t)v37);
  }
LABEL_13:
  v36 = &off_24CA7D7F8;
  v12 = v38;
  if (v38)
  {
    v13 = (unint64_t *)&v38->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = DWORD2(v30);
  *(_DWORD *)(a1 + 8) = DWORD2(v28);
  v16 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v16 == -1)
  {
    if ((_DWORD)v15 == -1)
    {
      result = *(double *)&v31;
      v27 = v32;
      *(_OWORD *)(a1 + 48) = v31;
      *(_OWORD *)(a1 + 64) = v27;
      *(_QWORD *)(a1 + 80) = v33;
      return result;
    }
  }
  else if ((_DWORD)v15 == -1)
  {
    ((void (*)(_OWORD *, uint64_t))off_24CA7C080[v16])(v39, a1 + 16);
    *(_DWORD *)(a1 + 40) = -1;
    goto LABEL_24;
  }
  *(_QWORD *)&v39[0] = a1 + 16;
  ((void (*)(_OWORD *))off_24CA7C0C0[v15])(v39);
LABEL_24:
  v25 = DWORD2(v30);
  result = *(double *)&v31;
  v26 = v32;
  *(_OWORD *)(a1 + 48) = v31;
  *(_OWORD *)(a1 + 64) = v26;
  *(_QWORD *)(a1 + 80) = v33;
  *(_QWORD *)&v28 = off_24CA7B3E0;
  if ((_DWORD)v25 != -1)
    ((void (*)(_OWORD *, __int128 *))off_24CA7C080[v25])(v39, &v29);
  return result;
}

void sub_2108ED9CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (a2)
    sub_2108ABF6C(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2108EDADC(uint64_t a1)
{
  _QWORD v2[6];

  sub_2108ECF14((uint64_t)v2, a1);
  return v2[0];
}

double sub_2108EDB04@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 31
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 325, (uint64_t)"F == format", 11, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
  sub_2108ECF14((uint64_t)v8, a1);
  v5 = (_OWORD *)operator new();
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

double sub_2108EDBA4@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 31
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 331, (uint64_t)"F == format", 11, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
  sub_2108ED18C((uint64_t)v8, a1);
  v5 = (_OWORD *)operator new();
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

__int128 *sub_2108EDC44()
{
  unsigned __int8 v0;
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  size_t v6;
  uint64_t *v7;
  _BYTE *v8;
  size_t v9;
  uint64_t *v10;
  _BYTE *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  void *v17[2];
  uint64_t v18;
  std::string __p;

  v0 = atomic_load((unsigned __int8 *)&qword_254A74788);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A74788))
    goto LABEL_2;
  v2 = atomic_load((unsigned __int8 *)&qword_254A74790);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A74790))
  {
    v3 = atomic_load((unsigned __int8 *)&qword_254A74798);
    if ((v3 & 1) != 0 || !__cxa_guard_acquire(&qword_254A74798))
    {
LABEL_13:
      if (byte_254A74E2F < 0)
      {
        sub_2108B314C(&xmmword_254A74E00, (void *)qword_254A74E18, unk_254A74E20);
      }
      else
      {
        xmmword_254A74E00 = *(_OWORD *)&qword_254A74E18;
        unk_254A74E10 = unk_254A74E28;
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A74E00, &dword_21089F000);
      __cxa_guard_release(&qword_254A74790);
      goto LABEL_7;
    }
    v4 = atomic_load((unsigned __int8 *)&qword_254A747A0);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A747A0))
    {
      sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cv::CVImageBuffer<img::Format::Rgba16f>]", &qword_254A74E30);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A74E30, &dword_21089F000);
      __cxa_guard_release(&qword_254A747A0);
    }
    v5 = atomic_load((unsigned __int8 *)&qword_254A747A8);
    if ((v5 & 1) != 0 || !__cxa_guard_acquire(&qword_254A747A8))
    {
LABEL_49:
      v16 = atomic_load((unsigned __int8 *)&qword_254A747B0);
      if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_254A747B0))
      {
        if (byte_254A74E48[23] < 0)
          sub_2108B314C(&__p, *(void **)byte_254A74E48, *(unint64_t *)&byte_254A74E48[8]);
        else
          __p = *(std::string *)byte_254A74E48;
        sub_2109ECDA0(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_254A74E60);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A74E60, &dword_21089F000);
        __cxa_guard_release(&qword_254A747B0);
      }
      if (byte_254A74E77 < 0)
      {
        sub_2108B314C(v17, (void *)xmmword_254A74E60, *((unint64_t *)&xmmword_254A74E60 + 1));
      }
      else
      {
        *(_OWORD *)v17 = xmmword_254A74E60;
        v18 = unk_254A74E70;
      }
      sub_21090B6F8((char *)v17, (std::string *)&qword_254A74E18);
      if (SHIBYTE(v18) < 0)
        operator delete(v17[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A74E18, &dword_21089F000);
      __cxa_guard_release(&qword_254A74798);
      goto LABEL_13;
    }
    if (byte_254A74E47 >= 0)
      v6 = byte_254A74E47;
    else
      v6 = unk_254A74E38;
    if (byte_254A74E47 >= 0)
      v7 = &qword_254A74E30;
    else
      v7 = (uint64_t *)qword_254A74E30;
    v8 = (char *)v7 + v6;
    if ((uint64_t)v6 >= 1)
    {
      v9 = v6;
      v10 = v7;
      do
      {
        v11 = memchr(v10, 60, v9);
        if (!v11)
          break;
        if (*v11 == 60)
          goto LABEL_35;
        v10 = (uint64_t *)(v11 + 1);
        v9 = v8 - (_BYTE *)v10;
      }
      while (v8 - (_BYTE *)v10 > 0);
    }
    v11 = (char *)v7 + v6;
LABEL_35:
    v12 = v11 - (_BYTE *)v7;
    if (v11 == v8)
      v12 = -1;
    if (v6 >= v12)
      v6 = v12;
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      sub_2108A4B7C();
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v13 = (char *)operator new(v14 + 1);
      *(_QWORD *)&byte_254A74E48[8] = v6;
      *(_QWORD *)&byte_254A74E48[16] = v15 | 0x8000000000000000;
      *(_QWORD *)byte_254A74E48 = v13;
    }
    else
    {
      v13 = byte_254A74E48;
      byte_254A74E48[23] = v6;
      if (!v6)
        goto LABEL_48;
    }
    memmove(v13, v7, v6);
LABEL_48:
    v13[v6] = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A74E48, &dword_21089F000);
    __cxa_guard_release(&qword_254A747A8);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_254A74E17 < 0)
  {
    sub_2108B314C(&xmmword_254A74DE8, (void *)xmmword_254A74E00, *((unint64_t *)&xmmword_254A74E00 + 1));
  }
  else
  {
    xmmword_254A74DE8 = xmmword_254A74E00;
    unk_254A74DF8 = unk_254A74E10;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A74DE8, &dword_21089F000);
  __cxa_guard_release(&qword_254A74788);
LABEL_2:
  if (byte_254A74DFF >= 0)
    return &xmmword_254A74DE8;
  else
    return (__int128 *)xmmword_254A74DE8;
}

void sub_2108EE098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_254A74798);
  __cxa_guard_abort(&qword_254A74790);
  __cxa_guard_abort(&qword_254A74788);
  _Unwind_Resume(a1);
}

void sub_2108EE134(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A74788);
  _Unwind_Resume(a1);
}

void sub_2108EE14C()
{
  sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 343, (uint64_t)&unk_210A02D2A, 0, (uint64_t)"Access notification must only be done in debug.", 47, (void (*)(void **))sub_2109EDDB4);
  abort();
}

void sub_2108EE188(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t (**v39)();
  __int128 v40;
  uint64_t (**v41)();
  __int128 v42;

  if (a2)
  {
    sub_2108DB2F0(&v39, a1);
    v4 = (_QWORD *)operator new();
    v42 = v40;
    v40 = 0uLL;
    v41 = &off_24CA7D7D8;
    *v4 = &off_24CA7BD90;
    sub_21090E048(v4 + 1, (uint64_t)&v41);
    if ((_QWORD)v42)
    {
      v6 = *(_QWORD *)v42;
      v5 = *(std::__shared_weak_count **)(v42 + 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
          if (!v6)
            goto LABEL_10;
          goto LABEL_9;
        }
      }
      if (v6)
LABEL_9:
        sub_210912F6C(v42);
    }
LABEL_10:
    v41 = &off_24CA7D7F8;
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
    if (!*((_QWORD *)&v42 + 1))
      goto LABEL_14;
    v11 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      *a3 = v4;
      v13 = (uint64_t *)v40;
      if (!(_QWORD)v40)
        goto LABEL_22;
    }
    else
    {
LABEL_14:
      *a3 = v4;
      v13 = (uint64_t *)v40;
      if (!(_QWORD)v40)
        goto LABEL_22;
    }
    v15 = *v13;
    v14 = (std::__shared_weak_count *)v13[1];
    if (v14)
    {
      v16 = (unint64_t *)&v14->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      do
        v18 = __ldaxr(v16);
      while (__stlxr(v18 - 1, v16));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
        if (!v15)
          goto LABEL_22;
        goto LABEL_21;
      }
    }
    if (v15)
LABEL_21:
      sub_210912F6C(v40);
LABEL_22:
    v39 = &off_24CA7D7F8;
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
    if (!*((_QWORD *)&v40 + 1))
      return;
    v20 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (v21)
      return;
LABEL_51:
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    return;
  }
  sub_2108DB65C(&v39, a1);
  v22 = (_QWORD *)operator new();
  v42 = v40;
  v40 = 0uLL;
  v41 = &off_24CA7D7B8;
  *v22 = &off_24CA7BD70;
  sub_21090DD20(v22 + 1, (uint64_t)&v41);
  if ((_QWORD)v42)
  {
    v24 = *(_QWORD *)v42;
    v23 = *(std::__shared_weak_count **)(v42 + 8);
    if (v23)
    {
      v25 = (unint64_t *)&v23->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
      do
        v27 = __ldaxr(v25);
      while (__stlxr(v27 - 1, v25));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
        if (!v24)
          goto LABEL_35;
        goto LABEL_34;
      }
    }
    if (v24)
LABEL_34:
      sub_210912E7C(v42);
  }
LABEL_35:
  v41 = &off_24CA7D7F8;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
  if (!*((_QWORD *)&v42 + 1))
    goto LABEL_39;
  v29 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
    *a3 = v22;
    v31 = (uint64_t *)v40;
    if (!(_QWORD)v40)
      goto LABEL_47;
  }
  else
  {
LABEL_39:
    *a3 = v22;
    v31 = (uint64_t *)v40;
    if (!(_QWORD)v40)
      goto LABEL_47;
  }
  v33 = *v31;
  v32 = (std::__shared_weak_count *)v31[1];
  if (v32)
  {
    v34 = (unint64_t *)&v32->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
    do
      v36 = __ldaxr(v34);
    while (__stlxr(v36 - 1, v34));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
      if (!v33)
        goto LABEL_47;
      goto LABEL_46;
    }
  }
  if (v33)
LABEL_46:
    sub_210912E7C(v40);
LABEL_47:
  v39 = &off_24CA7D7F8;
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v37 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
      goto LABEL_51;
  }
}

void sub_2108EE524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_21090DE2C(&a12);
  MEMORY[0x212BCC6FC](v12, 0xA1C40711E6FFCLL);
  sub_21090DE2C(&a9);
  _Unwind_Resume(a1);
}

void sub_2108EE558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21090DE2C(&a9);
  _Unwind_Resume(a1);
}

void sub_2108EE56C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_21090E154(&a12);
  MEMORY[0x212BCC6FC](v12, 0xA1C40711E6FFCLL);
  sub_21090E154(&a9);
  _Unwind_Resume(a1);
}

void sub_2108EE5A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21090E154(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2108EE5B4()
{
  return 65792;
}

void sub_2108EE5C0(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_2108DB2F0(a2, a1);
}

uint64_t sub_2108EE5CC(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24CA7B590;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24CA7C080[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_2108EE630(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if (sub_2108DE3AC(a2))
  {
    if (*(_DWORD *)(a2 + 76))
      v4 = *(_DWORD *)(a2 + 72) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 72);
    if (v4)
      v5 = 0;
    LODWORD(v34) = 4;
    *(_QWORD *)((char *)&v34 + 4) = v5;
    v6 = 4 * ((_DWORD)v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5))
      v7 = v7;
    else
      v7 = 0;
    v8 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
    v9 = __PAIR64__(DWORD1(v34), 4);
    LODWORD(v34) = 1;
    *(_QWORD *)((char *)&v34 + 4) = v8;
    v10 = v34;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(_QWORD *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(_QWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24CA7D7F8;
        *((_QWORD *)&v34 + 1) = v12;
        v35 = v11;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        break;
      case 1:
        v20 = *(_QWORD *)(a2 + 24);
        v19 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24CA7D7F8;
        *((_QWORD *)&v34 + 1) = v20;
        v35 = v19;
        if (v19)
        {
          v21 = (unint64_t *)&v19->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        break;
      case 2:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24CA7D7F8;
        *((_QWORD *)&v34 + 1) = v16;
        v35 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 3:
        v23 = *(std::__shared_weak_count **)(a2 + 24);
        if (v23 && (v24 = std::__shared_weak_count::lock(v23)) != 0)
        {
          v25 = v24;
          v26 = *(_QWORD *)(a2 + 16);
          *(_QWORD *)&v34 = &off_24CA7D7F8;
          if (v26)
          {
            *((_QWORD *)&v34 + 1) = v26;
            v35 = v24;
            v27 = (unint64_t *)&v24->__shared_owners_;
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          else
          {
            *((_QWORD *)&v34 + 1) = 0;
            v35 = 0;
          }
          v29 = (unint64_t *)&v24->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        else
        {
          *((_QWORD *)&v34 + 1) = 0;
          v35 = 0;
          *(_QWORD *)&v34 = &off_24CA7D7F8;
        }
        break;
      default:
        sub_2108B9060();
    }
    sub_2108DDB98(a1, (uint64_t)&v34);
    *(_QWORD *)&v34 = &off_24CA7D7F8;
    v31 = v35;
    if (v35)
    {
      v32 = (unint64_t *)&v35->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
}

void sub_2108EE894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21090E6B4(&a9);
  _Unwind_Resume(a1);
}

void sub_2108EE8A8(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t (**v34)();
  uint64_t v35;
  std::__shared_weak_count *v36;
  _BYTE v37[24];
  __int128 v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  if (sub_2108DE3AC(a2))
  {
    if (*(_DWORD *)(a2 + 76))
      v4 = *(_DWORD *)(a2 + 72) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 72);
    if (v4)
      v5 = 0;
    *(_DWORD *)v37 = 4;
    *(_QWORD *)&v37[4] = v5;
    v6 = 4 * ((_DWORD)v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5))
      v7 = v7;
    else
      v7 = 0;
    v8 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
    v9 = __PAIR64__(*(unsigned int *)&v37[4], 4);
    *(_DWORD *)v37 = 1;
    *(_QWORD *)&v37[4] = v8;
    v10 = *(_QWORD *)v37;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(_QWORD *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(_QWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        v34 = &off_24CA7D7F8;
        v35 = v12;
        v36 = v11;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        break;
      case 1:
        v20 = *(_QWORD *)(a2 + 24);
        v19 = *(std::__shared_weak_count **)(a2 + 32);
        v34 = &off_24CA7D7F8;
        v35 = v20;
        v36 = v19;
        if (v19)
        {
          v21 = (unint64_t *)&v19->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        break;
      case 2:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        v34 = &off_24CA7D7F8;
        v35 = v16;
        v36 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 3:
        v23 = *(std::__shared_weak_count **)(a2 + 24);
        if (v23 && (v24 = std::__shared_weak_count::lock(v23)) != 0)
        {
          v25 = v24;
          v26 = *(_QWORD *)(a2 + 16);
          v34 = &off_24CA7D7F8;
          if (v26)
          {
            v35 = v26;
            v36 = v24;
            v27 = (unint64_t *)&v24->__shared_owners_;
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          else
          {
            v35 = 0;
            v36 = 0;
          }
          v29 = (unint64_t *)&v24->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        else
        {
          v35 = 0;
          v36 = 0;
          v34 = &off_24CA7D7F8;
        }
        break;
      default:
        sub_2108B9060();
    }
    sub_2108DDB98((uint64_t)v37, (uint64_t)&v34);
    *(_QWORD *)a1 = *(_QWORD *)v37;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)&v37[8];
    *(_OWORD *)(a1 + 24) = v38;
    *(_QWORD *)(a1 + 40) = v39;
    v34 = &off_24CA7D7F8;
    v31 = v36;
    if (v36)
    {
      v32 = (unint64_t *)&v36->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
}

void sub_2108EEB2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21090E6B4(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2108EEB40()
{
  return 32;
}

_UNKNOWN **sub_2108EEB48()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A745A0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A745A0))
    return &off_253ED6E40;
  __cxa_guard_release(&qword_254A745A0);
  return &off_253ED6E40;
}

void sub_2108EEB9C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _OWORD v15[3];
  _BYTE v16[32];
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t (**v20)();
  uint64_t *v21;
  std::__shared_weak_count *v22;
  __int128 v23[3];
  _DWORD v24[3];
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[3];

  v29[2] = *MEMORY[0x24BDAC8D0];
  sub_2108DE8F8(&v20, a1);
  sub_2108EE8A8((uint64_t)v16, a1);
  sub_2108EE8A8((uint64_t)v15, a1);
  v4 = (_QWORD *)operator new();
  v5 = v4;
  v23[0] = v15[0];
  v23[1] = v15[1];
  v23[2] = v15[2];
  *v4 = off_24CA7BBC0;
  if (v19 <= 8)
    v6 = 8;
  else
    v6 = v19;
  *(_QWORD *)&v24[1] = v17;
  v24[0] = 4;
  LODWORD(v29[0]) = 1;
  *(_QWORD *)((char *)v29 + 4) = v18 | (unint64_t)(v6 << 32);
  v25 = v29[0];
  v26 = v6;
  v27 = v17;
  v28 = *(_QWORD *)((char *)v29 + 4);
  sub_2108DDF30((uint64_t)v4, (uint64_t)v24, v23);
  *v5 = off_24CA7BBC0;
  *a2 = v5;
  if (v21)
  {
    v8 = *v21;
    v7 = (std::__shared_weak_count *)v21[1];
    if (!v7)
      goto LABEL_10;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (v11)
    {
LABEL_10:
      if (!v8)
        goto LABEL_12;
      goto LABEL_11;
    }
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v8)
LABEL_11:
      sub_210912E7C((uint64_t)v21);
  }
LABEL_12:
  v20 = &off_24CA7D7F8;
  v12 = v22;
  if (v22)
  {
    v13 = (unint64_t *)&v22->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_2108EED68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a2)
    sub_2108ABF6C(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2108EEDC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_21090DE2C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2108EEDD8(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_2108DE8F8(a2, a1);
}

double sub_2108EEDE4(uint64_t a1, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  double result;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  _OWORD v30[2];
  __int128 v31;
  uint64_t (**v32)();
  uint64_t *v33;
  std::__shared_weak_count *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _DWORD v38[6];
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[3];

  v41[2] = *MEMORY[0x24BDAC8D0];
  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24CA84C98, (const struct __class_type_info *)&unk_24CA7C028, 0);
  if (v4)
  {
    v5 = (uint64_t)v4;
    sub_2108DE8F8(&v32, (uint64_t)v4);
    sub_2108EE8A8((uint64_t)v30, v5);
    v35 = v30[0];
    v36 = v30[1];
    v37 = v31;
    *(_QWORD *)&v24 = off_24CA7BBC0;
    if (HIDWORD(v31) <= 8)
      v6 = 8;
    else
      v6 = HIDWORD(v31);
    *(_QWORD *)&v38[1] = v31;
    v38[0] = 4;
    LODWORD(v41[0]) = 1;
    *(_QWORD *)((char *)v41 + 4) = DWORD2(v31) | (unint64_t)(v6 << 32);
    *(_QWORD *)&v38[3] = v41[0];
    v38[5] = v6;
    v39 = v31;
    v40 = *(_QWORD *)((char *)v41 + 4);
    sub_2108DDF30((uint64_t)&v24, (uint64_t)v38, &v35);
    *(_QWORD *)&v24 = off_24CA7BBC0;
    if (!v33)
      goto LABEL_13;
    v8 = *v33;
    v7 = (std::__shared_weak_count *)v33[1];
    if (!v7)
      goto LABEL_11;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if (!v8)
        goto LABEL_13;
    }
    else
    {
LABEL_11:
      if (!v8)
      {
LABEL_13:
        v32 = &off_24CA7D7F8;
        v12 = v34;
        if (v34)
        {
          v13 = (unint64_t *)&v34->__shared_owners_;
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        v15 = DWORD2(v26);
        *(_DWORD *)(a1 + 8) = DWORD2(v24);
        v16 = *(unsigned int *)(a1 + 40);
        if ((_DWORD)v16 == -1)
        {
          if ((_DWORD)v15 == -1)
          {
            result = *(double *)&v27;
            v23 = v28;
            *(_OWORD *)(a1 + 48) = v27;
            *(_OWORD *)(a1 + 64) = v23;
            *(_QWORD *)(a1 + 80) = v29;
            return result;
          }
        }
        else if ((_DWORD)v15 == -1)
        {
          ((void (*)(__int128 *, uint64_t))off_24CA7C080[v16])(&v35, a1 + 16);
          *(_DWORD *)(a1 + 40) = -1;
          goto LABEL_26;
        }
        *(_QWORD *)&v35 = a1 + 16;
        ((void (*)(__int128 *))off_24CA7C0C0[v15])(&v35);
LABEL_26:
        v21 = DWORD2(v26);
        result = *(double *)&v27;
        v22 = v28;
        *(_OWORD *)(a1 + 48) = v27;
        *(_OWORD *)(a1 + 64) = v22;
        *(_QWORD *)(a1 + 80) = v29;
        *(_QWORD *)&v24 = off_24CA7B590;
        if ((_DWORD)v21 != -1)
          ((void (*)(__int128 *, __int128 *))off_24CA7C080[v21])(&v35, &v25);
        return result;
      }
    }
    sub_210912E7C((uint64_t)v33);
    goto LABEL_13;
  }
  (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v35, lpsrc, 32);
  v17 = v35;
  v19 = *(_OWORD *)(v35 + 16);
  v18 = *(_OWORD *)(v35 + 32);
  v24 = *(_OWORD *)v35;
  v25 = v19;
  v26 = v18;
  *(_QWORD *)&v35 = 0;
  MEMORY[0x212BCC6FC](v17);
  sub_2108EE630((uint64_t)&v35, a1);
  *(_QWORD *)&v30[0] = &v24;
  *((_QWORD *)&v30[0] + 1) = &v35;
  if (DWORD1(v25) == 1 && DWORD1(v36) == 1)
  {
    sub_210903DA4((uint64_t *)v30);
  }
  else
  {
    LOBYTE(v32) = 0;
    if (DWORD2(v24) && HIDWORD(v24) && (_DWORD)v25)
    {
      *(_QWORD *)v38 = &v32;
      *(float *)&result = sub_210904698((uint64_t)v38, (uint64_t)&v24, (uint64_t)&v35);
    }
  }
  return result;
}

void sub_2108EF124(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (a2)
    sub_2108ABF6C(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2108EF234(uint64_t a1)
{
  _QWORD v2[6];

  sub_2108EE630((uint64_t)v2, a1);
  return v2[0];
}

double sub_2108EF25C@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 32
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 325, (uint64_t)"F == format", 11, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
  sub_2108EE630((uint64_t)v8, a1);
  v5 = (_OWORD *)operator new();
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

double sub_2108EF2FC@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 32
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 331, (uint64_t)"F == format", 11, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
  sub_2108EE8A8((uint64_t)v8, a1);
  v5 = (_OWORD *)operator new();
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

__int128 *sub_2108EF39C()
{
  unsigned __int8 v0;
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  size_t v6;
  uint64_t *v7;
  _BYTE *v8;
  size_t v9;
  uint64_t *v10;
  _BYTE *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  void *v17[2];
  uint64_t v18;
  std::string __p;

  v0 = atomic_load((unsigned __int8 *)&qword_254A747B8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A747B8))
    goto LABEL_2;
  v2 = atomic_load((unsigned __int8 *)&qword_254A747C0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A747C0))
  {
    v3 = atomic_load((unsigned __int8 *)&qword_254A747C8);
    if ((v3 & 1) != 0 || !__cxa_guard_acquire(&qword_254A747C8))
    {
LABEL_13:
      if (byte_254A74EBF < 0)
      {
        sub_2108B314C(&xmmword_254A74E90, (void *)qword_254A74EA8, unk_254A74EB0);
      }
      else
      {
        xmmword_254A74E90 = *(_OWORD *)&qword_254A74EA8;
        unk_254A74EA0 = unk_254A74EB8;
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A74E90, &dword_21089F000);
      __cxa_guard_release(&qword_254A747C0);
      goto LABEL_7;
    }
    v4 = atomic_load((unsigned __int8 *)&qword_254A747D0);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A747D0))
    {
      sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cv::CVImageBuffer<img::Format::Rgba32f>]", &qword_254A74EC0);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A74EC0, &dword_21089F000);
      __cxa_guard_release(&qword_254A747D0);
    }
    v5 = atomic_load((unsigned __int8 *)&qword_254A747D8);
    if ((v5 & 1) != 0 || !__cxa_guard_acquire(&qword_254A747D8))
    {
LABEL_49:
      v16 = atomic_load((unsigned __int8 *)&qword_254A747E0);
      if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_254A747E0))
      {
        if (byte_254A74ED8[23] < 0)
          sub_2108B314C(&__p, *(void **)byte_254A74ED8, *(unint64_t *)&byte_254A74ED8[8]);
        else
          __p = *(std::string *)byte_254A74ED8;
        sub_2109ECDA0(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_254A74EF0);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A74EF0, &dword_21089F000);
        __cxa_guard_release(&qword_254A747E0);
      }
      if (byte_254A74F07 < 0)
      {
        sub_2108B314C(v17, (void *)xmmword_254A74EF0, *((unint64_t *)&xmmword_254A74EF0 + 1));
      }
      else
      {
        *(_OWORD *)v17 = xmmword_254A74EF0;
        v18 = unk_254A74F00;
      }
      sub_21090B820((char *)v17, (std::string *)&qword_254A74EA8);
      if (SHIBYTE(v18) < 0)
        operator delete(v17[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A74EA8, &dword_21089F000);
      __cxa_guard_release(&qword_254A747C8);
      goto LABEL_13;
    }
    if (byte_254A74ED7 >= 0)
      v6 = byte_254A74ED7;
    else
      v6 = unk_254A74EC8;
    if (byte_254A74ED7 >= 0)
      v7 = &qword_254A74EC0;
    else
      v7 = (uint64_t *)qword_254A74EC0;
    v8 = (char *)v7 + v6;
    if ((uint64_t)v6 >= 1)
    {
      v9 = v6;
      v10 = v7;
      do
      {
        v11 = memchr(v10, 60, v9);
        if (!v11)
          break;
        if (*v11 == 60)
          goto LABEL_35;
        v10 = (uint64_t *)(v11 + 1);
        v9 = v8 - (_BYTE *)v10;
      }
      while (v8 - (_BYTE *)v10 > 0);
    }
    v11 = (char *)v7 + v6;
LABEL_35:
    v12 = v11 - (_BYTE *)v7;
    if (v11 == v8)
      v12 = -1;
    if (v6 >= v12)
      v6 = v12;
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      sub_2108A4B7C();
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v13 = (char *)operator new(v14 + 1);
      *(_QWORD *)&byte_254A74ED8[8] = v6;
      *(_QWORD *)&byte_254A74ED8[16] = v15 | 0x8000000000000000;
      *(_QWORD *)byte_254A74ED8 = v13;
    }
    else
    {
      v13 = byte_254A74ED8;
      byte_254A74ED8[23] = v6;
      if (!v6)
        goto LABEL_48;
    }
    memmove(v13, v7, v6);
LABEL_48:
    v13[v6] = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A74ED8, &dword_21089F000);
    __cxa_guard_release(&qword_254A747D8);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_254A74EA7 < 0)
  {
    sub_2108B314C(&xmmword_254A74E78, (void *)xmmword_254A74E90, *((unint64_t *)&xmmword_254A74E90 + 1));
  }
  else
  {
    xmmword_254A74E78 = xmmword_254A74E90;
    unk_254A74E88 = unk_254A74EA0;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A74E78, &dword_21089F000);
  __cxa_guard_release(&qword_254A747B8);
LABEL_2:
  if (byte_254A74E8F >= 0)
    return &xmmword_254A74E78;
  else
    return (__int128 *)xmmword_254A74E78;
}

void sub_2108EF7F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_254A747C8);
  __cxa_guard_abort(&qword_254A747C0);
  __cxa_guard_abort(&qword_254A747B8);
  _Unwind_Resume(a1);
}

void sub_2108EF88C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A747B8);
  _Unwind_Resume(a1);
}

void sub_2108EF8A4()
{
  sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 343, (uint64_t)&unk_210A02D2A, 0, (uint64_t)"Access notification must only be done in debug.", 47, (void (*)(void **))sub_2109EDDB4);
  abort();
}

void sub_2108EF8E0(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t (**v39)();
  __int128 v40;
  uint64_t (**v41)();
  __int128 v42;

  if (a2)
  {
    sub_2108DE58C(&v39, a1);
    v4 = (_QWORD *)operator new();
    v42 = v40;
    v40 = 0uLL;
    v41 = &off_24CA7D7D8;
    *v4 = &off_24CA7BD90;
    sub_21090E048(v4 + 1, (uint64_t)&v41);
    if ((_QWORD)v42)
    {
      v6 = *(_QWORD *)v42;
      v5 = *(std::__shared_weak_count **)(v42 + 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
          if (!v6)
            goto LABEL_10;
          goto LABEL_9;
        }
      }
      if (v6)
LABEL_9:
        sub_210912F6C(v42);
    }
LABEL_10:
    v41 = &off_24CA7D7F8;
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
    if (!*((_QWORD *)&v42 + 1))
      goto LABEL_14;
    v11 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      *a3 = v4;
      v13 = (uint64_t *)v40;
      if (!(_QWORD)v40)
        goto LABEL_22;
    }
    else
    {
LABEL_14:
      *a3 = v4;
      v13 = (uint64_t *)v40;
      if (!(_QWORD)v40)
        goto LABEL_22;
    }
    v15 = *v13;
    v14 = (std::__shared_weak_count *)v13[1];
    if (v14)
    {
      v16 = (unint64_t *)&v14->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      do
        v18 = __ldaxr(v16);
      while (__stlxr(v18 - 1, v16));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
        if (!v15)
          goto LABEL_22;
        goto LABEL_21;
      }
    }
    if (v15)
LABEL_21:
      sub_210912F6C(v40);
LABEL_22:
    v39 = &off_24CA7D7F8;
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
    if (!*((_QWORD *)&v40 + 1))
      return;
    v20 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (v21)
      return;
LABEL_51:
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    return;
  }
  sub_2108DE8F8(&v39, a1);
  v22 = (_QWORD *)operator new();
  v42 = v40;
  v40 = 0uLL;
  v41 = &off_24CA7D7B8;
  *v22 = &off_24CA7BD70;
  sub_21090DD20(v22 + 1, (uint64_t)&v41);
  if ((_QWORD)v42)
  {
    v24 = *(_QWORD *)v42;
    v23 = *(std::__shared_weak_count **)(v42 + 8);
    if (v23)
    {
      v25 = (unint64_t *)&v23->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
      do
        v27 = __ldaxr(v25);
      while (__stlxr(v27 - 1, v25));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
        if (!v24)
          goto LABEL_35;
        goto LABEL_34;
      }
    }
    if (v24)
LABEL_34:
      sub_210912E7C(v42);
  }
LABEL_35:
  v41 = &off_24CA7D7F8;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
  if (!*((_QWORD *)&v42 + 1))
    goto LABEL_39;
  v29 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
    *a3 = v22;
    v31 = (uint64_t *)v40;
    if (!(_QWORD)v40)
      goto LABEL_47;
  }
  else
  {
LABEL_39:
    *a3 = v22;
    v31 = (uint64_t *)v40;
    if (!(_QWORD)v40)
      goto LABEL_47;
  }
  v33 = *v31;
  v32 = (std::__shared_weak_count *)v31[1];
  if (v32)
  {
    v34 = (unint64_t *)&v32->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
    do
      v36 = __ldaxr(v34);
    while (__stlxr(v36 - 1, v34));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
      if (!v33)
        goto LABEL_47;
      goto LABEL_46;
    }
  }
  if (v33)
LABEL_46:
    sub_210912E7C(v40);
LABEL_47:
  v39 = &off_24CA7D7F8;
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v37 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
      goto LABEL_51;
  }
}

void sub_2108EFC7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_21090DE2C(&a12);
  MEMORY[0x212BCC6FC](v12, 0xA1C40711E6FFCLL);
  sub_21090DE2C(&a9);
  _Unwind_Resume(a1);
}

void sub_2108EFCB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21090DE2C(&a9);
  _Unwind_Resume(a1);
}

void sub_2108EFCC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_21090E154(&a12);
  MEMORY[0x212BCC6FC](v12, 0xA1C40711E6FFCLL);
  sub_21090E154(&a9);
  _Unwind_Resume(a1);
}

void sub_2108EFCF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21090E154(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2108EFD0C()
{
  return 65792;
}

void sub_2108EFD18(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_2108DE58C(a2, a1);
}

uint64_t sub_2108EFD24(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24CA7B080;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24CA7C080[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_2108EFD88(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if (sub_2108D472C(a2))
  {
    if (*(_DWORD *)(a2 + 76))
      v4 = *(_DWORD *)(a2 + 72) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 72);
    if (v4)
      v5 = 0;
    LODWORD(v34) = 4;
    *(_QWORD *)((char *)&v34 + 4) = v5;
    v6 = 4 * ((_DWORD)v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5))
      v7 = v7;
    else
      v7 = 0;
    v8 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
    v9 = __PAIR64__(DWORD1(v34), 4);
    LODWORD(v34) = 1;
    *(_QWORD *)((char *)&v34 + 4) = v8;
    v10 = v34;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(_QWORD *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(_QWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24CA7D7F8;
        *((_QWORD *)&v34 + 1) = v12;
        v35 = v11;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        break;
      case 1:
        v20 = *(_QWORD *)(a2 + 24);
        v19 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24CA7D7F8;
        *((_QWORD *)&v34 + 1) = v20;
        v35 = v19;
        if (v19)
        {
          v21 = (unint64_t *)&v19->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        break;
      case 2:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24CA7D7F8;
        *((_QWORD *)&v34 + 1) = v16;
        v35 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 3:
        v23 = *(std::__shared_weak_count **)(a2 + 24);
        if (v23 && (v24 = std::__shared_weak_count::lock(v23)) != 0)
        {
          v25 = v24;
          v26 = *(_QWORD *)(a2 + 16);
          *(_QWORD *)&v34 = &off_24CA7D7F8;
          if (v26)
          {
            *((_QWORD *)&v34 + 1) = v26;
            v35 = v24;
            v27 = (unint64_t *)&v24->__shared_owners_;
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          else
          {
            *((_QWORD *)&v34 + 1) = 0;
            v35 = 0;
          }
          v29 = (unint64_t *)&v24->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        else
        {
          *((_QWORD *)&v34 + 1) = 0;
          v35 = 0;
          *(_QWORD *)&v34 = &off_24CA7D7F8;
        }
        break;
      default:
        sub_2108B9060();
    }
    sub_2108D3808(a1, (uint64_t)&v34);
    *(_QWORD *)&v34 = &off_24CA7D7F8;
    v31 = v35;
    if (v35)
    {
      v32 = (unint64_t *)&v35->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
}

void sub_2108EFFEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21090E6B4(&a9);
  _Unwind_Resume(a1);
}

void sub_2108F0000(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t (**v34)();
  uint64_t v35;
  std::__shared_weak_count *v36;
  _BYTE v37[24];
  __int128 v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  if (sub_2108D472C(a2))
  {
    if (*(_DWORD *)(a2 + 76))
      v4 = *(_DWORD *)(a2 + 72) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 72);
    if (v4)
      v5 = 0;
    *(_DWORD *)v37 = 4;
    *(_QWORD *)&v37[4] = v5;
    v6 = 4 * ((_DWORD)v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5))
      v7 = v7;
    else
      v7 = 0;
    v8 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
    v9 = __PAIR64__(*(unsigned int *)&v37[4], 4);
    *(_DWORD *)v37 = 1;
    *(_QWORD *)&v37[4] = v8;
    v10 = *(_QWORD *)v37;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(_QWORD *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(_QWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        v34 = &off_24CA7D7F8;
        v35 = v12;
        v36 = v11;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        break;
      case 1:
        v20 = *(_QWORD *)(a2 + 24);
        v19 = *(std::__shared_weak_count **)(a2 + 32);
        v34 = &off_24CA7D7F8;
        v35 = v20;
        v36 = v19;
        if (v19)
        {
          v21 = (unint64_t *)&v19->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        break;
      case 2:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        v34 = &off_24CA7D7F8;
        v35 = v16;
        v36 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 3:
        v23 = *(std::__shared_weak_count **)(a2 + 24);
        if (v23 && (v24 = std::__shared_weak_count::lock(v23)) != 0)
        {
          v25 = v24;
          v26 = *(_QWORD *)(a2 + 16);
          v34 = &off_24CA7D7F8;
          if (v26)
          {
            v35 = v26;
            v36 = v24;
            v27 = (unint64_t *)&v24->__shared_owners_;
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          else
          {
            v35 = 0;
            v36 = 0;
          }
          v29 = (unint64_t *)&v24->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        else
        {
          v35 = 0;
          v36 = 0;
          v34 = &off_24CA7D7F8;
        }
        break;
      default:
        sub_2108B9060();
    }
    sub_2108D3808((uint64_t)v37, (uint64_t)&v34);
    *(_QWORD *)a1 = *(_QWORD *)v37;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)&v37[8];
    *(_OWORD *)(a1 + 24) = v38;
    *(_QWORD *)(a1 + 40) = v39;
    v34 = &off_24CA7D7F8;
    v31 = v36;
    if (v36)
    {
      v32 = (unint64_t *)&v36->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
}

void sub_2108F0284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21090E6B4(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2108F0298()
{
  return 37;
}

_UNKNOWN **sub_2108F02A0()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A745A0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A745A0))
    return &off_253ED6E40;
  __cxa_guard_release(&qword_254A745A0);
  return &off_253ED6E40;
}

void sub_2108F02F4(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _OWORD v15[3];
  _BYTE v16[32];
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t (**v20)();
  uint64_t *v21;
  std::__shared_weak_count *v22;
  __int128 v23[3];
  _DWORD v24[3];
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[3];

  v29[2] = *MEMORY[0x24BDAC8D0];
  sub_2108D4C78(&v20, a1);
  sub_2108F0000((uint64_t)v16, a1);
  sub_2108F0000((uint64_t)v15, a1);
  v4 = (_QWORD *)operator new();
  v5 = v4;
  v23[0] = v15[0];
  v23[1] = v15[1];
  v23[2] = v15[2];
  *v4 = off_24CA7BC50;
  if (v19 <= 0x20)
    v6 = 32;
  else
    v6 = v19;
  *(_QWORD *)&v24[1] = v17;
  v24[0] = 4;
  LODWORD(v29[0]) = 1;
  *(_QWORD *)((char *)v29 + 4) = v18 | (unint64_t)(v6 << 32);
  v25 = v29[0];
  v26 = v6;
  v27 = v17;
  v28 = *(_QWORD *)((char *)v29 + 4);
  sub_2108D3DD4((uint64_t)v4, 37, (uint64_t)v24, v23);
  *v5 = off_24CA7BC50;
  *a2 = v5;
  if (v21)
  {
    v8 = *v21;
    v7 = (std::__shared_weak_count *)v21[1];
    if (!v7)
      goto LABEL_10;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (v11)
    {
LABEL_10:
      if (!v8)
        goto LABEL_12;
      goto LABEL_11;
    }
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v8)
LABEL_11:
      sub_210912E7C((uint64_t)v21);
  }
LABEL_12:
  v20 = &off_24CA7D7F8;
  v12 = v22;
  if (v22)
  {
    v13 = (unint64_t *)&v22->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_2108F04C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a2)
    sub_2108ABF6C(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2108F0520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_21090DE2C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2108F0534(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_2108D4C78(a2, a1);
}

double sub_2108F0540(uint64_t a1, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  double result;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  _OWORD v30[2];
  __int128 v31;
  uint64_t (**v32)();
  uint64_t *v33;
  std::__shared_weak_count *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _DWORD v38[6];
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[3];

  v41[2] = *MEMORY[0x24BDAC8D0];
  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24CA84C98, (const struct __class_type_info *)&unk_24CA7C040, 0);
  if (v4)
  {
    v5 = (uint64_t)v4;
    sub_2108D4C78(&v32, (uint64_t)v4);
    sub_2108F0000((uint64_t)v30, v5);
    v35 = v30[0];
    v36 = v30[1];
    v37 = v31;
    *(_QWORD *)&v24 = off_24CA7BC50;
    if (HIDWORD(v31) <= 0x20)
      v6 = 32;
    else
      v6 = HIDWORD(v31);
    *(_QWORD *)&v38[1] = v31;
    v38[0] = 4;
    LODWORD(v41[0]) = 1;
    *(_QWORD *)((char *)v41 + 4) = DWORD2(v31) | (unint64_t)(v6 << 32);
    *(_QWORD *)&v38[3] = v41[0];
    v38[5] = v6;
    v39 = v31;
    v40 = *(_QWORD *)((char *)v41 + 4);
    sub_2108D3DD4((uint64_t)&v24, 37, (uint64_t)v38, &v35);
    *(_QWORD *)&v24 = off_24CA7BC50;
    if (!v33)
      goto LABEL_13;
    v8 = *v33;
    v7 = (std::__shared_weak_count *)v33[1];
    if (!v7)
      goto LABEL_11;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if (!v8)
        goto LABEL_13;
    }
    else
    {
LABEL_11:
      if (!v8)
      {
LABEL_13:
        v32 = &off_24CA7D7F8;
        v12 = v34;
        if (v34)
        {
          v13 = (unint64_t *)&v34->__shared_owners_;
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        v15 = DWORD2(v26);
        *(_DWORD *)(a1 + 8) = DWORD2(v24);
        v16 = *(unsigned int *)(a1 + 40);
        if ((_DWORD)v16 == -1)
        {
          if ((_DWORD)v15 == -1)
          {
            result = *(double *)&v27;
            v23 = v28;
            *(_OWORD *)(a1 + 48) = v27;
            *(_OWORD *)(a1 + 64) = v23;
            *(_QWORD *)(a1 + 80) = v29;
            return result;
          }
        }
        else if ((_DWORD)v15 == -1)
        {
          ((void (*)(__int128 *, uint64_t))off_24CA7C080[v16])(&v35, a1 + 16);
          *(_DWORD *)(a1 + 40) = -1;
          goto LABEL_26;
        }
        *(_QWORD *)&v35 = a1 + 16;
        ((void (*)(__int128 *))off_24CA7C0C0[v15])(&v35);
LABEL_26:
        v21 = DWORD2(v26);
        result = *(double *)&v27;
        v22 = v28;
        *(_OWORD *)(a1 + 48) = v27;
        *(_OWORD *)(a1 + 64) = v22;
        *(_QWORD *)(a1 + 80) = v29;
        *(_QWORD *)&v24 = off_24CA7B080;
        if ((_DWORD)v21 != -1)
          ((void (*)(__int128 *, __int128 *))off_24CA7C080[v21])(&v35, &v25);
        return result;
      }
    }
    sub_210912E7C((uint64_t)v33);
    goto LABEL_13;
  }
  (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v35, lpsrc, 37);
  v17 = v35;
  v19 = *(_OWORD *)(v35 + 16);
  v18 = *(_OWORD *)(v35 + 32);
  v24 = *(_OWORD *)v35;
  v25 = v19;
  v26 = v18;
  *(_QWORD *)&v35 = 0;
  MEMORY[0x212BCC6FC](v17);
  sub_2108EFD88((uint64_t)&v35, a1);
  *(_QWORD *)&v30[0] = &v24;
  *((_QWORD *)&v30[0] + 1) = &v35;
  if (DWORD1(v25) == 1 && DWORD1(v36) == 1)
  {
    sub_2108FEBEC((size_t *)v30);
  }
  else
  {
    LOBYTE(v32) = 0;
    if (DWORD2(v24) && HIDWORD(v24) && (_DWORD)v25)
    {
      *(_QWORD *)v38 = &v32;
      sub_2108FF6CC((uint64_t)v38, (uint64_t)&v24, (uint64_t)&v35);
    }
  }
  return result;
}

void sub_2108F0884(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (a2)
    sub_2108ABF6C(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2108F0994(uint64_t a1)
{
  _QWORD v2[6];

  sub_2108EFD88((uint64_t)v2, a1);
  return v2[0];
}

double sub_2108F09BC@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 37
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 325, (uint64_t)"F == format", 11, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
  sub_2108EFD88((uint64_t)v8, a1);
  v5 = (_OWORD *)operator new();
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

double sub_2108F0A5C@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 37
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 331, (uint64_t)"F == format", 11, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
  sub_2108F0000((uint64_t)v8, a1);
  v5 = (_OWORD *)operator new();
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

__int128 *sub_2108F0AFC()
{
  unsigned __int8 v0;
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  size_t v6;
  uint64_t *v7;
  _BYTE *v8;
  size_t v9;
  uint64_t *v10;
  _BYTE *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  void *v17[2];
  uint64_t v18;
  std::string __p;

  v0 = atomic_load((unsigned __int8 *)&qword_254A747E8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A747E8))
    goto LABEL_2;
  v2 = atomic_load((unsigned __int8 *)&qword_254A747F0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A747F0))
  {
    v3 = atomic_load((unsigned __int8 *)&qword_254A747F8);
    if ((v3 & 1) != 0 || !__cxa_guard_acquire(&qword_254A747F8))
    {
LABEL_13:
      if (byte_254A74F4F < 0)
      {
        sub_2108B314C(&xmmword_254A74F20, (void *)qword_254A74F38, unk_254A74F40);
      }
      else
      {
        xmmword_254A74F20 = *(_OWORD *)&qword_254A74F38;
        unk_254A74F30 = unk_254A74F48;
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A74F20, &dword_21089F000);
      __cxa_guard_release(&qword_254A747F0);
      goto LABEL_7;
    }
    v4 = atomic_load((unsigned __int8 *)&qword_254A74800);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A74800))
    {
      sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cv::CVImageBuffer<img::Format::Argb8u>]", &qword_254A74F50);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A74F50, &dword_21089F000);
      __cxa_guard_release(&qword_254A74800);
    }
    v5 = atomic_load((unsigned __int8 *)&qword_254A74808);
    if ((v5 & 1) != 0 || !__cxa_guard_acquire(&qword_254A74808))
    {
LABEL_49:
      v16 = atomic_load((unsigned __int8 *)&qword_254A74810);
      if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_254A74810))
      {
        if (byte_254A74F68[23] < 0)
          sub_2108B314C(&__p, *(void **)byte_254A74F68, *(unint64_t *)&byte_254A74F68[8]);
        else
          __p = *(std::string *)byte_254A74F68;
        sub_2109ECDA0(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_254A74F80);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A74F80, &dword_21089F000);
        __cxa_guard_release(&qword_254A74810);
      }
      if (byte_254A74F97 < 0)
      {
        sub_2108B314C(v17, (void *)xmmword_254A74F80, *((unint64_t *)&xmmword_254A74F80 + 1));
      }
      else
      {
        *(_OWORD *)v17 = xmmword_254A74F80;
        v18 = unk_254A74F90;
      }
      sub_21090B948((char *)v17, (std::string *)&qword_254A74F38);
      if (SHIBYTE(v18) < 0)
        operator delete(v17[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A74F38, &dword_21089F000);
      __cxa_guard_release(&qword_254A747F8);
      goto LABEL_13;
    }
    if (byte_254A74F67 >= 0)
      v6 = byte_254A74F67;
    else
      v6 = unk_254A74F58;
    if (byte_254A74F67 >= 0)
      v7 = &qword_254A74F50;
    else
      v7 = (uint64_t *)qword_254A74F50;
    v8 = (char *)v7 + v6;
    if ((uint64_t)v6 >= 1)
    {
      v9 = v6;
      v10 = v7;
      do
      {
        v11 = memchr(v10, 60, v9);
        if (!v11)
          break;
        if (*v11 == 60)
          goto LABEL_35;
        v10 = (uint64_t *)(v11 + 1);
        v9 = v8 - (_BYTE *)v10;
      }
      while (v8 - (_BYTE *)v10 > 0);
    }
    v11 = (char *)v7 + v6;
LABEL_35:
    v12 = v11 - (_BYTE *)v7;
    if (v11 == v8)
      v12 = -1;
    if (v6 >= v12)
      v6 = v12;
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      sub_2108A4B7C();
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v13 = (char *)operator new(v14 + 1);
      *(_QWORD *)&byte_254A74F68[8] = v6;
      *(_QWORD *)&byte_254A74F68[16] = v15 | 0x8000000000000000;
      *(_QWORD *)byte_254A74F68 = v13;
    }
    else
    {
      v13 = byte_254A74F68;
      byte_254A74F68[23] = v6;
      if (!v6)
        goto LABEL_48;
    }
    memmove(v13, v7, v6);
LABEL_48:
    v13[v6] = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A74F68, &dword_21089F000);
    __cxa_guard_release(&qword_254A74808);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_254A74F37 < 0)
  {
    sub_2108B314C(&xmmword_254A74F08, (void *)xmmword_254A74F20, *((unint64_t *)&xmmword_254A74F20 + 1));
  }
  else
  {
    xmmword_254A74F08 = xmmword_254A74F20;
    unk_254A74F18 = unk_254A74F30;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A74F08, &dword_21089F000);
  __cxa_guard_release(&qword_254A747E8);
LABEL_2:
  if (byte_254A74F1F >= 0)
    return &xmmword_254A74F08;
  else
    return (__int128 *)xmmword_254A74F08;
}

void sub_2108F0F50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_254A747F8);
  __cxa_guard_abort(&qword_254A747F0);
  __cxa_guard_abort(&qword_254A747E8);
  _Unwind_Resume(a1);
}

void sub_2108F0FEC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A747E8);
  _Unwind_Resume(a1);
}

void sub_2108F1004()
{
  sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 343, (uint64_t)&unk_210A02D2A, 0, (uint64_t)"Access notification must only be done in debug.", 47, (void (*)(void **))sub_2109EDDB4);
  abort();
}

void sub_2108F1040(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t (**v39)();
  __int128 v40;
  uint64_t (**v41)();
  __int128 v42;

  if (a2)
  {
    sub_2108D490C(&v39, a1);
    v4 = (_QWORD *)operator new();
    v42 = v40;
    v40 = 0uLL;
    v41 = &off_24CA7D7D8;
    *v4 = &off_24CA7BD90;
    sub_21090E048(v4 + 1, (uint64_t)&v41);
    if ((_QWORD)v42)
    {
      v6 = *(_QWORD *)v42;
      v5 = *(std::__shared_weak_count **)(v42 + 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
          if (!v6)
            goto LABEL_10;
          goto LABEL_9;
        }
      }
      if (v6)
LABEL_9:
        sub_210912F6C(v42);
    }
LABEL_10:
    v41 = &off_24CA7D7F8;
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
    if (!*((_QWORD *)&v42 + 1))
      goto LABEL_14;
    v11 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      *a3 = v4;
      v13 = (uint64_t *)v40;
      if (!(_QWORD)v40)
        goto LABEL_22;
    }
    else
    {
LABEL_14:
      *a3 = v4;
      v13 = (uint64_t *)v40;
      if (!(_QWORD)v40)
        goto LABEL_22;
    }
    v15 = *v13;
    v14 = (std::__shared_weak_count *)v13[1];
    if (v14)
    {
      v16 = (unint64_t *)&v14->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      do
        v18 = __ldaxr(v16);
      while (__stlxr(v18 - 1, v16));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
        if (!v15)
          goto LABEL_22;
        goto LABEL_21;
      }
    }
    if (v15)
LABEL_21:
      sub_210912F6C(v40);
LABEL_22:
    v39 = &off_24CA7D7F8;
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
    if (!*((_QWORD *)&v40 + 1))
      return;
    v20 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (v21)
      return;
LABEL_51:
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    return;
  }
  sub_2108D4C78(&v39, a1);
  v22 = (_QWORD *)operator new();
  v42 = v40;
  v40 = 0uLL;
  v41 = &off_24CA7D7B8;
  *v22 = &off_24CA7BD70;
  sub_21090DD20(v22 + 1, (uint64_t)&v41);
  if ((_QWORD)v42)
  {
    v24 = *(_QWORD *)v42;
    v23 = *(std::__shared_weak_count **)(v42 + 8);
    if (v23)
    {
      v25 = (unint64_t *)&v23->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
      do
        v27 = __ldaxr(v25);
      while (__stlxr(v27 - 1, v25));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
        if (!v24)
          goto LABEL_35;
        goto LABEL_34;
      }
    }
    if (v24)
LABEL_34:
      sub_210912E7C(v42);
  }
LABEL_35:
  v41 = &off_24CA7D7F8;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
  if (!*((_QWORD *)&v42 + 1))
    goto LABEL_39;
  v29 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
    *a3 = v22;
    v31 = (uint64_t *)v40;
    if (!(_QWORD)v40)
      goto LABEL_47;
  }
  else
  {
LABEL_39:
    *a3 = v22;
    v31 = (uint64_t *)v40;
    if (!(_QWORD)v40)
      goto LABEL_47;
  }
  v33 = *v31;
  v32 = (std::__shared_weak_count *)v31[1];
  if (v32)
  {
    v34 = (unint64_t *)&v32->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
    do
      v36 = __ldaxr(v34);
    while (__stlxr(v36 - 1, v34));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
      if (!v33)
        goto LABEL_47;
      goto LABEL_46;
    }
  }
  if (v33)
LABEL_46:
    sub_210912E7C(v40);
LABEL_47:
  v39 = &off_24CA7D7F8;
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v37 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
      goto LABEL_51;
  }
}

void sub_2108F13DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_21090DE2C(&a12);
  MEMORY[0x212BCC6FC](v12, 0xA1C40711E6FFCLL);
  sub_21090DE2C(&a9);
  _Unwind_Resume(a1);
}

void sub_2108F1410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21090DE2C(&a9);
  _Unwind_Resume(a1);
}

void sub_2108F1424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_21090E154(&a12);
  MEMORY[0x212BCC6FC](v12, 0xA1C40711E6FFCLL);
  sub_21090E154(&a9);
  _Unwind_Resume(a1);
}

void sub_2108F1458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21090E154(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2108F146C()
{
  return 65792;
}

void sub_2108F1478(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_2108D490C(a2, a1);
}

uint64_t sub_2108F1484(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24CA7B230;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24CA7C080[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_2108F14E8(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if (sub_2108D7AA0(a2))
  {
    if (*(_DWORD *)(a2 + 76))
      v4 = *(_DWORD *)(a2 + 72) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 72);
    if (v4)
      v5 = 0;
    LODWORD(v34) = 4;
    *(_QWORD *)((char *)&v34 + 4) = v5;
    v6 = 4 * ((_DWORD)v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5))
      v7 = v7;
    else
      v7 = 0;
    v8 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
    v9 = __PAIR64__(DWORD1(v34), 4);
    LODWORD(v34) = 1;
    *(_QWORD *)((char *)&v34 + 4) = v8;
    v10 = v34;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(_QWORD *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(_QWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24CA7D7F8;
        *((_QWORD *)&v34 + 1) = v12;
        v35 = v11;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        break;
      case 1:
        v20 = *(_QWORD *)(a2 + 24);
        v19 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24CA7D7F8;
        *((_QWORD *)&v34 + 1) = v20;
        v35 = v19;
        if (v19)
        {
          v21 = (unint64_t *)&v19->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        break;
      case 2:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24CA7D7F8;
        *((_QWORD *)&v34 + 1) = v16;
        v35 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 3:
        v23 = *(std::__shared_weak_count **)(a2 + 24);
        if (v23 && (v24 = std::__shared_weak_count::lock(v23)) != 0)
        {
          v25 = v24;
          v26 = *(_QWORD *)(a2 + 16);
          *(_QWORD *)&v34 = &off_24CA7D7F8;
          if (v26)
          {
            *((_QWORD *)&v34 + 1) = v26;
            v35 = v24;
            v27 = (unint64_t *)&v24->__shared_owners_;
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          else
          {
            *((_QWORD *)&v34 + 1) = 0;
            v35 = 0;
          }
          v29 = (unint64_t *)&v24->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        else
        {
          *((_QWORD *)&v34 + 1) = 0;
          v35 = 0;
          *(_QWORD *)&v34 = &off_24CA7D7F8;
        }
        break;
      default:
        sub_2108B9060();
    }
    sub_2108D728C(a1, (uint64_t)&v34);
    *(_QWORD *)&v34 = &off_24CA7D7F8;
    v31 = v35;
    if (v35)
    {
      v32 = (unint64_t *)&v35->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
}

void sub_2108F174C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21090E6B4(&a9);
  _Unwind_Resume(a1);
}

void sub_2108F1760(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t (**v34)();
  uint64_t v35;
  std::__shared_weak_count *v36;
  _BYTE v37[24];
  __int128 v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  if (sub_2108D7AA0(a2))
  {
    if (*(_DWORD *)(a2 + 76))
      v4 = *(_DWORD *)(a2 + 72) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 72);
    if (v4)
      v5 = 0;
    *(_DWORD *)v37 = 4;
    *(_QWORD *)&v37[4] = v5;
    v6 = 4 * ((_DWORD)v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5))
      v7 = v7;
    else
      v7 = 0;
    v8 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
    v9 = __PAIR64__(*(unsigned int *)&v37[4], 4);
    *(_DWORD *)v37 = 1;
    *(_QWORD *)&v37[4] = v8;
    v10 = *(_QWORD *)v37;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(_QWORD *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(_QWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        v34 = &off_24CA7D7F8;
        v35 = v12;
        v36 = v11;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        break;
      case 1:
        v20 = *(_QWORD *)(a2 + 24);
        v19 = *(std::__shared_weak_count **)(a2 + 32);
        v34 = &off_24CA7D7F8;
        v35 = v20;
        v36 = v19;
        if (v19)
        {
          v21 = (unint64_t *)&v19->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        break;
      case 2:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        v34 = &off_24CA7D7F8;
        v35 = v16;
        v36 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 3:
        v23 = *(std::__shared_weak_count **)(a2 + 24);
        if (v23 && (v24 = std::__shared_weak_count::lock(v23)) != 0)
        {
          v25 = v24;
          v26 = *(_QWORD *)(a2 + 16);
          v34 = &off_24CA7D7F8;
          if (v26)
          {
            v35 = v26;
            v36 = v24;
            v27 = (unint64_t *)&v24->__shared_owners_;
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          else
          {
            v35 = 0;
            v36 = 0;
          }
          v29 = (unint64_t *)&v24->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        else
        {
          v35 = 0;
          v36 = 0;
          v34 = &off_24CA7D7F8;
        }
        break;
      default:
        sub_2108B9060();
    }
    sub_2108D728C((uint64_t)v37, (uint64_t)&v34);
    *(_QWORD *)a1 = *(_QWORD *)v37;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)&v37[8];
    *(_OWORD *)(a1 + 24) = v38;
    *(_QWORD *)(a1 + 40) = v39;
    v34 = &off_24CA7D7F8;
    v31 = v36;
    if (v36)
    {
      v32 = (unint64_t *)&v36->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
}

void sub_2108F19E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21090E6B4(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2108F19F8()
{
  return 38;
}

_UNKNOWN **sub_2108F1A00()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A745A0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A745A0))
    return &off_253ED6E40;
  __cxa_guard_release(&qword_254A745A0);
  return &off_253ED6E40;
}

void sub_2108F1A54(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _OWORD v15[3];
  _BYTE v16[32];
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t (**v20)();
  uint64_t *v21;
  std::__shared_weak_count *v22;
  __int128 v23[3];
  _DWORD v24[3];
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[3];

  v29[2] = *MEMORY[0x24BDAC8D0];
  sub_2108D7FEC(&v20, a1);
  sub_2108F1760((uint64_t)v16, a1);
  sub_2108F1760((uint64_t)v15, a1);
  v4 = (_QWORD *)operator new();
  v5 = v4;
  v23[0] = v15[0];
  v23[1] = v15[1];
  v23[2] = v15[2];
  *v4 = off_24CA7BCE0;
  if (v19 <= 0x10)
    v6 = 16;
  else
    v6 = v19;
  *(_QWORD *)&v24[1] = v17;
  v24[0] = 4;
  LODWORD(v29[0]) = 1;
  *(_QWORD *)((char *)v29 + 4) = v18 | (unint64_t)(v6 << 32);
  v25 = v29[0];
  v26 = v6;
  v27 = v17;
  v28 = *(_QWORD *)((char *)v29 + 4);
  sub_2108D7624((uint64_t)v4, (uint64_t)v24, v23);
  *v5 = off_24CA7BCE0;
  *a2 = v5;
  if (v21)
  {
    v8 = *v21;
    v7 = (std::__shared_weak_count *)v21[1];
    if (!v7)
      goto LABEL_10;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (v11)
    {
LABEL_10:
      if (!v8)
        goto LABEL_12;
      goto LABEL_11;
    }
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v8)
LABEL_11:
      sub_210912E7C((uint64_t)v21);
  }
LABEL_12:
  v20 = &off_24CA7D7F8;
  v12 = v22;
  if (v22)
  {
    v13 = (unint64_t *)&v22->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_2108F1C20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a2)
    sub_2108ABF6C(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2108F1C7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_21090DE2C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2108F1C90(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_2108D7FEC(a2, a1);
}

double sub_2108F1C9C(uint64_t a1, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  double result;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  _OWORD v30[2];
  __int128 v31;
  uint64_t (**v32)();
  uint64_t *v33;
  std::__shared_weak_count *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _DWORD v38[6];
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[3];

  v41[2] = *MEMORY[0x24BDAC8D0];
  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24CA84C98, (const struct __class_type_info *)&unk_24CA7C058, 0);
  if (v4)
  {
    v5 = (uint64_t)v4;
    sub_2108D7FEC(&v32, (uint64_t)v4);
    sub_2108F1760((uint64_t)v30, v5);
    v35 = v30[0];
    v36 = v30[1];
    v37 = v31;
    *(_QWORD *)&v24 = off_24CA7BCE0;
    if (HIDWORD(v31) <= 0x10)
      v6 = 16;
    else
      v6 = HIDWORD(v31);
    *(_QWORD *)&v38[1] = v31;
    v38[0] = 4;
    LODWORD(v41[0]) = 1;
    *(_QWORD *)((char *)v41 + 4) = DWORD2(v31) | (unint64_t)(v6 << 32);
    *(_QWORD *)&v38[3] = v41[0];
    v38[5] = v6;
    v39 = v31;
    v40 = *(_QWORD *)((char *)v41 + 4);
    sub_2108D7624((uint64_t)&v24, (uint64_t)v38, &v35);
    *(_QWORD *)&v24 = off_24CA7BCE0;
    if (!v33)
      goto LABEL_13;
    v8 = *v33;
    v7 = (std::__shared_weak_count *)v33[1];
    if (!v7)
      goto LABEL_11;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if (!v8)
        goto LABEL_13;
    }
    else
    {
LABEL_11:
      if (!v8)
      {
LABEL_13:
        v32 = &off_24CA7D7F8;
        v12 = v34;
        if (v34)
        {
          v13 = (unint64_t *)&v34->__shared_owners_;
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        v15 = DWORD2(v26);
        *(_DWORD *)(a1 + 8) = DWORD2(v24);
        v16 = *(unsigned int *)(a1 + 40);
        if ((_DWORD)v16 == -1)
        {
          if ((_DWORD)v15 == -1)
          {
            result = *(double *)&v27;
            v23 = v28;
            *(_OWORD *)(a1 + 48) = v27;
            *(_OWORD *)(a1 + 64) = v23;
            *(_QWORD *)(a1 + 80) = v29;
            return result;
          }
        }
        else if ((_DWORD)v15 == -1)
        {
          ((void (*)(__int128 *, uint64_t))off_24CA7C080[v16])(&v35, a1 + 16);
          *(_DWORD *)(a1 + 40) = -1;
          goto LABEL_26;
        }
        *(_QWORD *)&v35 = a1 + 16;
        ((void (*)(__int128 *))off_24CA7C0C0[v15])(&v35);
LABEL_26:
        v21 = DWORD2(v26);
        result = *(double *)&v27;
        v22 = v28;
        *(_OWORD *)(a1 + 48) = v27;
        *(_OWORD *)(a1 + 64) = v22;
        *(_QWORD *)(a1 + 80) = v29;
        *(_QWORD *)&v24 = off_24CA7B230;
        if ((_DWORD)v21 != -1)
          ((void (*)(__int128 *, __int128 *))off_24CA7C080[v21])(&v35, &v25);
        return result;
      }
    }
    sub_210912E7C((uint64_t)v33);
    goto LABEL_13;
  }
  (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v35, lpsrc, 38);
  v17 = v35;
  v19 = *(_OWORD *)(v35 + 16);
  v18 = *(_OWORD *)(v35 + 32);
  v24 = *(_OWORD *)v35;
  v25 = v19;
  v26 = v18;
  *(_QWORD *)&v35 = 0;
  MEMORY[0x212BCC6FC](v17);
  sub_2108F14E8((uint64_t)&v35, a1);
  *(_QWORD *)&v30[0] = &v24;
  *((_QWORD *)&v30[0] + 1) = &v35;
  if (DWORD1(v25) == 1 && DWORD1(v36) == 1)
  {
    sub_2109005E8((uint64_t *)v30);
  }
  else
  {
    LOBYTE(v32) = 0;
    if (DWORD2(v24) && HIDWORD(v24) && (_DWORD)v25)
    {
      *(_QWORD *)v38 = &v32;
      sub_210900F9C((uint64_t)v38, (uint64_t)&v24, (uint64_t)&v35);
    }
  }
  return result;
}

void sub_2108F1FDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (a2)
    sub_2108ABF6C(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2108F20EC(uint64_t a1)
{
  _QWORD v2[6];

  sub_2108F14E8((uint64_t)v2, a1);
  return v2[0];
}

double sub_2108F2114@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 38
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 325, (uint64_t)"F == format", 11, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
  sub_2108F14E8((uint64_t)v8, a1);
  v5 = (_OWORD *)operator new();
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

double sub_2108F21B4@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 38
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 331, (uint64_t)"F == format", 11, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
  sub_2108F1760((uint64_t)v8, a1);
  v5 = (_OWORD *)operator new();
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

__int128 *sub_2108F2254()
{
  unsigned __int8 v0;
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  size_t v6;
  uint64_t *v7;
  _BYTE *v8;
  size_t v9;
  uint64_t *v10;
  _BYTE *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  void *v17[2];
  uint64_t v18;
  std::string __p;

  v0 = atomic_load((unsigned __int8 *)&qword_254A74818);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A74818))
    goto LABEL_2;
  v2 = atomic_load((unsigned __int8 *)&qword_254A74820);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A74820))
  {
    v3 = atomic_load((unsigned __int8 *)&qword_254A74828);
    if ((v3 & 1) != 0 || !__cxa_guard_acquire(&qword_254A74828))
    {
LABEL_13:
      if (byte_254A74FDF < 0)
      {
        sub_2108B314C(&xmmword_254A74FB0, (void *)qword_254A74FC8, unk_254A74FD0);
      }
      else
      {
        xmmword_254A74FB0 = *(_OWORD *)&qword_254A74FC8;
        unk_254A74FC0 = unk_254A74FD8;
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A74FB0, &dword_21089F000);
      __cxa_guard_release(&qword_254A74820);
      goto LABEL_7;
    }
    v4 = atomic_load((unsigned __int8 *)&qword_254A74830);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A74830))
    {
      sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cv::CVImageBuffer<img::Format::Argb16u>]", &qword_254A74FE0);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A74FE0, &dword_21089F000);
      __cxa_guard_release(&qword_254A74830);
    }
    v5 = atomic_load((unsigned __int8 *)&qword_254A74838);
    if ((v5 & 1) != 0 || !__cxa_guard_acquire(&qword_254A74838))
    {
LABEL_49:
      v16 = atomic_load((unsigned __int8 *)&qword_254A74840);
      if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_254A74840))
      {
        if (byte_254A74FF8[23] < 0)
          sub_2108B314C(&__p, *(void **)byte_254A74FF8, *(unint64_t *)&byte_254A74FF8[8]);
        else
          __p = *(std::string *)byte_254A74FF8;
        sub_2109ECDA0(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_254A75010);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A75010, &dword_21089F000);
        __cxa_guard_release(&qword_254A74840);
      }
      if (byte_254A75027 < 0)
      {
        sub_2108B314C(v17, (void *)xmmword_254A75010, *((unint64_t *)&xmmword_254A75010 + 1));
      }
      else
      {
        *(_OWORD *)v17 = xmmword_254A75010;
        v18 = unk_254A75020;
      }
      sub_21090BA70((char *)v17, (std::string *)&qword_254A74FC8);
      if (SHIBYTE(v18) < 0)
        operator delete(v17[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A74FC8, &dword_21089F000);
      __cxa_guard_release(&qword_254A74828);
      goto LABEL_13;
    }
    if (byte_254A74FF7 >= 0)
      v6 = byte_254A74FF7;
    else
      v6 = unk_254A74FE8;
    if (byte_254A74FF7 >= 0)
      v7 = &qword_254A74FE0;
    else
      v7 = (uint64_t *)qword_254A74FE0;
    v8 = (char *)v7 + v6;
    if ((uint64_t)v6 >= 1)
    {
      v9 = v6;
      v10 = v7;
      do
      {
        v11 = memchr(v10, 60, v9);
        if (!v11)
          break;
        if (*v11 == 60)
          goto LABEL_35;
        v10 = (uint64_t *)(v11 + 1);
        v9 = v8 - (_BYTE *)v10;
      }
      while (v8 - (_BYTE *)v10 > 0);
    }
    v11 = (char *)v7 + v6;
LABEL_35:
    v12 = v11 - (_BYTE *)v7;
    if (v11 == v8)
      v12 = -1;
    if (v6 >= v12)
      v6 = v12;
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      sub_2108A4B7C();
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v13 = (char *)operator new(v14 + 1);
      *(_QWORD *)&byte_254A74FF8[8] = v6;
      *(_QWORD *)&byte_254A74FF8[16] = v15 | 0x8000000000000000;
      *(_QWORD *)byte_254A74FF8 = v13;
    }
    else
    {
      v13 = byte_254A74FF8;
      byte_254A74FF8[23] = v6;
      if (!v6)
        goto LABEL_48;
    }
    memmove(v13, v7, v6);
LABEL_48:
    v13[v6] = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A74FF8, &dword_21089F000);
    __cxa_guard_release(&qword_254A74838);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_254A74FC7 < 0)
  {
    sub_2108B314C(&xmmword_254A74F98, (void *)xmmword_254A74FB0, *((unint64_t *)&xmmword_254A74FB0 + 1));
  }
  else
  {
    xmmword_254A74F98 = xmmword_254A74FB0;
    unk_254A74FA8 = unk_254A74FC0;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A74F98, &dword_21089F000);
  __cxa_guard_release(&qword_254A74818);
LABEL_2:
  if (byte_254A74FAF >= 0)
    return &xmmword_254A74F98;
  else
    return (__int128 *)xmmword_254A74F98;
}

void sub_2108F26A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_254A74828);
  __cxa_guard_abort(&qword_254A74820);
  __cxa_guard_abort(&qword_254A74818);
  _Unwind_Resume(a1);
}

void sub_2108F2744(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A74818);
  _Unwind_Resume(a1);
}

void sub_2108F275C()
{
  sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 343, (uint64_t)&unk_210A02D2A, 0, (uint64_t)"Access notification must only be done in debug.", 47, (void (*)(void **))sub_2109EDDB4);
  abort();
}

void sub_2108F2798(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t (**v39)();
  __int128 v40;
  uint64_t (**v41)();
  __int128 v42;

  if (a2)
  {
    sub_2108D7C80(&v39, a1);
    v4 = (_QWORD *)operator new();
    v42 = v40;
    v40 = 0uLL;
    v41 = &off_24CA7D7D8;
    *v4 = &off_24CA7BD90;
    sub_21090E048(v4 + 1, (uint64_t)&v41);
    if ((_QWORD)v42)
    {
      v6 = *(_QWORD *)v42;
      v5 = *(std::__shared_weak_count **)(v42 + 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
          if (!v6)
            goto LABEL_10;
          goto LABEL_9;
        }
      }
      if (v6)
LABEL_9:
        sub_210912F6C(v42);
    }
LABEL_10:
    v41 = &off_24CA7D7F8;
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
    if (!*((_QWORD *)&v42 + 1))
      goto LABEL_14;
    v11 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      *a3 = v4;
      v13 = (uint64_t *)v40;
      if (!(_QWORD)v40)
        goto LABEL_22;
    }
    else
    {
LABEL_14:
      *a3 = v4;
      v13 = (uint64_t *)v40;
      if (!(_QWORD)v40)
        goto LABEL_22;
    }
    v15 = *v13;
    v14 = (std::__shared_weak_count *)v13[1];
    if (v14)
    {
      v16 = (unint64_t *)&v14->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      do
        v18 = __ldaxr(v16);
      while (__stlxr(v18 - 1, v16));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
        if (!v15)
          goto LABEL_22;
        goto LABEL_21;
      }
    }
    if (v15)
LABEL_21:
      sub_210912F6C(v40);
LABEL_22:
    v39 = &off_24CA7D7F8;
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
    if (!*((_QWORD *)&v40 + 1))
      return;
    v20 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (v21)
      return;
LABEL_51:
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    return;
  }
  sub_2108D7FEC(&v39, a1);
  v22 = (_QWORD *)operator new();
  v42 = v40;
  v40 = 0uLL;
  v41 = &off_24CA7D7B8;
  *v22 = &off_24CA7BD70;
  sub_21090DD20(v22 + 1, (uint64_t)&v41);
  if ((_QWORD)v42)
  {
    v24 = *(_QWORD *)v42;
    v23 = *(std::__shared_weak_count **)(v42 + 8);
    if (v23)
    {
      v25 = (unint64_t *)&v23->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
      do
        v27 = __ldaxr(v25);
      while (__stlxr(v27 - 1, v25));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
        if (!v24)
          goto LABEL_35;
        goto LABEL_34;
      }
    }
    if (v24)
LABEL_34:
      sub_210912E7C(v42);
  }
LABEL_35:
  v41 = &off_24CA7D7F8;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
  if (!*((_QWORD *)&v42 + 1))
    goto LABEL_39;
  v29 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
    *a3 = v22;
    v31 = (uint64_t *)v40;
    if (!(_QWORD)v40)
      goto LABEL_47;
  }
  else
  {
LABEL_39:
    *a3 = v22;
    v31 = (uint64_t *)v40;
    if (!(_QWORD)v40)
      goto LABEL_47;
  }
  v33 = *v31;
  v32 = (std::__shared_weak_count *)v31[1];
  if (v32)
  {
    v34 = (unint64_t *)&v32->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
    do
      v36 = __ldaxr(v34);
    while (__stlxr(v36 - 1, v34));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
      if (!v33)
        goto LABEL_47;
      goto LABEL_46;
    }
  }
  if (v33)
LABEL_46:
    sub_210912E7C(v40);
LABEL_47:
  v39 = &off_24CA7D7F8;
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v37 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
      goto LABEL_51;
  }
}

void sub_2108F2B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_21090DE2C(&a12);
  MEMORY[0x212BCC6FC](v12, 0xA1C40711E6FFCLL);
  sub_21090DE2C(&a9);
  _Unwind_Resume(a1);
}

void sub_2108F2B68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21090DE2C(&a9);
  _Unwind_Resume(a1);
}

void sub_2108F2B7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_21090E154(&a12);
  MEMORY[0x212BCC6FC](v12, 0xA1C40711E6FFCLL);
  sub_21090E154(&a9);
  _Unwind_Resume(a1);
}

void sub_2108F2BB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21090E154(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2108F2BC4()
{
  return 65792;
}

void sub_2108F2BD0(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_2108D7C80(a2, a1);
}

std::string *sub_2108F2BDC()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A72198);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A72198))
    return &stru_254A72180;
  sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Gray16u]", __p);
  sub_2109ED678((uint64_t)__p, &stru_254A72180);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A72180, &dword_21089F000);
  __cxa_guard_release(&qword_254A72198);
  return &stru_254A72180;
}

void sub_2108F2C94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A72198);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A72198);
  _Unwind_Resume(a1);
}

void sub_2108F2CD4(uint64_t a1@<X8>)
{
  uint64_t v2;
  double v3;
  BOOL v4;
  uint64_t v5;
  __int128 v6;
  __int16 v7;

  v6 = xmmword_210A0D5D0;
  v7 = 0;
  *(_QWORD *)a1 = off_24CA7B2C0;
  *(_DWORD *)(a1 + 8) = 0;
  v2 = a1 + 16;
  sub_2108D80E0(0, 3, (unsigned int *)&v6, a1 + 16);
  if ((_DWORD)v6)
    v4 = DWORD1(v6) == 0;
  else
    v4 = 1;
  if (v4)
  {
    *(_OWORD *)(a1 + 48) = v6;
  }
  else
  {
    *(_QWORD *)(a1 + 48) = sub_2108D84C4(0, v2, v3);
    *(_QWORD *)(a1 + 56) = v5;
  }
  sub_2108D88FC(a1, &v7);
  *(_QWORD *)a1 = off_24CA7B6B0;
}

void sub_2108F2D80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  _DWORD *v19;
  unsigned int v20;

  v20 = *(_DWORD *)(v15 + 40);
  v19 = (_DWORD *)(v15 + 40);
  v18 = v20;
  if (v20 != -1)
    ((void (*)(char *, uint64_t))off_24CA7C080[v18])(&a15, v16);
  *v19 = -1;
  _Unwind_Resume(exception_object);
}

void sub_2108F2DF4(_DWORD *a1@<X1>, __int16 *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  _BOOL8 v4;
  __int16 v5;
  double v6;
  uint64_t v7;
  __int128 v8;
  __int16 v9;

  v3 = a3;
  LODWORD(a3) = *a1;
  v4 = *a1 != 0;
  if (*a1 <= 0x10u)
    LODWORD(a3) = 16;
  v5 = *a2;
  if (a1[1])
    a3 = a3;
  else
    a3 = 16;
  *(_QWORD *)&v8 = *(_QWORD *)a1;
  *((_QWORD *)&v8 + 1) = v4 | (a3 << 32);
  v9 = v5;
  *(_QWORD *)v3 = off_24CA7B2C0;
  *(_DWORD *)(v3 + 8) = 0;
  sub_2108D80E0(0, 3, (unsigned int *)&v8, v3 + 16);
  if ((_DWORD)v8 && DWORD1(v8))
  {
    *(_QWORD *)(v3 + 48) = sub_2108D84C4(0, v3 + 16, v6);
    *(_QWORD *)(v3 + 56) = v7;
  }
  else
  {
    *(_OWORD *)(v3 + 48) = v8;
  }
  sub_2108D88FC(v3, &v9);
  *(_QWORD *)v3 = off_24CA7B6B0;
}

void sub_2108F2EC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  _DWORD *v19;
  unsigned int v20;

  v20 = *(_DWORD *)(v15 + 40);
  v19 = (_DWORD *)(v15 + 40);
  v18 = v20;
  if (v20 != -1)
    ((void (*)(char *, uint64_t))off_24CA7C080[v18])(&a15, v16);
  *v19 = -1;
  _Unwind_Resume(exception_object);
}

std::string *sub_2108F2F38()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A721B8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A721B8))
    return &stru_254A721A0;
  sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Gray16f]", __p);
  sub_2109ED678((uint64_t)__p, &stru_254A721A0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A721A0, &dword_21089F000);
  __cxa_guard_release(&qword_254A721B8);
  return &stru_254A721A0;
}

void sub_2108F2FF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A721B8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A721B8);
  _Unwind_Resume(a1);
}

std::string *sub_2108F3030()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A721D8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A721D8))
    return &stru_254A721C0;
  sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Gray32f]", __p);
  sub_2109ED678((uint64_t)__p, &stru_254A721C0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A721C0, &dword_21089F000);
  __cxa_guard_release(&qword_254A721D8);
  return &stru_254A721C0;
}

void sub_2108F30E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A721D8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A721D8);
  _Unwind_Resume(a1);
}

std::string *sub_2108F3128()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A721F8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A721F8))
    return &stru_254A721E0;
  sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Two16f]", __p);
  sub_2109ED678((uint64_t)__p, &stru_254A721E0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A721E0, &dword_21089F000);
  __cxa_guard_release(&qword_254A721F8);
  return &stru_254A721E0;
}

void sub_2108F31E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A721F8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A721F8);
  _Unwind_Resume(a1);
}

std::string *sub_2108F3220()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A72218);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A72218))
    return &stru_254A72200;
  sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Two32f]", __p);
  sub_2109ED678((uint64_t)__p, &stru_254A72200);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A72200, &dword_21089F000);
  __cxa_guard_release(&qword_254A72218);
  return &stru_254A72200;
}

void sub_2108F32D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A72218);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A72218);
  _Unwind_Resume(a1);
}

std::string *sub_2108F3318()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A72238);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A72238))
    return &stru_254A72220;
  sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Rgb8u]", __p);
  sub_2109ED678((uint64_t)__p, &stru_254A72220);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A72220, &dword_21089F000);
  __cxa_guard_release(&qword_254A72238);
  return &stru_254A72220;
}

void sub_2108F33D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A72238);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A72238);
  _Unwind_Resume(a1);
}

std::string *sub_2108F3410()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A72258);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A72258))
    return &stru_254A72240;
  sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Rgb16u]", __p);
  sub_2109ED678((uint64_t)__p, &stru_254A72240);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A72240, &dword_21089F000);
  __cxa_guard_release(&qword_254A72258);
  return &stru_254A72240;
}

void sub_2108F34C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A72258);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A72258);
  _Unwind_Resume(a1);
}

std::string *sub_2108F3508()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A72278);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A72278))
    return &stru_254A72260;
  sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Bgra8u]", __p);
  sub_2109ED678((uint64_t)__p, &stru_254A72260);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A72260, &dword_21089F000);
  __cxa_guard_release(&qword_254A72278);
  return &stru_254A72260;
}

void sub_2108F35C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A72278);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A72278);
  _Unwind_Resume(a1);
}

std::string *sub_2108F3600()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A72298);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A72298))
    return &stru_254A72280;
  sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Rgba16f]", __p);
  sub_2109ED678((uint64_t)__p, &stru_254A72280);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A72280, &dword_21089F000);
  __cxa_guard_release(&qword_254A72298);
  return &stru_254A72280;
}

void sub_2108F36B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A72298);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A72298);
  _Unwind_Resume(a1);
}

std::string *sub_2108F36F8()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A722B8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A722B8))
    return &stru_254A722A0;
  sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Rgba32f]", __p);
  sub_2109ED678((uint64_t)__p, &stru_254A722A0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A722A0, &dword_21089F000);
  __cxa_guard_release(&qword_254A722B8);
  return &stru_254A722A0;
}

void sub_2108F37B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A722B8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A722B8);
  _Unwind_Resume(a1);
}

std::string *sub_2108F37F0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A722D8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A722D8))
    return &stru_254A722C0;
  sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Argb8u]", __p);
  sub_2109ED678((uint64_t)__p, &stru_254A722C0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A722C0, &dword_21089F000);
  __cxa_guard_release(&qword_254A722D8);
  return &stru_254A722C0;
}

void sub_2108F38A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A722D8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A722D8);
  _Unwind_Resume(a1);
}

std::string *sub_2108F38E8()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A722F8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A722F8))
    return &stru_254A722E0;
  sub_2109ED1D8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Argb16u]", __p);
  sub_2109ED678((uint64_t)__p, &stru_254A722E0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A722E0, &dword_21089F000);
  __cxa_guard_release(&qword_254A722F8);
  return &stru_254A722E0;
}

void sub_2108F39A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A722F8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A722F8);
  _Unwind_Resume(a1);
}

_QWORD *sub_2108F39E0(_QWORD *a1)
{
  *a1 = &off_24CA7BD70;
  sub_21090DE2C(a1 + 1);
  return a1;
}

void sub_2108F3A10(_QWORD *a1)
{
  *a1 = &off_24CA7BD70;
  sub_21090DE2C(a1 + 1);
  JUMPOUT(0x212BCC6FCLL);
}

_QWORD *sub_2108F3A50(_QWORD *a1)
{
  *a1 = &off_24CA7BD90;
  sub_21090E154(a1 + 1);
  return a1;
}

void sub_2108F3A80(_QWORD *a1)
{
  *a1 = &off_24CA7BD90;
  sub_21090E154(a1 + 1);
  JUMPOUT(0x212BCC6FCLL);
}

void sub_2108F3AC0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  uint64_t v5;
  std::logic_error *exception;
  unsigned int v7;
  std::string v8;

  v4 = sub_21090D838(a1);
  v5 = sub_2108F3BB8(v4);
  if ((v5 & 0xFF00000000) == 0)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    v7 = sub_21090D838(a1);
    sub_2108F3E84("Attempting to map pixel buffer of format ", &v7, (uint64_t)" into a SharedCVImage. The format is not (yet) supported by Kit_Image.");
    std::logic_error::logic_error(exception, &v8);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24CA79220, MEMORY[0x24BEDAB88]);
  }
  sub_2108F514C(a2, v5);
}

void sub_2108F3B80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t sub_2108F3BB8(int a1)
{
  int v1;

  if (a1 > 1278226535)
  {
    if (a1 <= 1647589489)
    {
      if (a1 > 1380410944)
      {
        switch(a1)
        {
          case 1380410945:
            return 0x100000020;
          case 1380411457:
            return 0x10000001FLL;
          case 1647392359:
            return 0x100000002;
        }
        return 0;
      }
      if (a1 != 1278226536)
      {
        if (a1 == 1380401729)
          return 0x10000001DLL;
        return 0;
      }
    }
    else
    {
      if (a1 <= 1717856626)
      {
        if (a1 == 1647589490)
          return 0x100000016;
        if (a1 == 1647719521)
          return 0x100000026;
        v1 = 1717855600;
        goto LABEL_22;
      }
      if (a1 == 1717856627)
        return 0x100000004;
      if (a1 != 1751410032 && a1 != 1751411059)
        return 0;
    }
    return 0x100000003;
  }
  if (a1 <= 843264103)
  {
    if (a1 <= 842285638)
    {
      if (a1 == 24)
        return 0x100000015;
      if (a1 == 32)
        return 0x100000025;
    }
    else
    {
      switch(a1)
      {
        case 842285639:
          return 0x100000011;
        case 843264056:
          return 0x100000005;
        case 843264102:
          return 0x100000008;
      }
    }
    return 0;
  }
  if (a1 > 1111970368)
  {
    if (a1 == 1111970369)
      return 0x100000019;
    if (a1 == 1278226488)
      return 0x100000001;
    v1 = 1278226534;
LABEL_22:
    if (a1 != v1)
      return 0;
    return 0x100000004;
  }
  if (a1 == 843264104)
    return 0x100000007;
  if (a1 == 1094862674)
    return 0x100000021;
  return 0;
}

uint64_t sub_2108F3E84(char *__s, unsigned int *a2, uint64_t a3)
{
  uint64_t result;
  char v6;
  _DWORD v7[6];
  int v8;
  _QWORD v9[5];
  _QWORD *v10;

  v8 = 0;
  sub_2108B9F20(v7, __s);
  sub_2108FCB84((uint64_t)&v6, (uint64_t)v7, a2);
  v9[0] = v7;
  v9[1] = a3;
  v9[2] = v7;
  v9[3] = a3;
  v9[4] = a3;
  if (v8 == -1)
    sub_2108B9060();
  v10 = v9;
  ((void (*)(_QWORD **, _DWORD *))off_24CA7D300[v8])(&v10, v7);
  if (v8 == -1)
    sub_2108B9060();
  v9[0] = &v10;
  result = ((uint64_t (*)(_QWORD *, _DWORD *))off_24CA7D318[v8])(v9, v7);
  if (v8 != -1)
    return ((uint64_t (*)(_QWORD *, _DWORD *))off_24CA7D2D0[v8])(v9, v7);
  return result;
}

void sub_2108F3F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2108B9008((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2108F3F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2108B9008((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2108F3FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2108B9008((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2108F3FB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2108B9008((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2108F3FCC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  int v6;
  uint64_t v7;
  size_t v8;
  BOOL v9;
  size_t v10;
  _BOOL8 v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  __int16 v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  __int16 v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  _BYTE v46[12];
  int v47;
  __int16 v48;
  int v49;
  __int16 v50;
  unint64_t v51;
  size_t v52;
  uint64_t v53;

  if (!sub_21090D970(a2)
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 609, (uint64_t)"buffer.IsPlanar()", 17, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4)|| (v6 = sub_21090D838(a2), sub_2108FDFEC(v6) <= a3)&& sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 612, (uint64_t)"plane_index < num_planes", 24, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))
  {
LABEL_56:
    abort();
  }
  if (sub_21090D838(a2) != 875704438 && sub_21090D838(a2) != 875704422)
  {
    sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 623, (uint64_t)&unk_210A02D2A, 0, (uint64_t)"Can't view the given planar format", 34, (void (*)(void **))sub_2109EDDB4);
    goto LABEL_56;
  }
  v7 = sub_21090F054(a2, a3);
  v51 = sub_21090E9C0(a2, a3);
  v8 = sub_21090EF0C(a2, a3);
  if ((_DWORD)v51)
    v9 = HIDWORD(v51) == 0;
  else
    v9 = 1;
  v10 = v8 << 32;
  if (v9)
    v10 = 0;
  v11 = v51 != 0;
  if (a3)
  {
    v52 = v10 | (2 * v11);
    v53 = v7;
    sub_2108FE330(&v53, &v51, &v52, (uint64_t)&v43);
    *(_QWORD *)a1 = &off_24CA7A158;
    v12 = v43;
    v13 = v44;
    if (v44)
    {
      p_shared_owners = (unint64_t *)&v44->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
      v16 = *(_QWORD *)&v46[4];
      v17 = v49;
      v18 = v45;
      v19 = v50;
      do
        v20 = __ldxr(p_shared_owners);
      while (__stxr(v20 + 1, p_shared_owners));
      do
        v21 = __ldxr(p_shared_owners);
      while (__stxr(v21 + 1, p_shared_owners));
    }
    else
    {
      v16 = *(_QWORD *)&v46[4];
      v17 = v49;
      v18 = v45;
      v19 = v50;
    }
    *(_QWORD *)(a1 + 8) = v12;
    *(_QWORD *)(a1 + 16) = v13;
    *(_QWORD *)(a1 + 24) = v16;
    *(_DWORD *)(a1 + 32) = v17;
    *(_QWORD *)(a1 + 40) = v18;
    *(_DWORD *)(a1 + 48) = 5;
    *(_WORD *)(a1 + 52) = v19;
    if (v13)
    {
      v32 = (unint64_t *)&v13->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
      do
        v34 = __ldaxr(v32);
      while (__stlxr(v34 - 1, v32));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v35 = v44;
    if (!v44)
      return;
    v36 = (unint64_t *)&v44->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (v37)
      return;
LABEL_54:
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
    return;
  }
  v52 = v10 | v11;
  v53 = v7;
  sub_2108FE228(&v53, &v51, (uint64_t *)&v52, (uint64_t)&v43);
  *(_QWORD *)a1 = &off_24CA7A158;
  v22 = v43;
  v23 = v44;
  if (v44)
  {
    v24 = (unint64_t *)&v44->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
    v26 = v47;
    v28 = v45;
    v27 = *(_QWORD *)v46;
    v29 = v48;
    do
      v30 = __ldxr(v24);
    while (__stxr(v30 + 1, v24));
    do
      v31 = __ldxr(v24);
    while (__stxr(v31 + 1, v24));
  }
  else
  {
    v26 = v47;
    v28 = v45;
    v27 = *(_QWORD *)v46;
    v29 = v48;
  }
  *(_QWORD *)(a1 + 8) = v22;
  *(_QWORD *)(a1 + 16) = v23;
  *(_QWORD *)(a1 + 24) = v27;
  *(_DWORD *)(a1 + 32) = v26;
  *(_QWORD *)(a1 + 40) = v28;
  *(_DWORD *)(a1 + 48) = 1;
  *(_WORD *)(a1 + 52) = v29;
  if (v23)
  {
    v38 = (unint64_t *)&v23->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
    do
      v40 = __ldaxr(v38);
    while (__stlxr(v40 - 1, v38));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v35 = v44;
  if (v44)
  {
    v41 = (unint64_t *)&v44->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
      goto LABEL_54;
  }
}

void sub_2108F43D4(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t (**v22)();
  uint64_t *v23;
  std::__shared_weak_count *v24;

  v5 = *(uint64_t **)(a1 + 8);
  v6 = *(std::__shared_weak_count **)(a1 + 16);
  v23 = v5;
  v24 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v22 = &off_24CA7D7D8;
  if (v5)
  {
    v10 = *v5;
    v9 = (std::__shared_weak_count *)v5[1];
    if (!v9)
      goto LABEL_10;
    v11 = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (v13)
    {
LABEL_10:
      if (!v10)
        goto LABEL_12;
      goto LABEL_11;
    }
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if (v10)
LABEL_11:
      sub_210912D90((uint64_t)v23);
  }
LABEL_12:
  sub_2108F3FCC(a3, (uint64_t)&v22, a2);
  if (!v23)
    goto LABEL_20;
  v15 = *v23;
  v14 = (std::__shared_weak_count *)v23[1];
  if (!v14)
    goto LABEL_18;
  v16 = (unint64_t *)&v14->__shared_owners_;
  do
    v17 = __ldxr(v16);
  while (__stxr(v17 + 1, v16));
  do
    v18 = __ldaxr(v16);
  while (__stlxr(v18 - 1, v16));
  if (v18)
  {
LABEL_18:
    if (!v15)
      goto LABEL_20;
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  if (v15)
LABEL_19:
    sub_210912F6C((uint64_t)v23);
LABEL_20:
  v22 = &off_24CA7D7F8;
  v19 = v24;
  if (v24)
  {
    v20 = (unint64_t *)&v24->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_2108F455C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_2108F45AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_21090E154((uint64_t *)va);
  _Unwind_Resume(a1);
}

const char *sub_2108F45C0()
{
  return "{unknown buffer type}";
}

void sub_2108F45D4(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_2108F45DC()
{
  return 0;
}

uint64_t sub_2108F45E4(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24CA7AED0;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24CA7C080[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x212BCC6FC](a1, 0x10A3C40A1F8E8FFLL);
}

uint64_t sub_2108F465C(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24CA7B110;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24CA7C080[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x212BCC6FC](a1, 0x10A3C40A1F8E8FFLL);
}

uint64_t sub_2108F46D4(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24CA7B2C0;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24CA7C080[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x212BCC6FC](a1, 0x10A3C40A1F8E8FFLL);
}

uint64_t sub_2108F474C(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24CA7B470;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24CA7C080[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x212BCC6FC](a1, 0x10A3C40A1F8E8FFLL);
}

uint64_t sub_2108F47C4(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24CA7AF60;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24CA7C080[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x212BCC6FC](a1, 0x10A3C40ED729E16);
}

uint64_t sub_2108F483C(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24CA7B350;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24CA7C080[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x212BCC6FC](a1, 0x10A3C40ED729E16);
}

uint64_t sub_2108F48B4(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24CA7B500;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24CA7C080[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x212BCC6FC](a1, 0x10A3C40ED729E16);
}

uint64_t sub_2108F492C(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24CA7AFF0;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24CA7C080[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x212BCC6FC](a1, 0x10A3C40ED729E16);
}

uint64_t sub_2108F49A4(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24CA7B1A0;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24CA7C080[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x212BCC6FC](a1, 0x10A3C40ED729E16);
}

uint64_t sub_2108F4A1C(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24CA7B080;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24CA7C080[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x212BCC6FC](a1, 0x10A3C40ED729E16);
}

uint64_t sub_2108F4A94(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24CA7B3E0;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24CA7C080[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x212BCC6FC](a1, 0x10A3C40ED729E16);
}

uint64_t sub_2108F4B0C(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24CA7B590;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24CA7C080[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x212BCC6FC](a1, 0x10A3C40ED729E16);
}

uint64_t sub_2108F4B84(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24CA7B080;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24CA7C080[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x212BCC6FC](a1, 0x10A3C40ED729E16);
}

uint64_t sub_2108F4BFC(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24CA7B230;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24CA7C080[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x212BCC6FC](a1, 0x10A3C40ED729E16);
}

void sub_2108F4C74(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a2 = &off_24CA7D7F8;
  v2 = (std::__shared_weak_count *)a2[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

_QWORD *sub_2108F4CD8(uint64_t a1, _QWORD *a2)
{
  return sub_21090DE2C(a2);
}

_QWORD *sub_2108F4CE0(uint64_t a1, _QWORD *a2)
{
  return sub_21090E154(a2);
}

void sub_2108F4CE8(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a2 + 8);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

__n128 sub_2108F4CF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24CA7D7F8;
  result = *(__n128 *)(a3 + 8);
  *(__n128 *)(a2 + 8) = result;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  return result;
}

__n128 sub_2108F4D14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;

  result = *(__n128 *)(a3 + 8);
  *(__n128 *)(a2 + 8) = result;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a2 = &off_24CA7D7B8;
  return result;
}

__n128 sub_2108F4D30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;

  result = *(__n128 *)(a3 + 8);
  *(__n128 *)(a2 + 8) = result;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a2 = &off_24CA7D7D8;
  return result;
}

__n128 sub_2108F4D4C(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  return result;
}

void sub_2108F4D5C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char v10;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 24);
  if ((_DWORD)v5 == -1)
    goto LABEL_9;
  if ((_DWORD)v5)
  {
    ((void (*)(char *, uint64_t))off_24CA7C080[v5])(&v10, v4);
LABEL_9:
    *(_QWORD *)v4 = &off_24CA7D7F8;
    *(_OWORD *)(v4 + 8) = *(_OWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_DWORD *)(v4 + 24) = 0;
    return;
  }
  v6 = *(_OWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v7 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v6;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_2108F4E2C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  char v17;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 24);
  if ((_DWORD)v5 == -1)
    goto LABEL_18;
  if ((_DWORD)v5 != 1)
  {
    ((void (*)(char *, uint64_t))off_24CA7C080[v5])(&v17, v4);
LABEL_18:
    *(_OWORD *)(v4 + 8) = *(_OWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)v4 = &off_24CA7D7B8;
    *(_DWORD *)(v4 + 24) = 1;
    return;
  }
  v7 = *(uint64_t **)(a2 + 8);
  if (v7)
  {
    v9 = *v7;
    v8 = (std::__shared_weak_count *)v7[1];
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (v9)
      sub_210912E7C(*(_QWORD *)(a2 + 8));
  }
  v13 = *(_OWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v14 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v13;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_2108F4F74(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  char v17;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 24);
  if ((_DWORD)v5 == -1)
    goto LABEL_18;
  if ((_DWORD)v5 != 2)
  {
    ((void (*)(char *, uint64_t))off_24CA7C080[v5])(&v17, v4);
LABEL_18:
    *(_OWORD *)(v4 + 8) = *(_OWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)v4 = &off_24CA7D7D8;
    *(_DWORD *)(v4 + 24) = 2;
    return;
  }
  v7 = *(uint64_t **)(a2 + 8);
  if (v7)
  {
    v9 = *v7;
    v8 = (std::__shared_weak_count *)v7[1];
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (v9)
      sub_210912F6C(*(_QWORD *)(a2 + 8));
  }
  v13 = *(_OWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v14 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v13;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

__n128 sub_2108F50BC(__n128 **a1, __n128 *a2, __n128 *a3)
{
  __n128 *v4;
  uint64_t v5;
  __n128 result;
  std::__shared_weak_count *v7;
  char v8;

  v4 = *a1;
  v5 = (*a1)[1].n128_u32[2];
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 3)
  {
    ((void (*)(char *, __n128 *))off_24CA7C080[v5])(&v8, v4);
LABEL_6:
    result = *a3;
    *v4 = *a3;
    a3->n128_u64[0] = 0;
    a3->n128_u64[1] = 0;
    v4[1].n128_u32[2] = 3;
    return result;
  }
  result = *a3;
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  v7 = (std::__shared_weak_count *)a2->n128_u64[1];
  *a2 = result;
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
  return result;
}

void sub_2108F514C(uint64_t a1, int a2)
{
  __asm { BR              X10 }
}

void sub_2108F519C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *shared_owners;
  std::__shared_weak_count_vtbl *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  int shared_weak_owners;
  int v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count_vtbl *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  unsigned int v26;
  size_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count_vtbl *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  __int128 *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  _QWORD *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t (**v73)();
  std::__shared_weak_count *v74;
  std::__shared_weak_count *v75;
  __int128 v76;
  uint64_t v77;
  uint64_t (**v78)();
  std::__shared_weak_count *v79;
  std::__shared_weak_count *v80;

  v3 = (_QWORD *)operator new();
  v4 = v3;
  v5 = *(std::__shared_weak_count **)(v1 + 8);
  v6 = *(std::__shared_weak_count **)(v1 + 16);
  v78 = &off_24CA7D7F8;
  v79 = v5;
  v80 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v74 = v5;
    v75 = v6;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    v73 = &off_24CA7D7F8;
    *v3 = off_24CA7AED0;
    if (!v5)
      goto LABEL_19;
  }
  else
  {
    v74 = v5;
    v75 = 0;
    v73 = &off_24CA7D7F8;
    *v3 = off_24CA7AED0;
    if (!v5)
    {
LABEL_19:
      v16 = 0;
      goto LABEL_20;
    }
  }
  v11 = v5->__vftable;
  shared_owners = (std::__shared_weak_count *)v5->__shared_owners_;
  if (shared_owners)
  {
    v12 = (unint64_t *)&shared_owners->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    do
      v14 = __ldaxr(v12);
    while (__stlxr(v14 - 1, v12));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))shared_owners->__on_zero_shared)(shared_owners);
      std::__shared_weak_count::__release_weak(shared_owners);
    }
  }
  v5 = v74;
  if (!v11)
    goto LABEL_19;
  shared_weak_owners = v74->__shared_weak_owners_;
  if (shared_weak_owners == 2)
    v16 = 2;
  else
    v16 = shared_weak_owners == 1;
LABEL_20:
  v4[2] = &off_24CA7D7F8;
  *((_DWORD *)v4 + 2) = v16;
  v17 = v75;
  v4[3] = v5;
  v4[4] = v17;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  *((_DWORD *)v4 + 10) = 0;
  if (!v5)
    goto LABEL_107;
  v21 = v5->__vftable;
  v20 = (std::__shared_weak_count *)v5->__shared_owners_;
  if (v20)
  {
    v22 = (unint64_t *)&v20->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
    do
      v24 = __ldaxr(v22);
    while (__stlxr(v24 - 1, v22));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (!v21)
  {
LABEL_107:
    if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h", 677, (uint64_t)"IsValid()", 9, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))
    {
      goto LABEL_104;
    }
  }
  v25 = sub_21090EB64((uint64_t)&v73);
  v26 = sub_21090EC9C((uint64_t)&v73);
  v27 = sub_21090EDD4((uint64_t)&v73);
  v4[6] = v25 | ((unint64_t)v26 << 32);
  v4[7] = (v27 << 32) | 1;
  if (!v74)
  {
    v33 = 0;
    goto LABEL_48;
  }
  v28 = (std::__shared_weak_count *)v74->__shared_owners_;
  if (v28)
  {
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
    do
      v31 = __ldaxr(v29);
    while (__stlxr(v31 - 1, v29));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (!v74)
  {
    v33 = 0;
    if (!*((_DWORD *)v4 + 12))
      goto LABEL_52;
LABEL_49:
    if ((v33 == 0) == (*((_DWORD *)v4 + 13) == 0))
      goto LABEL_54;
LABEL_53:
    if (!sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/CVImage.cpp", 109, (uint64_t)"(buffer == nullptr) == extent.IsEmpty()", 39, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))goto LABEL_54;
LABEL_104:
    abort();
  }
  v33 = v74->__vftable;
  v32 = (std::__shared_weak_count *)v74->__shared_owners_;
  if (!v32)
    goto LABEL_48;
  v34 = (unint64_t *)&v32->__shared_owners_;
  do
    v35 = __ldxr(v34);
  while (__stxr(v35 + 1, v34));
  do
    v36 = __ldaxr(v34);
  while (__stlxr(v36 - 1, v34));
  if (v36)
  {
LABEL_48:
    if (!*((_DWORD *)v4 + 12))
      goto LABEL_52;
    goto LABEL_49;
  }
  ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
  std::__shared_weak_count::__release_weak(v32);
  if (*((_DWORD *)v4 + 12))
    goto LABEL_49;
LABEL_52:
  if (v33)
    goto LABEL_53;
LABEL_54:
  v73 = &off_24CA7D7F8;
  v37 = v75;
  if (v75)
  {
    v38 = (unint64_t *)&v75->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  *v4 = off_24CA7D688;
  v78 = &off_24CA7D7F8;
  v40 = v80;
  if (v80)
  {
    v41 = (unint64_t *)&v80->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v73 = &off_24CA7C0F0;
  v78 = (uint64_t (**)())v4;
  v43 = (std::__shared_weak_count *)operator new();
  v44 = v43;
  v43->__shared_owners_ = 0;
  v45 = (unint64_t *)&v43->__shared_owners_;
  v43->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA7C1E8;
  v43->__shared_weak_owners_ = 0;
  v43[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  v79 = v43;
  do
    v46 = __ldxr(v45);
  while (__stxr(v46 + 1, v45));
  v74 = (std::__shared_weak_count *)v4;
  v75 = v43;
  do
    v47 = __ldxr(v45);
  while (__stxr(v47 + 1, v45));
  do
    v48 = __ldaxr(v45);
  while (__stlxr(v48 - 1, v45));
  if (!v48)
  {
    ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
    std::__shared_weak_count::__release_weak(v44);
  }
  (*(void (**)(_QWORD *, uint64_t))(*v4 + 64))(v4, 1);
  v49 = *(__int128 **)(v2 - 88);
  v50 = *((_QWORD *)v49 + 2);
  v76 = *v49;
  v77 = v50;
  *(_QWORD *)(v2 - 88) = 0;
  MEMORY[0x212BCC6FC]();
  v51 = v75;
  if (v75)
  {
    v52 = (unint64_t *)&v75->__shared_owners_;
    do
      v53 = __ldxr(v52);
    while (__stxr(v53 + 1, v52));
    do
      v54 = __ldaxr(v52);
    while (__stlxr(v54 - 1, v52));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  v55 = v79;
  if (v79)
  {
    v56 = (unint64_t *)&v79->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  *(_QWORD *)v0 = &off_24CA7AA50;
  v58 = &v74->__vftable;
  v59 = v75;
  if (v75)
  {
    v60 = (unint64_t *)&v75->__shared_owners_;
    do
      v61 = __ldxr(v60);
    while (__stxr(v61 + 1, v60));
    v62 = HIDWORD(v77);
    v63 = *((_QWORD *)&v76 + 1);
    v64 = v76;
    do
      v65 = __ldxr(v60);
    while (__stxr(v65 + 1, v60));
    do
      v66 = __ldxr(v60);
    while (__stxr(v66 + 1, v60));
  }
  else
  {
    v62 = HIDWORD(v77);
    v63 = *((_QWORD *)&v76 + 1);
    v64 = v76;
  }
  *(_QWORD *)(v0 + 8) = v58;
  *(_QWORD *)(v0 + 16) = v59;
  *(_QWORD *)(v0 + 24) = v63;
  *(_DWORD *)(v0 + 32) = v62;
  *(_QWORD *)(v0 + 40) = v64;
  *(_DWORD *)(v0 + 48) = 1;
  *(_WORD *)(v0 + 52) = 256;
  if (v59)
  {
    v67 = (unint64_t *)&v59->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
    do
      v69 = __ldaxr(v67);
    while (__stlxr(v69 - 1, v67));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  v73 = &off_24CA7C0F0;
  v70 = v75;
  if (v75)
  {
    v71 = (unint64_t *)&v75->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
}

void sub_2108FA1B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  sub_2108A894C(v11);
  sub_2108A894C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2108FA1CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  sub_2108A894C(v11);
  sub_2108A894C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2108FA1E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  sub_2108A894C(v11);
  sub_2108A894C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2108FA204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  sub_2108A894C(v11);
  sub_2108A894C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2108FA220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  sub_2108A894C(v11);
  sub_2108A894C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2108FA23C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  sub_2108A894C(v11);
  sub_2108A894C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2108FA258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  sub_2108A894C(v11);
  sub_2108A894C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2108FA274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  sub_2108A894C(v11);
  sub_2108A894C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2108FA290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  sub_2108A894C(v11);
  sub_2108A894C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2108FA2AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  sub_2108A894C(v11);
  sub_2108A894C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2108FA2C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  sub_2108A894C(v11);
  sub_2108A894C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2108FA2E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  sub_2108A894C(v11);
  sub_2108A894C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2108FA300(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  *(_QWORD *)v1 = v3;
  v6 = *(unsigned int *)(v1 + 40);
  if ((_DWORD)v6 != -1)
    ((void (*)(uint64_t, uint64_t))off_24CA7C080[v6])(v4 - 88, v2);
  *(_DWORD *)(v1 + 40) = -1;
  MEMORY[0x212BCC6FC](v1, 0x10A3C40ED729E16);
  _Unwind_Resume(a1);
}

_QWORD *sub_2108FA6D8(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24CA7C0F0;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2108FA74C(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24CA7C0F0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BCC6FCLL);
}

uint64_t sub_2108FA7C0()
{
  return 1;
}

uint64_t sub_2108FA7C8(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_2108FA7D0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 32);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 44);
  return result;
}

uint64_t sub_2108FA7E4(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_2108FA864(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BCC6FCLL);
}

uint64_t sub_2108FA888(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    *(_QWORD *)v1 = off_24CA7AED0;
    v2 = *(unsigned int *)(v1 + 40);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_24CA7C080[v2])(&v3, v1 + 16);
    *(_DWORD *)(v1 + 40) = -1;
    return MEMORY[0x212BCC6FC](v1, 0x10A3C40A1F8E8FFLL);
  }
  return result;
}

uint64_t sub_2108FA904(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE1EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE1EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE1EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE1EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

_QWORD *sub_2108FA974(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24CA7C238;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2108FA9E8(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24CA7C238;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BCC6FCLL);
}

uint64_t sub_2108FAA5C()
{
  return 2;
}

uint64_t sub_2108FAA64(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_2108FAA6C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 32);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 44);
  return result;
}

uint64_t sub_2108FAA84(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_2108FAB04(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BCC6FCLL);
}

uint64_t sub_2108FAB28(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    *(_QWORD *)v1 = off_24CA7B110;
    v2 = *(unsigned int *)(v1 + 40);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_24CA7C080[v2])(&v3, v1 + 16);
    *(_DWORD *)(v1 + 40) = -1;
    return MEMORY[0x212BCC6FC](v1, 0x10A3C40A1F8E8FFLL);
  }
  return result;
}

uint64_t sub_2108FABA4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE2EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE2EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE2EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE2EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

_QWORD *sub_2108FAC14(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24CA7C380;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2108FAC88(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24CA7C380;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BCC6FCLL);
}

uint64_t sub_2108FACFC()
{
  return 3;
}

uint64_t sub_2108FAD04(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_2108FAD0C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 32);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 44);
  return result;
}

uint64_t sub_2108FAD24(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_2108FADA4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BCC6FCLL);
}

uint64_t sub_2108FADC8(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    *(_QWORD *)v1 = off_24CA7B2C0;
    v2 = *(unsigned int *)(v1 + 40);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_24CA7C080[v2])(&v3, v1 + 16);
    *(_DWORD *)(v1 + 40) = -1;
    return MEMORY[0x212BCC6FC](v1, 0x10A3C40A1F8E8FFLL);
  }
  return result;
}

uint64_t sub_2108FAE44(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE3EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE3EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE3EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE3EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

_QWORD *sub_2108FAEB4(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24CA7C4C8;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2108FAF28(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24CA7C4C8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BCC6FCLL);
}

uint64_t sub_2108FAF9C()
{
  return 4;
}

uint64_t sub_2108FAFA4(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_2108FAFAC@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 32);
  *(_DWORD *)(a2 + 8) = 4 * *(_DWORD *)(result + 44);
  return result;
}

uint64_t sub_2108FAFC4(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_2108FB044(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BCC6FCLL);
}

uint64_t sub_2108FB068(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    *(_QWORD *)v1 = off_24CA7B470;
    v2 = *(unsigned int *)(v1 + 40);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_24CA7C080[v2])(&v3, v1 + 16);
    *(_DWORD *)(v1 + 40) = -1;
    return MEMORY[0x212BCC6FC](v1, 0x10A3C40A1F8E8FFLL);
  }
  return result;
}

uint64_t sub_2108FB0E4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE4EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE4EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE4EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE4EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

_QWORD *sub_2108FB154(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24CA7C610;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2108FB1C8(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24CA7C610;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BCC6FCLL);
}

uint64_t sub_2108FB23C()
{
  return 5;
}

uint64_t sub_2108FB244(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_2108FB24C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_2108FB260(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_2108FB2E0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BCC6FCLL);
}

uint64_t sub_2108FB304(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    *(_QWORD *)v1 = off_24CA7AF60;
    v2 = *(unsigned int *)(v1 + 40);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_24CA7C080[v2])(&v3, v1 + 16);
    *(_DWORD *)(v1 + 40) = -1;
    return MEMORY[0x212BCC6FC](v1, 0x10A3C40ED729E16);
  }
  return result;
}

uint64_t sub_2108FB380(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE5EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE5EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE5EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE5EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

_QWORD *sub_2108FB3F0(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24CA7C758;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2108FB464(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24CA7C758;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BCC6FCLL);
}

uint64_t sub_2108FB4D8()
{
  return 7;
}

uint64_t sub_2108FB4E0(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_2108FB4E8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_2108FB500(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_2108FB580(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BCC6FCLL);
}

uint64_t sub_2108FB5A4(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    *(_QWORD *)v1 = off_24CA7B350;
    v2 = *(unsigned int *)(v1 + 40);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_24CA7C080[v2])(&v3, v1 + 16);
    *(_DWORD *)(v1 + 40) = -1;
    return MEMORY[0x212BCC6FC](v1, 0x10A3C40ED729E16);
  }
  return result;
}

uint64_t sub_2108FB620(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE7EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE7EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE7EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE7EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

_QWORD *sub_2108FB690(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24CA7C8A0;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2108FB704(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24CA7C8A0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BCC6FCLL);
}

uint64_t sub_2108FB778()
{
  return 8;
}

uint64_t sub_2108FB780(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_2108FB788@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 4 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_2108FB7A0(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_2108FB820(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BCC6FCLL);
}

uint64_t sub_2108FB844(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    *(_QWORD *)v1 = off_24CA7B500;
    v2 = *(unsigned int *)(v1 + 40);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_24CA7C080[v2])(&v3, v1 + 16);
    *(_DWORD *)(v1 + 40) = -1;
    return MEMORY[0x212BCC6FC](v1, 0x10A3C40ED729E16);
  }
  return result;
}

uint64_t sub_2108FB8C0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE8EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE8EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE8EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE8EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

_QWORD *sub_2108FB930(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24CA7C9E8;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2108FB9A4(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24CA7C9E8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BCC6FCLL);
}

uint64_t sub_2108FBA18()
{
  return 21;
}

uint64_t sub_2108FBA20(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_2108FBA28@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_2108FBA3C(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_2108FBABC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BCC6FCLL);
}

uint64_t sub_2108FBAE0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    *(_QWORD *)v1 = off_24CA7AFF0;
    v2 = *(unsigned int *)(v1 + 40);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_24CA7C080[v2])(&v3, v1 + 16);
    *(_DWORD *)(v1 + 40) = -1;
    return MEMORY[0x212BCC6FC](v1, 0x10A3C40ED729E16);
  }
  return result;
}

uint64_t sub_2108FBB5C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE21EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE21EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE21EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE21EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

_QWORD *sub_2108FBBCC(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24CA7CB30;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2108FBC40(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24CA7CB30;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BCC6FCLL);
}

uint64_t sub_2108FBCB4()
{
  return 22;
}

uint64_t sub_2108FBCBC(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_2108FBCC4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_2108FBCDC(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_2108FBD5C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BCC6FCLL);
}

uint64_t sub_2108FBD80(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    *(_QWORD *)v1 = off_24CA7B1A0;
    v2 = *(unsigned int *)(v1 + 40);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_24CA7C080[v2])(&v3, v1 + 16);
    *(_DWORD *)(v1 + 40) = -1;
    return MEMORY[0x212BCC6FC](v1, 0x10A3C40ED729E16);
  }
  return result;
}

uint64_t sub_2108FBDFC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE22EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE22EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE22EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE22EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

_QWORD *sub_2108FBE6C(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24CA7CC78;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2108FBEE0(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24CA7CC78;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BCC6FCLL);
}

uint64_t sub_2108FBF54()
{
  return 25;
}

uint64_t sub_2108FBF5C(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_2108FBF64@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_2108FBF78(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_2108FBFF8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BCC6FCLL);
}

uint64_t sub_2108FC01C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    *(_QWORD *)v1 = off_24CA7B080;
    v2 = *(unsigned int *)(v1 + 40);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_24CA7C080[v2])(&v3, v1 + 16);
    *(_DWORD *)(v1 + 40) = -1;
    return MEMORY[0x212BCC6FC](v1, 0x10A3C40ED729E16);
  }
  return result;
}

uint64_t sub_2108FC098(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE25EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE25EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE25EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE25EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

_QWORD *sub_2108FC108(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24CA7CDC0;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2108FC17C(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24CA7CDC0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BCC6FCLL);
}

uint64_t sub_2108FC1F0()
{
  return 31;
}

uint64_t sub_2108FC1F8(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_2108FC200@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_2108FC218(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_2108FC298(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BCC6FCLL);
}

uint64_t sub_2108FC2BC(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    *(_QWORD *)v1 = off_24CA7B3E0;
    v2 = *(unsigned int *)(v1 + 40);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_24CA7C080[v2])(&v3, v1 + 16);
    *(_DWORD *)(v1 + 40) = -1;
    return MEMORY[0x212BCC6FC](v1, 0x10A3C40ED729E16);
  }
  return result;
}

uint64_t sub_2108FC338(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE31EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE31EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE31EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE31EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

_QWORD *sub_2108FC3A8(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24CA7CF08;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2108FC41C(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24CA7CF08;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BCC6FCLL);
}

uint64_t sub_2108FC490()
{
  return 32;
}

uint64_t sub_2108FC498(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_2108FC4A0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 4 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_2108FC4B8(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_2108FC538(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BCC6FCLL);
}

uint64_t sub_2108FC55C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    *(_QWORD *)v1 = off_24CA7B590;
    v2 = *(unsigned int *)(v1 + 40);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_24CA7C080[v2])(&v3, v1 + 16);
    *(_DWORD *)(v1 + 40) = -1;
    return MEMORY[0x212BCC6FC](v1, 0x10A3C40ED729E16);
  }
  return result;
}

uint64_t sub_2108FC5D8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE32EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE32EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE32EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE32EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

_QWORD *sub_2108FC648(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24CA7D050;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2108FC6BC(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24CA7D050;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BCC6FCLL);
}

uint64_t sub_2108FC730()
{
  return 37;
}

uint64_t sub_2108FC738(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_2108FC740@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_2108FC754(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_2108FC7D4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BCC6FCLL);
}

uint64_t sub_2108FC7F8(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    *(_QWORD *)v1 = off_24CA7B080;
    v2 = *(unsigned int *)(v1 + 40);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_24CA7C080[v2])(&v3, v1 + 16);
    *(_DWORD *)(v1 + 40) = -1;
    return MEMORY[0x212BCC6FC](v1, 0x10A3C40ED729E16);
  }
  return result;
}

uint64_t sub_2108FC874(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE37EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE37EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE37EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE37EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

_QWORD *sub_2108FC8E4(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24CA7D198;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2108FC958(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24CA7D198;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BCC6FCLL);
}

uint64_t sub_2108FC9CC()
{
  return 38;
}

uint64_t sub_2108FC9D4(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_2108FC9DC@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_2108FC9F4(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_2108FCA74(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BCC6FCLL);
}

uint64_t sub_2108FCA98(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    *(_QWORD *)v1 = off_24CA7B230;
    v2 = *(unsigned int *)(v1 + 40);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_24CA7C080[v2])(&v3, v1 + 16);
    *(_DWORD *)(v1 + 40) = -1;
    return MEMORY[0x212BCC6FC](v1, 0x10A3C40ED729E16);
  }
  return result;
}

uint64_t sub_2108FCB14(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE38EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE38EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE38EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE38EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_2108FCB84(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  unint64_t v20;
  _QWORD v21[5];
  _QWORD *v22;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_2108B18D0(v5);
  v21[0] = v5;
  sub_2109E67F0((_QWORD *)(v5 + 16), a3);
  v6 = *(_DWORD *)(v5 + 120);
  if ((v6 & 0x10) != 0)
  {
    v9 = *(_QWORD *)(v5 + 112);
    v10 = *(_QWORD *)(v5 + 72);
    if (v9 < v10)
    {
      *(_QWORD *)(v5 + 112) = v10;
      v9 = v10;
    }
    v11 = *(const void **)(v5 + 64);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v20) = 0;
      v8 = __dst;
      goto LABEL_14;
    }
    v11 = *(const void **)(v5 + 40);
    v7 = *(_QWORD *)(v5 + 56) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_2108A4B7C();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v20 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v20) = v7;
  v8 = __dst;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v21[0];
  if (v21[0])
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v21[0] = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    *(_QWORD *)(v14 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v14 + 16) = v17;
    if (*(char *)(v14 + 111) < 0)
      operator delete(*(void **)(v14 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BCC66C](v14 + 128);
    MEMORY[0x212BCC6FC](v14, 0x10B2C40EED050F3);
  }
  v21[0] = a2;
  v21[1] = __dst;
  v21[2] = a2;
  v21[3] = __dst;
  v21[4] = __dst;
  v18 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v18 == -1)
    sub_2108B9060();
  v22 = v21;
  ((void (*)(_QWORD **, uint64_t))off_24CA7D2E8[v18])(&v22, a2);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
}

void sub_2108FCDD4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BCC6FC](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_2108FCDF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2108FCE14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_2109ED024((uint64_t *)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_2108FCE28(_DWORD ***a1)
{
  return sub_2108B9350(**a1, (char *)(*a1)[1]);
}

void sub_2108FCE34(uint64_t a1, uint64_t a2)
{
  sub_2108FCE44((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

void sub_2108FCE44(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_2108A4B7C();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24CA7D2D0[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_2108B9228((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_2108FCFF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_2108ABF6C(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_2108FD03C(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_2108FD134((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_2108A4B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_2108FD12C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_2108FD134(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_2108B327C();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_2108B2B1C();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_2108A4B7C();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_2108FD330(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2108B3680((uint64_t)va);
  _Unwind_Resume(a1);
}

size_t sub_2108FD344(_QWORD **a1)
{
  _DWORD *v1;
  const char *v2;
  uint64_t v3;
  size_t result;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v1 = (_DWORD *)**a1;
  v2 = (const char *)(*a1)[1];
  v3 = v1[6];
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, _DWORD *))off_24CA7D2D0[v3])(&v9, v1);
  v1[6] = -1;
  result = strlen(v2);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    sub_2108A4B7C();
  v5 = result;
  if (result >= 0x17)
  {
    v7 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v7 = result | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    *((_QWORD *)v1 + 1) = v5;
    *((_QWORD *)v1 + 2) = v8 | 0x8000000000000000;
    *(_QWORD *)v1 = v6;
  }
  else
  {
    *((_BYTE *)v1 + 23) = result;
    v6 = v1;
    if (!result)
      goto LABEL_11;
  }
  result = (size_t)memmove(v6, v2, v5);
LABEL_11:
  *((_BYTE *)v6 + v5) = 0;
  v1[6] = 1;
  return result;
}

void sub_2108FD430(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char v5;
  void *v6;
  const char *v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14;
  _BYTE v15[15];
  char v16;
  void *__p[2];
  unint64_t v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)((char *)v19 + 7) = *(_QWORD *)(a2 + 15);
  v4 = *(void **)a2;
  v19[0] = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v14 = v4;
  *(_QWORD *)v15 = v19[0];
  *(_QWORD *)&v15[7] = *(_QWORD *)((char *)v19 + 7);
  v16 = v5;
  memset(v19, 0, 15);
  v6 = __p;
  v7 = *(const char **)(v2 + 24);
  v8 = strlen(v7);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    sub_2108A4B7C();
  v9 = (void *)v8;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    v6 = operator new(v11 + 1);
    __p[1] = v9;
    v18 = v12 | 0x8000000000000000;
    __p[0] = v6;
LABEL_9:
    memmove(v6, v7, (size_t)v9);
    *((_BYTE *)v9 + (_QWORD)v6) = 0;
    v10 = *(unsigned int *)(v3 + 24);
    if ((_DWORD)v10 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v18) = v8;
  if (v8)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v10 = *(unsigned int *)(v3 + 24);
  if ((_DWORD)v10 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24CA7D2D0[v10])(&v13, v3);
LABEL_11:
  *(_DWORD *)(v3 + 24) = -1;
  sub_2108B9228((_QWORD *)v3, (uint64_t)&v14, 2uLL);
  *(_DWORD *)(v3 + 24) = 2;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((v16 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v14);
    return;
  }
  operator delete(__p[0]);
  if (v16 < 0)
    goto LABEL_15;
}

void sub_2108FD5E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_2108ABF6C(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2108FD62C(uint64_t a1, void **a2)
{
  const void *v3;
  _BYTE *v4;
  _QWORD *v5;
  size_t v6;
  size_t v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  size_t v18;
  size_t v19;
  void *v20;
  char *v21;
  void **v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  void **v27;

  v3 = *(const void **)(*(_QWORD *)a1 + 32);
  v5 = a2[1];
  v4 = a2[2];
  if (v5 < (_QWORD *)v4)
  {
    v6 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
    if (v6 > 0x7FFFFFFFFFFFFFF7)
      sub_2108A4B7C();
    v7 = v6;
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v8 = operator new(v14 + 1);
      v5[1] = v7;
      v5[2] = v15 | 0x8000000000000000;
      *v5 = v8;
    }
    else
    {
      *((_BYTE *)v5 + 23) = v6;
      v8 = v5;
      if (!v6)
        goto LABEL_19;
    }
    memmove(v8, v3, v7);
LABEL_19:
    *((_BYTE *)v8 + v7) = 0;
    v16 = (char *)(v5 + 3);
    a2[1] = v5 + 3;
    goto LABEL_39;
  }
  v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (_BYTE *)*a2) >> 3);
  if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_2108B327C();
  v10 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a2) >> 3);
  v11 = 2 * v10;
  if (2 * v10 <= v9 + 1)
    v11 = v9 + 1;
  if (v10 >= 0x555555555555555)
    v12 = 0xAAAAAAAAAAAAAAALL;
  else
    v12 = v11;
  if (v12)
  {
    if (v12 > 0xAAAAAAAAAAAAAAALL)
      sub_2108B2B1C();
    v13 = (char *)operator new(24 * v12);
  }
  else
  {
    v13 = 0;
  }
  v17 = &v13[24 * v9];
  v18 = strlen((const char *)v3);
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    sub_2108A4B7C();
  v19 = v18;
  if (v18 >= 0x17)
  {
    v24 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v24 = v18 | 7;
    v25 = v24 + 1;
    v20 = operator new(v24 + 1);
    *((_QWORD *)v17 + 1) = v19;
    *((_QWORD *)v17 + 2) = v25 | 0x8000000000000000;
    *(_QWORD *)v17 = v20;
  }
  else
  {
    v17[23] = v18;
    v20 = v17;
    if (!v18)
    {
      v21 = &v13[24 * v12];
      *v17 = 0;
      v16 = v17 + 24;
      v22 = (void **)*a2;
      v23 = (void **)a2[1];
      if (v23 == *a2)
        goto LABEL_36;
      do
      {
LABEL_30:
        v26 = *(_OWORD *)(v23 - 3);
        *((_QWORD *)v17 - 1) = *(v23 - 1);
        *(_OWORD *)(v17 - 24) = v26;
        v17 -= 24;
        *(v23 - 2) = 0;
        *(v23 - 1) = 0;
        *(v23 - 3) = 0;
        v23 -= 3;
      }
      while (v23 != v22);
      v23 = (void **)*a2;
      v27 = (void **)a2[1];
      *a2 = v17;
      a2[1] = v16;
      a2[2] = v21;
      while (v27 != v23)
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      goto LABEL_37;
    }
  }
  memmove(v20, v3, v19);
  v21 = &v13[24 * v12];
  *((_BYTE *)v20 + v19) = 0;
  v16 = v17 + 24;
  v22 = (void **)*a2;
  v23 = (void **)a2[1];
  if (v23 != *a2)
    goto LABEL_30;
LABEL_36:
  *a2 = v17;
  a2[1] = v16;
  a2[2] = v21;
LABEL_37:
  if (v23)
    operator delete(v23);
LABEL_39:
  a2[1] = v16;
}

void sub_2108FD8BC(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_2108FD8D4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_2108FD8DC(uint64_t result, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  _WORD *v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  unsigned __int8 v14;
  __int16 v15;

  v3 = result;
  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    *(_QWORD *)result = v4;
    *(_QWORD *)(result + 8) = v5;
    v8 = *a3;
    *(_QWORD *)(result + 32) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(result + 16) = v8;
    if (v4)
    {
      v9 = (_WORD *)(result + 40);
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      goto LABEL_12;
    }
LABEL_17:
    *(_WORD *)(result + 40) = 0;
    *(_BYTE *)(result + 41) = 0;
    return result;
  }
  *(_QWORD *)result = v4;
  *(_QWORD *)(result + 8) = 0;
  v12 = *a3;
  *(_QWORD *)(result + 32) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(result + 16) = v12;
  if (!v4)
    goto LABEL_17;
  v9 = (_WORD *)(result + 40);
LABEL_12:
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
  v14 = v13;
  if ((v13 & 0xFFFFFF) <= 0x10000)
    v14 = 0;
  v15 = v13 & 0xFF00;
  if ((v13 & 0xFF0000) == 0)
    v15 = 0;
  *v9 = v15 & 0xFF00 | v14;
  return v3;
}

void sub_2108FD9E8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2108FDA2C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2108FDA94(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BCC6FCLL);
}

uint64_t sub_2108FDAFC()
{
  return 3;
}

uint64_t sub_2108FDB04(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_2108FDB0C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 32);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 44);
  return result;
}

uint64_t sub_2108FDB24(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_2108FDBA8(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2108FDC10(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BCC6FCLL);
}

uint64_t sub_2108FDC78()
{
  return 5;
}

uint64_t sub_2108FDC80(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_2108FDC88@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_2108FDC9C(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_2108FDD20(uint64_t result, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  _WORD *v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  unsigned __int8 v16;
  __int16 v17;

  v3 = result;
  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    *(_QWORD *)result = v4;
    *(_QWORD *)(result + 8) = v5;
    v8 = *a3;
    v9 = a3[2];
    *(_OWORD *)(result + 32) = a3[1];
    *(_OWORD *)(result + 48) = v9;
    *(_OWORD *)(result + 16) = v8;
    if (v4)
    {
      v10 = (_WORD *)(result + 64);
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      goto LABEL_12;
    }
LABEL_17:
    *(_WORD *)(result + 64) = 0;
    *(_BYTE *)(result + 65) = 0;
    return result;
  }
  *(_QWORD *)result = v4;
  *(_QWORD *)(result + 8) = 0;
  v13 = *a3;
  v14 = a3[2];
  *(_OWORD *)(result + 32) = a3[1];
  *(_OWORD *)(result + 48) = v14;
  *(_OWORD *)(result + 16) = v13;
  if (!v4)
    goto LABEL_17;
  v10 = (_WORD *)(result + 64);
LABEL_12:
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
  v16 = v15;
  if ((v15 & 0xFFFFFF) <= 0x10000)
    v16 = 0;
  v17 = v15 & 0xFF00;
  if ((v15 & 0xFF0000) == 0)
    v17 = 0;
  *v10 = v17 & 0xFF00 | v16;
  return v3;
}

void sub_2108FDE2C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2108FDE70(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2108FDED8(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BCC6FCLL);
}

uint64_t sub_2108FDF40()
{
  return 8;
}

uint64_t sub_2108FDF48(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_2108FDF50@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 4 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_2108FDF68(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_2108FDFEC(int a1)
{
  uint64_t result;
  int v3;
  int v4;
  unsigned int v5;

  result = 1;
  if (a1 <= 1278226487)
  {
    if (a1 > 875704421)
    {
      if (a1 > 875836533)
      {
        if (a1 != 875836534)
        {
          if (a1 == 1094862674)
            return result;
          v3 = 1111970369;
          goto LABEL_37;
        }
      }
      else if (a1 != 875704422 && a1 != 875704438 && a1 != 875836518)
      {
        goto LABEL_39;
      }
      return 2;
    }
    if (a1 > 843264055)
    {
      v4 = -843264056;
LABEL_23:
      v5 = a1 + v4;
      if (v5 > 0x30 || ((1 << v5) & 0x1400000000001) == 0)
        goto LABEL_39;
      return result;
    }
    if (a1 != 24 && a1 != 32)
    {
      v3 = 842285639;
      goto LABEL_37;
    }
  }
  else
  {
    if (a1 <= 1647392358)
    {
      if (a1 > 1278226741)
      {
        if (a1 > 1380410944)
        {
          if (a1 == 1380410945)
            return result;
          v3 = 1380411457;
        }
        else
        {
          if (a1 == 1278226742)
            return result;
          v3 = 1380401729;
        }
        goto LABEL_37;
      }
      v4 = -1278226488;
      goto LABEL_23;
    }
    if (a1 > 1717855599)
    {
      if (a1 > 1751410031)
      {
        if (a1 == 1751410032)
          return result;
        v3 = 1751411059;
      }
      else
      {
        if (a1 == 1717855600)
          return result;
        v3 = 1717856627;
      }
LABEL_37:
      if (a1 == v3)
        return result;
LABEL_39:
      sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/PixelFormat/include/Kit/PixelFormat/Properties.h", 396, (uint64_t)&unk_210A02D2A, 0, (uint64_t)"not yet implemented", 19, (void (*)(void **))sub_2109EDDB4);
      abort();
    }
    if (a1 != 1647392359 && a1 != 1647589490)
    {
      v3 = 1647719521;
      goto LABEL_37;
    }
  }
  return result;
}

void sub_2108FE228(_QWORD *a1@<X0>, _DWORD *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v13 = 0;
  v14 = 0;
  if (a2[1])
    v5 = *a2 == 0;
  else
    v5 = 1;
  v6 = *(_QWORD *)a2;
  if (v5)
    v6 = 0;
  v7 = *a3;
  *(_QWORD *)&v11 = *a1;
  *((_QWORD *)&v11 + 1) = v6;
  v12 = v7;
  if (HIDWORD(v6) * HIDWORD(v7) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
  sub_2108FD8DC(a4, &v13, &v11);
  v8 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_2108FE31C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_2108A894C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2108FE330(uint64_t *a1@<X0>, _DWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  _BYTE v20[12];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v18 = 0;
  v19 = 0;
  v5 = *a1;
  if (a2[1])
    v6 = *a2 == 0;
  else
    v6 = 1;
  v7 = *(_QWORD *)a2;
  if (v6)
    v7 = 0;
  *(_QWORD *)&v20[4] = v7;
  *(_DWORD *)v20 = 2;
  v8 = *(_QWORD *)v20;
  *(_DWORD *)v20 = 1;
  *(_QWORD *)&v20[4] = *a3;
  *(_QWORD *)&v12 = v5;
  *((_QWORD *)&v12 + 1) = v8;
  v13 = HIDWORD(v7);
  v14 = *(_QWORD *)v20;
  v15 = *(_DWORD *)&v20[8];
  v16 = v7;
  v17 = *(_QWORD *)&v20[4];
  if (*(_DWORD *)&v20[8] * HIDWORD(v7) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
  sub_2108FDD20(a4, &v18, &v12);
  v9 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_2108FE488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_2108A894C((uint64_t)va);
  _Unwind_Resume(a1);
}

void ***sub_2108FE49C(void ***result)
{
  void **v1;
  uint64_t v2;
  uint64_t v3;
  size_t v4;
  void **v5;
  int v6;
  int v7;
  BOOL v8;
  void **v9;
  int v10;
  _BYTE *v11;
  int v12;
  uint64_t v13;
  int i;
  int v15;
  _BYTE *v16;
  int v17;
  BOOL v18;
  char *v19;
  int v20;

  v1 = *result;
  v2 = *((unsigned int *)*result + 4);
  if ((_DWORD)v2 == 1)
  {
    v3 = *((unsigned int *)v1 + 5);
    v4 = *((unsigned int *)v1 + 2);
    v5 = result[1];
    if ((_DWORD)v3 == (_DWORD)v4)
    {
      return (void ***)memset(*v1, *(unsigned __int8 *)v5, (*((_DWORD *)v1 + 3) * v3));
    }
    else
    {
      v17 = *((_DWORD *)v1 + 3);
      if ((_DWORD)v4)
        v18 = v17 == 0;
      else
        v18 = 1;
      if (!v18)
      {
        v19 = (char *)*v1;
        v20 = v17 - 1;
        if (v17 != 1)
        {
          do
          {
            memset(v19, *(unsigned __int8 *)v5, v4);
            v19 += v3;
            --v20;
          }
          while (v20);
        }
        return (void ***)memset(v19, *(unsigned __int8 *)v5, v4);
      }
    }
  }
  else
  {
    v6 = *((_DWORD *)v1 + 2);
    v7 = *((_DWORD *)v1 + 3);
    if (v6)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
    {
      v9 = result[1];
      v10 = v6 - 1;
      v11 = *v1;
      v12 = v7 - 1;
      if (v12)
      {
        v13 = *((unsigned int *)v1 + 5);
        if (v10)
        {
          for (i = 0; i != v12; ++i)
          {
            v15 = v10;
            v16 = v11;
            do
            {
              *v16 = *(_BYTE *)v9;
              v16 += v2;
              --v15;
            }
            while (v15);
            *v16 = *(_BYTE *)v9;
            v11 += v13;
          }
        }
        else
        {
          do
          {
            *v11 = *(_BYTE *)v9;
            v11 += v13;
            --v12;
          }
          while (v12);
        }
      }
      for (; v10; --v10)
      {
        *v11 = *(_BYTE *)v9;
        v11 += v2;
      }
      *v11 = *(_BYTE *)v9;
    }
  }
  return result;
}

size_t *sub_2108FE614(size_t *result)
{
  size_t v1;
  size_t v2;
  uint64_t v3;
  uint64_t v4;
  int v6;
  int v7;
  BOOL v8;
  int v9;
  char *v10;
  size_t *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int i;
  int v16;
  char *v17;
  int v18;
  unsigned int v19;
  size_t v20;
  char *v21;
  BOOL v22;
  BOOL v23;
  size_t v24;

  v1 = *result;
  v2 = result[1];
  v3 = *(unsigned int *)(*result + 16);
  v4 = *(unsigned int *)(v2 + 16);
  if ((_DWORD)v3 == 1 && (_DWORD)v4 == 1)
  {
    v18 = *(_DWORD *)(v1 + 20);
    if (v18 == *(_DWORD *)(v2 + 20))
    {
      v19 = *(_DWORD *)(v1 + 8);
      if (v18 == v19)
      {
        v20 = (*(_DWORD *)(v1 + 12) * v18);
        v21 = *(char **)v1;
        if ((_DWORD)v20)
          v22 = v21 == 0;
        else
          v22 = 0;
        if (v22)
        {
          if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))
          {
            abort();
          }
        }
        else if (!(_DWORD)v20)
        {
          return result;
        }
        return (size_t *)memmove(*(void **)v2, v21, v20);
      }
    }
    else
    {
      v19 = *(_DWORD *)(v1 + 8);
    }
    v24 = v19;
    if (v19)
      v23 = *(_DWORD *)(v1 + 12) == 0;
    else
      v23 = 1;
    if (!v23)
      return sub_2108FE7D8(&v24, (char **)v1, (char **)v2);
  }
  else
  {
    v6 = *(_DWORD *)(v1 + 8);
    v7 = *(_DWORD *)(v1 + 12);
    if (v6)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
    {
      v9 = v6 - 1;
      v10 = *(char **)v1;
      v11 = *(size_t **)v2;
      v12 = v7 - 1;
      if (v12)
      {
        v13 = *(unsigned int *)(v2 + 20);
        v14 = *(unsigned int *)(v1 + 20);
        if (v9)
        {
          for (i = 0; i != v12; ++i)
          {
            v16 = v9;
            v17 = v10;
            result = v11;
            do
            {
              *(_BYTE *)result = *v17;
              v17 += v3;
              result = (size_t *)((char *)result + v4);
              --v16;
            }
            while (v16);
            *(_BYTE *)result = *v17;
            v10 += v14;
            v11 = (size_t *)((char *)v11 + v13);
          }
        }
        else
        {
          do
          {
            *(_BYTE *)v11 = *v10;
            v10 += v14;
            v11 = (size_t *)((char *)v11 + v13);
            --v12;
          }
          while (v12);
        }
      }
      for (; v9; --v9)
      {
        *(_BYTE *)v11 = *v10;
        v10 += v3;
        v11 = (size_t *)((char *)v11 + v4);
      }
      *(_BYTE *)v11 = *v10;
    }
  }
  return result;
}

size_t *sub_2108FE7D8(size_t *result, char **a2, char **a3)
{
  int v3;
  BOOL v4;
  size_t *v5;
  char *v6;
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  size_t v12;

  v3 = *((_DWORD *)a2 + 3);
  if (*((_DWORD *)a2 + 2))
    v4 = v3 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v5 = result;
    v6 = *a2;
    v7 = *a3;
    v8 = v3 - 1;
    if (v3 != 1)
    {
      v9 = *((unsigned int *)a3 + 5);
      v10 = *((unsigned int *)a2 + 5);
      do
      {
        v11 = *v5;
        if (!v6 && v11)
        {
          if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))
          {
            goto LABEL_19;
          }
        }
        else if (!v11)
        {
          goto LABEL_11;
        }
        result = (size_t *)memmove(v7, v6, v11);
LABEL_11:
        v6 += v10;
        v7 += v9;
        --v8;
      }
      while (v8);
    }
    v12 = *v5;
    if (!v6 && v12)
    {
      if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))
      {
LABEL_19:
        abort();
      }
      return (size_t *)memmove(v7, v6, v12);
    }
    if (v12)
      return (size_t *)memmove(v7, v6, v12);
  }
  return result;
}

_QWORD *sub_2108FE924(_QWORD *result)
{
  char **v1;
  size_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned __int8 *v6;
  size_t v7;
  int v8;
  int v9;
  BOOL v10;
  unsigned __int8 *v12;
  int v13;
  char *v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  char *v19;
  int v20;
  BOOL v21;
  char *v23;
  int v24;

  v1 = (char **)*result;
  v2 = *(unsigned int *)(*result + 8);
  v3 = *(unsigned int *)(*result + 24);
  if ((_DWORD)v3 == *(_DWORD *)(*result + 20) * (_DWORD)v2)
  {
    v4 = *((unsigned int *)v1 + 7);
    v5 = *((_DWORD *)v1 + 3);
    v6 = (unsigned __int8 *)result[1];
    v7 = (v5 * v2);
    if ((_DWORD)v4 == v5 * (_DWORD)v3)
    {
      return memset(*v1, *v6, (*((_DWORD *)v1 + 4) * v7));
    }
    else
    {
      v20 = *((_DWORD *)v1 + 4);
      if ((_DWORD)v2)
        v21 = v5 == 0;
      else
        v21 = 1;
      if (!v21 && v20 != 0)
      {
        v23 = *v1;
        v24 = v20 - 1;
        if (v20 != 1)
        {
          do
          {
            memset(v23, *v6, v7);
            v23 += v4;
            --v24;
          }
          while (v24);
        }
        return memset(v23, *v6, v7);
      }
    }
  }
  else
  {
    v9 = *((_DWORD *)v1 + 3);
    v8 = *((_DWORD *)v1 + 4);
    if ((_DWORD)v2)
      v10 = v9 == 0;
    else
      v10 = 1;
    if (!v10 && v8 != 0)
    {
      v12 = (unsigned __int8 *)result[1];
      v13 = v9 - 1;
      v14 = *v1;
      v15 = v8 - 1;
      if (v8 != 1)
      {
        v16 = *((unsigned int *)v1 + 7);
        if (v9 == 1)
        {
          do
          {
            memset(v14, *v12, v2);
            v14 += v16;
            --v15;
          }
          while (v15);
        }
        else
        {
          v17 = 0;
          do
          {
            v18 = v13;
            v19 = v14;
            do
            {
              memset(v19, *v12, v2);
              v19 += v3;
              --v18;
            }
            while (v18);
            memset(v19, *v12, v2);
            v14 += v16;
            ++v17;
          }
          while (v17 != v15);
        }
      }
      for (; v13; --v13)
      {
        memset(v14, *v12, v2);
        v14 += v3;
      }
      return memset(v14, *v12, v2);
    }
  }
  return result;
}

size_t *sub_2108FEAD0(size_t *result)
{
  size_t v1;
  size_t v2;
  int v4;
  int v5;
  BOOL v6;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _BYTE *v17;
  size_t *v18;
  _BYTE *v19;
  int v20;

  v2 = *result;
  v1 = result[1];
  if (*(_DWORD *)(*result + 20) == 1 && *(_DWORD *)(v1 + 20) == 1)
    return sub_2108FEBEC(result);
  v4 = *(_DWORD *)(v2 + 12);
  v5 = *(_DWORD *)(v2 + 16);
  if (*(_DWORD *)(v2 + 8))
    v6 = v4 == 0;
  else
    v6 = 1;
  if (!v6 && v5 != 0)
  {
    v8 = v4 - 1;
    v9 = *(unsigned int *)(v2 + 24);
    v10 = *(unsigned int *)(v1 + 24);
    v11 = *(_BYTE **)v2;
    v12 = *(_BYTE **)v1;
    v13 = v5 - 1;
    if (v13)
    {
      v14 = *(unsigned int *)(v1 + 28);
      v15 = *(unsigned int *)(v2 + 28);
      if (v8)
      {
        v16 = 0;
        v17 = v11 + 1;
        result = (size_t *)(v12 + 1);
        do
        {
          v18 = result;
          v19 = v17;
          v20 = v8;
          do
          {
            *((_BYTE *)v18 - 1) = *(v19 - 1);
            *(_BYTE *)v18 = *v19;
            v19 += v9;
            v18 = (size_t *)((char *)v18 + v10);
            --v20;
          }
          while (v20);
          *((_BYTE *)v18 - 1) = *(v19 - 1);
          *(_BYTE *)v18 = *v19;
          v11 += v15;
          v12 += v14;
          ++v16;
          v17 += v15;
          result = (size_t *)((char *)result + v14);
        }
        while (v16 != v13);
      }
      else
      {
        do
        {
          *v12 = *v11;
          v12[1] = v11[1];
          v11 += v15;
          v12 += v14;
          --v13;
        }
        while (v13);
      }
    }
    for (; v8; --v8)
    {
      *v12 = *v11;
      v12[1] = v11[1];
      v11 += v9;
      v12 += v10;
    }
    *v12 = *v11;
    v12[1] = v11[1];
  }
  return result;
}

size_t *sub_2108FEBEC(size_t *result)
{
  size_t v1;
  size_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  int v7;
  BOOL v8;
  size_t v10;
  void *v11;
  const void *v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  unint64_t v19;

  v1 = *result;
  v2 = result[1];
  v3 = *(unsigned int *)(*result + 24);
  v4 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v3 == (_DWORD)v4)
  {
    v5 = *(_DWORD *)(v1 + 8);
    if ((_DWORD)v3 == *(_DWORD *)(v1 + 20) * v5)
      return sub_2108FECC0(result);
  }
  else
  {
    v5 = *(_DWORD *)(v1 + 8);
  }
  v10 = v5;
  v7 = *(_DWORD *)(v1 + 12);
  v6 = *(_DWORD *)(v1 + 16);
  if (v5)
    v8 = v7 == 0;
  else
    v8 = 1;
  if (!v8 && v6 != 0)
  {
    v13 = 0;
    v14 = v5 - 1;
    v15 = *(unsigned int *)(v1 + 20) | ((unint64_t)*(unsigned int *)(v2 + 20) << 32);
    v16 = v7 - 1;
    v17 = v3 | (v4 << 32);
    v18 = v6 - 1;
    v19 = *(unsigned int *)(v1 + 28) | ((unint64_t)*(unsigned int *)(v2 + 28) << 32);
    v12 = *(const void **)v1;
    v11 = *(void **)v2;
    return (size_t *)sub_2108FEF20(&v13, &v10, &v12, &v11);
  }
  return result;
}

size_t *sub_2108FECC0(size_t *result)
{
  size_t v1;
  size_t v2;
  int v3;
  int v4;
  size_t v5;
  char *v6;
  BOOL v7;
  int v8;
  BOOL v9;
  size_t v11;

  v1 = *result;
  v2 = result[1];
  v3 = *(_DWORD *)(*result + 28);
  v4 = *(_DWORD *)(*result + 12);
  if (v3 == *(_DWORD *)(v2 + 28) && v3 == *(_DWORD *)(v1 + 24) * v4)
  {
    v5 = (*(_DWORD *)(v1 + 8) * v4 * *(_DWORD *)(v1 + 16));
    v6 = *(char **)v1;
    if ((_DWORD)v5)
      v7 = v6 == 0;
    else
      v7 = 0;
    if (v7)
    {
      if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))
      {
        abort();
      }
    }
    else if (!(_DWORD)v5)
    {
      return result;
    }
    return (size_t *)memmove(*(void **)v2, v6, v5);
  }
  v8 = *(_DWORD *)(v1 + 8);
  v11 = (v8 * v4);
  if (v8)
    v9 = v4 == 0;
  else
    v9 = 1;
  if (!v9 && *(_DWORD *)(v1 + 16) != 0)
    return sub_2108FEDCC(&v11, (char **)v1, (char **)v2);
  return result;
}

size_t *sub_2108FEDCC(size_t *result, char **a2, char **a3)
{
  int v3;
  BOOL v4;
  size_t *v6;
  char *v7;
  char *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  size_t v13;

  v3 = *((_DWORD *)a2 + 4);
  if (*((_DWORD *)a2 + 2))
    v4 = *((_DWORD *)a2 + 3) == 0;
  else
    v4 = 1;
  if (!v4 && v3 != 0)
  {
    v6 = result;
    v7 = *a2;
    v8 = *a3;
    v9 = v3 - 1;
    if (v3 != 1)
    {
      v10 = *((unsigned int *)a3 + 7);
      v11 = *((unsigned int *)a2 + 7);
      do
      {
        v12 = *v6;
        if (!v7 && v12)
        {
          if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))
          {
            goto LABEL_22;
          }
        }
        else if (!v12)
        {
          goto LABEL_14;
        }
        result = (size_t *)memmove(v8, v7, v12);
LABEL_14:
        v7 += v11;
        v8 += v10;
        --v9;
      }
      while (v9);
    }
    v13 = *v6;
    if (!v7 && v13)
    {
      if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))
      {
LABEL_22:
        abort();
      }
      return (size_t *)memmove(v8, v7, v13);
    }
    if (v13)
      return (size_t *)memmove(v8, v7, v13);
  }
  return result;
}

_DWORD *sub_2108FEF20(_DWORD *result, size_t *a2, const void **a3, void **a4)
{
  size_t *v4;
  _DWORD *v5;
  char *v6;
  char *v7;
  int v8;
  unsigned __int8 *v9;
  char *v10;
  unsigned int v11;
  char *v12;
  char *v13;
  int v14;
  size_t v15;
  unsigned __int8 v16;
  unsigned __int8 *v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, const char *, uint64_t, void *, _QWORD);
  size_t v23;
  unsigned int v24;
  unsigned int i;
  char *v26;
  _BOOL4 v27;
  size_t v28;
  char *v29;
  size_t v30;
  size_t v31;
  BOOL v32;
  char *v33;
  _BOOL4 v34;
  int v35;
  char *v36;
  char *v37;

  v4 = a2;
  v5 = result;
  v6 = (char *)*a3;
  v7 = (char *)*a4;
  if (result[8])
  {
    v8 = 0;
    v9 = (unsigned __int8 *)&qword_254A75F38;
    do
    {
      v35 = v8;
      v11 = v5[5];
      v36 = v7;
      v37 = v6;
      v12 = v7;
      v13 = v6;
      if (v11)
      {
        v14 = 0;
        v12 = v7;
        v13 = v37;
        while (1)
        {
          v15 = *v4;
          if (!v13)
          {
            if (v15)
              break;
          }
          if (v15)
            goto LABEL_9;
LABEL_10:
          v13 += v5[6];
          v12 += v5[7];
          if (++v14 >= v11)
            goto LABEL_26;
        }
        sub_2109EDAB0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4);
        v16 = atomic_load(v9);
        if ((v16 & 1) == 0 && __cxa_guard_acquire((__guard *)v9))
        {
          __cxa_atexit((void (*)(void *))sub_2109EDF34, &qword_254A75F00, &dword_21089F000);
          __cxa_guard_release((__guard *)v9);
        }
        v17 = v9;
        if (!byte_254A75F28 || byte_254A75F30)
        {
          v19 = qword_254A75F00;
          v20 = unk_254A75F08;
          while (v19 != v20)
          {
            v22 = *(void (**)(uint64_t, const char *, uint64_t, void *, _QWORD))v19;
            v21 = *(_QWORD *)(v19 + 8);
            v19 += 16;
            v22(v21, "ptr != nullptr || size == 0", 27, &unk_210A02D2A, 0);
          }
        }
        v9 = v17;
        v18 = atomic_load(v17);
        if ((v18 & 1) == 0 && __cxa_guard_acquire((__guard *)v17))
        {
          __cxa_atexit((void (*)(void *))sub_2109EDF34, &qword_254A75F00, &dword_21089F000);
          __cxa_guard_release((__guard *)v17);
        }
        v4 = a2;
        if (!byte_254A75F28)
          goto LABEL_48;
        qword_254A75F18(unk_254A75F20, "ptr != nullptr || size == 0", 27, &unk_210A02D2A, 0);
LABEL_9:
        result = memmove(v12, v13, v15);
        v11 = v5[5];
        goto LABEL_10;
      }
LABEL_26:
      v23 = *v4;
      if (!v13 && v23)
      {
        v10 = v37;
        if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))
        {
          goto LABEL_48;
        }
      }
      else
      {
        v10 = v37;
        if (!v23)
          goto LABEL_5;
      }
      result = memmove(v12, v13, v23);
LABEL_5:
      v6 = &v10[v5[9]];
      v7 = &v36[v5[10]];
      v8 = v35 + 1;
    }
    while ((v35 + 1) < v5[8]);
  }
  v24 = v5[5];
  if (v24)
  {
    for (i = 0; i < v24; ++i)
    {
      v30 = *v4;
      if (!v6 && v30)
      {
        v26 = v7;
        v27 = sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4);
        v7 = v26;
        if (v27)
          goto LABEL_48;
      }
      else if (!v30)
      {
        goto LABEL_34;
      }
      v28 = v30;
      v29 = v7;
      result = memmove(v7, v6, v28);
      v7 = v29;
      v24 = v5[5];
LABEL_34:
      v6 += v5[6];
      v7 += v5[7];
    }
  }
  v31 = *v4;
  if (v6)
    v32 = 1;
  else
    v32 = v31 == 0;
  if (!v32)
  {
    v33 = v7;
    v34 = sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4);
    v7 = v33;
    if (v34)
LABEL_48:
      abort();
    return memmove(v7, v6, v31);
  }
  if (v31)
    return memmove(v7, v6, v31);
  return result;
}

void sub_2108FF2D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  BOOL v5;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _BYTE *v16;
  _BYTE *v17;
  _BYTE *v18;
  _BYTE *v19;
  int v20;

  v3 = *(_DWORD *)(a2 + 12);
  v4 = *(_DWORD *)(a2 + 16);
  if (*(_DWORD *)(a2 + 8))
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5 && v4 != 0)
  {
    v7 = v3 - 1;
    v8 = *(unsigned int *)(a2 + 24);
    v9 = *(unsigned int *)(a3 + 24);
    v10 = *(_BYTE **)a2;
    v11 = *(_BYTE **)a3;
    v12 = v4 - 1;
    if (v12)
    {
      v13 = *(unsigned int *)(a3 + 28);
      v14 = *(unsigned int *)(a2 + 28);
      if (v7)
      {
        v15 = 0;
        v16 = v11 + 2;
        v17 = v10 + 2;
        do
        {
          v18 = v17;
          v19 = v16;
          v20 = v7;
          do
          {
            *(v19 - 2) = *(v18 - 2);
            *(v19 - 1) = *(v18 - 1);
            *v19 = *v18;
            v19 += v9;
            v18 += v8;
            --v20;
          }
          while (v20);
          *(v19 - 2) = *(v18 - 2);
          *(v19 - 1) = *(v18 - 1);
          *v19 = *v18;
          v10 += v14;
          v11 += v13;
          ++v15;
          v16 += v13;
          v17 += v14;
        }
        while (v15 != v12);
      }
      else
      {
        do
        {
          *v11 = *v10;
          v11[1] = v10[1];
          v11[2] = v10[2];
          v10 += v14;
          v11 += v13;
          --v12;
        }
        while (v12);
      }
    }
    for (; v7; --v7)
    {
      *v11 = *v10;
      v11[1] = v10[1];
      v11[2] = v10[2];
      v10 += v8;
      v11 += v9;
    }
    *v11 = *v10;
    v11[1] = v10[1];
    v11[2] = v10[2];
  }
}

uint64_t sub_2108FF3F8(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;

  if (a3[1])
    v4 = *a3 == 0;
  else
    v4 = 1;
  v5 = *(_QWORD *)a3;
  if (v4)
    v5 = 0;
  if ((_DWORD)v5)
    v6 = 3;
  else
    v6 = 0;
  LODWORD(v7) = v6 * v5;
  if (HIDWORD(v5))
    v7 = v7;
  else
    v7 = 0;
  LODWORD(v9) = 1;
  *(_QWORD *)((char *)&v9 + 4) = v6 | (v7 << 32);
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = __PAIR64__(v5, 3);
  *(_DWORD *)(a1 + 16) = HIDWORD(v5);
  *(_QWORD *)(a1 + 20) = v9;
  *(_DWORD *)(a1 + 28) = v7;
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)((char *)&v9 + 4);
  if ((_DWORD)v7 * HIDWORD(v5) == -1
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
  return a1;
}

_DWORD *sub_2108FF510(_DWORD *result, uint64_t a2, _BYTE ***a3, _BYTE *a4)
{
  unsigned int v4;
  _BYTE *v5;
  unsigned int v6;
  unsigned int v7;

  if (result[5])
  {
    v4 = 0;
    do
    {
      *(_QWORD *)a2 = a4;
      v5 = a4;
      if (result[3])
      {
        v6 = 0;
        v5 = a4;
        do
        {
          *(_QWORD *)a2 = v5;
          *v5 = ***a3;
          *(_BYTE *)(*(_QWORD *)a2 + 1) = ***a3;
          *(_BYTE *)(*(_QWORD *)a2 + 2) = ***a3;
          *(_BYTE *)(*(_QWORD *)a2 + 3) = ***a3;
          v5 += result[4];
          ++v6;
        }
        while (v6 < result[3]);
      }
      *(_QWORD *)a2 = v5;
      *v5 = ***a3;
      *(_BYTE *)(*(_QWORD *)a2 + 1) = ***a3;
      *(_BYTE *)(*(_QWORD *)a2 + 2) = ***a3;
      *(_BYTE *)(*(_QWORD *)a2 + 3) = ***a3;
      a4 += result[6];
      ++v4;
    }
    while (v4 < result[5]);
  }
  *(_QWORD *)a2 = a4;
  if (result[3])
  {
    v7 = 0;
    do
    {
      *(_QWORD *)a2 = a4;
      *a4 = ***a3;
      *(_BYTE *)(*(_QWORD *)a2 + 1) = ***a3;
      *(_BYTE *)(*(_QWORD *)a2 + 2) = ***a3;
      *(_BYTE *)(*(_QWORD *)a2 + 3) = ***a3;
      a4 += result[4];
      ++v7;
    }
    while (v7 < result[3]);
  }
  *(_QWORD *)a2 = a4;
  *a4 = ***a3;
  *(_BYTE *)(*(_QWORD *)a2 + 1) = ***a3;
  *(_BYTE *)(*(_QWORD *)a2 + 2) = ***a3;
  *(_BYTE *)(*(_QWORD *)a2 + 3) = ***a3;
  return result;
}

void sub_2108FF6CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  BOOL v5;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _BYTE *v16;
  _BYTE *v17;
  _BYTE *v18;
  _BYTE *v19;
  int v20;

  v3 = *(_DWORD *)(a2 + 12);
  v4 = *(_DWORD *)(a2 + 16);
  if (*(_DWORD *)(a2 + 8))
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5 && v4 != 0)
  {
    v7 = v3 - 1;
    v8 = *(unsigned int *)(a2 + 24);
    v9 = *(unsigned int *)(a3 + 24);
    v10 = *(_BYTE **)a2;
    v11 = *(_BYTE **)a3;
    v12 = v4 - 1;
    if (v12)
    {
      v13 = *(unsigned int *)(a3 + 28);
      v14 = *(unsigned int *)(a2 + 28);
      if (v7)
      {
        v15 = 0;
        v16 = v11 + 3;
        v17 = v10 + 1;
        do
        {
          v18 = v17;
          v19 = v16;
          v20 = v7;
          do
          {
            *(v19 - 3) = *(v18 - 1);
            *(v19 - 2) = *v18;
            *(v19 - 1) = v18[1];
            *v19 = v18[2];
            v19 += v9;
            v18 += v8;
            --v20;
          }
          while (v20);
          *(v19 - 3) = *(v18 - 1);
          *(v19 - 2) = *v18;
          *(v19 - 1) = v18[1];
          *v19 = v18[2];
          v10 += v14;
          v11 += v13;
          ++v15;
          v16 += v13;
          v17 += v14;
        }
        while (v15 != v12);
      }
      else
      {
        do
        {
          *v11 = *v10;
          v11[1] = v10[1];
          v11[2] = v10[2];
          v11[3] = v10[3];
          v10 += v14;
          v11 += v13;
          --v12;
        }
        while (v12);
      }
    }
    for (; v7; --v7)
    {
      *v11 = *v10;
      v11[1] = v10[1];
      v11[2] = v10[2];
      v11[3] = v10[3];
      v10 += v8;
      v11 += v9;
    }
    *v11 = *v10;
    v11[1] = v10[1];
    v11[2] = v10[2];
    v11[3] = v10[3];
  }
}

uint64_t sub_2108FF81C(uint64_t result)
{
  uint64_t v1;
  const __int16 *v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  int v9;
  BOOL v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int16 *v14;
  unint64_t v15;
  int16x8_t v16;
  int16x8_t *v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  _QWORD v21[3];
  _DWORD v22[5];
  _QWORD v23[2];

  v1 = *(_QWORD *)result;
  v2 = *(const __int16 **)(result + 8);
  v3 = *(unsigned int *)(*(_QWORD *)result + 8);
  v5 = *(_DWORD *)(*(_QWORD *)result + 16);
  v4 = *(_DWORD *)(*(_QWORD *)result + 20);
  if (v4 == v5 * (_DWORD)v3)
  {
    v6 = (*(_DWORD *)(v1 + 12) * v3);
    v7 = *(_QWORD *)v1;
    if ((_DWORD)v6)
      v8 = v7 == 0;
    else
      v8 = 0;
    if (v8)
    {
      result = sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4);
      if ((_DWORD)result)
        abort();
    }
    else if (!(_DWORD)v6)
    {
      return result;
    }
    v12 = v6 - ((_DWORD)v6 != 0) + 1;
    if (v12 < 0x10)
      goto LABEL_19;
    v13 = 2 * v6;
    if (!(_DWORD)v6)
      v13 = 2;
    if (v7 < (unint64_t)(v2 + 1) && v7 + v13 > (unint64_t)v2)
    {
LABEL_19:
      v14 = (__int16 *)v7;
LABEL_20:
      v15 = v6 + 1;
      do
      {
        *v14++ = *v2;
        --v15;
      }
      while (v15 > 1);
      return result;
    }
    v14 = (__int16 *)(v7 + 2 * (v12 & 0xFFFFFFFFFFFFFFF0));
    v6 -= v12 & 0xFFFFFFFFFFFFFFF0;
    v16 = vld1q_dup_s16(v2);
    v17 = (int16x8_t *)(v7 + 16);
    v18 = v12 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v17[-1] = v16;
      *v17 = v16;
      v17 += 2;
      v18 -= 16;
    }
    while (v18);
    if (v12 != (v12 & 0xFFFFFFFFFFFFFFF0))
      goto LABEL_20;
  }
  else
  {
    v20 = 0;
    v19 = v3;
    v21[0] = &v20;
    v21[1] = &v19;
    v21[2] = v2;
    v9 = *(_DWORD *)(v1 + 12);
    if ((_DWORD)v3)
      v10 = v9 == 0;
    else
      v10 = 1;
    if (!v10)
    {
      v22[0] = 0;
      v22[1] = v3 - 1;
      v22[2] = v5;
      v22[3] = v9 - 1;
      v22[4] = v4;
      v11 = *(_QWORD *)v1;
      v23[0] = 0;
      v23[1] = 0;
      return sub_2108FF9AC((uint64_t)v22, (uint64_t)v23, (uint64_t)v21, v11);
    }
  }
  return result;
}

uint64_t sub_2108FF9AC(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  int v7;
  uint64_t v8;
  unsigned int i;
  const __int16 *v10;
  uint64_t v11;
  __int16 *v12;
  BOOL v13;
  int16x8_t v14;
  int16x8_t *v15;
  unint64_t v16;
  BOOL v17;
  unint64_t v18;
  uint64_t *v19;
  const __int16 *v20;
  uint64_t v21;
  BOOL v22;
  __int16 *v23;
  uint64_t v24;
  int16x8_t v25;
  int16x8_t *v26;
  unint64_t v27;
  unint64_t v28;

  v4 = a4;
  v7 = *(_DWORD *)(result + 8);
  *(_QWORD *)a2 = a4;
  *(_DWORD *)(a2 + 8) = v7;
  if (*(_DWORD *)(result + 12))
  {
    v8 = result;
    for (i = 0; i < *(_DWORD *)(v8 + 12); ++i)
    {
      *(_QWORD *)a2 = v4;
      v10 = *(const __int16 **)(a3 + 16);
      v11 = **(_QWORD **)(a3 + 8);
      if (!v4)
      {
        if (v11)
        {
          result = sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4);
          if ((_DWORD)result)
            goto LABEL_39;
        }
      }
      if (v11 >= 1)
      {
        if ((unint64_t)v11 >= 0x10)
        {
          v13 = v4 >= (unint64_t)(v10 + 1) || (unint64_t)v10 >= v4 + 2 * v11;
          v12 = (__int16 *)v4;
          if (v13)
          {
            v12 = (__int16 *)(v4 + 2 * (v11 & 0xFFFFFFFFFFFFFFF0));
            v14 = vld1q_dup_s16(v10);
            v15 = (int16x8_t *)(v4 + 16);
            v16 = v11 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v15[-1] = v14;
              *v15 = v14;
              v15 += 2;
              v16 -= 16;
            }
            while (v16);
            v17 = v11 == (v11 & 0x7FFFFFFFFFFFFFF0);
            v11 &= 0xFu;
            if (v17)
              goto LABEL_3;
          }
        }
        else
        {
          v12 = (__int16 *)v4;
        }
        v18 = v11 + 1;
        do
        {
          *v12++ = *v10;
          --v18;
        }
        while (v18 > 1);
      }
LABEL_3:
      v4 += 2 * *(unsigned int *)(v8 + 16);
    }
  }
  *(_QWORD *)a2 = v4;
  v19 = *(uint64_t **)(a3 + 8);
  v20 = *(const __int16 **)(a3 + 16);
  v21 = *v19;
  if (!v4)
  {
    if (v21)
    {
      result = sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4);
      if ((_DWORD)result)
LABEL_39:
        abort();
    }
  }
  if (v21 >= 1)
  {
    if ((unint64_t)v21 < 0x10
      || (v4 < (unint64_t)(v20 + 1) ? (v22 = (unint64_t)v20 >= v4 + 2 * v21) : (v22 = 1), !v22))
    {
      v23 = (__int16 *)v4;
      v24 = v21;
LABEL_36:
      v28 = v24 + 1;
      do
      {
        *v23++ = *v20;
        --v28;
      }
      while (v28 > 1);
      return result;
    }
    v23 = (__int16 *)(v4 + 2 * (v21 & 0xFFFFFFFFFFFFFFF0));
    v24 = v21 & 0xF;
    v25 = vld1q_dup_s16(v20);
    v26 = (int16x8_t *)(v4 + 16);
    v27 = v21 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v26[-1] = v25;
      *v26 = v25;
      v26 += 2;
      v27 -= 16;
    }
    while (v27);
    if (v21 != (v21 & 0x7FFFFFFFFFFFFFF0))
      goto LABEL_36;
  }
  return result;
}

uint64_t *sub_2108FFBBC(uint64_t *result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v6;
  int v7;
  BOOL v8;
  int v9;
  char *v10;
  _WORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _WORD *v18;
  char *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  BOOL v26;
  uint64_t v27;
  char *v28;
  BOOL v29;
  uint64_t v30;

  v3 = *((unsigned int *)result + 4);
  v4 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v3 == 1 && (_DWORD)v4 == 1)
  {
    v23 = *((_DWORD *)result + 5);
    v24 = *((_DWORD *)result + 2);
    if (v23 == *(_DWORD *)(a2 + 20) && v23 == v24)
    {
      v27 = (*((_DWORD *)result + 3) * v23);
      v28 = (char *)*result;
      if ((_DWORD)v27)
        v29 = v28 == 0;
      else
        v29 = 0;
      if (v29)
      {
        if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))
        {
          abort();
        }
      }
      else if (!(_DWORD)v27)
      {
        return result;
      }
      return (uint64_t *)memmove(*(void **)a2, v28, 2 * v27);
    }
    v30 = *((unsigned int *)result + 2);
    if (v24)
      v26 = *((_DWORD *)result + 3) == 0;
    else
      v26 = 1;
    if (!v26)
      return sub_2108FFD98(&v30, (char **)result, (char **)a2);
  }
  else
  {
    v6 = *((_DWORD *)result + 2);
    v7 = *((_DWORD *)result + 3);
    if (v6)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
    {
      v9 = v6 - 1;
      v10 = (char *)*result;
      v11 = *(_WORD **)a2;
      v12 = v7 - 1;
      if (v12)
      {
        v13 = *(unsigned int *)(a2 + 20);
        v14 = *((unsigned int *)result + 5);
        if (!v9)
        {
          do
          {
            *v11 = *(_WORD *)v10;
            v10 += 2 * v14;
            v11 += v13;
            --v12;
          }
          while (v12);
LABEL_38:
          *v11 = *(_WORD *)v10;
          return result;
        }
        v15 = 0;
        v16 = 2 * v14;
        v17 = 2 * v13;
        result = (uint64_t *)(2 * v4);
        do
        {
          v18 = v11;
          v19 = v10;
          v20 = v9;
          do
          {
            *v18 = *(_WORD *)v19;
            v19 += 2 * v3;
            v18 = (_WORD *)((char *)result + (_QWORD)v18);
            --v20;
          }
          while (v20);
          *v18 = *(_WORD *)v19;
          v10 += v16;
          v11 = (_WORD *)((char *)v11 + v17);
          ++v15;
        }
        while (v15 != v12);
      }
      if (v9)
      {
        v21 = 2 * v3;
        v22 = 2 * v4;
        do
        {
          *v11 = *(_WORD *)v10;
          v10 += v21;
          v11 = (_WORD *)((char *)v11 + v22);
          --v9;
        }
        while (v9);
      }
      goto LABEL_38;
    }
  }
  return result;
}

uint64_t *sub_2108FFD98(uint64_t *result, char **a2, char **a3)
{
  int v3;
  BOOL v4;
  uint64_t *v5;
  char *v6;
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *((_DWORD *)a2 + 3);
  if (*((_DWORD *)a2 + 2))
    v4 = v3 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v5 = result;
    v6 = *a2;
    v7 = *a3;
    v8 = v3 - 1;
    if (v3 != 1)
    {
      v9 = 2 * *((unsigned int *)a2 + 5);
      v10 = 2 * *((unsigned int *)a3 + 5);
      do
      {
        v11 = *v5;
        if (!v6 && v11)
        {
          if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))
          {
            goto LABEL_19;
          }
        }
        else if (!v11)
        {
          goto LABEL_11;
        }
        result = (uint64_t *)memmove(v7, v6, 2 * v11);
LABEL_11:
        v6 += v9;
        v7 += v10;
        --v8;
      }
      while (v8);
    }
    v12 = *v5;
    if (!v6 && v12)
    {
      if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))
      {
LABEL_19:
        abort();
      }
      return (uint64_t *)memmove(v7, v6, 2 * v12);
    }
    if (v12)
      return (uint64_t *)memmove(v7, v6, 2 * v12);
  }
  return result;
}

uint64_t sub_2108FFEEC(uint64_t result)
{
  uint64_t v1;
  const __int16 *v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  int v9;
  int v10;
  BOOL v11;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int16 *v16;
  unint64_t v17;
  int16x8_t v18;
  int16x8_t *v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  _QWORD v23[3];
  _DWORD v24[7];
  _QWORD v25[3];

  v1 = *(_QWORD *)result;
  v2 = *(const __int16 **)(result + 8);
  v3 = *(_DWORD *)(*(_QWORD *)result + 12);
  v5 = *(_DWORD *)(*(_QWORD *)result + 24);
  v4 = *(_DWORD *)(*(_QWORD *)result + 28);
  if (v4 == v5 * v3)
  {
    v6 = (*(_DWORD *)(v1 + 8) * v3 * *(_DWORD *)(v1 + 16));
    v7 = *(_QWORD *)v1;
    if ((_DWORD)v6)
      v8 = v7 == 0;
    else
      v8 = 0;
    if (v8)
    {
      result = sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4);
      if ((_DWORD)result)
        abort();
    }
    else if (!(_DWORD)v6)
    {
      return result;
    }
    v14 = v6 - ((_DWORD)v6 != 0) + 1;
    if (v14 < 0x10)
      goto LABEL_22;
    v15 = 2 * v6;
    if (!(_DWORD)v6)
      v15 = 2;
    if (v7 < (unint64_t)(v2 + 1) && v7 + v15 > (unint64_t)v2)
    {
LABEL_22:
      v16 = (__int16 *)v7;
LABEL_23:
      v17 = v6 + 1;
      do
      {
        *v16++ = *v2;
        --v17;
      }
      while (v17 > 1);
      return result;
    }
    v16 = (__int16 *)(v7 + 2 * (v14 & 0xFFFFFFFFFFFFFFF0));
    v6 -= v14 & 0xFFFFFFFFFFFFFFF0;
    v18 = vld1q_dup_s16(v2);
    v19 = (int16x8_t *)(v7 + 16);
    v20 = v14 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v19[-1] = v18;
      *v19 = v18;
      v19 += 2;
      v20 -= 16;
    }
    while (v20);
    if (v14 != (v14 & 0xFFFFFFFFFFFFFFF0))
      goto LABEL_23;
  }
  else
  {
    v22 = 0;
    v9 = *(_DWORD *)(v1 + 8);
    v21 = (v9 * v3);
    v23[0] = &v22;
    v23[1] = &v21;
    v23[2] = v2;
    v10 = *(_DWORD *)(v1 + 16);
    if (v3)
      v11 = v9 == 0;
    else
      v11 = 1;
    if (!v11 && v10 != 0)
    {
      v24[0] = 0;
      v24[1] = v9 - 1;
      v24[2] = *(_DWORD *)(v1 + 20);
      v24[3] = v3 - 1;
      v24[4] = v5;
      v24[5] = v10 - 1;
      v24[6] = v4;
      v13 = *(_QWORD *)v1;
      memset(v25, 0, sizeof(v25));
      return sub_2109000A0((_BOOL8)v24, (uint64_t)v25, (uint64_t)v23, v13);
    }
  }
  return result;
}

BOOL sub_2109000A0(_BOOL8 result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  unsigned int *v9;
  unsigned int i;
  const __int16 *v11;
  uint64_t v12;
  __int16 *v13;
  BOOL v14;
  int16x8_t v15;
  int16x8_t *v16;
  unint64_t v17;
  BOOL v18;
  unint64_t v19;
  uint64_t *v20;
  const __int16 *v21;
  uint64_t v22;
  BOOL v23;
  __int16 *v24;
  uint64_t v25;
  int16x8_t v26;
  int16x8_t *v27;
  unint64_t v28;
  unint64_t v29;

  v4 = a4;
  v7 = *(unsigned int *)(result + 16);
  v8 = *(unsigned int *)(result + 8) | (unint64_t)(v7 << 32);
  *(_QWORD *)a2 = a4;
  *(_QWORD *)(a2 + 8) = v8;
  *(_DWORD *)(a2 + 16) = v7;
  if (*(_DWORD *)(result + 20))
  {
    v9 = (unsigned int *)result;
    for (i = 0; i < v9[5]; ++i)
    {
      *(_QWORD *)a2 = v4;
      v11 = *(const __int16 **)(a3 + 16);
      v12 = **(_QWORD **)(a3 + 8);
      if (!v4)
      {
        if (v12)
        {
          result = sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4);
          if (result)
            goto LABEL_39;
        }
      }
      if (v12 >= 1)
      {
        if ((unint64_t)v12 >= 0x10)
        {
          v14 = v4 >= (unint64_t)(v11 + 1) || (unint64_t)v11 >= v4 + 2 * v12;
          v13 = (__int16 *)v4;
          if (v14)
          {
            v13 = (__int16 *)(v4 + 2 * (v12 & 0xFFFFFFFFFFFFFFF0));
            v15 = vld1q_dup_s16(v11);
            v16 = (int16x8_t *)(v4 + 16);
            v17 = v12 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v16[-1] = v15;
              *v16 = v15;
              v16 += 2;
              v17 -= 16;
            }
            while (v17);
            v18 = v12 == (v12 & 0x7FFFFFFFFFFFFFF0);
            v12 &= 0xFu;
            if (v18)
              goto LABEL_3;
          }
        }
        else
        {
          v13 = (__int16 *)v4;
        }
        v19 = v12 + 1;
        do
        {
          *v13++ = *v11;
          --v19;
        }
        while (v19 > 1);
      }
LABEL_3:
      v4 += 2 * v9[6];
    }
  }
  *(_QWORD *)a2 = v4;
  v20 = *(uint64_t **)(a3 + 8);
  v21 = *(const __int16 **)(a3 + 16);
  v22 = *v20;
  if (!v4)
  {
    if (v22)
    {
      result = sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4);
      if (result)
LABEL_39:
        abort();
    }
  }
  if (v22 >= 1)
  {
    if ((unint64_t)v22 < 0x10
      || (v4 < (unint64_t)(v21 + 1) ? (v23 = (unint64_t)v21 >= v4 + 2 * v22) : (v23 = 1), !v23))
    {
      v24 = (__int16 *)v4;
      v25 = v22;
LABEL_36:
      v29 = v25 + 1;
      do
      {
        *v24++ = *v21;
        --v29;
      }
      while (v29 > 1);
      return result;
    }
    v24 = (__int16 *)(v4 + 2 * (v22 & 0xFFFFFFFFFFFFFFF0));
    v25 = v22 & 0xF;
    v26 = vld1q_dup_s16(v21);
    v27 = (int16x8_t *)(v4 + 16);
    v28 = v22 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v27[-1] = v26;
      *v27 = v26;
      v27 += 2;
      v28 -= 16;
    }
    while (v28);
    if (v22 != (v22 & 0x7FFFFFFFFFFFFFF0))
      goto LABEL_36;
  }
  return result;
}

uint64_t sub_2109002B8(uint64_t result, unint64_t *a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v7;
  unsigned int i;
  const __int16 *v9;
  uint64_t v10;
  __int16 *v11;
  BOOL v12;
  int16x8_t v13;
  int16x8_t *v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  uint64_t *v18;
  const __int16 *v19;
  uint64_t v20;
  BOOL v21;
  __int16 *v22;
  uint64_t v23;
  int16x8_t v24;
  int16x8_t *v25;
  unint64_t v26;
  unint64_t v27;

  v4 = a4;
  *a2 = a4;
  if (*(_DWORD *)(result + 12))
  {
    v7 = result;
    for (i = 0; i < *(_DWORD *)(v7 + 12); ++i)
    {
      *a2 = v4;
      v9 = *(const __int16 **)(a3 + 16);
      v10 = **(_QWORD **)(a3 + 8);
      if (!v4)
      {
        if (v10)
        {
          result = sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4);
          if ((_DWORD)result)
            goto LABEL_39;
        }
      }
      if (v10 >= 1)
      {
        if ((unint64_t)v10 >= 0x10)
        {
          v12 = v4 >= (unint64_t)(v9 + 1) || (unint64_t)v9 >= v4 + 2 * v10;
          v11 = (__int16 *)v4;
          if (v12)
          {
            v11 = (__int16 *)(v4 + 2 * (v10 & 0xFFFFFFFFFFFFFFF0));
            v13 = vld1q_dup_s16(v9);
            v14 = (int16x8_t *)(v4 + 16);
            v15 = v10 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v14[-1] = v13;
              *v14 = v13;
              v14 += 2;
              v15 -= 16;
            }
            while (v15);
            v16 = v10 == (v10 & 0x7FFFFFFFFFFFFFF0);
            v10 &= 0xFu;
            if (v16)
              goto LABEL_3;
          }
        }
        else
        {
          v11 = (__int16 *)v4;
        }
        v17 = v10 + 1;
        do
        {
          *v11++ = *v9;
          --v17;
        }
        while (v17 > 1);
      }
LABEL_3:
      v4 += 2 * *(unsigned int *)(v7 + 16);
    }
  }
  *a2 = v4;
  v18 = *(uint64_t **)(a3 + 8);
  v19 = *(const __int16 **)(a3 + 16);
  v20 = *v18;
  if (!v4)
  {
    if (v20)
    {
      result = sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4);
      if ((_DWORD)result)
LABEL_39:
        abort();
    }
  }
  if (v20 >= 1)
  {
    if ((unint64_t)v20 < 0x10
      || (v4 < (unint64_t)(v19 + 1) ? (v21 = (unint64_t)v19 >= v4 + 2 * v20) : (v21 = 1), !v21))
    {
      v22 = (__int16 *)v4;
      v23 = v20;
LABEL_36:
      v27 = v23 + 1;
      do
      {
        *v22++ = *v19;
        --v27;
      }
      while (v27 > 1);
      return result;
    }
    v22 = (__int16 *)(v4 + 2 * (v20 & 0xFFFFFFFFFFFFFFF0));
    v23 = v20 & 0xF;
    v24 = vld1q_dup_s16(v19);
    v25 = (int16x8_t *)(v4 + 16);
    v26 = v20 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v25[-1] = v24;
      *v25 = v24;
      v25 += 2;
      v26 -= 16;
    }
    while (v26);
    if (v20 != (v20 & 0x7FFFFFFFFFFFFFF0))
      goto LABEL_36;
  }
  return result;
}

_QWORD **sub_2109004C0(_QWORD **result, uint64_t a2)
{
  int v2;
  int v3;
  BOOL v4;
  int v6;
  uint64_t v7;
  _WORD *v8;
  int v9;
  uint64_t v10;
  _WORD *v11;
  int v12;
  _QWORD **v13;
  int v14;

  v2 = *(_DWORD *)(a2 + 12);
  v3 = *(_DWORD *)(a2 + 16);
  if (*(_DWORD *)(a2 + 8))
    v4 = v2 == 0;
  else
    v4 = 1;
  if (!v4 && v3 != 0)
  {
    v6 = v2 - 1;
    v7 = *(unsigned int *)(a2 + 24);
    v8 = *(_WORD **)a2;
    v9 = v3 - 1;
    if (v3 == 1)
    {
      v11 = (_WORD *)**result;
      if (!v6)
      {
LABEL_19:
        *v8 = *v11;
        v8[1] = *v11;
        v8[2] = *v11;
        return result;
      }
    }
    else
    {
      v10 = *(unsigned int *)(a2 + 28);
      v11 = (_WORD *)**result;
      if (!v6)
      {
        do
        {
          *v8 = *v11;
          v8[1] = *v11;
          v8[2] = *v11;
          v8 += v10;
          --v9;
        }
        while (v9);
        goto LABEL_19;
      }
      v12 = 0;
      v13 = (_QWORD **)(v8 + 2);
      do
      {
        result = v13;
        v14 = v6;
        do
        {
          *((_WORD *)result - 2) = *v11;
          *((_WORD *)result - 1) = *v11;
          *(_WORD *)result = *v11;
          result = (_QWORD **)((char *)result + 2 * v7);
          --v14;
        }
        while (v14);
        *((_WORD *)result - 2) = *v11;
        *((_WORD *)result - 1) = *v11;
        *(_WORD *)result = *v11;
        v8 += v10;
        ++v12;
        v13 = (_QWORD **)((char *)v13 + 2 * v10);
      }
      while (v12 != v9);
    }
    do
    {
      *v8 = *v11;
      v8[1] = *v11;
      v8[2] = *v11;
      v8 += v7;
      --v6;
    }
    while (v6);
    goto LABEL_19;
  }
  return result;
}

uint64_t *sub_2109005E8(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  unsigned int v4;
  int v5;
  int v6;
  uint64_t v7;
  char *v8;
  BOOL v9;
  BOOL v10;
  uint64_t v12;

  v1 = *result;
  v2 = result[1];
  v3 = *(_DWORD *)(*result + 24);
  if (v3 == *(_DWORD *)(v2 + 24))
  {
    v4 = *(_DWORD *)(v1 + 8);
    if (v3 == *(_DWORD *)(v1 + 20) * v4)
    {
      v5 = *(_DWORD *)(v1 + 28);
      if (v5 != *(_DWORD *)(v2 + 28))
        return (uint64_t *)sub_21090071C((_DWORD *)*result, (char **)v2);
      v6 = *(_DWORD *)(v1 + 12);
      if (v5 != v6 * v3)
        return (uint64_t *)sub_21090071C((_DWORD *)*result, (char **)v2);
      v7 = v6 * v4 * *(_DWORD *)(v1 + 16);
      v8 = *(char **)v1;
      if ((_DWORD)v7)
        v9 = v8 == 0;
      else
        v9 = 0;
      if (v9)
      {
        if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))
        {
          abort();
        }
      }
      else if (!(_DWORD)v7)
      {
        return result;
      }
      return (uint64_t *)memmove(*(void **)v2, v8, 2 * v7);
    }
  }
  else
  {
    v4 = *(_DWORD *)(v1 + 8);
  }
  v12 = v4;
  if (v4)
    v10 = *(_DWORD *)(v1 + 12) == 0;
  else
    v10 = 1;
  if (!v10 && *(_DWORD *)(v1 + 16) != 0)
    return sub_210900870(&v12, (char **)v1, (char **)v2);
  return result;
}

_DWORD *sub_21090071C(_DWORD *result, char **a2)
{
  int v2;
  int v3;
  int v4;
  BOOL v5;
  uint64_t v7;
  char *v8;
  char *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  v2 = result[2];
  v3 = result[3];
  v4 = result[4];
  if (v2)
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5 && v4 != 0)
  {
    v7 = (v3 * v2);
    v8 = *(char **)result;
    v9 = *a2;
    v10 = v4 - 1;
    if (v4 == 1)
    {
LABEL_17:
      if (!(_DWORD)v7 || v8)
      {
        if (!(_DWORD)v7)
          return result;
      }
      else if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))
      {
        goto LABEL_16;
      }
      return memmove(v9, v8, 2 * v7);
    }
    if ((_DWORD)v7)
    {
      v11 = 2 * result[7];
      v12 = 2 * *((unsigned int *)a2 + 7);
      while (v8
           || !sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))
      {
        result = memmove(v9, v8, 2 * v7);
        v8 += v11;
        v9 += v12;
        if (!--v10)
          goto LABEL_17;
      }
LABEL_16:
      abort();
    }
  }
  return result;
}

uint64_t *sub_210900870(uint64_t *result, char **a2, char **a3)
{
  int v3;
  int v4;
  BOOL v5;
  int v7;
  uint64_t v8;
  int v9;
  char *v10;
  int v11;
  unsigned __int8 *v12;
  char *v13;
  int v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  unsigned __int8 *v20;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, const char *, uint64_t, void *, _QWORD);
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  char *v39;
  char *v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t *v44;

  v44 = result;
  v3 = *((_DWORD *)a2 + 3);
  v4 = *((_DWORD *)a2 + 4);
  if (*((_DWORD *)a2 + 2))
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5 && v4 != 0)
  {
    v7 = v3 - 1;
    v43 = *((unsigned int *)a2 + 6);
    v8 = *((unsigned int *)a3 + 6);
    v9 = v4 - 1;
    v5 = v9 == 0;
    v41 = v9;
    v10 = *a2;
    if (!v5)
    {
      if (v3 != 1)
      {
        v11 = 0;
        v12 = (unsigned __int8 *)&qword_254A75F38;
        v13 = *a3;
        v36 = *((unsigned int *)a2 + 7);
        v37 = *((unsigned int *)a3 + 7);
        v42 = v3 - 1;
        while (1)
        {
          v38 = v11;
          v14 = 0;
          v39 = v13;
          v40 = v10;
          v15 = v10;
          do
          {
            v16 = v15;
            v17 = *v44;
            if (v16 || !v17)
            {
              if (!v17)
                goto LABEL_19;
            }
            else
            {
              v18 = v8;
              sub_2109EDAB0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4);
              v19 = atomic_load(v12);
              if ((v19 & 1) == 0 && __cxa_guard_acquire((__guard *)v12))
              {
                __cxa_atexit((void (*)(void *))sub_2109EDF34, &qword_254A75F00, &dword_21089F000);
                __cxa_guard_release((__guard *)v12);
              }
              v20 = v12;
              if (!byte_254A75F28 || byte_254A75F30)
              {
                v22 = qword_254A75F00;
                v23 = unk_254A75F08;
                while (v22 != v23)
                {
                  v25 = *(void (**)(uint64_t, const char *, uint64_t, void *, _QWORD))v22;
                  v24 = *(_QWORD *)(v22 + 8);
                  v22 += 16;
                  v25(v24, "ptr != nullptr || size == 0", 27, &unk_210A02D2A, 0);
                }
              }
              v12 = v20;
              v21 = atomic_load(v20);
              if ((v21 & 1) == 0 && __cxa_guard_acquire((__guard *)v20))
              {
                __cxa_atexit((void (*)(void *))sub_2109EDF34, &qword_254A75F00, &dword_21089F000);
                __cxa_guard_release((__guard *)v20);
              }
              if (!byte_254A75F28)
                goto LABEL_52;
              v8 = v18;
              qword_254A75F18(unk_254A75F20, "ptr != nullptr || size == 0", 27, &unk_210A02D2A, 0);
              v7 = v42;
            }
            result = (uint64_t *)memmove(v13, v16, 2 * v17);
LABEL_19:
            v15 = &v16[2 * v43];
            v13 += 2 * v8;
            ++v14;
          }
          while (v14 != v7);
          v26 = *v44;
          if (!v16 && v26)
          {
            if (!sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))
            {
LABEL_14:
              result = (uint64_t *)memmove(v13, v15, 2 * v26);
              goto LABEL_15;
            }
LABEL_52:
            abort();
          }
          if (v26)
            goto LABEL_14;
LABEL_15:
          v10 = &v40[2 * v36];
          v13 = &v39[2 * v37];
          v11 = v38 + 1;
          if (v38 + 1 == v41)
            goto LABEL_40;
        }
      }
      v32 = 2 * *((unsigned int *)a2 + 7);
      v33 = 2 * *((unsigned int *)a3 + 7);
      v13 = *a3;
      while (1)
      {
        v34 = *v44;
        v35 = v10;
        if (!v10 && v34)
        {
          if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))
          {
            goto LABEL_52;
          }
        }
        else if (!v34)
        {
          goto LABEL_58;
        }
        result = (uint64_t *)memmove(v13, v35, 2 * v34);
LABEL_58:
        v10 = &v35[v32];
        v13 += v33;
        if (!--v41)
          goto LABEL_40;
      }
    }
    v13 = *a3;
LABEL_40:
    v27 = v13;
    v28 = v10;
    if (v7)
    {
      v29 = 2 * v8;
      do
      {
        v30 = *v44;
        if (!v28 && v30)
        {
          if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))
          {
            goto LABEL_52;
          }
        }
        else if (!v30)
        {
          goto LABEL_44;
        }
        result = (uint64_t *)memmove(v27, v28, 2 * v30);
LABEL_44:
        v28 += 2 * v43;
        v27 += v29;
        --v7;
      }
      while (v7);
    }
    v31 = *v44;
    if (!v28 && v31)
    {
      if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))
      {
        goto LABEL_52;
      }
      return (uint64_t *)memmove(v27, v28, 2 * v31);
    }
    if (v31)
      return (uint64_t *)memmove(v27, v28, 2 * v31);
  }
  return result;
}

_DWORD *sub_210900CE0(uint64_t a1)
{
  _DWORD *result;
  int v3;
  int v4;
  int v5;
  int v6;
  BOOL v7;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  _WORD *v12;
  _DWORD v13[7];

  result = *(_DWORD **)a1;
  v3 = result[5];
  if (v3 == 1)
  {
    if (result[6] == result[2])
      return (_DWORD *)sub_2108FFEEC(a1);
    else
      return (_DWORD *)sub_210900D9C((uint64_t)result, *(_QWORD *)(a1 + 8));
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 8);
    v5 = result[2];
    v4 = result[3];
    v6 = result[4];
    if (v5)
      v7 = v4 == 0;
    else
      v7 = 1;
    if (!v7 && v6 != 0)
    {
      v11 = &v10;
      v13[0] = 0;
      v13[1] = v5 - 1;
      v13[2] = v3;
      v13[3] = v4 - 1;
      v9 = result[7];
      v13[4] = result[6];
      v13[5] = v6 - 1;
      v13[6] = v9;
      v12 = *(_WORD **)result;
      return sub_210900E5C(v13, &v11, &v12);
    }
  }
  return result;
}

uint64_t sub_210900D9C(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  int v7;
  unsigned int v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  char v12;
  _QWORD v13[3];
  _DWORD v14[5];
  unsigned int v15;
  unsigned int v16;
  unint64_t v17[2];

  v12 = 0;
  v13[0] = &v12;
  v13[1] = &v11;
  v3 = *(unsigned int *)(result + 8);
  v2 = *(_DWORD *)(result + 12);
  v11 = v3;
  v13[2] = a2;
  v4 = *(_DWORD *)(result + 16);
  if ((_DWORD)v3)
    v5 = v2 == 0;
  else
    v5 = 1;
  if (!v5 && v4 != 0)
  {
    v14[0] = 0;
    v14[1] = v3 - 1;
    v7 = *(_DWORD *)(result + 24);
    v14[2] = *(_DWORD *)(result + 20);
    v14[3] = v2 - 1;
    v8 = *(_DWORD *)(result + 28);
    v9 = *(_QWORD *)result;
    v17[0] = 0;
    v17[1] = 0;
    v14[4] = v7;
    v15 = v4 - 1;
    v16 = v8;
    if (v4 != 1)
    {
      v10 = 0;
      do
      {
        sub_2109002B8((uint64_t)v14, v17, (uint64_t)v13, v9);
        v9 += 2 * v16;
        ++v10;
      }
      while (v10 < v15);
    }
    return sub_2109002B8((uint64_t)v14, v17, (uint64_t)v13, v9);
  }
  return result;
}

_DWORD *sub_210900E5C(_DWORD *result, _QWORD **a2, _WORD **a3)
{
  _WORD *v3;
  int v4;
  int v5;
  _WORD *v6;
  uint64_t v7;
  int v8;
  _WORD *v9;
  uint64_t v10;
  _WORD *v11;
  int v12;
  uint64_t v13;

  v3 = *a3;
  v4 = result[5];
  if (!v4)
  {
    v5 = result[3];
    v6 = (_WORD *)**a2;
    if (!v5)
      goto LABEL_13;
    goto LABEL_9;
  }
  v5 = result[3];
  v6 = (_WORD *)**a2;
  v7 = result[6];
  if (v5)
  {
    v8 = 0;
    v9 = v3 + 2;
    v10 = 2 * result[4];
    do
    {
      v11 = v9;
      v12 = v5;
      do
      {
        *(v11 - 2) = *v6;
        *(v11 - 1) = *v6;
        *v11 = *v6;
        v11[1] = *v6;
        v11 = (_WORD *)((char *)v11 + v10);
        --v12;
      }
      while (v12);
      *(v11 - 2) = *v6;
      *(v11 - 1) = *v6;
      *v11 = *v6;
      v11[1] = *v6;
      v3 += v7;
      ++v8;
      v9 += v7;
    }
    while (v8 != v4);
LABEL_9:
    v13 = 2 * result[4];
    do
    {
      *v3 = *v6;
      v3[1] = *v6;
      v3[2] = *v6;
      v3[3] = *v6;
      v3 = (_WORD *)((char *)v3 + v13);
      --v5;
    }
    while (v5);
    goto LABEL_13;
  }
  do
  {
    *v3 = *v6;
    v3[1] = *v6;
    v3[2] = *v6;
    v3[3] = *v6;
    v3 += v7;
    --v4;
  }
  while (v4);
LABEL_13:
  *v3 = *v6;
  v3[1] = *v6;
  v3[2] = *v6;
  v3[3] = *v6;
  return result;
}

void sub_210900F9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  BOOL v5;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _WORD *v10;
  _WORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _WORD *v16;
  _WORD *v17;
  _WORD *v18;
  _WORD *v19;
  int v20;

  v3 = *(_DWORD *)(a2 + 12);
  v4 = *(_DWORD *)(a2 + 16);
  if (*(_DWORD *)(a2 + 8))
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5 && v4 != 0)
  {
    v7 = v3 - 1;
    v8 = *(unsigned int *)(a2 + 24);
    v9 = *(unsigned int *)(a3 + 24);
    v10 = *(_WORD **)a2;
    v11 = *(_WORD **)a3;
    v12 = v4 - 1;
    if (v12)
    {
      v13 = *(unsigned int *)(a3 + 28);
      v14 = *(unsigned int *)(a2 + 28);
      if (!v7)
      {
        do
        {
          *v11 = *v10;
          v11[1] = v10[1];
          v11[2] = v10[2];
          v11[3] = v10[3];
          v10 += v14;
          v11 += v13;
          --v12;
        }
        while (v12);
LABEL_18:
        *v11 = *v10;
        v11[1] = v10[1];
        v11[2] = v10[2];
        v11[3] = v10[3];
        return;
      }
      v15 = 0;
      v16 = v11 + 2;
      v17 = v10 + 2;
      do
      {
        v18 = v17;
        v19 = v16;
        v20 = v7;
        do
        {
          *(v19 - 2) = *(v18 - 2);
          *(v19 - 1) = *(v18 - 1);
          *v19 = *v18;
          v19[1] = v18[1];
          v19 += v9;
          v18 += v8;
          --v20;
        }
        while (v20);
        *(v19 - 2) = *(v18 - 2);
        *(v19 - 1) = *(v18 - 1);
        *v19 = *v18;
        v19[1] = v18[1];
        v10 += v14;
        v11 += v13;
        ++v15;
        v16 += v13;
        v17 += v14;
      }
      while (v15 != v12);
    }
    for (; v7; --v7)
    {
      *v11 = *v10;
      v11[1] = v10[1];
      v11[2] = v10[2];
      v11[3] = v10[3];
      v10 += v8;
      v11 += v9;
    }
    goto LABEL_18;
  }
}

void sub_210901114(_QWORD *a1, __n128 a2)
{
  uint64_t v2;
  const __int16 *v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  int v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int16 *v15;
  unint64_t v16;
  int16x8_t v17;
  int16x8_t *v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  _QWORD v22[3];
  _DWORD v23[5];
  _QWORD v24[2];

  v2 = *a1;
  v3 = (const __int16 *)a1[1];
  v4 = *(unsigned int *)(*a1 + 8);
  v6 = *(_DWORD *)(*a1 + 16);
  v5 = *(_DWORD *)(*a1 + 20);
  if (v5 == v6 * (_DWORD)v4)
  {
    v7 = (*(_DWORD *)(v2 + 12) * v4);
    v8 = *(_QWORD *)v2;
    if ((_DWORD)v7)
      v9 = v8 == 0;
    else
      v9 = 0;
    if (v9)
    {
      if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))
      {
        abort();
      }
    }
    else if (!(_DWORD)v7)
    {
      return;
    }
    v13 = v7 - ((_DWORD)v7 != 0) + 1;
    if (v13 < 0x10)
      goto LABEL_19;
    v14 = 2 * v7;
    if (!(_DWORD)v7)
      v14 = 2;
    if (v8 < (unint64_t)(v3 + 1) && v8 + v14 > (unint64_t)v3)
    {
LABEL_19:
      v15 = (__int16 *)v8;
LABEL_20:
      v16 = v7 + 1;
      do
      {
        *v15++ = *v3;
        --v16;
      }
      while (v16 > 1);
      return;
    }
    v15 = (__int16 *)(v8 + 2 * (v13 & 0xFFFFFFFFFFFFFFF0));
    v7 -= v13 & 0xFFFFFFFFFFFFFFF0;
    v17 = vld1q_dup_s16(v3);
    v18 = (int16x8_t *)(v8 + 16);
    v19 = v13 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v18[-1] = v17;
      *v18 = v17;
      v18 += 2;
      v19 -= 16;
    }
    while (v19);
    if (v13 != (v13 & 0xFFFFFFFFFFFFFFF0))
      goto LABEL_20;
  }
  else
  {
    v21 = 0;
    v20 = v4;
    v22[0] = &v21;
    v22[1] = &v20;
    v22[2] = v3;
    v10 = *(_DWORD *)(v2 + 12);
    if ((_DWORD)v4)
      v11 = v10 == 0;
    else
      v11 = 1;
    if (!v11)
    {
      v23[0] = 0;
      v23[1] = v4 - 1;
      v23[2] = v6;
      v23[3] = v10 - 1;
      v23[4] = v5;
      v12 = *(_QWORD *)v2;
      v24[0] = 0;
      v24[1] = 0;
      sub_2109012A4(v23, (uint64_t)v24, (uint64_t)v22, v12, a2);
    }
  }
}

unsigned __int16 sub_2109012A4@<H0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, __n128 a5@<Q0>)
{
  unint64_t v5;
  int v8;
  unsigned int i;
  const __int16 *v11;
  uint64_t v12;
  __int16 *v13;
  BOOL v14;
  __n128 *v15;
  unint64_t v16;
  BOOL v17;
  unint64_t v18;
  uint64_t *v19;
  const __int16 *v20;
  uint64_t v21;
  BOOL v22;
  __int16 *v23;
  uint64_t v24;
  __n128 *v25;
  unint64_t v26;
  unint64_t v27;

  v5 = a4;
  v8 = a1[2];
  *(_QWORD *)a2 = a4;
  *(_DWORD *)(a2 + 8) = v8;
  if (a1[3])
  {
    for (i = 0; i < a1[3]; ++i)
    {
      *(_QWORD *)a2 = v5;
      v11 = *(const __int16 **)(a3 + 16);
      v12 = **(_QWORD **)(a3 + 8);
      if (!v5
        && v12
        && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))
      {
        goto LABEL_39;
      }
      if (v12 >= 1)
      {
        if ((unint64_t)v12 >= 0x10)
        {
          v14 = v5 >= (unint64_t)(v11 + 1) || (unint64_t)v11 >= v5 + 2 * v12;
          v13 = (__int16 *)v5;
          if (v14)
          {
            v13 = (__int16 *)(v5 + 2 * (v12 & 0xFFFFFFFFFFFFFFF0));
            a5 = (__n128)vld1q_dup_s16(v11);
            v15 = (__n128 *)(v5 + 16);
            v16 = v12 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v15[-1] = a5;
              *v15 = a5;
              v15 += 2;
              v16 -= 16;
            }
            while (v16);
            v17 = v12 == (v12 & 0x7FFFFFFFFFFFFFF0);
            v12 &= 0xFu;
            if (v17)
              goto LABEL_3;
          }
        }
        else
        {
          v13 = (__int16 *)v5;
        }
        v18 = v12 + 1;
        do
        {
          a5.n128_u16[0] = *v11;
          *v13++ = *v11;
          --v18;
        }
        while (v18 > 1);
      }
LABEL_3:
      v5 += 2 * a1[4];
    }
  }
  *(_QWORD *)a2 = v5;
  v19 = *(uint64_t **)(a3 + 8);
  v20 = *(const __int16 **)(a3 + 16);
  v21 = *v19;
  if (!v5
    && v21
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))
  {
LABEL_39:
    abort();
  }
  if (v21 >= 1)
  {
    if ((unint64_t)v21 < 0x10
      || (v5 < (unint64_t)(v20 + 1) ? (v22 = (unint64_t)v20 >= v5 + 2 * v21) : (v22 = 1), !v22))
    {
      v23 = (__int16 *)v5;
      v24 = v21;
LABEL_36:
      v27 = v24 + 1;
      do
      {
        a5.n128_u16[0] = *v20;
        *v23++ = *v20;
        --v27;
      }
      while (v27 > 1);
      return a5.n128_u16[0];
    }
    v23 = (__int16 *)(v5 + 2 * (v21 & 0xFFFFFFFFFFFFFFF0));
    v24 = v21 & 0xF;
    a5 = (__n128)vld1q_dup_s16(v20);
    v25 = (__n128 *)(v5 + 16);
    v26 = v21 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v25[-1] = a5;
      *v25 = a5;
      v25 += 2;
      v26 -= 16;
    }
    while (v26);
    if (v21 != (v21 & 0x7FFFFFFFFFFFFFF0))
      goto LABEL_36;
  }
  return a5.n128_u16[0];
}

__int16 sub_2109014B4@<H0>(uint64_t *a1@<X0>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v7;
  int v8;
  BOOL v9;
  int v10;
  _WORD *v11;
  _WORD *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  _WORD *v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  __int128 v28;
  _WORD *v29;
  unint64_t v30;
  __int16 *v31;
  unint64_t v32;
  unint64_t v33;
  _WORD *v34;
  __int128 *v35;
  _OWORD *v36;
  unint64_t v37;
  __int128 v38;
  __int16 v39;

  v2 = *a1;
  v3 = a1[1];
  v4 = *(unsigned int *)(v2 + 16);
  v5 = *(unsigned int *)(v3 + 16);
  if ((_DWORD)v4 == 1 && (_DWORD)v5 == 1)
  {
    v24 = *(_DWORD *)(v2 + 20);
    if (v24 != *(_DWORD *)(v3 + 20) || v24 != *(_DWORD *)(v2 + 8))
    {
      LOWORD(v28) = sub_2109016DC((uint64_t *)v2, (uint64_t *)v3);
      return v28;
    }
    v25 = (*(_DWORD *)(v2 + 12) * v24);
    v26 = *(_QWORD *)v2;
    if ((_DWORD)v25)
      v27 = v26 == 0;
    else
      v27 = 0;
    if (v27)
    {
      if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))
      {
        abort();
      }
    }
    else if (!(_DWORD)v25)
    {
      return v28;
    }
    v29 = *(_WORD **)v3;
    v30 = (v25 - 1) & 0x7FFFFFFFFFFFFFFFLL;
    if (v30 < 0xF)
    {
      v31 = (__int16 *)v26;
    }
    else
    {
      v31 = (__int16 *)v26;
      if ((unint64_t)v29 - v26 >= 0x20)
      {
        v32 = v30 + 1;
        v33 = v32 & 0xFFFFFFFFFFFFFFF0;
        v34 = &v29[v33];
        v31 = (__int16 *)(v26 + v33 * 2);
        v35 = (__int128 *)(v26 + 16);
        v36 = v29 + 8;
        v37 = v32 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v28 = *(v35 - 1);
          v38 = *v35;
          *(v36 - 1) = v28;
          *v36 = v38;
          v35 += 2;
          v36 += 2;
          v37 -= 16;
        }
        while (v37);
        v29 = v34;
        if (v32 == (v32 & 0xFFFFFFFFFFFFFFF0))
          return v28;
      }
    }
    do
    {
      v39 = *v31++;
      LOWORD(v28) = v39;
      *v29++ = v39;
    }
    while (v31 != (__int16 *)(v26 + 2 * v25));
    return v28;
  }
  v7 = *(_DWORD *)(v2 + 8);
  v8 = *(_DWORD *)(v2 + 12);
  if (v7)
    v9 = v8 == 0;
  else
    v9 = 1;
  if (!v9)
  {
    v10 = v7 - 1;
    v11 = *(_WORD **)v2;
    v12 = *(_WORD **)v3;
    v13 = 2 * v4;
    v14 = 2 * v5;
    v15 = v8 - 1;
    if (v15)
    {
      v16 = *(unsigned int *)(v3 + 20);
      v17 = *(unsigned int *)(v2 + 20);
      if (v10)
      {
        v18 = 0;
        v19 = 2 * v17;
        v20 = 2 * v16;
        do
        {
          v21 = v12;
          v22 = v11;
          v23 = v10;
          do
          {
            *v21 = *v22;
            v22 = (_WORD *)((char *)v22 + v13);
            v21 = (_WORD *)((char *)v21 + v14);
            --v23;
          }
          while (v23);
          *v21 = *v22;
          v11 = (_WORD *)((char *)v11 + v19);
          v12 = (_WORD *)((char *)v12 + v20);
          ++v18;
        }
        while (v18 != v15);
      }
      else
      {
        do
        {
          *v12 = *v11;
          v11 += v17;
          v12 += v16;
          --v15;
        }
        while (v15);
      }
    }
    for (; v10; --v10)
    {
      *v12 = *v11;
      v11 = (_WORD *)((char *)v11 + v13);
      v12 = (_WORD *)((char *)v12 + v14);
    }
    LOWORD(v28) = *v11;
    *v12 = *v11;
  }
  return v28;
}

__int16 sub_2109016DC@<H0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>)
{
  int v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL4 v15;
  _WORD *v16;
  __int16 *v17;
  uint64_t v18;
  unint64_t v19;
  _OWORD *v20;
  __int128 v21;
  __int16 v22;
  _BOOL4 v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _WORD *v27;
  __int16 *v28;
  __int128 *v29;
  _OWORD *v30;
  unint64_t v31;
  __int128 v32;
  __int128 v33;
  __int16 v34;
  uint64_t v36;
  uint64_t v37;

  v3 = *((unsigned int *)a1 + 2);
  v2 = *((_DWORD *)a1 + 3);
  if ((_DWORD)v3)
    v4 = v2 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v5 = *a1;
    v6 = *a2;
    v7 = v2 - 1;
    v36 = *((unsigned int *)a1 + 2);
    if (v2 != 1)
    {
      v8 = 0;
      v9 = 2 * *((unsigned int *)a2 + 5);
      v10 = 2 * *((unsigned int *)a1 + 5);
      v11 = (v3 - 1) & 0x7FFFFFFFFFFFFFFFLL;
      v12 = (v11 + 1) & 0xFFFFFFFFFFFFFFF0;
      v37 = 2 * v12;
      v13 = *a2;
      v14 = *a1;
      while (1)
      {
        if (!v14)
        {
          v15 = sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4);
          v3 = v36;
          if (v15)
            goto LABEL_29;
        }
        v16 = (_WORD *)v13;
        v17 = (__int16 *)v14;
        if (v11 < 0xF)
          goto LABEL_33;
        v16 = (_WORD *)v13;
        v17 = (__int16 *)v14;
        if ((unint64_t)(v6 + v9 * v8 - (v5 + v10 * v8)) < 0x20)
          goto LABEL_33;
        v18 = 0;
        v16 = (_WORD *)(v13 + v37);
        v17 = (__int16 *)(v14 + v37);
        v19 = (v11 + 1) & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v20 = (_OWORD *)(v13 + v18);
          v21 = *(_OWORD *)(v14 + v18 + 16);
          *v20 = *(_OWORD *)(v14 + v18);
          v20[1] = v21;
          v18 += 32;
          v19 -= 16;
        }
        while (v19);
        if (v11 + 1 != v12)
        {
LABEL_33:
          do
          {
            v22 = *v17++;
            *v16++ = v22;
          }
          while (v17 != (__int16 *)(v14 + 2 * v3));
        }
        v14 += v10;
        v13 += v9;
        if ((_DWORD)++v8 == v7)
          goto LABEL_18;
      }
    }
    v13 = *a2;
    v14 = *a1;
LABEL_18:
    if (!v14)
    {
      v23 = sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4);
      v3 = v36;
      if (v23)
LABEL_29:
        abort();
    }
    v24 = (v3 - 1) & 0x7FFFFFFFFFFFFFFFLL;
    if (v24 < 0xF || (unint64_t)(v13 - v14) < 0x20)
    {
      v27 = (_WORD *)v13;
      v28 = (__int16 *)v14;
    }
    else
    {
      v25 = v24 + 1;
      v26 = (v24 + 1) & 0xFFFFFFFFFFFFFFF0;
      v27 = (_WORD *)(v13 + 2 * v26);
      v28 = (__int16 *)(v14 + 2 * v26);
      v29 = (__int128 *)(v14 + 16);
      v30 = (_OWORD *)(v13 + 16);
      v31 = v26;
      do
      {
        v32 = *(v29 - 1);
        v33 = *v29;
        *(v30 - 1) = v32;
        *v30 = v33;
        v29 += 2;
        v30 += 2;
        v31 -= 16;
      }
      while (v31);
      if (v25 == v26)
        return v32;
    }
    do
    {
      v34 = *v28++;
      LOWORD(v32) = v34;
      *v27++ = v34;
    }
    while (v28 != (__int16 *)(v14 + 2 * v3));
  }
  return v32;
}

void sub_210901910(_QWORD *a1, __n128 a2)
{
  uint64_t v2;
  const __int16 *v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  int v10;
  int v11;
  BOOL v12;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int16 *v17;
  unint64_t v18;
  int16x8_t v19;
  int16x8_t *v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  _QWORD v24[3];
  unsigned int v25[7];
  _QWORD v26[3];

  v2 = *a1;
  v3 = (const __int16 *)a1[1];
  v4 = *(_DWORD *)(*a1 + 12);
  v6 = *(_DWORD *)(*a1 + 24);
  v5 = *(_DWORD *)(*a1 + 28);
  if (v5 == v6 * v4)
  {
    v7 = (*(_DWORD *)(v2 + 8) * v4 * *(_DWORD *)(v2 + 16));
    v8 = *(_QWORD *)v2;
    if ((_DWORD)v7)
      v9 = v8 == 0;
    else
      v9 = 0;
    if (v9)
    {
      if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))
      {
        abort();
      }
    }
    else if (!(_DWORD)v7)
    {
      return;
    }
    v15 = v7 - ((_DWORD)v7 != 0) + 1;
    if (v15 < 0x10)
      goto LABEL_22;
    v16 = 2 * v7;
    if (!(_DWORD)v7)
      v16 = 2;
    if (v8 < (unint64_t)(v3 + 1) && v8 + v16 > (unint64_t)v3)
    {
LABEL_22:
      v17 = (__int16 *)v8;
LABEL_23:
      v18 = v7 + 1;
      do
      {
        *v17++ = *v3;
        --v18;
      }
      while (v18 > 1);
      return;
    }
    v17 = (__int16 *)(v8 + 2 * (v15 & 0xFFFFFFFFFFFFFFF0));
    v7 -= v15 & 0xFFFFFFFFFFFFFFF0;
    v19 = vld1q_dup_s16(v3);
    v20 = (int16x8_t *)(v8 + 16);
    v21 = v15 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v20[-1] = v19;
      *v20 = v19;
      v20 += 2;
      v21 -= 16;
    }
    while (v21);
    if (v15 != (v15 & 0xFFFFFFFFFFFFFFF0))
      goto LABEL_23;
  }
  else
  {
    v23 = 0;
    v10 = *(_DWORD *)(v2 + 8);
    v22 = (v10 * v4);
    v24[0] = &v23;
    v24[1] = &v22;
    v24[2] = v3;
    v11 = *(_DWORD *)(v2 + 16);
    if (v4)
      v12 = v10 == 0;
    else
      v12 = 1;
    if (!v12 && v11 != 0)
    {
      v25[0] = 0;
      v25[1] = v10 - 1;
      v25[2] = *(_DWORD *)(v2 + 20);
      v25[3] = v4 - 1;
      v25[4] = v6;
      v25[5] = v11 - 1;
      v25[6] = v5;
      v14 = *(_QWORD *)v2;
      memset(v26, 0, sizeof(v26));
      sub_210901AC4(v25, (uint64_t)v26, (uint64_t)v24, v14, a2);
    }
  }
}

unsigned __int16 sub_210901AC4@<H0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, __n128 a5@<Q0>)
{
  unint64_t v5;
  uint64_t v8;
  unint64_t v9;
  unsigned int i;
  const __int16 *v12;
  uint64_t v13;
  __int16 *v14;
  BOOL v15;
  __n128 *v16;
  unint64_t v17;
  BOOL v18;
  unint64_t v19;
  uint64_t *v20;
  const __int16 *v21;
  uint64_t v22;
  BOOL v23;
  __int16 *v24;
  uint64_t v25;
  __n128 *v26;
  unint64_t v27;
  unint64_t v28;

  v5 = a4;
  v8 = a1[4];
  v9 = a1[2] | (unint64_t)(v8 << 32);
  *(_QWORD *)a2 = a4;
  *(_QWORD *)(a2 + 8) = v9;
  *(_DWORD *)(a2 + 16) = v8;
  if (a1[5])
  {
    for (i = 0; i < a1[5]; ++i)
    {
      *(_QWORD *)a2 = v5;
      v12 = *(const __int16 **)(a3 + 16);
      v13 = **(_QWORD **)(a3 + 8);
      if (!v5
        && v13
        && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))
      {
        goto LABEL_39;
      }
      if (v13 >= 1)
      {
        if ((unint64_t)v13 >= 0x10)
        {
          v15 = v5 >= (unint64_t)(v12 + 1) || (unint64_t)v12 >= v5 + 2 * v13;
          v14 = (__int16 *)v5;
          if (v15)
          {
            v14 = (__int16 *)(v5 + 2 * (v13 & 0xFFFFFFFFFFFFFFF0));
            a5 = (__n128)vld1q_dup_s16(v12);
            v16 = (__n128 *)(v5 + 16);
            v17 = v13 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v16[-1] = a5;
              *v16 = a5;
              v16 += 2;
              v17 -= 16;
            }
            while (v17);
            v18 = v13 == (v13 & 0x7FFFFFFFFFFFFFF0);
            v13 &= 0xFu;
            if (v18)
              goto LABEL_3;
          }
        }
        else
        {
          v14 = (__int16 *)v5;
        }
        v19 = v13 + 1;
        do
        {
          a5.n128_u16[0] = *v12;
          *v14++ = *v12;
          --v19;
        }
        while (v19 > 1);
      }
LABEL_3:
      v5 += 2 * a1[6];
    }
  }
  *(_QWORD *)a2 = v5;
  v20 = *(uint64_t **)(a3 + 8);
  v21 = *(const __int16 **)(a3 + 16);
  v22 = *v20;
  if (!v5
    && v22
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))
  {
LABEL_39:
    abort();
  }
  if (v22 >= 1)
  {
    if ((unint64_t)v22 < 0x10
      || (v5 < (unint64_t)(v21 + 1) ? (v23 = (unint64_t)v21 >= v5 + 2 * v22) : (v23 = 1), !v23))
    {
      v24 = (__int16 *)v5;
      v25 = v22;
LABEL_36:
      v28 = v25 + 1;
      do
      {
        a5.n128_u16[0] = *v21;
        *v24++ = *v21;
        --v28;
      }
      while (v28 > 1);
      return a5.n128_u16[0];
    }
    v24 = (__int16 *)(v5 + 2 * (v22 & 0xFFFFFFFFFFFFFFF0));
    v25 = v22 & 0xF;
    a5 = (__n128)vld1q_dup_s16(v21);
    v26 = (__n128 *)(v5 + 16);
    v27 = v22 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v26[-1] = a5;
      *v26 = a5;
      v26 += 2;
      v27 -= 16;
    }
    while (v27);
    if (v22 != (v22 & 0x7FFFFFFFFFFFFFF0))
      goto LABEL_36;
  }
  return a5.n128_u16[0];
}

unsigned __int16 sub_210901CDC@<H0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, __n128 a5@<Q0>)
{
  unint64_t v5;
  unsigned int i;
  const __int16 *v10;
  uint64_t v11;
  __int16 *v12;
  BOOL v13;
  __n128 *v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  uint64_t *v18;
  const __int16 *v19;
  uint64_t v20;
  BOOL v21;
  __int16 *v22;
  uint64_t v23;
  __n128 *v24;
  unint64_t v25;
  unint64_t v26;

  v5 = a4;
  *a2 = a4;
  if (*(_DWORD *)(a1 + 12))
  {
    for (i = 0; i < *(_DWORD *)(a1 + 12); ++i)
    {
      *a2 = v5;
      v10 = *(const __int16 **)(a3 + 16);
      v11 = **(_QWORD **)(a3 + 8);
      if (!v5
        && v11
        && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))
      {
        goto LABEL_39;
      }
      if (v11 >= 1)
      {
        if ((unint64_t)v11 >= 0x10)
        {
          v13 = v5 >= (unint64_t)(v10 + 1) || (unint64_t)v10 >= v5 + 2 * v11;
          v12 = (__int16 *)v5;
          if (v13)
          {
            v12 = (__int16 *)(v5 + 2 * (v11 & 0xFFFFFFFFFFFFFFF0));
            a5 = (__n128)vld1q_dup_s16(v10);
            v14 = (__n128 *)(v5 + 16);
            v15 = v11 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v14[-1] = a5;
              *v14 = a5;
              v14 += 2;
              v15 -= 16;
            }
            while (v15);
            v16 = v11 == (v11 & 0x7FFFFFFFFFFFFFF0);
            v11 &= 0xFu;
            if (v16)
              goto LABEL_3;
          }
        }
        else
        {
          v12 = (__int16 *)v5;
        }
        v17 = v11 + 1;
        do
        {
          a5.n128_u16[0] = *v10;
          *v12++ = *v10;
          --v17;
        }
        while (v17 > 1);
      }
LABEL_3:
      v5 += 2 * *(unsigned int *)(a1 + 16);
    }
  }
  *a2 = v5;
  v18 = *(uint64_t **)(a3 + 8);
  v19 = *(const __int16 **)(a3 + 16);
  v20 = *v18;
  if (!v5
    && v20
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))
  {
LABEL_39:
    abort();
  }
  if (v20 >= 1)
  {
    if ((unint64_t)v20 < 0x10
      || (v5 < (unint64_t)(v19 + 1) ? (v21 = (unint64_t)v19 >= v5 + 2 * v20) : (v21 = 1), !v21))
    {
      v22 = (__int16 *)v5;
      v23 = v20;
LABEL_36:
      v26 = v23 + 1;
      do
      {
        a5.n128_u16[0] = *v19;
        *v22++ = *v19;
        --v26;
      }
      while (v26 > 1);
      return a5.n128_u16[0];
    }
    v22 = (__int16 *)(v5 + 2 * (v20 & 0xFFFFFFFFFFFFFFF0));
    v23 = v20 & 0xF;
    a5 = (__n128)vld1q_dup_s16(v19);
    v24 = (__n128 *)(v5 + 16);
    v25 = v20 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v24[-1] = a5;
      *v24 = a5;
      v24 += 2;
      v25 -= 16;
    }
    while (v25);
    if (v20 != (v20 & 0x7FFFFFFFFFFFFFF0))
      goto LABEL_36;
  }
  return a5.n128_u16[0];
}

__int16 sub_210901EE4@<H0>(uint64_t *a1@<X0>)
{
  uint64_t v1;
  uint64_t v2;
  int v4;
  int v5;
  BOOL v6;
  int v8;
  _WORD *v9;
  _WORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _WORD *v17;
  _WORD *v18;
  _WORD *v19;
  _WORD *v20;
  int v21;
  int v22;
  unsigned int v23;
  double v24;
  BOOL v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;

  v1 = *a1;
  v2 = a1[1];
  if (*(_DWORD *)(*a1 + 20) == 1 && *(_DWORD *)(v2 + 20) == 1)
  {
    v22 = *(_DWORD *)(v1 + 24);
    if (v22 == *(_DWORD *)(v2 + 24))
    {
      v23 = *(_DWORD *)(v1 + 8);
      if (v22 == v23)
      {
        v24 = sub_210902084(a1);
        return LOWORD(v24);
      }
    }
    else
    {
      v23 = *(_DWORD *)(v1 + 8);
    }
    v30 = v23;
    if (v23)
      v25 = *(_DWORD *)(v1 + 12) == 0;
    else
      v25 = 1;
    if (!v25 && *(_DWORD *)(v1 + 16) != 0)
      v24 = sub_21090249C(&v30, v1, v2);
  }
  else
  {
    v4 = *(_DWORD *)(v1 + 12);
    v5 = *(_DWORD *)(v1 + 16);
    if (*(_DWORD *)(v1 + 8))
      v6 = v4 == 0;
    else
      v6 = 1;
    if (!v6 && v5 != 0)
    {
      v8 = v4 - 1;
      v9 = *(_WORD **)v1;
      v10 = *(_WORD **)v2;
      v11 = 2 * *(unsigned int *)(v1 + 24);
      v12 = 2 * *(unsigned int *)(v2 + 24);
      v13 = v5 - 1;
      if (v13)
      {
        v14 = *(unsigned int *)(v2 + 28);
        v15 = *(unsigned int *)(v1 + 28);
        if (v8)
        {
          v16 = 0;
          v17 = v9 + 1;
          v18 = v10 + 1;
          do
          {
            v19 = v18;
            v20 = v17;
            v21 = v8;
            do
            {
              *(v19 - 1) = *(v20 - 1);
              *v19 = *v20;
              v20 = (_WORD *)((char *)v20 + v11);
              v19 = (_WORD *)((char *)v19 + v12);
              --v21;
            }
            while (v21);
            *(v19 - 1) = *(v20 - 1);
            *v19 = *v20;
            v9 += v15;
            v10 += v14;
            ++v16;
            v17 += v15;
            v18 += v14;
          }
          while (v16 != v13);
        }
        else
        {
          v27 = 2 * v15;
          v28 = 2 * v14;
          do
          {
            *v10 = *v9;
            v10[1] = v9[1];
            v9 = (_WORD *)((char *)v9 + v27);
            v10 = (_WORD *)((char *)v10 + v28);
            --v13;
          }
          while (v13);
        }
      }
      for (; v8; --v8)
      {
        *v10 = *v9;
        v10[1] = v9[1];
        v9 = (_WORD *)((char *)v9 + v11);
        v10 = (_WORD *)((char *)v10 + v12);
      }
      *v10 = *v9;
      LOWORD(v24) = v9[1];
      v10[1] = LOWORD(v24);
    }
  }
  return LOWORD(v24);
}

double sub_210902084(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  int v9;
  int v10;
  BOOL v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  _WORD *v18;
  unint64_t v19;
  __int16 *v20;
  unint64_t v21;
  unint64_t v22;
  _WORD *v23;
  __int128 *v24;
  _OWORD *v25;
  unint64_t v26;
  __int128 v27;
  __int16 v28;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  _OWORD v38[3];

  v1 = *a1;
  v2 = a1[1];
  v3 = *(unsigned int *)(*a1 + 28);
  v4 = *(unsigned int *)(v2 + 28);
  v5 = *(_DWORD *)(*a1 + 12);
  if ((_DWORD)v3 == (_DWORD)v4 && (_DWORD)v3 == *(_DWORD *)(v1 + 24) * v5)
  {
    v6 = (*(_DWORD *)(v1 + 8) * v5 * *(_DWORD *)(v1 + 16));
    v7 = *(_QWORD *)v1;
    if ((_DWORD)v6)
      v8 = v7 == 0;
    else
      v8 = 0;
    if (v8)
    {
      if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))
      {
        abort();
      }
    }
    else if (!(_DWORD)v6)
    {
      return *(double *)&v17;
    }
    v18 = *(_WORD **)v2;
    v19 = (v6 - 1) & 0x7FFFFFFFFFFFFFFFLL;
    if (v19 < 0xF)
    {
      v20 = (__int16 *)v7;
      do
      {
LABEL_25:
        v28 = *v20++;
        LOWORD(v17) = v28;
        *v18++ = v28;
      }
      while (v20 != (__int16 *)(v7 + 2 * v6));
      return *(double *)&v17;
    }
    v20 = (__int16 *)v7;
    if ((unint64_t)v18 - v7 < 0x20)
      goto LABEL_25;
    v21 = v19 + 1;
    v22 = v21 & 0xFFFFFFFFFFFFFFF0;
    v23 = &v18[v22];
    v20 = (__int16 *)(v7 + v22 * 2);
    v24 = (__int128 *)(v7 + 16);
    v25 = v18 + 8;
    v26 = v21 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v17 = *(v24 - 1);
      v27 = *v24;
      *(v25 - 1) = v17;
      *v25 = v27;
      v24 += 2;
      v25 += 2;
      v26 -= 16;
    }
    while (v26);
    v18 = v23;
    if (v21 != (v21 & 0xFFFFFFFFFFFFFFF0))
      goto LABEL_25;
  }
  else
  {
    v9 = *(_DWORD *)(v1 + 8);
    v30 = (v9 * v5);
    v10 = *(_DWORD *)(v1 + 16);
    if (v9)
      v11 = v5 == 0;
    else
      v11 = 1;
    if (!v11 && v10 != 0)
    {
      v32 = v9 - 1;
      v13 = *(unsigned int *)(v1 + 24);
      v14 = *(unsigned int *)(v2 + 24);
      v33 = *(unsigned int *)(v1 + 20) | ((unint64_t)*(unsigned int *)(v2 + 20) << 32);
      v31 = 0;
      v34 = v5 - 1;
      v35 = v13 | (v14 << 32);
      v36 = v10 - 1;
      v37 = v3 | (v4 << 32);
      v15 = *(_QWORD *)v1;
      v16 = *(_QWORD *)v2;
      memset(v38, 0, sizeof(v38));
      *(_QWORD *)&v17 = sub_21090224C((unsigned int *)&v31, (uint64_t)v38, &v30, v15, v16);
    }
  }
  return *(double *)&v17;
}

__int16 sub_21090224C@<H0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int i;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _WORD *v21;
  __int16 *v22;
  __int128 *v23;
  _OWORD *v24;
  unint64_t v25;
  __int128 v26;
  __int128 v27;
  __int16 v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _WORD *v33;
  __int16 *v34;
  __int128 *v35;
  _OWORD *v36;
  unint64_t v37;
  __int128 v38;
  __int16 v39;

  v5 = a5;
  v6 = a4;
  v9 = a1[6];
  v10 = a1[7];
  v11 = a1[3] | (unint64_t)(v9 << 32);
  v12 = a1[4] | (unint64_t)(v10 << 32);
  *(_QWORD *)a2 = a4;
  *(_QWORD *)(a2 + 8) = v11;
  *(_DWORD *)(a2 + 16) = v9;
  *(_QWORD *)(a2 + 24) = a5;
  *(_QWORD *)(a2 + 32) = v12;
  *(_DWORD *)(a2 + 40) = v10;
  v13 = a1[8];
  if (v13)
  {
    for (i = 0; i < v13; ++i)
    {
      *(_QWORD *)a2 = v6;
      *(_QWORD *)(a2 + 24) = v5;
      v16 = *a3;
      if (v6 || !v16)
      {
        v17 = v5;
        if (!v16)
          goto LABEL_4;
      }
      else
      {
        if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))
        {
          goto LABEL_33;
        }
        v17 = *(_QWORD *)(a2 + 24);
      }
      v18 = (v16 - 1) & 0x7FFFFFFFFFFFFFFFLL;
      if (v18 < 0xF || (unint64_t)(v17 - v6) < 0x20)
      {
        v21 = (_WORD *)v17;
        v22 = (__int16 *)v6;
      }
      else
      {
        v19 = v18 + 1;
        v20 = (v18 + 1) & 0xFFFFFFFFFFFFFFF0;
        v21 = (_WORD *)(v17 + 2 * v20);
        v22 = (__int16 *)(v6 + 2 * v20);
        v23 = (__int128 *)(v6 + 16);
        v24 = (_OWORD *)(v17 + 16);
        v25 = v20;
        do
        {
          v26 = *(v23 - 1);
          v27 = *v23;
          *(v24 - 1) = v26;
          *v24 = v27;
          v23 += 2;
          v24 += 2;
          v25 -= 16;
        }
        while (v25);
        if (v19 == v20)
          goto LABEL_3;
      }
      do
      {
        v28 = *v22++;
        LOWORD(v26) = v28;
        *v21++ = v28;
      }
      while (v22 != (__int16 *)(v6 + 2 * v16));
LABEL_3:
      v13 = a1[8];
LABEL_4:
      v6 += 2 * a1[9];
      v5 += 2 * a1[10];
    }
  }
  *(_QWORD *)a2 = v6;
  *(_QWORD *)(a2 + 24) = v5;
  v29 = *a3;
  if (v6 || !v29)
  {
    if (!v29)
      return v26;
  }
  else
  {
    if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))
    {
LABEL_33:
      abort();
    }
    v5 = *(_QWORD *)(a2 + 24);
  }
  v30 = (v29 - 1) & 0x7FFFFFFFFFFFFFFFLL;
  if (v30 < 0xF || (unint64_t)(v5 - v6) < 0x20)
  {
    v33 = (_WORD *)v5;
    v34 = (__int16 *)v6;
    do
    {
LABEL_31:
      v39 = *v34++;
      LOWORD(v26) = v39;
      *v33++ = v39;
    }
    while (v34 != (__int16 *)(v6 + 2 * v29));
    return v26;
  }
  v31 = v30 + 1;
  v32 = (v30 + 1) & 0xFFFFFFFFFFFFFFF0;
  v33 = (_WORD *)(v5 + 2 * v32);
  v34 = (__int16 *)(v6 + 2 * v32);
  v35 = (__int128 *)(v6 + 16);
  v36 = (_OWORD *)(v5 + 16);
  v37 = v32;
  do
  {
    v26 = *(v35 - 1);
    v38 = *v35;
    *(v36 - 1) = v26;
    *v36 = v38;
    v35 += 2;
    v36 += 2;
    v37 -= 16;
  }
  while (v37);
  if (v31 != v32)
    goto LABEL_31;
  return v26;
}

double sub_21090249C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  int v5;
  BOOL v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  double result;
  uint64_t v15;
  int v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  _OWORD v22[2];

  v4 = *(_DWORD *)(a2 + 8);
  v3 = *(_DWORD *)(a2 + 12);
  v5 = *(_DWORD *)(a2 + 16);
  if (v4)
    v6 = v3 == 0;
  else
    v6 = 1;
  if (!v6 && v5 != 0)
  {
    v16 = v4 - 1;
    v9 = *(unsigned int *)(a2 + 24);
    v10 = *(unsigned int *)(a3 + 24);
    v17 = *(unsigned int *)(a2 + 20) | ((unint64_t)*(unsigned int *)(a3 + 20) << 32);
    v15 = 0;
    v18 = v3 - 1;
    v19 = v9 | (v10 << 32);
    v21 = *(unsigned int *)(a2 + 28) | ((unint64_t)*(unsigned int *)(a3 + 28) << 32);
    v11 = *(_QWORD *)a2;
    v12 = *(_QWORD *)a3;
    memset(v22, 0, sizeof(v22));
    v20 = v5 - 1;
    if (v5 != 1)
    {
      v13 = 0;
      do
      {
        sub_210902588(&v15, v22, a1, v11, v12);
        v11 += 2 * v21;
        v12 += 2 * HIDWORD(v21);
        ++v13;
      }
      while (v13 < v20);
    }
    *(_QWORD *)&result = sub_210902588(&v15, v22, a1, v11, v12);
  }
  return result;
}

__int16 sub_210902588@<H0>(_DWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v9;
  unsigned int i;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _WORD *v17;
  __int16 *v18;
  __int128 *v19;
  _OWORD *v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  __int16 v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _WORD *v29;
  __int16 *v30;
  __int128 *v31;
  _OWORD *v32;
  unint64_t v33;
  __int128 v34;
  __int16 v35;

  v5 = a5;
  v6 = a4;
  *a2 = a4;
  a2[2] = a5;
  v9 = a1[5];
  if (v9)
  {
    for (i = 0; i < v9; ++i)
    {
      *a2 = v6;
      a2[2] = v5;
      v12 = *a3;
      if (v6 || !v12)
      {
        v13 = v5;
        if (!v12)
          goto LABEL_4;
      }
      else
      {
        if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))
        {
          goto LABEL_33;
        }
        v13 = a2[2];
      }
      v14 = (v12 - 1) & 0x7FFFFFFFFFFFFFFFLL;
      if (v14 < 0xF || (unint64_t)(v13 - v6) < 0x20)
      {
        v17 = (_WORD *)v13;
        v18 = (__int16 *)v6;
      }
      else
      {
        v15 = v14 + 1;
        v16 = (v14 + 1) & 0xFFFFFFFFFFFFFFF0;
        v17 = (_WORD *)(v13 + 2 * v16);
        v18 = (__int16 *)(v6 + 2 * v16);
        v19 = (__int128 *)(v6 + 16);
        v20 = (_OWORD *)(v13 + 16);
        v21 = v16;
        do
        {
          v22 = *(v19 - 1);
          v23 = *v19;
          *(v20 - 1) = v22;
          *v20 = v23;
          v19 += 2;
          v20 += 2;
          v21 -= 16;
        }
        while (v21);
        if (v15 == v16)
          goto LABEL_3;
      }
      do
      {
        v24 = *v18++;
        LOWORD(v22) = v24;
        *v17++ = v24;
      }
      while (v18 != (__int16 *)(v6 + 2 * v12));
LABEL_3:
      v9 = a1[5];
LABEL_4:
      v6 += 2 * a1[6];
      v5 += 2 * a1[7];
    }
  }
  *a2 = v6;
  a2[2] = v5;
  v25 = *a3;
  if (v6 || !v25)
  {
    if (!v25)
      return v22;
  }
  else
  {
    if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))
    {
LABEL_33:
      abort();
    }
    v5 = a2[2];
  }
  v26 = (v25 - 1) & 0x7FFFFFFFFFFFFFFFLL;
  if (v26 < 0xF || (unint64_t)(v5 - v6) < 0x20)
  {
    v29 = (_WORD *)v5;
    v30 = (__int16 *)v6;
    do
    {
LABEL_31:
      v35 = *v30++;
      LOWORD(v22) = v35;
      *v29++ = v35;
    }
    while (v30 != (__int16 *)(v6 + 2 * v25));
    return v22;
  }
  v27 = v26 + 1;
  v28 = (v26 + 1) & 0xFFFFFFFFFFFFFFF0;
  v29 = (_WORD *)(v5 + 2 * v28);
  v30 = (__int16 *)(v6 + 2 * v28);
  v31 = (__int128 *)(v6 + 16);
  v32 = (_OWORD *)(v5 + 16);
  v33 = v28;
  do
  {
    v22 = *(v31 - 1);
    v34 = *v31;
    *(v32 - 1) = v22;
    *v32 = v34;
    v31 += 2;
    v32 += 2;
    v33 -= 16;
  }
  while (v33);
  if (v27 != v28)
    goto LABEL_31;
  return v22;
}

unsigned __int16 sub_2109027C0@<H0>(uint64_t *a1@<X0>, __n128 a2@<Q0>)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  BOOL v8;
  int v10;
  __int16 *v11;
  uint64_t v13;
  __int16 **v14;
  _DWORD v15[7];
  _QWORD v16[2];

  v3 = *a1;
  v4 = *(_DWORD *)(v3 + 20);
  if (v4 == 1)
  {
    if (*(_DWORD *)(v3 + 24) == *(_DWORD *)(v3 + 8))
      sub_210901910(a1, a2);
    else
      a2.n128_u16[0] = sub_21090287C(v3, a1[1], a2);
  }
  else
  {
    v13 = a1[1];
    v6 = *(_DWORD *)(v3 + 8);
    v5 = *(_DWORD *)(v3 + 12);
    v7 = *(_DWORD *)(v3 + 16);
    if (v6)
      v8 = v5 == 0;
    else
      v8 = 1;
    if (!v8 && v7 != 0)
    {
      v14 = (__int16 **)&v13;
      v15[0] = 0;
      v15[1] = v6 - 1;
      v15[2] = v4;
      v15[3] = v5 - 1;
      v10 = *(_DWORD *)(v3 + 28);
      v15[4] = *(_DWORD *)(v3 + 24);
      v15[5] = v7 - 1;
      v15[6] = v10;
      v11 = *(__int16 **)v3;
      v16[0] = 0;
      v16[1] = 0;
      a2.n128_u16[0] = sub_21090293C(v15, (uint64_t)v16, &v14, v11);
    }
  }
  return a2.n128_u16[0];
}

unsigned __int16 sub_21090287C@<H0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __n128 a3@<Q0>)
{
  int v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  int v8;
  unsigned int v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v13;
  char v14;
  _QWORD v15[3];
  _DWORD v16[5];
  unsigned int v17;
  unsigned int v18;
  unint64_t v19[2];

  v14 = 0;
  v15[0] = &v14;
  v15[1] = &v13;
  v4 = *(unsigned int *)(a1 + 8);
  v3 = *(_DWORD *)(a1 + 12);
  v13 = v4;
  v15[2] = a2;
  v5 = *(_DWORD *)(a1 + 16);
  if ((_DWORD)v4)
    v6 = v3 == 0;
  else
    v6 = 1;
  if (!v6 && v5 != 0)
  {
    v16[0] = 0;
    v16[1] = v4 - 1;
    v8 = *(_DWORD *)(a1 + 24);
    v16[2] = *(_DWORD *)(a1 + 20);
    v16[3] = v3 - 1;
    v9 = *(_DWORD *)(a1 + 28);
    v10 = *(_QWORD *)a1;
    v19[0] = 0;
    v19[1] = 0;
    v16[4] = v8;
    v17 = v5 - 1;
    v18 = v9;
    if (v5 != 1)
    {
      v11 = 0;
      do
      {
        a3.n128_u64[0] = sub_210901CDC((uint64_t)v16, v19, (uint64_t)v15, v10, a3);
        v10 += 2 * v18;
        ++v11;
      }
      while (v11 < v17);
    }
    a3.n128_u16[0] = sub_210901CDC((uint64_t)v16, v19, (uint64_t)v15, v10, a3);
  }
  return a3.n128_u16[0];
}

__int16 sub_21090293C@<H0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, __int16 ***a3@<X2>, __int16 *a4@<X3>)
{
  unsigned int v4;
  __int16 *v5;
  unsigned int v6;
  unsigned int v7;
  __int16 *v8;
  __int16 result;

  if (a1[5])
  {
    v4 = 0;
    do
    {
      *(_QWORD *)a2 = a4;
      v5 = a4;
      if (a1[3])
      {
        v6 = 0;
        v5 = a4;
        do
        {
          *(_QWORD *)a2 = v5;
          *v5 = ***a3;
          *(_WORD *)(*(_QWORD *)a2 + 2) = ***a3;
          *(_WORD *)(*(_QWORD *)a2 + 4) = ***a3;
          *(_WORD *)(*(_QWORD *)a2 + 6) = ***a3;
          v5 += a1[4];
          ++v6;
        }
        while (v6 < a1[3]);
      }
      *(_QWORD *)a2 = v5;
      *v5 = ***a3;
      *(_WORD *)(*(_QWORD *)a2 + 2) = ***a3;
      *(_WORD *)(*(_QWORD *)a2 + 4) = ***a3;
      *(_WORD *)(*(_QWORD *)a2 + 6) = ***a3;
      a4 += a1[6];
      ++v4;
    }
    while (v4 < a1[5]);
  }
  *(_QWORD *)a2 = a4;
  if (a1[3])
  {
    v7 = 0;
    do
    {
      *(_QWORD *)a2 = a4;
      *a4 = ***a3;
      *(_WORD *)(*(_QWORD *)a2 + 2) = ***a3;
      *(_WORD *)(*(_QWORD *)a2 + 4) = ***a3;
      *(_WORD *)(*(_QWORD *)a2 + 6) = ***a3;
      a4 += a1[4];
      ++v7;
    }
    while (v7 < a1[3]);
  }
  *(_QWORD *)a2 = a4;
  *a4 = ***a3;
  *(_WORD *)(*(_QWORD *)a2 + 2) = ***a3;
  *(_WORD *)(*(_QWORD *)a2 + 4) = ***a3;
  v8 = **a3;
  result = *v8;
  *(_WORD *)(*(_QWORD *)a2 + 6) = *v8;
  return result;
}

double sub_210902AF8(_QWORD *a1)
{
  _DWORD *v1;
  uint64_t v2;
  BOOL v4;
  double result;
  int v7;
  unsigned int v8;
  BOOL v9;
  char v11;
  char *v12;

  v1 = (_DWORD *)*a1;
  v2 = a1[1];
  if (*(_DWORD *)(*a1 + 20) == 1 && *(_DWORD *)(v2 + 20) == 1)
  {
    v7 = v1[6];
    if (v7 == *(_DWORD *)(v2 + 24))
    {
      v8 = v1[2];
      if (v7 == v8)
        return sub_210902084(a1);
    }
    else
    {
      v8 = v1[2];
    }
    v12 = (char *)v8;
    if (v8)
      v9 = v1[3] == 0;
    else
      v9 = 1;
    if (!v9 && v1[4] != 0)
      return sub_21090249C((uint64_t *)&v12, (uint64_t)v1, v2);
  }
  else
  {
    v11 = 0;
    if (v1[2])
      v4 = v1[3] == 0;
    else
      v4 = 1;
    if (!v4 && v1[4] != 0)
    {
      v12 = &v11;
      *(_QWORD *)&result = sub_210902BB0((uint64_t)&v12, (uint64_t)v1, v2);
    }
  }
  return result;
}

__int16 sub_210902BB0@<H0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>)
{
  int v3;
  int v4;
  BOOL v5;
  int v7;
  _WORD *v8;
  _WORD *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _WORD *v16;
  _WORD *v17;
  _WORD *v18;
  _WORD *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  __int16 result;

  v3 = *(_DWORD *)(a2 + 12);
  v4 = *(_DWORD *)(a2 + 16);
  if (*(_DWORD *)(a2 + 8))
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5 && v4 != 0)
  {
    v7 = v3 - 1;
    v8 = *(_WORD **)a2;
    v9 = *(_WORD **)a3;
    v10 = 2 * *(unsigned int *)(a2 + 24);
    v11 = 2 * *(unsigned int *)(a3 + 24);
    v12 = v4 - 1;
    if (v12)
    {
      v13 = *(unsigned int *)(a3 + 28);
      v14 = *(unsigned int *)(a2 + 28);
      if (v7)
      {
        v15 = 0;
        v16 = v9 + 2;
        v17 = v8 + 2;
        do
        {
          v18 = v17;
          v19 = v16;
          v20 = v7;
          do
          {
            *(v19 - 2) = *(v18 - 2);
            *(v19 - 1) = *(v18 - 1);
            *v19 = *v18;
            v19[1] = v18[1];
            v19 = (_WORD *)((char *)v19 + v11);
            v18 = (_WORD *)((char *)v18 + v10);
            --v20;
          }
          while (v20);
          *(v19 - 2) = *(v18 - 2);
          *(v19 - 1) = *(v18 - 1);
          *v19 = *v18;
          v19[1] = v18[1];
          v8 += v14;
          v9 += v13;
          ++v15;
          v16 += v13;
          v17 += v14;
        }
        while (v15 != v12);
      }
      else
      {
        v21 = 2 * v14;
        v22 = 2 * v13;
        do
        {
          *v9 = *v8;
          v9[1] = v8[1];
          v9[2] = v8[2];
          v9[3] = v8[3];
          v8 = (_WORD *)((char *)v8 + v21);
          v9 = (_WORD *)((char *)v9 + v22);
          --v12;
        }
        while (v12);
      }
    }
    for (; v7; --v7)
    {
      *v9 = *v8;
      v9[1] = v8[1];
      v9[2] = v8[2];
      v9[3] = v8[3];
      v8 = (_WORD *)((char *)v8 + v10);
      v9 = (_WORD *)((char *)v9 + v11);
    }
    *v9 = *v8;
    v9[1] = v8[1];
    v9[2] = v8[2];
    result = v8[3];
    v9[3] = result;
  }
  return result;
}

uint64_t sub_210902D18(uint64_t result)
{
  uint64_t v1;
  const float *v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  int v9;
  BOOL v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  unint64_t v15;
  float32x4_t v16;
  float32x4_t *v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  _QWORD v21[3];
  _DWORD v22[5];
  _QWORD v23[2];

  v1 = *(_QWORD *)result;
  v2 = *(const float **)(result + 8);
  v3 = *(unsigned int *)(*(_QWORD *)result + 8);
  v5 = *(_DWORD *)(*(_QWORD *)result + 16);
  v4 = *(_DWORD *)(*(_QWORD *)result + 20);
  if (v4 == v5 * (_DWORD)v3)
  {
    v6 = (*(_DWORD *)(v1 + 12) * v3);
    v7 = *(_QWORD *)v1;
    if ((_DWORD)v6)
      v8 = v7 == 0;
    else
      v8 = 0;
    if (v8)
    {
      result = sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4);
      if ((_DWORD)result)
        abort();
    }
    else if (!(_DWORD)v6)
    {
      return result;
    }
    v12 = v6 - ((_DWORD)v6 != 0) + 1;
    if (v12 < 0x10)
      goto LABEL_19;
    v13 = 4 * v6;
    if (!(_DWORD)v6)
      v13 = 4;
    if (v7 < (unint64_t)(v2 + 1) && v7 + v13 > (unint64_t)v2)
    {
LABEL_19:
      v14 = (_DWORD *)v7;
LABEL_20:
      v15 = v6 + 1;
      do
      {
        *v14++ = *(_DWORD *)v2;
        --v15;
      }
      while (v15 > 1);
      return result;
    }
    v14 = (_DWORD *)(v7 + 4 * (v12 & 0xFFFFFFFFFFFFFFF8));
    v6 -= v12 & 0xFFFFFFFFFFFFFFF8;
    v16 = vld1q_dup_f32(v2);
    v17 = (float32x4_t *)(v7 + 16);
    v18 = v12 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v17[-1] = v16;
      *v17 = v16;
      v17 += 2;
      v18 -= 8;
    }
    while (v18);
    if (v12 != (v12 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_20;
  }
  else
  {
    v20 = 0;
    v19 = v3;
    v21[0] = &v20;
    v21[1] = &v19;
    v21[2] = v2;
    v9 = *(_DWORD *)(v1 + 12);
    if ((_DWORD)v3)
      v10 = v9 == 0;
    else
      v10 = 1;
    if (!v10)
    {
      v22[0] = 0;
      v22[1] = v3 - 1;
      v22[2] = v5;
      v22[3] = v9 - 1;
      v22[4] = v4;
      v11 = *(_QWORD *)v1;
      v23[0] = 0;
      v23[1] = 0;
      return sub_210902EA8((uint64_t)v22, (uint64_t)v23, (uint64_t)v21, v11);
    }
  }
  return result;
}

uint64_t sub_210902EA8(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  int v7;
  uint64_t v8;
  unsigned int i;
  const float *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  unint64_t v16;
  float32x4_t v17;
  float32x4_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  const float *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  unint64_t v28;
  float32x4_t v29;
  float32x4_t *v30;
  unint64_t v31;

  v4 = a4;
  v7 = *(_DWORD *)(result + 8);
  *(_QWORD *)a2 = a4;
  *(_DWORD *)(a2 + 8) = v7;
  if (*(_DWORD *)(result + 12))
  {
    v8 = result;
    for (i = 0; i < *(_DWORD *)(v8 + 12); ++i)
    {
      *(_QWORD *)a2 = v4;
      v10 = *(const float **)(a3 + 16);
      v11 = **(_QWORD **)(a3 + 8);
      if (!v4)
      {
        if (v11)
        {
          result = sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4);
          if ((_DWORD)result)
            goto LABEL_37;
        }
      }
      if (v11 >= 1)
      {
        v12 = v11 & 0x3FFFFFFFFFFFFFFFLL;
        v13 = (v11 & 0x3FFFFFFFFFFFFFFFLL) - ((v11 & 0x3FFFFFFFFFFFFFFFLL) != 0) + 1;
        if (v13 >= 0x10)
        {
          v15 = -4;
          if (!v12)
            v15 = 0;
          if (v4 >= (unint64_t)(v10 + 1)
            || (v16 = v4 + v15 + 4 * v11 + 4, v14 = (_DWORD *)v4, (unint64_t)v10 >= v16))
          {
            v14 = (_DWORD *)(v4 + 4 * (v13 & 0xFFFFFFFFFFFFFFF8));
            v12 -= v13 & 0xFFFFFFFFFFFFFFF8;
            v17 = vld1q_dup_f32(v10);
            v18 = (float32x4_t *)(v4 + 16);
            v19 = v13 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              v18[-1] = v17;
              *v18 = v17;
              v18 += 2;
              v19 -= 8;
            }
            while (v19);
            if (v13 == (v13 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_3;
          }
        }
        else
        {
          v14 = (_DWORD *)v4;
        }
        v20 = v12 + 1;
        do
        {
          *v14++ = *(_DWORD *)v10;
          --v20;
        }
        while (v20 > 1);
      }
LABEL_3:
      v4 += 4 * *(unsigned int *)(v8 + 16);
    }
  }
  *(_QWORD *)a2 = v4;
  v21 = *(uint64_t **)(a3 + 8);
  v22 = *(const float **)(a3 + 16);
  v23 = *v21;
  if (!v4)
  {
    if (v23)
    {
      result = sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4);
      if ((_DWORD)result)
LABEL_37:
        abort();
    }
  }
  if (v23 >= 1)
  {
    v24 = v23 & 0x3FFFFFFFFFFFFFFFLL;
    v25 = (v23 & 0x3FFFFFFFFFFFFFFFLL) - ((v23 & 0x3FFFFFFFFFFFFFFFLL) != 0) + 1;
    if (v25 < 0x10)
      goto LABEL_29;
    v26 = 4 * v23;
    if (!v24)
      v26 = 4;
    if (v4 < (unint64_t)(v22 + 1) && (unint64_t)v22 < v4 + v26)
    {
LABEL_29:
      v27 = (_DWORD *)v4;
LABEL_30:
      v28 = v24 + 1;
      do
      {
        *v27++ = *(_DWORD *)v22;
        --v28;
      }
      while (v28 > 1);
      return result;
    }
    v27 = (_DWORD *)(v4 + 4 * (v25 & 0xFFFFFFFFFFFFFFF8));
    v24 -= v25 & 0xFFFFFFFFFFFFFFF8;
    v29 = vld1q_dup_f32(v22);
    v30 = (float32x4_t *)(v4 + 16);
    v31 = v25 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v30[-1] = v29;
      *v30 = v29;
      v30 += 2;
      v31 -= 8;
    }
    while (v31);
    if (v25 != (v25 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_30;
  }
  return result;
}

float sub_2109030FC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v6;
  int v7;
  BOOL v8;
  int v9;
  char *v10;
  _DWORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  char *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  BOOL v26;
  float result;
  uint64_t v28;
  char *v29;
  BOOL v30;
  uint64_t v31;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v3 == 1 && (_DWORD)v4 == 1)
  {
    v23 = *(_DWORD *)(a1 + 20);
    v24 = *(_DWORD *)(a1 + 8);
    if (v23 == *(_DWORD *)(a2 + 20) && v23 == v24)
    {
      v28 = (*(_DWORD *)(a1 + 12) * v23);
      v29 = *(char **)a1;
      if ((_DWORD)v28)
        v30 = v29 == 0;
      else
        v30 = 0;
      if (v30)
      {
        if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))
        {
          abort();
        }
      }
      else if (!(_DWORD)v28)
      {
        return result;
      }
      memmove(*(void **)a2, v29, 4 * v28);
      return result;
    }
    v31 = *(unsigned int *)(a1 + 8);
    if (v24)
      v26 = *(_DWORD *)(a1 + 12) == 0;
    else
      v26 = 1;
    if (!v26)
      sub_2109032D8(&v31, (char **)a1, (char **)a2);
  }
  else
  {
    v6 = *(_DWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 12);
    if (v6)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
    {
      v9 = v6 - 1;
      v10 = *(char **)a1;
      v11 = *(_DWORD **)a2;
      v12 = v7 - 1;
      if (v12)
      {
        v13 = *(unsigned int *)(a2 + 20);
        v14 = *(unsigned int *)(a1 + 20);
        if (!v9)
        {
          do
          {
            *v11 = *(_DWORD *)v10;
            v10 += 4 * v14;
            v11 += v13;
            --v12;
          }
          while (v12);
LABEL_38:
          result = *(float *)v10;
          *v11 = *(_DWORD *)v10;
          return result;
        }
        v15 = 0;
        v16 = 4 * v14;
        v17 = 4 * v13;
        do
        {
          v18 = v11;
          v19 = v10;
          v20 = v9;
          do
          {
            *v18 = *(_DWORD *)v19;
            v19 += 4 * v3;
            v18 += v4;
            --v20;
          }
          while (v20);
          *v18 = *(_DWORD *)v19;
          v10 += v16;
          v11 = (_DWORD *)((char *)v11 + v17);
          ++v15;
        }
        while (v15 != v12);
      }
      if (v9)
      {
        v21 = 4 * v3;
        v22 = 4 * v4;
        do
        {
          *v11 = *(_DWORD *)v10;
          v10 += v21;
          v11 = (_DWORD *)((char *)v11 + v22);
          --v9;
        }
        while (v9);
      }
      goto LABEL_38;
    }
  }
  return result;
}

uint64_t *sub_2109032D8(uint64_t *result, char **a2, char **a3)
{
  int v3;
  BOOL v4;
  uint64_t *v5;
  char *v6;
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *((_DWORD *)a2 + 3);
  if (*((_DWORD *)a2 + 2))
    v4 = v3 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v5 = result;
    v6 = *a2;
    v7 = *a3;
    v8 = v3 - 1;
    if (v3 != 1)
    {
      v9 = 4 * *((unsigned int *)a2 + 5);
      v10 = 4 * *((unsigned int *)a3 + 5);
      do
      {
        v11 = *v5;
        if (!v6 && v11)
        {
          if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))
          {
            goto LABEL_19;
          }
        }
        else if (!v11)
        {
          goto LABEL_11;
        }
        result = (uint64_t *)memmove(v7, v6, 4 * v11);
LABEL_11:
        v6 += v9;
        v7 += v10;
        --v8;
      }
      while (v8);
    }
    v12 = *v5;
    if (!v6 && v12)
    {
      if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))
      {
LABEL_19:
        abort();
      }
      return (uint64_t *)memmove(v7, v6, 4 * v12);
    }
    if (v12)
      return (uint64_t *)memmove(v7, v6, 4 * v12);
  }
  return result;
}

float sub_21090342C(uint64_t *a1)
{
  uint64_t v2;
  float result;
  int v4;
  int v5;
  BOOL v6;
  _DWORD *v8;
  int v9;
  uint64_t v10;
  _DWORD *v11;
  int v12;
  uint64_t v13;
  int v14;
  _DWORD *v15;
  _DWORD *v16;
  int v17;

  v2 = *a1;
  if (*(_DWORD *)(v2 + 20) == 1)
  {
    if (*(_DWORD *)(v2 + 24) == *(_DWORD *)(v2 + 8))
      sub_21090354C((uint64_t)a1);
    else
      sub_21090395C(v2, a1[1]);
    return result;
  }
  v4 = *(_DWORD *)(v2 + 12);
  v5 = *(_DWORD *)(v2 + 16);
  if (*(_DWORD *)(v2 + 8))
    v6 = v4 == 0;
  else
    v6 = 1;
  if (!v6 && v5 != 0)
  {
    v8 = (_DWORD *)a1[1];
    v9 = v4 - 1;
    v10 = *(unsigned int *)(v2 + 24);
    v11 = *(_DWORD **)v2;
    v12 = v5 - 1;
    if (v12)
    {
      v13 = *(unsigned int *)(v2 + 28);
      if (!v9)
      {
        do
        {
          *v11 = *v8;
          v11[1] = *v8;
          v11 += v13;
          --v12;
        }
        while (v12);
LABEL_22:
        *v11 = *v8;
        result = *(float *)v8;
        v11[1] = *v8;
        return result;
      }
      v14 = 0;
      v15 = v11 + 1;
      do
      {
        v16 = v15;
        v17 = v9;
        do
        {
          *(v16 - 1) = *v8;
          *v16 = *v8;
          v16 += v10;
          --v17;
        }
        while (v17);
        *(v16 - 1) = *v8;
        *v16 = *v8;
        v11 += v13;
        ++v14;
        v15 += v13;
      }
      while (v14 != v12);
    }
    for (; v9; --v9)
    {
      *v11 = *v8;
      v11[1] = *v8;
      v11 += v10;
    }
    goto LABEL_22;
  }
  return result;
}

uint64_t sub_21090354C(uint64_t result)
{
  uint64_t v1;
  const float *v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  int v9;
  int v10;
  BOOL v11;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  unint64_t v17;
  float32x4_t v18;
  float32x4_t *v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  _QWORD v23[3];
  _DWORD v24[7];
  _QWORD v25[3];

  v1 = *(_QWORD *)result;
  v2 = *(const float **)(result + 8);
  v3 = *(_DWORD *)(*(_QWORD *)result + 12);
  v5 = *(_DWORD *)(*(_QWORD *)result + 24);
  v4 = *(_DWORD *)(*(_QWORD *)result + 28);
  if (v4 == v5 * v3)
  {
    v6 = (*(_DWORD *)(v1 + 8) * v3 * *(_DWORD *)(v1 + 16));
    v7 = *(_QWORD *)v1;
    if ((_DWORD)v6)
      v8 = v7 == 0;
    else
      v8 = 0;
    if (v8)
    {
      result = sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4);
      if ((_DWORD)result)
        abort();
    }
    else if (!(_DWORD)v6)
    {
      return result;
    }
    v14 = v6 - ((_DWORD)v6 != 0) + 1;
    if (v14 < 0x10)
      goto LABEL_22;
    v15 = 4 * v6;
    if (!(_DWORD)v6)
      v15 = 4;
    if (v7 < (unint64_t)(v2 + 1) && v7 + v15 > (unint64_t)v2)
    {
LABEL_22:
      v16 = (_DWORD *)v7;
LABEL_23:
      v17 = v6 + 1;
      do
      {
        *v16++ = *(_DWORD *)v2;
        --v17;
      }
      while (v17 > 1);
      return result;
    }
    v16 = (_DWORD *)(v7 + 4 * (v14 & 0xFFFFFFFFFFFFFFF8));
    v6 -= v14 & 0xFFFFFFFFFFFFFFF8;
    v18 = vld1q_dup_f32(v2);
    v19 = (float32x4_t *)(v7 + 16);
    v20 = v14 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v19[-1] = v18;
      *v19 = v18;
      v19 += 2;
      v20 -= 8;
    }
    while (v20);
    if (v14 != (v14 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_23;
  }
  else
  {
    v22 = 0;
    v9 = *(_DWORD *)(v1 + 8);
    v21 = (v9 * v3);
    v23[0] = &v22;
    v23[1] = &v21;
    v23[2] = v2;
    v10 = *(_DWORD *)(v1 + 16);
    if (v3)
      v11 = v9 == 0;
    else
      v11 = 1;
    if (!v11 && v10 != 0)
    {
      v24[0] = 0;
      v24[1] = v9 - 1;
      v24[2] = *(_DWORD *)(v1 + 20);
      v24[3] = v3 - 1;
      v24[4] = v5;
      v24[5] = v10 - 1;
      v24[6] = v4;
      v13 = *(_QWORD *)v1;
      memset(v25, 0, sizeof(v25));
      return sub_210903700((_BOOL8)v24, (uint64_t)v25, (uint64_t)v23, v13);
    }
  }
  return result;
}

BOOL sub_210903700(_BOOL8 result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  unsigned int *v9;
  unsigned int i;
  const float *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  unint64_t v17;
  float32x4_t v18;
  float32x4_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  const float *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  unint64_t v29;
  float32x4_t v30;
  float32x4_t *v31;
  unint64_t v32;

  v4 = a4;
  v7 = *(unsigned int *)(result + 16);
  v8 = *(unsigned int *)(result + 8) | (unint64_t)(v7 << 32);
  *(_QWORD *)a2 = a4;
  *(_QWORD *)(a2 + 8) = v8;
  *(_DWORD *)(a2 + 16) = v7;
  if (*(_DWORD *)(result + 20))
  {
    v9 = (unsigned int *)result;
    for (i = 0; i < v9[5]; ++i)
    {
      *(_QWORD *)a2 = v4;
      v11 = *(const float **)(a3 + 16);
      v12 = **(_QWORD **)(a3 + 8);
      if (!v4)
      {
        if (v12)
        {
          result = sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4);
          if (result)
            goto LABEL_37;
        }
      }
      if (v12 >= 1)
      {
        v13 = v12 & 0x3FFFFFFFFFFFFFFFLL;
        v14 = (v12 & 0x3FFFFFFFFFFFFFFFLL) - ((v12 & 0x3FFFFFFFFFFFFFFFLL) != 0) + 1;
        if (v14 >= 0x10)
        {
          v16 = -4;
          if (!v13)
            v16 = 0;
          if (v4 >= (unint64_t)(v11 + 1)
            || (v17 = v4 + v16 + 4 * v12 + 4, v15 = (_DWORD *)v4, (unint64_t)v11 >= v17))
          {
            v15 = (_DWORD *)(v4 + 4 * (v14 & 0xFFFFFFFFFFFFFFF8));
            v13 -= v14 & 0xFFFFFFFFFFFFFFF8;
            v18 = vld1q_dup_f32(v11);
            v19 = (float32x4_t *)(v4 + 16);
            v20 = v14 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              v19[-1] = v18;
              *v19 = v18;
              v19 += 2;
              v20 -= 8;
            }
            while (v20);
            if (v14 == (v14 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_3;
          }
        }
        else
        {
          v15 = (_DWORD *)v4;
        }
        v21 = v13 + 1;
        do
        {
          *v15++ = *(_DWORD *)v11;
          --v21;
        }
        while (v21 > 1);
      }
LABEL_3:
      v4 += 4 * v9[6];
    }
  }
  *(_QWORD *)a2 = v4;
  v22 = *(uint64_t **)(a3 + 8);
  v23 = *(const float **)(a3 + 16);
  v24 = *v22;
  if (!v4)
  {
    if (v24)
    {
      result = sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4);
      if (result)
LABEL_37:
        abort();
    }
  }
  if (v24 >= 1)
  {
    v25 = v24 & 0x3FFFFFFFFFFFFFFFLL;
    v26 = (v24 & 0x3FFFFFFFFFFFFFFFLL) - ((v24 & 0x3FFFFFFFFFFFFFFFLL) != 0) + 1;
    if (v26 < 0x10)
      goto LABEL_29;
    v27 = 4 * v24;
    if (!v25)
      v27 = 4;
    if (v4 < (unint64_t)(v23 + 1) && (unint64_t)v23 < v4 + v27)
    {
LABEL_29:
      v28 = (_DWORD *)v4;
LABEL_30:
      v29 = v25 + 1;
      do
      {
        *v28++ = *(_DWORD *)v23;
        --v29;
      }
      while (v29 > 1);
      return result;
    }
    v28 = (_DWORD *)(v4 + 4 * (v26 & 0xFFFFFFFFFFFFFFF8));
    v25 -= v26 & 0xFFFFFFFFFFFFFFF8;
    v30 = vld1q_dup_f32(v23);
    v31 = (float32x4_t *)(v4 + 16);
    v32 = v26 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v31[-1] = v30;
      *v31 = v30;
      v31 += 2;
      v32 -= 8;
    }
    while (v32);
    if (v26 != (v26 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_30;
  }
  return result;
}

uint64_t sub_21090395C(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  int v7;
  unsigned int v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  char v12;
  _QWORD v13[3];
  _DWORD v14[5];
  unsigned int v15;
  unsigned int v16;
  unint64_t v17[2];

  v12 = 0;
  v13[0] = &v12;
  v13[1] = &v11;
  v3 = *(unsigned int *)(result + 8);
  v2 = *(_DWORD *)(result + 12);
  v11 = v3;
  v13[2] = a2;
  v4 = *(_DWORD *)(result + 16);
  if ((_DWORD)v3)
    v5 = v2 == 0;
  else
    v5 = 1;
  if (!v5 && v4 != 0)
  {
    v14[0] = 0;
    v14[1] = v3 - 1;
    v7 = *(_DWORD *)(result + 24);
    v14[2] = *(_DWORD *)(result + 20);
    v14[3] = v2 - 1;
    v8 = *(_DWORD *)(result + 28);
    v9 = *(_QWORD *)result;
    v17[0] = 0;
    v17[1] = 0;
    v14[4] = v7;
    v15 = v4 - 1;
    v16 = v8;
    if (v4 != 1)
    {
      v10 = 0;
      do
      {
        sub_210903A1C((uint64_t)v14, v17, (uint64_t)v13, v9);
        v9 += 4 * v16;
        ++v10;
      }
      while (v10 < v15);
    }
    return sub_210903A1C((uint64_t)v14, v17, (uint64_t)v13, v9);
  }
  return result;
}

uint64_t sub_210903A1C(uint64_t result, unint64_t *a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v7;
  unsigned int i;
  const float *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  unint64_t v15;
  float32x4_t v16;
  float32x4_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  const float *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  unint64_t v27;
  float32x4_t v28;
  float32x4_t *v29;
  unint64_t v30;

  v4 = a4;
  *a2 = a4;
  if (*(_DWORD *)(result + 12))
  {
    v7 = result;
    for (i = 0; i < *(_DWORD *)(v7 + 12); ++i)
    {
      *a2 = v4;
      v9 = *(const float **)(a3 + 16);
      v10 = **(_QWORD **)(a3 + 8);
      if (!v4)
      {
        if (v10)
        {
          result = sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4);
          if ((_DWORD)result)
            goto LABEL_37;
        }
      }
      if (v10 >= 1)
      {
        v11 = v10 & 0x3FFFFFFFFFFFFFFFLL;
        v12 = (v10 & 0x3FFFFFFFFFFFFFFFLL) - ((v10 & 0x3FFFFFFFFFFFFFFFLL) != 0) + 1;
        if (v12 >= 0x10)
        {
          v14 = -4;
          if (!v11)
            v14 = 0;
          if (v4 >= (unint64_t)(v9 + 1)
            || (v15 = v4 + v14 + 4 * v10 + 4, v13 = (_DWORD *)v4, (unint64_t)v9 >= v15))
          {
            v13 = (_DWORD *)(v4 + 4 * (v12 & 0xFFFFFFFFFFFFFFF8));
            v11 -= v12 & 0xFFFFFFFFFFFFFFF8;
            v16 = vld1q_dup_f32(v9);
            v17 = (float32x4_t *)(v4 + 16);
            v18 = v12 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              v17[-1] = v16;
              *v17 = v16;
              v17 += 2;
              v18 -= 8;
            }
            while (v18);
            if (v12 == (v12 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_3;
          }
        }
        else
        {
          v13 = (_DWORD *)v4;
        }
        v19 = v11 + 1;
        do
        {
          *v13++ = *(_DWORD *)v9;
          --v19;
        }
        while (v19 > 1);
      }
LABEL_3:
      v4 += 4 * *(unsigned int *)(v7 + 16);
    }
  }
  *a2 = v4;
  v20 = *(uint64_t **)(a3 + 8);
  v21 = *(const float **)(a3 + 16);
  v22 = *v20;
  if (!v4)
  {
    if (v22)
    {
      result = sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4);
      if ((_DWORD)result)
LABEL_37:
        abort();
    }
  }
  if (v22 >= 1)
  {
    v23 = v22 & 0x3FFFFFFFFFFFFFFFLL;
    v24 = (v22 & 0x3FFFFFFFFFFFFFFFLL) - ((v22 & 0x3FFFFFFFFFFFFFFFLL) != 0) + 1;
    if (v24 < 0x10)
      goto LABEL_29;
    v25 = 4 * v22;
    if (!v23)
      v25 = 4;
    if (v4 < (unint64_t)(v21 + 1) && (unint64_t)v21 < v4 + v25)
    {
LABEL_29:
      v26 = (_DWORD *)v4;
LABEL_30:
      v27 = v23 + 1;
      do
      {
        *v26++ = *(_DWORD *)v21;
        --v27;
      }
      while (v27 > 1);
      return result;
    }
    v26 = (_DWORD *)(v4 + 4 * (v24 & 0xFFFFFFFFFFFFFFF8));
    v23 -= v24 & 0xFFFFFFFFFFFFFFF8;
    v28 = vld1q_dup_f32(v21);
    v29 = (float32x4_t *)(v4 + 16);
    v30 = v24 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v29[-1] = v28;
      *v29 = v28;
      v29 += 2;
      v30 -= 8;
    }
    while (v30);
    if (v24 != (v24 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_30;
  }
  return result;
}

float sub_210903C68(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v4;
  int v5;
  BOOL v6;
  int v8;
  uint64_t v9;
  uint64_t v10;
  float *v11;
  float *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  int v21;
  float result;

  v2 = *a1;
  v1 = a1[1];
  if (*(_DWORD *)(*a1 + 20) == 1 && *(_DWORD *)(v1 + 20) == 1)
  {
    sub_210903DA4(a1);
    return result;
  }
  v4 = *(_DWORD *)(v2 + 12);
  v5 = *(_DWORD *)(v2 + 16);
  if (*(_DWORD *)(v2 + 8))
    v6 = v4 == 0;
  else
    v6 = 1;
  if (!v6 && v5 != 0)
  {
    v8 = v4 - 1;
    v9 = *(unsigned int *)(v2 + 24);
    v10 = *(unsigned int *)(v1 + 24);
    v11 = *(float **)v2;
    v12 = *(float **)v1;
    v13 = v5 - 1;
    if (v13)
    {
      v14 = *(unsigned int *)(v1 + 28);
      v15 = *(unsigned int *)(v2 + 28);
      if (!v8)
      {
        do
        {
          *v12 = *v11;
          v12[1] = v11[1];
          v11 += v15;
          v12 += v14;
          --v13;
        }
        while (v13);
LABEL_23:
        *v12 = *v11;
        result = v11[1];
        v12[1] = result;
        return result;
      }
      v16 = 0;
      v17 = v11 + 1;
      v18 = v12 + 1;
      do
      {
        v19 = v18;
        v20 = v17;
        v21 = v8;
        do
        {
          *(v19 - 1) = *(v20 - 1);
          *v19 = *v20;
          v20 += v9;
          v19 += v10;
          --v21;
        }
        while (v21);
        *(v19 - 1) = *(v20 - 1);
        *v19 = *v20;
        v11 += v15;
        v12 += v14;
        ++v16;
        v17 += v15;
        v18 += v14;
      }
      while (v16 != v13);
    }
    for (; v8; --v8)
    {
      *v12 = *v11;
      v12[1] = v11[1];
      v11 += v9;
      v12 += v10;
    }
    goto LABEL_23;
  }
  return result;
}

uint64_t *sub_210903DA4(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  unsigned int v4;
  int v5;
  int v6;
  uint64_t v7;
  char *v8;
  BOOL v9;
  BOOL v10;
  uint64_t v12;

  v1 = *result;
  v2 = result[1];
  v3 = *(_DWORD *)(*result + 24);
  if (v3 == *(_DWORD *)(v2 + 24))
  {
    v4 = *(_DWORD *)(v1 + 8);
    if (v3 == *(_DWORD *)(v1 + 20) * v4)
    {
      v5 = *(_DWORD *)(v1 + 28);
      if (v5 != *(_DWORD *)(v2 + 28))
        return (uint64_t *)sub_210903ED8((_DWORD *)*result, (char **)v2);
      v6 = *(_DWORD *)(v1 + 12);
      if (v5 != v6 * v3)
        return (uint64_t *)sub_210903ED8((_DWORD *)*result, (char **)v2);
      v7 = v6 * v4 * *(_DWORD *)(v1 + 16);
      v8 = *(char **)v1;
      if ((_DWORD)v7)
        v9 = v8 == 0;
      else
        v9 = 0;
      if (v9)
      {
        if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))
        {
          abort();
        }
      }
      else if (!(_DWORD)v7)
      {
        return result;
      }
      return (uint64_t *)memmove(*(void **)v2, v8, 4 * v7);
    }
  }
  else
  {
    v4 = *(_DWORD *)(v1 + 8);
  }
  v12 = v4;
  if (v4)
    v10 = *(_DWORD *)(v1 + 12) == 0;
  else
    v10 = 1;
  if (!v10 && *(_DWORD *)(v1 + 16) != 0)
    return sub_21090402C(&v12, (char **)v1, (char **)v2);
  return result;
}

_DWORD *sub_210903ED8(_DWORD *result, char **a2)
{
  int v2;
  int v3;
  int v4;
  BOOL v5;
  uint64_t v7;
  char *v8;
  char *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  v2 = result[2];
  v3 = result[3];
  v4 = result[4];
  if (v2)
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5 && v4 != 0)
  {
    v7 = (v3 * v2);
    v8 = *(char **)result;
    v9 = *a2;
    v10 = v4 - 1;
    if (v4 == 1)
    {
LABEL_17:
      if (!(_DWORD)v7 || v8)
      {
        if (!(_DWORD)v7)
          return result;
      }
      else if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))
      {
        goto LABEL_16;
      }
      return memmove(v9, v8, 4 * v7);
    }
    if ((_DWORD)v7)
    {
      v11 = 4 * result[7];
      v12 = 4 * *((unsigned int *)a2 + 7);
      while (v8
           || !sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))
      {
        result = memmove(v9, v8, 4 * v7);
        v8 += v11;
        v9 += v12;
        if (!--v10)
          goto LABEL_17;
      }
LABEL_16:
      abort();
    }
  }
  return result;
}

uint64_t *sub_21090402C(uint64_t *result, char **a2, char **a3)
{
  int v3;
  int v4;
  BOOL v5;
  int v7;
  uint64_t v8;
  int v9;
  char *v10;
  int v11;
  unsigned __int8 *v12;
  char *v13;
  int v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  unsigned __int8 *v20;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, const char *, uint64_t, void *, _QWORD);
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  char *v39;
  char *v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t *v44;

  v44 = result;
  v3 = *((_DWORD *)a2 + 3);
  v4 = *((_DWORD *)a2 + 4);
  if (*((_DWORD *)a2 + 2))
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5 && v4 != 0)
  {
    v7 = v3 - 1;
    v43 = *((unsigned int *)a2 + 6);
    v8 = *((unsigned int *)a3 + 6);
    v9 = v4 - 1;
    v5 = v9 == 0;
    v41 = v9;
    v10 = *a2;
    if (!v5)
    {
      if (v3 != 1)
      {
        v11 = 0;
        v12 = (unsigned __int8 *)&qword_254A75F38;
        v13 = *a3;
        v36 = *((unsigned int *)a2 + 7);
        v37 = *((unsigned int *)a3 + 7);
        v42 = v3 - 1;
        while (1)
        {
          v38 = v11;
          v14 = 0;
          v39 = v13;
          v40 = v10;
          v15 = v10;
          do
          {
            v16 = v15;
            v17 = *v44;
            if (v16 || !v17)
            {
              if (!v17)
                goto LABEL_19;
            }
            else
            {
              v18 = v8;
              sub_2109EDAB0("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4);
              v19 = atomic_load(v12);
              if ((v19 & 1) == 0 && __cxa_guard_acquire((__guard *)v12))
              {
                __cxa_atexit((void (*)(void *))sub_2109EDF34, &qword_254A75F00, &dword_21089F000);
                __cxa_guard_release((__guard *)v12);
              }
              v20 = v12;
              if (!byte_254A75F28 || byte_254A75F30)
              {
                v22 = qword_254A75F00;
                v23 = unk_254A75F08;
                while (v22 != v23)
                {
                  v25 = *(void (**)(uint64_t, const char *, uint64_t, void *, _QWORD))v22;
                  v24 = *(_QWORD *)(v22 + 8);
                  v22 += 16;
                  v25(v24, "ptr != nullptr || size == 0", 27, &unk_210A02D2A, 0);
                }
              }
              v12 = v20;
              v21 = atomic_load(v20);
              if ((v21 & 1) == 0 && __cxa_guard_acquire((__guard *)v20))
              {
                __cxa_atexit((void (*)(void *))sub_2109EDF34, &qword_254A75F00, &dword_21089F000);
                __cxa_guard_release((__guard *)v20);
              }
              if (!byte_254A75F28)
                goto LABEL_52;
              v8 = v18;
              qword_254A75F18(unk_254A75F20, "ptr != nullptr || size == 0", 27, &unk_210A02D2A, 0);
              v7 = v42;
            }
            result = (uint64_t *)memmove(v13, v16, 4 * v17);
LABEL_19:
            v15 = &v16[4 * v43];
            v13 += 4 * v8;
            ++v14;
          }
          while (v14 != v7);
          v26 = *v44;
          if (!v16 && v26)
          {
            if (!sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))
            {
LABEL_14:
              result = (uint64_t *)memmove(v13, v15, 4 * v26);
              goto LABEL_15;
            }
LABEL_52:
            abort();
          }
          if (v26)
            goto LABEL_14;
LABEL_15:
          v10 = &v40[4 * v36];
          v13 = &v39[4 * v37];
          v11 = v38 + 1;
          if (v38 + 1 == v41)
            goto LABEL_40;
        }
      }
      v32 = 4 * *((unsigned int *)a2 + 7);
      v33 = 4 * *((unsigned int *)a3 + 7);
      v13 = *a3;
      while (1)
      {
        v34 = *v44;
        v35 = v10;
        if (!v10 && v34)
        {
          if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))
          {
            goto LABEL_52;
          }
        }
        else if (!v34)
        {
          goto LABEL_58;
        }
        result = (uint64_t *)memmove(v13, v35, 4 * v34);
LABEL_58:
        v10 = &v35[v32];
        v13 += v33;
        if (!--v41)
          goto LABEL_40;
      }
    }
    v13 = *a3;
LABEL_40:
    v27 = v13;
    v28 = v10;
    if (v7)
    {
      v29 = 4 * v8;
      do
      {
        v30 = *v44;
        if (!v28 && v30)
        {
          if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))
          {
            goto LABEL_52;
          }
        }
        else if (!v30)
        {
          goto LABEL_44;
        }
        result = (uint64_t *)memmove(v27, v28, 4 * v30);
LABEL_44:
        v28 += 4 * v43;
        v27 += v29;
        --v7;
      }
      while (v7);
    }
    v31 = *v44;
    if (!v28 && v31)
    {
      if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210A02D2A, 0, (void (*)(void **))sub_2109EDDB4))
      {
        goto LABEL_52;
      }
      return (uint64_t *)memmove(v27, v28, 4 * v31);
    }
    if (v31)
      return (uint64_t *)memmove(v27, v28, 4 * v31);
  }
  return result;
}

void sub_21090449C(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;
  BOOL v7;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  _DWORD *v12;
  _DWORD v13[7];

  v2 = *a1;
  v3 = *(_DWORD *)(v2 + 20);
  if (v3 == 1)
  {
    if (*(_DWORD *)(v2 + 24) == *(_DWORD *)(v2 + 8))
      sub_21090354C((uint64_t)a1);
    else
      sub_21090395C(v2, a1[1]);
  }
  else
  {
    v10 = a1[1];
    v5 = *(_DWORD *)(v2 + 8);
    v4 = *(_DWORD *)(v2 + 12);
    v6 = *(_DWORD *)(v2 + 16);
    if (v5)
      v7 = v4 == 0;
    else
      v7 = 1;
    if (!v7 && v6 != 0)
    {
      v11 = &v10;
      v13[0] = 0;
      v13[1] = v5 - 1;
      v13[2] = v3;
      v13[3] = v4 - 1;
      v9 = *(_DWORD *)(v2 + 28);
      v13[4] = *(_DWORD *)(v2 + 24);
      v13[5] = v6 - 1;
      v13[6] = v9;
      v12 = *(_DWORD **)v2;
      sub_210904558(v13, &v11, &v12);
    }
  }
}

float sub_210904558(_DWORD *a1, _QWORD **a2, _DWORD **a3)
{
  _DWORD *v3;
  int v4;
  int v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  int v12;
  uint64_t v13;
  float result;

  v3 = *a3;
  v4 = a1[5];
  if (!v4)
  {
    v5 = a1[3];
    v6 = (_DWORD *)**a2;
    if (!v5)
      goto LABEL_13;
    goto LABEL_9;
  }
  v5 = a1[3];
  v6 = (_DWORD *)**a2;
  v7 = a1[6];
  if (v5)
  {
    v8 = 0;
    v9 = v3 + 2;
    v10 = 4 * a1[4];
    do
    {
      v11 = v9;
      v12 = v5;
      do
      {
        *(v11 - 2) = *v6;
        *(v11 - 1) = *v6;
        *v11 = *v6;
        v11[1] = *v6;
        v11 = (_DWORD *)((char *)v11 + v10);
        --v12;
      }
      while (v12);
      *(v11 - 2) = *v6;
      *(v11 - 1) = *v6;
      *v11 = *v6;
      v11[1] = *v6;
      v3 += v7;
      ++v8;
      v9 += v7;
    }
    while (v8 != v4);
LABEL_9:
    v13 = 4 * a1[4];
    do
    {
      *v3 = *v6;
      v3[1] = *v6;
      v3[2] = *v6;
      v3[3] = *v6;
      v3 = (_DWORD *)((char *)v3 + v13);
      --v5;
    }
    while (v5);
    goto LABEL_13;
  }
  do
  {
    *v3 = *v6;
    v3[1] = *v6;
    v3[2] = *v6;
    v3[3] = *v6;
    v3 += v7;
    --v4;
  }
  while (v4);
LABEL_13:
  *v3 = *v6;
  v3[1] = *v6;
  v3[2] = *v6;
  result = *(float *)v6;
  v3[3] = *v6;
  return result;
}

float sub_210904698(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  BOOL v5;
  int v7;
  uint64_t v8;
  uint64_t v9;
  float *v10;
  float *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  int v20;
  float result;

  v3 = *(_DWORD *)(a2 + 12);
  v4 = *(_DWORD *)(a2 + 16);
  if (*(_DWORD *)(a2 + 8))
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5 && v4 != 0)
  {
    v7 = v3 - 1;
    v8 = *(unsigned int *)(a2 + 24);
    v9 = *(unsigned int *)(a3 + 24);
    v10 = *(float **)a2;
    v11 = *(float **)a3;
    v12 = v4 - 1;
    if (v12)
    {
      v13 = *(unsigned int *)(a3 + 28);
      v14 = *(unsigned int *)(a2 + 28);
      if (!v7)
      {
        do
        {
          *v11 = *v10;
          v11[1] = v10[1];
          v11[2] = v10[2];
          v11[3] = v10[3];
          v10 += v14;
          v11 += v13;
          --v12;
        }
        while (v12);
LABEL_18:
        *v11 = *v10;
        v11[1] = v10[1];
        v11[2] = v10[2];
        result = v10[3];
        v11[3] = result;
        return result;
      }
      v15 = 0;
      v16 = v11 + 2;
      v17 = v10 + 2;
      do
      {
        v18 = v17;
        v19 = v16;
        v20 = v7;
        do
        {
          *(v19 - 2) = *(v18 - 2);
          *(v19 - 1) = *(v18 - 1);
          *v19 = *v18;
          v19[1] = v18[1];
          v19 += v9;
          v18 += v8;
          --v20;
        }
        while (v20);
        *(v19 - 2) = *(v18 - 2);
        *(v19 - 1) = *(v18 - 1);
        *v19 = *v18;
        v19[1] = v18[1];
        v10 += v14;
        v11 += v13;
        ++v15;
        v16 += v13;
        v17 += v14;
      }
      while (v15 != v12);
    }
    for (; v7; --v7)
    {
      *v11 = *v10;
      v11[1] = v10[1];
      v11[2] = v10[2];
      v11[3] = v10[3];
      v10 += v8;
      v11 += v9;
    }
    goto LABEL_18;
  }
  return result;
}

void sub_21090480C()
{
  JUMPOUT(0x212BCC6FCLL);
}

void sub_210904820(int a1@<W1>, uint64_t a2@<X8>)
{
  sub_210904870(a2, a1);
}

void sub_210904848(int a1@<W1>, uint64_t a2@<X8>)
{
  sub_2109075EC(a2, a1);
}

void sub_210904870(uint64_t a1, int a2)
{
  __asm { BR              X10 }
}

uint64_t sub_2109048C4(int a1, int a2, _DWORD *a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, __int16 a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,__int128 a22,uint64_t a23,void *__p,__int128 a25,int a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  _BOOL8 v68;
  uint64_t v69;
  uint64_t result;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _BYTE v75[264];

  LODWORD(v66) = *a3;
  v67 = a3[1];
  v68 = *a3 != 0;
  if (*a3 <= 0x20u)
    LODWORD(v66) = 32;
  v69 = *(_QWORD *)a3;
  *(_QWORD *)v64 = off_24CA7D688;
  if (v67)
    v66 = v66;
  else
    v66 = 32;
  *(_QWORD *)(v64 + 128) = v69;
  *(_QWORD *)(v64 + 136) = v68 | (v66 << 32);
  sub_2108D022C((uint64_t)&v74, 0, 1, (unsigned int *)(v65 - 136), 0);
  *(_QWORD *)v64 = off_24CA7D688;
  result = operator new();
  v71 = result;
  *(_QWORD *)result = off_24CA7AED0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(v64 + 8);
  *(_BYTE *)(result + 16) = 0;
  *(_DWORD *)(result + 40) = -1;
  v72 = *(unsigned int *)(v64 + 40);
  if ((_DWORD)v72 == -1)
  {
    *(_OWORD *)(result + 48) = *(_OWORD *)(v64 + 48);
    *(_QWORD *)result = off_24CA7D688;
  }
  else
  {
    result = ((uint64_t (*)(uint64_t, uint64_t, _BYTE *))off_24CA7C0A0[v72])(v65 - 136, result + 16, v75);
    *(_DWORD *)(v71 + 40) = v72;
    v73 = *(unsigned int *)(v64 + 40);
    *(_OWORD *)(v71 + 48) = *(_OWORD *)(v64 + 48);
    *(_QWORD *)v71 = off_24CA7D688;
    *(_QWORD *)v64 = off_24CA7AED0;
    if ((_DWORD)v73 != -1)
      result = ((uint64_t (*)(uint64_t, _BYTE *))off_24CA7C080[v73])(v65 - 136, v75);
  }
  *v63 = v71;
  return result;
}

void sub_2109070C0()
{
  sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/include/Kit/Image/FormatAlgorithm.h", 523, (uint64_t)&unk_210A02D2A, 0, (uint64_t)"Runtime format not in given Formats list", 40, (void (*)(void **))sub_2109EDDB4);
  abort();
}

void sub_2109070F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (a2)
    sub_2108ABF6C(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2109075EC(uint64_t a1, int a2)
{
  __asm { BR              X10 }
}

uint64_t sub_210907640(int a1, int a2, _DWORD *a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, int a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int128 a17, uint64_t a18, uint64_t a19, uint64_t a20,__int128 a21,int a22,int a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  _BOOL8 v54;
  uint64_t result;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (**v59)();
  int v60;
  _BYTE v61[24];
  unsigned int v62;
  __int128 v63;

  LODWORD(v53) = *a3;
  v54 = *a3 != 0;
  if (a3[1])
    v53 = v53;
  else
    v53 = 0;
  *(_QWORD *)(v52 - 136) = *(_QWORD *)a3;
  *(_QWORD *)(v52 - 128) = v54 | (v53 << 32);
  sub_2108DE9EC((uint64_t)&v59, v52 - 136);
  result = operator new();
  v56 = result;
  *(_QWORD *)result = off_24CA7AED0;
  v57 = v62;
  *(_DWORD *)(result + 8) = v60;
  *(_BYTE *)(result + 16) = 0;
  *(_DWORD *)(result + 40) = -1;
  if ((_DWORD)v57 == -1)
  {
    *(_OWORD *)(result + 48) = v63;
    *(_QWORD *)result = off_24CA7D688;
  }
  else
  {
    result = ((uint64_t (*)(uint64_t, uint64_t, _BYTE *))off_24CA7C0A0[v57])(v52 - 136, result + 16, v61);
    *(_DWORD *)(v56 + 40) = v57;
    v58 = v62;
    *(_OWORD *)(v56 + 48) = v63;
    *(_QWORD *)v56 = off_24CA7D688;
    v59 = off_24CA7AED0;
    if ((_DWORD)v58 != -1)
      result = ((uint64_t (*)(uint64_t, _BYTE *))off_24CA7C080[v58])(v52 - 136, v61);
  }
  *v51 = v56;
  return result;
}

void sub_21090A0A4()
{
  sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/Image/include/Kit/Image/FormatAlgorithm.h", 523, (uint64_t)&unk_210A02D2A, 0, (uint64_t)"Runtime format not in given Formats list", 40, (void (*)(void **))sub_2109EDDB4);
  abort();
}

void sub_21090A0E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *__p,uint64_t a33,uint64_t a34)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_2108ABF6C(exception_object);
}

void sub_21090A854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_2108E1804((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21090A868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_2108DECA0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21090A87C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_2108EE5CC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21090A890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_2108EFD24((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21090A8A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_2108E5A88((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21090A8B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_2108E2DBC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21090A8CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_2108ECEB0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21090A8E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_2108E0254((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21090A8F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_2108E71A4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21090A908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_2108E436C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21090A91C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_2108EB750((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21090A930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_2108E9FF8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21090A944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_2108E88C0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21090A958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_2108F1484((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21090A970(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2108BACA0();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_2108B9228(&__p, (uint64_t)__dst, 1uLL);
  sub_2109ED500(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_21090AA6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_2108A89B4(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *sub_21090AA98@<X0>(_QWORD *result@<X0>, unint64_t a2@<X1>, size_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v5;
  unint64_t v7;
  size_t v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  size_t v14;

  v5 = result;
  if ((*((char *)result + 23) & 0x80000000) == 0)
  {
    v7 = *((unsigned __int8 *)result + 23);
    if (v7 >= a2)
    {
      v8 = v7 - a2;
      if (v8 >= a3)
        v9 = a3;
      else
        v9 = v8;
      if (v9 < 0x7FFFFFFFFFFFFFF8)
        goto LABEL_7;
LABEL_19:
      sub_2108A4B7C();
    }
LABEL_20:
    sub_2108B3068();
  }
  v13 = result[1];
  if (v13 < a2)
    goto LABEL_20;
  v5 = (_QWORD *)*result;
  v14 = v13 - a2;
  if (v14 >= a3)
    v9 = a3;
  else
    v9 = v14;
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_19;
LABEL_7:
  if (v9 >= 0x17)
  {
    v10 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v10 = v9 | 7;
    v11 = v10 + 1;
    v12 = operator new(v10 + 1);
    a4[1] = v9;
    a4[2] = v11 | 0x8000000000000000;
    *a4 = v12;
    a4 = v12;
  }
  else
  {
    *((_BYTE *)a4 + 23) = v9;
    if (!v9)
    {
      *(_BYTE *)a4 = 0;
      return result;
    }
  }
  result = memmove(a4, (char *)v5 + a2, v9);
  *((_BYTE *)a4 + v9) = 0;
  return result;
}

unint64_t sub_21090AB9C(uint64_t *a1, char *__s, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  int64_t v9;
  void *v10;
  char *v11;
  int64_t v12;
  char *v13;
  int v14;
  uint64_t v15;
  char *v16;

  v5 = (uint64_t)a1;
  if (*((char *)a1 + 23) < 0)
  {
    v5 = *a1;
    v6 = a1[1];
    v7 = strlen(__s);
    if (v6 < a3)
      return -1;
  }
  else
  {
    v6 = *((unsigned __int8 *)a1 + 23);
    v7 = strlen(__s);
    if (v6 < a3)
      return -1;
  }
  v9 = v7;
  if (v7)
  {
    v10 = (void *)(v5 + a3);
    v11 = (char *)(v5 + v6);
    v12 = v6 - a3;
    if ((uint64_t)(v6 - a3) >= v9)
    {
      v14 = *__s;
      do
      {
        v15 = v12 - v9;
        if (v15 == -1)
          break;
        v16 = (char *)memchr(v10, v14, v15 + 1);
        if (!v16)
          break;
        v13 = v16;
        if (!memcmp(v16, __s, v9))
          goto LABEL_9;
        v10 = v13 + 1;
        v12 = v11 - (v13 + 1);
      }
      while (v12 >= v9);
    }
    v13 = v11;
LABEL_9:
    if (v13 == v11)
      return -1;
    else
      return (unint64_t)&v13[-v5];
  }
  return a3;
}

void sub_21090AC90(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2108F2BDC();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_2108B9228(&__p, (uint64_t)__dst, 1uLL);
  sub_2109ED500(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_21090AD8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_2108A89B4(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_21090ADB8(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2108F2F38();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_2108B9228(&__p, (uint64_t)__dst, 1uLL);
  sub_2109ED500(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_21090AEB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_2108A89B4(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_21090AEE0(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2108F3030();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_2108B9228(&__p, (uint64_t)__dst, 1uLL);
  sub_2109ED500(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_21090AFDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_2108A89B4(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_21090B008(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2108BCA7C();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_2108B9228(&__p, (uint64_t)__dst, 1uLL);
  sub_2109ED500(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_21090B104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_2108A89B4(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_21090B130(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2108F3128();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_2108B9228(&__p, (uint64_t)__dst, 1uLL);
  sub_2109ED500(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_21090B22C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_2108A89B4(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_21090B258(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2108F3220();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_2108B9228(&__p, (uint64_t)__dst, 1uLL);
  sub_2109ED500(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_21090B354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_2108A89B4(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_21090B380(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2108F3318();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_2108B9228(&__p, (uint64_t)__dst, 1uLL);
  sub_2109ED500(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_21090B47C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_2108A89B4(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_21090B4A8(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2108F3410();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_2108B9228(&__p, (uint64_t)__dst, 1uLL);
  sub_2109ED500(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_21090B5A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_2108A89B4(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_21090B5D0(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2108F3508();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_2108B9228(&__p, (uint64_t)__dst, 1uLL);
  sub_2109ED500(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_21090B6CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_2108A89B4(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_21090B6F8(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2108F3600();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_2108B9228(&__p, (uint64_t)__dst, 1uLL);
  sub_2109ED500(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_21090B7F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_2108A89B4(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_21090B820(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2108F36F8();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_2108B9228(&__p, (uint64_t)__dst, 1uLL);
  sub_2109ED500(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_21090B91C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_2108A89B4(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_21090B948(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2108F37F0();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_2108B9228(&__p, (uint64_t)__dst, 1uLL);
  sub_2109ED500(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_21090BA44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_2108A89B4(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_21090BA70(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2108F38E8();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_2108B314C(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_2108B9228(&__p, (uint64_t)__dst, 1uLL);
  sub_2109ED500(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_21090BB6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_2108A89B4(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_21090BB98(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string v11;
  uint64_t v12;
  std::string *v13;
  uint64_t v14;
  std::string *v15;
  std::string *v16;
  uint64_t *v17;

  v12 = a2;
  v13 = (std::string *)"{";
  v14 = a2;
  v15 = (std::string *)"{";
  v16 = (std::string *)"{";
  v3 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 == -1)
    goto LABEL_11;
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  ((void (*)(std::string *))off_24CA7D660[v3])(&v11);
  std::to_string(&v11, *a3);
  v12 = a2;
  v13 = &v11;
  v14 = a2;
  v15 = &v11;
  v16 = &v11;
  v6 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v6 == -1)
    sub_2108B9060();
  v17 = &v12;
  ((void (*)(uint64_t **, uint64_t))off_24CA7D2E8[v6])(&v17, a2);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  v12 = a2;
  v13 = (std::string *)",";
  v14 = a2;
  v15 = (std::string *)",";
  v16 = (std::string *)",";
  v7 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v7 == -1)
    goto LABEL_11;
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  ((void (*)(std::string *, uint64_t))off_24CA7D660[v7])(&v11, a2);
  std::to_string(&v11, a3[1]);
  v12 = a2;
  v13 = &v11;
  v14 = a2;
  v15 = &v11;
  v16 = &v11;
  v8 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v8 == -1)
    sub_2108B9060();
  v17 = &v12;
  ((void (*)(uint64_t **, uint64_t))off_24CA7D2E8[v8])(&v17, a2);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  v12 = a2;
  v13 = (std::string *)"}";
  v14 = a2;
  v15 = (std::string *)"}";
  v16 = (std::string *)"}";
  v9 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v9 == -1)
LABEL_11:
    sub_2108B9060();
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  return ((uint64_t (*)(std::string *, uint64_t))off_24CA7D660[v9])(&v11, a2);
}

void sub_21090BD30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_DWORD *sub_21090BD54(_DWORD ***a1)
{
  return sub_21090BD70(**a1, (char *)(*a1)[1]);
}

void sub_21090BD60(uint64_t a1, uint64_t a2)
{
  sub_21090BE60((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

_DWORD *sub_21090BD70(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24CA7D2D0[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_2108A4B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_21090BE60(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_2108A4B7C();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24CA7D2D0[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_2108B9228((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_21090C014(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_2108ABF6C(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_21090C058(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_21090C150((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_2108A4B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_21090C148(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_21090C150(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_2108B327C();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_2108B2B1C();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_2108A4B7C();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_21090C34C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2108B3680((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_21090C360(_DWORD ***a1)
{
  return sub_21090C37C(**a1, (char *)(*a1)[1]);
}

void sub_21090C36C(uint64_t a1, uint64_t a2)
{
  sub_21090C46C((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

_DWORD *sub_21090C37C(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24CA7D2D0[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_2108A4B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_21090C46C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_2108A4B7C();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24CA7D2D0[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_2108B9228((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_21090C620(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_2108ABF6C(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_21090C664(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_21090C75C((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_2108A4B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_21090C754(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_21090C75C(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_2108B327C();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_2108B2B1C();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_2108A4B7C();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_21090C958(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2108B3680((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21090C96C(unsigned int *a1@<X0>, unsigned int a2@<W1>, uint64_t *a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  std::__shared_weak_count *v11;
  CFMutableDictionaryRef v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  void *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  __int128 v36;
  unsigned int v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  void *value[2];

  v37 = a2;
  v39 = 0;
  v40 = 0;
  v38 = (uint64_t)&v39;
  sub_2109E55E0(&v38, (CFMutableDictionaryRef *)value);
  *(_OWORD *)a6 = *(_OWORD *)value;
  sub_2109E5580((uint64_t)&v38, v39);
  sub_21090D568(a6, (const void *)*MEMORY[0x24BDC56B8], &v37);
  v38 = *a1;
  sub_21090D6D4(a6, (const void *)*MEMORY[0x24BDC5708], &v38);
  value[0] = (void *)a1[1];
  sub_21090D6D4(a6, (const void *)*MEMORY[0x24BDC5650], (uint64_t *)value);
  if (a4 > 1)
    goto LABEL_43;
  v39 = 0;
  v40 = 0;
  v38 = (uint64_t)&v39;
  sub_2109E55E0(&v38, (CFMutableDictionaryRef *)value);
  v36 = *(_OWORD *)value;
  sub_2109E5580((uint64_t)&v38, v39);
  sub_2109E2B80((uint64_t)&v36, a3);
  v12 = *(CFMutableDictionaryRef *)a6;
  v11 = *(std::__shared_weak_count **)(a6 + 8);
  if (!v11)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldxr(p_shared_owners);
  while (__stxr(v14 + 1, p_shared_owners));
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    if (!v12)
      goto LABEL_36;
  }
  else
  {
LABEL_7:
    if (!v12)
      goto LABEL_36;
  }
  sub_21090D0F4(&v38, (uint64_t)&v36);
  v16 = (void *)v38;
  v17 = (std::__shared_weak_count *)v39;
  if (v39)
  {
    v18 = (unint64_t *)(v39 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
    value[0] = v16;
    value[1] = v17;
    do
      v20 = __ldxr(v18);
    while (__stxr(v20 + 1, v18));
    do
      v21 = __ldaxr(v18);
    while (__stlxr(v21 - 1, v18));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  else
  {
    value[0] = (void *)v38;
    value[1] = 0;
  }
  v22 = (std::__shared_weak_count *)v39;
  if (v39)
  {
    v23 = (unint64_t *)(v39 + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v26 = value[0];
  v25 = (std::__shared_weak_count *)value[1];
  if (value[1])
  {
    v27 = (unint64_t *)((char *)value[1] + 8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
    do
      v29 = __ldaxr(v27);
    while (__stlxr(v29 - 1, v27));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
      if (!v26)
        goto LABEL_31;
      goto LABEL_30;
    }
  }
  if (v26)
LABEL_30:
    CFDictionarySetValue(*(CFMutableDictionaryRef *)a6, (const void *)*MEMORY[0x24BDC5668], value[0]);
LABEL_31:
  v30 = (std::__shared_weak_count *)value[1];
  if (value[1])
  {
    v31 = (unint64_t *)((char *)value[1] + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
LABEL_36:
  v33 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
  if (!*((_QWORD *)&v36 + 1))
    goto LABEL_40;
  v34 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
  do
    v35 = __ldaxr(v34);
  while (__stlxr(v35 - 1, v34));
  if (v35)
  {
LABEL_40:
    if (a4)
      goto LABEL_43;
    goto LABEL_41;
  }
  ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
  std::__shared_weak_count::__release_weak(v33);
  if (!a4)
  {
LABEL_41:
    v38 = 0x4000;
    sub_21090D6D4(a6, (const void *)*MEMORY[0x24BDC56C8], &v38);
  }
LABEL_43:
  if (*(_BYTE *)(a5 + 8))
    sub_21090D6D4(a6, (const void *)*MEMORY[0x24BDC55D0], (uint64_t *)a5);
}

void sub_21090CCA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108A894C(v1);
  _Unwind_Resume(a1);
}

void sub_21090CCB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  uint64_t v15;

  sub_2108A894C((uint64_t)&a15);
  sub_2108A894C((uint64_t)&a9);
  sub_2108A894C(v15);
  _Unwind_Resume(a1);
}

void sub_21090CCE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13)
{
  uint64_t v13;

  sub_2109E5580((uint64_t)&a12, a13);
  sub_2108A894C(v13);
  _Unwind_Resume(a1);
}

void sub_21090CD08(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108A894C(v1);
  _Unwind_Resume(a1);
}

void sub_21090CD1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108A894C(v1);
  _Unwind_Resume(a1);
}

void sub_21090CD30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13)
{
  sub_2109E5580((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void sub_21090CD48(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2108A894C(v1);
  _Unwind_Resume(a1);
}

void sub_21090CD5C(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  std::__shared_weak_count *v4;
  CFDictionaryRef v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  const void *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v13;
  _BYTE v14[8];
  std::__shared_weak_count *v15;
  char v16;

  v5 = *(CFDictionaryRef *)a1;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      if (v5)
        goto LABEL_7;
LABEL_18:
      *a2 = 0;
      a2[16] = 0;
      return;
    }
  }
  if (!v5)
    goto LABEL_18;
LABEL_7:
  v9 = (const void *)*MEMORY[0x24BDC5668];
  *(_QWORD *)&v13 = 0;
  if (!v9)
    goto LABEL_18;
  if (!CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)a1, v9, (const void **)&v13))
    goto LABEL_18;
  sub_21090D344((const void *)v13, (uint64_t)v14);
  if (!v16)
    goto LABEL_18;
  sub_21090CEA0(&v13, (uint64_t)v14);
  *(_OWORD *)a2 = v13;
  a2[16] = 1;
  if (v16)
  {
    v10 = v15;
    if (v15)
    {
      v11 = (unint64_t *)&v15->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
}

void sub_21090CE8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_2108ABE3C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_21090CEA0(_QWORD *a1, uint64_t a2)
{
  const void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  v4 = *(const void **)a2;
  v5 = *(std::__shared_weak_count **)(a2 + 8);
  v17 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_21090CFB0(&v18, v4);
  v8 = v19;
  *a1 = v18;
  a1[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v11 = v19;
    if (v19)
    {
      v12 = (unint64_t *)&v19->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  if (!v17)
    return a1;
  v14 = (unint64_t *)&v17->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
    return a1;
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  return a1;
}

void sub_21090CF9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2108A894C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_21090CFB0(_QWORD *a1, CFTypeRef cf)
{
  _QWORD *v4;

  if (cf)
    CFRetain(cf);
  *a1 = cf;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24CA7D718;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = cf;
  a1[1] = v4;
  return a1;
}

void sub_21090D010(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_21090D028(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_21090D040(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BCC6FCLL);
}

void sub_21090D064(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    CFRelease(v1);
}

uint64_t sub_21090D084(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIP14__CFDictionaryEC1ES4_EUlS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIP14__CFDictionaryEC1ES4_EUlS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIP14__CFDictionaryEC1ES4_EUlS4_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIP14__CFDictionaryEC1ES4_EUlS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

_QWORD *sub_21090D0F4(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  CFTypeRef v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  v3 = *(std::__shared_weak_count **)(a2 + 8);
  v16 = *(CFTypeRef *)a2;
  v17 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  sub_21090D200(&v18, &v16);
  v6 = v19;
  *a1 = v18;
  a1[1] = v6;
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    v9 = v19;
    if (v19)
    {
      v10 = (unint64_t *)&v19->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  v12 = v17;
  if (!v17)
    return a1;
  v13 = (unint64_t *)&v17->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  return a1;
}

void sub_21090D1EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2108A894C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_21090D200(_QWORD *a1, CFTypeRef *a2)
{
  CFTypeRef v3;
  _QWORD *v4;

  v3 = *a2;
  if (*a2)
    CFRetain(*a2);
  *a1 = v3;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24CA7D768;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = v3;
  a1[1] = v4;
  return a1;
}

void sub_21090D260(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_21090D278(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_21090D290(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BCC6FCLL);
}

void sub_21090D2B4(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    CFRelease(v1);
}

uint64_t sub_21090D2D4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIPK14__CFDictionaryEC1ES5_EUlS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIPK14__CFDictionaryEC1ES5_EUlS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIPK14__CFDictionaryEC1ES5_EUlS5_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIPK14__CFDictionaryEC1ES5_EUlS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_21090D344(const void *a1@<X0>, uint64_t a2@<X8>)
{
  CFTypeID TypeID;
  const void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  const void *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  const void *v25;
  std::__shared_weak_count *v26;

  if (a1 && (TypeID = CFDictionaryGetTypeID(), CFGetTypeID(a1) == TypeID))
  {
    sub_21090CFB0(&v25, a1);
    v5 = v25;
    v6 = v26;
    v24 = v26;
    if (v26)
    {
      p_shared_owners = (unint64_t *)&v26->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    sub_21090CFB0(&v25, v5);
    v10 = v25;
    v9 = v26;
    if (v26)
    {
      v11 = (unint64_t *)&v26->__shared_owners_;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
      v13 = v26;
      if (v26)
      {
        v14 = (unint64_t *)&v26->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      do
        v16 = __ldxr(v11);
      while (__stxr(v16 + 1, v11));
      *(_QWORD *)a2 = v10;
      *(_QWORD *)(a2 + 8) = v9;
      do
        v17 = __ldxr(v11);
      while (__stxr(v17 + 1, v11));
      do
        v18 = __ldaxr(v11);
      while (__stlxr(v18 - 1, v11));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
      do
        v19 = __ldaxr(v11);
      while (__stlxr(v19 - 1, v11));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    else
    {
      *(_QWORD *)a2 = v25;
      *(_QWORD *)(a2 + 8) = 0;
    }
    *(_BYTE *)(a2 + 16) = 1;
    if (v6)
    {
      v20 = (unint64_t *)&v6->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    if (v24)
    {
      v22 = (unint64_t *)&v24->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
  }
}

void sub_21090D54C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_2108A894C((uint64_t)va);
  sub_2108ABE3C((uint64_t)va1);
  _Unwind_Resume(a1);
}

BOOL sub_21090D568(uint64_t a1, const void *a2, unsigned int *a3)
{
  std::__shared_weak_count *v6;
  CFMutableDictionaryRef v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  _BOOL8 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  void *value;
  std::__shared_weak_count *v22;
  unsigned int v23;

  v7 = *(CFMutableDictionaryRef *)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      if (v7)
        goto LABEL_7;
      return 0;
    }
  }
  if (!v7)
    return 0;
LABEL_7:
  v23 = *a3;
  sub_2109E4A18(&v23, (CFNumberRef *)&value);
  v12 = value;
  v11 = v22;
  if (v22)
  {
    v13 = (unint64_t *)&v22->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      v16 = v12 != 0;
      if (!v12)
        goto LABEL_14;
      goto LABEL_13;
    }
  }
  v16 = v12 != 0;
  if (v12)
LABEL_13:
    CFDictionarySetValue(*(CFMutableDictionaryRef *)a1, a2, value);
LABEL_14:
  v17 = v22;
  if (v22)
  {
    v18 = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return v16;
}

void sub_21090D6C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2108A894C((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_21090D6D4(uint64_t a1, const void *a2, uint64_t *a3)
{
  std::__shared_weak_count *v6;
  CFMutableDictionaryRef v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  _BOOL8 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  void *value;
  std::__shared_weak_count *v22;

  v7 = *(CFMutableDictionaryRef *)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      if (v7)
        goto LABEL_7;
      return 0;
    }
  }
  if (!v7)
    return 0;
LABEL_7:
  sub_2109E4B1C(a3, (CFNumberRef *)&value);
  v12 = value;
  v11 = v22;
  if (v22)
  {
    v13 = (unint64_t *)&v22->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      v16 = v12 != 0;
      if (!v12)
        goto LABEL_14;
      goto LABEL_13;
    }
  }
  v16 = v12 != 0;
  if (v12)
LABEL_13:
    CFDictionarySetValue(*(CFMutableDictionaryRef *)a1, a2, value);
LABEL_14:
  v17 = v22;
  if (v22)
  {
    v18 = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return v16;
}

void sub_21090D824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2108A894C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_21090D838(uint64_t a1)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __CVBuffer *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v2 = *(uint64_t **)(a1 + 8);
  if (v2)
  {
    v4 = *v2;
    v3 = (std::__shared_weak_count *)v2[1];
    if (!v3)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      if (v4)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v4)
        goto LABEL_9;
    }
  }
  if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/PixelBufferRef.cpp", 233, (uint64_t)"IsValid()", 9, (uint64_t)&unk_210A03CC7, 0, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
LABEL_9:
  v8 = *(_QWORD *)(a1 + 8);
  if (!v8)
    return CVPixelBufferGetPixelFormatType(0);
  v9 = *(__CVBuffer **)v8;
  v10 = *(std::__shared_weak_count **)(v8 + 8);
  if (!v10)
    return CVPixelBufferGetPixelFormatType(v9);
  v11 = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
  do
    v13 = __ldaxr(v11);
  while (__stlxr(v13 - 1, v11));
  if (v13)
    return CVPixelBufferGetPixelFormatType(v9);
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  return CVPixelBufferGetPixelFormatType(v9);
}

BOOL sub_21090D970(uint64_t a1)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __CVBuffer *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v2 = *(uint64_t **)(a1 + 8);
  if (v2)
  {
    v4 = *v2;
    v3 = (std::__shared_weak_count *)v2[1];
    if (!v3)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      if (v4)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v4)
        goto LABEL_9;
    }
  }
  if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/PixelBufferRef.cpp", 176, (uint64_t)"IsValid()", 9, (uint64_t)&unk_210A03CC7, 0, (void (*)(void **))sub_2109EDDB4))
  {
    abort();
  }
LABEL_9:
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = *(__CVBuffer **)v8;
    v10 = *(std::__shared_weak_count **)(v8 + 8);
    if (v10)
    {
      v11 = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
      do
        v13 = __ldaxr(v11);
      while (__stlxr(v13 - 1, v11));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  else
  {
    v9 = 0;
  }
  return CVPixelBufferIsPlanar(v9) != 0;
}

uint64_t sub_21090DA90(uint64_t a1, unsigned int a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t **v16;
  uint64_t *v17;

  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v6)
        goto LABEL_9;
    }
  }
  if (sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/PixelBufferRef.cpp", 250, (uint64_t)"IsValid()", 9, (uint64_t)&unk_210A03CC7, 0, (void (*)(void **))sub_2109EDDB4))
  {
    goto LABEL_18;
  }
LABEL_9:
  v15 = *(_QWORD *)(a1 + 8);
  v10 = v15;
  v11 = atomic_load((unint64_t *)(v15 + 104));
  if (v11 != -1)
  {
    v17 = &v15;
    v16 = &v17;
    std::__call_once((std::once_flag::_State_type *)(v15 + 104), &v16, (void (__cdecl *)(void *))sub_2109116C4);
  }
  if (a2 >= (unint64_t)((uint64_t)(*(_QWORD *)(v10 + 120) - *(_QWORD *)(v10 + 112)) >> 3)
    && sub_2109ED958("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_LearnedFeatures/library/Kit/CoreVideo/src/PixelBufferRef.cpp", 251, (uint64_t)"idx < p_->GetCachedBaseAddress().size()", 39, (uint64_t)&unk_210A03CC7, 0, (void (*)(void **))sub_2109EDDB4))
  {
LABEL_18:
    abort();
  }
  v12 = *(_QWORD *)(a1 + 8);
  v15 = v12;
  v13 = atomic_load((unint64_t *)(v12 + 104));
  if (v13 != -1)
  {
    v17 = &v15;
    v16 = &v17;
    std::__call_once((std::once_flag::_State_type *)(v12 + 104), &v16, (void (__cdecl *)(void *))sub_2109116C4);
  }
  return *(_QWORD *)(*(_QWORD *)(v12 + 112) + 8 * a2);
}

_QWORD *sub_21090DC14(_QWORD *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;

  v3 = *(uint64_t **)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  *a1 = &off_24CA7D7F8;
  a1[1] = v3;
  a1[2] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v3 = (uint64_t *)a1[1];
  }
  *a1 = &off_24CA7D7B8;
  if (v3)
  {
    v8 = *v3;
    v7 = (std::__shared_weak_count *)v3[1];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          return a1;
        goto LABEL_12;
      }
    }
    if (v8)
LABEL_12:
      sub_210912CA0(a1[1]);
  }
  return a1;
}

void sub_21090DCD8(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *v1 = v2;
  v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_21090DD20(_QWORD *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;

  v3 = *(uint64_t **)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  *a1 = &off_24CA7D7F8;
  a1[1] = v3;
  a1[2] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v3 = (uint64_t *)a1[1];
  }
  *a1 = &off_24CA7D7B8;
  if (v3)
  {
    v8 = *v3;
    v7 = (std::__shared_weak_count *)v3[1];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          return a1;
        goto LABEL_12;
      }
    }
    if (v8)
LABEL_12:
      sub_210912CA0(a1[1]);
  }
  return a1;
}

void sub_21090DDE4(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *v1 = v2;
  v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_21090DE2C(_QWORD *a1)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = (uint64_t *)a1[1];
  if (v2)
  {
    v4 = *v2;
    v3 = (std::__shared_weak_count *)v2[1];
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
        if (!v4)
          goto LABEL_9;
        goto LABEL_8;
      }
    }
    if (v4)
LABEL_8:
      sub_210912E7C(a1[1]);
  }
LABEL_9:
  *a1 = &off_24CA7D7F8;
  v8 = (std::__shared_weak_count *)a1[2];
  if (!v8)
    return a1;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
    return a1;
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void sub_21090DF18(_QWORD *a1)
{
  sub_21090DE2C(a1);
  JUMPOUT(0x212BCC6FCLL);
}

_QWORD *sub_21090DF3C(_QWORD *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;

  v3 = *(uint64_t **)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  *a1 = &off_24CA7D7F8;
  a1[1] = v3;
  a1[2] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v3 = (uint64_t *)a1[1];
  }
  *a1 = &off_24CA7D7D8;
  if (v3)
  {
    v8 = *v3;
    v7 = (std::__shared_weak_count *)v3[1];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          return a1;
        goto LABEL_12;
      }
    }
    if (v8)
LABEL_12:
      sub_210912D90(a1[1]);
  }
  return a1;
}

void sub_21090E000(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *v1 = v2;
  v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_21090E048(_QWORD *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;

  v3 = *(uint64_t **)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  *a1 = &off_24CA7D7F8;
  a1[1] = v3;
  a1[2] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v3 = (uint64_t *)a1[1];
  }
  *a1 = &off_24CA7D7D8;
  if (v3)
  {
    v8 = *v3;
    v7 = (std::__shared_weak_count *)v3[1];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          return a1;
        goto LABEL_12;
      }
    }
    if (v8)
LABEL_12:
      sub_210912D90(a1[1]);
  }
  return a1;
}

void sub_21090E10C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *v1 = v2;
  v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_21090E154(_QWORD *a1)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = (uint64_t *)a1[1];
  if (v2)
  {
    v4 = *v2;
    v3 = (std::__shared_weak_count *)v2[1];
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
        if (!v4)
          goto LABEL_9;
        goto LABEL_8;
      }
    }
    if (v4)
LABEL_8:
      sub_210912F6C(a1[1]);
  }
LABEL_9:
  *a1 = &off_24CA7D7F8;
  v8 = (std::__shared_weak_count *)a1[2];
  if (!v8)
    return a1;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
    return a1;
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void sub_21090E240(_QWORD *a1)
{
  sub_21090E154(a1);
  JUMPOUT(0x212BCC6FCLL);
}

_QWORD *sub_21090E264(_QWORD *a1, CFTypeRef cf)
{
  _QWORD *v4;

  if (cf)
    CFRetain(cf);
  *a1 = cf;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24CA7D9B8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = cf;
  a1[1] = v4;
  return a1;
}

void sub_21090E2C4(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_21090E2DC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *sub_21090E2F0(_QWORD *a1, std::__shared_weak_count_vtbl *cf, int a3, int a4)
{
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v28;

  if (a3 && cf)
    CFRetain(cf);
  v7 = (std::__shared_weak_count *)operator new();
  v8 = v7;
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA7D958;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = cf;
  v28 = v7;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (v28)
  {
    v12 = (unint64_t *)&v28->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *a1 = &off_24CA7D7F8;
  v14 = (char *)operator new(0xA0uLL);
  v15 = v14;
  *((_QWORD *)v14 + 1) = 0;
  *((_QWORD *)v14 + 2) = 0;
  *(_QWORD *)v14 = &off_24CA7D8A8;
  v16 = v14 + 24;
  if (v28)
  {
    v17 = (unint64_t *)&v28->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    *((_QWORD *)v14 + 3) = cf;
    *((_QWORD *)v14 + 4) = v28;
    do
      v19 = __ldxr(v17);
    while (__stxr(v19 + 1, v17));
  }
  else
  {
    *((_QWORD *)v14 + 3) = cf;
    *((_QWORD *)v14 + 4) = 0;
  }
  *((_DWORD *)v14 + 10) = a4;
  *((_QWORD *)v14 + 6) = a4 == 1;
  *((_QWORD *)v14 + 7) = a4 == 2;
  *((_QWORD *)v14 + 8) = 850045863;
  v20 = 0uLL;
  *(_OWORD *)(v14 + 72) = 0u;
  *(_OWORD *)(v14 + 88) = 0u;
  *(_OWORD *)(v14 + 104) = 0u;
  *((_QWORD *)v14 + 15) = 0;
  if (v28)
  {
    v21 = (unint64_t *)&v28->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
      v20 = 0uLL;
    }
  }
  *((_OWORD *)v15 + 8) = v20;
  *((_OWORD *)v15 + 9) = v20;
  a1[1] = v16;
  a1[2] = v15;
  if (v28)
  {
    v23 = (unint64_t *)&v28->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (v28)
  {
    v25 = (unint64_t *)&v28->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  return a1;
}

void sub_21090E538(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_21090E54C()
{
  __break(1u);
}

void sub_21090E578()
{
  __cxa_end_catch();
  JUMPOUT(0x21090E580);
}

void sub_21090E58C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_2108A894C((uint64_t)&a11);
  sub_2108A894C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_21090E5A8(uint64_t a1, unsigned int *a2, unsigned int a3, uint64_t *a4, uint64_t a5)
{
  std::runtime_error *exception;
  int *v8;
  std::string v9;
  uint64_t (**v10)(_QWORD);
  __int128 v11;
  char v12;

  sub_21090F338(a2, a3, a4, a5, (uint64_t)&v10);
  if (!v12)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v8 = (int *)sub_21090E824((uint64_t)&v10);
    sub_21090FEF4("Failed to create CVPixelBuffer: ", v8);
    std::runtime_error::runtime_error(exception, &v9);
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  *(_QWORD *)a1 = &off_24CA7D7F8;
  *(_OWORD *)(a1 + 8) = v11;
  v11 = 0uLL;
  return (*v10)(&v10);
}

void sub_21090E674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      sub_21090E864((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

_QWORD *sub_21090E6B4(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24CA7D7F8;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_21090E728(uint64_t a1, unsigned int *a2, unsigned int a3, uint64_t *a4, unsigned int a5)
{
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  _BYTE v13[16];
  __int128 v14;
  _BYTE v15[24];

  v13[0] = 0;
  v13[8] = 0;
  sub_21090C96C(a2, a3, a4, a5, (uint64_t)v13, (uint64_t)v15);
  v14 = *(_OWORD *)v15;
  sub_21090E5A8((uint64_t)v15, a2, a3, a4, (uint64_t)&v14);
  *(_QWORD *)a1 = &off_24CA7D7F8;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)&v15[8];
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (!*((_QWORD *)&v14 + 1))
    return a1;
  v10 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
    return a1;
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  return a1;
}

void sub_21090E810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2108A894C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21090E824(uint64_t result)
{
  _QWORD *exception;

  if (*(_BYTE *)(result + 32))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CA7DA08;
    __cxa_throw(exception, (struct type_info *)&unk_24CA7ABC8, (void (*)(void *))std::exception::~exception);
  }
  return result;
}

uint64_t sub_21090E864(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 32))
  {
    (**(void (***)(uint64_t))a1)(a1);
    return a1;
  }
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)(a1 + 8));
  return a1;
}

